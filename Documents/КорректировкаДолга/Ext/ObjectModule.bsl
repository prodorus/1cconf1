Перем мУдалятьДвижения;

Перем мВалютаРегламентированногоУчета Экспорт;

Перем мУчетнаяПолитикаБух;

Перем РежимВосстановленияПоследовательностейРасчетов Экспорт;

///////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда

// Функция формирует табличный документ с печатной формой накладной,
// разработанной методистами
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьДокумента()

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.УстановитьПараметр("УвеличениеДолга", Перечисления.ВидыЗадолженности.Кредиторская);
	Запрос.УстановитьПараметр("УменьшениеДолга", Перечисления.ВидыЗадолженности.Дебиторская);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	КорректировкаДолга.Ссылка.Номер КАК Номер,
	|	КорректировкаДолга.Ссылка.Дата КАК Дата,
	|	КорректировкаДолга.Ссылка.КонтрагентДебитор КАК Получатель,
	|	КорректировкаДолга.Ссылка.Организация КАК Поставщик,
	|	КорректировкаДолга.Ссылка.Организация КАК Организация,
	|	КорректировкаДолга.НомерСтроки КАК НомерСтроки,
	|	КорректировкаДолга.ДоговорКонтрагента КАК ДоговорВзаиморасчетов,
	|	КорректировкаДолга.ДоговорКонтрагента.Представление КАК ПредставлениеДоговора,
	|	КорректировкаДолга.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК Валюта,
	|	КорректировкаДолга.Сделка КАК Сделка,
	|	КорректировкаДолга.Сделка.Представление КАК ПредставлениеСделки,
	|	ВЫБОР
	|		КОГДА КорректировкаДолга.ВидЗадолженности = &УвеличениеДолга
	|			ТОГДА КорректировкаДолга.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК УвеличениеДолгаКонтрагента,
	|	ВЫБОР
	|		КОГДА КорректировкаДолга.ВидЗадолженности = &УменьшениеДолга
	|			ТОГДА КорректировкаДолга.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК УменьшениеДолгаКонтрагента
	|ИЗ
	|	Документ.КорректировкаДолга.СуммыДолга КАК КорректировкаДолга
	|ГДЕ
	|	КорректировкаДолга.Ссылка = &ТекущийДокумент
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|ИТОГИ ПО
	|	Валюта";


	Шапка = Запрос.Выполнить();

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_КорректировкаДолга_КорректировкаДолга";

	Макет = ПолучитьМакет("КорректировкаДолга");

	// Выводим шапку накладной
	ЗаголовокВыведен = Ложь;
	НомерПП = 0;
	
	ВыборкаВалют       = Шапка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаВалют.Следующий() Цикл
		
		ИтогоВПлюс  = 0;
		ИтогоВМинус = 0;
		ВыборкаСтрокТовары = ВыборкаВалют.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаСтрокТовары.Следующий() Цикл
			
			Если НЕ ЗаголовокВыведен Тогда
				
				ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
				ОбластьМакета.Параметры.ТекстЗаголовка = ОбщегоНазначения.СформироватьЗаголовокДокумента(ВыборкаСтрокТовары, "Корректировка долга");
				ТабДокумент.Вывести(ОбластьМакета);

				ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
				ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокТовары);
				ОбластьМакета.Параметры.ПредставлениеПоставщика = ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ВыборкаСтрокТовары.Организация, ВыборкаСтрокТовары.Дата), "ПолноеНаименование,");
				ТабДокумент.Вывести(ОбластьМакета);

				ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
				ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокТовары);
				ОбластьМакета.Параметры.ПредставлениеПолучателя = ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ВыборкаСтрокТовары.Получатель, ВыборкаСтрокТовары.Дата), "ПолноеНаименование,");
				ТабДокумент.Вывести(ОбластьМакета);

				ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицы");
				ЗаголовокВыведен = Истина;
				ТабДокумент.Вывести(ОбластьМакета);
				
			КонецЕсли;
			
			ОбластьМакета = Макет.ПолучитьОбласть("Строка");
			НомерПП = НомерПП + 1;
			ОбластьМакета.Параметры.НомерПП = НомерПП;
			
			ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокТовары);
			ТабДокумент.Вывести(ОбластьМакета);

			ИтогоВПлюс  = ИтогоВПлюс  + ВыборкаСтрокТовары.УвеличениеДолгаКонтрагента;
			ИтогоВМИнус = ИтогоВМИнус + ВыборкаСтрокТовары.УменьшениеДолгаКонтрагента;

		КонецЦикла;
		
		ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
		ОбластьМакета.Параметры.ИтогоВПлюс  = ИтогоВПлюс;
		ОбластьМакета.Параметры.ИтогоВМИнус = ИтогоВМИнус;
		ОбластьМакета.Параметры.Валюта      = ВыборкаВалют.Валюта;
		ТабДокумент.Вывести(ОбластьМакета);
		
	КонецЦикла;

	
	Возврат ТабДокумент;

КонецФункции // ПечатьДокумента()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	Если ИмяМакета = "КорректировкаДолга" Тогда		
		// Получить экземпляр документа на печать
		ТабДокумент = ПечатьДокумента();
		
	ИначеЕсли ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда

		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
		
		Если ТабДокумент = Неопределено Тогда
			Возврат
		КонецЕсли; 
		
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()), Ссылка);

КонецПроцедуры // Печать

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("КорректировкаДолга","Корректировка долга");

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

// Заполняет документ остатками дебиторской задолженности контрагента по данным упр.учета
//
Процедура ЗаполнитьОстаткамиДебиторскойЗадолженностиУпр() Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Контрагент",  КонтрагентДебитор);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ДатаДокумента", Дата);
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета", мВалютаРегламентированногоУчета);
	Запрос.УстановитьПараметр("ВалютаДокумента", ВалютаДокумента);
	
	Запрос.Текст = 
	 "ВЫБРАТЬ
	 |	ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента КАК ДоговорКонтрагента,
	 |	ВзаиморасчетыСКонтрагентами.Сделка КАК Сделка,
	 |	ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетовОстаток КАК СуммаВзаиморасчетовОстаток,
	 |	ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов
	 |ПОМЕСТИТЬ ВзаиморасчетыСКонтрагентами
	 |ИЗ
	 |	РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(
	 |			,
	 |			Контрагент = &Контрагент
	 |				И Организация = &Организация
	 |				И (ДоговорКонтрагента.ВалютаВзаиморасчетов = &ВалютаДокумента
	 |					ИЛИ &ВалютаДокумента = &ВалютаРегламентированногоУчета
	 |						И ДоговорКонтрагента.РасчетыВУсловныхЕдиницах = ИСТИНА)) КАК ВзаиморасчетыСКонтрагентами
	 |ГДЕ
	 |	ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетовОстаток > 0
	 |
	 |ИНДЕКСИРОВАТЬ ПО
	 |	ДоговорКонтрагента,
	 |	Сделка
	 |;
	 |
	 |////////////////////////////////////////////////////////////////////////////////
	 |ВЫБРАТЬ
	 |	ВзаиморасчетыПоДокументам.ДоговорКонтрагента КАК ДоговорКонтрагента,
	 |	ВзаиморасчетыПоДокументам.Сделка КАК Сделка,
	 |	ВзаиморасчетыПоДокументам.ДокументРасчетовСКонтрагентом КАК ДокументРасчетовСКонтрагентом,
	 |	ВзаиморасчетыПоДокументам.СуммаВзаиморасчетовОстаток КАК СуммаВзаиморасчетовОстаток,
	 |	ВзаиморасчетыПоДокументам.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	 |	ВзаиморасчетыПоДокументам.СуммаРеглОстаток КАК СуммаРеглОстаток
	 |ПОМЕСТИТЬ ВзаиморасчетыПоДокументам
	 |ИЗ
	 |	РегистрНакопления.ВзаиморасчетыСКонтрагентамиПоДокументамРасчетов.Остатки(
	 |			,
	 |			Контрагент = &Контрагент
	 |				И Организация = &Организация
	 |				И УпрУчет = ИСТИНА
	 |				И (ДоговорКонтрагента.ВалютаВзаиморасчетов = &ВалютаДокумента
	 |					ИЛИ &ВалютаДокумента = &ВалютаРегламентированногоУчета
	 |						И ДоговорКонтрагента.РасчетыВУсловныхЕдиницах = ИСТИНА)) КАК ВзаиморасчетыПоДокументам
	 |ГДЕ
	 |	ВзаиморасчетыПоДокументам.СуммаВзаиморасчетовОстаток > 0
	 |
	 |ИНДЕКСИРОВАТЬ ПО
	 |	ДоговорКонтрагента,
	 |	Сделка
	 |;
	 |
	 |////////////////////////////////////////////////////////////////////////////////
	 |ВЫБРАТЬ
	 |	ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента КАК ДоговорКонтрагента,
	 |	ВзаиморасчетыСКонтрагентами.Сделка КАК Сделка,
	 |	ЕСТЬNULL(ВзаиморасчетыПоДокументам.ДокументРасчетовСКонтрагентом, НЕОПРЕДЕЛЕНО) КАК ДокументРасчетовСКонтрагентом,
	 |	ЕСТЬNULL(ВзаиморасчетыПоДокументам.СуммаВзаиморасчетовОстаток, ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетовОстаток) КАК СуммаВзаиморасчетовОстаток,
	 |	ВЫБОР
	 |		КОГДА ВзаиморасчетыСКонтрагентами.ВалютаВзаиморасчетов = &ВалютаРегламентированногоУчета
	 |			ТОГДА ЕСТЬNULL(ВзаиморасчетыПоДокументам.СуммаВзаиморасчетовОстаток, ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетовОстаток)
	 |		КОГДА ЕСТЬNULL(ВзаиморасчетыПоДокументам.СуммаРеглОстаток, 0) = 0
	 |			ТОГДА ВЫБОР
	 |					КОГДА КурсыВалютСрезПоследних.Кратность ЕСТЬ NULL 
	 |							ИЛИ КурсыВалютСрезПоследних.Кратность = 0
	 |						ТОГДА ЕСТЬNULL(ВзаиморасчетыПоДокументам.СуммаВзаиморасчетовОстаток, ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетовОстаток) * ЕСТЬNULL(КурсыВалютСрезПоследних.Курс, 0)
	 |					ИНАЧЕ ЕСТЬNULL(ВзаиморасчетыПоДокументам.СуммаВзаиморасчетовОстаток, ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетовОстаток) * ЕСТЬNULL(КурсыВалютСрезПоследних.Курс, 0) / КурсыВалютСрезПоследних.Кратность
	 |				КОНЕЦ
	 |		ИНАЧЕ ВзаиморасчетыПоДокументам.СуммаРеглОстаток
	 |	КОНЕЦ КАК СуммаРеглОстаток,
	 |	ВзаиморасчетыСКонтрагентами.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	 |	ЕСТЬNULL(КурсыВалютСрезПоследних.Курс, 0) КАК КурсВзаиморасчетов,
	 |	ЕСТЬNULL(КурсыВалютСрезПоследних.Кратность, 0) КАК КратностьВзаиморасчетов
	 |ИЗ
	 |	ВзаиморасчетыСКонтрагентами КАК ВзаиморасчетыСКонтрагентами
	 |		ЛЕВОЕ СОЕДИНЕНИЕ ВзаиморасчетыПоДокументам КАК ВзаиморасчетыПоДокументам
	 |		ПО ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента = ВзаиморасчетыПоДокументам.ДоговорКонтрагента
	 |			И ВзаиморасчетыСКонтрагентами.Сделка = ВзаиморасчетыПоДокументам.Сделка
	 |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаДокумента, ) КАК КурсыВалютСрезПоследних
	 |		ПО ВзаиморасчетыСКонтрагентами.ВалютаВзаиморасчетов = КурсыВалютСрезПоследних.Валюта
	 |
	 |ОБЪЕДИНИТЬ ВСЕ
	 |
	 |ВЫБРАТЬ
	 |	ВзаиморасчетыПоДокументам.ДоговорКонтрагента,
	 |	ВзаиморасчетыПоДокументам.Сделка,
	 |	ВзаиморасчетыПоДокументам.ДокументРасчетовСКонтрагентом,
	 |	ВзаиморасчетыПоДокументам.СуммаВзаиморасчетовОстаток,
	 |	ВЫБОР
	 |		КОГДА ВзаиморасчетыПоДокументам.ВалютаВзаиморасчетов = &ВалютаРегламентированногоУчета
	 |			ТОГДА ВзаиморасчетыПоДокументам.СуммаВзаиморасчетовОстаток
	 |		КОГДА ЕСТЬNULL(ВзаиморасчетыПоДокументам.СуммаРеглОстаток, 0) = 0
	 |			ТОГДА ВЫБОР
	 |					КОГДА КурсыВалютСрезПоследних.Кратность ЕСТЬ NULL 
	 |							ИЛИ КурсыВалютСрезПоследних.Кратность = 0
	 |						ТОГДА ВзаиморасчетыПоДокументам.СуммаВзаиморасчетовОстаток * ЕСТЬNULL(КурсыВалютСрезПоследних.Курс, 0)
	 |					ИНАЧЕ ВзаиморасчетыПоДокументам.СуммаВзаиморасчетовОстаток * ЕСТЬNULL(КурсыВалютСрезПоследних.Курс, 0) / КурсыВалютСрезПоследних.Кратность
	 |				КОНЕЦ
	 |		ИНАЧЕ ВзаиморасчетыПоДокументам.СуммаРеглОстаток
	 |	КОНЕЦ,
	 |	ВзаиморасчетыПоДокументам.ВалютаВзаиморасчетов,
	 |	ЕСТЬNULL(КурсыВалютСрезПоследних.Курс, 0),
	 |	ЕСТЬNULL(КурсыВалютСрезПоследних.Кратность, 0)
	 |ИЗ
	 |	ВзаиморасчетыПоДокументам КАК ВзаиморасчетыПоДокументам
	 |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаДокумента, ) КАК КурсыВалютСрезПоследних
	 |		ПО ВзаиморасчетыПоДокументам.ВалютаВзаиморасчетов = КурсыВалютСрезПоследних.Валюта
	 |ГДЕ
	 |	НЕ (ВзаиморасчетыПоДокументам.ДоговорКонтрагента, ВзаиморасчетыПоДокументам.Сделка) В
	 |				(ВЫБРАТЬ
	 |					ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента,
	 |					ВзаиморасчетыСКонтрагентами.Сделка
	 |				ИЗ
	 |					ВзаиморасчетыСКонтрагентами)";

	РезультатЗапроса = Запрос.Выполнить();

	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока                               = СуммыДолга.Добавить();
		НоваяСтрока.ДоговорКонтрагента            = Выборка.ДоговорКонтрагента;
		НоваяСтрока.Сделка                        = Выборка.Сделка;
		НоваяСтрока.ДокументРасчетовСКонтрагентом = Выборка.ДокументРасчетовСКонтрагентом;
		НоваяСтрока.КурсВзаиморасчетов            = Выборка.КурсВзаиморасчетов;
		НоваяСтрока.КратностьВзаиморасчетов       = Выборка.КратностьВзаиморасчетов;
		НоваяСтрока.ВидЗадолженности              = Перечисления.ВидыЗадолженности.Дебиторская;
		НоваяСтрока.Сумма                         = Выборка.СуммаВзаиморасчетовОстаток;
		НоваяСтрока.СуммаРегл                     = Выборка.СуммаРеглОстаток;
	КонецЦикла;
	
КонецПроцедуры

// Заполняет документ остатками кредиторской задолженности контрагента по данным упр.учета
//
Процедура ЗаполнитьОстаткамиКредиторскойЗадолженностиУпр() Экспорт
	
	Запрос = Новый Запрос;
	
	Если ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета Тогда
		Запрос.УстановитьПараметр("Контрагент",  КонтрагентКредитор);
	Иначе
		Запрос.УстановитьПараметр("Контрагент",  КонтрагентДебитор);
	КонецЕсли;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ДатаДокумента", Дата);
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета", мВалютаРегламентированногоУчета);
	Запрос.УстановитьПараметр("ВалютаДокумента", ВалютаДокумента);
	
	Запрос.Текст = 
	 "ВЫБРАТЬ
	 |	ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента КАК ДоговорКонтрагента,
	 |	ВзаиморасчетыСКонтрагентами.Сделка КАК Сделка,
	 |	ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетовОстаток КАК СуммаВзаиморасчетовОстаток,
	 |	ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов
	 |ПОМЕСТИТЬ ВзаиморасчетыСКонтрагентами
	 |ИЗ
	 |	РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(
	 |			,
	 |			Контрагент = &Контрагент
	 |				И Организация = &Организация
	 |				И (ДоговорКонтрагента.ВалютаВзаиморасчетов = &ВалютаДокумента
	 |					ИЛИ &ВалютаДокумента = &ВалютаРегламентированногоУчета
	 |						И ДоговорКонтрагента.РасчетыВУсловныхЕдиницах = ИСТИНА)) КАК ВзаиморасчетыСКонтрагентами
	 |ГДЕ
	 |	ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетовОстаток < 0
	 |
	 |ИНДЕКСИРОВАТЬ ПО
	 |	ДоговорКонтрагента,
	 |	Сделка
	 |;
	 |
	 |////////////////////////////////////////////////////////////////////////////////
	 |ВЫБРАТЬ
	 |	ВзаиморасчетыПоДокументам.ДоговорКонтрагента КАК ДоговорКонтрагента,
	 |	ВзаиморасчетыПоДокументам.Сделка КАК Сделка,
	 |	ВзаиморасчетыПоДокументам.ДокументРасчетовСКонтрагентом КАК ДокументРасчетовСКонтрагентом,
	 |	ВзаиморасчетыПоДокументам.СуммаВзаиморасчетовОстаток КАК СуммаВзаиморасчетовОстаток,
	 |	ВзаиморасчетыПоДокументам.СуммаРеглОстаток КАК СуммаРеглОстаток,
	 |	ВзаиморасчетыПоДокументам.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов
	 |ПОМЕСТИТЬ ВзаиморасчетыПоДокументам
	 |ИЗ
	 |	РегистрНакопления.ВзаиморасчетыСКонтрагентамиПоДокументамРасчетов.Остатки(
	 |			,
	 |			Контрагент = &Контрагент
	 |				И Организация = &Организация
	 |				И УпрУчет = ИСТИНА
	 |				И (ДоговорКонтрагента.ВалютаВзаиморасчетов = &ВалютаДокумента
	 |					ИЛИ &ВалютаДокумента = &ВалютаРегламентированногоУчета
	 |						И ДоговорКонтрагента.РасчетыВУсловныхЕдиницах = ИСТИНА)) КАК ВзаиморасчетыПоДокументам
	 |ГДЕ
	 |	ВзаиморасчетыПоДокументам.СуммаВзаиморасчетовОстаток < 0
	 |
	 |ИНДЕКСИРОВАТЬ ПО
	 |	ДоговорКонтрагента,
	 |	Сделка
	 |;
	 |
	 |////////////////////////////////////////////////////////////////////////////////
	 |ВЫБРАТЬ
	 |	ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента,
	 |	ВзаиморасчетыСКонтрагентами.Сделка,
	 |	ЕСТЬNULL(ВзаиморасчетыПоДокументам.ДокументРасчетовСКонтрагентом, НЕОПРЕДЕЛЕНО) КАК ДокументРасчетовСКонтрагентом,
	 |	ЕСТЬNULL(ВзаиморасчетыПоДокументам.СуммаВзаиморасчетовОстаток, ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетовОстаток) КАК СуммаВзаиморасчетовОстаток,
	 |	ВЫБОР
	 |		КОГДА ВзаиморасчетыСКонтрагентами.ВалютаВзаиморасчетов = &ВалютаРегламентированногоУчета
	 |			ТОГДА ЕСТЬNULL(ВзаиморасчетыПоДокументам.СуммаВзаиморасчетовОстаток, ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетовОстаток)
	 |		КОГДА ЕСТЬNULL(ВзаиморасчетыПоДокументам.СуммаРеглОстаток, 0) = 0
	 |			ТОГДА ВЫБОР
	 |					КОГДА КурсыВалютСрезПоследних.Кратность ЕСТЬ NULL 
	 |							ИЛИ КурсыВалютСрезПоследних.Кратность = 0
	 |						ТОГДА ЕСТЬNULL(ВзаиморасчетыПоДокументам.СуммаВзаиморасчетовОстаток, ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетовОстаток) * ЕСТЬNULL(КурсыВалютСрезПоследних.Курс, 0)
	 |					ИНАЧЕ ЕСТЬNULL(ВзаиморасчетыПоДокументам.СуммаВзаиморасчетовОстаток, ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетовОстаток) * ЕСТЬNULL(КурсыВалютСрезПоследних.Курс, 0) / КурсыВалютСрезПоследних.Кратность
	 |				КОНЕЦ
	 |		ИНАЧЕ ВзаиморасчетыПоДокументам.СуммаРеглОстаток
	 |	КОНЕЦ КАК СуммаРеглОстаток,
	 |	ВзаиморасчетыСКонтрагентами.ВалютаВзаиморасчетов,
	 |	ЕСТЬNULL(КурсыВалютСрезПоследних.Курс, 0) КАК КурсВзаиморасчетов,
	 |	ЕСТЬNULL(КурсыВалютСрезПоследних.Кратность, 0) КАК КратностьВзаиморасчетов
	 |ИЗ
	 |	ВзаиморасчетыСКонтрагентами КАК ВзаиморасчетыСКонтрагентами
	 |		ЛЕВОЕ СОЕДИНЕНИЕ ВзаиморасчетыПоДокументам КАК ВзаиморасчетыПоДокументам
	 |		ПО ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента = ВзаиморасчетыПоДокументам.ДоговорКонтрагента
	 |			И ВзаиморасчетыСКонтрагентами.Сделка = ВзаиморасчетыПоДокументам.Сделка
	 |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаДокумента, ) КАК КурсыВалютСрезПоследних
	 |		ПО ВзаиморасчетыСКонтрагентами.ВалютаВзаиморасчетов = КурсыВалютСрезПоследних.Валюта
	 |
	 |ОБЪЕДИНИТЬ ВСЕ
	 |
	 |ВЫБРАТЬ
	 |	ВзаиморасчетыПоДокументам.ДоговорКонтрагента,
	 |	ВзаиморасчетыПоДокументам.Сделка,
	 |	ВзаиморасчетыПоДокументам.ДокументРасчетовСКонтрагентом,
	 |	ВзаиморасчетыПоДокументам.СуммаВзаиморасчетовОстаток,
	 |	ВЫБОР
	 |		КОГДА ВзаиморасчетыПоДокументам.ВалютаВзаиморасчетов = &ВалютаРегламентированногоУчета
	 |			ТОГДА ВзаиморасчетыПоДокументам.СуммаВзаиморасчетовОстаток
	 |		КОГДА ВзаиморасчетыПоДокументам.СуммаРеглОстаток = 0
	 |			ТОГДА ВЫБОР
	 |					КОГДА КурсыВалютСрезПоследних.Кратность ЕСТЬ NULL 
	 |							ИЛИ КурсыВалютСрезПоследних.Кратность = 0
	 |						ТОГДА ВзаиморасчетыПоДокументам.СуммаВзаиморасчетовОстаток * ЕСТЬNULL(КурсыВалютСрезПоследних.Курс, 0)
	 |					ИНАЧЕ ВзаиморасчетыПоДокументам.СуммаВзаиморасчетовОстаток * ЕСТЬNULL(КурсыВалютСрезПоследних.Курс, 0) / КурсыВалютСрезПоследних.Кратность
	 |				КОНЕЦ
	 |		ИНАЧЕ ВзаиморасчетыПоДокументам.СуммаРеглОстаток
	 |	КОНЕЦ,
	 |	ВзаиморасчетыПоДокументам.ВалютаВзаиморасчетов,
	 |	ЕСТЬNULL(КурсыВалютСрезПоследних.Курс, 0),
	 |	ЕСТЬNULL(КурсыВалютСрезПоследних.Кратность, 0)
	 |ИЗ
	 |	ВзаиморасчетыПоДокументам КАК ВзаиморасчетыПоДокументам
	 |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаДокумента, ) КАК КурсыВалютСрезПоследних
	 |		ПО ВзаиморасчетыПоДокументам.ВалютаВзаиморасчетов = КурсыВалютСрезПоследних.Валюта
	 |ГДЕ
	 |	НЕ (ВзаиморасчетыПоДокументам.ДоговорКонтрагента, ВзаиморасчетыПоДокументам.Сделка) В
	 |				(ВЫБРАТЬ
	 |					ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента,
	 |					ВзаиморасчетыСКонтрагентами.Сделка
	 |				ИЗ
	 |					ВзаиморасчетыСКонтрагентами)";

	РезультатЗапроса = Запрос.Выполнить();

	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока                               = СуммыДолга.Добавить();
		НоваяСтрока.ДоговорКонтрагента            = Выборка.ДоговорКонтрагента;
		НоваяСтрока.Сделка                        = Выборка.Сделка;
		НоваяСтрока.ДокументРасчетовСКонтрагентом = Выборка.ДокументРасчетовСКонтрагентом;
		НоваяСтрока.КурсВзаиморасчетов            = Выборка.КурсВзаиморасчетов;
		НоваяСтрока.КратностьВзаиморасчетов       = Выборка.КратностьВзаиморасчетов;
		НоваяСтрока.ВидЗадолженности              = Перечисления.ВидыЗадолженности.Кредиторская;
		НоваяСтрока.Сумма                         = - Выборка.СуммаВзаиморасчетовОстаток;
		НоваяСтрока.СуммаРегл                     = - Выборка.СуммаРеглОстаток;
	КонецЦикла;
	
КонецПроцедуры

Процедура ДополнитьСтруктуруПолейСуммДолгаРегл(СтруктураПолей)
	
	СтруктураПолей.Вставить("НомерСтрокиДокумента"          , "НомерСтроки");


	СтруктураПолей.Вставить("СчетУчетаРасчетовСКонтрагентом"          , "СчетУчетаРасчетов");
	СтруктураПолей.Вставить("СчетУчетаРасчетовПоАвансам"              , "СчетУчетаАвансов");

	СтруктураПолей.Вставить("СчетУчетаРасчетов"          , "СчетУчетаРасчетов");
	СтруктураПолей.Вставить("СчетУчетаАвансов"           , "СчетУчетаАвансов");
	
	СтруктураПолей.Вставить("СуммаПлатежа"               , "СуммаРегл");
	СтруктураПолей.Вставить("СуммаНУ"                    , "СуммаНУ");
	
	СтруктураПолей.Вставить("КоррСчет"              					  , "Ссылка.СчетДт");
	СтруктураПолей.Вставить("КоррСубконто1"              				  , "Ссылка.СубконтоДт1");
	СтруктураПолей.Вставить("КоррСубконто2"              				  , "Ссылка.СубконтоДт2");
	СтруктураПолей.Вставить("КоррСубконто3"              				  , "Ссылка.СубконтоДт3");
	
	Если ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.СписаниеЗадолженности и ОтражатьВНалоговомУчете Тогда
		СтруктураПолей.Вставить("СуммаНУ"              					  , "СуммаНУ");
		
		СтруктураПолей.Вставить("КоррСчетНУ"              					  , "Ссылка.СчетДтНУ");
		СтруктураПолей.Вставить("КоррСубконтоНУ1"              				  , "Ссылка.СубконтоДтНУ1");
		СтруктураПолей.Вставить("КоррСубконтоНУ2"              				  , "Ссылка.СубконтоДтНУ2");
		СтруктураПолей.Вставить("КоррСубконтоНУ3"              				  , "Ссылка.СубконтоДтНУ3");
		
	КонецЕсли; 
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

Процедура УдалитьДвиженияДляВосстановленияПоследовательностейРасчетов(Отказ)
	
	Попытка
		
		СтруктураРегистровНакопления = Новый Структура("
		|НДСВключенныйВСтоимость, НДСКосвенныеРасходы, НДСНачисленный, НДСПартииТоваров,
		|НДСПредъявленный, НДСПредъявленныйРеализация0, НДСРеализация0,
		|РасчетыПоПриобретениюВУсловныхЕдиницахОрганизации, РасчетыПоРеализацииВУсловныхЕдиницахОрганизации");
		
		Для каждого Регистр Из СтруктураРегистровНакопления Цикл
			
			НаборЗаписей = РегистрыНакопления[Регистр.Ключ].СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Регистратор.Установить(Ссылка);
			НаборЗаписей.Записать();
			
		КонецЦикла;
		
		//СтруктураРегистровСведений = Новый Структура("РасчетыПоПриобретениюОрганизации, РасчетыПоРеализацииОрганизации");
		//
		//Для каждого Регистр Из СтруктураРегистровСведений Цикл
		//	
		//	НаборЗаписей = РегистрыСведений[Регистр.Ключ].СоздатьНаборЗаписей();
		//	НаборЗаписей.Отбор.Регистратор.Установить(Ссылка);
		//	НаборЗаписей.Записать();
		//	
		//КонецЦикла;
		//
		СтруктураРегистровБухгалтерии = Новый Структура("Налоговый, Хозрасчетный");
		
		Для каждого Регистр Из СтруктураРегистровБухгалтерии Цикл
			
			НаборЗаписей = РегистрыБухгалтерии[Регистр.Ключ].СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Регистратор.Установить(Ссылка);
			НаборЗаписей.Записать();
			
		КонецЦикла;
		
	Исключение
		
		Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
		ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки(), Отказ, Заголовок);
		Возврат;
		
	КонецПопытки;
	
КонецПроцедуры

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуСуммДолга(РезультатЗапросаПоСуммамДолга, СтруктураШапкиДокумента)

	ТаблицаРасчетов = РезультатЗапросаПоСуммамДолга.Выгрузить();

	ПодготовитьТаблицуСуммДолгаУпр(ТаблицаРасчетов, СтруктураШапкиДокумента);
	ПодготовитьТаблицуСуммДолгаРегл(ТаблицаРасчетов, СтруктураШапкиДокумента);
	
	Возврат ТаблицаРасчетов;

КонецФункции // ПодготовитьТаблицуТоваров()

Процедура ПодготовитьТаблицуСуммДолгаУпр(ТаблицаТоваров, СтруктураШапкиДокумента)

	// Переименуем колонку "Сумма" в "Стоимость" (как в регистрах).
	ТаблицаТоваров.Колонки.Добавить("УвеличениеДолгаКонтрагента", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("УменьшениеДолгаКонтрагента", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("УвеличениеДолгаУпр", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("УменьшениеДолгаУпр", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));

	// Надо рассчитать стоимость без НДС.
	Для каждого СтрокаТаблицы Из ТаблицаТоваров Цикл
		
		// Если документ расчетов не указан, то при ведении по документам расчетов необходимо
		// указать ссылку на текущий документ
		Если ЗначениеЗаполнено(СтрокаТаблицы.ДоговорКонтрагента) 
			И СтрокаТаблицы.ВестиПоДокументамРасчетовСКонтрагентом
			И НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДокументРасчетовСКонтрагентом) Тогда
			СтрокаТаблицы.ДокументРасчетовСКонтрагентом = Ссылка;
		КонецЕсли;

		Если СтрокаТаблицы.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом Тогда
			СтрокаТаблицы.СделкаВзаиморасчеты = Неопределено;
		КонецЕсли;

		СтрокаТаблицы.УвеличениеДолгаКонтрагента = ?(СтрокаТаблицы.ВидЗадолженности = Перечисления.ВидыЗадолженности.Дебиторская,  0, СтрокаТаблицы.Сумма);

		СтрокаТаблицы.УменьшениеДолгаКонтрагента = ?(СтрокаТаблицы.ВидЗадолженности = Перечисления.ВидыЗадолженности.Кредиторская, 0, СтрокаТаблицы.Сумма);
		
		// Суммы пересчитаем в валюту упр. учета
		СтрокаТаблицы.УвеличениеДолгаУпр = ?(СтрокаТаблицы.ВидЗадолженности = Перечисления.ВидыЗадолженности.Дебиторская, 0,
		                                 МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Сумма, 
		                                 СтрокаТаблицы.ВалютаВзаиморасчетов,
		                                 СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		                                 СтрокаТаблицы.КурсВзаиморасчетов,
		                                 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
		                                 СтрокаТаблицы.КратностьВзаиморасчетов,
		                                 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета));

		СтрокаТаблицы.УменьшениеДолгаУпр = ?(СтрокаТаблицы.ВидЗадолженности = Перечисления.ВидыЗадолженности.Кредиторская, 0, 
		                                 МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Сумма, 
		                                 СтрокаТаблицы.ВалютаВзаиморасчетов,
		                                 СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		                                 СтрокаТаблицы.КурсВзаиморасчетов,
		                                 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
		                                 СтрокаТаблицы.КратностьВзаиморасчетов,
		                                 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета));

	КонецЦикла;

КонецПроцедуры

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуСуммДолгаРегл(ТаблицаРасчетов, СтруктураШапкиДокумента)

	// Добполнение таблицы расчетов полями.
	
	ТаблицаРасчетов.Колонки.Вставить(1,"Контрагент", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	ТаблицаРасчетов.Колонки.Добавить("ЭтоВозврат", Новый ОписаниеТипов("Булево"));
	ТаблицаРасчетов.Колонки.Добавить("ВидРасчетовСКонтрагентом", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыРасчетовСКонтрагентами"));
	ТаблицаРасчетов.Колонки.Добавить("УвеличениеДолгаРегл", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаРасчетов.Колонки.Добавить("УменьшениеДолгаРегл", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	
	ТаблицаРасчетов.ЗаполнитьЗначения(Перечисления.ВидыРасчетовСКонтрагентами.Прочее,"ВидРасчетовСКонтрагентом");
	
	// Заполняем контрагента по значению поля КонтрагентДебитор
	ТаблицаРасчетов.ЗаполнитьЗначения(СтруктураШапкиДокумента.КонтрагентДебитор,"Контрагент");
	СтрокиКредиторки = ТаблицаРасчетов.найтиСтроки(Новый Структура("ВидЗадолженности", Перечисления.ВидыЗадолженности.Кредиторская));

	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета Тогда
		
		// Контрагент для кредиторской задолженности устанавливается из другого поля
		Для каждого СтрокаКредиторки Из СтрокиКредиторки Цикл
			СтрокаКредиторки.Контрагент = СтруктураШапкиДокумента.КонтрагентКредитор;
		КонецЦикла; 
		
		// Если не используется вспомогательный счет, в качестве субсчета устанавливаем счет 000 для последующей корректировки (объединения)
		// движений по кредиторской и дебиторской задолженностям.
		Если не СтруктураШапкиДокумента.ИспользоватьВспомогательныйСчет Тогда
			ТаблицаРасчетов.ЗаполнитьЗначения(ПланыСчетов.Хозрасчетный.Вспомогательный,"КоррСчет");
			ТаблицаРасчетов.ЗаполнитьЗначения(Неопределено, "КоррСубконто1, КоррСубконто2, КоррСубконто3");
		КонецЕсли; 
		
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПереносЗадолженности Тогда
		
		ТаблицаРасчетов.ЗаполнитьЗначения(СтруктураШапкиДокумента.КонтрагентКредитор,"КоррСубконто1");
		ТаблицаРасчетов.ЗаполнитьЗначения(СтруктураШапкиДокумента.ДоговорКонтрагента,"КоррСубконто2");
		
		// Счет переноса для кредиторской задолженности устанавливается из другого поля
		Для каждого СтрокаКредиторки Из СтрокиКредиторки Цикл
			СтрокаКредиторки.КоррСчет = СтруктураШапкиДокумента.СчетКт;
		КонецЦикла; 
			
	ИначеЕсли  СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.СписаниеЗадолженности Тогда
		
		// Счет и аналитику списания для кредиторской задолженности устанавливается из другого поля
		Для каждого СтрокаКредиторки Из СтрокиКредиторки Цикл
			СтрокаКредиторки.КоррСчет = СтруктураШапкиДокумента.СчетКт;
			СтрокаКредиторки.КоррСубконто1 = СтруктураШапкиДокумента.СубконтоКт1;
			СтрокаКредиторки.КоррСубконто2 = СтруктураШапкиДокумента.СубконтоКт2;
			СтрокаКредиторки.КоррСубконто3 = СтруктураШапкиДокумента.СубконтоКт3;
			Если  СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
				СтрокаКредиторки.КоррСчетНУ = СтруктураШапкиДокумента.СчетКтНУ;
				СтрокаКредиторки.КоррСубконтоНУ1 = СтруктураШапкиДокумента.СубконтоКтНУ1;
				СтрокаКредиторки.КоррСубконтоНУ2 = СтруктураШапкиДокумента.СубконтоКтНУ2;
				СтрокаКредиторки.КоррСубконтоНУ3 = СтруктураШапкиДокумента.СубконтоКтНУ3;
			КонецЕсли; 
		КонецЦикла; 
		
	КонецЕсли;
	
	// Определим вид погашения задолженности - возврат оплаты или непосредственно погашение.
	Для каждого СтрокаРасчетов Из ТаблицаРасчетов Цикл
		
		СтрокаРасчетов.УвеличениеДолгаРегл = ?(СтрокаРасчетов.ВидЗадолженности = Перечисления.ВидыЗадолженности.Дебиторская,  0, СтрокаРасчетов.СуммаРегл);

		СтрокаРасчетов.УменьшениеДолгаРегл = ?(СтрокаРасчетов.ВидЗадолженности = Перечисления.ВидыЗадолженности.Кредиторская, 0, СтрокаРасчетов.СуммаРегл);
		
		Если СтрокаРасчетов.ДоговорВид = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком 
			или СтрокаРасчетов.ДоговорВид = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом
			Тогда
			
			СтрокаРасчетов.ВидРасчетовСКонтрагентом =  Перечисления.ВидыРасчетовСКонтрагентами.ПоПриобретению;
			
			Если СтрокаРасчетов.ВидЗадолженности = Перечисления.ВидыЗадолженности.Дебиторская тогда
				//Это возврат от поставщика
				СтрокаРасчетов.ЭтоВозврат = Истина;
			КонецЕсли;
		КонецЕсли; 
		
		Если СтрокаРасчетов.ДоговорВид = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем 
			или СтрокаРасчетов.ДоговорВид = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером
			Тогда
			
			СтрокаРасчетов.ВидРасчетовСКонтрагентом =  Перечисления.ВидыРасчетовСКонтрагентами.ПоРеализации;
			
			Если СтрокаРасчетов.ВидЗадолженности = Перечисления.ВидыЗадолженности.Кредиторская тогда
				//Это возврат покупателю
				СтрокаРасчетов.ЭтоВозврат = Истина;
			КонецЕсли;
		КонецЕсли; 
	КонецЦикла;
	
	Возврат ТаблицаРасчетов;

КонецФункции // ПодготовитьТаблицуСуммДолгаРегл

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение, не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Организация, ВалютаДокумента");
	
	Если ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета Тогда
	
		СтруктураОбязательныхПолей.Вставить("КонтрагентДебитор", "Не заполнено значение реквизита ""Дебитор""!");
		СтруктураОбязательныхПолей.Вставить("КонтрагентКредитор", "Не заполнено значение реквизита ""Кредитор""!");
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.СписаниеЗадолженности Тогда
	
		СтруктураОбязательныхПолей.Вставить("КонтрагентДебитор", "Не заполнено значение реквизита ""Контрагент""!");
		
	Иначе //.ПереносЗадолженности Тогда
	
		СтруктураОбязательныхПолей.Вставить("КонтрагентДебитор", "Не заполнено значение реквизита ""Контрагент""!");
		СтруктураОбязательныхПолей.Вставить("КонтрагентКредитор", "Не заполнено значение реквизита ""Получатель""!");
		СтруктураОбязательныхПолей.Вставить("ДоговорКонтрагента", "Не заполнено значение реквизита ""Договор""!");
	
	КонецЕсли;
		
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		
		Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета Тогда
			Если СтруктураШапкиДокумента.ИспользоватьВспомогательныйСчет Тогда
				СтруктураОбязательныхПолей.Вставить("СчетДт", "Не заполнено значение реквизита ""Вспомогательный счет""!");
			КонецЕсли;
			
		Иначе
			ЕстьДебиторскаяЗадолженность = СуммыДолга.Найти(Перечисления.ВидыЗадолженности.Дебиторская, "ВидЗадолженности") <> Неопределено;
			ЕстьКредиторскаяЗадолженность = СуммыДолга.Найти(Перечисления.ВидыЗадолженности.Кредиторская, "ВидЗадолженности") <> Неопределено;
			
			Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПереносЗадолженности Тогда
				
				Если ЕстьДебиторскаяЗадолженность Тогда
					СтруктураОбязательныхПолей.Вставить("СчетДт", "Не заполнено значение реквизита ""Счет переноса дебиторской задолженности""!");
				КонецЕсли;
				
				Если ЕстьКредиторскаяЗадолженность Тогда
					СтруктураОбязательныхПолей.Вставить("СчетКт", "Не заполнено значение реквизита ""Счет переноса кредиторской задолженности""!");
				КонецЕсли;
				
			Иначе //.СписаниеЗадолженности 
				
				Если ЕстьДебиторскаяЗадолженность Тогда
					СтруктураОбязательныхПолей.Вставить("СчетДт", "Не заполнено значение реквизита ""Счет списания дебиторской задолженности""!");
					Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
						СтруктураОбязательныхПолей.Вставить("СчетДтНУ", "Не заполнено значение реквизита ""Счет списания дебиторской задолженности в НУ""!");
					КонецЕсли;
				КонецЕсли;
				
				Если ЕстьКредиторскаяЗадолженность Тогда
					СтруктураОбязательныхПолей.Вставить("СчетКт", "Не заполнено значение реквизита ""Счет списания кредиторской задолженности""!");
					Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
						СтруктураОбязательныхПолей.Вставить("СчетКтНУ", "Не заполнено значение реквизита ""Счет списания кредиторской задолженности в НУ""!");
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	//Организация в документе должна совпадать с организацией, указанной в договоре для переноса долга
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПереносЗадолженности Тогда
		УправлениеВзаиморасчетами.ПроверитьСоответствиеОрганизацииДоговоруВзаиморасчетов(Организация, ДоговорКонтрагента, СтруктураШапкиДокумента.ДоговорОрганизация, Отказ, Заголовок);
	КонецЕсли;
	
	// Документ должен принадлежать хотя бы к одному виду учета (управленческий, бухгалтерский, налоговый)
	ОбщегоНазначения.ПроверитьПринадлежностьКВидамУчета(СтруктураШапкиДокумента, Отказ, Заголовок);

	// Теперь позовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения строк табличной части "СуммыДолга".
//
// Параметры:
// Параметры: 
//  ТаблицаПоСуммамДолга    - таблица значений, содержащая данные для проведения и проверки ТЧ СуммыДолга
//  СтруктураШапкиДокумента - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиСуммыДолга(ТаблицаПоСуммамДолга, СтруктураШапкиДокумента, Отказ, Заголовок)

	ИмяТабличнойЧасти = "СуммыДолга";

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("ДоговорКонтрагента, КурсВзаиморасчетов, КратностьВзаиморасчетов");

	ДополнитьСтруктуруОбязательныхПолейТабличнойЧастиСуммаДолгаРегл(СтруктураОбязательныхПолей, СтруктураШапкиДокумента);

	// Теперь позовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, ИмяТабличнойЧасти, СтруктураОбязательныхПолей, Отказ, Заголовок);

	//Организация в документе должна совпадать с организацией, указанной в договорах взаиморасчетов.
	УправлениеВзаиморасчетами.ПроверитьОрганизациюДоговораВзаиморасчетовВТабличнойЧасти(ЭтотОбъект, ИмяТабличнойЧасти, ТаблицаПоСуммамДолга, Отказ, Заголовок);
	
	ЭтоВалютныйДокумент = СтруктураШапкиДокумента.ВалютаДокумента <> СтруктураШапкиДокумента.ВалютаРегламентированногоУчета;
	
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПереносЗадолженности Тогда
		ПроверятьТипСделки = Истина;
		Если СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам Тогда
			Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем
				ИЛИ СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
				ТребуемыйТипСделки      = Тип("ДокументСсылка.ЗаказПокупателя");
				ПредставлениеТипаСделки = "Заказ покупателя"; 
			Иначе
				ТребуемыйТипСделки      = Тип("ДокументСсылка.ЗаказПоставщику");
				ПредставлениеТипаСделки = "Заказ поставщику"; 
			КонецЕсли;
		ИначеЕсли СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
			Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем
				ИЛИ СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
				ТребуемыйТипСделки      = Тип("ДокументСсылка.СчетНаОплатуПокупателю");
				ПредставлениеТипаСделки = "Счет на оплату покупателю"; 
			Иначе
				ТребуемыйТипСделки      = Тип("ДокументСсылка.СчетНаОплатуПоставщика");
				ПредставлениеТипаСделки = "Счет на оплату поставщику"; 
			КонецЕсли;
		Иначе
			ПроверятьТипСделки = Ложь;
		КонецЕсли;
	Иначе
		ПроверятьТипСделки = Ложь;
	КонецЕсли;
			
	Для каждого СтрокаТаблицы Из ТаблицаПоСуммамДолга Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДоговорКонтрагента)  Тогда
			Продолжить;
		КонецЕсли;
		
        СтрокаНачалаСообщенияОбОшибке = "В строке "+ СокрЛП(СтрокаТаблицы.НомерСтроки) + " ";

		Если СтрокаТаблицы.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам
		 ИЛИ СтрокаТаблицы.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда

			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.СделкаВзаиморасчеты) Тогда
				ОбщегоНазначения.СообщитьОбОшибке(
					СтрокаНачалаСообщенияОбОшибке + "выбран договор, взаиморасчеты по которому ведутся по заказам.
					|Необходимо заполнить сделку!", Отказ, Заголовок);
			КонецЕсли;
			
		КонецЕсли;
		
		Если СтрокаТаблицы.ВалютаВзаиморасчетов <> СтруктураШапкиДокумента.ВалютаДокумента Тогда
			Если ЭтоВалютныйДокумент ИЛИ НЕ СтрокаТаблицы.РасчетыВУсловныхЕдиницах Тогда
				ОбщегоНазначения.СообщитьОбОшибке(
					СтрокаНачалаСообщенияОбОшибке + "выбран договор с несоответствующей документу валютой взаиморасчетов.
					|Необходимо выбрать договор с валютой " + СтруктураШапкиДокумента.ВалютаДокумента
					+ ?(ЭтоВалютныйДокумент, "", " или договор в условных единицах"), Отказ, Заголовок);
			КонецЕсли; 
		КонецЕсли;
		
		Если ПроверятьТипСделки Тогда
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.СделкаВзаиморасчеты) 
				ИЛИ ТипЗнч(СтрокаТаблицы.СделкаВзаиморасчеты) <> ТребуемыйТипСделки Тогда
				ОбщегоНазначения.СообщитьОбОшибке(
					СтрокаНачалаСообщенияОбОшибке + "необходимо выбрать сделку с типом " + ПредставлениеТипаСделки + ",
			    	|иначе перенос долга на выбранный в шапке договор невозможен!", Отказ, Заголовок);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	// Если проведение взаимозачета - проверим на совпадение суммы дебиторской и кредиторской задолженности. 
	// Взаимозачет проводится только при полном совпадении сумм
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета Тогда
		
		Если ЭтоВалютныйДокумент Тогда
			СуммаДеб  = ТаблицаПоСуммамДолга.Итог("УменьшениеДолгаКонтрагента");
			СуммаКред = ТаблицаПоСуммамДолга.Итог("УвеличениеДолгаКонтрагента");
		Иначе
			СуммаДеб  = ТаблицаПоСуммамДолга.Итог("УменьшениеДолгаРегл");
			СуммаКред = ТаблицаПоСуммамДолга.Итог("УвеличениеДолгаРегл");
		КонецЕсли; 
		
		Разница = СуммаДеб - СуммаКред;
		
		Если Разница <> 0  Тогда
			ТекстСообщения = "Не совпадают суммы дебиторской и кредиторской задолженности при проведении взаимозачета. 
			                 |Взаимозачет не может быть проведен.";
			ТекстСообщения = ТекстСообщения + Символы.ПС+
							 "Дебиторская задолженность: "  + Формат(СуммаДеб, "ЧЦ=15; ЧДЦ=2")  + " " + СтруктураШапкиДокумента.ВалютаДокумента;
			ТекстСообщения = ТекстСообщения + Символы.ПС+
							 "Кредиторская задолженность: " + Формат(СуммаКред, "ЧЦ=15; ЧДЦ=2") + " " + СтруктураШапкиДокумента.ВалютаДокумента;
			ТекстСообщения = ТекстСообщения + Символы.ПС+
							 "Разница: " + Формат(Разница, "ЧЦ=15; ЧДЦ=2") + " " + СтруктураШапкиДокумента.ВалютаДокумента;
			
			ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, Отказ, Заголовок);
		КонецЕсли; 
		
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиСуммыДолга()

Процедура ДополнитьСтруктуруОбязательныхПолейТабличнойЧастиСуммаДолгаРегл(СтруктураОбязательныхПолей, СтруктураШапкиДокумента)
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		СтруктураОбязательныхПолей.Вставить("СчетУчетаРасчетов");
	КонецЕсли;
	
КонецПроцедуры

// Функция возвращает таблицу значений, не содержащую строк источника со значением Ложь в колонке "ВестиПоДокументамРасчетовСКонтрагентом"
//
// Параметры:
// ТаблицаИсточник		- <ТаблицаЗначений> исходная таблица. 
//							Обязательно должна содержать колонку "ВестиПоДокументамРасчетовСКонтрагентом"
//
Функция ПодготовитьТаблицуПлатежейОперативныхВзаиморасчетов(ТаблицаИсточник)
	
	ТаблицаРезультат = ТаблицаИсточник.Скопировать();
	СтрокиНеПоДокументам = ТаблицаРезультат.НайтиСтроки(Новый Структура("ВестиПоДокументамРасчетовСКонтрагентом", Ложь));
	Для каждого СтрокаНеПоДокументам Из СтрокиНеПоДокументам Цикл
		ТаблицаРезультат.Удалить(СтрокаНеПоДокументам);
	КонецЦикла;
	
	Возврат ТаблицаРезультат;

КонецФункции // ПодготовитьТаблицуПлатежейОперативныхВзаиморасчетов()

// По результату запроса по шапке документа формируем движения по регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//  ТаблицаПоСуммамДолга          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоСуммамДолга, 
	                        ТаблицаРасчетыСПокупателямиКредиторскаяЗадолженность, ТаблицаРасчетыСПокупателямиДебиторскаяЗадолженность,
	                        ТаблицаРасчетыСПоставщикамиКредиторскаяЗадолженность, ТаблицаРасчетыСПоставщикамиДебиторскаяЗадолженность,
							Отказ, Заголовок)
							
	Если НЕ РежимВосстановленияПоследовательностейРасчетов Тогда
	
		ДвиженияПоРегистрамУпр(РежимПроведения,  СтруктураШапкиДокумента, ТаблицаПоСуммамДолга, Отказ, Заголовок);
		
		ДвиженияПоРегистрамОперативныхВзаиморасчетов(РежимПроведения, Отказ, Заголовок,СтруктураШапкиДокумента, 
		                                             ТаблицаРасчетыСПокупателямиКредиторскаяЗадолженность, ТаблицаРасчетыСПокупателямиДебиторскаяЗадолженность,
		       	                                     ТаблицаРасчетыСПоставщикамиКредиторскаяЗадолженность, ТаблицаРасчетыСПоставщикамиДебиторскаяЗадолженность);
	
		ДвиженияПоРегистрамУСНРегл(РежимПроведения, СтруктураШапкиДокумента, Отказ, Заголовок);
	
	КонецЕсли;

	ДвиженияПоРегистрамРегл(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоСуммамДолга,
	                        ТаблицаРасчетыСПокупателямиКредиторскаяЗадолженность, ТаблицаРасчетыСПокупателямиДебиторскаяЗадолженность,
	                        ТаблицаРасчетыСПоставщикамиКредиторскаяЗадолженность, ТаблицаРасчетыСПоставщикамиДебиторскаяЗадолженность, 
							Отказ, Заголовок);
							
	ДвиженияПоПереносуЗадолженности(СтруктураШапкиДокумента, ТаблицаПоСуммамДолга, РежимВосстановленияПоследовательностейРасчетов, Отказ, Заголовок);
		
КонецПроцедуры // ДвиженияПоРегистрам()

Процедура ДвиженияПоРегистрамУпр(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоСуммамДолга, Отказ, Заголовок)
	
	Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		
		ТаблицаУвеличениеДолга = ТаблицаПоСуммамДолга.Скопировать();
		ТаблицаУменьшениеДолга = ТаблицаПоСуммамДолга.Скопировать();
		
		Счетчик = 0;
		Пока Счетчик < ТаблицаУвеличениеДолга.Количество() Цикл
			
			СтрокаТаблицы = ТаблицаУвеличениеДолга.Получить(Счетчик);
			Если СтрокаТаблицы.УвеличениеДолгаКонтрагента = 0 Тогда
				ТаблицаУвеличениеДолга.Удалить(СтрокаТаблицы);
			Иначе
				Счетчик = Счетчик + 1;
			КонецЕсли;
			
		КонецЦикла;
		
		Счетчик = 0;
		Пока Счетчик < ТаблицаУменьшениеДолга.Количество() Цикл
			
			СтрокаТаблицы = ТаблицаУменьшениеДолга.Получить(Счетчик);
			
			Если СтрокаТаблицы.УменьшениеДолгаКонтрагента = 0 Тогда
				ТаблицаУменьшениеДолга.Удалить(СтрокаТаблицы);
			Иначе 
				Счетчик= Счетчик + 1;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ТаблицаУвеличениеДолга.Количество() > 0 Тогда
			
			ТаблицаУвеличениеДолга.Колонки.УвеличениеДолгаКонтрагента.Имя = "СуммаВзаиморасчетов";
			ТаблицаУвеличениеДолга.Колонки.УвеличениеДолгаУпр.Имя         = "СуммаУпр";
			ТаблицаУвеличениеДолга.Колонки.СделкаВзаиморасчеты.Имя        = "Сделка";
			
			// ПО РЕГИСТРУ ВзаиморасчетыСКонтрагентами.
			НаборДвижений = Движения.ВзаиморасчетыСКонтрагентами;

			// Получим таблицу значений, совпадающую со структурой набора записей регистра.
			ТаблицаДвижений = НаборДвижений.Выгрузить();
			ТаблицаДвижений.Очистить();

			// Заполним таблицу движений.
			ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаУвеличениеДолга, ТаблицаДвижений);

			НаборДвижений.мПериод          = Дата;
			НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;

			Если Не Отказ Тогда
				Движения.ВзаиморасчетыСКонтрагентами.ВыполнитьПриход();
			КонецЕсли;
			
			// ПО РЕГИСТРУ РасчетыСКонтрагентами.
			НаборДвижений = Движения.РасчетыСКонтрагентами;
			ТаблицаУвеличениеДолга.Колонки.Сделка.Имя = "СделкаВзаиморасчеты";
			ТаблицаУвеличениеДолгаРасчеты = ТаблицаУвеличениеДолга.Скопировать();
			ТаблицаУвеличениеДолгаРасчеты.Колонки.СделкаРасчеты.Имя = "Сделка";

			// Получим таблицу значений, совпадающую со структурой набора записей регистра.
			ТаблицаДвижений = НаборДвижений.Выгрузить();
			ТаблицаДвижений.Очистить();

			// Заполним таблицу движений.
			ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаУвеличениеДолгаРасчеты, ТаблицаДвижений);
			
			// Недостающие поля.
			ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.РасчетыВозврат.Расчеты,"РасчетыВозврат");

			НаборДвижений.мПериод          = Дата;
			НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;

			Если Не Отказ Тогда
				Движения.РасчетыСКонтрагентами.ВыполнитьПриход();
			КонецЕсли;

			ТаблицаКомитентов = ТаблицаУвеличениеДолга.Скопировать();
			Счетчик = 0;
			Пока Счетчик < ТаблицаКомитентов.Количество() Цикл

				СтрокаТаблицы = ТаблицаКомитентов.Получить(Счетчик);

				Если НЕ СтрокаТаблицы.ДоговорВид = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом
				 ИЛИ НЕ СтрокаТаблицы.КонтролироватьДенежныеСредстваКомитента Тогда
					ТаблицаКомитентов.Удалить(СтрокаТаблицы);
				Иначе 
					Счетчик= Счетчик + 1;
				КонецЕсли;

			КонецЦикла;

			Если ТаблицаКомитентов.Количество() > 0 Тогда

				НаборДвижений = Движения.ДенежныеСредстваКомитента;
				ТаблицаДвижений = НаборДвижений.Выгрузить();

				// Заполним таблицу движений.
				ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаУвеличениеДолгаРасчеты, ТаблицаДвижений);

				НаборДвижений.мПериод          = Дата;
				НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
				Движения.ДенежныеСредстваКомитента.ВыполнитьРасход();

			КонецЕсли;

		КонецЕсли;

		Если ТаблицаУменьшениеДолга.Количество() > 0 Тогда

			ТаблицаУменьшениеДолга.Колонки.УменьшениеДолгаКонтрагента.Имя = "СуммаВзаиморасчетов";
			ТаблицаУменьшениеДолга.Колонки.УменьшениеДолгаУпр.Имя = "СуммаУпр";
			ТаблицаУменьшениеДолга.Колонки.СделкаВзаиморасчеты.Имя = "Сделка";

			// ПО РЕГИСТРУ ВзаиморасчетыСКонтрагентами.
			НаборДвижений = Движения.ВзаиморасчетыСКонтрагентами;

			// Получим таблицу значений, совпадающую со структурой набора записей регистра.
			ТаблицаДвижений = НаборДвижений.Выгрузить();
			ТаблицаДвижений.Очистить();

			// Заполним таблицу движений.
			ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаУменьшениеДолга, ТаблицаДвижений);

			НаборДвижений.мПериод          = Дата;
			НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;

			Если Не Отказ Тогда
				Движения.ВзаиморасчетыСКонтрагентами.ВыполнитьРасход();
			КонецЕсли;

			НаборДвижений = Движения.РасчетыСКонтрагентами;
			ТаблицаУменьшениеДолга.Колонки.Сделка.Имя = "СделкаВзаиморасчеты";
			ТаблицаУменьшениеДолгаРасчеты = ТаблицаУменьшениеДолга.Скопировать();
			ТаблицаУменьшениеДолгаРасчеты.Колонки.СделкаРасчеты.Имя = "Сделка";

			// Получим таблицу значений, совпадающую со структурой набора записей регистра.
			ТаблицаДвижений = НаборДвижений.Выгрузить();
			ТаблицаДвижений.Очистить();

			// Заполним таблицу движений.
			ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаУменьшениеДолгаРасчеты, ТаблицаДвижений);

			// Недостающие поля.
			ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.РасчетыВозврат.Расчеты,"РасчетыВозврат");
			
			НаборДвижений.мПериод            = Дата;
			НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

			Если Не Отказ Тогда
				Движения.РасчетыСКонтрагентами.ВыполнитьРасход();
			КонецЕсли;

			ТаблицаКомиссионеров = ТаблицаУменьшениеДолга.Скопировать();
			Счетчик = 0;
			Пока Счетчик < ТаблицаКомиссионеров.Количество() Цикл

				СтрокаТаблицы = ТаблицаКомиссионеров.Получить(Счетчик);

				Если НЕ СтрокаТаблицы.ДоговорВид = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером
				 ИЛИ НЕ СтрокаТаблицы.КонтролироватьДенежныеСредстваКомитента Тогда
					ТаблицаКомиссионеров.Удалить(СтрокаТаблицы);
				Иначе 
					Счетчик= Счетчик + 1;
				КонецЕсли;

			КонецЦикла;

			Если ТаблицаКомиссионеров.Количество() > 0 Тогда

				НаборДвижений = Движения.ДенежныеСредстваКомиссионера;
				ТаблицаДвижений = НаборДвижений.Выгрузить();

				// Заполним таблицу движений.
				ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаУменьшениеДолга, ТаблицаДвижений);

				
				НаборДвижений.мПериод          = Дата;
				НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;

				Движения.ДенежныеСредстваКомиссионера.ВыполнитьРасход();

			КонецЕсли;

		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

Процедура ДвиженияПоРегистрамОперативныхВзаиморасчетов(РежимПроведения, Отказ, Заголовок,СтруктураШапкиДокумента, 
	                                                   ТаблицаРасчетыСПокупателямиКредиторскаяЗадолженность, ТаблицаРасчетыСПокупателямиДебиторскаяЗадолженность,
	                                                   ТаблицаРасчетыСПоставщикамиКредиторскаяЗадолженность, ТаблицаРасчетыСПоставщикамиДебиторскаяЗадолженность)
	
	СтруктураШапкиДокумента.Вставить("РежимПроведения", РежимПроведения);
	ДатаДвижений = УправлениеДенежнымиСредствами.ПолучитьДатуДвижений(Дата, Дата);
	
	ТаблицаПлатежей = ПодготовитьТаблицуПлатежейОперативныхВзаиморасчетов(ТаблицаРасчетыСПокупателямиКредиторскаяЗадолженность);
	Если ТаблицаПлатежей.Количество() > 0 Тогда
		ВидДвижения = ВидДвиженияНакопления.Приход;
		ВидРасчетовПоОперации = Перечисления.ВидыРасчетовСКонтрагентами.ПоРеализации;
		УправлениеВзаиморасчетами.ОтражениеОплатыВРегистреОперативныхРасчетовПоДокументам(СтруктураШапкиДокумента, ДатаДвижений, ТаблицаПлатежей, ВидРасчетовПоОперации, ВидДвижения, Движения, Отказ, Заголовок);
	КонецЕсли;

	ТаблицаПлатежей = ПодготовитьТаблицуПлатежейОперативныхВзаиморасчетов(ТаблицаРасчетыСПокупателямиДебиторскаяЗадолженность);
	Если ТаблицаПлатежей.Количество() > 0 Тогда
		ВидДвижения = ВидДвиженияНакопления.Расход;
		ВидРасчетовПоОперации = Перечисления.ВидыРасчетовСКонтрагентами.ПоРеализации;
		УправлениеВзаиморасчетами.ОтражениеОплатыВРегистреОперативныхРасчетовПоДокументам(СтруктураШапкиДокумента, ДатаДвижений, ТаблицаПлатежей, ВидРасчетовПоОперации, ВидДвижения, Движения, Отказ, Заголовок);
	КонецЕсли;
	
	ТаблицаПлатежей = ПодготовитьТаблицуПлатежейОперативныхВзаиморасчетов(ТаблицаРасчетыСПоставщикамиКредиторскаяЗадолженность);
	Если ТаблицаПлатежей.Количество() > 0 Тогда
		ВидДвижения = ВидДвиженияНакопления.Приход;
		ВидРасчетовПоОперации = Перечисления.ВидыРасчетовСКонтрагентами.ПоПриобретению;
		УправлениеВзаиморасчетами.ОтражениеОплатыВРегистреОперативныхРасчетовПоДокументам(СтруктураШапкиДокумента, ДатаДвижений, ТаблицаПлатежей, ВидРасчетовПоОперации, ВидДвижения, Движения, Отказ, Заголовок);
	КонецЕсли;
	
	ТаблицаПлатежей = ПодготовитьТаблицуПлатежейОперативныхВзаиморасчетов(ТаблицаРасчетыСПоставщикамиДебиторскаяЗадолженность);
	Если ТаблицаПлатежей.Количество() > 0 Тогда
		ВидДвижения = ВидДвиженияНакопления.Расход;
		ВидРасчетовПоОперации = Перечисления.ВидыРасчетовСКонтрагентами.ПоПриобретению;
		УправлениеВзаиморасчетами.ОтражениеОплатыВРегистреОперативныхРасчетовПоДокументам(СтруктураШапкиДокумента, ДатаДвижений, ТаблицаПлатежей, ВидРасчетовПоОперации, ВидДвижения, Движения, Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДвиженияПоРегистрамРегл(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоСуммамДолга, 
 	                              ТаблицаРасчетыСПокупателямиКредиторскаяЗадолженность, ТаблицаРасчетыСПокупателямиДебиторскаяЗадолженность,
	                              ТаблицаРасчетыСПоставщикамиКредиторскаяЗадолженность, ТаблицаРасчетыСПоставщикамиДебиторскаяЗадолженность, 
								  Отказ, Заголовок) Экспорт

	Если Не СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		Возврат;
	КонецЕсли;

	
	ПроводкиБУ      = Движения.Хозрасчетный;
	ВспомогательныйСчет = ПланыСчетов.Хозрасчетный.Вспомогательный;
	
	ДатаДока        = Дата;
	ВалютаРег       = мВалютаРегламентированногоУчета;
	ДанныеВалютыРег = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаРег, ДатаДока);
	
	КэшВидовСубконтоПоСчетам = Новый Соответствие;
	
	// Зафиксируем расчеты с покупателями
	
	Если ТаблицаРасчетыСПокупателямиКредиторскаяЗадолженность.Количество() > 0 Тогда
		
		Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета Тогда
			Если СтруктураШапкиДокумента.ИспользоватьВспомогательныйСчет Тогда
				КоррСчет = СчетДт;
			Иначе
				КоррСчет = ВспомогательныйСчет;
			КонецЕсли;
			СтруктураШапкиДокумента.Вставить("Контрагент", КонтрагентКредитор);
		Иначе
			КоррСчет = СчетКт;
			СтруктураШапкиДокумента.Вставить("Контрагент", КонтрагентДебитор);
		КонецЕсли;
		
		СтруктураПараметровДДС = БухгалтерскийУчетРасчетовСКонтрагентами.ПодготовкаСтруктурыПараметровДляДвиженияДенег(Ссылка, мВалютаРегламентированногоУчета, Заголовок, КоррСчет, ТаблицаРасчетыСПокупателямиКредиторскаяЗадолженность, СтруктураШапкиДокумента);

		Если Не (СтруктураПараметровДДС = Ложь) тогда
			СтруктураПараметровДДС.Вставить("РасчетыВозврат", Перечисления.РасчетыВозврат.Возврат);
			СтруктураПараметровДДС.Вставить("Направление", "Выбытие");
			БухгалтерскийУчетРасчетовСКонтрагентами.БухгалтерскийУчетРасчетыСКонтрагентами_Оплата(СтруктураПараметровДДС, СтруктураШапкиДокумента, Движения, Отказ, Заголовок, ПринадлежностьПоследовательностям, , , КэшВидовСубконтоПоСчетам);
		Конецесли;
			
	КонецЕсли;
	
	Если ТаблицаРасчетыСПокупателямиДебиторскаяЗадолженность.Количество() > 0 Тогда
		
		КоррСчет = СчетДт;
		Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета 
			и не СтруктураШапкиДокумента.ИспользоватьВспомогательныйСчет Тогда
			КоррСчет = ВспомогательныйСчет;
		КонецЕсли;
		СтруктураШапкиДокумента.Вставить("Контрагент", КонтрагентДебитор);
		
		СтруктураПараметровДДС = БухгалтерскийУчетРасчетовСКонтрагентами.ПодготовкаСтруктурыПараметровДляДвиженияДенег(Ссылка, мВалютаРегламентированногоУчета, Заголовок, КоррСчет, ТаблицаРасчетыСПокупателямиДебиторскаяЗадолженность, СтруктураШапкиДокумента);

		Если Не (СтруктураПараметровДДС = Ложь) тогда
			СтруктураПараметровДДС.Вставить("РасчетыВозврат", Перечисления.РасчетыВозврат.Расчеты);
			СтруктураПараметровДДС.Вставить("Направление", "Поступление");
			БухгалтерскийУчетРасчетовСКонтрагентами.БухгалтерскийУчетРасчетыСКонтрагентами_Оплата(СтруктураПараметровДДС, СтруктураШапкиДокумента, Движения, Отказ, Заголовок, ПринадлежностьПоследовательностям, , , КэшВидовСубконтоПоСчетам);
		Конецесли;

	КонецЕсли;
	
	// Зафиксируем расчеты с поставщиками
	
	Если ТаблицаРасчетыСПоставщикамиДебиторскаяЗадолженность.Количество() > 0 Тогда
		
		КоррСчет = СчетДт;
		Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета 
			и не СтруктураШапкиДокумента.ИспользоватьВспомогательныйСчет Тогда
			КоррСчет = ВспомогательныйСчет;
		КонецЕсли;
		СтруктураШапкиДокумента.Вставить("Контрагент", КонтрагентДебитор);
		
		СтруктураПараметровДДС = БухгалтерскийУчетРасчетовСКонтрагентами.ПодготовкаСтруктурыПараметровДляДвиженияДенег(Ссылка, мВалютаРегламентированногоУчета, Заголовок, КоррСчет, ТаблицаРасчетыСПоставщикамиДебиторскаяЗадолженность, СтруктураШапкиДокумента);
		Если Не (СтруктураПараметровДДС = Ложь) тогда

			СтруктураПараметровДДС.Вставить("РасчетыВозврат", Перечисления.РасчетыВозврат.Возврат);
			СтруктураПараметровДДС.Вставить("Направление", "Поступление");
			БухгалтерскийУчетРасчетовСКонтрагентами.БухгалтерскийУчетРасчетыСКонтрагентами_Оплата(СтруктураПараметровДДС, СтруктураШапкиДокумента, Движения, Отказ, Заголовок, ПринадлежностьПоследовательностям, , , КэшВидовСубконтоПоСчетам);
		Конецесли;
			
	КонецЕсли;

	Если ТаблицаРасчетыСПоставщикамиКредиторскаяЗадолженность.Количество() > 0 Тогда
		
		Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета Тогда
			Если СтруктураШапкиДокумента.ИспользоватьВспомогательныйСчет Тогда
				КоррСчет = СчетДт;
			Иначе
				КоррСчет = ВспомогательныйСчет;
			КонецЕсли;
			СтруктураШапкиДокумента.Вставить("Контрагент", КонтрагентКредитор);
		Иначе
			КоррСчет = СчетКт;
			СтруктураШапкиДокумента.Вставить("Контрагент", КонтрагентДебитор);
		КонецЕсли;
		
		СтруктураПараметровДДС = БухгалтерскийУчетРасчетовСКонтрагентами.ПодготовкаСтруктурыПараметровДляДвиженияДенег(Ссылка, мВалютаРегламентированногоУчета, Заголовок, КоррСчет, ТаблицаРасчетыСПоставщикамиКредиторскаяЗадолженность, СтруктураШапкиДокумента);

		Если Не (СтруктураПараметровДДС = Ложь) тогда
			СтруктураПараметровДДС.Вставить("РасчетыВозврат", Перечисления.РасчетыВозврат.Расчеты);
			СтруктураПараметровДДС.Вставить("Направление", "Выбытие");
			
			БухгалтерскийУчетРасчетовСКонтрагентами.БухгалтерскийУчетРасчетыСКонтрагентами_Оплата(СтруктураПараметровДДС, СтруктураШапкиДокумента, Движения, Отказ, Заголовок, ПринадлежностьПоследовательностям, , , КэшВидовСубконтоПоСчетам);
		Конецесли;

	КонецЕсли;
	
	// Зафиксируем прочие расчеты
	
	Для каждого ТекущийПлатеж Из ТаблицаПоСуммамДолга Цикл
		Если ТекущийПлатеж.ВидРасчетовСКонтрагентом = Перечисления.ВидыРасчетовСКонтрагентами.ПоПриобретению
			или ТекущийПлатеж.ВидРасчетовСКонтрагентом = Перечисления.ВидыРасчетовСКонтрагентами.ПоРеализации
			Тогда
			// Договор обработан ранее 
			Продолжить;
		КонецЕсли; 
		
		Если ТекущийПлатеж.УвеличениеДолгаКонтрагента <> 0 Тогда
			
			ДтКт     = "Дт";
			КоррДтКт = "Кт";
			СчетРасчетов = ТекущийПлатеж.СчетУчетаРасчетов;
			
			Проводка = ПроводкиБУ.Добавить();
			Проводка.Период      = ДатаДока;
			Проводка.Активность  = Истина;
			Проводка.Организация = СтруктураШапкиДокумента.Организация;
			Проводка.Содержание  = "Увеличение долга";

			Проводка["Счет" + ДтКт]= СчетРасчетов;
			БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + ДтКт],Проводка["Субконто" + ДтКт], "Контрагенты", 
				?(СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета,
				СтруктураШапкиДокумента.КонтрагентКредитор, СтруктураШапкиДокумента.КонтрагентДебитор));
			БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + ДтКт],Проводка["Субконто" + ДтКт], "Договоры", ТекущийПлатеж.ДоговорКонтрагента);
				
			Если СчетРасчетов.Валютный тогда
				Проводка["Валюта" + ДтКт]        = ТекущийПлатеж.ВалютаВзаиморасчетов;
				Проводка["ВалютнаяСумма" + ДтКт] = ТекущийПлатеж.УвеличениеДолгаКонтрагента;
			КонецЕсли;
				
			Проводка["Счет" + КоррДтКт] = ТекущийПлатеж.КоррСчет;
			
			Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПереносЗадолженности Тогда
				
				БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + КоррДтКт], Проводка["Субконто" + КоррДтКт], "Контрагенты", СтруктураШапкиДокумента.КонтрагентКредитор);
				БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + КоррДтКт], Проводка["Субконто" + КоррДтКт], "Договоры", СтруктураШапкиДокумента.ДоговорКонтрагента);
				
				Если ТекущийПлатеж.КоррСчет.Валютный Тогда
					Проводка["Валюта" + КоррДтКт] 		 = СтруктураШапкиДокумента.ВалютаВзаиморасчетов;
					Проводка["ВалютнаяСумма" + КоррДтКт] = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
						ТекущийПлатеж.УвеличениеДолгаКонтрагента,
						ТекущийПлатеж.ВалютаВзаиморасчетов, СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
						ТекущийПлатеж.КурсВзаиморасчетов, СтруктураШапкиДокумента.КурсВзаиморасчетов,
						ТекущийПлатеж.КратностьВзаиморасчетов, СтруктураШапкиДокумента.КратностьВзаиморасчетов);
				КонецЕсли;
					
			Иначе
				
				Для каждого ВидСубконтоКоррСчета из ТекущийПлатеж.КоррСчет.ВидыСубконто цикл
					БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + КоррДтКт], Проводка["Субконто" + КоррДтКт], ВидСубконтоКоррСчета.НомерСтроки, СтруктураШапкиДокумента["Субконто" + КоррДтКт + ВидСубконтоКоррСчета.НомерСтроки]);
				КонецЦикла;
				
				Если ТекущийПлатеж.КоррСчет.Валютный Тогда
					Проводка["Валюта" + КоррДтКт] 		 = ТекущийПлатеж.ВалютаВзаиморасчетов;
					Проводка["ВалютнаяСумма" + КоррДтКт] = ТекущийПлатеж.УвеличениеДолгаКонтрагента;
				КонецЕсли;
				
			КонецЕсли;

			Проводка.Сумма = ТекущийПлатеж.СуммаРегл;
			
		КонецЕсли; 
		
		Если ТекущийПлатеж.УменьшениеДолгаКонтрагента <> 0 Тогда
			
			ДтКт     = "Кт";
			КоррДтКт = "Дт";              
			СчетРасчетов = ?(НЕ ЗначениеЗаполнено(ТекущийПлатеж.СчетУчетаАвансов),ТекущийПлатеж.СчетУчетаРасчетов, ТекущийПлатеж.СчетУчетаАвансов);
			
			Проводка = ПроводкиБУ.Добавить();
			Проводка.Период      = ДатаДока;
			Проводка.Активность  = Истина;
			Проводка.Организация = СтруктураШапкиДокумента.Организация;
			Проводка.Содержание  = "Уменьшение долга";

			Проводка["Счет" + ДтКт]= СчетРасчетов;
			БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + ДтКт], Проводка["Субконто" + ДтКт], "Контрагенты", СтруктураШапкиДокумента.КонтрагентДебитор);
			БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + ДтКт], Проводка["Субконто" + ДтКт],"Договоры",     ТекущийПлатеж.ДоговорКонтрагента);
				
			Если СчетРасчетов.Валютный тогда
				Проводка["Валюта" + ДтКт]        = ТекущийПлатеж.ВалютаВзаиморасчетов;
				Проводка["ВалютнаяСумма" + ДтКт] = ТекущийПлатеж.УменьшениеДолгаКонтрагента;
			КонецЕсли;
				
			Проводка["Счет" + КоррДтКт] = ТекущийПлатеж.КоррСчет;
			
			Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПереносЗадолженности Тогда
				
				БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + КоррДтКт], Проводка["Субконто" + КоррДтКт], "Контрагенты", СтруктураШапкиДокумента.КонтрагентКредитор);
				БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + КоррДтКт], Проводка["Субконто" + КоррДтКт], "Договоры", СтруктураШапкиДокумента.ДоговорКонтрагента);
				
				Если ТекущийПлатеж.КоррСчет.Валютный Тогда
					Проводка["Валюта" + КоррДтКт] 		 = СтруктураШапкиДокумента.ВалютаВзаиморасчетов;
					Проводка["ВалютнаяСумма" + КоррДтКт] = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
						ТекущийПлатеж.УменьшениеДолгаКонтрагента,
						ТекущийПлатеж.ВалютаВзаиморасчетов, СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
						ТекущийПлатеж.КурсВзаиморасчетов, СтруктураШапкиДокумента.КурсВзаиморасчетов,
						ТекущийПлатеж.КратностьВзаиморасчетов, СтруктураШапкиДокумента.КратностьВзаиморасчетов);
				КонецЕсли;
					
			Иначе
				
				Для каждого ВидСубконтоКоррСчета из ТекущийПлатеж.КоррСчет.ВидыСубконто цикл
					БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + КоррДтКт], Проводка["Субконто" + КоррДтКт], ВидСубконтоКоррСчета.НомерСтроки, СтруктураШапкиДокумента["Субконто" + КоррДтКт + ВидСубконтоКоррСчета.НомерСтроки]);
				КонецЦикла;
				
				Если ТекущийПлатеж.КоррСчет.Валютный Тогда
					Проводка["Валюта" + КоррДтКт] 		 = ТекущийПлатеж.ВалютаВзаиморасчетов;
					Проводка["ВалютнаяСумма" + КоррДтКт] = ТекущийПлатеж.УменьшениеДолгаКонтрагента;
				КонецЕсли;
				
			КонецЕсли;

			Проводка.Сумма = ТекущийПлатеж.СуммаРегл;
			
		КонецЕсли; 
		
	КонецЦикла;
	
	// Списание задолженности в налоговом учете
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.СписаниеЗадолженности и ТаблицаПоСуммамДолга.Количество()>0 
		и СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
		Для Каждого СтрокаДолга Из ТаблицаПоСуммамДолга Цикл
			
			Если СтрокаДолга.ВидЗадолженности = Перечисления.ВидыЗадолженности.Дебиторская Тогда
				
				Если СтрокаДолга.СуммаНУ <> 0 Тогда
					ПроводкаНУ = Движения.Налоговый.Добавить();
					ПроводкаНУ.Период      = СтруктураШапкиДокумента.Дата;
					ПроводкаНУ.Организация = СтруктураШапкиДокумента.Организация;
					ПроводкаНУ.Сумма       =  СтрокаДолга.СуммаНУ;
					ПроводкаНУ.Содержание  = "Списана дебиторская задолженность";
				
					ПроводкаНУ.СчетДт = СтрокаДолга.КоррСчетНУ;
					БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 1,СтрокаДолга.КоррСубконтоНУ1);
					БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 2,СтрокаДолга.КоррСубконтоНУ2);
					БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 3,СтрокаДолга.КоррСубконтоНУ3);
					
					ПроводкаНУ.СчетКт = ПланыСчетов.Налоговый.ПоступлениеИВыбытиеИмуществаРаботУслугПрав;
					БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, "УсловияПоступленияИВыбытия", Перечисления.УсловияПоступленияИВыбытияИмущества.Другие);
					БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, "Контрагенты", СтруктураШапкиДокумента.КонтрагентДебитор);
					БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, "Договоры", СтрокаДолга.ДоговорКонтрагента);
				КонецЕсли;
				
				Если СтруктураШапкиДокумента.ПоддержкаПБУ18 И СтрокаДолга.СуммаРегл <> СтрокаДолга.СуммаНУ Тогда
					
					ПроводкаНУ 				= Движения.Налоговый.Добавить();
					ПроводкаНУ.Период 		= СтруктураШапкиДокумента.Дата;
					ПроводкаНУ.Организация 	= СтруктураШапкиДокумента.Организация;
					ПроводкаНУ.Сумма		= СтрокаДолга.СуммаРегл - СтрокаДолга.СуммаНУ;
					ПроводкаНУ.Содержание	= "Списана дебиторская задолженность";
					
					ПроводкаНУ.СчетДт = СтрокаДолга.КоррСчетНУ;
					ПроводкаНУ.ВидУчетаДт = Перечисления.ВидыУчетаПоПБУ18.ПР;
					БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 1,СтрокаДолга.КоррСубконтоНУ1);
					БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 2,СтрокаДолга.КоррСубконтоНУ2);
					БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 3,СтрокаДолга.КоррСубконтоНУ3);
					
					ПроводкаНУ.СчетКт = ПланыСчетов.Налоговый.ПоступлениеИВыбытиеИмуществаРаботУслугПрав;
					ПроводкаНУ.ВидУчетаКт = Перечисления.ВидыУчетаПоПБУ18.НУ; // Взаиморасчеты с контрагентами на ПР типовыми документами не относится (всегда НУ), поэтому и закрываем ее по виду НУ.
					БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, "УсловияПоступленияИВыбытия", Перечисления.УсловияПоступленияИВыбытияИмущества.Другие);
					БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, "Контрагенты", СтруктураШапкиДокумента.КонтрагентДебитор);
					БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, "Договоры", СтрокаДолга.ДоговорКонтрагента);
				
				КонецЕсли;
				
			ИначеЕсли СтрокаДолга.ВидЗадолженности = Перечисления.ВидыЗадолженности.Кредиторская Тогда

				Если СтрокаДолга.СуммаНУ <> 0 Тогда
				
					ПроводкаНУ = Движения.Налоговый.Добавить();
					ПроводкаНУ.Период      = СтруктураШапкиДокумента.Дата;
					ПроводкаНУ.Организация = СтруктураШапкиДокумента.Организация;
					ПроводкаНУ.Сумма       =  СтрокаДолга.СуммаНУ;
			
					ПроводкаНУ.Содержание  = "Списана кредиторская задолженность";
					
					ПроводкаНУ.СчетДт = ПланыСчетов.Налоговый.ПоступлениеИВыбытиеИмуществаРаботУслугПрав;
					БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "УсловияПоступленияИВыбытия", Перечисления.УсловияПоступленияИВыбытияИмущества.Другие);
					БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "Контрагенты", СтруктураШапкиДокумента.КонтрагентДебитор);
					БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "Договоры", СтрокаДолга.ДоговорКонтрагента);
					
					ПроводкаНУ.СчетКт = СтрокаДолга.КоррСчетНУ;
					БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 1,СтрокаДолга.КоррСубконтоНУ1);
					БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 2,СтрокаДолга.КоррСубконтоНУ2);
					БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 3,СтрокаДолга.КоррСубконтоНУ3);
					
				КонецЕсли;
				
				Если СтруктураШапкиДокумента.ПоддержкаПБУ18 И СтрокаДолга.СуммаРегл <> СтрокаДолга.СуммаНУ Тогда
				
					ПроводкаНУ 				= Движения.Налоговый.Добавить();
					ПроводкаНУ.Период 		= СтруктураШапкиДокумента.Дата;
					ПроводкаНУ.Организация 	= СтруктураШапкиДокумента.Организация;
					ПроводкаНУ.Сумма		= СтрокаДолга.СуммаРегл - СтрокаДолга.СуммаНУ;
					ПроводкаНУ.Содержание	= "Списана кредиторская задолженность";

					ПроводкаНУ.СчетДт = ПланыСчетов.Налоговый.ПоступлениеИВыбытиеИмуществаРаботУслугПрав;
					ПроводкаНУ.ВидУчетаДт = Перечисления.ВидыУчетаПоПБУ18.НУ; // Взаиморасчеты с контрагентами на ПР типовыми документами не относится (всегда НУ), поэтому и закрываем ее по виду НУ.
					БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "УсловияПоступленияИВыбытия", Перечисления.УсловияПоступленияИВыбытияИмущества.Другие);
					БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "Контрагенты", СтруктураШапкиДокумента.КонтрагентДебитор);
					БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "Договоры", СтрокаДолга.ДоговорКонтрагента);
					
					ПроводкаНУ.СчетКт = СтрокаДолга.КоррСчетНУ;
					ПроводкаНУ.ВидУчетаКт = Перечисления.ВидыУчетаПоПБУ18.ПР;
					БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 1,СтрокаДолга.КоррСубконтоНУ1);
					БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 2,СтрокаДолга.КоррСубконтоНУ2);
					БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 3,СтрокаДолга.КоррСубконтоНУ3);
					
				КонецЕсли;
				
			КонецЕсли; 
			
		КонецЦикла; 
	КонецЕсли; 
	
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета 
		и не СтруктураШапкиДокумента.ИспользоватьВспомогательныйСчет Тогда
		
		БухгалтерскийУчетРасчетовСКонтрагентами.СопоставитьПроводкиКорректировкиДолгаСВспомогательнымСчетом(ПроводкиБУ);
		
	КонецЕсли; 
	
	// Движения по регистру накопления "Резервы по сомнительным долгам"
	ДвиженияПоРегиструРезервыПоСомнительнымДолгам(СтруктураШапкиДокумента, ТаблицаПоСуммамДолга, Отказ, Заголовок);
	
КонецПроцедуры // ДвиженияПоРегистрамРегл()

Процедура ДвиженияПоРегиструРезервыПоСомнительнымДолгам(СтруктураШапкиДокумента, ТаблицаПоСуммамДолга, Отказ, Заголовок)

	Если СтруктураШапкиДокумента.ВидОперации <> Перечисления.ВидыОперацийКорректировкаДолга.СписаниеЗадолженности Тогда
		Возврат;
	КонецЕсли;
	
	ТребуетсяСписыватьСРегистраБУ = Ложь;
	ТребуетсяСписыватьСРегистраНУ = Ложь;
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете	
		 И СтруктураШапкиДокумента.ФормироватьРезервыПоСомнительнымДолгамБУ 
		 И СтруктураШапкиДокумента.СчетДт = ПланыСчетов.Хозрасчетный.РезервыПоСомнительнымДолгам Тогда
		ТребуетсяСписыватьСРегистраБУ = Истина;
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете
		 И СтруктураШапкиДокумента.ФормироватьРезервыПоСомнительнымДолгамНУ
		 И СтруктураШапкиДокумента.СчетДтНУ = ПланыСчетов.Налоговый.РезервыПоСомнительнымДолгам Тогда
		ТребуетсяСписыватьСРегистраНУ = Истина;
	КонецЕсли;
	
	Если НЕ ТребуетсяСписыватьСРегистраБУ И НЕ ТребуетсяСписыватьСРегистраНУ Тогда
		Возврат;
	КонецЕсли;

	// Составим таблицу списываемых долгов по докуметам расчетов.
	ТаблицаСписания = ТаблицаПоСуммамДолга.СкопироватьКолонки();
	Для Каждого СтрокаТаблицы Из ТаблицаПоСуммамДолга Цикл
		Если СтрокаТаблицы.ВидЗадолженности = Перечисления.ВидыЗадолженности.Дебиторская Тогда
			Если СтрокаТаблицы.ВалютаВзаиморасчетов = мВалютаРегламентированногоУчета Тогда
				НоваяСтрока = ТаблицаСписания.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	ТаблицаСписания.Колонки.СуммаРегл.Имя = "СуммаБУ";
	
	Если ТаблицаСписания.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	// Для договоров, по которым взаиморасчеты ведутся без расчетных документов,
	// в табличной части КорректировкиДолга ссылок на закрываемые документы нет, 
	// поэтому определим их по фактически списанным документам согласно регистра 
	// РасчетыПоРеализацииВУсловныхЕдиницахОрганизации. К моменту вызова текущей процедуры после
	// списания остатков набор РасчетыПоРеализацииВУсловныхЕдиницахОрганизации еще не записан в базу,
	// поэтому считываем непосредственно из Движений.
	ТаблицаСписаноПоРасчетнымДокументам = Движения.РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.Выгрузить();

	ТаблицаСписаноПоРасчетнымДокументам.Колонки.СчетОплаты.Имя 	= "СчетУчетаРасчетовСКонтрагентом";
	ТаблицаСписаноПоРасчетнымДокументам.Колонки.СуммаРег.Имя 	= "СуммаБУ";
	ТаблицаСписаноПоРасчетнымДокументам.Колонки.Документ.Имя 	= "ДокументРасчетовСКонтрагентом";
	ТаблицаСписаноПоРасчетнымДокументам.Колонки.Добавить("СуммаНУ", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
	
	ТаблицаСписаноПоРасчетнымДокументам.Индексы.Добавить("ДоговорКонтрагента, СчетУчетаРасчетовСКонтрагентом, Сделка");
		
	НайденныеСтроки = Новый Массив;	
	
	СтруктураПоиска = Новый Структура("ДоговорКонтрагента, СчетУчетаРасчетовСКонтрагентом");
	
	ТаблицаДвиженийРезервыПоСомнительнымДолгам = Движения.РезервыПоСомнительнымДолгам.ВыгрузитьКолонки();
	
	Для Каждого СтрокаДолга Из ТаблицаСписания Цикл
	
		Если НЕ СтрокаДолга.ВестиПоДокументамРасчетовСКонтрагентом
			 ИЛИ НЕ ЗначениеЗаполнено(СтрокаДолга.ДокументРасчетовСКонтрагентом) Тогда
			 
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаДолга);
			Если СтрокаДолга.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом Тогда
				Если СтруктураПоиска.Свойство("Сделка") Тогда
					СтруктураПоиска.Удалить("Сделка");
				КонецЕсли;
			Иначе
				СтруктураПоиска.Вставить("Сделка", СтрокаДолга.СделкаВзаиморасчеты);
			КонецЕсли;
			
			НайденныеСтроки =  ТаблицаСписаноПоРасчетнымДокументам.НайтиСтроки(СтруктураПоиска);
			
			Если ТребуетсяСписыватьСРегистраНУ Тогда
				// В регистре РасчетыПоРеализацииВУсловныхЕдиницахОрганизации нет суммы НУ, рассчитываем ее пропорционально.
				ТаблицаНайденныхСтрок = ТаблицаСписаноПоРасчетнымДокументам.Скопировать(НайденныеСтроки);
				ТаблицаНайденныхСтрок.ЗаполнитьЗначения(0, "СуммаНУ");
				
				Если ТаблицаНайденныхСтрок.Итог("СуммаБУ") <> СтрокаДолга.СуммаНУ Тогда
					УчетНДС.РаспределитьСуммуПоСтолбцу(ТаблицаНайденныхСтрок.ВыгрузитьКолонку("СуммаБУ"), СтрокаДолга.СуммаНУ, ТаблицаНайденныхСтрок, "СуммаНУ");
				Иначе
					// Полностью копируем из колонки СуммаБУ в СуммаНУ.
					ТаблицаНайденныхСтрок.ЗагрузитьКолонку(ТаблицаНайденныхСтрок.ВыгрузитьКолонку("СуммаБУ"), "СуммаНУ");
				КонецЕсли;
				
				НайденныеСтроки = ТаблицаНайденныхСтрок;
			КонецЕсли;
			
		Иначе
			// Списываем резерв по тому расчетному документу, который указан в табличной части документа.
			НайденныеСтроки = Новый Массив;
			НайденныеСтроки.Добавить(СтрокаДолга);
		КонецЕсли;
		
		ИтогоСписаноБУ = 0;
		ИтогоСписаноНУ = 0;
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		
			СуммаБУ = 0;
			СуммаНУ = 0;	
		
			Если ТребуетсяСписыватьСРегистраБУ Тогда
				СуммаБУ = НайденнаяСтрока.СуммаБУ;
			КонецЕсли;
			Если ТребуетсяСписыватьСРегистраНУ Тогда
				СуммаНУ = НайденнаяСтрока.СуммаНУ;
			КонецЕсли;
			
			Если СуммаБУ = 0 И СуммаНУ = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Движение = ТаблицаДвиженийРезервыПоСомнительнымДолгам.Добавить();
			ЗаполнитьЗначенияСвойств(Движение, НайденнаяСтрока);
			Движение.Документ = НайденнаяСтрока.ДокументРасчетовСКонтрагентом;
			Движение.СуммаБУ = СуммаБУ;
			Движение.СуммаНУ = СуммаНУ;
		
			ИтогоСписаноБУ = ИтогоСписаноБУ + СуммаБУ;
			ИтогоСписаноНУ = ИтогоСписаноНУ + СуммаНУ;
			
		КонецЦикла;
	
		РазницаБУ = ?(ТребуетсяСписыватьСРегистраБУ, СтрокаДолга.СуммаБУ - ИтогоСписаноБУ, 0);
		РазницаНУ = ?(ТребуетсяСписыватьСРегистраНУ, СтрокаДолга.СуммаНУ - ИтогоСписаноНУ, 0);
		
		Если РазницаБУ <> 0 ИЛИ РазницаНУ <> 0 Тогда
			// В документе указана сумма иначе, чем списано из регистра РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.
			ТекстСообщения = "Сумма списанной задолженности по договору " + СтрокаДолга.ДоговорКонтрагента 
						   + " со счета " + СтрокаДолга.СчетУчетаРасчетовСКонтрагентом + " по регистру ""Расчеты по реализации (бухгалтерский учет)"""
						   + " отличается от указанной в документе: ";
			Если РазницаБУ <> 0 Тогда						   
				ТекстСообщения = ТекстСообщения + Символы.ПС + "   по бухгалтерскому учету: в документе " + СтрокаДолга.СуммаБУ + "   списано с регистра " + ИтогоСписаноБУ;
			КонецЕсли;
			Если РазницаНУ <> 0 Тогда						   
				ТекстСообщения = ТекстСообщения + Символы.ПС + "   по налоговому учету: в документе " + СтрокаДолга.СуммаНУ + "    списано с регистра " + ИтогоСписаноНУ;
			КонецЕсли;
			ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, Ложь, Заголовок);
		КонецЕсли;
		
	КонецЦикла;
	
	ТаблицаДвиженийРезервыПоСомнительнымДолгам.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация, "Организация");
	ТаблицаДвиженийРезервыПоСомнительнымДолгам.ЗаполнитьЗначения(СтруктураШапкиДокумента.КонтрагентДебитор, "Контрагент");
	
	Движения.РезервыПоСомнительнымДолгам.мПериод = СтруктураШапкиДокумента.Дата;
	Движения.РезервыПоСомнительнымДолгам.мТаблицаДвижений = ТаблицаДвиженийРезервыПоСомнительнымДолгам;
	Движения.РезервыПоСомнительнымДолгам.ВыполнитьРасход();
	
КонецПроцедуры // ДвиженияПоРегиструРезервыПоСомнительнымДолгам()

Процедура ДвиженияПоРегистрамУСНРегл(РежимПроведения, СтруктураШапкиДокумента,Отказ, Заголовок)
	
	Если НЕ СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН Тогда
		Возврат;
	КонецЕсли;
	
	НалоговыйУчетУСН.ДвиженияУСН(Ссылка, РежимПроведения);
		
КонецПроцедуры

// Используется при проведении документа "Корректировка долга" с операцией "Перенос задолженности".
// Формирует движения регистров по контрагенту, на которого переносится долг.
//
Процедура ДвиженияПоПереносуЗадолженности(СтруктураШапкиДокумента, ТаблицаПоСуммамДолга, РежимВосстановленияПоследовательностейРасчетов, Отказ, Заголовок) Экспорт
	
	Если СтруктураШапкиДокумента.ВидОперации <> Перечисления.ВидыОперацийКорректировкаДолга.ПереносЗадолженности Тогда
		Возврат;
	КонецЕсли;
	
	ПереносДолгаНаДругогоКонтрагента = СтруктураШапкиДокумента.КонтрагентДебитор <> СтруктураШапкиДокумента.КонтрагентКредитор;
	
	ФормироватьДвиженияУпрВзаиморасчетов = СтруктураШапкиДокумента.ОтражатьВУправленческомУчете И НЕ РежимВосстановленияПоследовательностейРасчетов;
	
	ФормироватьДвиженияВзаиморасчетовПоДокументам = НЕ РежимВосстановленияПоследовательностейРасчетов 
		И СтруктураШапкиДокумента.ВестиПоДокументамРасчетовСКонтрагентом;
	
	Если ФормироватьДвиженияВзаиморасчетовПоДокументам Тогда
		
		ВидРасчетовСКонтрагентом = 
			?(СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем
			ИЛИ СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером,
			Перечисления.ВидыРасчетовСКонтрагентами.ПоРеализации, Перечисления.ВидыРасчетовСКонтрагентами.ПоПриобретению);
			
	КонецЕсли;
	
	// Движения регистров ВзаиморасчетыСКонтрагентами, РасчетыСКонтрагентами, ВзаиморасчетыСКонтрагентамиПоДокументамРасчетов
	
	Если ФормироватьДвиженияУпрВзаиморасчетов ИЛИ ФормироватьДвиженияВзаиморасчетовПоДокументам Тогда
		
		Для каждого СтрокаДолга Из ТаблицаПоСуммамДолга Цикл
			
			ВидДвижения = ?(СтрокаДолга.УвеличениеДолгаКонтрагента > 0, 
				ВидДвиженияНакопления.Расход, ВидДвиженияНакопления.Приход);
			
			Если ФормироватьДвиженияУпрВзаиморасчетов Тогда
				
				// ВзаиморасчетыСКонтрагентами 
				
				Движение = Движения.ВзаиморасчетыСКонтрагентами.Добавить();
				
				Движение.ВидДвижения = ВидДвижения;
				Движение.Период      = СтруктураШапкиДокумента.Дата;
				Движение.Активность  = Истина;
				
				Движение.Организация        = СтруктураШапкиДокумента.Организация;
				Движение.Контрагент         = СтруктураШапкиДокумента.КонтрагентКредитор;
				Движение.ДоговорКонтрагента = СтруктураШапкиДокумента.ДоговорКонтрагента;
				Движение.Сделка             = Неопределено;
				
				НоваяСуммаВзаиморасчетов    = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
				СтрокаДолга.Сумма,
				СтрокаДолга.ВалютаВзаиморасчетов, СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
				СтрокаДолга.КурсВзаиморасчетов, СтруктураШапкиДокумента.КурсВзаиморасчетов,
				СтрокаДолга.КратностьВзаиморасчетов, СтруктураШапкиДокумента.КратностьВзаиморасчетов);
				СуммаУпр = ?(ВидДвижения = ВидДвиженияНакопления.Расход, СтрокаДолга.УвеличениеДолгаУпр, СтрокаДолга.УменьшениеДолгаУпр);
				
				Движение.СуммаВзаиморасчетов = НоваяСуммаВзаиморасчетов;
				Движение.СуммаУпр            = СуммаУпр;
				
				// РасчетыСКонтрагентами 
				
				Движение = Движения.РасчетыСКонтрагентами.Добавить();
				
				Движение.ВидДвижения = ВидДвижения;
				Движение.Период      = СтруктураШапкиДокумента.Дата;
				Движение.Активность  = Истина;
				
				Движение.Организация        = СтруктураШапкиДокумента.Организация;
				Движение.Контрагент         = СтруктураШапкиДокумента.КонтрагентКредитор;
				Движение.ДоговорКонтрагента = СтруктураШапкиДокумента.ДоговорКонтрагента;
				Движение.Сделка             = Неопределено;
				Движение.РасчетыВозврат     = Перечисления.РасчетыВозврат.Расчеты;
				
				Движение.СуммаВзаиморасчетов = НоваяСуммаВзаиморасчетов;
				Движение.СуммаУпр            = СуммаУпр;
				
			КонецЕсли;
			
			// ВзаиморасчетыСКонтрагентамиПоДокументамРасчетов
			
			Если ФормироватьДвиженияВзаиморасчетовПоДокументам Тогда
				
				Движение = Движения.ВзаиморасчетыСКонтрагентамиПоДокументамРасчетов.Добавить();
				
				Движение.ВидДвижения = ВидДвижения;
				Движение.Период      = СтруктураШапкиДокумента.Дата;
				Движение.Активность  = Истина;
				
				Движение.Организация        = СтруктураШапкиДокумента.Организация;
				Движение.Контрагент         = СтруктураШапкиДокумента.КонтрагентКредитор;
				Движение.ДоговорКонтрагента = СтруктураШапкиДокумента.ДоговорКонтрагента;
				Движение.Сделка             = Неопределено;
				
				НовыйДокументРасчетов = ?(НЕ ЗначениеЗаполнено(СтрокаДолга.ДокументРасчетовСКонтрагентом) ИЛИ ПереносДолгаНаДругогоКонтрагента, 
				СтруктураШапкиДокумента.Ссылка, СтрокаДолга.ДокументРасчетовСКонтрагентом);
				
				Движение.ДокументРасчетовСКонтрагентом = НовыйДокументРасчетов;
				Движение.ВидРасчетовСКонтрагентом      = ВидРасчетовСКонтрагентом;
				Движение.УпрУчет                       = СтруктураШапкиДокумента.ОтражатьВУправленческомУчете;
				
				Движение.СуммаВзаиморасчетов = НоваяСуммаВзаиморасчетов;
				Если СтруктураШапкиДокумента.ВалютаВзаиморасчетов <> СтруктураШапкиДокумента.ВалютаРегламентированногоУчета Тогда
					Движение.СуммаРегл = СтрокаДолга.СуммаРегл;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ФормироватьДвиженияРасчетовПоРеализации = 
		СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем
		ИЛИ СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером;
	ФормироватьДвиженияРасчетовПоПриобретению = 
		СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком
		ИЛИ СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом;
		
	Если ФормироватьДвиженияРасчетовПоРеализации Тогда
		НаборЗаписей                = Движения.РасчетыПоРеализацииВУсловныхЕдиницахОрганизации;
		НаборЗаписейПротивоположный = Движения.РасчетыПоПриобретениюВУсловныхЕдиницахОрганизации;
		СчетПрихода                 = СтруктураШапкиДокумента.СчетДт; 
		СчетРасхода                 = СтруктураШапкиДокумента.СчетКт; 
	ИначеЕсли ФормироватьДвиженияРасчетовПоПриобретению Тогда
		НаборЗаписей                = Движения.РасчетыПоПриобретениюВУсловныхЕдиницахОрганизации;
		НаборЗаписейПротивоположный = Движения.РасчетыПоРеализацииВУсловныхЕдиницахОрганизации;
		СчетПрихода                 = СтруктураШапкиДокумента.СчетКт; 
		СчетРасхода                 = СтруктураШапкиДокумента.СчетДт;
	Иначе
		НаборЗаписей                = Неопределено;
		НаборЗаписейПротивоположный = Неопределено;
	КонецЕсли;
	
	Если НЕ НаборЗаписей = Неопределено Тогда
		
		ТаблицаЗаписей = НаборЗаписей.Выгрузить();
		
		Для каждого ДвижениеОснование Из НаборЗаписей Цикл
				
			НовоеДвижение             = ТаблицаЗаписей.Добавить();
			НовоеДвижение.Период      = ДвижениеОснование.Период;
			НовоеДвижение.Активность  = Истина;
			НовоеДвижение.ВидДвижения = ?(ДвижениеОснование.ВидДвижения = ВидДвиженияНакопления.Приход,
				ВидДвиженияНакопления.Расход, ВидДвиженияНакопления.Приход);
			НовоеДвижение.Организация        = СтруктураШапкиДокумента.Организация;
			НовоеДвижение.Контрагент         = СтруктураШапкиДокумента.КонтрагентКредитор;
			НовоеДвижение.ДоговорКонтрагента = СтруктураШапкиДокумента.ДоговорКонтрагента;
			НовоеДвижение.Сделка             = Неопределено;
			// Определим какой документ необходимо использовать в качестве аналитики
			// Использовать документ "КорректировкаДолга" если
			// 1. Это перенос на другого контрагента и есть дата оплаты
			// 2. У нового договора стоит флаг ВестиПоДокументамРасчетовСКонтрагентом, а у старого этого флага нет.
			ИспользоватьКорректировкуКакДокументРасчета = (ПереносДолгаНаДругогоКонтрагента И ЗначениеЗаполнено(ДвижениеОснование.ДатаОплаты)) 
				ИЛИ (СтруктураШапкиДокумента.ВестиПоДокументамРасчетовСКонтрагентом И НЕ ДвижениеОснование.ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом);
			НовоеДвижение.Документ           = ?(ИспользоватьКорректировкуКакДокументРасчета, СтруктураШапкиДокумента.Ссылка, ДвижениеОснование.Документ);
			НовоеДвижение.ДатаОплаты         = ?(ЗначениеЗаполнено(ДвижениеОснование.ДатаОплаты), Дата, '00010101');
			НовоеДвижение.СчетОплаты         = ?(ДвижениеОснование.ВидДвижения = ВидДвиженияНакопления.Приход, СчетПрихода, СчетРасхода);
			
			НовоеДвижение.СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
				ДвижениеОснование.СуммаВзаиморасчетов,
				ДвижениеОснование.ДоговорКонтрагента.ВалютаВзаиморасчетов, СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
				?(ДвижениеОснование.СуммаВзаиморасчетов = 0, 1, ДвижениеОснование.СуммаРег / ДвижениеОснование.СуммаВзаиморасчетов), СтруктураШапкиДокумента.КурсВзаиморасчетов,
				1, СтруктураШапкиДокумента.КратностьВзаиморасчетов);
			
			НовоеДвижение.СуммаРег = ДвижениеОснование.СуммаРег;
			
		КонецЦикла;
		
		НаборЗаписей.Загрузить(ТаблицаЗаписей);
		
	КонецЕсли;
	
	// Если перенос с договора с поставщика на договор покупателя или наоборот
	// то следует выполнить движение по противоположному регистру
	Если НЕ НаборЗаписейПротивоположный = Неопределено Тогда
		
		ТаблицаЗаписей = НаборЗаписей.Выгрузить();
		
		Для каждого ДвижениеОснование Из НаборЗаписейПротивоположный Цикл
				
			НовоеДвижение             = ТаблицаЗаписей.Добавить();
			НовоеДвижение.Период      = ДвижениеОснование.Период;
			НовоеДвижение.Активность  = Истина;
			НовоеДвижение.ВидДвижения = ДвижениеОснование.ВидДвижения;
			НовоеДвижение.Организация        = СтруктураШапкиДокумента.Организация;
			НовоеДвижение.Контрагент         = СтруктураШапкиДокумента.КонтрагентКредитор;
			НовоеДвижение.ДоговорКонтрагента = СтруктураШапкиДокумента.ДоговорКонтрагента;
			НовоеДвижение.Сделка             = Неопределено;
			НовоеДвижение.Документ           = СтруктураШапкиДокумента.Ссылка;
			НовоеДвижение.ДатаОплаты         = ?(ЗначениеЗаполнено(ДвижениеОснование.ДатаОплаты), Дата, '00010101');
			НовоеДвижение.СчетОплаты         = ?(ДвижениеОснование.ВидДвижения = ВидДвиженияНакопления.Приход, СчетРасхода, СчетПрихода);
			
			НовоеДвижение.СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
				ДвижениеОснование.СуммаВзаиморасчетов,
				ДвижениеОснование.ДоговорКонтрагента.ВалютаВзаиморасчетов, СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
				?(ДвижениеОснование.СуммаВзаиморасчетов = 0, 1, ДвижениеОснование.СуммаРег / ДвижениеОснование.СуммаВзаиморасчетов), СтруктураШапкиДокумента.КурсВзаиморасчетов,
				1, СтруктураШапкиДокумента.КратностьВзаиморасчетов);
			
			НовоеДвижение.СуммаРег = ДвижениеОснование.СуммаРег;
			
		КонецЦикла;
		
		НаборЗаписей.Загрузить(ТаблицаЗаписей);
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает субконто на счете по виду субконто. Если такое субконто на счете
// отсутствует, то ничего не делается.
//
// Параметры:
//		Счет - Счет, к которому относится субконто
//      Субконто - набор субконто
//		Номер или имя установливаемого субконто
//      Значение субконто - значение устанавливаемого субконто
//
Процедура УстановитьСубконтоПоВидуСубконто(Счет, Субконто, ВидСубконто, ЗначениеСубконто, Сообщать = Ложь, Заголовок = "") Экспорт

	Если Счет = Неопределено ИЛИ Счет.Пустая() Тогда
		Возврат;
	КонецЕсли;

	Если Счет.ВидыСубконто.Найти(ВидСубконто) = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если ВидСубконто.ТипЗначения.СодержитТип(ТипЗнч(ЗначениеСубконто)) Тогда
		Субконто.Вставить(ВидСубконто, ЗначениеСубконто);

	ИначеЕсли Сообщать тогда
		ОбщегоНазначения.СообщитьОбОшибке("Неверное значение """ + ЗначениеСубконто + """ для вида субконто <" + ВидСубконто + ">",, Заголовок);

	КонецЕсли;

КонецПроцедуры // БухгалтерскийУчет.УстановитьСубконто()

// Процедура формирует структуру шапки документа и дополнительных полей.
//
Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента) Экспорт
	
	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;
	
	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);

	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = УправлениеЗапасами.СформироватьДеревоПолейЗапросаПоШапке();
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы"             , "ВалютаУправленческогоУчета", "ВалютаУправленческогоУчета");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы"             , "КурсВалютыУправленческогоУчета"    , "КурсВалютыУправленческогоУчета");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика"       , "СписыватьПартииПриПроведенииДокументов" , "СписыватьПартииПриПроведенииДокументов");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Организация"         , "ОтражатьВРегламентированномУчете"              , "ОтражатьВРегламентированномУчете");
	
	Если ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПереносЗадолженности Тогда
		УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "Организация", "ДоговорОрганизация");
		УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "ВидДоговора", "ВидДоговора");
		УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "ВедениеВзаиморасчетов", "ВедениеВзаиморасчетов");
		УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "РасчетыВУсловныхЕдиницах", "РасчетыВУсловныхЕдиницах");
		УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "ВестиПоДокументамРасчетовСКонтрагентом", "ВестиПоДокументамРасчетовСКонтрагентом");
		УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "ВалютаВзаиморасчетов", "ВалютаВзаиморасчетов");
	КонецЕсли; 
	
	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);
	
	Если ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПереносЗадолженности Тогда
		Если СтруктураШапкиДокумента.ВалютаВзаиморасчетов = СтруктураШапкиДокумента.ВалютаДокумента Тогда
			СтруктураШапкиДокумента.Вставить("КурсВзаиморасчетов",      СтруктураШапкиДокумента.КурсДокумента);
			СтруктураШапкиДокумента.Вставить("КратностьВзаиморасчетов", СтруктураШапкиДокумента.КратностьДокумента);
		Иначе
			СтруктураКурса = МодульВалютногоУчета.ПолучитьКурсВалюты(СтруктураШапкиДокумента.ВалютаВзаиморасчетов, СтруктураШапкиДокумента.Дата);
			СтруктураШапкиДокумента.Вставить("КурсВзаиморасчетов",      СтруктураКурса.Курс);
			СтруктураШапкиДокумента.Вставить("КратностьВзаиморасчетов", СтруктураКурса.Кратность);
		КонецЕсли;
	КонецЕсли;
	
	Если РежимВосстановленияПоследовательностейРасчетов Тогда
		СтруктураШапкиДокумента.Вставить("РежимВосстановленияПоследовательностейРасчетов", Истина);
	КонецЕсли;
	
КонецПроцедуры // ПодготовитьСтруктуруШапкиДокумента()

// Процедура формирует таблицы документа.
//
Процедура ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоСуммамДолга,
	ТаблицаРасчетыСПокупателямиКредиторскаяЗадолженность, ТаблицаРасчетыСПокупателямиДебиторскаяЗадолженность,
	ТаблицаРасчетыСПоставщикамиКредиторскаяЗадолженность, ТаблицаРасчетыСПоставщикамиДебиторскаяЗадолженность) Экспорт
	
	// Получим необходимые данные для проведения и проверки заполнения данные по табличной части "СуммыДолга".
	СтруктураПолей = Новый Структура;
	
	СтруктураПолей.Вставить("ДоговорКонтрагента"                      , "ДоговорКонтрагента");
	СтруктураПолей.Вставить("ВестиПоДокументамРасчетовСКонтрагентом"  , "ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом");
	СтруктураПолей.Вставить("ВалютаВзаиморасчетов"                    , "ДоговорКонтрагента.ВалютаВзаиморасчетов");
	СтруктураПолей.Вставить("ВедениеВзаиморасчетов"                   , "ДоговорКонтрагента.ВедениеВзаиморасчетов");
	СтруктураПолей.Вставить("ДоговорОрганизация"                      , "ДоговорКонтрагента.Организация");
	СтруктураПолей.Вставить("ДоговорВид"                              , "ДоговорКонтрагента.ВидДоговора");
	СтруктураПолей.Вставить("РасчетыВУсловныхЕдиницах"                , "ДоговорКонтрагента.РасчетыВУсловныхЕдиницах");
	СтруктураПолей.Вставить("КонтрагентДоговора"                      , "ДоговорКонтрагента.Владелец");
	СтруктураПолей.Вставить("Организация"                      , "ДоговорКонтрагента.Организация");

	СтруктураПолей.Вставить("КонтролироватьДенежныеСредстваКомитента" , "ДоговорКонтрагента.КонтролироватьДенежныеСредстваКомитента");
	СтруктураПолей.Вставить("СделкаВзаиморасчеты"                     , "Сделка");
	СтруктураПолей.Вставить("СделкаРасчеты"                           , "Сделка");
	СтруктураПолей.Вставить("ДокументРасчетовСКонтрагентом"           , "ДокументРасчетовСКонтрагентом");
	СтруктураПолей.Вставить("Сумма"                                   , "Сумма");
	СтруктураПолей.Вставить("СуммаРегл"                               , "СуммаРегл");
	СтруктураПолей.Вставить("ВидЗадолженности"                        , "ВидЗадолженности");
	СтруктураПолей.Вставить("КурсВзаиморасчетов"                      , "КурсВзаиморасчетов");
	СтруктураПолей.Вставить("КратностьВзаиморасчетов"                 , "КратностьВзаиморасчетов");
	
	ДополнитьСтруктуруПолейСуммДолгаРегл(СтруктураПолей);

	СтруктураСложныхПолей = Новый Структура;
	СтруктураСложныхПолей.Вставить("ДоговорКонтрагентаПредставление"            , "ПРЕДСТАВЛЕНИЕ(Док.ДоговорКонтрагента)");
	СтруктураСложныхПолей.Вставить("СделкаПредставление"                        , "ПРЕДСТАВЛЕНИЕ(Док.Сделка)");
	СтруктураСложныхПолей.Вставить("ДокументРасчетовСКонтрагентомПредставление" , "ПРЕДСТАВЛЕНИЕ(Док.ДокументРасчетовСКонтрагентом)");
	СтруктураСложныхПолей.Вставить("ВалютаВзаиморасчетовПредставление"          , "ПРЕДСТАВЛЕНИЕ(Док.ДоговорКонтрагента.ВалютаВзаиморасчетов)");
	
	РезультатЗапросаПоСуммамДолга = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "СуммыДолга", СтруктураПолей, СтруктураСложныхПолей);

	// Подготовим таблицы товаров для проведения.
	ТаблицаПоСуммамДолга = ПодготовитьТаблицуСуммДолга(РезультатЗапросаПоСуммамДолга, СтруктураШапкиДокумента);

	ТаблицаРасчетыСПокупателямиКредиторскаяЗадолженность = ТаблицаПоСуммамДолга.Скопировать();
	ТаблицаРасчетыСПокупателямиДебиторскаяЗадолженность  = ТаблицаПоСуммамДолга.Скопировать();
	
	ТаблицаРасчетыСПоставщикамиКредиторскаяЗадолженность = ТаблицаПоСуммамДолга.Скопировать();
	ТаблицаРасчетыСПоставщикамиДебиторскаяЗадолженность  = ТаблицаПоСуммамДолга.Скопировать();

	Счетчик = 0;
	Пока Счетчик < ТаблицаРасчетыСПокупателямиКредиторскаяЗадолженность.Количество() Цикл

		СтрокаТаблицы = ТаблицаРасчетыСПокупателямиКредиторскаяЗадолженность.Получить(Счетчик);
		Если не СтрокаТаблицы.ВидРасчетовСКонтрагентом = Перечисления.ВидыРасчетовСКонтрагентами.ПоРеализации
			или не СтрокаТаблицы.ВидЗадолженности = Перечисления.ВидыЗадолженности.Кредиторская
			Тогда
			ТаблицаРасчетыСПокупателямиКредиторскаяЗадолженность.Удалить(СтрокаТаблицы);
		Иначе
			Счетчик = Счетчик + 1;
		КонецЕсли;

	КонецЦикла;

	Счетчик = 0;
	Пока Счетчик < ТаблицаРасчетыСПокупателямиДебиторскаяЗадолженность.Количество() Цикл

		СтрокаТаблицы = ТаблицаРасчетыСПокупателямиДебиторскаяЗадолженность.Получить(Счетчик);

		Если не СтрокаТаблицы.ВидРасчетовСКонтрагентом = Перечисления.ВидыРасчетовСКонтрагентами.ПоРеализации
			или не СтрокаТаблицы.ВидЗадолженности = Перечисления.ВидыЗадолженности.Дебиторская
			тогда
			ТаблицаРасчетыСПокупателямиДебиторскаяЗадолженность.Удалить(СтрокаТаблицы);
		Иначе
			Счетчик = Счетчик + 1;
		КонецЕсли;

	КонецЦикла;
	
	Счетчик = 0;
	Пока Счетчик < ТаблицаРасчетыСПоставщикамиКредиторскаяЗадолженность.Количество() Цикл

		СтрокаТаблицы = ТаблицаРасчетыСПоставщикамиКредиторскаяЗадолженность.Получить(Счетчик);

		Если не СтрокаТаблицы.ВидРасчетовСКонтрагентом = Перечисления.ВидыРасчетовСКонтрагентами.ПоПриобретению 
			или не СтрокаТаблицы.ВидЗадолженности = Перечисления.ВидыЗадолженности.Кредиторская
			тогда
			ТаблицаРасчетыСПоставщикамиКредиторскаяЗадолженность.Удалить(СтрокаТаблицы);
		Иначе 
			Счетчик= Счетчик + 1;
		КонецЕсли;

	КонецЦикла;
	
	Счетчик = 0;
	Пока Счетчик < ТаблицаРасчетыСПоставщикамиДебиторскаяЗадолженность.Количество() Цикл

		СтрокаТаблицы = ТаблицаРасчетыСПоставщикамиДебиторскаяЗадолженность.Получить(Счетчик);
		Если не СтрокаТаблицы.ВидРасчетовСКонтрагентом = Перечисления.ВидыРасчетовСКонтрагентами.ПоПриобретению 
			или не СтрокаТаблицы.ВидЗадолженности = Перечисления.ВидыЗадолженности.Дебиторская
			Тогда
			ТаблицаРасчетыСПоставщикамиДебиторскаяЗадолженность.Удалить(СтрокаТаблицы);
		Иначе
			Счетчик = Счетчик + 1;
		КонецЕсли;

	КонецЦикла;

	ТаблицаРасчетыСПокупателямиКредиторскаяЗадолженность.Колонки.СделкаВзаиморасчеты.Имя= "Сделка";
	ТаблицаРасчетыСПокупателямиДебиторскаяЗадолженность.Колонки.СделкаВзаиморасчеты.Имя	= "Сделка";
	
	ТаблицаРасчетыСПоставщикамиКредиторскаяЗадолженность.Колонки.СделкаВзаиморасчеты.Имя= "Сделка";
	ТаблицаРасчетыСПоставщикамиДебиторскаяЗадолженность.Колонки.СделкаВзаиморасчеты.Имя	= "Сделка";
	
	ТаблицаРасчетыСПокупателямиКредиторскаяЗадолженность.Колонки.Сумма.Имя	= "СуммаВзаиморасчетов";
	ТаблицаРасчетыСПокупателямиДебиторскаяЗадолженность.Колонки.Сумма.Имя	= "СуммаВзаиморасчетов";
	
	ТаблицаРасчетыСПоставщикамиКредиторскаяЗадолженность.Колонки.Сумма.Имя	= "СуммаВзаиморасчетов";
	ТаблицаРасчетыСПоставщикамиДебиторскаяЗадолженность.Колонки.Сумма.Имя	= "СуммаВзаиморасчетов";
	
КонецПроцедуры // СформироватьТаблицыДокумента()

Процедура ПодготовитьПараметрыУчетнойПолитики(Отказ, Заголовок, СтруктураШапкиДокумента) Экспорт
	
	// Учетная политика 
	ПодготовитьПараметрыУчетнойПолитикиРегл(Отказ, Заголовок, СтруктураШапкиДокумента);
	
КонецПроцедуры // ПодготовитьПараметрыУчетнойПолитики()

Процедура ПодготовитьПараметрыУчетнойПолитикиРегл(Отказ, Заголовок, СтруктураШапкиДокумента) Экспорт
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете 
		ИЛИ СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
		
		мУчетнаяПолитикаБух = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(Дата, Организация);
	Иначе
		мУчетнаяПолитикаБух = Неопределено;
	КонецЕсли; 
	
	Если РежимВосстановленияПоследовательностейРасчетов Тогда
		СтруктураШапкиДокумента.Вставить("ОпределятьАвансыПриПроведенииДокумента", Истина);
	Иначе
		СтруктураШапкиДокумента.Вставить("ОпределятьАвансыПриПроведенииДокумента", ?(НЕ ЗначениеЗаполнено(мУчетнаяПолитикаБух),Ложь,мУчетнаяПолитикаБух.ОпределятьАвансыПриПроведенииДокумента));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(мУчетнаяПолитикаБух) Тогда
		СтруктураШапкиДокумента.Вставить("ФормироватьРезервыПоСомнительнымДолгамБУ", мУчетнаяПолитикаБух.ФормироватьРезервыПоСомнительнымДолгамБУ);
		СтруктураШапкиДокумента.Вставить("ФормироватьРезервыПоСомнительнымДолгамНУ", мУчетнаяПолитикаБух.ФормироватьРезервыПоСомнительнымДолгамНУ);
	Иначе
		СтруктураШапкиДокумента.Вставить("ФормироватьРезервыПоСомнительнымДолгамБУ", Ложь);
		СтруктураШапкиДокумента.Вставить("ФормироватьРезервыПоСомнительнымДолгамНУ", Ложь);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.КорректировкаДолга") Тогда
		ОрганизацияДебитор = ЗаполнениеДокументов.ПолучитьОрганизациюПоКонтрагенту(Основание.КонтрагентДебитор);
		Если НЕ ЗначениеЗаполнено(ОрганизацияДебитор) Тогда
			ОрганизацияКредитор = ЗаполнениеДокументов.ПолучитьОрганизациюПоКонтрагенту(Основание.КонтрагентКредитор);
			Если ЗначениеЗаполнено(ОрганизацияКредитор) Тогда
				Организация        = ОрганизацияКредитор;
				КонтрагентДебитор  = ЗаполнениеДокументов.ПолучитьКонтрагентаПоОрганизации(Основание.Организация);
				КонтрагентКредитор = Основание.КонтрагентДебитор;  
			Иначе
				Возврат;
			КонецЕсли;
		Иначе
			Организация = ОрганизацияДебитор;
			КонтрагентКредитор = ЗаполнениеДокументов.ПолучитьКонтрагентаПоОрганизации(Основание.Организация);
			КонтрагентДебитор  = Основание.КонтрагентКредитор;  
		КонецЕсли;
		
		Для каждого СтрокаОснования Из Основание.СуммыДолга Цикл
			НоваяСтрока = СуммыДолга.Добавить();
			НоваяСтрока.ВидЗадолженности        = ?(СтрокаОснования.ВидЗадолженности = Перечисления.ВидыЗадолженности.Дебиторская, Перечисления.ВидыЗадолженности.Кредиторская, Перечисления.ВидыЗадолженности.Дебиторская);			
			
			ТекКонтрагент =  ?(НоваяСтрока.ВидЗадолженности = Перечисления.ВидыЗадолженности.Дебиторская, КонтрагентДебитор, КонтрагентКредитор);
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Контрагент",   ТекКонтрагент);
			Запрос.УстановитьПараметр("Организация", Организация);
				
			Запрос.Текст = "
			|ВЫБРАТЬ 
			|	Ссылка 
			|ИЗ Справочник.ДоговорыКонтрагентов
			|ГДЕ Справочник.ДоговорыКонтрагентов.Владелец = &Контрагент
			|	 И Справочник.ДоговорыКонтрагентов.Организация = &Организация";
				
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				НоваяСтрока.ДоговорКонтрагента = Выборка.Ссылка;
			Иначе 
				ОбщегоНазначения.СообщитьОбОшибке("У контрагента " + ТекКонтрагент + " отсутствует договор на поставку с организацией " + Организация + ".");
			КонецЕсли;
			
			НоваяСтрока.КурсВзаиморасчетов      = СтрокаОснования.КурсВзаиморасчетов;
			НоваяСтрока.КратностьВзаиморасчетов = СтрокаОснования.КратностьВзаиморасчетов;
			НоваяСтрока.Сумма                   = СтрокаОснования.Сумма;
			
		КонецЦикла;
			
	КонецЕсли;

КонецПроцедуры // ОбработкаЗаполнения()

// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
	 
	мУдалятьДвижения = НЕ ЭтоНовый() И НЕ РежимВосстановленияПоследовательностейРасчетов;
	
КонецПроцедуры // ПередЗаписью

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	Перем Заголовок, СтруктураШапкиДокумента, ТаблицаПоСуммамДолга,
	      ТаблицаРасчетыСПокупателямиКредиторскаяЗадолженность, ТаблицаРасчетыСПокупателямиДебиторскаяЗадолженность,
	      ТаблицаРасчетыСПоставщикамиКредиторскаяЗадолженность, ТаблицаРасчетыСПоставщикамиДебиторскаяЗадолженность;
	
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	ИначеЕсли РежимВосстановленияПоследовательностейРасчетов Тогда
		УдалитьДвиженияДляВосстановленияПоследовательностейРасчетов(Отказ);
	КонецЕсли;

	ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента);
	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);

	ПодготовитьПараметрыУчетнойПолитики(Отказ, Заголовок, СтруктураШапкиДокумента);
	
	ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоСуммамДолга,
	                            ТаблицаРасчетыСПокупателямиКредиторскаяЗадолженность, ТаблицаРасчетыСПокупателямиДебиторскаяЗадолженность,
	                            ТаблицаРасчетыСПоставщикамиКредиторскаяЗадолженность, ТаблицаРасчетыСПоставщикамиДебиторскаяЗадолженность);
	// Проверить заполнение ТЧ 
	ПроверитьЗаполнениеТабличнойЧастиСуммыДолга(ТаблицаПоСуммамДолга, СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// Движения по документу
	Если Не Отказ Тогда

		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоСуммамДолга, 
	                        ТаблицаРасчетыСПокупателямиКредиторскаяЗадолженность, ТаблицаРасчетыСПокупателямиДебиторскаяЗадолженность,
	                        ТаблицаРасчетыСПоставщикамиКредиторскаяЗадолженность, ТаблицаРасчетыСПоставщикамиДебиторскаяЗадолженность,
							Отказ, Заголовок);

	КонецЕсли; 

КонецПроцедуры	// ОбработкаПроведения()

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;

КонецПроцедуры

РежимВосстановленияПоследовательностейРасчетов = Ложь;
мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");

