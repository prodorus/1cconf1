
////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мЗаписиОВычетах Экспорт;
Перем мЗаписиОДоходах Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

#Если ТолстыйКлиентОбычноеПриложение Тогда

// Формирует печатную форму - реестр справок о доходах
//
Функция ПечатьРеестра(ИмяМакета)

	ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
	ОбработкаКомментариев.УдалитьСообщения();
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначенияЗК.ПредставлениеДокументаПриПроведении(Ссылка);
	
	Отказ = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЕСТЬNULL(ФИОГлБухгалтера.Фамилия + "" "" + ФИОГлБухгалтера.Имя + "" "" + ФИОГлБухгалтера.Отчество, ДанныеДокумента.Наименование) КАК ФИОГлБухгалтера
	|ИЗ
	|	Справочник.ФизическиеЛица КАК ДанныеДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&Дата, ФизЛицо = &ГлавныйБухгалтер) КАК ФИОГлБухгалтера
	|		ПО (ИСТИНА)
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &ГлавныйБухгалтер";
	
	СтруктураЗаголовка = ОбщегоНазначенияЗК.ПолучитьЗначенияРеквизитов(Организация,"ИНН, НаименованиеПолное, КодИМНС");
	Если ЗначениеЗаполнено(КодИФНС) Тогда
		СтруктураЗаголовка.КодИМНС = КодИФНС
	КонецЕсли;
	СтруктураЗаголовка.Вставить("ОбщаяСуммаДохода", СуммыНалогов.Итог("ОбщаяСуммаДохода"));	
	СтруктураЗаголовка.Вставить("Исчислено", СуммыНалогов.Итог("Исчислено"));	
	СтруктураЗаголовка.Вставить("Удержано", СуммыНалогов.Итог("Удержано"));
	СтруктураЗаголовка.Вставить("Перечислено", СуммыНалогов.Итог("Перечислено"));
	Если ОбщегоНазначенияЗКПереопределяемый.ЭтоЮрЛицо(Организация) Тогда
		СтруктураЗаголовка.Вставить("Разделитель", "/");
		Запрос.УстановитьПараметр("ГлавныйБухгалтер", СправкуПодписал);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			СтруктураЗаголовка.Вставить("ФИОРуководителя", Выборка.ФИОГлБухгалтера)	
		КонецЕсли;
	Иначе
		СтруктураЗаголовка.Вставить("Разделитель", "");
		Запрос = Новый Запрос;
		// Установим параметры запроса
		Запрос.УстановитьПараметр("СтруктурнаяЕдиница",Организация);
		Запрос.УстановитьПараметр("ДатаДокумента", Дата);
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		
		Запрос.Текст = ФормированиеПечатныхФормЗК.ПолучитьТекстЗапросаПоОтветственнымЛицам(
		"ДатаДокумента",
		"ОтветственноеЛицо = ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.Руководитель)
		|И СтруктурнаяЕдиница = &СтруктурнаяЕдиница");
		Запрос.Выполнить();
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ОтветственныеЛицаОрганизаций.НаименованиеОтветственногоЛица КАК ФИОРуководителя
		|ИЗ
		|	ВТДанныеОбОтветственномЛице КАК ОтветственныеЛицаОрганизаций";
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			СтруктураЗаголовка.Вставить("ФИОРуководителя", Выборка.ФИОРуководителя)	
		КонецЕсли;
	КонецЕсли;
	СтруктураЗаголовка.Вставить("Год", Формат(НалоговыйПериод,"ЧЦ=4; ЧДЦ=0; ЧГ=0"));
	СтруктураЗаголовка.Вставить("ДатаСоставления", Формат(Дата, "ДФ=dd.MM.yyyy"));
	СтруктураЗаголовка.Вставить("НомерРеестра", ПроцедурыПерсонифицированногоУчета.НомерПачкиДокумента(Номер));
	СтруктураЗаголовка.Вставить("Признак", ?(ОснованиеДляПредставленияСправок = Перечисления.ОснованияДляПредставленияСправок2НДФЛ.ОНевозможностиУдержанияНДФЛ,"2","1"));
	СтруктураЗаголовка.Вставить("ИмяФайла", ИмяФайла);
	СтруктураЗаголовка.Вставить("ОКАТО", "");
	СтруктураЗаголовка.Вставить("ОКТМО", СправкиПоНДФЛ.КодОКАТОизСуммыОКАТОиКПП(ОКТМО_КПП));
	СтруктураЗаголовка.Вставить("КПП", СправкиПоНДФЛ.КППизСуммыОКАТОиКПП(ОКТМО_КПП));
	СтруктураЗаголовка.Вставить("КоличествоСправок", Формат(СотрудникиОрганизации.Количество(),"ЧЦ=4; ЧДЦ=0; ЧГ=0"));
	СтруктураЗаголовка.Вставить("ИННРеорганизованнойОрганизации", ИННРеорганизованнойОрганизации);
	СтруктураЗаголовка.Вставить("КППРеорганизованнойОрганизации", КППРеорганизованнойОрганизации);
	СтруктураЗаголовка.Вставить("РазделительРеорганизации", ?(ЗначениеЗаполнено(КППРеорганизованнойОрганизации), "/", ""));
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РеестрСправок2_НДФЛ";
	
	// запоминаем области макета
	Макет = ПолучитьМакет(ИмяМакета);
	ОбластьМакетаШапка	= Макет.ПолучитьОбласть("Шапка"); // Шапка документа.
	ОбластьМакетаПодвал	= Макет.ПолучитьОбласть("Подвал");// Подвал документа
	ОбластьМакета 		= Макет.ПолучитьОбласть("Строка"); // область сотрудника

	//Надо позвать проверку заполнения реквизитов шапки
	ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();
	Если ВыборкаПоШапкеДокумента.Следующий() Тогда
		ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок);
	КонецЕсли;
	
	ОбластьМакетаШапка.Параметры.Заполнить(СтруктураЗаголовка); // Шапка документа.
	
	// Начинаем формировать выходной документ
	ТабДокумент.Вывести(ОбластьМакетаШапка); // Шапка документа.
	
	СтруктураПоиска = Новый Структура("НомерСправки");
	// выводим строки по сотрудникам
	Для каждого СтрокаТЧ Из СотрудникиОрганизации Цикл
		
		НачалоСообщения = "В строке № """+ СокрЛП(СтрокаТЧ.НомерСтроки) +
									""" табл. части ""Сотрудники организации"": ";
		
		Если Не ЗначениеЗаполнено(СтрокаТЧ.НомерСправки) Тогда
			ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(НачалоСообщения + "не указан номер справки!", Отказ, Заголовок);
		КонецЕсли;
		Если Не ЗначениеЗаполнено(СтрокаТЧ.ДатаРождения) Тогда
			ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(НачалоСообщения + "не указана дата рождения!", Отказ, Заголовок);
		КонецЕсли;
		Если Не ЗначениеЗаполнено(СтрокаТЧ.Фамилия + СтрокаТЧ.Имя) Тогда
			ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(НачалоСообщения + "не указаны фамилия и имя!", Отказ, Заголовок);
		КонецЕсли;
		
		ОбластьМакета.Параметры.Заполнить(СтрокаТЧ);
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаТЧ);
		СтрокиИтогов = СуммыНалогов.Выгрузить(СуммыНалогов.НайтиСтроки(СтруктураПоиска));
		Если СтрокиИтогов.Количество() > 0 Тогда
			СтрокиИтогов.Свернуть("НомерСправки", "ОбщаяСуммаДохода,ОблагаемаяСуммаДохода,Исчислено,Удержано,Перечислено,ИзлишнеУдержано,Задолженность");
			ОбластьМакета.Параметры.Заполнить(СтрокиИтогов[0]);
		КонецЕсли;
		ТабДокумент.Вывести(ОбластьМакета);
	
	КонецЦикла;
	
	Если НЕ Отказ Тогда
		
		 ОбластьМакетаПодвал.Параметры.Заполнить(СтруктураЗаголовка);
		
		// выводим предварительно подготовленный Подвал документа.
		ТабДокумент.Вывести(ОбластьМакетаПодвал);
		
		Возврат ТабДокумент;
		
	КонецЕсли;
	
	ОбработкаКомментариев.ПоказатьСообщения();
	
	Возврат Неопределено	

КонецФункции // ПечатьРеестра()
	
Процедура ДополнитьТаблицуСВычетами(ТаблицаСВычетами)

	ТаблицаСВычетами.Колонки.Добавить("КодВычетаСтрокой", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(3)));
	ТаблицаСВычетами.Колонки.Добавить("ГруппаВычета", Новый ОписаниеТипов("ПеречислениеСсылка.ГруппыВычетовПоНДФЛ"));
	
    Для каждого СтрокаТЗ Из ТаблицаСВычетами Цикл
		СтрокаВычета = СправкиПоНДФЛПовтИсп.СвойстваВычета(СтрокаТЗ.КодВычета);
		Если СтрокаВычета <> Неопределено Тогда
			СтрокаТЗ.КодВычетаСтрокой = ?(НалоговыйПериод = 2015, СтрокаВычета.КодДляОтчетности2015, СтрокаВычета.КодДляОтчетности2016);
			СтрокаТЗ.ГруппаВычета = СтрокаВычета.ГруппаВычета;
		КонецЕсли;
	КонецЦикла; 
	
КонецПроцедуры

Функция Файл2015(Отказ, СоответствиеКодовСтран, СоответствиеИменСтран, СоответствиеДокументовУдостоверяющиеЛичность, СоответствиеКодовРегионов, СоответствиеСтавок, СоответствиеКодовДоходов, СоответствиеСтавокДоходов)

	ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
	
	//-----------------------------------------------------------------------------
	// СВЕДЕНИЯ О НАЛОГОВОМ АГЕНТЕ
	
	СтруктураДанныхНА = СправкиПоНДФЛ.ДанныеНалоговогоАгентаДля2НДФЛ(Организация, НалоговыйПериод, "", ОКТМО_КПП, КодИФНС, Дата, Телефон, , СправкуПодписал, Истина);
	СтруктураДанныхНА.Признак = ?(ОснованиеДляПредставленияСправок = Перечисления.ОснованияДляПредставленияСправок2НДФЛ.ОНевозможностиУдержанияНДФЛ,"2","1");
	
	СправкиПоНДФЛ.ПроверитьОбщиеДанныеСправки(СтруктураДанныхНА, Отказ, ОбработкаКомментариев, Истина, Ложь);
	ОрганизацияЭтоФизЛицо = Не СтруктураДанныхНА.ЭтоЮрЛицо;
	
	//-----------------------------------------------------------------------------
	// ФОРМИРОВАНИЕ ДЕРЕВА ДАННЫХ
	
	Если Не Отказ Тогда
		
		// Загружаем формат файла сведений
		МакетФормата = ПолучитьМакет("ФорматНДФЛ2015");
		
		// Создаем начальное дерево
		ДеревоВыгрузки = ПроцедурыПерсонифицированногоУчета.СоздатьДеревоXML();
		
		Атрибуты = Новый Соответствие;
		Атрибуты.Вставить("ИдФайл", ИмяФайла);
		Атрибуты.Вставить("ВерсПрог", "1С:" + РегламентированнаяОтчетность.ИДКонфигурации() + " " + РегламентированнаяОтчетность.РедакцияКонфигурации());
		Атрибуты.Вставить("ВерсФорм", "5.04");
		
		Узел2НДФЛ = ПроцедурыПерсонифицированногоУчета.ДобавитьУзелВДеревоXML(ДеревоВыгрузки, "Файл", "", Атрибуты);
		
		// Информационная часть
		ФорматФайла = СправкиПоНДФЛ.ЗагрузитьФорматНабораЗаписей(МакетФормата, "Файл", ОрганизацияЭтоФизЛицо);
		
		// Общие сведения служебной части
		НаборЗаписейОбщСвСЧ = ФорматФайла.СвРекв.Значение;
		НаборЗаписейОбщСвСЧ.ОКТМО.Значение = СтрЗаменить(СтруктураДанныхНА.ОКТМО, "-", "");
		НаборЗаписейОбщСвСЧ.ПризнакФ.Значение = СтруктураДанныхНА.Признак;
		НаборЗаписейОбщСвСЧ.ОтчетГод.Значение = СтруктураДанныхНА.НалоговыйПериодСтрокой;
		
		ФорматСправка = ФорматФайла.Документ.Значение;
		ФорматСправка.ОтчетГод.Значение = СтруктураДанныхНА.НалоговыйПериодСтрокой;
		ФорматСправка.ДатаДок.Значение = СтруктураДанныхНА.Дата;
		ФорматСправка.Признак.Значение = СтруктураДанныхНА.Признак;
		ФорматСправка.НомКорр.Значение = Формат(НомерКорректировки,"ЧЦ=2; ЧН=00; ЧВН=");
		ФорматСправка.КодНО.Значение = СтруктураДанныхНА.КодИФНС;
		
		// Сведения о лице, подписавшем документ
		НаборЗаписейПодписант = ФорматСправка.Подписант.Значение;
		НаборЗаписейПодписант.ПрПодп.Значение = "1"; // налоговый агент
		НаборЗаписейПодписант.ФИО.Значение.Фамилия = СокрЛП(СтруктураДанныхНА.Фамилия);
		НаборЗаписейПодписант.ФИО.Значение.Имя = СокрЛП(СтруктураДанныхНА.Имя);
		НаборЗаписейПодписант.ФИО.Значение.Отчество = СокрЛП(СтруктураДанныхНА.Отчество);
		НаборЗаписейПодписант.Удалить("СвПред");
		
		// Сведения об отправителе
		ФорматСправка.СвНА.Значение.ОКТМО.Значение = НаборЗаписейОбщСвСЧ.ОКТМО.Значение;
		Если НЕ ЗначениеЗаполнено(СтруктураДанныхНА.Телефон) Тогда
			ФорматСправка.СвНА.Значение.Удалить("Тлф");
		Иначе
			ФорматСправка.СвНА.Значение.Тлф.Значение = СтруктураДанныхНА.Телефон;
		КонецЕсли;
		
		// Сведения о налоговом агенте
		Если ОрганизацияЭтоФизЛицо Тогда
			
			НаборЗаписейОбщСвСЧ.СвФЛ.Значение.ИННФЛ.Значение = СтруктураДанныхНА.ИННорг;
			
			НаборЗаписейОтправитель = ФорматСправка.СвНА.Значение.СвНАФЛ.Значение;
			НаборЗаписейОтправитель.ИННФЛ.Значение = СтруктураДанныхНА.ИННорг;
			НаборЗаписейОтправитель.ФИО.Значение.Фамилия = СтруктураДанныхНА.Фамилия;
			НаборЗаписейОтправитель.ФИО.Значение.Имя = СтруктураДанныхНА.Имя;
			НаборЗаписейОтправитель.ФИО.Значение.Отчество = СтруктураДанныхНА.Отчество;
			
		Иначе
			
			НаборЗаписейОтправитель = НаборЗаписейОбщСвСЧ.СвЮЛ.Значение;
			НаборЗаписейОтправитель.ИННЮЛ.Значение = СтруктураДанныхНА.ИННорг;
			НаборЗаписейОтправитель.КПП.Значение = СтруктураДанныхНА.КПП;
			
			НаборЗаписейОтправитель = ФорматСправка.СвНА.Значение.СвНАЮЛ.Значение;
			НаборЗаписейОтправитель.НаимОрг.Значение = СтруктураДанныхНА.НазваниеОрганизации;
			НаборЗаписейОтправитель.ИННЮЛ.Значение = СтруктураДанныхНА.ИННорг;
			НаборЗаписейОтправитель.КПП.Значение = СтруктураДанныхНА.КПП;
			
		КонецЕсли;
		
		Атрибуты = СправкиПоНДФЛ.ДанныеВыгружаемыеКакАтрибуты(НаборЗаписейОбщСвСЧ);
		СправкиПоНДФЛ.ДобавитьИнформациюВДерево(ПроцедурыПерсонифицированногоУчета.ДобавитьУзелВДеревоXML(Узел2НДФЛ, "СвРекв", "", Атрибуты), НаборЗаписейОбщСвСЧ);
		
	КонецЕсли;
	
	СтруктураОтбора = Новый Структура("НомерСправки");
	СтруктураОтбораДохода = Новый Структура("Месяц,КодДохода");
	ТаблицаВычетовКДоходам = СведенияОВычетах.ВыгрузитьКолонки("СуммаВычета");
	ТаблицаВычетовКДоходам.Колонки.Добавить("КодВычетаСтрокой", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(3)));
	Для каждого СтрокаДанных Из СотрудникиОрганизации Цикл 
		
		ЗаполнитьЗначенияСвойств(СтруктураОтбора, СтрокаДанных);
		ДоходыПоВидам = СведенияОДоходах.Выгрузить(СведенияОДоходах.НайтиСтроки(СтруктураОтбора));
		ВычетыПоВидам = СведенияОВычетах.Выгрузить(СведенияОВычетах.НайтиСтроки(СтруктураОтбора));
		ДополнитьТаблицуСВычетами(ДоходыПоВидам);
		ДополнитьТаблицуСВычетами(ВычетыПоВидам);
		Итоги = СуммыНалогов.Выгрузить(СуммыНалогов.НайтиСтроки(СтруктураОтбора));
		
		// Проверка корректности выводимых данных
		СправкиПоНДФЛ.ПроверитьДанныеСотрудника(НалоговыйПериод, СтруктураДанныхНА.Признак, СтрокаДанных, ДоходыПоВидам, ВычетыПоВидам, Итоги, Дата, Отказ, ОбработкаКомментариев, СоответствиеДокументовУдостоверяющиеЛичность, СоответствиеИменСтран, СоответствиеСтавокДоходов, НомерКорректировки);
		
		Если Отказ Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураДанныхСправки = ПроцедурыПерсонифицированногоУчета.СкопироватьСтруктуруДанных(ФорматСправка);
		
		СтруктураДанныхСправки.НомСпр.Значение = СтрокаДанных.НомерСправки;
		
		// Данные о физическом лице - получателе дохода
		НаборЗаписейФизЛицо = СтруктураДанныхСправки.ПолучДох.Значение;
		
		//  Фамилия, Имя, Отчество
		НаборЗаписейФизЛицо.ФИО.Значение.Фамилия = СокрЛП(СтрокаДанных.Фамилия);
		НаборЗаписейФизЛицо.ФИО.Значение.Имя = СокрЛП(СтрокаДанных.Имя);
		НаборЗаписейФизЛицо.ФИО.Значение.Отчество = СокрЛП(СтрокаДанных.Отчество);
		Если ПустаяСтрока(СтрокаДанных.ИНН) Тогда
			НаборЗаписейФизЛицо.Удалить("ИННФЛ");
		Иначе
			НаборЗаписейФизЛицо.ИННФЛ.Значение = СтрокаДанных.ИНН;
		КонецЕсли;
		Если ПустаяСтрока(СтрокаДанных.ИННвСтранеГражданства) Тогда
			НаборЗаписейФизЛицо.Удалить("ИННИно");
		Иначе
			НаборЗаписейФизЛицо.ИННИно.Значение = СтрокаДанных.ИННвСтранеГражданства;
		КонецЕсли;
		Статус = 1;
		Если СтрокаДанных.СтатусНалогоплательщика = Перечисления.СтатусыНалогоплательщиковПоНДФЛ.НеРезидент Тогда
			Статус = 2;
		ИначеЕсли СтрокаДанных.СтатусНалогоплательщика = Перечисления.СтатусыНалогоплательщиковПоНДФЛ.ГражданинСтраныЕАЭС Тогда
			Статус = 2;
		ИначеЕсли СтрокаДанных.СтатусНалогоплательщика = Перечисления.СтатусыНалогоплательщиковПоНДФЛ.ВысококвалифицированныйИностранныйСпециалист Тогда
			Статус = 3;
		ИначеЕсли СтрокаДанных.СтатусНалогоплательщика = Перечисления.СтатусыНалогоплательщиковПоНДФЛ.УчастникПрограммыПоПереселениюСоотечественников Тогда
			Статус = 4;
		ИначеЕсли СтрокаДанных.СтатусНалогоплательщика = Перечисления.СтатусыНалогоплательщиковПоНДФЛ.ЧленЭкипажаСуднаПодФлагомРФ Тогда
			Статус = 4;
		ИначеЕсли СтрокаДанных.СтатусНалогоплательщика = Перечисления.СтатусыНалогоплательщиковПоНДФЛ.Беженец Тогда
			Статус = 5;
		ИначеЕсли СтрокаДанных.СтатусНалогоплательщика = Перечисления.СтатусыНалогоплательщиковПоНДФЛ.НерезидентРаботающийНаОснованииПатента Тогда
			Статус = 6;
		КонецЕсли;
		НаборЗаписейФизЛицо.Статус.Значение = Статус;
		НаборЗаписейФизЛицо.ДатаРожд.Значение = СтрокаДанных.ДатаРождения;
		НаборЗаписейФизЛицо.Гражд.Значение = СоответствиеКодовСтран[СтрокаДанных.Гражданство];
		
		// Удостоверение личности
		НаборЗаписейДокУдЛичности = НаборЗаписейФизЛицо.УдЛичнФЛ.Значение;//  КодУдЛичн, СерНомДок 
		НаборЗаписейДокУдЛичности.КодУдЛичн = СоответствиеДокументовУдостоверяющиеЛичность[СтрокаДанных.ВидДокумента];
		НаборЗаписейДокУдЛичности.СерНомДок = СокрЛП(СтрокаДанных.СерияДокумента) + " " + СокрЛП(СтрокаДанных.НомерДокумента);
		
		// Адреса
		Если ЗначениеЗаполнено(СтрокаДанных.АдресРФ) Тогда
			СтруктураАдреса = РегламентированнаяОтчетность.РазложитьАдрес(СтрокаДанных.АдресРФ);
			ЗаполнитьЗначенияСвойств(НаборЗаписейФизЛицо.АдрМЖРФ.Значение,СтруктураАдреса); //  Индекс, КодРегион, Район, Город, Улица, Дом, Корп,
			НаборЗаписейФизЛицо.АдрМЖРФ.Значение.КодРегион = СоответствиеКодовРегионов[СтруктураАдреса.Регион];
			НаборЗаписейФизЛицо.АдрМЖРФ.Значение.НаселПункт = СтруктураАдреса.НаселенныйПункт;
			НаборЗаписейФизЛицо.АдрМЖРФ.Значение.Кварт = СтруктураАдреса.Квартира;
		Иначе // очищаем адресные данные
			НаборЗаписейФизЛицо.Удалить("АдрМЖРФ");
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаДанных.АдресЗарубежом) Тогда
			СтруктураАдреса = УправлениеКонтактнойИнформацией.ПолучитьСтруктуруАдресаИзСтроки(СтрокаДанных.АдресЗарубежом);
			НаборЗаписейФизЛицо.АдрИНО.Значение.КодСтр = СоответствиеИменСтран[СтруктураАдреса.Страна];
			НаборЗаписейФизЛицо.АдрИНО.Значение.АдрТекст = СтруктураАдреса.Представление;
		Иначе // очищаем адресные данные
			НаборЗаписейФизЛицо.Удалить("АдрИНО");
		КонецЕсли;
		
		// Сведения об облагаемых доходах
		ФорматНаборЗаписейСведенияОДоходах = ПроцедурыПерсонифицированногоУчета.СкопироватьСтруктуруДанных(СтруктураДанныхСправки.СведДох.Значение);
		СтруктураДанныхСправки.Удалить("СведДох");
		
		Атрибуты = СправкиПоНДФЛ.ДанныеВыгружаемыеКакАтрибуты(СтруктураДанныхСправки);
		УзелСправки = ПроцедурыПерсонифицированногоУчета.ДобавитьУзелВДеревоXML(Узел2НДФЛ, "Документ", "", Атрибуты);
		СправкиПоНДФЛ.ДобавитьИнформациюВДерево(УзелСправки, СтруктураДанныхСправки);
		
		Если НомерКорректировки < 99 Тогда
			Для каждого СтрокаИтогов Из Итоги Цикл
				
				НаборЗаписейСведенияОДоходах = ПроцедурыПерсонифицированногоУчета.СкопироватьСтруктуруДанных(ФорматНаборЗаписейСведенияОДоходах);
				НаборЗаписейСведенияОДоходах.Ставка.Значение = СоответствиеСтавок[СтрокаИтогов.Ставка];
				
				НаборЗаписейДоходы = НаборЗаписейСведенияОДоходах.ДохВыч.Значение;
				ТаблицаДоходов = НаборЗаписейДоходы.СвСумДох.Значение;
				
				Если СтрокаИтогов.ОбщаяСуммаДохода > 0 Тогда
					ТаблицаСтрок = СправкиПоНДФЛ.ИзвлечьДоходыПоСтавке(НалоговыйПериод, СтрокаИтогов.Ставка, СтрокаДанных.СтатусНалогоплательщика, ДоходыПоВидам, СоответствиеСтавокДоходов);
					ТаблицаСтрок.Свернуть("Месяц,КодДохода");
					ТаблицаСтрок.Сортировать("Месяц,КодДохода");
					Для каждого СтрокаДоходов Из ТаблицаСтрок Цикл // Доходы
						
						ЗаполнитьЗначенияСвойств(СтруктураОтбораДохода, СтрокаДоходов);
						Строки = ДоходыПоВидам.НайтиСтроки(СтруктураОтбораДохода);
						СуммаДохода = 0;
						ТаблицаВычетовКДоходам.Очистить();
						Для каждого ОтобраннаяСтрока Из Строки Цикл
							СуммаДохода = СуммаДохода + ОтобраннаяСтрока.СуммаДохода;
							Если ЗначениеЗаполнено(ОтобраннаяСтрока.КодВычета) И ЗначениеЗаполнено(ОтобраннаяСтрока.СуммаВычета) Тогда
								ЗаполнитьЗначенияСвойств(ТаблицаВычетовКДоходам.Добавить(), ОтобраннаяСтрока);	
							КонецЕсли;	
						КонецЦикла;
						
						СтрокаТЗ = ТаблицаДоходов.Добавить();
						СтрокаТЗ.Месяц = ?(СтрДлина(СтрокаДоходов.Месяц) = 1,"0","") + СтрокаДоходов.Месяц;
						СтрокаТЗ.КодДоход = СоответствиеКодовДоходов[СтрокаДоходов.КодДохода];
						СтрокаТЗ.СумДоход = СуммаДохода;
						Если ТаблицаВычетовКДоходам.Количество() > 0 Тогда
							ТаблицаДляСтроки = ТаблицаВычетовКДоходам.Скопировать();
							ТаблицаДляСтроки.Колонки.КодВычетаСтрокой.Имя = "КодВычет";
							ТаблицаДляСтроки.Колонки.СуммаВычета.Имя = "СумВычет";
							ОписаниеФормата = ПроцедурыПерсонифицированногоУчета.СкопироватьСтруктуруДанных(НаборЗаписейСведенияОДоходах.НалВычССИ.Значение.ПредВычССИ);
							ОписаниеФормата.Значение = ТаблицаДляСтроки;
							СтрокаТЗ.СвСумВыч = Новый Структура("СвСумВыч", ОписаниеФормата);
						КонецЕсли;
						
					КонецЦикла;
				Иначе
					НаборЗаписейСведенияОДоходах.Удалить("ДохВыч");
				КонецЕсли;
					
				// Налоговые вычеты
				Если ВычетыПоВидам.Количество() > 0 И СтрокаИтогов.Ставка = Перечисления.НДФЛСтавки.Ставка13 Тогда
					
					НаборЗаписейВычет = НаборЗаписейСведенияОДоходах.НалВычССИ.Значение;
					ТаблицаВычетов = НаборЗаписейВычет.ПредВычССИ.Значение;
					Для каждого СтрокаВычетов Из ВычетыПоВидам Цикл // Вычеты
						СтрокаТЗ = ТаблицаВычетов.Добавить();
						СтрокаТЗ.КодВычет = СтрокаВычетов.КодВычетаСтрокой;
						СтрокаТЗ.СумВычет = СтрокаВычетов.СуммаВычета;
					КонецЦикла;
					
					Если ВычетыПоВидам.Найти(Перечисления.ГруппыВычетовПоНДФЛ.Имущественные, "ГруппаВычета") <> Неопределено Тогда
						ТаблицаУведомлений = НаборЗаписейВычет.УведИмущВыч.Значение;
						Уведомление = ТаблицаУведомлений.Добавить();
						Уведомление.НомерУвед = СтрокаДанных.НомерУведомления;
						Уведомление.ДатаУвед = СтрокаДанных.ДатаУведомления;
						Уведомление.ИФНСУвед = СтрокаДанных.КодНалоговогоОрганаУведомления;
					КонецЕсли;
					
					Если ВычетыПоВидам.Найти(Перечисления.ГруппыВычетовПоНДФЛ.СоциальныеПоУведомлениюНО, "ГруппаВычета") <> Неопределено Тогда
						ТаблицаУведомлений = НаборЗаписейВычет.УведСоцВыч.Значение;
						Уведомление = ТаблицаУведомлений.Добавить();
						Уведомление.НомерУвед = СтрокаДанных.НомерУведомленияСоц;
						Уведомление.ДатаУвед = СтрокаДанных.ДатаУведомленияСоц;
						Уведомление.ИФНСУвед = СтрокаДанных.КодНалоговогоОрганаУведомленияСоц;
					КонецЕсли;
					
				Иначе
					НаборЗаписейСведенияОДоходах.Удалить("НалВычССИ");
				КонецЕсли;
				
				// Общая сумма дохода и налога на доходы по итогам налогового периода
				
				СтруктураСГДНалПер = НаборЗаписейСведенияОДоходах.СумИтНалПер.Значение;
				СтруктураСГДНалПер.СумДохОбщ.Значение = СтрокаИтогов.ОбщаяСуммаДохода;
				СтруктураСГДНалПер.НалБаза.Значение = СтрокаИтогов.ОблагаемаяСуммаДохода;
				СтруктураСГДНалПер.НалИсчисл.Значение = СтрокаИтогов.Исчислено;
				СтруктураСГДНалПер.АвансПлатФикс.Значение = СтрокаИтогов.ЗачтеноАвансовыхПлатежей;
				Если ОснованиеДляПредставленияСправок = Перечисления.ОснованияДляПредставленияСправок2НДФЛ.ЕжегоднаяОтчетность Тогда
					СтруктураСГДНалПер.НалУдерж.Значение = СтрокаИтогов.Удержано;
					СтруктураСГДНалПер.НалПеречисл.Значение = СтрокаИтогов.Перечислено;
					СтруктураСГДНалПер.НалУдержЛиш.Значение = СтрокаИтогов.ИзлишнеУдержано;
				КонецЕсли;
				СтруктураСГДНалПер.НалНеУдерж.Значение = СтрокаИтогов.Задолженность;
				Если СтрокаИтогов.ЗачтеноАвансовыхПлатежей > 0 Тогда
					Уведомление = СтруктураСГДНалПер.УведФиксПлат.Значение;
					Уведомление.НомерУвед = СтрокаДанных.НомерУведомленияАвансовыеПлатежи;
					Уведомление.ДатаУвед = СтрокаДанных.ДатаУведомленияАвансовыеПлатежи;
					Уведомление.ИФНСУвед = СтрокаДанных.КодНалоговогоОрганаУведомленияАвансовыеПлатежи;
				Иначе
					СтруктураСГДНалПер.Удалить("УведФиксПлат");
				КонецЕсли;
				
				Атрибуты = СправкиПоНДФЛ.ДанныеВыгружаемыеКакАтрибуты(НаборЗаписейСведенияОДоходах);
				СправкиПоНДФЛ.ДобавитьИнформациюВДерево(ПроцедурыПерсонифицированногоУчета.ДобавитьУзелВДеревоXML(УзелСправки, "СведДох","", Атрибуты), НаборЗаписейСведенияОДоходах);
				
			КонецЦикла;
		КонецЕсли;
		
		ОбработкаПрерыванияПользователя();	
		
	КонецЦикла;
	
	Если Отказ Тогда
		Возврат ""	
	КонецЕсли;
		
	// Преобразуем дерево в строковое описание XML
	ПотокВыгрузкиXML = ПроцедурыПерсонифицированногоУчета.СоздатьПотокXML();
	СправкиПоНДФЛ.ЗаписатьУзелДереваXMLВXML(ДеревоВыгрузки, ПотокВыгрузкиXML, "xsi", "http://www.w3.org/2001/XMLSchema-instance");
	// получаем содержимое файла в виде строки
	СтрокаXML = ПроцедурыПерсонифицированногоУчета.ЗаписатьПотокXML(ПотокВыгрузкиXML);
	
	Возврат СтрокаXML

КонецФункции 

Функция Файл2018(Отказ, СоответствиеКодовСтран, СоответствиеИменСтран, СоответствиеДокументовУдостоверяющиеЛичность, СоответствиеКодовРегионов, СоответствиеСтавок, СоответствиеКодовДоходов, СоответствиеСтавокДоходов)

	ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
	
	//-----------------------------------------------------------------------------
	// СВЕДЕНИЯ О НАЛОГОВОМ АГЕНТЕ
	
	СтруктураДанныхНА = СправкиПоНДФЛ.ДанныеНалоговогоАгентаДля2НДФЛ(Организация, НалоговыйПериод, "", ОКТМО_КПП, КодИФНС, Дата, Телефон, , СправкуПодписал, Истина);
	Если ОснованиеДляПредставленияСправок = Перечисления.ОснованияДляПредставленияСправок2НДФЛ.ОНевозможностиУдержанияНДФЛ Тогда
		СтруктураДанныхНА.Признак = "2"
	ИначеЕсли ОснованиеДляПредставленияСправок = Перечисления.ОснованияДляПредставленияСправок2НДФЛ.ЕжегоднаяОтчетность Тогда
		СтруктураДанныхНА.Признак = "1"
	ИначеЕсли ОснованиеДляПредставленияСправок = Перечисления.ОснованияДляПредставленияСправок2НДФЛ.ЕжегоднаяОтчетностьЗаРеорганизованнуюОрганизацию Тогда
		СтруктураДанныхНА.Признак = "3"
	Иначе 	
		СтруктураДанныхНА.Признак = "4"
	КонецЕсли;
	СтруктураДанныхНА.Вставить("ФормаРеорганизации", ФормаРеорганизации);
	СтруктураДанныхНА.Вставить("ИННРеорганизованнойОрганизации", ИННРеорганизованнойОрганизации);
	СтруктураДанныхНА.Вставить("КППРеорганизованнойОрганизации", КППРеорганизованнойОрганизации);
	Если ЗначениеЗаполнено(ФормаРеорганизации) Тогда
		СтруктураДанныхНА.НазваниеОрганизации = НаименованиеРеорганизованнойОрганизации
	КонецЕсли;
	
	СправкиПоНДФЛ.ПроверитьОбщиеДанныеСправки(СтруктураДанныхНА, Отказ, ОбработкаКомментариев, Истина, Ложь);
	ОрганизацияЭтоФизЛицо = Не СтруктураДанныхНА.ЭтоЮрЛицо;
	
	//-----------------------------------------------------------------------------
	// ФОРМИРОВАНИЕ ДЕРЕВА ДАННЫХ
	
	Если Не Отказ Тогда
		
		// Загружаем формат файла сведений
		МакетФормата = ПолучитьМакет("ФорматНДФЛ2018");
		
		// Создаем начальное дерево
		ДеревоВыгрузки = ПроцедурыПерсонифицированногоУчета.СоздатьДеревоXML();
		
		Атрибуты = Новый Соответствие;
		Атрибуты.Вставить("ИдФайл", ИмяФайла);
		Атрибуты.Вставить("ВерсПрог", "1С:" + РегламентированнаяОтчетность.ИДКонфигурации() + " " + РегламентированнаяОтчетность.РедакцияКонфигурации());
		Атрибуты.Вставить("ВерсФорм", "5.05");
		
		Узел2НДФЛ = ПроцедурыПерсонифицированногоУчета.ДобавитьУзелВДеревоXML(ДеревоВыгрузки, "Файл", "", Атрибуты);
		
		// Информационная часть
		ФорматФайла = СправкиПоНДФЛ.ЗагрузитьФорматНабораЗаписей(МакетФормата, "Файл", ОрганизацияЭтоФизЛицо);
		
		// Общие сведения служебной части
		НаборЗаписейОбщСвСЧ = ФорматФайла.СвРекв.Значение;
		НаборЗаписейОбщСвСЧ.ОКТМО.Значение = СтрЗаменить(СтруктураДанныхНА.ОКТМО, "-", "");
		НаборЗаписейОбщСвСЧ.ПризнакФ.Значение = СтруктураДанныхНА.Признак;
		НаборЗаписейОбщСвСЧ.ОтчетГод.Значение = СтруктураДанныхНА.НалоговыйПериодСтрокой;
		
		// Сведения о лице, подписавшем документ
		НаборЗаписейПодписант = НаборЗаписейОбщСвСЧ.Подписант.Значение;
		НаборЗаписейПодписант.ПрПодп.Значение = "1"; // налоговый агент
		НаборЗаписейПодписант.ФИО.Значение.Фамилия = СокрЛП(СтруктураДанныхНА.Фамилия);
		НаборЗаписейПодписант.ФИО.Значение.Имя = СокрЛП(СтруктураДанныхНА.Имя);
		НаборЗаписейПодписант.ФИО.Значение.Отчество = СокрЛП(СтруктураДанныхНА.Отчество);
		НаборЗаписейПодписант.Удалить("СвПред");
		
		ФорматСправка = ФорматФайла.Документ.Значение;
		ФорматСправка.ОтчетГод.Значение = СтруктураДанныхНА.НалоговыйПериодСтрокой;
		ФорматСправка.ДатаДок.Значение = СтруктураДанныхНА.Дата;
		ФорматСправка.Признак.Значение = СтруктураДанныхНА.Признак;
		ФорматСправка.НомКорр.Значение = Формат(НомерКорректировки,"ЧЦ=2; ЧН=00; ЧВН=");
		ФорматСправка.КодНО.Значение = СтруктураДанныхНА.КодИФНС;
		
		// Сведения об отправителе
		ФорматСправка.СвНА.Значение.ОКТМО.Значение = НаборЗаписейОбщСвСЧ.ОКТМО.Значение;
		Если НЕ ЗначениеЗаполнено(СтруктураДанныхНА.Телефон) Тогда
			ФорматСправка.СвНА.Значение.Удалить("Тлф");
		Иначе
			ФорматСправка.СвНА.Значение.Тлф.Значение = СтруктураДанныхНА.Телефон;
		КонецЕсли;
		
		// Сведения о налоговом агенте
		Если ОрганизацияЭтоФизЛицо Тогда
			
			НаборЗаписейОтправитель = НаборЗаписейОбщСвСЧ.СвФЛ.Значение;
			НаборЗаписейОтправитель.ИННФЛ.Значение = СтруктураДанныхНА.ИННорг;
			НаборЗаписейОтправитель.ФИО.Значение.Фамилия = СтруктураДанныхНА.Фамилия;
			НаборЗаписейОтправитель.ФИО.Значение.Имя = СтруктураДанныхНА.Имя;
			НаборЗаписейОтправитель.ФИО.Значение.Отчество = СтруктураДанныхНА.Отчество;
			
			//ЗаполнитьЗначенияСвойств(ФорматСправка.СвНА.Значение.СвНАФЛ.Значение, НаборЗаписейОтправитель);
			ФорматСправка.СвНА.Значение.СвНАФЛ.Значение = ПроцедурыПерсонифицированногоУчета.СкопироватьСтруктуруДанных(НаборЗаписейОтправитель);
			
		Иначе
			
			ЗаполнитьДанныеОтправителя(НаборЗаписейОбщСвСЧ.СвЮЛ.Значение, СтруктураДанныхНА);
			
			НаборЗаписейОтправитель = ФорматСправка.СвНА.Значение.СвНАЮЛ.Значение;
			НаборЗаписейОтправитель.НаимОрг.Значение = СтруктураДанныхНА.НазваниеОрганизации;
			ЗаполнитьДанныеОтправителя(НаборЗаписейОтправитель, СтруктураДанныхНА);
			
		КонецЕсли;
		
		Атрибуты = СправкиПоНДФЛ.ДанныеВыгружаемыеКакАтрибуты(НаборЗаписейОбщСвСЧ);
		СправкиПоНДФЛ.ДобавитьИнформациюВДерево(ПроцедурыПерсонифицированногоУчета.ДобавитьУзелВДеревоXML(Узел2НДФЛ, "СвРекв", "", Атрибуты), НаборЗаписейОбщСвСЧ);
		
	КонецЕсли;
	
	СтруктураОтбора = Новый Структура("НомерСправки");
	СтруктураОтбораДохода = Новый Структура("Месяц,КодДохода");
	ТаблицаВычетовКДоходам = СведенияОВычетах.ВыгрузитьКолонки("СуммаВычета");
	ТаблицаВычетовКДоходам.Колонки.Добавить("КодВычетаСтрокой", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(3)));
	Для каждого СтрокаДанных Из СотрудникиОрганизации Цикл 
		
		ЗаполнитьЗначенияСвойств(СтруктураОтбора, СтрокаДанных);
		ДоходыПоВидам = СведенияОДоходах.Выгрузить(СведенияОДоходах.НайтиСтроки(СтруктураОтбора));
		ВычетыПоВидам = СведенияОВычетах.Выгрузить(СведенияОВычетах.НайтиСтроки(СтруктураОтбора));
		ДополнитьТаблицуСВычетами(ДоходыПоВидам);
		ДополнитьТаблицуСВычетами(ВычетыПоВидам);
		Итоги = СуммыНалогов.Выгрузить(СуммыНалогов.НайтиСтроки(СтруктураОтбора));
		
		// Проверка корректности выводимых данных
		СправкиПоНДФЛ.ПроверитьДанныеСотрудника(НалоговыйПериод, СтруктураДанныхНА.Признак, СтрокаДанных, ДоходыПоВидам, ВычетыПоВидам, Итоги, Дата, Отказ, ОбработкаКомментариев, СоответствиеДокументовУдостоверяющиеЛичность, СоответствиеИменСтран, СоответствиеСтавокДоходов, НомерКорректировки);
		
		Если Отказ Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураДанныхСправки = ПроцедурыПерсонифицированногоУчета.СкопироватьСтруктуруДанных(ФорматСправка);
		
		СтруктураДанныхСправки.НомСпр.Значение = СтрокаДанных.НомерСправки;
		
		// Данные о физическом лице - получателе дохода
		НаборЗаписейФизЛицо = СтруктураДанныхСправки.ПолучДох.Значение;
		
		//  Фамилия, Имя, Отчество
		НаборЗаписейФизЛицо.ФИО.Значение.Фамилия = СокрЛП(СтрокаДанных.Фамилия);
		НаборЗаписейФизЛицо.ФИО.Значение.Имя = СокрЛП(СтрокаДанных.Имя);
		НаборЗаписейФизЛицо.ФИО.Значение.Отчество = СокрЛП(СтрокаДанных.Отчество);
		Если ПустаяСтрока(СтрокаДанных.ИНН) Тогда
			НаборЗаписейФизЛицо.Удалить("ИННФЛ");
		Иначе
			НаборЗаписейФизЛицо.ИННФЛ.Значение = СтрокаДанных.ИНН;
		КонецЕсли;
		Если ПустаяСтрока(СтрокаДанных.ИННвСтранеГражданства) Тогда
			НаборЗаписейФизЛицо.Удалить("ИННИно");
		Иначе
			НаборЗаписейФизЛицо.ИННИно.Значение = СтрокаДанных.ИННвСтранеГражданства;
		КонецЕсли;
		Статус = 1;
		Если СтрокаДанных.СтатусНалогоплательщика = Перечисления.СтатусыНалогоплательщиковПоНДФЛ.НеРезидент Тогда
			Статус = 2;
		ИначеЕсли СтрокаДанных.СтатусНалогоплательщика = Перечисления.СтатусыНалогоплательщиковПоНДФЛ.ГражданинСтраныЕАЭС Тогда
			Статус = 2;
		ИначеЕсли СтрокаДанных.СтатусНалогоплательщика = Перечисления.СтатусыНалогоплательщиковПоНДФЛ.ВысококвалифицированныйИностранныйСпециалист Тогда
			Статус = 3;
		ИначеЕсли СтрокаДанных.СтатусНалогоплательщика = Перечисления.СтатусыНалогоплательщиковПоНДФЛ.УчастникПрограммыПоПереселениюСоотечественников Тогда
			Статус = 4;
		ИначеЕсли СтрокаДанных.СтатусНалогоплательщика = Перечисления.СтатусыНалогоплательщиковПоНДФЛ.ЧленЭкипажаСуднаПодФлагомРФ Тогда
			Статус = 4;
		ИначеЕсли СтрокаДанных.СтатусНалогоплательщика = Перечисления.СтатусыНалогоплательщиковПоНДФЛ.Беженец Тогда
			Статус = 5;
		ИначеЕсли СтрокаДанных.СтатусНалогоплательщика = Перечисления.СтатусыНалогоплательщиковПоНДФЛ.НерезидентРаботающийНаОснованииПатента Тогда
			Статус = 6;
		КонецЕсли;
		НаборЗаписейФизЛицо.Статус.Значение = Статус;
		НаборЗаписейФизЛицо.ДатаРожд.Значение = СтрокаДанных.ДатаРождения;
		НаборЗаписейФизЛицо.Гражд.Значение = СоответствиеКодовСтран[СтрокаДанных.Гражданство];
		
		// Удостоверение личности
		НаборЗаписейДокУдЛичности = НаборЗаписейФизЛицо.УдЛичнФЛ.Значение;//  КодУдЛичн, СерНомДок 
		НаборЗаписейДокУдЛичности.КодУдЛичн = СоответствиеДокументовУдостоверяющиеЛичность[СтрокаДанных.ВидДокумента];
		НаборЗаписейДокУдЛичности.СерНомДок = СокрЛП(СтрокаДанных.СерияДокумента) + " " + СокрЛП(СтрокаДанных.НомерДокумента);
		
		// Сведения об облагаемых доходах
		ФорматНаборЗаписейСведенияОДоходах = ПроцедурыПерсонифицированногоУчета.СкопироватьСтруктуруДанных(СтруктураДанныхСправки.СведДох.Значение);
		СтруктураДанныхСправки.Удалить("СведДох");
		
		Атрибуты = СправкиПоНДФЛ.ДанныеВыгружаемыеКакАтрибуты(СтруктураДанныхСправки);
		УзелСправки = ПроцедурыПерсонифицированногоУчета.ДобавитьУзелВДеревоXML(Узел2НДФЛ, "Документ", "", Атрибуты);
		СправкиПоНДФЛ.ДобавитьИнформациюВДерево(УзелСправки, СтруктураДанныхСправки);
		
		Если НомерКорректировки < 99 Тогда
			Для каждого СтрокаИтогов Из Итоги Цикл
				
				НаборЗаписейСведенияОДоходах = ПроцедурыПерсонифицированногоУчета.СкопироватьСтруктуруДанных(ФорматНаборЗаписейСведенияОДоходах);
				НаборЗаписейСведенияОДоходах.Ставка.Значение = СоответствиеСтавок[СтрокаИтогов.Ставка];
				
				НаборЗаписейДоходы = НаборЗаписейСведенияОДоходах.ДохВыч.Значение;
				ТаблицаДоходов = НаборЗаписейДоходы.СвСумДох.Значение;
				
				Если СтрокаИтогов.ОбщаяСуммаДохода > 0 Тогда
					ТаблицаСтрок = СправкиПоНДФЛ.ИзвлечьДоходыПоСтавке(НалоговыйПериод, СтрокаИтогов.Ставка, СтрокаДанных.СтатусНалогоплательщика, ДоходыПоВидам, СоответствиеСтавокДоходов);
					ТаблицаСтрок.Свернуть("Месяц,КодДохода");
					ТаблицаСтрок.Сортировать("Месяц,КодДохода");
					Для каждого СтрокаДоходов Из ТаблицаСтрок Цикл // Доходы
						
						ЗаполнитьЗначенияСвойств(СтруктураОтбораДохода, СтрокаДоходов);
						Строки = ДоходыПоВидам.НайтиСтроки(СтруктураОтбораДохода);
						СуммаДохода = 0;
						ТаблицаВычетовКДоходам.Очистить();
						Для каждого ОтобраннаяСтрока Из Строки Цикл
							СуммаДохода = СуммаДохода + ОтобраннаяСтрока.СуммаДохода;
							Если ЗначениеЗаполнено(ОтобраннаяСтрока.КодВычета) И ЗначениеЗаполнено(ОтобраннаяСтрока.СуммаВычета) Тогда
								ЗаполнитьЗначенияСвойств(ТаблицаВычетовКДоходам.Добавить(), ОтобраннаяСтрока);	
							КонецЕсли;	
						КонецЦикла;
						
						СтрокаТЗ = ТаблицаДоходов.Добавить();
						СтрокаТЗ.Месяц = ?(СтрДлина(СтрокаДоходов.Месяц) = 1,"0","") + СтрокаДоходов.Месяц;
						СтрокаТЗ.КодДоход = СоответствиеКодовДоходов[СтрокаДоходов.КодДохода];
						СтрокаТЗ.СумДоход = СуммаДохода;
						Если ТаблицаВычетовКДоходам.Количество() > 0 Тогда
							ТаблицаДляСтроки = ТаблицаВычетовКДоходам.Скопировать();
							ТаблицаДляСтроки.Колонки.КодВычетаСтрокой.Имя = "КодВычет";
							ТаблицаДляСтроки.Колонки.СуммаВычета.Имя = "СумВычет";
							ОписаниеФормата = ПроцедурыПерсонифицированногоУчета.СкопироватьСтруктуруДанных(НаборЗаписейСведенияОДоходах.НалВычССИ.Значение.ПредВычССИ);
							ОписаниеФормата.Значение = ТаблицаДляСтроки;
							СтрокаТЗ.СвСумВыч = Новый Структура("СвСумВыч", ОписаниеФормата);
						КонецЕсли;
						
					КонецЦикла;
				Иначе
					НаборЗаписейСведенияОДоходах.Удалить("ДохВыч");
				КонецЕсли;
					
				// Налоговые вычеты
				Если ВычетыПоВидам.Количество() > 0 И СтрокаИтогов.Ставка = Перечисления.НДФЛСтавки.Ставка13 Тогда
					
					НаборЗаписейВычет = НаборЗаписейСведенияОДоходах.НалВычССИ.Значение;
					ТаблицаВычетов = НаборЗаписейВычет.ПредВычССИ.Значение;
					Для каждого СтрокаВычетов Из ВычетыПоВидам Цикл // Вычеты
						СтрокаТЗ = ТаблицаВычетов.Добавить();
						СтрокаТЗ.КодВычет = СтрокаВычетов.КодВычетаСтрокой;
						СтрокаТЗ.СумВычет = СтрокаВычетов.СуммаВычета;
					КонецЦикла;
					
					Если ВычетыПоВидам.Найти(Перечисления.ГруппыВычетовПоНДФЛ.Имущественные, "ГруппаВычета") <> Неопределено Тогда
						ТаблицаУведомлений = НаборЗаписейВычет.УведИмущВыч.Значение;
						Уведомление = ТаблицаУведомлений.Добавить();
						Уведомление.НомерУвед = СтрокаДанных.НомерУведомления;
						Уведомление.ДатаУвед = СтрокаДанных.ДатаУведомления;
						Уведомление.ИФНСУвед = СтрокаДанных.КодНалоговогоОрганаУведомления;
					КонецЕсли;
					
					Если ВычетыПоВидам.Найти(Перечисления.ГруппыВычетовПоНДФЛ.СоциальныеПоУведомлениюНО, "ГруппаВычета") <> Неопределено Тогда
						ТаблицаУведомлений = НаборЗаписейВычет.УведСоцВыч.Значение;
						Уведомление = ТаблицаУведомлений.Добавить();
						Уведомление.НомерУвед = СтрокаДанных.НомерУведомленияСоц;
						Уведомление.ДатаУвед = СтрокаДанных.ДатаУведомленияСоц;
						Уведомление.ИФНСУвед = СтрокаДанных.КодНалоговогоОрганаУведомленияСоц;
					КонецЕсли;
					
				Иначе
					НаборЗаписейСведенияОДоходах.Удалить("НалВычССИ");
				КонецЕсли;
				
				// Общая сумма дохода и налога на доходы по итогам налогового периода
				
				СтруктураСГДНалПер = НаборЗаписейСведенияОДоходах.СумИтНалПер.Значение;
				СтруктураСГДНалПер.СумДохОбщ.Значение = СтрокаИтогов.ОбщаяСуммаДохода;
				СтруктураСГДНалПер.НалБаза.Значение = СтрокаИтогов.ОблагаемаяСуммаДохода;
				СтруктураСГДНалПер.НалИсчисл.Значение = СтрокаИтогов.Исчислено;
				СтруктураСГДНалПер.АвансПлатФикс.Значение = СтрокаИтогов.ЗачтеноАвансовыхПлатежей;
				Если ОснованиеДляПредставленияСправок = Перечисления.ОснованияДляПредставленияСправок2НДФЛ.ЕжегоднаяОтчетность Или ОснованиеДляПредставленияСправок = Перечисления.ОснованияДляПредставленияСправок2НДФЛ.ЕжегоднаяОтчетностьЗаРеорганизованнуюОрганизацию Тогда
					СтруктураСГДНалПер.НалУдерж.Значение = СтрокаИтогов.Удержано;
					СтруктураСГДНалПер.НалПеречисл.Значение = СтрокаИтогов.Перечислено;
					СтруктураСГДНалПер.НалУдержЛиш.Значение = СтрокаИтогов.ИзлишнеУдержано;
				КонецЕсли;
				СтруктураСГДНалПер.НалНеУдерж.Значение = СтрокаИтогов.Задолженность;
				Если СтрокаИтогов.ЗачтеноАвансовыхПлатежей > 0 Тогда
					Уведомление = СтруктураСГДНалПер.УведФиксПлат.Значение;
					Уведомление.НомерУвед = СтрокаДанных.НомерУведомленияАвансовыеПлатежи;
					Уведомление.ДатаУвед = СтрокаДанных.ДатаУведомленияАвансовыеПлатежи;
					Уведомление.ИФНСУвед = СтрокаДанных.КодНалоговогоОрганаУведомленияАвансовыеПлатежи;
				Иначе
					СтруктураСГДНалПер.Удалить("УведФиксПлат");
				КонецЕсли;
				
				Атрибуты = СправкиПоНДФЛ.ДанныеВыгружаемыеКакАтрибуты(НаборЗаписейСведенияОДоходах);
				СправкиПоНДФЛ.ДобавитьИнформациюВДерево(ПроцедурыПерсонифицированногоУчета.ДобавитьУзелВДеревоXML(УзелСправки, "СведДох","", Атрибуты), НаборЗаписейСведенияОДоходах);
				
			КонецЦикла;
		КонецЕсли;
		
		ОбработкаПрерыванияПользователя();	
		
	КонецЦикла;
	
	Если Отказ Тогда
		Возврат ""	
	КонецЕсли;
		
	// Преобразуем дерево в строковое описание XML
	ПотокВыгрузкиXML = ПроцедурыПерсонифицированногоУчета.СоздатьПотокXML();
	СправкиПоНДФЛ.ЗаписатьУзелДереваXMLВXML(ДеревоВыгрузки, ПотокВыгрузкиXML, "xsi", "http://www.w3.org/2001/XMLSchema-instance");
	// получаем содержимое файла в виде строки
	СтрокаXML = ПроцедурыПерсонифицированногоУчета.ЗаписатьПотокXML(ПотокВыгрузкиXML);
	
	Возврат СтрокаXML

КонецФункции 

Функция Файл2019(Отказ, СоответствиеКодовСтран, СоответствиеИменСтран, СоответствиеДокументовУдостоверяющиеЛичность, СоответствиеКодовРегионов, СоответствиеСтавок, СоответствиеКодовДоходов, СоответствиеСтавокДоходов)

	ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
	
	//-----------------------------------------------------------------------------
	// СВЕДЕНИЯ О НАЛОГОВОМ АГЕНТЕ
	
	СтруктураДанныхНА = СправкиПоНДФЛ.ДанныеНалоговогоАгентаДля2НДФЛ(Организация, НалоговыйПериод, "", ОКТМО_КПП, КодИФНС, Дата, Телефон, , СправкуПодписал, Истина);
	Если ОснованиеДляПредставленияСправок = Перечисления.ОснованияДляПредставленияСправок2НДФЛ.ОНевозможностиУдержанияНДФЛ Тогда
		СтруктураДанныхНА.Признак = "2"
	ИначеЕсли ОснованиеДляПредставленияСправок = Перечисления.ОснованияДляПредставленияСправок2НДФЛ.ЕжегоднаяОтчетность Тогда
		СтруктураДанныхНА.Признак = "1"
	ИначеЕсли ОснованиеДляПредставленияСправок = Перечисления.ОснованияДляПредставленияСправок2НДФЛ.ЕжегоднаяОтчетностьЗаРеорганизованнуюОрганизацию Тогда
		СтруктураДанныхНА.Признак = "3"
	Иначе 	
		СтруктураДанныхНА.Признак = "4"
	КонецЕсли;
	СтруктураДанныхНА.Вставить("ФормаРеорганизации", ФормаРеорганизации);
	СтруктураДанныхНА.Вставить("ИННРеорганизованнойОрганизации", ИННРеорганизованнойОрганизации);
	СтруктураДанныхНА.Вставить("КППРеорганизованнойОрганизации", КППРеорганизованнойОрганизации);
	Если ЗначениеЗаполнено(ФормаРеорганизации) Тогда
		СтруктураДанныхНА.НазваниеОрганизации = НаименованиеРеорганизованнойОрганизации
	КонецЕсли;
	
	СправкиПоНДФЛ.ПроверитьОбщиеДанныеСправки(СтруктураДанныхНА, Отказ, ОбработкаКомментариев, Истина, Ложь);
	ОрганизацияЭтоФизЛицо = Не СтруктураДанныхНА.ЭтоЮрЛицо;
	
	//-----------------------------------------------------------------------------
	// ФОРМИРОВАНИЕ ДЕРЕВА ДАННЫХ
	
	// Загружаем формат файла сведений
	МакетФормата = ПолучитьМакет("ФорматНДФЛ2019");
	// Информационная часть
	ФорматФайла = СправкиПоНДФЛ.ЗагрузитьФорматНабораЗаписей(МакетФормата, "Файл", ОрганизацияЭтоФизЛицо);
	
	// Создаем начальное дерево
	ДеревоВыгрузки = ПроцедурыПерсонифицированногоУчета.СоздатьДеревоXML();
	
	Атрибуты = Новый Соответствие;
	Атрибуты.Вставить("ИдФайл", ИмяФайла);
	Атрибуты.Вставить("ВерсПрог", "1С:" + РегламентированнаяОтчетность.ИДКонфигурации() + " " + РегламентированнаяОтчетность.РедакцияКонфигурации());
	Атрибуты.Вставить("ВерсФорм", "5.06");
	УзелФайл = ПроцедурыПерсонифицированногоУчета.ДобавитьУзелВДеревоXML(ДеревоВыгрузки, "Файл", "", Атрибуты);
	
	// Состав и структура документа
	ФорматДокумент = ФорматФайла.Документ.Значение;
	ФорматДокумент.ДатаДок.Значение = СтруктураДанныхНА.Дата;
	ФорматДокумент.ОтчетГод.Значение = СтруктураДанныхНА.НалоговыйПериодСтрокой;
	ФорматДокумент.Признак.Значение = СтруктураДанныхНА.Признак;
	ФорматДокумент.КодНО.Значение = СтруктураДанныхНА.КодИФНС;
	
	Если Не Отказ Тогда
		
		Атрибуты = СправкиПоНДФЛ.ДанныеВыгружаемыеКакАтрибуты(ФорматДокумент);
		УзелДокумент = ПроцедурыПерсонифицированногоУчета.ДобавитьУзелВДеревоXML(УзелФайл, "Документ", "", Атрибуты);
		
		// Данные о налоговом агенте
		НаборНалоговыйАгент = ФорматДокумент.СвНА.Значение;
		НаборНалоговыйАгент.ОКТМО.Значение = СтрЗаменить(СтруктураДанныхНА.ОКТМО, "-", "");
		Если ЗначениеЗаполнено(СтруктураДанныхНА.Телефон) Тогда
			НаборНалоговыйАгент.Тлф.Значение = СтруктураДанныхНА.Телефон;
		Иначе
			НаборНалоговыйАгент.Удалить("Тлф");
		КонецЕсли;
		Если ОрганизацияЭтоФизЛицо Тогда
			НаборЗаписейОтправитель = НаборНалоговыйАгент.СвНАФЛ.Значение;
			НаборЗаписейОтправитель.ИННФЛ.Значение = СтруктураДанныхНА.ИННорг;
			НаборЗаписейОтправитель.ФИО.Значение.Фамилия = СтруктураДанныхНА.Фамилия;
			НаборЗаписейОтправитель.ФИО.Значение.Имя = СтруктураДанныхНА.Имя;
			НаборЗаписейОтправитель.ФИО.Значение.Отчество = СтруктураДанныхНА.Отчество;
			
			НаборНалоговыйАгент.Удалить("СвНАЮЛ");
		Иначе
			НаборЗаписейОтправитель = НаборНалоговыйАгент.СвНАЮЛ.Значение;
			НаборЗаписейОтправитель.НаимОрг.Значение = СтруктураДанныхНА.НазваниеОрганизации;
			НаборЗаписейОтправитель.ИННЮЛ.Значение = СтруктураДанныхНА.ИННорг;
			НаборЗаписейОтправитель.КПП.Значение = СтруктураДанныхНА.КПП;
			Если ЗначениеЗаполнено(СтруктураДанныхНА.ФормаРеорганизации) Тогда
				ИНН_КПП_НеОбязателен = Найти("1/2/3/5/6", СокрЛП(СтруктураДанныхНА.ФормаРеорганизации)) = 0;
				НаборЗаписейОРеорганизации = НаборЗаписейОтправитель.СвРеоргЮЛ.Значение;
				НаборЗаписейОРеорганизации.ФормРеорг.Значение = СтруктураДанныхНА.ФормаРеорганизации;
				НаборЗаписейОРеорганизации.ИННЮЛ.Значение = СтруктураДанныхНА.ИННРеорганизованнойОрганизации;
				Если Не ЗначениеЗаполнено(СтруктураДанныхНА.ИННРеорганизованнойОрганизации) И ИНН_КПП_НеОбязателен Тогда
					НаборЗаписейОРеорганизации.Удалить("ИННЮЛ");
				КонецЕсли;
				НаборЗаписейОРеорганизации.КПП.Значение = СтруктураДанныхНА.КППРеорганизованнойОрганизации;
				Если Не ЗначениеЗаполнено(СтруктураДанныхНА.КППРеорганизованнойОрганизации) И ИНН_КПП_НеОбязателен Тогда
					НаборЗаписейОРеорганизации.Удалить("КПП");
				КонецЕсли;
			Иначе
				НаборЗаписейОтправитель.Удалить("СвРеоргЮЛ");
			КонецЕсли;
			
			НаборНалоговыйАгент.Удалить("СвНАФЛ");
		КонецЕсли;
		Атрибуты = СправкиПоНДФЛ.ДанныеВыгружаемыеКакАтрибуты(НаборНалоговыйАгент);
		УзелНалоговыйАгент = ПроцедурыПерсонифицированногоУчета.ДобавитьУзелВДеревоXML(УзелДокумент, "СвНА", "", Атрибуты);
		СправкиПоНДФЛ.ДобавитьИнформациюВДерево(УзелНалоговыйАгент, НаборНалоговыйАгент);
		
		// Сведения о лице, подписавшем документ
		НаборЗаписейПодписант = ФорматДокумент.Подписант.Значение;
		НаборЗаписейПодписант.ПрПодп.Значение = "1"; // налоговый агент
		НаборЗаписейПодписант.ФИО.Значение.Фамилия = СокрЛП(СтруктураДанныхНА.Фамилия);
		НаборЗаписейПодписант.ФИО.Значение.Имя = СокрЛП(СтруктураДанныхНА.Имя);
		НаборЗаписейПодписант.ФИО.Значение.Отчество = СокрЛП(СтруктураДанныхНА.Отчество);
		НаборЗаписейПодписант.Удалить("СвПред");
		Атрибуты = СправкиПоНДФЛ.ДанныеВыгружаемыеКакАтрибуты(НаборЗаписейПодписант);
		УзелПодписант = ПроцедурыПерсонифицированногоУчета.ДобавитьУзелВДеревоXML(УзелДокумент, "Подписант","", Атрибуты);
		СправкиПоНДФЛ.ДобавитьИнформациюВДерево(УзелПодписант, НаборЗаписейПодписант);
		
	КонецЕсли;	
	
	ОтборЗаписейРегистров = Новый Структура("ДокументОснование", Ссылка);
	
	СведенияОДоходахИВычетах = СправкиПоНДФЛПолныеПрава.СведенияОДоходахИВычетахДокумента(Ссылка);
	СведенияОДоходахФизическихЛиц = СведенияОДоходахИВычетах.СведенияОДоходах; 
	СведенияОВычетахФизическихЛиц = СведенияОДоходахИВычетах.СведенияОВычетах;

	СтруктураОтбора = Новый Структура("НомерСправки");
	СтруктураОтбораДохода = Новый Структура("Месяц,КодДохода");
	ТаблицаВычетовКДоходам = СведенияОВычетах.ВыгрузитьКолонки("СуммаВычета");
	ТаблицаВычетовКДоходам.Колонки.Добавить("КодВычетаСтрокой", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(3)));
	
	СтруктураДанныхСправки = ФорматДокумент.НДФЛ__2.Значение;
	ФорматСведенияОДоходах = ПроцедурыПерсонифицированногоУчета.СкопироватьСтруктуруДанных(СтруктураДанныхСправки.СведДох.Значение);
	ФорматСведенияОВычетах = ПроцедурыПерсонифицированногоУчета.СкопироватьСтруктуруДанных(ФорматСведенияОДоходах.НалВычССИ.Значение.ПредВычССИ);
	СтруктураДанныхСправки.Удалить("СведДох");
	
	Для Каждого СтрокаДанных Из СотрудникиОрганизации Цикл 
		
		ЗаполнитьЗначенияСвойств(СтруктураОтбора, СтрокаДанных);
		ДоходыПоВидам = СведенияОДоходахФизическихЛиц.Скопировать(СтруктураОтбора);
		ВычетыПоВидам = СведенияОВычетахФизическихЛиц.Скопировать(СтруктураОтбора);
		ДополнитьТаблицуСВычетами(ДоходыПоВидам);
		ДополнитьТаблицуСВычетами(ВычетыПоВидам);
		Итоги = СуммыНалогов.Выгрузить(СтруктураОтбора);
		
		// Проверка корректности выводимых данных
		СправкиПоНДФЛ.ПроверитьДанныеСотрудника(НалоговыйПериод, СтруктураДанныхНА.Признак, СтрокаДанных, ДоходыПоВидам, ВычетыПоВидам, Итоги, Дата, Отказ, ОбработкаКомментариев, СоответствиеДокументовУдостоверяющиеЛичность, СоответствиеИменСтран, СоответствиеСтавокДоходов, НомерКорректировки);
		
		Если Отказ Тогда
			Продолжить;
		КонецЕсли;
		
		НаборЗаписей2НДФЛ = ПроцедурыПерсонифицированногоУчета.СкопироватьСтруктуруДанных(СтруктураДанныхСправки);
		НаборЗаписей2НДФЛ.НомСпр.Значение = Формат(СтрокаДанных.НомерСправки, "ЧГ=");
		НаборЗаписей2НДФЛ.НомКорр.Значение = Формат(НомерКорректировки,"ЧЦ=2; ЧН=00; ЧВН="); 
		
		// Данные о физическом лице - получателе дохода
		НаборЗаписейПолучателиДохода = НаборЗаписей2НДФЛ.ПолучДох.Значение;
		Если ПустаяСтрока(СтрокаДанных.ИНН) Тогда
			НаборЗаписейПолучателиДохода.Удалить("ИННФЛ");
		Иначе
			НаборЗаписейПолучателиДохода.ИННФЛ.Значение = СтрокаДанных.ИНН;
		КонецЕсли;
		Статус = 1;
		Если СтрокаДанных.СтатусНалогоплательщика = Перечисления.СтатусыНалогоплательщиковПоНДФЛ.НеРезидент Тогда
			Статус = 2;
		ИначеЕсли СтрокаДанных.СтатусНалогоплательщика = Перечисления.СтатусыНалогоплательщиковПоНДФЛ.ГражданинСтраныЕАЭС Тогда
			Статус = 2;
		ИначеЕсли СтрокаДанных.СтатусНалогоплательщика = Перечисления.СтатусыНалогоплательщиковПоНДФЛ.ВысококвалифицированныйИностранныйСпециалист Тогда
			Статус = 3;
		ИначеЕсли СтрокаДанных.СтатусНалогоплательщика = Перечисления.СтатусыНалогоплательщиковПоНДФЛ.УчастникПрограммыПоПереселениюСоотечественников Тогда
			Статус = 4;
		ИначеЕсли СтрокаДанных.СтатусНалогоплательщика = Перечисления.СтатусыНалогоплательщиковПоНДФЛ.ЧленЭкипажаСуднаПодФлагомРФ Тогда
			Статус = 4;
		ИначеЕсли СтрокаДанных.СтатусНалогоплательщика = Перечисления.СтатусыНалогоплательщиковПоНДФЛ.Беженец Тогда
			Статус = 5;
		ИначеЕсли СтрокаДанных.СтатусНалогоплательщика = Перечисления.СтатусыНалогоплательщиковПоНДФЛ.НерезидентРаботающийНаОснованииПатента Тогда
			Статус = 6;
		КонецЕсли;
		НаборЗаписейПолучателиДохода.Статус.Значение = Статус;
		НаборЗаписейПолучателиДохода.ДатаРожд.Значение = СтрокаДанных.ДатаРождения;
		НаборЗаписейПолучателиДохода.Гражд.Значение = СоответствиеКодовСтран[СтрокаДанных.Гражданство];
		// Фамилия, Имя, Отчество
		НаборЗаписейПолучателиДохода.ФИО.Значение.Фамилия = СокрЛП(СтрокаДанных.Фамилия);
		НаборЗаписейПолучателиДохода.ФИО.Значение.Имя = СокрЛП(СтрокаДанных.Имя);
		НаборЗаписейПолучателиДохода.ФИО.Значение.Отчество = СокрЛП(СтрокаДанных.Отчество);
		// Удостоверение личности
		НаборЗаписейДокУдЛичности = НаборЗаписейПолучателиДохода.УдЛичнФЛ.Значение;
		НаборЗаписейДокУдЛичности.КодУдЛичн = СоответствиеДокументовУдостоверяющиеЛичность.Получить(СтрокаДанных.ВидДокумента);
		НаборЗаписейДокУдЛичности.СерНомДок = СокрЛП(СтрокаДанных.СерияДокумента) + " " + СокрЛП(СтрокаДанных.НомерДокумента);
		
		Атрибуты = СправкиПоНДФЛ.ДанныеВыгружаемыеКакАтрибуты(НаборЗаписей2НДФЛ);
		Узел2НДФЛ = ПроцедурыПерсонифицированногоУчета.ДобавитьУзелВДеревоXML(УзелДокумент, "НДФЛ-2", "", Атрибуты);
		СправкиПоНДФЛ.ДобавитьИнформациюВДерево(Узел2НДФЛ, НаборЗаписей2НДФЛ);
		
		ОбработкаПрерыванияПользователя();
		
		// Сведения о доходах не заполняются если справка отменяющая
		Если НомерКорректировки = 99 Тогда
			Продолжить;
		КонецЕсли;

		// Сведения о доходах
		//Уведомления = УведомленияНОоПравеНаВычеты.Выгрузить(СтруктураОтбора);
		Для Каждого СтрокаИтогов Из Итоги Цикл
			НаборЗаписейСведенияОДоходах = ПроцедурыПерсонифицированногоУчета.СкопироватьСтруктуруДанных(ФорматСведенияОДоходах);
			
			// Сведения о доходах физического лица(по ставке налога)(СведДох)
			НаборЗаписейСведенияОДоходах.Ставка.Значение = СоответствиеСтавок[СтрокаИтогов.Ставка];
			
			НаборЗаписейДоходы = НаборЗаписейСведенияОДоходах.ДохВыч.Значение;
			ТаблицаДоходов = НаборЗаписейДоходы.СвСумДох.Значение;
			
			Если СтрокаИтогов.ОбщаяСуммаДохода > 0 Тогда
				ТаблицаСтрок = СправкиПоНДФЛ.ИзвлечьДоходыПоСтавке(НалоговыйПериод, СтрокаИтогов.Ставка, СтрокаДанных.СтатусНалогоплательщика, ДоходыПоВидам, СоответствиеСтавокДоходов);
				ТаблицаСтрок.Свернуть("Месяц,КодДохода");
				ТаблицаСтрок.Сортировать("Месяц,КодДохода");
				Для Каждого СтрокаДоходов Из ТаблицаСтрок Цикл // Доходы
					ЗаполнитьЗначенияСвойств(СтруктураОтбораДохода, СтрокаДоходов);
					Строки = ДоходыПоВидам.НайтиСтроки(СтруктураОтбораДохода);
					СуммаДохода = 0;
					ТаблицаВычетовКДоходам.Очистить();
					Для Каждого ОтобраннаяСтрока Из Строки Цикл
						СуммаДохода = СуммаДохода + ОтобраннаяСтрока.СуммаДохода;
						Если ЗначениеЗаполнено(ОтобраннаяСтрока.КодВычета) И ЗначениеЗаполнено(ОтобраннаяСтрока.СуммаВычета) Тогда
							ЗаполнитьЗначенияСвойств(ТаблицаВычетовКДоходам.Добавить(), ОтобраннаяСтрока);	
						КонецЕсли;	
					КонецЦикла;
					
					СтрокаТЗ = ТаблицаДоходов.Добавить();
					СтрокаТЗ.Месяц = ?(СтрДлина(СтрокаДоходов.Месяц) = 1,"0","") + СтрокаДоходов.Месяц;
					СтрокаТЗ.КодДоход = СоответствиеКодовДоходов[СтрокаДоходов.КодДохода];
					СтрокаТЗ.СумДоход = СуммаДохода;
					Если ТаблицаВычетовКДоходам.Количество() > 0 Тогда
						ТаблицаДляСтроки = ТаблицаВычетовКДоходам.Скопировать();
						ТаблицаДляСтроки.Колонки.КодВычетаСтрокой.Имя = "КодВычет";
						ТаблицаДляСтроки.Колонки.СуммаВычета.Имя = "СумВычет";
						ОписаниеФормата = ПроцедурыПерсонифицированногоУчета.СкопироватьСтруктуруДанных(НаборЗаписейСведенияОДоходах.НалВычССИ.Значение.ПредВычССИ);
						ОписаниеФормата.Значение = ТаблицаДляСтроки;
						СтрокаТЗ.СвСумВыч = Новый Структура("СвСумВыч", ОписаниеФормата);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			// Стандартные, социальные и имущественные налоговые вычеты(НалВычССИ)
			Если ВычетыПоВидам.Количество() > 0 И СтрокаИтогов.Ставка = Перечисления.НДФЛСтавки.Ставка13
				Или СтрокаИтогов.ЗачтеноАвансовыхПлатежей > 0 Тогда
				
				НаборЗаписейВычет = НаборЗаписейСведенияОДоходах.НалВычССИ.Значение;
				ТаблицаВычетов = НаборЗаписейВычет.ПредВычССИ.Значение;
				ТаблицаУведомлений = НаборЗаписейВычет.УведВыч.Значение;
				Для Каждого СтрокаВычетов Из ВычетыПоВидам Цикл // Вычеты
					СтрокаТЗ = ТаблицаВычетов.Добавить();
					СтрокаТЗ.КодВычет = СтрокаВычетов.КодВычетаСтрокой;
					СтрокаТЗ.СумВычет = СтрокаВычетов.СуммаВычета;
				КонецЦикла;
				Если ВычетыПоВидам.Найти(Перечисления.ГруппыВычетовПоНДФЛ.Имущественные, "ГруппаВычета") <> Неопределено Тогда
					НовоеУведомление = ТаблицаУведомлений.Добавить();
					НовоеУведомление.КодВидУвед = "1";
					НовоеУведомление.НомерУвед = СтрокаДанных.НомерУведомления;
					НовоеУведомление.ДатаУвед = СтрокаДанных.ДатаУведомления;
					НовоеУведомление.НОУвед = СтрокаДанных.КодНалоговогоОрганаУведомления;
				КонецЕсли;
				Если ВычетыПоВидам.Найти(Перечисления.ГруппыВычетовПоНДФЛ.СоциальныеПоУведомлениюНО, "ГруппаВычета") <> Неопределено Тогда
					НовоеУведомление = ТаблицаУведомлений.Добавить();
					НовоеУведомление.КодВидУвед = "2";
					НовоеУведомление.НомерУвед = СтрокаДанных.НомерУведомленияСоц;
					НовоеУведомление.ДатаУвед = СтрокаДанных.ДатаУведомленияСоц;
					НовоеУведомление.НОУвед = СтрокаДанных.КодНалоговогоОрганаУведомленияСоц;
				КонецЕсли;
				Если СтрокаИтогов.ЗачтеноАвансовыхПлатежей > 0 Тогда
					НовоеУведомление = ТаблицаУведомлений.Добавить();
					НовоеУведомление.КодВидУвед = "3";
					НовоеУведомление.НомерУвед = СтрокаДанных.НомерУведомленияАвансовыеПлатежи;
					НовоеУведомление.ДатаУвед = СтрокаДанных.ДатаУведомленияАвансовыеПлатежи;
					НовоеУведомление.НОУвед = СтрокаДанных.КодНалоговогоОрганаУведомленияАвансовыеПлатежи;
				КонецЕсли;
			Иначе
				НаборЗаписейСведенияОДоходах.Удалить("НалВычССИ");
			КонецЕсли;
			
			// Общие суммы дохода и налога по итогам налогового перида(СумИтНалПер)
			СтруктураСГДНалПер = НаборЗаписейСведенияОДоходах.СумИтНалПер.Значение;
			СтруктураСГДНалПер.СумДохОбщ.Значение = СтрокаИтогов.ОбщаяСуммаДохода;
			СтруктураСГДНалПер.НалБаза.Значение = СтрокаИтогов.ОблагаемаяСуммаДохода;
			СтруктураСГДНалПер.НалИсчисл.Значение = СтрокаИтогов.Исчислено;
			СтруктураСГДНалПер.АвансПлатФикс.Значение = СтрокаИтогов.ЗачтеноАвансовыхПлатежей;
			Если ОснованиеДляПредставленияСправок = Перечисления.ОснованияДляПредставленияСправок2НДФЛ.ЕжегоднаяОтчетность 
				Или ОснованиеДляПредставленияСправок = Перечисления.ОснованияДляПредставленияСправок2НДФЛ.ЕжегоднаяОтчетностьЗаРеорганизованнуюОрганизацию Тогда
				СтруктураСГДНалПер.НалУдерж.Значение = СтрокаИтогов.Удержано;
				СтруктураСГДНалПер.НалПеречисл.Значение = СтрокаИтогов.Перечислено;
				СтруктураСГДНалПер.НалУдержЛиш.Значение = СтрокаИтогов.ИзлишнеУдержано;
			КонецЕсли;
			СтруктураСГДНалПер.НалНеУдерж.Значение = СтрокаИтогов.Задолженность;
			
			Атрибуты = СправкиПоНДФЛ.ДанныеВыгружаемыеКакАтрибуты(НаборЗаписейСведенияОДоходах);
			СправкиПоНДФЛ.ДобавитьИнформациюВДерево(ПроцедурыПерсонифицированногоУчета.ДобавитьУзелВДеревоXML(Узел2НДФЛ, "СведДох","", Атрибуты), НаборЗаписейСведенияОДоходах);
		КонецЦикла;
		
	КонецЦикла;
	
	Если Отказ Тогда
		Возврат ""	
	КонецЕсли;
		
	// Преобразуем дерево в строковое описание XML
	ПотокВыгрузкиXML = ПроцедурыПерсонифицированногоУчета.СоздатьПотокXML();
	СправкиПоНДФЛ.ЗаписатьУзелДереваXMLВXML(ДеревоВыгрузки, ПотокВыгрузкиXML, "xsi", "http://www.w3.org/2001/XMLSchema-instance");
	// получаем содержимое файла в виде строки
	СтрокаXML = ПроцедурыПерсонифицированногоУчета.ЗаписатьПотокXML(ПотокВыгрузкиXML);
	
	Возврат СтрокаXML
	
КонецФункции 

Процедура ЗаполнитьДанныеОтправителя(НаборЗаписейОтправитель, СтруктураДанныхНА)
	
	НаборЗаписейОтправитель.ИННЮЛ.Значение = СтруктураДанныхНА.ИННорг;
	НаборЗаписейОтправитель.КПП.Значение = СтруктураДанныхНА.КПП;
	Если ЗначениеЗаполнено(СтруктураДанныхНА.ФормаРеорганизации) Тогда
		НаборЗаписейОРеорганизации = НаборЗаписейОтправитель.СвРеоргЮЛ.Значение;
		НаборЗаписейОРеорганизации.ФормРеорг = СтруктураДанныхНА.ФормаРеорганизации;
		Если ЗначениеЗаполнено(СтруктураДанныхНА.ИННРеорганизованнойОрганизации) Тогда
			НаборЗаписейОРеорганизации.ИННЮЛ = СтруктураДанныхНА.ИННРеорганизованнойОрганизации;
		Иначе
			НаборЗаписейОРеорганизации.Удалить("ИННЮЛ");
			СтрокаПоля = НаборЗаписейОтправитель.СвРеоргЮЛ.Поля.Найти("ИННЮЛ", "ИмяПоля");
			Если СтрокаПоля <> Неопределено Тогда
				НаборЗаписейОтправитель.СвРеоргЮЛ.Поля.Удалить(СтрокаПоля);
			КонецЕсли;		
		КонецЕсли;
		Если ЗначениеЗаполнено(СтруктураДанныхНА.КППРеорганизованнойОрганизации) Тогда
			НаборЗаписейОРеорганизации.КПП = СтруктураДанныхНА.КППРеорганизованнойОрганизации;
		Иначе
			НаборЗаписейОРеорганизации.Удалить("КПП");
			СтрокаПоля = НаборЗаписейОтправитель.СвРеоргЮЛ.Поля.Найти("КПП", "ИмяПоля");
			Если СтрокаПоля <> Неопределено Тогда
				НаборЗаписейОтправитель.СвРеоргЮЛ.Поля.Удалить(СтрокаПоля);
			КонецЕсли;		
		КонецЕсли;
	Иначе
		НаборЗаписейОтправитель.Удалить("СвРеоргЮЛ");
	КонецЕсли;
	
КонецПроцедуры

Функция ОграничениеНаКоличествоСотрудниковВМашиночитаемомБланке()
	Возврат 500
КонецФункции

// Формирует форма справки 2-НДФЛ для сотрудника
//
Функция СформироватьПечатнуюФорму2НДФЛДляСотрудника()
	
	СтруктураДанныхНА = СправкиПоНДФЛ.ДанныеНалоговогоАгентаДля2НДФЛ(Организация, НалоговыйПериод, "", ОКТМО_КПП, КодИФНС, Дата, Телефон, , СправкуПодписал, Истина);
	Если ОснованиеДляПредставленияСправок = Перечисления.ОснованияДляПредставленияСправок2НДФЛ.ОНевозможностиУдержанияНДФЛ Тогда
		СтруктураДанныхНА.Признак = "2"
	ИначеЕсли ОснованиеДляПредставленияСправок = Перечисления.ОснованияДляПредставленияСправок2НДФЛ.ЕжегоднаяОтчетность Тогда
		СтруктураДанныхНА.Признак = "1"
	ИначеЕсли ОснованиеДляПредставленияСправок = Перечисления.ОснованияДляПредставленияСправок2НДФЛ.ЕжегоднаяОтчетностьЗаРеорганизованнуюОрганизацию Тогда
		СтруктураДанныхНА.Признак = "3"
	Иначе 	
		СтруктураДанныхНА.Признак = "4"
	КонецЕсли;
	СтруктураДанныхНА.Вставить("ФормаРеорганизации", ФормаРеорганизации);
	СтруктураДанныхНА.Вставить("ИННРеорганизованнойОрганизации", ИННРеорганизованнойОрганизации);
	СтруктураДанныхНА.Вставить("КППРеорганизованнойОрганизации", КППРеорганизованнойОрганизации);
	Если ЗначениеЗаполнено(ФормаРеорганизации) Тогда
		СтруктураДанныхНА.НазваниеОрганизации = НаименованиеРеорганизованнойОрганизации
	КонецЕсли;
	
	СведенияОДоходахИВычетах = СправкиПоНДФЛПолныеПрава.СведенияОДоходахИВычетахДокумента(Ссылка);
	
	Возврат СправкиПоНДФЛ.ПечатьСправок2НДФЛ(Ссылка, СтруктураДанныхНА, СотрудникиОрганизации.Выгрузить(), СведенияОДоходахИВычетах.СведенияОДоходах, СведенияОДоходахИВычетах.СведенияОВычетах, СуммыНалогов.Выгрузить());

КонецФункции

// Формирует машиночитаемую форма справки 2-НДФЛ для ИФНС
//
Функция СформироватьПечатнуюФорму2НДФЛ2019Года()
	
	Отказ = Ложь;
	ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
	ОбработкаКомментариев.УдалитьСообщения();
	
	СоответствиеКодовСтран = Новый Соответствие;
	СоответствиеИменСтран = Новый Соответствие;
	СоответствиеДокументовУдостоверяющиеЛичность = Новый Соответствие;
	СоответствиеКодовРегионов = Новый Соответствие;
	СоответствиеСтавок = Новый Соответствие;
	СоответствиеКодовДоходов = Новый Соответствие;
	СоответствиеСтавокДоходов = Новый Соответствие;
	СправкиПоНДФЛ.ПрочитатьКлассификаторыВСоответствия(НалоговыйПериод, СоответствиеКодовСтран, СоответствиеИменСтран, СоответствиеДокументовУдостоверяющиеЛичность, СоответствиеКодовРегионов, СоответствиеКодовДоходов, , СоответствиеСтавокДоходов);
	
	СоответствиеСтавок[Перечисления.НДФЛСтавки.Ставка09] = 9;
	СоответствиеСтавок[Перечисления.НДФЛСтавки.Ставка13] = 13;
	СоответствиеСтавок[Перечисления.НДФЛСтавки.Ставка15] = 15;
	СоответствиеСтавок[Перечисления.НДФЛСтавки.Ставка30] = 30;
	СоответствиеСтавок[Перечисления.НДФЛСтавки.Ставка35] = 35;
	
	ПредставленияСтавокНДФЛ = Новый Соответствие;
	Для Каждого СтавкаНДФЛ Из СоответствиеСтавок Цикл
		ПредставленияСтавокНДФЛ.Вставить(СтавкаНДФЛ.Ключ, Формат(СтавкаНДФЛ.Значение, "ЧЦ=2; ЧВН="));
	КонецЦикла;
	
	Уведомления = Новый ТаблицаЗначений;
	Уведомления.Колонки.Добавить("КодВидаУведомления", ОбщегоНазначенияЗК.ПолучитьОписаниеТиповСтроки(1));
	Уведомления.Колонки.Добавить("НомерУведомления", ОбщегоНазначенияЗК.ПолучитьОписаниеТиповСтроки(15));
	Уведомления.Колонки.Добавить("ДатаУведомления", ОбщегоНазначенияЗК.ПолучитьОписаниеТиповДаты(ЧастиДаты.Дата));
	Уведомления.Колонки.Добавить("КодНалоговогоОрганаУведомления", ОбщегоНазначенияЗК.ПолучитьОписаниеТиповСтроки(4));
	
	СтруктураДанныхНА = СправкиПоНДФЛ.ДанныеНалоговогоАгентаДля2НДФЛ(Организация, НалоговыйПериод, "", ОКТМО_КПП, КодИФНС, Дата, Телефон, , СправкуПодписал, Истина);
	Если ОснованиеДляПредставленияСправок = Перечисления.ОснованияДляПредставленияСправок2НДФЛ.ОНевозможностиУдержанияНДФЛ Тогда
		СтруктураДанныхНА.Признак = "2"
	ИначеЕсли ОснованиеДляПредставленияСправок = Перечисления.ОснованияДляПредставленияСправок2НДФЛ.ЕжегоднаяОтчетность Тогда
		СтруктураДанныхНА.Признак = "1"
	ИначеЕсли ОснованиеДляПредставленияСправок = Перечисления.ОснованияДляПредставленияСправок2НДФЛ.ЕжегоднаяОтчетностьЗаРеорганизованнуюОрганизацию Тогда
		СтруктураДанныхНА.Признак = "3"
	Иначе 	
		СтруктураДанныхНА.Признак = "4"
	КонецЕсли;
	СтруктураДанныхНА.Вставить("ФормаРеорганизации", ФормаРеорганизации);
	СтруктураДанныхНА.Вставить("ИННРеорганизованнойОрганизации", ИННРеорганизованнойОрганизации);
	СтруктураДанныхНА.Вставить("КППРеорганизованнойОрганизации", КППРеорганизованнойОрганизации);
	Если ЗначениеЗаполнено(ФормаРеорганизации) Тогда
		СтруктураДанныхНА.НазваниеОрганизации = НаименованиеРеорганизованнойОрганизации
	КонецЕсли;
	
	СправкиПоНДФЛ.ПроверитьОбщиеДанныеСправки(СтруктураДанныхНА, Отказ, ОбработкаКомментариев, Истина, Ложь);
	ОрганизацияЭтоФизЛицо = Не СтруктураДанныхНА.ЭтоЮрЛицо;
	
	СведенияОДоходахИВычетах = СправкиПоНДФЛПолныеПрава.СведенияОДоходахИВычетахДокумента(Ссылка);
	СведенияОДоходахФизическихЛиц = СведенияОДоходахИВычетах.СведенияОДоходах;
	СведенияОВычетахФизическихЛиц = СведенияОДоходахИВычетах.СведенияОВычетах;
	
	ТабличныйДокументСправки = Новый ТабличныйДокумент;
	ТабличныйДокументСправки.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_2НДФЛ_ДЛЯ_ИФНС_2019";
	ТабличныйДокументСправки.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ТабличныйДокументСправки.ПолеСлева = 5;
	ТабличныйДокументСправки.ПолеСправа = 5;
	ТабличныйДокументСправки.ПолеСверху = 5;
	ТабличныйДокументСправки.ПолеСнизу = 5;
	ТабличныйДокументСправки.РазмерКолонтитулаСверху = 0;
	ТабличныйДокументСправки.РазмерКолонтитулаСнизу = 0;
	ТабличныйДокументСправки.АвтоМасштаб = Истина;
	
	МакетСправки = ПолучитьМакет("Форма2НДФЛ2019");
	
	НомерСтраницы = 0;
		
	ТаблицаВычетовКДоходам = СведенияОВычетах.ВыгрузитьКолонки("СуммаВычета");
	ТаблицаВычетовКДоходам.Колонки.Добавить("КодВычетаСтрокой", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(3)));

	Если СотрудникиОрганизации.Количество() > ОграничениеНаКоличествоСотрудниковВМашиночитаемомБланке() Тогда
		ТекстОшибки = Символы.ПС + Символы.Таб + "Машиночитаемый бланк предназначен для небольшого количества сотрудников. 
			|Воспользуйтесь печатной формой 2-НДФЛ для сотрудника";
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(ТекстОшибки, Отказ);	
		//ОбработкаКомментариев.ДобавитьСообщение(ТекстОшибки, Перечисления.ВидыСообщений.Ошибка);
		Отказ = Истина;
	КонецЕсли;
	
	СтруктураОтбора = Новый Структура("НомерСправки");
	СтруктураОтбораДохода = Новый Структура("Месяц,КодДохода");
	Для Каждого СтрокаДанных Из СотрудникиОрганизации Цикл
		
		ЗаполнитьЗначенияСвойств(СтруктураОтбора, СтрокаДанных);
		ДоходыПоВидам = СведенияОДоходахФизическихЛиц.Скопировать(СтруктураОтбора);
		ВычетыПоВидам = СведенияОВычетахФизическихЛиц.Скопировать(СтруктураОтбора);
		ДополнитьТаблицуСВычетами(ДоходыПоВидам);
		ДополнитьТаблицуСВычетами(ВычетыПоВидам);
		Итоги = СуммыНалогов.Выгрузить(СтруктураОтбора);
		
		// Проверка корректности выводимых данных
		СправкиПоНДФЛ.ПроверитьДанныеСотрудника(НалоговыйПериод, СтруктураДанныхНА.Признак, СтрокаДанных, ДоходыПоВидам, ВычетыПоВидам, Итоги, Дата, Отказ, ОбработкаКомментариев, СоответствиеДокументовУдостоверяющиеЛичность, СоответствиеИменСтран, СоответствиеСтавокДоходов, НомерКорректировки);
		
		Если Отказ Тогда
			Продолжить;
		КонецЕсли;
		
		Если НомерКорректировки = 99 Тогда
			
			ТитульныйЛист = МакетСправки.ПолучитьОбласть("ТитульныйЛист");
			НомерСтраницы = НомерСтраницы + 1;
			
			// Шапка справки.
			ВывестиДанныеПоБуквенно(СтруктураДанныхНА.ИННорг, ТитульныйЛист, "ИННорг", 12);
			ВывестиДанныеПоБуквенно(СтруктураДанныхНА.КПП, ТитульныйЛист, "КППорг", 9);
			ВывестиДанныеПоБуквенно(Формат(НомерСтраницы, "ЧЦ=3; ЧВН=; ЧГ="), ТитульныйЛист, "НомерСтраницы", 3);
			ВывестиЦелоеЧислоВЯчейки(СтрокаДанных.НомерСправки, ТитульныйЛист, "НомерСправки", 7);
			ВывестиДанныеПоБуквенно(Формат(СтруктураДанныхНА.НалоговыйПериод, "ЧЦ=10; ЧДЦ=0; ЧГ=0"), ТитульныйЛист, "Год", 4);
			ВывестиДанныеПоБуквенно(СтруктураДанныхНА.Признак, ТитульныйЛист, "Признак", 1);
			ВывестиДанныеПоБуквенно(Формат(НомерКорректировки, "ЧЦ=2; ЧН=00; ЧВН="), ТитульныйЛист, "НомерКорректировки", 2);
			ВывестиДанныеПоБуквенно(СтруктураДанныхНА.КодИФНС, ТитульныйЛист, "КодНО", 4);
			ВывестиНаименованиеНалоговогоАгента(СтруктураДанныхНА.НазваниеОрганизации, ТитульныйЛист, "НА", 3, 40);
			
			Если ЗначениеЗаполнено(СтруктураДанныхНА.ФормаРеорганизации) Тогда
				ВывестиДанныеПоБуквенно(СтруктураДанныхНА.ФормаРеорганизации, ТитульныйЛист, "ФР", 1);
				ВывестиДанныеПоБуквенно(СтруктураДанныхНА.ИННРеорганизованнойОрганизации, ТитульныйЛист, "ИННР", 10);
				ВывестиДанныеПоБуквенно(СтруктураДанныхНА.КППРеорганизованнойОрганизации, ТитульныйЛист, "КППР", 9);
			КонецЕсли;
			ВывестиДанныеПоБуквенно(СтруктураДанныхНА.ОКТМО, ТитульныйЛист, "ОКТМО", 11);
			ВывестиДанныеПоБуквенно(СтруктураДанныхНА.Телефон, ТитульныйЛист, "Телефон", 20);
			
			// Подписант
			ВывестиДанныеПоБуквенно("1", ТитульныйЛист, "ТипПодписанта", 1);
			ВывестиНаименованиеНалоговогоАгента(СтруктураДанныхНА.ФИОПодписавшего, ТитульныйЛист, "ФИОПодписанта", 3, 40);
			ВывестиДанныеПоБуквенно(Формат(СтруктураДанныхНА.Дата, "ДФ=ddMMyyyy"), ТитульныйЛист, "ДатаПодписи", 8);
			
			// Раздел 1. Данные о физическом лице.
			ВывестиДанныеПоБуквенно(СтрокаДанных.ИНН, ТитульныйЛист, "ИННФЛ", 12);
			ВывестиДанныеПоБуквенно(СтрокаДанных.Фамилия, ТитульныйЛист, "Фамилия", 36);
			ВывестиДанныеПоБуквенно(СтрокаДанных.Имя, ТитульныйЛист, "Имя", 36);
			ВывестиДанныеПоБуквенно(СтрокаДанных.Отчество, ТитульныйЛист, "Отчество", 36);
			
			Статус = 1;
			Если СтрокаДанных.СтатусНалогоплательщика = Перечисления.СтатусыНалогоплательщиковПоНДФЛ.НеРезидент Тогда
				Статус = 2;
			ИначеЕсли СтрокаДанных.СтатусНалогоплательщика = Перечисления.СтатусыНалогоплательщиковПоНДФЛ.ГражданинСтраныЕАЭС Тогда
				Статус = 2;
			ИначеЕсли СтрокаДанных.СтатусНалогоплательщика = Перечисления.СтатусыНалогоплательщиковПоНДФЛ.ВысококвалифицированныйИностранныйСпециалист Тогда
				Статус = 3;
			ИначеЕсли СтрокаДанных.СтатусНалогоплательщика = Перечисления.СтатусыНалогоплательщиковПоНДФЛ.УчастникПрограммыПоПереселениюСоотечественников Тогда
				Статус = 4;
			ИначеЕсли СтрокаДанных.СтатусНалогоплательщика = Перечисления.СтатусыНалогоплательщиковПоНДФЛ.ЧленЭкипажаСуднаПодФлагомРФ Тогда
				Статус = 4;
			ИначеЕсли СтрокаДанных.СтатусНалогоплательщика = Перечисления.СтатусыНалогоплательщиковПоНДФЛ.Беженец Тогда
				Статус = 5;
			ИначеЕсли СтрокаДанных.СтатусНалогоплательщика = Перечисления.СтатусыНалогоплательщиковПоНДФЛ.НерезидентРаботающийНаОснованииПатента Тогда
				Статус = 6;
			КонецЕсли;
			ВывестиДанныеПоБуквенно(Статус, ТитульныйЛист, "СтатусНП", 1);
			
			Если ЗначениеЗаполнено(СтрокаДанных.ДатаРождения) Тогда
				ВывестиДанныеПоБуквенно(Формат(СтрокаДанных.ДатаРождения, "ДФ=ddMMyyyy"), ТитульныйЛист, "ДатаРождения", 8);
			КонецЕсли;
			
			ВывестиДанныеПоБуквенно(СоответствиеКодовСтран[СтрокаДанных.Гражданство], ТитульныйЛист, "Страна", 3);
			ВывестиДанныеПоБуквенно(СоответствиеДокументовУдостоверяющиеЛичность[СтрокаДанных.ВидДокумента], ТитульныйЛист, "Документ", 2);
			
			СерияНомерДокумента = СокрЛП(СтрокаДанных.СерияДокумента) + " " + СокрЛП(СтрокаДанных.НомерДокумента);
			ВывестиДанныеПоБуквенно(СерияНомерДокумента, ТитульныйЛист, "СерияНомер", 20);
			
			Если ТабличныйДокументСправки.ВысотаТаблицы > 0 Тогда
				ТабличныйДокументСправки.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;
			ТабличныйДокументСправки.Вывести(ТитульныйЛист);
			
			Продолжить;
		КонецЕсли;
		
		// Справка 2-НДФЛ.
		//Для Каждого СтавкаНДФЛ Из Перечисления.НДФЛСтавки Цикл
		Для Каждого СтрокаИтогов Из Итоги Цикл
			
			ЗаполнитьЗначенияСвойств(СтруктураОтбора, СтрокаДанных);
			ДоходыПоВидам = СведенияОДоходахФизическихЛиц.Скопировать(СтруктураОтбора);
			ВычетыПоВидам = СведенияОВычетахФизическихЛиц.Скопировать(СтруктураОтбора);
			ДополнитьТаблицуСВычетами(ДоходыПоВидам);
			ДополнитьТаблицуСВычетами(ВычетыПоВидам);
			Итоги = СуммыНалогов.Выгрузить(СтруктураОтбора);
			
			// Проверка корректности выводимых данных
			СправкиПоНДФЛ.ПроверитьДанныеСотрудника(НалоговыйПериод, СтруктураДанныхНА.Признак, СтрокаДанных, ДоходыПоВидам, ВычетыПоВидам, Итоги, Дата, Отказ, ОбработкаКомментариев, СоответствиеДокументовУдостоверяющиеЛичность, СоответствиеИменСтран, СоответствиеСтавокДоходов, НомерКорректировки);
			
			Если Отказ Тогда
				Продолжить;
			КонецЕсли;
			
			ТитульныйЛист = МакетСправки.ПолучитьОбласть("ТитульныйЛист");
			НомерСтраницы = НомерСтраницы + 1;
			
			// Шапка справки.
			ВывестиДанныеПоБуквенно(СтруктураДанныхНА.ИННорг, ТитульныйЛист, "ИННорг", 12);
			ВывестиДанныеПоБуквенно(СтруктураДанныхНА.КПП, ТитульныйЛист, "КППорг", 9);
			ВывестиДанныеПоБуквенно(Формат(НомерСтраницы, "ЧЦ=3; ЧВН=; ЧГ="), ТитульныйЛист, "НомерСтраницы", 3);
			ВывестиЦелоеЧислоВЯчейки(СтрокаДанных.НомерСправки, ТитульныйЛист, "НомерСправки", 7);
			ВывестиДанныеПоБуквенно(Формат(СтруктураДанныхНА.НалоговыйПериод, "ЧЦ=10; ЧДЦ=0; ЧГ=0"), ТитульныйЛист, "Год", 4);
			ВывестиДанныеПоБуквенно(СтруктураДанныхНА.Признак, ТитульныйЛист, "Признак", 1);
			ВывестиДанныеПоБуквенно(Формат(НомерКорректировки, "ЧЦ=2; ЧН=00; ЧВН="), ТитульныйЛист, "НомерКорректировки", 2);
			ВывестиДанныеПоБуквенно(СтруктураДанныхНА.КодИФНС, ТитульныйЛист, "КодНО", 4);
			ВывестиНаименованиеНалоговогоАгента(СтруктураДанныхНА.НазваниеОрганизации, ТитульныйЛист, "НА", 3, 40);
			
			Если ЗначениеЗаполнено(СтруктураДанныхНА.ФормаРеорганизации) Тогда
				ВывестиДанныеПоБуквенно(СтруктураДанныхНА.ФормаРеорганизации, ТитульныйЛист, "ФР", 1);
				ВывестиДанныеПоБуквенно(СтруктураДанныхНА.ИННРеорганизованнойОрганизации, ТитульныйЛист, "ИННР", 10);
				ВывестиДанныеПоБуквенно(СтруктураДанныхНА.КППРеорганизованнойОрганизации, ТитульныйЛист, "КППР", 9);
			КонецЕсли;
			ВывестиДанныеПоБуквенно(СтруктураДанныхНА.ОКТМО, ТитульныйЛист, "ОКТМО", 11);
			ВывестиДанныеПоБуквенно(СтруктураДанныхНА.Телефон, ТитульныйЛист, "Телефон", 20);
			
			// Подписант
			ВывестиДанныеПоБуквенно("1", ТитульныйЛист, "ТипПодписанта", 1);
			ВывестиНаименованиеНалоговогоАгента(СтруктураДанныхНА.ФИОПодписавшего, ТитульныйЛист, "ФИОПодписанта", 3, 40);
			ВывестиДанныеПоБуквенно(Формат(СтруктураДанныхНА.Дата, "ДФ=ddMMyyyy"), ТитульныйЛист, "ДатаПодписи", 8);
			
			// Раздел 1. Данные о физическом лице.
			ВывестиДанныеПоБуквенно(СтрокаДанных.ИНН, ТитульныйЛист, "ИННФЛ", 12);
			ВывестиДанныеПоБуквенно(СтрокаДанных.Фамилия, ТитульныйЛист, "Фамилия", 36);
			ВывестиДанныеПоБуквенно(СтрокаДанных.Имя, ТитульныйЛист, "Имя", 36);
			ВывестиДанныеПоБуквенно(СтрокаДанных.Отчество, ТитульныйЛист, "Отчество", 36);
			
			Статус = 1;
			Если СтрокаДанных.СтатусНалогоплательщика = Перечисления.СтатусыНалогоплательщиковПоНДФЛ.НеРезидент Тогда
				Статус = 2;
			ИначеЕсли СтрокаДанных.СтатусНалогоплательщика = Перечисления.СтатусыНалогоплательщиковПоНДФЛ.ГражданинСтраныЕАЭС Тогда
				Статус = 2;
			ИначеЕсли СтрокаДанных.СтатусНалогоплательщика = Перечисления.СтатусыНалогоплательщиковПоНДФЛ.ВысококвалифицированныйИностранныйСпециалист Тогда
				Статус = 3;
			ИначеЕсли СтрокаДанных.СтатусНалогоплательщика = Перечисления.СтатусыНалогоплательщиковПоНДФЛ.УчастникПрограммыПоПереселениюСоотечественников Тогда
				Статус = 4;
			ИначеЕсли СтрокаДанных.СтатусНалогоплательщика = Перечисления.СтатусыНалогоплательщиковПоНДФЛ.ЧленЭкипажаСуднаПодФлагомРФ Тогда
				Статус = 4;
			ИначеЕсли СтрокаДанных.СтатусНалогоплательщика = Перечисления.СтатусыНалогоплательщиковПоНДФЛ.Беженец Тогда
				Статус = 5;
			ИначеЕсли СтрокаДанных.СтатусНалогоплательщика = Перечисления.СтатусыНалогоплательщиковПоНДФЛ.НерезидентРаботающийНаОснованииПатента Тогда
				Статус = 6;
			КонецЕсли;
			ВывестиДанныеПоБуквенно(Статус, ТитульныйЛист, "СтатусНП", 1);
			
			Если ЗначениеЗаполнено(СтрокаДанных.ДатаРождения) Тогда
				ВывестиДанныеПоБуквенно(Формат(СтрокаДанных.ДатаРождения, "ДФ=ddMMyyyy"), ТитульныйЛист, "ДатаРождения", 8);
			КонецЕсли;
			
			ВывестиДанныеПоБуквенно(СоответствиеКодовСтран[СтрокаДанных.Гражданство], ТитульныйЛист, "Страна", 3);
			ВывестиДанныеПоБуквенно(СоответствиеДокументовУдостоверяющиеЛичность[СтрокаДанных.ВидДокумента], ТитульныйЛист, "Документ", 2);
			
			СерияНомерДокумента = СокрЛП(СтрокаДанных.СерияДокумента) + " " + СокрЛП(СтрокаДанных.НомерДокумента);
			ВывестиДанныеПоБуквенно(СерияНомерДокумента, ТитульныйЛист, "СерияНомер", 20);
			
			// Раздел 2. Общие суммы.
			ВывестиДанныеПоБуквенно(ПредставленияСтавокНДФЛ.Получить(СтрокаИтогов.Ставка) , ТитульныйЛист, "Ставка", 2);
			ВывестиСуммуВРубляхКопейкахВЯчейки(СтрокаИтогов.ОбщаяСуммаДохода, ТитульныйЛист, "Доход", 17);
			ВывестиСуммуВРубляхКопейкахВЯчейки(СтрокаИтогов.ОблагаемаяСуммаДохода, ТитульныйЛист, "База", 17);
			ВывестиЦелоеЧислоВЯчейки(СтрокаИтогов.Исчислено, ТитульныйЛист, "Исчислено", 11);
			ВывестиЦелоеЧислоВЯчейки(СтрокаИтогов.Удержано, ТитульныйЛист, "Удержано", 11);
			ВывестиЦелоеЧислоВЯчейки(СтрокаИтогов.Перечислено, ТитульныйЛист, "Перечислено", 11);
			ВывестиЦелоеЧислоВЯчейки(СтрокаИтогов.ИзлишнеУдержано, ТитульныйЛист, "ИзлишнеУдержано", 11);
			ВывестиЦелоеЧислоВЯчейки(СтрокаИтогов.Задолженность, ТитульныйЛист, "НеУдержано", 11);
			ВывестиЦелоеЧислоВЯчейки(СтрокаИтогов.ЗачтеноАвансовыхПлатежей, ТитульныйЛист, "Аванс", 11);
			
			// Раздел 3. Вычеты.
			Уведомления.Очистить();
			Если ВычетыПоВидам.Найти(Перечисления.ГруппыВычетовПоНДФЛ.Имущественные, "ГруппаВычета") <> Неопределено Тогда
				НовоеУведомление = Уведомления.Добавить();
				НовоеУведомление.КодВидаУведомления = "1";
				НовоеУведомление.НомерУведомления = СтрокаДанных.НомерУведомления;
				НовоеУведомление.ДатаУведомления = СтрокаДанных.ДатаУведомления;
				НовоеУведомление.КодНалоговогоОрганаУведомления = СтрокаДанных.КодНалоговогоОрганаУведомления;
			КонецЕсли;
			Если ВычетыПоВидам.Найти(Перечисления.ГруппыВычетовПоНДФЛ.СоциальныеПоУведомлениюНО, "ГруппаВычета") <> Неопределено Тогда
				НовоеУведомление = Уведомления.Добавить();
				НовоеУведомление.КодВидаУведомления = "2";
				НовоеУведомление.НомерУведомления = СтрокаДанных.НомерУведомленияСоц;
				НовоеУведомление.ДатаУведомления = СтрокаДанных.ДатаУведомленияСоц;
				НовоеУведомление.КодНалоговогоОрганаУведомления = СтрокаДанных.КодНалоговогоОрганаУведомленияСоц;
			КонецЕсли;
			Если СтрокаИтогов.ЗачтеноАвансовыхПлатежей > 0 Тогда
				НовоеУведомление = Уведомления.Добавить();
				НовоеУведомление.КодВидаУведомления = "3";
				НовоеУведомление.НомерУведомления = СтрокаДанных.НомерУведомленияАвансовыеПлатежи;
				НовоеУведомление.ДатаУведомления = СтрокаДанных.ДатаУведомленияАвансовыеПлатежи;
				НовоеУведомление.КодНалоговогоОрганаУведомления = СтрокаДанных.КодНалоговогоОрганаУведомленияАвансовыеПлатежи;
			КонецЕсли;
			
			// На листе помещаются 6 строк о вычетах и 1 уведомление 
			НеобходимоеКоличествоСтраниц = Макс(Уведомления.Количество(), Цел(ВычетыПоВидам.Количество()/6) + ?(ВычетыПоВидам.Количество()%6, 1, 0));
			Для НомерСтраницыСотрудника = 1 По НеобходимоеКоличествоСтраниц Цикл
				Если НомерСтраницыСотрудника <> 1 Тогда
					// дополнительный титульный лист
					Если ТабличныйДокументСправки.ВысотаТаблицы > 0 Тогда
						ТабличныйДокументСправки.ВывестиГоризонтальныйРазделительСтраниц();
					КонецЕсли;
					ТабличныйДокументСправки.Вывести(ТитульныйЛист);
					НомерСтраницы = НомерСтраницы + 1;
					ТитульныйЛист = МакетСправки.ПолучитьОбласть("ТитульныйЛист");
					
					ВывестиДанныеПоБуквенно(СтруктураДанныхНА.ИННорг, ТитульныйЛист, "ИННорг", 12);
					ВывестиДанныеПоБуквенно(СтруктураДанныхНА.КПП, ТитульныйЛист, "КППорг", 9);
					ВывестиДанныеПоБуквенно(Формат(НомерСтраницы, "ЧЦ=3; ЧВН=; ЧГ="), ТитульныйЛист, "НомерСтраницы", 3);
					ВывестиДанныеПоБуквенно(Формат(СтруктураДанныхНА.НалоговыйПериод, "ЧЦ=10; ЧДЦ=0; ЧГ=0"), ТитульныйЛист, "Год", 4);
					ВывестиДанныеПоБуквенно(СтруктураДанныхНА.Признак, ТитульныйЛист, "Признак", 1);
					ВывестиДанныеПоБуквенно(Формат(НомерКорректировки, "ЧЦ=2; ЧН=00; ЧВН="), ТитульныйЛист, "НомерКорректировки", 2);
					ВывестиДанныеПоБуквенно(СтруктураДанныхНА.КодИФНС, ТитульныйЛист, "КодНО", 4);
					ВывестиЦелоеЧислоВЯчейки(СтрокаДанных.НомерСправки, ТитульныйЛист, "НомерСправки", 7);
					
					НеобходимоВыводитьНаименованиеНА = ВычетыПоВидам.Количество() > (НомерСтраницыСотрудника-1) * 6;
					Если НеобходимоВыводитьНаименованиеНА Тогда
						ВывестиНаименованиеНалоговогоАгента(СтруктураДанныхНА.НазваниеОрганизации, ТитульныйЛист, "НА", 3, 40);
					КонецЕсли;
				КонецЕсли;
				
				Для Индекс = 1 По 6 Цикл
					ИндексСтрокиВычетов = Индекс + 6 * (НомерСтраницыСотрудника - 1);
					Если ВычетыПоВидам.Количество() < ИндексСтрокиВычетов Тогда
						Прервать;
					КонецЕсли;
					СтрокаВычетов = ВычетыПоВидам[ИндексСтрокиВычетов-1];
					ВывестиДанныеПоБуквенно(СтрокаВычетов.КодВычетаСтрокой, ТитульныйЛист, "КодВычета" + Индекс, 3);
					ВывестиСуммуВРубляхКопейкахВЯчейки(СтрокаВычетов.СуммаВычета, ТитульныйЛист, "СуммаВычета" + Индекс, 9);
				КонецЦикла;
				
				Если Уведомления.Количество() >= НомерСтраницыСотрудника Тогда
					СтрокаУведомления = Уведомления[НомерСтраницыСотрудника-1];
					ВывестиДанныеПоБуквенно(СтрокаУведомления.КодВидаУведомления, ТитульныйЛист, "КодУведомления", 1);
					ВывестиДанныеПоБуквенно(СтрокаУведомления.НомерУведомления, ТитульныйЛист, "НомерУведомления", 15);
					ВывестиДанныеПоБуквенно(Формат(СтрокаУведомления.ДатаУведомления, "ДФ=ddMMyyyy"), ТитульныйЛист, "ДатаУведомления", 8);
					ВывестиДанныеПоБуквенно(СтрокаУведомления.КодНалоговогоОрганаУведомления, ТитульныйЛист, "НОУведомления", 4);
				КонецЕсли;
			КонецЦикла;
			
			Если ТабличныйДокументСправки.ВысотаТаблицы > 0 Тогда
				ТабличныйДокументСправки.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;
			ТабличныйДокументСправки.Вывести(ТитульныйЛист);
			
		КонецЦикла;
		
		// Приложение к справке.
		Если ДоходыПоВидам.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;

		ДоходыПоВидам.Сортировать("НомерСправки, Ставка, Месяц, КодДохода, КодВычета Убыв");
		
		ДоходыПоМесяцамИКодам = ДоходыПоВидам.СкопироватьКолонки();
		ДоходыПоМесяцамИКодам.Колонки.Добавить("КодДоходаСтрокой", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(4)));
		
		ДанныеПрошлойСтроки = Новый Структура("НомерСправки, Ставка, Месяц, КодДохода, КодВычета");
		СтрокаВидаДохода = Неопределено;
		СтрокаВидаВычета = Неопределено;
		Для Каждого ДоходСотрудника Из ДоходыПоВидам Цикл
			Если ДоходСотрудника.НомерСправки <> ДанныеПрошлойСтроки.НомерСправки 
				Или ДоходСотрудника.Ставка <> ДанныеПрошлойСтроки.Ставка
				Или ДоходСотрудника.Месяц <> ДанныеПрошлойСтроки.Месяц
				Или ДоходСотрудника.КодДохода <> ДанныеПрошлойСтроки.КодДохода Тогда
				СтрокаВидаДохода = ДоходыПоМесяцамИКодам.Добавить();
				ЗаполнитьЗначенияСвойств(ДанныеПрошлойСтроки, ДоходСотрудника);
				ЗаполнитьЗначенияСвойств(СтрокаВидаДохода, ДоходСотрудника);
				СтрокаВидаДохода.КодДоходаСтрокой = СоответствиеКодовДоходов[СтрокаВидаДохода.КодДохода];
				СтрокаВидаВычета = СтрокаВидаДохода;
			ИначеЕсли ДоходСотрудника.КодВычета <> ДанныеПрошлойСтроки.КодВычета Тогда
				Если ЗначениеЗаполнено(ДоходСотрудника.КодВычета) Тогда
					СтрокаВидаВычета = ДоходыПоМесяцамИКодам.Добавить();
					ЗаполнитьЗначенияСвойств(ДанныеПрошлойСтроки, ДоходСотрудника);
					ЗаполнитьЗначенияСвойств(СтрокаВидаВычета, ДоходСотрудника);
					СтрокаВидаВычета.СуммаДохода = 0;
				КонецЕсли;
				СтрокаВидаДохода.СуммаДохода = СтрокаВидаДохода.СуммаДохода + ДоходСотрудника.СуммаДохода;
			Иначе
				СтрокаВидаДохода.СуммаДохода = СтрокаВидаДохода.СуммаДохода + ДоходСотрудника.СуммаДохода;
				СтрокаВидаВычета.СуммаВычета = СтрокаВидаВычета.СуммаВычета + ДоходСотрудника.СуммаВычета;
			КонецЕсли;
		КонецЦикла;
		ДоходыПоМесяцамИКодам.Сортировать("НомерСправки, Ставка, Месяц, КодДохода, КодВычета");
		
		ДанныеПрошлойСтроки = Новый Структура("НомерСправки, Ставка");
		ИндексДоходаНаЛисте = 0;
		ПриложениеСправки = Неопределено;
		Для Каждого СтрокаДоходов Из ДоходыПоМесяцамИКодам Цикл
			Если СтрокаДоходов.НомерСправки <> ДанныеПрошлойСтроки.НомерСправки 
				Или СтрокаДоходов.Ставка <> ДанныеПрошлойСтроки.Ставка 
				Или ИндексДоходаНаЛисте >= 15 Тогда
				
				Если ПриложениеСправки <> Неопределено Тогда
					Если ТабличныйДокументСправки.ВысотаТаблицы > 0 Тогда
						ТабличныйДокументСправки.ВывестиГоризонтальныйРазделительСтраниц();
					КонецЕсли;
					ТабличныйДокументСправки.Вывести(ПриложениеСправки);
				КонецЕсли;
				ЗаполнитьЗначенияСвойств(ДанныеПрошлойСтроки, СтрокаДоходов);
				
				ПриложениеСправки = МакетСправки.ПолучитьОбласть("Приложение");
				НомерСтраницы = НомерСтраницы + 1;
				ИндексДоходаНаЛисте = 0;
				
				ВывестиДанныеПоБуквенно(СтруктураДанныхНА.ИННорг, ПриложениеСправки, "ПИНН", 12);
				ВывестиДанныеПоБуквенно(СтруктураДанныхНА.КПП, ПриложениеСправки, "ПКПП", 9);
				ВывестиДанныеПоБуквенно(Формат(НомерСтраницы, "ЧЦ=3; ЧВН=; ЧГ="), ПриложениеСправки, "ПСтраница", 3);
				ВывестиЦелоеЧислоВЯчейки(СтрокаДоходов.НомерСправки, ПриложениеСправки, "ПСправка", 7);
				ВывестиДанныеПоБуквенно(Формат(СтруктураДанныхНА.НалоговыйПериод, "ЧЦ=10; ЧДЦ=0; ЧГ=0"), ПриложениеСправки, "ПГод", 4);
				ВывестиДанныеПоБуквенно(ПредставленияСтавокНДФЛ.Получить(СтрокаДоходов.Ставка), ПриложениеСправки, "ПСтавка", 2);
				
			КонецЕсли;
			
			ИндексДоходаНаЛисте = ИндексДоходаНаЛисте + 1;
			ПостфиксИмени = Формат(ИндексДоходаНаЛисте, "ЧЦ=2; ЧВН=");
			
			ИмяЯчейки = "М" + ПостфиксИмени;
			ВывестиДанныеПоБуквенно(Формат(СтрокаДоходов.Месяц, "ЧЦ=2; ЧВН="), ПриложениеСправки, ИмяЯчейки, 2);
			Если СтрокаДоходов.СуммаДохода <> 0 Тогда 
				ИмяЯчейки = "КД" + ПостфиксИмени;
				ВывестиДанныеПоБуквенно(СтрокаДоходов.КодДоходаСтрокой, ПриложениеСправки, ИмяЯчейки, 4);
				ИмяЯчейки = "СД" + ПостфиксИмени;
				ВывестиСуммуВРубляхКопейкахВЯчейки(СтрокаДоходов.СуммаДОхода, ПриложениеСправки, ИмяЯчейки, 17);
			КонецЕсли;
			Если СтрокаДоходов.СуммаВычета <> 0 Тогда
				ИмяЯчейки = "КВ" + ПостфиксИмени;
				ВывестиДанныеПоБуквенно(СтрокаДоходов.КодВычетаСтрокой, ПриложениеСправки, ИмяЯчейки, 3);
				ИмяЯчейки = "СВ" + ПостфиксИмени;
				ВывестиСуммуВРубляхКопейкахВЯчейки(СтрокаДоходов.СуммаВычета, ПриложениеСправки, ИмяЯчейки, 16);
			КонецЕсли;
		КонецЦикла;
		
		Если ТабличныйДокументСправки.ВысотаТаблицы > 0 Тогда
			ТабличныйДокументСправки.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ТабличныйДокументСправки.Вывести(ПриложениеСправки);
		
	КонецЦикла;
	
	Если Отказ Тогда
		ОбработкаКомментариев.ПоказатьСообщения();
		Возврат Неопределено;
	КонецЕсли;	
	
	Возврат ТабличныйДокументСправки

КонецФункции

Процедура ВывестиСуммуВРубляхКопейкахВЯчейки(Данные, ТабличныйДокумент, ПрефиксЯчеек, КоличествоЯчеек)
	ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(Прав("                  " + Формат(Данные, "ЧЦ=" + (КоличествоЯчеек + 1) + "; ЧДЦ=0; ЧС=-2; ЧГ="), КоличествоЯчеек), ТабличныйДокумент, ПрефиксЯчеек, КоличествоЯчеек);
КонецПроцедуры

Процедура ВывестиЦелоеЧислоВЯчейки(Данные, ТабличныйДокумент, ПрефиксЯчеек, КоличествоЯчеек)
	ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(Прав("                  " + Формат(Данные, "ЧЦ=" + (КоличествоЯчеек + 1) + "; ЧДЦ=0; ЧН=0; ЧГ="), КоличествоЯчеек), ТабличныйДокумент, ПрефиксЯчеек, КоличествоЯчеек);
КонецПроцедуры

Процедура ВывестиДанныеПоБуквенно(Данные, ТабличныйДокумент, ПрефиксЯчеек, КоличествоЯчеек, НачальнаяЯчейка = 1)
	ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(ВРег(Данные), ТабличныйДокумент, ПрефиксЯчеек, КоличествоЯчеек, НачальнаяЯчейка)
КонецПроцедуры

Процедура ВывестиНаименованиеНалоговогоАгента(НазваниеАгента, ТабличныйДокумент, ИмяПоказателя, КоличествоСтрок, КоличествоЯчеек)
	
	Если СтрДлина(НазваниеАгента) < КоличествоЯчеек Тогда
		ВывестиДанныеПоБуквенно(НазваниеАгента, ТабличныйДокумент, ИмяПоказателя +"01", КоличествоЯчеек);
	Иначе
		МассивДлинПодстрок = Новый Массив;
		МассивДлинПодстрок.Добавить(КоличествоЯчеек);
		РазграниченнаяСтрока = ОбменСведениямиОПособияхСФСС.РазбитьСтрокуНаПодСтроки(НазваниеАгента, МассивДлинПодстрок);
		Если СтрДлина(РазграниченнаяСтрока) > КоличествоСтрок * КоличествоЯчеек Тогда 
			РазграниченнаяСтрока = НазваниеАгента;
		КонецЕсли;
		
		МассивПодстрок = Новый Массив;
		Для ИндексСтроки = 1 По КоличествоСтрок Цикл
			ЧастьНаименования = Сред(РазграниченнаяСтрока, КоличествоЯчеек*(ИндексСтроки - 1) + 1, КоличествоЯчеек);
			МассивПодстрок.Добавить(СокрЛП(ЧастьНаименования));
		КонецЦикла;
		
		Для ИндексСтроки = 1 По МассивПодстрок.Количество() Цикл
			ЧастьНаименования = МассивПодстрок[ИндексСтроки-1];
			ПрефиксИмени = ИмяПоказателя + Формат(ИндексСтроки, "ЧЦ=2; ЧВН=");
			ВывестиДанныеПоБуквенно(ЧастьНаименования, ТабличныйДокумент, ПрефиксИмени, КоличествоЯчеек);
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Процедура ПроверитьПравильностьЗаполненияДокумента(Отказ) Экспорт
	
	Отказ = Ложь;
	ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
	
	//-----------------------------------------------------------------------------
	// СВЕДЕНИЯ О НАЛОГОВОМ АГЕНТЕ
	
	СтруктураДанныхНА = СправкиПоНДФЛ.ДанныеНалоговогоАгентаДля2НДФЛ(Организация, НалоговыйПериод, "", ОКТМО_КПП, КодИФНС, Дата, Телефон, , СправкуПодписал, Истина);
	СтруктураДанныхНА.Признак = ?(ОснованиеДляПредставленияСправок = Перечисления.ОснованияДляПредставленияСправок2НДФЛ.ОНевозможностиУдержанияНДФЛ,"2","1");
	СправкиПоНДФЛ.ПроверитьОбщиеДанныеСправки(СтруктураДанныхНА, Отказ, ОбработкаКомментариев, Истина, Ложь);
	
	Если ОснованиеДляПредставленияСправок = Перечисления.ОснованияДляПредставленияСправок2НДФЛ.ОНевозможностиУдержанияНДФЛЗаРеорганизованнуюОрганизацию Или ОснованиеДляПредставленияСправок = Перечисления.ОснованияДляПредставленияСправок2НДФЛ.ЕжегоднаяОтчетностьЗаРеорганизованнуюОрганизацию Тогда
		Если Не ЗначениеЗаполнено(ФормаРеорганизации) Тогда
			ОбработкаКомментариев.ДобавитьСообщение("Не указан код формы реорганизации!", Перечисления.ВидыСообщений.Ошибка);
		КонецЕсли;
		Если Не ЗначениеЗаполнено(НаименованиеРеорганизованнойОрганизации) Тогда
			ОбработкаКомментариев.ДобавитьСообщение("Не указано наименование реорганизованной организации!", Перечисления.ВидыСообщений.Ошибка);
		КонецЕсли;
		Если ФормаРеорганизации <> "0" Тогда
			Если Не ЗначениеЗаполнено(ИННРеорганизованнойОрганизации) Тогда
				ОбработкаКомментариев.ДобавитьСообщение("Не указан ИНН реорганизованной организации!", Перечисления.ВидыСообщений.Ошибка);
			ИначеЕсли НЕ РегламентированнаяОтчетность.ИННСоответствуетТребованиям(ИННРеорганизованнойОрганизации, Истина) Тогда
				ОбработкаКомментариев.ДобавитьСообщение("Неверно указан ИНН реорганизованной организации!", Перечисления.ВидыСообщений.Ошибка);
			КонецЕсли;
			Если Не ЗначениеЗаполнено(КППРеорганизованнойОрганизации) Тогда
				ОбработкаКомментариев.ДобавитьСообщение("Не указан КПП реорганизованной организации!", Перечисления.ВидыСообщений.Ошибка);
			ИначеЕсли НЕ РегламентированнаяОтчетность.КППСоответствуетТребованиям(КППРеорганизованнойОрганизации) Тогда
				ОбработкаКомментариев.ДобавитьСообщение("Неверно указан КПП реорганизованной организации!", Перечисления.ВидыСообщений.Ошибка);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	//-----------------------------------------------------------------------------
	// СВЕДЕНИЯ О НАЛОГОПЛАТЕЛЬЩИКАХ
	
	СоответствиеКодовСтран = Новый Соответствие;
	СоответствиеИменСтран = Новый Соответствие;
	СоответствиеДокументовУдостоверяющиеЛичность = Новый Соответствие;
	СоответствиеСтавокДоходов = Новый Соответствие;
	СправкиПоНДФЛ.ПрочитатьКлассификаторыВСоответствия(НалоговыйПериод, СоответствиеКодовСтран, СоответствиеИменСтран, СоответствиеДокументовУдостоверяющиеЛичность, , , ,СоответствиеСтавокДоходов);
	
	СтруктураОтбора = Новый Структура("НомерСправки");
	СведенияОДоходахИВычетах = СправкиПоНДФЛПолныеПрава.СведенияОДоходахИВычетахДокумента(Ссылка);
	
	Для каждого СтрокаДанных Из СотрудникиОрганизации Цикл 
		
		ЗаполнитьЗначенияСвойств(СтруктураОтбора, СтрокаДанных);
		ДоходыПоВидам = СведенияОДоходахИВычетах.СведенияОДоходах.Скопировать(СтруктураОтбора);
		ВычетыПоВидам = СведенияОДоходахИВычетах.СведенияОВычетах.Скопировать(СтруктураОтбора);
		Итоги = СуммыНалогов.Выгрузить(СуммыНалогов.НайтиСтроки(СтруктураОтбора));
		
		// Проверка корректности выводимых данных
		СправкиПоНДФЛ.ПроверитьДанныеСотрудника(НалоговыйПериод, СтруктураДанныхНА.Признак, СтрокаДанных, ДоходыПоВидам, ВычетыПоВидам, Итоги, Дата, Отказ, ОбработкаКомментариев, СоответствиеДокументовУдостоверяющиеЛичность, СоответствиеИменСтран, СоответствиеСтавокДоходов, НомерКорректировки);
		
	КонецЦикла;
	
КонецПроцедуры // ПроверитьПравильностьЗаполненияДокумента()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Функция Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт
	
	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Получить экземпляр документа на печать
	Если ИмяМакета = "Справка" Тогда
		Если СправкиПоНДФЛ.ВыводитьФорму2НДФЛ2019Года(НалоговыйПериод, Дата) Тогда
			ТабДокумент = СформироватьПечатнуюФорму2НДФЛ2019Года();
		Иначе
			ТабДокумент = СформироватьПечатнуюФорму2НДФЛДляСотрудника();
		КонецЕсли;
		Возврат УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначенияЗК.СформироватьЗаголовокДокумента(ЭтотОбъект,"Справка 2-НДФЛ для передачи в ИФНС "));
	ИначеЕсли ИмяМакета = "СправкаСотруднику" Тогда	
		ТабДокумент = СформироватьПечатнуюФорму2НДФЛДляСотрудника();
		Возврат УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначенияЗК.СформироватьЗаголовокДокумента(ЭтотОбъект,"Справка 2-НДФЛ для сотрудника "));
	ИначеЕсли Найти(ИмяМакета, "Реестр") > 0 Тогда
		ТабДокумент = ПечатьРеестра(ИмяМакета);
		Возврат УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначенияЗК.СформироватьЗаголовокДокумента(ЭтотОбъект,"Реестр справок о доходах (2-НДФЛ) "));
	КонецЕсли;
	
	Возврат Неопределено
	
КонецФункции // Печать

// Формирует файл, который можно будет записать на дискетку
//
// Параметры: 
//  Нет
//
// Возвращаемое значение:
//  Строка - содержимое файла
//
Функция СформироватьВыходнойФайл(Отказ) Экспорт
	
	// здесь поддерживаем формирование сведений в соответствии с Приказом ФНС России от 17.11.2010 № ММВ-7-3/611@ 
	ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
	ОбработкаКомментариев.УдалитьСообщения();
	
	Отказ = Ложь;
	
	СоответствиеКодовСтран = Новый Соответствие;
	СоответствиеИменСтран = Новый Соответствие;
	СоответствиеДокументовУдостоверяющиеЛичность = Новый Соответствие;
	СоответствиеКодовРегионов = Новый Соответствие;
	СоответствиеСтавок = Новый Соответствие;
	СоответствиеКодовДоходов = Новый Соответствие;
	СоответствиеСтавокДоходов = Новый Соответствие;
	СправкиПоНДФЛ.ПрочитатьКлассификаторыВСоответствия(НалоговыйПериод, СоответствиеКодовСтран, СоответствиеИменСтран, СоответствиеДокументовУдостоверяющиеЛичность, СоответствиеКодовРегионов, СоответствиеКодовДоходов, , СоответствиеСтавокДоходов);
	
	СоответствиеСтавок[Перечисления.НДФЛСтавки.Ставка09] = 9;
	СоответствиеСтавок[Перечисления.НДФЛСтавки.Ставка13] = 13;
	СоответствиеСтавок[Перечисления.НДФЛСтавки.Ставка15] = 15;
	СоответствиеСтавок[Перечисления.НДФЛСтавки.Ставка30] = 30;
	СоответствиеСтавок[Перечисления.НДФЛСтавки.Ставка35] = 35;
	
	Если СправкиПоНДФЛ.ВыводитьФорму2НДФЛ2019Года(НалоговыйПериод, Дата) Тогда
		СтрокаXML = Файл2019(Отказ, СоответствиеКодовСтран, СоответствиеИменСтран, СоответствиеДокументовУдостоверяющиеЛичность, СоответствиеКодовРегионов, СоответствиеСтавок, СоответствиеКодовДоходов, СоответствиеСтавокДоходов);
	ИначеЕсли СправкиПоНДФЛ.ВыводитьФорму2НДФЛ2018Года(НалоговыйПериод, Дата) Тогда
		СтрокаXML = Файл2018(Отказ, СоответствиеКодовСтран, СоответствиеИменСтран, СоответствиеДокументовУдостоверяющиеЛичность, СоответствиеКодовРегионов, СоответствиеСтавок, СоответствиеКодовДоходов, СоответствиеСтавокДоходов);
	Иначе
		СтрокаXML = Файл2015(Отказ, СоответствиеКодовСтран, СоответствиеИменСтран, СоответствиеДокументовУдостоверяющиеЛичность, СоответствиеКодовРегионов, СоответствиеСтавок, СоответствиеКодовДоходов, СоответствиеСтавокДоходов);
	КонецЕсли;
	
	Если Отказ Тогда
		ОбработкаКомментариев.ПоказатьСообщения();
		Возврат ""	
	КонецЕсли;
	
	Возврат СтрокаXML
	
КонецФункции // СформироватьВыходнойФайл()

#КонецЕсли

// Заполняет табличную часть документа физлицами, получавшими доходы
//
// Параметры
//   нет
//
Процедура Автозаполнение() Экспорт

	// Рассчитаем номер первой справки о доходах
	НомерПервойСправки = СправкиПоНДФЛ.НомерПервойСправки(Организация, НалоговыйПериод, Дата, Ссылка);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаДокумента",Дата);
	Запрос.УстановитьПараметр("Организация",Организация);
	Запрос.УстановитьПараметр("ГодНП",НалоговыйПериод);
	Запрос.УстановитьПараметр("КонецНП",КонецГода(Дата(НалоговыйПериод,1,1)));
	Запрос.УстановитьПараметр("НачалоНП",Дата(НалоговыйПериод,1,1));
	Запрос.УстановитьПараметр("ДатаПодачиСведений", НачалоМесяца(Дата));
	Запрос.УстановитьПараметр("КодПоОКТМО", СправкиПоНДФЛ.КодОКАТОизСуммыОКАТОиКПП(ОКТМО_КПП));
	Запрос.УстановитьПараметр("КПП", СправкиПоНДФЛ.КППизСуммыОКАТОиКПП(ОКТМО_КПП));
	Запрос.УстановитьПараметр("ОКТМО_КПП", ОКТМО_КПП);
	Запрос.УстановитьПараметр("ПустойКодПоОКАТО","");
	Запрос.УстановитьПараметр("ПустойКодПоОКТМО","");
	Запрос.УстановитьПараметр("ПустойКПП","");
	
	ТекстЗапроса =  
	"ВЫБРАТЬ ПЕРВЫЕ 3000
	|	НДФЛСведенияОДоходах.ФизЛицо КАК Сотрудник
	|ИЗ
	|	РегистрНакопления.НДФЛСведенияОДоходах КАК НДФЛСведенияОДоходах
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СправкаПоНДФЛВНалоговыйОрганС2015.СотрудникиОрганизации КАК СправкаПоНДФЛВНалоговыйОрганСотрудникиОрганизации
	|		ПО НДФЛСведенияОДоходах.ФизЛицо = СправкаПоНДФЛВНалоговыйОрганСотрудникиОрганизации.Сотрудник
	|			И (СправкаПоНДФЛВНалоговыйОрганСотрудникиОрганизации.Ссылка.Дата < &ДатаДокумента)
	|			И (СправкаПоНДФЛВНалоговыйОрганСотрудникиОрганизации.Ссылка.Проведен)
	|			И (СправкаПоНДФЛВНалоговыйОрганСотрудникиОрганизации.Ссылка.Организация = &Организация)
	|			И (СправкаПоНДФЛВНалоговыйОрганСотрудникиОрганизации.Ссылка.НалоговыйПериод = &ГодНП)
	|			И (СправкаПоНДФЛВНалоговыйОрганСотрудникиОрганизации.Ссылка.ОКТМО_КПП = &ОКТМО_КПП)
	|			И (СправкаПоНДФЛВНалоговыйОрганСотрудникиОрганизации.Ссылка <> &Ссылка)
	|			И (СправкаПоНДФЛВНалоговыйОрганСотрудникиОрганизации.Ссылка.ОснованиеДляПредставленияСправок = ЗНАЧЕНИЕ(Перечисление.ОснованияДляПредставленияСправок2НДФЛ.ЕжегоднаяОтчетность)
	|				ИЛИ СправкаПоНДФЛВНалоговыйОрганСотрудникиОрганизации.Ссылка.ОснованиеДляПредставленияСправок = ЗНАЧЕНИЕ(Перечисление.ОснованияДляПредставленияСправок2НДФЛ.ЕжегоднаяОтчетностьЗаРеорганизованнуюОрганизацию))
	|ГДЕ
	|	НДФЛСведенияОДоходах.ОбособленноеПодразделение = &Организация
	|	И НДФЛСведенияОДоходах.Период МЕЖДУ &НачалоНП И &КонецНП
	|	И НДФЛСведенияОДоходах.ПериодРегистрации < &ДатаПодачиСведений
	|	И ВЫБОР
	|			КОГДА НДФЛСведенияОДоходах.КодПоОКТМО <> &ПустойКодПоОКТМО
	|				ТОГДА НДФЛСведенияОДоходах.КодПоОКТМО
	|			КОГДА ЕСТЬNULL(НДФЛСведенияОДоходах.ПодразделениеОрганизации.КодПоОКТМО, &ПустойКодПоОКТМО) <> &ПустойКодПоОКТМО
	|				ТОГДА НДФЛСведенияОДоходах.ПодразделениеОрганизации.КодПоОКТМО
	|			ИНАЧЕ ЕСТЬNULL(НДФЛСведенияОДоходах.ОбособленноеПодразделение.КодПоОКТМО, &ПустойКодПоОКТМО)
	|		КОНЕЦ = &КодПоОКТМО
	|	И ВЫБОР
	|			КОГДА НДФЛСведенияОДоходах.КПП <> &ПустойКПП
	|				ТОГДА НДФЛСведенияОДоходах.КПП
	|			КОГДА ЕСТЬNULL(НДФЛСведенияОДоходах.ПодразделениеОрганизации.КПП, &ПустойКПП) <> &ПустойКПП
	|				ТОГДА НДФЛСведенияОДоходах.ПодразделениеОрганизации.КПП
	|			ИНАЧЕ ЕСТЬNULL(НДФЛСведенияОДоходах.ОбособленноеПодразделение.КПП, &ПустойКПП)
	|		КОНЕЦ = &КПП
	|	И СправкаПоНДФЛВНалоговыйОрганСотрудникиОрганизации.Сотрудник ЕСТЬ NULL 
	|	И НЕ НДФЛСведенияОДоходах.ВключатьВДекларациюПоНалогуНаПрибыль
	|
	|СГРУППИРОВАТЬ ПО
	|	НДФЛСведенияОДоходах.ФизЛицо
	|
	|ИМЕЮЩИЕ
	|	СУММА(НДФЛСведенияОДоходах.СуммаДохода) <> 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	НДФЛСведенияОДоходах.ФизЛицо.Наименование";

	Если ЭтоНовый() Тогда
		Запрос.Текст = СтрЗаменить(ТекстЗапроса,"И (СправкаПоНДФЛВНалоговыйОрганСотрудникиОрганизации.Ссылка <> &Ссылка)",""); 
	Иначе
		Запрос.УстановитьПараметр("Ссылка",Ссылка);
		Запрос.Текст = ТекстЗапроса;
	КонецЕсли;
	Если СправкиПоНДФЛ.ВыводитьФорму2НДФЛ2019Года(НалоговыйПериод, Дата) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПЕРВЫЕ 3000", "");
	КонецЕсли;
	
	СотрудникиОрганизации.Загрузить(СправкиПоНДФЛ.ДанныеСотрудников(Запрос.Выполнить().Выгрузить(), Дата, НалоговыйПериод));
	Для каждого СтрокаТЧ Из СотрудникиОрганизации Цикл
		СтрокаТЧ.НомерСправки = НомерПервойСправки + СотрудникиОрганизации.Индекс(СтрокаТЧ)
	КонецЦикла;
	СтруктураДанных = СправкиПоНДФЛ.ДанныеОДоходах(СотрудникиОрганизации.Выгрузить(), НалоговыйПериод, Организация, ОбщегоНазначенияЗК.ГоловнаяОрганизация(Организация), ОКТМО_КПП, НачалоМесяца(Дата), Истина, Истина);
	
	мЗаписиОВычетах = РегистрыСведений.СправкиНДФЛДляИФНССведенияОВычетах.СоздатьНаборЗаписей();
	мЗаписиОВычетах.Загрузить(СтруктураДанных.Вычеты);
	мЗаписиОДоходах = РегистрыСведений.СправкиНДФЛДляИФНССведенияОДоходах.СоздатьНаборЗаписей();
	мЗаписиОДоходах.Загрузить(СтруктураДанных.Доходы);
	
	ТаблицаИтогов = СтруктураДанных.Итоги;
	СуммыНалогов.Загрузить(ТаблицаИтогов);
	СтруктураПоиска = Новый Структура("НомерСправки");
	РеквизитыУведомления = СправкиПоНДФЛ.РеквизитыУведомлений(НалоговыйПериод);
	Для каждого СтрокаТЧ Из СотрудникиОрганизации Цикл
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаТЧ);
		СтрокиИтогов = ТаблицаИтогов.НайтиСтроки(СтруктураПоиска);
		Если СтрокиИтогов.Количество() > 0 Тогда
			ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтрокиИтогов[0], РеквизитыУведомления);
			СправкиПоНДФЛ.УточнитьСтатусРаботающегоПоПатенту(НалоговыйПериод, СтрокиИтогов, СтрокаТЧ);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // Автозаполнение()

// Пронумеровывает справки о доходах с учетом уже зафиксированных в ИБ
//
// Параметры
//   нет
//
Процедура ПронумероватьСправки() Экспорт 

	// Рассчитаем номер первой справки о доходах
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаДокумента",Дата);
	Запрос.УстановитьПараметр("НалоговыйПериод",НалоговыйПериод);
	Запрос.УстановитьПараметр("Организация",Организация);
	Запрос.Текст =  
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(СведенияОДоходахФизлицРаботникиОрганизации.НомерСтроки) КАК КоличествоСформированныхСправок
	|ПОМЕСТИТЬ ВТСтарыеСправки
	|ИЗ
	|	Документ.СправкаПоНДФЛВНалоговыйОрган.СотрудникиОрганизации КАК СведенияОДоходахФизлицРаботникиОрганизации
	|ГДЕ
	|	СведенияОДоходахФизлицРаботникиОрганизации.Ссылка.Дата < &ДатаДокумента
	|	И СведенияОДоходахФизлицРаботникиОрганизации.Ссылка.Проведен
	|	И СведенияОДоходахФизлицРаботникиОрганизации.Ссылка.Организация = &Организация
	|	И СведенияОДоходахФизлицРаботникиОрганизации.Ссылка.НалоговыйПериод = &НалоговыйПериод
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(СправкаПоНДФЛВНалоговыйОрганС2015СотрудникиОрганизации.НомерСтроки) КАК КоличествоСформированныхСправок
	|ПОМЕСТИТЬ ВТНовыеСправки
	|ИЗ
	|	Документ.СправкаПоНДФЛВНалоговыйОрганС2015.СотрудникиОрганизации КАК СправкаПоНДФЛВНалоговыйОрганС2015СотрудникиОрганизации
	|ГДЕ
	|	СправкаПоНДФЛВНалоговыйОрганС2015СотрудникиОрганизации.Ссылка.Дата < &ДатаДокумента
	|	И СправкаПоНДФЛВНалоговыйОрганС2015СотрудникиОрганизации.Ссылка.Проведен
	|	И СправкаПоНДФЛВНалоговыйОрганС2015СотрудникиОрганизации.Ссылка.Организация = &Организация
	|	И СправкаПоНДФЛВНалоговыйОрганС2015СотрудникиОрганизации.Ссылка.НалоговыйПериод = &НалоговыйПериод
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	1 КАК УвеличениеНомера
	|ПОМЕСТИТЬ ВТОднаСтрока
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОднаСтрока.УвеличениеНомера + ЕСТЬNULL(СтарыеСправки.КоличествоСформированныхСправок, 0) + ЕСТЬNULL(НовыеСправки.КоличествоСформированныхСправок, 0) КАК НомерОчереднойСправки
	|ИЗ
	|	ВТОднаСтрока КАК ОднаСтрока
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСтарыеСправки КАК СтарыеСправки
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНовыеСправки КАК НовыеСправки
	|		ПО (ИСТИНА)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() тогда
		НомерПервойСправки = Выборка.НомерОчереднойСправки;
	Иначе	
		НомерПервойСправки = 1;
	КонецЕсли;  
	
	СведенияОДоходахИВычетах = СправкиПоНДФЛПолныеПрава.СведенияОДоходахИВычетахДокумента(Ссылка);
	
	СправкиПоНДФЛ.ПеренумероватьСправкиДокумента2019(ЭтотОбъект, НомерПервойСправки, СведенияОДоходахИВычетах.СведенияОДоходах, СведенияОДоходахИВычетах.СведенияОВычетах);
	
	мЗаписиОВычетах = РегистрыСведений.СправкиНДФЛДляИФНССведенияОВычетах.СоздатьНаборЗаписей();
	мЗаписиОВычетах.Загрузить(СведенияОДоходахИВычетах.СведенияОВычетах);
	мЗаписиОДоходах = РегистрыСведений.СправкиНДФЛДляИФНССведенияОДоходах.СоздатьНаборЗаписей();
	мЗаписиОДоходах.Загрузить(СведенияОДоходахИВычетах.СведенияОДоходах);
	
КонецПроцедуры

// Переписывает номер справки (являющийся ключом соответствия т.ч. документов)
// в логически подчиненных т.ч.
//
// Параметры
// 	СтарыйНомерСправки, НовыйНомерСправки - Число, номера справок
// 	ТабличнаяЧасть - табличная часть документа
//
Процедура ПроставитьНовыйНомерСправки(СтарыйНомерСправки, НовыйНомерСправки, ТабличнаяЧасть) Экспорт

    Для каждого СтрокаТЧ Из ТабличнаяЧасть.НайтиСтроки(Новый Структура("НомерСправки",СтарыйНомерСправки)) Цикл
		СтрокаТЧ.НомерСправки = НовыйНомерСправки
	КонецЦикла;
	
КонецПроцедуры

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	СтруктураПечатныхФорм = Новый Структура;
	СтруктураПечатныхФорм.Вставить("Справка", "2-НДФЛ");
	СтруктураПечатныхФорм.Вставить("СправкаСотруднику", "2-НДФЛ для сотрудника");
	СтруктураПечатныхФорм.Вставить("Реестр2019", "Реестр справок с 2019 г.");
	СтруктураПечатныхФорм.Вставить("Реестр2015", "Реестр справок с 2014 г.");
	СтруктураПечатныхФорм.Вставить("Реестр2015Дополнительный", "Реестр справок(доп. форма с 2014 г.)");
	
	Возврат СтруктураПечатныхФорм;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Формирует запрос по шапке документа
//
// Параметры: 
//  нет
//
// Возвращаемое значение:
//  Результат запроса
//
Функция СформироватьЗапросПоШапке()

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка" , Ссылка);

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СправкаПоНДФЛВНалоговыйОрган.Дата,
	|	СправкаПоНДФЛВНалоговыйОрган.Ссылка,
	|	СправкаПоНДФЛВНалоговыйОрган.Организация,
	|	ВЫБОР
	|		КОГДА СправкаПоНДФЛВНалоговыйОрган.Организация.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА СправкаПоНДФЛВНалоговыйОрган.Организация
	|		ИНАЧЕ СправкаПоНДФЛВНалоговыйОрган.Организация.ГоловнаяОрганизация
	|	КОНЕЦ КАК ГоловнаяОрганизация,
	|	СправкаПоНДФЛВНалоговыйОрган.НалоговыйПериод,
	|	"""" КАК ОКАТО_КПП,
	|	СправкаПоНДФЛВНалоговыйОрган.ОКТМО_КПП,
	|	СправкаПоНДФЛВНалоговыйОрган.ОснованиеДляПредставленияСправок,
	|	СправкаПоНДФЛВНалоговыйОрган.СправкуПодписал,
	|	СправкаПоНДФЛВНалоговыйОрган.ДолжностьПодписавшегоЛица,
	|	СправкаПоНДФЛВНалоговыйОрган.НомерКорректировки
	|ИЗ
	|	Документ.СправкаПоНДФЛВНалоговыйОрганС2015 КАК СправкаПоНДФЛВНалоговыйОрган
	|ГДЕ
	|	СправкаПоНДФЛВНалоговыйОрган.Ссылка = &ДокументСсылка";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоШапке()

// Формирует запрос по табличной части документам
//
// Параметры: 
//  Режим        - режим проведения.
//
// Возвращаемое значение:
//  Результат запроса.
//
Функция СформироватьЗапросПоРаботникиОрганизации(ВыборкаПоШапкеДокумента)
	
	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка" , Ссылка);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СправкаПоНДФЛВНалоговыйОрганРаботникиОрганизации.НомерСтроки,
	|	СправкаПоНДФЛВНалоговыйОрганРаботникиОрганизации.НомерСправки,
	|	СправкаПоНДФЛВНалоговыйОрганРаботникиОрганизации.Сотрудник
	|ПОМЕСТИТЬ ВТДанныеДляПроверки
	|ИЗ
	|	Документ.СправкаПоНДФЛВНалоговыйОрганС2015.СотрудникиОрганизации КАК СправкаПоНДФЛВНалоговыйОрганРаботникиОрганизации
	|ГДЕ
	|	СправкаПоНДФЛВНалоговыйОрганРаботникиОрганизации.Ссылка = &ДокументСсылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СправкаПоНДФЛВНалоговыйОрганРаботникиОрганизации.НомерСправки,
	|	ВЫБОР
	|		КОГДА СправкаПоНДФЛВНалоговыйОрганРаботникиОрганизации.Ставка = ЗНАЧЕНИЕ(Перечисление.НДФЛСтавки.Ставка13)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.НДФЛСтавкиНалогообложенияРезидента.Ставка13)
	|		КОГДА СправкаПоНДФЛВНалоговыйОрганРаботникиОрганизации.Ставка = ЗНАЧЕНИЕ(Перечисление.НДФЛСтавки.Ставка30)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.НДФЛСтавкиНалогообложенияРезидента.Ставка13)
	|		КОГДА СправкаПоНДФЛВНалоговыйОрганРаботникиОрганизации.Ставка = ЗНАЧЕНИЕ(Перечисление.НДФЛСтавки.Ставка09)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.НДФЛСтавкиНалогообложенияРезидента.Ставка09)
	|		КОГДА СправкаПоНДФЛВНалоговыйОрганРаботникиОрганизации.Ставка = ЗНАЧЕНИЕ(Перечисление.НДФЛСтавки.Ставка15)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.НДФЛСтавкиНалогообложенияРезидента.Ставка09)
	|		КОГДА СправкаПоНДФЛВНалоговыйОрганРаботникиОрганизации.Ставка = ЗНАЧЕНИЕ(Перечисление.НДФЛСтавки.Ставка35)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.НДФЛСтавкиНалогообложенияРезидента.Ставка35)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.НДФЛСтавкиНалогообложенияРезидента.ПустаяСсылка)
	|	КОНЕЦ КАК СтавкаНалогообложенияРезидента,
	|	СправкаПоНДФЛВНалоговыйОрганРаботникиОрганизации.Ставка,
	|	СправкаПоНДФЛВНалоговыйОрганРаботникиОрганизации.Задолженность
	|ПОМЕСТИТЬ ВТДанныеДокумента
	|ИЗ
	|	Документ.СправкаПоНДФЛВНалоговыйОрганС2015.СуммыНалогов КАК СправкаПоНДФЛВНалоговыйОрганРаботникиОрганизации
	|ГДЕ
	|	СправкаПоНДФЛВНалоговыйОрганРаботникиОрганизации.Ссылка = &ДокументСсылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СправкаПоНДФЛВНалоговыйОрганРаботникиОрганизации.НомерСтроки,
	|	СправкаПоНДФЛВНалоговыйОрганРаботникиОрганизации.НомерСправки,
	|	СправкаПоНДФЛВНалоговыйОрганРаботникиОрганизации.Сотрудник,
	|	МИНИМУМ(ПовторяющиесяНомераСправок.НомерСтроки) КАК НомерСтрокиПовторяющегосяНомераСправки,
	|	ВЫБОР
	|		КОГДА МИНИМУМ(ПовторяющиесяНомераСправок.НомерСтроки) ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЕстьПовторяющиесяНомераСправок,
	|	МИНИМУМ(ПовторяющиесяСправки.НомерСтроки) КАК НомерСтрокиПовторяющейсяСправки,
	|	ВЫБОР
	|		КОГДА МИНИМУМ(ПовторяющиесяСправки.НомерСтроки) ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЕстьПовторяющиесяСправки,
	|	ДанныеДокумента.Ставка,
	|	ДанныеДокумента.СтавкаНалогообложенияРезидента,
	|	ДанныеДокумента.Задолженность
	|ИЗ
	|	ВТДанныеДляПроверки КАК СправкаПоНДФЛВНалоговыйОрганРаботникиОрганизации
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеДляПроверки КАК ПовторяющиесяНомераСправок
	|		ПО СправкаПоНДФЛВНалоговыйОрганРаботникиОрганизации.НомерСтроки < ПовторяющиесяНомераСправок.НомерСтроки
	|			И СправкаПоНДФЛВНалоговыйОрганРаботникиОрганизации.НомерСправки = ПовторяющиесяНомераСправок.НомерСправки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеДляПроверки КАК ПовторяющиесяСправки
	|		ПО СправкаПоНДФЛВНалоговыйОрганРаботникиОрганизации.НомерСтроки < ПовторяющиесяСправки.НомерСтроки
	|			И СправкаПоНДФЛВНалоговыйОрганРаботникиОрганизации.Сотрудник = ПовторяющиесяСправки.Сотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеДокумента КАК ДанныеДокумента
	|		ПО СправкаПоНДФЛВНалоговыйОрганРаботникиОрганизации.НомерСправки = ДанныеДокумента.НомерСправки
	|
	|СГРУППИРОВАТЬ ПО
	|	СправкаПоНДФЛВНалоговыйОрганРаботникиОрганизации.НомерСтроки,
	|	СправкаПоНДФЛВНалоговыйОрганРаботникиОрганизации.Сотрудник,
	|	СправкаПоНДФЛВНалоговыйОрганРаботникиОрганизации.НомерСправки,
	|	ДанныеДокумента.Ставка,
	|	ДанныеДокумента.СтавкаНалогообложенияРезидента,
	|	ДанныеДокумента.Задолженность";
		
	Возврат Запрос.Выполнить();
	
КонецФункции // СформироватьЗапросПоРаботникиОрганизации()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по шапке,
// все проверяемые реквизиты должны быть включены в выборку по шапке.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента	- выборка из результата запроса по шапке документа,
//  Отказ 		 - флаг отказа в проведении,
//	Заголовок	 - Заголовок для сообщений об ошибках проведения.
//
Процедура ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок)

	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Организация) Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(ОбщегоНазначенияЗК.ПреобразоватьСтрокуИнтерфейса("Не указана организация!"), Отказ, Заголовок);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.НалоговыйПериод) Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Не указан налоговый период, за который подаются сведения!", Отказ, Заголовок);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтрЗаменить(ВыборкаПоШапкеДокумента.ОКТМО_КПП, "/","")) Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Не указан код по ОКТМО, по которому подаются сведения!", Отказ, Заголовок);
	Иначе
		
		Если СтрДлина(СправкиПоНДФЛ.КодОКАТОизСуммыОКАТОиКПП(ВыборкаПоШапкеДокумента.ОКТМО_КПП)) < 8 Тогда
			ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Неверно указан код по ОКТМО!", Отказ, Заголовок);
		КонецЕсли;
		Если ОбщегоНазначенияЗКПереопределяемый.ЭтоЮрЛицо(ВыборкаПоШапкеДокумента.Организация) Тогда
			КПП = СправкиПоНДФЛ.КППизСуммыОКАТОиКПП(ВыборкаПоШапкеДокумента.ОКТМО_КПП);
			Если НЕ ЗначениеЗаполнено(КПП) Тогда
				ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Не указан КПП!", Отказ, Заголовок);
			ИначеЕсли СтрДлина(СокрЛП(КПП)) <> 9 Тогда
				ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Неверно указан КПП!", Отказ, Заголовок);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ОснованиеДляПредставленияСправок) Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Не указан вид справок!", Отказ, Заголовок);
	КонецЕсли;
	
	Если СтрДлина(СокрЛП(ИмяФайла)) < 50 Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Неверно указано имя файла!", Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения строки документа.
Процедура ПроверитьЗаполнениеСтрокиРаботникиОрганизации(ВыборкаПоШапкеДокумента,ВыборкаПоРаботникиОрганизации, Отказ, Заголовок)

	НачалоСообщения = "В строке № """+ СокрЛП(ВыборкаПоРаботникиОрганизации.НомерСтроки) +
								""" табл. части ""Сотрудники организации"": ";
									
	Если Не ЗначениеЗаполнено(ВыборкаПоРаботникиОрганизации.Сотрудник) Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(НачалоСообщения + "не указано физическое лицо!", Отказ, Заголовок);
	ИначеЕсли ВыборкаПоРаботникиОрганизации.ЕстьПовторяющиесяСправки Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(НачалоСообщения + "справка повторяется в другой строке документа (" + ВыборкаПоРаботникиОрганизации.НомерСтрокиПовторяющейсяСправки + ")!", Отказ, Заголовок);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВыборкаПоРаботникиОрганизации.НомерСправки) Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(НачалоСообщения + "не указан номер справки!", Отказ, Заголовок);
	ИначеЕсли ВыборкаПоРаботникиОрганизации.ЕстьПовторяющиесяНомераСправок Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(НачалоСообщения + "номер справки повторяется в другой строке документа (" + ВыборкаПоРаботникиОрганизации.НомерСтрокиПовторяющегосяНомераСправки + ")!", Отказ, Заголовок);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВыборкаПоРаботникиОрганизации.Ставка) Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(НачалоСообщения + "не указана ставка налогообложения дохода!", Отказ, Заголовок);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВыборкаПоРаботникиОрганизации.Задолженность) И ВыборкаПоШапкеДокумента.ОснованиеДляПредставленияСправок = Перечисления.ОснованияДляПредставленияСправок2НДФЛ.ОНевозможностиУдержанияНДФЛ Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(НачалоСообщения + "не указана передаваемая в налоговый орган задолженность!", Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// По строке выборки результата запроса по документу формируем движения по регистрам
//
// Параметры: 
//  ВыборкаПоШапкеДокумента                  - выборка из результата запроса по шапке документа
//
// Возвращаемое значение:
//  Нет.
//
Процедура ДобавитьСтрокуВДвиженияПоРегистрамНакопления(ВыборкаПоШапкеДокумента, ВыборкаПоТЧ)
	
	// Вычислим дату для заполнения измерения "МесяцНалоговогоПериода"
	КонецНП = Дата(ВыборкаПоШапкеДокумента.НалоговыйПериод, 12 , 31);
	Если Дата < КонецНП Тогда
		МесяцНалоговогоПериода = НачалоМесяца(Дата);
	Иначе	
		МесяцНалоговогоПериода = НачалоМесяца(КонецНП);
	КонецЕсли; 
	
	Движение = Движения.НДФЛРасчетыСБюджетом.Добавить();
	// Свойства
	Движение.Период                 		= Дата;
	Движение.ВидДвижения					= ВидДвиженияНакопления.Расход;
	// Измерения
	Движение.Организация					= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
	Движение.ФизЛицо                		= ВыборкаПоТЧ.Сотрудник;
	Движение.СтавкаНалогообложенияРезидента	= ВыборкаПоТЧ.СтавкаНалогообложенияРезидента;
	Движение.МесяцНалоговогоПериода      	= МесяцНалоговогоПериода;
	// Ресурсы
	Движение.Налог							= ВыборкаПоТЧ.Задолженность; 
	// Реквизиты
	Движение.ОбособленноеПодразделение  	= ВыборкаПоШапкеДокумента.Организация;
	Движение.ВидСтроки						= Перечисления.НДФЛРасчетыСБюджетомВидСтроки.ПереданоНаВзыскание;
	
	Движение.КодПоОКТМО						= СправкиПоНДФЛ.КодОКАТОизСуммыОКАТОиКПП(ВыборкаПоШапкеДокумента.ОКТМО_КПП);
	Движение.КПП							= СправкиПоНДФЛ.КППизСуммыОКАТОиКПП(ВыборкаПоШапкеДокумента.ОКАТО_КПП);
	
	Движение = Движения.РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.Добавить();
	// Свойства
	Движение.Период                 		= Дата;
	Движение.ВидДвижения					= ВидДвиженияНакопления.Приход;
	// Измерения
	Движение.Организация					= ВыборкаПоШапкеДокумента.Организация;
	Движение.ФизЛицо                		= ВыборкаПоТЧ.Сотрудник;
	Движение.Ставка							= ВыборкаПоТЧ.Ставка;
	Движение.МесяцНалоговогоПериода      	= МесяцНалоговогоПериода;
	Движение.ОКТМО_КПП						= ВыборкаПоШапкеДокумента.ОКТМО_КПП;
	// Ресурсы
	Движение.Сумма							= -ВыборкаПоТЧ.Задолженность; 
	
	
КонецПроцедуры // ДобавитьСтрокуВДвиженияПоРегистрамНакопления

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ, Режим)
	
	Если Проведен И ПринятоНалоговымОрганом Тогда
		Возврат
	КонецЕсли;
	
	ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
	ОбработкаКомментариев.УдалитьСообщения();
	
	Для Каждого Набор Из Движения Цикл
		Набор.Очистить();
	КонецЦикла;
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначенияЗК.ПредставлениеДокументаПриПроведении(Ссылка);
	
	ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();

	Если ВыборкаПоШапкеДокумента.Следующий() Тогда

		//Надо позвать проверку заполнения реквизитов шапки
		ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок);

		// Движения стоит добавлять, если в проведении еще не отказано (отказ = ложь)
		Если НЕ Отказ И ВыборкаПоШапкеДокумента.НомерКорректировки = 0 И ВыборкаПоШапкеДокумента.ОснованиеДляПредставленияСправок = Перечисления.ОснованияДляПредставленияСправок2НДФЛ.ОНевозможностиУдержанияНДФЛ Тогда

			// получим реквизиты табличной части
			ВыборкаПоРаботникиОрганизации = СформироватьЗапросПоРаботникиОрганизации(ВыборкаПоШапкеДокумента).Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

			Пока ВыборкаПоРаботникиОрганизации.Следующий() Цикл 

				// проверим очередную строку табличной части
				ПроверитьЗаполнениеСтрокиРаботникиОрганизации(ВыборкаПоШапкеДокумента,ВыборкаПоРаботникиОрганизации, Отказ, Заголовок);
				
				Если Не Отказ Тогда
					// Заполним записи в наборах записей регистров
					ДобавитьСтрокуВДвиженияПоРегистрамНакопления(ВыборкаПоШапкеДокумента, ВыборкаПоРаботникиОрганизации);
				КонецЕсли;

			КонецЦикла;
			
		КонецЕсли; 

	КонецЕсли;
	
	Если Отказ тогда
		ОбработкаКомментариев.ПоказатьСообщения();
		Возврат;
	КонецЕсли;
	
	// ФОРМИРОВАНИЕ ФАЙЛА СВЕДЕНИЙ
	
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		//При проведении файл формируем заново 
		ТекстФайла = СформироватьВыходнойФайл(Отказ);
	#Иначе
		// На сервере и во внешнем соединении документ проводить нельзя
		ТекстФайла = "";
		Отказ = Истина;
	#КонецЕсли
	
	ОбработкаКомментариев.ПоказатьСообщения();
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	//Сохраним сформированный файл сведений в регистре сведений
	Запись = Движения.АрхивДанныхРегламентированнойОтчетности.Добавить();

	Запись.Объект = Ссылка;
	Запись.ОписаниеДанных = "Файл-пачка сведений о доходах физических лиц (формы 2-НДФЛ)";
	Запись.Данные = ТекстФайла;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	МассивТЧ = Новый Массив();
	МассивТЧ.Добавить(СотрудникиОрганизации);
	
	КраткийСоставДокумента = ПроцедурыУправленияПерсоналом.ЗаполнитьКраткийСоставДокумента(МассивТЧ, "Сотрудник");

	Если РежимЗаписи = РежимЗаписиДокумента.Запись И НалоговыйПериод = 0 Тогда // документ без налогового периода неконсистентен
		НалоговыйПериод = Макс(Год(Дата),2015);
	КонецЕсли;
	Если ОснованиеДляПредставленияСправок = Перечисления.ОснованияДляПредставленияСправок2НДФЛ.ОНевозможностиУдержанияНДФЛ Или ОснованиеДляПредставленияСправок = Перечисления.ОснованияДляПредставленияСправок2НДФЛ.ОНевозможностиУдержанияНДФЛЗаРеорганизованнуюОрганизацию Тогда
		Для каждого СтрокаТЧ Из СуммыНалогов Цикл
			СтрокаТЧ.Удержано = 0;
			СтрокаТЧ.ИзлишнеУдержано = 0;
			СтрокаТЧ.Перечислено = 0;
		КонецЦикла;
	КонецЕсли;
	Если ОснованиеДляПредставленияСправок = Перечисления.ОснованияДляПредставленияСправок2НДФЛ.ОНевозможностиУдержанияНДФЛ Или ОснованиеДляПредставленияСправок = Перечисления.ОснованияДляПредставленияСправок2НДФЛ.ЕжегоднаяОтчетность Тогда
		ФормаРеорганизации = "";
		КППРеорганизованнойОрганизации = "";
		ИННРеорганизованнойОрганизации = "";
		НаименованиеРеорганизованнойОрганизации = "";
	КонецЕсли;
	
	ДоходыИВычетыВРегистрах = СправкиПоНДФЛ.ВыводитьФорму2НДФЛ2019Года(НалоговыйПериод, Дата);
	
	Если ДоходыИВычетыВРегистрах Тогда
		Если мЗаписиОВычетах = Неопределено
			И СведенияОВычетах.Количество() > 0 Тогда
			мЗаписиОВычетах = РегистрыСведений.СправкиНДФЛДляИФНССведенияОВычетах.СоздатьНаборЗаписей();
			мЗаписиОВычетах.Загрузить(СведенияОВычетах.Выгрузить());
			СведенияОВычетах.Очистить();
		КонецЕсли;
		Если мЗаписиОДоходах = Неопределено
			И СведенияОДоходах.Количество() > 0 Тогда
			мЗаписиОДоходах = РегистрыСведений.СправкиНДФЛДляИФНССведенияОДоходах.СоздатьНаборЗаписей();
			мЗаписиОДоходах.Загрузить(СведенияОДоходах.Выгрузить());
			СведенияОДоходах.Очистить();
		КонецЕсли;
	КонецЕсли;
	
	Если мЗаписиОВычетах = Неопределено И мЗаписиОДоходах = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	Соответствие = Новый Соответствие;
	Для Каждого СтрокаТЧ Из СотрудникиОрганизации Цикл
		Соответствие.Вставить(СтрокаТЧ.НомерСправки, Истина);
	КонецЦикла;
	Если мЗаписиОВычетах <> Неопределено Тогда
		ВсегоСтрок = мЗаписиОВычетах.Количество();
		Для Сч = 1 По ВсегоСтрок Цикл
			СтрокаТЧ = мЗаписиОВычетах[ВсегоСтрок - Сч];
			Если Соответствие[СтрокаТЧ.НомерСправки] = Неопределено Тогда
				мЗаписиОВычетах.Удалить(СтрокаТЧ)
			КонецЕсли;
		КонецЦикла;
		Если ДоходыИВычетыВРегистрах Тогда
			СведенияОВычетах.Очистить();
		Иначе
			СведенияОВычетах.Загрузить(мЗаписиОВычетах.Выгрузить());
			мЗаписиОВычетах.Очистить();
		КонецЕсли;
	КонецЕсли;
	Если мЗаписиОДоходах <> Неопределено Тогда
		ВсегоСтрок = мЗаписиОДоходах.Количество();
		Для Сч = 1 По ВсегоСтрок Цикл
			СтрокаТЧ = мЗаписиОДоходах[ВсегоСтрок - Сч];
			Если Соответствие[СтрокаТЧ.НомерСправки] = Неопределено Тогда
				мЗаписиОДоходах.Удалить(СтрокаТЧ)
			КонецЕсли;
		КонецЦикла;
		Если ДоходыИВычетыВРегистрах Тогда
			СведенияОДоходах.Очистить();
		Иначе
			СведенияОДоходах.Загрузить(мЗаписиОДоходах.Выгрузить());
			мЗаписиОДоходах.Очистить();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если Отказ Тогда
		Возврат
	КонецЕсли;
	
	Если мЗаписиОВычетах <> Неопределено Тогда
		СправкиПоНДФЛПолныеПрава.ЗаписатьСведенияОДоходахВычетах(мЗаписиОВычетах.Выгрузить(), "СправкиНДФЛДляИФНССведенияОВычетах", Ссылка, Организация);
		мЗаписиОВычетах = Неопределено;
	КонецЕсли;
	Если мЗаписиОДоходах <> Неопределено Тогда
		СправкиПоНДФЛПолныеПрава.ЗаписатьСведенияОДоходахВычетах(мЗаписиОДоходах.Выгрузить(), "СправкиНДФЛДляИФНССведенияОДоходах", Ссылка, Организация);
		мЗаписиОДоходах = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	Отказ = ПринятоНалоговымОрганом;
	Если Не Отказ Тогда
		Для Каждого Набор Из Движения Цикл
			Набор.Очистить();
			Набор.Записать();
		КонецЦикла
	КонецЕсли;
	
КонецПроцедуры // ОбработкаУдаленияПроведения()

Процедура ПриКопировании(ОбъектКопирования)
	СведенияОДоходахИВычетах = СправкиПоНДФЛПолныеПрава.СведенияОДоходахИВычетахДокумента(ОбъектКопирования.Ссылка);
	мЗаписиОВычетах = РегистрыСведений.СправкиНДФЛДляИФНССведенияОВычетах.СоздатьНаборЗаписей();
	мЗаписиОВычетах.Загрузить(СведенияОДоходахИВычетах.СведенияОВычетах);
	мЗаписиОДоходах = РегистрыСведений.СправкиНДФЛДляИФНССведенияОДоходах.СоздатьНаборЗаписей();
	мЗаписиОДоходах.Загрузить(СведенияОДоходахИВычетах.СведенияОДоходах);
КонецПроцедуры

