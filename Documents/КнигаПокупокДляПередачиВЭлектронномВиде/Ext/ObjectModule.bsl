Перем мВалютаРегламентированногоУчета Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Формирует сведения необходимые для сохранения и передачи файла (файлов) электронного
// представления документа.
//
// Возвращаемое значение:
//  ТаблицаЗначений - сведения электронного представления документа, включающие в себя
//                    имя файла(файлов), текст(тексты) и кодировку представления.
//
Функция ЭлектронноеПредставление(УникальныйИдентификатор) Экспорт
	
	Если НалоговыйПериод >= '2017-10-01' Тогда
		Возврат УчетНДСФормированиеОтчетности.ЭлектронноеПредставлениеКнигиПокупок_503(ЭтотОбъект, УникальныйИдентификатор);
	ИначеЕсли НалоговыйПериод >= '2014-10-01' Тогда
		Возврат УчетНДСФормированиеОтчетности.ЭлектронноеПредставлениеКнигиПокупок_502(ЭтотОбъект, УникальныйИдентификатор);
	Иначе
		Возврат УчетНДСФормированиеОтчетности.ЭлектронноеПредставлениеКнигиПокупок_501(ЭтотОбъект, УникальныйИдентификатор);
	КонецЕсли;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ПометкаУдаления ИЛИ ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	Запрос.УстановитьПараметр("Организация",Организация);
	Запрос.УстановитьПараметр("НачалоНалоговогоПериода",НачалоКвартала(НалоговыйПериод));
	Запрос.УстановитьПараметр("КонецНалоговогоПериода",КонецКвартала(НалоговыйПериод));
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Таблица.Ссылка
	|ИЗ
	|	Документ.КнигаПокупокДляПередачиВЭлектронномВиде КАК Таблица
	|ГДЕ
	|	Таблица.Ссылка <> &Ссылка
	|	И Таблица.Организация = &Организация
	|	И Таблица.НалоговыйПериод >= &НачалоНалоговогоПериода
	|	И Таблица.НалоговыйПериод <= &КонецНалоговогоПериода
	|	И НЕ Таблица.ПометкаУдаления";

	Если НЕ Запрос.Выполнить().Пустой() Тогда
		НалоговыйПериодПредставление = ПредставлениеПериода(НачалоКвартала(НалоговыйПериод), КонецКвартала(НалоговыйПериод), "ФП = Истина" );
		Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("Уже имеется оформленная книга покупок за %1",НалоговыйПериодПредставление);
		ОбщегоНазначения.СообщитьОбОшибке(Сообщение);
		Отказ = Истина;		
		Возврат;
	КонецЕсли;	
	
	РассчитатьСуммыДокумента();
	
	ПериодСоставления = НалоговыйПериод;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

#Если Клиент Тогда

Процедура ЗаполнитьДокумент() Экспорт
	
	Если ТабличнаяЧасть.Количество() <> 0 Тогда
		ТабличнаяЧасть.Очистить();
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Организация", 				Организация);
	СтруктураПараметров.Вставить("НачалоПериода", 				НачалоКвартала(НалоговыйПериод));
	СтруктураПараметров.Вставить("КонецПериода", 				КонецКвартала(НалоговыйПериод));
	СтруктураПараметров.Вставить("ФорматПоПостановлению735", 	НалоговыйПериод >= '20141001');
	
	Если НЕ СтруктураПараметров.ФорматПоПостановлению735 Тогда
		СтруктураПараметров.Вставить("ТабличнаяЧасть", ТабличнаяЧасть.ВыгрузитьКолонки());
	КонецЕсли;

	СтруктураПараметров.Вставить("СформироватьОтчетПоСтандартнойФорме", Истина);
	СтруктураПараметров.Вставить("ОтбиратьПоКонтрагенту", 				Ложь);
	СтруктураПараметров.Вставить("КонтрагентДляОтбора");
	СтруктураПараметров.Вставить("ГруппироватьПоКонтрагентам", 			Ложь); 
	СтруктураПараметров.Вставить("ВыводитьПокупателейПоАвансам", 		Ложь);
	СтруктураПараметров.Вставить("ВключатьОбособленныеПодразделения",   Истина);
	СтруктураПараметров.Вставить("ВыводитьТолькоДопЛисты", 				Ложь);
	СтруктураПараметров.Вставить("ФормироватьДополнительныеЛисты", 		Ложь);
	СтруктураПараметров.Вставить("ДополнительныеЛистыЗаТекущийПериод", 	Ложь); 
	СтруктураПараметров.Вставить("ДатаФормированияДопЛиста"); 
	СтруктураПараметров.Вставить("ЗаписьДополнительногоЛиста", 			Ложь);
	СтруктураПараметров.Вставить("СкрытьКолонкиПоСтавке20", 			Ложь);
	СтруктураПараметров.Вставить("ЕстьЗаписиПоКолонке20", 				Ложь);
	
	СтруктураПараметров.Вставить("ЗаполнениеДокумента", 				Истина);
	СтруктураПараметров.Вставить("ЗаполнениеДекларации", 				Ложь);
	СтруктураПараметров.Вставить("ВключатьОбособленныеПодразделения",   Истина);
	СтруктураПараметров.Вставить("СписокСформированныхЛистов",          Новый СписокЗначений());

	СтруктураПараметров.Вставить("ПрефиксыРИБиОрганизации", 
		ОбщегоНазначения.СформироватьМассивПрефиксовДляРИБИОрганизации(Организация));
	СтруктураПараметров.Вставить("ФормироватьТабличныйДокумент", Истина);
	
	АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, Новый УникальныйИдентификатор());
	
	Отчеты.КнигаПокупок1137.СформироватьОтчет(СтруктураПараметров, АдресХранилища);

	СтруктураДанных = ПолучитьИзВременногоХранилища(АдресХранилища);
	Если ТипЗнч(СтруктураДанных) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
		
	Если СтруктураПараметров.ФорматПоПостановлению735 Тогда
		
		ПредставлениеОтчета = Новый ХранилищеЗначения(СтруктураДанных.СписокСформированныхЛистов[0].Значение);
		
		СтруктураДанныхОтчета = Новый Структура("ОбщиеСведения, Записи");
		ЗаполнитьЗначенияСвойств(СтруктураДанныхОтчета, СтруктураДанных);
		ДанныеОтчета = Новый ХранилищеЗначения(СтруктураДанныхОтчета);
		
	Иначе
		
		Если СтруктураДанных.Свойство("ТабличнаяЧасть") Тогда
			ТабличнаяЧасть.Загрузить(СтруктураДанных.ТабличнаяЧасть);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь, НепосредственнаяПечать = Ложь) Экспорт
	
	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	КонецЕсли;
	
	Если НЕ РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	// Получить экземпляр документа на печать
	Если ИмяМакета = "КнигаПокупок" Тогда
		
		ТабДокумент = ПечатьКнигиПокупок();
		
	КонецЕсли;
	
	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()), НепосредственнаяПечать);
	
КонецПроцедуры

Функция ПечатьКнигиПокупок()
	
	УчетнаяПолитикаНУ = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(Дата, Организация);
	
	Если УчетнаяПолитикаНУ = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
		
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_КнигаПокупок";

	ВерсияПостановленияНДС1137 = УчетНДС.ВерсияПостановленияНДС1137(НалоговыйПериод);
	Если ВерсияПостановленияНДС1137 >= 3 Тогда
		ТабличныйДокументПредставление = ПредставлениеОтчета.Получить();
		Если ТабличныйДокументПредставление <> Неопределено Тогда
			 ТабличныйДокумент = ТабличныйДокументПредставление;
		КонецЕсли;
		Возврат ТабличныйДокумент;
	Иначе
		Макет = ПолучитьОбщийМакет("КнигаПокупок1137");
	КонецЕсли; 
		
	ЕстьЗаписиПоКолонке20 = Ложь;	
	
	/////////////////////////////////////////////////////////////////////////
	// Вывод шапки книги покупок
	Секция = Макет.ПолучитьОбласть("ШапкаИнформация");
	ТабличныйДокумент.Вывести(Секция);
		
	Секция = Макет.ПолучитьОбласть("Шапка");
	
	Секция.Параметры.УстановленныйОтбор = "";
	Секция.Параметры.НачалоПериода = Формат(НачалоКвартала(НалоговыйПериод), "ДФ=dd.MM.yyyy");
	Секция.Параметры.КонецПериода = Формат(КонецКвартала(НалоговыйПериод), "ДФ=dd.MM.yyyy");
	
	СведенияОбОрганизации = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Организация, Дата);
	НазваниеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации, "НаименованиеДляПечатныхФорм");
	
	Секция.Параметры.НазваниеОрганизации = НазваниеОрганизации;
	Секция.Параметры.ИННКППОрганизации = "" + Организация.ИНН + ?(НЕ ЗначениеЗаполнено(Организация.КПП), "", ("/" + Организация.КПП));
	
	ТабличныйДокумент.Вывести(Секция);
	// Вывод шапки книги покупок
	/////////////////////////////////////////////////////////////////////////
	
	/////////////////////////////////////////////////////////////////////////
	// Вывод пустой книги покупок, если данных нет
	Если ТабличнаяЧасть.Количество() = 0 Тогда
		
		Секция = Макет.ПолучитьОбласть("Всего");
		ТабличныйДокумент.Вывести(Секция);
		
		/////////////////////////////////////////////////////////////////////////
		// Вывод подвала
		ВывестиПодвал(ТабличныйДокумент, Макет);
		// Вывод подвала
		/////////////////////////////////////////////////////////////////////////
				
		УправлениеОтчетами.УстановитьКолонтитулыПоУмолчанию(ТабличныйДокумент, , Строка(глЗначениеПеременной("глТекущийПользователь")));
		
		Возврат ТабличныйДокумент;
		
	КонецЕсли; 
	// Вывод пустой книги покупок, если данных нет
	/////////////////////////////////////////////////////////////////////////
	
	Секция = Макет.ПолучитьОбласть("Строка");
	
	// Вывод строк
	Для Каждого СтрокаДокумента Из ТабличнаяЧасть Цикл
		
		Секция.Параметры.Заполнить(СтрокаДокумента);
		ТабличныйДокумент.Вывести(Секция);		
		
	КонецЦикла;	
		
    
	// Вывод всего
	Секция = Макет.ПолучитьОбласть("Всего");
	Секция.Параметры.Заполнить(Ссылка);
	
	ТабличныйДокумент.Вывести(Секция);
	
	/////////////////////////////////////////////////////////////////////////
	// Вывод подвала
	ВывестиПодвал(ТабличныйДокумент, Макет);
	// Вывод подвала
	/////////////////////////////////////////////////////////////////////////
	
	/////////////////////////////////////////////////////////////////////////
	// Повтор шапки таблицы на каждой строке
	ТабличныйДокумент.ПовторятьПриПечатиСтроки = ТабличныйДокумент.Область("СтрокиДляПовтора");
	// Повтор шапки таблицы на каждой строке
	/////////////////////////////////////////////////////////////////////////
    	
	УправлениеОтчетами.УстановитьКолонтитулыПоУмолчанию(ТабличныйДокумент, , Строка(глЗначениеПеременной("глТекущийПользователь")));
    	
	Возврат ТабличныйДокумент;
	
КонецФункции

Процедура ВывестиПодвал(ТабличныйДокумент, Макет)
	
	СписокПоказателей = Новый Массив;
	СписокПоказателей.Добавить("ФИОРук");
	СписокПоказателей.Добавить("ФИО");
	
	СведенияОбОрганизации = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, ТекущаяДата(), СписокПоказателей);
	СведенияОЮрФизЛице  = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Организация, ТекущаяДата());
	СведенияОбОрганизации.Вставить("Свидетельство", ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОЮрФизЛице, "Свидетельство,"));
	
	Секция = Макет.ПолучитьОбласть("Подвал");
	Секция.Параметры.ИмяРук = СведенияОбОрганизации.ФИОРук;
	Секция.Параметры.ИмяОрг = ?(РегламентированнаяОтчетность.ЭтоПБОЮЛ(Организация), СведенияОбОрганизации.ФИО, "");
	Секция.Параметры.Свидетельство = СведенияОбОрганизации.Свидетельство;
	
	ТабличныйДокумент.Вывести(Секция);
	
КонецПроцедуры

#КонецЕсли

Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("КнигаПокупок","Книга покупок");
	
КонецФункции

Процедура РассчитатьСуммыДокумента()
	
	ВсегоПокупок      = ТабличнаяЧасть.Итог("ВсегоПокупок");
	СуммаБезНДС18     = ТабличнаяЧасть.Итог("СуммаБезНДС18");
	НДС18             = ТабличнаяЧасть.Итог("НДС18");
	СуммаБезНДС10     = ТабличнаяЧасть.Итог("СуммаБезНДС10");
	НДС10             = ТабличнаяЧасть.Итог("НДС10");
	НДС0              = ТабличнаяЧасть.Итог("НДС0");
	СуммаБезНДС20     = ТабличнаяЧасть.Итог("СуммаБезНДС20");
	НДС20             = ТабличнаяЧасть.Итог("НДС20");
	СуммаСовсемБезНДС = ТабличнаяЧасть.Итог("СуммаСовсемБезНДС");
	
КонецПроцедуры
