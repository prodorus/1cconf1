////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем ИменаПолейДанныхПоСотрудникам;
Перем мСодержимоеФайла Экспорт;
////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если ТолстыйКлиентОбычноеПриложение Тогда

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Функция Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт
	
	// Получить экземпляр документа на печать
	Если ИмяМакета = "ПечатьСЗВ_КОРР" Тогда
		
		ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
		ОбработкаКомментариев.УдалитьСообщения();
		
		Заголовок = "Печать документа: " + СокрЛП(ЭтотОбъект);
		
		Отказ = Ложь;
		
		//Проверка корректности заполнения документа
		ПроверитьПравильностьЗаполненияДокумента(Отказ, Ложь);
		
		Если Отказ Тогда
			ОбработкаКомментариев.ПоказатьСообщения();
			Возврат Неопределено;
		КонецЕсли;	 
		
		ТабДокумент = ПроцедурыПерсонифицированногоУчета.ПечатнаяФормаОДВ_1(Ссылка);
		УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, "Опись ОДВ-1 " + ОбщегоНазначенияЗК.СформироватьЗаголовокДокумента(ЭтотОбъект, "по документу"), , ТабДокумент);
		
		ТабДокумент = ПечатнаяФормаСЗВ_КОРР();
		Возврат УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, "Форма СЗВ-КОРР " + ОбщегоНазначенияЗК.СформироватьЗаголовокДокумента(ЭтотОбъект, "по документу"), , ТабДокумент);
		
	КонецЕсли;
	
КонецФункции // Печать

Функция ПечатнаяФормаСЗВ_КОРР()
	
	ИмяМакета = ?(Формат2019, "ФормаСЗВ_КОРР_2019", "ФормаСЗВ_КОРР");
	Макет = ПолучитьМакет(ИмяМакета);
	
	ДокументРезультат = Новый ТабличныйДокумент;
	ДокументРезультат.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СЗВ_КОРР";
	ДокументРезультат.ПолеСлева = 0;
	ДокументРезультат.ПолеСправа = 0;
	ДокументРезультат.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	
	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
	ОбластьСтрокаЗаработка = Макет.ПолучитьОбласть("СтрокаЗаработка");
	ОбластьВредныеИТяжелыеРаботы = Макет.ПолучитьОбласть("ВредныеИТяжелыеРаботы");
	ОбластьСтрокаВредныхИТяжелыхРабот = Макет.ПолучитьОбласть("СтрокаВредныхИТяжелыхРабот");
	ОбластьСтаж = Макет.ПолучитьОбласть("Стаж");
	ОбластьСтрокаСтажа = Макет.ПолучитьОбласть("СтрокаСтажа");
	ОбластьДвустрочнаяСтрокаСтажа = Макет.ПолучитьОбласть("ДвустрочнаяСтрокаСтажа");
	ОбластьСтрокаКодПозицииСписка = Макет.ПолучитьОбласть("СтрокаКодПозицииСписка");
	ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
	ОбластьСтажНумерацияКолонок = Макет.ПолучитьОбласть("СтажНумерацияКолонок");
	ОбластьВредныеИТяжелыеРаботыНумерацияКолонок = Макет.ПолучитьОбласть("ВредныеИТяжелыеРаботыНумерацияКолонок");
	
	ПараметрыКолонтитула = Неопределено;
	Если Формат2019 Тогда
		ПараметрыКолонтитула = Новый Структура;
		ПараметрыКолонтитула.Вставить("НомерТекущегоЛиста", 0);
		ПараметрыКолонтитула.Вставить("ОбластьКолонтитул", Макет.ПолучитьОбласть("Колонтитул"));
		ПараметрыКолонтитула.Вставить("НовыйДокумент", Истина);
	КонецЕсли;
	
	ВыборкаПоШапкеДокумента = ЗапросПоШапкеДляПечати().Выбрать();
	ВыборкаПоРаботникам = ЗапросПоСотрудникамДляПечати().Выбрать();
	ВыборкаПоДоходамВзносам = ЗапросПоЗаработкуИВзносамДляПечати().Выбрать();
	ВыборкаПоДоходамНаВредныхИТяжелыхРаботах = ЗапросПоДоходамЗанятыхНаВредныхИТяжелыхРаботахДляПечати().Выбрать();
	
	ЭтоПервыйДокументКоллекции = Истина;
	
	ПоследняяДатаОтчетногоГода = Формат(КонецГода(КорректируемыйПериод), "ДЛФ=Д");
	
	Если ВыборкаПоШапкеДокумента.Следующий() Тогда
		
		КодыМесяцев = КодыМесяцевСЗВ_КОРР();
		ПервыйМесяц = Месяц(ВыборкаПоШапкеДокумента.КорректируемыйПериод);
		ПоследнийМесяц = Месяц(ПроцедурыПерсонифицированногоУчета.ОкончаниеОтчетногоПериодаПерсучета(ВыборкаПоШапкеДокумента.КорректируемыйПериод));
		
		Пока ВыборкаПоРаботникам.СледующийПоЗначениюПоля("НомерСтроки") Цикл
			
			Если ЭтоПервыйДокументКоллекции Тогда
				ЭтоПервыйДокументКоллекции = Ложь;
			Иначе
				ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;
			
			ТекущийЛист = Новый ТабличныйДокумент;
			ТекущийЛист.ПолеСлева = ДокументРезультат.ПолеСлева;
			ТекущийЛист.ПолеСправа = ДокументРезультат.ПолеСправа;
			ТекущийЛист.ОриентацияСтраницы = ДокументРезультат.ОриентацияСтраницы;
			
			РегистрационныйНомерПФР = СтрЗаменить(ВыборкаПоШапкеДокумента.РегистрационныйНомерПФР," ","");
			РегистрационныйНомерПФР = СтрЗаменить(РегистрационныйНомерПФР,"-","");
			КоррРегистрационныйНомерПФР = СтрЗаменить(ВыборкаПоШапкеДокумента.РегистрационныйНомерПФРвКорректируемыйПериод," ","");
			КоррРегистрационныйНомерПФР = СтрЗаменить(КоррРегистрационныйНомерПФР,"-","");
			
			
			ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(РегистрационныйНомерПФР, ОбластьШапка, "НомРег", 12, 13);
			ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(КоррРегистрационныйНомерПФР, ОбластьШапка, "НомРег", 12, 25);
			
			ИНН = СтроковыеФункцииКлиентСервер.ДополнитьСтроку(ВыборкаПоШапкеДокумента.ИНН, 12, "-", "Справа");
			КоррИНН = СтроковыеФункцииКлиентСервер.ДополнитьСтроку(ВыборкаПоШапкеДокумента.ИННвКорректируемыйПериод, 12, "-", "Справа");
			
			ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(ИНН, ОбластьШапка, "ИНН", 12, 13);
			ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(КоррИНН, ОбластьШапка, "ИНН", 12, 25);
			
			
			ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(Формат(ВыборкаПоШапкеДокумента.КПП,"ЧГ=0"), ОбластьШапка, "КПП", 9, 10);
			ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(Формат(ВыборкаПоШапкеДокумента.КППвКорректируемыйПериод,"ЧГ=0"), ОбластьШапка, "КПП", 9, 19);
			
			НомерСтраницы = 1;
			НомерДляПечати = СтроковыеФункцииКлиентСервер.ДополнитьСтроку(НомерСтраницы, 3);
			
			Если Не Формат2019 Тогда
				ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(РегистрационныйНомерПФР, ОбластьШапка, "НомРег", 12);
				ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(ИНН, ОбластьШапка, "ИНН", 12);
				ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(Формат(ВыборкаПоШапкеДокумента.КПП,"ЧГ=0"), ОбластьШапка, "КПП", 9);
				ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(НомерДляПечати, ОбластьШапка, "НомСтр", 3);
			КонецЕсли;
			
			ОбластьШапка.Параметры.КодПериода = ПроцедурыПерсонифицированногоУчета.КодОтчетногоПериода(ВыборкаПоШапкеДокумента.ОтчетныйПериод);
			ОбластьШапка.Параметры.КодПериодаКорр = ПроцедурыПерсонифицированногоУчета.КодОтчетногоПериода(ВыборкаПоШапкеДокумента.КорректируемыйПериод);
			
			ОбластьШапка.Параметры.Год = Год(ВыборкаПоШапкеДокумента.ОтчетныйПериод);
			ОбластьШапка.Параметры.ГодКорр = Год(ВыборкаПоШапкеДокумента.КорректируемыйПериод);
			
			Если ВыборкаПоШапкеДокумента.ТипСведений = Перечисления.ТипыСведенийСЗВ_КОРР.Корректирующая Тогда 
				ОбластьШапка.Параметры.ТипСведений = "КОРР";
			ИначеЕсли ВыборкаПоШапкеДокумента.ТипСведений = Перечисления.ТипыСведенийСЗВ_КОРР.Отменяющая Тогда
				ОбластьШапка.Параметры.ТипСведений = "ОТМН";
			ИначеЕсли ВыборкаПоШапкеДокумента.ТипСведений = Перечисления.ТипыСведенийСЗВ_КОРР.Особая Тогда
				ОбластьШапка.Параметры.ТипСведений = "ОСОБ";
			КонецЕсли;
			
			ОбластьШапка.Параметры.НаименованиеОрганизации = ВыборкаПоШапкеДокумента.НаименованиеОрганизации;
			ОбластьШапка.Параметры.Организация = ВыборкаПоШапкеДокумента.Организация;
			
			ЗаполнитьЗначенияСвойств(ОбластьШапка.Параметры, ВыборкаПоРаботникам);
			ОбластьШапка.Параметры.ТипДоговора = ?(ЗначениеЗаполнено(ВыборкаПоРаботникам.ТипДоговора), ?(ВыборкаПоРаботникам.ТипДоговора = 1, "трудовой", "гражданско-правовой"), "");
			ОбластьШапка.Параметры.КодДТ = ?(ВыборкаПоРаботникам.ДополнительныйТариф, "АВИА", "");
			
			УстановитьПараметрыКолонтитулаПервогоЛиста(ПараметрыКолонтитула);
			ДобавитьКолонтитул(ТекущийЛист, ПараметрыКолонтитула);
			ТекущийЛист.Вывести(ОбластьШапка);
			
			СтруктураПоиска = Новый Структура("Ссылка, Сотрудник, ИдентификаторСтроки, Месяц");
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, ВыборкаПоРаботникам);
			
			ЕстьСведенияОЗаработке = Ложь;
			Для Сч = ПервыйМесяц По ПоследнийМесяц Цикл
				СтруктураПоиска.Месяц = Сч;
				ОчиститьОбласть(ОбластьСтрокаЗаработка);
				Если ВыборкаПоДоходамВзносам.НайтиСледующий(СтруктураПоиска) Тогда
					ЗаполнитьЗначенияСвойств(ОбластьСтрокаЗаработка.Параметры, ВыборкаПоДоходамВзносам);
					ОбластьСтрокаЗаработка.Параметры.КодМесяца = КодыМесяцев[Сч];
					ТекущийЛист.Вывести(ОбластьСтрокаЗаработка);
					ЕстьСведенияОЗаработке = Истина;
				КонецЕсли;
			КонецЦикла;
			
			Если Не ЕстьСведенияОЗаработке Тогда 
				ТекущийЛист.Вывести(ОбластьСтрокаЗаработка);
			КонецЕсли;
			
			ВыводимыеОбласти = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ОбластьВредныеИТяжелыеРаботы);
			ВыводимыеОбласти.Добавить(ОбластьСтрокаВредныхИТяжелыхРабот);
			ВывестиОбласть(ОбластьВредныеИТяжелыеРаботы, ВыборкаПоШапкеДокумента, ДокументРезультат, ТекущийЛист, Макет, НомерСтраницы, ВыводимыеОбласти, , ПараметрыКолонтитула);
			
			ЕстьСведенияОЗаработкеНаВредныхИТяжелыхРаботах = Ложь;
			Для Сч = ПервыйМесяц По ПоследнийМесяц Цикл
				СтруктураПоиска.Месяц = Сч;
				ОчиститьОбласть(ОбластьСтрокаВредныхИТяжелыхРабот);
				Пока ВыборкаПоДоходамНаВредныхИТяжелыхРаботах.НайтиСледующий(СтруктураПоиска) Цикл
					ЗаполнитьЗначенияСвойств(ОбластьСтрокаВредныхИТяжелыхРабот.Параметры, ВыборкаПоДоходамНаВредныхИТяжелыхРаботах);
					ОбластьСтрокаВредныхИТяжелыхРабот.Параметры.КодМесяца = КодыМесяцев[Сч];
					ВывестиОбласть(ОбластьСтрокаВредныхИТяжелыхРабот, ВыборкаПоШапкеДокумента, ДокументРезультат, ТекущийЛист, Макет, НомерСтраницы, , ОбластьВредныеИТяжелыеРаботыНумерацияКолонок, ПараметрыКолонтитула);
					ЕстьСведенияОЗаработкеНаВредныхИТяжелыхРаботах = Истина;
				КонецЦикла;
			КонецЦикла;
			
			Если Не ЕстьСведенияОЗаработкеНаВредныхИТяжелыхРаботах Тогда 
				ТекущийЛист.Вывести(ОбластьСтрокаВредныхИТяжелыхРабот);
			КонецЕсли;
			
			ОчиститьОбласть(ОбластьСтрокаСтажа);
			ОчиститьОбласть(ОбластьДвустрочнаяСтрокаСтажа);
			ЗаполнитьЗначенияСвойств(ОбластьСтрокаСтажа.Параметры, ВыборкаПоРаботникам);
			ЗаполнитьЗначенияСвойств(ОбластьДвустрочнаяСтрокаСтажа.Параметры, ВыборкаПоРаботникам);
			
			ОбластьСтрокаСтажа.Параметры.СотрудникУволен = "";
			ОбластьДвустрочнаяСтрокаСтажа.Параметры.СотрудникУволен = "";
			Если Формат2019 И ВыборкаПоРаботникам.СотрудникУволен Тогда
				ОбластьСтрокаСтажа.Параметры.СотрудникУволен = ПоследняяДатаОтчетногоГода;
				ОбластьДвустрочнаяСтрокаСтажа.Параметры.СотрудникУволен = ПоследняяДатаОтчетногоГода;
			КонецЕсли;
			
			Если ВыборкаПоРаботникам.ЗаполненСтаж Тогда
				
				ВыводимыеОбласти = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ОбластьСтаж);
				ВыводимыеОбласти.Добавить(ОбластьДвустрочнаяСтрокаСтажа);
				ВывестиОбласть(ОбластьСтаж, ВыборкаПоШапкеДокумента, ДокументРезультат, ТекущийЛист, Макет, НомерСтраницы, ВыводимыеОбласти, , ПараметрыКолонтитула);
				
				Пока ВыборкаПоРаботникам.СледующийПоЗначениюПоля("НомерОсновнойЗаписи") Цикл
					Если ЗначениеЗаполнено(ВыборкаПоРаботникам.КодПозицииСпискаКод) 
						Или (ЗначениеЗаполнено(ВыборкаПоРаботникам.ТерриториальныеУсловияСтавка) 
						И ВыборкаПоРаботникам.ТретийПараметрИсчисляемогоСтажа <> Справочники.ПараметрыИсчисляемогоСтраховогоСтажа2014.ДЕТИПРЛ)
						Или (ЗначениеЗаполнено(ВыборкаПоРаботникам.ТретийПараметрИсчисляемогоСтажа) 
						И ЗначениеЗаполнено(ВыборкаПоРаботникам.ЗамещениеГосударственныхМуниципальныхДолжностей)) Тогда
						ЗаполнитьДвустрочнуюОбластьСтаж(ВыборкаПоРаботникам, ОбластьДвустрочнаяСтрокаСтажа);
						ВывестиОбласть(ОбластьДвустрочнаяСтрокаСтажа, ВыборкаПоШапкеДокумента, ДокументРезультат, ТекущийЛист, Макет, НомерСтраницы, , ОбластьСтажНумерацияКолонок, ПараметрыКолонтитула);
					Иначе
						ЗаполнитьОбластьСтаж(ВыборкаПоРаботникам, ОбластьСтрокаСтажа);
						ВывестиОбласть(ОбластьСтрокаСтажа, ВыборкаПоШапкеДокумента, ДокументРезультат, ТекущийЛист, Макет, НомерСтраницы, , ОбластьСтажНумерацияКолонок, ПараметрыКолонтитула);
					КонецЕсли;
					Пока ВыборкаПоРаботникам.СледующийПоЗначениюПоля("НомерДополнительнойЗаписи") Цикл
						Если ВыборкаПоРаботникам.НомерДополнительнойЗаписи = 0 Тогда
							Продолжить;
						КонецЕсли;
						Если ЗначениеЗаполнено(ВыборкаПоРаботникам.КодПозицииСпискаКод) 
							Или (ЗначениеЗаполнено(ВыборкаПоРаботникам.ТерриториальныеУсловияСтавка) 
							И ВыборкаПоРаботникам.ТретийПараметрИсчисляемогоСтажа <> Справочники.ПараметрыИсчисляемогоСтраховогоСтажа2014.ДЕТИПРЛ)
							Или (ЗначениеЗаполнено(ВыборкаПоРаботникам.ТретийПараметрИсчисляемогоСтажа) 
							И ЗначениеЗаполнено(ВыборкаПоРаботникам.ЗамещениеГосударственныхМуниципальныхДолжностей)) Тогда
							ЗаполнитьДвустрочнуюОбластьСтаж(ВыборкаПоРаботникам, ОбластьДвустрочнаяСтрокаСтажа);
							ОбластьДвустрочнаяСтрокаСтажа.Параметры.ДатаНачалаПериода = "";
							ОбластьДвустрочнаяСтрокаСтажа.Параметры.ДатаОкончанияПериода = "";
							ВывестиОбласть(ОбластьДвустрочнаяСтрокаСтажа, ВыборкаПоШапкеДокумента, ДокументРезультат, ТекущийЛист, Макет, НомерСтраницы, , ОбластьСтажНумерацияКолонок, ПараметрыКолонтитула);
						Иначе
							ЗаполнитьОбластьСтаж(ВыборкаПоРаботникам, ОбластьСтрокаСтажа);
							ОбластьСтрокаСтажа.Параметры.ДатаНачалаПериода = "";
							ОбластьСтрокаСтажа.Параметры.ДатаОкончанияПериода = "";
							ВывестиОбласть(ОбластьСтрокаСтажа, ВыборкаПоШапкеДокумента, ДокументРезультат, ТекущийЛист, Макет, НомерСтраницы, , ОбластьСтажНумерацияКолонок, ПараметрыКолонтитула);
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
			Иначе
				
				ВыводимыеОбласти = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ОбластьСтаж);
				ВыводимыеОбласти.Добавить(ОбластьСтрокаСтажа);
				ВыводимыеОбласти.Добавить(ОбластьПодвал);
				ВывестиОбласть(ОбластьСтаж, ВыборкаПоШапкеДокумента, ДокументРезультат, ТекущийЛист, Макет, НомерСтраницы, ВыводимыеОбласти, , ПараметрыКолонтитула);
				
				ВывестиОбласть(ОбластьСтрокаСтажа, ВыборкаПоШапкеДокумента, ДокументРезультат, ТекущийЛист, Макет, НомерСтраницы, , , ПараметрыКолонтитула);
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(ОбластьПодвал.Параметры, ВыборкаПоШапкеДокумента);
			ВывестиОбласть(ОбластьПодвал, ВыборкаПоШапкеДокумента, ДокументРезультат, ТекущийЛист, Макет, НомерСтраницы, , , ПараметрыКолонтитула);
			ДокументРезультат.Вывести(ТекущийЛист);
			ПроставитьНомераСтраницВКолонтитулах(ДокументРезультат, ПараметрыКолонтитула);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ДокументРезультат;

КонецФункции

#КонецЕсли

Функция ЗапросПоШапкеДляПечати()
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("СписокДокументов", Ссылка);
	Запрос.УстановитьПараметр("Руководитель", Руководитель);
	Запрос.УстановитьПараметр("ДатаФИО", Дата);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫБОР
	|		КОГДА ФИОФизЛицСрезПоследних.ФизЛицо ЕСТЬ NULL 
	|			ТОГДА ФизическиеЛица.Наименование
	|		ИНАЧЕ ФИОФизЛицСрезПоследних.Фамилия + "" "" + ФИОФизЛицСрезПоследних.Имя + "" "" + ФИОФизЛицСрезПоследних.Отчество
	|	КОНЕЦ КАК ФИОРуководителя
	|ПОМЕСТИТЬ ВТФИОРуководителя
	|ИЗ
	|	Справочник.ФизическиеЛица КАК ФизическиеЛица
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&ДатаФИО, ФизЛицо = &Руководитель) КАК ФИОФизЛицСрезПоследних
	|		ПО ФизическиеЛица.Ссылка = ФИОФизЛицСрезПоследних.ФизЛицо
	|ГДЕ
	|	ФизическиеЛица.Ссылка = &Руководитель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеОКорректировкеСведений.Ссылка КАК Ссылка,
	|	ДанныеОКорректировкеСведений.Организация,
	|	ДанныеОКорректировкеСведений.Организация.НаименованиеСокращенное КАК НаименованиеОрганизации,
	|	ДанныеОКорректировкеСведений.Организация.ИНН КАК ИНН,
	|	ДанныеОКорректировкеСведений.Организация.КПП КАК КПП,
	|	ДанныеОКорректировкеСведений.Организация.ЮрФизЛицо КАК ЮридическоеФизическоеЛицо,
	|	ДанныеОКорректировкеСведений.Год,
	|	ДанныеОКорректировкеСведений.ОтчетныйПериод,
	|	ДанныеОКорректировкеСведений.ТипСведенийСЗВ КАК ТипСведений,
	|	ДанныеОКорректировкеСведений.КорректируемыйПериод,
	|	ЕСТЬNULL(ВТФИОПоследние.ФИОРуководителя, """") КАК Руководитель,
	|	ДанныеОКорректировкеСведений.ДолжностьРуководителя.Наименование КАК ДолжностьРуководителя,
	|	ДанныеОКорректировкеСведений.Дата,
	|	ДанныеОКорректировкеСведений.Организация.КодПоОКПО КАК ОКПО,
	|	ДанныеОКорректировкеСведений.Организация.ОГРН КАК ОГРН,
	|	ДанныеОКорректировкеСведений.Организация.НаименованиеПолное КАК НаименованиеПолное,
	|	ДанныеОКорректировкеСведений.Организация.НаименованиеСокращенное КАК НаименованиеСокращенное,
	|	ДанныеОКорректировкеСведений.Организация.РегистрационныйНомерПФР КАК РегистрационныйНомерПФР,
	|	ДанныеОКорректировкеСведений.РегистрационныйНомерПФРвКорректируемыйПериод,
	|	ДанныеОКорректировкеСведений.КППвКорректируемыйПериод,
	|	ДанныеОКорректировкеСведений.ИННвКорректируемыйПериод,
	|	ДанныеОКорректировкеСведений.ИмяФайла
	|ИЗ
	|	Документ.ДанныеОКорректировкеСведенийЗастрахованныхЛицСЗВ_КОРР КАК ДанныеОКорректировкеСведений
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФИОРуководителя КАК ВТФИОПоследние
	|		ПО (ИСТИНА)
	|ГДЕ
	|	ДанныеОКорректировкеСведений.Ссылка В(&СписокДокументов)";
	
	Возврат Запрос.Выполнить();
	
КонецФункции

Функция ЗапросПоСотрудникамДляПечати() 
	
	ТаблицаКодовКатегорий = КодыКатегорий();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокДокументов", Ссылка);
	Запрос.УстановитьПараметр("ТаблицаКодовКатегорий",	ТаблицаКодовКатегорий);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаКодовКатегорий.Код КАК КодКатегории,
	|	ТаблицаКодовКатегорий.Категория
	|ПОМЕСТИТЬ ВТКодыКатегорий
	|ИЗ
	|	&ТаблицаКодовКатегорий КАК ТаблицаКодовКатегорий
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Сотрудники.НомерСтроки КАК НомерСтроки,
	|	Сотрудники.ФизЛицо КАК Сотрудник,
	|	Сотрудники.ИдентификаторСтроки,
	|	Сотрудники.СтраховойНомерПФР,
	|	Сотрудники.Фамилия,
	|	Сотрудники.Имя,
	|	Сотрудники.Отчество,
	|	Сотрудники.Ссылка КАК Ссылка,
	|	Сотрудники.ТипДоговора,
	|	Сотрудники.КатегорияЗастрахованныхЛиц,
	|	Сотрудники.НомерДоговора,
	|	Сотрудники.ДатаДоговора,
	|	Сотрудники.ДополнительныйТариф,
	|	Сотрудники.СотрудникУволен
	|ПОМЕСТИТЬ ВТСотрудникиДокумента
	|ИЗ
	|	Документ.ДанныеОКорректировкеСведенийЗастрахованныхЛицСЗВ_КОРР.РаботникиОрганизации КАК Сотрудники
	|ГДЕ
	|	Сотрудники.Ссылка В(&СписокДокументов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаписиОСтаже.НомерОсновнойЗаписи КАК НомерОсновнойЗаписи,
	|	ЗаписиОСтаже.НомерДополнительнойЗаписи КАК НомерДополнительнойЗаписи,
	|	ЗаписиОСтаже.ДатаНачалаПериода,
	|	ЗаписиОСтаже.ДатаОкончанияПериода,
	|	ЗаписиОСтаже.ТерриториальныеУсловия,
	|	ЗаписиОСтаже.ТерриториальныеУсловия.Код КАК ТерриториальныеУсловияКод,
	|	ЗаписиОСтаже.ПараметрТерриториальныхУсловий КАК ПараметрТерриториальныхУсловий,
	|	ЗаписиОСтаже.ПараметрТерриториальныхУсловий КАК ТерриториальныеУсловияСтавка,
	|	ЗаписиОСтаже.ОсобыеУсловияТруда,
	|	ВЫБОР
	|		КОГДА ЗаписиОСтаже.Ссылка.ОтчетныйПериод < ДАТАВРЕМЯ(2009, 1, 1)
	|			ТОГДА ЗаписиОСтаже.ОсобыеУсловияТруда.Код
	|		ИНАЧЕ ЗаписиОСтаже.ОсобыеУсловияТруда.КодДляОтчетности2010
	|	КОНЕЦ КАК ОсобыеУсловияТрудаКод,
	|	ЗаписиОСтаже.КодПозицииСписка.Код КАК КодПозицииСпискаКод,
	|	ЗаписиОСтаже.ОснованиеИсчисляемогоСтажа,
	|	ЗаписиОСтаже.ОснованиеИсчисляемогоСтажа.Код КАК ОснованиеИсчисляемогоСтажаКод,
	|	ЗаписиОСтаже.ПервыйПараметрИсчисляемогоСтажа,
	|	ЗаписиОСтаже.ВторойПараметрИсчисляемогоСтажа,
	|	ЗаписиОСтаже.ТретийПараметрИсчисляемогоСтажа КАК ТретийПараметрИсчисляемогоСтажа,
	|	ЗаписиОСтаже.ТретийПараметрИсчисляемогоСтажа.Код КАК ТретийПараметрИсчисляемогоСтажаКод,
	|	ЗаписиОСтаже.ЗамещениеГосударственныхМуниципальныхДолжностей КАК ЗамещениеГосударственныхМуниципальныхДолжностей,
	|	ЗаписиОСтаже.ОснованиеВыслугиЛет,
	|	ВЫБОР
	|		КОГДА ЗаписиОСтаже.Ссылка.ОтчетныйПериод < ДАТАВРЕМЯ(2009, 1, 1)
	|			ТОГДА ЗаписиОСтаже.ОснованиеВыслугиЛет.Код
	|		ИНАЧЕ ЗаписиОСтаже.ОснованиеВыслугиЛет.КодДляОтчетности2010
	|	КОНЕЦ КАК ОснованиеВыслугиЛетКод,
	|	ЗаписиОСтаже.ПервыйПараметрВыслугиЛет,
	|	ЗаписиОСтаже.ВторойПараметрВыслугиЛет,
	|	ЗаписиОСтаже.ТретийПараметрВыслугиЛет,
	|	СотрудникиДокумента.НомерСтроки КАК НомерСтроки,
	|	СотрудникиДокумента.Сотрудник,
	|	СотрудникиДокумента.ИдентификаторСтроки,
	|	СотрудникиДокумента.СтраховойНомерПФР,
	|	СотрудникиДокумента.Фамилия,
	|	СотрудникиДокумента.Имя,
	|	СотрудникиДокумента.Отчество,
	|	СотрудникиДокумента.Ссылка КАК Ссылка,
	|	ВЫБОР
	|		КОГДА ЗаписиОСтаже.НомерОсновнойЗаписи ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЗаполненСтаж,
	|	ВЫБОР
	|		КОГДА СотрудникиДокумента.ТипДоговора = ЗНАЧЕНИЕ(Перечисление.ТипДоговораСЗВ63.Трудовой)
	|			ТОГДА 1
	|		КОГДА СотрудникиДокумента.ТипДоговора = ЗНАЧЕНИЕ(Перечисление.ТипДоговораСЗВ63.ГражданскоПравовой)
	|			ТОГДА 2
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ТипДоговора,
	|	СотрудникиДокумента.КатегорияЗастрахованныхЛиц,
	|	КодыКатегорий.КодКатегории,
	|	СотрудникиДокумента.НомерДоговора,
	|	СотрудникиДокумента.ДатаДоговора,
	|	СотрудникиДокумента.ДополнительныйТариф,
	|	СотрудникиДокумента.СотрудникУволен
	|ИЗ
	|	ВТСотрудникиДокумента КАК СотрудникиДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ДанныеОКорректировкеСведенийЗастрахованныхЛицСЗВ_КОРР.ЗаписиОСтаже КАК ЗаписиОСтаже
	|		ПО СотрудникиДокумента.Сотрудник = ЗаписиОСтаже.ФизЛицо
	|			И СотрудникиДокумента.ИдентификаторСтроки = ЗаписиОСтаже.ИдентификаторСтроки
	|			И СотрудникиДокумента.Ссылка = ЗаписиОСтаже.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКодыКатегорий КАК КодыКатегорий
	|		ПО СотрудникиДокумента.КатегорияЗастрахованныхЛиц = КодыКатегорий.Категория
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки,
	|	НомерОсновнойЗаписи,
	|	НомерДополнительнойЗаписи";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ИменаПолейДанныхПоСотрудникам = "";
	Для Каждого Поле Из РезультатЗапроса.Колонки Цикл
		ИменаПолейДанныхПоСотрудникам = ИменаПолейДанныхПоСотрудникам + "," + Поле.Имя;
	КонецЦикла;
	ИменаПолейДанныхПоСотрудникам = Сред(ИменаПолейДанныхПоСотрудникам, 2);
	
	Возврат РезультатЗапроса;
	
КонецФункции

Функция ЗапросПоЗаработкуИВзносамДляПечати()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокДокументов", Ссылка);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Сотрудники.Ссылка,
	|	Сотрудники.ФизЛицо КАК Сотрудник,
	|	Сотрудники.ИдентификаторСтроки,
	|	Сотрудники.НомерСтроки
	|ПОМЕСТИТЬ ВТСотрудники
	|ИЗ
	|	Документ.ДанныеОКорректировкеСведенийЗастрахованныхЛицСЗВ_КОРР.РаботникиОрганизации КАК Сотрудники
	|ГДЕ
	|	Сотрудники.Ссылка В(&СписокДокументов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Сотрудники.Ссылка КАК Ссылка,
	|	Сотрудники.Сотрудник КАК Сотрудник,
	|	Сотрудники.ИдентификаторСтроки,
	|	СведенияОЗаработке.Месяц КАК Месяц,
	|	Сотрудники.НомерСтроки КАК НомерСтрокиСотрудник,
	|	ВЫБОР
	|		КОГДА СведенияОЗаработке.Месяц ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЗаработокЗаполнен,
	|	СведенияОЗаработке.Заработок,
	|	СведенияОЗаработке.ОблагаетсяВзносамиДоПредельнойВеличины,
	|	СведенияОЗаработке.ПоДоговорамГПХДоПредельнойВеличины,
	|	СведенияОЗаработке.ОблагаетсяВзносамиСвышеПредельнойВеличины,
	|	СведенияОЗаработке.ПоДоговорамГПХСвышеПредельнойВеличины,
	|	СведенияОЗаработке.ДоначисленоНаОПС,
	|	СведенияОЗаработке.ДоначисленоСтраховая,
	|	СведенияОЗаработке.ДоначисленоНакопительная,
	|	СведенияОЗаработке.УплачиваемыеСтрахователем,
	|	СведенияОЗаработке.УплачиваемыеИзЗаработкаЗЛ,
	|	СведенияОЗаработке.УплаченоСтраховая,
	|	СведенияОЗаработке.УплаченоНакопительная
	|ИЗ
	|	ВТСотрудники КАК Сотрудники
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ДанныеОКорректировкеСведенийЗастрахованныхЛицСЗВ_КОРР.СведенияОЗаработке КАК СведенияОЗаработке
	|		ПО Сотрудники.Ссылка = СведенияОЗаработке.Ссылка
	|			И Сотрудники.Сотрудник = СведенияОЗаработке.ФизЛицо
	|			И Сотрудники.ИдентификаторСтроки = СведенияОЗаработке.ИдентификаторСтроки
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтрокиСотрудник,
	|	Месяц,
	|	СведенияОЗаработке.НомерСтроки";
	
	Возврат Запрос.Выполнить();
	
КонецФункции

Функция ЗапросПоДоходамЗанятыхНаВредныхИТяжелыхРаботахДляПечати()

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокДокументов", Ссылка);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Сотрудники.Ссылка,
	|	Сотрудники.ФизЛицо КАК Сотрудник,
	|	Сотрудники.ИдентификаторСтроки,
	|	Сотрудники.НомерСтроки
	|ПОМЕСТИТЬ ВТСотрудники
	|ИЗ
	|	Документ.ДанныеОКорректировкеСведенийЗастрахованныхЛицСЗВ_КОРР.РаботникиОрганизации КАК Сотрудники
	|ГДЕ
	|	Сотрудники.Ссылка В(&СписокДокументов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Сотрудники.Ссылка КАК Ссылка,
	|	Сотрудники.Сотрудник КАК Сотрудник,
	|	Сотрудники.ИдентификаторСтроки,
	|	СведенияОЗаработке.Месяц КАК Месяц,
	|	ВЫБОР
	|		КОГДА СведенияОЗаработке.КлассУсловийТруда = ЗНАЧЕНИЕ(Перечисление.КлассыУсловийТрудаПоРезультатамСпециальнойОценки.Опасный)
	|			ТОГДА ""О4""
	|		КОГДА СведенияОЗаработке.КлассУсловийТруда = ЗНАЧЕНИЕ(Перечисление.КлассыУсловийТрудаПоРезультатамСпециальнойОценки.Вредный4)
	|			ТОГДА ""В3.4""
	|		КОГДА СведенияОЗаработке.КлассУсловийТруда = ЗНАЧЕНИЕ(Перечисление.КлассыУсловийТрудаПоРезультатамСпециальнойОценки.Вредный3)
	|			ТОГДА ""В3.3""
	|		КОГДА СведенияОЗаработке.КлассУсловийТруда = ЗНАЧЕНИЕ(Перечисление.КлассыУсловийТрудаПоРезультатамСпециальнойОценки.Вредный2)
	|			ТОГДА ""В3.2""
	|		КОГДА СведенияОЗаработке.КлассУсловийТруда = ЗНАЧЕНИЕ(Перечисление.КлассыУсловийТрудаПоРезультатамСпециальнойОценки.Вредный1)
	|			ТОГДА ""В3.1""
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК КодКлассаУсловийТруда,
	|	Сотрудники.НомерСтроки КАК НомерСтрокиСотрудник,
	|	ВЫБОР
	|		КОГДА СведенияОЗаработке.Месяц ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЗаработокЗаполнен,
	|	СведенияОЗаработке.КлассУсловийТруда,
	|	СведенияОЗаработке.ОблагаетсяВзносамиЗаЗанятыхНаПодземныхИВредныхРаботах,
	|	СведенияОЗаработке.ОблагаетсяВзносамиЗаЗанятыхНаТяжелыхИПрочихРаботах
	|ИЗ
	|	ВТСотрудники КАК Сотрудники
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ДанныеОКорректировкеСведенийЗастрахованныхЛицСЗВ_КОРР.СведенияОЗаработкеНаВредныхИТяжелыхРаботах КАК СведенияОЗаработке
	|		ПО Сотрудники.Ссылка = СведенияОЗаработке.Ссылка
	|			И Сотрудники.Сотрудник = СведенияОЗаработке.ФизЛицо
	|			И Сотрудники.ИдентификаторСтроки = СведенияОЗаработке.ИдентификаторСтроки
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтрокиСотрудник,
	|	Месяц,
	|	СведенияОЗаработке.НомерСтроки";
	
	Возврат Запрос.Выполнить();
	
КонецФункции

Функция ЗаписьСтажа(ВыборкаЗаписейСтажа)
	
	ПоляЗаписиСтажа =
	"ДатаНачалаПериода,
	|ДатаОкончанияПериода,
	|ТерриториальныеУсловияКод,
	|ОсобыеУсловияТрудаКод,
	|ОснованиеИсчисляемогоСтажаКод,
	|ОснованиеВыслугиЛетКод,
	|ПервыйПараметрИсчисляемогоСтажа,
	|ВторойПараметрИсчисляемогоСтажа,
	|ТретийПараметрИсчисляемогоСтажа,
	|КодПозицииСпискаКод,
	|ТерриториальныеУсловияСтавка,
	|ПервыйПараметрВыслугиЛет,
	|ВторойПараметрВыслугиЛет,
	|ТретийПараметрВыслугиЛет";
	ЗаписьСтажа = Новый Структура(ПоляЗаписиСтажа);
	ЗаполнитьЗначенияСвойств(ЗаписьСтажа, ВыборкаЗаписейСтажа);
	
	Если ЗначениеЗаполнено(ВыборкаЗаписейСтажа.ЗамещениеГосударственныхМуниципальныхДолжностей)
		И Не ЗначениеЗаполнено(ВыборкаЗаписейСтажа.ТретийПараметрИсчисляемогоСтажа) Тогда
		ЗаписьСтажа.ТретийПараметрИсчисляемогоСтажа = ВыборкаЗаписейСтажа.ЗамещениеГосударственныхМуниципальныхДолжностей;
	КонецЕсли;
	
	Возврат ЗаписьСтажа;
	
КонецФункции

Процедура ЗаполнитьОбластьСтаж(ВыборкаЗаписейСтажа, ОбластьСтаж)
	
	ЗаписьСтажа = ЗаписьСтажа(ВыборкаЗаписейСтажа);
	
	Если Формат2019 И ЗаписьСтажа.ТретийПараметрИсчисляемогоСтажа = Справочники.ПараметрыИсчисляемогоСтраховогоСтажа2014.ДЛОТПУСК 
		И Не ПроцедурыПерсонифицированногоУчета.ВыводитьДлительныйОтпускОтдельно(ВыборкаЗаписейСтажа) Тогда
		ЗаписьСтажа.ТретийПараметрИсчисляемогоСтажа = Неопределено;
	КонецЕсли;
	Если ВыборкаЗаписейСтажа.ТретийПараметрИсчисляемогоСтажа = Справочники.ПараметрыИсчисляемогоСтраховогоСтажа2014.ДЕТИПРЛ Тогда
		ЗаписьСтажа.ТерриториальныеУсловияКод = Неопределено
	КонецЕсли;
	
	ОбластьСтаж.Параметры.ДатаНачалаПериода = Формат(ЗаписьСтажа.ДатаНачалаПериода, "ДФ=""дд.ММ.гггг""");
	ОбластьСтаж.Параметры.ДатаОкончанияПериода = Формат(ЗаписьСтажа.ДатаОкончанияПериода, "ДФ=""дд.ММ.гггг""");
	
	ОбластьСтаж.Параметры.ТерриториальныеУсловияКод = ЗаписьСтажа.ТерриториальныеУсловияКод;
	Если ЗначениеЗаполнено(ЗаписьСтажа.ТерриториальныеУсловияСтавка) Тогда 
		ОбластьСтаж.Параметры.ТерриториальныеУсловияКод = Строка(ЗаписьСтажа.ТерриториальныеУсловияКод) + " " + ЗаписьСтажа.ТерриториальныеУсловияСтавка;
	КонецЕсли;
	ОбластьСтаж.Параметры.ОсобыеУсловияТрудаКод = ЗаписьСтажа.ОсобыеУсловияТрудаКод;
	ОбластьСтаж.Параметры.ОснованиеИсчисляемогоСтажаКод = ЗаписьСтажа.ОснованиеИсчисляемогоСтажаКод;
	ОбластьСтаж.Параметры.ОснованиеВыслугиЛетКод = ЗаписьСтажа.ОснованиеВыслугиЛетКод;
	ОбластьСтаж.Параметры.ДопИТС = ПроцедурыПерсонифицированногоУчета.ПредставлениеПараметровИсчисляемогоТрудовогоСтажа(ЗаписьСтажа);
	
	ПроцедурыПерсонифицированногоУчета.ПредставлениеПараметровПенсииЗаВыслугуЛет(ЗаписьСтажа, ОбластьСтаж.Параметры.ДопВЛ, ОбластьСтаж.Параметры.ДопВЛСтавка);
	
КонецПроцедуры

Процедура ЗаполнитьДвустрочнуюОбластьСтаж(ВыборкаЗаписейСтажа, ОбластьСтаж)
	
	ЗаписьСтажа = ЗаписьСтажа(ВыборкаЗаписейСтажа);
	
	Если ЗначениеЗаполнено(ВыборкаЗаписейСтажа.ЗамещениеГосударственныхМуниципальныхДолжностей)
		И ЗначениеЗаполнено(ВыборкаЗаписейСтажа.ТретийПараметрИсчисляемогоСтажа) Тогда
		ОбластьСтаж.Параметры.ДатаНачалаПериода2Строка = Формат(ЗаписьСтажа.ДатаНачалаПериода, "ДФ=""дд.ММ.гггг""");
		ОбластьСтаж.Параметры.ДатаОкончанияПериода2Строка = Формат(ЗаписьСтажа.ДатаОкончанияПериода, "ДФ=""дд.ММ.гггг""");
		ОбластьСтаж.Параметры.ДопИТС2Строка = ПроцедурыПерсонифицированногоУчета.ПредставлениеПараметровИсчисляемогоТрудовогоСтажа(ЗаписьСтажа);
		
		ЗаписьСтажа.ТретийПараметрИсчисляемогоСтажа = ВыборкаЗаписейСтажа.ЗамещениеГосударственныхМуниципальныхДолжностей;
	КонецЕсли;
	
		Если Формат2019 И ЗаписьСтажа.ТретийПараметрИсчисляемогоСтажа = Справочники.ПараметрыИсчисляемогоСтраховогоСтажа2014.ДЛОТПУСК 
		И Не ПроцедурыПерсонифицированногоУчета.ВыводитьДлительныйОтпускОтдельно(ВыборкаЗаписейСтажа) Тогда
		ЗаписьСтажа.ТретийПараметрИсчисляемогоСтажа = Неопределено;
	КонецЕсли;
	
	ОбластьСтаж.Параметры.ДатаНачалаПериода = Формат(ЗаписьСтажа.ДатаНачалаПериода, "ДФ=""дд.ММ.гггг""");
	ОбластьСтаж.Параметры.ДатаОкончанияПериода = Формат(ЗаписьСтажа.ДатаОкончанияПериода, "ДФ=""дд.ММ.гггг""");
	
	ОбластьСтаж.Параметры.ОсобыеУсловияТрудаКод = ЗаписьСтажа.ОсобыеУсловияТрудаКод;
	ОбластьСтаж.Параметры.КодПозицииСпискаКод = ЗаписьСтажа.КодПозицииСпискаКод;
	ОбластьСтаж.Параметры.ОснованиеИсчисляемогоСтажаКод = ЗаписьСтажа.ОснованиеИсчисляемогоСтажаКод;
	ОбластьСтаж.Параметры.ОснованиеВыслугиЛетКод = ЗаписьСтажа.ОснованиеВыслугиЛетКод;
	ОбластьСтаж.Параметры.ДопИТС = ПроцедурыПерсонифицированногоУчета.ПредставлениеПараметровИсчисляемогоТрудовогоСтажа(ЗаписьСтажа);
	
	Если ВыборкаЗаписейСтажа.ТретийПараметрИсчисляемогоСтажа <> Справочники.ПараметрыИсчисляемогоСтраховогоСтажа2014.ДЕТИПРЛ Тогда
		
		ОбластьСтаж.Параметры.ТерриториальныеУсловияКод = ЗаписьСтажа.ТерриториальныеУсловияКод;
		
		ЗаписьТУ = Новый Структура("ПервыйПараметрИсчисляемогоСтажа,ВторойПараметрИсчисляемогоСтажа");
		ЗаполнитьЗначенияСвойств(ЗаписьТУ, ЗаписьСтажа);
		ЗаписьТУ.Вставить("Коэффициент", ЗаписьСтажа.ТерриториальныеУсловияСтавка);
		ОбластьСтаж.Параметры.ДопТУ = ПроцедурыПерсонифицированногоУчета.ПредставлениеПараметровТерриториальныхУсловий(ЗаписьТУ);
	Иначе
		ОбластьСтаж.Параметры.ТерриториальныеУсловияКод = Неопределено;
		ОбластьСтаж.Параметры.ДопТУ = Неопределено;
	КонецЕсли;

	ПроцедурыПерсонифицированногоУчета.ПредставлениеПараметровПенсииЗаВыслугуЛет(ЗаписьСтажа, ОбластьСтаж.Параметры.ДопВЛ, ОбластьСтаж.Параметры.ДопВЛСтавка);
	
КонецПроцедуры

Процедура ВывестиОбласть(ВыводимаяОбласть, ВыборкаПоШапкеДокумента, ДокументРезультат, ТекущийЛист, Макет, НомерСтраницы, ВыводимыеОбласти = Неопределено, ОбластьНуменрацииКолонок = Неопределено, ПараметрыКолонтитула = Неопределено)
	
	Если ВыводимыеОбласти = Неопределено Тогда
		ВыводимыеОбласти = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ВыводимаяОбласть);
	КонецЕсли;
	
	Если ФормированиеПечатныхФорм.ПроверитьВыводТабличногоДокумента(ТекущийЛист, ВыводимыеОбласти, Ложь) Тогда 
		ТекущийЛист.Вывести(ВыводимаяОбласть);
	Иначе 
		ДокументРезультат.Вывести(ТекущийЛист);
		ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
		ТекущийЛист = НовыйПечатныйЛист(ВыборкаПоШапкеДокумента, ДокументРезультат, Макет, НомерСтраницы, ПараметрыКолонтитула);
		Если ОбластьНуменрацииКолонок <> Неопределено Тогда
			ТекущийЛист.Вывести(ОбластьНуменрацииКолонок);
		КонецЕсли;
		ТекущийЛист.Вывести(ВыводимаяОбласть);
	КонецЕсли;
	
КонецПроцедуры 

Функция НовыйПечатныйЛист(ВыборкаПоШапкеДокумента, ДокументРезультат, Макет, НомерСтраницы, ПараметрыКолонтитула = Неопределено)
	
	ТекущийЛист = Новый ТабличныйДокумент;
	ТекущийЛист.ПолеСлева = 0;
	ТекущийЛист.ПолеСправа = 0;
	ТекущийЛист.ОриентацияСтраницы = ДокументРезультат.ОриентацияСтраницы;
	
	Если Формат2019 Тогда
		ДобавитьКолонтитул(ТекущийЛист, ПараметрыКолонтитула);
		Возврат ТекущийЛист;
	КонецЕсли;

	ОбластьКолонтитул = Макет.ПолучитьОбласть("R6:R8");
	ОбластьПустаяСтрока = Макет.ПолучитьОбласть("ПустаяСтрока");
	
	РегистрационныйНомерПФР = СтрЗаменить(ВыборкаПоШапкеДокумента.РегистрационныйНомерПФР," ","");
	РегистрационныйНомерПФР = СтрЗаменить(РегистрационныйНомерПФР,"-","");
	ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(РегистрационныйНомерПФР, ОбластьКолонтитул, "НомРег", 12);
	
	НомерСтраницы = НомерСтраницы + 1;
	НомерДляПечати = СтроковыеФункцииКлиентСервер.ДополнитьСтроку(НомерСтраницы, 3);
	ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(НомерДляПечати, ОбластьКолонтитул, "НомСтр", 3);
	
	ИНН = СтроковыеФункцииКлиентСервер.ДополнитьСтроку(ВыборкаПоШапкеДокумента.ИНН, 12, "-", "Справа");
	ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(ИНН, ОбластьКолонтитул, "ИНН", 12);
	
	ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(Формат(ВыборкаПоШапкеДокумента.КПП,"ЧГ=0"), ОбластьКолонтитул, "КПП", 9);
	
	ТекущийЛист.Вывести(ОбластьКолонтитул);
	ТекущийЛист.Вывести(ОбластьПустаяСтрока);
	
	Возврат ТекущийЛист;
	
КонецФункции

Процедура ОчиститьОбласть(ОбластьМакета)
	
	Для Счетчик = 0 По ОбластьМакета.Параметры.Количество() - 1 Цикл
		ОбластьМакета.Параметры[Счетчик] = ""
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьКолонтитул(ТекущийЛист, ПараметрыКолонтитула)
	
	Если ПараметрыКолонтитула = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	ПараметрыКолонтитула.НомерТекущегоЛиста = ПараметрыКолонтитула.НомерТекущегоЛиста + 1;
	
	ПараметрыКолонтитула.ОбластьКолонтитул.Область("ИмяФормы").Текст = "Форма СЗВ-КОРР";
	Если ПараметрыКолонтитула.НовыйДокумент Или ПараметрыКолонтитула.НомерТекущегоЛиста = 1 Тогда
		ПараметрыКолонтитула.ОбластьКолонтитул.Область("ИмяФормы").Текст = "";
		ПараметрыКолонтитула.НовыйДокумент = Ложь;
	КонецЕсли;

	ОбластьНумерацииСтраницы = ПараметрыКолонтитула.ОбластьКолонтитул.Область("НомерСтраницы");
	ОбластьНумерацииСтраницы.Имя = "НомерСтраницы" + Формат(ПараметрыКолонтитула.НомерТекущегоЛиста, "ЧГ=");
	
	ТекущийЛист.Вывести(ПараметрыКолонтитула.ОбластьКолонтитул);
	
	ОбластьНумерацииСтраницы.Имя = "НомерСтраницы";
	
КонецПроцедуры

Процедура ПроставитьНомераСтраницВКолонтитулах(ТабличныйДокумент, ПараметрыКолонтитула)
	
	Если ПараметрыКолонтитула = Неопределено Тогда
		Возврат
	КонецЕсли;

	Если ПараметрыКолонтитула.НомерТекущегоЛиста = 0 Тогда
		Возврат
	КонецЕсли;
	
	Для Инд = 1 По ПараметрыКолонтитула.НомерТекущегоЛиста Цикл
		ИмяОбласти = "НомерСтраницы" + Формат(Инд, "ЧГ=");
		ТабличныйДокумент.Области[ИмяОбласти].Текст = "Страница " + Формат(Инд, "ЧГ=") + " Из " + Формат(ПараметрыКолонтитула.НомерТекущегоЛиста, "ЧГ=");
	КонецЦикла;
	
	УстановитьПараметрыКолонтитулаПервогоЛиста(ПараметрыКолонтитула);
	
КонецПроцедуры

Процедура УстановитьПараметрыКолонтитулаПервогоЛиста(ПараметрыКолонтитула)
	
	Если ПараметрыКолонтитула = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	ПараметрыКолонтитула.НовыйДокумент = Истина;
	ПараметрыКолонтитула.НомерТекущегоЛиста = 0;
	
КонецПроцедуры

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("ПечатьСЗВ_КОРР","СЗВ-КОРР");

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

Процедура ПроверитьПравильностьЗаполненияДокумента(ЕстьОшибки, СообщатьОбУспехе = Истина, ВыборкаПоШапкеДокумента = Неопределено, ВыборкаПоРаботникам = Неопределено) Экспорт
	
	Обработка = глЗначениеПеременной("глОбработкаСообщений");
	
	Если ВыборкаПоШапкеДокумента = Неопределено Тогда
		ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапкеДокументов().Выбрать();
	КонецЕсли;
	Если ВыборкаПоРаботникам = Неопределено Тогда
		ВыборкаПоРаботникам = СформироватьЗапросПоРаботникам().Выбрать();
	КонецЕсли;
	
	Заработки = СведенияОЗаработке.Выгрузить();
	Заработки.Индексы.Добавить("ФизЛицо,ИдентификаторСтроки,Месяц");
	Заработки.Сортировать("ФизЛицо,ИдентификаторСтроки,Месяц");
	
	ЗаработкиВредныеТяжелые = СведенияОЗаработкеНаВредныхИТяжелыхРаботах.Выгрузить();
	ЗаработкиВредныеТяжелые.Индексы.Добавить("ФизЛицо,ИдентификаторСтроки,Месяц");
	ЗаработкиВредныеТяжелые.Сортировать("ФизЛицо,ИдентификаторСтроки,Месяц");
	
	Отказ = Ложь;
	Если ВыборкаПоШапкеДокумента.Следующий() Тогда
		
		ТекущийДокумент = ВыборкаПоШапкеДокумента.Ссылка;
		
		// Заголовок для сообщений об ошибках проведения.
		Заголовок =  "Проверка документа " + СокрЛП(ВыборкаПоШапкеДокумента.Ссылка);
		СообщенияРазделПроверки = Обработка.ДобавитьСообщение(Заголовок, Перечисления.ВидыСообщений.Информация);
		
		КоличествоДокументов = ВыборкаПоШапкеДокумента.Количество;
		Если КоличествоДокументов = 0 Тогда
			ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Список застрахованных лиц пуст!", Отказ, Заголовок,,, СообщенияРазделПроверки);
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Организация) Тогда
			ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(ОбщегоНазначенияЗК.ПреобразоватьСтрокуИнтерфейса("Не указана организация!"), Отказ, Заголовок,,, СообщенияРазделПроверки);
		ИначеЕсли СтрДлина(СокрЛП(ВыборкаПоШапкеДокумента.ОрганизацияРегистрационныйНомерПФР)) <> 14 Тогда
			ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Предупреждение: Регистрационный номер организации в ПФР скорее всего неправильный",,Заголовок,,, СообщенияРазделПроверки);
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Год) Тогда
			ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Не указан отчетный год!", Отказ, Заголовок,,, СообщенияРазделПроверки);
		ИначеЕсли ВыборкаПоШапкеДокумента.Год < Год(РасчетСтраховыхВзносов.ДатаПередачиАдминистрированияВзносовФНС()) Тогда
			ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Форма СЗВ-КОРР представляется начиная с 2017 года!", Отказ,,,, СообщенияРазделПроверки);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ТипСведенийСЗВ) Тогда
			ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Не указан тип сведений!", Отказ,,,, СообщенияРазделПроверки);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ИмяФайла) Тогда
			ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Не указано имя файла!", Отказ, Заголовок);
		КонецЕсли;
		
		// проверим данные руководителя
		Если Не ЗначениеЗаполнено(Руководитель) Тогда
			ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Не указан руководитель!", Отказ, Заголовок);
		КонецЕсли;
		Если Не ЗначениеЗаполнено(ДолжностьРуководителя) Тогда
			ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Не указана должность руководителя!", Отказ, Заголовок);
		КонецЕсли;
		
		ВыборкаПоРаботникам.Сбросить();
		Если ВыборкаПоРаботникам.НайтиСледующий(ВыборкаПоШапкеДокумента.Ссылка, "Ссылка") Тогда
			
			Пока ВыборкаПоРаботникам.СледующийПоЗначениюПоля("НомерСтроки") цикл
				
				Если ВыборкаПоРаботникам.Ссылка <> ТекущийДокумент Тогда
					Прервать;
				КонецЕсли;
				
				СтрокаНачалаСообщенияОбОшибке = "В строке № "+ СокрЛП(ВыборкаПоРаботникам.НомерСтроки);
				
				Если Не ЗначениеЗаполнено(ВыборкаПоРаботникам.ФизЛицо) Тогда
					ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + ": Не выбран сотрудник!", Отказ, Заголовок,,, СообщенияРазделПроверки);
				Иначе
					
					СтрокаНачалаСообщенияОбОшибке = СтрокаНачалаСообщенияОбОшибке + " по сотруднику " + ВыборкаПоРаботникам.ФизЛицоНаименование + ": ";
					
					Если Не ВыборкаПоРаботникам.ФизЛицоРаботаетВОрганизации тогда
						ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "- не зарегистрирован(а) как сотрудник организации " + ВыборкаПоШапкеДокумента.ОрганизацияНаименование, Отказ, Заголовок,,, СообщенияРазделПроверки);
					КонецЕсли;
					
					СтраховойНомерПФР = ВыборкаПоРаботникам.СтраховойНомерПФР;
					Если Не ЗначениеЗаполнено(СтраховойНомерПФР) Тогда
						ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "- Не задан страховой номер!", Отказ, Заголовок,,, СообщенияРазделПроверки);
					ИначеЕсли Не РегламентированнаяОтчетность.СтраховойНомерПФРСоответствуетТребованиям(СтраховойНомерПФР) тогда
						ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "- Задан неверный страховой номер!", Отказ, Заголовок,,, СообщенияРазделПроверки);
					КонецЕсли;
					
					Если Не ЗначениеЗаполнено(ВыборкаПоРаботникам.Фамилия) И Не ЗначениеЗаполнено(ВыборкаПоРаботникам.Имя) Тогда
						ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "- Не заданы фамилия и имя!", Отказ ,Заголовок,,, СообщенияРазделПроверки);
					КонецЕсли;
					
					Если ВыборкаПоШапкеДокумента.КорректируемыйПериод >= '20170101'
						И ВыборкаПоШапкеДокумента.ТипСведенийСЗВ <> Перечисления.ТипыСведенийСЗВ_КОРР.Отменяющая И Не ЗначениеЗаполнено(ВыборкаПоРаботникам.КоличествоЗаписейОСтаже) Тогда
						ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "- У сотрудника отсутствуют данные о стаже!", Отказ, Заголовок,,, СообщенияРазделПроверки);
					КонецЕсли;
					
					//Контроль дубля строк
					Если ЗначениеЗаполнено(ВыборкаПоРаботникам.НомерПовторяющейсяСтроки) Тогда
						ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Строка №" + ВыборкаПоРаботникам.НомерПовторяющейсяСтроки + ": Сотрудник " + ВыборкаПоРаботникам.ФизЛицоНаименование + " указан в документе дважды!", Отказ, Заголовок,,, СообщенияРазделПроверки);
					КонецЕсли;
					
					// Контроль дубля строк заработков
					МесяцыДохода = Новый Соответствие;
					Для Каждого СтрокаЗаработка Из Заработки.НайтиСтроки(Новый Структура("ФизЛицо, ИдентификаторСтроки", ВыборкаПоРаботникам.ФизЛицо, ВыборкаПоРаботникам.ИдентификаторСтроки)) Цикл
						МесяцыДохода.Вставить(СтрокаЗаработка.Месяц, ?(МесяцыДохода[СтрокаЗаработка.Месяц] = Неопределено, 0, МесяцыДохода[СтрокаЗаработка.Месяц]) + 1);
					КонецЦикла;
					Для Каждого КлючИЗначение Из МесяцыДохода Цикл
						Если КлючИЗначение.Значение > 1 Тогда
							ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "- В строках заработка месяц " + КлючИЗначение.Ключ + " указан более одного раза!", Отказ, Заголовок,,, СообщенияРазделПроверки);
						КонецЕсли;
					КонецЦикла;
					
					МесяцыДохода = Новый Соответствие;
					Для Каждого СтрокаЗаработка Из ЗаработкиВредныеТяжелые.НайтиСтроки(Новый Структура("ФизЛицо, ИдентификаторСтроки", ВыборкаПоРаботникам.ФизЛицо, ВыборкаПоРаботникам.ИдентификаторСтроки)) Цикл
						Если МесяцыДохода[СтрокаЗаработка.Месяц] = Неопределено Тогда
							МесяцыДохода.Вставить(СтрокаЗаработка.Месяц, Новый Соответствие());
						КонецЕсли;
						
						Если МесяцыДохода[СтрокаЗаработка.Месяц][СтрокаЗаработка.КлассУсловийТруда] = Неопределено Тогда
							МесяцыДохода[СтрокаЗаработка.Месяц].Вставить(СтрокаЗаработка.КлассУсловийТруда, 1);
						Иначе
							МесяцыДохода[СтрокаЗаработка.Месяц].Вставить(СтрокаЗаработка.КлассУсловийТруда, МесяцыДохода[СтрокаЗаработка.Месяц][СтрокаЗаработка.КлассУсловийТруда] + 1);
						КонецЕсли;
					КонецЦикла;
					Для Каждого МесяцДохода Из МесяцыДохода Цикл
						Для Каждого КлючИЗначение Из МесяцДохода.Значение Цикл
							Если КлючИЗначение.Значение > 1 Тогда
								ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "- В строках заработка на вредных и тяжелых работах месяц " + МесяцДохода.Ключ + " и класс условий " + КлючИЗначение.Ключ+ " указан более одного раза!", Отказ, Заголовок,,, СообщенияРазделПроверки);
							КонецЕсли;
						КонецЦикла;
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Отказ = Отказ Или Не ПроцедурыПерсонифицированногоУчета.НаборЗаписейОСтажеСоответствуетТребованиям(Ссылка, Истина, СообщенияРазделПроверки);
	
	Если Отказ Тогда
		ЕстьОшибки = Истина;
	КонецЕсли;	 
	
	Если СообщатьОбУспехе И Не ЕстьОшибки Тогда
		Обработка.ДобавитьСообщение("Ошибок не обнаружено.", Перечисления.ВидыСообщений.Информация, , СообщенияРазделПроверки);		
	КонецЕсли;
	
КонецПроцедуры

Функция СформироватьЗапросПоШапкеДокументов()

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РаботникиОрганизации.НомерСтроки) КАК Количество,
	|	РаботникиОрганизации.Ссылка
	|ПОМЕСТИТЬ ВТИтоги
	|ИЗ
	|	Документ.ДанныеОКорректировкеСведенийЗастрахованныхЛицСЗВ_КОРР.РаботникиОрганизации КАК РаботникиОрганизации
	|ГДЕ
	|	РаботникиОрганизации.Ссылка В(&ДокументСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	РаботникиОрганизации.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Документы.Ссылка,
	|	Документы.Номер,
	|	Документы.Дата,
	|	Документы.Проведен,
	|	Документы.Организация,
	|	Документы.Год,
	|	Документы.ТипСведенийСЗВ,
	|	Документы.ПринятоВПФР,
	|	Документы.Ответственный,
	|	ЗНАЧЕНИЕ(Перечисление.ФорматФайлаПФР.Версия07) КАК ФорматФайла,
	|	Документы.Организация.Наименование,
	|	Документы.Организация.ЮрФизЛицо,
	|	Документы.Организация.НаименованиеОКОПФ,
	|	Документы.Организация.НаименованиеПолное,
	|	Документы.Организация.НаименованиеСокращенное,
	|	Документы.Организация.РегистрационныйНомерПФР,
	|	Документы.Организация.ИНН,
	|	Документы.Организация.КПП,
	|	ВЫБОР
	|		КОГДА Документы.Организация.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА Документы.Организация
	|		ИНАЧЕ Документы.Организация.ГоловнаяОрганизация
	|	КОНЕЦ КАК ГоловнаяОрганизация,
	|	Документы.Организация.КодПоОКПО КАК ОКПО,
	|	ЕСТЬNULL(Итоги.Количество, 0) КАК Количество,
	|	Документы.ИмяФайла,
	|	Документы.КорректируемыйПериод
	|ИЗ
	|	Документ.ДанныеОКорректировкеСведенийЗастрахованныхЛицСЗВ_КОРР КАК Документы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТИтоги КАК Итоги
	|		ПО Документы.Ссылка = Итоги.Ссылка
	|ГДЕ
	|	Документы.Ссылка В(&ДокументСсылка)";
	
	Возврат Запрос.Выполнить();

КонецФункции 

Функция СформироватьЗапросПоРаботникам()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РаботникиОрганизации.Ссылка КАК Ссылка,
	|	РаботникиОрганизации.ФизЛицо КАК ФизЛицо,
	|	РаботникиОрганизации.НомерСтроки КАК НомерСтроки,
	|	РаботникиОрганизации.ИдентификаторСтроки,
	|	РаботникиОрганизации.СтраховойНомерПФР,
	|	РаботникиОрганизации.Фамилия,
	|	РаботникиОрганизации.Имя,
	|	РаботникиОрганизации.Отчество,
	|	РаботникиОрганизации.СотрудникУволен,
	|	ВЫБОР
	|		КОГДА РаботникиОрганизации.Ссылка.Организация.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА РаботникиОрганизации.Ссылка.Организация
	|		ИНАЧЕ РаботникиОрганизации.Ссылка.Организация.ГоловнаяОрганизация
	|	КОНЕЦ КАК ГоловнаяОрганизация,
	|	РаботникиОрганизации.КатегорияЗастрахованныхЛиц,
	|	РаботникиОрганизации.ТипДоговора,
	|	РаботникиОрганизации.ДополнительныйТариф
	|ПОМЕСТИТЬ ВТЗастрахованныеЛица
	|ИЗ
	|	Документ.ДанныеОКорректировкеСведенийЗастрахованныхЛицСЗВ_КОРР.РаботникиОрганизации КАК РаботникиОрганизации
	|ГДЕ
	|	РаботникиОрганизации.Ссылка В(&ДокументСсылка)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтроки,
	|	ФизЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТЧРаботникиОрг.НомерСтроки КАК НомерСтроки,
	|	ТЧРаботникиОрг.Ссылка
	|ПОМЕСТИТЬ ВТЗарегистрированныеСотрудниками
	|ИЗ
	|	ВТЗастрахованныеЛица КАК ТЧРаботникиОрг
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
	|		ПО ТЧРаботникиОрг.ФизЛицо = СотрудникиОрганизаций.Физлицо
	|			И ТЧРаботникиОрг.ГоловнаяОрганизация = СотрудникиОрганизаций.Организация
	|ГДЕ
	|	СотрудникиОрганизаций.Ссылка ЕСТЬ НЕ NULL 
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗастрахованныеЛица.ФизЛицо КАК ФизЛицо,
	|	КОЛИЧЕСТВО(ЗаписиОСтаже.НомерОсновнойЗаписи) КАК КоличествоЗаписей
	|ПОМЕСТИТЬ ВТДанныеОСтаже
	|ИЗ
	|	ВТЗастрахованныеЛица КАК ЗастрахованныеЛица
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ДанныеОКорректировкеСведенийЗастрахованныхЛицСЗВ_КОРР.ЗаписиОСтаже КАК ЗаписиОСтаже
	|		ПО ЗастрахованныеЛица.ФизЛицо = ЗаписиОСтаже.ФизЛицо
	|			И ЗастрахованныеЛица.Ссылка = ЗаписиОСтаже.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗастрахованныеЛица.ФизЛицо
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(ВтораяТаблица.НомерСтроки) КАК НомерПовторяющейсяСтроки,
	|	МИНИМУМ(ЕСТЬNULL(ДанныеОСтаже.КоличествоЗаписей, 0)) КАК КоличествоЗаписейОСтаже,
	|	ПерваяТаблица.Ссылка КАК Ссылка,
	|	ПерваяТаблица.ФизЛицо,
	|	ПерваяТаблица.НомерСтроки КАК НомерСтроки,
	|	ПерваяТаблица.ИдентификаторСтроки,
	|	ПерваяТаблица.СтраховойНомерПФР,
	|	ПерваяТаблица.Фамилия,
	|	ПерваяТаблица.Имя,
	|	ПерваяТаблица.Отчество,
	|	ПерваяТаблица.СотрудникУволен,
	|	ПерваяТаблица.ФизЛицо.Наименование,
	|	ВЫБОР
	|		КОГДА ЗарегистрированныеСотрудниками.НомерСтроки ЕСТЬ НЕ NULL 
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ФизЛицоРаботаетВОрганизации
	|ИЗ
	|	ВТЗастрахованныеЛица КАК ПерваяТаблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗарегистрированныеСотрудниками КАК ЗарегистрированныеСотрудниками
	|		ПО ПерваяТаблица.НомерСтроки = ЗарегистрированныеСотрудниками.НомерСтроки
	|			И ПерваяТаблица.Ссылка = ЗарегистрированныеСотрудниками.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗастрахованныеЛица КАК ВтораяТаблица
	|		ПО ПерваяТаблица.ФизЛицо = ВтораяТаблица.ФизЛицо
	|			И ПерваяТаблица.НомерСтроки < ВтораяТаблица.НомерСтроки
	|			И ПерваяТаблица.Ссылка = ВтораяТаблица.Ссылка
	|			И ПерваяТаблица.КатегорияЗастрахованныхЛиц = ВтораяТаблица.КатегорияЗастрахованныхЛиц
	|			И ПерваяТаблица.ТипДоговора = ВтораяТаблица.ТипДоговора
	|			И ПерваяТаблица.ДополнительныйТариф = ВтораяТаблица.ДополнительныйТариф
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеОСтаже КАК ДанныеОСтаже
	|		ПО ПерваяТаблица.ФизЛицо = ДанныеОСтаже.ФизЛицо
	|
	|СГРУППИРОВАТЬ ПО
	|	ПерваяТаблица.Ссылка,
	|	ПерваяТаблица.ФизЛицо,
	|	ПерваяТаблица.НомерСтроки,
	|	ПерваяТаблица.ИдентификаторСтроки,
	|	ПерваяТаблица.СтраховойНомерПФР,
	|	ПерваяТаблица.Фамилия,
	|	ПерваяТаблица.Имя,
	|	ПерваяТаблица.Отчество,
	|	ПерваяТаблица.ФизЛицо.Наименование,
	|	ПерваяТаблица.СотрудникУволен,
	|	ВЫБОР
	|		КОГДА ЗарегистрированныеСотрудниками.НомерСтроки ЕСТЬ НЕ NULL 
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	НомерСтроки";
	
	Возврат Запрос.Выполнить();
	
КонецФункции // СформироватьЗапросПоРаботникам()

Функция КодыМесяцевСЗВ_КОРР()
	
	КодыМесяцев = Новый Соответствие;
	КодыМесяцев.Вставить(1, "Янв");
	КодыМесяцев.Вставить(2, "Фев");
	КодыМесяцев.Вставить(3, "Мрт");
	КодыМесяцев.Вставить(4, "Апр");
	КодыМесяцев.Вставить(5, "Май");
	КодыМесяцев.Вставить(6, "Июн");
	КодыМесяцев.Вставить(7, "Июл");
	КодыМесяцев.Вставить(8, "Авг");
	КодыМесяцев.Вставить(9, "Сен");
	КодыМесяцев.Вставить(10, "Окт");
	КодыМесяцев.Вставить(11, "Нбр");
	КодыМесяцев.Вставить(12, "Дек");
	
	Возврат КодыМесяцев;
	
КонецФункции

Функция КодыКатегорий()
	
	ТаблицаКодовКатегорий = Новый ТаблицаЗначений;
	ТаблицаКодовКатегорий.Колонки.Добавить("Код", Новый ОписаниеТипов("Строка", ,Новый КвалификаторыСтроки(10)));
	ТаблицаКодовКатегорий.Колонки.Добавить("Категория", Новый ОписаниеТипов("ПеречислениеСсылка.КатегорииЗастрахованныхЛицПФР"));
	
	МетаданныхПеречисления = Метаданные.Перечисления.КатегорииЗастрахованныхЛицПФР;
	
	Для каждого Элемент Из Перечисления.КатегорииЗастрахованныхЛицПФР Цикл
		ИндексЗначения = Перечисления.КатегорииЗастрахованныхЛицПФР.Индекс(Элемент);
		
		НоваяСтрока = ТаблицаКодовКатегорий.Добавить();
		НоваяСтрока.Код = МетаданныхПеречисления.ЗначенияПеречисления[ИндексЗначения].Имя;
		НоваяСтрока.Категория = Элемент;
	КонецЦикла;
	
	Возврат ТаблицаКодовКатегорий;
	
КонецФункции

Процедура ВыделитьСтрокиДоговоров(СтруктураПоискаДоговоров, ЗаписиФизлица, ВременнаяТаблицаФизлица)
	
	СтрокиДоговоров = ЗаписиФизлица.НайтиСтроки(СтруктураПоискаДоговоров);
	Для Каждого СтрокаТЗ Из СтрокиДоговоров Цикл
		ЗаполнитьЗначенияСвойств(ВременнаяТаблицаФизлица.Добавить(),СтрокаТЗ);
		ЗаписиФизлица.Удалить(СтрокаТЗ);
	КонецЦикла;
	
КонецПроцедуры

Процедура ВыполнитьНумерациюЗаписейОСтаже(СообщатьОПроблемах) Экспорт
	
	Отказ = Ложь;
	Если СообщатьОПроблемах Тогда
		ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
		ОбработкаКомментариев.УдалитьСообщения();
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура("ИдентификаторСтроки");
	СтруктураПоискаДоговоров = Новый Структура("ИдентификаторСтроки,ТретийПараметрИсчисляемогоСтажа");
	ВременнаяТаблица = ЗаписиОСтаже.ВыгрузитьКолонки();
	ВременнаяТаблицаФизлица = ЗаписиОСтаже.ВыгрузитьКолонки();
	
	ТЗЗаписиОСтаже = ЗаписиОСтаже.Выгрузить();
	ТЗЗаписиОСтаже.Сортировать("ФизЛицо, ИдентификаторСтроки, НомерСтроки");
	
	Для Каждого СтрокаТЧ Из РаботникиОрганизации Цикл
		
		СтруктураПоиска.ИдентификаторСтроки = СтрокаТЧ.ИдентификаторСтроки;
		СтруктураПоискаДоговоров.ИдентификаторСтроки = СтрокаТЧ.ИдентификаторСтроки;
		
		ВременнаяТаблицаФизлица.Очистить();
		
		ЗаписиФизлица = ТЗЗаписиОСтаже.Скопировать(СтруктураПоиска);
		
		СтруктураПоискаДоговоров.ТретийПараметрИсчисляемогоСтажа = Справочники.ПараметрыИсчисляемогоСтраховогоСтажа2014.ДОГОВОР;
		ВыделитьСтрокиДоговоров(СтруктураПоискаДоговоров, ЗаписиФизлица, ВременнаяТаблицаФизлица);
		СтруктураПоискаДоговоров.ТретийПараметрИсчисляемогоСтажа = Справочники.ПараметрыИсчисляемогоСтраховогоСтажа2014.НЕОПЛАВТ;
		ВыделитьСтрокиДоговоров(СтруктураПоискаДоговоров, ЗаписиФизлица, ВременнаяТаблицаФизлица);
		СтруктураПоискаДоговоров.ТретийПараметрИсчисляемогоСтажа = Справочники.ПараметрыИсчисляемогоСтраховогоСтажа2014.НЕОПЛДОГ;
		ВыделитьСтрокиДоговоров(СтруктураПоискаДоговоров, ЗаписиФизлица, ВременнаяТаблицаФизлица);
		
		ВременнаяТаблицаФизлица.Сортировать("ДатаНачалаПериода");
		ОбщегоНазначенияЗК.ЗагрузитьВТаблицуЗначений(ЗаписиФизлица, ВременнаяТаблицаФизлица);
		
		//Нумерация записей стажа 
		НомерОсновнойЗаписи = 0; 
		НомерСтроки = 0;
		Для Каждого СтрокаСтажа Из ВременнаяТаблицаФизлица цикл
			
			НомерСтроки = НомерСтроки + 1;
			ТекстОшибкиСНомеромСтроки = "В строке стажа " + НомерСтроки + ": ";
			
			//Контролируем смену основной записи
			Если ЗначениеЗаполнено(СтрокаСтажа.ДатаНачалаПериода) И ЗначениеЗаполнено(СтрокаСтажа.ДатаОкончанияПериода) тогда
				//Встретили основную запись
				НомерОсновнойЗаписи = НомерОсновнойЗаписи + 1; 
				НомерДополнительнойЗаписи = 0;
			ИначеЕсли Не ЗначениеЗаполнено(СтрокаСтажа.ДатаНачалаПериода) И Не ЗначениеЗаполнено(СтрокаСтажа.ДатаОкончанияПериода) тогда	
				Если НомерОсновнойЗаписи <> 0 Тогда
					НомерДополнительнойЗаписи = НомерДополнительнойЗаписи + 1; 
				ИначеЕсли СообщатьОПроблемах Тогда
					ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(ТекстОшибкиСНомеромСтроки + "не указаны даты начала и окончания периода!", Отказ);
				КонецЕсли;
			ИначеЕсли СообщатьОПроблемах Тогда
				Если ЗначениеЗаполнено(СтрокаСтажа.ДатаНачалаПериода) Тогда
					ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(ТекстОшибкиСНомеромСтроки + "не указана дата окончания периода!", Отказ);
				Иначе
					ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(ТекстОшибкиСНомеромСтроки + "не указана начала окончания периода!", Отказ);
				КонецЕсли;
			КонецЕсли;	
			
			СтрокаСтажа.НомерОсновнойЗаписи = НомерОсновнойЗаписи;
			СтрокаСтажа.НомерДополнительнойЗаписи = НомерДополнительнойЗаписи;
			
		КонецЦикла;	
		
		ОбщегоНазначенияЗК.ЗагрузитьВТаблицуЗначений(ВременнаяТаблицаФизлица, ВременнаяТаблица);
		
	КонецЦикла;
	
	ВременнаяТаблица.Сортировать("ФизЛицо, ИдентификаторСтроки, НомерОсновнойЗаписи, НомерДополнительнойЗаписи");
	ЗаписиОСтаже.Загрузить(ВременнаяТаблица);
	
	Если СообщатьОПроблемах И Отказ Тогда
		ОбработкаКомментариев.ПоказатьСообщения();
	КонецЕсли;
	
КонецПроцедуры

Процедура ОчиститьЗначенияКолонок(ИмяТабличнойЧасти, ИменаКолонок)
	
	Если ИменаКолонок.Количество() И ЭтотОбъект[ИмяТабличнойЧасти].Количество() Тогда
		ВременнаяТаблица = ЭтотОбъект[ИмяТабличнойЧасти].Выгрузить();
		Для Каждого ИмяКолонки Из ИменаКолонок Цикл
			ВременнаяТаблица.Колонки.Удалить(ИмяКолонки);
		КонецЦикла;
		ЭтотОбъект[ИмяТабличнойЧасти].Очистить();
		ЭтотОбъект[ИмяТабличнойЧасти].Загрузить(ВременнаяТаблица);
	КонецЕсли;
	
КонецПроцедуры

Функция ВидимостьКолонокТабличныхЧастей(КорректируемыйГод) Экспорт
	
	ВидимостьКолонок = Новый Соответствие();
	ВидимостьКолонок.Вставить("РаботникиОрганизации", Новый Структура);
	ВидимостьКолонок.Вставить("СведенияОЗаработке", Новый Структура);
	ВидимостьКолонок.Вставить("УплаченныеВзносыРасшифровка", Новый Структура);
	
	ВидимостьКолонокТЧ = ВидимостьКолонок["РаботникиОрганизации"];
	ВидимостьКолонокТЧ.Вставить("НомерДоговора", КорректируемыйГод <= 2016);
	ВидимостьКолонокТЧ.Вставить("ДатаДоговора", КорректируемыйГод <= 2016);
	ВидимостьКолонокТЧ.Вставить("ДополнительныйТариф", КорректируемыйГод >= 2000 И КорректируемыйГод <= 2016);
	ВидимостьКолонокТЧ.Вставить("КатегорияЗастрахованныхЛиц", КорректируемыйГод < 2017);
	ВидимостьКолонокТЧ.Вставить("ТипДоговора", КорректируемыйГод >= 2010 И КорректируемыйГод <= 2016);
	
	ВидимостьКолонокТЧ = ВидимостьКолонок["СведенияОЗаработке"];
	ВидимостьКолонокТЧ.Вставить("Заработок", КорректируемыйГод <= 2001 Или КорректируемыйГод >= 2010);
	ВидимостьКолонокТЧ.Вставить("ОблагаетсяВзносамиДоПредельнойВеличины", КорректируемыйГод <= 2001 Или КорректируемыйГод >= 2010);
	ВидимостьКолонокТЧ.Вставить("ПоДоговорамГПХДоПредельнойВеличины", КорректируемыйГод >= 2010);
	ВидимостьКолонокТЧ.Вставить("ОблагаетсяВзносамиСвышеПредельнойВеличины", КорректируемыйГод >= 2010);
	ВидимостьКолонокТЧ.Вставить("ПоДоговорамГПХСвышеПредельнойВеличины", КорректируемыйГод >= 2010);
	
	ВидимостьКолонокТЧ.Вставить("УплачиваемыеСтрахователем", КорректируемыйГод <= 2001);
	ВидимостьКолонокТЧ.Вставить("УплачиваемыеИзЗаработкаЗЛ", КорректируемыйГод <= 2000);
	ВидимостьКолонокТЧ.Вставить("ДоначисленоНаОПС", КорректируемыйГод >= 2014);
	ВидимостьКолонокТЧ.Вставить("ДоначисленоСтраховая", КорректируемыйГод >= 2002);
	ВидимостьКолонокТЧ.Вставить("ДоначисленоНакопительная", КорректируемыйГод >= 2002 И КорректируемыйГод <= 2013);
	
	ВидимостьКолонокТЧ.Вставить("УплаченоСтраховая", КорректируемыйГод >= 2010 И КорректируемыйГод <= 2013);
	ВидимостьКолонокТЧ.Вставить("УплаченоНакопительная", КорректируемыйГод >= 2010 И КорректируемыйГод <= 2013);
	
	ВидимостьКолонокТЧ = ВидимостьКолонок["УплаченныеВзносыРасшифровка"];
	ВидимостьКолонокТЧ.Вставить("НаСтраховуюПенсию", КорректируемыйГод >= 2002 И КорректируемыйГод <= 2013);
	ВидимостьКолонокТЧ.Вставить("НаНакопительнуюПенсию", КорректируемыйГод >= 2002 И КорректируемыйГод <= 2013);
	ВидимостьКолонокТЧ.Вставить("ПоТарифуСтраховыхВзносов", КорректируемыйГод >= 2014);

	Возврат ВидимостьКолонок;
	
КонецФункции

// Формирует файл, который можно будет записать на дискетку
//
// Параметры: 
//  Нет
//
// Возвращаемое значение:
//  Строка - содержимое файла
//
Функция СформироватьВыходнойФайл(Отказ) Экспорт
	
	Возврат ?(Формат2019, ТекстВыходногоФайла2019(Отказ), ТекстВыходногоФайла2018(Отказ))
	
КонецФункции

Функция ТекстВыходногоФайла2018(Отказ)
	
	ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
	ОбработкаКомментариев.УдалитьСообщения();
	Отказ = Ложь;
	
	//Проверка корректности заполнения документа
	ПроверитьПравильностьЗаполненияДокумента(Отказ, Ложь);
	
	Если Отказ Тогда
		ОбработкаКомментариев.ПоказатьСообщения();
		Возврат "";
	КонецЕсли;
	
	ВыборкаПоШапкеДокумента = ПроцедурыПерсонифицированногоУчета.ЗапросПоШапкеДляПечатиОДВ_1(Ссылка, Дата).Выбрать();
	ВыборкаПоШапкеДокумента.Следующий();
	
	ВыборкаПоДаннымВзносов = ПроцедурыПерсонифицированногоУчета.ЗапросПоДаннымНачисленныхУплаченныхВзносовОДВ_1(Ссылка).Выбрать();
	ВыборкаУплаченныхВзносов = ПроцедурыПерсонифицированногоУчета.ЗапросПоДаннымРасшифровкиУплаченныхВзносовОДВ_1(Ссылка).Выбрать();
	
	// Загружаем формат файла сведений
	МакетФормата = ПолучитьОбщийМакет("ФорматПФР_2018");
	
	ФорматОДВ_1 = ПроцедурыПерсонифицированногоУчета.ЗагрузитьФорматНабораЗаписейдляПФР(МакетФормата, "ОДВ_1");
	
	НаборЗаписейДатаЗаполнения = Новый Структура("ДатаЗаполнения", ПроцедурыПерсонифицированногоУчета.СкопироватьСтруктуруДанных(ФорматОДВ_1.ДатаЗаполнения));
	ФорматОДВ_1.Удалить("ДатаЗаполнения");
	НаборЗаписейРуководитель = Новый Структура("Руководитель", ПроцедурыПерсонифицированногоУчета.СкопироватьСтруктуруДанных(ФорматОДВ_1.Руководитель));
	ФорматОДВ_1.Удалить("Руководитель");
	ФорматОснованияДНП = ПроцедурыПерсонифицированногоУчета.СкопироватьСтруктуруДанных(ФорматОДВ_1.ОснованияДНП.Значение);
	ФорматОДВ_1.Удалить("ОснованияДНП");
	ФорматУплата = ПроцедурыПерсонифицированногоУчета.СкопироватьСтруктуруДанных(ФорматОДВ_1.Уплата.Значение);
	ФорматОДВ_1.Удалить("Уплата");
	
	// Создаем начальное дерево
	ДеревоВыгрузки = ПроцедурыПерсонифицированногоУчета.СоздатьДеревоXML();
	
	Атрибуты = Новый Соответствие;
	Атрибуты.Вставить("xmlns", "http://пф.рф/ВС/СЗВ-КОРР/2018-02-01");
	Атрибуты.Вставить("xmlns:ВС2", "http://пф.рф/ВС/типы/2017-10-23");
	Атрибуты.Вставить("xmlns:АФ4", "http://пф.рф/АФ/2017-08-21");
	Атрибуты.Вставить("xmlns:УТ2", "http://пф.рф/УТ/2017-08-21");
	Атрибуты.Вставить("xmlns:РВ2", "http://пф.рф/ВС/РВ/типы/2017-12-27");
	Атрибуты.Вставить("xmlns:ИС2", "http://пф.рф/ВС/ИС/типы/2017-09-11");
	
	УзелПФР = ПроцедурыПерсонифицированногоУчета.ДобавитьУзелВДеревоXML(ДеревоВыгрузки, "ЭДПФР", "", Атрибуты);
	
	// Служебная информация о файле
	НаборЗаписейСлужебнаяИнформация = ПроцедурыПерсонифицированногоУчета.ЗагрузитьФорматНабораЗаписейдляПФР(МакетФормата, "СлужебнаяИнформация");
	Если ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ИмяФайлаДляПФР) Тогда
		ЧастиИмениФайла = ОбщегоНазначенияЗК.РазложитьСтрокуВМассивПодстрок(СокрЛП(ВыборкаПоШапкеДокумента.ИмяФайлаДляПФР),"_");
		НаборЗаписейСлужебнаяИнформация.АФ4__GUID.Значение = ЧастиИмениФайла[ЧастиИмениФайла.ВГраница()];
	КонецЕсли;
	НаборЗаписейСлужебнаяИнформация.АФ4__ДатаВремя.Значение = ПроцедурыПерсонифицированногоУчета.ПредставлениеДатыВФорматеdateTimeСЧасовымПоясом(ВыборкаПоШапкеДокумента.Дата);
	НаборЗаписейСлужебнаяИнформация.АФ4__ПрограммаПодготовки.Значение = ИсправленныйСимвольныйЭлемент("1С:" + РегламентированнаяОтчетность.ИДКонфигурации()) + " " + Метаданные.Версия;
	ПроцедурыПерсонифицированногоУчета.ДобавитьИнформациюВДерево(ПроцедурыПерсонифицированногоУчета.ДобавитьУзелВДеревоXML(УзелПФР, "СлужебнаяИнформация",""), НаборЗаписейСлужебнаяИнформация);
	
	// Данные формы и страхователя
	ФорматОДВ_1.Тип.Значение = 0;
	НаборЗаписейСтрахователь = ФорматОДВ_1.Страхователь.Значение;
	НаборЗаписейСтрахователь.ИС2__Наименование = ИсправленныйСимвольныйЭлемент(ВыборкаПоШапкеДокумента.НаименованиеСокращенное);
	НаборЗаписейСтрахователь.УТ2__РегНомер = ВыборкаПоШапкеДокумента.РегистрационныйНомерПФР;
	НаборЗаписейСтрахователь.УТ2__ИНН = ВыборкаПоШапкеДокумента.ИНН;
	Если ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.КПП) Тогда
		НаборЗаписейСтрахователь.УТ2__КПП = ВыборкаПоШапкеДокумента.КПП;
	Иначе
		НаборЗаписейСтрахователь.Удалить("УТ2__КПП");
		СтрокаПоляКПП = ФорматОДВ_1.Страхователь.Поля.Найти("УТ2__КПП", "ИмяПоля");
		Если СтрокаПоляКПП <> Неопределено Тогда
			ФорматОДВ_1.Страхователь.Поля.Удалить(СтрокаПоляКПП);
		КонецЕсли;
	КонецЕсли;
	НаборЗаписейОтчетныйПериод = ФорматОДВ_1.ОтчетныйПериод.Значение;
	НаборЗаписейОтчетныйПериод.Код = 0;
	НаборЗаписейОтчетныйПериод.Год = ВыборкаПоШапкеДокумента.Год;
	
	ФорматОДВ_1.КоличествоЗЛ.Значение = ВыборкаПоШапкеДокумента.КоличествоЗастрахованныхЛиц;
	
	Если ВыборкаПоДаннымВзносов.Следующий()  
		И (ВыборкаПоДаннымВзносов.ЕстьСтраховая Или ВыборкаПоДаннымВзносов.ЕстьНакопительная Или ВыборкаПоДаннымВзносов.ЕстьТарифСВ) Тогда 
		
		ФорматОДВ_1.Страховая.Значение.ИС2__ЗадолженностьНаНачало = ВыборкаПоДаннымВзносов.ЗадолженностьНаНачалоПериодаСтраховая;
		ФорматОДВ_1.Страховая.Значение.ИС2__Начислено = ВыборкаПоДаннымВзносов.НачисленоСтраховая;
		ФорматОДВ_1.Страховая.Значение.ИС2__Уплачено = ВыборкаПоДаннымВзносов.УплаченоСтраховая;
		ФорматОДВ_1.Страховая.Значение.ИС2__ЗадолженностьНаКонец = ВыборкаПоДаннымВзносов.ЗадолженностьНаКонецПериодаСтраховая;
		
		ФорматОДВ_1.Накопительная.Значение.ИС2__ЗадолженностьНаНачало = ВыборкаПоДаннымВзносов.ЗадолженностьНаНачалоПериодаНакопительная;
		ФорматОДВ_1.Накопительная.Значение.ИС2__Начислено = ВыборкаПоДаннымВзносов.НачисленоНакопительная;
		ФорматОДВ_1.Накопительная.Значение.ИС2__Уплачено = ВыборкаПоДаннымВзносов.УплаченоНакопительная;
		ФорматОДВ_1.Накопительная.Значение.ИС2__ЗадолженностьНаКонец = ВыборкаПоДаннымВзносов.ЗадолженностьНаКонецПериодаНакопительная;
		
		ФорматОДВ_1.ТарифСВ.Значение.ИС2__ЗадолженностьНаНачало = ВыборкаПоДаннымВзносов.ЗадолженностьНаНачалоПериодаТарифСВ;
		ФорматОДВ_1.ТарифСВ.Значение.ИС2__Начислено = ВыборкаПоДаннымВзносов.НачисленоТарифСВ;
		ФорматОДВ_1.ТарифСВ.Значение.ИС2__Уплачено = ВыборкаПоДаннымВзносов.УплаченоТарифСВ;
		ФорматОДВ_1.ТарифСВ.Значение.ИС2__ЗадолженностьНаКонец = ВыборкаПоДаннымВзносов.ЗадолженностьНаКонецПериодаТарифСВ;
		
	Иначе
		ФорматОДВ_1.Удалить("Страховая");
		ФорматОДВ_1.Удалить("Накопительная");
		ФорматОДВ_1.Удалить("ТарифСВ");
	КонецЕсли;
	
	УзелФормы = ПроцедурыПерсонифицированногоУчета.ДобавитьУзелВДеревоXML(УзелПФР, "ОДВ-1", "");
	ПроцедурыПерсонифицированногоУчета.ДобавитьИнформациюВДерево(УзелФормы, ФорматОДВ_1);
	
	Пока ВыборкаУплаченныхВзносов.Следующий() Цикл 
		НаборЗаписейТипУплата = ПроцедурыПерсонифицированногоУчета.СкопироватьСтруктуруДанных(ФорматУплата);
		НаборЗаписейТипУплата.ИС2__Год.Значение = ВыборкаУплаченныхВзносов.УплатаВзносовГод;
		НаборЗаписейТипУплата.ИС2__Страховая.Значение = ВыборкаУплаченныхВзносов.НаСтраховуюПенсию;
		НаборЗаписейТипУплата.ИС2__Накопительная.Значение = ВыборкаУплаченныхВзносов.НаНакопительнуюПенсию;
		НаборЗаписейТипУплата.ИС2__ТарифСВ.Значение = ВыборкаУплаченныхВзносов.ПоТарифуСтраховыхВзносов;
		УзелУплата = ПроцедурыПерсонифицированногоУчета.ДобавитьУзелВДеревоXML(УзелФормы, "Уплата", "");
		ПроцедурыПерсонифицированногоУчета.ДобавитьИнформациюВДерево(УзелУплата, НаборЗаписейТипУплата);
	КонецЦикла;
	
	НаборЗаписейРуководитель.Руководитель.Значение.Должность.Значение = ВРег(ВыборкаПоШапкеДокумента.ДолжностьРуководителя);
	ЗаполнитьФИОВНабореДанных(НаборЗаписейРуководитель.Руководитель.Значение.ФИО, ВыборкаПоШапкеДокумента.ФамилияРуководителя, ВыборкаПоШапкеДокумента.ИмяРуководителя, ВыборкаПоШапкеДокумента.ОтчествоРуководителя);
	ПроцедурыПерсонифицированногоУчета.ДобавитьИнформациюВДерево(УзелФормы, НаборЗаписейРуководитель);
	
	НаборЗаписейДатаЗаполнения.ДатаЗаполнения.Значение = Формат(ВыборкаПоШапкеДокумента.Дата, "ДФ=yyyy-MM-dd");
	ПроцедурыПерсонифицированногоУчета.ДобавитьИнформациюВДерево(УзелФормы, НаборЗаписейДатаЗаполнения);
	
	ВыборкаПоШапкеДокумента = ЗапросПоШапкеДляПечати().Выбрать();
	ВыборкаПоШапкеДокумента.Следующий();
	
	ВыборкаПоРаботникам = ЗапросПоСотрудникамДляПечати().Выбрать();
	ВыборкаПоДоходамВзносам = ЗапросПоЗаработкуИВзносамДляПечати().Выбрать();
	ВыборкаПоДоходамНаВредныхИТяжелыхРаботах = ЗапросПоДоходамЗанятыхНаВредныхИТяжелыхРаботахДляПечати().Выбрать();
	
	КодыМесяцев = КодыМесяцевСЗВ_КОРР();
	ПервыйМесяц = Месяц(ВыборкаПоШапкеДокумента.КорректируемыйПериод);
	ПоследнийМесяц = Месяц(ПроцедурыПерсонифицированногоУчета.ОкончаниеОтчетногоПериодаПерсучета(ВыборкаПоШапкеДокумента.КорректируемыйПериод));

	ФорматСЗВ_КОРР = ПроцедурыПерсонифицированногоУчета.ЗагрузитьФорматНабораЗаписейдляПФР(МакетФормата, "СЗВ_КОРР");
	
	Если Не ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.КПП) Тогда
		ФорматСЗВ_КОРР.Страхователь.Значение.Удалить("УТ2__КПП");
		СтрокаПоляКПП = ФорматСЗВ_КОРР.Страхователь.Поля.Найти("УТ2__КПП", "ИмяПоля");
		Если СтрокаПоляКПП <> Неопределено Тогда
			ФорматСЗВ_КОРР.Страхователь.Поля.Удалить(СтрокаПоляКПП);
		КонецЕсли;		
	КонецЕсли;
	
	ФорматСЗВ_КОРР.КорректируемыйПериод.Значение.Страхователь.Значение.Удалить("ИС2__Наименование");
	СтрокаПоляНаименование = ФорматСЗВ_КОРР.КорректируемыйПериод.Значение.Страхователь.Поля.Найти("ИС2__Наименование", "ИмяПоля");
	Если СтрокаПоляНаименование <> Неопределено Тогда
		ФорматСЗВ_КОРР.КорректируемыйПериод.Значение.Страхователь.Поля.Удалить(СтрокаПоляНаименование);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.КППвКорректируемыйПериод) Тогда
		
		ФорматСЗВ_КОРР.КорректируемыйПериод.Значение.Страхователь.Значение.Удалить("УТ2__КПП");
		СтрокаПоляКПП = ФорматСЗВ_КОРР.КорректируемыйПериод.Значение.Страхователь.Поля.Найти("УТ2__КПП", "ИмяПоля");
		Если СтрокаПоляКПП <> Неопределено Тогда
			ФорматСЗВ_КОРР.КорректируемыйПериод.Значение.Страхователь.Поля.Удалить(СтрокаПоляКПП);
		КонецЕсли;		
	КонецЕсли;
	
	ФорматЗЛ = Новый Структура("ЗЛ", ПроцедурыПерсонифицированногоУчета.СкопироватьСтруктуруДанных(ФорматСЗВ_КОРР.ЗЛ));
	ФорматЗЛ.ЗЛ.Значение.Удалить("СтажевыйПериод");
	ФорматЗЛ.ЗЛ.Значение.Удалить("ДатаУвольнения");
	ФорматСЗВ_КОРР.Удалить("ЗЛ");
	
	ФорматДанныеЗЛ = Новый Структура("ДанныеЗЛ", ПроцедурыПерсонифицированногоУчета.СкопироватьСтруктуруДанных(ФорматСЗВ_КОРР.ДанныеЗЛ));
	ФорматСЗВ_КОРР.Удалить("ДанныеЗЛ");
	
	ФорматСуммы = Новый Структура("Суммы", ПроцедурыПерсонифицированногоУчета.СкопироватьСтруктуруДанных(ФорматСЗВ_КОРР.Суммы));
	ФорматСЗВ_КОРР.Удалить("Суммы");
	
	ФорматВыплатыДТ = Новый Структура("ВыплатыДТ", ПроцедурыПерсонифицированногоУчета.СкопироватьСтруктуруДанных(ФорматСЗВ_КОРР.ВыплатыДТ));
	ФорматСЗВ_КОРР.Удалить("ВыплатыДТ");
	
	ФорматСтажевыйПериод = ПроцедурыПерсонифицированногоУчета.СкопироватьСтруктуруДанных(ФорматСЗВ_КОРР.СтажевыйПериод.Значение);
	ФорматСЗВ_КОРР.Удалить("СтажевыйПериод");
	
	НаборЗаписейДатаУвольнения = Новый Структура("ДатаУвольнения", ПроцедурыПерсонифицированногоУчета.СкопироватьСтруктуруДанных(ФорматСЗВ_КОРР.ДатаУвольнения));
	ФорматСЗВ_КОРР.Удалить("ДатаУвольнения");

	Пока ВыборкаПоРаботникам.СледующийПоЗначениюПоля("НомерСтроки") Цикл
		
		// Данные формы и страхователя
		НаборЗаписейСтрахователь = ФорматСЗВ_КОРР.Страхователь.Значение;
		НаборЗаписейСтрахователь.ИС2__Наименование = ВРег(ВыборкаПоШапкеДокумента.НаименованиеСокращенное);
		НаборЗаписейСтрахователь.УТ2__РегНомер = ВыборкаПоШапкеДокумента.РегистрационныйНомерПФР;
		НаборЗаписейСтрахователь.УТ2__ИНН = ВыборкаПоШапкеДокумента.ИНН;
		Если ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.КПП) Тогда
			НаборЗаписейСтрахователь.УТ2__КПП = ВыборкаПоШапкеДокумента.КПП;
		КонецЕсли;
		
		НаборЗаписейОтчетныйПериод = ФорматСЗВ_КОРР.ОтчетныйПериод.Значение;
		НаборЗаписейОтчетныйПериод.Код = 0;
		НаборЗаписейОтчетныйПериод.Год = Год(ВыборкаПоШапкеДокумента.ОтчетныйПериод);
		
		Если ВыборкаПоШапкеДокумента.ТипСведений = Перечисления.ТипыСведенийСЗВ_КОРР.Корректирующая Тогда
			ФорматСЗВ_КОРР.Тип.Значение = 0;
		ИначеЕсли ВыборкаПоШапкеДокумента.ТипСведений = Перечисления.ТипыСведенийСЗВ_КОРР.Отменяющая Тогда
			ФорматСЗВ_КОРР.Тип.Значение = 1;
		ИначеЕсли ВыборкаПоШапкеДокумента.ТипСведений = Перечисления.ТипыСведенийСЗВ_КОРР.Особая Тогда
			ФорматСЗВ_КОРР.Тип.Значение = 2;
		КонецЕсли;
		
		НаборЗаписейКорректируемыйПериод = ФорматСЗВ_КОРР.КорректируемыйПериод.Значение;
		НаборЗаписейКорректируемыйПериод.ОтчетныйПериод.Значение.Код = ПроцедурыПерсонифицированногоУчета.КодОтчетногоПериода(ВыборкаПоШапкеДокумента.КорректируемыйПериод);
		НаборЗаписейКорректируемыйПериод.ОтчетныйПериод.Значение.Год = Год(ВыборкаПоШапкеДокумента.КорректируемыйПериод);
		
		НаборЗаписейКорректируемыйПериод.Страхователь.Значение.УТ2__РегНомер = ВыборкаПоШапкеДокумента.РегистрационныйНомерПФРвКорректируемыйПериод;
		НаборЗаписейКорректируемыйПериод.Страхователь.Значение.УТ2__ИНН = ВыборкаПоШапкеДокумента.ИННвКорректируемыйПериод;
		Если ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.КППвКорректируемыйПериод) Тогда
			НаборЗаписейКорректируемыйПериод.Страхователь.Значение.УТ2__КПП = ВыборкаПоШапкеДокумента.КППвКорректируемыйПериод;
		КонецЕсли;
		
		УзелФормы = ПроцедурыПерсонифицированногоУчета.ДобавитьУзелВДеревоXML(УзелПФР, "СЗВ-КОРР", "");
		ПроцедурыПерсонифицированногоУчета.ДобавитьИнформациюВДерево(УзелФормы, ФорматСЗВ_КОРР);
		
		// Данные по физлицу
		НаборЗаписейЗЛ = ПроцедурыПерсонифицированногоУчета.СкопироватьСтруктуруДанных(ФорматЗЛ);
		ЗаполнитьФИОВНабореДанных(НаборЗаписейЗЛ.ЗЛ.Значение.ФИО, ВыборкаПоРаботникам.Фамилия, ВыборкаПоРаботникам.Имя, ВыборкаПоРаботникам.Отчество);
		НаборЗаписейЗЛ.ЗЛ.Значение.СНИЛС.Значение = ВыборкаПоРаботникам.СтраховойНомерПФР;
		ПроцедурыПерсонифицированногоУчета.ДобавитьИнформациюВДерево(УзелФормы, НаборЗаписейЗЛ);
		
		// Данные ЗЛ
		НаборЗаписейДанныеЗЛ = ПроцедурыПерсонифицированногоУчета.СкопироватьСтруктуруДанных(ФорматДанныеЗЛ);
		
		Если ЗначениеЗаполнено(ВыборкаПоРаботникам.КодКатегории) Тогда
			НаборЗаписейДанныеЗЛ.ДанныеЗЛ.Значение.Категория.Значение = ВыборкаПоРаботникам.КодКатегории;
		Иначе
			НаборЗаписейДанныеЗЛ.ДанныеЗЛ.Значение.Удалить("Категория");
		КонецЕсли;
		
		Если ВыборкаПоРаботникам.ДополнительныйТариф Тогда
			НаборЗаписейДанныеЗЛ.ДанныеЗЛ.Значение.КодДТ.Значение = "АВИА";
		Иначе 
			НаборЗаписейДанныеЗЛ.ДанныеЗЛ.Значение.Удалить("КодДТ");
		КонецЕсли;
		
		НаборЗаписейДоговор = НаборЗаписейДанныеЗЛ.ДанныеЗЛ.Значение.Договор.Значение;
		Если ЗначениеЗаполнено(ВыборкаПоРаботникам.ТипДоговора) Тогда
			НаборЗаписейДоговор.Тип.Значение = ВыборкаПоРаботникам.ТипДоговора;
		Иначе
			НаборЗаписейДоговор.Удалить("Тип");
		КонецЕсли;
		Если ЗначениеЗаполнено(ВыборкаПоРаботникам.НомерДоговора) Тогда 
			НаборЗаписейДоговор.Реквизиты.Значение.УТ2__Дата = ВыборкаПоРаботникам.ДатаДоговора;
			НаборЗаписейДоговор.Реквизиты.Значение.УТ2__Номер = ВыборкаПоРаботникам.НомерДоговора;
		Иначе 
			НаборЗаписейДоговор.Удалить("Реквизиты");
		КонецЕсли;
		
		Если Не (ЗначениеЗаполнено(ВыборкаПоРаботникам.ТипДоговора) Или ЗначениеЗаполнено(ВыборкаПоРаботникам.НомерДоговора)) Тогда
			НаборЗаписейДанныеЗЛ.ДанныеЗЛ.Значение.Удалить("Договор");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(НаборЗаписейДанныеЗЛ.ДанныеЗЛ.Значение) Тогда
			ПроцедурыПерсонифицированногоУчета.ДобавитьИнформациюВДерево(УзелФормы, НаборЗаписейДанныеЗЛ);
		КонецЕсли;
		
		СтруктураПоиска = Новый Структура("Ссылка, ИдентификаторСтроки, Месяц");
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, ВыборкаПоРаботникам);
		
		// Суммы
		Для Сч = ПервыйМесяц По ПоследнийМесяц Цикл 
			СтруктураПоиска.Месяц = Сч;
			НаборЗаписейСуммы = ПроцедурыПерсонифицированногоУчета.СкопироватьСтруктуруДанных(ФорматСуммы);
			НаборЗаписейСуммы.Суммы.Значение.Месяц.Значение = КодыМесяцев[Сч];
			ВыводитьВФайл = Ложь;
			
			Если ВыборкаПоДоходамВзносам.НайтиСледующий(СтруктураПоиска) Тогда
				Если ВыборкаПоДоходамВзносам.Заработок <> 0
					Или ВыборкаПоДоходамВзносам.ОблагаетсяВзносамиДоПредельнойВеличины <> 0
					Или ВыборкаПоДоходамВзносам.ПоДоговорамГПХДоПредельнойВеличины <> 0
					Или ВыборкаПоДоходамВзносам.ОблагаетсяВзносамиСвышеПредельнойВеличины <> 0
					Или ВыборкаПоДоходамВзносам.ПоДоговорамГПХСвышеПредельнойВеличины <> 0 Тогда
					НаборЗаписейВыплаты = НаборЗаписейСуммы.Суммы.Значение.Выплаты.Значение;
					НаборЗаписейВыплаты.СуммаВыплат.Значение = ВыборкаПоДоходамВзносам.Заработок;
					НаборЗаписейВыплаты.НеПревышающие.Значение.Всего = ВыборкаПоДоходамВзносам.ОблагаетсяВзносамиДоПредельнойВеличины;
					НаборЗаписейВыплаты.НеПревышающие.Значение.ПоГПД = ВыборкаПоДоходамВзносам.ПоДоговорамГПХДоПредельнойВеличины;
					НаборЗаписейВыплаты.Превышающие.Значение.Всего = ВыборкаПоДоходамВзносам.ОблагаетсяВзносамиСвышеПредельнойВеличины;
					НаборЗаписейВыплаты.Превышающие.Значение.ПоГПД = ВыборкаПоДоходамВзносам.ПоДоговорамГПХСвышеПредельнойВеличины;
					Если ВыборкаПоДоходамВзносам.ОблагаетсяВзносамиДоПредельнойВеличины = 0 Тогда 
						НаборЗаписейВыплаты.Удалить("НеПревышающие");
					КонецЕсли;
					Если ВыборкаПоДоходамВзносам.ОблагаетсяВзносамиСвышеПредельнойВеличины = 0 Тогда 
						НаборЗаписейВыплаты.Удалить("Превышающие");
					КонецЕсли;
					ВыводитьВФайл = Истина;
				Иначе
					НаборЗаписейСуммы.Суммы.Значение.Удалить("Выплаты");
				КонецЕсли;
				
				Если ВыборкаПоДоходамВзносам.УплачиваемыеСтрахователем <> 0
					Или ВыборкаПоДоходамВзносам.УплачиваемыеИзЗаработкаЗЛ <> 0
					Или ВыборкаПоДоходамВзносам.ДоначисленоСтраховая <> 0
					Или ВыборкаПоДоходамВзносам.ДоначисленоНакопительная <> 0
					Или ВыборкаПоДоходамВзносам.ДоначисленоНаОПС <> 0 Тогда
					НаборЗаписейДоначисленоСВ = НаборЗаписейСуммы.Суммы.Значение.ДоначисленоСВ.Значение;
					Если ВыборкаПоШапкеДокумента.КорректируемыйПериод < '20020101' Тогда 
						НаборЗаписейДоначисленоСВ.СВстрахователя.Значение = ВыборкаПоДоходамВзносам.УплачиваемыеСтрахователем;
						НаборЗаписейДоначисленоСВ.СВизЗаработка.Значение = ВыборкаПоДоходамВзносам.УплачиваемыеИзЗаработкаЗЛ;
						НаборЗаписейДоначисленоСВ.Удалить("Страховая");
						НаборЗаписейДоначисленоСВ.Удалить("Накопительная");
						НаборЗаписейДоначисленоСВ.Удалить("СВпоТарифу");
					ИначеЕсли ВыборкаПоШапкеДокумента.КорректируемыйПериод < '20140101'Тогда 
						НаборЗаписейДоначисленоСВ.Страховая.Значение = ВыборкаПоДоходамВзносам.ДоначисленоСтраховая;
						НаборЗаписейДоначисленоСВ.Накопительная.Значение = ВыборкаПоДоходамВзносам.ДоначисленоНакопительная;
						НаборЗаписейДоначисленоСВ.Удалить("СВстрахователя");
						НаборЗаписейДоначисленоСВ.Удалить("СВизЗаработка");
						НаборЗаписейДоначисленоСВ.Удалить("СВпоТарифу");
					Иначе
						НаборЗаписейДоначисленоСВ.СВпоТарифу.Значение = ВыборкаПоДоходамВзносам.ДоначисленоНаОПС;
						НаборЗаписейДоначисленоСВ.Удалить("СВстрахователя");
						НаборЗаписейДоначисленоСВ.Удалить("СВизЗаработка");
						НаборЗаписейДоначисленоСВ.Удалить("Страховая");
						НаборЗаписейДоначисленоСВ.Удалить("Накопительная");
					КонецЕсли;
					ВыводитьВФайл = Истина;
				Иначе
					НаборЗаписейСуммы.Суммы.Значение.Удалить("ДоначисленоСВ");
				КонецЕсли;
				
				Если ВыборкаПоДоходамВзносам.УплаченоСтраховая <> 0 
					Или ВыборкаПоДоходамВзносам.УплаченоНакопительная <> 0 Тогда
					НаборЗаписейУплата = НаборЗаписейСуммы.Суммы.Значение.Уплата.Значение;
					НаборЗаписейУплата.Страховая = ВыборкаПоДоходамВзносам.УплаченоСтраховая;
					НаборЗаписейУплата.Накопительная = ВыборкаПоДоходамВзносам.УплаченоНакопительная;
					ВыводитьВФайл = Истина;
				Иначе
					НаборЗаписейСуммы.Суммы.Значение.Удалить("Уплата");
				КонецЕсли;
				
			КонецЕсли;
			
			Если ВыводитьВФайл Тогда 
				ПроцедурыПерсонифицированногоУчета.ДобавитьИнформациюВДерево(УзелФормы, НаборЗаписейСуммы);
			КонецЕсли;
		КонецЦикла;
		
		// ВыплатыДТ
		Для Сч = ПервыйМесяц По ПоследнийМесяц Цикл
			СтруктураПоиска.Месяц = Сч;
			Пока ВыборкаПоДоходамНаВредныхИТяжелыхРаботах.НайтиСледующий(СтруктураПоиска) Цикл
				НаборЗаписейВыплатыДТ = ПроцедурыПерсонифицированногоУчета.СкопироватьСтруктуруДанных(ФорматВыплатыДТ);
				НаборЗаписейВыплатыДТ.ВыплатыДТ.Значение.Месяц = КодыМесяцев[Сч];
				НаборЗаписейВыплатыДТ.ВыплатыДТ.Значение.КодСОУТ = ВыборкаПоДоходамНаВредныхИТяжелыхРаботах.КодКлассаУсловийТруда;
				НаборЗаписейВыплатыДТ.ВыплатыДТ.Значение.ИС2__ДопТарифП1 = ВыборкаПоДоходамНаВредныхИТяжелыхРаботах.ОблагаетсяВзносамиЗаЗанятыхНаПодземныхИВредныхРаботах;
				НаборЗаписейВыплатыДТ.ВыплатыДТ.Значение.ИС2__ДопТарифП2_18 = ВыборкаПоДоходамНаВредныхИТяжелыхРаботах.ОблагаетсяВзносамиЗаЗанятыхНаТяжелыхИПрочихРаботах;
				ПроцедурыПерсонифицированногоУчета.ДобавитьИнформациюВДерево(УзелФормы, НаборЗаписейВыплатыДТ);
			КонецЦикла;
		КонецЦикла;
		
		ВписатьЗаписиОСтажеВНаборДанных(УзелФормы, ПроцедурыПерсонифицированногоУчета.СкопироватьСтруктуруДанных(ФорматСтажевыйПериод), ВыборкаПоРаботникам);
		
	КонецЦикла;
	
	// Преобразуем дерево в строковое описание XML
	ПотокВыгрузкиXML = ПроцедурыПерсонифицированногоУчета.СоздатьПотокXML(, "UTF-8");
	СправкиПоНДФЛ.ЗаписатьУзелДереваXMLВXML(ДеревоВыгрузки, ПотокВыгрузкиXML, "xsi", "http://www.w3.org/2001/XMLSchema-instance");
	ТекстФайла = ПроцедурыПерсонифицированногоУчета.ЗаписатьПотокXML(ПотокВыгрузкиXML);
	
	Возврат СтрЗаменить(ТекстФайла, "__", ":");
	
КонецФункции

Функция ТекстВыходногоФайла2019(Отказ)
	
	ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
	ОбработкаКомментариев.УдалитьСообщения();
	Отказ = Ложь;
	
	//Проверка корректности заполнения документа
	ПроверитьПравильностьЗаполненияДокумента(Отказ, Ложь);
	
	Если Отказ Тогда
		ОбработкаКомментариев.ПоказатьСообщения();
		Возврат "";
	КонецЕсли;
	
	ВыборкаПоШапкеДокумента = ПроцедурыПерсонифицированногоУчета.ЗапросПоШапкеДляПечатиОДВ_1(Ссылка, Дата).Выбрать();
	ВыборкаПоШапкеДокумента.Следующий();
	
	ВыборкаПоДаннымВзносов = ПроцедурыПерсонифицированногоУчета.ЗапросПоДаннымНачисленныхУплаченныхВзносовОДВ_1(Ссылка).Выбрать();
	ВыборкаУплаченныхВзносов = ПроцедурыПерсонифицированногоУчета.ЗапросПоДаннымРасшифровкиУплаченныхВзносовОДВ_1(Ссылка).Выбрать();
	
	// Загружаем формат файла сведений
	МакетФормата = ПолучитьОбщийМакет("ФорматПФР_2019");
	
	ФорматОДВ_1 = ПроцедурыПерсонифицированногоУчета.ЗагрузитьФорматНабораЗаписейдляПФР(МакетФормата, "ОДВ_1");
	
	НаборЗаписейДатаЗаполнения = Новый Структура("ДатаЗаполнения", ПроцедурыПерсонифицированногоУчета.СкопироватьСтруктуруДанных(ФорматОДВ_1.ДатаЗаполнения));
	ФорматОДВ_1.Удалить("ДатаЗаполнения");
	НаборЗаписейРуководитель = Новый Структура("Руководитель", ПроцедурыПерсонифицированногоУчета.СкопироватьСтруктуруДанных(ФорматОДВ_1.Руководитель));
	ФорматОДВ_1.Удалить("Руководитель");
	ФорматОснованияДНП = ПроцедурыПерсонифицированногоУчета.СкопироватьСтруктуруДанных(ФорматОДВ_1.ОснованияДНП.Значение);
	ФорматОДВ_1.Удалить("ОснованияДНП");
	ФорматУплата = ПроцедурыПерсонифицированногоУчета.СкопироватьСтруктуруДанных(ФорматОДВ_1.Уплата.Значение);
	ФорматОДВ_1.Удалить("Уплата");
	
	// Создаем начальное дерево
	ДеревоВыгрузки = ПроцедурыПерсонифицированногоУчета.СоздатьДеревоXML();
	
	Атрибуты = Новый Соответствие;
	Атрибуты.Вставить("xmlns", "http://пф.рф/ВС/СЗВ-КОРР/2018-03-22");
	Атрибуты.Вставить("xmlns:ВС2", "http://пф.рф/ВС/типы/2017-10-23");
	Атрибуты.Вставить("xmlns:АФ4", "http://пф.рф/АФ/2017-08-21");
	Атрибуты.Вставить("xmlns:УТ2", "http://пф.рф/УТ/2017-08-21");
	Атрибуты.Вставить("xmlns:РВ2", "http://пф.рф/ВС/РВ/типы/2017-12-27");
	Атрибуты.Вставить("xmlns:ИС4", "http://пф.рф/ВС/ИС/типы/2018-11-20");
	
	УзелПФР = ПроцедурыПерсонифицированногоУчета.ДобавитьУзелВДеревоXML(ДеревоВыгрузки, "ЭДПФР", "", Атрибуты);
	
	// Служебная информация о файле
	НаборЗаписейСлужебнаяИнформация = ПроцедурыПерсонифицированногоУчета.ЗагрузитьФорматНабораЗаписейдляПФР(МакетФормата, "СлужебнаяИнформация");
	Если ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ИмяФайлаДляПФР) Тогда
		ЧастиИмениФайла = ОбщегоНазначенияЗК.РазложитьСтрокуВМассивПодстрок(СокрЛП(ВыборкаПоШапкеДокумента.ИмяФайлаДляПФР),"_");
		НаборЗаписейСлужебнаяИнформация.АФ4__GUID.Значение = ЧастиИмениФайла[ЧастиИмениФайла.ВГраница()];
	КонецЕсли;
	НаборЗаписейСлужебнаяИнформация.АФ4__ДатаВремя.Значение = ПроцедурыПерсонифицированногоУчета.ПредставлениеДатыВФорматеdateTimeСЧасовымПоясом(ВыборкаПоШапкеДокумента.Дата);
	НаборЗаписейСлужебнаяИнформация.АФ4__ПрограммаПодготовки.Значение = ИсправленныйСимвольныйЭлемент("1С:" + РегламентированнаяОтчетность.ИДКонфигурации()) + " " + Метаданные.Версия;
	ПроцедурыПерсонифицированногоУчета.ДобавитьИнформациюВДерево(ПроцедурыПерсонифицированногоУчета.ДобавитьУзелВДеревоXML(УзелПФР, "СлужебнаяИнформация",""), НаборЗаписейСлужебнаяИнформация);
	
	// Данные формы и страхователя
	ФорматОДВ_1.Тип.Значение = 0;
	НаборЗаписейСтрахователь = ФорматОДВ_1.Страхователь.Значение;
	НаборЗаписейСтрахователь.ИС4__Наименование = ИсправленныйСимвольныйЭлемент(ВыборкаПоШапкеДокумента.НаименованиеСокращенное);
	НаборЗаписейСтрахователь.УТ2__РегНомер = ВыборкаПоШапкеДокумента.РегистрационныйНомерПФР;
	НаборЗаписейСтрахователь.УТ2__ИНН = ВыборкаПоШапкеДокумента.ИНН;
	Если ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.КПП) Тогда
		НаборЗаписейСтрахователь.УТ2__КПП = ВыборкаПоШапкеДокумента.КПП;
	Иначе
		НаборЗаписейСтрахователь.Удалить("УТ2__КПП");
		СтрокаПоляКПП = ФорматОДВ_1.Страхователь.Поля.Найти("УТ2__КПП", "ИмяПоля");
		Если СтрокаПоляКПП <> Неопределено Тогда
			ФорматОДВ_1.Страхователь.Поля.Удалить(СтрокаПоляКПП);
		КонецЕсли;
	КонецЕсли;
	НаборЗаписейОтчетныйПериод = ФорматОДВ_1.ОтчетныйПериод.Значение;
	НаборЗаписейОтчетныйПериод.Код = 0;
	НаборЗаписейОтчетныйПериод.Год = ВыборкаПоШапкеДокумента.Год;
	
	ФорматОДВ_1.КоличествоЗЛ.Значение = ВыборкаПоШапкеДокумента.КоличествоЗастрахованныхЛиц;
	
	Если ВыборкаПоДаннымВзносов.Следующий()  
		И (ВыборкаПоДаннымВзносов.ЕстьСтраховая Или ВыборкаПоДаннымВзносов.ЕстьНакопительная Или ВыборкаПоДаннымВзносов.ЕстьТарифСВ) Тогда 
		
		ФорматОДВ_1.Страховая.Значение.ИС4__ЗадолженностьНаНачало = ВыборкаПоДаннымВзносов.ЗадолженностьНаНачалоПериодаСтраховая;
		ФорматОДВ_1.Страховая.Значение.ИС4__Начислено = ВыборкаПоДаннымВзносов.НачисленоСтраховая;
		ФорматОДВ_1.Страховая.Значение.ИС4__Уплачено = ВыборкаПоДаннымВзносов.УплаченоСтраховая;
		ФорматОДВ_1.Страховая.Значение.ИС4__ЗадолженностьНаКонец = ВыборкаПоДаннымВзносов.ЗадолженностьНаКонецПериодаСтраховая;
		
		ФорматОДВ_1.Накопительная.Значение.ИС4__ЗадолженностьНаНачало = ВыборкаПоДаннымВзносов.ЗадолженностьНаНачалоПериодаНакопительная;
		ФорматОДВ_1.Накопительная.Значение.ИС4__Начислено = ВыборкаПоДаннымВзносов.НачисленоНакопительная;
		ФорматОДВ_1.Накопительная.Значение.ИС4__Уплачено = ВыборкаПоДаннымВзносов.УплаченоНакопительная;
		ФорматОДВ_1.Накопительная.Значение.ИС4__ЗадолженностьНаКонец = ВыборкаПоДаннымВзносов.ЗадолженностьНаКонецПериодаНакопительная;
		
		ФорматОДВ_1.ТарифСВ.Значение.ИС4__ЗадолженностьНаНачало = ВыборкаПоДаннымВзносов.ЗадолженностьНаНачалоПериодаТарифСВ;
		ФорматОДВ_1.ТарифСВ.Значение.ИС4__Начислено = ВыборкаПоДаннымВзносов.НачисленоТарифСВ;
		ФорматОДВ_1.ТарифСВ.Значение.ИС4__Уплачено = ВыборкаПоДаннымВзносов.УплаченоТарифСВ;
		ФорматОДВ_1.ТарифСВ.Значение.ИС4__ЗадолженностьНаКонец = ВыборкаПоДаннымВзносов.ЗадолженностьНаКонецПериодаТарифСВ;
		
	Иначе
		ФорматОДВ_1.Удалить("Страховая");
		ФорматОДВ_1.Удалить("Накопительная");
		ФорматОДВ_1.Удалить("ТарифСВ");
	КонецЕсли;
	
	УзелФормы = ПроцедурыПерсонифицированногоУчета.ДобавитьУзелВДеревоXML(УзелПФР, "ОДВ-1", "");
	ПроцедурыПерсонифицированногоУчета.ДобавитьИнформациюВДерево(УзелФормы, ФорматОДВ_1);
	
	Пока ВыборкаУплаченныхВзносов.Следующий() Цикл 
		НаборЗаписейТипУплата = ПроцедурыПерсонифицированногоУчета.СкопироватьСтруктуруДанных(ФорматУплата);
		НаборЗаписейТипУплата.ИС4__Год.Значение = ВыборкаУплаченныхВзносов.УплатаВзносовГод;
		НаборЗаписейТипУплата.ИС4__Страховая.Значение = ВыборкаУплаченныхВзносов.НаСтраховуюПенсию;
		НаборЗаписейТипУплата.ИС4__Накопительная.Значение = ВыборкаУплаченныхВзносов.НаНакопительнуюПенсию;
		НаборЗаписейТипУплата.ИС4__ТарифСВ.Значение = ВыборкаУплаченныхВзносов.ПоТарифуСтраховыхВзносов;
		УзелУплата = ПроцедурыПерсонифицированногоУчета.ДобавитьУзелВДеревоXML(УзелФормы, "Уплата", "");
		ПроцедурыПерсонифицированногоУчета.ДобавитьИнформациюВДерево(УзелУплата, НаборЗаписейТипУплата);
	КонецЦикла;
	
	НаборЗаписейРуководитель.Руководитель.Значение.Должность.Значение = ВРег(ВыборкаПоШапкеДокумента.ДолжностьРуководителя);
	ЗаполнитьФИОВНабореДанных(НаборЗаписейРуководитель.Руководитель.Значение.ФИО, ВыборкаПоШапкеДокумента.ФамилияРуководителя, ВыборкаПоШапкеДокумента.ИмяРуководителя, ВыборкаПоШапкеДокумента.ОтчествоРуководителя);
	ПроцедурыПерсонифицированногоУчета.ДобавитьИнформациюВДерево(УзелФормы, НаборЗаписейРуководитель);
	
	НаборЗаписейДатаЗаполнения.ДатаЗаполнения.Значение = Формат(ВыборкаПоШапкеДокумента.Дата, "ДФ=yyyy-MM-dd");
	ПроцедурыПерсонифицированногоУчета.ДобавитьИнформациюВДерево(УзелФормы, НаборЗаписейДатаЗаполнения);
	
	ВыборкаПоШапкеДокумента = ЗапросПоШапкеДляПечати().Выбрать();
	ВыборкаПоШапкеДокумента.Следующий();
	
	ВыборкаПоРаботникам = ЗапросПоСотрудникамДляПечати().Выбрать();
	ВыборкаПоДоходамВзносам = ЗапросПоЗаработкуИВзносамДляПечати().Выбрать();
	ВыборкаПоДоходамНаВредныхИТяжелыхРаботах = ЗапросПоДоходамЗанятыхНаВредныхИТяжелыхРаботахДляПечати().Выбрать();
	
	КодыМесяцев = КодыМесяцевСЗВ_КОРР();
	ПервыйМесяц = Месяц(ВыборкаПоШапкеДокумента.КорректируемыйПериод);
	ПоследнийМесяц = Месяц(ПроцедурыПерсонифицированногоУчета.ОкончаниеОтчетногоПериодаПерсучета(ВыборкаПоШапкеДокумента.КорректируемыйПериод));

	ФорматСЗВ_КОРР = ПроцедурыПерсонифицированногоУчета.ЗагрузитьФорматНабораЗаписейдляПФР(МакетФормата, "СЗВ_КОРР");
	
	Если Не ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.КПП) Тогда
		ФорматСЗВ_КОРР.Страхователь.Значение.Удалить("УТ2__КПП");
		СтрокаПоляКПП = ФорматСЗВ_КОРР.Страхователь.Поля.Найти("УТ2__КПП", "ИмяПоля");
		Если СтрокаПоляКПП <> Неопределено Тогда
			ФорматСЗВ_КОРР.Страхователь.Поля.Удалить(СтрокаПоляКПП);
		КонецЕсли;
	КонецЕсли;
	
	ФорматСЗВ_КОРР.КорректируемыйПериод.Значение.Страхователь.Значение.Удалить("ИС4__Наименование");
	СтрокаПоляНаименование = ФорматСЗВ_КОРР.КорректируемыйПериод.Значение.Страхователь.Поля.Найти("ИС4__Наименование", "ИмяПоля");
	Если СтрокаПоляНаименование <> Неопределено Тогда
		ФорматСЗВ_КОРР.КорректируемыйПериод.Значение.Страхователь.Поля.Удалить(СтрокаПоляНаименование);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.КППвКорректируемыйПериод) Тогда
		
		ФорматСЗВ_КОРР.КорректируемыйПериод.Значение.Страхователь.Значение.Удалить("УТ2__КПП");
		СтрокаПоляКПП = ФорматСЗВ_КОРР.КорректируемыйПериод.Значение.Страхователь.Поля.Найти("УТ2__КПП", "ИмяПоля");
		Если СтрокаПоляКПП <> Неопределено Тогда
			ФорматСЗВ_КОРР.КорректируемыйПериод.Значение.Страхователь.Поля.Удалить(СтрокаПоляКПП);
		КонецЕсли;
	КонецЕсли;
	
	ФорматЗЛ = Новый Структура("ЗЛ", ПроцедурыПерсонифицированногоУчета.СкопироватьСтруктуруДанных(ФорматСЗВ_КОРР.ЗЛ));
	ФорматЗЛ.ЗЛ.Значение.Удалить("СтажевыйПериод");
	ФорматЗЛ.ЗЛ.Значение.Удалить("ДатаУвольнения");
	ФорматСЗВ_КОРР.Удалить("ЗЛ");
	
	ФорматДанныеЗЛ = Новый Структура("ДанныеЗЛ", ПроцедурыПерсонифицированногоУчета.СкопироватьСтруктуруДанных(ФорматСЗВ_КОРР.ДанныеЗЛ));
	ФорматСЗВ_КОРР.Удалить("ДанныеЗЛ");
	
	ФорматСуммы = Новый Структура("Суммы", ПроцедурыПерсонифицированногоУчета.СкопироватьСтруктуруДанных(ФорматСЗВ_КОРР.Суммы));
	ФорматСЗВ_КОРР.Удалить("Суммы");
	
	ФорматВыплатыДТ = Новый Структура("ВыплатыДТ", ПроцедурыПерсонифицированногоУчета.СкопироватьСтруктуруДанных(ФорматСЗВ_КОРР.ВыплатыДТ));
	ФорматСЗВ_КОРР.Удалить("ВыплатыДТ");
	
	ФорматСтажевыйПериод = ПроцедурыПерсонифицированногоУчета.СкопироватьСтруктуруДанных(ФорматСЗВ_КОРР.СтажевыйПериод.Значение);
	ФорматСЗВ_КОРР.Удалить("СтажевыйПериод");
	
	НаборЗаписейДатаУвольнения = Новый Структура("ДатаУвольнения", ПроцедурыПерсонифицированногоУчета.СкопироватьСтруктуруДанных(ФорматСЗВ_КОРР.ДатаУвольнения));
	ФорматСЗВ_КОРР.Удалить("ДатаУвольнения");

	Пока ВыборкаПоРаботникам.СледующийПоЗначениюПоля("НомерСтроки") Цикл
		
		// Данные формы и страхователя
		НаборЗаписейСтрахователь = ФорматСЗВ_КОРР.Страхователь.Значение;
		НаборЗаписейСтрахователь.ИС4__Наименование = ВРег(ВыборкаПоШапкеДокумента.НаименованиеСокращенное);
		НаборЗаписейСтрахователь.УТ2__РегНомер = ВыборкаПоШапкеДокумента.РегистрационныйНомерПФР;
		НаборЗаписейСтрахователь.УТ2__ИНН = ВыборкаПоШапкеДокумента.ИНН;
		Если ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.КПП) Тогда
			НаборЗаписейСтрахователь.УТ2__КПП = ВыборкаПоШапкеДокумента.КПП;
		КонецЕсли;
		
		НаборЗаписейОтчетныйПериод = ФорматСЗВ_КОРР.ОтчетныйПериод.Значение;
		НаборЗаписейОтчетныйПериод.Код = ПроцедурыПерсонифицированногоУчета.КодОтчетногоПериода(ВыборкаПоШапкеДокумента.ОтчетныйПериод);
		НаборЗаписейОтчетныйПериод.Год = Год(ВыборкаПоШапкеДокумента.ОтчетныйПериод);
		
		Если ВыборкаПоШапкеДокумента.ТипСведений = Перечисления.ТипыСведенийСЗВ_КОРР.Корректирующая Тогда
			ФорматСЗВ_КОРР.Тип.Значение = 0;
		ИначеЕсли ВыборкаПоШапкеДокумента.ТипСведений = Перечисления.ТипыСведенийСЗВ_КОРР.Отменяющая Тогда
			ФорматСЗВ_КОРР.Тип.Значение = 1;
		ИначеЕсли ВыборкаПоШапкеДокумента.ТипСведений = Перечисления.ТипыСведенийСЗВ_КОРР.Особая Тогда
			ФорматСЗВ_КОРР.Тип.Значение = 2;
		КонецЕсли;
		
		НаборЗаписейКорректируемыйПериод = ФорматСЗВ_КОРР.КорректируемыйПериод.Значение;
		НаборЗаписейКорректируемыйПериод.ОтчетныйПериод.Значение.Код = ПроцедурыПерсонифицированногоУчета.КодОтчетногоПериода(ВыборкаПоШапкеДокумента.КорректируемыйПериод);
		НаборЗаписейКорректируемыйПериод.ОтчетныйПериод.Значение.Год = Год(ВыборкаПоШапкеДокумента.КорректируемыйПериод);
		
		НаборЗаписейКорректируемыйПериод.Страхователь.Значение.УТ2__РегНомер = ВыборкаПоШапкеДокумента.РегистрационныйНомерПФРвКорректируемыйПериод;
		НаборЗаписейКорректируемыйПериод.Страхователь.Значение.УТ2__ИНН = ВыборкаПоШапкеДокумента.ИННвКорректируемыйПериод;
		Если ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.КППвКорректируемыйПериод) Тогда
			НаборЗаписейКорректируемыйПериод.Страхователь.Значение.УТ2__КПП = ВыборкаПоШапкеДокумента.КППвКорректируемыйПериод;
		КонецЕсли;
		
		УзелФормы = ПроцедурыПерсонифицированногоУчета.ДобавитьУзелВДеревоXML(УзелПФР, "СЗВ-КОРР", "");
		ПроцедурыПерсонифицированногоУчета.ДобавитьИнформациюВДерево(УзелФормы, ФорматСЗВ_КОРР);
		
		// Данные по физлицу
		НаборЗаписейЗЛ = ПроцедурыПерсонифицированногоУчета.СкопироватьСтруктуруДанных(ФорматЗЛ);
		ЗаполнитьФИОВНабореДанных(НаборЗаписейЗЛ.ЗЛ.Значение.ФИО, ВыборкаПоРаботникам.Фамилия, ВыборкаПоРаботникам.Имя, ВыборкаПоРаботникам.Отчество);
		НаборЗаписейЗЛ.ЗЛ.Значение.СНИЛС.Значение = ВыборкаПоРаботникам.СтраховойНомерПФР;
		ПроцедурыПерсонифицированногоУчета.ДобавитьИнформациюВДерево(УзелФормы, НаборЗаписейЗЛ);
		
		// Данные ЗЛ
		НаборЗаписейДанныеЗЛ = ПроцедурыПерсонифицированногоУчета.СкопироватьСтруктуруДанных(ФорматДанныеЗЛ);
		
		Если ЗначениеЗаполнено(ВыборкаПоРаботникам.КодКатегории) Тогда
			НаборЗаписейДанныеЗЛ.ДанныеЗЛ.Значение.Категория.Значение = ВыборкаПоРаботникам.КодКатегории;
		Иначе
			НаборЗаписейДанныеЗЛ.ДанныеЗЛ.Значение.Удалить("Категория");
		КонецЕсли;
		
		Если ВыборкаПоРаботникам.ДополнительныйТариф Тогда
			НаборЗаписейДанныеЗЛ.ДанныеЗЛ.Значение.КодДТ.Значение = "АВИА";
		Иначе 
			НаборЗаписейДанныеЗЛ.ДанныеЗЛ.Значение.Удалить("КодДТ");
		КонецЕсли;
		
		НаборЗаписейДоговор = НаборЗаписейДанныеЗЛ.ДанныеЗЛ.Значение.Договор.Значение;
		Если ЗначениеЗаполнено(ВыборкаПоРаботникам.ТипДоговора) Тогда
			НаборЗаписейДоговор.Тип.Значение = ВыборкаПоРаботникам.ТипДоговора;
		Иначе
			НаборЗаписейДоговор.Удалить("Тип");
		КонецЕсли;
		Если ЗначениеЗаполнено(ВыборкаПоРаботникам.НомерДоговора) Тогда 
			НаборЗаписейДоговор.Реквизиты.Значение.УТ2__Дата = ВыборкаПоРаботникам.ДатаДоговора;
			НаборЗаписейДоговор.Реквизиты.Значение.УТ2__Номер = ВыборкаПоРаботникам.НомерДоговора;
		Иначе 
			НаборЗаписейДоговор.Удалить("Реквизиты");
		КонецЕсли;
		
		Если Не (ЗначениеЗаполнено(ВыборкаПоРаботникам.ТипДоговора) Или ЗначениеЗаполнено(ВыборкаПоРаботникам.НомерДоговора)) Тогда
			НаборЗаписейДанныеЗЛ.ДанныеЗЛ.Значение.Удалить("Договор");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(НаборЗаписейДанныеЗЛ.ДанныеЗЛ.Значение) Тогда
			ПроцедурыПерсонифицированногоУчета.ДобавитьИнформациюВДерево(УзелФормы, НаборЗаписейДанныеЗЛ);
		КонецЕсли;
		
		СтруктураПоиска = Новый Структура("Ссылка, ИдентификаторСтроки, Месяц");
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, ВыборкаПоРаботникам);
		
		// Суммы
		Для Сч = ПервыйМесяц По ПоследнийМесяц Цикл 
			СтруктураПоиска.Месяц = Сч;
			НаборЗаписейСуммы = ПроцедурыПерсонифицированногоУчета.СкопироватьСтруктуруДанных(ФорматСуммы);
			НаборЗаписейСуммы.Суммы.Значение.Месяц.Значение = КодыМесяцев[Сч];
			ВыводитьВФайл = Ложь;
			
			Если ВыборкаПоДоходамВзносам.НайтиСледующий(СтруктураПоиска) Тогда
				Если ВыборкаПоДоходамВзносам.Заработок <> 0
					Или ВыборкаПоДоходамВзносам.ОблагаетсяВзносамиДоПредельнойВеличины <> 0
					Или ВыборкаПоДоходамВзносам.ПоДоговорамГПХДоПредельнойВеличины <> 0
					Или ВыборкаПоДоходамВзносам.ОблагаетсяВзносамиСвышеПредельнойВеличины <> 0
					Или ВыборкаПоДоходамВзносам.ПоДоговорамГПХСвышеПредельнойВеличины <> 0 Тогда
					НаборЗаписейВыплаты = НаборЗаписейСуммы.Суммы.Значение.Выплаты.Значение;
					НаборЗаписейВыплаты.СуммаВыплат.Значение = ВыборкаПоДоходамВзносам.Заработок;
					НаборЗаписейВыплаты.НеПревышающие.Значение.Всего = ВыборкаПоДоходамВзносам.ОблагаетсяВзносамиДоПредельнойВеличины;
					НаборЗаписейВыплаты.НеПревышающие.Значение.ПоГПД = ВыборкаПоДоходамВзносам.ПоДоговорамГПХДоПредельнойВеличины;
					НаборЗаписейВыплаты.Превышающие.Значение.Всего = ВыборкаПоДоходамВзносам.ОблагаетсяВзносамиСвышеПредельнойВеличины;
					НаборЗаписейВыплаты.Превышающие.Значение.ПоГПД = ВыборкаПоДоходамВзносам.ПоДоговорамГПХСвышеПредельнойВеличины;
					Если ВыборкаПоДоходамВзносам.ОблагаетсяВзносамиДоПредельнойВеличины = 0 Тогда 
						НаборЗаписейВыплаты.Удалить("НеПревышающие");
					КонецЕсли;
					Если ВыборкаПоДоходамВзносам.ОблагаетсяВзносамиСвышеПредельнойВеличины = 0 Тогда 
						НаборЗаписейВыплаты.Удалить("Превышающие");
					КонецЕсли;
					ВыводитьВФайл = Истина;
				Иначе
					НаборЗаписейСуммы.Суммы.Значение.Удалить("Выплаты");
				КонецЕсли;
				
				Если ВыборкаПоДоходамВзносам.УплачиваемыеСтрахователем <> 0
					Или ВыборкаПоДоходамВзносам.УплачиваемыеИзЗаработкаЗЛ <> 0
					Или ВыборкаПоДоходамВзносам.ДоначисленоСтраховая <> 0
					Или ВыборкаПоДоходамВзносам.ДоначисленоНакопительная <> 0
					Или ВыборкаПоДоходамВзносам.ДоначисленоНаОПС <> 0 Тогда
					НаборЗаписейДоначисленоСВ = НаборЗаписейСуммы.Суммы.Значение.ДоначисленоСВ.Значение;
					Если ВыборкаПоШапкеДокумента.КорректируемыйПериод < '20020101' Тогда 
						НаборЗаписейДоначисленоСВ.СВстрахователя.Значение = ВыборкаПоДоходамВзносам.УплачиваемыеСтрахователем;
						НаборЗаписейДоначисленоСВ.СВизЗаработка.Значение = ВыборкаПоДоходамВзносам.УплачиваемыеИзЗаработкаЗЛ;
						НаборЗаписейДоначисленоСВ.Удалить("Страховая");
						НаборЗаписейДоначисленоСВ.Удалить("Накопительная");
						НаборЗаписейДоначисленоСВ.Удалить("СВпоТарифу");
					ИначеЕсли ВыборкаПоШапкеДокумента.КорректируемыйПериод < '20140101'Тогда 
						НаборЗаписейДоначисленоСВ.Страховая.Значение = ВыборкаПоДоходамВзносам.ДоначисленоСтраховая;
						НаборЗаписейДоначисленоСВ.Накопительная.Значение = ВыборкаПоДоходамВзносам.ДоначисленоНакопительная;
						НаборЗаписейДоначисленоСВ.Удалить("СВстрахователя");
						НаборЗаписейДоначисленоСВ.Удалить("СВизЗаработка");
						НаборЗаписейДоначисленоСВ.Удалить("СВпоТарифу");
					Иначе
						НаборЗаписейДоначисленоСВ.СВпоТарифу.Значение = ВыборкаПоДоходамВзносам.ДоначисленоНаОПС;
						НаборЗаписейДоначисленоСВ.Удалить("СВстрахователя");
						НаборЗаписейДоначисленоСВ.Удалить("СВизЗаработка");
						НаборЗаписейДоначисленоСВ.Удалить("Страховая");
						НаборЗаписейДоначисленоСВ.Удалить("Накопительная");
					КонецЕсли;
					ВыводитьВФайл = Истина;
				Иначе
					НаборЗаписейСуммы.Суммы.Значение.Удалить("ДоначисленоСВ");
				КонецЕсли;
				
				Если ВыборкаПоДоходамВзносам.УплаченоСтраховая <> 0 
					Или ВыборкаПоДоходамВзносам.УплаченоНакопительная <> 0 Тогда
					НаборЗаписейУплата = НаборЗаписейСуммы.Суммы.Значение.Уплата.Значение;
					НаборЗаписейУплата.Страховая = ВыборкаПоДоходамВзносам.УплаченоСтраховая;
					НаборЗаписейУплата.Накопительная = ВыборкаПоДоходамВзносам.УплаченоНакопительная;
					ВыводитьВФайл = Истина;
				Иначе
					НаборЗаписейСуммы.Суммы.Значение.Удалить("Уплата");
				КонецЕсли;
				
			КонецЕсли;
			
			Если ВыводитьВФайл Тогда 
				ПроцедурыПерсонифицированногоУчета.ДобавитьИнформациюВДерево(УзелФормы, НаборЗаписейСуммы);
			КонецЕсли;
		КонецЦикла;
		
		// ВыплатыДТ
		Для Сч = ПервыйМесяц По ПоследнийМесяц Цикл
			СтруктураПоиска.Месяц = Сч;
			Пока ВыборкаПоДоходамНаВредныхИТяжелыхРаботах.НайтиСледующий(СтруктураПоиска) Цикл
				НаборЗаписейВыплатыДТ = ПроцедурыПерсонифицированногоУчета.СкопироватьСтруктуруДанных(ФорматВыплатыДТ);
				НаборЗаписейВыплатыДТ.ВыплатыДТ.Значение.Месяц = КодыМесяцев[Сч];
				НаборЗаписейВыплатыДТ.ВыплатыДТ.Значение.КодСОУТ = ВыборкаПоДоходамНаВредныхИТяжелыхРаботах.КодКлассаУсловийТруда;
				НаборЗаписейВыплатыДТ.ВыплатыДТ.Значение.ИС4__ДопТарифП1 = ВыборкаПоДоходамНаВредныхИТяжелыхРаботах.ОблагаетсяВзносамиЗаЗанятыхНаПодземныхИВредныхРаботах;
				НаборЗаписейВыплатыДТ.ВыплатыДТ.Значение.ИС4__ДопТарифП2_18 = ВыборкаПоДоходамНаВредныхИТяжелыхРаботах.ОблагаетсяВзносамиЗаЗанятыхНаТяжелыхИПрочихРаботах;
				ПроцедурыПерсонифицированногоУчета.ДобавитьИнформациюВДерево(УзелФормы, НаборЗаписейВыплатыДТ);
			КонецЦикла;
		КонецЦикла;
		
		ВписатьЗаписиОСтажеВНаборДанных2019(УзелФормы, ПроцедурыПерсонифицированногоУчета.СкопироватьСтруктуруДанных(ФорматСтажевыйПериод), ВыборкаПоРаботникам);
		
	КонецЦикла;
	
	// Преобразуем дерево в строковое описание XML
	ПотокВыгрузкиXML = ПроцедурыПерсонифицированногоУчета.СоздатьПотокXML(, "UTF-8");
	СправкиПоНДФЛ.ЗаписатьУзелДереваXMLВXML(ДеревоВыгрузки, ПотокВыгрузкиXML, "xsi", "http://www.w3.org/2001/XMLSchema-instance");
	ТекстФайла = ПроцедурыПерсонифицированногоУчета.ЗаписатьПотокXML(ПотокВыгрузкиXML);
	
	Возврат СтрЗаменить(ТекстФайла, "__", ":");
	
КонецФункции

Процедура ЗаполнитьФИОВНабореДанных(ФорматФИО, Фамилия, Имя, Отчество) 	
	
	НаборЗаписейФИО = ФорматФИО.Значение;
	ОписаниеПолей = ФорматФИО.Поля;
	ФИО = Новый Соответствие;
	ФИО.Вставить("Фамилия", Фамилия);
	ФИО.Вставить("Имя", Имя);
	ФИО.Вставить("Отчество", Отчество);
	
	Для Каждого ЧастьИмени Из ФИО Цикл
		ИмяПоля = "УТ2__" + ЧастьИмени.Ключ;
		Если ПустаяСтрока(ЧастьИмени.Значение) Тогда
			НаборЗаписейФИО.Удалить(ИмяПоля);
			СтрокаКУдалению = ОписаниеПолей.Найти(ИмяПоля, "ИмяПоля");
			Если СтрокаКУдалению <> Неопределено Тогда
				ОписаниеПолей.Удалить(СтрокаКУдалению);
			КонецЕсли;
		Иначе
			НаборЗаписейФИО[ИмяПоля] = ВРег(СокрЛП(ЧастьИмени.Значение));
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ВписатьЗаписиОСтажеВНаборДанных(УзелСотрудника, ФорматСтажевыйПериод, ВыборкаПоРаботникам) 
	
	ФорматЛьготныйСтаж = ФорматСтажевыйПериод.ИС2__ЛьготныйСтаж.Значение;
	ФорматСтажевыйПериод.Удалить("ИС2__ЛьготныйСтаж");
	
	Если ЗначениеЗаполнено(ВыборкаПоРаботникам.НомерОсновнойЗаписи) Тогда
		
		Пока ВыборкаПоРаботникам.СледующийПоЗначениюПоля("НомерОсновнойЗаписи") Цикл
			
			ДанныеОсновнойЗаписи = Новый Структура(ИменаПолейДанныхПоСотрудникам);
			ЗаполнитьЗначенияСвойств(ДанныеОсновнойЗаписи, ВыборкаПоРаботникам);

			УзелСтажевыйПериод = ПроцедурыПерсонифицированногоУчета.ДобавитьУзелВДеревоXML(УзелСотрудника, "СтажевыйПериод", "");
			ПроцедурыПерсонифицированногоУчета.ДобавитьИнформациюВДерево(УзелСтажевыйПериод, ФорматСтажевыйПериод);
			
			УзелСтажевыйПериод.Строки.Найти("ИС2__Период").Строки.Найти("УТ2__С").Значение = Формат(ВыборкаПоРаботникам.ДатаНачалаПериода, "ДФ=yyyy-MM-dd");
			УзелСтажевыйПериод.Строки.Найти("ИС2__Период").Строки.Найти("УТ2__По").Значение = Формат(ВыборкаПоРаботникам.ДатаОкончанияПериода, "ДФ=yyyy-MM-dd");
			
			НаборЗаписейЛьготныйСтаж = ПроцедурыПерсонифицированногоУчета.СкопироватьСтруктуруДанных(ФорматЛьготныйСтаж);
			
			ВыводитьЛьготныйСтаж = Ложь;
			НеВыводитьВФайлТУ = Ложь;
			НеВыводитьВФайлОУТ = Ложь;
			НеВыводитьВФайлИС = Ложь;
			НеВыводитьВФайлДопСведенияИС = Ложь;
			НеВыводитьВФайлВЛ = Ложь;
			
			Если ЗначениеЗаполнено(ВыборкаПоРаботникам.ЗамещениеГосударственныхМуниципальныхДолжностей) Тогда
				НаборЗаписейЛьготныйСтаж.ИС2__ДопСведенияИС.Значение = ВыборкаПоРаботникам.ЗамещениеГосударственныхМуниципальныхДолжностей;
				ВыводитьЛьготныйСтаж = Истина;
			ИначеЕсли ЗначениеЗаполнено(ВыборкаПоРаботникам.ТретийПараметрИсчисляемогоСтажа) Тогда
				НаборЗаписейЛьготныйСтаж.ИС2__ДопСведенияИС.Значение = ВыборкаПоРаботникам.ТретийПараметрИсчисляемогоСтажаКод;
				ВыводитьЛьготныйСтаж = Истина;
			Иначе
				НеВыводитьВФайлДопСведенияИС = Истина;
			КонецЕсли;
			
			ВывестиЗаписиЛьготногоСтажа(ВыборкаПоРаботникам, УзелСтажевыйПериод, НаборЗаписейЛьготныйСтаж, ВыводитьЛьготныйСтаж, НеВыводитьВФайлТУ, НеВыводитьВФайлОУТ, НеВыводитьВФайлИС, НеВыводитьВФайлДопСведенияИС, НеВыводитьВФайлВЛ);
			
			Пока ВыборкаПоРаботникам.СледующийПоЗначениюПоля("НомерДополнительнойЗаписи")	Цикл
				
				//В дополнительной записи с номером 0 находится информация об основной записи
				Если ВыборкаПоРаботникам.НомерДополнительнойЗаписи = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				НаборЗаписейЛьготныйСтаж = ПроцедурыПерсонифицированногоУчета.СкопироватьСтруктуруДанных(ФорматЛьготныйСтаж);
				
				// Территориальные условия
				Если Не ЗначениеЗаполнено(ВыборкаПоРаботникам.ТерриториальныеУсловия) Тогда
					НаборЗаписейЛьготныйСтаж.Удалить("ИС2__ТУ")
				Иначе
					НаборЗаписейДопТерриториальныеУсловия = НаборЗаписейЛьготныйСтаж.ИС2__ТУ.Значение;
					НаборЗаписейДопТерриториальныеУсловия.ИС2__Основание = СокрЛП(ВыборкаПоРаботникам.ТерриториальныеУсловияКод);
					ПроцедурыПерсонифицированногоУчета.ВписатьСтавкуВНаборДанныхТеррУсловий(ВыборкаПоРаботникам.ТерриториальныеУсловия, ВыборкаПоРаботникам.ТерриториальныеУсловияСтавка, НаборЗаписейЛьготныйСтаж.ИС2__ТУ);
				КонецЕсли;
				
				// Особые условия труда
				Если Не ЗначениеЗаполнено(ВыборкаПоРаботникам.ОсобыеУсловияТруда) И Не ЗначениеЗаполнено(ВыборкаПоРаботникам.КодПозицииСпискаКод) Тогда
					НаборЗаписейЛьготныйСтаж.Удалить("ИС2__ОУТ")
				Иначе
					НаборЗаписейДопОсобыеУсловияТруда = НаборЗаписейЛьготныйСтаж.ИС2__ОУТ.Значение;
					НаборЗаписейДопОсобыеУсловияТруда.ИС2__Код = СокрЛП(ВыборкаПоРаботникам.ОсобыеУсловияТрудаКод);
					НаборЗаписейДопОсобыеУсловияТруда.ИС2__ПозицияСписка = ИсправленныйСимвольныйЭлемент(СокрЛП(ВыборкаПоРаботникам.КодПозицииСпискаКод));
				КонецЕсли;
				
				// Исчисляемый стаж
				НаборЗаписейДопИсчисляемыйСтаж = НаборЗаписейЛьготныйСтаж.ИС2__ИС.Значение;
				НеВыводитьВФайлВыработкаВЧасахИС = Ложь;
				НеВыводитьВФайлВыработкаКалендарнаяИС = Ложь;
				Если ВыборкаПоРаботникам.ОснованиеИсчисляемогоСтажа = Справочники.ОснованияИсчисляемогоТрудовогоСтажа.ВОДОЛАЗ Тогда
					НаборЗаписейВыработкаВЧасах = НаборЗаписейДопИсчисляемыйСтаж.ВС2__ВыработкаВЧасах.Значение;
					НаборЗаписейВыработкаВЧасах.ВС2__Часы = ВыборкаПоРаботникам.ПервыйПараметрИсчисляемогоСтажа;
					НаборЗаписейВыработкаВЧасах.ВС2__Минуты = ВыборкаПоРаботникам.ВторойПараметрИсчисляемогоСтажа;
					НеВыводитьВФайлВыработкаКалендарнаяИС = Истина;
				ИначеЕсли ВыборкаПоРаботникам.ПервыйПараметрИсчисляемогоСтажа > 0 
					ИЛИ ВыборкаПоРаботникам.ВторойПараметрИсчисляемогоСтажа > 0 Тогда
					
					НаборЗаписейДопВыработкаКалендарная = НаборЗаписейДопИсчисляемыйСтаж.ВС2__ВыработкаКалендарная.Значение;
					НаборЗаписейДопВыработкаКалендарная.ВС2__ВсеМесяцы = ВыборкаПоРаботникам.ПервыйПараметрИсчисляемогоСтажа;
					НаборЗаписейДопВыработкаКалендарная.ВС2__ВсеДни = ВыборкаПоРаботникам.ВторойПараметрИсчисляемогоСтажа;
					НеВыводитьВФайлВыработкаВЧасахИС = Истина;
				Иначе
					НеВыводитьВФайлВыработкаВЧасахИС = Истина;
					НеВыводитьВФайлВыработкаКалендарнаяИС = Истина;
				КонецЕсли;
				Если НеВыводитьВФайлВыработкаВЧасахИС Тогда
					НаборЗаписейДопИсчисляемыйСтаж.Удалить("ВС2__ВыработкаВЧасах")
				КонецЕсли;
				Если НеВыводитьВФайлВыработкаКалендарнаяИС Тогда
					НаборЗаписейДопИсчисляемыйСтаж.Удалить("ВС2__ВыработкаКалендарная")
				КонецЕсли;
				Если ЗначениеЗаполнено(ВыборкаПоРаботникам.ОснованиеИсчисляемогоСтажа) Тогда
					НаборЗаписейДопИсчисляемыйСтаж.ИС2__Основание.Значение = ИсправленныйСимвольныйЭлемент(СокрЛП(ВыборкаПоРаботникам.ОснованиеИсчисляемогоСтажаКод));
				ИначеЕсли НеВыводитьВФайлВыработкаВЧасахИС И НеВыводитьВФайлВыработкаКалендарнаяИС Тогда
					НаборЗаписейЛьготныйСтаж.Удалить("ИС2__ИС")
				Иначе
					НаборЗаписейДопИсчисляемыйСтаж.Удалить("ИС2__Основание")
				КонецЕсли;
				
				// Выслуга лет
				НаборЗаписейДопВыслугаЛет = НаборЗаписейЛьготныйСтаж.ИС2__ВЛ.Значение;
				Если ЗначениеЗаполнено(ВыборкаПоРаботникам.ОснованиеВыслугиЛет) Тогда
					НаборЗаписейДопВыслугаЛет.ИС2__Основание.Значение = ИсправленныйСимвольныйЭлемент(СокрЛП(ВыборкаПоРаботникам.ОснованиеВыслугиЛетКод));
					ПроцедурыПерсонифицированногоУчета.ВписатьСтавкуВНаборДанныхИсчисляемогоСтажа(ВыборкаПоРаботникам.ТретийПараметрВыслугиЛет, НаборЗаписейДопВыслугаЛет);
					НеВыводитьВФайлВыработкаВЧасахВЛ = Ложь;
					НеВыводитьВФайлВыработкаКалендарнаяВЛ = Ложь;
					Если ВыборкаПоРаботникам.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.Ст27_15 Тогда
						НеВыводитьВФайлВыработкаВЧасахВЛ = Истина;
						НаборЗаписейВыработкаКалендарная = НаборЗаписейДопВыслугаЛет.ВС2__ВыработкаКалендарная.Значение;
						НаборЗаписейВыработкаКалендарная.ВС2__ВсеМесяцы = ВыборкаПоРаботникам.ПервыйПараметрВыслугиЛет;
						НаборЗаписейВыработкаКалендарная.ВС2__ВсеДни = ВыборкаПоРаботникам.ВторойПараметрВыслугиЛет;
					Иначе
						НеВыводитьВФайлВыработкаКалендарнаяВЛ = Истина;
						НаборЗаписейДопВыработкаВЧасах = НаборЗаписейДопВыслугаЛет.ВС2__ВыработкаВЧасах.Значение;
						НаборЗаписейДопВыработкаВЧасах.ВС2__Часы = ВыборкаПоРаботникам.ПервыйПараметрВыслугиЛет;
						НаборЗаписейДопВыработкаВЧасах.ВС2__Минуты = ВыборкаПоРаботникам.ВторойПараметрВыслугиЛет;
					КонецЕсли;
					Если НеВыводитьВФайлВыработкаВЧасахВЛ Тогда
						НаборЗаписейДопВыслугаЛет.Удалить("ВС2__ВыработкаВЧасах")
					КонецЕсли;
					Если НеВыводитьВФайлВыработкаКалендарнаяВЛ Тогда
						НаборЗаписейДопВыслугаЛет.Удалить("ВС2__ВыработкаКалендарная")
					КонецЕсли;
				Иначе
					НаборЗаписейЛьготныйСтаж.Удалить("ИС2__ВЛ")
				КонецЕсли;
				
				// ДопСведенияИС
				Если ЗначениеЗаполнено(ВыборкаПоРаботникам.ТретийПараметрИсчисляемогоСтажа) Тогда
					НаборЗаписейЛьготныйСтаж.ИС2__ДопСведенияИС.Значение = Строка(ВыборкаПоРаботникам.ТретийПараметрИсчисляемогоСтажаКод);
				Иначе	
					НаборЗаписейЛьготныйСтаж.Удалить("ИС2__ДопСведенияИС")
				КонецЕсли;
				
				УзелЛьготныйСтаж = ПроцедурыПерсонифицированногоУчета.ДобавитьУзелВДеревоXML(УзелСтажевыйПериод, "ИС2__ЛьготныйСтаж", "");
				ПроцедурыПерсонифицированногоУчета.ДобавитьИнформациюВДерево(УзелЛьготныйСтаж, НаборЗаписейЛьготныйСтаж);
				
			КонецЦикла;
			
			Если ЗначениеЗаполнено(ДанныеОсновнойЗаписи.ТретийПараметрИсчисляемогоСтажа) 
				И ЗначениеЗаполнено(ДанныеОсновнойЗаписи.ЗамещениеГосударственныхМуниципальныхДолжностей) Тогда
				
				УзелСтажевыйПериод = ПроцедурыПерсонифицированногоУчета.ДобавитьУзелВДеревоXML(УзелСотрудника, "СтажевыйПериод", "");
				ПроцедурыПерсонифицированногоУчета.ДобавитьИнформациюВДерево(УзелСтажевыйПериод, ФорматСтажевыйПериод);
				
				УзелСтажевыйПериод.Строки.Найти("ИС2__Период").Строки.Найти("УТ2__С").Значение = Формат(ДанныеОсновнойЗаписи.ДатаНачалаПериода, "ДФ=yyyy-MM-dd");
				УзелСтажевыйПериод.Строки.Найти("ИС2__Период").Строки.Найти("УТ2__По").Значение = Формат(ДанныеОсновнойЗаписи.ДатаОкончанияПериода, "ДФ=yyyy-MM-dd");
				
				НаборЗаписейЛьготныйСтаж = ПроцедурыПерсонифицированногоУчета.СкопироватьСтруктуруДанных(ФорматЛьготныйСтаж);
				НаборЗаписейЛьготныйСтаж.ИС2__ДопСведенияИС.Значение = ДанныеОсновнойЗаписи.ТретийПараметрИсчисляемогоСтажаКод;
				
				ВыводитьЛьготныйСтаж = Истина;
				НеВыводитьВФайлТУ = Ложь;
				НеВыводитьВФайлОУТ = Ложь;
				НеВыводитьВФайлИС = Ложь;
				НеВыводитьВФайлДопСведенияИС = Ложь;
				НеВыводитьВФайлВЛ = Ложь;
				
				ВывестиЗаписиЛьготногоСтажа(ДанныеОсновнойЗаписи, УзелСтажевыйПериод, НаборЗаписейЛьготныйСтаж, ВыводитьЛьготныйСтаж, НеВыводитьВФайлТУ, НеВыводитьВФайлОУТ, НеВыводитьВФайлИС, НеВыводитьВФайлДопСведенияИС, НеВыводитьВФайлВЛ);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВывестиЗаписиЛьготногоСтажа(ВыборкаПоРаботникам, УзелСтажевыйПериод, НаборЗаписейЛьготныйСтаж, ВыводитьЛьготныйСтаж, НеВыводитьВФайлТУ, НеВыводитьВФайлОУТ, НеВыводитьВФайлИС, НеВыводитьВФайлДопСведенияИС, НеВыводитьВФайлВЛ)
	
	ПараметрыСтажаСПравомНаДосрочнуюПенсию = ПроцедурыПерсонифицированногоУчета.ПараметрыИсчисляемогоСтажаПредусматривающиеПравоНаДосрочнуюПенсию();
	
	Если ЗначениеЗаполнено(ВыборкаПоРаботникам.ТретийПараметрИсчисляемогоСтажа)
		И ПараметрыСтажаСПравомНаДосрочнуюПенсию.Найти(ВыборкаПоРаботникам.ТретийПараметрИсчисляемогоСтажа) = Неопределено Тогда 
		
		НеВыводитьВФайлВЛ = Истина;
		НеВыводитьВФайлИС = Истина;
		НеВыводитьВФайлОУТ = Истина;
		НеВыводитьВФайлТУ = Истина;
		
	Иначе
		
		// Территориальные условия
		НаборЗаписейТерриториальныеУсловия = НаборЗаписейЛьготныйСтаж.ИС2__ТУ.Значение;
		Если ЗначениеЗаполнено(ВыборкаПоРаботникам.ТерриториальныеУсловияКод) Тогда
			НаборЗаписейТерриториальныеУсловия.ИС2__Основание = СокрЛП(ВыборкаПоРаботникам.ТерриториальныеУсловияКод);
			ПроцедурыПерсонифицированногоУчета.ВписатьСтавкуВНаборДанныхТеррУсловий(ВыборкаПоРаботникам.ТерриториальныеУсловия, ВыборкаПоРаботникам.ТерриториальныеУсловияСтавка, НаборЗаписейЛьготныйСтаж.ИС2__ТУ);
		Иначе
			НеВыводитьВФайлТУ = Истина;
		КонецЕсли;
		
		ВыводитьЛьготныйСтаж = ВыводитьЛьготныйСтаж Или ЗначениеЗаполнено(НаборЗаписейТерриториальныеУсловия.ИС2__Основание);
		
		// Особые условия труда
		НаборЗаписейОсобыеУсловияТруда = НаборЗаписейЛьготныйСтаж.ИС2__ОУТ.Значение;
		Если ЗначениеЗаполнено(ВыборкаПоРаботникам.ОсобыеУсловияТрудаКод) Тогда
			НаборЗаписейОсобыеУсловияТруда.ИС2__Код = СокрЛП(ВыборкаПоРаботникам.ОсобыеУсловияТрудаКод);
			Если ЗначениеЗаполнено(ВыборкаПоРаботникам.КодПозицииСпискаКод) Тогда
				НаборЗаписейОсобыеУсловияТруда.ИС2__ПозицияСписка = ИсправленныйСимвольныйЭлемент(СокрЛП(ВыборкаПоРаботникам.КодПозицииСпискаКод));
			Иначе
				НаборЗаписейОсобыеУсловияТруда.Удалить("ИС2__ПозицияСписка");
				СтрокаКУдалению = НаборЗаписейЛьготныйСтаж.ИС2__ОУТ.Поля.Найти("ИС2__ПозицияСписка", "ИмяПоля");
				НаборЗаписейЛьготныйСтаж.ИС2__ОУТ.Поля.Удалить(СтрокаКУдалению);
			КонецЕсли;
			ВыводитьЛьготныйСтаж = Истина;
		Иначе
			НеВыводитьВФайлОУТ = Истина;
		КонецЕсли;
		
		// Исчисляемый стаж
		НаборЗаписейИсчисляемыйСтаж = НаборЗаписейЛьготныйСтаж.ИС2__ИС.Значение;
		НаборЗаписейИсчисляемыйСтаж.ИС2__Основание.Значение = СокрЛП(ВыборкаПоРаботникам.ОснованиеИсчисляемогоСтажаКод);
		Если Не ЗначениеЗаполнено(ВыборкаПоРаботникам.ОснованиеИсчисляемогоСтажа) 
			И (ЗначениеЗаполнено(ВыборкаПоРаботникам.ТретийПараметрИсчисляемогоСтажа) Или ЗначениеЗаполнено(ВыборкаПоРаботникам.ЗамещениеГосударственныхМуниципальныхДолжностей)) Тогда
			НеВыводитьВФайлИС = Истина;
		ИначеЕсли ЗначениеЗаполнено(ВыборкаПоРаботникам.ОснованиеИсчисляемогоСтажа) 
			Или ЗначениеЗаполнено(ВыборкаПоРаботникам.ПервыйПараметрИсчисляемогоСтажа) 
			Или ЗначениеЗаполнено(ВыборкаПоРаботникам.ВторойПараметрИсчисляемогоСтажа) Тогда
			НеВыводитьВФайлВыработкаВЧасахИС = Ложь;
			НеВыводитьВФайлВыработкаКалендарнаяИС = Ложь;
			Если ЗначениеЗаполнено(ВыборкаПоРаботникам.ТретийПараметрИсчисляемогоСтажа) Или ЗначениеЗаполнено(ВыборкаПоРаботникам.ЗамещениеГосударственныхМуниципальныхДолжностей) Тогда
				НеВыводитьВФайлВыработкаВЧасахИС = Истина;
			ИначеЕсли ВыборкаПоРаботникам.ОснованиеИсчисляемогоСтажа = Справочники.ОснованияИсчисляемогоТрудовогоСтажа.ВОДОЛАЗ Тогда
				НаборЗаписейВыработкаВЧасах = НаборЗаписейИсчисляемыйСтаж.ВС2__ВыработкаВЧасах.Значение;
				НаборЗаписейВыработкаВЧасах.ВС2__Часы = ВыборкаПоРаботникам.ПервыйПараметрИсчисляемогоСтажа;
				НаборЗаписейВыработкаВЧасах.ВС2__Минуты = ВыборкаПоРаботникам.ВторойПараметрИсчисляемогоСтажа;
				НеВыводитьВФайлВыработкаКалендарнаяИС = Истина;
			ИначеЕсли ВыборкаПоРаботникам.ПервыйПараметрИсчисляемогоСтажа > 0 Или ВыборкаПоРаботникам.ВторойПараметрИсчисляемогоСтажа > 0 Тогда
				НеВыводитьВФайлВыработкаВЧасахИС = Истина;
				НаборЗаписейВыработкаКалендарная = НаборЗаписейИсчисляемыйСтаж.ВС2__ВыработкаКалендарная.Значение;
				НаборЗаписейВыработкаКалендарная.ВС2__ВсеМесяцы = ВыборкаПоРаботникам.ПервыйПараметрИсчисляемогоСтажа;
				НаборЗаписейВыработкаКалендарная.ВС2__ВсеДни = ВыборкаПоРаботникам.ВторойПараметрИсчисляемогоСтажа;
			Иначе
				НеВыводитьВФайлВыработкаВЧасахИС = Истина;
				НеВыводитьВФайлВыработкаКалендарнаяИС = Истина;
			КонецЕсли;
			Если НеВыводитьВФайлВыработкаВЧасахИС Тогда
				НаборЗаписейИсчисляемыйСтаж.Удалить("ВС2__ВыработкаВЧасах")
			КонецЕсли;
			Если НеВыводитьВФайлВыработкаКалендарнаяИС Тогда
				НаборЗаписейИсчисляемыйСтаж.Удалить("ВС2__ВыработкаКалендарная")
			КонецЕсли;
			ВыводитьЛьготныйСтаж = Истина;
			Если Не ЗначениеЗаполнено(ВыборкаПоРаботникам.ОснованиеИсчисляемогоСтажа) Тогда
				НаборЗаписейИсчисляемыйСтаж.Удалить("ИС2__Основание")
			КонецЕсли;
		Иначе
			НеВыводитьВФайлИС = Истина;
		КонецЕсли;
		
		ВыводитьЛьготныйСтаж = ВыводитьЛьготныйСтаж Или ЗначениеЗаполнено(НаборЗаписейИсчисляемыйСтаж.ИС2__Основание.Значение);
		
		// Выслуга лет
		НаборЗаписейВыслугаЛет = НаборЗаписейЛьготныйСтаж.ИС2__ВЛ.Значение;
		Если ЗначениеЗаполнено(ВыборкаПоРаботникам.ОснованиеВыслугиЛетКод) Тогда
			НеВыводитьВФайлВыработкаВЧасахВЛ = Ложь;
			НеВыводитьВФайлВыработкаКалендарнаяВЛ = Ложь;
			НаборЗаписейВыслугаЛет.ИС2__Основание.Значение = ИсправленныйСимвольныйЭлемент(СокрЛП(ВыборкаПоРаботникам.ОснованиеВыслугиЛетКод));
			ПроцедурыПерсонифицированногоУчета.ВписатьСтавкуВНаборДанныхИсчисляемогоСтажа(ВыборкаПоРаботникам.ТретийПараметрВыслугиЛет, НаборЗаписейВыслугаЛет);
			Если ЗначениеЗаполнено(ВыборкаПоРаботникам.ТретийПараметрИсчисляемогоСтажа) Или ЗначениеЗаполнено(ВыборкаПоРаботникам.ЗамещениеГосударственныхМуниципальныхДолжностей) Тогда	
				НеВыводитьВФайлВыработкаВЧасахВЛ = Истина;
				НеВыводитьВФайлВыработкаКалендарнаяВЛ = Истина;
			ИначеЕсли Не ЗначениеЗаполнено(ВыборкаПоРаботникам.ПервыйПараметрВыслугиЛет) И Не ЗначениеЗаполнено(ВыборкаПоРаботникам.ВторойПараметрВыслугиЛет) Тогда
				НеВыводитьВФайлВыработкаВЧасахВЛ = Истина;
				НеВыводитьВФайлВыработкаКалендарнаяВЛ = Истина;
			ИначеЕсли ВыборкаПоРаботникам.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.Ст27_15 Тогда
				НеВыводитьВФайлВыработкаВЧасахВЛ = Истина;
				НаборЗаписейВыработкаКалендарная = НаборЗаписейВыслугаЛет.ВС2__ВыработкаКалендарная.Значение;
				НаборЗаписейВыработкаКалендарная.ВС2__ВсеМесяцы = ВыборкаПоРаботникам.ПервыйПараметрВыслугиЛет;
				НаборЗаписейВыработкаКалендарная.ВС2__ВсеДни = ВыборкаПоРаботникам.ВторойПараметрВыслугиЛет;
			Иначе
				НеВыводитьВФайлВыработкаКалендарнаяВЛ = Истина;
				НаборЗаписейВыработкаВЧасах = НаборЗаписейВыслугаЛет.ВС2__ВыработкаВЧасах.Значение;
				НаборЗаписейВыработкаВЧасах.ВС2__Часы = ВыборкаПоРаботникам.ПервыйПараметрВыслугиЛет;
				НаборЗаписейВыработкаВЧасах.ВС2__Минуты = ВыборкаПоРаботникам.ВторойПараметрВыслугиЛет;
			КонецЕсли;
			Если НеВыводитьВФайлВыработкаВЧасахВЛ Тогда
				НаборЗаписейВыслугаЛет.Удалить("ВС2__ВыработкаВЧасах")
			КонецЕсли;
			Если НеВыводитьВФайлВыработкаКалендарнаяВЛ Тогда
				НаборЗаписейВыслугаЛет.Удалить("ВС2__ВыработкаКалендарная")
			КонецЕсли;
			ВыводитьЛьготныйСтаж = Истина;
		Иначе
			НеВыводитьВФайлВЛ = Истина;
		КонецЕсли;	
		
	КонецЕсли;
	
	Если ВыводитьЛьготныйСтаж Тогда
		
		Если НеВыводитьВФайлТУ Тогда
			НаборЗаписейЛьготныйСтаж.Удалить("ИС2__ТУ")
		КонецЕсли;
		Если НеВыводитьВФайлОУТ Тогда
			НаборЗаписейЛьготныйСтаж.Удалить("ИС2__ОУТ")
		КонецЕсли;
		Если НеВыводитьВФайлИС Тогда
			НаборЗаписейЛьготныйСтаж.Удалить("ИС2__ИС")
		КонецЕсли;
		Если НеВыводитьВФайлДопСведенияИС Тогда
			НаборЗаписейЛьготныйСтаж.Удалить("ИС2__ДопСведенияИС")
		КонецЕсли;
		Если НеВыводитьВФайлВЛ Тогда
			НаборЗаписейЛьготныйСтаж.Удалить("ИС2__ВЛ")
		КонецЕсли;
		
		УзелЛьготныйСтаж = ПроцедурыПерсонифицированногоУчета.ДобавитьУзелВДеревоXML(УзелСтажевыйПериод, "ИС2__ЛьготныйСтаж","");
		ПроцедурыПерсонифицированногоУчета.ДобавитьИнформациюВДерево(УзелЛьготныйСтаж, НаборЗаписейЛьготныйСтаж);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВписатьЗаписиОСтажеВНаборДанных2019(УзелСотрудника, ФорматСтажевыйПериод, ВыборкаПоРаботникам) 
	
	ФорматЛьготныйСтаж = ФорматСтажевыйПериод.ИС4__ЛьготныйСтаж.Значение;
	ФорматСтажевыйПериод.Удалить("ИС4__ЛьготныйСтаж");
	
	Если ЗначениеЗаполнено(ВыборкаПоРаботникам.НомерОсновнойЗаписи) Тогда
		
		Пока ВыборкаПоРаботникам.СледующийПоЗначениюПоля("НомерОсновнойЗаписи") Цикл
			
			ДанныеОсновнойЗаписи = Новый Структура(ИменаПолейДанныхПоСотрудникам);
			ЗаполнитьЗначенияСвойств(ДанныеОсновнойЗаписи, ВыборкаПоРаботникам);

			УзелСтажевыйПериод = ПроцедурыПерсонифицированногоУчета.ДобавитьУзелВДеревоXML(УзелСотрудника, "СтажевыйПериод", "");
			ПроцедурыПерсонифицированногоУчета.ДобавитьИнформациюВДерево(УзелСтажевыйПериод, ФорматСтажевыйПериод);
			
			УзелСтажевыйПериод.Строки.Найти("ИС4__Период").Строки.Найти("УТ2__С").Значение = Формат(ВыборкаПоРаботникам.ДатаНачалаПериода, "ДФ=yyyy-MM-dd");
			УзелСтажевыйПериод.Строки.Найти("ИС4__Период").Строки.Найти("УТ2__По").Значение = Формат(ВыборкаПоРаботникам.ДатаОкончанияПериода, "ДФ=yyyy-MM-dd");
			
			НаборЗаписейЛьготныйСтаж = ПроцедурыПерсонифицированногоУчета.СкопироватьСтруктуруДанных(ФорматЛьготныйСтаж);
			
			ВыводитьЛьготныйСтаж = Ложь;
			НеВыводитьВФайлТУ = Ложь;
			НеВыводитьВФайлОУТ = Ложь;
			НеВыводитьВФайлИС = Ложь;
			НеВыводитьВФайлДопСведенияИС = Ложь;
			НеВыводитьВФайлВЛ = Ложь;
			
			Если ЗначениеЗаполнено(ВыборкаПоРаботникам.ЗамещениеГосударственныхМуниципальныхДолжностей) Тогда
				НаборЗаписейЛьготныйСтаж.ИС4__ДопСведенияИС.Значение = ВыборкаПоРаботникам.ЗамещениеГосударственныхМуниципальныхДолжностей;
				ВыводитьЛьготныйСтаж = Истина;
			ИначеЕсли ВыборкаПоРаботникам.ТретийПараметрИсчисляемогоСтажа = Справочники.ПараметрыИсчисляемогоСтраховогоСтажа2014.ДЛОТПУСК 
				И Не ПроцедурыПерсонифицированногоУчета.ВыводитьДлительныйОтпускОтдельно(ВыборкаПоРаботникам) Тогда
				НеВыводитьВФайлДопСведенияИС = Истина;
			ИначеЕсли ЗначениеЗаполнено(ВыборкаПоРаботникам.ТретийПараметрИсчисляемогоСтажа) Тогда
				НаборЗаписейЛьготныйСтаж.ИС4__ДопСведенияИС.Значение = ВыборкаПоРаботникам.ТретийПараметрИсчисляемогоСтажаКод;
				ВыводитьЛьготныйСтаж = Истина;
			Иначе
				НеВыводитьВФайлДопСведенияИС = Истина;
			КонецЕсли;
			
			ВывестиЗаписиЛьготногоСтажа2019(ВыборкаПоРаботникам, УзелСтажевыйПериод, НаборЗаписейЛьготныйСтаж, ВыводитьЛьготныйСтаж, НеВыводитьВФайлТУ, НеВыводитьВФайлОУТ, НеВыводитьВФайлИС, НеВыводитьВФайлДопСведенияИС, НеВыводитьВФайлВЛ);
			
			Пока ВыборкаПоРаботникам.СледующийПоЗначениюПоля("НомерДополнительнойЗаписи")	Цикл
				
				//В дополнительной записи с номером 0 находится информация об основной записи
				Если ВыборкаПоРаботникам.НомерДополнительнойЗаписи = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				НаборЗаписейЛьготныйСтаж = ПроцедурыПерсонифицированногоУчета.СкопироватьСтруктуруДанных(ФорматЛьготныйСтаж);
				
				// Территориальные условия
				Если Не ЗначениеЗаполнено(ВыборкаПоРаботникам.ТерриториальныеУсловия) Тогда
					НаборЗаписейЛьготныйСтаж.Удалить("ИС4__ТУ")
				Иначе
					НаборЗаписейДопТерриториальныеУсловия = НаборЗаписейЛьготныйСтаж.ИС4__ТУ.Значение;
					НаборЗаписейДопТерриториальныеУсловия.ИС4__Основание = СокрЛП(ВыборкаПоРаботникам.ТерриториальныеУсловияКод);
					ПроцедурыПерсонифицированногоУчета.ВписатьСтавкуВНаборДанныхТеррУсловий(ВыборкаПоРаботникам.ТерриториальныеУсловия, ВыборкаПоРаботникам.ТерриториальныеУсловияСтавка, НаборЗаписейЛьготныйСтаж.ИС4__ТУ, "ИС4__Коэффициент");
				КонецЕсли;
				
				// Особые условия труда
				Если Не ЗначениеЗаполнено(ВыборкаПоРаботникам.ОсобыеУсловияТруда) И Не ЗначениеЗаполнено(ВыборкаПоРаботникам.КодПозицииСпискаКод) Тогда
					НаборЗаписейЛьготныйСтаж.Удалить("ИС4__ОУТ")
				Иначе
					НаборЗаписейДопОсобыеУсловияТруда = НаборЗаписейЛьготныйСтаж.ИС4__ОУТ.Значение;
					НаборЗаписейДопОсобыеУсловияТруда.ИС4__Код = СокрЛП(ВыборкаПоРаботникам.ОсобыеУсловияТрудаКод);
					НаборЗаписейДопОсобыеУсловияТруда.ИС4__ПозицияСписка = ИсправленныйСимвольныйЭлемент(СокрЛП(ВыборкаПоРаботникам.КодПозицииСпискаКод));
				КонецЕсли;
				
				// Исчисляемый стаж
				НаборЗаписейДопИсчисляемыйСтаж = НаборЗаписейЛьготныйСтаж.ИС4__ИС.Значение;
				НеВыводитьВФайлВыработкаВЧасахИС = Ложь;
				НеВыводитьВФайлВыработкаКалендарнаяИС = Ложь;
				Если ВыборкаПоРаботникам.ОснованиеИсчисляемогоСтажа = Справочники.ОснованияИсчисляемогоТрудовогоСтажа.ВОДОЛАЗ Тогда
					НаборЗаписейВыработкаВЧасах = НаборЗаписейДопИсчисляемыйСтаж.ВС2__ВыработкаВЧасах.Значение;
					НаборЗаписейВыработкаВЧасах.ВС2__Часы = ВыборкаПоРаботникам.ПервыйПараметрИсчисляемогоСтажа;
					НаборЗаписейВыработкаВЧасах.ВС2__Минуты = ВыборкаПоРаботникам.ВторойПараметрИсчисляемогоСтажа;
					НеВыводитьВФайлВыработкаКалендарнаяИС = Истина;
				ИначеЕсли ВыборкаПоРаботникам.ПервыйПараметрИсчисляемогоСтажа > 0 
					ИЛИ ВыборкаПоРаботникам.ВторойПараметрИсчисляемогоСтажа > 0 Тогда
					
					НаборЗаписейДопВыработкаКалендарная = НаборЗаписейДопИсчисляемыйСтаж.ВС2__ВыработкаКалендарная.Значение;
					НаборЗаписейДопВыработкаКалендарная.ВС2__ВсеМесяцы = ВыборкаПоРаботникам.ПервыйПараметрИсчисляемогоСтажа;
					НаборЗаписейДопВыработкаКалендарная.ВС2__ВсеДни = ВыборкаПоРаботникам.ВторойПараметрИсчисляемогоСтажа;
					НеВыводитьВФайлВыработкаВЧасахИС = Истина;
				Иначе
					НеВыводитьВФайлВыработкаВЧасахИС = Истина;
					НеВыводитьВФайлВыработкаКалендарнаяИС = Истина;
				КонецЕсли;
				Если НеВыводитьВФайлВыработкаВЧасахИС Тогда
					НаборЗаписейДопИсчисляемыйСтаж.Удалить("ВС2__ВыработкаВЧасах")
				КонецЕсли;
				Если НеВыводитьВФайлВыработкаКалендарнаяИС Тогда
					НаборЗаписейДопИсчисляемыйСтаж.Удалить("ВС2__ВыработкаКалендарная")
				КонецЕсли;
				Если ЗначениеЗаполнено(ВыборкаПоРаботникам.ОснованиеИсчисляемогоСтажа) Тогда
					НаборЗаписейДопИсчисляемыйСтаж.ИС4__Основание.Значение = ИсправленныйСимвольныйЭлемент(СокрЛП(ВыборкаПоРаботникам.ОснованиеИсчисляемогоСтажаКод));
				ИначеЕсли НеВыводитьВФайлВыработкаВЧасахИС И НеВыводитьВФайлВыработкаКалендарнаяИС Тогда
					НаборЗаписейЛьготныйСтаж.Удалить("ИС4__ИС")
				Иначе
					НаборЗаписейДопИсчисляемыйСтаж.Удалить("ИС4__Основание")
				КонецЕсли;
				
				// Выслуга лет
				НаборЗаписейДопВыслугаЛет = НаборЗаписейЛьготныйСтаж.ИС4__ВЛ.Значение;
				Если ЗначениеЗаполнено(ВыборкаПоРаботникам.ОснованиеВыслугиЛет) Тогда
					НаборЗаписейДопВыслугаЛет.ИС4__Основание.Значение = ИсправленныйСимвольныйЭлемент(СокрЛП(ВыборкаПоРаботникам.ОснованиеВыслугиЛетКод));
					ПроцедурыПерсонифицированногоУчета.ВписатьСтавкуВНаборДанныхИсчисляемогоСтажа(ВыборкаПоРаботникам.ТретийПараметрВыслугиЛет, НаборЗаписейДопВыслугаЛет, "ИС4__ДоляСтавки");
					НеВыводитьВФайлВыработкаВЧасахВЛ = Ложь;
					НеВыводитьВФайлВыработкаКалендарнаяВЛ = Ложь;
					Если ВыборкаПоРаботникам.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.Ст27_15 Тогда
						НеВыводитьВФайлВыработкаВЧасахВЛ = Истина;
						НаборЗаписейВыработкаКалендарная = НаборЗаписейДопВыслугаЛет.ВС2__ВыработкаКалендарная.Значение;
						НаборЗаписейВыработкаКалендарная.ВС2__ВсеМесяцы = ВыборкаПоРаботникам.ПервыйПараметрВыслугиЛет;
						НаборЗаписейВыработкаКалендарная.ВС2__ВсеДни = ВыборкаПоРаботникам.ВторойПараметрВыслугиЛет;
					Иначе
						НеВыводитьВФайлВыработкаКалендарнаяВЛ = Истина;
						НаборЗаписейДопВыработкаВЧасах = НаборЗаписейДопВыслугаЛет.ВС2__ВыработкаВЧасах.Значение;
						НаборЗаписейДопВыработкаВЧасах.ВС2__Часы = ВыборкаПоРаботникам.ПервыйПараметрВыслугиЛет;
						НаборЗаписейДопВыработкаВЧасах.ВС2__Минуты = ВыборкаПоРаботникам.ВторойПараметрВыслугиЛет;
					КонецЕсли;
					Если НеВыводитьВФайлВыработкаВЧасахВЛ Тогда
						НаборЗаписейДопВыслугаЛет.Удалить("ВС2__ВыработкаВЧасах")
					КонецЕсли;
					Если НеВыводитьВФайлВыработкаКалендарнаяВЛ Тогда
						НаборЗаписейДопВыслугаЛет.Удалить("ВС2__ВыработкаКалендарная")
					КонецЕсли;
				Иначе
					НаборЗаписейЛьготныйСтаж.Удалить("ИС4__ВЛ")
				КонецЕсли;
				
				// ДопСведенияИС
				Если ЗначениеЗаполнено(ВыборкаПоРаботникам.ТретийПараметрИсчисляемогоСтажа) Тогда
					НаборЗаписейЛьготныйСтаж.ИС4__ДопСведенияИС.Значение = Строка(ВыборкаПоРаботникам.ТретийПараметрИсчисляемогоСтажаКод);
				Иначе	
					НаборЗаписейЛьготныйСтаж.Удалить("ИС4__ДопСведенияИС")
				КонецЕсли;
				
				УзелЛьготныйСтаж = ПроцедурыПерсонифицированногоУчета.ДобавитьУзелВДеревоXML(УзелСтажевыйПериод, "ИС4__ЛьготныйСтаж", "");
				ПроцедурыПерсонифицированногоУчета.ДобавитьИнформациюВДерево(УзелЛьготныйСтаж, НаборЗаписейЛьготныйСтаж);
				
			КонецЦикла;
			
			Если ЗначениеЗаполнено(ДанныеОсновнойЗаписи.ТретийПараметрИсчисляемогоСтажа) 
				И ЗначениеЗаполнено(ДанныеОсновнойЗаписи.ЗамещениеГосударственныхМуниципальныхДолжностей) Тогда
				
				УзелСтажевыйПериод = ПроцедурыПерсонифицированногоУчета.ДобавитьУзелВДеревоXML(УзелСотрудника, "СтажевыйПериод", "");
				ПроцедурыПерсонифицированногоУчета.ДобавитьИнформациюВДерево(УзелСтажевыйПериод, ФорматСтажевыйПериод);
				
				УзелСтажевыйПериод.Строки.Найти("ИС4__Период").Строки.Найти("УТ2__С").Значение = Формат(ДанныеОсновнойЗаписи.ДатаНачалаПериода, "ДФ=yyyy-MM-dd");
				УзелСтажевыйПериод.Строки.Найти("ИС4__Период").Строки.Найти("УТ2__По").Значение = Формат(ДанныеОсновнойЗаписи.ДатаОкончанияПериода, "ДФ=yyyy-MM-dd");
				
				НаборЗаписейЛьготныйСтаж = ПроцедурыПерсонифицированногоУчета.СкопироватьСтруктуруДанных(ФорматЛьготныйСтаж);
				НаборЗаписейЛьготныйСтаж.ИС4__ДопСведенияИС.Значение = ДанныеОсновнойЗаписи.ТретийПараметрИсчисляемогоСтажаКод;
				
				ВыводитьЛьготныйСтаж = Истина;
				НеВыводитьВФайлТУ = Ложь;
				НеВыводитьВФайлОУТ = Ложь;
				НеВыводитьВФайлИС = Ложь;
				НеВыводитьВФайлДопСведенияИС = Ложь;
				НеВыводитьВФайлВЛ = Ложь;
				
				ВывестиЗаписиЛьготногоСтажа2019(ДанныеОсновнойЗаписи, УзелСтажевыйПериод, НаборЗаписейЛьготныйСтаж, ВыводитьЛьготныйСтаж, НеВыводитьВФайлТУ, НеВыводитьВФайлОУТ, НеВыводитьВФайлИС, НеВыводитьВФайлДопСведенияИС, НеВыводитьВФайлВЛ);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВывестиЗаписиЛьготногоСтажа2019(ВыборкаПоРаботникам, УзелСтажевыйПериод, НаборЗаписейЛьготныйСтаж, ВыводитьЛьготныйСтаж, НеВыводитьВФайлТУ, НеВыводитьВФайлОУТ, НеВыводитьВФайлИС, НеВыводитьВФайлДопСведенияИС, НеВыводитьВФайлВЛ)
	
	ПараметрыСтажаСПравомНаДосрочнуюПенсию = ПроцедурыПерсонифицированногоУчета.ПараметрыИсчисляемогоСтажаПредусматривающиеПравоНаДосрочнуюПенсию();
	
	Если ЗначениеЗаполнено(ВыборкаПоРаботникам.ТретийПараметрИсчисляемогоСтажа)
		И ПараметрыСтажаСПравомНаДосрочнуюПенсию.Найти(ВыборкаПоРаботникам.ТретийПараметрИсчисляемогоСтажа) = Неопределено Тогда 
		
		НеВыводитьВФайлВЛ = Истина;
		НеВыводитьВФайлИС = Истина;
		НеВыводитьВФайлОУТ = Истина;
		НеВыводитьВФайлТУ = Истина;
		
	Иначе
		
		// Территориальные условия
		НаборЗаписейТерриториальныеУсловия = НаборЗаписейЛьготныйСтаж.ИС4__ТУ.Значение;
		Если ЗначениеЗаполнено(ВыборкаПоРаботникам.ТерриториальныеУсловияКод) Тогда
			НаборЗаписейТерриториальныеУсловия.ИС4__Основание = СокрЛП(ВыборкаПоРаботникам.ТерриториальныеУсловияКод);
			ПроцедурыПерсонифицированногоУчета.ВписатьСтавкуВНаборДанныхТеррУсловий(ВыборкаПоРаботникам.ТерриториальныеУсловия, ВыборкаПоРаботникам.ТерриториальныеУсловияСтавка, НаборЗаписейЛьготныйСтаж.ИС4__ТУ, "ИС4__Коэффициент");
		Иначе
			НеВыводитьВФайлТУ = Истина;
		КонецЕсли;
		
		ВыводитьЛьготныйСтаж = ВыводитьЛьготныйСтаж Или ЗначениеЗаполнено(НаборЗаписейТерриториальныеУсловия.ИС4__Основание);
		
		// Особые условия труда
		НаборЗаписейОсобыеУсловияТруда = НаборЗаписейЛьготныйСтаж.ИС4__ОУТ.Значение;
		Если ЗначениеЗаполнено(ВыборкаПоРаботникам.ОсобыеУсловияТрудаКод) Тогда
			НаборЗаписейОсобыеУсловияТруда.ИС4__Код = СокрЛП(ВыборкаПоРаботникам.ОсобыеУсловияТрудаКод);
			Если ЗначениеЗаполнено(ВыборкаПоРаботникам.КодПозицииСпискаКод) Тогда
				НаборЗаписейОсобыеУсловияТруда.ИС4__ПозицияСписка = ИсправленныйСимвольныйЭлемент(СокрЛП(ВыборкаПоРаботникам.КодПозицииСпискаКод));
			Иначе
				НаборЗаписейОсобыеУсловияТруда.Удалить("ИС4__ПозицияСписка");
				СтрокаКУдалению = НаборЗаписейЛьготныйСтаж.ИС4__ОУТ.Поля.Найти("ИС4__ПозицияСписка", "ИмяПоля");
				НаборЗаписейЛьготныйСтаж.ИС4__ОУТ.Поля.Удалить(СтрокаКУдалению);
			КонецЕсли;
			ВыводитьЛьготныйСтаж = Истина;
		Иначе
			НеВыводитьВФайлОУТ = Истина;
		КонецЕсли;
		
		// Исчисляемый стаж
		НаборЗаписейИсчисляемыйСтаж = НаборЗаписейЛьготныйСтаж.ИС4__ИС.Значение;
		НаборЗаписейИсчисляемыйСтаж.ИС4__Основание.Значение = СокрЛП(ВыборкаПоРаботникам.ОснованиеИсчисляемогоСтажаКод);
		Если Не ЗначениеЗаполнено(ВыборкаПоРаботникам.ОснованиеИсчисляемогоСтажа) 
			И (ЗначениеЗаполнено(ВыборкаПоРаботникам.ТретийПараметрИсчисляемогоСтажа) Или ЗначениеЗаполнено(ВыборкаПоРаботникам.ЗамещениеГосударственныхМуниципальныхДолжностей)) Тогда
			НеВыводитьВФайлИС = Истина;
		ИначеЕсли ЗначениеЗаполнено(ВыборкаПоРаботникам.ОснованиеИсчисляемогоСтажа) 
			Или ЗначениеЗаполнено(ВыборкаПоРаботникам.ПервыйПараметрИсчисляемогоСтажа) 
			Или ЗначениеЗаполнено(ВыборкаПоРаботникам.ВторойПараметрИсчисляемогоСтажа) Тогда
			НеВыводитьВФайлВыработкаВЧасахИС = Ложь;
			НеВыводитьВФайлВыработкаКалендарнаяИС = Ложь;
			Если ЗначениеЗаполнено(ВыборкаПоРаботникам.ТретийПараметрИсчисляемогоСтажа) Или ЗначениеЗаполнено(ВыборкаПоРаботникам.ЗамещениеГосударственныхМуниципальныхДолжностей) Тогда
				НеВыводитьВФайлВыработкаВЧасахИС = Истина;
			ИначеЕсли ВыборкаПоРаботникам.ОснованиеИсчисляемогоСтажа = Справочники.ОснованияИсчисляемогоТрудовогоСтажа.ВОДОЛАЗ Тогда
				НаборЗаписейВыработкаВЧасах = НаборЗаписейИсчисляемыйСтаж.ВС2__ВыработкаВЧасах.Значение;
				НаборЗаписейВыработкаВЧасах.ВС2__Часы = ВыборкаПоРаботникам.ПервыйПараметрИсчисляемогоСтажа;
				НаборЗаписейВыработкаВЧасах.ВС2__Минуты = ВыборкаПоРаботникам.ВторойПараметрИсчисляемогоСтажа;
				НеВыводитьВФайлВыработкаКалендарнаяИС = Истина;
			ИначеЕсли ВыборкаПоРаботникам.ПервыйПараметрИсчисляемогоСтажа > 0 Или ВыборкаПоРаботникам.ВторойПараметрИсчисляемогоСтажа > 0 Тогда
				НеВыводитьВФайлВыработкаВЧасахИС = Истина;
				НаборЗаписейВыработкаКалендарная = НаборЗаписейИсчисляемыйСтаж.ВС2__ВыработкаКалендарная.Значение;
				НаборЗаписейВыработкаКалендарная.ВС2__ВсеМесяцы = ВыборкаПоРаботникам.ПервыйПараметрИсчисляемогоСтажа;
				НаборЗаписейВыработкаКалендарная.ВС2__ВсеДни = ВыборкаПоРаботникам.ВторойПараметрИсчисляемогоСтажа;
			Иначе
				НеВыводитьВФайлВыработкаВЧасахИС = Истина;
				НеВыводитьВФайлВыработкаКалендарнаяИС = Истина;
			КонецЕсли;
			Если НеВыводитьВФайлВыработкаВЧасахИС Тогда
				НаборЗаписейИсчисляемыйСтаж.Удалить("ВС2__ВыработкаВЧасах")
			КонецЕсли;
			Если НеВыводитьВФайлВыработкаКалендарнаяИС Тогда
				НаборЗаписейИсчисляемыйСтаж.Удалить("ВС2__ВыработкаКалендарная")
			КонецЕсли;
			ВыводитьЛьготныйСтаж = Истина;
			Если Не ЗначениеЗаполнено(ВыборкаПоРаботникам.ОснованиеИсчисляемогоСтажа) Тогда
				НаборЗаписейИсчисляемыйСтаж.Удалить("ИС4__Основание")
			КонецЕсли;
		Иначе
			НеВыводитьВФайлИС = Истина;
		КонецЕсли;
		
		ВыводитьЛьготныйСтаж = ВыводитьЛьготныйСтаж Или ЗначениеЗаполнено(НаборЗаписейИсчисляемыйСтаж.ИС4__Основание.Значение);
		
		// Выслуга лет
		НаборЗаписейВыслугаЛет = НаборЗаписейЛьготныйСтаж.ИС4__ВЛ.Значение;
		Если ЗначениеЗаполнено(ВыборкаПоРаботникам.ОснованиеВыслугиЛетКод) Тогда
			НеВыводитьВФайлВыработкаВЧасахВЛ = Ложь;
			НеВыводитьВФайлВыработкаКалендарнаяВЛ = Ложь;
			НаборЗаписейВыслугаЛет.ИС4__Основание.Значение = ИсправленныйСимвольныйЭлемент(СокрЛП(ВыборкаПоРаботникам.ОснованиеВыслугиЛетКод));
			ПроцедурыПерсонифицированногоУчета.ВписатьСтавкуВНаборДанныхИсчисляемогоСтажа(ВыборкаПоРаботникам.ТретийПараметрВыслугиЛет, НаборЗаписейВыслугаЛет, "ИС4__ДоляСтавки");
			Если ЗначениеЗаполнено(ВыборкаПоРаботникам.ТретийПараметрИсчисляемогоСтажа) Или ЗначениеЗаполнено(ВыборкаПоРаботникам.ЗамещениеГосударственныхМуниципальныхДолжностей) Тогда	
				НеВыводитьВФайлВыработкаВЧасахВЛ = Истина;
				НеВыводитьВФайлВыработкаКалендарнаяВЛ = Истина;
			ИначеЕсли Не ЗначениеЗаполнено(ВыборкаПоРаботникам.ПервыйПараметрВыслугиЛет) И Не ЗначениеЗаполнено(ВыборкаПоРаботникам.ВторойПараметрВыслугиЛет) Тогда
				НеВыводитьВФайлВыработкаВЧасахВЛ = Истина;
				НеВыводитьВФайлВыработкаКалендарнаяВЛ = Истина;
			ИначеЕсли ВыборкаПоРаботникам.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.Ст27_15 Тогда
				НеВыводитьВФайлВыработкаВЧасахВЛ = Истина;
				НаборЗаписейВыработкаКалендарная = НаборЗаписейВыслугаЛет.ВС2__ВыработкаКалендарная.Значение;
				НаборЗаписейВыработкаКалендарная.ВС2__ВсеМесяцы = ВыборкаПоРаботникам.ПервыйПараметрВыслугиЛет;
				НаборЗаписейВыработкаКалендарная.ВС2__ВсеДни = ВыборкаПоРаботникам.ВторойПараметрВыслугиЛет;
			Иначе
				НеВыводитьВФайлВыработкаКалендарнаяВЛ = Истина;
				НаборЗаписейВыработкаВЧасах = НаборЗаписейВыслугаЛет.ВС2__ВыработкаВЧасах.Значение;
				НаборЗаписейВыработкаВЧасах.ВС2__Часы = ВыборкаПоРаботникам.ПервыйПараметрВыслугиЛет;
				НаборЗаписейВыработкаВЧасах.ВС2__Минуты = ВыборкаПоРаботникам.ВторойПараметрВыслугиЛет;
			КонецЕсли;
			Если НеВыводитьВФайлВыработкаВЧасахВЛ Тогда
				НаборЗаписейВыслугаЛет.Удалить("ВС2__ВыработкаВЧасах")
			КонецЕсли;
			Если НеВыводитьВФайлВыработкаКалендарнаяВЛ Тогда
				НаборЗаписейВыслугаЛет.Удалить("ВС2__ВыработкаКалендарная")
			КонецЕсли;
			ВыводитьЛьготныйСтаж = Истина;
		Иначе
			НеВыводитьВФайлВЛ = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВыводитьЛьготныйСтаж Тогда
		
		Если НеВыводитьВФайлТУ Тогда
			НаборЗаписейЛьготныйСтаж.Удалить("ИС4__ТУ")
		КонецЕсли;
		Если НеВыводитьВФайлОУТ Тогда
			НаборЗаписейЛьготныйСтаж.Удалить("ИС4__ОУТ")
		КонецЕсли;
		Если НеВыводитьВФайлИС Тогда
			НаборЗаписейЛьготныйСтаж.Удалить("ИС4__ИС")
		КонецЕсли;
		Если НеВыводитьВФайлДопСведенияИС Тогда
			НаборЗаписейЛьготныйСтаж.Удалить("ИС4__ДопСведенияИС")
		КонецЕсли;
		Если НеВыводитьВФайлВЛ Тогда
			НаборЗаписейЛьготныйСтаж.Удалить("ИС4__ВЛ")
		КонецЕсли;
		
		УзелЛьготныйСтаж = ПроцедурыПерсонифицированногоУчета.ДобавитьУзелВДеревоXML(УзелСтажевыйПериод, "ИС4__ЛьготныйСтаж","");
		ПроцедурыПерсонифицированногоУчета.ДобавитьИнформациюВДерево(УзелЛьготныйСтаж, НаборЗаписейЛьготныйСтаж);
	КонецЕсли;
	
КонецПроцедуры

Функция ИсправленныйСимвольныйЭлемент(СтроковоеЗначение, ИспользоватьВРег = Истина) 
	
	НовоеЗначение = ?(ИспользоватьВРег, ВРег(СтроковоеЗначение), СтроковоеЗначение); // традиционно в файле строки передаются в верхнем регистре
	// правило ВС.ОИС2017.1.2: Лидирующие пробелы в символьных элементах, за исключением элементов блока ФИО, не допускаются
	НовоеЗначение = СокрЛП(НовоеЗначение);
	// правило ВС.ОИС2017.1.3: Если в символьном элементе, за исключением элементов блока ФИО, использован символ '-', то рядом с этим символом пробелы недопустимы
	Пока Найти(НовоеЗначение," -") > 0 Или Найти(НовоеЗначение,"- ") > 0 Цикл
		НовоеЗначение = СтрЗаменить(НовоеЗначение," -","-");
		НовоеЗначение = СтрЗаменить(НовоеЗначение,"- ","-");
	КонецЦикла;
	// правило ВС.ОИС2017.1.4: Наличие двух и более пробелов подряд внутри символьных элементов, за исключением элементов блока ФИО, не допускается (только один)
	Пока Найти(НовоеЗначение,"  ") > 0 Цикл
		НовоеЗначение = СтрЗаменить(НовоеЗначение,"  "," ");
	КонецЦикла;
	
	Возврат НовоеЗначение
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Если Проведен И ПринятоВПФР Тогда
		Возврат
	КонецЕсли;
	
	Если ФайлОтредактирован И Не ЗначениеЗаполнено(мСодержимоеФайла) Тогда
		Возврат
	КонецЕсли;
	
	Для Каждого Набор Из Движения Цикл
		Набор.Очистить();
	КонецЦикла;
	
	ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
	ОбработкаКомментариев.УдалитьСообщения();
	
	ПроверитьПравильностьЗаполненияДокумента(Отказ, Ложь);
	
	Если Отказ тогда
		ОбработкаКомментариев.ПоказатьСообщения();
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(мСодержимоеФайла) Тогда
		ТекстФайла = мСодержимоеФайла;
	Иначе
		ТекстФайла = СформироватьВыходнойФайл(Отказ);
	КонецЕсли;
	
	//Сохраним сформированный файл сведений в регистре сведений
	Запись = Движения.АрхивДанныхРегламентированнойОтчетности.Добавить();
	Запись.Объект = Ссылка;
	Запись.ОписаниеДанных = "Файл формы СЗВ-КОРР";
	Запись.Данные = ТекстФайла;
	
	мСодержимоеФайла = Неопределено;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ОтчетныйПериод = Дата(Год, 1, 1);
	КорректируемыйГод = Год(КорректируемыйПериод);
	
	Если Не ПринятоВПФР Тогда
		Формат2019 = Дата >= ПроцедурыПерсонифицированногоУчета.ДатаНачалаИспользованияФормата2019()
	КонецЕсли;
	
	ВидимостьКолонок = ВидимостьКолонокТабличныхЧастей(КорректируемыйГод);
	
	МассивТЧ = Новый Массив();
	МассивТЧ.Добавить(РаботникиОрганизации);
	КраткийСоставДокумента = ПроцедурыУправленияПерсоналом.ЗаполнитьКраткийСоставДокумента(МассивТЧ, "Физлицо");
	
	Соответствие = Новый Соответствие;
	Для каждого СтрокаТЧ Из РаботникиОрганизации Цикл
		Соответствие.Вставить(СтрокаТЧ.ИдентификаторСтроки, Истина)
	КонецЦикла;
	
	Если ТипСведенийСЗВ = Перечисления.ТипыСведенийСЗВ_КОРР.Отменяющая Тогда
		СведенияОЗаработке.Очистить();
		СведенияОЗаработкеНаВредныхИТяжелыхРаботах.Очистить();
		ЗаписиОСтаже.Очистить();
		НачисленныеУплаченныеВзносы.Очистить();
		УплаченныеВзносыРасшифровка.Очистить();
		
		ИменаКолонок = Новый Массив;
		Для Каждого Колонка Из ВидимостьКолонок["РаботникиОрганизации"] Цикл
			Если Колонка.Значение = Ложь Тогда
				ИменаКолонок.Добавить(Колонка.Ключ);
			КонецЕсли;
		КонецЦикла;
		ОчиститьЗначенияКолонок("РаботникиОрганизации", ИменаКолонок);
		
		// если указан признак АВИА, то категорию не заполняем
		Если КорректируемыйГод >= 2000 И КорректируемыйГод <= 2009 Тогда
			Для Каждого СтрокаРаботника Из РаботникиОрганизации Цикл
				Если СтрокаРаботника.ДополнительныйТариф Тогда
					СтрокаРаботника.КатегорияЗастрахованныхЛиц = Перечисления.КатегорииЗастрахованныхЛицПФР.ПустаяСсылка();
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	ИначеЕсли ТипСведенийСЗВ = Перечисления.ТипыСведенийСЗВ_КОРР.Корректирующая Тогда
		НачисленныеУплаченныеВзносы.Очистить();
		УплаченныеВзносыРасшифровка.Очистить();
	КонецЕсли;
	
	Если ТипСведенийСЗВ <> Перечисления.ТипыСведенийСЗВ_КОРР.Отменяющая Тогда
		
		Для Каждого ТабличнаяЧастьДокумента Из ВидимостьКолонок Цикл
			ИменаКолонок = Новый Массив;
			Для Каждого Колонка Из ТабличнаяЧастьДокумента.Значение Цикл
				Если Колонка.Значение = Ложь Тогда
					ИменаКолонок.Добавить(Колонка.Ключ);
				КонецЕсли;
			КонецЦикла;
			ОчиститьЗначенияКолонок(ТабличнаяЧастьДокумента.Ключ, ИменаКолонок);
		КонецЦикла;
		
		Если Не ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуВсехОрганизаций(глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"), "ИспользуютсяРаботыСДосрочнойПенсией") 
			Или КорректируемыйГод < 2013 Тогда
			СведенияОЗаработкеНаВредныхИТяжелыхРаботах.Очистить();
		КонецЕсли;
		
		// если указан признак АВИА, то категорию не заполняем
		Если КорректируемыйГод >= 2000 И КорректируемыйГод <= 2009 Тогда
			Для Каждого СтрокаРаботника Из РаботникиОрганизации Цикл
				Если СтрокаРаботника.ДополнительныйТариф Тогда
					СтрокаРаботника.КатегорияЗастрахованныхЛиц = Перечисления.КатегорииЗастрахованныхЛицПФР.ПустаяСсылка();
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		// В СЗВ-КОРР в 2017 году может быть только стажа
		Если КорректируемыйГод >= 2017 Тогда
			СведенияОЗаработке.Очистить();
			СведенияОЗаработкеНаВредныхИТяжелыхРаботах.Очистить();
		КонецЕсли;
	
	КонецЕсли;
	
	ЗависимыеТЧ = Новый Массив;
	ЗависимыеТЧ.Добавить("СведенияОЗаработке");
	ЗависимыеТЧ.Добавить("СведенияОЗаработкеНаВредныхИТяжелыхРаботах");
	ЗависимыеТЧ.Добавить("ЗаписиОСтаже");
	
	Для Каждого ИмяТЧ Из ЗависимыеТЧ Цикл
		ТабличнаяЧасть = ЭтотОбъект[ИмяТЧ];
		ВсегоСтрок = ТабличнаяЧасть.Количество();
		Для Сч = 1 По ВсегоСтрок Цикл
			СтрокаТЧ = ТабличнаяЧасть[ВсегоСтрок - Сч];
			Если Соответствие[СтрокаТЧ.ИдентификаторСтроки] = Неопределено Тогда
				ТабличнаяЧасть.Удалить(СтрокаТЧ)
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	ВыполнитьНумерациюЗаписейОСтаже(РежимЗаписи = РежимЗаписиДокумента.Проведение);
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	Отказ = ПринятоВПФР;
	
	Если Не Отказ Тогда
		Для Каждого Набор Из Движения Цикл
			Набор.Очистить();
			Набор.Записать();
		КонецЦикла;
		ФайлОтредактирован = Ложь;
		мСодержимоеФайла = Неопределено;
	КонецЕсли;
	
КонецПроцедуры
