Перем мУдалятьДвижения;

Перем мИспользоватьТару Экспорт;
Перем мВалютаРегламентированногоУчета Экспорт;
Перем КодОперацииПартииТоваров;
Перем УчетнаяПолитикаРегл;
Перем мПараметрыСвязиСтрокТЧ Экспорт;
Перем мУказаниеПроектовВТабличнойЧастиДокументов Экспорт;

Перем мСтруктураПараметровВзаиморасчетов Экспорт;

Перем мУказаниеСкладовВТЧ Экспорт;

// Хранит структуру, содержащую параметры для определения договора, доступного в данном документе:
//    список допустимых видов договоров;
//    список допустимых способов ведения взаиморасчетов.
Перем мСтруктураПараметровДляПолученияДоговора Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда

// Функция осуществляет печать этикеток для позиций ТЧ
//
// Параметры
//  Нет
//
Процедура ПечататьЭтикетки()

	УправлениеРозничнойТорговлей.НапечататьЭтикеткиИзДокумента(Ссылка);

КонецПроцедуры // ПечататьЭтикетки()

// Функция печатает ценники.
//
Функция ПечатьЦенников()

	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ИСТИНА КАК Печать,
	|	Док.Номенклатура КАК Номенклатура,
	|	Док.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	Док.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаИзмерения,
	|	0 КАК Цена,
	|	1 КАК Количество
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.Товары КАК Док
	|ГДЕ
	|	Док.Ссылка = &Док
	|");

	Запрос.УстановитьПараметр("Док", Ссылка);

	ОбработкаПечатьЦенников = Обработки.ПечатьЦенников.Создать();
	ОбработкаПечатьЦенников.Товары.Загрузить(Запрос.Выполнить().Выгрузить());

	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ЗаполнитьЦены", Истина);

	ФормаПечатьЦенников = ОбработкаПечатьЦенников.ПолучитьФорму("Форма");
	ФормаПечатьЦенников.Параметр = СтруктураПараметров;
	ФормаПечатьЦенников.Открыть();

КонецФункции // ПечатьЦенников()

// Функция формирует табличный документ унифицированной формы ОС-14
//
// Параметры: 
//  Нет.
//
// Возвращаемое значение:
//  Табличный документ по форме ОС-14 (приходный ордер).
//
Функция ПечатьОС14(ПечатьПоДаннымУпрУчета = Истина)
	
	Макет       = ПолучитьМакет("ОС14");
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПоступлениеТоваровУслуг_ОС14";
	
	Если ПечатьПоДаннымУпрУчета тогда
		ВалютаПечати = глЗначениеПеременной("ВалютаУправленческогоУчета");
	Иначе
		ВалютаПечати = глЗначениеПеременной("ВалютаРегламентированногоУчета");
	КонецЕсли;	
	
	СтруктураВалютыПечати = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаПечати, Дата);
	КурсВалютыПечати	  = СтруктураВалютыПечати.Курс;
	КратностьВалютыПечати = СтруктураВалютыПечати.Кратность;
	
	мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");
	КурсВалютыДокумента		 = ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);
	КратностьВалютыДокумента = ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);
	
	Коэф1 = КурсВалютыПечати * КратностьВалютыДокумента;
	
	Если Коэф1<>0 тогда
		КоэффициентПересчетаВалюты = (КурсВалютыДокумента * КратностьВалютыПечати) / (Коэф1);
	Иначе
		КоэффициентПересчетаВалюты = 0;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка"                    , Ссылка);
	Запрос.УстановитьПараметр("Телефон"                 , Перечисления.ТипыКонтактнойИнформации.Телефон);
	Запрос.УстановитьПараметр("ТелефонОрганизации"   	, Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации);
	Запрос.УстановитьПараметр("ТелефонКонтрагента"   	, Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента);
	Запрос.УстановитьПараметр("ПустойБанковскийСчет" 	, Справочники.БанковскиеСчета.ПустаяСсылка());
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПоступлениеТоваровУслуг.Дата КАК ДатаДокумента,
	|	ПоступлениеТоваровУслуг.Номер КАК НомерДокумента,
	|	ПоступлениеТоваровУслуг.Организация КАК ОрганизацияПолучатель,
	|	ПоступлениеТоваровУслуг.СкладОрдер КАК МестоПриема,
	|	ПоступлениеТоваровУслуг.СкладОрдер.Представление КАК МестоПриемаНаименование,
	|	ВЫБОР КОГДА ТелефонОрганизации.Представление ЕСТЬ NULL ТОГДА """" ИНАЧЕ ТелефонОрганизации.Представление КОНЕЦ ОрганизацияПолучательТелефоны,
	|	ВЫБОР КОГДА ТелефонКонтрагента.Представление ЕСТЬ NULL ТОГДА """" ИНАЧЕ ТелефонКонтрагента.Представление КОНЕЦ ОрганизацияПоставщикТелефоны,
	|	ВЫБОР КОГДА ПоступлениеТоваровУслуг.Организация.ОсновнойБанковскийСчет = &ПустойБанковскийСчет ТОГДА """" ИНАЧЕ
	|	(""" + "Банк: " + """+ПоступлениеТоваровУслуг.Организация.ОсновнойБанковскийСчет.Банк.Наименование+""" + ", " + """+
	|	 """ + "расч.сч. " + """+ПоступлениеТоваровУслуг.Организация.ОсновнойБанковскийСчет.НомерСчета+""" + ", " + """+
	|	 """ + "корр.сч. " + """+ПоступлениеТоваровУслуг.Организация.ОсновнойБанковскийСчет.Банк.КоррСчет+""" + ", " + """+
	|	 """ + "БИК " + """+ПоступлениеТоваровУслуг.Организация.ОсновнойБанковскийСчет.Банк.Код) КОНЕЦ КАК ОрганизацияПолучательБанковскиеРеквизиты,
	|	ВЫБОР КОГДА ПоступлениеТоваровУслуг.Контрагент.ОсновнойБанковскийСчет = &ПустойБанковскийСчет ТОГДА """" ИНАЧЕ
	|	(""" + "Банк: " + """+ПоступлениеТоваровУслуг.Контрагент.ОсновнойБанковскийСчет.Банк.Наименование+""" + ", " + """+
	|	 """ + "расч.сч. " + """+ПоступлениеТоваровУслуг.Контрагент.ОсновнойБанковскийСчет.НомерСчета+""" + ", " + """+
	|	 """ + "корр.сч. " + """+ПоступлениеТоваровУслуг.Контрагент.ОсновнойБанковскийСчет.Банк.КоррСчет+""" + ", " + """+
	|	 """ + "БИК " + """+ПоступлениеТоваровУслуг.Контрагент.ОсновнойБанковскийСчет.Банк.Код) КОНЕЦ КАК ОрганизацияПоставщикБанковскиеРеквизиты,
	|	ВЫБОР КОГДА ПоступлениеТоваровУслуг.Контрагент.ОсновнойБанковскийСчет = &ПустойБанковскийСчет ТОГДА """" ИНАЧЕ
	|	(""" + "Банк: " + """+ПоступлениеТоваровУслуг.Контрагент.ОсновнойБанковскийСчет.Банк.Наименование+""" + ", " + """+
	|	 """ + "расч.сч. " + """+ПоступлениеТоваровУслуг.Контрагент.ОсновнойБанковскийСчет.НомерСчета+""" + ", " + """+
	|	 """ + "корр.сч. " + """+ПоступлениеТоваровУслуг.Контрагент.ОсновнойБанковскийСчет.Банк.КоррСчет+""" + ", " + """+
	|	 """ + "БИК " + """+ПоступлениеТоваровУслуг.Контрагент.ОсновнойБанковскийСчет.Банк.Код) КОНЕЦ КАК ОрганизацияГрузоотправительБанковскиеРеквизиты,
	|	ПоступлениеТоваровУслуг.УчитыватьНДС,
	|	ПоступлениеТоваровУслуг.СуммаВключаетНДС,
	|	ПоступлениеТоваровУслуг.НДСВключенВСтоимость,
	|	ПоступлениеТоваровУслуг.СуммаДокумента,
	|	ПоступлениеТоваровУслуг.Контрагент КАК ОрганизацияПоставщик,
	|	ПоступлениеТоваровУслуг.Контрагент КАК ОрганизацияГрузоотправитель,
	|	ПоступлениеТоваровУслуг.ДоговорКонтрагента,
	|	ПоступлениеТоваровУслуг.НомерВходящегоДокумента КАК ОснованиеНомер,
	|	ПоступлениеТоваровУслуг.ДатаВходящегоДокумента КАК ОснованиеДата,
	|	ПоступлениеТоваровУслуг.ПодразделениеОрганизации КАК Подразделение,
	|	ПоступлениеТоваровУслуг.ПодразделениеОрганизации КАК ПодразделениеНаименование
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК ТелефонОрганизации
	|		ПО (ТелефонОрганизации.Объект = ПоступлениеТоваровУслуг.Организация)
	|			И (ТелефонОрганизации.Тип = &Телефон)
	|			И (ТелефонОрганизации.Вид = &ТелефонОрганизации)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК ТелефонКонтрагента
	|		ПО (ТелефонКонтрагента.Объект = ПоступлениеТоваровУслуг.Контрагент)
	|			И (ТелефонКонтрагента.Тип = &Телефон)
	|			И (ТелефонКонтрагента.Вид = &ТелефонКонтрагента)
	|ГДЕ
	|	ПоступлениеТоваровУслуг.Ссылка = &Ссылка";
	
	Если ПечатьПоДаннымУпрУчета Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"ПодразделениеОрганизации", "Подразделение");
	КонецЕсли;
	
	ВыборкаПоШапке = Запрос.Выполнить().Выбрать();
	ВыборкаПоШапке.Следующий();
	
	Шапка         = Макет.ПолучитьОбласть("Шапка");
	ШапкаТаблицы  = Макет.ПолучитьОбласть("ШапкаТаблицы");
	СтрокаТаблицы = Макет.ПолучитьОбласть("СтрокаТаблицы");
	Подвал        = Макет.ПолучитьОбласть("Подвал");
	
	ОрганизацияПолучательНаименование       = ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ВыборкаПоШапке.ОрганизацияПолучатель, ВыборкаПоШапке.ДатаДокумента), "ПолноеНаименование,");
	ОрганизацияПоставщикНаименование        = ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ВыборкаПоШапке.ОрганизацияПоставщик, ВыборкаПоШапке.ДатаДокумента), "ПолноеНаименование,");
	ОрганизацияГрузоотправительНаименование = ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ВыборкаПоШапке.ОрганизацияГрузоотправитель, ВыборкаПоШапке.ДатаДокумента), "ПолноеНаименование,");
	
	Шапка.Параметры.Заполнить(ВыборкаПоШапке);
	Шапка.Параметры.ОрганизацияПолучательНаименование       = ОрганизацияПолучательНаименование;
	Шапка.Параметры.ОрганизацияПоставщикНаименование        = ОрганизацияПоставщикНаименование;
	Шапка.Параметры.ОрганизацияГрузоотправительНаименование = ОрганизацияГрузоотправительНаименование;
	
	Руководители = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизаций(ВыборкаПоШапке.ОрганизацияПолучатель, ВыборкаПоШапке.ДатаДокумента,);
	СведенияОПокупателе = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ВыборкаПоШапке.ОрганизацияПолучатель, ВыборкаПоШапке.ДатаДокумента);
	
	Шапка.Параметры.ОрганизацияПолучательКодПоОКПО        = СведенияОПокупателе.КодПоОКПО;
	
	Шапка.Параметры.РуководительНаименование = Руководители.Руководитель;
	Шапка.Параметры.РуководительДолжность    = Руководители.РуководительДолжность;
	Шапка.Параметры.Основание                = ВыборкаПоШапке.ДоговорКонтрагента;
	
	ТабДокумент.Вывести(Шапка);
	ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	ШапкаТаблицы.Параметры.Валюта = ВалютаПечати.Наименование;
	ТабДокумент.Вывести(ШапкаТаблицы);
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка"                    , Ссылка);
	Запрос.УстановитьПараметр("КоэффициентПересчетаВалюты", КоэффициентПересчетаВалюты);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПоступлениеТоваровУслуг.Ссылка,
	|	ПоступлениеТоваровУслуг.НомерСтроки КАК НомерСтроки,
	|	ПоступлениеТоваровУслуг.Номенклатура КАК Оборудование,
	|	ПоступлениеТоваровУслуг.Номенклатура.НаименованиеПолное КАК ОборудованиеНаименование,
	|	ПоступлениеТоваровУслуг.ЕдиницаИзмерения.Представление КАК ЕдиницаИзмеренияНаименование,
	|	ПоступлениеТоваровУслуг.Коэффициент,
	|	ПоступлениеТоваровУслуг.СтавкаНДС,
	|	ПоступлениеТоваровУслуг.Количество,
	|	ПоступлениеТоваровУслуг.Количество КАК ФактическиКоличество,
	|	ПоступлениеТоваровУслуг.Цена * &КоэффициентПересчетаВалюты КАК СтоимостьЗаЕдиницу,
	|	ПоступлениеТоваровУслуг.Сумма * &КоэффициентПересчетаВалюты КАК Сумма,
	|	ПоступлениеТоваровУслуг.СуммаНДС * &КоэффициентПересчетаВалюты КАК СуммаНДС
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.Оборудование КАК ПоступлениеТоваровУслуг
	|ГДЕ
	|	ПоступлениеТоваровУслуг.Ссылка = &Ссылка";
	
	ВыборкаПоОборудованию = Запрос.Выполнить().Выбрать();
	Пока ВыборкаПоОборудованию.Следующий() Цикл
		
		СтрокаТаблицы.Параметры.Заполнить(ВыборкаПоОборудованию);
		
		Если ВыборкаПоШапке.УчитыватьНДС Тогда
			Если ВыборкаПоШапке.СуммаВключаетНДС И НЕ ВыборкаПоШапке.НДСВключенВСтоимость Тогда
				СтрокаТаблицы.Параметры.СтоимостьВсего     = ВыборкаПоОборудованию.Сумма - ВыборкаПоОборудованию.СуммаНДС;
				СтрокаТаблицы.Параметры.СтоимостьЗаЕдиницу = ?(ВыборкаПоОборудованию.Количество > 0,
				(ВыборкаПоОборудованию.Сумма - ВыборкаПоОборудованию.СуммаНДС) / ВыборкаПоОборудованию.Количество,
				ВыборкаПоОборудованию.Сумма - ВыборкаПоОборудованию.СуммаНДС);
			ИначеЕсли НЕ ВыборкаПоШапке.СуммаВключаетНДС И ВыборкаПоШапке.НДСВключенВСтоимость Тогда
				СтрокаТаблицы.Параметры.СтоимостьВсего     = ВыборкаПоОборудованию.Сумма + ВыборкаПоОборудованию.СуммаНДС;
				СтрокаТаблицы.Параметры.СтоимостьЗаЕдиницу = ?(ВыборкаПоОборудованию.Количество > 0,
				(ВыборкаПоОборудованию.Сумма + ВыборкаПоОборудованию.СуммаНДС) / ВыборкаПоОборудованию.Количество,
				ВыборкаПоОборудованию.Сумма + ВыборкаПоОборудованию.СуммаНДС);
			Иначе
				СтрокаТаблицы.Параметры.СтоимостьВсего     = ВыборкаПоОборудованию.Сумма;
				СтрокаТаблицы.Параметры.СтоимостьЗаЕдиницу = ВыборкаПоОборудованию.СтоимостьЗаЕдиницу;
			КонецЕсли;
		Иначе
			СтрокаТаблицы.Параметры.СтоимостьВсего = ВыборкаПоОборудованию.Сумма;
		КонецЕсли;
			
		ТабДокумент.Вывести(СтрокаТаблицы);
		
	КонецЦикла;
	
	Подвал.Параметры.ГлавныйБухгалтерНаименование	= Руководители.ГлавныйБухгалтер;
	
	ТабДокумент.Вывести(Подвал);
	
	ТабДокумент.АвтоМасштаб = Истина;
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ТабДокумент.ПолеСверху = 0;
	ТабДокумент.ПолеСнизу = 0;
	
	Возврат ТабДокумент;
	
КонецФункции // ПечатьОС14()

// Функция осуществляет запуск обработки формирующей печатную форму "Бланк товарного наполнения".
//
// Параметры:
//  НаПринтер - Булево. Если Истина, тогда печать выполняется непосредственно на принтер.
//
// Возвращаемое значение:
//  Неопределено.
//
Функция ПечатьБланк(НаПринтер)

	Обработки.ПечатьРаскладкиНоменклатурыПоМестамХранения.Создать().НапечататьИзДокумента(Ссылка, , , НаПринтер);

	Возврат Неопределено;

КонецФункции // ПечатьБланк()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение(НСтр("ru = 'Документ можно распечатать только после его записи'"));
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение(НСтр("ru = Недостаточно полномочий для печати непроведенного документа!'"));
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	// Получить экземпляр документа на печать
	Если ИмяМакета = "ОС14упр" тогда

		// Унифицированная форма М-4 (Акт о приеме оборудования) по данным упручета
		ТабДокумент = ПечатьОС14();

	ИначеЕсли ИмяМакета = "ОС14бух" тогда
		
		// Унифицированная форма М-4 (Акт о приеме оборудования) по данным бухучета
		ТабДокумент = ПечатьОС14(Ложь);

	ИначеЕсли ИмяМакета = "СправкаРасчетВал" тогда

		// Справка-расчет формирования рублевой суммы документа в валюте
		БухгалтерскийУчетРасчетовСКонтрагентами.НапечататьСправкуРасчетРублеваяСуммаДокументаВВалюте(Ссылка);
		Возврат;
	ИначеЕсли ИмяМакета = "Бланк" Тогда

		ТабДокумент = ПечатьБланк(НаПринтер);
	ИначеЕсли ИмяМакета = "Ценники" Тогда
		ТабДокумент = ПечатьЦенников();
	ИначеЕсли ИмяМакета = "Этикетки" Тогда
		ПечататьЭтикетки();
		Возврат;
	ИначеЕсли ИмяМакета = "СерийныеНомера" Тогда
	
		ТабДокумент = УчетСерийныхНомеров.ПечатьСерийныхНомеров(Ссылка, "Товары");
	
	ИначеЕсли ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда

		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);

		Если ТабДокумент = Неопределено Тогда
			Возврат;
		КонецЕсли;
	Иначе
		//Формы Накладная, ТОРГ4, М4, ТОРГ12 печатаются из модуля менеджера
		ПараметрКоманды = Новый Массив;
		ПараметрКоманды.Добавить(Ссылка);
		
		Если НаПринтер Тогда
			УправлениеПечатьюКлиент.ВыполнитьКомандуПечатиНаПринтер("Документ.ПоступлениеТоваровУслуг", ИмяМакета, 
										ПараметрКоманды, Неопределено);
		Иначе
			УправлениеПечатьюКлиент.ВыполнитьКомандуПечати("Документ.ПоступлениеТоваровУслуг", ИмяМакета, 
										ПараметрКоманды, Неопределено, Неопределено);
		КонецЕсли;
		Возврат;
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, Строка(ВидОперации)), Ссылка);

КонецПроцедуры // Печать

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	СтруктураМакетов = Новый Структура;

	Если НЕ (ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ОбъектыСтроительства) тогда

		СтруктураМакетов.Вставить("ТОРГ12",          "ТОРГ-12 (Товарная накладная за поставщика с услугами)");
		СтруктураМакетов.Вставить("ТОРГ12_БезУслуг", "ТОРГ-12 (Товарная накладная за поставщика)");
		СтруктураМакетов.Вставить("ТОРГ4",           "ТОРГ-4 (Акт о приемке товара без счета поставщика)");
		СтруктураМакетов.Вставить("М4",              "М-4 (Приходный ордер)");

		Если  ОтражатьВУправленческомУчете тогда 
			СтруктураМакетов.Вставить("ОС14упр",     "ОС-14 (Акт о приеме оборудования) (упр. учет)");
		КонецЕсли;
		Если  ОтражатьВБухгалтерскомУчете тогда 
			СтруктураМакетов.Вставить("ОС14бух",     "ОС-14 (Акт о приеме оборудования) (бух. учет)");
		КонецЕсли;

		СтруктураМакетов.Вставить("Бланк",           "Бланк товарного наполнения");
	КонецЕсли;

	Если  ОтражатьВБухгалтерскомУчете тогда 
		СтруктураМакетов.Вставить( "СправкаРасчетВал", "Справка-расчет ""Рублевая сумма документа в валюте""");
	КонецЕсли;
		
	СтруктураМакетов.Вставить("Накладная",           "Приходная накладная");
	СтруктураМакетов.Вставить("Ценники", "Ценники на товары");
	СтруктураМакетов.Вставить("Этикетки",        "Этикетки");
	СтруктураМакетов.Вставить("СерийныеНомера",      "Список серийных номеров");

	Возврат СтруктураМакетов;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

#КонецЕсли

// Очищает ненужные строки табличных частей
//
Процедура ОчиститьНенужныеТабличныеЧасти() Экспорт

	Если ВидОперации <> Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Оборудование Тогда
		Оборудование.Очистить();
	КонецЕсли;
	
	Если ВидОперации <> Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ОбъектыСтроительства Тогда
		ОбъектыСтроительства.Очистить();
	Иначе
		Товары.Очистить();
		ВозвратнаяТара.Очистить();
	КонецЕсли;
	
	// Если договор с комитентом, то надо почистить закладку "Услуги".
	Если Услуги.Количество() > 0
	   И ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда

		Услуги.Очистить();

	КонецЕсли;
	Если ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку Тогда
		Услуги.Очистить();
		ВозвратнаяТара.Очистить();
	КонецЕсли;
	

КонецПроцедуры // ОчиститьНенужныеТабличныеЧасти()

// Процедура выполняет копирование табличной части заказа поставщику в документ.
//
Процедура СкопироватьОборудование(ДокументОснование = Неопределено) Экспорт
    Курс = ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);
	Кратность = ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);

	Если НЕ ЗначениеЗаполнено(ДокументОснование) Тогда
		ДокументОснование = Сделка;
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Счет", ДокументОснование);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫБОР КОГДА СчетНаОплатуТовары.Ссылка.ВалютаДокумента = СчетНаОплатуТовары.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|		СчетНаОплатуТовары.Ссылка.КурсВзаиморасчетов
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ                                           КАК КурсДокумента,
	|	ВЫБОР КОГДА СчетНаОплатуТовары.Ссылка.ВалютаДокумента = СчетНаОплатуТовары.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|		СчетНаОплатуТовары.Ссылка.КратностьВзаиморасчетов
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ                                           КАК КратностьДокумента,
	|	СчетНаОплатуТовары.Ссылка.ВалютаДокумента       КАК ВалютаДокумента,
	|	СчетНаОплатуТовары.Ссылка.СуммаВключаетНДС      КАК СуммаВключаетНДС,
	|	СчетНаОплатуТовары.ЕдиницаИзмерения,
	|	СчетНаОплатуТовары.Количество,
	|	СчетНаОплатуТовары.Коэффициент,
	|	СчетНаОплатуТовары.Номенклатура,
	|	СчетНаОплатуТовары.СтавкаНДС,
	|	СчетНаОплатуТовары.Сумма,
	|	СчетНаОплатуТовары.ХарактеристикаНоменклатуры
	|ИЗ
	|	Документ.СчетНаОплатуПоставщика.Оборудование КАК СчетНаОплатуТовары
	|
	|ГДЕ
	|	СчетНаОплатуТовары.Ссылка = &Счет";

	РезультатЗапроса = Запрос.Выполнить();

	Выборка = РезультатЗапроса.Выбрать();
	
	ТекПользователь = глЗначениеПеременной("глТекущийПользователь");
	ЕстьРеквизитПроцентСкидкиНаценки = Ложь;
	ПересчитыватьСкидку = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ПриИзмененииСуммыПересчитыватьСкидку");
	ЕстьРеквизитПроцентАвтоматическихСкидок = Ложь;	
	
	ДокументОснованиеЗаказПоставщику = ДокументОснование.ДокументОснование;
	Если ТипЗнч(ДокументОснованиеЗаказПоставщику) <> Тип("ДокументСсылка.ЗаказПоставщику") Тогда
		ДокументОснованиеЗаказПоставщику = Неопределено;
	КонецЕсли;
	ДокументОснованиеСклад = ДокументОснование.Склад;
	
	Пока Выборка.Следующий() Цикл

		СтрокаТабличнойЧасти = Оборудование.Добавить();

		СтрокаТабличнойЧасти.Номенклатура         = Выборка.Номенклатура;
		СтрокаТабличнойЧасти.Количество           = Выборка.Количество;
		СтрокаТабличнойЧасти.ЕдиницаИзмерения     = Выборка.ЕдиницаИзмерения;
		СтрокаТабличнойЧасти.Коэффициент          = Выборка.Коэффициент;
		СтрокаТабличнойЧасти.СтавкаНДС            = Выборка.СтавкаНДС;

		СтрокаТабличнойЧасти.Сумма = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(
										МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.Сумма, Выборка.ВалютаДокумента, ВалютаДокумента,
												   Выборка.КурсДокумента, Курс,
												   Выборка.КратностьДокумента, Кратность),
										Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов,
										Выборка.СуммаВключаетНДС,
										УчитыватьНДС,
										СуммаВключаетНДС,
										УчетНДС.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
		ОбработкаТабличныхЧастей.ПриИзмененииСуммыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, ТекПользователь,,ЕстьРеквизитПроцентСкидкиНаценки,ПересчитыватьСкидку,ЕстьРеквизитПроцентАвтоматическихСкидок,"Оборудование");
		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

		СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Выборка.ХарактеристикаНоменклатуры;		
		СтрокаТабличнойЧасти.ЗаказПоставщику 			= ДокументОснованиеЗаказПоставщику;
		СтрокаТабличнойЧасти.Склад 						= ДокументОснованиеСклад;
		
	КонецЦикла;

КонецПроцедуры // СкопироватьОборудование()

// Процедура выполняет копирование табличной части заказа поставщику в документ.
//
Процедура СкопироватьТовары(ДокументОснование = Неопределено) Экспорт
    Курс = ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);
	Кратность = ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);

	Если НЕ ЗначениеЗаполнено(ДокументОснование) Тогда
		ДокументОснование = Сделка;
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Счет", ДокументОснование);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫБОР КОГДА СчетНаОплатуТовары.Ссылка.ВалютаДокумента = СчетНаОплатуТовары.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|		СчетНаОплатуТовары.Ссылка.КурсВзаиморасчетов
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ                                           КАК КурсДокумента,
	|	ВЫБОР КОГДА СчетНаОплатуТовары.Ссылка.ВалютаДокумента = СчетНаОплатуТовары.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|		СчетНаОплатуТовары.Ссылка.КратностьВзаиморасчетов
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ                                           КАК КратностьДокумента,
	|	СчетНаОплатуТовары.Ссылка.ВалютаДокумента       КАК ВалютаДокумента,
	|	СчетНаОплатуТовары.Ссылка.СуммаВключаетНДС      КАК СуммаВключаетНДС,
	|	СчетНаОплатуТовары.ЕдиницаИзмерения,
	|	СчетНаОплатуТовары.ЕдиницаИзмеренияМест,
	|	СчетНаОплатуТовары.Количество,
	|	СчетНаОплатуТовары.КоличествоМест,
	|	СчетНаОплатуТовары.Коэффициент,
	|	СчетНаОплатуТовары.Номенклатура,
	|	СчетНаОплатуТовары.СтавкаНДС,
	|	СчетНаОплатуТовары.Сумма,
	|	СчетНаОплатуТовары.ХарактеристикаНоменклатуры
	|ИЗ
	|	Документ.СчетНаОплатуПоставщика.Товары КАК СчетНаОплатуТовары
	|
	|ГДЕ
	|	СчетНаОплатуТовары.Ссылка = &Счет";

	РезультатЗапроса = Запрос.Выполнить();

	Выборка = РезультатЗапроса.Выбрать();
	
	ТекПользователь = глЗначениеПеременной("глТекущийПользователь");
	ЕстьРеквизитПроцентСкидкиНаценки = Ложь;
	ПересчитыватьСкидку = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ПриИзмененииСуммыПересчитыватьСкидку");
	ЕстьРеквизитПроцентАвтоматическихСкидок = Ложь;	
	
	ДокументОснованиеЗаказПоставщику = ДокументОснование.ДокументОснование;
	Если ТипЗнч(ДокументОснованиеЗаказПоставщику) <> Тип("ДокументСсылка.ЗаказПоставщику") Тогда
		ДокументОснованиеЗаказПоставщику = Неопределено;
	КонецЕсли;
	ДокументОснованиеСклад = ДокументОснование.Склад;
	
	Пока Выборка.Следующий() Цикл

		СтрокаТабличнойЧасти = Товары.Добавить();

		СтрокаТабличнойЧасти.Номенклатура         = Выборка.Номенклатура;
		СтрокаТабличнойЧасти.Количество           = Выборка.Количество;
		СтрокаТабличнойЧасти.КоличествоМест       = Выборка.КоличествоМест;
		СтрокаТабличнойЧасти.ЕдиницаИзмерения     = Выборка.ЕдиницаИзмерения;
		СтрокаТабличнойЧасти.ЕдиницаИзмеренияМест = Выборка.ЕдиницаИзмеренияМест;
		СтрокаТабличнойЧасти.Коэффициент          = Выборка.Коэффициент;
		СтрокаТабличнойЧасти.СтавкаНДС            = Выборка.СтавкаНДС;

		СтрокаТабличнойЧасти.Сумма = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(
										МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.Сумма, Выборка.ВалютаДокумента, ВалютаДокумента,
												   Выборка.КурсДокумента, Курс,
												   Выборка.КратностьДокумента, Кратность),
										Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов,
										Выборка.СуммаВключаетНДС,
										УчитыватьНДС,
										СуммаВключаетНДС,
										УчетНДС.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
		ОбработкаТабличныхЧастей.ПриИзмененииСуммыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, ТекПользователь,,ЕстьРеквизитПроцентСкидкиНаценки,ПересчитыватьСкидку,ЕстьРеквизитПроцентАвтоматическихСкидок,"Товары");
		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

		СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Выборка.ХарактеристикаНоменклатуры;
		СтрокаТабличнойЧасти.ЗаказПоставщику 			= ДокументОснованиеЗаказПоставщику;
		СтрокаТабличнойЧасти.Склад 						= ДокументОснованиеСклад;
		
	КонецЦикла;

КонецПроцедуры // СкопироватьТовары()

// Процедура выполняет копирование возвратной тары заказа поставщику в документ.
//
Процедура СкопироватьВозвратнуюТару(ДокументОснование = Неопределено) Экспорт
    Курс = ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);
	Кратность = ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);

	Если НЕ ЗначениеЗаполнено(ДокументОснование) Тогда
		ДокументОснование = Сделка;
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Счет", ДокументОснование);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Ссылка.ВалютаДокумента                          КАК ВалютаДокумента,
	|	ВЫБОР КОГДА СчетНаОплатуВозвратнаяТара.Ссылка.ВалютаДокумента = СчетНаОплатуВозвратнаяТара.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|		СчетНаОплатуВозвратнаяТара.Ссылка.КурсВзаиморасчетов
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ                                           КАК КурсДокумента,
	|	ВЫБОР КОГДА СчетНаОплатуВозвратнаяТара.Ссылка.ВалютаДокумента = СчетНаОплатуВозвратнаяТара.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|		СчетНаОплатуВозвратнаяТара.Ссылка.КратностьВзаиморасчетов
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ                                           КАК КратностьДокумента,
	|	СчетНаОплатуВозвратнаяТара.Количество,
	|	СчетНаОплатуВозвратнаяТара.Номенклатура,
	|	СчетНаОплатуВозвратнаяТара.Сумма
	|ИЗ
	|	Документ.СчетНаОплатуПоставщика.ВозвратнаяТара КАК СчетНаОплатуВозвратнаяТара
	|
	|ГДЕ
	|	СчетНаОплатуВозвратнаяТара.Ссылка = &Счет";

	РезультатЗапроса = Запрос.Выполнить();

	Выборка = РезультатЗапроса.Выбрать();
	
	ДокументОснованиеЗаказПоставщику = ДокументОснование.ДокументОснование;
	Если ТипЗнч(ДокументОснованиеЗаказПоставщику) <> Тип("ДокументСсылка.ЗаказПоставщику") Тогда
		ДокументОснованиеЗаказПоставщику = Неопределено;
	КонецЕсли;
	ДокументОснованиеСклад = ДокументОснование.Склад;
	
	Пока Выборка.Следующий() Цикл

		СтрокаВозвратнойТары = ВозвратнаяТара.Добавить();

		СтрокаВозвратнойТары.Номенклатура     = Выборка.Номенклатура;
		СтрокаВозвратнойТары.Количество       = Выборка.Количество;

		СтрокаВозвратнойТары.Сумма = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.Сумма, 
		                                        Выборка.ВалютаДокумента, 
		                                        ВалютаДокумента,
		                                        Выборка.КурсДокумента, Курс,
												Выборка.КратностьДокумента, Кратность);

		ОбработкаТабличныхЧастей.ПриИзмененииВозвратнойТарыТабЧасти(СтрокаВозвратнойТары, ЭтотОбъект);
		ОбработкаТабличныхЧастей.ПриИзмененииСуммыВозвратнойТарыТабЧасти(СтрокаВозвратнойТары, ЭтотОбъект);
		СтрокаВозвратнойТары.ЗаказПоставщику  = ДокументОснованиеЗаказПоставщику;
		СтрокаВозвратнойТары.Склад 			  = ДокументОснованиеСклад;
		
	КонецЦикла;

КонецПроцедуры // СкопироватьВозвратнуюТару()

// Процедура выполняет копирование табличной части заказа поставщику в документ.
//
Процедура СкопироватьУслуги(ДокументОснование = Неопределено) Экспорт
    Курс = ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);
	Кратность = ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);

	Если НЕ ЗначениеЗаполнено(ДокументОснование) Тогда
		ДокументОснование = Сделка;
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Счет", ДокументОснование);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫБОР КОГДА СчетНаОплатуУслуги.Ссылка.ВалютаДокумента = СчетНаОплатуУслуги.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|		СчетНаОплатуУслуги.Ссылка.КурсВзаиморасчетов
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ                                           КАК КурсДокумента,
	|	ВЫБОР КОГДА СчетНаОплатуУслуги.Ссылка.ВалютаДокумента = СчетНаОплатуУслуги.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|		СчетНаОплатуУслуги.Ссылка.КратностьВзаиморасчетов
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ                                           КАК КратностьДокумента,
	|	СчетНаОплатуУслуги.Ссылка.ВалютаДокумента       КАК ВалютаДокумента,
	|	СчетНаОплатуУслуги.Ссылка.СуммаВключаетНДС      КАК СуммаВключаетНДС,
	|	СчетНаОплатуУслуги.Содержание,
	|	СчетНаОплатуУслуги.Количество,
	|	СчетНаОплатуУслуги.Номенклатура,
	|	СчетНаОплатуУслуги.СтавкаНДС,
	|	СчетНаОплатуУслуги.Сумма
	|ИЗ
	|	Документ.СчетНаОплатуПоставщика.Услуги КАК СчетНаОплатуУслуги
	|
	|ГДЕ
	|	СчетНаОплатуУслуги.Ссылка = &Счет";

	РезультатЗапроса = Запрос.Выполнить();

	Выборка = РезультатЗапроса.Выбрать();
	
	ТекПользователь = глЗначениеПеременной("глТекущийПользователь");
	ЕстьРеквизитПроцентСкидкиНаценки = Ложь;
	ПересчитыватьСкидку = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ПриИзмененииСуммыПересчитыватьСкидку");
	ЕстьРеквизитПроцентАвтоматическихСкидок = Ложь;	
	
	ДокументОснованиеЗаказПоставщику = ДокументОснование.ДокументОснование;
	Если ТипЗнч(ДокументОснованиеЗаказПоставщику) <> Тип("ДокументСсылка.ЗаказПоставщику") Тогда
		ДокументОснованиеЗаказПоставщику = Неопределено;
	КонецЕсли;
	
	Пока Выборка.Следующий() Цикл

		СтрокаТабличнойЧасти = Услуги.Добавить();

		СтрокаТабличнойЧасти.Номенклатура     = Выборка.Номенклатура;
		СтрокаТабличнойЧасти.Количество       = Выборка.Количество;
		СтрокаТабличнойЧасти.Содержание       = Выборка.Содержание;
		СтрокаТабличнойЧасти.СтавкаНДС        = Выборка.СтавкаНДС;
		
		СтрокаТабличнойЧасти.СтатьяЗатрат 		  = СтрокаТабличнойЧасти.Номенклатура.СтатьяЗатрат;
		СтрокаТабличнойЧасти.НоменклатурнаяГруппа = СтрокаТабличнойЧасти.Номенклатура.НоменклатурнаяГруппаЗатрат;

		СтрокаТабличнойЧасти.Сумма = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(
										МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.Сумма, Выборка.ВалютаДокумента, ВалютаДокумента,
												   Выборка.КурсДокумента, Курс,
												   Выборка.КратностьДокумента, Кратность),
										Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов,
										Выборка.СуммаВключаетНДС,
										УчитыватьНДС,
										СуммаВключаетНДС,
										УчетНДС.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
		ОбработкаТабличныхЧастей.ПриИзмененииСуммыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, ТекПользователь,,ЕстьРеквизитПроцентСкидкиНаценки,ПересчитыватьСкидку,ЕстьРеквизитПроцентАвтоматическихСкидок,"Услуги");
		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		СтрокаТабличнойЧасти.ЗаказПоставщику = ДокументОснованиеЗаказПоставщику;
		
	КонецЦикла;

КонецПроцедуры // СкопироватьУслуги()

// Заполняет регл. реквизиты после упр. заполнения
Процедура ЗаполнитьДопРеквизитыТоваровПриЗаполненииПоОстаткамРегл(СтрокаТабличнойЧасти,Выборка)

		ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТабличнойЧасти, "Товары", ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);

КонецПроцедуры // ЗаполнитьДопРеквизитыТоваровПриЗаполненииПоОстаткамРегл()	

// Процедура выполняет заполниение табличной части неполученными ТМЦ по заказу поставщику.
//
Процедура ЗаполнитьТоварыПоОстаткамУпр(СтатусПартииСтр = "Купленный") Экспорт
    Курс = ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);
	Кратность = ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);

	Запрос = Новый Запрос();

	Запрос.УстановитьПараметр("СтатусПартии", Перечисления.СтатусыПартийТоваров[СтатусПартииСтр]);
	Запрос.УстановитьПараметр("Договор",      ДоговорКонтрагента);
	Запрос.УстановитьПараметр("Товар",        Перечисления.ТоварТара.Товар);
	Запрос.УстановитьПараметр("Сделка",       Сделка);
	Запрос.УстановитьПараметр("ТипЦен",       ТипЦен);
	Запрос.УстановитьПараметр("ПустойТипЦен", Справочники.ТипыЦенНоменклатурыКонтрагентов.ПустаяСсылка());
	Запрос.УстановитьПараметр("ДатаОстатков", ОбщегоНазначения.ПолучитьДатуОстатков(ЭтотОбъект));
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.Номенклатура КАК Номенклатура,
	|	ВложенныйЗапрос.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаХранения,
	|	ВложенныйЗапрос.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК КоэффициентЕдиницыХранения,
	|	ВложенныйЗапрос.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ВложенныйЗапрос.Цена КАК Цена,
	|	СУММА(ВложенныйЗапрос.КоличествоОстатокПоЗаказу) КАК КоличествоОстатокПоЗаказу,
	|	СУММА(ВложенныйЗапрос.КоличествоПоРазмещению) КАК КоличествоПоРазмещению,
	|	ВложенныйЗапрос.Размещение КАК Размещение,
	|	ВложенныйЗапрос.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВложенныйЗапрос.Коэффициент КАК Коэффициент,
	|	ВЫБОР
	|		КОГДА ТЧЗаказа.Номенклатура ЕСТЬ NULL 
	|			ТОГДА 99999999
	|		ИНАЧЕ МИНИМУМ(ТЧЗаказа.НомерСтрокиЗаказа)
	|	КОНЕЦ КАК НомерСтрокиЗаказа,
	|	ВложенныйЗапрос.СтавкаНДС,
	|	ТЧЗаказа.Номенклатура.ЕдиницаИзмеренияМест КАК ЕдиницаИзмеренияМест
	|ИЗ
	|	(ВЫБРАТЬ
	|		Остатки.Номенклатура КАК Номенклатура,
	|		Остатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|		Остатки.Цена КАК Цена,
	|		Остатки.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|		Остатки.ЕдиницаИзмерения.Коэффициент КАК Коэффициент,
	|		Остатки.КоличествоОстаток КАК КоличествоОстатокПоЗаказу,
	|		0 КАК КоличествоПоРазмещению,
	|		НЕОПРЕДЕЛЕНО КАК Размещение,
	|		Остатки.СтавкаНДС КАК СтавкаНДС
	|	ИЗ
	|		РегистрНакопления.ЗаказыПоставщикам.Остатки(
	|				&ДатаОстатков,
	|				ДоговорКонтрагента = &Договор
	|					И ЗаказПоставщику = &Сделка
	|					И СтатусПартии = &СтатусПартии) КАК Остатки
	|	ГДЕ
	|		НЕ Остатки.Номенклатура.Услуга
	|		И Остатки.КоличествоОстаток <> 0
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Размещение.Номенклатура,
	|		Размещение.ХарактеристикаНоменклатуры,
	|		0,
	|		ВЫБОР
	|			КОГДА &ТипЦен = &ПустойТипЦен
	|				ТОГДА Размещение.Номенклатура.ЕдиницаХраненияОстатков
	|			ИНАЧЕ ВЫБОР
	|					КОГДА ЦеныНоменклатурыКонтрагентовСрезПоследних.ЕдиницаИзмерения ЕСТЬ NULL 
	|						ТОГДА Размещение.Номенклатура.ЕдиницаХраненияОстатков
	|					ИНАЧЕ ЦеныНоменклатурыКонтрагентовСрезПоследних.ЕдиницаИзмерения
	|				КОНЕЦ
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА &ТипЦен = &ПустойТипЦен
	|				ТОГДА Размещение.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент
	|			ИНАЧЕ ВЫБОР
	|					КОГДА ЦеныНоменклатурыКонтрагентовСрезПоследних.ЕдиницаИзмерения ЕСТЬ NULL 
	|						ТОГДА Размещение.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент
	|					ИНАЧЕ ЦеныНоменклатурыКонтрагентовСрезПоследних.ЕдиницаИзмерения.Коэффициент
	|				КОНЕЦ
	|		КОНЕЦ,
	|		0,
	|		Размещение.КоличествоОстаток,
	|		Размещение.ЗаказПокупателя,
	|		NULL
	|	ИЗ
	|		РегистрНакопления.РазмещениеЗаказовПокупателей.Остатки(
	|				&ДатаОстатков,
	|				ЗаказПоставщику = &Сделка
	|					И ТоварТара = &Товар) КАК Размещение
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатурыКонтрагентов.СрезПоследних(, ТипЦен = &ТипЦен) КАК ЦеныНоменклатурыКонтрагентовСрезПоследних
	|			ПО Размещение.Номенклатура = ЦеныНоменклатурыКонтрагентовСрезПоследних.Номенклатура
	|				И Размещение.ХарактеристикаНоменклатуры = ЦеныНоменклатурыКонтрагентовСрезПоследних.ХарактеристикаНоменклатуры
	|	ГДЕ
	|		НЕ Размещение.Номенклатура.Услуга
	|		И Размещение.КоличествоОстаток > 0) КАК ВложенныйЗапрос
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ЗаказПоставщикуТовары.Номенклатура КАК Номенклатура,
	|			ЗаказПоставщикуТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|			МИНИМУМ(ЗаказПоставщикуТовары.НомерСтроки) КАК НомерСтрокиЗаказа
	|		ИЗ
	|			Документ.ЗаказПоставщику.Товары КАК ЗаказПоставщикуТовары
	|		ГДЕ
	|			ЗаказПоставщикуТовары.Ссылка = &Сделка
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ЗаказПоставщикуТовары.Номенклатура,
	|			ЗаказПоставщикуТовары.ХарактеристикаНоменклатуры) КАК ТЧЗаказа
	|		ПО ВложенныйЗапрос.Номенклатура = ТЧЗаказа.Номенклатура
	|			И ВложенныйЗапрос.ХарактеристикаНоменклатуры = ТЧЗаказа.ХарактеристикаНоменклатуры
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Номенклатура,
	|	ВложенныйЗапрос.ХарактеристикаНоменклатуры,
	|	ВложенныйЗапрос.Размещение,
	|	ВложенныйЗапрос.Цена,
	|	ВложенныйЗапрос.ЕдиницаИзмерения,
	|	ВложенныйЗапрос.Коэффициент,
	|	ВложенныйЗапрос.Номенклатура.ЕдиницаХраненияОстатков,
	|	ВложенныйЗапрос.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент,
	|	ТЧЗаказа.Номенклатура,
	|	ВложенныйЗапрос.СтавкаНДС,
	|	ТЧЗаказа.Номенклатура.ЕдиницаИзмеренияМест";

	Запрос.УстановитьПараметр("Период", МоментВремени());
	РезультатЗапроса = Запрос.Выполнить();

	// Таблица остатков по размещению покупателям
	ТаблицаПоРазмещению = РезультатЗапроса.Выгрузить();
	Сч = 0;
	Пока Сч < ТаблицаПоРазмещению.Количество() Цикл
		СтрокаТаблицы = ТаблицаПоРазмещению.Получить(Сч);
		Если СтрокаТаблицы.КоличествоПоРазмещению <= 0 Тогда
			ТаблицаПоРазмещению.Удалить(СтрокаТаблицы);
		Иначе
			Сч = Сч + 1;
		КонецЕсли;
	КонецЦикла;

	// Таблица остатков по заказу поставщику
	ТаблицаПоЗаказу = РезультатЗапроса.Выгрузить();
	ТаблицаПоЗаказу.Сортировать("НомерСтрокиЗаказа возр");
	Сч = 0;
	Пока Сч < ТаблицаПоЗаказу.Количество() Цикл
		СтрокаТаблицы = ТаблицаПоЗаказу.Получить(Сч);
		Если СтрокаТаблицы.КоличествоОстатокПоЗаказу = 0 Тогда
			ТаблицаПоЗаказу.Удалить(СтрокаТаблицы);
		Иначе
			Сч = Сч + 1;
		КонецЕсли;
	КонецЦикла;

	// Нам надо знать сколько на самом деле осталось номенклатуры
	ТаблицаБезЦен = ТаблицаПоЗаказу.Скопировать();
	ТаблицаБезЦен.Свернуть("Номенклатура, ХарактеристикаНоменклатуры", "КоличествоОстатокПоЗаказу");

	ТекПользователь = глЗначениеПеременной("глТекущийПользователь");
	ЕстьРеквизитПроцентСкидкиНаценки = Ложь;
	ПересчитыватьСкидку = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ПриИзмененииСуммыПересчитыватьСкидку");
	ЕстьРеквизитПроцентАвтоматическихСкидок = Ложь;	
	
	Для каждого СтрокаБезЦен ИЗ ТаблицаБезЦен Цикл
		ВсегоПоЗаказу = СтрокаБезЦен.КоличествоОстатокПоЗаказу;
		ВсегоСписано  = 0;

		Если ВсегоСписано >= ВсегоПоЗаказу Тогда
			Продолжить;
		КонецЕсли;

		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Номенклатура",               СтрокаБезЦен.Номенклатура);
		СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", СтрокаБезЦен.ХарактеристикаНоменклатуры);

		СтрокиПоРазмещению = ТаблицаПоРазмещению.НайтиСтроки(СтруктураПоиска);
		СтрокиПоЗаказу     = ТаблицаПоЗаказу.НайтиСтроки(СтруктураПоиска);

		Для Каждого СтрокаЗаказа Из СтрокиПоЗаказу Цикл
			КолвоПоЗаказу       = СтрокаЗаказа.КоличествоОстатокПоЗаказу;
			СписатьПоРазмещению = 0;
			СписатьПоЗаказу     = 0;
			СписаноПоСтроке     = 0;

			Если КолвоПоЗаказу <= 0 Тогда
				Продолжить;
			КонецЕсли;

			// Cписываем по размещению
			Для Каждого СтрокаРазмещения Из СтрокиПоРазмещению Цикл
				КолвоПоРазмещению = СтрокаРазмещения.КоличествоПоРазмещению;

				Если КолвоПоРазмещению <= 0 Тогда
					Продолжить;
				КонецЕсли;

				СписатьПоРазмещению = Мин(КолвоПоРазмещению, Мин(КолвоПоЗаказу - СписаноПоСтроке, ВсегоПоЗаказу - ВсегоСписано));
				
				Если СписатьПоРазмещению<=0  Тогда 
					Продолжить; 
				КонецЕсли;

				
				СписаноПоСтроке     = СписаноПоСтроке + СписатьПоРазмещению;
				ВсегоСписано        = ВсегоСписано    + СписатьПоРазмещению;
				
				СтрокаТабличнойЧасти = Товары.Добавить();
				СтрокаТабличнойЧасти.Номенклатура               = СтрокаЗаказа.Номенклатура;
				СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = СтрокаЗаказа.ХарактеристикаНоменклатуры;
				СтрокаТабличнойЧасти.ЕдиницаИзмерения           = СтрокаЗаказа.ЕдиницаИзмерения;
				СтрокаТабличнойЧасти.Коэффициент                = СтрокаЗаказа.Коэффициент;
				СтрокаТабличнойЧасти.СтавкаНДС                  = СтрокаЗаказа.СтавкаНДС;
				СтрокаТабличнойЧасти.Заказ			            = СтрокаРазмещения.Размещение;
				СтрокаТабличнойЧасти.Количество                 = СписатьПоРазмещению * СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент
																  /СтрокаЗаказа.Коэффициент;
																  
				Если ЗначениеЗаполнено(СтрокаЗаказа.ЕдиницаИзмеренияМест) Тогда
					СтрокаТабличнойЧасти.ЕдиницаИзмеренияМест = СтрокаЗаказа.ЕдиницаИзмеренияМест;
					ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
				Иначе
					ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
				КонецЕсли;													  

				СтрокаТабличнойЧасти.Цена = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(
											МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаЗаказа.Цена,
											Сделка.ВалютаДокумента, ВалютаДокумента,
											ЗаполнениеДокументов.КурсДокумента(Сделка, мВалютаРегламентированногоУчета), Курс,
											ЗаполнениеДокументов.КратностьДокумента(Сделка, мВалютаРегламентированногоУчета), Кратность),
											Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов,
											Сделка.СуммаВключаетНДС,
											УчитыватьНДС,
											СуммаВключаетНДС,
											УчетНДС.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));

				СтрокаТабличнойЧасти.Сумма  = СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество;

				ОбработкаТабличныхЧастей.ПриИзмененииСуммыТабЧасти(СтрокаТабличнойЧасти,    ЭтотОбъект, ТекПользователь,,ЕстьРеквизитПроцентСкидкиНаценки,ПересчитыватьСкидку,ЕстьРеквизитПроцентАвтоматическихСкидок,"Товары");
				ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти,   ЭтотОбъект);
				ОбработкаТабличныхЧастей.ЗаполнитьСкладИОрдерТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

				СтрокаРазмещения.КоличествоПоРазмещению = СтрокаРазмещения.КоличествоПоРазмещению - СписатьПоРазмещению;
					
				СтрокаТабличнойЧасти.ЗаказПоставщику    = Сделка;
					
				ЗаполнитьДопРеквизитыТоваровПриЗаполненииПоОстаткамРегл(СтрокаТабличнойЧасти,СтрокаЗаказа);
			КонецЦикла;

			// Cписываем без размещения
			СписатьПоЗаказу = Мин(КолвоПоЗаказу - СписаноПоСтроке, ВсегоПоЗаказу - ВсегоСписано);
			СписаноПоСтроке = СписаноПоСтроке + СписатьПоЗаказу;
			ВсегоСписано    = ВсегоСписано    + СписатьПоЗаказу;

			Если СписатьПоЗаказу > 0 Тогда
				СтрокаТабличнойЧасти = Товары.Добавить();
				СтрокаТабличнойЧасти.Номенклатура               = СтрокаЗаказа.Номенклатура;
				СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = СтрокаЗаказа.ХарактеристикаНоменклатуры;
				СтрокаТабличнойЧасти.ЕдиницаИзмерения           = СтрокаЗаказа.ЕдиницаИзмерения;
				СтрокаТабличнойЧасти.Коэффициент                = СтрокаЗаказа.Коэффициент;
				СтрокаТабличнойЧасти.СтавкаНДС                  = СтрокаЗаказа.СтавкаНДС;
				СтрокаТабличнойЧасти.Заказ			            = Неопределено;
				СтрокаТабличнойЧасти.Количество                 = СписатьПоЗаказу * СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент
																  /СтрокаЗаказа.Коэффициент;
																  
				Если ЗначениеЗаполнено(СтрокаЗаказа.ЕдиницаИзмеренияМест) Тогда
					СтрокаТабличнойЧасти.ЕдиницаИзмеренияМест = СтрокаЗаказа.ЕдиницаИзмеренияМест;
					ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
				Иначе
					ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
				КонецЕсли;

				СтрокаТабличнойЧасти.Цена = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(
				                            МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаЗаказа.Цена,
				                            Сделка.ВалютаДокумента, ВалютаДокумента,
				                            ЗаполнениеДокументов.КурсДокумента(Сделка, мВалютаРегламентированногоУчета), Курс,
				                            ЗаполнениеДокументов.КратностьДокумента(Сделка, мВалютаРегламентированногоУчета), Кратность),
				                            Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов,
				                            Сделка.СуммаВключаетНДС,
				                            УчитыватьНДС,
				                            СуммаВключаетНДС,
				                            УчетНДС.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));

				СтрокаТабличнойЧасти.Сумма  = СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество;

				ОбработкаТабличныхЧастей.ПриИзмененииСуммыТабЧасти(СтрокаТабличнойЧасти,    ЭтотОбъект, ТекПользователь,,ЕстьРеквизитПроцентСкидкиНаценки,ПересчитыватьСкидку,ЕстьРеквизитПроцентАвтоматическихСкидок,"Товары");
				ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти,   ЭтотОбъект);
				ОбработкаТабличныхЧастей.ЗаполнитьСкладИОрдерТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
				
				СтрокаТабличнойЧасти.ОтражениеВУСН      = Перечисления.ОтражениеВУСН.Принимаются;
				СтрокаТабличнойЧасти.ЗаказПоставщику    = Сделка;
				
			КонецЕсли;

			СтрокаЗаказа.КоличествоОстатокПоЗаказу = СтрокаЗаказа.КоличествоОстатокПоЗаказу - СписаноПоСтроке;

			ЗаполнитьДопРеквизитыТоваровПриЗаполненииПоОстаткамРегл(СтрокаТабличнойЧасти,СтрокаЗаказа);
		КонецЦикла;

	КонецЦикла;

КонецПроцедуры // ЗаполнитьТоварыПоОстаткамУпр()

// Заполняет регл. реквизиты после упр. заполнения
// Процедура выполняет заполниение возвратной тары неполученными ТМЦ по заказу поставщику.
//
Процедура ЗаполнитьВозвратнуюТаруПоОстаткамУпр() Экспорт
    Курс = ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);
	Кратность = ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);

	Запрос = Новый Запрос;
	ИмяТЧ  = "ЗаказПоставщику.ВозвратнаяТара";

	Запрос.УстановитьПараметр("СтатусПартии", Перечисления.СтатусыПартийТоваров.ВозвратнаяТара);
	Запрос.УстановитьПараметр("Договор",      ДоговорКонтрагента);
	Запрос.УстановитьПараметр("Сделка",       Сделка);
	Запрос.УстановитьПараметр("Тара",         Перечисления.ТоварТара.Тара);
	Запрос.УстановитьПараметр("ДатаОстатков", ОбщегоНазначения.ПолучитьДатуОстатков(ЭтотОбъект));

	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.Номенклатура КАК Номенклатура,
	|	ВложенныйЗапрос.Цена КАК Цена,
	|	СУММА(ВложенныйЗапрос.КоличествоОстатокПоЗаказу) КАК КоличествоОстатокПоЗаказу,
	|	СУММА(ВложенныйЗапрос.КоличествоПоРазмещению) КАК КоличествоПоРазмещению,
	|	ВложенныйЗапрос.Размещение КАК Размещение,
	|	ВЫБОР
	|		КОГДА ТЧЗаказа.Номенклатура ЕСТЬ NULL 
	|			ТОГДА 99999999
	|		ИНАЧЕ МИНИМУМ(ТЧЗаказа.НомерСтрокиЗаказа)
	|	КОНЕЦ КАК НомерСтрокиЗаказа
	|ИЗ
	|	(ВЫБРАТЬ
	|		Остатки.Номенклатура КАК Номенклатура,
	|		Остатки.Цена КАК Цена,
	|		Остатки.КоличествоОстаток КАК КоличествоОстатокПоЗаказу,
	|		0 КАК КоличествоПоРазмещению,
	|		НЕОПРЕДЕЛЕНО КАК Размещение
	|	ИЗ
	|		РегистрНакопления.ЗаказыПоставщикам.Остатки(&ДатаОстатков
	|			,
	|			ДоговорКонтрагента = &Договор
	|			    И ЗаказПоставщику = &Сделка
	|			    И СтатусПартии = &СтатусПартии) КАК Остатки
	|	ГДЕ
	|		(НЕ Остатки.Номенклатура.Услуга)
	|		И Остатки.КоличествоОстаток <> 0
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Размещение.Номенклатура,
	|		0,
	|		0,
	|		Размещение.КоличествоОстаток,
	|		Размещение.ЗаказПокупателя
	|	ИЗ
	|		РегистрНакопления.РазмещениеЗаказовПокупателей.Остатки(&ДатаОстатков
	|			,
	|			ЗаказПоставщику = &Сделка
	|				И ТоварТара = &Тара) КАК Размещение
	|	ГДЕ
	|		(НЕ Размещение.Номенклатура.Услуга)
	|		И Размещение.КоличествоОстаток > 0) КАК ВложенныйЗапрос
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ЗаказПоставщикуТовары.Номенклатура КАК Номенклатура,
	|			МИНИМУМ(ЗаказПоставщикуТовары.НомерСтроки) КАК НомерСтрокиЗаказа
	|		ИЗ
	|			Документ.ЗаказПоставщику.Товары КАК ЗаказПоставщикуТовары
	|		ГДЕ
	|			ЗаказПоставщикуТовары.Ссылка = &Сделка
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ЗаказПоставщикуТовары.Номенклатура) КАК ТЧЗаказа
	|		ПО ВложенныйЗапрос.Номенклатура = ТЧЗаказа.Номенклатура
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Номенклатура,
	|	ВложенныйЗапрос.Размещение,
	|	ВложенныйЗапрос.Цена,
	|	ТЧЗаказа.Номенклатура";

	РезультатЗапроса = Запрос.Выполнить();

	// Таблица остатков по размещению покупателям
	ТаблицаПоРазмещению = РезультатЗапроса.Выгрузить();
	Сч = 0;
	Пока Сч < ТаблицаПоРазмещению.Количество() Цикл
		СтрокаТаблицы = ТаблицаПоРазмещению.Получить(Сч);
		Если СтрокаТаблицы.КоличествоПоРазмещению <= 0 Тогда
			ТаблицаПоРазмещению.Удалить(СтрокаТаблицы);
		Иначе
			Сч = Сч + 1;
		КонецЕсли;
	КонецЦикла;

	// Таблица остатков по заказу поставщику
	ТаблицаПоЗаказу = РезультатЗапроса.Выгрузить();
	ТаблицаПоЗаказу.Сортировать("НомерСтрокиЗаказа возр");
	Сч = 0;
	Пока Сч < ТаблицаПоЗаказу.Количество() Цикл
		СтрокаТаблицы = ТаблицаПоЗаказу.Получить(Сч);
		Если СтрокаТаблицы.КоличествоОстатокПоЗаказу = 0 Тогда
			ТаблицаПоЗаказу.Удалить(СтрокаТаблицы);
		Иначе
			Сч = Сч + 1;
		КонецЕсли;
	КонецЦикла;

	// Нам надо знать сколько на самом деле осталось номенклатуры
	ТаблицаБезЦен = ТаблицаПоЗаказу.Скопировать();
	ТаблицаБезЦен.Свернуть("Номенклатура", "КоличествоОстатокПоЗаказу");

	Для каждого СтрокаБезЦен ИЗ ТаблицаБезЦен Цикл
		ВсегоПоЗаказу = СтрокаБезЦен.КоличествоОстатокПоЗаказу;
		ВсегоСписано  = 0;

		Если ВсегоСписано >= ВсегоПоЗаказу Тогда
			Продолжить;
		КонецЕсли;

		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Номенклатура", СтрокаБезЦен.Номенклатура);

		СтрокиПоРазмещению = ТаблицаПоРазмещению.НайтиСтроки(СтруктураПоиска);
		СтрокиПоЗаказу     = ТаблицаПоЗаказу.НайтиСтроки(СтруктураПоиска);

		Для Каждого СтрокаЗаказа Из СтрокиПоЗаказу Цикл
			КолвоПоЗаказу       = СтрокаЗаказа.КоличествоОстатокПоЗаказу;
			СписатьПоРазмещению = 0;
			СписатьПоЗаказу     = 0;
			СписаноПоСтроке     = 0;

			Если КолвоПоЗаказу <= 0 Тогда
				Продолжить;
			КонецЕсли;

			// Cписываем по размещению
			Для Каждого СтрокаРазмещения Из СтрокиПоРазмещению Цикл
				КолвоПоРазмещению = СтрокаРазмещения.КоличествоПоРазмещению;

				Если КолвоПоРазмещению <= 0 Тогда
					Продолжить;
				КонецЕсли;

				СписатьПоРазмещению = Мин(КолвоПоРазмещению, Мин(КолвоПоЗаказу - СписаноПоСтроке, ВсегоПоЗаказу - ВсегоСписано));
				СписаноПоСтроке     = СписаноПоСтроке + СписатьПоРазмещению;
				ВсегоСписано        = ВсегоСписано + СписатьПоРазмещению;

				Если КолвоПоРазмещению > 0 Тогда
					СтрокаТабличнойЧасти = ВозвратнаяТара.Добавить();
					СтрокаТабличнойЧасти.Номенклатура    = СтрокаЗаказа.Номенклатура;
					СтрокаТабличнойЧасти.Заказ			 = СтрокаРазмещения.Размещение;
					СтрокаТабличнойЧасти.Количество      = СписатьПоРазмещению;

					СтрокаТабличнойЧасти.Цена = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаЗаказа.Цена,
					                            Сделка.ВалютаДокумента, ВалютаДокумента,
					                            ЗаполнениеДокументов.КурсДокумента(Сделка, мВалютаРегламентированногоУчета), Курс,
					                            ЗаполнениеДокументов.КратностьДокумента(Сделка, мВалютаРегламентированногоУчета), Кратность);

					ОбработкаТабличныхЧастей.РассчитатьСуммуВозвратнойТарыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
					ОбработкаТабличныхЧастей.ЗаполнитьСкладИОрдерТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
					ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТабличнойЧасти, "ВозвратнаяТара", ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);

					СтрокаРазмещения.КоличествоПоРазмещению = СтрокаРазмещения.КоличествоПоРазмещению - СписатьПоРазмещению;
					
					СтрокаТабличнойЧасти.ЗаказПоставщику    = Сделка;
				КонецЕсли;
			КонецЦикла;

			// Cписываем без размещения
			СписатьПоЗаказу = Мин(КолвоПоЗаказу - СписаноПоСтроке, ВсегоПоЗаказу - ВсегоСписано);
			СписаноПоСтроке = СписаноПоСтроке + СписатьПоЗаказу;
			ВсегоСписано    = ВсегоСписано    + СписатьПоЗаказу;

			Если СписатьПоЗаказу > 0 Тогда
				СтрокаТабличнойЧасти = ВозвратнаяТара.Добавить();
				СтрокаТабличнойЧасти.Номенклатура    = СтрокаЗаказа.Номенклатура;
				СтрокаТабличнойЧасти.Заказ			 = Неопределено;
				СтрокаТабличнойЧасти.Количество      = СписатьПоЗаказу;

				СтрокаТабличнойЧасти.Цена = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаЗаказа.Цена,
				                            Сделка.ВалютаДокумента, ВалютаДокумента,
				                            ЗаполнениеДокументов.КурсДокумента(Сделка, мВалютаРегламентированногоУчета), Курс,
				                            ЗаполнениеДокументов.КратностьДокумента(Сделка, мВалютаРегламентированногоУчета), Кратность);

				ОбработкаТабличныхЧастей.РассчитатьСуммуВозвратнойТарыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
				ОбработкаТабличныхЧастей.ЗаполнитьСкладИОрдерТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
				ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТабличнойЧасти, "ВозвратнаяТара", ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);
				
				СтрокаТабличнойЧасти.ЗаказПоставщику = Сделка;
				
			КонецЕсли;

			СтрокаЗаказа.КоличествоОстатокПоЗаказу = СтрокаЗаказа.КоличествоОстатокПоЗаказу - СписаноПоСтроке;
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры // ЗаполнитьВозвратнуюТаруПоОстаткамУпр()

// Процедура выполняет заполниение услуг неполученными услугами по заказу поставщику.
//
Процедура ЗаполнитьУслугиПоОстаткамУпр() Экспорт
    Курс = ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);
	Кратность = ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);

	Запрос = Новый Запрос;

	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("Товар",   Перечисления.ТоварТара.Товар);
	Запрос.УстановитьПараметр("Договор", ДоговорКонтрагента);
	Запрос.УстановитьПараметр("Сделка",  Сделка);
	Запрос.УстановитьПараметр("ВозвратнаяТара", Перечисления.СтатусыПартийТоваров.ВозвратнаяТара);
	
	Запрос.УстановитьПараметр("ДатаОстатков", ОбщегоНазначения.ПолучитьДатуОстатков(ЭтотОбъект));

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Остатки.Номенклатура КАК Номенклатура,
	|	Остатки.СтавкаНДС КАК СтавкаНДС,
	|	Остатки.Цена,
	|	Остатки.КоличествоОстаток КАК КоличествоОстатокПоЗаказу
	|ИЗ
	|	РегистрНакопления.ЗаказыПоставщикам.Остатки(&ДатаОстатков
	|		,
	|		ДоговорКонтрагента = &Договор
	|			И ЗаказПоставщику = &Сделка
	|			И СтатусПартии <> &ВозвратнаяТара) КАК Остатки
	|ГДЕ
	|	Остатки.Номенклатура.Услуга
	|	И Остатки.КоличествоОстаток>0";

	РезультатЗапроса = Запрос.Выполнить();
	
	ЗапросСодержаний = Новый Запрос;
	ЗапросСодержаний.УстановитьПараметр("Сделка",  Сделка);
	ЗапросСодержаний.Текст = 
	"ВЫБРАТЬ
	|	Док.Номенклатура,
	|	Док.Содержание
	|ИЗ
	|	Документ.ЗаказПоставщику.Услуги КАК Док
	|ГДЕ
	|	Док.Ссылка = &Сделка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Док.НомерСтроки";
	
	ТабСодержаний = ЗапросСодержаний.Выполнить().Выгрузить();

	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл

		СтрокаУслуг = Услуги.Добавить();
		СтрокаУслуг.Номенклатура = Выборка.Номенклатура;
		СтрокаУслуг.Количество   = Выборка.КоличествоОстатокПоЗаказу;
		СтрокаУслуг.СтавкаНДС    = Выборка.СтавкаНДС;
		
		СтрокаСодержания = ТабСодержаний.Найти(Выборка.Номенклатура, "Номенклатура");

		Если СтрокаСодержания = Неопределено Тогда
			ОбработкаТабличныхЧастей.ЗаполнитьСодержаниеТабЧасти(СтрокаУслуг, ЭтотОбъект);
		Иначе
			СтрокаУслуг.Содержание = СтрокаСодержания.Содержание;
		КонецЕсли;

		СтрокаУслуг.СтатьяЗатрат         = СтрокаУслуг.Номенклатура.СтатьяЗатрат;
		СтрокаУслуг.НоменклатурнаяГруппа = СтрокаУслуг.Номенклатура.НоменклатурнаяГруппаЗатрат;

		СтрокаУслуг.Цена = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.Цена,
		                   Сделка.ВалютаДокумента, ВалютаДокумента,
		                   ЗаполнениеДокументов.КурсДокумента(Сделка,     мВалютаРегламентированногоУчета),
		                   Курс,
		                   ЗаполнениеДокументов.КратностьДокумента(Сделка, мВалютаРегламентированногоУчета),
		                   Кратность);

		ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаУслуг, ЭтотОбъект);
		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаУслуг, ЭтотОбъект);
        СтрокаУслуг.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Принимаются;
		
		СтрокаУслуг.ЗаказПоставщику = Сделка;
	КонецЦикла;

КонецПроцедуры // ЗаполнитьУслугиПоОстаткамУпр()

// Процедура выполняет заполниение услуг неполученными услугами по заказу поставщику.
//
Процедура ЗаполнитьОборудованиеПоОстаткамУпр() Экспорт
    Курс = ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);
	Кратность = ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);

	Если ЭтоНовый() Тогда
		ДатаОстатков = Дата('00010101');
	Иначе
		ДатаОстатков = Дата;
	КонецЕсли;
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить( "УчитыватьНДС",     Сделка.УчитыватьНДС);
	ДопПараметры.Вставить( "СуммаВключаетНДС", Сделка.СуммаВключаетНДС);
	
	УправлениеЗаказами.ЗаполнитьТабЧастьОборудованиеПоЗаказуПоставщику(Сделка, Оборудование, УправлениеЗаказами.ОстаткиОборудованияПоЗаказуПоставщику  ( Сделка, Сделка.ДоговорКонтрагента, ДатаОстатков), ДопПараметры);
	Для каждого Строка из Оборудование Цикл
		Строка.ЗаказПоставщику = Сделка;
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьУслугиПоОстаткамУпр()

// Заполняет счета БУ и НУ в строке табличной части
//
Процедура ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТЧ, ИмяТабЧасти, ЗаполнятьБУ, ЗаполнятьНУ) Экспорт
	
	Если ИмяТабЧасти = "ОбъектыСтроительства" Тогда
		ЗаполнитьСчетаУчетаВСтрокеТабЧастиОбъектовСтроительства(СтрокаТЧ, ЗаполнятьБУ, ЗаполнятьНУ);
	Иначе
		СчетаУчетаВДокументах.ЗаполнитьСчетаУчетаТабличнойЧасти(ИмяТабЧасти, СтрокаТЧ, ЭтотОбъект, ЗаполнятьБУ, ЗаполнятьНУ);
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьСчетаУчетаВСтрокеТабЧасти()

// Заполняет счета БУ и НУ в табличной части документа
//
Процедура ЗаполнитьСчетаУчетаВТабЧасти(ТабличнаяЧасть, ИмяТабЧасти, ЗаполнятьБУ, ЗаполнятьНУ) Экспорт

	Если ИмяТабЧасти = "ОбъектыСтроительства" Тогда
		ЗаполнитьСчетаУчетаВТабЧастиПоОбъектамСтроительства(ОбъектыСтроительства, ЗаполнятьБУ, ЗаполнятьНУ);
	Иначе
		ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(ТабличнаяЧасть, ИмяТабЧасти, ЗаполнятьБУ, ЗаполнятьНУ);
	КонецЕсли;

КонецПроцедуры // ЗаполнитьСчетаУчетаВТабЧасти()

// Возвращает структуру со значениями по-умолчанию счетов учета шапки.
//
Функция ЗаполнитьСтруктуруСчетовУчетаШапки(ЗаполнятьБУ=Истина, ЗаполнятьНУ=Истина) Экспорт
 
	СтруктураСчетов = Новый Структура();
	
	Если ЗаполнятьБУ и ОтражатьВБухгалтерскомУчете Тогда
	
		СчетаУчета = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(Организация, Контрагент, ДоговорКонтрагента);
		
		Если ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
			СтруктураСчетов.Вставить("СчетУчетаРасчетовСКонтрагентом",	СчетаУчета.СчетРасчетовСКомитентом);
		Иначе
			СтруктураСчетов.Вставить("СчетУчетаРасчетовСКонтрагентом",	СчетаУчета.СчетРасчетов);
		КонецЕсли;
		СтруктураСчетов.Вставить("СчетУчетаРасчетовПоАвансам",		СчетаУчета.СчетАвансов);
		СтруктураСчетов.Вставить("СчетУчетаРасчетовПоТаре",			СчетаУчета.СчетУчетаТары);
		
	КонецЕсли;
		
	Возврат СтруктураСчетов;
	
КонецФункции

// Заполняет счета БУ и НУ в строке табличной части "Объекты строительства"
//
Процедура ЗаполнитьСчетаУчетаВСтрокеТабЧастиОбъектовСтроительства(СтрокаТабЧасти, ЗаполнятьБУ, ЗаполнятьНУ) Экспорт

	СчетаУчета = УправлениеВнеоборотнымиАктивами.ПолучитьСчетаУчетаОбъектовСтроительства(Организация, СтрокаТабЧасти.ОбъектСтроительства);

	Если ЗаполнятьБУ = Истина Тогда
		СтрокаТабЧасти.СчетУчетаБУ  = СчетаУчета.СчетУчетаБУ;
		СтрокаТабЧасти.СчетУчетаНДС = СчетаУчета.СчетУчетаНДС;
	ИначеЕсли ЗаполнятьБУ = Ложь Тогда
		СтрокаТабЧасти.СчетУчетаБУ  = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
		СтрокаТабЧасти.СчетУчетаНДС = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
	КонецЕсли;

	Если ЗаполнятьНУ = Истина Тогда
		СтрокаТабЧасти.СчетУчетаНУ = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", СтрокаТабЧасти.СчетУчетаБУ));
	ИначеЕсли ЗаполнятьНУ = Ложь Тогда
		СтрокаТабЧасти.СчетУчетаНУ = ПланыСчетов.Налоговый.ПустаяСсылка();
	КонецЕсли;

КонецПроцедуры // ЗаполнитьСчетаУчетаВСтрокеТабЧастиОбъектовСтроительства()

// Заполняет счета БУ и НУ в табличной части "Объекты строительства"
//
Процедура ЗаполнитьСчетаУчетаВТабЧастиПоОбъектамСтроительства(ТабличнаяЧасть, ЗаполнятьБУ, ЗаполнятьНУ) Экспорт

	Для каждого СтрокаТабЧасти Из ТабличнаяЧасть Цикл
		ЗаполнитьСчетаУчетаВСтрокеТабЧастиОбъектовСтроительства(СтрокаТабЧасти, ЗаполнятьБУ, ЗаполнятьНУ);
	КонецЦикла;

КонецПроцедуры // обЗаполнитьСчетаУчетаВТабЧастиПоОбъектамСтроительства()

// Процедура выполняет заполнение табличной части по приходному ордеру товаров.
//
// Параметры:
//  ДокументОснование - ссылка на документ основание (приходный ордер товаров).
//
Процедура ЗаполнитьТоварыПоОснованиюУпр(ДокументОснование, ТабличнаяЧасть) Экспорт

	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);

	Если ТабличнаяЧасть = ВозвратнаяТара Тогда
		ИмяТабличнойЧасти = "ВозвратнаяТара";
	Иначе
		ИмяТабличнойЧасти = "Товары";
	КонецЕсли;
	
	ДополнительныеРеглПоляОбщ		= "";
	ДополнительныеРеглПоляТовары 	= "";
	
	Запрос.УстановитьПараметр("Склад",        ДокументОснование.Склад);
	Запрос.УстановитьПараметр("ДатаОстатков", ОбщегоНазначения.ПолучитьДатуОстатков(ЭтотОбъект));
	
	СкладыВТабличнойЧасти = мУказаниеСкладовВТЧ Или ВидПоступления = Перечисления.ВидыПоступленияТоваров.ПоОрдеру;
							 
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МИНИМУМ(ДокТовары.НомерСтроки) КАК НомерСтроки,
	|	ДокТовары.Номенклатура,
	|	ДокТовары.Номенклатура.СтавкаНДС                            КАК СтавкаНДС,
	|	ДокТовары.Номенклатура.ЕдиницаХраненияОстатков             КАК ЕдиницаХранения,
	|	ДокТовары.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК КоэффициентЕдиницыХранения," +
		ДополнительныеРеглПоляОбщ +"
	|	СУММА(ДокТовары.Количество)                        КАК КоличествоПоДокументу,
	|	NULL                                               КАК ЦенаВРознице, " + 
	?(ТабличнаяЧасть = Товары, "
	|	ДокТовары.СерияНоменклатуры," +
		ДополнительныеРеглПоляТовары +"
	|	ДокТовары.ХарактеристикаНоменклатуры, ", "") +
	?(СкладыВТабличнойЧасти, "
	|	Остатки.Склад                                      КАК Склад,", "") + " 
	|	СУММА(ДокТовары.Количество" +
	?(ТабличнаяЧасть = Товары, " * ДокТовары.Коэффициент 
	|	  / ДокТовары.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент", "") + ") КАК КоличествоПоСерии,  
	|	МАКСИМУМ(Остатки.КоличествоОстаток)                КАК КоличествоОстатокКомпании,
	|	МАКСИМУМ("+
	?(ТабличнаяЧасть = Товары, "
    |       ДокТовары.ЕдиницаИзмерения ","
	|       Остатки.Номенклатура.ЕдиницаХраненияОстатков ")+"
	|)                                                   КАК ЕдиницаИзмерения,
	|   МАКСИМУМ("+
	?(ТабличнаяЧасть = Товары, "
    |		ДокТовары.ЕдиницаИзмерения.Коэффициент ","
	|       Остатки.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент ")+"
	|)                                                   КАК Коэффициент
	|ИЗ
	|	Документ.ПриходныйОрдерНаТовары." + ИмяТабличнойЧасти + " КАК ДокТовары
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрНакопления.ТоварыКПолучениюНаСклады.Остатки(&ДатаОстатков, ДокументПолучения = &ДокументОснование" +
	?(СкладыВТабличнойЧасти, "", "
	|                                                       И Склад = &Склад") + ") КАК Остатки
	|ПО
	|	ДокТовары.Номенклатура = Остатки.Номенклатура" + 
	?(ТабличнаяЧасть = Товары, "
	| И ДокТовары.ХарактеристикаНоменклатуры = Остатки.ХарактеристикаНоменклатуры
	| И ДокТовары.СерияНоменклатуры          = Остатки.СерияНоменклатуры	", "") + " 
	|
	|ГДЕ
	|	ДокТовары.Ссылка = &ДокументОснование
	|	И Остатки.КоличествоОстаток > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ДокТовары.Номенклатура" +
	?(ТабличнаяЧасть = Товары, ",
	|   ДокТовары.ЕдиницаИзмерения,
	|	ДокТовары.СерияНоменклатуры,
	|	ДокТовары.ХарактеристикаНоменклатуры", "") + 
	?(СкладыВТабличнойЧасти, ",
	|	Остатки.Склад", "") + "
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";


	РезультатЗапроса = Запрос.Выполнить();

	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл

		Если ТабличнаяЧасть = Товары Тогда

			СтрокаТабличнойЧасти = Товары.Добавить();

			СтрокаТабличнойЧасти.Номенклатура               = Выборка.Номенклатура;
			СтрокаТабличнойЧасти.Количество                 = Мин(Выборка.КоличествоОстатокКомпании, Выборка.КоличествоПоСерии)
			                                                  *Выборка.КоэффициентЕдиницыХранения / Выборка.Коэффициент;
			СтрокаТабличнойЧасти.ЕдиницаИзмерения           = Выборка.ЕдиницаИзмерения;
			СтрокаТабличнойЧасти.Коэффициент                = Выборка.Коэффициент;
			СтрокаТабличнойЧасти.СтавкаНДС                  = Выборка.СтавкаНДС;
			СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Выборка.ХарактеристикаНоменклатуры;
			СтрокаТабличнойЧасти.СерияНоменклатуры          = Выборка.СерияНоменклатуры;

			ОбработкаТабличныхЧастей.ЗаполнитьЦенуПокупкиТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);

			ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			
		Иначе

			СтрокаТабличнойЧасти = ВозвратнаяТара.Добавить();

			СтрокаТабличнойЧасти.Номенклатура = Выборка.Номенклатура;
			СтрокаТабличнойЧасти.Количество   = Мин(Выборка.КоличествоОстатокКомпании, Выборка.КоличествоПоСерии);

			ОбработкаТабличныхЧастей.ЗаполнитьЦенуВозвратнойТарыТабЧастиПоступление(СтрокаТабличнойЧасти, ЭтотОбъект, мВалютаРегламентированногоУчета);
			ОбработкаТабличныхЧастей.РассчитатьСуммуВозвратнойТарыТабЧасти(СтрокаТабличнойЧасти , ЭтотОбъект);
		КонецЕсли;

		СтрокаТабличнойЧасти.ПриходныйОрдер = ДокументОснование;
		Если СкладыВТабличнойЧасти Тогда
			СтрокаТабличнойЧасти.Склад          = Выборка.Склад;
		Иначе
			СтрокаТабличнойЧасти.Склад          = ДокументОснование.Склад;
		КонецЕсли;
		ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТабличнойЧасти, ИмяТабличнойЧасти, ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);

	КонецЦикла; // Выборка.Следующий()

КонецПроцедуры // ЗаполнитьТоварыПоОснованию()

Процедура СкопироватьРеквизитыРегл(ЭтоТовары, НоваяСтрока, СтрокаТЧ)

	НоваяСтрока.СчетУчетаБУ      = СтрокаТЧ.СчетУчетаБУ;
	НоваяСтрока.СчетУчетаНУ      = СтрокаТЧ.СчетУчетаНУ;
	Если ЭтоТовары Тогда
		НоваяСтрока.СчетУчетаНДС        = СтрокаТЧ.СчетУчетаНДС;
	КонецЕсли;

КонецПроцедуры

// Заполняет табличную часть при оперативном проведении
//
Процедура ЗаполнитьТабличныеЧастиПередПроведениемУпр() Экспорт
    Перем ИспользоватьЗаказыНаПроизводство;
	
	КопияТовары = Товары.Выгрузить();
	КопияТовары.Свернуть("Номенклатура",);
	
	КопияВозвратнаяТара = ВозвратнаяТара.Выгрузить();
	КопияВозвратнаяТара.Свернуть("Номенклатура",);
	
	// Сформируем массив номенклатуры по товарам и таре для фильтров запросов.
	МассивНоменклатуры 	   = КопияТовары.ВыгрузитьКолонку("Номенклатура");
	МассивНоменклатурыТара = КопияВозвратнаяТара.ВыгрузитьКолонку("Номенклатура");
	
	Для Каждого ЭлементТара Из МассивНоменклатурыТара Цикл
		МассивНоменклатуры.Добавить(ЭлементТара);
	КонецЦикла; 
	
	КопияТовары = Товары.Выгрузить();
	КопияТовары.Свернуть("ЗаказПоставщику",);
	
	КопияВозвратнаяТара = ВозвратнаяТара.Выгрузить();
	КопияВозвратнаяТара.Свернуть("ЗаказПоставщику",);
	
	// Сформируем массив заказов покупателей по товарам и таре для фильтров запросов.
	МассивЗаказов 	  = КопияТовары.ВыгрузитьКолонку("ЗаказПоставщику");
	МассивЗаказовТара = КопияВозвратнаяТара.ВыгрузитьКолонку("ЗаказПоставщику");
	
	Для Каждого ЭлементТара Из МассивЗаказовТара Цикл
		МассивЗаказов.Добавить(ЭлементТара);
	КонецЦикла; 
	
	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("Ссылка",    			Ссылка);
	Запрос.УстановитьПараметр("Сделка", 			Сделка);
    Запрос.УстановитьПараметр("Купленный", 			Перечисления.СтатусыПартийТоваров.Купленный);
	Запрос.УстановитьПараметр("ДатаОстатков", 		ОбщегоНазначения.ПолучитьДатуОстатков(ЭтотОбъект));
	Запрос.УстановитьПараметр("МассивЗаказов", 		МассивЗаказов);
	Запрос.УстановитьПараметр("МассивНоменклатуры", МассивНоменклатуры);
	
	ИспользоватьЗаказыНаПроизводство = УправлениеЗаказами.ИспользоватьЗаказыНаПроизводство();
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РазмещениеЗаказовПокупателей.Номенклатура,
	|	РазмещениеЗаказовПокупателей.ХарактеристикаНоменклатуры,
	|	ВЫБОР КОГДА РазмещениеЗаказовПокупателей.ЗаказПокупателя ССЫЛКА Документ.ЗаказПокупателя ИЛИ
	|		РазмещениеЗаказовПокупателей.ЗаказПокупателя ССЫЛКА Документ.ВнутреннийЗаказ Тогда
	|		ЗаказыПокупателейОстатки.СтатусПартии
	|	ИНАЧЕ &Купленный 
	|	КОНЕЦ КАК СтатусПартии,
	|	РазмещениеЗаказовПокупателей.ЗаказПокупателя,
	|	РазмещениеЗаказовПокупателей.ЗаказПоставщику,
	|	ВЫБОР КОГДА РазмещениеЗаказовПокупателей.ЗаказПокупателя ССЫЛКА Документ.ЗаказПокупателя Тогда
	|		Естьnull(ЗаказыПокупателейОстатки.КоличествоОстаток,0)
	|	КОГДА РазмещениеЗаказовПокупателей.ЗаказПокупателя ССЫЛКА Документ.ВнутреннийЗаказ ТОГДА
	|		Естьnull(ВнутренниеЗаказыОстатки.КоличествоОстаток,0)"
	+ ?(ИспользоватьЗаказыНаПроизводство, "
	|	КОГДА РазмещениеЗаказовПокупателей.ЗаказПокупателя ССЫЛКА Документ.ЗаказНаПроизводство ТОГДА
	|		Естьnull(ПотребностиЗаказовНаПроизводствоОстатки.КоличествоОстаток,0)",
		"")
	+ "
	|	ИНАЧЕ 0 КОНЕЦ КАК Количество,
	|	РазмещениеЗаказовПокупателей.КоличествоОстаток КАК Размещение,
	|   Естьnull(ОстаткиРезерв.КоличествоОстаток,0)  КАК Резерв
	|ИЗ  РегистрНакопления.РазмещениеЗаказовПокупателей.Остатки(&ДатаОстатков,Номенклатура В (&МассивНоменклатуры)
	|			 И ЗаказПоставщику В (&МассивЗаказов)) КАК РазмещениеЗаказовПокупателей
	|ЛЕВОЕ СОЕДИНЕНИЕ 
	|	РегистрНакопления.ТоварыВРезервеНаСкладах.Остатки(&ДатаОстатков,Номенклатура В (&МассивНоменклатуры)) КАК ОстаткиРезерв
	|	ПО ОстаткиРезерв.Номенклатура = РазмещениеЗаказовПокупателей.Номенклатура 
	|	И  ОстаткиРезерв.ХарактеристикаНоменклатуры = РазмещениеЗаказовПокупателей.ХарактеристикаНоменклатуры
	|	И  ОстаткиРезерв.ДокументРезерва = РазмещениеЗаказовПокупателей.ЗаказПокупателя
    |ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрНакопления.ЗаказыПокупателей.Остатки(&ДатаОстатков,Номенклатура В (&МассивНоменклатуры)
	|			 ) КАК ЗаказыПокупателейОстатки
	|	ПО ЗаказыПокупателейОстатки.Номенклатура = РазмещениеЗаказовПокупателей.Номенклатура 
	|	И  ЗаказыПокупателейОстатки.ХарактеристикаНоменклатуры = РазмещениеЗаказовПокупателей.ХарактеристикаНоменклатуры
	|	И  ЗаказыПокупателейОстатки.ЗаказПокупателя = РазмещениеЗаказовПокупателей.ЗаказПокупателя
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрНакопления.ВнутренниеЗаказы.Остатки(&ДатаОстатков,Номенклатура В (&МассивНоменклатуры)
	|			 ) КАК ВнутренниеЗаказыОстатки
	|	ПО ВнутренниеЗаказыОстатки.Номенклатура = РазмещениеЗаказовПокупателей.Номенклатура 
	|	И  ВнутренниеЗаказыОстатки.ХарактеристикаНоменклатуры = РазмещениеЗаказовПокупателей.ХарактеристикаНоменклатуры
	|	И  ВнутренниеЗаказыОстатки.ВнутреннийЗаказ = РазмещениеЗаказовПокупателей.ЗаказПокупателя "
	+ ?(ИспользоватьЗаказыНаПроизводство, "
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрНакопления.ПотребностиЗаказовНаПроизводство.Остатки(&ДатаОстатков,Номенклатура В (&МассивНоменклатуры)
	|			 ) КАК ПотребностиЗаказовНаПроизводствоОстатки
	|	ПО ПотребностиЗаказовНаПроизводствоОстатки.Номенклатура = РазмещениеЗаказовПокупателей.Номенклатура 
	|	И  ПотребностиЗаказовНаПроизводствоОстатки.ХарактеристикаНоменклатуры = РазмещениеЗаказовПокупателей.ХарактеристикаНоменклатуры
	|	И  ПотребностиЗаказовНаПроизводствоОстатки.ЗаказНаПроизводство = РазмещениеЗаказовПокупателей.ЗаказПокупателя",
		"");
	
	Таблица = Запрос.Выполнить().Выгрузить();

	Для Каждого Строка Из Таблица Цикл
		ПотребностьЗаказа = Макс(Строка.Количество - Строка.Резерв,0);
		Строка.Количество = Мин(ПотребностьЗаказа, Строка.Размещение);
	КонецЦикла;
	
	// Заполним массив, хранящий две таблицы значений, в которых задано распределение по
	// заказам покупателей для товаров и возвратной тары
	МассивТаблицСтрок = Новый Массив(2);

	Для Сч = 0 По 1 Цикл

		Если Сч = 0 Тогда
			ТабличнаяЧасть = Товары;
			ЭтоТовары = Истина;
		Иначе
			ТабличнаяЧасть = ВозвратнаяТара;
			ЭтоТовары = Ложь;
		КонецЕсли;

		ТаблицаТЧ = ТабличнаяЧасть.Выгрузить();
		ТаблицаТЧ.Колонки.Добавить("КоличествоЕдиницХранения");

		МассивТаблицСтрок[Сч] = ТабличнаяЧасть.Выгрузить();
		МассивТаблицСтрок[Сч].Очистить();
		МассивТаблицСтрок[Сч].Колонки.Добавить("ИндексИсходнойСтроки");
		МассивТаблицСтрок[Сч].Колонки.Добавить("СкладРозничный");

		Для Каждого СтрокаТЧ Из ТаблицаТЧ Цикл

			Если НЕ ЗначениеЗаполнено(СтрокаТЧ.ЗаказПоставщику) Тогда
				Продолжить;
			КонецЕсли; 

			// Пересчитаем в единицы хранения
			Если ЭтоТовары Тогда
				СтрокаТЧ.КоличествоЕдиницХранения =
					Окр(СтрокаТЧ.Количество * СтрокаТЧ.Коэффициент / СтрокаТЧ.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент, 3);
			Иначе
				СтрокаТЧ.КоличествоЕдиницХранения = СтрокаТЧ.Количество;
			КонецЕсли;
			
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("Номенклатура", 	СтрокаТЧ.Номенклатура);
            СтруктураПоиска.Вставить("ЗаказПоставщику", СтрокаТЧ.ЗаказПоставщику);

			Если ЭтоТовары Тогда
				СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", СтрокаТЧ.ХарактеристикаНоменклатуры);
			Иначе
				СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
			КонецЕсли; 

			НайденныеСтроки = Таблица.НайтиСтроки(СтруктураПоиска);

			// Погашаем количество в таблице
			КоличествоОсталосьПогасить = СтрокаТЧ.КоличествоЕдиницХранения;
			СуммаОсталосьПогасить      = СтрокаТЧ.Сумма;

			// Погашаем количество в таблице, записывая способ списания
			Для Каждого Строка Из НайденныеСтроки Цикл

				Если КоличествоОсталосьПогасить <= 0 Тогда
					Прервать;
				КонецЕсли;

				Если Строка.Количество <= 0 Тогда
					Продолжить;
				КонецЕсли;

				Если Строка.Количество >= КоличествоОсталосьПогасить Тогда
					КоэффСписания = КоличествоОсталосьПогасить / Строка.Количество ;
				Иначе
					КоэффСписания = 1;
				КонецЕсли;

				СписанноеКоличество = Окр(Строка.Количество  * КоэффСписания, 3, РежимОкругления.Окр15как20);
				Если ЭтоТовары Тогда
                	СписанноеКоличество_ВЕдиницахДокумента = Окр(СписанноеКоличество * СтрокаТЧ.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент / СтрокаТЧ.Коэффициент,3);
				Иначе
					СписанноеКоличество_ВЕдиницахДокумента = СписанноеКоличество;
				КонецЕсли;
				
				// Добавляем строку с данными о распределенном количестве
				НоваяСтрока = МассивТаблицСтрок[Сч].Добавить();
				
				НоваяСтрока.ИндексИсходнойСтроки = ТаблицаТЧ.Индекс(СтрокаТЧ);
				НоваяСтрока.Номенклатура     	 = СтрокаТЧ.Номенклатура;
				НоваяСтрока.Количество 			 = СписанноеКоличество_ВЕдиницахДокумента;
				
				Если ЭтоТовары Тогда
					НоваяСтрока.ЕдиницаИзмерения 			= СтрокаТЧ.ЕдиницаИзмерения;
					НоваяСтрока.Коэффициент 				= СтрокаТЧ.Коэффициент;
					НоваяСтрока.ХарактеристикаНоменклатуры 	= СтрокаТЧ.ХарактеристикаНоменклатуры;
					НоваяСтрока.СерияНоменклатуры 			= СтрокаТЧ.СерияНоменклатуры;
					НоваяСтрока.СтавкаНДС           		= СтрокаТЧ.СтавкаНДС;
					НоваяСтрока.КоличествоМест 				=
						?(СтрокаТЧ.Коэффициент <> 0,
							СписанноеКоличество * НоваяСтрока.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент / СтрокаТЧ.Коэффициент,
							0);
				КонецЕсли;
				
				СкопироватьРеквизитыРегл(ЭтоТовары, НоваяСтрока, СтрокаТЧ);
				
				КоэффПогашения 				= СписанноеКоличество / КоличествоОсталосьПогасить;
				
				НоваяСтрока.Цена 			= СтрокаТЧ.Цена;
				НоваяСтрока.Сумма 			= Окр(СуммаОсталосьПогасить * КоэффПогашения, 2, 1);
				НоваяСтрока.Заказ 			= Строка.ЗаказПокупателя;
                НоваяСтрока.ЗаказПоставщику = Строка.ЗаказПоставщику;

				КоличествоОсталосьПогасить 	= КоличествоОсталосьПогасить - СписанноеКоличество;
				СуммаОсталосьПогасить 		= СуммаОсталосьПогасить - НоваяСтрока.Сумма;

				// Уменьшаем количество в исходной строке
				Если ЭтоТовары Тогда
					СтрокаТЧ.Количество = Окр((СтрокаТЧ.КоличествоЕдиницХранения - СписанноеКоличество) * СтрокаТЧ.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент / СтрокаТЧ.Коэффициент,3);
				Иначе
					СтрокаТЧ.Количество = СтрокаТЧ.КоличествоЕдиницХранения - СписанноеКоличество;
				КонецЕсли;
				
				// Уменьшаем количество в строке остатков
				Строка.Количество = Строка.Количество - СписанноеКоличество;

			КонецЦикла;
			
			Если КоличествоОсталосьПогасить > 0 Тогда

				// Добавляем строку с данными о распределенном количестве
				НоваяСтрока = МассивТаблицСтрок[Сч].Добавить();
				
				НоваяСтрока.ИндексИсходнойСтроки = ТаблицаТЧ.Индекс(СтрокаТЧ);
				НоваяСтрока.Номенклатура 		 = СтрокаТЧ.Номенклатура;
				НоваяСтрока.Количество 			 = КоличествоОсталосьПогасить;

				Если ЭтоТовары Тогда
					НоваяСтрока.ХарактеристикаНоменклатуры 	= СтрокаТЧ.ХарактеристикаНоменклатуры;
					НоваяСтрока.СерияНоменклатуры 			= СтрокаТЧ.СерияНоменклатуры;
					НоваяСтрока.СтавкаНДС           		= СтрокаТЧ.СтавкаНДС;
					НоваяСтрока.ЕдиницаИзмерения    		= СтрокаТЧ.ЕдиницаИзмерения;
					НоваяСтрока.Коэффициент         		= СтрокаТЧ.Коэффициент;
					НоваяСтрока.Количество 					= Окр(НоваяСтрока.Количество * СтрокаТЧ.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент / НоваяСтрока.Коэффициент ,3);
				КонецЕсли;
				
				СкопироватьРеквизитыРегл(ЭтоТовары, НоваяСтрока, СтрокаТЧ);
				
				НоваяСтрока.Цена 			= СтрокаТЧ.Цена;
				НоваяСтрока.СкладРозничный  = Ложь;
				НоваяСтрока.Сумма 			= Окр(СуммаОсталосьПогасить, 2, 1);
				НоваяСтрока.ЗаказПОставщику = СтрокаТЧ.ЗаказПоставщику;

			КонецЕсли; 

		КонецЦикла; // по строкам
		
	КонецЦикла; // по табличным частям

	// Изменяем табличную часть
	Для Сч = 0 По 1 Цикл
		
		Если Сч = 0 Тогда
			ТабличнаяЧасть = Товары;
			ЭтоТовары = Истина;
		Иначе
			ТабличнаяЧасть = ВозвратнаяТара;
			ЭтоТовары = Ложь;
		КонецЕсли;

		ТекПользователь 	= глЗначениеПеременной("глТекущийПользователь");
		ПересчитыватьСкидку = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ПриИзмененииСуммыПересчитыватьСкидку");
		
		ЕстьРеквизитПроцентСкидкиНаценки 		= Ложь;
		ЕстьРеквизитПроцентАвтоматическихСкидок = Ложь;	
		
		// Серийные номера используются только для товаров.
		СтруктДанныеСерНомера 	= ?(Сч = 0, УчетСерийныхНомеров.СформироватьИсходнуюТаблицуСерийныйНомеров(Товары, СерийныеНомера), Неопределено);
		ТекИндексИсходнойСтроки = Неопределено;
		
		Для Каждого Строка Из МассивТаблицСтрок[Сч] Цикл

			// Если строка с таким индексом уже обрабатывалась, то добавляем новую
			Если ТекИндексИсходнойСтроки = Строка.ИндексИсходнойСтроки Тогда
				
				Стр 				= ТабличнаяЧасть[Строка.ИндексИсходнойСтроки];
				РедактируемаяСтрока = ТабличнаяЧасть.Добавить();
				
				РедактируемаяСтрока.Номенклатура = Стр.Номенклатура;
				
				Если ЭтоТовары Тогда
					
					РедактируемаяСтрока.ХарактеристикаНоменклатуры = Стр.ХарактеристикаНоменклатуры;
					РедактируемаяСтрока.СерияНоменклатуры		   = Стр.СерияНоменклатуры;
					РедактируемаяСтрока.СтавкаНДС 				   = Стр.СтавкаНДС;
					
					УчетСерийныхНомеров.КорректироватьТабЧастьСерийныеНомера(СтруктДанныеСерНомера, Строка.ИндексИсходнойСтроки, Стр.Количество, РедактируемаяСтрока, Строка.Количество);
					
				КонецЕсли;
				
			Иначе
				
				РедактируемаяСтрока = ТабличнаяЧасть[Строка.ИндексИсходнойСтроки];
				
			КонецЕсли; 
			
			РедактируемаяСтрока.Заказ 			= Строка.Заказ;
			РедактируемаяСтрока.ЗаказПоставщику = Строка.ЗаказПоставщику;
			
			Если РедактируемаяСтрока.Количество = Строка.Количество Тогда
				Продолжить;
			КонецЕсли;

			РедактируемаяСтрока.Количество = Строка.Количество;

			Если ЭтоТовары Тогда
				
				РедактируемаяСтрока.СтавкаНДС = Строка.СтавкаНДС;
				
				Если Строка.СкладРозничный = Истина Тогда
					РедактируемаяСтрока.Цена = Строка.Цена;
					ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(РедактируемаяСтрока, ЭтотОбъект);
				Иначе
					РедактируемаяСтрока.Сумма = Строка.Сумма;
					ОбработкаТабличныхЧастей.ПриИзмененииСуммыТабЧасти(РедактируемаяСтрока, ЭтотОбъект, ТекПользователь,,ЕстьРеквизитПроцентСкидкиНаценки,ПересчитыватьСкидку,ЕстьРеквизитПроцентАвтоматическихСкидок,"Товары");
				КонецЕсли; 
				
				РедактируемаяСтрока.ЕдиницаИзмерения = Строка.ЕдиницаИзмерения;
				РедактируемаяСтрока.Коэффициент      = Строка.Коэффициент;
				
				ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(РедактируемаяСтрока, ЭтотОбъект);
				
			Иначе
				
				РедактируемаяСтрока.Сумма = Строка.Сумма;
				РедактируемаяСтрока.Цена  =
					?(РедактируемаяСтрока.Количество <> 0, РедактируемаяСтрока.Сумма/РедактируемаяСтрока.Количество, 0);
				
			КонецЕсли;

			ОбработкаТабличныхЧастей.ЗаполнитьСкладИОрдерТабЧасти(РедактируемаяСтрока, ЭтотОбъект);

			СкопироватьРеквизитыРегл(ЭтоТовары, РедактируемаяСтрока, Строка);

			ТекИндексИсходнойСтроки = Строка.ИндексИсходнойСтроки;

		КонецЦикла; // по строкам 
		
	КонецЦикла; // по табличным частям
	
    Товары.Свернуть("Номенклатура,ХарактеристикаНоменклатуры,СерияНоменклатуры,ЕдиницаИзмерения,ЕдиницаИзмеренияМест,Коэффициент,Цена,СтавкаНДС,Заказ,Склад,ПриходныйОрдер,ЗаказПоставщику,КлючСвязи,ОтражениеВУСН,СчетУчетаБУ,СчетУчетаНДС, СчетУчетаНУ","Количество,КоличествоМест,Сумма,СуммаНДС");
	ВозвратнаяТара.Свернуть("Номенклатура,Цена,Заказ,Склад,ПриходныйОрдер,ЗаказПоставщику, СчетУчетаБУ,СчетУчетаНУ","Количество,Сумма");

	УправлениеВзаиморасчетами.ДополнитьСтруктуруПараметровДляЗаполненияТаблицыДокументовРасчетов(ЭтотОбъект, мСтруктураПараметровВзаиморасчетов);
	УправлениеВзаиморасчетами.ЗаполнитьТаблицуДокументовРасчетовСКонтрагентом(ЭтотОбъект, мСтруктураПараметровВзаиморасчетов);
	
КонецПроцедуры // ЗаполнитьТабличныеЧастиПередПроведениемУпр()

// Процедура выполняет заполнение ТЧ "Товары" по документу-основанию Реализация.
// При заполнении копируется состав документа.
//
// Параметры:
//  ДокументОснование - ссылка на документ основание.
//
Процедура ЗаполнитьТоварыПоОснованиюРеализация(ДокументОснование) Экспорт
    Курс = ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);
	Кратность = ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Док.Ссылка.ВалютаДокумента,
	|	ВЫБОР
	|		КОГДА Док.Ссылка.ВалютаДокумента = Док.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов
	|			ТОГДА Док.Ссылка.КурсВзаиморасчетов
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК КурсДокумента,
	|	ВЫБОР
	|		КОГДА Док.Ссылка.ВалютаДокумента = Док.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов
	|			ТОГДА Док.Ссылка.КратностьВзаиморасчетов
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК КратностьДокумента,
	|	Док.Ссылка.УчитыватьНДС,
	|	Док.Ссылка.СуммаВключаетНДС,
	|	Док.Номенклатура,
	|	Док.ЕдиницаИзмерения,
	|	Док.ЕдиницаИзмеренияМест,
	|	Док.Коэффициент,
	|	Док.СтавкаНДС,
	|	Док.Количество,
	|	Док.КоличествоМест,
	|	Док.Сумма,
	|	Док.ХарактеристикаНоменклатуры,
	|	Док.СерияНоменклатуры
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК Док
	|ГДЕ
	|	Док.Ссылка = &ДокументОснование
	|	И (НЕ Док.Номенклатура.Услуга)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Док.НомерСтроки";

	РезультатЗапроса = Запрос.Выполнить();

	Выборка = РезультатЗапроса.Выбрать();
	
	ТекПользователь = глЗначениеПеременной("глТекущийПользователь");
	ЕстьРеквизитПроцентСкидкиНаценки = Ложь;
	ПересчитыватьСкидку = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ПриИзмененииСуммыПересчитыватьСкидку");
	ЕстьРеквизитПроцентАвтоматическихСкидок = Ложь;	
	
	Пока Выборка.Следующий() Цикл

		СтрокаТабличнойЧасти = Товары.Добавить();

		СтрокаТабличнойЧасти.Номенклатура         = Выборка.Номенклатура;
		СтрокаТабличнойЧасти.Количество           = Выборка.Количество;
		СтрокаТабличнойЧасти.КоличествоМест       = Выборка.КоличествоМест;
		СтрокаТабличнойЧасти.ЕдиницаИзмерения     = Выборка.ЕдиницаИзмерения;
		СтрокаТабличнойЧасти.ЕдиницаИзмеренияМест = Выборка.ЕдиницаИзмеренияМест;
		СтрокаТабличнойЧасти.Коэффициент          = Выборка.Коэффициент;
		СтрокаТабличнойЧасти.СтавкаНДС            = Выборка.СтавкаНДС;

		// Т.к. в Реализации могла быть скидка. то цену рассчитываем от суммы
		СтрокаТабличнойЧасти.Сумма                = Выборка.Сумма;

		// Пересчитаем сумму в валюту документа (может отличаться от валюты основания).
		Сумма = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.Сумма, Выборка.ВалютаДокумента, ВалютаДокумента, 
		                   Выборка.КурсДокумента, Курс,
		                   Выборка.КратностьДокумента, Кратность);

		СтрокаТабличнойЧасти.Сумма = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(Сумма,
		                                 Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры,
		                                 Выборка.УчитыватьНДС И Выборка.СуммаВключаетНДС,
		                                 УчитыватьНДС,
		                                 СуммаВключаетНДС,
		                                 УчетНДС.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));

		ОбработкаТабличныхЧастей.ПриИзмененииСуммыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, ТекПользователь,,ЕстьРеквизитПроцентСкидкиНаценки,ПересчитыватьСкидку,ЕстьРеквизитПроцентАвтоматическихСкидок,"Товары");
		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

		СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Выборка.ХарактеристикаНоменклатуры;
		СтрокаТабличнойЧасти.СерияНоменклатуры          = Выборка.СерияНоменклатуры;
        СтрокаТабличнойЧасти.ОтражениеВУСН 				= Перечисления.ОтражениеВУСН.Принимаются;
	КонецЦикла;

КонецПроцедуры // ЗаполнитьТоварыПоОснованиюРеализация()

// Процедура выполняет заполнение ТЧ "Услуги" по документу-основанию Реализация.
// При заполнении копируется состав документа.
//
// Параметры:
//  ДокументОснование - ссылка на документ основание.
//
Процедура ЗаполнитьУслугиПоОснованиюРеализация(ДокументОснование) Экспорт
    Курс = ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);
	Кратность = ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Док.Ссылка.ВалютаДокумента,
	|	ВЫБОР
	|		КОГДА Док.Ссылка.ВалютаДокумента = Док.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов
	|			ТОГДА Док.Ссылка.КурсВзаиморасчетов
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК КурсДокумента,
	|	ВЫБОР
	|		КОГДА Док.Ссылка.ВалютаДокумента = Док.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов
	|			ТОГДА Док.Ссылка.КратностьВзаиморасчетов
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК КратностьДокумента,
	|	Док.Ссылка.УчитыватьНДС,
	|	Док.Ссылка.СуммаВключаетНДС,
	|	Док.Номенклатура,
	|	Док.Содержание,
	|	Док.СтавкаНДС,
	|	Док.Количество,
	|	Док.Сумма
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Услуги КАК Док
	|ГДЕ
	|	Док.Ссылка = &ДокументОснование
	|	И Док.Номенклатура.Услуга
	|
	|УПОРЯДОЧИТЬ ПО
	|	Док.НомерСтроки";

	РезультатЗапроса = Запрос.Выполнить();

	Выборка = РезультатЗапроса.Выбрать();
	
	ТекПользователь = глЗначениеПеременной("глТекущийПользователь");
	ЕстьРеквизитПроцентСкидкиНаценки = Ложь;
	ПересчитыватьСкидку = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ПриИзмененииСуммыПересчитыватьСкидку");
	ЕстьРеквизитПроцентАвтоматическихСкидок = Ложь;	
	
	Пока Выборка.Следующий() Цикл

		СтрокаТабличнойЧасти = Услуги.Добавить();

		СтрокаТабличнойЧасти.Номенклатура         = Выборка.Номенклатура;
		СтрокаТабличнойЧасти.Содержание           = Выборка.Содержание;
		СтрокаТабличнойЧасти.Количество           = Выборка.Количество;
		СтрокаТабличнойЧасти.СтавкаНДС            = Выборка.СтавкаНДС;

		// Т.к. в Реализации могла быть скидка. то цену рассчитываем от суммы
		СтрокаТабличнойЧасти.Сумма                = Выборка.Сумма;

		// Пересчитаем сумму в валюту документа (может отличаться от валюты основания).
		Сумма = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.Сумма, Выборка.ВалютаДокумента, ВалютаДокумента, 
		                   Выборка.КурсДокумента, Курс,
		                   Выборка.КратностьДокумента, Кратность);

		СтрокаТабличнойЧасти.Сумма = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(Сумма,
		                                 Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры,
		                                 Выборка.УчитыватьНДС И Выборка.СуммаВключаетНДС,
		                                 УчитыватьНДС,
		                                 СуммаВключаетНДС,
		                                 УчетНДС.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));

		ОбработкаТабличныхЧастей.ПриИзмененииСуммыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, ТекПользователь,,ЕстьРеквизитПроцентСкидкиНаценки,ПересчитыватьСкидку,ЕстьРеквизитПроцентАвтоматическихСкидок,"Услуги");
		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

        СтрокаТабличнойЧасти.ОтражениеВУСН 				= Перечисления.ОтражениеВУСН.Принимаются;
		
		СтрокаТабличнойЧасти.СтатьяЗатрат = СтрокаТабличнойЧасти.Номенклатура.СтатьяЗатрат;
	
		СтрокаТабличнойЧасти.НоменклатурнаяГруппа = СтрокаТабличнойЧасти.Номенклатура.НоменклатурнаяГруппаЗатрат;

		ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТабличнойЧасти, "Услуги", ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);
		
	КонецЦикла;

КонецПроцедуры // ЗаполнитьУслугиПоОснованиюРеализация()

// Процедура выполняет заполнение ТЧ "Возвратная тара" по документу-основанию Реализация.
// При заполнении копируется состав документа.
//
// Параметры:
//  ДокументОснование - ссылка на документ основание.
//
Процедура ЗаполнитьВозвратнуюТаруПоОснованиюРеализация(ДокументОснование) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Док.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	Док.Ссылка.КурсВзаиморасчетов,
	|	Док.Ссылка.КратностьВзаиморасчетов,
	|	Док.Номенклатура,
	|	Док.Количество,
	|	Док.Цена
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.ВозвратнаяТара КАК Док
	|ГДЕ
	|	Док.Ссылка = &ДокументОснование
	|";

	РезультатЗапроса = Запрос.Выполнить();

	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл

		СтрокаВозвратнойТары = ВозвратнаяТара.Добавить();

		СтрокаВозвратнойТары.Номенклатура     = Выборка.Номенклатура;
		СтрокаВозвратнойТары.Количество       = Выборка.Количество;
		СтрокаВозвратнойТары.Цена             = Выборка.Цена;

		// Пересчитаем цену в валюту взаиморасчетов (в документах договоры могут отличаться).
		Цена = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаВозвратнойТары.Цена, 
		                  Выборка.ВалютаВзаиморасчетов, ДоговорКонтрагента.ВалютаВзаиморасчетов,
		                  Выборка.КурсВзаиморасчетов, КурсВзаиморасчетов,
		                  Выборка.КратностьВзаиморасчетов, КратностьВзаиморасчетов);

		ОбработкаТабличныхЧастей.РассчитатьСуммуВозвратнойТарыТабЧасти(СтрокаВозвратнойТары, ЭтотОбъект);

	КонецЦикла;

КонецПроцедуры // ЗаполнитьТоварыПоОснованиюРеализация()

// Процедура очищает розничный/НТТ склад в шапке и таб. части "Оборудование", при виде операции "Оборудование".
// Поступление оборудования возможно только на оптовый склад.
//
//	Параметры:
//		ТолькоПроверка - если Ложь, то выполняется очистка неверно указанного склада,
//						 иначе только выдача сообщения.
//	Возврат:
//		Истина - были обнаружены ошибки, иначе - Ложь.
//
Функция ОчиститьСкладПриВидеОперацииОборудование(ТолькоПроверка = Истина) Экспорт

	// Оборудование может поступать только на оптовый склад
	ФлагСообщали = Ложь;
	Если ВидОперации <> Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Оборудование Тогда
		Возврат ФлагСообщали;
	КонецЕсли;
	
	Если ВидПоступления <> Перечисления.ВидыПоступленияТоваров.НаСклад Тогда
		Если НЕ ФлагСообщали Тогда
			Сообщить("При виде операции ""Оборудование"" вид поступления может быть только на склад.", СтатусСообщения.ОченьВажное);
			ФлагСообщали = Истина;
		КонецЕсли;
		Если НЕ ТолькоПроверка Тогда
			ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад;
		КонецЕсли;
	КонецЕсли;
	
	ТекстСообщения = "При виде операции ""Оборудование"" поступление возможно только на оптовый склад!"
		+ ?(ТолькоПроверка, "", Символы.ПС + "Склад будет очищен!");
		
	Если ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад
	   И ЗначениеЗаполнено(СкладОрдер)
	   И (ТипЗнч(СкладОрдер) <> Тип("СправочникСсылка.Склады")
	   ИЛИ СкладОрдер.ВидСклада <> Перечисления.ВидыСкладов.Оптовый) Тогда
		Если НЕ ФлагСообщали Тогда
			Сообщить(ТекстСообщения, СтатусСообщения.ОченьВажное);
			ФлагСообщали = Истина;
		КонецЕсли;
		Если НЕ ТолькоПроверка Тогда
			СкладОрдер = Справочники.Склады.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
		
	// Заполнить склад в табличных частях
	Если мУказаниеСкладовВТЧ Тогда
		Для Каждого СтрокаТЧ Из Оборудование Цикл
			Если ЗначениеЗаполнено(СтрокаТЧ.Склад)
				  И СтрокаТЧ.Склад.ВидСклада <> Перечисления.ВидыСкладов.Оптовый Тогда
				Если НЕ ТолькоПроверка Тогда
					СтрокаТЧ.Склад = Справочники.Склады.ПустаяСсылка();
				КонецЕсли;
				Если НЕ ФлагСообщали Тогда
					Сообщить(ТекстСообщения, СтатусСообщения.ОченьВажное);
					ФлагСообщали = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ФлагСообщали;
	
КонецФункции // ОчиститьСкладПриВидеОперацииОборудование()

// Процедура устанавливает значение служебного реквизита "ЕстьАлкогольнаяПродукция".
//
//	Параметры:
//		нет.
//
Процедура ЗаполнитьПризнакЕстьАлкогольнаяПродукция()
	
	Если Не ПолучитьФункциональнуюОпцию("ВестиСведенияДляДекларацийПоАлкогольнойПродукции") Тогда
		Возврат
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА
	|ИЗ
	|	Справочник.Номенклатура КАК ТаблицаНоменклатура
	|ГДЕ
	|	ТаблицаНоменклатура.АлкогольнаяПродукция
	|	И ТаблицаНоменклатура.Ссылка В (&МассивНоменклатуры)";
	
	Запрос.УстановитьПараметр("МассивНоменклатуры", Товары.ВыгрузитьКолонку("Номенклатура"));
	
	ЕстьАлкогольнаяПродукция = НЕ Запрос.Выполнить().Пустой();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента)

	ТаблицаТоваров = РезультатЗапросаПоТоварам.Выгрузить();

	// Создаем колонку "Стоимость" и копируем в нее колонку "Сумма"
	ТаблицаТоваров.Колонки.Добавить("Стоимость", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.ЗагрузитьКолонку(ТаблицаТоваров.ВыгрузитьКолонку("Сумма") , "Стоимость");
	
	ТаблицаТоваров.Колонки.Добавить("КоличествоМинус", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,3)));
	ТаблицаТоваров.Колонки.Добавить("СуммаБезНДС",     Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));

	Для каждого СтрокаТаблицы Из ТаблицаТоваров Цикл
		Если ЗначениеЗаполнено(СтрокаТаблицы.Количество) Тогда
			СтрокаТаблицы.КоличествоМинус = - СтрокаТаблицы.Количество;
		КонецЕсли;
		
	КонецЦикла;

	// Порядок вызова в данном случае важен
	ПодготовитьТаблицуТоваровРегл(ТаблицаТоваров, СтруктураШапкиДокумента);
	ПодготовитьТаблицуТоваровУпр(ТаблицаТоваров, СтруктураШапкиДокумента);

	Возврат ТаблицаТоваров;

КонецФункции // ПодготовитьТаблицуТоваров()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуОбъектовСтроительства(РезультатЗапросаПоОбъектамСтроительства, СтруктураШапкиДокумента)

	ТаблицаОбъектовСтроительства = РезультатЗапросаПоОбъектамСтроительства.Выгрузить();
	
	ТаблицаОбъектовСтроительства.Колонки.Добавить("Стоимость", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаОбъектовСтроительства.ЗагрузитьКолонку(ТаблицаОбъектовСтроительства.ВыгрузитьКолонку("Сумма") , "Стоимость");
	ТаблицаОбъектовСтроительства.Колонки.Добавить("КоличествоМинус", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,3)));
	ТаблицаОбъектовСтроительства.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,3)));
	ТаблицаОбъектовСтроительства.ЗаполнитьЗначения(1, "Количество");

	ТаблицаОбъектовСтроительства.Колонки.Добавить("Цена", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	
	Для Каждого СтрокаТаблицы из ТаблицаОбъектовСтроительства Цикл
		СтрокаТаблицы.Цена  = СтрокаТаблицы.Сумма;
	КонецЦикла;
	
	ПодготовитьТаблицуТоваровРегл(ТаблицаОбъектовСтроительства, СтруктураШапкиДокумента);
	ПодготовитьТаблицуТоваровУпр(ТаблицаОбъектовСтроительства,  СтруктураШапкиДокумента);

	Возврат ТаблицаОбъектовСтроительства;

КонецФункции // ПодготовитьТаблицуОбъектовСтроительства()

Процедура ПодготовитьТаблицуТоваровУпр(ТаблицаТоваров, СтруктураШапкиДокумента)

	ЕстьЦена = ТаблицаТоваров.Колонки.Найти("Цена") <> Неопределено;

	ТаблицаТоваров.Колонки.Добавить("СуммаПродажная", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));

	ЕстьРозничныйСклад = УправлениеРозничнойТорговлей.ОпределитьНаличиеРозничногоСклада(ТаблицаТоваров, "Склад", "ВидСкладаРазмещения");
	Если ЕстьРозничныйСклад Тогда
		ТаблицаПоЦенам = УправлениеРозничнойТорговлей.СформироватьЗапросПоПродажнымЦенам(Дата, ТаблицаТоваров.ВыгрузитьКолонку("Склад"),
		                 ТаблицаТоваров.ВыгрузитьКолонку("Номенклатура")).Выгрузить();

		УправлениеРозничнойТорговлей.ЗаполнитьКолонкуСуммаПродажная(ТаблицаТоваров, ТаблицаПоЦенам, "ВидСкладаРазмещения");
	КонецЕсли;

	ТаблицаТоваров.Колонки.Добавить("ЦенаВВалютеЗаказа"  , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
	ТаблицаТоваров.Колонки.Добавить("СуммаВзаиморасчетов", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаУпр"           , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТаблицаТоваров.Колонки.Добавить("НДСУпр"             , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));

	// Надо рассчитать стоимость без НДС.
	Для Каждого СтрокаТаблицы Из ТаблицаТоваров Цикл

		// Считаем, что поступление выписывается с теми же флагами учета НДС, что и Заказ.
		Если СтруктураШапкиДокумента.НужнаЦенаЗаказа Тогда
			СтрокаТаблицы.ЦенаВВалютеЗаказа = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Цена, ВалютаДокумента, 
			                                  СтруктураШапкиДокумента.ВалютаЗаказа,
			                                  СтруктураШапкиДокумента.КурсДокумента, 
			                                  СтруктураШапкиДокумента.КурсЗаказа,
			                                  СтруктураШапкиДокумента.КратностьДокумента, 
			                                  СтруктураШапкиДокумента.КратностьЗаказа);
		КонецЕсли;

		СтоимостьСНДС  = СтрокаТаблицы.Стоимость + ?(УчитыватьНДС И Не СуммаВключаетНДС, СтрокаТаблицы.НДС, 0);
		
		Если СтруктураШапкиДокумента.НеВключатьНДСВСтоимостьПартий 
		   И НЕ (СтруктураШапкиДокумента.НДСВключенВСтоимость) 
		   И НЕ СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
			СтрокаТаблицы.Стоимость = СтрокаТаблицы.Стоимость - ?(УчитыватьНДС И СуммаВключаетНДС, СтрокаТаблицы.НДС, 0);
		Иначе
			СтрокаТаблицы.Стоимость = СтоимостьСНДС;
		КонецЕсли;
		
		Если СтруктураШапкиДокумента.УчетАгентскогоНДС Тогда
			СтоимостьДляВзаиморасчетов = СтоимостьСНДС - СтрокаТаблицы.НДС;
		Иначе
			СтоимостьДляВзаиморасчетов = СтоимостьСНДС;
		КонецЕсли;
		СтрокаТаблицы.СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтоимостьДляВзаиморасчетов, ВалютаДокумента, 
										 СтруктураШапкиДокумента.ВалютаВзаиморасчетов, СтруктураШапкиДокумента.КурсДокумента, 
										 КурсВзаиморасчетов, СтруктураШапкиДокумента.КратностьДокумента, КратностьВзаиморасчетов);

		// Суммы пересчитаем в валюту упр. учета
		СтрокаТаблицы.СуммаУпр = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтоимостьДляВзаиморасчетов, ВалютаДокумента,
										 СтруктураШапкиДокумента.ВалютаУправленческогоУчета, СтруктураШапкиДокумента.КурсДокумента, 
										 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
		                                 СтруктураШапкиДокумента.КратностьДокумента, 
										 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
										 
		СтрокаТаблицы.НДСУпр = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.НДС, ВалютаДокумента,
										 СтруктураШапкиДокумента.ВалютаУправленческогоУчета, СтруктураШапкиДокумента.КурсДокумента, 
										 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
		                                 СтруктураШапкиДокумента.КратностьДокумента, 
										 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

		СтрокаТаблицы.Стоимость = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Стоимость, СтруктураШапкиДокумента.ВалютаДокумента,
		                                 СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КурсДокумента,
		                                 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КратностьДокумента,
		                                 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
		
		// Цена нужна для проведения по заказам поставщиков, поэтому ее необходимо пересчитать в валюту заказа
		Если ЕстьЦена И ЗначениеЗаполнено(СтруктураШапкиДокумента.Сделка) 
			И (ТипЗнч(СтруктураШапкиДокумента.Сделка) = Тип("ДокументСсылка.ЗаказПоставщику")
		       ИЛИ ТипЗнч(СтруктураШапкиДокумента.Сделка) = Тип("ДокументСсылка.ЗаказПокупателя")) Тогда
			СтруктураКурсаВалютыЗаказа = МодульВалютногоУчета.ПолучитьКурсВалюты(СтруктураШапкиДокумента.ВалютаЗаказа, Дата);
			СтрокаТаблицы.Цена = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Цена, СтруктураШапкиДокумента.ВалютаДокумента,
										 СтруктураШапкиДокумента.ВалютаЗаказа,
										 СтруктураШапкиДокумента.КурсДокумента,
										 СтруктураКурсаВалютыЗаказа.Курс, 
										 СтруктураШапкиДокумента.КратностьДокумента,
										 СтруктураКурсаВалютыЗаказа.Кратность);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // ПодготовитьТаблицуТоваровУпр()

Процедура ПодготовитьТаблицуТоваровРегл(ТаблицаТоваров, СтруктураШапкиДокумента)

	ТаблицаТоваров.Колонки.Добавить("СуммаРегл",        Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("ПроводкаСумма",    Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("ПроводкаСуммаНДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	
	ЕстьСкладВТабличнойЧасти = (НЕ ТаблицаТоваров.Колонки.Найти("Склад") = Неопределено);
	Если ЕстьСкладВТабличнойЧасти Тогда
		ТаблицаТоваров.Колонки.Добавить("СкладПроводок", Новый описаниеТипов("СправочникСсылка.Склады"));
	КонецЕсли;
	Данные = МодульВалютногоУчета.ПолучитьКурсВалюты(СтруктураШапкиДокумента.ВалютаРегламентированногоУчета, Дата);

	Для каждого СтрокаТаблицы Из ТаблицаТоваров Цикл
        Если ЕстьСкладВТабличнойЧасти Тогда
			Если СтруктураШапкиДокумента.СкладВТабличнойЧасти Тогда
				Если СтруктураШапкиДокумента.ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад Тогда
					СтрокаТаблицы.СкладПроводок = СтрокаТаблицы.Склад;
				ИначеЕсли СтруктураШапкиДокумента.ВидПоступления = Перечисления.ВидыПоступленияТоваров.ПоОрдеру Тогда
					// если склад в табличной части не заполнен - тогда переписываем его из ордера
					Если СтрокаТаблицы.Склад = Неопределено тогда
						СтрокаТаблицы.СкладПроводок = СтрокаТаблицы.ПриходныйОрдерСклад;
					Иначе
						СтрокаТаблицы.СкладПроводок = СтрокаТаблицы.Склад;
					КонецЕсли;

				КонецЕсли;
			Иначе
				Если ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад Тогда
					СтрокаТаблицы.СкладПроводок = СтруктураШапкиДокумента.СкладОрдер;
				ИначеЕсли ВидПоступления = Перечисления.ВидыПоступленияТоваров.ПоОрдеру Тогда
					Если СтруктураШапкиДокумента.Свойство("СкладПриходногоОрдера") Тогда
						СтрокаТаблицы.СкладПроводок = СтруктураШапкиДокумента.СкладПриходногоОрдера;
					Иначе
						СтрокаТаблицы.СкладПроводок = СтруктураШапкиДокумента.СкладОрдер.Склад;	
					КонецЕсли; 
				КонецЕсли;
			КонецЕсли;
		КонецЕсли; 

		
		НДС   = СтрокаТаблицы.НДС;
		Сумма = ?(СуммаВключаетНДС, СтрокаТаблицы.Стоимость - НДС, СтрокаТаблицы.Стоимость);

		Если СтруктураШапкиДокумента.ВалютаДокумента = СтруктураШапкиДокумента.ВалютаРегламентированногоУчета Тогда
			СтрокаТаблицы.ПроводкаСумма    = Сумма;
			СтрокаТаблицы.ПроводкаСуммаНДС = НДС;
		Иначе
			СтрокаТаблицы.ПроводкаСумма = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Сумма, СтруктураШапкиДокумента.ВалютаДокумента,
			                                 СтруктураШапкиДокумента.ВалютаРегламентированногоУчета, 
			                                 СтруктураШапкиДокумента.КурсДокумента,
			                                 Данные.Курс, 
			                                 СтруктураШапкиДокумента.КратностьДокумента,
			                                 Данные.Кратность);
			СтрокаТаблицы.ПроводкаСуммаНДС = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(НДС, СтруктураШапкиДокумента.ВалютаДокумента,
			                                 СтруктураШапкиДокумента.ВалютаРегламентированногоУчета, 
			                                 СтруктураШапкиДокумента.КурсДокумента,
			                                 Данные.Курс, 
			                                 СтруктураШапкиДокумента.КратностьДокумента,
			                                 Данные.Кратность);
		КонецЕсли;
		
		СтрокаТаблицы.СуммаРегл = СтрокаТаблицы.ПроводкаСумма + СтрокаТаблицы.ПроводкаСуммаНДС;  // Используется в процедурах отражения затрат

	КонецЦикла;
	
КонецПроцедуры // ПодготовитьТаблицуТоваровРегл()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТаре  - результат запроса по табличной части "ВозвратнаяТара",
//  СтруктураШапкиДокумента - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуТары(РезультатЗапросаПоТаре, СтруктураШапкиДокумента)

	ТаблицаТары = РезультатЗапросаПоТаре.Выгрузить();

	// Переименуем колонку "Сумма" в "Стоимость" (как в регистрах).
	ТаблицаТары.Колонки.Сумма.Имя = "Стоимость";
	ТаблицаТары.Колонки.Добавить("ВестиПартионныйУчетПоСериям", Новый ОписаниеТипов("Булево"));
	ТаблицаТары.Колонки.Добавить("ХарактеристикаНоменклатуры",  Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаТары.Колонки.Добавить("СерияНоменклатуры",           Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));
	
	// Порядок вызова в данном случае важен
	ПодготовитьТаблицуТарыРегл(ТаблицаТары, СтруктураШапкиДокумента);
	ПодготовитьТаблицуТарыУпр(ТаблицаТары, СтруктураШапкиДокумента);
	
	Возврат ТаблицаТары;

КонецФункции // ПодготовитьТаблицуТары()

Процедура ПодготовитьТаблицуТарыУпр(ТаблицаТары, СтруктураШапкиДокумента)

	ТаблицаТары.Колонки.Добавить("СуммаПродажная", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));

	ЕстьРозничныйСклад = УправлениеРозничнойТорговлей.ОпределитьНаличиеРозничногоСклада(ТаблицаТары, "Склад", "ВидСкладаРазмещения");
	Если ЕстьРозничныйСклад Тогда
		ТаблицаПоЦенам = УправлениеРозничнойТорговлей.СформироватьЗапросПоПродажнымЦенам(Дата, ТаблицаТары.ВыгрузитьКолонку("Склад"),
	                     ТаблицаТары.ВыгрузитьКолонку("Номенклатура")).Выгрузить();

		УправлениеРозничнойТорговлей.ЗаполнитьКолонкуСуммаПродажная(ТаблицаТары, ТаблицаПоЦенам, "ВидСкладаРазмещения");
	КонецЕсли;

	ТаблицаТары.Колонки.Добавить("ЦенаВВалютеЗаказа"  , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
	ТаблицаТары.Колонки.Добавить("СуммаВзаиморасчетов", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТаблицаТары.Колонки.Добавить("СуммаУпр"           , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));

	// Надо рассчитать сумму без НДС.
	Для каждого СтрокаТаблицы Из ТаблицаТары Цикл

		// Счиатем, что поступление выписывается с теми же флагами учета НДС, что и Заказ.
		Если СтруктураШапкиДокумента.НужнаЦенаЗаказа Тогда
			СтрокаТаблицы.ЦенаВВалютеЗаказа = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Цена, ВалютаДокумента, 
			                                  СтруктураШапкиДокумента.ВалютаЗаказа,
			                                  СтруктураШапкиДокумента.КурсДокумента, 
			                                  СтруктураШапкиДокумента.КурсЗаказа,
			                                  СтруктураШапкиДокумента.КратностьДокумента, 
			                                  СтруктураШапкиДокумента.КратностьЗаказа);
		КонецЕсли;

		СтрокаТаблицы.СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Стоимость, ВалютаДокумента, 
										 СтруктураШапкиДокумента.ВалютаВзаиморасчетов, СтруктураШапкиДокумента.КурсДокумента, 
										 КурсВзаиморасчетов, СтруктураШапкиДокумента.КратностьДокумента, КратностьВзаиморасчетов);
										 
		СтрокаТаблицы.СуммаУпр = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Стоимость, ВалютаДокумента,
										 СтруктураШапкиДокумента.ВалютаУправленческогоУчета, СтруктураШапкиДокумента.КурсДокумента, 
										 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
		                                 СтруктураШапкиДокумента.КратностьДокумента, 
										 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

		// Суммы пересчитаем в валюту упр. учета. По таре считаем, что СуммаБезНДС = Сумма
		СтрокаТаблицы.Стоимость = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Стоимость, ВалютаДокумента,
		                                 СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КурсДокумента,
		                                 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КратностьДокумента,
		                                 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);


	КонецЦикла;

КонецПроцедуры // ПодготовитьТаблицуТарыУпр()

Процедура ПодготовитьТаблицуТарыРегл(ТаблицаТары, СтруктураШапкиДокумента)

	ТаблицаТары.Колонки.Добавить("ПроводкаСумма", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));

	Данные = МодульВалютногоУчета.ПолучитьКурсВалюты(СтруктураШапкиДокумента.ВалютаРегламентированногоУчета, Дата);

	// Надо рассчитать сумму без НДС.
	Для каждого СтрокаТаблицы Из ТаблицаТары Цикл

		Если СтруктураШапкиДокумента.ВалютаВзаиморасчетов = СтруктураШапкиДокумента.ВалютаРегламентированногоУчета Тогда
			СтрокаТаблицы.ПроводкаСумма    = СтрокаТаблицы.Стоимость;
		Иначе
			СтрокаТаблицы.ПроводкаСумма = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Стоимость, СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
			                                 СтруктураШапкиДокумента.ВалютаРегламентированногоУчета, 
			                                 СтруктураШапкиДокумента.КурсДокумента,
			                                 Данные.Курс, 
			                                 СтруктураШапкиДокумента.КратностьДокумента,
			                                 Данные.Кратность);
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // ПодготовитьТаблицуТарыРегл()

// Дополняет полями, нужными для упр. учета
Процедура ДополнитьСтруктуруОбязательныхПолейШапкиУпр(СтруктураОбязательныхПолей, СтруктураШапкиДокумента)

	// Если установлен призник "Обновлять цены поставщиков при поступлении товаров",
	// то надо обязательно указывать тип цен
	Если РегистрироватьЦеныПоставщика И СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		СтруктураОбязательныхПолей.Вставить("ТипЦен", "Для обновления цен поставщиков необходимо указывать тип цен!");
	КонецЕсли;

КонецПроцедуры

// Дополняет полями, нужными для регл. учета
Процедура ДополнитьСтруктуруОбязательныхПолейШапкиРегл(СтруктураОбязательныхПолей, СтруктураШапкиДокумента)

	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		
		Если НЕ (ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия 
				И СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом)
	 		И (ВидОперации <> Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку) 
			Тогда
			СтруктураОбязательныхПолей.Вставить("СчетУчетаРасчетовСКонтрагентом");
			СтруктураОбязательныхПолей.Вставить("СчетУчетаРасчетовПоАвансам");
		КонецЕсли;

		Если ВозвратнаяТара.Количество() > 0 Тогда
			СтруктураОбязательныхПолей.Вставить("СчетУчетаРасчетовПоТаре");
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

// Выполняет проверки,которые нужны только для регл. учета
Процедура ПроверитьЗаполнениеШапкиРегл(СтруктураШапкиДокумента, Отказ, Заголовок)
	Если НЕ СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		Возврат;
	КонецЕсли;
	СтруктураОбязательныхПолей = Новый Структура();
	ДополнитьСтруктуруОбязательныхПолейШапкиРегл(СтруктураОбязательныхПолей, СтруктураШапкиДокумента);
	ОбщегоНазначенияКлиентСервер.ПроверитьЗаполнениеВычисляемыхРеквизитовШапки(ЭтотОбъект, СтруктураОбязательныхПолей, СтруктураШапкиДокумента, Отказ, Заголовок);
КонецПроцедуры

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение, не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура();

	Если ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку
		И НЕ СтруктураШапкиДокумента.ЗаказВТабличнойЧасти Тогда
		СтруктураОбязательныхПолей.Вставить( "Сделка", 
				"Заполните поле ""Заказ покупателя""!");
	Иначе	
		// Сделка должна быть заполнена, если учет взаиморасчетов ведется по заказам.
		Если СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам 
			И НЕ СтруктураШапкиДокумента.ЗаказВТабличнойЧасти Тогда
			СтруктураОбязательныхПолей.Вставить( "Сделка", 
				"По выбранному договору установлен способ ведения взаиморасчетов ""по заказам (счетам)""! 
				|Заполните поле ""Заказ поставщику""!");
		ИначеЕсли СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
			СтруктураОбязательныхПолей.Вставить( "Сделка", 
				"По выбранному договору установлен способ ведения взаиморасчетов ""по заказам (счетам)""! 
				|Заполните поле ""Счет поставщика""!");
		КонецЕсли;
	КонецЕсли;
	
	ДополнитьСтруктуруОбязательныхПолейШапкиУпр(СтруктураОбязательныхПолей, СтруктураШапкиДокумента);
	
	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	ПроверитьЗаполнениеШапкиУпр(СтруктураШапкиДокумента, Отказ, Заголовок);
	ПроверитьЗаполнениеШапкиРегл(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	//Организация в документе должна совпадать с организацией, указанной в договоре взаиморасчетов.
	УправлениеВзаиморасчетами.ПроверитьСоответствиеОрганизацииДоговоруВзаиморасчетов(Организация, ДоговорКонтрагента, СтруктураШапкиДокумента.ДоговорОрганизация, Отказ, Заголовок);
	
	Отказ = ОчиститьСкладПриВидеОперацииОборудование(Истина) ИЛИ Отказ;
	
	Если НЕ Отказ
	      И СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку
	      И СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
		ОбщегоНазначения.СообщитьОбОшибке( "Документ с видом операции ""В переработку"" не должен отражаться в налоговом учете.", Отказ, Заголовок);
	КонецЕсли;
	
	Если НЕ Отказ
	      И СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Оборудование
	      И СтруктураШапкиДокумента.ВидПоступления = Перечисления.ВидыПоступленияТоваров.ПоОрдеру Тогда
		ОбщегоНазначения.СообщитьОбОшибке( "Документ с видом операции ""Оборудование"" не может оформляться с видом поступления ""По ордеру"".", Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Выполняет проверки,которые нужны только для упр. учета
Процедура ПроверитьЗаполнениеШапкиУпр(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	// Если склад указывается в ТЧ, то в шапке он может быть не заполнен или указан неправильно,
	// это ни на что не влияет, потому что при проведении используется склад в ТЧ.
	Если ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад
	   И Не СтруктураШапкиДокумента.СкладВТабличнойЧасти 
	   И СтруктураШапкиДокумента.ВидСклада = Перечисления.ВидыСкладов.НТТ Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Документ не может осуществлять поступление на НТТ!", Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок)
	ИмяТабличнойЧасти = "Товары";
	
	// Укажем, что надо проверить
	//Проверяем здесь, а не в ОбработкаПроверкиЗаполнения, т.к. эти реквизиты заполняются 
	//	в ПередЗаписью - после того как выполняется ОбработкаПроверкиЗаполнения
	СтруктураОбязательныхПолей = Новый Структура("Склад");
	
	Если СтруктураШапкиДокумента.ВидПоступления = Перечисления.ВидыПоступленияТоваров.ПоОрдеру Тогда
		СтруктураОбязательныхПолей.Вставить("ПриходныйОрдер");
	КонецЕсли;
	
	Если УправлениеЗаказами.ПроверятьЗаказВТабличнойЧасти(ВидОперации, ДоговорКонтрагента, "Поступление") Тогда
		Если ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку Тогда
			СтруктураОбязательныхПолей.Вставить("ЗаказПоставщику", "Не заполнено значение реквизита ""Заказ покупателя""!");

		Иначе	
			СтруктураОбязательныхПолей.Вставить("ЗаказПоставщику");
		КонецЕсли;
	КонецЕсли;
	
	Если ВидОперации <> Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку Тогда
		СтруктураОбязательныхПолей.Вставить("Сумма");
	КонецЕсли;

	УправлениеЗапасами.КорректировкаСтруктурыОбязательныхПолей(СтруктураОбязательныхПолей, СтруктураШапкиДокумента.ВидСклада);
	
	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураОбязательныхПолей, Отказ, Заголовок);

	// Здесь услуг быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетУслуг(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);

	// Здесь наборов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетНаборов(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);

	// Здесь комплектов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетКомплектов(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);

	// Здесь НТТ быть не должно.
	УправлениеЗапасами.ПроверитьЧтоСкладНеНТТ(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);

	// Проверка заполнения номера ГТД в серии
	УправлениеЗапасами.ПроверитьЧтоВСерииЗаполненНомерГТД(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);

	// Реквизиты Заказов "Организация", "Контрагент", "Договор контрагента" должны совпадать с реквизитами из шапки.
	УправлениеЗаказами.ПроверитьРеквизитыЗаказов(ЭтотОбъект, "Товары", "ЗаказПоставщику", Отказ, Заголовок);

	// Проверка наличия продажных цен на приходуемый товар.
	УправлениеРозничнойТорговлей.ПроверитьЧтоДляРозничныхСкладовЗаполненаСуммаПродажная(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ,
	                                                       Заголовок, "ВидСкладаРазмещения");
														   
	УчетСерийныхНомеров.ПроверитьКоличествоСерийныхНомеровВДокументе(ЭтотОбъект, "Товары", Заголовок);

	//проверка наличия резервирования под заказ с обособленным учетом при поступлении по ордеру с правом продажи
	ПроверитьРезервИВидПоступления(ТаблицаПоТоварам, "Товары", Заголовок, Отказ);
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

Процедура ПроверитьРезервИВидПоступления(Таб, ИмяТЧ, Заголовок, Отказ)
	Если ВидПоступления = Перечисления.ВидыПоступленияТоваров.ПоОрдеру Тогда
		Для каждого Строка из Таб цикл
			Если НЕ ЗначениеЗаполнено(Строка.ЗаказПокупателя) Тогда 
				Продолжить;
			КонецЕсли;
			Если ТипЗнч(Строка.ЗаказПокупателя)<>Тип("ДокументСсылка.ЗаказПокупателя") Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(Строка.НомерСтроки) +
		                               """ табличной части """ + ИмяТЧ + """: ";
			
			Если Строка.БезПраваПродажи=ложь И Строка.ОбособленныйУчетТоваровПоЗаказамПокупателей Тогда
				ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "выбран заказ покупателя с обособленным учетом. "+
				    "Резервировать под такие заказы можно только в случае, если приходный ордер без права продажи ", Отказ, Заголовок);

			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Проверяет правильность заполнения строк табличной части "Услуги".
//
// Параметры:
// Параметры: 
//  РезультатЗапросаПоУслугам - результат запроса, содержащий данные для проведения и проверки ТЧ Услуги
//  СтруктураШапкиДокумента   - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//  Отказ                     - флаг отказа в проведении.
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиУслуги(ТаблицаПоУслугам, СтруктураШапкиДокумента, Отказ, Заголовок)

	ИмяТабличнойЧасти = "Услуги";

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Сумма");

	Если УправлениеЗаказами.ПроверятьЗаказВТабличнойЧасти(ВидОперации, ДоговорКонтрагента, "Поступление") Тогда
		СтруктураОбязательныхПолей.Вставить("ЗаказПоставщику");
	КонецЕсли;

	Если ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад Тогда
		УправлениеЗапасами.КорректировкаСтруктурыОбязательныхПолей(СтруктураОбязательныхПолей, СтруктураШапкиДокумента.ВидСклада);
	Иначе
		УправлениеЗапасами.КорректировкаСтруктурыОбязательныхПолей(СтруктураОбязательныхПолей);
	КонецЕсли;

	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Услуги", СтруктураОбязательныхПолей, Отказ, Заголовок);

	ПроверитьЗаполнениеТабличнойЧастиУслугиРегл(ТаблицаПоУслугам, Отказ, Заголовок);
	
	// Здесь товаров быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетТоваров(ЭтотОбъект, "Услуги", ТаблицаПоУслугам, Отказ, Заголовок);

	// Здесь наборов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетНаборов(ЭтотОбъект, "Услуги", ТаблицаПоУслугам, Отказ, Заголовок);

	// Здесь комплектов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетКомплектов(ЭтотОбъект, "Услуги", ТаблицаПоУслугам, Отказ, Заголовок);

	// Реквизиты Заказов "Организация", "Контрагент", "Договор контрагента" должны совпадать с реквизитами из шапки.
	УправлениеЗаказами.ПроверитьРеквизитыЗаказов(ЭтотОбъект, "Услуги", "ЗаказПоставщику", Отказ, Заголовок);
	
	// Проверим соответствие подразделения и оранизации.
	УправлениеЗатратами.ПроверитьПодразделениеОрганизацииВСтрокахТабЧасти(ЭтотОбъект, ТаблицаПоУслугам, "Услуги",, Отказ, Заголовок);
	
	// Проверить обязательные поля для производственных статей затрат
	Для Каждого СтрокаУслуг Из ТаблицаПоУслугам Цикл
		Если СтрокаУслуг.ХарактерЗатрат = Перечисления.ХарактерЗатрат.БракВПроизводстве
		 ИЛИ СтрокаУслуг.ХарактерЗатрат = Перечисления.ХарактерЗатрат.ОбщепроизводственныеРасходы
		 ИЛИ СтрокаУслуг.ХарактерЗатрат = Перечисления.ХарактерЗатрат.ОбщехозяйственныеРасходы
		 ИЛИ СтрокаУслуг.ХарактерЗатрат = Перечисления.ХарактерЗатрат.ПроизводственныеРасходы Тогда
		 	Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
				Если СтрокаУслуг.Подразделение.Пустая() Тогда
					ОбщегоНазначения.СообщитьОбОшибке("В строке номер """ + СтрокаУслуг.НомерСтроки + """ табличной части ""Услуги"": Не заполнено значение реквизита ""Подразделение""!", Отказ, Заголовок);
				КонецЕсли;
			КонецЕсли;
		 	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
				Если СтрокаУслуг.ПодразделениеОрганизации.Пустая() Тогда
					ОбщегоНазначения.СообщитьОбОшибке("В строке номер """ + СтрокаУслуг.НомерСтроки + """ табличной части ""Услуги"": Не заполнено значение реквизита ""Подразделение организации""!", Отказ, Заголовок);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиУслуги()

// Выполняет проверки,которые нужны только для регл. учета
Процедура ПроверитьЗаполнениеТабличнойЧастиУслугиРегл(ТаблицаПоУслугам, Отказ, Заголовок)
	
	Для Каждого СтрокаТаблицы Из ТаблицаПоУслугам Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.СтатьяЗатрат) Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Не заполнены значения ""Статья затрат"" (строка № " + СтрокаТаблицы.НомерСтроки + " табличной части ""Услуги"")", Отказ, Заголовок);
		Иначе
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.СтатьяЗатрат.ХарактерЗатрат) Тогда
				ОбщегоНазначения.СообщитьОбОшибке("В статье затрат """ + СтрокаТаблицы.СтатьяЗатрат + """ не указан вид расхода (строка № " + СтрокаТаблицы.НомерСтроки + " табличной части ""Услуги"")", Отказ, Заголовок);
			КонецЕсли;
		КонецЕсли
	КонецЦикла;
	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиУслугиРегл()

// Проверяет правильность заполнения строк табличной части "Возвратная тара".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТаре           - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  СтруктураШапкиДокумента - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара(ТаблицаПоТаре, СтруктураШапкиДокумента, Отказ, Заголовок)

	ИмяТабличнойЧасти = "ВозвратнаяТара";

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = УправлениеЗапасами.СформироватьСтруктуруОбязательныхПолейТара();

	// Склад в ТЧ всегда должен быть заполнен, иначе проведение будет неправильным.
	СтруктураОбязательныхПолей.Вставить("Склад");

	Если УправлениеЗаказами.ПроверятьЗаказВТабличнойЧасти(ВидОперации, ДоговорКонтрагента, "Поступление") Тогда
		СтруктураОбязательныхПолей.Вставить("ЗаказПоставщику");
	КонецЕсли;

	Если СтруктураШапкиДокумента.ВидПоступления = Перечисления.ВидыПоступленияТоваров.ПоОрдеру Тогда
		СтруктураОбязательныхПолей.Вставить("ПриходныйОрдер");
	КонецЕсли;

	Если ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад Тогда
		УправлениеЗапасами.КорректировкаСтруктурыОбязательныхПолей(СтруктураОбязательныхПолей, СтруктураШапкиДокумента.ВидСклада);
	Иначе
		УправлениеЗапасами.КорректировкаСтруктурыОбязательныхПолей(СтруктураОбязательныхПолей);
	КонецЕсли;

	// Теперь вызовем общую процедуру проверки заполнения.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ВозвратнаяТара",СтруктураОбязательныхПолей, Отказ, Заголовок);

	// Здесь услуг быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетУслуг(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);

	// Здесь наборов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетНаборов(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);

	// Здесь комплектов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетКомплектов(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);

	// Здесь НТТ быть не должно.
	УправлениеЗапасами.ПроверитьЧтоСкладНеНТТ(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);

	// По возвратной таре не должен вестись учет по характеристикам.
	УправлениеЗапасами.ПроверитьЧтоНетНоменклатурыСХарактеристиками(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);

	// Реквизиты Заказов "Организация", "Контрагент", "Договор контрагента" должны совпадать с реквизитами из шапки.
	УправлениеЗаказами.ПроверитьРеквизитыЗаказов(ЭтотОбъект, "ВозвратнаяТара", "ЗаказПоставщику", Отказ, Заголовок);

	// Проверка наличия продажных цен на приходуемый товар.
	УправлениеРозничнойТорговлей.ПроверитьЧтоДляРозничныхСкладовЗаполненаСуммаПродажная(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ,
	                                                       Заголовок, "ВидСкладаРазмещения");

		//проверка наличия резервирования под заказ с обособленным учетом при поступлении по ордеру с правом продажи
	ПроверитьРезервИВидПоступления(ТаблицаПоТаре, "Возвратная тара", Заголовок, Отказ);
	
	// Нельзя резервировать возвратную тару под заказ покупателя с обособленным учетом
	УправлениеЗаказами.ПроверитьРезервированиеТарыПодЗаказСОбособленнымУчетом(ЭтотОбъект,"Заказ", ложь, ,Отказ, Заголовок);													   

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара()

// Проверяет правильность заполнения строк табличной части "Оборудование".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиОборудование(ТаблицаПоОборудованию, СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Номенклатура, Количество");
	
	// Склад в ТЧ всегда должен быть заполнен, иначе проведение будет неправильным.
	СтруктураОбязательныхПолей.Вставить("Склад");
	
	Если УправлениеЗаказами.ПроверятьЗаказВТабличнойЧасти(ВидОперации, ДоговорКонтрагента, "Поступление") Тогда
		Если ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку Тогда
			СтруктураОбязательныхПолей.Вставить("ЗаказПоставщику", "Не заполнено значение реквизита ""Заказ покупателя""!");
		Иначе
			СтруктураОбязательныхПолей.Вставить("ЗаказПоставщику");
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ВидПоступления = Перечисления.ВидыПоступленияТоваров.ПоОрдеру Тогда
		СтруктураОбязательныхПолей.Вставить("ПриходныйОрдер");
	КонецЕсли;

	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Оборудование", СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	// Реквизиты Заказов "Организация", "Контрагент", "Договор контрагента" должны совпадать с реквизитами из шапки.
	УправлениеЗаказами.ПроверитьРеквизитыЗаказов(ЭтотОбъект, "Оборудование", "ЗаказПоставщику", Отказ, Заголовок);


КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиОборудование()

// Проверяет правильность заполнения строк табличной части "Оборудование".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиОбъектыСтроительства(ТаблицаПоОбъектамСтроительства, СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("ОбъектСтроительства, СпособСтроительства, СтатьяЗатрат, Сумма");

	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		СтруктураОбязательныхПолей.Вставить("СчетУчетаБУ");
		Если НЕ НДСВключенВСтоимость Тогда
			СтруктураОбязательныхПолей.Вставить("СчетУчетаНДС");
		КонецЕсли;
		
		Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
			СтруктураОбязательныхПолей.Вставить("СчетУчетаНУ");
		КонецЕсли;
		
	КонецЕсли;
	
	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ОбъектыСтроительства", СтруктураОбязательныхПолей, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиОбъектыСтроительства()

// Функция удаляет из исходной таблицы строки в которых сброшен флаг БезПраваПродажи
// Возвращается КОПИЯ исходной таблицы.
//
Функция УдалитьСтрокиБезПраваПродажи(ТабТовары)

	ТаблицаБезПраваПродажи = ТабТовары.Скопировать();
	
	// Сначала удалим из таблицы строки, по которым не надо списывать резерв.
	Сч = 0;
	Пока Сч < ТаблицаБезПраваПродажи.Количество() Цикл

		СтрокаТаблицы = ТаблицаБезПраваПродажи.Получить(Сч);
		Если Не СтрокаТаблицы.БезПраваПродажи Тогда
			ТаблицаБезПраваПродажи.Удалить(СтрокаТаблицы);
		Иначе
			Сч = Сч + 1;
		КонецЕсли;

	КонецЦикла;
	
	Возврат ТаблицаБезПраваПродажи;
	
КонецФункции // УдалитьСтрокиБезПраваПродажи()

// Функция удаляет из исходной таблицы строки для которых не надо делать размещение под заказ
// Возвращается КОПИЯ исходной таблицы.
//
Функция УдалитьСтрокиНеТребующиеРазмещенияВЗаказе(ТабТовары)

	ТаблицаПоТоварамРазмещение = ТабТовары.Скопировать();
	Сч = 0;
	Пока Сч < ТаблицаПоТоварамРазмещение.Количество() Цикл
		СтрокаТаблицы = ТаблицаПоТоварамРазмещение.Получить(Сч);
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ЗаказПокупателя)
		 ИЛИ НЕ ЗначениеЗаполнено(СтрокаТаблицы.ЗаказПоставщику) Тогда
			ТаблицаПоТоварамРазмещение.Удалить(СтрокаТаблицы);
		Иначе
			Сч = Сч + 1;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТаблицаПоТоварамРазмещение;
	
КонецФункции // УдалитьСтрокиНеТребующиеРазмещенияВЗаказе()

// Процедура удаляет строки из таблицы значений с пустым заказом или с внутренним заказом (по которым не надо делать резерв)
//
Процедура УдалитьСтрокиБезЗаказаДляРезерва(ТаблицаПоТоварамЗаказамПокупателей)
	
	Сч = 0;
	Пока Сч < ТаблицаПоТоварамЗаказамПокупателей.Количество() Цикл
		СтрокаТаблицы = ТаблицаПоТоварамЗаказамПокупателей.Получить(Сч);
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ЗаказПокупателя)
		 ИЛИ (ТипЗнч(СтрокаТаблицы.ЗаказПокупателя) = Тип("ДокументСсылка.ВнутреннийЗаказ") // Считается исполнением внутреннего заказа.
		   И  СтрокаТаблицы.ЗаказПокупателя.Заказчик = СтрокаТаблицы.Склад) Тогда             // Резерв в это случае делать не надо.
			ТаблицаПоТоварамЗаказамПокупателей.Удалить(СтрокаТаблицы);
		Иначе
			Сч = Сч + 1;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // УдалитьСтрокиБезЗаказаДляРезерва()

Процедура ОпределитьСделкуВСтрокахТаблицыЗначений(ТаблицыДанныхДокумента, ИмяТаблицы, ИмяКолонкиСделка, СтруктураШапкиДокумента)
	
	Если СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом Тогда
		//сделку надо очистить
		ТаблицыДанныхДокумента[ИмяТаблицы].ЗаполнитьЗначения(неопределено,ИмяКолонкиСделка);
	ИначеЕсли СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
		//сделку надо взять из шапки документа
		ТаблицыДанныхДокумента[ИмяТаблицы].ЗаполнитьЗначения(УправлениеВзаиморасчетами.ОпределитьСделку(ЭтотОбъект, СтруктураШапкиДокумента),ИмяКолонкиСделка);
	КонецЕсли;
КонецПроцедуры

Процедура ДвиженияПоРегиструТоварыОрганизацийРегл(РежимПроведения, ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоОборудованию, Отказ, Заголовок, СтруктураШапкиДокумента)
	
	Если НЕ СтруктураШапкиДокумента.ОтражатьВРегламентированномУчете Тогда
		Возврат;
	КонецЕсли;

	// ТОВАРЫ ПО РЕГИСТРУ ТоварыОрганизаций.
	НаборДвижений = Движения.ТоварыОрганизаций;

	Если ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад Тогда
		
		// Получим таблицу значений, совпадающую со структурой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.Выгрузить();
		
		// Заполним таблицу движений.
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварам, ТаблицаДвижений);
		
		// Недостающие поля.
		ТаблицаДвижений.ЗаполнитьЗначения(Организация, "Организация");
		ТаблицаДвижений.ЗаполнитьЗначения(Неопределено,"Комиссионер");
		ТаблицаДвижений.ЗаполнитьЗначения(Справочники.Качество.Новый, "Качество");
		
		Если Не СтруктураШапкиДокумента.ВестиУчетТоваровОрганизацийВРазрезеСкладов Тогда
			ТаблицаДвижений.ЗаполнитьЗначения(Неопределено, "Склад");
		КонецЕсли;
			
		
		НаборДвижений.мПериод            = Дата;
		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
		
		Если Не Отказ Тогда
			Движения.ТоварыОрганизаций.ВыполнитьПриход();
		КонецЕсли;
			
	Иначе // По ордеру

		// По ордеру нужно сторнировать движения по товарам организаций,
		// если в ордере была указана не та организация.
		// Удалим строки, по которым не нужно делать движений (организации совпадают).
		КопияТаблицыТоваров = ТаблицаПоТоварам.Скопировать();
		КолвоЭлементовКоллекции = КопияТаблицыТоваров.Количество();
		Для ОбратныйИндекс = 1 По КолвоЭлементовКоллекции Цикл
			ЭлементКоллекции = КопияТаблицыТоваров[КолвоЭлементовКоллекции - ОбратныйИндекс];
			Если ЭлементКоллекции.ОрганизацияДокументаПолучения = СтруктураШапкиДокумента.Организация Тогда
				КопияТаблицыТоваров.Удалить(ЭлементКоллекции);
			КонецЕсли;
		КонецЦикла;

		Если КопияТаблицыТоваров.Количество() > 0 Тогда // Есть что проводить.

			// Вначале сторнируем
			ТаблицаДвижений = НаборДвижений.Выгрузить();
			ТаблицаДвижений.Очистить();

			// Заполним таблицу движений.
			ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(КопияТаблицыТоваров, ТаблицаДвижений);

			// Недостающие поля.
			ТаблицаДвижений.ЗагрузитьКолонку(КопияТаблицыТоваров.ВыгрузитьКолонку("ОрганизацияДокументаПолучения"), "Организация");
			ТаблицаДвижений.ЗаполнитьЗначения(Неопределено,"Комиссионер");
			ТаблицаДвижений.ЗаполнитьЗначения(Справочники.Качество.Новый, "Качество");

			НаборДвижений.мПериод            = Дата;
			НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

			Если Не Отказ Тогда
				Движения.ТоварыОрганизаций.ВыполнитьРасход();
			КонецЕсли;

			// Теперь сделаем движения с правильной организацией.
			ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация,"Организация");
			НаборДвижений.мПериод            = Дата;
			НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

			Если Не Отказ Тогда
				Движения.ТоварыОрганизаций.ВыполнитьПриход();
			КонецЕсли;

		КонецЕсли;
	КонецЕсли;
	
		
	// ОБОРУДОВАНИЕ ПО РЕГИСТРУ ТоварыОрганизаций.
	НаборДвижений = Движения.ТоварыОрганизаций;
	
	// Получим таблицу значений, совпадающую со структурой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	ТаблицаДвижений.Очистить();
	
	// Заполним таблицу движений.
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоОборудованию, ТаблицаДвижений);
	
	// Недостающие поля.
	ТаблицаДвижений.ЗаполнитьЗначения(Организация, "Организация");
	ТаблицаДвижений.ЗаполнитьЗначения(Неопределено,"Комиссионер");
	ТаблицаДвижений.ЗаполнитьЗначения(Справочники.Качество.Новый, "Качество");
	
	Если Не СтруктураШапкиДокумента.ВестиУчетТоваровОрганизацийВРазрезеСкладов Тогда
		ТаблицаДвижений.ЗаполнитьЗначения(Неопределено, "Склад");
	КонецЕсли;
	
	НаборДвижений.мПериод            = Дата;
	НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
	
	Если Не Отказ Тогда
		Движения.ТоварыОрганизаций.ВыполнитьПриход();
	КонецЕсли;

КонецПроцедуры // ДвиженияПоРегиструТоварыОрганизацийРегл()


// Проводит табличные части "Товары" и "Возвратная тара" по регистрам
//
// Параметры:
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  ТаблицаПоТаре             - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ТоварыИТараПоРегистрамОстатковИПартийУпр(РежимПроведения, ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоОборудованию, ТаблицаПоУслугам, ТаблицаПоОбъектамСтроительства, Отказ, Заголовок, СтруктураШапкиДокумента)

	// Определим код операции движений по регистру партий
	Если ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия Тогда
		Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
			КодОперацииПартииТоваров = Перечисления.КодыОперацийПартииТоваров.ПоступлениеНаКомиссию;
		Иначе
			КодОперацииПартииТоваров = Перечисления.КодыОперацийПартииТоваров.Поступление;
		КонецЕсли;
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку Тогда
		КодОперацииПартииТоваров = Перечисления.КодыОперацийПартииТоваров.ПоступлениеВПереработку;
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Оборудование Тогда
		КодОперацииПартииТоваров = Перечисления.КодыОперацийПартииТоваров.ПоступлениеОборудования;
	Иначе
		КодОперацииПартииТоваров = Неопределено;
	КонецЕсли;
	
	// ТОВАРЫ, ТАРА И ОБОРУДОВАНИЕ ПО РЕГИСТРУ ТоварыНаСкладах.
	Если ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад Тогда
		
		ОтборСкладОптовый    = Новый Структура("ВидСкладаРазмещения", Перечисления.ВидыСкладов.Оптовый);
		ОтборСкладРозничный  = Новый Структура("ВидСкладаРазмещения", Перечисления.ВидыСкладов.Розничный);
			
		ТаблицаТоварыОпт     = ОбщегоНазначения.ОтобратьСтрокиПоКритериям(ТаблицаПоТоварам, ОтборСкладОптовый  ).Выгрузить();
		ТаблицаТараОпт       = ОбщегоНазначения.ОтобратьСтрокиПоКритериям(ТаблицаПоТаре,    ОтборСкладОптовый  ).Выгрузить();
		ТаблицаТоварыРозница = ОбщегоНазначения.ОтобратьСтрокиПоКритериям(ТаблицаПоТоварам, ОтборСкладРозничный).Выгрузить();
		ТаблицаТараРозница   = ОбщегоНазначения.ОтобратьСтрокиПоКритериям(ТаблицаПоТаре,    ОтборСкладРозничный).Выгрузить();
			
		СтруктТаблицДокументаОпт = Новый Структура;
		СтруктТаблицДокументаОпт.Вставить("ТаблицаПоТоварам",      ТаблицаТоварыОпт);
		СтруктТаблицДокументаОпт.Вставить("ТаблицаПоТаре",         ТаблицаТараОпт);
		СтруктТаблицДокументаОпт.Вставить("ТаблицаПоОборудованию", ТаблицаПоОборудованию);
				
		СтруктТаблицДокументаРозница = Новый Структура;
		СтруктТаблицДокументаРозница.Вставить("ТаблицаПоТоварам", ТаблицаТоварыРозница);
		СтруктТаблицДокументаРозница.Вставить("ТаблицаПоТаре",    ТаблицаТараРозница);
			
		ТаблицыДанныхДокументаОпт     = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру( Движения.ТоварыНаСкладах, СтруктТаблицДокументаОпт);
		ТаблицыДанныхДокументаРозница = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру( Движения.ТоварыВРознице, СтруктТаблицДокументаРозница);
				
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокументаОпт,     "Качество", Справочники.Качество.Новый);
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокументаРозница, "Качество", Справочники.Качество.Новый);
			
		ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ТоварыНаСкладах, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокументаОпт,     Дата);
		ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ТоварыВРознице, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокументаРозница, Дата);
			
	Иначе // Приход по ордеру

		// Контроль остатков товара
		Если Товары.Количество() <> 0 Тогда
			ПроцедурыКонтроляОстатков.ТоварыКПолучениюНаСкладыКонтрольОстатков("Товары", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
		КонецЕсли;
		Если ВозвратнаяТара.Количество() <> 0 Тогда
			ПроцедурыКонтроляОстатков.ТоварыКПолучениюНаСкладыКонтрольОстатков("ВозвратнаяТара", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
		КонецЕсли;
		Если Оборудование.Количество() <> 0 Тогда
			ПроцедурыКонтроляОстатков.ТоварыКПолучениюНаСкладыКонтрольОстатков("Оборудование", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
		КонецЕсли;
			
		НаборДвижений = Движения.ТоварыКПолучениюНаСклады;
		
		Если НЕ Отказ Тогда
				
			// Подготовка таблицы товаров к получению
			ТаблицаТоварыКПолучению = ТаблицаПоТоварам.Скопировать();
			ТаблицаТоварыКПолучению.Колонки.Добавить("ДокументРезерва");
				
			// Документ резерва - приходный ордрер без права продажи.
			Для каждого СтрокаТаблицы из ТаблицаТоварыКПолучению Цикл
				Если СтрокаТаблицы.БезПраваПродажи Тогда
					СтрокаТаблицы.ДокументРезерва = СтрокаТаблицы.ДокументПолучения;
				КонецЕсли;
			КонецЦикла;
				
			// Подготовка таблицы тара к получению
			ТаблицаТараКПолучению = ТаблицаПоТаре.Скопировать();
			ТаблицаТараКПолучению.Колонки.Добавить("ДокументРезерва");
				
			// Документ резерва - приходный ордрер без права продажи.
			Для каждого СтрокаТаблицы из ТаблицаТараКПолучению Цикл
				Если СтрокаТаблицы.БезПраваПродажи Тогда
					СтрокаТаблицы.ДокументРезерва = СтрокаТаблицы.ДокументПолучения;
				КонецЕсли;
			КонецЦикла;
				
			// Движение по товарам к получению
			СтруктТаблицДокумента = Новый Структура;
			СтруктТаблицДокумента.Вставить("ТаблицаТоварыКПолучению", ТаблицаТоварыКПолучению);
			СтруктТаблицДокумента.Вставить("ТаблицаТараКПолучению",   ТаблицаТараКПолучению);
			СтруктТаблицДокумента.Вставить("ТаблицаОборудование",     ТаблицаПоОборудованию);
				
			ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру( Движения.ТоварыКПолучениюНаСклады, СтруктТаблицДокумента);
					
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Качество",          Справочники.Качество.Новый);
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПартии",      Перечисления.СтатусыПартийТоваров.Купленный,      "ТаблицаТоварыКПолучению, ТаблицаОборудование");
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПартии",      Перечисления.СтатусыПартийТоваров.ВозвратнаяТара, "ТаблицаТараКПолучению");
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ДокументПолучения", СкладОрдер,                                       "ТаблицаОборудование");
				
			ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ТоварыКПолучениюНаСклады, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);
			
		КонецЕсли;
			
	КонецЕсли;
	
	УправлениеЗапасамиПартионныйУчет.ВыполнитьПриходПоРегистрамПартий(
		?(ДополнительныеСвойства.Свойство("ТаблицаСтаройРегистрацииВПоследовательности"),ДополнительныеСвойства.ТаблицаСтаройРегистрацииВПоследовательности,Неопределено),
		СтруктураШапкиДокумента, Отказ, ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоОборудованию,СтруктураШапкиДокумента.ОтражатьВУправленческомУчете);
	
	// ТОВАРЫ, УСЛУГИ И ОБОРУДОВАНИЕ ПО РЕГИСТРУ Закупки.
	Если НЕ СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку Тогда
	
		КопияТаблицыТоваров = ТаблицаПоТоварам.Скопировать();
		КопияТаблицыТоваров.ЗагрузитьКолонку(КопияТаблицыТоваров.ВыгрузитьКолонку("СуммаУпр"), "Стоимость");
		
		КопияТаблицыУслуги = ТаблицаПоУслугам.Скопировать();
		КопияТаблицыУслуги.ЗагрузитьКолонку(КопияТаблицыУслуги.ВыгрузитьКолонку("СуммаУпр"), "Стоимость");

		КопияТаблицыОборудование = ТаблицаПоОборудованию.Скопировать();
		КопияТаблицыОборудование.ЗагрузитьКолонку(КопияТаблицыОборудование.ВыгрузитьКолонку("СуммаУпр"), "Стоимость");

		КопияТаблицыТоваров.Колонки.НДС   .Имя = "_НДС";
		КопияТаблицыТоваров.Колонки.НДСУпр.Имя = "НДС";
		
		КопияТаблицыУслуги.Колонки.НДС   .Имя = "_НДС";
		КопияТаблицыУслуги.Колонки.НДСУпр.Имя = "НДС";
		
		КопияТаблицыОборудование.Колонки.НДС   .Имя = "_НДС";
		КопияТаблицыОборудование.Колонки.НДСУпр.Имя = "НДС";
		
		Если СтруктураШапкиДокумента.ВедениеУчетаПоПроектам Тогда
				
			// В этом случае таблицы документа обрабатываются особым образом
			ТаблицаДвижений = Движения.Закупки.Выгрузить();
			ТаблицаДвижений.Очистить();
			ТаблицаДвиженийТовары       = ТаблицаДвижений.Скопировать();
			ТаблицаДвиженийУслуги       = ТаблицаДвижений.Скопировать();
			ТаблицаДвиженийОборудование = ТаблицаДвижений.Скопировать();
				
			УправлениеПроектами.ОтразитьДвиженияПоПроектам(КопияТаблицыТоваров,      ТаблицаДвиженийТовары,       Проект, Дата, "Закупки");
			УправлениеПроектами.ОтразитьДвиженияПоПроектам(КопияТаблицыУслуги,       ТаблицаДвиженийУслуги,       Проект, Дата, "Закупки");
			УправлениеПроектами.ОтразитьДвиженияПоПроектам(КопияТаблицыОборудование, ТаблицаДвиженийОборудование, Проект, Дата, "Закупки");
				
			// Вставляем уже подготовленные таблицы движений
			ТаблицыДанныхДокумента = Новый Структура;
			ТаблицыДанныхДокумента.Вставить("ТаблицаПоТоварам",      ТаблицаДвиженийТовары);
			ТаблицыДанныхДокумента.Вставить("ТаблицаПоУслугам",      ТаблицаДвиженийУслуги);
			ТаблицыДанныхДокумента.Вставить("ТаблицаПоОборудованию", ТаблицаДвиженийОборудование);
							
		Иначе
							
			СтруктТаблицДокумента = Новый Структура;
			СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам",      КопияТаблицыТоваров);
			СтруктТаблицДокумента.Вставить("ТаблицаПоУслугам",      КопияТаблицыУслуги);
			СтруктТаблицДокумента.Вставить("ТаблицаПоОборудованию", КопияТаблицыОборудование);
				
			ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(Движения.Закупки, СтруктТаблицДокумента);
							
		КонецЕсли;
						
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПартии",       УправлениеЗапасамиПартионныйУчет.ОпределитьСтатусПартииПриходаУпр(СтруктураШапкиДокумента));
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ДоговорКонтрагента", ДоговорКонтрагента);
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Организация",        Организация);
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Контрагент",         Контрагент);
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ДокументЗакупки",    Ссылка);
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Подразделение",      Подразделение, "ТаблицаПоТоварам");
		Если СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ЗаказПоставщику", СтруктураШапкиДокумента.Сделка);
		КонецЕсли;

		ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.Закупки, Неопределено, ТаблицыДанныхДокумента, Дата);
		
	КонецЕсли;	

КонецПроцедуры // ТоварыИТараПоРегистрамОстатковИПартийУпр()

// Проводит табличные части "Товары" и "Возвратная тара" по регистрам
//
// Параметры:
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  ТаблицаПоТаре             - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ТоварыИТараПоРегистрамОстатковИПартийРегл(РежимПроведения, ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоОборудованию, Отказ, Заголовок, СтруктураШапкиДокумента)

	// Определим код операции движений по регистру партий
	Если ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия Тогда
		Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
			КодОперацииПартииТоваров = Перечисления.КодыОперацийПартииТоваров.ПоступлениеНаКомиссию;
		Иначе
			КодОперацииПартииТоваров = Перечисления.КодыОперацийПартииТоваров.Поступление;
		КонецЕсли;
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку Тогда
		КодОперацииПартииТоваров = Перечисления.КодыОперацийПартииТоваров.ПоступлениеВПереработку;
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Оборудование Тогда
		КодОперацииПартииТоваров = Перечисления.КодыОперацийПартииТоваров.Поступление;
	Иначе
		КодОперацииПартииТоваров = Неопределено;
	КонецЕсли;
		
	УправлениеЗапасамиПартионныйУчет.ВыполнитьПриходПоРегистрамПартий(
		?(ДополнительныеСвойства.Свойство("ТаблицаСтаройРегистрацииВПоследовательности"),ДополнительныеСвойства.ТаблицаСтаройРегистрацииВПоследовательности,Неопределено),
		СтруктураШапкиДокумента, Отказ, ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоОборудованию,, СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете, СтруктураШапкиДокумента.ОтражатьВНалоговомУчете ИЛИ СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН);

КонецПроцедуры // ТоварыИТараПоРегистрамОстатковИПартий()

// По результату запроса по шапке документа формируем движения по регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  ТаблицаПоТаре             - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, 
	                          ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоУслугам, ТаблицаПоОборудованию,
	                          ТаблицаПоОбъектамСтроительства, ТаблицаПоВзаиморасчетам, ТаблицаПоРасчетам,
							  Отказ, Заголовок);

	ДвиженияПоРегистрамУпр(РежимПроведения, СтруктураШапкиДокумента, 
	                          ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоУслугам, ТаблицаПоОборудованию,
	                          ТаблицаПоОбъектамСтроительства, ТаблицаПоВзаиморасчетам, ТаблицаПоРасчетам,
							  Отказ, Заголовок);
							  
	Если НЕ СтруктураШапкиДокумента.СпособВеденияПартионногоУчетаПоОрганизации = Перечисления.СпособыВеденияПартионногоУчетаПоОрганизациям.НеВедется Тогда
		ДвиженияПоРегиструСписанныеТовары(СтруктураШапкиДокумента, ТаблицаПоТоварам, 
	    	                      ТаблицаПоТаре, Отказ, Заголовок);
	КонецЕсли;							  
							  
	// Движения по регистрам подсистемы НДС.
	Если ВидОперации <> Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку
		И СтруктураШапкиДокумента.ВидДоговора <> Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
		
		ТаблицыДокумента = Новый Структура();
		ТаблицыДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварам);
		ТаблицыДокумента.Вставить("ТаблицаПоУслугам", ТаблицаПоУслугам);
		ТаблицыДокумента.Вставить("ТаблицаПоОборудованию", ТаблицаПоОборудованию);
		ТаблицыДокумента.Вставить("ТаблицаПоОбъектамСтроительства", ТаблицаПоОбъектамСтроительства);
		
		// Выполнить движения по спецрегистрам подсистемы учета НДС
		ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ТаблицыДокумента, Отказ);
		
	КонецЕсли;
	
	// Формирование движений по отражению затрат.
	УправлениеЗатратами.ДвиженияПоПрочимЗатратам(
		СтруктураШапкиДокумента, 
		ТаблицаПоУслугам
	);

	ДвиженияПоРегиструТоварыОрганизацийРегл(РежимПроведения, 
	                          ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоОборудованию, 
	                          Отказ, Заголовок, СтруктураШапкиДокумента);
							  
	ДвиженияПоРегистрамОперативныхВзаиморасчетов(РежимПроведения, ТаблицаПоВзаиморасчетам,
                                                 Отказ, Заголовок, СтруктураШапкиДокумента);
												 
	ПроводкиНУ = ?(СтруктураШапкиДокумента.ОтражатьВНалоговомУчете,Движения.Налоговый,Неопределено);

	ДвиженияПоРегистрамРегл(РежимПроведения, СтруктураШапкиДокумента, 
	                          ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоУслугам, ТаблицаПоОборудованию,
	                          ТаблицаПоОбъектамСтроительства, ТаблицаПоВзаиморасчетам, Отказ, Заголовок,ПроводкиНУ);
							  
	ДвиженияПоРегистрамУСНРегл(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугам, 
	                          ТаблицаПоОборудованию, Отказ, Заголовок);
							  
	// По партиям, оприходованным по ордеру с правом продажи, возможно следует выполнить 
	// корректировку списания
	Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете И ВидПоступления = Перечисления.ВидыПоступленияТоваров.ПоОрдеру тогда

		УправлениеЗапасамиПартионныйУчет.ДвижениеПартийТоваров(Ссылка, Движения.СписанныеТовары.Выгрузить());

	КонецЕсли;
	
    // Разницы по ПБУ18/02
    Если ВидОперации <> Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку Тогда
		Если ТаблицаПоУслугам.Количество() > 0 Тогда
			ДвиженияПоРазницамПоУслугам(СтруктураШапкиДокумента, ТаблицаПоУслугам,ПроводкиНУ);
		КонецЕсли;
	КонецЕсли;
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
		Движения.Налоговый.Записать(Ложь);	
    КонецЕсли;

	
КонецПроцедуры // ДвиженияПоРегистрам()

// По результату запроса по шапке документа формируем движения по регистрам для целей упр. учета.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  ТаблицаПоТаре             - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  ТаблицаПоУслугам          - таблица значений, содержащая данные для проведения и проверки ТЧ "Услуги",
//  ТаблицаПоОборудованию     - таблица значений, содержащая данные для проведения и проверки ТЧ "Оборудование",
//  ТаблицаПоОбъектамСтроительства - таблица значений, содержащая данные для проведения и проверки ТЧ "Объекты строительства",
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрамУпр(РежимПроведения, СтруктураШапкиДокумента, 
							ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоУслугам, ТаблицаПоОборудованию,
							ТаблицаПоОбъектамСтроительства, ТаблицаПоВзаиморасчетам, ТаблицаПоРасчетам,
							Отказ, Заголовок);
	Если Не СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ВидОперации    = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия
	   И СтруктураШапкиДокумента.ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад
	   И  (СтруктураШапкиДокумента.ВидСклада = Перечисления.ВидыСкладов.НТТ
	   ИЛИ СтруктураШапкиДокумента.ВидСклада = Перечисления.ВидыСкладов.Розничный) Тогда
		УправлениеСертификациейНоменклатуры.ПроверитьНаСертификацию( ТаблицаПоТоварам.ВыгрузитьКолонку("СерияНоменклатуры"), Дата, Ложь, Заголовок);
	КонецЕсли;
	
	УправлениеВзаиморасчетами.ВыполнитьДвиженияПоРегистрамУпрВзаиморасчетов(ЭтотОбъект, СтруктураШапкиДокумента, 
		        мСтруктураПараметровВзаиморасчетов, ТаблицаПоВзаиморасчетам, ТаблицаПоРасчетам, 
		        ВидДвиженияНакопления.Расход, Отказ, Заголовок);
				
	// ТОВАРЫ ПО РЕГИСТРУ ТоварыНаСкладах.
	// ТОВАРЫ ПО РЕГИСТРУ ПартииТоваровНаСкладах.
	// ТАРА ПО РЕГИСТРУ ТоварыНаСкладах.
	// ТАРА ПО РЕГИСТРУ ПартииТоваровНаСкладах.

	ТоварыИТараПоРегистрамОстатковИПартийУпр(РежимПроведения, ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоОборудованию, ТаблицаПоУслугам, ТаблицаПоОбъектамСтроительства, Отказ, Заголовок, СтруктураШапкиДокумента);

	Если НЕ Отказ Тогда

		// ТОВАР, ТАРА ПО РЕГИСТРУ ТоварыПолученные.
		СтруктТаблицДокумента = Новый Структура;
		ТабИменТара = неопределено;
		ТабИменТовары = Неопределено;

		ОбщегоНазначения.ПереименоватьКолонкуТаблицыЗначений(ТаблицаПоТаре, ТабИменТара, "ЗаказПоставщику", "Сделка");

		СтруктТаблицДокумента.Вставить("ТаблицаПоТаре", ТаблицаПоТаре);
		

		Если (ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия 
			И СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом)
		  ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку Тогда
		  Если ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку Тогда 
			  ОбщегоНазначения.ПереименоватьКолонкуТаблицыЗначений(ТаблицаПоТоварам, ТабИменТовары, "ЗаказПокупателя", "Сделка");
		  Иначе
			  ОбщегоНазначения.ПереименоватьКолонкуТаблицыЗначений(ТаблицаПоТоварам, ТабИменТовары, "ЗаказПоставщику", "Сделка");
		  КонецЕсли;


			СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварам);
			
		КонецЕсли;
		
		ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(Движения.ТоварыПолученные, СтруктТаблицДокумента);
		
		ОбщегоНазначения.ВосстановитьИменаКолонокТаблицыЗначений(ТаблицаПоТаре, ТабИменТара);
		Если ТабИменТовары<>неопределено Тогда
			ОбщегоНазначения.ВосстановитьИменаКолонокТаблицыЗначений(ТаблицаПоТоварам, ТабИменТовары);
		КонецЕсли;
		
		
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ДоговорКонтрагента", ДоговорКонтрагента);
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Контрагент",         Контрагент);
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Организация",        Организация);
		ОпределитьСделкуВСтрокахТаблицыЗначений(ТаблицыДанныхДокумента, "ТаблицаПоТаре", "Сделка", СтруктураШапкиДокумента);
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПолучения",    Перечисления.СтатусыПолученияПередачиТоваров.ВозвратнаяТара,     "ТаблицаПоТаре");
		
		Если ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия 
		   И СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
			ОпределитьСделкуВСтрокахТаблицыЗначений(ТаблицыДанныхДокумента, "ТаблицаПоТоварам", "Сделка", СтруктураШапкиДокумента);
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПолучения", Перечисления.СтатусыПолученияПередачиТоваров.НаКомиссию, "ТаблицаПоТоварам");
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку Тогда
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПолучения", Перечисления.СтатусыПолученияПередачиТоваров.ВПереработку, "ТаблицаПоТоварам");
		КонецЕсли;
		
		ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ТоварыПолученные, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокумента, Дата);
		
		// ТОВАР, ТАРА И ОБОРУДОВАНИЕ ПО РЕГИСТРУ ЗаказыПоставщикам.
		СтруктТаблицДокумента = Новый Структура;
		СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам",      ТаблицаПоТоварам);
		СтруктТаблицДокумента.Вставить("ТаблицаПоТаре",         ТаблицаПоТаре);
		СтруктТаблицДокумента.Вставить("ТаблицаПоОборудованию", ТаблицаПоОборудованию);
		Если ВидОперации <> Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку Тогда
			СтруктТаблицДокумента.Вставить("ТаблицаПоУслугам",        ТаблицаПоУслугам);
		КонецЕсли;
			
		ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(Движения.ЗаказыПоставщикам, СтруктТаблицДокумента);
		Если ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку Тогда
			//при поступлении материалов в переработку должны сформироваться движения, значение измерения ЗаказПоставщику = заказ покупателя на переработку
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ЗаказПоставщику", СтруктураШапкиДокумента.Сделка, "ТаблицаПоТоварам");
        КонецЕсли;

		ОбщегоНазначения.УдалитьСтрокиИзТаблицДокумента(ТаблицыДанныхДокумента, "ЗаказПоставщику");
			
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ДоговорКонтрагента", СтруктураШапкиДокумента.ДоговорКонтрагента);
				
		СтатусПартии = ?(ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку, Перечисления.СтатусыПартийТоваров.ВПереработку, Перечисления.СтатусыПартийТоваров.Купленный);
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПартии", СтатусПартии,                                     "ТаблицаПоТоварам");
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПартии", Перечисления.СтатусыПартийТоваров.ВозвратнаяТара, "ТаблицаПоТаре");
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПартии", Перечисления.СтатусыПартийТоваров.Оборудование,   "ТаблицаПоОборудованию");
		Если ВидОперации <> Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку Тогда
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПартии", СтатусПартии, "ТаблицаПоУслугам");
		КонецЕсли;
					
		ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ЗаказыПоставщикам, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);
	
	КонецЕсли;
	
	// Снятие резерва по приходному ордеру
	Если СтруктураШапкиДокумента.ВидПоступления = Перечисления.ВидыПоступленияТоваров.ПоОрдеру И НЕ Отказ Тогда

		// Сначала удалим из таблицы строки, по которым не надо списывать резерв.
		ТаблицаПоТоварамПоОрдерамБезПраваПродажи = УдалитьСтрокиБезПраваПродажи(ТаблицаПоТоварам);
		ТаблицаПоТоварамПоОрдерамБезПраваПродажи.Колонки.ДокументПолучения.Имя = "ДокументРезерва";
		
		ТаблицаПоТареПоОрдерамБезПраваПродажи = УдалитьСтрокиБезПраваПродажи(ТаблицаПоТаре);
		ТаблицаПоТареПоОрдерамБезПраваПродажи.Колонки.ДокументПолучения.Имя = "ДокументРезерва";
		
		СтруктТаблицДокумента = Новый Структура;
		СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварамПоОрдерамБезПраваПродажи);
		СтруктТаблицДокумента.Вставить("ТаблицаПоТаре",    ТаблицаПоТареПоОрдерамБезПраваПродажи);
		
		ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(Движения.ТоварыВРезервеНаСкладах, СтруктТаблицДокумента);

		ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ТоварыВРезервеНаСкладах, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);
		
	КонецЕсли;
	
	// Резервирование по заказам покупателей
		
	// Сначала удалим из таблицы строки, по которым не надо ничего резервировать
	// (реквизит ЗаказПокупателя пуст)
	ТаблицаПоТоварамЗаказамПокупателей = ТаблицаПоТоварам.Скопировать();
	
	//для вида операции ВПереработку реквизит ЗаказПокупателя всегда заполнен, поэтому вид операции не проверяем
	УдалитьСтрокиБезЗаказаДляРезерва(ТаблицаПоТоварамЗаказамПокупателей);

	// Теперь зарезервируем возвратную тару
	// Сначала удалим из таблицы строки, по которым не надо ничего резервировать
	// (реквизит ЗаказПокупателя пуст)
	ТаблицаПоТареЗаказамПокупателей = ТаблицаПоТаре.Скопировать();
	УдалитьСтрокиБезЗаказаДляРезерва(ТаблицаПоТареЗаказамПокупателей);
	
	Если ТаблицаПоТоварамЗаказамПокупателей.Количество() > 0 ИЛИ ТаблицаПоТареЗаказамПокупателей.Количество() > 0 Тогда

		Если ВидПоступления = Перечисления.ВидыПоступленияТоваров.ПоОрдеру Тогда
			// Контроль остатков товара
			Если ТаблицаПоТоварамЗаказамПокупателей.Количество() <> 0 Тогда
				ПроцедурыКонтроляОстатков.ТоварыВРезервеНаСкладахКонтрольОстатков("Товары", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
			КонецЕсли;
			Если ТаблицаПоТареЗаказамПокупателей.Количество() <> 0 Тогда
				ПроцедурыКонтроляОстатков.ТоварыВРезервеНаСкладахКонтрольОстатков("ВозвратнаяТара", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ Отказ Тогда
			
			ТаблицаПоТоварамЗаказамПокупателей.Колонки.ЗаказПокупателя.Имя = "ДокументРезерва";
			ТаблицаПоТареЗаказамПокупателей   .Колонки.ЗаказПокупателя.Имя = "ДокументРезерва";
			
			СтруктТаблицДокумента = Новый Структура;
			СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварамЗаказамПокупателей);
			СтруктТаблицДокумента.Вставить("ТаблицаПоТаре",    ТаблицаПоТареЗаказамПокупателей);
				
			ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(Движения.ТоварыВРезервеНаСкладах, СтруктТаблицДокумента);
			
			ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ТоварыВРезервеНаСкладах, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокумента, Дата);
		
		КонецЕсли;

	КонецЕсли;
	
	// Товары и тара по регистру "Размещение заказов покупателей"
	ТаблицаПоТоварамРазмещение = УдалитьСтрокиНеТребующиеРазмещенияВЗаказе(ТаблицаПоТоварам);
	ТаблицаПоТареРазмещение    = УдалитьСтрокиНеТребующиеРазмещенияВЗаказе(ТаблицаПоТаре);
	
	Если ТаблицаПоТоварамРазмещение.Количество() > 0 ИЛИ ТаблицаПоТареРазмещение.Количество() > 0 Тогда
		
		Движения.РазмещениеЗаказовПокупателей.КонтрольОстатков(ЭтотОбъект, "Товары",         СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
		Движения.РазмещениеЗаказовПокупателей.КонтрольОстатков(ЭтотОбъект, "ВозвратнаяТара", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
		
		Если НЕ Отказ Тогда
		
			СтруктТаблицДокумента = Новый Структура;
			СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварамРазмещение);
			СтруктТаблицДокумента.Вставить("ТаблицаПоТаре",    ТаблицаПоТареРазмещение);
			
			ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(Движения.РазмещениеЗаказовПокупателей, СтруктТаблицДокумента);
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ТоварТара", Перечисления.ТоварТара.Товар, "ТаблицаПоТоварам");
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ТоварТара", Перечисления.ТоварТара.Тара,  "ТаблицаПоТаре");

			ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.РазмещениеЗаказовПокупателей, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);
			
		КонецЕсли;
		
	КонецЕсли;

	// Если установлен флаг РегистрироватьЦеныПоставщика, нужно зарегистрировать цены
	Если РегистрироватьЦеныПоставщика Тогда

		НаборДвижений = Движения.ЦеныНоменклатурыКонтрагентов;

		// Получим таблицу значений, совпадающую со структурой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.Выгрузить();
		ТаблицаДвижений.Очистить();

		ТаблицаПоТоварамЦены = ТаблицаПоТоварам.Скопировать();
		СпособЗаполненияЦен  = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов;

		// Пересчитаем цены, согласно флагу типа цен контрагентов (цена включает НДС)
		Если ТипЦен.ЦенаВключаетНДС Тогда
			Если НЕ СуммаВключаетНДС Тогда
				Для Каждого СтрокаТабличнойЧасти Из ТаблицаПоТоварамЦены Цикл
					СтрокаТабличнойЧасти.Цена = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(СтрокаТабличнойЧасти.Цена,
					                            СпособЗаполненияЦен, Ложь, Истина, Истина,
					                            УчетНДС.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
				КонецЦикла;
			КонецЕсли;
		Иначе
			Если СуммаВключаетНДС Тогда
				Для Каждого СтрокаТабличнойЧасти Из ТаблицаПоТоварамЦены Цикл
					СтрокаТабличнойЧасти.Цена = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(СтрокаТабличнойЧасти.Цена,
					                            СпособЗаполненияЦен, Истина, Ложь, Ложь,
					                            УчетНДС.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;

		// Удалим строки с одинаковым товаром и характеристикой.
		МассивСтрокДляУдаления = Новый Массив;
		СписокСвернутыхСтрок   = Новый СписокЗначений;

		Для Каждого СтрокаТаблицыПоТоварамЦены Из ТаблицаПоТоварамЦены Цикл
			СтруктураОтбора = Новый Структура;
			СтруктураОтбора.Вставить("Номенклатура", СтрокаТаблицыПоТоварамЦены.Номенклатура);
			СтруктураОтбора.Вставить("ХарактеристикаНоменклатуры", СтрокаТаблицыПоТоварамЦены.ХарактеристикаНоменклатуры);
			СтрокиПоТовару = ТаблицаПоТоварамЦены.НайтиСтроки(СтруктураОтбора);
			Если СтрокиПоТовару.Количество() > 0 Тогда //Есть несколько строк по товару.
				ПерваяСтрока = СтрокиПоТовару[0];
				Цена = 0;
				Для каждого СтрокаПоТовару Из СтрокиПоТовару Цикл
					Если СписокСвернутыхСтрок.НайтиПоЗначению(СтрокаПоТовару) = Неопределено Тогда
						СписокСвернутыхСтрок.Добавить(СтрокаПоТовару);
					Иначе
						Продолжить;
					КонецЕсли;
					Цена = Цена + СтрокаПоТовару.Цена/СтрокаПоТовару.Коэффициент;
					Если СтрокаПоТовару <> ПерваяСтрока Тогда
						МассивСтрокДляУдаления.Добавить(СтрокаПоТовару);
					КонецЕсли;
				КонецЦикла;
				Если Цена > 0 Тогда
					ПерваяСтрока.Цена = Цена / СтрокиПоТовару.Количество() * ПерваяСтрока.Коэффициент;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;

		Для Каждого СтрокаДляУдаления Из МассивСтрокДляУдаления Цикл
			ТаблицаПоТоварамЦены.Удалить(СтрокаДляУдаления);
		КонецЦикла;

		Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	Цены.Номенклатура КАК Номенклатура,
		|	Цены.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатурыКонтрагентов КАК Цены
		|ГДЕ
		|	Цены.Период = &ДатаЦен
		|	И Цены.ТипЦен = &ТипЦен
		|	И Цены.Номенклатура В (&СписокНоменклатуры)
		|");

		Запрос.УстановитьПараметр("ДатаЦен", НачалоДня(Дата));
		Запрос.УстановитьПараметр("ТипЦен", ТипЦен);
		Запрос.УстановитьПараметр("СписокНоменклатуры", ТаблицаПоТоварамЦены.ВыгрузитьКолонку("Номенклатура"));

		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("Номенклатура");
		СтруктураОтбора.Вставить("ХарактеристикаНоменклатуры");

		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			СтруктураОтбора.Номенклатура = Выборка.Номенклатура;
			СтруктураОтбора.ХарактеристикаНоменклатуры = Выборка.ХарактеристикаНоменклатуры;

			СтрокиПоТовару = ТаблицаПоТоварамЦены.НайтиСтроки(СтруктураОтбора);
			Для Каждого СтрокаТовара Из СтрокиПоТовару Цикл
				ТаблицаПоТоварамЦены.Удалить(СтрокаТовара);
			КонецЦикла;
		КонецЦикла;

		// Заполним таблицу движений.
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварамЦены, ТаблицаДвижений);

		// Недостающие поля.
		ТаблицаДвижений.ЗаполнитьЗначения(ТипЦен,"ТипЦен");

		Если СтруктураШапкиДокумента.Свойство("ВалютаЗаказа") Тогда
			ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.ВалютаЗаказа,"Валюта");
		Иначе
			ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.ВалютаДокумента,"Валюта");
		КонецЕсли;

		НаборДвижений.мПериод          = Дата;
		НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;

		Если Не Отказ Тогда
			Движения.ЦеныНоменклатурыКонтрагентов.ВыполнитьДвижения();
		КонецЕсли;

	КонецЕсли;
	
	// если вид операции = объекты строительства
	Если ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ОбъектыСтроительства Тогда
		НаборДвижений = Движения.СтроительствоОбъектовОсновныхСредств;

		// Получим таблицу значений, совпадающую со структурой набора записей регистра.
		ТаблицаДвиженийОбъектыСтроительства = НаборДвижений.Выгрузить();
		ТаблицаДвиженийОбъектыСтроительства.Очистить();

		// Заполним таблицу движений.
		ТаблицаПоОбъектамСтроительства.Колонки.Сумма.Имя 	 = "СуммаДок";
		ТаблицаПоОбъектамСтроительства.Колонки.Стоимость.Имя = "Сумма";

		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоОбъектамСтроительства, ТаблицаДвиженийОбъектыСтроительства);

		// Недостающие поля.
		//ТаблицаДвижений.ЗаполнитьЗначения(СкладОрдер,"ДокументРезерва");
		//ТаблицаДвижений.ЗаполнитьЗначения(СкладОрдер.Склад,"Склад");

		НаборДвижений.мПериод            = Дата;
		НаборДвижений.мТаблицаДвижений   = ТаблицаДвиженийОбъектыСтроительства;

		Если Не Отказ Тогда
			Движения.СтроительствоОбъектовОсновныхСредств.ВыполнитьПриход();
			Движения.СтроительствоОбъектовОсновныхСредств.Записать(Ложь);
		КонецЕсли;
		
		НаборДвижений = Движения.ЗатратыНаСтроительствоОбъектовОсновныхСредств;

		// Получим таблицу значений, совпадающую со структурой набора записей регистра.
		ТаблицаДвиженийОбъектыСтроительства = НаборДвижений.Выгрузить();
		ТаблицаДвиженийОбъектыСтроительства.Очистить();

		// Заполним таблицу движений.
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоОбъектамСтроительства, ТаблицаДвиженийОбъектыСтроительства);

		НаборДвижений.мПериод            = Дата;
		НаборДвижений.мТаблицаДвижений   = ТаблицаДвиженийОбъектыСтроительства;

		Если Не Отказ Тогда
			Движения.ЗатратыНаСтроительствоОбъектовОсновныхСредств.ДобавитьДвижение();
			Движения.ЗатратыНаСтроительствоОбъектовОсновныхСредств.Записать(Ложь);
		КонецЕсли;
		
		ТаблицаПоОбъектамСтроительства.Колонки.Сумма.Имя 	 = "Стоимость";
		ТаблицаПоОбъектамСтроительства.Колонки.СуммаДок.Имя = "Сумма";

	КонецЕсли;
	
	Если ВидОперации <> Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку Тогда

		// Погашение внутренних заказов в случае Заказчик = Склад поступления
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить( "СтатусПартии",          Перечисления.СтатусыПартийТоваров.Купленный);
		ДопПараметры.Вставить( "РежимПроведения",       РежимПроведения);
		ДопПараметры.Вставить( "ИмяРеквизитаЗаказ",     "Заказ");
		ДопПараметры.Вставить( "ЗаказВШапке",           Ложь);
		ДопПараметры.Вставить( "ИмяТабЧасти",           "Товары");
		
		ТабИсходная = ТаблицаПоТоварам.Скопировать();
		
		ПодготовитьТаблицуДляДвиженийПоВнутреннимЗаказам(ТабИсходная, Перечисления.СтатусыПартийТоваров.Купленный);
		Если ТабИсходная.Количество() > 0 Тогда
			УправлениеЗаказами.ДвижениеПоВнутреннимЗаказам( ЭтотОбъект, ТабИсходная, ДопПараметры, Отказ, Заголовок);
		КонецЕсли;
		
		ТабИсходная.Очистить();
		ТабИсходная = ТаблицаПоТаре.Скопировать();
		ПодготовитьТаблицуДляДвиженийПоВнутреннимЗаказам(ТабИсходная, Перечисления.СтатусыПартийТоваров.ВозвратнаяТара);

			
		Если ТабИсходная.Количество() > 0 Тогда
			ДопПараметры.Вставить( "СтатусПартии", Перечисления.СтатусыПартийТоваров.ВозвратнаяТара);
			ДопПараметры.Вставить( "ИмяТабЧасти",  "ВозвратнаяТара");

			УправлениеЗаказами.ДвижениеПоВнутреннимЗаказам( ЭтотОбъект, ТабИсходная, ДопПараметры, Отказ, Заголовок);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ДвиженияПоРегистрамУпр()

Процедура  ПодготовитьТаблицуДляДвиженийПоВнутреннимЗаказам(ТабИсходная, знач СтатусПартии)
	Сч = 0;

	Пока Сч < ТабИсходная.Количество() Цикл
		СтрокаТаблицы = ТабИсходная.Получить(Сч);
		Если ТипЗнч(СтрокаТаблицы.ЗаказПокупателя) = Тип("ДокументСсылка.ВнутреннийЗаказ") // Считается исполнением внутреннего заказа.
			  И СтрокаТаблицы.ЗаказПокупателя.Заказчик = СтрокаТаблицы.Склад Тогда
			// Проверим остаток по регистру "Внутренние заказы", если в остатках не хватает количества, 
			// то, вероятно, заказаны комплектующие для комплектов, по ним движений не делаем
			КоличествоОстаток = УправлениеЗаказами.ПолучитьОстатокПоВнутреннемуЗаказу(СтрокаТаблицы.ЗаказПокупателя, 
																   СтрокаТаблицы.Количество, 
																   СтрокаТаблицы.Номенклатура, 
																   ?(СтатусПартии=Перечисления.СтатусыПартийТоваров.ВозвратнаяТара,неопределено,СтрокаТаблицы.ХарактеристикаНоменклатуры),
																   СтрокаТаблицы.ЕдиницаИзмерения,
																   СтатусПартии);
			Если КоличествоОстаток > 0 Тогда
				СтрокаТаблицы.Количество = Мин(СтрокаТаблицы.Количество, КоличествоОстаток);
				Сч = Сч + 1;
			Иначе
				ТабИсходная.Удалить(СтрокаТаблицы);
			КонецЕсли;
		Иначе
			ТабИсходная.Удалить(СтрокаТаблицы);
		КонецЕсли;
	КонецЦикла;
	ТабИсходная.Колонки.ЗаказПокупателя.Имя = "Заказ";
КонецПроцедуры


// Формирует движения по регистру "Взаиморасчеты с контрагентами по документам расчетов",
// если по договору ведется учет в разрезе документов
//
Процедура ДвиженияПоРегистрамОперативныхВзаиморасчетов(РежимПроведения, ТаблицаПоВзаиморасчетам, Отказ, Заголовок, СтруктураШапкиДокумента)

	Если НЕ мСтруктураПараметровВзаиморасчетов.ПроводитьПоВзаиморасчетам Тогда
		Возврат;
	КонецЕсли;
	
	ВидДвижения = ВидДвиженияНакопления.Расход;
	ВидРасчетовПоОперации = перечисления.ВидыРасчетовСКонтрагентами.ПоПриобретению;
	СтруктураШапкиДокумента.Вставить("РежимПроведения", РежимПроведения);
		
	УправлениеВзаиморасчетами.ОтражениеЗадолженностиВРегистреОперативныхРасчетовПоДокументам(СтруктураШапкиДокумента, ТаблицаПоВзаиморасчетам, ВидРасчетовПоОперации, ВидДвижения, Движения, Отказ, Заголовок);
				
КонецПроцедуры

Процедура ДвиженияПоРегистрамУСНРегл(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугам, ТаблицаПоОборудованию,Отказ, Заголовок)
	
	Если (Не СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН) ИЛИ 
		(СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом) Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку Тогда
		
		НаборДвижений = Движения.РасходыПриУСН;
		
		// Получим таблицу значений, совпадающую со структурой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.Выгрузить();
		ТаблицаДвижений.Очистить();
		
		Если (НЕ ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ОбъектыСтроительства) Тогда
			НалоговыйУчетУСН.ПоступлениеРасходовУСН(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаДвижений, 
								Перечисления.ВидыРасходовУСН.Номенклатура, СтруктураШапкиДокумента.ДоговорКонтрагента,
								Перечисления.СтатусыПартийУСН.Купленные, СтруктураШапкиДокумента.СуммаВключаетНДС);
		КонецЕсли;
								
		НалоговыйУчетУСН.ПоступлениеРасходовУСН(СтруктураШапкиДокумента, ТаблицаПоУслугам, ТаблицаДвижений, 
								Перечисления.ВидыРасходовУСН.Услуги, СтруктураШапкиДокумента.ДоговорКонтрагента,
								Перечисления.СтатусыПартийУСН.Купленные, СтруктураШапкиДокумента.СуммаВключаетНДС);
								
		//НалоговыйУчетУСН.ПоступлениеРасходовУСН(СтруктураШапкиДокумента, ТаблицаПоОборудованию, ТаблицаДвижений, 
		//						Перечисления.ВидыРасходовУСН.Номенклатура, СтруктураШапкиДокумента.ДоговорКонтрагента,
		//						Перечисления.СтатусыПартийУСН.Купленные, СтруктураШапкиДокумента.СуммаВключаетНДС);
								
		//Недостающие поля.
		ТаблицаДвижений.ЗаполнитьЗначения(Организация, "Организация");
		ТаблицаДвижений.ЗаполнитьЗначения(Дата, "Период");
		ТаблицаДвижений.ЗаполнитьЗначения(Ссылка, "Регистратор");
		ТаблицаДвижений.ЗаполнитьЗначения(Истина, "Активность");
		
		НаборДвижений.мПериод            = Дата;
		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
		
		Если Не Отказ Тогда
			Движения.РасходыПриУСН.ВыполнитьПриход();
			НаборДвижений.Записать(Истина);
		КонецЕсли;
				
		//Зачет аванса													
		НалоговыйУчетУСН.ДвиженияУСН(Ссылка, РежимПроведения);
		
	КонецЕсли;
		
КонецПроцедуры

Процедура ДвиженияПоРегистрамРегл(РежимПроведения, СтруктураШапкиДокумента, 
							ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоУслугам, ТаблицаПоОборудованию,
							ТаблицаПоОбъектамСтроительства, ТаблицаПоВзаиморасчетам, Отказ, Заголовок, ПроводкиНУ);

	Если Не СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		Возврат;
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия
	 или ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку
	 или ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Оборудование Тогда

		// ТОВАРЫ ПО РЕГИСТРУ ТоварыНаСкладах.
		// ТОВАРЫ ПО РЕГИСТРУ ПартииТоваровНаСкладах.
		// ТАРА ПО РЕГИСТРУ ТоварыНаСкладах.
		// ТАРА ПО РЕГИСТРУ ПартииТоваровНаСкладах.
		ТоварыИТараПоРегистрамОстатковИПартийРегл(РежимПроведения, ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоОборудованию, Отказ, Заголовок, СтруктураШапкиДокумента);

	КонецЕсли; 	
	УправлениеЗапасамиПартионныйУчет.СформироватьПроводкиПоПоступлениюТМЦ(СтруктураШапкиДокумента, Отказ, ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоУслугам, ТаблицаПоОборудованию, ТаблицаПоОбъектамСтроительства, СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете, СтруктураШапкиДокумента.ОтражатьВНалоговомУчете);
	
	ПроводкиБУ = Движения.Хозрасчетный;
	
	// Движения по взаиморасчетам
	Если мСтруктураПараметровВзаиморасчетов.ПроводитьПоВзаиморасчетам Тогда
		СкладПроводок = Справочники.Склады.ПустаяСсылка();
		Если ТаблицаПоТоварам.Количество()>0 Тогда
			Если ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад Тогда
				СкладПроводок = ТаблицаПоТоварам[0].Склад;
			ИначеЕсли ВидПоступления = Перечисления.ВидыПоступленияТоваров.ПоОрдеру Тогда
				СкладПроводок = ТаблицаПоТоварам[0].ПриходныйОрдерСклад;
			КонецЕсли;
		КонецЕсли;

		СтруктураПараметровЗачетАванса = БухгалтерскийУчетРасчетовСКонтрагентами.ПодготовкаСтруктурыПараметровДляЗачетаАванса(Ссылка, мВалютаРегламентированногоУчета, Заголовок,, ТаблицаПоВзаиморасчетам, СтруктураШапкиДокумента);
		Если НЕ СтруктураПараметровЗачетАванса = Ложь Тогда
			// Движения по регистру сведений РасчетыПоПриобретениюОрганизации
			// и проводки по зачету аванса
			ТаблицаРасчетовПоПриобретению = БухгалтерскийУчетРасчетовСКонтрагентами.ПодготовитьТаблицуДляРегистраРасчетовПоПриобретению(
				мСтруктураПараметровВзаиморасчетов, СтруктураШапкиДокумента);
			СтруктураПараметровЗачетАванса.Вставить("Склад", СкладПроводок);
			СуммаАванса = БухгалтерскийУчетРасчетовСКонтрагентами.ЗачетАванса(СтруктураПараметровЗачетАванса, 
				ПроводкиБУ, мВалютаРегламентированногоУчета, РежимПроведения, ЭтотОбъект, ТаблицаРасчетовПоПриобретению);
			// Движения по регистру РасчетыПоПриобретениюВУсловныхЕдиницахОрганизации
			Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
				СтруктураПараметровЗачетАванса.Вставить("ПроводкиНУ", Движения.Налоговый);
			Конецесли;
			БухгалтерскийУчетРасчетовСКонтрагентами.РасчетыВУсловныхЕдиницахПриобретениеРеализация(СтруктураПараметровЗачетАванса, 
				мВалютаРегламентированногоУчета, РежимПроведения, ПроводкиБУ, ЭтотОбъект, Отказ, , Истина);
		Конецесли;

	КонецЕсли;

	Движения.Хозрасчетный.Записать(ложь);
	Движения.Налоговый.Записать(ложь);
   	
КонецПроцедуры // ДвиженияПоРегистрамРегл()

Процедура ДвиженияПоРегиструСписанныеТовары(СтруктураШапкиДокумента, ТаблицаПоТоварам, 
							  ТаблицаПоТаре, Отказ, Заголовок)
							  
	// По партиям, оприходованным по ордеру с правом продажи, возможно следует выполнить корректировку списания
	// Приходный ордер может быть указан не только в шапке, но и в табличной части как "Документ получения"
	Если ВидПоступления = Перечисления.ВидыПоступленияТоваров.ПоОрдеру тогда
		
		МассивПриходныхОрдеров = Новый Массив;
		Для каждого Строка Из ТаблицаПоТоварам Цикл
		
			Если  ТипЗнч(Строка.ДокументПолучения) = Тип("ДокументСсылка.ПриходныйОрдерНаТовары")
			   И Строка.БезПраваПродажи =Ложь Тогда
			 МассивПриходныхОрдеров.Добавить(Строка.ДокументПолучения);
			КонецЕсли;
		
		КонецЦикла;
		
		Для каждого Строка Из ТаблицаПоТаре Цикл
		
			Если  ТипЗнч(Строка.ДокументПолучения) = Тип("ДокументСсылка.ПриходныйОрдерНаТовары")
			   И Строка.БезПраваПродажи =Ложь Тогда
			 МассивПриходныхОрдеров.Добавить(Строка.ДокументПолучения);
			КонецЕсли;
		
		КонецЦикла;
		
		ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(МассивПриходныхОрдеров);
		
		// ПО РЕГИСТРУ СписанныеТовары: формируем записи с указанием приходных ордеров, которые будут обрабатываться при списании
		НаборДвижений = Движения.СписанныеТовары;

		// Получим таблицу значений, совпадающую со структурой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.Выгрузить();
		ТаблицаДвижений.Очистить();
		
		Инд = 0;
		Для каждого Элемент Из МассивПриходныхОрдеров Цикл
			
			НоваяСтрока = ТаблицаДвижений.Добавить();
			НоваяСтрока.ПоступлениеПриходныйОрдер = Элемент;
			Инд = Инд+1;
			НоваяСтрока.НомерСтрокиДокумента = Инд;
			НоваяСтрока.Организация = СтруктураШапкиДокумента.Организация;
		КонецЦикла;

		ТаблицаДвижений.ЗаполнитьЗначения(Дата,   "Период");
		ТаблицаДвижений.ЗаполнитьЗначения(Ссылка, "Регистратор");
		ТаблицаДвижений.ЗаполнитьЗначения(Истина, "Активность");

		ТаблицаДвижений.ЗаполнитьЗначения(ОтражатьВУправленческомУчете,"ОтражатьВУправленческомУчете");

		НаборДвижений.мПериод            = Дата;
		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

		Если Не Отказ Тогда
			Движения.СписанныеТовары.ВыполнитьДвижения();
		КонецЕсли;

	КонецЕсли;
	
	Если Движения.СписанныеТовары.Модифицированность() Тогда
		Движения.СписанныеТовары.Записать(Истина);
	КонецЕсли;

КонецПроцедуры // ДвиженияПоРегиструСписанныеТовары

//////////////////////////////////////////////////////////////////////////////////
//// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ НДС

// Процедура вызывается из тела процедуры ДвиженияПоРегистрам
// Формирует движения по регистрам подсистемы учета НДС.
//
Процедура ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ТаблицыДокумента, Отказ) Экспорт
	
	Если Не УчетНДС.ПроводитьДокументДляЦелейНДС(СтруктураШапкиДокумента) Тогда
		// Движения по этому документу делать не нужно
		Возврат;
	КонецЕсли;
	
	Для Каждого ТаблицаДокумента Из ТаблицыДокумента Цикл

		ТабЧасть   = ТаблицаДокумента.Значение;

		Если Не ТабЧасть.Количество() = 0 Тогда 
			УчетНДСФормированиеДвижений.СформироватьДвиженияПоРегиструНДСПредъявленный(СтруктураШапкиДокумента, ТабЧасть, Отказ);
			
		КонецЕсли; 
	КонецЦикла;
	
	// Если по договору с контрагентом организация выступает в качестве налогового агента, требуется отразить начисление НДС
	Если СтруктураШапкиДокумента.УчетАгентскогоНДС Тогда
        УчетНДСФормированиеДвижений.СформироватьДвиженияПоРегиструНДСНачисленный_ПоступлениеАгентскогоНДС(СтруктураШапкиДокумента);
	КонецЕсли; 
	
	// При необходимости, отражаем в регистре партионного учета для НДС
	// Отражение партий по товарам
	Если (СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия 
			Или СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Оборудование)
		И ТаблицыДокумента.Свойство("ТаблицаПоТоварам") 
		И Не ТаблицыДокумента.ТаблицаПоТоварам.Количество() = 0 Тогда
		
		УчетНДСФормированиеДвижений.СформироватьДвиженияПоступленияПоРегиструНДСПартииТоваров(СтруктураШапкиДокумента, ТаблицыДокумента.ТаблицаПоТоварам.Скопировать(), , Отказ);
	КонецЕсли;
		
	// Отражение партий по оборудованию
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Оборудование
		И (ТаблицыДокумента.Свойство("ТаблицаПоОборудованию") 
				И Не ТаблицыДокумента.ТаблицаПоОборудованию.Количество() = 0) Тогда
				
		УчетНДСФормированиеДвижений.СформироватьДвиженияПоступленияПоРегиструНДСПартииТоваров(СтруктураШапкиДокумента, ТаблицыДокумента.ТаблицаПоОборудованию.Скопировать(), , Отказ);
		
	КонецЕсли; 
	
КонецПроцедуры // ДвиженияРегистровПодсистемыНДС()

// Дополняет полями, нужными для упр. учета
Процедура ДополнитьДеревоПолейЗапросаПоШапкеУпр(ДеревоПолейЗапросаПоШапке)

	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы"             , "ВалютаУправленческогоУчета"        , "ВалютаУправленческогоУчета");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы"             , "КурсВалютыУправленческогоУчета"    , "КурсВалютыУправленческогоУчета");
    УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "НастройкаСпособовВеденияУправленческогоПартионногоУчета", "СпособВеденияПартионногоУчетаПоОрганизации", "СпособВеденияПартионногоУчетаПоОрганизации");
	
КонецПроцедуры

// Дополняет полями, нужными для регл. учета
Процедура ДополнитьДеревоПолейЗапросаПоШапкеРегл(ДеревоПолейЗапросаПоШапке)
	

КонецПроцедуры

// Дополняет полями, нужными для регл. учета
Процедура ДополнитьСтруктуруПолейТабличнойЧастиТоварыРегл(СтруктураПолей, СтруктураШапкиДокумента)

	СтруктураПолей.Вставить("СчетУчетаБУ"                      , "СчетУчетаБУ");
	СтруктураПолей.Вставить("СчетУчетаНДС"                     , "СчетУчетаНДС");
	СтруктураПолей.Вставить("СчетУчетаНУ"                      , "СчетУчетаНУ");
	СтруктураПолей.Вставить("ОтражениеВУСН"                    , "ОтражениеВУСН");

	//Для определения счетов учета при проведении документов
	Если СтруктураШапкиДокумента.ВидПоступления = Перечисления.ВидыПоступленияТоваров.ПоОрдеру Тогда
		СтруктураПолей.Вставить("СкладВидСклада"            , "ПриходныйОрдер.Склад.ВидСклада");
	Иначе
		СтруктураПолей.Вставить("СкладВидСклада"            , "Склад.ВидСклада");
	КонецЕсли;
	
КонецПроцедуры

// Дополняет полями, нужными для упр. учета
Процедура ДополнитьСтруктуруПолейТабличнойЧастиВозвратнаяТараУпр(СтруктураПолей)


КонецПроцедуры

// Дополняет полями, нужными для регл. учета
Процедура ДополнитьСтруктуруПолейТабличнойЧастиВозвратнаяТараРегл(СтруктураПолей, СтруктураШапкиДокумента)

	СтруктураПолей.Вставить("СчетУчетаБУ"          , "СчетУчетаБУ");
	СтруктураПолей.Вставить("СчетУчетаНУ"          , "СчетУчетаНУ");

	//Для определения счетов учета при проведении документов
	Если СтруктураШапкиДокумента.ВидПоступления = Перечисления.ВидыПоступленияТоваров.ПоОрдеру Тогда
		СтруктураПолей.Вставить("СкладВидСклада"            , "ПриходныйОрдер.Склад.ВидСклада");
	Иначе
		СтруктураПолей.Вставить("СкладВидСклада"            , "Склад.ВидСклада");
	КонецЕсли;
	
КонецПроцедуры

// Дополняет полями, нужными для упр. учета
Процедура ДополнитьСтруктуруПолейТабличнойЧастиУслугиУпр(СтруктураПолей)

	СтруктураПолей.Вставить("НоменклатурнаяГруппа",           "НоменклатурнаяГруппа");
	СтруктураПолей.Вставить("Цена",                           "Цена");
	
КонецПроцедуры

// Дополняет полями, нужными для регл. учета
Процедура ДополнитьСтруктуруПолейТабличнойЧастиУслугиРегл(СтруктураПолей)

	СтруктураПолей.Вставить("НоменклатурнаяГруппа",     "НоменклатурнаяГруппа");
	СтруктураПолей.Вставить("ПодразделениеОрганизации", "ПодразделениеОрганизации");
	СтруктураПолей.Вставить("ОбъектСтроительства",      "ОбъектСтроительства");
	СтруктураПолей.Вставить("СпособСтроительства",      "СпособСтроительства");
	СтруктураПолей.Вставить("СчетЗатрат",   "СчетЗатрат" );
	СтруктураПолей.Вставить("СчетУчетаНДС", "СчетУчетаНДС");
	СтруктураПолей.Вставить("СчетЗатратНУ", "СчетЗатратНУ" );
	СтруктураПолей.Вставить("Субконто1",    "Субконто1");
	СтруктураПолей.Вставить("Субконто2",    "Субконто2");
	СтруктураПолей.Вставить("Субконто3",    "Субконто3");
	СтруктураПолей.Вставить("СубконтоНУ1",  "СубконтоНУ1");
	СтруктураПолей.Вставить("СубконтоНУ2",  "СубконтоНУ2");
	СтруктураПолей.Вставить("СубконтоНУ3",  "СубконтоНУ3");
	СтруктураПолей.Вставить("ОтражениеВУСН",  "ОтражениеВУСН");

КонецПроцедуры

// Дополняет полями, нужными для упр. учета
Процедура ДополнитьСтруктуруПолейТабличнойЧастиОборудованиеУпр(СтруктураПолей)


КонецПроцедуры

// Дополняет полями, нужными для регл. учета
Процедура ДополнитьСтруктуруПолейТабличнойЧастиОборудованиеРегл(СтруктураПолей, СтруктураШапкиДокумента)

	СтруктураПолей.Вставить("СчетУчетаБУ",  "СчетУчетаБУ");
	СтруктураПолей.Вставить("СчетУчетаНДС", "СчетУчетаНДС");
	СтруктураПолей.Вставить("СчетУчетаНУ",  "СчетУчетаНУ");

	//Для определения счетов учета при проведении документов
	Если СтруктураШапкиДокумента.ВидПоступления = Перечисления.ВидыПоступленияТоваров.ПоОрдеру Тогда
		СтруктураПолей.Вставить("СкладВидСклада"            , "ПриходныйОрдер.Склад.ВидСклада");
	Иначе
		СтруктураПолей.Вставить("СкладВидСклада"            , "Склад.ВидСклада");
	КонецЕсли;
	
КонецПроцедуры

// Дополняет полями, нужными для регл. учета
Процедура ДополнитьСтруктуруПолейТабличнойЧастиОбъектыСтроительстваРегл(СтруктураПолей, СтруктураШапкиДокумента)

	СтруктураПолей.Вставить("СчетУчетаБУ",  "СчетУчетаБУ");
	СтруктураПолей.Вставить("СчетУчетаНДС", "СчетУчетаНДС");
	СтруктураПолей.Вставить("СчетУчетаНУ",  "СчетУчетаНУ");

КонецПроцедуры

// Процедура определяет параметры учетной политики
//
Процедура ПодготовитьПараметрыУчетнойПолитики(Отказ, Заголовок, СтруктураШапкиДокумента)
	мУчетнаяПолитика   = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиУпр(Дата,истина);
    Если НЕ ЗначениеЗаполнено(мУчетнаяПолитика) Тогда
		Отказ = Истина;
	КонецЕсли;

	Если НЕ (СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете
		ИЛИ СтруктураШапкиДокумента.ОтражатьВНалоговомУчете) Тогда
		
		Возврат;
	КонецЕсли;
	
	УчетнаяПолитикаРегл = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(Дата, Организация,истина);
    Если НЕ ЗначениеЗаполнено(УчетнаяПолитикаРегл) Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры // ПодготовитьПараметрыУчетнойПолитики()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)

	ТипОснования = ТипЗнч(Основание);

	Если ТипОснования = Тип("ДокументСсылка.ЗаказПокупателя") Тогда

		Если Не Основание.ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.Переработка Тогда
			Возврат;
		КонецЕсли;
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
		ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку;
		
		Сделка = Основание;
		
		ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад;
		
		// Заполним табличные части неполученными ТМЦ по заказу поставщику.
		ЗаполнитьТоварыПоОстаткамУпр("ВПереработку");
		
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
        ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
		ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад;
		СкладОрдер     = Основание.Склад;

		ОрганизацияКонтрагента = ЗаполнениеДокументов.ПолучитьОрганизациюПоКонтрагенту(Основание.Контрагент);

		Если ЗначениеЗаполнено(ОрганизацияКонтрагента) Тогда
			
			// Документ не отражается в управленческом учете (внутреняя передача товара),
			// поменяем организацию и контрагента местами.
			Организация = ОрганизацияКонтрагента;
			Контрагент  = ЗаполнениеДокументов.ПолучитьКонтрагентаПоОрганизации(Основание.Организация);

			ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия;

			// Заполним номер и дату вхоящего документа.
			НомерВходящегоДокумента = Основание.Номер;
			ДатаВходящегоДокумента  = Основание.Дата;
			
			ЗаполнениеДокументов.ПриИзмененииЗначенияКонтрагента(ЭтотОбъект, мСтруктураПараметровДляПолученияДоговора);
			
		Иначе
			//переносить контрагента и договор нет смысла при такой цепочке
			Контрагент = Справочники.Контрагенты.ПустаяСсылка();
			ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		КонецЕсли;

		СтруктураКурсаВзаиморасчетов = МодульВалютногоУчета.ПолучитьКурсВалюты(ДоговорКонтрагента.ВалютаВзаиморасчетов, Дата);
		КурсВзаиморасчетов           = СтруктураКурсаВзаиморасчетов.Курс;
		КратностьВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Кратность;

		// Заполним табличные части.
		ЗаполнитьТоварыПоОснованиюРеализация(Основание);
		ЗаполнитьУслугиПоОснованиюРеализация(Основание);
		ЗаполнитьВозвратнуюТаруПоОснованиюРеализация(Основание);

	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ПередачаТоваров") Тогда
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
		
		Если Основание.ВидПередачи <> Перечисления.ВидыОперацийПередачаТоваров.ВПереработку Тогда
			//договор мог уже заполниться - перезаполним
			ЗаполнениеДокументов.ПриИзмененииЗначенияКонтрагента(ЭтотОбъект, мСтруктураПараметровДляПолученияДоговора);

			Возврат;
		КонецЕсли;
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
		// Заполнение шапки.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект);
		
		СчетУчетаРасчетовПоТаре      = Основание.СчетУчетаРасчетовПоТаре;
		ВидОперации					 = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку;
		
		ЗаполнениеДокументов.ПриИзмененииЗначенияКонтрагента(ЭтотОбъект, мСтруктураПараметровДляПолученияДоговора);
		
		Для Каждого ТекСтрокаВозвратнаяТара Из Основание.ВозвратнаяТара Цикл
			
			НоваяСтрока = ВозвратнаяТара.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрокаВозвратнаяТара);
			
		КонецЦикла;
		
		Для Каждого ТекСтрокаТовары Из Основание.Товары Цикл
			
			НоваяСтрока = Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрокаТовары);
			
			// Заполняем реквизиты табличной части.
			ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(НоваяСтрока, ЭтотОбъект, "Приобретение"); 
			СтруктураШапкиДокумента = Новый Структура("Контрагент, ТипЦен, ДоговорКонтрагента, ДатаДокумента, ВалютаДокумента, УчитыватьНДС, СуммаВключаетНДС",
			                                         Контрагент, ТипЦен, ДоговорКонтрагента, Дата,ВалютаДокумента, УчитыватьНДС,СуммаВключаетНДС);
			ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуЦенуПокупкиТабЧасти(НоваяСтрока, ЭтотОбъект, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета); 

			// Рассчитываем реквизиты табличной части.
			ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(НоваяСтрока, ЭтотОбъект);
			ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НоваяСтрока, ЭтотОбъект);
	
		КонецЦикла;
		
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ЗаказПоставщику")
	 ИЛИ ТипОснования = Тип("ДокументСсылка.СчетНаОплатуПоставщика") Тогда
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
		ОтражатьВУправленческомУчете = Истина;
		Ответственный = Основание.Ответственный;
		Если ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
			//сейчас возможности ввести заказ поставщику на основании счета в случае договора по счетам не поддерживается
             //поэтому считаем что Основание - всегда счет
			Сделка = Основание;
		Иначе  //по заказам или по договору в целом
			Если   ТипОснования  = Тип("ДокументСсылка.ЗаказПоставщику")  Тогда
				Сделка = Основание;
			ИначеЕсли ТипЗнч(Основание.ДокументОснование)  = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
				Сделка = Основание.ДокументОснование;
			КонецЕсли;
		КонецЕсли;
		
		// Не нужно заполнять табличные части, если основание заказ поставщику на переработку.
		Если (ТипОснования = Тип("ДокументСсылка.ЗаказПоставщику")) Тогда
			Если Основание.ВидОперации = Перечисления.ВидыОперацийЗаказПоставщику.Переработка Тогда
				Возврат;
			КонецЕсли;	
		КонецЕсли;	

		
		Если Основание.Оборудование.Количество() = 0 Тогда
			ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия;
		Иначе
			ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Оборудование;
		КонецЕсли;

		ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад;
		СкладОрдер     = Основание.Склад;
        		
		Если ЗначениеЗаполнено(Сделка) И Сделка.Проведен Тогда
			
			// Заполним табличные части неполученными ТМЦ по заказу поставщику.
			ЗаполнитьТоварыПоОстаткамУпр();
			ЗаполнитьВозвратнуюТаруПоОстаткамУпр();
			ЗаполнитьУслугиПоОстаткамУпр();
			
			Если ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Оборудование Тогда
				ЗаполнитьОборудованиеПоОстаткамУпр();
			КонецЕсли;
			
			ЗаполнитьСчетаУчетаВТабЧасти(Товары, "Товары", ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);
			
			ЗаполнитьСчетаУчетаВТабЧасти(ВозвратнаяТара, "ВозвратнаяТара", ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);
			
		ИначеЕсли ТипОснования = Тип("ДокументСсылка.СчетНаОплатуПоставщика") Тогда
			
			СкопироватьОборудование(Основание);
			СкопироватьТовары(Основание);
			СкопироватьВозвратнуюТару(Основание);
			СкопироватьУслуги(Основание);
			
		КонецЕсли;
		
		ОчиститьСкладПриВидеОперацииОборудование(Ложь);

	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ПриходныйОрдерНаТовары") Тогда
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
		СкладОрдер     = Основание;
		ВидПоступления = Перечисления.ВидыПоступленияТоваров.ПоОрдеру;
		
		Если Контрагент.ОсновнойДоговорКонтрагента.Организация = Организация и
			Контрагент.ОсновнойДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком Тогда
			ДоговорКонтрагента           = Контрагент.ОсновнойДоговорКонтрагента;
		Иначе
			Запрос = новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ Первые 1 Ссылка 
			|ИЗ Справочник.ДоговорыКонтрагентов
			|Где Организация = &Организация и Владелец = &Контрагент и ВидДоговора = &ВидДоговора и ПометкаУдаления = ложь";
			Запрос.УстановитьПараметр("Контрагент",Контрагент);
			Запрос.УстановитьПараметр("Организация",Организация);
			Запрос.УстановитьПараметр("ВидДоговора", Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
			
			ВыборкаДоговоров = Запрос.Выполнить().Выбрать();
			Если ВыборкаДоговоров.Следующий() Тогда
				ДоговорКонтрагента = ВыборкаДоговоров.Ссылка;
			КонецЕсли;
		КонецЕсли;
		
		ТипЦен                       = ДоговорКонтрагента.ТипЦен;
		УчитыватьНДС                 = Истина;
		СуммаВключаетНДС             = ТипЦен.ЦенаВключаетНДС;
		СуммаВключаетНДС             = ?(ЗначениеЗаполнено(ТипЦен), ТипЦен.ЦенаВключаетНДС, Истина);
		ВалютаДокумента              = ДоговорКонтрагента.ВалютаВзаиморасчетов;
		СтруктураКурса               = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДокумента, Дата);
		КурсВзаиморасчетов           = СтруктураКурса.Курс;
		КратностьВзаиморасчетов      = СтруктураКурса.Кратность;

		Если Основание.Проведен Тогда

			// Заполним табличную часть "Товары" по приходному ордеру на товары.
			ЗаполнитьТоварыПоОснованиюУпр(Основание, Товары);
			ЗаполнитьТоварыПоОснованиюУпр(Основание, ВозвратнаяТара);
		КонецЕсли;

	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ТТНВходящаяЕГАИС") Тогда
		
		ИнтеграцияЕГАИСУТ.ЗаполнитьПоступлениеТоваровУслугНаОснованииТТНВходящаяЕГАИС(ЭтотОбъект, Основание, Неопределено);
		
	ИначеЕсли ТипОснования = Тип("СправочникСсылка.НастройкиЗаполненияФорм") Тогда
		
		ХранилищаНастроек.ДанныеФорм.ЗаполнитьОбъектПоНастройке(ЭтотОбъект, Основание, Документы.ПоступлениеТоваровУслуг.СтруктураДополнительныхДанныхФормы());
		
	КонецЕсли;

	УправлениеВзаиморасчетами.ДополнитьСтруктуруПараметровДляЗаполненияТаблицыДокументовРасчетов(ЭтотОбъект, мСтруктураПараметровВзаиморасчетов);
	УправлениеВзаиморасчетами.ЗаполнитьТаблицуДокументовРасчетовСКонтрагентом(ЭтотОбъект, мСтруктураПараметровВзаиморасчетов);
	
	// Заполним значения счетов по бухгалтерскому и налоговому учету.
	Для Каждого СтрокаТЧ Из Товары Цикл
		СтрокаТЧ.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Принимаются;
	КонецЦикла;
	Для Каждого СтрокаТЧ Из Услуги Цикл
		СтрокаТЧ.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Принимаются;
	КонецЦикла;
	
	ЗаполнитьСчетаУчетаВТабЧасти(Товары, 		 "Товары", 			ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);
	ЗаполнитьСчетаУчетаВТабЧасти(Услуги, 		 "Услуги", 			ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);
	ЗаполнитьСчетаУчетаВТабЧасти(ВозвратнаяТара, "ВозвратнаяТара", 	ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);
	ЗаполнитьСчетаУчетаВТабЧасти(Оборудование, 	 "Оборудование", 	ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ЗаполнитьСтруктуруСчетовУчетаШапки());
	
	// Заполнить реквизиты значениями по умолчанию.
	ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, "Покупка");
	// Скорректируем заполнившиеся по умолчанию признаки отражения в учетах
	Если  ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку Тогда
		ОтражатьВНалоговомУчете = Ложь;
	КонецЕсли;
	//Заполним склад значением корректного типа
	Если НЕ ЗначениеЗаполнено(СкладОрдер) Тогда
		Если ВидПоступления = Перечисления.ВидыПоступленияТоваров.ПоОрдеру Тогда
			СкладОрдер = Документы.ПриходныйОрдерНаТовары.ПустаяСсылка();
		Иначе
			СкладОрдер = Справочники.Склады.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	Если ЗначениеЗаполнено(Сделка) И ТипЗнч(Сделка) = Тип("ДокументСсылка.ЗаказПокупателя") 
		И Сделка.ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.Переработка Тогда
		НДСВключенВСтоимость    = Истина;
		УчитыватьНДС            = Ложь;
		СуммаВключаетНДС        = Ложь;
	КонецЕсли; 
	Если ВидОперации <> Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку Тогда
		РегистрироватьЦеныПоставщика = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "РегистрироватьЦеныПоставщика");
	КонецЕсли;
	СуммаДокумента = УчетНДС.ПолучитьСуммуДокументаСНДС(ЭтотОбъект);
КонецПроцедуры // ОбработкаЗаполнения()

// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;

	ОчиститьНенужныеТабличныеЧасти();

	// Проверка заполнения единицы измерения мест и количества мест
	ОбработкаТабличныхЧастей.ПриЗаписиПроверитьЕдиницуИзмеренияМест(Товары);
	ОбработкаТабличныхЧастей.ПриЗаписиПроверитьЕдиницуИзмеренияМест(Оборудование);
	
	ОбработкаТабличныхЧастей.ПриЗаписиПроверитьСтавкуНДС(ЭтотОбъект, Товары);
	ОбработкаТабличныхЧастей.ПриЗаписиПроверитьСтавкуНДС(ЭтотОбъект, Услуги);
	ОбработкаТабличныхЧастей.ПриЗаписиПроверитьСтавкуНДС(ЭтотОбъект, Оборудование);
	ОбработкаТабличныхЧастей.ПриЗаписиПроверитьСтавкуНДС(ЭтотОбъект, ОбъектыСтроительства);

	// Посчитать суммы документа и записать ее в соответствующий реквизит шапки для показа в журналах
	СуммаДокумента = УчетНДС.ПолучитьСуммуДокументаСНДС(ЭтотОбъект);

	УчетНДС.СинхронизацияПометкиНаУдалениеУСчетаФактуры(ЭтотОбъект, "СчетФактураПолученный");

	// Заполнить склад и ордер в табличных частях
	СкладИзШапки    =  (Не мУказаниеСкладовВТЧ) И (ВидПоступления <> Перечисления.ВидыПоступленияТоваров.ПоОрдеру);

	УправлениеЗаказами.ЗаполнитьЗаказПоставщикуВТЧ(ВидОперации,ЭтотОбъект, "Поступление");
	//при поступлении в переработку все товары должны быть зарезервированы под заказ из шапки
	Если ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку и ЗначениеЗаполнено(Сделка) Тогда
		Для каждого СтрокаТЧ из Товары цикл
			СтрокаТЧ.Заказ = Сделка;
		КонецЦикла;
	КонецЕсли;

	ОбработкаТабличныхЧастей.ЗаполнитьСкладИОрдерВСтрокахТабЧасти(ЭтотОбъект, Товары,         СкладИзШапки);
	ОбработкаТабличныхЧастей.ЗаполнитьСкладИОрдерВСтрокахТабЧасти(ЭтотОбъект, ВозвратнаяТара, СкладИзШапки);
	ОбработкаТабличныхЧастей.ЗаполнитьСкладИОрдерВСтрокахТабЧасти(ЭтотОбъект, Оборудование,   СкладИзШапки);
	
	Если Не мУказаниеПроектовВТабличнойЧастиДокументов Тогда
		УправлениеПроектами.ЗаполнитьПроектВСтрокахТабЧасти(ЭтотОбъект, Услуги);
	КонецЕсли;

	// Удаление неиспользуемых строк табличной части "Серийные номера".
	УчетСерийныхНомеров.УдалитьНеиспользуемыеСтрокиПодчиненнойТЧ(ЭтотОбъект, мПараметрыСвязиСтрокТЧ, "Товары");

	// Заполним субконто затрат
	СчетаУчетаВДокументах.ЗаполнитьСубконтоТабличнойЧасти("Услуги", ЭтотОбъект, ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);
	
	// Заполнение служебного реквизита ЕстьАлкогольнаяПродукция
	ЗаполнитьПризнакЕстьАлкогольнаяПродукция();
	
	мУдалятьДвижения = НЕ ЭтоНовый();
	
КонецПроцедуры // ПередЗаписью

// Процедура - обработчик события "ПриЗаписи"
//
Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;

	УчетНДС.ПроверитьСоответствиеРеквизитовСчетаФактуры(ЭтотОбъект, "СчетФактураПолученный");
	
КонецПроцедуры

// Процедура формирует структуру шапки документа и дополнительных полей.
//
Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, РежимПроведения=неопределено,Отказ=ложь) Экспорт
	
	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);

	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокументаИПроверитьОтражениеВУчете(ЭтотОбъект, Отказ, Заголовок);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьВСтруктуруШапкиСведенияОСчетахРасчетов(ЭтотОбъект, СтруктураШапкиДокумента);
	
	Если РежимПроведения = Неопределено Тогда
		РежимПроведения = РежимПроведенияДокумента.Неоперативный;
	КонецЕсли;

	СтруктураШапкиДокумента.Вставить("РежимПроведения", РежимПроведения);

	// Для определения где нужно проверять склад: в шапке или в ТЧ.
	СтруктураШапкиДокумента.Вставить("СкладВТабличнойЧасти", мУказаниеСкладовВТЧ);

	// Если есть колонка заказ, то заполнение поля Сделка не обязательно
	ЗаказВТабличнойЧасти = УправлениеЗаказами.ЕстьЗаказВТабличнойЧасти(ВидОперации, ДоговорКонтрагента, "Поступление");
	СтруктураШапкиДокумента.Вставить("ЗаказВТабличнойЧасти", ЗаказВТабличнойЧасти);
	
	

	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = УправлениеЗапасами.СформироватьДеревоПолейЗапросаПоШапке();
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "ВедениеВзаиморасчетов"                   , "ВедениеВзаиморасчетов");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "ВалютаВзаиморасчетов"                    , "ВалютаВзаиморасчетов");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "Организация"                             , "ДоговорОрганизация");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "ВидДоговора"                             , "ВидДоговора");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "УчетАгентскогоНДС"                       , "УчетАгентскогоНДС");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "ВидАгентскогоДоговора"                   , "ВидАгентскогоДоговора");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "НалоговыйАгентПоОплате"                  , "НалоговыйАгентПоОплате");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "РасчетыВУсловныхЕдиницах"                , "РасчетыВУсловныхЕдиницах");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "ВестиПоДокументамРасчетовСКонтрагентом"  , "ВестиПоДокументамРасчетовСКонтрагентом");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Организация",          "ОтражатьВРегламентированномУчете"        , "ОтражатьВРегламентированномУчете");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Сделка",               "ВидОперации"                             , "СделкаВидОперации");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Сделка"              , "ВидОперации"                             , "СделкаВидОперации");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика",      "СписыватьПартииПриПроведенииДокументов"  , "СписыватьПартииПриПроведенииДокументов");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика",      "ВестиПартионныйУчетПоСкладам"            , "ВестиПартионныйУчетПоСкладам");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика"     , "НеВключатьНДСВСтоимостьПартий"           , "НеВключатьНДСВСтоимостьПартий");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика"     , "ВедениеУчетаПоПроектам"                  , "ВедениеУчетаПоПроектам");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика"     , "ВестиУчетТоваровОрганизацийВРазрезеСкладов"   , "ВестиУчетТоваровОрганизацийВРазрезеСкладов");
	
	Если ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад Тогда
		УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "СкладОрдер",       "ВидСклада",                              "ВидСклада");
	Иначе
		УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "СкладОрдер",       "Склад",                                  "СкладПриходногоОрдера");
		УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "СкладОрдер",       "Склад.ВидСклада",                        "ВидСклада");
	КонецЕсли;

	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "СкладОрдер"      , "БезПраваПродажи"                   , "БезПраваПродажи");
	
	// Если сделка - Заказ поставщику, то надо цену для проведения пересчитать в валюту заказа.
	Если ЗначениеЗаполнено(Сделка) 
	   И (ТипЗнч(Сделка) = Тип("ДокументСсылка.ЗаказПоставщику")
		  ИЛИ ТипЗнч(Сделка) = Тип("ДокументСсылка.ЗаказПокупателя")) Тогда
		УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Сделка"          , "ВалютаДокумента"                       , "ВалютаЗаказа");
		УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Сделка"          , "КурсВзаиморасчетов"                    , "КурсВзаиморасчетовЗаказа");
		УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Сделка"          , "КратностьВзаиморасчетов"               , "КратностьВзаиморасчетовЗаказа");
	КонецЕсли;

	// Дополним полями, нужными для регл. и упр. учета
	ДополнитьДеревоПолейЗапросаПоШапкеУпр(ДеревоПолейЗапросаПоШапке);

	// Если надо пересчитывать цену в валюту заказа. то в структуре должна быть заполнена валюта заказа.
	ВалютаЗаказа = Неопределено;
	НужнаЦенаЗаказа = Ложь;
	Если СтруктураШапкиДокумента.Свойство("ВалютаЗаказа", ВалютаЗаказа) Тогда
		НужнаЦенаЗаказа = Истина;
		Если ВалютаЗаказа = мВалютаРегламентированногоУчета Тогда
			КурсЗаказа      = 1;
			КратностьЗаказа = 1;
		Иначе //ВалютаЗаказа = ВалютаВзаиморасчетов
			КурсЗаказа      = СтруктураШапкиДокумента.КурсВзаиморасчетовЗаказа;
			КратностьЗаказа = СтруктураШапкиДокумента.КратностьВзаиморасчетовЗаказа;
		КонецЕсли;
		СтруктураШапкиДокумента.Вставить("КурсЗаказа"     , КурсЗаказа);
		СтруктураШапкиДокумента.Вставить("КратностьЗаказа", КратностьЗаказа);
	КонецЕсли;

	СтруктураШапкиДокумента.Вставить("НужнаЦенаЗаказа", НужнаЦенаЗаказа);
	
	// Здесь контролировать сумму задолженности, предоплату и число дней задолженности не надо
	СтруктураШапкиДокумента.Вставить("КонтролироватьСуммуЗадолженности", Ложь);
	СтруктураШапкиДокумента.Вставить("ПроцентПредоплаты", 0);
	СтруктураШапкиДокумента.Вставить("КонтролироватьЧислоДнейЗадолженности", Ложь);

	// Дополним полями, нужными для регл. и упр. учета
	ДополнитьДеревоПолейЗапросаПоШапкеУпр(ДеревоПолейЗапросаПоШапке);
	ДополнитьДеревоПолейЗапросаПоШапкеРегл(ДеревоПолейЗапросаПоШапке);
	
	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);
	
КонецПроцедуры // ПодготовитьСтруктуруШапкиДокумента()

//Процедура добавляет в структуру полей сведения о СтатьеЗатрат и НоменклатурнойГруппе из Номенклатуры
//	Эти сведения впоследствии могут пригодиться для заполнения незаполненных Статьи и НоменклатурнойГруппы
//	Также процедура готовит структуру, сопоставляющую поля из табличной части документа и поля из номенклатуры
Процедура ДополнитьСтруктуруПолейДаннымиНоменклатуры(СтруктураПолей, СтруктураОбрабатываемыхКолонок, СтруктураЗависимыхКолонок)
	//Поля для заполнения 
	СтруктураПолей.Вставить("СтатьяЗатратНоменклатуры", "Номенклатура.СтатьяЗатрат");
	СтруктураПолей.Вставить("ХарактерЗатратНоменклатуры", "Номенклатура.СтатьяЗатрат.ХарактерЗатрат");
	СтруктураПолей.Вставить("НоменклатурнаяГруппаНоменклатуры", "Номенклатура.НоменклатурнаяГруппаЗатрат");

	СтруктураОбрабатываемыхКолонок.Вставить("СтатьяЗатрат", 			"СтатьяЗатратНоменклатуры");
	СтруктураОбрабатываемыхКолонок.Вставить("НоменклатурнаяГруппа", 	"НоменклатурнаяГруппаНоменклатуры");
	СтруктураОбрабатываемыхКолонок.Вставить("ХарактерЗатрат", 			"ХарактерЗатратНоменклатуры");
	
	СтруктураЗависимыхКолонок.Вставить("ХарактерЗатрат", "СтатьяЗатрат");
	
КонецПроцедуры

// Процедура формирует таблицы документа.
//
Процедура ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугам, ТаблицаПоОборудованию, ТаблицаПоОбъектамСтроительства, ТаблицаПоТаре) Экспорт

	СкладИзШапки    =  Не мУказаниеСкладовВТЧ;
	
	// Получим необходимые данные для проведения и проверки заполнения данные по табличной части "Товары".
	СтруктураПолей = УправлениеЗапасами.СформироватьСтруктуруПолейТовары();

	СтруктураПолей.Вставить("Услуга"                               , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Набор"                                , "Номенклатура.Набор");
	СтруктураПолей.Вставить("Комплект"                             , "Номенклатура.Комплект");
	СтруктураПолей.Вставить("ЗаказПокупателя"                      , "Заказ");
	СтруктураПолей.Вставить("ВидЗаказаПокупателя"                  , "Заказ.ВидОперации");
	СтруктураПолей.Вставить("СкладЗаказаПокупателя"                , "Заказ.СкладГруппа");
	СтруктураПолей.Вставить("ОбособленныйУчетТоваровПоЗаказамПокупателей", 
	                        "Заказ.ДоговорКонтрагента.ОбособленныйУчетТоваровПоЗаказамПокупателей");
	СтруктураПолей.Вставить("ЕдиницаИзмерения"                     , "ЕдиницаИзмерения");
	
	Если СкладИзШапки и ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад Тогда
		СтруктураПолей.Вставить("Склад"                                , "Ссылка.СкладОрдер");
		СтруктураПолей.Вставить("ВидСкладаРазмещения"                  , "Ссылка.СкладОрдер.ВидСклада");
	Иначе
		СтруктураПолей.Вставить("Склад"                                , "Склад");
		СтруктураПолей.Вставить("ВидСкладаРазмещения"                  , "Склад.ВидСклада");
	КонецЕсли;
	
	Если ВидПоступления = Перечисления.ВидыПоступленияТоваров.ПоОрдеру Тогда
		СтруктураПолей.Вставить("ВидСклада"       , "ПриходныйОрдер.Склад.ВидСклада");
	Иначе
		Если СкладИзШапки Тогда
			СтруктураПолей.Вставить("ВидСклада"   , "Ссылка.СкладОрдер.ВидСклада");
	    Иначе
			СтруктураПолей.Вставить("ВидСклада"   , "Склад.ВидСклада");
		КонецЕсли;
	КонецЕсли;
	
	СтруктураПолей.Вставить("ДокументПолучения"                    , "ПриходныйОрдер");
	СтруктураПолей.Вставить("ОрганизацияДокументаПолучения"        , "ПриходныйОрдер.Организация");
	СтруктураПолей.Вставить("БезПраваПродажи"                      , "ПриходныйОрдер.БезПраваПродажи");
	СтруктураПолей.Вставить("Цена"                                 , "Цена");
	СтруктураПолей.Вставить("НДС"                                  , "СуммаНДС");
	СтруктураПолей.Вставить("Коэффициент"                          , "Коэффициент");
	СтруктураПолей.Вставить("ПриходныйОрдерСклад"                  , "ПриходныйОрдер.Склад");
	СтруктураПолей.Вставить("УчетПоСериям"                         , "Номенклатура.ВестиУчетПоСериям");
	СтруктураПолей.Вставить("СтранаПроисхождения"                  , "СерияНоменклатуры.СтранаПроисхождения");
	СтруктураПолей.Вставить("НомерГТД"                             , "СерияНоменклатуры.НомерГТД");
	СтруктураПолей.Вставить("ЗаказПоставщику"                      , "ЗаказПоставщику");

	// Дополним полями, нужными для регл. и упр. учета
	ДополнитьСтруктуруПолейТабличнойЧастиТоварыРегл(СтруктураПолей, СтруктураШапкиДокумента);
	
	Если СтруктураШапкиДокумента.ВедениеУчетаПоПроектам И НЕ ЗначениеЗаполнено(Проект) Тогда
		СтруктураСложныхПолей=Новый Структура;
		СтруктураСложныхПолей.Вставить("Проект", "ПроектыНоменклатуры.Проект");
	Иначе
		СтруктураСложныхПолей=Неопределено;	
	КонецЕсли;
		
	РезультатЗапросаПоТоварам = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураПолей, СтруктураСложныхПолей);
	
	// Получим необходимые данные для проведения и проверки заполнения данные 
	// по табличной части "Услуги".
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Номенклатура",             "Номенклатура");
	СтруктураПолей.Вставить("Количество",               "Количество");
	СтруктураПолей.Вставить("Сумма",                    "Сумма");
	СтруктураПолей.Вставить("СтавкаНДС",                "СтавкаНДС");
	СтруктураПолей.Вставить("НДС",                      "СуммаНДС");
	СтруктураПолей.Вставить("СуммаНДС",                 "СуммаНДС");
	СтруктураПолей.Вставить("Содержание",               "Содержание");
	СтруктураПолей.Вставить("Услуга",                   "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Набор",                    "Номенклатура.Набор");
	СтруктураПолей.Вставить("Комплект",                 "Номенклатура.Комплект");
	СтруктураПолей.Вставить("СтатьяЗатрат",             "СтатьяЗатрат");
	СтруктураПолей.Вставить("ХарактерЗатрат",           "СтатьяЗатрат.ХарактерЗатрат");
	СтруктураПолей.Вставить("Продукция",                "Продукция");
	СтруктураПолей.Вставить("ХарактеристикаПродукции",  "ХарактеристикаПродукции");
	СтруктураПолей.Вставить("СерияПродукции",           "СерияПродукции");
	СтруктураПолей.Вставить("Подразделение",            "Подразделение");
	СтруктураПолей.Вставить("ПодразделениеОрганизации", "ПодразделениеОрганизации");
	СтруктураПолей.Вставить("Заказ",                    "Заказ");
	СтруктураПолей.Вставить("ЗаказПоставщику",          "ЗаказПоставщику");
	СтруктураПолей.Вставить("СпособРаспределенияЗатратНаВыпуск", "СпособРаспределенияЗатратНаВыпуск");
	СтруктураПолей.Вставить("ПроектЗатрат", "Проект");
	
	// Дополним полями, нужными для регл. и упр. учета
	ДополнитьСтруктуруПолейТабличнойЧастиУслугиУпр(СтруктураПолей);
	ДополнитьСтруктуруПолейТабличнойЧастиУслугиРегл(СтруктураПолей);
	
	СтруктураОбрабатываемыхКолонок = Новый Структура();
	СтруктураЗависимыхКолонок = Новый Структура();
	ДополнитьСтруктуруПолейДаннымиНоменклатуры(СтруктураПолей, СтруктураОбрабатываемыхКолонок, СтруктураЗависимыхКолонок);
	
	Если СтруктураШапкиДокумента.ВедениеУчетаПоПроектам И НЕ ЗначениеЗаполнено(Проект) Тогда
		СтруктураСложныхПолей=Новый Структура;
		СтруктураСложныхПолей.Вставить("Проект", "ПроектыНоменклатуры.Проект");
	Иначе
		СтруктураСложныхПолей=Неопределено;	
	КонецЕсли;
	
	РезультатЗапросаПоУслугам = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Услуги", СтруктураПолей, СтруктураСложныхПолей);

	// Получим необходимые данные для проведения и проверки заполнения данные 
	// по табличной части "Оборудование".
	СтруктураПолей = УправлениеЗапасами.СформироватьСтруктуруПолейТовары();
	СтруктураПолей.Вставить("Цена" ,            "Цена");
	СтруктураПолей.Вставить("ЕдиницаИзмерения", "ЕдиницаИзмерения");
	СтруктураПолей.Вставить("ЗаказПоставщику",  "ЗаказПоставщику");
	Если СкладИзШапки и ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад Тогда
		СтруктураПолей.Вставить("Склад"                                , "Ссылка.СкладОрдер");
    Иначе
		СтруктураПолей.Вставить("Склад"                                , "Склад");
	КонецЕсли;
	СтруктураПолей.Вставить("ДокументПолучения"                    , "ПриходныйОрдер");
	СтруктураПолей.Вставить("ОрганизацияДокументаПолучения"        , "ПриходныйОрдер.Организация");
	СтруктураПолей.Вставить("ПриходныйОрдерСклад"                  , "ПриходныйОрдер.Склад");
	СтруктураПолей.Вставить("БезПраваПродажи"                      , "ПриходныйОрдер.БезПраваПродажи");
	
	Если СтруктураШапкиДокумента.ВедениеУчетаПоПроектам И НЕ ЗначениеЗаполнено(Проект) Тогда
		СтруктураСложныхПолей=Новый Структура;
		СтруктураСложныхПолей.Вставить("Проект", "ПроектыНоменклатуры.Проект");
	Иначе
		СтруктураСложныхПолей=Неопределено;	
	КонецЕсли;

	// Дополним полями, нужными для регл. и упр. учета
	ДополнитьСтруктуруПолейТабличнойЧастиОборудованиеУпр(СтруктураПолей);
	ДополнитьСтруктуруПолейТабличнойЧастиОборудованиеРегл(СтруктураПолей, СтруктураШапкиДокумента);

	РезультатЗапросаПоОборудованию = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Оборудование", СтруктураПолей, СтруктураСложныхПолей);
	
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("ОбъектСтроительства", "ОбъектСтроительства");
	СтруктураПолей.Вставить("СпособСтроительства", "СпособСтроительства");
	СтруктураПолей.Вставить("СтатьяЗатрат"       , "СтатьяЗатрат");
	СтруктураПолей.Вставить("Сумма"              , "Сумма");
	СтруктураПолей.Вставить("СуммаНДС"           , "СуммаНДС");
	СтруктураПолей.Вставить("СтавкаНДС"			 , "СтавкаНДС");
	СтруктураПолей.Вставить("НДС"				 , "СуммаНДС");
	
	ДополнитьСтруктуруПолейТабличнойЧастиОбъектыСтроительстваРегл(СтруктураПолей, СтруктураШапкиДокумента);

	РезультатЗапросаПоОбъектамСтроительства = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ОбъектыСтроительства", СтруктураПолей);

	// Получим необходимые данные для проведения и проверки заполнения данные 
	// по табличной части "Возвратная тара".
	СтруктураПолей = УправлениеЗапасами.СформироватьСтруктуруПолейТара();
	СтруктураПолей.Вставить("ЗаказПокупателя"           , "Заказ");
	СтруктураПолей.Вставить("Цена"                      , "Цена");
	Если СкладИзШапки и ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад Тогда
		СтруктураПолей.Вставить("Склад"                                , "Ссылка.СкладОрдер");
		СтруктураПолей.Вставить("ВидСклада"								, 	 "Ссылка.СкладОрдер.ВидСклада");
    Иначе
		СтруктураПолей.Вставить("Склад"                                , "Склад");
		СтруктураПолей.Вставить("ВидСклада"								,"Склад.ВидСклада");
	КонецЕсли;
	СтруктураПолей.Вставить("ДокументПолучения"         , "ПриходныйОрдер");
	СтруктураПолей.Вставить("БезПраваПродажи"           , "ПриходныйОрдер.БезПраваПродажи");
	СтруктураПолей.Вставить("СкладЗаказаПокупателя"     , "Заказ.СкладГруппа");
	СтруктураПолей.Вставить("ОбособленныйУчетТоваровПоЗаказамПокупателей", 
	                        "Заказ.ДоговорКонтрагента.ОбособленныйУчетТоваровПоЗаказамПокупателей");
	СтруктураПолей.Вставить("ВидСкладаРазмещения"       , "Склад.ВидСклада");
	СтруктураПолей.Вставить("ПриходныйОрдерСклад"       , "ПриходныйОрдер.Склад");
	СтруктураПолей.Вставить("ЕдиницаИзмерения"          , "Номенклатура.ЕдиницаХраненияОстатков");
	СтруктураПолей.Вставить("ЗаказПоставщику"           , "ЗаказПоставщику");

	// Дополним полями, нужными для регл. и упр. учета
	ДополнитьСтруктуруПолейТабличнойЧастиВозвратнаяТараУпр(СтруктураПолей);
	ДополнитьСтруктуруПолейТабличнойЧастиВозвратнаяТараРегл(СтруктураПолей, СтруктураШапкиДокумента);
	
	РезультатЗапросаПоТаре = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ВозвратнаяТара", СтруктураПолей);

	// Подготовим таблицы товаров для проведения.
	ТаблицаПоТаре         = ПодготовитьТаблицуТары(РезультатЗапросаПоТаре, СтруктураШапкиДокумента);

	ТаблицаПоТоварам      = ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента);
	ТаблицаПоОборудованию = ПодготовитьТаблицуТоваров(РезультатЗапросаПоОборудованию, СтруктураШапкиДокумента);
	ТаблицаПоУслугам      = ПодготовитьТаблицуТоваров(РезультатЗапросаПоУслугам, СтруктураШапкиДокумента);
	ТаблицаПоОбъектамСтроительства = ПодготовитьТаблицуОбъектовСтроительства(РезультатЗапросаПоОбъектамСтроительства, СтруктураШапкиДокумента);
	
	//Заполним в таблице по услугам подразделение организации
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицуДокументаПодразделениемОрганизации(СтруктураШапкиДокумента, ТаблицаПоУслугам);
	
	//Заполнение незаполненных СтатьиЗатрат и НоменклатурнойГруппы по Номенклатуре в Таблице услуг
	ОбщегоНазначенияКлиентСервер.ЗаполнитьНоменклатурнуюГруппуИСтатьюЗатратВТаблицеДокумента(ТаблицаПоУслугам, СтруктураОбрабатываемыхКолонок, СтруктураЗависимыхКолонок);
	
	//Счета учета номенклатуры и затрат
	СчетаУчетаВДокументах.ЗаполнитьПриПроведенииСчетаУчетаТабличнойЧасти("Товары", 			ТаблицаПоТоварам, 		СтруктураШапкиДокумента);
	СчетаУчетаВДокументах.ЗаполнитьПриПроведенииСчетаУчетаТабличнойЧасти("ВозвратнаяТара", 	ТаблицаПоТаре, 			СтруктураШапкиДокумента);
	СчетаУчетаВДокументах.ЗаполнитьПриПроведенииСчетаУчетаТабличнойЧасти("Услуги", 			ТаблицаПоУслугам, 		СтруктураШапкиДокумента);
	СчетаУчетаВДокументах.ЗаполнитьПриПроведенииСчетаУчетаТабличнойЧасти("Оборудование", 	ТаблицаПоОборудованию, 	СтруктураШапкиДокумента);
	
	БухгалтерскийУчетРасчетовСКонтрагентами.ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(ТаблицаПоТоварам,               СтруктураШапкиДокумента,СтруктураШапкиДокумента.НДСВключенВСтоимость,мВалютаРегламентированногоУчета);
	БухгалтерскийУчетРасчетовСКонтрагентами.ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(ТаблицаПоОборудованию,          СтруктураШапкиДокумента,СтруктураШапкиДокумента.НДСВключенВСтоимость,мВалютаРегламентированногоУчета);
	БухгалтерскийУчетРасчетовСКонтрагентами.ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(ТаблицаПоОбъектамСтроительства, СтруктураШапкиДокумента,СтруктураШапкиДокумента.НДСВключенВСтоимость,мВалютаРегламентированногоУчета);
	БухгалтерскийУчетРасчетовСКонтрагентами.ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(ТаблицаПоУслугам              , СтруктураШапкиДокумента,СтруктураШапкиДокумента.НДСВключенВСтоимость,мВалютаРегламентированногоУчета);
	БухгалтерскийУчетРасчетовСКонтрагентами.ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(ТаблицаПоТаре                 , СтруктураШапкиДокумента,СтруктураШапкиДокумента.НДСВключенВСтоимость,мВалютаРегламентированногоУчета);
	
	БухгалтерскийУчет.СформироватьКолонкиДляСодержанияПроводкиПоВходящемуДокументу(ТаблицаПоТоварам, "вх.док.", НомерВходящегоДокумента, ДатаВходящегоДокумента);	
	БухгалтерскийУчет.СформироватьСодержаниеПроводкиПоВходящемуДокументу(ТаблицаПоТоварам, "Поступление");
    БухгалтерскийУчет.СформироватьКолонкиДляСодержанияПроводкиПоВходящемуДокументу(ТаблицаПоУслугам, "вх.док.", НомерВходящегоДокумента, ДатаВходящегоДокумента);	
	БухгалтерскийУчет.СформироватьСодержаниеПроводкиПоВходящемуДокументу(ТаблицаПоУслугам, "");
    БухгалтерскийУчет.СформироватьКолонкиДляСодержанияПроводкиПоВходящемуДокументу(ТаблицаПоОборудованию, "вх.док.", НомерВходящегоДокумента, ДатаВходящегоДокумента);	
	БухгалтерскийУчет.СформироватьСодержаниеПроводкиПоВходящемуДокументу(ТаблицаПоОборудованию, "Поступление");
    БухгалтерскийУчет.СформироватьКолонкиДляСодержанияПроводкиПоВходящемуДокументу(ТаблицаПоОбъектамСтроительства, "вх.док.", НомерВходящегоДокумента, ДатаВходящегоДокумента);	
	БухгалтерскийУчет.СформироватьСодержаниеПроводкиПоВходящемуДокументу(ТаблицаПоОбъектамСтроительства, "Поступление");
	
КонецПроцедуры // СформироватьТаблицыДокумента()

// Процедура - обработчик события "ОбработкаПроведения".
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	Перем Заголовок, СтруктураШапкиДокумента;
	Перем ТаблицаПоТоварам, ТаблицаПоУслугам, ТаблицаПоОборудованию, ТаблицаПоОбъектамСтроительства, ТаблицаПоТаре;
	Перем ТаблицаПоВзаиморасчетам, ТаблицаПоРасчетам;
	
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, Истина, РежимПроведения);
	КонецЕсли;

	ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, РежимПроведения,Отказ);
	
	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);

	Если Отказ Тогда 
		Возврат;
	КонецЕсли;	
	
	ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугам, ТаблицаПоОборудованию, ТаблицаПоОбъектамСтроительства, ТаблицаПоТаре);
	
	ПроводитьПоВзаиморасчетам = (СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком 
		И ВидОперации <> Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку);
	мСтруктураПараметровВзаиморасчетов.Вставить("ПроводитьПоВзаиморасчетам", ПроводитьПоВзаиморасчетам);
	
	СтруктураПодготовленныхТаблиц = Новый Структура("Товары, Услуги, Оборудование, ОбъектыСтроительства", 
		ТаблицаПоТоварам, ТаблицаПоУслугам, ТаблицаПоОборудованию, ТаблицаПоОбъектамСтроительства);
	мСтруктураПараметровВзаиморасчетов.Вставить("СтруктураПодготовленныхТаблиц", СтруктураПодготовленныхТаблиц);
	УправлениеВзаиморасчетами.ПодготовитьТаблицыДляПроведенияПоВзаиморасчетам(ТаблицаПоВзаиморасчетам, ТаблицаПоРасчетам, 
	                                                ЭтотОбъект, мСтруктураПараметровВзаиморасчетов, СтруктураШапкиДокумента, 
													Отказ, Заголовок);

	// Проверить заполнение ТЧ 
	ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок);
	ПроверитьЗаполнениеТабличнойЧастиУслуги(ТаблицаПоУслугам, СтруктураШапкиДокумента, Отказ, Заголовок);
	ПроверитьЗаполнениеТабличнойЧастиОборудование(ТаблицаПоОборудованию, СтруктураШапкиДокумента, Отказ, Заголовок);
	ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара(ТаблицаПоТаре, СтруктураШапкиДокумента, Отказ, Заголовок);
	ПроверитьЗаполнениеТабличнойЧастиОбъектыСтроительства(ТаблицаПоОбъектамСтроительства, СтруктураШапкиДокумента, Отказ, Заголовок);

	//Счета учета номенклатуры и затрат
	СчетаУчетаВДокументах.ПроверитьСчетаУчетаТабличнойЧасти("Товары", 			ТаблицаПоТоварам, 		СтруктураШапкиДокумента, Отказ, Заголовок);
	СчетаУчетаВДокументах.ПроверитьСчетаУчетаТабличнойЧасти("ВозвратнаяТара", 	ТаблицаПоТаре, 			СтруктураШапкиДокумента, Отказ, Заголовок);
	СчетаУчетаВДокументах.ПроверитьСчетаУчетаТабличнойЧасти("Услуги", 			ТаблицаПоУслугам, 		СтруктураШапкиДокумента, Отказ, Заголовок);
	СчетаУчетаВДокументах.ПроверитьСчетаУчетаТабличнойЧасти("Оборудование", 		ТаблицаПоОборудованию, 	СтруктураШапкиДокумента, Отказ, Заголовок);
	
	//Проверим на возможность проведения в БУ и НУ
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете или СтруктураШапкиДокумента.ОтражатьВНалоговомУчете тогда
		УправлениеВзаиморасчетами.ПроверкаВозможностиПроведенияВ_БУ_НУ(ДоговорКонтрагента, СтруктураШапкиДокумента.ВалютаДокумента,
		СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете,СтруктураШапкиДокумента.ОтражатьВНалоговомУчете,
		мВалютаРегламентированногоУчета, Ложь,Отказ, Заголовок);
	КонецЕсли;
	
	ПодготовитьПараметрыУчетнойПолитики(Отказ, Заголовок, СтруктураШапкиДокумента);
	
	// Движения по документу
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, 
							ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоУслугам, ТаблицаПоОборудованию,
							ТаблицаПоОбъектамСтроительства, ТаблицаПоВзаиморасчетам, ТаблицаПоРасчетам,
							Отказ, Заголовок);
	КонецЕсли;

	//Сделаем переменные доступными из подписок на события
	ДополнительныеСвойства.Вставить("СтруктураШапкиДокумента", СтруктураШапкиДокумента);
	ДополнительныеСвойства.Вставить("СтруктураТабличныхЧастей", Новый Структура("ТаблицаПоТоварам, ТаблицаПоОборудованию, ТаблицаПоТаре, ТаблицаПоОбъектамСтроительства, ТаблицаПоОборудованию", ТаблицаПоТоварам, ТаблицаПоОборудованию, ТаблицаПоТаре, ТаблицаПоОбъектамСтроительства, ТаблицаПоОборудованию));
	
КонецПроцедуры // ОбработкаПроведения()

// Процедура вызывается из тела процедуры ДвиженияПоРегистрамРегл
// Формирует движения по постоянным и временным разницам по табличной части Услуги
Процедура ДвиженияПоРазницамПоУслугам(СтруктураШапкиДокумента, ТаблицаПоУслугам, ПроводкиНУ)
	
	Если НЕ СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
		Возврат;
	КонецЕсли;
	
	Если Не УчетнаяПолитикаРегл.ПоддержкаПБУ18 Тогда
		Возврат;
	КонецЕсли;
	
	ДатаДока   = Дата;
	
	// Подготовим структуру таблицы для отражения затрат.
	ТаблицаЗатрат = УправлениеЗатратами.СформироватьТаблицуЗатрат();
	
	Для Каждого СтрокаТЧ из ТаблицаПоУслугам Цикл
		
		//СуммаВПроводку = СтрокаТЧ.Сумма - СтрокаТЧ.СуммаНДС;
		СуммаВПроводку = СтрокаТЧ.ПроводкаСумма;
		
		Если Лев(СтрокаТЧ.СчетЗатратНУ.Код, 2) = "97" Тогда
			СтатьяЗатрат1 = СтрокаТЧ.СубконтоНУ1.СтатьяЗатрат;
			СтатьяЗатрат2 = Неопределено;
			СтатьяЗатрат3 = Неопределено;
		Иначе
			СтатьяЗатрат1 = СтрокаТЧ.СубконтоНУ1;
			СтатьяЗатрат2 = СтрокаТЧ.СубконтоНУ2;
			СтатьяЗатрат3 = СтрокаТЧ.СубконтоНУ3;
		КонецЕсли;
			
		Если ТипЗнч(СтатьяЗатрат1)=Тип("СправочникСсылка.СтатьиЗатрат") Тогда
			ВидЗатрат = СтатьяЗатрат1.ВидРасходовНУ;
			ВидУчета = ?(СтатьяЗатрат1.ВидРасходовНУ = Перечисления.ВидыРасходовНУ.НеУчитываемыеВЦеляхНалогообложения, Перечисления.ВидыУчетаПоПБУ18.ПР, Перечисления.ВидыУчетаПоПБУ18.ВР);
		ИначеЕсли ТипЗнч(СтатьяЗатрат2)=Тип("СправочникСсылка.СтатьиЗатрат") Тогда
			ВидЗатрат = СтатьяЗатрат2.ВидРасходовНУ;
			ВидУчета = ?(СтатьяЗатрат2.ВидРасходовНУ = Перечисления.ВидыРасходовНУ.НеУчитываемыеВЦеляхНалогообложения, Перечисления.ВидыУчетаПоПБУ18.ПР, Перечисления.ВидыУчетаПоПБУ18.ВР);
		ИначеЕсли ТипЗнч(СтатьяЗатрат3)=Тип("СправочникСсылка.СтатьиЗатрат") Тогда
			ВидЗатрат = СтатьяЗатрат3.ВидРасходовНУ;
			ВидУчета = ?(СтатьяЗатрат3.ВидРасходовНУ = Перечисления.ВидыРасходовНУ.НеУчитываемыеВЦеляхНалогообложения, Перечисления.ВидыУчетаПоПБУ18.ПР, Перечисления.ВидыУчетаПоПБУ18.ВР);
		ИначеЕсли ТипЗнч(СтатьяЗатрат1)=Тип("СправочникСсылка.ПрочиеДоходыИРасходы") Тогда
			ВидЗатрат = СтатьяЗатрат1.ВидПрочихДоходовИРасходов;
			ВидУчета = ?(СтатьяЗатрат1.ПринятиеКналоговомуУчету, Перечисления.ВидыУчетаПоПБУ18.ВР, Перечисления.ВидыУчетаПоПБУ18.ПР);
		ИначеЕсли ТипЗнч(СтатьяЗатрат2)=Тип("СправочникСсылка.ПрочиеДоходыИРасходы") Тогда
			ВидЗатрат = СтатьяЗатрат2.ВидПрочихДоходовИРасходов;
			ВидУчета = ?(СтатьяЗатрат2.ПринятиеКналоговомуУчету, Перечисления.ВидыУчетаПоПБУ18.ВР, Перечисления.ВидыУчетаПоПБУ18.ПР);
		ИначеЕсли ТипЗнч(СтатьяЗатрат3)=Тип("СправочникСсылка.ПрочиеДоходыИРасходы") Тогда
			ВидЗатрат = СтатьяЗатрат3.ВидПрочихДоходовИРасходов;
			ВидУчета = ?(СтатьяЗатрат3.ПринятиеКналоговомуУчету, Перечисления.ВидыУчетаПоПБУ18.ВР, Перечисления.ВидыУчетаПоПБУ18.ПР);
		Иначе
			ВидЗатрат = "";
			ВидУчета = Перечисления.ВидыУчетаПоПБУ18.ВР;
		КонецЕсли;
		
		Если ВидЗатрат = "" Тогда
			СчетНУСоответствующийСчетуБУ = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ",СтрокаТЧ.СчетЗатрат), Ложь, Дата);
			Если СчетНУСоответствующийСчетуБУ = СтрокаТЧ.СчетЗатратНУ	Тогда
				Продолжить;
			КонецЕсли;
			Если СчетНУСоответствующийСчетуБУ.Родитель = СтрокаТЧ.СчетЗатратНУ.Родитель Тогда
				Продолжить;
			КонецЕсли;
		Иначе
			СчетНУСоответствующийСчетуБУ = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ, ВидЗатратНУ",СтрокаТЧ.СчетЗатрат, ВидЗатрат), Ложь, Дата);
			Если СчетНУСоответствующийСчетуБУ = СтрокаТЧ.СчетЗатратНУ	Тогда
				Продолжить;
			КонецЕсли;
			Если СчетНУСоответствующийСчетуБУ.Родитель = СтрокаТЧ.СчетЗатратНУ.Родитель Тогда
				Продолжить;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(СчетНУСоответствующийСчетуБУ)	Тогда
				СчетНУСоответствующийСчетуБУ = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ",СтрокаТЧ.СчетЗатрат), Ложь, Дата);
				Если СчетНУСоответствующийСчетуБУ = СтрокаТЧ.СчетЗатратНУ	Тогда
					Продолжить;
				КонецЕсли;
				Если СчетНУСоответствующийСчетуБУ.Родитель = СтрокаТЧ.СчетЗатратНУ.Родитель Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		// Если соответствующий счет не найден, то разницы не рассчитаны
		Если НЕ ЗначениеЗаполнено(СчетНУСоответствующийСчетуБУ)	Тогда
			Продолжить;
		КонецЕсли;
		
		Проводка = ПроводкиНУ.Добавить();
			
		Проводка.Период      = ДатаДока;
		Проводка.Организация = СтруктураШапкиДокумента.Организация;
		Проводка.Содержание  = СтрокаТЧ.Содержание;
			
		Проводка.СчетДт      = СчетНУСоответствующийСчетуБУ;
			
		ПроизводственныеРасходыНУ = УправлениеЗатратами.ПроверитьСчетЗатратНаПроизводственныеРасходы(СчетНУСоответствующийСчетуБУ, "Налоговый");
			
		Если ПроизводственныеРасходыНУ Тогда
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Подразделения",        СтрокаТЧ.ПодразделениеОрганизации);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "НоменклатурныеГруппы", СтрокаТЧ.НоменклатурнаяГруппа);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтатьиЗатрат",         СтрокаТЧ.СтатьяЗатрат);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОбъектыСтроительства", СтрокаТЧ.ОбъектСтроительства);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СпособыСтроительства", СтрокаТЧ.СпособСтроительства);
		Иначе
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,1, СтрокаТЧ.Субконто1);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,2, СтрокаТЧ.Субконто2);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,3, СтрокаТЧ.Субконто3);
		КонецЕсли;
						
		Проводка.Сумма = СуммаВПроводку;
		Проводка.ВидУчетаДт = ВидУчета;
		
		// Добавим строку в таблицу затрат.
		Если ПроизводственныеРасходыНУ Тогда
			НоваяСтрока = ТаблицаЗатрат.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
			НоваяСтрока.СуммаБезНДС = 0;
			НоваяСтрока.СуммаРегл = 0;
			НоваяСтрока.СчетЗатратНУ = СчетНУСоответствующийСчетуБУ;
			
			Если ВидУчета = Перечисления.ВидыУчетаПоПБУ18.ВР Тогда
				НоваяСтрока.ВременнаяРазница = СуммаВПроводку;
			ИначеЕсли ВидУчета = Перечисления.ВидыУчетаПоПБУ18.ПР Тогда
				НоваяСтрока.ПостояннаяРазница = СуммаВПроводку;
			КонецЕсли;
		КонецЕсли;
			
		Проводка = ПроводкиНУ.Добавить();
			
		Проводка.Период      = ДатаДока;
		Проводка.Организация = СтруктураШапкиДокумента.Организация;
		Проводка.Содержание  = СтрокаТЧ.Содержание;
		
		ПроизводственныеРасходыНУ = УправлениеЗатратами.ПроверитьСчетЗатратНаПроизводственныеРасходы(СтрокаТЧ.СчетЗатратНУ, "Налоговый");
		
		Проводка.СчетДт = СтрокаТЧ.СчетЗатратНУ;
		Если ПроизводственныеРасходыНУ Тогда
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Подразделения",        СтрокаТЧ.ПодразделениеОрганизации);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "НоменклатурныеГруппы", СтрокаТЧ.НоменклатурнаяГруппа);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтатьиЗатрат",         СтрокаТЧ.СтатьяЗатрат);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОбъектыСтроительства", СтрокаТЧ.ОбъектСтроительства);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СпособыСтроительства", СтрокаТЧ.СпособСтроительства);
		Иначе
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,1, СтрокаТЧ.СубконтоНУ1);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,2, СтрокаТЧ.СубконтоНУ2);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,3, СтрокаТЧ.СубконтоНУ3);
			Проводка.Сумма = - СуммаВПроводку;
		КонецЕсли;
		Проводка.Сумма = - СуммаВПроводку;
		Проводка.ВидУчетаДт = ВидУчета;
		
		// Добавим строку в таблицу затрат.
		Если ПроизводственныеРасходыНУ Тогда
			НоваяСтрока = ТаблицаЗатрат.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
			НоваяСтрока.СуммаБезНДС = 0;
			НоваяСтрока.СуммаРегл = 0;
			
			Если ВидУчета = Перечисления.ВидыУчетаПоПБУ18.ВР Тогда
				НоваяСтрока.ВременнаяРазница = - СуммаВПроводку;
			ИначеЕсли ВидУчета = Перечисления.ВидыУчетаПоПБУ18.ПР Тогда
				НоваяСтрока.ПостояннаяРазница = - СуммаВПроводку;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ТаблицаЗатрат.Количество() > 0 Тогда
		
		ВремСтруктураШапкиДокумента = Новый Структура;
		ВремСтруктураШапкиДокумента.Вставить("Ссылка", СтруктураШапкиДокумента.Ссылка);
		ВремСтруктураШапкиДокумента.Вставить("Дата", СтруктураШапкиДокумента.Дата);
		ВремСтруктураШапкиДокумента.Вставить("Организация", СтруктураШапкиДокумента.Организация);
		ВремСтруктураШапкиДокумента.Вставить("ОтражатьВБухгалтерскомУчете", Ложь);
		ВремСтруктураШапкиДокумента.Вставить("ОтражатьВНалоговомУчете", Истина);
		
		УправлениеЗатратами.ДвиженияПоПрочимЗатратам(
			ВремСтруктураШапкиДокумента, 
			ТаблицаЗатрат
		);
		
	КонецЕсли;
		
КонецПроцедуры // ДвиженияПоРазницамПоУслугам()

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если НЕ ОтражатьВУправленческомУчете И НЕ ОтражатьВБухгалтерскомУчете Тогда
		СтрокаСообщения = Нстр("ru = 'Документ должен принадлежать хотя бы одному из видов учета: ""Управленческий"" и (или)  ""Бухгалтерский"".'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения, ЭтотОбъект,,, Отказ);
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ОбъектыСтроительства Тогда
		//Не проверяем ВидПоступления
		НомерУдаляемогоЭлемента = ПроверяемыеРеквизиты.Найти("ВидПоступления");
		Если НомерУдаляемогоЭлемента <> Неопределено Тогда
			ПроверяемыеРеквизиты.Удалить(НомерУдаляемогоЭлемента);
		КонецЕсли;
	КонецЕсли;

	Если ВидПоступления <> Перечисления.ВидыПоступленияТоваров.НаСклад
	 ИЛИ мУказаниеСкладовВТЧ
	 ИЛИ (Товары.Количество() + ВозвратнаяТара.Количество() + Оборудование.Количество()) = 0 Тогда
		//Не требуется указание склада в шапке
		НомерУдаляемогоЭлемента = ПроверяемыеРеквизиты.Найти("СкладОрдер");
		Если НомерУдаляемогоЭлемента <> Неопределено Тогда
			ПроверяемыеРеквизиты.Удалить(НомерУдаляемогоЭлемента);
		КонецЕсли;
	КонецЕсли;
	
	Если УчитыватьНДС Тогда
		ПроверяемыеРеквизиты.Добавить("Товары.СтавкаНДС");
		ПроверяемыеРеквизиты.Добавить("Услуги.СтавкаНДС");
	КонецЕсли;

	// Единица измерения мест должна быть заполнена, если указано количество мест
	ОбработкаТабличныхЧастейСервер.ПроверитьЗаполненаЕдиницаИзмеренияМест(Товары, ЭтотОбъект, Отказ);
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, "Покупка", ОбъектКопирования.Ссылка);
КонецПроцедуры

мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");

мПараметрыСвязиСтрокТЧ = Новый Соответствие;
мПараметрыСвязиСтрокТЧ.Вставить("Товары", Новый Структура("СвободныйКлюч, ФлагМодификации", Неопределено, Ложь));

мУказаниеПроектовВТабличнойЧастиДокументов = УправлениеПроектами.УказаниеПроектовВТабличнойЧастиДокументов();

мСтруктураПараметровВзаиморасчетов = Новый Структура;
мСтруктураПараметровВзаиморасчетов.Вставить("СтруктураТабличныхЧастей", Новый Структура("Товары, Услуги, Оборудование, ОбъектыСтроительства"));
мСтруктураПараметровВзаиморасчетов.Вставить("Направление", "Поступление");
мСтруктураПараметровВзаиморасчетов.Вставить("ЕстьЗаказыВТабличныхЧастях", Истина);
мСтруктураПараметровВзаиморасчетов.Вставить("ИмяЗаказаВТабличныхЧастях", "ЗаказПоставщику");

мСтруктураПараметровДляПолученияДоговора = ЗаполнениеДокументов.ПолучитьСтруктуруПараметровДляПолученияДоговораПокупки();

УказаниеСкладов = Константы.УказаниеСкладовВТабличнойЧастиДокументов.Получить();

мУказаниеСкладовВТЧ = (УказаниеСкладов = Перечисления.ВариантыУказанияСкладовВТабличнойЧастиДокументов.ДляДокументовПоступленияРеализации)
                      Или (УказаниеСкладов = Перечисления.ВариантыУказанияСкладовВТабличнойЧастиДокументов.ДляДокументовПоступления);
					  
мИспользоватьТару = Константы.ИспользоватьВозвратнуюТару.Получить();


