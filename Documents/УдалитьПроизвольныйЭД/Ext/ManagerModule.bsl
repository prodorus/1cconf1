#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

// Возвращает Истина, если объект имеет один из статусов (ПереданОператору, Отправлен, ПолученоПодтверждение,
// ОтправленоПодтверждение, ДоставленоПодтверждение)
//   Параметры:
//     Объект - ДокументСсылка.ПроизвольныйЭД - ссылка на документ
//
//  ВозвращаемоеЗначение:
//    Булево - документ в одном из перечисленных статусов
//
Функция СтатусОбъектаПередан(Объект) Экспорт
	
	Результат = (Объект.СтатусДокумента = Перечисления.СтатусыЭД.ПереданОператору
		ИЛИ Объект.СтатусДокумента = Перечисления.СтатусыЭД.Отправлен
		ИЛИ Объект.СтатусДокумента = Перечисления.СтатусыЭД.ПолученоПодтверждение
		ИЛИ Объект.СтатусДокумента = Перечисления.СтатусыЭД.ОтправленоПодтверждение
		ИЛИ Объект.СтатусДокумента = Перечисления.СтатусыЭД.ДоставленоПодтверждение
		ИЛИ Объект.СтатусДокумента = Перечисления.СтатусыЭД.Аннулирован
		ИЛИ Объект.СтатусДокумента = Перечисления.СтатусыЭД.ОтправленоПредложениеОбАннулировании
		ИЛИ Объект.СтатусДокумента = Перечисления.СтатусыЭД.СформированоПредложениеОбАннулировании
		ИЛИ Объект.СтатусДокумента = Перечисления.СтатусыЭД.ПолученоПредложениеОбАннулировании
		ИЛИ Объект.СтатусДокумента = Перечисления.СтатусыЭД.Доставлен
		ИЛИ ((Объект.СтатусДокумента = Перечисления.СтатусыЭД.ПодготовленКОтправке
				ИЛИ Объект.СтатусДокумента = Перечисления.СтатусыЭД.ПодготовленоПодтверждение)
			И Константы.ИспользоватьОтложеннуюОтправкуЭлектронныхДокументов.Получить()));
		
	Возврат Результат;
	
КонецФункции

Функция СтатусПредполагаетПодпись(Объект) Экспорт
	
	Результат = (Объект.СтатусДокумента = Перечисления.СтатусыЭД.Сформирован
		Или Объект.СтатусДокумента = Перечисления.СтатусыЭД.Получен
		Или Объект.СтатусДокумента = Перечисления.СтатусыЭД.Утвержден);
		
	Возврат Результат;
	
КонецФункции

// Обработчик обновления БЭД 1.1.14.2
// Заполняет тип документа
//
Процедура ЗаполнитьТипДокумента() Экспорт
	
	ЭлементСсылка = Документы.УдалитьПроизвольныйЭД.Выбрать();
	
	Пока ЭлементСсылка.Следующий() Цикл
		Если НЕ ЗначениеЗаполнено(ЭлементСсылка.ТипДокумента) Тогда
			Попытка
				ЭлементОбъект = ЭлементСсылка.ПолучитьОбъект();
				ЭлементОбъект.ТипДокумента = Перечисления.ТипыЭД.Прочее;
				ЭлементОбъект.Записать();
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьВыборкуЭД(УникальныйИД, ВладелецФайла);
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	|	ЭДПрисоединенныеФайлы.Ссылка
	|ИЗ
	|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	|ГДЕ
	|	ЭДПрисоединенныеФайлы.УникальныйИД = &УникальныйИД
	|	И ЭДПрисоединенныеФайлы.УдалитьВладелецФайла = &ВладелецФайла";
	
	Запрос.УстановитьПараметр("УникальныйИД",УникальныйИД);
	Запрос.УстановитьПараметр("ВладелецФайла",ВладелецФайла);
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

// Обработчик обновления БЭД 1.1.25.0
// Переводит на новую архитектуру произвольные документы.
//
// Параметры:
//  Параметры - Структура - параметры обработчика обновления.
//
Процедура ПеревестиНаНовуюАрхитектуруПроизвольныхЭД() Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПроизвольныйЭД.Направление,
	|	ПроизвольныйЭД.Прочитан,
	|	ПроизвольныйЭД.СтатусДокумента,
	|	ВЫРАЗИТЬ(ПроизвольныйЭД.Текст КАК СТРОКА(1000)) КАК Текст,
	|	ПроизвольныйЭД.ТребуетсяПодтверждение,
	|	ПроизвольныйЭД.ТипДокумента,
	|	ПроизвольныйЭД.ДокументОснование,
	|	ПроизвольныйЭД.ДоговорКонтрагента,
	|	ЭДПрисоединенныеФайлы.ВерсияРегламентаЭДО КАК ВерсияРегламентаЭДО,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЭД.ПроизвольныйЭД) КАК ВидЭД,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ПервичныйЭД) КАК ТипЭлементаВерсииЭД,
	|	ЭДПрисоединенныеФайлы.ДатаДокументаОтправителя КАК ДатаДокументаОтправителя,
	|	ЭДПрисоединенныеФайлы.НомерВерсииЭД КАК НомерВерсииЭД,
	|	ЭДПрисоединенныеФайлы.НомерДокументаОтправителя КАК НомерДокументаОтправителя,
	|	ЭДПрисоединенныеФайлы.Ответственный КАК Ответственный,
	|	ЭДПрисоединенныеФайлы.ПричинаОтклонения КАК ПричинаОтклонения,
	|	ЭДПрисоединенныеФайлы.ПрофильНастроекЭДО КАК ПрофильНастроекЭДО,
	|	ЭДПрисоединенныеФайлы.СоглашениеЭД КАК НастройкаЭДО,
	|	ЭДПрисоединенныеФайлы.СуммаДокумента КАК СуммаДокумента,
	|	ЭДПрисоединенныеФайлы.УникальныйИД КАК УникальныйИД,
	|	ЭДПрисоединенныеФайлы.УникальныйИДВнешний КАК УникальныйИДВнешний,
	|	ПроизвольныйЭД.Организация,
	|	ПроизвольныйЭД.Контрагент,
	|	ПроизвольныйЭД.Дата КАК Дата,
	|	ПроизвольныйЭД.Ссылка,
	|	ЭДПрисоединенныеФайлы.Ссылка КАК ЭД,
	|	ПроизвольныйЭД.Номер КАК НомерПЭД,
	|	СостоянияЭД.СостояниеВерсииЭД,
	|	ЭДПрисоединенныеФайлы.ИдентификаторыОснованийВладельцаФайла.(
	|		ИдентификаторДокументаОснования,
	|		ИдентификаторЭДДокументаОснования
	|	) КАК Основания,
	|	ЕСТЬNULL(СостоянияЭД.Комментарий, """") КАК Комментарий
	|ИЗ
	|	Документ.УдалитьПроизвольныйЭД КАК ПроизвольныйЭД
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	|		ПО ПроизвольныйЭД.Ссылка = ЭДПрисоединенныеФайлы.УдалитьВладелецФайла
	|			И (ЭДПрисоединенныеФайлы.ТипЭлементаВерсииЭД = ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ПервичныйЭД))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияЭД КАК СостоянияЭД
	|		ПО (СостоянияЭД.СсылкаНаОбъект = ПроизвольныйЭД.Ссылка)
	|ГДЕ
	|	НЕ ПроизвольныйЭД.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата УБЫВ";
	
	Результат = Запрос.Выполнить();
	
	Пока НЕ Результат.Пустой() Цикл
		
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			НачатьТранзакцию();
			
			Попытка
				
				Блокировка = Новый БлокировкаДанных;
				
				ЭлементБлокировки = Блокировка.Добавить("Документ.УдалитьПроизвольныйЭД");
				ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
				ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
				
				ЭлементБлокировки = Блокировка.Добавить("Справочник.ЭДПрисоединенныеФайлы");
				ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.ЭД);
				ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
				
				Блокировка.Заблокировать();
				
				Если Выборка.Направление = Перечисления.НаправленияЭД.Входящий Тогда
					ДокументОбъект = Документы.ЭлектронныйДокументВходящий.СоздатьДокумент();
					Если ЗначениеЗаполнено(Выборка.ДокументОснование) Тогда
						НоваяСтрока = ДокументОбъект.ДокументыОснования.Добавить();
						НоваяСтрока.ДокументОснование = Выборка.ДокументОснование;
					КонецЕсли;
				Иначе
					ДокументОбъект = Документы.ЭлектронныйДокументИсходящий.СоздатьДокумент();
					Если ЗначениеЗаполнено(Выборка.ДокументОснование) Тогда
						НоваяСтрока = ДокументОбъект.ДокументыОснования.Добавить();
						НоваяСтрока.ДокументОснование = Выборка.ДокументОснование;
					КонецЕсли;
				КонецЕсли;
				
				ЗаполнитьЗначенияСвойств(ДокументОбъект,Выборка);
				
				ДокументОбъект.НомерДокументаОтправителя = Выборка.НомерПЭД;
				Если Выборка.Направление = Перечисления.НаправленияЭД.Входящий Тогда
					ДокументОбъект.ДатаДокументаОтправителя = Выборка.Дата;
				КонецЕсли;
				
				Если ДокументОбъект.ПрофильНастроекЭДО.Пустая() Тогда
					НастройкиЭД = ЭлектронныеДокументыСлужебный.ОпределитьНастройкиОбменаЭДПоИсточнику(ДокументОбъект, ,,,ДокументОбъект.ВидЭД); 
					Если ЗначениеЗаполнено(НастройкиЭД) Тогда
						ДокументОбъект.НастройкаЭДО = НастройкиЭД.СоглашениеЭД;
						ДокументОбъект.ПрофильНастроекЭДО = НастройкиЭД.ПрофильНастроекЭДО;
					КонецЕсли;
				КонецЕсли;
				
				Если ДокументОбъект.ВерсияРегламентаЭДО.Пустая() Тогда
					ДокументОбъект.ВерсияРегламентаЭДО = Перечисления.ВерсииРегламентаОбмена1С.Версия10;
				КонецЕсли;
				
				Если ПустаяСтрока(ДокументОбъект.УникальныйИД) Тогда
					ДокументОбъект.УникальныйИД = Новый УникальныйИдентификатор;
				КонецЕсли;
				
				ВыборкаОснований = Выборка.Основания.Выбрать();
				
				Пока ВыборкаОснований.Следующий() Цикл
					НоваяСтрока = ДокументОбъект.ИдентификаторыОснованийВладельцаФайла.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока,ВыборкаОснований);
				КонецЦикла;
				
				ДокументОбъект.УстановитьНовыйНомер();
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДокументОбъект);
				
				// смена владельца файла ЭД
				СправочникОбъект = Выборка.ЭД.ПолучитьОбъект();
				СправочникОбъект.ВладелецФайла = ДокументОбъект.Ссылка;
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(СправочникОбъект);
				
				// состояние ЭДО
				Если Выборка.СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.Аннулирован
					ИЛИ Выборка.СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.ЗакрытПринудительно 
					ИЛИ Выборка.СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.ОбменЗавершен
					ИЛИ Выборка.СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.ОбменЗавершенСИсправлением
					ИЛИ Выборка.СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.Отклонен
					ИЛИ Выборка.СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.ОшибкаПередачи Тогда
					
					ДокументОбъект.СостояниеЭДО = Выборка.СостояниеВерсииЭД;
					Если ПустаяСтрока(ДокументОбъект.ПричинаОтклонения) 
						И НЕ ПустаяСтрока(Выборка.Комментарий) Тогда
						ДокументОбъект.ПричинаОтклонения = Выборка.Комментарий;
					КонецЕсли;
					
					НаборЗаписей = РегистрыСведений.СостоянияЭД.СоздатьНаборЗаписей();
					НаборЗаписей.Отбор.СсылкаНаОбъект.Установить(Выборка.Ссылка,Истина);
					НаборЗаписей.Записать();
				Иначе
					Если ЗначениеЗаполнено(Выборка.ЭД) Тогда
						ДокументОбъект.СостояниеЭДО = ЭлектронныеДокументыСлужебный.ОпределитьСостояниеВерсииПоСтатусуЭД(Выборка.ЭД);
					Иначе
						ДокументОбъект.СостояниеЭДО = Перечисления.СостоянияВерсийЭД.НеСформирован;
					КонецЕсли;
				КонецЕсли;
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДокументОбъект);
				
				СправочникОбъект = Выборка.ЭД.ПолучитьОбъект();
				// флаг "НаПодпись"
				ЭлектронныеДокументыСлужебный.АктуализироватьФлагНаПодпись(СправочникОбъект);
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(СправочникОбъект);
				
				// смена владельца файла по цепочке подчиненным ЭД
				ВыборкаЭД = ПолучитьВыборкуЭД(Выборка.УникальныйИД, Выборка.Ссылка);
				Пока ВыборкаЭД.Следующий() Цикл
					
					СправочникОбъект = ВыборкаЭД.Ссылка.ПолучитьОбъект();
					СправочникОбъект.ВладелецФайла = ДокументОбъект.Ссылка;
					
					// флаг "НаПодпись"
					ЭлектронныеДокументыСлужебный.АктуализироватьФлагНаПодпись(СправочникОбъект);
					ОбновлениеИнформационнойБазы.ЗаписатьДанные(СправочникОбъект);
					
				КонецЦикла;
				
				ПроизвольныйДокумент = Выборка.Ссылка.ПолучитьОбъект();
				ПроизвольныйДокумент.ПометкаУдаления = Истина;
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(ПроизвольныйДокумент);
				
				НаборЗаписей = РегистрыСведений.НаличиеПрисоединенныхФайлов.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.ОбъектСФайлами.Установить(Выборка.Ссылка);
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);
				
				ЗафиксироватьТранзакцию();
				
			Исключение
				
				ОтменитьТранзакцию();
				Операция = НСтр("ru = 'Обновление подсистемы обмена с контрагентами'");
				ПодробныйТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьОшибку(Операция, ПодробныйТекстОшибки);
				ВызватьИсключение;
				
			КонецПопытки;
			
		КонецЦикла;
		
		Результат = Запрос.Выполнить();
		
	КонецЦикла;
		
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ЭлектронныйДокументИсходящийДокументыОснования.Ссылка КАК Ссылка,
	|	ЭлектронныйДокументИсходящийДокументыОснования.ДокументОснование КАК ДокументОснование,
	|	ВЫРАЗИТЬ(ЭлектронныйДокументИсходящийДокументыОснования.ДокументОснование КАК Документ.УдалитьПроизвольныйЭД).Направление КАК НаправлениеЭД,
	|	ЭлектронныйДокументИсходящийИдентификаторыОснованийВладельцаФайла.ИдентификаторДокументаОснования КАК ИдентификаторДокументаОснования,
	|	ЭлектронныйДокументИсходящийИдентификаторыОснованийВладельцаФайла.ИдентификаторЭДДокументаОснования КАК ИдентификаторЭДДокументаОснования
	|ПОМЕСТИТЬ вт_Документы
	|ИЗ
	|	Документ.ЭлектронныйДокументИсходящий.ДокументыОснования КАК ЭлектронныйДокументИсходящийДокументыОснования
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронныйДокументИсходящий.ИдентификаторыОснованийВладельцаФайла КАК ЭлектронныйДокументИсходящийИдентификаторыОснованийВладельцаФайла
	|		ПО ЭлектронныйДокументИсходящийДокументыОснования.Ссылка = ЭлектронныйДокументИсходящийИдентификаторыОснованийВладельцаФайла.Ссылка
	|ГДЕ
	|	ЭлектронныйДокументИсходящийДокументыОснования.Ссылка.ВидЭД = Значение(Перечисление.ВидыЭД.ПроизвольныйЭД)
	|	И ЭлектронныйДокументИсходящийДокументыОснования.ДокументОснование ССЫЛКА Документ.УдалитьПроизвольныйЭД
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЭлектронныйДокументВходящийДокументыОснования.Ссылка,
	|	ЭлектронныйДокументВходящийДокументыОснования.ДокументОснование,
	|	ВЫРАЗИТЬ(ЭлектронныйДокументВходящийДокументыОснования.ДокументОснование КАК Документ.УдалитьПроизвольныйЭД).Направление,
	|	ЭлектронныйДокументВходящийИдентификаторыОснованийВладельцаФайла.ИдентификаторДокументаОснования,
	|	ЭлектронныйДокументВходящийИдентификаторыОснованийВладельцаФайла.ИдентификаторЭДДокументаОснования
	|ИЗ
	|	Документ.ЭлектронныйДокументВходящий.ДокументыОснования КАК ЭлектронныйДокументВходящийДокументыОснования
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронныйДокументВходящий.ИдентификаторыОснованийВладельцаФайла КАК ЭлектронныйДокументВходящийИдентификаторыОснованийВладельцаФайла
	|		ПО (ЭлектронныйДокументВходящийИдентификаторыОснованийВладельцаФайла.Ссылка = ЭлектронныйДокументВходящийДокументыОснования.Ссылка)
	|ГДЕ
	|	ЭлектронныйДокументВходящийДокументыОснования.Ссылка.ВидЭД = Значение(Перечисление.ВидыЭД.ПроизвольныйЭД)
	|	И ЭлектронныйДокументВходящийДокументыОснования.ДокументОснование ССЫЛКА Документ.УдалитьПроизвольныйЭД
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	вт_Документы.Ссылка КАК Ссылка,
	|	вт_Документы.ДокументОснование КАК ДокументОснование,
	|	ЭДПрисоединенныеФайлы.ВладелецФайла КАК ВладелецФайла
	|ИЗ
	|	вт_Документы КАК вт_Документы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	|		ПО вт_Документы.ИдентификаторДокументаОснования = ЭДПрисоединенныеФайлы.НомерЭД
	|			И (ЭДПрисоединенныеФайлы.НаправлениеЭД = вт_Документы.НаправлениеЭД)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если ЗначениеЗаполнено(Выборка.ВладелецФайла) Тогда
			
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
			
			СтрокаОснования = ДокументОбъект.ДокументыОснования.Найти(Выборка.ДокументОснование, "ДокументОснование");
			
			Если СтрокаОснования = Неопределено Тогда
				НоваяСтрока = ДокументОбъект.ДокументыОснования.Добавить();
				НоваяСтрока.ДокументОснование = Выборка.ВладелецФайла;
			Иначе
				СтрокаОснования.ДокументОснование = Выборка.ВладелецФайла;
			КонецЕсли;
			
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДокументОбъект);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	Если ВидФормы = "ФормаСписка" ИЛИ ВидФормы = "ФормаВыбора" Тогда
		ВыбраннаяФорма = "Обработка.ЭлектронныеДокументы.Форма.ФормаСпискаПроизвольныхЭД";
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецЕсли