////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Выгружает документ и возвращает свойства файла выгрузки.
//
// Параметры:
//  Ссылка - ссылка на отчет (документ).
//
// Результат:
//	Массив структур или Неопределено, если не удалось сформировать файл выгрузки.
//	Ключи структуры:
//		- АдресФайлаВыгрузки - адрес двоичных данных файла выгрузки во временном хранилище
//		- ИмяФайлаВыгрузки - короткое имя файла выгрузки (с расширением)
//
Функция ВыгрузитьДокумент(УникальныйИдентификатор = Неопределено) Экспорт
	
	Возврат ВыгрузитьДокументСРазделениемНаФайлы(УникальныйИдентификатор);
	
КонецФункции

Функция ВыгрузитьДокументСРазделениемНаФайлы(УникальныйИдентификатор = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОсновныеСведенияВыгрузки = Документы.УведомлениеОКонтролируемыхСделках.ПолучитьОсновныеСведенияУведомленияДляВыгрузки(Ссылка);
	
	Если ОсновныеСведенияВыгрузки.ВерсияУведомления < КонтролируемыеСделкиКлиентСервер.ВерсияУведомления_2018() Тогда
		
		ФайлыВХранилище = ЭлектронноеПредставление502(ОсновныеСведенияВыгрузки, УникальныйИдентификатор);
		
	Иначе
		
		ФайлыВХранилище = ЭлектронноеПредставление503(ОсновныеСведенияВыгрузки, УникальныйИдентификатор);
		
	КонецЕсли;
	
	Возврат ФайлыВХранилище;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	Запрос = Новый Запрос();
	Запрос.Параметры.Вставить("Ссылка", Ссылка);
	Запрос.Параметры.Вставить("Организация", Организация);
	Запрос.Параметры.Вставить("ОтчетныйГод", ОтчетныйГод);
	Запрос.Параметры.Вставить("НомерКорректировки", НомерКорректировки);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УведомлениеОКонтролируемыхСделках.Ссылка,
	|	УведомлениеОКонтролируемыхСделках.Номер,
	|	УведомлениеОКонтролируемыхСделках.Дата
	|ИЗ
	|	Документ.УведомлениеОКонтролируемыхСделках КАК УведомлениеОКонтролируемыхСделках
	|ГДЕ
	|	УведомлениеОКонтролируемыхСделках.Организация = &Организация
	|	И УведомлениеОКонтролируемыхСделках.ОтчетныйГод = &ОтчетныйГод
	|	И УведомлениеОКонтролируемыхСделках.НомерКорректировки = &НомерКорректировки
	|	И УведомлениеОКонтролируемыхСделках.Ссылка <> &Ссылка";
	
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		Если НомерКорректировки > 0 Тогда
			ТекстИсключения = НСтр("ru = 'Корректировка №%НомерКорректировки% уведомления о контролируемых сделках за %ОтчетныйГод% уже существует'");
		Иначе
			ТекстИсключения = НСтр("ru = 'Уведомление о контролируемых сделках за %ОтчетныйГод% уже существует'");
		КонецЕсли;
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%НомерКорректировки%", НомерКорректировки);
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ОтчетныйГод%", Формат(ОтчетныйГод, "ДФ=yyyy"));
		ВызватьИсключение(ТекстИсключения);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ВерсияУведомления) Тогда
		ВерсияУведомления = Документы.УведомлениеОКонтролируемыхСделках.ВерсияУведомленияПоОтчетномуГоду(ОтчетныйГод);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Формирует сведения необходимые для сохранения и передачи файла (файлов) электронного
// представления документа.
//
// Возвращаемое значение:
//  ТаблицаЗначений - сведения электронного представления документа, включающие в себя
//                    имя файла(файлов), текст(тексты) и кодировку представления.
//
Функция ЭлектронноеПредставление502(ОсновныеСведенияВыгрузки, УникальныйИдентификатор = Неопределено)
	
	Контекст = КонтекстВыполненияВыгрузки(ОсновныеСведенияВыгрузки);
	
	ВременныйПакетФайлов = Новый Массив;
	
	ИдФайл = Контекст.ИдФайлПерв;
	
	ФайлВыгрузки = НовыйФайлВыгрузки_502(Контекст, ИдФайл);
	
	ЛистыУведомления = КонтролируемыеСделки.ПолучитьЛистыУведомления(ЭтотОбъект.Ссылка);
	
	УвеличитьОтступ(Контекст);
	
	Для Каждого Лист1А ИЗ ЛистыУведомления.ЛистыРаздела1А Цикл
		ТекстБлокаСделки = ТекстПоСделке502(Контекст, ЛистыУведомления, Лист1А);
		
		РазмерБлокаСделки = РазмерВБайтахWin1251(ТекстБлокаСделки);
		
		Если (Контекст.ТекущийРазмер + РазмерБлокаСделки + Контекст.РазмерЗавершающихТэгов) > Контекст.РазмерРазделения Тогда
			ФайлВыгрузки.Записать(Контекст.ЗавершающиеТэги);
			ФайлВыгрузки.Закрыть();
			ВременныйПакетФайлов.Добавить("TMP_" + ИдФайл + ".xml");
			
			ИдФайл = Документы.УведомлениеОКонтролируемыхСделках.ИдентификаторФайлаЭлектронногоПредставления(Контекст.ОсновныеСведенияВыгрузки);
			ФайлВыгрузки = НовыйФайлВыгрузки_502(Контекст, ИдФайл);
		КонецЕсли;
		
		ФайлВыгрузки.Записать(ТекстБлокаСделки);
		Контекст.Вставить("ТекущийРазмер", Контекст.ТекущийРазмер + РазмерБлокаСделки);
	КонецЦикла;
	
	ФайлВыгрузки.Записать(Контекст.ЗавершающиеТэги);
	ФайлВыгрузки.Закрыть();
	ВременныйПакетФайлов.Добавить("TMP_" + ИдФайл + ".xml");
	
	ОкончательныйПакетФайлов = Неопределено;
	
	ВсегоФайлов = ВременныйПакетФайлов.Количество();
	
	Для Инд = 1 По ВсегоФайлов Цикл
		Если ОкончательныйПакетФайлов = Неопределено Тогда
			ОкончательныйПакетФайлов = Новый Массив;
		КонецЕсли;
		
		ИмяФайла = ВременныйПакетФайлов[Инд - 1];
		ВременныйФайл = Новый ЧтениеТекста(Контекст.ВременныйКаталог + ИмяФайла, "windows-1251");
		
		СтрокаОбъявления = ВременныйФайл.ПрочитатьСтроку();
		СтрокаТэгаФайл = ВременныйФайл.ПрочитатьСтроку();
		
		СтрокаТэгаФайл = СтрЗаменить(СтрокаТэгаФайл, "QQQQQ", XMLСтрока(ВсегоФайлов));
		СтрокаТэгаФайл = СтрЗаменить(СтрокаТэгаФайл, "NNNNN", XMLСтрока(Инд));
		
		ИмяИтоговогоФайла = СтрЗаменить(ИмяФайла, "TMP_", "");
		
		ИтоговыйФайл = Новый ЗаписьТекста(Контекст.ВременныйКаталог + ИмяИтоговогоФайла, "windows-1251");
		ИтоговыйФайл.ЗаписатьСтроку(СтрокаОбъявления);
		ИтоговыйФайл.Записать(СтрокаТэгаФайл);
		
		Пока Истина Цикл
			СледующаяСтрока = ВременныйФайл.ПрочитатьСтроку();
			Если СледующаяСтрока = Неопределено Тогда
				Прервать;
			КонецЕсли;
			СледующаяСтрока = Символы.ПС + СледующаяСтрока;
			ИтоговыйФайл.Записать(СледующаяСтрока);
		КонецЦикла;
		
		ВременныйФайл.Закрыть();
		ВременныйФайл = Неопределено; // Для сборщика мусора
		
		ИтоговыйФайл.Закрыть();
		ИтоговыйФайл = Неопределено; // Для сборщика мусора
		
		ФайлВыгрузки = Новый ДвоичныеДанные(Контекст.ВременныйКаталог + ИмяИтоговогоФайла);
		Если УникальныйИдентификатор <> Неопределено Тогда
			СсылкаНаДвоичныеДанныеФайла = ПоместитьВоВременноеХранилище(ФайлВыгрузки, УникальныйИдентификатор);
		Иначе
			СсылкаНаДвоичныеДанныеФайла = ПоместитьВоВременноеХранилище(ФайлВыгрузки);
		КонецЕсли;
		
		СтруктураВыгрузки = Новый Структура;
		СтруктураВыгрузки.Вставить("АдресФайлаВыгрузки", СсылкаНаДвоичныеДанныеФайла);
		СтруктураВыгрузки.Вставить("ИмяФайлаВыгрузки", ИмяИтоговогоФайла);
		
		ОкончательныйПакетФайлов.Добавить(СтруктураВыгрузки);
		
		УдалитьФайлы(Контекст.ВременныйКаталог, ИмяФайла);
		УдалитьФайлы(Контекст.ВременныйКаталог, ИмяИтоговогоФайла);
		
	КонецЦикла;
	
	Возврат ОкончательныйПакетФайлов;
	
КонецФункции

Функция КонтекстВыполненияВыгрузки(ОсновныеСведенияВыгрузки)
	
	ИдФайлИсх = ОсновныеСведенияВыгрузки.ИдФайл;
	ИдФайлПерв = Документы.УведомлениеОКонтролируемыхСделках.ИдентификаторФайлаЭлектронногоПредставления(ОсновныеСведенияВыгрузки);
	
	РазмерРазделения = 100 * 1024 * 1024; // 100 Мб
	
	ЗавершающиеТэги = "		</УвКонтрСд>
	                  |	</Документ>
	                  |</Файл>";
	РазмерЗавершающихТэгов = РазмерВБайтахWin1251(ЗавершающиеТэги);
	
	Контекст = Новый Структура;
	Контекст.Вставить("ОсновныеСведенияВыгрузки", ОсновныеСведенияВыгрузки);
	
	Контекст.Вставить("РазмерРазделения", РазмерРазделения);
	
	Контекст.Вставить("ИдФайлИсх", ИдФайлИсх);
	Контекст.Вставить("ИдФайлПерв", ИдФайлПерв);
	
	Контекст.Вставить("ЗавершающиеТэги", ЗавершающиеТэги);
	Контекст.Вставить("РазмерЗавершающихТэгов", РазмерЗавершающихТэгов);
	
	Контекст.Вставить("Отступ", "");
	
	ВременныйКаталог = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ПолучитьИмяВременногоФайла());
	СоздатьКаталог(ВременныйКаталог);
	Контекст.Вставить("ВременныйКаталог", ВременныйКаталог);
	
	Возврат Контекст;
	
КонецФункции

Функция НовыйФайлВыгрузки_502(Контекст, ИдентификаторФайла)
	
	ОсновныеСведенияВыгрузки = Контекст.ОсновныеСведенияВыгрузки;
	
	Контекст.Вставить("Отступ", "");
	
	ТекстФайла = Новый ТекстовыйДокумент;
	
	ТекстФайла.ДобавитьСтроку("<?xml version=""1.0"" encoding=""windows-1251""?>");
	
	Шаблон_Файл = "<Файл xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" %ИдФайл% %ВерсПрог% ВерсФорм=""5.02"" %ИдФайлИсх% %ИдФайлПерв% КолФайл=""QQQQQ"" НомФайл=""NNNNN"">";
	УстановитьАтрибут(Шаблон_Файл, "ИдФайл", ИдентификаторФайла);
	УстановитьАтрибут(Шаблон_Файл, "ВерсПрог", ОсновныеСведенияВыгрузки.ВерсПрог);
	УстановитьАтрибут(Шаблон_Файл, "ИдФайлИсх", Контекст.ИдФайлИсх);
	УстановитьАтрибут(Шаблон_Файл, "ИдФайлПерв", Контекст.ИдФайлПерв);
	
	ТекстФайла.ДобавитьСтроку(Контекст.Отступ + Шаблон_Файл);
	
	УвеличитьОтступ(Контекст);
	
	Шаблон_Документ = "<Документ КНД=""1110025"" %ДатаДок% %ОтчетГод% %КодНО% %НомКорр% %ПоМесту%>";
	УстановитьАтрибут(Шаблон_Документ, "ДатаДок", ОсновныеСведенияВыгрузки.ДатаДок);
	УстановитьАтрибут(Шаблон_Документ, "ОтчетГод", ОсновныеСведенияВыгрузки.ОтчетГод);
	УстановитьАтрибут(Шаблон_Документ, "КодНО", ОсновныеСведенияВыгрузки.КодНО);
	УстановитьАтрибут(Шаблон_Документ, "НомКорр", ОсновныеСведенияВыгрузки.НомКорр);
	УстановитьАтрибут(Шаблон_Документ, "ПоМесту", ОсновныеСведенияВыгрузки.ПоМесту);
	
	ТекстФайла.ДобавитьСтроку(Контекст.Отступ + Шаблон_Документ);
	
	УвеличитьОтступ(Контекст);
	
	Шаблон_СвНП = "<СвНП %ОКАТО% %ОКВЭД% %Тлф% %E-mail%>";
	УстановитьАтрибут(Шаблон_СвНП, "ОКАТО", ОсновныеСведенияВыгрузки.ОКАТО);
	УстановитьНеобязательныйАтрибут(Шаблон_СвНП, "ОКВЭД", ОсновныеСведенияВыгрузки.ОКВЭД);
	УстановитьНеобязательныйАтрибут(Шаблон_СвНП, "Тлф", ОсновныеСведенияВыгрузки.Тлф);
	УстановитьНеобязательныйАтрибут(Шаблон_СвНП, "E-mail", ОсновныеСведенияВыгрузки.ЭлПочта);
	
	ТекстФайла.ДобавитьСтроку(Контекст.Отступ + Шаблон_СвНП);
	
	УвеличитьОтступ(Контекст);
	
	Если ОсновныеСведенияВыгрузки.ЭтоПБОЮЛ Тогда
		ЗаполнитьСведенияОФизлице_502(Контекст, ТекстФайла);
	Иначе
		ЗаполнитьСведенияОрганизации(Контекст, ТекстФайла);
	КонецЕсли;
	
	УменьшитьОтступ(Контекст);
	
	ТекстФайла.ДобавитьСтроку(Контекст.Отступ + "</СвНП>");
	
	Шаблон_Подписант = "<Подписант %ПрПодп%>";
	УстановитьАтрибут(Шаблон_Подписант, "ПрПодп", ОсновныеСведенияВыгрузки.ПрПодп);
	
	ТекстФайла.ДобавитьСтроку(Контекст.Отступ + Шаблон_Подписант);
	
	УвеличитьОтступ(Контекст);
	
	Если ЕстьЗаполненныеРеквизиты(ОсновныеСведенияВыгрузки, "ПодпФамилия, ПодпИмя, ПодпОтчество") Тогда
		Шаблон_ФИО = "<ФИО %Фамилия% %Имя% %Отчество%/>";
		УстановитьАтрибут(Шаблон_ФИО, "Фамилия", ОсновныеСведенияВыгрузки.ПодпФамилия);
		УстановитьАтрибут(Шаблон_ФИО, "Имя", ОсновныеСведенияВыгрузки.ПодпИмя);
		УстановитьНеобязательныйАтрибут(Шаблон_ФИО, "Отчество", ОсновныеСведенияВыгрузки.ПодпОтчество);
		
		ТекстФайла.ДобавитьСтроку(Контекст.Отступ + Шаблон_ФИО);
	КонецЕсли;
	
	Если ЕстьЗаполненныеРеквизиты(ОсновныеСведенияВыгрузки, "НаимДокПодп, НаимОргПодп") Тогда
		Шаблон_СвПред = "<СвПред %НаимДок% %НаимОрг%/>";
		УстановитьАтрибут(Шаблон_СвПред, "НаимДок", ОсновныеСведенияВыгрузки.НаимДокПодп);
		УстановитьНеобязательныйАтрибут(Шаблон_СвПред, "НаимОрг", ?(ОсновныеСведенияВыгрузки.Свойство("НаимОргПодп"), ОсновныеСведенияВыгрузки.НаимОргПодп, ""));
		
		ТекстФайла.ДобавитьСтроку(Контекст.Отступ + Шаблон_СвПред);
	КонецЕсли;
	
	УменьшитьОтступ(Контекст);
	
	ТекстФайла.ДобавитьСтроку(Контекст.Отступ + "</Подписант>");
	
	ТекстФайла.ДобавитьСтроку(Контекст.Отступ + "<УвКонтрСд>");
	
	ТекстФайла = ТекстФайла.ПолучитьТекст();
	
	Контекст.Вставить("ТекущийРазмер", РазмерВБайтахWin1251(ТекстФайла));
	
	ФайлВыгрузки = Новый ЗаписьТекста(Контекст.ВременныйКаталог + "TMP_" + ИдентификаторФайла + ".xml", "windows-1251");
	ФайлВыгрузки.Записать(ТекстФайла);
	
	Возврат ФайлВыгрузки;
	
КонецФункции

Функция НовыйФайлВыгрузки_503(Контекст, ИдентификаторФайла)
	
	ОсновныеСведенияВыгрузки = Контекст.ОсновныеСведенияВыгрузки;
	
	Контекст.Вставить("Отступ", "");
	
	ТекстФайла = Новый ТекстовыйДокумент;
	
	ТекстФайла.ДобавитьСтроку("<?xml version=""1.0"" encoding=""windows-1251""?>");
	
	Шаблон_Файл = "<Файл xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" %ИдФайл% %ВерсПрог% ВерсФорм=""5.03"" %ИдФайлИсх% %ИдФайлПерв% КолФайл=""QQQQQ"" НомФайл=""NNNNN"">";
	УстановитьАтрибут(Шаблон_Файл, "ИдФайл", ИдентификаторФайла);
	УстановитьАтрибут(Шаблон_Файл, "ВерсПрог", ОсновныеСведенияВыгрузки.ВерсПрог);
	УстановитьАтрибут(Шаблон_Файл, "ИдФайлИсх", Контекст.ИдФайлИсх);
	УстановитьАтрибут(Шаблон_Файл, "ИдФайлПерв", Контекст.ИдФайлПерв);
	
	ТекстФайла.ДобавитьСтроку(Контекст.Отступ + Шаблон_Файл);
	
	УвеличитьОтступ(Контекст);
	
	Шаблон_Документ = "<Документ КНД=""1110025"" %ДатаДок% %ОтчетГод% %КодНО% %НомКорр% %ПоМесту%>";
	УстановитьАтрибут(Шаблон_Документ, "ДатаДок", ОсновныеСведенияВыгрузки.ДатаДок);
	УстановитьАтрибут(Шаблон_Документ, "ОтчетГод", ОсновныеСведенияВыгрузки.ОтчетГод);
	УстановитьАтрибут(Шаблон_Документ, "КодНО", ОсновныеСведенияВыгрузки.КодНО);
	УстановитьАтрибут(Шаблон_Документ, "НомКорр", ОсновныеСведенияВыгрузки.НомКорр);
	УстановитьАтрибут(Шаблон_Документ, "ПоМесту", ОсновныеСведенияВыгрузки.ПоМесту);
	
	ТекстФайла.ДобавитьСтроку(Контекст.Отступ + Шаблон_Документ);
	
	УвеличитьОтступ(Контекст);
	
	Шаблон_СвНП = "<СвНП %ОКТМО% %Тлф% %E-mail%>";
	УстановитьАтрибут(Шаблон_СвНП, "ОКТМО", ОсновныеСведенияВыгрузки.ОКТМО);
	УстановитьНеобязательныйАтрибут(Шаблон_СвНП, "Тлф", ОсновныеСведенияВыгрузки.Тлф);
	УстановитьНеобязательныйАтрибут(Шаблон_СвНП, "E-mail", ОсновныеСведенияВыгрузки.ЭлПочта);
	
	ТекстФайла.ДобавитьСтроку(Контекст.Отступ + Шаблон_СвНП);
	
	УвеличитьОтступ(Контекст);
	
	Если ОсновныеСведенияВыгрузки.ЭтоПБОЮЛ Тогда
		ЗаполнитьСведенияОФизлице_503(Контекст, ТекстФайла);
	Иначе
		ЗаполнитьСведенияОрганизации(Контекст, ТекстФайла);
	КонецЕсли;
	
	УменьшитьОтступ(Контекст);
	
	ТекстФайла.ДобавитьСтроку(Контекст.Отступ + "</СвНП>");
	
	Шаблон_Подписант = "<Подписант %ПрПодп%>";
	УстановитьАтрибут(Шаблон_Подписант, "ПрПодп", ОсновныеСведенияВыгрузки.ПрПодп);
	
	ТекстФайла.ДобавитьСтроку(Контекст.Отступ + Шаблон_Подписант);
	
	УвеличитьОтступ(Контекст);
	
	Если ЕстьЗаполненныеРеквизиты(ОсновныеСведенияВыгрузки, "ПодпФамилия, ПодпИмя, ПодпОтчество") Тогда
		Шаблон_ФИО = "<ФИО %Фамилия% %Имя% %Отчество%/>";
		УстановитьАтрибут(Шаблон_ФИО, "Фамилия", ОсновныеСведенияВыгрузки.ПодпФамилия);
		УстановитьАтрибут(Шаблон_ФИО, "Имя", ОсновныеСведенияВыгрузки.ПодпИмя);
		УстановитьНеобязательныйАтрибут(Шаблон_ФИО, "Отчество", ОсновныеСведенияВыгрузки.ПодпОтчество);
		
		ТекстФайла.ДобавитьСтроку(Контекст.Отступ + Шаблон_ФИО);
	КонецЕсли;
	
	Если ЕстьЗаполненныеРеквизиты(ОсновныеСведенияВыгрузки, "НаимДокПодп, НаимОргПодп") Тогда
		Шаблон_СвПред = "<СвПред %НаимДок% %НаимОрг%/>";
		УстановитьАтрибут(Шаблон_СвПред, "НаимДок", ОсновныеСведенияВыгрузки.НаимДокПодп);
		УстановитьНеобязательныйАтрибут(Шаблон_СвПред, "НаимОрг", ?(ОсновныеСведенияВыгрузки.Свойство("НаимОргПодп"), ОсновныеСведенияВыгрузки.НаимОргПодп, ""));
		
		ТекстФайла.ДобавитьСтроку(Контекст.Отступ + Шаблон_СвПред);
	КонецЕсли;
	
	УменьшитьОтступ(Контекст);
	
	ТекстФайла.ДобавитьСтроку(Контекст.Отступ + "</Подписант>");
	
	ТекстФайла.ДобавитьСтроку(Контекст.Отступ + "<УвКонтрСд>");
	
	ТекстФайла = ТекстФайла.ПолучитьТекст();
	
	Контекст.Вставить("ТекущийРазмер", РазмерВБайтахWin1251(ТекстФайла));
	
	ФайлВыгрузки = Новый ЗаписьТекста(Контекст.ВременныйКаталог + "TMP_" + ИдентификаторФайла + ".xml", "windows-1251");
	ФайлВыгрузки.Записать(ТекстФайла);
	
	Возврат ФайлВыгрузки;
	
КонецФункции

Функция РазмерВБайтахWin1251(ИзмеряемыйТекст)
	
	КоличествоВхожденийПС = СтрЧислоВхождений(ИзмеряемыйТекст, Символы.ПС);
	Результат = СтрДлина(ИзмеряемыйТекст) + КоличествоВхожденийПС; // Перевод строки кодируется 2 байтами
	
	Возврат Результат;
	
КонецФункции

Процедура УвеличитьОтступ(КонтекстВыполнения)
	
	КонтекстВыполнения.Вставить("Отступ", КонтекстВыполнения.Отступ + Символы.Таб);
	
КонецПроцедуры

Функция УменьшитьОтступ(КонтекстВыполнения)
	
	КонтекстВыполнения.Вставить("Отступ", Сред(КонтекстВыполнения.Отступ, 2));
	
КонецФункции

Процедура УстановитьАтрибут(ШаблонЭлемента, ИмяАтрибута, Знач ЗначениеАтрибута)
	
	Если ТипЗнч(ЗначениеАтрибута) = Тип("Строка") Тогда
		ЗначениеАтрибута = СтрЗаменить(ЗначениеАтрибута, "&", "&amp;");
		ЗначениеАтрибута = СтрЗаменить(ЗначениеАтрибута, "<", "&lt;");
		ЗначениеАтрибута = СтрЗаменить(ЗначениеАтрибута, ">", "&gt;");
		ЗначениеАтрибута = СтрЗаменить(ЗначениеАтрибута, """", "&quot;");
		ЗначениеАтрибута = СтрЗаменить(ЗначениеАтрибута, "'", "&apos;");
	ИначеЕсли ТипЗнч(ЗначениеАтрибута) = Тип("Дата") Тогда
		ЗначениеАтрибута = Формат(ЗначениеАтрибута, "ДФ=dd.MM.yyyy");
	Иначе
		ЗначениеАтрибута = XMLСтрока(ЗначениеАтрибута);
	КонецЕсли;
	
	ШаблонЭлемента = СтрЗаменить(ШаблонЭлемента, "%" + ИмяАтрибута + "%", ИмяАтрибута + "=""" + ЗначениеАтрибута + """");
	
КонецПроцедуры

Процедура УстановитьНеобязательныйАтрибут(ШаблонЭлемента, ИмяАтрибута, ЗначениеАтрибута)
	
	Если ЗначениеЗаполнено(ЗначениеАтрибута) Тогда
		УстановитьАтрибут(ШаблонЭлемента, ИмяАтрибута, ЗначениеАтрибута)
	Иначе
		ШаблонЭлемента = СтрЗаменить(ШаблонЭлемента, " %" + ИмяАтрибута + "%", "");
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСведенияОрганизации(Контекст, ТекстФайла)
	
	Шаблон_НПЮЛ = "<НПЮЛ %НаимОрг% %ИННЮЛ% %КПП%>";
	УстановитьАтрибут(Шаблон_НПЮЛ, "НаимОрг", Контекст.ОсновныеСведенияВыгрузки.НаимОрг);
	УстановитьАтрибут(Шаблон_НПЮЛ, "ИННЮЛ", Контекст.ОсновныеСведенияВыгрузки.ИННЮЛ);
	УстановитьАтрибут(Шаблон_НПЮЛ, "КПП", Контекст.ОсновныеСведенияВыгрузки.КППЮЛ);
	
	ТекстФайла.ДобавитьСтроку(Контекст.Отступ + Шаблон_НПЮЛ);
	
	Если ЕстьЗаполненныеРеквизиты(Контекст.ОсновныеСведенияВыгрузки, "ФормРеорг, ИННЮЛРеорг, КППЮЛРеорг") Тогда
		Шаблон_СвРеоргЮЛ = "<СвРеоргЮЛ %ФормРеорг% %ИННЮЛ% %КПП%/>";
		УстановитьАтрибут(Шаблон_СвРеоргЮЛ, "ФормРеорг", Контекст.ОсновныеСведенияВыгрузки.ФормРеорг);
		УстановитьНеобязательныйАтрибут(Шаблон_СвРеоргЮЛ, "ИННЮЛ", Контекст.ОсновныеСведенияВыгрузки.ИННЮЛРеорг);
		УстановитьНеобязательныйАтрибут(Шаблон_СвРеоргЮЛ, "КПП", Контекст.ОсновныеСведенияВыгрузки.КППЮЛРеорг);
		
		УвеличитьОтступ(Контекст);
		ТекстФайла.ДобавитьСтроку(Контекст.Отступ + Шаблон_СвРеоргЮЛ);
		УменьшитьОтступ(Контекст);
	КонецЕсли;
	
	ТекстФайла.ДобавитьСтроку(Контекст.Отступ + "</НПЮЛ>");
	
КонецПроцедуры

Функция ТекстПоСделке502(Контекст, ЛистыУведомления, Лист1А)
	
	Листы1А = ЛистыУведомления.ЛистыРаздела1А;
	Листы1Б = ЛистыУведомления.ЛистыРаздела1Б;
	ЛистыРаздела2 = ЛистыУведомления.ЛистыРаздела2;
	ЛистыРаздела3 = ЛистыУведомления.ЛистыРаздела3;
	ДанныеРаздела2 = ЛистыУведомления.ДанныеРаздела2;
	ДанныеРаздела3 = ЛистыУведомления.ДанныеРаздела3;
	
	ТекстСделки = Новый ТекстовыйДокумент;
	
	Шаблон_СвКонтрСд = "<СвКонтрСд %НомПорСд%>";
	УстановитьАтрибут(Шаблон_СвКонтрСд, "НомПорСд", XMLСтрока(Лист1А.НомерЛиста1А));
	
	ТекстСделки.ДобавитьСтроку(Контекст.Отступ + Шаблон_СвКонтрСд);
	
	УвеличитьОтступ(Контекст);
	
	ЗаполнитьСведенияОснованияКонтроляСделки502(Контекст, ТекстСделки, Лист1А);
	
	ЗаполнитьСведенияОСделке502_503(Контекст, ТекстСделки, Лист1А);
	
	ЗаполнитьСведенияОДоходахРасходах502_503(Контекст, ТекстСделки, Лист1А);
	
	ЗаполнитьСведенияОПредметеСделки502(Контекст, ТекстСделки, Листы1Б, Лист1А.Сделка);
	
	ЗаполнитьСведенияОбУчастникахОрганизациях502(Контекст, ТекстСделки, ЛистыРаздела2, ДанныеРаздела2, Лист1А.Сделка);
	
	ЗаполнитьСведенияОбУчастникахФизЛицах502(Контекст, ТекстСделки, ЛистыРаздела3, ДанныеРаздела3, Лист1А.Сделка);
	
	УменьшитьОтступ(Контекст);
	
	ТекстСделки.ДобавитьСтроку(Контекст.Отступ + "</СвКонтрСд>");
	
	Возврат ТекстСделки.ПолучитьТекст();
	
КонецФункции

Функция ТекстПоСделке503(Контекст, ЛистыУведомления, Лист1А)
	
	Листы1А = ЛистыУведомления.ЛистыРаздела1А;
	Листы1Б = ЛистыУведомления.ЛистыРаздела1Б;
	ЛистыРаздела2 = ЛистыУведомления.ЛистыРаздела2;
	ЛистыРаздела3 = ЛистыУведомления.ЛистыРаздела3;
	ДанныеРаздела2 = ЛистыУведомления.ДанныеРаздела2;
	ДанныеРаздела3 = ЛистыУведомления.ДанныеРаздела3;
	
	ТекстСделки = Новый ТекстовыйДокумент;
	
	Шаблон_СвКонтрСд = "<СвКонтрСд %НомПорСд% %СделкаСовАгент%>";
	УстановитьАтрибут(Шаблон_СвКонтрСд, "НомПорСд", XMLСтрока(Лист1А.НомерЛиста1А));
	УстановитьАтрибут(Шаблон_СвКонтрСд, "СделкаСовАгент", Лист1А.СделкаСовАгент);
	
	ТекстСделки.ДобавитьСтроку(Контекст.Отступ + Шаблон_СвКонтрСд);
	
	УвеличитьОтступ(Контекст);
	
	ЗаполнитьСведенияОснованияКонтроляСделки503(Контекст, ТекстСделки, Лист1А);
	
	ЗаполнитьСведенияОСделке502_503(Контекст, ТекстСделки, Лист1А);
	
	ЗаполнитьСведенияОДоходахРасходах502_503(Контекст, ТекстСделки, Лист1А);
	
	ЗаполнитьСведенияОПредметеСделки503(Контекст, ТекстСделки, Листы1Б, Лист1А.Сделка);
	
	ЗаполнитьСведенияОбУчастникахОрганизациях503(Контекст, ТекстСделки, ЛистыРаздела2, ДанныеРаздела2, Лист1А.Сделка);
	
	ЗаполнитьСведенияОбУчастникахФизЛицах503(Контекст, ТекстСделки, ЛистыРаздела3, ДанныеРаздела3, Лист1А.Сделка);
	
	УменьшитьОтступ(Контекст);
	
	ТекстСделки.ДобавитьСтроку(Контекст.Отступ + "</СвКонтрСд>");
	
	Возврат ТекстСделки.ПолучитьТекст();
	
КонецФункции

// Формирует сведения необходимые для сохранения и передачи файла (файлов) электронного
// представления документа в формате 5.03.
//
// Возвращаемое значение:
//  ТаблицаЗначений - сведения электронного представления документа, включающие в себя
//                    имя файла(файлов), текст(тексты) и кодировку представления.
//
Функция ЭлектронноеПредставление503(ОсновныеСведенияВыгрузки, УникальныйИдентификатор = Неопределено)
	
	Контекст = КонтекстВыполненияВыгрузки(ОсновныеСведенияВыгрузки);
	
	ВременныйПакетФайлов = Новый Массив;
	
	ИдФайл = Контекст.ИдФайлПерв;
	
	ФайлВыгрузки = НовыйФайлВыгрузки_503(Контекст, ИдФайл);
	
	ЛистыУведомления = КонтролируемыеСделки.ПолучитьЛистыУведомления(ЭтотОбъект.Ссылка);
	
	УвеличитьОтступ(Контекст);
	
	Для Каждого Лист1А ИЗ ЛистыУведомления.ЛистыРаздела1А Цикл
		ТекстБлокаСделки = ТекстПоСделке503(Контекст, ЛистыУведомления, Лист1А);
		
		РазмерБлокаСделки = РазмерВБайтахWin1251(ТекстБлокаСделки);
		
		Если (Контекст.ТекущийРазмер + РазмерБлокаСделки + Контекст.РазмерЗавершающихТэгов) > Контекст.РазмерРазделения Тогда
			ФайлВыгрузки.Записать(Контекст.ЗавершающиеТэги);
			ФайлВыгрузки.Закрыть();
			ВременныйПакетФайлов.Добавить("TMP_" + ИдФайл + ".xml");
			
			ИдФайл = Документы.УведомлениеОКонтролируемыхСделках.ИдентификаторФайлаЭлектронногоПредставления(Контекст.ОсновныеСведенияВыгрузки);
			ФайлВыгрузки = НовыйФайлВыгрузки_503(Контекст, ИдФайл);
		КонецЕсли;
		
		ФайлВыгрузки.Записать(ТекстБлокаСделки);
		Контекст.Вставить("ТекущийРазмер", Контекст.ТекущийРазмер + РазмерБлокаСделки);
	КонецЦикла;
	
	ФайлВыгрузки.Записать(Контекст.ЗавершающиеТэги);
	ФайлВыгрузки.Закрыть();
	ВременныйПакетФайлов.Добавить("TMP_" + ИдФайл + ".xml");
	
	ОкончательныйПакетФайлов = Неопределено;
	
	ВсегоФайлов = ВременныйПакетФайлов.Количество();
	
	Для Инд = 1 По ВсегоФайлов Цикл
		Если ОкончательныйПакетФайлов = Неопределено Тогда
			ОкончательныйПакетФайлов = Новый Массив;
		КонецЕсли;
		
		ИмяФайла = ВременныйПакетФайлов[Инд - 1];
		ВременныйФайл = Новый ЧтениеТекста(Контекст.ВременныйКаталог + ИмяФайла, "windows-1251");
		
		СтрокаОбъявления = ВременныйФайл.ПрочитатьСтроку();
		СтрокаТэгаФайл = ВременныйФайл.ПрочитатьСтроку();
		
		СтрокаТэгаФайл = СтрЗаменить(СтрокаТэгаФайл, "QQQQQ", XMLСтрока(ВсегоФайлов));
		СтрокаТэгаФайл = СтрЗаменить(СтрокаТэгаФайл, "NNNNN", XMLСтрока(Инд));
		
		ИмяИтоговогоФайла = СтрЗаменить(ИмяФайла, "TMP_", "");
		
		ИтоговыйФайл = Новый ЗаписьТекста(Контекст.ВременныйКаталог + ИмяИтоговогоФайла, "windows-1251");
		ИтоговыйФайл.ЗаписатьСтроку(СтрокаОбъявления);
		ИтоговыйФайл.Записать(СтрокаТэгаФайл);
		
		Пока Истина Цикл
			СледующаяСтрока = ВременныйФайл.ПрочитатьСтроку();
			Если СледующаяСтрока = Неопределено Тогда
				Прервать;
			КонецЕсли;
			СледующаяСтрока = Символы.ПС + СледующаяСтрока;
			ИтоговыйФайл.Записать(СледующаяСтрока);
		КонецЦикла;
		
		ВременныйФайл.Закрыть();
		ВременныйФайл = Неопределено; // Для сборщика мусора
		
		ИтоговыйФайл.Закрыть();
		ИтоговыйФайл = Неопределено; // Для сборщика мусора
		
		ФайлВыгрузки = Новый ДвоичныеДанные(Контекст.ВременныйКаталог + ИмяИтоговогоФайла);
		Если УникальныйИдентификатор <> Неопределено Тогда
			СсылкаНаДвоичныеДанныеФайла = ПоместитьВоВременноеХранилище(ФайлВыгрузки, УникальныйИдентификатор);
		Иначе
			СсылкаНаДвоичныеДанныеФайла = ПоместитьВоВременноеХранилище(ФайлВыгрузки, Новый УникальныйИдентификатор());
		КонецЕсли;
		
		СтруктураВыгрузки = Новый Структура;
		СтруктураВыгрузки.Вставить("АдресФайлаВыгрузки", СсылкаНаДвоичныеДанныеФайла);
		СтруктураВыгрузки.Вставить("ИмяФайлаВыгрузки", ИмяИтоговогоФайла);
		
		ОкончательныйПакетФайлов.Добавить(СтруктураВыгрузки);
		
		УдалитьФайлы(Контекст.ВременныйКаталог, ИмяФайла);
		УдалитьФайлы(Контекст.ВременныйКаталог, ИмяИтоговогоФайла);
		
	КонецЦикла;
	
	Возврат ОкончательныйПакетФайлов;
	
КонецФункции

Процедура ЗаполнитьСведенияОбУчастникахОрганизациях503(Контекст, ТекстСделки, Листы2, ДанныеРаздела2, Сделка)
	
	СписокЛистов2 = Листы2.НайтиСтроки(Новый Структура("Сделка", Сделка));
	
	Для Каждого Лист2 Из СписокЛистов2 Цикл
		
		ДанныеЛиста2 = ДанныеРаздела2.Найти(Лист2.Контрагент, "Контрагент");
		
		Шаблон_СвОргУчаст = "<СвОргУчаст %НомПорСд% %СведОтнАгент% %ПрОрг% %ОКСМ% %НаимОргРус% %НаимОргЛат% %ИННЮЛ% %КПП% %РегНомИн% %КодНПРег% %АдрИнТекст%/>";
		Если Не Лист2.СведенияОКомиссионере Тогда
			УстановитьАтрибут(Шаблон_СвОргУчаст, "НомПорСд", XMLСтрока(ДанныеЛиста2.НомерКонтрагента));
		Иначе
			УстановитьАтрибут(Шаблон_СвОргУчаст, "НомПорСд", XMLСтрока(0));
		КонецЕсли;
		УстановитьАтрибут(Шаблон_СвОргУчаст, "СведОтнАгент", Лист2.СведОтносительноАгента);
		УстановитьАтрибут(Шаблон_СвОргУчаст, "ПрОрг", ДанныеЛиста2.Строка020ТипОрганизации);
		УстановитьАтрибут(Шаблон_СвОргУчаст, "ОКСМ", ДанныеЛиста2.Строка030КакКодСтраныРегистрации);
		УстановитьАтрибут(Шаблон_СвОргУчаст, "НаимОргРус", ДанныеЛиста2.Строка040Наименование);
		УстановитьНеобязательныйАтрибут(Шаблон_СвОргУчаст, "НаимОргЛат", ДанныеЛиста2.Строка040НаименованиеЛат);
		УстановитьНеобязательныйАтрибут(Шаблон_СвОргУчаст, "ИННЮЛ", ДанныеЛиста2.Строка050ИНН);
		УстановитьНеобязательныйАтрибут(Шаблон_СвОргУчаст, "КПП", ДанныеЛиста2.Строка060КПП);
		УстановитьНеобязательныйАтрибут(Шаблон_СвОргУчаст, "РегНомИн", ДанныеЛиста2.Строка070РегНомерВСтрокеРегистрации);
		УстановитьНеобязательныйАтрибут(Шаблон_СвОргУчаст, "КодНПРег", ДанныеЛиста2.Строка080КодНалогВСтранеРегистрации);
		УстановитьНеобязательныйАтрибут(Шаблон_СвОргУчаст, "АдрИнТекст", ?(ДанныеЛиста2.Строка020ТипОрганизации = 1, "", ДанныеЛиста2.Строка090АдресИностраннойОрганизации));
		
		ТекстСделки.ДобавитьСтроку(Контекст.Отступ + Шаблон_СвОргУчаст);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСведенияОснованияКонтроляСделки502(Контекст, ТекстСделки, Сведения)
	
	Шаблон_ОснКонтрСд = "<ОснКонтрСд %ВзЗавис%>";
	УстановитьНеобязательныйАтрибут(Шаблон_ОснКонтрСд, "ВзЗавис", Сведения.Строка100Взаимозависимость);
	
	ТекстСделки.ДобавитьСтроку(Контекст.Отступ + Шаблон_ОснКонтрСд);
	
	УвеличитьОтступ(Контекст);
	
	Шаблон_Осн105_14 = "<Осн105.14 %Осн121% %Осн122% %Осн123% %Осн124%/>";
	УстановитьАтрибут(Шаблон_Осн105_14, "Осн121", Сведения.Строка121СтороныВзаимозависимыПоКодексу);
	УстановитьАтрибут(Шаблон_Осн105_14, "Осн122", Сведения.Строка122СделкаВОбластиВнешнейТорговли);
	УстановитьАтрибут(Шаблон_Осн105_14, "Осн123", Сведения.Строка123СделкаСКонтрагентомСЛьготнымНалогообложением);
	УстановитьАтрибут(Шаблон_Осн105_14, "Осн124", Сведения.Строка124СделкаСНезависимымПосредником);
	
	ТекстСделки.ДобавитьСтроку(Контекст.Отступ + Шаблон_Осн105_14);
	
	Шаблон_ОснРФ105_14 = "<ОснРФ105.14 %Осн131% %Осн132% %Осн133% %Осн134% %Осн135%/>";
	УстановитьАтрибут(Шаблон_ОснРФ105_14, "Осн131", Сведения.Строка131СуммаДоходовПоСделкамПревышаетПредел);
	УстановитьАтрибут(Шаблон_ОснРФ105_14, "Осн132", Сведения.Строка132СделкаСПлательщикомНДПИ);
	УстановитьАтрибут(Шаблон_ОснРФ105_14, "Осн133", Сведения.Строка133СделкаСКонтрагентомНаСпецрежимах);
	УстановитьАтрибут(Шаблон_ОснРФ105_14, "Осн134", Сведения.Строка134СделкаСПлательщикомНалогаНаПрибыль);
	УстановитьАтрибут(Шаблон_ОснРФ105_14, "Осн135", Сведения.Строка135СделкаСРезидентомОЭЗ);
	
	ТекстСделки.ДобавитьСтроку(Контекст.Отступ + Шаблон_ОснРФ105_14);
	
	УменьшитьОтступ(Контекст);
	
	ТекстСделки.ДобавитьСтроку(Контекст.Отступ + "</ОснКонтрСд>");
	
КонецПроцедуры

Процедура ЗаполнитьСведенияОснованияКонтроляСделки503(Контекст, ТекстСделки, Сведения)
	
	Шаблон_ОснКонтрСд = "<ОснКонтрСд %ВзЗавис%>";
	УстановитьНеобязательныйАтрибут(Шаблон_ОснКонтрСд, "ВзЗавис", Сведения.Строка100Взаимозависимость);
	
	ТекстСделки.ДобавитьСтроку(Контекст.Отступ + Шаблон_ОснКонтрСд);
	
	УвеличитьОтступ(Контекст);
	
	Шаблон_Осн105_14 = "<Осн105.14 %Осн121% %Осн122% %Осн123% %Осн124%/>";
	УстановитьАтрибут(Шаблон_Осн105_14, "Осн121", Сведения.Строка121СтороныВзаимозависимыПоКодексу);
	УстановитьАтрибут(Шаблон_Осн105_14, "Осн122", Сведения.Строка122СделкаВОбластиВнешнейТорговли);
	УстановитьАтрибут(Шаблон_Осн105_14, "Осн123", Сведения.Строка123СделкаСКонтрагентомСЛьготнымНалогообложением);
	УстановитьАтрибут(Шаблон_Осн105_14, "Осн124", Сведения.Строка124СделкаСНезависимымПосредником);
	
	ТекстСделки.ДобавитьСтроку(Контекст.Отступ + Шаблон_Осн105_14);
	
	Шаблон_ОснРФ105_14 = "<ОснРФ105.14 %Осн131% %Осн132% %Осн133% %Осн134% %Осн135% %Осн136% %Осн137% %Осн138% %Осн139% %Осн140%/>";
	УстановитьАтрибут(Шаблон_ОснРФ105_14, "Осн131", Сведения.Строка131СуммаДоходовПоСделкамПревышаетПредел);
	УстановитьАтрибут(Шаблон_ОснРФ105_14, "Осн132", Сведения.Строка132СделкаСПлательщикомНДПИ);
	УстановитьАтрибут(Шаблон_ОснРФ105_14, "Осн133", Сведения.Строка133СделкаСКонтрагентомНаСпецрежимах);
	УстановитьАтрибут(Шаблон_ОснРФ105_14, "Осн134", Сведения.Строка134СделкаСПлательщикомНалогаНаПрибыль);
	УстановитьАтрибут(Шаблон_ОснРФ105_14, "Осн135", Сведения.Строка135СделкаСРезидентомОЭЗ);
	УстановитьАтрибут(Шаблон_ОснРФ105_14, "Осн136", Сведения.Строка136СделкаМорскогоМесторождения);
	УстановитьАтрибут(Шаблон_ОснРФ105_14, "Осн137", Сведения.Строка137СделкаИнвестиционныйПроект);
	УстановитьАтрибут(Шаблон_ОснРФ105_14, "Осн138", Сведения.Строка138СделкаОсвобождениеОтНДС);
	УстановитьАтрибут(Шаблон_ОснРФ105_14, "Осн139", Сведения.Строка139СделкаНалоговыйВычетПоНалогуНаПрибыль);
	УстановитьАтрибут(Шаблон_ОснРФ105_14, "Осн140", Сведения.Строка140СделкаНалогНаДополнительныйДоходУглеводородов);
	
	ТекстСделки.ДобавитьСтроку(Контекст.Отступ + Шаблон_ОснРФ105_14);
	
	УменьшитьОтступ(Контекст);
	
	ТекстСделки.ДобавитьСтроку(Контекст.Отступ + "</ОснКонтрСд>");
	
КонецПроцедуры

Процедура ЗаполнитьСведенияОСделке502_503(Контекст, ТекстСделки, Сведения)
	
	ЭтоГруппаОднородныхСделок = Ложь;
	
	Шаблон_КонтрСд = "<КонтрСд %ГрупОС% %КодНаимСд% %КодСторСд% %ПрОпрЦен% %КомПрОпрЦен% %КодОпрЦен% %КомКодОпрЦен% %КодМетЦен% %КомКодМетЦен% %КолУчСд% %КомКолУчСд%>";
	
	УстановитьАтрибут(Шаблон_КонтрСд, "ГрупОС", ?(ЭтоГруппаОднородныхСделок, "1", "0"));
	УстановитьАтрибут(Шаблон_КонтрСд, "КодНаимСд", Сведения.Строка210КодНаименованияСделки);
	УстановитьАтрибут(Шаблон_КонтрСд, "КодСторСд", Сведения.Строка211КодСтороныСделки);
	УстановитьАтрибут(Шаблон_КонтрСд, "ПрОпрЦен", Сведения.Строка220ПризнакОпределенияЦеныСделки);
	УстановитьНеобязательныйАтрибут(Шаблон_КонтрСд, "КомПрОпрЦен", Сведения.Строка220_1Комментарий);
	УстановитьАтрибут(Шаблон_КонтрСд, "КодОпрЦен", Сведения.Строка230КодОпределенияЦены);
	УстановитьНеобязательныйАтрибут(Шаблон_КонтрСд, "КомКодОпрЦен", Сведения.Строка230_1Комментарий);
	УстановитьНеобязательныйАтрибут(Шаблон_КонтрСд, "КодМетЦен", Сведения.Строка240КодМетодовЦенообразования);
	УстановитьНеобязательныйАтрибут(Шаблон_КонтрСд, "КомКодМетЦен", Сведения.Строка240_1Комментарий);
	УстановитьАтрибут(Шаблон_КонтрСд, "КолУчСд", Формат(Сведения.Строка260КоличествоУчастниковСделки, "ЧЦ=3; ЧДЦ=0; ЧН=; ЧГ=0"));
	УстановитьНеобязательныйАтрибут(Шаблон_КонтрСд, "КомКолУчСд", Сведения.Строка260_1Комментарий);
	
	ТекстСделки.ДобавитьСтроку(Контекст.Отступ + Шаблон_КонтрСд);
	
	Если ЕстьЗаполненныеРеквизиты(Сведения, "Строка251, Строка252, Строка253, Строка254, Строка255, Строка256, Строка257, Строка258, Строка259") Тогда
		УвеличитьОтступ(Контекст);
		
		Шаблон_КодИстИнф = "<КодИстИнф %Ист251% %Ист252% %Ист253% %Ист254% %Ист255% %Ист256% %Ист257% %Ист258% %Ист259%/>";
		УстановитьАтрибут(Шаблон_КодИстИнф, "Ист251", Сведения.Строка251);
		УстановитьАтрибут(Шаблон_КодИстИнф, "Ист252", Сведения.Строка252);
		УстановитьАтрибут(Шаблон_КодИстИнф, "Ист253", Сведения.Строка253);
		УстановитьАтрибут(Шаблон_КодИстИнф, "Ист254", Сведения.Строка254);
		УстановитьАтрибут(Шаблон_КодИстИнф, "Ист255", Сведения.Строка255);
		УстановитьАтрибут(Шаблон_КодИстИнф, "Ист256", Сведения.Строка256);
		УстановитьАтрибут(Шаблон_КодИстИнф, "Ист257", Сведения.Строка257);
		УстановитьАтрибут(Шаблон_КодИстИнф, "Ист258", Сведения.Строка258);
		УстановитьАтрибут(Шаблон_КодИстИнф, "Ист259", Сведения.Строка259);
		
		ТекстСделки.ДобавитьСтроку(Контекст.Отступ + Шаблон_КодИстИнф);
		
		УменьшитьОтступ(Контекст);
	КонецЕсли;
	
	ТекстСделки.ДобавитьСтроку(Контекст.Отступ + "</КонтрСд>");
	
КонецПроцедуры

Процедура ЗаполнитьСведенияОДоходахРасходах502_503(Контекст, ТекстСделки, Сведения)
	
	Шаблон_ДохРасхСд = "<ДохРасхСд %СумДохСд% %СумДохСдРег% %СумРасхСд% %СумРасхСдРег%/>";
	УстановитьАтрибут(Шаблон_ДохРасхСд, "СумДохСд", Формат(Сведения.Строка300СуммаДоходов, "ЧЦ=15; ЧДЦ=0; ЧН=; ЧГ=0"));
	УстановитьНеобязательныйАтрибут(Шаблон_ДохРасхСд, "СумДохСдРег", Формат(Сведения.Строка301СуммаРегулируемыхДоходов, "ЧЦ=15; ЧДЦ=0; ЧГ=0"));
	УстановитьАтрибут(Шаблон_ДохРасхСд, "СумРасхСд", Формат(Сведения.Строка310СуммаРасходов, "ЧЦ=15; ЧДЦ=0; ЧН=; ЧГ=0"));
	УстановитьНеобязательныйАтрибут(Шаблон_ДохРасхСд, "СумРасхСдРег", Формат(Сведения.Строка311СуммаРегулируемыхРасходов, "ЧЦ=15; ЧДЦ=0; ЧГ=0"));
	
	ТекстСделки.ДобавитьСтроку(Контекст.Отступ + Шаблон_ДохРасхСд);
	
КонецПроцедуры

Процедура ЗаполнитьСведенияОПредметеСделки502(Контекст, ТекстСделки, Листы1Б, Сделка)
	
	ТипыПредметовСделок = Новый Соответствие;
	
	СписокЛистов1Б = Листы1Б.НайтиСтроки(Новый Структура("Сделка", Сделка));
	Для Каждого Лист1Б Из СписокЛистов1Б Цикл
		ЛистыТипаПредмета = ТипыПредметовСделок.Получить(Лист1Б.Строка020ТипПредмета);
		Если ЛистыТипаПредмета = Неопределено Тогда
			ТипыПредметовСделок.Вставить(Лист1Б.Строка020ТипПредмета, Новый Массив());
			ЛистыТипаПредмета = ТипыПредметовСделок.Получить(Лист1Б.Строка020ТипПредмета);
		КонецЕсли;
		ЛистыТипаПредмета.Добавить(Лист1Б);
	КонецЦикла;
	
	Для Каждого ТипПредмета ИЗ ТипыПредметовСделок Цикл
		Шаблон_СвПредмСд = "<СвПредмСд %ТипПредСд%>";
		
		ТипПредСд = ТипПредмета.Ключ;
		УстановитьАтрибут(Шаблон_СвПредмСд, "ТипПредСд", ТипПредСд);
		
		ТекстСделки.ДобавитьСтроку(Контекст.Отступ + Шаблон_СвПредмСд);
		
		УвеличитьОтступ(Контекст);
		
		Для Каждого Лист1Б ИЗ ТипПредмета.Значение Цикл
			Шаблон_ПерПредСд = "<ПерПредСд %НаимПредСд% %ТНВЭД% %ОКП% %ОКВЭД% %НомУчСд% %НомДог% %ДатаДог% %ОКСМ% %КодУсловПост% %ОКЕИ% %Количество% %ЦенаЕдин% %СтоимИтог% %ДатаСовСд%>";
			
			ЗаполненОКП = ЗначениеЗаполнено(Лист1Б.Строка043КодПоОКП) ИЛИ ЗначениеЗаполнено(Лист1Б.Строка043КодПоОКПД2);
			ЗаполненТНВЭД = ЗначениеЗаполнено(Лист1Б.Строка040КодПоТНВЭД);
			
			Если ТипПредСд = 1 Тогда
				Если ЗаполненОКП Тогда
					УстановитьНеобязательныйАтрибут(Шаблон_ПерПредСд, "ТНВЭД", Лист1Б.Строка040КодПоТНВЭД); // Атрибут может присутствовать
				Иначе
					УстановитьАтрибут(Шаблон_ПерПредСд, "ТНВЭД", Лист1Б.Строка040КодПоТНВЭД); // Атрибут должен присутствовать
				КонецЕсли;
				Если Контекст.ОсновныеСведенияВыгрузки.ВерсияУведомления = КонтролируемыеСделкиКлиентСервер.ВерсияУведомления_2012() Тогда
					КодПоОКП = Лист1Б.Строка043КодПоОКП;
				Иначе
					КодПоОКП = КонтролируемыеСделки.КодПоОКПИзКодаПоОКПД2(Лист1Б.Строка043КодПоОКПД2);
				КонецЕсли;
				Если ЗаполненТНВЭД Тогда
					УстановитьНеобязательныйАтрибут(Шаблон_ПерПредСд, "ОКП", КодПоОКП); // Атрибут может присутствовать
				Иначе
					УстановитьАтрибут(Шаблон_ПерПредСд, "ОКП", КодПоОКП); // Атрибут должен присутствовать
				КонецЕсли;
				УстановитьНеобязательныйАтрибут(Шаблон_ПерПредСд, "ОКВЭД", ""); // Атрибут должен отсутствовать
				УстановитьНеобязательныйАтрибут(Шаблон_ПерПредСд, "КодУсловПост", Лист1Б.Строка100КодУсловийПоставки); // Атрибут может присутствовать
			Иначе // значения 2 и 3
				УстановитьНеобязательныйАтрибут(Шаблон_ПерПредСд, "ТНВЭД", ""); // Атрибут должен отсутствовать
				УстановитьНеобязательныйАтрибут(Шаблон_ПерПредСд, "ОКП", ""); // Атрибут должен отсутствовать
				Если Контекст.ОсновныеСведенияВыгрузки.ВерсияУведомления = КонтролируемыеСделкиКлиентСервер.ВерсияУведомления_2012() Тогда
					УстановитьАтрибут(Шаблон_ПерПредСд, "ОКВЭД", Лист1Б.Строка045КодОКВЭД); // Атрибут должен присутствовать
				Иначе
					УстановитьАтрибут(Шаблон_ПерПредСд, "ОКВЭД", Лист1Б.Строка045КодОКВЭД2); // Атрибут должен присутствовать
				КонецЕсли;
				УстановитьНеобязательныйАтрибут(Шаблон_ПерПредСд, "КодУсловПост", ""); // Атрибут должен отсутствовать
			КонецЕсли;
			
			УстановитьАтрибут(Шаблон_ПерПредСд, "НаимПредСд", Лист1Б.Строка030НаименованиеПредмета);
			УстановитьАтрибут(Шаблон_ПерПредСд, "НомУчСд", Формат(Лист1Б.Строка050НомерУчастникаСделки, "ЧЦ=4; ЧДЦ=0; ЧН=; ЧГ=0"));
			УстановитьАтрибут(Шаблон_ПерПредСд, "НомДог", Лист1Б.Строка060НомерДоговора);
			УстановитьАтрибут(Шаблон_ПерПредСд, "ДатаДог", Формат(Лист1Б.Строка065ДатаДоговора, "ДФ=dd.MM.yyyy"));
			УстановитьНеобязательныйАтрибут(Шаблон_ПерПредСд, "ОКСМ", Лист1Б.Строка070КодСтраныПроисхождения);
			УстановитьАтрибут(Шаблон_ПерПредСд, "ОКЕИ", СокрЛП(Лист1Б.Строка110КодЕдиницыИзмерения));
			УстановитьАтрибут(Шаблон_ПерПредСд, "Количество", Формат(Лист1Б.Строка120Количество, "ЧЦ=15; ЧДЦ=0; ЧН=; ЧГ=0"));
			УстановитьАтрибут(Шаблон_ПерПредСд, "ЦенаЕдин", Формат(Лист1Б.Строка130Цена, "ЧЦ=15; ЧДЦ=0; ЧН=; ЧГ=0"));
			УстановитьАтрибут(Шаблон_ПерПредСд, "СтоимИтог", Формат(Лист1Б.Строка140Стоимость, "ЧЦ=15; ЧДЦ=0; ЧН=; ЧГ=0"));
			УстановитьАтрибут(Шаблон_ПерПредСд, "ДатаСовСд", Формат(Лист1Б.Строка150ДатаСовершения, "ДФ=dd.MM.yyyy"));
			
			ТекстСделки.ДобавитьСтроку(Контекст.Отступ + Шаблон_ПерПредСд);
			
			УвеличитьОтступ(Контекст);
			
			Если ЕстьЗаполненныеРеквизиты(Лист1Б, "Строка080КодСтраныОтправки, Строка080КодРегионаОтправки, Строка080ГородОтправки, Строка080НаселенныйПунктОтправки") Тогда
				Шаблон_МестОтпрТов = "<МестОтпрТов %ОКСМ% %КодРегион% %Город% %НаселПункт%/>";
				УстановитьАтрибут(Шаблон_МестОтпрТов, "ОКСМ", Лист1Б.Строка080КодСтраныОтправки);
				УстановитьНеобязательныйАтрибут(Шаблон_МестОтпрТов, "КодРегион", Лист1Б.Строка080КодРегионаОтправки);
				УстановитьНеобязательныйАтрибут(Шаблон_МестОтпрТов, "Город", Лист1Б.Строка080ГородОтправки);
				УстановитьНеобязательныйАтрибут(Шаблон_МестОтпрТов, "НаселПункт", Лев(Лист1Б.Строка080НаселенныйПунктОтправки, 50));
				
				ТекстСделки.ДобавитьСтроку(Контекст.Отступ + Шаблон_МестОтпрТов);
			КонецЕсли;
			
			Если ЕстьЗаполненныеРеквизиты(Лист1Б, "Строка090КодСтраныСовершенияСделки, Строка090КодРегионаСовершенияСделки, Строка090ГородСовершенияСделки, Строка090НаселенныйПунктСовершенияСделки") Тогда
				Шаблон_МестСовСд = "<МестСовСд %ОКСМ% %КодРегион% %Город% %НаселПункт%/>";
				УстановитьАтрибут(Шаблон_МестСовСд, "ОКСМ", Лист1Б.Строка090КодСтраныСовершенияСделки);
				УстановитьНеобязательныйАтрибут(Шаблон_МестСовСд, "КодРегион", Лист1Б.Строка090КодРегионаСовершенияСделки);
				УстановитьНеобязательныйАтрибут(Шаблон_МестСовСд, "Город", Лист1Б.Строка090ГородСовершенияСделки);
				УстановитьНеобязательныйАтрибут(Шаблон_МестСовСд, "НаселПункт", Лев(Лист1Б.Строка090НаселенныйПунктСовершенияСделки, 50));
				
				ТекстСделки.ДобавитьСтроку(Контекст.Отступ + Шаблон_МестСовСд);
			КонецЕсли;
			
			УменьшитьОтступ(Контекст);
			
			ТекстСделки.ДобавитьСтроку(Контекст.Отступ + "</ПерПредСд>");
		КонецЦикла;
		
		УменьшитьОтступ(Контекст);
		
		ТекстСделки.ДобавитьСтроку(Контекст.Отступ + "</СвПредмСд>");
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСведенияОПредметеСделки503(Контекст, ТекстСделки, Листы1Б, Сделка)
	
	ТипыПредметовСделок = Новый Соответствие;
	
	СписокЛистов1Б = Листы1Б.НайтиСтроки(Новый Структура("Сделка", Сделка));
	Для Каждого Лист1Б Из СписокЛистов1Б Цикл
		ЛистыТипаПредмета = ТипыПредметовСделок.Получить(Лист1Б.Строка020ТипПредмета);
		Если ЛистыТипаПредмета = Неопределено Тогда
			ТипыПредметовСделок.Вставить(Лист1Б.Строка020ТипПредмета, Новый Массив());
			ЛистыТипаПредмета = ТипыПредметовСделок.Получить(Лист1Б.Строка020ТипПредмета);
		КонецЕсли;
		ЛистыТипаПредмета.Добавить(Лист1Б);
	КонецЦикла;
	
	Для Каждого ТипПредмета ИЗ ТипыПредметовСделок Цикл
		Шаблон_СвПредмСдН = "<СвПредмСдН %ТипПредСд%>";
		
		ТипПредСд = ТипПредмета.Ключ;
		УстановитьАтрибут(Шаблон_СвПредмСдН, "ТипПредСд", ТипПредСд);
		
		ТекстСделки.ДобавитьСтроку(Контекст.Отступ + Шаблон_СвПредмСдН);
		
		УвеличитьОтступ(Контекст);
		
		Для Каждого Лист1Б ИЗ ТипПредмета.Значение Цикл
			Шаблон_ПерПредСд = "<ПерПредСд %НаимПредСд% %ТНВЭД% %ОКПД2% %ОКВЭД2% %НомУчСд% %НомДог% %ДатаДог% %ОКСМ% %КодУсловПост% %ОКЕИ% %Количество% %ЦенаЕдин% %КодВалют% %ПроцСтав% %СтоимИтог% %ДатаСовСд%>";
			
			ЗаполненОКПД2 = ЗначениеЗаполнено(Лист1Б.Строка043КодПоОКПД2);
			ЗаполненТНВЭД = ЗначениеЗаполнено(Лист1Б.Строка040КодПоТНВЭД);
			
			Если ТипПредСд = 1 Тогда
				Если ЗаполненОКПД2 Тогда
					УстановитьНеобязательныйАтрибут(Шаблон_ПерПредСд, "ТНВЭД", Лист1Б.Строка040КодПоТНВЭД); // Атрибут может присутствовать
				Иначе
					УстановитьАтрибут(Шаблон_ПерПредСд, "ТНВЭД", Лист1Б.Строка040КодПоТНВЭД); // Атрибут должен присутствовать
				КонецЕсли;
				Если ЗаполненТНВЭД Тогда
					УстановитьНеобязательныйАтрибут(Шаблон_ПерПредСд, "ОКПД2", Лист1Б.Строка043КодПоОКПД2); // Атрибут может присутствовать
				Иначе
					УстановитьАтрибут(Шаблон_ПерПредСд, "ОКПД2", Лист1Б.Строка043КодПоОКПД2); // Атрибут должен присутствовать
				КонецЕсли;
				УстановитьНеобязательныйАтрибут(Шаблон_ПерПредСд, "ОКВЭД2", ""); // Атрибут должен отсутствовать
				УстановитьНеобязательныйАтрибут(Шаблон_ПерПредСд, "КодУсловПост", Лист1Б.Строка100КодУсловийПоставки); // Атрибут может присутствовать
			Иначе // значения 2 и 3
				УстановитьНеобязательныйАтрибут(Шаблон_ПерПредСд, "ТНВЭД", ""); // Атрибут должен отсутствовать
				УстановитьНеобязательныйАтрибут(Шаблон_ПерПредСд, "ОКПД2", ""); // Атрибут должен отсутствовать
				УстановитьАтрибут(Шаблон_ПерПредСд, "ОКВЭД2", Лист1Б.Строка045КодОКВЭД2); // Атрибут должен присутствовать
				УстановитьНеобязательныйАтрибут(Шаблон_ПерПредСд, "КодУсловПост", ""); // Атрибут должен отсутствовать
			КонецЕсли;
			
			УстановитьАтрибут(Шаблон_ПерПредСд, "НаимПредСд", Лист1Б.Строка030НаименованиеПредмета);
			УстановитьАтрибут(Шаблон_ПерПредСд, "НомУчСд", Формат(Лист1Б.Строка050НомерУчастникаСделки, "ЧЦ=4; ЧДЦ=0; ЧН=; ЧГ=0"));
			УстановитьАтрибут(Шаблон_ПерПредСд, "НомДог", Лист1Б.Строка060НомерДоговора);
			УстановитьАтрибут(Шаблон_ПерПредСд, "ДатаДог", Формат(Лист1Б.Строка065ДатаДоговора, "ДФ=dd.MM.yyyy"));
			УстановитьНеобязательныйАтрибут(Шаблон_ПерПредСд, "ОКСМ", Лист1Б.Строка070КодСтраныПроисхождения);
			УстановитьНеобязательныйАтрибут(Шаблон_ПерПредСд, "ОКЕИ", СокрЛП(Лист1Б.Строка110КодЕдиницыИзмерения));
			УстановитьАтрибут(Шаблон_ПерПредСд, "Количество", Формат(Лист1Б.Строка120Количество, "ЧЦ=14; ЧДЦ=5; ЧРД=.; ЧН=' '; ЧГ=0"));
			УстановитьНеобязательныйАтрибут(Шаблон_ПерПредСд, "ЦенаЕдин", Формат(Лист1Б.Строка130Цена, "ЧЦ=18; ЧДЦ=4; ЧРД=.; ЧН=' '; ЧГ=0"));
			УстановитьНеобязательныйАтрибут(Шаблон_ПерПредСд, "КодВалют", Лист1Б.Строка140КодВалюты);
			УстановитьНеобязательныйАтрибут(Шаблон_ПерПредСд, "ПроцСтав", Формат(Лист1Б.Строка150ПроцентнаяСтавка, "ЧЦ=7; ЧДЦ=4; ЧРД=.; ЧН=' '; ЧГ=0"));
			УстановитьНеобязательныйАтрибут(Шаблон_ПерПредСд, "СтоимИтог", Формат(Лист1Б.Строка160Стоимость, "ЧЦ=15; ЧДЦ=0; ЧН=' '; ЧГ=0"));
			УстановитьАтрибут(Шаблон_ПерПредСд, "ДатаСовСд", Формат(Лист1Б.Строка150ДатаСовершения, "ДФ=dd.MM.yyyy"));
			
			ТекстСделки.ДобавитьСтроку(Контекст.Отступ + Шаблон_ПерПредСд);
			
			УвеличитьОтступ(Контекст);
			
			Если ЕстьЗаполненныеРеквизиты(Лист1Б, "Строка080КодСтраныОтправки, Строка080КодРегионаОтправки, Строка080НаселенныйПунктОтправки") Тогда
				Шаблон_МестОтпрТов = "<МестОтпрТов %ОКСМ% %КодРегион% %НаселПункт%/>";
				УстановитьАтрибут(Шаблон_МестОтпрТов, "ОКСМ", Лист1Б.Строка080КодСтраныОтправки);
				УстановитьНеобязательныйАтрибут(Шаблон_МестОтпрТов, "КодРегион", Лист1Б.Строка080КодРегионаОтправки);

				УстановитьНеобязательныйАтрибут(Шаблон_МестОтпрТов, "НаселПункт", Лист1Б.Строка080НаселенныйПунктОтправки);
				
				ТекстСделки.ДобавитьСтроку(Контекст.Отступ + Шаблон_МестОтпрТов);
			КонецЕсли;
			
			Если ЕстьЗаполненныеРеквизиты(Лист1Б, "Строка090КодСтраныСовершенияСделки, Строка090КодРегионаСовершенияСделки, Строка090НаселенныйПунктСовершенияСделки") Тогда
				Шаблон_МестСовСд = "<МестСовСд %ОКСМ% %КодРегион% %НаселПункт%/>";
				УстановитьАтрибут(Шаблон_МестСовСд, "ОКСМ", Лист1Б.Строка090КодСтраныСовершенияСделки);
				УстановитьНеобязательныйАтрибут(Шаблон_МестСовСд, "КодРегион", Лист1Б.Строка090КодРегионаСовершенияСделки);

				УстановитьНеобязательныйАтрибут(Шаблон_МестСовСд, "НаселПункт", Лист1Б.Строка090НаселенныйПунктСовершенияСделки);
				
				ТекстСделки.ДобавитьСтроку(Контекст.Отступ + Шаблон_МестСовСд);
			КонецЕсли;
			
			УменьшитьОтступ(Контекст);
			
			ТекстСделки.ДобавитьСтроку(Контекст.Отступ + "</ПерПредСд>");
		КонецЦикла;
		
		УменьшитьОтступ(Контекст);
		
		ТекстСделки.ДобавитьСтроку(Контекст.Отступ + "</СвПредмСдН>");
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСведенияОбУчастникахОрганизациях502(Контекст, ТекстСделки, Листы2, ДанныеРаздела2, Сделка)
	
	СписокЛистов2 = Листы2.НайтиСтроки(Новый Структура("Сделка", Сделка));
	
	Для Каждого Лист2 Из СписокЛистов2 Цикл
		
		ДанныеЛиста2 = ДанныеРаздела2.Найти(Лист2.Контрагент, "Контрагент");
		
		Шаблон_СвОргУчаст = "<СвОргУчаст %НомПорСд% %ПрОрг% %ОКСМ% %НаимОрг% %ИННЮЛ% %КПП% %РегНомИн% %КодНПРег% %АдрИнТекст%/>";
		УстановитьАтрибут(Шаблон_СвОргУчаст, "НомПорСд", XMLСтрока(ДанныеЛиста2.НомерКонтрагента));
		УстановитьАтрибут(Шаблон_СвОргУчаст, "ПрОрг", ДанныеЛиста2.Строка020ТипОрганизации);
		УстановитьАтрибут(Шаблон_СвОргУчаст, "ОКСМ", ДанныеЛиста2.Строка030КакКодСтраныРегистрации);
		УстановитьАтрибут(Шаблон_СвОргУчаст, "НаимОрг", ДанныеЛиста2.Строка040Наименование);
		УстановитьНеобязательныйАтрибут(Шаблон_СвОргУчаст, "ИННЮЛ", ДанныеЛиста2.Строка050ИНН);
		УстановитьНеобязательныйАтрибут(Шаблон_СвОргУчаст, "КПП", ДанныеЛиста2.Строка060КПП);
		УстановитьНеобязательныйАтрибут(Шаблон_СвОргУчаст, "РегНомИн", ДанныеЛиста2.Строка070РегНомерВСтрокеРегистрации);
		УстановитьНеобязательныйАтрибут(Шаблон_СвОргУчаст, "КодНПРег", ДанныеЛиста2.Строка080КодНалогВСтранеРегистрации);
		УстановитьНеобязательныйАтрибут(Шаблон_СвОргУчаст, "АдрИнТекст", ?(ДанныеЛиста2.Строка020ТипОрганизации = 1, "", ДанныеЛиста2.Строка090АдресИностраннойОрганизации));
		
		ТекстСделки.ДобавитьСтроку(Контекст.Отступ + Шаблон_СвОргУчаст);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСведенияОбУчастникахФизЛицах502(Контекст, ТекстСделки, Листы3, ДанныеРаздела3, Сделка)
	
	СписокЛистов3 = Листы3.НайтиСтроки(Новый Структура("Сделка", Сделка));
	
	Для Каждого Лист3 Из СписокЛистов3 Цикл
		
		Физлицо = ДанныеРаздела3.Найти(Лист3.Контрагент, "Контрагент");
		
		Шаблон_СвФЛУчаст = "<СвФЛУчаст %НомПорСд% %КодВД%>";
		УстановитьАтрибут(Шаблон_СвФЛУчаст, "НомПорСд", Физлицо.НомерКонтрагента);
		УстановитьАтрибут(Шаблон_СвФЛУчаст, "КодВД", ФизЛицо.Строка020КодВидаДеятельности);
		
		ТекстСделки.ДобавитьСтроку(Контекст.Отступ + Шаблон_СвФЛУчаст);
		
		УвеличитьОтступ(Контекст);
		
		Шаблон_ФИО = "<ФИО %Фамилия% %Имя% %Отчество%/>";
		УстановитьАтрибут(Шаблон_ФИО, "Фамилия", ФизЛицо.Фамилия);
		УстановитьАтрибут(Шаблон_ФИО, "Имя", ФизЛицо.Имя);
		УстановитьНеобязательныйАтрибут(Шаблон_ФИО, "Отчество", ФизЛицо.Отчество);
		
		ТекстСделки.ДобавитьСтроку(Контекст.Отступ + Шаблон_ФИО);
		
		Если ЗначениеЗаполнено(ФизЛицо.Строка030ИНН) Тогда
			Шаблон_ИННФЛ = СтрЗаменить("<ИННФЛ>%ИННФЛ%</ИННФЛ>", "%ИННФЛ%", ФизЛицо.Строка030ИНН);
			
			ТекстСделки.ДобавитьСтроку(Контекст.Отступ + Шаблон_ИННФЛ);
		Иначе
			Шаблон_СвФЛ = "<СвФЛ %ДатаРожд% %МестоРожд% %НалГражд% %ОКСМ%>";
			УстановитьАтрибут(Шаблон_СвФЛ, "ДатаРожд", ФизЛицо.ФизическоеЛицо.ДатаРождения);
			УстановитьАтрибут(Шаблон_СвФЛ, "МестоРожд", ФизЛицо.ФизическоеЛицо.МестоРождения);
			УстановитьАтрибут(Шаблон_СвФЛ, "НалГражд", ?(ФизЛицо.ГражданствоФизЛицСтрана = Справочники.КлассификаторСтранМира.Россия, "1", "2"));
			УстановитьАтрибут(Шаблон_СвФЛ, "ОКСМ", ?(ЗначениеЗаполнено(ФизЛицо.ГражданствоФизЛицСтрана), ФизЛицо.ГражданствоФизЛицСтрана.Код, "643"));
			
			ТекстСделки.ДобавитьСтроку(Контекст.Отступ + Шаблон_СвФЛ);
			
			УвеличитьОтступ(Контекст);
			
			Шаблон_УдЛичнФЛ = "<УдЛичнФЛ %КодВидДок% %СерНомДок% %ДатаДок% %ВыдДок%/>";
			УстановитьАтрибут(Шаблон_УдЛичнФЛ, "КодВидДок", КонтролируемыеСделкиПовтИсп.ПолучитьКодВидаДокументаПоВидуДокумента(ФизЛицо.ДокументВид));
			УстановитьАтрибут(Шаблон_УдЛичнФЛ, "СерНомДок", Строка(ФизЛицо.ДокументСерия) + " " + ФизЛицо.ДокументНомер);
			УстановитьАтрибут(Шаблон_УдЛичнФЛ, "ДатаДок", ФизЛицо.ДокументДатаВыдачи);
			УстановитьАтрибут(Шаблон_УдЛичнФЛ, "ВыдДок", ФизЛицо.ДокументКемВыдан);
			
			ТекстСделки.ДобавитьСтроку(Контекст.Отступ + Шаблон_УдЛичнФЛ);
			
			Шаблон_СвАдрРФ = "<СвАдрРФ %ПрАдр%>";
			УстановитьАтрибут(Шаблон_СвАдрРФ, "ПрАдр", ?(ФизЛицо.ГражданствоФизЛицСтрана = Справочники.КлассификаторСтранМира.Россия, "1", "2"));
			
			ТекстСделки.ДобавитьСтроку(Контекст.Отступ + Шаблон_СвАдрРФ);
			
			УвеличитьОтступ(Контекст);
			
			Шаблон_АдрРФ = "<АдрРФ %Индекс% %КодРегион% %Район% %Город% %НаселПункт% %Улица% %Дом% %Корпус% %Кварт%/>";
			УстановитьНеобязательныйАтрибут(Шаблон_АдрРФ, "Индекс", ФизЛицо.КонтактнаяИнформацияПоле1);
			УстановитьАтрибут(Шаблон_АдрРФ, "КодРегион", РегламентированнаяОтчетность.КодРегионаПоНазванию(ФизЛицо.КонтактнаяИнформацияПоле2));
			УстановитьНеобязательныйАтрибут(Шаблон_АдрРФ, "Район", ФизЛицо.КонтактнаяИнформацияПоле3);
			УстановитьНеобязательныйАтрибут(Шаблон_АдрРФ, "Город", ФизЛицо.КонтактнаяИнформацияПоле4);
			УстановитьНеобязательныйАтрибут(Шаблон_АдрРФ, "НаселПункт", ФизЛицо.КонтактнаяИнформацияПоле5);
			УстановитьНеобязательныйАтрибут(Шаблон_АдрРФ, "Улица", ФизЛицо.КонтактнаяИнформацияПоле6);
			УстановитьНеобязательныйАтрибут(Шаблон_АдрРФ, "Дом", ФизЛицо.КонтактнаяИнформацияПоле7);
			УстановитьНеобязательныйАтрибут(Шаблон_АдрРФ, "Корпус", ФизЛицо.КонтактнаяИнформацияПоле8);
			УстановитьНеобязательныйАтрибут(Шаблон_АдрРФ, "Кварт", ФизЛицо.КонтактнаяИнформацияПоле9);
			
			ТекстСделки.ДобавитьСтроку(Контекст.Отступ + Шаблон_АдрРФ);
			
			УменьшитьОтступ(Контекст);
			
			ТекстСделки.ДобавитьСтроку(Контекст.Отступ + "</СвАдрРФ>");
			
			Если ФизЛицо.ГражданствоФизЛицСтрана <> Справочники.КлассификаторСтранМира.Россия Тогда
				НаименованиеСтраны = ФизЛицо.КонтактнаяИнформацияЗаРФПоле1;
				Если ЗначениеЗаполнено(НаименованиеСтраны) Тогда
					НайденнаяСтрана = Справочники.КлассификаторСтранМира.НайтиПоНаименованию(НаименованиеСтраны);
					
					Шаблон_АдрИн = "<АдрИн %ОКСМ% %АдрИнТекст%/>";
					УстановитьАтрибут(Шаблон_АдрИн, "ОКСМ", НайденнаяСтрана.Код);
					УстановитьАтрибут(Шаблон_АдрИн, "АдрИнТекст", ФизЛицо.КонтактнаяИнформацияЗаРФПредставление);
					
					ТекстСделки.ДобавитьСтроку(Контекст.Отступ + Шаблон_АдрИн);
				КонецЕсли;
			КонецЕсли;
			
			УменьшитьОтступ(Контекст);
			
			ТекстСделки.ДобавитьСтроку(Контекст.Отступ + "</СвФЛ>");
		КонецЕсли;
		
		УменьшитьОтступ(Контекст);
		
		ТекстСделки.ДобавитьСтроку(Контекст.Отступ + "</СвФЛУчаст>");
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСведенияОбУчастникахФизЛицах503(Контекст, ТекстСделки, Листы3, ДанныеРаздела3, Сделка)
	
	СписокЛистов3 = Листы3.НайтиСтроки(Новый Структура("Сделка", Сделка));
	
	Для Каждого Лист3 Из СписокЛистов3 Цикл
		
		Физлицо = ДанныеРаздела3.Найти(Лист3.Контрагент, "Контрагент");
		
		Шаблон_СвФЛУчаст = "<СвФЛУчаст %НомПорСд% %СведОтнАгент% %КодВД%>";
		Если Не Лист3.СведенияОКомиссионере Тогда
			УстановитьАтрибут(Шаблон_СвФЛУчаст, "НомПорСд", XMLСтрока(Физлицо.НомерКонтрагента));
		Иначе
			УстановитьАтрибут(Шаблон_СвФЛУчаст, "НомПорСд", XMLСтрока(0));
		КонецЕсли;
		УстановитьАтрибут(Шаблон_СвФЛУчаст, "СведОтнАгент", Лист3.СведОтносительноАгента);
		УстановитьАтрибут(Шаблон_СвФЛУчаст, "КодВД", ФизЛицо.Строка020КодВидаДеятельности);
		
		ТекстСделки.ДобавитьСтроку(Контекст.Отступ + Шаблон_СвФЛУчаст);
		
		УвеличитьОтступ(Контекст);
		
		Шаблон_ФИО = "<ФИО %Фамилия% %Имя% %Отчество%/>";
		УстановитьАтрибут(Шаблон_ФИО, "Фамилия", ФизЛицо.Фамилия);
		УстановитьАтрибут(Шаблон_ФИО, "Имя", ФизЛицо.Имя);
		УстановитьНеобязательныйАтрибут(Шаблон_ФИО, "Отчество", ФизЛицо.Отчество);
		
		ТекстСделки.ДобавитьСтроку(Контекст.Отступ + Шаблон_ФИО);
		
		Если ЗначениеЗаполнено(ФизЛицо.Строка030ИНН) Тогда
			Шаблон_ИННФЛ = СтрЗаменить("<	>%ИННФЛ%</ИННФЛ>", "%ИННФЛ%", ФизЛицо.Строка030ИНН);
			
			ТекстСделки.ДобавитьСтроку(Контекст.Отступ + Шаблон_ИННФЛ);
		Иначе
			Шаблон_СвФЛ = "<СвФЛ %ДатаРожд% %МестоРожд% %Гражд% %ОКСМ%>";
			УстановитьАтрибут(Шаблон_СвФЛ, "ДатаРожд", ФизЛицо.ФизическоеЛицо.ДатаРождения);
			УстановитьАтрибут(Шаблон_СвФЛ, "МестоРожд", ФизЛицо.ФизическоеЛицо.МестоРождения);
			СведенияОГражданстве = Документы.УведомлениеОКонтролируемыхСделках.СведенияОГражданстве2018(ФизЛицо.ГражданствоФизЛицСтрана);
			УстановитьАтрибут(Шаблон_СвФЛ, "Гражд", СведенияОГражданстве.Гражд);
			УстановитьНеобязательныйАтрибут(Шаблон_СвФЛ, "ОКСМ", СведенияОГражданстве.ОКСМ);
			
			ТекстСделки.ДобавитьСтроку(Контекст.Отступ + Шаблон_СвФЛ);
			
			УвеличитьОтступ(Контекст);
			
			Шаблон_УдЛичнФЛ = "<УдЛичнФЛ %КодВидДок% %СерНомДок% %ДатаДок% %ВыдДок%/>";
			УстановитьАтрибут(Шаблон_УдЛичнФЛ, "КодВидДок", КонтролируемыеСделкиПовтИсп.ПолучитьКодВидаДокументаПоВидуДокумента(ФизЛицо.ДокументВид));
			УстановитьАтрибут(Шаблон_УдЛичнФЛ, "СерНомДок", Строка(ФизЛицо.ДокументСерия) + " " + ФизЛицо.ДокументНомер);
			УстановитьАтрибут(Шаблон_УдЛичнФЛ, "ДатаДок", ФизЛицо.ДокументДатаВыдачи);
			УстановитьАтрибут(Шаблон_УдЛичнФЛ, "ВыдДок", ФизЛицо.ДокументКемВыдан);
			
			ТекстСделки.ДобавитьСтроку(Контекст.Отступ + Шаблон_УдЛичнФЛ);
			
			Если ФизЛицо.ГражданствоФизЛицСтрана <> Справочники.КлассификаторСтранМира.Россия Тогда
				НаименованиеСтраны = ФизЛицо.КонтактнаяИнформацияЗаРФПоле1;
				Если ЗначениеЗаполнено(НаименованиеСтраны) Тогда
					НайденнаяСтрана = Справочники.КлассификаторСтранМира.НайтиПоНаименованию(НаименованиеСтраны);
					Если ЗначениеЗаполнено(НайденнаяСтрана) И НайденнаяСтрана <> Справочники.КлассификаторСтранМира.Россия Тогда
						Шаблон_АдрИн = "<АдрИн %ОКСМ% %АдрИнТекст%/>";
						УстановитьАтрибут(Шаблон_АдрИн, "ОКСМ", НайденнаяСтрана.Код);
						УстановитьАтрибут(Шаблон_АдрИн, "АдрИнТекст", ФизЛицо.КонтактнаяИнформацияЗаРФПредставление);
						
						ТекстСделки.ДобавитьСтроку(Контекст.Отступ + Шаблон_АдрИн);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			УменьшитьОтступ(Контекст);
			
			ТекстСделки.ДобавитьСтроку(Контекст.Отступ + "</СвФЛ>");
		КонецЕсли;
		
		УменьшитьОтступ(Контекст);
		
		ТекстСделки.ДобавитьСтроку(Контекст.Отступ + "</СвФЛУчаст>");
		
	КонецЦикла;
	
КонецПроцедуры

Функция ЕстьЗаполненныеРеквизиты(Данные, СписокИменРеквизитов)
	
	Результат = Ложь;
	
	ИменаРеквизитов = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(СписокИменРеквизитов);
	
	Для Каждого ИмяРеквизита Из ИменаРеквизитов Цикл
		ИмяРеквизита = СокрЛП(ИмяРеквизита);
		
		ПроверяемоеЗначение = Неопределено;
		Если ТипЗнч(Данные) = Тип("Структура") Тогда
			Данные.Свойство(ИмяРеквизита, ПроверяемоеЗначение);
		ИначеЕсли ТипЗнч(Данные) = Тип("СтрокаТаблицыЗначений") Тогда
			ПроверяемоеЗначение = Данные[ИмяРеквизита];
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПроверяемоеЗначение) Тогда
			Результат = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Формирует сведения необходимые для сохранения и передачи файла (файлов) электронного
// представления документа.
//
// Возвращаемое значение:
//  ТаблицаЗначений - сведения электронного представления документа, включающие в себя
//                    имя файла(файлов), текст(тексты) и кодировку представления.
//
Функция ЭлектронноеПредставление(ОсновныеСведенияВыгрузки)
	
	ПроизвольнаяСтрока = Новый ОписаниеТипов("Строка");
	
	СведенияЭлектронногоПредставления = Новый ТаблицаЗначений;
	СведенияЭлектронногоПредставления.Колонки.Добавить("ИмяФайла", ПроизвольнаяСтрока);
	СведенияЭлектронногоПредставления.Колонки.Добавить("ТекстФайла", ПроизвольнаяСтрока);
	СведенияЭлектронногоПредставления.Колонки.Добавить("КодировкаТекста", ПроизвольнаяСтрока);
	
	СтруктураВыгрузки = ИзвлечьСтруктуруXML();
	ЗаполнитьДанными(СтруктураВыгрузки, ОсновныеСведенияВыгрузки);
	
	Текст = ВыгрузитьДеревоВXML(СтруктураВыгрузки, ОсновныеСведенияВыгрузки);
	
	СтрокаСведенийЭлектронногоПредставления = СведенияЭлектронногоПредставления.Добавить();
	СтрокаСведенийЭлектронногоПредставления.ИмяФайла = ОсновныеСведенияВыгрузки.ИдФайл + ".xml";
	СтрокаСведенийЭлектронногоПредставления.ТекстФайла = Текст;
	СтрокаСведенийЭлектронногоПредставления.КодировкаТекста = "windows-1251";
	
	Если СведенияЭлектронногоПредставления.Количество() = 0 Тогда
		СведенияЭлектронногоПредставления = Неопределено;
	КонецЕсли;
	
	Возврат СведенияЭлектронногоПредставления;
	
КонецФункции

Функция ИзвлечьСтруктуруXML()
	
	ДеревоСтруктуры = Новый ДеревоЗначений;
	ДеревоСтруктуры.Колонки.Добавить("Код");
	ДеревоСтруктуры.Колонки.Добавить("ЗначениеПоУмолчанию");
	ДеревоСтруктуры.Колонки.Добавить("Значение");
	ДеревоСтруктуры.Колонки.Добавить("Представление");
	ДеревоСтруктуры.Колонки.Добавить("Тип");
	ДеревоСтруктуры.Колонки.Добавить("Формат");
	ДеревоСтруктуры.Колонки.Добавить("МинРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("МаксРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("Обязательность");
	ДеревоСтруктуры.Колонки.Добавить("Многостраничность");
	ДеревоСтруктуры.Колонки.Добавить("Многострочность");
	ДеревоСтруктуры.Колонки.Добавить("Раздел");
	ДеревоСтруктуры.Колонки.Добавить("Ключ");
	ДеревоСтруктуры.Колонки.Добавить("Условие");
	ДеревоСтруктуры.Колонки.Добавить("Показатели");
	
	Макет = ПолучитьМакет("СтруктураXML501");
	ВысотаТаблицы = Макет.ВысотаТаблицы;
	
	УчтенныеГруппы = Новый Соответствие;
	
	Для Уровень = 0 По Макет.КоличествоУровнейГруппировокСтрок() - 1 Цикл
		Макет.ПоказатьУровеньГруппировокСтрок(Уровень);
		Для НомерСтроки = 2 По ВысотаТаблицы Цикл
			НомСтр = ВысотаТаблицы - НомерСтроки + 2;
			Если Макет.Область(НомСтр, 0, НомСтр, 0).Видимость И УчтенныеГруппы.Получить(НомСтр) = Неопределено Тогда
				
				РодительскийУзел = ДеревоСтруктуры;
				Если Уровень <> 0 Тогда
					Для Инд = 1 По НомСтр - 2 Цикл
						Узел = УчтенныеГруппы.Получить(НомСтр - Инд);
						Если Узел <> Неопределено Тогда
							РодительскийУзел = Узел;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				НовСтр = РодительскийУзел.Строки.Вставить(0);
				НовСтр.Код = СокрЛП(Макет.Область(НомСтр, 1, НомСтр, 1).Текст);
				НовСтр.Раздел = СокрЛП(Макет.Область(НомСтр, 2, НомСтр, 2).Текст);
				НовСтр.Ключ = СокрЛП(Макет.Область(НомСтр, 3, НомСтр, 3).Текст);
				НовСтр.Тип = СокрЛП(Макет.Область(НомСтр, 4, НомСтр, 4).Текст);
				НовСтр.Формат = СокрЛП(Макет.Область(НомСтр, 5, НомСтр, 5).Текст);
				МинРазмерность = СокрЛП(Макет.Область(НомСтр, 6, НомСтр, 6).Текст);
				НовСтр.МинРазмерность = ?(ПустаяСтрока(МинРазмерность), ?(НовСтр.Формат = "N", 99999, 0), Число(МинРазмерность));
				МаксРазмерность = СокрЛП(Макет.Область(НомСтр, 7, НомСтр, 7).Текст);
				НовСтр.МаксРазмерность = ?(ПустаяСтрока(МаксРазмерность), 99999, Число(МаксРазмерность));
				НовСтр.Обязательность = СокрЛП(Макет.Область(НомСтр, 8, НомСтр, 8).Текст);
				НовСтр.Многостраничность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 9, НомСтр, 9).Текст);
				НовСтр.Многострочность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 10, НомСтр, 10).Текст);
				НовСтр.Условие = СокрЛП(Макет.Область(НомСтр, 11, НомСтр, 11).Текст);
				НовСтр.ЗначениеПоУмолчанию = СокрЛП(Макет.Область(НомСтр, 12, НомСтр, 12).Текст);
				НовСтр.Представление = СокрЛП(Макет.Область(НомСтр, 13, НомСтр, 13).Текст);
				
				УчтенныеГруппы.Вставить(НомСтр, НовСтр);
				
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ДеревоСтруктуры;
	
КонецФункции

Процедура ЗаполнитьДанными(ДеревоВыгрузки, Параметры)
	
	ОбработатьУсловныеЭлементы(Параметры, ДеревоВыгрузки);
	
	ЗаполнитьПараметры(Параметры, ДеревоВыгрузки);
	
	ЗаполнитьДаннымиПоКонтролируемымСделкам(Параметры, ДеревоВыгрузки);
	
	ОтсечьНезаполненныеНеобязательныеУзлы(ДеревоВыгрузки);
	
КонецПроцедуры

Процедура ОбработатьУсловныеЭлементы(Знач Параметры, Узел)
	
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		ТекСтр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		Если НЕ ПустаяСтрока(ТекСтр.Условие) Тогда
			Если НЕ УсловиеВыполнено(Параметры, ТекСтр.Условие) Тогда
				Узел.Строки.Удалить(ТекСтр);
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		ОбработатьУсловныеЭлементы(Параметры, ТекСтр);
	КонецЦикла;
	
КонецПроцедуры

Функция УсловиеВыполнено(Параметры, Условие)
	
	Попытка
		РезультатВычисленияВыражения = Вычислить(СтрЗаменить(Условие, "&", "Параметры."));
		Возврат НЕ (РезультатВычисленияВыражения = Ложь);
	Исключение
		Возврат Истина;
	КонецПопытки;
	
КонецФункции

Процедура ЗаполнитьПараметры(Параметры, Узел)
	
	Для Каждого Стр из Узел.Строки Цикл
		Если Стр.Тип = "С" ИЛИ Стр.Тип = "C" Тогда // учтем оба варианта: кириллицу и латиницу
			ЗаполнитьПараметры(Параметры, Стр);
		Иначе
			Если ПустаяСтрока(Стр.ЗначениеПоУмолчанию) Тогда
				Если НЕ ПустаяСтрока(Стр.Ключ) Тогда
					ВывестиПоказательВXML(Стр, Параметры[Стр.Ключ]);
				Иначе
					Стр.Значение = "";
				КонецЕсли;
			ИначеЕсли Лев(Стр.ЗначениеПоУмолчанию, 1) = "&" Тогда
				ИмяПараметра = Сред(Стр.ЗначениеПоУмолчанию, 2);
				Если Параметры.Свойство(ИмяПараметра) Тогда
					ВывестиПоказательВXML(Стр, Параметры[ИмяПараметра]);
				КонецЕсли;
			Иначе
				Стр.Значение = Стр.ЗначениеПоУмолчанию;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ВывестиПоказательВXML(Узел, ЗначениеПоказателя)
	
	МинШирина = Узел.МинРазмерность;
	МаксШирина = Узел.МаксРазмерность;
	
	Если Узел.Формат = "T" ИЛИ Узел.Формат = "Т" Тогда // учтем оба варианта: кириллицу и латиницу
		Узел.Значение = ?(МаксШирина < СтрДлина(СокрЛП(ЗначениеПоказателя)), СокрЛП(Лев(СокрЛП(ЗначениеПоказателя), МаксШирина)), СокрЛП(ЗначениеПоказателя));
	ИначеЕсли Узел.Формат = "N" Тогда
		СтрокаФормата = "ЧРД=.;ЧН=0;ЧГ=;";
		Если Узел.МаксРазмерность <> 0 И Узел.МаксРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧЦ=" + Формат(Узел.МаксРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Если Узел.МинРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧДЦ=" + Формат(Узел.МинРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, СтрокаФормата));
	ИначеЕсли Узел.Формат = "gYear" Тогда
		Если ТипЗнч(ЗначениеПоказателя) = Тип("Дата") Тогда
			Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, "ДФ=гггг"));
		Иначе
			Узел.Значение = Прав(СокрЛП(ЗначениеПоказателя), 4);
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Процедура ЗаполнитьДаннымиПоКонтролируемымСделкам(Параметры, ДеревоВыгрузки)
	
	ДатаАктуальностиСведений = КонецГода(ЭтотОбъект.ОтчетныйГод);
	
	ЛистыУведомления = КонтролируемыеСделки.ПолучитьЛистыУведомления(ЭтотОбъект.Ссылка);
	
	Листы1А = ЛистыУведомления.ЛистыРаздела1А;
	Листы1Б = ЛистыУведомления.ЛистыРаздела1Б;
	ЛистыРаздела2 = ЛистыУведомления.ЛистыРаздела2;
	ЛистыРаздела3 = ЛистыУведомления.ЛистыРаздела3;
	ДанныеРаздела2 = ЛистыУведомления.ДанныеРаздела2;
	ДанныеРаздела3 = ЛистыУведомления.ДанныеРаздела3;
	
	Узел_Документ = ПолучитьПодчиненныйЭлемент(ДеревоВыгрузки, "Документ");
	Узел_УвКонтрСд = ПолучитьПодчиненныйЭлемент(Узел_Документ, "УвКонтрСд");
	
	ПрототипУзла_СвКонтрСд = ПолучитьПодчиненныйЭлемент(Узел_УвКонтрСд, "СвКонтрСд");
	Для Каждого Лист1А ИЗ Листы1А Цикл
		Узел_СвКонтрСд = НовыйУзелИзПрототипа(ПрототипУзла_СвКонтрСд);
		
		УстановитьЗначениеЭлемента(Узел_СвКонтрСд, "НомПорСд", Лист1А.НомерЛиста1А);
		
		Узел_ОснКонтрСд = ПолучитьПодчиненныйЭлемент(Узел_СвКонтрСд, "ОснКонтрСд");
		ЗаполнитьСведенияОснованияКонтроляСделки(Узел_ОснКонтрСд, Лист1А);
		
		Узел_КонтрСд = ПолучитьПодчиненныйЭлемент(Узел_СвКонтрСд, "КонтрСд");
		ЗаполнитьСведенияОСделке(Узел_КонтрСд, Лист1А);
		
		Узел_ДохРасхСд = ПолучитьПодчиненныйЭлемент(Узел_СвКонтрСд, "ДохРасхСд");
		ЗаполнитьСведенияОДоходахРасходах(Узел_ДохРасхСд, Лист1А);
		
		ПрототипУзла_СвПредмСд = ПолучитьПодчиненныйЭлемент(Узел_СвКонтрСд, "СвПредмСд");
		ЗаполнитьСведенияОПредметеСделки(Параметры, ПрототипУзла_СвПредмСд, Листы1Б, Лист1А.Сделка);
		УдалитьУзел(ПрототипУзла_СвПредмСд);
		
		ПрототипУзла_СвОргУчаст = ПолучитьПодчиненныйЭлемент(Узел_СвКонтрСд, "СвОргУчаст");
		ЗаполнитьСведенияОбУчастникахОрганизациях(ПрототипУзла_СвОргУчаст, ЛистыРаздела2, ДанныеРаздела2, Лист1А.Сделка);
		УдалитьУзел(ПрототипУзла_СвОргУчаст);
		
		ПрототипУзла_СвФЛУчаст = ПолучитьПодчиненныйЭлемент(Узел_СвКонтрСд, "СвФЛУчаст");
		ЗаполнитьСведенияОбУчастникахФизЛицах(ПрототипУзла_СвФЛУчаст, ЛистыРаздела3, ДанныеРаздела3, Лист1А.Сделка);
		УдалитьУзел(ПрототипУзла_СвФЛУчаст);
		
	КонецЦикла;
	УдалитьУзел(ПрототипУзла_СвКонтрСд);
	
КонецПроцедуры

Процедура ЗаполнитьСведенияОснованияКонтроляСделки(УзелВыгрузки, Сведения)
	
	УстановитьЗначениеЭлемента(УзелВыгрузки, "ВзЗавис", Сведения.Строка100Взаимозависимость);
	
	Узел_Осн105_14 = ПолучитьПодчиненныйЭлемент(УзелВыгрузки, "Осн105.14");
	УстановитьЗначениеЭлемента(Узел_Осн105_14, "Осн121", Сведения.Строка121СтороныВзаимозависимыПоКодексу);
	УстановитьЗначениеЭлемента(Узел_Осн105_14, "Осн122", Сведения.Строка122СделкаВОбластиВнешнейТорговли);
	УстановитьЗначениеЭлемента(Узел_Осн105_14, "Осн123", Сведения.Строка123СделкаСКонтрагентомСЛьготнымНалогообложением);
	УстановитьЗначениеЭлемента(Узел_Осн105_14, "Осн124", Сведения.Строка124СделкаСНезависимымПосредником);
	
	Узел_ОснРФ105_14 = ПолучитьПодчиненныйЭлемент(УзелВыгрузки, "ОснРФ105.14");
	УстановитьЗначениеЭлемента(Узел_ОснРФ105_14, "Осн131", Сведения.Строка131СуммаДоходовПоСделкамПревышаетПредел);
	УстановитьЗначениеЭлемента(Узел_ОснРФ105_14, "Осн132", Сведения.Строка132СделкаСПлательщикомНДПИ);
	УстановитьЗначениеЭлемента(Узел_ОснРФ105_14, "Осн133", Сведения.Строка133СделкаСКонтрагентомНаСпецрежимах);
	УстановитьЗначениеЭлемента(Узел_ОснРФ105_14, "Осн134", Сведения.Строка134СделкаСПлательщикомНалогаНаПрибыль);
	УстановитьЗначениеЭлемента(Узел_ОснРФ105_14, "Осн135", Сведения.Строка135СделкаСРезидентомОЭЗ);
	
КонецПроцедуры

Процедура ЗаполнитьСведенияОСделке(УзелВыгрузки, Сведения)
	
	ЭтоГруппаОднородныхСделок = Ложь;
	
	УстановитьЗначениеЭлемента(УзелВыгрузки, "ГрупОС",       ?(ЭтоГруппаОднородныхСделок, "1", "0"));
	УстановитьЗначениеЭлемента(УзелВыгрузки, "КодНаимСд",    Сведения.Строка210КодНаименованияСделки);
	УстановитьЗначениеЭлемента(УзелВыгрузки, "КодСторСд",    Сведения.Строка211КодСтороныСделки);
	УстановитьЗначениеЭлемента(УзелВыгрузки, "ПрОпрЦен",     Сведения.Строка220ПризнакОпределенияЦеныСделки);
	УстановитьЗначениеЭлемента(УзелВыгрузки, "КомПрОпрЦен",  Сведения.Строка220_1Комментарий);
	УстановитьЗначениеЭлемента(УзелВыгрузки, "КодОпрЦен",    Сведения.Строка230КодОпределенияЦены);
	УстановитьЗначениеЭлемента(УзелВыгрузки, "КомКодОпрЦен", Сведения.Строка230_1Комментарий);
	УстановитьЗначениеЭлемента(УзелВыгрузки, "КодМетЦен",    Сведения.Строка240КодМетодовЦенообразования);
	УстановитьЗначениеЭлемента(УзелВыгрузки, "КомКодМетЦен", Сведения.Строка240_1Комментарий);
	УстановитьЗначениеЭлемента(УзелВыгрузки, "КолУчСд",      Сведения.Строка260КоличествоУчастниковСделки);
	УстановитьЗначениеЭлемента(УзелВыгрузки, "КомКолУчСд",   Сведения.Строка260_1Комментарий);
	
	Узел_КодИстИнф = ПолучитьПодчиненныйЭлемент(УзелВыгрузки, "КодИстИнф");
	УстановитьЗначениеЭлемента(Узел_КодИстИнф, "Ист251", Сведения.Строка251);
	УстановитьЗначениеЭлемента(Узел_КодИстИнф, "Ист252", Сведения.Строка252);
	УстановитьЗначениеЭлемента(Узел_КодИстИнф, "Ист253", Сведения.Строка253);
	УстановитьЗначениеЭлемента(Узел_КодИстИнф, "Ист254", Сведения.Строка254);
	УстановитьЗначениеЭлемента(Узел_КодИстИнф, "Ист255", Сведения.Строка255);
	УстановитьЗначениеЭлемента(Узел_КодИстИнф, "Ист256", Сведения.Строка256);
	УстановитьЗначениеЭлемента(Узел_КодИстИнф, "Ист257", Сведения.Строка257);
	УстановитьЗначениеЭлемента(Узел_КодИстИнф, "Ист258", Сведения.Строка258);
	УстановитьЗначениеЭлемента(Узел_КодИстИнф, "Ист259", Сведения.Строка259);
	
КонецПроцедуры

Процедура ЗаполнитьСведенияОДоходахРасходах(УзелВыгрузки, Сведения)
	
	УстановитьЗначениеЭлемента(УзелВыгрузки, "СумДохСд",     Сведения.Строка300СуммаДоходов);
	УстановитьЗначениеЭлемента(УзелВыгрузки, "СумДохСдРег",  Сведения.Строка301СуммаРегулируемыхДоходов);
	УстановитьЗначениеЭлемента(УзелВыгрузки, "СумРасхСд",    Сведения.Строка310СуммаРасходов);
	УстановитьЗначениеЭлемента(УзелВыгрузки, "СумРасхСдРег", Сведения.Строка311СуммаРегулируемыхРасходов);
	
КонецПроцедуры

Процедура ЗаполнитьСведенияОПредметеСделки(Параметры, ПрототипУзлаВыгрузки, Листы1Б, Сделка)
	
	ТипыПредметовСделок = Новый Соответствие;
	
	СписокЛистов1Б = Листы1Б.НайтиСтроки(Новый Структура("Сделка", Сделка));
	Для Каждого Лист1Б Из СписокЛистов1Б Цикл
		ЛистыТипаПредмета = ТипыПредметовСделок.Получить(Лист1Б.Строка020ТипПредмета);
		Если ЛистыТипаПредмета = Неопределено Тогда
			ТипыПредметовСделок.Вставить(Лист1Б.Строка020ТипПредмета, Новый Массив());
			ЛистыТипаПредмета = ТипыПредметовСделок.Получить(Лист1Б.Строка020ТипПредмета);
		КонецЕсли;
		ЛистыТипаПредмета.Добавить(Лист1Б);
	КонецЦикла;
	
	Для Каждого ТипПредмета ИЗ ТипыПредметовСделок Цикл
		УзелВыгрузки = НовыйУзелИзПрототипа(ПрототипУзлаВыгрузки);
		
		ТипПредСд = ТипПредмета.Ключ;
		УстановитьЗначениеЭлемента(УзелВыгрузки, "ТипПредСд", ТипПредСд);
		
		ПрототипУзла_ПерПредСд = ПолучитьПодчиненныйЭлемент(УзелВыгрузки, "ПерПредСд");
		Для Каждого Лист1Б ИЗ ТипПредмета.Значение Цикл
			
			Узел_ПерПредСд = НовыйУзелИзПрототипа(ПрототипУзла_ПерПредСд);
			
			Если Параметры.ВерсияУведомления = КонтролируемыеСделкиКлиентСервер.ВерсияУведомления_2012() Тогда
				КодПоОКП = Лист1Б.Строка043КодПоОКП;
				КодПоОКВЭД = Лист1Б.Строка045КодОКВЭД;
			Иначе
				КодПоОКП = КонтролируемыеСделки.КодПоОКПИзКодаПоОКПД2(Лист1Б.Строка043КодПоОКПД2);
				КодПоОКВЭД = Лист1Б.Строка045КодОКВЭД2;
			КонецЕсли;
			
			ЗаполненОКП = ЗначениеЗаполнено(КодПоОКП);
			ЗаполненТНВЭД = ЗначениеЗаполнено(Лист1Б.Строка040КодПоТНВЭД);
			
			Если ТипПредСд = 1 Тогда
				УстановитьЗначениеЭлемента(Узел_ПерПредСд, "ТНВЭД",        Лист1Б.Строка040КодПоТНВЭД);
				УстановитьЗначениеЭлемента(Узел_ПерПредСд, "ОКП",          КодПоОКП);
				УстановитьЗначениеЭлемента(Узел_ПерПредСд, "КодУсловПост", Лист1Б.Строка100КодУсловийПоставки);
			Иначе // значения 2 и 3
				УстановитьЗначениеЭлемента(Узел_ПерПредСд, "ОКВЭД",        КодПоОКВЭД);
			КонецЕсли;
			
			УстановитьЗначениеЭлемента(Узел_ПерПредСд, "НаимПредСд",   Лист1Б.Строка030НаименованиеПредмета);
			УстановитьЗначениеЭлемента(Узел_ПерПредСд, "НомУчСд",      Лист1Б.Строка050НомерУчастникаСделки);
			УстановитьЗначениеЭлемента(Узел_ПерПредСд, "НомДог",       Лист1Б.Строка060НомерДоговора);
			УстановитьЗначениеЭлемента(Узел_ПерПредСд, "ДатаДог",      Лист1Б.Строка065ДатаДоговора);
			УстановитьЗначениеЭлемента(Узел_ПерПредСд, "ОКСМ",         Лист1Б.Строка070КодСтраныПроисхождения);
			УстановитьЗначениеЭлемента(Узел_ПерПредСд, "ОКЕИ",         СокрЛП(Лист1Б.Строка110КодЕдиницыИзмерения));
			УстановитьЗначениеЭлемента(Узел_ПерПредСд, "Количество",   Лист1Б.Строка120Количество);
			УстановитьЗначениеЭлемента(Узел_ПерПредСд, "ЦенаЕдин",     Лист1Б.Строка130Цена);
			УстановитьЗначениеЭлемента(Узел_ПерПредСд, "СтоимИтог",    Лист1Б.Строка140Стоимость);
			УстановитьЗначениеЭлемента(Узел_ПерПредСд, "ДатаСовСд",    Лист1Б.Строка150ДатаСовершения);
			
			Узел_МестОтпрТов = ПолучитьПодчиненныйЭлемент(Узел_ПерПредСд, "МестОтпрТов");
			
			УстановитьЗначениеЭлемента(Узел_МестОтпрТов, "ОКСМ",       Лист1Б.Строка080КодСтраныОтправки);
			УстановитьЗначениеЭлемента(Узел_МестОтпрТов, "КодРегион",  Лист1Б.Строка080КодРегионаОтправки);
			УстановитьЗначениеЭлемента(Узел_МестОтпрТов, "Город",      Лист1Б.Строка080ГородОтправки);
			УстановитьЗначениеЭлемента(Узел_МестОтпрТов, "НаселПункт", Лист1Б.Строка080НаселенныйПунктОтправки);
			
			Узел_МестСовСд = ПолучитьПодчиненныйЭлемент(Узел_ПерПредСд, "МестСовСд");
			
			УстановитьЗначениеЭлемента(Узел_МестСовСд, "ОКСМ",       Лист1Б.Строка090КодСтраныСовершенияСделки);
			УстановитьЗначениеЭлемента(Узел_МестСовСд, "КодРегион",  Лист1Б.Строка090КодРегионаСовершенияСделки);
			УстановитьЗначениеЭлемента(Узел_МестСовСд, "Город",      Лист1Б.Строка090ГородСовершенияСделки);
			УстановитьЗначениеЭлемента(Узел_МестСовСд, "НаселПункт", Лист1Б.Строка090НаселенныйПунктСовершенияСделки);
			
		КонецЦикла;
		УдалитьУзел(ПрототипУзла_ПерПредСд);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСведенияОФизлице_502(Контекст, ТекстФайла)
	
	ТекстФайла.ДобавитьСтроку(Контекст.Отступ + "<НПФЛ>");
	
	УвеличитьОтступ(Контекст);
	
	Шаблон_ФИО = "<ФИО %Фамилия% %Имя% %Отчество%/>";
	УстановитьАтрибут(Шаблон_ФИО, "Фамилия", Контекст.ОсновныеСведенияВыгрузки.НПФЛФамилия);
	УстановитьАтрибут(Шаблон_ФИО, "Имя", Контекст.ОсновныеСведенияВыгрузки.НПФЛИмя);
	УстановитьНеобязательныйАтрибут(Шаблон_ФИО, "Отчество", Контекст.ОсновныеСведенияВыгрузки.НПФЛОтчество);
	
	ТекстФайла.ДобавитьСтроку(Контекст.Отступ + Шаблон_ФИО);
	
	Если Контекст.ОсновныеСведенияВыгрузки.ЕстьИННФЛ Тогда
		Шаблон_ИННФЛ = СтрЗаменить("<ИННФЛ>%ИННФЛ%</ИННФЛ>", "%ИННФЛ%", Контекст.ОсновныеСведенияВыгрузки.ИННФЛ);
		
		ТекстФайла.ДобавитьСтроку(Контекст.Отступ + Шаблон_ИННФЛ);
	Иначе
		Шаблон_СвФЛ = "<СвФЛ %ДатаРожд% %МестоРожд% %НалГражд% %ОКСМ% %СтатусНП%>";
		УстановитьАтрибут(Шаблон_СвФЛ, "ДатаРожд", Контекст.ОсновныеСведенияВыгрузки.НПФЛДатаРожд);
		УстановитьАтрибут(Шаблон_СвФЛ, "МестоРожд", Контекст.ОсновныеСведенияВыгрузки.НПФЛМестоРожд);
		УстановитьАтрибут(Шаблон_СвФЛ, "НалГражд", Контекст.ОсновныеСведенияВыгрузки.НПФЛНалГражд);
		УстановитьАтрибут(Шаблон_СвФЛ, "ОКСМ", Контекст.ОсновныеСведенияВыгрузки.НПФЛОКСМ);
		УстановитьАтрибут(Шаблон_СвФЛ, "СтатусНП", Контекст.ОсновныеСведенияВыгрузки.НПФЛСтатусНП);
		
		ТекстФайла.ДобавитьСтроку(Контекст.Отступ + Шаблон_СвФЛ);
		
		УвеличитьОтступ(Контекст);
		
		Шаблон_УдЛичнФЛ = "<УдЛичнФЛ %КодВидДок% %СерНомДок% %ДатаДок% %ВыдДок%/>";
		УстановитьАтрибут(Шаблон_УдЛичнФЛ, "КодВидДок", Контекст.ОсновныеСведенияВыгрузки.НПФЛКодВидДок);
		УстановитьАтрибут(Шаблон_УдЛичнФЛ, "СерНомДок", Контекст.ОсновныеСведенияВыгрузки.НПФЛСерНомДок);
		УстановитьАтрибут(Шаблон_УдЛичнФЛ, "ДатаДок", Контекст.ОсновныеСведенияВыгрузки.НПФЛДатаДок);
		УстановитьАтрибут(Шаблон_УдЛичнФЛ, "ВыдДок", Контекст.ОсновныеСведенияВыгрузки.НПФЛВыдДок);
		
		ТекстФайла.ДобавитьСтроку(Контекст.Отступ + Шаблон_УдЛичнФЛ);
		
		Шаблон_СвАдрРФ = "<СвАдрРФ %ПрАдр%>";
		УстановитьАтрибут(Шаблон_СвАдрРФ, "ПрАдр", Контекст.ОсновныеСведенияВыгрузки.НПФЛПрАдр);
		
		ТекстФайла.ДобавитьСтроку(Контекст.Отступ + Шаблон_СвАдрРФ);
		
		УвеличитьОтступ(Контекст);
		
		Шаблон_АдрРФ = "<АдрРФ %Индекс% %КодРегион% %Район% %Город% %НаселПункт% %Улица% %Дом% %Корпус% %Кварт%/>";
		УстановитьНеобязательныйАтрибут(Шаблон_АдрРФ, "Индекс", Контекст.ОсновныеСведенияВыгрузки.НПФЛИндекс);
		УстановитьАтрибут(Шаблон_АдрРФ, "КодРегион", Контекст.ОсновныеСведенияВыгрузки.НПФЛКодРегион);
		УстановитьНеобязательныйАтрибут(Шаблон_АдрРФ, "Район", Контекст.ОсновныеСведенияВыгрузки.НПФЛРайон);
		УстановитьНеобязательныйАтрибут(Шаблон_АдрРФ, "Город", Контекст.ОсновныеСведенияВыгрузки.НПФЛГород);
		УстановитьНеобязательныйАтрибут(Шаблон_АдрРФ, "НаселПункт", Контекст.ОсновныеСведенияВыгрузки.НПФЛНаселПункт);
		УстановитьНеобязательныйАтрибут(Шаблон_АдрРФ, "Улица", Контекст.ОсновныеСведенияВыгрузки.НПФЛУлица);
		УстановитьНеобязательныйАтрибут(Шаблон_АдрРФ, "Дом", Контекст.ОсновныеСведенияВыгрузки.НПФЛДом);
		УстановитьНеобязательныйАтрибут(Шаблон_АдрРФ, "Корпус", Контекст.ОсновныеСведенияВыгрузки.НПФЛКорпус);
		УстановитьНеобязательныйАтрибут(Шаблон_АдрРФ, "Кварт", Контекст.ОсновныеСведенияВыгрузки.НПФЛКварт);
		
		ТекстФайла.ДобавитьСтроку(Контекст.Отступ + Шаблон_АдрРФ);
		
		УменьшитьОтступ(Контекст);
		
		ТекстФайла.ДобавитьСтроку(Контекст.Отступ + "</СвАдрРФ>");
		
		Если ЕстьЗаполненныеРеквизиты(Контекст.ОсновныеСведенияВыгрузки, "АдрИнКодСтраны, АдрИнТекст") Тогда
			Шаблон_АдрИн = "<АдрИн %ОКСМ% %АдрИнТекст%/>";
			УстановитьАтрибут(Шаблон_АдрИн, "ОКСМ", Контекст.ОсновныеСведенияВыгрузки.АдрИнКодСтраны);
			УстановитьАтрибут(Шаблон_АдрИн, "АдрИнТекст", Контекст.ОсновныеСведенияВыгрузки.АдрИнТекст);
			
			ТекстФайла.ДобавитьСтроку(Контекст.Отступ + Шаблон_АдрИн);
		КонецЕсли;
		
		УменьшитьОтступ(Контекст);
		
		ТекстФайла.ДобавитьСтроку(Контекст.Отступ + "</СвФЛ>");
	КонецЕсли;
	
	УменьшитьОтступ(Контекст);
	
	ТекстФайла.ДобавитьСтроку(Контекст.Отступ + "</НПФЛ>");
	
КонецПроцедуры

Процедура ЗаполнитьСведенияОФизлице_503(Контекст, ТекстФайла)
	
	ТекстФайла.ДобавитьСтроку(Контекст.Отступ + "<НПФЛ>");
	
	УвеличитьОтступ(Контекст);
	
	Шаблон_ФИО = "<ФИО %Фамилия% %Имя% %Отчество%/>";
	УстановитьАтрибут(Шаблон_ФИО, "Фамилия", Контекст.ОсновныеСведенияВыгрузки.НПФЛФамилия);
	УстановитьАтрибут(Шаблон_ФИО, "Имя", Контекст.ОсновныеСведенияВыгрузки.НПФЛИмя);
	УстановитьНеобязательныйАтрибут(Шаблон_ФИО, "Отчество", Контекст.ОсновныеСведенияВыгрузки.НПФЛОтчество);
	
	ТекстФайла.ДобавитьСтроку(Контекст.Отступ + Шаблон_ФИО);
	
	Если Контекст.ОсновныеСведенияВыгрузки.ЕстьИННФЛ Тогда
		Шаблон_ИННФЛ = СтрЗаменить("<ИННФЛ>%ИННФЛ%</ИННФЛ>", "%ИННФЛ%", Контекст.ОсновныеСведенияВыгрузки.ИННФЛ);
		
		ТекстФайла.ДобавитьСтроку(Контекст.Отступ + Шаблон_ИННФЛ);
	Иначе
		Шаблон_СвФЛ = "<СвФЛ %ДатаРожд% %МестоРожд% %Гражд% %ОКСМ% %СтатусНП%>";
		УстановитьАтрибут(Шаблон_СвФЛ, "ДатаРожд", Контекст.ОсновныеСведенияВыгрузки.НПФЛДатаРожд);
		УстановитьАтрибут(Шаблон_СвФЛ, "МестоРожд", Контекст.ОсновныеСведенияВыгрузки.НПФЛМестоРожд);
		УстановитьАтрибут(Шаблон_СвФЛ, "Гражд", Контекст.ОсновныеСведенияВыгрузки.НПФЛНалГражд);
		УстановитьНеобязательныйАтрибут(Шаблон_СвФЛ, "ОКСМ", Контекст.ОсновныеСведенияВыгрузки.НПФЛОКСМ);
		
		УстановитьАтрибут(Шаблон_СвФЛ, "СтатусНП", Контекст.ОсновныеСведенияВыгрузки.НПФЛСтатусНП);
		
		ТекстФайла.ДобавитьСтроку(Контекст.Отступ + Шаблон_СвФЛ);
		
		УвеличитьОтступ(Контекст);
		
		Шаблон_УдЛичнФЛ = "<УдЛичнФЛ %КодВидДок% %СерНомДок% %ДатаДок% %ВыдДок%/>";
		УстановитьАтрибут(Шаблон_УдЛичнФЛ, "КодВидДок", Контекст.ОсновныеСведенияВыгрузки.НПФЛКодВидДок);
		УстановитьАтрибут(Шаблон_УдЛичнФЛ, "СерНомДок", Контекст.ОсновныеСведенияВыгрузки.НПФЛСерНомДок);
		УстановитьАтрибут(Шаблон_УдЛичнФЛ, "ДатаДок", Контекст.ОсновныеСведенияВыгрузки.НПФЛДатаДок);
		УстановитьАтрибут(Шаблон_УдЛичнФЛ, "ВыдДок", Контекст.ОсновныеСведенияВыгрузки.НПФЛВыдДок);
		
		ТекстФайла.ДобавитьСтроку(Контекст.Отступ + Шаблон_УдЛичнФЛ);
		
		Если ЕстьЗаполненныеРеквизиты(Контекст.ОсновныеСведенияВыгрузки, "АдрИнКодСтраны, АдрИнТекст") Тогда
			Шаблон_АдрИн = "<АдрИн %ОКСМ% %АдрИнТекст%/>";
			УстановитьАтрибут(Шаблон_АдрИн, "ОКСМ", Контекст.ОсновныеСведенияВыгрузки.АдрИнКодСтраны);
			УстановитьАтрибут(Шаблон_АдрИн, "АдрИнТекст", Контекст.ОсновныеСведенияВыгрузки.АдрИнТекст);
			
			ТекстФайла.ДобавитьСтроку(Контекст.Отступ + Шаблон_АдрИн);
		КонецЕсли;
		
		УменьшитьОтступ(Контекст);
		
		ТекстФайла.ДобавитьСтроку(Контекст.Отступ + "</СвФЛ>");
	КонецЕсли;
	
	УменьшитьОтступ(Контекст);
	
	ТекстФайла.ДобавитьСтроку(Контекст.Отступ + "</НПФЛ>");
	
КонецПроцедуры

Процедура ЗаполнитьСведенияОбУчастникахОрганизациях(ПрототипУзлаВыгрузки, Листы2, ДанныеРаздела2, Сделка)
	
	СписокЛистов2 = Листы2.НайтиСтроки(Новый Структура("Сделка", Сделка));
	
	Для Каждого Лист2 Из СписокЛистов2 Цикл
		
		ДанныеЛиста2 = ДанныеРаздела2.Найти(Лист2.Контрагент, "Контрагент");
		
		УзелВыгрузки = НовыйУзелИзПрототипа(ПрототипУзлаВыгрузки);
		
		УстановитьЗначениеЭлемента(УзелВыгрузки, "НомПорСд",   ДанныеЛиста2.НомерКонтрагента);
		УстановитьЗначениеЭлемента(УзелВыгрузки, "ПрОрг",      ДанныеЛиста2.Строка020ТипОрганизации);
		УстановитьЗначениеЭлемента(УзелВыгрузки, "ОКСМ",       ДанныеЛиста2.Строка030КакКодСтраныРегистрации);
		УстановитьЗначениеЭлемента(УзелВыгрузки, "НаимОрг",    ДанныеЛиста2.Строка040Наименование);
		УстановитьЗначениеЭлемента(УзелВыгрузки, "ИННЮЛ",      ДанныеЛиста2.Строка050ИНН);
		УстановитьЗначениеЭлемента(УзелВыгрузки, "КПП",        ДанныеЛиста2.Строка060КПП);
		УстановитьЗначениеЭлемента(УзелВыгрузки, "РегНомИн",   ДанныеЛиста2.Строка070РегНомерВСтрокеРегистрации);
		УстановитьЗначениеЭлемента(УзелВыгрузки, "КодНПРег",   ДанныеЛиста2.Строка080КодНалогВСтранеРегистрации);
		УстановитьЗначениеЭлемента(УзелВыгрузки, "АдрИнТекст", ?(ДанныеЛиста2.Строка020ТипОрганизации = 1, "", ДанныеЛиста2.Строка090АдресИностраннойОрганизации));
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСведенияОбУчастникахФизЛицах(ПрототипУзлаВыгрузки, Листы3, ДанныеРаздела3, Сделка)
	
	СписокЛистов3 = Листы3.НайтиСтроки(Новый Структура("Сделка", Сделка));
	
	Для Каждого Лист3 Из СписокЛистов3 Цикл
		
		Физлицо = ДанныеРаздела3.Найти(Лист3.Контрагент, "Контрагент");
		
		УзелВыгрузки = НовыйУзелИзПрототипа(ПрототипУзлаВыгрузки);
		
		УстановитьЗначениеЭлемента(УзелВыгрузки, "НомПорСд", Физлицо.НомерКонтрагента);
		УстановитьЗначениеЭлемента(УзелВыгрузки, "КодВД", ФизЛицо.Строка020КодВидаДеятельности);
		
		Узел_ФИО = ПолучитьПодчиненныйЭлемент(УзелВыгрузки, "ФИО");
		
		УстановитьЗначениеЭлемента(Узел_ФИО, "Фамилия", ФизЛицо.Фамилия);
		УстановитьЗначениеЭлемента(Узел_ФИО, "Имя", ФизЛицо.Имя);
		УстановитьЗначениеЭлемента(Узел_ФИО, "Отчество", ФизЛицо.Отчество);
		
		Узел_ИННФЛ = ПолучитьПодчиненныйЭлемент(УзелВыгрузки, "ИННФЛ");
		Узел_СвФЛ = ПолучитьПодчиненныйЭлемент(УзелВыгрузки, "СвФЛ");
		
		Если ПустаяСтрока(ФизЛицо.Строка030ИНН) Тогда
			УдалитьУзел(Узел_ИННФЛ);
			
			УстановитьЗначениеЭлемента(Узел_СвФЛ, "ДатаРожд", ФизЛицо.ФизическоеЛицо.ДатаРождения);
			УстановитьЗначениеЭлемента(Узел_СвФЛ, "МестоРожд", ФизЛицо.ФизическоеЛицо.МестоРождения);
			УстановитьЗначениеЭлемента(Узел_СвФЛ, "НалГражд", ?(ФизЛицо.ГражданствоФизЛицСтрана = Справочники.КлассификаторСтранМира.Россия, "1", "2"));
			УстановитьЗначениеЭлемента(Узел_СвФЛ, "ОКСМ", ?(ЗначениеЗаполнено(ФизЛицо.ГражданствоФизЛицСтрана), ФизЛицо.ГражданствоФизЛицСтрана.Код, ""));
			
			Узел_УдЛичнФЛ = ПолучитьПодчиненныйЭлемент(Узел_СвФЛ, "УдЛичнФЛ");
			
			УстановитьЗначениеЭлемента(Узел_УдЛичнФЛ, "КодВидДок", КонтролируемыеСделкиПовтИсп.ПолучитьКодВидаДокументаПоВидуДокумента(ФизЛицо.ДокументВид));
			УстановитьЗначениеЭлемента(Узел_УдЛичнФЛ, "СерНомДок", Строка(ФизЛицо.ДокументСерия) + " " + ФизЛицо.ДокументНомер);
			УстановитьЗначениеЭлемента(Узел_УдЛичнФЛ, "ДатаДок", ФизЛицо.ДокументДатаВыдачи);
			УстановитьЗначениеЭлемента(Узел_УдЛичнФЛ, "ВыдДок", ФизЛицо.ДокументКемВыдан);
			
			Узел_СвАдрРФ = ПолучитьПодчиненныйЭлемент(Узел_СвФЛ, "СвАдрРФ");
			
			
			Если ФизЛицо.ГражданствоФизЛицСтрана = Справочники.КлассификаторСтранМира.Россия Тогда
				УстановитьЗначениеЭлемента(Узел_СвАдрРФ, "ПрАдр", "1");
			Иначе
				УстановитьЗначениеЭлемента(Узел_СвАдрРФ, "ПрАдр", "2");
			КонецЕсли;
			
			Узел_АдрРФ = ПолучитьПодчиненныйЭлемент(Узел_СвАдрРФ, "АдрРФ");
			
			УстановитьЗначениеЭлемента(Узел_АдрРФ, "Индекс",     ФизЛицо.КонтактнаяИнформацияПоле1);
			УстановитьЗначениеЭлемента(Узел_АдрРФ, "КодРегион",  РегламентированнаяОтчетность.КодРегионаПоНазванию(ФизЛицо.КонтактнаяИнформацияПоле2));
			УстановитьЗначениеЭлемента(Узел_АдрРФ, "Район",      ФизЛицо.КонтактнаяИнформацияПоле3);
			УстановитьЗначениеЭлемента(Узел_АдрРФ, "Город",      ФизЛицо.КонтактнаяИнформацияПоле4);
			УстановитьЗначениеЭлемента(Узел_АдрРФ, "НаселПункт", ФизЛицо.КонтактнаяИнформацияПоле5);
			УстановитьЗначениеЭлемента(Узел_АдрРФ, "Улица",      ФизЛицо.КонтактнаяИнформацияПоле6);
			УстановитьЗначениеЭлемента(Узел_АдрРФ, "Дом",        ФизЛицо.КонтактнаяИнформацияПоле7);
			УстановитьЗначениеЭлемента(Узел_АдрРФ, "Корпус",     ФизЛицо.КонтактнаяИнформацияПоле8);
			УстановитьЗначениеЭлемента(Узел_АдрРФ, "Кварт",      ФизЛицо.КонтактнаяИнформацияПоле9);
			
			Узел_АдрИн = ПолучитьПодчиненныйЭлемент(Узел_СвФЛ, "АдрИн");
			
			Если ФизЛицо.ГражданствоФизЛицСтрана <> Справочники.КлассификаторСтранМира.Россия Тогда
				НаименованиеСтраны = ФизЛицо.КонтактнаяИнформацияЗаРФПоле1;
				Если ЗначениеЗаполнено(НаименованиеСтраны) Тогда
					НайденнаяСтрана = Справочники.КлассификаторСтранМира.НайтиПоНаименованию(НаименованиеСтраны);
					Если ЗначениеЗаполнено(НайденнаяСтрана) И НайденнаяСтрана <> Справочники.КлассификаторСтранМира.Россия Тогда
						УстановитьЗначениеЭлемента(Узел_АдрИн, "ОКСМ", НайденнаяСтрана.Код);
						УстановитьЗначениеЭлемента(Узел_АдрИн, "АдрИнТекст", ФизЛицо.КонтактнаяИнформацияЗаРФПредставление);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		Иначе
			УстановитьЗначениеЭлемента(УзелВыгрузки, "ИННФЛ", ФизЛицо.Строка030ИНН);
			УдалитьУзел(Узел_СвФЛ);
		КонецЕсли;
		
	КонецЦикла;
	
	
КонецПроцедуры

Функция ПолучитьПодчиненныйЭлемент(Узел, КодЭлемента)
	
	Для Каждого Стр Из Узел.Строки Цикл
		Если Стр.Код = КодЭлемента Тогда
			Возврат Стр;
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

Функция НовыйУзелИзПрототипа(ПрототипУзла);
	
	РодительУзла = ПрототипУзла.Родитель;
	
	ПозицияИсходногоУзла = РодительУзла.Строки.Индекс(ПрототипУзла);
	НовыйУзел = РодительУзла.Строки.Вставить(ПозицияИсходногоУзла);
	ЗаполнитьЗначенияСвойств(НовыйУзел, ПрототипУзла, , "Родитель, Строки");
	Для Каждого Стр из ПрототипУзла.Строки Цикл
		СкопироватьУзел(НовыйУзел, Стр);
	КонецЦикла;
	
	Возврат НовыйУзел;
	
КонецФункции

Функция СкопироватьУзел(Родитель, Узел)
	
	НовыйУзел = Родитель.Строки.Добавить();
	ЗаполнитьЗначенияСвойств(НовыйУзел, Узел, , "Родитель, Строки");
	Для Каждого Стр из Узел.Строки Цикл
		СкопироватьУзел(НовыйУзел, Стр);
	КонецЦикла;
	Возврат НовыйУзел;
	
КонецФункции

Процедура УстановитьЗначениеЭлемента(УзелРодитель, ИмяЭлемента, ЗначениеЭлемента)
	
	ПодчиненныйЭлемент = ПолучитьПодчиненныйЭлемент(УзелРодитель, ИмяЭлемента);
	ВывестиПоказательВXML(ПодчиненныйЭлемент, ЗначениеЭлемента);
	
КонецПроцедуры

Процедура УдалитьУзел(Узел)
	
	РодительУзла = ?(Узел.Родитель = Неопределено, Узел.Владелец(), Узел.Родитель);
	РодительУзла.Строки.Удалить(Узел);
	
КонецПроцедуры

Процедура ОтсечьНезаполненныеНеобязательныеУзлы(Узел)
	
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		Стр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		ОтсечьНезаполненныеНеобязательныеУзлы(Стр);
	КонецЦикла;
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если (Найти(Узел.Обязательность, "Н") <> 0 ИЛИ Найти(Узел.Обязательность, "H") <> 0) И УзелПуст(Узел) Тогда // учтем оба варианта: кириллицу и латиницу
			УдалитьУзел(Узел);
		ИначеЕсли (Найти(Узел.Обязательность, "М") <> 0 ИЛИ Найти(Узел.Обязательность, "M") <> 0) // учтем оба варианта: кириллицу и латиницу
		И УзелПуст(Узел)
		И ?(Найти(Узел.Обязательность, "О") <> 0 ИЛИ Найти(Узел.Обязательность, "O") <> 0, ИмеютсяАналогичныеСоседниеУзлы(Узел), Истина) Тогда
			УдалитьУзел(Узел);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция УзелПуст(Узел)
	
	ПустойУзел = ?(Узел.Формат = "N", Узел.Значение = "0" ИЛИ (НЕ ЗначениеЗаполнено(Узел.Значение)), НЕ ЗначениеЗаполнено(Узел.Значение));
	Для Каждого Стр из Узел.Строки Цикл
		Если НЕ УзелПуст(Стр) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	Возврат ПустойУзел;
	
КонецФункции

Функция ИмеютсяАналогичныеСоседниеУзлы(Стр)
	
	Возврат (Стр.Родитель.Строки.НайтиСтроки(Новый Структура("Ключ", Стр.Ключ), Ложь).Количество() > 1);
	
КонецФункции

Функция ВыгрузитьДеревоВXML(ДеревоВыгрузки, Параметры)
	
	ПотокXML = СоздатьНовыйПотокXML(); // создаем новый поток для записи
	ЗаписатьУзелДереваВXML(ДеревоВыгрузки, ПотокXML, Параметры); // пишем дерево в поток
	ТекстДляЗаписи = ПотокXML.Закрыть(); // получаем текст XML
	ТекстДляЗаписи = "<?xml version=""1.0"" encoding=""windows-1251""?>" + Сред(ТекстДляЗаписи, Найти(ТекстДляЗаписи, Символы.ПС));
	Возврат ТекстДляЗаписи;
	
КонецФункции

Функция СоздатьНовыйПотокXML() Экспорт
	
	ПотокXML = Новый ЗаписьXML();
	ПотокXML.УстановитьСтроку("UTF-8");
	ПотокXML.ЗаписатьОбъявлениеXML();
	ПотокXML.Отступ = Истина;
	Возврат ПотокXML;
	
КонецФункции

Функция ЗаписатьУзелДереваВXML(СтрокаДерева, ПотокXML, Параметры) Экспорт
	
	Если ТипЗнч(СтрокаДерева) = Тип("ДеревоЗначений") Тогда
		ПотокXML.ЗаписатьНачалоЭлемента("Файл");
		ПотокXML.ЗаписатьАтрибут("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
		Для Каждого Стр Из СтрокаДерева.Строки Цикл
			ЗаписатьУзелДереваВXML(Стр, ПотокXML, Параметры);
		КонецЦикла;
		ПотокXML.ЗаписатьКонецЭлемента();
	Иначе
		Если СтрокаДерева.Тип = "А" ИЛИ СтрокаДерева.Тип = "A" Тогда 
			ПотокXML.ЗаписатьАтрибут(СтрокаДерева.Код, Строка(СтрокаДерева.Значение));
		Иначе
			ПотокXML.ЗаписатьНачалоЭлемента(СтрокаДерева.Код);
			Для Каждого Лист из СтрокаДерева.Строки Цикл
				ЗаписатьУзелДереваВXML(Лист, ПотокXML, Параметры);
			КонецЦикла;
			ПотокXML.ЗаписатьТекст(Строка(СтрокаДерева.Значение));
			ПотокXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
	КонецЕсли;

КонецФункции

