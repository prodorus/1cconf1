Перем мУдалятьДвижения;

Перем мВалютаРегламентированногоУчета Экспорт;
Перем мАннулировать Экспорт;
Перем мПострочнаяПечать Экспорт;
Перем мПараметрыСвязиСтрокТЧ Экспорт;

Перем мУказаниеСкладовВТЧ Экспорт;

Перем мОрганизацияОблагаетсяЕНВД;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда

// Процедура осуществляет операцию оплаты картой, используя подключенную эквайринговую систему.
//
// Параметры:
//  СуммаОплаты - сумма оплаты
//
Процедура ОплатитьКартой(СуммаОплаты) Экспорт

	Перем ЭС;
	Перем ФР;

	Если РаботаСТорговымОборудованием.ПолучитьПроверитьПараметрыДляОплатыКартой(ЭС, ФР) Тогда
		КодRRN = Неопределено;

		Если ВидОперации = Перечисления.ВидыОперацийЧекККМ.Продажа Тогда
			Результат = ПолучитьСерверТО().ОплатитьПлатежнойКартой(ЭС, СуммаОплаты, КодRRN, ФР);
		Иначе
			Результат = ПолучитьСерверТО().ОтменитьПлатежПоПлатежнойКарте(ЭС, СуммаОплаты, КодRRN, ФР);
		КонецЕсли;

		Если ЗначениеЗаполнено(Результат) Тогда
			Ошибка = ПолучитьСерверТО().ПолучитьТекстОшибкиТО(Результат);
			Предупреждение(Ошибка);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ОплатитьКартой()

// Функция формирует табличный документ с печатной формой.
//
// Возвращаемое значение:
//  ТабличныйДокумент - печатная форма.
//
Функция ПечатьЧека()

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.УстановитьПараметр("Дата", Дата);

	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ДокЧек.Номер,
	|	ДокЧек.Дата,
	|	ДокЧек.КассаККМ,
	|	ДокЧек.Организация КАК Организация,
	|	ВЫБОР КОГДА ДокЧек.Организация.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ЮрЛицо)
	|		ТОГДА ДокЧек.Организация.НаименованиеПолное
	|		ИНАЧЕ ""ИП "" +
	|		    ВЫБОР	КОГДА ЕСТЬNULL(ФИОФизЛицСрезПоследнихИП.Фамилия, """") = """"
	|				ТОГДА """"
	|			ИНАЧЕ
	|				ФИОФизЛицСрезПоследнихИП.Фамилия + "" "" +
	|				ВЫБОР	КОГДА ЕСТЬNULL(ФИОФизЛицСрезПоследнихИП.Имя, """") = """"
	|						ТОГДА """"
	|						ИНАЧЕ ВЫРАЗИТЬ(ФИОФизЛицСрезПоследнихИП.Имя КАК СТРОКА(1)) + "". ""
	|				КОНЕЦ
	|				+
	|				ВЫБОР	КОГДА ЕСТЬNULL(ФИОФизЛицСрезПоследнихИП.Отчество, """") = """"
	|						ТОГДА """"
	|						ИНАЧЕ ВЫРАЗИТЬ(ФИОФизЛицСрезПоследнихИП.Отчество КАК СТРОКА(1)) + "".""
	|				КОНЕЦ
	|			КОНЕЦ
	|			+ """"
	|	КОНЕЦ КАК НаименованиеОрганизации,
	|	ДокЧек.СуммаДокумента,
	|	ДокЧек.ВидОперации,
	|	ДокЧек.Товары.(
	|		НомерСтроки,
	|		Номенклатура,
	|		Номенклатура.Представление КАК Товар,
	|		Номенклатура.НаименованиеПолное КАК ТоварПолноеНаименование,
	|		Номенклатура.Код КАК Код,
	|		Номенклатура.Артикул КАК Артикул,
	|		Количество,
	|		ЕдиницаИзмерения.Представление КАК ЕдиницаИзмерения,
	|		Цена,
	|		ПроцентСкидкиНаценки КАК Скидка,
	|		ПроцентАвтоматическихСкидок КАК СкидкаАвтоматическая,
	|		Сумма,
	|		ХарактеристикаНоменклатуры КАК Характеристика,
	|		СерияНоменклатуры КАК Серия
	|	),
	|	ДокЧек.Оплата.(
	|		НомерСтроки,
	|		ВидОплаты,
	|		Сумма
	|	),
	|	ВЫБОР	КОГДА ЕСТЬNULL(ФИОФизЛицСрезПоследних.Фамилия, """") = """"
	|				ТОГДА """"
	|			ИНАЧЕ
	|				ФИОФизЛицСрезПоследних.Фамилия + "" "" +
	|				ВЫБОР	КОГДА ЕСТЬNULL(ФИОФизЛицСрезПоследних.Имя, """") = """"
	|						ТОГДА """"
	|						ИНАЧЕ ВЫРАЗИТЬ(ФИОФизЛицСрезПоследних.Имя КАК СТРОКА(1)) + "". ""
	|				КОНЕЦ
	|				+
	|				ВЫБОР	КОГДА ЕСТЬNULL(ФИОФизЛицСрезПоследних.Отчество, """") = """"
	|						ТОГДА """"
	|						ИНАЧЕ ВЫРАЗИТЬ(ФИОФизЛицСрезПоследних.Отчество КАК СТРОКА(1)) + "".""
	|				КОНЕЦ
	|	КОНЕЦ КАК ФИО

	|ИЗ
	|	Документ.ЧекККМ КАК ДокЧек
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	Справочник.Пользователи КАК Пользователи
	|ПО
	|	Пользователи.Ссылка = ДокЧек.Ответственный
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	Справочник.ФизическиеЛица КАК ФизическиеЛица
	|ПО
	|	Пользователи.ФизЛицо = ФизическиеЛица.Ссылка
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрСведений.ФИОФизЛиц.СрезПоследних(&Дата) КАК ФИОФизЛицСрезПоследних
	|ПО
	|	ФизическиеЛица.Ссылка = ФИОФизЛицСрезПоследних.ФизЛицо
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрСведений.ФИОФизЛиц.СрезПоследних(&Дата) КАК ФИОФизЛицСрезПоследнихИП
	|ПО
	|	ДокЧек.Организация.ИндивидуальныйПредприниматель = ФИОФизЛицСрезПоследнихИП.ФизЛицо
	|ГДЕ
	|	ДокЧек.Ссылка = &ТекущийДокумент

	|УПОРЯДОЧИТЬ ПО
	|	ДокЧек.Товары.НомерСтроки,
	|	ДокЧек.Оплата.НомерСтроки
	|";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_Чек_Накладная";

	Макет = ПолучитьМакет("Накладная");

	// Выводим шапку накладной.
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	Если Шапка.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат Тогда
		ОбластьМакета.Параметры.ТекстЗаголовка = ОбщегоНазначения.СформироватьЗаголовокДокумента(Шапка, "Чек (возврат)");
	Иначе
		ОбластьМакета.Параметры.ТекстЗаголовка = ОбщегоНазначения.СформироватьЗаголовокДокумента(Шапка, "Чек");
	КонецЕсли;
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
	ОбластьМакета.Параметры.ПредставлениеПоставщика = Шапка.НаименованиеОрганизации;
	ОбластьМакета.Параметры.Поставщик = Шапка.Организация;
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("ИНН");
	ОбластьМакета.Параметры.ИНН = Шапка.Организация.ИНН;
	ТабДокумент.Вывести(ОбластьМакета);

	ЕстьСкидки = Ложь;
	ВыборкаСтрокТовары = Шапка.Товары.Выбрать();
	Пока ВыборкаСтрокТовары.Следующий() Цикл
		Если ВыборкаСтрокТовары.Скидка + ВыборкаСтрокТовары.СкидкаАвтоматическая <> 0 Тогда
			ЕстьСкидки = Истина;
		КонецЕсли;
	КонецЦикла;

	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ВыводитьКоды = Истина;
		Колонка = "Артикул";
	ИначеЕсли ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
		ВыводитьКоды = Истина;
		Колонка = "Код";
	Иначе
		ВыводитьКоды = Ложь;
	КонецЕсли;

	ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицы|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаКодов");
	ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицы|Данные");
	ОбластьСкидок = Макет.ПолучитьОбласть("ШапкаТаблицы|Скидка");
	ОбластьСуммы  = Макет.ПолучитьОбласть("ШапкаТаблицы|Сумма");

	ТабДокумент.Вывести(ОбластьНомера);
	Если ВыводитьКоды Тогда
		ОбластьКодов.Параметры.ИмяКолонкиКодов = Колонка;
		ТабДокумент.Присоединить(ОбластьКодов);
	КонецЕсли;
	ТабДокумент.Присоединить(ОбластьДанных);
	Если ЕстьСкидки Тогда
		ТабДокумент.Присоединить(ОбластьСкидок);
	КонецЕсли;
	ТабДокумент.Присоединить(ОбластьСуммы);

	ОбластьКолонкаТовар = Макет.Область("Товар");
	Если Не ВыводитьКоды Тогда
		ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки
		                                  + Макет.Область("КолонкаКодов").ШиринаКолонки;
	КонецЕсли;
	Если Не ЕстьСкидки Тогда
		ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки
		                                  + Макет.Область("СуммаБезСкидки").ШиринаКолонки
		                                  + Макет.Область("СуммаСкидки").ШиринаКолонки;
	КонецЕсли;

	ОбластьНомера = Макет.ПолучитьОбласть("Строка|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("Строка|КолонкаКодов");
	ОбластьДанных = Макет.ПолучитьОбласть("Строка|Данные");
	ОбластьСкидок = Макет.ПолучитьОбласть("Строка|Скидка");
	ОбластьСуммы  = Макет.ПолучитьОбласть("Строка|Сумма");

	Сумма          = 0;
	ВсегоСкидок    = 0;
	ВсегоБезСкидок = 0;

	ВыборкаСтрокТовары = Шапка.Товары.Выбрать();
	Пока ВыборкаСтрокТовары.Следующий() Цикл
		Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;

		ОбластьНомера.Параметры.Заполнить(ВыборкаСтрокТовары);
		ТабДокумент.Вывести(ОбластьНомера);

		Если ВыводитьКоды Тогда
			Если Колонка = "Артикул" Тогда
				ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТовары.Артикул;
			Иначе
				ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТовары.Код;
			КонецЕсли;
			ТабДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;

		ОбластьДанных.Параметры.Заполнить(ВыборкаСтрокТовары);
		ОбластьДанных.Параметры.Товар = ?(НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.ТоварПолноеНаименование),
		                                ВыборкаСтрокТовары.Товар, ВыборкаСтрокТовары.ТоварПолноеНаименование)
		                              + ФормированиеПечатныхФорм.ПредставлениеСерий(ВыборкаСтрокТовары);
		ТабДокумент.Присоединить(ОбластьДанных);

		Скидка = ВыборкаСтрокТовары.Цена * ВыборкаСтрокТовары.Количество - ВыборкаСтрокТовары.Сумма;
		Если ЕстьСкидки Тогда
			ОбластьСкидок.Параметры.Скидка         = Скидка;
			ОбластьСкидок.Параметры.СуммаБезСкидки = ВыборкаСтрокТовары.Сумма + Скидка;
			ТабДокумент.Присоединить(ОбластьСкидок);
		КонецЕсли;

		ОбластьСуммы.Параметры.Заполнить(ВыборкаСтрокТовары);
		ТабДокумент.Присоединить(ОбластьСуммы);
		Сумма          = Сумма + ВыборкаСтрокТовары.Сумма;
		ВсегоСкидок    = ВсегоСкидок + Скидка;
		ВсегоБезСкидок = Сумма + ВсегоСкидок;
	КонецЦикла;

	// Вывести Итого.
	ОбластьНомера = Макет.ПолучитьОбласть("Итого|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("Итого|КолонкаКодов");
	ОбластьДанных = Макет.ПолучитьОбласть("Итого|Данные");
	ОбластьСкидок = Макет.ПолучитьОбласть("Итого|Скидка");
	ОбластьСуммы  = Макет.ПолучитьОбласть("Итого|Сумма");

	ТабДокумент.Вывести(ОбластьНомера);
	Если ВыводитьКоды Тогда
		ТабДокумент.Присоединить(ОбластьКодов);
	КонецЕсли;
	ТабДокумент.Присоединить(ОбластьДанных);
	Если ЕстьСкидки Тогда
		ОбластьСкидок.Параметры.ВсегоСкидок    = ВсегоСкидок;
		ОбластьСкидок.Параметры.ВсегоБезСкидок = ВсегоБезСкидок;
		ТабДокумент.Присоединить(ОбластьСкидок);
	КонецЕсли;
	ОбластьСуммы.Параметры.Всего = Сумма;
	ТабДокумент.Присоединить(ОбластьСуммы);

	// Вывести Сумму прописью.
	ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
	ОбластьМакета.Параметры.ИтоговаяСтрока = "Всего наименований " + ВыборкаСтрокТовары.Количество()
	                                       + ", на сумму " + ОбщегоНазначения.ФорматСумм(Шапка.СуммаДокумента, мВалютаРегламентированногоУчета);
	ОбластьМакета.Параметры.СуммаПрописью  = ОбщегоНазначения.СформироватьСуммуПрописью(Шапка.СуммаДокумента, мВалютаРегламентированногоУчета);
	ТабДокумент.Вывести(ОбластьМакета);

	// Вывести Оплату и Сдачу.
	СуммаОплат = 0;
	СуммаБезналичныхОплат = 0;
	СписокОплат = Новый Соответствие();

	ВыборкаОплат = Шапка.Оплата.Выбрать();
	Пока ВыборкаОплат.Следующий() Цикл
		Если Шапка.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат
		   И ВыборкаОплат.ВидОплаты.ТипОплаты <> Перечисления.ТипыОплатЧекаККМ.Наличные Тогда
			СуммаБезналичныхОплат = СуммаБезналичныхОплат + ВыборкаОплат.Сумма;
		КонецЕсли;

		ЗаписьОплаты = СписокОплат.Получить(Строка(ВыборкаОплат.ВидОплаты.ТипОплаты));
		Если ЗаписьОплаты = Неопределено Тогда
			СписокОплат.Вставить(Строка(ВыборкаОплат.ВидОплаты.ТипОплаты), ВыборкаОплат.Сумма);
		Иначе
			СписокОплат.Вставить(Строка(ВыборкаОплат.ВидОплаты.ТипОплаты), ЗаписьОплаты + ВыборкаОплат.Сумма);
		КонецЕсли;
		СуммаОплат = СуммаОплат + ВыборкаОплат.Сумма;
	КонецЦикла;

	//Отдельная подготовка наличной оплаты для чека возврата
	Если Шапка.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат Тогда
		СписокОплат.Вставить(Строка(Перечисления.ТипыОплатЧекаККМ.Наличные), Шапка.СуммаДокумента - СуммаБезналичныхОплат);
	КонецЕсли;

	ОбластьМакета = Макет.ПолучитьОбласть("Оплата");
	ОплатаДобавлена = Ложь;
	Для Каждого ЗнПеречисления Из Перечисления.ТипыОплатЧекаККМ Цикл
		ЗаписьОплаты = СписокОплат.Получить(Строка(ЗнПеречисления));
		Если ЗаписьОплаты <> Неопределено Тогда
			ОбластьМакета.Параметры.Оплата = ?(ОплатаДобавлена, ОбластьМакета.Параметры.Оплата + Символы.ПС, "")
			                               + Строка(ЗнПеречисления) + ": "  + Формат(ЗаписьОплаты, "ЧЦ=15; ЧДЦ=2; ЧРД=.; ЧН=; ЧГ=0");
			ОплатаДобавлена = Истина;
		КонецЕсли;
	КонецЦикла;
	Если Шапка.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Продажа Тогда
		ОбластьМакета.Параметры.Сдача = Формат(СуммаОплат - Шапка.СуммаДокумента, "ЧЦ=15; ЧДЦ=2; ЧРД=.; ЧН=; ЧГ=0");
	Иначе
		ОбластьМакета.Параметры.Сдача = "0.00";
	КонецЕсли;
	ТабДокумент.Вывести(ОбластьМакета);

	// Вывести подписи.
	ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ТабДокумент.Вывести(ОбластьМакета);

	Возврат ТабДокумент;

КонецФункции // ПечатьЧека()

// Функция осуществляет проведение документа и печать чека на ФР.
//
// Параметры:
//  Ответ    - <Строка>
//           - Выходной параметр; описание произошедшей ошибки.
//
//  Отказ    - <Булево>
//           - Выходной параметр; признак отказа от выполнения операции.
//
// Возвращаемое значение:
//  <Булево> - Истина в случае успешного завершения операции.
//
Функция ПровестиИРаспечататьЧек(Ответ, Отказ, РучнойРежимПечати = Ложь) Экспорт

	Результат = Истина;
	Ответ     = "";

	Попытка
		Записать(РежимЗаписиДокумента.Проведение,
		         РежимПроведенияДокумента.Оперативный);
	Исключение
		Ответ     = "Ошибка при попытке проведения документа!";
		Отказ     = Истина;
		Результат = Ложь;
		Возврат Результат;
	КонецПопытки;

	Если ЧекПробитНаККМ Тогда
		Возврат Результат;
	КонецЕсли;

	Если УстановленЕНВДОрганизации()
	   И КассаККМ.ФормироватьНефискальныеЧеки
	   И КассаККМ.РучнойРежимФормирования
	   И Не РучнойРежимПечати Тогда
		Возврат Результат;
	КонецЕсли;

	МассивФР      = ПолучитьСерверТО().ПолучитьСписокУстройств(
	                    Перечисления.ВидыТорговогоОборудования.ФискальныйРегистратор,
	                    КассаККМ);
	МассивККТ     = ПолучитьСерверТО().ПолучитьСписокУстройств(
	                    Перечисления.ВидыТорговогоОборудования.ККТ,
	                    КассаККМ);
	МассивФУ = Новый Массив();
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивФУ, МассивФР);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивФУ, МассивККТ);

	ФУ            = Неопределено;
	СписокФУ      = Новый СписокЗначений();
	Вид           = Неопределено;
	Представление = Неопределено;

	Для каждого ФУ Из МассивФУ Цикл
		ПолучитьСерверТО().ПолучитьПредставлениеУстройства(ФУ, Вид, Представление);
		СписокФУ.Добавить(ФУ, Представление);
	КонецЦикла;

	КоличествоФУ = СписокФУ.Количество();
	Если      КоличествоФУ = 0 Тогда
		Ответ     = "";
		Отказ     = Истина;
		Результат = Истина;
		Возврат Результат;
	ИначеЕсли КоличествоФУ = 1 Тогда
		ФУ = СписокФУ[0].Значение;
	Иначе
		ФУ = СписокФУ.ВыбратьЭлемент("Необходимо выбрать фискальное устройство");
		Если ФУ = Неопределено Тогда
			Ответ     = "Операция отменена пользователем.";
			Отказ     = Истина;
			Результат = Ложь;
			Возврат Результат;
		Иначе
			ФУ = ФУ.Значение;
		КонецЕсли;
	КонецЕсли;

	ФормироватьНефискальныеЧеки = КассаККМ.ФормироватьНефискальныеЧеки;
	
	ВидФУ = ПолучитьСерверТО().ПолучитьВид(ФУ);
	Если ВидФУ = Перечисления.ВидыТорговогоОборудования.ККТ Тогда
		ПорядокНалогообложения = Неопределено;
		ИспользуемыеСН = ИспользуемыеСистемыНалогообложения(ПорядокНалогообложения);
		Если ИспользуемыеСН.Количество() > 1 Тогда
			ОбщегоНазначения.СообщитьОбОшибке("При фискализации чека допустимо указывать только один порядок налогообложения.");
			ОбщегоНазначения.СообщитьОбОшибке("В документе присутствуют товары с разным порядком налогообложения:");
			Для Каждого СтруктураСН Из ИспользуемыеСН Цикл
				ТекстСтрок = ?(Найти(СтруктураСН.Значение.НомераСтрокДокумента, " ") = 0, ": в строке ", ": в строках ");
				ОбщегоНазначения.СообщитьИнформациюПользователю(СтруктураСН.Ключ + ТекстСтрок + СтруктураСН.Значение.НомераСтрокДокумента + " списка ""Товары""");
			КонецЦикла;
			Отказ = Истина;
			Ответ = "Фискализация чека невозможна.";
			Возврат Ложь;
		КонецЕсли;
		ФормироватьНефискальныеЧеки = Ложь;
	КонецЕсли;

	ОшибкаТО = Перечисления.ТООшибкиОбщие.ПустаяСсылка();
	
	ИспользуетсяРегистрацияВЕГАИС = ПолучитьФункциональнуюОпцию("ВестиСведенияДляДекларацийПоАлкогольнойПродукции") 
									И ИнтеграцияЕГАИСВызовСервера.ИспользуетсяРегистрацияРозничныхПродажВЕГАИС(Неопределено, Неопределено, Дата);

	Если УстановленЕНВДОрганизации()
	   И ФормироватьНефискальныеЧеки Тогда
		ДокументЧекККМ  = Новый ТекстовыйДокумент();
		МассивСтрокЧека = Новый Массив();

		// Получение макета
		МакетЧекаККМ      = Документы.ЧекККМ.ПолучитьМакет("ЧекПокупателя");
		ОбластьШапкаЧека  = МакетЧекаККМ.ПолучитьОбласть("ШапкаЧека"  + КассаККМ.ШиринаЛенты);
		ОбластьТелоЧека   = МакетЧекаККМ.ПолучитьОбласть("ТелоЧека"   + КассаККМ.ШиринаЛенты);
		ОбластьПодвалЧека = МакетЧекаККМ.ПолучитьОбласть("ПодвалЧека" + КассаККМ.ШиринаЛенты);

		// Получение данных документа
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
		Запрос.УстановитьПараметр("Дата", Дата);

		Запрос.Текст = "
		|ВЫБРАТЬ
		|	ДокЧек.Номер,
		|	ДокЧек.Дата,
		|	ДокЧек.КассаККМ,
		|	ДокЧек.Организация КАК Организация,
		|	ВЫБОР КОГДА ДокЧек.Организация.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ЮрЛицо)
		|		ТОГДА ПРЕДСТАВЛЕНИЕ(ДокЧек.Организация)
		|		ИНАЧЕ ""ИП "" +
		|		    ВЫБОР	КОГДА ЕСТЬNULL(ФИОФизЛицСрезПоследнихИП.Фамилия, """") = """"
		|				ТОГДА """"
		|			ИНАЧЕ
		|				ФИОФизЛицСрезПоследнихИП.Фамилия + "" "" +
		|				ВЫБОР	КОГДА ЕСТЬNULL(ФИОФизЛицСрезПоследнихИП.Имя, """") = """"
		|						ТОГДА """"
		|						ИНАЧЕ ВЫРАЗИТЬ(ФИОФизЛицСрезПоследнихИП.Имя КАК СТРОКА(1)) + "". ""
		|				КОНЕЦ
		|				+
		|				ВЫБОР	КОГДА ЕСТЬNULL(ФИОФизЛицСрезПоследнихИП.Отчество, """") = """"
		|						ТОГДА """"
		|						ИНАЧЕ ВЫРАЗИТЬ(ФИОФизЛицСрезПоследнихИП.Отчество КАК СТРОКА(1)) + "".""
		|				КОНЕЦ
		|			КОНЕЦ
		|			+ """"
		|	КОНЕЦ КАК НаименованиеОрганизации,
		|	ДокЧек.СуммаДокумента,
		|	ДокЧек.ВидОперации,
		|	ДокЧек.Товары.(
		|		НомерСтроки,
		|		Номенклатура,
		|		Номенклатура.Представление КАК Товар,
		|		Номенклатура.НаименованиеПолное КАК ТоварПолноеНаименование,
		|		Номенклатура.Код КАК Код,
		|		Номенклатура.Артикул КАК Артикул,
		|		Количество,
		|		ЕдиницаИзмерения.Представление КАК ЕдиницаИзмерения,
		|		Цена,
		|		ПроцентСкидкиНаценки КАК Скидка,
		|		ПроцентАвтоматическихСкидок КАК СкидкаАвтоматическая,
		|		Сумма,
		|		ХарактеристикаНоменклатуры КАК Характеристика,
		|		СерияНоменклатуры КАК Серия
		|	),
		|	ДокЧек.Оплата.(
		|		НомерСтроки,
		|		ВидОплаты,
		|		Сумма
		|	),
		|	ВЫБОР	КОГДА ЕСТЬNULL(ФИОФизЛицСрезПоследних.Фамилия, """") = """"
		|				ТОГДА """"
		|			ИНАЧЕ
		|				ФИОФизЛицСрезПоследних.Фамилия + "" "" +
		|				ВЫБОР	КОГДА ЕСТЬNULL(ФИОФизЛицСрезПоследних.Имя, """") = """"
		|						ТОГДА """"
		|						ИНАЧЕ ВЫРАЗИТЬ(ФИОФизЛицСрезПоследних.Имя КАК СТРОКА(1)) + "". ""
		|				КОНЕЦ
		|				+
		|				ВЫБОР	КОГДА ЕСТЬNULL(ФИОФизЛицСрезПоследних.Отчество, """") = """"
		|						ТОГДА """"
		|						ИНАЧЕ ВЫРАЗИТЬ(ФИОФизЛицСрезПоследних.Отчество КАК СТРОКА(1)) + "".""
		|				КОНЕЦ
		|	КОНЕЦ КАК ФИО

		|ИЗ
		|	Документ.ЧекККМ КАК ДокЧек
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	Справочник.Пользователи КАК Пользователи
		|ПО
		|	Пользователи.Ссылка = ДокЧек.Ответственный
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	Справочник.ФизическиеЛица КАК ФизическиеЛица
		|ПО
		|	Пользователи.ФизЛицо = ФизическиеЛица.Ссылка
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.ФИОФизЛиц.СрезПоследних(&Дата) КАК ФИОФизЛицСрезПоследних
		|ПО
		|	ФизическиеЛица.Ссылка = ФИОФизЛицСрезПоследних.ФизЛицо
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.ФИОФизЛиц.СрезПоследних(&Дата) КАК ФИОФизЛицСрезПоследнихИП
		|ПО
		|	ДокЧек.Организация.ИндивидуальныйПредприниматель = ФИОФизЛицСрезПоследнихИП.ФизЛицо
		|ГДЕ
		|	ДокЧек.Ссылка = &ТекущийДокумент

		|УПОРЯДОЧИТЬ ПО
		|	ДокЧек.Товары.НомерСтроки,
		|	ДокЧек.Оплата.НомерСтроки
		|";

		РезультатЗапроса = Запрос.Выполнить();
		Если РезультатЗапроса.Пустой() Тогда
			Ответ     = "Пустой чек не может быть пробит на устройстве!";
			Отказ     = Истина;
			Результат = Ложь;
			Возврат Результат;
		КонецЕсли;

		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();

		// Формирование чека
		// ШАПКА
		Если Выборка.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат Тогда
			ОбластьШапкаЧека.Параметры.Заголовок = ОбщегоНазначения.СформироватьЗаголовокДокумента(Выборка, "Чек (возврат)");
		Иначе
			ОбластьШапкаЧека.Параметры.Заголовок = ОбщегоНазначения.СформироватьЗаголовокДокумента(Выборка, "Чек");
		КонецЕсли;
		ОбластьШапкаЧека.Параметры.Организация = Строка(Выборка.Организация);
		ОбластьШапкаЧека.Параметры.ИНН         = "ИНН: " + Выборка.Организация.ИНН;
		ДокументЧекККМ.Вывести(ОбластьШапкаЧека);


		// ТЕЛО
		ВыборкаТоваров = Выборка.Товары.Выбрать();
		Пока ВыборкаТоваров.Следующий() Цикл
			ОбластьТелоЧека.Параметры.НаименованиеТовара = ВыборкаТоваров.ТоварПолноеНаименование
			                                             + "(" + ВыборкаТоваров.ЕдиницаИзмерения + ")";
			ОбластьТелоЧека.Параметры.КоличествоЦена     = Формат(ВыборкаТоваров.Количество, "ЧЦ=17; ЧДЦ=3; ЧРД=.; ЧН=; ЧГ=0")
			                                             + " х "
			                                             + Формат(ВыборкаТоваров.Цена, "ЧЦ=15; ЧДЦ=2; ЧРД=.; ЧН=; ЧГ=0");

			КонечнаяСкидка = ВыборкаТоваров.Скидка + ВыборкаТоваров.СкидкаАвтоматическая;
			Если КонечнаяСкидка <> 0 Тогда
				ОбластьТелоЧека.Параметры.ЗагСкидка = ?(КонечнаяСкидка > 0, "Скидка:", "Надбавка:");
				ОбластьТелоЧека.Параметры.Скидка    = Строка(?(КонечнаяСкидка > 0, КонечнаяСкидка, -КонечнаяСкидка))
				                                    + "%";
			КонецЕсли;

			ДокументЧекККМ.Вывести(ОбластьТелоЧека);
		КонецЦикла;
		ДокументЧекККМ.УдалитьСтроку(ДокументЧекККМ.КоличествоСтрок());

		// ПОДВАЛ
		ОбластьПодвалЧека.Параметры.Итог = Формат(Выборка.СуммаДокумента, "ЧЦ=15; ЧДЦ=2; ЧРД=.; ЧН=; ЧГ=0");

		СуммаОплат = 0;
		СуммаБезналичныхОплат = 0;
		СписокОплат = Новый Соответствие();

		ВыборкаОплат = Выборка.Оплата.Выбрать();
		Пока ВыборкаОплат.Следующий() Цикл
			Если Выборка.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат
			   И ВыборкаОплат.ВидОплаты.ТипОплаты <> Перечисления.ТипыОплатЧекаККМ.Наличные Тогда
				СуммаБезналичныхОплат = СуммаБезналичныхОплат + ВыборкаОплат.Сумма;
			КонецЕсли;

			ЗаписьОплаты = СписокОплат.Получить(Строка(ВыборкаОплат.ВидОплаты.ТипОплаты));
			Если ЗаписьОплаты = Неопределено Тогда
				СписокОплат.Вставить(Строка(ВыборкаОплат.ВидОплаты.ТипОплаты), ВыборкаОплат.Сумма);
			Иначе
				СписокОплат.Вставить(Строка(ВыборкаОплат.ВидОплаты.ТипОплаты), ЗаписьОплаты + ВыборкаОплат.Сумма);
			КонецЕсли;
			СуммаОплат = СуммаОплат + ВыборкаОплат.Сумма;
		КонецЦикла;

		//Отдельная подготовка наличной оплаты для чека возврата
		Если Выборка.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат Тогда
			СписокОплат.Вставить(Строка(Перечисления.ТипыОплатЧекаККМ.Наличные), Выборка.СуммаДокумента - СуммаБезналичныхОплат);
		КонецЕсли;

		ОплатаДобавлена = Ложь;
		Для Каждого ЗнПеречисления Из Перечисления.ТипыОплатЧекаККМ Цикл
			ЗаписьОплаты = СписокОплат.Получить(Строка(ЗнПеречисления));
			Если ЗаписьОплаты <> Неопределено Тогда
				ОбластьПодвалЧека.Параметры.Оплата = ?(ОплатаДобавлена, ОбластьПодвалЧека.Параметры.Оплата + Символы.ПС, "")
				                                    + Строка(ЗнПеречисления) + ": "  + Формат(ЗаписьОплаты, "ЧЦ=15; ЧДЦ=2; ЧРД=.; ЧН=; ЧГ=0");
				ОплатаДобавлена = Истина;
			КонецЕсли;
		КонецЦикла;

		Если Выборка.ВидОперации <> Перечисления.ВидыОперацийЧекККМ.Возврат Тогда
			ОбластьПодвалЧека.Параметры.Сдача = "СДАЧА: " + Формат(СуммаОплат - Выборка.СуммаДокумента, "ЧЦ=15; ЧДЦ=2; ЧРД=.; ЧН=; ЧГ=0");
		КонецЕсли;

		ОбластьПодвалЧека.Параметры.Сотрудник = Выборка.ФИО;

		ДокументЧекККМ.Вывести(ОбластьПодвалЧека);

		Если ДокументЧекККМ.КоличествоСтрок() > 0 Тогда
			Для Индекс = 1 По ДокументЧекККМ.КоличествоСтрок() Цикл
				МассивСтрокЧека.Добавить(ДокументЧекККМ.ПолучитьСтроку(Индекс));
			КонецЦикла;

			// Открыть нефискальный чек
			ОшибкаТО = ПолучитьСерверТО().ОткрытьЧек(ФУ, "",
			                                         ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат,
			                                         НомерЧекаККМ, НомерСменыККМ, Ложь);

			Если Не ЗначениеЗаполнено(ОшибкаТО) Тогда
				// Напечатать строки полученного из макета чека
				ОшибкаТО = ПолучитьСерверТО().ПечатьТекста(ФУ, МассивСтрокЧека, КассаККМ.ШиринаЛенты);

				// Закрыть чек
				ОшибкаТО = ПолучитьСерверТО().ЗакрытьЧек(ФУ, 0, 0);
			КонецЕсли;
		КонецЕсли;
	Иначе
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ТчТовары.Номенклатура               КАК Номенклатура,
		|	ТчТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	ТчТовары.СерияНоменклатуры          КАК СерияНоменклатуры,
		|	ТчТовары.ЕдиницаИзмерения           КАК ЕдиницаИзмерения,
		|	ТчТовары.Цена                                     КАК Цена,
		|	ТчТовары.Количество                               КАК Количество,
		|	ТчТовары.ПроцентСкидкиНаценки + ТчТовары.ПроцентАвтоматическихСкидок КАК ПроцентСкидкиНаценки,
		|	ТчТовары.Номенклатура.СтавкаНДС КАК СтавкаНДС,
		|	ТчТовары.Штрихкод,
		|	ТчТовары.Номенклатура.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
		|	ТчТовары.Номенклатура.ОбъемДАЛ * 10 КАК Объем,
		|	ТчТовары.Номенклатура.Крепость КАК Крепость,
		|	ЕСТЬNULL(ТчТовары.Номенклатура.ВидАлкогольнойПродукцииЕГАИС.Маркируемый, ЛОЖЬ) КАК Маркируемая,
		|	ЕСТЬNULL(ТчАкцизныеМарки.КодАкцизнойМарки, """") КАК ШтрихкодМарки,
		|	ВЫБОР
		|		КОГДА ТчТовары.Номенклатура.Производитель <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|			ТОГДА ТчТовары.Номенклатура.Производитель
		|		ИНАЧЕ ТчТовары.Номенклатура.Импортер
		|	КОНЕЦ КАК Производитель,
		|	ТчТовары.Номенклатура.ВидАлкогольнойПродукцииЕГАИС.КодВидаПродукции КАК КодВидаПродукции
		|ПОМЕСТИТЬ ВТТовары
		|ИЗ
		|	Документ.ЧекККМ.Товары КАК ТчТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЧекККМ.АкцизныеМарки КАК ТчАкцизныеМарки
		|		ПО ТчТовары.КлючСтроки = ТчАкцизныеМарки.КлючСтроки
		|			И ТчТовары.Ссылка = ТчАкцизныеМарки.Ссылка
		|ГДЕ
		|	ТчТовары.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТТовары.Номенклатура,
		|	ВТТовары.ХарактеристикаНоменклатуры,
		|	ВТТовары.ЕдиницаИзмерения,
		|	МАКСИМУМ(ЕСТЬNULL(Штрихкоды.Штрихкод, """")) КАК Штрихкод
		|ПОМЕСТИТЬ ВТШтрихкоды
		|ИЗ
		|	ВТТовары КАК ВТТовары
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Штрихкоды КАК Штрихкоды
		|		ПО ВТТовары.ХарактеристикаНоменклатуры = Штрихкоды.ХарактеристикаНоменклатуры
		|			И ВТТовары.ЕдиницаИзмерения = Штрихкоды.ЕдиницаИзмерения
		|			И ВТТовары.Номенклатура = Штрихкоды.Владелец
		|ГДЕ
		|	ВТТовары.Штрихкод = """"
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТТовары.Номенклатура,
		|	ВТТовары.ХарактеристикаНоменклатуры,
		|	ВТТовары.ЕдиницаИзмерения
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТТовары.Номенклатура,
		|	ВТТовары.ХарактеристикаНоменклатуры,
		|	ВТТовары.СерияНоменклатуры,
		|	ВТТовары.ЕдиницаИзмерения,
		|	ВТТовары.Цена,
		|	ВТТовары.Количество,
		|	ВТТовары.ПроцентСкидкиНаценки,
		|	ВТТовары.СтавкаНДС,
		|	ВЫБОР
		|		КОГДА ВТТовары.Штрихкод <> """"
		|			ТОГДА ВТТовары.Штрихкод
		|		ИНАЧЕ ЕСТЬNULL(ВТШтрихкоды.Штрихкод, """")
		|	КОНЕЦ КАК Штрихкод,
		|	ВТТовары.АлкогольнаяПродукция,
		|	ВТТовары.Крепость,
		|	ВТТовары.Маркируемая,
		|	ВТТовары.ШтрихкодМарки,
		|	ВТТовары.Производитель.ИНН КАК ИННПроизводителя,
		|	ВТТовары.Производитель.КПП КАК КПППроизводителя,
		|	ВТТовары.Объем,
		|	ВТТовары.КодВидаПродукции
		|ИЗ
		|	ВТТовары КАК ВТТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТШтрихкоды КАК ВТШтрихкоды
		|		ПО ВТТовары.Номенклатура = ВТШтрихкоды.Номенклатура
		|			И ВТТовары.ЕдиницаИзмерения = ВТШтрихкоды.ЕдиницаИзмерения
		|			И ВТТовары.ХарактеристикаНоменклатуры = ВТШтрихкоды.ХарактеристикаНоменклатуры");
		
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		РезультатЗапроса = Запрос.Выполнить();
		Если РезультатЗапроса.Пустой() Тогда
			Ответ     = "Пустой чек не может быть пробит на фискальном устройстве!";
			Отказ     = Истина;
			Результат = Ложь;
			Возврат Результат;
		КонецЕсли;

		Выборка        = РезультатЗапроса.Выбрать();
		ТаблицаТоваров = Новый ТаблицаЗначений();
		ТаблицаТоваров.Колонки.Добавить("Наименование");
		ТаблицаТоваров.Колонки.Добавить("НомерСекции");
		ТаблицаТоваров.Колонки.Добавить("Цена");
		ТаблицаТоваров.Колонки.Добавить("Количество");
		ТаблицаТоваров.Колонки.Добавить("Скидка");
		ТаблицаТоваров.Колонки.Добавить("СтавкаНДС");
		ТаблицаТоваров.Колонки.Добавить("ПараметрыАлкогольнойПродукции");

		Пока Выборка.Следующий() Цикл
			Товар              = ТаблицаТоваров.Добавить();
			Товар.Наименование = СокрЛП(Выборка.Номенклатура) + "(" + СокрЛП(Выборка.ЕдиницаИзмерения)
			                     + ?(ПустаяСтрока(Выборка.ХарактеристикаНоменклатуры), "", ", " + СокрЛП(Выборка.ХарактеристикаНоменклатуры))
			                     + ?(ПустаяСтрока(Выборка.СерияНоменклатуры),          "", ", " + СокрЛП(Выборка.СерияНоменклатуры)) + ")";
			Товар.НомерСекции  = Склад.НомерСекции;
			Товар.Цена         = Выборка.Цена;
			Товар.Количество   = Выборка.Количество;
			Товар.Скидка       = Выборка.ПроцентСкидкиНаценки;
			Товар.СтавкаНДС    = 0;
			
			Товар.ПараметрыАлкогольнойПродукции = Новый Структура;
			Товар.ПараметрыАлкогольнойПродукции.Вставить("АлкогольнаяПродукция", Выборка.АлкогольнаяПродукция);
			Товар.ПараметрыАлкогольнойПродукции.Вставить("Маркируемая"         , Выборка.Маркируемая);
			Товар.ПараметрыАлкогольнойПродукции.Вставить("Штрихкод"            , Выборка.Штрихкод);
			Товар.ПараметрыАлкогольнойПродукции.Вставить("ШтрихкодМарки"       , Выборка.ШтрихкодМарки);
			Товар.ПараметрыАлкогольнойПродукции.Вставить("Объем"               , Выборка.Объем);
			Товар.ПараметрыАлкогольнойПродукции.Вставить("Крепость"            , Выборка.Крепость);
			Товар.ПараметрыАлкогольнойПродукции.Вставить("ИННПроизводителя"    , Выборка.ИННПроизводителя);
			Товар.ПараметрыАлкогольнойПродукции.Вставить("КПППроизводителя"    , Выборка.КПППроизводителя);
			Товар.ПараметрыАлкогольнойПродукции.Вставить("КодВидаПродукции"    , Выборка.КодВидаПродукции);
			
		КонецЦикла;
		
		СуммаНал = ПолучитьСуммуНаличнойОплаты();
		СуммаБезНал = ПолучитьСуммуБезналичнойОплаты();
		
		ДопДанные = Новый Структура;
		ДопДанные.Вставить("ПараметрыПередачиВЕГАИС", Новый Структура("Чек", ЭтотОбъект));
		ДопДанные.Вставить("СуммаНал",    СуммаНал);
		ДопДанные.Вставить("СуммаБезНал", СуммаБезНал);
		
		Если ВидФУ = Перечисления.ВидыТорговогоОборудования.ККТ Тогда
			ОписаниеПКС = КассовыеСменыВызовСервера.ОписаниеПоследнейКассовойСмены(ФУ);
			Если ОписаниеПКС = Неопределено ИЛИ ОписаниеПКС.Статус = Перечисления.СтатусыКассовойСмены.Закрыта Тогда
				Ответ = "Кассовая смена не открыта";
				Отказ = Истина;
				Результат = Ложь;
				Возврат Результат;
			КонецЕсли;
			ДопДанные.Вставить("ПорядокНалогообложения", ПорядокНалогообложения);
			ДопДанные.Вставить("ОписаниеПКС", ОписаниеПКС);
			Если Не ПустаяСтрока(АдресЭП) Тогда
				ДопДанные.Вставить("ПокупательEmail", АдресЭП);
			КонецЕсли;
			Результат = ФискализироватьЧек(ФУ, ДопДанные, Ответ, Отказ, ОшибкаТО);
		Иначе
			ОшибкаТО = ПолучитьСерверТО().ПечатьЧека(
				ФУ,
				ПолучитьСерверТО().ПолучитьПарольКассираККМ(),
				НомерЧекаККМ,
				НомерСменыККМ,
				ТаблицаТоваров,
				ПолучитьСуммуНаличнойОплаты(),
				ПолучитьСуммуБезналичнойОплаты(),
				ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат, ДопДанные);
				
		КонецЕсли;
		
		Если ИспользуетсяРегистрацияВЕГАИС Тогда
			Если Не ЗначениеЗаполнено(ОшибкаТО) И ДопДанные <> Неопределено И ДопДанные.Свойство("ПараметрыВозвратаИзЕГАИС") Тогда
				ПараметрыВозврата = ДопДанные.ПараметрыВозвратаИзЕГАИС;
				Если Не ПустаяСтрока(ПараметрыВозврата.АдресЧека) И Не ПустаяСтрока(ПараметрыВозврата.ПодписьЧека) Тогда
					РезультатОперации = ИнтеграцияЕГАИСКлиент.ПечатьСлипЧека(ФУ, ПараметрыВозврата, КассаККМ.ШиринаЛенты);
					Если НЕ РезультатОперации.Результат Тогда
						ОбщегоНазначения.СообщитьОбОшибке(РезультатОперации.ОписаниеОшибки);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(ОшибкаТО) Тогда
		ЧекПробитНаККМ = Истина;
		Попытка
			Записать(РежимЗаписиДокумента.Запись);
		Исключение
			Ответ     = "Не удалось записать документ с установленными параметрами пробитого чека.";
			Отказ     = Истина;
			Результат = Ложь;
		КонецПопытки;
	Иначе
		Если ВидФУ <> Перечисления.ВидыТорговогоОборудования.ККТ Тогда
			Ответ = ПолучитьСерверТО().ПолучитьТекстОшибкиФРТО(ОшибкаТО);
		КонецЕсли;
		Отказ     = Истина;
		Результат = Ложь;
	КонецЕсли;

	Возврат Результат;

КонецФункции // ПровестиИРаспечататьЧек()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	Если ИмяМакета = "Чек" Тогда
		Если НЕ ЗначениеЗаполнено(Организация) Тогда
			Если НЕ ЗначениеЗаполнено(КассаККМ) Тогда
				НачалоСообщенияОбОшибке = "Не выбрана касса ККМ."
			Иначе
				НачалоСообщенияОбОшибке = "У выбранной кассы ККМ не задана организация.";
			КонецЕсли;

			Предупреждение(НачалоСообщенияОбОшибке + Символы.ПС + "Печать чека невозможна.");
			Возврат;
		КонецЕсли;

		// Получить экземпляр документа на печать.
		ТабДокумент = ПечатьЧека();
	ИначеЕсли ИмяМакета = "СерийныеНомера" Тогда
	
		ТабДокумент = УчетСерийныхНомеров.ПечатьСерийныхНомеров(Ссылка, "Товары");
	
	ИначеЕсли ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда
		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);

		Если ТабДокумент = Неопределено Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()), Ссылка);

КонецПроцедуры // Печать()

// Возвращает доступные варианты печати документа.
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати.
//
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт

	СтруктураМакетов = Новый Структура("Чек", "Чек");
	СтруктураМакетов.Вставить("СерийныеНомера",      "Список серийных номеров");

	Возврат СтруктураМакетов;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()
#КонецЕсли

// Функция считает сумму, оплаченную наличными.
//
// Возвращаемое значение:
//  Число - сумма, оплаченная наличными.
//
Функция ПолучитьСуммуНаличнойОплаты() Экспорт

	СуммаНаличнойОплаты = 0;
	Для Каждого ТекОплата Из Оплата Цикл
		Если ЗначениеЗаполнено(ТекОплата.ВидОплаты) И ТекОплата.ВидОплаты.ТипОплаты = Перечисления.ТипыОплатЧекаККМ.Наличные Тогда
			СуммаНаличнойОплаты = СуммаНаличнойОплаты + ТекОплата.Сумма;
		КонецЕсли;
	КонецЦикла;

	Возврат СуммаНаличнойОплаты;

КонецФункции // ПолучитьСуммуНаличнойОплаты()

// Функция считает сумму, оплаченную безналичными.
//
// Возвращаемое значение:
//  Число - сумма, оплаченная наличными.
//
Функция ПолучитьСуммуБезналичнойОплаты() Экспорт

	СуммаБезналичнойОплаты = 0;
	Для Каждого ТекОплата Из Оплата Цикл
		Если ЗначениеЗаполнено(ТекОплата.ВидОплаты) И ТекОплата.ВидОплаты.ТипОплаты <> Перечисления.ТипыОплатЧекаККМ.Наличные Тогда
			СуммаБезналичнойОплаты = СуммаБезналичнойОплаты + ТекОплата.Сумма;
		КонецЕсли;
	КонецЦикла;

	Возврат СуммаБезналичнойОплаты;

КонецФункции // ПолучитьСуммуБезналичнойОплаты()

Функция УстановленЕНВДОрганизации(СброситьКэш = Ложь) Экспорт

	Если СброситьКэш
	 Или мОрганизацияОблагаетсяЕНВД = Неопределено Тогда
		Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	УчетнаяПолитикаОрганизацийСрезПоследних.РозничнаяТорговляОблагаетсяЕНВД
		|ИЗ
		|	РегистрСведений.УчетнаяПолитикаОрганизаций.СрезПоследних(&Дата, Организация = &Ссылка) КАК УчетнаяПолитикаОрганизацийСрезПоследних
		|");

		Запрос.УстановитьПараметр("Ссылка", КассаККМ.Владелец);
		Запрос.УстановитьПараметр("Дата"  , ?(ЭтоНовый(), ТекущаяДата(), Дата));

		Выборка = Запрос.Выполнить().Выбрать();
		мОрганизацияОблагаетсяЕНВД = ?(Выборка.Следующий(), Выборка.РозничнаяТорговляОблагаетсяЕНВД, Ложь);
	КонецЕсли;

	Возврат мОрганизацияОблагаетсяЕНВД;

КонецФункции

Функция ИтогиОплатПоТипам() Экспорт
	
	Результат = Новый Соответствие();
	Для Каждого ТипОплаты Из Перечисления.ТипыОплатЧекаККМ Цикл
		Результат.Вставить(ТипОплаты, 0);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЧекККМОплата.ВидОплаты.ТипОплаты КАК ТипОплаты,
	               |	СУММА(ЧекККМОплата.Сумма) КАК Сумма
	               |ИЗ
	               |	Документ.ЧекККМ.Оплата КАК ЧекККМОплата
	               |ГДЕ
	               |	ЧекККМОплата.Ссылка = &Ссылка
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ЧекККМОплата.ВидОплаты.ТипОплаты";
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	ВыборкаТипов = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаТипов.Следующий() Цикл
		Результат[ВыборкаТипов.ТипОплаты] = ВыборкаТипов.Сумма;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура ПослеПередачиЧекаЕГАИС(Изменения, ПараметрыВыполнения) Экспорт
	
	ЕстьОшибки = (Изменения.Количество() <> 1);
	
	Ошибки = Новый Массив;
	Для Каждого ЭлементДанных Из Изменения Цикл
		Если ЗначениеЗаполнено(ЭлементДанных.ТекстОшибки) Тогда
			ЕстьОшибки = Истина;
			Ошибки.Добавить(ЭлементДанных.ТекстОшибки);
		КонецЕсли;
	КонецЦикла;
	Если Ошибки.Количество() > 0 Тогда
		Ошибки.Вставить(0, НСтр("ru = 'В процессе передачи данных в ЕГАИС возникли ошибки:'"));
	КонецЕсли;
	ОписаниеОшибки = СтрСоединить(Ошибки, Символы.ПС);
	
	ПараметрыВыполнения.ПродолжитьПечать = Не ЕстьОшибки;
	ПараметрыВыполнения.ОписаниеОшибки   = ОписаниеОшибки;
	
	ПараметрыВыполнения.Вставить("АдресЧека",   Изменения[0].ИдентификаторЗапроса);
	ПараметрыВыполнения.Вставить("ПодписьЧека", Изменения[0].Подпись);
	
	Обработка   = ПараметрыВыполнения.Обработка;
	Объект      = ПараметрыВыполнения.Объект;
	СуммаНал    = ПараметрыВыполнения.СуммаНал;
	СуммаБезнал = ПараметрыВыполнения.СуммаБезнал;
	
	МассивСтрокДляПечати = Новый Массив;
	МассивСтрокДляПечати.Добавить("Адрес: "+ПараметрыВыполнения.АдресЧека);
	МассивСтрокДляПечати.Добавить("Подпись: "+ПараметрыВыполнения.ПодписьЧека);
	Обработка.НапечататьСтроки(Объект, МассивСтрокДляПечати, 37);
	
	Обработка.ЗакрытьЧек(Объект, СуммаНал, СуммаБезнал);
	
КонецПроцедуры

/////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры:
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары".
//  СтруктураШапкиДокумента - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента)

	ТаблицаТоваров = РезультатЗапросаПоТоварам.Выгрузить();

	Если СтруктураШапкиДокумента.ВидСклада = Перечисления.ВидыСкладов.НТТ Тогда
		ТаблицаТоваров.Колонки.Цена.Имя = "ЦенаВРознице";
	КонецЕсли;

	// Количество, для услуг не имеющих единицы.
	Для Каждого СтрокаТаблицы Из ТаблицаТоваров Цикл
		Если СтрокаТаблицы.Услуга = Истина Тогда
			Если ВидОперации = Перечисления.ВидыОперацийЧекККМ.Продажа Тогда
				Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Количество) Тогда
					СтрокаТаблицы.Количество = 1;
				КонецЕсли;
			ИначеЕсли ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат Тогда
				Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.КоличествоДок) Тогда
					СтрокаТаблицы.КоличествоДок = 1;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Если ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат Тогда
		ТаблицаТоваров.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
		ТаблицаТоваров.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));

		Для Каждого СтрокаТаблицы Из ТаблицаТоваров Цикл
			Если СтрокаТаблицы.КоличествоДок = NULL Тогда
				СтрокаТаблицы.КоличествоДок = 0;
			КонецЕсли;

			СтрокаТаблицы.Количество = - СтрокаТаблицы.КоличествоДок;
			СтрокаТаблицы.Сумма = - СтрокаТаблицы.СуммаДок;
		КонецЦикла;
	КонецЕсли;

	Возврат ТаблицаТоваров;

КонецФункции // ПодготовитьТаблицуТоваров()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры:
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары".
//  СтруктураШапкиДокумента - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуСкидок(ТаблицаТоваров, СтруктураШапкиДокумента)

	ТаблицаДвижений = Новый ТаблицаЗначений;
	ТаблицаДвижений.Колонки.Добавить("Номенклатура");
	ТаблицаДвижений.Колонки.Добавить("ХарактеристикаНоменклатуры");
	ТаблицаДвижений.Колонки.Добавить("УсловиеСкидки");
	ТаблицаДвижений.Колонки.Добавить("ЗначениеУсловияСкидки");
	ТаблицаДвижений.Колонки.Добавить("СуммаСкидки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));

	Для Каждого СтрокаТаблицы Из ТаблицаТоваров Цикл
		СуммаБезСкидки = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Окр(СтрокаТаблицы.Цена * СтрокаТаблицы.КоличествоВЕдиницахДокумента, 2), мВалютаРегламентированногоУчета,
		   СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
		   1, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
		   1, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

		СуммаСоСкидками = СуммаБезСкидки;
		СкидкиЕсть = Ложь;

		Если СтрокаТаблицы.ПроцентАвтоматическихСкидок <> 0 Тогда
			СтрокаДвижений = ТаблицаДвижений.Добавить();
			СтрокаДвижений.Номенклатура = СтрокаТаблицы.Номенклатура;
			СтрокаДвижений.ХарактеристикаНоменклатуры = СтрокаТаблицы.ХарактеристикаНоменклатуры;
			СтрокаДвижений.УсловиеСкидки = СтрокаТаблицы.УсловиеАвтоматическойСкидки;
			СтрокаДвижений.ЗначениеУсловияСкидки = СтрокаТаблицы.ЗначениеУсловияАвтоматическойСкидки;
			СтрокаДвижений.СуммаСкидки = Окр(СуммаБезСкидки / 100 * СтрокаТаблицы.ПроцентАвтоматическихСкидок, 2);

			СуммаСоСкидками = СуммаСоСкидками - СтрокаДвижений.СуммаСкидки;

			СкидкиЕсть = Истина;
		КонецЕсли;

		Если СтрокаТаблицы.ПроцентСкидкиНаценки <> 0 Тогда
			СтрокаДвижений = ТаблицаДвижений.Добавить();
			СтрокаДвижений.Номенклатура = СтрокаТаблицы.Номенклатура;
			СтрокаДвижений.ХарактеристикаНоменклатуры = СтрокаТаблицы.ХарактеристикаНоменклатуры;
			СтрокаДвижений.УсловиеСкидки = Перечисления.УсловияСкидкиНаценки.РучнаяСкидка;
			СтрокаДвижений.ЗначениеУсловияСкидки = СтрокаТаблицы.ПроцентСкидкиНаценки;
			СтрокаДвижений.СуммаСкидки = Окр(СуммаБезСкидки / 100 * СтрокаТаблицы.ПроцентСкидкиНаценки, 2);

			СуммаСоСкидками = СуммаСоСкидками - СтрокаДвижений.СуммаСкидки;
			СкидкиЕсть = Истина;
		КонецЕсли;

		СуммаСтроки = ?(ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат, -СтрокаТаблицы.Сумма, СтрокаТаблицы.Сумма);
		СуммаСтроки = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаСтроки, мВалютаРегламентированногоУчета,
		   СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
		   1, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
		   1, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

		Разница = СуммаСтроки - СуммаСоСкидками;
		Если Разница <> 0 И СкидкиЕсть Тогда
			СтрокаДвижений.СуммаСкидки = СтрокаДвижений.СуммаСкидки + Разница;
		КонецЕсли;

		// Натуральные скидки.
		Если СтрокаТаблицы.Комплект Тогда
			Если Ценообразование.ЭтоСпецПредложение(СтруктураШапкиДокумента.Дата,
			        СтрокаТаблицы.Номенклатура,
			        СтрокаТаблицы.ХарактеристикаНоменклатуры,
			        Ценообразование.ПолучитьМассивПолучателейСкидки(Перечисления.ВидыСкидок.Розничная, ЭтотОбъект)) Тогда
				Комплектующие = СоставНабора.НайтиСтроки(Новый Структура("КлючСтроки", СтрокаТаблицы.КлючСтроки));

				СтоимостьКомплектующих = 0;
				СоответствиеКомплектующих = Новый Соответствие;

				Для Каждого Комплектующая Из Комплектующие Цикл
					Цена = Комплектующая.Цена;

					СтоимостьКомплектующей = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Цена * СтрокаТаблицы.Количество * Комплектующая.Количество,
					   мВалютаРегламентированногоУчета, СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
					   1, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 1,
					   СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

					СтоимостьКомплектующих = СтоимостьКомплектующих + СтоимостьКомплектующей;
					СоответствиеКомплектующих.Вставить(Комплектующая, СтоимостьКомплектующей);
				КонецЦикла;

				СуммаСкидки = СтоимостьКомплектующих - СуммаСтроки;

				Для Каждого Комплектующая Из СоответствиеКомплектующих Цикл
					СтрокаДвижений = ТаблицаДвижений.Добавить();
					СтрокаДвижений.Номенклатура = Комплектующая.Ключ.Номенклатура;
					СтрокаДвижений.ХарактеристикаНоменклатуры = Комплектующая.Ключ.ХарактеристикаНоменклатуры;
					СтрокаДвижений.УсловиеСкидки = Перечисления.УсловияСкидкиНаценки.СпецПредложение;
					СтрокаДвижений.ЗначениеУсловияСкидки = СтрокаТаблицы.Номенклатура;
					СтрокаДвижений.СуммаСкидки = Комплектующая.Значение / СтоимостьКомплектующих * СуммаСкидки;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Если ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат Тогда
		Для Каждого СтрокаСкидки Из ТаблицаДвижений Цикл
			СтрокаСкидки.СуммаСкидки = -СтрокаСкидки.СуммаСкидки;
		КонецЦикла;
	КонецЕсли;

	Возврат ТаблицаДвижений;

КонецФункции // ПодготовитьТаблицуСкидок()

// Проверяет правильность заполнения шапки документа.
//
// Параметры:
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа.
//  Отказ - флаг отказа в проведении.
//  Заголовок - заголовок сообщения об ошибках проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = 
	Новый Структура("Склад, КассаККМ, Организация");

	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	Если СтруктураШапкиДокумента.ВидСклада = Перечисления.ВидыСкладов.НТТ Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Документ не может осуществлять реализацию с НТТ!", Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения строк табличной части "Оплата".
//
// Параметры:
//  ТаблицаПоОплате - таблица значений, содержащая данные для проведения и проверки ТЧ "Оплата".
//  Отказ - флаг отказа в проведении.
//  Заголовок - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиОплата(ТаблицаПоОплате, Отказ, Заголовок)

	СуммаВсего = Товары.Итог("Сумма");
	ОплаченоНал = ПолучитьСуммуНаличнойОплаты();
	ОплаченоБезнал = ПолучитьСуммуБезналичнойОплаты();
	ОплаченоВсего = Оплата.Итог("Сумма");

	Если ОплаченоВсего < СуммаВсего Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Сумма всех типов оплат меньше суммы документа!", Отказ, Заголовок);
	КонецЕсли;

	Если ОплаченоБезнал > СуммаВсего Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Сумма безналичной оплаты не может быть больше суммы документа!", Отказ, Заголовок);
	КонецЕсли;

	Если Оплата.Количество() = 1 Тогда
		СтрокаОплаты = Оплата[0];

		Если НЕ ЗначениеЗаполнено(СтрокаОплаты.ВидОплаты) Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Не заполнено значение реквизита ""Вид оплаты""!", Отказ, Заголовок);
		КонецЕсли;

		Если НЕ ЗначениеЗаполнено(СтрокаОплаты.Сумма) Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Не заполнено значение реквизита ""Сумма оплаты""!", Отказ, Заголовок);
		КонецЕсли;
	Иначе

		// Укажем, что надо проверить.
		СтруктураОбязательныхПолей = Новый Структура("ВидОплаты, Сумма");

		ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Оплата", СтруктураОбязательныхПолей, Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиОплата()

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
//  ТаблицаПоТоварам - таблица значений, содержащая данные для проведения и проверки ТЧ "Товары".
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа.
//  Отказ - флаг отказа в проведении.
//  Заголовок - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента,
	                                              Отказ, Заголовок)

	// Укажем, что надо проверить.
	СтруктураОбязательныхПолей = Новый Структура("Номенклатура, Количество, Сумма");

	УправлениеЗапасами.КорректировкаСтруктурыОбязательныхПолей(СтруктураОбязательныхПолей, СтруктураШапкиДокумента.ВидСклада);

	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураОбязательныхПолей, Отказ, Заголовок);

	// Здесь наборов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетНаборов(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);

	Для Каждого СтрокаТаблицы Из ТаблицаПоТоварам Цикл
		Если СтрокаТаблицы.Услуга <> Истина Тогда // для товаров единица измерения обязательна
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ЕдиницаИзмерения) Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Для товара нужно заполнять единицу измерения (строка " + СтрокаТаблицы.НомерСтроки + ").", Отказ, Заголовок);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	УчетСерийныхНомеров.ПроверитьКоличествоСерийныхНомеровВДокументе(ЭтотОбъект, "Товары", Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// По результату запроса по шапке документа формируем движения по регистрам.
//
// Параметры:
//  РежимПроведения - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  ТаблицаПоТоварам - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  ТаблицаПоСкидкам - таблица значений, содержащая данные для проведения по скидкам,
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, 
	                          ТаблицаПоТоварам, ТаблицаПоСкидкам, Отказ, Заголовок);

	// Движения по документу.
	Если ВидОперации = Перечисления.ВидыОперацийЧекККМ.Продажа Тогда
		УправлениеСертификациейНоменклатуры.ПроверитьНаСертификацию( ТаблицаПоТоварам.ВыгрузитьКолонку("СерияНоменклатуры"), Дата, Ложь, Заголовок);
	КонецЕсли;

	// По некоторым регистрам услуги проводить не нужно.
	// Подготовим отдельную таблицу.
	ТаблицаПоТоварамБезУслуг = ОбщегоНазначения.ОтобратьСтрокиПоКритериям(ТаблицаПоТоварам,
	                           Новый Структура("Услуга", Ложь)).Выгрузить();

	// По регистру РозничнаяВыручка.
	СуммаНалБезСдачи = СуммаДокумента - ПолучитьСуммуБезналичнойОплаты();
	Если СуммаНалБезСдачи <> 0 Тогда
		НаборДвижений = Движения.РозничнаяВыручка;

		// Получим таблицу значений, совпадающую со структурой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.Выгрузить();

		// Заполним таблицу движений.
		СтрокаДвижений = ТаблицаДвижений.Добавить();
		СтрокаДвижений.РозничнаяТочка = КассаККМ;
		СтрокаДвижений.Сумма          = ?(ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат, -СуммаНалБезСдачи, СуммаНалБезСдачи);
		СтрокаДвижений.Подразделение  = Неопределено;

		НаборДвижений.мПериод          = Дата;
		НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;

		Если Не Отказ Тогда
			НаборДвижений.ВыполнитьПриход();
		КонецЕсли;
	КонецЕсли;

	// По регистру ПродажиПоДисконтнымКартам.
	Если ЗначениеЗаполнено(СтруктураШапкиДокумента.ДисконтнаяКарта) Тогда
		СуммаДок = ?(ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат, -СуммаДокумента, СуммаДокумента);

		НаборДвижений = Движения.ПродажиПоДисконтнымКартам;

		// Получим таблицу значений, совпадающую со структурой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.Выгрузить();

		// Заполним таблицу движений.
		СтрокаДвижений = ТаблицаДвижений.Добавить();
		СтрокаДвижений.ДисконтнаяКарта = СтруктураШапкиДокумента.ДисконтнаяКарта;
		СтрокаДвижений.ВладелецДисконтнойКарты = СтруктураШапкиДокумента.ВладелецДисконтнойКарты;
		СтрокаДвижений.Сумма = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаДок, мВалютаРегламентированногоУчета,
								   СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
								   1,
								   СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
								   1,
								   СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

		НаборДвижений.мПериод          = Дата;
		НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;

		Если Не Отказ Тогда
			НаборДвижений.ВыполнитьДвижения();
		КонецЕсли;
	КонецЕсли;

	// ТОВАРЫ ПО РЕГИСТРУ ТоварыНаСкладах или ТоварыВРознице.
	Если Склад.ВидСклада = Перечисления.ВидыСкладов.Оптовый Тогда
		НаборДвижений = Движения.ТоварыНаСкладах;
	Иначе
		НаборДвижений = Движения.ТоварыВРознице;
	КонецЕсли;

	// Получим таблицу значений, совпадающую со структурой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.Выгрузить();

	//Получим таблицу по комплектам.
	ТаблицаПоКомплектам = УправлениеЗапасами.СформироватьТаблицуКомплектующих(ТаблицаПоТоварамБезУслуг, ЭтотОбъект);
	ТаблицаПоКомплектам.Колонки.Добавить("Склад");
	ТаблицаПоКомплектам.ЗаполнитьЗначения(Склад, "Склад");

	Если Склад.ВидСклада = Перечисления.ВидыСкладов.Розничный Тогда
		ТаблицаПоКомплектам.Колонки.Добавить("СуммаПродажная");

		ТаблицаПоЦенам = УправлениеРозничнойТорговлей.СформироватьЗапросПоПродажнымЦенам(Дата, Склад,
		                 ТаблицаПоКомплектам.ВыгрузитьКолонку("Номенклатура")).Выгрузить();

		УправлениеРозничнойТорговлей.ЗаполнитьКолонкуСуммаПродажная(ТаблицаПоКомплектам, ТаблицаПоЦенам);
	КонецЕсли;

	// Заполним таблицу движений.
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоКомплектам, ТаблицаДвижений);

	// Недостающие поля.
	ТаблицаДвижений.ЗаполнитьЗначения(Справочники.Качество.Новый, "Качество");

	НаборДвижений.мПериод          = Дата;
	НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;

	// Проверка остатков при оперативном проведении.
	Если СтруктураШапкиДокумента.КонтролироватьОстаткиТоваровПриОперативномПроведенииЧековККМ
		И ВидОперации = Перечисления.ВидыОперацийЧекККМ.Продажа Тогда
		
		// Контроль остатков товара
		Если Товары.Количество() <> 0 Тогда
			Если Склад.ВидСклада = Перечисления.ВидыСкладов.Оптовый Тогда
				ПроцедурыКонтроляОстатков.ТоварыНаСкладахКонтрольОстатков("Товары", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
			Иначе
				ПроцедурыКонтроляОстатков.ТоварыВРозницеКонтрольОстатков("Товары", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Если Не Отказ Тогда
		НаборДвижений.ВыполнитьРасход();
	КонецЕсли;

	// ПО РЕГИСТРУ ПредоставленныеСкидки.
	НаборДвижений = Движения.ПредоставленныеСкидки;

	ТаблицаДвижений = НаборДвижений.Выгрузить();
	ТаблицаДвижений.Очистить();

	// Заполним таблицу движений.
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоСкидкам, ТаблицаДвижений);

	ТаблицаДвижений.ЗаполнитьЗначения(Склад, "ПолучательСкидки");

	Если ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат Тогда
		ТаблицаДвижений.ЗаполнитьЗначения(ЧекККМПродажа, "ДокументСкидки");
	Иначе
		ТаблицаДвижений.ЗаполнитьЗначения(Ссылка, "ДокументСкидки");
	КонецЕсли;

	НаборДвижений.мПериод          = Дата;
	НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;

	Если Не Отказ Тогда
		НаборДвижений.ВыполнитьДвижения();
	КонецЕсли;

КонецПроцедуры // ДвиженияПоРегистрам()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)

	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ЧекККМ") Тогда
		
		// Заполним вид операции.
		ВидыОперацийЧек = Перечисления.ВидыОперацийЧекККМ;
		Если Основание.ВидОперации = ВидыОперацийЧек.Продажа Тогда
			ВидОперации = ВидыОперацийЧек.Возврат;
			ЧекККМПродажа = Основание;
		Иначе
			Возврат;
		КонецЕсли;
		
		// Заполним реквизиты из стандартного набора.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
		
		КассаККМ = Основание.КассаККМ;
		ВладелецДисконтнойКарты = Основание.ВладелецДисконтнойКарты;
		
		// Скопируем состав.
		ТЗТовары = Основание.Товары.Выгрузить();
		ТЗТовары.ЗаполнитьЗначения(Ложь, "РегистрацияПродажи");
		Товары.Загрузить(ТЗТовары);

		Оплата.Загрузить(Основание.Оплата.Выгрузить());
		АкцизныеМарки.Загрузить(Основание.АкцизныеМарки.Выгрузить());
	КонецЕсли;
	
	ОрганизацияЕГАИС = РозничныеПродажи.ПолучитьОрганизациюЕГАИС(Склад, КассаККМ.Владелец);
	
КонецПроцедуры // ОбработкаЗаполнения()

// Процедура - обработчик события "ПередЗаписью".
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	СуммаДокумента = Товары.Итог("Сумма");
	УчетСерийныхНомеров.УдалитьНеиспользуемыеСтрокиПодчиненнойТЧ(ЭтотОбъект, мПараметрыСвязиСтрокТЧ, "Товары");

	мУдалятьДвижения = НЕ ЭтоНовый();
	
КонецПроцедуры // ПередЗаписью()

Процедура ПриКопировании(ОбъектКопирования)
	
	ЧекПробитНаККМ = Ложь;
	НомерЧекаККМ = 0;
	НомерСменыККМ = 0;
	ТекстЭлектронногоЧека = "";
	
	ОрганизацияЕГАИС = РозничныеПродажи.ПолучитьОрганизациюЕГАИС(Склад, КассаККМ.Владелец);
	
КонецПроцедуры

// Процедура - обработчик события "ОбработкаПроведения".
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;

	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;

	Если Архивный Тогда
		Возврат;
	КонецЕсли;
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = "Проведение документа """ + СокрЛП(Ссылка) + """: ";

	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = УправлениеЗапасами.СформироватьДеревоПолейЗапросаПоШапке();
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы", "ВалютаУправленческогоУчета"    , "ВалютаУправленческогоУчета");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы", "КурсВалютыУправленческогоУчета", "КурсВалютыУправленческогоУчета");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Склад"    , "ВидСклада"                     , "ВидСклада");

	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа.
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);
	СтруктураШапкиДокумента.Вставить("КонтролироватьОстаткиТоваровПриОперативномПроведенииЧековККМ", УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "КонтролироватьОстаткиТоваровПриОперативномПроведенииЧековККМ"));

	// Проверим правильность заполнения шапки документа.
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);

	// Проверим допустимость для пользователя цен документа.
	УправлениеДопПравамиПользователей.ПроверитьДопустимостьЦенОтпуска(ЭтотОбъект, "Товары", Отказ);

	// Получим необходимые данные для проведения и проверки заполнения по табличной части "Товары".
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Номенклатура", "Номенклатура");
	СтруктураПолей.Вставить("Услуга"      , "Номенклатура.Услуга");

	Если ВидОперации <> Перечисления.ВидыОперацийЧекККМ.Возврат Тогда
		СтруктураПолей.Вставить("Количество"   , "Количество * Коэффициент /Номенклатура.ЕдиницаХраненияОстатков.Коэффициент");
		СтруктураПолей.Вставить("Сумма"        , "Сумма");
	Иначе
		СтруктураПолей.Вставить("КоличествоДок", "Количество * Коэффициент /Номенклатура.ЕдиницаХраненияОстатков.Коэффициент");
		СтруктураПолей.Вставить("СуммаДок"     , "Сумма");
	КонецЕсли;

	СтруктураПолей.Вставить("Цена"                               , "Цена");
	СтруктураПолей.Вставить("Набор"                              , "Номенклатура.Набор");
	СтруктураПолей.Вставить("Комплект"                           , "Номенклатура.Комплект");
	СтруктураПолей.Вставить("ХарактеристикаНоменклатуры"         , "ХарактеристикаНоменклатуры");
	СтруктураПолей.Вставить("ЕдиницаИзмерения"                   , "ЕдиницаИзмерения");
	СтруктураПолей.Вставить("СерияНоменклатуры"                  , "СерияНоменклатуры");
	СтруктураПолей.Вставить("ПроцентСкидкиНаценки"               , "ПроцентСкидкиНаценки");
	СтруктураПолей.Вставить("ПроцентАвтоматическихСкидок"        , "ПроцентАвтоматическихСкидок");
	СтруктураПолей.Вставить("УсловиеАвтоматическойСкидки"        , "УсловиеАвтоматическойСкидки");
	СтруктураПолей.Вставить("ЗначениеУсловияАвтоматическойСкидки", "ЗначениеУсловияАвтоматическойСкидки");
	СтруктураПолей.Вставить("КлючСтроки"                         , "КлючСтроки");
	СтруктураПолей.Вставить("КоличествоВЕдиницахДокумента"       , "Количество");

	РезультатЗапросаПоТоварам = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураПолей);

	Если ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат И Не ОбменДанными.Загрузка Тогда
		РезультатЗапросаПоТоварамОснования = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЧекККМПродажа, "Товары", СтруктураПолей);
		ТаблицаТоваровДокумента = РезультатЗапросаПоТоварам.Выгрузить();
		ТаблицаТоваровДокумента.Свернуть("Номенклатура, Цена, ХарактеристикаНоменклатуры, СерияНоменклатуры", "КоличествоДок");
		ТаблицаТоваровДокументаОснования = РезультатЗапросаПоТоварамОснования.Выгрузить();
		ТаблицаТоваровДокументаОснования.Свернуть("Номенклатура, Цена, ХарактеристикаНоменклатуры, СерияНоменклатуры", "КоличествоДок");

		Для Каждого СтрокаТаблицыТоваровДокумента Из ТаблицаТоваровДокумента Цикл
			СтрокиОснования = ТаблицаТоваровДокументаОснования.НайтиСтроки(
			                  Новый Структура ("Номенклатура, Цена, ХарактеристикаНоменклатуры, СерияНоменклатуры",
			                                   СтрокаТаблицыТоваровДокумента.Номенклатура,
			                                   СтрокаТаблицыТоваровДокумента.Цена,
			                                   СтрокаТаблицыТоваровДокумента.ХарактеристикаНоменклатуры,
			                                   СтрокаТаблицыТоваровДокумента.СерияНоменклатуры));

			Продано = 0;
			Если СтрокиОснования.Количество() > 0 Тогда
				Если СтрокиОснования[0].КоличествоДок >= СтрокаТаблицыТоваровДокумента.КоличествоДок Тогда
					Продолжить;
				Иначе
					Продано = СтрокиОснования[0].КоличествоДок;
				КонецЕсли;
			КонецЕсли;

			ОбщегоНазначения.СообщитьОбОшибке("По документу основанию товара """ + СтрокаТаблицыТоваровДокумента.Номенклатура
			                    + """ по цене """ + ОбщегоНазначения.ФорматСумм(СтрокаТаблицыТоваровДокумента.Цена, мВалютаРегламентированногоУчета)+ """ "
			                    + Символы.ПС + ? (ЗначениеЗаполнено(СтрокаТаблицыТоваровДокумента.ХарактеристикаНоменклатуры),
			                         "с характеристикой """ + СтрокаТаблицыТоваровДокумента.ХарактеристикаНоменклатуры + """", "")
			                    + ? (ЗначениеЗаполнено(СтрокаТаблицыТоваровДокумента.СерияНоменклатуры),
			                         "с серией """ + СтрокаТаблицыТоваровДокумента.СерияНоменклатуры + """", "")
			                    + "продано """ + Продано +""", возвращается от покупателя """
			                    + СтрокаТаблицыТоваровДокумента.КоличествоДок + """.", Отказ, Заголовок);
		КонецЦикла;
	КонецЕсли;

	// Подготовим таблицу товаров для проведения.
	ТаблицаПоТоварам = ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента);

	// Проверить заполнение ТЧ "Товары".
	ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок);

	// Получим необходимые данные для проведения и проверки заполнения по табличной части "Оплата".
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("ВидОплаты", "ВидОплаты");
	СтруктураПолей.Вставить("Сумма"    , "Сумма");

	ТаблицаПоОплате = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Оплата", СтруктураПолей).Выгрузить();

	// Проверить заполнение ТЧ "Оплата".
	ПроверитьЗаполнениеТабличнойЧастиОплата(ТаблицаПоОплате, Отказ, Заголовок);


	Если Не Отказ Тогда
		// Подготовим таблицу скидок для проведения.
		ТаблицаПоСкидкам = ПодготовитьТаблицуСкидок(ТаблицаПоТоварам, СтруктураШапкиДокумента);

		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоСкидкам, Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ОбработкаПроведения()

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

#Если Клиент Тогда
	
Функция ИспользуемыеСистемыНалогообложения(ПорядокНалогообложения) Экспорт
	
	СистемыНалогообложения = Новый Соответствие;
	
	УП = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(Дата, Организация);
	Если УП = Неопределено Тогда
		ЗначениеПоУмолчанию = "НЕ ОПРЕДЕЛЕНО";
	ИначеЕсли УП.СистемаНалогообложения = ПредопределенноеЗначение("Перечисление.СистемыНалогообложения.Общая") Тогда
		ЗначениеПоУмолчанию = "ОБЩАЯ";
	ИначеЕсли УП.СистемаНалогообложения = ПредопределенноеЗначение("Перечисление.СистемыНалогообложения.Упрощенная") Тогда
		ЗначениеПоУмолчанию = "УПРОЩЕННАЯ";
	Иначе
		ЗначениеПоУмолчанию = "НЕ ОПРЕДЕЛЕНО";
	КонецЕсли;
	ПорядокНалогообложения = ЗначениеПоУмолчанию;
	
	Для Каждого СтрокаТЧ Из Товары Цикл
		СтруктураСчетовУчета = СчетаУчетаВДокументах.ПолучитьСчетаУчетаНоменклатурыИзНастроек(Организация, СтрокаТЧ.Номенклатура, Склад, Дата);
		Если НалоговыйУчетУСН.ОтноситсяКДеятельностиЕНВД(СтруктураСчетовУчета.СчетДоходовБУРозницы) Тогда
			Значение = "ЕНВД";
		Иначе
			Значение = ЗначениеПоУмолчанию;
		КонецЕсли;
		
		Если СистемыНалогообложения.Получить(Значение) <> Неопределено Тогда
			СистемыНалогообложения[Значение].Количество = СистемыНалогообложения[Значение].Количество + 1;
			СистемыНалогообложения[Значение].НомераСтрокДокумента = СистемыНалогообложения[Значение].НомераСтрокДокумента
				+ ", " + Формат(СтрокаТЧ.НомерСтроки,"ЧГ=0")
		Иначе
			СтруктураСН = Новый Структура("Количество, НомераСтрокДокумента", 1, Формат(СтрокаТЧ.НомерСтроки,"ЧГ=0"));
			СистемыНалогообложения.Вставить(Значение, СтруктураСН);
		КонецЕсли;
		ПорядокНалогообложения = Значение;
	КонецЦикла;
	
	Возврат СистемыНалогообложения;
	
КонецФункции

Процедура ПодготовитьДанныеДляФискализацииЧека(ЧекККМ, ОбщиеПараметры, ДопДанные, ТО)
	
	Если ОбщиеПараметры = Неопределено Тогда
		ОбщиеПараметры = МенеджерОборудованияКлиентСервер.ПараметрыОперацииФискализацииЧека();
	КонецЕсли;
	
	ОписаниеПКС = Неопределено;
	Если ДопДанные.Свойство("ОписаниеПКС", ОписаниеПКС) Тогда
		ОбщиеПараметры.НомерСмены = КассовыеСменыВызовСервера.ТекущийНомерСмены(ДопДанные.ОписаниеПКС);
		ОбщиеПараметры.НомерЧека = КассовыеСменыВызовСервера.ТекущийНомерЧека(ДопДанные.ОписаниеПКС) + 1;
	КонецЕсли;

	ОрганизацияЧека = ЧекККМ.КассаККМ.Владелец;
	АдресЭПЗадан = ДопДанные.Свойство("ПокупательEmail", ОбщиеПараметры.ПокупательEmail);
	// Шапка
	ОбщиеПараметры.ДокументОснование = ЧекККМ;
	ОбщиеПараметры.ТипРасчета = ?(ЧекККМ.ВидОперации=Перечисления.ВидыОперацийЧекККМ.Продажа,
		ПредопределенноеЗначение("Перечисление.ТипыРасчетаДенежнымиСредствами.ПриходДенежныхСредств"),
		ПредопределенноеЗначение("Перечисление.ТипыРасчетаДенежнымиСредствами.ВозвратДенежныхСредств"));
	ОбщиеПараметры.Кассир = ЧекККМ.Ответственный.Наименование;
	ОбщиеПараметры.Электронно = глЗначениеПеременной("НеПечататьФискальныйЧекПриОтправкеЭлектронного") И АдресЭПЗадан;
	ОбщиеПараметры.Отправляет1СSMS = Ложь;
	ОбщиеПараметры.Отправляет1СEmail = Не глЗначениеПеременной("ОтправлятьЭлектронныеЧекиПоEmailЧерезОФД") И АдресЭПЗадан;
	ОбщиеПараметры.ОрганизацияНазвание = ОрганизацияЧека.НаименованиеПолное;
	ОбщиеПараметры.ОрганизацияИНН = ОрганизацияЧека.ИНН;
	ОбщиеПараметры.ОрганизацияКПП = ОрганизацияЧека.КПП;
	ПорядокНалогообложения = Неопределено;
	ДопДанные.Свойство("ПорядокНалогообложения", ПорядокНалогообложения);
	ОбщиеПараметры.СистемаНалогообложения = МенеджерОборудованияКлиентСервер.СистемаНалогообложения
		(ОрганизацияЧека, ЧекККМ.Дата, ПорядокНалогообложения);  
	ОбщиеПараметры.СпособФорматоЛогическогоКонтроля = ТО.СпособФЛК;
	ОбщиеПараметры.ДопустимоеРасхождениеФорматоЛогическогоКонтроля = ТО.ДопустимоеРасхождениеФЛК;
	// Оплаты	
	ОплатыЧека = ЧекККМ.ПолучитьОбъект().ИтогиОплатПоТипам();
	СуммаТипаОплаты = ОплатыЧека.Получить(Перечисления.ТипыОплатЧекаККМ.Наличные);
	Если СуммаТипаОплаты <> 0 И СуммаТипаОплаты <> Неопределено Тогда
		СтрокаОплаты = Новый Структура();
		СтрокаОплаты.Вставить("ТипОплаты", ПредопределенноеЗначение("Перечисление.ТипыОплатыККТ.Наличные"));
		СтрокаОплаты.Вставить("Наименование", "Наличная оплата");
		СтрокаОплаты.Вставить("Сумма", СуммаТипаОплаты);
		ОбщиеПараметры.ТаблицаОплат.Добавить(СтрокаОплаты);
	КонецЕсли;
	СуммаТипаОплаты = ОплатыЧека.Получить(Перечисления.ТипыОплатЧекаККМ.ПлатежнаяКарта);
	Если СуммаТипаОплаты <> 0 И СуммаТипаОплаты <> Неопределено Тогда
		СтрокаОплаты = Новый Структура();
		СтрокаОплаты.Вставить("ТипОплаты", ПредопределенноеЗначение("Перечисление.ТипыОплатыККТ.Электронно"));
		СтрокаОплаты.Вставить("Наименование", "Платежная карта");
		СтрокаОплаты.Вставить("Сумма", СуммаТипаОплаты);
		ОбщиеПараметры.ТаблицаОплат.Добавить(СтрокаОплаты);
	КонецЕсли;
	СуммаТипаОплаты = ОплатыЧека.Получить(Перечисления.ТипыОплатЧекаККМ.БанковскийКредит);
	Если СуммаТипаОплаты <> 0 И СуммаТипаОплаты <> Неопределено Тогда
		СтрокаОплаты = Новый Структура();
		СтрокаОплаты.Вставить("ТипОплаты", ПредопределенноеЗначение("Перечисление.ТипыОплатыККТ.Электронно"));
		СтрокаОплаты.Вставить("Наименование", "Банковский кредит");
		СтрокаОплаты.Вставить("Сумма", СуммаТипаОплаты);
		ОбщиеПараметры.ТаблицаОплат.Добавить(СтрокаОплаты);
	КонецЕсли;
	// Товарные позиции
	Для Каждого СтрокаТовара Из ЧекККМ.Товары Цикл
		СтрокаЧека = МенеджерОборудованияКлиентСервер.ПараметрыФискальнойСтрокиЧека();
		
		// Обязательные поля
		СтрокаЧека.Наименование = СокрЛП(СтрокаТовара.Номенклатура.Наименование) + 
			ФормированиеПечатныхФорм.ПредставлениеСерий(СтрокаТовара, "ХарактеристикаНоменклатуры", "СерияНоменклатуры") +
			" " + Строка(СтрокаТовара.ЕдиницаИзмерения); // Наименование предмета расчета
		СтрокаЧека.Количество = СтрокаТовара.Количество; // Количество предмета расчета 
		СтрокаЧека.Цена = СтрокаТовара.Цена; // Цена без учета скидок и наценок
		СтрокаЧека.ЦенаСоСкидками = СтрокаТовара.Сумма / СтрокаТовара.Количество; // Цена с учетом скидок и наценок
		СтрокаЧека.Сумма = СтрокаТовара.Сумма; // Cтоимость предмета расчета с учетом скидок и наценок
		СтрокаЧека.СтавкаНДС = МенеджерОборудованияКлиентСервер.ПолучитьСтавкуНДСДляФискализацииЧека
			(СтрокаТовара.Номенклатура.СтавкаНДС, ПорядокНалогообложения); // Cтавка НДС в %
		СтрокаЧека.Штрихкод = СокрЛП(СтрокаТовара.ШтрихКод); // Штрихкод
		СтрокаЧека.НомерСекции = Склад.НомерСекции; // НомерСекции
		СтрокаЧека.НомерСтрокиТовара = СтрокаТовара.НомерСтроки;
		// Дополнительные реквизиты начиная с ФФД 1.1
		СтрокаЧека.ПризнакСпособаРасчета = ПредопределенноеЗначение("Перечисление.ПризнакиСпособаРасчета.ПередачаСПолнойОплатой");
		СтрокаЧека.ПризнакПредметаРасчета = МенеджерОборудованияВызовСервера.ОпределитьПризнакПредметаРасчета(СтрокаТовара.Номенклатура);
			
		ОбщиеПараметры.ПозицииЧека.Добавить(СтрокаЧека);
	КонецЦикла;

	МенеджерОборудованияКлиентСервер.ПровестиФорматоЛогическийКонтроль(ОбщиеПараметры);
	
КонецПроцедуры

Функция ФискализироватьЧек(ФУ, ДопДанные, Ответ, Отказ, ОшибкаТО)
	
	Ответ = "";
	Отказ = Ложь;
	Результат = Истина;
	
	ПараметрыЧека = МенеджерОборудованияКлиентСервер.ПараметрыОперацииФискализацииЧека();
	ПодготовитьДанныеДляФискализацииЧека(Ссылка, ПараметрыЧека, ДопДанные, ПолучитьСерверТО().ПолучитьМодель(ФУ));
	
	ОбъектДрайвера = Неопределено;
	ОбработкаОбслуживания = Неопределено;
	ПолучитьСерверТО().ПолучитьОбъектДрайвера(ФУ, ОбработкаОбслуживания, ОбъектДрайвера);
	
	ОшибкаТО = ОбработкаОбслуживания.ФискализироватьЧек(ОбъектДрайвера, ПараметрыЧека);
	Если ЗначениеЗаполнено(ОшибкаТО) Тогда
		Ответ = ОбъектДрайвера.ОписаниеОшибки;
		Отказ = Истина;
		Результат = Ложь;
	Иначе
		НомерСменыККМ = ОбъектДрайвера.ВыходныеПараметры[0];
		НомерЧекаККМ = ОбъектДрайвера.ВыходныеПараметры[1];
		ТекстЭлектронногоЧека = ПараметрыЧека.ТекстЭлектронногоЧека;
		
		НомерСмены = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(НомерСменыККМ);
		Если НомерСмены = 0 Тогда
			НомерСмены = 1;
		КонецЕсли;
		
		НомерЧека = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(НомерЧекаККМ);
		Если НомерЧека = 0 Тогда
			НомерЧека = 1;
		КонецЕсли;
		
		Если Результат И ДопДанные <> Неопределено И ТипЗнч(ДопДанные) = Тип("Структура") Тогда
			ПараметрыПередачи = Неопределено;
			Если ДопДанные.Свойство("ПараметрыПередачиВЕГАИС", ПараметрыПередачи) Тогда
				
				Чек = ПараметрыПередачи.Чек;
				
				ОписаниеОповещения = ОписаниеОповещенияЕГАИС("ПробитьЧекЗавершение", Чек);
				
				ЕстьАлкогольнаяПродукция = ИнтеграцияЕГАИСУТ.ЕстьМаркируемаяАлкогольнаяПродукция(Чек.Ссылка, "Товары");
				
				Если ЕстьАлкогольнаяПродукция Тогда
					
					ПараметрыОперации = Новый Структура;
					ПараметрыОперации.Вставить("ОписаниеОповещения",                ОписаниеОповещения);
					ПараметрыОперации.Вставить("ЕстьАлкогольнаяПродукция",          ЕстьАлкогольнаяПродукция);
					ПараметрыОперации.Вставить("НомерСмены",                        НомерСмены);
					ПараметрыОперации.Вставить("НомерЧека",                         НомерЧека);
					ПараметрыОперации.Вставить("СерийныйНомер",                     Чек.КассаККМ.СерийныйНомер);
					ПараметрыОперации.Вставить("ПродолжитьПечать",                  Истина);
					ПараметрыОперации.Вставить("ОписаниеОшибки",                    "");
					ПараметрыОперации.Вставить("Обработка",                         ОбработкаОбслуживания);
					ПараметрыОперации.Вставить("Объект",                            ОбъектДрайвера);
					ПараметрыОперации.Вставить("НомерЧека",                         НомерЧека);
					ПараметрыОперации.Вставить("Чек",                               Чек);
					ПараметрыОперации.Вставить("СуммаНал",                          ДопДанные.СуммаНал);
					ПараметрыОперации.Вставить("СуммаБезНал",                       ДопДанные.СуммаБезНал);
					ПараметрыОперацииЕГАИС = Новый Структура;
					ПараметрыОперацииЕГАИС.Вставить("НомерСмены",                   НомерСмены);
					ПараметрыОперацииЕГАИС.Вставить("НомерЧека",                    НомерЧека);
					ПараметрыОперацииЕГАИС.Вставить("СерийныйНомер",                Чек.КассаККМ.СерийныйНомер);
					
					ИнтеграцияЕГАИСКлиент.ПередатьНемедленно(
						Чек.Ссылка,
						ПредопределенноеЗначение("Перечисление.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ПередайтеДанные"),
						ПараметрыОперацииЕГАИС,
						ОписаниеОповещенияЕГАИС("ПослеПередачиЧекаЕГАИС", Чек, ПараметрыОперации),
						Чек.Ссылка.УникальныйИдентификатор());
					
					ПараметрыВыполнения = ПараметрыОперации;
					Если Не ПараметрыВыполнения.ПродолжитьПечать Тогда
						МассивСтрокДляПечати = Новый Массив;
						МассивСтрокДляПечати.Добавить("Не удалось сформировать электронную подпись чека в ЕГАИС!");
						МассивСтрокДляПечати.Добавить(ПараметрыВыполнения.ОписаниеОшибки);
						ОбработкаОбслуживания.НапечататьСтроки(ОбъектДрайвера, МассивСтрокДляПечати, 37);
						
						ПараметрыВыполнения.Вставить("ПараметрыВозвратаИзЕГАИС", ПараметрыОперации//ПараметрыВыполнения
							);
						
						ПараметрыВыполнения.НомерЧека = НомерЧека + 1000000;
						
						ИнтеграцияЕГАИСКлиент.ПередатьНемедленно(
							Чек.Ссылка,
							ПредопределенноеЗначение("Перечисление.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОтменитеОперацию"),
							ПараметрыОперацииЕГАИС,
							ОписаниеОповещенияЕГАИС("ПослеПередачиЧекаЕГАИС", Чек, ПараметрыВыполнения),
							Чек.Ссылка.УникальныйИдентификатор());
						
						ПараметрыВыполнения.ПродолжитьПечать = Ложь;
						
						
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецЕсли

мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");
мАннулировать                   = Ложь;
мПострочнаяПечать               = Ложь;
мПараметрыСвязиСтрокТЧ          = Новый Соответствие;

мПараметрыСвязиСтрокТЧ.Вставить("Товары", Новый Структура("СвободныйКлюч, ФлагМодификации", Неопределено, Ложь));
мПараметрыСвязиСтрокТЧ.Вставить("СоставНабора", Новый Структура("СвободныйКлюч, ФлагМодификации", Неопределено, Ложь));

УказаниеСкладов     = Константы.УказаниеСкладовВТабличнойЧастиДокументов.Получить();
мУказаниеСкладовВТЧ = (УказаниеСкладов = Перечисления.ВариантыУказанияСкладовВТабличнойЧастиДокументов.ДляДокументовПоступленияРеализации)
                      Или (УказаниеСкладов = Перечисления.ВариантыУказанияСкладовВТабличнойЧастиДокументов.ДляДокументовПоступления);

мОрганизацияОблагаетсяЕНВД = Неопределено;