
///////////////////////////////////////////////////////////////////////////////
// ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		Объект.Организация = Справочники.Организации.ОрганизацияПоУмолчанию();
	КонецЕсли;
	
	Если Не Параметры.Ключ.Пустая() Тогда
		
		Если ТипЗнч(Параметры.Ключ) = Тип("ДокументСсылка.ЭлектронныйДокументИсходящий") Тогда
			ПрисоединенныйФайлСсылка = ЭлектронныеДокументыСлужебный.ПрисоединенныйФайл(Параметры.Ключ, , Объект.ВидЭД <> Перечисления.ВидыЭД.ПроизвольныйЭД);
			Если Объект.ВидЭД <> Перечисления.ВидыЭД.ПроизвольныйЭД И Не ЗначениеЗаполнено(ПрисоединенныйФайлСсылка) Тогда
				Отказ = Истина;
				Возврат;
			КонецЕсли;
			ЗаполнитьИнформациюОДокументе();
		КонецЕсли;
		
		Заголовок = ЭлектронныеДокументыСлужебный.ПолучитьПредставлениеЭД(Объект.Ссылка);
		СопроводительнаяЗаписка = ПрисоединенныйФайлСсылка.ДополнительнаяИнформация;
	Иначе
		
		ДокументОснование = Неопределено;
		Если Параметры.Свойство("ДокументОснование", ДокументОснование) И ЗначениеЗаполнено(ДокументОснование) Тогда
			МассивОснований = Новый Массив;
			МассивОснований.Добавить(ДокументОснование);
			ЗаполнитьДокументыОснования(МассивОснований);
		КонецЕсли;
		
		Заголовок = НСтр("ru = 'Произвольный документ (создание)'");
		Элементы.ГруппаШапки.ОтображатьЗаголовок = Ложь;
		
		Объект.ТипДокумента = Перечисления.ТипыЭД.Прочее;
		Объект.ВидЭД = Перечисления.ВидыЭД.ПроизвольныйЭД;
		Объект.ВерсияРегламентаЭДО = Перечисления.ВерсииРегламентаОбмена1С.Версия10;
		Объект.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПервичныйЭД;
		Объект.СостояниеЭДО = Перечисления.СостоянияВерсийЭД.НеСформирован;
		Объект.ДатаИзмененияСостоянияЭДО = ТекущаяДатаСеанса();
		Объект.УникальныйИД = Новый УникальныйИдентификатор;
		Если НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
			Объект.Контрагент = ЭлектронныеДокументыПовтИсп.ПолучитьПустуюСсылку("Контрагенты");
		КонецЕсли;
		
		ПриИзмененииКлючевыхРеквизитов();
		
	КонецЕсли;
	
	УстановитьУсловноеОформление();
	ОформитьКолонкуПодписант = Истина;
	Если ЗначениеЗаполнено(ПрисоединенныйФайлСсылка) Тогда
		СвойстваФайлаЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПрисоединенныйФайлСсылка, "НаправлениеЭД");
		Если СвойстваФайлаЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани Тогда
			ОформитьКолонкуПодписант = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры.МассивОтпечатков) Тогда
		СсылкаНаМассивОтпечатков = ПоместитьВоВременноеХранилище(Параметры.МассивОтпечатков, УникальныйИдентификатор);
	ИначеЕсли ЭлектронныеДокументыСлужебныйВызовСервера.ВыполнятьКриптооперацииНаСервере() Тогда
		МассивСтруктурСертификатов = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьМассивСтруктурСертификатов(Истина);
		СсылкаНаМассивОтпечатков = ПоместитьВоВременноеХранилище(МассивСтруктурСертификатов, УникальныйИдентификатор);
	КонецЕсли;
	
	// Чтение настроек их хранилища настроек.
	ОтключитьВыводДерева     = Ложь;
	ОтключитьВыводДопДанных  = Истина;
	ОтключитьВыводКопияВерна = Истина;
	ОтключитьТранслитерацию  = Ложь;
	
	Настройки = ХранилищеСистемныхНастроек.Загрузить("Документ.ЭлектронныйДокументИсходящий.Форма.ФормаПросмотраЭД/ТекущиеДанные");
	Если Настройки <> Неопределено Тогда
		Если Не Настройки.Получить("ОтключитьВыводДерева") = Неопределено Тогда
			ОтключитьВыводДерева = Настройки.Получить("ОтключитьВыводДерева");
		КонецЕсли;
		Если Не Настройки.Получить("ОтключитьВыводДопДанных") = Неопределено Тогда
			ОтключитьВыводДопДанных = Настройки.Получить("ОтключитьВыводДопДанных");
		КонецЕсли;
		Если Не Настройки.Получить("ОтключитьВыводКопияВерна") = Неопределено Тогда
			ОтключитьВыводКопияВерна = Настройки.Получить("ОтключитьВыводКопияВерна");
		КонецЕсли;
		Если Не Настройки.Получить("ОтключитьТранслитерацию") = Неопределено Тогда
			ОтключитьТранслитерацию = Настройки.Получить("ОтключитьТранслитерацию");
		КонецЕсли;
	КонецЕсли;
	
	Элементы.КомандаОтображатьДерево.Пометка                   = Не ОтключитьВыводДерева;
	Элементы.КомандаОтображатьДополнительнуюИнформацию.Пометка = Не ОтключитьВыводДопДанных;
	Элементы.КомандаОтображатьКопияВерна.Пометка               = Не ОтключитьВыводКопияВерна;
	
	ЭтоПЭД = Объект.ВидЭД = Перечисления.ВидыЭД.ПроизвольныйЭД;
	
	Элементы.КомандаОтображатьДополнительнуюИнформацию.Видимость = Не ЭтоПЭД;
	Элементы.КомандаОтображатьКопияВерна.Видимость               = Не ЭтоПЭД;
	
	УстановитьВидимость();
	
	ИнициализацияДанныхНаСервере(Отказ);
	ИнициализацияДереваНаСервере();
		
	Если Параметры.ТолькоПросмотр Тогда
		Элементы.ГруппаКомандЕще.Видимость = Ложь;
		Элементы.ОсновныеКоманды.Видимость = Ложь;
	КонецЕсли;
	
	ТребуетсяПодпись = НеобходимоПодписать();
	ЗаполнитьТаблицуЭП();
	ОбновитьСтатусЭД();
	ПерезаполнитьКомментарии();
	ВывестиДокументыУчета();
	
	Если Объект.ВидЭД = Перечисления.ВидыЭД.ПроизвольныйЭД Тогда
		ОбновитьДанныеОВложении();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если Не ЗначениеЗаполнено(СсылкаНаМассивОтпечатков)
		И Не ЭлектронныеДокументыСлужебныйВызовСервера.ВыполнятьКриптооперацииНаСервере() Тогда
		Попытка
			МассивСтруктурСертификатов = ЭлектроннаяЦифроваяПодписьКлиент.ПолучитьМассивСтруктурСертификатов(Истина);
		Исключение
			МассивСтруктурСертификатов = Новый Массив;
		КонецПопытки;
		СсылкаНаМассивОтпечатков = ПоместитьВоВременноеХранилище(МассивСтруктурСертификатов, УникальныйИдентификатор);
	КонецЕсли;
	
	УстановитьТекущуюСтрокуДерева(ПрисоединенныйФайлСсылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновитьСостояниеЭД" Тогда
		
		ОбработатьОповещение = Истина;
		
		ЭлектронныеДокументыСлужебныйКлиент.ПриОбработкеОповещенияФормыПросмотраЭД(ЭтаФорма, Параметр, ОбработатьОповещение);
		
		Если Не ОбработатьОповещение Тогда
			Возврат;
		КонецЕсли;
		
		ОбработатьОбновлениеСостоянияЭД();
		
	ИначеЕсли ИмяСобытия = "ОповеститьОСозданииУведомления" И Параметр = ПрисоединенныйФайлСсылка Тогда
		ПоместитьТекстУточненияВОбъект(ТекстУточнения);
		СтатусОтклонен = Истина;
		ИзменитьСтатусОтклонить();
		
		ОбработатьОбновлениеСостоянияЭД();
		
	ИначеЕсли ИмяСобытия = "ЭлектронныйДокументИсходящий_ПодборДокументаУчета" Тогда
		
		ПриИзмененииДокументовОснований();
				
	ИначеЕсли ИмяСобытия = "ПроведенаПроверкаЭП" Тогда
		Для Каждого ЭД Из Параметр Цикл
			Если ЭД = ПрисоединенныйФайлСсылка Тогда
				ОбновитьОтображениеДанных();
				ТекущаяСтрока = Элементы.ТаблицаЭП.ТекущиеДанные;
				ЗаполнитьТаблицуЭП();
				Если ТекущаяСтрока <> Неопределено Тогда
					Элементы.ТаблицаЭП.ТекущаяСтрока = ТаблицаЭП[ТекущаяСтрока.НомерСтроки-1].ПолучитьИдентификатор();
				КонецЕсли;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ВывестиДокументыУчета();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если Объект.ВидЭД = ПредопределенноеЗначение("Перечисление.ВидыЭД.ПроизвольныйЭД") Тогда
		ДанныеФайла = ДанныеФайлаВложения(АдресВременногоХранилищаВложения, ПрисоединенныйФайлСсылка, УникальныйИдентификатор);
		Если ДанныеФайла <> Неопределено И ДанныеФайла.ФайлРедактируется Тогда
			
			Отказ = Истина;
			ПроверитьЗахватНаРедактирование(Отказ);
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если Объект.ВидЭД = Перечисления.ВидыЭД.ПроизвольныйЭД Тогда
		Если НЕ ЕстьСоглашение(ТекущийОбъект) Тогда
			Отказ = Истина;
		ИначеЕсли ЗначениеЗаполнено(Объект.Ссылка) Тогда
			// Если вложение записано, то при изменении перечисленных ниже реквизитов
			// надо принудительно перезаполнить их во вложении.
			ОбновитьРеквизитыВложения = (ТекущийОбъект.Контрагент <> Объект.Ссылка.Контрагент
				ИЛИ ТекущийОбъект.Организация <> Объект.Ссылка.Организация
				ИЛИ ТекущийОбъект.Номер <> Объект.Ссылка.Номер
				ИЛИ ТекущийОбъект.Дата <> Объект.Ссылка.Дата
				ИЛИ ТекущийОбъект.Текст <> Объект.Ссылка.Текст);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Если Объект.ВидЭД = Перечисления.ВидыЭД.ПроизвольныйЭД Тогда
		// До записи документа вложение хранится во временном хранилище, после записи документа
		// создается новый элемент справочника ЭДПрисоединенныеФайлы, в который записывается данные из временного хранилища.
		ДанныеВложенияОбновлены = ДобавитьВложениеИзВременногоХранилищаПослеЗаписиДокумента();
		
		Если ОбновитьРеквизитыВложения И НЕ ДанныеВложенияОбновлены Тогда
			ДобавитьОбновитьПрисоединенныеФайлыКСообщению();
		КонецЕсли;
		Заголовок = ЭлектронныеДокументыСлужебный.ПолучитьПредставлениеЭД(Объект.Ссылка);
		ВыполнитьОбработкуОповещенияНаСервере();
		ЗаполнитьТаблицуЭП();
		
		СтруктураПараметров = Новый Структура("ДополнительнаяИнформация", СопроводительнаяЗаписка);
		ИзменитьЗначенияРеквизитовНаСервере(ПрисоединенныйФайлСсылка, СтруктураПараметров);
	КонецЕсли;
	
	ЗаполнитьИнформациюОДокументе();
	
	УстановитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Если Объект.ВидЭД = ПредопределенноеЗначение("Перечисление.ВидыЭД.ПроизвольныйЭД") Тогда
		Оповестить("ОбновитьСостояниеЭД");
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ОбработчикиСобытийПолейФормы

&НаКлиенте
Процедура ПричиныОтклоненияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ОткрытьЗначение(Элемент.ТекущиеДанные.ПричинаОтклонения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектДополнительнаяИнформацияПриИзменении(Элемент)
	
	ОбъектДополнительнаяИнформацияПриИзмененииСервер();
	ЭтаФорма.Модифицированность = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ОбъектДополнительнаяИнформацияПриИзмененииСервер()
	
	СтруктураПараметров = Новый Структура("ДополнительнаяИнформация", СопроводительнаяЗаписка);
	ИзменитьЗначенияРеквизитовНаСервере(ПрисоединенныйФайлСсылка, СтруктураПараметров);
	
КонецПроцедуры

&НаКлиенте
Процедура ИнформацияОДокументеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура("Ключ", Объект.Ссылка);
	ОткрытьФорму("Документ.ЭлектронныйДокументИсходящий.Форма.ФормаДокумента", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстВложениеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДанныеФайла = ДанныеФайлаВложения(АдресВременногоХранилищаВложения, ПрисоединенныйФайлСсылка, УникальныйИдентификатор);
	
	Если НЕ ПроверитьДействиеРазрешено(ДанныеФайла) Тогда
		Возврат;
	КонецЕсли;
	
	ФайлРедактируется = ДанныеФайла.ФайлРедактируется И ДанныеФайла.ФайлРедактируетТекущийПользователь;
	ПрисоединенныеФайлыКлиент.ОткрытьФайл(ДанныеФайла, ФайлРедактируется);

КонецПроцедуры

&НаКлиенте
Процедура ГиперСсылкаТекстДокументИБНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекстДокументИБНажатие();
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстПодборНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФормуПодбора();
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ОбработчикиСобытийПолейТаблицыЭП

&НаКлиенте
Процедура ЭППриАктивизацииСтроки(Элемент)
	
	Если Элементы.ТаблицаЭП.ТекущиеДанные <> Неопределено Тогда
		Элементы.ДоверятьСертификату.Доступность = Элементы.ТаблицаЭП.ТекущиеДанные.ОтсутствуетВСписке;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЭПВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДобавитьСертификатВДоверенные(Элемент.ТекущиеДанные);
	Если Элемент.ТекущиеДанные <> Неопределено И ЗначениеЗаполнено(Элемент.ТекущиеДанные.Отпечаток) И НЕ Элемент.ТекущиеДанные.ОтсутствуетВСписке Тогда
		ПоказатьСертификат(Элемент.ТекущиеДанные.НомерСтроки, Элемент.ТекущиеДанные.Отпечаток);
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ОбработчикиКомандФормы

&НаКлиенте
Процедура ПерезаполнитьДокумент(Команда)
	
	ЭлектронныеДокументыКлиент.ПерезаполнитьДокумент(Объект.Ссылка, ЭтаФорма, , ПрисоединенныйФайлСсылка);
	
КонецПроцедуры

&НаКлиенте
Процедура Отклонить(Команда)
	
	ОтклонитьАннулироватьЭД(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьДокумент(Команда)
	
	Модифицированность = Ложь;
	ТекстВопроса = НСтр("ru = 'Не рекомендуется выбирать документ отражения в учете вручную. Продолжить?'");
		
	Результат = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
	Если Результат = КодВозвратаДиалога.Да Тогда
		Подсказка = НСтр("ru = 'Укажите документ отражения в учете'");
		ВвестиЗначение(Объект.Ссылка, Подсказка) 
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьЭДНаДиск(Команда)
	
	ДанныеФайла = ПрисоединенныеФайлыКлиент.ПолучитьДанныеФайла(ПрисоединенныйФайлСсылка, УникальныйИдентификатор);
	ДанныеФайла.ИмяФайла = НаименованиеПрисоединенногоФайла(ПрисоединенныйФайлСсылка);
	ПрисоединенныеФайлыКлиент.СохранитьВместеСЭЦП(ПрисоединенныйФайлСсылка, ДанныеФайла, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ДоверятьЭтомуСертификату(Команда)
	
	ДобавитьСертификатВДоверенные(Элементы.ТаблицаЭП.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ЖурналСобытийЭДО(Команда)
	
	ПараметрыФормы = Новый Структура;
	
	Отбор = Новый Структура;
	Отбор.Вставить("ПрисоединенныйФайл", ПрисоединенныйФайлСсылка);
	
	ПараметрыФормы.Вставить("Отбор", Отбор);
	ПараметрыФормы.Вставить("РежимОткрытияОкна", РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	ОткрытьФорму("РегистрСведений.ЖурналСобытийЭД.ФормаСписка", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСертификат(Команда)
	
	Если ТаблицаЭП.Количество() > 0 Тогда
		Если Элементы.ТаблицаЭП.ТекущиеДанные <> Неопределено Тогда
			ПоказатьСертификат(Элементы.ТаблицаЭП.ТекущиеДанные.НомерСтроки, Элементы.ТаблицаЭП.ТекущиеДанные.Отпечаток);
		Иначе
			ОчиститьСообщения();
			ТекстОшибки = НСтр("ru = 'Выберите сертификат в списке установленных подписей.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПодписи(Команда)
	
	ОчиститьСообщения();
	
	Если ЗначениеЗаполнено(ПрисоединенныйФайлСсылка) Тогда
		ВыполнятьКриптооперацииНаСервере = ЭлектронныеДокументыСлужебныйВызовСервера.ВыполнятьКриптооперацииНаСервере();
		ВторойТитул = ВторойТитулДокумента(ПрисоединенныйФайлСсылка);
		Если ЗначениеЗаполнено(ВторойТитул) Тогда
			Если ВыполнятьКриптооперацииНаСервере Тогда
				ЭлектронныеДокументыСлужебныйВызовСервера.ОпределитьСтатусыПодписей(ВторойТитул, Истина);
			Иначе 
				ЭлектронныеДокументыСлужебныйКлиент.ОпределитьСтатусыПодписей(ВторойТитул);
			КонецЕсли;
		КонецЕсли;
		Если ВыполнятьКриптооперацииНаСервере Тогда
			ЭлектронныеДокументыСлужебныйВызовСервера.ОпределитьСтатусыПодписей(ПрисоединенныйФайлСсылка, Истина);
		Иначе 
			ЭлектронныеДокументыСлужебныйКлиент.ОпределитьСтатусыПодписей(ПрисоединенныйФайлСсылка);
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УтвердитьЭД(Команда)
	
	ОчиститьСообщения();
	
	МассивЭД = Новый Массив;
	МассивЭД.Добавить(ПрисоединенныйФайлСсылка);
	
	МассивДокументов = ДокументыОснования(Объект.Ссылка);
	
	ЭлектронныеДокументыСлужебныйКлиент.УтвердитьЭД(МассивДокументов, МассивЭД);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодписатьОтправитьЭД(Команда)
	
	Элементы.КомандаПодписатьОтправить.Доступность = Ложь;
	
	ПодключитьОбработчикОжидания("СформироватьПодписатьОтправитьЭД", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПовторно(Команда)
	
	ЭлектронныеДокументыКлиент.ОтправитьПовторноЭД(Объект.Ссылка, ПрисоединенныйФайлСсылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодписатьЭД(Команда)
	
	Элементы.КомандаПодписать.Доступность = Ложь;
	
	ПодключитьОбработчикОжидания("СформироватьПодписатьОтправитьЭД", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура АннулироватьЭД(Команда)
	
	ОтклонитьАннулироватьЭД();
	
КонецПроцедуры

&НаКлиенте
Процедура ПринятьАннулирование(Команда)
	
	ОтклонитьАннулирование = Ложь;
	ОбработатьПредложениеОбАннулировании(ОтклонитьАннулирование);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтклонитьАннулирование(Команда)
	
	ОтклонитьАннулирование = Истина;
	ОбработатьПредложениеОбАннулировании(ОтклонитьАннулирование);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьКомментарий(Команда)
	
	Если ПустаяСтрока(Комментарий) Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура("Описание", Комментарий);
	ИзменитьЗначенияРеквизитовНаСервере(ПрисоединенныйФайлСсылка, СтруктураПараметров);
	Комментарий = "";
	
	ПерезаполнитьКомментарии();
	
КонецПроцедуры

&НаКлиенте
Процедура Перенаправить(Команда)
	
	ОбработатьПеренаправлениеЭД();
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьЗаписку(Команда)
	
	ОчиститьЗапискуСервер();
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьЗапискуСервер()
	
	Если ЗначениеЗаполнено(СопроводительнаяЗаписка) Тогда
		СтруктураПараметров = Новый Структура("ДополнительнаяИнформация", "");
		ИзменитьЗначенияРеквизитовНаСервере(ПрисоединенныйФайлСсылка, СтруктураПараметров);
		
		СопроводительнаяЗаписка = "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьДополнительнуюИнформацию(Команда)
	
	ОтключитьВыводДопДанных = Не ОтключитьВыводДопДанных;
	ОбновитьВидимостьДополнительнойИнформации();
	ОбновитьОтображениеДанных();
	Элементы.КомандаОтображатьДополнительнуюИнформацию.Пометка = Не ОтключитьВыводДопДанных;
	ИзменитьВидимостьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьДерево(Команда)
	
	ОтображатьДеревоНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьОбластьКопияВерна(Команда)
	
	ОтключитьВыводКопияВерна = Не ОтключитьВыводКопияВерна;
	ОбновитьВидимостьДополнительнойИнформации();
	ОбновитьОтображениеДанных();
	Элементы.КомандаОтображатьКопияВерна.Пометка = Не ОтключитьВыводКопияВерна;
	ИзменитьВидимостьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПроизвольныйДокумент(Команда)
	
	ЭлектронныеДокументыСлужебныйКлиент.СоздатьПроизвольныйЭДНаОсновании(Объект.Ссылка, Новый Структура("Источник", ЭтаФорма));
	
КонецПроцедуры

&НаКлиенте
Процедура Завершить(Команда)
	
	ВводСтрокиЗаголовок = НСтр("ru = 'Укажите причины завершения документооборота'");
	Результат = Неопределено;
	ВвестиСтроку(Результат, ВводСтрокиЗаголовок,, Истина);
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗавершитьЭДОСервере(Результат);
	ОбновитьСостояниеЭД();
	
КонецПроцедуры

&НаКлиенте
Процедура Редактировать(Команда)
	
	Если Модифицированность Тогда 
		
		ТекстВопроса = НСтр("ru = 'Для продолжения операции необходимо записать документ.
		|Записать документ?'");
		
		Результат = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
		Если Результат = КодВозвратаДиалога.Да Тогда
			Записать();
			РедактироватьЗавершить();
		КонецЕсли;
		
	Иначе
		РедактироватьЗавершить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьЗавершить()

	ДанныеФайла = ДанныеФайлаВложения(АдресВременногоХранилищаВложения, ПрисоединенныйФайлСсылка, УникальныйИдентификатор);
	
	Если НЕ ПроверитьДействиеРазрешено(ДанныеФайла) Тогда
		Возврат;
	КонецЕсли;
	
	Если (ДанныеФайла.ФайлРедактируется И НЕ ДанныеФайла.ФайлРедактируетТекущийПользователь)
		ИЛИ ДанныеФайла.Зашифрован ИЛИ ДанныеФайла.ПодписанЭЦП Тогда
		// Файл может быть изменен в другом сеансе.
		Если ДанныеФайла.Ссылка <> Неопределено Тогда
			ОповеститьОбИзменении(ДанныеФайла.Ссылка);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если НЕ ДанныеФайла.ФайлРедактируется Тогда
		ЗанятьФайлДляРедактированияСервер(ДанныеФайла);
		
		Если ДанныеФайла.Ссылка = Неопределено Тогда
			АдресВременногоХранилищаВложения = ПоместитьВоВременноеХранилище(ДанныеФайла, УникальныйИдентификатор);
		Иначе
			ОповеститьОбИзменении(ДанныеФайла.Ссылка);
		КонецЕсли;
		ИзменитьВидимостьДоступностьНаСервере();
	КонецЕсли;
	
	ПрисоединенныеФайлыКлиент.ОткрытьФайл(ДанныеФайла, Истина);
	ВложениеРедактируется = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакончитьРедактирование(Команда)
	
	ДанныеФайла = ДанныеФайлаВложения(АдресВременногоХранилищаВложения, ПрисоединенныйФайлСсылка, УникальныйИдентификатор);
	
	Если НЕ ПроверитьДействиеРазрешено(ДанныеФайла)
		ИЛИ (НЕ ДанныеФайла.ФайлРедактируется ИЛИ НЕ ДанныеФайла.ФайлРедактируетТекущийПользователь) Тогда
		Возврат;
	КонецЕсли;
	
	ИнформацияОФайле = Новый Структура;
	Если ПрисоединенныеФайлыСлужебныйКлиент.ПоместитьРедактируемыйФайлНаДискеВХранилище(ДанныеФайла, ИнформацияОФайле, УникальныйИдентификатор) Тогда
		ЗакончитьРедактированиеВыполненоПомещение(ИнформацияОФайле, ДанныеФайла);
	КонецЕсли;
	УдалитьВременныйФайлВложения(ДанныеФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура Освободить(Команда)
	
	ОсвободитьФайл();
	ИзменитьВидимостьДоступностьНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВложениеИзФайлаНаДиске(Команда)
	
	ВыбранныйФайл = "";
	АдресВременногоХранилища = "";
	
	Если ПоместитьФайл(АдресВременногоХранилища, "", ВыбранныйФайл, Истина, УникальныйИдентификатор) Тогда
		
		СтруктураФайла  = Новый Структура;
		ФайлКлиента = Новый Файл(ВыбранныйФайл);
		РабочийКаталог = Строка(УникальныйИдентификатор);
		РабочийКаталог = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(РабочийКаталог, "");
		РабочийКаталог = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(РабочийКаталог);
		
		СтруктураФайла  = Новый Структура;
		СтруктураФайла = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ВыбранныйФайл);
		
		Если НЕ ОтключитьТранслитерацию Тогда
			СтруктураФайла.Имя              = СтрокаЛатиницей(СтруктураФайла.Имя);
			СтруктураФайла.Расширение       = СтрокаЛатиницей(СтруктураФайла.Расширение);
			СтруктураФайла.ИмяБезРасширения = СтрокаЛатиницей(СтруктураФайла.ИмяБезРасширения);
		КонецЕсли;
		
		Если СтрДлина(СтруктураФайла.ИмяБезРасширения) > 200 Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"Не удалось прикрепить выбранный файл по причине слишком длинного имени.
				|Сократите имя файла максимум до 200 символов и приложите его к документу повторно.");
			
			УдалитьИзВременногоХранилища(АдресВременногоХранилища);
			Возврат;
			
		КонецЕсли;
		
		СтруктураФайла.Вставить("ИмяФайла",                           СтруктураФайла.Имя);
		СтруктураФайла.Вставить("Наименование",                       СтруктураФайла.ИмяБезРасширения);
		СтруктураФайла.Вставить("Расширение",                         ОбщегоНазначенияКлиентСервер.РасширениеБезТочки(СтруктураФайла.Расширение));
		СтруктураФайла.Вставить("Размер",                             ФайлКлиента.Размер());
		СтруктураФайла.Вставить("Редактирует",                        Неопределено);
		СтруктураФайла.Вставить("ПодписанЭЦП",                        Ложь);
		СтруктураФайла.Вставить("Зашифрован",                         Ложь);
		СтруктураФайла.Вставить("ФайлРедактируется",                  Ложь);
		СтруктураФайла.Вставить("ОтносительныйПуть",                  РабочийКаталог);
		СтруктураФайла.Вставить("СсылкаНаДвоичныеДанныеФайла",        АдресВременногоХранилища);
		СтруктураФайла.Вставить("ДатаМодификацииУниверсальная",       ФайлКлиента.ПолучитьУниверсальноеВремяИзменения());
		СтруктураФайла.Вставить("ФайлРедактируетТекущийПользователь", Ложь);
		
		АдресВременногоХранилищаВложения = ПоместитьВоВременноеХранилище(СтруктураФайла, УникальныйИдентификатор);
		ОбновитьДанныеОВложении();
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВложениеИзПрисоединенныхФайлов(Команда)
	
	ПрисоединенныеФайлыКлиент.ОткрытьФормуВыбораФайлов(Объект.ДокументыОснования[0].ДокументОснование, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТранслитироватьИмяФайла(Команда)
	
	ОтключитьТранслитерацию = Не ОтключитьТранслитерацию;
	ОбновитьВидимостьТранслитерации();
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьВидимость()
	
	ЭтоПЭД = (Объект.ВидЭД = Перечисления.ВидыЭД.ПроизвольныйЭД);
	
	Элементы.ТребуетсяПодтверждение.Видимость = ЭтоПЭД;
	
	ТекущееСостояниеЭДО = Объект.СостояниеЭДО;
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ТекущееСостояниеЭДО = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Ссылка, "СостояниеЭДО");
	КонецЕсли;
	
	СостоянияПодготовкиЭД = Новый Массив;
	СостоянияПодготовкиЭД.Добавить(Перечисления.СостоянияВерсийЭД.НеСформирован);
	СостоянияПодготовкиЭД.Добавить(Перечисления.СостоянияВерсийЭД.НаПодписи);
	Элементы.ТребуетсяПодтверждение.ТолькоПросмотр = (СостоянияПодготовкиЭД.Найти(ТекущееСостояниеЭДО) = Неопределено);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НаименованиеПрисоединенногоФайла(ФайлЭлектронногоДокумента)
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ФайлЭлектронногоДокумента, "НаименованиеФайла");
	
КонецФункции

&НаСервере
Процедура ОтображатьДеревоНаСервере()
	
	ОтключитьВыводДерева = Не ОтключитьВыводДерева;
	Элементы.КомандаОтображатьДерево.Пометка = Не ОтключитьВыводДерева;
	ИнициализацияДереваНаСервере();
	ИзменитьВидимостьДоступностьНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИнформациюОДокументе()
	
	ИнформацияОДокументе = ?(Объект.ВидЭД = Перечисления.ВидыЭД.ПроизвольныйЭД, Строка(Объект.ТипДокумента) + ", ", "")
				+ Объект.Контрагент
				+ ?(ЗначениеЗаполнено(Объект.ДоговорКонтрагента), ", " + Объект.ДоговорКонтрагента, "")
				+ ", " + Объект.Организация;

КонецПроцедуры

&НаКлиенте
Процедура СформироватьПодписатьОтправитьЭД()
	
	ВыполнитьОперацию = Истина;
	
	Если Модифицированность Тогда
		
		ВыполнитьОперацию = Ложь;
		
		ТекстВопроса = НСтр("ru='Для продолжения операции необходимо записать документ.
		                        |Записать документ.'");
		
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет);
		
		Если Ответ = КодВозвратаДиалога.Да Тогда
			Записать();
			ВыполнитьОперацию = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВыполнитьОперацию Тогда
		
		ОчиститьСообщения();
		
		МассивЭД = Новый Массив;
		МассивЭД.Добавить(ПрисоединенныйФайлСсылка);
		
		МассивДокументов = ДокументыОснования(Объект.Ссылка);
		
		ЭлектронныеДокументыКлиент.СформироватьПодписатьОтправитьЭД(МассивДокументов, МассивЭД);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСостояниеЭД()
	
	ДокументыУчета = Новый Массив;
	ДокументыУчета.Добавить(Объект.Ссылка);
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("ДокументыУчета", ДокументыУчета);
	
	Оповестить("ОбновитьСостояниеЭД", ПараметрыОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОбновлениеСостоянияЭД()
	
	ВыполнитьОбработкуОповещенияНаСервере();
	ОбновитьОтображениеДанных();
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстДокументИБНажатие()
	
	ЭлектронныйДокумент = Объект;
	МассивДокументов = МассивДокументовУчета(ЭлектронныйДокумент);
		
	КоличествоДокументов = МассивДокументов.Количество();
			
	Если КоличествоДокументов = 1 Тогда
		ОткрытьЗначение( МассивДокументов[0]);
	Иначе
		ОткрытьФормуПодбора();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуПодбора()
	
	ПараметрыФормы = Новый Структура("ЭлектронныйДокумент", Объект.Ссылка);
	ОткрытьФорму("Документ.ЭлектронныйДокументИсходящий.Форма.ПодборДокументовУчета", ПараметрыФормы);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция МассивДокументовУчета(ЭлектронныйДокумент)
	
	Возврат ЭлектронныйДокумент.ДокументыОснования.Выгрузить().ВыгрузитьКолонку("ДокументОснование");
	
КонецФункции

&НаСервере
Процедура ВывестиДокументыУчета()
	
	МассивДокументов = МассивДокументовУчета(Объект);
	КоличествоДокументов = МассивДокументов.Количество();
	
	ОтображатьПодбор = Ложь;
	Элементы.ТекстДокументИБ.Заголовок = НСтр("ru = 'Документ учета'");
	
	Если КоличествоДокументов = 0 Тогда
		
		Если Объект.ВидЭД = Перечисления.ВидыЭД.КаталогТоваров Тогда
			ПредставлениеДокументов = НСтр("ru = 'Сопоставить номенклатуру'");
			Элементы.ТекстДокументИБ.Заголовок = НСтр("ru = 'Настройка ЭДО'");
		ИначеЕсли Объект.ВидЭД = Перечисления.ВидыЭД.ПроизвольныйЭД Тогда
			ПредставлениеДокументов = НСтр("ru = '<Подбор>'");
		Иначе
			ПредставлениеДокументов = НСтр("ru = 'Отразить в учете'");
		КонецЕсли;
		
	ИначеЕсли КоличествоДокументов = 1 Тогда
		
		Если ТипЗнч(МассивДокументов[0]) = Тип("СправочникСсылка.СоглашенияОбИспользованииЭД") Тогда
			Элементы.ТекстДокументИБ.Заголовок = НСтр("ru = 'Настройка ЭДО'");  
		КонецЕсли;
		
		ПредставлениеДокументов = Строка(МассивДокументов[0]);
		
		Если Объект.ВидЭД = Перечисления.ВидыЭД.ПроизвольныйЭД Тогда
			ОтображатьПодбор = Истина;
		КонецЕсли;
	Иначе
		
		Элементы.ТекстДокументИБ.Заголовок = НСтр("ru = 'Документы учета'");
		ШаблонТекста = НСтр("ru = 'Список документов (%1)'");  
		ПредставлениеДокументов = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонТекста,КоличествоДокументов);
	КонецЕсли;
	
	ТекстДокументИБ = ПредставлениеДокументов;
	
	ТекстПодбор = НСтр("ru = '<Подбор>'");
	Элементы.ТекстПодбор.Видимость = ОтображатьПодбор;
	
	Если ОтображатьПодбор Тогда
		Элементы.ТекстДокументИБ.РастягиватьПоГоризонтали = Ложь;
		Элементы.ТекстДокументИБ.Ширина = Окр(СтрДлина(ПредставлениеДокументов) *0.69, 0, РежимОкругления.Окр15как20);
	Иначе
		Элементы.ТекстДокументИБ.РастягиватьПоГоризонтали = Истина;
	КонецЕсли;
	
	Элементы.ТекстДокументИБ.Видимость = КоличествоДокументов > 0 ИЛИ Не Объект.Ссылка.Пустая();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВидЭД(ЭД)
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭД,"ВидЭД");
КонецФункции

&НаСервереБезКонтекста
Функция ВторойТитулДокумента(ПервыйТитул)
	
	Возврат ЭлектронныеДокументыСлужебный.ВторойТитулДокумента(ПервыйТитул);
	
КонецФункции

&НаСервере
Процедура ИнициализацияДанныхНаСервере(Отказ)
	
	Если ЭлектронныеДокументыСлужебныйВызовСервера.ВыполнятьКриптооперацииНаСервере() Тогда
		ОтпечаткиСервер = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьМассивСтруктурСертификатов(Истина);
		Если ЗначениеЗаполнено(ОтпечаткиСервер) Тогда
			
			Если ЗначениеЗаполнено(СсылкаНаМассивОтпечатков) Тогда
				ОтпечаткиКлиент = ПолучитьИзВременногоХранилища(СсылкаНаМассивОтпечатков);
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ОтпечаткиСервер,ОтпечаткиКлиент, Истина);
			КонецЕсли;	
			СсылкаНаМассивОтпечатков = ПоместитьВоВременноеХранилище(ОтпечаткиСервер, УникальныйИдентификатор);		
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ИзменитьЗначенияРеквизитовНаСервере(Знач Ссылка, Знач СтруктураПараметров)
	
	ЭлектронныеДокументыСлужебный.ИзменитьПоСсылкеПрисоединенныйФайл(Ссылка, СтруктураПараметров, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьПеренаправлениеЭД()
	
	МассивЭД = Новый Массив;
	МассивЭД.Добавить(ПрисоединенныйФайлСсылка);
	ЭлектронныеДокументыСлужебныйКлиент.ИзменитьОтветственного(МассивЭД);
	
КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьКомментарии()
	
	ВсеКомментарии = "";
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЖурналСобытийЭД.Пользователь.Представление КАК Пользователь,
		|	ЖурналСобытийЭД.Дата КАК Дата,
		|	ЖурналСобытийЭД.СтатусЭД,
		|	ЖурналСобытийЭД.Ответственный.Представление КАК Ответственный,
		|	ЖурналСобытийЭД.Комментарий
		|ИЗ
		|	РегистрСведений.ЖурналСобытийЭД КАК ЖурналСобытийЭД
		|ГДЕ
		|	ЖурналСобытийЭД.ПрисоединенныйФайл = &Ссылка
		|	И ЖурналСобытийЭД.Комментарий <> &ПустаяСтрока
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата";
		
	Запрос.УстановитьПараметр("Ссылка", ПрисоединенныйФайлСсылка);
	Запрос.УстановитьПараметр("ПустаяСтрока", "");
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	ШаблонКомментария = НСтр("ru = '%1, %2 (статус - %3, ответственный - %4):
		|%5'");
	ПредыдущийКомментарий = "";
	ПервыйКомментарий = Истина;
	Массив = Новый Массив;
	Пока Выборка.Следующий() Цикл
		ТекущийКомментарий = СокрЛП(Выборка.Комментарий);
		Если ПредыдущийКомментарий = ТекущийКомментарий Тогда
			Продолжить;
		КонецЕсли;
		ПредыдущийКомментарий = ТекущийКомментарий;
		СтрокаКомментария = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонКомментария,
				Выборка.Дата, Выборка.Пользователь, Выборка.СтатусЭД, Выборка.Ответственный, ТекущийКомментарий);
		Массив.Добавить(СтрокаКомментария);
		ПервыйКомментарий = Ложь;
	КонецЦикла;
	Если Массив.Количество() > 0 Тогда
		ПервыйКомментарий = Истина;
		Для Сч = -Массив.Количество() + 1 По 0 Цикл
			СтрокаКомментария = Массив[-Сч];
			ВсеКомментарии = ВсеКомментарии
				+ СтрокаКомментария
				+ ?(ПервыйКомментарий, Символы.ПС + "------------------------------------", "")
				+ Символы.ПС
				+ Символы.ПС;
			ПервыйКомментарий = Ложь;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция УникальныйИДВнешний(ЭД)
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭД, "УникальныйИДВнешний");
	
КонецФункции

&НаСервере
Процедура ИзменитьСтатусОтклонить()
	
	СтруктураПараметров = Новый Структура("СтатусЭД", Перечисления.СтатусыЭД.Отклонен);
	ЭлектронныеДокументыСлужебный.ИзменитьПоСсылкеПрисоединенныйФайл(ПрисоединенныйФайлСсылка, СтруктураПараметров, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьВидимостьДоступность()
	
	ИзменитьВидимостьДоступностьНаСервере();
	
	СтрокиДерева = ДеревоПодчиненныеЭД.ПолучитьЭлементы();
	
	Если СтрокиДерева.Количество() > 0 Тогда
		Элементы.ДеревоПодчиненныеЭД.Развернуть(СтрокиДерева[0].ПолучитьИдентификатор(),Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьВидимостьДоступностьНаСервере()
	
	СвойстваЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Ссылка, "ВидЭД,ПрофильНастроекЭДО,НастройкаЭДО,ПричинаОтклонения");
	СвойстваФайлаЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПрисоединенныйФайлСсылка, "ЭлектронныйДокументВладелец,
	|СтатусЭД,НаправлениеЭД,ТипЭлементаВерсииЭД,Описание,ДополнительнаяИнформация");
	
	Если ЗначениеЗаполнено(СвойстваФайлаЭД.ЭлектронныйДокументВладелец) Тогда
		СсылкаНаЭД = СвойстваФайлаЭД.ЭлектронныйДокументВладелец;
	Иначе
		СсылкаНаЭД = ПрисоединенныйФайлСсылка;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СсылкаНаМассивОтпечатков) Тогда
		МассивОтпечатков = ПолучитьИзВременногоХранилища(СсылкаНаМассивОтпечатков);
	Иначе
		МассивОтпечатков = Новый Массив;
	КонецЕсли;
	
	ЭтоСлужебный	= ЭлектронныеДокументыСлужебныйВызовСервера.ЭтоСлужебныйДокумент(ПрисоединенныйФайлСсылка);
	
	ЕстьПравоОбработки = ЭлектронныеДокументыСлужебныйВызовСервера.ЕстьПравоОбработкиЭД(Ложь);
	ЕстьВозможностьПодписания = ЕстьПравоОбработки 
		И ЗначениеЗаполнено(МассивОтпечатков)
		И ДоступныДляПодписиСертификаты(МассивОтпечатков);
	МожноОтклонитьЭтотЭД = ЕстьПравоОбработки И НЕ ЭтоСлужебный И ЭлектронныеДокументыСлужебныйВызовСервера.МожноОтклонитьЭтотЭД(СсылкаНаЭД);
	МожноАннулироватьЭтотЭД = ЕстьПравоОбработки И НЕ ЭтоСлужебный И ЭлектронныеДокументыСлужебныйВызовСервера.МожноАннулироватьЭтотЭД(СсылкаНаЭД);
	
	ЭДОЗакрыт		= ЭлектронныеДокументыСлужебныйВызовСервера.ДОЗакрытПринудительно(Объект.Ссылка);
	СтатусОтклонен	= ЭлектронныеДокументыСлужебныйВызовСервера.ЭДОтклонен(СвойстваФайлаЭД.СтатусЭД);
	
	ЭДТитулПродавца	= НЕ ЭтоСлужебный И ЭлектронныеДокументыСлужебный.ЭтоТитулФНС(Объект.Ссылка);
					
	ЭДСчетФактура	= НЕ ЭтоСлужебный И ЭлектронныеДокументыСлужебныйВызовСервера.ЭтоСчетФактура(ПрисоединенныйФайлСсылка);
	ДОСФЗавершен	= ЭДСчетФактура И ЭлектронныеДокументыСлужебныйВызовСервера.ДОСФЗавершен(ПрисоединенныйФайлСсылка, СвойстваФайлаЭД.НаправлениеЭД);
	
	ЭтоИзвещениеОПолучении		 = ЭлектронныеДокументыСлужебный.ЭтоИзвещениеОПолучении(СвойстваФайлаЭД.ТипЭлементаВерсииЭД);
	ЭтоПодтверждение 			 = ЭлектронныеДокументыСлужебный.ЭтоПодтверждение(СвойстваФайлаЭД.ТипЭлементаВерсииЭД);
	ЭтоУведомлениеОбУточнении	 = ЭлектронныеДокументыСлужебный.ЭтоУведомлениеОбУточнении(СвойстваФайлаЭД.ТипЭлементаВерсииЭД);
	ЭтоОтветныйТитул			 = ЭлектронныеДокументыСлужебный.ЭтоОтветныйТитул(СвойстваФайлаЭД.ТипЭлементаВерсииЭД);
	
	Элементы.ДоверятьСертификату.Видимость = Истина;
	
	СпособОбмена = Неопределено;
	ПрофильНастроек = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Ссылка,   "ПрофильНастроекЭДО");
	Если ПрофильНастроек <> Неопределено Тогда
		СпособОбмена    = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПрофильНастроек, "СпособОбменаЭД");
	КонецЕсли;
	
	Если Не ЭлектронныеДокументыСлужебныйВызовСервера.ЭтоПрямойОбмен(СпособОбмена) Тогда
		Элементы.ДоверятьСертификату.Видимость = Ложь;
	КонецЕсли;
	
	СостоянияЭДОЗавершен = Новый Массив;
	СостоянияЭДОЗавершен.Добавить(Перечисления.СостоянияВерсийЭД.ОбменЗавершен);
	СостоянияЭДОЗавершен.Добавить(Перечисления.СостоянияВерсийЭД.ОбменЗавершенСИсправлением);
	
	ДОЗавершен = ЭлектронныеДокументыСлужебныйВызовСервера.ПроверитьСостояниеЭДО(Объект.Ссылка, СостоянияЭДОЗавершен);
	
	Если Не ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьЗначениеФункциональнойОпции("ИспользоватьЭлектронныеПодписиЭД")
		И ЭлектронныеДокументыСлужебный.НемедленнаяОтправкаЭД() Тогда
		Элементы.КомандаУтвердить.Заголовок = НСтр("ru = 'Утвердить и отправить'");
	КонецЕсли;
	
	Элементы.КомандаПодписатьОтправить.Видимость = Ложь;
	Элементы.КомандаПодписать.Видимость = Ложь;
	
	КомандаПодписиОтправки = Элементы.КомандаПодписать;
	Если ЭлектронныеДокументыСлужебный.НемедленнаяОтправкаЭД()
			И Не СвойстваФайлаЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани Тогда
		КомандаПодписиОтправки = Элементы.КомандаПодписатьОтправить;
	КонецЕсли;
	
	// Произвольный ЭД новый.
	КомандаПодписиОтправки.Видимость = Истина;
	КомандаПодписиОтправки.Доступность = Ложь;
	Элементы.ОбъектДополнительнаяИнформация.ТолькоПросмотр = Ложь;
	
	ОпределенаДоступностьКнопкиОтклонить = Ложь;
	Если СвойстваФайлаЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
		Элементы.ОбъектДополнительнаяИнформация.ТолькоПросмотр = Истина;
		
		ЕстьВозможностьПодписания = ЕстьВозможностьПодписания И НЕ ЭтоСлужебный;
		
		Элементы.КомандаОтправитьПовторно.Видимость = Ложь;
				
		ЭтоПолученныйКаталогТоваров = НЕ ЭтоСлужебный И СвойстваЭД.ВидЭД = Перечисления.ВидыЭД.КаталогТоваров
			И СвойстваФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.Получен;
		
		ОбменЧерезТакском = ОбменЧерезОператора(СвойстваЭД);
		ВерсияФорматаПакета = ЭлектронныеДокументыСлужебный.ВерсияПакетаЭД(ПрисоединенныйФайлСсылка);
		ЭтоСчетВерсии30 = НЕ ЭтоСлужебный И (СвойстваЭД.ВидЭД = Перечисления.ВидыЭД.СчетНаОплату)
			И (ОбменЧерезТакском ИЛИ (ВерсияФорматаПакета = Перечисления.ВерсииФорматаПакетаЭД.Версия30 И Не ОбменЧерезТакском));
			
		ПредложениеОбАннулировании = (СвойстваФайлаЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПОА);
		
		ЭтоСлужебныйДокумент = ЭтоИзвещениеОПолучении
				ИЛИ ЭтоПодтверждение
				ИЛИ ПредложениеОбАннулировании
				ИЛИ ЭтоУведомлениеОбУточнении
				ИЛИ ЭтоОтветныйТитул;
				
		Элементы.КомандаУтвердить.Видимость = (Не ЕстьВозможностьПодписания
				ИЛИ ЭДСчетФактура
				ИЛИ ЭтоСчетВерсии30)
			И Не ЭтоСлужебныйДокумент;
			
		Элементы.КомандаУтвердить.Доступность = Не ЭДОЗакрыт
			И ЕстьПравоОбработки
			И СвойстваФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.Получен;
			
		КомандаПодписиОтправки.Видимость   = (ТребуетсяПодпись ИЛИ СвойстваФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.Подписан)
			И Не ЭтоУведомлениеОбУточнении
			И НЕ ЭДСчетФактура
			И Не ЭтоСчетВерсии30;
			
		КомандаПодписиОтправки.Доступность = (ЕстьВозможностьПодписания ИЛИ СвойстваФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.Подписан)
			И НЕ СтатусОтклонен И Не ЭДОЗакрыт И ОтраженВУчете
			И (СвойстваФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.Получен ИЛИ СвойстваФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.Утвержден ИЛИ ПрисоединенныйФайлСсылка.СтатусЭД = Перечисления.СтатусыЭД.Подписан)
			И Не ЭлектронныеДокументыСлужебный.ВторойТитулПодписан(ПрисоединенныйФайлСсылка)
			И НЕ ЭтоПодтверждение;
			
		// Для входящей с/ф кнопка отклонение имеет свое название и картинку.
		Если НЕ ЭтоСлужебный И СвойстваЭД.ВидЭД = Перечисления.ВидыЭД.СчетФактура
			Или СвойстваЭД.ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура Тогда
			Элементы.КомандаОтклонить.Заголовок = НСтр("ru = 'Запросить уточнение по электронному документу'");
			Элементы.КомандаОтклонить.Картинка = БиблиотекаКартинок.ПользовательБезНеобходимыхСвойств;
		КонецЕсли;
		
	ИначеЕсли СвойстваФайлаЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий Тогда
		
		КомандаПодписиОтправки.Видимость   = (ТребуетсяПодпись
				И (СвойстваФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.Сформирован
				ИЛИ СвойстваФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.Утвержден
				ИЛИ СвойстваФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.Подписан))
			И Не ЭтоУведомлениеОбУточнении;
			
		КомандаПодписиОтправки.Доступность = ЕстьВозможностьПодписания
			И НЕ СтатусОтклонен И Не ЭДОЗакрыт
			И (ОтраженВУчете ИЛИ ЭтоСлужебный)
			И (СвойстваФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.Сформирован
				ИЛИ СвойстваФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.Утвержден
				ИЛИ СвойстваФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.Подписан);
		
		Если ЭлектронныеДокументыСлужебныйВызовСервера.ЭтоПрямойОбмен(СвойстваЭД.ПрофильНастроекЭДО.СпособОбменаЭД) Тогда
			Элементы.КомандаОтправитьПовторно.Видимость = Истина;
			Элементы.КомандаОтправитьПовторно.Доступность = НЕ СтатусОтклонен
				И ОтраженВУчете
				ИЛИ (ЭтоИзвещениеОПолучении
					ИЛИ ЭтоПодтверждение
					ИЛИ СвойстваФайлаЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПОА
					ИЛИ ЭтоУведомлениеОбУточнении);
		КонецЕсли;
		
		ЗапискаДоступна = (НЕ ЭтоСлужебный
			И (СвойстваФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.Сформирован
				ИЛИ СвойстваФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.Утвержден));
		
		Элементы.ОбъектДополнительнаяИнформация.ТолькоПросмотр = НЕ ЗапискаДоступна;
		Элементы.ОчиститьЗаписку.Доступность = ЗапискаДоступна;
		
		Если НЕ ТребуетсяПодпись
			И Объект.СостояниеЭДО = Перечисления.СостоянияВерсийЭД.ОжидаетсяОтправка
				И (СвойстваФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.Сформирован
				ИЛИ СвойстваФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.Утвержден) Тогда
			Элементы.КомандаУтвердить.Видимость = Истина;
			Элементы.КомандаУтвердить.Заголовок = НСтр("ru = 'Отправить'");
		Иначе
			Элементы.КомандаУтвердить.Видимость = Ложь;
		КонецЕсли;
			
		// Если есть право подписи, то можем отклонять документы на этапе подписания (кроме произвольных ЭД).
		Если ТребуетсяПодпись 
			И Не ЭтоУведомлениеОбУточнении
			И Не Объект.ВидЭД = Перечисления.ВидыЭД.ПроизвольныйЭД
			И (СвойстваФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.Сформирован
				ИЛИ СвойстваФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.Утвержден
				ИЛИ СвойстваФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.Подписан) Тогда
			Элементы.КомандаОтклонить.Заголовок = НСтр("ru = 'Отказаться от подписания'");
			Элементы.КомандаОтклонить.Доступность = ЕстьВозможностьПодписания;
			ОпределенаДоступностьКнопкиОтклонить = Истина;
		Иначе
			Элементы.КомандаОтклонить.Заголовок = НСтр("ru = 'Отклонить'");
		КонецЕсли;
		
	ИначеЕсли СвойстваФайлаЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани Тогда
		
		КомандаПодписиОтправки.Видимость = СвойстваФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.Сформирован
			ИЛИ СвойстваФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.Утвержден;
		КомандаПодписиОтправки.Доступность   = (ЕстьВозможностьПодписания
			И НЕ СтатусОтклонен И СвойстваФайлаЭД.СтатусЭД <> Перечисления.СтатусыЭД.ПолностьюПодписан);
		
		Элементы.ДополнительныеКоманды.Видимость = Ложь;
		
		ОтключитьВыводДопДанных = Истина;
		Элементы.КомандаОтображатьДополнительнуюИнформацию.Видимость = Ложь;
		
	КонецЕсли;
	
	Элементы.СтраницаСтатусов.Видимость = Ложь;
	Элементы.КомандаАннулировать.Доступность = МожноАннулироватьЭтотЭД;
	Если НЕ ОпределенаДоступностьКнопкиОтклонить Тогда
		Элементы.КомандаОтклонить.Доступность = (НЕ (СтатусОтклонен ИЛИ ЭтоСлужебный ИЛИ ЭДОЗакрыт) И МожноОтклонитьЭтотЭД)
			И Не ЭлектронныеДокументыСлужебный.ЕстьОтправленноеУведомление(ПрисоединенныйФайлСсылка);
	КонецЕсли;
	Элементы.ГруппаКомандАннулирование.Видимость = Ложь;
	Элементы.КомандаЗавершить.Видимость = ЭДСчетФактура;
	Элементы.КомандаЗавершить.Доступность = Не ДОСФЗавершен
		И (СвойстваФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.Отправлен
			Или СвойстваФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.Доставлен);
	
	Если СтатусОтклонен Тогда
		
		ПричиныОтклонения.Очистить();
		НовСтрока = ПричиныОтклонения.Добавить();
		НовСтрока.ПричинаОтклонения = СвойстваЭД.ПричинаОтклонения;
		Элементы.СтраницаОтклонение.Видимость = Истина;
		Если СвойстваФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.ОшибкаПередачи Тогда
			Элементы.ГруппаОтклонение.Заголовок = НСтр("ru = 'Ошибка обмена'");
		ИначеЕсли СвойстваФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.Отклонен Тогда
			Элементы.ГруппаОтклонение.Заголовок = НСтр("ru = 'Причины отказа от подписания'");	
		КонецЕсли;
		
	ИначеЕсли ЭДОАннулированИлиВПроцессе() Тогда
		
		ПричиныОтклонения.Очистить();
		НовСтрока = ПричиныОтклонения.Добавить();
		НовСтрока.ПричинаОтклонения = СвойстваЭД.ПричинаОтклонения;
		Элементы.СтраницаОтклонение.Видимость = Истина;
		Элементы.ГруппаОтклонение.Заголовок = НСтр("ru = 'Причина аннулирования:'");
		Элементы.КомандаОтклонить.Доступность = Ложь;
		Если СвойстваФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.ПолученоПредложениеОбАннулировании
			ИЛИ СвойстваФайлаЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПОА
			И СвойстваФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.Получен
			ИЛИ ЗначениеЗаполнено(СвойстваФайлаЭД.ЭлектронныйДокументВладелец)
			И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СвойстваФайлаЭД.ЭлектронныйДокументВладелец, "СтатусЭД") = Перечисления.СтатусыЭД.ПолученоПредложениеОбАннулировании Тогда
			Элементы.ГруппаКомандАннулирование.Видимость = Истина;
			Элементы.КомандаПодписатьОтправить.Видимость = Ложь;
			Элементы.КомандаАннулировать.Доступность = Ложь;
		КонецЕсли;
		
	ИначеЕсли АннулированиеОтклонено() Тогда
		
		ПричиныОтклонения.Очистить();
		НовСтрока = ПричиныОтклонения.Добавить();
		НовСтрока.ПричинаОтклонения = Объект.ПричинаОтклонения;
		Элементы.СтраницаОтклонение.Видимость = Истина;
		Элементы.ГруппаОтклонение.Заголовок = НСтр("ru = 'Причина отказа от аннулирования:'");
		
	КонецЕсли;
	
	СостояниеЭДО = ?(Не ЗначениеЗаполнено(Объект.Ссылка), Перечисления.СостоянияВерсийЭД.НеСформирован, 
		Объект.Ссылка.СостояниеЭДО);
	
	Элементы.ДеревоПодчиненныеЭД.Видимость = Не ОтключитьВыводДерева;
	
	// Произвольный ЭД.
	ОтображениеПолейВвода = Объект.ВидЭД = Перечисления.ВидыЭД.ПроизвольныйЭД
		И (Объект.СостояниеЭДО = Перечисления.СостоянияВерсийЭД.НеСформирован);
	Элементы.ШапкаВводДанных.Видимость      = ОтображениеПолейВвода;
	Элементы.ИнформацияОДокументе.Видимость = НЕ ОтображениеПолейВвода;
	Если Объект.ВидЭД = Перечисления.ВидыЭД.ПроизвольныйЭД Тогда
		НастройкиОбменаЭД = Неопределено;
	КонецЕсли;
	
	НаправлениеИсходящий = Истина;
	ЕстьВложения = ЗначениеЗаполнено(ПрисоединенныйФайлСсылка)
					ИЛИ ЭтоАдресВременногоХранилища(АдресВременногоХранилищаВложения);
					
	Если ЗначениеЗаполнено(Объект.Ссылка) И НаправлениеИсходящий
		И (ПрисоединенныйФайлСсылка.Пустая()
			ИЛИ СвойстваФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.Сформирован
				ИЛИ СвойстваФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.Утвержден) Тогда
		МожноРедактироватьПередаваемыеПараметры = Истина;
	Иначе
		МожноРедактироватьПередаваемыеПараметры = НЕ ЗначениеЗаполнено(Объект.Ссылка); // Если документ еще не записан, то можно редактировать.
	КонецЕсли;
	
	// Вложение
	Если НаправлениеИсходящий Тогда
		Элементы.КоманднаяПанельВложения.Видимость = Истина;
		
		ПрисоединенныеФайлыОснования = Новый Массив;
		Если Объект.ДокументыОснования.Количество() = 1
			И ЗначениеЗаполнено(Объект.ДокументыОснования[0].ДокументОснование) Тогда
			ПрисоединенныеФайлы.ПолучитьПрикрепленныеФайлыКОбъекту(Объект.ДокументыОснования[0].ДокументОснование, ПрисоединенныеФайлыОснования); 
		КонецЕсли;
		Если ПрисоединенныеФайлыОснования.Количество() > 0 Тогда
			ГруппаКомандДобавитьЗаменить = Элементы.ГруппаКомандДобавитьЗаменить;
			Элементы.ДобавитьВложениеИзФайлаНаДискеОдиночная.Видимость = Ложь;
		Иначе
			ГруппаКомандДобавитьЗаменить = Элементы.ДобавитьВложениеИзФайлаНаДискеОдиночная;
			Элементы.ГруппаКомандДобавитьЗаменить.Видимость = Ложь;
		КонецЕсли;
		ГруппаКомандДобавитьЗаменить.Видимость = Истина;
		Если ЕстьВложения Тогда
			ДанныеФайла = ДанныеФайлаВложения(АдресВременногоХранилищаВложения, ПрисоединенныйФайлСсылка, УникальныйИдентификатор);
			Если ДанныеФайла.ФайлРедактируется Тогда
				ТекстРедактируетФайл = НСтр("ru = 'Файл захвачен на редактирование пользователем %1'");
				ТекстРедактируетФайл = СтрЗаменить(ТекстРедактируетФайл, "%1", ДанныеФайла.Редактирует);
				Элементы.ТекстРедактируетФайл.ЦветТекста = ЦветаСтиля[?(ДанныеФайла.ФайлРедактируетТекущийПользователь,
					"ФайлЗанятыйТекущимПользователем", "ТекстЗапрещеннойЯчейкиЦвет")];
			Иначе
				ТекстРедактируетФайл = "";
			КонецЕсли;
			ГруппаКомандДобавитьЗаменить.Заголовок = СтрЗаменить(ГруппаКомандДобавитьЗаменить.Заголовок,
				НСтр("ru = 'Добавить'"), НСтр("ru = 'Заменить на'"));
			Если МожноРедактироватьПередаваемыеПараметры И НЕ ДанныеФайла.ПодписанЭЦП Тогда
				ГруппаКомандДобавитьЗаменить.Доступность = Истина;
				Элементы.Редактировать.Доступность = НЕ ДанныеФайла.ФайлРедактируется;
				Элементы.ЗакончитьРедактирование.Доступность = ДанныеФайла.ФайлРедактируется
					И ДанныеФайла.ФайлРедактируетТекущийПользователь;
				Элементы.Освободить.Доступность = ДанныеФайла.ФайлРедактируется И ДанныеФайла.ФайлРедактируетТекущийПользователь;
			Иначе
				ГруппаКомандДобавитьЗаменить.Доступность = Ложь;
				Элементы.Редактировать.Доступность = Ложь;
				Элементы.ЗакончитьРедактирование.Доступность = Ложь;
				Элементы.Освободить.Доступность = Ложь;
			КонецЕсли;
		Иначе
			ГруппаКомандДобавитьЗаменить.Заголовок = СтрЗаменить(ГруппаКомандДобавитьЗаменить.Заголовок, НСтр("ru = 'Заменить на'"), НСтр("ru = 'Добавить'"));
			ГруппаКомандДобавитьЗаменить.Доступность = МожноРедактироватьПередаваемыеПараметры;
			Элементы.Редактировать.Доступность = Ложь;
			Элементы.ЗакончитьРедактирование.Доступность = Ложь;
			Элементы.Освободить.Доступность = Ложь;
		КонецЕсли;
	Иначе
		Элементы.КоманднаяПанельВложения.Видимость = Ложь;
		Элементы.ТекстРедактируетФайл.Видимость = Ложь;
	КонецЕсли;
	Элементы.ВложенияСтраницы.ТекущаяСтраница = ?(ЕстьВложения, Элементы.ВложенияСтраницаОтобразитьФайл, Элементы.ВложенияСтраницаОтсутствуетФайл);
	
	
	Элементы.Организация.ТолькоПросмотр = Не МожноРедактироватьПередаваемыеПараметры;
	Элементы.Контрагент.ТолькоПросмотр  = Не МожноРедактироватьПередаваемыеПараметры;
	Элементы.Договор.ТолькоПросмотр     = Не МожноРедактироватьПередаваемыеПараметры;
	
	Элементы.ФормаКнопкаЗаписать.Видимость = Объект.ВидЭД = Перечисления.ВидыЭД.ПроизвольныйЭД;
	
	Элементы.КомандаЖурналСобытийЭДО.Доступность = Пользователи.ЭтоПолноправныйПользователь();
	
	ОбновитьВидимостьТранслитерации();
	
КонецПроцедуры

&НаСервере
Функция ОбменЧерезОператора(СвойстваЭД)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СоглашенияОбИспользованииЭДИсходящиеДокументы.СпособОбменаЭД КАК СпособОбменаЭД
	|ИЗ
	|	Справочник.СоглашенияОбИспользованииЭД.ИсходящиеДокументы КАК СоглашенияОбИспользованииЭДИсходящиеДокументы
	|ГДЕ
	|	СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка = &Ссылка
	|	И СоглашенияОбИспользованииЭДИсходящиеДокументы.ИсходящийДокумент = &ИсходящийДокумент";
	Запрос.УстановитьПараметр("Ссылка", СвойстваЭД.НастройкаЭДО);
	Запрос.УстановитьПараметр("ИсходящийДокумент", СвойстваЭД.ВидЭД);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	Если Не ЭлектронныеДокументыСлужебныйВызовСервера.ЭтоПрямойОбмен(Выборка.СпособОбменаЭД) Тогда
		Возврат Истина
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ОбновитьСтатусЭД()
	
	ТекстСостояния = Перечисления.СостоянияВерсийЭД.НеСформирован;
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ТекстСостояния = ЭлектронныеДокументыКлиентСервер.ПолучитьТекстСостоянияЭД(Объект.Ссылка);
	КонецЕсли;
	
	Если Объект.ВидЭД = Перечисления.ВидыЭД.ПроизвольныйЭД Тогда
		ОтраженВУчете = Истина;
	Иначе
		ЗапросПоОтражению = Новый Запрос;
		ЗапросПоОтражению.УстановитьПараметр("МассивОснований", Объект.Ссылка.ДокументыОснования.ВыгрузитьКолонку("ДокументОснование"));
		
		ЗапросПоОтражению.Текст =
		"ВЫБРАТЬ
		|	СостоянияЭД.СсылкаНаОбъект,
		|	СостоянияЭД.ЭлектронныйДокумент
		|ИЗ
		|	РегистрСведений.СостоянияЭД КАК СостоянияЭД
		|ГДЕ
		|	СостоянияЭД.СсылкаНаОбъект В (&МассивОснований)";
		
		Выборка = ЗапросПоОтражению.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ОтраженВУчете = (Объект.Ссылка = Выборка.ЭлектронныйДокумент);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ФИОИзСертификата(Данные)
	
	Сертификат = Новый СертификатКриптографии(Данные.Получить());
	
	ФИО = "";
	SN  = "";
	GN  = "";
	Если Сертификат.Субъект.Свойство("SN", SN) ИЛИ Сертификат.Субъект.Свойство("GN", GN) Тогда
		ФИО = SN + " " + GN;
	КонецЕсли;
	
	Возврат ФИО;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьТаблицуЭП()
	
	ТаблицаВременная = РеквизитФормыВЗначение("ТаблицаЭП");
	ТаблицаВременная.Очистить();
	
	СвойстваЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Ссылка, "НастройкаЭДО, ВидЭД");
	СоглашениеЭД = СвойстваЭД.НастройкаЭДО;
	
	ПроверятьСертификатыПодписей = Ложь;
	Если ЗначениеЗаполнено(СоглашениеЭД) Тогда
		ПроверятьСертификатыПодписей = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СоглашениеЭД, "ПроверятьСертификатыПодписей");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПрисоединенныйФайлСсылка) Тогда
		РеквизитыФайла = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПрисоединенныйФайлСсылка, "НаправлениеЭД");
		ЭтоВходящийДокумент = РеквизитыФайла.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий;
		
		Если НЕ ЗначениеЗаполнено(СоглашениеЭД) ИЛИ НЕ ПроверятьСертификатыПодписей Тогда
			ВидЭД = СвойстваЭД.ВидЭД;
			Если ЭлектронныеДокументыСлужебный.ЭтоТитулФНС(Объект.Ссылка) Тогда
				ЭлПодписи = ЭлектронныеДокументыСлужебный.ЭлектронныеПодписиДвухТитулов(ПрисоединенныйФайлСсылка);
			Иначе
				ЭлПодписи = ЭлектронныеДокументыСлужебный.УстановленныеПодписи(ПрисоединенныйФайлСсылка);
				
				// Дополним сведения о подписи признаком направления
				ЭлектронныеДокументыСлужебный.ДополнитьМассивПодписейПризнакомНаправления(ЭлПодписи, ЭтоВходящийДокумент);
			КонецЕсли;
			Для Каждого ТекСтрока Из ЭлПодписи Цикл
				НоваяСтрока = ТаблицаВременная.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
				ЗаполнитьСтатусПодписи(НоваяСтрока, ТекСтрока);
				НоваяСтрока.НомерСтроки = ТаблицаВременная.Количество();
				Если НоваяСтрока.Входящая Тогда
					НоваяСтрока.УстановившийПодпись = ФИОИзСертификата(НоваяСтрока.Сертификат);
				КонецЕсли;
			КонецЦикла;
			ЗначениеВРеквизитФормы(ТаблицаВременная, "ТаблицаЭП");
		Иначе
			МассивОтпечатковОжидаемыхСертификатов = ЭлектронныеДокументыСлужебный.ОтпечаткиОжидаемыхСертификатов(СоглашениеЭД);

			Если ЭлектронныеДокументыСлужебный.ЭтоТитулФНС(Объект.Ссылка) Тогда
				ЭлПодписи = ЭлектронныеДокументыСлужебный.ЭлектронныеПодписиДвухТитулов(ПрисоединенныйФайлСсылка);
			Иначе
				ЭлПодписи = ЭлектронныеДокументыСлужебный.УстановленныеПодписи(ПрисоединенныйФайлСсылка);
				
				// Дополним сведения о подписи признаком направления
				ЭлектронныеДокументыСлужебный.ДополнитьМассивПодписейПризнакомНаправления(ЭлПодписи, ЭтоВходящийДокумент);
			КонецЕсли;

			Для Каждого ТекСтрока Из ЭлПодписи Цикл
				НоваяСтрока = ТаблицаВременная.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
				НоваяСтрока.НомерСтроки = ТекСтрока.ПорядковыйНомер;
				Если НоваяСтрока.Входящая Тогда
					НоваяСтрока.УстановившийПодпись = ФИОИзСертификата(НоваяСтрока.Сертификат);
				КонецЕсли;
				Если МассивОтпечатковОжидаемыхСертификатов.Найти(ТекСтрока.Отпечаток) = Неопределено Тогда
					НоваяСтрока.ОтсутствуетВСписке = Истина;
					НоваяСтрока.ВыводКартинки = 1;
				Иначе
					НоваяСтрока.ВыводКартинки = 0;
				КонецЕсли;
				ЗаполнитьСтатусПодписи(НоваяСтрока, ТекСтрока);
			КонецЦикла;
			ЗначениеВРеквизитФормы(ТаблицаВременная, "ТаблицаЭП");
		КонецЕсли;
	КонецЕсли;
	
	Элементы.СтраницаПодписиИСтатусы.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Подписи %1'"), 
		?(ТаблицаВременная.Количество() = 0, "", "(" + ТаблицаВременная.Количество() + ") "));
	
	Если ТаблицаЭП.НайтиСтроки(Новый Структура("ПодписьВерна", Ложь)).Количество() = 0 Тогда
		Элементы.СтраницаПодписиИСтатусы.Картинка = Новый Картинка;
	Иначе
		Элементы.СтраницаПодписиИСтатусы.Картинка = БиблиотекаКартинок.Предупреждение;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтатусПодписи(НоваяСтрока, ТекСтрока)
	
	Если ЗначениеЗаполнено(ТекСтрока.ДатаПроверкиПодписи) Тогда
		НоваяСтрока.ПодписьВернаПредставление = ?(ТекСтрока.ПодписьВерна, НСтр("ru = 'Верна'"), НСтр("ru = 'Неверна'"))
			+" (" + ТекСтрока.ДатаПроверкиПодписи + ")";
	Иначе
		НоваяСтрока.ПодписьВернаПредставление = НСтр("ru = 'Не проверена'");
	КонецЕсли
	
КонецПроцедуры

&НаСервере
Функция НеобходимоПодписать()
	
	ФлагПодписи = Ложь;
	// Ответ на заказ никогда не подписывает покупатель или документ отклонен.
	Если НЕ СтатусОтклонен Тогда
		
		СпособОбмена = Неопределено;
		ПрофильНастроек = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Ссылка,   "ПрофильНастроекЭДО");
		Если ПрофильНастроек <> Неопределено Тогда
			СпособОбмена = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПрофильНастроек, "СпособОбменаЭД");
		КонецЕсли;
		
		Если Не ЭлектронныеДокументыСлужебныйВызовСервера.ЭтоПрямойОбмен(СпособОбмена) Тогда
			ФлагПодписи = Истина;
		Иначе
			
			УстановитьПривилегированныйРежим(Истина);
			
			Если ПрисоединенныйФайлСсылка.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
				ФлагПодписи = ПрисоединенныйФайлСсылка.ПодписанЭЦП;
			ИначеЕсли ПрисоединенныйФайлСсылка.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий
				ИЛИ ПрисоединенныйФайлСсылка.НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани Тогда
				
				Если ЭлектронныеДокументыСлужебный.ЭтоИзвещениеОПолучении(ПрисоединенныйФайлСсылка.ТипЭлементаВерсииЭД) Тогда
					
					ФлагПодписи = ПрисоединенныйФайлСсылка.ЭлектронныйДокументВладелец.ПодписанЭЦП;
					
				Иначе
					
					Запрос = Новый Запрос;
					Запрос.Текст =
					"ВЫБРАТЬ
					|	СоглашенияОбИспользованииЭДИсходящиеДокументы.ИспользоватьЭЦП
					|ИЗ
					|	Справочник.СоглашенияОбИспользованииЭД.ИсходящиеДокументы КАК СоглашенияОбИспользованииЭДИсходящиеДокументы
					|ГДЕ
					|	ВЫБОР
					|			КОГДА &ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.Торг12Покупатель)
					|				ТОГДА СоглашенияОбИспользованииЭДИсходящиеДокументы.ИсходящийДокумент = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.Торг12Продавец)
					|			КОГДА &ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель)
					|				ТОГДА СоглашенияОбИспользованииЭДИсходящиеДокументы.ИсходящийДокумент = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель)
					|			КОГДА &ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.АктЗаказчик)
					|				ТОГДА СоглашенияОбИспользованииЭДИсходящиеДокументы.ИсходящийДокумент = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.АктИсполнитель)
					|			ИНАЧЕ СоглашенияОбИспользованииЭДИсходящиеДокументы.ИсходящийДокумент = &ВидЭД
					|		КОНЕЦ
					|	И (&НаправлениеЭД = ЗНАЧЕНИЕ(Перечисление.НаправленияЭД.Исходящий)
					|			ИЛИ &НаправлениеЭД = ЗНАЧЕНИЕ(Перечисление.НаправленияЭД.Интеркампани))
					|	И СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка = &Ссылка";
					Запрос.УстановитьПараметр("Ссылка",        Объект.НастройкаЭДО);
					Запрос.УстановитьПараметр("ВидЭД",         Объект.ВидЭД);
					Запрос.УстановитьПараметр("НаправлениеЭД", ПрисоединенныйФайлСсылка.НаправлениеЭД);
					
					Результат = Запрос.Выполнить().Выбрать();
					Результат.Следующий();
					
					ФлагПодписи = Результат.ИспользоватьЭЦП;
					
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ФлагПодписи;
	
КонецФункции

&НаСервере
Функция ДоступныДляПодписиСертификаты(МассивОтпечатков)
	
	ЕстьДоступныеСертификаты = ЭлектронныеДокументыСлужебныйВызовСервера.ЕстьДоступныеСертификаты(МассивОтпечатков, Объект.Ссылка);
	
	ИспользуютсяЭП = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьЗначениеФункциональнойОпции("ИспользоватьЭлектронныеЦифровыеПодписи");
	
	ВозвращаемыйПараметр = ИспользуютсяЭП И ЕстьДоступныеСертификаты И ТребуетсяПодпись;
		
	Возврат ВозвращаемыйПараметр;
	
КонецФункции

&НаСервере
Процедура ВыполнитьОбработкуОповещенияНаСервере()
	
	ИнициализацияДереваНаСервере();
	ОбновитьСтатусЭД();
	ПерезаполнитьКомментарии();
	ИзменитьВидимостьДоступностьНаСервере();
	ВывестиДокументыУчета();
	УстановитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСертификат(НомерСтроки, Отпечаток)
	
	//АдресДанныхСертификата = АдресДанныхСертификата(НомерСтроки);
	//
	//СтруктураСертификата = ЭлектронныеДокументыСлужебныйВызовСервера.СвойстваСертификата(АдресДанныхСертификата);
	//
	//Если СтруктураСертификата <> Неопределено Тогда
	//	ПараметрыФормы = Новый Структура("СтруктураСертификата, Отпечаток, АдресСертификата",
	//		СтруктураСертификата, Отпечаток, АдресДанныхСертификата);
	//	//ОткрытьФорму("ОбщаяФорма.Сертификат", ПараметрыФормы);
	//КонецЕсли;
	
	АдресДанныхСертификата = АдресДанныхСертификата(НомерСтроки);
	СтруктураСертификата   = ЭлектронныеДокументыСлужебныйВызовСервера.СвойстваСертификата(АдресДанныхСертификата);
	
	Если СтруктураСертификата <> Неопределено Тогда
		
		ПараметрыФормы = Новый Структура("СтруктураСертификата, Отпечаток, АдресСертификата",
			СтруктураСертификата, Отпечаток, АдресДанныхСертификата);
			
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("СтруктураСертификата", СтруктураСертификата);
		ПараметрыФормы.Вставить("Отпечаток",            Отпечаток);
		ПараметрыФормы.Вставить("АдресСертификата",     АдресДанныхСертификата);
		
		ОткрытьФорму("ОбщаяФорма.СертификатЭЦП", ПараметрыФормы);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция АдресДанныхСертификата(НомерСтроки)
	
	ДвоичныеДанныеСертификата = ТаблицаЭП[НомерСтроки-1].Сертификат.Получить();
	СсылкаНаХранилищеДанныхСертификата = ПоместитьВоВременноеХранилище(ДвоичныеДанныеСертификата, УникальныйИдентификатор);
	Возврат СсылкаНаХранилищеДанныхСертификата;
	
КонецФункции

&НаСервере
Процедура ДобавитьСертификатПодписиВСоглашение(Отпечаток, СертификатДобавлен)
	
	Если НЕ ЗначениеЗаполнено(Объект.НастройкаЭДО) Тогда
		Возврат;
	КонецЕсли;
	
	СертификатДобавлен = Ложь;
	
	ЭлектронныеПодписиЭД = ЭлектронныеДокументыСлужебный.УстановленныеПодписи(ПрисоединенныйФайлСсылка);
	Для Каждого ЭП Из ЭлектронныеПодписиЭД Цикл
		Если ЭП.Отпечаток = Отпечаток Тогда
			СоглашениеОбъект = Объект.НастройкаЭДО.ПолучитьОбъект();
			
			НоваяСтрока = СоглашениеОбъект.СертификатыПодписейКонтрагента.Добавить();
			НоваяСтрока.Сертификат = ЭП.Сертификат;
			НоваяСтрока.Отпечаток  = Отпечаток;
			НоваяСтрока.ПредставлениеСертификатаКонтрагента = ЭП.КомуВыданСертификат;
			СоглашениеОбъект.Записать();
			
			СертификатДобавлен = Истина;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСертификатВДоверенные(ДанныеПодписи)
		
	Если ДанныеПодписи <> Неопределено И ДанныеПодписи.ОтсутствуетВСписке Тогда
		Текст = НСтр("ru = 'Добавить сертификат %1 в список ожидаемых сертификатов контрагента?'");
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, ДанныеПодписи.КомуВыданСертификат);
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			ПоказатьСертификат(Элементы.ЭЦП.ТекущиеДанные.НомерСтроки,Элементы.ЭЦП.ТекущиеДанные.Отпечаток);
			Возврат;
		КонецЕсли;
		
		// Добавим сертификат в Соглашение.
		СертификатДобавлен = Ложь;
		ДобавитьСертификатПодписиВСоглашение(ДанныеПодписи.Отпечаток, СертификатДобавлен);
		Если НЕ СертификатДобавлен Тогда 
			ТекстСообщения = НСтр("ru = 'Ошибка добавления сертификата подписи в список ожидаемых сертификатов!'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Иначе
			ЗаполнитьТаблицуЭП();
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ПоместитьТекстУточненияВОбъект(ТекстУточнения)
	
	ЭлектронныйДокументОбъект = Объект.Ссылка.ПолучитьОбъект();
	ЭлектронныйДокументОбъект.ПричинаОтклонения = ТекстУточнения;
	ЭлектронныйДокументОбъект.Записать();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьВидимостьДополнительнойИнформации()
	
	ИнициализацияДереваНаСервере();
	
КонецПроцедуры

&НаСервере
Функция ЭДОАннулированИлиВПроцессе()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК Аннулирован
	|ИЗ
	|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЭДПрисоединенныеФайлы КАК ЭДВладелецЭД
	|		ПО ЭДПрисоединенныеФайлы.ЭлектронныйДокументВладелец = ЭДВладелецЭД.Ссылка
	|ГДЕ
	|	ЭДПрисоединенныеФайлы.Ссылка = &ЭД
	|	И ВЫБОР
	|			КОГДА ЭДВладелецЭД.Ссылка ЕСТЬ NULL 
	|				ТОГДА ЭДПрисоединенныеФайлы.СтатусЭД В (&СписокСтатусовСАннулированием)
	|			ИНАЧЕ ЭДВладелецЭД.СтатусЭД В (&СписокСтатусовСАннулированием)
	|		КОНЕЦ";
		
	МассивСостояний = Новый Массив;
	МассивСостояний.Добавить(Перечисления.СтатусыЭД.Аннулирован);
	МассивСостояний.Добавить(Перечисления.СтатусыЭД.ОтправленоПредложениеОбАннулировании);
	МассивСостояний.Добавить(Перечисления.СтатусыЭД.СформированоПредложениеОбАннулировании);
	МассивСостояний.Добавить(Перечисления.СтатусыЭД.ПолученоПредложениеОбАннулировании);
	Запрос.УстановитьПараметр("СписокСтатусовСАннулированием", МассивСостояний);
	Запрос.УстановитьПараметр("ЭД", ПрисоединенныйФайлСсылка);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		ВозвращаемоеЗначение = Ложь;
	Иначе
		ВозвращаемоеЗначение = Истина;
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьПредложениеОбАннулировании(ОтклонитьАннулирование)
	
	СсылкаНаЭД = ПолучитьЭлектронныйДокументВладелец();
	ЭлектронныеДокументыСлужебныйКлиент.ОбработатьПредложениеОбАннулировании(СсылкаНаЭД, ОтклонитьАннулирование);
	
	ИзменитьВидимостьДоступность();
	
КонецПроцедуры

&НаСервере
Функция ПолучитьЭлектронныйДокументВладелец()
	
	СсылкаНаЭД = Неопределено;
	
	ДокументВладелец = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПрисоединенныйФайлСсылка, "ЭлектронныйДокументВладелец");
	
	Если ЗначениеЗаполнено(ДокументВладелец) Тогда
		СсылкаНаЭД = ДокументВладелец;
	Иначе
		СсылкаНаЭД = ПрисоединенныйФайлСсылка;
	КонецЕсли;
	
	Возврат СсылкаНаЭД;
	
КонецФункции

&НаКлиенте
Процедура ОтклонитьАннулироватьЭД(Отклонить = Ложь)
	
	ПараметрыЭД = Новый Структура("Организация, Отклонить", Объект.Организация, Отклонить);
	Если ЭлектронныеДокументыСлужебныйКлиент.ОбработатьОтклонениеАннулированиеЭД(ПрисоединенныйФайлСсылка, ПараметрыЭД) Тогда
		
		Если Отклонить Тогда
			ЭДОтклонен = Истина;
			ИзменитьСтатусОтклонить();	
		КонецЕсли;
		
		ИзменитьВидимостьДоступность();
		ОбновитьСостояниеЭД();
		
		Оповестить("ОбновитьСостояниеЭД");
		
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Функция АннулированиеОтклонено()
	
	Результат = Ложь;
	
	СтрокиДерева = ДеревоПодчиненныеЭД.ПолучитьЭлементы();
	Если СтрокиДерева.Количество() = 0 Тогда
		Возврат Результат;
	КонецЕсли;
	
	Для Каждого СтрокаДерева Из СтрокиДерева[0].ПолучитьЭлементы() Цикл
		
		Если СтрокаДерева.ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.ПОА
			И (СтрокаДерева.СтатусЭД = Перечисления.СтатусыЭД.ОтклоненПолучателем
				ИЛИ СтрокаДерева.СтатусЭД = Перечисления.СтатусыЭД.Отклонен) Тогда
			
			Результат = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ЗавершитьЭДОСервере(Результат)
	
	НовоеСостояние = Перечисления.СостоянияВерсийЭД.ОбменЗавершен;
	
	ИзменяемыеДокументы = Новый Массив;
	ИзменяемыеДокументы.Добавить(Объект.Ссылка);
	
	ПараметрыЭД = Новый Структура;
	
	Если ПрисоединенныйФайлСсылка.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
		СтатусЭД = Перечисления.СтатусыЭД.Утвержден;
	Иначе
		СтатусЭД = Перечисления.СтатусыЭД.Доставлен;
	КонецЕсли;
	
		
	ПараметрыЭД.Вставить("СтатусЭД", СтатусЭД);
	ПараметрыЭД.Вставить("Описание", Результат);
	ЭлектронныеДокументыСлужебный.ИзменитьПоСсылкеПрисоединенныйФайл(ПрисоединенныйФайлСсылка, ПараметрыЭД, Ложь);
	
	ЭлектронныеДокументыСлужебный.ИзменитьСостояниеЭД(ИзменяемыеДокументы, НовоеСостояние);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДанныеФайлаВложения(АдресВременногоХранилищаВложения, ПрисоединенныйФайлСсылка, УникальныйИдентификатор)
	
	ДанныеФайла = Неопределено;
	Если ЭтоАдресВременногоХранилища(АдресВременногоХранилищаВложения) Тогда
		// Файл во временном хранилище
		ДанныеФайла = ПолучитьИзВременногоХранилища(АдресВременногоХранилищаВложения);
		ДанныеФайла.Вставить("Ссылка", Неопределено);
	ИначеЕсли ЗначениеЗаполнено(ПрисоединенныйФайлСсылка) Тогда
		// Файл записан в ИБ
		ДанныеФайла = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьДанныеФайла(ПрисоединенныйФайлСсылка, УникальныйИдентификатор);
		ДанныеФайла.Вставить("Ссылка", ПрисоединенныйФайлСсылка);
	КонецЕсли;
	
	Возврат ДанныеФайла;
	
КонецФункции

&НаСервере
Функция ЕстьСоглашение(ОбъектДокумент)
	
	ВыводитьСообщение = НЕ ЗначениеЗаполнено(Объект.Ссылка) ИЛИ Модифицированность;
	
	НастройкиЭД = ЭлектронныеДокументыСлужебный.ОпределитьНастройкиОбменаЭДПоИсточнику(ОбъектДокумент, ВыводитьСообщение,,ПрисоединенныйФайлСсылка,Объект.ВидЭД); 
	СоглашениеОпределялось = Истина;
	
	Если ЗначениеЗаполнено(НастройкиЭД) Тогда
		ОбъектДокумент.ДополнительныеСвойства.Вставить("ЕстьСоглашение", Истина);
		ОбъектДокумент.НастройкаЭДО = НастройкиЭД.СоглашениеЭД;
		ОбъектДокумент.ПрофильНастроекЭДО = НастройкиЭД.ПрофильНастроекЭДО;
		Возврат Истина;
	Иначе
		ОбъектДокумент.НастройкаЭДО = Справочники.СоглашенияОбИспользованииЭД.ПустаяСсылка();
		ОбъектДокумент.ПрофильНастроекЭДО = Справочники.ПрофилиНастроекЭДО.ПустаяСсылка();
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Функция ДобавитьВложениеИзВременногоХранилищаПослеЗаписиДокумента()
	
	ДанныеОбновлены = Ложь;
	Если ЭтоАдресВременногоХранилища(АдресВременногоХранилищаВложения) Тогда
		СтруктураФайла = ПолучитьИзВременногоХранилища(АдресВременногоХранилищаВложения);
		АдресВременногоХранилищаВложения = Неопределено;
		Если ТипЗнч(СтруктураФайла) = Тип("Структура") И СтруктураФайла.Свойство("СсылкаНаДвоичныеДанныеФайла") Тогда
			Если ЗначениеЗаполнено(ПрисоединенныйФайлСсылка) Тогда
				СтруктураФайла.Вставить("АдресФайлаВоВременномХранилище", СтруктураФайла.СсылкаНаДвоичныеДанныеФайла);
				СтруктураФайла.Вставить("АдресВременногоХранилищаТекста", "");
				СтруктураФайла.Вставить("ИмяБезРасширения",               СтруктураФайла.Наименование);

				ПрисоединенныеФайлы.ОбновитьПрисоединенныйФайл(ПрисоединенныйФайлСсылка, СтруктураФайла);
			КонецЕсли;
			ДобавитьОбновитьПрисоединенныеФайлыКСообщению(СтруктураФайла.СсылкаНаДвоичныеДанныеФайла);
			ДанныеОбновлены = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ДанныеОбновлены;
	
КонецФункции

&НаСервере
Процедура ДобавитьОбновитьПрисоединенныеФайлыКСообщению(АдресВХранилище = Неопределено)
	
	ПараметрыСоглашения = ЭлектронныеДокументыСлужебный.ОпределитьНастройкиОбменаЭДПоИсточнику(Объект.Ссылка);
	Если ЗначениеЗаполнено(ПараметрыСоглашения) Тогда
		ИдентификаторОрганизации = ПараметрыСоглашения.ИдентификаторОрганизации;
		ИдентификаторКонтрагента = ПараметрыСоглашения.ИдентификаторКонтрагента;
		СоглашениеЭД             = ПараметрыСоглашения.СоглашениеЭД;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыСоглашения) И НЕ ЗначениеЗаполнено(СоглашениеЭД) Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураДокумента = Новый Структура;
	Если ЗначениеЗаполнено(ПрисоединенныйФайлСсылка) Тогда
		ДобавленныйФайл = ПрисоединенныйФайлСсылка;
	Иначе
		Если НЕ (ЗначениеЗаполнено(ПрисоединенныйФайлИмяФайлаБезРасширения)
			И ЭтоАдресВременногоХранилища(АдресВХранилище)) Тогда
			Возврат;
		КонецЕсли;
		
		СсылкаНаФайл = Справочники.ЭДПрисоединенныеФайлы.ПолучитьСсылку(Новый УникальныйИдентификатор(Объект.УникальныйИД));
		
		ДобавленныйФайл = ПрисоединенныеФайлы.ДобавитьФайл(
			Объект.Ссылка,
			ПрисоединенныйФайлИмяФайлаБезРасширения,
			ПрисоединенныйФайлРасширение,
			ТекущаяДатаСеанса(),
			ТекущаяДатаСеанса(), 
			АдресВХранилище,
			,
			,
			СсылкаНаФайл);
		
		НомерДокумента = ЭлектронныеДокументыВнутренний.ВернутьИдЭД(ДобавленныйФайл);
		
		СтруктураДокумента.Вставить("НаименованиеФайла",   ПрисоединенныйФайлИмяФайлаБезРасширения);
		СтруктураДокумента.Вставить("ТипЭлементаВерсииЭД", Перечисления.ТипыЭлементовВерсииЭД.ПервичныйЭД);
		СтруктураДокумента.Вставить("НаправлениеЭД",       Перечисления.НаправленияЭД.Исходящий);
		СтруктураДокумента.Вставить("СтатусЭД",            Перечисления.СтатусыЭД.Сформирован);
		СтруктураДокумента.Вставить("Отправитель",         ИдентификаторОрганизации);
		СтруктураДокумента.Вставить("Получатель",          ИдентификаторКонтрагента);
		СтруктураДокумента.Вставить("НомерЭД",             НомерДокумента);
		СтруктураДокумента.Вставить("УникальныйИД",        НомерДокумента);
		СтруктураДокумента.Вставить("Контрагент",          ПараметрыСоглашения.Контрагент);
		СтруктураДокумента.Вставить("Организация",         ПараметрыСоглашения.Организация);
		СтруктураДокумента.Вставить("ПрофильНастроекЭДО",  ПараметрыСоглашения.ПрофильНастроекЭДО);
		СтруктураДокумента.Вставить("СоглашениеЭД",        ПараметрыСоглашения.СоглашениеЭД);
		СтруктураДокумента.Вставить("ВидЭД",               Объект.ВидЭД);

		ЭлектронныеДокументыСлужебный.ИзменитьПоСсылкеПрисоединенныйФайл(ДобавленныйФайл, СтруктураДокумента, Ложь);
		
		Для Каждого Строка Из Объект.ДокументыОснования Цикл
			ЭлектронныеДокументыСлужебный.УстановитьСсылкуДляВладельцаВРегистреСостояний(Строка.ДокументОснование, Объект.Ссылка);
		КонецЦикла;
		
	КонецЕсли;
	
	Прочитать();
	ОбновитьДанныеОВложении();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДокументыОснования(МассивОснований)
	
	ОсновнойДокумент = Неопределено;
	
	Объект.ДокументыОснования.Очистить();
	Для Каждого Основание Из МассивОснований Цикл
		НоваяСтрока = Объект.ДокументыОснования.Добавить();
		Если Найти(Основание.Метаданные().ПолноеИмя(), "ПрисоединенныеФайлы") > 0 Тогда
			НоваяСтрока.ДокументОснование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Основание, "ВладелецФайла");
		Иначе
			НоваяСтрока.ДокументОснование = Основание;
		КонецЕсли;
		
		Если ОсновнойДокумент = Неопределено Тогда
			ОсновнойДокумент = Основание;
		КонецЕсли;
	КонецЦикла;

	Если ОсновнойДокумент <> Неопределено Тогда
		ЗаполнитьПоДокументуОснованию(ОсновнойДокумент);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииДокументовОснованийНаСервере()

	ПерезаполнитьДокументыОснования();
	ВыполнитьОбработкуОповещенияНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииДокументовОснований()

	ПриИзмененииДокументовОснованийНаСервере();
	ОбновитьОтображениеДанных();

КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьДокументыОснования()

	Если Не Объект.Ссылка.Пустая() Тогда
		СохраненныеДокументыОснования = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Ссылка, "ДокументыОснования");
		
		Объект.ДокументыОснования.Очистить();
		Выборка = СохраненныеДокументыОснования.Выбрать();
		Пока Выборка.Следующий() Цикл
			НоваяСтрока = Объект.ДокументыОснования.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоДокументуОснованию(ДокументОснование)
	
	Если ЗначениеЗаполнено(ДокументОснование) Тогда
		Документ = РеквизитФормыВЗначение("Объект");
		Документ.Заполнить(ДокументОснование);
		ЗначениеВРеквизитФормы(Документ, "Объект");
			
		ДокументыОснования = Документ.ДокументыОснования.ВыгрузитьКолонку("ДокументОснование");
		Если ДокументыОснования.Количество() > 0 Тогда
			КлючПараметра = ДокументыОснования[0];
		КонецЕсли;
		
		АдресХранилища = ЭлектронныеДокументыСлужебный.ПараметрИзПараметрыКлиентаНаСервере(КлючПараметра);
		Если ЭтоАдресВременногоХранилища(АдресХранилища) Тогда
			АдресВременногоХранилищаВложения = АдресХранилища;
			// У документа уже есть сохраненное вложение, надо будет в нем обновить двоичные данные.
			ОбновитьДвоичныеДанныеФайла = ЗначениеЗаполнено(ПрисоединенныйФайлСсылка);
		КонецЕсли;
		Модифицированность = Истина;
	КонецЕсли;
	ОбновитьДанныеОВложении();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеОВложении()
	
	Если ЭтоАдресВременногоХранилища(АдресВременногоХранилищаВложения) Тогда
		СтруктураФайла = ПолучитьИзВременногоХранилища(АдресВременногоХранилищаВложения);
		Если ТипЗнч(СтруктураФайла) = Тип("Структура") И СтруктураФайла.Свойство("СсылкаНаДвоичныеДанныеФайла") Тогда
			ПрисоединенныйФайлРасширение  = ОбщегоНазначенияКлиентСервер.РасширениеБезТочки(СтруктураФайла.Расширение);
			ПрисоединенныйФайлИмяФайла    = СокрЛП(СтруктураФайла.ИмяФайла);
			ПрисоединенныйФайлИмяФайлаБезРасширения = СокрЛП(СтруктураФайла.Наименование);
			ПрисоединенныйФайлПиктограмма = РаботаСФайлами.ПолучитьИндексПиктограммыФайла(СтруктураФайла.Расширение);
			Элементы.ТекстВложение.Ширина  = СтрДлина(ПрисоединенныйФайлИмяФайла);
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ЗапросВложений = Новый Запрос;
		ЗапросВложений.УстановитьПараметр("ВладелецФайла", Объект.Ссылка);
		ЗапросВложений.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ЭДПрисоединенныеФайлы.Ссылка КАК Ссылка,
		|	ЭДПрисоединенныеФайлы.Наименование КАК ИмяФайла,
		|	ЭДПрисоединенныеФайлы.Расширение КАК Расширение,
		|	ЭДПрисоединенныеФайлы.Редактирует КАК Редактирует
		|ИЗ
		|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
		|ГДЕ
		|	ЭДПрисоединенныеФайлы.ВладелецФайла = &ВладелецФайла
		|	И ЭДПрисоединенныеФайлы.ТипЭлементаВерсииЭД = ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ПервичныйЭД)
		|	И НЕ ЭДПрисоединенныеФайлы.ПометкаУдаления";
		Результат = ЗапросВложений.Выполнить().Выбрать();
		
		Если Результат.Следующий() Тогда
			ПрисоединенныйФайлСсылка      = Результат.Ссылка;
			ПрисоединенныйФайлРасширение  = ОбщегоНазначенияКлиентСервер.РасширениеБезТочки(Результат.Расширение);
			ПрисоединенныйФайлИмяФайла    = СокрЛП(Результат.ИмяФайла) + "." + ПрисоединенныйФайлРасширение;
			ПрисоединенныйФайлИмяФайлаБезРасширения = СокрЛП(Результат.ИмяФайла);
			ПрисоединенныйФайлПиктограмма = РаботаСФайлами.ПолучитьИндексПиктограммыФайла(Результат.Расширение);
			Элементы.ТекстВложение.Ширина  = СтрДлина(ПрисоединенныйФайлИмяФайла);
			Если ЗначениеЗаполнено(Результат.Редактирует) И Результат.Редактирует = ПользователиКлиентСервер.АвторизованныйПользователь() Тогда
				ВложениеРедактируется = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	ИзменитьВидимостьДоступностьНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОсвободитьФайл()
	
	ДанныеФайла = ДанныеФайлаВложения(АдресВременногоХранилищаВложения, ПрисоединенныйФайлСсылка, УникальныйИдентификатор);
	
	Если НЕ ПроверитьДействиеРазрешено(ДанныеФайла) Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ДанныеФайла.ФайлРедактируется
	 ИЛИ НЕ ДанныеФайла.ФайлРедактируетТекущийПользователь Тогда
		Возврат;
	КонецЕсли;
	
	ОсвободитьФайлНаСервере(ДанныеФайла);
	Если ДанныеФайла.Ссылка = Неопределено Тогда
		АдресВременногоХранилищаВложения = ПоместитьВоВременноеХранилище(ДанныеФайла, УникальныйИдентификатор);
	Иначе
		ОповеститьОбИзменении(ДанныеФайла.Ссылка);
	КонецЕсли;
	УдалитьВременныйФайлВложения(ДанныеФайла);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОсвободитьФайлНаСервере(ДанныеФайла)
	
	Если ДанныеФайла.Ссылка = Неопределено Тогда
		ДанныеФайла.Редактирует                        = Справочники.Пользователи.ПустаяСсылка();
		ДанныеФайла.ФайлРедактируется                  = Ложь;
		ДанныеФайла.ФайлРедактируетТекущийПользователь = Ложь;
	Иначе
		ПрисоединенныеФайлыСлужебный.ОсвободитьФайл(ДанныеФайла.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакончитьРедактированиеВыполненоПомещение(ИнформацияОФайле, ДанныеФайла) Экспорт
	
	Если ДанныеФайла.Ссылка = Неопределено Тогда
		ДанныеФайла.Редактирует                        = ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка");
		ДанныеФайла.ФайлРедактируется                  = Ложь;
		ДанныеФайла.ФайлРедактируетТекущийПользователь = Ложь;
		ДанныеФайла.СсылкаНаДвоичныеДанныеФайла        = ИнформацияОФайле.АдресФайлаВоВременномХранилище;
		ЗаполнитьЗначенияСвойств(ДанныеФайла, ИнформацияОФайле);
		Если ТипЗнч(ИнформацияОФайле.АдресФайлаВоВременномХранилище) = Тип("ДвоичныеДанные") Тогда
			ДвоичныеДанные = ИнформацияОФайле.АдресФайлаВоВременномХранилище;
		Иначе
			ДвоичныеДанные = ПолучитьИзВременногоХранилища(ИнформацияОФайле.АдресФайлаВоВременномХранилище);
		КонецЕсли;
		ДанныеФайла.Размер = ДвоичныеДанные.Размер();
		АдресВременногоХранилищаВложения = ПоместитьВоВременноеХранилище(ДанныеФайла, УникальныйИдентификатор);
	Иначе
		ПоместитьФайлВХранилищеИОсвободить(ДанныеФайла.Ссылка, ИнформацияОФайле);
		ОповеститьОбИзменении(ДанныеФайла.Ссылка);
	КонецЕсли;
	
	УдалитьВременныйФайлВложения(ДанныеФайла);
	ОбновитьДанныеОВложении();
	ИзменитьВидимостьДоступностьНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакончитьРедактированиеЗавершить(Результат, ДополнительныеПараметры) Экспорт
	
	УдалитьВременныйФайлВложения(ДополнительныеПараметры.ДанныеФайла);
	
	Записать();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПоместитьФайлВХранилищеИОсвободить(Знач ПрисоединенныйФайл, Знач ИнформацияОФайле)
	
	ПрисоединенныеФайлы.ОбновитьПрисоединенныйФайл(ПрисоединенныйФайл, ИнформацияОФайле);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписьюПродолжитьПослеОсвобожденияВложения(Результат, ДополнительныеПараметры) Экспорт
	
	//Если Результат = Истина Тогда
	//	Записать();
	//Иначе
	//	ТекстСообщения = НСтр("ru = 'Во время выполнения операции произошла ошибка. Действие отменено.
	//		|Подробности см. в журнале регистрации.'");
	//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	//КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПроверитьЗахватНаРедактирование(Отказ = Ложь)
	
	ВложениеСвободно = Истина;
	ДанныеФайла = ДанныеФайлаВложения(АдресВременногоХранилищаВложения, ПрисоединенныйФайлСсылка, УникальныйИдентификатор);
	Если ДанныеФайла.ФайлРедактируется Тогда
		Если ДанныеФайла.ФайлРедактируетТекущийПользователь Тогда
			// Вложение захвачено для редактирования текущим пользователем
			ТекстВопроса = НСтр("ru = 'Вложение ""%1"" захвачено для редактирования.
				|Для продолжения надо завершить редактирование.'");
			ТекстВопроса = СтрЗаменить(ТекстВопроса, "%1", ПрисоединенныйФайлИмяФайла);
			СписокКнопок = Новый СписокЗначений;
			СписокКнопок.Добавить("ЗакончитьРедактирование", "Закончить редактирование");
			СписокКнопок.Добавить("Освободить", "Отменить редактирование");
			СписокКнопок.Добавить("Отменить", "Отменить");
			Результат = Вопрос(ТекстВопроса, СписокКнопок);
			Если Результат = "Освободить" Тогда
				ОсвободитьФайл();
			ИначеЕсли Результат = "ЗакончитьРедактирование" Тогда
				ИнформацияОФайле = Новый Структура;
				Если ПрисоединенныеФайлыСлужебныйКлиент.ПоместитьРедактируемыйФайлНаДискеВХранилище(ДанныеФайла, ИнформацияОФайле, УникальныйИдентификатор) Тогда
					ЗакончитьРедактированиеВыполненоПомещение(ИнформацияОФайле, ДанныеФайла);
				КонецЕсли;
			Иначе
				Отказ = Истина;
			КонецЕсли;
		Иначе
			ТекстПредупреждения = НСтр("ru = 'Действие недоступно, так как файл занят для редактирования
			                                 |другим пользователем.'");
			Предупреждение(ТекстПредупреждения);
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ВложениеСвободно;
	
КонецФункции

&НаКлиенте
Процедура УдалитьВременныйФайлВложения(ДанныеФайла)
	
	РабочийКаталогПользователя = РаботаСФайламиКлиент.РабочийКаталогПользователя();
	ПолноеИмяФайлаНаКлиенте = РабочийКаталогПользователя + ДанныеФайла.ОтносительныйПуть + ДанныеФайла.ИмяФайла;
	//НачатьУдалениеФайлов(, ПолноеИмяФайлаНаКлиенте); 
	
КонецПроцедуры

&НаКлиенте
Функция ПроверитьДействиеРазрешено(ДанныеФайла, Знач ТекущееДействие = "")
	
	Если ДанныеФайла = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ТекущееДействие = "ПометкаУдаления" И ДанныеФайла.ФайлРедактируется Тогда
		
		Если ДанныеФайла.ФайлРедактируетТекущийПользователь Тогда
			ТекстПредупреждения = НСтр("ru = 'Действие недоступно, так как файл занят для редактирования.'");
		Иначе
			ТекстПредупреждения = НСтр("ru = 'Действие недоступно, так как файл занят для редактирования
			                                 |другим пользователем.'");
		КонецЕсли;
		
		Предупреждение(ТекстПредупреждения);
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ЗанятьФайлДляРедактированияСервер(ДанныеФайла)
	
	Если ДанныеФайла.Ссылка = Неопределено Тогда
		ДанныеФайла.Редактирует                        = Пользователи.АвторизованныйПользователь();
		ДанныеФайла.ФайлРедактируется                  = Истина;
		ДанныеФайла.ФайлРедактируетТекущийПользователь = Истина;
	Иначе
		ПрисоединенныеФайлыСлужебный.ЗанятьФайлДляРедактированияСервер(ДанныеФайла.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	ПриИзмененииКлючевыхРеквизитов();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ПриИзмененииКлючевыхРеквизитов();
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииКлючевыхРеквизитов()
	
	НастройкиОбменаЭД = НастройкиОбменаЭД(Объект.ВидЭД, Объект.Организация, Объект.Контрагент);
	
	Объект.ТребуетсяПодтверждение = ?(ЗначениеЗаполнено(НастройкиОбменаЭД), НастройкиОбменаЭД.ТребуетсяПодтверждение, Ложь);
	Объект.ТребуетсяИзвещение     = ?(ЗначениеЗаполнено(НастройкиОбменаЭД), НастройкиОбменаЭД.ТребуетсяИзвещение,     Ложь);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НастройкиОбменаЭД(ВидЭД, Организация, Контрагент)
	
	Требуется = Ложь;
	
	ПараметрыЭД = Новый Структура();
	ПараметрыЭД.Вставить("ВидЭД", 		  ВидЭД);
	ПараметрыЭД.Вставить("Организация",   Организация);
	ПараметрыЭД.Вставить("Контрагент",	  Контрагент);
	ПараметрыЭД.Вставить("НаправлениеЭД", Перечисления.НаправленияЭД.Исходящий);
	
	НастройкиЭД = ЭлектронныеДокументыСлужебный.ОпределитьНастройкиОбменаЭД(ПараметрыЭД);
	
	Возврат НастройкиЭД;
	
КонецФункции

&НаСервере
Процедура ОбновитьВидимостьТранслитерации()
	
	Если Объект.ВидЭД = Перечисления.ВидыЭД.ПроизвольныйЭД Тогда
		Элементы.ТранслитироватьИмяФайла.Видимость = Истина;
		Элементы.ТранслитироватьИмяФайла.Пометка = Не ОтключитьТранслитерацию;
		Элементы.НадписьТранслитерация.Видимость = Не ОтключитьТранслитерацию;
	Иначе
		Элементы.ТранслитироватьИмяФайла.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ТабличныйДокументОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СтрокаЭП = ТаблицаЭП.Получить(Расшифровка - 1);
	
	ДобавитьСертификатВДоверенные(СтрокаЭП);
	
	Если СтрокаЭП <> Неопределено И НЕ СтрокаЭП.ОтсутствуетВСписке Тогда
		ПоказатьСертификат(СтрокаЭП.НомерСтроки, СтрокаЭП.Отпечаток);
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// НоваяАрхитектураЭДО

&НаСервереБезКонтекста
Функция ДокументыОснования(ЭлектронныйДокумент)
	
	Возврат ЭлектронныйДокумент.ДокументыОснования.Выгрузить().ВыгрузитьКолонку("ДокументОснование");
	
КонецФункции

&НаСервере
Процедура ИнициализацияДереваНаСервере()
	
	ДеревоПодчиненныеЭД.ПолучитьЭлементы().Очистить();
	
	НастройкиОбмена = Неопределено;
	СсылкаНаЭД = Неопределено;
	
	Если Объект.Ссылка.Пустая() Тогда
		НастройкиОбмена = Новый Структура;
		НастройкиОбмена.Вставить("ВидЭД",               Объект.ВидЭД);
		НастройкиОбмена.Вставить("НаправлениеЭД",       Перечисления.НаправленияЭД.Исходящий);
		НастройкиОбмена.Вставить("ВерсияРегламентаЭДО", Объект.ВерсияРегламентаЭДО);
		НастройкиОбмена.Вставить("СтатусЭД",            Перечисления.СтатусыЭД.ПустаяСсылка());
		НастройкиОбмена.Вставить("ПрофильНастроекЭДО",  Объект.ПрофильНастроекЭДО);
		НастройкиОбмена.Вставить("СоглашениеЭД",        Объект.НастройкаЭДО);
		НастройкиОбмена.Вставить("СпособОбменаЭД",      Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском);
		НастройкиОбмена.Вставить("ВерсияФорматаПакета", Перечисления.ВерсииФорматаПакетаЭД.Версия30);
		НастройкиОбмена.Вставить("СостояниеЭДО",        Объект.СостояниеЭДО);
		
		НастройкиОбмена.Вставить("ВерсияФормата",       "");
		НастройкиОбмена.Вставить("ТребуетсяИзвещение",     Истина);
		НастройкиОбмена.Вставить("ТребуетсяПодтверждение", Истина);
	Иначе
		СсылкаНаЭД = Объект.Ссылка;
	КонецЕсли;
	
	СоответствиеВладельцевИЭД = Новый Соответствие;
	СоответствиеВладельцевИЭД.Вставить(Объект.Ссылка, СсылкаНаЭД);
	
	ДеревоОбъект = РеквизитФормыВЗначение("ДеревоПодчиненныеЭД");
	
	ЭлектронныеДокументыСлужебный.СформироватьДеревьяЭД(ДеревоОбъект,СоответствиеВладельцевИЭД, НастройкиОбмена, Ложь, ОтключитьВыводДерева);
	ЭлектронныеДокументыСлужебный.СоздатьРеквизитыИЭлементыДляПечатныхФорм(ЭтаФорма, ДеревоОбъект);
	
	ЗначениеВРеквизитФормы(ДеревоОбъект, "ДеревоПодчиненныеЭД");
	
КонецПроцедуры
	
&НаКлиенте
Процедура ДеревоПодчиненныеЭДПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("ДеревоПодчиненныеЭДПослеАктивизацииСтроки",0.1,Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПодчиненныеЭДПослеАктивизацииСтроки()
	
	ТекСтрока = Элементы.ДеревоПодчиненныеЭД.ТекущиеДанные;
	Если ТекСтрока <> Неопределено И ЗначениеЗаполнено(ТекСтрока.Ссылка) Тогда
		Если Элементы.СтраницыЭД.ТекущаяСтраница <> Элементы["Страница" + ТекСтрока.ИмяРеквизита] Тогда
			Элементы.СтраницыЭД.ТекущаяСтраница = Элементы["Страница" + ТекСтрока.ИмяРеквизита];
			ПрисоединенныйФайлСсылка = ТекСтрока.Ссылка;
			ДеревоПодчиненныеЭДПослеАктивизацииСтрокиНаСервере();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДеревоПодчиненныеЭДПослеАктивизацииСтрокиНаСервере()
	
	Если ЗначениеЗаполнено(ПрисоединенныйФайлСсылка) Тогда
		
		СвойстваФайлаЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПрисоединенныйФайлСсылка, "СтатусЭД, ДополнительнаяИнформация");
		
		СтатусОтклонен = (СвойстваФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.Отклонен
			ИЛИ СвойстваФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.ОтклоненПолучателем
			ИЛИ СвойстваФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.ОшибкаПередачи);
			
		ТребуетсяПодпись = НеобходимоПодписать();
		ОбновитьСтатусЭД();
		ЗаполнитьТаблицуЭП();
		
		СопроводительнаяЗаписка = СвойстваФайлаЭД.ДополнительнаяИнформация;
	КонецЕсли;
	
	ПерезаполнитьКомментарии();
	ИзменитьВидимостьДоступностьНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура УстановитьТекущуюСтрокуДерева(ПрисоединенныйФайл)
	
	ИдентификаторСтроки = 0;
	Элементы.ДеревоПодчиненныеЭД.ТекущаяСтрока = ИдентификаторСтроки;
	
	ТекСтрока = ДеревоПодчиненныеЭД.НайтиПоИдентификатору(ИдентификаторСтроки);
	Если ТекСтрока <> Неопределено И ЗначениеЗаполнено(ТекСтрока.Ссылка) Тогда
		Если Элементы.СтраницыЭД.ТекущаяСтраница <> Элементы["Страница" + ТекСтрока.ИмяРеквизита] Тогда
			Элементы.СтраницыЭД.ТекущаяСтраница = Элементы["Страница" + ТекСтрока.ИмяРеквизита];
			ПрисоединенныйФайлСсылка = ТекСтрока.Ссылка;
			ДеревоПодчиненныеЭДПослеАктивизацииСтрокиНаСервере();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();


	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЭПСтатус.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаЭП.ПодписьВерна");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", Новый Цвет(255, 0, 0));


	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоПодчиненныеЭД.Имя);

	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоПодчиненныеЭД.Ссылка");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоПодчиненныеЭД.СтрокаДоступна");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;                                   	

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", Новый Цвет(190, 190, 190));


	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоПодчиненныеЭДСтатусЭД.Имя);

	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;

	ГруппаОтбора2 = ГруппаОтбора1.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора2.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоПодчиненныеЭД.ТипЭД");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке;
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ЭСФ);
	ОтборЭлемента.ПравоеЗначение = СписокЗначений;


	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоПодчиненныеЭД.СтатусЭД");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(Перечисления.СтатусыЭД.Получен);
	СписокЗначений.Добавить(Перечисления.СтатусыЭД.ПереданОператору);
	СписокЗначений.Добавить(Перечисления.СтатусыЭД.Отправлен);
	ОтборЭлемента.ПравоеЗначение = СписокЗначений;


	ГруппаОтбора2 = ГруппаОтбора1.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора2.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоПодчиненныеЭД.ТипЭД");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ЭСФ);
	ОтборЭлемента.ПравоеЗначение = СписокЗначений;


	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоПодчиненныеЭД.СтатусЭД");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(Перечисления.СтатусыЭД.Утвержден);
	СписокЗначений.Добавить(Перечисления.СтатусыЭД.Доставлен);
	ОтборЭлемента.ПравоеЗначение = СписокЗначений;


	ГруппаОтбора2 = ГруппаОтбора1.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора2.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоПодчиненныеЭД.ТипЭД");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ТОРГ12Покупатель);
	СписокЗначений.Добавить(Перечисления.ТипыЭлементовВерсииЭД.АктЗаказчик);
	ОтборЭлемента.ПравоеЗначение = СписокЗначений;


	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоПодчиненныеЭД.СтатусЭД");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(Перечисления.СтатусыЭД.Доставлен);
	СписокЗначений.Добавить(Перечисления.СтатусыЭД.Получен);
	ОтборЭлемента.ПравоеЗначение = СписокЗначений;


	ГруппаОтбора2 = ГруппаОтбора1.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора2.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоПодчиненныеЭД.ВидЭД");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(Перечисления.ВидыЭД.ТОРГ12Продавец);
	СписокЗначений.Добавить(Перечисления.ВидыЭД.АктИсполнитель);
	ОтборЭлемента.ПравоеЗначение = СписокЗначений;


	ГруппаОтбора3 = ГруппаОтбора2.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора3.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;

	ГруппаОтбора4 = ГруппаОтбора3.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора4.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

	ОтборЭлемента = ГруппаОтбора4.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоПодчиненныеЭД.НаправлениеЭД");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.НаправленияЭД.Входящий;


	ОтборЭлемента = ГруппаОтбора4.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоПодчиненныеЭД.СтатусЭД");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СтатусыЭД.Утвержден;


	ОтборЭлемента = ГруппаОтбора3.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоПодчиненныеЭД.СтатусЭД");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(Перечисления.СтатусыЭД.ПолученоПодтверждение);
	ОтборЭлемента.ПравоеЗначение = СписокЗначений;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Green);

	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоПодчиненныеЭДПредставление.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоПодчиненныеЭДСтатусЭД.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоПодчиненныеЭД.АктуальныйЭД");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт( , , Истина));

	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоПодчиненныеЭДСтатусЭД.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоПодчиненныеЭД.ДатаЭДБольшеАктуального");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийОшибкуТекст);

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	ЗаполнитьПоДокументуОснованию(ВыбранноеЗначение);
	ОбновитьОтображениеДанных();
	Модифицированность = Истина;

КонецПроцедуры

Функция СоответствиеНациональногоАлфавитаИЛатиницы()
	// Транслитерация, используемая в загранпаспортах 1997-2010.
	Соответствие = Новый Соответствие;
	Соответствие.Вставить("а","a");
	Соответствие.Вставить("б","b");
	Соответствие.Вставить("в","v");
	Соответствие.Вставить("г","g");
	Соответствие.Вставить("д","d");
	Соответствие.Вставить("е","e");
	Соответствие.Вставить("ё","e");
	Соответствие.Вставить("ж","zh");
	Соответствие.Вставить("з","z");
	Соответствие.Вставить("и","i");
	Соответствие.Вставить("й","y");
	Соответствие.Вставить("к","k");
	Соответствие.Вставить("л","l");
	Соответствие.Вставить("м","m");
	Соответствие.Вставить("н","n");
	Соответствие.Вставить("о","o");
	Соответствие.Вставить("п","p");
	Соответствие.Вставить("р","r");
	Соответствие.Вставить("с","s");
	Соответствие.Вставить("т","t");
	Соответствие.Вставить("у","u");
	Соответствие.Вставить("ф","f");
	Соответствие.Вставить("х","kh");
	Соответствие.Вставить("ц","ts");
	Соответствие.Вставить("ч","ch");
	Соответствие.Вставить("ш","sh");
	Соответствие.Вставить("щ","shch");
	Соответствие.Вставить("ъ",""); // пропускается
	Соответствие.Вставить("ы","y");
	Соответствие.Вставить("ь",""); // пропускается
	Соответствие.Вставить("э","e");
	Соответствие.Вставить("ю","yu");
	Соответствие.Вставить("я","ya");
	
	Возврат Соответствие;
КонецФункции

// Преобразует исходную строку в транслит.
// Может использоваться для отправки SMS сообщений латиницей или для сохранения
// файлов и папок, чтобы обеспечить возможность их переноса между разными операционными системами.
// Обратное преобразование из латинских символов не предусмотрено.
//
// Параметры:
//  Значение - Строка - произвольная строка.
//
// Возвращаемое значение:
//  Строка - строка, в которой кириллица заменена на транслит.
//
Функция СтрокаЛатиницей(Знач Значение)
	Результат = "";
	
	Соответствие = СоответствиеНациональногоАлфавитаИЛатиницы();
	
	Для Позиция = 1 По СтрДлина(Значение) Цикл
		Символ = Сред(Значение, Позиция, 1);
		СимволЛатиницей = Соответствие[НРег(Символ)]; // Поиск соответствия без учета регистра.
		Если СимволЛатиницей = Неопределено Тогда
			// Другие символы остаются "как есть".
			СимволЛатиницей = Символ;
		Иначе
			Если Символ = ВРег(Символ) Тогда
				СимволЛатиницей = ТРег(СимволЛатиницей); // восстанавливаем регистр
			КонецЕсли;
		КонецЕсли;
		Результат = Результат + СимволЛатиницей;
	КонецЦикла;
	
	Возврат Результат;
КонецФункции
