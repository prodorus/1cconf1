
////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// В функции описано, какие данные следует сохранять в шаблоне
Функция СтруктураДополнительныхДанныхФормы() Экспорт
	
	Возврат ХранилищаНастроек.ДанныеФорм.СформироватьСтруктуруДополнительныхДанных("Товары,ВозвратнаяТара,Услуги");
	
КонецФункции

// Возвращаяет массив документов, для которых выписка счетов-фактур не требуется
//
Функция ОпределитьСчетФактураТребуются(МассивОбъектов) Экспорт
	
	ДокументыСчетФактураНеТребуется = Новый Массив;
	
	Если НЕ ЗначениеЗаполнено(МассивОбъектов) Тогда
		Возврат ДокументыСчетФактураНеТребуется;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РеализацияТоваровУслуг.Ссылка КАК Ссылка,
	|	ИСТИНА КАК ЕстьНДС
	|ПОМЕСТИТЬ ВТ_ДокументыСНДС
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслуг
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка В(&МассивОбъектов)
	|	И РеализацияТоваровУслуг.СуммаНДС > 0
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РеализацияТоваровУслуг.Ссылка,
	|	ИСТИНА
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслуг
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка В(&МассивОбъектов)
	|	И РеализацияТоваровУслуг.СуммаНДС > 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Ссылка,
	|	РеализацияТоваровУслуг.Дата,
	|	РеализацияТоваровУслуг.Организация,
	|	ЕСТЬNULL(ВТ_ДокументыСНДС.ЕстьНДС, ЛОЖЬ) КАК ЕстьНДС
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДокументыСНДС КАК ВТ_ДокументыСНДС
	|		ПО (ВТ_ДокументыСНДС.Ссылка = РеализацияТоваровУслуг.Ссылка)
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка В(&МассивОбъектов)
	|	И РеализацияТоваровУслуг.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРеализацияТоваров.ОтгрузкаБезПереходаПраваСобственности)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Ссылка
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка В(&МассивОбъектов)
	|	И РеализацияТоваровУслуг.ДоговорКонтрагента.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СКомиссионером)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Ссылка,
	|	РеализацияТоваровУслуг.Дата,
	|	РеализацияТоваровУслуг.Организация,
	|	ЕСТЬNULL(ВТ_ДокументыСНДС.ЕстьНДС, ЛОЖЬ) КАК ЕстьНДС
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДокументыСНДС КАК ВТ_ДокументыСНДС
	|		ПО РеализацияТоваровУслуг.Ссылка = ВТ_ДокументыСНДС.Ссылка
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка В(&МассивОбъектов)
	|	И РеализацияТоваровУслуг.ВидОперации <> ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРеализацияТоваров.ОтгрузкаБезПереходаПраваСобственности)
	|	И РеализацияТоваровУслуг.ДоговорКонтрагента.ВидДоговора <> ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СКомиссионером)";
	
	Результат = Запрос.ВыполнитьПакет();
	
	// Отгрузки без перехода права собственности
	Выборка = Результат[1].Выбрать();
	Пока Выборка.Следующий() Цикл
		
		УчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(Выборка.Дата, Выборка.Организация);
	   	Если НЕ ЗначениеЗаполнено(УчетнаяПолитика) Тогда
			ДокументыСчетФактураНеТребуется.Добавить(Выборка.Ссылка);
		ИначеЕсли НЕ УчетнаяПолитика.НачислятьНДСПоОтгрузке Тогда
			ДокументыСчетФактураНеТребуется.Добавить(Выборка.Ссылка);
		ИначеЕсли НЕ Выборка.ЕстьНДС И УчетнаяПолитика.УСН Тогда
			ДокументыСчетФактураНеТребуется.Добавить(Выборка.Ссылка);
		КонецЕсли;
 		
	КонецЦикла;
	
	// Отгрузки по договорам комиссии
	Выборка = Результат[2].Выбрать();
	Пока Выборка.Следующий() Цикл
		ДокументыСчетФактураНеТребуется.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	// Прочие реализации
	Выборка = Результат[3].Выбрать();
	Пока Выборка.Следующий() Цикл
		
		УчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(Выборка.Дата, Выборка.Организация);
	   	Если НЕ ЗначениеЗаполнено(УчетнаяПолитика) Тогда
			ДокументыСчетФактураНеТребуется.Добавить(Выборка.Ссылка);
        ИначеЕсли НЕ Выборка.ЕстьНДС И УчетнаяПолитика.УСН Тогда
			ДокументыСчетФактураНеТребуется.Добавить(Выборка.Ссылка);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ДокументыСчетФактураНеТребуется;
	
КонецФункции

// Сформировать печатные формы объектов
//
// ВХОДЯЩИЕ:
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать
//
// ИСХОДЯЩИЕ:
//   КоллекцияПечатныхФорм - Таблица значений - Сформированные табличные документы
//   ОшибкиПечати          - Список значений  - Ошибки печати  (значение - ссылка на объект, представление - текст ошибки)
//   ОбъектыПечати         - Список значений  - Объекты печати (значение - ссылка на объект, представление - имя области в которой был выведен объект)
//   ПараметрыВывода       - Структура        - Параметры сформированных табличных документов
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	ПараметрыВывода.ДоступнаПечатьПоКомплектно = Истина;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Акт") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "Акт", "Акт выполненных работ (вал.)", ПечатьАктаОбОказанииУслуг(МассивОбъектов, ОбъектыПечати, Ложь));
	КонецЕсли;
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "АктРуб") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "АктРуб", "Акт выполненных работ (руб.)", ПечатьАктаОбОказанииУслуг(МассивОбъектов, ОбъектыПечати, Истина));
	КонецЕсли;
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Накладная") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "Накладная", "Расходная накладная (вал.)", ПечатьДокумента(МассивОбъектов, ОбъектыПечати, Ложь));
	КонецЕсли;
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "НакладнаяРуб") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "НакладнаяРуб", "Расходная накладная (руб.)", ПечатьДокумента(МассивОбъектов, ОбъектыПечати, Истина));
	КонецЕсли;
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "М15") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "М15", "М-15 (Накладная)", ПечатьМ15(МассивОбъектов, ОбъектыПечати));
	КонецЕсли;
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ТОРГ12_БезУслуг") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ТОРГ12_БезУслуг", "ТОРГ-12 (Товарная накладная)", ПечатьТОРГ12(МассивОбъектов, ОбъектыПечати, Истина));
	КонецЕсли;
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ТОРГ12") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ТОРГ12", "ТОРГ-12 (Товарная накладная с услугами)", ПечатьТОРГ12(МассивОбъектов, ОбъектыПечати, Ложь));
	КонецЕсли;
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "УниверсальныйПередаточныйДокумент") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "УниверсальныйПередаточныйДокумент", 
			"Универсальный передаточный документ", ПечатьУниверсальныхПередаточныхДокументов(МассивОбъектов, ОбъектыПечати));
	КонецЕсли;
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "АктНаПередачуПрав") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "АктНаПередачуПрав", "Акт на передачу прав", ПечатьАктаНаПередачуПрав(МассивОбъектов, ОбъектыПечати));
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ПЕЧАТИ

// Функция формирует табличный документ с печатной формой акта об
// обказании услуг
//
// Возвращаемое значение:
//  Табличный документ - печатная форма акта
//
Функция ПечатьАктаОбОказанииУслуг(МассивОбъектов, ОбъектыПечати, СуммыВРублях = Ложь)
	
	мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");
	
	ЗапросШапка = Новый Запрос;
	ЗапросШапка.Текст =
	"ВЫБРАТЬ
	|	РТиУ.Номер,
	|	РТиУ.Дата,
	|	РТиУ.ДоговорКонтрагента,
	|	РТиУ.Контрагент КАК Получатель,
	|	РТиУ.Организация КАК Поставщик,
	|	РТиУ.Организация,
	|	РТиУ.СуммаДокумента,
	|	РТиУ.ВалютаДокумента,
	|	РТиУ.УчитыватьНДС,
	|	РТиУ.СуммаВключаетНДС,
	|	РТиУ.КратностьВзаиморасчетов,
	|	РТиУ.КурсВзаиморасчетов,
	|	РТиУ.ОтпускРазрешил,
	|	РТиУ.ЗаРуководителяПоПриказу,
	|	РТиУ.Организация.НаименованиеПолное КАК ПоставщикПолноеНаименование
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РТиУ
	|ГДЕ
	|	РТиУ.Ссылка = &ТекущийДокумент";
	
	СтрокаВыборкиПоляСодержания = ОбработкаТабличныхЧастей.ПолучитьЧастьЗапросаДляВыбораСодержания("РеализацияТоваровУслуг");
	
	ЗапросУслуги = Новый Запрос;
	ЗапросУслуги.Текст = "
	|ВЫБРАТЬ
	|	Номенклатура КАК Номенклатура,
	|	" + СтрокаВыборкиПоляСодержания + " КАК Товар,
	|	СУММА(Количество) КАК Количество,
	|	ВЫБОР
	|		КОГДА
	|			Номенклатура.ЕдиницаХраненияОстатков.Представление ЕСТЬ NULL
	|		ТОГДА
	|			Номенклатура.БазоваяЕдиницаИзмерения.Представление
	|		ИНАЧЕ
	|			Номенклатура.ЕдиницаХраненияОстатков.Представление
	|	КОНЕЦ КАК ЕдиницаИзмерения,
	|	Цена * &Курс / &Кратность КАК Цена,
	|	СУММА(Сумма * &Курс / &Кратность) КАК Сумма,
	|	СтавкаНДС,
	|	СУММА(СуммаНДС * &Курс / &Кратность) КАК СуммаНДС,
	|	ПроцентСкидкиНаценки КАК Скидка,
	|	МИНИМУМ(НомерСтроки) КАК НомерСтроки
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслуг
	|
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент
	|
	|СГРУППИРОВАТЬ ПО
	|	Номенклатура,
	|	" + СтрокаВыборкиПоляСодержания + ",
	|	Количество,
	|	ВЫБОР
	|		КОГДА
	|			Номенклатура.ЕдиницаХраненияОстатков.Представление ЕСТЬ NULL
	|		ТОГДА
	|			Номенклатура.БазоваяЕдиницаИзмерения.Представление
	|		ИНАЧЕ
	|			Номенклатура.ЕдиницаХраненияОстатков.Представление
	|	КОНЕЦ,
	|	Цена * &Курс / &Кратность,
	|	СтавкаНДС,
	|	ПроцентСкидкиНаценки
	|
	|УПОРЯДОЧИТЬ ПО НомерСтроки";
	
	ЗапросКурсАванса = Новый Запрос;
	ЗапросКурсАванса.Текст =
	"ВЫБРАТЬ
	|	Док.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
	|	Док.СуммаРегл КАК СуммаРегл
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.ДокументыРасчетовСКонтрагентом КАК Док
	|ГДЕ
	|	Док.Ссылка = &ТекущийДокумент
	|ИТОГИ
	|	СУММА(СуммаВзаиморасчетов),
	|	СУММА(СуммаРегл)
	|ПО
	|	ОБЩИЕ";
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РеализацияТоваровУслуг_Акт";
	ПервыйДокумент = Истина;

	Для Каждого Ссылка Из МассивОбъектов Цикл
	
		ЗапросШапка.УстановитьПараметр("ТекущийДокумент", Ссылка);
		Шапка = ЗапросШапка.Выполнить().Выбрать();
		Шапка.Следующий();
	
		ЗапросУслуги.УстановитьПараметр("ТекущийДокумент", Ссылка);
	
		// Вычислим курс документа для печати
		Если СуммыВРублях И Шапка.ВалютаДокумента <> мВалютаРегламентированногоУчета Тогда
		
			ЗапросКурсАванса.УстановитьПараметр("ТекущийДокумент", Ссылка);
			
			Выборка = ЗапросКурсАванса.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Если Выборка.Следующий() Тогда
				КурсОплаты                 = ?(Выборка.СуммаВзаиморасчетов = 0, 0, Выборка.СуммаРегл / Выборка.СуммаВзаиморасчетов);
				ВыборкаСуммаВзаиморасчетов = Выборка.СуммаВзаиморасчетов;
				ВыборкаСуммаРегл           = Выборка.СуммаРегл;
			Иначе
				КурсОплаты                 = 0;
				ВыборкаСуммаВзаиморасчетов = 0;
				ВыборкаСуммаРегл           = 0;
			КонецЕсли;
			
			СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(УчетНДС.ПолучитьСуммуДокументаСНДС(Ссылка, "Услуги"),
			Шапка.ВалютаДокумента, Шапка.ДоговорКонтрагента.ВалютаВзаиморасчетов,
			ЗаполнениеДокументов.КурсДокумента(Ссылка, мВалютаРегламентированногоУчета), Шапка.КурсВзаиморасчетов,
			ЗаполнениеДокументов.КратностьДокумента(Ссылка, мВалютаРегламентированногоУчета), Шапка.КратностьВзаиморасчетов);
			НеоплаченнаяСумма = СуммаВзаиморасчетов - ВыборкаСуммаВзаиморасчетов;
			Если НеоплаченнаяСумма > 0 Тогда
				КурсДляПечати = (НеоплаченнаяСумма * Шапка.КурсВзаиморасчетов + ВыборкаСуммаРегл)/(НеоплаченнаяСумма + ВыборкаСуммаВзаиморасчетов);
			Иначе
				КурсДляПечати = КурсОплаты;
			КонецЕсли;
			
			Если КурсДляПечати = 0 Тогда
				ЗапросУслуги.УстановитьПараметр("Курс",      Ссылка.КурсВзаиморасчетов);
				ЗапросУслуги.УстановитьПараметр("Кратность", ?(Шапка.КратностьВзаиморасчетов=0, 1, Ссылка.КратностьВзаиморасчетов));
			Иначе
				ЗапросУслуги.УстановитьПараметр("Курс",      КурсДляПечати);
				ЗапросУслуги.УстановитьПараметр("Кратность", 1);
			КонецЕсли;
			
		Иначе
			
			// Пересчитывать цену и сумму не надо, т.к.
			// - либо документ оформлен и выводится в рублях
			// - либо документ выводится в той же валюте, в которой он оформлен
			ЗапросУслуги.УстановитьПараметр("Курс",      1);
			ЗапросУслуги.УстановитьПараметр("Кратность", 1);
			
		КонецЕсли;
	
		ТаблицаУслуги = ЗапросУслуги.Выполнить().Выгрузить();
	
		Макет       = ПолучитьМакет("Акт");
		Если Не ПервыйДокумент Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;
	
		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		ОбластьМакета.Параметры.ТекстЗаголовка = ОбщегоНазначения.СформироватьЗаголовокДокумента(Шапка, "Акт");
		ТабДокумент.Вывести(ОбластьМакета);
	
		ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
		ПредставлениеПоставщика = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата), "ПолноеНаименование,");
		ОбластьМакета.Параметры.ПредставлениеПоставщика = ПредставлениеПоставщика;
		ОбластьМакета.Параметры.Поставщик = Шапка.Поставщик;
		ТабДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
		ПредставлениеПолучателя = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Получатель, Шапка.Дата), "ПолноеНаименование,");
		ОбластьМакета.Параметры.ПредставлениеПолучателя = ПредставлениеПолучателя;
		ОбластьМакета.Параметры.Получатель = Шапка.Получатель;
		ТабДокумент.Вывести(ОбластьМакета);
	
		// Если количество строк с нулевой скидкой меньше общего количества строк, то в документе есть скидки
		ЕстьСкидки = (ТаблицаУслуги.НайтиСтроки(Новый Структура("Скидка", 0)).Количество() < ТаблицаУслуги.Количество());
		
		// Вывести табличную часть
		Если ЕстьСкидки  Тогда
			ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицыСоСкидкой");
			ОбластьСтроки = Макет.ПолучитьОбласть("СтрокаСоСкидкой");
		Иначе
			ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицы");
			ОбластьСтроки = Макет.ПолучитьОбласть("Строка");
		КонецЕсли;
	
		ТабДокумент.Вывести(ОбластьМакета);
		НомерСтроки = 0;
		
		Для Каждого СтрокаТабличнойЧасти Из ТаблицаУслуги Цикл	
			
			НомерСтроки = НомерСтроки + 1;
			
			ОбластьСтроки.Параметры.Заполнить(СтрокаТабличнойЧасти);
			ОбластьСтроки.Параметры.НомерСтроки = НомерСтроки;
			ОбластьСтроки.Параметры.Товар 		= СокрЛП(СтрокаТабличнойЧасти.Товар);
			
			Если ЕстьСкидки Тогда
				Скидка = Ценообразование.ПолучитьСуммуСкидки(СтрокаТабличнойЧасти.Сумма, СтрокаТабличнойЧасти.Скидка);
				ОбластьСтроки.Параметры.Скидка         = Скидка;
				ОбластьСтроки.Параметры.СуммаБезСкидки = ОбщегоНазначения.ФорматСумм(СтрокаТабличнойЧасти.Сумма + Скидка);
			КонецЕсли;
			
			ТабДокумент.Вывести(ОбластьСтроки);
			
		КонецЦикла;
	
		Сумма    = ТаблицаУслуги.Итог("Сумма");
		СуммаНДС = ТаблицаУслуги.Итог("СуммаНДС");
		
		ОбластьМакета = Макет.ПолучитьОбласть("Итого");
		ОбластьМакета.Параметры.Всего = ОбщегоНазначения.ФорматСумм(Сумма);
		ТабДокумент.Вывести(ОбластьМакета);
		
		Если Шапка.УчитыватьНДС Тогда
			
			ОбластьМакета = Макет.ПолучитьОбласть("ИтогоНДС");
			ОбластьМакета.Параметры.ВсегоНДС = ОбщегоНазначения.ФорматСумм(СуммаНДС);
			ОбластьМакета.Параметры.НДС      = ?(Шапка.СуммаВключаетНДС, "В том числе НДС", " Сумма НДС");
			ТабДокумент.Вывести(ОбластьМакета);
			
		КонецЕсли;
	
		ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
		
		СуммаКПрописи 	= Сумма + ?(Шапка.СуммаВключаетНДС, 0, СуммаНДС);
		ВалютаДляПечати = ?(СуммыВРублях, мВалютаРегламентированногоУчета, Шапка.ВалютаДокумента);
		
		ОбластьМакета.Параметры.ИтоговаяСтрока = "Всего оказано услуг " + НомерСтроки
		+ ", на сумму " + ОбщегоНазначения.ФорматСумм(СуммаКПрописи, ВалютаДляПечати);
		ОбластьМакета.Параметры.СуммаПрописью  = ОбщегоНазначения.СформироватьСуммуПрописью(СуммаКПрописи,  ВалютаДляПечати);
		
		ТабДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
		Руководители = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизаций(Шапка.Поставщик, Шапка.Дата);
		Если Руководители.РуководительДолжность = "" Тогда 
			ДолжностьИНазваниеОрганизации = Шапка.ПоставщикПолноеНаименование;
		Иначе 
			ДолжностьРук = Руководители.РуководительДолжность;
			ДолжностьИНазваниеОрганизации = ?(НЕ ЗначениеЗаполнено(ДолжностьРук), Шапка.ПоставщикПолноеНаименование, ДолжностьРук + " " + Шапка.ПоставщикПолноеНаименование);
		КонецЕсли;
	
		Если ЗначениеЗаполнено(Шапка.ОтпускРазрешил) И Шапка.ОтпускРазрешил <> Руководители.Руководитель Тогда 
			ЗаместительПоПриказу = "("+ОбщегоНазначения.ФамилияИнициалыФизЛица(Шапка.ОтпускРазрешил) + " " + Шапка.ЗаРуководителяПоПриказу+")";
		Иначе 
			ЗаместительПоПриказу = Руководители.Руководитель;
		КонецЕсли;
		
		ОбластьМакета.Параметры.ДолжностьИНазваниеОрганизации 	= ДолжностьИНазваниеОрганизации;
		ОбластьМакета.Параметры.ЗаместительПоПриказу 			= ЗаместительПоПриказу;
		ТабДокумент.Вывести(ОбластьМакета);
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент, НомерСтрокиНачало, ОбъектыПечати, Ссылка);
		
	КонецЦикла;

	Возврат ТабДокумент;
	
КонецФункции // ПечатьАктаОбОказанииУслуг()

// Функция формирует табличный документ с печатной формой накладной,
// разработанной методистами
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьДокумента(МассивОбъектов, ОбъектыПечати, СуммыВРублях = Ложь)
	
	мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");
	
	ТекстЗапросаШапка = 
	"ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Номер,
	|	РеализацияТоваровУслуг.Дата,
	|	РеализацияТоваровУслуг.ДоговорКонтрагента,
	|	РеализацияТоваровУслуг.Контрагент КАК Получатель,
	|	РеализацияТоваровУслуг.Организация,
	|	РеализацияТоваровУслуг.Организация КАК Поставщик,
	|	РеализацияТоваровУслуг.СуммаДокумента,
	|	РеализацияТоваровУслуг.ВалютаДокумента,
	|	РеализацияТоваровУслуг.УчитыватьНДС,
	|	РеализацияТоваровУслуг.СуммаВключаетНДС,
	|	РеализацияТоваровУслуг.ОтпускПроизвел,
	|	РеализацияТоваровУслуг.КурсВзаиморасчетов,
	|	РеализацияТоваровУслуг.КратностьВзаиморасчетов
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент";
	
	СтрокаВыборкиПоляСодержания = ОбработкаТабличныхЧастей.ПолучитьЧастьЗапросаДляВыбораСодержания("РеализацияТоваровУслуг");
	
	ТекстЗапросаТовары = 
		"ВЫБРАТЬ
	|	ВложенныйЗапросПоТоварам.Номенклатура,
	|	ВЫРАЗИТЬ(ВложенныйЗапросПоТоварам.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК Товар,
	|	ВложенныйЗапросПоТоварам.Номенклатура.Код КАК Код,
	|	ВложенныйЗапросПоТоварам.Номенклатура.Артикул КАК Артикул,
	|	ВложенныйЗапросПоТоварам.Количество,
	|	ВложенныйЗапросПоТоварам.КоличествоМест,
	|	ВложенныйЗапросПоТоварам.ЕдиницаИзмерения.Представление КАК ЕдиницаЦены,
	|	ВложенныйЗапросПоТоварам.ЕдиницаИзмеренияМест.Представление КАК ЕдиницаМест,
	|	ВложенныйЗапросПоТоварам.Цена,
	|	ВложенныйЗапросПоТоварам.Сумма,
	|	ВложенныйЗапросПоТоварам.СуммаНДС,
	|	ВложенныйЗапросПоТоварам.ПроцентСкидкиНаценки КАК Скидка,
	|	ВложенныйЗапросПоТоварам.ПроцентАвтоматическихСкидок КАК АвтоматическаяСкидка,
	|	ВложенныйЗапросПоТоварам.ХарактеристикаНоменклатуры КАК Характеристика,
	|	ВложенныйЗапросПоТоварам.СтранаПроисхождения КАК СтранаПроисхождения,
	|	ВложенныйЗапросПоТоварам.НомерГТД КАК НомерГТД,
	|	ВложенныйЗапросПоТоварам.СерияНоменклатуры КАК Серия,
	|	ВложенныйЗапросПоТоварам.НомерСтроки КАК НомерСтроки,
	|	ВложенныйЗапросПоТоварам.Метка КАК Метка
	|ИЗ
	|	(ВЫБРАТЬ
	|		РеализацияТоваровУслуг.Номенклатура КАК Номенклатура,
	|		РеализацияТоваровУслуг.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|		РеализацияТоваровУслуг.ЕдиницаИзмеренияМест КАК ЕдиницаИзмеренияМест,
	|		РеализацияТоваровУслуг.Цена КАК Цена,
	|		РеализацияТоваровУслуг.СтавкаНДС КАК СтавкаНДС,
	|		РеализацияТоваровУслуг.ПроцентСкидкиНаценки КАК ПроцентСкидкиНаценки,
	|		РеализацияТоваровУслуг.ПроцентАвтоматическихСкидок КАК ПроцентАвтоматическихСкидок,
	|		РеализацияТоваровУслуг.СерияНоменклатуры.НомерГТД КАК НомерГТД,
	|		РеализацияТоваровУслуг.СерияНоменклатуры.СтранаПроисхождения КАК СтранаПроисхождения,
	|		РеализацияТоваровУслуг.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|		РеализацияТоваровУслуг.СерияНоменклатуры КАК СерияНоменклатуры,
	|		СУММА(РеализацияТоваровУслуг.Количество) КАК Количество,
	|		СУММА(РеализацияТоваровУслуг.КоличествоМест) КАК КоличествоМест,
	|		СУММА(РеализацияТоваровУслуг.Сумма) КАК Сумма,
	|		СУММА(РеализацияТоваровУслуг.СуммаНДС) КАК СуммаНДС,
	|		МИНИМУМ(РеализацияТоваровУслуг.НомерСтроки) КАК НомерСтроки,
	|		0 КАК Метка
	|	ИЗ
	|		Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслуг
	|	ГДЕ
	|		РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент
	|	
	|	СГРУППИРОВАТЬ ПО
	|		РеализацияТоваровУслуг.Номенклатура,
	|		РеализацияТоваровУслуг.ЕдиницаИзмерения,
	|		РеализацияТоваровУслуг.ЕдиницаИзмеренияМест,
	|		РеализацияТоваровУслуг.Цена,
	|		РеализацияТоваровУслуг.СтавкаНДС,
	|		РеализацияТоваровУслуг.ПроцентСкидкиНаценки,
	|		РеализацияТоваровУслуг.ПроцентАвтоматическихСкидок,
	|		РеализацияТоваровУслуг.СерияНоменклатуры,
	|		РеализацияТоваровУслуг.ХарактеристикаНоменклатуры,
	|		РеализацияТоваровУслуг.СерияНоменклатуры.НомерГТД,
	|		РеализацияТоваровУслуг.СерияНоменклатуры.СтранаПроисхождения) КАК ВложенныйЗапросПоТоварам
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	" + СтрокаВыборкиПоляСодержания + ",
	|	" + СтрокаВыборкиПоляСодержания + ",
	|	РеализацияТоваровУслуг.Номенклатура.Код,
	|	РеализацияТоваровУслуг.Номенклатура.Артикул,
	|	РеализацияТоваровУслуг.Количество,
	|	NULL,
	|	РеализацияТоваровУслуг.Номенклатура.ЕдиницаХраненияОстатков.Представление,
	|	NULL,
	|	РеализацияТоваровУслуг.Цена,
	|	РеализацияТоваровУслуг.Сумма,
	|	РеализацияТоваровУслуг.СуммаНДС,
	|	РеализацияТоваровУслуг.ПроцентСкидкиНаценки,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	РеализацияТоваровУслуг.НомерСтроки,
	|	1
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслуг
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Номенклатура,
	|	ВЫРАЗИТЬ(РеализацияТоваровУслуг.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)),
	|	РеализацияТоваровУслуг.Номенклатура.Код,
	|	РеализацияТоваровУслуг.Номенклатура.Артикул,
	|	РеализацияТоваровУслуг.Количество,
	|	NULL,
	|	РеализацияТоваровУслуг.Номенклатура.ЕдиницаХраненияОстатков.Представление,
	|	NULL,
	|	РеализацияТоваровУслуг.Цена,
	|	РеализацияТоваровУслуг.Сумма,
	|	0,
	|	0,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	РеализацияТоваровУслуг.НомерСтроки,
	|	2
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.ВозвратнаяТара КАК РеализацияТоваровУслуг
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент
	|
	|УПОРЯДОЧИТЬ ПО
	|	Метка,
	|	НомерСтроки";
	
	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ВыводитьКоды = Истина;
		Колонка = "Артикул";
	ИначеЕсли ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
		ВыводитьКоды = Истина;
		Колонка = "Код";
	Иначе
		ВыводитьКоды = Ложь;
	КонецЕсли;
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РеализацияТоваровУслуг_Накладная";
	
	ПервыйДокумент = Истина;
	
	Для каждого Ссылка Из МассивОбъектов Цикл
		//Макет необходимо получать для каждого следующего документа,
		//	т.к. в процессе печати меняется ширина колонок исходного макета
		Макет = ПолучитьМакет("Накладная");

		Если Не ПервыйДокумент Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;

		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТекущийДокумент", Ссылка);
		Запрос.Текст = ТекстЗапросаШапка;
		Шапка = Запрос.Выполнить().Выбрать();
		Шапка.Следующий();
		
		ТекстКурс = "";
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТекущийДокумент", Ссылка);
		Запрос.Текст = ТекстЗапросаТовары;
		
		ЗапросТовары = Запрос.Выполнить().Выгрузить();
		флВыводитьМест = истина;
		Если ЗапросТовары.Итог("КоличествоМест")=0 Тогда
			флВыводитьМест = ложь;
		КонецЕсли;
	
		// Выводим шапку накладной
		
		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		ОбластьМакета.Параметры.ТекстЗаголовка = ОбщегоНазначения.СформироватьЗаголовокДокумента(Шапка, "Расходная накладная");
		ТабДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
		ПредставлениеПоставщика = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата), "ПолноеНаименование,");
		ОбластьМакета.Параметры.ПредставлениеПоставщика = ПредставлениеПоставщика;
		ОбластьМакета.Параметры.Поставщик = Шапка.Поставщик;
		ТабДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
		ПредставлениеПолучателя = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Получатель, Шапка.Дата), "ПолноеНаименование,");
		ОбластьМакета.Параметры.ПредставлениеПолучателя = ПредставлениеПолучателя;
		ОбластьМакета.Параметры.Получатель = Шапка.Получатель;
		ТабДокумент.Вывести(ОбластьМакета);
		
		ЕстьСкидки = ЗапросТовары.Итог("Скидка") + ЗапросТовары.Итог("АвтоматическаяСкидка") <> 0;
	
		ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицы|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаКодов");
		ОбластьТовар   = Макет.ПолучитьОбласть("ШапкаТаблицы|Товар");
		ОбластьМест   = Макет.ПолучитьОбласть("ШапкаТаблицы|Мест");
		ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицы|Данные1");
		ОбластьСкидок = Макет.ПолучитьОбласть("ШапкаТаблицы|Скидка");
		ОбластьСуммы  = Макет.ПолучитьОбласть("ШапкаТаблицы|Сумма");
		
		ТабДокумент.Вывести(ОбластьНомера);
		Если ВыводитьКоды Тогда
			ОбластьКодов.Параметры.ИмяКолонкиКодов = Колонка;
			ТабДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;
		ТабДокумент.Присоединить(ОбластьТовар);
		Если флВыводитьМест Тогда
			ТабДокумент.Присоединить(ОбластьМест);
		КонецЕсли;
		
		ТабДокумент.Присоединить(ОбластьДанных);
		Если ЕстьСкидки Тогда
			ТабДокумент.Присоединить(ОбластьСкидок);
		КонецЕсли;
		ТабДокумент.Присоединить(ОбластьСуммы);
		
		ОбластьКолонкаТовар = Макет.Область("Товар");
		Если Не ВыводитьКоды Тогда
			ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки + 
			Макет.Область("КолонкаКодов").ШиринаКолонки;
		КонецЕсли;
		Если НЕ ЕстьСкидки Тогда
			ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки + 
			Макет.Область("СуммаБезСкидки").ШиринаКолонки +
			Макет.Область("СуммаСкидки").ШиринаКолонки;
		КонецЕсли;
		
		ОбластьНомера = Макет.ПолучитьОбласть("Строка|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть("Строка|КолонкаКодов");
		ОбластьТовар  = Макет.ПолучитьОбласть("Строка|Товар");
		ОбластьМест  = Макет.ПолучитьОбласть("Строка|Мест");
		ОбластьДанных = Макет.ПолучитьОбласть("Строка|Данные1");
		ОбластьСкидок = Макет.ПолучитьОбласть("Строка|Скидка");
		ОбластьСуммы  = Макет.ПолучитьОбласть("Строка|Сумма");
		
		Сумма    = 0;
		СуммаНДС = 0;
		ВсегоСкидок    = 0;
		ВсегоБезСкидок = 0;
		КоэфКурса = ?( СуммыВРублях, ?(Шапка.КратностьВзаиморасчетов=0,1,Шапка.КурсВзаиморасчетов / Шапка.КратностьВзаиморасчетов), 1);
	
		Для каждого ВыборкаСтрокТовары из ЗапросТовары Цикл 
			
			Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
				Продолжить;
			КонецЕсли;
			
			ОбластьНомера.Параметры.НомерСтроки = ЗапросТовары.Индекс(ВыборкаСтрокТовары) + 1;
			ТабДокумент.Вывести(ОбластьНомера);
			
			Если ВыводитьКоды Тогда
				Если Колонка = "Артикул" Тогда
					ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТовары.Артикул;
				Иначе
					ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТовары.Код;
				КонецЕсли;
				ТабДокумент.Присоединить(ОбластьКодов);
			КонецЕсли;
			ОбластьТовар.Параметры.Заполнить(ВыборкаСтрокТовары);
			ОбластьТовар.Параметры.Товар = СокрЛП(ВыборкаСтрокТовары.Товар)
			+ ФормированиеПечатныхФормСервер.ПредставлениеСерий(ВыборкаСтрокТовары)
			+ ?(ВыборкаСтрокТовары.Метка = 2, " (возвратная тара)", "");		
			ТабДокумент.Присоединить(ОбластьТовар);
			
			Если флВыводитьМест Тогда
				ОбластьМест.Параметры.Заполнить(ВыборкаСтрокТовары);
				ТабДокумент.Присоединить(ОбластьМест);
			КонецЕсли;
			
			
			СуммаРуб = Окр(ВыборкаСтрокТовары.Сумма * КоэфКурса, 2, 1);
			
			ОбластьДанных.Параметры.Заполнить(ВыборкаСтрокТовары);
			ОбластьДанных.Параметры.Цена  = Окр(ВыборкаСтрокТовары.Цена * КоэфКурса, 2, 1);
			
			ТабДокумент.Присоединить(ОбластьДанных);
			
			// Скидка может быть NULL
			ПроцентСкидки = ?(НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.Скидка),0,ВыборкаСтрокТовары.Скидка) 
			+ ?(НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.АвтоматическаяСкидка),0,ВыборкаСтрокТовары.АвтоматическаяСкидка);
			
			Скидка = Ценообразование.ПолучитьСуммуСкидки(СуммаРуб, ПроцентСкидки);
			
			Если ЕстьСкидки Тогда
				ОбластьСкидок.Параметры.Скидка         = Скидка;
				ОбластьСкидок.Параметры.СуммаБезСкидки = ?(СуммыВРублях, СуммаРуб, ВыборкаСтрокТовары.Сумма) + Скидка;
				ТабДокумент.Присоединить(ОбластьСкидок);
			КонецЕсли;
			
			ОбластьСуммы.Параметры.Заполнить(ВыборкаСтрокТовары);
			Если СуммыВРублях Тогда
				ОбластьСуммы.Параметры.Сумма = СуммаРуб;
			КонецЕсли;
			
			ОбластьСуммы.Параметры.НомерГТДСтранаПроисхождения = ?(НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.НомерГТД),
			"", СокрЛП(ВыборкаСтрокТовары.НомерГТД.Код)+",") + Символы.ПС + ВыборкаСтрокТовары.СтранаПроисхождения;		
			
			ТабДокумент.Присоединить(ОбластьСуммы);
			Если СуммыВРублях Тогда
				Сумма          = Сумма       + СуммаРуб;
				СуммаНДС       = СуммаНДС    + Окр( ВыборкаСтрокТовары.СуммаНДС * КоэфКурса, 2, 1);
			Иначе
				Сумма          = Сумма       + ВыборкаСтрокТовары.Сумма;
				СуммаНДС       = СуммаНДС    + ВыборкаСтрокТовары.СуммаНДС;
			КонецЕсли;
			ВсегоСкидок    = ВсегоСкидок + Скидка;
			ВсегоБезСкидок = Сумма       + ВсегоСкидок;
			
		КонецЦикла;
		
		// Вывести Итого
		ОбластьНомера = Макет.ПолучитьОбласть("Итого|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть("Итого|КолонкаКодов");
		ОбластьТовар  = Макет.ПолучитьОбласть("Итого|Товар");
		ОбластьМест  = Макет.ПолучитьОбласть("Итого|Мест");
		ОбластьДанных = Макет.ПолучитьОбласть("Итого|Данные1");
		ОбластьСкидок = Макет.ПолучитьОбласть("Итого|Скидка");
		ОбластьСуммы  = Макет.ПолучитьОбласть("Итого|Сумма");
		
		ТабДокумент.Вывести(ОбластьНомера);
		Если ВыводитьКоды Тогда
			ТабДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;
		ТабДокумент.Присоединить(ОбластьТовар);
		Если флВыводитьМест Тогда
			ТабДокумент.Присоединить(ОбластьМест);
		КонецЕсли;
	
		ТабДокумент.Присоединить(ОбластьДанных);
		Если ЕстьСкидки Тогда
			ОбластьСкидок.Параметры.ВсегоСкидок    = ВсегоСкидок;
			ОбластьСкидок.Параметры.ВсегоБезСкидок = ВсегоБезСкидок;
			ТабДокумент.Присоединить(ОбластьСкидок);
		КонецЕсли;
		ОбластьСуммы.Параметры.Всего = ОбщегоНазначения.ФорматСумм(Сумма);
		ТабДокумент.Присоединить(ОбластьСуммы);
		
		// Вывести ИтогоНДС
		Если Шапка.УчитыватьНДС Тогда
			ОбластьНомера = Макет.ПолучитьОбласть("ИтогоНДС|НомерСтроки");
			ОбластьКодов  = Макет.ПолучитьОбласть("ИтогоНДС|КолонкаКодов");
			ОбластьТовар  = Макет.ПолучитьОбласть("ИтогоНДС|Товар");
			ОбластьМест  = Макет.ПолучитьОбласть("ИтогоНДС|Мест");
			ОбластьДанных = Макет.ПолучитьОбласть("ИтогоНДС|Данные1");
			ОбластьСкидок = Макет.ПолучитьОбласть("ИтогоНДС|Скидка");
			ОбластьСуммы  = Макет.ПолучитьОбласть("ИтогоНДС|Сумма");
			
			ТабДокумент.Вывести(ОбластьНомера);
			Если ВыводитьКоды Тогда
				ТабДокумент.Присоединить(ОбластьКодов);
			КонецЕсли;
			ТабДокумент.Присоединить(ОбластьТовар);
			Если флВыводитьМест Тогда
				ТабДокумент.Присоединить(ОбластьМест);
			КонецЕсли;
			
			ОбластьДанных.Параметры.НДС = ?(Шапка.СуммаВключаетНДС, "В том числе НДС:", "Сумма НДС:");
			ТабДокумент.Присоединить(ОбластьДанных);
			Если ЕстьСкидки Тогда
				ТабДокумент.Присоединить(ОбластьСкидок);
			КонецЕсли;
			ОбластьСуммы.Параметры.ВсегоНДС = ОбщегоНазначения.ФорматСумм(СуммаНДС);
			ТабДокумент.Присоединить(ОбластьСуммы);
		КонецЕсли;
	
		// Вывести Сумму прописью
		ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
		СуммаКПрописи = Сумма + ?(Шапка.СуммаВключаетНДС, 0, СуммаНДС);
		
		Если СуммыВРублях Тогда
			ОбластьМакета.Параметры.ИтоговаяСтрока ="Всего наименований " + ЗапросТовары.Количество()
			+ ", на сумму " + ОбщегоНазначения.ФорматСумм(СуммаКПрописи, мВалютаРегламентированногоУчета);
			ОбластьМакета.Параметры.СуммаПрописью = ОбщегоНазначения.СформироватьСуммуПрописью(СуммаКПрописи, мВалютаРегламентированногоУчета);
		Иначе
			ОбластьМакета.Параметры.ИтоговаяСтрока ="Всего наименований " + ЗапросТовары.Количество()
			+ ", на сумму " + ОбщегоНазначения.ФорматСумм(СуммаКПрописи, Шапка.ВалютаДокумента);
			ОбластьМакета.Параметры.СуммаПрописью = ОбщегоНазначения.СформироватьСуммуПрописью(СуммаКПрописи, Шапка.ВалютаДокумента);
		КонецЕсли;
		
		ТабДокумент.Вывести(ОбластьМакета);
		
		// Вывести подписи
		ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
		
		// Отпуск товара произвел
		Если ЗначениеЗаполнено(Шапка.ОтпускПроизвел) Тогда
			ФамилияИмяОтчествоФизЛица        = ФормированиеПечатныхФормСервер.ФамилияИмяОтчество(Шапка.ОтпускПроизвел, Шапка.Дата);
			ФамилияИмяОтчествоОтпускПроизвел = ФамилияИмяОтчествоФизЛица.Фамилия + " " + ФамилияИмяОтчествоФизЛица.Имя + " " + ФамилияИмяОтчествоФизЛица.Отчество;
			ФИООтпускПроизвел                = ОбщегоНазначения.ФамилияИнициалыФизЛица(ФамилияИмяОтчествоОтпускПроизвел);
			ОбластьМакета.Параметры.ОтветственныйПредставление = ФИООтпускПроизвел;
		КонецЕсли;
		
		ТабДокумент.Вывести(ОбластьМакета);
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент, НомерСтрокиНачало, ОбъектыПечати, Ссылка);
	КонецЦикла;

	Возврат ТабДокумент;
	
КонецФункции // ПечатьДокумента()

// Функция формирует табличный документ унифицированной формы М-15
//
// Параметры: 
//  Нет.
//
// Возвращаемое значение:
//  Табличный документ по форме М-15.
//
Функция ПечатьМ15(МассивОбъектов, ОбъектыПечати)
	
	мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");
	
	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ТоварКод = "Артикул";
	Иначе
		ТоварКод = "Код";
	КонецЕсли;
	
	ТекстЗапросаШапка = "
	|ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Номер                   КАК Номер,
	|	РеализацияТоваровУслуг.Дата                    КАК ДатаСоставления,
	|	РеализацияТоваровУслуг.Дата                    КАК ДатаДокумента,
	|	РеализацияТоваровУслуг.Организация             КАК Организация,
	|	РеализацияТоваровУслуг.Организация             КАК ЮрФизЛицо,
	|	РеализацияТоваровУслуг.Организация             КАК Руководители,
	|	РеализацияТоваровУслуг.Склад                   КАК Склад,
	|	РеализацияТоваровУслуг.Склад.Наименование      КАК СкладНаименование,
	|	РеализацияТоваровУслуг.Контрагент.Код          КАК КонтрагентКод,
	|	РеализацияТоваровУслуг.Контрагент              КАК Контрагент,
	|	РеализацияТоваровУслуг.ВалютаДокумента         КАК ВалютаДокумента,
	|	РеализацияТоваровУслуг.КурсВзаиморасчетов      КАК Курс,
	|	РеализацияТоваровУслуг.КратностьВзаиморасчетов КАК Кратность,
	|	РеализацияТоваровУслуг.УчитыватьНДС            КАК УчитыватьНДС,
	|	РеализацияТоваровУслуг.СуммаВключаетНДС        КАК СуммаВключаетНДС,
	|	ОтветственныеЛица.ФизическоеЛицо               КАК ОтветственноеЛицо,
	|	РеализацияТоваровУслуг.ОтпускРазрешил          КАК ОтпускРазрешил,
	|	РеализацияТоваровУслуг.ОтпускПроизвел          КАК ОтпускПроизвел,
	|	РеализацияТоваровУслуг.ГлавныйБухгалтер		   КАК ГлавныйБухгалтер,
	|	РеализацияТоваровУслуг.ЗаГлавногоБухгалтераПоПриказу КАК ЗаГлавногоБухгалтераПоПриказу,
	|	РеализацияТоваровУслуг.ЗаРуководителяПоПриказу	КАК ЗаРуководителяПоПриказу,
	|	РеализацияТоваровУслуг.ДоговорКонтрагента      КАК Основание
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрСведений.ОтветственныеЛица.СрезПоследних(&ДатаСреза, СтруктурнаяЕдиница = &СтруктурнаяЕдиница) КАК ОтветственныеЛица
	|ПО
	|	ОтветственныеЛица.СтруктурнаяЕдиница = РеализацияТоваровУслуг.Склад
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент";
	
	ТекстЗапросаТовары = "
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.НомерТабличнойЧасти                          КАК НомерТабличнойЧасти,
	|	ВложенныйЗапрос.Номенклатура                                 КАК Номенклатура,
	|	ВЫРАЗИТЬ(ВложенныйЗапрос.Номенклатура.НаименованиеПолное КАК Строка(1000)) КАК ТоварНаименование,
	|	ВложенныйЗапрос.Номенклатура." + ТоварКод + "                КАК ТоварКод,
	|	ВложенныйЗапрос.ЕдиницаИзмерения.Представление               КАК ЕдиницаИзмеренияНаименование,
	|	ВложенныйЗапрос.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код КАК ЕдиницаИзмеренияКод,
	|	ВложенныйЗапрос.КоличествоПринято                            КАК КоличествоПринято,
	|	ВложенныйЗапрос.Цена                                         КАК Цена,
	|	ВложенныйЗапрос.Сумма                                        КАК Сумма,
	|	ВложенныйЗапрос.СуммаНДС                                     КАК СуммаНДС,
	|	ВложенныйЗапрос.СтавкаНДС                                    КАК СтавкаНДС,
	|	ВложенныйЗапрос.Характеристика                               КАК Характеристика,
	|	ВложенныйЗапрос.Серия                                        КАК Серия
	|
	|ИЗ (
	|	ВЫБРАТЬ
	|		0.00                                        КАК НомерТабличнойЧасти,
	|		МАКСИМУМ(Товары.НомерСтроки)                КАК НомерСтроки,
	|		Товары.Номенклатура                         КАК Номенклатура,
	|		Товары.ЕдиницаИзмерения                     КАК ЕдиницаИзмерения,
	|		СУММА(Товары.Количество)                    КАК КоличествоПринято,
	|		Товары.Цена * &Курс / &Кратность            КАК Цена,
	|		СУММА(Товары.Сумма * &Курс / &Кратность)    КАК Сумма,
	|		СУММА(Товары.СуммаНДС * &Курс / &Кратность) КАК СуммаНДС,
	|		Товары.СтавкаНДС           					КАК СтавкаНДС,
	|		Товары.ХарактеристикаНоменклатуры           КАК Характеристика,
	|		Товары.СерияНоменклатуры                    КАК Серия
	|	ИЗ
	|		Документ.РеализацияТоваровУслуг.Товары КАК Товары
	|	ГДЕ
	|		Товары.Ссылка = &ТекущийДокумент
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Товары.Номенклатура,
	|		Товары.ЕдиницаИзмерения,
	|		Товары.ХарактеристикаНоменклатуры,
	|		Товары.СтавкаНДС,
	|		Товары.СерияНоменклатуры,
	|		Товары.Цена
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		1.00                                        КАК НомерТабличнойЧасти,
	|		МАКСИМУМ(Услуги.НомерСтроки)                КАК НомерСтроки,
	|		Услуги.Номенклатура                         КАК Номенклатура,
	|		Услуги.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаИзмерения,
	|		СУММА(Услуги.Количество)                    КАК КоличествоПринято,
	|		Услуги.Цена * &Курс / &Кратность            КАК Цена,
	|		СУММА(Услуги.Сумма * &Курс / &Кратность)    КАК Сумма,
	|		СУММА(Услуги.СуммаНДС * &Курс / &Кратность) КАК СуммаНДС,
	|		Услуги.СтавкаНДС                            КАК СтавкаНДС,
	|		Неопределено                                КАК Характеристика,
	|		Неопределено                                КАК Серия
	|	ИЗ
	|		Документ.РеализацияТоваровУслуг.Услуги КАК Услуги
	|	ГДЕ
	|		Услуги.Ссылка = &ТекущийДокумент
	|	СГРУППИРОВАТЬ ПО
	|		Услуги.Номенклатура,
	|		Услуги.СтавкаНДС,
	|		Услуги.Цена
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		2.00                                                КАК НомерТабличнойЧасти,
	|		МАКСИМУМ(ВозвратнаяТара.НомерСтроки)                КАК НомерСтроки,
	|		ВозвратнаяТара.Номенклатура                         КАК Номенклатура,
	|		ВозвратнаяТара.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаИзмерения,
	|		СУММА(ВозвратнаяТара.Количество)                    КАК КоличествоПринято,
	|		ВозвратнаяТара.Цена * &Курс / &Кратность            КАК Цена,
	|		СУММА(ВозвратнаяТара.Сумма * &Курс / &Кратность)    КАК Сумма,
	|		0.00                                                КАК СуммаНДС,
	|		""Без НДС""                                        	КАК СтавкаНДС,
	|		Неопределено                                        КАК Характеристика,
	|		Неопределено                                        КАК Серия
	|	ИЗ
	|		Документ.РеализацияТоваровУслуг.ВозвратнаяТара КАК ВозвратнаяТара
	|	ГДЕ
	|		ВозвратнаяТара.Ссылка = &ТекущийДокумент
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ВозвратнаяТара.Номенклатура,
	|		ВозвратнаяТара.Цена
    |
	|	) КАК ВложенныйЗапрос
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерТабличнойЧасти ВОЗР,
	|	ВложенныйЗапрос.НомерСтроки ВОЗР
	|";

	Макет = ПолучитьОбщийМакет("М15");
	
	ТабДокумент = Новый ТабличныйДокумент;
	
	// Зададим параметры печатной формы по умолчанию
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
	// Восстановим установленные пользователем параметры печатной формы
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РеализацияТоваровУслуг_М15";

	ПервыйДокумент = Истина;
	
	Для Каждого Ссылка Из МассивОбъектов Цикл
		
		Если Не ПервыйДокумент Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;

		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ДатаСреза",          Ссылка.Дата);
		Запрос.УстановитьПараметр("СтруктурнаяЕдиница", Ссылка.Склад);
		Запрос.УстановитьПараметр("ТекущийДокумент",    Ссылка);
		Запрос.Текст = ТекстЗапросаШапка;
		
		Шапка = Запрос.Выполнить().Выбрать();
		Шапка.Следующий();
		
		ЗапросПоТоварам = Новый Запрос();
		ЗапросПоТоварам.УстановитьПараметр("ТекущийДокумент", Ссылка);

		ЗапросПоТоварам.УстановитьПараметр("Курс",      ЗаполнениеДокументов.КурсДокумента(Ссылка, мВалютаРегламентированногоУчета));
		ЗапросПоТоварам.УстановитьПараметр("Кратность", ЗаполнениеДокументов.КратностьДокумента(Ссылка, мВалютаРегламентированногоУчета));
		ЗапросПоТоварам.Текст = ТекстЗапросаТовары;
		ЗапросТовары = ЗапросПоТоварам.Выполнить().Выгрузить();
		
		// Вычислим курс документа для печати
		Если Ссылка.ВалютаДокумента <> мВалютаРегламентированногоУчета
			И (Ссылка.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах
			ИЛИ Ссылка.Дата >= '20090101000000') Тогда
			
			ЗапросКурсАванса = Новый Запрос;
			ЗапросКурсАванса.УстановитьПараметр("ДокументСсылка", Ссылка);
			ЗапросКурсАванса.Текст =
			"ВЫБРАТЬ
			|	Док.СуммаВзаиморасчетов,
			|	Док.СуммаРегл
			|ИЗ 
			|	Документ.РеализацияТоваровУслуг.ДокументыРасчетовСКонтрагентом КАК Док
			|ГДЕ Док.Ссылка = &ДокументСсылка
			|ИТОГИ СУММА(СуммаВзаиморасчетов), СУММА(СуммаРегл) ПО ОБЩИЕ";
			
			Выборка = ЗапросКурсАванса.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Если Выборка.Следующий() Тогда
				ВыборкаСуммаВзаиморасчетов = Выборка.СуммаВзаиморасчетов;
				ВыборкаСуммаРегл           = Выборка.СуммаРегл;
			Иначе
				ВыборкаСуммаВзаиморасчетов = 0;
				ВыборкаСуммаРегл           = 0;
			КонецЕсли;
			
			РасчетСуммыНДСПоСтавке =  УчетНДС.РасчетНДСвРубляхПоСтавкеДокумента(Шапка.ДатаДокумента);
			
			СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(УчетНДС.ПолучитьСуммуДокументаСНДС(Ссылка),
																Ссылка.ВалютаДокумента, Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов,
																ЗаполнениеДокументов.КурсДокумента(Ссылка, мВалютаРегламентированногоУчета), Ссылка.КурсВзаиморасчетов,
																ЗаполнениеДокументов.КратностьДокумента(Ссылка, мВалютаРегламентированногоУчета), Ссылка.КратностьВзаиморасчетов);
			НеоплаченнаяСумма = СуммаВзаиморасчетов - ВыборкаСуммаВзаиморасчетов;
			
			НеоплаченнаяСуммаРегл = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(НеоплаченнаяСумма,
																Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов, мВалютаРегламентированногоУчета,
																Ссылка.КурсВзаиморасчетов, 1,
																Ссылка.КратностьВзаиморасчетов, 1);
																
			СуммаРегл = ВыборкаСуммаРегл + НеоплаченнаяСуммаРегл;
			
			Если НЕ СуммаРегл = 0 Тогда
				
				ЗапросТовары.Колонки.Добавить("СуммаБезНДС");
				МассивРаспределения = Новый Массив;
				
				Для Каждого СтрокаТовар Из ЗапросТовары Цикл
					Если (СтрокаТовар.НомерТабличнойЧасти = 2) Тогда
						Продолжить;
					КонецЕсли;
					СуммаСНДС = СтрокаТовар.Сумма + ?(Шапка.СуммаВключаетНДС, 0, СтрокаТовар.СуммаНДС);
					СуммаБезНДС = СуммаСНДС - СтрокаТовар.СуммаНДС;
					МассивРаспределения.Добавить(СуммаСНДС);
					СтрокаТовар.СуммаБезНДС = СуммаБезНДС;
				КонецЦикла;
				
				ЗапросТовары.Колонки.Добавить("СуммаРублевая");
				УчетНДС.РаспределитьСуммуПоСтолбцу(МассивРаспределения, СуммаРегл, ЗапросТовары, "СуммаРублевая");
				
				Для Каждого СтрокаТовар Из ЗапросТовары Цикл
					Если (СтрокаТовар.НомерТабличнойЧасти = 2) Тогда
						Продолжить;
					КонецЕсли;
					Если РасчетСуммыНДСПоСтавке Тогда
						//Выделение суммы НДС, Расчет суммы без НДС
						ЗначениеСтавкиНДС = УчетНДС.ПолучитьСтавкуНДС(СтрокаТовар.СтавкаНДС);
						СтрокаТовар.СуммаНДС = ?(ЗначениеСтавкиНДС = 0, 0, Окр(СтрокаТовар.СуммаРублевая * ЗначениеСтавкиНДС/(100+ЗначениеСтавкиНДС),2));
						СтрокаТовар.Сумма = СтрокаТовар.СуммаРублевая - СтрокаТовар.СуммаНДС;
					Иначе
						МассивРаспределения.Очистить();
						МассивРаспределения.Добавить(СтрокаТовар.СуммаБезНДС);
						МассивРаспределения.Добавить(СтрокаТовар.СуммаНДС);
						МассивРаспределенныхСумм = ОбщегоНазначения.РаспределитьПропорционально(СтрокаТовар.СуммаРублевая, МассивРаспределения);
						Если МассивРаспределенныхСумм <> Неопределено Тогда
							СтрокаТовар.Сумма = МассивРаспределенныхСумм[0];
							СтрокаТовар.СуммаНДС = МассивРаспределенныхСумм[1];
						КонецЕсли;
					КонецЕсли;
					
					Если Шапка.СуммаВключаетНДС Тогда
						СтрокаТовар.Сумма = СтрокаТовар.Сумма+СтрокаТовар.СуммаНДС;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		// Выводим общие реквизиты шапки
		СведенияОбОрганизации = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.ЮрФизЛицо, Шапка.ДатаСоставления);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ОбластьМакета.Параметры.ПредставлениеОрганизации = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(СведенияОбОрганизации);
		ОбластьМакета.Параметры.ОрганизацияПоОКПО        = СведенияОбОрганизации.КодПоОКПО;
		ОбластьМакета.Параметры.НомерДокумента           = ОбщегоНазначения.ПолучитьНомерНаПечать(Шапка);
		
		ПредставлениеКонтрагента = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Контрагент, Шапка.ДатаСоставления), "ПолноеНаименование,");
		ОбластьМакета.Параметры.КонтрагентНаименование = ПредставлениеКонтрагента;
		
		ТабДокумент.Вывести(ОбластьМакета);
	
		// Выводим заголовок таблицы
		ЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
		ТабДокумент.Вывести(ЗаголовокТаблицы);
		
		НомерСтраницы   = 1;
		
		КоличествоСтрок = ЗапросТовары.Количество();
		
		Для Инд = 1 По КоличествоСтрок Цикл
			СтрокаТовара = ЗапросТовары[КоличествоСтрок - Инд];
			Если (СтрокаТовара.НомерТабличнойЧасти = 1) Тогда
				ЗапросТовары.Удалить(СтрокаТовара);
			КонецЕсли;
		КонецЦикла;
		
		КоличествоСтрок = ЗапросТовары.Количество();
		
		// Инициализация итогов в документе
		ИтогоКоличествоПринято = 0;
		ИтогоСуммаБезНДС = 0;
		ИтогоСуммаНДС    = 0;
		ИтогоВсегоСНДС   = 0;
		Ном              = 0;
		
		// Создаем массив для проверки вывода
		МассивВыводимыхОбластей = Новый Массив;
	
		// Выводим многострочную часть докмента
		ОбластьМакета  = Макет.ПолучитьОбласть("Строка");
		ОбластьПодвала = Макет.ПолучитьОбласть("Подвал");
		
		Для каждого ВыборкаСтрокТовары Из ЗапросТовары Цикл
			
			Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
				Продолжить;
			КонецЕсли;
			
			Ном = Ном + 1;
			
			МассивВыводимыхОбластей.Очистить();
			МассивВыводимыхОбластей.Добавить(ОбластьМакета);
			Если Ном = КоличествоСтрок Тогда
				МассивВыводимыхОбластей.Добавить(ОбластьПодвала);
			КонецЕсли;		
			
			Если НЕ ФормированиеПечатныхФормСервер.ПроверитьВыводТабличногоДокумента(ТабДокумент, МассивВыводимыхОбластей) Тогда
				НомерСтраницы	= НомерСтраницы + 1;
				ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				ЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы;
				ТабДокумент.Вывести(ЗаголовокТаблицы);
			КонецЕсли;
			
			ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокТовары);
			
			Кратность = ?(Шапка.Кратность = 0, 1, Шапка.Кратность);
			СуммаСНДС   = (ВыборкаСтрокТовары.Сумма + ?(Шапка.СуммаВключаетНДС, 0, ВыборкаСтрокТовары.СуммаНДС));
			СуммаНДС    = ВыборкаСтрокТовары.СуммаНДС;
			СуммаБезНДС = СуммаСНДС  - СуммаНДС;
			
			Количество 		= ВыборкаСтрокТовары.КоличествоПринято;
			Цена            = СуммаБезНДС / Количество;
			
			ОбластьМакета.Параметры.Количество 		  = Количество;
			ОбластьМакета.Параметры.СуммаСНДС         = СуммаСНДС;
			ОбластьМакета.Параметры.СуммаБезНДС       = СуммаБезНДС;
			ОбластьМакета.Параметры.СуммаНДС          = СуммаНДС;
			ОбластьМакета.Параметры.Цена              = Цена;
			ОбластьМакета.Параметры.ТоварНаименование = СокрЛП(ВыборкаСтрокТовары.ТоварНаименование) 
				+ ФормированиеПечатныхФормСервер.ПредставлениеСерий(ВыборкаСтрокТовары)
				+ ?(ВыборкаСтрокТовары.НомерТабличнойЧасти = 2, " (возвратная тара)", "");
			
			ТабДокумент.Вывести(ОбластьМакета);
			
			ИтогоКоличествоПринято = ИтогоКоличествоПринято + Количество;
			ИтогоСуммаБезНДС       = ИтогоСуммаБезНДС       + СуммаБезНДС;
			ИтогоВсегоСНДС         = ИтогоВсегоСНДС         + СуммаСНДС;
			
		КонецЦикла;
	
		// Выводим итоги по документу
		ОбластьПодвала.Параметры.Заполнить(Шапка);
		
		Руководители = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизаций(Шапка.Руководители, Шапка.ДатаДокумента,);
		Руководитель = Руководители.Руководитель;
		Бухгалтер    = Руководители.ГлавныйБухгалтер;
		
		// Главный бухгалтер
		Если НЕ ЗначениеЗаполнено(Шапка.ГлавныйБухгалтер) Тогда
			ФИОБухгалтер 					 = Бухгалтер;	
		Иначе
			ФамилияИмяОтчествоФизЛица        = ФормированиеПечатныхФормСервер.ФамилияИмяОтчество(Шапка.ГлавныйБухгалтер, Шапка.ДатаДокумента);
			ФамилияИмяОтчествоБухгалтер 	 = ФамилияИмяОтчествоФизЛица.Фамилия + " " + ФамилияИмяОтчествоФизЛица.Имя + " " + ФамилияИмяОтчествоФизЛица.Отчество;
			ФИОБухгалтер                	 = ОбщегоНазначения.ФамилияИнициалыФизЛица(ФамилияИмяОтчествоБухгалтер);
			ФИОБухгалтер					 = ФИОБухгалтер + " " + Шапка.ЗаГлавногоБухгалтераПоПриказу;
		КонецЕсли;
		ОбластьПодвала.Параметры.ФИОГлавБухгалтера = ФИОБухгалтер;
		
		// Отпуск товара разрешил
		Если НЕ ЗначениеЗаполнено(Шапка.ОтпускРазрешил) Тогда
			ФИООтпускРазрешил       = Руководитель;
			ДолжностьОтпускРазрешил = Руководители.РуководительДолжность;
		Иначе
			ФамилияИмяОтчествоФизЛица        = ФормированиеПечатныхФормСервер.ФамилияИмяОтчество(Шапка.ОтпускРазрешил, Шапка.ДатаДокумента);
			ПодразделениеДолжностьФизЛица    = ПолныеПрава.СведенияОСотруднике(Шапка.ОтпускРазрешил, Шапка.ДатаДокумента, Шапка.Организация);
			ФамилияИмяОтчествоОтпускРазрешил = ФамилияИмяОтчествоФизЛица.Фамилия + " " + ФамилияИмяОтчествоФизЛица.Имя + " " + ФамилияИмяОтчествоФизЛица.Отчество;
			ФИООтпускРазрешил                = ОбщегоНазначения.ФамилияИнициалыФизЛица(ФамилияИмяОтчествоОтпускРазрешил);
			ДолжностьОтпускРазрешил          = ПодразделениеДолжностьФизЛица.Должность;
			ФИООтпускРазрешил			 	 = ФИООтпускРазрешил  + " " + Шапка.ЗаРуководителяПоПриказу;
		КонецЕсли;
		
		ОбластьПодвала.Параметры.ФИОРуководителя       = ФИООтпускРазрешил;
		ОбластьПодвала.Параметры.ДолжностьРуководителя = ДолжностьОтпускРазрешил;
		
		// Отпуск товара произвел
		Если НЕ ЗначениеЗаполнено(Шапка.ОтпускПроизвел) Тогда
			ФамилияИмяОтчествоФизЛица     = ФормированиеПечатныхФормСервер.ФамилияИмяОтчество(Шапка.ОтветственноеЛицо, Шапка.ДатаДокумента);
			ПодразделениеДолжностьФизЛица = ПолныеПрава.СведенияОСотруднике(Шапка.ОтветственноеЛицо, Шапка.ДатаДокумента, Шапка.Организация);
		Иначе
			ФамилияИмяОтчествоФизЛица     = ФормированиеПечатныхФормСервер.ФамилияИмяОтчество(Шапка.ОтпускПроизвел, Шапка.ДатаДокумента);
			ПодразделениеДолжностьФизЛица = ПолныеПрава.СведенияОСотруднике(Шапка.ОтпускПроизвел, Шапка.ДатаДокумента, Шапка.Организация);
		КонецЕсли;
		
		ФамилияИмяОтчествоОтпускПроизвел = ФамилияИмяОтчествоФизЛица.Фамилия + " " + ФамилияИмяОтчествоФизЛица.Имя + " " + ФамилияИмяОтчествоФизЛица.Отчество;
		ФИООтпускПроизвел                = ОбщегоНазначения.ФамилияИнициалыФизЛица(ФамилияИмяОтчествоОтпускПроизвел);
		ДолжностьОтпускПроизвел          = ПодразделениеДолжностьФизЛица.Должность;
		
		ОбластьПодвала.Параметры.ФИОКладовщика       = ФИООтпускПроизвел;
		ОбластьПодвала.Параметры.ДолжностьКладовщика = ДолжностьОтпускПроизвел;
		
		ОбластьПодвала.Параметры.КоличествоПорядковыхНомеровЗаписейПрописью = ЧислоПрописью(КоличествоСтрок, ,",,,,,,,,0");
		ОбластьПодвала.Параметры.СуммаПрописью = ОбщегоНазначения.СформироватьСуммуПрописью(ИтогоВсегоСНДС, мВалютаРегламентированногоУчета);
		ОбластьПодвала.Параметры.ИтогНДС       = ИтогоВсегоСНДС - ИтогоСуммаБезНДС;
		
		ТабДокумент.Вывести(ОбластьПодвала);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент, НомерСтрокиНачало, ОбъектыПечати, Ссылка);
		
	КонецЦикла;
	
	Возврат ТабДокумент;
	
КонецФункции // ПечатьМ15()

// Функция формирует табличный документ с печатной формой накладной,
// разработанной методистами
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьТОРГ12(МассивОбъектов, ОбъектыПечати, БезУслуг = Ложь)
	
	мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");
	ЕдиницаИзмеренияВеса = Константы.ЕдиницаИзмеренияВеса.Получить();
	
	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ТоварКод = "Артикул";
	Иначе
		ТоварКод = "Код";
	КонецЕсли;
	
	ТекстЗапросаШапка = "ВЫБРАТЬ
	|	Номер,
	|	Дата КАК ДатаДокумента,
	|	РеализацияТоваровУслуг.Организация,
	|	РеализацияТоваровУслуг.Организация КАК ЮрФизЛицо,
	|	РеализацияТоваровУслуг.Организация КАК Поставщик,
	|	РеализацияТоваровУслуг.Организация КАК Контрагент,
	|	РеализацияТоваровУслуг.Организация КАК Руководители,
	|	АдресДоставки КАК АдресДоставки,
	|	ВЫБОР КОГДА Грузополучатель = &ПустойКонтрагент
	|	      ТОГДА Контрагент
	|	      ИНАЧЕ Грузополучатель КОНЕЦ КАК Грузополучатель,
	|	ВЫБОР КОГДА Грузоотправитель = &ПустойКонтрагент
	|	      ТОГДА РеализацияТоваровУслуг.Организация
	|	      ИНАЧЕ Грузоотправитель КОНЕЦ КАК Грузоотправитель,
	|	БанковскийСчетОрганизации КАК БанковскийСчет,
	|	Контрагент КАК Покупатель,
	|	Контрагент КАК Плательщик,
	|	Сделка,
	|	ДоговорКонтрагента.Представление  КАК Основание,
	|	ДоговорКонтрагента.ВедениеВзаиморасчетов КАК ВедениеВзаиморасчетов,
	|	ОтветственныеЛица.ФизическоеЛицо КАК ОтветственноеЛицо,
	|	ПРЕДСТАВЛЕНИЕ(
	|	ВЫБОР	КОГДА РеализацияТоваровУслуг.ОтражатьВБухгалтерскомУчете
	|			ТОГДА ЕСТЬNULL(ТаблицаСоответствиеОрганизации.ПодразделениеОрганизации, """")
	|			ИНАЧЕ РеализацияТоваровУслуг.Подразделение
	|	КОНЕЦ) КАК ПредставлениеПодразделения,
	|	ВЫБОР	КОГДА РеализацияТоваровУслуг.ОтражатьВБухгалтерскомУчете
	|			ТОГДА ЕСТЬNULL(ТаблицаСоответствиеОрганизации.ПодразделениеОрганизации, """")
	|			ИНАЧЕ РеализацияТоваровУслуг.Подразделение
	|	КОНЕЦ КАК Подразделение,
	|	ВалютаДокумента,
	|	КурсВзаиморасчетов      КАК Курс,
	|	КратностьВзаиморасчетов КАК Кратность,
	|	УчитыватьНДС,
	|	СуммаВключаетНДС,
	|	ОтпускРазрешил,
	|	ОтпускПроизвел,
	|	ГлавныйБухгалтер,
	|	ЗаГлавногоБухгалтераПоПриказу,
	|	ЗаРуководителяПоПриказу,
	|	ДоверенностьНомер,
	|	ДоверенностьДата,
	|	ДоверенностьВыдана,
	|	ДоверенностьЧерезКого
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрСведений.ОтветственныеЛица.СрезПоследних(&ДатаСреза, СтруктурнаяЕдиница = &СтруктурнаяЕдиница) КАК ОтветственныеЛица
	|ПО
	|	ОтветственныеЛица.СтруктурнаяЕдиница = РеализацияТоваровУслуг.Склад
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|(
	|	ВЫБРАТЬ
	|		СоответсвиеПодразделений.Подразделение,
	|		СоответсвиеПодразделений.Организация,
	|		МИНИМУМ(СоответсвиеПодразделений.ПодразделениеОрганизации) КАК ПодразделениеОрганизации,
	|		МАКСИМУМ(СоответсвиеПодразделений.ПодразделениеОрганизации) КАК ПодразделениеОрг
	|	ИЗ
	|		РегистрСведений.СоответствиеПодразделенийИПодразделенийОрганизаций КАК СоответсвиеПодразделений
	|	ГДЕ
	|		Подразделение = &Подразделение
	|		И Организация = &Организация
	|		И Организация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|		И Подразделение <> ЗНАЧЕНИЕ(Справочник.Подразделения.ПустаяСсылка)
	|	СГРУППИРОВАТЬ ПО
	|		Подразделение,
	|		Организация
	|	ИМЕЮЩИЕ
	|		КОЛИЧЕСТВО(*) = 1
	|) ТаблицаСоответствиеОрганизации
	|ПО
	|	ТаблицаСоответствиеОрганизации.Подразделение = РеализацияТоваровУслуг.Подразделение
	|	И ТаблицаСоответствиеОрганизации.Организация = РеализацияТоваровУслуг.Организация
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент
	|";

	ТекстЗапросаТовары = "
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Номенклатура                                  КАК Номенклатура,
	|	ВЫРАЗИТЬ(ВложенныйЗапрос.Номенклатура.НаименованиеПолное КАК Строка(1000)) КАК ТоварНаименование,
	|	ВложенныйЗапрос.Номенклатура." + ТоварКод + "                 КАК ТоварКод,
	|	ВложенныйЗапрос.ЕдиницаИзмерения.Представление                КАК БазоваяЕдиницаНаименование,
	|	ВложенныйЗапрос.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код  КАК БазоваяЕдиницаКодПоОКЕИ,
	|	ВложенныйЗапрос.ЕдиницаИзмерения     КАК ЕдиницаИзмерения,
	|	ВложенныйЗапрос.ЕдиницаИзмеренияМест.Представление            КАК ВидУпаковки,
	|	ВложенныйЗапрос.КоэффициентМест / ВложенныйЗапрос.Коэффициент КАК КоличествоВОдномМесте,
	|	ВЫБОР
	|		КОГДА ВложенныйЗапрос.КоличествоМест > 0 ТОГДА ВложенныйЗапрос.КоличествоМест * ВложенныйЗапрос.ЕдиницаИзмеренияМест.Вес
	|		ИНАЧЕ ВложенныйЗапрос.Количество * ВложенныйЗапрос.ЕдиницаИзмерения.Вес
	|	КОНЕЦ КАК МассаБрутто,
	|	ВложенныйЗапрос.Характеристика       КАК Характеристика,
	|	ВложенныйЗапрос.Серия                КАК Серия,
	|	ВложенныйЗапрос.СтавкаНДС            КАК СтавкаНДС,
	|	ВложенныйЗапрос.Цена                 КАК Цена,
	|	ВЫБОР
	|		КОГДА((ВложенныйЗапрос.ПроцентСкидкиНаценки = 0) И 
	|		      (ВложенныйЗапрос.ПроцентАвтоматическихСкидок = 0))
	|	ТОГДА ЛОЖЬ
	|	ИНАЧЕ Истина
	|	КОНЕЦ                                КАК ЕстьСкидкиПоСтроке,
	|	ВложенныйЗапрос.Количество           КАК Количество,
	|	ВложенныйЗапрос.КоличествоМест       КАК КоличествоМест,
	|	ВложенныйЗапрос.Сумма                КАК Сумма,
	|	ВложенныйЗапрос.СуммаНДС             КАК СуммаНДС,
	|	ВложенныйЗапрос.НомерСтроки          КАК НомерСтроки,
	|	ВложенныйЗапрос.Метка                КАК Метка
	|ИЗ
	|
	|	(
	|	ВЫБРАТЬ
	|		РеализацияТоваровУслуг.Номенклатура,
	|		РеализацияТоваровУслуг.Коэффициент,
	|		РеализацияТоваровУслуг.ЕдиницаИзмерения,
	|		РеализацияТоваровУслуг.ЕдиницаИзмеренияМест,
	|		РеализацияТоваровУслуг.ЕдиницаИзмеренияМест.Коэффициент     КАК КоэффициентМест,
	|		РеализацияТоваровУслуг.ХарактеристикаНоменклатуры           КАК Характеристика,
	|		РеализацияТоваровУслуг.СерияНоменклатуры                    КАК Серия,
	|		РеализацияТоваровУслуг.СтавкаНДС,
	|		РеализацияТоваровУслуг.Цена * &Курс / &Кратность            КАК Цена,
	|		РеализацияТоваровУслуг.ПроцентСкидкиНаценки,
	|		РеализацияТоваровУслуг.ПроцентАвтоматическихСкидок,
	|		СУММА(РеализацияТоваровУслуг.Количество)                    КАК Количество,
	|		СУММА(РеализацияТоваровУслуг.КоличествоМест)                КАК КоличествоМест,
	|		СУММА(РеализацияТоваровУслуг.Сумма    * &Курс / &Кратность) КАК Сумма,
	|		СУММА(РеализацияТоваровУслуг.СуммаНДС * &Курс / &Кратность) КАК СуммаНДС,
	|		МИНИМУМ(РеализацияТоваровУслуг.НомерСтроки)                 КАК НомерСтроки,
	|		0.00                                                        КАК Метка
	|	ИЗ
	|		Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслуг
	|	ГДЕ
	|		РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент
	|
	|СГРУППИРОВАТЬ ПО
	|		РеализацияТоваровУслуг.Номенклатура,
	|		РеализацияТоваровУслуг.Коэффициент,
	|		РеализацияТоваровУслуг.ЕдиницаИзмерения,
	|		РеализацияТоваровУслуг.ЕдиницаИзмеренияМест,
	|		РеализацияТоваровУслуг.ХарактеристикаНоменклатуры,
	|		РеализацияТоваровУслуг.СерияНоменклатуры,
	|		РеализацияТоваровУслуг.СтавкаНДС,
	|		РеализацияТоваровУслуг.Цена,
	|		РеализацияТоваровУслуг.ПроцентСкидкиНаценки,
	|		РеализацияТоваровУслуг.ПроцентАвтоматическихСкидок
	|	) КАК ВложенныйЗапрос
	|";
	СтрокаВыборкиПоляСодержания = ОбработкаТабличныхЧастей.ПолучитьЧастьЗапросаДляВыбораСодержания("РеализацияТоваровУслуг");
	ТекстЗапросаТовары = ТекстЗапросаТовары + "
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Номенклатура                  КАК Номенклатура,
	|	" + СтрокаВыборкиПоляСодержания + "                  КАК ТоварНаименование,
	|	РеализацияТоваровУслуг.Номенклатура." + ТоварКод + " КАК ТоварКод,
	|	РеализацияТоваровУслуг.Номенклатура.ЕдиницаХраненияОстатков.Представление КАК БазоваяЕдиницаНаименование,
	|	РеализацияТоваровУслуг.Номенклатура.ЕдиницаХраненияОстатков.ЕдиницаПоКлассификатору.Код КАК БазоваяЕдиницаКодПоОКЕИ,
	|	РеализацияТоваровУслуг.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаИзмерения,
	|	NULL                                                 КАК ВидУпаковки,
	|	NULL                                                 КАК КоличествоВОдномМесте,
	|	0.00                                                 КАК МассаБрутто,
	|	NULL                                                 КАК Характеристика,
	|	NULL                                                 КАК Серия,
	|	РеализацияТоваровУслуг.СтавкаНДС                     КАК СтавкаНДС,
	|	РеализацияТоваровУслуг.Цена * &Курс / &Кратность     КАК Цена,
	|	ВЫБОР	КОГДА(РеализацияТоваровУслуг.ПроцентСкидкиНаценки = 0.00)
	|			ТОГДА ЛОЖЬ
	|			ИНАЧЕ Истина
	|	КОНЕЦ                                                КАК ЕстьСкидкиПоСтроке,
	|	РеализацияТоваровУслуг.Количество                    КАК Количество,
	|	NULL                                                 КАК КоличествоМест,
	|	РеализацияТоваровУслуг.Сумма    * &Курс / &Кратность КАК Сумма,
	|	РеализацияТоваровУслуг.СуммаНДС * &Курс / &Кратность КАК СуммаНДС,
	|	РеализацияТоваровУслуг.НомерСтроки                   КАК НомерСтроки,
	|	1.00                                                 КАК Метка
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслуг
	|
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент
	|";
	ТекстЗапросаТовары = ТекстЗапросаТовары + "
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Номенклатура                    КАК Номенклатура,
	|	ВЫРАЗИТЬ(РеализацияТоваровУслуг.Номенклатура.НаименованиеПолное КАК Строка(1000)) КАК ТоварНаименование,
	|	РеализацияТоваровУслуг.Номенклатура." + ТоварКод + "   КАК ТоварКод,
	|	РеализацияТоваровУслуг.Номенклатура.ЕдиницаХраненияОстатков.Представление               КАК БазоваяЕдиницаНаименование,
	|	РеализацияТоваровУслуг.Номенклатура.ЕдиницаХраненияОстатков.ЕдиницаПоКлассификатору.Код КАК БазоваяЕдиницаКодПоОКЕИ,
	|	РеализацияТоваровУслуг.Номенклатура.ЕдиницаХраненияОстатков                             КАК ЕдиницаИзмерения,
	|	NULL                                                  КАК ВидУпаковки,
	|	NULL                                                  КАК КоличествоВОдномМесте,
	|	РеализацияТоваровУслуг.Количество * РеализацияТоваровУслуг.Номенклатура.ЕдиницаХраненияОстатков.Вес КАК МассаБрутто,
	|	NULL                                                  КАК Характеристика,
	|	NULL                                                  КАК Серия,
	|	""Без НДС""                                           КАК СтавкаНДС,
	|	РеализацияТоваровУслуг.Цена * &Курс / &Кратность      КАК Цена,
	|	Ложь                                                  КАК ЕстьСкидкиПоСтроке,
	|	РеализацияТоваровУслуг.Количество                     КАК Количество,
	|	NULL                                                  КАК КоличествоМест,
	|	РеализацияТоваровУслуг.Сумма * &Курс / &Кратность     КАК Сумма,
	|	0.00                                                  КАК СуммаНДС,
	|	РеализацияТоваровУслуг.НомерСтроки                    КАК НомерСтроки,
	|	2.00                                                  КАК Метка
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.ВозвратнаяТара КАК РеализацияТоваровУслуг
	|
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент
	|
	|
	|УПОРЯДОЧИТЬ ПО Метка ВОЗР, НомерСтроки ВОЗР
	|
	|";
	
	ТабДокумент  = Новый ТабличныйДокумент;
	
	// Зададим параметры печатной формы по умолчанию
	ТабДокумент.РазмерКолонтитулаСверху = 0;
	ТабДокумент.РазмерКолонтитулаСнизу  = 0;
	ТабДокумент.АвтоМасштаб             = Истина;
	ТабДокумент.ОриентацияСтраницы      = ОриентацияСтраницы.Ландшафт;
	
	// Восстановим установленные пользователем параметры печатной формы
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РеализацияТоваровУслуг_ТОРГ12";
	
	Макет = ПолучитьОбщийМакет("ТОРГ12");
	
	ПервыйДокумент = Истина;
	
	Для каждого Ссылка Из МассивОбъектов Цикл
		
		Если Не ПервыйДокумент Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;

		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ДатаСреза",          Ссылка.Дата);
		Запрос.УстановитьПараметр("СтруктурнаяЕдиница", Ссылка.Склад);
		Запрос.УстановитьПараметр("ТекущийДокумент",    Ссылка);
		Запрос.УстановитьПараметр("ПустойКонтрагент",   Справочники.Контрагенты.ПустаяСсылка());
		Запрос.УстановитьПараметр("Организация",        Ссылка.Организация);
		Запрос.УстановитьПараметр("Подразделение",      Ссылка.Подразделение);

		Запрос.Текст = ТекстЗапросаШапка;
		
		Шапка = Запрос.Выполнить().Выбрать();
		Шапка.Следующий();
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТекущийДокумент", Ссылка);
		
		Запрос.УстановитьПараметр("Курс",            ЗаполнениеДокументов.КурсДокумента(Ссылка, мВалютаРегламентированногоУчета));
		Запрос.УстановитьПараметр("Кратность",       ЗаполнениеДокументов.КратностьДокумента(Ссылка, мВалютаРегламентированногоУчета));
		Запрос.Текст = ТекстЗапросаТовары;
		ЗапросТовары = Запрос.Выполнить().Выгрузить();
		
		// Вычислим курс документа для печати
		Если Ссылка.ВалютаДокумента <> мВалютаРегламентированногоУчета
		   И (Ссылка.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах
		   ИЛИ Ссылка.Дата >= '20090101000000') Тогда
			
			ЗапросКурсАванса = Новый Запрос;
			ЗапросКурсАванса.УстановитьПараметр("ДокументСсылка", Ссылка);
			ЗапросКурсАванса.Текст =
			"ВЫБРАТЬ
			|	Док.СуммаВзаиморасчетов,
			|	Док.СуммаРегл
			|ИЗ 
			|	Документ.РеализацияТоваровУслуг.ДокументыРасчетовСКонтрагентом КАК Док
			|ГДЕ Док.Ссылка = &ДокументСсылка
			|ИТОГИ СУММА(СуммаВзаиморасчетов), СУММА(СуммаРегл) ПО ОБЩИЕ";
			
			Выборка = ЗапросКурсАванса.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Если Выборка.Следующий() Тогда
				ВыборкаСуммаВзаиморасчетов = Выборка.СуммаВзаиморасчетов;
				ВыборкаСуммаРегл           = Выборка.СуммаРегл;
			Иначе
				ВыборкаСуммаВзаиморасчетов = 0;
				ВыборкаСуммаРегл           = 0;
			КонецЕсли;
			
			РасчетСуммыНДСПоСтавке =  УчетНДС.РасчетНДСвРубляхПоСтавкеДокумента(Шапка.ДатаДокумента);
			
			СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(УчетНДС.ПолучитьСуммуДокументаСНДС(Ссылка),
																Ссылка.ВалютаДокумента, Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов,
																ЗаполнениеДокументов.КурсДокумента(Ссылка, мВалютаРегламентированногоУчета), Ссылка.КурсВзаиморасчетов,
																ЗаполнениеДокументов.КратностьДокумента(Ссылка, мВалютаРегламентированногоУчета), Ссылка.КратностьВзаиморасчетов);
			НеоплаченнаяСумма = СуммаВзаиморасчетов - ВыборкаСуммаВзаиморасчетов;
			
			НеоплаченнаяСуммаРегл = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(НеоплаченнаяСумма,
																Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов, мВалютаРегламентированногоУчета,
																Ссылка.КурсВзаиморасчетов, 1,
																Ссылка.КратностьВзаиморасчетов, 1);
																
			СуммаРегл = ВыборкаСуммаРегл + НеоплаченнаяСуммаРегл;
			
			Если НЕ СуммаРегл = 0 Тогда
				
				ЗапросТовары.Колонки.Добавить("СуммаБезНДС");
				МассивРаспределения = Новый Массив;
				
				Для Каждого СтрокаТовар Из ЗапросТовары Цикл
					Если (СтрокаТовар.Метка = 2) Тогда
						Продолжить;
					КонецЕсли;
					СуммаСНДС = СтрокаТовар.Сумма + ?(Шапка.СуммаВключаетНДС, 0, СтрокаТовар.СуммаНДС);
					СуммаБезНДС = СуммаСНДС - СтрокаТовар.СуммаНДС;
					МассивРаспределения.Добавить(СуммаСНДС);
					СтрокаТовар.СуммаБезНДС = СуммаБезНДС;
				КонецЦикла;
				
				ЗапросТовары.Колонки.Добавить("СуммаРублевая");
				УчетНДС.РаспределитьСуммуПоСтолбцу(МассивРаспределения, СуммаРегл, ЗапросТовары, "СуммаРублевая");
				
				Для Каждого СтрокаТовар Из ЗапросТовары Цикл
					Если (СтрокаТовар.Метка = 2) Тогда
						Продолжить;
					КонецЕсли;
					Если РасчетСуммыНДСПоСтавке Тогда
						//Выделение суммы НДС, Расчет суммы без НДС
						ЗначениеСтавкиНДС = УчетНДС.ПолучитьСтавкуНДС(СтрокаТовар.СтавкаНДС);
						СтрокаТовар.СуммаНДС = ?(ЗначениеСтавкиНДС = 0, 0, Окр(СтрокаТовар.СуммаРублевая * ЗначениеСтавкиНДС/(100+ЗначениеСтавкиНДС),2));
						СтрокаТовар.Сумма = СтрокаТовар.СуммаРублевая - СтрокаТовар.СуммаНДС;
					Иначе
						МассивРаспределения.Очистить();
						МассивРаспределения.Добавить(СтрокаТовар.СуммаБезНДС);
						МассивРаспределения.Добавить(СтрокаТовар.СуммаНДС);
						МассивРаспределенныхСумм = ОбщегоНазначения.РаспределитьПропорционально(СтрокаТовар.СуммаРублевая, МассивРаспределения);
						Если МассивРаспределенныхСумм <> Неопределено Тогда
							СтрокаТовар.Сумма = МассивРаспределенныхСумм[0];
							СтрокаТовар.СуммаНДС = МассивРаспределенныхСумм[1];
						КонецЕсли;
					КонецЕсли;
					
					Если Шапка.СуммаВключаетНДС Тогда
						СтрокаТовар.Сумма = СтрокаТовар.Сумма+СтрокаТовар.СуммаНДС;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	 
		// Выводим общие реквизиты шапки
		СведенияОПоставщике       = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.ЮрФизЛицо,        Шапка.ДатаДокумента,, Шапка.БанковскийСчет);
		СведенияОПокупателе       = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Покупатель,       Шапка.ДатаДокумента);
		СведенияОГрузополучателе  = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Грузополучатель,  Шапка.ДатаДокумента);
		СведенияОГрузоотправитель = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Грузоотправитель, Шапка.ДатаДокумента);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ОбластьМакета.Параметры.НомерДокумента = ОбщегоНазначения.ПолучитьНомерНаПечать(Шапка);
		ОбластьМакета.Параметры.ДатаДокумента  = Шапка.ДатаДокумента;
		
		Если Шапка.ЮрФизЛицо = Шапка.Грузоотправитель Тогда
			ОбластьМакета.Параметры.ПредставлениеОрганизации = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(СведенияОПоставщике);
		Иначе
			ОбластьМакета.Параметры.ПредставлениеОрганизации = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(СведенияОГрузоотправитель, "ПолноеНаименование,ИНН,ФактическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет");
		КонецЕсли;
		
		ОбластьМакета.Параметры.ПредставлениеПодразделения = Шапка.Подразделение;
		
		ОбластьМакета.Параметры.ПредставлениеГрузополучателя = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(СведенияОГрузополучателе, "ПолноеНаименование,ИНН,ФактическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет");
		
		Если СокрЛП(Шапка.АдресДоставки) <> "" Тогда
			ОбластьМакета.Параметры.АдресДоставки = УправлениеКонтактнойИнформацией.ПолучитьПредставлениеАдресаПоСтрока(Шапка.АдресДоставки);
		Иначе
			ОбластьМакета.Параметры.АдресДоставки = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(СведенияОГрузополучателе, "ФактическийАдрес");
		КонецЕсли;
		
		ОбластьМакета.Параметры.ПредставлениеПоставщика  = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(СведенияОПоставщике);
		ОбластьМакета.Параметры.ПредставлениеПлательщика = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(СведенияОПокупателе);
		
		Если Шапка.ВедениеВзаиморасчетов <> Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам
			И Шапка.ВедениеВзаиморасчетов <> Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
			ОбластьМакета.Параметры.Основание = Шапка.Основание;
		Иначе
			Если ЗначениеЗаполнено(Шапка.Сделка) Тогда
				ОбластьМакета.Параметры.Основание = ОбщегоНазначения.СформироватьЗаголовокДокумента(Шапка.Сделка, Строка(Шапка.Сделка.Метаданные().Синоним));
			КонецЕсли;
		КонецЕсли;
		
		// Выводим всевозможные коды
		ОбластьМакета.Параметры.ОрганизацияПоОКПО     = СведенияОГрузоотправитель.КодПоОКПО;
		ОбластьМакета.Параметры.ВидДеятельностиПоОКДП = "";
		ОбластьМакета.Параметры.ГрузополучательПоОКПО = СведенияОГрузополучателе.КодПоОКПО;
		ОбластьМакета.Параметры.ПоставщикПоОКПО       = СведенияОПоставщике.КодПоОКПО;
		ОбластьМакета.Параметры.ПлательщикПоОКПО      = СведенияОПокупателе.КодПоОКПО;
		ОбластьМакета.Параметры.ОснованиеНомер        = "";
		ОбластьМакета.Параметры.ОснованиеДата         = "";
		ОбластьМакета.Параметры.ТранспортнаяНакладнаяНомер = "";
		ОбластьМакета.Параметры.ТранспортнаяНакладнаяДата  = "";
		
		ТабДокумент.Вывести(ОбластьМакета);
		
		НомерСтраницы   = 1;
		
		НомерСтроки     = 0;
		КоличествоСтрок = ЗапросТовары.Количество();
		
		Если БезУслуг Тогда
			Для Инд = 1 По КоличествоСтрок Цикл
				СтрокаТовара = ЗапросТовары[КоличествоСтрок - Инд];
				Если (СтрокаТовара.Метка = 1) Тогда
					ЗапросТовары.Удалить(СтрокаТовара);
				КонецЕсли;
			КонецЦикла;
			
			КоличествоСтрок = ЗапросТовары.Количество();		
		КонецЕсли;
		
		// инициализация итогов по странице
		ИтогоМассаБруттоНаСтранице = 0;
		ИтогоМестНаСтранице        = 0;
		ИтогоКоличествоНаСтранице  = 0;
		ИтогоСуммаНаСтранице       = 0;
		ИтогоНДСНаСтранице         = 0;
		ИтогоСуммаСНДСНаСтранице   = 0;
		
		// инициализация итогов по документу
		ИтогоМассаБрутто = 0;
		ИтогоМест        = 0;
		ИтогоКоличество  = 0;
		ИтогоСуммаСНДС   = 0;
		ИтогоСумма       = 0;
		ИтогоНДС         = 0;
		
		// Создаем массив для проверки вывода
		МассивВыводимыхОбластей = Новый Массив;
		
		// Выводим многострочную часть докмента
		ЗаголовокТаблицы        = Макет.ПолучитьОбласть("ЗаголовокТаб");
		ОбластьМакета           = Макет.ПолучитьОбласть("Строка");
		ОбластьИтоговПоСтранице = Макет.ПолучитьОбласть("ИтогоПоСтранице");
		ОбластьПодвала          = Макет.ПолучитьОбласть("Подвал");
		ОбластьМакетаВсего      = Макет.ПолучитьОбласть("Всего");
		
		Если Ссылка.Дата >= Константы.ДатаНачалаОперацийСТоварамиОблагаемымиНДСУПокупателя.Получить()
			И Ссылка.ДоговорКонтрагента.РеализацияТоваровОблагаемыхНДСУПокупателя Тогда
			РеализацияТоваровОблагаемыхНДСУПокупателя = Истина;
		Иначе
			РеализацияТоваровОблагаемыхНДСУПокупателя = Ложь;
		КонецЕсли;
			
		Для Каждого ВыборкаСтрок Из ЗапросТовары Цикл
			
			Если НЕ ЗначениеЗаполнено(ВыборкаСтрок.Номенклатура) Тогда
				Продолжить;
			КонецЕсли;
			
			НомерСтроки = НомерСтроки + 1;
			
			ОбластьМакета.Параметры.Заполнить(ВыборкаСтрок);
			ОбластьМакета.Параметры.Номер             = ЗапросТовары.Индекс(ВыборкаСтрок) + 1;
			ОбластьМакета.Параметры.ТоварНаименование = СокрЛП(ВыборкаСтрок.ТоварНаименование)
			+ ФормированиеПечатныхФормСервер.ПредставлениеСерий(ВыборкаСтрок)
			+ ?(ВыборкаСтрок.Метка = 2, " (возвратная тара)", "");
			
			Если НЕ ЗначениеЗаполнено(ЕдиницаИзмеренияВеса) Тогда
				МассаБрутто = 0;
			Иначе
				МассаБрутто = ВыборкаСтрок.МассаБрутто;
				МассаБрутто = ?(МассаБрутто <> Неопределено И МассаБрутто <> NULL, МассаБрутто, 0);
			КонецЕсли;
			
			Мест        = ВыборкаСтрок.КоличествоМест;
			Мест        = ?(Мест <> Неопределено И Мест <> NULL, Мест, 0);
			
			Количество  = ВыборкаСтрок.Количество;
			СуммаСНДС   = Окр((ВыборкаСтрок.Сумма + ?(Шапка.СуммаВключаетНДС, 0, ВыборкаСтрок.СуммаНДС)), 2);
			СуммаНДС    = Окр(ВыборкаСтрок.СуммаНДС, 2);
			СуммаБезНДС = СуммаСНДС  - СуммаНДС;
			
			ОбластьМакета.Параметры.МассаБрутто = МассаБрутто;
			Если РеализацияТоваровОблагаемыхНДСУПокупателя Тогда
				ОбластьМакета.Параметры.СтавкаНДС  = "НДС исчисляется налоговым агентом";
				ОбластьМакета.Параметры.СуммаНДС  = "--";
				ОбластьМакета.Параметры.СуммаСНДС   = "--";
			Иначе
				ОбластьМакета.Параметры.СуммаНДС    = СуммаНДС;
				ОбластьМакета.Параметры.СтавкаНДС   = ВыборкаСтрок.СтавкаНДС;
				ОбластьМакета.Параметры.СуммаСНДС   = СуммаСНДС;
			КонецЕсли;
			ОбластьМакета.Параметры.СуммаБезНДС = СуммаБезНДС;
			
			Если Шапка.СуммаВключаетНДС Или ВыборкаСтрок.ЕстьСкидкиПоСтроке
				ИЛИ Шапка.ВалютаДокумента <> мВалютаРегламентированногоУчета Тогда
				ОбластьМакета.Параметры.Цена = ?(Количество = 0, 0, СуммаБезНДС / Количество);
			Иначе
				ОбластьМакета.Параметры.Цена = ВыборкаСтрок.Цена;
			КонецЕсли;
			
			Если НомерСтроки = 1 Тогда // первая строка
				
				ЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы; 
				ТабДокумент.Вывести(ЗаголовокТаблицы);
				
			Иначе
				
				МассивВыводимыхОбластей.Очистить();
				МассивВыводимыхОбластей.Добавить(ОбластьМакета);
				МассивВыводимыхОбластей.Добавить(ОбластьИтоговПоСтранице);
				Если НомерСтроки = КоличествоСтрок Тогда
					МассивВыводимыхОбластей.Добавить(ОбластьПодвала);
					МассивВыводимыхОбластей.Добавить(ОбластьМакетаВсего);
				КонецЕсли;		
				
				Если НомерСтроки <> 1 И НЕ ФормированиеПечатныхФормСервер.ПроверитьВыводТабличногоДокумента(ТабДокумент, МассивВыводимыхОбластей) Тогда
					
					ОбластьИтоговПоСтранице.Параметры.ИтогМассаБруттоПоСтранице = ИтогоМассаБруттоНаСтранице;
					ОбластьИтоговПоСтранице.Параметры.ИтогМестПоСтранице        = ИтогоМестНаСтранице;
					ОбластьИтоговПоСтранице.Параметры.ИтогКоличествоПоСтранице  = ИтогоКоличествоНаСтранице;
					ОбластьИтоговПоСтранице.Параметры.ИтогСуммыПоСтранице       = ИтогоСуммаНаСтранице;
					ОбластьИтоговПоСтранице.Параметры.ИтогНДСПоСтранице         = ИтогоНДСНаСтранице;
					ОбластьИтоговПоСтранице.Параметры.ИтогСуммыСНДСПоСтранице   = ИтогоСуммаСНДСНаСтранице;
					
					ТабДокумент.Вывести(ОбластьИтоговПоСтранице);
					
					// очистим итоги по странице
					ИтогоМассаБруттоНаСтранице = 0;
					ИтогоМестНаСтранице        = 0;
					ИтогоКоличествоНаСтранице  = 0;
					ИтогоСуммаНаСтранице       = 0;
					ИтогоНДСНаСтранице         = 0;
					ИтогоСуммаСНДСНаСтранице   = 0;
					
					НомерСтраницы = НомерСтраницы + 1;
					ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
					ЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы;
					ТабДокумент.Вывести(ЗаголовокТаблицы);
					
				КонецЕсли;
				
			КонецЕсли;
			
			ТабДокумент.Вывести(ОбластьМакета);
			
			// увеличим итоги по странице
			ИтогоМассаБруттоНаСтранице = ИтогоМассаБруттоНаСтранице + МассаБрутто;
			ИтогоМестНаСтранице        = ИтогоМестНаСтранице        + Мест;
			ИтогоКоличествоНаСтранице  = ИтогоКоличествоНаСтранице  + Количество;
			ИтогоСуммаНаСтранице       = ИтогоСуммаНаСтранице       + СуммаБезНДС;
			Если Не РеализацияТоваровОблагаемыхНДСУПокупателя Тогда
				ИтогоНДСНаСтранице         = ИтогоНДСНаСтранице         + СуммаНДС;
				ИтогоСуммаСНДСНаСтранице   = ИтогоСуммаСНДСНаСтранице   + СуммаСНДС;
			КонецЕсли;
			
			// увеличим итоги по дукументу
			ИтогоМассаБрутто = ИтогоМассаБрутто + МассаБрутто;
			ИтогоМест        = ИтогоМест        + Мест;
			ИтогоКоличество  = ИтогоКоличество  + Количество;
			ИтогоСумма       = ИтогоСумма       + СуммаБезНДС;
			Если Не РеализацияТоваровОблагаемыхНДСУПокупателя Тогда
				ИтогоНДС         = ИтогоНДС         + СуммаНДС;
				ИтогоСуммаСНДС   = ИтогоСуммаСНДС   + СуммаСНДС;
			КонецЕсли;
			
		КонецЦикла;
		
		// Выводим итоги по последней странице
		ОбластьИтоговПоСтранице.Параметры.ИтогМассаБруттоПоСтранице = ИтогоМассаБруттоНаСтранице;
		ОбластьИтоговПоСтранице.Параметры.ИтогМестПоСтранице        = ИтогоМестНаСтранице;
		ОбластьИтоговПоСтранице.Параметры.ИтогКоличествоПоСтранице  = ИтогоКоличествоНаСтранице;
		ОбластьИтоговПоСтранице.Параметры.ИтогСуммыПоСтранице       = ИтогоСуммаНаСтранице;
		ОбластьИтоговПоСтранице.Параметры.ИтогНДСПоСтранице         = ?(РеализацияТоваровОблагаемыхНДСУПокупателя, "--", ИтогоНДСНаСтранице);
		ОбластьИтоговПоСтранице.Параметры.ИтогСуммыСНДСПоСтранице   = ?(РеализацияТоваровОблагаемыхНДСУПокупателя, "--", ИтогоСуммаСНДСНаСтранице);
		
		ТабДокумент.Вывести(ОбластьИтоговПоСтранице);
		
		// Выводим итоги по документу в целом
		ОбластьМакетаВсего.Параметры.ИтогМассаБрутто = ИтогоМассаБрутто;
		ОбластьМакетаВсего.Параметры.ИтогМест        = ИтогоМест;
		ОбластьМакетаВсего.Параметры.ИтогКоличество  = ИтогоКоличество;
		ОбластьМакетаВсего.Параметры.ИтогСуммы       = ИтогоСумма;
		ОбластьМакетаВсего.Параметры.ИтогНДС         = ?(РеализацияТоваровОблагаемыхНДСУПокупателя, "--", ИтогоНДС);
		ОбластьМакетаВсего.Параметры.ИтогСуммыСНДС   = ?(РеализацияТоваровОблагаемыхНДСУПокупателя, "--", ИтогоСуммаСНДС);
		
		ТабДокумент.Вывести(ОбластьМакетаВсего);
		
		// Выводим подвал документа
		ПолнаяДатаДокумента = Формат(Шапка.ДатаДокумента, "ДФ=""дд ММММ гггг """"года""""""");
		ДлинаСтроки = СтрДлина(ПолнаяДатаДокумента);
		ПервыйРазделитель = Найти(ПолнаяДатаДокумента," ");
		ВторойРазделитель = Найти(Прав(ПолнаяДатаДокумента,ДлинаСтроки-ПервыйРазделитель)," ")+ПервыйРазделитель;
		ОбластьПодвала.Параметры.ДатаДокументаДень     = """"+Лев(ПолнаяДатаДокумента,ПервыйРазделитель-1)+"""";
		ОбластьПодвала.Параметры.ДатаДокументаМесяц    = Сред(ПолнаяДатаДокумента,ПервыйРазделитель+1,ВторойРазделитель-ПервыйРазделитель-1);
		ОбластьПодвала.Параметры.ДатаДокументаГод      = Прав(ПолнаяДатаДокумента,ДлинаСтроки-ВторойРазделитель);	
		
		Руководители = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизаций(Шапка.Руководители, Шапка.ДатаДокумента,);
		Руководитель = Руководители.Руководитель;
		Бухгалтер    = Руководители.ГлавныйБухгалтер;
		
		// Главный бухгалтер
		Если НЕ ЗначениеЗаполнено(Шапка.ГлавныйБухгалтер) Тогда
			ФИОБухгалтер 					 = Бухгалтер;	
		Иначе
			ФамилияИмяОтчествоФизЛица        = ФормированиеПечатныхФормСервер.ФамилияИмяОтчество(Шапка.ГлавныйБухгалтер, Шапка.ДатаДокумента);
			ФамилияИмяОтчествоБухгалтер 	 = ФамилияИмяОтчествоФизЛица.Фамилия + " " + ФамилияИмяОтчествоФизЛица.Имя + " " + ФамилияИмяОтчествоФизЛица.Отчество;
			ФИОБухгалтер                	 = ОбщегоНазначения.ФамилияИнициалыФизЛица(ФамилияИмяОтчествоБухгалтер);
			ФИОБухгалтер					 = ФИОБухгалтер + " " + Шапка.ЗаГлавногоБухгалтераПоПриказу;
		КонецЕсли;		
		ОбластьПодвала.Параметры.ФИОГлавБухгалтера = ФИОБухгалтер;
		
		// Отпуск товара разрешил
		Если НЕ ЗначениеЗаполнено(Шапка.ОтпускРазрешил) Тогда
			ФИООтпускРазрешил       = Руководитель;
			ДолжностьОтпускРазрешил = Руководители.РуководительДолжность;
		Иначе
			ФамилияИмяОтчествоФизЛица        = ФормированиеПечатныхФормСервер.ФамилияИмяОтчество(Шапка.ОтпускРазрешил, Шапка.ДатаДокумента);
			ПодразделениеДолжностьФизЛица    = ПолныеПрава.СведенияОСотруднике(Шапка.ОтпускРазрешил, Шапка.ДатаДокумента, Шапка.Организация);
			ФамилияИмяОтчествоОтпускРазрешил = ФамилияИмяОтчествоФизЛица.Фамилия + " " + ФамилияИмяОтчествоФизЛица.Имя + " " + ФамилияИмяОтчествоФизЛица.Отчество;
			ФИООтпускРазрешил                = ОбщегоНазначения.ФамилияИнициалыФизЛица(ФамилияИмяОтчествоОтпускРазрешил);
			ДолжностьОтпускРазрешил          = ПодразделениеДолжностьФизЛица.Должность;
			ФИООтпускРазрешил			 	 = ФИООтпускРазрешил  + " " + Шапка.ЗаРуководителяПоПриказу;
		КонецЕсли;
		
		ОбластьПодвала.Параметры.ФИОРуководителя       = ФИООтпускРазрешил;
		ОбластьПодвала.Параметры.ДолжностьРуководителя = ДолжностьОтпускРазрешил;
		
		// Отпуск товара произвел
		Если НЕ ЗначениеЗаполнено(Шапка.ОтпускПроизвел) Тогда
			ФамилияИмяОтчествоФизЛица     = ФормированиеПечатныхФормСервер.ФамилияИмяОтчество(Шапка.ОтветственноеЛицо, Шапка.ДатаДокумента);
			ПодразделениеДолжностьФизЛица = ПолныеПрава.СведенияОСотруднике(Шапка.ОтветственноеЛицо, Шапка.ДатаДокумента, Шапка.Организация);
		Иначе
			ФамилияИмяОтчествоФизЛица     = ФормированиеПечатныхФормСервер.ФамилияИмяОтчество(Шапка.ОтпускПроизвел, Шапка.ДатаДокумента);
			ПодразделениеДолжностьФизЛица = ПолныеПрава.СведенияОСотруднике(Шапка.ОтпускПроизвел, Шапка.ДатаДокумента, Шапка.Организация);
		КонецЕсли;
		
		ФамилияИмяОтчествоОтпускПроизвел = ФамилияИмяОтчествоФизЛица.Фамилия + " " + ФамилияИмяОтчествоФизЛица.Имя + " " + ФамилияИмяОтчествоФизЛица.Отчество;
		ФИООтпускПроизвел                = ОбщегоНазначения.ФамилияИнициалыФизЛица(ФамилияИмяОтчествоОтпускПроизвел);
		ДолжностьОтпускПроизвел          = ПодразделениеДолжностьФизЛица.Должность;
		
		ОбластьПодвала.Параметры.ФИОКладовщика       = ФИООтпускПроизвел;
		ОбластьПодвала.Параметры.ДолжностьКладовщика = ДолжностьОтпускПроизвел;
		
		// Доверенность
		ОбластьПодвала.Параметры.ДоверенностьНомер     = Шапка.ДоверенностьНомер;
		ОбластьПодвала.Параметры.ДоверенностьДата      = Формат(Шапка.ДоверенностьДата, "ДФ='дд ММММ гггг'");
		ОбластьПодвала.Параметры.ДоверенностьВыдана    = Шапка.ДоверенностьВыдана;
		ОбластьПодвала.Параметры.ДоверенностьЧерезКого = Шапка.ДоверенностьЧерезКого;
		
		Если ЗначениеЗаполнено(ЕдиницаИзмеренияВеса) И ИтогоМассаБрутто > 0 Тогда
			ОбластьПодвала.Параметры.МассаГрузаПрописью = ЧислоПрописью(ИтогоМассаБрутто, ,",,,,,,,,0")+ " " +ЕдиницаИзмеренияВеса.Наименование + ".";
		КонецЕсли;
		
		Если ИтогоМест > 0 Тогда
			ОбластьПодвала.Параметры.ВсегоМестПрописью = ЧислоПрописью(ИтогоМест, ,",,,,,,,,0");
		КонецЕсли;
		
		ОбластьПодвала.Параметры.КоличествоПорядковыхНомеровЗаписейПрописью = ЧислоПрописью(КоличествоСтрок, ,",,,,,,,,0");
		ОбластьПодвала.Параметры.СуммаПрописью = ОбщегоНазначения.СформироватьСуммуПрописью(?(ИтогоСуммаСНДС=0, ИтогоСумма, ИтогоСуммаСНДС), мВалютаРегламентированногоУчета);
		ТабДокумент.Вывести(ОбластьПодвала);
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент, НомерСтрокиНачало, ОбъектыПечати, Ссылка);
	КонецЦикла;
	
	Возврат ТабДокумент;
	
КонецФункции // ПечатьТОРГ12()

// Функция формирует табличный документ с печатной формой акта на передачу прав,
// разработанной методистами
//
// Возвращаемое значение:
//  Табличный документ - печатная форма акта на передачу прав
//
Функция ПечатьАктаНаПередачуПрав(МассивОбъектов, ОбъектыПечати) Экспорт
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РеализацияТоваровУслуг_АктНаПередачуПрав";
	ПервыйДокумент = Истина;
	
	Для Каждого Ссылка Из МассивОбъектов Цикл
		
		Если Не ПервыйДокумент Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;
		
		ДанныеДляПечати = ПолучитьДанныеДляПечатиАктаНаПередачуПрав(Ссылка, глЗначениеПеременной("ВалютаРегламентированногоУчета"));
		ВывестиАктНаПередачуПравВТабличныйДокумент(ТабДокумент, ДанныеДляПечати);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент, НомерСтрокиНачало, ОбъектыПечати, Ссылка);
		
	КонецЦикла;
	
	Возврат ТабДокумент;
	
КонецФункции

Функция ПолучитьДанныеДляПечатиАктаНаПередачуПрав(Ссылка, ВалютаДанных) Экспорт
	
	ТипДокумента = ТипЗнч(Ссылка);
	
	// 1. Получим данные шапки
	ТекстЗапросаШапка =
	"ВЫБРАТЬ
	|	//РеализацияТоваровУслуг """" КАК ВидОперации,
	|	//КорректировкаРеализации ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЭД.Исправление) КАК ВидОперации,
	|	//РеализацияТоваровУслуг Док.Сделка КАК ДокументОснование,
	|	//КорректировкаРеализации Док.ДокументРеализации КАК ДокументОснование,
	|	//РеализацияТоваровУслуг ЗНАЧЕНИЕ(Документ.РеализацияТоваровУслуг.ПустаяСсылка) КАК ИсправляемыйДокументРеализации,
	|	//КорректировкаРеализации ИсправляемыйДокументРеализации КАК ИсправляемыйДокументРеализации,
	|	Док.Номер КАК НомерДокумента,
	|	Док.Дата КАК ДатаДокумента,
	|	Док.АдресДоставки,
	|	Док.БанковскийСчетОрганизации,
	|	Док.ВалютаДокумента,
	|	Док.Грузоотправитель,
	|	ВЫБОР
	|		КОГДА Док.Грузополучатель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА Док.Контрагент
	|		ИНАЧЕ Док.Грузополучатель
	|	КОНЕЦ КАК Грузополучатель,
	|	Док.ДоговорКонтрагента,
	|	Док.Контрагент,
	|	Док.КратностьВзаиморасчетов,
	|	Док.КурсВзаиморасчетов,
	|	Док.Организация,
	|	Док.СуммаВключаетНДС,
	|	Док.УчитыватьНДС,
	|	//РеализацияТоваровУслуг Док.ОтпускРазрешил,
	|	//КорректировкаРеализации Док.ИсправляемыйДокументРеализации.ОтпускРазрешил КАК ОтпускРазрешил,
	|	//РеализацияТоваровУслуг Док.ОтпускПроизвел,
	|	//КорректировкаРеализации Док.ИсправляемыйДокументРеализации.ОтпускПроизвел КАК ОтпускПроизвел,
	|	//РеализацияТоваровУслуг Док.ДоверенностьНомер,
	|	//КорректировкаРеализации Док.ИсправляемыйДокументРеализации.ДоверенностьНомер КАК ДоверенностьНомер,
	|	//РеализацияТоваровУслуг Док.ДоверенностьДата,
	|	//КорректировкаРеализации Док.ИсправляемыйДокументРеализации.ДоверенностьДата КАК ДоверенностьДата,
	|	//РеализацияТоваровУслуг Док.ДоверенностьВыдана,
	|	//КорректировкаРеализации Док.ИсправляемыйДокументРеализации.ДоверенностьВыдана КАК ДоверенностьВыдана,
	|	//РеализацияТоваровУслуг Док.ДоверенностьЧерезКого,
	|	//КорректировкаРеализации Док.ИсправляемыйДокументРеализации.ДоверенностьЧерезКого КАК ДоверенностьЧерезКого,
	|	Док.ДополнениеКАдресуДоставки,
	|	//РеализацияТоваровУслуг Док.ГлавныйБухгалтер,
	|	//КорректировкаРеализации Док.ИсправляемыйДокументРеализации.ГлавныйБухгалтер КАК ГлавныйБухгалтер,
	|	//РеализацияТоваровУслуг Док.ЗаРуководителяПоПриказу,
	|	//КорректировкаРеализации Док.ИсправляемыйДокументРеализации.ЗаРуководителяПоПриказу КАК ЗаРуководителяПоПриказу,
	|	Док.Сделка,
	|	Док.ДоговорКонтрагента.ВедениеВзаиморасчетов КАК ВедениеВзаиморасчетов,
	|	Док.Организация.ИндивидуальныйПредприниматель КАК ИндивидуальныйПредприниматель
	|ИЗ
	|	//РеализацияТоваровУслуг Документ.РеализацияТоваровУслуг КАК Док
	|	//КорректировкаРеализации Документ.КорректировкаРеализации КАК Док
	|ГДЕ
	|	Док.Ссылка = &ТекущийДокумент";
	
	Если ТипДокумента = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
		ТекстЗапросаШапка = СтрЗаменить(ТекстЗапросаШапка, "//КорректировкаРеализации", "");
	Иначе
		ТекстЗапросаШапка = СтрЗаменить(ТекстЗапросаШапка, "//РеализацияТоваровУслуг", "");
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапросаШапка);
	Запрос.УстановитьПараметр("ТекущийДокумент", Ссылка);
	
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	
	// 2. Получим данные табличной части
	ТекстЗапросаТЧ =
	"ВЫБРАТЬ
	|	ТЧ.Номенклатура КАК Номенклатура,
	|	ВЫРАЗИТЬ(ТЧ.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК Наименование,
	|	ВЫБОР
	|		КОГДА &ДопКолонка = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул)
	|			ТОГДА ТЧ.Номенклатура.Артикул
	|		ИНАЧЕ ТЧ.Номенклатура.Код
	|	КОНЕЦ КАК ТоварКод,
	|	ТЧ.БазоваяЕдиницаИзмерения.Код КАК БазоваяЕдиницаКод,
	|	ТЧ.БазоваяЕдиницаИзмерения.Представление КАК БазоваяЕдиницаНаименование,
	|	ТЧ.БазоваяЕдиницаИзмерения.НаименованиеПолное КАК БазоваяЕдиницаНаименованиеПолное,
	|	ТЧ.БазоваяЕдиницаИзмерения.МеждународноеСокращение КАК БазоваяЕдиницаМеждународноеСокращение,
	|	ТЧ.ЕдиницаИзмерения КАК Упаковка,
	|	ТЧ.Характеристика КАК Характеристика,
	|	ТЧ.Серия КАК Серия,
	|	ТЧ.СтавкаНДС КАК СтавкаНДС,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА ТЧ.ПроцентАвтоматическихСкидок <> 0
	|					ИЛИ ТЧ.ПроцентСкидкиНаценки <> 0
	|				ТОГДА ВЫБОР
	|						КОГДА ТЧ.Количество = 0
	|							ТОГДА 0
	|						ИНАЧЕ ВЫБОР
	|								КОГДА ТЧ.СуммаВключаетНДС
	|									ТОГДА ВЫРАЗИТЬ(ТЧ.СуммаСНДС / ТЧ.Количество КАК ЧИСЛО(15, 2))
	|								ИНАЧЕ ВЫРАЗИТЬ(ТЧ.СуммаБезНДС / ТЧ.Количество КАК ЧИСЛО(15, 2))
	|							КОНЕЦ
	|					КОНЕЦ
	|			ИНАЧЕ ТЧ.Цена
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК Цена,
	|	ТЧ.Количество КАК Количество,
	|	ВЫРАЗИТЬ(ТЧ.СуммаБезНДС КАК ЧИСЛО(15, 2)) КАК СуммаБезНДС,
	|	ВЫРАЗИТЬ(ТЧ.СуммаНДС КАК ЧИСЛО(15, 2)) КАК СуммаНДС,
	|	ВЫРАЗИТЬ(ТЧ.СуммаСНДС КАК ЧИСЛО(15, 2)) КАК СуммаСНДС,
	|	ТЧ.СуммаВключаетНДС КАК НДСУчтеноВСумме,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА ТЧ.СуммаВключаетНДС
	|				ТОГДА ТЧ.СуммаСНДС
	|			ИНАЧЕ ТЧ.СуммаБезНДС
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК Сумма,
	|	ТЧ.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код КАК ЕдиницаИзмеренияКодПоОКЕИ,
	|	ТЧ.ЕдиницаИзмерения.Коэффициент КАК ЕдиницаИзмеренияКоэффициент,
	|	ТЧ.ЕдиницаИзмерения.Представление КАК ЕдиницаИзмеренияНаименование,
	|	ТЧ.СтранаПроисхождения.НаименованиеПолное КАК Страна,
	|	ТЧ.НомерГТД.Код КАК ГТД,
	|	ТЧ.ДокументОснование КАК ДокументОснование
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТЧ.Номенклатура КАК Номенклатура,
	|		ТЧ.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|		ТЧ.Номенклатура.БазоваяЕдиницаИзмерения КАК БазоваяЕдиницаИзмерения,
	|		ТЧ.ХарактеристикаНоменклатуры КАК Характеристика,
	|		ТЧ.СерияНоменклатуры КАК Серия,
	|		ТЧ.СтавкаНДС КАК СтавкаНДС,
	|		ТЧ.Цена * &Курс / &Кратность КАК Цена,
	|		СУММА(ТЧ.Количество) КАК Количество,
	|		СУММА(ТЧ.СуммаНДС * &Курс / &Кратность) КАК СуммаНДС,
	|		МИНИМУМ(ТЧ.НомерСтроки) КАК НомерСтроки,
	|		ТЧ.Ссылка.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|		СУММА(ВЫБОР
	|				КОГДА ТЧ.Ссылка.СуммаВключаетНДС
	|					ТОГДА ТЧ.Сумма - ТЧ.СуммаНДС
	|				ИНАЧЕ ТЧ.Сумма
	|			КОНЕЦ * &Курс / &Кратность) КАК СуммаБезНДС,
	|		СУММА(ВЫБОР
	|				КОГДА ТЧ.Ссылка.СуммаВключаетНДС
	|					ТОГДА ТЧ.Сумма
	|				ИНАЧЕ ТЧ.Сумма + ТЧ.СуммаНДС
	|			КОНЕЦ * &Курс / &Кратность) КАК СуммаСНДС,
	|		ТЧ.СерияНоменклатуры.СтранаПроисхождения КАК СтранаПроисхождения,
	|		ТЧ.СерияНоменклатуры.НомерГТД КАК НомерГТД,
	|		//РеализацияТоваровУслуг ТЧ.ПроцентАвтоматическихСкидок КАК ПроцентАвтоматическихСкидок,
	|		//КорректировкаРеализации 0 КАК ПроцентАвтоматическихСкидок,
	|		//РеализацияТоваровУслуг ТЧ.ПроцентСкидкиНаценки КАК ПроцентСкидкиНаценки,
	|		//КорректировкаРеализации 0 КАК ПроцентСкидкиНаценки,
	|		ТЧ.ЗаказПокупателя КАК ДокументОснование
	|	ИЗ
	|		//РеализацияТоваровУслуг Документ.РеализацияТоваровУслуг.Товары КАК ТЧ
	|		//КорректировкаРеализации Документ.КорректировкаРеализации.Товары КАК ТЧ
	|	ГДЕ
	|		ТЧ.Ссылка = &ТекущийДокумент
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ТЧ.Номенклатура,
	|		ТЧ.ЕдиницаИзмерения,
	|		ТЧ.ХарактеристикаНоменклатуры,
	|		ТЧ.СерияНоменклатуры,
	|		ТЧ.СтавкаНДС,
	|		ТЧ.Ссылка.СуммаВключаетНДС,
	|		ТЧ.Номенклатура.БазоваяЕдиницаИзмерения,
	|		ТЧ.СерияНоменклатуры.СтранаПроисхождения,
	|		ТЧ.СерияНоменклатуры.НомерГТД,
	|		//РеализацияТоваровУслуг ТЧ.ПроцентАвтоматическихСкидок,
	|		//РеализацияТоваровУслуг ТЧ.ПроцентСкидкиНаценки,
	|		ТЧ.ЗаказПокупателя,
	|		ТЧ.Цена * &Курс / &Кратность) КАК ТЧ
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТЧ.НомерСтроки";
	
	Если ТипДокумента = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
		ТекстЗапросаТЧ = СтрЗаменить(ТекстЗапросаТЧ, "//КорректировкаРеализации", "");
	Иначе
		ТекстЗапросаТЧ = СтрЗаменить(ТекстЗапросаТЧ, "//РеализацияТоваровУслуг", "");
	КонецЕсли;

	Запрос = Новый Запрос(ТекстЗапросаТЧ);
	Запрос.УстановитьПараметр("ТекущийДокумент", Ссылка);
	Запрос.УстановитьПараметр("ДопКолонка", 	 глЗначениеПеременной("ДополнительнаяКолонкаПечатныхФормДокументов"));
	Запрос.УстановитьПараметр("Курс",            ЗаполнениеДокументов.КурсДокумента(Ссылка, ВалютаДанных));
	Запрос.УстановитьПараметр("Кратность",       ЗаполнениеДокументов.КратностьДокумента(Ссылка, ВалютаДанных));
	
	тчТовары = Запрос.Выполнить().Выгрузить();
	
	// 3. Получим серийные номера
	ТекстЗапросаСН = 
	"ВЫБРАТЬ
	|	ТЧ.Номенклатура КАК Номенклатура,
	|	ТЧ.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код КАК ЕдиницаИзмеренияКодПоОКЕИ,
	|	ТЧ.ХарактеристикаНоменклатуры КАК Характеристика,
	|	ТЧ.СерияНоменклатуры КАК Серия,
	|	ТЧ.СтавкаНДС КАК СтавкаНДС,
	|	//РеализацияТоваровУслуг ВЫРАЗИТЬ(ВЫБОР
	|	//РеализацияТоваровУслуг 		КОГДА ТЧ.ПроцентАвтоматическихСкидок <> 0
	|	//РеализацияТоваровУслуг 				ИЛИ ТЧ.ПроцентСкидкиНаценки <> 0
	|	//РеализацияТоваровУслуг 			ТОГДА ВЫБОР
	|	//РеализацияТоваровУслуг 					КОГДА ТЧ.Количество = 0
	|	//РеализацияТоваровУслуг 						ТОГДА 0
	|	//РеализацияТоваровУслуг 					ИНАЧЕ (ТЧ.Сумма - ТЧ.СуммаНДС) / ТЧ.Количество
	|	//РеализацияТоваровУслуг 				КОНЕЦ
	|	//РеализацияТоваровУслуг 		ИНАЧЕ ТЧ.Цена
	|	//РеализацияТоваровУслуг 	КОНЕЦ * &Курс / &Кратность КАК ЧИСЛО(15, 2)) КАК Цена,
	|	//КорректировкаРеализации ВЫРАЗИТЬ(ТЧ.Цена * &Курс / &Кратность КАК ЧИСЛО(15, 2)) КАК Цена,
	|	СН.СерийныйНомер.Код КАК СерийныйНомер
	|ИЗ
	|	//РеализацияТоваровУслуг Документ.РеализацияТоваровУслуг.Товары КАК ТЧ
	|	//КорректировкаРеализации Документ.КорректировкаРеализации.Товары КАК ТЧ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
	|	//РеализацияТоваровУслуг Документ.РеализацияТоваровУслуг.СерийныеНомера КАК СН
	|	//КорректировкаРеализации Документ.КорректировкаРеализации.СерийныеНомера КАК СН
	|		ПО ТЧ.КлючСвязи = СН.КлючСвязи
	|ГДЕ
	|	ТЧ.Ссылка = &ТекущийДокумент
	|	И СН.Ссылка = &ТекущийДокумент";
	
	Если ТипДокумента = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
		ТекстЗапросаСН = СтрЗаменить(ТекстЗапросаСН, "//КорректировкаРеализации", "");
	Иначе
		ТекстЗапросаСН = СтрЗаменить(ТекстЗапросаСН, "//РеализацияТоваровУслуг", "");
	КонецЕсли;

	Запрос = Новый Запрос(ТекстЗапросаСН);
	Запрос.УстановитьПараметр("ТекущийДокумент", Ссылка);
	Запрос.УстановитьПараметр("Курс",            ЗаполнениеДокументов.КурсДокумента(Ссылка, ВалютаДанных));
	Запрос.УстановитьПараметр("Кратность",       ЗаполнениеДокументов.КратностьДокумента(Ссылка, ВалютаДанных));

	тчСерийныеНомера = Запрос.Выполнить().Выгрузить();
	
	// 4. Заполним возвращаемую структуру
	ДанныеДляПечати = Новый Структура();	
	// Вспомогательные данные {
	// Валюта данных может или совпадать с валютой документа или с валютой регламентированного учета
	ДанныеДляПечати.Вставить("ВалютаДанных",       ВалютаДанных);
	ДанныеДляПечати.Вставить("ВалютаДокумента",    Шапка.ВалютаДокумента);
	ДанныеДляПечати.Вставить("КурсДокумента",      ЗаполнениеДокументов.КурсДокумента(Ссылка, ВалютаДанных));
	ДанныеДляПечати.Вставить("КратностьДокумента", ЗаполнениеДокументов.КратностьДокумента(Ссылка, ВалютаДанных));
	// Вспомогательные данные }
	
	СписокЮр   = "ПолноеНаименование,ИНН,Свидетельство,ЮридическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет";
	СписокФакт = "ПолноеНаименование,ИНН,Свидетельство,ФактическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет";
	
	СведенияОЛицензиаре = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Организация, Шапка.ДатаДокумента, , Шапка.БанковскийСчетОрганизации);
	СведенияОЛицензиаре.Вставить("ЮрФизЛицо", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Шапка.Организация, "ЮрФизЛицо"));
	ДанныеДляПечати.Вставить("СведенияОЛицензиаре", СведенияОЛицензиаре);
	ДанныеДляПечати.Вставить("ПредставлениеЛицензиара", ФормированиеПечатныхФормСервер.ОписаниеОрганизации(СведенияОЛицензиаре, СписокФакт));
	ДанныеДляПечати.Вставить("Поставщик", Шапка.Организация); // для расшифровки
	
	Если СведенияОЛицензиаре.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
		СведенияОЛицензиаре.Вставить("ФИО", 
			ОбщегоНазначения.ПолучитьЗначениеРеквизита(Шапка.ИндивидуальныйПредприниматель, "Наименование"));
	КонецЕсли;
	
	СведенияОЛицензиате = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Контрагент,  Шапка.ДатаДокумента);
	СведенияОЛицензиате.Вставить("ЮрФизЛицо", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Шапка.Контрагент, "ЮрФизЛицо"));
	ДанныеДляПечати.Вставить("СведенияОЛицензиате", СведенияОЛицензиате);
	ДанныеДляПечати.Вставить("ПредставлениеЛицензиата", ФормированиеПечатныхФормСервер.ОписаниеОрганизации(СведенияОЛицензиате, СписокФакт));
	ДанныеДляПечати.Вставить("Грузополучатель", Шапка.Контрагент); // для расшифровки
	
	СведенияОПлательщике = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Контрагент, Шапка.ДатаДокумента);
	СведенияОПлательщике.Вставить("ЮрФизЛицо", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Шапка.Контрагент, "ЮрФизЛицо"));
	ДанныеДляПечати.Вставить("СведенияОПлательщике", СведенияОПлательщике);
	ДанныеДляПечати.Вставить("ПредставлениеПлательщика", ФормированиеПечатныхФормСервер.ОписаниеОрганизации(СведенияОПлательщике, СписокЮр));
	ДанныеДляПечати.Вставить("Плательщик", Шапка.Контрагент); // для расшифровки
	
	ДанныеДляПечати.Вставить("ДатаДокумента", Шапка.ДатаДокумента);
	ДанныеДляПечати.Вставить("НомерДокумента", ОбщегоНазначения.ПолучитьНомерНаПечать(Ссылка));
	ДанныеДляПечати.Вставить("ВидОперации", Шапка.ВидОперации);
	ДанныеДляПечати.Вставить("ДокументыОснования", Шапка.ДокументОснование);
	ДанныеДляПечати.Вставить("ИсправляемыйДокументРеализации", Шапка.ИсправляемыйДокументРеализации);
	
	Если Шапка.ВедениеВзаиморасчетов <> Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом И ЗначениеЗаполнено(Шапка.Сделка) Тогда
		Основание = ОбщегоНазначения.СформироватьЗаголовокДокумента(Шапка.Сделка, Строка(Шапка.Сделка.Метаданные().Синоним));
	Иначе
		Основание = Шапка.ДоговорКонтрагента;
	КонецЕсли;
	ДанныеДляПечати.Вставить("Основание", Основание);
	
	ДанныеДляПечати.Вставить("ЛицензиарНаименование", СведенияОЛицензиаре.ПолноеНаименование); 
	ДанныеДляПечати.Вставить("ЛицензиатНаименование", СведенияОЛицензиате.ПолноеНаименование); 
	
	ДанныеДляПечати.Вставить("ОтсрочкаПлатежаДней", 0);
	ДанныеДляПечати.Вставить("ПроцентШтрафаЗаДеньПросрочки", 0);
	ДанныеДляПечати.Вставить("КодПартнера", "");
	
	// В табличной части заполним колонки "СерийныйНомер" и "СерийныеНомера"
	тчТовары.Колонки.Добавить("СерийныйНомер", ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(1000));
	тчТовары.Колонки.Добавить("СерийныеНомера");
	СтруктураОтбора = Новый Структура("Номенклатура,ЕдиницаИзмеренияКодПоОКЕИ,Характеристика,Серия,СтавкаНДС,Цена");
	Для Каждого СтрокаТовара Из тчТовары Цикл
		ЗаполнитьЗначенияСвойств(СтруктураОтбора, СтрокаТовара);
		мСерийныеНомера = тчСерийныеНомера.НайтиСтроки(СтруктураОтбора);
		КоличествоСерийныхНомеров = мСерийныеНомера.Количество();
		СтрокаТовара.СерийныеНомера = Новый Массив();
		Для Сч = 0 По КоличествоСерийныхНомеров - 1 Цикл
			СтрокаСерийногоНомера = мСерийныеНомера[Сч];
			СтрокаТовара.СерийныеНомера.Добавить(СтрокаСерийногоНомера.СерийныйНомер);
			СтрокаТовара.СерийныйНомер = СтрокаТовара.СерийныйНомер + СтрокаСерийногоНомера.СерийныйНомер;
			Если Сч <> КоличествоСерийныхНомеров - 1 Тогда
				СтрокаТовара.СерийныйНомер = СтрокаТовара.СерийныйНомер + ";";
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	ДанныеДляПечати.Вставить("Строки", тчТовары);
	
	ДанныеДляПечати.Вставить("КоличествоЛистовВПриложении", 0); // Будет вычислено при выводе
	ДанныеДляПечати.Вставить("КоличествоПорядковыхНомеровЗаписейПрописью", ЧислоПрописью(тчТовары.Количество(), ,",,,,,,,,0"));
	ДанныеДляПечати.Вставить("СуммаПрописью", ОбщегоНазначения.СформироватьСуммуПрописью(тчТовары.Итог("СуммаСНДС"), ДанныеДляПечати.ВалютаДанных));
	
	Если ЗначениеЗаполнено(Шапка.ОтпускРазрешил) Тогда
		ФИО = ФормированиеПечатныхФормСервер.ФамилияИмяОтчество(Шапка.ОтпускРазрешил, Шапка.ДатаДокумента);
		ФИОРуководителя = ОбщегоНазначения.ФамилияИнициалыФизЛица(ФИО.Фамилия+" "+ФИО.Имя+" "+ФИО.Отчество)+" "+Шапка.ЗаРуководителяПоПриказу;
		СведенияОСотруднике = ПолныеПрава.СведенияОСотруднике(Шапка.ОтпускРазрешил, Шапка.ДатаДокумента, Шапка.Организация);
		ДолжностьРуководителя = СведенияОСотруднике.Должность;
	Иначе
		ОтветственныеЛица = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизаций(Шапка.Организация, Шапка.ДатаДокумента);
		ФИОРуководителя = ОтветственныеЛица.Руководитель;
		ДолжностьРуководителя = ОтветственныеЛица.РуководительДолжность;
	КонецЕсли;
	ДанныеДляПечати.Вставить("ДолжностьРуководителя", ДолжностьРуководителя);
	ДанныеДляПечати.Вставить("ФИОРуководителя", ФИОРуководителя); // Здесь должны быть фамилия и инициалы
	
	ДанныеДляПечати.Вставить("ДатаПодписиДокумента", Формат(Шапка.ДатаДокумента, "ДФ='дд ММММ гггг ""года.""'"));
	ДанныеДляПечати.Вставить("ДоверенностьНомер", Шапка.ДоверенностьНомер);
	ДанныеДляПечати.Вставить("ДоверенностьДата", Формат(Шапка.ДоверенностьДата, "ДФ='дд ММММ гггг ""года.""'"));
	ДанныеДляПечати.Вставить("ДоверенностьВыдана", Шапка.ДоверенностьВыдана);
	ДанныеДляПечати.Вставить("ДоверенностьЧерезКого", Шапка.ДоверенностьЧерезКого);
	
	Возврат ДанныеДляПечати;
	
КонецФункции

Процедура ВывестиАктНаПередачуПравВТабличныйДокумент(ТабДок, ДанныеДляПечати)
	
	Если ЗначениеЗаполнено(ДанныеДляПечати.КодПартнера) Тогда
		ДанныеДляПечати.КодПартнера = "Код партнера: "+Строка(ДанныеДляПечати.КодПартнера);
	КонецЕсли;
	
	Макет = ПолучитьМакет("АктНаПередачуПрав");
	
	// Создадим области
	ОбластьВнимание 		= Макет.ПолучитьОбласть("Внимание");
	ОбластьШапка 			= Макет.ПолучитьОбласть("Шапка");
	ОбластьЗаголовокТаб     = Макет.ПолучитьОбласть("ЗаголовокТаб");
	ОбластьСтрока           = Макет.ПолучитьОбласть("Строка");
	ОбластьИтогоПоСтранице  = Макет.ПолучитьОбласть("ИтогоПоСтранице");
	ОбластьИтогоПоДокументу = Макет.ПолучитьОбласть("ИтогоПоДокументу");
	ОбластьПодвал           = Макет.ПолучитьОбласть("Подвал");
	
	// Внимание
	Если ЗначениеЗаполнено(ДанныеДляПечати.ОтсрочкаПлатежаДней) И ЗначениеЗаполнено(ДанныеДляПечати.ОтсрочкаПлатежаДней) Тогда
		ОбластьВнимание.Параметры.Заполнить(ДанныеДляПечати);
		ТабДок.Вывести(ОбластьВнимание);
	КонецЕсли;
	
	// Шапка
	ОбластьШапка.Параметры.Заполнить(ДанныеДляПечати);
	ТабДок.Вывести(ОбластьШапка);
	
	ИменаИтогов = "Количество,СуммаБезНДС,СуммаНДС,СуммаСНДС";
	Итоги = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(ИменаИтогов);
	СтруктураИтогов = Новый Структура();
	Для Каждого Итог Из Итоги Цикл
		СтруктураИтогов.Вставить("Итого"+Итог,              0); // Итоги по документу
		СтруктураИтогов.Вставить("Итого"+Итог+"НаСтранице", 0); // Итоги по странице
	КонецЦикла;
	МассивВыводимыхОбластей = Новый Массив;
	
	// Строки
	НомерСтраницы = 1;
	КоличествоСтрок = ДанныеДляПечати.Строки.Количество();
	Для Номер = 1 По КоличествоСтрок Цикл
		
		// Заполнение параметров
		Строка = ДанныеДляПечати.Строки[Номер-1];
		ОбластьСтрока.Параметры.Заполнить(Строка);
		ОбластьСтрока.Параметры.Номер = Номер;
		
		// Вывод
		Если Номер = 1 Тогда
			// ЗаголовокТаб
			ОбластьЗаголовокТаб.Параметры.НомерСтраницы = "Страница "+Строка(НомерСтраницы);
			ТабДок.Вывести(ОбластьЗаголовокТаб);
		Иначе
			МассивВыводимыхОбластей.Очистить();
			МассивВыводимыхОбластей.Добавить(ОбластьСтрока);
			МассивВыводимыхОбластей.Добавить(ОбластьИтогоПоСтранице);
			Если Номер = КоличествоСтрок Тогда
				МассивВыводимыхОбластей.Добавить(ОбластьИтогоПоДокументу);
				МассивВыводимыхОбластей.Добавить(ОбластьПодвал);
			КонецЕсли;
			
			Если Не ФормированиеПечатныхФормСервер.ПроверитьВыводТабличногоДокумента(ТабДок, МассивВыводимыхОбластей) Тогда
				// очередная строка не помещается на страницу
				
				// ИтогоПоСтранице
				ОбластьИтогоПоСтранице.Параметры.Заполнить(СтруктураИтогов);
				ТабДок.Вывести(ОбластьИтогоПоСтранице);
				// обнуляем итоги по странице
				Для Каждого Итог Из Итоги Цикл
					СтруктураИтогов["Итого"+Итог+"НаСтранице"] = 0;
				КонецЦикла;
				// переходим на следующую страницу
				НомерСтраницы = НомерСтраницы + 1;
				ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
				// ЗаголовокТаб
				ОбластьЗаголовокТаб.Параметры.НомерСтраницы = "Страница "+Строка(НомерСтраницы);
				ТабДок.Вывести(ОбластьЗаголовокТаб);
			КонецЕсли;
		КонецЕсли;
		ТабДок.Вывести(ОбластьСтрока);
		
		// Наращиваем итоги
		Для Каждого Итог Из Итоги Цикл
			СтруктураИтогов["Итого"+Итог] = СтруктураИтогов["Итого"+Итог] + Строка[Итог];
			СтруктураИтогов["Итого"+Итог+"НаСтранице"] = СтруктураИтогов["Итого"+Итог+"НаСтранице"] + Строка[Итог];
		КонецЦикла;
	КонецЦикла;
	
	ПоследняяЦифра = Прав(Строка(НомерСтраницы),1);
	Суффикс = ?(ПоследняяЦифра = "1"," листе"," листах"); 
	ДанныеДляПечати.КоличествоЛистовВПриложении = Строка(НомерСтраницы)+Суффикс;
	
	// ИтогоПоСтранице
	ОбластьИтогоПоСтранице.Параметры.Заполнить(СтруктураИтогов);
	ТабДок.Вывести(ОбластьИтогоПоСтранице);
	
	// ИтогоПоДокументу
	ОбластьИтогоПоДокументу.Параметры.Заполнить(СтруктураИтогов);
	ТабДок.Вывести(ОбластьИтогоПоДокументу);
	
	// Подвал
	ОбластьПодвал.Параметры.Заполнить(ДанныеДляПечати);
	ТабДок.Вывести(ОбластьПодвал);

КонецПроцедуры

Функция ТекстЗапросаТоварныеПозицииЧека() Экспорт
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	РеализацияТоваровУслугТовары.ЕдиницаИзмерения,
	|	РеализацияТоваровУслугТовары.Номенклатура,
	|	РеализацияТоваровУслугТовары.ХарактеристикаНоменклатуры КАК Характеристика,
	|	РеализацияТоваровУслугТовары.СерияНоменклатуры КАК Серия,
	|	РеализацияТоваровУслугТовары.Количество КАК Количество,
	|	РеализацияТоваровУслугТовары.Коэффициент,
	|	РеализацияТоваровУслугТовары.СтавкаНДС,
	|	ВЫБОР
	|		КОГДА РеализацияТоваровУслугТовары.Ссылка.СуммаВключаетНДС
	|			ТОГДА РеализацияТоваровУслугТовары.Сумма
	|		ИНАЧЕ РеализацияТоваровУслугТовары.Сумма + РеализацияТоваровУслугТовары.СуммаНДС
	|	КОНЕЦ КАК Сумма,
	|	РеализацияТоваровУслугТовары.СуммаНДС КАК СуммаНДС,
	|	ВЫБОР
	|		КОГДА РеализацияТоваровУслугТовары.Ссылка.СуммаВключаетНДС
	|			ТОГДА РеализацияТоваровУслугТовары.Цена
	|		ИНАЧЕ РеализацияТоваровУслугТовары.Цена + РеализацияТоваровУслугТовары.СуммаНДС / РеализацияТоваровУслугТовары.Количество
	|	КОНЕЦ КАК Цена,
	|	РеализацияТоваровУслугТовары.Номенклатура.Наименование КАК Наименование,
	|	ВЫБОР
	|		КОГДА РеализацияТоваровУслугТовары.Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|			ТОГДА РеализацияТоваровУслугТовары.Ссылка.Склад.НомерСекции
	|		ИНАЧЕ РеализацияТоваровУслугТовары.Склад.НомерСекции
	|	КОНЕЦ КАК НомерСекции
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	|ГДЕ
	|	РеализацияТоваровУслугТовары.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка),
	|	РеализацияТоваровУслугУслуги.Номенклатура,
	|	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка),
	|	ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка),
	|	РеализацияТоваровУслугУслуги.Количество,
	|	1,
	|	РеализацияТоваровУслугУслуги.СтавкаНДС,
	|	ВЫБОР
	|		КОГДА РеализацияТоваровУслугУслуги.Ссылка.СуммаВключаетНДС
	|			ТОГДА РеализацияТоваровУслугУслуги.Сумма
	|		ИНАЧЕ РеализацияТоваровУслугУслуги.Сумма + РеализацияТоваровУслугУслуги.СуммаНДС
	|	КОНЕЦ,
	|	РеализацияТоваровУслугУслуги.СуммаНДС,
	|	ВЫБОР
	|		КОГДА РеализацияТоваровУслугУслуги.Ссылка.СуммаВключаетНДС
	|			ТОГДА РеализацияТоваровУслугУслуги.Цена
	|		ИНАЧЕ РеализацияТоваровУслугУслуги.Цена + РеализацияТоваровУслугУслуги.СуммаНДС / РеализацияТоваровУслугУслуги.Количество
	|	КОНЕЦ,
	|	РеализацияТоваровУслугУслуги.Содержание,
	|	ВЫБОР
	|		КОГДА РеализацияТоваровУслугУслуги.Ссылка.Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|			ТОГДА 0
	|		ИНАЧЕ РеализацияТоваровУслугУслуги.Ссылка.Склад.НомерСекции
	|	КОНЕЦ
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслугУслуги
	|ГДЕ
	|	РеализацияТоваровУслугУслуги.Ссылка = &Ссылка";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ПолучитьИмяФормыПоВидуОперации(ВидОперации) Экспорт
	
	Если ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРеализацияТоваров.ПродажаКомиссия") Тогда
		ИмяФормыПоВидуОперации = "Форма.ФормаДокументаУправляемая";
	ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРеализацияТоваров.АктВыполненныхРабот") Тогда
		ИмяФормыПоВидуОперации = "Форма.АктВыполненныхРабот";
	ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРеализацияТоваров.АктНаПередачуПрав") Тогда
		ИмяФормыПоВидуОперации = "Форма.АктНаПередачуПрав";
	Иначе
		ИмяФормыПоВидуОперации = "ФормаОбъекта";
	КонецЕсли; 
	
	Возврат "Документ.РеализацияТоваровУслуг." + ИмяФормыПоВидуОперации;
	
КонецФункции

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	Если ВидФормы <> "ФормаДокумента" И ВидФормы <> "ФормаОбъекта" Тогда
		Возврат;
	КонецЕсли;

	ВидОперации = Неопределено; 

	Если Параметры.Свойство("Ключ") И ЗначениеЗаполнено(Параметры.Ключ) Тогда
		ВидОперации	= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.Ключ, "ВидОперации");
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(ВидОперации) Тогда
		Если Параметры.Свойство("ЗначениеКопирования") И ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			ВидОперации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.ЗначениеКопирования, "ВидОперации");
		КонецЕсли;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(ВидОперации) Тогда
		Если Параметры.Свойство("ЗначенияЗаполнения") И ТипЗнч(Параметры.ЗначенияЗаполнения) = Тип("Структура") Тогда
			Если Параметры.ЗначенияЗаполнения.Свойство("ВидОперации") Тогда
				ВидОперации	= Параметры.ЗначенияЗаполнения.ВидОперации;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ВидОперации) Тогда
		Если Параметры.Свойство("ВидОперации") Тогда
			ВидОперации	= Параметры.ВидОперации;
		КонецЕсли;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	ВыбраннаяФорма = ПолучитьИмяФормыПоВидуОперации(ВидОперации);
	
КонецПроцедуры

// Функция формирует табличный документ с печатной формой универсального передаточного документа
Функция ПечатьУниверсальныхПередаточныхДокументов(МассивОбъектов, ОбъектыПечати)
	
 	ТабДокумент = Новый ТабличныйДокумент;
	
	// Устанавливаем параметры печати и колонтитулы
	ТабДокумент.ОриентацияСтраницы 	= ОриентацияСтраницы.Ландшафт;
	ТабДокумент.ПолеСверху 		   	= 12;
	ТабДокумент.ПолеСлева  		   	= 0;
	ТабДокумент.ПолеСнизу  		   	= 0;
	ТабДокумент.ПолеСправа 		   	= 0;
	ТабДокумент.АвтоМасштаб 		= Истина;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_УниверсальныйПередаточныйДокумент";
	
	ПервыйДокумент 	   		= Истина;
	ВыводитьКолонтитул 		= МассивОбъектов.Количество() = 1;
	ТабДокументНеВыводитьНаПечать 	= Истина;
	ДокументыСчетФактураНеТребуется = ОпределитьСчетФактураТребуются(МассивОбъектов);
	
	Для каждого Ссылка Из МассивОбъектов Цикл
			
		Если Не ПервыйДокумент Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;
		
		РеквизитыДокумента = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(Ссылка, "Ссылка, Дата, Номер, Организация,
			|ВидОперации, Контрагент, ДоговорКонтрагента, ОтпускРазрешил, ГлавныйБухгалтер, Подразделение, 
			|ДоверенностьНомер, ДоверенностьДата, ДоверенностьВыдана, ДоверенностьЧерезКого");
			
		ДанныеДокумента = Новый Структура();
		ДанныеДокумента.Вставить("ДокументСсылка",    				РеквизитыДокумента.Ссылка);
		ДанныеДокумента.Вставить("Номер",             				РеквизитыДокумента.Номер);
		ДанныеДокумента.Вставить("Дата",              				РеквизитыДокумента.Дата);
		ДанныеДокумента.Вставить("Ссылка", 			  				Документы.СчетФактураВыданный.ПустаяСсылка());
		ДанныеДокумента.Вставить("ДокументОснование", 				РеквизитыДокумента.Ссылка);
		ДанныеДокумента.Вставить("Организация",   	  				РеквизитыДокумента.Организация);
		ДанныеДокумента.Вставить("Контрагент", 		  				РеквизитыДокумента.Контрагент);
		ДанныеДокумента.Вставить("ДоговорКонтрагента", 		  		РеквизитыДокумента.ДоговорКонтрагента);
		ДанныеДокумента.Вставить("Руководитель", 	  				РеквизитыДокумента.ОтпускРазрешил);
		ДанныеДокумента.Вставить("ГлавныйБухгалтер",  				РеквизитыДокумента.ГлавныйБухгалтер);
		ДанныеДокумента.Вставить("ВалютаРегламентированногоУчета",  глЗначениеПеременной("ВалютаРегламентированногоУчета"));
		ДанныеДокумента.Вставить("Подразделение", 	  				РеквизитыДокумента.Подразделение);
		
		Если ЗначениеЗаполнено(РеквизитыДокумента.ДоверенностьНомер) ИЛИ ЗначениеЗаполнено(РеквизитыДокумента.ДоверенностьДата)
			ИЛИ ЗначениеЗаполнено(РеквизитыДокумента.ДоверенностьВыдана) ИЛИ ЗначениеЗаполнено(РеквизитыДокумента.ДоверенностьЧерезКого) Тогда
			Доверенность = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'по доверенности №%1 от %2 выданной %3 %4'"),
				РеквизитыДокумента.ДоверенностьНомер, Формат(РеквизитыДокумента.ДоверенностьДата, "ДЛФ=ДД"),
				РеквизитыДокумента.ДоверенностьВыдана, РеквизитыДокумента.ДоверенностьЧерезКого);
			ДанныеДокумента.Вставить("Доверенность", Доверенность);
		КонецЕсли;
		
		ВидДоговора = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РеквизитыДокумента.ДоговорКонтрагента, "ВидДоговора");
		ПередачаНаРеализациюПоКомиссии = (ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
		ДанныеДокумента.Вставить("ПередачаНаРеализациюПоКомиссии",  ПередачаНаРеализациюПоКомиссии);
		
		СчетФактураТребуется = (ДокументыСчетФактураНеТребуется.Найти(Ссылка) = Неопределено);
		
		СтруктураОтбораСчетаФактуры = Новый Структура;
		СтруктураОтбораСчетаФактуры.Вставить("ПометкаУдаления", Ложь);
		
		Если УчетНДС.ПечатьУниверсальногоПередаточногоДокумента(ДанныеДокумента, СчетФактураТребуется, ТабДокумент, СтруктураОтбораСчетаФактуры) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ТабДокумент.ВерхнийКолонтитул.Выводить = ВыводитьКолонтитул;
		
		ТабДокументНеВыводитьНаПечать = Ложь;
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент, НомерСтрокиНачало, ОбъектыПечати, Ссылка);
		
	КонецЦикла;
	
	Если ТабДокументНеВыводитьНаПечать Тогда
		Макет = ПолучитьОбщийМакет("УниверсальныйПередаточныйДокумент");
		ОбластьМакета = Макет.ПолучитьОбласть("Ошибка");
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЕсли;
	
	Возврат ТабДокумент;
	
КонецФункции
