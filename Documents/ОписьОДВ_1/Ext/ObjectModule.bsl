////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мСодержимоеФайла Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если ТолстыйКлиентОбычноеПриложение Тогда

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Функция Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт
	
	// Получить экземпляр документа на печать
	Если ИмяМакета = "ФормаОДВ_1" Тогда
		
		ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
		ОбработкаКомментариев.УдалитьСообщения();
		
		Заголовок = "Печать документа: " + СокрЛП(ЭтотОбъект);
		
		Отказ = Ложь;
		
		//Проверка корректности заполнения документа
		ПроверитьПравильностьЗаполненияДокумента(Отказ, Ложь);
		
		Если Отказ Тогда
			ОбработкаКомментариев.ПоказатьСообщения();
			Возврат Неопределено;
		КонецЕсли;
		
		ТабДокумент = ПроцедурыПерсонифицированногоУчета.ПечатнаяФормаОДВ_1(Ссылка);
		УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, "Опись ОДВ-1 " + ОбщегоНазначенияЗК.СформироватьЗаголовокДокумента(ЭтотОбъект, "по документу"), , ТабДокумент);
		
	КонецЕсли;
	
КонецФункции // Печать

#КонецЕсли

Процедура ПроверитьПравильностьЗаполненияДокумента(ЕстьОшибки, СообщатьОбУспехе = Истина, ВыборкаПоШапкеДокумента = Неопределено, ВыборкаПоРаботникам = Неопределено) Экспорт
	
	//Обработка = глЗначениеПеременной("глОбработкаСообщений");
	// 
	//Отказ = Ложь;
	
	//Если Отказ Тогда
	//	ЕстьОшибки = Истина;
	//КонецЕсли;	 
	//
	//Если СообщатьОбУспехе И Не ЕстьОшибки Тогда
	//	Обработка.ДобавитьСообщение("Ошибок не обнаружено.", Перечисления.ВидыСообщений.Информация, , СообщенияРазделПроверки);
	//КонецЕсли;
	
КонецПроцедуры 

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
// 
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("ФормаОДВ_1","ОДВ-1");
	
КонецФункции // ПолучитьСтруктуруПечатныхФорм()

// Формирует файл, который можно будет записать на дискетку
//
// Параметры: 
//  Нет
//
// Возвращаемое значение:
//  Строка - содержимое файла
//
Функция СформироватьВыходнойФайл(Отказ) Экспорт
	
	ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
	ОбработкаКомментариев.УдалитьСообщения();
	Отказ = Ложь;
	
	//Проверка корректности заполнения документа
	ПроверитьПравильностьЗаполненияДокумента(Отказ, Ложь);
	
	Если Отказ Тогда
		ОбработкаКомментариев.ПоказатьСообщения();
		Возврат "";
	КонецЕсли;
	
	ВыборкаПоШапкеДокумента = ПроцедурыПерсонифицированногоУчета.ЗапросПоШапкеДляПечатиОДВ_1(Ссылка, Дата).Выбрать();
	ВыборкаПоШапкеДокумента.Следующий();
	
	ВыборкаПоДаннымДНП = ПроцедурыПерсонифицированногоУчета.ЗапросПоДаннымДосрочногоНазначенияПенсииОДВ_1(Ссылка, "ОписьОДВ_1").Выбрать();
	
	// Загружаем формат файла сведений
	МакетФормата = ПолучитьОбщийМакет("ФорматПФР_2018");
	
	ФорматОДВ_1 = ПроцедурыПерсонифицированногоУчета.ЗагрузитьФорматНабораЗаписейдляПФР(МакетФормата, "ОДВ_1");
	НаборЗаписейДатаЗаполнения = Новый Структура("ДатаЗаполнения",ПроцедурыПерсонифицированногоУчета.СкопироватьСтруктуруДанных(ФорматОДВ_1.ДатаЗаполнения));
	ФорматОДВ_1.Удалить("ДатаЗаполнения");
	НаборЗаписейРуководитель = Новый Структура("Руководитель", ПроцедурыПерсонифицированногоУчета.СкопироватьСтруктуруДанных(ФорматОДВ_1.Руководитель));
	ФорматОДВ_1.Удалить("Руководитель");
	ФорматОснованияДНП = ПроцедурыПерсонифицированногоУчета.СкопироватьСтруктуруДанных(ФорматОДВ_1.ОснованияДНП.Значение);
	ФорматОДВ_1.Удалить("ОснованияДНП");
	
	ФорматОДВ_1.Удалить("КоличествоЗЛ");
	ФорматОДВ_1.Удалить("Страховая");
	ФорматОДВ_1.Удалить("Накопительная");
	ФорматОДВ_1.Удалить("ТарифСВ");
	ФорматОДВ_1.Удалить("Уплата");
	
	// Создаем начальное дерево
	ДеревоВыгрузки = ПроцедурыПерсонифицированногоУчета.СоздатьДеревоXML();
	
	Атрибуты = Новый Соответствие;
	Атрибуты.Вставить("xmlns", "http://пф.рф/ВС/ОДВ-1/2017-12-25");
	Атрибуты.Вставить("xmlns:ВС2", "http://пф.рф/ВС/типы/2017-10-23");
	Атрибуты.Вставить("xmlns:АФ4", "http://пф.рф/АФ/2017-08-21");
	Атрибуты.Вставить("xmlns:УТ2", "http://пф.рф/УТ/2017-08-21");
	Атрибуты.Вставить("xmlns:ИС2", "http://пф.рф/ВС/ИС/типы/2017-09-11");
	
	УзелПФР = ПроцедурыПерсонифицированногоУчета.ДобавитьУзелВДеревоXML(ДеревоВыгрузки, "ЭДПФР", "", Атрибуты);
	
	// Служебная информация о файле
	НаборЗаписейСлужебнаяИнформация = ПроцедурыПерсонифицированногоУчета.ЗагрузитьФорматНабораЗаписейдляПФР(МакетФормата, "СлужебнаяИнформация");
	Если ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ИмяФайлаДляПФР) Тогда
		ЧастиИмениФайла = ОбщегоНазначенияЗК.РазложитьСтрокуВМассивПодстрок(СокрЛП(ВыборкаПоШапкеДокумента.ИмяФайлаДляПФР),"_");
		НаборЗаписейСлужебнаяИнформация.АФ4__GUID.Значение = ЧастиИмениФайла[ЧастиИмениФайла.ВГраница()];
	КонецЕсли;
	НаборЗаписейСлужебнаяИнформация.АФ4__ДатаВремя.Значение = ПроцедурыПерсонифицированногоУчета.ПредставлениеДатыВФорматеdateTimeСЧасовымПоясом(ВыборкаПоШапкеДокумента.Дата);
	НаборЗаписейСлужебнаяИнформация.АФ4__ПрограммаПодготовки.Значение = ИсправленныйСимвольныйЭлемент("1С:" + РегламентированнаяОтчетность.ИДКонфигурации()) + " " + Метаданные.Версия;
	ПроцедурыПерсонифицированногоУчета.ДобавитьИнформациюВДерево(ПроцедурыПерсонифицированногоУчета.ДобавитьУзелВДеревоXML(УзелПФР, "СлужебнаяИнформация",""), НаборЗаписейСлужебнаяИнформация);
	
	// Данные формы и страхователя
	ФорматОДВ_1.Тип.Значение = ?(ВыборкаПоШапкеДокумента.ТипСведений = Перечисления.ТипыСведенийСЗВ.КОРРЕКТИРУЮЩАЯ, 1, 2);
	НаборЗаписейСтрахователь = ФорматОДВ_1.Страхователь.Значение;
	НаборЗаписейСтрахователь.ИС2__Наименование = ИсправленныйСимвольныйЭлемент(ВыборкаПоШапкеДокумента.НаименованиеСокращенное);
	НаборЗаписейСтрахователь.УТ2__РегНомер = ВыборкаПоШапкеДокумента.РегистрационныйНомерПФР;
	НаборЗаписейСтрахователь.УТ2__ИНН = ВыборкаПоШапкеДокумента.ИНН;
	Если ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.КПП) Тогда
		НаборЗаписейСтрахователь.УТ2__КПП = ВыборкаПоШапкеДокумента.КПП;
	Иначе
		НаборЗаписейСтрахователь.Удалить("УТ2__КПП");
		СтрокаПоляКПП = ФорматОДВ_1.Страхователь.Поля.Найти("УТ2__КПП", "ИмяПоля");
		Если СтрокаПоляКПП <> Неопределено Тогда
			ФорматОДВ_1.Страхователь.Поля.Удалить(СтрокаПоляКПП);
		КонецЕсли;
	КонецЕсли;
	НаборЗаписейОтчетныйПериод = ФорматОДВ_1.ОтчетныйПериод.Значение;
	НаборЗаписейОтчетныйПериод.Код = ПроцедурыПерсонифицированногоУчета.КодОтчетногоПериода(ВыборкаПоШапкеДокумента.ОтчетныйПериод);
	НаборЗаписейОтчетныйПериод.Год = ВыборкаПоШапкеДокумента.Год;
	
	УзелФормы = ПроцедурыПерсонифицированногоУчета.ДобавитьУзелВДеревоXML(УзелПФР, "ОДВ-1", "");
	ПроцедурыПерсонифицированногоУчета.ДобавитьИнформациюВДерево(УзелФормы, ФорматОДВ_1);
	
	Если ВыборкаПоДаннымДНП.Количество() > 0 Тогда 
		УзелСпискаОснованияДНП = ПроцедурыПерсонифицированногоУчета.ДобавитьУзелВДеревоXML(УзелФормы, "ОснованияДНП", "");
		ФорматОснование = ПроцедурыПерсонифицированногоУчета.СкопироватьСтруктуруДанных(ФорматОснованияДНП.Основание.Значение);
		ФорматОснованияДНП.Удалить("Основание");
		ФорматОУТ = ПроцедурыПерсонифицированногоУчета.СкопироватьСтруктуруДанных(ФорматОснование.ОУТ);
		ФорматОснование.Удалить("ОУТ");
		Пока ВыборкаПоДаннымДНП.Следующий() Цикл 
			НаборЗаписейОснование = ПроцедурыПерсонифицированногоУчета.СкопироватьСтруктуруДанных(ФорматОснование);
			НаборЗаписейОснование.ИС2__Подразделение.Значение =ИсправленныйСимвольныйЭлемент(ВыборкаПоДаннымДНП.НаименованиеПодразделения);
			НаборЗаписейОснование.ИС2__ПрофессияДолжность.Значение = ИсправленныйСимвольныйЭлемент(ВыборкаПоДаннымДНП.НаименованиеДолжности);
			НаборЗаписейОснование.ИС2__КоличествоШтат.Значение = ВыборкаПоДаннымДНП.КоличествоРабочихМест;
			НаборЗаписейОснование.ИС2__КоличествоФакт.Значение = ВыборкаПоДаннымДНП.КоличествоРаботающих;
			НаборЗаписейОснование.ИС2__Описание.Значение = ИсправленныйСимвольныйЭлемент(ВыборкаПоДаннымДНП.ХарактерВыполняемыхРабот);
			НаборЗаписейОснование.ИС2__Документы.Значение = ИсправленныйСимвольныйЭлемент(ВыборкаПоДаннымДНП.ПервичныеДокументы);
			
			УзелОснование = ПроцедурыПерсонифицированногоУчета.ДобавитьУзелВДеревоXML(УзелСпискаОснованияДНП, "Основание", "");
			ПроцедурыПерсонифицированногоУчета.ДобавитьИнформациюВДерево(УзелОснование, НаборЗаписейОснование);
			ПроцедурыПерсонифицированногоУчета.ВывестиДанныеОУТ(ВыборкаПоДаннымДНП, УзелОснование, ФорматОУТ);
		КонецЦикла;
		ФорматОснованияДНП.ИС2__ВсегоШтат.Значение = ВыборкаПоШапкеДокумента.ВсегоРабочихМестДНП;
		ФорматОснованияДНП.ИС2__ВсегоФакт.Значение = ВыборкаПоШапкеДокумента.ВсегоРаботающихДНП;
		ПроцедурыПерсонифицированногоУчета.ДобавитьИнформациюВДерево(УзелСпискаОснованияДНП, ФорматОснованияДНП);
	КонецЕсли;
	
	НаборЗаписейРуководитель.Руководитель.Значение.Должность.Значение = ИсправленныйСимвольныйЭлемент(ВыборкаПоШапкеДокумента.ДолжностьРуководителя);
	ЗаполнитьФИОВНабореДанных(НаборЗаписейРуководитель.Руководитель.Значение.ФИО, ВыборкаПоШапкеДокумента.ФамилияРуководителя, ВыборкаПоШапкеДокумента.ИмяРуководителя, ВыборкаПоШапкеДокумента.ОтчествоРуководителя);
	ПроцедурыПерсонифицированногоУчета.ДобавитьИнформациюВДерево(УзелФормы, НаборЗаписейРуководитель);
	
	НаборЗаписейДатаЗаполнения.ДатаЗаполнения.Значение = Формат(ВыборкаПоШапкеДокумента.Дата, "ДФ=yyyy-MM-dd");
	ПроцедурыПерсонифицированногоУчета.ДобавитьИнформациюВДерево(УзелФормы, НаборЗаписейДатаЗаполнения);
	
	// Преобразуем дерево в строковое описание XML
	ПотокВыгрузкиXML = ПроцедурыПерсонифицированногоУчета.СоздатьПотокXML(, "UTF-8");
	СправкиПоНДФЛ.ЗаписатьУзелДереваXMLВXML(ДеревоВыгрузки, ПотокВыгрузкиXML);
	ТекстФайла = ПроцедурыПерсонифицированногоУчета.ЗаписатьПотокXML(ПотокВыгрузкиXML);
	
	Возврат СтрЗаменить(ТекстФайла, "__", ":");
	
КонецФункции

Процедура ЗаполнитьФИОВНабореДанных(ФорматФИО, Фамилия, Имя, Отчество) 	
	
	НаборЗаписейФИО = ФорматФИО.Значение;
	ОписаниеПолей = ФорматФИО.Поля;
	ФИО = Новый Соответствие;
	ФИО.Вставить("Фамилия", Фамилия);
	ФИО.Вставить("Имя", Имя);
	ФИО.Вставить("Отчество", Отчество);
	
	Для Каждого ЧастьИмени Из ФИО Цикл
		ИмяПоля = "УТ2__" + ЧастьИмени.Ключ;
		Если ПустаяСтрока(ЧастьИмени.Значение) Тогда
			НаборЗаписейФИО.Удалить(ИмяПоля);
			СтрокаКУдалению = ОписаниеПолей.Найти(ИмяПоля, "ИмяПоля");
			Если СтрокаКУдалению <> Неопределено Тогда
				ОписаниеПолей.Удалить(СтрокаКУдалению);
			КонецЕсли;
		Иначе
			НаборЗаписейФИО[ИмяПоля] = ВРег(СокрЛП(ЧастьИмени.Значение));
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ИсправленныйСимвольныйЭлемент(СтроковоеЗначение, ИспользоватьВРег = Истина) 
	
	НовоеЗначение = ?(ИспользоватьВРег, ВРег(СтроковоеЗначение), СтроковоеЗначение); // традиционно в файле строки передаются в верхнем регистре
	// правило ВС.ОИС2017.1.2: Лидирующие пробелы в символьных элементах, за исключением элементов блока ФИО, не допускаются
	НовоеЗначение = СокрЛП(НовоеЗначение);
	// правило ВС.ОИС2017.1.3: Если в символьном элементе, за исключением элементов блока ФИО, использован символ '-', то рядом с этим символом пробелы недопустимы
	Пока Найти(НовоеЗначение," -") > 0 Или Найти(НовоеЗначение,"- ") > 0 Цикл
		НовоеЗначение = СтрЗаменить(НовоеЗначение," -","-");
		НовоеЗначение = СтрЗаменить(НовоеЗначение,"- ","-");
	КонецЦикла;
	// правило ВС.ОИС2017.1.4: Наличие двух и более пробелов подряд внутри символьных элементов, за исключением элементов блока ФИО, не допускается (только один)
	Пока Найти(НовоеЗначение,"  ") > 0 Цикл
		НовоеЗначение = СтрЗаменить(НовоеЗначение,"  "," ");
	КонецЦикла;
	
	Возврат НовоеЗначение
	
КонецФункции 

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ, Режим)
	
	Если Проведен И ПринятоВПФР Тогда
		Возврат
	КонецЕсли;
	
	Если ФайлОтредактирован И Не ЗначениеЗаполнено(мСодержимоеФайла) Тогда
		Возврат
	КонецЕсли;
	
	Для Каждого Набор Из Движения Цикл
		Набор.Очистить();
	КонецЦикла;
	
	ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
	ОбработкаКомментариев.УдалитьСообщения();
	
	ПроверитьПравильностьЗаполненияДокумента(Отказ, Ложь);
	
	Если Отказ Тогда
		ОбработкаКомментариев.ПоказатьСообщения();
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(мСодержимоеФайла) Тогда
		ТекстФайла = мСодержимоеФайла;
	Иначе
		ТекстФайла = СформироватьВыходнойФайл(Отказ);
	КонецЕсли;
	
	//Сохраним сформированный файл сведений в регистре сведений
	Запись = Движения.АрхивДанныхРегламентированнойОтчетности.Добавить();
	Запись.Объект = Ссылка;
	Запись.ОписаниеДанных = "Файл формы ОДВ-1";
	Запись.Данные = ТекстФайла;
	
	мСодержимоеФайла = Неопределено;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ОтчетныйПериод = Дата(Год, 1, 1);
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	Отказ = ПринятоВПФР;
	
	Если Не Отказ Тогда
		Для Каждого Набор Из Движения Цикл
			Набор.Очистить();
			Набор.Записать();
		КонецЦикла;
		ФайлОтредактирован = Ложь;
		мСодержимоеФайла = Неопределено;
	КонецЕсли;
	
КонецПроцедуры
