Перем мВалютаРегламентированногоУчета Экспорт;
Перем МетаданныеПоДокументам Экспорт;

#Если Клиент Тогда
	
// Настройка периода
Перем НП Экспорт;

#КонецЕсли

// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда

Функция ПечатьАктаСверки()
	
	ТабДок = Новый ТабличныйДокумент;
	ТабДок.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_АктСверкиВзаиморасчетов_АктСверки";
	Макет  = ПолучитьМакет("АктСверки");

	ОбластьЗаголовок    = Макет.ПолучитьОбласть("Заголовок");
	ОбластьШапкаТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицы");
	ОбластьНачОстатки   = Макет.ПолучитьОбласть("НачОстатки");
	ОбластьОбороты      = Макет.ПолучитьОбласть("Обороты");
	ОбластьОборотыИтог  = Макет.ПолучитьОбласть("ОборотыИтог");
	ОбластьКонОстатки   = Макет.ПолучитьОбласть("КонОстатки");
	ОбластьПодвал       = Макет.ПолучитьОбласть("Подвал");
	
	НазваниеОрганизации = Организация.НаименованиеПолное;
	Если ПустаяСтрока(НазваниеОрганизации) Тогда
		НазваниеОрганизации = Организация;
	КонецЕсли;
	
	НаименованиеКонтрагента = Контрагент.НаименованиеПолное;
	Если ПустаяСтрока(НаименованиеКонтрагента) Тогда
		НаименованиеКонтрагента = Контрагент;
	КонецЕсли;
	
	ОбластьЗаголовок.Параметры.НазваниеОрганизации = НазваниеОрганизации;
	ОбластьЗаголовок.Параметры.НаименованиеКонтрагента = НаименованиеКонтрагента;
	ИмяПредставителяОрганизации = ПредставительОрганизации;
	ИмяПредсатвителяКонтрагента = ПредставительКонтрагента;
	
	Если ЗначениеЗаполнено(ПредставительОрганизации) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОтветственныеЛицаОрганизацийСрезПоследних.Должность,
		|	ОтветственныеЛицаОрганизацийСрезПоследних.Период КАК Период
		|ИЗ
		|	РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(&КонДата, СтруктурнаяЕдиница = &Организация) КАК ОтветственныеЛицаОрганизацийСрезПоследних
		|ГДЕ
		|	ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицо = &ФизическоеЛицо
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период УБЫВ";
		
		Запрос.УстановитьПараметр("Организация",Организация);
		Запрос.УстановитьПараметр("ФизическоеЛицо",ПредставительОрганизации);
		Запрос.УстановитьПараметр("КонДата",Дата);
		
		Рез = Запрос.Выполнить();
		Если Рез.Пустой() тогда
			ДолжностьПредставителяОрганизации = "";
		Иначе
			Выборка = Рез.Выбрать();
			Выборка.Следующий();
			ДолжностьПредставителяОрганизации = СокрЛП(Выборка.Должность);
		КонецЕсли;
	Иначе
		ДолжностьПредставителяОрганизации = "";
	КонецЕсли;
	ДолжностьПредставителяКонтрагента = ?(НЕ ЗначениеЗаполнено(ПредставительКонтрагента),"",СокрЛП(представительКонтрагента.Должность));
	
	Если НЕ ЗначениеЗаполнено(ДатаНачала) Тогда
		Если ПоДаннымОрганизации.Количество()>0 Тогда
			ДатаНачалаПериода = ПоДаннымОрганизации[0].Дата;
		Иначе
			ДатаНачалаПериода = ДатаНачала;
		КонецЕсли;
	Иначе
		ДатаНачалаПериода = ДатаНачала;
	КонецЕсли;		

	ТекстЗаголовка = "взаимных расчетов за период с " + Формат(ДатаНачалаПериода, "ДФ=dd.MM.yyyy") + " по " + Формат(ДатаОкончания, "ДФ=dd.MM.yyyy") + Символы.ПС
					+ "между " + НазваниеОрганизации + Символы.ПС + "и " + НаименованиеКонтрагента;
	Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
	    ТекстЗаголовка = ТекстЗаголовка + Символы.ПС + "по договору " + СокрЛП(ДоговорКонтрагента.Наименование);
	КонецЕсли;
	ОбластьЗаголовок.Параметры.ТекстЗаголовка = ТекстЗаголовка;
	
	//ДанныеПредставителяОрганизации = ДанныеФизЛица(Организация, ПредставительОрганизации, ДатаОкончания);
	//ФИОПредставителя = ?(НЕ ЗначениеЗаполнено(ДанныеПредставителяОрганизации.Фамилия),"",ДанныеПредставителяОрганизации.Фамилия
	//				+ ?(НЕ ЗначениеЗаполнено(ДанныеПредставителяОрганизации.Имя),""," "+ДанныеПредставителяОрганизации.Имя)
	//				+ ?(НЕ ЗначениеЗаполнено(ДанныеПредставителяОрганизации.Отчество),""," "+ДанныеПредставителяОрганизации.Отчество));
	ФИОПредставителя = "" + ПредставительОрганизации;	
	СтрЗаголовокТаблица = "Мы, нижеподписавшиеся, "
				+ ?(ДолжностьПредставителяОрганизации<>"",ДолжностьПредставителяОрганизации,"_______________________")+" "
				+ НазваниеОрганизации 
				+ " " + ?(ФИОПредставителя<>"",ФИОПредставителя,"__________________________________________") + ", с одной стороны, "
				+ "и " + ?(ДолжностьПредставителяКонтрагента<>"",ДолжностьПредставителяКонтрагента,"___________________________") 
				+ " " + НаименованиеКонтрагента + " " 
				+ ?(НЕ ЗначениеЗаполнено(ПредставительКонтрагента),"_____________________________________________",ПредставительКонтрагента) + ", с другой стороны, "
				+ "составили настоящий акт сверки в том, что состояние взаимных расчетов по данным учета следующее:";
	
	ОбластьЗаголовок.Параметры.СтрЗаголовокТаблица = СтрЗаголовокТаблица;
	ОбластьЗаголовок.Параметры.ВалютаДокумента = ВалютаДокумента;
	
	ТабДок.Очистить();
	ТабДок.Вывести(ОбластьЗаголовок);
	ТабДок.Вывести(ОбластьШапкаТаблицы);
	
	ИтСуммаОборотДт      = 0;
	ИтСуммаОборотКт      = 0;
	ИтСуммаОборотДтКонтр = 0;
	ИтСуммаОборотКтКонтр = 0;
	
	НачОстДебет  = ?(ОстатокНаНачало > 0, ОстатокНаНачало, 0);
	НачОстКредит = ?(ОстатокНаНачало < 0, -ОстатокНаНачало, 0);
	
	ОстатокНаКонец = ОстатокНаНачало + ПоДаннымОрганизации.Итог("Дебет") -  ПоДаннымОрганизации.Итог("Кредит");
	
	КонОстДебет  = ?(ОстатокНаКонец > 0, ОстатокНаКонец, 0);
	КонОстКредит = ?(ОстатокНаКонец < 0, -ОстатокНаКонец, 0);
	
	ОстатокНаКонецК = -ОстатокНаНачало + ПоДаннымКонтрагента.Итог("Дебет") -  ПоДаннымКонтрагента.Итог("Кредит");
	
	КонОстДебетК  = ?(ОстатокНаКонецК > 0, ОстатокНаКонецК, 0);
	КонОстКредитК = ?(ОстатокНаКонецК < 0, -ОстатокНаКонецК, 0);
	
	ОбластьНачОстатки.Параметры.СуммаНачальныйОстатокДт = НачОстДебет;
	ОбластьНачОстатки.Параметры.СуммаНачальныйОстатокКт = НачОстКредит;
	ТабДок.Вывести(ОбластьНачОстатки);
	
	ТабДок.НачатьАвтогруппировкуСтрок();
	
	МаксИндекс = Макс(ПоДаннымОрганизации.Количество(), ПоДаннымКонтрагента.Количество()) - 1;
	Для Инд = 0 По МаксИндекс Цикл
		Если Инд < ПоДаннымОрганизации.Количество() Тогда
			СтрокаОрганизации = ПоДаннымОрганизации[Инд];
			Регистратор = 	СтрокаОрганизации.Представление;
			СуммаОборотДт = СтрокаОрганизации.Дебет;
			СуммаОборотКт = СтрокаОрганизации.Кредит;
			ОбластьОбороты.Параметры.СуммаОборотДт = СуммаОборотДт;
			ОбластьОбороты.Параметры.СуммаОборотКт = СуммаОборотКт;
			ИтСуммаОборотДт = ИтСуммаОборотДт + СуммаОборотДт;
			ИтСуммаОборотКт = ИтСуммаОборотКт + СуммаОборотКт;
			ОбластьОбороты.Параметры.РегистраторПредставление = СтрокаОрганизации.Представление;
			ОбластьОбороты.Параметры.Регистратор = СтрокаОрганизации.ДокументРегистратор;
			ОбластьОбороты.Параметры.ДатаДокумента = Формат(СтрокаОрганизации.Дата,"ЧЦ=21; ЧДЦ=2; ДФ=dd.MM.yy");
		Иначе
			ОбластьОбороты.Параметры.СуммаОборотДт = "";
			ОбластьОбороты.Параметры.СуммаОборотКт = "";
			ОбластьОбороты.Параметры.РегистраторПредставление = "";
			ОбластьОбороты.Параметры.Регистратор = "";
			ОбластьОбороты.Параметры.ДатаДокумента = "";
		КонецЕсли;
		Если Инд < ПоДаннымКонтрагента.Количество() Тогда
			СтрокаОрганизации = ПоДаннымКонтрагента[Инд];
			Регистратор = 	СтрокаОрганизации.Представление;
			СуммаОборотДт = СтрокаОрганизации.Дебет;
			СуммаОборотКт = СтрокаОрганизации.Кредит;
			ОбластьОбороты.Параметры.СуммаОборотДтКонтр = СуммаОборотДт;
			ОбластьОбороты.Параметры.СуммаОборотКтКонтр = СуммаОборотКт;
			ИтСуммаОборотДтКонтр = ИтСуммаОборотДтКонтр + СуммаОборотДт;
			ИтСуммаОборотКтКонтр = ИтСуммаОборотКтКонтр + СуммаОборотКт;
			ОбластьОбороты.Параметры.РегистраторПредставлениеКонтр = СтрокаОрганизации.Представление;
			ОбластьОбороты.Параметры.ДатаДокументаКонтр = Формат(СтрокаОрганизации.Дата,"ЧЦ=21; ЧДЦ=2; ДФ=dd.MM.yy");
		Иначе
			ОбластьОбороты.Параметры.СуммаОборотДтКонтр = "";
			ОбластьОбороты.Параметры.СуммаОборотКтКонтр = "";
			ОбластьОбороты.Параметры.РегистраторПредставлениеКонтр = "";
			ОбластьОбороты.Параметры.ДатаДокументаКонтр = "";
		КонецЕсли;
		ТабДок.Вывести(ОбластьОбороты);
	КонецЦикла;
	
	ТабДок.ЗакончитьАвтогруппировкуСтрок();
	
	ОбластьОборотыИтог.Параметры.СуммаОборотДт      = ИтСуммаОборотДт;
	ОбластьОборотыИтог.Параметры.СуммаОборотКт      = ИтСуммаОборотКт;
	Если СверкаСогласована тогда
		ОбластьОборотыИтог.Параметры.СуммаОборотДтКонтр = ИтСуммаОборотДтКонтр;
		ОбластьОборотыИтог.Параметры.СуммаОборотКтКонтр = ИтСуммаОборотКтКонтр;
	КонецЕсли;
	ТабДок.Вывести(ОбластьОборотыИтог);
	
	ОбластьКонОстатки.Параметры.СуммаКонечныйОстатокДт = КонОстДебет;
	ОбластьКонОстатки.Параметры.СуммаКонечныйОстатокКт = КонОстКредит;
	
	Если СверкаСогласована тогда
		ОбластьКонОстатки.Параметры.СуммаКонечныйОстатокДтКонтр = КонОстДебетК;
		ОбластьКонОстатки.Параметры.СуммаКонечныйОстатокКтКонтр = КонОстКредитК;
	КонецЕсли;
	
	ТабДок.Вывести(ОбластьКонОстатки);
	
	// Результаты сверки
	
   	Если ПоДаннымОрганизации.Количество() = 0 и ОстатокНаНачало = 0 Тогда
   	    РезультатыСверки = "<сверка не проведена>";
  	ИначеЕсли НЕ ЗначениеЗаполнено(ДатаОкончания) Тогда
   	    РезультатыСверки = "<не указана дата сверки>";
   	ИначеЕсли НЕ ЗначениеЗаполнено(Контрагент) Тогда
   	    РезультатыСверки = "<не указан контрагент>";
   	Иначе
		РезультатыСверки = "на " + Формат(ДатаОкончания, "ДФ=dd.MM.yyyy") + " задолженность ";
			
	   	Если ОстатокНаКонец > 0 Тогда
			РезультатыСверки = РезультатыСверки + "в пользу " + СокрЛП(НазваниеОрганизации) + " " + Формат(ОстатокНаКонец, "ЧЦ=21; ЧДЦ=2") + " " + строка(ВалютаДокумента);
	
	   	ИначеЕсли ОстатокНаКонец < 0 Тогда
			РезультатыСверки = РезультатыСверки + "в пользу " + СокрЛП(НаименованиеКонтрагента) + " " + Формат(-ОстатокНаКонец, "ЧЦ=21; ЧДЦ=2") + " " + строка(ВалютаДокумента);
	
	   	Иначе
	   		РезультатыСверки = РезультатыСверки + "отсутствует.";
	   	КонецЕсли;
	КонецЕсли;
	ОбластьПодвал.Параметры.РезультатыСверки = РезультатыСверки;
	
	Если СверкаСогласована тогда
		ОбластьПодвал.Параметры.ПоДаннымКонтрагента = "По данным " + СокрЛП(НаименованиеКонтрагента);
		
	   	Если ПоДаннымКонтрагента.Количество() = 0 и ОстатокНаНачало = 0 Тогда
	   	    РезультатыСверки = "<сверка не проведена>";
	  	ИначеЕсли НЕ ЗначениеЗаполнено(ДатаОкончания) Тогда
	   	    РезультатыСверки = "<не указана дата сверки>";
	   	ИначеЕсли НЕ ЗначениеЗаполнено(Контрагент) Тогда
	   	    РезультатыСверки = "<не указан контрагент>";
	   	Иначе
			РезультатыСверки = "на " + Формат(ДатаОкончания, "ДФ=dd.MM.yyyy") + " задолженность ";
				
		   	Если ОстатокНаКонецК < 0 Тогда
				РезультатыСверки = РезультатыСверки + "в пользу " + СокрЛП(НазваниеОрганизации) + " " + Формат(-ОстатокНаКонецК, "ЧЦ=21; ЧДЦ=2") + " " + строка(ВалютаДокумента);
		
		   	ИначеЕсли ОстатокНаКонецК > 0 Тогда
				РезультатыСверки = РезультатыСверки + "в пользу " + СокрЛП(НаименованиеКонтрагента) + " " + Формат(ОстатокНаКонецК, "ЧЦ=21; ЧДЦ=2") + " " + строка(ВалютаДокумента);
		
		   	Иначе
		   		РезультатыСверки = РезультатыСверки + "отсутствует.";
		   	КонецЕсли;
	   	КонецЕсли;
		
		ОбластьПодвал.Параметры.РезультатыСверкиК = РезультатыСверки;
		
		Если ОстатокНаКонец+ОстатокНаКонецК<>0 Тогда
			 ИтогСверки = "В результате сверки выявлено расхождение информации о состоянии расчетов в размере "+Формат(?(ОстатокНаКонец+ОстатокНаКонецК>0,1,-1)*(ОстатокНаКонец+ОстатокНаКонецК), "ЧЦ=21; ЧДЦ=2") +" "+ Строка(ВалютаДокумента);
			 ОбластьПодвал.Параметры.ИтогСверки = Символы.ПС+ ИтогСверки+Символы.ПС+" ";
		КонецЕсли; 
	КонецЕсли;
	
	ОбластьПодвал.Параметры.НазваниеОрганизации = СокрЛП(НазваниеОрганизации);
	ОбластьПодвал.Параметры.НаименованиеКонтрагента = СокрЛП(НаименованиеКонтрагента);
	
	ОбластьПодвал.Параметры.Должность = "________________";
	ОбластьПодвал.Параметры.ДолжностьК ="________________";
	
	ОбластьПодвал.Параметры.ФИОПредставителя  = "("+ ФИОПредставителя +")";
	ОбластьПодвал.Параметры.ФИОПредставителяК = "("+?(НЕ ЗначениеЗаполнено(ПредставительКонтрагента),"_______________________",ПредставительКонтрагента)+")";
	
	ТабДок.Вывести(ОбластьПодвал);
	
	Возврат ТабДок;
	
КонецФункции

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	КонецЕсли; 
	
	Если ИмяМакета = "АктСверки" Тогда
		// Получить экземпляр документа на печать
		ТабДокумент = ПечатьАктаСверки();
		
	ИначеЕсли ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда

		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
		
		Если ТабДокумент = Неопределено Тогда
			Возврат
		КонецЕсли; 
		
	КонецЕсли;
	
	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()), Ссылка);

КонецПроцедуры // Печать

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("АктСверки","Акт сверки");

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

Процедура ЗаполнитьПредставлениеДокументов(ТаблицаЗначений)
	
	Если ТаблицаЗначений.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
		
	КэшПоТипам = Новый Соответствие;
	
	Для каждого СтрокаТаблицы Из ТаблицаЗначений Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДокументРегистратор) Тогда 
			Продолжить;
		КонецЕсли;
		
		ТипТекущегоДокумента = ТипЗнч(СтрокаТаблицы.ДокументРегистратор);
		Если Документы.ТипВсеСсылки().СодержитТип(ТипТекущегоДокумента) Тогда
			
			МассивТипа = КэшПоТипам[ТипТекущегоДокумента];
			Если МассивТипа = Неопределено Тогда
				МассивТипа = Новый Массив;
				КэшПоТипам.Вставить(ТипТекущегоДокумента, МассивТипа);
			КонецЕсли;
			
			МассивТипа.Добавить(СтрокаТаблицы.ДокументРегистратор);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если КэшПоТипам.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаЗначений.Индексы.Добавить("ДокументРегистратор");
	
	ТаблицаЗначений.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
	
	Запрос = Новый Запрос;

	Для Каждого КлючИЗначение ИЗ КэшПоТипам Цикл
		МетаданныеТипа = Метаданные.НайтиПоТипу(КлючИЗначение.Ключ);
		ИмяМетаданных  = МетаданныеТипа.Имя;
		ЕстьНомерВходящегоДокумента = МетаданныеТипа.Реквизиты.Найти("НомерВходящегоДокумента") <> Неопределено;
		ЕстьДатаВходящегоДокумента  = МетаданныеТипа.Реквизиты.Найти("ДатаВходящегоДокумента") <> Неопределено;

		Запрос.Текст = Запрос.Текст
		+ ?(Запрос.Текст = "", "",
		" 
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|")
		+ "
		|ВЫБРАТЬ
		|	""" + МетаданныеТипа.Синоним + """ КАК ПредставлениеТипа,
		|	Док.Ссылка  КАК Ссылка,
		|	" + ?(ЕстьНомерВходящегоДокумента, "Док.НомерВходящегоДокумента", "НЕОПРЕДЕЛЕНО") + " КАК Номер,
		|	" + ?(ЕстьДатаВходящегоДокумента, "Док.ДатаВходящегоДокумента", "Док.Дата") + " КАК Дата
		|ИЗ
		|	Документ."+ИмяМетаданных+" КАК Док
		|ГДЕ Док.Ссылка В (&ДокументыТипа_"+ИмяМетаданных+")";
		Запрос.УстановитьПараметр("ДокументыТипа_"+ИмяМетаданных, КлючИЗначение.Значение);
		
	КонецЦикла;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НомерДокумента  = ?(Выборка.Номер = Неопределено, ОбщегоНазначения.ПолучитьНомерНаПечать(Выборка.Ссылка), Выборка.Номер);
		ДатаДокумента = Формат(Выборка.Дата, "ДФ='дд ММ гггг'");
		СтрокаДокумента = ТаблицаЗначений.Найти(Выборка.Ссылка, "ДокументРегистратор");
		СтрокаДокумента.Представление =  Выборка.ПредставлениеТипа + " № " + НомерДокумента + " от " + ДатаДокумента;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьПоДаннымУправленческогоУчета() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНачала",         ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания",      КонецДня(ДатаОкончания));
	Запрос.УстановитьПараметр("Организация",        Организация);
	Запрос.УстановитьПараметр("Контрагент",         Контрагент);
	Запрос.УстановитьПараметр("Валюта",             ВалютаДокумента);
	Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорКонтрагента);
	Запрос.УстановитьПараметр("Сделка",             Сделка);
	
	ТекстФильтра = "
	|		Организация = &Организация И Контрагент = &Контрагент ";
	Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		ТекстФильтра = ТекстФильтра + " И ДоговорКонтрагента = &ДоговорКонтрагента ";
	Иначе
		ТекстФильтра = ТекстФильтра + " И ДоговорКонтрагента.ВалютаВзаиморасчетов = &Валюта ";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Сделка) Тогда
		ТекстФильтра = ТекстФильтра + " И Сделка = &Сделка ";
	КонецЕсли;
	
	// Остатки
	
	Запрос.Текст = 
	"ВЫБРАТЬ 
	|	ЕСТЬNULL(Взаиморасчеты.СуммаВзаиморасчетовНачальныйОстаток, 0) КАК ОстатокНаНачало,
	|	ЕСТЬNULL(Взаиморасчеты.СуммаВзаиморасчетовКонечныйОстаток, 0)  КАК ОстатокНаКонец
	|ИЗ 
	|	РегистрНакопления.ВзаиморасчетыСКонтрагентами.ОстаткиИОбороты(&ДатаНачала, &ДатаОкончания, , ,"	+ ТекстФильтра + ") КАК Взаиморасчеты";
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
	
		ОстатокНаНачало = 0;
		ОстатокНаКонец  = 0;
	
	Иначе
	
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		ОстатокНаНачало = Выборка.ОстатокНаНачало;
		ОстатокНаКонец  = Выборка.ОстатокНаКонец;
	
	КонецЕсли;
	
	// Обороты
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Взаиморасчеты.Период КАК Дата,
	|	Взаиморасчеты.Регистратор КАК ДокументРегистратор,
	|	Взаиморасчеты.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ВЫБОР
	|		КОГДА Взаиморасчеты.СуммаВзаиморасчетовПриход - Взаиморасчеты.СуммаВзаиморасчетовРасход > 0
	|			ТОГДА Взаиморасчеты.СуммаВзаиморасчетовПриход - Взаиморасчеты.СуммаВзаиморасчетовРасход
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Дебет,
	|	ВЫБОР
	|		КОГДА Взаиморасчеты.СуммаВзаиморасчетовПриход - Взаиморасчеты.СуммаВзаиморасчетовРасход < 0
	|			ТОГДА -(Взаиморасчеты.СуммаВзаиморасчетовПриход - Взаиморасчеты.СуммаВзаиморасчетовРасход)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Кредит
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыСКонтрагентами.Обороты(&ДатаНачала, &ДатаОкончания, Регистратор," + ТекстФильтра + ") КАК Взаиморасчеты
	|ГДЕ
	|	Взаиморасчеты.СуммаВзаиморасчетовПриход <> Взаиморасчеты.СуммаВзаиморасчетовРасход
    |
    |УПОРЯДОЧИТЬ ПО
    |   Дата";
	
	Результат = Запрос.Выполнить();
	ТаблицаРезультата = Результат.Выгрузить();
	
	ЗаполнитьПредставлениеДокументов(ТаблицаРезультата);
	
	ПоДаннымОрганизации.Загрузить(ТаблицаРезультата);
	
КонецПроцедуры

Функция ЭтоДокументДвиженияДенежныхСредств(ДокументСсылка)

	ТипДокумента = ТипЗнч(ДокументСсылка);
	
	Результат = 
		ТипДокумента = Тип("ДокументСсылка.АвансовыйОтчет")
		ИЛИ ТипДокумента = Тип("ДокументСсылка.АккредитивПереданный")
		ИЛИ ТипДокумента = Тип("ДокументСсылка.АккредитивПолученный")
		ИЛИ ТипДокумента = Тип("ДокументСсылка.ИнкассовоеПоручениеПереданное")
		ИЛИ ТипДокумента = Тип("ДокументСсылка.ИнкассовоеПоручениеПолученное")
		ИЛИ ТипДокумента = Тип("ДокументСсылка.ОплатаОтПокупателяПлатежнойКартой")
		ИЛИ ТипДокумента = Тип("ДокументСсылка.ПлатежноеПоручениеВходящее")
		ИЛИ ТипДокумента = Тип("ДокументСсылка.ПлатежноеПоручениеИсходящее")
		ИЛИ ТипДокумента = Тип("ДокументСсылка.ПлатежноеТребованиеВыставленное")
		ИЛИ ТипДокумента = Тип("ДокументСсылка.ПлатежноеТребованиеПолученное")
		ИЛИ ТипДокумента = Тип("ДокументСсылка.ПлатежныйОрдерПоступлениеДенежныхСредств")
		ИЛИ ТипДокумента = Тип("ДокументСсылка.ПлатежныйОрдерСписаниеДенежныхСредств")
		ИЛИ ТипДокумента = Тип("ДокументСсылка.ПриходныйКассовыйОрдер")
		ИЛИ ТипДокумента = Тип("ДокументСсылка.РасходныйКассовыйОрдер");
	 
	Возврат Результат;

КонецФункции 

// Заполнение таблицы "По данным организации" по информации из бухгалтерского учета
Процедура ЗаполнитьПоДаннымБухгалтерскогоУчета(ФильтрСписокСчетов = неопределено) Экспорт
	
	Если ФильтрСписокСчетов = Неопределено Тогда
		
		СписокСчетовСтрока = "";
		Для каждого СтрокаСчета Из СписокСчетов Цикл
			Если НЕ ЗначениеЗаполнено(СтрокаСчета.Счет) или СтрокаСчета.УчаствуетВРасчетах = Ложь Тогда
				Продолжить;
			Иначе
				СписокСчетовСтрока = СписокСчетовСтрока + ?(ПустаяСтрока(СписокСчетовСтрока), "", ", ") + Строка(СтрокаСчета.Счет);
			КонецЕсли; 
		КонецЦикла; 
		
		ФильтрСписокСчетов = БухгалтерскийУчет.ПолучитьМассивСчетов("Хозрасчетный", СписокСчетовСтрока);
		
		Если ФильтрСписокСчетов.Количество() = 0 Тогда
		    ОбщегоНазначения.СообщитьОбОшибке("Неверно задан список счетов, по которым производится сверка!",,,СтатусСообщения.Важное);
			Возврат;
		КонецЕсли;
		
	Иначе
		
		СписокСчетовСтрока = "";
		Для Каждого Счет ИЗ ФильтрСписокСчетов Цикл
			СписокСчетовСтрока = СписокСчетовСтрока + ?(ПустаяСтрока(СписокСчетовСтрока), "", ", ") + Строка(Счет);
		КонецЦикла;
		
		ФильтрСписокСчетов = БухгалтерскийУчет.ПолучитьМассивСчетов("Хозрасчетный", СписокСчетовСтрока);
		
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНачала",    ?(НЕ ЗначениеЗаполнено(ДатаНачала),    Неопределено, ДатаНачала));
	Запрос.УстановитьПараметр("ДатаОкончания", ?(НЕ ЗначениеЗаполнено(ДатаОкончания), Неопределено, КонецДня(ДатаОкончания)));
	Запрос.УстановитьПараметр("Организация",   Организация);
	Запрос.УстановитьПараметр("Контрагент",    Контрагент);
	Запрос.УстановитьПараметр("Валюта",        ?(НЕ ЗначениеЗаполнено(ВалютаДокумента) или (ВалютаДокумента = мВалютаРегламентированногоУчета), неопределено,ВалютаДокумента));
	Запрос.УстановитьПараметр("ФильтрСписокСчетов", ФильтрСписокСчетов);
	
	АналитикаРасчетов = новый Массив();
	АналитикаРасчетов.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	АналитикаРасчетов.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	Запрос.УстановитьПараметр("АналитикаРасчетов",    АналитикаРасчетов);
	
	Запрос.УстановитьПараметр("ДоговорКонтрагента", ?(НЕ ЗначениеЗаполнено(ДоговорКонтрагента),Неопределено,ДоговорКонтрагента));
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХозрасчетныйОбороты.Период КАК Дата,
	|	ХозрасчетныйОбороты.Регистратор КАК ДокументРегистратор,
	|	ХозрасчетныйОбороты.Субконто2 КАК Договор,
	|	ВЫБОР
	|		КОГДА &Валюта = НЕОПРЕДЕЛЕНО
	|			ТОГДА ХозрасчетныйОбороты.СуммаОборотДт
	|		ИНАЧЕ ХозрасчетныйОбороты.ВалютнаяСуммаОборотДт
	|	КОНЕЦ КАК Дебет,
	|	ВЫБОР
	|		КОГДА &Валюта = НЕОПРЕДЕЛЕНО
	|			ТОГДА ХозрасчетныйОбороты.СуммаОборотКт
	|		ИНАЧЕ ХозрасчетныйОбороты.ВалютнаяСуммаОборотКт
	|	КОНЕЦ КАК Кредит,
	|	ЕСТЬNULL(ХозрасчетныйОбороты.Регистратор.НомерВходящегоДокумента, НЕОПРЕДЕЛЕНО) КАК НомерВходящегоДокумента,
	|	ЕСТЬNULL(ХозрасчетныйОбороты.Регистратор.ДатаВходящегоДокумента, НЕОПРЕДЕЛЕНО) КАК ДатаВходящегоДокумента,
	|	ХозрасчетныйОбороты.КорСчет,
	|	ХозрасчетныйОбороты.КорСубконто1,
	|	ХозрасчетныйОбороты.КорСубконто2,
	|	ХозрасчетныйОбороты.КорСубконто3,
	|	ХозрасчетныйОбороты.Валюта,
	|	ХозрасчетныйОбороты.ВалютнаяСуммаОборот,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОбороты.КорСубконто1 ССЫЛКА Справочник.ПрочиеДоходыИРасходы
	|			ТОГДА ХозрасчетныйОбороты.КорСубконто1.ВидПрочихДоходовИРасходов
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ВидПрочихДоходовИРасходов,
	|	ХозрасчетныйОбороты.Счет
	|ПОМЕСТИТЬ ВременнаяТаблицаДанных
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&ДатаНачала,
	|			&ДатаОкончания,
	|			Регистратор,
	|			Счет В (&ФильтрСписокСчетов),
	|			&АналитикаРасчетов,
	|			Организация = &Организация
	|				И ВЫБОР
	|					КОГДА &Валюта = НЕОПРЕДЕЛЕНО
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ Валюта = &Валюта
	|				КОНЕЦ
	|				И Субконто1 = &Контрагент
	|				И ВЫБОР
	|					КОГДА &ДоговорКонтрагента = НЕОПРЕДЕЛЕНО
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ Субконто2 = &ДоговорКонтрагента
	|				КОНЕЦ,
	|			,
	|			) КАК ХозрасчетныйОбороты
	|ГДЕ
	|	ВЫБОР
	|			КОГДА ХозрасчетныйОбороты.КорСчет В (&ФильтрСписокСчетов)
	|				ТОГДА ВЫБОР
	|						КОГДА &ДоговорКонтрагента = НЕОПРЕДЕЛЕНО
	|							ТОГДА НЕ ЕСТЬNULL(ХозрасчетныйОбороты.КорСубконто1, НЕОПРЕДЕЛЕНО) = &Контрагент
	|						ИНАЧЕ НЕ(ЕСТЬNULL(ХозрасчетныйОбороты.КорСубконто1, НЕОПРЕДЕЛЕНО) = &Контрагент
	|									И ЕСТЬNULL(ХозрасчетныйОбороты.КорСубконто2, НЕОПРЕДЕЛЕНО) = &ДоговорКонтрагента)
	|					КОНЕЦ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И НЕ(ВЫБОР
	|					КОГДА &Валюта = НЕОПРЕДЕЛЕНО
	|						ТОГДА ХозрасчетныйОбороты.СуммаОборотДт
	|					ИНАЧЕ ХозрасчетныйОбороты.ВалютнаяСуммаОборотДт
	|				КОНЕЦ = 0
	|				И ВЫБОР
	|					КОГДА &Валюта = НЕОПРЕДЕЛЕНО
	|						ТОГДА ХозрасчетныйОбороты.СуммаОборотКт
	|					ИНАЧЕ ХозрасчетныйОбороты.ВалютнаяСуммаОборотКт
	|				КОНЕЦ = 0)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВременнаяТаблицаДанных.Дата,
	|	ВременнаяТаблицаДанных.ДокументРегистратор,
	|	ВременнаяТаблицаДанных.Договор,
	|	СУММА(ВременнаяТаблицаДанных.Дебет) КАК Дебет,
	|	СУММА(ВременнаяТаблицаДанных.Кредит) КАК Кредит,
	|	ВременнаяТаблицаДанных.НомерВходящегоДокумента,
	|	ВременнаяТаблицаДанных.ДатаВходящегоДокумента,
	|	ВременнаяТаблицаДанных.КорСчет,
	|	ВЫРАЗИТЬ(ВременнаяТаблицаДанных.КорСубконто1 КАК Справочник.ПрочиеДоходыИРасходы) КАК КорСубконто1,
	|	ВременнаяТаблицаДанных.Валюта,
	|	СУММА(ВременнаяТаблицаДанных.ВалютнаяСуммаОборот) КАК ВалютнаяСуммаОборот,
	|	ВременнаяТаблицаДанных.ВидПрочихДоходовИРасходов,
	|	ВременнаяТаблицаДанных.Счет
	|ИЗ
	|	ВременнаяТаблицаДанных КАК ВременнаяТаблицаДанных
	|
	|СГРУППИРОВАТЬ ПО
	|	ВременнаяТаблицаДанных.Договор,
	|	ВременнаяТаблицаДанных.НомерВходящегоДокумента,
	|	ВременнаяТаблицаДанных.ДатаВходящегоДокумента,
	|	ВременнаяТаблицаДанных.КорСчет,
	|	ВЫРАЗИТЬ(ВременнаяТаблицаДанных.КорСубконто1 КАК Справочник.ПрочиеДоходыИРасходы),
	|	ВременнаяТаблицаДанных.Валюта,
	|	ВременнаяТаблицаДанных.ВидПрочихДоходовИРасходов,
	|	ВременнаяТаблицаДанных.Счет,
	|	ВременнаяТаблицаДанных.Дата,
	|	ВременнаяТаблицаДанных.ДокументРегистратор
	|
	|ИМЕЮЩИЕ
	|	НЕ(СУММА(ВременнаяТаблицаДанных.Дебет) = 0
	|			И СУММА(ВременнаяТаблицаДанных.Кредит) = 0)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВременнаяТаблицаДанных.Дата,
	|	ВременнаяТаблицаДанных.ДокументРегистратор";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	НаборДвижений = ПоДаннымОрганизации.Выгрузить();
	НаборДвижений.Колонки.Добавить("Валюта", Новый описаниеТипов("СправочникСсылка.Валюты"));
	НаборДвижений.Колонки.Добавить("ВалютнаяСумма", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	
	МассивПрефиксов = ОбщегоНазначения.СформироватьМассивПрефиксовДляРИБИОрганизации(Организация);
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.Дебет = 0 И Выборка.Кредит = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = НаборДвижений.Добавить();
		НоваяСтрока.ДокументРегистратор= Выборка.ДокументРегистратор;
		НоваяСтрока.Дата               = Выборка.Дата;
		НоваяСтрока.Дебет              = Выборка.Дебет;
		НоваяСтрока.Кредит             = Выборка.Кредит;
		НоваяСтрока.Валюта             = Выборка.Валюта;
		НоваяСтрока.ВалютнаяСумма      = Выборка.ВалютнаяСуммаОборот;
		НоваяСтрока.ДоговорКонтрагента = Выборка.Договор;
		
		МетаданныеДокумента = ПолучитьМетаданныеДокумента(Выборка.ДокументРегистратор);
		
		// Сформируем строку представления
		Представление = "";
		
		Если Выборка.КорСчет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ПрочиеДоходыИРасходы) Тогда
			
			Если НЕ ЗначениеЗаполнено(Выборка.ВидпрочихДоходовИРасходов) Тогда
				
			ИначеЕсли Выборка.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.КурсовыеРазницы Тогда
				Представление = "Курсовые разницы";
			ИначеЕсли Выборка.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.ШтрафыПениНеустойкиКПолучениюУплате Тогда
				Представление = "Санкции";
			ИначеЕсли Выборка.КорСубконто1 = Справочники.ПрочиеДоходыИРасходы.СуммовыеРазницы Тогда
				Представление = "Суммовые разницы";
			ИначеЕсли Выборка.КорСубконто1 = Справочники.ПрочиеДоходыИРасходы.КурсовыеРазницыПоРасчетамВУЕ Тогда
				Представление = "Курсовые разницы по расчетам в у.е";
			КонецЕсли;
			
		КонецЕсли;
		
		Если не ПустаяСтрока(Представление) Тогда
			// Строка уже отработана
			
		ИначеЕсли Выборка.Счет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетыПоКраткосрочнымКредитамИЗаймам) 
			или Выборка.Счет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетыПоДолгосрочнымКредитамИЗаймам) Тогда
			Если (Выборка.Дебет >0) Тогда
				Представление = "Возврат займа";
			ИначеЕсли (Выборка.Кредит >0)Тогда
				Представление = "Займ";
			Иначе
				Представление = "Операции по займам";
			КонецЕсли;
		ИначеЕсли Выборка.Счет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетыПоПретензиям) 
			или Выборка.Счет = ПланыСчетов.Хозрасчетный.РасчетыПоПретензиям
			или Выборка.Счет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетыПоПретензиямВал) 
			или Выборка.Счет = ПланыСчетов.Хозрасчетный.РасчетыПоПретензиямВал
			или Выборка.Счет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетыПоПретензиямУЕ) 
			или Выборка.Счет = ПланыСчетов.Хозрасчетный.РасчетыПоПретензиямУЕ
			тогда
			Представление = "Претензия";
			
		ИначеЕсли Выборка.КорСчет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.Касса) 
			или Выборка.КорСчет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетныеСчета) 
			или Выборка.КорСчет = ПланыСчетов.Хозрасчетный.РасчетныеСчета
			или Выборка.КорСчет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ВалютныеСчета) 
			или Выборка.КорСчет = ПланыСчетов.Хозрасчетный.ВалютныеСчета
			или Выборка.КорСчет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.СпециальныеСчета) 
			тогда
			
			Если (Выборка.Кредит >0) Тогда
				
				Если Выборка.Счет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками) Тогда
					Представление = "Возврат средств";
					
				ИначеЕсли Выборка.Счет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетыСПокупателямиИЗаказчиками) Тогда
					Представление = "Оплата";
					
				Иначе
					Представление = "Перевод средств";
				КонецЕсли;
				
			ИначеЕсли (Выборка.Дебет >0) Тогда
				Если Выборка.Счет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками)
					или Выборка.Счет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетыСРазнымиДебиторамиИКредиторами)
					Тогда
					
					Представление = "Оплата";
					
				ИначеЕсли Выборка.Счет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетыСПокупателямиИЗаказчиками) Тогда
					Представление = "Возврат средств";
					
				Иначе
					Представление = "Перевод средств";
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли Выборка.Счет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками) 
			или Выборка.Счет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетыСРазнымиДебиторамиИКредиторами) 
			тогда
			Если Выборка.КорСчет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ПрочиеДоходыИРасходы) 
				или Выборка.КорСчет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.Продажи) Тогда
				Если Выборка.Дебет <> 0 Тогда
					Представление = "Оплата";
				Иначе
					Если ТипЗнч(Выборка.ДокументРегистратор) = Тип("ДокументСсылка.КорректировкаПоступления") Тогда
						Представление = "Корректировка прихода";
					Иначе
						Представление = "Приход";
					КонецЕсли;
				КонецЕсли;
			ИначеЕсли (Выборка.Кредит <>0) Тогда
				Если ТипЗнч(Выборка.ДокументРегистратор) = Тип("ДокументСсылка.КорректировкаПоступления") Тогда
					Представление = "Корректировка прихода";
				Иначе
					Представление = "Приход";
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли Выборка.Счет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетыСПокупателямиИЗаказчиками) Тогда
			Если Выборка.КорСчет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ПрочиеДоходыИРасходы) 
				или Выборка.КорСчет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.Продажи) Тогда
				Если ЭтоДокументДвиженияДенежныхСредств(Выборка.ДокументРегистратор) Тогда
					Представление = "Суммовая разница";
				ИначеЕсли ТипЗнч(Выборка.ДокументРегистратор) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
					Представление = "Корректировка продажи";
				ИначеЕсли ТипЗнч(Выборка.ДокументРегистратор) = Тип("ДокументСсылка.РеализацияТоваровУслуг") И Выборка.Дебет <> 0 Тогда
					Представление = "Продажа";
				Иначе
					Если Выборка.Дебет > 0 Тогда
						Представление = "Продажа";
					ИначеЕсли Выборка.Дебет < 0 Тогда
						Представление = "Возврат";
					Иначе
						Представление = "Оплата";
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ПустаяСтрока(Представление)Тогда
			Если Выборка.Дебет > 0 тогда
				Представление = "Принято";
			ИначеЕсли Выборка.Дебет < 0 тогда
				Представление = "Сторно: принято";
			ИначеЕсли Выборка.Кредит > 0 тогда
				Представление = "Передано";
			Иначе
				Представление = "Сторно: передано";
			КонецЕсли;
		КонецЕсли;
		
		Если Выборка.НомерВходящегоДокумента = Неопределено тогда
			Если Представление = "Продажа" И ТипЗнч(Выборка.ДокументРегистратор) <> Тип("ДокументСсылка.ОперацияБух") Тогда
				Представление = Представление + " (" + ОбщегоНазначения.ПолучитьНомерНаПечать(Выборка.ДокументРегистратор,МассивПрефиксов) + " от " + Формат(Выборка.Дата, "ДФ=dd.MM.yyyy") + ")";
			Иначе
				Представление = Представление + " ("+Формат(Выборка.Дата, "ДФ=dd.MM.yyyy") + ")";
			КонецЕсли;
		Иначе
			Представление = Представление +" ("+ ?(НЕ ЗначениеЗаполнено(Выборка.НомерВходящегоДокумента),"_______", Выборка.НомерВходящегоДокумента) +" от "+
			?(НЕ ЗначениеЗаполнено(Выборка.ДатаВходящегоДокумента), "'  .  .    '", Формат(Выборка.ДатаВходящегоДокумента, "ДФ=dd.MM.yyyy"))+")";
		КонецЕсли;					  
		
		НоваяСтрока.Представление = Представление;
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ДатаНачала) Тогда
	
		Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА &Валюта = НЕОПРЕДЕЛЕНО
		|			ТОГДА ХозрасчетныйОстаткиНаНачало.СуммаОстаток
		|		ИНАЧЕ ХозрасчетныйОстаткиНаНачало.ВалютнаяСуммаОстаток
		|	КОНЕЦ КАК ОстатокНаНачало
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(
		|			&ДатаНачала,
		|			Счет В (&ФильтрСписокСчетов),
		|			&АналитикаРасчетов,
		|			Организация = &Организация
		|				И ВЫБОР
		|					КОГДА &Валюта = НЕОПРЕДЕЛЕНО
		|						ТОГДА ИСТИНА
		|					ИНАЧЕ Валюта = &Валюта
		|				КОНЕЦ
		|				И Субконто1 = &Контрагент
		|				И ВЫБОР
		|					КОГДА &ДоговорКонтрагента = НЕОПРЕДЕЛЕНО
		|						ТОГДА ИСТИНА
		|					ИНАЧЕ Субконто2 = &ДоговорКонтрагента
		|				КОНЕЦ) КАК ХозрасчетныйОстаткиНаНачало";
		
		ОстатокНаНачало = Запрос.Выполнить().Выгрузить().Итог("ОстатокНаНачало");
		
	Иначе
		
		ОстатокНаНачало = 0;
	
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ДатаОкончания", ?(ЗначениеЗаполнено(ДатаОкончания), 
		Новый Граница(КонецДня(ДатаОкончания), ВидГраницы.Включая), 
		Неопределено));
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА &Валюта = НЕОПРЕДЕЛЕНО
	|			ТОГДА ХозрасчетныйОстаткиНаКонец.СуммаОстаток
	|		ИНАЧЕ ХозрасчетныйОстаткиНаКонец.ВалютнаяСуммаОстаток
	|	КОНЕЦ КАК ОстатокНаКонец
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&ДатаОкончания,
	|			Счет В (&ФильтрСписокСчетов),
	|			&АналитикаРасчетов,
	|			Организация = &Организация
	|				И ВЫБОР
	|					КОГДА &Валюта = НЕОПРЕДЕЛЕНО
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ Валюта = &Валюта
	|				КОНЕЦ
	|				И Субконто1 = &Контрагент
	|				И ВЫБОР
	|					КОГДА &ДоговорКонтрагента = НЕОПРЕДЕЛЕНО
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ Субконто2 = &ДоговорКонтрагента
	|				КОНЕЦ) КАК ХозрасчетныйОстаткиНаКонец";
	
	ОстатокНаКонец = Запрос.Выполнить().Выгрузить().Итог("ОстатокНаКонец");
	
	Если ВалютаДокумента = мВалютаРегламентированногоУчета Тогда
		
		НаборДвижений.Свернуть("Дата,ДокументРегистратор,ДоговорКонтрагента,Представление,Валюта","Дебет, Кредит, ВалютнаяСумма");
		
		Для каждого СтрокаДвижений Из НаборДвижений Цикл
			
			Если СтрокаДвижений.ВалютнаяСумма > 0 Тогда
				СтрокаДвижений.Представление = СтрокаДвижений.Представление 
					+ " (" + Формат(СтрокаДвижений.ВалютнаяСумма, "ЧЦ=15; ЧДЦ=2") + " " + Строка(СтрокаДвижений.Валюта) + ")";
			ИначеЕсли СтрокаДвижений.ВалютнаяСумма < 0 Тогда
				Множитель = ?( (СтрокаДвижений.Дебет + СтрокаДвижений.Кредит) > 0, -1, 1);
				СтрокаДвижений.Представление = СтрокаДвижений.Представление
				+ " (" + Формат(Множитель * СтрокаДвижений.ВалютнаяСумма, "ЧЦ=15; ЧДЦ=2") + " " + Строка(СтрокаДвижений.Валюта) + ")";
			КонецЕсли;
			
		КонецЦикла; 
		
	Иначе
		
		НаборДвижений.Свернуть("Дата,ДокументРегистратор,ДоговорКонтрагента,Представление","Дебет, Кредит"); 	
		
	КонецЕсли; 
	
	НаборДвижений.Сортировать("Дата,ДокументРегистратор,Представление");	
						  
	ПоДаннымОрганизации.Загрузить(НаборДвижений);

КонецПроцедуры

// Получение метаданных по документам
// Если метаданные по данному виду документа получались ранее - получаем из соответствия,
// иначе получаем метаданные и дополняем соответствие
// Параметры
//  ДокументСсылка  – <ДокументСсылка> – ссылка на документ
//
// Возвращаемое значение:
//   Структура метаданных
//
Функция ПолучитьМетаданныеДокумента(ДокументСсылка)
	
	ТипДокумента = ТипЗнч(ДокументСсылка);
	Если МетаданныеПоДокументам[ТипДокумента] = Неопределено Тогда
		Если Документы.ТипВсеСсылки().СодержитТип(ТипДокумента) Тогда
			МетаданныеПоДокументам.Вставить(ТипДокумента, ДокументСсылка.Метаданные());
		Иначе
			МетаданныеПоДокументам.Вставить(ТипДокумента, Неопределено);
		КонецЕсли;
	КонецЕсли; 
	
    Возврат МетаданныеПоДокументам[ТипДокумента];
	
КонецФункции // ПолучитьМетаданныеДокумента()

Процедура ЗаполнитьПоДаннымОрганизации() Экспорт
	
	ТабЗнач = ПоДаннымОрганизации.Выгрузить();
	
	ТабЗнач.Колонки.Дебет.Имя  = "КредитК";
	ТабЗнач.Колонки.Кредит.Имя = "Дебет";
	ТабЗнач.Колонки.КредитК.Имя= "Кредит";
	
	Для каждого СтрокаДвижений Из ТабЗнач Цикл
		Представление = СокрЛП(СтрокаДвижений.Представление);
		Если Лев(Представление, 9) = "Передано " Тогда
			Представление = "Принято " + Сред(Представление, 10);
			
		ИначеЕсли Лев(Представление, 8) = "Принято " Тогда
			Представление = "Передано " + Сред(Представление, 9);

		ИначеЕсли Лев(Представление, 8) = "Продажа " Тогда
			Представление = "Приход " + Сред(Представление, 9);

		ИначеЕсли Лев(Представление, 7) = "Приход " Тогда
			Представление = "Продажа " + Сред(Представление, 8);
			
		ИначеЕсли Лев(Представление, 22) = "Корректировка продажи " Тогда
			Представление = "Корректировка прихода " + Сред(Представление, 23);
			
		ИначеЕсли Лев(Представление, 22) = "Корректировка прихода " Тогда
			Представление = "Корректировка продажи " + Сред(Представление, 23);
			
		ИначеЕсли Лев(Представление, 11) = "Реализация " Тогда
			Представление = "Поступление " + Сред(Представление, 12);
			
		ИначеЕсли Лев(Представление, 12) = "Поступление " Тогда
			Представление = "Реализация " + Сред(Представление, 13);
			
		ИначеЕсли Лев(Представление, 10) = "Приходный " Тогда
			Представление = "Расходный " + Сред(Представление, 11);
			
		ИначеЕсли Лев(Представление, 10) = "Расходный " Тогда
			Представление = "Приходный " + Сред(Представление, 11);
			
		КонецЕсли;
		
		Поз = Найти(Представление, "от покупателя");
		Если Поз > 0 Тогда
			Представление = Лев(Представление, Поз - 1) + "поставщику" + Сред(Представление, Поз + 13);
			
		Иначе 
			Поз = Найти(Представление, "поставщику");
			Если Поз > 0 Тогда
				Представление = Лев(Представление, Поз - 1) + "от покупателя" + Сред(Представление, Поз + 10);
			КонецЕсли;
			
		КонецЕсли;
		
		СтрокаДвижений.Представление = Представление;
	КонецЦикла;
	
	ПоДаннымКонтрагента.Загрузить(ТабЗнач);
	
КонецПроцедуры
	

мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");
МетаданныеПоДокументам = Новый Соответствие();
