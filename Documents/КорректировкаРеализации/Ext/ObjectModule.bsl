Перем мУдалятьДвижения Экспорт;

Перем мВалютаРегламентированногоУчета Экспорт;
Перем мИспользоватьРасширеннуюАналитику Экспорт;
Перем мДатаНачалаИспользованияРасширеннойАналитики Экспорт;

Перем мПараметрыПартионногоУчета;
Перем мСтруктураПараметровВзаиморасчетов Экспорт;

Перем мПараметрыСвязиСтрокТЧ Экспорт;

Перем мДокументРеализацииСсылка Экспорт;

Перем мУказаниеСкладовВТЧ Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

Процедура ЗаполнитьСвойстваШапки(ЗаполнятьРедактируемыеРеквизиты = Истина) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ДокументРеализации) Тогда
		Возврат;
	КонецЕсли;
	
	// Перед заполнением сохраним реквизиты шапки документа, не заполняемые из основания
	НезаполняемыеРеквизиты =
		"ПометкаУдаления, Проведен, Дата, Номер, ВидОперации,
		|ДокументРеализации, КорректироватьБУиНУ, Ответственный, Комментарий, ПризнаватьЗачитыватьАванс";
		
	Если НЕ ЗаполнятьРедактируемыеРеквизиты Тогда
		НезаполняемыеРеквизиты = НезаполняемыеРеквизиты
			+ ", ОтчетностьПодписана, СтатьяПрочихДоходовИРасходов, АдресДоставки, ДополнениеКАдресуДоставки,
				|ДокументРеализации, КорректироватьБУиНУ, Ответственный, Комментарий, ПризнаватьЗачитыватьАванс,КорректироватьНДС";
	КонецЕсли;
	
	СтруктураНезаполняемыеРеквизиты = Новый Структура(НезаполняемыеРеквизиты);
	ЗаполнитьЗначенияСвойств(СтруктураНезаполняемыеРеквизиты, ЭтотОбъект);
	
	// Очистим реквизиты шапки документа
	Для Каждого Реквизит из ЭтотОбъект.Метаданные().Реквизиты Цикл
		Если НЕ СтруктураНезаполняемыеРеквизиты.Свойство(Реквизит.Имя) Тогда
			ЭтотОбъект[Реквизит.Имя] = Неопределено;
		КонецЕсли;
	КонецЦикла;
	
	мДокументРеализацииСсылка = УчетНДС.ПолучитьИсправляемыйДокументРеализации(ДокументРеализации, Истина);
	
	Если ЗначениеЗаполнено(мДокументРеализацииСсылка) Тогда
		
		// Заполненим основные реквизиты шапки по первичному документу
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, мДокументРеализацииСсылка);
		
		Если Не ЗначениеЗаполнено(КурсВзаиморасчетов) ИЛИ Не ЗначениеЗаполнено(КратностьВзаиморасчетов) Тогда
			СтруктураКурсаВзаиморасчетов = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДокумента, Дата);
			КурсВзаиморасчетов 			 = СтруктураКурсаВзаиморасчетов.Курс;
			КратностьВзаиморасчетов 	 = СтруктураКурсаВзаиморасчетов.Кратность;
		КонецЕсли;
		
		// Заполним реквизиты учета НДС в случае, если таких реквизитов нет в первичном документе
		МетаданныеДокументаОснования = мДокументРеализацииСсылка.Метаданные();
		Если МетаданныеДокументаОснования.Реквизиты.Найти("УчитыватьНДС") = Неопределено Тогда
			УчитыватьНДС = Истина;
		КонецЕсли;
		Если МетаданныеДокументаОснования.Реквизиты.Найти("СуммаВключаетНДС") = Неопределено Тогда
			СуммаВключаетНДС = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если КорректироватьБУиНУ Тогда
		// Перезаполним шапку по документу основания 
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДокументРеализации);
	КонецЕсли;
	
	// Восстановим незаполняемые реквизиты
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, СтруктураНезаполняемыеРеквизиты);
	
	КорректировкаКорректировочногоСчетаФактуры = Ложь;
		
	Если ТипЗнч(УчетНДС.ПолучитьИсправляемыйДокументРеализации(ДокументРеализации, Ложь)) = Тип("ДокументСсылка.КорректировкаРеализации") 
		И ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение Тогда
		КорректировкаКорректировочногоСчетаФактуры = Истина;
	КонецЕсли;	
		
	Если ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение Тогда
		Если КорректировкаКорректировочногоСчетаФактуры Тогда
			ИсправляемыйДокументРеализации = УчетНДС.ПолучитьИсправляемыйДокументРеализации(ДокументРеализации, Ложь);
		Иначе
			ИсправляемыйДокументРеализации = УчетНДС.ПолучитьИсправляемыйДокументРеализации(ДокументРеализации, Истина);
		КонецЕсли;	
	Иначе	
		ИсправляемыйДокументРеализации = УчетНДС.ПолучитьИсправляемыйДокументРеализации(ДокументРеализации, Ложь);
	КонецЕсли;
	
	// Установим значение Неопределено для незаполненных реквизитов составного типа
	Если НЕ ЗначениеЗаполнено(Сделка) И Сделка <> Неопределено Тогда
		Сделка = Неопределено;
	КонецЕсли;
	
	// Цены в документе всегда указываем вручную
	ТипЦен = Неопределено;
	
КонецПроцедуры

Процедура ЗаполнитьПоДокументу() Экспорт
	
	Если ТипЗнч(ДокументРеализации) = Тип("ДокументСсылка.РеализацияТоваровУслуг")
	 ИЛИ ТипЗнч(ДокументРеализации) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
	 
		КорректироватьНДС = Истина;
		ЗаполнитьПоРеализации();
		
	ИначеЕсли ТипЗнч(ДокументРеализации) = Тип("ДокументСсылка.АктОбОказанииПроизводственныхУслуг") Тогда
		
		КорректироватьНДС = Истина;
		ЗаполнитьПоАктуОказанияПроизводственныхУслуг();
		
	КонецЕсли;
	
КонецПроцедуры

Функция ДоступнаКорректировкаБУиНУ() Экспорт
	
	// Корректировка по учетам доступна только для некоторых видов документов
	Возврат
		((ТипЗнч(ДокументРеализации) = Тип("ДокументСсылка.РеализацияТоваровУслуг")
			И (ДокументРеализации.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия
				ИЛИ ДокументРеализации.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.АктВыполненныхРабот
				ИЛИ ДокументРеализации.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.АктНаПередачуПрав
				ИЛИ ДокументРеализации.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Оборудование)
			И ЗначениеЗаполнено(ДокументРеализации.ДоговорКонтрагента)
			И ДокументРеализации.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем)
		ИЛИ ТипЗнч(ДокументРеализации) = Тип("ДокументСсылка.АктОбОказанииПроизводственныхУслуг")
		ИЛИ (ТипЗнч(ДокументРеализации) = Тип("ДокументСсылка.КорректировкаРеализации")
			 И ДокументРеализации.КорректироватьБУиНУ));
				 
КонецФункции
		 
Функция ДоступноПризнаватьЗачитыватьАванс() Экспорт
	
	// Возможность признавать или зачитывать аванс недоступна 
	// для договоров с ведением взаиморасчетов по расчетным документам с контрагентами
	Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		Возврат НЕ ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом;
	Иначе
		Возврат Ложь;
	КонецЕсли;
			
КонецФункции

Функция ПолучитьПоследнийКорректирующийДокумент(ДокументСсылка) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", 	  ДокументСсылка);
	Запрос.УстановитьПараметр("ЭтотДокумент", Ссылка);
	
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	КорректировкаРеализации.Ссылка
	|ИЗ
	|	Документ.КорректировкаРеализации КАК КорректировкаРеализации
	|ГДЕ
	|	КорректировкаРеализации.ИсправляемыйДокументРеализации = &Ссылка
	|	И КорректировкаРеализации.ВидОперации <> ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение)
	|	И КорректировкаРеализации.Ссылка <> &ЭтотДокумент
	|	И КорректировкаРеализации.Проведен
	|
	|УПОРЯДОЧИТЬ ПО
	|	КорректировкаРеализации.Дата УБЫВ";
	
	Результат = Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда
		Возврат Результат.Ссылка;
	КонецЕсли;
	
	Возврат ДокументСсылка;
	
КонецФункции

Функция ЭтоКорректировкаРТиУ() Экспорт
	
	Возврат (ТипЗнч(мДокументРеализацииСсылка) = Тип("ДокументСсылка.РеализацияТоваровУслуг"));
	
КонецФункции

Функция ЭтоКорректировкаАкта() Экспорт
	
	Возврат (ТипЗнч(мДокументРеализацииСсылка) = Тип("ДокументСсылка.АктОбОказанииПроизводственныхУслуг"));
	
КонецФункции

Функция ВозможнаКорректировкаУслуг() Экспорт
	
	Если НЕ ЗначениеЗаполнено(мДокументРеализацииСсылка)
	 ИЛИ ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если (ТипЗнч(мДокументРеализацииСсылка) = Тип("ДокументСсылка.РеализацияТоваровУслуг")
			И мДокументРеализацииСсылка.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.АктНаПередачуПрав) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ТипЗнч(мДокументРеализацииСсылка) = Тип("ДокументСсылка.СчетФактураВыданный")
	 ИЛИ ТипЗнч(мДокументРеализацииСсылка) = Тип("ДокументСсылка.ДокументРасчетовСКонтрагентом")
	 ИЛИ ТипЗнч(мДокументРеализацииСсылка) = Тип("ДокументСсылка.ОтражениеРеализацииТоваровИУслугНДС") Тогда
		Возврат Истина;
 	КонецЕсли;
 	
	Возврат ОбщегоНазначения.НаличиеТабличнойЧастиУДокумента(мДокументРеализацииСсылка.Метаданные().Имя, "Услуги");
	
КонецФункции

Функция ВозможнаКорректировкаТоваров() Экспорт
	
	Если (ТипЗнч(мДокументРеализацииСсылка) = Тип("ДокументСсылка.РеализацияТоваровУслуг")
		     И мДокументРеализацииСсылка.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.АктВыполненныхРабот)
		 ИЛИ ТипЗнч(мДокументРеализацииСсылка) = Тип("ДокументСсылка.АктОбОказанииПроизводственныхУслуг") Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьОписаниеТипаНоменклатурыПоОснованию() Экспорт
	
	Если ТипЗнч(мДокументРеализацииСсылка) = Тип("ДокументСсылка.ПередачаОС") Тогда
		
		ОписаниеТипаНоменклатуры = Новый ОписаниеТипов("СправочникСсылка.ОсновныеСредства");
		
	ИначеЕсли ТипЗнч(мДокументРеализацииСсылка) = Тип("ДокументСсылка.ПередачаНМА") Тогда
		
		ОписаниеТипаНоменклатуры = Новый ОписаниеТипов("СправочникСсылка.НематериальныеАктивы");
		
	ИначеЕсли ТипЗнч(мДокументРеализацииСсылка) = Тип("ДокументСсылка.РеализацияОтгруженныхТоваров")
	 И ТипЗнч(мДокументРеализацииСсылка.ДокументОтгрузки) = Тип("ДокументСсылка.ПередачаОС") Тогда
	 
		ОписаниеТипаНоменклатуры = Новый ОписаниеТипов("СправочникСсылка.ОсновныеСредства");
		
	ИначеЕсли ТипЗнч(мДокументРеализацииСсылка) = Тип("ДокументСсылка.СчетФактураВыданный")
	 ИЛИ ТипЗнч(мДокументРеализацииСсылка) = Тип("ДокументСсылка.ДокументРасчетовСКонтрагентом") Тогда
	 
		ОписаниеТипаНоменклатуры = Новый ОписаниеТипов("СправочникСсылка.Номенклатура, СправочникСсылка.ОсновныеСредства, СправочникСсылка.НематериальныеАктивы");
		
	Иначе
		
		ОписаниеТипаНоменклатуры = Новый ОписаниеТипов("СправочникСсылка.Номенклатура");
		
	КонецЕсли;
	
	Возврат ОписаниеТипаНоменклатуры;
	
КонецФункции

Функция ПолучитьСвойстваСкладаВТабличнойЧасти() Экспорт
	
	СвойстваСклада = Новый Структура;
	
	СвойстваСклада.Вставить("ВидимостьСклада", 				КорректироватьБУиНУ И ЭтоКорректировкаРТиУ());
	СвойстваСклада.Вставить("ОбязательноеЗаполнениеСклада", СвойстваСклада.ВидимостьСклада);
	
	Возврат СвойстваСклада;
	
КонецФункции

Функция ПолучитьСвойстваЗаказаВТабличнойЧасти() Экспорт
	
	ВедениеВзаиморасчетов = ДоговорКонтрагента.ВедениеВзаиморасчетов;
	СвойстваЗаказа 		  = Новый Структура;
	
	// Заказ в ТЧ виден, если взаиморасчеты по договору ведутся по заказам или по договору в целом (не ведутся по счетам)
	// Заполнение заказа обязательно, если если взаиморасчеты по договору ведутся по заказам
	СвойстваЗаказа.Вставить("ВидимостьЗаказа",
		ВедениеВзаиморасчетов <> Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам
		И КорректироватьБУиНУ);
	СвойстваЗаказа.Вставить("ОбязательноеЗаполнениеЗаказа",
		СвойстваЗаказа.ВидимостьЗаказа
		И ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам);
	СвойстваЗаказа.Вставить("ВидимостьСпособаСписания",
		СвойстваЗаказа.ВидимостьЗаказа);
	СвойстваЗаказа.Вставить("ОбязательноеЗаполнениеСпособаСписания",
		СвойстваЗаказа.ВидимостьСпособаСписания
		И ЗначениеЗаполнено(Сделка));
	
	Возврат СвойстваЗаказа;
	
КонецФункции
	
//Выполняет заполнение счетов учета в переданной строке табличной части
//
Процедура ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТЧ, ИмяТабЧасти, ЗаполнятьБУ, ЗаполнятьНУ) Экспорт
	
	ЗаполнитьСчетаУчетаВТабЧасти(СтрокаТЧ, ИмяТабЧасти, ЗаполнятьБУ, ЗаполнятьНУ);
	
КонецПроцедуры // ЗаполнитьСчетаУчетаВСтрокеТабЧасти()

// Заполняет счета БУ и НУ в табличной части документа
//
Процедура ЗаполнитьСчетаУчетаВТабЧасти(ТабличнаяЧасть, ИмяТабЧасти, ЗаполнятьБУ, ЗаполнятьНУ) Экспорт
	
	СчетаУчетаВДокументах.ЗаполнитьСчетаУчетаТабличнойЧасти(ИмяТабЧасти, ТабличнаяЧасть, ЭтотОбъект, ЗаполнятьБУ, ЗаполнятьНУ);
	
КонецПроцедуры // обЗаполнитьСчетаУчетаВТабЧасти()

// Возвращает структуру со значениями по-умолчанию счетов учета шапки (кроме счетов учета номенклатуры и затрат).
//
Функция ЗаполнитьСтруктуруСчетовУчетаШапки(ЗаполнятьБУ = Истина, ЗаполнятьНУ = Истина) Экспорт
 
	СтруктураСчетов = Новый Структура;
	
	Если ЗаполнятьБУ и ОтражатьВБухгалтерскомУчете Тогда
		
		СчетаУчета = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(Организация, Контрагент, ДоговорКонтрагента);
		СтруктураСчетов.Вставить("СчетУчетаРасчетовСКонтрагентом", СчетаУчета.СчетРасчетовПокупателя);
		СтруктураСчетов.Вставить("СчетУчетаРасчетовПоАвансам",	   СчетаУчета.СчетАвансовПокупателя);
		
	КонецЕсли;
	
	Возврат СтруктураСчетов;

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПЕЧАТИ

#Если Клиент Тогда

// Функция формирует табличный документ с печатной формой универсального передаточного документа
//
// Возвращаемое значение:
//  Табличный документ - печатная форма универсального передаточного документа
//
Функция ПечатьУниверсальногоПередаточногоДокумента()
	
	Если ТипЗнч(ИсправляемыйДокументРеализации) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
		ВидОперацииУПД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ИсправляемыйДокументРеализации, "ВидОперации");
	Иначе
		ВидОперацииУПД = ВидОперации;
	КонецЕсли;
	
	Если ВидОперацииУПД <> Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки Тогда
		ТекстСообщения = НСтр("ru = 'Применение формы универсального передаточного документа возможно только для документов
				|с видом операции ""Исправление в первичных документах""!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат Неопределено;
	КонецЕсли;
	
	НомерДляПечати 	= Номер;
	ДатаДляПечати	= Дата;
	Если ЗначениеЗаполнено(ИсправляемыйДокументРеализации) Тогда
		РеквизитыИсправляемогоДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ИсправляемыйДокументРеализации, "Номер, Дата");
		НомерДляПечати 	= РеквизитыИсправляемогоДокумента.Номер;
		ДатаДляПечати	= РеквизитыИсправляемогоДокумента.Дата;
	КонецЕсли;
	
	ДанныеДокумента = Новый Структура();
	ДанныеДокумента.Вставить("ДокументСсылка",    				Ссылка);
	ДанныеДокумента.Вставить("Номер",             				НомерДляПечати);
	ДанныеДокумента.Вставить("Дата",              				ДатаДляПечати);
	ДанныеДокумента.Вставить("Ссылка", 			  				Документы.СчетФактураВыданный.ПустаяСсылка());
	ДанныеДокумента.Вставить("ДокументОснование", 				Ссылка);
	ДанныеДокумента.Вставить("Организация",   	  				Организация);
	ДанныеДокумента.Вставить("Контрагент", 		  				Контрагент);
	ДанныеДокумента.Вставить("ДоговорКонтрагента", 		  		ДоговорКонтрагента);
	ДанныеДокумента.Вставить("Руководитель", 	  				Неопределено);
	ДанныеДокумента.Вставить("ГлавныйБухгалтер",  				Неопределено);
	ДанныеДокумента.Вставить("ВалютаРегламентированногоУчета",  мВалютаРегламентированногоУчета);
	ДанныеДокумента.Вставить("ДатаОтгрузкиПередачи",            ДатаДляПечати);
	ДанныеДокумента.Вставить("Подразделение", 	  				Подразделение);

	ВидДоговора = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДоговорКонтрагента, "ВидДоговора");
	ПередачаНаРеализациюПоКомиссии = (ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
	ДанныеДокумента.Вставить("ПередачаНаРеализациюПоКомиссии",  ПередачаНаРеализациюПоКомиссии);
	
	СчетФактураТребуется = ОпределитьСчетФактураТребуется();
	
	СтруктураОтбораСчетаФактуры = Новый Структура;
	СписокВидовСчетовФактур = Новый СписокЗначений;
	СписокВидовСчетовФактур.Добавить(Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию);
	СтруктураОтбораСчетаФактуры.Вставить("ВидСчетаФактуры", СписокВидовСчетовФактур);
	СтруктураОтбораСчетаФактуры.Вставить("ПометкаУдаления", Ложь);
	
	Возврат УчетНДС.ПечатьУниверсальногоПередаточногоДокумента(ДанныеДокумента, СчетФактураТребуется,, СтруктураОтбораСчетаФактуры);

КонецФункции

// Функция формирует табличный документ с печатной формой универсального корректировочного документа
//
// Возвращаемое значение:
//  Табличный документ - печатная форма универсального корректировочного документа
//
Функция ПечатьУниверсальногоКорректировочногоДокумента()
	
	Если ТипЗнч(ИсправляемыйДокументРеализации) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
		ВидОперацииУКД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ИсправляемыйДокументРеализации, "ВидОперации");
	Иначе
		ВидОперацииУКД = ВидОперации;
	КонецЕсли;
	
	Если ВидОперацииУКД <> Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение Тогда
		Предупреждение("Применение формы универсального корректировочного документа возможно только для документов 
				|с видом операции ""Корректировка по согласованию сторон""!");
		Возврат Неопределено;
	КонецЕсли;
	
	НомерДляПечати 	= Номер;
	ДатаДляПечати	= Дата;
	Если ЗначениеЗаполнено(ИсправляемыйДокументРеализации) Тогда
		РеквизитыИсправляемогоДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ИсправляемыйДокументРеализации, "Номер, Дата");
		НомерДляПечати 	= РеквизитыИсправляемогоДокумента.Номер;
		ДатаДляПечати	= РеквизитыИсправляемогоДокумента.Дата;
	КонецЕсли;
	
	ДанныеДокумента = Новый Структура();
	ДанныеДокумента.Вставить("Ссылка",							Ссылка);
	ДанныеДокумента.Вставить("Номер",                           ОбщегоНазначения.ПолучитьНомерНаПечать(Ссылка));
	ДанныеДокумента.Вставить("Дата",							Дата);
	ДанныеДокумента.Вставить("Организация",						Организация);
	ДанныеДокумента.Вставить("Контрагент",						Контрагент);
	ДанныеДокумента.Вставить("ДоговорКонтрагента",				ДоговорКонтрагента);
	ДанныеДокумента.Вставить("ВидСчетаФактуры",					Перечисления.ВидСчетаФактурыВыставленного.Корректировочный);
	ДанныеДокумента.Вставить("Исправление",						Ложь);
	ДанныеДокумента.Вставить("НомерИсправления",				"");
	ДанныеДокумента.Вставить("НомерИсправляемогоКорректировочногоДокумента", "");
	ДанныеДокумента.Вставить("ДатаИсправляемогоКорректировочногоДокумента", '00010101');
	ДанныеДокумента.Вставить("Продавец",						Контрагент);
	ДанныеДокумента.Вставить("КППКонтрагента",					"");
	ДанныеДокумента.Вставить("СчетФактураБезНДС",				Ложь);
	ДанныеДокумента.Вставить("Подразделение",					ПодразделениеОрганизации);	
	
	СчетФактураТребуется = ОпределитьСчетФактураТребуется();
	
	СтруктураОтбораСчетаФактуры = Новый Структура;
	СписокВидовСчетовФактур = Новый СписокЗначений;
	СписокВидовСчетовФактур.Добавить(Перечисления.ВидСчетаФактурыВыставленного.Корректировочный);
	СтруктураОтбораСчетаФактуры.Вставить("ВидСчетаФактуры", СписокВидовСчетовФактур);
	СтруктураОтбораСчетаФактуры.Вставить("ПометкаУдаления", Ложь);
	
	Возврат УчетНДС.ПечатьУниверсальногоКорректировочногоДокумента(ДанныеДокумента, СчетФактураТребуется,СтруктураОтбораСчетаФактуры);

КонецФункции
	
// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт
	
	Если ЭтоНовый() Тогда
		Предупреждение(НСтр("ru = 'Документ можно распечатать только после его записи'"));
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение(НСтр("ru = Недостаточно полномочий для печати непроведенного документа!'"));
		Возврат;
	КонецЕсли;
	
	Если НЕ РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	// Получить экземпляр документа на печать
	Если ИмяМакета = "СерийныеНомера" Тогда
		
		ТабДокумент = УчетСерийныхНомеров.ПечатьСерийныхНомеров(Ссылка, "Товары");
	
	ИначеЕсли ИмяМакета = "УниверсальныйПередаточныйДокумент" тогда
		ТабДокумент = ПечатьУниверсальногоПередаточногоДокумента();
		
	ИначеЕсли ИмяМакета = "УниверсальныйКорректировочныйДокумент" Тогда
		
		ТабДокумент = ПечатьУниверсальногоКорректировочногоДокумента();
	ИначеЕсли ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда
		
		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
		
		Если ТабДокумент = Неопределено Тогда
			Возврат;
		КонецЕсли; 
		
	КонецЕсли;
	
	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект), Ссылка);
	
КонецПроцедуры // Печать

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	СтруктураПечатныхФорм = Новый Структура;
	СтруктураПечатныхФорм.Вставить("СерийныеНомера", 				   	"Список серийных номеров");
	СтруктураПечатныхФорм.Вставить("УниверсальныйПередаточныйДокумент", "Универсальный передаточный документ (УПД)");
	СтруктураПечатныхФорм.Вставить("УниверсальныйКорректировочныйДокумент", "Универсальный корректировочный документ (УКД)");
	
	Возврат СтруктураПечатныхФорм;
	
КонецФункции // ПолучитьСтруктуруПечатныхФорм()

#КонецЕсли

// Возвращает пометку необходимости выписки счет-фактуры по докумету
//
Функция ОпределитьСчетФактураТребуется() Экспорт
	
	ВидДоговора = Неопределено;
	Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		ВидДоговора = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДоговорКонтрагента, "ВидДоговора");
	КонецЕсли;
	ЕстьНДС = (Товары.Итог("СуммаНДС") > 0) ИЛИ (Услуги.Итог("СуммаНДС") > 0);
	
	УчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(Дата, Организация);
	
	Если НЕ ЗначениеЗаполнено(УчетнаяПолитика) Тогда
		Возврат Ложь;
	ИначеЕсли КорректироватьНДС = Ложь Тогда
		Возврат Ложь;
	ИначеЕсли УчетнаяПолитика.УСН Тогда
		Возврат ЕстьНДС;
	ИначеЕсли ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
		Возврат Ложь;
	ИначеЕсли НЕ ЕстьНДС И НЕ УчетнаяПолитика.ПрименяетсяОсвобождениеОтУплатыНДС Тогда
		Возврат Ложь;		
	Иначе
		Возврат Истина;
	КонецЕсли;

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ЗАПОЛНЕНИЯ ДОКУМЕНТА

Процедура ЗаполнитьПоРеализации()
	
	Если НЕ ЗначениеЗаполнено(ДокументРеализации) Тогда
		Возврат;
	КонецЕсли;
	
	Товары.Очистить();
	Услуги.Очистить();
	СерийныеНомера.Очистить();
	СоставНабора.Очистить();
	СерийныеНомераСоставНабора.Очистить();
	
	ИмяВидаДокумента = ДокументРеализации.Метаданные().Имя;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДокументРеализации);
	
	Текст =
	"ВЫБРАТЬ
	|	КорректировкаРеализацииТовары.НомерСтроки КАК НомерСтрокиОснования,
	|	КорректировкаРеализацииТовары.Количество,
	|	КорректировкаРеализацииТовары.Количество КАК КоличествоДоИзменения,
	|	КорректировкаРеализацииТовары.Цена,
	|	КорректировкаРеализацииТовары.Цена КАК ЦенаДоИзменения,
	|	КорректировкаРеализацииТовары.Сумма,
	|	КорректировкаРеализацииТовары.Сумма КАК СуммаДоИзменения,
	|	КорректировкаРеализацииТовары.СтавкаНДС,
	|	КорректировкаРеализацииТовары.СтавкаНДС КАК СтавкаНДСДоИзменения,
	|	КорректировкаРеализацииТовары.СуммаНДС,
	|	КорректировкаРеализацииТовары.СуммаНДС КАК СуммаНДСДоИзменения,
	|	КорректировкаРеализацииТовары.КодТНВЭД,
	|	КорректировкаРеализацииТовары.КодТНВЭД КАК КодТНВЭДДоИзменения,
	|	""Товары"" КАК ТЧ,";
	
	Если ИмяВидаДокумента = "КорректировкаРеализации" Тогда
		Текст = Текст + "
		|	КорректировкаРеализацииТовары.КоличествоДоКорректировки,
		|	КорректировкаРеализацииТовары.ЦенаДоКорректировки,
		|	КорректировкаРеализацииТовары.СуммаДоКорректировки,
		|	КорректировкаРеализацииТовары.СуммаНДСДоКорректировки,";
	Иначе
		Текст = Текст + "
		|	0 КАК КоличествоДоКорректировки,
		|	0 КАК ЦенаДоКорректировки,
		|	0 КАК СуммаДоКорректировки,
		|	0 КАК СуммаНДСДоКорректировки,";
	КонецЕсли;
	
	Текст = Текст + "
	|	ИСТИНА КАК ЕстьВДокументеРеализации,
	|	NULL КАК Содержание,
	|	NULL КАК СодержаниеДоИзменения
	|ИЗ
	|	Документ."+ИмяВидаДокумента+".Товары КАК КорректировкаРеализацииТовары
	|ГДЕ
	|	КорректировкаРеализацииТовары.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КорректировкаРеализацииУслуги.НомерСтроки,
	|	КорректировкаРеализацииУслуги.Количество,
	|	КорректировкаРеализацииУслуги.Количество,
	|	КорректировкаРеализацииУслуги.Цена,
	|	КорректировкаРеализацииУслуги.Цена,
	|	КорректировкаРеализацииУслуги.Сумма,
	|	КорректировкаРеализацииУслуги.Сумма,
	|	КорректировкаРеализацииУслуги.СтавкаНДС,
	|	КорректировкаРеализацииУслуги.СтавкаНДС,
	|	КорректировкаРеализацииУслуги.СуммаНДС,
	|	КорректировкаРеализацииУслуги.СуммаНДС,
	|	NULL,
	|	NULL,
	|	""Услуги"",";
	
	Если ИмяВидаДокумента = "КорректировкаРеализации" Тогда
		Текст = Текст + "
		|	КорректировкаРеализацииУслуги.КоличествоДоКорректировки,
		|	КорректировкаРеализацииУслуги.ЦенаДоКорректировки,
		|	КорректировкаРеализацииУслуги.СуммаДоКорректировки,
		|	КорректировкаРеализацииУслуги.СуммаНДСДоКорректировки,";
	Иначе
		Текст = Текст + "
		|	0,
		|	0,
		|	0,
		|	0,";
	КонецЕсли;
	
	Текст = Текст + "
	|	ИСТИНА,
	|	КорректировкаРеализацииУслуги.Содержание,
	|	КорректировкаРеализацииУслуги.Содержание
	|ИЗ
	|	Документ."+ИмяВидаДокумента+".Услуги КАК КорректировкаРеализацииУслуги
	|ГДЕ
	|	КорректировкаРеализацииУслуги.Ссылка = &Ссылка";
	
	Запрос.Текст = Текст;
	Результат = Запрос.Выполнить().Выбрать();
	
	ДокументРеализацииТовары = ДокументРеализации.Товары;
	ДокументРеализацииУслуги = ДокументРеализации.Услуги;
	
	Пока Результат.Следующий() Цикл
		
		Если Результат.ТЧ = "Товары" Тогда
			СтрокаТоваров = Товары.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТоваров, ДокументРеализацииТовары[Результат.НомерСтрокиОснования - 1]);
			ЗаполнитьЗначенияСвойств(СтрокаТоваров, Результат);
		Иначе // услуги
			СтрокаУслуг = Услуги.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаУслуг, ДокументРеализацииУслуги[Результат.НомерСтрокиОснования - 1]);
			ЗаполнитьЗначенияСвойств(СтрокаУслуг, Результат);
		КонецЕсли;
		
	КонецЦикла;
	
	// Загрузим табличную часть СерийныеНомера
	СерийныеНомера.Загрузить(ДокументРеализации.СерийныеНомера.Выгрузить());
	
КонецПроцедуры

Процедура ЗаполнитьПоАктуОказанияПроизводственныхУслуг()
	
	Товары.Очистить();
	Услуги.Очистить();
	СерийныеНомера.Очистить();
	СоставНабора.Очистить();
	СерийныеНомераСоставНабора.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДокументРеализации);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КорректировкаРеализацииУслуги.НомерСтроки КАК НомерСтрокиОснования,
	|	КорректировкаРеализацииУслуги.Количество,
	|	КорректировкаРеализацииУслуги.Количество КАК КоличествоДоИзменения,
	|	КорректировкаРеализацииУслуги.Цена,
	|	КорректировкаРеализацииУслуги.Цена КАК ЦенаДоИзменения,
	|	КорректировкаРеализацииУслуги.Сумма,
	|	КорректировкаРеализацииУслуги.Сумма КАК СуммаДоИзменения,
	|	КорректировкаРеализацииУслуги.СтавкаНДС,
	|	КорректировкаРеализацииУслуги.СтавкаНДС КАК СтавкаНДСДоИзменения,
	|	КорректировкаРеализацииУслуги.СуммаНДС,
	|	КорректировкаРеализацииУслуги.СуммаНДС КАК СуммаНДСДоИзменения,
	|	КорректировкаРеализацииУслуги.Ссылка.Сделка КАК ЗаказПокупателя,
	|	ИСТИНА КАК ЕстьВДокументеРеализации
	|ИЗ
	|	Документ.АктОбОказанииПроизводственныхУслуг.Услуги КАК КорректировкаРеализацииУслуги
	|ГДЕ
	|	КорректировкаРеализацииУслуги.Ссылка = &Ссылка";
	
	Результат = Запрос.Выполнить().Выбрать();
	
	ДокументРеализацииУслуги = ДокументРеализации.Услуги;
	
	Пока Результат.Следующий() Цикл
		СтрокаУслуг = Услуги.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаУслуг, ДокументРеализацииУслуги[Результат.НомерСтрокиОснования - 1]);
		ЗаполнитьЗначенияСвойств(СтрокаУслуг, Результат);		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьЗаказыВТЧ()
	
	Если НЕ ПолучитьСвойстваЗаказаВТабличнойЧасти().ВидимостьЗаказа Тогда
		Возврат;
	КонецЕсли;	
	
	// В табличной части может быть только заказ покупателя, а в шапке реквизит заказ имеет составной тип
	ЗаказИзШапки = ?(ТипЗнч(Сделка) = Тип("ДокументСсылка.ЗаказПокупателя"), Сделка, Документы.ЗаказПокупателя.ПустаяСсылка());
	
	// Если заказ в табличной части не выбран, то заполним его заказом из шапки
	Для Каждого СтрокаТЧ Из Товары Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТЧ.ЗаказПокупателя) И СтрокаТЧ.ЗаказПокупателя <> ЗаказИзШапки Тогда
			СтрокаТЧ.ЗаказПокупателя = ЗаказИзШапки;
		КонецЕсли;
	КонецЦикла;
	Для Каждого СтрокаТЧ Из Услуги Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТЧ.ЗаказПокупателя) И СтрокаТЧ.ЗаказПокупателя <> ЗаказИзШапки Тогда
			СтрокаТЧ.ЗаказПокупателя = ЗаказИзШапки;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры //ЗаполнитьЗаказыВТЧ()

Процедура ЗаполнитьСкладыВТЧ()
	
	Если НЕ ПолучитьСвойстваСкладаВТабличнойЧасти().ВидимостьСклада Тогда
		Возврат;
	КонецЕсли;
	
	// Получим соответствие заказов из табличной части Товары и складов, указанных в этих заказах
	СоответствиеЗаказовИСкладов = Новый Соответствие;
	
	Если ПолучитьСвойстваЗаказаВТабличнойЧасти().ВидимостьЗаказа Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ЗаказПокупателя.Ссылка КАК Заказ,
		|	ЗаказПокупателя.СкладГруппа КАК Склад
		|ИЗ
		|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
		|ГДЕ
		|	ЗаказПокупателя.Ссылка В(&Заказы)";
		
		ТаблицаЗаказы = Товары.Выгрузить(, "ЗаказПокупателя");
		ТаблицаЗаказы.Свернуть("ЗаказПокупателя", "");
		
		Запрос.УстановитьПараметр("Заказы", ТаблицаЗаказы.ВыгрузитьКолонку("ЗаказПокупателя"));
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			СоответствиеЗаказовИСкладов.Вставить(Выборка.Заказ, Выборка.Склад);
		КонецЦикла;
		
	КонецЕсли;
	
	// Заполним реквизит склад в табличной части "Товары"
	Для Каждого СтрокаТЧ из Товары Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаТЧ.Склад) Тогда
			
			СкладИзЗаказа = СоответствиеЗаказовИСкладов.Получить(СтрокаТЧ.ЗаказПокупателя);
			
			Если ЗначениеЗаполнено(СкладИзЗаказа) Тогда
				СтрокаТЧ.Склад = СкладИзЗаказа;
			Иначе
				СтрокаТЧ.Склад = Склад;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры //ЗаполнитьСкладыВТЧ()

Процедура ОбработатьСуммыДоКорректировки()
	
	ИсправлениеКорректировки =
		ЗначениеЗаполнено(ИсправляемыйДокументРеализации)
		И ТипЗнч(ИсправляемыйДокументРеализации) = Тип("ДокументСсылка.КорректировкаРеализации")
		И ИсправляемыйДокументРеализации.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение;

	Если ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение Тогда
		
		Товары.ЗагрузитьКолонку(Товары.ВыгрузитьКолонку("КоличествоДоИзменения"), 	"КоличествоДоКорректировки");
		Товары.ЗагрузитьКолонку(Товары.ВыгрузитьКолонку("ЦенаДоИзменения"), 		"ЦенаДоКорректировки");
		Товары.ЗагрузитьКолонку(Товары.ВыгрузитьКолонку("СуммаДоИзменения"), 		"СуммаДоКорректировки");
		Товары.ЗагрузитьКолонку(Товары.ВыгрузитьКолонку("СуммаНДСДоИзменения"), 	"СуммаНДСДоКорректировки");
		
		Услуги.ЗагрузитьКолонку(Услуги.ВыгрузитьКолонку("КоличествоДоИзменения"), 	"КоличествоДоКорректировки");
		Услуги.ЗагрузитьКолонку(Услуги.ВыгрузитьКолонку("ЦенаДоИзменения"), 		"ЦенаДоКорректировки");
		Услуги.ЗагрузитьКолонку(Услуги.ВыгрузитьКолонку("СуммаДоИзменения"), 		"СуммаДоКорректировки");
		Услуги.ЗагрузитьКолонку(Услуги.ВыгрузитьКолонку("СуммаНДСДоИзменения"), 	"СуммаНДСДоКорректировки");
		
	ИначеЕсли НЕ ИсправлениеКорректировки Тогда
		
		Для Каждого СтрокаТЧ Из Товары Цикл
			СтрокаТЧ.КоличествоДоКорректировки 	= 0;
			СтрокаТЧ.ЦенаДоКорректировки 		= 0;
			СтрокаТЧ.СуммаДоКорректировки 		= 0;
			СтрокаТЧ.СуммаНДСДоКорректировки 	= 0;
		КонецЦикла;
		
		Для Каждого СтрокаТЧ Из Услуги Цикл
			СтрокаТЧ.КоличествоДоКорректировки 	= 0;
			СтрокаТЧ.ЦенаДоКорректировки 		= 0;
			СтрокаТЧ.СуммаДоКорректировки 		= 0;
			СтрокаТЧ.СуммаНДСДоКорректировки 	= 0;			
		КонецЦикла;
		
	КонецЕсли;		
	
	Если НЕ КорректироватьБУиНУ Тогда
		
		Отбор = Новый Структура("ЕстьВДокументеРеализации", Истина);
		
		СтрокиТовары = Товары.НайтиСтроки(Отбор);
		СтрокиУслуги = Услуги.НайтиСтроки(Отбор);
		
		Для Каждого СтрокаТЧ Из СтрокиТовары Цикл
			СтрокаТЧ.ЕстьВДокументеРеализации = Ложь;
		КонецЦикла;
		
		Для Каждого СтрокаТЧ Из СтрокиУслуги Цикл
			СтрокаТЧ.ЕстьВДокументеРеализации = Ложь;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБРАБОТКИ ШАПКИ ДОКУМЕНТА ДЛЯ ПРОВЕДЕНИЯ

// Процедура формирует структуру шапки документа и дополнительных полей.
//
Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, РежимПроведения = Неопределено,Отказ = Ложь) Экспорт
	
	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;
	
	Если РежимПроведения = Неопределено Тогда
		РежимПроведения = РежимПроведенияДокумента.Неоперативный;
	КонецЕсли;
	
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьВСтруктуруШапкиСведенияОСчетахРасчетов(ЭтотОбъект, СтруктураШапкиДокумента);
	
	СтруктураШапкиДокумента.Вставить("СкладВТабличнойЧасти", 				 ПолучитьСвойстваСкладаВТабличнойЧасти().ВидимостьСклада);
	СтруктураШапкиДокумента.Вставить("ЗаказВТабличнойЧасти", 				 ПолучитьСвойстваЗаказаВТабличнойЧасти().ВидимостьЗаказа);
	СтруктураШапкиДокумента.Вставить("ОтгрузкаБезПереходаПравСобственности", Ложь);
	
	// Настоящие значения следуюшщих свойств запишутся в структуру при подготовке параметров учетной политики
	СтруктураШапкиДокумента.Вставить("НачислятьНДСПоОтгрузке",				 Ложь);
    СтруктураШапкиДокумента.Вставить("МоментОпределенияНалоговойБазыНДС", 	 Перечисления.МоментыОпределенияНалоговойБазыНДС.ПоОтгрузке);
	
    СтруктураШапкиДокумента.Вставить("мДокументРеализацииСсылка", 	 		 мДокументРеализацииСсылка);
	
	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке      = УправлениеЗапасами.СформироватьДеревоПолейЗапросаПоШапке();
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "ВедениеВзаиморасчетов"                      , "ВедениеВзаиморасчетов");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "РасчетыВУсловныхЕдиницах"                   , "РасчетыВУсловныхЕдиницах");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "ВалютаВзаиморасчетов"                       , "ВалютаВзаиморасчетов");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "Организация"                                , "ДоговорОрганизация");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "ВидДоговора"                                , "ВидДоговора");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "ВестиПоДокументамРасчетовСКонтрагентом"     , "ВестиПоДокументамРасчетовСКонтрагентом");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Организация"		 , "ОтражатьВРегламентированномУчете"           , "ОтражатьВРегламентированномУчете");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Склад"               , "ВидСклада"                                  , "ВидСклада");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика"     , "ВестиПартионныйУчетПоСкладам"               , "ВестиПартионныйУчетПоСкладам");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика"     , "ВедениеУчетаПоПроектам"                     , "ВедениеУчетаПоПроектам");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "ОбособленныйУчетТоваровПоЗаказамПокупателей", "ОбособленныйУчетТоваровПоЗаказамПокупателей");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика"     , "ВестиУчетТоваровОрганизацийВРазрезеСкладов" , "ВестиУчетТоваровОрганизацийВРазрезеСкладов");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы"			 , "ВалютаУправленческогоУчета"                 , "ВалютаУправленческогоУчета");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы"			 , "КурсВалютыУправленческогоУчета"             , "КурсВалютыУправленческогоУчета");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "НастройкаСпособовВеденияУправленческогоПартионногоУчета"			, "СпособВеденияПартионногоУчетаПоОрганизации", "СпособВеденияПартионногоУчетаПоОрганизации");
	
	// Если сделка - Заказ покупателя, то надо цену для проведения пересчитать в валюту заказа.
	Если ЗначениеЗаполнено(Сделка) И ТипЗнч(Сделка) <> Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда
		УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Сделка"          , "ВалютаДокумента"                            , "ВалютаЗаказа");
		УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Сделка"          , "КурсВзаиморасчетов"                         , "КурсВзаиморасчетовЗаказа");
		УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Сделка"          , "КратностьВзаиморасчетов"                    , "КратностьВзаиморасчетовЗаказа");
		УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Сделка"          , "ВидОперации"                                , "СделкаВидОперации");
	КонецЕсли;
	
	УправлениеВзаиморасчетами.ДополнитьДеревоПолейЗапросаПоШапкеДляКонтроляВзаиморасчетовУпр(ДеревоПолейЗапросаПоШапке, РежимПроведения);
	
	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);
	
	// Если надо пересчитывать цену в валюту заказа. то в структуре должна быть заполнена валюта заказа.
	ВалютаЗаказа = Неопределено;
	НужнаЦенаЗаказа = Ложь;
	Если СтруктураШапкиДокумента.Свойство("ВалютаЗаказа", ВалютаЗаказа) Тогда
		НужнаЦенаЗаказа = Истина;
		Если ВалютаЗаказа = мВалютаРегламентированногоУчета Тогда
			КурсЗаказа      = 1;
			КратностьЗаказа = 1;
		Иначе //ВалютаЗаказа = ВалютаВзаиморасчетов
			КурсЗаказа      = СтруктураШапкиДокумента.КурсВзаиморасчетовЗаказа;
			КратностьЗаказа = СтруктураШапкиДокумента.КратностьВзаиморасчетовЗаказа;
		КонецЕсли;
		СтруктураШапкиДокумента.Вставить("КурсЗаказа"     , КурсЗаказа);
		СтруктураШапкиДокумента.Вставить("КратностьЗаказа", КратностьЗаказа);
	КонецЕсли;
	
	СтруктураШапкиДокумента.Вставить("НужнаЦенаЗаказа", НужнаЦенаЗаказа);
	СтруктураШапкиДокумента.Вставить("РежимПроведения", РежимПроведения);
	
	// Дополним шапку исходным исправляемым документом реализации
	СтруктураШапкиДокумента.Вставить("ИсходныйИсправляемыйДокументРеализации", УчетНДС.ПолучитьИсправляемыйДокументРеализации(ДокументРеализации, Истина));
	
	мСтруктураПараметровВзаиморасчетов.Вставить("ПроводитьПоВзаиморасчетам", СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
	
	////////////////////////////////////////////////////////////////////
	// Сведения о корректируемом документе
	ДокументРеализацииСсылка = УчетНДС.ПолучитьИсправляемыйДокументРеализации(ДокументРеализации, Истина);
	СтруктураШапкиДокумента.Вставить("ДокументРеализацииДата", 	?(ЗначениеЗаполнено(ДокументРеализацииСсылка),ДокументРеализацииСсылка.Дата, Дата));
	СтруктураШапкиДокумента.Вставить("ДокументРеализацииСсылка", 	ДокументРеализацииСсылка);
    СтруктураШапкиДокумента.Вставить("ДокументОснование",	 		ДокументРеализации);
	СтруктураШапкиДокумента.Вставить("ДокументОснованиеДата",	 	?(ЗначениеЗаполнено(ДокументРеализации), ДокументРеализации.Дата, Дата));

	
КонецПроцедуры // ПодготовитьСтруктуруШапкиДокумента()

// Процедура определяет параметры учетной политики
//
Процедура ПодготовитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента, Отказ)
	
	мПараметрыПартионногоУчета = глЗначениеПеременной("ПараметрыПартионногоУчета");
	
	// упр.
	УчетнаяПолитикаУпр = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиУпр(Дата);
    Если НЕ ЗначениеЗаполнено(УчетнаяПолитикаУпр) Тогда
		Отказ = Истина;
	КонецЕсли;
	
	// регл.
	Если СтруктураШапкиДокумента.ОтражатьВРегламентированномУчете
	 И (СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете ИЛИ СтруктураШапкиДокумента.ОтражатьВНалоговомУчете) Тогда
	 
		мУчетнаяПолитикаРегл = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(Дата, Организация);
    	Если НЕ ЗначениеЗаполнено(мУчетнаяПолитикаРегл) Тогда
			Отказ = Истина;
		Иначе
			СтруктураШапкиДокумента.Вставить("НачислятьНДСПоОтгрузке", 			  мУчетнаяПолитикаРегл.НачислятьНДСПоОтгрузке);
			СтруктураШапкиДокумента.Вставить("МоментОпределенияНалоговойБазыНДС", мУчетнаяПолитикаРегл.МоментОпределенияНалоговойБазыНДС);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ПодготовитьПараметрыУчетнойПолитики()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение, не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Заголовок, Отказ)
	
	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Организация, ДокументРеализации");
	
	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	//Организация в документе должна совпадать с организацией, указанной в договоре взаиморасчетов.
	УправлениеВзаиморасчетами.ПроверитьСоответствиеОрганизацииДоговоруВзаиморасчетов(Организация, ДоговорКонтрагента, СтруктураШапкиДокумента.ДоговорОрганизация, Отказ, Заголовок);
	
	// Проверка шапки упр.
	Если СтруктураШапкиДокумента.ВидСклада = Перечисления.ВидыСкладов.НТТ Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Документ не может осуществлять реализацию с неавтоматизированной торговой точки!", Отказ, Заголовок);
	КонецЕсли;
	
	// Проверка шапки регл.
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		
		СтруктураОбязательныхПолей = Новый Структура;
		Если НЕ СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
			СтруктураОбязательныхПолей.Вставить("СчетУчетаРасчетовСКонтрагентом");
		КонецЕсли;
	
		ОбщегоНазначенияКлиентСервер.ПроверитьЗаполнениеВычисляемыхРеквизитовШапки(ЭтотОбъект, СтруктураОбязательныхПолей, СтруктураШапкиДокумента, Отказ, Заголовок);
		
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПРОВЕРКИ ТАБЛИЧНЫХ ЧАСТЕЙ ДОКУМЕНТА

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Заголовок, Отказ)
	
	// Укажем, что надо проверить
	СтруктураОбязательныхПолей = Новый Структура;
	
	Если ПолучитьСвойстваСкладаВТабличнойЧасти().ОбязательноеЗаполнениеСклада Тогда
		СтруктураОбязательныхПолей.Вставить("Склад");
	КонецЕсли;
	Если ПолучитьСвойстваЗаказаВТабличнойЧасти().ОбязательноеЗаполнениеЗаказа Тогда
		СтруктураОбязательныхПолей.Вставить("ЗаказПокупателя");
	КонецЕсли;
	Если ПолучитьСвойстваЗаказаВТабличнойЧасти().ОбязательноеЗаполнениеСпособаСписания Тогда
		СтруктураОбязательныхПолей.Вставить("СпособСписанияОстаткаТоваров");
	КонецЕсли;
	
	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураОбязательныхПолей, Отказ, Заголовок);

	УправлениеЗапасами.ПроверитьЧтоСкладНеНТТ(	 ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок, "ВидСклада");
	УправлениеЗапасами.ПроверитьЧтоНетУслуг(	 ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);
	УправлениеЗапасами.ПроверитьЧтоНетНаборов(	 ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);
	УправлениеЗапасами.ПроверитьЧтоНетКомплектов(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);
	
	// Реквизиты Заказов "Организация", "Контрагент", "Договор контрагента" должны совпадать с реквизитами из шапки.
	УправлениеЗаказами.ПроверитьРеквизитыЗаказов(ЭтотОбъект, "Товары", "ЗаказПокупателя", Отказ, Заголовок);
	
	УчетСерийныхНомеров.ПроверитьКоличествоСерийныхНомеровВДокументе(ЭтотОбъект, "Товары", Заголовок);
	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиУслуги(ТаблицаПоУслугам, СтруктураШапкиДокумента, Заголовок, Отказ)
	
	Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
		Если ТаблицаПоУслугам.Количество() > 0 Тогда
			Сообщить("Документ передачи на комиссию не может содержать услуг!");
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	// Укажем, что надо проверить
	СтруктураОбязательныхПолей = Новый Структура;
	СтруктураОбязательныхПолей.Вставить("Сумма");
	
	Если ПолучитьСвойстваЗаказаВТабличнойЧасти().ОбязательноеЗаполнениеЗаказа Тогда
		СтруктураОбязательныхПолей.Вставить("ЗаказПокупателя");
	КонецЕсли;
	
	УправлениеЗапасами.КорректировкаСтруктурыОбязательныхПолей(СтруктураОбязательныхПолей, СтруктураШапкиДокумента.ВидСклада);
	
	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Услуги", СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	УправлениеЗапасами.ПроверитьЧтоНетТоваров(	 ЭтотОбъект, "Услуги", ТаблицаПоУслугам, Отказ, Заголовок);
	УправлениеЗапасами.ПроверитьЧтоНетНаборов(	 ЭтотОбъект, "Услуги", ТаблицаПоУслугам, Отказ, Заголовок);
	УправлениеЗапасами.ПроверитьЧтоНетКомплектов(ЭтотОбъект, "Услуги", ТаблицаПоУслугам, Отказ, Заголовок);
	
	// Реквизиты Заказов "Организация", "Контрагент", "Договор контрагента" должны совпадать с реквизитами из шапки.
	УправлениеЗаказами.ПроверитьРеквизитыЗаказов(ЭтотОбъект, "Услуги", "ЗаказПокупателя", Отказ, Заголовок);
	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиУслуги()

// Выполняет проверки,которые нужны только для регл. учета
//
Процедура ПроверитьЗаполнениеТабличнойЧастиТоварыРегл(ТаблицаПоТоварам, СтруктураШапкиДокумента, Заголовок, Отказ)
	
	Если НЕ СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете
	 ИЛИ СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
		Возврат;
	КонецЕсли;
	
	КэшПоСчетам 	= Новый Соответствие;
	СтрокаСообщения = "Указанные счета доходов и расходов относятся к разным видам деятельности!";
	
	Для Каждого СтрокаТЧ Из ТаблицаПоТоварам Цикл
		
		Если ЗначениеЗаполнено(СтрокаТЧ.СчетДоходовБУ) И ЗначениеЗаполнено(СтрокаТЧ.СчетРасходовБУ) Тогда
			
			СчетДоходовБУОтноситсяКДеятельностиЕНВД = КэшПоСчетам[СтрокаТЧ.СчетДоходовБУ];
			Если СчетДоходовБУОтноситсяКДеятельностиЕНВД = Неопределено Тогда
				СчетДоходовБУОтноситсяКДеятельностиЕНВД = НалоговыйУчетУСН.ОтноситсяКДеятельностиЕНВД(СтрокаТЧ.СчетДоходовБУ);
				КэшПоСчетам.Вставить(СтрокаТЧ.СчетДоходовБУ, СчетДоходовБУОтноситсяКДеятельностиЕНВД);
			КонецЕсли;
			
			СчетРасходовБУОтноситсяКДеятельностиЕНВД = КэшПоСчетам[СтрокаТЧ.СчетРасходовБУ];
			Если СчетРасходовБУОтноситсяКДеятельностиЕНВД = Неопределено Тогда
				СчетРасходовБУОтноситсяКДеятельностиЕНВД = НалоговыйУчетУСН.ОтноситсяКДеятельностиЕНВД(СтрокаТЧ.СчетРасходовБУ);
				КэшПоСчетам.Вставить(СтрокаТЧ.СчетРасходовБУ, СчетРасходовБУОтноситсяКДеятельностиЕНВД);
			КонецЕсли;					
			
			Если СчетДоходовБУОтноситсяКДеятельностиЕНВД <> СчетРасходовБУОтноситсяКДеятельностиЕНВД Тогда
				ОбщегоНазначения.СообщитьОбОшибке(
					"В строке номер """+ СокрЛП(СтрокаТЧ.НомерСтроки) + """ табличной части ""Товары"": " + СтрокаСообщения,
					Отказ,
					Заголовок);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПОДГОТОВКИ ТАБЛИЦ ДОКУМЕНТА ДЛЯ ПРОВЕДЕНИЯ

// Процедура формирует таблицы документа.
//
Процедура ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугам) Экспорт
	
	// Получим необходимые данные для проведения и проверки заполнения данные по табличной части "Товары".
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Номенклатура"                        , "Номенклатура");
	СтруктураПолей.Вставить("ТипНоменклатуры"                     , "Номенклатура.ВидНоменклатуры.ТипНоменклатуры");
	СтруктураПолей.Вставить("ХарактеристикаНоменклатуры"          , "ХарактеристикаНоменклатуры");
	СтруктураПолей.Вставить("СерияНоменклатуры"                   , "СерияНоменклатуры");
	СтруктураПолей.Вставить("Качество"                            , "Качество");
	СтруктураПолей.Вставить("ЕдиницаИзмерения"                    , "ЕдиницаИзмерения");
	СтруктураПолей.Вставить("Цена"                                , "Цена");
	СтруктураПолей.Вставить("Услуга"                              , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Набор"                               , "Номенклатура.Набор");
	СтруктураПолей.Вставить("Комплект"                            , "Номенклатура.Комплект");
	СтруктураПолей.Вставить("СтавкаНДС"                           , "СтавкаНДС");
	СтруктураПолей.Вставить("Склад"                               , "Склад");
	СтруктураПолей.Вставить("ВидСклада"                           , "Склад.ВидСклада");
	СтруктураПолей.Вставить("ЗаказПокупателя"                     , "ЗаказПокупателя");
	СтруктураПолей.Вставить("ПринадлежностьНоменклатуры"     	  , "ПринадлежностьНоменклатуры");
	СтруктураПолей.Вставить("СпособСписанияОстаткаТоваров"		  , "СпособСписанияОстаткаТоваров");
	СтруктураПолей.Вставить("КлючСтроки"                          , "КлючСтроки");
	
	// Дополним полями, нужными для регл. учета
	СтруктураПолей.Вставить("НоменклатурнаяГруппа"				  , "Номенклатура.НоменклатурнаяГруппа");
	СтруктураПолей.Вставить("СчетУчетаБУ"        				  , "СчетУчетаБУ");
	СтруктураПолей.Вставить("ПринятыеСчетУчетаБУ"				  , "ПринятыеСчетУчетаБУ");
	СтруктураПолей.Вставить("ПринятыеСчетУчетаНУ"				  , "ПринятыеСчетУчетаНУ");
	СтруктураПолей.Вставить("СчетУчетаНУ"        				  , "СчетУчетаНУ");
	СтруктураПолей.Вставить("СчетДоходовБУ"      				  , "СчетДоходовБУ");
	СтруктураПолей.Вставить("СубконтоБУ"         				  , "СубконтоБУ");
	СтруктураПолей.Вставить("СчетДоходовНУ"      				  , "СчетДоходовНУ");
	СтруктураПолей.Вставить("СубконтоНУ"         				  , "СубконтоНУ");
	СтруктураПолей.Вставить("СчетРасходовБУ"     				  , "СчетРасходовБУ");
	СтруктураПолей.Вставить("СчетРасходовНУ"     				  , "СчетРасходовНУ");
	СтруктураПолей.Вставить("ПереданныеПринятыеБУ"   			  , "ПереданныеПринятыеБУ");
	СтруктураПолей.Вставить("ПереданныеПринятыеНУ"   			  , "ПереданныеПринятыеНУ");
	СтруктураПолей.Вставить("ПереданныеСобственныеБУ"			  , "ПереданныеСобственныеБУ");
	СтруктураПолей.Вставить("ПереданныеСобственныеНУ"			  , "ПереданныеСобственныеНУ");
	
	СтруктураПолей.Вставить("НДСИтоговый"						  , "СуммаНДС");
	СтруктураПолей.Вставить("НДСДоИзм"					  		  , "СуммаНДСДоИзменения");
	СтруктураПолей.Вставить("НДСДоКорр"					  		  , "СуммаНДСДоКорректировки");
	
	// Сформируем структуру сложных полей
	СтруктураСложныхПолей = Новый Структура;
	СтруктураСложныхПолей.Вставить("Количество"					  , "(Количество - КоличествоДоИзменения) * Коэффициент / Номенклатура.ЕдиницаХраненияОстатков.Коэффициент");
	СтруктураСложныхПолей.Вставить("КоличествоДок"                , "Количество - КоличествоДоИзменения");
	СтруктураСложныхПолей.Вставить("КоличествоВЕдиницахДокумента" , "Количество - КоличествоДоИзменения");
	СтруктураСложныхПолей.Вставить("Сумма"						  , "Сумма - СуммаДоИзменения");
	СтруктураСложныхПолей.Вставить("СуммаДок"					  , "Сумма - СуммаДоИзменения");
	СтруктураСложныхПолей.Вставить("НДС"						  , "СуммаНДС - СуммаНДСДоИзменения");
	СтруктураСложныхПолей.Вставить("НДСДок"						  , "СуммаНДС - СуммаНДСДоИзменения");
	
	Если СтруктураШапкиДокумента.ВедениеУчетаПоПроектам И НЕ ЗначениеЗаполнено(Проект) Тогда
		СтруктураСложныхПолей.Вставить("Проект"					  , "ПроектыНоменклатуры.Проект");
	КонецЕсли;
	
	// Подготовим таблицу товаров для проведения.
	РезультатЗапросаПоТоварам = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураПолей, СтруктураСложныхПолей);
	ТаблицаПоТоварам 		  = ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента);
	
	// Получим необходимые данные для проведения и проверки заполнения данные по табличной части "Услуги".
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Номенклатура"        , "Номенклатура");
	СтруктураПолей.Вставить("НоменклатурнаяГруппа", "Номенклатура.НоменклатурнаяГруппа");
	СтруктураПолей.Вставить("Цена"                , "Цена");
	СтруктураПолей.Вставить("Услуга"              , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Набор"               , "Номенклатура.Набор");
	СтруктураПолей.Вставить("Комплект"            , "Номенклатура.Комплект");
	СтруктураПолей.Вставить("СтавкаНДС"           , "СтавкаНДС");
	СтруктураПолей.Вставить("СчетДоходовБУ"       , "СчетДоходовБУ");
	СтруктураПолей.Вставить("СубконтоБУ"          , "СубконтоБУ");
	СтруктураПолей.Вставить("СчетДоходовНУ"       , "СчетДоходовНУ");
	СтруктураПолей.Вставить("СубконтоНУ"          , "СубконтоНУ");
	СтруктураПолей.Вставить("СчетРасходовБУ"      , "СчетРасходовБУ");
	СтруктураПолей.Вставить("СчетРасходовНУ"      , "СчетРасходовНУ");
	СтруктураПолей.Вставить("ЗаказПокупателя"     , "ЗаказПокупателя");
	СтруктураПолей.Вставить("Содержание"          , "Содержание");
	
	СтруктураПолей.Вставить("НДСИтоговый"		  , "СуммаНДС");
	СтруктураПолей.Вставить("НДСДоИзм"			  , "СуммаНДСДоИзменения");
	СтруктураПолей.Вставить("НДСДоКорр"			  , "СуммаНДСДоКорректировки");

	// Сформируем структуру сложных полей
	СтруктураСложныхПолей = Новый Структура;
	СтруктураСложныхПолей.Вставить("Количество"   , "Количество - КоличествоДоИзменения");
	СтруктураСложныхПолей.Вставить("Сумма"		  , "Сумма - СуммаДоИзменения");
	СтруктураСложныхПолей.Вставить("НДС"		  , "СуммаНДС - СуммаНДСДоИзменения");
	
	Если СтруктураШапкиДокумента.ВедениеУчетаПоПроектам И НЕ ЗначениеЗаполнено(Проект) Тогда
		СтруктураСложныхПолей.Вставить("Проект"	  , "ПроектыНоменклатуры.Проект");
	КонецЕсли;
	
	// Подготовим таблицу услуг для проведения.
	РезультатЗапросаПоУслугам = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Услуги", СтруктураПолей, СтруктураСложныхПолей);
	ТаблицаПоУслугам 		  = ПодготовитьТаблицуУслуг(РезультатЗапросаПоУслугам, СтруктураШапкиДокумента);
	
	//Заполним счета учета
	СчетаУчетаВДокументах.ЗаполнитьПриПроведенииСчетаУчетаТабличнойЧасти("Товары", ТаблицаПоТоварам, СтруктураШапкиДокумента);
	СчетаУчетаВДокументах.ЗаполнитьПриПроведенииСчетаУчетаТабличнойЧасти("Услуги", ТаблицаПоУслугам, СтруктураШапкиДокумента);
	
	БухгалтерскийУчетРасчетовСКонтрагентами.ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(ТаблицаПоТоварам, СтруктураШапкиДокумента, Истина);
	БухгалтерскийУчетРасчетовСКонтрагентами.ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(ТаблицаПоУслугам, СтруктураШапкиДокумента, Истина);
	
КонецПроцедуры // СформироватьТаблицыДокумента()


// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента)
	
	ТаблицаТоваров = РезультатЗапросаПоТоварам.Выгрузить();
	
	ТаблицаТоваров.Колонки.Добавить("СуммаБезНДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("ДокументПартии", Новый ОписаниеТипов("ДокументСсылка.РеализацияТоваровУслуг"));
	
	Для Каждого СтрокаТаблицы Из ТаблицаТоваров Цикл
		СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.Сумма - ?(УчитыватьНДС И СуммаВключаетНДС, СтрокаТаблицы.НДС, 0);
		СтрокаТаблицы.ДокументПартии = мДокументРеализацииСсылка;
	КонецЦикла;
	
	// Вызываем отдельные процедуры подготовки для регл. и упр. учета
	ПодготовитьТаблицуТоваровРегл(ТаблицаТоваров, СтруктураШапкиДокумента);
	ПодготовитьТаблицуТоваровУпр(ТаблицаТоваров,  СтруктураШапкиДокумента);
	
	Возврат ТаблицаТоваров;
	
КонецФункции // ПодготовитьТаблицуТоваров()

Процедура ПодготовитьТаблицуТоваровУпр(ТаблицаТоваров, СтруктураШапкиДокумента)
	
	ТаблицаТоваров.Колонки.Добавить("СуммаПродажная", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	
	ЕстьРозничныйСклад = УправлениеРозничнойТорговлей.ОпределитьНаличиеРозничногоСклада(ТаблицаТоваров, "Склад", "ВидСклада");
	
	Если ЕстьРозничныйСклад Тогда
		
		ТаблицаПоЦенам = УправлениеРозничнойТорговлей.СформироватьЗапросПоПродажнымЦенам(
			Дата,
			ТаблицаТоваров.ВыгрузитьКолонку("Склад"),
			ТаблицаТоваров.ВыгрузитьКолонку("Номенклатура")).Выгрузить();
		
		УправлениеРозничнойТорговлей.ЗаполнитьКолонкуСуммаПродажная(ТаблицаТоваров, ТаблицаПоЦенам, "ВидСклада");
		
	КонецЕсли;
	
	// Надо добавить колонки "СуммаБезНДС".
	ТаблицаТоваров.Колонки.Добавить("ЦенаВВалютеЗаказа"  , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаВзаиморасчетов", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТаблицаТоваров.Колонки.Добавить("Стоимость"          , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаУпр"           , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТаблицаТоваров.Колонки.Добавить("СтоимостьБезСкидок" , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаСНДСДок"       , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТаблицаТоваров.Колонки.Добавить("НДСУпр"             , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	
	
	// Надо заполнить новые колонки.
	Для Каждого СтрокаТаблицы Из ТаблицаТоваров Цикл
		
		СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.Сумма - ?(УчитыватьНДС И СуммаВключаетНДС, СтрокаТаблицы.НДС, 0);
		
		// Считаем, что реализация выписывается с теми же флагами учета НДС, что и Заказ.
		Если СтруктураШапкиДокумента.НужнаЦенаЗаказа Тогда
			СтрокаТаблицы.ЦенаВВалютеЗаказа = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
				СтрокаТаблицы.Цена, 
				ВалютаДокумента, СтруктураШапкиДокумента.ВалютаЗаказа,
				СтруктураШапкиДокумента.КурсДокумента, СтруктураШапкиДокумента.КурсЗаказа,
				СтруктураШапкиДокумента.КратностьДокумента, СтруктураШапкиДокумента.КратностьЗаказа);
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Количество) Тогда
			СтрокаТаблицы.Количество = 0;
		КонецЕсли;
		
		СтрокаТаблицы.СтоимостьБезСкидок = СтрокаТаблицы.Цена * СтрокаТаблицы.КоличествоДок;
		
		Если УчитыватьНДС И НЕ СуммаВключаетНДС Тогда
			СтрокаТаблицы.СтоимостьБезСкидок = 
				СтрокаТаблицы.СтоимостьБезСкидок 
				+ УчетНДС.РассчитатьСуммуНДС(
					СтрокаТаблицы.СтоимостьБезСкидок, 
					УчитыватьНДС,
					СуммаВключаетНДС,
					УчетНДС.ПолучитьСтавкуНДС(СтрокаТаблицы.СтавкаНДС));
		КонецЕсли;
		
		СтрокаТаблицы.Стоимость 		  = СтрокаТаблицы.СуммаБезНДС + СтрокаТаблицы.НДС;
		СтрокаТаблицы.СуммаВзаиморасчетов = СтрокаТаблицы.СуммаБезНДС + СтрокаТаблицы.НДС;
		
		СтрокаТаблицы.СуммаУпр = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
			СтрокаТаблицы.СуммаВзаиморасчетов, 
			ВалютаДокумента, СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
			СтруктураШапкиДокумента.КурсДокумента, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
			СтруктураШапкиДокумента.КратностьДокумента, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
		
		СтрокаТаблицы.СтоимостьБезСкидок = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
			СтрокаТаблицы.СтоимостьБезСкидок, 
			ВалютаДокумента, СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
			СтруктураШапкиДокумента.КурсДокумента, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
			СтруктураШапкиДокумента.КратностьДокумента, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
		
		СтрокаТаблицы.СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
			СтрокаТаблицы.СуммаВзаиморасчетов, 
			ВалютаДокумента, СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
			СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов,
			СтруктураШапкиДокумента.КратностьДокумента, КратностьВзаиморасчетов);
		
		СтрокаТаблицы.Стоимость    = СтрокаТаблицы.СуммаУпр;
		СтрокаТаблицы.СуммаСНДСДок = СтрокаТаблицы.СуммаДок + ?(УчитыватьНДС И НЕ СуммаВключаетНДС, СтрокаТаблицы.НДС, 0);
		
		// Суммы пересчитаем в валюту упр. учета
		СтрокаТаблицы.СуммаБезНДС = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
			СтрокаТаблицы.СуммаБезНДС, 
			ВалютаДокумента, СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
			СтруктураШапкиДокумента.КурсДокумента, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
			СтруктураШапкиДокумента.КратностьДокумента, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
		
		СтрокаТаблицы.НДСУпр = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
			СтрокаТаблицы.НДС, 
			ВалютаДокумента, СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
			СтруктураШапкиДокумента.КурсДокумента, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
			СтруктураШапкиДокумента.КратностьДокумента, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
		
	КонецЦикла;
	
КонецПроцедуры // ПодготовитьТаблицуТоваровУпр()

Процедура ПодготовитьТаблицуТоваровРегл(ТаблицаТоваров, СтруктураШапкиДокумента)
	
	ТаблицаТоваров.Колонки.Добавить("СуммаРегл",        Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("ПроводкаСумма",    Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("ПроводкаСуммаНДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	
	ВалютаРег = мВалютаРегламентированногоУчета;
	Данные    = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаРег, Дата);
	
	// Надо заполнить новые колонки.
	Для каждого СтрокаТаблицы Из ТаблицаТоваров Цикл
		
		НДС   = СтрокаТаблицы.НДС;
		Сумма = СтрокаТаблицы.СуммаБезНДС;
		
		// Суммы пересчитаем в валюту упр. учета
		Если СтруктураШапкиДокумента.ВалютаДокумента = ВалютаРег Тогда
			СтрокаТаблицы.ПроводкаСумма    = Сумма;
			СтрокаТаблицы.ПроводкаСуммаНДС = НДС;
			СтрокаТаблицы.СуммаРегл        = Сумма + НДС;
		Иначе
			
			СуммаДок = СтрокаТаблицы.Сумма + ?(СуммаВключаетНДС, 0, СтрокаТаблицы.НДС);
			
			СтрокаТаблицы.СуммаРегл = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
				СуммаДок, 
				СтруктураШапкиДокумента.ВалютаДокумента, ВалютаРег,
				СтруктураШапкиДокумента.КурсДокумента, Данные.Курс,
				СтруктураШапкиДокумента.КратностьДокумента, Данные.Кратность);
			
			НДС   = УчетНДС.РассчитатьСуммуНДС(СтрокаТаблицы.СуммаРегл, 
						УчитыватьНДС, СуммаВключаетНДС,
						УчетНДС.ПолучитьСтавкуНДС(СтрокаТаблицы.СтавкаНДС));
			Сумма = СтрокаТаблицы.СуммаРегл - НДС;
			
			СтрокаТаблицы.ПроводкаСумма    = Сумма;
			СтрокаТаблицы.ПроводкаСуммаНДС = НДС;
			
			СтрокаТаблицы.НДСИтоговый = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
				СтрокаТаблицы.НДСИтоговый, 
				СтруктураШапкиДокумента.ВалютаДокумента, ВалютаРег,
				СтруктураШапкиДокумента.КурсДокумента, Данные.Курс,
				СтруктураШапкиДокумента.КратностьДокумента, Данные.Кратность);
			СтрокаТаблицы.НДСДоИзм = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
				СтрокаТаблицы.НДСДоИзм, 
				СтруктураШапкиДокумента.ВалютаДокумента, ВалютаРег,
				СтруктураШапкиДокумента.КурсДокумента, Данные.Курс,
				СтруктураШапкиДокумента.КратностьДокумента, Данные.Кратность);
			СтрокаТаблицы.НДСДоКорр = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
				СтрокаТаблицы.НДСДоКорр, 
				СтруктураШапкиДокумента.ВалютаДокумента, ВалютаРег,
				СтруктураШапкиДокумента.КурсДокумента, Данные.Курс,
				СтруктураШапкиДокумента.КратностьДокумента, Данные.Кратность);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ПодготовитьТаблицуТоваровРегл()


// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуУслуг(РезультатЗапросаПоУслугам, СтруктураШапкиДокумента)
	
	ТаблицаУслуг = РезультатЗапросаПоУслугам.Выгрузить();
	
	ТаблицаУслуг.Колонки.Добавить("СуммаБезНДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	
	Для Каждого СтрокаТаблицы Из ТаблицаУслуг Цикл
		СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.Сумма - ?(УчитыватьНДС И СуммаВключаетНДС, СтрокаТаблицы.НДС, 0);
	КонецЦикла;
	
	// Вызываем отдельные процедуры подготовки для регл. и упр. учета
	ПодготовитьТаблицуУслугРегл(ТаблицаУслуг, СтруктураШапкиДокумента);
	ПодготовитьТаблицуУслугУпр(ТаблицаУслуг, СтруктураШапкиДокумента);
	
	Возврат ТаблицаУслуг;
	
КонецФункции // ПодготовитьТаблицуУслуг()

Процедура ПодготовитьТаблицуУслугУпр(ТаблицаУслуг, СтруктураШапкиДокумента)
	
	// Надо добавить нужные при проведении колонки.
	ТаблицаУслуг.Колонки.Добавить("ЦенаВВалютеЗаказа"   , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаУслуг.Колонки.Добавить("СуммаВзаиморасчетов" , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаУслуг.Колонки.Добавить("Стоимость"           , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаУслуг.Колонки.Добавить("СуммаУпр"            , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаУслуг.Колонки.Добавить("СтоимостьБезСкидок"  , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаУслуг.Колонки.Добавить("НДСУпр"              , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	
	// Надо заполнить новые колонки.
	Для Каждого СтрокаТаблицы Из ТаблицаУслуг Цикл
		
		// Счиатем, что реализация выписывается с теми же флагами учета НДС, что и Заказ.
		Если СтруктураШапкиДокумента.НужнаЦенаЗаказа Тогда
			СтрокаТаблицы.ЦенаВВалютеЗаказа = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
				СтрокаТаблицы.Цена, 
				ВалютаДокумента, СтруктураШапкиДокумента.ВалютаЗаказа,
				СтруктураШапкиДокумента.КурсДокумента, СтруктураШапкиДокумента.КурсЗаказа,
				СтруктураШапкиДокумента.КратностьДокумента, СтруктураШапкиДокумента.КратностьЗаказа);
		КонецЕсли;
		
		СтрокаТаблицы.СтоимостьБезСкидок = СтрокаТаблицы.Цена * СтрокаТаблицы.Количество;
		
		Если УчитыватьНДС И НЕ СуммаВключаетНДС Тогда
			СтрокаТаблицы.СтоимостьБезСкидок =
				СтрокаТаблицы.СтоимостьБезСкидок 
				+ УчетНДС.РассчитатьСуммуНДС(
					СтрокаТаблицы.СтоимостьБезСкидок,
					УчитыватьНДС,
					СуммаВключаетНДС,
					УчетНДС.ПолучитьСтавкуНДС(СтрокаТаблицы.СтавкаНДС));
		КонецЕсли;
		
		СтрокаТаблицы.Стоимость = СтрокаТаблицы.СуммаБезНДС + СтрокаТаблицы.НДС;
		
		СтрокаТаблицы.СтоимостьБезСкидок = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
			СтрокаТаблицы.СтоимостьБезСкидок, 
			ВалютаДокумента, СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
			СтруктураШапкиДокумента.КурсДокумента, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
			СтруктураШапкиДокумента.КратностьДокумента, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
		
		СтрокаТаблицы.СуммаВзаиморасчетов = СтрокаТаблицы.СуммаБезНДС + СтрокаТаблицы.НДС;
		
		СтрокаТаблицы.СуммаУпр = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
			СтрокаТаблицы.СуммаВзаиморасчетов, 
			ВалютаДокумента, СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
			СтруктураШапкиДокумента.КурсДокумента, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
			СтруктураШапкиДокумента.КратностьДокумента, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
		
		СтрокаТаблицы.СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
			СтрокаТаблицы.СуммаВзаиморасчетов, 
			ВалютаДокумента, СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
			СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов,
			СтруктураШапкиДокумента.КратностьДокумента, КратностьВзаиморасчетов);
		
		// Суммы пересчитаем в валюту упр. учета
		СтрокаТаблицы.СуммаБезНДС = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
			СтрокаТаблицы.СуммаБезНДС, 
			ВалютаДокумента, СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
			СтруктураШапкиДокумента.КурсДокумента, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
			СтруктураШапкиДокумента.КратностьДокумента, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
		
		СтрокаТаблицы.НДСУпр = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
			СтрокаТаблицы.НДС, 
			ВалютаДокумента, СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
			СтруктураШапкиДокумента.КурсДокумента, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
			СтруктураШапкиДокумента.КратностьДокумента, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
		
		СтрокаТаблицы.Стоимость = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
			СтрокаТаблицы.Стоимость, 
			ВалютаДокумента, СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
			СтруктураШапкиДокумента.КурсДокумента, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
			СтруктураШапкиДокумента.КратностьДокумента, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
		
	КонецЦикла;
	
КонецПроцедуры // ПодготовитьТаблицуУслугУпр()

Процедура ПодготовитьТаблицуУслугРегл(ТаблицаУслуг, СтруктураШапкиДокумента)
	
	ТаблицаУслуг.Колонки.Добавить("СуммаРегл", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	
	ВалютаРег = мВалютаРегламентированногоУчета;
	Данные    = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаРег, Дата);
	
	// Надо заполнить новые колонки.
	Для Каждого СтрокаТаблицы Из ТаблицаУслуг Цикл
		
		НДС   = СтрокаТаблицы.НДС;
		Сумма = СтрокаТаблицы.СуммаБезНДС;
		
		// Суммы пересчитаем в валюту упр. учета
		Если СтруктураШапкиДокумента.ВалютаДокумента = ВалютаРег Тогда
			
			СтрокаТаблицы.СуммаРегл  = Сумма + НДС;
			
		Иначе
			
			СуммаДок = СтрокаТаблицы.Сумма + ?(СуммаВключаетНДС, 0, СтрокаТаблицы.НДС);
			
			СтрокаТаблицы.СуммаРегл = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
				СуммаДок, 
				СтруктураШапкиДокумента.ВалютаДокумента, ВалютаРег,
				СтруктураШапкиДокумента.КурсДокумента, Данные.Курс,
				СтруктураШапкиДокумента.КратностьДокумента,Данные.Кратность);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ПодготовитьТаблицуУслугРегл()


// Функция возвращает таблицу значений, содержащую строки, 
// в которых заполнено значение хотя бы в одной из проверяемых колонок
// 
// Параметры:
// 	ИсходнаяТаблица - ТаблицаЗначений -  таблица, из которой необходимо отобрать строки
// 	СписокКолонокДляПроверки - Строка - Список колонок для проверки заполнения значений
// 
// Возвращаемое значение:
// 	Результат - ТаблицаЗначений - результат отбора
//
Функция ОтобратьСтрокиСЗаполненнымиЗначениямиВКолонках(ИсходнаяТаблица, СписокКолонокДляПроверки)
	
	Результат = ИсходнаяТаблица.СкопироватьКолонки();
	
	КолонкиДляПроверки = Новый Структура(СписокКолонокДляПроверки);
	
	Для Каждого СтрокаТаблицы Из ИсходнаяТаблица Цикл
		
		Для Каждого Колонка Из КолонкиДляПроверки Цикл
			
			Если ИсходнаяТаблица.Колонки.Найти(Колонка.Ключ) <> Неопределено 
			 И ЗначениеЗаполнено(СтрокаТаблицы[Колонка.Ключ]) Тогда
				
				// Значение в колонке заполнено. Копируем строку в таблицу Результат
				НоваяСтрока = Результат.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
				  
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// По результату запроса по шапке документа формируем движения по регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары,
//  ТаблицаПоУслугам          - таблица значений, содержащая данные для проведения и проверки ТЧ "Услуги",
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, 
				ТаблицаПоТоварам, ТаблицаПоУслугам, ТаблицаПоВзаиморасчетам, ТаблицаПоРасчетам, ТаблицаТоваровДляУчетаЗатрат, Заголовок, Отказ)
				
	ТаблицаПоКомплектам = УправлениеЗапасами.СформироватьТаблицуКомплектующих(ТаблицаПоТоварам, ЭтотОбъект);
	СчетаУчетаВДокументах.ЗаполнитьИПроверитьЗаполнениеСчетовУчетаТабличнойЧасти("СоставНабора", ТаблицаПоКомплектам, СтруктураШапкиДокумента, Отказ, Заголовок);
	
	ДвиженияПоРегистрамУпр(РежимПроведения, СтруктураШапкиДокумента,
		ТаблицаПоТоварам, ТаблицаПоКомплектам, ТаблицаПоУслугам, ТаблицаПоВзаиморасчетам, ТаблицаПоРасчетам, Отказ, Заголовок);
	
	ДвиженияПоРегиструТоварыОрганизаций(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоКомплектам, ТаблицаПоУслугам, Отказ, Заголовок);
	
	ДвиженияПоРегистрамОперативныхВзаиморасчетов(РежимПроведения, ТаблицаПоВзаиморасчетам, Отказ, Заголовок, СтруктураШапкиДокумента);
	
	ДвиженияПоРегиструСписанныеТовары(СтруктураШапкиДокумента, ТаблицаПоКомплектам, Отказ, Заголовок);
	
	Если ТаблицаПоКомплектам.Количество() > 0
	 И (НЕ мИспользоватьРасширеннуюАналитику
	 	ИЛИ мДатаНачалаИспользованияРасширеннойАналитики > СтруктураШапкиДокумента.Дата) Тогда
		УправлениеЗапасами.ЗарегистрироватьДокументВПоследовательностяхПартионногоУчета(ЭтотОбъект, Дата, СтруктураШапкиДокумента.Организация,ОтражатьВУправленческомУчете,СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете,СтруктураШапкиДокумента.ОтражатьВНалоговомУчете,СтруктураШапкиДокумента.СпособВеденияПартионногоУчетаПоОрганизации);
	КонецЕсли;
	
	// Проводки формируются и в модуле документа, и при списании партий
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете
	 И мПараметрыПартионногоУчета.СписыватьПартииПриПроведенииДокументовБух Тогда
		Движения.Хозрасчетный.Записать();
	КонецЕсли;
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете
	 И мПараметрыПартионногоУчета.СписыватьПартииПриПроведенииДокументовНал Тогда
		Движения.Налоговый.Записать();
	КонецЕсли;
	
	УправлениеЗапасамиПартионныйУчет.ДвижениеПартийТоваров(Ссылка, Движения.СписанныеТовары.Выгрузить());
	
	ДвиженияПоРегистрамРегл(РежимПроведения, СтруктураШапкиДокумента, 
		ТаблицаПоТоварам, ТаблицаПоУслугам, ТаблицаПоВзаиморасчетам, ТаблицаТоваровДляУчетаЗатрат, Отказ, Заголовок);
	
	Если ТаблицаПоКомплектам.Найти(Перечисления.ТипыНоменклатуры.Комплект, "ТипНоменклатуры") <> Неопределено Тогда
		ДополнительныеСвойства.СтруктураТабличныхЧастей.Вставить("ТаблицаПоКомплектам", ТаблицаПоКомплектам);
	КонецЕсли;	
	
КонецПроцедуры // ДвиженияПоРегистрам()

// ДВИЖЕНИЯ ПО РЕГИСТРАМ УПР. УЧЕТА

// По результату запроса по шапке документа формируем движения по регистрам для целей упр. учета.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары,
//  ТаблицаПоУслугам          - таблица значений, содержащая данные для проведения и проверки ТЧ "Услуги",
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрамУпр(РежимПроведения, СтруктураШапкиДокумента, 
			ТаблицаПоТоварам, ТаблицаПоКомплектам, ТаблицаПоУслугам, 
			ТаблицаПоВзаиморасчетам, ТаблицаПоРасчетам, Отказ, Заголовок)
	
	Если НЕ СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		Возврат;
	КонецЕсли;
	
	УправлениеВзаиморасчетами.ВыполнитьДвиженияПоРегистрамУпрВзаиморасчетов(
		ЭтотОбъект, СтруктураШапкиДокумента, мСтруктураПараметровВзаиморасчетов, 
		ОтобратьСтрокиСЗаполненнымиЗначениямиВКолонках(ТаблицаПоВзаиморасчетам, "СуммаВзаиморасчетов,СуммаУпр"),
		ОтобратьСтрокиСЗаполненнымиЗначениямиВКолонках(ТаблицаПоРасчетам, "СуммаВзаиморасчетов,СуммаУпр"), 
		ВидДвиженияНакопления.Приход, Отказ, Заголовок);
	
	Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда
		
		// СУММА ПО РЕГИСТРУ ПродажиПоДисконтнымКартам.
		Если ЭтоКорректировкаРТиУ()
		 И СуммаДокумента - ДокументРеализации.СуммаДокумента <> 0
		 И ЗначениеЗаполнено(СтруктураШапкиДокумента.ДисконтнаяКарта) Тогда
			
			НаборДвижений 	= Движения.ПродажиПоДисконтнымКартам;
			ТаблицаДвижений = НаборДвижений.Выгрузить();
			
			// Заполним таблицу движений.
			СтрокаДвижений = ТаблицаДвижений.Добавить();
			СтрокаДвижений.ДисконтнаяКарта 			= СтруктураШапкиДокумента.ДисконтнаяКарта;
			СтрокаДвижений.ВладелецДисконтнойКарты 	= СтруктураШапкиДокумента.Контрагент;
			СтрокаДвижений.Сумма					=
				МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаДокумента - ДокументРеализации.СуммаДокумента, ВалютаДокумента,
					СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
					СтруктураШапкиДокумента.КурсДокумента,
					СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
					СтруктураШапкиДокумента.КратностьДокумента,
					СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
			
			НаборДвижений.мПериод          			= Дата;
			НаборДвижений.мТаблицаДвижений 			= ТаблицаДвижений;
			
			Если НЕ Отказ Тогда
				НаборДвижений.ВыполнитьДвижения();
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
		
	Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда
		
		// ТОВАРЫ И УСЛУГИ ПО РЕГИСТРУ Продажи.
		КопияТовары = ОтобратьСтрокиСЗаполненнымиЗначениямиВКолонках(ТаблицаПоТоварам, "Количество,Стоимость,НДС");
		КопияУслуги = ОтобратьСтрокиСЗаполненнымиЗначениямиВКолонках(ТаблицаПоУслугам, "Количество,Стоимость,НДС");
		
		ТабИменТовары = Неопределено;
		ОбщегоНазначения.ПереименоватьКолонкуТаблицыЗначений(КопияТовары, ТабИменТовары, "НДС",    "НДСВрем");
		ОбщегоНазначения.ПереименоватьКолонкуТаблицыЗначений(КопияТовары, ТабИменТовары, "НДСУпр", "НДС");
		
		ТабИменУслуги = Неопределено;
		ОбщегоНазначения.ПереименоватьКолонкуТаблицыЗначений(КопияУслуги, ТабИменУслуги, "НДС",    "НДСВрем");
		ОбщегоНазначения.ПереименоватьКолонкуТаблицыЗначений(КопияУслуги, ТабИменУслуги, "НДСУпр", "НДС");
		
		Если СтруктураШапкиДокумента.ВедениеУчетаПоПроектам Тогда
			
			// В этом случае таблицы документа обрабатываются особым образом
			ТаблицаДвижений = Движения.Продажи.Выгрузить();
			ТаблицаДвижений.Очистить();
			
			ТаблицаДвиженийУслуги = ТаблицаДвижений.Скопировать();
			ТаблицаДвиженийТовары = ТаблицаДвижений.Скопировать();
			
			УправлениеПроектами.ОтразитьДвиженияПоПроектам(КопияУслуги, ТаблицаДвиженийУслуги, Проект, Дата, "Продажи");
			УправлениеПроектами.ОтразитьДвиженияПоПроектам(КопияТовары, ТаблицаДвиженийТовары, Проект, Дата, "Продажи");
			
			// Вставляем уже подготовленные таблицы движений
			ТаблицыДанныхДокумента = Новый Структура;
			ТаблицыДанныхДокумента.Вставить("ТаблицаПоТоварам", ТаблицаДвиженийТовары);
			ТаблицыДанныхДокумента.Вставить("ТаблицаПоУслугам", ТаблицаДвиженийУслуги);
			
		Иначе
			
			СтруктТаблицДокумента = Новый Структура;
			СтруктТаблицДокумента.Вставить("ТаблицаПоУслугам", КопияУслуги);
			СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", КопияТовары);
			
			ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(Движения.Продажи, СтруктТаблицДокумента);
			
		КонецЕсли;
		
		ИсходныйДокументРеализации = УчетНДС.ПолучитьИсправляемыйДокументРеализации(ДокументРеализации, Истина);
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ДоговорКонтрагента", ДоговорКонтрагента);
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Организация",        Организация);
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Контрагент",         Контрагент);
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ДокументПродажи",    ИсходныйДокументРеализации);
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Подразделение",      Подразделение);
		
		// Когда взаиморасчеты ведутся по счетам, поле заказ покупателя в таб.части будет пустое (нет типа Документ.СчетНаОплату)
		Если СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ЗаказПокупателя", СтруктураШапкиДокумента.Сделка);
		КонецЕсли;
		
		ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.Продажи, Неопределено, ТаблицыДанныхДокумента, Дата);
		
	КонецЕсли;
	
	// ТОВАРЫ ПО РЕГИСТРУ ТоварыНаСкладах и ТоварыВРознице.
	КопияТаблицаПоКомплектам = ОтобратьСтрокиСЗаполненнымиЗначениямиВКолонках(ТаблицаПоКомплектам, "Количество");
	КопияТаблицаПоКомплектам.Индексы.Добавить("ВидСклада");

	МассивКомплектыОпт = КопияТаблицаПоКомплектам.НайтиСтроки(Новый Структура("ВидСклада", Перечисления.ВидыСкладов.Оптовый));
	
	Если НЕ Отказ И МассивКомплектыОпт.Количество() <> 0 Тогда
		
		ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(
			Движения.ТоварыНаСкладах,
			Новый Структура("КомплектыОпт", МассивКомплектыОпт));
		ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ТоварыНаСкладах, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);
		
	КонецЕсли;
	
	МассивКомплектыРозн = КопияТаблицаПоКомплектам.НайтиСтроки(Новый Структура("ВидСклада", Перечисления.ВидыСкладов.Розничный));
	
	Если НЕ Отказ И МассивКомплектыРозн.Количество() <> 0 Тогда
		
		ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(
			Движения.ТоварыВРознице,
			Новый Структура("КомплектыРозн", МассивКомплектыРозн));
		ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ТоварыВРознице, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);
		
	КонецЕсли;
	
	// ТОВАРЫ ПО РЕГИСТРУ ТоварыПереданные
	Если НЕ Отказ Тогда
		
		СтруктТаблицДокумента = Новый Структура;
		
		Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
		 
			КопияТовары = ОтобратьСтрокиСЗаполненнымиЗначениямиВКолонках(ТаблицаПоТоварам, "Количество,СуммаВзаиморасчетов");
			КопияТовары.Колонки.ЗаказПокупателя.Имя = "Сделка";
			
			СтруктТаблицДокумента.Вставить("ТаблицаТовары", КопияТовары);
			
		КонецЕсли;

		ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(Движения.ТоварыПереданные, СтруктТаблицДокумента);

		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ДоговорКонтрагента", ДоговорКонтрагента);
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Контрагент",         Контрагент);
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Организация",        Организация);
		
		Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПередачи", Перечисления.СтатусыПолученияПередачиТоваров.НаКомиссию,     "ТаблицаТовары");
		КонецЕсли;

		Если ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
			Для Каждого ТаблицаДанных Из ТаблицыДанныхДокумента Цикл
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Сделка", Сделка, ТаблицаДанных.Ключ);
			КонецЦикла;
		КонецЕсли;

		ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ТоварыПереданные, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокумента, Дата);

	КонецЕсли;

	// ТОВАР И УСЛУГИ ПО РЕГИСТРУ ЗаказыПокупателей.
	Если НЕ Отказ Тогда
		
		СтруктТаблицДокумента = Новый Структура(
			"ТаблицаПоТоварам, ТаблицаПоУслугам",
			ОтобратьСтрокиСЗаполненнымиЗначениямиВКолонках(ТаблицаПоТоварам, "Количество,СуммаВзаиморасчетов,СуммаУпр"),
			ОтобратьСтрокиСЗаполненнымиЗначениямиВКолонках(ТаблицаПоУслугам, "Количество,СуммаВзаиморасчетов,СуммаУпр"));
		
		ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(Движения.ЗаказыПокупателей, СтруктТаблицДокумента);
		ОбщегоНазначения.УдалитьСтрокиИзТаблицДокумента(ТаблицыДанныхДокумента, "ЗаказПокупателя");
		
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ДоговорКонтрагента", ДоговорКонтрагента);
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПартии",       Перечисления.СтатусыПартийТоваров.Купленный, "ТаблицаПоТоварам,ТаблицаПоУслугам");
		
		ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ЗаказыПокупателей, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);
		
	КонецЕсли;
	
	// ТОВАР ПО РЕГИСТРУ ТоварыВРезервеНаСкладах.
	Если НЕ Отказ Тогда
		
		ТабРезервТовары = ОтобратьСтрокиСЗаполненнымиЗначениямиВКолонках(ТаблицаПоКомплектам, "Количество");
		ТабРезервТовары.Колонки.ЗаказПокупателя.Имя = "ДокументРезерва";
		
		// Удалим записи таблицы в которых не надо списывать из резерва или не указан документ резерва.
		МассивНаУдаление = Новый Массив;
		Для Каждого СтрокаСписанияРезервов Из ТабРезервТовары Цикл
			Если СтрокаСписанияРезервов.СпособСписанияОстаткаТоваров <> Перечисления.СпособыСписанияОстаткаТоваров.ИзРезерва
			 ИЛИ НЕ ЗначениеЗаполнено(СтрокаСписанияРезервов.ДокументРезерва) Тогда
				МассивНаУдаление.Добавить(СтрокаСписанияРезервов);
			КонецЕсли;	
		КонецЦикла;	
		
		Для Каждого Элемент Из МассивНаУдаление Цикл
			ТабРезервТовары.Удалить(Элемент);
		КонецЦикла;	
		
		Если ТабРезервТовары.Количество() > 0 Тогда
			
			ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(
				Движения.ТоварыВРезервеНаСкладах,
				Новый Структура("ТаблицаПоТоварам", ТабРезервТовары));
			ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ТоварыВРезервеНаСкладах, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);
			
		КонецЕсли;	
		
	КонецЕсли;
	
КонецПроцедуры // ДвиженияПоРегистрамУпр()


Процедура ДвиженияПоРегиструТоварыОрганизаций(РежимПроведения, СтруктураШапкиДокумента, 
			ТаблицаПоТоварам, ТаблицаПоУслугам, Отказ, Заголовок)
	
	Если НЕ СтруктураШапкиДокумента.ОтражатьВРегламентированномУчете Тогда
		Возврат;
	КонецЕсли;
	
	// ТОВАРЫ ПО РЕГИСТРУ ТоварыОрганизаций.
	Если НЕ Отказ Тогда
		
		ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(
			Движения.ТоварыОрганизаций,
			Новый Структура("ТаблицаПоТоварам", ОтобратьСтрокиСЗаполненнымиЗначениямиВКолонках(ТаблицаПоТоварам, "Количество")));
		
		// Недостающие поля (качество заполнили в "ПередЗаписью" документа).
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Организация", Организация);
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Комиссионер", Неопределено);
		
		Если НЕ СтруктураШапкиДокумента.ВестиУчетТоваровОрганизацийВРазрезеСкладов Тогда
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Склад", Неопределено);
		КонецЕсли;
		
		ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ТоварыОрганизаций, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);
		
	КонецЕсли;
	
	// Перенесем остатки по организации на комиссионера.
	Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
		
		ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(
			Движения.ТоварыОрганизаций,
			Новый Структура("ТаблицаПоТоварам", ОтобратьСтрокиСЗаполненнымиЗначениямиВКолонках(ТаблицаПоТоварам, "Количество")));
		
		// Недостающие поля (качество заполнили в "ПередЗаписью" документа).
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Организация", Организация);
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Комиссионер", Контрагент);
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Склад",       Неопределено);
		
		ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ТоварыОрганизаций, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокумента, Дата);
		
	КонецЕсли;
	
КонецПроцедуры // ДвиженияПоРегиструТоварыОрганизаций()


// Формирует движения по регистру "Взаиморасчеты с контрагентами по документам расчетов",
// если по договору ведется учет в разрезе документов
//
Процедура ДвиженияПоРегистрамОперативныхВзаиморасчетов(РежимПроведения, ТаблицаПоВзаиморасчетам, Отказ, Заголовок, СтруктураШапкиДокумента)
	
	Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда
		
		УправлениеВзаиморасчетами.ОтражениеЗадолженностиВРегистреОперативныхРасчетовПоДокументам(
			СтруктураШапкиДокумента,
			ТаблицаПоВзаиморасчетам,
			Перечисления.ВидыРасчетовСКонтрагентами.ПоРеализации,
			ВидДвиженияНакопления.Приход,
			Движения,
			Отказ,
			Заголовок);
		
 	КонецЕсли;
 	
КонецПроцедуры


// Формирование движений по регистру "Списанные товары".
//
Процедура ДвиженияПоРегиструСписанныеТовары(СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок);
	
	// ТОВАРЫ ПО РЕГИСТРУ СписанныеТовары.
	НаборДвижений 	= Движения.СписанныеТовары;
	
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	ТаблицаДвижений.Очистить();
	
	КопияТаблицаПоТоварам = ТаблицаПоТоварам.Скопировать();
	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(
		УправлениеЗапасами.ПолучитьТаблицуСобственныхТоваров(СтруктураШапкиДокумента, КопияТаблицаПоТоварам),
		ТаблицаДвижений,
		Истина);
	
	// Недостающие поля.
	Для Каждого Строка Из ТаблицаДвижений Цикл
		
		Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
			
			Строка.ДоговорКонтрагента 	= СтруктураШапкиДокумента.ДоговорКонтрагента;
			Строка.СтатусПередачи 		= Перечисления.СтатусыПолученияПередачиТоваров.НаКомиссию;
			Строка.ДокументПередачи 	= СтруктураШапкиДокумента.Ссылка;
			
			Строка.КодОперацииПартииТоваров = ?(Строка.Количество < 0, 
				Перечисления.КодыОперацийПартииТоваров.ВозвратОтКомиссионера, Перечисления.КодыОперацийПартииТоваров.ПередачаНаКомиссию);
			
		ИначеЕсли СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда
			
			Строка.КодОперацииПартииТоваров = ?(Строка.Количество < 0,
				Перечисления.КодыОперацийПартииТоваров.ВозвратОтПокупателя, Перечисления.КодыОперацийПартииТоваров.Реализация);
			
		КонецЕсли;
		
		// Корректировка на отрицательное количество в партионном учете будет обработана как возврат
		Если Строка.Количество < 0 Тогда
			Строка.Количество = -Строка.Количество;
		КонецЕсли;
		
	КонецЦикла;
	
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.ВидыТабличныхЧастей.Товары, 			"ВидТабличнойЧасти");
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.ВедениеУчетаПоПроектам,   "ВедениеУчетаПоПроектам");
	ТаблицаДвижений.ЗаполнитьЗначения(Дата,   											"Период");
	ТаблицаДвижений.ЗаполнитьЗначения(Ссылка, 											"Регистратор");
	ТаблицаДвижений.ЗаполнитьЗначения(Истина, 											"Активность");
	ТаблицаДвижений.ЗаполнитьЗначения(Справочники.Качество.Новый, 						"Качество");
	ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагента, 								"ДоговорКонтрагента");
	
	ЗаполнитьКолонкиРегистраСписанныеТоварыПоТоварамУпр(ТаблицаДвижений, СтруктураШапкиДокумента, КопияТаблицаПоТоварам);
	ЗаполнитьКолонкиРегистраСписанныеТоварыПоТоварамРегл(ТаблицаДвижений, СтруктураШапкиДокумента, КопияТаблицаПоТоварам);
	
	НаборДвижений.мПериод          = Дата;
	НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
	
	Если НЕ Отказ Тогда
		Движения.СписанныеТовары.ВыполнитьДвижения();
	КонецЕсли;
	
	Движения.СписанныеТовары.Записать(Истина);
	
КонецПроцедуры // ДвиженияПоРегиструСписанныеТовары()

Процедура ЗаполнитьКолонкиРегистраСписанныеТоварыПоТоварамУпр(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоТоварам)
	
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.Купленный, 		"ДопустимыйСтатус1");
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.Продукция, 		"ДопустимыйСтатус2");
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.НаКомиссию,		"ДопустимыйСтатус3");
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.ВозвратнаяТара,	"ДопустимыйСтатус4");
	ТаблицаДвижений.ЗаполнитьЗначения(Подразделение,									"Подразделение");
	ТаблицаДвижений.ЗаполнитьЗначения(ОтражатьВУправленческомУчете,						"ОтражатьВУправленческомУчете");
	
	// Данные для заполнения отчетов комитенту
	ТаблицаДвижений.ЗаполнитьЗначения(ВалютаДокумента, 									"ВалютаДокумента");
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.КурсДокумента,      		"КурсДокумента");
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.КратностьДокумента, 		"КратностьДокумента");
	
	Если СтруктураШапкиДокумента.ВедениеУчетаПоПроектам И ЗначениеЗаполнено(Проект) Тогда
		ТаблицаДвижений.ЗаполнитьЗначения(Проект, 										"Проект");
	КонецЕсли;
	
	Для Каждого Строка Из ТаблицаДвижений Цикл
		
		ЭтоВозврат = (Строка.КодОперацииПартииТоваров = Перечисления.КодыОперацийПартииТоваров.ВозвратОтКомиссионера
						ИЛИ Строка.КодОперацииПартииТоваров = Перечисления.КодыОперацийПартииТоваров.ВозвратОтПокупателя);
		
		СтрокаТЧ = ТаблицаПоТоварам.Получить(Строка.НомерСтроки);
		
		Строка.СуммаЗадолженности = ?(ЭтоВозврат, -СтрокаТЧ.СуммаСНДСДок, СтрокаТЧ.СуммаСНДСДок);
		
		Если СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
			Строка.ЗаказСписания = СтруктураШапкиДокумента.Сделка;		
		Иначе
			Строка.ЗаказСписания = СтрокаТЧ.ЗаказПокупателя;
		КонецЕсли;	
		
		// Если резервирование под заказ - заказ партии
		Если СтруктураШапкиДокумента.ОбособленныйУчетТоваровПоЗаказамПокупателей Тогда
			Строка.ЗаказПартии = СтрокаТЧ.ЗаказПокупателя;
		КонецЕсли;
		
		// Запишем номер строки табличной части Товары в измерение НомерСтрокиДокумента регистра СписанныеТовары.
		// Так можно поступить потому, что документ не предназначен для корректировки наборов, иначе в наборе записей были бы строки с одинаковыми измерениями.
		// Номер строки необходим для формирования корректировочных проводок при традиционном режиме учета затрат.
		// В общем случае так делать не требуется - можно использовать функцию ОбщегоНазначения.ПронумероватьСтрокиТаблицыЗначений
		Строка.НомерСтрокиДокумента = СтрокаТЧ.НомерСтроки;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьКолонкиРегистраСписанныеТоварыПоТоварамРегл(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоТоварам)
	
	Перем КэшПоСчетам;
	
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете, "ОтражатьВБухгалтерскомУчете");
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.ОтражатьВНалоговомУчете,     "ОтражатьВНалоговомУчете");
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация,                 "Организация");
	
	// Кор.Счет для начисления задолженности перед комитентом, если вдруг продадим комиссионный товар
	ТаблицаДвижений.ЗаполнитьЗначения(СчетУчетаРасчетовСКонтрагентом, 					   "КорСчетЗадолженностиБУ");
	
	Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда
		
		ТаблицаДвижений.ЗаполнитьЗначения(ПланыСчетов.Налоговый.ПоступлениеИВыбытиеИмуществаРаботУслугПрав, "КорСчетНУ");
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.УсловияПоступленияИВыбытияИмущества.ЗаПлату, 		"КорСубконтоНУ1");
		
		Если НЕ СтруктураШапкиДокумента.Свойство("КэшПоСчетам", КэшПоСчетам) Тогда
			КэшПоСчетам = Новый Соответствие;
		КонецЕсли;
		
		Для Каждого Строка Из ТаблицаДвижений Цикл
			
			ЭтоВозврат = (Строка.КодОперацииПартииТоваров = Перечисления.КодыОперацийПартииТоваров.ВозвратОтКомиссионера)
				ИЛИ (Строка.КодОперацииПартииТоваров = Перечисления.КодыОперацийПартииТоваров.ВозвратОтПокупателя);
			
			СтрокаТЧ = ТаблицаПоТоварам.Получить(Строка.НомерСтроки);
			
			Строка.КорСчетБУ      = СтрокаТЧ.СчетРасходовБУ;
			Строка.КорСчетНУ      = СтрокаТЧ.СчетРасходовНУ;
			Строка.КорСубконтоБУ2 = СтрокаТЧ.СубконтоБУ;
			Строка.КорСубконтоНУ2 = СтрокаТЧ.СубконтоНУ;
			
			// Доход от продажи может облагаться ЕНВД (что определяется по бух. счету учета)
			Если ЗначениеЗаполнено(СтрокаТЧ.СчетДоходовБУ) Тогда
				
				СчетДоходовБУОтноситсяКДеятельностиЕНВД = КэшПоСчетам[СтрокаТЧ.СчетДоходовБУ];
				Если СчетДоходовБУОтноситсяКДеятельностиЕНВД = Неопределено Тогда
					СчетДоходовБУОтноситсяКДеятельностиЕНВД = НалоговыйУчетУСН.ОтноситсяКДеятельностиЕНВД(СтрокаТЧ.СчетДоходовБУ);
					КэшПоСчетам.Вставить(СтрокаТЧ.СчетДоходовБУ, СчетДоходовБУОтноситсяКДеятельностиЕНВД);
				КонецЕсли;
				
				Если СчетДоходовБУОтноситсяКДеятельностиЕНВД Тогда				
					// в этом случае товар списывается на счет расходов по ЕНВД
					Строка.КорСчетНУ = ПланыСчетов.Налоговый.РасходыПоДеятельностиЕНВД;
				КонецЕсли;
				
			КонецЕсли;
			
			// Принятые на комиссию товары не учитываются в налоговом учете:
			Если НЕ ЗначениеЗаполнено(СтрокаТЧ.СчетУчетаНУ) Тогда
				Строка.ОтражатьВНалоговомУчете = Ложь;
			Иначе
				Строка.ОтражатьВНалоговомУчете = СтруктураШапкиДокумента.ОтражатьВНалоговомУчете;
			КонецЕсли;
			
			Строка.ПринятыеКорСчетБУ		= СтрокаТЧ.ПринятыеСчетУчетаБУ;
			Строка.ПринятыеКорСчетНУ		= СтрокаТЧ.ПринятыеСчетУчетаНУ;
			
			Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН Тогда
				Строка.ОтражатьВНалоговомУчете = Истина;
				Строка.СчетУчетаНУ 			   = СтрокаТЧ.СчетУчетаБУ;
				Строка.ПринятыеСчетУчетаНУ 	   = СтрокаТЧ.ПринятыеСчетУчетаБУ;
				Строка.ПринятыеКорСчетНУ   	   = Строка.ПринятыеКорСчетБУ;
			КонецЕсли;
			
			// Субконто кор.счета для начисления задолженности перед комитентом, если вдруг продадим комиссионный товар
			Строка.КорСубконтоЗадолженностиБУ1 = Контрагент;
			Строка.КорСубконтоЗадолженностиБУ2 = ДоговорКонтрагента;
			
			Строка.СчетДоходовБУ 			   = СтрокаТЧ.СчетДоходовБУ;
			Строка.СчетДоходовНУ 			   = СтрокаТЧ.СчетДоходовНУ;
			
			Строка.СуммаЗадолженностиБУ 	   = ?(ЭтоВозврат, -(СтрокаТЧ.СуммаБезНДС + СтрокаТЧ.НДС), СтрокаТЧ.СуммаБезНДС + СтрокаТЧ.НДС);
			Строка.СуммаНДС 				   = ?(ЭтоВозврат, -СтрокаТЧ.НДС, СтрокаТЧ.НДС);
			
			Если НЕ СтруктураШапкиДокумента.ВалютаВзаиморасчетов = СтруктураШапкиДокумента.ВалютаРегламентированногоУчета Тогда
				
				Строка.КорВалютаЗадолженностиБУ        = СтруктураШапкиДокумента.ВалютаВзаиморасчетов;
				Строка.КорВалютнаяСуммаЗадолженностиБУ = СтрокаТЧ.СуммаВал;
				
				Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете и СтруктураШапкиДокумента.УчитыватьНДС Тогда
					Строка.КорВалютнаяСуммаНДСЗадолженностиБУ = СтрокаТЧ.НДСВал;
				КонецЕсли; 
				
			КонецЕсли;
			
		КонецЦикла;
		
		ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагента, "КорСубконтоБУ3");
		
	ИначеЕсли СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
		
		Для Каждого Строка Из ТаблицаДвижений Цикл
			
			СтрокаТЧ = ТаблицаПоТоварам.Получить(Строка.НомерСтроки);
			
			Строка.КорСчетБУ      	 = СтрокаТЧ.ПереданныеСобственныеБУ;
			Строка.КорСчетНУ      	 = СтрокаТЧ.ПереданныеСобственныеНУ;
			
			Строка.ПринятыеКорСчетБУ = СтрокаТЧ.ПереданныеПринятыеБУ;
			Строка.ПринятыеКорСчетНУ = СтрокаТЧ.ПереданныеПринятыеНУ;
			
			Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН Тогда
				Строка.ОтражатьВНалоговомУчете 	= Истина;
				Строка.СчетУчетаНУ 			   	= СтрокаТЧ.СчетУчетаБУ;
				Строка.КорСчетНУ   				= СтрокаТЧ.ПереданныеСобственныеБУ;
				Строка.ПринятыеСчетУчетаНУ 		= СтрокаТЧ.ПринятыеСчетУчетаБУ;
				Строка.ПринятыеКорСчетНУ 		= СтрокаТЧ.ПереданныеПринятыеБУ;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры 

// ДВИЖЕНИЯ ПО РЕГИСТРАМ РЕГЛ. УЧЕТА

Процедура ДвиженияПоРегистрамРегл(РежимПроведения, СтруктураШапкиДокумента, 
			ТаблицаПоТоварам, ТаблицаПоУслугам, ТаблицаПоВзаиморасчетам, ТаблицаТоваровДляУчетаЗатрат, Отказ, Заголовок)
	
	Если НЕ СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		Возврат;
	КонецЕсли;
	
	ПроводкиБУ = Движения.Хозрасчетный;
	ПроводкиНУ = Движения.Налоговый;
	ДатаДока   = Дата;
	ПрошлыйПериод = Год(СтруктураШапкиДокумента.ДокументРеализацииДата) < Год(СтруктураШапкиДокумента.Дата);
	
	Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда
		
		// Формирование движений по регистру "Учет продаж и себестоимости"
		РасширеннаяАналитикаУчета.СформироватьДвиженияПоПродажам(
			СтруктураШапкиДокумента,
			ТаблицаПоТоварам);
		РасширеннаяАналитикаУчета.СформироватьДвиженияПоПродажам(
			СтруктураШапкиДокумента,
			ТаблицаПоУслугам);
			
		Если мИспользоватьРасширеннуюАналитику И мДатаНачалаИспользованияРасширеннойАналитики < СтруктураШапкиДокумента.Дата Тогда
		//Формирование проводок
		Для Каждого СтрокаТЧ из ТаблицаПоТоварам Цикл
			ОтразитьВУчетеМПЗ 	= СтрокаТЧ.Количество <> 0;
			ТоварНаКомиссии 	= СтрокаТЧ.ПринадлежностьНоменклатуры = Перечисления.ПринадлежностьНоменклатуры.Принятый;
			
			БУ_Тек = (НЕ ПрошлыйПериод) ИЛИ (ПрошлыйПериод И СтруктураШапкиДокумента.ОтчетностьПодписана);
			НУ_Тек = (НЕ ПрошлыйПериод) ИЛИ СтрокаТЧ.СуммаБУ <= 0;
			
			Партия = Новый Структура("СуммаСписания, Количество", 0, СтрокаТЧ.Количество);
			
			Если (НЕ НУ_Тек) Тогда
				//Корректировка НУ прошлого периода с использованием счетов К
				Если НЕ ТоварНаКомиссии Тогда
					Если ОтразитьВУчетеМПЗ Тогда
						Документы.КорректировкаРеализации.ПодготовитьСтрокуТаблицыПоТоваров(СтруктураШапкиДокумента, ТаблицаТоваровДляУчетаЗатрат, СтрокаТЧ, СтруктураШапкиДокумента.ДокументРеализацииДата, "НУ", Ложь);
					КонецЕсли;
					Документы.КорректировкаРеализации.СформироватьПроводкиПоСобственнойВыручке(СтруктураШапкиДокумента, ПроводкиНУ, СтрокаТЧ, СтруктураШапкиДокумента.ДокументРеализацииДата, "НУ",  Ложь, Истина, Ложь);
					ФинРезультат = СтрокаТЧ.СуммаБУ - СтрокаТЧ.НДС;
					Документы.КорректировкаРеализации.СформироватьФинансовыйРезультат("НУ", ПроводкиНУ, СтруктураШапкиДокумента.ДокументРеализацииДата, СтруктураШапкиДокумента.Организация, ФинРезультат);
				КонецЕсли;
				//Возврат корректировки со счета К
				Если НЕ ТоварНаКомиссии Тогда
					Документы.КорректировкаРеализации.СформироватьПроводкиПоСобственнойВыручке(СтруктураШапкиДокумента, ПроводкиНУ, СтрокаТЧ, СтруктураШапкиДокумента.Дата, "НУ", Ложь, Ложь, Истина);
				КонецЕсли;
			КонецЕсли;
			Если (НЕ БУ_Тек) Тогда
				//Корректировка БУ прошлого периода с использованием счетов К
				Если НЕ ТоварНаКомиссии Тогда
					Если ОтразитьВУчетеМПЗ Тогда
						Документы.КорректировкаРеализации.ПодготовитьСтрокуТаблицыПоТоваров(СтруктураШапкиДокумента, ТаблицаТоваровДляУчетаЗатрат, СтрокаТЧ, СтруктураШапкиДокумента.ДокументРеализацииДата, "БУ", Ложь);
					КонецЕсли;
					Документы.КорректировкаРеализации.СформироватьПроводкиПоСобственнойВыручке(СтруктураШапкиДокумента, ПроводкиБУ, СтрокаТЧ, КонецГода(СтруктураШапкиДокумента.ДокументРеализацииДата), "БУ", Ложь, Истина, Ложь);
					Документы.КорректировкаРеализации.СформироватьПроводкиПоНДС(СтруктураШапкиДокумента, ПроводкиБУ, СтрокаТЧ, КонецГода(СтруктураШапкиДокумента.ДокументРеализацииДата), Ложь);
					ФинРезультат = СтрокаТЧ.СуммаБУ - СтрокаТЧ.НДС;
					Документы.КорректировкаРеализации.СформироватьФинансовыйРезультат("БУ", ПроводкиБУ, КонецГода(СтруктураШапкиДокумента.ДокументРеализацииДата), СтруктураШапкиДокумента.Организация, ФинРезультат);
				Иначе
					Документы.КорректировкаРеализации.СформироватьПроводкиПоВыручкеКомитента(СтруктураШапкиДокумента, ПроводкиБУ, СтрокаТЧ, КонецГода(СтруктураШапкиДокумента.ДокументРеализацииДата), Истина, Ложь);
				КонецЕсли;
				//Возврат корректировки со счета К
				Если НЕ ТоварНаКомиссии Тогда
					Документы.КорректировкаРеализации.СформироватьПроводкиПоСобственнойВыручке(СтруктураШапкиДокумента, ПроводкиБУ, СтрокаТЧ, СтруктураШапкиДокумента.Дата, "БУ", Ложь, Ложь, Истина);
				Иначе
					Документы.КорректировкаРеализации.СформироватьПроводкиПоВыручкеКомитента(СтруктураШапкиДокумента, ПроводкиБУ, СтрокаТЧ, СтруктураШапкиДокумента.Дата, Ложь, Истина);
				КонецЕсли;
			КонецЕсли;
			Если (НУ_Тек) Тогда
				//Коррктировка текущего периода
				Если НЕ ТоварНаКомиссии Тогда
					Если ОтразитьВУчетеМПЗ Тогда
						Документы.КорректировкаРеализации.ПодготовитьСтрокуТаблицыПоТоваров(СтруктураШапкиДокумента, ТаблицаТоваровДляУчетаЗатрат, СтрокаТЧ, СтруктураШапкиДокумента.Дата, "НУ", ПрошлыйПериод, НЕ БУ_Тек);
					КонецЕсли;
					Документы.КорректировкаРеализации.СформироватьПроводкиПоСобственнойВыручке(СтруктураШапкиДокумента, ПроводкиНУ, СтрокаТЧ, СтруктураШапкиДокумента.Дата,  "НУ", ПрошлыйПериод, Ложь, Ложь);
					Если НЕ БУ_Тек Тогда
						Документы.КорректировкаРеализации.СформироватьПроводкиПоСобственнойВыручке(СтруктураШапкиДокумента, ПроводкиНУ, СтрокаТЧ, СтруктураШапкиДокумента.Дата, "ПР", ПрошлыйПериод, Ложь, Ложь);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			Если (БУ_Тек) Тогда
				//Коррктировка текущего периода
				Если НЕ ТоварНаКомиссии Тогда
					Если ОтразитьВУчетеМПЗ Тогда
						Документы.КорректировкаРеализации.ПодготовитьСтрокуТаблицыПоТоваров(СтруктураШапкиДокумента, ТаблицаТоваровДляУчетаЗатрат, СтрокаТЧ, СтруктураШапкиДокумента.Дата, "БУ", ПрошлыйПериод, НЕ НУ_Тек);
					КонецЕсли;
					Документы.КорректировкаРеализации.СформироватьПроводкиПоСобственнойВыручке(СтруктураШапкиДокумента, ПроводкиБУ, СтрокаТЧ, СтруктураШапкиДокумента.Дата, "БУ", ПрошлыйПериод, Ложь, Ложь);
					Если НЕ НУ_Тек Тогда
						Документы.КорректировкаРеализации.СформироватьПроводкиПоСобственнойВыручке(СтруктураШапкиДокумента, ПроводкиНУ, СтрокаТЧ, СтруктураШапкиДокумента.Дата, "ПР", ПрошлыйПериод, Ложь, Ложь);
					КонецЕсли;
					Документы.КорректировкаРеализации.СформироватьПроводкиПоНДС(СтруктураШапкиДокумента, ПроводкиБУ, СтрокаТЧ, СтруктураШапкиДокумента.Дата, ПрошлыйПериод);
				Иначе
					Документы.КорректировкаРеализации.СформироватьПроводкиПоВыручкеКомитента(СтруктураШапкиДокумента, ПроводкиБУ, СтрокаТЧ, СтруктураШапкиДокумента.Дата, Ложь, Ложь);
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		КонецЕсли;
		
		Для Каждого СтрокаТЧ из ТаблицаПоУслугам Цикл
			
			БУ_Тек = (НЕ ПрошлыйПериод) ИЛИ (ПрошлыйПериод И СтруктураШапкиДокумента.ОтчетностьПодписана);
			НУ_Тек = (НЕ ПрошлыйПериод) ИЛИ СтрокаТЧ.СуммаБУ <= 0;
			
			Если (НЕ НУ_Тек) Тогда
				//Корректировка НУ прошлого периода с использованием счетов К
				Документы.КорректировкаРеализации.СформироватьПроводкиПоСобственнойВыручке(СтруктураШапкиДокумента, ПроводкиНУ, СтрокаТЧ, СтруктураШапкиДокумента.ДокументРеализацииДата, "НУ",  Ложь, Истина, Ложь);
				ФинРезультат = СтрокаТЧ.СуммаБУ - СтрокаТЧ.НДС;
				Документы.КорректировкаРеализации.СформироватьФинансовыйРезультат("НУ", ПроводкиНУ, СтруктураШапкиДокумента.ДокументРеализацииДата, СтруктураШапкиДокумента.Организация, ФинРезультат);
				//Возврат корректировки со счета К
				Документы.КорректировкаРеализации.СформироватьПроводкиПоСобственнойВыручке(СтруктураШапкиДокумента, ПроводкиНУ, СтрокаТЧ, СтруктураШапкиДокумента.Дата, "НУ", Ложь, Ложь, Истина);
			КонецЕсли;
			Если (НЕ БУ_Тек) Тогда
				//Корректировка БУ прошлого периода с использованием счетов К
				Документы.КорректировкаРеализации.СформироватьПроводкиПоСобственнойВыручке(СтруктураШапкиДокумента, ПроводкиБУ, СтрокаТЧ, КонецГода(СтруктураШапкиДокумента.ДокументРеализацииДата), "БУ", Ложь, Истина, Ложь);
				Документы.КорректировкаРеализации.СформироватьПроводкиПоНДС(СтруктураШапкиДокумента, ПроводкиБУ, СтрокаТЧ, КонецГода(СтруктураШапкиДокумента.ДокументРеализацииДата), Ложь);
				ФинРезультат = СтрокаТЧ.СуммаБУ - СтрокаТЧ.НДС;
				Документы.КорректировкаРеализации.СформироватьФинансовыйРезультат("БУ", ПроводкиБУ, КонецГода(СтруктураШапкиДокумента.ДокументРеализацииДата), СтруктураШапкиДокумента.Организация, ФинРезультат);
				//Возврат корректировки со счета К
				Документы.КорректировкаРеализации.СформироватьПроводкиПоСобственнойВыручке(СтруктураШапкиДокумента, ПроводкиБУ, СтрокаТЧ, СтруктураШапкиДокумента.Дата, "БУ", Ложь, Ложь, Истина);				
			КонецЕсли;
			Если (НУ_Тек) Тогда
				//Коррктировка текущего периода
				Документы.КорректировкаРеализации.СформироватьПроводкиПоСобственнойВыручке(СтруктураШапкиДокумента, ПроводкиНУ, СтрокаТЧ, СтруктураШапкиДокумента.Дата,  "НУ", ПрошлыйПериод, Ложь, Ложь);
				Если НЕ БУ_Тек Тогда
					Документы.КорректировкаРеализации.СформироватьПроводкиПоСобственнойВыручке(СтруктураШапкиДокумента, ПроводкиНУ, СтрокаТЧ, СтруктураШапкиДокумента.Дата, "ПР", ПрошлыйПериод, Ложь, Ложь);
				КонецЕсли;
			КонецЕсли;
			Если (БУ_Тек) Тогда
				//Коррктировка текущего периода
				Документы.КорректировкаРеализации.СформироватьПроводкиПоСобственнойВыручке(СтруктураШапкиДокумента, ПроводкиБУ, СтрокаТЧ, СтруктураШапкиДокумента.Дата, "БУ", ПрошлыйПериод, Ложь, Ложь);
				Если НЕ НУ_Тек Тогда
					Документы.КорректировкаРеализации.СформироватьПроводкиПоСобственнойВыручке(СтруктураШапкиДокумента, ПроводкиНУ, СтрокаТЧ, СтруктураШапкиДокумента.Дата, "ПР", ПрошлыйПериод, Ложь, Ложь);
				КонецЕсли;
				Документы.КорректировкаРеализации.СформироватьПроводкиПоНДС(СтруктураШапкиДокумента, ПроводкиБУ, СтрокаТЧ, СтруктураШапкиДокумента.Дата, ПрошлыйПериод);				
			КонецЕсли;
			
		КонецЦикла;
				
		/////////////////////////////////////////////////////////////////////
		//Проведение по взаиморасчетам
		//
		// Движения по взаиморасчетам
		
		СтруктураПараметровЗачетАванса = БухгалтерскийУчетРасчетовСКонтрагентами.ПодготовкаСтруктурыПараметровДляЗачетаАванса(Ссылка, мВалютаРегламентированногоУчета, Заголовок, , ТаблицаПоВзаиморасчетам, СтруктураШапкиДокумента);
		
		Если НЕ ПризнаватьЗачитыватьАванс Тогда										
			//Что бы аванс не зачитывался автоматически очистим счет учета авансов										
			СтруктураПараметровЗачетАванса.СчетУчетаРасчетовПоАвансам = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
		КонецЕсли;
		
		Если СтруктураПараметровЗачетАванса = Ложь тогда
			//Отказ       = Истина;
			СуммаАванса = 0;
		Иначе
			ДвиженияДляРегистраРасчетовПоРеализации =
				ПодготовитьТаблицуДвиженийДляРегистраРасчетовПоРеализации(
					СтруктураПараметровЗачетАванса,
					СтруктураШапкиДокумента,
					ТаблицаПоТоварам,
					ТаблицаПоУслугам);
			СуммаАванса =
				БухгалтерскийУчетРасчетовСКонтрагентами.ЗачетАванса(
					СтруктураПараметровЗачетАванса,
					ПроводкиБУ,
					мВалютаРегламентированногоУчета,
					РежимПроведения,
					ЭтотОбъект,
					ДвиженияДляРегистраРасчетовПоРеализации);
		КонецЕсли;
		
	КонецЕсли; //Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда
	
	ПроводкиБУ.Записать(Ложь);
	ПроводкиНУ.Записать(Ложь);
	
	Если НЕ (СтруктураПараметровЗачетАванса = Ложь ИЛИ НЕ ЗначениеЗаполнено(СтруктураПараметровЗачетАванса)) Тогда
		
		Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете тогда
			СтруктураПараметровЗачетАванса.Вставить("ПроводкиНУ", Движения.Налоговый);
		Конецесли;
				
		БухгалтерскийУчетРасчетовСКонтрагентами.РасчетыВУсловныхЕдиницахПриобретениеРеализация(
			СтруктураПараметровЗачетАванса, 
			мВалютаРегламентированногоУчета,
			РежимПроведения,
			ПроводкиБУ,
			ЭтотОбъект,
			Отказ,
			,
			Истина);
			
		ПроводкиБУ.Записать(Ложь);
		ПроводкиНУ.Записать(Ложь);
		
	Конецесли;
	
КонецПроцедуры // ДвиженияПоРегистрамРегл()

Функция ПодготовитьТаблицуДвиженийДляРегистраРасчетовПоРеализации(СтруктураПараметров, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугам)
	Перем Счет91, Счет90_03;
	
	Счет91 = ПланыСчетов.Хозрасчетный.ПрочиеДоходыИРасходы;
	Счет90_03 = ПланыСчетов.Хозрасчетный.Продажи_НДС;
	
	ОписаниеТипов_ВидыСубконтоХозрасчетные = Метаданные.ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Тип;				
	ТаблицаДвижений = новый ТаблицаЗначений();				
	
	ТаблицаДвижений.Колонки.Добавить("ТекущаяТаблица");
	
	ТаблицаДвижений.Колонки.Добавить("ЗаказПокупателя"		, Документы.ТипВсеСсылки());
	
	ТаблицаДвижений.Колонки.Добавить("ВидЦенности"			, Новый ОписаниеТипов("ПеречислениеСсылка.ВидыЦенностей"));
	ТаблицаДвижений.Колонки.Добавить("Номенклатура"			, Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаДвижений.Колонки.Добавить("СтавкаНДС"			, Новый ОписаниеТипов("ПеречислениеСсылка.СтавкиНДС"));
	
	ТаблицаДвижений.Колонки.Добавить("КоррСчет"				, Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаДвижений.Колонки.Добавить("СубконтоБУ"			, ОписаниеТипов_ВидыСубконтоХозрасчетные);
	
	ТаблицаДвижений.Колонки.Добавить("СчетУчетаНУ"			, Новый ОписаниеТипов("ПланСчетовСсылка.Налоговый"));
	ТаблицаДвижений.Колонки.Добавить("СубконтоНУ"			, ОписаниеТипов_ВидыСубконтоХозрасчетные);
	
	ТаблицаДвижений.Колонки.Добавить("СчетНДС"				, Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	
	ТаблицаДвижений.Колонки.Добавить("СуммаСНДС"			, Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаДвижений.Колонки.Добавить("СуммаНДС"				, Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	
	ТаблицаДвижений.Колонки.Добавить("СуммаВзаиморасчетов"	, Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	
	ТаблицаДвижений.Колонки.Добавить("КоррСубконто1"		, ОписаниеТипов_ВидыСубконтоХозрасчетные);
	ТаблицаДвижений.Колонки.Добавить("КоррСубконто2"		, ОписаниеТипов_ВидыСубконтоХозрасчетные);
	ТаблицаДвижений.Колонки.Добавить("КоррСубконто3"		, ОписаниеТипов_ВидыСубконтоХозрасчетные);
	
	ТаблицаДвижений.Колонки.Добавить("СубконтоНДС1"			, ОписаниеТипов_ВидыСубконтоХозрасчетные);
	ТаблицаДвижений.Колонки.Добавить("СубконтоНДС2"			, ОписаниеТипов_ВидыСубконтоХозрасчетные);
	ТаблицаДвижений.Колонки.Добавить("СубконтоНДС3"			, ОписаниеТипов_ВидыСубконтоХозрасчетные);
	
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете тогда
		
		ТаблицаДвижений.Колонки.Добавить("СубконтоНУ1"		, ОписаниеТипов_ВидыСубконтоХозрасчетные);
		ТаблицаДвижений.Колонки.Добавить("СубконтоНУ2"		, ОписаниеТипов_ВидыСубконтоХозрасчетные);
		ТаблицаДвижений.Колонки.Добавить("СубконтоНУ3"		, ОписаниеТипов_ВидыСубконтоХозрасчетные);
		
	КонецЕсли;
	
	ПереименованиеКолонокРезультирующейТаблицы = Новый Структура;
	ПереименованиеКолонокРезультирующейТаблицы.Вставить("КоррСчет", 	"СчетДоходовБУ");
	ПереименованиеКолонокРезультирующейТаблицы.Вставить("СчетУчетаНУ", 	"СчетДоходовНУ");
	ПереименованиеКолонокРезультирующейТаблицы.Вставить("СуммаНДС", 	"НДС");
	
	УчетНДС.ПереименованиеКолонок(ТаблицаДвижений, ПереименованиеКолонокРезультирующейТаблицы);
	
	НаборТаблиц = Новый Массив;
	НаборТаблиц.Добавить(ТаблицаПоТоварам);
	НаборТаблиц.Добавить(ТаблицаПоУслугам);
	
	Для Каждого ТекущаяТаблица Из НаборТаблиц Цикл
		
		Для Каждого СтрокаТаблицы Из ТекущаяТаблица Цикл
			
			СтрокаНовойТаблицы = ТаблицаДвижений.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаНовойТаблицы,СтрокаТаблицы);
			
			СтрокаНовойТаблицы.СчетНДС 				= ?(БухгалтерскийУчет.ЭтоСубсчет(СтрокаТаблицы.СчетРасходовБУ, Счет91),СтрокаТаблицы.СчетРасходовБУ, Счет90_03);
			СтрокаНовойТаблицы.СуммаСНДС 			= СтрокаТаблицы.СуммаБезНДС + СтрокаТаблицы.НДС;
			СтрокаНовойТаблицы.СуммаВзаиморасчетов 	= СтрокаТаблицы.СуммаБезНДСВал + СтрокаТаблицы.НДСВал;
			
			КоррСчет = СтрокаНовойТаблицы.СчетДоходовБУ;
			
			Для НомерСубконто =1 По КоррСчет.ВидыСубконто.Количество() Цикл
				ВидСубк = КоррСчет.ВидыСубконто[НомерСубконто-1].ВидСубконто;
				Если ВидСубк.ТипЗначения.СодержитТип(ТипЗнч(СтрокаНовойТаблицы.СубконтоБУ)) Тогда
					СтрокаНовойТаблицы["КоррСубконто"+НомерСубконто] = СтрокаНовойТаблицы.СубконтоБУ;
				ИначеЕсли ВидСубк.ТипЗначения.СодержитТип(ТипЗнч(СтрокаНовойТаблицы.СтавкаНДС)) тогда
					СтрокаНовойТаблицы["КоррСубконто"+НомерСубконто] = СтрокаНовойТаблицы.СтавкаНДС;
				Конецесли;
			КонецЦикла; 
			
			КоррСчет = СтрокаНовойТаблицы.СчетНДС;
			
			Для НомерСубконто =1 По КоррСчет.ВидыСубконто.Количество() Цикл
				ВидСубк = КоррСчет.ВидыСубконто[НомерСубконто-1].ВидСубконто;
				Если ВидСубк.ТипЗначения.СодержитТип(ТипЗнч(СтрокаНовойТаблицы.СубконтоБУ)) Тогда
					СтрокаНовойТаблицы["СубконтоНДС"+НомерСубконто] = СтрокаНовойТаблицы.СубконтоБУ;
				ИначеЕсли ВидСубк.ТипЗначения.СодержитТип(ТипЗнч(СтрокаНовойТаблицы.СтавкаНДС)) ТОгда
					СтрокаНовойТаблицы["СубконтоНДС"+НомерСубконто] = СтрокаНовойТаблицы.СтавкаНДС;
				Конецесли;
			КонецЦикла; 
			
			Если СтруктураПараметров.ОтражатьВНалоговомУчете тогда
				КоррСчет = СтрокаНовойТаблицы.СчетДоходовНУ;
				Для НомерСубконто =1 по КоррСчет.ВидыСубконто.Количество() Цикл
					ВидСубк = КоррСчет.ВидыСубконто[НомерСубконто-1].ВидСубконто;
					Если ВидСубк.ТипЗначения.СодержитТип(ТипЗнч(СтрокаНовойТаблицы.СубконтоБУ)) Тогда
						СтрокаНовойТаблицы["СубконтоНУ"+НомерСубконто] = СтрокаНовойТаблицы.СубконтоБУ;
					ИначеЕсли ВидСубк.ТипЗначения.СодержитТип(ТипЗнч(СтрокаНовойТаблицы.Номенклатура)) Тогда
						СтрокаНовойТаблицы["СубконтоНУ"+НомерСубконто] = СтрокаНовойТаблицы.Номенклатура;
					Конецесли;
				КонецЦикла; 
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла; 
	
	УчетНДС.ПереименованиеКолонок(ТаблицаДвижений, ПереименованиеКолонокРезультирующейТаблицы, Истина);
	
	ТаблицаДвижений.Колонки.ЗаказПокупателя.Имя = "Сделка";
	
	ЧисловыеКолонкиСтрокой   = "СуммаВзаиморасчетов, СуммаСНДС, СуммаНДС";
	ЧисловыеКолонкиСтруктура = Новый Структура(ЧисловыеКолонкиСтрокой);
	НеЧисловыеКолонкиСтрокой = "";
	
	Для Каждого Колонка Из ТаблицаДвижений.Колонки Цикл
		Если НЕ ЧисловыеКолонкиСтруктура.Свойство(Колонка.Имя) Тогда
			НеЧисловыеКолонкиСтрокой = НеЧисловыеКолонкиСтрокой + ", " + Колонка.Имя;	
		КонецЕсли;  
	КонецЦикла;
	
	Если СтруктураПараметров.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом Тогда
		ТаблицаДвижений.ЗаполнитьЗначения(Неопределено, 			  "Сделка");
	ИначеЕсли СтруктураПараметров.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
		ТаблицаДвижений.ЗаполнитьЗначения(СтруктураПараметров.Сделка, "Сделка");
	КонецЕсли;
	
	НеЧисловыеКолонкиСтрокой = Прав(НеЧисловыеКолонкиСтрокой,СтрДлина(НеЧисловыеКолонкиСтрокой)-2);
	
	ТаблицаДвижений.Свернуть(НеЧисловыеКолонкиСтрокой, ЧисловыеКолонкиСтрокой);
	
	Возврат ТаблицаДвижений;
	
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаЗаполнения(Основание)

	Если ТипЗнч(Основание) = Тип("Структура") Тогда
		
		Возврат;
		
	ИначеЕсли ЗначениеЗаполнено(Основание) Тогда
		
		ДокументСсылка 	  = УчетНДС.ПолучитьИсправляемыйДокументРеализации(Основание, Ложь);
		ДокументОснование = ПолучитьПоследнийКорректирующийДокумент(ДокументСсылка);
		
		#Если Клиент Тогда
		Если ЗначениеЗаполнено(ДокументОснование) И Основание <> ДокументОснование И Основание.Дата < ДокументОснование.Дата Тогда
			Если Вопрос("Для указанного документа существуют более поздние корректировки.
				|Использовать последнюю введенную корректировку?", РежимДиалогаВопрос.ДаНет) <> КодВозвратаДиалога.Да Тогда
					ДокументОснование = Основание;
			КонецЕсли;
		Иначе
			ДокументОснование = Основание;
		КонецЕсли;
		#КонецЕсли
		
	Иначе
		
		ДокументОснование = Основание;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДокументОснование) Тогда
		ДокументРеализации = ДокументОснование;
		Организация 	   = ДокументРеализации.Организация;
		РеализацияТоваровОблагаемыхНДСУПокупателя = ДокументРеализации.ДоговорКонтрагента.РеализацияТоваровОблагаемыхНДСУПокупателя;
	КонецЕсли;
	
	Дата				= НачалоДня(ТекущаяДата());
	КорректироватьБУиНУ = ДоступнаКорректировкаБУиНУ();
	
	Если ЗначениеЗаполнено(ДокументОснование) Тогда
		ЗаполнитьСвойстваШапки();
		ЗаполнитьПоДокументу();
	КонецЕсли;
	
	СуммаДокумента = УчетНДС.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Товары") + УчетНДС.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Услуги");
	
	Если ЭтоНовый() Тогда
		ПризнаватьЗачитыватьАванс = ДоступноПризнаватьЗачитыватьАванс();
	КонецЕсли;
	
КонецПроцедуры // ОбработкаЗаполнения()

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	мДокументРеализацииСсылка = УчетНДС.ПолучитьИсправляемыйДокументРеализации(ДокументРеализации, Истина);
	
	// Проверим флаги в шапке докмента
	Если КорректироватьБУиНУ И НЕ ОтражатьВУправленческомУчете И НЕ ОтражатьВБухгалтерскомУчете Тогда
		СтрокаСообщения = Нстр("ru = 'Документ должен принадлежать хотя бы одному из видов учета: ""Управленческий"" и (или)  ""Бухгалтерский"".'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения, ЭтотОбъект,,, Отказ);
	КонецЕсли;
	
	Если КорректироватьБУиНУ И НЕ ДоступнаКорректировкаБУиНУ() Тогда
		Если НЕ (мИспользоватьРасширеннуюАналитику И мДатаНачалаИспользованияРасширеннойАналитики <= Дата) Тогда
			СтрокаСообщения = Нстр("ru = 'Корректировка по упр. и регл. учету возможна только в режиме расширенной аналитики'");
		Иначе
			СтрокаСообщения = Нстр("ru = 'Для указанного основания корректировка по упр. и регл. учету не выполняется.'");
		КонецЕсли;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения, ЭтотОбъект,,, Отказ);
	КонецЕсли;
	
	// Единица измерения мест должна быть заполнена, если указано количество мест
	ОбработкаТабличныхЧастейСервер.ПроверитьЗаполненаЕдиницаИзмеренияМест(Товары, ЭтотОбъект, Отказ);
	
	// Проверим тип номенклатуры в ТЧ Товары
	ОписаниеТипаНоменклатуры = ПолучитьОписаниеТипаНоменклатурыПоОснованию();
	Для Каждого Строка Из Товары Цикл
		Если ЗначениеЗаполнено(Строка.Номенклатура)
		 И НЕ ОписаниеТипаНоменклатуры.СодержитТип(ТипЗнч(Строка.Номенклатура)) Тогда
			ТекстОшибки = НСтр("ru = 'Тип номенклатуры в строке ""%НомерСтроки%"" списка ""Товары"" не соответствует указанному основанию.'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НомерСтроки%", Строка.НомерСтроки);
			ОбщегоНазначения.СообщитьОбОшибке(ТекстОшибки, Отказ);
		КонецЕсли;
	КонецЦикла;
	
	// Скорректируем список проверяемых реквизитов документа
	НепроверяемыеРеквизиты = Новый Массив;
	
	Если НЕ КорректироватьБУиНУ Тогда
		НепроверяемыеРеквизиты.Добавить("Товары.Номенклатура");
		НепроверяемыеРеквизиты.Добавить("Услуги.Номенклатура");
	КонецЕсли;
	
	Если НЕ (КорректироватьБУиНУ И ЭтоКорректировкаРТиУ()) Тогда
		НепроверяемыеРеквизиты.Добавить("Товары.ЕдиницаИзмерения");
	 	НепроверяемыеРеквизиты.Добавить("Услуги.Содержание");
	КонецЕсли;
	
	Если НЕ УчитыватьНДС ИЛИ РеализацияТоваровОблагаемыхНДСУПокупателя Тогда
		НепроверяемыеРеквизиты.Добавить("Товары.СтавкаНДС");
		НепроверяемыеРеквизиты.Добавить("Услуги.СтавкаНДС");
	КонецЕсли;
	
	Для Каждого Реквизит Из НепроверяемыеРеквизиты Цикл
		НомерУдаляемогоЭлемента = ПроверяемыеРеквизиты.Найти(Реквизит);
		Если НомерУдаляемогоЭлемента <> Неопределено Тогда
			ПроверяемыеРеквизиты.Удалить(НомерУдаляемогоЭлемента);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Перем НайденныйСФ;

	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
			
	мУдалятьДвижения = НЕ ЭтоНовый();
	
	ЗаполнитьСвойстваШапки(Ложь);
	
	Если Услуги.Количество() > 0 И НЕ ВозможнаКорректировкаУслуг() Тогда
		Услуги.Очистить();
	КонецЕсли;
	
	Если Товары.Количество() > 0 И НЕ ВозможнаКорректировкаТоваров() Тогда
		Товары.Очистить();
	КонецЕсли;
	
	РеализацияТоваровОблагаемыхНДСУПокупателя = УчетНДС.РеализацияТоваровОблагаемыхНДСУПокупателя(
		Дата, ДоговорКонтрагента);

	// Проверка заполнения единицы измерения мест и количества мест
	ОбработкаТабличныхЧастей.ПриЗаписиПроверитьЕдиницуИзмеренияМест(Товары);
	ОбработкаТабличныхЧастей.ПриЗаписиПроверитьСтавкуНДС(ЭтотОбъект, Товары);
	ОбработкаТабличныхЧастей.ПриЗаписиПроверитьСтавкуНДС(ЭтотОбъект, Услуги);
	
	ЗаполнитьЗаказыВТЧ();
	ЗаполнитьСкладыВТЧ();
	ОбработатьСуммыДоКорректировки();
	
	КачествоНовый = Справочники.Качество.Новый;
	Для Каждого СтрокаТаблицы Из ЭтотОбъект.Товары Цикл
		Если СтрокаТаблицы.Качество <> КачествоНовый Тогда
			СтрокаТаблицы.Качество = КачествоНовый;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ЗаказПокупателя)
		 И СтрокаТаблицы.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.ИзРезерва Тогда
			СтрокаТаблицы.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.СоСклада;
		КонецЕсли;
		Если РеализацияТоваровОблагаемыхНДСУПокупателя Тогда
			СтрокаТаблицы.СтавкаНДС = Перечисления.СтавкиНДС.ПустаяСсылка();
			СтрокаТаблицы.СуммаНДС = 0;
		КонецЕсли;
	КонецЦикла;
	
	// Удаление неиспользуемых строк табличной части "Серийные номера".
	УчетСерийныхНомеров.УдалитьНеиспользуемыеСтрокиПодчиненнойТЧ(ЭтотОбъект, мПараметрыСвязиСтрокТЧ, "Товары");
	УчетСерийныхНомеров.УдалитьНеиспользуемыеСтрокиПодчиненнойТЧ(ЭтотОбъект, мПараметрыСвязиСтрокТЧ, "СоставНабора", "СерийныеНомераСоставНабора");
	
	// Посчитать суммы документа и записать ее в соответствующий реквизит шапки для показа в журналах
	СуммаДокумента = УчетНДС.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Товары") + УчетНДС.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Услуги");
	
	// Проверка счета-фактуры
	Если КорректироватьНДС Тогда
		УчетНДС.СинхронизацияПометкиНаУдалениеУСчетаФактуры(ЭтотОбъект, "СчетФактураВыданный");
	Иначе
		УчетНДС.УстановкаПометкиНаУдалениеУСчетаФактуры(ЭтотОбъект, "СчетФактураВыданный", Истина);
	КонецЕсли;
	
	ПризнаватьЗачитыватьАванс = ПризнаватьЗачитыватьАванс И ДоступноПризнаватьЗачитыватьАванс();
	
КонецПроцедуры // ПередЗаписью

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;

	УчетНДС.ПроверитьСоответствиеРеквизитовСчетаФактуры(ЭтотОбъект);
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Перем СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугам;
	Перем ТаблицаПоВзаиморасчетам, ТаблицаПоРасчетам, ТаблицаТоваровДляУчетаЗатрат;
	
	// Удалим старые движения документа
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, Истина, РежимПроведения);
	КонецЕсли;
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);	
	
	Если НЕ (КорректироватьБУиНУ ИЛИ КорректироватьНДС) Тогда
		Возврат;
	КонецЕсли;
	
	// Подготовим данные для проведения документа
	ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, РежимПроведения, Отказ);
	ПодготовитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента, Отказ);
	
	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Заголовок, Отказ);
	
	// Проверим допустимость для пользователя цен документа
	УправлениеДопПравамиПользователей.ПроверитьДопустимостьЦенОтпуска(ЭтотОбъект, "Товары", Отказ);
	УправлениеДопПравамиПользователей.ПроверитьДопустимостьЦенОтпуска(ЭтотОбъект, "Услуги", Отказ);
	
	Если Отказ Тогда 
		Возврат;
	КонецЕсли;
	
	//Сделаем переменные доступными из подписок на события
	ДополнительныеСвойства.Вставить("СтруктураШапкиДокумента",  СтруктураШапкиДокумента);
	ДополнительныеСвойства.Вставить("СтруктураТабличныхЧастей", Новый Структура);
	
	// Движения по регистрам упр. и рег учета формируем только если в документе установлен реквизит КорректироватьБУиНУ
	// Движения по регистрам учета НДС формируются отдельной обработкой
	Если СтруктураШапкиДокумента.КорректироватьБУиНУ Тогда
		
		// Подготовим данные табличных частей документа
		ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугам);
		
		// Проверим заполнение ТЧ
		ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Заголовок, Отказ);
		ПроверитьЗаполнениеТабличнойЧастиУслуги(ТаблицаПоУслугам, СтруктураШапкиДокумента, Заголовок, Отказ);
		
		//Проверим счета учета
		СчетаУчетаВДокументах.ПроверитьСчетаУчетаТабличнойЧасти("Товары", ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок);
		СчетаУчетаВДокументах.ПроверитьСчетаУчетаТабличнойЧасти("Услуги", ТаблицаПоУслугам, СтруктураШапкиДокумента, Отказ, Заголовок);
		
		//Проверим корректность указанных (заполненных) счетов учета
		ПроверитьЗаполнениеТабличнойЧастиТоварыРегл(ТаблицаПоТоварам, СтруктураШапкиДокумента, Заголовок, Отказ);
		
		мСтруктураПараметровВзаиморасчетов.Вставить(
			"СтруктураПодготовленныхТаблиц",
			Новый Структура("Товары, Услуги", ТаблицаПоТоварам, ТаблицаПоУслугам));
		
		УправлениеВзаиморасчетами.ПодготовитьТаблицыДляПроведенияПоВзаиморасчетам(
			ТаблицаПоВзаиморасчетам,
			ТаблицаПоРасчетам, 
			ЭтотОбъект,
			мСтруктураПараметровВзаиморасчетов,
			СтруктураШапкиДокумента, 
			Отказ,
			Заголовок);
		
		//Проверим на возможность проведения в БУ и НУ
		Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете ИЛИ СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
			УправлениеВзаиморасчетами.ПроверкаВозможностиПроведенияВ_БУ_НУ(
				ДоговорКонтрагента,
				СтруктураШапкиДокумента.ВалютаДокумента,
				СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете,
				СтруктураШапкиДокумента.ОтражатьВНалоговомУчете,
				мВалютаРегламентированногоУчета,
				Ложь,
				Отказ,
				Заголовок);
		КонецЕсли;
		
		ТаблицаТоваровДляУчетаЗатрат = ТаблицаПоТоварам.СкопироватьКолонки();
		
		// Движения по документу
		Если НЕ Отказ Тогда
			ДвиженияПоРегистрам(
				РежимПроведения, СтруктураШапкиДокумента,
				ТаблицаПоТоварам,ТаблицаПоУслугам, ТаблицаПоВзаиморасчетам, ТаблицаПоРасчетам, ТаблицаТоваровДляУчетаЗатрат,
				Заголовок, Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
	//Сделаем переменные доступными из подписок на события
	ДополнительныеСвойства.СтруктураТабличныхЧастей.Вставить("ТаблицаПоТоварам", ТаблицаТоваровДляУчетаЗатрат);
	ДополнительныеСвойства.СтруктураТабличныхЧастей.Вставить("ТаблицаПоТоварамДляКомиссии", ТаблицаПоТоварам);
	
КонецПроцедуры // ОбработкаПроведения()


////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мВалютаРегламентированногоУчета   			 = глЗначениеПеременной("ВалютаРегламентированногоУчета");
мИспользоватьРасширеннуюАналитику 			 = глЗначениеПеременной("ИспользоватьРасширеннуюАналитикуУчетаНоменклатурыИЗатрат");
мДатаНачалаИспользованияРасширеннойАналитики = глЗначениеПеременной("ДатаНачалаИспользованияРасширеннойАналитикиУчетаНоменклатурыИЗатрат");

мДокументРеализацииСсылка 					 = УчетНДС.ПолучитьИсправляемыйДокументРеализации(ДокументРеализации, Истина);

мПараметрыСвязиСтрокТЧ = Новый Соответствие;
мПараметрыСвязиСтрокТЧ.Вставить("Товары", 		Новый Структура("СвободныйКлюч, ФлагМодификации", Неопределено, Ложь));
мПараметрыСвязиСтрокТЧ.Вставить("СоставНабора", Новый Структура("СвободныйКлюч, ФлагМодификации", Неопределено, Ложь));

мСтруктураПараметровВзаиморасчетов = Новый Структура;
мСтруктураПараметровВзаиморасчетов.Вставить("СтруктураТабличныхЧастей", 	Новый Структура("Товары, Услуги"));
мСтруктураПараметровВзаиморасчетов.Вставить("Направление", 					"Реализация");
мСтруктураПараметровВзаиморасчетов.Вставить("ЕстьЗаказыВТабличныхЧастях", 	Истина);
мСтруктураПараметровВзаиморасчетов.Вставить("ИмяЗаказаВТабличныхЧастях", 	"ЗаказПокупателя");

мУказаниеСкладовВТЧ = Истина;
