Перем мУдалятьДвижения Экспорт;

// Строки, хранят реквизиты имеющие смысл только для бух. учета и упр. соответственно
// в случае если документ не отражается в каком-то виде учета, делаются невидимыми
Перем мСтрокаРеквизитыБухУчета Экспорт;
Перем мСтрокаРеквизитыУпрУчета Экспорт;
Перем мСтрокаРеквизитыНалУчета Экспорт;

Перем мУчетнаяПолитика; // Хранит параметры учетной политики на момент проведения документа
Перем мБазыКоэффициентов; 

Перем мРасчетПоПеределамВспомогательноеПроизводство;
Перем мРасчетПоПеределамОсновноеПроизводство;
Перем мВидыПодразделенийДляРасчетаПоПеределам;
Перем мВидыПодразделенийДляРасчетаПоПодразделениям;
Перем мТекНомПередела;     // Текущий номер передела
Перем мТабПеределовОбщая; // Таблица переделов

// Период построения запросов. равный началу и концу месяца, с включением границ
// Для виртуальных таблиц регистров используются границы,
// для таблиц движений регистров - даты
Перем мНачГраница;
Перем мКонГраница;
Перем мНачДата;
Перем мКонДата;

// Таблицы движений по регистрам
Перем мТаблицаДвиженийВыпуск;   		 // По регистру "ВыпускПродукции"           упр/бух
Перем мТаблицаДвиженийНЗП;   			 // По регистру "НезавершенноеПроизводство" упр/бух
Перем мТаблицаДвиженийЗатраты;           // По регистру "Затраты"                   упр/бух
Перем мТаблицаДвиженийЗатратыОбороты;    // По регистру "Затраты (обороты)"         упр
Перем мТаблицаДвиженийЗатратыНаВыпуск;   // По регистру "ЗатратыНаВыпускПродукции"  упр/бух
Перем мТаблицаДвиженийЗатратыНаВыпускНаработка; // По регистру "ЗатратыНаВыпускПродукцииНаработка"  упр/бух
Перем мТаблицаДвиженийБракВПроизводстве; // По регистру "БракВПроизводстве"  	   упр/бух
Перем мТаблицаДвиженийПартии;			 // По регистру партии товаров на складе
Перем мТаблицаДвиженийПродажиСебестоимость;	// По регитсру "Продажи себестоимость" упр.

// Наборы движений по регистрам
Перем мДвиженияВыпуск;                   // По регистру "ВыпускПродукции"           упр/бух
Перем мДвиженияНЗП;                      // По регистру "НезавершенноеПроизводство" упр/бух
Перем мДвиженияЗатраты;                  // По регистру "Затраты"                   упр/бух
Перем мДвиженияЗатратыОбороты;           // По регистру "Затраты (обороты)"         упр
Перем мДвиженияЗатратыНаВыпуск;          // По регистру "ЗатратыНаВыпускПродукции"  упр/бух
Перем мДвиженияЗатратыНаВыпускНаработка; // По регистру "ЗатратыНаВыпускПродукцииНаработка"  упр/бух
Перем мДвиженияБракВПроизводстве;        // По регистру "БракВПроизводстве"  	   упр/бух
Перем мДвиженияПартии;			         // По регистру партии товаров на складе
Перем мДвиженияПродажиСебестоимость;	 // По регитсру "Продажи себестоимость" упр.
Перем мДвиженияБазаРаспределенияЗатрат;  // По регистру сведений "База распределения затрат" (по всем видам учета)
Перем мОперация;                         // По регистру бухгалтерии "Хозрасчетный"
Перем мСуффиксИмениРегистра;             // Суффикс имени регистра. для бух. учета = "БухгалтерскийУчет"
								         // для упр. учета = "", для налог. учете = "НалоговыйУчет"
Перем мСуффиксСчета;                     // Суффикс счета. для бух. учета = "СчетУчетаБУ"
								         // для нал. учета = "СчетУчетаНУ"
										 
////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда
// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	Если ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда

		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
		
		Если ТабДокумент = Неопределено Тогда
			Возврат
		КонецЕсли; 
		
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект), Ссылка);

КонецПроцедуры // Печать

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

#КонецЕсли

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для определенного вида учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета() Экспорт
	
	мСтрокаРеквизитыБухУчета = "Организация, НадписьОрганизация";
	мСтрокаРеквизитыНалУчета = "";
	мСтрокаРеквизитыУпрУчета = "";
	
КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета()

// Процедура проверяет правильность заполнения реквизитов документа
//
Процедура ПроверкаРеквизитов(Отказ, Заголовок, СтруктураШапкиДокумента) Экспорт
	
	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета();
	
	РеквизитыШапки = "Организация";
	УправлениеЗатратами.НепроверятьРеквизитыПоТипуУчета(ЭтотОбъект, РеквизитыШапки, СтруктураШапкиДокумента, мСтрокаРеквизитыУпрУчета, мСтрокаРеквизитыБухУчета, мСтрокаРеквизитыНалУчета);
	
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, Новый Структура(РеквизитыШапки), Отказ, Заголовок);
	
КонецПроцедуры // ПроверкаРеквизитов()

// Процедура проверяет не были ли уже ранее выполенны действия, указанные в документе
//
Процедура ПроверитьСписокДействий(Отказ)
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ДокРасчетСебестоимости.ВыполняемоеДействие КАК Действие,
	|	ДокРасчетСебестоимости.Ссылка
	|ИЗ
	|	Документ.РасчетСебестоимостиВыпуска.ВыполняемыеДействия КАК ДокРасчетСебестоимости
	|ГДЕ
	|	ДокРасчетСебестоимости.Ссылка.Проведен
	|	И ДокРасчетСебестоимости.Ссылка.Ссылка <> &ТекДок
	|	И ДокРасчетСебестоимости.Ссылка.ОтражатьВБухгалтерскомУчете  = &ФлагБухУчет
	|	И ДокРасчетСебестоимости.Ссылка.ОтражатьВМеждународномУчете  = &ФлагМСФО
	|	И ДокРасчетСебестоимости.Ссылка.ОтражатьВНалоговомУчете      = &ФлагНалУчет
	|	И ДокРасчетСебестоимости.Ссылка.ОтражатьВУправленческомУчете = &ФлагУпрУчет
	|	И ДокРасчетСебестоимости.Ссылка.ПериодРегистрации            = &МесяцРасчета
	|	И ДокРасчетСебестоимости.ВыполняемоеДействие В(&МассивДействий)";
	
	Запрос = Новый Запрос;
	Если НЕ ОтражатьВУправленческомУчете Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|	И ДокРасчетСебестоимости.Ссылка.Организация = &Орг";
		Запрос.УстановитьПараметр( "Орг", Организация);
	КонецЕсли;
	
	МассивДействий = Новый Массив; // Массив действий которые нельзя выполнять дважды за расчетный период
	Если НЕ ВыполняемыеДействия.Найти( Перечисления.ВыполняемыеОперацииРасчетСебестоимостиВыпуска.РаспределениеПродукцииИЗатратПоПеределам, "ВыполняемоеДействие") = Неопределено Тогда
		МассивДействий.Добавить( Перечисления.ВыполняемыеОперацииРасчетСебестоимостиВыпуска.РаспределениеПродукцииИЗатратПоПеределам);
	КонецЕсли;
	
	Если МассивДействий.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос.УстановитьПараметр( "МассивДействий", МассивДействий);
	Запрос.УстановитьПараметр( "МесяцРасчета",   ПериодРегистрации);
	Запрос.УстановитьПараметр( "ТекДок",         Ссылка);
	Запрос.УстановитьПараметр( "ФлагБухУчет",    ОтражатьВБухгалтерскомУчете);
	Запрос.УстановитьПараметр( "ФлагНалУчет",    ОтражатьВНалоговомУчете);
	Запрос.УстановитьПараметр( "ФлагУпрУчет",    ОтражатьВУправленческомУчете);
	Запрос.УстановитьПараметр( "ФлагМСФО",       ОтражатьВМеждународномУчете);
	
	Запрос.Текст = ТекстЗапроса;
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Отказ = Истина;
#Если Клиент Тогда
		Обход = РезультатЗапроса.Выбрать();
		Пока Обход.Следующий() Цикл
			ОбщегоНазначения.Сообщение("Действие: """ + Обход.Действие + """ в расчетном периоде выполнено документом " + Обход.Ссылка, СтатусСообщения.Внимание);
		КонецЦикла;
#КонецЕсли
	КонецЕсли;
	
КонецПроцедуры // ПроверитьСписокДействий()

// Процедура заполняет табличную часть "Выполняемые действия".
//
Процедура ЗаполнитьВыполняемыеДействия(ПоКнопке = Ложь) Экспорт
	
	ВыполняемыеДействия.Очистить();
	
	МассивДействий = ПроцедурыРасчетаСебестоимостиВыпуска.ПолучитьМассивВыполняемыхДействий(ПериодРегистрации, Организация, ОтражатьВУправленческомУчете, ОтражатьВНалоговомУчете, ПоКнопке);
	
	Для Каждого ВыполняемоеДействие Из МассивДействий Цикл
		
		НоваяСтрока = ВыполняемыеДействия.Добавить();
		НоваяСтрока.ВыполняемоеДействие = ВыполняемоеДействие;
		
	КонецЦикла;
		
КонецПроцедуры // ЗаполнитьВыполняемыеДействия()

// Функция получения признака использования расширенной аналитики учета.
//
// Параметры:
//	ПолучитьНовоеЗначение - Булево - признак необходимости получения нового значения параметра
//
// Возвращаемое значение:
//	Булево - признак использования расширенной аналитики учета
//
Функция ПолучитьИспользованиеРасширеннойАналитики(
	ПолучитьНовоеЗначение = Ложь
	) Экспорт
	
	Перем ИспользоватьРасширеннуюАналитику;
	
	Если ПолучитьНовоеЗначение
	 ИЛИ Не ДополнительныеСвойства.Свойство("ИспользоватьРасширеннуюАналитику", ИспользоватьРасширеннуюАналитику)
	Тогда
		ИспользоватьРасширеннуюАналитику = глЗначениеПеременной("ИспользоватьРасширеннуюАналитикуУчетаНоменклатурыИЗатрат") 
			И (глЗначениеПеременной("ДатаНачалаИспользованияРасширеннойАналитикиУчетаНоменклатурыИЗатрат") <= ПериодРегистрации);
		ДополнительныеСвойства.Вставить("ИспользоватьРасширеннуюАналитику", ИспользоватьРасширеннуюАналитику);
	КонецЕсли;
	
	Возврат ИспользоватьРасширеннуюАналитику;
		
КонецФункции // ПолучитьИспользованиеРасширеннойАналитики()

// Функция получения режима использования расширенной аналитики учета.
//
// Параметры:
//	ПолучитьНовоеЗначение - Булево - признак необходимости получения нового значения параметра
//
// Возвращаемое значение:
//	Булево - признак использования расширенной аналитики учета
//
Функция ПолучитьРежимИспользованияРасширеннойАналитики(
	ПолучитьНовоеЗначение = Ложь
	) Экспорт
	
	Перем РежимИспользованияРасширеннойАналитики;
	
	Если ПолучитьНовоеЗначение
	 ИЛИ Не ДополнительныеСвойства.Свойство("РежимИспользованияРасширеннойАналитики", РежимИспользованияРасширеннойАналитики)
	Тогда
		РежимИспользованияРасширеннойАналитики = глЗначениеПеременной("РежимИспользованияРасширеннойАналитикиУчетаНоменклатурыИЗатрат");
		ДополнительныеСвойства.Вставить("РежимИспользованияРасширеннойАналитики", РежимИспользованияРасширеннойАналитики);
	КонецЕсли;
	
	Возврат РежимИспользованияРасширеннойАналитики;
		
КонецФункции // ПолучитьРежимИспользованияРасширеннойАналитики()

///////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ РАБОТЫ С ЕНВД И УСН

Процедура ДвиженияПоРегистрамУСНРегл(РежимПроведения, СтруктураШапкиДокумента,Отказ, Заголовок)
	
	Если НЕ СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН Тогда
		Возврат;
	КонецЕсли;
	
	НалоговыйУчетУСН.ДвиженияУСН(Ссылка, РежимПроведения);
		
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Процедура формирует структуру шапки документа и дополнительных полей.
//
// Параметры
//  СтруктураШапкиДокумента – Структура - Реквизиты документа "Расчет себестоимости"
//	Отказ - Булево - Признак отказа от проведения документа
//	Заголовок - Строка - Текст представления документа 
//
//
Процедура ПодготовитьСтруктуруШапкиДокумента(
	СтруктураШапкиДокумента, 
	Отказ, 
	Заголовок
	)
	
	// Период построения запросов
	мНачГраница = Новый Граница( НачалоМесяца(ПериодРегистрации), ВидГраницы.Включая);
	мКонГраница = Новый Граница( КонецМесяца(ПериодРегистрации), ВидГраницы.Включая);
	мНачДата    = НачалоМесяца(ПериодРегистрации);
	мКонДата    = КонецМесяца(ПериодРегистрации);

	ИспользоватьРасширеннуюАналитику = ПолучитьИспользованиеРасширеннойАналитики();
	
	Если ИспользоватьРасширеннуюАналитику Тогда
		// В режиме РА не используются параметры учетной политики
		// - мРасчетПоПеределамОсновноеПроизводство 
		// - мРасчетПоПеределамВспомогательноеПроизводство
		// Инициализируем булевые переменные.
		мРасчетПоПеределамОсновноеПроизводство        = Ложь;
		мРасчетПоПеределамВспомогательноеПроизводство = Ложь;
	Иначе
		Если мУчетнаяПолитика.СпособРасчетаСебестоимостиОсновногоПроизводства 
				= Перечисления.СпособыРасчетаСебестоимостиПродукции.ПоПодразделениям Тогда
			мРасчетПоПеределамОсновноеПроизводство = Ложь;
			
		ИначеЕсли мУчетнаяПолитика.СпособРасчетаСебестоимостиОсновногоПроизводства 
					= Перечисления.СпособыРасчетаСебестоимостиПродукции.ПоПеределам Тогда
			мРасчетПоПеределамОсновноеПроизводство = Истина;
			
		Иначе
			ОбщегоНазначения.СообщитьОбОшибке("Не указан параметр ""Способ расчета себестоимости основного производства"" учетной политики!", Отказ, Заголовок);
		КонецЕсли;
		
		Если мУчетнаяПолитика.СпособРасчетаСебестоимостиВспомогательногоПроизводства 
				= Перечисления.СпособыРасчетаСебестоимостиПродукции.ПоПодразделениям Тогда
			мРасчетПоПеределамВспомогательноеПроизводство = Ложь;
			
		ИначеЕсли мУчетнаяПолитика.СпособРасчетаСебестоимостиВспомогательногоПроизводства 
					= Перечисления.СпособыРасчетаСебестоимостиПродукции.ПоПеределам Тогда
			мРасчетПоПеределамВспомогательноеПроизводство = Истина;
			
		Иначе
			ОбщегоНазначения.СообщитьОбОшибке("Не указан параметр ""Способ расчета себестоимости вспомогательного производства"" учетной политики!", Отказ, Заголовок);
		КонецЕсли;
	КонецЕсли;
	
	ДетализацияКосвенныхЗатратВСебестоимости = мУчетнаяПолитика.ДетализацияКосвенныхЗатратВСебестоимости;
	ДетализацияПоФиксированнойСтатьеЗатрат = (ДетализацияКосвенныхЗатратВСебестоимости = Перечисления.ДетализацияКосвенныхЗатратВСебестоимости.ПоФиксированнойСтатьеЗатрат);
	
	СтатьяБракВПроизводстве 		  = мУчетнаяПолитика.СтатьяБракВПроизводстве;
	СтатьяОбщепроизводственныеРасходы = мУчетнаяПолитика.СтатьяОбщепроизводственныеРасходы;
	СтатьяОбщехозяйственныеРасходы 	  = мУчетнаяПолитика.СтатьяОбщехозяйственныеРасходы;
	
	Если ОтражатьВУправленческомУчете ИЛИ ОтражатьВМеждународномУчете Тогда
		ВариантУчетаВыпускаГотовойПродукции = Перечисления.ВариантыУчетаВыпускаГотовойПродукции.БезИспользованияСчета40;
	Иначе
		ВариантУчетаВыпускаГотовойПродукции = мУчетнаяПолитика.ВариантУчетаВыпускаГотовойПродукции;
	КонецЕсли;
	
	Если ДетализацияПоФиксированнойСтатьеЗатрат Тогда
		Если НЕ ЗначениеЗаполнено(СтатьяБракВПроизводстве) Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Не указан параметр ""Статья брак в производстве"" учетной политики!", Отказ, Заголовок);
		ИначеЕсли НЕ ЗначениеЗаполнено(СтатьяОбщепроизводственныеРасходы) Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Не указан параметр ""Статья общепроизводственных расходов"" учетной политики!", Отказ, Заголовок);
		ИначеЕсли НЕ ЗначениеЗаполнено(СтатьяОбщехозяйственныеРасходы) Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Не указан параметр ""Статья общехозяйственных расходов"" учетной политики!", Отказ, Заголовок);
		КонецЕсли;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат; // Прервать расчет
	КонецЕсли;

	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете
	 ИЛИ СтруктураШапкиДокумента.ОтражатьВНалоговомУчете
	Тогда
		ПоддержкаПБУ18 = мУчетнаяПолитика.ПоддержкаПБУ18;
	Иначе
		ПоддержкаПБУ18 = Ложь;
	КонецЕсли;
	
	мВидыПодразделенийДляРасчетаПоПеределам = Новый Массив;
	мВидыПодразделенийДляРасчетаПоПодразделениям = Новый Массив;
	Если мРасчетПоПеределамВспомогательноеПроизводство Тогда
		мВидыПодразделенийДляРасчетаПоПеределам.Добавить(Перечисления.ВидыПодразделений.ВспомогательноеПроизводство);
	Иначе
		мВидыПодразделенийДляРасчетаПоПодразделениям.Добавить(Перечисления.ВидыПодразделений.ВспомогательноеПроизводство);
	КонецЕсли;
	Если мРасчетПоПеределамОсновноеПроизводство Тогда
		мВидыПодразделенийДляРасчетаПоПеределам.Добавить(Перечисления.ВидыПодразделений.ОсновноеПроизводство);
	Иначе
		мВидыПодразделенийДляРасчетаПоПодразделениям.Добавить(Перечисления.ВидыПодразделений.ОсновноеПроизводство);
	КонецЕсли;
	
	УчетПоСредней = (мУчетнаяПолитика.СпособОценкиМПЗ = Перечисления.СпособыОценки.ПоСредней);
	СтруктураШапкиДокумента.Вставить("УчетПоСредней", УчетПоСредней);
	СтруктураШапкиДокумента.Вставить("Дата",                 КонецМесяца(ПериодРегистрации));
	СтруктураШапкиДокумента.Вставить("Период",       		 КонецМесяца(ПериодРегистрации));
	СтруктураШапкиДокумента.Вставить("УчетнаяПолитика",      мУчетнаяПолитика);
	СтруктураШапкиДокумента.Вставить("ТабПеределовОбщая",    Неопределено);
	СтруктураШапкиДокумента.Вставить("СуффиксИмениРегистра", мСуффиксИмениРегистра);
	СтруктураШапкиДокумента.Вставить("ОтражатьВУправленческомУчете", ОтражатьВУправленческомУчете);
	СтруктураШапкиДокумента.Вставить("ОтражатьВБухгалтерскомУчете",  ОтражатьВБухгалтерскомУчете);
	СтруктураШапкиДокумента.Вставить("ОтражатьВНалоговомУчете",      ОтражатьВНалоговомУчете);
	СтруктураШапкиДокумента.Вставить("ОтражатьВМеждународномУчете",  ОтражатьВМеждународномУчете);
	СтруктураШапкиДокумента.Вставить("РасчетПоПеределамОсновноеПроизводство",        мРасчетПоПеределамОсновноеПроизводство);
	СтруктураШапкиДокумента.Вставить("РасчетПоПеределамВспомогательноеПроизводство", мРасчетПоПеределамВспомогательноеПроизводство);
	СтруктураШапкиДокумента.Вставить("ВариантУчетаВыпускаГотовойПродукции", ВариантУчетаВыпускаГотовойПродукции);
	
	СтруктураШапкиДокумента.Вставить("ВидыПодразделенийДляРасчетаПоПеределам", 		 мВидыПодразделенийДляРасчетаПоПеределам);
	СтруктураШапкиДокумента.Вставить("ВидыПодразделенийДляРасчетаПоПодразделениям",  мВидыПодразделенийДляРасчетаПоПодразделениям);
	СтруктураШапкиДокумента.Вставить("мВидыПодразделенийДляРасчетаПоПеределам", 	 мВидыПодразделенийДляРасчетаПоПеределам);
	СтруктураШапкиДокумента.Вставить("мВидыПодразделенийДляРасчетаПоПодразделениям", мВидыПодразделенийДляРасчетаПоПодразделениям);
	
	СтруктураШапкиДокумента.Вставить("ДетализацияПоФиксированнойСтатьеЗатрат",  ДетализацияПоФиксированнойСтатьеЗатрат);
	Если ДетализацияПоФиксированнойСтатьеЗатрат Тогда
		СтруктураШапкиДокумента.Вставить("СтатьяОбщепроизводственныеРасходы", СтатьяОбщепроизводственныеРасходы);
		СтруктураШапкиДокумента.Вставить("СтатьяОбщехозяйственныеРасходы",	  СтатьяОбщехозяйственныеРасходы);
		СтруктураШапкиДокумента.Вставить("СтатьяБракВПроизводстве", 		  СтатьяБракВПроизводстве);
	Иначе
		СтруктураШапкиДокумента.Вставить("СтатьяОбщепроизводственныеРасходы");
		СтруктураШапкиДокумента.Вставить("СтатьяОбщехозяйственныеРасходы");
		СтруктураШапкиДокумента.Вставить("СтатьяБракВПроизводстве");
	КонецЕсли;
	
	СтруктураШапкиДокумента.Вставить("ИтерационныйРасчетЗатратВстречногоВыпуска", мУчетнаяПолитика.ИспользоватьИтерационныйРасчетЗатратВстречногоВыпуска);
	
	СтруктураШапкиДокумента.Вставить("БезСтатейЗатрат",  Истина);
	
	СтруктураШапкиДокумента.Вставить("мСуффиксИмениРегистра", мСуффиксИмениРегистра);
	СтруктураШапкиДокумента.Вставить("мНачГраница", мНачГраница);
	СтруктураШапкиДокумента.Вставить("мКонГраница", мКонГраница);
	СтруктураШапкиДокумента.Вставить("мНачДата",  	мНачДата);
	СтруктураШапкиДокумента.Вставить("мКонДата",  	мКонДата);
	СтруктураШапкиДокумента.Вставить("ПоддержкаПБУ18", ПоддержкаПБУ18);
	СтруктураШапкиДокумента.Вставить("ДиректКостинг", мУчетнаяПолитика.ДиректКостинг);
	СтруктураШапкиДокумента.Вставить("ВедениеУчетаПоПроектам", УправлениеПроектами.ВедениеУчетаПоПроектам());
	СтруктураШапкиДокумента.Вставить("ВедениеУчетаЗатратПоПроектам", УправлениеПроектами.ВедениеУчетаЗатратПоПроектам());

	СпособыВеденияПартионногоУчетаПоОрганизациям = УправлениеЗапасамиПартионныйУчет.ПодготовитьСоответствиеСпособыВеденияПартионногоУчетаПоОрганизациям(СтруктураШапкиДокумента);
	СтруктураШапкиДокумента.Вставить("СпособыВеденияПартионногоУчетаПоОрганизациям", СпособыВеденияПартионногоУчетаПоОрганизациям);

	ВидОтраженияВУчете = ПроцедурыРасчетаСебестоимостиВыпуска.ПолучитьВидОтраженияВУчете(СтруктураШапкиДокумента);
	СтруктураШапкиДокумента.Вставить("ВидОтраженияВУчете", ВидОтраженияВУчете);
	
	Если ОтражатьВМеждународномУчете Тогда
		СтруктураШапкиДокумента.Вставить("ИспользоватьРасширеннуюАналитику", Ложь);
	Иначе
		СтруктураШапкиДокумента.Вставить("ИспользоватьРасширеннуюАналитику", ИспользоватьРасширеннуюАналитику);
		Если ИспользоватьРасширеннуюАналитику Тогда
			СтруктураШапкиДокумента.Вставить("ОтражатьВНалоговомУчете", Ложь);
		КонецЕсли;
	КонецЕсли;
	
	РежимИспользованияРасширеннойАналитики = ПолучитьРежимИспользованияРасширеннойАналитики();
	СтруктураШапкиДокумента.Вставить("ОтражатьЗатратыВУпрУчете", (РежимИспользованияРасширеннойАналитики = Перечисления.РежимыИспользованияРасширеннойАналитики.УправленческийИРегламентированныйУчет));

	Если ОтражатьВУправленческомУчете Тогда
		СтруктураШапкиДокумента.Вставить("ОтноситьТЗРНаОтдельныйСчет", Ложь);
	Иначе
		СтруктураШапкиДокумента.Вставить("ОтноситьТЗРНаОтдельныйСчет", мУчетнаяПолитика.ВидУчетаТЗР = Перечисления.ВариантыУчетаТЗР.ОтнесениеНаОтдельныйСчет);
	КонецЕсли;
	
	СтруктураШапкиДокумента.Вставить("ПростоеРаспределение", УчетЗатрат.ИспользоватьПростоеРаспределение(НастройкаЗакрытияМесяца));
	
	Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете 
		 И СтруктураШапкиДокумента.ПростоеРаспределение Тогда
		 
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"Настройку закрытия месяца ""%1"" можно использовать только при проведении документа по регламентированному учету.",
			СтруктураШапкиДокумента.НастройкаЗакрытияМесяца);
			
		ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, Отказ, Заголовок);
	КонецЕсли;
	
	// По умолчанию "отладочный режим" выключен.
	//
	// Для его включения необходимо в режиме отладки выполнить функцию 
	// РасширеннаяАналитикаУчета.ВключитьОтладочныйРежим().
	//
	// Включение "отладочного режима" позволит просматривать данные временных таблиц - 
	// см. РасширеннаяАналитика.ПоказатьВременнуюТаблицу()
	РасширеннаяАналитикаУчета.ВключитьОтладочныйРежим(СтруктураШапкиДокумента, Ложь);
	
КонецПроцедуры // ПодготовитьСтруктуруШапкиДокумента()

// Функция формирует структуру таблиц движений регистров.
//
// Параметры
//  СтруктураШапкиДокумента – Структура - Реквизиты документа "Расчет себестоимости"
//
// Возвращаемое значение:
//   Структура – Структура таблиц движений регистров
//
Функция ПолучитьСтруктуруТаблицДвиженийРегистров(
	СтруктураШапкиДокумента
	)
	
	// Наборы движений по регистрам
	Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		
		мСуффиксИмениРегистра             = "";
		
		мДвиженияВыпуск                   = Движения.ВыпускПродукции;
		мДвиженияЗатраты                  = Движения.Затраты;
		мДвиженияЗатратыОбороты           = Движения.ЗатратыОбороты;
		мДвиженияЗатратыНаВыпуск          = Движения.ЗатратыНаВыпускПродукции;
		мДвиженияЗатратыНаВыпускНаработка = Движения.ЗатратыНаВыпускПродукцииНаработка;
		мДвиженияБракВПроизводстве        = Движения.БракВПроизводстве;
		мДвиженияНЗП		              = Движения.НезавершенноеПроизводство;
		мДвиженияПартии			          = Движения.ПартииТоваровНаСкладах;
		мДвиженияПродажиСебестоимость	  = Движения.ПродажиСебестоимость;
		мДвиженияБазаРаспределенияЗатрат  = Движения.БазаРаспределенияЗатрат;
		
	ИначеЕсли СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		
		мСуффиксИмениРегистра             = "БухгалтерскийУчет";
		
		мДвиженияВыпуск                   = Движения.ВыпускПродукцииБухгалтерскийУчет;
		мДвиженияЗатраты                  = Движения.ЗатратыБухгалтерскийУчет;
		мДвиженияЗатратыНаВыпуск          = Движения.ЗатратыНаВыпускПродукцииБухгалтерскийУчет;
		мДвиженияЗатратыНаВыпускНаработка = Движения.ЗатратыНаВыпускПродукцииНаработкаБухгалтерскийУчет;
		мДвиженияБракВПроизводстве        = Движения.БракВПроизводствеБухгалтерскийУчет;
		мДвиженияНЗП		              = Движения.НезавершенноеПроизводствоБухгалтерскийУчет;
		мДвиженияПартии			          = Движения.ПартииТоваровНаСкладахБухгалтерскийУчет;
		мДвиженияБазаРаспределенияЗатрат  = Движения.БазаРаспределенияЗатратБухгалтерскийУчет;
		
		мОперация                         = Движения.Хозрасчетный;
		мСуффиксСчета                     = "СчетУчетаБУ";
		
	ИначеЕсли СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
		
		мСуффиксИмениРегистра             = "НалоговыйУчет";
		
		мДвиженияВыпуск                   = Движения.ВыпускПродукцииНалоговыйУчет;
		мДвиженияЗатраты                  = Движения.ЗатратыНалоговыйУчет;
		мДвиженияЗатратыНаВыпуск          = Движения.ЗатратыНаВыпускПродукцииНалоговыйУчет;
		мДвиженияЗатратыНаВыпускНаработка = Движения.ЗатратыНаВыпускПродукцииНаработкаНалоговыйУчет;
		мДвиженияБракВПроизводстве        = Движения.БракВПроизводствеНалоговыйУчет;
		мДвиженияНЗП		              = Движения.НезавершенноеПроизводствоНалоговыйУчет;
		мДвиженияПартии			          = Движения.ПартииТоваровНаСкладахНалоговыйУчет;
		мДвиженияБазаРаспределенияЗатрат  = Движения.БазаРаспределенияЗатратНалоговыйУчет;
		
		мОперация                         = Движения.Налоговый;
		мСуффиксСчета                     = "СчетУчетаНУ";
		
	ИначеЕсли СтруктураШапкиДокумента.ОтражатьВМеждународномУчете Тогда
		
		мСуффиксИмениРегистра      = "МеждународныйУчет";
		
		мДвиженияВыпуск            = Движения.ВыпускПродукцииМеждународныйУчет;
		мДвиженияЗатраты           = Движения.ЗатратыМеждународныйУчет;
		мДвиженияЗатратыНаВыпуск   = Движения.ЗатратыНаВыпускПродукцииМеждународныйУчет;
		мДвиженияБракВПроизводстве = Движения.БракВПроизводствеМеждународныйУчет;
		мДвиженияНЗП		       = Движения.НезавершенноеПроизводствоМеждународныйУчет;
		мДвиженияПартии			   = Движения.ПартииТоваровНаСкладахМеждународныйУчет;
		мДвиженияБазаРаспределенияЗатрат  = Движения.БазаРаспределенияЗатратМеждународныйУчет;
		
		мОперация                  = Движения.Международный;
		мСуффиксСчета              = "СчетУчетаМСФО";
		
	КонецЕсли;
	
	мТаблицаДвиженийЗатратыНаВыпуск = мДвиженияЗатратыНаВыпуск.Выгрузить();
	мТаблицаДвиженийВыпуск			= мДвиженияВыпуск.Выгрузить();
	мТаблицаДвиженийНЗП				= мДвиженияНЗП.Выгрузить();
	мТаблицаДвиженийЗатраты			= мДвиженияЗатраты.Выгрузить();
	мТаблицаДвиженийБракВПроизводстве = мДвиженияБракВПроизводстве.Выгрузить();
	мТаблицаДвиженийПартии			= мДвиженияПартии.Выгрузить();
	
	Если ОтражатьВУправленческомУчете Тогда
		мТаблицаДвиженийЗатратыОбороты = мДвиженияЗатратыОбороты.Выгрузить();
		мТаблицаДвиженийПродажиСебестоимость = мДвиженияПродажиСебестоимость.Выгрузить();
	КонецЕсли;
	Если Не ОтражатьВМеждународномУчете Тогда
		мТаблицаДвиженийЗатратыНаВыпускНаработка = мДвиженияЗатратыНаВыпускНаработка.Выгрузить();
	КонецЕсли;
	
	СтруктураТаблицДвижений = Новый Структура;
	СтруктураТаблицДвижений.Вставить("ТаблицаДвиженийЗатратыНаВыпуск", 	мТаблицаДвиженийЗатратыНаВыпуск);
	СтруктураТаблицДвижений.Вставить("ТаблицаДвиженийВыпуск", 			мТаблицаДвиженийВыпуск);
	СтруктураТаблицДвижений.Вставить("ТаблицаДвиженийНЗП", 				мТаблицаДвиженийНЗП);
	СтруктураТаблицДвижений.Вставить("ТаблицаДвиженийЗатраты", 			мТаблицаДвиженийЗатраты);
	СтруктураТаблицДвижений.Вставить("ТаблицаДвиженийБракВПроизводстве",мТаблицаДвиженийБракВПроизводстве);
	СтруктураТаблицДвижений.Вставить("ТаблицаДвиженийПартии", 			мТаблицаДвиженийПартии);
	Если ОтражатьВУправленческомУчете Тогда
		СтруктураТаблицДвижений.Вставить("ТаблицаДвиженийЗатратыОбороты", 	мТаблицаДвиженийЗатратыОбороты);
		СтруктураТаблицДвижений.Вставить("ТаблицаДвиженийПродажиСебестоимость", мТаблицаДвиженийПродажиСебестоимость);
	КонецЕсли;
	Если Не ОтражатьВМеждународномУчете Тогда
		СтруктураТаблицДвижений.Вставить("ТаблицаДвиженийЗатратыНаВыпускНаработка", мТаблицаДвиженийЗатратыНаВыпускНаработка);
	КонецЕсли;
	
	Возврат СтруктураТаблицДвижений;
	
КонецФункции // ПолучитьСтруктуруТаблицДвиженийРегистров()

Процедура ЗаполнитьСпособыРаспределенияЗатрат(СтруктураШапкиДокумента, Отказ, Заголовок) Экспорт

	Если СтруктураШапкиДокумента.ПростоеРаспределение Тогда
		// "Простое распределение" обходится без регистра сведений
		Возврат;
	КонецЕсли;
	
	ЗаполнитьСпособыРаспределенияЗатрат = ВыполняемыеДействия.Найти(Перечисления.ВыполняемыеОперацииРасчетСебестоимостиВыпуска.РасчетБазыРаспределенияРасходов, "ВыполняемоеДействие") <> Неопределено
											ИЛИ ВыполняемыеДействия.Найти(Перечисления.ВыполняемыеОперацииРасчетСебестоимостиВыпуска.РаспределениеРасходовПоБазе, "ВыполняемоеДействие") <> Неопределено;
											
	Если ЗаполнитьСпособыРаспределенияЗатрат Тогда
		Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
			ПроцедурыРасчетаСебестоимостиРасширеннаяАналитика.ЗаполнитьСпособыРаспределенияЗатратУпр(СтруктураШапкиДокумента, Отказ, Заголовок);
		КонецЕсли; 
		
		Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете 
			ИЛИ СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
			
			ПроцедурыРасчетаСебестоимостиРасширеннаяАналитика.ЗаполнитьСпособыРаспределенияЗатратРегл(СтруктураШапкиДокумента, Отказ, Заголовок);
		КонецЕсли; 
	КонецЕсли; 
КонецПроцедуры //

// Процедура производит регистрацию документа в последовательностях партионного учета.
//
// Параметры
//  СтруктураШапкиДокумента – Структура – Реквизиты документа "Расчет себестоимости"
//
Процедура ЗарегистрироватьДокументВПоследовательностях(СтруктураШапкиДокумента)
	
	Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		
		ТаблицаОрганизаций = Новый ТаблицаЗначений;
		ТаблицаОрганизаций.Колонки.Добавить("Организация");
		
		СпособыВеденияПартионногоУчетаПоОрганизациям = СтруктураШапкиДокумента.СпособыВеденияПартионногоУчетаПоОрганизациям;
		Для Каждого Элемент Из СпособыВеденияПартионногоУчетаПоОрганизациям Цикл
			
			ОрганизацияУпр = УправлениеЗапасами.ПолучитьОрганизациюВСоответствииСоСпособомВеденияПартионногоУчетаПоОрганизациям(
				Элемент.Ключ, // Организация 
				Элемент.Значение // СпособВеденияПартионногоУчетаПоОрганизации
			);
			
			НоваяСтрока = ТаблицаОрганизаций.Добавить();
			НоваяСтрока.Организация = ОрганизацияУпр;
			
		КонецЦикла;
		
		ТаблицаОрганизаций.Свернуть("Организация", "");
		
		Для Каждого Строка Из ТаблицаОрганизаций Цикл
			
			ЗаписьРегистрации = ПринадлежностьПоследовательностям.ПартионныйУчет.Добавить();
			ЗаписьРегистрации.Период = КонецМесяца(ПериодРегистрации);
			ЗаписьРегистрации.Регистратор = Ссылка;
			ЗаписьРегистрации.Организация = Строка.Организация;
			
		КонецЦикла;
		
	ИначеЕсли СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете
		  ИЛИ СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
		  
		УправлениеЗапасами.ЗарегистрироватьДокументВПоследовательностяхПартионногоУчета(
			ЭтотОбъект, 
			КонецМесяца(ПериодРегистрации), 
			СтруктураШапкиДокумента.Организация,
			Ложь, // ОтражатьВУправленческомУчете
			ОтражатьВБухгалтерскомУчете,
			ОтражатьВНалоговомУчете
		);
	КонецЕсли;
	
КонецПроцедуры // ЗарегистрироватьДокументВПоследовательностях()

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ВЫПОЛНЕНИЯ ЗАДАННЫХ В ДОКУМЕНТЕ ДЕЙСТВИЙ

// Процедура выполнения действия "Расчет базы распределения производственных расходов".
//
// Параметры
//  СтруктураШапкиДокумента – Структура - Реквизиты документа "Расчет себестоимости"
//	СтруктураТаблицДвижений - Структура - Структура таблиц движений по регистрам
//
Процедура ВыполняемоеДействиеРасчетБазыРаспределенияПроизводственныхРасходов(
	СтруктураШапкиДокумента,
	СтруктураТаблицДвижений
	)
	
	// Списание затрат по наработке.
	Если Не ОтражатьВМеждународномУчете Тогда
		ПроцедурыРасчетаСебестоимостиВыпуска.СписаниеЗатратНаВыпускНаработка(СтруктураШапкиДокумента);
	КонецЕсли;
	
	Если ОтражатьВНалоговомУчете Тогда
		ПроцедурыРасчетаСебестоимостиВыпуска.ЗакрытиеСчетовКосвенныхРасходовПроизводство(СтруктураШапкиДокумента, СтруктураТаблицДвижений);
	КонецЕсли;
	
	ПроцедурыРасчетаБазыРаспределенияЗатрат.РасчетБазыРаспределенияЗатрат(
		СтруктураШапкиДокумента,
		Ложь // КосвенныеЗатраты
	);
	
КонецПроцедуры // ВыполняемоеДействиеРасчетБазыРаспределенияПроизводственныхРасходов()

// Процедура выполнения действия "Расчет базы распределения производственных расходов".
//
// Параметры
//  СтруктураШапкиДокумента – Структура - Реквизиты документа "Расчет себестоимости"
//
Процедура ВыполняемоеДействиеРаспределениеПроизводственныхРасходов(
	СтруктураШапкиДокумента,
	СтруктураТаблицДвижений
	)
	
	ПроцедурыРасчетаСебестоимостиВыпуска.РаспределениеПрямыхПроизводственныхРасходов(СтруктураШапкиДокумента);
	
КонецПроцедуры // ВыполняемоеДействиеРасчетБазыРаспределенияПроизводственныхРасходов()

// Процедура выполнения действия "Распределение продукции и затрат по переделам".
//
// Параметры
//  СтруктураШапкиДокумента – Структура - Реквизиты документа "Расчет себестоимости"
//	СтруктураТаблицДвижений - Структура - Структура таблиц движений по регистрам
//
Процедура ВыполняемоеДействиеРаспределениеПродукцииИЗатратПоПеределам(
	СтруктураШапкиДокумента,
	СтруктураТаблицДвижений
	)
	
			
	// Списание затрат по наработке.
	Если Не ОтражатьВМеждународномУчете Тогда
		ПроцедурыРасчетаСебестоимостиВыпуска.СписаниеЗатратНаВыпускНаработка(СтруктураШапкиДокумента);
	КонецЕсли;
			
	Если ОтражатьВНалоговомУчете Тогда
		ПроцедурыРасчетаСебестоимостиВыпуска.ЗакрытиеСчетовКосвенныхРасходовПроизводство(СтруктураШапкиДокумента, СтруктураТаблицДвижений);
	КонецЕсли;
	
	РасчетСебестоимостиВыпускаРаспределениеПоПеределам.РаспределениеПродукцииИЗатратПоПеределам(СтруктураШапкиДокумента);
			
	ПроцедурыРасчетаСебестоимостиВыпуска.ПроверитьПрямыеЗатраты(СтруктураШапкиДокумента);
			
	ПроцедурыРасчетаСебестоимостиВыпуска.ЗаполнениеКорректировкиВстречногоВыпускаПродукции(СтруктураШапкиДокумента);
			
	
КонецПроцедуры // ВыполняемоеДействиеРаспределениеПродукцииИЗатратПоПеределам()

// Процедура выполнения действия "Расчет прямых затрат по подразделениям".
//
// Параметры
//  СтруктураШапкиДокумента – Структура - Реквизиты документа "Расчет себестоимости"
//	СтруктураТаблицДвижений - Структура - Структура таблиц движений по регистрам
//
Процедура ВыполняемоеДействиеРасчетПрямыхЗатратПоПодразделениям(
	СтруктураШапкиДокумента,
	СтруктураТаблицДвижений
	)
	
	ПроцедурыРасчетаСебестоимостиВыпуска.РасчетПрямыхЗатрат(СтруктураШапкиДокумента, СтруктураТаблицДвижений, Перечисления.СпособыРасчетаСебестоимостиПродукции.ПоПодразделениям);
			
	
КонецПроцедуры // ВыполняемоеДействиеРасчетПрямыхЗатратПоПодразделениям()

// Процедура выполнения действия "Расчет прямых затрат по переделам".
//
// Параметры
//  СтруктураШапкиДокумента – Структура - Реквизиты документа "Расчет себестоимости"
//	СтруктураТаблицДвижений - Структура - Структура таблиц движений по регистрам
//
Процедура ВыполняемоеДействиеРасчетПрямыхЗатратПоПеределам(
	СтруктураШапкиДокумента,
	СтруктураТаблицДвижений
	)
	
	ПроцедурыРасчетаСебестоимостиВыпуска.РасчетПрямыхЗатрат(
		СтруктураШапкиДокумента, 
		СтруктураТаблицДвижений, 
		Перечисления.СпособыРасчетаСебестоимостиПродукции.ПоПеределам
	);
	
КонецПроцедуры // ВыполняемоеДействиеРасчетПрямыхЗатратПоПеределам()

// Процедура выполнения действия "Определение продукции, исключаемой из базы распределения".
//
// Параметры
//  СтруктураШапкиДокумента – Структура - Реквизиты документа "Расчет себестоимости"
//
Процедура ВыполняемоеДействиеОпределениеПродукцииИсключаемойИзБазыРаспределения(
	СтруктураШапкиДокумента
	)
	
	ПроцедурыРасчетаСебестоимостиВыпуска.ОпределитьНоменклатуруИсключаемуюИзБазыРаспределения(СтруктураШапкиДокумента);
	ПроцедурыРасчетаСебестоимостиВыпуска.ОпределитьНоменклатуруСписаннуюНаРаспределяемыеЗатраты(СтруктураШапкиДокумента);
	
КонецПроцедуры // ВыполняемоеДействиеОпределениеПродукцииИсключаемойИзБазыРаспределения()

// Процедура выполнения действия "Расчет базы распределения косвенных расходов".
//
// Параметры
//  СтруктураШапкиДокумента – Структура - Реквизиты документа "Расчет себестоимости"
//
Процедура ВыполняемоеДействиеРасчетБазыРаспределенияКосвенныхРасходов(
	СтруктураШапкиДокумента
	)
	
	ПроцедурыРасчетаБазыРаспределенияЗатрат.РасчетБазыРаспределенияЗатрат(
		СтруктураШапкиДокумента,
		Истина // КосвенныеЗатраты
	);
		
КонецПроцедуры // ВыполняемоеДействиеРаспределениеКосвенныхРасходовПоПодразделениям()

// Процедура выполнения действия "Распределение косвенных расходов по подразделениям".
//
// Параметры
//  СтруктураШапкиДокумента – Структура - Реквизиты документа "Расчет себестоимости"
//	СтруктураТаблицДвижений - Структура - Структура таблиц движений по регистрам
//
Процедура ВыполняемоеДействиеРаспределениеКосвенныхРасходовПоПодразделениям(
	СтруктураШапкиДокумента,
	ДиректКостинг,
	СтруктураТаблицДвижений
	)
	
			
	ПроцедурыРасчетаСебестоимостиВыпуска.ЗакрытиеСчетовКосвенныхРасходов(
		СтруктураШапкиДокумента, 
		ДиректКостинг, 
		СтруктураТаблицДвижений
		);
			
	ПроцедурыРасчетаСебестоимостиВыпуска.РаспределениеКосвенныхРасходов(
		СтруктураШапкиДокумента, 
		СтруктураТаблицДвижений, 
		ДиректКостинг, 
		Перечисления.СпособыРасчетаСебестоимостиПродукции.ПоПодразделениям
		);
			
		
КонецПроцедуры // ВыполняемоеДействиеРаспределениеКосвенныхРасходовПоПодразделениям()

// Процедура выполнения действия "Распределение косвенных расходов по переделам".
//
// Параметры
//  СтруктураШапкиДокумента – Структура - Реквизиты документа "Расчет себестоимости"
//	СтруктураТаблицДвижений - Структура - Структура таблиц движений по регистрам
//
Процедура ВыполняемоеДействиеРаспределениеКосвенныхРасходовПоПеределам(
	СтруктураШапкиДокумента,
	ДиректКостинг,
	СтруктураТаблицДвижений
	)
	
			
	ПроцедурыРасчетаСебестоимостиВыпуска.ЗакрытиеСчетовКосвенныхРасходов(
		СтруктураШапкиДокумента, 
		ДиректКостинг, 
		СтруктураТаблицДвижений
		);
			
	ПроцедурыРасчетаСебестоимостиВыпуска.РаспределениеКосвенныхРасходов(
		СтруктураШапкиДокумента, 
		СтруктураТаблицДвижений, 
		ДиректКостинг, 
		Перечисления.СпособыРасчетаСебестоимостиПродукции.ПоПеределам
		);
			
		
КонецПроцедуры // ВыполняемоеДействиеРаспределениеКосвенныхРасходовПоПеределам()

// Процедура выполнения действия "Списание коммерческих расходов".
//
// Параметры
//  СтруктураШапкиДокумента – Структура - Реквизиты документа "Расчет себестоимости"
//
Процедура ВыполняемоеДействиеСписаниеКосвенныхРасходовНаРБП(
	СтруктураШапкиДокумента
	)
	
	// Списание остатки общепроизводственных и общехозяйственных расходов на расходы будущих периодов.
	ПроцедурыРасчетаСебестоимостиВыпуска.СписаниеОбщепроизводственныхИОбщехозяйственныхРасходовНаРБП(
		СтруктураШапкиДокумента
		);
			
КонецПроцедуры // ВыполняемоеДействиеСписаниеКосвенныхРасходовНаРБП()

// Процедура выполнения действия "Расчет затрат встречного выпуска по подразделениям".
//
// Параметры
//  СтруктураШапкиДокумента – Структура - Реквизиты документа "Расчет себестоимости"
//	СтруктураТаблицДвижений - Структура - Структура таблиц движений по регистрам
//
Процедура ВыполняемоеДействиеРасчетЗатратВстречногоВыпускаПоПодразделениям(
	СтруктураШапкиДокумента,
	СтруктураТаблицДвижений
	)
	
			
	ПроцедурыРасчетаСебестоимостиВыпуска.РасчетПрямыхЗатрат(
		СтруктураШапкиДокумента, 
		СтруктураТаблицДвижений, 
		Перечисления.СпособыРасчетаСебестоимостиПродукции.ПоПодразделениям, 
		Истина
		);
			
				
КонецПроцедуры // ВыполняемоеДействиеРасчетЗатратВстречногоВыпускаПоПодразделениям()

// Процедура выполнения действия "Расчет затрат встречного выпуска по переделам".
//
// Параметры
//  СтруктураШапкиДокумента – Структура - Реквизиты документа "Расчет себестоимости"
//	СтруктураТаблицДвижений - Структура - Структура таблиц движений по регистрам
//
Процедура ВыполняемоеДействиеРасчетЗатратВстречногоВыпускаПоПеределам(
	СтруктураШапкиДокумента,
	СтруктураТаблицДвижений
	)
	
			
	ПроцедурыРасчетаСебестоимостиВыпуска.РасчетПрямыхЗатрат(
		СтруктураШапкиДокумента, 
		СтруктураТаблицДвижений, 
		Перечисления.СпособыРасчетаСебестоимостиПродукции.ПоПеределам, 
		Истина
		);
			
КонецПроцедуры // ВыполняемоеДействиеРасчетЗатратВстречногоВыпускаПоПеределам()

// Процедура выполнения действия "Списание общехоз. расходов по методу директ-костинг".
//
// Параметры
//  СтруктураШапкиДокумента – Структура - Реквизиты документа "Расчет себестоимости"
//
Процедура ВыполняемоеДействиеСписаниеОбщехозяйственныхРасходовПоМетодуДиректКостинг(
	СтруктураШапкиДокумента
	)
	

	ПроцедурыРасчетаСебестоимостиВыпуска.РаспределениеРасходовПоПродажам(
		СтруктураШапкиДокумента,
		Перечисления.ХарактерЗатрат.ОбщехозяйственныеРасходы
	);
			
			
КонецПроцедуры // ВыполняемоеДействиеСписаниеОбщехозяйственныхРасходовПоМетодуДиректКостинг()

// Процедура выполнения действия "Списание коммерческих расходов".
//
// Параметры
//  СтруктураШапкиДокумента – Структура - Реквизиты документа "Расчет себестоимости"
//
Процедура ВыполняемоеДействиеСписаниеКоммерческихРасходов(
	СтруктураШапкиДокумента
	)
	
			
	ПроцедурыРасчетаСебестоимостиВыпуска.РаспределениеРасходовПоПродажам(
		СтруктураШапкиДокумента,
		Перечисления.ХарактерЗатрат.КоммерческиеРасходы
	);
			
КонецПроцедуры // ВыполняемоеДействиеСписаниеКоммерческихРасходов()

// Процедура выполнения действия "Списание коммерческих расходов".
//
// Параметры
//  СтруктураШапкиДокумента – Структура - Реквизиты документа "Расчет себестоимости"
//
Процедура ВыполняемоеДействиеСписаниеИздержекОбращения(
	СтруктураШапкиДокумента
	)
	
			
	ПроцедурыРасчетаСебестоимостиВыпуска.РаспределениеРасходовПоПродажам(
		СтруктураШапкиДокумента,
		Перечисления.ХарактерЗатрат.ИздержкиОбращения
	);
			
КонецПроцедуры // ВыполняемоеДействиеСписаниеИздержекОбращения()

// Процедура выполнения действия "Списание прочих затрат".
//
// Параметры
//  СтруктураШапкиДокумента – Структура - Реквизиты документа "Расчет себестоимости"
//
Процедура ВыполняемоеДействиеСписаниеПрочихЗатрат(
	СтруктураШапкиДокумента
	)
	
	ПроцедурыРасчетаСебестоимостиВыпуска.РаспределениеРасходовПоПродажам(
		СтруктураШапкиДокумента,
		Перечисления.ХарактерЗатрат.Прочие
	);
					
КонецПроцедуры // ВыполняемоеДействиеСписаниеПрочихЗатрат()

// Процедура осуществляет выполнение заданных в документе действий.
//
Процедура ВыполнениеДействийДокумента(
	СтруктураШапкиДокумента,
	СтруктураТаблицДвижений
	)
	
	ДиректКостинг = мУчетнаяПолитика.ДиректКостинг;
	
	Для Каждого СтрокаДействия Из ВыполняемыеДействия Цикл
		
		Если СтрокаДействия.ВыполняемоеДействие 
				= Перечисления.ВыполняемыеОперацииРасчетСебестоимостиВыпуска.РасчетБазыРаспределенияПроизводственныхРасходов Тогда
				
			ВыполняемоеДействиеРасчетБазыРаспределенияПроизводственныхРасходов(
				СтруктураШапкиДокумента,
				СтруктураТаблицДвижений
				);
				
		ИначеЕсли СтрокаДействия.ВыполняемоеДействие 
				= Перечисления.ВыполняемыеОперацииРасчетСебестоимостиВыпуска.РаспределениеПроизводственныхРасходов Тогда
				
			ВыполняемоеДействиеРаспределениеПроизводственныхРасходов(
				СтруктураШапкиДокумента,
				СтруктураТаблицДвижений
				);
		
		ИначеЕсли СтрокаДействия.ВыполняемоеДействие 
				= Перечисления.ВыполняемыеОперацииРасчетСебестоимостиВыпуска.РаспределениеПродукцииИЗатратПоПеределам Тогда
				
			ВыполняемоеДействиеРаспределениеПродукцииИЗатратПоПеределам(
				СтруктураШапкиДокумента,
				СтруктураТаблицДвижений
				);
						
		ИначеЕсли СтрокаДействия.ВыполняемоеДействие 
				= Перечисления.ВыполняемыеОперацииРасчетСебестоимостиВыпуска.РасчетПрямыхЗатратПоПодразделениям Тогда
				
			ВыполняемоеДействиеРасчетПрямыхЗатратПоПодразделениям(
				СтруктураШапкиДокумента,
				СтруктураТаблицДвижений
				);
						
		ИначеЕсли СтрокаДействия.ВыполняемоеДействие 
				= Перечисления.ВыполняемыеОперацииРасчетСебестоимостиВыпуска.РасчетПрямыхЗатратПоПеределам Тогда
				
			ВыполняемоеДействиеРасчетПрямыхЗатратПоПеределам(
				СтруктураШапкиДокумента,
				СтруктураТаблицДвижений
				);
				
		ИначеЕсли СтрокаДействия.ВыполняемоеДействие 
				= Перечисления.ВыполняемыеОперацииРасчетСебестоимостиВыпуска.ОпределениеПродукцииИсключаемойИзБазыРаспределения Тогда
				
			ВыполняемоеДействиеОпределениеПродукцииИсключаемойИзБазыРаспределения(
				СтруктураШапкиДокумента
				);
				
		ИначеЕсли СтрокаДействия.ВыполняемоеДействие 
				= Перечисления.ВыполняемыеОперацииРасчетСебестоимостиВыпуска.РасчетБазыРаспределенияКосвенныхРасходов Тогда
				
			ВыполняемоеДействиеРасчетБазыРаспределенияКосвенныхРасходов(
				СтруктураШапкиДокумента
				);
				
		ИначеЕсли СтрокаДействия.ВыполняемоеДействие 
				= Перечисления.ВыполняемыеОперацииРасчетСебестоимостиВыпуска.РаспределениеКосвенныхРасходовПоПодразделениям Тогда
				
			ВыполняемоеДействиеРаспределениеКосвенныхРасходовПоПодразделениям(
				СтруктураШапкиДокумента,
				ДиректКостинг,
				СтруктураТаблицДвижений
				);
						
		ИначеЕсли СтрокаДействия.ВыполняемоеДействие 
				= Перечисления.ВыполняемыеОперацииРасчетСебестоимостиВыпуска.РаспределениеКосвенныхРасходовПоПеределам Тогда
				
			ВыполняемоеДействиеРаспределениеКосвенныхРасходовПоПеределам(
				СтруктураШапкиДокумента,
				ДиректКостинг,
				СтруктураТаблицДвижений
				);
				
		ИначеЕсли СтрокаДействия.ВыполняемоеДействие 
				= Перечисления.ВыполняемыеОперацииРасчетСебестоимостиВыпуска.СписаниеКосвенныхРасходовНаРБП Тогда
				
			ВыполняемоеДействиеСписаниеКосвенныхРасходовНаРБП(
				СтруктураШапкиДокумента
				);
			
		ИначеЕсли СтрокаДействия.ВыполняемоеДействие 
				= Перечисления.ВыполняемыеОперацииРасчетСебестоимостиВыпуска.СписаниеОбщехозяйственныхРасходовПоМетодуДиректКостинг Тогда
				
			ВыполняемоеДействиеСписаниеОбщехозяйственныхРасходовПоМетодуДиректКостинг(
				СтруктураШапкиДокумента
				);
						
		ИначеЕсли СтрокаДействия.ВыполняемоеДействие 
				= Перечисления.ВыполняемыеОперацииРасчетСебестоимостиВыпуска.СписаниеКоммерческихРасходов Тогда
				
			ВыполняемоеДействиеСписаниеКоммерческихРасходов(
				СтруктураШапкиДокумента
				);
						
		ИначеЕсли СтрокаДействия.ВыполняемоеДействие 
				= Перечисления.ВыполняемыеОперацииРасчетСебестоимостиВыпуска.СписаниеИздержекОбращения Тогда
				
			ВыполняемоеДействиеСписаниеИздержекОбращения(
				СтруктураШапкиДокумента
				);
				
		ИначеЕсли СтрокаДействия.ВыполняемоеДействие 
				= Перечисления.ВыполняемыеОперацииРасчетСебестоимостиВыпуска.РасчетЗатратВстречногоВыпускаПоПодразделениям Тогда
				
			ВыполняемоеДействиеРасчетЗатратВстречногоВыпускаПоПодразделениям(
				СтруктураШапкиДокумента,
				СтруктураТаблицДвижений
				);
						
		ИначеЕсли СтрокаДействия.ВыполняемоеДействие 
				= Перечисления.ВыполняемыеОперацииРасчетСебестоимостиВыпуска.РасчетЗатратВстречногоВыпускаПоПеределам Тогда
				
			ВыполняемоеДействиеРасчетЗатратВстречногоВыпускаПоПеределам(
				СтруктураШапкиДокумента,
				СтруктураТаблицДвижений
				);

			
		ИначеЕсли СтрокаДействия.ВыполняемоеДействие = Перечисления.ВыполняемыеОперацииРасчетСебестоимостиВыпуска.СписаниеПрочихЗатрат Тогда
			
			ВыполняемоеДействиеСписаниеПрочихЗатрат(
				СтруктураШапкиДокумента
				);
			
		ИначеЕсли СтрокаДействия.ВыполняемоеДействие = Перечисления.ВыполняемыеОперацииРасчетСебестоимостиВыпуска.СверткаДвиженийПоРегистрам Тогда
			
			ОбщегоНазначения.Сообщение("Сворачивание движений регистров...");
			ПроцедурыРасчетаСебестоимостиВыпуска.СвернутьДвиженияПоРегистрам(СтруктураШапкиДокумента);
			
		КонецЕсли;
		
	КонецЦикла;

	
КонецПроцедуры // ВыполнениеДействийДокумента()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	// Заполнить реквизиты значениями по умолчанию.
	Если НЕ ТипЗНЧ(ДанныеЗаполнения) = Тип("Структура") Тогда
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект);
		ОтражатьВУправленческомУчете = Истина;
		ОтражатьВБухгалтерскомУчете  = Ложь;
		ОтражатьВНалоговомУчете      = Ложь;
		
		Если ВыполняемыеДействия.Количество() = 0 Тогда
			ЗаполнитьВыполняемыеДействия();
		КонецЕсли;
   КонецЕсли;
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	//Признак отражения в МУ должен быть установлен явно
	ОтражатьВМеждународномУчете = Ложь;
	ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект,,ОбъектКопирования.Ссылка);
	ОтражатьВУправленческомУчете = Истина;
	ОтражатьВБухгалтерскомУчете  = Ложь;
	ОтражатьВНалоговомУчете      = Ложь;
	Организация = "";
КонецПроцедуры

// Процедура - обработчик события "ПередЗаписью"
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
	
	Если ОтражатьВУправленческомУчете Тогда
		Организация = Неопределено;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПериодРегистрации) Тогда
		ПериодРегистрации = НачалоМесяца(Дата);
	КонецЕсли;		
	
	Если УправлениеЗапасами.ИспользуетсяРасширеннаяАналитикаУчета(ПериодРегистрации) Тогда
		ОтражатьВНалоговомУчете     = ОтражатьВБухгалтерскомУчете;
		ОтражатьВМеждународномУчете = Ложь;
	КонецЕсли;
	
	мУдалятьДвижения = НЕ ЭтоНовый();
	
КонецПроцедуры // ПередЗаписью()

// Процедура - обработчик события "ОбработкаПроведения"
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения) Экспорт
	
#Если Клиент ИЛИ Сервер Тогда
	// ОценкаПроизводительности
	ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(ПредопределенноеЗначение("Перечисление.КлючевыеОперации.ПроведениеДокументаРасчетСебестоимостиВыпуска"));
	// Конец ОценкаПроизводительности
#КонецЕсли
	
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;
	
	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	// Документ должен принадлежать хотя бы к одному виду учета (управленческий, бухгалтерский, налоговый)
	Если Не ОтражатьВУправленческомУчете И Не ОтражатьВБухгалтерскомУчете И Не ОтражатьВНалоговомУчете И Не ОтражатьВМеждународномУчете Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Документ должен принадлежать хотя бы одному из видов учета: ""Управленческий"", ""Бухгалтерский"", ""Налоговый"" или ""Международный"""".", Отказ, Заголовок);
	КонецЕсли;
	
	ДвиженияПоРегистрамУСНРегл(РежимПроведения, СтруктураШапкиДокумента,Отказ, Заголовок);
	
	Если НЕ УправлениеЗапасами.ИспользуетсяРасширеннаяАналитикаУчета(ПериодРегистрации)
	   И (СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН ИЛИ СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСНДоходы) Тогда
	   // Флаги ОтражатьВНалоговомУчетеУСН и ОтражатьВНалоговомУчетеУСНДоходы устанавливаются, если документ отражается в налоговом учете.
	   // При РАУЗ документ одновременно проводится в бухгалтерском и налоговом учете. При применении УСН в этом случае 
	   // нужно сформировать движения по бухгалтерскому учету
		Возврат;
	КонецЕсли;
	
	ПроверкаРеквизитов(Отказ, Заголовок, СтруктураШапкиДокумента);
	
	Если ОтражатьВУправленческомУчете Тогда
		мУчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиУпр(КонецМесяца(ПериодРегистрации),истина);
	Иначе
		мУчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(КонецМесяца(ПериодРегистрации), Организация,истина);
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(мУчетнаяПолитика) Тогда
		Отказ = Истина;
	КонецЕсли;
	
	ПроверитьСписокДействий(Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураТаблицДвижений = ПолучитьСтруктуруТаблицДвиженийРегистров(СтруктураШапкиДокумента);
	
	// Добавим дополнительные поля в структуру шапки документа.
	ПодготовитьСтруктуруШапкиДокумента(
		СтруктураШапкиДокумента,
		Отказ, 
		Заголовок
		);
		
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ИспользоватьРасширеннуюАналитику Тогда
		
		// При использовании расширенной аналитики документ проводить только по налоговому учету не требуется.
		Если Не ОтражатьВБухгалтерскомУчете
		   И ОтражатьВНалоговомУчете
		Тогда
			Возврат;
		КонецЕсли;
		
		Если ОтражатьВУправленческомУчете
		   И Не СтруктураШапкиДокумента.ОтражатьЗатратыВУпрУчете
		Тогда
			Возврат;
		КонецЕсли;
	
	КонецЕсли;
	
	ОбщегоНазначения.Сообщение(
		Заголовок,
		Перечисления.ВидыСообщений.Раздел,
		//Перечисления.ВидыСообщений.ВажнаяИнформация,
		, // Заголовок
		Ссылка
	);
	
	// Выполнение заданных в документе действий.
	Если СтруктураШапкиДокумента.ИспользоватьРасширеннуюАналитику Тогда
		
		ТаблицаОшибок = УправлениеЗатратами.СформироватьТаблицуОшибок();
		
		ЗаполнитьСпособыРаспределенияЗатрат(СтруктураШапкиДокумента, Отказ, Заголовок);
		
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
		// Выполнение заданных в документе действий (на сервере)
		ПроцедурыРасчетаСебестоимостиРасширеннаяАналитика.ВыполнитьДействияДокумента(
			СтруктураШапкиДокумента, 
			ТаблицаОшибок);
			
		УправлениеЗатратами.ВывестиСообщенияОбОшибках(
			СтруктураШапкиДокумента,
			ТаблицаОшибок,
			"" // Заголовок
		);
	Иначе
		ВыполнениеДействийДокумента(
			СтруктураШапкиДокумента,
			СтруктураТаблицДвижений
			);
	КонецЕсли;
	
	ОбщегоНазначения.Сообщение("Расчет себестоимости завершен.", Перечисления.ВидыСообщений.Раздел);
	
	// Зарегистрируем документ в последовательности.
	ЗарегистрироватьДокументВПоследовательностях(СтруктураШапкиДокумента);
	
#Если Сервер Тогда
	// ОценкаПроизводительности
	ОценкаПроизводительностиКлиентСервер.ЗакончитьЗамерВремени(ПредопределенноеЗначение("Перечисление.КлючевыеОперации.ПроведениеДокументаРасчетСебестоимостиВыпуска"));
	// Конец ОценкаПроизводительности
#КонецЕсли

КонецПроцедуры // ОбработкаПроведения()
