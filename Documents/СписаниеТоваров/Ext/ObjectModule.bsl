Перем мУдалятьДвижения;

Перем мВалютаРегламентированногоУчета Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда

// Функция рассчитывает сумму списанную по текущей строке документа
//
Функция РассчитатьСуммуСписания( ТекСтрока, ТабДвижений)
	
	СтруктПоиска = Новый Структура;
	СтруктПоиска.Вставить( "Номенклатура",               ТекСтрока.Номенклатура);
	СтруктПоиска.Вставить( "ХарактеристикаНоменклатуры", ТекСтрока.Характеристика);
	Если (НЕ ТекСтрока.Номенклатура.ВестиУчетПоСериям) ИЛИ (ТекСтрока.Номенклатура.ВестиПартионныйУчетПоСериям) Тогда
		СтруктПоиска.Вставить( "СерияНоменклатуры",          ТекСтрока.Серия);
	КонецЕсли;	
	СтруктПоиска.Вставить( "СчетУчета",                  ТекСтрока.СчетУчетаБУ);
	Если ВидОперации = Перечисления.ВидыОперацийСписаниеТоваров.ТоварыПродукция Тогда
		//для оборудования качество не заполняется
		СтруктПоиска.Вставить( "Качество",                   ТекСтрока.Качество);
	КонецЕсли;
	
	НаборСтрок = ТабДвижений.НайтиСтроки(СтруктПоиска);
	КолСписать = ТекСтрока.Количество;
	Сумма      = 0;
	
	Для Каждого СтрокаДвиж Из НаборСтрок Цикл
		Если КолСписать >= ТекСтрока.Количество Тогда
			Сумма      = Сумма      + СтрокаДвиж.Стоимость;
			КолСписать = КолСписать - СтрокаДвиж.Количество;
			СтрокаДвиж.Стоимость  = 0;
			СтрокаДвиж.Количество = 0;
		Иначе
			Если Не СтрокаДвиж.Количество = 0 Тогда
				СумСписать = Окр( СтрокаДвиж.Стоимость * КолСписать / СтрокаДвиж.Количество, 2, 1);
				Сумма      = Сумма + СумСписать;
				СтрокаДвиж.Стоимость  = СтрокаДвиж.Стоимость  - СумСписать;
				СтрокаДвиж.Количество = СтрокаДвиж.Количество - КолСписать;
			Иначе
				Сумма = Сумма + СтрокаДвиж.Стоимость;
				СтрокаДвиж.Стоимость = 0;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Сумма;
	
КонецФункции // РассчитатьСуммуСписания()

// Функция формирует табличный документ с печатной формой накладной,
// разработанной методистами
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьСписаниеТоваров()

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.УстановитьПараметр("ВидСкладаНТТ",    Перечисления.ВидыСкладов.НТТ);
	Запрос.УстановитьПараметр("Организация",     Организация);
	Запрос.УстановитьПараметр("Подразделение",   Подразделение);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номер,
	|	Дата,
	|	СписаниеТоваров.Организация,
	|	Склад,
	|	Склад.Представление         КАК ПредставлениеСклада,
	|	ПРЕДСТАВЛЕНИЕ(
	|	ВЫБОР	КОГДА СписаниеТоваров.ОтражатьВБухгалтерскомУчете
	|			ТОГДА ЕСТЬNULL(ТаблицаСоответствиеОрганизации.ПодразделениеОрганизации, """")
	|			ИНАЧЕ СписаниеТоваров.Подразделение
	|	КОНЕЦ) КАК ПредставлениеПодразделения,
	|	ВЫБОР	КОГДА СписаниеТоваров.ОтражатьВБухгалтерскомУчете
	|			ТОГДА ЕСТЬNULL(ТаблицаСоответствиеОрганизации.ПодразделениеОрганизации, """")
	|			ИНАЧЕ СписаниеТоваров.Подразделение
	|	КОНЕЦ КАК Подразделение,
	|	СуммаДокумента,
	|	Константы.ВалютаРегламентированногоУчета ВалютаДокумента,
	|	Товары.(
	|		НомерСтроки,
	|		Номенклатура,
	|		Номенклатура.НаименованиеПолное КАК Товар,
	|		Номенклатура.Код                КАК Код,
	|		Номенклатура.Артикул            КАК Артикул,
	|		КоличествоМест,
	|		Количество,
	|		Качество,
	|		СчетУчетаБУ,
	|		ЕдиницаИзмерения.Представление     КАК ЕдиницаИзмерения,
	|		ЕдиницаИзмеренияМест.Представление КАК ЕдиницаИзмеренияМест,
	|		ВЫБОР
	|			КОГДА Склад.ВидСклада = &ВидСкладаНТТ ТОГДА Цена
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК Цена,
	|		ВЫБОР
	|			КОГДА Склад.ВидСклада = &ВидСкладаНТТ ТОГДА Сумма
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК Сумма,
	|		ХарактеристикаНоменклатуры КАК Характеристика,
	|		СерияНоменклатуры КАК Серия
	|	),
	|	ВозвратнаяТара.(
	|		НомерСтроки,
	|		Номенклатура,
	|		Номенклатура.НаименованиеПолное КАК Товар,
	|		Номенклатура.Код                КАК Код,
	|		Номенклатура.Артикул            КАК Артикул,
	|		Количество,
	|		Номенклатура.ЕдиницаХраненияОстатков.Представление КАК ЕдиницаИзмерения,
	|		0 КАК Цена,
	|		0 КАК Сумма
	|	)
	|ИЗ
	|	Документ.СписаниеТоваров КАК СписаниеТоваров
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|(
	|	ВЫБРАТЬ
	|		СоответсвиеПодразделений.Подразделение,
	|		СоответсвиеПодразделений.Организация,
	|		МИНИМУМ(СоответсвиеПодразделений.ПодразделениеОрганизации) КАК ПодразделениеОрганизации,
	|		МАКСИМУМ(СоответсвиеПодразделений.ПодразделениеОрганизации) КАК ПодразделениеОрг
	|	ИЗ
	|		РегистрСведений.СоответствиеПодразделенийИПодразделенийОрганизаций КАК СоответсвиеПодразделений
	|	ГДЕ
	|		Подразделение = &Подразделение
	|		И Организация = &Организация
	|		И Организация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|		И Подразделение <> ЗНАЧЕНИЕ(Справочник.Подразделения.ПустаяСсылка)
	|	СГРУППИРОВАТЬ ПО
	|		Подразделение,
	|		Организация
	|	ИМЕЮЩИЕ
	|		КОЛИЧЕСТВО(*) = 1
	|) ТаблицаСоответствиеОрганизации
	|ПО
	|	ТаблицаСоответствиеОрганизации.Подразделение = СписаниеТоваров.Подразделение
	|	И ТаблицаСоответствиеОрганизации.Организация = СписаниеТоваров.Организация
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	Константы КАК Константы
	|ПО
	|	ИСТИНА
	|ГДЕ
	|	СписаниеТоваров.Ссылка = &ТекущийДокумент
	|УПОРЯДОЧИТЬ ПО
	|	Товары.НомерСтроки,
	|	ВозвратнаяТара.НомерСтроки
	|";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	ВыборкаСтрокТовары = Шапка.Товары.Выбрать();
	ВыборкаСтрокТара   = Шапка.ВозвратнаяТара.Выбрать();

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СписаниеТоваров_Накладная";

	Макет = ПолучитьМакет("Накладная");

	// Выводим шапку накладной
	ОбластьМакета                          = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.ТекстЗаголовка = ОбщегоНазначения.СформироватьЗаголовокДокумента(Шапка, "Списание товаров");
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("РевизитыОрганизации");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата), "ПолноеНаименование,");
	ОбластьМакета.Параметры.ПредставлениеОрганизации = ПредставлениеОрганизации;
	ТабДокумент.Вывести(ОбластьМакета);

	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ВыводитьКоды = Истина;
		Колонка = "Артикул";
	ИначеЕсли ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
		ВыводитьКоды = Истина;
		Колонка = "Код";
	Иначе
		ВыводитьКоды = Ложь;
	КонецЕсли;
	
	//Движения.ПартииТоваровНаСкладахБухгалтерскийУчет.Прочитать();
	
	СтруктраПараметров = Новый Структура();
	СтруктраПараметров.Вставить("Регистратор", ЭтотОбъект.Ссылка);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	СписаниеТоваров.Номенклатура,
	|	СписаниеТоваров.ХарактеристикаНоменклатуры,
	|	СписаниеТоваров.СерияНоменклатуры,
	|	СписаниеТоваров.СчетУчетаБУ КАК СчетУчета,
	|	СписаниеТоваров.Качество,
	|	СписаниеТоваров.Количество,
	|	ВЫБОР
	|		КОГДА СписаниеТоваров.Ссылка.Склад.ВидСклада <> ЗНАЧЕНИЕ(Перечисление.ВидыСкладов.НТТ)
	|			ТОГДА ВЫРАЗИТЬ(
	|				ЕСТЬNULL(ТаблицаСебестоимостиОбороты.Стоимость, 0)
	|				* СписаниеТоваров.Количество 
	|				* СписаниеТоваров.Коэффициент
	|				/ ЕСТЬNULL(СписаниеТоваров.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент, 1)
	|				/ ЕСТЬNULL(ТаблицаСебестоимостиОбороты.Количество, 1)
	|	 		КАК ЧИСЛО(15,2))
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Стоимость,
	|	СписаниеТоваров.ХарактеристикаНоменклатуры КАК Характеристика,
	|	СписаниеТоваров.СерияНоменклатуры КАК Серия,
	|	СписаниеТоваров.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	Документ.СписаниеТоваров.Товары КАК СписаниеТоваров
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСебестоимостиОбороты КАК ТаблицаСебестоимостиОбороты
	|		ПО СписаниеТоваров.Номенклатура = ТаблицаСебестоимостиОбороты.Номенклатура
	|			И СписаниеТоваров.Ссылка = ТаблицаСебестоимостиОбороты.Регистратор
	|			И (СписаниеТоваров.ХарактеристикаНоменклатуры = ТаблицаСебестоимостиОбороты.ХарактеристикаНоменклатуры
	|				ИЛИ ТаблицаСебестоимостиОбороты.ХарактеристикаНоменклатуры = ""Не используется"")
	|			И (СписаниеТоваров.СерияНоменклатуры = ТаблицаСебестоимостиОбороты.СерияНоменклатуры
	|				ИЛИ ТаблицаСебестоимостиОбороты.СерияНоменклатуры = ""Не используется"")
	|			И ((СписаниеТоваров.СчетУчетаБУ = ТаблицаСебестоимостиОбороты.СчетУчета) 
	|				ИЛИ (ТаблицаСебестоимостиОбороты.СчетУчета = ""Не используется""))"+
	?(ВидОперации=Перечисления.ВидыОперацийСписаниеТоваров.ТоварыПродукция,"
	|			И ((СписаниеТоваров.Качество = ТаблицаСебестоимостиОбороты.Качество)
	|				ИЛИ (ТаблицаСебестоимостиОбороты.Качество = ""Не используется""))","")+"
	|ГДЕ
	|	СписаниеТоваров.Ссылка = &Регистратор";
	
	ТабДвижений = УправлениеЗапасами.ПолучитьТаблицуЗатратДляПечатиИЗаполненияДокументов(Ссылка, ТекстЗапроса, СтруктраПараметров);
	
	Если ТабДвижений = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;	
	

	ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицы|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаКодов");
	ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицы|Данные");

	ТабДокумент.Вывести(ОбластьНомера);
	Если ВыводитьКоды Тогда
		ОбластьКодов.Параметры.ИмяКолонкиКодов = Колонка;
		ТабДокумент.Присоединить(ОбластьКодов);
	КонецЕсли;
	ТабДокумент.Присоединить(ОбластьДанных);
	ОбластьКолонкаТовар = Макет.Область("Товар");
	Если Не ВыводитьКоды Тогда
		ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки
		                                  + Макет.Область("КолонкаКодов").ШиринаКолонки;
	КонецЕсли;

	ОбластьНомера = Макет.ПолучитьОбласть("Строка|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("Строка|КолонкаКодов");
	ОбластьДанных = Макет.ПолучитьОбласть("Строка|Данные");

	СуммаИтого = 0;
	Ном        = 0;

	// Товары
	Пока ВыборкаСтрокТовары.Следующий() Цикл

		Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;

		Ном = Ном + 1;

		ОбластьНомера.Параметры.Заполнить(ВыборкаСтрокТовары);
		ОбластьНомера.Параметры.НомерСтроки = Ном;
		ТабДокумент.Вывести(ОбластьНомера);

		Если ВыводитьКоды Тогда
			Если Колонка = "Артикул" Тогда
				ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТовары.Артикул;
			Иначе
				ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТовары.Код;
			КонецЕсли;
			ТабДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;

		ОбластьДанных.Параметры.Заполнить(ВыборкаСтрокТовары);
		ОбластьДанных.Параметры.Товар = ВыборкаСтрокТовары.Товар + ФормированиеПечатныхФорм.ПредставлениеСерий(ВыборкаСтрокТовары);

		Если Склад.ВидСклада <> Перечисления.ВидыСкладов.НТТ Тогда
			ОбластьДанных.Параметры.Сумма = РассчитатьСуммуСписания(ВыборкаСтрокТовары, ТабДвижений);
			ОбластьДанных.Параметры.Цена  = Окр(ОбластьДанных.Параметры.Сумма / ОбластьДанных.Параметры.Количество, 2, 1);
		КонецЕсли;
		
		ТабДокумент.Присоединить(ОбластьДанных);

		СуммаИтого = СуммаИтого + ОбластьДанных.Параметры.Сумма;

	КонецЦикла;

	// Тара
	Пока ВыборкаСтрокТара.Следующий() Цикл

		Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТара.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;

		Ном = Ном + 1;

		ОбластьНомера.Параметры.Заполнить(ВыборкаСтрокТара);
		ОбластьНомера.Параметры.НомерСтроки = Ном;
		ТабДокумент.Вывести(ОбластьНомера);

		Если ВыводитьКоды Тогда
			Если Колонка = "Артикул" Тогда
				ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТара.Артикул;
			Иначе
				ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТара.Код;
			КонецЕсли;
			ТабДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;

		ОбластьДанных.Параметры.Заполнить(ВыборкаСтрокТара);
		ОбластьДанных.Параметры.Товар = ВыборкаСтрокТара.Товар + " (возвратная тара)";

		ТабДокумент.Присоединить(ОбластьДанных);

		СуммаИтого = СуммаИтого + ВыборкаСтрокТара.Сумма;

	КонецЦикла;

	// Вывести Итого
	ОбластьНомера = Макет.ПолучитьОбласть("Итого|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("Итого|КолонкаКодов");
	ОбластьДанных = Макет.ПолучитьОбласть("Итого|Данные");

	ТабДокумент.Вывести(ОбластьНомера);
	Если ВыводитьКоды Тогда
		ТабДокумент.Присоединить(ОбластьКодов);
	КонецЕсли;
	ОбластьДанных.Параметры.Всего = ОбщегоНазначения.ФорматСумм(СуммаИтого);
	ТабДокумент.Присоединить(ОбластьДанных);

	// Вывести Сумму прописью
	ОбластьМакета                          = Макет.ПолучитьОбласть("СуммаПрописью");
	ОбластьМакета.Параметры.ИтоговаяСтрока = "Всего наименований " + ВыборкаСтрокТовары.Количество()
	                                       + ", на сумму " + ОбщегоНазначения.ФорматСумм(СуммаИтого, мВалютаРегламентированногоУчета);
	ОбластьМакета.Параметры.СуммаПрописью  = ОбщегоНазначения.СформироватьСуммуПрописью(СуммаИтого, мВалютаРегламентированногоУчета);
	ТабДокумент.Вывести(ОбластьМакета);

	// Вывести подписи
	ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
	ТабДокумент.Вывести(ОбластьМакета);

	Возврат ТабДокумент;

КонецФункции // ПечатьСписаниеТоваров()

// Формирует унифицированную форму ТОРГ-16
//
// Возвращаемое значение:
//  Табличный документ - унифицировання форма ТОРГ-16
//
Функция ПечатьТОРГ16()

	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ТоварКод = "Артикул";
	Иначе
		ТоварКод = "Код";
	КонецЕсли;

	СтруктраПараметров = Новый Структура();
	СтруктраПараметров.Вставить("ТекущийДокумент", ЭтотОбъект.Ссылка);
	СтруктраПараметров.Вставить("Регистратор",     ЭтотОбъект.Ссылка);
	СтруктраПараметров.Вставить("ВидСкладаНТТ",    Перечисления.ВидыСкладов.НТТ);
	СтруктраПараметров.Вставить("ТекГраница",      Новый Граница(Дата, ВидГраницы.Включая));
	СтруктраПараметров.Вставить("Организация",     Организация);
	СтруктраПараметров.Вставить("Подразделение",   Подразделение);


	//////|		Номенклатура."+ ТоварКод + "    КАК ТоварКод,
	//////|		Номенклатура."+ ТоварКод + "    КАК ТоварКод,
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	СписаниеТоваров.Ссылка.Номер КАК НомерДокумента,
	|	СписаниеТоваров.Ссылка.Дата КАК ДатаДокумента,
	|	СписаниеТоваров.Ссылка.Организация,
	|	СписаниеТоваров.Ссылка.Организация КАК Руководители,
	|	СписаниеТоваров.Ссылка.Склад,
	|	СписаниеТоваров.Ссылка.Склад.Представление КАК ПредставлениеСклада,
	|	ПРЕДСТАВЛЕНИЕ(
	|	ВЫБОР	КОГДА СписаниеТоваров.Ссылка.ОтражатьВБухгалтерскомУчете
	|			ТОГДА ЕСТЬNULL(ТаблицаСоответствиеОрганизации.ПодразделениеОрганизации, """")
	|			ИНАЧЕ СписаниеТоваров.Ссылка.Подразделение
	|	КОНЕЦ) КАК ПредставлениеПодразделения,
	|	ВЫБОР	КОГДА СписаниеТоваров.Ссылка.ОтражатьВБухгалтерскомУчете
	|			ТОГДА ЕСТЬNULL(ТаблицаСоответствиеОрганизации.ПодразделениеОрганизации, """")
	|			ИНАЧЕ СписаниеТоваров.Ссылка.Подразделение
	|	КОНЕЦ КАК Подразделение,
	|	СписаниеТоваров.Ссылка.Основание КАК Основание,
	|	СписаниеТоваров.Ссылка.СуммаДокумента,
	|	Константы.ВалютаРегламентированногоУчета КАК ВалютаДокумента,
	|	СписаниеТоваров.Номенклатура,
	|	СписаниеТоваров.Номенклатура.НаименованиеПолное КАК ТоварНаименование,
	|	СписаниеТоваров.Номенклатура.Код КАК ТоварКод,
	|	СписаниеТоваров.Количество,
	|	СписаниеТоваров.КоличествоМест,
	|	СписаниеТоваров.Качество,
	|	СписаниеТоваров.ЕдиницаИзмерения.Представление КАК ЕдиницаИзмеренияНаименование,
	|	СписаниеТоваров.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код КАК ЕдиницаИзмеренияКодПоОКЕИ,
	|	СписаниеТоваров.ЕдиницаИзмеренияМест.Представление КАК ЕдиницаИзмеренияМестНаименование,
	|	СписаниеТоваров.ЕдиницаИзмерения.Вес КАК МассаОдногоМеста,
	|	ВЫБОР
	|		КОГДА СписаниеТоваров.Ссылка.Склад.ВидСклада <> &ВидСкладаНТТ
	|			ТОГДА ВЫРАЗИТЬ(
	|				ЕСТЬNULL(ТаблицаСебестоимостиОбороты.Стоимость, 0)
	|				* СписаниеТоваров.Количество 
	|				* СписаниеТоваров.Коэффициент
	|				/ ЕСТЬNULL(СписаниеТоваров.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент, 1)
	|				/ ЕСТЬNULL(ТаблицаСебестоимостиОбороты.Количество, 1)
	|	 		КАК ЧИСЛО(15,2))
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Стоимость,
	|	СписаниеТоваров.ХарактеристикаНоменклатуры КАК Характеристика,
	|	СписаниеТоваров.СерияНоменклатуры КАК Серия,
	|	1 КАК ТоварТара,
	|	СписаниеТоваров.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	Документ.СписаниеТоваров.Товары КАК СписаниеТоваров
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|(
	|	ВЫБРАТЬ
	|		СоответсвиеПодразделений.Подразделение,
	|		СоответсвиеПодразделений.Организация,
	|		МИНИМУМ(СоответсвиеПодразделений.ПодразделениеОрганизации) КАК ПодразделениеОрганизации,
	|		МАКСИМУМ(СоответсвиеПодразделений.ПодразделениеОрганизации) КАК ПодразделениеОрг
	|	ИЗ
	|		РегистрСведений.СоответствиеПодразделенийИПодразделенийОрганизаций КАК СоответсвиеПодразделений
	|	ГДЕ
	|		Подразделение = &Подразделение
	|		И Организация = &Организация
	|		И Организация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|		И Подразделение <> ЗНАЧЕНИЕ(Справочник.Подразделения.ПустаяСсылка)
	|	СГРУППИРОВАТЬ ПО
	|		Подразделение,
	|		Организация
	|	ИМЕЮЩИЕ
	|		КОЛИЧЕСТВО(*) = 1
	|) ТаблицаСоответствиеОрганизации
	|ПО
	|	ТаблицаСоответствиеОрганизации.Подразделение = СписаниеТоваров.Ссылка.Подразделение
	|	И ТаблицаСоответствиеОрганизации.Организация = СписаниеТоваров.Ссылка.Организация
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСебестоимостиОбороты КАК ТаблицаСебестоимостиОбороты
	|		ПО СписаниеТоваров.Номенклатура = ТаблицаСебестоимостиОбороты.Номенклатура
	|			И СписаниеТоваров.Ссылка = ТаблицаСебестоимостиОбороты.Регистратор
	|			И ((СписаниеТоваров.ХарактеристикаНоменклатуры = ТаблицаСебестоимостиОбороты.ХарактеристикаНоменклатуры) 
	|				ИЛИ (ТаблицаСебестоимостиОбороты.ХарактеристикаНоменклатуры = ""Не используется""))
	|			И ((СписаниеТоваров.СерияНоменклатуры = ТаблицаСебестоимостиОбороты.СерияНоменклатуры)
	|				ИЛИ (ТаблицаСебестоимостиОбороты.СерияНоменклатуры = ""Не используется""))
	|			И ((СписаниеТоваров.СчетУчетаБУ = ТаблицаСебестоимостиОбороты.СчетУчета) 
	|				ИЛИ (ТаблицаСебестоимостиОбороты.СчетУчета = ""Не используется""))"+
	?(ВидОперации=Перечисления.ВидыОперацийСписаниеТоваров.ТоварыПродукция,"
	|			И ((СписаниеТоваров.Качество = ТаблицаСебестоимостиОбороты.Качество)
	|				ИЛИ (ТаблицаСебестоимостиОбороты.Качество = ""Не используется""))	,",",")+"
	|	Константы КАК Константы
	|ГДЕ
	|	СписаниеТоваров.Ссылка = &ТекущийДокумент
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СписаниеТоваров.Ссылка.Номер,
	|	СписаниеТоваров.Ссылка.Дата,
	|	СписаниеТоваров.Ссылка.Организация,
	|	СписаниеТоваров.Ссылка.Организация,
	|	СписаниеТоваров.Ссылка.Склад,
	|	СписаниеТоваров.Ссылка.Склад.Представление,
	|	ВЫБОР	КОГДА СписаниеТоваров.Ссылка.ОтражатьВБухгалтерскомУчете
	|			ТОГДА ЕСТЬNULL(ТаблицаСоответствиеОрганизации.ПодразделениеОрганизации, """")
	|			ИНАЧЕ СписаниеТоваров.Ссылка.Подразделение
	|	КОНЕЦ КАК ПредставлениеПодразделения,
	|	ВЫБОР	КОГДА СписаниеТоваров.Ссылка.ОтражатьВБухгалтерскомУчете
	|			ТОГДА ЕСТЬNULL(ТаблицаСоответствиеОрганизации.ПодразделениеОрганизации, """")
	|			ИНАЧЕ СписаниеТоваров.Ссылка.Подразделение
	|	КОНЕЦ КАК Подразделение,
	|	СписаниеТоваров.Ссылка.Основание,
	|	СписаниеТоваров.Ссылка.СуммаДокумента,
	|	Константы.ВалютаРегламентированногоУчета,
	|	СписаниеТоваров.Номенклатура,
	|	СписаниеТоваров.Номенклатура.НаименованиеПолное,
	|	СписаниеТоваров.Номенклатура.Код,
	|	СписаниеТоваров.Количество,
	|	NULL,
	|	NULL,
	|	СписаниеТоваров.Номенклатура.БазоваяЕдиницаИзмерения.Представление,
	|	СписаниеТоваров.Номенклатура.БазоваяЕдиницаИзмерения.Код,
	|	"""",
	|	0,
	|	0,
	|	NULL,
	|	NULL,
	|	2,
	|	СписаниеТоваров.НомерСтроки
	|ИЗ
	|	Документ.СписаниеТоваров.ВозвратнаяТара КАК СписаниеТоваров
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|(
	|	ВЫБРАТЬ
	|		СоответсвиеПодразделений.Подразделение,
	|		СоответсвиеПодразделений.Организация,
	|		МИНИМУМ(СоответсвиеПодразделений.ПодразделениеОрганизации) КАК ПодразделениеОрганизации,
	|		МАКСИМУМ(СоответсвиеПодразделений.ПодразделениеОрганизации) КАК ПодразделениеОрг
	|	ИЗ
	|		РегистрСведений.СоответствиеПодразделенийИПодразделенийОрганизаций КАК СоответсвиеПодразделений
	|	ГДЕ
	|		Подразделение = &Подразделение
	|		И Организация = &Организация
	|		И Организация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|		И Подразделение <> ЗНАЧЕНИЕ(Справочник.Подразделения.ПустаяСсылка)
	|	СГРУППИРОВАТЬ ПО
	|		Подразделение,
	|		Организация
	|	ИМЕЮЩИЕ
	|		КОЛИЧЕСТВО(*) = 1
	|) ТаблицаСоответствиеОрганизации
	|ПО
	|	ТаблицаСоответствиеОрганизации.Подразделение = СписаниеТоваров.Ссылка.Подразделение
	|	И ТаблицаСоответствиеОрганизации.Организация = СписаниеТоваров.Ссылка.Организация
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	Константы КАК Константы
	|ПО ИСТИНА
	|ГДЕ
	|	СписаниеТоваров.Ссылка = &ТекущийДокумент
	|УПОРЯДОЧИТЬ ПО
	|	ТоварТара,
	|	НомерСтроки";

	ТаблицаЗатрат = УправлениеЗапасами.ПолучитьТаблицуЗатратДляПечатиИЗаполненияДокументов(Ссылка, ТекстЗапроса, СтруктраПараметров);
	
	Если ТаблицаЗатрат = Неопределено Тогда
		Возврат Неопределено;
	ИначеЕсли ТаблицаЗатрат.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Шапка = ТаблицаЗатрат[0];

	Макет       = ПолучитьОбщийМакет("ТОРГ16");
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СписаниеТоваров_ТОРГ16";

	// Выводим общие реквизиты шапки
	ОписаниеОрганизации = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Организация, Шапка.ДатаДокумента);
	ОбластьМакета       = Макет.ПолучитьОбласть("Шапка");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.ДатаДокумента            = Шапка.ДатаДокумента;
	ОбластьМакета.Параметры.ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(ОписаниеОрганизации);
	ОбластьМакета.Параметры.ОрганизацияПоОКПО        = ОписаниеОрганизации.КодПоОКПО;

	Руководители = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизаций(Шапка.Руководители, Шапка.ДатаДокумента,);
	Руководитель = Руководители.Руководитель;
	Бухгалтер    = Руководители.ГлавныйБухгалтер;
	ОбластьМакета.Параметры.ФИОРуководителя = Руководитель;

	ТабДокумент.Вывести(ОбластьМакета);

	СтрокНаСтранице = 23;
	СтрокШапки      = 11;
	СтрокПодвала    = 0;
	НомерСтраницы   = 1;
	Ном             = 0;

	КоличествоСтрок = ТаблицаЗатрат.Количество();

	Если КоличествоСтрок = 1 Тогда
		ПереноситьПоследнююСтроку = 0;
	Иначе
		ЦелыхСтраницСПодвалом     = Цел((СтрокШапки + КоличествоСтрок + СтрокПодвала) / СтрокНаСтранице);
		ЦелыхСтраницБезПодвала    = Цел((СтрокШапки + КоличествоСтрок - 1) / СтрокНаСтранице);
		ПереноситьПоследнююСтроку = ЦелыхСтраницСПодвалом - ЦелыхСтраницБезПодвала;
	КонецЕсли;

	// Выводим заголовок таблицы
	ЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицыПервогоЛиста");
	ТабДокумент.Вывести(ЗаголовокТаблицы);

	ОбластьМакета = Макет.ПолучитьОбласть("СтрокаПервогоЛиста");

	// Товары
	Для Каждого ВыборкаСтрокТовары Из ТаблицаЗатрат Цикл
		Если НЕ ВыборкаСтрокТовары.ТоварТара = 1 Тогда
			Продолжить;
		КонецЕсли;

		Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;

		Ном = Ном + 1;

		//Начинаем новую страницу, если предыдущая строка была последней на странице
		//или пора переносить последнюю строку на последнюю страницу с подвалом.
		ЦелаяСтраница = (СтрокШапки + Ном - 1) / СтрокНаСтранице;
		Если (ЦелаяСтраница = Цел(ЦелаяСтраница))
		 или ((ПереноситьПоследнююСтроку = 1) и (Ном = КоличествоСтрок)) Тогда

			ИтогоСтоимостьПоСтранице = 0;
			НомерСтраницы            = НомерСтраницы + 1;
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ТабДокумент.Вывести(ЗаголовокТаблицы);
		КонецЕсли;

		ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокТовары);
		
		ОбластьМакета.Параметры.ДатаСписанияТовара = Шапка.ДатаДокумента;

		ТабДокумент.Вывести(ОбластьМакета);
	КонецЦикла;

	// Тара
	Для Каждого ВыборкаСтрокТара Из ТаблицаЗатрат Цикл
		Если НЕ ВыборкаСтрокТара.ТоварТара = 2 Тогда
			Продолжить;
		КонецЕсли;

		Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТара.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;

		Ном = Ном + 1;

		//Начинаем новую страницу, если предыдущая строка была последней на странице
		//или пора переносить последнюю строку на последнюю страницу с подвалом.
		ЦелаяСтраница = (СтрокШапки + Ном - 1) / СтрокНаСтранице;
		Если (ЦелаяСтраница = Цел(ЦелаяСтраница))
		 или ((ПереноситьПоследнююСтроку = 1) и (Ном = КоличествоСтрок)) Тогда

			ИтогоСтоимостьПоСтранице = 0;
			НомерСтраницы            = НомерСтраницы + 1;
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ТабДокумент.Вывести(ЗаголовокТаблицы);
		КонецЕсли;

		ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокТара);
		ОбластьМакета.Параметры.ДатаСписанияТовара = Шапка.ДатаДокумента;

		ТабДокумент.Вывести(ОбластьМакета);
	КонецЦикла;

	СтрокНаСтранице = 27;
	СтрокШапки      = 5;
	СтрокПодвала    = 11;
	НомерСтраницы   = 1;
	Ном             = 0;

	ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();

	НомерСтраницы                            = НомерСтраницы + 1;
	ЗаголовокТаблицы                         = Макет.ПолучитьОбласть("ЗаголовокТаблицыВторогоЛиста");
	ЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы; 
	ТабДокумент.Вывести(ЗаголовокТаблицы);

	Если КоличествоСтрок = 1 Тогда
		ПереноситьПоследнююСтроку = 0;
	Иначе
		ЦелыхСтраницСПодвалом     = Цел((СтрокШапки + КоличествоСтрок + СтрокПодвала) / СтрокНаСтранице);
		ЦелыхСтраницБезПодвала    = Цел((СтрокШапки + КоличествоСтрок - 1) / СтрокНаСтранице);
		ПереноситьПоследнююСтроку = ЦелыхСтраницСПодвалом - ЦелыхСтраницБезПодвала;
	КонецЕсли;

	ИтогоСтоимость = 0;

	// Выводим многострочную часть докмента
	ОбластьМакета = Макет.ПолучитьОбласть("СтрокаВторогоЛиста");

	// Товары
	Для Каждого ВыборкаСтрокТовары Из ТаблицаЗатрат Цикл
		Если НЕ ВыборкаСтрокТовары.ТоварТара = 1 Тогда
			Продолжить;
		КонецЕсли;

		Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;

		Ном = Ном + 1;

		//Начинаем новую страницу, если предыдущая строка была последней на странице
		//или пора переносить последнюю строку на последнюю страницу с подвалом.
		ЦелаяСтраница = (СтрокШапки + Ном - 1) / СтрокНаСтранице;
		
		Если (ЦелаяСтраница = Цел(ЦелаяСтраница))
		 или ((ПереноситьПоследнююСтроку = 1) и (Ном = КоличествоСтрок)) Тогда

			ИтогоСтоимостьПоСтранице = 0;
			НомерСтраницы            = НомерСтраницы + 1;
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы;
			ТабДокумент.Вывести(ЗаголовокТаблицы);
		КонецЕсли;
	
		ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокТовары);

		КоличествоМест = Формат(ВыборкаСтрокТовары.Количество, "ЧЦ=15; ЧДЦ=3");

		Если ВыборкаСтрокТовары.КоличествоМест <> 0 И ЗначениеЗаполнено(ВыборкаСтрокТовары.ЕдиницаИзмеренияМестНаименование) Тогда
			КоличествоМест = КоличествоМест 
			                 + Символы.ПС
			                 + " (" + Формат(ВыборкаСтрокТовары.КоличествоМест,"ЧЦ=15; ЧДЦ=0")
			                 + " "
			                 + ВыборкаСтрокТовары.ЕдиницаИзмеренияМестНаименование
			                 + ")";
		КонецЕсли;

		ОбластьМакета.Параметры.КоличествоМест    = КоличествоМест;
		ОбластьМакета.Параметры.ТоварНаименование = ВыборкаСтрокТовары.ТоварНаименование + ФормированиеПечатныхФорм.ПредставлениеСерий(ВыборкаСтрокТовары);
		МассаНетто                                = ВыборкаСтрокТовары.МассаОдногоМеста * ВыборкаСтрокТовары.КоличествоМест;
		ОбластьМакета.Параметры.МассаНетто        = МассаНетто;
		ОбластьМакета.Параметры.Цена = ?(ВыборкаСтрокТовары.Количество = 0, ВыборкаСтрокТовары.Стоимость, Окр(ВыборкаСтрокТовары.Стоимость / ВыборкаСтрокТовары.Количество, 2, 1));
		
		ТабДокумент.Вывести(ОбластьМакета);

		// Обновим итоги по документу
		ИтогоСтоимость = ИтогоСтоимость + ВыборкаСтрокТовары.Стоимость;
	КонецЦикла;

	// Тара
	Для Каждого ВыборкаСтрокТара Из ТаблицаЗатрат Цикл
		Если НЕ ВыборкаСтрокТара.ТоварТара = 2 Тогда
			Продолжить;
		КонецЕсли;

		Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТара.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;

		Ном = Ном + 1;

		//Начинаем новую страницу, если предыдущая строка была последней на странице
		//или пора переносить последнюю строку на последнюю страницу с подвалом.
		ЦелаяСтраница = (СтрокШапки + Ном - 1) / СтрокНаСтранице;
		
		Если (ЦелаяСтраница = Цел(ЦелаяСтраница))
		 или ((ПереноситьПоследнююСтроку = 1) и (Ном = КоличествоСтрок)) Тогда

			ИтогоСтоимостьПоСтранице = 0;
			НомерСтраницы            = НомерСтраницы + 1;
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы;
			ТабДокумент.Вывести(ЗаголовокТаблицы);
		КонецЕсли;
	
		ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокТара);

		ОбластьМакета.Параметры.КоличествоМест    = Формат(ВыборкаСтрокТара.Количество, "ЧЦ=15; ЧДЦ=3");
		ОбластьМакета.Параметры.ТоварНаименование = ВыборкаСтрокТара.ТоварНаименование + " (возвратная тара)";
		ОбластьМакета.Параметры.Цена = ?(ВыборкаСтрокТовары.Количество = 0, ВыборкаСтрокТовары.Стоимость, Окр(ВыборкаСтрокТовары.Стоимость / ВыборкаСтрокТовары.Количество, 2, 1));
		
		ТабДокумент.Вывести(ОбластьМакета);

		// Обновим итоги по документу
		ИтогоСтоимость = ИтогоСтоимость + ВыборкаСтрокТара.Стоимость;
	КонецЦикла;

	// Выводим итоги по документу в общем
	ОбластьМакета = Макет.ПолучитьОбласть("Итого");
	ОбластьМакета.Параметры.Итого = ИтогоСтоимость;
	ТабДокумент.Вывести(ОбластьМакета);
	
	ВалютаПечати = мВалютаРегламентированногоУчета;

	// Выводим подвал документа
	ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.СуммаСписанияПрописью = ОбщегоНазначения.СформироватьСуммуПрописью(ИтогоСтоимость, ВалютаПечати);
	ТабДокумент.Вывести(ОбластьМакета);

	// Зададим параметры макета
	ТабДокумент.ПолеСверху = 0;
	ТабДокумент.ПолеСлева  = 0;
	ТабДокумент.ПолеСнизу  = 0;
	ТабДокумент.ПолеСправа = 0;
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;

	Возврат ТабДокумент;

КонецФункции // ПечатьТОРГ16()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если Не Проведен Тогда
		Предупреждение("Документ можно распечатать только после его проведения!");
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	// Получить экземпляр документа на печать
	Если ИмяМакета = "Ведомость" Тогда
		ТабДокумент = ПечатьСписаниеТоваров();
	ИначеЕсли ИмяМакета = "ТОРГ16" тогда
		ТабДокумент = ПечатьТОРГ16();
		
	ИначеЕсли ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда

		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
		
		Если ТабДокумент = Неопределено Тогда
			Возврат
		КонецЕсли; 
		
	КонецЕсли; 

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()), Ссылка);

КонецПроцедуры // Печать

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	СтруктураМакетов =  Новый Структура("Ведомость", "Акт списания товаров");
	СтруктураМакетов.Вставить("ТОРГ16", "ТОРГ-16 (Акт о списании товаров)");
	
	Возврат СтруктураМакетов;
	
КонецФункции // ПолучитьСтруктуруПечатныхФорм()

#КонецЕсли

// Процедура выполняет заполниение табличной части по инвентаризации товаров.
//
// Параметры:
//  ДокументОснование - ссылка на документ основание (инвентаризация товаров).
//
Процедура ЗаполнитьТоварыПоИнвентаризацииТоваровУпр(ДокументОснование) Экспорт

#Если ВнешнееСоединение Тогда
	Если Товары.Количество() > 0 Тогда
		Товары.Очистить();
	КонецЕсли;
#КонецЕсли

	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ДокументСсылка",          Ссылка);
	Запрос.УстановитьПараметр("ДокументОснованиеСсылка", ДокументОснование);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	МИНИМУМ(Док.НомерСтроки) КАК НомерСтроки,
	|	Док.Номенклатура,
	|	Док.ЕдиницаИзмерения,
	|	Док.ЕдиницаИзмеренияМест,
	|	Док.Ссылка.Склад                              КАК Склад,
	|	МАКСИМУМ(Док.КоличествоУчет - Док.Количество) КАК КоличествоОтклонение,
	|	ВЫБОР
	|		КОГДА СУММА(ВложенныйЗапрос.Количество) ЕСТЬ NULL ТОГДА
	|			0
	|		ИНАЧЕ
	|			СУММА(ВложенныйЗапрос.Количество)
	|	КОНЕЦ КАК КоличествоСписанное,
	|	Док.ЦенаВРознице КАК Цена,
	|	Док.ХарактеристикаНоменклатуры,
	|	Док.СерияНоменклатуры,
	|	Док.Качество
	|ИЗ
	|	Документ.ИнвентаризацияТоваровНаСкладе.Товары КАК Док
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	(ВЫБРАТЬ 
	|       ДокСписание.Номенклатура,
	|       ДокСписание.ХарактеристикаНоменклатуры,
	|       ДокСписание.СерияНоменклатуры,
	|       ДокСписание.Ссылка.Склад                 КАК Склад,
	|		ДокСписание.Количество                   КАК Количество,
	|       ДокСписание.Цена
	|	 ИЗ
	|       Документ.СписаниеТоваров.Товары КАК ДокСписание
	|    ГДЕ
	|       ДокСписание.Ссылка <> &ДокументСсылка
	|       И ДокСписание.Ссылка.Проведен
	|       И ДокСписание.Ссылка.ИнвентаризацияТоваровНаСкладе = &ДокументОснованиеСсылка
	|
	|    ОБЪЕДИНИТЬ ВСЕ
	|
	|	 ВЫБРАТЬ 
	|       ДокОтчетККМ.Номенклатура,
	|       ДокОтчетККМ.ХарактеристикаНоменклатуры,
	|       ДокОтчетККМ.СерияНоменклатуры,
	|       ДокОтчетККМ.Склад                        КАК Склад,
	|		ДокОтчетККМ.Количество                   КАК Количество,
	|       ДокОтчетККМ.Цена
	|	 ИЗ
	|       Документ.ОтчетОРозничныхПродажах.Товары КАК ДокОтчетККМ
	|    ГДЕ
	|         ДокОтчетККМ.Ссылка.Проведен
	|       И ДокОтчетККМ.Ссылка.ИнвентаризацияТоваровНаСкладе = &ДокументОснованиеСсылка) КАК ВложенныйЗапрос
	|ПО
	|      Док.Номенклатура               = ВложенныйЗапрос.Номенклатура
	|    И Док.ХарактеристикаНоменклатуры = ВложенныйЗапрос.ХарактеристикаНоменклатуры
	|    И Док.СерияНоменклатуры          = ВложенныйЗапрос.СерияНоменклатуры
	|    И Док.Ссылка.Склад               = ВложенныйЗапрос.Склад " +
	?(Склад.ВидСклада = Перечисления.ВидыСкладов.НТТ, " 
	|    И Док.Цена                       = ВложенныйЗапрос.Цена ", "") + "
	|
	|ГДЕ
	|	  Док.Ссылка = &ДокументОснованиеСсылка 
	|   И Док.КоличествоУчет - Док.Количество > 0
	|  " + ?(Склад.ВидСклада = Перечисления.ВидыСкладов.НТТ, " И Док.ЦенаВРознице > 0 ", "") + "
	|
	|СГРУППИРОВАТЬ ПО
	|	Док.Ссылка.Склад,
	|	Док.Номенклатура,
	|	Док.ЕдиницаИзмерения,
	|	Док.ЕдиницаИзмеренияМест,
	|	Док.ЦенаВРознице,
	|	Док.ХарактеристикаНоменклатуры,
	|	Док.СерияНоменклатуры,
	|	Док.Качество
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";

	РезультатЗапроса = Запрос.Выполнить();

	Склад = ДокументОснование.Склад;

	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл

		КоличествоСписать = Выборка.КоличествоОтклонение - Выборка.КоличествоСписанное;

		Если КоличествоСписать <= 0 Тогда
			Продолжить;
		КонецЕсли;

		СтрокаТабличнойЧасти = Товары.Добавить();

		СтрокаТабличнойЧасти.Номенклатура               = Выборка.Номенклатура;
		СтрокаТабличнойЧасти.ЕдиницаИзмерения           = Выборка.ЕдиницаИзмерения;
		СтрокаТабличнойЧасти.ЕдиницаИзмеренияМест       = Выборка.ЕдиницаИзмеренияМест;
		СтрокаТабличнойЧасти.Коэффициент                = Выборка.ЕдиницаИзмерения.Коэффициент;
		СтрокаТабличнойЧасти.Качество                   = Выборка.Качество;
		СтрокаТабличнойЧасти.Количество                 = КоличествоСписать;
		СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Выборка.ХарактеристикаНоменклатуры;
		СтрокаТабличнойЧасти.СерияНоменклатуры          = Выборка.СерияНоменклатуры;

		ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

		Если Склад.ВидСклада = Перечисления.ВидыСкладов.НТТ Тогда

			СтрокаТабличнойЧасти.Цена = Выборка.Цена;
			ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

		КонецЕсли;

		ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТабличнойЧасти, "Товары", ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);

	КонецЦикла;

	#Если Клиент Тогда

	Если Товары.Количество() = 0 Тогда
		Сообщить("В документе """ + ДокументОснование.Метаданные().Представление() + """ № " + ДокументОснование.Номер +" отсутствуют товары учетное количество которых превышает фактическое.");
	КонецЕсли;

	#КонецЕсли

КонецПроцедуры // ЗаполнитьТоварыПоИнвентаризацииТоваров()

//Выполняет заполнение счетов учета в переданной строке табличной части
//
Процедура ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТЧ, ИмяТабЧасти, ЗаполнятьБУ, ЗаполнятьНУ) Экспорт

	ЗаполнитьСчетаУчетаВТабЧасти(СтрокаТЧ, ИмяТабЧасти, ЗаполнятьБУ, ЗаполнятьНУ);
	
КонецПроцедуры // ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл()

// Процедура заполняет счета БУ и НУ в указанной табличной части.
//
Процедура ЗаполнитьСчетаУчетаВТабЧасти(ТабличнаяЧасть, ИмяТабЧасти, ЗаполнятьБУ, ЗаполнятьНУ) Экспорт

	СчетаУчетаВДокументах.ЗаполнитьСчетаУчетаТабличнойЧасти(ИмяТабЧасти, ТабличнаяЧасть, ЭтотОбъект, ЗаполнятьБУ, ЗаполнятьНУ);

КонецПроцедуры // ЗаполнитьСчетаУчетаВТабЧасти()

// Заолняет табличную часть по сериям при оперативном проведении
//
Процедура ЗаполнитьПоСериям() Экспорт

	ТоварыТабличнойЧасти = Товары.Выгрузить();
	ТоварыТабличнойЧасти.Свернуть("Номенклатура"); 

	МассивНоменклатуры = ТоварыТабличнойЧасти.ВыгрузитьКолонку("Номенклатура");
	ТаблицаРезервовПоСериям = новый ТаблицаЗначений;
	ТаблицаСерий   = УправлениеЗапасами.ПолучитьТаблицуОстатковПоСериям(Склад, Организация, МассивНоменклатуры,,,ТаблицаРезервовПоСериям);
	
	ТоварыТабличнойЧасти=Товары.Выгрузить();
	
	Товары.Очистить();

	КолонкиТабЧасти = ТоварыТабличнойЧасти.Колонки;
    ИспользоватьУказаниеСерийНоменклатурыПриРезервировании = глЗначениеПеременной("ИспользоватьУказаниеСерийНоменклатурыПриРезервировании");
	Для Каждого ИсходнаяСтрока ИЗ ТоварыТабличнойЧасти Цикл

		СтуктураПоиска   = Новый Структура;
		СтуктураПоиска.Вставить("Номенклатура",               ИсходнаяСтрока.Номенклатура);
		СтуктураПоиска.Вставить("ХарактеристикаНоменклатуры", ИсходнаяСтрока.ХарактеристикаНоменклатуры);
		СтуктураПоиска.Вставить("Качество",                   ИсходнаяСтрока.Качество);

		флЗаполнятьИзРезервов = ложь;
		Если ТипЗнч(ИсходнаяСтрока.ДокументРезерва)=Тип("ДокументСсылка.ЗаказПокупателя") И ИспользоватьУказаниеСерийНоменклатурыПриРезервировании Тогда
			Если ИсходнаяСтрока.ДокументРезерва.ДоговорКонтрагента.ОбособленныйУчетТоваровПоЗаказамПокупателей Тогда
				СтуктураПоиска.Вставить("ДокументРезерва",    ИсходнаяСтрока.ДокументРезерва);
				флЗаполнятьИзРезервов = истина;
			КонецЕсли;
		КонецЕсли;
		Если флЗаполнятьИзРезервов Тогда
			НайденныеСтроки  = ТаблицаРезервовПоСериям.НайтиСтроки(СтуктураПоиска);
		Иначе
			НайденныеСтроки  = ТаблицаСерий.НайтиСтроки(СтуктураПоиска);
		КонецЕсли;

		СтрокаСПустойСерией = Неопределено;
		КоличествоОсталосьПогасить = ИсходнаяСтрока.Количество;

		Для Каждого Строка Из НайденныеСтроки Цикл

			Если КоличествоОсталосьПогасить<=0 Тогда
				Прервать;
			КонецЕсли;

			Если Строка.Остаток <= 0 Тогда
				Продолжить;
			КонецЕсли;

			ОстатокВЕдиницахДокумента = Строка.Остаток * ИсходнаяСтрока.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент / ИсходнаяСтрока.ЕдиницаИзмерения.Коэффициент;

			Если ОстатокВЕдиницахДокумента >= КоличествоОсталосьПогасить Тогда
				КоэффСписания = КоличествоОсталосьПогасить/ОстатокВЕдиницахДокумента;
			Иначе
				КоэффСписания = 1
			КонецЕсли;
			
			СписанноеКоличество = Окр(ОстатокВЕдиницахДокумента * КоэффСписания, 3, РежимОкругления.Окр15как20);
			НоваяСтрока = Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ИсходнаяСтрока);
			НоваяСтрока.СерияНоменклатуры = Строка.СерияНоменклатуры;
			НоваяСтрока.Количество        = СписанноеКоличество; 
			НоваяСтрока.КоличествоМест    = НоваяСтрока.Количество / НоваяСтрока.Коэффициент;
			
			ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(НоваяСтрока, ЭтотОбъект);
			
			Если НЕ ЗначениеЗаполнено(НоваяСтрока.СерияНоменклатуры) Тогда
				СтрокаСПустойСерией = НоваяСтрока;
			КонецЕсли;

			КоличествоОсталосьПогасить = КоличествоОсталосьПогасить-СписанноеКоличество;
			Строка.Остаток = Строка.Остаток - СписанноеКоличество* ИсходнаяСтрока.ЕдиницаИзмерения.Коэффициент / ИсходнаяСтрока.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент;            

		КонецЦикла;

		Если КоличествоОсталосьПогасить>0 Тогда
			Если СтрокаСПустойСерией = Неопределено Тогда
				НоваяСтрока = Товары.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ИсходнаяСтрока);
				НоваяСтрока.Количество     = КоличествоОсталосьПогасить;
				НоваяСтрока.КоличествоМест = НоваяСтрока.Количество / НоваяСтрока.Коэффициент;
				ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(НоваяСтрока, ЭтотОбъект);
			Иначе
				СтрокаСПустойСерией.Количество = СтрокаСПустойСерией.Количество+КоличествоОсталосьПогасить;
				ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаСПустойСерией, ЭтотОбъект);
			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

/////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента)

	ТаблицаТоваров = РезультатЗапросаПоТоварам.Выгрузить();

	ПодготовитьТаблицуТоваровУпр(ТаблицаТоваров, СтруктураШапкиДокумента);

	Возврат ТаблицаТоваров;

КонецФункции // ПодготовитьТаблицуТоваров()

Процедура ПодготовитьТаблицуТоваровУпр(ТаблицаТоваров, СтруктураШапкиДокумента)

	Если Склад.ВидСклада = Перечисления.ВидыСкладов.НТТ Тогда
		ТаблицаТоваров.Колонки.Цена.Имя = "ЦенаВРознице";
	КонецЕсли;

КонецПроцедуры

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТаре    - результат запроса по табличной части "ВозвратнаяТара",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуТары(РезультатЗапросаПоТаре, СтруктураШапкиДокумента)

	ТаблицаТоваров = РезультатЗапросаПоТаре.Выгрузить();

	Возврат ТаблицаТоваров;

КонецФункции // ПодготовитьТаблицуТары()

// Дополняет список обязательных параметров шапки
// регл. параметрами
Процедура ДополнитьОбязательныеРеквизитыШапкиРегл(Реквизиты)
	
	Реквизиты = Реквизиты + ?(ПустаяСтрока(Реквизиты), "", ", ")
			  + "НДСвСтоимостиТоваров";
			  
КонецПроцедуры // ДополнитьОбязательныеРеквизитыШапкиРегл()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение, не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	ОбязательныеРеквизитыШапки = "Организация, Склад";
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		ДополнитьОбязательныеРеквизитыШапкиРегл(ОбязательныеРеквизитыШапки);
	КонецЕсли;
	
	СтруктураОбязательныхПолей = 
	Новый Структура(ОбязательныеРеквизитыШапки);

	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийСписаниеТоваров.Оборудование
	   И СтруктураШапкиДокумента.ВидСклада   = Перечисления.ВидыСкладов.НТТ Тогда
		ОбщегоНазначения.СообщитьОбОшибке("При операции с оборудованием склад не может быть НТТ.", Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок)

	ИмяТабличнойЧасти = "Товары";

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Номенклатура, Количество");
	Если ВидОперации = Перечисления.ВидыОперацийСписаниеТоваров.ТоварыПродукция Тогда
		СтруктураОбязательныхПолей.Вставить("Качество")
	КонецЕсли;

	УправлениеЗапасами.КорректировкаСтруктурыОбязательныхПолей(СтруктураОбязательныхПолей, СтруктураШапкиДокумента.ВидСклада);

	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Товары",СтруктураОбязательныхПолей, Отказ, Заголовок);

	// Здесь услуг быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетУслуг(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);

	// Здесь наборов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетНаборов(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);

	// Здесь комплектов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетКомплектов(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТаре           - таблица значений, содержащая данные для проведения и проверки ТЧ 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара(ТаблицаПоТаре, СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = 
	Новый Структура("Номенклатура, Количество");

	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ВозвратнаяТара",СтруктураОбязательныхПолей, Отказ, Заголовок);

	// Здесь услуг быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетУслуг(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);

	// Здесь наборов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетНаборов(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);

	// Здесь комплектов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетКомплектов(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);

	// По возвратной таре не должен вестись учет по характеристикам.
	УправлениеЗапасами.ПроверитьЧтоНетНоменклатурыСХарактеристиками(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// По результату запроса по шапке документа формируем движения по регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  ТаблицаПоТаре             - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, Отказ, Заголовок);

	ДвиженияПоРегистрамУпр(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, Отказ, Заголовок);
	ДвиженияПоТоварамОрганизаций(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, Отказ, Заголовок);
	ДвиженияПоСписаннымТоварам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, Отказ, Заголовок);

	
	Если ТаблицаПоТоварам.Количество() + ТаблицаПоТаре.Количество() >0 тогда
		УправлениеЗапасами.ЗарегистрироватьДокументВПоследовательностяхПартионногоУчета(ЭтотОбъект, Дата, СтруктураШапкиДокумента.Организация,ОтражатьВУправленческомУчете,СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете,СтруктураШапкиДокумента.ОтражатьВНалоговомУчете,СтруктураШапкиДокумента.СпособВеденияПартионногоУчетаПоОрганизации);
	КонецЕсли;	
		

	// При списании партий также делаются записи в регистры бухгалтерского учета.
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		Если Движения.Хозрасчетный.Модифицированность() Тогда
			Движения.Хозрасчетный.Записать();
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
		Если Движения.Налоговый.Модифицированность() Тогда
			Движения.Налоговый.Записать();
		КонецЕсли;
	КонецЕсли;

	УправлениеЗапасамиПартионныйУчет.ДвижениеПартийТоваров(Ссылка, Движения.СписанныеТовары.Выгрузить());

	ДвиженияПоРегистрамУСНРегл(РежимПроведения, СтруктураШапкиДокумента,Отказ, Заголовок);

КонецПроцедуры // ДвиженияПоРегистрам()

Процедура ДвиженияПоРегистрамУСНРегл(РежимПроведения, СтруктураШапкиДокумента,Отказ, Заголовок)
	
	Если НЕ СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН Тогда
		Возврат;
	КонецЕсли;
	
	НалоговыйУчетУСН.ДвиженияУСН(Ссылка, РежимПроведения);
		
КонецПроцедуры

Процедура ДвиженияПоРегистрамУпр(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, Отказ, Заголовок)

	// Движения по документу.

	Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
	
		// ТОВАРЫ ПО РЕГИСТРУ ТоварыНаСкладах или ТоварыВНТТ.
		Если СтруктураШапкиДокумента.ВидСклада = Перечисления.ВидыСкладов.НТТ Тогда
			НаборДвижений = Движения.ТоварыВНТТ;
			
			// Контроль остатков товара
			Если Товары.Количество() <> 0 Тогда
				ПроцедурыКонтроляОстатков.ТоварыВНТТКонтрольОстатков("Товары", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
			КонецЕсли;
			Если ВозвратнаяТара.Количество() <> 0 Тогда
				ПроцедурыКонтроляОстатков.ТоварыВНТТКонтрольОстатков("ВозвратнаяТара", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
			КонецЕсли;
			
		ИначеЕсли СтруктураШапкиДокумента.ВидСклада = Перечисления.ВидыСкладов.Розничный Тогда
			НаборДвижений = Движения.ТоварыВРознице;
			
			// Контроль остатков товара
			Если Товары.Количество() <> 0 Тогда
				ПроцедурыКонтроляОстатков.ТоварыВРозницеКонтрольОстатков("Товары", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
			КонецЕсли;
			Если ВозвратнаяТара.Количество() <> 0 Тогда
				ПроцедурыКонтроляОстатков.ТоварыВРозницеКонтрольОстатков("ВозвратнаяТара", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
			КонецЕсли;
			
		Иначе
			НаборДвижений = Движения.ТоварыНаСкладах;
			
			// Контроль остатков товара
			Если Товары.Количество() <> 0 Тогда
				ПроцедурыКонтроляОстатков.ТоварыНаСкладахКонтрольОстатков("Товары", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
			КонецЕсли;
			Если ВозвратнаяТара.Количество() <> 0 Тогда
				ПроцедурыКонтроляОстатков.ТоварыНаСкладахКонтрольОстатков("ВозвратнаяТара", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
			КонецЕсли;
			
		КонецЕсли;

		Если НЕ Отказ Тогда
		
			СтруктТаблицДокумента = Новый Структура;
			СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварам);
			СтруктТаблицДокумента.Вставить("ТаблицаПоТаре",    ТаблицаПоТаре);
				
			ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);
				
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Склад", Склад);
			
			Если СтруктураШапкиДокумента.ВидСклада = Перечисления.ВидыСкладов.НТТ Тогда
			
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ТоварТара",    Перечисления.ТоварТара.Товар, "ТаблицаПоТоварам");
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ТоварТара",    Перечисления.ТоварТара.Тара,  "ТаблицаПоТаре");
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ЦенаВРознице", 0,                            "ТаблицаПоТаре");
				
			Иначе
			
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Качество",     Справочники.Качество.Новый,   "ТаблицаПоТаре");

				Если СтруктураШапкиДокумента.ВидСклада = Перечисления.ВидыСкладов.Розничный Тогда
			
					// ТОВАР
					ТаблицаПоЦенам = УправлениеРозничнойТорговлей.СформироватьЗапросПоПродажнымЦенам(Дата, Склад, ТаблицыДанныхДокумента.ТаблицаПоТоварам.ВыгрузитьКолонку("Номенклатура")).Выгрузить();
					УправлениеРозничнойТорговлей.ЗаполнитьКолонкуСуммаПродажная(ТаблицыДанныхДокумента.ТаблицаПоТоварам, ТаблицаПоЦенам);
					
					// ТАРА
					ТаблицаПоЦенам = УправлениеРозничнойТорговлей.СформироватьЗапросПоПродажнымЦенам(Дата, Склад, ТаблицыДанныхДокумента.ТаблицаПоТаре   .ВыгрузитьКолонку("Номенклатура")).Выгрузить();
					УправлениеРозничнойТорговлей.ЗаполнитьКолонкуСуммаПродажная(ТаблицыДанныхДокумента.ТаблицаПоТаре,    ТаблицаПоЦенам);
					
				КонецЕсли;
				
			КонецЕсли;
				
			ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);
		
		КонецЕсли;
				
		// Списание резерва по товарам
		ТабРезервТовары = УдалитьСтрокиНеТребующиеСписаниеИзРезерва(ТаблицаПоТоварам);	
		ТабРезервТара   = УдалитьСтрокиНеТребующиеСписаниеИзРезерва(ТаблицаПоТаре);	
		
		Если ТабРезервТовары.Количество() > 0 ИЛИ ТабРезервТара.Количество() > 0 Тогда
			
			// Контроль остатков товара
			Если Товары.Количество() <> 0 Тогда
				ПроцедурыКонтроляОстатков.ТоварыВРезервеНаСкладахКонтрольОстатков("Товары", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
			КонецЕсли;
			Если ВозвратнаяТара.Количество() <> 0 Тогда
				ПроцедурыКонтроляОстатков.ТоварыВРезервеНаСкладахКонтрольОстатков("ВозвратнаяТара", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
			КонецЕсли;
			
			Если НЕ Отказ Тогда
				
				СтруктТаблицДокумента = Новый Структура;
				СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТабРезервТовары);
				СтруктТаблицДокумента.Вставить("ТаблицаПоТаре",    ТабРезервТара);
				
				ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(Движения.ТоварыВРезервеНаСкладах, СтруктТаблицДокумента);
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Склад", Склад);

				ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ТоварыВРезервеНаСкладах, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);
				
			КонецЕсли;
			
		КонецЕсли;	

		//Товары к передаче со складов
		ТабКПередачеТовары = УдалитьСтрокиНеТребующиеСписаниеИзТоваровКПередаче(ТаблицаПоТоварам);	
		ТабКПередачеТара   = УдалитьСтрокиНеТребующиеСписаниеИзТоваровКПередаче(ТаблицаПоТаре);	
		
		Если ТабКПередачеТовары.Количество() > 0 ИЛИ ТабКПередачеТара.Количество() > 0 Тогда
			НаборДвижений = Движения.ТоварыКПередачеСоСкладов;
            ТабКПередачеТовары.Колонки.ДокументРезерва.Имя = "ДокументПередачи";
            ТабКПередачеТара.Колонки.ДокументРезерва.Имя = "ДокументПередачи";

			// Контроль остатков товара
			Если Товары.Количество() <> 0 Тогда
				ПроцедурыКонтроляОстатков.ТоварыКПередачеСоСкладовКонтрольОстатков("Товары", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
			КонецЕсли;
			Если ВозвратнаяТара.Количество() <> 0 Тогда
				ПроцедурыКонтроляОстатков.ТоварыКПередачеСоСкладовКонтрольОстатков("ВозвратнаяТара", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
			КонецЕсли;
			
			Если НЕ Отказ Тогда
				
				СтруктТаблицДокумента = Новый Структура;
				СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТабКПередачеТовары);
				СтруктТаблицДокумента.Вставить("ТаблицаПоТаре",    ТабКПередачеТара);
				
				ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(Движения.ТоварыКПередачеСоСкладов, СтруктТаблицДокумента);
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Склад", Склад);
                ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПартии", Перечисления.СтатусыПартийТоваров.Купленный);

				ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ТоварыКПередачеСоСкладов, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);
				
			КонецЕсли;
			
		КонецЕсли;	
   КонецЕсли;
КонецПроцедуры

Функция  УдалитьСтрокиНеТребующиеСписаниеИзРезерва(ТабТовары)
	ТабРезерв = ТабТовары.Скопировать();
	
	// Удалим записи таблицы в которых не надо списывать из резерва или не указан заказ покупателя.
	Сч = 0;
	Пока Сч < ТабРезерв.Количество() Цикл
		СтрокаТаблицы = ТабРезерв.Получить(Сч);
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДокументРезерва) 
		 ИЛИ (ТипЗнч(СтрокаТаблицы.ДокументРезерва) <> Тип("ДокументСсылка.ЗаказПокупателя")
			   И ТипЗнч(СтрокаТаблицы.ДокументРезерва) <> Тип("ДокументСсылка.ВнутреннийЗаказ")
			   И ТипЗнч(СтрокаТаблицы.ДокументРезерва) <> Тип("ДокументСсылка.ЗаказНаПроизводство")
			   И ТипЗнч(СтрокаТаблицы.ДокументРезерва) <> Тип("ДокументСсылка.ПриходныйОрдерНаТовары"))Тогда
			ТабРезерв.Удалить(СтрокаТаблицы);
		Иначе
			Если ТипЗнч(СтрокаТаблицы.ДокументРезерва) = Тип("ДокументСсылка.ПриходныйОрдерНаТовары")
				И СтрокаТаблицы.ДокументРезерва.БезПраваПродажи Тогда
				ТабРезерв.Удалить(СтрокаТаблицы);
			Иначе	
				Сч = Сч + 1;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТабРезерв;

КонецФункции

Функция  УдалитьСтрокиНеТребующиеСписаниеИзТоваровКПередаче(ТабТовары)
	ТабРезерв = ТабТовары.Скопировать();
	
	Сч = 0;
	Пока Сч < ТабРезерв.Количество() Цикл
		СтрокаТаблицы = ТабРезерв.Получить(Сч);
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДокументРезерва) 
		 ИЛИ (ТипЗнч(СтрокаТаблицы.ДокументРезерва) <> Тип("ДокументСсылка.РеализацияТоваровУслуг")
			   И ТипЗнч(СтрокаТаблицы.ДокументРезерва) <> Тип("ДокументСсылка.ПередачаТоваров")
			   И ТипЗнч(СтрокаТаблицы.ДокументРезерва) <> Тип("ДокументСсылка.ПеремещениеТоваров"))Тогда
			ТабРезерв.Удалить(СтрокаТаблицы);
		Иначе
			Сч = Сч + 1;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТабРезерв;

КонецФункции



Процедура ДвиженияПоТоварамОрганизаций(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, Отказ, Заголовок)

	// ТОВАРЫ ПО РЕГИСТРУ ТоварыОрганизаций.
	Если СтруктураШапкиДокумента.ОтражатьВРегламентированномУчете Тогда

		НаборДвижений = Движения.ТоварыОрганизаций;

		// Проверка остатков при оперативном проведении.
		НаборДвижений.КонтрольОстатков(ЭтотОбъект, "Товары", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
		
		Если НЕ Отказ Тогда
		
			СтруктТаблицДокумента = Новый Структура;
			СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварам);
						                                       
			ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);
			
			ЗначСклад = ?(СтруктураШапкиДокумента.ВестиУчетТоваровОрганизацийВРазрезеСкладов, Склад, Неопределено);
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Организация", Организация);
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Комиссионер", Неопределено);
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Склад",       ЗначСклад);
					
			ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

Процедура ДвиженияПоСписаннымТоварам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, Отказ, Заголовок)

	// ТОВАРЫ ПО РЕГИСТРУ СписанныеТовары.

	НаборДвижений = Движения.СписанныеТовары;

	// Получим таблицу значений, совпадающую со структурой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	ТаблицаДвижений.Очистить();

	// Заполним таблицу движений.

	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварам, ТаблицаДвижений);

	// Недостающие поля.
	Инд = 0;
	Для каждого Строка Из ТаблицаДвижений Цикл
		Инд = Инд + 1;
		Строка.НомерСтрокиДокумента = Инд;
		Строка.ВидТабличнойЧасти = Перечисления.ВидыТабличныхЧастей.Товары;
	КонецЦикла;

	Для каждого СтрокаТоваров из ТаблицаПоТоварам Цикл

		Если ЗначениеЗаполнено(СтрокаТоваров.ДокументРезерва) тогда

			Если СтрокаТоваров.ДокументРезерва.Метаданные().Имя = "ПриходныйОрдерНаТовары" тогда

				ТаблицаДвижений[СтрокаТоваров.НомерСтроки-1].НеСписывать = Истина;
				
			ИначеЕсли СтрокаТоваров.ДокументРезерва.Метаданные().Имя = "ЗаказПокупателя"  тогда

				ТаблицаДвижений[СтрокаТоваров.НомерСтроки-1].ЗаказСписания = СтрокаТоваров.ДокументРезерва;

			КонецЕсли;

			Если ТипЗНЧ(СтрокаТоваров.ДокументРезерва) = Тип("ДокументСсылка.ЗаказПокупателя")
			  И СтрокаТоваров.ДокументРезерва.ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.Переработка Тогда
				  ТаблицаДвижений[СтрокаТоваров.НомерСтроки-1].ДоговорКонтрагента = СтрокаТоваров.ДокументРезерва.ДоговорКонтрагента;
			КонецЕсли;
		КонецЕсли;

	КонецЦикла;

	ТаблицаДвижений.ЗаполнитьЗначения(Склад,"Склад");

	ТаблицаДвижений.ЗаполнитьЗначения(Дата,   "Период");
	ТаблицаДвижений.ЗаполнитьЗначения(Ссылка, "Регистратор");
	ТаблицаДвижений.ЗаполнитьЗначения(Истина, "Активность");

	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийПартииТоваров.СписаниеПоИнвентаризации,"КодОперацииПартииТоваров");
	ТаблицаДвижений.ЗаполнитьЗначения(Организация,"Организация");

	ЗаполнитьКолонкиРегистраСписанныеТоварыПоТоварамУпр(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоТоварам);
	ЗаполнитьКолонкиРегистраСписанныеТоварыПоТоварамРегл(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоТоварам);

	НаборДвижений.мПериод = Дата;
	НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;

	Если Не Отказ Тогда
		Движения.СписанныеТовары.ВыполнитьДвижения();
	КонецЕсли;

	// ТАРА ПО РЕГИСТРУ СписанныеТовары.

	НаборДвижений = Движения.СписанныеТовары;

	// Получим таблицу значений, совпадающую со структурой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	ТаблицаДвижений.Очистить();

	// Заполним таблицу движений.
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоТаре, ТаблицаДвижений);

	// Недостающие поля.
	Для каждого Строка Из ТаблицаДвижений Цикл
		Инд = Инд + 1;
		Строка.НомерСтрокиДокумента = Инд;
		Строка.ВидТабличнойЧасти = Перечисления.ВидыТабличныхЧастей.Тара;
	КонецЦикла;

	// Если ПУ по складам
	ТаблицаДвижений.ЗаполнитьЗначения(Склад,"Склад");

	ТаблицаДвижений.ЗаполнитьЗначения(Дата,"Период");
	ТаблицаДвижений.ЗаполнитьЗначения(Ссылка,"Регистратор");
	ТаблицаДвижений.ЗаполнитьЗначения(Истина,"Активность");

	ТаблицаДвижений.ЗаполнитьЗначения(Организация, "Организация");

	ЗаполнитьКолонкиРегистраСписанныеТоварыПоТареУпр(ТаблицаДвижений, СтруктураШапкиДокумента,  ТаблицаПоТоварам);
	ЗаполнитьКолонкиРегистраСписанныеТоварыПоТареРегл(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоТоварам);
	
	НаборДвижений.мПериод = Дата;
	НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;

	Если Не Отказ Тогда
		Движения.СписанныеТовары.ВыполнитьДвижения();
	КонецЕсли;
	
	Движения.СписанныеТовары.Записать(Истина);

КонецПроцедуры//ДвиженияПоРегиструСписанныеТовары

Процедура ЗаполнитьКолонкиРегистраСписанныеТоварыПоТоварамУпр(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоТоварам)

	ТаблицаДвижений.ЗаполнитьЗначения(ОтражатьВУправленческомУчете, "ОтражатьВУправленческомУчете");
	Если ВидОперации = Перечисления.ВидыОперацийСписаниеТоваров.Оборудование Тогда
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.Оборудование, "ДопустимыйСтатус1");
	Иначе
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.Купленный,    "ДопустимыйСтатус1");
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.Продукция,    "ДопустимыйСтатус2");
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.НаКомиссию,   "ДопустимыйСтатус3");
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.ВПереработку, "ДопустимыйСтатус4");
	КонецЕсли;
	ТаблицаДвижений.ЗаполнитьЗначения(Подразделение, "Подразделение");

КонецПроцедуры

Процедура ЗаполнитьКолонкиРегистраСписанныеТоварыПоТоварамРегл(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоТоварам)

	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете, "ОтражатьВБухгалтерскомУчете");
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.ОтражатьВНалоговомУчете,     "ОтражатьВНалоговомУчете");
	ТаблицаДвижений.ЗаполнитьЗначения(ПланыСчетов.Хозрасчетный.НедостачиИПотериОтПорчиЦенностей, "КорСчетБУ");
	ТаблицаДвижений.ЗаполнитьЗначения(ПланыСчетов.Налоговый.НедостачиИПотериОтПорчиЦенностей,    "КорСчетНУ");

	// Кор.Счет для начисления задолженности перед комитентом, если вдруг продадим комиссионный товар
	ТаблицаДвижений.ЗаполнитьЗначения(ПланыСчетов.Хозрасчетный.НедостачиИПотериОтПорчиЦенностей, "КорСчетЗадолженностиБУ")	;

	Для каждого Строка Из ТаблицаДвижений Цикл

		СтрокаТЧ = ТаблицаПоТоварам.Получить(ТаблицаДвижений.Индекс(Строка));

		// Принятые на комиссию товары не учитываются в налоговом учете:
		Если НЕ ЗначениеЗаполнено(СтрокаТЧ.СчетУчетаНУ) Тогда
			Строка.ОтражатьВНалоговомУчете = Ложь;

		Иначе
			Строка.ОтражатьВНалоговомУчете = СтруктураШапкиДокумента.ОтражатьВНалоговомУчете;

		КонецЕсли;
		Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН Тогда
			Строка.ОтражатьВНалоговомУчете 	= Истина;
			Строка.СчетУчетаНУ				= СтрокаТЧ.СчетУчетаБУ;
			Строка.ПринятыеСчетУчетаНУ 		= СтрокаТЧ.ПринятыеСчетУчетаБУ;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

Процедура ЗаполнитьКолонкиРегистраСписанныеТоварыПоТареУпр(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоТоварам)

	ТаблицаДвижений.ЗаполнитьЗначения(ОтражатьВУправленческомУчете, "ОтражатьВУправленческомУчете");
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.ВозвратнаяТара, "ДопустимыйСтатус1");
	ТаблицаДвижений.ЗаполнитьЗначения(Подразделение, "Подразделение");

КонецПроцедуры

Процедура ЗаполнитьКолонкиРегистраСписанныеТоварыПоТареРегл(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоТоварам)

	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете, "ОтражатьВБухгалтерскомУчете");
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.ОтражатьВНалоговомУчете,     "ОтражатьВНалоговомУчете");
	ТаблицаДвижений.ЗаполнитьЗначения(ПланыСчетов.Хозрасчетный.НедостачиИПотериОтПорчиЦенностей, "КорСчетБУ");
	ТаблицаДвижений.ЗаполнитьЗначения(ПланыСчетов.Налоговый.НедостачиИПотериОтПорчиЦенностей,    "КорСчетНУ");

КонецПроцедуры

Процедура ДополнитьСтруктуруПолейТабличнойЧастиТоварыРегл(СтруктураПолей)

	СтруктураПолей.Вставить("СчетУчетаБУ"        , "СчетУчетаБУ");
	СтруктураПолей.Вставить("СчетУчетаНУ"        , "СчетУчетаНУ");
	СтруктураПолей.Вставить("ПринятыеСчетУчетаБУ", "ПринятыеСчетУчетаБУ");

КонецПроцедуры

Процедура ДополнитьСтруктуруПолейТабличнойЧастиВозвратнаяТараРегл(СтруктураПолей)

	СтруктураПолей.Вставить("СчетУчетаБУ", "СчетУчетаБУ");
	СтруктураПолей.Вставить("СчетУчетаНУ", "СчетУчетаНУ");

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)

	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ИнвентаризацияТоваровНаСкладе") Тогда

		// Заполним реквизиты из стандартного набора по документу основанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);

		ИнвентаризацияТоваровНаСкладе = Основание;
		
		НДСвСтоимостиТоваров = Перечисления.ДействиеНДСВСтоимостиТоваров.НеИзменять;

		ЗаполнитьТоварыПоИнвентаризацииТоваровУпр(Основание);

		ЗаполнитьСчетаУчетаВТабЧасти(Товары,         "Товары",         Истина, Истина);
		ЗаполнитьСчетаУчетаВТабЧасти(ВозвратнаяТара, "ВозвратнаяТара", Истина, Истина);

	КонецЕсли;

КонецПроцедуры // ОбработкаЗаполнения()

// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;

	// Проверка заполнения единицы измерения мест и количества мест
	ОбработкаТабличныхЧастей.ПриЗаписиПроверитьЕдиницуИзмеренияМест(Товары);

	// Посчитать суммы документа и записать ее в соответствующий реквизит шапки для показа в журналах
	СуммаДокумента = Товары.Итог("Сумма");

	// Почистим неиспользуемые реквизиты.
	Если ВидОперации = Перечисления.ВидыОперацийСписаниеТоваров.Оборудование Тогда 

		Для каждого СтрокаТаблицы Из ЭтотОбъект.Товары Цикл

			Если ЗначениеЗаполнено(СтрокаТаблицы.ДокументРезерва) Тогда
				СтрокаТаблицы.ДокументРезерва = Неопределено;
			КонецЕсли;

			Если СтрокаТаблицы.Качество <> Справочники.Качество.Новый Тогда
				СтрокаТаблицы.Качество = Справочники.Качество.Новый;
			КонецЕсли;

		КонецЦикла;
	Иначе
		ОбработкаТабличныхЧастей.ЗаполнитьКачествоПоУмолчанию(Товары);
	КонецЕсли;

	мУдалятьДвижения = НЕ ЭтоНовый();
	
КонецПроцедуры // ПередЗаписью

// Процедура - обработчик события "ПриЗаписи"
//
Процедура ПриЗаписи(Отказ)
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;

КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;

	
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, Истина, РежимПроведения);
	КонецЕсли;

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = "Проведение документа """ + СокрЛП(Ссылка) + """: ";

	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокументаИПроверитьОтражениеВУчете(ЭтотОбъект, Отказ, Заголовок);

	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = УправлениеЗапасами.СформироватьДеревоПолейЗапросаПоШапке();
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы"       , "ВалютаУправленческогоУчета", "ВалютаУправленческогоУчета");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы"       , "КурсВалютыУправленческогоУчета"    , "КурсВалютыУправленческогоУчета");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика" , "ВестиПартионныйУчетПоСкладам"      , "ВестиПартионныйУчетПоСкладам");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Склад"           , "ВидСклада",                      "ВидСклада");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Организация"     , "ОтражатьВРегламентированномУчете"      , "ОтражатьВРегламентированномУчете");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика"     , "ВестиУчетТоваровОрганизацийВРазрезеСкладов"   , "ВестиУчетТоваровОрганизацийВРазрезеСкладов");
    УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "НастройкаСпособовВеденияУправленческогоПартионногоУчета", "СпособВеденияПартионногоУчетаПоОрганизации", "СпособВеденияПартионногоУчетаПоОрганизации");
	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);

	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);

	// Получим необходимые данные для проведения и проверки заполнения данные по табличной части "Товары".
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("Номенклатура"              , "Номенклатура");
	СтруктураПолей.Вставить("Услуга"                    , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Набор"                     , "Номенклатура.Набор");
	СтруктураПолей.Вставить("Комплект"                  , "Номенклатура.Комплект");
	СтруктураПолей.Вставить("Количество"                , "Количество * Коэффициент /Номенклатура.ЕдиницаХраненияОстатков.Коэффициент");
	СтруктураПолей.Вставить("Цена"                      , "Цена");
	СтруктураПолей.Вставить("Сумма"                     , "Сумма");
	СтруктураПолей.Вставить("Качество"                  , "Качество");
	СтруктураПолей.Вставить("ХарактеристикаНоменклатуры", "ХарактеристикаНоменклатуры");
	СтруктураПолей.Вставить("СерияНоменклатуры"         , "СерияНоменклатуры");
	СтруктураПолей.Вставить("ЗаказПартии"               , "ДокументРезерва");
	СтруктураПолей.Вставить("ДокументРезерва"           , "ДокументРезерва");
	СтруктураПолей.Вставить("ВидСклада"           		, "Ссылка.Склад.ВидСклада");

	ДополнитьСтруктуруПолейТабличнойЧастиТоварыРегл(СтруктураПолей);

	РезультатЗапросаПоТоварам = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураПолей);

	// Подготовим таблицу товаров для проведения.
	ТаблицаПоТоварам = ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента);

	// Проверить заполнение ТЧ "Товары".
	ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок);

	// Получим необходимые данные для проведения и проверки заполнения данные по табличной части "ВозвратнаяТара".
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("Номенклатура"              , "Номенклатура");
	СтруктураПолей.Вставить("Услуга"                    , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Набор"                     , "Номенклатура.Набор");
	СтруктураПолей.Вставить("Комплект"                  , "Номенклатура.Комплект");
	СтруктураПолей.Вставить("Количество"                , "Количество");
	СтруктураПолей.Вставить("ДокументРезерва"           , "ДокументРезерва");
	СтруктураПолей.Вставить("ВестиУчетПоХарактеристикам", "Номенклатура.ВестиУчетПоХарактеристикам");
	СтруктураПолей.Вставить("ДоговорКонтрагента"		, "ДокументРезерва.ДоговорКонтрагента");
	СтруктураПолей.Вставить("ВидСклада"           		, "Ссылка.Склад.ВидСклада");
	
	ДополнитьСтруктуруПолейТабличнойЧастиВозвратнаяТараРегл(СтруктураПолей);

	РезультатЗапросаПоТаре = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ВозвратнаяТара", СтруктураПолей);

	// Подготовим таблицу товаров для проведения.
	ТаблицаПоТаре = ПодготовитьТаблицуТары(РезультатЗапросаПоТаре, СтруктураШапкиДокумента);

	// Проверить заполнение ТЧ "ВозвратнаяТара".
	ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара(ТаблицаПоТаре, СтруктураШапкиДокумента, Отказ, Заголовок);

	//Заполнение и проверка заполнения счетов учета номенклатуры и затрат
	СчетаУчетаВДокументах.ЗаполнитьИПроверитьЗаполнениеСчетовУчетаТабличнойЧасти("Товары", 		 	ТаблицаПоТоварам, 	СтруктураШапкиДокумента, Отказ, Заголовок);
	СчетаУчетаВДокументах.ЗаполнитьИПроверитьЗаполнениеСчетовУчетаТабличнойЧасти("ВозвратнаяТара", 	ТаблицаПоТаре, 		СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// Движения по документу
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, Отказ, Заголовок);
	КонецЕсли;

	//Сделаем переменные доступными из подписок на события
	ДополнительныеСвойства.Вставить("СтруктураШапкиДокумента", СтруктураШапкиДокумента);
	ДополнительныеСвойства.Вставить("СтруктураТабличныхЧастей", Новый Структура("ТаблицаПоТоварам, ТаблицаПоТаре", ТаблицаПоТоварам, ТаблицаПоТаре));
	
КонецПроцедуры // ОбработкаПроведения()

мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");
