Процедура СвернутьДокументыОснования() Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Основания.Ссылка КАК Ссылка,
	|	Основания.СпособОбработки КАК СпособОбработки,
	|	КОЛИЧЕСТВО(Основания.ДокументОснование) КАК КоличествоОснований
	|ПОМЕСТИТЬ КОбработке
	|ИЗ
	|	Документ.ЭлектронныйДокументВходящий.ДокументыОснования КАК Основания
	|
	|СГРУППИРОВАТЬ ПО
	|	Ссылка,
	|	СпособОбработки
	|;
	|///////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КОбработке.Ссылка КАК Ссылка
	|ИЗ
	|	КОбработке КАК КОбработке
	|ГДЕ
	|	КОбработке.КоличествоОснований > 1
	|");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		Попытка
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("Документ.ЭлектронныйДокументВходящий");
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			Блокировка.Заблокировать();
			
			ЭлектронныйДокумент = Выборка.Ссылка.ПолучитьОбъект();
			ЭлектронныйДокумент.ДокументыОснования.Свернуть("ДокументОснование, СпособОбработки");
			
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ЭлектронныйДокумент);
				
			ЗафиксироватьТранзакцию();
				
		Исключение
			ОтменитьТранзакцию();
			Операция = НСтр("ru = 'Обновление подсистемы обмена с контрагентами'");
			ПодробныйТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьОшибку(Операция, ПодробныйТекстОшибки);
			ВызватьИсключение;
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

///////////////////////////////////////////////////////////////////////
// Обработчики обновления

Процедура СкорректироватьЗаписиРегистраСостояний(СтарыйЭД, НовыйЭД)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	СостоянияЭД.СсылкаНаОбъект,
	|	СостоянияЭД.СостояниеВерсииЭД,
	|	СостоянияЭД.ЭлектронныйДокумент,
	|	СостоянияЭД.ДействияСНашейСтороны,
	|	СостоянияЭД.ДействияСоСтороныДругогоУчастника,
	|	СостоянияЭД.Комментарий,
	|	СостоянияЭД.ПредставлениеСостояния,
	|	СостоянияЭД.Вид,
	|	СостоянияЭД.Дата,
	|	СостоянияЭД.Номер,
	|	СостоянияЭД.СуммаДокумента,
	|	СостоянияЭД.Контрагент,
	|	СостоянияЭД.Организация
	|ИЗ
	|	РегистрСведений.СостоянияЭД КАК СостоянияЭД
	|ГДЕ
	|	СостоянияЭД.СсылкаНаОбъект = &ЭлектронныйДокумент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СостоянияЭД.СсылкаНаОбъект,
	|	СостоянияЭД.СостояниеВерсииЭД,
	|	СостоянияЭД.ЭлектронныйДокумент,
	|	СостоянияЭД.ДействияСНашейСтороны,
	|	СостоянияЭД.ДействияСоСтороныДругогоУчастника,
	|	СостоянияЭД.Комментарий,
	|	СостоянияЭД.ПредставлениеСостояния,
	|	СостоянияЭД.Вид,
	|	СостоянияЭД.Дата,
	|	СостоянияЭД.Номер,
	|	СостоянияЭД.СуммаДокумента,
	|	СостоянияЭД.Контрагент,
	|	СостоянияЭД.Организация
	|ИЗ
	|	РегистрСведений.СостоянияЭД КАК СостоянияЭД
	|ГДЕ
	|	СостоянияЭД.ЭлектронныйДокумент = &ЭлектронныйДокумент");
	
	Запрос.УстановитьПараметр("ЭлектронныйДокумент", СтарыйЭД);
	
	Результат = Запрос.ВыполнитьПакет();
	
	Если Не Результат[0].Пустой() Тогда
		
		Набор = РегистрыСведений.СостоянияЭД.СоздатьНаборЗаписей();
		Набор.Отбор.СсылкаНаОбъект.Установить(НовыйЭД);
		
		Выборка = Результат[0].Выбрать();
		Выборка.Следующий();
		
		Строка = Набор.Добавить();
		ЗаполнитьЗначенияСвойств(Строка, Выборка);
		Строка.СсылкаНаОбъект = НовыйЭД;
		
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(Набор);
		
	КонецЕсли;
	
	Если Не Результат[1].Пустой() Тогда
		
		Выборка = Результат[1].Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Набор = РегистрыСведений.СостоянияЭД.СоздатьНаборЗаписей();
			Набор.Отбор.СсылкаНаОбъект.Установить(Выборка.СсылкаНаОбъект);
			
			Строка = Набор.Добавить();
			ЗаполнитьЗначенияСвойств(Строка, Выборка);
			
			Строка.ЭлектронныйДокумент = НовыйЭД;
			
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(Набор);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СкорректироватьЗаписиРегистраИдентификаторов(СтарыйЭД, НовыйЭД)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Идентификаторы.ЭлектронныйДокумент,
	|	Идентификаторы.ИдентификаторДокументаОснования,
	|	Идентификаторы.ОснованиеПолучено,
	|	Идентификаторы.ДокументОснование,
	|	Идентификаторы.ДокументПотомок
	|ИЗ
	|	РегистрСведений.ИдентификаторыДокументовОснованийВладельцевЭД КАК Идентификаторы
	|ГДЕ
	|	Идентификаторы.ЭлектронныйДокумент = &ЭлектронныйДокумент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Идентификаторы.ЭлектронныйДокумент,
	|	Идентификаторы.ИдентификаторДокументаОснования,
	|	Идентификаторы.ОснованиеПолучено,
	|	Идентификаторы.ДокументОснование,
	|	Идентификаторы.ДокументПотомок
	|ИЗ
	|	РегистрСведений.ИдентификаторыДокументовОснованийВладельцевЭД КАК Идентификаторы
	|ГДЕ
	|	Идентификаторы.ДокументПотомок = &ЭлектронныйДокумент");
	
	Запрос.УстановитьПараметр("ЭлектронныйДокумент", СтарыйЭД);
	
	Результат = Запрос.ВыполнитьПакет();
	
	Если Не Результат[0].Пустой() Тогда
		
		Набор = РегистрыСведений.ИдентификаторыДокументовОснованийВладельцевЭД.СоздатьНаборЗаписей();
		Набор.Отбор.ЭлектронныйДокумент.Установить(НовыйЭД);
		
		Выборка = Результат[0].Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Строка = Набор.Добавить();
			ЗаполнитьЗначенияСвойств(Строка, Выборка);
			Строка.ЭлектронныйДокумент = НовыйЭД;
			
		КонецЦикла;
		
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(Набор);
		
	КонецЕсли;
	
	Если Не Результат[1].Пустой() Тогда
		
		Выборка = Результат[1].Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Набор = РегистрыСведений.ИдентификаторыДокументовОснованийВладельцевЭД.СоздатьНаборЗаписей();
			Набор.Отбор.ЭлектронныйДокумент.Установить(Выборка.ЭлектронныйДокумент);
			Набор.Отбор.ИдентификаторДокументаОснования.Установить(Выборка.ИдентификаторДокументаОснования);
			
			Строка = Набор.Добавить();
			ЗаполнитьЗначенияСвойств(Строка, Выборка);
			
			Строка.ДокументПотомок = НовыйЭД;
			
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(Набор);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СкорректироватьЗаписиРегистраНаличияФайлов(СтарыйЭД, НовыйЭД)
	
	НаборЗаписей = РегистрыСведений.НаличиеПрисоединенныхФайлов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ОбъектСФайлами.Установить(СтарыйЭД);
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() Тогда
		
		// Добавляем новую запись.
		НаборЗаписей.Отбор.ОбъектСФайлами.Установить(НовыйЭД);
		НаборЗаписей[0].ОбъектСФайлами = НовыйЭД;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);
		
		// Удаляем старую запись.
		НаборЗаписей.Отбор.ОбъектСФайлами.Установить(СтарыйЭД);
		НаборЗаписей.Очистить();
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СкорректироватьЗаписиРегистраЖурналСобытийЭДО(СтарыйЭД, НовыйЭД)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Журнал.ПрисоединенныйФайл,
	|	Журнал.НомерЗаписи,
	|	Журнал.ВладелецЭД,
	|	Журнал.Дата,
	|	Журнал.Пользователь,
	|	Журнал.СтатусЭД,
	|	Журнал.УдалитьСтатусЭД,
	|	Журнал.Ответственный,
	|	Журнал.Комментарий
	|ИЗ
	|	РегистрСведений.ЖурналСобытийЭД КАК Журнал
	|ГДЕ
	|	Журнал.ВладелецЭД = &ЭлектронныйДокумент");
	
	Запрос.УстановитьПараметр("ЭлектронныйДокумент", СтарыйЭД);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НаборЗаписей = РегистрыСведений.ЖурналСобытийЭД.СоздатьНаборЗаписей();
		
		НаборЗаписей.Отбор.ПрисоединенныйФайл.Установить(Выборка.ПрисоединенныйФайл);
		НаборЗаписей.Отбор.НомерЗаписи.Установить(Выборка.НомерЗаписи);
		
		Строка = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(Строка, Выборка);
		
		Строка.ВладелецЭД = НовыйЭД;
		
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПеренестиЭлектронныеДокументы(ИмяСтарогоДокумента, ИмяНовогоДокумента, Операция) Экспорт
	
	// Общая процедура для входящих и исходящих документов.
	
	ЗапросПрисоединенныхФайлов = Новый Запрос(
	"ВЫБРАТЬ
	|	Файлы.Ссылка
	|ИЗ
	|	Справочник.ЭДПрисоединенныеФайлы КАК Файлы
	|ГДЕ
	|	Файлы.УдалитьВладелецФайла2 = &ВладелецФайла");
	
	ТекстЗапроса =
	"ВЫБРАТЬ ПЕРВЫЕ 1000
	|	СтарыеДанные.Ссылка КАК ЭлектронныйДокумент
	|ИЗ
	|	Документ.&ИмяСтарогоДокумента КАК СтарыеДанные
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.&ИмяНовогоДокумента КАК НовыеДанные
	|		ПО СтарыеДанные.УникальныйИД = НовыеДанные.УникальныйИД
	|ГДЕ
	|	НовыеДанные.Ссылка ЕСТЬ NULL
	|
	|УПОРЯДОЧИТЬ ПО
	|	СтарыеДанные.Дата УБЫВ";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяСтарогоДокумента", ИмяСтарогоДокумента);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяНовогоДокумента",  ИмяНовогоДокумента);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Результат = Запрос.Выполнить();
	
	Пока Не Результат.Пустой() Цикл
		
		НачатьТранзакцию();
		
		ВыборкаЭлектронныйДокумент = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаЭлектронныйДокумент.Следующий() Цикл
			
			Попытка
				
				// Переносим электронный документ.
				СтарыйЭлектронныйДокумент = ВыборкаЭлектронныйДокумент.ЭлектронныйДокумент.ПолучитьОбъект();
				НовыйЭлектронныйДокумент  = Документы[ИмяНовогоДокумента].СоздатьДокумент();
				
				ЗаполнитьЗначенияСвойств(НовыйЭлектронныйДокумент, СтарыйЭлектронныйДокумент);
				
				Для Каждого Строка Из СтарыйЭлектронныйДокумент.ДокументыОснования Цикл
					НоваяСтрока = НовыйЭлектронныйДокумент.ДокументыОснования.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
				КонецЦикла;
				
				Для Каждого Строка Из СтарыйЭлектронныйДокумент.ИдентификаторыОснованийВладельцаФайла Цикл
					НоваяСтрока = НовыйЭлектронныйДокумент.ИдентификаторыОснованийВладельцаФайла.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
				КонецЦикла;
				
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(НовыйЭлектронныйДокумент);
				
				// Подменяем владельца для файлов старого электронного документа.
				ЗапросПрисоединенныхФайлов.УстановитьПараметр("ВладелецФайла", СтарыйЭлектронныйДокумент.Ссылка);
				ВыборкаФайлЭлектронногоДокумента = ЗапросПрисоединенныхФайлов.Выполнить().Выбрать();
				Пока ВыборкаФайлЭлектронногоДокумента.Следующий() Цикл
					
					ФайлЭлектронногоДокумента = ВыборкаФайлЭлектронногоДокумента.Ссылка.ПолучитьОбъект();
					ФайлЭлектронногоДокумента.ВладелецФайла = НовыйЭлектронныйДокумент.Ссылка;
					
					ОбновлениеИнформационнойБазы.ЗаписатьДанные(ФайлЭлектронногоДокумента);
					
				КонецЦикла;
				
				// Корректируем записи регистра сведений СостоянияЭД.
				СкорректироватьЗаписиРегистраСостояний(СтарыйЭлектронныйДокумент.Ссылка, НовыйЭлектронныйДокумент.Ссылка);
				
				// Корректируем записи регистра сведений НаличиеПрисоединенныхФайлов.
				СкорректироватьЗаписиРегистраНаличияФайлов(СтарыйЭлектронныйДокумент.Ссылка, НовыйЭлектронныйДокумент.Ссылка);
				
				// Корректируем записи регистра сведений ИдентификаторыДокументовОснованийВладельцевЭД.
				СкорректироватьЗаписиРегистраИдентификаторов(СтарыйЭлектронныйДокумент.Ссылка, НовыйЭлектронныйДокумент.Ссылка);
				
				// Корректируем записи регистра сведений ЖурналСобытийЭДО.
				СкорректироватьЗаписиРегистраЖурналСобытийЭДО(СтарыйЭлектронныйДокумент.Ссылка, НовыйЭлектронныйДокумент.Ссылка);
				
			Исключение
				
				ОтменитьТранзакцию();
				
				ПодробныйТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьОшибку(Операция, ПодробныйТекстОшибки);
				ВызватьИсключение;
				
			КонецПопытки;
			
		КонецЦикла;
		
		Если ТранзакцияАктивна() Тогда
			ЗафиксироватьТранзакцию();
		КонецЕсли;
		
		Результат = Запрос.Выполнить();
		
	КонецЦикла;
	
КонецПроцедуры

// Обработчик обновления 1.1.25.47.
Процедура ПеренестиВходящиеЭлектронныеДокументы() Экспорт
	
	ПеренестиЭлектронныеДокументы(
		Метаданные.Документы.УдалитьЭлектронныйДокументВходящий.Имя,
		Метаданные.Документы.ЭлектронныйДокументВходящий.Имя,
		НСтр("ru = 'Перенос данных входящих электронных документов'"));
	
КонецПроцедуры

// Обработчик обновления 1.1.26.3.
Процедура ЗаполнитьНомерДокумента() Экспорт
	
	МетаданныеОбъекта = Метаданные.Документы.ЭлектронныйДокументВходящий;
	ПолноеИмяОбъекта = МетаданныеОбъекта.ПолноеИмя();
	ОбработанныхОбъектов = 0;
	ПроблемныхОбъектов = 0;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЭлектронныйДокументВходящий.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ЭлектронныйДокументВходящий КАК ЭлектронныйДокументВходящий
	|ГДЕ
	|	ЭлектронныйДокументВходящий.НомерДокумента = """"
	|	И ЭлектронныйДокументВходящий.СостояниеЭДО = &НаУтверждении";
	Запрос.Параметры.Вставить("НаУтверждении", Перечисления.СостоянияВерсийЭД.НаУтверждении);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		СсылкаНаОбъект = Выборка.Ссылка;
		
		НачатьТранзакцию();
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
			ЭлементБлокировки.УстановитьЗначение("Ссылка", СсылкаНаОбъект);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			Блокировка.Заблокировать();
			
			Объект = СсылкаНаОбъект.ПолучитьОбъект();
			Если Объект = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			НомерДокумента = Объект.НомерДокументаОтправителя;
			ПозицияИсправления = Найти(НомерДокумента, " " + НСтр("ru = '(испр.'") + " ");
			Если ЗначениеЗаполнено(ПозицияИсправления) Тогда
				НомерДокумента = Лев(НомерДокумента, ПозицияИсправления - 1);
			КонецЕсли;
			Объект.НомерДокумента = НомерДокумента;
			
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(Объект);
			
			ОбработанныхОбъектов = ОбработанныхОбъектов + 1;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			ШаблонСообщения = НСтр("ru = 'Не удалось заполнить номер входящего электронного документа: %1 по причине:'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, СсылкаНаОбъект) + Символы.ПС 
				+ ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,
				МетаданныеОбъекта, СсылкаНаОбъект, ТекстСообщения);
			
		КонецПопытки;
		
	КонецЦикла;
	
	Если ОбработанныхОбъектов = 0 И ПроблемныхОбъектов <> 0 Тогда
		ШаблонСообщения = НСтр("ru = 'Не удалось заполнить номер некоторых входящих электронных документов (пропущены): %1'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ПроблемныхОбъектов);
		ВызватьИсключение ТекстСообщения;
	Иначе
		ШаблонСообщения = НСтр("ru = 'Заполнены номера очередной порции входящих электронных документов: %1'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ОбработанныхОбъектов);
		ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Информация,
			МетаданныеОбъекта,, ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

#КонецЕсли