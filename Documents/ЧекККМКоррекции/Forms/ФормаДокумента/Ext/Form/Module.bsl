// Область "Описание переменных"

&НаКлиенте
Перем ТекущиеДанныеИдентификатор; //используется для передачи текущей строки в обработчик ожидания

// Конец области "Описание переменных"

// Область "Обработчики событий формы"

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	УстановитьУсловноеОформление();
	
	Если ТипЗнч(Параметры.Основание) = Тип("ДокументСсылка.ЧекККМКоррекции")
		И ЗначениеЗаполнено(Параметры.Основание) Тогда
		
		ТекстСообщения = НСтр("ru = 'Копирование документа ""Чек ККМ коррекции"" запрещено!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
		Отказ = Истина;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ПараметрыУказанияСерий = НоменклатураСервер.ПараметрыУказанияСерий(Объект, Документы.ЧекККМКоррекции);
		УстановитьВидимостьЭлементовСерий();
//		ЗаполнитьСлужебныеРеквизитыПоНоменклатуре();
		Элементы.СтраницаКомментарий.Картинка = ОбщегоНазначенияКлиентСервер.КартинкаКомментария(Объект.Комментарий);
		
	КонецЕсли;
	
	СформироватьНачальноеЗаполнениеЧекККМТовары();	
	РассчитатьВнесенныеРасхождения();
	
	ИспользоватьАкцизныеМарки = ИнтеграцияЕГАИСВызовСервера.ИспользуетсяРегистрацияРозничныхПродажВЕГАИС(
		Объект.Организация, Объект.Склад, Объект.Дата);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	УстановитьПредставлениеДокументаОснования();
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаПробитьЧекКоррекции", "Доступность",
		ПравоДоступа("Изменение", Метаданные.Документы.ЧекККМКоррекции));
		
	Если Объект.ПробитЧек Тогда
		ЭтаФорма.ТолькоПросмотр = Истина;
	Иначе
		ЭтаФорма.ТолькоПросмотр = Ложь;
	КонецЕсли;
	
	Если Не Объект.ПробитЧек Тогда
		Элементы.ГруппаСуммаСдачи.Видимость = Ложь;
	КонецЕсли;
	
	Если Не Объект.ЧекККМ.ЧекПробитНаККМ Тогда
		Объект.ВидКоррекции = 1;
	Иначе
		Объект.ВидКоррекции = 0;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПоддерживаетсяВидТО(Вид) Экспорт

	Результат = Ложь;

	Если Вид = ПредопределенноеЗначение("Перечисление.ВидыТорговогоОборудования.ККТ") Тогда
		Результат = Истина;
	КонецЕсли;

	Возврат Результат;

КонецФункции // ПоддерживаетсяВидТО()

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПересчитатьДокументНаКлиенте();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	УстановитьВидимостьРеквизитовКоррекции();
	УстановитьДоступностьОписанияКоррекции();
	УстановитьВидимостьКнопкиФискализацияЧекаКоррекции();
	
	ПолучитьСерверТО().ПодключитьКлиента(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	ПолучитьСерверТО().ОтключитьКлиента(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	ПараметрыУказанияСерий = НоменклатураСервер.ПараметрыУказанияСерий(Объект, Документы.ЧекККМКоррекции);
	УстановитьВидимостьЭлементовСерий();
	//ЗаполнитьСлужебныеРеквизитыПоНоменклатуре();
	
	Элементы.СтраницаКомментарий.Картинка = ОбщегоНазначенияКлиентСервер.КартинкаКомментария(Объект.Комментарий);

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтаФорма, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	УстановитьПредставлениеДокументаОснования();
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Элементы.СтраницаКомментарий.Картинка = ОбщегоНазначенияКлиентСервер.КартинкаКомментария(Объект.Комментарий);
//	ЗаполнитьСлужебныеРеквизитыПоНоменклатуре();

КонецПроцедуры

// Конец области "Обработчики событий формы"

// Область "Обработчики событий элементов формы

&НаСервере
Функция ЗаписатьНаСервере(ТребуетсяПовторнаяПопыткаЗаписи = Неопределено)
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Значение = РеквизитФормыВЗначение("Объект", Тип("ДокументОбъект.ЧекККМКоррекции"));
		Значение.УстановитьСсылкуНового(Документы.ЧекККМКоррекции.ПолучитьСсылку());
		ЗначениеВДанныеФормы(Значение, Объект);
	КонецЕсли;
	
	Объект.Дата = ТекущаяДатаСеанса();
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить();
		ЭлементБлокировки.Область = "Документ.ЧекККМКоррекции";
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
		ЭлементБлокировки.УстановитьЗначение("Ссылка", Объект.Ссылка);
		Блокировка.Заблокировать();
		
		Результат = Записать(Новый Структура("РежимЗаписи, РежимПроведения", РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Оперативный));
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ТребуетсяПовторнаяПопыткаЗаписи = Истина;
		Возврат Ложь;
		
	КонецПопытки;
	
	Если Не Результат Тогда
		
		ПараметрыУказанияСерий = НоменклатураСервер.ПараметрыУказанияСерий(Объект, Документы.ЧекККМКоррекции);
		
		//ЗаполнитьСлужебныеРеквизитыПоНоменклатуре();
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ЗаписатьНаКлиенте(ТребуетсяПовторнаяПопыткаЗаписи = Неопределено)
	
	Если Модифицированность Тогда
		
		Результат = ЗаписатьНаСервере(ТребуетсяПовторнаяПопыткаЗаписи);
		
		Если Результат Тогда
			Оповестить("Запись_ЧекККМКоррекции", Новый Структура, Неопределено);
		КонецЕсли;
		
		Возврат Результат;
		
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ВыполнитьДействиеПослеЗаписи(ОповещениеПриЗавершении, ТекстСообщения)
	
	ТребуетсяПовторнаяПопыткаЗаписи = Ложь;
	ИзмененныеДанныеЗаписаны = ЗаписатьНаКлиенте(ТребуетсяПовторнаяПопыткаЗаписи);
	Если Не ИзмененныеДанныеЗаписаны Тогда
		
		ДополнительныеПараметры = РозничныеПродажиКлиентСервер.СтруктураПовтораЗаписи();
		ДополнительныеПараметры.ОписаниеОповещения         = ОповещениеПриЗавершении;
		ДополнительныеПараметры.ТекстСообщения             = ТекстСообщения;
		ДополнительныеПараметры.ВозвращатьРезультатФункции = Истина;
		ДополнительныеПараметры.ИмяПроцедуры               = "ЗаписатьНаСервере";
		ДополнительныеПараметры.РезультатОперации          = ИзмененныеДанныеЗаписаны;
		
		Если Не ТребуетсяПовторнаяПопыткаЗаписи Тогда
			ОшибкаПриПроведенииЧекаВопросЗавершение(КодВозвратаДиалога.Отмена, ДополнительныеПараметры);
			Возврат;
		КонецЕсли;
		
		ПоказатьВопросЕГАИС(
			ОписаниеОповещенияЕГАИС("ОшибкаПриПроведенииЧекаВопросЗавершение", ЭтаФорма, ДополнительныеПараметры),
			ДополнительныеПараметры.ТекстСообщения,
			РежимДиалогаВопрос.ПовторитьОтмена, 10, КодВозвратаДиалога.Повторить,,КодВозвратаДиалога.Повторить);
		Возврат;
		
	Иначе
		
		ВыполнитьОбработкуОповещенияЕГАИС(ОповещениеПриЗавершении, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОшибкаПриПроведенииЧекаВопросЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Отмена Тогда
		
		ТребуетсяПовторнаяПопыткаЗаписи = Ложь;
		Если ДополнительныеПараметры.ИмяПроцедуры = "ЗаписатьНаСервере" Тогда
			РезультатОперации = ЗаписатьНаСервере(ТребуетсяПовторнаяПопыткаЗаписи);
		КонецЕсли;
		
		Если (ТипЗнч(РезультатОперации) = Тип("Булево") И РезультатОперации)
			ИЛИ (ТипЗнч(РезультатОперации) = Тип("Структура") И РезультатОперации.Свойство("РасчетВыполненУспешно") И РезультатОперации.РасчетВыполненУспешно) Тогда
			
			ВыполнитьОбработкуОповещенияЕГАИС(
				ДополнительныеПараметры.ОписаниеОповещения,
				?(ДополнительныеПараметры.ВозвращатьРезультатФункции, РезультатОперации, ДополнительныеПараметры.РезультатПриУспешномПроведении));
			
		Иначе
			
			ПоказатьВопросЕГАИС(
				ОписаниеОповещенияЕГАИС("ОшибкаПриПроведенииЧекаВопросЗавершение", ЭтаФорма, ДополнительныеПараметры),
				ДополнительныеПараметры.ТекстСообщения,
				РежимДиалогаВопрос.ПовторитьОтмена, 10, КодВозвратаДиалога.Повторить,,КодВозвратаДиалога.Повторить);
			
		КонецЕсли;
		
	Иначе
		
		ВыполнитьОбработкуОповещенияЕГАИС(
			ДополнительныеПараметры.ОписаниеОповещения,
			?(ДополнительныеПараметры.ВозвращатьРезультатФункции, ДополнительныеПараметры.РезультатОперации, ДополнительныеПараметры.РезультатПриОтмене));
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьТекущуюДатуСеанса()
	
	Возврат ТекущаяДатаСеанса();
	
КонецФункции

&НаСервере
Функция ПолучитьПараметрыЧека()
	
	РеквизитыКассир = РеквизитыКассира();
	
	ПараметрыЧека = МенеджерОборудованияКлиентСервер.ПараметрыОперацииЧекаКоррекции();
		
	Данные = ДанныеДляЕГАИС();
	
	Для Каждого СтрокаТЧ Из Данные Цикл
		
		Сумма = СтрокаТЧ.Сумма;
		
		// Данные по алкогольной продукции
		ПараметрыАлкогольнойПродукции = Новый Массив;
		Если ИнтеграцияЕГАИСКлиентСервер.ЕстьРеквизитОбъекта(СтрокаТЧ, "АлкогольнаяПродукция")
			И СтрокаТЧ.АлкогольнаяПродукция Тогда
			ПараметрыАлкогольнойПродукции.Добавить(СтрокаТЧ.МаркируемаяПродукция); // Признак наличия штрихкода PDF417
			ПараметрыАлкогольнойПродукции.Добавить(СтрокаТЧ.КодАкцизнойМарки);                // Штрихкод марки в формате PDF417
			ПараметрыАлкогольнойПродукции.Добавить(СтрокаТЧ.Объем);                           // Объем номенклатуры в литрах
			ПараметрыАлкогольнойПродукции.Добавить(СтрокаТЧ.Крепость);                        // Процент содержания алкоголя
			ПараметрыАлкогольнойПродукции.Добавить(СтрокаТЧ.КодВидаАлкогольнойПродукции);     // Код вида алкогольной продукции
		КонецЕсли;
		
		СтрокаПозицииЧека = МенеджерОборудованияКлиентСервер.ПараметрыФискальнойСтрокиЧека(); 
		СтрокаПозицииЧека.ПризнакСпособаРасчета  = ПредопределенноеЗначение("Перечисление.ПризнакиСпособаРасчета.ПередачаСПолнойОплатой");
		СтрокаПозицииЧека.ПризнакПредметаРасчета = РозничныеПродажиКлиентСервер.ПризнакПредметаРасчетаФискальнойОперации(СтрокаТЧ.ТипНоменклатуры, СтрокаТЧ.АлкогольнаяПродукция);
		СтрокаПозицииЧека.Наименование           = СтрокаТЧ.Наименование;
		СтрокаПозицииЧека.Количество             = СтрокаТЧ.КоличествоУпаковок;
		СтрокаПозицииЧека.Цена                   = СтрокаТЧ.Цена;
		СтрокаПозицииЧека.Сумма                  = Сумма;
		СтрокаПозицииЧека.НомерСекции            = 1;
		СтрокаПозицииЧека.СтавкаНДС              = РозничныеПродажиКлиентСервер.СтавкаНДСФискальнойОперации(СтрокаТЧ.СтавкаНДС);
		СтрокаПозицииЧека.Штрихкод               = СтрокаТЧ.Штрихкод;
		
		Если СтрокаПозицииЧека.Количество <> 0 Тогда
			СтрокаПозицииЧека.ЦенаСоСкидками = Окр(СтрокаПозицииЧека.Сумма / СтрокаПозицииЧека.Количество, 2);
		КонецЕсли;
		
		// Дополнительные параметры
		СтрокаПозицииЧека.Вставить("ПараметрыАлкогольнойПродукции", ПараметрыАлкогольнойПродукции);
		
		СтрокаПозицииЧека.ДанныеКодаТоварнойНоменклатуры.ТипМаркировки 							= Неопределено;
		СтрокаПозицииЧека.ДанныеКодаТоварнойНоменклатуры.КонтрольныйИдентификационныйЗнак       = Неопределено;
		СтрокаПозицииЧека.ДанныеКодаТоварнойНоменклатуры.ГлобальныйИдентификаторТорговойЕдиницы = Неопределено;
		СтрокаПозицииЧека.ДанныеКодаТоварнойНоменклатуры.СерийныйНомер 							= Неопределено;
		
		ПараметрыЧека.ПозицииЧека.Добавить(СтрокаПозицииЧека);
		
	КонецЦикла;
	
	ПараметрыЧека.ТипРасчета = ПредопределенноеЗначение("Перечисление.ТипыРасчетаДенежнымиСредствами.ПриходДенежныхСредств");
	ПараметрыЧека.ДокументОснование 	 = Объект.Ссылка;
	ПараметрыЧека.КорректируемыйДокумент = Объект.ЧекККМ;
	ПараметрыЧека.Кассир     = РеквизитыКассир.Наименование; // ФИО лица, осуществившего расчет с покупателем (клиентом), оформившего кассовый чек.
	ПараметрыЧека.КассирИНН  = РеквизитыКассир.ИНН; // Идентификационный номер налогоплательщика кассира, при наличии.
	//ПараметрыЧека.Сумма      = Объект.СуммаДокумента;
	
	ПараметрыЧека.СистемаНалогообложения  = Объект.СистемаНалогообложения;  // Системы налогообложения
//	ПараметрыЧека.НаименованиеОснования   = Объект.ОписаниеКоррекции;   // Наименование документа основания для коррекции
//	ПараметрыЧека.ДатаДокументаОснования  = Объект.ДатаДокументаОснования + 1;  // Дата документа основания для коррекции
//	ПараметрыЧека.НомерДокументаОснования = Объект.НомерДокументаОснования; // Номер документа основания для коррекции
		
	// Наличные
	СтрокаОплаты = МенеджерОборудованияКлиентСервер.ПараметрыСтрокиОплаты();
	СтрокаОплаты.Вставить("ТипОплаты", ПредопределенноеЗначение("Перечисление.ТипыОплатыККТ.Наличные"));
	СтрокаОплаты.Вставить("Сумма",     Объект.ПолученоНаличными);
	ПараметрыЧека.ТаблицаОплат.Добавить(СтрокаОплаты);
	
	// Безналичные
	СтрокаОплаты = МенеджерОборудованияКлиентСервер.ПараметрыСтрокиОплаты();
	СтрокаОплаты.Вставить("ТипОплаты", ПредопределенноеЗначение("Перечисление.ТипыОплатыККТ.Электронно"));
	СтрокаОплаты.Вставить("Сумма",     ИтогОплатПлатежнымиКартами());
	ПараметрыЧека.ТаблицаОплат.Добавить(СтрокаОплаты);
	
	ПараметрыЧека.ДанныеКоррекции.ТипКоррекции      = ?(Объект.ТипКоррекции = ПредопределенноеЗначение("Перечисление.ТипыЧекаКоррекции.Самостоятельно"), 0, 1);
	ПараметрыЧека.ДанныеКоррекции.ОписаниеКоррекции = Объект.ОписаниеКоррекции;
	ПараметрыЧека.ДанныеКоррекции.ДатаКоррекции     = Объект.ДатаСовершенияКорректируемогоРасчета;
	ПараметрыЧека.ДанныеКоррекции.НомерПредписания  = Объект.НомерПредписанияНалоговогоОргана;
	ПараметрыЧека.НеприменениеККТ = Булево(Объект.ВидКоррекции);
	
	Возврат ПараметрыЧека;
	
КонецФункции

&НаКлиенте
Процедура НапечататьЧекКоррекцииКлиент(ФУ)
	
	Если ФУ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектДрайвера = Неопределено;
	ОбработкаОбслуживания = Неопределено;
	ПолучитьСерверТО().ПолучитьОбъектДрайвера(ФУ, ОбработкаОбслуживания, ОбъектДрайвера);
	
	Если ОбработкаОбслуживания = Неопределено Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Ошибка получения обработки обслуживания");
	Иначе
		
		ПараметрыЧека = ПолучитьПараметрыЧека();
		РезультатВыполнения = ОбработкаОбслуживания.НапечататьЧекКоррекции(ОбъектДрайвера, ПараметрыЧека);
		
		Если РезультатВыполнения <> ПредопределенноеЗначение("Перечисление.ТООшибкиОбщие.ПустаяСсылка") Тогда
			ОбщегоНазначения.СообщитьОбОшибке(ОбъектДрайвера.ОписаниеОшибки);
		Иначе
			Объект.НомерЧекаККМ = ОбъектДрайвера.ВыходныеПараметры[1];
			Объект.ПробитЧек    = Истина;
			Модифицированность  = Истина;
			ПодключаемоеОборудование = ФУ;
			РезультатЗаписи = Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПробитьЧек()
	
	ИспользуетсяРегистрацияРозничныхПродажВЕГАИС = ИнтеграцияЕГАИСВызовСервера.ИспользуетсяРегистрацияРозничныхПродажВЕГАИС(
	Объект.Организация, Объект.Склад, ПолучитьТекущуюДатуСеанса());
	
	ОчиститьСообщения();
	
	Если Объект.ПробитЧек Тогда
		ТекстСообщения = НСтр("ru = 'Чек уже пробит на фискальном устройстве.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	Если НЕ Объект.Проведен ИЛИ Модифицированность Тогда
		
		ТекстВопроса = НСтр("ru='Операция возможна только после проведения документа, провести документ?'");
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
		Если Ответ = КодВозвратаДиалога.Да Тогда
			Попытка
				Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
			Исключение
				Предупреждение(НСтр("ru = 'Не удалось выполнить проведение документа'"));
				Возврат;
			КонецПопытки;
		Иначе
			Возврат;
		КонецЕсли;

	КонецЕсли;
	
	МассивККТ = ПолучитьСерверТО().ПолучитьСписокУстройств(
		ПредопределенноеЗначение("Перечисление.ВидыТорговогоОборудования.ККТ"), Объект.КассаККМ);
		
	КоличествоККТ = МассивККТ.Количество();
	Если КоличествоККТ = 0 Тогда
		ТекстСообщения = НСтр("ru='Отсутствуют доступные фискальные устройства'");
		ОбщегоНазначения.СообщитьИнформациюПользователю(ТекстСообщения);
	ИначеЕсли КоличествоККТ = 1 Тогда
		ККТ = МассивККТ[0];
	Иначе
		ПредставлениеУстройства = "";
		ВидУстройства = "";
		СписокККТ = Новый СписокЗначений;

		Для Каждого Устройство Из МассивККТ Цикл
			ПолучитьСерверТО().ПолучитьПредставлениеУстройства(Устройство, ВидУстройства, ПредставлениеУстройства);
			СписокККТ.Добавить(Устройство, ПредставлениеУстройства);
		КонецЦикла;

		ККТ = СписокККТ.ВыбратьЭлемент("Необходимо выбрать фискальное устройство");
		Если ККТ <> Неопределено Тогда
			ККТ = ККТ.Значение;
		КонецЕсли;
	КонецЕсли;
	
	Если ККТ = NULL ИЛИ ККТ = Неопределено Тогда
		Возврат;
	КонецЕсли;

	НапечататьЧекКоррекцииКлиент(ККТ);
	
КонецПроцедуры

&НаКлиенте
Процедура ФискализацияЧекаКоррекции(Команда)
	
	ПровестиПробитьЧек();

КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьКнопкиФискализацияЧекаКоррекции()
	
	Если Объект.ПробитЧек Тогда
		Элементы.ФормаПробитьЧекКоррекции.Видимость = Ложь;
	Иначе
		Элементы.ФормаПробитьЧекКоррекции.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТипКоррекцииПриИзменении(Элемент)
	
	УстановитьВидимостьРеквизитовКоррекции();

КонецПроцедуры

// Конец области "Обработчики событий элементов формы"

// Область "Обработчики событий табличной части товары"

&НаКлиенте
Процедура ТоварыПередНачаломИзменения(Элемент, Отказ)
	
	Если ИзменяетсяНоменклатура(Элемент.ТекущийЭлемент.Имя)
		И НЕ РазрешеноИзменятьНоменклатуру(Элемент.ТекущиеДанные.Номенклатура) Тогда
		
		ТекстСообщения = НСтр("ru = 'Корректировка алкогольной и табачной продукции запрещена. По данной номенклатуре можно изменять только ставку НДС.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
		Отказ = Истина;
		
	Иначе
		
		НомеклатураТекущая = Элемент.ТекущиеДанные.Номенклатура;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьСтруктуруПараметровДляРасчетаСуммы()
	Возврат Новый Структура("УчитыватьНДС,СуммаВключаетНДС", Истина, Истина);
КонецФункции

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	Если НЕ РазрешеноИзменятьНоменклатуру(ТекущаяСтрока.Номенклатура) Тогда
		
		ТекущаяСтрока.Номенклатура = НомеклатураТекущая;
		
		ТекстСообщения = НСтр("ru = 'Корректировка алкогольной продукции запрещена.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	Иначе	
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
		
		ОбработкаТабличнойЧастиСерверЕГАИСУТ.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСерияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	ВыбранноеЗначение = НоменклатураКлиентСервер.ВыбраннаяСерия();
	ВыбранноеЗначение.Значение                   = ТекущаяСтрока.Серия;
	ВыбранноеЗначение.ИдентификаторТекущейСтроки = ТекущаяСтрока.ПолучитьИдентификатор();
	
	НоменклатураКлиент.ОбработатьУказаниеСерии(ЭтаФорма, ПараметрыУказанияСерий, ВыбранноеЗначение);
	
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСерияПриИзменении(Элемент)
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	ВыбранноеЗначение = НоменклатураКлиентСервер.ВыбраннаяСерия();
	ВыбранноеЗначение.Значение                   = ТекущаяСтрока.Серия;
	ВыбранноеЗначение.ИдентификаторТекущейСтроки = ТекущаяСтрока.ПолучитьИдентификатор();
	
	НоменклатураКлиент.ОбработатьУказаниеСерии(ЭтаФорма, ПараметрыУказанияСерий, ВыбранноеЗначение);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыСтавкаНДСПриИзменении(Элемент)
	
	// Рассчитать реквизиты табличной части.
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;

//	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(Этаформа.Элементы.Товары.ТекущиеДанные, Объект.Ссылка.ПолучитьОбъект());
	РаботаСДиалогамиКлиент.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, РаботаСДиалогамиСервер.ПолучитьПроцентыСтавокНДС(), ПолучитьСтруктуруПараметровДляРасчетаСуммы());

КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	РассчитатьВнесенныеРасхождения();
	
КонецПроцедуры

// Конец области "Обработчики событий табличной части товары"

// Область "При изменении реквизитов"

&НаКлиенте
Процедура УстановитьВидимостьРеквизитовКоррекции()
	
	Если Объект.ТипКоррекции = ПредопределенноеЗначение("Перечисление.ТипыЧекаКоррекции.ПоПредписанию") Тогда
		Элементы.НомерПредписанияНалоговогоОргана.Видимость = Истина;
	Иначе
		Элементы.НомерПредписанияНалоговогоОргана.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьОписанияКоррекции()
	
	Если Объект.ВидКоррекции = 1 Тогда
		Элементы.ОписаниеКоррекции.ТолькоПросмотр = Истина;
	Иначе
		Элементы.ОписаниеКоррекции.ТолькоПросмотр = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Конец области "При изменении реквизитов"

// Область "Серии"

&НаСервере
Процедура УстановитьВидимостьЭлементовСерий()
	
	Элементы.ТоварыСерия.Видимость                = ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если НоменклатураКлиент.ЭтоУказаниеСерий(ИсточникВыбора) Тогда
		НоменклатураКлиент.ОбработатьУказаниеСерии(ЭтаФорма, ПараметрыУказанияСерий, ВыбранноеЗначение);
	КонецЕсли;
	
КонецПроцедуры

// Конец области "Серии"

// Область "Служебные процедуры и функции"

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	//

	НоменклатураСервер.УстановитьУсловноеОформлениеЕдиницИзмерения(ЭтаФорма);
	НоменклатураСервер.УстановитьУсловноеОформлениеЕдиницИзмерения(
		ЭтаФорма,
		"РасхожденияНоменклатураЕдиницаИзмерения",
		"Расхождения.Упаковка"
	);

	//

	НоменклатураСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(ЭтаФорма);
	НоменклатураСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(
		ЭтаФорма,
		"РасхожденияХарактеристика",
		"Расхождения.ХарактеристикиИспользуются"
	);

	//

	НоменклатураСервер.УстановитьУсловноеОформлениеСерийНоменклатуры(ЭтаФорма, Ложь);
	НоменклатураСервер.УстановитьУсловноеОформлениеСерийНоменклатуры(
		ЭтаФорма, 
		"РасхожденияСерия",
		"Расхождения.Номенклатура.ВестиУчетПоСериям"
	);

	//

КонецПроцедуры

&НаСервере
Процедура СформироватьНачальноеЗаполнениеЧекККМТовары()
	
	Если НЕ ЗначениеЗаполнено(Объект.ЧекККМ) Тогда
		Возврат;
	КонецЕсли;
	
	ТЧТоварыЧекаККМ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ЧекККМ, "Товары").Выгрузить();
	
	Для Каждого СтрокаТЧ Из ТЧТоварыЧекаККМ Цикл
		СтрокаЧекККМТовары = ЧекККМТовары.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаЧекККМТовары, СтрокаТЧ, , "Цена, Сумма");
		
		СтрокаЧекККМТовары.ХарактеристикиИспользуются	= ?(Не СтрокаТЧ.Номенклатура.ВестиУчетПоХарактеристикам, Ложь, Истина);
		СтрокаЧекККМТовары.НоменклатураЕдиницаИзмерения = СтрокаТЧ.ЕдиницаИзмерения;
		СтрокаЧекККМТовары.Упаковка 					= СтрокаТЧ.ЕдиницаИзмерения;
		СтрокаЧекККМТовары.КоличествоУпаковок 	= -СтрокаТЧ.Количество;
		СтрокаЧекККМТовары.Цена 				= -Объект.Товары[СтрокаТЧ.НомерСтроки-1].Цена;
		СтрокаЧекККМТовары.СуммаНДС 			= -СтрокаТЧ.Сумма / ?(ЗначениеЗаполнено(СтрокаТЧ.Номенклатура.СтавкаНДС), ?(СтрокаТЧ.Номенклатура.СтавкаНДС <> Перечисления.СтавкиНДС.БезНДС, 
			?(СтрокаТЧ.Номенклатура.СтавкаНДС <> Перечисления.СтавкиНДС.НДС0, ?(СтрокаТЧ.Номенклатура.СтавкаНДС = Перечисления.СтавкиНДС.НДС10, 1.1/0.1, 
			?(СтрокаТЧ.Номенклатура.СтавкаНДС = Перечисления.СтавкиНДС.НДС18, 1.18/0.18, 1.2/0.2)), 1), 1), 1);
		СтрокаЧекККМТовары.СтавкаНДС			= СтрокаТЧ.Номенклатура.СтавкаНДС;
		СтрокаЧекККМТовары.Сумма 				= -СтрокаТЧ.Сумма;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция РассчитатьВнесенныеРасхождения()
	
	Расхождения.Очистить();
	
	ТаблицаРасчетаРасхождений = ЧекККМТовары.Выгрузить();
	
	Для Каждого СтрокаТЧ Из Объект.Товары Цикл
		СтрокаТаблицыРасчетаРасхождений = ТаблицаРасчетаРасхождений.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицыРасчетаРасхождений, СтрокаТЧ);
		
		СтрокаТаблицыРасчетаРасхождений.НоменклатураЕдиницаИзмерения = СтрокаТЧ.Упаковка;
	КонецЦикла;
	
	КолонкиГруппировки = "НомерСтроки, Номенклатура, Характеристика, ХарактеристикиИспользуются, Серия, Упаковка, НоменклатураЕдиницаИзмерения, СтавкаНДС";
	КолонкиСуммирования = "КоличествоУпаковок, Цена, СуммаНДС, Сумма";
	ТаблицаРасчетаРасхождений.Свернуть(КолонкиГруппировки, КолонкиСуммирования);
	ТаблицаРасчетаРасхождений.Сортировать("НомерСтроки Возр, КоличествоУпаковок Убыв, Цена Убыв, СуммаНДС Убыв, Сумма Убыв");
	
	НомерИтерации = 1;
	КоличествоИтераций = ТаблицаРасчетаРасхождений.Количество();
	Пока КоличествоИтераций >= НомерИтерации Цикл
		СтрокаТаблицыРасчетаРасхождений = ТаблицаРасчетаРасхождений[КоличествоИтераций - НомерИтерации];
		
		Если СтрокаТаблицыРасчетаРасхождений.КоличествоУпаковок = 0
			И СтрокаТаблицыРасчетаРасхождений.СуммаНДС = 0
			И СтрокаТаблицыРасчетаРасхождений.Сумма = 0 Тогда
			
			ТаблицаРасчетаРасхождений.Удалить(СтрокаТаблицыРасчетаРасхождений);
		КонецЕсли;
		
		НомерИтерации = НомерИтерации + 1;
	КонецЦикла;
	
	Расхождения.Загрузить(ТаблицаРасчетаРасхождений);
	
	ОбновитьЗаголовокСтраницыРасхождения();
	
КонецФункции

Процедура ОбновитьЗаголовокСтраницыРасхождения()
	
	РасхожденияКоличествоСтрок = Расхождения.Количество();
	
	Если РасхожденияКоличествоСтрок > 0 Тогда
		пЗаголовок = НСтр("ru = 'Расхождения (" + РасхожденияКоличествоСтрок + ")'");
	Иначе
		пЗаголовок = НСтр("ru = 'Расхождения'");
	КонецЕсли;
	
	Элементы.СтраницаРасхождения.Заголовок = пЗаголовок
	
КонецПроцедуры

&НаСервере
Функция ДанныеДляЕГАИС()
	
	Возврат Документы.ЧекККМКоррекции.ДанныеДляЕГАИС(Объект);
	
КонецФункции

&НаСервере
Функция РеквизитыКассира()
	
	Возврат РозничныеПродажи.РеквизитыКассира(Пользователи.ТекущийПользователь());
	
КонецФункции

&НаСервере
Функция РазрешеноИзменятьНоменклатуру(Номенклатура)
	
	ФлагРазрешеноИзменятьНоменклатуру = Истина;
	
	РеквизитыВидаНоменклатуры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Номенклатура, "АлкогольнаяПродукция");
	
	Если РеквизитыВидаНоменклатуры.АлкогольнаяПродукция Тогда
		
		ФлагРазрешеноИзменятьНоменклатуру = Ложь;
	КонецЕсли;
	
	Возврат ФлагРазрешеноИзменятьНоменклатуру;
	
КонецФункции

&НаКлиенте
Функция ИзменяетсяНоменклатура(ЭлементИмя)
	
	ФлагИзменяетсяНоменклатура = Истина;
	
	МассивЭлементовНоменклатуры = Новый Массив;
	МассивЭлементовНоменклатуры.Добавить("ТоварыНоменклатура");
	МассивЭлементовНоменклатуры.Добавить("ТоварыХарактеристика");
	МассивЭлементовНоменклатуры.Добавить("ТоварыСерия");
	
	Если МассивЭлементовНоменклатуры.Найти(ЭлементИмя) = Неопределено Тогда
		ФлагИзменяетсяНоменклатура = Ложь;
	КонецЕсли;
	
	Возврат ФлагИзменяетсяНоменклатура;
	
КонецФункции

&НаКлиенте
Процедура ПровестиПробитьЧек()
	
	ОчиститьСообщения();
	
	Если Объект.Проведен Тогда
		ПробитьЧек();
	Иначе
		ОбработатьРежимЗаписи();
	КонецЕсли;
	
КонецПроцедуры

// Область "Обработка проведения"

&НаКлиенте
Процедура ОбработатьРежимЗаписи()
	
	ПоказатьВопросЕГАИС(
		ОписаниеОповещенияЕГАИС("ПослеОтветаНаВопросОЗаписиДокумента", ЭтаФорма),
		НСтр("ru = 'Операция возможна только после проведения документа, провести документ?'"),
		РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеОтветаНаВопросОЗаписиДокумента(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		ЗаписатьОбъект(
			ЭтаФорма,
			РежимЗаписиДокумента.Проведение,
			ОписаниеОповещенияЕГАИС( "ПробитиеЧекаПослеЗаписиДокумента", ЭтаФорма));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьОбъект(Форма, РежимЗаписиДокумента, ОписаниеОповещения)
	
	ОтветЧерезОписаниеОповещения = ИнтеграцияЕГАИСКлиентСервер.ЕстьРеквизитОбъекта(Форма, "НеВыполнятьПроверкуПередЗаписью");
	
	Проведен = Ложь;
	Попытка
		
		Если ОтветЧерезОписаниеОповещения Тогда
			
			Форма.Записать(
				Новый Структура(
					"РежимЗаписи, ДействиеПослеЗаписи",
					РежимЗаписиДокумента,
					ОписаниеОповещения));
			
		Иначе
			
			Проведен = Форма.Записать(
				Новый Структура(
					"РежимЗаписи",
					РежимЗаписиДокумента));
			
		КонецЕсли;
		
	Исключение
		
		Проведен = Ложь;
		
	КонецПопытки;
	
	Если Не ОтветЧерезОписаниеОповещения Тогда
		ВыполнитьОбработкуОповещенияЕГАИС(ОписаниеОповещения, Проведен);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПробитиеЧекаПослеЗаписиДокумента(Результат, ДополнительныеПараметры) Экспорт
	
	Если Объект.Проведен Тогда
		ПробитьЧек();
	КонецЕсли; 
	
КонецПроцедуры

// Конец области "Обработка проведения"

// ФискальнаяОперация

// КонецОбласти "ФискальнаяОперация"

// Область "Прочее"

&НаСервере
Функция ИтогОплатПлатежнымиКартами()
	
	СуммаОплатПлатежнымиКартами = 0;
	
	Для Каждого СтрокаОплаты Из Объект.Оплата Цикл
		
		Если ЗначениеЗаполнено(СтрокаОплаты.ВидОплаты) Тогда
			
			Если СтрокаОплаты.ВидОплаты.ТипОплаты = Перечисления.ТипыОплатЧекаККМ.ПлатежнаяКарта Тогда
				СуммаОплатПлатежнымиКартами = СуммаОплатПлатежнымиКартами + СтрокаОплаты.Сумма;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СуммаОплатПлатежнымиКартами;
КонецФункции
	
&НаКлиенте
Процедура ПересчитатьДокументНаКлиенте()
	
	СуммаДокумента = Ценообразование.ПолучитьСуммуДокументаБезСкидки(Объект.Товары);
	ОплаченоПрочее = ИтогОплатПлатежнымиКартами();
	СуммаСдачи = ОплаченоПрочее + Объект.ПолученоНаличными - Объект.СуммаДокумента;
	СуммаСкидки = 0;
	СуммаБезСкидки = Объект.СуммаДокумента + СуммаСкидки;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПредставлениеДокументаОснования()
	
	Если ЗначениеЗаполнено(Объект.ЧекККМ) Тогда
		ПредставлениеДокументаОснования = Строка(Объект.ЧекККМ);
		Элементы.ПредставлениеДокументаОснования.ЦветТекста = ЦветаСтиля.ЦветГиперссылки;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСлужебныеРеквизитыПоНоменклатуре()
	
	ПараметрыЗаполненияРеквизитов = Новый Структура;
	ПараметрыЗаполненияРеквизитов.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются", Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(Объект.Товары, ПараметрыЗаполненияРеквизитов);
	
КонецПроцедуры

// Конец области "Прочее"

// КонецОбласти "СлужебныеПроцедурыИФункции"
