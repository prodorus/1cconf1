#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

// Область "Обработчики событий"

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка) Экспорт
	
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	
	Если ТипДанныхЗаполнения = Тип("ДокументСсылка.ЧекККМ") Тогда
		
		Если ЕстьКоррекцияПоЧекуККМ(ДанныеЗаполнения) Тогда
			ВызватьИсключение НСтр("ru = 'По Чеку ККМ введен Чек ККМ коррекции. Ввод нового Чека ККМ коррекции запрещен!'");
		КонецЕсли;
		
		ЗаполнитьДокументПоЧекуККМ(ДанныеЗаполнения);
		
	ИначеЕсли ТипДанныхЗаполнения = Тип("Структура") И ДанныеЗаполнения.Свойство("Товары") Тогда
		
		ЗаполнитьДокументПоЧекуККМ(ДанныеЗаполнения);
		Товары.Очистить();
		
		ВозвращаемыеТовары = ПолучитьИзВременногоХранилища(ДанныеЗаполнения.Товары);
		
		Для Каждого СтрокаТЧ Из ВозвращаемыеТовары Цикл
			НоваяСтрока = Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
			
			НоваяСтрока.КоличествоДо = СтрокаТЧ.Количество;
			НоваяСтрока.КоличествоУпаковокДо = СтрокаТЧ.КоличествоУпаковок;
			НоваяСтрока.ЦенаДо = СтрокаТЧ.Цена;
			НоваяСтрока.СуммаДо = СтрокаТЧ.Сумма;
			НоваяСтрока.СтавкаНДСДо = СтрокаТЧ.СтавкаНДС;
			НоваяСтрока.СуммаНДСДо = СтрокаТЧ.СуммаНДС;
		КонецЦикла;

	Иначе
		
		Если Не ЗначениеЗаполнено(ЧекККМ) Тогда
			ВызватьИсключение НСтр("ru = 'Чек ККМ коррекции необходимо вводить на основании чека ККМ'");
		КонецЕсли;
		
	КонецЕсли;
	
	ИнициализироватьДокумент(ДанныеЗаполнения);
	
КонецПроцедуры

// Сопоставить алкогольную продукцию с номенклатурой.
//
// Параметры:
//  Объект - ДокументОбъект - Объект в котором сопоставляется номенклатура.
//  ИмяКолонки - Строка - Имя колонки с номенклатурой ЕГАИС.
//  ЗаписыватьСправку2 - Булево - признак сопоставления по справке 2.
//  СопоставлятьПоИдентификаторуУпаковки - Булево - признак сопоставления по идентификатору.
//
Процедура СопоставитьАлкогольнуюПродукциюСНоменклатурой(Объект, ИмяКолонки = "НоменклатураЕГАИС", ЗаписыватьСправку2 = Ложь, СопоставлятьПоИдентификаторуУпаковки = Ложь, СопоставлятьПоСерии = Истина) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	КолонкиДляВыгрузки = ИмяКолонки + ", " + "Номенклатура, ХарактеристикаНоменклатуры";
	Если СопоставлятьПоСерии Тогда
		КолонкиДляВыгрузки = КолонкиДляВыгрузки + ", СерияНоменклатуры";
	КонецЕсли;
	Если СопоставлятьПоИдентификаторуУпаковки Тогда
		КолонкиДляВыгрузки = КолонкиДляВыгрузки + ", ИдентификаторУпаковки";
	КонецЕсли;
	Если ЗаписыватьСправку2 Тогда
		КолонкиДляВыгрузки = КолонкиДляВыгрузки + ", Справка2";
	КонецЕсли;
	Данные = Объект.Товары.Выгрузить(, КолонкиДляВыгрузки);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	&ИмяКолонкиАлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	Т.Номенклатура,
	|	Т.ХарактеристикаНоменклатуры КАК Характеристика,
	|	&ИмяКолонкиСерия КАК Серия,
	|	&ИмяКолонкиИдентификаторУпаковки КАК ИдентификаторУпаковки,
	|	&ИмяКолонкиСправка2 КАК Справка2
	|ПОМЕСТИТЬ Таблица
	|ИЗ
	|	&Таблица КАК Т
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Таблица.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	Таблица.Номенклатура КАК Номенклатура,
	|	Таблица.Характеристика КАК Характеристика,
	|	Таблица.Серия КАК Серия,
	|	Таблица.ИдентификаторУпаковки КАК ИдентификаторУпаковки,
	|	Таблица.Справка2 КАК Справка2,
	|	Сопоставлено.АлкогольнаяПродукция КАК Сопоставлено,
	|	МАКСИМУМ(ЕСТЬNULL(Сопоставлено.Порядок,ЕСТЬNULL(СопоставленоБЕЗСерии.Порядок,0))) КАК Порядок
	|ИЗ
	|	Таблица КАК Таблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеНоменклатурыЕГАИС КАК Сопоставлено
	|		ПО Сопоставлено.Номенклатура = Таблица.Номенклатура
	|		 И Сопоставлено.Характеристика = Таблица.Характеристика
	|		 И Сопоставлено.ИдентификаторУпаковки = Таблица.ИдентификаторУпаковки
	|		 И Сопоставлено.Справка2 = Таблица.Справка2
	|		 И Сопоставлено.Серия = Таблица.Серия
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеНоменклатурыЕГАИС КАК СопоставленоБЕЗСерии
	|		ПО СопоставленоБЕЗСерии.Номенклатура = Таблица.Номенклатура
	|		 И СопоставленоБЕЗСерии.Характеристика = Таблица.Характеристика
	|		 И СопоставленоБЕЗСерии.ИдентификаторУпаковки = Таблица.ИдентификаторУпаковки
	|		 И СопоставленоБЕЗСерии.Справка2 = Таблица.Справка2
	|ГДЕ
	|	Таблица.АлкогольнаяПродукция <> ЗНАЧЕНИЕ(Справочник.КлассификаторАлкогольнойПродукцииЕГАИС.ПустаяСсылка)
	|	И Таблица.Номенклатура <> &ПустаяСсылкаНоменклатура
	|	И (Сопоставлено.АлкогольнаяПродукция ЕСТЬ NULL
	|		ИЛИ Сопоставлено.АлкогольнаяПродукция <> Таблица.АлкогольнаяПродукция)
	|СГРУППИРОВАТЬ ПО
	|	Таблица.АлкогольнаяПродукция,
	|	Таблица.Номенклатура,
	|	Таблица.Характеристика,
	|	Таблица.Серия,
	|	Таблица.ИдентификаторУпаковки,
	|	Таблица.Справка2,
	|	Сопоставлено.АлкогольнаяПродукция
	|");
	
	Запрос.УстановитьПараметр("Таблица", Данные);
	Запрос.УстановитьПараметр("ПустаяСсылкаНоменклатура", Справочники.Номенклатура.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустаяСтрока", "");
	Запрос.УстановитьПараметр("ПустаяСправка2", Справочники.Справки2ЕГАИС.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустаяСерия", Справочники.СерииНоменклатуры.ПустаяСсылка());
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ИмяКолонкиАлкогольнаяПродукция", ИмяКолонки);
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ИмяКолонкиИдентификаторУпаковки",
		?(СопоставлятьПоИдентификаторуУпаковки, "Т.ИдентификаторУпаковки", "&ПустаяСтрока"));
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ИмяКолонкиСерия",
		?(СопоставлятьПоСерии, "Т.СерияНоменклатуры", "&ПустаяСерия"));
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ИмяКолонкиСправка2",
		?(ЗаписыватьСправку2, "Т.Справка2", "&ПустаяСправка2"));
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НаборЗаписей = РегистрыСведений.СоответствиеНоменклатурыЕГАИС.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Номенклатура.Установить(Выборка.Номенклатура, Истина);
		НаборЗаписей.Отбор.Характеристика.Установить(Выборка.Характеристика, Истина);
		НаборЗаписей.Отбор.Серия.Установить(Выборка.Серия, Истина);
		НаборЗаписей.Отбор.АлкогольнаяПродукция.Установить(Выборка.АлкогольнаяПродукция, Истина);
		НаборЗаписей.Отбор.ИдентификаторУпаковки.Установить(Выборка.ИдентификаторУпаковки, Истина);
		НаборЗаписей.Отбор.Справка2.Установить(Выборка.Справка2, Истина);
		
		НоваяЗапись = НаборЗаписей.Добавить();
		
		НоваяЗапись.Номенклатура   = Выборка.Номенклатура;
		НоваяЗапись.Характеристика = Выборка.Характеристика;
		
		ПараметрыУказанияСерий = ГосударственныеИнформационныеСистемыПереопределяемый.ПараметрыУказанияСерийФормыОбъекта(НоваяЗапись, РегистрыСведений.СоответствиеНоменклатурыЕГАИС);
		ГосударственныеИнформационныеСистемыПереопределяемый.ЗаполнитьСтатусыУказанияСерий(НоваяЗапись, ПараметрыУказанияСерий);
		
		НоваяЗапись.Серия                 = Выборка.Серия;
		НоваяЗапись.АлкогольнаяПродукция  = Выборка.АлкогольнаяПродукция;
		НоваяЗапись.ИдентификаторУпаковки = Выборка.ИдентификаторУпаковки;
		НоваяЗапись.Справка2              = Выборка.Справка2;
		НоваяЗапись.Порядок               = Выборка.Порядок + 1;
		
		Попытка
			НаборЗаписей.Записать();
		Исключение
			
			ТекстОшибки = НСтр("ru = 'При записи соответствия номенклатуры произошла ошибка:
			                         |%1'");
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтрШаблон(ТекстОшибки, КраткоеПредставлениеОшибки(ИнформацияОбОшибке())));
			
			ИнтеграцияЕГАИСВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(
				СтрШаблон(ТекстОшибки, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
			
		КонецПопытки;
		
	КонецЦикла;
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	Если Не ЗначениеЗаполнено(ПробитЧек) Тогда
		ПробитЧек = Ложь;
	КонецЕсли;
	
	Если ПробитЧек И РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
		
		Отказ = Истина;
		
		ТекстОшибки = НСтр("ru='Чек ККМ пробит. Отмена проведения невозможна'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ЭтотОбъект);
		Возврат;
		
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить("ЭтоНовый", ЭтоНовый());
	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);
	
	СуммаДокумента = Ценообразование.ПолучитьСуммуДокументаБезСкидки(Товары);
	
	СопоставитьАлкогольнуюПродукциюСНоменклатурой(ЭтотОбъект);
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	ИнтеграцияЕГАИС.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства, РежимПроведения);
	
	Документы.ЧекККМКоррекции.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства); // Ссылка = ЧекККМ
	
	ИнтеграцияЕГАИС.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	//ОтразитьСвободныеОстатки(ДополнительныеСвойства, Движения, Отказ);
	ОтразитьТоварыНаСкладах(ДополнительныеСвойства, Движения, Отказ);
	ОтразитьДвиженияСерийТоваров(ДополнительныеСвойства, Движения, Отказ);
	РегистрыНакопления.ОстаткиАлкогольнойПродукцииЕГАИС.ОтразитьДвижения(ДополнительныеСвойства, Движения, Отказ);
	
	ИнтеграцияЕГАИС.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	ИнтеграцияЕГАИС.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ИнтеграцияЕГАИС.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	ИнтеграцияЕГАИС.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	ИнтеграцияЕГАИС.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	ИнтеграцияЕГАИС.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	ВызватьИсключение НСтр("ru = 'Копирование документа ""Чек ККМ коррекции"" запрещено!'");
	
КонецПроцедуры

// Процедура проверки заполнения колонок "Характеристика" в объектах.
//
// Параметры:
//	Объект - ДокументОбъект (СправочникОбъект и т.п.) - объект, для которого требуется проверить заполнение 
//		колонки "ХарактеристикаНоменклатуры" в табличной части;
//	МассивНепроверяемыхРеквизитов -Массив - реквизиты, которые не нужно проверять платформенной проверкой;
//	Отказ - Булево, Истина - признак отказа продолжения операции;
//	ПараметрыПроверки - Структура - см. НоменклатураСервер.ПараметрыПроверкиЗаполненияХарактеристик.
//
Процедура ПроверитьЗаполнениеХарактеристик(Объект,МассивНепроверяемыхРеквизитов,Отказ,ПараметрыПроверки = Неопределено) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользованиеХарактеристикНоменклатуры") Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыПроверки = Неопределено Тогда
		ПараметрыПроверки = НоменклатураСервер.ПараметрыПроверкиЗаполненияХарактеристик();
	КонецЕсли;
	
	ИмяТЧ                 = ПараметрыПроверки.ИмяТЧ;
	СуффиксДопРеквизита   = ПараметрыПроверки.СуффиксДопРеквизита;
	СписокСтрок           = ПараметрыПроверки.СписокСтрок;
	ВыводитьНомераСтрок   = ПараметрыПроверки.ВыводитьНомераСтрок;
	
	МассивНепроверяемыхРеквизитов.Добавить(ИмяТЧ+".ХарактеристикаНоменклатуры");
	
	Если ЗначениеЗаполнено(СуффиксДопРеквизита) Тогда
		МассивНепроверяемыхРеквизитов.Добавить(ИмяТЧ+".ХарактеристикаНоменклатуры"+СуффиксДопРеквизита);
	КонецЕсли;
	
	КлючДанных = ИнтеграцияЕГАИСПереопределяемый.КлючДанныхДляСообщенияПользователю(Объект);
	
	Запрос = Новый Запрос;
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки,";
	
	Если ЗначениеЗаполнено(СуффиксДопРеквизита) Тогда
		ТекстЗапроса = ТекстЗапроса + "
	|	ТаблицаТоваров.Номенклатура"+СуффиксДопРеквизита+" КАК Номенклатура"+СуффиксДопРеквизита+",
	|	ТаблицаТоваров.ХарактеристикаНоменклатуры"+СуффиксДопРеквизита+" КАК Характеристика"+СуффиксДопРеквизита+",";
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + "
	|	ТаблицаТоваров.Номенклатура КАК Номенклатура,
	|	ТаблицаТоваров.ХарактеристикаНоменклатуры КАК Характеристика
	|ПОМЕСТИТЬ СтрокиСОшибками
	|ИЗ
	|	&ТаблицаТоваров КАК ТаблицаТоваров
	|ГДЕ
	|	ТаблицаТоваров.ХарактеристикаНоменклатуры = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)";
	
	Если ЗначениеЗаполнено(СуффиксДопРеквизита) Тогда
		ТекстЗапроса = ТекстЗапроса + "
	|	ИЛИ ТаблицаТоваров.ХарактеристикаНоменклатуры"+СуффиксДопРеквизита+" = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)";
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтрокиСОшибками.НомерСтроки,";
	
	Если ЗначениеЗаполнено(СуффиксДопРеквизита) Тогда
		ТекстЗапроса = ТекстЗапроса + "	
		|	ВЫБОР
		|		КОГДА ВЫРАЗИТЬ(СтрокиСОшибками.Номенклатура" + СуффиксДопРеквизита +" КАК Справочник.Номенклатура).ВестиУчетПоХарактеристикам
		|			И СтрокиСОшибками.Характеристика"+СуффиксДопРеквизита+" = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК НеЗаполненаХарактеристика" + СуффиксДопРеквизита +",";
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + "	
	|	ВЫБОР
	|		КОГДА ВЫРАЗИТЬ(СтрокиСОшибками.Номенклатура КАК Справочник.Номенклатура).ВестиУчетПоХарактеристикам
	|			И СтрокиСОшибками.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НеЗаполненаХарактеристика
	|ИЗ
	|	СтрокиСОшибками КАК СтрокиСОшибками
	|ГДЕ
	|	ВЫРАЗИТЬ(СтрокиСОшибками.Номенклатура КАК Справочник.Номенклатура).ВестиУчетПоХарактеристикам
	| 	И СтрокиСОшибками.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)";
	
	Если ЗначениеЗаполнено(СуффиксДопРеквизита) Тогда
		ТекстЗапроса = ТекстЗапроса + "
	|	ИЛИ ВЫРАЗИТЬ(СтрокиСОшибками.Номенклатура" + СуффиксДопРеквизита +" КАК Справочник.Номенклатура).ВестиУчетПоХарактеристикам
	|			И СтрокиСОшибками.Характеристика"+СуффиксДопРеквизита+" = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)";
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	СтрокаДопРеквизитов = ?(Не ЗначениеЗаполнено(СуффиксДопРеквизита), "", ",Номенклатура"+СуффиксДопРеквизита+",Характеристика"+СуффиксДопРеквизита);
	
	ОтборСтрокДляПроверки = Неопределено;
	
	Если СписокСтрок = Неопределено
		И ПараметрыПроверки.ОтборПроверяемыхСтрок.Количество() > 0 Тогда
		ОтборСтрокДляПроверки = ПараметрыПроверки.ОтборПроверяемыхСтрок;
	Иначе
		ОтборСтрокДляПроверки = СписокСтрок;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ТаблицаТоваров",
		Объект[ИмяТЧ].Выгрузить(ОтборСтрокДляПроверки, "НомерСтроки,Номенклатура,ХарактеристикаНоменклатуры"+СтрокаДопРеквизитов));
	
	Если ВыводитьНомераСтрок Тогда
		ШаблонСообщения = НСтр("ru='Не заполнена колонка ""%Характеристика%"" в строке %НомерСтроки% списка ""%ТаблицаТовары%"".'");
	Иначе
		ШаблонСообщения = НСтр("ru='Не заполнена колонка ""%Характеристика%"" в списке ""%ТаблицаТовары%"".'");
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не ПараметрыПроверки.ВыдаватьСообщения Тогда
		
		Если Не РезультатЗапроса.Пустой() Тогда
			Отказ = Истина;
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если ТипЗнч(Объект) = Тип("УправляемаяФорма") Тогда
		МетаданныеОбъекта = Объект.Ссылка.Метаданные();
	Иначе
		МетаданныеОбъекта = Объект.Метаданные();
	КонецЕсли;
	
	ПредставлениеТЧ = ?(Не ПараметрыПроверки.Свойство("ПредставлениеТЧ") ИЛИ Не ЗначениеЗаполнено(ПараметрыПроверки.ПредставлениеТЧ),
		МетаданныеОбъекта.ТабличныеЧасти[ИмяТЧ].Синоним,
		ПараметрыПроверки.ПредставлениеТЧ);
	ПредставлениеРеквизитаХарактеристика = МетаданныеОбъекта.ТабличныеЧасти[ИмяТЧ].Реквизиты.ХарактеристикаНоменклатуры.Синоним;
	ПредставлениеРеквизитаХарактеристикаДоп = МетаданныеОбъекта.ТабличныеЧасти[ИмяТЧ].Реквизиты["ХарактеристикаНоменклатуры"+СуффиксДопРеквизита].Синоним;
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.НеЗаполненаХарактеристика Тогда
			
			ТекстСообщения = СтрЗаменить(ШаблонСообщения, "%Характеристика%", ПредставлениеРеквизитаХарактеристика);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТаблицаТовары%", ПредставлениеТЧ);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерСтроки%", Выборка.НомерСтроки);
			
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТЧ,
																	Выборка.НомерСтроки,
																	ПараметрыПроверки.ИмяКолонкиХарактеристикаТаблицыФормы);
			                                                                           
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,
																КлючДанных,
																Поле,
																ПараметрыПроверки.ПутьКДаннымТаблицыФормы,
																Отказ);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СуффиксДопРеквизита)
			И Выборка["НеЗаполненаХарактеристика" + СуффиксДопРеквизита] Тогда
			
			ТекстСообщения = СтрЗаменить(ШаблонСообщения, "%Характеристика%", ПредставлениеРеквизитаХарактеристикаДоп);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТаблицаТовары%", ПредставлениеТЧ);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерСтроки%", Выборка.НомерСтроки);
			
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТЧ,
																	Выборка.НомерСтроки,
																	ПараметрыПроверки.ИмяКолонкиХарактеристикаТаблицыФормы + СуффиксДопРеквизита);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,
																КлючДанных,
																Поле,
																ПараметрыПроверки.ПутьКДаннымТаблицыФормы,
																Отказ);
		КонецЕсли;
		
	КонецЦикла;
		
КонецПроцедуры

// Процедура проверяет правильность указания серий товаров по статусам в ТЧ "Товары"
//  Если статусы
//  	1 - количество по сериям не совпадает с количеством товаров (движения по сериям делать не нужно)
//  	3 - количество по сериям не совпадает с количеством товаров (нужно делать движения по сериям)
//  	5 - количество по сериям не совпадает с количеством товаров (нужно делать движения по сериям, серии заполняются по FEFO)
//  	7 - количество по сериям не совпадает с количеством товаров (серии указываются при планировании отбора)
//  	9 - количество по сериям не совпадает с количеством товаров (серии указываются при планировании отгрузки)
//  	13 - количество по сериям не совпадает с количеством товаров или серия не указана (учет себестоимости по сериям)
// 			то выдается ошибка.
//
// Параметры:
//  ДокументОбъект					 - ДокументОбъект	 - объект, в котором нужно проверить указание серий
//  ПараметрыУказанияСерий			 - Структура		 - структура параметров указания серий, возвращаемая соотвествующей процедурой модуля менеджера документа
//  Отказ							 - Булево			 - признак ошибки проверки
//  МассивНепроверяемыхРеквизитов	 - Массив, Строка	 - массив имен реквизитов, которые нужно исключить из платформенной проверки
//  ВыдаватьСообщения				 - Булево			 - признак того, что нужно выдавать сообщения об ошибках проверки.
//
Процедура ПроверитьЗаполнениеСерий(ДокументОбъект,ПараметрыУказанияСерий,Отказ,МассивНепроверяемыхРеквизитов = Неопределено, ПараметрыПроверки = Неопределено) Экспорт
	
	Если ПараметрыПроверки = Неопределено Тогда
		ПараметрыПроверки = НоменклатураСервер.ПараметрыПроверкиЗаполненияСерий(); 
	КонецЕсли;
	
	МетаданныеДокумента = ИнтеграцияЕГАИСПереопределяемый.МетаданныеОбъектаПоПолномуИмени(ПараметрыУказанияСерий.ПолноеИмяОбъекта);
	
	Суффиксы = Новый Массив;
	Если ПараметрыУказанияСерий.ИменаПолейСтатусУказанияСерий.Количество() = 0 Тогда
		Суффиксы.Добавить("");
	Иначе
		Для Каждого ИмяПоляСтатус Из ПараметрыУказанияСерий.ИменаПолейСтатусУказанияСерий Цикл
			Суффикс = НоменклатураКлиентСервер.СуффиксВИмениПоляСтатусУказанияСерий(ИмяПоляСтатус);
			Если МетаданныеДокумента.ТабличныеЧасти[ПараметрыУказанияСерий.ИмяТЧТовары].Реквизиты.Найти("СерияНоменклатуры" + Суффикс) <> Неопределено Тогда
				Суффиксы.Добавить(Суффикс);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если МассивНепроверяемыхРеквизитов <> Неопределено Тогда
		Для Каждого Суффикс Из Суффиксы Цикл
			МассивНепроверяемыхРеквизитов.Добавить(ПараметрыУказанияСерий.ИмяТЧТовары  +".СерияНоменклатуры" + Суффикс);
		КонецЦикла;
		МассивНепроверяемыхРеквизитов.Добавить("СерияНоменклатуры");
	КонецЕсли;
	
	Если Не ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры Тогда
		Возврат;
	КонецЕсли;
	
	КлючДанных = ИнтеграцияЕГАИСПереопределяемый.КлючДанныхДляСообщенияПользователю(ДокументОбъект);
	
	Если ПараметрыУказанияСерий.ТоварВШапке Тогда
		
		Если НоменклатураКлиентСервер.СтатусыСерийСерияНеУказана().Найти(ДокументОбъект.СтатусУказанияСерий) <> Неопределено
			И ДокументОбъект.СтатусУказанияСерий <> 13 Тогда
			
			ТекстСообщения = НСтр("ru = 'Количество товара ""%Товар%"" не соответствует указанному для него количеству серий. Исправьте серии.'");
				
			ТекстСообщения = СтрЗаменить(ТекстСообщения,
				"%Товар%",НоменклатураКлиентСервер.ПредставлениеНоменклатуры(ДокументОбъект.Номенклатура,ДокументОбъект.Характеристика));
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,
				КлючДанных,
				"Номенклатура",
				ПараметрыПроверки.ПутьКДаннымТаблицыФормы,
				Отказ);
			
		ИначеЕсли ДокументОбъект.СтатусУказанияСерий = 13 Тогда
			ТекстСообщения = НСтр("ru = 'Поле ""Серия"" не заполнено'");
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,
				КлючДанных,
				ПараметрыПроверки.ИмяКолонкиСерияТаблицыФормы,
				ПараметрыПроверки.ПутьКДаннымТаблицыФормы,
				Отказ);
				
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	Если ПараметрыУказанияСерий.ИмяТЧТовары = ПараметрыУказанияСерий.ИмяТЧСерии Тогда
		
		Если ПараметрыУказанияСерий.ОсобеннаяПроверкаСтатусовУказанияСерий Тогда
	
			МодульМенеджера = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПараметрыУказанияСерий.ПолноеИмяОбъекта);
			ТекстЗапроса =	МодульМенеджера.ТекстЗапросаПроверкиЗаполненияСерий(ПараметрыУказанияСерий);
			
		Иначе
			
			НоменклатураСервер.ПроверитьКоличествоПоСериям(ДокументОбъект, ПараметрыУказанияСерий, Отказ, ПараметрыПроверки.ВыдаватьСообщения);
			
			ТекстЗапроса = 
			"ВЫБРАТЬ
			|	ТаблицаСерий.НомерСтроки КАК НомерСтроки,
			|	ТаблицаСерий.СерияНоменклатуры КАК Серия,
			|	ТаблицаСерий.Номенклатура КАК Номенклатура,
			|	ТаблицаСерий.ХарактеристикаНоменклатуры КАК Характеристика,
			|	ТаблицаСерий.ПоляСвязи КАК ПоляСвязи,
			|	ТаблицаСерий.ИмяПоляКоличество КАК КоличествоУпаковок
			|ПОМЕСТИТЬ ТаблицаСерийДляЗапроса
			|ИЗ
			|	&ТаблицаСерий КАК ТаблицаСерий
			|ГДЕ
			|	ТаблицаСерий.Номенклатура.ВедетсяУчетПоСериям
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	МИНИМУМ(ТаблицаСерий.НомерСтроки) КАК НомерСтроки,
			|	ТаблицаСерий.Номенклатура КАК Номенклатура,
			|	СУММА(ТаблицаСерий.КоличествоУпаковок) КАК КоличествоУпаковок
			|ПОМЕСТИТЬ ТаблицаСерий
			|ИЗ
			|	ТаблицаСерийДляЗапроса КАК ТаблицаСерий
			|
			|СГРУППИРОВАТЬ ПО
			|	ТаблицаСерий.Серия,
			|	ТаблицаСерий.Номенклатура,
			|	ТаблицаСерий.ПоляСвязи,
			|	ТаблицаСерий.Характеристика
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ПРЕДСТАВЛЕНИЕ(Т.Номенклатура) КАК ТоварПредставление,
			|	Т.Серия = ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка) КАК СерияНеЗаполнена,
			|	ЛОЖЬ КАК ОшибкаКоличества,
			|	Т.НомерСтроки КАК НомерСтроки
			|ИЗ
			|	ТаблицаСерийДляЗапроса КАК Т
			|ГДЕ
			|	Т.Серия = ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
			|
			|УПОРЯДОЧИТЬ ПО
			|	Т.НомерСтроки";
			
			ПоляСвязиВЫБРАТЬ = "";
			ПоляСвязиСГРУППИРОВАТЬПО = "";
			Для Каждого ПолеСвязи Из ПараметрыУказанияСерий.ПоляСвязи Цикл
				ПоляСвязиВЫБРАТЬ = ПоляСвязиВЫБРАТЬ + "
				|	ТаблицаСерий." + ПолеСвязи + " КАК " + ПолеСвязи + ",";
				
				ПоляСвязиСГРУППИРОВАТЬПО = ПоляСвязиСГРУППИРОВАТЬПО + "
				|	ТаблицаСерий." + ПолеСвязи + ",";
			КонецЦикла;
			
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаСерий.ПоляСвязи КАК ПоляСвязи,", ПоляСвязиВЫБРАТЬ);
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаСерий.ПоляСвязи,", ПоляСвязиСГРУППИРОВАТЬПО);
		
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИмяПоляКоличество", ПараметрыУказанияСерий.ИмяПоляКоличество);
		
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапроса;
		
		Если ПараметрыУказанияСерий.ОтборПроверяемыхСтрок <> Неопределено Тогда
			Запрос.УстановитьПараметр("ТаблицаСерий",
			ДокументОбъект[ПараметрыУказанияСерий.ИмяТЧТовары].Выгрузить(ПараметрыУказанияСерий.ОтборПроверяемыхСтрок));
		Иначе
			Запрос.УстановитьПараметр("ТаблицаСерий",
			ДокументОбъект[ПараметрыУказанияСерий.ИмяТЧТовары].Выгрузить());
		КонецЕсли;
		
		Если ПараметрыПроверки.ВыдаватьСообщения Тогда
			Выборка = Запрос.Выполнить().Выбрать();
			
			ПредставлениеТЧ = МетаданныеДокумента.ТабличныеЧасти[ПараметрыУказанияСерий.ИмяТЧТовары].Синоним;
			
			Пока Выборка.Следующий() Цикл
				
				Если Выборка.СерияНеЗаполнена Тогда
					ТекстСообщения = НСтр("ru = 'Не заполнена колонка ""%ИмяРеквизитаСерия%"" в строке %НомерСтроки% списка ""%ПредставлениеТЧ%""'");
					
					ИмяРеквизитаСерия = МетаданныеДокумента.ТабличныеЧасти[ПараметрыУказанияСерий.ИмяТЧТовары].Реквизиты["СерияНоменклатуры"].Синоним;
					
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИмяРеквизитаСерия%", ИмяРеквизитаСерия);
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерСтроки%", Строка(Выборка.НомерСтроки));
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ПредставлениеТЧ%", ПредставлениеТЧ);
					
					Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ПараметрыУказанияСерий.ИмяТЧТовары, Выборка.НомерСтроки, ПараметрыПроверки.ИмяКолонкиСерияТаблицыФормы);
					
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,КлючДанных,Поле,ПараметрыПроверки.ПутьКДаннымТаблицыФормы,Отказ);
				КонецЕсли;
				
				Если Выборка.ОшибкаКоличества Тогда
					// Только для случая ПараметрыУказанияСерий.ОсобеннаяПроверкаСтатусовУказанияСерий, 
					ТекстСообщения = НСтр("ru = 'Политика учета серий товара ""%ТоварПредставление%"" предусматривает, что количество по любой серии этого товара всегда будет равно 1""'");
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерСтроки%", Строка(Выборка.НомерСтроки));
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТоварПредставление%", Выборка.ТоварПредставление);
					
					// Сделано неуниверсально, т.к. во всех документах, где справочные серии указываются только в той же ТЧ, что и
					// товары, есть поле КоличествоУпаковок.
					Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ПараметрыУказанияСерий.ИмяТЧТовары, Выборка.НомерСтроки, "КоличествоУпаковок");
					
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,КлючДанных,Поле,ПараметрыПроверки.ПутьКДаннымТаблицыФормы,Отказ);
				КонецЕсли;
				
			КонецЦикла;
		Иначе
			Если Не Запрос.Выполнить().Пустой() Тогда
				Отказ = Истина;	
			КонецЕсли;
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	ИнтеграцияЕГАИСПереопределяемый.ПроверитьЗаполнениеКоличества(ЭтотОбъект, ПроверяемыеРеквизиты, Отказ);
	
	ИспользуетсяРегистрацияРозничныхПродажВЕГАИС = ИнтеграцияЕГАИСВызовСервера.ИспользуетсяРегистрацияРозничныхПродажВЕГАИС(
		Организация, Склад, Дата);
	Если ИспользуетсяРегистрацияРозничныхПродажВЕГАИС Тогда
		РозничныеПродажи.ПроверитьЗаполнениеАкцизныхМарокЧека(ЭтотОбъект, Отказ);
	КонецЕсли;
	
	ПроверитьЗаполнениеХарактеристик(ЭтотОбъект,МассивНепроверяемыхРеквизитов,Отказ);
	ПроверитьЗаполнениеСерий(ЭтотОбъект,
		НоменклатураСервер.ПараметрыУказанияСерий(ЭтотОбъект, Документы.ЧекККМКоррекции),
		Отказ,
		МассивНепроверяемыхРеквизитов);
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты,МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры

// Конец области "Обработчики событий"

// Область "Программный интерфейс"

// Область "Запись в регистры"

// Процедура формирования движений по регистру "Движения серий товаров".
//
// Параметры:
//	ДополнительныеСвойства - Структура - дополнительные свойства для записи движений 
//	Движения - КоллекцияДвижений - движения по которым двигается документ
//	Отказ - Булево - признак отказа от проведения документа.
//
Процедура ОтразитьДвиженияСерийТоваров(ДополнительныеСвойства, Движения, Отказ) Экспорт
	Таблица= ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаДвиженияСерийТоваров;
	
	Если Отказ ИЛИ Таблица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Движения.ДвиженияСерийТоваров.Записывать = Истина;
	Движения.ДвиженияСерийТоваров.Загрузить(Таблица);
КонецПроцедуры

// Конец области "Запись в регистры"

// Конец области "Программный интерфейс"

// Область "Служебные процедуры и функции

// Область "Служебный программный интерфейс"

// Область "Процедуры записи движений в регистр"

Процедура ОтразитьТоварыНаСкладах(ДополнительныеСвойства, Движения, Отказ) Экспорт

	Таблица= ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаТоварыНаСкладах;
	
	Если Отказ ИЛИ Таблица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Движения.ТоварыНаСкладах.Записывать = Истина;
	Движения.ТоварыНаСкладах.Загрузить(Таблица);
	
КонецПроцедуры

Процедура ОтразитьСвободныеОстатки(ДополнительныеСвойства, Движения, Отказ) Экспорт

	Таблица = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаСвободныеОстатки;
	
	Если Отказ ИЛИ Таблица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Движения.СвободныеОстатки.Записывать = Истина;
	Движения.СвободныеОстатки.Загрузить(Таблица);

КонецПроцедуры

// Конец области "Процедуры записи движений в регистр"

// Конец области "Служебный программный интерфейс"

// Область "Инициализация и заполнение"

Процедура ИнициализироватьДокумент(ДанныеЗаполнения = Неопределено)
	
	ОрганизацияЕГАИС = РозничныеПродажи.ПолучитьОрганизациюЕГАИС(Склад, Организация);
	
КонецПроцедуры

Функция ИспользуемыеСистемыНалогообложения(ПорядокНалогообложения) Экспорт
	
	СистемыНалогообложения = Новый Соответствие;
	
	УП = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(Дата, Организация);
	Если УП = Неопределено Тогда
		ЗначениеПоУмолчанию = "НЕ ОПРЕДЕЛЕНО";
	ИначеЕсли УП.СистемаНалогообложения = ПредопределенноеЗначение("Перечисление.СистемыНалогообложения.Общая") Тогда
		ЗначениеПоУмолчанию = "ОБЩАЯ";
	ИначеЕсли УП.СистемаНалогообложения = ПредопределенноеЗначение("Перечисление.СистемыНалогообложения.Упрощенная") Тогда
		ЗначениеПоУмолчанию = "УПРОЩЕННАЯ";
	Иначе
		ЗначениеПоУмолчанию = "НЕ ОПРЕДЕЛЕНО";
	КонецЕсли;
	ПорядокНалогообложения = ЗначениеПоУмолчанию;
	
	Для Каждого СтрокаТЧ Из Товары Цикл
		СтруктураСчетовУчета = СчетаУчетаВДокументах.ПолучитьСчетаУчетаНоменклатурыИзНастроек(Организация, СтрокаТЧ.Номенклатура, Склад, Дата);
		Если НалоговыйУчетУСН.ОтноситсяКДеятельностиЕНВД(СтруктураСчетовУчета.СчетДоходовБУРозницы) Тогда
			Значение = "ЕНВД";
		Иначе
			Значение = ЗначениеПоУмолчанию;
		КонецЕсли;
		
		Если СистемыНалогообложения.Получить(Значение) <> Неопределено Тогда
			СистемыНалогообложения[Значение].Количество = СистемыНалогообложения[Значение].Количество + 1;
			СистемыНалогообложения[Значение].НомераСтрокДокумента = СистемыНалогообложения[Значение].НомераСтрокДокумента
				+ ", " + Формат(СтрокаТЧ.НомерСтроки,"ЧГ=0")
		Иначе
			СтруктураСН = Новый Структура("Количество, НомераСтрокДокумента", 1, Формат(СтрокаТЧ.НомерСтроки,"ЧГ=0"));
			СистемыНалогообложения.Вставить(Значение, СтруктураСН);
		КонецЕсли;
		ПорядокНалогообложения = Значение;
	КонецЦикла;
	
	Возврат СистемыНалогообложения;
	
КонецФункции

Процедура ЗаполнитьДокументПоЧекуККМ(ДокументОснование)
	
	// Заполним данные шапки документа.
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ЧекККМ.Ссылка КАК ЧекККМ,
	|	ЧекККМ.Дата КАК ДатаЧекаККМ,
	|	ЧекККМ.Организация КАК Организация,
	|	ЧекККМ.КассаККМ КАК КассаККМ,
	|	ЧекККМ.Склад КАК Склад,
	|	ЧекККМ.ЧекПробитНаККМ КАК Статус,
	|	ЧекККМ.Проведен КАК Проведен
	|ИЗ
	|	Документ.ЧекККМ КАК ЧекККМ
	|ГДЕ
	|	ЧекККМ.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.НоменклатураЕГАИС КАК НоменклатураЕГАИС,
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Номенклатура.ВидНоменклатуры.ТипНоменклатуры КАК ТипНоменклатуры,
	|	Товары.ХарактеристикаНоменклатуры КАК Характеристика,
	|	Товары.СерияНоменклатуры КАК Серия,
	|	Товары.Номенклатура.ВестиУчетПоСериям КАК СтатусУказанияСерий,
	|	Товары.ЕдиницаИзмерения КАК Упаковка,
	|	Товары.КоличествоУпаковок КАК КоличествоУпаковок,
	|	Товары.Количество КАК Количество,
	|	Товары.Цена КАК Цена,
	|	Товары.Сумма КАК Сумма,
	|	Товары.Номенклатура.СтавкаНДС КАК СтавкаНДС,
	|	Товары.Коэффициент
	|ПОМЕСТИТЬ врТовары
	|ИЗ
	|	Документ.ЧекККМ.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.НоменклатураЕГАИС КАК НоменклатураЕГАИС,
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Номенклатура.ВидНоменклатуры.ТипНоменклатуры КАК ТипНоменклатуры,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Серия КАК Серия,
	|	Товары.СтатусУказанияСерий КАК СтатусУказанияСерий,
	|	Товары.Упаковка КАК Упаковка,
	|	Товары.Упаковка КАК ЕдиницаИзмерения,
	|	Товары.Коэффициент КАК Коэффициент,
	|	Товары.СтавкаНДС КАК СтавкаНДС,
	|	Товары.Цена КАК Цена,
	|	Товары.КоличествоУпаковок КАК КоличествоУпаковок,
	|	Товары.Количество КАК Количество,
	|	Товары.Сумма КАК Сумма
	|ИЗ
	|	врТовары КАК Товары
	|ГДЕ
	|	Товары.Количество > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОплатаПлатежнымиКартами.ВидОплаты КАК ВидОплаты,
	|	ОплатаПлатежнымиКартами.Сумма КАК Сумма
	|ИЗ
	|	Документ.ЧекККМ.Оплата КАК ОплатаПлатежнымиКартами
	|ГДЕ
	|	ОплатаПлатежнымиКартами.Ссылка = &Ссылка";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	Выборка = РезультатЗапроса[0].Выбрать();
	Выборка.Следующий();
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Выборка, ,"Проведен");
	ДатаСовершенияКорректируемогоРасчета = Выборка.ДатаЧекаККМ;
	
	Если Не Выборка.Проведен Тогда
		ТекстОшибки = НСтр("ru='Чек ККМ не проведен. Ввод на основании невозможен.'");
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	Если Не Выборка.Статус Тогда
		ТекстОшибки = НСтр("ru='Чек ККМ не пробит. Ввод на основании невозможен.'");
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	Товары.Загрузить(РезультатЗапроса[2].Выгрузить());
	ПорядокНалогообложения = Неопределено;
	ИспользуемыеСН = ИспользуемыеСистемыНалогообложения(ПорядокНалогообложения);

	
	Для Каждого СтрокаТовара Из Товары Цикл
		СтрокаТовара.КоличествоУпаковок = СтрокаТовара.Количество;
		
		Если ЗначениеЗаполнено(СтрокаТовара.СтавкаНДС) Тогда
			СтавкаНДС = МенеджерОборудованияКлиентСервер.ПолучитьСтавкуНДСДляФискализацииЧека(СтрокаТовара.СтавкаНДС, ПорядокНалогообложения);
			СтавкаНДС = ?(СтавкаНДС = "", 0, СтавкаНДС);
			СтрокаТовара.СуммаНДС = Окр(СтрокаТовара.Сумма/(100+СтавкаНДС)*СтавкаНДС, 2);
		КонецЕсли;
		
	КонецЦикла;
	
	Оплата.Загрузить(РезультатЗапроса[3].Выгрузить());
	ПолученоНаличными = 0;
	
	Для Каждого СтрокаОплаты Из Оплата Цикл
		
		Если СтрокаОплаты.ВидОплаты.ТипОплаты = Перечисления.ТипыОплатЧекаККМ.Наличные Тогда
			ПолученоНаличными = ПолученоНаличными + СтрокаОплаты.Сумма;
		КонецЕсли;
		
	КонецЦикла;
	
	ПробитЧек = Ложь;
	СуммаДокумента = Ценообразование.ПолучитьСуммуДокументаБезСкидки(Товары);
	
КонецПроцедуры

// Конец области "Инициализация и заполнение"

// Область "Прочее"

Функция ЕстьКоррекцияПоЧекуККМ(ЧекККМ)
	
	// По документу ЧекККМ нет ранее созданного документа ЧекККМКоррекция
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЧекККМКоррекции.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ЧекККМКоррекции КАК ЧекККМКоррекции
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ФискальныеОперации КАК ФискальныеОперации
	|		ПО ЧекККМКоррекции.ЧекККМ = ФискальныеОперации.ДокументОснование
	|			И (ФискальныеОперации.НомерЧекаККМ <> &ПустаяСтрока)
	|ГДЕ
	|	ЧекККМКоррекции.Проведен
	|	И ЧекККМКоррекции.ЧекККМ = &ЧекККМ";
	Запрос.УстановитьПараметр("ЧекККМ", ЧекККМ);
	Запрос.УстановитьПараметр("ПустаяСтрока", "");
	
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

// Конец области "Прочее"

#КонецЕсли

// Конец области "Служебные процедуры и функции

