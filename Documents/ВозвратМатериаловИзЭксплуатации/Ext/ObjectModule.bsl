Перем мУдалятьДвижения;

// Строки, хранят реквизиты имеющие смысл только для бух. учета и упр. соответственно
// в случае если документ не отражается в каком-то виде учета, делаются невидимыми
Перем мСтрокаРеквизитыБухУчета Экспорт; // (Регл)
Перем мСтрокаРеквизитыУпрУчета Экспорт; // (Упр)
Перем мСтрокаРеквизитыНалУчета Экспорт; // (Регл)

Перем мВалютаРегламентированногоУчета Экспорт;
Перем мВалютаУправленческогоУчета     Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда

// Функция формирования печатной формы документа
//
Функция ПечатьВозвратМатериалов(ТипУчета)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", Ссылка);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Ссылка,
	|	Организация,
	|	Организация.Представление КАК ПечОрганизация,
	|	Склад                     КАК Склад,
	|	Склад.Представление       КАК ПечСклад,
	|	"+?(ТипУчета = "Упр", "Подразделение", "ПодразделениеОрганизации")+" КАК Подразделение,
	|	"+?(ТипУчета = "Упр", "Подразделение.Представление", "ПодразделениеОрганизации.Представление")+" КАК ПечПодразделение
	|ИЗ
	|	Документ.ВозвратМатериаловИзЭксплуатации КАК ВозвратМатериаловИзЭксплуатации
	|ГДЕ
	|	ВозвратМатериаловИзЭксплуатации.Ссылка = &ТекущийДокумент";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Номенклатура								КАК Товар,
	|	ВЫРАЗИТЬ(ВложенныйЗапрос.Номенклатура.НаименованиеПолное 	КАК СТРОКА(1000)) КАК ТоварНаименование,
	|	ВложенныйЗапрос.Номенклатура.Код 							КАК Код,
	|	ВложенныйЗапрос.Номенклатура.Артикул						КАК Артикул,
	|	ВложенныйЗапрос.ЕдиницаИзмерения.Представление 				КАК ПечЕдИзм,
	|	ВложенныйЗапрос.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код КАК ЕдиницаИзмеренияКод,
	|	ВложенныйЗапрос.Характеристика,
	|	ВложенныйЗапрос.Серия,
	|	ВложенныйЗапрос.ДокументПередачи,
	|	ВложенныйЗапрос.НазначениеИспользования,
	|	ВложенныйЗапрос.ФизЛицо					КАК Сотрудник,
	|	ВложенныйЗапрос.ФизЛицо.Представление 	КАК ПечФИО,
	|	ВложенныйЗапрос.ТипСтоимости,
	|	МАКСИМУМ(ВложенныйЗапрос.НомерСтроки) КАК НомерСтроки,
	|	СУММА(ВложенныйЗапрос.Количество)		КАК Количество,
	|	СУММА(ВложенныйЗапрос.Сумма)			КАК Сумма,
	|	СУММА(	ВЫБОР КОГДА ВложенныйЗапрос.Количество = 0 ТОГДА
	|				0
	|			ИНАЧЕ
	|				ВЫРАЗИТЬ(ВложенныйЗапрос.Сумма / ВложенныйЗапрос.Количество КАК Число(15,2))
	|			КОНЕЦ) КАК Цена
	|ИЗ (
	|	ВЫБРАТЬ
	|		ВозвратМатериаловИзЭксплуатации.Номенклатура				КАК Номенклатура,
	|		ВозвратМатериаловИзЭксплуатации.ЕдиницаИзмерения			КАК ЕдиницаИзмерения,
	|		ВозвратМатериаловИзЭксплуатации.ХарактеристикаНоменклатуры	КАК Характеристика,
	|		ВозвратМатериаловИзЭксплуатации.СерияНоменклатуры			КАК Серия,
	|		ВозвратМатериаловИзЭксплуатации.ДокументПередачи			КАК ДокументПередачи,
	|		ВозвратМатериаловИзЭксплуатации.НазначениеИспользования 	КАК НазначениеИспользования,
	|		ВозвратМатериаловИзЭксплуатации.ФизЛицо						КАК ФизЛицо,
	|		ВозвратМатериаловИзЭксплуатации.ТипСтоимости				КАК ТипСтоимости,
	|		МИНИМУМ(ВозвратМатериаловИзЭксплуатации.НомерСтроки)		КАК НомерСтроки,
	|		СУММА(ВозвратМатериаловИзЭксплуатации.Количество)			КАК Количество,
	|		СУММА(	ВЫБОР КОГДА &ТипУчета = ""Упр"" ТОГДА
	|					Сумма
	|				ИНАЧЕ
	|					СуммаРегл
	|				КОНЕЦ) КАК Сумма
	|	ИЗ
	|		Документ.ВозвратМатериаловИзЭксплуатации.Материалы КАК ВозвратМатериаловИзЭксплуатации
	|	ГДЕ
	|		ВозвратМатериаловИзЭксплуатации.Ссылка = &ТекущийДокумент
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ВозвратМатериаловИзЭксплуатации.Номенклатура,
	|		ВозвратМатериаловИзЭксплуатации.ЕдиницаИзмерения,
	|		ВозвратМатериаловИзЭксплуатации.ХарактеристикаНоменклатуры,
	|		ВозвратМатериаловИзЭксплуатации.СерияНоменклатуры,
	|		ВозвратМатериаловИзЭксплуатации.ДокументПередачи,
	|		ВозвратМатериаловИзЭксплуатации.НазначениеИспользования,
	|		ВозвратМатериаловИзЭксплуатации.ФизЛицо,
	|		ВозвратМатериаловИзЭксплуатации.ТипСтоимости
	|	) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Номенклатура,
	|	ВложенныйЗапрос.ЕдиницаИзмерения,
	|	ВложенныйЗапрос.Характеристика,
	|	ВложенныйЗапрос.Серия,
	|	ВложенныйЗапрос.ДокументПередачи,
	|	ВложенныйЗапрос.НазначениеИспользования,
	|	ВложенныйЗапрос.ФизЛицо,
	|	ВложенныйЗапрос.ТипСтоимости
	|УПОРЯДОЧИТЬ ПО НомерСтроки";
			
	ЗапросПоТоварам = Новый Запрос;
	ЗапросПоТоварам.Текст = ТекстЗапроса;
	
	ЗапросПоТоварам.УстановитьПараметр("ТекущийДокумент", Ссылка);
	ЗапросПоТоварам.УстановитьПараметр("ТипУчета", ТипУчета);
	
	РезультатЗапроса = ЗапросПоТоварам.Выполнить();
	
	ТабДок = Новый ТабличныйДокумент;
	ТабДок.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ВозвратМатериалов_ВозвратМатериалов";
	
	Макет  = ПолучитьМакет("ВозвратМатериалов");
	
	// Параметры вывода
	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	КолАртикул = ?( ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул, "Артикул",
				 ?( ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код,     "Код", ""));
	ФлагВыводКода = НЕ ПустаяСтрока(КолАртикул);
	
	// Вывод заголовка
	Область = Макет.ПолучитьОбласть("Заголовок");
	Область.Параметры.Заголовок = ОбщегоНазначения.СформироватьЗаголовокДокумента( ЭтотОбъект);
	Область.Параметры.Заполнить(Шапка);
		
	ТабДок.Вывести(Область);
	
	// Вывод шапки табличной части
	Если ФлагВыводКода Тогда
		Область = Макет.ПолучитьОбласть("ТабШапка");
		Область.Параметры.ПечАртикул = КолАртикул;
	Иначе
		Область = Макет.ПолучитьОбласть("ТабШапкаБезАртикула");
	КонецЕсли;
	ТабДок.Вывести( Область);
	
	СоответствиеТабНомеров = СпецодеждаИСпецоснастка.ПолучитьТабНомера( Организация, Дата, Материалы.ВыгрузитьКолонку("ФизЛицо"));
	
	// Вывод табличной части
	Если ФлагВыводКода Тогда
		Область = Макет.ПолучитьОбласть("ТабСтрока");
	Иначе
		Область = Макет.ПолучитьОбласть("ТабСтрокаБезАртикула");
	КонецЕсли;
	
	ТабЧасть = РезультатЗапроса.Выбрать();
	СуммаИтого = 0;
	ПечНомер = 0;
	
	Пока ТабЧасть.Следующий() Цикл
		
		ПечНомер = ПечНомер + 1;
		Область.Параметры.ПечНомер = ПечНомер;
		
		Если ФлагВыводКода Тогда
			Область.Параметры.ПечАртикул = ТабЧасть[КолАртикул];
		КонецЕсли;
		
		Область.Параметры.Заполнить(ТабЧасть);
		Область.Параметры.ПечМатериал = СокрЛП(ТабЧасть.Товар) + ФормированиеПечатныхФорм.ПредставлениеСерий(ТабЧасть);
		Область.Параметры.Материал    = ТабЧасть.Товар;
		Область.Параметры.ПечКол      = ТабЧасть.Количество;
		
		ТабНомер = СоответствиеТабНомеров[ ТабЧасть.Сотрудник];
		Область.Параметры.ПечТабНомер = ТабНомер;
		
		Если ТабЧасть.ТипСтоимости = Перечисления.ВидыНормативнойСтоимостиПроизводства.Фиксированная Тогда
			Область.Параметры.ПечЦена  = ТабЧасть.Цена;
			Область.Параметры.ПечСумма = ТабЧасть.Сумма;
			СуммаИтого = СуммаИтого + ТабЧасть.Сумма;
		Иначе
			Область.Параметры.ПечЦена  = "";
			Область.Параметры.ПечСумма = "";
		КонецЕсли;
		
		ТабДок.Вывести(Область);
		
	КонецЦикла;
	
	// Вывод итогов документа
	Область = Макет.ПолучитьОбласть("Подвал");
	Если СуммаИтого = 0 Тогда
		Область.Параметры.СтрокаИтог = "Всего наименований: " + ТабЧасть.Количество();
		ТабДок.Вывести( Область);
	Иначе
		Область.Параметры.СтрокаИтог = "Всего наименований: " + ТабЧасть.Количество() +
			", на сумму " + ОбщегоНазначения.ФорматСумм( СуммаИтого, ?( ТипУчета = "Упр", мВалютаУправленческогоУчета, мВалютаРегламентированногоУчета));
		ТабДок.Вывести( Область);
		Область = Макет.ПолучитьОбласть("СтрокаСуммаИтого");
		Область.Параметры.СуммаПрописью = ОбщегоНазначения.СформироватьСуммуПрописью( СуммаИтого, ?( ТипУчета = "Упр", мВалютаУправленческогоУчета, мВалютаРегламентированногоУчета));
		ТабДок.Вывести( Область);
	КонецЕсли;
	
	Область = Макет.ПолучитьОбласть("НизДокумента");
	ТабДок.Вывести( Область);
	
	Возврат ТабДок;
	
КонецФункции // ПечатьВозвратМатериалов()
	
// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	Если ИмяМакета = "ВозвратМатериалов" ИЛИ ИмяМакета = "ВозвратМатериаловУпр" ИЛИ ИмяМакета = "ВозвратМатериаловБух" Тогда
		
		ТипУчета = ?( ИмяМакета = "ВозвратМатериаловУпр", "Упр",
				   ?( ИмяМакета = "ВозвратМатериаловБух", "Бух",
				   ?( ОтражатьВУправленческомУчете, "Упр", "Бух")));
		
		ТабДокумент = ПечатьВозвратМатериалов(ТипУчета);
		
	ИначеЕсли ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда

		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
		
		Если ТабДокумент = Неопределено Тогда
			Возврат
		КонецЕсли; 
		
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект), Ссылка);

КонецПроцедуры // Печать

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	СтруктПечФорм = Новый Структура;
	Если ОтражатьВУправленческомУчете И ОтражатьВБухгалтерскомУчете Тогда
		СтруктПечФорм.Вставить( "ВозвратМатериаловУпр", "Возврат материалов из эксплуатации (упр.)");
		СтруктПечФорм.Вставить( "ВозвратМатериаловБух", "Возврат материалов из эксплуатации (регл.)");
	Иначе
		СтруктПечФорм.Вставить( "ВозвратМатериалов", "Возврат материалов из эксплуатации");
	КонецЕсли;
	
	Возврат СтруктПечФорм;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

#КонецЕсли

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для определенного вида учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета() Экспорт
	
	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаУпр();
	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаРегл();
	
КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета()

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для упр. учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаУпр()
	
	мСтрокаРеквизитыУпрУчета = "Подразделение, НадписьПодразделение";
	
КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаУпр()

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для регл. учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаРегл()
	
	мСтрокаРеквизитыБухУчета = "ПодразделениеОрганизации, НадписьПодразделениеОрганизации";
	
	мСтрокаРеквизитыНалУчета = "";
	
КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаРегл()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение, не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	ОбязательныеРеквизитыШапки = "Организация, Склад";
	ДополнитьРеквизитыШапкиУпр(ОбязательныеРеквизитыШапки);
	ДополнитьРеквизитыШапкиРегл(ОбязательныеРеквизитыШапки);
	
	УправлениеЗатратами.НепроверятьРеквизитыПоТипуУчета(ЭтотОбъект, ОбязательныеРеквизитыШапки, СтруктураШапкиДокумента, мСтрокаРеквизитыУпрУчета, мСтрокаРеквизитыБухУчета, мСтрокаРеквизитыНалУчета);
	
	СтруктураОбязательныхПолей = 
	Новый Структура(ОбязательныеРеквизитыШапки);

	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);

	УправлениеЗапасами.ПроверитьЧтоСкладВШапкеОптовый(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// Проверим соответствие подразделения и организации.
	УправлениеЗатратами.ПроверитьПодразделениеОрганизации(ЭтотОбъект, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Процедура дополняет список реквизитов шапки упр. реквизитами
//
Процедура ДополнитьРеквизитыШапкиУпр(Реквизиты)
	Реквизиты = Реквизиты + ?(ПустаяСтрока(Реквизиты),"",", ") 
	          + "Подразделение";
КонецПроцедуры // ДополнитьРеквизитыШапкиУпр()

// Процедура дополняет список реквизитов шапки регл. реквизитами
//
Процедура ДополнитьРеквизитыШапкиРегл(Реквизиты)
	Реквизиты = Реквизиты + ?(ПустаяСтрока(Реквизиты),"",", ") 
	          + "ПодразделениеОрганизации";
КонецПроцедуры // ДополнитьРеквизитыШапкиРегл()

// Процедура дополняет список реквизитов шапки упр. реквизитами
//
// Процедура дополняет список реквизитов шапки регл. реквизитами
//
// Процедура заполняет счета учета по бухгалтерскому и налоговому учету.
//
Процедура ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТЧ, ИмяТабЧасти, ЗаполнятьБУ, ЗаполнятьНУ) Экспорт

	ЗаполнитьСчетаУчетаВТабЧасти(СтрокаТЧ, ИмяТабЧасти, ЗаполнятьБУ, ЗаполнятьНУ);
	
КонецПроцедуры // ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл()

// Заполняет счета БУ и НУ в табличной части документа
//
Процедура ЗаполнитьСчетаУчетаВТабЧасти(ТабличнаяЧасть, ИмяТабЧасти, ЗаполнятьБУ, ЗаполнятьНУ) Экспорт
	
	СчетаУчетаВДокументах.ЗаполнитьСчетаУчетаТабличнойЧасти(ИмяТабЧасти, ТабличнаяЧасть, ЭтотОбъект, ЗаполнятьБУ, ЗаполнятьНУ);
	
КонецПроцедуры // ЗаполнитьСчетаУчетаВТабЧасти()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Функция проверяет правильность заполнения документа
// Возврат - структура с данными шапки документа
//
Функция ПроверкаРеквизитов(Отказ) Экспорт
	
	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;
	
	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета();
	
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	// Документ должен принадлежать хотя бы к одному виду учета (управленческий, бухгалтерский, налоговый)
	ОбщегоНазначения.ПроверитьПринадлежностьКВидамУчета(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = УправлениеЗапасами.СформироватьДеревоПолейЗапросаПоШапке();
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Склад", "ВидСклада", "ВидСклада");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "НастройкаСпособовВеденияУправленческогоПартионногоУчета", "СпособВеденияПартионногоУчетаПоОрганизации", "СпособВеденияПартионногоУчетаПоОрганизации");
	
	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);

	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	РеквизитыТЧ = "Номенклатура, Количество, ЕдиницаИзмерения, ФизЛицо, НазначениеИспользования, ТипСтоимости, Качество";
	
	УправлениеЗатратами.НепроверятьРеквизитыПоТипуУчета(ЭтотОбъект, РеквизитыТЧ, СтруктураШапкиДокумента, мСтрокаРеквизитыУпрУчета, мСтрокаРеквизитыБухУчета, мСтрокаРеквизитыНалУчета, "Материалы");
	
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Материалы", Новый Структура(РеквизитыТЧ), Отказ, Заголовок);
	УправлениеЗапасами.ПроверитьЧтоНетНаборов(ЭтотОбъект, "Материалы", , Отказ, Заголовок);
	
	Возврат СтруктураШапкиДокумента;
	
КонецФункции // ПроверкаРеквизитов()

// По результату запроса по шапке документа формируем движения по регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  ТаблицаПоТаре             - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоМатериалам, Отказ, Заголовок)

	ТаблицаПоМатериаламРегл = ТаблицаПоМатериалам.Скопировать();				
					
	ДвиженияПоРегистрамУпр(РежимПроведения, СтруктураШапкиДокумента,  ТаблицаПоМатериалам, Отказ, Заголовок);
	ДвиженияПоРегистрамРегл(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоМатериаламРегл, Отказ, Заголовок);
	
	ДвиженияПоРегиструТоварыОрганизацийРегл(РежимПроведения, ТаблицаПоМатериалам, Отказ, Заголовок, СтруктураШапкиДокумента);
	
	ДвиженияПоРегиструСписанныеМатериалыИзЭксплуатации(СтруктураШапкиДокумента, ТаблицаПоМатериалам, Отказ, Заголовок);
	
	ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ТаблицаПоМатериалам, Отказ);
	
	ДвиженияПоРегистрамУСНРегл(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоМатериаламРегл, Отказ, Заголовок);

КонецПроцедуры // ДвиженияПоРегистрам()

// Формирование движений по регистрам по управленческому учету.
//
Процедура ДвиженияПоРегистрамУпр(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоМатериалам, Отказ, Заголовок)
	
	Если Не СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		Возврат;
	КонецЕсли;
	
	// МАТЕРИАЛЫ ПО РЕГИСТРУ ТоварыНаСкладах.
	НаборДвижений = Движения.ТоварыНаСкладах;

	// Получим таблицу значений, совпадающую со структурой набора записей регистра.
	ТаблицаДвиженийТоварыНаСкладах = НаборДвижений.Выгрузить();
	ТаблицаДвиженийТоварыНаСкладах.Очистить();
	ТаблицаДвижений = ТаблицаДвиженийТоварыНаСкладах.Скопировать();
	
	// Заполним таблицу движений.
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоМатериалам, ТаблицаДвижений);

	// Недостающие поля.
	ТаблицаДвижений.ЗаполнитьЗначения(Склад, "Склад");
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийТоварыНаСкладах.ВозвратМатериаловИзЭксплуатации, "КодОперации");

	НаборДвижений.мПериод            = Дата;
	НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

	Если Не Отказ Тогда
		Движения.ТоварыНаСкладах.ВыполнитьПриход();
	КонецЕсли;
	
	// МАТЕРИАЛЫ ПО РЕГИСТРУ ПартииТоваровНаСкладах.
	УправлениеЗапасамиПартионныйУчет.ВыполнитьПриходПоРегистрамПартий(
		?(ДополнительныеСвойства.Свойство("ТаблицаСтаройРегистрацииВПоследовательности"),ДополнительныеСвойства.ТаблицаСтаройРегистрацииВПоследовательности,Неопределено),
		СтруктураШапкиДокумента, 
		Отказ, 
		ТаблицаПоМатериалам, 
		Неопределено, 
		Неопределено, 
		СтруктураШапкиДокумента.ОтражатьВУправленческомУчете, 
		ЛОЖЬ, 
		ЛОЖЬ);
	
	// МАТЕРИАЛЫ ПО РЕГИСТРУ МатериалыВЭксплуатации.
	НаборДвижений = Движения.МатериалыВЭксплуатации;
	
	// Проверка остатков при оперативном проведении.
	НаборДвижений.КонтрольОстатков(ЭтотОбъект, "Материалы", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	ТаблицаДвижений.Очистить();
	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоМатериалам, ТаблицаДвижений);
	ТаблицаДвижений.ЗаполнитьЗначения(Подразделение,"Подразделение");
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийМатериалыВЭксплуатации.ВозвратИзЭксплуатации,"КодОперации");
	
	НаборДвижений.мПериод            = Дата;
	НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

	Если Не Отказ Тогда
		Движения.МатериалыВЭксплуатации.ВыполнитьРасход();
	КонецЕсли;
	
КонецПроцедуры // ДвиженияПоРегистрамУпр()

// Формирование движений по регистрам по управленческому учету.
//
Процедура ДвиженияПоРегистрамРегл(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоМатериалам, Отказ, Заголовок)
	
	Если Не СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаПоМатериалам.Колонки.Стоимость.Имя = "СтоимостьУпр";
	ТаблицаПоМатериалам.Колонки.СтоимостьРегл.Имя = "Стоимость";
	
	// МАТЕРИАЛЫ ПО РЕГИСТРУ ПартииТоваровНаСкладахБухгалтерскийУчет, ПартииТоваровНаСкладахНалоговыйУчет.
	УправлениеЗапасамиПартионныйУчет.ВыполнитьПриходПоРегистрамПартий(
		?(ДополнительныеСвойства.Свойство("ТаблицаСтаройРегистрацииВПоследовательности"),ДополнительныеСвойства.ТаблицаСтаройРегистрацииВПоследовательности,Неопределено),
		СтруктураШапкиДокумента, 
		Отказ, 
		ТаблицаПоМатериалам,
		Неопределено,
		Неопределено, 
		ЛОЖЬ, 
		СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете, 
		СтруктураШапкиДокумента.ОтражатьВНалоговомУчете ИЛИ СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН);
	
	// Формирование проводок.
	ПроводкиБУ = Движения.Хозрасчетный;
	ПроводкиНУ = Движения.Налоговый;
	
	УправлениеЗапасамиПартионныйУчет.СформироватьПроводкиПоПоступлениюТМЦ(СтруктураШапкиДокумента, Отказ, ТаблицаПоМатериалам, , , , , СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете, СтруктураШапкиДокумента.ОтражатьВНалоговомУчете);
	
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете
	   И Не СтруктураШапкиДокумента.ИспользоватьРасширеннуюАналитику
	   И НЕ СтруктураШапкиДокумента.ПогашатьСтоимостьВНУКакВБУ
	Тогда
		Для Каждого СтрокаТЧ Из ТаблицаПоМатериалам Цикл
				
			ФиксированнаяСтоимость = СтрокаТЧ.ТипСтоимости = Перечисления.ВидыНормативнойСтоимостиПроизводства.Фиксированная;
			Если ФиксированнаяСтоимость Тогда
				ПроводкаНУ = ПроводкиНУ.Добавить();
				ПроводкаНУ.Организация = СтруктураШапкиДокумента.Организация;
				ПроводкаНУ.Период = СтруктураШапкиДокумента.Дата;
				ПроводкаНУ.СчетДт = СтрокаТЧ.СчетДтНУ;
				БухгалтерскийУчет.УстановитьСубконто( ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "Номенклатура", СтрокаТЧ.Номенклатура);
				БухгалтерскийУчет.УстановитьСубконто( ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "Склады",       Склад);
				
				ПроводкаНУ.СчетКт = СтрокаТЧ.СчетПередачиНУ;
				БухгалтерскийУчет.УстановитьСубконто( ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, "Номенклатура", СтрокаТЧ.Номенклатура);
				
				ПроводкаНУ.Сумма = СтрокаТЧ.Стоимость;
				
				ПроводкаНУ.ВидУчетаДт = Перечисления.ВидыУчетаПоПБУ18.ВР;
				ПроводкаНУ.ВидУчетаКт = Перечисления.ВидыУчетаПоПБУ18.ВР;
				
				ПроводкаНУ.Содержание   = "Возврат материалов из эксплуатации";
				ПроводкаНУ.НомерЖурнала = "";
				
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ПроводкиБУ.Записать(ложь);
	ПроводкиНУ.Записать(ложь);
		
КонецПроцедуры // ДвиженияПоРегистрамУпр()

// Формирование движений по регистру ТоварыОрганизаций.
//
Процедура ДвиженияПоРегиструТоварыОрганизацийРегл(РежимПроведения, ТаблицаПоМатериалам, Отказ, Заголовок, СтруктураШапкиДокумента)
	
	Если НЕ СтруктураШапкиДокумента.ОтражатьВРегламентированномУчете Тогда
		Возврат;
	КонецЕсли;
	
	// МАТЕРИАЛЫ ПО РЕГИСТРУ ТоварыОрганизаций.
	НаборДвижений = Движения.ТоварыОрганизаций;
	
	// Получим таблицу значений, совпадающую со структурой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	// Заполним таблицу движений.
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоМатериалам, ТаблицаДвижений);
	
	// Недостающие поля.
	ТаблицаДвижений.ЗаполнитьЗначения(Организация, "Организация");
	ТаблицаДвижений.ЗаполнитьЗначения(Неопределено,"Комиссионер");
	
	Если Не СтруктураШапкиДокумента.ВестиУчетТоваровОрганизацийВРазрезеСкладов Тогда
		ТаблицаДвижений.ЗаполнитьЗначения(Неопределено, "Склад");
	Иначе
		ТаблицаДвижений.ЗаполнитьЗначения(Склад, "Склад");
	КонецЕсли;
	
	НаборДвижений.мПериод            = Дата;
	НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
	
	Если Не Отказ Тогда
		Движения.ТоварыОрганизаций.ВыполнитьПриход();
	КонецЕсли;
	
КонецПроцедуры // ДвиженияПоРегиструТоварыОрганизацийРегл()

Процедура ЗаполнитьКолонкиРегистраСписанныеМатериалыИзЭксплуатацииУпр(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоМатериалам)

	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.Подразделение, "Подразделение");
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.ОтражатьВУправленческомУчете, "ОтражатьВУправленческомУчете");
	
КонецПроцедуры // ЗаполнитьКолонкиРегистраСписанныеТоварыПоТоварамУпр()

Процедура ЗаполнитьКолонкиРегистраСписанныеМатериалыИзЭксплуатацииРегл(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоМатериалам)

	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете, "ОтражатьВБухгалтерскомУчете");
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.ОтражатьВНалоговомУчете,	   "ОтражатьВНалоговомУчете");
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация,                 "Организация");
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.ПодразделениеОрганизации,    "ПодразделениеОрганизации");
	
КонецПроцедуры // ЗаполнитьКолонкиРегистраСписанныеТоварыПоТоварамРегл()

// Формирование движений по регистру СписанныеМатериалыИзЭксплуатации.
//
Процедура ДвиженияПоРегиструСписанныеМатериалыИзЭксплуатации(СтруктураШапкиДокумента, ТаблицаПоМатериалам, Отказ, Заголовок)
	
	ТаблицаПоМатериаламВЭксплуатации = ТаблицаПоМатериалам.Скопировать();
	
	СтруктураПоиска = Новый Структура("ВестиПартионныйУчетПоСериям", Ложь);
	МассивСтрок = ТаблицаПоМатериаламВЭксплуатации.НайтиСтроки(СтруктураПоиска);
	Для Каждого СтрокаТаблицы Из МассивСтрок Цикл
		Если ЗначениеЗаполнено(СтрокаТаблицы.СерияНоменклатуры) Тогда
			СтрокаТаблицы.СерияНоменклатуры = Неопределено;
		КонецЕсли;
	КонецЦикла;
	
	// МАТЕРИАЛЫ ПО РЕГИСТРУ СписанныеМатериалыИзЭксплуатации.
	НаборДвижений = Движения.СписанныеМатериалыИзЭксплуатации;

	// Получим таблицу значений, совпадающую со структурой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	ТаблицаДвижений.Очистить();
	
	Если ОтражатьВБухгалтерскомУчете Тогда
		ТаблицаПоМатериаламВЭксплуатации.Колонки.Удалить(ТаблицаПоМатериаламВЭксплуатации.Колонки.СчетУчетаБУ);
		ТаблицаПоМатериаламВЭксплуатации.Колонки.Удалить(ТаблицаПоМатериаламВЭксплуатации.Колонки.СчетУчетаНУ);
		
		ТаблицаПоМатериаламВЭксплуатации.Колонки.СчетПередачиБУ.Имя = "СчетУчетаБУ";
		ТаблицаПоМатериаламВЭксплуатации.Колонки.СчетПередачиНУ.Имя = "СчетУчетаНУ";
	КонецЕсли;
	
	// Заполним таблицу движений.
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоМатериаламВЭксплуатации, ТаблицаДвижений);
	
	// Недостающие поля.
	Инд = 0;
	Для каждого Строка Из ТаблицаДвижений Цикл
		Инд = Инд+1;
		Строка.НомерСтрокиДокумента = Инд;
	КонецЦикла;
	
	ТаблицаДвижений.ЗаполнитьЗначения(Дата,   "Период");
	ТаблицаДвижений.ЗаполнитьЗначения(Ссылка, "Регистратор");
	ТаблицаДвижений.ЗаполнитьЗначения(Истина, "Активность");
	
	ТаблицаДвижений.ЗаполнитьЗначения(Склад, "Склад");

	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийПартииМатериаловВЭксплуатации.ВозвратИзЭксплуатации, "КодОперации");
    	
	ЗаполнитьКолонкиРегистраСписанныеМатериалыИзЭксплуатацииУпр(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоМатериаламВЭксплуатации);
	ЗаполнитьКолонкиРегистраСписанныеМатериалыИзЭксплуатацииРегл(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоМатериаламВЭксплуатации);
	
	НаборДвижений.мПериод          = Дата;
	НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;

	Если Не Отказ Тогда
		Движения.СписанныеМатериалыИзЭксплуатации.ВыполнитьДвижения();
	КонецЕсли;
	
КонецПроцедуры // ДвиженияПоРегиструСписанныеМатериалыИзЭксплуатации()

// Формирование движений по регистрам налогового учета УСН(регламентированный учет).
//
Процедура ДвиженияПоРегистрамУСНРегл(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоМатериалам, Отказ, Заголовок)
	
	Если Не СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН Тогда
		Возврат;
	КонецЕсли;
	
	Если ТаблицаПоМатериалам.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	//ПО РЕГИСТРУ РАСХОДОВ УСН
	НаборДвижений = Движения.РасходыПриУСН;
	
	// Получим таблицу значений, совпадающую со структурой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	ТаблицаДвижений.Очистить();
	
	СуммаСторно = 0;
	
	НалоговыйУчетУСН.ПоступлениеРасходовУСН(СтруктураШапкиДокумента, ТаблицаПоМатериалам, ТаблицаДвижений, 
	Перечисления.ВидыРасходовУСН.Номенклатура, Неопределено,
	Перечисления.СтатусыПартийУСН.Купленные, ,Истина, СуммаСторно);
	
	//Недостающие поля.
	ТаблицаДвижений.ЗаполнитьЗначения(Организация, "Организация");
	ТаблицаДвижений.ЗаполнитьЗначения(Дата, "Период");
	ТаблицаДвижений.ЗаполнитьЗначения(Ссылка, "Регистратор");
	ТаблицаДвижений.ЗаполнитьЗначения(Истина, "Активность");
	
	НаборДвижений.мПериод            = Дата;
	НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
	
	Если Не Отказ Тогда
		Движения.РасходыПриУСН.ВыполнитьПриход();
		НаборДвижений.Записать(Истина);
	КонецЕсли;
	
	//ПО РЕГИСТРУ КУДиР
	Если СуммаСторно <> 0 Тогда
		КУДиР = Движения.КнигаУчетаДоходовИРасходов;
		
		СтрокаКниги  = КУДиР.Добавить();
		
		СтрокаКниги.Организация     = СтруктураШапкиДокумента.Организация;
		СтрокаКниги.СтрокаДокумента = 0;
		СтрокаКниги.Период          = СтруктураШапкиДокумента.Дата;
		СтрокаКниги.Содержание      = "Материальные расходы уменьшены на сумму спецодежды и спецоснастки, возвращенной из эксплуатации.";
		СтрокаКниги.Графа7          = - СуммаСторно;
		СтрокаКниги.РеквизитыПервичногоДокумента = НалоговыйУчетУСН.РеквизитыПервичногоДокумента(Ссылка);
		
	КонецЕсли;
		
КонецПроцедуры

// Процедура вызывается из тела процедуры ДвиженияПоРегистрам
// Формирует движения по регистрам подсистемы учета НДС.
//
Процедура ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ТаблицаПоМатериалам, Отказ) Экспорт
	
	Если Не УчетНДС.ПроводитьДокументДляЦелейНДС(СтруктураШапкиДокумента) Тогда
		// Движения по этому документу делать не нужно
		Возврат;
	КонецЕсли;
	
	Если Не ТаблицаПоМатериалам.Количество() = 0 Тогда
		
		// Отражаем в регистре партионного учета для НДС
		ТаблицаДляНДСПартии = ТаблицаПоМатериалам.Скопировать();
		
		// Для целей НДС материалы приходуются по нулевой стоимости
		ТаблицаДляНДСПартии.ЗаполнитьЗначения(0, "Стоимость");

		УчетНДСФормированиеДвижений.СформироватьДвиженияПоступленияПоРегиструНДСПартииТоваров(СтруктураШапкиДокумента, ТаблицаДляНДСПартии, , Отказ);
		
	КонецЕсли;
	
КонецПроцедуры // ДвиженияРегистровПодсистемыНДС()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ПОДГОТОВКИ ТАБЛИЦ ЗНАЧЕНИЙ ДЛЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Материалы",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуМатериалов(РезультатЗапросаПоМатериалам, СтруктураШапкиДокумента)

	ТаблицаМатериалов = РезультатЗапросаПоМатериалам.Выгрузить();
	
	Для Каждого Строка Из ТаблицаМатериалов Цикл
		Если Строка.ТипСтоимости = Перечисления.ВидыНормативнойСтоимостиПроизводства.Рассчитывается Тогда
			Строка.Стоимость = 0;
			Строка.СтоимостьРегл = 0;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТаблицаМатериалов;

КонецФункции // ПодготовитьТаблицуМатериалов()

// Дополняет полями, нужными для регл. учета
Процедура ДополнитьСтруктуруПолейТабличнойЧастиМатериалыРегл(СтруктураПолей)
	
	Если Не ОтражатьВБухгалтерскомУчете Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПолей.Вставить("СчетДт"      					, "СчетУчетаБУ");
	СтруктураПолей.Вставить("СчетДтНУ"    					, "СчетУчетаНУ");
	
	СтруктураПолей.Вставить("СчетУчетаБУ"      				, "СчетУчетаБУ");
	СтруктураПолей.Вставить("СчетУчетаНУ"    				, "СчетУчетаНУ");

	СтруктураПолей.Вставить("СчетПередачиБУ"      			, "СчетПередачиБУ");
	СтруктураПолей.Вставить("СчетПередачиНУ"    			, "СчетПередачиНУ");
	
	СтруктураПолей.Вставить("ОтражениеВУСН"    				, "ОтражениеВУСН");
	
КонецПроцедуры // ДополнитьСтруктуруПолейТабличнойЧастиМатериалыРегл()

//////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура определяет параметры учетной политики
//
Процедура ПодготовитьПараметрыУчетнойПолитики(Отказ)

	Если ОтражатьВУправленческомУчете Тогда
		
		УчетнаяПолитикаУпр = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиУпр(Дата);
	    Если НЕ ЗначениеЗаполнено(УчетнаяПолитикаУпр) Тогда
			Отказ = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОтражатьВБухгалтерскомУчете Тогда
		
		УчетнаяПолитикаРегл = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(Дата, Организация);
	    Если НЕ ЗначениеЗаполнено(УчетнаяПолитикаРегл) Тогда
			Отказ = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ПодготовитьПараметрыУчетнойПолитики()

// Процедура формирует структуру шапки документа и дополнительных полей.
//
Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, Отказ = Ложь) Экспорт
	
	СтруктураШапкиДокумента = ПроверкаРеквизитов(Отказ);
	
	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = УправлениеЗапасами.СформироватьДеревоПолейЗапросаПоШапке();
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика",  "СписыватьПартииПриПроведенииДокументов",     "СписыватьПартииПриПроведенииДокументов");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика",  "ВестиПартионныйУчетПоСкладам",               "ВестиПартионныйУчетПоСкладам");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика",  "ВестиУчетТоваровОрганизацийВРазрезеСкладов", "ВестиУчетТоваровОрганизацийВРазрезеСкладов");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Склад",            "ВидСклада",                                  "ВидСклада");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Организация",      "ОтражатьВРегламентированномУчете",           "ОтражатьВРегламентированномУчете");

	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);
	
	ИспользоватьРасширеннуюАналитику = глЗначениеПеременной("ИспользоватьРасширеннуюАналитикуУчетаНоменклатурыИЗатрат") 
		И (глЗначениеПеременной("ДатаНачалаИспользованияРасширеннойАналитикиУчетаНоменклатурыИЗатрат") <= Дата);
	СтруктураШапкиДокумента.Вставить("ИспользоватьРасширеннуюАналитику", ИспользоватьРасширеннуюАналитику);
	
	ПогашатьСтоимостьВНУКакВБУ = ПроцедурыПогашенияСтоимости.ПогашатьСтоимостьВНУКакВБУ(Организация,Дата);
	СтруктураШапкиДокумента.Вставить("ПогашатьСтоимостьВНУКакВБУ",ПогашатьСтоимостьВНУКакВБУ);
	
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
КонецПроцедуры // ПодготовитьСтруктуруШапкиДокумента()

// Процедура формирует таблицы документа.
//
Процедура ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоМатериалам) Экспорт
	
	// Подготовим таблицу материалов для проведения.
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("Номенклатура"        				, "Номенклатура");
	СтруктураПолей.Вставить("Услуга"              				, "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Набор"               				, "Номенклатура.Набор");
	СтруктураПолей.Вставить("ВестиПартионныйУчетПоСериям"		, "Номенклатура.ВестиПартионныйУчетПоСериям");
	СтруктураПолей.Вставить("Количество"          				, "Количество * Коэффициент /Номенклатура.ЕдиницаХраненияОстатков.Коэффициент");
	
	СтруктураПолей.Вставить("ТипСтоимости"						, "ТипСтоимости");
	СтруктураПолей.Вставить("Стоимость"							, "Сумма");
	СтруктураПолей.Вставить("СтоимостьРегл"						, "СуммаРегл");
	
	СтруктураПолей.Вставить("ХарактеристикаНоменклатуры"		, "ХарактеристикаНоменклатуры");
	СтруктураПолей.Вставить("СерияНоменклатуры"         		, "СерияНоменклатуры");
	
	СтруктураПолей.Вставить("ФизЛицо"         					, "ФизЛицо");
	СтруктураПолей.Вставить("НазначениеИспользования"         	, "НазначениеИспользования");
	
	СтруктураПолей.Вставить("Качество"         					, "Качество");
	СтруктураПолей.Вставить("ДокументПередачи"         			, "ДокументПередачи");
	
	ДополнитьСтруктуруПолейТабличнойЧастиМатериалыРегл(СтруктураПолей);
	
	РезультатЗапросаПоМатериалам = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Материалы", СтруктураПолей);
	ТаблицаПоМатериалам = ПодготовитьТаблицуМатериалов(РезультатЗапросаПоМатериалам, СтруктураШапкиДокумента);
	
	//Заполнение счетов учета номенклатуры и затрат
	СчетаУчетаВДокументах.ЗаполнитьПриПроведенииСчетаУчетаТабличнойЧасти("Материалы", ТаблицаПоМатериалам, 	СтруктураШапкиДокумента);
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		БухгалтерскийУчетРасчетовСКонтрагентами.ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(ТаблицаПоМатериалам, СтруктураШапкиДокумента, Ложь);
	КонецЕсли;
	
КонецПроцедуры // СформироватьТаблицыДокумента()

// Процедура - обработчик события ОбработкаПроведения
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Перем Заголовок, СтруктураШапкиДокумента, ТаблицаПоМатериалам;
	
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;

	ПодготовитьПараметрыУчетнойПолитики(Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, Отказ);
	
	ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоМатериалам);
	
	//Заполнение и проверка заполнения счетов учета номенклатуры и затрат
	СчетаУчетаВДокументах.ПроверитьСчетаУчетаТабличнойЧасти("Материалы", ТаблицаПоМатериалам, 	СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// Движения по документу.
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоМатериалам, Отказ, Заголовок);
	КонецЕсли;
	
	
	//Сделаем переменные доступными из подписок на события
	ДополнительныеСвойства.Вставить("СтруктураШапкиДокумента", СтруктураШапкиДокумента);
	ДополнительныеСвойства.Вставить("СтруктураТабличныхЧастей", Новый Структура("ТаблицаПоМатериалам", ТаблицаПоМатериалам));
	
КонецПроцедуры	// ОбработкаПроведения()

// Процедура - обработчик события ОбработкаЗаполнения
//
Процедура ОбработкаЗаполнения(Основание)
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ПередачаМатериаловВЭксплуатацию") Тогда
		
		// Заполнение шапки
		ОтражатьВБухгалтерскомУчете  = Основание.ОтражатьВБухгалтерскомУчете;
		ОтражатьВНалоговомУчете      = Основание.ОтражатьВНалоговомУчете;
		ОтражатьВУправленческомУчете = Основание.ОтражатьВУправленческомУчете;
		Организация                  = Основание.Организация;
		Подразделение                = Основание.Подразделение;
		ПодразделениеОрганизации     = Основание.ПодразделениеОрганизации;
		Комментарий   = Основание.Комментарий;
		Ответственный = Основание.Ответственный;
		Склад         = Основание.Склад;
		
		Для Каждого ТекСтрокаМатериалы Из Основание.Материалы Цикл
			
			НоваяСтрока = Материалы.Добавить();
			
			НоваяСтрока.Номенклатура               = ТекСтрокаМатериалы.Номенклатура;
			НоваяСтрока.ХарактеристикаНоменклатуры = ТекСтрокаМатериалы.ХарактеристикаНоменклатуры;
			НоваяСтрока.СерияНоменклатуры          = ТекСтрокаМатериалы.СерияНоменклатуры;
			
			НоваяСтрока.ЕдиницаИзмерения           = ТекСтрокаМатериалы.ЕдиницаИзмерения;
			НоваяСтрока.ЕдиницаИзмеренияМест       = ТекСтрокаМатериалы.ЕдиницаИзмеренияМест;
			НоваяСтрока.Количество                 = ТекСтрокаМатериалы.Количество;
			НоваяСтрока.КоличествоМест             = ТекСтрокаМатериалы.КоличествоМест;
			НоваяСтрока.Коэффициент                = ТекСтрокаМатериалы.Коэффициент;
			НоваяСтрока.Качество                   = ТекСтрокаМатериалы.Качество;
			
			НоваяСтрока.СчетУчетаБУ                = ТекСтрокаМатериалы.СчетУчетаБУ;
			НоваяСтрока.СчетПередачиБУ             = ТекСтрокаМатериалы.СчетПередачиБУ;
			НоваяСтрока.СчетУчетаНУ                = ТекСтрокаМатериалы.СчетУчетаНУ;
			НоваяСтрока.СчетПередачиНУ             = ТекСтрокаМатериалы.СчетПередачиНУ;
			
			НоваяСтрока.ФизЛицо 				   = ТекСтрокаМатериалы.ФизЛицо;
			НоваяСтрока.НазначениеИспользования    = ТекСтрокаМатериалы.НазначениеИспользования;
			
			НоваяСтрока.ТипСтоимости = Перечисления.ВидыНормативнойСтоимостиПроизводства.Рассчитывается;
			НоваяСтрока.ДокументПередачи = Основание;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаЗаполнения()

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;


	 
	мУдалятьДвижения = НЕ ЭтоНовый();
	
КонецПроцедуры // ПередЗаписью

Процедура ПриЗаписи(Отказ)
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;	
КонецПроцедуры


мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");
мВалютаУправленческогоУчета = глЗначениеПеременной("ВалютаУправленческогоУчета");
