
////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Процедура возвращает общие данные для печати универсального передаточного документа
// по всем документам-основаниям
// 
Функция ПодготовитьДанныеДляПечатиУниверсальногоПередаточногоДокумента(ДанныеСчетФактуры) Экспорт
	
	ДанныеДляПечати = Неопределено;
	УчетнаяПолитика = Неопределено;
 	
	УчетНДС.СобратьДанныеДляПечатиСчетФактурыВыданного(ДанныеСчетФактуры.Ссылка, ДанныеДляПечати, УчетнаяПолитика);
	
	Если ТипЗнч(ДанныеДляПечати) = Тип("Соответствие") Тогда
		Возврат Неопределено;
	ИначеЕсли ДанныеДляПечати = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДанныеДляПечати.Вставить("ДатаСчетаФактуры",		ДанныеСчетФактуры.Дата);
	ДанныеДляПечати.Вставить("ВидСчетаФактуры", 		ДанныеСчетФактуры.ВидСчетаФактуры);
	ДанныеДляПечати.Вставить("Исправление", 	 		ДанныеСчетФактуры.Исправление);
	ДанныеДляПечати.Вставить("НомерИсправления", 		ДанныеСчетФактуры.НомерИсправления);
	ДанныеДляПечати.Вставить("ДоговорКонтрагента", 		ДанныеСчетФактуры.ДоговорКонтрагента);
	ДанныеДляПечати.Вставить("СчетФактураБезНДС", 		ДанныеСчетФактуры.СчетФактураБезНДС);
	ДанныеДляПечати.Вставить("КППКонтрагента", 	 		ДанныеСчетФактуры.КППКонтрагента);
	ДанныеДляПечати.Вставить("ДокументОснование", 	 	ДанныеСчетФактуры.ДокументОснование);
	ДанныеДляПечати.Вставить("ВидАгентскогоДоговора",   
		ОбщегоНазначения.ПолучитьЗначениеРеквизита(ДанныеСчетФактуры.ДоговорКонтрагента, "ВидАгентскогоДоговора"));
	ДанныеДляПечати.Вставить("ИдентификаторГосКонтракта", ДанныеСчетФактуры.ИдентификаторГосКонтракта);
	
	УчетНДС.СформироватьФИОКладовщикаДляПечатиУниверсальногоПередаточногоДокумента(ДанныеДляПечати);
	
	ТипОснования = ТипЗнч(ДанныеДляПечати.ДокументОснование);
	Если ДанныеСчетФактуры.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию Тогда
		
		ТекстСообщения = "";
		
		Если ТипОснования = Тип("ДокументСсылка.НачислениеНДСпоСМРхозспособом") Тогда
			ТекстСообщения = "Форма универсального передаточного документа не применяется при начисления НДС по СМР";
		ИначеЕсли ТипОснования = Тип("ДокументСсылка.ОтражениеРеализацииТоваровИУслугНДС") Тогда
			ТекстСообщения = "Форма универсального передаточного документа не применяется для документа ""Отражение начисления НДС""";
		ИначеЕсли ТипОснования = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") Тогда
			ТекстСообщения = "Форма универсального передаточного документа не применяется при оформлении счетов-фактур по отчетам комиссионеров о продажах";
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ТекстСообщения) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Возврат Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	ДанныеДляПечати.Вставить("СтатусУПД", 				1);
	
	Основание = Строка(ДанныеСчетФактуры.ДоговорКонтрагента);
	Если ДанныеСчетФактуры.Свойство("Доверенность") И ЗначениеЗаполнено(ДанныеСчетФактуры.Доверенность) Тогда
		ДанныеДляПечати.Вставить("Основание", Основание + ?(ПустаяСтрока(Основание), "", "; ") + ДанныеСчетФактуры.Доверенность);
	Иначе
		ДанныеДляПечати.Вставить("Основание", Основание);
	КонецЕсли;
	
	// Дата совершения факта хозяйственной жизни. Не может быть ранее даты составления УПД.
	ДанныеДляПечати.Вставить("ДатаОтгрузкиПередачи", 	ДанныеСчетФактуры.Дата);
	
	Возврат ДанныеДляПечати;
	
КонецФункции

// Процедура формирует печатную форму универсального передаточного документа
//
Процедура ПечатьУниверсальногоПередаточногоДокумента(ДанныеДляПечати, ТабДокумент) Экспорт

	Если ДанныеДляПечати.Дата < '20171001' Тогда
		Макет = ПолучитьОбщийМакет("УниверсальныйПередаточныйДокумент");
	Иначе
		Макет = ПолучитьОбщийМакет("УниверсальныйПередаточныйДокумент981");
	КонецЕсли;

	УчетНДС.ВывестиСчетФактуруВТабличныйДокумент(ТабДокумент, Макет, ДанныеДляПечати);
	УчетНДС.ВывестиПодвалУниверсальногоПередаточногоДокументаВТабличныйДокумент(ТабДокумент, Макет, ДанныеДляПечати);
		
КонецПроцедуры

// Процедура возвращает общие данные для печати универсального корректировочного документа
// по всем документам-основаниям
// 
Функция ПодготовитьДанныеДляПечатиУниверсальногоКорректировочногоДокумента(СчетФактура) Экспорт
	
	ДанныеДляПечати = ПодготовитьОбщиеДанныеДляПечатиКорректировочногоСчетаФактуры(СчетФактура,Истина);
	Если ДанныеДляПечати = Неопределено Тогда
		Возврат ДанныеДляПечати;
	КонецЕсли;
	
	ДанныеДляПечати.Вставить("Основание", Строка(СчетФактура.ДоговорКонтрагента));
	ДанныеДляПечати.Вставить("СтатусУКД", 1);
	
	Возврат ДанныеДляПечати;
	
КонецФункции

// Процедура возвращает общие данные для печати счета фактуры
// по всем документам-основаниям
// 
Функция ПодготовитьОбщиеДанныеДляПечатиКорректировочногоСчетаФактуры(СчетФактура,ЭтоПечатьУКД = Ложь)
	
	СписокОснований = ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(СчетФактура.ДокументыОснования.ВыгрузитьКолонку("ДокументОснование"),Истина);
	
	ОбщиеДанныеДляПечати = Неопределено;
	
	ДанныеСчетаФактуры = Новый Структура();
	ДанныеСчетаФактуры.Вставить("Ссылка", 							СчетФактура.Ссылка);
	ДанныеСчетаФактуры.Вставить("Номер",  							ОбщегоНазначения.ПолучитьНомерНаПечать(СчетФактура));
	ДанныеСчетаФактуры.Вставить("Дата",   							СчетФактура.Дата);
	ДанныеСчетаФактуры.Вставить("Организация",   					СчетФактура.Организация);
	ДанныеСчетаФактуры.Вставить("Контрагент",   					СчетФактура.Контрагент);
	ДанныеСчетаФактуры.Вставить("ДоговорКонтрагента",               СчетФактура.ДоговорКонтрагента);
	ДанныеСчетаФактуры.Вставить("ВидСчетаФактуры",                  СчетФактура.ВидСчетаФактуры);
	ДанныеСчетаФактуры.Вставить("Исправление",                      СчетФактура.Исправление);
	ДанныеСчетаФактуры.Вставить("НомерИсправления",                 СчетФактура.НомерИсправления);
	ДанныеСчетаФактуры.Вставить("НомерИсправляемогоКорректировочногоДокумента", СчетФактура.НомерИсправляемогоКорректировочногоДокумента);
	ДанныеСчетаФактуры.Вставить("ДатаИсправляемогоКорректировочногоДокумента",  СчетФактура.ДатаИсправляемогоКорректировочногоДокумента);
	ДанныеСчетаФактуры.Вставить("Продавец",                         СчетФактура.Контрагент);
	ДанныеСчетаФактуры.Вставить("КППКонтрагента",                   СчетФактура.КППКонтрагента);
	ДанныеСчетаФактуры.Вставить("СчетФактураБезНДС",                СчетФактура.СчетФактураБезНДС);
	ДанныеСчетаФактуры.Вставить("ДатаСчетаФактуры",                 СчетФактура.Дата);
	ДанныеСчетаФактуры.Вставить("ИдентификаторГосКонтракта",        СчетФактура.ИдентификаторГосКонтракта);
	
	Для каждого ТекущееОснование из СписокОснований Цикл
		Если Не ЗначениеЗаполнено(ТекущееОснование) Тогда
			//Предупреждение("Не выбран документ-основание для данного счета-фактуры!");
			Продолжить;
		КонецЕсли; 
		
		ТипОснования = ТипЗнч(ТекущееОснование);
		ДанныеДляПечати = Неопределено;
		
		Если ТипОснования = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
			ДанныеДляПечати = УчетНДС.СобратьДанныеДляПечатиКорректировочногоСчетаФактуры(ТекущееОснование, ДанныеСчетаФактуры.Ссылка);
		КонецЕсли;
		
		Если ДанныеДляПечати = Неопределено или ТипЗнч(ДанныеДляПечати) = Тип("Соответствие") Тогда
			Продолжить;
		КонецЕсли;
		
		Если ОбщиеДанныеДляПечати = Неопределено Тогда
			ОбщиеДанныеДляПечати = ДанныеДляПечати;
		Иначе
			Для Каждого СтрДанных Из ДанныеДляПечати Цикл
				
				Если СтрДанных.Ключ = "ТабличнаяЧасть" Тогда
					ОбщаяТабЧасть = ОбщиеДанныеДляПечати.ТабличнаяЧасть;
					ТекущаяТабЧасть = СтрДанных.Значение;
					
					Для Каждого СтрокаТекущейТабЧасть Из ТекущаяТабЧасть Цикл
						СтрокаТабЧасти = ОбщаяТабЧасть.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаТабЧасти, СтрокаТекущейТабЧасть);
					КонецЦикла;
				Иначе
					Если Не ОбщиеДанныеДляПечати.Свойство(СтрДанных.Ключ) Тогда
						// Если данный параметр для печати шапки документа еще не  определен - то определяем его
						ОбщиеДанныеДляПечати.Вставить(СтрДанных.Ключ, СтрДанных.Значение);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
	КонецЦикла;
	
	Если ОбщиеДанныеДляПечати <> Неопределено Тогда
		
		КорректируемыеСчетаФактуры = Новый ТаблицаЗначений;
		КорректируемыеСчетаФактуры.Колонки.Добавить("НомерСчетаФактуры");
		КорректируемыеСчетаФактуры.Колонки.Добавить("ДатаСчетаФактуры");
		КорректируемыеСчетаФактуры.Колонки.Добавить("УчитыватьИсправлениеИсходногоДокумента");
		КорректируемыеСчетаФактуры.Колонки.Добавить("НомерИсправления");
		КорректируемыеСчетаФактуры.Колонки.Добавить("ДатаИсправления");
		
		
		РеквизитыПередаточныхДокументов = ""; 
		
		Для Каждого ТекущееОснование ИЗ СчетФактура.ДокументыОснования Цикл
			РеквизитыСчетаФактуры = КорректируемыеСчетаФактуры.Добавить();
			РеквизитыСчетаФактуры.НомерСчетаФактуры = ТекущееОснование.НомерИсходногоДокумента;
			РеквизитыСчетаФактуры.ДатаСчетаФактуры  = ТекущееОснование.ДатаИсходногоДокумента;
			РеквизитыСчетаФактуры.УчитыватьИсправлениеИсходногоДокумента = ТекущееОснование.УчитыватьИсправлениеИсходногоДокумента;
			РеквизитыСчетаФактуры.НомерИсправления  = ?(ТекущееОснование.НомерИсправленияИсходногоДокумента = 0 ИЛИ НЕ ТекущееОснование.УчитыватьИсправлениеИсходногоДокумента,
														"--", ТекущееОснование.НомерИсправленияИсходногоДокумента);
			РеквизитыСчетаФактуры.ДатаИсправления   = ?(Не ЗначениеЗаполнено(ТекущееОснование.ДатаИсправленияИсходногоДокумента) ИЛИ НЕ ТекущееОснование.УчитыватьИсправлениеИсходногоДокумента,
														'00010101', ТекущееОснование.ДатаИсправленияИсходногоДокумента);
			ИсправляемыйДокументРеализации = УчетНДС.ПолучитьИсправляемыйДокументРеализации(ТекущееОснование.ДокументОснование, Истина);
			РеквизитыПередаточныхДокументов = РеквизитыПередаточныхДокументов + ?(РеквизитыПередаточныхДокументов = "", "", ", ")
				+ ?(ЭтоПечатьУКД,
					ОбщегоНазначения.СформироватьЗаголовокДокумента(ИсправляемыйДокументРеализации, "Универсальный передаточный документ"),
					ОбщегоНазначения.СформироватьЗаголовокДокумента(ИсправляемыйДокументРеализации));
		КонецЦикла;
	
		ДанныеДляПечати.Вставить("РеквизитыПередаточныхДокументов", РеквизитыПередаточныхДокументов);
		
		КорректируемыеСчетаФактуры.Свернуть("НомерСчетаФактуры, ДатаСчетаФактуры, УчитыватьИсправлениеИсходногоДокумента, НомерИсправления, ДатаИсправления");
		
		Если КорректируемыеСчетаФактуры.Количество() <> 0 Тогда
			
			КорректируемыеСчетаФактуры.Сортировать("ДатаСчетаФактуры Возр", Новый СравнениеЗначений);
			Если КорректируемыеСчетаФактуры[0].ДатаСчетаФактуры >= '20160701' 
				И ДанныеДляПечати.ДатаСчетаФактуры < '20171001'Тогда
				
				Для Каждого СтрокаТабЧасти Из ОбщиеДанныеДляПечати.ТабличнаяЧасть Цикл
					
					Если СтрокаТабЧасти.СтавкаНДС = Перечисления.СтавкиНДС.НДС0
						И ЗначениеЗаполнено(СтрокаТабЧасти.ТоварКодТНВЭД) Тогда
						// Дополняем наименование товара информацией о коде ТН ВЭД
						СтрокаТабЧасти.НаименованиеТовара = СтрокаТабЧасти.НаименованиеТовара
							+ ", код ТН ВЭД " + СокрЛП(СтрокаТабЧасти.ТоварКодТНВЭД);
					КонецЕсли;
					
				КонецЦикла; 
				
			КонецЕсли;
			
		КонецЕсли;
		
		ОбщиеДанныеДляПечати.Вставить("КорректируемыеСчетаФактуры", КорректируемыеСчетаФактуры);
		
		Если ЗначениеЗаполнено(СчетФактура.Руководитель) Тогда
			Если ОбщиеДанныеДляПечати.Свойство("ФИОРуководителя") Тогда 
				ОбщиеДанныеДляПечати.ФИОРуководителя = ОбщегоНазначения.ФамилияИнициалыФизЛица(СчетФактура.Руководитель);
			ИначеЕсли ОбщиеДанныеДляПечати.Свойство("ФИОПБОЮЛ") Тогда
				ОбщиеДанныеДляПечати.ФИОПБОЮЛ = ОбщегоНазначения.ФамилияИнициалыФизЛица(СчетФактура.Руководитель);
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СчетФактура.ГлавныйБухгалтер) И ОбщиеДанныеДляПечати.Свойство("ФИОГлавногоБухгалтера") Тогда
			ОбщиеДанныеДляПечати.ФИОГлавногоБухгалтера = ОбщегоНазначения.ФамилияИнициалыФизЛица(СчетФактура.ГлавныйБухгалтер);
		КонецЕсли;
		
		ОбщиеДанныеДляПечати.Вставить("КППКонтрагента",  	СчетФактура.КППКонтрагента);
		
		КолонкиГруппировок = ""
		+"Номенклатура,"
		+"ТоварКод,"
		+"ТоварКодТНВЭД,"
		+"ТоварКодТНВЭДДоИзменения,"
		+"ТоварАртикул,"
		+"НаименованиеТовара,"
		+"НаименованиеЕдиницыИзмерения,"
		+"ЕдиницаИзмеренияКод,"
		+"ЦенаДоИзменения,"	
		+"ЦенаПослеИзменения,"
		+"СтавкаНДС,"
		+"СтавкаНДСПослеИзменения,"
		+"СуммаВключаетНДС";
		
		КолонкиСуммирования = ""
		+"СуммаНДСДоИзменения,"
		+"СуммаНДСПослеИзменения,"
		+"СтоимостьСНДСДоИзменения,"
		+"СтоимостьСНДСПослеИзменения,"
		+"РазницаБезНДСУвеличение,"
		+"РазницаБезНДСУменьшение,"
		+"РазницаНДСУвеличение,"
		+"РазницаНДСУменьшение,"
		+"РазницаСНДСУвеличение,"
		+"РазницаСНДСУменьшение,"
		+"СтоимостьБезНДСДоИзменения,"
		+"СтоимостьБезНДСПослеИзменения,"
		+"КоличествоДоИзменения,"
		+"КоличествоПослеИзменения";
		
		ОбщиеДанныеДляПечати.ТабличнаяЧасть.Свернуть(КолонкиГруппировок, КолонкиСуммирования);
		
		ОбщиеДанныеДляПечати.ТабличнаяЧасть.Колонки.Добавить("НомерСтроки", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(10, 0));
		НомерСтроки = 0;
		Для Каждого Строчка Из ОбщиеДанныеДляПечати.ТабличнаяЧасть Цикл
			НомерСтроки = НомерСтроки + 1;
			Строчка.НомерСтроки = НомерСтроки;
		КонецЦикла;		
		
		// заполнение колонок код и артикул
		ДополнительнаяКолонкаПечатныхФормДокументов = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
		Если ДополнительнаяКолонкаПечатныхФормДокументов = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.НеВыводить Тогда
			ОбщиеДанныеДляПечати.ТабличнаяЧасть.ЗаполнитьЗначения("", "ТоварКод");
			ОбщиеДанныеДляПечати.ТабличнаяЧасть.Колонки.Удалить("ТоварАртикул");
		ИначеЕсли ДополнительнаяКолонкаПечатныхФормДокументов = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
			ОбщиеДанныеДляПечати.ТабличнаяЧасть.Колонки.Удалить("ТоварКод");
			ОбщиеДанныеДляПечати.ТабличнаяЧасть.Колонки.ТоварАртикул.Имя = "ТоварКод";
		Иначе
			ОбщиеДанныеДляПечати.ТабличнаяЧасть.Колонки.Удалить("ТоварАртикул");
		КонецЕсли;
		
		ОбщиеДанныеДляПечати.Вставить("ДокументыОснования", СписокОснований);
		
	КонецЕсли;
	
	Возврат ОбщиеДанныеДляПечати;

КонецФункции

Функция ПечатьУниверсальногоКорректировочногоДокумента(ДанныеДляПечати, ТабДокумент = Неопределено) Экспорт
	
	Таблица = ДанныеДляПечати.ТабличнаяЧасть;
	
	СуммаУменьшения = Таблица.Итог("РазницаБезНДСУменьшение") + Таблица.Итог("РазницаСНДСУменьшение") + Таблица.Итог("РазницаНДСУменьшение");
	СуммаУвеличения = Таблица.Итог("РазницаБезНДСУвеличение") + Таблица.Итог("РазницаСНДСУвеличение") + Таблица.Итог("РазницаНДСУвеличение");
	
	Если СуммаУменьшения = 0 И СуммаУвеличения = 0 Тогда
		ТекстСообщения = "Печать универсального корректировочного документа без изменения суммовых показателей не возможна!";
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат Неопределено;
	КонецЕсли;
	
	Если ТабДокумент = Неопределено Тогда		
		ТабДокумент = Новый ТабличныйДокумент;
		
		// Устанавливаем параметры печати и колонтитулы
		ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
		ТабДокумент.ПолеСверху = 12;
		ТабДокумент.ПолеСлева  = 0;
		ТабДокумент.ПолеСнизу  = 0;
		ТабДокумент.ПолеСправа = 0;
		ТабДокумент.АвтоМасштаб = Истина;
		
		ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_УниверсальныйКорректировочныйДокумент";
	КонецЕсли;
	
	Если ДанныеДляПечати.Дата < '20171001' Тогда
		Макет = ПолучитьОбщийМакет("УниверсальныйКорректировочныйДокумент");
	Иначе
		Макет = ПолучитьОбщийМакет("УниверсальныйКорректировочныйДокумент981");
	КонецЕсли;
	
	УчетНДС.ВывестиКорректировочныйСчетФактуруВТабличныйДокумент(ТабДокумент, Макет, ДанныеДляПечати);
	УчетНДС.ВывестиПодвалУниверсальногоКорректировочногоДокументаВТабличныйДокумент(ТабДокумент, Макет, ДанныеДляПечати);
	
	Возврат ТабДокумент;

КонецФункции

// Сформировать печатные формы объектов
//
// ВХОДЯЩИЕ:
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать
//
// ИСХОДЯЩИЕ:
//   КоллекцияПечатныхФорм - Таблица значений - Сформированные табличные документы
//   ОшибкиПечати          - Список значений  - Ошибки печати  (значение - ссылка на объект, представление - текст ошибки)
//   ОбъектыПечати         - Список значений  - Объекты печати (значение - ссылка на объект, представление - имя области в которой был выведен объект)
//   ПараметрыВывода       - Структура        - Параметры сформированных табличных документов
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	ПараметрыВывода.ДоступнаПечатьПоКомплектно = Истина;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "СчетФактура") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "СчетФактура", "Счет фактура", ПечатьСчетаФактуры(МассивОбъектов, ОбъектыПечати));
	КонецЕсли;
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "СчетФактура283") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "СчетФактура283", "Счет фактура", ПечатьСчетаФактуры(МассивОбъектов, ОбъектыПечати));
	КонецЕсли;
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "СчетФактура84")  Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "СчетФактура84", "Счет фактура", ПечатьСчетаФактуры(МассивОбъектов, ОбъектыПечати));
	КонецЕсли;
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "СчетФактура575") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "СчетФактура575", "Счет фактура", ПечатьСчетаФактуры(МассивОбъектов, ОбъектыПечати));
	КонецЕсли;
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "УниверсальныйПередаточныйДокумент") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "УниверсальныйПередаточныйДокумент", 
			"Универсальный передаточный документ", ПечатьУниверсальныхПередаточныхДокументов(МассивОбъектов, ОбъектыПечати));
	КонецЕсли;
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "УниверсальныйКорректировочныйДокумент") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "УниверсальныйКорректировочныйДокумент", 
			"Универсальный корректировочный документ", ПечатьУниверсальныхКорректировочныхДокументов(МассивОбъектов, ОбъектыПечати));
	КонецЕсли;
	
КонецПроцедуры

//Функция возвращает данные номеров документов оплаты для формирования движений по РН НДСЗаписиКнигиПродаж
//
Функция СформироватьТаблицуНомеровДокументовОплаты(СтруктураПараметров) Экспорт
	
	Если УчетНДС.ВерсияПостановленияНДС1137(СтруктураПараметров.Период) < 3 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НДСНачисленный.Организация,
	|	НДСНачисленный.СчетФактура,
	|	НДСНачисленный.Покупатель,
	|	&Ссылка КАК СчетФактураДокумент,
	|	НДСНачисленный.СтавкаНДС,
	|	НДСНачисленный.ВидЦенности,
	|	НДСНачисленный.ДоговорКонтрагента
	|ПОМЕСТИТЬ ВТ_ЗаписиКнигиПродажПредварительная
	|ИЗ
	|	РегистрНакопления.НДСНачисленный КАК НДСНачисленный
	|ГДЕ
	|	НДСНачисленный.СчетФактура = &ДокументОснование
	|	И НДСНачисленный.Активность
	|	И НДСНачисленный.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	И НЕ НДСНачисленный.СтавкаНДС В (ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС), ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС0))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НДСНачисленный.Организация,
	|	НДСНачисленный.СчетФактура,
	|	НДСНачисленный.Покупатель,
	|	НДСНачисленный.СчетФактура,
	|	НДСНачисленный.СтавкаНДС,
	|	НДСНачисленный.ВидЦенности,
	|	НДСНачисленный.ДоговорКонтрагента
	|ИЗ
	|	РегистрНакопления.НДСНачисленный КАК НДСНачисленный
	|ГДЕ
	|	НДСНачисленный.СчетФактура = &Ссылка
	|	И НДСНачисленный.Активность
	|	И НДСНачисленный.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	И НЕ НДСНачисленный.СтавкаНДС В (ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС), ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС0))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВТ_ЗаписиКнигиПродажПредварительная.Организация,
	|	ВТ_ЗаписиКнигиПродажПредварительная.СчетФактура,
	|	ВТ_ЗаписиКнигиПродажПредварительная.Покупатель,
	|	ВТ_ЗаписиКнигиПродажПредварительная.СчетФактураДокумент,
	|	ВТ_ЗаписиКнигиПродажПредварительная.СтавкаНДС,
	|	ВТ_ЗаписиКнигиПродажПредварительная.ВидЦенности,
	|	ВТ_ЗаписиКнигиПродажПредварительная.ДоговорКонтрагента
	|ПОМЕСТИТЬ ВТ_ЗаписиКнигиПродаж
	|ИЗ
	|	ВТ_ЗаписиКнигиПродажПредварительная КАК ВТ_ЗаписиКнигиПродажПредварительная
	|ГДЕ
	|	ИСТИНА
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СчетФактураВыданныйПлатежноРасчетныеДокументы.ДатаПлатежноРасчетногоДокумента КАК ДатаДокументаОплаты,
	|	СчетФактураВыданныйПлатежноРасчетныеДокументы.НомерПлатежноРасчетногоДокумента КАК НомерДокументаОплаты,
	|	ВТ_ЗаписиКнигиПродаж.Организация КАК Организация,
	|	ВТ_ЗаписиКнигиПродаж.СчетФактура КАК СчетФактура,
	|	&Период КАК Период,
	|	ВТ_ЗаписиКнигиПродаж.Покупатель КАК Покупатель,
	|	ВТ_ЗаписиКнигиПродаж.СтавкаНДС,
	|	ВТ_ЗаписиКнигиПродаж.ВидЦенности,
	|	ВТ_ЗаписиКнигиПродаж.ДоговорКонтрагента
	|ИЗ
	|	ВТ_ЗаписиКнигиПродаж КАК ВТ_ЗаписиКнигиПродаж
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный.ДатаНомерДокументовОплаты КАК СчетФактураВыданныйПлатежноРасчетныеДокументы
	|		ПО ВТ_ЗаписиКнигиПродаж.СчетФактураДокумент = СчетФактураВыданныйПлатежноРасчетныеДокументы.Ссылка
	|ГДЕ
	|	СчетФактураВыданныйПлатежноРасчетныеДокументы.Ссылка = &Ссылка
	|	И СчетФактураВыданныйПлатежноРасчетныеДокументы.ДатаПлатежноРасчетногоДокумента <> ДАТАВРЕМЯ(1, 1, 1)";
	
	
	Если СтруктураПараметров.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАванс
		ИЛИ СтруктураПараметров.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НалоговыйАгент Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,
									"ГДЕ
									|	ИСТИНА",
									"ГДЕ
									|	ВТ_ЗаписиКнигиПродажПредварительная.ДоговорКонтрагента = &ДоговорКонтрагента");
		Запрос.УстановитьПараметр("ДоговорКонтрагента",СтруктураПараметров.ДоговорКонтрагента);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Ссылка", СтруктураПараметров.Ссылка);
	Запрос.УстановитьПараметр("Период", СтруктураПараметров.Период);
	Запрос.УстановитьПараметр("ДокументОснование", СтруктураПараметров.ДокументОснование);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ 

// Проверяет правильность заполнения шапки документа.
// проставляет прочерки в незаполненных полях печатной формы счета-фактуры
//
Процедура ПроставитьПрочеркиВПустыеПоля(ОбластьМакета)

	Для т = 0 По ОбластьМакета.Параметры.Количество() - 1 Цикл
		
		ТекПараметр = ОбластьМакета.Параметры.Получить(т);
		
		Если (Найти(ТекПараметр, "Продавец:") <> 0)
		   и (СокрЛП(ТекПараметр) = "Продавец:") Тогда
			ОбластьМакета.Параметры.Установить(т, "Продавец: --");
			
		ИначеЕсли (Найти(ТекПараметр, "Адрес:") <> 0)
			    и (СокрЛП(ТекПараметр) = "Адрес:") Тогда
			ОбластьМакета.Параметры.Установить(т, "Адрес: --");
			
		ИначеЕсли (Найти(ТекПараметр, "Идентификационный номер продавца (ИНН):") <> 0)
			    и (СокрЛП(ТекПараметр) = "Идентификационный номер продавца (ИНН):") Тогда
			ОбластьМакета.Параметры.Установить(т, "Идентификационный номер продавца (ИНН): -");
			
		ИначеЕсли (Найти(ТекПараметр, "ИНН/КПП продавца:") <> 0)
			    и (СокрЛП(ТекПараметр) = "ИНН/КПП продавца:") Тогда
			ОбластьМакета.Параметры.Установить(т, "ИНН/КПП продавца: --");
			
		ИначеЕсли (Найти(ТекПараметр, "Грузоотправитель и его адрес:") <> 0)
			    и (СокрЛП(ТекПараметр) = "Грузоотправитель и его адрес:") Тогда
			ОбластьМакета.Параметры.Установить(т, "Грузоотправитель и его адрес: --");
			
		ИначеЕсли (Найти(ТекПараметр, "Грузополучатель и его адрес:") <> 0)
		   		и (СокрЛП(ТекПараметр) = "Грузополучатель и его адрес:") Тогда
			ОбластьМакета.Параметры.Установить(т, "Грузополучатель и его адрес: --");
			
		ИначеЕсли (Найти(ТекПараметр, "К платежно-расчетному документу №") <> 0)
		   		и (СокрЛП(ТекПараметр) = "К платежно-расчетному документу №  от") Тогда
			ОбластьМакета.Параметры.Установить(т, "К платежно-расчетному документу № -- от --");
			
		ИначеЕсли (Найти(ТекПараметр, "Покупатель:") <> 0)
		   		и (СокрЛП(ТекПараметр) = "Покупатель:") Тогда
			ОбластьМакета.Параметры.Установить(т, "Покупатель: --");
			
		ИначеЕсли (Найти(ТекПараметр, "Идентификационный номер покупателя (ИНН):") <> 0)
			    и (СокрЛП(ТекПараметр) = "Идентификационный номер покупателя (ИНН):") Тогда
			ОбластьМакета.Параметры.Установить(т, "Идентификационный номер покупателя (ИНН): --");
			
		ИначеЕсли НЕ ЗначениеЗаполнено(ТекПараметр) Тогда
			ОбластьМакета.Параметры.Установить(т, "--");
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ПроставитьПрочеркиВПустыеПоля()

// ПЕЧАТЬ

Функция ПечатьСчетаФактуры(МассивОбъектов, ОбъектыПечати)

	ТабДокумент = Новый ТабличныйДокумент;
	
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ТабДокумент.ПолеСверху = 13;
	ТабДокумент.АвтоМасштаб = Истина;
	
	ПервыйДокумент = Истина;
	ВыводитьКолонтитул = МассивОбъектов.Количество() = 1;
	
	Для каждого Ссылка Из МассивОбъектов Цикл
		
		Если Не ПервыйДокумент Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;
		
		Если Ссылка.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный
		 ИЛИ Ссылка.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.КорректировочныйНаАванс Тогда
			Корректировочный = Истина;
		Иначе
			Корректировочный = Ложь;
		КонецЕсли;
		
		ВерсияПостановления = УчетНДС.ПолучитьВерсиюПостановления(Ссылка.Дата);
		Если ВерсияПостановления = 1 Тогда
			Если Корректировочный Тогда
				ПечатьКорректировочногоСчетаФактуры(Ссылка, ТабДокумент);
			Иначе
				ПечатьСчетаФактуры914(Ссылка, ТабДокумент);
			КонецЕсли;
		Иначе
			Если Корректировочный Тогда
				ПечатьКорректировочногоСчетаФактуры1137(Ссылка, ТабДокумент);
			Иначе
				ПечатьСчетаФактуры1137(Ссылка, ТабДокумент);
			КонецЕсли;
		КонецЕсли;
		
		ТабДокумент.ВерхнийКолонтитул.Выводить = ВыводитьКолонтитул;
		Если ВыводитьКолонтитул Тогда
			ТабДокумент.ВерхнийКолонтитул.НачальнаяСтраница     = 2;
			ТабДокумент.ВерхнийКолонтитул.ВертикальноеПоложение = ВертикальноеПоложение.Низ;
			ЗаголовокДляПечати = ОбщегоНазначения.СформироватьЗаголовокДокумента(Ссылка, "Счет-фактура") + " г.";
			ТабДокумент.ВерхнийКолонтитул.ТекстСлева  = ЗаголовокДляПечати;
			ТабДокумент.ВерхнийКолонтитул.ТекстСправа = "Лист [&НомерСтраницы]";
		КонецЕсли;
	
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент, НомерСтрокиНачало, ОбъектыПечати, Ссылка);
		
	КонецЦикла;
	
	Возврат ТабДокумент;

КонецФункции

Процедура ПечатьСчетаФактуры1137(Ссылка, ТабДокумент)

	ДанныеДляПечати = Неопределено;
	УчетнаяПолитика = Неопределено;
	
	УчетНДС.СобратьДанныеДляПечатиСчетФактурыВыданного(Ссылка, ДанныеДляПечати, УчетнаяПолитика);
	
	Если ТипЗнч(ДанныеДляПечати) = Тип("Соответствие") Тогда
		Возврат;
	ИначеЕсли ДанныеДляПечати = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РеквизитыСФ = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(Ссылка, 
		"Дата, ВидСчетаФактуры, Исправление, НомерИсправления, ДоговорКонтрагента, СчетФактураБезНДС, КППКонтрагента, СводныйКомиссионный, ИдентификаторГосКонтракта, ДатаИсходногоДокумента");
	ДанныеДляПечати.Вставить("ДатаСчетаФактуры", 	 	РеквизитыСФ.Дата);
	ДанныеДляПечати.Вставить("Ссылка",			 	 	Ссылка);
	ДанныеДляПечати.Вставить("ВидСчетаФактуры", 		РеквизитыСФ.ВидСчетаФактуры);
	ДанныеДляПечати.Вставить("Исправление", 	 		РеквизитыСФ.Исправление);
	ДанныеДляПечати.Вставить("НомерИсправления", 		РеквизитыСФ.НомерИсправления);
	ДанныеДляПечати.Вставить("ДоговорКонтрагента", 		РеквизитыСФ.ДоговорКонтрагента);
	ДанныеДляПечати.Вставить("СчетФактураБезНДС", 		РеквизитыСФ.СчетФактураБезНДС);
	ДанныеДляПечати.Вставить("КППКонтрагента", 	 		РеквизитыСФ.КППКонтрагента);
	ДанныеДляПечати.Вставить("СводныйКомиссионный",     РеквизитыСФ.СводныйКомиссионный);
	ДанныеДляПечати.Вставить("ВидАгентскогоДоговора",   
			ОбщегоНазначения.ПолучитьЗначениеРеквизита(РеквизитыСФ.ДоговорКонтрагента, "ВидАгентскогоДоговора"));
	ДанныеДляПечати.Вставить("ИдентификаторГосКонтракта", РеквизитыСФ.ИдентификаторГосКонтракта);
	
	Если РеквизитыСФ.Исправление Тогда 
		ДатаСФ = РеквизитыСФ.ДатаИсходногоДокумента;
	Иначе
		ДатаСФ = РеквизитыСФ.Дата;
	КонецЕсли;
	
	// Определяем макет
	Если ДатаСФ < '20171001' Тогда
		ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СчетФактураВыданный_СчетФактура1137";
		Макет = ПолучитьОбщийМакет("СчетФактура1137");
	Иначе
		ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СчетФактураВыданный_СчетФактура981";
		Макет = ПолучитьОбщийМакет("СчетФактура981");
	КонецЕсли;
			
	УчетНДС.ВывестиСчетФактуруВТабличныйДокумент(ТабДокумент, Макет, ДанныеДляПечати);

КонецПроцедуры

Процедура ПечатьКорректировочногоСчетаФактуры1137(Ссылка, ТабДокумент)

	ДанныеДляПечати = Неопределено;
	УчетнаяПолитика = Неопределено;
	
	УчетНДС.СобратьДанныеДляПечатиСчетФактурыВыданного(Ссылка, ДанныеДляПечати, УчетнаяПолитика);
	
	Если ТипЗнч(ДанныеДляПечати) = Тип("Соответствие") Тогда
		Возврат;
	ИначеЕсли ДанныеДляПечати = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НаАванс = ДанныеДляПечати.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.КорректировочныйНаАванс;
	
	РеквизитыСФ = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(Ссылка, 
		"Номер,Дата,
		|Исправление,НомерИсправления,
		|НомерИсправляемогоКорректировочногоДокумента,ДатаИсправляемогоКорректировочногоДокумента,
		|СчетФактураБезНДС, КППКонтрагента, ИдентификаторГосКонтракта");
	
	Если Ссылка.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный Тогда

		Запрос = Новый Запрос();
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		Запрос.Текст = 

		"ВЫБРАТЬ
		|	СчетФактураВыданныйДокументыОснования.НомерИсходногоДокумента КАК НомерСчетаФактуры,
		|	СчетФактураВыданныйДокументыОснования.ДатаИсходногоДокумента КАК ДатаСчетаФактуры,
		|	СчетФактураВыданныйДокументыОснования.УчитыватьИсправлениеИсходногоДокумента КАК УчитыватьИсправлениеИсходногоДокумента,
		|	СчетФактураВыданныйДокументыОснования.НомерИсправленияИсходногоДокумента КАК НомерИсправления,
		|	СчетФактураВыданныйДокументыОснования.ДатаИсправленияИсходногоДокумента КАК ДатаИсправления,
		|	МИНИМУМ(СчетФактураВыданныйДокументыОснования.НомерСтроки) КАК НомерСтроки
		|ИЗ
		|	Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураВыданныйДокументыОснования
		|ГДЕ
		|	СчетФактураВыданныйДокументыОснования.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	СчетФактураВыданныйДокументыОснования.НомерИсходногоДокумента,
		|	СчетФактураВыданныйДокументыОснования.ДатаИсходногоДокумента,
		|	СчетФактураВыданныйДокументыОснования.УчитыватьИсправлениеИсходногоДокумента,
		|	СчетФактураВыданныйДокументыОснования.НомерИсправленияИсходногоДокумента,
		|	СчетФактураВыданныйДокументыОснования.ДатаИсправленияИсходногоДокумента
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
	
	ИначеЕсли НаАванс Тогда
	
		Запрос = Новый Запрос();
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИсходныйСчетФактураРеквизиты.НомерСчетаФактуры КАК НомерСчетаФактуры,
		|	ИсходныйСчетФактураРеквизиты.ДатаСчетаФактуры КАК ДатаСчетаФактуры,
		|	ЛОЖЬ КАК УчитыватьИсправлениеИсходногоДокумента,
		|	""--"" КАК НомерИсправления,
		|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаИсправления
		|ИЗ
		|	Документ.СчетФактураВыданный.Авансы КАК ТекущийСчетФактура
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЖурналУчетаСчетовФактур КАК ИсходныйСчетФактураРеквизиты
		|		ПО ТекущийСчетФактура.КорректируемыйСчетФактура = ИсходныйСчетФактураРеквизиты.СчетФактура
		|ГДЕ
		|	ТекущийСчетФактура.Ссылка = &Ссылка";
		
	КонецЕсли;
	
	КорректируемыеСчетаФактуры = Запрос.Выполнить().Выгрузить();
	
	Если РеквизитыСФ.Исправление Тогда 
		ДатаСФ = РеквизитыСФ.ДатаИсправляемогоКорректировочногоДокумента;
	Иначе
		ДатаСФ = РеквизитыСФ.Дата;
	КонецЕсли;
	
	СведенияОПокупателе = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ДанныеДляПечати.Покупатель, ДатаСФ);
	СведенияОПоставщике  = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ДанныеДляПечати.Поставщик, ДатаСФ);
	
	СведенияОПодразделенииПокупателя = Неопределено;
	Если ТипЗнч(ДанныеДляПечати.Покупатель) = Тип("СправочникСсылка.Контрагенты") И ЗначениеЗаполнено(ДанныеДляПечати.Покупатель) Тогда
		РеквизитыПокупателя = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(ДанныеДляПечати.Покупатель, "ГоловнойКонтрагент, ОбособленноеПодразделение");
		Если РеквизитыПокупателя.ОбособленноеПодразделение И ЗначениеЗаполнено(РеквизитыПокупателя.ГоловнойКонтрагент) Тогда
			СведенияОПокупателе = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(РеквизитыПокупателя.ГоловнойКонтрагент, ДатаСФ);
			СведенияОПодразделенииПокупателя = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ДанныеДляПечати.Покупатель, ДатаСФ);
		КонецЕсли;
	КонецЕсли;
	
	// Определяем макет
	Если УчетНДС.ПрименяетсяПостановление952(ДатаСФ) Тогда
		Если ДатаСФ < '20171001' Тогда
			Макет = ПолучитьОбщийМакет("КорректировочныйСчетФактура952");
		ИначеЕсли ДанныеДляПечати.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.КорректировочныйНаАванс Тогда
			Макет = ПолучитьОбщийМакет("КорректировочныйСчетФактура981Аванс");
		Иначе
			Макет = ПолучитьОбщийМакет("КорректировочныйСчетФактура981");
		КонецЕсли;
	Иначе
		Макет = ПолучитьОбщийМакет("КорректировочныйСчетФактура1137");
	КонецЕсли;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СчетФактураВыданный_КорректировочныйСчетФактура1137";
	
	// Выводим шапку
	ВедетсяУчетНДСПоФЗ56 = УчетНДС.ВедетсяУчетНДСПоФЗ56(ДатаСФ);
	
	Если ДатаСФ < '20171001' Тогда
		Если ВедетсяУчетНДСПоФЗ56 Тогда 
			ОбластьМакета = Макет.ПолучитьОбласть("ШапкаИнформация1137_625");
		Иначе
			ОбластьМакета = Макет.ПолучитьОбласть("ШапкаИнформация1137");
		КонецЕсли;
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЕсли;
	
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	
	ОбластьМакета.Параметры.Заполнить(ДанныеДляПечати);
	
	Если РеквизитыСФ.Исправление Тогда
		ОбластьМакета.Параметры.Номер = РеквизитыСФ.НомерИсправляемогоКорректировочногоДокумента;
		ОбластьМакета.Параметры.Дата  = Формат(РеквизитыСФ.ДатаИсправляемогоКорректировочногоДокумента, "ДФ='дд ММММ гггг'") + " г.";
	Иначе
		ОбластьМакета.Параметры.Номер = ОбщегоНазначения.ПолучитьНомерНаПечать(Ссылка);
		ОбластьМакета.Параметры.Дата  = Формат(РеквизитыСФ.Дата, "ДФ='дд ММММ гггг'") + " г.";
	КонецЕсли;
	
	РеквизитыОснований = "";
	Для Каждого РеквизитыСчетаФактуры Из КорректируемыеСчетаФактуры Цикл
		Если НЕ РеквизитыСчетаФактуры.УчитыватьИсправлениеИсходногоДокумента 
			ИЛИ РеквизитыСчетаФактуры.НомерИсправления = 0 Тогда
			НомерИсправленияСчетаФактуры = "--";
		Иначе
			НомерИсправленияСчетаФактуры = Формат(РеквизитыСчетаФактуры.НомерИсправления, "ЧЦ=3; ЧГ=0");
		КонецЕсли;
		РеквизитыОснований = РеквизитыОснований + ?(РеквизитыОснований = "", "", ", ") 
				+ "№ "+РеквизитыСчетаФактуры.НомерСчетаФактуры+" от "+Формат(РеквизитыСчетаФактуры.ДатаСчетаФактуры,"ДЛФ=ДД; ДП=--")+", с учетом исправления № "
				+НомерИсправленияСчетаФактуры+" от "+Формат(РеквизитыСчетаФактуры.ДатаИсправления, "ДЛФ=ДД; ДП=--");
		
	КонецЦикла;
	
	ОбластьМакета.Параметры.РеквизитыОснований = РеквизитыОснований;
	
	Если РеквизитыСФ.НомерИсправления = 0 
		ИЛИ НЕ РеквизитыСФ.Исправление Тогда
		ОбластьМакета.Параметры.НомерИсправленияКорректировочного = "--";
	Иначе
		ОбластьМакета.Параметры.НомерИсправленияКорректировочного = РеквизитыСФ.НомерИсправления;
	КонецЕсли;
	Если НЕ РеквизитыСФ.Исправление Тогда
		ОбластьМакета.Параметры.ДатаИсправленияКорректировочного = "--";
	Иначе
		ОбластьМакета.Параметры.ДатаИсправленияКорректировочного = Формат(РеквизитыСФ.Дата, "ДФ='дд ММММ гггг'") + " г.";
	КонецЕсли;
	
	ОбластьМакета.Параметры.НаименованиеПродавца = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(
		СведенияОПоставщике,  "ПолноеНаименование,");
	ОбластьМакета.Параметры.АдресПродавца = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(
		СведенияОПоставщике,  "ЮридическийАдрес,");

	ОбластьМакета.Параметры.НаименованиеПокупателя = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(
		СведенияОПокупателе, "ПолноеНаименование,");
	ОбластьМакета.Параметры.АдресПокупателя = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(
		СведенияОПокупателе, "ЮридическийАдрес,");
	
	КПП = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(СведенияОПоставщике, "КПП,", Ложь);
	Если ЗначениеЗаполнено(КПП) Тогда
		КПП = "/" + КПП;
	КонецЕсли;
	ОбластьМакета.Параметры.ИННКПППродавца = ""
		+ ФормированиеПечатныхФормСервер.ОписаниеОрганизации(СведенияОПоставщике, "ИНН,", Ложь) + КПП;
		
	Если ЗначениеЗаполнено(РеквизитыСФ.КППКонтрагента) Тогда
		КПП = РеквизитыСФ.КППКонтрагента;
	ИначеЕсли СведенияОПодразделенииПокупателя <> Неопределено Тогда
		КПП = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(СведенияОПодразделенииПокупателя, "КПП,", Ложь);
	Иначе
		КПП = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(СведенияОПокупателе, "КПП,", Ложь);
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(КПП) Тогда
		КПП = "/" + КПП;
	КонецЕсли;
	ОбластьМакета.Параметры.ИННКПППокупателя = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(
		СведенияОПокупателе, "ИНН,", Ложь) + КПП;
	
	ОбластьМакета.Параметры.Валюта = ?(ЗначениеЗаполнено(ДанныеДляПечати.Валюта), 
		"Валюта: наименование, код " + ДанныеДляПечати.Валюта.НаименованиеПолное + ", " + ДанныеДляПечати.Валюта.Код, 
		"Валюта: наименование, код");		
		
	ТабДокумент.Вывести(ОбластьМакета);
	
	Если ВедетсяУчетНДСПоФЗ56 Тогда 
		ОбластьМакета = Макет.ПолучитьОбласть("ИдентификаторГосКонтракта");
		Если РеквизитыСФ.Дата < '20171001' Тогда
		ШаблонЗаголовкаГосконтракт = НСтр("ru = 'Идентификатор государственного контракта, договора (соглашения): %1'");
	Иначе
		ШаблонЗаголовкаГосконтракт = НСтр("ru = 'Идентификатор государственного контракта, договора (соглашения) (при наличии): %1'");
		КонецЕсли;
		ОбластьМакета.Параметры.ИдентификаторГосКонтракта = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонЗаголовкаГосконтракт, РеквизитыСФ.ИдентификаторГосКонтракта);
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЕсли;
	
	ОбластьМакетаЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
	ТабДокумент.Вывести(ОбластьМакетаЗаголовокТаблицы);

	ОбластьМакета = Макет.ПолучитьОбласть("Строка");
		
	ОбластьМакетаИтого = Макет.ПолучитьОбласть("Итого");
	ОбластьМакетаПодвал = Макет.ПолучитьОбласть("Подвал");
	
	КоличествоСтрок = ДанныеДляПечати.ТабличнаяЧасть.Количество();
	НомерСтроки = 0;
	
	Для каждого СтрокаТабличнойЧасти Из ДанныеДляПечати.ТабличнаяЧасть Цикл 
		
		НомерСтроки = НомерСтроки + 1;
		
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.НаименованиеЕдиницыИзмерения) Тогда
			СтрокаТабличнойЧасти.КоличествоДоИзменения    = 0;
			СтрокаТабличнойЧасти.КоличествоПослеИзменения = 0;
			СтрокаТабличнойЧасти.ЦенаДоИзменения          = 0;
			СтрокаТабличнойЧасти.ЦенаПослеИзменения       = 0;
		Иначе
			Если СтрокаТабличнойЧасти.КоличествоДоИзменения = 0 Тогда
				СтрокаТабличнойЧасти.ЦенаДоИзменения = 0;
			ИначеЕсли СтрокаТабличнойЧасти.ЦенаДоИзменения = 0 Тогда
				СтрокаТабличнойЧасти.ЦенаДоИзменения = Окр(СтрокаТабличнойЧасти.СтоимостьБезНДСДоИзменения / СтрокаТабличнойЧасти.КоличествоДоИзменения, 2);
			КонецЕсли;
			Если СтрокаТабличнойЧасти.КоличествоПослеИзменения = 0 Тогда
				СтрокаТабличнойЧасти.ЦенаПослеИзменения = 0;
			ИначеЕсли СтрокаТабличнойЧасти.ЦенаПослеИзменения = 0 Тогда
				СтрокаТабличнойЧасти.ЦенаПослеИзменения = Окр(СтрокаТабличнойЧасти.СтоимостьБезНДСПослеИзменения / СтрокаТабличнойЧасти.КоличествоПослеИзменения, 2);
			КонецЕсли;
			Если СтрокаТабличнойЧасти.КоличествоДоИзменения = 0 
				И СтрокаТабличнойЧасти.КоличествоПослеИзменения = 0 Тогда
				СтрокаТабличнойЧасти.НаименованиеЕдиницыИзмерения = "";
			КонецЕсли;
		КонецЕсли;
		
		ОбластьМакета.Параметры.Заполнить(СтрокаТабличнойЧасти);
		
		Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.НаименованиеТовара) Тогда
			НаименованиеНоменклатуры = СтрокаТабличнойЧасти.НаименованиеТовара;
		ИначеЕсли ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) Тогда
			НаименованиеНоменклатуры = СтрокаТабличнойЧасти.Номенклатура;
		ИначеЕсли НаАванс Тогда 
			НаименованиеНоменклатуры = НСтр("ru='Предварительная оплата'"); 
		КонецЕсли;
		
		Если ДатаСФ >= '20160701' И ДатаСФ < '20171001'
		   И СтрокаТабличнойЧасти.СтавкаНДС = Перечисления.СтавкиНДС.НДС0
		   И ЗначениеЗаполнено(СтрокаТабличнойЧасти.ТоварКодТНВЭД) Тогда
			// Дополняем наименование товара информацией о коде ТН ВЭД
			НаименованиеНоменклатуры = НаименованиеНоменклатуры
				+ ", код ТН ВЭД " + СокрЛП(СтрокаТабличнойЧасти.ТоварКодТНВЭД);
		КонецЕсли; 
		
		ОбластьМакета.Параметры.НаименованиеНоменклатуры = НаименованиеНоменклатуры;
		
		Если НЕ ЗначениеЗаполнено(ОбластьМакета.Параметры.ЕдиницаИзмеренияКод) Тогда
			ОбластьМакета.Параметры.ЕдиницаИзмеренияКод = "--";
			ОбластьМакета.Параметры.НаименованиеЕдиницыИзмерения = "--";
		КонецЕсли;	
		
		Если ДатаСФ >= '20171001' Тогда
			Если НЕ ЗначениеЗаполнено(ОбластьМакета.Параметры.ТоварКодТНВЭД)
				ИЛИ СтрокаТабличнойЧасти.СтавкаНДС <> Перечисления.СтавкиНДС.НДС0 Тогда
				ОбластьМакета.Параметры.ТоварКодТНВЭД = "--";
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьМакета.Параметры.КоличествоДоИзменения) Тогда
			ОбластьМакета.Параметры.КоличествоДоИзменения = "--";
		КонецЕсли;	
		
		Если НЕ ЗначениеЗаполнено(ОбластьМакета.Параметры.КоличествоПослеИзменения) Тогда
			ОбластьМакета.Параметры.КоличествоПослеИзменения = "--";
		КонецЕсли;	
		       		
		Если НЕ ЗначениеЗаполнено(ОбластьМакета.Параметры.ЦенаДоИзменения) Тогда
			ОбластьМакета.Параметры.ЦенаДоИзменения = "--";
		КонецЕсли;	
		
		Если НЕ ЗначениеЗаполнено(ОбластьМакета.Параметры.ЦенаПослеИзменения) Тогда
			ОбластьМакета.Параметры.ЦенаПослеИзменения = "--";
		КонецЕсли;	
		
		Если ДанныеДляПечати.Дата >= Константы.ДатаНачалаОперацийСТоварамиОблагаемымиНДСУПокупателя.Получить()
			И ДанныеДляПечати.Ссылка.ДоговорКонтрагента.РеализацияТоваровОблагаемыхНДСУПокупателя Тогда
			РеализацияТоваровОблагаемыхНДСУПокупателя = Истина;
		Иначе
			РеализацияТоваровОблагаемыхНДСУПокупателя = Ложь;
		КонецЕсли;
		
		Если СтрокаТабличнойЧасти.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
			ОбластьМакета.Параметры.СтавкаНДС = "без НДС";
			ОбластьМакета.Параметры.СуммаНДСДоИзменения = "без НДС";
			ОбластьМакета.Параметры.СуммаНДСПослеИзменения = "без НДС";
			ОбластьМакета.Параметры.РазницаНДСУвеличение = "--";
			ОбластьМакета.Параметры.РазницаНДСУменьшение = "--";
		ИначеЕсли РеализацияТоваровОблагаемыхНДСУПокупателя Тогда
			ОбластьМакета.Параметры.СтавкаНДС = "НДС исчисляется налоговым агентом";
			ОбластьМакета.Параметры.СуммаНДСДоИзменения = "--";
			ОбластьМакета.Параметры.СуммаНДСПослеИзменения = "--";
			ОбластьМакета.Параметры.РазницаНДСУвеличение = "--";
			ОбластьМакета.Параметры.РазницаНДСУменьшение = "--";
			ОбластьМакета.Параметры.СтоимостьСНДСДоИзменения = "--";
			ОбластьМакета.Параметры.СтоимостьСНДСПослеИзменения = "--";
			ОбластьМакета.Параметры.РазницаСНДСУвеличение = "--";
			ОбластьМакета.Параметры.РазницаСНДСУменьшение = "--";
		КонецЕсли;
		
		// Проверим возможность вывода табличного документа
		СтрокаСПодвалом = Новый Массив;
		СтрокаСПодвалом.Добавить(ОбластьМакета);
		
		Если НомерСтроки = КоличествоСтрок Тогда
			// Если последняя строка, то должен поместится итог и подвал
			СтрокаСПодвалом.Добавить(ОбластьМакетаИтого);
			СтрокаСПодвалом.Добавить(ОбластьМакетаПодвал);
		КонецЕсли;
						
		Если НЕ ФормированиеПечатныхФормСервер.ПроверитьВыводТабличногоДокумента(ТабДокумент, СтрокаСПодвалом) Тогда
			
			Если КоличествоСтрок > 0 Тогда
				// Вывод разделителя и заголовка таблицы на новой странице
				ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				ТабДокумент.Вывести(ОбластьМакетаЗаголовокТаблицы);
			КонецЕсли;
			
		КонецЕсли;
		
		ТабДокумент.Вывести(ОбластьМакета);
				
	КонецЦикла;
	
	ОбластьМакетаИтого.Параметры.РазницаБезНДСУменьшение = ДанныеДляПечати.ТабличнаяЧасть.Итог("РазницаБезНДСУменьшение");
	ОбластьМакетаИтого.Параметры.РазницаБезНДСУвеличение = ДанныеДляПечати.ТабличнаяЧасть.Итог("РазницаБезНДСУвеличение");
	ОбластьМакетаИтого.Параметры.РазницаСНДСУменьшение   = ДанныеДляПечати.ТабличнаяЧасть.Итог("РазницаСНДСУменьшение");
	ОбластьМакетаИтого.Параметры.РазницаСНДСУвеличение   = ДанныеДляПечати.ТабличнаяЧасть.Итог("РазницаСНДСУвеличение");
	
	Если РеализацияТоваровОблагаемыхНДСУПокупателя Тогда
		ОбластьМакетаИтого.Параметры.РазницаНДСУменьшение  = "--";
		ОбластьМакетаИтого.Параметры.РазницаНДСУвеличение  = "--";
		ОбластьМакетаИтого.Параметры.РазницаСНДСУменьшение = "--";
		ОбластьМакетаИтого.Параметры.РазницаСНДСУвеличение = "--";
	ИначеЕсли РеквизитыСФ.СчетФактураБезНДС Тогда
		ОбластьМакетаИтого.Параметры.РазницаНДСУменьшение = "без НДС";
		ОбластьМакетаИтого.Параметры.РазницаНДСУвеличение = "без НДС";
	Иначе
		ОбластьМакетаИтого.Параметры.РазницаНДСУменьшение = ДанныеДляПечати.ТабличнаяЧасть.Итог("РазницаНДСУменьшение");
		ОбластьМакетаИтого.Параметры.РазницаНДСУвеличение = ДанныеДляПечати.ТабличнаяЧасть.Итог("РазницаНДСУвеличение");
	КонецЕсли;
    	
	ТабДокумент.Вывести(ОбластьМакетаИтого);
	
	ОбластьМакетаПодвал.Параметры.Заполнить(ДанныеДляПечати);	
	ОбластьМакетаПодвал.Параметры.Свидетельство = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(СведенияОПоставщике, "Свидетельство,");
	ТабДокумент.Вывести(ОбластьМакетаПодвал);

КонецПроцедуры

Процедура ПечатьСчетаФактуры914(Ссылка, ТабДокумент)

	Если Ссылка.Дата < '20040216' Тогда
		Макет = ПолучитьОбщийМакет("СчетФактура575");
		ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СчетФактураВыданный_СчетФактура575";
	ИначеЕсли Ссылка.Дата < '20060530' Тогда
		Макет = ПолучитьОбщийМакет("СчетФактура84");
		ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СчетФактураВыданный_СчетФактура84";
	ИначеЕсли Ссылка.Дата < '20090609' Тогда
		Макет = ПолучитьОбщийМакет("СчетФактура283");
		ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СчетФактураВыданный_СчетФактура283";
	Иначе
		Макет = ПолучитьОбщийМакет("СчетФактура451");
		ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СчетФактураВыданный_СчетФактура451";
	КонецЕсли;

	ДанныеДляПечати = Неопределено;
	УчетнаяПолитика = Неопределено;
	
	УчетНДС.СобратьДанныеДляПечатиСчетФактурыВыданного(Ссылка, ДанныеДляПечати, УчетнаяПолитика);
	
	Если ТипЗнч(ДанныеДляПечати) = Тип("Соответствие") Тогда
		Возврат;
	ИначеЕсли ДанныеДляПечати = Неопределено Тогда
		Возврат;
	КонецЕсли;

	СведенияОПокупателе = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ДанныеДляПечати.Покупатель, Ссылка.Дата);
	СведенияОПоставщике  = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ДанныеДляПечати.Поставщик, Ссылка.Дата);
	СведенияОГрузоотправителе = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(
		?(ДанныеДляПечати.Грузоотправитель = "он же", Неопределено, ДанныеДляПечати.Грузоотправитель), Ссылка.Дата);
	СведенияОГрузополучателе  = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ДанныеДляПечати.Грузополучатель, Ссылка.Дата);

	Если ДанныеДляПечати.Свойство("АдресДоставки") 
		И Не ПустаяСтрока(ДанныеДляПечати.АдресДоставки) Тогда
		ПредставлениеГрузополучателя = ?(Не ЗначениеЗаполнено(ДанныеДляПечати.Грузополучатель), 
			ДанныеДляПечати.АдресДоставки,
			ФормированиеПечатныхФормСервер.ОписаниеОрганизации(СведенияОГрузополучателе, "ПолноеНаименование") 
			+ ", " + ДанныеДляПечати.АдресДоставки);

	Иначе
		ПредставлениеГрузополучателя = ?(Не ЗначениеЗаполнено(ДанныеДляПечати.Грузополучатель), 
			"",
			ФормированиеПечатныхФормСервер.ОписаниеОрганизации(
				СведенияОГрузополучателе, "ПолноеНаименование, ФактическийАдрес,"));
	КонецЕсли;
	
	ВыборкаПоТоварам = ДанныеДляПечати.ТабличнаяЧасть.Скопировать();

	Если ВыборкаПоТоварам.Количество() > 0 Тогда
		ТолькоУслуги = Истина;
		Для Каждого СтрокаТовар Из ВыборкаПоТоварам Цикл
			Если (ТипЗнч(СтрокаТовар.Товар) = Тип("СправочникСсылка.Номенклатура")
			   И Не СтрокаТовар.Товар.Услуга)
			   ИЛИ ТипЗнч(СтрокаТовар.Товар) = Тип("СправочникСсылка.ОсновныеСредства") Тогда
				ТолькоУслуги = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	Иначе
		ТолькоУслуги = Ложь;
	КонецЕсли;

	ЗаголовокДляПечати = ОбщегоНазначения.СформироватьЗаголовокДокумента(ДанныеДляПечати, "Счет-фактура") + " г.";
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ОбластьМакета.Параметры.Заполнить(ДанныеДляПечати);
	ОбластьМакета.Параметры.Номер = ЗаголовокДляПечати;
	
	ДатаНачалаУказанияСокращенногоНаименованияПродавцаВСчетеФактуре = глЗначениеПеременной("ДатаНачалаУказанияСокращенногоНаименованияПродавцаВСчетеФактуре");
	Если ДатаНачалаУказанияСокращенногоНаименованияПродавцаВСчетеФактуре <> '00010101'
		И ДатаНачалаУказанияСокращенногоНаименованияПродавцаВСчетеФактуре <= Ссылка.Дата 
		И Не Ссылка.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НалоговыйАгент Тогда
		ОбластьМакета.Параметры.ПредставлениеПоставщика = "Продавец: " 
			+ ФормированиеПечатныхФормСервер.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,") 
			+ " (" + ФормированиеПечатныхФормСервер.ОписаниеОрганизации(СведенияОПоставщике, "НаименованиеСокращенное,") + ")";
	Иначе
		ОбластьМакета.Параметры.ПредставлениеПоставщика = "Продавец: " 
			+ ФормированиеПечатныхФормСервер.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,");
	КонецЕсли;

	ОбластьМакета.Параметры.АдресПоставщика = "Адрес: " 
		+ ФормированиеПечатныхФормСервер.ОписаниеОрганизации(СведенияОПоставщике, "ЮридическийАдрес,");
	
	Строка_ПоДокументу = "";
	Для Каждого ПараметрыДокументаОплаты Из ДанныеДляПечати.ТаблицаДатОплат Цикл
		Строка_ПоДокументу = Строка_ПоДокументу 
			+ ?(ПустаяСтрока(Строка_ПоДокументу), "К платежно-расчетному документу № ",", ")
			+ ПараметрыДокументаОплаты.НомерПлатежноРасчетногоДокумента 
			+ " от " + Формат(ПараметрыДокументаОплаты.ДатаПлатежноРасчетногоДокумента, "ДФ=dd.MM.yyyy");
	КонецЦикла; 
	Если ПустаяСтрока(Строка_ПоДокументу) Тогда
		Строка_ПоДокументу = "К платежно-расчетному документу № -- от --"
	КонецЕсли; 
	ОбластьМакета.Параметры.ПоДокументу = Строка_ПоДокументу;
	
	ОбластьМакета.Параметры.ПредставлениеПокупателя = "Покупатель: " 
		+ ФормированиеПечатныхФормСервер.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование,");
	ОбластьМакета.Параметры.АдресПокупателя = "Адрес: " 
		+ ФормированиеПечатныхФормСервер.ОписаниеОрганизации(СведенияОПокупателе, "ЮридическийАдрес,");
	
	Если ТолькоУслуги Тогда
		ОбластьМакета.Параметры.ПредставлениеГрузоотправителя = "Грузоотправитель и его адрес: " + "--";
		ОбластьМакета.Параметры.ПредставлениеГрузополучателя  = "Грузополучатель и его адрес: "  + "--";
	Иначе
		ОбластьМакета.Параметры.ПредставлениеГрузоотправителя = "Грузоотправитель и его адрес: " 
			+ ?(НЕ ЗначениеЗаполнено(ДанныеДляПечати.Грузоотправитель), 
			"", 
			?(ДанныеДляПечати.Грузоотправитель = "он же", 
			ДанныеДляПечати.Грузоотправитель, 
			ФормированиеПечатныхФормСервер.ОписаниеОрганизации(
				СведенияОГрузоотправителе,  "ПолноеНаименование,ФактическийАдрес,")));
		ОбластьМакета.Параметры.ПредставлениеГрузополучателя  = "Грузополучатель и его адрес: " + ПредставлениеГрузополучателя;
	КонецЕсли;

	Если Ссылка.Дата < '20040216' Тогда
		ОбластьМакета.Параметры.ИННпоставщика = "Идентификационный номер продавца (ИНН): "
			+ ФормированиеПечатныхФормСервер.ОписаниеОрганизации(СведенияОПоставщике,  "ИНН,", Ложь); 
		ОбластьМакета.Параметры.ИННПокупателя = "Идентификационный номер покупателя (ИНН): " 
			+ ФормированиеПечатныхФормСервер.ОписаниеОрганизации(СведенияОПокупателе, "ИНН,", Ложь);
	Иначе
		КПП = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(СведенияОПоставщике, "КПП,", Ложь);
		Если ЗначениеЗаполнено(КПП) Тогда
			КПП = "/" + КПП;
		КонецЕсли;
		ОбластьМакета.Параметры.ИННпоставщика = "ИНН/КПП продавца: "
			+ ФормированиеПечатныхФормСервер.ОписаниеОрганизации(СведенияОПоставщике, "ИНН,", Ложь) + КПП;
		
		Если не ТолькоУслуги 
			и ЗначениеЗаполнено(ДанныеДляПечати.Грузополучатель) 
			и не ДанныеДляПечати.Грузополучатель = ДанныеДляПечати.Покупатель
			и ДанныеДляПечати.Грузополучатель.ГоловнойКонтрагент = ДанныеДляПечати.Покупатель
			Тогда
			КПП = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(СведенияОГрузополучателе, "КПП,", Ложь);
			Если не ЗначениеЗаполнено(КПП) Тогда
				КПП = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(СведенияОПокупателе, "КПП,", Ложь);
			КонецЕсли;
		Иначе
			КПП = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(СведенияОПокупателе, "КПП,", Ложь);
		КонецЕсли; 
		
		Если ЗначениеЗаполнено(КПП) Тогда
			КПП = "/" + КПП;
		КонецЕсли;
		ОбластьМакета.Параметры.ИННПокупателя = "ИНН/КПП покупателя: "
			+ ФормированиеПечатныхФормСервер.ОписаниеОрганизации(СведенияОПокупателе, "ИНН,", Ложь) + КПП;
	КонецЕсли;

	ПроставитьПрочеркиВПустыеПоля(ОбластьМакета);
	ТабДокумент.Вывести(ОбластьМакета);

	// Вывод заголовка таблицы
	ОбластьМакетаЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
	ОбластьМакетаЗаголовокТаблицы.Параметры.Заполнить(ДанныеДляПечати);
	ТабДокумент.Вывести(ОбластьМакетаЗаголовокТаблицы);

	// Вывод строк таблицы
	ОбластьМакета 		= Макет.ПолучитьОбласть("Строка");
	ОбластьМакетаИтого 	= Макет.ПолучитьОбласть("Итого");
	ОбластьМакетаПодвал = Макет.ПолучитьОбласть("Подвал");

	ИтогоСуммаНДС = 0;
	ИтогоВсего    = 0;

	ВыборкаСтрокТовары = ДанныеДляПечати.ТабличнаяЧасть;
	ВыборкаСтрокТовары.Колонки.Добавить("СуммаБезНДС");
	ВыборкаСтрокТовары.Колонки.Добавить("СуммаСНДС");
	
	Для Каждого Строчка Из ВыборкаСтрокТовары Цикл
		
		Строчка.СуммаСНДС = Строчка.Сумма + ?(Строчка.СуммаВключаетНДС, 0, Строчка.СуммаНДС);
        Строчка.СуммаБезНДС = Строчка.СуммаСНДС - Строчка.СуммаНДС;
		
		Если Ссылка.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию И 
			(Строчка.СтавкаНДС = Перечисления.СтавкиНДС.НДС20_120
		 	ИЛИ Строчка.СтавкаНДС = Перечисления.СтавкиНДС.НДС18_118
		 	ИЛИ Строчка.СтавкаНДС = Перечисления.СтавкиНДС.НДС10_110) Тогда
			Если (НЕ Строчка.СуммаВключаетНДС) ИЛИ Строчка.Цена = 0 Тогда
				Строчка.Цена = Окр(Строчка.СуммаСНДС / Строчка.Количество, 2);
			КонецЕсли;
		Иначе
			Если Строчка.СуммаВключаетНДС Тогда
				Строчка.Цена = 0;
			КонецЕсли;
		КонецЕсли;
		
		Если Строчка.Цена = 0 Тогда
			Строчка.Цена = ?(Строчка.Количество = 0, 0, Строчка.СуммаБезНДС / Строчка.Количество);
		КонецЕсли;
		
	КонецЦикла;
	
	ВыборкаСтрокТовары.Свернуть("Товар, ТоварНаименование, СтранаПроисхождения, ПредставлениеСтраны,
		|НомерГТД, ПредставлениеГТД, ЕдиницаИзмерения, Цена, СтавкаНДС", 
		"Количество, Сумма, СуммаНДС, СуммаСНДС, СуммаБезНДС");
		
	НомерСтроки     = 0;
	КоличествоСтрок = ВыборкаСтрокТовары.Количество();
		
	Для Каждого Строчка Из ВыборкаСтрокТовары Цикл
		
		НомерСтроки = НомерСтроки + 1;
		
		ОбластьМакета.Параметры.Заполнить(Строчка);

		Если Не ЗначениеЗаполнено(Строчка.ТоварНаименование) Тогда
			ОбластьМакета.Параметры.ТоварНаименование = Строчка.Товар;
		КонецЕсли;
		ОбластьМакета.Параметры.ТоварНаименование = СокрЛП(ОбластьМакета.Параметры.ТоварНаименование);
		
		Если Строка(Строчка.ПредставлениеСтраны) = "Россия" 
			Или Строка(Строчка.ПредставлениеСтраны) = "Российская Федерация"
			Или Строчка.СтранаПроисхождения = Справочники.КлассификаторСтранМира.РОССИЯ Тогда			
			ОбластьМакета.Параметры.ПредставлениеСтраны  = "--";
		КонецЕсли; 
	
		ОчищатьКоличество = Неопределено;
		ОчищатьКоличество = ?(ДанныеДляПечати.Свойство("ОчищатьКоличество", ОчищатьКоличество), 
			ОчищатьКоличество, Истина);
		
		Если ОчищатьКоличество И ТипЗнч(ОбластьМакета.Параметры.Товар) <> Тип("СправочникСсылка.ОсновныеСредства") 
			И (ОбластьМакета.Параметры.ЕдиницаИзмерения = "--" 
			Или Не ЗначениеЗаполнено(ОбластьМакета.Параметры.ЕдиницаИзмерения)) Тогда
			Строчка.Количество = 0;
		КонецЕсли;
		
		Если Ссылка.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАванс 
			ИЛИ Ссылка.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитента
			Или Ссылка.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаСуммовуюРазницу 
			Или Ссылка.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НалоговыйАгент
			Тогда
			Если Ссылка.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НалоговыйАгент Тогда
				ОбластьМакета.Параметры.Стоимость  = Строчка.СуммаБезНДС;
			Иначе
				// В счетах-фактурах на аванс колонка 5 не выводится
				ОбластьМакета.Параметры.Стоимость  = 0;
			КонецЕсли;
			ОбластьМакета.Параметры.Количество = 0;
			ОбластьМакета.Параметры.Цена       = 0;
		Иначе
			ОбластьМакета.Параметры.Стоимость  = Строчка.СуммаБезНДС;
			ОбластьМакета.Параметры.Цена   = Строчка.Цена;
		КонецЕсли;	
			
		ОбластьМакета.Параметры.Всего      = Строчка.СуммаСНДС;
		ОбластьМакета.Параметры.СтавкаНДС  = Строчка.СтавкаНДС;

		ИтогоСуммаНДС = ИтогоСуммаНДС + Строчка.СуммаНДС;
		ИтогоВсего    = ИтогоВсего    + Строчка.СуммаСНДС;

		ПроставитьПрочеркиВПустыеПоля(ОбластьМакета);
		
		// Проверим возможность вывода табличного документа
		СтрокаСПодвалом = Новый Массив;
		СтрокаСПодвалом.Добавить(ОбластьМакета);
		Если НомерСтроки = КоличествоСтрок Тогда
			// Если последняя строка, то должен поместится итог и подвал
			СтрокаСПодвалом.Добавить(ОбластьМакетаИтого);
			СтрокаСПодвалом.Добавить(ОбластьМакетаПодвал);
		КонецЕсли;
						
		Если НЕ ФормированиеПечатныхФормСервер.ПроверитьВыводТабличногоДокумента(ТабДокумент, СтрокаСПодвалом) Тогда
			
			Если КоличествоСтрок > 0 Тогда
				// Вывод разделителя и заголовка таблицы на новой странице
				ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				ТабДокумент.Вывести(ОбластьМакетаЗаголовокТаблицы);
			КонецЕсли;
			
		КонецЕсли;

		ТабДокумент.Вывести(ОбластьМакета);
		
	КонецЦикла;

	Если ВыборкаСтрокТовары.Количество()>0 Тогда
		ТабДокумент.Область(ТабДокумент.ВысотаТаблицы,,ТабДокумент.ВысотаТаблицы,).ВместеСоСледующим = Истина;
	КонецЕсли; 

	// Вывод строки Итого
	ОбластьМакетаИтого.Параметры.ИтогоСуммаНДС = ИтогоСуммаНДС;
	ОбластьМакетаИтого.Параметры.ИтогоВсего    = ИтогоВСего;
	
	ПроставитьПрочеркиВПустыеПоля(ОбластьМакетаИтого);
	ТабДокумент.Вывести(ОбластьМакетаИтого);

	// Вывод подвала
	ОбластьМакетаПодвал.Параметры.Заполнить(ДанныеДляПечати);
	Если не Ссылка.Дата < '20040216' Тогда
		Если Ссылка.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НалоговыйАгент Тогда
			ОбластьМакетаПодвал.Параметры.Свидетельство = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(
				СведенияОПокупателе, "Свидетельство,");
		Иначе
			ОбластьМакетаПодвал.Параметры.Свидетельство = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(
				СведенияОПоставщике, "Свидетельство,");
		КонецЕсли;
	КонецЕсли; 
	
	ТабДокумент.Вывести(ОбластьМакетаПодвал);

КонецПроцедуры

Процедура ПечатьКорректировочногоСчетаФактуры(Ссылка, ТабДокумент)

	Макет = ПолучитьОбщийМакет("КорректировочныйСчетФактура");
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СчетФактураВыданный_КорректировочныйСчетФактура";

	ДанныеДляПечати = Неопределено;
	УчетнаяПолитика = Неопределено;
	
	УчетНДС.СобратьДанныеДляПечатиСчетФактурыВыданного(Ссылка, ДанныеДляПечати, УчетнаяПолитика);
	
	Если ТипЗнч(ДанныеДляПечати) = Тип("Соответствие") Тогда
		Возврат;
	ИначеЕсли ДанныеДляПечати = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Параметры.Вставить("Ссылка", Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СчетФактураВыданный.Номер,
	|	СчетФактураВыданный.Дата,
	|	ЕСТЬNULL(СчетФактураВыданныйДокументыОснования.НомерИсходногоДокумента, """") КАК НомерИсходногоДокумента,
	|	ЕСТЬNULL(СчетФактураВыданныйДокументыОснования.ДатаИсходногоДокумента, """") КАК ДатаИсходногоДокумента
	|ИЗ
	|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураВыданныйДокументыОснования
	|		ПО СчетФактураВыданный.Ссылка = СчетФактураВыданныйДокументыОснования.Ссылка
	|			И (СчетФактураВыданныйДокументыОснования.НомерСтроки = 1)
	|ГДЕ
	|	СчетФактураВыданный.Ссылка = &Ссылка";
	Выборка = Запрос.Выполнить().Выбрать();
	РеквизитыСФ = Новый Структура("Номер,Дата,НомерИсходногоДокумента,ДатаИсходногоДокумента");
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(РеквизитыСФ, Выборка);
	КонецЕсли;
	
	СведенияОПокупателе = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ДанныеДляПечати.Покупатель, РеквизитыСФ.Дата);
	СведенияОПоставщике = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ДанныеДляПечати.Поставщик, РеквизитыСФ.Дата);
	
	// Выводим шапку
	
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	
	ОбластьМакета.Параметры.Заполнить(ДанныеДляПечати);
	
	ОбластьМакета.Параметры.Номер = ОбщегоНазначения.ПолучитьНомерНаПечать(Ссылка);
	ОбластьМакета.Параметры.Дата  = Формат(РеквизитыСФ.Дата, "ДФ='дд ММММ гггг'") + " г.";
	
	ОбластьМакета.Параметры.НомерСчетаФактуры = РеквизитыСФ.НомерИсходногоДокумента;
	ОбластьМакета.Параметры.ДатаСчетаФактуры  = Формат(РеквизитыСФ.ДатаИсходногоДокумента, "ДФ='дд ММММ гггг'") + " г.";
	
	ОбластьМакета.Параметры.НаименованиеПродавца = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(
		СведенияОПоставщике,  "ПолноеНаименование,");
	ОбластьМакета.Параметры.АдресПродавца = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(
		СведенияОПоставщике,  "ЮридическийАдрес,");

	ОбластьМакета.Параметры.НаименованиеПокупателя = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(
		СведенияОПокупателе, "ПолноеНаименование,");
	ОбластьМакета.Параметры.АдресПокупателя = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(
		СведенияОПокупателе, "ЮридическийАдрес,");
	
	КПП = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(СведенияОПоставщике, "КПП,", Ложь);
	Если ЗначениеЗаполнено(КПП) Тогда
		КПП = "/" + КПП;
	КонецЕсли;
	ОбластьМакета.Параметры.ИННКПППродавца = ""
		+ ФормированиеПечатныхФормСервер.ОписаниеОрганизации(СведенияОПоставщике, "ИНН,", Ложь) + КПП;
	
	КПП = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(СведенияОПокупателе, "КПП,", Ложь);
	Если ЗначениеЗаполнено(КПП) Тогда
		КПП = "/" + КПП;
	КонецЕсли;
	ОбластьМакета.Параметры.ИННКПППокупателя = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(
		СведенияОПокупателе, "ИНН,", Ложь) + КПП;
	
	ТабДокумент.Вывести(ОбластьМакета);
	
	// Вывод заголовка таблицы
	ОбластьМакетаЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
	ТабДокумент.Вывести(ОбластьМакетаЗаголовокТаблицы);

	// Вывод строк таблицы
	ОбластьМакета 		= Макет.ПолучитьОбласть("Строка");
	ОбластьМакетаИтого 	= Макет.ПолучитьОбласть("Итого");
	ОбластьМакетаПодвал = Макет.ПолучитьОбласть("Подвал");
	
	НомерСтроки     = 0;
	КоличествоСтрок = ДанныеДляПечати.ТабличнаяЧасть.Количество();
	
	Для Каждого СтрокаТабличнойЧасти Из ДанныеДляПечати.ТабличнаяЧасть Цикл 
		
		НомерСтроки = НомерСтроки + 1;
		
		ОбластьМакета.Параметры.Заполнить(СтрокаТабличнойЧасти);
		Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.НаименованиеТовара) Тогда
			ОбластьМакета.Параметры.НаименованиеНоменклатуры = СтрокаТабличнойЧасти.НаименованиеТовара;               
		Иначе
			ОбластьМакета.Параметры.НаименованиеНоменклатуры = СтрокаТабличнойЧасти.Номенклатура;               
		КонецЕсли;	
		
		Если СтрокаТабличнойЧасти.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
			ОбластьМакета.Параметры.СтавкаНДС = "Без налога (НДС)";
		КонецЕсли;
		
		// Проверим возможность вывода табличного документа
		СтрокаСПодвалом = Новый Массив;
		СтрокаСПодвалом.Добавить(ОбластьМакета);
		Если НомерСтроки = КоличествоСтрок Тогда
			// Если последняя строка, то должен поместится итог и подвал
			СтрокаСПодвалом.Добавить(ОбластьМакетаИтого);
			СтрокаСПодвалом.Добавить(ОбластьМакетаПодвал);
		КонецЕсли;
						
		Если НЕ ФормированиеПечатныхФормСервер.ПроверитьВыводТабличногоДокумента(ТабДокумент, СтрокаСПодвалом) Тогда
			
			Если КоличествоСтрок > 0 Тогда
				// Вывод разделителя и заголовка таблицы на новой странице
				ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				ТабДокумент.Вывести(ОбластьМакетаЗаголовокТаблицы);
			КонецЕсли;
			
		КонецЕсли;
		
		ТабДокумент.Вывести(ОбластьМакета);
		
	КонецЦикла;	
	
	// Вывод строки Итого
	ОбластьМакетаИтого.Параметры.РазницаБезНДСУменьшение = ДанныеДляПечати.ТабличнаяЧасть.Итог("РазницаБезНДСУменьшение");
	ОбластьМакетаИтого.Параметры.РазницаБезНДСУвеличение = ДанныеДляПечати.ТабличнаяЧасть.Итог("РазницаБезНДСУвеличение");
	ОбластьМакетаИтого.Параметры.РазницаСНДСУменьшение   = ДанныеДляПечати.ТабличнаяЧасть.Итог("РазницаСНДСУменьшение");
	ОбластьМакетаИтого.Параметры.РазницаСНДСУвеличение   = ДанныеДляПечати.ТабличнаяЧасть.Итог("РазницаСНДСУвеличение");
	ОбластьМакетаИтого.Параметры.РазницаНДСУменьшение    = ДанныеДляПечати.ТабличнаяЧасть.Итог("РазницаНДСУменьшение");
	ОбластьМакетаИтого.Параметры.РазницаНДСУвеличение    = ДанныеДляПечати.ТабличнаяЧасть.Итог("РазницаНДСУвеличение");
    	
	ТабДокумент.Вывести(ОбластьМакетаИтого);
	
	//Вывод подвала
	ОбластьМакетаПодвал.Параметры.Заполнить(ДанныеДляПечати);
	ТабДокумент.Вывести(ОбластьМакетаПодвал);

КонецПроцедуры

Функция ПечатьУниверсальныхПередаточныхДокументов(МассивОбъектов, ОбъектыПечати)
	
	ТабДокумент = Новый ТабличныйДокумент;
	
	// Устанавливаем параметры печати и колонтитулы
	ТабДокумент.ОриентацияСтраницы 	= ОриентацияСтраницы.Ландшафт;
	ТабДокумент.ПолеСверху 			= 12;
	ТабДокумент.ПолеСлева  			= 0;
	ТабДокумент.ПолеСнизу  			= 0;
	ТабДокумент.ПолеСправа 			= 0;
	ТабДокумент.АвтоМасштаб 		= Истина;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_УниверсальныйПередаточныйДокумент";
	
	ПервыйДокумент 		  = Истина;
	ВыводитьКолонтитул 	  = МассивОбъектов.Количество() = 1;
	НапечатеноДокументов  = 0;
	ТекстСообщения		  = "";
	
	Для каждого Ссылка Из МассивОбъектов Цикл
		
		Если Не ПервыйДокумент Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;
		
		РеквизитыСФ = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(Ссылка, "Ссылка, ПометкаУдаления, Дата, ВидСчетаФактуры, 
			|Исправление, НомерИсправления,	ДоговорКонтрагента, СчетФактураБезНДС, ДокументОснование, КППКонтрагента, ИдентификаторГосКонтракта");
			
		Если РеквизитыСФ.Дата < '20130101' Тогда
			ТекстСообщения = НСтр("ru = 'Применение формы универсального передаточного документа возможно только с 01 января 2013 года'");
			Продолжить;
		КонецЕсли;
		
		Если РеквизитыСФ.ПометкаУдаления Тогда
			ТекстСообщения = НСтр("ru = 'Форма универсального передаточного документа не предназначена для помеченных на удаление документов'");
			Продолжить;
		КонецЕсли;
		
		Если РеквизитыСФ.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАванс
		 ИЛИ РеквизитыСФ.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.КорректировочныйНаАванс
		 ИЛИ РеквизитыСФ.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитента Тогда
			ТекстСообщения = "Форма универсального передаточного документа не применяется для счетов-фактур на аванс";
			Продолжить;
		КонецЕсли;

		Если РеквизитыСФ.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НалоговыйАгент Тогда
			ТекстСообщения = "Форма универсального передаточного документа не применяется при исполнении обязанностей налогового агента";
			Продолжить;
		КонецЕсли;
		
		Если РеквизитыСФ.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный Тогда
			ТекстСообщения = НСтр("ru = 'Форма универсального передаточного документа не применяется для корректировочных счетов-фактур'");
			Продолжить;
		КонецЕсли;
		
		Если РеквизитыСФ.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаСуммовуюРазницу Тогда
			ТекстСообщения = НСтр("ru = 'Форма универсального передаточного документа не применяется для счетов-фактур на суммовые разницы'");
			Продолжить;
		КонецЕсли;
		
		ДанныеДляПечати = ПодготовитьДанныеДляПечатиУниверсальногоПередаточногоДокумента(РеквизитыСФ);
		Если ДанныеДляПечати = Неопределено Тогда
			Продолжить;
		КонецЕсли;

		ПечатьУниверсальногоПередаточногоДокумента(ДанныеДляПечати, ТабДокумент);
		
		ТабДокумент.ВерхнийКолонтитул.Выводить = ВыводитьКолонтитул;
	
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент, НомерСтрокиНачало, ОбъектыПечати, Ссылка);
		
		НапечатеноДокументов = НапечатеноДокументов + 1;
		
	КонецЦикла;
	
	Если НапечатеноДокументов = 0 Тогда
		Если ЗначениеЗаполнено(ТекстСообщения) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		Макет = ПолучитьОбщийМакет("УниверсальныйПередаточныйДокумент");
		ОбластьМакета = Макет.ПолучитьОбласть("Ошибка");
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЕсли;
	
	Возврат ТабДокумент;
	
КонецФункции

Функция ПечатьУниверсальныхКорректировочныхДокументов(МассивОбъектов, ОбъектыПечати)
	
	ТабДокумент = Новый ТабличныйДокумент;
	
	// Устанавливаем параметры печати и колонтитулы
	ТабДокумент.ОриентацияСтраницы 	= ОриентацияСтраницы.Ландшафт;
	ТабДокумент.ПолеСверху 			= 12;
	ТабДокумент.ПолеСлева  			= 0;
	ТабДокумент.ПолеСнизу  			= 0;
	ТабДокумент.ПолеСправа 			= 0;
	ТабДокумент.АвтоМасштаб 		= Истина;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_УниверсальныйКорректировочныйДокумент";
	
	ПервыйДокумент 		  = Истина;
	ВыводитьКолонтитул 	  = МассивОбъектов.Количество() = 1;
	НапечатеноДокументов  = 0;
	ТекстСообщения		  = "";
	
	Для каждого Ссылка Из МассивОбъектов Цикл
		
		Если Не ПервыйДокумент Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;
				
		РеквизитыСФ = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(Ссылка, "ПометкаУдаления, Дата, ВидСчетаФактуры");		
		
		Если РеквизитыСФ.Дата < '20130101' Тогда
			ТекстСообщения = "Применение формы универсального корректировочного документа возможно только с 01 января 2013 года";
			Продолжить;
		КонецЕсли;
		
		Если РеквизитыСФ.ПометкаУдаления Тогда
			ТекстСообщения = "Форма универсального корректировочного документа не предназначена для помеченных на удаление документов";
			Продолжить;
		КонецЕсли;
		
		Если РеквизитыСФ.ВидСчетаФактуры <> Перечисления.ВидСчетаФактурыВыставленного.Корректировочный Тогда
			ТекстСообщения = "Форма универсального корректировочного документа применяется только для корректировочных счетов-фактур";
			Продолжить;
		КонецЕсли;
		
		ДанныеДляПечати = ПодготовитьДанныеДляПечатиУниверсальногоКорректировочногоДокумента(Ссылка);
		
		Если ДанныеДляПечати = Неопределено Тогда
			Продолжить;
		КонецЕсли;		

		ПечатьУниверсальногоКорректировочногоДокумента(ДанныеДляПечати,ТабДокумент);
		
		ТабДокумент.ВерхнийКолонтитул.Выводить = ВыводитьКолонтитул;
	
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент, НомерСтрокиНачало, ОбъектыПечати, Ссылка);
		
		НапечатеноДокументов = НапечатеноДокументов + 1;
		
	КонецЦикла;
	
	Если НапечатеноДокументов = 0 Тогда
		Если ЗначениеЗаполнено(ТекстСообщения) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		Макет = ПолучитьОбщийМакет("УниверсальныйПередаточныйДокумент");
		ОбластьМакета = Макет.ПолучитьОбласть("Ошибка");
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЕсли;
	
	Возврат ТабДокумент;
	
КонецФункции

// ОБРАБОТЧИКИ ОБНОВЛЕНИЯ

// Обработчик обновления
//
// Устанавливает новый код вида операции для сводных счетов-фактур по комиссии
Процедура УстановитьКодВидаОперацииСводныйКомиссионный() Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОтчетКомиссионераОПродажахПокупатели.СчетФактура КАК СчетФактура,
	|	СУММА(1) КАК Количество
	|ПОМЕСТИТЬ ВТ_СводныеСгенерированныеПредварительная
	|ИЗ
	|	Документ.ОтчетКомиссионераОПродажах.Покупатели КАК ОтчетКомиссионераОПродажахПокупатели
	|ГДЕ
	|	ОтчетКомиссионераОПродажахПокупатели.Ссылка.ПометкаУдаления = ЛОЖЬ
	|	И ОтчетКомиссионераОПродажахПокупатели.Ссылка.ВыписыватьСчетаФактурыСводно
	|
	|СГРУППИРОВАТЬ ПО
	|	ОтчетКомиссионераОПродажахПокупатели.СчетФактура
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетФактура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_СводныеСгенерированныеПредварительная.СчетФактура КАК СчетФактура
	|ПОМЕСТИТЬ ВТ_СводныеСгенерированные
	|ИЗ
	|	ВТ_СводныеСгенерированныеПредварительная КАК ВТ_СводныеСгенерированныеПредварительная
	|ГДЕ
	|	ВТ_СводныеСгенерированныеПредварительная.Количество > 1
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетФактура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СчетФактураВыданный.Ссылка КАК Ссылка,
	|	""27"" КАК КодВидаОперации,
	|	ВЫБОР
	|		КОГДА СчетФактураВыданный.КодВидаОперации = ""27""
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КодУстановлен
	|ИЗ
	|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
	|ГДЕ
	|	(СчетФактураВыданный.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.НаРеализацию)
	|			ИЛИ СчетФактураВыданный.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.Корректировочный))
	|	И СчетФактураВыданный.ПометкаУдаления = ЛОЖЬ
	|	И СчетФактураВыданный.СводныйКомиссионный = ИСТИНА
	|	И СчетФактураВыданный.Ссылка В
	|			(ВЫБРАТЬ
	|				ВТ_СводныеСгенерированные.СчетФактура
	|			ИЗ
	|				ВТ_СводныеСгенерированные)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СчетФактураВыданный.Ссылка,
	|	""28"",
	|	ВЫБОР
	|		КОГДА СчетФактураВыданный.КодВидаОперации = ""28""
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ
	|ИЗ
	|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
	|ГДЕ
	|	(СчетФактураВыданный.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.НаАванс)
	|			ИЛИ СчетФактураВыданный.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.НаАвансКомитента))
	|	И СчетФактураВыданный.ПометкаУдаления = ЛОЖЬ
	|	И СчетФактураВыданный.СводныйКомиссионный = ИСТИНА
	|ИТОГИ
	|	СУММА(КодУстановлен)
	|ПО
	|	ОБЩИЕ";
	
	ВыборкаИтоги = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Если ВыборкаИтоги.Следующий()
		И ВыборкаИтоги.КодУстановлен = 0 Тогда
		ВыборкаДокументы = ВыборкаИтоги.Выбрать();
		Пока ВыборкаДокументы.Следующий() Цикл
			СчетФактураДокумент = ВыборкаДокументы.Ссылка.ПолучитьОбъект();
			СчетФактураДокумент.КодВидаОПерации = ВыборкаДокументы.КодВидаОперации;
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(СчетФактураДокумент);
		КонецЦикла;
	Иначе
		Возврат;
	КонецЕсли;
		
КонецПроцедуры

// Обработчик обновления. Заполняет новый реквизит "КодВидаОперацииНаУменьшение" 
// для корректировочных счетов-фактур дата которых больше или равна 1 января 2015 года
Процедура УстановитьКодВидаОперацииНаУменьшение() Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СчетФактураВыданный.Ссылка
	|ИЗ
	|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
	|ГДЕ
	|	НЕ СчетФактураВыданный.ПометкаУдаления
	|	И СчетФактураВыданный.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.Корректировочный)
	|	И СчетФактураВыданный.Дата >= ДАТАВРЕМЯ(2015, 1, 1)
	|	И СчетФактураВыданный.КодВидаОперацииНаУменьшение = """"";
	
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
		
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			ОбрабатываемыйСчетФактура = Выборка.Ссылка;
			СчетФактураДокумент = ОбрабатываемыйСчетФактура.ПолучитьОбъект();
			
			СчетФактураДокумент.КодВидаОперацииНаУменьшение = "18";
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(СчетФактураДокумент);
			
		КонецЦикла;
		
	КонецЕсли;
		
КонецПроцедуры
