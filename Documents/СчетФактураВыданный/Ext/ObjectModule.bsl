Перем мУдалятьДвижения;
Перем мВалютаРегламентированногоУчета Экспорт;
Перем мНадписьПредоплата;

Перем мОбновлятьРеквизитыПриЗаписи Экспорт;
Перем мВестиУчетПлатежейПоГосКонтрактам;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

Функция ПолучитьСписокТиповПоВидуСчетаФактуры(ВидСчетаФактурыСписка, ЭтоИсправление = Ложь) Экспорт
	
	СписокТипов = Новый Массив;
	
	Если ВидСчетаФактурыСписка = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный 
		ИЛИ ЭтоИсправление И ВидСчетаФактурыСписка = Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию Тогда
		СписокТипов.Добавить(Тип("ДокументСсылка.КорректировкаРеализации"));
		Возврат СписокТипов;
	КонецЕсли;
		
	СписокТипов.Добавить(Тип("ДокументСсылка.АккредитивПолученный"));
	СписокТипов.Добавить(Тип("ДокументСсылка.ДокументРасчетовСКонтрагентом"));
	СписокТипов.Добавить(Тип("ДокументСсылка.ПлатежныйОрдерПоступлениеДенежныхСредств"));
	СписокТипов.Добавить(Тип("ДокументСсылка.КорректировкаДолга"));
	СписокТипов.Добавить(Тип("ДокументСсылка.ПлатежноеПоручениеВходящее"));
	СписокТипов.Добавить(Тип("ДокументСсылка.ПриходныйКассовыйОрдер"));
	СписокТипов.Добавить(Тип("ДокументСсылка.ПлатежноеТребованиеВыставленное"));
	СписокТипов.Добавить(Тип("ДокументСсылка.ИнкассовоеПоручениеПереданное"));
	СписокТипов.Добавить(Тип("ДокументСсылка.ОплатаОтПокупателяПлатежнойКартой"));
	
	Если ВидСчетаФактурыСписка = Перечисления.ВидСчетаФактурыВыставленного.НаСуммовуюРазницу Тогда
		// Список типов не требует корректировки
		
	ИначеЕсли ВидСчетаФактурыСписка = Перечисления.ВидСчетаФактурыВыставленного.НаАванс Тогда
		СписокТипов.Добавить(Тип("ДокументСсылка.ОтчетКомиссионераОПродажах"));
		СписокТипов.Добавить(Тип("ДокументСсылка.ВозвратТоваровОтПокупателя"));
		СписокТипов.Добавить(Тип("ДокументСсылка.КорректировкаРеализации"));
		
	ИначеЕсли ВидСчетаФактурыСписка = Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитента Тогда
		СписокТипов.Добавить(Тип("ДокументСсылка.ВозвратТоваровОтПокупателя"));
		
	ИначеЕсли ВидСчетаФактурыСписка = Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию Тогда
		// Типы документов оплаты исключаются из состава доступных типов.
		// Дополним типами, не выбираемыми вручную
		СписокТипов.Очистить();
		СписокТипов.Добавить(Тип("ДокументСсылка.ВводНачальныхОстатковНДС"));
		СписокТипов.Добавить(Тип("ДокументСсылка.ПринятиеКУчетуОС"));
		СписокТипов.Добавить(Тип("ДокументСсылка.МодернизацияОС"));
		СписокТипов.Добавить(Тип("ДокументСсылка.НачислениеНДСпоСМРхозспособом"));
		СписокТипов.Добавить(Тип("ДокументСсылка.ВозвратТоваровОтПокупателя"));
		СписокТипов.Добавить(Тип("ДокументСсылка.КорректировкаДолга"));
		СписокТипов = Новый ОписаниеТипов(Метаданные().ТабличныеЧасти.ДокументыОснования.Реквизиты.ДокументОснование.Тип, ,СписокТипов);
		СписокТипов = СписокТипов.Типы();
		
	ИначеЕсли ВидСчетаФактурыСписка = Перечисления.ВидСчетаФактурыВыставленного.НалоговыйАгент Тогда 
		СписокТипов.Очистить();
		СписокТипов.Добавить(Тип("ДокументСсылка.ПлатежноеПоручениеИсходящее"));
		СписокТипов.Добавить(Тип("ДокументСсылка.ПлатежныйОрдерСписаниеДенежныхСредств"));
		СписокТипов.Добавить(Тип("ДокументСсылка.РасходныйКассовыйОрдер"));
		СписокТипов.Добавить(Тип("ДокументСсылка.ПлатежноеТребованиеПолученное"));
		СписокТипов.Добавить(Тип("ДокументСсылка.АккредитивПереданный"));
		
	КонецЕсли;
		
	Возврат СписокТипов;
	
КонецФункции

Процедура УстановитьКодВидаОперации(КодВидаОперацииОснования = Неопределено) Экспорт
	
	ВерсияПостановления = УчетНДС.ПолучитьВерсиюПостановления(Дата);
	Если ВерсияПостановления <> 2 Тогда
		Возврат;
	КонецЕсли;
	
	ВерсияКодовВидовОпераций = УчетНДС.ВерсияКодовВидовОпераций(Дата);
	
	Если ВерсияКодовВидовОпераций = 4
	   И ЗначениеЗаполнено(ДоговорКонтрагента)
	   И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДоговорКонтрагента, "РеализацияТоваровОблагаемыхНДСУПокупателя") Тогда
		
		// В случае реализации товаров, указанных в п.8 ст. 161 НК предусмотрены специальные коды видов операций.
		Если ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию Тогда
			КодВидаОперации = "34";
		ИначеЕсли ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный Тогда
			КодВидаОперации = "34";
			КодВидаОперацииНаУменьшение = "34";
		ИначеЕсли ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАванс Тогда
			КодВидаОперации = "33";
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	Если Исправление И ЗначениеЗаполнено(КодВидаОперацииОснования) Тогда
		КодВидаОперации = УчетНДС.АктуальныйКодВидаОперации(КодВидаОперацииОснования, ВерсияКодовВидовОпераций);
		Возврат;
	КонецЕсли;
	
	Если ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный Тогда
		
		Если ВерсияКодовВидовОпераций = 1 Тогда
			КодВидаОперацииНаУменьшение = "";
		ИначеЕсли ВерсияКодовВидовОпераций = 2 Тогда
			КодВидаОперацииНаУменьшение = "18";
		Иначе
			КодВидаОперацииНаУменьшение = ?(СводныйКорректировочный, "01", "18");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(КодВидаОперацииОснования) Тогда
			КодВидаОперации = УчетНДС.АктуальныйКодВидаОперации(
				КодВидаОперацииОснования, ВерсияКодовВидовОпераций);
			Возврат;
		КонецЕсли;
		
	ИначеЕсли ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАванс
		ИЛИ ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.КорректировочныйНаАванс Тогда
		
		КодВидаОперации = "02";
		
	ИначеЕсли ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитента Тогда
		
		Если Авансы.Количество() > 1 Тогда
			КодВидаОперации = "28";
		Иначе
			КодВидаОперации = ?(ВерсияКодовВидовОпераций < 3, "05", "02");
		КонецЕсли;
		
	ИначеЕсли ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НалоговыйАгент Тогда
		
		Если ЗначениеЗаполнено(ДоговорКонтрагента) И ДоговорКонтрагента.УчетАгентскогоНДС Тогда
			КодВидаОперации = "06";
		КонецЕсли;
		
	ИначеЕсли ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаСуммовуюРазницу Тогда
		
		КодВидаОперации = ?(ВерсияКодовВидовОпераций < 3, "09", "01");
		
	ИначеЕсли ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию Тогда 
		
		МассивДокументовРеализации = Новый Массив;
		
		Для Каждого СтрокаТабличнойЧасти ИЗ ДокументыОснования Цикл
			
			ТипОснования = ТипЗнч(СтрокаТабличнойЧасти.ДокументОснование);
			
			Если ТипОснования = Тип("ДокументСсылка.ОтражениеРеализацииТоваровИУслугНДС")
				И ВерсияКодовВидовОпераций > 1 Тогда
				// Код операции указывается в документе
				КодВидаОперацииИзДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
					СтрокаТабличнойЧасти.ДокументОснование, "КодВидаОперации");
				КодВидаОперации = УчетНДС.АктуальныйКодВидаОперации(КодВидаОперацииИзДокумента, ВерсияКодовВидовОпераций);
				Прервать;
			ИначеЕсли ВерсияКодовВидовОпераций >= 3 Тогда
				// По умолчанию код "01", но необходимо проверить случай "смешанной" реализации (код 15),
				// которая может быть оформлена документом "Реализация товаров услуг".
				КодВидаОперации = "01";
				Если ТипОснования = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
					МассивДокументовРеализации.Добавить(СтрокаТабличнойЧасти.ДокументОснование);
				ИначеЕсли ТипОснования = Тип("ДокументСсылка.РеализацияОтгруженныхТоваров") Тогда
					ДокументОтгрузки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
						СтрокаТабличнойЧасти.ДокументОснование, "ДокументОтгрузки");
					Если ТипЗнч(ДокументОтгрузки) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
						МассивДокументовРеализации.Добавить(ДокументОтгрузки);
					КонецЕсли;
				Иначе
					МассивДокументовРеализации.Очистить();
					Прервать;
				КонецЕсли;
				// Коды видов операций до 1 июля 2016 года
			ИначеЕсли ТипОснования = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
				КодВидаОперации = "03";
			ИначеЕсли ТипОснования = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") Тогда
				КодВидаОперации = "04";
			ИначеЕсли ТипОснования = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
				МассивДокументовРеализации.Добавить(СтрокаТабличнойЧасти.ДокументОснование);
			ИначеЕсли ТипОснования = Тип("ДокументСсылка.РеализацияОтгруженныхТоваров") Тогда
				ДокументОтгрузки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
					СтрокаТабличнойЧасти.ДокументОснование, "ДокументОтгрузки");
				Если ТипЗнч(ДокументОтгрузки) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
					МассивДокументовРеализации.Добавить(ДокументОтгрузки);
				КонецЕсли;
			ИначеЕсли ТипОснования = Тип("ДокументСсылка.НачислениеНДСпоСМРхозспособом") Тогда
				МассивДокументовРеализации.Очистить();
				КодВидаОперации = "08";
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если МассивДокументовРеализации.Количество() > 0 Тогда
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("ДокументыОснования", МассивДокументовРеализации);
			
			ИспользуетсяРАУЗ = глЗначениеПеременной("ИспользоватьРасширеннуюАналитикуУчетаНоменклатурыИЗатрат")
				И (глЗначениеПеременной("ДатаНачалаИспользованияРасширеннойАналитикиУчетаНоменклатурыИЗатрат") <= МассивДокументовРеализации[0].Дата);
			
			Если НЕ ИспользуетсяРАУЗ Тогда
				
				Запрос.Текст =
				"ВЫБРАТЬ
				|	ВЫБОР
				|		КОГДА ПартииТоваровНаСкладахБухгалтерскийУчет.СчетУчета = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ТоварыНаСкладе)
				|			ТОГДА 1
				|		ИНАЧЕ 0
				|	КОНЕЦ КАК ЕстьКомиссионныеТоварыИУслуги,
				|	ВЫБОР
				|		КОГДА ПартииТоваровНаСкладахБухгалтерскийУчет.СчетУчета <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ТоварыНаСкладе)
				|			ТОГДА 1
				|		ИНАЧЕ 0
				|	КОНЕЦ КАК ЕстьСобственныеТоварыИУслуги
				|ИЗ
				|	РегистрНакопления.ПартииТоваровНаСкладахБухгалтерскийУчет КАК ПартииТоваровНаСкладахБухгалтерскийУчет
				|ГДЕ
				|	ПартииТоваровНаСкладахБухгалтерскийУчет.Активность
				|	И ПартииТоваровНаСкладахБухгалтерскийУчет.Регистратор В(&ДокументыОснования)
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ
				|	0,
				|	1
				|ИЗ
				|	Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслугУслуги
				|ГДЕ
				|	РеализацияТоваровУслугУслуги.Ссылка В(&ДокументыОснования)
				|ИТОГИ
				|	СУММА(ЕстьКомиссионныеТоварыИУслуги),
				|	СУММА(ЕстьСобственныеТоварыИУслуги)
				|ПО
				|	ОБЩИЕ";
				
				Результат = ОбщегоНазначенияСервер.ВыполнитьЗапросВПривилегированномРежиме(Запрос.Текст, Запрос.Параметры);
				
			Иначе
				
				Запрос.Текст =
				"ВЫБРАТЬ
				|	ВЫБОР
				|		КОГДА РеализацияТоваровУслугТовары.ПринадлежностьНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ПринадлежностьНоменклатуры.Принятый)
				|			ТОГДА 1
				|		ИНАЧЕ 0
				|	КОНЕЦ КАК ЕстьКомиссионныеТоварыИУслуги,
				|	ВЫБОР
				|		КОГДА РеализацияТоваровУслугТовары.ПринадлежностьНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ПринадлежностьНоменклатуры.Принятый)
				|			ТОГДА 1
				|		ИНАЧЕ 0
				|	КОНЕЦ КАК ЕстьСобственныеТоварыИУслуги
				|ИЗ
				|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
				|ГДЕ
				|	РеализацияТоваровУслугТовары.Ссылка В(&ДокументыОснования)
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ
				|	0,
				|	1
				|ИЗ
				|	Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслугУслуги
				|ГДЕ
				|	РеализацияТоваровУслугУслуги.Ссылка В(&ДокументыОснования)
				|ИТОГИ
				|	СУММА(ЕстьКомиссионныеТоварыИУслуги),
				|	СУММА(ЕстьСобственныеТоварыИУслуги)
				|ПО
				|	ОБЩИЕ";
				
				Результат = Запрос.Выполнить();
				
			КонецЕсли;
			
			Если НЕ Результат.Пустой() Тогда
				Выборка = Результат.Выбрать();
				Если Выборка.Следующий() Тогда
					Если Выборка.ЕстьСобственныеТоварыИУслуги > 0
						И Выборка.ЕстьКомиссионныеТоварыИУслуги > 0 Тогда
						КодВидаОперации = ?(ВерсияКодовВидовОпераций < 3, "01;04", "15");
					ИначеЕсли ВерсияКодовВидовОпераций < 3 И Выборка.ЕстьКомиссионныеТоварыИУслуги > 0 Тогда
						КодВидаОперации = "04";
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если КодВидаОперации = "" Тогда
		КодВидаОперации = "01";
	КонецЕсли;
	
КонецПроцедуры

// Процедура для СФ определяет его сумму, валюту и контрагента
// на основе анализа данных документов оснований
//
Процедура ОпределениеПараметровСчетаФактуры(ЗаполнятьРеквизитыСчетаФактуры = Ложь) Экспорт
	
	Если ДокументыОснования.Количество() = 0 
		ИЛИ НЕ ЗначениеЗаполнено(ДокументыОснования[0].ДокументОснование) Тогда
		// Основание не выбрано, параметры не определяем
		СуммаДокумента = 0;
		Возврат;
	КонецЕсли; 
	
	ПараметрыСФ = Неопределено;
	
	УчетНДС.ПолучитьПараметрыСчетаФактуры(ЭтотОбъект, мВалютаРегламентированногоУчета, ПараметрыСФ);
	
	Если ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный И ПараметрыСФ.РеквизитыОснований.Количество() <> 0 Тогда
		
		Для Каждого Основание Из ДокументыОснования Цикл
			
			СтрокаСРеквизитами = ПараметрыСФ.РеквизитыОснований.Найти(Основание.ДокументОснование, "ДокументОснование");
			Если СтрокаСРеквизитами <> Неопределено Тогда
				Если Основание.СуммаУвеличение <> СтрокаСРеквизитами.СуммаУвеличение Тогда
					Основание.СуммаУвеличение = СтрокаСРеквизитами.СуммаУвеличение;
					РеквизитыОбновлены = Истина;
				КонецЕсли;
				Если Основание.СуммаУменьшение <> СтрокаСРеквизитами.СуммаУменьшение Тогда
					Основание.СуммаУменьшение = СтрокаСРеквизитами.СуммаУменьшение;
					РеквизитыОбновлены = Истина;
				КонецЕсли;
				Если Основание.СуммаНДСУвеличение <> СтрокаСРеквизитами.СуммаНДСУвеличение Тогда
					Основание.СуммаНДСУвеличение = СтрокаСРеквизитами.СуммаНДСУвеличение;
					РеквизитыОбновлены = Истина;
				КонецЕсли;
				Если Основание.СуммаНДСУменьшение <> СтрокаСРеквизитами.СуммаНДСУменьшение Тогда
					Основание.СуммаНДСУменьшение = СтрокаСРеквизитами.СуммаНДСУменьшение;
					РеквизитыОбновлены = Истина;
				КонецЕсли;
				Если ЗаполнятьРеквизитыСчетаФактуры Тогда
					Если Основание.НомерИсходногоДокумента <> СтрокаСРеквизитами.НомерИсходногоДокумента Тогда
						Основание.НомерИсходногоДокумента = СтрокаСРеквизитами.НомерИсходногоДокумента;
						РеквизитыОбновлены = Истина;
					КонецЕсли;
					Если Основание.ДатаИсходногоДокумента <> СтрокаСРеквизитами.ДатаИсходногоДокумента Тогда
						Основание.ДатаИсходногоДокумента = СтрокаСРеквизитами.ДатаИсходногоДокумента;
						РеквизитыОбновлены = Истина;
					КонецЕсли;
					Если Основание.УчитыватьИсправлениеИсходногоДокумента <> СтрокаСРеквизитами.УчитыватьИсправлениеИсходногоДокумента Тогда
						Основание.УчитыватьИсправлениеИсходногоДокумента = СтрокаСРеквизитами.УчитыватьИсправлениеИсходногоДокумента;
						РеквизитыОбновлены = Истина;
					КонецЕсли;
					Если Основание.НомерИсправленияИсходногоДокумента <> СтрокаСРеквизитами.НомерИсправленияИсходногоДокумента Тогда
						Основание.НомерИсправленияИсходногоДокумента = СтрокаСРеквизитами.НомерИсправленияИсходногоДокумента;
						РеквизитыОбновлены = Истина;
					КонецЕсли;
					Если Основание.ДатаИсправленияИсходногоДокумента <> СтрокаСРеквизитами.ДатаИсправленияИсходногоДокумента Тогда
						Основание.ДатаИсправленияИсходногоДокумента = СтрокаСРеквизитами.ДатаИсправленияИсходногоДокумента;
						РеквизитыОбновлены = Истина;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
		ПараметрыСФ.РеквизитыОснований.Свернуть("НомерИсходногоДокумента, ДатаИсходногоДокумента");
		
		Если ПараметрыСФ.РеквизитыОснований.Количество() > 1 Тогда
			СводныйКорректировочный = Истина;
		Иначе
			СводныйКорректировочный = Ложь;
		КонецЕсли; 
	Иначе
		СводныйКорректировочный = Ложь;
	КонецЕсли;
	
	ВерсияПостановления = УчетНДС.ПолучитьВерсиюПостановления(Дата);
	ВедетсяУчетНДСПоФЗ56 = УчетНДС.ВедетсяУчетНДСПоФЗ56(Дата);
	РеквизитыОбновлены  = Ложь;
	
	ЕстьРабочийЭСФ      = ЭлектронныеДокументы.ЕстьРабочийЭСФ(Ссылка);
	ИзмененныеПоля      = Новый Массив;
	
	Если ПараметрыСФ.Организация <> Неопределено 
		И ПараметрыСФ.Организация <> Организация Тогда
		Если ЕстьРабочийЭСФ Тогда
			ИзмененныеПоля.Добавить("""Организация""");
		Иначе
			Номер       = "";
			Организация	= ПараметрыСФ.Организация;
			РеквизитыОбновлены  = Истина;
		КонецЕсли;
	КонецЕсли;
	Если ПараметрыСФ.Контрагент <> Неопределено 
		И ПараметрыСФ.Контрагент <> Контрагент Тогда
		Если ЕстьРабочийЭСФ Тогда
			ИзмененныеПоля.Добавить("""Контрагент""");
		Иначе
			Контрагент = ПараметрыСФ.Контрагент;
			// при изменении контрагента нужно изменить значение КППКонтрагента, но не в случае исправления - КППКонтрагента берется из исправляемого счета-фактуры
			Если НЕ ЗначениеЗаполнено(ИсправляемыйСчетФактура) Тогда
				КППКонтрагента = "";
			КонецЕсли;
			РеквизитыОбновлены  = Истина;
		КонецЕсли;
	КонецЕсли;
	Если ПараметрыСФ.Договор <> Неопределено 
		И ПараметрыСФ.Договор <> ДоговорКонтрагента Тогда
		ДоговорКонтрагента = ПараметрыСФ.Договор;
		РеквизитыОбновлены  = Истина;
	КонецЕсли; 			
	Если ПараметрыСФ.ВалютаДокумента <> Неопределено 
		И ВалютаДокумента <> ПараметрыСФ.ВалютаДокумента Тогда
		Если ЕстьРабочийЭСФ Тогда
			ИзмененныеПоля.Добавить("""Валюта документа""");
		Иначе
			ВалютаДокумента = ПараметрыСФ.ВалютаДокумента;
			РеквизитыОбновлены  = Истина;
		КонецЕсли;
	КонецЕсли;
	Если СуммаДокумента <> ПараметрыСФ.СуммаДокумента Тогда
		Если ЕстьРабочийЭСФ Тогда
			ИзмененныеПоля.Добавить("""Сумма документа""");
		Иначе
			СуммаДокумента = ПараметрыСФ.СуммаДокумента;
			РеквизитыОбновлены  = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если СуммаНДСДокумента <> ПараметрыСФ.СуммаНДСДокумента Тогда
		Если ЕстьРабочийЭСФ Тогда
			ИзмененныеПоля.Добавить("""Сумма НДС""");
		Иначе
			СуммаНДСДокумента = ПараметрыСФ.СуммаНДСДокумента;
			РеквизитыОбновлены  = Истина;
		КонецЕсли;
	КонецЕсли; 
	Если СуммаУвеличение <> ПараметрыСФ.СуммаУвеличение Тогда
		Если ЕстьРабочийЭСФ Тогда
			ИзмененныеПоля.Добавить("""Сумма увеличения""");
		Иначе
			СуммаУвеличение = ПараметрыСФ.СуммаУвеличение;
			РеквизитыОбновлены  = Истина;
		КонецЕсли;
	КонецЕсли;
	Если СуммаУменьшение <> ПараметрыСФ.СуммаУменьшение Тогда
		Если ЕстьРабочийЭСФ Тогда
			ИзмененныеПоля.Добавить("""Сумма уменьшения""");
		Иначе
			СуммаУменьшение = ПараметрыСФ.СуммаУменьшение;
			РеквизитыОбновлены  = Истина;
		КонецЕсли;
	КонецЕсли;
	Если СуммаНДСУвеличение <> ПараметрыСФ.СуммаНДСУвеличение Тогда
		Если ЕстьРабочийЭСФ Тогда
			ИзмененныеПоля.Добавить("""Сумма НДС увеличения""");
		Иначе
			СуммаНДСУвеличение = ПараметрыСФ.СуммаНДСУвеличение;
			РеквизитыОбновлены  = Истина;
		КонецЕсли;
	КонецЕсли;
	Если СуммаНДСУменьшение <> ПараметрыСФ.СуммаНДСУменьшение Тогда
		Если ЕстьРабочийЭСФ Тогда
			ИзмененныеПоля.Добавить("""Сумма НДС уменьшения""");
		Иначе
			СуммаНДСУменьшение = ПараметрыСФ.СуммаНДСУменьшение;
			РеквизитыОбновлены  = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если Дата >= '20150101'
		И НЕ ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
		Если СуммаДокументаКомиссия <> ПараметрыСФ.СуммаДокументаКомиссия Тогда
			СуммаДокументаКомиссия = ПараметрыСФ.СуммаДокументаКомиссия;
		КонецЕсли;
		Если СуммаНДСДокументаКомиссия <> ПараметрыСФ.СуммаНДСДокументаКомиссия Тогда
			СуммаНДСДокументаКомиссия = ПараметрыСФ.СуммаНДСДокументаКомиссия;
		КонецЕсли;
	КонецЕсли;
	
	Если ВерсияПостановления = 2 Тогда
		Если СчетФактураБезНДС <> ПараметрыСФ.СчетФактураБезНДС Тогда
			СчетФактураБезНДС = ПараметрыСФ.СчетФактураБезНДС;
			РеквизитыОбновлены  = Истина;
		КонецЕсли;
		
		Если ЭтоНовый() И НЕ ЗначениеЗаполнено(КодВидаОперации) Тогда
			Если НЕ ТипЗнч(ДокументыОснования[0].ДокументОснование) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда		
				УстановитьКодВидаОперации();
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;
	
	Если ВедетсяУчетНДСПоФЗ56 
		И НЕ ЗначениеЗаполнено(ИдентификаторГосКонтракта)
		И ИдентификаторГосКонтракта <> ПараметрыСФ.ИдентификаторГосКонтракта Тогда 
		ИдентификаторГосКонтракта = ПараметрыСФ.ИдентификаторГосКонтракта;
	КонецЕсли;
	
	Если ТипЗнч(ДокументыОснования[0].ДокументОснование) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
		РезультатПоискаИсправляемыйСчетФактура = УчетНДС.НайтиПодчиненныйСчетФактуру(
			ДокументыОснования[0].ДокументОснование.ИсправляемыйДокументРеализации, "СчетФактураВыданный");
		Если РезультатПоискаИсправляемыйСчетФактура = Неопределено Тогда
			РезультатПоискаИсправляемыйСчетФактура = Документы.СчетФактураВыданный.ПустаяСсылка();
		КонецЕсли;
	Иначе
		РезультатПоискаИсправляемыйСчетФактура = Документы.СчетФактураВыданный.ПустаяСсылка();
	КонецЕсли;
	Если ИсправляемыйСчетФактура <> РезультатПоискаИсправляемыйСчетФактура Тогда
		ИсправляемыйСчетФактура = РезультатПоискаИсправляемыйСчетФактура;
		Если ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный И Исправление Тогда
			НомерИсправляемогоКорректировочногоДокумента 	= ОбщегоНазначения.ПолучитьНомерНаПечать(ИсправляемыйСчетФактура);
			ДатаИсправляемогоКорректировочногоДокумента 	= ИсправляемыйСчетФактура.Дата;
			НомерИсходногоДокумента = "";
			ДатаИсходногоДокумента 	= '00010101';
		ИначеЕсли Исправление Тогда
			НомерИсходногоДокумента = ОбщегоНазначения.ПолучитьНомерНаПечать(ИсправляемыйСчетФактура);
			ДатаИсходногоДокумента 	= ИсправляемыйСчетФактура.Дата;
			НомерИсправляемогоКорректировочногоДокумента 	= "";
			ДатаИсправляемогоКорректировочногоДокумента 	= '00010101';
		КонецЕсли;
		РеквизитыОбновлены  = Истина;
	КонецЕсли;
	
	Если ДокументыОснования[0].ДокументОснование <> ДокументОснование Тогда
		ДокументОснование = ДокументыОснования[0].ДокументОснование;
		РеквизитыОбновлены  = Истина;
	КонецЕсли; 
	
	Если ПустаяСтрока(КППКонтрагента) И ДокументыОснования.Количество() > 0 Тогда
		ОснованиеДокумент = ДокументыОснования[0].ДокументОснование;
		ОбновлятьКППКонтрагента = (НЕ ТипЗнч(ОснованиеДокумент) = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах"));
		Если ТипЗнч(ОснованиеДокумент) = Тип("ДокументСсылка.РеализацияОтгруженныхТоваров") Тогда
			ОснованиеДокумент = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ОснованиеДокумент, "ДокументОтгрузки");
		КонецЕсли;
		Если ТипЗнч(ОснованиеДокумент) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
			ВидОперацииРеализации = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ОснованиеДокумент, "ВидОперации");
			ОбновлятьКППКонтрагента = ОбновлятьКППКонтрагента И
				НЕ (ВидОперацииРеализации = Перечисления.ВидыОперацийРеализацияТоваров.АктВыполненныхРабот);
		КонецЕсли;
		Если ОбновлятьКППКонтрагента Тогда
			КППКонтрагентаНовый = УчетНДС.ПолучитьКПППодразделенияКонтрагента(ОснованиеДокумент, "Грузополучатель");
			Если НЕ ПустаяСтрока(КППКонтрагентаНовый) Тогда
				КППКонтрагента = КППКонтрагентаНовый;
				РеквизитыОбновлены	= Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ЕстьРабочийЭСФ И ИзмененныеПоля.Количество() > 0 Тогда
		 
		Если ИзмененныеПоля.Количество() = 1 Тогда
			ТекстСообщения = НСтр("ru='У документа ""%1"" %2 не совпадает с документом-основанием.
			|Для данного счета-фактуры введен Электронный счет-фактура - документ не может быть обновлен.'"); 
		Иначе
			ТекстСообщения = НСтр("ru='У документа ""%1"" %2 не совпадают с документом-основанием.
			|Для данного счета-фактуры введен Электронный счет-фактура - документ не может быть обновлен.'");
		КонецЕсли;
		
		ОбщегоНазначения.СообщитьОбОшибке(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения,
			Строка(Ссылка),
			ОбщегоНазначения.ПолучитьСтрокуИзМассиваПодстрок(ИзмененныеПоля, ", ")),
			Ложь,
			"",
			СтатусСообщения.Внимание);
			
	ИначеЕсли РеквизитыОбновлены 
		И ДополнительныеСвойства.Свойство("СообщитьОбИзмененииРеквизитов")
		И ДополнительныеСвойства.СообщитьОбИзмененииРеквизитов Тогда
		ОбщегоНазначения.СообщитьИнформациюПользователю(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Реквизиты документа ""%1"" перезаполнены автоматически'"),
			Ссылка));
	КонецЕсли;
	
КонецПроцедуры // ОпределениеПараметровСчетаФактуры()

// Процедура для определения параметров счета-фактуры на аванс
Процедура ОпределениеПараметровСчетаФактурыНаАванс(ДокументЗаполнен) Экспорт
	
	Если ДокументыОснования.Количество() = 0 
		ИЛИ НЕ ЗначениеЗаполнено(ДокументыОснования[0].ДокументОснование) Тогда
		// Основание не выбрано, параметры не определяем
		Возврат;
	КонецЕсли; 
	
	Организация = ДокументыОснования[0].ДокументОснование.Организация;
		
	СоответствиеСтавок = Новый Соответствие();
	СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.ПустаяСсылка(), Перечисления.СтавкиНДС.ПустаяСсылка());
	СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС10, Перечисления.СтавкиНДС.НДС10_110);
	СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС18, Перечисления.СтавкиНДС.НДС18_118);
	СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС20, Перечисления.СтавкиНДС.НДС20_120);
	СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС10_110, Перечисления.СтавкиНДС.НДС10_110);
	СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС18_118, Перечисления.СтавкиНДС.НДС18_118);
	СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС20_120, Перечисления.СтавкиНДС.НДС20_120);
	СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС0, Перечисления.СтавкиНДС.НДС0);
	
	СтрокаСообщения = "";
	ОшибкаПриЗаполнении = Ложь;
	ДокументЗаполнен = Ложь;
	ТекущийДоговорКонтрагента = ДоговорКонтрагента;
		
	Если ТипЗнч(ДокументыОснования[0].ДокументОснование) = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОтчетКомиссионераОПродажахДенежныеСредства.СтавкаНДС,
		|	ОтчетКомиссионераОПродажахДенежныеСредства.Ссылка.Дата,
		|	ОтчетКомиссионераОПродажахДенежныеСредства.Ссылка,
		|	ОтчетКомиссионераОПродажахДенежныеСредства.Ссылка.Контрагент,
		|	ОтчетКомиссионераОПродажахДенежныеСредства.Ссылка.ДоговорКонтрагента,
		|	СУММА(ОтчетКомиссионераОПродажахДенежныеСредства.Сумма + ВЫБОР
		|			КОГДА ОтчетКомиссионераОПродажахДенежныеСредства.Ссылка.СуммаВключаетНДС = ИСТИНА
		|				ТОГДА 0
		|			ИНАЧЕ ОтчетКомиссионераОПродажахДенежныеСредства.СуммаНДС
		|		КОНЕЦ) КАК Сумма,
		|	СУММА(ОтчетКомиссионераОПродажахДенежныеСредства.СуммаНДС) КАК СуммаНДС,
		|	ОтчетКомиссионераОПродажахДенежныеСредства.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
		|	ОтчетКомиссионераОПродажахДенежныеСредства.Ссылка.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах КАК РасчетыВУсловныхЕдиницах,
		|	ОтчетКомиссионераОПродажахДенежныеСредства.Ссылка.КурсВзаиморасчетов КАК КурсВзаиморасчетов,
		|	ОтчетКомиссионераОПродажахДенежныеСредства.Ссылка.КратностьВзаиморасчетов КАК КратностьВзаиморасчетов
		|ИЗ
		|	Документ.ОтчетКомиссионераОПродажах.ДенежныеСредства КАК ОтчетКомиссионераОПродажахДенежныеСредства
		|ГДЕ
		|	ОтчетКомиссионераОПродажахДенежныеСредства.Ссылка = &ДокументОснование
		|	И ОтчетКомиссионераОПродажахДенежныеСредства.ВидОтчетаПоПлатежам = &ВидОтчетаПоПлатежамАванс
		|	И ОтчетКомиссионераОПродажахДенежныеСредства.Покупатель = &ПустаяСсылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ОтчетКомиссионераОПродажахДенежныеСредства.Ссылка,
		|	ОтчетКомиссионераОПродажахДенежныеСредства.СтавкаНДС,
		|	ОтчетКомиссионераОПродажахДенежныеСредства.Ссылка.Дата,
		|	ОтчетКомиссионераОПродажахДенежныеСредства.Ссылка.Контрагент,
		|	ОтчетКомиссионераОПродажахДенежныеСредства.Ссылка.ДоговорКонтрагента,
		|	ОтчетКомиссионераОПродажахДенежныеСредства.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов,
		|	ОтчетКомиссионераОПродажахДенежныеСредства.Ссылка.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах,
		|	ОтчетКомиссионераОПродажахДенежныеСредства.Ссылка.КурсВзаиморасчетов,
		|	ОтчетКомиссионераОПродажахДенежныеСредства.Ссылка.КратностьВзаиморасчетов";
		
		Запрос.УстановитьПараметр("ДокументОснование", ДокументыОснования[0].ДокументОснование);
		Запрос.УстановитьПараметр("ВидОтчетаПоПлатежамАванс", Перечисления.ВидыОтчетовПоПлатежамКомиссия.Аванс);
		Запрос.УстановитьПараметр("ПустаяСсылка", Справочники.Контрагенты.ПустаяСсылка());
		
		Результат = Запрос.Выполнить();
		Сумма = 0;
		ДокументЗаполнен = Ложь;
		
		Если Не Результат.Пустой() Тогда
			
			Выборка = Результат.Выбрать();
			
			Пока Выборка.Следующий() Цикл
				Если Выборка.Дата >= '20060101' 
					И Выборка.СтавкаНДС = Перечисления.СтавкиНДС.НДС0 Тогда
					// НДС с авансов под экспортные поставки не начисляется
					Продолжить;
				ИначеЕсли Выборка.Дата >= '20080101' 
					И Выборка.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
					// НДС с авансов под необлагаемую НДС реализацию не начисляется с 2008 года
					Продолжить;
				КонецЕсли;
				ДокументЗаполнен = Истина;
				
				Контрагент = Выборка.Контрагент;
				ДоговорКонтрагента = Выборка.ДоговорКонтрагента;
 				Сумма = Сумма + Выборка.Сумма;
				СтавкаНДС = ?(ЗначениеЗаполнено(СоответствиеСтавок[Выборка.СтавкаНДС]), 
					СоответствиеСтавок[Выборка.СтавкаНДС],
					УчетНДС.ОбщаяРасчетнаяСтавкаНДС(Дата));
				Если Выборка.ВалютаВзаиморасчетов <> мВалютаРегламентированногоУчета Тогда
					СуммаРуб = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.Сумма,
						Выборка.ВалютаВзаиморасчетов, мВалютаРегламентированногоУчета,
						Выборка.КурсВзаиморасчетов, 1,
						Выборка.КратностьВзаиморасчетов, 1);
					СуммаНДСруб = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.СуммаНДС,
						Выборка.ВалютаВзаиморасчетов, мВалютаРегламентированногоУчета,
						Выборка.КурсВзаиморасчетов, 1,
						Выборка.КратностьВзаиморасчетов, 1);
					ДобавитьСтрокуАвансы(Авансы, ДоговорКонтрагента.НаименованиеДляСчетаФактурыНаАванс, , СуммаРуб, СуммаНДСруб, СтавкаНДС);
				Иначе
					ДобавитьСтрокуАвансы(Авансы, ДоговорКонтрагента.НаименованиеДляСчетаФактурыНаАванс, , Выборка.Сумма, Выборка.СуммаНДС, СтавкаНДС);
				КонецЕсли;
				
			КонецЦикла;
			
			Если Выборка.РасчетыВУсловныхЕдиницах 
				ИЛИ НЕ ЗначениеЗаполнено(Выборка.ВалютаВзаиморасчетов) Тогда
				ВалютаДокумента = мВалютаРегламентированногоУчета;
			Иначе
				ВалютаДокумента = Выборка.ВалютаВзаиморасчетов;
			КонецЕсли; 
			
			ВалютнаяСумма = Сумма;
			
			ОшибкаПриЗаполнении = Ложь;
			СтрокаСообщенияТекущая = ПроверитьВозможностьЗаписиСФ(ОшибкаПриЗаполнении, Истина);
			Если ОшибкаПриЗаполнении Тогда
				СтрокаСообщения = СтрокаСообщенияТекущая;
			КонецЕсли;
			
			СуммаДокумента 	= Сумма;
			
		Иначе
			ДокументЗаполнен = Ложь;
		КонецЕсли;
	
	ИначеЕсли ДокументыОснования[0].ДокументОснование.Метаданные().ТабличныеЧасти.Найти("РасшифровкаПлатежа") <> Неопределено Тогда
		Если ДокументыОснования[0].ДокументОснование.Метаданные().ТабличныеЧасти["РасшифровкаПлатежа"].Реквизиты.Найти("СчетУчетаРасчетовПоАвансам") = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ДокументОснование = ДокументыОснования[0].ДокументОснование;
		Если ТипЗнч(ДокументОснование)= Тип("ДокументСсылка.ПлатежноеПоручениеВходящее") 
			И мВестиУчетПлатежейПоГосКонтрактам 
			И НЕ ЗначениеЗаполнено(ИдентификаторГосКонтракта)
			И УчетНДС.ВедетсяУчетНДСПоФЗ56(Дата) Тогда
			ИдентификаторГосКонтракта = ДокументОснование.СчетОрганизации.ГосударственныйКонтракт.Код;
		КонецЕсли;
		
		Запрос = Новый Запрос;
		
		МассивСубконто = Новый Массив;
		МассивСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
		МассивСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
		
		Запрос.УстановитьПараметр("СчетУчетаРасчетовПоАвансам", ДокументыОснования[0].ДокументОснование.РасшифровкаПлатежа.ВыгрузитьКолонку("СчетУчетаРасчетовПоАвансам"));
		Запрос.УстановитьПараметр("СчетУчетаРасчетовСКонтрагентом", ДокументыОснования[0].ДокументОснование.РасшифровкаПлатежа.ВыгрузитьКолонку("СчетУчетаРасчетовСКонтрагентом"));
		Запрос.УстановитьПараметр("МассивСубконто", МассивСубконто);
		Запрос.УстановитьПараметр("СчетУчетаДоходов", ПланыСчетов.Хозрасчетный.ПрочиеДоходы);
		Запрос.УстановитьПараметр("ДокументОснование", ДокументыОснования[0].ДокументОснование);
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	РасчетыПоРеализацииОбороты.Организация,
		|	РасчетыПоРеализацииОбороты.СуммаРегПриход КАК СуммаАванса,
		|	РасчетыПоРеализацииОбороты.СуммаВзаиморасчетовПриход КАК ВалютнаяСуммаАванса,
		|	РасчетыПоРеализацииОбороты.Контрагент,
		|	РасчетыПоРеализацииОбороты.ДоговорКонтрагента,
		|	РасчетыПоРеализацииОбороты.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах КАК РасчетыВУсловныхЕдиницах,
		|	РасчетыПоРеализацииОбороты.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаРасчетов,
		|	РасчетыПоРеализацииОбороты.ДоговорКонтрагента.ВедениеВзаиморасчетов КАК ВедениеВзаиморасчетов,
		|	РасчетыПоРеализацииОбороты.СчетОплаты КАК СчетУчетаРасчетовПоАвансам,
		|	РасчетыПоРеализацииОбороты.Сделка КАК СчетНаОплату,
		|	РасчетыПоРеализацииОбороты.ДатаОплаты,
		|	ИСТИНА КАК ЭтоНаАванс
		|ИЗ
		|	РегистрНакопления.РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.Обороты(, , Регистратор, СчетОплаты В (&СчетУчетаРасчетовПоАвансам)) КАК РасчетыПоРеализацииОбороты
		|ГДЕ
		|	РасчетыПоРеализацииОбороты.Регистратор = &ДокументОснование
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ХозрасчетныйОбороты.Организация,
		|	ХозрасчетныйОбороты.СуммаОборот,
		|	ХозрасчетныйОбороты.ВалютнаяСуммаОборот,
		|	ХозрасчетныйОбороты.Субконто1,
		|	ХозрасчетныйОбороты.Субконто2,
		|	ХозрасчетныйОбороты.Субконто2.РасчетыВУсловныхЕдиницах,
		|	ХозрасчетныйОбороты.Валюта,
		|	ХозрасчетныйОбороты.Субконто2.ВедениеВзаиморасчетов,
		|	НЕОПРЕДЕЛЕНО,
		|	ХозрасчетныйОбороты.Счет,
		|	НЕОПРЕДЕЛЕНО,
		|	ЛОЖЬ
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Обороты(, , Регистратор, Счет В (&СчетУчетаРасчетовСКонтрагентом), &МассивСубконто, КорСубконто1 = ЗНАЧЕНИЕ(Справочник.ПрочиеДоходыИРасходы.КурсовыеРазницыПоРасчетамВУЕ), КорСчет В (&СчетУчетаДоходов), ) КАК ХозрасчетныйОбороты
		|ГДЕ
		|	ХозрасчетныйОбороты.Регистратор = &ДокументОснование";
	
		ДоговорЗафиксирован = Ложь;			   
		Результат = Запрос.Выполнить();
			
		Если НЕ Результат.Пустой() Тогда
			СуммаДокумента = 0;
			ДокАванса = ДокументыОснования[0].ДокументОснование;
			Выборка = Результат.Выбрать();
			
			Пока Выборка.Следующий() Цикл
				
				Организация = Выборка.Организация;
				Контрагент = Выборка.Контрагент;
				
				Если ДоговорЗафиксирован Тогда
					Если НЕ (Выборка.ДоговорКонтрагента = ДоговорКонтрагента)
						И ДокументЗаполнен Тогда
						Продолжить;
					КонецЕсли;	
				Иначе	
					ДоговорКонтрагента = Выборка.ДоговорКонтрагента;
					ДоговорЗафиксирован = Истина;
				КонецЕсли;	
				
				Если НЕ ЗначениеЗаполнено(Выборка.ВалютаРасчетов) ИЛИ Выборка.РасчетыВУсловныхЕдиницах Тогда
					//Незаполненное значение приравнивается к валюте регл. учета
					ВалютаДокумента = мВалютаРегламентированногоУчета;	
				Иначе
					ВалютаДокумента = Выборка.ВалютаРасчетов;     
				КонецЕсли; 
				
				ТаблицаПоСтавкам = Новый ТаблицаЗначений();
				ТаблицаПоСтавкам.Колонки.Добавить("СтавкаНДС", Новый ОписаниеТипов("ПеречислениеСсылка.СтавкиНДС"));
				ТаблицаПоСтавкам.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
				ТаблицаПоСтавкам.Колонки.Добавить("ВалютнаяСумма", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
				ТаблицаПоСтавкам.Колонки.Добавить("СчетНаОплату", Новый ОписаниеТипов("ДокументСсылка.СчетНаОплатуПокупателю, ДокументСсылка.ЗаказПокупателя"));
				
				Для Каждого СтрПлатежа Из ДокАванса.РасшифровкаПлатежа Цикл
					Если СтрПлатежа.ДоговорКонтрагента = ДоговорКонтрагента 
						И (Выборка.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом 
						    ИЛИ СтрПлатежа.Сделка = Выборка.СчетНаОплату)
						И ((Выборка.ЭтоНаАванс И СтрПлатежа.СчетУчетаРасчетовПоАвансам = Выборка.СчетУчетаРасчетовПоАвансам) 
							ИЛИ (НЕ Выборка.ЭтоНаАванс И СтрПлатежа.СчетУчетаРасчетовСКонтрагентом = Выборка.СчетУчетаРасчетовПоАвансам)) Тогда
						Если СоответствиеСтавок[СтрПлатежа.СтавкаНДС] = Неопределено Тогда
							ТекСтавкаНДС = СтрПлатежа.СтавкаНДС;
						Иначе
							ТекСтавкаНДС = СоответствиеСтавок[СтрПлатежа.СтавкаНДС];
						КонецЕсли; 
						СтрокаПоСтавке = ТаблицаПоСтавкам.Добавить();
						СтрокаПоСтавке.СтавкаНДС = ТекСтавкаНДС;
						СтрокаПоСтавке.Сумма = СтрПлатежа.СуммаПлатежа;
						СтрокаПоСтавке.ВалютнаяСумма = СтрПлатежа.СуммаПлатежа;
						СтрокаПоСтавке.СчетНаОплату = СтрПлатежа.Сделка;
					КонецЕсли;
				КонецЦикла;
				
				ТаблицаПоСтавкам.Свернуть("СтавкаНДС, СчетНаОплату","Сумма, ВалютнаяСумма");
				
				//Распределение суммы рег учета
				МассивСумм = ОбщегоНазначения.РаспределитьПропорционально(Выборка.СуммаАванса,ТаблицаПоСтавкам.ВыгрузитьКолонку("Сумма"));
				Если НЕ МассивСумм = Неопределено Тогда
					ТаблицаПоСтавкам.ЗагрузитьКолонку(МассивСумм,"Сумма");
				Иначе
					МассивСумм = ТаблицаПоСтавкам.ВыгрузитьКолонку("Сумма");
				КонецЕсли; 
				
				//Распределение валютной суммы
				Если НЕ ЗначениеЗаполнено(Выборка.ВалютнаяСуммаАванса) или ВалютаДокумента  = мВалютаРегламентированногоУчета Тогда
					Если НЕ МассивСумм = Неопределено Тогда
						ТаблицаПоСтавкам.ЗагрузитьКолонку(МассивСумм,"ВалютнаяСумма");
					КонецЕсли; 
				Иначе
					МассивСуммВал = ОбщегоНазначения.РаспределитьПропорционально(Выборка.ВалютнаяСуммаАванса,ТаблицаПоСтавкам.ВыгрузитьКолонку("ВалютнаяСумма"));
					Если НЕ МассивСуммВал = Неопределено Тогда
						ТаблицаПоСтавкам.ЗагрузитьКолонку(МассивСуммВал,"ВалютнаяСумма");
					Иначе
						ТаблицаПоСтавкам.ЗагрузитьКолонку(МассивСумм,"ВалютнаяСумма");
					КонецЕсли; 
				КонецЕсли; 
				
				Если Выборка.ЭтоНаАванс Тогда
					Если (ВидСчетаФактуры <> Перечисления.ВидСчетаФактурыВыставленного.НаАванс
						ИЛИ ВидСчетаФактуры <> Перечисления.ВидСчетаФактурыВыставленного.КорректировочныйНаАванс)
						И ВидСчетаФактуры <> Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитента Тогда
						
						ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАванс;
						
					КонецЕсли;
				Иначе 
					ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаСуммовуюРазницу;
					СчетФактураНеВыставляется = Истина;
				КонецЕсли;
				
				ВалютнаяСумма = 0;
				Если Выборка.ЭтоНаАванс Тогда
					Сумма = 0;
					Для Каждого СтрокаПоСтавке Из ТаблицаПоСтавкам Цикл
						
						Если НЕ УчетНДС.РеализацияТоваровОблагаемыхНДСУПокупателя(Выборка.ДатаОплаты, ДоговорКонтрагента) Тогда
							Если Выборка.ДатаОплаты >= '20060101' 
								И СтрокаПоСтавке.СтавкаНДС = Перечисления.СтавкиНДС.НДС0 Тогда
								// НДС с авансов под экспортные поставки не начисляется
								Продолжить;
							ИначеЕсли Выборка.ДатаОплаты >= '20080101' 
								И СтрокаПоСтавке.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
								// НДС с авансов под необлагаемую НДС реализацию не начисляется с 2008 года
								Продолжить;
							КонецЕсли;
						КонецЕсли;
						
						// Для СФ на аванс возможна выписка нескольких СФ (разные договора и ставки НДС).
						СтруктураОтбора = Новый Структура("ПометкаУдаления", Ложь);
						СтруктураОтбора.Вставить("ДоговорКонтрагента"	, ДоговорКонтрагента);
						СуществующийСФ = УчетНДС.НайтиПодчиненныйСчетФактуру(ДокументыОснования[0].ДокументОснование, "СчетФактураВыданный", СтруктураОтбора, Ссылка);
						Если НЕ (СуществующийСФ = Неопределено) Тогда
							ДоговорЗафиксирован = Ложь;
							Продолжить;
						КонецЕсли;
											
						Контрагент = Выборка.Контрагент;
						Если Выборка.ВалютаРасчетов <> мВалютаРегламентированногоУчета И НЕ Выборка.РасчетыВУсловныхЕдиницах Тогда
							СуммаДокумента = СуммаДокумента + СтрокаПоСтавке.ВалютнаяСумма;
						Иначе
							СуммаДокумента = СуммаДокумента + СтрокаПоСтавке.Сумма;
						КонецЕсли;
						ВалютнаяСумма = ВалютнаяСумма + СтрокаПоСтавке.ВалютнаяСумма;
						СтавкаНДС = ?(СтрокаПоСтавке.СтавкаНДС <> Неопределено, 
							СоответствиеСтавок[СтрокаПоСтавке.СтавкаНДС], 
							УчетНДС.ОбщаяРасчетнаяСтавкаНДС(Дата));
						ТаблицаАвансов = ПолучитьТаблицуАвансовПоСчетуНаОплату(СтрокаПоСтавке.Сумма, 
																УчетНДС.РассчитатьСуммуНДС(СтрокаПоСтавке.Сумма, Истина, Истина, УчетНДС.ПолучитьСтавкуНДС(СтавкаНДС)), 
																СтавкаНДС, 
																СтрокаПоСтавке.СчетНаОплату);
						ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаАвансов, Авансы);							
											
					КонецЦикла;
					
					СтрокаСообщенияТекущая = ПроверитьВозможностьЗаписиСФ(ОшибкаПриЗаполнении, Истина);
					Если ОшибкаПриЗаполнении Тогда
						СтрокаСообщения = СтрокаСообщения + ?(ПустаяСтрока(СтрокаСообщения), "", Символы.ПС) + СтрокаСообщенияТекущая;
					Иначе
						ДокументЗаполнен = Истина;
					КонецЕсли;
				Иначе	
					Для Каждого СтрокаПоСтавке Из ТаблицаПоСтавкам Цикл
						
						Контрагент 			= Выборка.Контрагент;
						ДоговорКонтрагента 	= Выборка.ДоговорКонтрагента;
						Сумма				= СтрокаПоСтавке.Сумма;
						ВалютнаяСумма		= СтрокаПоСтавке.ВалютнаяСумма;
						СтавкаНДС			= ?(ЗначениеЗаполнено(СоответствиеСтавок[СтрокаПоСтавке.СтавкаНДС]), 
							СоответствиеСтавок[СтрокаПоСтавке.СтавкаНДС],
							УчетНДС.ОбщаяРасчетнаяСтавкаНДС(Дата));
						СуммаНДС			= УчетНДС.РассчитатьСуммуНДС(Сумма, Истина, Истина, УчетНДС.ПолучитьСтавкуНДС(СтавкаНДС));
						СуммаДокумента		= Сумма;
						СчетНаОплату		= СтрокаПоСтавке.СчетНаОплату;
						ОшибкаПриЗаполнении = Ложь;
						СтрокаСообщенияТекущая = ПроверитьВозможностьЗаписиСФ(ОшибкаПриЗаполнении, Истина);
						Если ОшибкаПриЗаполнении Тогда
							СтрокаСообщения = СтрокаСообщения + ?(ПустаяСтрока(СтрокаСообщения), "", Символы.ПС) + СтрокаСообщенияТекущая;
						Иначе
							ДокументЗаполнен = Истина;
							Прервать;
						КонецЕсли;
						
					КонецЦикла;
				КонецЕсли;
			
			КонецЦикла;
			
			Если ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАванс Тогда
				Авансы.Свернуть("Номенклатура, Содержание, СтавкаНДС","Сумма, СуммаНДС");
				Если Авансы.Количество() = 0 Тогда
					ОбщегоНазначения.СообщитьОбОшибке("Не обнаружены данные для регистрации счета-фактуры на предварительную оплату.");
				КонецЕсли;	
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ДокументыОснования[0].ДокументОснование) = Тип("ДокументСсылка.КорректировкаДолга") Тогда
		
		Авансы.Очистить();
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Регистратор", ДокументыОснования[0].ДокументОснование);
		Запрос.Текст = "ВЫБРАТЬ
		               |	РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОбороты.Контрагент,
		               |	РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОбороты.ДоговорКонтрагента,
		               |	РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОбороты.СуммаРегПриход КАК Сумма,
		               |	РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОбороты.СуммаВзаиморасчетовПриход КАК ВалютнаяСумма,
		               |	РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОбороты.Сделка КАК СчетНаОплату,
		               |	РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОбороты.ДатаОплаты
		               |ИЗ
		               |	РегистрНакопления.РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.Обороты(, , Регистратор, ) КАК РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОбороты
		               |ГДЕ
		               |	РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОбороты.Регистратор = &Регистратор
		               |	И РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОбороты.Документ = &Регистратор";
		Результат = Запрос.Выполнить();
		
		Если Не Результат.Пустой() Тогда
			
			Выборка = Результат.Выбрать();
			
			Пока Выборка.Следующий() И Не ДокументЗаполнен Цикл
				
				Контрагент 			= Выборка.Контрагент;
				ДоговорКонтрагента 	= Выборка.ДоговорКонтрагента;
				Сумма				= Выборка.Сумма;
				ВалютнаяСумма		= Выборка.ВалютнаяСумма;
				СтавкаНДС			= УчетНДС.ОбщаяРасчетнаяСтавкаНДС(Дата);
				
				ТаблицаАвансов = ПолучитьТаблицуАвансовПоСчетуНаОплату(Выборка.Сумма, 
														УчетНДС.РассчитатьСуммуНДС(Выборка.Сумма, Истина, Истина, УчетНДС.ПолучитьСтавкуНДС(СтавкаНДС)), 
														СтавкаНДС, Выборка.СчетНаОплату);
				ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаАвансов, Авансы);							
				ОшибкаПриЗаполнении = Ложь;
				
				СуммаДокумента = Сумма;
				
				СтрокаСообщенияТекущая = ПроверитьВозможностьЗаписиСФ(ОшибкаПриЗаполнении, Истина);
				
				Если ОшибкаПриЗаполнении Тогда
					СтрокаСообщения = СтрокаСообщения + ?(ПустаяСтрока(СтрокаСообщения), "", Символы.ПС) + СтрокаСообщенияТекущая;
				Иначе
					ДокументЗаполнен = Истина;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ДокументыОснования[0].ДокументОснование) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда	
		
		Авансы.Очистить();
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Регистратор", ДокументыОснования[0].ДокументОснование);
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОбороты.Контрагент,
		|	РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОбороты.ДоговорКонтрагента,
		|	-РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОбороты.СуммаРегРасход КАК Сумма,
		|	-РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОбороты.СуммаВзаиморасчетовРасход КАК ВалютнаяСумма,
		|	РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОбороты.Сделка КАК СчетНаОплату,
		|	РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОбороты.ДатаОплаты
		|ИЗ
		|	РегистрНакопления.РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.Обороты(, , Регистратор, ) КАК РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОбороты
		|ГДЕ
		|	РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОбороты.Регистратор = &Регистратор
		|	И РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОбороты.Документ = &Регистратор
		|	И РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОбороты.Документ ССЫЛКА Документ.КорректировкаРеализации";
		
		Результат = Запрос.Выполнить();
		
		Если НЕ Результат.Пустой() Тогда
			
			Выборка = Результат.Выбрать();
			
			Пока Выборка.Следующий() И НЕ ДокументЗаполнен Цикл
				
				ВалютаДокумента = мВалютаРегламентированногоУчета;	
				
				Контрагент 			= Выборка.Контрагент;
				ДоговорКонтрагента 	= Выборка.ДоговорКонтрагента;
				Сумма				= Выборка.Сумма;
				ВалютнаяСумма		= Выборка.ВалютнаяСумма;
				СтавкаНДС			= УчетНДС.ОбщаяРасчетнаяСтавкаНДС(Дата);
				
				ТаблицаАвансов = ПолучитьТаблицуАвансовПоСчетуНаОплату(Выборка.Сумма, 
					УчетНДС.РассчитатьСуммуНДС(Выборка.Сумма, Истина, Истина, УчетНДС.ПолучитьСтавкуНДС(СтавкаНДС)), 
					СтавкаНДС, Выборка.СчетНаОплату);
				ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаАвансов, Авансы);							
				ОшибкаПриЗаполнении = Ложь;
				
				СуммаДокумента = Сумма;
				
				Если ВидСчетаФактуры <> Перечисления.ВидСчетаФактурыВыставленного.НаАванс
					И ВидСчетаФактуры <> Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитента Тогда
					ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАванс;
				КонецЕсли;	
				
				СтрокаСообщенияТекущая = ПроверитьВозможностьЗаписиСФ(ОшибкаПриЗаполнении, Истина);
				
				Если ОшибкаПриЗаполнении Тогда
					СтрокаСообщения = СтрокаСообщения + ?(ПустаяСтрока(СтрокаСообщения), "", Символы.ПС) + СтрокаСообщенияТекущая;
				Иначе
					ДокументЗаполнен = Истина;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;		
		
	КонецЕсли;
		
	Если ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаСуммовуюРазницу Тогда
		СуммаНДСДокумента = СуммаНДС;
	Иначе	
		СуммаНДСДокумента = Авансы.Итог("СуммаНДС");
	КонецЕсли;
	
	Если ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитента
		И Дата >= '20150101' Тогда
		СуммаДокументаКомиссия 		= Авансы.Итог("Сумма");
		СуммаНДСДокументаКомиссия 	= Авансы.Итог("СуммаНДС");
	Иначе
		СуммаДокументаКомиссия 		= 0;
		СуммаНДСДокументаКомиссия 	= 0;
	КонецЕсли;
	
	Если ОшибкаПриЗаполнении Тогда
		ДоговорКонтрагента = ТекущийДоговорКонтрагента;
		СтавкаНДС = Перечисления.СтавкиНДС.ПустаяСсылка();
		Сумма = 0;
		ВалютнаяСумма = 0;
		СуммаНДС = 0;
		СуммаДокумента = 0;
		СуммаНДСДокумента = 0;
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаСообщения);
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьТаблицуАвансовПоСчетуНаОплату(Сумма, СуммаНДС, СтавкаНДС, СчетНаОплату) Экспорт
	
	ТаблицаРезультата = Авансы.ВыгрузитьКолонки();

	СоответствиеСтавок = Новый Соответствие();
	СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.ПустаяСсылка(), Перечисления.СтавкиНДС.НДС18_118);
	СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС10, Перечисления.СтавкиНДС.НДС10_110);
	СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС18, Перечисления.СтавкиНДС.НДС18_118);
	СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС20, Перечисления.СтавкиНДС.НДС20_120);
	СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС10_110, Перечисления.СтавкиНДС.НДС10_110);
	СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС18_118, Перечисления.СтавкиНДС.НДС18_118);
	СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС20_120, Перечисления.СтавкиНДС.НДС20_120);
	
	Если Не ЗначениеЗаполнено(СтавкаНДС) Тогда
		СуммаНДС = УчетНДС.РассчитатьСуммуНДС(Сумма, Истина, Истина, УчетНДС.ПолучитьСтавкуНДС(Перечисления.СтавкиНДС.НДС18_118));
	КонецЕсли;		
	
	Если ЗначениеЗаполнено(СчетНаОплату) Тогда
		
		Запрос = Новый Запрос;
		
		Запрос.УстановитьПараметр("СчетНаОплату", СчетНаОплату);
		СтавкиНДС = Новый СписокЗначений;
		Если Не ЗначениеЗаполнено(СтавкаНДС) Тогда
			СтавкиНДС.Добавить(Перечисления.СтавкиНДС.НДС10);
			СтавкиНДС.Добавить(Перечисления.СтавкиНДС.НДС18);
			СтавкиНДС.Добавить(Перечисления.СтавкиНДС.НДС20);
		Иначе
			СоответствиеСтавокИзСчета = Новый Соответствие;
			СоответствиеСтавокИзСчета.Вставить(Перечисления.СтавкиНДС.НДС10_110, Перечисления.СтавкиНДС.НДС10);
			СоответствиеСтавокИзСчета.Вставить(Перечисления.СтавкиНДС.НДС18_118, Перечисления.СтавкиНДС.НДС18);
			СоответствиеСтавокИзСчета.Вставить(Перечисления.СтавкиНДС.НДС20_120, Перечисления.СтавкиНДС.НДС20);
			СтавкиНДС.Добавить(СтавкаНДС);
			СтавкиНДС.Добавить(СоответствиеСтавокИзСчета[СтавкаНДС]);
		КонецЕсли;
		Запрос.УстановитьПараметр("СтавкиНДС", СтавкиНДС);
		Запрос.УстановитьПараметр("ПустаяСтрока", "");
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СчетНаОплатуПокупателюТовары.Номенклатура КАК Номенклатура,
		|	&ПустаяСтрока КАК Содержание,
		|	СчетНаОплатуПокупателюТовары.СтавкаНДС КАК СтавкаНДС,
		|	СчетНаОплатуПокупателюТовары.СуммаНДС КАК СуммаНДС,
		|	ВЫБОР
		|		КОГДА СчетНаОплатуПокупателюТовары.Ссылка.СуммаВключаетНДС
		|			ТОГДА СчетНаОплатуПокупателюТовары.Сумма
		|		ИНАЧЕ СчетНаОплатуПокупателюТовары.Сумма + СчетНаОплатуПокупателюТовары.СуммаНДС
		|	КОНЕЦ КАК Сумма,
		|	ВЫБОР
		|		КОГДА СчетНаОплатуПокупателюТовары.Ссылка.СуммаВключаетНДС
		|			ТОГДА СчетНаОплатуПокупателюТовары.Сумма - СчетНаОплатуПокупателюТовары.СуммаНДС
		|		ИНАЧЕ СчетНаОплатуПокупателюТовары.Сумма
		|	КОНЕЦ КАК СуммаБезНДС,
		|	СчетНаОплатуПокупателюТовары.НомерСтроки КАК НомерСтроки,
		|	СчетНаОплатуПокупателюТовары.Ссылка.ВалютаДокумента,
		|	1 КАК ID
		|ИЗ
		|	Документ.СчетНаОплатуПокупателю.Товары КАК СчетНаОплатуПокупателюТовары
		|ГДЕ
		|	СчетНаОплатуПокупателюТовары.Ссылка = &СчетНаОплату
		|	И СчетНаОплатуПокупателюТовары.СтавкаНДС В(&СтавкиНДС)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СчетНаОплатуПокупателюУслуги.Номенклатура,
		|	СчетНаОплатуПокупателюУслуги.Содержание,
		|	СчетНаОплатуПокупателюУслуги.СтавкаНДС,
		|	СчетНаОплатуПокупателюУслуги.СуммаНДС,
		|	ВЫБОР
		|		КОГДА СчетНаОплатуПокупателюУслуги.Ссылка.СуммаВключаетНДС
		|			ТОГДА СчетНаОплатуПокупателюУслуги.Сумма
		|		ИНАЧЕ СчетНаОплатуПокупателюУслуги.Сумма + СчетНаОплатуПокупателюУслуги.СуммаНДС
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА СчетНаОплатуПокупателюУслуги.Ссылка.СуммаВключаетНДС
		|			ТОГДА СчетНаОплатуПокупателюУслуги.Сумма - СчетНаОплатуПокупателюУслуги.СуммаНДС
		|		ИНАЧЕ СчетНаОплатуПокупателюУслуги.Сумма
		|	КОНЕЦ,
		|	СчетНаОплатуПокупателюУслуги.НомерСтроки,
		|	СчетНаОплатуПокупателюУслуги.Ссылка.ВалютаДокумента,
		|	2
		|ИЗ
		|	Документ.СчетНаОплатуПокупателю.Услуги КАК СчетНаОплатуПокупателюУслуги
		|ГДЕ
		|	СчетНаОплатуПокупателюУслуги.Ссылка = &СчетНаОплату
		|	И СчетНаОплатуПокупателюУслуги.СтавкаНДС В(&СтавкиНДС)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ID,
		|	НомерСтроки";
		
		Если ТипЗнч(СчетНаОплату) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "Документ.СчетНаОплатуПокупателю", "Документ.ЗаказПокупателя");
		КонецЕсли;
		
		Результат = Запрос.Выполнить().Выгрузить();
		
		СуммаНераспределенная     = Сумма;
		СуммаНДСНераспределенная  = СуммаНДС;
		БазисНДС                  = СуммаНДС;
		ВсегоНДС                  = 0;
		
		Если Результат.Количество() <> 0 Тогда
			
			Если Сумма = 0 Тогда
				ТаблицаРезультата.Свернуть("Номенклатура, Содержание, СтавкаНДС", "Сумма, СуммаНДС");
				СтрокаСообщения = НСтр("ru = 'Не заполнена сумма аванса'");
				ОбщегоНазначения.СообщитьОбОшибке(СтрокаСообщения);
     			Возврат ТаблицаРезультата;
			КонецЕсли;
			
			Результат.Колонки.Добавить("СуммаРаспределение", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
			Результат.ЗагрузитьКолонку(РаспределитьПропорционально(Сумма, Результат.ВыгрузитьКолонку("Сумма")), "СуммаРаспределение");
						
			МассивРаспределения = Новый Массив;    			
			
			Для Каждого СтрокаРезультата Из Результат Цикл
				
				Если ДокументыОснования.Количество() = 0
					Или Не ЗначениеЗаполнено(ДокументыОснования[0].ДокументОснование) Тогда
					СтруктураКурсов = МодульВалютногоУчета.ПолучитьКурсВалюты(СтрокаРезультата.ВалютаДокумента, Дата);
				Иначе
					СтруктураКурсов = МодульВалютногоУчета.ПолучитьКурсВалюты(СтрокаРезультата.ВалютаДокумента, ДокументыОснования[0].ДокументОснование.Дата);
				КонецЕсли;
				
				Если СтрокаРезультата.ВалютаДокумента <> мВалютаРегламентированногоУчета Тогда
					СтрокаРезультата.Сумма = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаРезультата.Сумма, 
																						СтрокаРезультата.ВалютаДокумента, мВалютаРегламентированногоУчета,
																						СтруктураКурсов.Курс, 1,
																						СтруктураКурсов.Кратность, 1);
					СтрокаРезультата.СуммаБезНДС = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаРезультата.СуммаБезНДС, 
																						СтрокаРезультата.ВалютаДокумента, мВалютаРегламентированногоУчета,
																						СтруктураКурсов.Курс, 1,
																						СтруктураКурсов.Кратность, 1);
					СтрокаРезультата.СуммаНДС = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаРезультата.СуммаНДС, 
																						СтрокаРезультата.ВалютаДокумента, мВалютаРегламентированногоУчета,
																						СтруктураКурсов.Курс, 1,
																						СтруктураКурсов.Кратность, 1);
				КонецЕсли;
				
				МассивРаспределения.Очистить();
				МассивРаспределения.Добавить(СтрокаРезультата.СуммаБезНДС);
				МассивРаспределения.Добавить(СтрокаРезультата.СуммаНДС);
				
				РезультатРаспределения = ОбщегоНазначения.РаспределитьПропорционально(СтрокаРезультата.СуммаРаспределение, МассивРаспределения);
				
				Если Не РезультатРаспределения = Неопределено Тогда
					СтрокаРезультата.СуммаНДС = УчетНДС.РассчитатьСуммуНДС(СтрокаРезультата.СуммаРаспределение, Истина, Истина, УчетНДС.ПолучитьСтавкуНДС(СтавкаНДС));
					СтрокаРезультата.СуммаБезНДС = СтрокаРезультата.СуммаРаспределение - СтрокаРезультата.СуммаНДС;
					СтрокаРезультата.Сумма = СтрокаРезультата.СуммаБезНДС + СтрокаРезультата.СуммаНДС;
					
					// если есть погрешность в копейку - откорректируем её
					ВсегоНДС = ВсегоНДС + СтрокаРезультата.СуммаНДС;
					Дельта   = Окр(БазисНДС - ВсегоНДС, 2, 1);
					
					Если Макс(Дельта, -Дельта) = 0.01 Тогда
						СтрокаРезультата.СуммаНДС = СтрокаРезультата.СуммаНДС + Дельта;
					КонецЕсли;
					
					ДобавитьСтрокуАвансы(ТаблицаРезультата, СтрокаРезультата.Номенклатура, СтрокаРезультата.Содержание, СтрокаРезультата.Сумма, СтрокаРезультата.СуммаНДС, СоответствиеСтавок[СтрокаРезультата.СтавкаНДС]);
					СуммаНераспределенная 	 = СуммаНераспределенная - СтрокаРезультата.Сумма;
					СуммаНДСНераспределенная = СуммаНДСНераспределенная - СтрокаРезультата.СуммаНДС;
				КонецЕсли;
				
			КонецЦикла;	
		КонецЕсли;
		
		Если СуммаНераспределенная <> 0 Тогда
			ДобавитьСтрокуАвансы(ТаблицаРезультата, ДоговорКонтрагента.НаименованиеДляСчетаФактурыНаАванс, , СуммаНераспределенная, СуммаНДСНераспределенная, СоответствиеСтавок[СтавкаНДС]);
		КонецЕсли;
		
	Иначе
		ДобавитьСтрокуАвансы(ТаблицаРезультата, ДоговорКонтрагента.НаименованиеДляСчетаФактурыНаАванс, , Сумма, СуммаНДС, СоответствиеСтавок[СтавкаНДС]);
	КонецЕсли;
	
	ТаблицаРезультата.Свернуть("Номенклатура, Содержание, СтавкаНДС", "Сумма, СуммаНДС");
	
	Возврат ТаблицаРезультата;
	
КонецФункции

// Функция выполняет пропорциональное распределение суммы в соответствии
// с заданными коэффициентами распределения
//
// Параметры:
//		ИсхСумма - распределяемая сумма
//		МассивКоэф - массив коэффициентов распределения
//		Точность - точность округления при распределении. Необязателен.
//
//	Возврат:
//		МассивСумм - массив размерностью равный массиву коэффициентов, содержит
//			суммы в соответствии с весом коэффициента (из массива коэффициентов)
//          В случае если распределить не удалось (сумма = 0, кол-во коэф. = 0,
//          или суммарный вес коэф. = 0), тогда возвращается значение Неопределено
//
Функция РаспределитьПропорционально(Знач ИсхСумма, МассивКоэф, Знач Точность = 2, ПроверкаНулевыхЗначений = Истина)

	Если МассивКоэф.Количество() = 0 Или (ПроверкаНулевыхЗначений И ИсхСумма = 0) Или ИсхСумма = Null Тогда
		Возврат Неопределено;
	КонецЕсли;

	// Массив коэффициентов необходимо упорядочить, поэтому создадим таблицу для распределения
    УпорядоченнаяТаблица = Новый ТаблицаЗначений;
	УпорядоченнаяТаблица.Колонки.Добавить("Коэф", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17,4)));
	УпорядоченнаяТаблица.Колонки.Добавить("ИсходныйИндекс", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,0)));
	
	СуммаКоэф  = 0;

	Для К = 0 По МассивКоэф.Количество() - 1 Цикл
		СуммаКоэф = СуммаКоэф + МассивКоэф[К];
		
		СтрокаТаблицы = УпорядоченнаяТаблица.Добавить();
		СтрокаТаблицы.Коэф = МассивКоэф[К];
		СтрокаТаблицы.ИсходныйИндекс = К;
	КонецЦикла;

	УпорядоченнаяТаблица.Сортировать("Коэф Убыв");
	
	МассивСумм = Новый Массив(УпорядоченнаяТаблица.Количество());
	
	Для каждого СтрокаТаблицы Из УпорядоченнаяТаблица Цикл
		// Возвращаемый результат должен быть в том же порядке
		МассивСумм[СтрокаТаблицы.ИсходныйИндекс] = ?(СуммаКоэф <> 0, Окр(ИсхСумма * МассивКоэф[СтрокаТаблицы.ИсходныйИндекс] / СуммаКоэф, Точность, 1), 0);
		
		ИсхСумма = ИсхСумма - МассивСумм[СтрокаТаблицы.ИсходныйИндекс]; 
		СуммаКоэф = СуммаКоэф - МассивКоэф[СтрокаТаблицы.ИсходныйИндекс]; 
	КонецЦикла;

	Возврат МассивСумм;

КонецФункции // РаспределитьПропорционально()

Процедура ДобавитьСтрокуАвансы(ТаблицаРезультата, Номенклатура, Содержание = "", Сумма, СуммаНДС, СтавкаНДС)
	
	НоваяСтрока = ТаблицаРезультата.Добавить();
	НоваяСтрока.Номенклатура = Номенклатура;
	НоваяСтрока.Содержание = Содержание;
	
	Если ПустаяСтрока(НоваяСтрока.Содержание) 
		И ЗначениеЗаполнено(НоваяСтрока.Номенклатура)
		И НоваяСтрока.Номенклатура.Услуга Тогда
			НоваяСтрока.Содержание = НоваяСтрока.Номенклатура.НаименованиеПолное;
		Если ПустаяСтрока(НоваяСтрока.Содержание) Тогда
			НоваяСтрока.Содержание = НоваяСтрока.Номенклатура.Наименование;
		КонецЕсли;
	КонецЕсли;
	НоваяСтрока.Сумма     = Сумма;
	НоваяСтрока.СуммаНДС  = СуммаНДС;
	НоваяСтрока.СтавкаНДС = СтавкаНДС;
		
КонецПроцедуры

Процедура ОпределениеПараметровСчетаФактурыНалоговыйАгент(ДокументЗаполнен) Экспорт
	
	Если ДокументыОснования.Количество()=0 
		Или Не ЗначениеЗаполнено(ДокументыОснования[0].ДокументОснование) тогда
		// Основание не выбрано, параметры не определяем
		Возврат;
	КонецЕсли; 
	
	ВалютаДокумента = мВалютаРегламентированногоУчета;	
	ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НалоговыйАгент;
	
	СтрокаСообщения = "";
	ОшибкаПриЗаполнении = Ложь;
	ДокументЗаполнен = Ложь;
	ТекущийДоговорКонтрагента = ДоговорКонтрагента;
		
	ДокументОплаты = ДокументыОснования[0].ДокументОснование;
	ДокументОплатыМетаданные = ДокументОплаты.Метаданные();
	
	Если ДокументОплатыМетаданные.ТабличныеЧасти.Найти("РасшифровкаПлатежа") <> Неопределено Тогда
		Если ДокументОплатыМетаданные.ТабличныеЧасти.РасшифровкаПлатежа.Реквизиты.Найти("СчетУчетаРасчетовПоАвансам") = Неопределено Тогда
			Возврат;
		КонецЕсли;
	
		Запрос = Новый Запрос;
		
		
		Запрос.УстановитьПараметр("СчетУчетаРасчетовПоАвансам", ДокументОплаты.РасшифровкаПлатежа.ВыгрузитьКолонку("СчетУчетаРасчетовПоАвансам"));
		Запрос.УстановитьПараметр("СчетУчетаРасчетовСКонтрагентом", ДокументОплаты.РасшифровкаПлатежа.ВыгрузитьКолонку("СчетУчетаРасчетовСКонтрагентом"));
		Запрос.УстановитьПараметр("ДокументОснование", ДокументОплаты);
		Запрос.УстановитьПараметр("СписокДоговоров", ДокументОплаты.РасшифровкаПлатежа.ВыгрузитьКолонку("ДоговорКонтрагента"));
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДоговорыКонтрагентов.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ДоговораПоДокументу
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|ГДЕ
		|	ДоговорыКонтрагентов.Ссылка В(&СписокДоговоров)
		|	И (ДоговорыКонтрагентов.УчетАгентскогоНДС
		|			ИЛИ ДоговорыКонтрагентов.НалоговыйАгентПоОплате)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СУММА(РасчетыПоПриобретениюВУсловныхЕдиницахОрганизации.СуммаРег) КАК СуммаОплаты,
		|	РасчетыПоПриобретениюВУсловныхЕдиницахОрганизации.Контрагент,
		|	РасчетыПоПриобретениюВУсловныхЕдиницахОрганизации.ДоговорКонтрагента,
		|	ВЫБОР
		|		КОГДА РасчетыПоПриобретениюВУсловныхЕдиницахОрганизации.ДатаОплаты <> ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА РасчетыПоПриобретениюВУсловныхЕдиницахОрганизации.ДатаОплаты
		|		ИНАЧЕ ЕСТЬNULL(РасчетыПоПриобретениюВУсловныхЕдиницахОрганизации.Документ.Дата, ДАТАВРЕМЯ(1, 1, 1))
		|	КОНЕЦ КАК ДатаРасчетногоДокумента
		|ИЗ
		|	ДоговораПоДокументу КАК ДоговораПоДокументу
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыПоПриобретениюВУсловныхЕдиницахОрганизации КАК РасчетыПоПриобретениюВУсловныхЕдиницахОрганизации
		|		ПО ДоговораПоДокументу.Ссылка = РасчетыПоПриобретениюВУсловныхЕдиницахОрганизации.ДоговорКонтрагента
		|ГДЕ
		|	(РасчетыПоПриобретениюВУсловныхЕдиницахОрганизации.СчетОплаты В (&СчетУчетаРасчетовПоАвансам)
		|			ИЛИ РасчетыПоПриобретениюВУсловныхЕдиницахОрганизации.СчетОплаты В (&СчетУчетаРасчетовСКонтрагентом))
		|	И РасчетыПоПриобретениюВУсловныхЕдиницахОрганизации.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|	И РасчетыПоПриобретениюВУсловныхЕдиницахОрганизации.Регистратор = &ДокументОснование
		|
		|СГРУППИРОВАТЬ ПО
		|	РасчетыПоПриобретениюВУсловныхЕдиницахОрганизации.Контрагент,
		|	РасчетыПоПриобретениюВУсловныхЕдиницахОрганизации.ДоговорКонтрагента,
		|	ВЫБОР
		|		КОГДА РасчетыПоПриобретениюВУсловныхЕдиницахОрганизации.ДатаОплаты <> ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА РасчетыПоПриобретениюВУсловныхЕдиницахОрганизации.ДатаОплаты
		|		ИНАЧЕ ЕСТЬNULL(РасчетыПоПриобретениюВУсловныхЕдиницахОрганизации.Документ.Дата, ДАТАВРЕМЯ(1, 1, 1))
		|	КОНЕЦ";
			
	
		Результат = Запрос.Выполнить();

		Если Не Результат.Пустой() Тогда
			
			Выборка = Результат.Выбрать();
			Сумма = 0;
			СуммаДокумента = 0;
			ТаблицаОплат = Неопределено;
			
			Пока Выборка.Следующий() Цикл
				
				Контрагент = Выборка.Контрагент;
				ДоговорКонтрагента = Выборка.ДоговорКонтрагента;
				СтавкаНДС = УчетНДС.ОбщаяРасчетнаяСтавкаНДС(Выборка.ДатаРасчетногоДокумента);
				СуммаНДС = УчетНДС.РассчитатьСуммуНДС(Выборка.СуммаОплаты, Истина, Ложь, УчетНДС.ПолучитьСтавкуНДС(СтавкаНДС));
				Сумма = Сумма + Выборка.СуммаОплаты + СуммаНДС;
				ВалютнаяСумма = Сумма;
					
				ТаблицаОплат = 
					ПолучитьТаблицуАвансовПоСчетуНаОплату(Выборка.СуммаОплаты + СуммаНДС, СуммаНДС, СтавкаНДС, Неопределено);
				ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаОплат, Авансы);
				
			КонецЦикла;
			
			Если Авансы.Количество() > 0 Тогда
				Авансы.Свернуть("Номенклатура, Содержание, СтавкаНДС", "Сумма, СуммаНДС");
			КонецЕсли;
			
			СуммаДокумента = Сумма;
				
			ОшибкаПриЗаполнении = Ложь;
			СтрокаСообщенияТекущая = ПроверитьВозможностьЗаписиСФ(ОшибкаПриЗаполнении, Истина);
			Если ОшибкаПриЗаполнении Тогда
				СтрокаСообщения = СтрокаСообщения + ?(ПустаяСтрока(СтрокаСообщения), "", Символы.ПС) + СтрокаСообщенияТекущая;
			Иначе
				ДокументЗаполнен = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	СуммаНДСДокумента = Авансы.Итог("СуммаНДС");
	
	Если ОшибкаПриЗаполнении Тогда
		ДоговорКонтрагента = ТекущийДоговорКонтрагента;
		СтавкаНДС = Перечисления.СтавкиНДС.ПустаяСсылка();
		Сумма = 0;
		ВалютнаяСумма = 0;
		СуммаНДС = 0;
		СуммаДокумента = 0;
		СуммаНДСДокумента = 0;
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаСообщения);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьНаОснованииИсправления(Основание, СтрокаОснованиеВТабличнойЧасти)
	
	Если ТипЗнч(Основание.ИсправляемыйДокументРеализации) = Тип("ДокументСсылка.КорректировкаРеализации")
		И ЗначениеЗаполнено(Основание.ИсправляемыйДокументРеализации)
		И Основание.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки 
		И Основание.ИсправляемыйДокументРеализации.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение Тогда
		УточнениеСообщения = "корректировочных"; 
	Иначе
		УточнениеСообщения = "исправленных";
	КонецЕсли;
	
	ОснованиеДляВидаОперации = УчетНДС.ПолучитьИсправляемыйДокументРеализации(Основание);
	ВедетсяУчетНДСПоФЗ56 = УчетНДС.ВедетсяУчетНДСПоФЗ56(Дата);
	
	Если НЕ Основание.КорректироватьНДС Тогда
		ВызватьИсключение "Для корректировки реализации с отражением корректировки ""Только в печатной форме"" счет-фактура не выставляется";
	КонецЕсли;
	
	Если ТипЗнч(Основание.ИсправляемыйДокументРеализации) = Тип("ДокументСсылка.КорректировкаРеализации")
		И ЗначениеЗаполнено(Основание.ИсправляемыйДокументРеализации)
		И Основание.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки 
		И Основание.ИсправляемыйДокументРеализации.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение Тогда
		
		ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный;
		ЭтотОбъект.Исправление = Истина;
	ИначеЕсли Основание.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение Тогда
		
		ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный;
		ЭтотОбъект.Исправление = Ложь;
	Иначе		
		
		СписокТиповНаАванс = ПолучитьСписокТиповПоВидуСчетаФактуры(Перечисления.ВидСчетаФактурыВыставленного.НаАванс);
		СписокТиповНалоговыйАгент = ПолучитьСписокТиповПоВидуСчетаФактуры(Перечисления.ВидСчетаФактурыВыставленного.НалоговыйАгент);
		СписокТиповКорректировочный = ПолучитьСписокТиповПоВидуСчетаФактуры(Перечисления.ВидСчетаФактурыВыставленного.Корректировочный);
		СписокТиповНаРеализацию = ПолучитьСписокТиповПоВидуСчетаФактуры(Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию);
		
		Если СписокТиповНалоговыйАгент.Найти(ТипЗнч(ОснованиеДляВидаОперации)) <> Неопределено Тогда
			ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НалоговыйАгент;
		ИначеЕсли СписокТиповНаАванс.Найти(ТипЗнч(ОснованиеДляВидаОперации)) <> Неопределено Тогда			
			Если ТипЗнч(ОснованиеДляВидаОперации) = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах")
				ИЛИ ТипЗнч(ОснованиеДляВидаОперации) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя")
				ИЛИ ТипЗнч(ОснованиеДляВидаОперации) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
				ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию;
			Иначе
				ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАванс;
			КонецЕсли;
		ИначеЕсли СписокТиповКорректировочный.Найти(ТипЗнч(ОснованиеДляВидаОперации)) <> Неопределено Тогда
			ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный;	
		Иначе
			ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию;
		КонецЕсли;
		
		ЭтотОбъект.Исправление = Истина;
		
	КонецЕсли;
	
	ИсправляемыйСчетФактура = УчетНДС.НайтиПодчиненныйСчетФактуру(Основание.ИсправляемыйДокументРеализации, "СчетФактураВыданный");
	
	ДокументРеализации = Основание.ДокументРеализации;
	
	КорректировкаКорректировочногоСчетаФактуры = Ложь;
	
	Если ТипЗнч(УчетНДС.ПолучитьИсправляемыйДокументРеализации(ДокументРеализации, Ложь)) = Тип("ДокументСсылка.КорректировкаРеализации") 
		И Основание.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение Тогда
		КорректировкаКорректировочногоСчетаФактуры = Истина;
	КонецЕсли;	
	
	// Определение кода вида операции для исправления
	// Определение номера и даты исходного документа
	КодВидаОперацииОснования = "";
	НомерИсправленияСФ = 0;
	ВерсияКодовВидовОпераций = УчетНДС.ВерсияКодовВидовОпераций(Дата);
	
	ИсходныйДокумент = Неопределено;
	ИспользоватьПараметрыСчетаФактуры = Ложь;
	Если ТипЗнч(Основание.ДокументРеализации) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
		ИспользоватьПараметрыСчетаФактуры = Истина;
		ИсходныйДокумент = Основание.ДокументРеализации;
	ИначеЕсли ТипЗнч(Основание.ДокументРеализации) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
		ИсходныйДокумент = УчетНДС.ПолучитьИсправляемыйДокументРеализации(Основание.ДокументРеализации);
		Если ТипЗнч(ИсходныйДокумент) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
			ИспользоватьПараметрыСчетаФактуры = Истина;
		КонецЕсли;
	КонецЕсли;

	Если ИспользоватьПараметрыСчетаФактуры И ЗначениеЗаполнено(ИсходныйДокумент) Тогда
		// Основанием первоначальной корректировки является документ "Счет-фактура выданный"
		// реквизиты необходимо взять из этого счета-фактуры
		
		ПараметрыСчетаФактуры = Новый Структура("НомерИсходногоДокумента, ДатаИсходногоДокумента");
			
		ДанныеИсходногоДокумента = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(ИсходныйДокумент,
			"КодВидаОперации,КодВидаОперацииНаУменьшение,Дата");
			
		КодВидаОперацииОснования = ДанныеИсходногоДокумента.КодВидаОперации;
		
		ПараметрыСчетаФактуры.НомерИсходногоДокумента = ОбщегоНазначения.ПолучитьНомерНаПечать(ИсходныйДокумент.ПолучитьОбъект());
		ПараметрыСчетаФактуры.ДатаИсходногоДокумента  = ДанныеИсходногоДокумента.Дата;
		
		Если ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный Тогда
			ЗаполнитьЗначенияСвойств(СтрокаОснованиеВТабличнойЧасти, ПараметрыСчетаФактуры);
		Иначе
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, ПараметрыСчетаФактуры);
		КонецЕсли;
		
	Иначе
		
		Запрос = Новый Запрос;
		ИсходныйДокумент = УчетНДС.ПолучитьИсправляемыйДокументРеализации(Основание.ДокументРеализации);
		
		Запрос.УстановитьПараметр("ИсходныйДокумент", ИсходныйДокумент);
		Запрос.УстановитьПараметр("КорректировочныйСчетФактура", Перечисления.ВидСчетаФактурыВыставленного.Корректировочный);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СчетФактураВыданныйДокументыОснования.Ссылка.КодВидаОперации КАК КодВидаОперации,
		|	СчетФактураВыданныйДокументыОснования.Ссылка.Ссылка КАК Ссылка,
		|	ВЫБОР
		|		КОГДА СчетФактураВыданныйДокументыОснования.Ссылка.ВидСчетаФактуры = &КорректировочныйСчетФактура
		|			ТОГДА СчетФактураВыданныйДокументыОснования.НомерИсходногоДокумента
		|		ИНАЧЕ СчетФактураВыданныйДокументыОснования.Ссылка.Номер
		|	КОНЕЦ КАК НомерИсходногоДокумента,
		|	ВЫБОР
		|		КОГДА СчетФактураВыданныйДокументыОснования.Ссылка.ВидСчетаФактуры = &КорректировочныйСчетФактура
		|			ТОГДА СчетФактураВыданныйДокументыОснования.ДатаИсходногоДокумента
		|		ИНАЧЕ СчетФактураВыданныйДокументыОснования.Ссылка.Дата
		|	КОНЕЦ КАК ДатаИсходногоДокумента,
		|	ВЫБОР
		|		КОГДА СчетФактураВыданныйДокументыОснования.Ссылка.ВидСчетаФактуры = &КорректировочныйСчетФактура
		|			ТОГДА СчетФактураВыданныйДокументыОснования.НомерИсправленияИсходногоДокумента
		|		КОГДА НЕ СчетФактураВыданныйДокументыОснования.Ссылка.ВидСчетаФактуры = &КорректировочныйСчетФактура
		|				И СчетФактураВыданныйДокументыОснования.Ссылка.Исправление
		|			ТОГДА СчетФактураВыданныйДокументыОснования.Ссылка.НомерИсправления
		|	КОНЕЦ КАК НомерИсправленияИсходногоДокумента,
		|	ВЫБОР
		|		КОГДА СчетФактураВыданныйДокументыОснования.Ссылка.ВидСчетаФактуры = &КорректировочныйСчетФактура
		|			ТОГДА СчетФактураВыданныйДокументыОснования.ДатаИсправленияИсходногоДокумента
		|		КОГДА НЕ СчетФактураВыданныйДокументыОснования.Ссылка.ВидСчетаФактуры = &КорректировочныйСчетФактура
		|				И СчетФактураВыданныйДокументыОснования.Ссылка.Исправление
		|			ТОГДА СчетФактураВыданныйДокументыОснования.Ссылка.Дата
		|	КОНЕЦ КАК ДатаИсправленияИсходногоДокумента,
		|	ВЫБОР
		|		КОГДА СчетФактураВыданныйДокументыОснования.Ссылка.Исправление
		|			ТОГДА СчетФактураВыданныйДокументыОснования.Ссылка.НомерИсправления
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК НомерИсправления,
		|	СчетФактураВыданныйДокументыОснования.Ссылка.НомерИсправляемогоКорректировочногоДокумента КАК НомерИсправляемогоКорректировочногоДокумента,
		|	СчетФактураВыданныйДокументыОснования.Ссылка.ДатаИсправляемогоКорректировочногоДокумента КАК ДатаИсправляемогоКорректировочногоДокумента,
		|	ВЫБОР
		|		КОГДА СчетФактураВыданныйДокументыОснования.Ссылка.ВидСчетаФактуры = &КорректировочныйСчетФактура
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК КорректировочныйСчетФактура,
		|	СчетФактураВыданныйДокументыОснования.Ссылка.Исправление КАК Исправление,
		|	СчетФактураВыданныйДокументыОснования.Ссылка.Дата КАК Дата,
		|	СчетФактураВыданныйДокументыОснования.Ссылка.ИдентификаторГосКонтракта
		|ИЗ
		|	Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураВыданныйДокументыОснования
		|ГДЕ
		|	СчетФактураВыданныйДокументыОснования.ДокументОснование = &ИсходныйДокумент
		|	И НЕ СчетФактураВыданныйДокументыОснования.Ссылка.Исправление
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка";
		
		РезультатЗапроса = Запрос.Выполнить().Выгрузить();
		
		Если РезультатЗапроса.Количество() > 0 Тогда
			
			ТекущаяСтрока = РезультатЗапроса[0];
			
			Если КорректировкаКорректировочногоСчетаФактуры Тогда
				
				СтрокаОснованиеВТабличнойЧасти.НомерИсходногоДокумента = ОбщегоНазначения.ПолучитьНомерНаПечать(ТекущаяСтрока.Ссылка.ПолучитьОбъект());	
				СтрокаОснованиеВТабличнойЧасти.ДатаИсходногоДокумента  = ТекущаяСтрока.Дата;
				
				НомерИсправляемогоКорректировочногоДокумента = ТекущаяСтрока.НомерИсправляемогоКорректировочногоДокумента;
				ДатаИсправляемогоКорректировочногоДокумента  = ТекущаяСтрока.ДатаИсправляемогоКорректировочногоДокумента;
				
				ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный;
				
			Иначе
				
				ПараметрыСчетаФактуры = Новый Структура("НомерИсходногоДокумента, ДатаИсходногоДокумента, НомерИсправленияИсходногоДокумента,
					|ДатаИсправленияИсходногоДокумента, УчитыватьИсправлениеИсходногоДокумента");
				
				НомерИсправленияСФ  = ТекущаяСтрока.НомерИсправления;
				
				Если НЕ ТекущаяСтрока.КорректировочныйСчетФактура И НЕ ТекущаяСтрока.Исправление Тогда
					ПараметрыСчетаФактуры.НомерИсходногоДокумента = ОбщегоНазначения.ПолучитьНомерНаПечать(ТекущаяСтрока.Ссылка.ПолучитьОбъект());
				Иначе
					ПараметрыСчетаФактуры.НомерИсходногоДокумента = ТекущаяСтрока.НомерИсходногоДокумента;
				КонецЕсли;
				
				ПараметрыСчетаФактуры.ДатаИсходногоДокумента  = ТекущаяСтрока.ДатаИсходногоДокумента;
				
				ПараметрыСчетаФактуры.НомерИсправленияИсходногоДокумента = ТекущаяСтрока.НомерИсправленияИсходногоДокумента;
				ПараметрыСчетаФактуры.ДатаИсправленияИсходногоДокумента  = ТекущаяСтрока.ДатаИсправленияИсходногоДокумента;
				
				НомерИсправляемогоКорректировочногоДокумента = ТекущаяСтрока.НомерИсправляемогоКорректировочногоДокумента;
				ДатаИсправляемогоКорректировочногоДокумента  = ТекущаяСтрока.ДатаИсправляемогоКорректировочногоДокумента;
				
				Если ТекущаяСтрока.КорректировочныйСчетФактура 
					И ВидСчетаФактуры <> Перечисления.ВидСчетаФактурыВыставленного.Корректировочный Тогда
					ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный;
				КонецЕсли;
				
				Если ТекущаяСтрока.КорректировочныйСчетФактура И НЕ ТекущаяСтрока.Исправление Тогда
					НомерИсправляемогоКорректировочногоДокумента = ОбщегоНазначения.ПолучитьНомерНаПечать(ТекущаяСтрока.Ссылка.ПолучитьОбъект());
					ДатаИсправляемогоКорректировочногоДокумента  = ТекущаяСтрока.Ссылка.Дата;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ТекущаяСтрока.НомерИсправленияИсходногоДокумента)
					ИЛИ ЗначениеЗаполнено(ТекущаяСтрока.ДатаИсправленияИсходногоДокумента) Тогда
					ПараметрыСчетаФактуры.УчитыватьИсправлениеИсходногоДокумента = Истина;
				КонецЕсли;
				
				Если ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный Тогда
					ЗаполнитьЗначенияСвойств(СтрокаОснованиеВТабличнойЧасти, ПараметрыСчетаФактуры);
				Иначе
					ЗаполнитьЗначенияСвойств(ЭтотОбъект, ПараметрыСчетаФактуры);
				КонецЕсли;
				
			КонецЕсли;
			
			КодВидаОперацииОснования = ТекущаяСтрока.КодВидаОперации;
			
			Если ВедетсяУчетНДСПоФЗ56 
				И НЕ ЗначениеЗаполнено(ИдентификаторГосКонтракта) Тогда 
				ИдентификаторГосКонтракта = ТекущаяСтрока.ИдентификаторГосКонтракта;
			КонецЕсли;
			
		ИначеЕсли ЭтотОбъект.Исправление Тогда
			НомерИсправленияСФ = 0;
		КонецЕсли;
		
	КонецЕсли;
	
	// Определение кода вида операции для исправления
	// и номера исправления
	Запрос = Новый Запрос;		
	Запрос.УстановитьПараметр("ИсходныйДокумент", Основание.ДокументРеализации);		
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СчетФактураВыданныйДокументыОснования.Ссылка.НомерИсправления КАК НомерИсправления,
	|	СчетФактураВыданныйДокументыОснования.Ссылка.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураВыданныйДокументыОснования
	|ГДЕ
	|	СчетФактураВыданныйДокументыОснования.ДокументОснование = &ИсходныйДокумент
	|	И СчетФактураВыданныйДокументыОснования.Ссылка.Исправление
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка";
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	Если РезультатЗапроса.Количество() > 0 Тогда
		ТекущаяСтрока = РезультатЗапроса[0];
		НомерИсправленияСФ = Макс(НомерИсправленияСФ, ТекущаяСтрока.НомерИсправления);			
		
		Если ЭтотОбъект.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный Тогда
			Если НЕ СтрокаОснованиеВТабличнойЧасти.УчитыватьИсправлениеИсходногоДокумента Тогда
				Если ЗначениеЗаполнено(ТекущаяСтрока.НомерИсправления) Тогда
					СтрокаОснованиеВТабличнойЧасти.НомерИсправленияИсходногоДокумента = ТекущаяСтрока.НомерИсправления;
					СтрокаОснованиеВТабличнойЧасти.ДатаИсправленияИсходногоДокумента  = ТекущаяСтрока.Ссылка.Дата;
					СтрокаОснованиеВТабличнойЧасти.УчитыватьИсправлениеИсходногоДокумента = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	ДоговорКонтрагента = Основание.ДоговорКонтрагента;
	
	УстановитьКодВидаОперации(КодВидаОперацииОснования);
	
	Если ЗначениеЗаполнено(ЭтотОбъект.ИсправляемыйСчетФактура) Тогда
		ЭтотОбъект.КППКонтрагента = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ЭтотОбъект.ИсправляемыйСчетФактура, "КППКонтрагента");
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ЭтотОбъект.КППКонтрагента) И ЭтотОбъект.ДокументыОснования.Количество() > 0 Тогда
		ЭтотОбъект.КППКонтрагента = УчетНДС.ПолучитьКПППодразделенияКонтрагента(ДокументыОснования[0].ДокументОснование, "Грузополучатель");
	КонецЕсли;
	
	Если ЭтотОбъект.Исправление Тогда		
		ЭтотОбъект.НомерИсправления = НомерИсправленияСФ + 1;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьНаОснованииСчетаФактуры(Основание)
	
	Если Основание.ВидСчетаФактуры <> Перечисления.ВидСчетаФактурыВыставленного.НаАванс
		И Основание.ВидСчетаФактуры <> Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитента
		И Основание.ВидСчетаФактуры <> Перечисления.ВидСчетаФактурыВыставленного.НалоговыйАгент Тогда
		Возврат;
	КонецЕсли;	
	
	ЭтотОбъект.Дата = ОбщегоНазначения.ПолучитьРабочуюДату();
	Если УчетНДС.ПолучитьВерсиюПостановления(ЭтотОбъект.Дата) = 1 Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Основание, , "Номер,Дата,Проведен,ПометкаУдаления");
		
	СтрокаОснования = ДокументыОснования.Добавить();
	СтрокаОснования.ДокументОснование = ДокументОснование;
	
	Для Каждого СтрокаАванса Из Основание.Авансы Цикл 
		НоваяСтрока = Авансы.Добавить();		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаАванса);
	КонецЦикла;
	
	Исправление = Истина;		
	НомерИсправления = НомерИсправления + 1;
	Выставлен = Ложь;
	ДатаВыставления = '00010101';
	
	Если Основание.Исправление Тогда
		ИсправляемыйСчетФактура = Основание.ИсправляемыйСчетФактура;
	Иначе
		ИсправляемыйСчетФактура = Основание;
	КонецЕсли;
			
	Если НЕ Основание.Исправление Тогда
		ЭтотОбъект.НомерИсходногоДокумента = ОбщегоНазначения.ПолучитьНомерНаПечать(Основание);
		ЭтотОбъект.ДатаИсходногоДокумента  = Основание.Дата;
	КонецЕсли;
	
	Если Основание.ДатаНомерДокументовОплаты.Количество() <> 0 Тогда
		СтрокаПРД = ДатаНомерДокументовОплаты.Добавить();
		СтрокаПРД.ДатаПлатежноРасчетногоДокумента  = Основание.ДатаНомерДокументовОплаты[0].ДатаПлатежноРасчетногоДокумента;
		СтрокаПРД.НомерПлатежноРасчетногоДокумента = Основание.ДатаНомерДокументовОплаты[0].НомерПлатежноРасчетногоДокумента;
	КонецЕсли;
	
	УстановитьКодВидаОперации();
		
КонецПроцедуры	

Процедура ЗаполнитьДатуИНомерВходящегоДокумента() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.Документ КАК ДокументОплаты
	|ИЗ
	|	РегистрНакопления.РасчетыПоРеализацииВУсловныхЕдиницахОрганизации КАК РасчетыПоРеализацииВУсловныхЕдиницахОрганизации
	|ГДЕ
	|	РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.Регистратор В(&СписокОснований)
	|	И РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	И НЕ РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.Документ ССЫЛКА Документ.КорректировкаРеализации
	|	И РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.Документ <> РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.Регистратор
	|	И РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.СуммаРег > 0";
				   
	Запрос.УстановитьПараметр("СписокОснований", ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(ДокументыОснования.ВыгрузитьКолонку("ДокументОснование"),Истина));
	Запрос.УстановитьПараметр("КонецПериода", Новый Граница(КонецДня(Дата),ВидГраницы.Включая));

	ЗапросПоДокументуОплаты = Новый Запрос;
	НачальныйТекстЗапроса = 
	"ВЫБРАТЬ
	|	ДокументОплаты.НомерВходящегоДокумента КАК Номер,
	|   ДокументОплаты.ДатаВходящегоДокумента КАК Дата
	|ИЗ
	|   %ИмяТаблицыДокумента% КАК ДокументОплаты
	|ГДЕ
	|   ДокументОплаты.Ссылка = &Ссылка";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если НЕ ЗначениеЗаполнено(Выборка.ДокументОплаты) Тогда
			Продолжить;
		КонецЕсли;
		ВходящийНомер = НЕ(Выборка.ДокументОплаты.Метаданные().Реквизиты.Найти("ДатаВходящегоДокумента") = Неопределено);
		ТекстЗапроса = ?(НЕ ВходящийНомер, СтрЗаменить(НачальныйТекстЗапроса, "ВходящегоДокумента", Символы.НПП), НачальныйТекстЗапроса);
		ЗапросПоДокументуОплаты.Текст = СтрЗаменить(ТекстЗапроса, "%ИмяТаблицыДокумента%", Выборка.ДокументОплаты.Метаданные().ПолноеИмя());
		ЗапросПоДокументуОплаты.УстановитьПараметр("Ссылка", Выборка.ДокументОплаты);
		ВыборкаПоДокументуОплаты = ЗапросПоДокументуОплаты.Выполнить().Выбрать();
		
		Если ВыборкаПоДокументуОплаты.Следующий() Тогда
			НовыйПРД = ДатаНомерДокументовОплаты.Добавить();
			НовыйПРД.ДатаПлатежноРасчетногоДокумента  = ВыборкаПоДокументуОплаты.Дата;
			НовыйПРД.НомерПлатежноРасчетногоДокумента = ?(ВходящийНомер, ВыборкаПоДокументуОплаты.Номер, ОбщегоНазначения.ПолучитьНомерНаПечать(Выборка.ДокументОплаты));
		КонецЕсли;	
	КонецЦикла;
    	
КонецПроцедуры

// Проверка возможности выписки счета-фактуры (на наличие существующих СФ)
Функция ПроверитьВозможностьЗаписиСФ(Отказ, УдалятьЛишниеСтроки = Ложь) Экспорт
	
	СтрокаСообщения = "";
	СписокВидовСчетовФактур = Новый Массив();
	Если ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАванс
		ИЛИ ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.КорректировочныйНаАванс Тогда
		СписокВидовСчетовФактур.Добавить(Перечисления.ВидСчетаФактурыВыставленного.НаАванс);
		СписокВидовСчетовФактур.Добавить(Перечисления.ВидСчетаФактурыВыставленного.КорректировочныйНаАванс);
	Иначе
		СписокВидовСчетовФактур.Добавить(ВидСчетаФактуры);
	КонецЕсли;
	
	СтруктураОтбора = Новый Структура("ВидСчетаФактуры, ПометкаУдаления, Контрагент, ДоговорКонтрагента, НомерИсправления, ИсправляемыйСчетФактура", 
		СписокВидовСчетовФактур, Ложь, Контрагент, ДоговорКонтрагента, НомерИсправления, ИсправляемыйСчетФактура);
		
	Если Исправление Тогда
		
		СуществующийСФ = УчетНДС.НайтиПодчиненныйСчетФактуру(ДокументыОснования[0].ДокументОснование, "СчетФактураВыданный", СтруктураОтбора, Ссылка);
		
		Если НЕ СуществующийСФ = Неопределено Тогда
			Реквизиты = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(СуществующийСФ, "НомерИсправления, ИсправляемыйСчетФактура"); 
			Если Реквизиты.НомерИсправления = НомерИсправления
				И Реквизиты.ИсправляемыйСчетФактура = ИсправляемыйСчетФактура Тогда
				
				СтрокаСообщения = "На основании документа «" + ИсправляемыйСчетФактура + "» уже введен исправленный счет-фактура "
				+ Символы.ПС + "«" +Строка(СуществующийСФ) + "» с номером исправления «" + НомерИсправления + "»";
				
				Отказ = Истина;
				Возврат СтрокаСообщения;
				
			КонецЕсли;	
		КонецЕсли;	
	КонецЕсли;

	Если ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАванс
		ИЛИ ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.КорректировочныйНаАванс
		ИЛИ ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитента
		ИЛИ ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НалоговыйАгент Тогда
					
		// Для СФ на аванс и СФ налогового агента возможна выписка нескольких СФ (разные договоры).
		СтруктураОтбора.Вставить("СтавкиНДС", Авансы.ВыгрузитьКолонку("СтавкаНДС"));
		СтруктураОтбора.Вставить("Контрагент", Контрагент);
		
		Если ТипЗнч(ДокументыОснования[0].ДокументОснование) = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") Тогда
			СтруктураОтбора.Вставить("Дата", Дата);
		КонецЕсли; 
	    		
		СуществующийСФ = УчетНДС.НайтиПодчиненныйСчетФактуру(ДокументыОснования[0].ДокументОснование, "СчетФактураВыданный", СтруктураОтбора, Ссылка);
		
		Если Не СуществующийСФ = Неопределено Тогда
			
			СтрокаСообщения = "Для указанного документа-основания уже введен счет-фактура " 
				+ ?(ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАванс
				ИЛИ ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитента, "на аванс", "налогового агента") + "
				|по договору """+ДоговорКонтрагента+""":"+Символы.ПС
				+ " - """+ Строка(СуществующийСФ)+"""";
			
			Если УдалятьЛишниеСтроки Тогда
				Авансы.Очистить();
			КонецЕсли;
			
			Отказ = Не (УдалятьЛишниеСтроки И Авансы.Количество() <> 0);
		КонецЕсли;
		
	ИначеЕсли ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаСуммовуюРазницу Тогда
		
		//Для СФ на суммовую разницу возможна выписка нескольких СФ (разные ставки НДС).
		
		СтруктураОтбора.Вставить("СтавкаНДС", СтавкаНДС);
		
		СуществующийСФ = УчетНДС.НайтиПодчиненныйСчетФактуру(ДокументыОснования[0].ДокументОснование, "СчетФактураВыданный", СтруктураОтбора, Ссылка);
		
		Если не СуществующийСФ = неопределено Тогда
			СтрокаСообщения = "Для указанного документа-основания уже введен счет-фактура на суммовую разницу со ставкой НДС «"+СтавкаНДС+"»:"
			+ Символы.ПС+" - «"+ Строка(СуществующийСФ)+"»";
			Отказ = Истина;
		КонецЕсли;
	Иначе
		
		Для каждого ТекущееОснование Из ДокументыОснования Цикл
			
			Если ТипЗнч(ТекущееОснование.ДокументОснование) = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") Тогда
				ТаблицаПоиска = ТекущееОснование.ДокументОснование.Покупатели;	
				СтруктураПоиска = Новый Структура("СчетФактура", Ссылка);
				МассивСтрок = ТаблицаПоиска.НайтиСтроки(СтруктураПоиска);
				Если МассивСтрок.Количество() = 0 Тогда
					Отказ = Истина;	
					СтрокаСообщения = "Счета-фактуры выданные регистрируются автоматически при проведении документа «Отчет комиссионера о продажах»";
					Возврат СтрокаСообщения;
				Иначе
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			СуществующийСФ = УчетНДС.НайтиПодчиненныйСчетФактуру(ТекущееОснование.ДокументОснование, "СчетФактураВыданный", СтруктураОтбора, Ссылка);
			
			Если СуществующийСФ <> Неопределено Тогда
				Если ПустаяСтрока(СтрокаСообщения) Тогда
					СтрокаСообщения = "Для указанного документа-основания уже введен счет-фактура:";
				КонецЕсли;
				СтрокаСообщения = СтрокаСообщения + Символы.ПС + " - " + ?(ДокументыОснования.Количество() > 1, " строка № " + ТекущееОснование.НомерСтроки + ": для «" + ТекущееОснование.ДокументОснование + "» зарегистрирован счет-фактура ", "") + " «" + СуществующийСФ + "»";
				Отказ = Истина;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(СтрокаСообщения) Тогда
		СтрокаСообщения = СтрокаСообщения + Символы.ПС + "Запись еще одного документа ""Счет-фактура выданный"" не допускается!"
	КонецЕсли;
	
	Возврат СтрокаСообщения;

КонецФункции // ПроверитьВозможностьЗаписиСФ()

// Сравнивает дату счета-фактуры и документов основания
Функция ПроверитьДатуСчетаФактуры(СообщениеПользователю) Экспорт
	
	Если ДокументыОснования.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДокументыОснования[0].ДокументОснование) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// 	Для счетов-фактур, введенных по отчету комиссионера соответствие дат не проверяем
	Если ТипЗнч(ДокументыОснования[0].ДокументОснование) = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") 
		И УчетНДС.ПолучитьВерсиюПостановления(Дата) = 2 Тогда
		Возврат Ложь;
	КонецЕсли;	
	
	СообщениеПользователю = "";
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("СписокДокументов", ДокументыОснования.ВыгрузитьКолонку("ДокументОснование"));
	Запрос.УстановитьПараметр("ДатаСчетаФактуры", Дата);
	ПроверятьТолькоДатуМеньше = Исправление
		И (ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАванс
		ИЛИ ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НалоговыйАгент);
	Запрос.УстановитьПараметр("ПроверятьТолькоДатуМеньше", ПроверятьТолькоДатуМеньше);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПРЕДСТАВЛЕНИЕ(ДокументОснованиеСФ.Ссылка) КАК ПредставлениеДокумента,
	               |	ВЫБОР
	               |		КОГДА НАЧАЛОПЕРИОДА(&ДатаСчетаФактуры, ДЕНЬ) < НАЧАЛОПЕРИОДА(ДокументОснованиеСФ.Дата, ДЕНЬ)
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ КАК ДатаСФМеньше,
	               |	ВЫБОР
	               |		КОГДА &ПроверятьТолькоДатуМеньше
	               |			ТОГДА ЛОЖЬ
	               |		КОГДА НАЧАЛОПЕРИОДА(ДокументОснованиеСФ.Дата, ДЕНЬ) <> НАЧАЛОПЕРИОДА(&ДатаСчетаФактуры, ДЕНЬ)
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ КАК ДатаНеРавнаСФ
	               |ИЗ
	               |	Документ." + ДокументыОснования[0].ДокументОснование.Метаданные().Имя + " КАК ДокументОснованиеСФ
	               |ГДЕ
	               |	ДокументОснованиеСФ.Ссылка В (&СписокДокументов)";
								  
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Результат = Результат.Выбрать();
	Если Результат.Количество() = 1 Тогда
		Результат.Следующий();
		Если Результат.ДатаНеРавнаСФ Тогда
			СообщениеПользователю = "Дата счета-фактуры не равна дате документа-основания";
			Возврат Истина;
		Иначе
			Возврат Ложь;
		КонецЕсли;
	Иначе
		Пока Результат.Следующий() Цикл
			Если Результат.ДатаСФМеньше Тогда
				СообщениеПользователю = СообщениеПользователю + Символы.ПС + Результат.ПредставлениеДокумента;
			КонецЕсли;
		КонецЦикла;
		Если СообщениеПользователю <> "" Тогда
			СообщениеПользователю = "Дата счета-фактуры меньше даты документов-оснований:" + СообщениеПользователю;
			Возврат Ложь;
		Иначе
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

// По результату запроса по шапке документа формируем движения по регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  ТаблицаПоТаре             - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаПоДокументамОснованиям, ТаблицаПоАвансам, Отказ, Заголовок)
	
	Если СтруктураШапкиДокумента.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.КорректировочныйНаАванс Тогда
		Возврат;
	ИначеЕсли СтруктураШапкиДокумента.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАванс Тогда
		УчетНДСФормированиеДвижений.СформироватьДвиженияСчетФактураВыданныйНаАванс(СтруктураШапкиДокумента, ТаблицаПоАвансам);
	ИначеЕсли СтруктураШапкиДокумента.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НалоговыйАгент Тогда
		УчетНДСФормированиеДвижений.СформироватьДвиженияНалоговыйАгентПоОплате(СтруктураШапкиДокумента, ТаблицаПоАвансам);
	КонецЕсли;
	
	ТаблицаЗаписейЖурнала = Новый ТаблицаЗначений;
	Для Каждого Элемент ИЗ СтруктураШапкиДокумента Цикл 
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(ТипЗнч(Элемент.Значение));
		ТаблицаЗаписейЖурнала.Колонки.Добавить(Элемент.Ключ, Новый ОписаниеТипов(МассивТипов));
	КонецЦикла;
	ТаблицаЗаписейЖурнала.Колонки.Добавить("ИндексСтроки", Новый ОписаниеТипов("Число"));
	ТаблицаЗаписейЖурнала.Колонки.Добавить("НомерИсправленияКорректировочногоСчетаФактуры", Новый ОписаниеТипов("Строка"));
	ТаблицаЗаписейЖурнала.Колонки.Добавить("ДатаИсправленияКорректировочногоСчетаФактуры", Новый ОписаниеТипов("Дата"));
	ТаблицаЗаписейЖурнала.Колонки.Добавить("УчитыватьИсправлениеИсходногоДокумента", Новый ОписаниеТипов("Булево"));
	ТаблицаЗаписейЖурнала.Колонки.Добавить("НомерИсправленияИсходногоДокумента", Новый ОписаниеТипов("Число"));
	ТаблицаЗаписейЖурнала.Колонки.Добавить("ДатаИсправленияИсходногоДокумента", Новый ОписаниеТипов("Дата"));
	
	Если СтруктураШапкиДокумента.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный Тогда
		
		СтруктураСтроки = Новый Структура();
		Для Каждого Элемент Из СтруктураШапкиДокумента Цикл
			СтруктураСтроки.Вставить(Элемент.Ключ, Элемент.Значение);
		КонецЦикла;
		
		ПодготовитьТаблицуПоДокументамОснованиямРегл(ТаблицаПоДокументамОснованиям, СтруктураШапкиДокумента);
		
		Для Каждого СтрокаОснования ИЗ ТаблицаПоДокументамОснованиям Цикл
			
			СтруктураСтроки.Вставить("ИндексСтроки", СтрокаОснования.НомерСтроки - 1);
			СтруктураСтроки.Вставить("НомерИсправленияКорректировочногоСчетаФактуры", СтруктураШапкиДокумента.НомерИсправления);
			СтруктураСтроки.Вставить("ДатаИсправленияКорректировочногоСчетаФактуры", СтруктураШапкиДокумента.Дата);
			СтруктураСтроки.Вставить("НомерИсходногоДокумента", СтрокаОснования.НомерИсходногоДокумента);
			СтруктураСтроки.Вставить("ДатаИсходногоДокумента",  СтрокаОснования.ДатаИсходногоДокумента);
			СтруктураСтроки.Вставить("УчитыватьИсправлениеИсходногоДокумента", СтрокаОснования.НомерИсправленияИсходногоДокумента);
			СтруктураСтроки.Вставить("НомерИсправленияИсходногоДокумента", СтрокаОснования.НомерИсправленияИсходногоДокумента);
			СтруктураСтроки.Вставить("ДатаИсправленияИсходногоДокумента", СтрокаОснования.ДатаИсправленияИсходногоДокумента);
			СтруктураСтроки.Вставить("СуммаУвеличение", СтрокаОснования.СуммаУвеличение);
			СтруктураСтроки.Вставить("СуммаУменьшение", СтрокаОснования.СуммаУменьшение);
			СтруктураСтроки.Вставить("СуммаНДСУвеличение", СтрокаОснования.СуммаНДСУвеличение);
			СтруктураСтроки.Вставить("СуммаНДСУменьшение", СтрокаОснования.СуммаНДСУменьшение);
			
			ЗаписьЖурнала = ТаблицаЗаписейЖурнала.Добавить();
			ЗаполнитьЗначенияСвойств(ЗаписьЖурнала, СтруктураСтроки);
			
		КонецЦикла;
		
	ИначеЕсли СтруктураШапкиДокумента.СводныйКомиссионный Тогда
		
		СтруктураСтроки = Новый Структура();
		Для Каждого Элемент Из СтруктураШапкиДокумента Цикл
			СтруктураСтроки.Вставить(Элемент.Ключ, Элемент.Значение);
		КонецЦикла;
		
		ТаблицаСводныхСчетовФактур = ПолучитьДанныеСводногоСчетаФактуры(СтруктураШапкиДокумента);
		
		ТаблицаЗаписейЖурнала.Колонки.Добавить("СуммаДокументаДляРегистрацииВЖурнале");
		ТаблицаЗаписейЖурнала.Колонки.Добавить("НДСДокументаДляРегистрацииВЖурнале");
		
		Для Каждого СтрокаСводныхСчетовФактур Из ТаблицаСводныхСчетовФактур Цикл
			
			ЗаполнитьЗначенияСвойств(СтруктураСтроки, СтруктураШапкиДокумента);
			ЗаполнитьЗначенияСвойств(СтруктураСтроки, СтрокаСводныхСчетовФактур);
			
			ЗаписьЖурнала = ТаблицаЗаписейЖурнала.Добавить();
			ЗаполнитьЗначенияСвойств(ЗаписьЖурнала, СтруктураСтроки);
			ЗаписьЖурнала.ИндексСтроки = СтрокаСводныхСчетовФактур.ИндексСтроки;
			
			Если СтрокаСводныхСчетовФактур.СуммаПоСчетуФактуре <> 0 Или СтрокаСводныхСчетовФактур.СуммаНДС <> 0 Тогда
				ЗаписьЖурнала.СуммаДокументаДляРегистрацииВЖурнале = СтрокаСводныхСчетовФактур.СуммаПоСчетуФактуре;
				ЗаписьЖурнала.НДСДокументаДляРегистрацииВЖурнале = СтрокаСводныхСчетовФактур.СуммаНДС;				
			ИначеЕсли СтрокаСводныхСчетовФактур.СуммаПоСчетуФактуреКомиссия <> 0 Или СтрокаСводныхСчетовФактур.СуммаНДСКомиссия <> 0 Тогда
				ЗаписьЖурнала.СуммаДокументаДляРегистрацииВЖурнале = СтрокаСводныхСчетовФактур.СуммаПоСчетуФактуреКомиссия;
				ЗаписьЖурнала.НДСДокументаДляРегистрацииВЖурнале = СтрокаСводныхСчетовФактур.СуммаНДСКомиссия;				
			КонецЕсли;					
			
		КонецЦикла;
		
	Иначе
		
		ЗаписьЖурнала = ТаблицаЗаписейЖурнала.Добавить();
		ЗаполнитьЗначенияСвойств(ЗаписьЖурнала, СтруктураШапкиДокумента);
		
	КонецЕсли;
	
	УчетНДСФормированиеДвижений.ЗарегистрироватьВЖурналеУчетаСчетовФактур(ТаблицаЗаписейЖурнала, СуммаДокумента, СуммаНДСДокумента, Отказ, Заголовок);
	УчетНДСФормированиеДвижений.СформироватьДвиженияНДСНомераДокументовОплаты(Ссылка, Отказ);
		
КонецПроцедуры // ДвиженияПоРегистрам()

Процедура СформироватьДвиженияСчетФактураКорректировочныйНаАванс(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	Если СтруктураШапкиДокумента.ВидСчетаФактуры <> Перечисления.ВидСчетаФактурыВыставленного.КорректировочныйНаАванс Тогда
		Возврат;
	КонецЕсли;
		
	ИндексОбособленногоПодразделения = Организация.ЦифровойИндексОбособленногоПодразделения;
	ПостфиксДляНомера = ?(ЗначениеЗаполнено(ИндексОбособленногоПодразделения), "/" + ИндексОбособленногоПодразделения, "");
	НомерНаПечать = ОбщегоНазначения.ПолучитьНомерНаПечать(ЭтотОбъект.Ссылка);
	
	НомераТаблиц = Новый Структура;
	Запрос = Новый Запрос();
	Запрос.Текст = ТекстЗапросаПараметрыПроведенияКорректировочныйНаАванс(НомераТаблиц);
	Запрос.УстановитьПараметр("Ссылка", ЭтотОбъект.Ссылка);
	Запрос.УстановитьПараметр("НомерСчетаФактуры", НомерНаПечать + ПостфиксДляНомера);
	Запрос.УстановитьПараметр("ВерсияПостановленияНДС981",
		УчетНДС.ВерсияПостановленияНДС1137(СтруктураШапкиДокумента.Дата) >= 4);

	ПараметрыПроведения = Новый Структура;
	
	Если НЕ ПустаяСтрока(Запрос.Текст) Тогда
		Результат = Запрос.ВыполнитьПакет();
		Для каждого ИндексТаблицы Из НомераТаблиц Цикл
			ПараметрыПроведения.Вставить(ИндексТаблицы.Ключ, Результат[ИндексТаблицы.Значение].Выгрузить());
		КонецЦикла;
	КонецЕсли;
	
	СформироватьДвиженияЖурналУчетаСчетовФактурРегистрация(
		ПараметрыПроведения.ЗаписиЖурнала,
		Движения,
		Отказ);
	
	СформироватьПроводкиНачислениеНДСПолученныйАванс(
		ПараметрыПроведения.Реквизиты[0],
		ПараметрыПроведения.Авансы,
		Движения,
		Отказ);

	СформироватьДвиженияНДСЗаписиКнигиПродажПолученныйАванс(
		ПараметрыПроведения.Реквизиты[0],
		ПараметрыПроведения.Авансы,
		Движения,
		Отказ);
		
	СформироватьДвиженияНДССАвансовКорректировочныйНаАванс(
		ПараметрыПроведения.Реквизиты[0],
		ПараметрыПроведения.Авансы,
		Движения,
		Отказ);
		
	Если Движения.НДСЗаписиКнигиПродаж.Количество() > 0
		И НЕ ПараметрыПроведения.Реквизиты[0].Исправление Тогда
		
		СформироватьДвиженияНДСНомераДокументовОплатыПоТекущимДвижениям(
			ПараметрыПроведения.Реквизиты[0],
			Движения,
			Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьДвиженияЖурналУчетаСчетовФактурРегистрация(ЗаписиЖурнала, Движения, Отказ)

	Для каждого ЗаписьЖурнала Из ЗаписиЖурнала Цикл
	
		Движение = Движения.ЖурналУчетаСчетовФактур.Добавить();
		ЗаполнитьЗначенияСвойств(Движение, ЗаписьЖурнала);
		
	КонецЦикла;
	
	Движения.ЖурналУчетаСчетовФактур.Записывать = Истина;

КонецПроцедуры

Функция ТекстЗапросаПараметрыПроведенияКорректировочныйНаАванс(НомераТаблиц)
	
	НомераТаблиц.Вставить("РеквизитыДокумента", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ВТ_Реквизиты", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("Реквизиты", НомераТаблиц.Количество());
	
	НомераТаблиц.Вставить("ВТ_ЗаписиЖурнала", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ЗаписиЖурнала", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("Авансы", НомераТаблиц.Количество());
	
	Возврат
	"ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Ссылка,
	|	Реквизиты.Дата КАК Дата,
	|	Реквизиты.Номер КАК Номер,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.ВалютаДокумента КАК ВалютаДокумента,
	|	Реквизиты.ВидСчетаФактуры КАК ВидСчетаФактуры,
	|	Реквизиты.ДокументОснование КАК ДокументОснование,
	|	Реквизиты.СтавкаНДС КАК СтавкаНДС,
	|	Реквизиты.ДоговорКонтрагента.ВидАгентскогоДоговора КАК ВидАгентскогоДоговора,
	|	ЕСТЬNULL(Реквизиты.ДоговорКонтрагента.УчетАгентскогоНДС, ЛОЖЬ) КАК УчетАгентскогоНДС,
	|	ЕСТЬNULL(Реквизиты.ДоговорКонтрагента.ВалютаВзаиморасчетов, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)) КАК ВалютаВзаиморасчетов,
	|	Реквизиты.Под0 КАК Под0,
	|	Реквизиты.Контрагент КАК Контрагент,
	|	Реквизиты.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	Реквизиты.КППКонтрагента КАК КППКонтрагента,
	|	Реквизиты.СчетФактураНеВыставляется КАК СчетФактураНеВыставляется,
	|	Реквизиты.ДатаВыставления КАК ДатаВыставления,
	|	Реквизиты.КодСпособаВыставления КАК КодСпособаВыставления,
	|	Реквизиты.КодВидаОперации КАК КодВидаОперации,
	|	Реквизиты.Исправление КАК Исправление,
	|	Реквизиты.ИсправляемыйСчетФактура КАК ИсправляемыйСчетФактура,
	|	Реквизиты.НомерИсправляемогоКорректировочногоДокумента КАК НомерИсправляемогоКорректировочногоДокумента,
	|	Реквизиты.ДатаИсправляемогоКорректировочногоДокумента КАК ДатаИсправляемогоКорректировочногоДокумента,
	|	Реквизиты.НомерИсходногоДокумента КАК НомерИсходногоДокумента,
	|	Реквизиты.ДатаИсходногоДокумента КАК ДатаИсходногоДокумента,
	|	Реквизиты.СуммаУвеличение КАК СуммаУвеличение,
	|	Реквизиты.СуммаУменьшение КАК СуммаУменьшение,
	|	Реквизиты.СуммаНДСУвеличение КАК СуммаНДСУвеличение,
	|	Реквизиты.СуммаНДСУменьшение КАК СуммаНДСУменьшение,
	|	Реквизиты.НомерИсправления КАК НомерИсправления,
	|	Реквизиты.СуммаДокумента КАК СуммаДокумента,
	|	Реквизиты.СуммаНДСДокумента КАК СуммаНДСДокумента,
	|	Реквизиты.СчетФактураБезНДС КАК СчетФактураБезНДС,
	|	ВЫБОР
	|		КОГДА Реквизиты.ДокументОснование ССЫЛКА Документ.ОтчетКомиссионераОПродажах
	|				И Реквизиты.ДоговорКонтрагента = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|			ТОГДА ВЫРАЗИТЬ(Реквизиты.ДокументОснование КАК Документ.ОтчетКомиссионераОПродажах).ДоговорКонтрагента.РасчетыВУсловныхЕдиницах
	|		ИНАЧЕ Реквизиты.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах
	|	КОНЕЦ КАК РасчетыВУсловныхЕдиницах,
	|	Реквизиты.СуммаДокументаКомиссия КАК СуммаДокументаКомиссия,
	|	Реквизиты.СуммаНДСДокументаКомиссия КАК СуммаНДСДокументаКомиссия,
	|	Реквизиты.СуммаУвеличениеКомиссия КАК СуммаУвеличениеКомиссия,
	|	Реквизиты.СуммаУменьшениеКомиссия КАК СуммаУменьшениеКомиссия,
	|	Реквизиты.СуммаНДСУвеличениеКомиссия КАК СуммаНДСУвеличениеКомиссия,
	|	Реквизиты.СуммаНДСУменьшениеКомиссия КАК СуммаНДСУменьшениеКомиссия,
	|	Реквизиты.СводныйКомиссионный КАК СводныйКомиссионный,
	|	Реквизиты.Организация.ЦифровойИндексОбособленногоПодразделения КАК ОрганизацияЦифровойИндексОбособленногоПодразделения,
	|	ВЫБОР
	|		КОГДА Реквизиты.Организация.ГоловнаяОрганизация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОрганизацияОбособленноеПодразделение,
	|	Реквизиты.Комитент КАК Комитент,
	|	Реквизиты.КодВидаОперацииНаУменьшение КАК КодВидаОперацииНаУменьшение,
	|	Реквизиты.ДатаПлатежноРасчетногоДокумента КАК ДатаПлатежноРасчетногоДокумента,
	|	Реквизиты.НомерПлатежноРасчетногоДокумента КАК НомерПлатежноРасчетногоДокумента
	|ПОМЕСТИТЬ РеквизитыДокумента
	|ИЗ
	|	Документ.СчетФактураВыданный КАК Реквизиты
	|ГДЕ
	|	Реквизиты.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РеквизитыДокументов.ДокументОснование КАК ДокументОснование,
	|	РеквизитыДокументов.НомерИсходногоДокумента КАК НомерИсходногоДокумента,
	|	РеквизитыДокументов.ДатаИсходногоДокумента КАК ДатаИсходногоДокумента,
	|	НЕОПРЕДЕЛЕНО КАК НомерИсправленияИсходногоДокумента,
	|	НЕОПРЕДЕЛЕНО КАК ДатаИсправленияИсходногоДокумента,
	|	РеквизитыДокументов.СуммаУвеличение КАК СуммаУвеличение,
	|	РеквизитыДокументов.СуммаУменьшение КАК СуммаУменьшение,
	|	РеквизитыДокументов.СуммаНДСУвеличение КАК СуммаНДСУвеличение,
	|	РеквизитыДокументов.СуммаНДСУменьшение КАК СуммаНДСУменьшение,
	|	РеквизитыДокументов.ДокументОснование.Дата КАК ДокументОснованиеДата,
	|	РеквизитыДокументов.Ссылка КАК Ссылка,
	|	РеквизитыДокументов.Дата КАК Дата,
	|	РеквизитыДокументов.Номер КАК Номер,
	|	РеквизитыДокументов.Организация КАК Организация,
	|	РеквизитыДокументов.ВалютаДокумента КАК ВалютаДокумента,
	|	ЕСТЬNULL(РеквизитыДокументов.ДоговорКонтрагента.ВалютаВзаиморасчетов, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)) КАК ВалютаВзаиморасчетов,
	|	РеквизитыДокументов.ВидСчетаФактуры КАК ВидСчетаФактуры,
	|	РеквизитыДокументов.СтавкаНДС КАК СтавкаНДС,
	|	РеквизитыДокументов.ДоговорКонтрагента.ВидАгентскогоДоговора КАК ВидАгентскогоДоговора,
	|	ЕСТЬNULL(РеквизитыДокументов.ДоговорКонтрагента.УчетАгентскогоНДС, ЛОЖЬ) КАК УчетАгентскогоНДС,
	|	РеквизитыДокументов.Под0 КАК Под0,
	|	РеквизитыДокументов.Контрагент КАК Контрагент,
	|	РеквизитыДокументов.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	РеквизитыДокументов.КППКонтрагента КАК КППКонтрагента,
	|	РеквизитыДокументов.СчетФактураНеВыставляется КАК СчетФактураНеВыставляется,
	|	РеквизитыДокументов.ДатаВыставления КАК ДатаВыставления,
	|	РеквизитыДокументов.КодСпособаВыставления КАК КодСпособаВыставления,
	|	РеквизитыДокументов.КодВидаОперации КАК КодВидаОперации,
	|	РеквизитыДокументов.Исправление КАК Исправление,
	|	РеквизитыДокументов.ИсправляемыйСчетФактура КАК ИсправляемыйСчетФактура,
	|	РеквизитыДокументов.НомерИсправляемогоКорректировочногоДокумента КАК НомерИсправляемогоКорректировочногоДокумента,
	|	РеквизитыДокументов.ДатаИсправляемогоКорректировочногоДокумента КАК ДатаИсправляемогоКорректировочногоДокумента,
	|	РеквизитыДокументов.НомерИсправления КАК НомерИсправления,
	|	РеквизитыДокументов.СуммаДокумента КАК СуммаДокумента,
	|	РеквизитыДокументов.СуммаНДСДокумента КАК СуммаНДСДокумента,
	|	РеквизитыДокументов.СчетФактураБезНДС КАК СчетФактураБезНДС,
	|	0 КАК ИндексСтроки,
	|	РеквизитыДокументов.РасчетыВУсловныхЕдиницах КАК РасчетыВУсловныхЕдиницах,
	|	РеквизитыДокументов.СуммаДокументаКомиссия КАК СуммаДокументаКомиссия,
	|	РеквизитыДокументов.СуммаНДСДокументаКомиссия КАК СуммаНДСДокументаКомиссия,
	|	РеквизитыДокументов.СуммаУвеличениеКомиссия КАК СуммаУвеличениеКомиссия,
	|	РеквизитыДокументов.СуммаУменьшениеКомиссия КАК СуммаУменьшениеКомиссия,
	|	РеквизитыДокументов.СуммаНДСУвеличениеКомиссия КАК СуммаНДСУвеличениеКомиссия,
	|	РеквизитыДокументов.СуммаНДСУменьшениеКомиссия КАК СуммаНДСУменьшениеКомиссия,
	|	РеквизитыДокументов.СводныйКомиссионный КАК СводныйКомиссионный,
	|	РеквизитыДокументов.ОрганизацияЦифровойИндексОбособленногоПодразделения КАК ОрганизацияЦифровойИндексОбособленногоПодразделения,
	|	РеквизитыДокументов.ОрганизацияОбособленноеПодразделение КАК ОрганизацияОбособленноеПодразделение,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаСчетаФактурыПродавца,
	|	РеквизитыДокументов.Комитент КАК Комитент,
	|	РеквизитыДокументов.КодВидаОперацииНаУменьшение КАК КодВидаОперацииНаУменьшение,
	|	РеквизитыДокументов.ДатаПлатежноРасчетногоДокумента КАК ДатаПлатежноРасчетногоДокумента,
	|	РеквизитыДокументов.НомерПлатежноРасчетногоДокумента КАК НомерПлатежноРасчетногоДокумента
	|ПОМЕСТИТЬ Реквизиты
	|ИЗ
	|	РеквизитыДокумента КАК РеквизитыДокументов
	|ГДЕ
	|	РеквизитыДокументов.ВидСчетаФактуры <> ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.Корректировочный)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Реквизиты.Дата КАК Дата,
	|	Реквизиты.Номер КАК Номер,
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.ВидСчетаФактуры КАК ВидСчетаФактуры,
	|	Реквизиты.ВидАгентскогоДоговора КАК ВидАгентскогоДоговора,
	|	Реквизиты.Под0 КАК Под0,
	|	Реквизиты.ДокументОснование КАК ДокументОснование,
	|	Реквизиты.Контрагент КАК Контрагент,
	|	Реквизиты.СводныйКомиссионный КАК СводныйКомиссионный,
	|	Реквизиты.НомерИсходногоДокумента КАК НомерИсходногоДокумента,
	|	Реквизиты.НомерИсправляемогоКорректировочногоДокумента КАК НомерИсправляемогоКорректировочногоДокумента,
	|	Реквизиты.ОрганизацияЦифровойИндексОбособленногоПодразделения КАК ОрганизацияЦифровойИндексОбособленногоПодразделения,
	|	Реквизиты.ОрганизацияОбособленноеПодразделение КАК ОрганизацияОбособленноеПодразделение,
	|	Реквизиты.Исправление КАК Исправление,
	|	Реквизиты.ДатаВыставления КАК ДатаВыставления,
	|	Реквизиты.ИсправляемыйСчетФактура КАК ИсправляемыйСчетФактура,
	|	Реквизиты.ДатаПлатежноРасчетногоДокумента КАК ДатаПлатежноРасчетногоДокумента,
	|	Реквизиты.НомерПлатежноРасчетногоДокумента КАК НомерПлатежноРасчетногоДокумента
	|ИЗ
	|	Реквизиты КАК Реквизиты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТекущийСчетФактура.Ссылка КАК ДокументСсылка,
	|	ТекущийСчетФактура.НомерСтроки КАК ИндексСтроки,
	|	ТекущийСчетФактура.СуммаНДС - ТекущийСчетФактура.СуммаНДСДоКорректировки КАК СуммаНДСРазницаУвеличение,
	|	ТекущийСчетФактура.Сумма - ТекущийСчетФактура.СуммаДоКорректировки КАК СуммаПоСчетуФактуреРазницаУвеличение,
	|	ИсходныйСчетФактураРеквизиты.НомерСчетаФактуры КАК НомерСчетаФактуры,
	|	ИсходныйСчетФактураРеквизиты.ДатаСчетаФактуры КАК ДатаСчетаФактуры
	|ПОМЕСТИТЬ ВТ_ЗаписьЖурналаУчетаСчетовФактур
	|ИЗ
	|	Документ.СчетФактураВыданный.Авансы КАК ТекущийСчетФактура
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЖурналУчетаСчетовФактур КАК ИсходныйСчетФактураРеквизиты
	|		ПО ТекущийСчетФактура.КорректируемыйСчетФактура = ИсходныйСчетФактураРеквизиты.СчетФактура
	|ГДЕ
	|	ТекущийСчетФактура.Ссылка = &Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДокументСсылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Реквизиты.ДокументОснование КАК ДокументОснование,
	|	Реквизиты.ВидСчетаФактуры КАК ВидСчетаФактуры,
	|	Реквизиты.Исправление КАК Исправление,
	|	ИСТИНА КАК Корректировочный,
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.Контрагент КАК Контрагент,
	|	Реквизиты.КППКонтрагента КАК КППКонтрагента,
	|	Реквизиты.Ссылка КАК СчетФактура,
	|	ЗНАЧЕНИЕ(Перечисление.ЧастиЖурналаУчетаСчетовФактур.ВыставленныеСчетаФактуры) КАК ЧастьЖурнала,
	|	Реквизиты.ДатаВыставления КАК ДатаВыставленияПолучения,
	|	Реквизиты.КодСпособаВыставления КАК КодСпособаВыставленияПолучения,
	|	Реквизиты.КодВидаОперации КАК КодВидаОперации,
	|	ВТ_ЗаписьЖурналаУчетаСчетовФактур.ИндексСтроки КАК ИндексСтроки,
	|	ВТ_ЗаписьЖурналаУчетаСчетовФактур.НомерСчетаФактуры КАК НомерСчетаФактуры,
	|	ВТ_ЗаписьЖурналаУчетаСчетовФактур.ДатаСчетаФактуры КАК ДатаСчетаФактуры,
	|	&НомерСчетаФактуры КАК НомерКорректировочногоСчетаФактуры,
	|	Реквизиты.Дата КАК ДатаКорректировочногоСчетаФактуры,
	|	НЕОПРЕДЕЛЕНО КАК НомерИсправления,
	|	НЕОПРЕДЕЛЕНО КАК ДатаИсправления,
	|	ЛОЖЬ КАК РасчетыВУсловныхЕдиницах,
	|	Реквизиты.ВалютаДокумента КАК Валюта,
	|	Реквизиты.СчетФактураБезНДС КАК ПоСтавкеБезНДС,
	|	Реквизиты.СчетФактураНеВыставляется КАК СчетФактураНеВыставляется,
	|	НЕОПРЕДЕЛЕНО КАК НомерИсправленияКорректировочногоСчетаФактуры,
	|	НЕОПРЕДЕЛЕНО КАК ДатаИсправленияКорректировочногоСчетаФактуры,
	|	ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка) КАК Посредник,
	|	НЕОПРЕДЕЛЕНО КАК СчетФактураВыданныйПокупателю,
	|	НЕОПРЕДЕЛЕНО КАК Субкомиссионер,
	|	НЕОПРЕДЕЛЕНО КАК КодВидаСделки,
	|	ВТ_ЗаписьЖурналаУчетаСчетовФактур.СуммаНДСРазницаУвеличение КАК СуммаНДСРазницаУвеличение,
	|	ВТ_ЗаписьЖурналаУчетаСчетовФактур.СуммаПоСчетуФактуреРазницаУвеличение КАК СуммаПоСчетуФактуреРазницаУвеличение,
	|	0 КАК СуммаПоСчетуФактуре,
	|	0 КАК СуммаНДС,
	|	0 КАК СуммаПоСчетуФактуреРазницаУменьшение,
	|	0 КАК СуммаНДСРазницаУменьшение,
	|	0 КАК СуммаНДСКомиссия,
	|	0 КАК СуммаПоСчетуФактуреКомиссия,
	|	0 КАК СуммаПоСчетуФактуреРазницаУвеличениеКомиссия,
	|	0 КАК СуммаНДСРазницаУвеличениеКомиссия,
	|	0 КАК СуммаНДСРазницаУменьшениеКомиссия,
	|	0 КАК СуммаПоСчетуФактуреРазницаУменьшениеКомиссия,
	|	НЕОПРЕДЕЛЕНО КАК КодВидаОперацииКомиссия,
	|	ЛОЖЬ КАК ИсправлениеСобственнойОшибки,
	|	НЕОПРЕДЕЛЕНО КАК ИсправляемыйСчетФактура,
	|	"""" КАК ИННКонтрагента,
	|	ЗНАЧЕНИЕ(Документ.СчетФактураПолученный.ПустаяСсылка) КАК СчетФактураПолученныйОтПродавца,
	|	ЛОЖЬ КАК Сторно,
	|	НЕОПРЕДЕЛЕНО КАК ИсправленныйСчетФактура,
	|	"""" КАК ИННПродавца,
	|	"""" КАК КПППродавца,
	|	"""" КАК ИННСубкомиссионера,
	|	"""" КАК КППСубкомиссионера,
	|	НЕОПРЕДЕЛЕНО КАК ДатаСчетаФактурыПродавца,
	|	Реквизиты.КодВидаОперацииНаУменьшение КАК КодВидаОперацииНаУменьшение
	|ИЗ
	|	Реквизиты КАК Реквизиты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ЗаписьЖурналаУчетаСчетовФактур КАК ВТ_ЗаписьЖурналаУчетаСчетовФактур
	|		ПО Реквизиты.Ссылка = ВТ_ЗаписьЖурналаУчетаСчетовФактур.ДокументСсылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СчетФактураВыданныйАвансы.Ссылка КАК Ссылка,
	|	СчетФактураВыданныйАвансы.Сумма - СчетФактураВыданныйАвансы.СуммаДоКорректировки КАК Сумма,
	|	СчетФактураВыданныйАвансы.СуммаНДС - СчетФактураВыданныйАвансы.СуммаНДСДоКорректировки КАК СуммаНДС,
	|	СчетФактураВыданныйАвансы.Сумма - СчетФактураВыданныйАвансы.СуммаНДС - (СчетФактураВыданныйАвансы.СуммаДоКорректировки - СчетФактураВыданныйАвансы.СуммаНДСДоКорректировки) КАК СуммаБезНДС,
	|	СчетФактураВыданныйАвансы.СтавкаНДС КАК СтавкаНДС,
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НДСпоАвансамИПредоплатам) КАК СчетУчетаНДС,
	|	НЕОПРЕДЕЛЕНО КАК ВидЦенности,
	|	ВЫБОР
	|		КОГДА Реквизиты.ДокументОснование ССЫЛКА Документ.ОтчетКомиссионераОПродажах
	|			ТОГДА ВЫБОР
	|					КОГДА Реквизиты.Исправление
	|						ТОГДА Реквизиты.ИсправляемыйСчетФактура
	|					ИНАЧЕ Реквизиты.Ссылка
	|				КОНЕЦ
	|		ИНАЧЕ Реквизиты.ДокументОснование
	|	КОНЕЦ КАК СчетФактура,
	|	СчетФактураВыданныйАвансы.Номенклатура КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА СчетФактураВыданныйАвансы.Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА Реквизиты.Контрагент
	|		ИНАЧЕ СчетФактураВыданныйАвансы.Контрагент
	|	КОНЕЦ КАК Контрагент,
	|	ВЫБОР
	|		КОГДА СчетФактураВыданныйАвансы.Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА Реквизиты.ДоговорКонтрагента
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|	КОНЕЦ КАК ДоговорКонтрагента,
	|	ВЫБОР
	|		КОГДА Реквизиты.Исправление
	|			ТОГДА Реквизиты.Ссылка
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ИсправленныйСчетФактура,
	|	ВЫБОР
	|		КОГДА КОНЕЦПЕРИОДА(Реквизиты.Дата, КВАРТАЛ) > КОНЕЦПЕРИОДА(Реквизиты.ДокументОснованиеДата, КВАРТАЛ)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЗаписьДополнительногоЛиста,
	|	ВЫБОР
	|		КОГДА КОНЕЦПЕРИОДА(Реквизиты.Дата, КВАРТАЛ) > КОНЕЦПЕРИОДА(Реквизиты.ДокументОснованиеДата, КВАРТАЛ)
	|			ТОГДА НАЧАЛОПЕРИОДА(Реквизиты.ДокументОснованиеДата, КВАРТАЛ)
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|	КОНЕЦ КАК КорректируемыйПериод,
	|	НЕОПРЕДЕЛЕНО КАК СторнирующаяЗаписьДопЛиста,
	|	Реквизиты.Дата КАК ДатаСобытия
	|ИЗ
	|	Документ.СчетФактураВыданный.Авансы КАК СчетФактураВыданныйАвансы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
	|		ПО (ИСТИНА)
	|ГДЕ
	|	СчетФактураВыданныйАвансы.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	СчетФактураВыданныйАвансы.НомерСтроки";

КонецФункции

Процедура СформироватьПроводкиНачислениеНДСПолученныйАванс(Реквизиты, ТаблицаАвансов, Движения, Отказ)

	Для каждого СтрокаТаблицы Из ТаблицаАвансов Цикл

		// Проводки по вычету НДС с выданного аванса
		Если СтрокаТаблицы.СуммаНДС = 0 Тогда
			Продолжить;
		КонецЕсли;

		Проводка = Движения.Хозрасчетный.Добавить();

		ЗаполнитьЗначенияСвойств(Проводка, Реквизиты);

		Проводка.Содержание  = "НДС по предоплате";

		Проводка.СчетДт = ПланыСчетов.Хозрасчетный.НДСпоАвансамИПредоплатам; // 76.АВ
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СФВыданные", СтрокаТаблицы.СчетФактура);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтрокаТаблицы.Контрагент);

		Проводка.СчетКт = ПланыСчетов.Хозрасчетный.НДС; // 68.02
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ВидыПлатежейВГосБюджет", Перечисления.ВидыПлатежейВГосБюджет.Налог);


		Проводка.Сумма = СтрокаТаблицы.СуммаНДС;

	КонецЦикла;

	Движения.Хозрасчетный.Записывать = Истина;

КонецПроцедуры

Процедура СформироватьДвиженияНДСЗаписиКнигиПродажПолученныйАванс(Реквизиты, ТаблицаАвансов, Движения, Отказ)

	Для каждого СтрокаТаблицы Из ТаблицаАвансов Цикл

		Движение = Движения.НДСЗаписиКнигиПродаж.Добавить();

		ЗаполнитьЗначенияСвойств(Движение, Реквизиты);
		ЗаполнитьЗначенияСвойств(Движение, СтрокаТаблицы);

		Движение.ВидЦенности = Перечисления.ВидыЦенностей.АвансыПолученные;
		Движение.НДС         = СтрокаТаблицы.СуммаНДС;
		Движение.Покупатель  = СтрокаТаблицы.Контрагент;
		Движение.Событие = Перечисления.СобытияПоНДСПродажи.ПолученАванс;
		
		Если Реквизиты.Исправление Тогда
			Движение.ДатаДокументаОплаты  = Реквизиты.ДатаПлатежноРасчетногоДокумента;
			Движение.НомерДокументаОплаты = Реквизиты.НомерПлатежноРасчетногоДокумента;
		КонецЕсли;
	
	КонецЦикла;
	
	Движения.НДСЗаписиКнигиПродаж.Записывать = Истина;

КонецПроцедуры

Процедура СформироватьДвиженияНДСНомераДокументовОплатыПоТекущимДвижениям(Реквизиты, Движения, Отказ)
	
	Если НЕ ЗначениеЗаполнено(Реквизиты.НомерПлатежноРасчетногоДокумента)
	   И НЕ ЗначениеЗаполнено(Реквизиты.ДатаПлатежноРасчетногоДокумента) Тогда
		Возврат;
	КонецЕсли;

	Движение = Движения.НДСЗаписиКнигиПродаж.Добавить();
	ЗаполнитьЗначенияСвойств(Движение, Движения.НДСЗаписиКнигиПродаж[0], , "ВидДвижения,СуммаБезНДС,НДС");
	Движение.ДатаДокументаОплаты  = Реквизиты.ДатаПлатежноРасчетногоДокумента;
	Движение.НомерДокументаОплаты = Реквизиты.НомерПлатежноРасчетногоДокумента;
	
	Движения.НДСЗаписиКнигиПродаж.Записывать = Истина;
	
КонецПроцедуры

Процедура СформироватьДвиженияНДССАвансовКорректировочныйНаАванс(Реквизиты, ТаблицаАвансов, Движения, Отказ)
	
	Для каждого СтрокаТаблицы Из ТаблицаАвансов Цикл

		Движение = Движения.НДСсАвансов.Добавить();

		ЗаполнитьЗначенияСвойств(Движение, Реквизиты);
		ЗаполнитьЗначенияСвойств(Движение, СтрокаТаблицы);

		Движение.ВидЦенности       = Перечисления.ВидыЦенностей.АвансыПолученные;
		Движение.НДС               = СтрокаТаблицы.СуммаНДС;
		Движение.Покупатель        = СтрокаТаблицы.Контрагент;
		Движение.ВалютаАванса      = мВалютаРегламентированногоУчета;
		Движение.ВалютнаяСуммаСНДС = СтрокаТаблицы.СуммаБезНДС + СтрокаТаблицы.СуммаНДС;
		
	КонецЦикла;
	
	Движения.НДСсАвансов.Записывать = Истина;
	
КонецПроцедуры

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - структура, содержащая реквизиты шапки документа и результаты запроса по шапке,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Организация,ВидСчетаФактуры");
	ВерсияПостановления = УчетНДС.ПолучитьВерсиюПостановления(Дата);

	Если СтруктураШапкиДокумента.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАванс 
		Или СтруктураШапкиДокумента.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НалоговыйАгент Тогда
		
		СтруктураОбязательныхПолей.Вставить("Контрагент");
		Если НЕ (ВерсияПостановления = 2 
			И ТипЗнч(СтруктураШапкиДокумента.ДокументОснование) = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах")) Тогда
			// В случае, если документом-основанием счета-фактуры является "Отчет комиссионера (агента) о продажах"
			// договор контрагента не указывается
			СтруктураОбязательныхПолей.Вставить("ДоговорКонтрагента");
		КонецЕсли;
		
	ИначеЕсли СтруктураШапкиДокумента.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаСуммовуюРазницу Тогда
		
		СтруктураОбязательныхПолей.Вставить("СтавкаНДС");
		СтруктураОбязательныхПолей.Вставить("Сумма");
		
	ИначеЕсли СтруктураШапкиДокумента.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитента Тогда
		
		СтруктураОбязательныхПолей.Вставить("Контрагент");
		СтруктураОбязательныхПолей.Вставить("ДоговорКонтрагента");
		СтруктураОбязательныхПолей.Вставить("Комитент");
	
	КонецЕсли;
	
	Если НЕ СформированПриВводеНачальныхОстатковНДС Тогда
		
		Если Дата >= '20111001' Тогда
			Если ВидСчетаФактуры <> Перечисления.ВидСчетаФактурыВыставленного.Корректировочный И Исправление Тогда
				СтруктураОбязательныхПолей.Вставить("НомерИсходногоДокумента");
				СтруктураОбязательныхПолей.Вставить("ДатаИсходногоДокумента");
			КонецЕсли;
			
			ВерсияПостановления = УчетНДС.ПолучитьВерсиюПостановления(Дата);
			Если ВерсияПостановления = 2 Тогда
				СтруктураОбязательныхПолей.Вставить("КодВидаОперации");
				Если ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный Тогда
					Если Исправление Тогда
						СтруктураОбязательныхПолей.Вставить("НомерИсправляемогоКорректировочногоДокумента");
						СтруктураОбязательныхПолей.Вставить("ДатаИсправляемогоКорректировочногоДокумента");
					КонецЕсли;
				КонецЕсли;
				Если Исправление Тогда
					СтруктураОбязательныхПолей.Вставить("НомерИсправления");
				КонецЕсли;
				Если Выставлен Тогда
					СтруктураОбязательныхПолей.Вставить("ДатаВыставления");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);

КонецПроцедуры 

// Проверяет правильность заполнения строк табличной части "ДокументыОснования".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиПоДокументамОснованиям(ТаблицаПоДокументамОснованиям, СтруктураШапкиДокумента, Отказ, Заголовок)

	Если НЕ ЗначениеЗаполнено(ВидСчетаФактуры) Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаТЧ Из ТаблицаПоДокументамОснованиям Цикл
		Если не ЗначениеЗаполнено(СтрокаТЧ.ДокументОснование) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(СтрокаТЧ.ДокументОснование) = Тип("ДокументСсылка.ПринятиеКУчетуОС") Тогда
			Док = СтрокаТЧ.ДокументОснование;
			Если Док.ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.ОбъектыСтроительства Тогда
				Если Док.СтоимостьБУХоз = 0 Тогда
					ОбщегоНазначения.СообщитьОбОшибке( "Счет-фактуру можно вводить только на основании документа принятия к учету объектов строительства, построенных хоз. способом. (строка № " + СтрокаТЧ.НомерСтроки + ")." , Отказ, Заголовок);
				КонецЕсли;
			Иначе
				ОбщегоНазначения.СообщитьОбОшибке( "Счет-фактуру можно вводить только на основании документа принятия к учету объектов строительства, построенных хоз. способом. (строка № " + СтрокаТЧ.НомерСтроки + ")." , Отказ, Заголовок);
			КонецЕсли;
		КонецЕсли;
		Если не ТипЗнч(СтрокаТЧ.ДокументОснование) = Тип("ДокументСсылка.ДокументРасчетовСКонтрагентом") и НЕ СтрокаТЧ.ДокументОснование.Проведен Тогда
			ОбщегоНазначения.СообщитьОбОшибке( "Счет-фактуру можно вводить только на основании проведенного документа (строка № " + СтрокаТЧ.НомерСтроки + ")." , Отказ, Заголовок);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный Тогда
		Для Каждого СтрокаТЧ Из ТаблицаПоДокументамОснованиям Цикл
			ОшибкиСтроки = "";
			Если НЕ ЗначениеЗаполнено(СтрокаТЧ.НомерИсходногоДокумента) Тогда 
				ОшибкиСтроки = ОшибкиСтроки + ?(ОшибкиСтроки = "", "", ", ") + "Номер счета-фактуры";
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(СтрокаТЧ.ДатаИсходногоДокумента) Тогда
				ОшибкиСтроки = ОшибкиСтроки + ?(ОшибкиСтроки = "", "", ", ") + "Дата счета-фактуры";
			КонецЕсли;
			Если СтрокаТЧ.УчитыватьИсправлениеИсходногоДокумента Тогда
				Если НЕ ЗначениеЗаполнено(СтрокаТЧ.НомерИсправленияИсходногоДокумента) Тогда
					ОшибкиСтроки = ОшибкиСтроки + ?(ОшибкиСтроки = "", "", ", ") + "Номер исправления счета-фактуры";
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(СтрокаТЧ.ДатаИсправленияИсходногоДокумента) Тогда
					ОшибкиСтроки = ОшибкиСтроки + ?(ОшибкиСтроки = "", "", ", ") + "Дата исправления счета-фактуры";
				КонецЕсли;
			КонецЕсли;
			
			Если Не ПустаяСтрока(ОшибкиСтроки) Тогда
				ОбщегоНазначения.СообщитьОбОшибке( " В строке № " + СтрокаТЧ.НомерСтроки + " не заполнены поля: " + ОшибкиСтроки , Отказ, Заголовок);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// Процедура формирует структуру шапки документа и дополнительных полей.
//
Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента) Экспорт
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = УправлениеЗапасами.СформироватьДеревоПолейЗапросаПоШапке();
		
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента", "УчетАгентскогоНДС", "УчетАгентскогоНДС");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента", "ВидАгентскогоДоговора", "ВидАгентскогоДоговора");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента", "НалоговыйАгентПоОплате", "НалоговыйАгентПоОплате");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента", "РасчетыВУсловныхЕдиницах", "РасчетыВУсловныхЕдиницах");
	
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Организация"	, "КПП"   , "ОрганизацияКПП");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Контрагент"     , "КПП"   , "КонтрагентКПП");
	
	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);
	
	Если НЕ ЗначениеЗаполнено(СтруктураШапкиДокумента.Контрагент) 
		ИЛИ СтруктураШапкиДокумента.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НалоговыйАгент Тогда
		СтруктураШапкиДокумента.Вставить("КППКонтрагента", СтруктураШапкиДокумента.ОрганизацияКПП); 
	ИначеЕсли НЕ ЗначениеЗаполнено(СтруктураШапкиДокумента.КППКонтрагента) Тогда
		СтруктураШапкиДокумента.Вставить("КППКонтрагента", СтруктураШапкиДокумента.КонтрагентКПП);
	КонецЕсли;
	
КонецПроцедуры // ПодготовитьСтруктуруШапкиДокумента()

// Процедура формирует таблицы документа.
//
Процедура ПодготовитьТаблицыДокумента(ТаблицаПоДокументамОснованиям, ТаблицаПоАвансам) Экспорт
	
	// Получим необходимые данные для проведения и проверки заполнения по табличной части "ДокументыОснования".
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("ДокументОснование"      , "ДокументОснование");
	СтруктураПолей.Вставить("Организация"		     , "ДокументОснование.Организация");
	СтруктураПолей.Вставить("Контрагент"             , "ДокументОснование.Контрагент");
	СтруктураПолей.Вставить("ДоговорКонтрагента"     , "ДокументОснование.ДоговорКонтрагента");
	СтруктураПолей.Вставить("ВалютаДокумента"        , "ДокументОснование.ВалютаДокумента");
	СтруктураПолей.Вставить("КурсВзаиморасчетов"     , "ДокументОснование.КурсВзаиморасчетов");
	СтруктураПолей.Вставить("КратностьВзаиморасчетов", "ДокументОснование.КратностьВзаиморасчетов");
	СтруктураПолей.Вставить("НомерИсходногоДокумента", "НомерИсходногоДокумента");
	СтруктураПолей.Вставить("ДатаИсходногоДокумента" , "ДатаИсходногоДокумента");
	СтруктураПолей.Вставить("УчитыватьИсправлениеИсходногоДокумента" , "УчитыватьИсправлениеИсходногоДокумента");
	СтруктураПолей.Вставить("НомерИсправленияИсходногоДокумента"     , "НомерИсправленияИсходногоДокумента");
	СтруктураПолей.Вставить("ДатаИсправленияИсходногоДокумента"      , "ДатаИсправленияИсходногоДокумента");
	СтруктураПолей.Вставить("СуммаУвеличение"        , "СуммаУвеличение");
	СтруктураПолей.Вставить("СуммаУменьшение"        , "СуммаУменьшение");
	СтруктураПолей.Вставить("СуммаНДСУвеличение"     , "СуммаНДСУвеличение");
	СтруктураПолей.Вставить("СуммаНДСУменьшение"     , "СуммаНДСУменьшение");
	
	РезультатЗапросаПоДокументамОснованиям = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ДокументыОснования", СтруктураПолей);
	
	ТаблицаПоДокументамОснованиям = РезультатЗапросаПоДокументамОснованиям.Выгрузить();
		
	Если ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАванс 
		Или ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НалоговыйАгент Тогда
		СтруктураПолей = Новый Структура;
		СтруктураПолей.Вставить("Сумма",		"Сумма");
		СтруктураПолей.Вставить("СуммаНДС",		"СуммаНДС");
		СтруктураПолей.Вставить("СтавкаНДС",	"СтавкаНДС");
		СтруктураПолей.Вставить("Контрагент",	"Контрагент");
		
		РезультатЗапросаПоАвансам = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Авансы", СтруктураПолей);
		
		ТаблицаПоАвансам = РезультатЗапросаПоАвансам.Выгрузить();
		
		ТаблицаПоАвансам.Колонки.Добавить("СчетУчетаНДС", Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
		ТаблицаПоАвансам.Колонки.Добавить("СуммаБезНДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
		ТаблицаПоАвансам.Колонки.Добавить("ВидЦенности", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыЦенностей"));
		
		Если ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НалоговыйАгент Тогда
			ТаблицаПоАвансам.Колонки.Добавить("СчетФактура");
		КонецЕсли;
		
		Для Каждого СтрокаТаблицы Из ТаблицаПоАвансам Цикл
			
			Если ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НалоговыйАгент Тогда
				СтрокаТаблицы.СчетФактура = ДокументОснование;
			КонецЕсли;
		
			СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.Сумма - СтрокаТаблицы.СуммаНДС;
			Если ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НалоговыйАгент Тогда
				СтрокаТаблицы.СчетУчетаНДС = ПланыСчетов.Хозрасчетный.НДСНалоговогоАгента;
			Иначе
				СтрокаТаблицы.СчетУчетаНДС = ПланыСчетов.Хозрасчетный.НДСпоАвансамИПредоплатам;
			КонецЕсли;
			
			Если ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НалоговыйАгент Тогда
				СтрокаТаблицы.ВидЦенности = УчетНДС.ОпределитьВидЦенности(Неопределено, Неопределено, , , Истина, ДоговорКонтрагента.ВидАгентскогоДоговора);	
			Иначе
				Если Под0 Тогда
					СтрокаТаблицы.ВидЦенности = Перечисления.ВидыЦенностей.АвансыПолученные0;
				Иначе
					СтрокаТаблицы.ВидЦенности = Перечисления.ВидыЦенностей.АвансыПолученные;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
		ТаблицаПоАвансам.Колонки.Добавить("ВалютнаяСумма", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
		
		МассивРаспределения = ОбщегоНазначения.РаспределитьПропорционально(СуммаДокумента, ТаблицаПоАвансам.ВыгрузитьКолонку("Сумма"));
		
		Если Не МассивРаспределения = Неопределено Тогда
			Для К = 0 По ТаблицаПоАвансам.Количество() - 1 Цикл
				
				ТаблицаПоАвансам[К].ВалютнаяСумма = МассивРаспределения[К];			
												
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры // СформироватьТаблицыДокумента()

Процедура ПодготовитьТаблицуПоДокументамОснованиямРегл(ТаблицаПоДокументамОснованиям, СтруктураШапкиДокумента)

	Данные = МодульВалютногоУчета.ПолучитьКурсВалюты(СтруктураШапкиДокумента.ВалютаРегламентированногоУчета, Дата);

	Для Каждого СтрокаТаблицы Из ТаблицаПоДокументамОснованиям Цикл
		Если СтруктураШапкиДокумента.ВалютаДокумента <> СтруктураШапкиДокумента.ВалютаРегламентированногоУчета Тогда
			Если СтрокаТаблицы.СуммаУвеличение <> 0 Тогда
				СтрокаТаблицы.СуммаУвеличение = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаУвеличение, СтруктураШапкиДокумента.ВалютаДокумента,
					СтруктураШапкиДокумента.ВалютаРегламентированногоУчета,
					СтрокаТаблицы.КурсВзаиморасчетов,
					Данные.Курс,
					СтрокаТаблицы.КратностьВзаиморасчетов,
					Данные.Кратность);
			ИначеЕсли СтрокаТаблицы.СуммаУменьшение <> 0 Тогда
				СтрокаТаблицы.СуммаУменьшение = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаУменьшение, СтруктураШапкиДокумента.ВалютаДокумента,
					СтруктураШапкиДокумента.ВалютаРегламентированногоУчета,
					СтрокаТаблицы.КурсВзаиморасчетов,
					Данные.Курс,
					СтрокаТаблицы.КратностьВзаиморасчетов,
					Данные.Кратность);
			КонецЕсли;
			
			Если СтрокаТаблицы.СуммаНДСУвеличение <> 0 Тогда
				СтрокаТаблицы.СуммаНДСУвеличение = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаНДСУвеличение, СтруктураШапкиДокумента.ВалютаДокумента,
					СтруктураШапкиДокумента.ВалютаРегламентированногоУчета,
					СтрокаТаблицы.КурсВзаиморасчетов,
					Данные.Курс,
					СтрокаТаблицы.КратностьВзаиморасчетов,
					Данные.Кратность);
			ИначеЕсли СтрокаТаблицы.СуммаНДСУменьшение <> 0 Тогда
				СтрокаТаблицы.СуммаНДСУменьшение = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаНДСУменьшение, СтруктураШапкиДокумента.ВалютаДокумента,
					СтруктураШапкиДокумента.ВалютаРегламентированногоУчета,
					СтрокаТаблицы.КурсВзаиморасчетов,
					Данные.Курс,
					СтрокаТаблицы.КратностьВзаиморасчетов,
					Данные.Кратность);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ПодготовитьТаблицуТоваровРегл()

// Устанавливает значение флага "Выставлен" и ревизита "Кода способа выставления" по умолчанию
//
Процедура УстановитьПризнакВыставлен() Экспорт
	
	Если СчетФактураНеВыставляется Тогда
		Возврат;
	Иначе
		
		Если ЗначениеЗаполнено(ДокументОснование) Тогда
			СтруктураЗапроса = ДокументОснование;
		Иначе
			СтруктураЗапроса = Новый Структура("Организация,Контрагент", Организация, Контрагент);
		КонецЕсли;	
		
		Если УчетНДС.НаличиеСоглашенияОбменаЭД(СтруктураЗапроса) Тогда
			КодСпособаВыставления = 2;
			Выставлен = Ложь;
			ДатаВыставления = '00010101';
		Иначе
			КодСпособаВыставления = 1;
			Выставлен = Истина;
			ДатаВыставления = ?(Дата = '00010101', ОбщегоНазначения.ПолучитьРабочуюДату(), Дата);
		КонецЕсли;	
	КонецЕсли;	
	
КонецПроцедуры	

Функция ПолучитьДанныеСводногоСчетаФактуры(СтруктураШапкиДокумента) 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", СтруктураШапкиДокумента.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.ВидСчетаФактуры,
	|	ВЫБОР
	|		КОГДА Реквизиты.Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА Реквизиты.Организация
	|		ИНАЧЕ Реквизиты.Контрагент
	|	КОНЕЦ КАК Контрагент,
	|	ВЫБОР
	|		КОГДА Реквизиты.Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА Реквизиты.Организация.КПП
	|		КОГДА Реквизиты.КППКонтрагента ПОДОБНО """"
	|			ТОГДА Реквизиты.Контрагент.КПП
	|		ИНАЧЕ Реквизиты.КППКонтрагента
	|	КОНЕЦ КАК КППКонтрагента,
	|	НЕОПРЕДЕЛЕНО КАК Продавец,
	|	Реквизиты.Ссылка КАК СчетФактура,
	|	ЗНАЧЕНИЕ(Перечисление.ЧастиЖурналаУчетаСчетовФактур.ВыставленныеСчетаФактуры) КАК ЧастьЖурнала,
	|	ВЫБОР
	|		КОГДА Реквизиты.СчетФактураНеВыставляется
	|			ТОГДА Реквизиты.Дата
	|		ИНАЧЕ Реквизиты.ДатаВыставления
	|	КОНЕЦ КАК ДатаВыставленияПолучения,
	|	ВЫБОР
	|		КОГДА Реквизиты.КодСпособаВыставления = 0
	|			ТОГДА 1
	|		ИНАЧЕ Реквизиты.КодСпособаВыставления
	|	КОНЕЦ КАК КодСпособаВыставленияПолучения,
	|	Реквизиты.КодВидаОперации КАК КодВидаОперации,
	|	Реквизиты.ВалютаДокумента КАК ВалютаДокумента,
	|	Реквизиты.СуммаДокумента КАК СуммаПоСчетуФактуре,
	|	Реквизиты.СуммаНДСДокумента КАК СуммаНДС,
	|	Реквизиты.СуммаУменьшение КАК СуммаПоСчетуФактуреРазницаУменьшение,
	|	Реквизиты.СуммаУвеличение КАК СуммаПоСчетуФактуреРазницаУвеличение,
	|	Реквизиты.СуммаНДСУменьшение КАК СуммаНДСРазницаУменьшение,
	|	Реквизиты.СуммаНДСУвеличение КАК СуммаНДСРазницаУвеличение,
	|	Реквизиты.СчетФактураБезНДС КАК ПоСтавкеБезНДС,
	|	Реквизиты.СчетФактураНеВыставляется КАК СчетФактураНеВыставляется,
	|	Реквизиты.ДокументОснование КАК ДокументОснование,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(Реквизиты.ДокументОснование) = ТИП(Документ.ОтчетКомиссионераОПродажах)
	|			ТОГДА ВЫРАЗИТЬ(Реквизиты.ДокументОснование КАК Документ.ОтчетКомиссионераОПродажах).Контрагент
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|	КОНЕЦ КАК Посредник,
	|	Реквизиты.СуммаДокументаКомиссия,
	|	Реквизиты.СуммаНДСДокументаКомиссия,
	|	Реквизиты.СуммаУменьшениеКомиссия,
	|	Реквизиты.СуммаУвеличениеКомиссия,
	|	Реквизиты.СуммаНДСУменьшениеКомиссия,
	|	Реквизиты.СуммаНДСУвеличениеКомиссия,
	|	Реквизиты.СводныйКомиссионный
	|ПОМЕСТИТЬ ВременнаяТаблицаЗаписьЖурналаУчетаСчетовФактур
	|ИЗ
	|	Документ.СчетФактураВыданный КАК Реквизиты
	|ГДЕ
	|	Реквизиты.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СчетФактураВыданныйДокументыОснования.ДокументОснование КАК ДокументОснование
	|ПОМЕСТИТЬ ВременнаяТаблицаДокументыОснования
	|ИЗ
	|	Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураВыданныйДокументыОснования
	|ГДЕ
	|	СчетФактураВыданныйДокументыОснования.Ссылка = &Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДокументОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтчетКомиссионераОПродажахПокупатели.Покупатель.КПП КАК КПППокупателя,
	|	ОтчетКомиссионераОПродажахПокупатели.Покупатель КАК Покупатель,
	|	СУММА(ОтчетКомиссионераОПродажахТовары.Сумма) КАК Сумма,
	|	СУММА(ОтчетКомиссионераОПродажахТовары.СуммаНДС) КАК СуммаНДС,
	|	ОтчетКомиссионераОПродажахПокупатели.СчетФактура КАК СчетФактура,
	|	ОтчетКомиссионераОПродажахПокупатели.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ ВТ_СчетаФактурыКомиссионеру
	|ИЗ
	|	Документ.ОтчетКомиссионераОПродажах.Покупатели КАК ОтчетКомиссионераОПродажахПокупатели
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтчетКомиссионераОПродажах.Товары КАК ОтчетКомиссионераОПродажахТовары
	|		ПО ОтчетКомиссионераОПродажахПокупатели.Ссылка = ОтчетКомиссионераОПродажахТовары.Ссылка
	|			И ОтчетКомиссионераОПродажахПокупатели.КлючСтроки = ОтчетКомиссионераОПродажахТовары.КлючСтроки
	|ГДЕ
	|	ОтчетКомиссионераОПродажахТовары.Ссылка ЕСТЬ НЕ NULL 
	|	И ОтчетКомиссионераОПродажахПокупатели.Ссылка.ВыписыватьСчетаФактурыСводно
	|	И ОтчетКомиссионераОПродажахПокупатели.СчетФактура = &Ссылка
	|	И ОтчетКомиссионераОПродажахПокупатели.Ссылка.Проведен
	|
	|СГРУППИРОВАТЬ ПО
	|	ОтчетКомиссионераОПродажахПокупатели.Покупатель,
	|	ОтчетКомиссионераОПродажахПокупатели.Покупатель.КПП,
	|	ОтчетКомиссионераОПродажахПокупатели.СчетФактура,
	|	ОтчетКомиссионераОПродажахПокупатели.НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СчетФактураВыданныйАвансы.Контрагент,
	|	СчетФактураВыданныйАвансы.Контрагент.КПП КАК КППКонтрагента,
	|	СчетФактураВыданныйАвансы.Ссылка.ДатаПлатежноРасчетногоДокумента КАК ДатаПлатежноРасчетногоДокумента,
	|	СчетФактураВыданныйАвансы.Ссылка.НомерПлатежноРасчетногоДокумента КАК НомерПлатежноРасчетногоДокумента,
	|	СчетФактураВыданныйАвансы.Сумма КАК Сумма,
	|	СчетФактураВыданныйАвансы.СуммаНДС КАК СуммаНДС,
	|	СчетФактураВыданныйАвансы.НомерСтроки
	|ПОМЕСТИТЬ ВТ_Авансы
	|ИЗ
	|	Документ.СчетФактураВыданный.Авансы КАК СчетФактураВыданныйАвансы
	|ГДЕ
	|	СчетФактураВыданныйАвансы.Ссылка = &Ссылка
	|	И СчетФактураВыданныйАвансы.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.НаАванс)
	|	И СчетФактураВыданныйАвансы.Ссылка.СводныйКомиссионный
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Реквизиты.ДокументОснование,
	|	Реквизиты.ВидСчетаФактуры,
	|	Реквизиты.Регистратор,
	|	ЕСТЬNULL(ВТ_Авансы.Контрагент, ЕСТЬNULL(ВТ_СчетаФактурыКомиссионеру.Покупатель, Реквизиты.Контрагент)) КАК Контрагент,
	|	ЕСТЬNULL(ВТ_Авансы.КППКонтрагента, ЕСТЬNULL(ВТ_СчетаФактурыКомиссионеру.КПППокупателя, Реквизиты.КППКонтрагента)) КАК КППКонтрагента,
	|	НЕОПРЕДЕЛЕНО КАК Продавец,
	|	Реквизиты.СчетФактура,
	|	Реквизиты.ЧастьЖурнала,
	|	Реквизиты.ДатаВыставленияПолучения,
	|	Реквизиты.КодСпособаВыставленияПолучения КАК КодСпособаПолучения,
	|	Реквизиты.ВалютаДокумента КАК Валюта,
	|	СУММА(ВЫБОР
	|			КОГДА ВТ_Авансы.Сумма ЕСТЬ НЕ NULL 
	|				ТОГДА ВТ_Авансы.Сумма
	|			КОГДА ВТ_СчетаФактурыКомиссионеру.Сумма ЕСТЬ НЕ NULL 
	|				ТОГДА ВТ_СчетаФактурыКомиссионеру.Сумма
	|			ИНАЧЕ Реквизиты.СуммаПоСчетуФактуре
	|		КОНЕЦ) КАК СуммаПоСчетуФактуре,
	|	СУММА(ВЫБОР
	|			КОГДА ВТ_Авансы.СуммаНДС ЕСТЬ НЕ NULL 
	|				ТОГДА ВТ_Авансы.СуммаНДС
	|			КОГДА ВТ_СчетаФактурыКомиссионеру.СуммаНДС ЕСТЬ НЕ NULL 
	|				ТОГДА ВТ_СчетаФактурыКомиссионеру.СуммаНДС
	|			ИНАЧЕ Реквизиты.СуммаНДС
	|		КОНЕЦ) КАК СуммаНДС,
	|	Реквизиты.ПоСтавкеБезНДС КАК ПоСтавкеБезНДС,
	|	Реквизиты.СчетФактураНеВыставляется,
	|	ЕСТЬNULL(ВТ_СчетаФактурыКомиссионеру.НомерСтроки, ЕСТЬNULL(ВТ_Авансы.НомерСтроки, 0)) КАК ИндексСтроки,
	|	Реквизиты.Посредник,
	|	НЕОПРЕДЕЛЕНО КАК СчетФактураВыданныйПокупателю,
	|	НЕОПРЕДЕЛЕНО КАК Субкомиссионер,
	|	НЕОПРЕДЕЛЕНО КАК КодВидаСделки,
	|	НЕОПРЕДЕЛЕНО КАК НомерСчетаФактурыПродавца,
	|	СУММА(Реквизиты.СуммаНДСДокументаКомиссия) КАК СуммаНДСКомиссия,
	|	СУММА(Реквизиты.СуммаДокументаКомиссия) КАК СуммаПоСчетуФактуреКомиссия,
	|	СУММА(0) КАК СуммаПоСчетуФактуреРазницаУвеличениеКомиссия,
	|	СУММА(0) КАК СуммаНДСРазницаУвеличениеКомиссия,
	|	СУММА(0) КАК СуммаНДСРазницаУменьшениеКомиссия,
	|	СУММА(0) КАК СуммаПоСчетуФактуреРазницаУменьшениеКомиссия,
	|	НЕОПРЕДЕЛЕНО КАК КодВидаОперацииКомиссия
	|ИЗ
	|	ВременнаяТаблицаЗаписьЖурналаУчетаСчетовФактур КАК Реквизиты
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Авансы КАК ВТ_Авансы
	|		ПО (Реквизиты.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.НаАванс))
	|			И (Реквизиты.СводныйКомиссионный)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СчетаФактурыКомиссионеру КАК ВТ_СчетаФактурыКомиссионеру
	|		ПО Реквизиты.СчетФактура = ВТ_СчетаФактурыКомиссионеру.СчетФактура
	|			И (Реквизиты.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.НаРеализацию))
	|
	|СГРУППИРОВАТЬ ПО
	|	Реквизиты.Посредник,
	|	Реквизиты.ПоСтавкеБезНДС,
	|	Реквизиты.СчетФактураНеВыставляется,
	|	Реквизиты.ДокументОснование,
	|	Реквизиты.ВидСчетаФактуры,
	|	Реквизиты.Регистратор,
	|	ЕСТЬNULL(ВТ_Авансы.Контрагент, ЕСТЬNULL(ВТ_СчетаФактурыКомиссионеру.Покупатель, Реквизиты.Контрагент)),
	|	ЕСТЬNULL(ВТ_Авансы.КППКонтрагента, ЕСТЬNULL(ВТ_СчетаФактурыКомиссионеру.КПППокупателя, Реквизиты.КППКонтрагента)),
	|	Реквизиты.СчетФактура,
	|	Реквизиты.ЧастьЖурнала,
	|	Реквизиты.ДатаВыставленияПолучения,
	|	Реквизиты.ВалютаДокумента,
	|	ЕСТЬNULL(ВТ_СчетаФактурыКомиссионеру.НомерСтроки, ЕСТЬNULL(ВТ_Авансы.НомерСтроки, 0)),
	|	Реквизиты.КодСпособаВыставленияПолучения";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

#Если Клиент Тогда

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение(НСтр("ru = 'Документ можно распечатать только после его записи'"));
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение(НСтр("ru = Недостаточно полномочий для печати непроведенного документа!'"));
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда

		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
		
		Если ТабДокумент = Неопределено Тогда
			Возврат
		КонецЕсли; 
	Иначе
		ПараметрКоманды = Новый Массив;
		ПараметрКоманды.Добавить(Ссылка);
		
		ИменаМакетов = ИмяМакета;
		Если НЕ ПустаяСтрока(ИмяМакета) Тогда
			Для Итератор = 1 По КоличествоЭкземпляров - 1 Цикл
				ИменаМакетов = ИменаМакетов + "," + Сред(ИмяМакета, 1, Найти(ИмяМакета + ",", ",") - 1);
			КонецЦикла;
		КонецЕсли;
		
		Если НаПринтер Тогда
			УправлениеПечатьюКлиент.ВыполнитьКомандуПечатиНаПринтер("Документ.СчетФактураВыданный", ИменаМакетов, 
										ПараметрКоманды, Неопределено);
		Иначе
			УправлениеПечатьюКлиент.ВыполнитьКомандуПечати("Документ.СчетФактураВыданный", ИменаМакетов, 
										ПараметрКоманды, Неопределено, Неопределено);
		КонецЕсли;
		Возврат;
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()), Ссылка);

КонецПроцедуры // Печать

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	СтруктураМакетов = Новый Структура;
	Если НЕ ЗначениеЗаполнено(Дата) Тогда
		СтруктураМакетов.Вставить("СчетФактура283", "Счет-фактура 283");
		СтруктураМакетов.Вставить("СчетФактура575", "Счет-фактура 575");
		СтруктураМакетов.Вставить("СчетФактура84" , "Счет-фактура 84");
		СтруктураМакетов.Вставить("УниверсальныйПередаточныйДокумент", "Универсальный передаточный документ (УПД)");
	Иначе
		Если Дата < '20040216' Тогда
			СтруктураМакетов.Вставить("СчетФактура575", "Счет-фактура");
		ИначеЕсли Дата < '20060530' Тогда
			СтруктураМакетов.Вставить("СчетФактура84",  "Счет-фактура");
		ИначеЕсли Дата < '20130101' Тогда
			СтруктураМакетов.Вставить("СчетФактура283", "Счет-фактура");
		Иначе
			СтруктураМакетов.Вставить("СчетФактура283", "Счет-фактура");
			СтруктураМакетов.Вставить("УниверсальныйПередаточныйДокумент", "Универсальный передаточный документ (УПД)");
			СтруктураМакетов.Вставить("УниверсальныйКорректировочныйДокумент", "Универсальный корректировочный документ (УКД)");
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтруктураМакетов;
	
КонецФункции // ПолучитьСтруктуруПечатныхФорм()

#КонецЕсли

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ПриКопировании(ОбъектКопирования)
	
	ДокументОснование = Неопределено;
	ДокументыОснования.Очистить();
	ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект,, ОбъектКопирования.Ссылка);

КонецПроцедуры

Процедура ОбработкаЗаполнения(Основание)
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
		ЗаполнитьНаОснованииСчетаФактуры(Основание);
	ИначеЕсли ЗначениеЗаполнено(Основание) 
		И ЭтотОбъект.Метаданные().ТабличныеЧасти.ДокументыОснования.Реквизиты.ДокументОснование.Тип.СодержитТип(ТипЗнч(Основание)) Тогда
		
		Дата = Основание.Дата;
		Организация = Основание.Организация;
		
		ЭтоЮрЛицо = ОбщегоНазначения.ЭтоЮрЛицо(Организация);
		
		Если ТипЗнч(Основание) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда 
			Если ЭтоЮрЛицо Тогда 
				Руководитель = Основание.ОтпускРазрешил;
				ГлавныйБухгалтер = Основание.ГлавныйБухгалтер;
			ИначеЕсли УчетНДС.ВедетсяУчетНДСПоФЗ81(Дата) Тогда
				Руководитель = Основание.ОтпускРазрешил;
			КонецЕсли;
		КонецЕсли;
		
		СтрокаОснованиеВТабличнойЧасти = ДокументыОснования.Добавить();
		СтрокаОснованиеВТабличнойЧасти.ДокументОснование = Основание;
		
		ДокументОснование = Основание;
		
		ЗаполнитьДатуИНомерВходящегоДокумента();
		
		Если НЕ ЗначениеЗаполнено(ВидСчетаФактуры)
			ИЛИ ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию Тогда
		
			СписокТиповНаАванс = ПолучитьСписокТиповПоВидуСчетаФактуры(Перечисления.ВидСчетаФактурыВыставленного.НаАванс);
			СписокТиповНалоговыйАгент = ПолучитьСписокТиповПоВидуСчетаФактуры(Перечисления.ВидСчетаФактурыВыставленного.НалоговыйАгент);
			СписокТиповКорректировочный = ПолучитьСписокТиповПоВидуСчетаФактуры(Перечисления.ВидСчетаФактурыВыставленного.Корректировочный);
			Если СписокТиповНаАванс.Найти(ТипЗнч(Основание)) <> Неопределено
				И ТипЗнч(Основание) <> Тип("ДокументСсылка.КорректировкаРеализации") Тогда
					
				ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАванс;
				
			ИначеЕсли СписокТиповНалоговыйАгент.Найти(ТипЗнч(Основание)) <> Неопределено Тогда
				ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НалоговыйАгент;
			ИначеЕсли СписокТиповКорректировочный.Найти(ТипЗнч(Основание)) <> Неопределено Тогда
				ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный;
			Иначе
				ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию;
			КонецЕсли;
		
		КонецЕсли;
		
		Если ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАванс Тогда
			
			ДатаНомерДокументовОплаты.Очистить();
			Если ТипЗнч(Основание) = Тип("ДокументСсылка.ПлатежноеПоручениеВходящее")
				Или ТипЗнч(Основание) = Тип("ДокументСсылка.ПлатежныйОрдерПоступлениеДенежныхСредств") Тогда
				НомерПлатежноРасчетногоДокумента = Основание.НомерВходящегоДокумента;
				ДатаПлатежноРасчетногоДокумента =  Основание.ДатаВходящегоДокумента;
				
			ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") Тогда
				НомерПлатежноРасчетногоДокумента = ОбщегоНазначения.ПолучитьНомерНаПечать(Основание);
				ДатаПлатежноРасчетногоДокумента =  Основание.Дата;
			Иначе
				НомерПлатежноРасчетногоДокумента = "";
				ДатаПлатежноРасчетногоДокумента =  Неопределено;
			КонецЕсли;
			
			СтрокаПРД = ДатаНомерДокументовОплаты.Добавить();
			СтрокаПРД.ДатаПлатежноРасчетногоДокумента	= ДатаПлатежноРасчетногоДокумента;
			СтрокаПРД.НомерПлатежноРасчетногоДокумента	= НомерПлатежноРасчетногоДокумента;
			
			ДокументЗаполнен = Ложь;
			ОпределениеПараметровСчетаФактурыНаАванс(ДокументЗаполнен);
			
			Если НЕ ДокументЗаполнен Тогда
				ТекстСообщения = "Не обнаружены данные для регистрации счета-фактуры на предварительную оплату или на суммовую разницу.";
				ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения);
			КонецЕсли;
			
		ИначеЕсли ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НалоговыйАгент Тогда
			
			ДатаНомерДокументовОплаты.Очистить();
			НомерПлатежноРасчетногоДокумента = ОбщегоНазначения.ПолучитьНомерНаПечать(Основание);
			ДатаПлатежноРасчетногоДокумента = Основание.Дата;
			
			СтрокаПРД = ДатаНомерДокументовОплаты.Добавить();
			СтрокаПРД.ДатаПлатежноРасчетногоДокумента	= ДатаПлатежноРасчетногоДокумента;
			СтрокаПРД.НомерПлатежноРасчетногоДокумента	= НомерПлатежноРасчетногоДокумента;
			
			ДокументЗаполнен = Ложь;
			ОпределениеПараметровСчетаФактурыНалоговыйАгент(ДокументЗаполнен);
			
			Если Не ДокументЗаполнен Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Не обнаружены данные для регистрации счета-фактуры налогового агента.");
			КонецЕсли; 
			
			СчетФактураНеВыставляется = Истина;
			
		ИначеЕсли ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный Тогда
			
			ЗаполнитьНаОснованииИсправления(Основание, СтрокаОснованиеВТабличнойЧасти);
			ОпределениеПараметровСчетаФактуры();
			
		ИначеЕсли ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию Тогда
			
			ОпределениеПараметровСчетаФактуры();
			
		КонецЕсли;
		
		Если КодВидаОперации = "" Тогда
			УстановитьКодВидаОперации();
		КонецЕсли;	

	КонецЕсли;
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.НачислениеНДСпоСМРхозспособом") Тогда 
		СчетФактураНеВыставляется = Истина;
	КонецЕсли;	
	
	УстановитьПризнакВыставлен();
	
	ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект);
		
КонецПроцедуры 

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	НепроверяемыеРеквизиты = Новый Массив;
		
	Если СформированПриВводеНачальныхОстатковНДС Тогда
		НепроверяемыеРеквизиты.Добавить("ДокументыОснования.ДокументОснование");
	КонецЕсли;
	
	Если СформированПриВводеНачальныхОстатковНДС
		ИЛИ ВидСчетаФактуры <> Перечисления.ВидСчетаФактурыВыставленного.НаАванс  Тогда
		НепроверяемыеРеквизиты.Добавить("Авансы.Сумма");
		НепроверяемыеРеквизиты.Добавить("Авансы.СтавкаНДС");
	КонецЕсли;
	
	Если ВидСчетаФактуры <> Перечисления.ВидСчетаФактурыВыставленного.КорректировочныйНаАванс Тогда
	
		НепроверяемыеРеквизиты.Добавить("Авансы.СуммаДоКорректировки");
		НепроверяемыеРеквизиты.Добавить("Авансы.СтавкаНДСДоКорректировки");
		НепроверяемыеРеквизиты.Добавить("Авансы.КорректируемыйСчетФактура");
	Иначе
		Для Каждого СтрокаАвансы Из Авансы Цикл
				 
			Если СтрокаАвансы.СуммаДоКорректировки > СтрокаАвансы.Сумма Тогда
				ТекстСообщения = НСтр("ru = 'Строка номер %1 в табличной части ""Авансы"" Некорректно заполнена колонка: ""Сумма""'");
				
				СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ТекстСообщения, СтрокаАвансы.НомерСтроки);
				ОбщегоНазначения.СообщитьОбОшибке(СтрокаСообщения, Отказ);
			КонецЕсли;
			Если СтрокаАвансы.СуммаНДСДоКорректировки > СтрокаАвансы.СуммаНДС Тогда
				ТекстСообщения = НСтр("ru = 'Строка номер %1 в табличной части ""Авансы"" Некорректно заполнена колонка: ""Сумма НДС""'");
				СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ТекстСообщения, СтрокаАвансы.НомерСтроки);
				ОбщегоНазначения.СообщитьОбОшибке(СтрокаСообщения, Отказ);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	ВерсияПостановления = УчетНДС.ПолучитьВерсиюПостановления(Дата);
	
	Если ВерсияПостановления = 1 Тогда
		НепроверяемыеРеквизиты.Добавить("КодСпособаВыставления");
		НепроверяемыеРеквизиты.Добавить("ДатаВыставления");
		НепроверяемыеРеквизиты.Добавить("Выставлен");
		НепроверяемыеРеквизиты.Добавить("НомерИсходногоДокумента");
		НепроверяемыеРеквизиты.Добавить("ДатаИсходногоДокумента");
		
		НепроверяемыеРеквизиты.Добавить("НомерИсправления");
		НепроверяемыеРеквизиты.Добавить("ДатаВыставления");
		НепроверяемыеРеквизиты.Добавить("НомерИсправляемогоКорректировочногоДокумента");
		НепроверяемыеРеквизиты.Добавить("ДатаИсправляемогоКорректировочногоДокумента");
	Иначе
				
		Если СформированПриВводеНачальныхОстатковНДС ИЛИ
			ВидСчетаФактуры <> Перечисления.ВидСчетаФактурыВыставленного.Корректировочный Тогда
			Если НЕ Исправление Тогда
				НепроверяемыеРеквизиты.Добавить("НомерИсходногоДокумента");
				НепроверяемыеРеквизиты.Добавить("ДатаИсходногоДокумента");
			КонецЕсли;
			НепроверяемыеРеквизиты.Добавить("НомерИсправляемогоКорректировочногоДокумента");
			НепроверяемыеРеквизиты.Добавить("ДатаИсправляемогоКорректировочногоДокумента");
		ИначеЕсли ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный Тогда
			НепроверяемыеРеквизиты.Добавить("НомерИсходногоДокумента");
			НепроверяемыеРеквизиты.Добавить("ДатаИсходногоДокумента");
			Если НЕ Исправление Тогда
				НепроверяемыеРеквизиты.Добавить("НомерИсправляемогоКорректировочногоДокумента");
				НепроверяемыеРеквизиты.Добавить("ДатаИсправляемогоКорректировочногоДокумента");
			КонецЕсли;
		КонецЕсли;
		
		Если СформированПриВводеНачальныхОстатковНДС ИЛИ НЕ Исправление Тогда
			НепроверяемыеРеквизиты.Добавить("НомерИсправления");			
		КонецЕсли;
				
		Если СформированПриВводеНачальныхОстатковНДС ИЛИ НЕ Выставлен Тогда
			НепроверяемыеРеквизиты.Добавить("ДатаВыставления");
		КонецЕсли;
		
	КонецЕсли;
	
	Если СводныйКомиссионный Тогда
		НепроверяемыеРеквизиты.Добавить("Комитент");
	Иначе
		НепроверяемыеРеквизиты.Добавить("Авансы.Контрагент");
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, НепроверяемыеРеквизиты);
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	мУдалятьДвижения = НЕ ЭтоНовый();
	
	Если НЕ мОбновлятьРеквизитыПриЗаписи 
		ИЛИ ПометкаУдаления Тогда
		Возврат;
	КонецЕсли;

	Если ДокументыОснования.Количество() = 0 Тогда
		ДокументыОснования.Добавить();
	КонецЕсли;
	Если ЗначениеЗаполнено(ДокументОснование) И ДокументыОснования.Найти(ДокументОснование) = Неопределено Тогда
		ДокументОснование = Неопределено;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ДокументОснование) Тогда
		ДокументОснование = ДокументыОснования[0].ДокументОснование;
	КонецЕсли;
	
	Если ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный Тогда
		ДатаНомерДокументовОплаты.Очистить();
		ДатаПлатежноРасчетногоДокумента  = '00010101';
		НомерПлатежноРасчетногоДокумента = "";
	Иначе
		Если ДатаНомерДокументовОплаты.Количество() = 0 Тогда
			ДатаНомерДокументовОплаты.Добавить();
		КонецЕсли;
		ДатаПлатежноРасчетногоДокумента  = ДатаНомерДокументовОплаты[0].ДатаПлатежноРасчетногоДокумента;
		НомерПлатежноРасчетногоДокумента = ДатаНомерДокументовОплаты[0].НомерПлатежноРасчетногоДокумента;
	КонецЕсли;
	
	Если (ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию
		ИЛИ ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный) 
		И НЕ СформированПриВводеНачальныхОстатковНДС Тогда
		ОпределениеПараметровСчетаФактуры();
	ИначеЕсли ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.КорректировочныйНаАванс Тогда
		ИсходныеДокументы = Авансы.Выгрузить(, "КорректируемыйСчетФактура");
		ИсходныеДокументы.Свернуть("КорректируемыйСчетФактура");
		СводныйКорректировочный = ИсходныеДокументы.Количество() > 1;
	Иначе
		СводныйКорректировочный = Ложь;
	КонецЕсли;
	
	Если (ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАванс 
		ИЛИ ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.КорректировочныйНаАванс)
		И ЗначениеЗаполнено(ДоговорКонтрагента) Тогда 
		// Если покупатель исполняет обязанности налогового агента, то очистим сумму НДС.
		ВедетсяУчетНДСПоФЗ335         = УчетНДС.ВедетсяУчетНДСПоФЗ335(Дата);
		ПокупательНалоговыйАгентПоНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДоговорКонтрагента, "РеализацияТоваровОблагаемыхНДСУПокупателя");
		Если ПокупательНалоговыйАгентПоНДС = Истина
		   И ВедетсяУчетНДСПоФЗ335 Тогда 
			Для Каждого СтрокаТаблицы Из Авансы Цикл
				СтрокаТаблицы.СтавкаНДС                = УчетНДС.СтавкаНДСИсчисляетсяНалоговымАгентом(Дата);
				СтрокаТаблицы.СтавкаНДСДоКорректировки = УчетНДС.СтавкаНДСИсчисляетсяНалоговымАгентом(Дата);
				СтрокаТаблицы.СуммаНДС                 = 0;
				СтрокаТаблицы.СуммаНДСДоКорректировки  = 0;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры 

Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	
	ОбщегоНазначения.ДобавитьПрефиксОрганизации(ЭтотОбъект, Префикс);
	Если Исправление Тогда
		Префикс = "И" + Префикс;
	ИначеЕсли ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАванс
		ИЛИ ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.КорректировочныйНаАванс
		ИЛИ ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитента Тогда
		
		Если Константы.ОтдельнаяНумерацияСчетовФактурНаАванс.Получить() Тогда
			Префикс = "А" + Префикс;		
		КонецЕсли;	

	КонецЕсли;
	ОбщегоНазначения.ДобавитьПрефиксУзла(Префикс);
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ)

	Перем Заголовок, СтруктураШапкиДокумента, ТаблицаПоДокументамОснованиям, ТаблицаПоАвансам;
	
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;
	
	Если СформированПриВводеНачальныхОстатковНДС Тогда
		Возврат;
	КонецЕсли;
	
	ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента);
	
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	ПодготовитьТаблицыДокумента(ТаблицаПоДокументамОснованиям, ТаблицаПоАвансам);
	
	ПроверитьЗаполнениеТабличнойЧастиПоДокументамОснованиям(ТаблицаПоДокументамОснованиям, СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// Движения по документу
	Если НЕ Отказ Тогда
		
		ДвиженияПоРегистрам(
			СтруктураШапкиДокумента,
			ТаблицаПоДокументамОснованиям,
			ТаблицаПоАвансам,
			Отказ,
			Заголовок);
			
		СформироватьДвиженияСчетФактураКорректировочныйНаАванс(
			СтруктураШапкиДокумента,
			Отказ,
			Заголовок);
			
	КонецЕсли;
	
КонецПроцедуры 


мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");
мНадписьПредоплата = "Предварительный платеж";
мОбновлятьРеквизитыПриЗаписи = Истина;
мВестиУчетПлатежейПоГосКонтрактам = глЗначениеПеременной("ВестиУчетПлатежейПоГосКонтрактам");
