////////////////////////////////////////////////////////////////////////////////
// Подсистема "Электронные документы".
// Серверные процедуры и функции общего назначения:
// - для работы с деревом данных;
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// см. ОбщегоНазначенияЭД.ДеревоДокумента
//
Функция ДеревоДокумента(НазваниеМакета) Экспорт
	
	Макет = Обработки.ЭлектронныеДокументы.ПолучитьМакет(НазваниеМакета);
	ВысотаТаблицы = Макет.ВысотаТаблицы;
	ШиринаТаблицы = Макет.ШиринаТаблицы;
	ТаблицаЗначений = Новый ТаблицаЗначений;
	
	Для НомерКолонки = 1 По ШиринаТаблицы Цикл
		ОбластьШапки = Макет.Область(1,НомерКолонки);
		НазваниеКолонки = ОбластьШапки.Текст;
		ТаблицаЗначений.Колонки.Добавить(НазваниеКолонки);
	КонецЦикла;
	
	Для НомерСтроки = 2 По ВысотаТаблицы Цикл
		НоваяСтрока = ТаблицаЗначений.Добавить();
		Для НомерКолонки = 0 По ШиринаТаблицы-1 Цикл
			НоваяСтрока.Установить(НомерКолонки, Макет.Область(НомерСтроки, НомерКолонки + 1).Текст);
		КонецЦикла;
		ДобавитьСтрокиТипаВТаблицуДереваДокумента(ТаблицаЗначений, НоваяСтрока, Макет);
	КонецЦикла;
	ТаблицаЗначений.Колонки.Добавить("ПолныйПуть");
	ТаблицаЗначений.Колонки.Сдвинуть("Значение",   -6);
	ТаблицаЗначений.Колонки.Сдвинуть("ПолныйПуть", -ШиринаТаблицы);
	КолУровней = 0;
	
	ДеревоЗначений = Новый ДеревоЗначений;
	Для Каждого Колонка Из ТаблицаЗначений.Колонки Цикл
		ДеревоЗначений.Колонки.Добавить(Колонка.Имя);
		Если Найти(Колонка.Имя, "Уровень") > 0 Тогда
			НомерУровня = Число(Сред(Колонка.Имя, 8, 2));
			Если НомерУровня > КолУровней Тогда
				КолУровней = НомерУровня;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ПолныйПуть = "";
	РекурсивноЗаполнитьСтрокиДерева(ДеревоЗначений, 1, КолУровней, ПолныйПуть, ТаблицаЗначений, 0);
	
	Возврат ДеревоЗначений;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Процедура РекурсивноЗаполнитьСтрокиДерева(ДеревоЗначений, Знач НомерУровня, КолУровней, Знач ПолныйПутьВДереве, ТЗ, НомерСтрокиТЗ)
	
	ЛокПолныйПуть = ПолныйПутьВДереве;
	СтрокаТекУровня = Неопределено;
	Пока НомерСтрокиТЗ < ТЗ.Количество() Цикл
		СтрокаТЗ = ТЗ[НомерСтрокиТЗ];
		Для Сч = НомерУровня По КолУровней Цикл
			ИдТекУровня = "Уровень" + Сч;
			Если ТЗ.Колонки.Найти(ИдТекУровня) <> Неопределено И ЗначениеЗаполнено(СтрокаТЗ[ИдТекУровня]) Тогда
				Если НомерУровня < Сч Тогда
					РекурсивноЗаполнитьСтрокиДерева(СтрокаТекУровня, Сч, КолУровней, ЛокПолныйПуть, ТЗ, НомерСтрокиТЗ);
				ИначеЕсли НомерУровня = Сч Тогда
					СтрокаТекУровня = ДеревоЗначений.Строки.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаТекУровня, СтрокаТЗ);
					ЛокПолныйПуть = ?(ПолныйПутьВДереве = "", "", ПолныйПутьВДереве + ".") + СтрокаТекУровня["Уровень" + Сч];
					СтрокаТекУровня.ПолныйПуть = ЛокПолныйПуть;
				КонецЕсли;
				НомерСтрокиТЗ = НомерСтрокиТЗ + 1;
				Прервать;
			КонецЕсли;
			Если Сч >= КолУровней Тогда
				НомерСтрокиТЗ = НомерСтрокиТЗ - 1;
				Возврат;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьСтрокиТипаВТаблицуДереваДокумента(ТаблицаМакета, СтрокаТаблицы, Макет)
	
	ИмяОбластиТипа = СтрокаТаблицы.Признак;
	
	Если Не ЗначениеЗаполнено(ИмяОбластиТипа) Тогда
		Возврат;
	КонецЕсли;
	Если Макет.Области.Найти(ИмяОбластиТипа) = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МакетТипа = Макет.ПолучитьОбласть(ИмяОбластиТипа);
	
	ТаблицаТипа = ТаблицаМакета.СкопироватьКолонки();
	
	ВысотаТаблицы = МакетТипа.ВысотаТаблицы;
	ШиринаТаблицы = МакетТипа.ШиринаТаблицы;
	
	Для НомерСтроки = 1 По ВысотаТаблицы Цикл
		НоваяСтрока = ТаблицаТипа.Добавить();
		Для НомерКолонки = 1 По ШиринаТаблицы Цикл
			НоваяСтрока.Установить(НомерКолонки - 1, МакетТипа.Область(НомерСтроки, НомерКолонки).Текст);
		КонецЦикла;
		ДобавитьСтрокиТипаВТаблицуДереваДокумента(ТаблицаТипа, НоваяСтрока, Макет);
	КонецЦикла;
	
	СдвигУровня = 0;
	СчетчикУровня = 1;
	Пока Истина Цикл
		ИмяКолонки = "Уровень" + Формат(СчетчикУровня, "ЧГ=0");
		Если ТаблицаМакета.Колонки.Найти(ИмяКолонки) = Неопределено Тогда
			Прервать;
		КонецЕсли;
		ЗначениеКолонки = СтрокаТаблицы[ИмяКолонки];
		Если ЗначениеЗаполнено(ЗначениеКолонки) Тогда
			СдвигУровня = СчетчикУровня - 1;
			Прервать;
		КонецЕсли;
		СчетчикУровня = СчетчикУровня + 1;
	КонецЦикла;
	
	// Из первой строки берем только признак.
	СтрокаТаблицы.Признак = ТаблицаТипа[0].Признак;
	
	Для НомерСтроки = 2 По ТаблицаТипа.Количество() Цикл
		
		СтрокаТаблицыТипа = ТаблицаТипа[НомерСтроки - 1];
		СтрокаТаблицыМакета = ТаблицаМакета.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицыМакета, СтрокаТаблицыТипа);
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.КодПредставления)
			И ЗначениеЗаполнено(СтрокаТаблицыТипа.КодПредставления) Тогда
			СтрокаТаблицыМакета.КодПредставления = "" + СтрокаТаблицы.КодПредставления  + "_" + СтрокаТаблицыТипа.КодПредставления;
		КонецЕсли;
		
		// Вычислим текущий уровень.
		ТекущийУровень = 0;
		СчетчикУровня = 1;
		Пока Истина Цикл
			ИмяКолонки = "Уровень" + Формат(СчетчикУровня, "ЧГ=0");
			Если ТаблицаМакета.Колонки.Найти(ИмяКолонки) = Неопределено Тогда
				Прервать;
			КонецЕсли;
			ЗначениеКолонки = СтрокаТаблицыМакета[ИмяКолонки];
			Если ЗначениеЗаполнено(ЗначениеКолонки) Тогда
				ТекущийУровень = СчетчикУровня;
				Прервать;
			КонецЕсли;
			СчетчикУровня = СчетчикУровня + 1;
		КонецЦикла;
		// Сдвинем уровень.
		Если ЗначениеЗаполнено(СдвигУровня) Тогда
			НовыйУровень = ТекущийУровень + СдвигУровня;
			ИмяКолонкиТекущий = "Уровень" + Формат(ТекущийУровень, "ЧГ=0");
			ИмяКолонкиНовый = "Уровень" + Формат(НовыйУровень, "ЧГ=0");
			Если ТаблицаМакета.Колонки.Найти(ИмяКолонкиНовый) = Неопределено Тогда
				ТаблицаМакета.Колонки.Добавить(ИмяКолонкиНовый);
			КонецЕсли;
			СтрокаТаблицыМакета[ИмяКолонкиНовый] = СтрокаТаблицыМакета[ИмяКолонкиТекущий];
			СтрокаТаблицыМакета[ИмяКолонкиТекущий] = "";
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры
