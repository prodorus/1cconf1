
Процедура ПервыйЗапуск() Экспорт
	
	Справочники.ТипыПлатежейФЗ275.ЗаполнитьПредопределенныеЭлементы();
	Справочники.СпособыОпределенияПоставщиков.ЗаполнитьПредопределенныеЭлементы();
	Справочники.ВидыДокументов.ЗаполнитьПредопределенныеЭлементы();
	Справочники.СтатьиКалькуляции.ЗаполнитьПредопределенноеОписаниеСтатьи();
	Справочники.ТоварыРаботыУслугиСТарифнымРегулированием.ЗаполнитьРеквизитыПоставляемыхДанных();
	
КонецПроцедуры

// Возвращает макет компоновки данных
//
// Параметры:
//  СхемаКомпоновкиДанных  - <СхемаКомпоновкиДанных> - исполняемая схема компоновки данных
//  НастройкиКомпоновщика  - <КомпоновщикНастроекКомпоновкиДанных>, <НастройкиКомпоновкиДанных> - настройки исполняемой схемы компоновки данных
//
// Возвращаемое значение:
//   <МакетКомпоновкиДанных> - макет компоновки данных
//
Функция ПодготовитьМакетКомпоновкиДляВыгрузкиСКД(СхемаКомпоновкиДанных, НастройкиКомпоновщика) Экспорт
	
	НастройкиКД = НастройкиКомпоновщика;
	Если ТипЗнч(НастройкиКомпоновщика) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		НастройкиКД = НастройкиКомпоновщика.ПолучитьНастройки();
	КонецЕсли;
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиКД,,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	Возврат МакетКомпоновки;
	
КонецФункции

// Выполняет схему компоновки данных и возвращает таблицу результата
//
// Параметры:
//  МакетКомпоновки  - <МакетКомпоновкиДанных> - макет компоновки данных
//  ВнешниеНаборыДанных  - <Структура> - внешние наборы компоновки данных - ключ - наименование внешнего набора, значение - таблица значений внешнего набора
//  ВыводВДерево - <Булево> - если Истина выводить в дерево значений
//
// Возвращаемое значение:
//   <ТаблицаЗначений>, <ДеревоЗначений> - результат выполнения схемы компоновки данных
//
Функция ВыгрузитьРезультатСКДПоМакету(МакетКомпоновки, ВнешниеНаборыДанных = Неопределено, ВыводВДерево = Ложь) Экспорт
	
	Результат = Новый ТаблицаЗначений;
	Если ВыводВДерево Тогда
		Результат = Новый ДеревоЗначений;
	КонецЕсли;
	
	//Создаем процессор компоновки
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	Если ВнешниеНаборыДанных = Неопределено Тогда
		ПроцессорКомпоновки.Инициализировать(МакетКомпоновки,,,Истина);
	Иначе
		ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных,,Истина);
	КонецЕсли;
	
	//Выводим в таблицу значений
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(Результат);
	Результат = ПроцессорВывода.Вывести(ПроцессорКомпоновки, Истина);
	Возврат Результат;
	
КонецФункции

// Выполняет схему компоновки данных и возвращает таблицу результата
//
// Параметры:
//  СхемаКомпоновкиДанных  - <СхемаКомпоновкиДанных> - исполняемая схема компоновки данных
//  НастройкиКомпоновщика  - <КомпоновщикНастроекКомпоновкиДанных> - компоновщик настроек исполняемой схемы компоновки данных
//  ВнешниеНаборыДанных  - <Структура> - внешние наборы компоновки данных - ключ - наименование внешнего набора, значение - таблица значений внешнего набора
//  ВыводВДерево - <Булево> - если Истина выводить в дерево значений
//
// Возвращаемое значение:
//   <ТаблицаЗначений>, <ДеревоЗначений> - результат выполнения схемы компоновки данных
//
Функция ВыгрузитьРезультатСКД(СхемаКомпоновкиДанных, НастройкиКомпоновщика, ВнешниеНаборыДанных = Неопределено, ВыводВДерево = Ложь) Экспорт
	
	МакетКомпоновщика = ПодготовитьМакетКомпоновкиДляВыгрузкиСКД(СхемаКомпоновкиДанных, НастройкиКомпоновщика);
	Возврат ВыгрузитьРезультатСКДПоМакету(МакетКомпоновщика, ВнешниеНаборыДанных, ВыводВДерево);
	
КонецФункции

Процедура УстановитьПараметрыВыбораБанковскогоСчета(Элемент, КонтрактСУчастникомГОЗ) Экспорт
	
	МассивПараметров = Новый Массив();
	СвязиПараметров = Новый Массив();
	СвязиПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.Владелец", "Объект.Владелец"));
	
	Если КонтрактСУчастникомГОЗ Тогда
		
		ПараметрВыбора = Новый ПараметрВыбора("Отбор.ОтдельныйСчетГОЗ", Истина);
		МассивПараметров.Добавить(ПараметрВыбора);
	
		ПараметрВыбора = Новый СвязьПараметраВыбора("Отбор.ГосударственныйКонтракт", "Объект.ГосударственныйКонтракт");
		СвязиПараметров.Добавить(ПараметрВыбора);
		
	Иначе
		
		ПараметрВыбора = Новый ПараметрВыбора("Отбор.ОтдельныйСчетГОЗ", Ложь);
		МассивПараметров.Добавить(ПараметрВыбора);
		
	КонецЕсли;
	
	Элемент.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	Элемент.СвязиПараметровВыбора = Новый ФиксированныйМассив(СвязиПараметров);
	
КонецПроцедуры

// Конструктор объекта ОписаниеТипов, содержащего тип Строка.
//
// Параметры:
//  ДлинаСтроки - Число.
//
// ВозвращаемоеЗначение:
//  ОписаниеТипов.
Функция ОписаниеТипаСтрока(ДлинаСтроки) Экспорт

	Массив = Новый Массив;
	Массив.Добавить(Тип("Строка"));

	КвалификаторСтроки = Новый КвалификаторыСтроки(ДлинаСтроки, ДопустимаяДлина.Переменная);

	Возврат Новый ОписаниеТипов(Массив, , КвалификаторСтроки);

КонецФункции

// Конструктор объекта ОписаниеТипов, содержащего тип Число.
//
// Параметры:
//  Разрядность - Число - общее количество разрядов числа (количество разрядов
//                        целой части плюс количество разрядов дробной части).
//  РазрядностьДробнойЧасти - Число - число разрядов дробной части.
//  ЗнакЧисла - ДопустимыйЗнак - допустимый знак числа.
//
// ВозвращаемоеЗначение:
//  ОписаниеТипов.
Функция ОписаниеТипаЧисло(Разрядность, РазрядностьДробнойЧасти = 0, ЗнакЧисла = Неопределено) Экспорт

	Если ЗнакЧисла = Неопределено Тогда
		КвалификаторЧисла = Новый КвалификаторыЧисла(Разрядность, РазрядностьДробнойЧасти);
	Иначе
		КвалификаторЧисла = Новый КвалификаторыЧисла(Разрядность, РазрядностьДробнойЧасти, ЗнакЧисла);
	КонецЕсли;

	Возврат Новый ОписаниеТипов("Число", КвалификаторЧисла);

КонецФункции

// Конструктор объекта ОписаниеТипов, содержащего тип Дата.
//
// Параметры:
//  ЧастиДаты - ЧастиДаты - набор вариантов использования значений типа Дата.
//
// ВозвращаемоеЗначение:
//  ОписаниеТипов.
Функция ОписаниеТипаДата(ЧастиДаты) Экспорт

	Массив = Новый Массив;
	Массив.Добавить(Тип("Дата"));

	КвалификаторДаты = Новый КвалификаторыДаты(ЧастиДаты);

	Возврат Новый ОписаниеТипов(Массив, , , КвалификаторДаты);

КонецФункции

Функция ТипПлатежа275ФЗДляКонтрактаИсполнителяПоУмолчанию() Экспорт
	Возврат Метаданные.Справочники.КонтрактыИсполнителей.Реквизиты.ТипПлатежаФЗ275.ЗначениеЗаполнения;
КонецФункции

Процедура УстановитьПараметрыВыбораТипаПлатежа275ФЗ(Элемент, ОбъектОснование) Экспорт
	МассивПараметров = Новый Массив;
	МассивДопустимыеКодыТиповПлатежей = Новый Массив;
	
	Если ТипЗнч(ОбъектОснование.Ссылка) = Тип("СправочникСсылка.КонтрактыИсполнителей") Тогда
		Если ОбъектОснование.КонтрактСУчастникомГОЗ И ОбъектОснование.ПлатежиПо275ФЗ Тогда
			МассивДопустимыеКодыТиповПлатежей.Добавить(9); // Расчеты с иностранными исполнителями, в соответствии с утвержденным перечнем
			МассивДопустимыеКодыТиповПлатежей.Добавить(99);// Списание на отдельный счет
		ИначеЕсли Не ОбъектОснование.КонтрактСУчастникомГОЗ И ОбъектОснование.ПлатежиПо275ФЗ Тогда
			МассивДопустимыеКодыТиповПлатежей.Добавить(0); // Иное списание
			МассивДопустимыеКодыТиповПлатежей.Добавить(2); // Оплата товаров, работ, услуг, по ценам, подлежащим государственному регулированию
			МассивДопустимыеКодыТиповПлатежей.Добавить(3); // Оплата иных расходов на сумму не более трех миллионов рублей в месяц
			МассивДопустимыеКодыТиповПлатежей.Добавить(9); // Расчеты с иностранными исполнителями, в соответствии с утвержденным перечнем
			МассивДопустимыеКодыТиповПлатежей.Добавить(99);// Списание на отдельный счет
		КонецЕсли;
	ИначеЕсли ТипЗнч(ОбъектОснование.Ссылка) = Тип("ДокументСсылка.ЗаявкаНаРасходованиеСредств")
		Или ТипЗнч(ОбъектОснование.Ссылка) = Тип("ДокументСсылка.ПлатежноеПоручениеИсходящее") Тогда
		Если ОбъектОснование.ПлатежПоФЗ275 Тогда
			
			ВидОперацииДокумента = Контроли275Сервер.ВидыОперацийСписаниеСРасчетногоСчета(ОбъектОснование.ВидОперации);
			Если ВидОперацииДокумента = "ОплатаПоставщику" Тогда
				МассивДопустимыеКодыТиповПлатежей.Добавить(2); // Оплата товаров, работ, услуг, по ценам, подлежащим государственному регулированию
				МассивДопустимыеКодыТиповПлатежей.Добавить(3); // Оплата иных расходов на сумму не более трех миллионов рублей в месяц
				МассивДопустимыеКодыТиповПлатежей.Добавить(9); // Расчеты с иностранными исполнителями, в соответствии с утвержденным перечнем
				МассивДопустимыеКодыТиповПлатежей.Добавить(99);// Списание на отдельный счет
			ИначеЕсли ВидОперацииДокумента = "ВозвратОплатыКлиенту" Тогда
				МассивДопустимыеКодыТиповПлатежей.Добавить(99);// Списание на отдельный счет
			ИначеЕсли ВидОперацииДокумента = "ОплатаПоКредиту" Тогда
				МассивДопустимыеКодыТиповПлатежей.Добавить(8); // Списание сумм кредитов, ранее перечисленных уполномоченным банком на отдельный счет
			ИначеЕсли ВидОперацииДокумента = "ПеречислениеНаДепозит" Тогда
				МассивДопустимыеКодыТиповПлатежей.Добавить(7); // Списание, связанное с размещением денежных средств на депозите в уполномоченном банке
			ИначеЕсли ВидОперацииДокумента = "ПеречислениеВБюджет" Тогда
				МассивДопустимыеКодыТиповПлатежей.Добавить(1); // Уплата налогов и сборов, таможенных платежей, страховых взносов
			ИначеЕсли ВидОперацииДокумента = "ПеречислениеДенежныхСредствНаДругойСчет" Тогда
				МассивДопустимыеКодыТиповПлатежей.Добавить(4); // Перечисление прибыли исполнителю, в пределах размера прибыли, предусмотренного условиями контракта
				МассивДопустимыеКодыТиповПлатежей.Добавить(10);// Списание денежных средств, направленных на возмещение затрат за счет собственных средств на формирование запасов по контракту
				МассивДопустимыеКодыТиповПлатежей.Добавить(11);// Перечисление прибыли головному исполнителю в рамках частичного исполнения госконтракта на поставку товара, в размере, согласованном госзаказчиком
				МассивДопустимыеКодыТиповПлатежей.Добавить(99);// Списание на отдельный счет
			ИначеЕсли ВидОперацииДокумента = "Прочее" Тогда
				МассивДопустимыеКодыТиповПлатежей.Добавить(0); // Иное списание
				МассивДопустимыеКодыТиповПлатежей.Добавить(5); // Оплата труда работников предприятия (при одновременной уплате соответствующих налогов и взносов)
				МассивДопустимыеКодыТиповПлатежей.Добавить(6); // Списание по исполнительным документам
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	//Если МассивДопустимыеКодыТиповПлатежей.Найти(
	//		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектОснование.ТипПлатежаФЗ275, "Код")) = Неопределено Тогда
	//	ОбъектОснование.ТипПлатежаФЗ275 = Неопределено;
	//КонецЕсли;
	
	ДопустимыеКодыТиповПлатежей = Новый ФиксированныйМассив(МассивДопустимыеКодыТиповПлатежей);
	
	ПараметрКод = Новый ПараметрВыбора("Отбор.Код", ДопустимыеКодыТиповПлатежей);
	МассивПараметров.Добавить(ПараметрКод);
	Элемент.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
КонецПроцедуры
