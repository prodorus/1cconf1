////////////////////////////////////////////////////////////////////////////////
// ЭлектронныеДокументыСлужебныйВызовСервера: механизм обмена электронными документами.
//
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЙ ПРОГРАММНЫЙ ИНТЕРФЕЙС

////////////////////////////////////////////////////////////////////////////////
// Работа с версиями электронных документов

Процедура ПроверитьНаличиеИУдалитьСостояниеДокумента(СсылкаНаОбъект) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	МенеджерЗаписи = РегистрыСведений.СостоянияЭД.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.СсылкаНаОбъект = СсылкаНаОбъект;
	МенеджерЗаписи.Прочитать();
	Если МенеджерЗаписи.Выбран() Тогда
		МенеджерЗаписи.Удалить();
	КонецЕсли;
	
КонецПроцедуры

// Получает сопоставление владельцев и актуальных ЭД
//
// Параметры:
//  МассивСсылокНаВладельцев - массив ссылок на владельцев электронных документов, данные которых необходимо получить.
//
Функция ПолучитьСоответствиеВладельцевИЭД(МассивСсылокНаВладельцев = Неопределено, МассивСсылокНаЭД = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СоответствиеВладельцевИЭД = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Если Не МассивСсылокНаВладельцев = Неопределено Тогда
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СостоянияЭД.СсылкаНаОбъект КАК ВладелецЭД,
		|	СостоянияЭД.ЭлектронныйДокумент КАК СсылкаНаЭД
		|ИЗ
		|	РегистрСведений.СостоянияЭД КАК СостоянияЭД
		|ГДЕ
		|	СостоянияЭД.СсылкаНаОбъект В(&МассивСсылокНаВладельцев)";
		Запрос.УстановитьПараметр("МассивСсылокНаВладельцев", МассивСсылокНаВладельцев);
	ИначеЕсли Не МассивСсылокНаЭД = Неопределено Тогда
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ЭДПрисоединенныеФайлы.Ссылка КАК СсылкаНаЭД,
		|	ЭДПрисоединенныеФайлы.ВладелецФайла КАК ВладелецЭД
		|ИЗ
		|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
		|ГДЕ
		|	ЭДПрисоединенныеФайлы.Ссылка В(&МассивЭД)";
		Запрос.УстановитьПараметр("МассивЭД", МассивСсылокНаЭД);
	Иначе
		Возврат СоответствиеВладельцевИЭД;
	КонецЕсли;
	
	Результат = Запрос.Выполнить().Выбрать();
	
	СоответствиеВладельцевИЭД = Новый Соответствие;
	Пока Результат.Следующий() Цикл
		СоответствиеВладельцевИЭД.Вставить(Результат.ВладелецЭД, Результат.СсылкаНаЭД);
	КонецЦикла;
	
	Возврат СоответствиеВладельцевИЭД;
	
КонецФункции

// Изменяет состояние версии электронного документа.
//
// Параметры:
//  ЭлектронныйДокумент - СправочникСсылка.ЭДПрисоединенныеФайлы, Массив - электронные документы, версии которых надо обновить.
//  ПринудительнаяСменаСостоянияВерсии - Булево, признак смены версии, несмотря на условия.
//
Процедура ОбновитьВерсиюЭД(ЭлектронныйДокумент, ПринудительнаяСменаСостоянияВерсии = Ложь, ВерсияФорматаПакета = Неопределено,
	ОтклонениеАннулирования = Ложь) Экспорт
	
	ЭлектронныеДокументыСлужебный.ОбновитьВерсиюЭД(
		ЭлектронныйДокумент, ПринудительнаяСменаСостоянияВерсии, ВерсияФорматаПакета, ОтклонениеАннулирования);
	
КонецПроцедуры

// Устанавливает новую версию электронного документа для владельца.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка - ссылка на документ базы данных, номер версии электронного
//                                    документа которого надо изменить.
//  ЭлектронныйДокумент - ДокументСсылка.ИсходящийЭлектронныйДокумент, ВходящийЭлектронныйДокумент - ссылка на
//                                    электронный документ, который в данный момент является актуальным.
//  УдалятьСтаруюВерсию - Булево - если Истина, то старая версия ЭД будет удалена.
//
Процедура УстановитьНовуюВерсиюЭД(СсылкаНаОбъект, ЭлектронныйДокумент = Неопределено, УдалятьСтаруюВерсию = Ложь, Знач ОбновитьОснованияЭД = Истина) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НаборЗаписей = РегистрыСведений.СостоянияЭД.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.СсылкаНаОбъект.Установить(СсылкаНаОбъект);
	НаборЗаписей.Прочитать();
	
	СтарыйЭлектронныйДокумент = Неопределено;
	
	Если НаборЗаписей.Количество() = 0 Тогда
		НоваяЗаписьНабора = НаборЗаписей.Добавить();
		НоваяЗаписьНабора.СсылкаНаОбъект = СсылкаНаОбъект;
		НоваяЗаписьНабора.ЭлектронныйДокумент = ЭлектронныйДокумент;

		НоваяЗаписьНабора.СостояниеВерсииЭД = ЭлектронныеДокументыСлужебный.ПолучитьПервоеСостояниеВерсииЭДДляВладельца(
			СсылкаНаОбъект, ЗначениеЗаполнено(ЭлектронныйДокумент));
		Если НоваяЗаписьНабора.СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.НаУтверждении Тогда
			НоваяЗаписьНабора.ДействияСНашейСтороны = Перечисления.СводныеСостоянияЭД.ТребуютсяДействия;
		КонецЕсли;
	Иначе
		
		НоваяЗаписьНабора = НаборЗаписей.Получить(0);
		
		СтарыйЭлектронныйДокумент = НоваяЗаписьНабора.ЭлектронныйДокумент;
		
		НоваяЗаписьНабора.ЭлектронныйДокумент = ЭлектронныйДокумент;
		
		Если УдалятьСтаруюВерсию Тогда
			УдалитьСтаруюВерсиюЭД(НоваяЗаписьНабора);
		КонецЕсли;
		НоваяЗаписьНабора.СостояниеВерсииЭД = ЭлектронныеДокументыСлужебный.ПолучитьПервоеСостояниеВерсииЭДДляВладельца(
			СсылкаНаОбъект, ЗначениеЗаполнено(ЭлектронныйДокумент));
		Если ЭлектронныйДокумент = Неопределено 
			Или ЭлектронныйДокумент.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий
			Или ЭлектронныйДокумент.НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани Тогда
			НоваяЗаписьНабора.ЭлектронныйДокумент = ЭлектронныйДокумент;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НоваяЗаписьНабора.СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.НеСформирован Тогда
		НоваяЗаписьНабора.ДействияСНашейСтороны = Перечисления.СводныеСостоянияЭД.ТребуютсяДействия;
		НоваяЗаписьНабора.ДействияСоСтороныДругогоУчастника = Перечисления.СводныеСостоянияЭД.ДействийНеТребуется;
	ИначеЕсли НоваяЗаписьНабора.СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.НеПолучен Тогда
		НоваяЗаписьНабора.ДействияСНашейСтороны = Перечисления.СводныеСостоянияЭД.ПустаяСсылка();
		НоваяЗаписьНабора.ДействияСоСтороныДругогоУчастника = Перечисления.СводныеСостоянияЭД.ПустаяСсылка();
	КонецЕсли;
	
	Если ТипЗнч(СсылкаНаОбъект) <> Тип("СправочникСсылка.СоглашенияОбИспользованииЭД") Тогда
		ОписаниеОснования = ЭлектронныеДокументыСлужебный.ОписаниеОснованияЭлектронногоДокумента(СсылкаНаОбъект);
		ЗаполнитьЗначенияСвойств(НоваяЗаписьНабора, ОписаниеОснования);
	КонецЕсли;
	
	НаборЗаписей.Записать();
	
	// Обновляем все объекты, связанные со старым ЭД.
	Если ОбновитьОснованияЭД И СтарыйЭлектронныйДокумент <> НоваяЗаписьНабора.ЭлектронныйДокумент Тогда
		ОснованияЭД = ОснованияЭлектронногоДокумента(СтарыйЭлектронныйДокумент);
		Для каждого Основание Из ОснованияЭД Цикл
			УстановитьНовуюВерсиюЭД(Основание, ЭлектронныйДокумент, Ложь, Ложь);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Только для внутреннего использования
Процедура ОбновитьСтатусыПодключенияНастроекЭДО(СоотвСоглашенийИСтруктурСертификатов) Экспорт
	
	ТаблицаПриглашений = ЭлектронныеДокументыВнутренний.ТаблицаДанныхУчастниковОбмена(СоотвСоглашенийИСтруктурСертификатов);
	ЭлектронныеДокументыСлужебный.СохранитьПриглашения(ТаблицаПриглашений);
	
КонецПроцедуры

// Только для внутреннего использования
Функция ЭтоПрямойОбмен(СпособОбменаЭД) Экспорт
	
	Результат = Ложь;
	Если СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезКаталог
		ИЛИ СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезЭлектроннуюПочту
		ИЛИ СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезFTP Тогда
		
		Результат = Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Только для внутреннего использования
Функция ОпределитьДействующуюНастройкуЭДО(СсылкаНаВладельца, ПараметрыЭД = Неопределено, ВидЭД = Неопределено) Экспорт
	
	Результат = Истина;
	
	ПараметрыЭД = ЭлектронныеДокументыСлужебный.ЗаполнитьПараметрыЭДПоИсточнику(СсылкаНаВладельца);
	Если Не ЗначениеЗаполнено(ПараметрыЭД.ВидЭД) Тогда
		
		Если ЗначениеЗаполнено(ВидЭД) Тогда
			
			ПараметрыЭД.ВидЭД = ВидЭД;
		Иначе
			МассивСсылок = Новый Массив;
			МассивСсылок.Добавить(СсылкаНаВладельца);
			
			СоответствиеВладельцевИЭД = ПолучитьСоответствиеВладельцевИЭД(МассивСсылок);
			Для Каждого ТекЭл Из МассивСсылок Цикл
				
				СсылкаНаЭД = СоответствиеВладельцевИЭД.Получить(ТекЭл);
				Если ЗначениеЗаполнено(СсылкаНаЭД) Тогда
					ПараметрыЭД.ВидЭД = ОбщегоНазначения.ПолучитьЗначениеРеквизита(СсылкаНаЭД, "ВидЭД");
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	ПараметрыОбмена = ЭлектронныеДокументыСлужебный.ОпределитьНастройкиОбменаЭД(ПараметрыЭД, Неопределено);
	
	Если Не ЗначениеЗаполнено(ПараметрыОбмена) Тогда
		Результат = Ложь;
		
		Если ЗначениеЗаполнено(ПараметрыЭД.Контрагент) И ЗначениеЗаполнено(ПараметрыЭД.Организация) Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст =
			"ВЫБРАТЬ
			|	НастройкиЭДО.Ссылка,
			|	НастройкиЭДО.СтатусПодключения,
			|	ВЫБОР
			|		КОГДА НастройкиЭДО.ИспользуетсяДляОтправки
			|			ТОГДА 0
			|		ИНАЧЕ 1
			|	КОНЕЦ КАК Приоритет
			|ИЗ
			|	Справочник.СоглашенияОбИспользованииЭД КАК НастройкиЭДО
			|ГДЕ
			|	НастройкиЭДО.Контрагент = &Контрагент
			|	И НастройкиЭДО.ДоговорКонтрагента = &ДоговорКонтрагента
			|	И НастройкиЭДО.Организация = &Организация
			|	И НЕ НастройкиЭДО.ПометкаУдаления
			|
			|УПОРЯДОЧИТЬ ПО
			|	Приоритет";
			Запрос.УстановитьПараметр("Контрагент",         ПараметрыЭД.Контрагент);
			Запрос.УстановитьПараметр("ДоговорКонтрагента", ПараметрыЭД.ДоговорКонтрагента);
			Запрос.УстановитьПараметр("Организация",        ПараметрыЭД.Организация);
			
			// Получаем настройки ЭДО безусловно
			УстановитьПривилегированныйРежим(Истина);
			
			Выборка = Запрос.Выполнить().Выбрать();
			Если Не Выборка.Следующий() Тогда
				Запрос = Новый Запрос;
				Запрос.Текст =
				"ВЫБРАТЬ
				|	НастройкиЭДО.Ссылка,
				|	НастройкиЭДО.СтатусПодключения,
				|	ВЫБОР
				|		КОГДА НастройкиЭДО.ИспользуетсяДляОтправки
				|			ТОГДА 0
				|		ИНАЧЕ 1
				|	КОНЕЦ КАК Приоритет
				|ИЗ
				|	Справочник.СоглашенияОбИспользованииЭД КАК НастройкиЭДО
				|ГДЕ
				|	НастройкиЭДО.Контрагент = &Контрагент
				|	И НастройкиЭДО.Организация = &Организация
				|	И НЕ НастройкиЭДО.ПометкаУдаления
				|
				|УПОРЯДОЧИТЬ ПО
				|	Приоритет";
				Запрос.УстановитьПараметр("Контрагент",         ПараметрыЭД.Контрагент);
				Запрос.УстановитьПараметр("Организация",        ПараметрыЭД.Организация);
				
				Выборка = Запрос.Выполнить().Выбрать();
				Выборка.Следующий();
			КонецЕсли;
			
			ПараметрыЭД.Вставить("НастройкаЭДО", Выборка.Ссылка);
			ПараметрыЭД.Вставить("СтатусПодключения", Выборка.СтатусПодключения);
		КонецЕсли;
	Иначе
		ПараметрыЭД.Вставить("НастройкаЭДО", ПараметрыОбмена.СоглашениеЭД);
		ПараметрыЭД.Вставить("СтатусПодключения", ПараметрыОбмена.СоглашениеЭД.СтатусПодключения);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Только для внутреннего использования
Функция МожноОткрытьВФормеДереваЭД(Знач СсылкаНаОбъект, ПроверятьДляСоглашения, ОткрытьФормуСоглашения, ПараметрыЭД) Экспорт
	
	ОткрытьВДереве = Ложь;
	Если ПроверятьДляСоглашения И Не ОпределитьДействующуюНастройкуЭДО(СсылкаНаОбъект, ПараметрыЭД) Тогда
		ОткрытьФормуСоглашения = Истина;
	Иначе
		ТипОбъекта = ТипЗнч(СсылкаНаОбъект);
		ОткрытьВДереве = Метаданные.Обработки.ЭлектронныеДокументы.Команды.ДеревоЭД.ТипПараметраКоманды.СодержитТип(ТипОбъекта);
	КонецЕсли;
	
	Возврат ОткрытьВДереве;
	
КонецФункции

// Формирует список действующих форматов электронных документов.
//
// Параметры:
//  ВидЭлектронногоДокумента - ПеречислениеСсылка.ВидыЭД - вид электронного документа.
// 
// Возвращаемое значение:
//  Массив - массив форматов, которые действуют в настоящее время по переданному виду электронного документа.
//           В качестве элемента массива выступает структура с ключами "Идентификатор" и "Представление".
//
Функция ДействующиеФорматы(ВидЭлектронногоДокумента) Экспорт

	Результат = Новый Массив;
	
	ТаблицаФорматов = ЭлектронныеДокументыСлужебный.ФорматыЭлектронныхДокументов();
	СтрокиДействующихФорматов = ТаблицаФорматов.НайтиСтроки(
		Новый Структура("ВидЭлектронногоДокумента, Действует", ВидЭлектронногоДокумента, Истина));
		
	Для Каждого СтрокаФормата Из СтрокиДействующихФорматов Цикл
		Результат.Добавить(Новый Структура("Идентификатор, Представление", СтрокаФормата.ИдентификаторФормата,
			СтрокаФормата.ПредставлениеФормата));
	КонецЦикла;
	
	Возврат Результат;

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Распаковка пакетов электронных документов

// Возвращает массив двоичных данных содержимого пакета электронных документов.
//
// Параметры:
//  ПакетЭД - ДокументСсылка.ПакетЭД - исследуемый пакет электронных документов.
//
Функция ВернутьМассивДвоичныхДанныхПакета(ПакетЭД) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
		
	Если НЕ ОпределитьВозможностьЧтенияДвоичныхДанныхПакетаЭД(ПакетЭД) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыПакетаЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПакетЭД, "НастройкаЭДО, СпособОбменаЭД, ВерсияФорматаПакета");
	Если Не ЭтоПрямойОбмен(ПараметрыПакетаЭД.СпособОбменаЭД)
		ИЛИ ПараметрыПакетаЭД.ВерсияФорматаПакета <> Перечисления.ВерсииФорматаПакетаЭД.Версия10 Тогда
		
		Возврат ЭлектронныеДокументыВнутренний.ВернутьМассивДвоичныхДанныхПакетаОператораЭДО(ПакетЭД);
	КонецЕсли;
	
	// Так как данный процесс потенциально порождает много ошибок и выполняется в цикле, возьмем его целиком в попытку-исключение,
	// чтобы при ошибке в одном контейнере, остальные могли корректно распаковаться
	
	ФайлАрхива = "";
	ФайлРасшифрованногоАрхива = "";
	
	Попытка
		// Проверим, что соглашение, указанное в пакете, до сих пор действует.
		Если Не ЗначениеЗаполнено(ПараметрыПакетаЭД.НастройкаЭДО)
			ИЛИ ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыПакетаЭД.НастройкаЭДО, "СтатусПодключения")
			<> Перечисления.СтатусыУчастниковОбменаЭД.Присоединен Тогда
			
			СообщениеИсключения = НСтр("ru = 'По данному пакету электронных документов нет действующей настройки ЭДО.
											|Распаковка невозможна.'");
			ВызватьИсключение(СообщениеИсключения);
			Возврат Неопределено;
		КонецЕсли;
		
		// Необходимо получить архив пакета из присоединенных файлов к документу
		СтруктураОтбора = Новый Структура("ВладелецФайла", ПакетЭД);
		ВыборкаПрисоединенныхФайлов = ЭлектронныеДокументыСлужебный.ПолучитьВыборкуЭДПоОтбору(СтруктураОтбора);
		Если НЕ ЗначениеЗаполнено(ВыборкаПрисоединенныхФайлов) ИЛИ НЕ ВыборкаПрисоединенныхФайлов.Следующий() Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		// Для каждого из пакетов необходимо определить файл с данными
		ПараметрыДанных = ЭлектронныеДокументыСлужебный.ПолучитьДанныеФайла(ВыборкаПрисоединенныхФайлов.Ссылка);
		ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(ПараметрыДанных.СсылкаНаДвоичныеДанныеФайла);
		ФайлАрхива = ЭлектронныеДокументыСлужебный.ТекущееИмяВременногоФайла("zip");
		ДвоичныеДанныеФайла.Записать(ФайлАрхива);
		
		ПапкаДляРаспаковки = ЭлектронныеДокументыСлужебный.РабочийКаталог("ext", ПакетЭД.Ссылка.УникальныйИдентификатор());
		
		Попытка
			ЗИПЧтение = Новый ЧтениеZipФайла(ФайлАрхива);
			ЗИПЧтение.ИзвлечьВсе(ПапкаДляРаспаковки);
		Исключение
			
			ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			Если ЗИПЧтение = Неопределено Тогда
				ТекстСообщения = НСтр("ru = 'Невозможно прочитать транспортный архив'");
			Иначе
				Если НЕ ЭлектронныеДокументыСлужебный.ВозможноИзвлечьФайлы(ЗИПЧтение, ПапкаДляРаспаковки) Тогда
					ТекстСообщения = ЭлектронныеДокументыПовтИсп.ПолучитьСообщениеОбОшибке("006");
				КонецЕсли;
				ЗИПЧтение.Закрыть();
			КонецЕсли;
			
			ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'Распаковка пакета ЭД'"), ТекстОшибки, ТекстСообщения);
			
			УдалитьФайлы(ФайлАрхива);
			УдалитьФайлы(ПапкаДляРаспаковки);
			Возврат Неопределено;
			
		КонецПопытки;
		
		Если ЭлектронныеДокументыСлужебныйВызовСервера.ЕстьОдинаковыеИменаФайловСНедопустимымиСимволамиВАрхиве(ЗИПЧтение, ПакетЭД) Тогда
			ЗИПЧтение.Закрыть();
			УдалитьФайлы(ФайлАрхива);
			УдалитьФайлы(ПапкаДляРаспаковки);
			Возврат Неопределено;
		КонецЕсли;
		
		ЗИПЧтение.Закрыть();
		УдалитьФайлы(ФайлАрхива);
		
		ФайлыАрхива = НайтиФайлы(ПапкаДляРаспаковки, "*");
		
		// Файл с данными также лежит в виде .zip-архива.
		// В одном пакете может лежать несколько файлов данных, соберем их в массив.
		
		МассивФайловДанных = НайтиФайлы(ПапкаДляРаспаковки, "*.zip");
		МассивФайловИзвещений = НайтиФайлы(ПапкаДляРаспаковки, "*ИзвещениеОПолученииДокумента*.xml");
		
		// Расшифровать файл с данными
		// Найдем файл с информацией о шифровании документа
		ФайлИнформации = Неопределено;
		Для Каждого Файл Из ФайлыАрхива Цикл
			Если Найти(Файл.Имя, "packageDescription") > 0 Тогда
				ФайлИнформации = Файл;
			ИначеЕсли Файл.Расширение <> ".p7s" И Файл.Расширение <> ".zip" Тогда
				МассивФайловДанных.Добавить(Файл);
			КонецЕсли;
		КонецЦикла;
		
		// Для последующих действий определим соглашение 
		
		ВыполнятьКриптооперацииНаСервере = ВыполнятьКриптооперацииНаСервере();
		Если ВыполнятьКриптооперацииНаСервере Тогда
			НастройкиКриптографии  = ЭлектроннаяЦифроваяПодпись.ПолучитьПерсональныеНастройкиРаботыСЭЦПСервер();
			ПровайдерЭЦП           = НастройкиКриптографии.ПровайдерЭЦП;
			ПутьМодуляКриптографии = НастройкиКриптографии.ПутьМодуляКриптографии;
			ТипПровайдераЭЦП       = НастройкиКриптографии.ТипПровайдераЭЦП;
			Попытка
				МенеджерКриптографии = Новый МенеджерКриптографии(ПровайдерЭЦП, ПутьМодуляКриптографии, ТипПровайдераЭЦП);
				МенеджерКриптографии.АлгоритмПодписи     = НастройкиКриптографии.АлгоритмПодписи;
				МенеджерКриптографии.АлгоритмХеширования = НастройкиКриптографии.АлгоритмХеширования;
				МенеджерКриптографии.АлгоритмШифрования  = НастройкиКриптографии.АлгоритмШифрования;
			Исключение
				// Менеджер криптографии генерирует ошибку при создании, если заданы неправильно настройки,
				// либо отсутствует ПО криптопровайдера.
				// В этом случае менеджерам присваиваем "Неопределено"
				МенеджерКриптографии = Неопределено;
			КонецПопытки;
		Иначе
			МенеджерКриптографии = Неопределено;
		КонецЕсли;
		
		СоответствиеФайлПараметры = ПолучитьСоответствиеФайлПараметры(ФайлИнформации);
		
		МассивКУдалениюИзСоответствия = Новый Массив;
		// Ключ соответствия: Путь к файлу данных.
		// Значение соответствия: структура.
		Для Каждого ЭлементСоответствия Из СоответствиеФайлПараметры Цикл
			Если ЭлементСоответствия.Значение.ДокументСодержитПодписи
				И ВыполнятьКриптооперацииНаСервере И МенеджерКриптографии = Неопределено Тогда
				
				МассивКУдалениюИзСоответствия.Добавить(ЭлементСоответствия.Ключ);
				ТекстСообщения = НСтр("ru = 'При распаковке пакета электронных документов %1 возникли ошибки
					|работы с криптосредствами (подробности см. в Журнале регистрации).'");
				ТекстОшибки = НСтр("ru = 'Пакет электронных документов %1 содержит электронные подписи,
					|в программе указана настройка ""Выполнять криптографические операции: На сервере"",
					|при работе с криптосредством на сервере возникли ошибки.
					|Проверьте корректность настроек программы и криптосредства на сервере.'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", ПакетЭД);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%1", ПакетЭД);
				ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'распаковка пакета ЭД'"), ТекстОшибки, ТекстСообщения);
				Продолжить;
			КонецЕсли;
			
			// получение исходного файла
			МассивФайловИсточник = НайтиФайлы(ПапкаДляРаспаковки, ЭлементСоответствия.Ключ, Истина);
			Если МассивФайловИсточник.Количество() > 0 Тогда
				ФайлДанных = МассивФайловИсточник[0];
				ДвоичныеДанныеДокумента = Новый ДвоичныеДанные(ФайлДанных);
			КонецЕсли;
			
			//   Структура данных подписи:
			//      ДвоичныеДанные            - ДвоичныеДанные - двоичные данные подписи.
			//      ИмяФайлаБезРасширения     - Строка - имя файла подписи без расширения.
			//      ИмяФайла                  - Строка - имя файла подписи с расширением.
			//      ДанныеСертификатаПолучены - Булево - Истина - данные сертификата получены.
			//      ДвоичныеДанныеСертификата - ДвоичныеДанные - двоичные данные сертификата.
			//      ДатаПодписи               - Дата - дата установки подписи.
			//      КомуВыданСертификат       - Строка - владелец сертификата.
			//      Отпечаток                 - СтрокаBase64 - отпечаток сертификата в Base64.
			МассивДанныхПодписей = Новый Массив;
			// Что бы на клиенте лишний раз не перебирать подписи, заполним признак
			// ДанныеСертификатовПолучены в СоответствиеФайлПараметры.
			ДанныеСертификатовПолучены = ЭлементСоответствия.Значение.ДокументСодержитПодписи;
			Для Каждого ПутьКПодписи Из ЭлементСоответствия.Значение.Подписи Цикл
				// получение данных подписей:
				МассивФайлов = НайтиФайлы(ПапкаДляРаспаковки, ПутьКПодписи, Истина);
				Для Каждого ФайлПодписи Из МассивФайлов Цикл
					ДанныеПодписи = ЭлектронныеДокументыВнутренний.СтруктураДанныхПодписи(ДвоичныеДанныеДокумента, ФайлПодписи, МенеджерКриптографии);
					МассивДанныхПодписей.Добавить(ДанныеПодписи);
					ДанныеСертификатовПолучены = (ДанныеСертификатовПолучены И ДанныеПодписи.ДанныеСертификатаПолучены);
				КонецЦикла;
			КонецЦикла;
			ЭлементСоответствия.Значение.Вставить("МассивДанныхПодписей", МассивДанныхПодписей);
			ЭлементСоответствия.Значение.Вставить("ДанныеСертификатовПолучены", ДанныеСертификатовПолучены);
		КонецЦикла;
		
		Для Каждого Элемент Из МассивКУдалениюИзСоответствия Цикл
			СоответствиеФайлПараметры.Удалить(Элемент);
		КонецЦикла;
		
		Если СоответствиеФайлПараметры.Количество() = 0 Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		СтруктураВозврата = Новый Структура;
		СтруктураВозврата.Вставить("СоответствиеФайлПараметры",        СоответствиеФайлПараметры);
		СтруктураВозврата.Вставить("СтруктураДвоичныхДанных",          ПреобразоватьМассивФайловВДвоичныеДанные(
			МассивФайловДанных));
		СтруктураВозврата.Вставить("СтруктураДвоичныхДанныхИзвещений", ПреобразоватьМассивФайловВДвоичныеДанные(
			МассивФайловИзвещений));
			
		МассивВсехФайлов = НайтиФайлы(ПапкаДляРаспаковки, "*.*", Истина);
		ДанныеФайлов = Новый Соответствие;
		Для Каждого Файл Из МассивВсехФайлов Цикл
			ДвоичныеДанныеФайла = Новый ДвоичныеДанные(Файл.ПолноеИмя);
			СсылкаНаДанныеФайла = ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайла, Новый УникальныйИдентификатор);
			ДанныеФайлов.Вставить(Файл.Имя, СсылкаНаДанныеФайла);
		КонецЦикла;
		УдалитьФайлы(ПапкаДляРаспаковки);
		СтруктураВозврата.Вставить("ФайлыПакета", ДанныеФайлов);
		Возврат СтруктураВозврата;
		
	Исключение
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке())
			+ НСтр("ru = ' (подробности см. в Журнале регистрации).'");
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'распаковка пакета ЭД'"), ТекстОшибки, ТекстСообщения);
		
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции

Процедура НайтиПроизвольныйЭДПотомокИУстановитьЕмуОснование(НомерЭД, ДокументОснование)
	
	НаборЗаписей = РегистрыСведений.ИдентификаторыДокументовОснованийВладельцевЭД.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ИдентификаторДокументаОснования.Установить(НомерЭД);
	НаборЗаписей.Прочитать();
	
	МассивЗаписейКУдалению = Новый Массив;
	
	Для Каждого ЗаписьРегистра Из НаборЗаписей Цикл
		
		ДокументПотомок = ЗаписьРегистра.ДокументПотомок;
		
		Если ТипЗнч(ДокументПотомок) = Тип("ДокументСсылка.ЭлектронныйДокументВходящий")
			И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументПотомок, "ВидЭД") = Перечисления.ВидыЭД.ПроизвольныйЭД
			И ЗначениеЗаполнено(ДокументПотомок) Тогда
			
			Попытка
				ДокументОбъект = ДокументПотомок.ПолучитьОбъект();
				НоваяСтрока = ДокументОбъект.ДокументыОснования.Добавить(); 
				НоваяСтрока.ДокументОснование = ДокументОснование;
				ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
				МассивЗаписейКУдалению.Добавить(ЗаписьРегистра);
			Исключение
				ЗаписьРегистра.ОснованиеПолучено = Истина;
				ЗаписьРегистра.ДокументОснование = ДокументОснование;
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого ЗаписьРегистра Из МассивЗаписейКУдалению Цикл
		НаборЗаписей.Удалить(ЗаписьРегистра);
	КонецЦикла;
	
	НаборЗаписей.Записать(Истина);
	
КонецПроцедуры

// Запись служебных данных по пакету ЭД и отражение ЭД в учете.
// Не рекомендуется вызывать в транзакции, так как, в случае падения переопределяемой части
// может возникнуть ошибка "В данной транзакции уже происходили ошибки".
//
// Параметры:
//  ПакетЭД - ДокументСсылка.ПакетЭД, пакет электронных документов, по которому необходимо добавить данные. 
//  СтруктураДанныхПодписей - Структура, связывающая двоичные данные файла данных и двоичные данные файла электронной цифровой подписи.
//  СтруктураДанных - Структура, связывающая имена файлов и их двоичные данные.
//  СоответствиеФайлПараметры - Соответствие, связывающее имена файлов данных и имена файлов электронных цифровых подписей.
//  ФайлыПакета - Соответствие - Содержит данные файлов пакета
//    * Ключ - Строка - Имя файла
//    * Значение - Строка - Ссылка на временное хранилище двоичных данных файла
//
Функция ДобавитьДанныеПоПакетуЭД(ПакетЭД,
								СтруктураДанных,
								СоответствиеФайлПараметры,
								ФайлыПакета,
								ФлагОшибки = Ложь,
								ЕстьКриптосредствоНаКлиенте = Неопределено,
								СоответствиеЭДИПодписей = Неопределено) Экспорт
								
	УстановитьПривилегированныйРежим(Истина);
	
	СтруктураСлужебныхДанных = СоответствиеФайлПараметры.Получить(СтруктураДанных.ИмяФайла);
	ЭтоПроизвольныйЭД = ?(СтруктураСлужебныхДанных.Свойство("ПроизвольныйЭД"),
		СтруктураСлужебныхДанных.ПроизвольныйЭД = Истина, Ложь);
		
	ТребуетсяИзвещение = Истина;
	ДополнительныеДанные = Новый Структура;
	Если СтруктураСлужебныхДанных.Свойство("ДопДанные", ДополнительныеДанные)
		И ТипЗнч(ДополнительныеДанные) = Тип("Структура") Тогда
		ДополнительныеПараметры = Неопределено;
		Если ДополнительныеДанные.Свойство("ДопПараметры", ДополнительныеПараметры) 
			И ТипЗнч(ДополнительныеПараметры) = Тип("Структура") Тогда
			
			Если ДополнительныеПараметры.Свойство("НеТребуетсяИзвещение") Тогда
				ТребуетсяИзвещение = Ложь;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
		
	ПараметрыПакетаЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПакетЭД, "ПрофильНастроекЭДО, СпособОбменаЭД, НастройкаЭДО,
		|Отправитель, Получатель, Организация, Контрагент, ВерсияФорматаПакета");
	
	ЕстьКриптосредствоНаСервере = Не ЭтоПрямойОбмен(ПараметрыПакетаЭД.СпособОбменаЭД)
									И ВыполнятьАвторизациюНаСервере();
									
									
	МассивДобавленныхФайлов = Новый Массив;
	// Попытаемся получить настройки криптографии.
	// Если неудачно, значит средства криптографии не установлены на АРМ
	Если ВыполнятьКриптооперацииНаСервере() ИЛИ ЕстьКриптосредствоНаСервере Тогда
		Попытка
			НастройкиКриптографии = ЭлектроннаяЦифроваяПодпись.ПолучитьПерсональныеНастройкиРаботыСЭЦПСервер();
			ПровайдерЭЦП = НастройкиКриптографии.ПровайдерЭЦП;
			ПутьМодуляКриптографии = НастройкиКриптографии.ПутьМодуляКриптографии;
			ТипПровайдераЭЦП = НастройкиКриптографии.ТипПровайдераЭЦП;
			
			МенеджерКриптографии = Новый МенеджерКриптографии(ПровайдерЭЦП, ПутьМодуляКриптографии, ТипПровайдераЭЦП);
			МенеджерКриптографии.АлгоритмПодписи     = НастройкиКриптографии.АлгоритмПодписи;
			МенеджерКриптографии.АлгоритмХеширования = НастройкиКриптографии.АлгоритмХеширования;
			МенеджерКриптографии.АлгоритмШифрования  = НастройкиКриптографии.АлгоритмШифрования;
		Исключение
			МенеджерКриптографии = Неопределено;
		КонецПопытки;
	Иначе
		МенеджерКриптографии = Неопределено;
	КонецЕсли;
	
	Если НЕ ЕстьКриптосредствоНаКлиенте = Истина И СтруктураСлужебныхДанных.ДокументСодержитПодписи
		И МенеджерКриптографии = Неопределено Тогда
		
		ТекстСообщения = НСтр("ru = 'Ошибка распаковки пакета:
		|%1
		|Пакет содержит электронные цифровые подписи. Для распаковки требуется наличие криптосредства на компьютере.'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ПакетЭД);

		Если НЕ ЕстьКриптосредствоНаКлиенте = Неопределено Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		ЭлектронныеДокументыСлужебный.ВыполнитьЗаписьСобытияПоЭДВЖурналРегистрации(ТекстСообщения, 2, УровеньЖурналаРегистрации.Информация);
		ФлагОшибки = Истина;
		Возврат Неопределено;
	КонецЕсли;
	
	СоздатьУчетныйДокумент = Ложь;
	
	СтруктураПодписей = СоответствиеФайлПараметры.Получить(СтруктураДанных.ИмяФайла);
	Попытка
		НачатьТранзакцию();
		ПакетЭДОбъект = ПакетЭД.ПолучитьОбъект();
		ПапкаДляРасшифровки = ЭлектронныеДокументыСлужебный.РабочийКаталог("dec", ПакетЭД.Ссылка.УникальныйИдентификатор());
		
		Если ПолучитьФайлДанныхДляОбработки(СтруктураДанных, ПапкаДляРасшифровки, ЭтоПроизвольныйЭД) Тогда
			
			КодРегламента = "";
			СтруктураСлужебныхДанных.Свойство("КодРегламента", КодРегламента);
			
			ОбъектВладелец = Неопределено;
			
			Если ЭтоПроизвольныйЭД <> Истина Тогда
				ФайлыРасшифровки = НайтиФайлы(ПапкаДляРасшифровки, "*.xml");
				Если ФайлыРасшифровки.Количество() > 0 Тогда
					ЭтоПроизвольныйЭД = Ложь;
					ФайлСДанными = ФайлыРасшифровки[0];
					
					ПараметрыЧтения = Новый Структура;
					ПараметрыЧтения.Вставить("ИмяФайла", ФайлСДанными.ПолноеИмя);
					ПараметрыЧтения.Вставить("Контрагент", ПараметрыПакетаЭД.Контрагент);
					ПараметрыЧтения.Вставить("ФлагОшибки", Ложь);
					
					ОписаниеОшибки = "";
					
					// чтение распакованного файла и создание объекта xdto
					ДанныеФайлаЭД = ЭлектронныеДокументыВнутренний.ДанныеФайлаЭД(ФайлСДанными.ПолноеИмя, ОписаниеОшибки);
					ФорматЭлектронногоДокумента = ЭлектронныеДокументыВнутренний.ФорматЭлектронногоДокументаПоОбъекту(ДанныеФайлаЭД);
					Если Не ПустаяСтрока(ОписаниеОшибки) Тогда
						Если КодРегламента = "Nonformalized" Тогда // неизвестный XML не удалось прочитать
							ЭтоПроизвольныйЭД = Истина;
						Иначе
							ВызватьИсключение ОписаниеОшибки;
						КонецЕсли;
					Иначе
						// чтение объекта xdto и формирование структуры с данными файла
						СтруктураФайлаЭД = Новый Структура;
						ЭлектронныеДокументыВнутренний.ПрочитатьШапкуФайлаCMLПоXDTO(ДанныеФайлаЭД, СтруктураФайлаЭД, ОписаниеОшибки);
						Если Не ПустаяСтрока(ОписаниеОшибки) Тогда
							Если Не СтруктураФайлаЭД.Свойство("ВидЭД") Тогда // неизвестный XML не удалось определить видЭД
								ЭтоПроизвольныйЭД = Истина;
							Иначе
								ВызватьИсключение ОписаниеОшибки;
							КонецЕсли;
						ИначеЕсли ДанныеФайлаЭД.Свойства().Получить("ИдФайл") <> Неопределено
							И КодРегламента = "Nonformalized" // Отправили формализованный XML через ПроизвольныйЭД
							И Не ФорматЭлектронногоДокумента.Имя = "АктОРасхождениях" Тогда // исключение для акта о расхождениях. 
							ЭтоПроизвольныйЭД = Истина;
						Иначе
							
							Если ЭлектронныеДокументыСлужебный.ЭтоОтветныйТитул(СтруктураФайлаЭД.ТипЭлементаВерсииЭД) Тогда
								
								ОбъектВладелец = ОпределитьОбъектПривязки(СтруктураФайлаЭД);
								
								Если ОбъектВладелец = Неопределено Тогда
									// Получен ответный титул ЭД ФНС. Если владелец не найден, значит либо его удалили из ИБ,
									// либо ЭД попал сюда случайно.
									ТекстОшибки = НСтр("ru = 'Для полученного ответного титула (%1) не найден исходящий ЭД.
									|Возможные причины:
									|- первичный титул был удален из текущей базы;
									|- полученный пакет не предназначен для текущей ИБ (первичный титул был сформирован в другой базе/копии текущей базы).'");
									ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки,
										СтруктураФайлаЭД.ТипЭлементаВерсииЭД);
									
									ВызватьИсключение ОписаниеОшибки;
								КонецЕсли;
							КонецЕсли;
							
							// Xsd-схема Счета-фактуры не позволяет передавать НомерЭД,
							// в этом случае возьмем НомерЭД из карточки транспортной информации.
							Если ЗначениеЗаполнено(КодРегламента) Тогда
								СтруктураФайлаЭД.НомерЭД = СтруктураСлужебныхДанных.НомерЭД;
							КонецЕсли;
							
							СтруктураФайлаЭД.Вставить("НаправлениеЭД", ОпределитьНаправление(СтруктураФайлаЭД));
							
							// Организацию и контрагента берем из пакета, т.к. для входящих и исходящих файлов они меняются местами
							СтруктураФайлаЭД.Вставить("Организация", ПараметрыПакетаЭД.Организация);
							СтруктураФайлаЭД.Вставить("Контрагент",  ПараметрыПакетаЭД.Контрагент);
						КонецЕсли;
					КонецЕсли;
					
				Иначе
					ЭтоПроизвольныйЭД = Истина;
				КонецЕсли;
			КонецЕсли;
			
			СтруктураПараметров = Новый Структура;
			
			ДопДанные = "";
			ДопПараметры = "";
			ДопИнформация = Неопределено;
			Если СтруктураСлужебныхДанных.Свойство("ДопДанные", ДопДанные) И ТипЗнч(ДопДанные) = Тип("Структура") И ДопДанные.Количество() > 0 Тогда
				ИмяФайлаДопДанных = "";
				Если ДопДанные.Свойство("ФайлДопДанных", ИмяФайлаДопДанных) Тогда
					СтруктураПараметров.Вставить("ФайлДопДанных", ФайлыПакета.Получить(ИмяФайлаДопДанных));
				КонецЕсли;
			КонецЕсли;
			
			// поиск существующего ЭД и присоединенного файла
			
			Если СтруктураСлужебныхДанных.КодТранзакции = "CustomerTitle"
				Или СтруктураСлужебныхДанных.КодТранзакции = "CustomerInformation" Тогда
				ИмяДокумента = "ЭлектронныйДокументИсходящий";
			Иначе
				ИмяДокумента = "ЭлектронныйДокументВходящий"
			КонецЕсли;
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
			|	ЭлектронныйДокументИсходящий.Ссылка
			|ИЗ
			|	Документ." + ИмяДокумента + " КАК ЭлектронныйДокументИсходящий
			|ГДЕ
			|	ЭлектронныйДокументИсходящий.УникальныйИД = &УникальныйИД";
			
			Запрос.УстановитьПараметр("УникальныйИД", СтруктураСлужебныхДанных.УникальныйИД);
			
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				
				ВладелецЭД = Выборка.Ссылка;
				
				СтруктураПараметровПоиска = Новый Структура;
				СтруктураПараметровПоиска.Вставить("НомерЭД",       СтруктураСлужебныхДанных.НомерЭД);
				СтруктураПараметровПоиска.Вставить("УникальныйИД",  СтруктураСлужебныхДанных.УникальныйИД);
				СтруктураПараметровПоиска.Вставить("НаправлениеЭД", Перечисления.НаправленияЭД.Входящий);
				СтруктураПараметровПоиска.Вставить("ВладелецФайла", ВладелецЭД);
				
				МассивТипов = Новый Массив;
				
				Если СтруктураСлужебныхДанных.КодТранзакции = "CustomerTitle"
					Или СтруктураСлужебныхДанных.КодТранзакции = "CustomerInformation" Тогда
					
					МассивТипов.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ИнформацияПокупателяУПД);
					МассивТипов.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ИнформацияПокупателяУКД);
					МассивТипов.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ТОРГ12Покупатель);
					МассивТипов.Добавить(Перечисления.ТипыЭлементовВерсииЭД.АктЗаказчик);
					МассивТипов.Добавить(Перечисления.ТипыЭлементовВерсииЭД.СоглашениеОбИзмененииСтоимостиПолучатель);
					
					СтруктураПараметровПоиска.Вставить("ТипЭлементаВерсииЭД", МассивТипов);
				Иначе
					
					МассивТипов.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ПервичныйЭД);
					МассивТипов.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ДОП);
					
					Если СтруктураСлужебныхДанных.КодРегламента = "Invoice" Тогда
						МассивТипов = Новый Массив;
						МассивТипов.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ЭСФ);
						МассивТипов.Добавить(Перечисления.ТипыЭлементовВерсииЭД.СЧФУПД);
						МассивТипов.Добавить(Перечисления.ТипыЭлементовВерсииЭД.СЧФДОПУПД);
						МассивТипов.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ДОПУПД);
						МассивТипов.Добавить(Перечисления.ТипыЭлементовВерсииЭД.КСЧФУКД);
						МассивТипов.Добавить(Перечисления.ТипыЭлементовВерсииЭД.КСЧФДИСУКД);
						МассивТипов.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ДИСУКД);
					КонецЕсли;
					
					СтруктураПараметровПоиска.Вставить("ТипЭлементаВерсииЭД", МассивТипов);
				КонецЕсли;
				
				ДобавленныйФайл = ЭлектронныеДокументыСлужебный.ОпределитьЭлектронныйДокумент(СтруктураПараметровПоиска);
			КонецЕсли;
			
			ЗаписатьНовыйЭД = НЕ ЗначениеЗаполнено(ДобавленныйФайл);
			СсылкаНовогоЭД  = Справочники.ЭДПрисоединенныеФайлы.ПолучитьСсылку();
			
			Если НЕ ЭтоПроизвольныйЭД Тогда
				
				ДвоичныеДанныеФайла = Новый ДвоичныеДанные(ФайлСДанными.ПолноеИмя);
				ФайлСДаннымиСсылка = ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайла, Новый УникальныйИдентификатор);
				СтруктураПараметров.Вставить("ФайлДанныхСсылка", ФайлСДаннымиСсылка);
				Если ОбъектВладелец = Неопределено Тогда
					ОбъектВладелец = ?(СтруктураФайлаЭД.ВидЭД = Перечисления.ВидыЭД.КаталогТоваров,
						ПараметрыПакетаЭД.НастройкаЭДО,
						ОпределитьОбъектПривязки(СтруктураФайлаЭД));
				КонецЕсли;
				
				Если ЭлектронныеДокументыПовтИсп.ИспользуетсяДополнительнаяАналитикаКонтрагентовСправочникПартнеры() Тогда
					Партнер = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыПакетаЭД.Контрагент, "Партнер");
					СтруктураФайлаЭД.Вставить("Партнер", Партнер);
				КонецЕсли;
				
				Если ОбъектВладелец <> Неопределено Тогда
					СтруктураПараметров.Вставить("ВладелецЭД", ОбъектВладелец);
				КонецЕсли;
				
				СтруктураЭД = ЭлектронныеДокументыВнутренний.ПолучитьДанныеИзФайла(СтруктураПараметров);
				СтруктураЭД.Вставить("ТипЭлементаВерсииЭД", СтруктураФайлаЭД.ТипЭлементаВерсииЭД);
				
				СодержитДанныеОМаркируемыхТоварах = СтруктураЭД.СодержитДанныеОМаркируемыхТоварах;
				
				// Xsd-схема счета-фактуры не позволяет передавать НомерЭД,
				// в этом случае возьмем НомерЭД из карточки транспортной информации.
				Если ЗначениеЗаполнено(КодРегламента) Тогда
					СтруктураЭД.Вставить("НомерЭД", СтруктураСлужебныхДанных.НомерЭД);
				КонецЕсли;
				
				НовыйДокумент = Неопределено;
				СтруктураЭД.Свойство("ВладелецЭД", НовыйДокумент);
				
			Иначе
				СтруктураФайлаЭД = Новый Структура;
				СтруктураФайлаЭД.Вставить("ВидЭД",                          Перечисления.ВидыЭД.ПроизвольныйЭД);
				СтруктураФайлаЭД.Вставить("НомерЭД",                        СтруктураПодписей.НомерЭД);
				СтруктураФайлаЭД.Вставить("Организация",                    ПараметрыПакетаЭД.Организация);
				СтруктураФайлаЭД.Вставить("Контрагент",                     ПараметрыПакетаЭД.Контрагент);
				СтруктураФайлаЭД.Вставить("НомерВерсииЭД",                  0);
				СтруктураФайлаЭД.Вставить("НомерДокументаОтправителя",      "");
				СтруктураФайлаЭД.Вставить("ДатаДокументаОтправителя",       "");
				СтруктураФайлаЭД.Вставить("ДатаФормированияЭДОтправителем", "");
				СтруктураФайлаЭД.Вставить("ТипЭлементаВерсииЭД",            Перечисления.ТипыЭлементовВерсииЭД.ПервичныйЭД);
				
				СтруктураЭД = Новый Структура;
				СтруктураЭД.Вставить("ВидЭД",                    Перечисления.ВидыЭД.ПроизвольныйЭД);
				СтруктураЭД.Вставить("НаправлениеЭД",            Перечисления.НаправленияЭД.Входящий);
				СтруктураЭД.Вставить("НомерЭД",                  СтруктураПодписей.НомерЭД);
				СтруктураЭД.Вставить("ДатаДокументаОтправителя", "");
				
				СодержитДанныеОМаркируемыхТоварах = Ложь;
			КонецЕсли;
			
			Если НЕ ФлагОшибки Тогда
				
				ОбъектВладелец = ?(ЗначениеЗаполнено(ОбъектВладелец), ОбъектВладелец, НовыйДокумент);
				
				НаборЗаписей = РегистрыСведений.ИдентификаторыДокументовОснованийВладельцевЭД.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.ИдентификаторДокументаОснования.Установить(СтруктураПодписей.НомерЭД);
				НаборЗаписей.Прочитать();
				
				МассивЗаписейКУдалению = Новый Массив;
				Для Каждого ЗаписьРегистра Из НаборЗаписей Цикл
					ДокументПотомок = ЗаписьРегистра.ДокументПотомок;
					Если ТипЗнч(ДокументПотомок) = Тип("ДокументСсылка.ЭлектронныйДокументВходящий")
						И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументПотомок, "ВидЭД") = Перечисления.ВидыЭД.ПроизвольныйЭД
						И ЗначениеЗаполнено(ДокументПотомок) Тогда
						Попытка
							ДокументОбъект = ДокументПотомок.ПолучитьОбъект();
							ДокументОбъект.ДокументОснование = ОбъектВладелец;
							ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
							МассивЗаписейКУдалению.Добавить(ЗаписьРегистра);
						Исключение
							ЗаписьРегистра.ОснованиеПолучено = Истина;
							ЗаписьРегистра.ДокументОснование = ОбъектВладелец;
						КонецПопытки;
					КонецЕсли;
				КонецЦикла;
				
				Для Каждого ЗаписьРегистра Из МассивЗаписейКУдалению Цикл
					НаборЗаписей.Удалить(ЗаписьРегистра);
				КонецЦикла;
				
				НаборЗаписей.Записать(Истина);
				
				АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(СтруктураДанных.ДвоичныеДанные);
				СтруктураФайлаЭД.Вставить("УникальныйИД", СтруктураСлужебныхДанных.УникальныйИД);
				
				СтруктураФайла = ЭлектронныеДокументыСлужебный.ПолучитьСтруктуруФайла(СтруктураДанных.ИмяФайла);
				
				// Определяем версию регламента 1С по коду регламента.
				ВерсияРегламентаЭДО = Перечисления.ВерсииРегламентаОбмена1С.Версия10;
				Если КодРегламента = "Formalized" ИЛИ КодРегламента = "Invoice" Тогда
					ВерсияРегламентаЭДО = Перечисления.ВерсииРегламентаОбмена1С.Версия20;
				КонецЕсли;
				
				Ответственный = ЭлектронныеДокументыПереопределяемый.ПолучитьОтветственногоПоЭД(ПараметрыПакетаЭД.Контрагент,
					ПараметрыПакетаЭД.НастройкаЭДО);
					
				/////////////////////////////////////
				// создание владельца ЭД (ЭлектронныйДокументВходящий)
				Если ВладелецЭД = Неопределено Тогда
					
					СтруктураВладельцаЭД = Новый Структура;
					СтруктураВладельцаЭД.Вставить("Входящий",               Истина);
					СтруктураВладельцаЭД.Вставить("Организация",            ПараметрыПакетаЭД.Организация);
					СтруктураВладельцаЭД.Вставить("Контрагент",             ПараметрыПакетаЭД.Контрагент);		
					СтруктураВладельцаЭД.Вставить("ВерсияФорматаПакета",    ПараметрыПакетаЭД.ВерсияФорматаПакета);
					СтруктураВладельцаЭД.Вставить("Ответственный",          Ответственный);
					СтруктураВладельцаЭД.Вставить("ПрофильНастроекЭДО",     ПараметрыПакетаЭД.ПрофильНастроекЭДО);
					СтруктураВладельцаЭД.Вставить("НастройкаЭДО",           ПараметрыПакетаЭД.НастройкаЭДО);
					СтруктураВладельцаЭД.Вставить("УникальныйИД",           СтруктураФайлаЭД.УникальныйИД);
					СтруктураВладельцаЭД.Вставить("ВерсияРегламентаЭДО",    ВерсияРегламентаЭДО);
					СтруктураВладельцаЭД.Вставить("ТребуетсяИзвещение",     ТребуетсяИзвещение);
					СтруктураВладельцаЭД.Вставить("ТипЭлементаВерсииЭД",    
						?(ЭтоПроизвольныйЭД, Перечисления.ТипыЭлементовВерсииЭД.ПервичныйЭД, СтруктураФайлаЭД.ТипЭлементаВерсииЭД));
					СтруктураВладельцаЭД.Вставить("ТребуетсяПодтверждение", СтруктураСлужебныхДанных.ТребуетсяПодтверждение);
					СтруктураВладельцаЭД.Вставить("СодержитДанныеОМаркируемыхТоварах", СодержитДанныеОМаркируемыхТоварах);
					
					Если СтруктураФайлаЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.СЧФУПД
						Или СтруктураФайлаЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ЭСФ Тогда
						СтруктураВладельцаЭД.ТребуетсяПодтверждение = Ложь
					КонецЕсли;
					
					Если НЕ ЭтоПроизвольныйЭД Тогда
						
						СтруктураВладельцаЭД.Вставить("ВидЭД",                          СтруктураЭД.ВидЭД);
						СтруктураВладельцаЭД.Вставить("НомерВерсииЭД",                  СтруктураЭД.НомерВерсииЭД);
						СтруктураВладельцаЭД.Вставить("НомерДокументаОтправителя",      СтруктураЭД.НомерДокументаОтправителя);
						СтруктураВладельцаЭД.Вставить("НомерДокумента", СтруктураЭД.НомерДокумента);
						СтруктураВладельцаЭД.Вставить("СуммаДокумента",                 СтруктураЭД.СуммаДокумента); 
						СтруктураВладельцаЭД.Вставить("ДатаДокументаОтправителя",       СтруктураЭД.ДатаДокументаОтправителя);
						
						Если СтруктураЭД.Свойство("НаименованиеДокументаОтправителя") Тогда
							СтруктураВладельцаЭД.Вставить("НаименованиеДокументаОтправителя", СтруктураЭД.НаименованиеДокументаОтправителя);
						КонецЕсли;
					Иначе
						
						СтруктураВладельцаЭД.Вставить("ВидЭД",                            Перечисления.ВидыЭД.ПроизвольныйЭД);
						СтруктураВладельцаЭД.Вставить("НомерВерсииЭД",                    0);
						СтруктураВладельцаЭД.Вставить("НомерДокументаОтправителя",        "");
						СтруктураВладельцаЭД.Вставить("ДатаДокументаОтправителя",         "");
						СтруктураВладельцаЭД.Вставить("НаименованиеДокументаОтправителя", Строка(СтруктураСлужебныхДанных.ТипДокумента));
						СтруктураВладельцаЭД.Вставить("ТипДокумента",                     СтруктураСлужебныхДанных.ТипДокумента);
						СтруктураВладельцаЭД.Вставить("Прочитан",                         Ложь);
						
						Если ТипЗнч(ДопДанные) = Тип("Структура")
							И ДопДанные.Свойство("ДопПараметры")
							И ТипЗнч(ДопДанные.ДопПараметры) = Тип("Структура")
							И ДопДанные.ДопПараметры.Свойство("Номер")
							И ЗначениеЗаполнено(ДопДанные.ДопПараметры.Номер) Тогда
							СтруктураВладельцаЭД.НомерДокументаОтправителя = ДопДанные.ДопПараметры.Номер;
						КонецЕсли;
						
						// ПоискДокументовОснований
						
						УникальныйИДОснования = Неопределено;
						ДокументОснование = Неопределено;
						Если ЗначениеЗаполнено(СтруктураСлужебныхДанных.МассивИдентификаторовДокументовОснований)
							И СтруктураСлужебныхДанных.МассивИдентификаторовДокументовОснований.Количество() > 0 Тогда
							
							// Актуальный алгоритм поиска документов-оснований на стороне получателя.
							СтруктураПараметровПоиска = Новый Структура;
							СтруктураПараметровПоиска.Вставить("Организация",   ПараметрыПакетаЭД.Организация);
							СтруктураПараметровПоиска.Вставить("Контрагент",    ПараметрыПакетаЭД.Контрагент);
							СтруктураПараметровПоиска.Вставить("НаправлениеЭД", Перечисления.НаправленияЭД.Входящий);
							
							ТЗПолученныхОснований = ЭлектронныеДокументыВнутренний.ТаблицаЗначенийДокументовОснованийПоИдентификаторам(
							СтруктураСлужебныхДанных.МассивИдентификаторовДокументовОснований, СтруктураПараметровПоиска);
							
							Для Каждого Идентификатор Из СтруктураСлужебныхДанных.МассивИдентификаторовДокументовОснований Цикл
								СтрокаОснования = ТЗПолученныхОснований.Найти(Идентификатор, "УникальныйИД");
								Если СтрокаОснования <> Неопределено Тогда
									ДокументОснование = СтрокаОснования.Ссылка;
								КонецЕсли;
							КонецЦикла;
							
						ИначеЕсли СтруктураСлужебныхДанных.ТипДокумента = Перечисления.ТипыЭД.СоглашениеОбЭДО Тогда
							// Получено соглашение об обмене ЭД
							ДокументОснование = ПараметрыПакетаЭД.НастройкаЭДО;
						КонецЕсли;
						
						Если ЗначениеЗаполнено(ДокументОснование) Тогда
							ДокументыОснования = Новый Массив;
							ДокументыОснования.Добавить(ДокументОснование);
							СтруктураВладельцаЭД.Вставить("ДокументыОснования", ДокументыОснования);
						КонецЕсли;
						
					КонецЕсли;
					
					ТаблицаИдентификаторовОснований = Новый ТаблицаЗначений;
					ТаблицаИдентификаторовОснований.Колонки.Добавить("ИдентификаторДокументаОснования");
					ТаблицаИдентификаторовОснований.Колонки.Добавить("ИдентификаторЭДДокументаОснования");
					Для Каждого Идентификатор Из СтруктураСлужебныхДанных.МассивИдентификаторовДокументовОснований Цикл
						НоваяСтрока = ТаблицаИдентификаторовОснований.Добавить();
						НоваяСтрока.ИдентификаторДокументаОснования = Идентификатор;
					КонецЦикла;
					
					СтруктураВладельцаЭД.Вставить("ИдентификаторыДокументовИЭДОснований", ТаблицаИдентификаторовОснований);
					
					ВладелецЭД = ЭлектронныеДокументыСлужебный.СоздатьЭлектронныйДокумент(СтруктураВладельцаЭД);
					
				КонецЕсли;
				
				/////////////////////////////////////
				// создание ЭД (присоединенного файла)
				Если ЗаписатьНовыйЭД Тогда
					
					ДобавленныйФайл = ПрисоединенныеФайлы.ДобавитьФайл(
						ВладелецЭД,
						СтруктураФайла.ИмяБезРасширения,
						ОбщегоНазначенияКлиентСервер.РасширениеБезТочки(СтруктураФайла.Расширение),
						ТекущаяДатаСеанса(),
						ТекущаяДатаСеанса(),
						АдресВоВременномХранилище,
						Неопределено,
						,
						СсылкаНовогоЭД);
					
					Ответственный = ЭлектронныеДокументыПереопределяемый.ПолучитьОтветственногоПоЭД(ПараметрыПакетаЭД.Контрагент,
						ПараметрыПакетаЭД.НастройкаЭДО);
						
					Если Не ЗначениеЗаполнено(Ответственный) Тогда 
						Ответственный = Пользователи.АвторизованныйПользователь();
					КонецЕсли;
					
					ЭДВладелец = "";
					Если ЗначениеЗаполнено(ДобавленныйФайл) Тогда
						
						ТипЭлементаВерсииЭД = Неопределено;
						Если Не СтруктураФайлаЭД.Свойство("ТипЭлементаВерсииЭД", ТипЭлементаВерсииЭД)
							ИЛИ Не ЗначениеЗаполнено(ТипЭлементаВерсииЭД) Тогда
							
							Если СтруктураФайлаЭД.ВидЭД = Перечисления.ВидыЭД.СчетФактура
								ИЛИ СтруктураФайлаЭД.ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура Тогда
								ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ЭСФ;
							Иначе
								ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПервичныйЭД;
							КонецЕсли;
						КонецЕсли;
						
						СтруктураЭД.Вставить("Отправитель",                     ПараметрыПакетаЭД.Отправитель);
						СтруктураЭД.Вставить("Получатель",                      ПараметрыПакетаЭД.Получатель);
						СтруктураЭД.Вставить("Ответственный",                   Ответственный);
						СтруктураЭД.Вставить("ПрофильНастроекЭДО",              ПараметрыПакетаЭД.ПрофильНастроекЭДО);
						СтруктураЭД.Вставить("СоглашениеЭД",                    ПараметрыПакетаЭД.НастройкаЭДО);
						СтруктураЭД.Вставить("УникальныйИД",                    СтруктураФайлаЭД.УникальныйИД);
						СтруктураЭД.Вставить("ТипЭлементаВерсииЭД",             ТипЭлементаВерсииЭД);
						СтруктураЭД.Вставить("ВерсияРегламентаЭДО",             ВерсияРегламентаЭДО);
						СтруктураЭД.Вставить("ДатаФормированияЭДОтправителем",  СтруктураФайлаЭД.ДатаФормированияЭДОтправителем);
						СтруктураЭД.Вставить("НаименованиеФайла",               СтруктураФайла.ИмяБезРасширения);
						СтруктураЭД.Вставить("ВерсияФорматаПакета",             ПараметрыПакетаЭД.ВерсияФорматаПакета);
						СтруктураЭД.Вставить("ДополнительнаяИнформация",        ?(ДополнительныеДанные.Свойство("КомментарийЭД"), ДополнительныеДанные.КомментарийЭД, ""));
						
						СтруктураЭД.Вставить("ТребуетсяПодтверждение",          СтруктураСлужебныхДанных.ТребуетсяПодтверждение);
						СтруктураЭД.Вставить("ТребуетсяИзвещение",              ТребуетсяИзвещение);
						
						Если СтруктураЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.СЧФУПД
							Или СтруктураЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ЭСФ Тогда
							СтруктураЭД.ТребуетсяПодтверждение = Ложь
						КонецЕсли; 
						
						Если СтруктураФайлаЭД.Свойство("ЭлектронныйДокументВладелец", ЭДВладелец) Тогда
							СтруктураЭД.Вставить("ЭлектронныйДокументВладелец", ЭДВладелец);
							СтруктураЭД.Вставить("НомерДокументаОтправителя", ЭДВладелец.НомерДокументаОтправителя);
							СтруктураЭД.Вставить("ДатаДокументаОтправителя", ЭДВладелец.ДатаДокументаОтправителя);
						КонецЕсли;
						
						Организация = Неопределено;
						Если НЕ (СтруктураЭД.Свойство("Организация", Организация) И ЗначениеЗаполнено(Организация)) Тогда
							СтруктураЭД.Вставить("Организация", ПараметрыПакетаЭД.Организация);
						КонецЕсли;
						
						Контрагент = Неопределено;
						Если НЕ (СтруктураЭД.Свойство("Контрагент", Контрагент) И ЗначениеЗаполнено(Контрагент)) Тогда
							СтруктураЭД.Вставить("Контрагент", ПараметрыПакетаЭД.Контрагент);
						КонецЕсли;
						
						СтатусЭД = Неопределено;
						Если НЕ (СтруктураЭД.Свойство("СтатусЭД", СтатусЭД) И ЗначениеЗаполнено(СтатусЭД)) Тогда
							СтруктураЭД.Вставить("СтатусЭД", Перечисления.СтатусыЭД.Получен);
						КонецЕсли;
						
						ТаблицаИдентификаторовОснований = Новый ТаблицаЗначений;
						ТаблицаИдентификаторовОснований.Колонки.Добавить("ИдентификаторДокументаОснования");
						ТаблицаИдентификаторовОснований.Колонки.Добавить("ИдентификаторЭДДокументаОснования");
						Для Каждого Идентификатор Из СтруктураПодписей.МассивИдентификаторовДокументовОснований Цикл
							НоваяСтрока = ТаблицаИдентификаторовОснований.Добавить();
							НоваяСтрока.ИдентификаторДокументаОснования = Идентификатор;
						КонецЦикла;
						СтруктураЭД.Вставить("ИдентификаторыДокументовИЭДОснований", ТаблицаИдентификаторовОснований);
						
						Если НЕ СтруктураЭД.Свойство("ВладелецЭД") Или Не ЗначениеЗаполнено(СтруктураЭД.ВладелецЭД) Тогда
							СтруктураЭД.Вставить("ВладелецЭД", ВладелецЭД);
						КонецЕсли;
						
						ЭлектронныеДокументыСлужебный.ИзменитьПоСсылкеПрисоединенныйФайл(ДобавленныйФайл, СтруктураЭД);
						
						// новая версия ЭД
						Если Не ЭлектронныеДокументыСлужебный.ЭтоОтветныйТитул(ДобавленныйФайл) И ЗначениеЗаполнено(НовыйДокумент) Тогда
							Если ТипЗнч(НовыйДокумент) = Тип("Массив") Тогда
								Для Каждого НовыйЭлемент Из НовыйДокумент Цикл
									УстановитьНовуюВерсиюЭД(НовыйЭлемент);
								КонецЦикла;
							Иначе
								УстановитьНовуюВерсиюЭД(НовыйДокумент);
							КонецЕсли;
						КонецЕсли;
						
						// Только для УПД и УКД.
						Если СтруктураЭД.Свойство("ДополнительныеРеквизиты") Тогда
							ПервичныйДокументУПДУКД = "";
							Если СтруктураЭД.ДополнительныеРеквизиты.Свойство("ПервичныйДокумент", ПервичныйДокументУПДУКД)
								И ЗначениеЗаполнено(ПервичныйДокументУПДУКД) Тогда
								
								УстановитьНовуюВерсиюЭД(ПервичныйДокументУПДУКД, ВладелецЭД, Истина);
							КонецЕсли;
						КонецЕсли;
						
						// файл с допданными
						ФайлДопДанныхСсылка = "";
						Если СтруктураПараметров.Свойство("ФайлДопДанных", ФайлДопДанныхСсылка)
							И ЗначениеЗаполнено(ФайлДопДанныхСсылка) Тогда
							
							СтруктураФайла = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ИмяФайлаДопДанных);
							
							ДобавленныйДопФайл = ПрисоединенныеФайлы.ДобавитьФайл(
								ВладелецЭД,
								СтруктураФайла.ИмяБезРасширения,
								ОбщегоНазначенияКлиентСервер.РасширениеБезТочки(СтруктураФайла.Расширение),
								ТекущаяДатаСеанса(),
								ТекущаяДатаСеанса(),
								ФайлДопДанныхСсылка,
								Неопределено,
								,
								Справочники.ЭДПрисоединенныеФайлы.ПолучитьСсылку());
							
							Если ЗначениеЗаполнено(ДобавленныйДопФайл) Тогда
								ВспомогательнаяСтруктура = Новый Структура;
								ВспомогательнаяСтруктура.Вставить("ВидЭД",                          Перечисления.ВидыЭД.ДопДанные);
								ВспомогательнаяСтруктура.Вставить("Контрагент",                     ПараметрыПакетаЭД.Контрагент);
								ВспомогательнаяСтруктура.Вставить("Организация",                    ПараметрыПакетаЭД.Организация);
								ВспомогательнаяСтруктура.Вставить("ВладелецЭД",                     ВладелецЭД);
								ВспомогательнаяСтруктура.Вставить("ПрофильНастроекЭДО",             ПараметрыПакетаЭД.ПрофильНастроекЭДО);
								ВспомогательнаяСтруктура.Вставить("СоглашениеЭД",                   ПараметрыПакетаЭД.НастройкаЭДО);
								ВспомогательнаяСтруктура.Вставить("НомерЭД",                        СтруктураЭД.НомерЭД);
								ВспомогательнаяСтруктура.Вставить("УникальныйИД",                   СтруктураФайлаЭД.УникальныйИД);
								ВспомогательнаяСтруктура.Вставить("НаправлениеЭД",                  Перечисления.НаправленияЭД.Входящий);
								ВспомогательнаяСтруктура.Вставить("ТипЭлементаВерсииЭД",            Перечисления.ТипыЭлементовВерсииЭД.ДополнительныйЭД);
								ВспомогательнаяСтруктура.Вставить("ЭлектронныйДокументВладелец",    ДобавленныйФайл);
								ВспомогательнаяСтруктура.Вставить("ДатаФормированияЭДОтправителем", СтруктураЭД.ДатаДокументаОтправителя);
								ВспомогательнаяСтруктура.Вставить("НаименованиеФайла",              СтруктураФайла.ИмяБезРасширения);
								ВспомогательнаяСтруктура.Вставить("СтатусЭД",                       Перечисления.СтатусыЭД.Получен);
								
								ЭлектронныеДокументыСлужебный.ИзменитьПоСсылкеПрисоединенныйФайл(ДобавленныйДопФайл, ВспомогательнаяСтруктура);
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
					
					Если ЗначениеЗаполнено(ЭДВладелец)
						И (ДобавленныйФайл.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель
						ИЛИ ДобавленныйФайл.ВидЭД = Перечисления.ВидыЭД.АктЗаказчик
						ИЛИ ДобавленныйФайл.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель
						ИЛИ ДобавленныйФайл.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИнформацияПокупателяУПД
						ИЛИ ДобавленныйФайл.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИнформацияПокупателяУКД)
						И ЭДВладелец.СтатусЭД <> Перечисления.СтатусыЭД.ПолученоПодтверждение Тогда
						
						СтруктураПараметровЭДВладельца = Новый Структура;
						
						ДопустимыйСтатусЭД = ЭлектронныеДокументыСлужебный.ПолучитьДопустимыйСтатусЭД(
							Перечисления.СтатусыЭД.ПолученоПодтверждение, ЭДВладелец);
						СтруктураПараметровЭДВладельца.Вставить("СтатусЭД", ДопустимыйСтатусЭД);
						ЭлектронныеДокументыСлужебный.ИзменитьПоСсылкеПрисоединенныйФайл(ЭДВладелец, СтруктураПараметровЭДВладельца, Ложь);
						
					КонецЕсли;
					
					// Добавим информацию о подписях
					Если ЗначениеЗаполнено(СтруктураСлужебныхДанных.ДокументСодержитПодписи) Тогда
						Для Каждого ДанныеПодписи Из СтруктураСлужебныхДанных.МассивДанныхПодписей Цикл
							ЭлектроннаяЦифроваяПодпись.ЗанестиИнформациюОПодписи(
								ДобавленныйФайл,
								ДанныеПодписи.ДвоичныеДанные,
								ДанныеПодписи.Отпечаток,
								ДанныеПодписи.ДатаПодписи,
								"",
								ДанныеПодписи.ИмяФайла,
								ДанныеПодписи.КомуВыданСертификат,
								ДанныеПодписи.ДвоичныеДанныеСертификата);
						КонецЦикла;
						Если ВыполнятьКриптооперацииНаСервере() ИЛИ ЕстьКриптосредствоНаСервере Тогда
							ОпределитьСтатусыПодписей(ДобавленныйФайл);
						КонецЕсли;
					КонецЕсли;
					
				КонецЕсли;
				
				МассивДобавленныхФайлов.Добавить(ДобавленныйФайл);
				
				Если Не ЭлектронныеДокументыСлужебный.ЭтоОтветныйТитул(ДобавленныйФайл) Тогда
					
					ДокументыУчета = Неопределено;
					
					Если НЕ ЭтоПроизвольныйЭД Тогда
						АктуальныеВидыЭД = ЭлектронныеДокументыПовтИсп.ПолучитьАктуальныеВидыЭД();
						Если АктуальныеВидыЭД.Найти(СтруктураЭД.ВидЭД) <> Неопределено Тогда
							// Нужно создать учетный документ.
							СоздатьУчетныйДокумент = Истина;
						КонецЕсли;
					КонецЕсли;
					
					// ПоискДокументовПотомков
					Если ЭтоПроизвольныйЭД Тогда
						ДокументОснование = ВладелецЭД;
					КонецЕсли;
					
					Если ЗначениеЗаполнено(ДокументОснование) Тогда
						НайтиПроизвольныйЭДПотомокИУстановитьЕмуОснование(СтруктураСлужебныхДанных.НомерЭД, ДокументОснование);
					КонецЕсли;
					
				КонецЕсли;
				
				// Добавим информацию об Электронном документе и его присоединенном файле в ПакетЭД
				Если ПакетЭДОбъект.ЭлектронныеДокументы.Количество() Тогда
					ПакетЭДОбъект.ЭлектронныеДокументы.Очистить()
				КонецЕсли;
				Для Каждого ДобавленныйФайл Из МассивДобавленныхФайлов Цикл
					НовыйЭлектронныйДокумент = ПакетЭДОбъект.ЭлектронныеДокументы.Добавить();
					НовыйЭлектронныйДокумент.ЭлектронныйДокумент = ДобавленныйФайл;
					НовыйЭлектронныйДокумент.ОбъектВладелец      = ДобавленныйФайл.ВладелецФайла;
				КонецЦикла;
				
				// обработка подтверждения
				Если МенеджерКриптографии <> Неопределено Тогда
					ПодтвержденныеДокументы = ЭлектронныеДокументыСлужебный.ОбработатьПодтвержденияДокументов(
						ФайлыПакета,
						СоответствиеФайлПараметры,
						ПакетЭДОбъект);
				КонецЕсли;
				
				ПакетЭДОбъект.Записать();
				
			Иначе
				ФлагОшибки = Истина;
			КонецЕсли;
		
		Если ФлагОшибки Тогда
			ОтменитьТранзакцию();
			МассивДобавленныхФайлов = Неопределено;
		Иначе
			ЗафиксироватьТранзакцию();
		КонецЕсли;
		
	КонецЕсли;
		
	Исключение
		ОтменитьТранзакцию();
		ТекстСообщения = НСтр("ru = 'При распаковке пакетаЭД: ""%1"" возникла ошибка:
			|%2 (подробности см. в Журнале регистрации).'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения,
			ПакетЭД, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'распаковка пакета ЭД'"),
										  ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
										  ТекстСообщения);
		ФлагОшибки = Истина;
		МассивДобавленныхФайлов = Неопределено;
	КонецПопытки;
	
	УдалитьФайлы(ПапкаДляРасшифровки);
	
	// Создание учетных документов.
	Если СоздатьУчетныйДокумент И Не ФлагОшибки Тогда
		
		НачатьТранзакцию();
		Попытка
			
			ДокументыУчета = Неопределено;
			
			СпособОбработки = ЭлектронныеДокументыСлужебный.СпособОбработкиВходящегоДокумента(
				ПараметрыПакетаЭД.НастройкаЭДО, СтруктураЭД.ВидЭД, СтруктураЭД.ТипЭлементаВерсииЭД);
			
			// Если документ обрабатывается не вручную, нужно проверить актуальность формата.
			ИдентификаторФормата = Неопределено;
			Если НЕ ВРег(СпособОбработки) = ВРег("Вручную") 
				И СтруктураЭД.Свойство("ИдентификаторФормата", ИдентификаторФормата) Тогда
				СведенияОФормате = ЭлектронныеДокументыСлужебный.СведенияОФормате(СтруктураЭД.ВидЭД, ИдентификаторФормата);
				
				Если ЗначениеЗаполнено(СведенияОФормате.ДатаОкончанияДействия) 
					И КонецДня(СведенияОФормате.ДатаОкончанияДействия) < СтруктураЭД.ДатаФормированияЭДОтправителем Тогда
					// Формат стал неактуальным прежде, чем был сформирован документ - автоматически документ не создаем.
					СпособОбработки = "Вручную";
				КонецЕсли;
			КонецЕсли;
			
			Если НЕ ((ТипЗнч(СпособОбработки) = Тип("Структура") И ВРег(СпособОбработки.СчетФактура) = ВРег("Вручную"))
				ИЛИ ВРег(СпособОбработки) = ВРег("Вручную")) Тогда
				
				Если СтруктураЭД.ВидЭД = Перечисления.ВидыЭД.КаталогТоваров Тогда
					ВладелецКаталога = Новый Массив;
					ВладелецКаталога.Добавить(ПараметрыПакетаЭД.НастройкаЭДО);
					СтруктураПараметров.Вставить("ДокументыУчета", ВладелецКаталога);
					СтруктураПараметров.Вставить("ЗаполнитьДокумент");
				Иначе
					СтруктураПараметров.Удалить("ВладелецЭД");
					ДокументыУчета = ОпределитьОбъектПривязки(СтруктураЭД);
				КонецЕсли;
				
				Если Не ЗначениеЗаполнено(ДокументыУчета) Тогда
					ДокументыУчета = ЭлектронныеДокументыВнутренний.СохранитьДанныеОбъекта(СтруктураПараметров, СпособОбработки);
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ДокументыУчета) Тогда
					Для каждого ДокументУчета Из ДокументыУчета Цикл
						
						ДокументОбъект = ВладелецЭД.ПолучитьОбъект();
						НоваяСтрока = ДокументОбъект.ДокументыОснования.Добавить();
						НоваяСтрока.ДокументОснование = ДокументУчета;
						
						Если ТипЗнч(СпособОбработки) = Тип("Структура") Тогда
							
							Если ЭлектронныеДокументыВнутренний.ДокументЯвляетсяСчетомФактурой(ДокументУчета) Тогда
								НоваяСтрока.СпособОбработки = СпособОбработки.СчетФактура;
							Иначе
								НоваяСтрока.СпособОбработки = СпособОбработки.ПервичныйДокумент;
							КонецЕсли;
							
						Иначе
							НоваяСтрока.СпособОбработки  = СпособОбработки;
						КонецЕсли;
						
						ДокументОбъект.Записать();
						ЭлектронныеДокументыСлужебный.УстановитьСсылкуДляВладельцаВРегистреСостояний(ДокументУчета, ВладелецЭД);
					КонецЦикла;
				КонецЕсли;
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ДокументыУчета) Тогда
				НайтиПроизвольныйЭДПотомокИУстановитьЕмуОснование(СтруктураСлужебныхДанных.НомерЭД, ДокументыУчета[0]);
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
		Исключение
			
			ОтменитьТранзакцию();
			ТекстСообщения = НСтр("ru = 'При отражении в учете: ""%1"" возникла ошибка:
				|%2 (подробности см. в Журнале регистрации).'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения,
				ВладелецЭД, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'распаковка пакета ЭД'"),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
				ТекстСообщения);
		КонецПопытки;
		
	КонецЕсли;
	
	Возврат МассивДобавленныхФайлов;
	
КонецФункции

// Устанавливает статус документа ПакетЭД.
//
// Параметры:
//  Пакет - Ссылка на документ ПакетЭД
//  СтатусПакета - ссылка на перечисление СтатусыПакетовЭД
//
Процедура УстановитьСтатусПакета(Пакет, СтатусПакета) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ПакетЭДОбъект = Пакет.ПолучитьОбъект();
	ПакетЭДОбъект.СтатусПакета = СтатусПакета;
	ПакетЭДОбъект.Записать();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обмен через веб ресурс банка

// Только для внутреннего использования
Процедура ПолучитьДанныеВыписки(Знач ЭД, СсылкаНаХранилище, МассивСчетов = Неопределено, Организация = Неопределено, СоглашениеЭД = Неопределено) Экспорт
	
	Перем ТекстВыписки;
	
	Если Не ЭлектронныеДокументыСлужебный.УстановленныеПодписиВалидны(ЭД) Тогда
		Возврат;
	КонецЕсли;
	
	РеквизитыЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЭД, "Организация, СоглашениеЭД");
	
	Организация  = РеквизитыЭД.Организация;
	СоглашениеЭД = РеквизитыЭД.СоглашениеЭД;
	
	ЭлектронныеДокументы.ПолучитьДанныеВыпискиБанкаТекстовыйФормат(ЭД, СсылкаНаХранилище, МассивСчетов);
	
КонецПроцедуры

// Выполняет добавление ЭЦП в электронный документ.
//
// Параметры:
//  ПрисоединенныйФайл - Ссылка на элемент справочника, содержащего в себе электронный документ,
//  ДанныеПодписи - Структура параметров ЭЦП.
//
Процедура ДобавитьПодпись(ПрисоединенныйФайл, ДанныеПодписи) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СпособОбменаЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПрисоединенныйФайл.ПрофильНастроекЭДО, "СпособОбменаЭД");
	ЕстьКриптосредствоНаСервере = Не ЭтоПрямойОбмен(СпособОбменаЭД)
									И ВыполнятьАвторизациюНаСервере();
	Попытка
		НачатьТранзакцию();
		ПрисоединенныеФайлы.ЗанестиИнформациюОднойПодписи(ПрисоединенныйФайл, ДанныеПодписи);
		Если ВыполнятьКриптооперацииНаСервере() ИЛИ ЕстьКриптосредствоНаСервере Тогда
			ОпределитьСтатусыПодписей(ПрисоединенныйФайл);
		КонецЕсли;
		Если ЭлектронныйДокументПолностьюПодписан(ПрисоединенныйФайл) Тогда
			
			НаправлениеЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПрисоединенныйФайл, "НаправлениеЭД");
			Если НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани Тогда
				НовыйСтатусЭД = ЭлектронныеДокументыСлужебный.ПолучитьДопустимыйСтатусЭД(
																		Перечисления.СтатусыЭД.ПолностьюПодписан,
																		ПрисоединенныйФайл);
			Иначе
				НовыйСтатусЭД = ЭлектронныеДокументыСлужебный.ПолучитьДопустимыйСтатусЭД(
																		Перечисления.СтатусыЭД.Подписан,
																		ПрисоединенныйФайл);
			КонецЕсли;
			
			СтруктураПараметров = Новый Структура("СтатусЭД", НовыйСтатусЭД);
			ЭлектронныеДокументыСлужебный.ИзменитьПоСсылкеПрисоединенныйФайл(ПрисоединенныйФайл, СтруктураПараметров, Ложь);
			ЭлектронныеДокументыПереопределяемый.НазначенСтатусПодписан(ПрисоединенныйФайл);
			
		Иначе
			
			// В рамках интеркампани, документ должен иметь 2 подписи,
			// т.к. электронный документ подписан не полностью, то достаточно проверить,
			// что количество ЭЦП отлично от 0.
			ДокументИнтеркампаниЧастичноПодписан = (ПрисоединенныйФайл.НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани
													И ПрисоединенныйФайл.ЭлектронныеЦифровыеПодписи.Количество() > 0);
			ЭтоЭДПлатежноеПоручение = ПрисоединенныйФайл.ВидЭД = Перечисления.ВидыЭД.ПлатежноеПоручение;
			
			Если ДокументИнтеркампаниЧастичноПодписан ИЛИ ЭтоЭДПлатежноеПоручение Тогда
				
				НовыйСтатусЭД = ЭлектронныеДокументыСлужебный.ПолучитьДопустимыйСтатусЭД(
																		Перечисления.СтатусыЭД.ЧастичноПодписан,
																		ПрисоединенныйФайл);
				
				СтруктураПараметров = Новый Структура();
				СтруктураПараметров.Вставить("СтатусЭД", НовыйСтатусЭД);
				СтруктураПараметров.Вставить("Изменил", Пользователи.АвторизованныйПользователь());
				ЭлектронныеДокументыСлужебный.ИзменитьПоСсылкеПрисоединенныйФайл(ПрисоединенныйФайл, СтруктураПараметров, Ложь);
				
			КонецЕсли;
		КонецЕсли;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ШаблонСообщения = НСтр("ru = 'Ошибка подписи электронного документа %1'");
		ТекстСообщения = СтрЗаменить(ШаблонСообщения, "%1", ПрисоединенныйФайл);
		ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'установка подписи ЭЦП'"),
																					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке),
																					ТекстСообщения);
		ВызватьИсключение КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
	КонецПопытки;
	
КонецПроцедуры

// Только для внутреннего использования
Функция СоздатьИОтправитьДокументыПЭД(Знач ДобавленныеФайлы,
	Знач ПризнакПодписи, Знач СоотвСоглашенийИПараметровСертификатов = Неопределено, ПакетыКПовторнойОтправке = Неопределено) Экспорт
	
	ПовторнаяОтправка = Ложь;
	
	Если ПакетыКПовторнойОтправке = Неопределено Тогда
		МассивСтруктурПакетовЭД = ЭлектронныеДокументыСлужебный.СоздатьДокументыПакетовЭД(ДобавленныеФайлы, ПризнакПодписи);
	Иначе
		МассивСтруктурПакетовЭД = ПакетыКПовторнойОтправке;
	КонецЕсли;
	
	СтруктураРезультата = Новый Структура;
	СтруктураРезультата.Вставить("КолПодготовленных", МассивСтруктурПакетовЭД.Количество());
	
	КолОтправленных = 0;
	МассивПакетовДляОбработкиНаКлиенте = Новый Массив;
	МассивПакетовДляОтправкиСКлиента   = Новый Массив;
	
	Для Каждого СтруктураПЭД Из МассивСтруктурПакетовЭД Цикл
		
		Если СтруктураПЭД.Свойство("ОтправкаСКлиента") Тогда
			МассивПакетовДляОтправкиСКлиента.Добавить(СтруктураПЭД.ПЭД);
			Продолжить;
		КонецЕсли;
		
		Если СтруктураПЭД.ТребуетсяШифрованиеНаКлиенте Тогда
			МассивПакетовДляОбработкиНаКлиенте.Добавить(СтруктураПЭД.ПЭД);
			Продолжить;
		КонецЕсли;
		
		Если ЭлектронныеДокументыСлужебный.НемедленнаяОтправкаЭД() Тогда
			
			МассивПЭД = Новый Массив;
			МассивПЭД.Добавить(СтруктураПЭД.ПЭД);
			
			Если Не ПовторнаяОтправка Тогда
				Отправлено = ОтправкаПакетовЭД(МассивПЭД, СоотвСоглашенийИПараметровСертификатов, ПовторнаяОтправка);
				КолОтправленных = КолОтправленных + Отправлено;
			КонецЕсли;
			
			Если ПовторнаяОтправка Тогда
				Если ПакетыКПовторнойОтправке = Неопределено Тогда
					ПакетыКПовторнойОтправке = Новый Массив;
				КонецЕсли;
				ПакетыКПовторнойОтправке.Добавить(СтруктураПЭД);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураРезультата.Вставить("КолОтправленных",                    КолОтправленных);
	СтруктураРезультата.Вставить("МассивПакетовДляОбработкиНаКлиенте", МассивПакетовДляОбработкиНаКлиенте);
	
	Если ЭлектронныеДокументыСлужебный.НемедленнаяОтправкаЭД() И МассивПакетовДляОтправкиСКлиента.Количество() > 0 Тогда
		ДанныеДляОтправкиЧерезДопОбработку = ДанныеДляОтправкиЧерезДопОбработку(МассивПакетовДляОтправкиСКлиента);
		СтруктураРезультата.Вставить("ДанныеДляОтправкиСКлиента", ДанныеДляОтправкиЧерезДопОбработку);
	КонецЕсли;
	
	Возврат СтруктураРезультата;
	
КонецФункции

// Только для внутреннего использования
Функция ОтправкаПакетовЭД(Знач МассивПакетовЭД, Знач СоотвСоглашенийИПараметровСертификатов, ПовторнаяОтправка = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатОтправки = 0;
	Для Каждого ПакетЭД Из МассивПакетовЭД Цикл
		// Если электронный документ по каким-то причинам отправлен быть не может,
		// то не надо приостанавливать всю цепочку.
		НачатьТранзакцию();
		
		ЭлектронныеДокументыСлужебный.ОбновитьСтатусыДокументовПакетаЭД(ПакетЭД,
																		Перечисления.СтатусыПакетовЭД.Отправлен,
																		ТекущаяДатаСеанса());
		Если Не ПакетЭД.СтатусПакета = Перечисления.СтатусыПакетовЭД.Отправлен Тогда
			ОтменитьТранзакцию();
			Продолжить;
		КонецЕсли;
		
		Попытка
			
			РеквизитыПакетаЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПакетЭД,
				"ПрофильНастроекЭДО, НастройкаЭДО, СпособОбменаЭД, АдресРесурсаКонтрагента, ЭлектронныеДокументы");
			
			МассивПрофилейНастроекЭДО = Новый Массив;
			МассивПрофилейНастроекЭДО.Добавить(РеквизитыПакетаЭД.ПрофильНастроекЭДО);
			
			ТипОтправки = РеквизитыПакетаЭД.СпособОбменаЭД;
			
			АдресКаталогаОтправки = СформироватьФайлыДляОтправки(ПакетЭД);
			Если ПустаяСтрока(АдресКаталогаОтправки) Тогда
				ОтменитьТранзакцию();
				УдалитьФайлы(АдресКаталогаОтправки);
				Продолжить;
			КонецЕсли;
			
			Если ТипОтправки = Перечисления.СпособыОбменаЭД.ЧерезЭлектроннуюПочту Тогда
				ОтправленТекущийПакет = ОтправитьЭлектронноеПисьмо(ПакетЭД, АдресКаталогаОтправки);
				РезультатОтправки = РезультатОтправки + ОтправленТекущийПакет;
				Если ОтправленТекущийПакет = 0 Тогда
					ОтменитьТранзакцию();
					УдалитьФайлы(АдресКаталогаОтправки);
					Продолжить;
				КонецЕсли;
				
				ИзменитьСостояниеЭДДокументовОснования(РеквизитыПакетаЭД);
				
			ИначеЕсли ТипОтправки =  Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском
				ИЛИ ТипОтправки =  Перечисления.СпособыОбменаЭД.ЧерезСервис1СЭДО Тогда
				
				СоотвСоглашений = Неопределено;
				Если ТипЗнч(СоотвСоглашенийИПараметровСертификатов) = Тип("Соответствие")
					И СоотвСоглашенийИПараметровСертификатов.Количество() > 0 Тогда
					ПараметрыСертификата = СоотвСоглашенийИПараметровСертификатов.Получить(РеквизитыПакетаЭД.ПрофильНастроекЭДО);
				ИначеЕсли ДоступныПараметрыДляАвторизацииНаСервереОператора(МассивПрофилейНастроекЭДО, СоотвСоглашений) Тогда
					ПараметрыСертификата = СоотвСоглашений.Получить(РеквизитыПакетаЭД.ПрофильНастроекЭДО);
				Иначе
					ОтменитьТранзакцию();
					УдалитьФайлы(АдресКаталогаОтправки);
					Продолжить;
				КонецЕсли;
				
				Если ПараметрыСертификата = Неопределено Тогда
					ШаблонСообщения = Нстр("ru = 'Не удалось отправить оператору ЭДО ""%1"".
												 |Не обнаружено сертификатов для авторизации в сервисе.
												 |Проверьте наличие сертификатов и доступ к ним в профиле настроек ЭДО.'");
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ПакетЭД);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, РеквизитыПакетаЭД.ПрофильНастроекЭДО);
					
					ОтменитьТранзакцию();
					УдалитьФайлы(АдресКаталогаОтправки);
					Продолжить;
				КонецЕсли;
				
				Маркер = Неопределено;
				Если Не (РасшифроватьМаркерИзСтруктурыСертификатаНаСервере(ПараметрыСертификата)
					И ПараметрыСертификата.Свойство("МаркерРасшифрованный", Маркер) И ЗначениеЗаполнено(Маркер)) Тогда
					ОтменитьТранзакцию();
					УдалитьФайлы(АдресКаталогаОтправки);
					Продолжить;
				КонецЕсли;
				ФайлыОтправки = НайтиФайлы(АдресКаталогаОтправки, "*");
				КоличествоКОтправке = ФайлыОтправки.Количество();
				
				КоличествоОтправленных = ЭлектронныеДокументыВнутренний.ОтправитьЧерезОператораЭДО(
					Маркер, АдресКаталогаОтправки, "SendMessage", РеквизитыПакетаЭД.ПрофильНастроекЭДО, ПовторнаяОтправка);
				
				Если ПовторнаяОтправка Тогда
					РезультатОтправки = 0;
					ОтменитьТранзакцию();
					Прервать;
				КонецЕсли;
				
				Если КоличествоОтправленных <> КоличествоКОтправке Тогда
					ШаблонСообщения = Нстр("ru = 'Не удалось отправить оператору ЭДО ""%1"".'");
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ПакетЭД);
					
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
					ОтменитьТранзакцию();
					УдалитьФайлы(АдресКаталогаОтправки);
					Продолжить;
				Иначе
					РезультатОтправки = РезультатОтправки + КоличествоОтправленных;
					
					ЭлектронныеДокументыСлужебный.ОбновитьИнформациюОбАктивностиУчетнойЗаписи(РеквизитыПакетаЭД.ПрофильНастроекЭДО);
					
				КонецЕсли;
				
				ИзменитьСостояниеЭДДокументовОснования(РеквизитыПакетаЭД);
				
			ИначеЕсли ТипОтправки = Перечисления.СпособыОбменаЭД.ЧерезКаталог Тогда
				
				АдресКаталога = РеквизитыПакетаЭД.АдресРесурсаКонтрагента
					+ ?(Прав(РеквизитыПакетаЭД.АдресРесурсаКонтрагента, 1) <> "\", "\", "");
				КаталогНаДиске = Новый Файл(АдресКаталога);
				Если НЕ КаталогНаДиске.Существует() Тогда
					СоздатьКаталог(АдресКаталога);
				КонецЕсли;
				
				ФайлыОтправки = НайтиФайлы(АдресКаталогаОтправки, "*");
				Для Каждого Файл Из ФайлыОтправки Цикл
					КопироватьФайл(Файл.ПолноеИмя, АдресКаталога + Файл.Имя);
					РезультатОтправки = РезультатОтправки + 1;
				КонецЦикла;
				
				ИзменитьСостояниеЭДДокументовОснования(РеквизитыПакетаЭД);
				
			ИначеЕсли ТипОтправки = Перечисления.СпособыОбменаЭД.ЧерезFTP Тогда
				FTPСоединение = ЭлектронныеДокументыСлужебный.ПолучитьFTPСоединение(РеквизитыПакетаЭД.ПрофильНастроекЭДО);
				Если FTPСоединение = Неопределено Тогда
					ОтменитьТранзакцию();
					Продолжить;
				КонецЕсли;
				КаталогОтправки = РеквизитыПакетаЭД.АдресРесурсаКонтрагента;
				ЭлектронныеДокументыСлужебный.ПодготовитьПутьFTP(КаталогОтправки);
				ТекстОшибки = "";
				Попытка
					FTPСоединение.УстановитьТекущийКаталог(КаталогОтправки);
				Исключение
					ЭлектронныеДокументыСлужебный.СоздатьКаталогиFTP(FTPСоединение, КаталогОтправки, , ТекстОшибки);
				КонецПопытки;
				Если ЗначениеЗаполнено(ТекстОшибки) Тогда
					ОтменитьТранзакцию();
					Продолжить;
				КонецЕсли;
				ФайлыОтправки = НайтиФайлы(АдресКаталогаОтправки, "*");
				Для Каждого Файл Из ФайлыОтправки Цикл
					ЭлектронныеДокументыСлужебный.ЗаписатьФайлНаFTP(FTPСоединение, Файл.ПолноеИмя, Файл.Имя, , ТекстОшибки);
					Если ЗначениеЗаполнено(ТекстОшибки) Тогда 
						Прервать;
					КонецЕсли;
					РезультатОтправки = РезультатОтправки + 1;
				КонецЦикла;
				Если ЗначениеЗаполнено(ТекстОшибки) Тогда
					ОтменитьТранзакцию();
					Продолжить;
				КонецЕсли;
				
				ИзменитьСостояниеЭДДокументовОснования(РеквизитыПакетаЭД);
				
			ИначеЕсли ТипОтправки = Перечисления.СпособыОбменаЭД.ЧерезВебРесурсБанка Тогда
				
				РеквизитыНастройкиЭДО = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РеквизитыПакетаЭД.НастройкаЭДО,
					"АдресСервера, РесурсИсходящихДокументов, РесурсВходящихДокументов, ИспользуетсяКриптография, ПрограммаБанка");
					
				Если Не РеквизитыНастройкиЭДО.ИспользуетсяКриптография
					И (СоотвСоглашенийИПараметровСертификатов = Неопределено
						ИЛИ СоотвСоглашенийИПараметровСертификатов.Получить(РеквизитыПакетаЭД.НастройкаЭДО) = Неопределено) Тогда
						
					ОтменитьТранзакцию();
					УдалитьФайлы(АдресКаталогаОтправки);
					Продолжить;
				КонецЕсли;
				
				Если РеквизитыНастройкиЭДО.ПрограммаБанка = Перечисления.ПрограммыБанка.СбербанкОнлайн
					ИЛИ РеквизитыНастройкиЭДО.ПрограммаБанка = Перечисления.ПрограммыБанка.ОбменЧерезДопОбработку Тогда
					
					ОтменитьТранзакцию();
					УдалитьФайлы(АдресКаталогаОтправки);
					Продолжить;
				КонецЕсли;
				
				Настройки = Новый Структура("Адрес", РеквизитыНастройкиЭДО.АдресСервера);
				
				Если НЕ РеквизитыНастройкиЭДО.ИспользуетсяКриптография Тогда
					ПараметрыАвторизации = СоотвСоглашенийИПараметровСертификатов.Получить(РеквизитыПакетаЭД.НастройкаЭДО);
					ХэшАвторизации = ЭлектронныеДокументыСлужебный.ХэшАвторизации(
						ПараметрыАвторизации.Пользователь, ПараметрыАвторизации.Пароль);
					Настройки.Вставить("Хэш", ХэшАвторизации);
				КонецЕсли;
				
				Выборка = РеквизитыПакетаЭД.ЭлектронныеДокументы.Выбрать();
				Если Выборка.Количество() > 0 И Выборка.Следующий() Тогда
					ЭД = Выборка.СтруктураСлужебныхДанных;
					Данные = ПрисоединенныеФайлы.ПолучитьДвоичныеДанныеФайла(ЭД);
					Настройки.Вставить("Ресурс", РеквизитыНастройкиЭДО.РесурсИсходящихДокументов);
					ФайлыОтправки = НайтиФайлы(АдресКаталогаОтправки, "*");
					ПутьКФайлуОтправки = ФайлыОтправки[0].ПолноеИмя;
					
					ОтветБанка = "";
					ТекстОшибки = "";
					ЭлектронныеДокументыСлужебный.ОтправитьПакетЧерезРесурсБанка(Настройки, ПутьКФайлуОтправки, ОтветБанка, ТекстОшибки);
					
					Если ЗначениеЗаполнено(ТекстОшибки) Тогда
						ШаблонВидаОперации = НСтр("ru = 'отправка пакета ЭД по соглашению: %1, способ обмена %2'");
						ВидОперации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							ШаблонВидаОперации, РеквизитыПакетаЭД.НастройкаЭДО, РеквизитыПакетаЭД.СпособОбменаЭД);
						ЭлектронныеДокументыСлужебный.ОбработатьОшибкуПередачиПакетаБанка(ЭД, ВидОперации, ТекстОшибки, ТекстОшибки);
					Иначе
						РезультатОтправки = РезультатОтправки + 1;
						УдалитьФайлы(ПутьКФайлуОтправки);
						ДанныеОтвета = ЭлектронныеДокументыСлужебный.ПолучитьДанныеИзОтветаБанка(ОтветБанка, ЭД);
					КонецЕсли;
					Если ДанныеОтвета = Неопределено Тогда
						ОтменитьТранзакцию();
						УдалитьФайлы(АдресКаталогаОтправки);
						Продолжить;
					КонецЕсли;
					ЭлектронныеДокументыСлужебный.ОбработатьОтветБанка(ДанныеОтвета, ЭД);
					ОбновитьВерсиюЭД(ЭД);
				КонецЕсли;
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
		Исключение
			ШаблонСообщения = НСтр("ru = 'Ошибка отправки пакета по настройке: %1, способ обмена: %2
										|%3 (подробности см. в Журнале регистрации).'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
																ШаблонСообщения,
																РеквизитыПакетаЭД.НастройкаЭДО,
																РеквизитыПакетаЭД.СпособОбменаЭД,
																КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			ШаблонВидаОперации = НСтр("ru = 'отправка пакета ЭД по соглашению: %1, способ обмена %2'");
			ВидОперации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
																ШаблонВидаОперации,
																РеквизитыПакетаЭД.НастройкаЭДО,
																РеквизитыПакетаЭД.СпособОбменаЭД);
			ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			
			Если ТипОтправки = Перечисления.СпособыОбменаЭД.ЧерезВебРесурсБанка Тогда
				ОбработатьИсключениеПоЭДНаСервере(ВидОперации, ПодробноеПредставлениеОшибки, ТекстСообщения, 1);
			Иначе
				ОбработатьИсключениеПоЭДНаСервере(ВидОперации, ПодробноеПредставлениеОшибки, ТекстСообщения);
			КонецЕсли;

			Если ТипОтправки = Перечисления.СпособыОбменаЭД.ЧерезВебРесурсБанка Тогда
				
				ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
				
				СтруктураЭД = Новый Структура;
				СтруктураЭД.Вставить("СтатусЭД", Перечисления.СтатусыЭД.ОшибкаПередачи);
				СтруктураЭД.Вставить("ТекстУточнения", ТекстОшибки);
				ЭлектронныеДокументыСлужебный.ИзменитьПоСсылкеПрисоединенныйФайл(ЭД, СтруктураЭД, Ложь);

				ЭлектронныеДокументыСлужебный.ОбновитьСтатусыДокументовПакетаЭД(ПакетЭД,
																				Перечисления.СтатусыПакетовЭД.Отменен,
																				ТекущаяДатаСеанса());
				ЗафиксироватьТранзакцию();
			Иначе
				ОтменитьТранзакцию();
			КонецЕсли;
		КонецПопытки;
		
		Если НЕ ПустаяСтрока(АдресКаталогаОтправки) Тогда
			УдалитьФайлы(АдресКаталогаОтправки);
		КонецЕсли;
	
	КонецЦикла;
	
	Возврат РезультатОтправки;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Аунтификация на пользовательском сайте.

// Возвращает логин и пароль пользователя интернет-поддержки,
// сохраненные в информационной базе.
//
// Возвращаемое значение:
//   Структура    - текущие значения:
//     * Логин     - Строка - логин пользователя Интернет-поддержки;
//     * Пароль    - Строка - пароль пользователя Интернет-поддержки.
//   Неопределено - если параметры еще не были введены.
//
Функция ПроверитьПараметрыАутентификацииНаСайте() Экспорт
	
	ПараметрыАутентификации = ЭлектронныеДокументыСлужебный.ПараметрыАутентификацииНаСайте();
	Если ПараметрыАутентификации <> Неопределено И ПараметрыАутентификации.Пароль = "" Тогда
		ПараметрыАутентификации = Неопределено;
	КонецЕсли;
	
	Возврат ПараметрыАутентификации;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обработка ошибок

// Обрабатывает исключительные ситуации по электронным документам.
//
// Параметры:
// ВидОперации - строка - вид операции при которой возникло исключение.
// ПодробныйТекстОшибки - строка - описание ошибки.
// ТекстСообщения - строка - текст ошибки.
//
Процедура ОбработатьИсключениеПоЭДНаСервере(ВидОперации, ПодробныйТекстОшибки, ТекстСообщения = "", КодСобытия = 2) Экспорт
	
	Если НЕ ПустаяСтрока(ТекстСообщения) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	ТекстОшибки = НСтр("ru = 'Выполнение операции:'")+ " " + ВидОперации + Символы.ПС + ПодробныйТекстОшибки;
	ЭлектронныеДокументыСлужебный.ВыполнитьЗаписьСобытияПоЭДВЖурналРегистрации(ТекстОшибки, КодСобытия);
	
КонецПроцедуры

// Возвращает текст сообщения пользователю по коду ошибки.
//
// Параметры:
//  КодОшибки - строка, код ошибки;
//  СтороннееОписаниеОшибки - строка, описание ошибки переданное другой системой.
//
// Возвращаемое значение:
//  ТекстСообщения - строка - переопределенное описание ошибки.
//
Функция ПолучитьСообщениеОбОшибке(КодОшибки, СтороннееОписаниеОшибки = "") Экспорт
	
	Возврат ЭлектронныеДокументыПовтИсп.ПолучитьСообщениеОбОшибке(КодОшибки, СтороннееОписаниеОшибки);
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Работа с файлами

// Только для внутреннего использования
Функция ТекущийКаталогВременныхФайлов() Экспорт
	
	ТекущийКаталог = "";
	ЭлектронныеДокументыПереопределяемый.ТекущийКаталогВременныхФайлов(ТекущийКаталог);
	Если НЕ ЗначениеЗаполнено(ТекущийКаталог) Тогда
		ТекущийКаталог = КаталогВременныхФайлов();
	КонецЕсли;
	
	Возврат ТекущийКаталог;
	
КонецФункции

// Функция используется для проверки доступности каталога, указанного в настройках соглашения об обмене (через каталог):
// на клиенте в каталог записывается файл, на сервере выполняется попытка прочитать его по тому же пути. Связано это с тем,
// что данный каталог должен быть доступен как с клиента, так и с сервера.
//
// Параметры:
//  ПолноеИмяТестовогоФайла - строка - полный путь к тестовому файлу записанному из клиентского сеанса;
//
// Возвращаемый параметр:
//  Булево - Истина - файл по указанному пути существует, иначе - Ложь.
//
Функция ПрочитатьТестовыйФайлНаСервере(ПолноеИмяТестовогоФайла) Экспорт
	
	ТестовыйФайл = Новый Файл(ПолноеИмяТестовогоФайла);
	
	Возврат ТестовыйФайл.Существует();
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Права

// Только для внутреннего использования
Функция ЕстьПравоОбработкиЭД(ВыводитьСообщение = Истина) Экспорт
	
	ЕстьПраво = ЭлектронныеДокументыПереопределяемый.ЕстьПравоОбработкиЭД();
	Если ТипЗнч(ЕстьПраво) <> Тип("Булево") Тогда
		ЕстьПраво = Пользователи.РолиДоступны("ВыполнениеОбменаЭД");
	КонецЕсли;
	Если НЕ ЕстьПраво И ВыводитьСообщение Тогда
		ЭлектронныеДокументыСлужебный.СообщитьПользователюОНарушенииПравДоступа();
	КонецЕсли;
	
	Возврат ЕстьПраво;
	
КонецФункции

// Только для внутреннего использования
Функция ЕстьПравоЧтенияЭД(ВыводитьСообщение = Истина) Экспорт
	
	ЕстьПраво = ЭлектронныеДокументыПереопределяемый.ЕстьПравоЧтенияЭД();
	Если ТипЗнч(ЕстьПраво) <> Тип("Булево") Тогда
		ЕстьПраво = Пользователи.РолиДоступны("ВыполнениеОбменаЭД, ЧтениеЭД, ИспользованиеОбменаЭД");
	КонецЕсли;	
	Если НЕ ЕстьПраво И ВыводитьСообщение Тогда
		ЭлектронныеДокументыСлужебный.СообщитьПользователюОНарушенииПравДоступа();
	КонецЕсли;
		
	Возврат ЕстьПраво;
		
КонецФункции

// Только для внутреннего использования
Функция ЕстьПравоНастройкиЭДО(ВыводитьСообщение = Истина) Экспорт
	
	ЕстьПраво = Пользователи.РолиДоступны("НастройкаПараметровЭД");
	
	Если НЕ ЕстьПраво И ВыводитьСообщение Тогда
		ЭлектронныеДокументыСлужебный.СообщитьПользователюОНарушенииПравДоступа();
	КонецЕсли;
	
	Возврат ЕстьПраво;
	
КонецФункции

// Создает новый элемент справочника "СертификатыЭЦП"
// и заполняет его переданными данными.
//
// Параметры:
//  СтруктураСертификата - структура данных для заполнения элемента справочника
//  ОписаниеОшибки - строка - описание ошибки при ее возникновении.
//
Функция ЗагрузитьСертификат(СтруктураСертификата, ОписаниеОшибки) Экспорт
	
	НовыйЭлемент = Справочники.СертификатыЭЦП.СоздатьЭлемент();
	НовыйЭлемент.Отпечаток     = СтруктураСертификата.Отпечаток;
	НовыйЭлемент.Наименование  = СтруктураСертификата.Организация;
	НовыйЭлемент.Организация   = СтруктураСертификата.Организация;
	НовыйЭлемент.ДатаОкончания = СтруктураСертификата.ДействителенДо;
	
	// Проверка сертификата на соответствие 63 ФЗ.
	СистемнаяИнформация = Новый СистемнаяИнформация;
	Если ОбщегоНазначенияКлиентСервер.СравнитьВерсии(СистемнаяИнформация.ВерсияПриложения, "8.2.18.108") >= 0 Тогда
		НовыйСертификат = Новый СертификатКриптографии(СтруктураСертификата.ДвоичныеДанныеСертификата);
		
		// Корректно работаем только с сертификатами для подписи стандартной структуры.
		Если (НовыйСертификат.Субъект.Свойство("SN") ИЛИ НовыйСертификат.Субъект.Свойство("CN"))
			И НовыйСертификат.Субъект.Свойство("ST") Тогда
			
			Если НовыйСертификат.Субъект.Свойство("SN") Тогда
				
				ШаблонФИОВладельца = НСтр("ru = '%1 %2'");
				ФИОВладельца = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонФИОВладельца,
					НовыйСертификат.Субъект.SN, НовыйСертификат.Субъект.GN);
			ИначеЕсли НовыйСертификат.Субъект.Свойство("CN") Тогда
				
				ФИОВладельца = НовыйСертификат.Субъект.CN;
			КонецЕсли;
			
			ДолжностьПоСертификату = 0;
			Если НовыйСертификат.Субъект.Свойство("T") И ЗначениеЗаполнено(НовыйСертификат.Субъект.T) Тогда
				ДолжностьПоСертификату = НовыйСертификат.Субъект.T;
			КонецЕсли;
			НовыйЭлемент.ДолжностьПоСертификату = ДолжностьПоСертификату;
			
			ЭлектронныеДокументы.ФамилияИнициалыФизЛица(ФИОВладельца, НовыйЭлемент.Фамилия, НовыйЭлемент.Имя,
				НовыйЭлемент.Отчество);
			НовыйЭлемент.Наименование  = СтруктураСертификата.КомуВыдан;
		КонецЕсли;
	КонецЕсли;
	
	ШаблонНазначения = НСтр("ru = 'Кем выдан: %1
							|Действителен до: %2
							|
							|%3'");
	НовоеНазначение = "";
	ЭлектроннаяЦифроваяПодпись.ЗаполнитьНазначениеСертификата(СтруктураСертификата.Назначение, НовоеНазначение, Истина);
	НовыйЭлемент.Назначение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонНазначения, СтруктураСертификата.КемВыдан,
		СтруктураСертификата.ДействителенДо, НовоеНазначение);
	
	Если СтруктураСертификата.Свойство("ДвоичныеДанныеСертификата")
		И ЗначениеЗаполнено(СтруктураСертификата.ДвоичныеДанныеСертификата) Тогда
		
		ДанныеХранилища = Новый ХранилищеЗначения(СтруктураСертификата.ДвоичныеДанныеСертификата, Новый СжатиеДанных(9));
		НовыйЭлемент.ФайлСертификата = ДанныеХранилища;
		НовыйЭлемент.Записать();
		
		Возврат НовыйЭлемент.Ссылка;
	Иначе
		ОписаниеОшибки = НСтр("ru = 'Ошибка получения данных сертификата подписи!'");
		
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Помечает на удаление элементы справочника ЭДПрисоединенныеФайлы с отбором по владельцу
//
// Параметры: 
//  Ссылка -  ссылка на объект.
//
Процедура ПометитьНаУдалениеЭлектронныеДокументыПоВладельцу(Ссылка, Знач ПометкаУдаления) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПометкаУдаленияСсылка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "ПометкаУдаления");
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Файлы.Ссылка КАК Ссылка,
	|	Файлы.ПометкаУдаления
	|ИЗ
	|	Справочник.ЭДПрисоединенныеФайлы КАК Файлы
	|ГДЕ
	|	Файлы.ВладелецФайла = &ВладелецФайла
	|	И (Файлы.СтатусЭД = ЗНАЧЕНИЕ(Перечисление.СтатусыЭД.Сформирован)
	|			ИЛИ Файлы.СтатусЭД = ЗНАЧЕНИЕ(Перечисление.СтатусыЭД.ПустаяСсылка))";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ВладелецФайла", Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если Выборка.ПометкаУдаления <> ПометкаУдаления Тогда
			ФайлОбъект = Выборка.Ссылка.ПолучитьОбъект();
			Попытка
				ФайлОбъект.Заблокировать();
			Исключение
				Шаблон = НСтр("ru = 'Не удалось заблокировать объект %1'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон, ФайлОбъект);
				ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ВидОперации = Нстр("ru = 'Пометка на удаление электронных документов'");
				ОбработатьИсключениеПоЭДНаСервере(ВидОперации, ПодробноеПредставлениеОшибки, ТекстСообщения, 5);
				Продолжить;
			КонецПопытки;
			ФайлОбъект.УстановитьПометкуУдаления(ПометкаУдаления);
			ФайлОбъект.Разблокировать();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Проводит тест связи с оператором ЭДО.
//
// Параметры:
//  ПараметрыСоглашения  - Структура - содержит реквизиты соглашения
//  ПарольКСертификатуОператора  - строка - пароль к сертификату оператора
//
// Возвращаемое значение:
//  Булево, содержит результат теста
//
Функция ТестСвязиСОператоромЭДО(СтруктураПараметровЗапросаМаркера, ВыводитьСообщения = Истина, ПараметрыАутентификации = Неопределено) Экспорт
	
	Возврат ЭлектронныеДокументыВнутренний.ТестСвязиСОператоромЭДО(СтруктураПараметровЗапросаМаркера, ВыводитьСообщения, ПараметрыАутентификации);
	
КонецФункции

// Определяет по параметрам, существует ли действующее соглашение
// 
// Параметры:
//  ПараметрыЭД - структура, содержащая параметры поиска соглашения
//
// Возвращаемое значение:
//  Булево Истина или Ложь
//
Функция ЕстьДействующееСоглашение(ПараметрыЭД) Экспорт
	
	НастройкиОбмена = ЭлектронныеДокументыСлужебный.ОпределитьНастройкиОбменаЭД(ПараметрыЭД);
	
	Возврат ЗначениеЗаполнено(НастройкиОбмена);
	
КонецФункции

// Возвращает структуру для открытия формы сопоставления номенклатуры
//
// Параметры:
//  СсылкаНаЭД - СправочникСсылка.ЭДПрисоединенныеФайлы
//
// Возвращаемое значение:
//  Структура, содержащая ИмяФормы и ПараметрыОткрытияФормы
//
Функция ПолучитьПараметрыФормыСопоставленияНоменклатуры(СсылкаНаЭД) Экспорт
	
	СтруктураПараметров = ЭлектронныеДокументыПереопределяемый.ПолучитьПараметрыФормыСопоставленияНоменклатуры(
																								СсылкаНаЭД);
	Если ТипЗнч(СтруктураПараметров) = Тип("Структура") И СтруктураПараметров.Свойство("ПараметрыОткрытияФормы") Тогда
		СтруктураПараметров.ПараметрыОткрытияФормы.Вставить("РежимОткрытияОкна",
															РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	Возврат СтруктураПараметров;
	
КонецФункции

// По ссылке на документ определяет есть ли у него э.д.
//
// Параметры:
//  СсылкаНаВладельца - ДокументСсылка
//
// Возвращаемое значение:
//  Булево, факт существования документа
//
Функция ЕстьРабочийЭСФ(СсылкаНаВладельца) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СостоянияЭД.ЭлектронныйДокумент
	|ИЗ
	|	РегистрСведений.СостоянияЭД КАК СостоянияЭД
	|ГДЕ
	|	СостоянияЭД.СсылкаНаОбъект = &СсылкаНаВладельца
	|	И СостоянияЭД.ЭлектронныйДокумент <> ЗНАЧЕНИЕ(Справочник.ЭДПрисоединенныеФайлы.ПустаяСсылка)
	|	И (СостоянияЭД.ЭлектронныйДокумент.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.СчетФактура)
	|			ИЛИ СостоянияЭД.ЭлектронныйДокумент.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.КорректировочныйСчетФактура))
	|	И СостоянияЭД.ЭлектронныйДокумент.СтатусЭД <> ЗНАЧЕНИЕ(Перечисление.СтатусыЭД.Отклонен)";
	
	Запрос.УстановитьПараметр("СсылкаНаВладельца", СсылкаНаВладельца);
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить();
	
	Возврат Не Результат.Пустой();
	
КонецФункции

// Возвращает имя прикладного справочника по имени библиотечного справочника.
//
// Параметры:
//  ИмяСправочника - строка - название справочника из библиотеки.
//
// Возвращаемое значение:
//  ИмяПрикладногоСправочника - строковое имя прикладного справочника.
//
Функция ПолучитьИмяПрикладногоСправочника(ИмяСправочника) Экспорт
	
	Возврат ЭлектронныеДокументыПовтИсп.ПолучитьИмяПрикладногоСправочника(ИмяСправочника);
	
КонецФункции

// Получает значение функциональной опции.
//
// Параметры:
//  НаименованиеФО - Строка, имя функциональной опции
//
// Возвращаемое значение:
//  ЗначениеВозврата - булево, результат включенности ФО.
//
Функция ПолучитьЗначениеФункциональнойОпции(НаименованиеФО) Экспорт
	
	СоответствиеФО = Новый Соответствие;
	
	// Библиотека стандартных подсистем
	СоответствиеФО.Вставить("ИспользоватьЭлектронныеЦифровыеПодписи",     "ИспользоватьЭлектронныеЦифровыеПодписи");
	СоответствиеФО.Вставить("ИспользоватьДополнительныеОтчетыИОбработки", "ИспользоватьДополнительныеОтчетыИОбработки");
	
	ЭлектронныеДокументыПереопределяемый.ПолучитьСоответствиеФункциональныхОпций(СоответствиеФО);
	
	// Электронные документы
	СоответствиеФО.Вставить("ИспользоватьОбменЭД",                    "ИспользоватьОбменЭД");
	СоответствиеФО.Вставить("ИспользоватьОбменЭДМеждуОрганизациями",  "ИспользоватьОбменЭДМеждуОрганизациями");
	СоответствиеФО.Вставить("ИспользоватьОбменЭДСБанками",            "ИспользоватьОбменЭДСБанками");
	
	ИмяФОПрикладногоРешения = СоответствиеФО.Получить(НаименованиеФО);
	Если ИмяФОПрикладногоРешения = Неопределено Тогда // не задано соответствие
		Результат = Ложь;
	Иначе
		Результат = ПолучитьФункциональнуюОпцию(ИмяФОПрикладногоРешения)
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Получает текстовое представление версии электронного документа.
//
// Параметры:
//  СсылкаНаВладельца - Ссылка на объект ИБ, состояние версии электронного документа которого необходимо получить.
//  Гиперссылка - булево, Истина - необходимо реквизит формы "СостояниеЭД" сделать гиперссылкой.
//
Функция ТекстСостоянияЭД(СсылкаНаВладельца, Гиперссылка) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = "";
	Если ЗначениеЗаполнено(СсылкаНаВладельца) Тогда
		
		ИмяСчетаФактурыВыданного = ЭлектронныеДокументыПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении(
		"СчетФактураВыданныйВМетаданных");
		ИмяСчетаФактурыПолученного = ЭлектронныеДокументыПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении(
		"СчетФактураПолученныйВМетаданных");
		Если ИмяСчетаФактурыВыданного <> Неопределено
			И ТипЗнч(СсылкаНаВладельца) = Тип("ДокументСсылка." + ИмяСчетаФактурыВыданного)
			ИЛИ ИмяСчетаФактурыПолученного <> Неопределено
			И ТипЗнч(СсылкаНаВладельца) = Тип("ДокументСсылка." + ИмяСчетаФактурыПолученного) Тогда
			Результат = ПолучитьТекстСводногоСостоянияЭД(СсылкаНаВладельца);
		Иначе
			ТекущееСостояниеЭДО = СостояниеВерсииЭД(СсылкаНаВладельца);
			Результат = Строка(ТекущееСостояниеЭДО);
		КонецЕсли;
		
		ПараметрыЭД = Неопределено;
		Если ОпределитьДействующуюНастройкуЭДО(СсылкаНаВладельца, ПараметрыЭД)
			ИЛИ (ПараметрыЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий И ПараметрыЭД.Свойство("НастройкаЭДО")
			И ЗначениеЗаполнено(ПараметрыЭД.НастройкаЭДО)) Тогда
			Если Не ЕстьПравоЧтенияЭД(Ложь) Тогда
				ШаблонСостоянияЭД = НСтр("ru = '%1 «Недостаточно прав для чтения ЭДО»'");
				Результат = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСостоянияЭД, Результат);
				Гиперссылка = Ложь;
			Иначе
				
				Гиперссылка = Истина;
				Если Не ЗначениеЗаполнено(Результат) Тогда
					Гиперссылка = Ложь;
					Результат = НСтр("ru = 'ЭДО не начат'");
				КонецЕсли;
			КонецЕсли;
		Иначе
			Если ЗначениеЗаполнено(Результат) Тогда
				ШаблонСостоянияЭД = НСтр("ru = '%1 (настройка ЭДО не подключена)'");
				Результат = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСостоянияЭД, Результат);
				Гиперссылка = Истина;
			Иначе
				ЗаполнитьТекстПриглашенияКЭДО(Результат, ПараметрыЭД, СсылкаНаВладельца, Гиперссылка);
			КонецЕсли;
			Если Не ЕстьПравоНастройкиЭДО(Ложь) Тогда
				Результат = "";
				Гиперссылка = Ложь;
			КонецЕсли;
		КонецЕсли;
			
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Заполняет текст приглашения контрагента к ЭДО
//Параметры:
// ТексиПриглашения - Строка- заполняемый текст надписи формы
// ПараметрыЭД - Структура - свойства электронного документа, соотвествующего документу ИБ
// СсылкаНаВладельца - ДокументССылка - ссылка на документ ИБ
// Гиперссылка - Булево - определяет отображать ли надпись на форме как гиперссылку
//
Процедура ЗаполнитьТекстПриглашенияКЭДО(ТекстПриглашения, ПараметрыЭД, СсылкаНаВладельца, Гиперссылка) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ПлатежноеПоручение Тогда
		ТекстПриглашения = НСтр("ru = 'Нет действующей настройки ЭДО с банком'");
	ИначеЕсли ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ПередачаТоваровМеждуОрганизациями
		Или ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ВозвратТоваровМеждуОрганизациями Тогда
		ТекстПриглашения = НСтр("ru = 'Нет действующей настройки ЭДО с организацией-получателем'");
	ИначеЕсли ЗначениеЗаполнено(ПараметрыЭД.Организация) И ЗначениеЗаполнено(ПараметрыЭД.Контрагент) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ПрофилиНастроекЭДО.Ссылка
		|ИЗ
		|	Справочник.ПрофилиНастроекЭДО КАК ПрофилиНастроекЭДО
		|ГДЕ
		|	ПрофилиНастроекЭДО.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезСервис1СЭДО)
		|	И ПрофилиНастроекЭДО.Организация = &Организация
		|	И НЕ ПрофилиНастроекЭДО.ПометкаУдаления";
		Запрос.УстановитьПараметр("Организация", ПараметрыЭД.Организация);
		
		ШаблонТекстаНавигационнойСсылки = НСтр("ru = 'Пригласить ""%1"" к обмену электронными документами в 1С-ЭДО'");
		
		НаименованиеКонтрагентаДляСообщенияПользователю = ЭлектронныеДокументыПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении(
		"НаименованиеКонтрагентаДляСообщенияПользователю");
		
		ТекстПриглашения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонТекстаНавигационнойСсылки,
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыЭД.Контрагент, НаименованиеКонтрагентаДляСообщенияПользователю));
		Если Запрос.Выполнить().Пустой() Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	СостоянияКонтрагентовБЭД.Состояние
			|ИЗ
			|	РегистрСведений.СостоянияКонтрагентовБЭД КАК СостоянияКонтрагентовБЭД
			|ГДЕ
			|	СостоянияКонтрагентовБЭД.Контрагент = &Контрагент";
			
			Запрос.УстановитьПараметр("Контрагент", ПараметрыЭД.Контрагент);
			Выборка = Запрос.Выполнить().Выбрать();
			
			ШаблонТекстаНавигационнойСсылки = НСтр("ru = 'Подключить ""%1"" к ЭДО'");
			
			НаименованиеОрганизацииСокращенное = ЭлектронныеДокументыПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении(
			"СокращенноеНаименованиеОрганизации");
			ТекстПриглашения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонТекстаНавигационнойСсылки,
				ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыЭД.Организация, НаименованиеОрганизацииСокращенное));
			
			Если Выборка.Следующий()
				И (Выборка.Состояние <> Перечисления.СостоянияКонтрагентаБЭД.НеПодключен
				И Выборка.Состояние <> Перечисления.СостоянияКонтрагентаБЭД.ПустаяСсылка()) Тогда
				
				ШаблонТекстаНавигационнойСсылки = НСтр("ru = 'С ""%1"" возможен обмен электронными документами'");
				
				ИмяРеализацияТоваровУслуг = ЭлектронныеДокументыПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении(
				"РеализацияТоваровУслугВМетаданных");
				ИмяПоступлениеТоваровУслуг = ЭлектронныеДокументыПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении(
				"ПоступлениеТоваровУслугВМетаданных");
				Если ИмяРеализацияТоваровУслуг <> Неопределено
					И ТипЗнч(СсылкаНаВладельца) = Тип("ДокументСсылка." + ИмяРеализацияТоваровУслуг) Тогда
					
					ШаблонТекстаНавигационнойСсылки = НСтр("ru = 'Обмен электронными документами с ""%1"" можно начать прямо сейчас'");
				ИначеЕсли ИмяПоступлениеТоваровУслуг <> Неопределено
					И ТипЗнч(СсылкаНаВладельца) = Тип("ДокументСсылка." + ИмяПоступлениеТоваровУслуг) Тогда
					
					ШаблонТекстаНавигационнойСсылки = НСтр("ru = 'Получать электронные документы от ""%1"", а не вводить руками, можно прямо сейчас'");
				КонецЕсли;
				
				НаименованиеКонтрагентаДляСообщенияПользователю = ЭлектронныеДокументыПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении(
				"НаименованиеКонтрагентаДляСообщенияПользователю");
				
				ТекстПриглашения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонТекстаНавигационнойСсылки,
					ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыЭД.Контрагент, НаименованиеКонтрагентаДляСообщенияПользователю));
			КонецЕсли;
		КонецЕсли;
		
		Гиперссылка = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Проверяет, является ли переданный в параметре ЭД служебным или нет.
//
Функция ЭтоСлужебныйДокумент(ФайлЭД) Экспорт
	
	Возврат ЭлектронныеДокументыСлужебный.ЭтоСлужебныйДокумент(ФайлЭД);
	
КонецФункции

// Проверяет, является ли переданный в параметре ЭД ответным титулом.
//
Функция ЭтоОтветныйТитул(ФайлЭД) Экспорт
	
	Возврат ЭлектронныеДокументыСлужебный.ЭтоОтветныйТитул(ФайлЭД);
	
КонецФункции

// Проверяет что эд с.ф. имеет конечный статус в зависимости от направления.
//
Функция ДОСФЗавершен(СсылкаСФ, НаправлениеЭД) Экспорт
	
	ДОЗавершен = Ложь;
	СтатусСФ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаСФ, "СтатусЭД");
	Если НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
		ДОЗавершен = (СтатусСФ = Перечисления.СтатусыЭД.Утвержден);
	Иначе
		ДОЗавершен = (СтатусСФ = Перечисления.СтатусыЭД.Доставлен);
	КонецЕсли;
	
	Возврат ДОЗавершен;
	
КонецФункции

// Проверяет тип ЭД.Возращает Истина если ЭД счет фактура или корректировочный с.ф.
//
Функция ЭтоСчетФактура(ЭлектронныйДокумент) Экспорт
	
	Результат = Ложь;
	
	Если ТипЗнч(ЭлектронныйДокумент) = Тип("ПеречислениеСсылка.ТипыЭлементовВерсииЭД") Тогда
		ТипЭлементаВерсииЭД = ЭлектронныйДокумент;
	Иначе
		ТипЭлементаВерсииЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭлектронныйДокумент, "ТипЭлементаВерсииЭД");
	КонецЕсли;
	
	Если ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ЭСФ
		Или ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.СЧФУПД
		Или ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.КСЧФУКД Тогда
		Результат = Истина;
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

// Проверяет валидность подписей электронного документа
// и заполняет реквизиты Статус и ДатаПроверкиПодписи в табличной части ЭлектронныеЦифровыеПодписи.
//
// Параметры:
//  ЭД - СправочникСсылка.ЭДПрисоединенныеФайлы
//  ВыводитьСообщения - Булево, требуется ли выводить сообщения .
//
Процедура ОпределитьСтатусыПодписей(ЭД, ВыводитьСообщения = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	РеквизитыСоглашения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЭД.СоглашениеЭД, "ПрограммаБанка, СпособОбменаЭД");
	
	Если РеквизитыСоглашения.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезВебРесурсБанка
			И (РеквизитыСоглашения.ПрограммаБанка = Перечисления.ПрограммыБанка.СбербанкОнлайн
				ИЛИ РеквизитыСоглашения.ПрограммаБанка = Перечисления.ПрограммыБанка.ОбменЧерезДопОбработку) Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиКриптографии  = ЭлектроннаяЦифроваяПодпись.ПолучитьПерсональныеНастройкиРаботыСЭЦПСервер();
	ПровайдерЭЦП           = НастройкиКриптографии.ПровайдерЭЦП;
	ПутьМодуляКриптографии = НастройкиКриптографии.ПутьМодуляКриптографии;
	ТипПровайдераЭЦП       = НастройкиКриптографии.ТипПровайдераЭЦП;
	
	Попытка
		МенеджерКриптографии = Новый МенеджерКриптографии(ПровайдерЭЦП, ПутьМодуляКриптографии, ТипПровайдераЭЦП);
	Исключение
		Если ВыводитьСообщения Тогда
			ТекстСообщения = ПолучитьСообщениеОбОшибке("110");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
		Возврат;
	КонецПопытки;
	
	ДопИнформацияПоЭД = ЭлектронныеДокументыСлужебный.ПолучитьДанныеФайла(ЭД);
	ДвоичныеДанныеДокумента = ПолучитьИзВременногоХранилища(ДопИнформацияПоЭД.СсылкаНаДвоичныеДанныеФайла);
		
	ОбъектЭД = ЭД.ПолучитьОбъект();
	
	Для каждого СтрокаЭЦП из ОбъектЭД.ЭлектронныеЦифровыеПодписи Цикл
		Попытка
			ДвоичныеДанныеЭЦП = СтрокаЭЦП.Подпись.Получить();
			ЭлектронныеДокументыСлужебный.ПроверитьПодпись(МенеджерКриптографии, ДвоичныеДанныеДокумента, ДвоичныеДанныеЭЦП);
			
			СтрокаЭЦП.ДатаПроверкиПодписи = ТекущаяДатаСеанса();
			СтрокаЭЦП.ПодписьВерна = Истина;
			
			СтруктураСертификата = ЭлектронныеДокументыКлиентСервер.СтруктураДанныхСертификата(ДвоичныеДанныеДокумента,
				ДвоичныеДанныеЭЦП, МенеджерКриптографии);
			СтрокаЭЦП.КомуВыданСертификат = СтруктураСертификата.КомуВыданСертификат;
			СтрокаЭЦП.Отпечаток           = СтруктураСертификата.Отпечаток;
			СтрокаЭЦП.Сертификат          = Новый ХранилищеЗначения(СтруктураСертификата.ДвоичныеДанныеСертификата);
		Исключение
			СтрокаЭЦП.ДатаПроверкиПодписи = ТекущаяДатаСеанса();
			СтрокаЭЦП.ПодписьВерна = Ложь;
			
			ТекстСообщения = ПолучитьСообщениеОбОшибке("114");
			ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ВидОперации = НСтр("ru = 'проверка электронной подписи'");
			ОбработатьИсключениеПоЭДНаСервере(ВидОперации, ПодробноеПредставлениеОшибки, ТекстСообщения);
		КонецПопытки;
	КонецЦикла;
	
	ОбъектЭД.Записать();
	
КонецПроцедуры

// Перезаполняет документ информационной базы данными электронного документа.
//
// Параметры:
//  ДокументИБ - ДокументСсылка - ссылка на перезаполняемый документ информационной базы;
//  ЭД - ДокументСсылка.ЭлектронныйДокументВходящий, ДокументСсылка.ЭлектронныйДокументИсходящий - ссылка на электронный документ;
//  ОбъектМетаданных - Строка - возвращает название объекта метаданных перезаполняемого документа;
//  ДокументЗагружен - Булево - если Истина, то документ успешно перезаполнен;
//  СпособОбработки - Строка - способ обработки электронного документа.
//
Процедура ПерезаполнитьДокументыИБПоЭД(ДокументИБ, Знач ЭД, ОбъектМетаданных = Неопределено, ДокументЗагружен = Ложь, СпособОбработки = "") Экспорт
	
	// Для однократной сделки в электронном документе будет Структура.
	
	Если ТипЗнч(ЭД) = Тип("ДокументСсылка.ЭлектронныйДокументВходящий")
		Или ТипЗнч(ЭД) = Тип("ДокументСсылка.ЭлектронныйДокументИсходящий") Тогда
		Эд = ЭлектронныеДокументыСлужебный.ПрисоединенныйФайл(ЭД);
	КонецЕсли;
	
	Если ЭлектронныеДокументыСлужебный.ЭтоОтветныйТитул(ЭД.ТипЭлементаВерсииЭД) Тогда
		
		ЭД = ЭД.ЭлектронныйДокументВладелец;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СпособОбработки) Тогда
		ВладелецЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Эд, "ВладелецФайла");
		СвойстваВладельцаЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВладелецЭД,
			"НастройкаЭДО, ВидЭД, ТипЭлементаВерсииЭД");
		
		СпособОбработки = ЭлектронныеДокументыСлужебный.СпособОбработкиВходящегоДокумента(
			СвойстваВладельцаЭД.НастройкаЭДО, СвойстваВладельцаЭД.ВидЭД, СвойстваВладельцаЭД.ТипЭлементаВерсииЭД);
	КонецЕсли;
	
	ЗаполнитьДокументИБПоЭД(ДокументИБ, ЭД, ДокументЗагружен, СпособОбработки);
	
	ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипЗнч(ДокументИБ)).ПолноеИмя();
	
КонецПроцедуры

// Возвращает двоичные данные электронного документа
//
// Параметры: 
// ЭД - СправочникСсылка.ЭДПрисоединенныеФайлы, ссылка на электронный документ.
// СертификатПодписи  - ссылка - ссылка на элемент справочника Сертификаты ЭП.
//
Функция ПолучитьДвоичныеДанныеФайла(СсылкаНаЭД, СертификатПодписи) Экспорт
	
	ДвоичныеДанныеЭД = ПрисоединенныеФайлы.ПолучитьДвоичныеДанныеФайла(СсылкаНаЭД);
	
	Если ЗначениеЗаполнено(СертификатПодписи) Тогда
		
		ПараметрыЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаЭД, "ВидЭД, Организация, НаправлениеЭД, Расширение, ТипЭлементаВерсииЭД");
		Если ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.АктИсполнитель
			ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.АктЗаказчик
			ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец
			ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель
			ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.СчетФактура
			ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура
			ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель
			ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель
			ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ИзвещениеОПолучении
			ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.УведомлениеОбУточнении
			ИЛИ (ПараметрыЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий
				И (ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ПредложениеОбАннулировании
					ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.КаталогТоваров
					ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ПрайсЛист
					ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ЗаказТовара
					ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ОтветНаЗаказ
					ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.СчетНаОплату
					ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ОтчетОПродажахКомиссионногоТовара
					ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ОтчетОСписанииКомиссионногоТовара
					ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.АктНаПередачуПрав
					ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.АктОРасхождениях)) Тогда
			
			Если Найти(ПараметрыЭД.Расширение, "xml") > 0 Тогда
				
				ИмяФайла = ПолучитьИмяВременногоФайла(ПараметрыЭД.Расширение);
				ДвоичныеДанныеЭД.Записать(ИмяФайла);
				
			ИначеЕсли Найти(ПараметрыЭД.Расширение, "zip") > 0 Тогда
				
				ИмяАрхива = ПолучитьИмяВременногоФайла("zip");
				ДвоичныеДанныеЭД.Записать(ИмяАрхива);
				
				ПапкаДляРаспаковки = ЭлектронныеДокументыСлужебный.РабочийКаталог("signature", СсылкаНаЭД.УникальныйИдентификатор());
				
				Попытка
					ЗИПЧтение = Новый ЧтениеZipФайла(ИмяАрхива);
					ЗипЧтение.ИзвлечьВсе(ПапкаДляРаспаковки);
				Исключение
					
					ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
					
					Если ЗИПЧтение = Неопределено Тогда
						ТекстСообщения = НСтр("ru = 'Невозможно прочитать архив'");
					Иначе
						Если Не ЭлектронныеДокументыСлужебный.ВозможноИзвлечьФайлы(ЗипЧтение, ПапкаДляРаспаковки) Тогда
							ТекстСообщения = ПолучитьСообщениеОбОшибке("006");
						КонецЕсли;
						ЗИПЧтение.Закрыть();
					КонецЕсли;
					
					ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(
						НСтр("ru = 'Извлечение ЭД CML из архива при подписи'"), ТекстОшибки, ТекстСообщения);
					
				КонецПопытки;
				
				
				ФайлыЭД = НайтиФайлы(ПапкаДляРаспаковки, "*.xml");
				Если ФайлыЭД.Количество() > 0 Тогда
					ИмяФайла = ФайлыЭД[0].ПолноеИмя;
				КонецЕсли;
				
				УдалитьФайлы(ИмяАрхива);
			КонецЕсли;
			
			// Прочитаем файл для последующего редактирования.
			ОписаниеОшибки = "";
			ДанныеФайлаЭД = ЭлектронныеДокументыВнутренний.ДанныеФайлаЭД(ИмяФайла, ОписаниеОшибки);
			Если Не ПустаяСтрока(ОписаниеОшибки) Тогда
				ВызватьИсключение ОписаниеОшибки;
			КонецЕсли;
			
			// Заполним тег Подписант в ЭД.
			ПространствоИменСхемы = ДанныеФайлаЭД.Тип().URIПространстваИмен;
			ЗаполнитьДанныеПодписантаЭД(ДанныеФайлаЭД, ПространствоИменСхемы, ПараметрыЭД, СертификатПодписи);
			
			ДанныеФайлаЭД.Проверить();
			
			// Записываем ЭД в файл и удаляем пространство имен только у ФНС документов.
			Если ДанныеФайлаЭД.Свойства().Получить("ИдФайл") <> Неопределено Тогда
				
				ЭлектронныеДокументыВнутренний.ВыгрузитьЭДвФайл(ДанныеФайлаЭД, ИмяФайла, Ложь);
				ЭлектронныеДокументыВнутренний.УдалитьПространствоИмен(ИмяФайла, ПространствоИменСхемы);
			Иначе
				ЭлектронныеДокументыВнутренний.ВыгрузитьЭДвФайл(ДанныеФайлаЭД, ИмяФайла);
			КонецЕсли;
			
			Если Найти(ПараметрыЭД.Расширение, "zip") > 0 Тогда
				ИмяФайла = ПолучитьИмяВременногоФайла("zip");
				ЗипКонтейнер = Новый ЗаписьZipФайла(ИмяФайла);
				
				ФайлыАрхива = НайтиФайлы(ПапкаДляРаспаковки, "*");
				Для Каждого Файл Из ФайлыАрхива Цикл
					ЗипКонтейнер.Добавить(Файл.ПолноеИмя);
				КонецЦикла;
				
				Попытка
					ЗипКонтейнер.Записать();
				Исключение
					ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
					ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'Формирование архива ЭД при подписи'"),
					ТекстОшибки, ТекстСообщения);
				КонецПопытки;
				УдалитьФайлы(ПапкаДляРаспаковки);
			КонецЕсли;
			
			ДвоичныеДанныеЭД = Новый ДвоичныеДанные(ИмяФайла);
			
			ИнформацияОФайле = Новый Структура;
			ИнформацияОФайле.Вставить("АдресФайлаВоВременномХранилище", ПоместитьВоВременноеХранилище(ДвоичныеДанныеЭД));
			ИнформацияОФайле.Вставить("АдресВременногоХранилищаТекста", "");
			ПрисоединенныеФайлы.ОбновитьПрисоединенныйФайл(СсылкаНаЭД, ИнформацияОФайле);
				УдалитьФайлы(ИмяФайла);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ДвоичныеДанныеЭД;
	
	
КонецФункции

// Выполняет последовательность действий для электронных документов.
//
// Параметры:
//  МассивСсылокНаОбъект - Массив ссылок на электронные документы, для которых надо определить последовательность действий,
//  КлиентскиеНастройкиКриптографии - Массив доступных сертификатов
//  Действия - Строковое представление необходимых действий,
//  ДопПараметры - Структура, дополнительные параметры, определяющие последовательность действий с электронными документами.
//  ЭД - СправочникСсылка.ЭДПрисоединенныеФайлы, ссылка на элемент справочника ЭДПрисоединенныеФайлы
//  СоотвСертификатовИПаролей - соответствие - ключ - СертификатЭП, значение - пароль к сертификату;
//
// Возвращаемое значение:
//  Структура.
//
Функция ВыполнитьДействияПоЭД(Знач МассивСсылокНаОбъект,
							  Знач МассивСтруктурСертификатов,
							  Знач Действия,
							  ДопПараметры = "",
							  Знач ЭД = Неопределено,
							  Знач СоотвСертификатовИПаролей,
							  Знач ОбработкаСлужебныхЭД = Ложь) Экспорт
	
	Если НЕ ЕстьПравоОбработкиЭД(Истина) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если НЕ ПолучитьЗначениеФункциональнойОпции("ИспользоватьОбменЭД") Тогда
		ТекстСообщения = ТекстСообщенияОНеобходимостиНастройкиСистемы("РаботаСЭД");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат Неопределено;
	КонецЕсли;
	
	ВыполнятьАвторизациюНаСервере = ВыполнятьАвторизациюНаСервере();
	ВыполнятьКриптооперацииНаСервере = ВыполнятьКриптооперацииНаСервере();
	ВыполнятьКриптооперацииНаСервере = ?(ОбработкаСлужебныхЭД,
		ВыполнятьАвторизациюНаСервере ИЛИ ВыполнятьКриптооперацииНаСервере, ВыполнятьКриптооперацииНаСервере);
	НемедленнаяОтправкаЭД = ЭлектронныеДокументыСлужебный.НемедленнаяОтправкаЭД();
	
	Если ЭлектронныеДокументыКлиентСервер.ЕстьДействие(Действия, "Подписать")
		ИЛИ ЭлектронныеДокументыКлиентСервер.ЕстьДействие(Действия, "Отправить") Тогда
		МассивСтруктурСертификатовКлиента = Новый Массив;
		Для Каждого ЭлементСтруктуры Из МассивСтруктурСертификатов Цикл
			МассивСтруктурСертификатовКлиента.Добавить(ЭлементСтруктуры);
		КонецЦикла;
		
		Если ВыполнятьКриптооперацииНаСервере Тогда
			Попытка
				МассивСтруктурСертификатов = ПолучитьМассивСтруктурСертификатов(Истина);
			Исключение
				МассивСтруктурСертификатов = Новый Массив;
				ДопПараметры.Вставить("ОшибкаНастройкиКриптографии", Истина);
			КонецПопытки;
		КонецЕсли;
		
		Попытка
			КлиентскиеНастройкиКриптографии = ЭлектронныеДокументыСлужебный.МассивСтруктурДоступныхДляПодписиСертификатов(
																							МассивСтруктурСертификатов);
			МассивОтпечатков = ЭлектронныеДокументыСлужебный.ВернутьМассивОтпечатковСтруктуры(КлиентскиеНастройкиКриптографии);
		Исключение
			КлиентскиеНастройкиКриптографии = Новый Массив;
			МассивОтпечатков = Новый Массив;
		КонецПопытки;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТипЗнч(ЭД) <> Тип("Массив")
		И НЕ (ЗначениеЗаполнено(ЭД) И (ЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий
										ИЛИ ЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель
										ИЛИ ЭД.ВидЭД = Перечисления.ВидыЭД.АктЗаказчик
										ИЛИ ЭД.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель
										ИЛИ ЭтоСлужебныйДокумент(ЭД))) Тогда
		ЭлектронныеДокументыПереопределяемый.ПроверитьГотовностьИсточников(МассивСсылокНаОбъект);
	КонецЕсли;
	
	Если ТипЗнч(ЭД) <> Тип("Массив")
		И МассивСсылокНаОбъект.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СтруктураВозврата = Новый Структура;
	// Ключи структуры возврата:
	// ВыполнятьАвторизациюНаСервере, ВыполнятьКриптооперацииНаСервере, НемедленнаяОтправкаЭД - тип Булево;
	// КоличествоНовыхЭД, КоличествоУтвержденныхЭД, КолПодписанных, КолПодготовленных, КолОтправленных - тип Число;
	// МассивНовыхЭД - тип Массив;
	// СоотвСертификатовИМассивовЭДКПодписи - тип Соответствие (ключ - СертификатЭЦП, значение - МассивЭД к подписи на клиенте)
	// СтруктураКОтправке - тип Структура с ключами:
	//                   БезПодписи, СПодписью - тип Массив, МассивЭД (к подготовке) к отправке, соответственно не подписываемые и подписываемые;
	//                   САвторизацией - тип Соответствие (ключ - СоглашениеЭД, значение - МассивЭД к отправке).
	// СообщенияПользователю - тип Массив, содержит элементы типа СообщениеПользователю. Используется для вывода сообщений после выполнения всех операций 
	//
	СтруктураВозврата.Вставить("ВыполнятьАвторизациюНаСервере", ВыполнятьАвторизациюНаСервере);
	СтруктураВозврата.Вставить("ВыполнятьКриптооперацииНаСервере", ВыполнятьКриптооперацииНаСервере);
	СтруктураВозврата.Вставить("НемедленнаяОтправкаЭД", НемедленнаяОтправкаЭД);
	СтруктураВозврата.Вставить("СообщенияПользователю", Новый Массив);
	
	МассивНеобрабатываемыхОбъектов = Новый Массив;
	
	// Формирование ЭД:
	
	КолНовыхЭД = 0;
	Если ЭД = Неопределено И ЭлектронныеДокументыКлиентСервер.ЕстьДействие(Действия, "Сформировать") Тогда
		Если Действия = "Сформировать" ИЛИ Действия = "СформироватьПоказать" Тогда
			УдалитьНедоступныеДляФормированияЭДОбъекты(МассивСсылокНаОбъект);
		КонецЕсли;
		
		НастройкиОбъектов = Новый Соответствие;
		Для Сч = -МассивСсылокНаОбъект.Количество() + 1 По 0 Цикл
			СсылкаНаОбъект = МассивСсылокНаОбъект[-Сч];
			
			// Для случая определения вида ЭД пользователем
			ВидЭД = "";
			Если ЗначениеЗаполнено(ДопПараметры) Тогда
				ДопПараметры.Свойство("ВидЭД", ВидЭД);
			КонецЕсли;
			
			НастройкиОбмена = ЭлектронныеДокументыСлужебный.ОпределитьНастройкиОбменаЭДПоИсточнику(СсылкаНаОбъект,
																								   ,
																								   ,
																								   ,
																								   ВидЭД);
			// Проверим, что в полученных настройках используются действующие форматы
			ЭлектронныеДокументыСлужебный.АктуализироватьФорматыЭДВНастройкахОбмена(НастройкиОбмена, 
				СтруктураВозврата.СообщенияПользователю);
				
			Если НЕ ЗначениеЗаполнено(НастройкиОбмена) Тогда
				МассивСсылокНаОбъект.Удалить(-Сч);
			Иначе
				НастройкиОбъектов.Вставить(СсылкаНаОбъект, НастройкиОбмена);
			КонецЕсли;
		КонецЦикла;
		
		// Если нет настроек, то выходим.
		Если НЕ МассивСсылокНаОбъект.Количество() Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		// Если документы не подлежат обмену, то выходим.
		Если НЕ МассивСсылокНаОбъект.Количество() Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Запрос = Новый Запрос;
		ТекстЗапросаСоздатьЭД =
		"ВЫБРАТЬ
		|	МассивСсылок.ОбъектСсылка
		|ПОМЕСТИТЬ МассивСсылок
		|ИЗ
		|	&МассивСсылок КАК МассивСсылок
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МассивСсылок.ОбъектСсылка КАК ВладелецЭД
		|ИЗ
		|	МассивСсылок КАК МассивСсылок
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияЭД КАК СостоянияЭД
		|		ПО МассивСсылок.ОбъектСсылка = СостоянияЭД.СсылкаНаОбъект";
		
		Если Действия = "СформироватьУтвердитьПодписатьОтправить" Тогда
			ОпределитьНеобрабатываемыеОбъекты(НастройкиОбъектов, МассивНеобрабатываемыхОбъектов);
			ТекстЗапросаСоздатьЭД = ТекстЗапросаСоздатьЭД + " ГДЕ
			|(СостоянияЭД.СсылкаНаОбъект ЕСТЬ NULL 
			|ИЛИ СостоянияЭД.СостояниеВерсииЭД = ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.НеСформирован))
			|ИЛИ (СостоянияЭД.ЭлектронныйДокумент.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.ПлатежноеПоручение)
			|		И (СостоянияЭД.СостояниеВерсииЭД = ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.Отклонен)
			|			ИЛИ СостоянияЭД.СостояниеВерсииЭД = ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.ОшибкаПередачи)))";
		Иначе
			ИмяСчетаФактурыВыданного = ЭлектронныеДокументыПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении(
				"СчетФактураВыданныйВМетаданных");
			Если ИмяСчетаФактурыВыданного <> Неопределено Тогда
				
				ТекстЗапросаСоздатьЭД = ТекстЗапросаСоздатьЭД + " ГДЕ (ВЫБОР
				|КОГДА МассивСсылок.ОбъектСсылка ССЫЛКА Документ." + ИмяСчетаФактурыВыданного + "
				|	ТОГДА СостоянияЭД.СсылкаНаОбъект ЕСТЬ NULL 
				|		ИЛИ СостоянияЭД.ЭлектронныйДокумент.СтатусЭД = ЗНАЧЕНИЕ(Перечисление.СтатусыЭД.Отклонен)
				|		ИЛИ СостоянияЭД.ЭлектронныйДокумент.СтатусЭД = ЗНАЧЕНИЕ(Перечисление.СтатусыЭД.ОтклоненПолучателем)
				|		ИЛИ СостоянияЭД.СостояниеВерсииЭД = ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.НеСформирован)
				|	ИНАЧЕ ИСТИНА
				|КОНЕЦ)";
			КонецЕсли;
		КонецЕсли;
		Запрос.Текст = ТекстЗапросаСоздатьЭД;
		Измерение = Метаданные.РегистрыСведений.СостоянияЭД.Измерения.Найти("СсылкаНаОбъект");
		ТЗ_Ссылки = Новый ТаблицаЗначений;
		КолонкаТЗ = ТЗ_Ссылки.Колонки.Добавить("ОбъектСсылка", Измерение.Тип);
		Для Каждого Элемент Из МассивСсылокНаОбъект Цикл
			Строка = ТЗ_Ссылки.Добавить();
			Строка.ОбъектСсылка = Элемент;
		КонецЦикла;
		Запрос.УстановитьПараметр("МассивСсылок", ТЗ_Ссылки);
		ТЗ_ЭД = Запрос.Выполнить().Выгрузить();
		
		// Счета фактуры из ТЗ_ЭД переместим в новую таблицу значений
		// чтобы при формировании с.ф. были ссылки на ЭД документа основания
		ТЗ_ЭД_СФ = Новый ТаблицаЗначений;
		ИмяСчетаФактурыВыданного = ЭлектронныеДокументыПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении(
			"СчетФактураВыданныйВМетаданных");
		Если ИмяСчетаФактурыВыданного <> Неопределено Тогда
			
			ТЗ_ЭД_СФ = ТЗ_ЭД.СкопироватьКолонки();
			н = 0;
			Пока н < ТЗ_ЭД.Количество() Цикл
				
				СтрокаТЗ = ТЗ_ЭД[н];
				Если ТипЗнч(СтрокаТЗ.ВладелецЭД) = Тип("ДокументСсылка." + ИмяСчетаФактурыВыданного) Тогда
					НоваяСтрока = ТЗ_ЭД_СФ.Добавить();
					НоваяСтрока.ВладелецЭД = СтрокаТЗ.ВладелецЭД;
					
					ТЗ_ЭД.Удалить(СтрокаТЗ);
				Иначе 
					н = н +1;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		МассивНовыхЭД = Новый Массив;
		
		Если ТЗ_ЭД.Количество() > 0 Тогда
			МассивНовыхЭД = ЭлектронныеДокументыСлужебный.СформироватьПрисоединенныеФайлы(ТЗ_ЭД.ВыгрузитьКолонку("ВладелецЭД"),
																						  НастройкиОбъектов,
																						  ДопПараметры);
			КолНовыхЭД = МассивНовыхЭД.Количество();
		КонецЕсли;
		
		// Исключение обработанных счетов-фактур при формировании УПД статус 1 (СЧФДОП).
		МассивОбработанныхСФ = Неопределено;
		Если КолНовыхЭД > 0 И ДопПараметры.Свойство("МассивОбработанныхСФ", МассивОбработанныхСФ)
			И ЗначениеЗаполнено(МассивОбработанныхСФ) Тогда
			Счетчик = ТЗ_ЭД_СФ.Количество() - 1;
			Пока Счетчик > -1 Цикл
				СтрокаТаблицы = ТЗ_ЭД_СФ[Счетчик];
				Если МассивОбработанныхСФ.Найти(СтрокаТаблицы.ВладелецЭД) <> Неопределено Тогда
					ТЗ_ЭД_СФ.Удалить(СтрокаТаблицы);
				КонецЕсли;
				Счетчик = Счетчик -1;
			КонецЦикла;
		КонецЕсли;
		
		// Если с.ф. формировались отдельно, занесем их в общий массив ЭД
		// для дальнейшей обработки.
		Если ТЗ_ЭД_СФ.Количество() > 0 Тогда
			МассивНовыхСФ = ЭлектронныеДокументыСлужебный.СформироватьПрисоединенныеФайлы(ТЗ_ЭД_СФ.ВыгрузитьКолонку("ВладелецЭД"),
																						  НастройкиОбъектов,
																						  ДопПараметры);
			КолНовыхСФ = МассивНовыхСФ.Количество();
			
			КолНовыхЭД = КолНовыхЭД + КолНовыхСФ;
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивНовыхЭД, МассивНовыхСФ);
		КонецЕсли;
		
		СтруктураВозврата.Вставить("КоличествоНовыхЭД", КолНовыхЭД);
		Если Действия = "Сформировать" ИЛИ Действия = "СформироватьПоказать" Тогда
			СтруктураВозврата.Вставить("МассивНовыхЭД", МассивНовыхЭД);
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(ЭД) <> Тип("Массив")
		И МассивСсылокНаОбъект.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	// Формирование временных таблиц - обрабатываемых ЭД, сформированные ВТ используются далее на всех этапах:
	МассивСсылокЭД = Новый Массив;
	Если ЗначениеЗаполнено(ЭД) Тогда
		ТекстОсновногоЗапроса =
			"ВЫБРАТЬ
			|	ЭДПрисоединенныеФайлы.Ссылка,
			|	ЭДПрисоединенныеФайлы.ВидЭД,
			|	ЭДПрисоединенныеФайлы.ТипЭлементаВерсииЭД,
			|	ЭДПрисоединенныеФайлы.ВладелецФайла,
			|	ЭДПрисоединенныеФайлы.Контрагент,
			|	ЭДПрисоединенныеФайлы.НаправлениеЭД,
			|	ЭДПрисоединенныеФайлы.Организация,
			|	ЭДПрисоединенныеФайлы.ПрофильНастроекЭДО,
			|	ЭДПрисоединенныеФайлы.СоглашениеЭД,
			|	ЭДПрисоединенныеФайлы.ЭлектронныйДокументВладелец,
			|	ЭДПрисоединенныеФайлы.ПодписанЭЦП,
			|	ЭДПрисоединенныеФайлы.СтатусЭД
			|ПОМЕСТИТЬ ВТ_ЭД
			|ИЗ
			|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
			|ГДЕ
			|	ЭДПрисоединенныеФайлы.Ссылка В(&МассивСсылокЭД)
			|";
		Если ТипЗнч(ЭД) <> Тип("Массив") Тогда
			МассивСсылокЭД.Добавить(ЭД);
		Иначе
			МассивСсылокЭД = ЭД;
		КонецЕсли;
		
		Запрос.УстановитьПараметр("МассивСсылокЭД", МассивСсылокЭД);
	Иначе
		ТекстОсновногоЗапроса =
			"ВЫБРАТЬ
			|	ЭДПрисоединенныеФайлы.Ссылка,
			|	ЭДПрисоединенныеФайлы.ВидЭД,
			|	ЭДПрисоединенныеФайлы.ТипЭлементаВерсииЭД,
			|	ЭДПрисоединенныеФайлы.ВладелецФайла,
			|	ЭДПрисоединенныеФайлы.Контрагент,
			|	ЭДПрисоединенныеФайлы.НаправлениеЭД,
			|	ЭДПрисоединенныеФайлы.Организация,
			|	ЭДПрисоединенныеФайлы.ПрофильНастроекЭДО,
			|	ЭДПрисоединенныеФайлы.СоглашениеЭД,
			|	ЭДПрисоединенныеФайлы.ЭлектронныйДокументВладелец,
			|	ЭДПрисоединенныеФайлы.ПодписанЭЦП,
			|	ЭДПрисоединенныеФайлы.СтатусЭД
			|ПОМЕСТИТЬ ВТ_ЭД
			|ИЗ
			|	РегистрСведений.СостоянияЭД КАК СостоянияЭД
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
			|		ПО СостоянияЭД.ЭлектронныйДокумент = ЭДПрисоединенныеФайлы.ВладелецФайла
			|			И СостоянияЭД.ЭлектронныйДокумент <> Неопределено
			|ГДЕ
			|	СостоянияЭД.СсылкаНаОбъект В(&МассивСсылок)
			|	И СостоянияЭД.СостояниеВерсииЭД <> ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.ЗакрытПринудительно)
			|";
		Если МассивНеобрабатываемыхОбъектов.Количество() > 0 Тогда
			ДопУсловие = " И НЕ(ЭДПрисоединенныеФайлы.Ссылка В (&МассивНеобрабатываемыхОбъектов))";
			Запрос.УстановитьПараметр("МассивНеобрабатываемыхОбъектов", МассивНеобрабатываемыхОбъектов);
			ТекстОсновногоЗапроса = ТекстОсновногоЗапроса + ДопУсловие;
		КонецЕсли;
		Запрос.УстановитьПараметр("МассивСсылок", МассивСсылокНаОбъект);
	КонецЕсли;
	
	// Утверждение ЭД:
	
	КолУтвержденныхЭД = 0;
	
	// В этом массиве будут находиться вторичные титулы документов, сформированные после утверждения первичных титулов.
	МассивНовыхЭД = Новый Массив;

	Если ЭлектронныеДокументыКлиентСервер.ЕстьДействие(Действия, "Утвердить") Тогда
		ТекстЗапроса =
			"
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВТ_ЭД.ВладелецФайла КАК ВладелецЭД,
			|	ВТ_ЭД.Ссылка КАК СсылкаНаЭД,
			|	ВТ_ЭД.СтатусЭД,
			|	ВТ_ЭД.ВидЭД,
			|	ВТ_ЭД.СоглашениеЭД КАК СоглашениеЭД
			|ИЗ
			|	ВТ_ЭД КАК ВТ_ЭД
			|ГДЕ
			|	ВТ_ЭД.СтатусЭД В(&МассивСтатусов)";
		МассивСтатусов = Новый Массив;
		МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Сформирован);
		МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Утвержден);
		МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Получен);
		МассивСтатусов.Добавить(Перечисления.СтатусыЭД.ЧастичноПодписан);
		Запрос.УстановитьПараметр("МассивСтатусов", МассивСтатусов);
		Запрос.Текст = ТекстОсновногоЗапроса + ";" + ТекстЗапроса;
		ТЗ_ЭД = Запрос.Выполнить().Выгрузить();
		КолУтвержденныхРанее = 0;
		НовыйЭД = Неопределено;
		
		УтвержденныеСФ = Новый Массив;
		ДокументыРеализации = Новый Массив;
		ДокументыОтклонения = Новый Массив;
		ИсправляемыеДокументы = Новый Массив;
		ИсправляемыеВидыЭД = Новый Массив;
		ИсправляемыеВидыЭД.Добавить(Перечисления.ВидыЭД.АктОРасхождениях);
		
		Для Каждого ТекСтрока Из ТЗ_ЭД Цикл
			НовыйЭД = Неопределено;
			СсылкаНаЭД = ТекСтрока.СсылкаНаЭД;
			
			Если ТекСтрока.СтатусЭД = Перечисления.СтатусыЭД.Сформирован ИЛИ ТекСтрока.СтатусЭД = Перечисления.СтатусыЭД.Получен Тогда
				НачатьТранзакцию();
				УстановитьПризнакУтвержден(СсылкаНаЭД, НовыйЭД);
				Если ТранзакцияАктивна() Тогда
					
					Если ЗначениеЗаполнено(НовыйЭД) Тогда
						МассивНовыхЭД.Добавить(НовыйЭД);
					КонецЕсли;
					
					ТекСтрока.СтатусЭД = СсылкаНаЭД.СтатусЭД;
					КолУтвержденныхЭД = КолУтвержденныхЭД + 1;
					ЗафиксироватьТранзакцию();
				КонецЕсли;
				
				СвойстваЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаЭД, "ВидЭД, НаправлениеЭД");
				
				Если СвойстваЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий
					И (СвойстваЭД.ВидЭД = Перечисления.ВидыЭД.СчетФактура
						ИЛИ ТекСтрока.ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура) Тогда
					УтвержденныеСФ.Добавить(СсылкаНаЭД);
					
				Иначе
					
					// Для исходящих ЭД изменим состояние документов основания
					Если ЭтоДокументРеализации(СвойстваЭД) Тогда
						ДокументыРеализации.Добавить(ТекСтрока.ВладелецЭД);
					ИначеЕсли ИсправляемыеВидыЭД.Найти(ТекСтрока.ВидЭД) <> Неопределено Тогда
						ИсправляемыеДокументы.Добавить(СсылкаНаЭД);
					КонецЕсли;
					ДокументыОтклонения.Добавить(СсылкаНаЭД);
				КонецЕсли;
				
			Иначе
				КолУтвержденныхРанее = КолУтвержденныхРанее + 1;
				
			КонецЕсли;
			
			// В массив новых ЭД добавляем Ответный титул
			Если ЭлектронныеДокументыСлужебный.ЭтоТитулФНС(ТекСтрока.ВладелецЭД) Тогда
				ОтветныйТитул = ЭлектронныеДокументыСлужебный.ВторойТитулДокумента(СсылкаНаЭД);
				Если ЗначениеЗаполнено(ОтветныйТитул)
					И МассивНовыхЭД.Найти(ОтветныйТитул) = Неопределено Тогда
					МассивНовыхЭД.Добавить(ОтветныйТитул);
				КонецЕсли;
			КонецЕсли;
			
			// В массив новых ЭД добавляем служебные ЭД
			Если ЭтоСлужебныйДокумент(СсылкаНаЭД) Тогда
				МассивНовыхЭД.Добавить(СсылкаНаЭД);
			КонецЕсли;
			
		КонецЦикла;
		
		Если ЗначениеЗаполнено(МассивНовыхЭД) Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивСсылокЭД, МассивНовыхЭД, Истина);
		КонецЕсли;
		
		// Меняем состояние предыдущих входящих с.ф.
		Если УтвержденныеСФ.Количество() > 0 Тогда
			ЭлектронныеДокументыВнутренний.ИзменитьСостояниеСФОснований(УтвержденныеСФ, Перечисления.НаправленияЭД.Входящий);
		КонецЕсли;
		
		// Для документов вида РТУ меняем состояние их документов основания, если они есть
		Если ДокументыРеализации.Количество() > 0 Тогда
			ЭлектронныеДокументыВнутренний.ИзменитьСостояниеОснованийРТУ(ДокументыРеализации);
		КонецЕсли;
		
		Если ДокументыОтклонения.Количество() > 0 Тогда
			ЭлектронныеДокументыВнутренний.УстановитьСостояниеЗавершенПоОтклонению(ДокументыОтклонения);
		КонецЕсли;
		
		НаправлениеДокументов = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ИсправляемыеДокументы, "НаправлениеЭД");
		Для Каждого Документ Из ИсправляемыеДокументы Цикл
			Направление = НаправлениеДокументов[Документ];
			ЭлектронныеДокументыСлужебныйВызовСервера.УстановитьСостояниеЗавершен(Документ, Направление);
		КонецЦикла;
		
		СтруктураВозврата.Вставить("КоличествоУтвержденныхЭД", КолУтвержденныхЭД);
		
	КонецЕсли;
	
	// Входящие ЭД вида ТОРГ12Продавец и АктИсполнитель - никогда не подписываются и не отправляются,
	// исключим их из последующих выборок:
	ТекстОсновногоЗапроса = ТекстОсновногоЗапроса + "
		|И (Выбор Когда ЭДПрисоединенныеФайлы.НаправлениеЭД = &НаправлениеВходящийЭД
		|		И ЭДПрисоединенныеФайлы.ВидЭД В (&МассивИсключаемыхВидовЭД)
		|	Тогда Ложь
		|	Иначе Истина
		|	Конец)";
	МассивИсключаемыхВидовЭД = Новый Массив;
	МассивИсключаемыхВидовЭД.Добавить(Перечисления.ВидыЭД.ТОРГ12Продавец);
	МассивИсключаемыхВидовЭД.Добавить(Перечисления.ВидыЭД.АктИсполнитель);
	МассивИсключаемыхВидовЭД.Добавить(Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель);
	МассивИсключаемыхВидовЭД.Добавить(Перечисления.ВидыЭД.АктНаПередачуПрав);
	Запрос.УстановитьПараметр("НаправлениеВходящийЭД", Перечисления.НаправленияЭД.Входящий);
	Запрос.УстановитьПараметр("МассивИсключаемыхВидовЭД", МассивИсключаемыхВидовЭД);
	
	// Получим из входящих параметров СоотвСертификатовИИхСтруктур.
	СоотвСертификатовИИхСтруктур = Новый Соответствие;
	СтруктураВозврата.Вставить("СоотвСертификатовИИхСтруктур", СоотвСертификатовИИхСтруктур);
	Если ТипЗнч(СоотвСертификатовИПаролей) = Тип("ФиксированноеСоответствие") Тогда
		Для Каждого Элемент Из СоотвСертификатовИПаролей Цикл
			Структура = Новый Структура("ПарольПользователя, Парольполучен, ЗапомнитьПарольКСертификату",
				Элемент.Значение, Истина, Ложь);
			СоотвСертификатовИИхСтруктур.Вставить(Элемент.Ключ, Структура);
		КонецЦикла;
	КонецЕсли;
	
	// Это соответствие вернется на сторону клиента и на клиенте будет выполнена попытка получить пароли к сертификатам
	// и подписать массивы ЭД.
	СоотвСертификатовИМассивовЭД = Новый Соответствие;
	СтруктураВозврата.Вставить("СоотвСертификатовИМассивовЭД", СоотвСертификатовИМассивовЭД);
	
	СоотвСоглашенийИМассивовЭДКОтправке = Новый Соответствие;
	СоотвСоглашенийИМассивовЭДКОтправкеСАвторизацией = Новый Соответствие;
	СтруктураВозврата.Вставить("СоотвСоглашенийИМассивовЭДКОтправке", СоотвСоглашенийИМассивовЭДКОтправке);
	СтруктураВозврата.Вставить("СоотвСоглашенийИМассивовЭДКОтправкеСАвторизацией",
		СоотвСоглашенийИМассивовЭДКОтправкеСАвторизацией);
	
	// Подписание ЭД:
	
	// Каждый подписанный ЭД должен пройти процесс отправки, который состоит из подготовки к отправке (формирование ПЭД)
	// и непосредственно отправки ПЭД (если настроена НемедленнаяОтправка). Подготовка (отправка) подразделяется на
	// отправку не подписываемых ЭД, отправку подписываемых ЭД, отправку с авторизацией (на сервере ОЭДО).
	// В связи с вышеописанным, сформируем для передачи на клиента структуру с массивами ЭД к отправке:
	// Структура в первых 2-х элементах (БезПодписи, СПодписью) содержит массивы ЭД к отправке.
	// В 3-м элементе - соответствие: ключ - соглашение ЭД, значение - массив ЭД, отправляемый в рамках соглашения.
	// 3-й элемент заполняется только если в системе настроена немедленная отправка ЭД.
	СтруктураКОтправке = Новый Структура("БезПодписи, СПодписью, САвторизацией, САвторизациейЛогинПароль",
										Новый Массив, Новый Массив, Новый Соответствие, Новый Соответствие);
	ЭДИнтеркампани = Новый Массив; // документы интеркампани не нуждаются в отправке, их нужно исключить
	КолПодписанных = 0;
	Если ЭлектронныеДокументыКлиентСервер.ЕстьДействие(Действия, "Подписать") Тогда
		// Для подписания формируем выборку:
		// В виртуальную таблицу выбираем ЭД, которые НАДО и ЕСТЬ ВОЗМОЖНОСТЬ подписать, т.е. отвечающие следующим условиям:
		// - ЭД входит в список к обработке (либо передан как параметр "ЭД", либо получен из Регистра "СостоянияЭД" отобранного
		//     по массиву владельцев, параметр "МассивСсылокНаОбъект");
		// - статус ЭД либо "Утвержден", либо "Частично подписан";
		// - ЭД НАДО подписывать (определяется по соглашению, указанному в ЭД): либо способ обмена "Через ОЭДО", либо "Это
		//     интеркампани", либо если ЭД - входящий, то в соглашении, на вкладке "Входящие" отмечен для обмена вид ЭД,
		//     совпадающий с видом подписываемого ЭД и отмечена опция "Использовать ЭЦП", либо если ЭД - исходящий, то в
		//     соглашении, на вкладке "Исходящие" отмечен для обмена вид ЭД, совпадающий с видом подписываемого ЭД и отмечена
		//     опция "Использовать ЭЦП";
		// - существует сертификат для подписи ЭД:
		//     - Организация в сертификате совпадает с организацией в ЭД;
		//     - в сертификате отмечен вид ЭД, соответствующий виду подписываемого ЭД;
		//     - сертификат действует (не помечен на удаление, не отозван);
		//     - доступен для использования (не ограничен по пользователям, либо текущий пользователь совпадает с указанным в
		//         сертификате, а так же, отпечаток сертификата входит в массив отпечатков полученных из личного хранилища
		//         клиента либо сервера, в зависимости от настроек использования криптографии);
		//     - если способ обмена "Через ОЭДО", то сертификат должен быть зарегистрирован у ОЭДО (добавлен в таб.часть
		//         "СертификатыПодписейОрганизации" соглашения об обмене ЭД).
		//
		// Если все описанные условия выполняются, то ЭД попадает в виртуальную таблицу, туда же помещаются все необходимые для
		// подписания ЭД, данные: сертификат подписи, параметры сертификата, уже установленные в ЭД подписи, соглашение.
		// Затем из временной таблицы делается 3 выборки: ЭД на подпись, сертификаты для подписания ЭД, установленные подписи.
		// Из первой выборки берем подписываемый ЭД, из второй и третьей - выбираем сертификаты по условиям:
		// его отпечатка не должно быть среди уже установленных в ЭД подписей.
		
		
		// Основной запрос - выборка из временных таблиц:
		ТекстЗапроса =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	СертификатыЭЦП.Ссылка КАК СертификатПодписи,
			|	ВЫБОР
			|		КОГДА СертификатыЭЦП.ЗапомнитьПарольКСертификату
			|			ТОГДА СертификатыЭЦП.ПарольПользователя
			|		ИНАЧЕ НЕОПРЕДЕЛЕНО
			|	КОНЕЦ КАК ПарольПользователя,
			|	СертификатыЭЦП.ЗапомнитьПарольКСертификату,
			|	СертификатыЭЦП.ЗапомнитьПарольКСертификату КАК ПарольПолучен,
			|	СертификатыЭЦП.Отпечаток,
			|	СертификатыЭЦП.Отозван,
			|	СертификатыЭЦП.Организация КАК ОрганизацияВСертификате,
			|	СертификатыЭЦПВидыДок.ВидДокумента,
			|	СертификатыЭЦП.ПрограммаБанка,
			|	СертификатыЭЦП.Наименование
			|ПОМЕСТИТЬ ВТ_СертификатыБезОтбораПоВидуДокумента
			|ИЗ
			|	ВТ_ЭД КАК ВТ_ЭД
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СертификатыЭЦП КАК СертификатыЭЦП
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СертификатыЭЦП.ВидыДокументов КАК СертификатыЭЦПВидыДок
			|			ПО (СертификатыЭЦПВидыДок.Ссылка = СертификатыЭЦП.Ссылка)
			|		ПО (ВТ_ЭД.Организация = СертификатыЭЦП.Организация
			|				ИЛИ ВТ_ЭД.Контрагент = СертификатыЭЦП.Организация)
			|ГДЕ
			|	НЕ СертификатыЭЦП.Отозван
			|	И НЕ СертификатыЭЦП.ПометкаУдаления
			|	И (СертификатыЭЦП.СписокПользователей.Пользователь = &ТекущийПользователь
			|			ИЛИ НЕ СертификатыЭЦП.ОграничитьДоступКСертификату)
			|	И ВТ_ЭД.ВидЭД = СертификатыЭЦПВидыДок.ВидДокумента
			|	И (СертификатыЭЦП.Отпечаток В (&МассивОтпечатков)
			|			ИЛИ СертификатыЭЦП.ПрограммаБанка = ЗНАЧЕНИЕ(Перечисление.ПрограммыБанка.ОбменЧерезДопОбработку)
			|			ИЛИ СертификатыЭЦП.ПрограммаБанка = ЗНАЧЕНИЕ(Перечисление.ПрограммыБанка.СбербанкОнлайн))
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	СертификатПодписи,
			|	СертификатыЭЦПВидыДок.ВидДокумента,
			|	ОрганизацияВСертификате
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	СертификатыЭЦП.Ссылка КАК СертификатПодписи,
			|	ВЫБОР
			|		КОГДА СертификатыЭЦП.ЗапомнитьПарольКСертификату
			|			ТОГДА СертификатыЭЦП.ПарольПользователя
			|		ИНАЧЕ НЕОПРЕДЕЛЕНО
			|	КОНЕЦ КАК ПарольПользователя,
			|	СертификатыЭЦП.ЗапомнитьПарольКСертификату,
			|	СертификатыЭЦП.ЗапомнитьПарольКСертификату КАК ПарольПолучен,
			|	СертификатыЭЦП.Отпечаток,
			|	СертификатыЭЦП.Отозван,
			|	СертификатыЭЦП.Организация КАК ОрганизацияВСертификате,
			|	СертификатыЭЦПВидыДок.ВидДокумента,
			|	СертификатыЭЦП.ПрограммаБанка,
			|	СертификатыЭЦП.Наименование
			|ПОМЕСТИТЬ ВТ_Сертификаты
			|ИЗ
			|	ВТ_ЭД КАК ВТ_ЭД
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СертификатыЭЦП КАК СертификатыЭЦП
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СертификатыЭЦП.ВидыДокументов КАК СертификатыЭЦПВидыДок
			|			ПО (СертификатыЭЦПВидыДок.Ссылка = СертификатыЭЦП.Ссылка)
			|		ПО (ВТ_ЭД.Организация = СертификатыЭЦП.Организация
			|				ИЛИ ВТ_ЭД.Контрагент = СертификатыЭЦП.Организация)
			|ГДЕ
			|	НЕ СертификатыЭЦП.Отозван
			|	И НЕ СертификатыЭЦП.ПометкаУдаления
			|	И (СертификатыЭЦП.СписокПользователей.Пользователь = &ТекущийПользователь
			|			ИЛИ НЕ СертификатыЭЦП.ОграничитьДоступКСертификату)
			|	И ВТ_ЭД.ВидЭД = СертификатыЭЦПВидыДок.ВидДокумента
			|	И (СертификатыЭЦП.Отпечаток В (&МассивОтпечатков)
			|			ИЛИ СертификатыЭЦП.ПрограммаБанка = ЗНАЧЕНИЕ(Перечисление.ПрограммыБанка.ОбменЧерезДопОбработку)
			|			ИЛИ СертификатыЭЦП.ПрограммаБанка = ЗНАЧЕНИЕ(Перечисление.ПрограммыБанка.СбербанкОнлайн))
			|	И СертификатыЭЦПВидыДок.ИспользоватьДляПодписи
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	СертификатПодписи,
			|	СертификатыЭЦПВидыДок.ВидДокумента,
			|	ОрганизацияВСертификате
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ЭД_ЭЦП.Отпечаток КАК УстановленныеПодписи,
			|	ВТ_ЭД.Ссылка КАК СсылкаНаЭД,
			|	СоглашенияЭД.Ссылка КАК СоглашениеЭД,
			|	ЕСТЬNULL(ВТ_ЭД.ПрофильНастроекЭДО.СпособОбменаЭД, СоглашенияЭД.Ссылка.СпособОбменаЭД) КАК СпособОбменаЭД,
			|	ВТ_ЭД.ПрофильНастроекЭДО КАК ПрофильНастроекЭДО,
			|	ВТ_Сертификаты.СертификатПодписи КАК СертификатПодписи,
			|	ВТ_Сертификаты.ПарольПользователя,
			|	ВТ_Сертификаты.ЗапомнитьПарольКСертификату,
			|	ВТ_Сертификаты.ПарольПолучен,
			|	ВТ_Сертификаты.Отпечаток,
			|	ВТ_Сертификаты.Отозван,
			|	ВТ_ЭД.Организация,
			|	ВТ_ЭД.Контрагент,
			|	ВТ_Сертификаты.ОрганизацияВСертификате КАК ОрганизацияВСертификате,
			|	СоглашенияЭД.ЭтоИнтеркампани,
			|	ВЫБОР
			|		КОГДА ВТ_ЭД.ПрофильНастроекЭДО.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезОператораЭДОТакском)
			|				ИЛИ ВТ_ЭД.ПрофильНастроекЭДО.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезСервис1СЭДО)
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК ТребуетсяАвторизация,
			|	ВЫБОР
			|		КОГДА ВТ_ЭД.ТипЭлементаВерсииЭД В (&ТипыПервичныхЭД)
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЕСТЬNULL(ВТ_ЭД.ЭлектронныйДокументВладелец.ПодписанЭЦП, ЛОЖЬ)
			|	КОНЕЦ КАК ЭДВладелецПодписан,
			|	ВТ_Сертификаты.ПрограммаБанка,
			|	ВТ_Сертификаты.Наименование КАК НаименованиеСертификата,
			|	ВТ_ЭД.ВидЭД
			|ПОМЕСТИТЬ ВТ
			|ИЗ
			|	ВТ_Сертификаты КАК ВТ_Сертификаты
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ЭД КАК ВТ_ЭД
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СоглашенияОбИспользованииЭД КАК СоглашенияЭД
			|			ПО ВТ_ЭД.СоглашениеЭД = СоглашенияЭД.Ссылка
			|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияОбИспользованииЭД.ИсходящиеДокументы КАК СоглашенияЭДИсходящие
			|			ПО ВТ_ЭД.СоглашениеЭД = СоглашенияЭДИсходящие.Ссылка
			|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЭДПрисоединенныеФайлы.ЭлектронныеЦифровыеПодписи КАК ЭД_ЭЦП
			|			ПО ВТ_ЭД.Ссылка = ЭД_ЭЦП.Ссылка
			|		ПО (ВТ_ЭД.ВидЭД = ВТ_Сертификаты.ВидДокумента)
			|			И (ВТ_ЭД.Организация = ВТ_Сертификаты.ОрганизацияВСертификате
			|				ИЛИ ВТ_ЭД.Контрагент = ВТ_Сертификаты.ОрганизацияВСертификате)
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПрофилиНастроекЭДО.СертификатыПодписейОрганизации КАК ПрофилиНастроекЭДОСертификаты
			|		ПО ВТ_Сертификаты.СертификатПодписи = ПрофилиНастроекЭДОСертификаты.Сертификат
			|			И (ВТ_ЭД.ПрофильНастроекЭДО = ПрофилиНастроекЭДОСертификаты.Ссылка)
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияОбИспользованииЭД.СертификатыПодписейОрганизации КАК СоглашенияЭДСертификаты
			|		ПО ВТ_Сертификаты.СертификатПодписи = СоглашенияЭДСертификаты.Сертификат
			|			И (ВТ_ЭД.СоглашениеЭД = СоглашенияЭДСертификаты.Ссылка)
			|ГДЕ
			|	ВЫБОР
			|			КОГДА СоглашенияЭД.СпособОбменаЭД <> ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезВебРесурсБанка)
			|				ТОГДА НЕ ПрофилиНастроекЭДОСертификаты.Сертификат ЕСТЬ NULL
			|						ИЛИ СоглашенияЭД.ЭтоИнтеркампани
			|			КОГДА СоглашенияЭД.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезВебРесурсБанка)
			|				ТОГДА НЕ СоглашенияЭДСертификаты.Сертификат ЕСТЬ NULL
			|		КОНЕЦ
			|	И ВЫБОР
			|			КОГДА СоглашенияЭД.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезВебРесурсБанка)
			|				ТОГДА СоглашенияЭД.ИспользуетсяКриптография
			|			КОГДА СоглашенияЭД.ЭтоИнтеркампани
			|				ТОГДА ИСТИНА
			|			КОГДА ВТ_ЭД.НаправлениеЭД = &НаправлениеВходящий
			|				ТОГДА ВТ_ЭД.ПодписанЭЦП
			|			КОГДА ВТ_ЭД.НаправлениеЭД = &НаправлениеИсходящий
			|					И ВТ_ЭД.ТипЭлементаВерсииЭД В (&ТипыПервичныхЭД)
			|				ТОГДА СоглашенияЭДИсходящие.Формировать
			|						И СоглашенияЭДИсходящие.ИспользоватьЭЦП
			|						И &ИспользоватьЭЦП
			|			КОГДА НЕ ВТ_ЭД.ТипЭлементаВерсииЭД В (&ТипыПервичныхЭД)
			|				ТОГДА ВТ_ЭД.ВидЭД = ВТ_Сертификаты.ВидДокумента
			|			ИНАЧЕ ЛОЖЬ
			|		КОНЕЦ
			|	И НЕ СоглашенияЭД.ПометкаУдаления
			|	И ВЫБОР
			|			КОГДА СоглашенияЭД.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезВебРесурсБанка)
			|				ТОГДА СоглашенияЭД.СтатусСоглашения = &СтатусСоглашения
			|			КОГДА СоглашенияЭД.ЭтоИнтеркампани
			|				ТОГДА СоглашенияЭД.СтатусСоглашения = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийЭД.Действует)
			|			ИНАЧЕ СоглашенияЭД.СтатусПодключения = ЗНАЧЕНИЕ(Перечисление.СтатусыУчастниковОбменаЭД.Присоединен)
			|		КОНЕЦ
			|	И ВТ_ЭД.СтатусЭД В(&МассивСтатусов)
			|	И ВЫБОР
			|			КОГДА ВТ_ЭД.Ссылка.НаправлениеЭД = &НаправлениеВходящий
			|					И ВТ_ЭД.Ссылка.ВидЭД В (&ВидыЭДСчетаФактуры)
			|				ТОГДА ЛОЖЬ
			|			ИНАЧЕ ИСТИНА
			|		КОНЕЦ
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ВТ.СсылкаНаЭД,
			|	ВТ.СпособОбменаЭД,
			|	ВТ.Организация,
			|	ВТ.Контрагент,
			|	ВТ.ЭтоИнтеркампани,
			|	ВТ.ТребуетсяАвторизация,
			|	ВТ.СоглашениеЭД,
			|	ВТ.ПрофильНастроекЭДО,
			|	ВТ.ЭДВладелецПодписан,
			|	ВТ.ВидЭД
			|ИЗ
			|	ВТ КАК ВТ
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВТ.СсылкаНаЭД,
			|	ВТ.СертификатПодписи,
			|	ВТ.ПарольПолучен КАК ПарольПолучен,
			|	ВТ.ПарольПользователя,
			|	ВТ.ЗапомнитьПарольКСертификату,
			|	ВТ.Отпечаток,
			|	ВТ.Отозван,
			|	ВТ.ОрганизацияВСертификате КАК Организация,
			|	ВТ.СертификатПодписи.ФайлСертификата КАК ФайлСертификата,
			|	ВТ.ПрограммаБанка,
			|	ВТ.НаименованиеСертификата КАК НаименованиеСертификата
			|ИЗ
			|	ВТ КАК ВТ
			|
			|УПОРЯДОЧИТЬ ПО
			|	НаименованиеСертификата
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВТ.СсылкаНаЭД,
			|	ВТ.УстановленныеПодписи,
			|	СертификатыЭЦП.Организация
			|ИЗ
			|	ВТ КАК ВТ
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СертификатыЭЦП КАК СертификатыЭЦП
			|		ПО ВТ.УстановленныеПодписи = СертификатыЭЦП.Отпечаток
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ ВТ";
		
		МассивСтатусов = Новый Массив;
		МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Сформирован);
		МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Утвержден);
		МассивСтатусов.Добавить(Перечисления.СтатусыЭД.ЧастичноПодписан);
		ИспользоватьЭЦП = ПолучитьЗначениеФункциональнойОпции("ИспользоватьЭлектронныеЦифровыеПодписи");
		Запрос.УстановитьПараметр("МассивСтатусов",       МассивСтатусов);
		Запрос.УстановитьПараметр("СтатусСоглашения",     Перечисления.СтатусыСоглашенийЭД.Действует);
		Запрос.УстановитьПараметр("НаправлениеВходящий",  Перечисления.НаправленияЭД.Входящий);
		Запрос.УстановитьПараметр("НаправлениеИсходящий", Перечисления.НаправленияЭД.Исходящий);
		Запрос.УстановитьПараметр("МассивОтпечатков",     МассивОтпечатков);
		Запрос.УстановитьПараметр("ТекущийПользователь",  Пользователи.АвторизованныйПользователь());
		Запрос.УстановитьПараметр("ИспользоватьЭЦП",      ИспользоватьЭЦП);
		МассивВидовЭД = Новый Массив;
		МассивВидовЭД.Добавить(Перечисления.ВидыЭД.СчетФактура);
		МассивВидовЭД.Добавить(Перечисления.ВидыЭД.КорректировочныйСчетФактура);
		Запрос.УстановитьПараметр("ВидыЭДСчетаФактуры", МассивВидовЭД);
		
		ТипыПервичныхЭД = Новый Массив;
		ТипыПервичныхЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.СЧФДОПУПД);
		ТипыПервичныхЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.СЧФУПД);
		ТипыПервичныхЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ДОПУПД);
		ТипыПервичныхЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.КСЧФДИСУКД);
		ТипыПервичныхЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.КСЧФУКД);
		ТипыПервичныхЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ДИСУКД);
		ТипыПервичныхЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ДОП);
		ТипыПервичныхЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ПервичныйЭД);
		ТипыПервичныхЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ЭСФ);
		Запрос.УстановитьПараметр("ТипыПервичныхЭД", ТипыПервичныхЭД);
		
		Запрос.Текст = ТекстОсновногоЗапроса +
			";
			 |////////////////
			 |" + ТекстЗапроса;
		
		Результат = Запрос.ВыполнитьПакет();
		СертификатыБезОтбораПоВидуДокумента = Результат[1].Выгрузить();
		СертификатыCОтборомПоВидуДокумента = Результат[2].Выгрузить();
		ДоступныеСертификаты = Результат[3].Выгрузить();
		ТЗ_Сертификатов = Результат[5].Выгрузить();
		ТЗ_УстановленныхПодписей = Результат[6].Выгрузить();
		Выборка = Результат[4].Выбрать();
		ТЗ_ЭД = Новый ТаблицаЗначений;
		ТЗ_ЭД.Колонки.Добавить("СсылкаНаЭД");
		ТЗ_ЭД.Колонки.Добавить("ПрофильНастроекЭДО");
		ТЗ_ЭД.Колонки.Добавить("СертификатыПодписи");
		ТЗ_ЭД.Колонки.Добавить("ТребуетсяАвторизация");
		
		Если ТЗ_Сертификатов.Количество() = 0 И ЗначениеЗаполнено(ЭД) Тогда
			ОшибкаНастройкиКриптографии = Ложь;
			Если ДоступныеСертификаты[0].Количество > 0 Тогда
				ПрофильНастроекЭДО   = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭД,           "ПрофильНастроекЭДО");
				СпособОбменаЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПрофильНастроекЭДО, "СпособОбменаЭД");
				Если Не ЭтоПрямойОбмен(СпособОбменаЭД) Тогда
					ШаблонСообщения = Нстр("ru = 'В профиле настроек ЭДО: %1
						|не найден ни один из доступных сертификатов ЭП.'");
					ТекстСообщеня = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ПрофильНастроекЭДО);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				КонецЕсли;
			ИначеЕсли ДопПараметры.Свойство("ОшибкаНастройкиКриптографии", ОшибкаНастройкиКриптографии)
				И ОшибкаНастройкиКриптографии Тогда
				ТекстСообщения = Нстр("ru = 'Ошибка подписания электронного документа.
											|Проверьте настройки криптографии.'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Иначе

				Если СертификатыCОтборомПоВидуДокумента[0].Количество = 0
					И СертификатыБезОтбораПоВидуДокумента[0].Количество > 0 Тогда
					ТекстСообщения = Нстр("ru = 'Ошибка подписания электронного документа.
											|Отсутствует доступный сертификат для подписания документов,
											|т.к. для сертификата в списке ""Виды документов"" нет данного вида документа'");
				Иначе 
					ТекстСообщения = Нстр("ru = 'Ошибка подписания электронного документа.
											|Отсутствует доступный сертификат для подписания документов.
											|Возможные причины:
									 		|- Истек срок действия сертификата;
											|- Сертификат был отозван;
											|- К сертификату ограничен доступ;
											|- Сертификат установлен в системное хранилище, 
											|но не добавлен в профиль настроек ЭДО;
											|- Сертификат установлен в хранилище компьютера,
											|а не текущего пользователя;
											|- Не установлен корневой сертификат Удостоверяющего Центра;
											|- Не найден контейнер закрытого ключа.'");
				КонецЕсли;
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
		КонецЕсли;
		
		// Для связки ЭД, Соглашения и Сертификата, в числе прочих нужно соответствие,
		// ключом которого является ссылка на ЭД, значение - Соглашение об обмене.
		// Например, 2 ЭД могут быть подписаны 2-я сертификатами (т.е пользователь должен выбрать,
		// каким сертификатом он будет подписывать эти ЭД), при этом ЭД относятся к разным соглашениям
		// (например один - прямой обмен, другой - через оператора), если пользователь отказался подписывать
		// эти ЭД, то тот ЭД, который относится к соглашению через оператора, надо удалить из массива на отправку,
		// для этого найдем его соглашение в соответствии (ЭД - Соглашения), по соглашению найдем этот ЭД в
		// соответствии Соглашения - Массивы ЭД к отправке и удалим из массива нужный ЭД.
		СоотвЭДиСоглашений = Новый Соответствие;
		
		// Ключ - Строка (сумма УИД сертификатов: Строка(Сертификат1.УникальныйИдентификатор())
		// + Строка(Сертификат2.УникальныйИдентификатор()) + ...), Значение - Структура массивов (МассивСертификатов
		// и МассивЭД).
		// Смысл данной структуры в том, что для подписания разных ЭД возможно будет доступен одинаковый
		// набор сертификатов. Например: РТиУ может быть подписана сертификатами Сертификат1 и Сертификат2,
		// СФ так же может быть подписана сертификатами Сертификат1 и Сертификат2, при этом РТиУ сформировано
		// по соглашению1 (прямой обмен), а СФ - по соглашению2 (через ОЭДО). НЕ ПРАВИЛЬНО 2 раза спрашивать
		// пользователя, каким из 2-х сертификатов он хочет подписывать документы, поэтому, надо для этой пары
		// сертификатов сформировать массив ЭД, для подписания которых доступна именно эта пара сертификатов.
		// Чтобы сделать запись в структуре уникальной и иметь возможность искать нужную запись по ключу,
		// ключ сделан составным (в результатах запроса сертификаты упорядочены по наименованию).
		СтруктСтруктурМассивовЭДиСертификатов = Новый Структура;
		
		// Если в системе настроена немедленная отправка и есть действие "Отправить", то из подписываемых ЭД
		// надо выделить те, которые для отправки требуют авторизации (обмен через ОЭДО) и будут подписываться на клиенте.
		// Для этого ТЗ_ЭД обработаем в 2 прохода (1- ЭД требующие авторизации, 2- не требующие).
		ВыделятьЭДКОтправкеСАвторизацией = (ЭлектронныеДокументыКлиентСервер.ЕстьДействие(Действия, "Отправить")
											И НемедленнаяОтправкаЭД);
		Если Выборка.Количество() > 0 Тогда
			Пока Выборка.Следующий() Цикл
				СсылкаНаЭД = Выборка.СсылкаНаЭД;
				Отбор = Новый Структура("СсылкаНаЭД", СсылкаНаЭД);
				КопияТЗ = ТЗ_Сертификатов.Скопировать(Отбор);
				МассивОтпечатковИсключения = Новый Массив;
				МассивСертификатов = Новый Массив;
				Если Выборка.ЭтоИнтеркампани Тогда
					ЭДИнтеркампани.Добавить(СсылкаНаЭД);
					ТЗ_Отпечатков = ТЗ_УстановленныхПодписей.Скопировать(Отбор);
					Если ТЗ_Отпечатков.Количество() = 0 Тогда
						Если КопияТЗ.Количество() > 0 Тогда
							Для Каждого СтрокаСертификата Из КопияТЗ Цикл
								СтруктураСертификата = Новый Структура("СертификатПодписи, ПрограммаБанка,
									|ПарольПолучен, ПарольПользователя, Отпечаток, Отозван, ФайлСертификата, ЗапомнитьПарольКСертификату");
								ЗаполнитьЗначенияСвойств(СтруктураСертификата, СтрокаСертификата);
								МассивСертификатов.Добавить(СтрокаСертификата.СертификатПодписи);
								ПараметрыВСоотв = СоотвСертификатовИИхСтруктур.Получить(СтрокаСертификата.СертификатПодписи);
								Если ПараметрыВСоотв <> Неопределено Тогда
									Если ПараметрыВСоотв.ПарольПолучен Тогда
										ЗаполнитьЗначенияСвойств(СтруктураСертификата, ПараметрыВСоотв, "ПарольПолучен, ПарольПользователя");
									КонецЕсли;
								КонецЕсли;
								СоотвСертификатовИИхСтруктур.Вставить(СтрокаСертификата.СертификатПодписи, СтруктураСертификата);
							КонецЦикла;
							НоваяСтрока = ТЗ_ЭД.Добавить();
							НоваяСтрока.СсылкаНаЭД = СсылкаНаЭД;
							НоваяСтрока.ПрофильНастроекЭДО = Выборка.ПрофильНастроекЭДО;
							НоваяСтрока.СертификатыПодписи = МассивСертификатов;
							НоваяСтрока.ТребуетсяАвторизация = Выборка.ТребуетсяАвторизация;
							Организация2Стороны = ?(СтрокаСертификата.Организация = Выборка.Организация, Выборка.Контрагент, Выборка.Организация);
							Отбор.Вставить("Организация", Организация2Стороны);
							КопияТЗ = КопияТЗ.Скопировать(Отбор);
						КонецЕсли;
					Иначе
						МассивОтпечатковИсключения = ТЗ_Отпечатков.ВыгрузитьКолонку("УстановленныеПодписи");
						ТЗ_Отпечатков.Свернуть("Организация");
						СтрокаОтпечатка = ТЗ_Отпечатков[0];
						Если ЗначениеЗаполнено(СтрокаОтпечатка.Организация) Тогда
							Организация2Стороны = ?(СтрокаОтпечатка.Организация = Выборка.Организация, Выборка.Контрагент, Выборка.Организация);
							Отбор.Вставить("Организация", Организация2Стороны);
							КопияТЗ = КопияТЗ.Скопировать(Отбор);
						КонецЕсли;
					КонецЕсли;
				ИначеЕсли Выборка.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезВебРесурсБанка Тогда
					ТЗ_Отпечатков = ТЗ_УстановленныхПодписей.Скопировать(Отбор);
					Если ТЗ_Отпечатков.Количество() > 0 Тогда
						МассивОтпечатковИсключения = ТЗ_Отпечатков.ВыгрузитьКолонку("УстановленныеПодписи");
					КонецЕсли;
				КонецЕсли;
				ЭтоСлужебный = ЭтоСлужебныйДокумент(СсылкаНаЭД);
				ИДМассиваЭД = "й";
				Для Каждого СтрокаСертификата Из КопияТЗ Цикл
					Если МассивОтпечатковИсключения.Найти(СтрокаСертификата.Отпечаток) <> Неопределено
						ИЛИ МассивСертификатов.Найти(СтрокаСертификата.СертификатПодписи) <> Неопределено Тогда
						Продолжить;
					КонецЕсли;
					СтруктураСертификата = Новый Структура("СертификатПодписи, ПрограммаБанка,
						|ПарольПолучен, ПарольПользователя, Отпечаток, Отозван, ФайлСертификата, ЗапомнитьПарольКСертификату");
					ЗаполнитьЗначенияСвойств(СтруктураСертификата, СтрокаСертификата);
					МассивСертификатов.Добавить(СтрокаСертификата.СертификатПодписи);
					ПараметрыВСоотв = СоотвСертификатовИИхСтруктур.Получить(СтрокаСертификата.СертификатПодписи);
					ИДМассиваЭД = ИДМассиваЭД + Строка(СтрокаСертификата.СертификатПодписи.УникальныйИдентификатор());
					
					Если ПараметрыВСоотв <> Неопределено Тогда
						Если ПараметрыВСоотв.ПарольПолучен Тогда
							ЗаполнитьЗначенияСвойств(СтруктураСертификата, ПараметрыВСоотв, "ПарольПолучен, ПарольПользователя");
						КонецЕсли;
					КонецЕсли;
					СоотвСертификатовИИхСтруктур.Вставить(СтрокаСертификата.СертификатПодписи, СтруктураСертификата);
					// Если обрабатывается служебный документ, то его можно подписать любым сертификатом,
					// в котором сохранен пароль.
					Если ЭтоСлужебный И СтруктураСертификата.ПарольПолучен Тогда
						МассивСертификатов = Новый Массив;
						МассивСертификатов.Добавить(СтрокаСертификата.СертификатПодписи);
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Если МассивСертификатов.Количество() > 0 Тогда
					Подписан = 0;
					
					Если НЕ Выборка.ЭДВладелецПодписан Тогда
						Продолжить;
					КонецЕсли;
					
					Если (ВыполнятьКриптооперацииНаСервере
							ИЛИ Выборка.ВидЭД = Перечисления.ВидыЭД.ИзвещениеОПолучении И ВыполнятьАвторизациюНаСервере)
						И МассивСертификатов.Количество() = 1 И СтруктураСертификата.ПарольПолучен Тогда
						Подписан = ПодписатьЭДОпределеннымСертификатом(СсылкаНаЭД, МассивСертификатов[0], СтруктураСертификата);
						Если Подписан > 0 Тогда
							КолПодписанных = КолПодписанных + Подписан;
							// Если ЭД подписаны, то для определения сертификата авторизации и последующей отправки,
							// они будут получены запросом, на следующем этапе (Отправка ЭД).
							Продолжить;
						КонецЕсли;
					КонецЕсли;
					НоваяСтрока = ТЗ_ЭД.Добавить();
					НоваяСтрока.СсылкаНаЭД = СсылкаНаЭД;
					НоваяСтрока.ПрофильНастроекЭДО = Выборка.ПрофильНастроекЭДО;
					НоваяСтрока.СертификатыПодписи = МассивСертификатов;
					НоваяСтрока.ТребуетсяАвторизация = Выборка.ТребуетсяАвторизация;
					
					СоотвЭДиСоглашений.Вставить(СсылкаНаЭД, Выборка.ПрофильНастроекЭДО);
					СтруктураМассивов = "";
					ИДМассиваЭД = СтрЗаменить(ИДМассиваЭД, "-", "_");
					Если СтруктСтруктурМассивовЭДиСертификатов.Свойство(ИДМассиваЭД, СтруктураМассивов) Тогда
						МассивЭД = СтруктураМассивов.МассивЭД;
					Иначе
						МассивЭД = Новый Массив;
					КонецЕсли;
					МассивЭД.Добавить(СсылкаНаЭД);
					СтруктСтруктурМассивовЭДиСертификатов.Вставить(ИДМассиваЭД,
						Новый Структура("МассивЭД, МассивСертификатов", МассивЭД, МассивСертификатов));
					Если ВыделятьЭДКОтправкеСАвторизацией И Выборка.ТребуетсяАвторизация Тогда
						// Подписание массива ЭД по текущему сертификату будет выполняться на клиенте, поэтому, после подписания
						// надо будет попытаться их отправить, предварительно получив сертификат авторизации по соглашению ЭД.
						МассивЭД = СоотвСоглашенийИМассивовЭДКОтправке.Получить(Выборка.ПрофильНастроекЭДО);
						Если МассивЭД = Неопределено Тогда
							МассивЭД = Новый Массив;
						КонецЕсли;
						Если МассивЭД.Найти(СсылкаНаЭД) = Неопределено Тогда
							МассивЭД.Добавить(СсылкаНаЭД);
						КонецЕсли;
						СоотвСоглашенийИМассивовЭДКОтправке.Вставить(Выборка.ПрофильНастроекЭДО, МассивЭД);
					Иначе
						// Подписание массива ЭД по текущему сертификату будет выполняться на клиенте, поэтому, после подписания
						// надо будет подготовить их к отправке и при необходимости отправить.
						Для Каждого Элемент Из МассивЭД Цикл
							Если СтруктураКОтправке.СПодписью.Найти(Элемент) = Неопределено
								И ЭДИнтеркампани.Найти(Элемент) = Неопределено Тогда
								СтруктураКОтправке.СПодписью.Добавить(Элемент);
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если КолПодписанных > 0 Тогда
			СтруктураВозврата.Вставить("КолПодписанных", КолПодписанных);
		КонецЕсли;
		Если СоотвЭДиСоглашений.Количество() > 0 Тогда
			СтруктураВозврата.Вставить("СоотвЭДиСоглашений", СоотвЭДиСоглашений);
		КонецЕсли;
		Если СтруктСтруктурМассивовЭДиСертификатов.Количество() > 0 Тогда
			СтруктураВозврата.Вставить("СтруктСтруктурМассивовЭДиСертификатов", СтруктСтруктурМассивовЭДиСертификатов);
		КонецЕсли;
	КонецЕсли;
	
	// Отправка ЭД:
	
	СоотвСоглашенийИСертификатовАвторизации = Новый Соответствие;
	СтруктураВозврата.Вставить("СоотвСоглашенийИСертификатовАвторизации", СоотвСоглашенийИСертификатовАвторизации);
	
	КолОтправленных = 0;
	КолПодготовленных = 0;
	Если ЭлектронныеДокументыКлиентСервер.ЕстьДействие(Действия, "Отправить") Тогда
		
		СтМассивовСтруктурСертификатов = Новый Структура("МассивСтруктурСертификатовКлиент", МассивСтруктурСертификатовКлиента);
		// Обработаем массивы ЭД (сформированные на этапе подписания ЭД), которые будут подписаны позже
		// и для отправки которых нужны сертификаты авторизации:
		Если СоотвСоглашенийИМассивовЭДКОтправке.Количество() > 0 Тогда
			МассивПрофилейНастроекЭДО = Новый Массив;
			Для Каждого Элемент Из СоотвСоглашенийИМассивовЭДКОтправке Цикл
				МассивПрофилейНастроекЭДО.Добавить(Элемент.Ключ);
			КонецЦикла;
			СоотвСоглашенийИСоответствийСертификатовИПараметров = СоотвСоглашенийИСоответствийСертификатовИПараметровДляАвторизацииСервер(
				МассивПрофилейНастроекЭДО,
				СтМассивовСтруктурСертификатов,
				СоотвСертификатовИПаролей);
			// Если есть сертификат авторизации, то попытаемся, после подписания массива ЭД на клиенте,
			// сразу же отправить ЭД, иначе, после подписания, ЭД упакуем в ПЭД и поместим в очередь на отправку.
			Для Каждого Элемент Из СоотвСоглашенийИМассивовЭДКОтправке Цикл
				ПрофильНастроекЭДО = Элемент.Ключ;
				СоотвСертификатовИПараметров = СоотвСоглашенийИСоответствийСертификатовИПараметров.Получить(ПрофильНастроекЭДО);
				Если ТипЗнч(СоотвСертификатовИПараметров) = Тип("Соответствие") Тогда
					Для Каждого КлючИЗначение Из СоотвСертификатовИПараметров Цикл
						СтруктураСертификата = КлючИЗначение.Значение;
						МаркерРасшифрованный = Неопределено;
						МаркерЗашифрованный = Неопределено;
						Если ТипЗнч(СтруктураСертификата) = Тип("Структура")
							И (СтруктураСертификата.Свойство("МаркерРасшифрованный", МаркерРасшифрованный)
								ИЛИ СтруктураСертификата.Свойство("МаркерЗашифрованный", МаркерЗашифрованный))
							И (ЗначениеЗаполнено(МаркерРасшифрованный) ИЛИ ЗначениеЗаполнено(МаркерЗашифрованный)) Тогда
							СоотвСертификатовИИхСтруктур.Вставить(КлючИЗначение.Ключ, СтруктураСертификата);
							МассивСертификатов = СоотвСоглашенийИСертификатовАвторизации.Получить(ПрофильНастроекЭДО);
							Если МассивСертификатов = Неопределено Тогда
								МассивСертификатов = Новый Массив;
								СоотвСоглашенийИСертификатовАвторизации.Вставить(ПрофильНастроекЭДО, МассивСертификатов);
							КонецЕсли;
							МассивСертификатов.Добавить(КлючИЗначение.Ключ);
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ВТ_ЭД.Ссылка КАК СсылкаНаЭД,
		|	ВТ_ЭД.СтатусЭД,
		|	ВТ_ЭД.ПрофильНастроекЭДО,
		|	СоглашенияЭД.Ссылка КАК СоглашениеЭД,
		|	СоглашенияЭДИсходящие.СпособОбменаЭД,
		|	ВЫБОР
		|		КОГДА СоглашенияЭДИсходящие.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезОператораЭДОТакском)
		|				ИЛИ СоглашенияЭДИсходящие.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезСервис1СЭДО)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ТребуетсяАвторизация,
		|	ВЫБОР
		|		КОГДА СоглашенияЭД.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезВебРесурсБанка)
		|				И НЕ СоглашенияЭД.ИспользуетсяКриптография
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ТребуетсяАвторизацияЛогинПароль,
		|	ВЫБОР
		|		КОГДА СоглашенияЭДИсходящие.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезОператораЭДОТакском)
		|				ИЛИ СоглашенияЭДИсходящие.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезСервис1СЭДО)
		|				ИЛИ СоглашенияЭД.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезВебРесурсБанка)
		|					И СоглашенияЭД.ИспользуетсяКриптография
		|				ИЛИ СоглашенияЭД.ЭтоИнтеркампани
		|				ИЛИ ВТ_ЭД.НаправлениеЭД = &НаправлениеВходящий
		|					И ВТ_ЭД.ПодписанЭЦП
		|				ИЛИ ВТ_ЭД.НаправлениеЭД = &НаправлениеИсходящий
		|					И СоглашенияЭДИсходящие.ИспользоватьЭЦП
		|					И &ИспользоватьЭЦП
		|			ТОГДА ИСТИНА
		|		КОГДА ВТ_ЭД.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.ИзвещениеОПолучении)
		|				ИЛИ ВТ_ЭД.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.УведомлениеОбУточнении)
		|				ИЛИ ВТ_ЭД.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.ПредложениеОбАннулировании)
		|			ТОГДА ВЫБОР
		|					КОГДА ЕСТЬNULL(ВТ_ЭД.ЭлектронныйДокументВладелец.ПодписанЭЦП, ЛОЖЬ)
		|						ТОГДА НЕ ВТ_ЭД.ПодписанЭЦП
		|					ИНАЧЕ ЛОЖЬ
		|				КОНЕЦ
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ТребуетсяПодпись,
		|	ВЫБОР
		|		КОГДА СоглашенияЭДИсходящие.СпособОбменаЭД <> ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезОператораЭДОТакском)
		|				И СоглашенияЭДИсходящие.СпособОбменаЭД <> ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезСервис1СЭДО)
		|				И НЕ СоглашенияЭД.ЭтоИнтеркампани
		|				И НЕ СоглашенияЭД.СертификатОрганизацииДляРасшифровки = ЗНАЧЕНИЕ(Справочник.СертификатыЭЦП.ПустаяСсылка)
		|				И &ИспользоватьЭЦП
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ТребуетсяШифрование
		|ИЗ
		|	ВТ_ЭД КАК ВТ_ЭД
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СоглашенияОбИспользованииЭД КАК СоглашенияЭД
		|		ПО ВТ_ЭД.СоглашениеЭД = СоглашенияЭД.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияОбИспользованииЭД.ИсходящиеДокументы КАК СоглашенияЭДИсходящие
		|		ПО ВТ_ЭД.СоглашениеЭД = СоглашенияЭДИсходящие.Ссылка
		|			И (ВЫБОР
		|				КОГДА ВТ_ЭД.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.ТОРГ12Покупатель)
		|					ТОГДА СоглашенияЭДИсходящие.ИсходящийДокумент = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.ТОРГ12Продавец)
		|				КОГДА ВТ_ЭД.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.АктЗаказчик)
		|					ТОГДА СоглашенияЭДИсходящие.ИсходящийДокумент = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.АктИсполнитель)
		|				КОГДА ВТ_ЭД.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель)
		|					ТОГДА СоглашенияЭДИсходящие.ИсходящийДокумент = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель)
		|				ИНАЧЕ ВТ_ЭД.ВидЭД = СоглашенияЭДИсходящие.ИсходящийДокумент
		|			КОНЕЦ)
		|ГДЕ
		|	ВЫБОР
		|			КОГДА СоглашенияЭДИсходящие.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезОператораЭДОТакском)
		|					ИЛИ СоглашенияЭДИсходящие.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезСервис1СЭДО)
		|					ИЛИ СоглашенияЭД.ЭтоИнтеркампани
		|					ИЛИ ВТ_ЭД.НаправлениеЭД = &НаправлениеВходящий
		|						И ВТ_ЭД.ПодписанЭЦП
		|					ИЛИ ВТ_ЭД.НаправлениеЭД = &НаправлениеИсходящий
		|						И НЕ(ВТ_ЭД.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.ИзвещениеОПолучении)
		|								ИЛИ ВТ_ЭД.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.ПредложениеОбАннулировании)
		|								ИЛИ ВТ_ЭД.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.УведомлениеОбУточнении))
		|						И СоглашенияЭДИсходящие.ИспользоватьЭЦП
		|						И &ИспользоватьЭЦП
		|						И НЕ(ВТ_ЭД.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.ИзвещениеОПолучении)
		|								ИЛИ ВТ_ЭД.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.ПредложениеОбАннулировании)
		|								ИЛИ ВТ_ЭД.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.УведомлениеОбУточнении))
		|				ТОГДА ВТ_ЭД.СтатусЭД В (&СтатусыКОтправкеСПодписью)
		|			КОГДА ВТ_ЭД.НаправлениеЭД = &НаправлениеИсходящий
		|					И (НЕ СоглашенияЭДИсходящие.ИспользоватьЭЦП
		|						ИЛИ НЕ &ИспользоватьЭЦП)
		|					И (СоглашенияЭДИсходящие.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезВебРесурсБанка)
		|							И НЕ СоглашенияЭД.ИспользуетсяКриптография
		|						ИЛИ НЕ СоглашенияЭДИсходящие.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезВебРесурсБанка))
		|				ТОГДА ВТ_ЭД.СтатусЭД В (&СтатусыКОтправкеБезПодписи)
		|			КОГДА ВТ_ЭД.НаправлениеЭД = &НаправлениеИсходящий
		|					И (ВТ_ЭД.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.ИзвещениеОПолучении)
		|						ИЛИ ВТ_ЭД.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.ПредложениеОбАннулировании)
		|						ИЛИ ВТ_ЭД.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.УведомлениеОбУточнении))
		|				ТОГДА ВЫБОР
		|						КОГДА ВТ_ЭД.ЭлектронныйДокументВладелец.ПодписанЭЦП
		|							ТОГДА ВТ_ЭД.СтатусЭД В (&СтатусыКОтправкеСПодписью)
		|						ИНАЧЕ ВТ_ЭД.СтатусЭД В (&СтатусыКОтправкеБезПодписи)
		|					КОНЕЦ
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ";
				
		МассивСтатусовСПодписью = Новый Массив;
		МассивСтатусовСПодписью.Добавить(Перечисления.СтатусыЭД.Подписан);
		
		МассивСтатусовБезПодписи = Новый Массив;
		МассивСтатусовБезПодписи.Добавить(Перечисления.СтатусыЭД.Сформирован);
		МассивСтатусовБезПодписи.Добавить(Перечисления.СтатусыЭД.Утвержден);
		МассивСтатусовБезПодписи.Добавить(Перечисления.СтатусыЭД.ПодготовленКОтправке);
		
		Если Действия = "ОтправитьПовторно" Тогда
			МассивСтатусовСПодписью.Добавить(Перечисления.СтатусыЭД.ПодготовленКОтправке);
			МассивСтатусовБезПодписи.Добавить(Перечисления.СтатусыЭД.ПодготовленКОтправке);
			МассивСтатусовСПодписью.Добавить(Перечисления.СтатусыЭД.Отправлен);
			МассивСтатусовБезПодписи.Добавить(Перечисления.СтатусыЭД.Отправлен);
			МассивСтатусовСПодписью.Добавить(Перечисления.СтатусыЭД.Доставлен);
			МассивСтатусовБезПодписи.Добавить(Перечисления.СтатусыЭД.Доставлен);
			МассивСтатусовСПодписью.Добавить(Перечисления.СтатусыЭД.ПереданОператору);
			МассивСтатусовБезПодписи.Добавить(Перечисления.СтатусыЭД.ПереданОператору);
			МассивСтатусовСПодписью.Добавить(Перечисления.СтатусыЭД.ПолученоПодтверждениеОператора);
			МассивСтатусовБезПодписи.Добавить(Перечисления.СтатусыЭД.ПолученоПодтверждениеОператора);
		КонецЕсли;
		
		ИспользоватьЭЦП = ПолучитьЗначениеФункциональнойОпции("ИспользоватьЭлектронныеЦифровыеПодписи");
		
		//Запрос.УстановитьПараметр("СпособОбменаЧерезОЭДО",      Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском);
		Запрос.УстановитьПараметр("НаправлениеВходящий",        Перечисления.НаправленияЭД.Входящий);
		Запрос.УстановитьПараметр("НаправлениеИсходящий",       Перечисления.НаправленияЭД.Исходящий);
		Запрос.УстановитьПараметр("СтатусыКОтправкеБезПодписи", МассивСтатусовБезПодписи);
		Запрос.УстановитьПараметр("СтатусыКОтправкеСПодписью",  МассивСтатусовСПодписью);
		Запрос.УстановитьПараметр("ИспользоватьЭЦП",            ИспользоватьЭЦП);
		
		// После утверждения входящего ЭД, вида "Торг12Продавец", формируется новый ЭД,
		// который и должен отправиться на другую сторону.
		
		Если ТипЗнч(ЭД) = Тип("СправочникСсылка.ЭДПрисоединенныеФайлы") Тогда
			ВидЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭД, "ВидЭД");
			Если (ВидЭД = Перечисления.ВидыЭД.АктИсполнитель
					ИЛИ ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель
					ИЛИ ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец)
				И ЗначениеЗаполнено(НовыйЭД) Тогда
				
				МассивСсылокЭД = Новый Массив;
				МассивСсылокЭД.Добавить(НовыйЭД);
				Запрос.УстановитьПараметр("МассивСсылокЭД", МассивСсылокЭД);
			КонецЕсли;
		КонецЕсли;
		
		Запрос.Текст = ТекстОсновногоЗапроса 
						+ "
						|;
						|//////////
						|" + ТекстЗапроса;

		Тз_Эд_КОтправке = Запрос.Выполнить().Выгрузить();
		
		КолОтправленных = 0;
		КолПодготовленных = 0;
		Если Тз_Эд_КОтправке.Количество() > 0 Тогда
			Тз_Эд_СШифрованием = Тз_Эд_КОтправке.СкопироватьКолонки();
			Если НЕ ВыполнятьКриптооперацииНаСервере Тогда
				// Скопируем в отдельную таблицу ЭД, которые надо шифровать на клиенте
				// и удалим эти строки из таблицы ЭД к отправке:
				Отбор = Новый Структура("ТребуетсяШифрование", Истина);
				Тз_Эд_СШифрованием = ТЗ_ЭД_КОтправке.Скопировать(Отбор);
				Отбор = Новый Структура("ТребуетсяШифрование", Ложь);
				Тз_Эд_КОтправке = ТЗ_ЭД_КОтправке.Скопировать(Отбор);
			КонецЕсли;
			Отбор = Новый Структура("ТребуетсяПодпись, ТребуетсяАвторизацияЛогинПароль", Ложь, Ложь);
			ВремТЗ = Тз_Эд_КОтправке.Скопировать(Отбор);
			БезПодписиВрем = ВремТЗ.ВыгрузитьКолонку("СсылкаНаЭД");
			БезПодписи = Новый Массив;
			Для Каждого ЭДБезПодписи Из БезПодписиВрем Цикл
				Если ЭДИнтеркампани.Найти(ЭДБезПодписи) = Неопределено Тогда
					БезПодписи.Добавить(ЭДБезПодписи)
				КонецЕсли;
			КонецЦикла;
			СтруктураКОтправке.Вставить("БезПодписи", БезПодписи);
			
			Если Не НемедленнаяОтправкаЭД Тогда
				// Если используется отложенная отправка, то авторизация на сервере ОЭДО, на текущем этапе, не нужна.
				// Следовательно, ЭД передаваемые через ОЭДО, передаются на формирование ПЭД без сертификатов авторизации.
				Отбор = Новый Структура("ТребуетсяПодпись", Истина);
				ВремТЗ = Тз_Эд_КОтправке.Скопировать(Отбор);
				МассивПодписанныхЭДКОтправке = ВремТЗ.ВыгрузитьКолонку("СсылкаНаЭД");
				Для Каждого Элемент Из МассивПодписанныхЭДКОтправке Цикл
					Если ЭДИнтеркампани.Найти(Элемент) = Неопределено Тогда
						СтруктураКОтправке.СПодписью.Добавить(Элемент);
					КонецЕсли;
				КонецЦикла;
				
				// Для обмена с банком по схеме логин-пароль требуется подготовить пакет к отправке
				Отбор = Новый Структура("ТребуетсяАвторизацияЛогинПароль", Истина);
				ВремТЗ = Тз_Эд_КОтправке.Скопировать(Отбор);
				МассивЭДДляПодготовкиКОтправке = ВремТЗ.ВыгрузитьКолонку("СсылкаНаЭД");
				Для Каждого Элемент Из МассивЭДДляПодготовкиКОтправке Цикл
					Если ЭДИнтеркампани.Найти(Элемент) = Неопределено Тогда
						СтруктураКОтправке.БезПодписи.Добавить(Элемент);
					КонецЕсли;
				КонецЦикла;
			Иначе
				Отбор = Новый Структура("ТребуетсяАвторизация, ТребуетсяПодпись", Ложь, Истина);
				ВремТз = Тз_Эд_КОтправке.Скопировать(Отбор);
				МассивПодписанныхЭДКОтправке = ВремТз.ВыгрузитьКолонку("СсылкаНаЭД");
				Для Каждого Элемент Из МассивПодписанныхЭДКОтправке Цикл
					Если ЭДИнтеркампани.Найти(Элемент) = Неопределено Тогда
						СтруктураКОтправке.СПодписью.Добавить(Элемент);
					КонецЕсли;
				КонецЦикла;
				
				Отбор = Новый Структура("ТребуетсяАвторизация", Истина);
				ВремТз = Тз_Эд_КОтправке.Скопировать(Отбор);
				ТзПрофилейНастроекЭДО = ВремТз.Скопировать();
				ТзПрофилейНастроекЭДО.Свернуть("ПрофильНастроекЭДО");
				МассивПрофилейНастроекЭДО = ТзПрофилейНастроекЭДО.ВыгрузитьКолонку("ПрофильНастроекЭДО");
				Если МассивПрофилейНастроекЭДО.Количество() > 0 Тогда
					СоотвСоглашенийИСоответствийСертификатов = СоотвСоглашенийИСоответствийСертификатовИПараметровДляАвторизацииСервер(
					                                                                 МассивПрофилейНастроекЭДО,
					                                                                 СтМассивовСтруктурСертификатов,
					                                                                 СоотвСертификатовИПаролей);
				КонецЕсли;
				// Если есть расшифрованные маркеры по сертификатам авторизации,
				// то здесь же отправим ЭД по данным сертификатам.
				МассивЭДКОтправкеССервера = Новый Массив;
				ЛокальноеСоотвСоглашенийИСтруктур = Новый Соответствие;
				
				Для Каждого ПрофильНастроекЭДО Из МассивПрофилейНастроекЭДО Цикл
					СоответствиеСертификатов = СоотвСоглашенийИСоответствийСертификатов.Получить(ПрофильНастроекЭДО);
					Отбор = Новый Структура("ПрофильНастроекЭДО", ПрофильНастроекЭДО);
					ВремТЗПоПрофилюНастроекЭДО = ВремТз.Скопировать(Отбор);
					Если ВремТЗПоПрофилюНастроекЭДО.Количество() = 0 Тогда
						Продолжить;
					КонецЕсли;
					МассивЭД = ВремТЗПоПрофилюНастроекЭДО.ВыгрузитьКолонку("СсылкаНаЭД");
					
					Если СоответствиеСертификатов = Неопределено Или СоответствиеСертификатов.Количество() = 0 Тогда
						
						// Если нет сертификата авторизации, то передадим массив ЭД на формирование ПЭД,
						// далее, ПЭД встанет в очередь на отправку (отложенная отправка).
						Для Каждого СсылкаНаЭД Из МассивЭД Цикл
							СтруктураКОтправке.СПодписью.Добавить(СсылкаНаЭД);
						КонецЦикла;
						
						ШаблонСообщения =
							НСтр("ru='Не обнаружено сертификатов для авторизации в сервисе.
							         |Документы подготовлены к отправке.
							         |Проверьте наличие сертификатов и доступ к ним в профиле настроек ""%1"".'");
						
						ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ПрофильНастроекЭДО);
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ПрофильНастроекЭДО);
						
						Продолжить;
					КонецЕсли;
					
					ОтправкаССервера = Ложь;
					Для Каждого КлючИЗначение Из СоответствиеСертификатов Цикл
						МаркерРасшифрованный = Неопределено;
						МаркерЗашифрованный = Неопределено;
						СтруктураСертификата = КлючИЗначение.Значение;
						Если ТипЗнч(СтруктураСертификата) = Тип("Структура")
							И (СтруктураСертификата.Свойство("МаркерРасшифрованный", МаркерРасшифрованный)
								ИЛИ СтруктураСертификата.Свойство("МаркерЗашифрованный", МаркерЗашифрованный))
							И (ЗначениеЗаполнено(МаркерРасшифрованный) ИЛИ ЗначениеЗаполнено(МаркерЗашифрованный)) Тогда
							Сертификат = КлючИЗначение.Ключ;
							Если ЗначениеЗаполнено(МаркерРасшифрованный) Тогда
								Для Каждого СсылкаНаЭД Из МассивЭД Цикл
									МассивЭДКОтправкеССервера.Добавить(СсылкаНаЭД);
								КонецЦикла;
								ЛокальноеСоотвСоглашенийИСтруктур.Вставить(ПрофильНастроекЭДО, СтруктураСертификата);
								ОтправкаССервера = Истина;
								Прервать;
							Иначе
								СоотвСертификатовИИхСтруктур.Вставить(Сертификат, СтруктураСертификата);
								МассивСертификатов = СоотвСоглашенийИСертификатовАвторизации.Получить(ПрофильНастроекЭДО);
								Если МассивСертификатов = Неопределено Тогда
									МассивСертификатов = Новый Массив;
									СоотвСоглашенийИСертификатовАвторизации.Вставить(ПрофильНастроекЭДО, МассивСертификатов);
								КонецЕсли;
								МассивСертификатов.Добавить(КлючИЗначение.Ключ);
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
					
					Если ОтправкаССервера Тогда
						Продолжить;
					Иначе
						// По данному соглашению может быть массив, ожидающих подписи на клиенте, ЭД.
						// Данная ситуация может получиться, когда в журнале документов выбрана группа документов ИБ
						// с разными статусами ЭД (утвержден и подписан), тогда с предыдущего этапа (Подписание ЭД)
						// в соответствии соглашений и массивов придет массив ЭД на подпись, а на текущем этапе
						// будет сформирован массив ЭД к отправке.
						// Чтобы не затереть массив ЭД на подпись, добавим ЭД к отправке в существующий массив:
						МассивЭДОжидающихПодписи = СоотвСоглашенийИМассивовЭДКОтправке.Получить(ПрофильНастроекЭДО);
						Если МассивЭДОжидающихПодписи = Неопределено Тогда
							МассивЭДОжидающихПодписи = Новый Массив;
						КонецЕсли;
						Для Каждого ЭлементКОтправке Из МассивЭД Цикл
							МассивЭДОжидающихПодписи.Добавить(ЭлементКОтправке);
						КонецЦикла;
						СоотвСоглашенийИМассивовЭДКОтправке.Вставить(ПрофильНастроекЭДО, МассивЭДОжидающихПодписи);
					КонецЕсли;
				КонецЦикла;
				
				// Используется для отправки документов в банк по схеме логин-пароль
				МассивЭДКОтправкеССервераБезПодписи = Новый Массив;
				Отбор = Новый Структура("ТребуетсяАвторизацияЛогинПароль", Истина);
				ВремТз = Тз_Эд_КОтправке.Скопировать(Отбор);
				ТзСоглашений = ВремТз.Скопировать();
				ТзСоглашений.Свернуть("СоглашениеЭД");
				МассивСоглашений = ТЗСоглашений.ВыгрузитьКолонку("СоглашениеЭД");
				Для Каждого СоглашениеЭД Из МассивСоглашений Цикл
					Отбор = Новый Структура("СоглашениеЭД", СоглашениеЭД);
					ВремТЗПоСоглашению = ВремТз.Скопировать(Отбор);
					Если ВремТЗПоСоглашению.Количество() = 0 Тогда
						Продолжить;
					КонецЕсли;
					МассивЭД = ВремТзПоСоглашению.ВыгрузитьКолонку("СсылкаНаЭД");
					Если ЗначениеЗаполнено(СоотвСертификатовИПаролей)
						И НЕ СоотвСертификатовИПаролей.Получить(СоглашениеЭД) = Неопределено Тогда
						ЛокальноеСоотвСоглашенийИСтруктур.Вставить(СоглашениеЭД, СоотвСертификатовИПаролей.Получить(СоглашениеЭД));
						ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивЭДКОтправкеССервераБезПодписи, МассивЭД);
					Иначе
						СоотвСоглашенийИМассивовЭДКОтправкеСАвторизацией.Вставить(СоглашениеЭД, МассивЭД);
					КонецЕсли;
				КонецЦикла;
				
				Если МассивЭДКОтправкеССервераБезПодписи.Количество() > 0 Тогда
					СтРезультата = СоздатьИОтправитьДокументыПЭД(
						МассивЭДКОтправкеССервераБезПодписи, Ложь, ЛокальноеСоотвСоглашенийИСтруктур);
					КолОтправленных = КолОтправленных + СтРезультата.КолОтправленных;
					КолПодготовленных = КолПодготовленных + СтРезультата.КолПодготовленных;
				КонецЕсли;
				
				Если МассивЭДКОтправкеССервера.Количество() > 0 Тогда
					СтРезультата = СоздатьИОтправитьДокументыПЭД(МассивЭДКОтправкеССервера, Истина, ЛокальноеСоотвСоглашенийИСтруктур);
					КолОтправленных = КолОтправленных + СтРезультата.КолОтправленных;
					КолПодготовленных = КолПодготовленных + СтРезультата.КолПодготовленных;
				КонецЕсли;
			КонецЕсли;
			Для Каждого Элемент Из СтруктураКОтправке Цикл
				ПризнакПодписи = (Элемент.Ключ = "СПодписью");
				МассивЭД = Элемент.Значение;
				Если ТипЗнч(МассивЭД) = Тип("Массив") И МассивЭД.Количество() > 0 Тогда
					СтРезультата = СоздатьИОтправитьДокументыПЭД(МассивЭД, ПризнакПодписи);
					КолОтправленных = КолОтправленных + СтРезультата.КолОтправленных;
					КолПодготовленных = КолПодготовленных + СтРезультата.КолПодготовленных;
				КонецЕсли;
				МассивЭД = Новый Массив;
				// Добавим в структуру ЭД, которые надо шифровать на клиенте:
				Если ТЗ_ЭД_СШифрованием.Количество() > 0 Тогда
					Отбор = Новый Структура("ТребуетсяПодпись", ПризнакПодписи);
					ВремТЗ = ТЗ_ЭД_СШифрованием.Скопировать(Отбор);
					МассивЭД = ВремТЗ.ВыгрузитьКолонку("СсылкаНаЭД");
				КонецЕсли;
				СтруктураКОтправке.Вставить(Элемент.Ключ, МассивЭД);
			КонецЦикла;
		КонецЕсли;
		СтруктураКОтправке.Вставить("САвторизацией", СоотвСоглашенийИМассивовЭДКОтправке);
		СтруктураКОтправке.Вставить("САвторизациейЛогинПароль", СоотвСоглашенийИМассивовЭДКОтправкеСАвторизацией);
		
		СтруктураВозврата.Вставить("КолОтправленных", КолОтправленных);
		СтруктураВозврата.Вставить("КолПодготовленных", КолПодготовленных);
		СтруктураВозврата.Вставить("СтруктураКОтправке", СтруктураКОтправке);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(МассивСсылокНаОбъект) Тогда
		ДопПараметры.Вставить("ЕстьОбработанныеЭД",
			(КолНовыхЭД + КолУтвержденныхЭД + КолПодписанных + КолПодготовленных + КолОтправленных) > 0);
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

// Только для внутреннего использования
Функция ОтправитьИПолучитьДокументы(СоотвСоглашенийИСтруктурСертификатов, ПовторноеПолучение = Ложь) Экспорт
	
	ЭлектронныеДокументыСлужебный.ОбновитьКешиОператоровЭДОИФорматов();
	
	СтруктураВозврата = Новый Структура;
	Если НЕ ПовторноеПолучение Тогда
		КолОтправленныхПакетов = ЭлектронныеДокументыСлужебный.ОтправкаСформированныхЭД(
													СоотвСоглашенийИСтруктурСертификатов);
		СтруктураВозврата.Вставить("КолОтправленныхПакетов", КолОтправленныхПакетов);
	КонецЕсли;
	
	НовыеДокументы = ЭлектронныеДокументыСлужебный.ПолучитьНовыеЭД(
												СоотвСоглашенийИСтруктурСертификатов,
												ПовторноеПолучение);
	
	ДополнитьПакетамиКРаспаковке(НовыеДокументы.ПараметрыРаспаковки, НовыеДокументы.Профили);
	
	СтруктураВозврата.Вставить("НовыеДокументы", НовыеДокументы);
	
	// Если маркер потерял актуальность(прошло более 5 минут с момента его получения),
	// получаем его заново, чтобы расшифровать на клиенте.
	Если ПовторноеПолучение Тогда
		Для Каждого Элемент ИЗ СоотвСоглашенийИСтруктурСертификатов Цикл
			ЭлектронныеДокументыСлужебный.ОбновитьИнформациюОбАктивностиУчетнойЗаписи(Элемент.Ключ);
			ПрофильНастроекЭДО = Элемент.Ключ;
			СтруктураСертификата = Элемент.Значение;
			
			ПараметрыПрофиляНастроекЭДО = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПрофильНастроекЭДО,
				"СпособОбменаЭД, ИдентификаторОрганизации");
			СтруктураПараметровЗапросаМаркера = СтруктураСертификата;
			СтруктураПараметровЗапросаМаркера.Вставить("СпособОбменаЭД", ПараметрыПрофиляНастроекЭДО.СпособОбменаЭД);
			СтруктураПараметровЗапросаМаркера.Вставить("ИдентификаторОрганизации", ПараметрыПрофиляНастроекЭДО.ИдентификаторОрганизации);
			
			Элемент.Значение.Вставить("МаркерЗашифрованный", ЗашифрованныйМаркер(СтруктураПараметровЗапросаМаркера));
		КонецЦикла
	КонецЕсли;
	
	Если ПолучитьЗначениеФункциональнойОпции("ИспользоватьОбменЭДСБанками") Тогда
		ДанныеДляОтправкиЧерезДопОбработку = ДанныеДляОтправкиЧерезДопОбработку();
		Если ДанныеДляОтправкиЧерезДопОбработку.Количество() > 0 Тогда
			СтруктураВозврата.Вставить("ДанныеДляОтправкиЧерезДопОбработку", ДанныеДляОтправкиЧерезДопОбработку);
		КонецЕсли
	КонецЕсли;

	Возврат СтруктураВозврата;
	
КонецФункции

// Параметры использования сертификатов при отправке и получении электронных документов.
//
// Возвращаемое значение:
//  Структура - параметры использования сертификатов.
//
Функция ПараметрыОтправкиПолученияЭД() Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("ЕстьВозможностьОтправкиПолученияЭД", Истина);
	
	ИспользоватьЭП = ПолучитьЗначениеФункциональнойОпции("ИспользоватьЭлектронныеЦифровыеПодписи");
	
	Если НЕ ИспользоватьЭП Тогда
		Возврат Параметры;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПрофилиНастроекЭДО.Ссылка КАК ПрофильЭДО,
		|	ВЫБОР
		|		КОГДА ПрофилиНастроекЭДО.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезСервис1СЭДО)
		|				ИЛИ ПрофилиНастроекЭДО.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезОператораЭДОТакском)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ОбменЧерезОператораЭДО,
		|	ЕСТЬNULL(Сертификаты.Отозван, ИСТИНА) КАК СертификатОтозван,
		|	ВЫБОР
		|		КОГДА Сертификаты.Ссылка ЕСТЬ NULL
		|			ТОГДА ЛОЖЬ
		|		КОГДА Сертификаты.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА ИСТИНА
		|		КОГДА РАЗНОСТЬДАТ(&ТекущаяДата, Сертификаты.ДатаОкончания, ДЕНЬ) > 0
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК СертификатДействителен
		|ИЗ
		|	Справочник.ПрофилиНастроекЭДО КАК ПрофилиНастроекЭДО
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПрофилиНастроекЭДО.СертификатыПодписейОрганизации КАК ПрофилиЭДОСертификаты
		|		ПО ПрофилиНастроекЭДО.Ссылка = ПрофилиЭДОСертификаты.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СертификатыЭЦП КАК Сертификаты
		|		ПО (ПрофилиЭДОСертификаты.Сертификат = Сертификаты.Ссылка)
		|ГДЕ
		|	НЕ ПрофилиНастроекЭДО.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	Выборка = Запрос.Выполнить().Выбрать();
	
	ЕстьВозможностьОтправкиПолученияЭД = Ложь;
	ПрофилиЭДОБезВозможностиОтправкиПолучения = Новый Соответствие;
	Пока Выборка.Следующий() Цикл
		
		Если НЕ Выборка.ОбменЧерезОператораЭДО Тогда
			ЕстьВозможностьОтправкиПолученияЭД = Истина;
			Продолжить;
		КонецЕсли;
		
		Если (НЕ Выборка.СертификатДействителен ИЛИ Выборка.СертификатОтозван)
			И ПрофилиЭДОБезВозможностиОтправкиПолучения[Выборка.ПрофильЭДО] = Неопределено Тогда
			ПрофилиЭДОБезВозможностиОтправкиПолучения.Вставить(Выборка.ПрофильЭДО, Истина);
		Иначе
			ПрофилиЭДОБезВозможностиОтправкиПолучения.Вставить(Выборка.ПрофильЭДО, Ложь);
		КонецЕсли;
		
	КонецЦикла;
	
	ПрофилиЭДОБезСертификатов = Новый Массив;
	
	Для Каждого Элемент Из ПрофилиЭДОБезВозможностиОтправкиПолучения Цикл
		Если Элемент.Значение Тогда
			ПрофилиЭДОБезСертификатов.Добавить(Элемент.Ключ);
		Иначе
			ЕстьВозможностьОтправкиПолученияЭД = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Параметры = Новый Структура;
	Параметры.Вставить("ЕстьВозможностьОтправкиПолученияЭД", ЕстьВозможностьОтправкиПолученияЭД);
	Если ПрофилиЭДОБезСертификатов.Количество() Тогда
		Параметры.Вставить("ПрофилиЭДОБезСертификатов", ПрофилиЭДОБезСертификатов);
	КонецЕсли;
	
	Возврат Параметры;
	
КонецФункции

// Обрабатывает подтверждения документов, состоящие из электронно-цифровой подписи.
//
// Параметры:
//  СоответствиеФайлПараметры - Соответствие, связывающее имена файлов данных и файлов электронных цифровых подписей к
//                              ним.
//  ПакетЭДСсылка - ДокументСсылка.ПакетЭД, ссылка на пакет электронных документов, содержащий подтверждение.
//  ФайлыПакета - Соответствие - данные файлов пакета
//     * Ключ - Строка - имя файла пакета
//     * Значение - Строка - ссылка на хранилище двоичных данных файла
//
Функция ОбработатьПодтвержденияДокументовНаСервере(
				СоответствиеФайлПараметры,
				ПакетЭДСсылка,
				ФайлыПакета) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	МассивВозврата = Новый Массив;
	ПакетЭДОбъект = ПакетЭДСсылка.ПолучитьОбъект();
	// Попытаемся получить настройки криптографии.
	ВыполнятьКриптооперацииНаСервере = ВыполнятьКриптооперацииНаСервере();
	
	Если ВыполнятьКриптооперацииНаСервере Тогда
		Попытка
			НастройкиКриптографии = ЭлектроннаяЦифроваяПодпись.ПолучитьПерсональныеНастройкиРаботыСЭЦПСервер();
			ПровайдерЭЦП = НастройкиКриптографии.ПровайдерЭЦП;
			ПутьМодуляКриптографии = НастройкиКриптографии.ПутьМодуляКриптографии;
			ТипПровайдераЭЦП = НастройкиКриптографии.ТипПровайдераЭЦП;
			
			МенеджерКриптографии = Новый МенеджерКриптографии(ПровайдерЭЦП, ПутьМодуляКриптографии, ТипПровайдераЭЦП);
			МенеджерКриптографии.АлгоритмПодписи     = НастройкиКриптографии.АлгоритмПодписи;
			МенеджерКриптографии.АлгоритмХеширования = НастройкиКриптографии.АлгоритмХеширования;
			МенеджерКриптографии.АлгоритмШифрования  = НастройкиКриптографии.АлгоритмШифрования;
		Исключение
			ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке())
				+ НСтр("ru = ' (подробности см. в Журнале регистрации).'");
			ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'обработка подтверждений ЭД'"), ТекстОшибки, ТекстСообщения);
			Возврат МассивВозврата;
		КонецПопытки;
	КонецЕсли;
	
	// Подтверждением считаем подпись без файла (в соответствии - ключ с файлом подписи)
	Для Каждого ЭлементСоответствие Из СоответствиеФайлПараметры Цикл
		Если Найти(ЭлементСоответствие.Ключ, ".p7s") > 0 ИЛИ Найти(ЭлементСоответствие.Ключ, ".sig") > 0  Тогда
			НаправлениеИскомогоДокумента = Перечисления.НаправленияЭД.Исходящий;
			СтруктураСлужебныхДанных = ЭлементСоответствие.Значение;
			
			УникальныйИД = Неопределено;
			Если НЕ СтруктураСлужебныхДанных.Свойство("НомерЭДТИ", УникальныйИД) Тогда
				СтруктураСлужебныхДанных.Свойство("УникальныйИД", УникальныйИД);
			КонецЕсли;
			СтруктураПараметровПоиска = Новый Структура;
			СтруктураПараметровПоиска.Вставить("УникальныйИД",        УникальныйИД);
			СтруктураПараметровПоиска.Вставить("НаправлениеЭД",       НаправлениеИскомогоДокумента);
			КодТранзакции = "";
			Если СтруктураСлужебныхДанных.Свойство("КодТранзакции", КодТранзакции)
				И КодТранзакции = "CancellationOfferResign" Тогда
				СтруктураПараметровПоиска.Вставить("ВидЭД", Перечисления.ВидыЭД.ПредложениеОбАннулировании);
			Иначе
				ТипЭлементаВерсииЭД = Новый Массив;
				ТипЭлементаВерсииЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ПервичныйЭД);
				ТипЭлементаВерсииЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ДОП);
				ТипЭлементаВерсииЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.СЧФДОПУПД);
				ТипЭлементаВерсииЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ДОПУПД);
				ТипЭлементаВерсииЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.КСЧФДИСУКД);
				ТипЭлементаВерсииЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ДИСУКД);
				
				СтруктураПараметровПоиска.Вставить("ТипЭлементаВерсииЭД", ТипЭлементаВерсииЭД);
			КонецЕсли;
			ЭлектронныйДокумент = ЭлектронныеДокументыСлужебный.ОпределитьЭлектронныйДокумент(СтруктураПараметровПоиска);
			Если НЕ ЗначениеЗаполнено(ЭлектронныйДокумент) И ТипЗнч(СтруктураСлужебныхДанных) = Тип("Структура")
				И СтруктураСлужебныхДанных.Свойство("КодРегламента") И СтрДлина(УникальныйИД) = 36 Тогда
				ЭлектронныйДокумент = Справочники.ЭДПрисоединенныеФайлы.ПолучитьСсылку(Новый УникальныйИдентификатор(УникальныйИД));
			КонецЕсли;
			
			ДанныеПодписи = СтруктураСлужебныхДанных.МассивДанныхПодписей[0];
			ДвоичныеДанныеПодписи = ДанныеПодписи.ДвоичныеДанные;
			Если НЕ ЗначениеЗаполнено(ЭлектронныйДокумент) ИЛИ ЭлектронныйДокумент.ПолучитьОбъект() = Неопределено
				ИЛИ ЭлектронныеДокументыСлужебный.ЕстьТакаяПодпись(ДвоичныеДанныеПодписи, ЭлектронныйДокумент) Тогда
				Продолжить;
			КонецЕсли;
			
			ОпределитьСтатусыПодписей(ЭлектронныйДокумент);
			
			Если КодТранзакции = "CancellationOfferResign" Тогда
				НовыйСтатусЭД = Перечисления.СтатусыЭД.ПолученоПодтверждение;
			Иначе
				НовыйСтатусЭД = ЭлектронныеДокументыСлужебный.ПолучитьДопустимыйСтатусЭД(
					Перечисления.СтатусыЭД.ПолученоПодтверждение, ЭлектронныйДокумент);
			КонецЕсли;

			Попытка
				НачатьТранзакцию();
				
				ЭлектроннаяЦифроваяПодпись.ЗанестиИнформациюОПодписи(
												ЭлектронныйДокумент,
												ДанныеПодписи.ДвоичныеДанные,
												ДанныеПодписи.Отпечаток,
												ДанныеПодписи.ДатаПодписи,
												"",
												ДанныеПодписи.ИмяФайла,
												ДанныеПодписи.КомуВыданСертификат,
												ДанныеПодписи.ДвоичныеДанныеСертификата);
				
				СтруктураПараметров = Новый Структура("СтатусЭД", НовыйСтатусЭД);
				ЭлектронныеДокументыСлужебный.ИзменитьПоСсылкеПрисоединенныйФайл(ЭлектронныйДокумент, СтруктураПараметров, Ложь);
				
				ЗафиксироватьТранзакцию();
			Исключение
				ОтменитьТранзакцию();
				ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке())
					+ НСтр("ru = ' (подробности см. в Журнале регистрации).'");
				ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'получение подтверждения ЭД'"), ТекстОшибки, ТекстСообщения);
			КонецПопытки;
			
			ВладелецЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭлектронныйДокумент, "ВладелецФайла");
			СтрокаПакетаЭД = ПакетЭДОбъект.ЭлектронныеДокументы.Добавить();
			СтрокаПакетаЭД.ЭлектронныйДокумент = "Подтверждение";
			СтрокаПакетаЭД.ОбъектВладелец = ВладелецЭД;
			МассивВозврата.Добавить(ВладелецЭД);
		КонецЕсли;
	КонецЦикла;
	ПакетЭДОбъект.СтатусПакета = Перечисления.СтатусыПакетовЭД.Распакован;
	ПакетЭДОбъект.Записать();
	
	Возврат МассивВозврата;
	
КонецФункции

// Возвращает структуру, содержащую информацию о юридическом адресе контрагента.
//
// Параметры:
//  СтруктураПараметров - структура - содержит ссылки на элементы справочника;
//  ВидКонтрагента      - строка - имя метаданных справочника;
//  ВидАдреса           - строка - "Факт" или "Юр";
//  ТекстОшибки         - строка - описание ошибки;
//
// Возвращаемое значение:
//								  Поля "КодСтраны", "КодСтр", "АдресТекст", "АдрТекст"
//								  должны заполняться в соответствии с форматом, не заполненное должно удаляться из структуры.
//		"АдресРФ"    - Булево
//		"Индекс"     - Строка
//		"КодРегион"  - Строка
//		"Регион"     - Строка
//		"Район"      - Строка
//		"Город"      - Строка
//		"НаселПункт" - Строка
//		"Улица"      - Строка
//		"Дом"        - Строка
//		"Корпус"     - Строка
//		"Кварт"      - Строка
//		"КодСтраны"  - Строка, только для Форматов Торг12, УПД, УКД
//		"АдресТекст" - Строка, только для Форматов Торг12, УПД, УКД
//		"КодСтр"     - Строка, для остальных форматов
//		"АдрТекст"   - Строка, для остальных форматов
//
Функция ПолучитьАдресСтруктурой(СтруктураПараметров = Неопределено,
								ВидКонтрагента = Неопределено,
								ВидАдреса = Неопределено,
								ТекстОшибки = "") Экспорт
	
	СтруктураАдреса = Новый Структура;
	// Поля структуры для адреса РФ.
	СтруктураАдреса.Вставить("АдресРФ");
	СтруктураАдреса.Вставить("Индекс");
	СтруктураАдреса.Вставить("Регион");
	СтруктураАдреса.Вставить("КодРегион");
	СтруктураАдреса.Вставить("Район");
	СтруктураАдреса.Вставить("Город");
	СтруктураАдреса.Вставить("НаселПункт");
	СтруктураАдреса.Вставить("Улица");
	СтруктураАдреса.Вставить("Дом");
	СтруктураАдреса.Вставить("Корпус");
	СтруктураАдреса.Вставить("Кварт");
	// Поля структуры для иностранного адреса или адреса РФ строкой.
	СтруктураАдреса.Вставить("КодСтраны");
	СтруктураАдреса.Вставить("АдресТекст");
	СтруктураАдреса.Вставить("АдресСтрокой");
	ЭлектронныеДокументыПереопределяемый.ПолучитьАдресСтруктурой(СтруктураАдреса, СтруктураПараметров, ВидКонтрагента,
		ВидАдреса, ТекстОшибки);
	
	Возврат СтруктураАдреса;
	
КонецФункции

// Проверяет наличие элементов справочника организации
// и возвращает элемент, если он единственный.
//
// Параметры:
//  Организация - СправочникСсылка.Организации - ссылка на единственный элемент справочника Организации
//                Неопределено - есть организаций нет или несколько
//
Процедура ОпределитьОрганизацию(Организация) Экспорт
	
	НазваниеСправочникаОрганизации = ЭлектронныеДокументыПовтИсп.ПолучитьИмяПрикладногоСправочника("Организации");
	
	Если Не ЗначениеЗаполнено(НазваниеСправочникаОрганизации) Тогда
		НазваниеСправочникаОрганизации = "Организации";
	КонецЕсли;

	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Организации.Ссылка
	|ИЗ
	|	Справочник."+НазваниеСправочникаОрганизации+" КАК Организации";
	
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Если Выборка.Количество() = 1 Тогда
			Выборка.Следующий();
			Организация = Выборка.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Находит ссылку на объект ИБ по типу, ИД и дополнительным реквизитам
// 
// Параметры:
//  ТипОбъекта - Строка, идентификатор типа объекта, который необходимо найти,
//  ИДОбъекта - Строка, идентификатор объекта заданного типа,
//  ДополнительныеРеквизиты - Структура, набор дополнительных полей объекта для поиска.
//
Функция НайтиСсылкуНаОбъект(ТипОбъекта,
							ИдОбъекта = "",
							ДополнительныеРеквизиты = Неопределено,
							ИДЭД = Неопределено) Экспорт
	
	Результат = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект(ТипОбъекта,
																		 ИдОбъекта,
																		 ДополнительныеРеквизиты,
																		 ИДЭД);

КонецФункции

// Заполняет адрес хранилища с таблицей значений - каталога товаров
//
// Параметры:
//  АдресВоВременномХранилище - адрес хранения каталога товаров;
//  ИдентификаторФормы - уникальный  идентификатор формы, вызвавшей функцию.
//
Процедура ПоместитьКаталогТоваровВоВременноеХранилище(АдресВоВременномХранилище, ИдентификаторФормы) Экспорт
	
	ЭлектронныеДокументыПереопределяемый.ПоместитьКаталогТоваровВоВременноеХранилище(
												АдресВоВременномХранилище,
												ИдентификаторФормы);
	
КонецПроцедуры

// Изменяет поведение элементов управляемой или обычной формы.
//
// Параметры:
//  Форма - <Управляемая или обычная форма> - управляемая или обычная форма для изменения.
//  СтруктураПараметров - <Структура> - параметры процедуры
//
Процедура ИзменитьСвойстваЭлементовФормы(Форма, СтруктураПараметров) Экспорт
	
	ЭлектронныеДокументыПереопределяемый.ИзменитьСвойстваЭлементовФормы(Форма, СтруктураПараметров)
	
КонецПроцедуры

// Возвращает текст сообщения пользователю о необходимости  настройки системы.
//
// Параметры:
//  <ВидОперации> - Строка - признак выполняемой операции
//
// Возвращаемое значение:
//  ТекстСообщения - <Строка> - Строка сообщения
//
Функция ТекстСообщенияОНеобходимостиНастройкиСистемы(ВидОперации) Экспорт
	
	ТекстСообщения = "";
	ЭлектронныеДокументыПереопределяемый.ТекстСообщенияОНеобходимостиНастройкиСистемы(ВидОперации, ТекстСообщения);
	Если НЕ ЗначениеЗаполнено(ТекстСообщения) Тогда
		Если ВРег(ВидОперации) = "РАБОТАСЭД" Тогда
			ТекстСообщения = НСтр("ru = 'Для работы с электронными документами необходимо
			|в настройках системы включить использование обмена электронными документами.'");
		ИначеЕсли ВРег(ВидОперации) = "ПОДПИСАНИЕЭД" Тогда
			ТекстСообщения = НСтр("ru = 'Для возможности подписания ЭД необходимо
			|в настройках системы включить опцию использования электронных цифровых подписей.'");
		ИначеЕсли ВРег(ВидОперации) = "НАСТРОЙКАКРИПТОГРАФИИ" Тогда
			ТекстСообщения = НСтр("ru = 'Для возможности настройки криптографии необходимо 
			|в настройках системы включить опцию использования электронных цифровых подписей.'");
		ИначеЕсли ВРег(ВидОперации) = "РАБОТАСБАНКАМИ" Тогда
			ТекстСообщения = НСтр("ru = 'Для возможности обмена ЭД с банками необходимо 
			|в настройках системы включить опцию использования прямого взаимодействия с банками.'");
		ИначеЕсли ВРег(ВидОперации) = "ДОПОЛНИТЕЛЬНЫЕОТЧЕТЫИОБРАБОТКИ" Тогда
			ТекстСообщения = НСтр("ru = 'Для возможности прямого обмена с банком через дополнительную обработку
			|необходимо в настройках системы включить опцию использования дополнительных отчетов и обработок.'");
		Иначе
			ТекстСообщения = НСтр("ru='Операция не может быть выполнена. Не выполнены необходимые настройки системы.'");
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТекстСообщения;
	
КонецФункции

// Возвращаемое значение - Число (количество обработанных документов)
Функция ОбработатьДвоичныеДанныеПакетаОператораЭДО(ПакетЭД, ДанныеРаспаковки, ЕстьКриптосредствоНаКлиенте, СоответствиеЭДИПодписей, СтруктураВозврата) Экспорт

	Возврат ЭлектронныеДокументыВнутренний.ОбработатьДвоичныеДанныеПакетаОператораЭДО(
		ПакетЭД, ДанныеРаспаковки, ЕстьКриптосредствоНаКлиенте, СоответствиеЭДИПодписей, СтруктураВозврата);

КонецФункции

// Получает таблицу значений с данными по электронным документам.
//
// Параметры:
// МассивСсылокНаВладельцев - массив ссылок на владельцев электронных документов, данные которых необходимо получить.
//
Функция ПолучитьДанныеЭДПоВладельцам(МассивСсылокНаВладельцев) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СостоянияЭД.СсылкаНаОбъект КАК ВладелецЭД,
	|	СостоянияЭД.СостояниеВерсииЭД КАК СостояниеВерсииЭД,
	|	СостоянияЭД.ДействияСНашейСтороны КАК ДействияСНашейСтороны,
	|	СостоянияЭД.ДействияСоСтороныДругогоУчастника КАК ДействияСоСтороныДругогоУчастника
	|ИЗ
	|	РегистрСведений.СостоянияЭД КАК СостоянияЭД
	|ГДЕ
	|	СостоянияЭД.СсылкаНаОбъект В(&МассивСсылокНаВладельцев)";
	
	Запрос.УстановитьПараметр("МассивСсылокНаВладельцев", МассивСсылокНаВладельцев);
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции

// Производит заполнение реквизитов формы переданными значениями 
//
// Параметры:
//  ДанныеФормы - Данные управляемой формы;
//  ЗначениеЗаполнения - ссылка данные во временном хранилище.
//
Процедура ЗаполнитьИсточник(ДанныеФормы, ЗначениеВозврата) Экспорт
	
	ЭлектронныеДокументыПереопределяемый.ЗаполнитьИсточник(ДанныеФормы, ЗначениеВозврата);
	
конецПроцедуры

// Возвращает проверку соответствия организаций в профиле, настройках ЭДО и сертификатах
//
// Параметры:
//  Ссылка - СправочникСсылка.ПрофилиНастроекЭДО, СправочникСсылка.СоглашенияОбИспользованииЭД - проверяемый объект.
//
// Возвращаемое значение:
//  Истина - Организации соответствуют
//  Ложь - Не соответствуют
//
Функция ПроверитьСоответствиеОрганизаций(Ссылка) Экспорт
	
	Если ТипЗнч(Ссылка) = Тип("СправочникСсылка.ПрофилиНастроекЭДО") Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Профили.Ссылка КАК Профиль,
		|	Профили.Организация КАК ПрофильОрганизация,
		|	Сертификаты.Сертификат КАК Сертификат,
		|	Сертификаты.Сертификат.Организация КАК СертификатОрганизация,
		|	Соглашения.Ссылка КАК Соглашение,
		|	Соглашения.Ссылка.Организация КАК СоглашениеОрганизация,
		|	Соглашения.Ссылка.СостояниеСоглашения КАК СостояниеСоглашения
		|ИЗ
		|	Справочник.ПрофилиНастроекЭДО КАК Профили
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПрофилиНастроекЭДО.СертификатыПодписейОрганизации КАК Сертификаты
		|		ПО (Сертификаты.Ссылка = Профили.Ссылка)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияОбИспользованииЭД.ИсходящиеДокументы КАК Соглашения
		|		ПО (Соглашения.ПрофильНастроекЭДО = Профили.Ссылка)
		|			И (НЕ Соглашения.Ссылка.ПометкаУдаления)
		|			И (Соглашения.Ссылка.СостояниеСоглашения <> ЗНАЧЕНИЕ(Перечисление.СостоянияСоглашенийЭД.Закрыто))
		|ГДЕ
		|	Профили.Ссылка = &Ссылка
		|	И (НЕ Соглашения.Ссылка.Организация ЕСТЬ NULL 
		|				И Профили.Организация <> Соглашения.Ссылка.Организация
		|			ИЛИ НЕ Сертификаты.Сертификат.Организация ЕСТЬ NULL 
		|				И Профили.Организация <> Сертификаты.Сертификат.Организация)";
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		
		Результат = (Запрос.Выполнить().Выбрать().Количество() = 0);
		
		Возврат Результат;
		
	ИначеЕсли ТипЗнч(Ссылка) = Тип("СправочникСсылка.СоглашенияОбИспользованииЭД") Тогда 
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Профили.Ссылка КАК Профиль,
		|	Профили.Организация КАК ПрофильОрганизация,
		|	Сертификаты.Сертификат КАК Сертификат,
		|	Сертификаты.Сертификат.Организация КАК СертификатОрганизация,
		|	Соглашения.Ссылка КАК Соглашение,
		|	Соглашения.Ссылка.Организация КАК СоглашениеОрганизация
		|ИЗ
		|	Справочник.ПрофилиНастроекЭДО КАК Профили
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПрофилиНастроекЭДО.СертификатыПодписейОрганизации КАК Сертификаты
		|		ПО (Сертификаты.Ссылка = Профили.Ссылка)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СоглашенияОбИспользованииЭД.ИсходящиеДокументы КАК Соглашения
		|		ПО (Соглашения.ПрофильНастроекЭДО = Профили.Ссылка)
		|ГДЕ
		|	Соглашения.Ссылка = &Ссылка
		|	И (НЕ Соглашения.Ссылка.Организация ЕСТЬ NULL 
		|				И Профили.Организация <> Соглашения.Ссылка.Организация
		|			ИЛИ НЕ Сертификаты.Сертификат.Организация ЕСТЬ NULL 
		|				И Профили.Организация <> Сертификаты.Сертификат.Организация)";
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		
		Результат = (Запрос.Выполнить().Выбрать().Количество() = 0);
		
		Возврат Результат;
		
	КонецЕсли;
	
КонецФункции

// Дополняет массив пакетов, которые будут распаковываться, не распакованными пакетами.
// 
// Параметры:
// ПакетыСоСвойствами - массив, элементами которого являются структура, которая содержит
// ссылка на документ ПакетЭД и параметры, необходимые для его распаковки
//
Процедура ДополнитьПакетамиКРаспаковке(ПакетыСоСвойствами, ПрофилиЭДО) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПакетЭД.Ссылка КАК Пакет
	|ИЗ
	|	Документ.ПакетЭД КАК ПакетЭД
	|ГДЕ
	|	ПакетЭД.СтатусПакета = &СтатусПакета
	|	И ПакетЭД.ПометкаУдаления = ЛОЖЬ
	|	И ПакетЭД.ПрофильНастроекЭДО В (&ПрофилиЭДО)
	|	И НЕ ПакетЭД.Ссылка В (&НовыеПакеты)";
	
	НовыеПакеты = Новый Массив;
	Для Каждого ЭлементМассива Из ПакетыСоСвойствами Цикл
		НовыеПакеты.Добавить(ЭлементМассива.ПакетЭД);
	КонецЦикла;
	
	Запрос.УстановитьПараметр("НовыеПакеты", НовыеПакеты);
	Запрос.УстановитьПараметр("ПрофилиЭДО", ПрофилиЭДО);
	Запрос.УстановитьПараметр("СтатусПакета", Перечисления.СтатусыПакетовЭД.КРаспаковке);

	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	МассивПЭД = Результат.Выгрузить().ВыгрузитьКолонку("Пакет");
	ПараметрыРаспаковки = ОпределитьПараметрыРаспаковки(МассивПЭД);
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ПакетыСоСвойствами, ПараметрыРаспаковки);
	
КонецПроцедуры

// Устанавливает соединение с сервером ЭДО, вызывает метод API
//
Процедура ПолучитьСвойстваУведомленийЭДО(АдресРесурса, ВидОперации, СтруктураПараметровЗапросаМаркера, СвойстваУведомлений) Экспорт
	
		
	Если Не СтруктураПараметровЗапросаМаркера.Свойство("МаркерРасшифрованный") Тогда
		
		ПараметрыАутентификации = СтруктураПараметровЗапросаМаркера.ПараметрыАутентификации;
		
		ЗашифрованныйМаркер = ЗашифрованныйМаркер(СтруктураПараметровЗапросаМаркера, ПараметрыАутентификации);
		РасшифрованныйМаркер = РасшифрованныеДанные(ЗашифрованныйМаркер, СтруктураПараметровЗапросаМаркера.Пароль);
		
	Иначе
		
		РасшифрованныйМаркер = СтруктураПараметровЗапросаМаркера.МаркерРасшифрованный;
		
	КонецЕсли;
	
	Если РасшифрованныйМаркер = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Маркер = ЭлектронныеДокументыСлужебныйВызовСервера.СтрокаИзДвоичныхДанных(РасшифрованныйМаркер);
	
	РезультатXDTO = Неопределено;
	СпособОбменаЭД = СтруктураПараметровЗапросаМаркера.СпособОбменаЭД;
	
	ЭлектронныеДокументыВнутренний.ВыполнитьМетодСервераЭДО(АдресРесурса, Маркер, СпособОбменаЭД, РезультатXDTO);
	
	Если РезультатXDTO = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СвойстваУведомлений = ПустыеСвойстваУведомлений();
	
	СвойстваУведомлений.ВключитьПодписку = ЗначениеСтатуса(РезультатXDTO.Total.Status);
	СвойстваУведомлений.ЭлектроннаяПочта = РезультатXDTO.Mail;
	СвойстваУведомлений.Приглашения = ЗначениеСтатуса(РезультатXDTO.NewInvitations.Status);
	СвойстваУведомлений.Ответы = ЗначениеСтатуса(РезультатXDTO.NewInvitationResults.Status);
	СвойстваУведомлений.НовыеЭД = ЗначениеСтатуса(РезультатXDTO.NewMessages.Status);
	СвойстваУведомлений.СтарыеЭД = ЗначениеСтатуса(РезультатXDTO.UnfinishedMessages.Status);
	СвойстваУведомлений.Сертификаты = ЗначениеСтатуса(РезультатXDTO.CertExpiration.Status);
	
КонецПроцедуры

Процедура ЗаполнитьКонтестЭДО(Контекст) Экспорт
	
	Контекст.АвторизацияНаСервере  = ВыполнятьАвторизациюНаСервере();
	Контекст.КриптографияНаСервере = ВыполнятьКриптооперацииНаСервере();
	
КонецПроцедуры

// Процедура - Обновить свойства уведомлений ЭДО
//
// Параметры:
//  АдресРесурса						 - Строка - Имя вызываемого метода сервиса.
//  СтруктураПараметровЗапросаМаркера	 - Структура 
//    * СертификатПодписи - СпрвочникСсылка - Сертиификат профиля
//    * СпособОбменаЭД - ПеречислениеСсылка.СпособыОбменаЭД
//    * ИдентификаторОрганизации - Строка - Идентификатор организации в сервисе 1С-ЭДО
//    * ПараметрыАутентификации - Структура - Заполняется методом "ЭлектронныеДокументыСлужебныйКлиент.АутентификацияНаСайте()"
//    * Пароль - Строка - пароль к сертификату.
//
Процедура ОбновитьСвойстваУведомленийЭДО(АдресРесурса, СтруктураПараметровЗапросаМаркера) Экспорт
	
	ПараметрыАутентификации = СтруктураПараметровЗапросаМаркера.ПараметрыАутентификации;
	
	Если Не СтруктураПараметровЗапросаМаркера.Свойство("МаркерРасшифрованный") Тогда
		
		ЗашифрованныйМаркер = ЗашифрованныйМаркер(СтруктураПараметровЗапросаМаркера, ПараметрыАутентификации);
		РасшифрованныйМаркер = РасшифрованныеДанные(ЗашифрованныйМаркер, СтруктураПараметровЗапросаМаркера.Пароль);
		
	Иначе
		
		РасшифрованныйМаркер = СтруктураПараметровЗапросаМаркера.МаркерРасшифрованный;
		
	КонецЕсли;
	
	Если РасшифрованныйМаркер = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Маркер = ЭлектронныеДокументыСлужебныйВызовСервера.СтрокаИзДвоичныхДанных(РасшифрованныйМаркер);
	
	РезультатXDTO = Неопределено;
	СпособОбменаЭД = СтруктураПараметровЗапросаМаркера.СпособОбменаЭД;
	
	ЭлектронныеДокументыВнутренний.ВыполнитьМетодСервераЭДО(АдресРесурса, Маркер, СпособОбменаЭД, РезультатXDTO);
	
КонецПроцедуры

Функция ПустыеСвойстваУведомлений()
	
	Свойства = Новый Структура;
	Свойства.Вставить("ВключитьПодписку", Неопределено);
	Свойства.Вставить("ЭлектроннаяПочта", Неопределено);
	Свойства.Вставить("Приглашения", Неопределено);
	Свойства.Вставить("Ответы", Неопределено);
	Свойства.Вставить("НовыеЭД", Неопределено);
	Свойства.Вставить("СтарыеЭД", Неопределено);
	Свойства.Вставить("Сертификаты", Неопределено);
	
	Возврат Свойства;
	
КонецФункции

Функция ЗначениеСтатуса(ЗначениеСтатусаВФайле)
	
	Возврат ЭлектронныеДокументыСлужебный.ЗначениеСтатуса(ЗначениеСтатусаВФайле);
	
КонецФункции

// Проверяет будет ли пользователю показываться оповещение о наличии новых эд в сервисе 1С-ЭДО
// Возвращаемое значение:
//   Булево - результат проверки.
//
Функция ОповещатьОНовыхЭД() Экспорт
	
	Оповещать = Ложь;
	Если ПолучитьЗначениеФункциональнойОпции("ИспользоватьОбменЭД")
		И ЕстьПравоОбработкиЭД(Ложь) И ЕстьПроверкаНовыхЭД() Тогда
		Оповещать = Истина;
	КонецЕсли;
	
	Возврат Оповещать;
	
КонецФункции

// Только для внутреннего использования
Функция ИмяНаличиеОбъектаРеквизитаВПрикладномРешении(ИмяПараметра) Экспорт
	
	Возврат ЭлектронныеДокументыПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении(ИмяПараметра);
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Сбербанк

Функция АдресВнешнейКомпонентыСбербанка() Экспорт
	
	МакетВК = Обработки.ОбменЭлектроннымиДокументамиСБанком.ПолучитьМакет("infocrypt_sbrf_native");
	Возврат ПоместитьВоВременноеХранилище(МакетВК, Новый УникальныйИдентификатор);

КонецФункции

// Возвращает ссылку на соглашение ЭД для переданного ЭД
//
// Параметры
//  <ЭД>  - <СправочникСсылка.ЭДПрисоединенныеФайлы> - электронный документ
//
// Возвращаемое значение:
//   <СправочникСсылка.СоглашенияОбИспользованииЭД> - соглашение ЭД
//
Функция СоглашениеЭД(ЭД) Экспорт
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭД, "СоглашениеЭД");
	
КонецФункции

//Удаляет идентификатор из регистра, чтобы в дальнейшем не происходил запрос состояния по нему
//
// Параметры:
//   СоглашениеЭД - СправочникСсылка.СоглашениеОбИспользованииЭД - соглашение со сбербанком
//   Идентификатор - Строка - идентификатор запроса
//   ВидЭД - ПеречислениеСсылка.ВидыЭД - вид электронного документа
//
Процедура УдалитьИдентификаторЗапроса(СоглашениеЭД, Идентификатор, ВидЭД) Экспорт

	МенеджерЗаписи = РегистрыСведений.ИдентификаторыЗапросовБанка.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.СоглашениеЭД = СоглашениеЭД;
	МенеджерЗаписи.Идентификатор = Идентификатор;
	МенеджерЗаписи.ВидЭД = ВидЭД;
	Попытка
		МенеджерЗаписи.Удалить();
	Исключение
		ШаблонСообщения = НСтр("ru = '%1. (подробности см. в Журнале регистрации).'");
		КраткоеПредставлениеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
										ШаблонСообщения, КраткоеПредставлениеОшибки);
		Операция = НСтр("ru = 'Удаление идентификатора запроса банка'");
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ОбработатьИсключениеПоЭДНаСервере(Операция, ПодробноеПредставлениеОшибки, ТекстСообщения, 1);
	КонецПопытки;
	
КонецПроцедуры

// только для внутреннего использования
Функция ПредставлениеИздателя(СтруктураДанных) Экспорт
	
	СтрокаВозврата = "";
	
	Для каждого Элемент ИЗ СтруктураДанных Цикл
		СтрокаВозврата = СтрокаВозврата + Элемент.ключ + "=" + Элемент.Значение + ", ";
	КонецЦикла;
	
	СтрокаВозврата = Сред(СтрокаВозврата, 1, СтрДлина(СтрокаВозврата) - 2);
	
	Возврат СтрокаВозврата;
	
КонецФункции

// Возвращает структуру данных сертификата
//
// Параметры:
// Отпечаток - отпечаток сертификата
//
// Возвращаемое значение:
// Структура, содержит данные сертификата
//
Функция ИнформацияОСертификатеПодписи(Отпечаток)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СертификатыЭЦП.ФайлСертификата
	|ИЗ
	|	Справочник.СертификатыЭЦП КАК СертификатыЭЦП
	|ГДЕ
	|	СертификатыЭЦП.Отпечаток = &Отпечаток";
	Запрос.УстановитьПараметр("Отпечаток", Отпечаток);
	ВыборкаСертификатов = Запрос.Выполнить().Выбрать();
	Если ВыборкаСертификатов.Следующий() Тогда
		СтруктураВозврата = Новый Структура;
		Сертификат = Новый СертификатКриптографии(ВыборкаСертификатов.ФайлСертификата.Получить());
		СтруктураВозврата.Вставить("Издатель",        Сертификат.Издатель);
		СтруктураВозврата.Вставить("СерийныйНомер",   Сертификат.СерийныйНомер);
		СтруктураВозврата.Вставить("ФайлСертификата", ВыборкаСертификатов.ФайлСертификата);
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Заполняет в схеме подписи и Формирует файл пакета для отправки в банк
//
// Параметры
//  ЭДСсылка - СправочникСсылка.ЭДПрисоединенныеФайлы - ссылка на электронный документ
//  СоглашениеЭД - СправочникСсылка.СоглашениеОбИспользованииЭД - соглашение с банком
//  ИдентификаторЗапроса - Строка - возваращаемый идентификатор запроса
//  ИдентификаторОрганизации - Строка - идентификатор клиента банка
//
// Возвращаемое значение:
// Структура с данными файла или Неопределено
//
Функция ПолучитьФайлПакетаСбербанка(Знач ЭДСсылка, Знач СоглашениеЭД, ИдентификаторЗапроса, ИдентификаторОрганизации) Экспорт

	ДанныеФайла = ЭлектронныеДокументыСлужебный.ПолучитьДанныеФайла(ЭДСсылка);
	ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
	ВремФайл = ПолучитьИмяВременногоФайла();
	ФайлПакета = ПолучитьИмяВременногоФайла();
	ДвоичныеДанныеФайла.Записать(ВремФайл);
		
	ОбъектXML = Новый ЧтениеXML;
	ПространствоИмен = "http://bssys.com/upg/request";
	
	Попытка
		ОбъектXML.ОткрытьФайл(ВремФайл);
		
		ЭД = ФабрикаXDTO.ПрочитатьXML(ОбъектXML);
		
		Если ЭД.Тип() = ЭлектронныеДокументыВнутренний.ПолучитьТипЗначенияCML("PayDocRu", ПространствоИмен) Тогда
			ТекстОшибки = "";
			ИдентификаторОрганизации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СоглашениеЭД, "ИдентификаторОрганизации");
			Request = ЭлектронныеДокументыВнутренний.ПолучитьОбъектТипаCML("Request",ПространствоИмен);
			ИдентификаторЗапроса = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭДСсылка, "УникальныйИД");
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(
				Request, "requestId", ИдентификаторЗапроса, Истина, ТекстОшибки);
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(
				Request, "orgId", ИдентификаторОрганизации, Истина, ТекстОшибки);
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Request, "version",  "1.0",               Истина, ТекстОшибки);
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Request, "sender",   "1С: Предприятие 8", Истина, ТекстОшибки);
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Request, "receiver", "SBBOL_DBO",         Истина, ТекстОшибки);
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Request, "PayDocRu", ЭД,                  Истина, ТекстОшибки);
			Для Каждого ЭЦП из ЭДСсылка.ЭлектронныеЦифровыеПодписи Цикл  
				Подпись = ЭЦП.Подпись.Получить();
				ДанныеСертификата = ИнформацияОСертификатеПодписи(ЭЦП.Отпечаток);
				Если ДанныеСертификата = Неопределено Тогда
					ВызватьИсключение Нстр("ru='Не найден сертификат установленной подписи'");
				КонецЕсли;
				DigitalSign = ЭлектронныеДокументыВнутренний.ПолучитьОбъектТипаCML("DigitalSign", "http://bssys.com/upg/request");
				ПредставлениеИздателя = ПредставлениеИздателя(ДанныеСертификата.Издатель);
				ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(DigitalSign, "Issuer", ПредставлениеИздателя, Истина);
				СтрокаСерийныйНомер = Строка(ДанныеСертификата.СерийныйНомер);
				СтрокаСерийныйНомер = СтрЗаменить(СтрокаСерийныйНомер, " ", "");
				ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(DigitalSign, "SN", СтрокаСерийныйНомер, Истина);
				ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(DigitalSign, "Value", Подпись, Истина);
				Request.Sign.Добавить(DigitalSign);
			КонецЦикла;
			Request.Проверить();
		ИначеЕсли ЭД.Тип() = ЭлектронныеДокументыВнутренний.ПолучитьТипЗначенияCML("StmtReqType", ПространствоИмен) Тогда
			ТекстОшибки = "";
			ИдентификаторОрганизации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СоглашениеЭД, "ИдентификаторОрганизации");
			Request = ЭлектронныеДокументыВнутренний.ПолучитьОбъектТипаCML("Request", ПространствоИмен);
			ИдентификаторЗапроса = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭДСсылка, "УникальныйИД");
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(
				Request, "requestId", ИдентификаторЗапроса, Истина, ТекстОшибки);
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(
				Request, "orgId", ИдентификаторОрганизации, Истина, ТекстОшибки);
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Request, "version",  "1.0",               Истина, ТекстОшибки);
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Request, "sender",   "1С: Предприятие 8", Истина, ТекстОшибки);
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Request, "receiver", "SBBOL_DBO",         Истина, ТекстОшибки);
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Request, "StmtReq",  ЭД,                  Истина, ТекстОшибки);
			Для Каждого ЭЦП из ЭДСсылка.ЭлектронныеЦифровыеПодписи Цикл
				Подпись = ЭЦП.Подпись.Получить();
				ДанныеСертификата = ИнформацияОСертификатеПодписи(ЭЦП.Отпечаток);
				Если ДанныеСертификата = Неопределено Тогда
					ВызватьИсключение Нстр("ru = 'Не найден сертификат установленной подписи'");
				КонецЕсли;
				DigitalSign = ЭлектронныеДокументыВнутренний.ПолучитьОбъектТипаCML("DigitalSign", "http://bssys.com/upg/request");
				ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(
														DigitalSign,
														"Issuer",
														ПредставлениеИздателя(ДанныеСертификата.Издатель),
														Истина);
				СтрокаСерийныйНомер = Строка(ДанныеСертификата.СерийныйНомер);
				СтрокаСерийныйНомер = СтрЗаменить(СтрокаСерийныйНомер, " ", "");
				ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(DigitalSign, "SN",    СтрокаСерийныйНомер, Истина);
				ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(DigitalSign, "Value", Подпись,             Истина);
				Request.Sign.Добавить(DigitalSign);
			КонецЦикла;
			Request.Проверить();
		Иначе
			ВызватьИсключение Нстр("ru='Неизвестный формат файла'");
		КонецЕсли;
		ОбъектXML.Закрыть();
		УдалитьФайлы(ВремФайл);
		ЭлектронныеДокументыВнутренний.ВыгрузитьЭДвФайл(Request, ФайлПакета, , "UTF-8");
		ДвоичныеДанныеПакета = Новый ДвоичныеДанные(ФайлПакета);
		УдалитьФайлы(ФайлПакета);
		СсылкаНаХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанныеПакета);
		ДанныеФайла.СсылкаНаДвоичныеДанныеФайла = СсылкаНаХранилище;
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;
	Исключение
		ОбъектXML.Закрыть();
		ТекстОшибки = НСтр("ru = 'Возникла ошибка при формировании пакета данных банка'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки + Символы.ПС + ОписаниеОшибки());
		УдалитьФайлы(ФайлПакета);
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат ДанныеФайла;

КонецФункции

// Записывает событие в журнал аудита
//
// Параметры
//  <СоглашениеЭД>  - <СправочникСсылка.СоглашениеОбИспользованииЭД> - соглашение об обмене электронными документами
//  <ОписаниеСобытия>  - <строка> - текстовое описание события для отражения в журнале
//  <ТекстСообщения>  - <строка> - текст с данными
//
Процедура ЗаписатьСобытиеВЖурналАудита(СоглашениеЭД, ОписаниеСобытия, ТекстСообщения) Экспорт
		
	Идентификатор = Строка(Новый УникальныйИдентификатор);

	НовЗапись = РегистрыСведений.ЖурналАудитаСбербанк.СоздатьМенеджерЗаписи();
	НовЗапись.ИдентификаторСобытия = Идентификатор;
	НовЗапись.Описание = ОписаниеСобытия;
	НовЗапись.Период = ТекущаяДатаСеанса();
	НовЗапись.Пользователь = ПараметрыСеанса.ТекущийПользователь;
	НовЗапись.СоглашениеЭД = СоглашениеЭД;
	НовЗапись.ТекстСообщения = Новый ХранилищеЗначения(ТекстСообщения);
	НовЗапись.Записать();
	
КонецПроцедуры // ЗаписатьСобытиеВЖурналАудита()

 // Устанавливает статус электронного документа
 //
 // Параметры
 //  <ЭД>  - <СправочникСсылка.ЭдПрисоединенныеФайлы> - ссылка на электронный документ
 //  <СтатусЭД>  - <ПеречислениеСсылка.СтатусыЭД> - новый статус электронного документа
 //
Процедура УстановитьСтатусЭД(ЭД, СтатусЭД) Экспорт
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("СтатусЭД", СтатусЭД);
	ЭлектронныеДокументыСлужебный.ИзменитьПоСсылкеПрисоединенныйФайл(ЭД, СтруктураПараметров, Ложь);
	
КонецПроцедуры

 // Устанавливает статус электронного документа
 //
 // Параметры
 //  МассивЭД  - Массив - ссылки на электронные документы
 //  СтатусЭД  - ПеречислениеСсылка.СтатусыЭД - новый статус электронного документа
 //
Процедура УстановитьСтатусыЭД(МассивЭД, СтатусЭД) Экспорт
	
	Для Каждого ЭД Из МассивЭД Цикл
		УстановитьСтатусЭД(ЭД, СтатусЭД);
	КонецЦикла;
	
КонецПроцедуры

// Сохраняет идентификаторы запросов для дальнейшего запроса статусов
//
// Параметры
//  <МассивИдентификаторов>  - <Массив> - массив полученных идентификаторов запросов
//  <СоглашениеЭД>  - <СправочникСсылка.СоглашениеОбИспользованииЭД> - соглашение об обмене электронными документами
//  <ВидЭД>  - <Перечисления.ВидыЭД> - вид электронного документа
//
Процедура СохранитьИдентификаторы(МассивИдентификаторов, СоглашениеЭД, ВидЭД) Экспорт
	
	Для Каждого Идентификатор Из МассивИдентификаторов Цикл
		НовЗапись = РегистрыСведений.ИдентификаторыЗапросовБанка.СоздатьМенеджерЗаписи();
		НовЗапись.Идентификатор = Идентификатор;
		НовЗапись.СоглашениеЭД = СоглашениеЭД;
		НовЗапись.ВидЭД = ВидЭД;
		НовЗапись.Записать();
	КонецЦикла;
	
КонецПроцедуры

// Подготавливает текст запроса для получения ночной выписки
//
// Параметры
//  <ИдентификаторЗапроса>  - <строка> - уникальный идентификатор запроса
//  <ИдентификаторОрганизации>  - <строка> - уникальный идентификатор организации в банковской системе
//  <ЭЦП>  - <строка> - электронная подпись дайджеста
//  <СертификатПодписи>  - <СправочникСсылка.СертификатыЭЦП> - ссылка на сертификат установленной подписи
//
// Возвращаемое значение:
// <Строка> - текст запроса ночной выписки
//
Функция ТекстЗапросаНочнойВыписки(ИдентификаторЗапроса, ИдентификаторОрганизации, ЭЦП, СертификатПодписи) Экспорт

	ПространствоИмен = "http://bssys.com/upg/request";
	
	ТекстОшибки = "";
	
	Попытка

		Request = ЭлектронныеДокументыВнутренний.ПолучитьОбъектТипаCML("Request", ПространствоИмен);
		ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(
											Request,
											"requestId",
											ИдентификаторЗапроса,
											Истина,
											ТекстОшибки);
		
		ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(
											Request,
											"orgId",
											ИдентификаторОрганизации,
											Истина,
											ТекстОшибки);
		ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Request, "version",  "1.0",               Истина, ТекстОшибки);
		ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Request, "sender",   "1С: Предприятие 8", Истина, ТекстОшибки);
		ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Request, "receiver", "SBBOL_DBO",         Истина, ТекстОшибки);
		Incoming = ЭлектронныеДокументыВнутренний.ПолучитьОбъектТипаCML("Request.Incoming", ПространствоИмен);
		ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Request, "Incoming", Incoming, Истина, ТекстОшибки);
		
		Отпечаток = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СертификатПодписи, "Отпечаток");
		
		ДанныеСертификата = ИнформацияОСертификатеПодписи(Отпечаток);
		Если ДанныеСертификата = Неопределено Тогда
			ВызватьИсключение Нстр("ru='Не найден сертификат установленной подписи'");
		КонецЕсли;
		DigitalSign = ЭлектронныеДокументыВнутренний.ПолучитьОбъектТипаCML("DigitalSign","http://bssys.com/upg/request");
		ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(
											DigitalSign,
											"Issuer",
											ПредставлениеИздателя(ДанныеСертификата.Издатель),
											Истина);
		СтрокаСерийныйНомер = Строка(ДанныеСертификата.СерийныйНомер);
		СтрокаСерийныйНомер = СтрЗаменить(СтрокаСерийныйНомер," ","");
		ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(DigitalSign, "SN",    СтрокаСерийныйНомер, Истина);
		ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(DigitalSign, "Value", ЭЦП,                 Истина);
		Request.Sign.Добавить(DigitalSign);
				
		Request.Проверить();
		
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ВызватьИсключение НСтр("ru = 'Ошибка формирования запроса ночной выписки'");
		КонецЕсли;
		
		Запись = Новый ЗаписьXML;
		Запись.УстановитьСтроку();
		ФабрикаXDTO.ЗаписатьXML(Запись, Request);
		ТекстЗапроса = Запись.Закрыть();
		
	Исключение
		
		ШаблонСообщения = НСтр("ru = '%1. (подробности см. в Журнале регистрации).'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
															ШаблонСообщения,
															КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ОбработатьИсключениеПоЭДНаСервере(
				НСтр("ru = 'Формирование ЭД'"),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
				ТекстСообщения,
				1);
		Возврат "";
		
	КонецПопытки;
	Возврат ТекстЗапроса;
	
КонецФункции

// Получает массив идентификаторов для дальнейшего формирования запроса в банк 
//         
// Параметры
//  <СоглашениеЭД>  - <СправочникСсылка.СоглашениеОбИспользованииЭД> - соглашение об обмене электронными документами
//  <ВидЭД>  - <Перечисления.ВидыЭД> - Вид электронного документа
//
Функция МассивИдентификаторовЗапроса(СоглашениеЭД, ВидЭД) Экспорт
	
	МассивИдентификаторов = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ИдентификаторыЗапросовБанка.Идентификатор
	|ИЗ
	|	РегистрСведений.ИдентификаторыЗапросовБанка КАК ИдентификаторыЗапросовБанка
	|ГДЕ
	|	ИдентификаторыЗапросовБанка.СоглашениеЭД = &СоглашениеЭД
	|	И ИдентификаторыЗапросовБанка.ВидЭД = &ВидЭД";
	Запрос.УстановитьПараметр("СоглашениеЭД", СоглашениеЭД);
	Запрос.УстановитьПараметр("ВидЭД", ВидЭД);
	ВыборкаИдентификаторов = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаИдентификаторов.Следующий() Цикл
		МассивИдентификаторов.Добавить(ВыборкаИдентификаторов.Идентификатор);
	КонецЦикла;
	
	Возврат МассивИдентификаторов;

КонецФункции

// Выполняет необходимые действия для фиксации в учете ответа банка
//
// Параметры
//  <МассивОтветов> - <Массив> - массив строк с ответами
//  <СоглашениеЭД> - <СправочникСсылка.СоглашениеОбИспользованииЭД> - соглашение
//  <ВидЭД> - <Перечисление.ВидыЭД> - вид электронного документа
//  <Идентификатор> - <Массив> - массив новых полученных ЭД
//  <Идентификатор> - <Строка> - идентификатор запроса, на который пришел ответ
//
Процедура ОбработатьОтветыСбербанка(
					МассивОтветов,
					СоглашениеЭД,
					ВидЭД,
					МассивНовыхЭД,
					Идентификатор = Неопределено) Экспорт

	Для Каждого Ответ Из МассивОтветов Цикл
		ЧтениеXML = Новый ЧтениеXML;
		ЧтениеXML.УстановитьСтроку(Ответ);
		Попытка
			ЭД = ФабрикаXDTO.ПрочитатьXML(
								ЧтениеXML,
								ЭлектронныеДокументыВнутренний.ПолучитьТипЗначенияCML("Response", "http://bssys.com/upg/response"));
			ЭД.Проверить();
			СохранитьОтветСбербанка(ЭД, СоглашениеЭД, Идентификатор, ВидЭД, МассивНовыхЭД);
		Исключение
			УдалитьИдентификаторЗапроса(СоглашениеЭД, Идентификатор, ВидЭД);
			ЧтениеXML.Закрыть();
			ТекстСообщения = НСтр("ru = 'Возникла ошибка при чтении полученных данных из банка" + Символы.ПС
							+ "Подробности см. в журнале регистрации'");
			ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'Получение данных из банка'"), ТекстОшибки, ТекстСообщения, 1);
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

// Формирует соответствие установленных на ЭД подписей и данных сертификатов
//
// Параметры:
// ЭД - СправочникСсылка.ЭДПрисоединенныеФайлы
//
// Возвращаемое значение:
// Соответствие - содержит строки данных установленных подписей и строки данных сертификатов в формате BASE64
//
Функция ДанныеУстановленныхПодписейИСертификатов(ЭД) Экспорт
	
	СоответствиеВозврата = Новый Соответствие;

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЭДПрисоединенныеФайлыЭлектронныеЦифровыеПодписи.Подпись,
	|	ЭДПрисоединенныеФайлыЭлектронныеЦифровыеПодписи.Сертификат
	|ИЗ
	|	Справочник.ЭДПрисоединенныеФайлы.ЭлектронныеЦифровыеПодписи КАК ЭДПрисоединенныеФайлыЭлектронныеЦифровыеПодписи
	|ГДЕ
	|	ЭДПрисоединенныеФайлыЭлектронныеЦифровыеПодписи.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", ЭД);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ДвоичныеДанныеПодписи = Выборка.Подпись.Получить();
		СтрокаЭЦП = Base64Строка(ДвоичныеДанныеПодписи);
		СтрокаЭЦП = СтрЗаменить(СтрокаЭЦП, Символы.ПС, "");
		СтрокаЭЦП = СтрЗаменить(СтрокаЭЦП, Символы.ВК, "");
		СтрокаСертификата = СертификатВФорматеBase64(Выборка.Сертификат);
		СоответствиеВозврата.Вставить(СтрокаЭЦП, СтрокаСертификата);
	КонецЦикла;
	
	Возврат СоответствиеВозврата;
	
КонецФункции

// Подготавливает строку (дайджест) для дальнейшей подписи в формате Base64
//
// Параметры:
// ИмяФайла - Строка - путь к файлу данных
//
// Возвращаемое значение:
//Строка
//
Функция Дайджест(ИмяФайла, СоглашениеЭД) Экспорт
	
	ИдентификаторОрганизации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СоглашениеЭД, "ИдентификаторОрганизации");
	Результат = ЭлектронныеДокументыВнутренний.СформироватьДеревоРазбора(ИмяФайла);
	
	Если Результат = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	ДеревоРазбора = Результат.ДеревоРазбора;
	СтрокаОбъекта = Результат.СтрокаОбъекта;
	

	ДанныеЗаполнения = Новый СписокЗначений;

	ВидЭД = СтрокаОбъекта.ВидЭД;
	
	Если ВидЭД = Перечисления.ВидыЭД.ПлатежноеПоручение Тогда
		
		СтрокаВозврата = "ATTRIBUTES" + Символ(10) + "OrgId=" + ИдентификаторОрганизации + Символ(10) + "FIELDS"
			+ Символ(10);
		НомерДокумента = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																ДеревоРазбора,
																СтрокаОбъекта,
																"НомерДокумента");
		ДанныеЗаполнения.Добавить(НомерДокумента, "AccDoc.AccDocNo");
		КодВидаВалютнойОперации = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																ДеревоРазбора,
																СтрокаОбъекта,
																"КодВидаВалютнойОперации");
		ДанныеЗаполнения.Добавить(КодВидаВалютнойОперации, "AccDoc.CodeVO");
		ДатаДокумента = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
																									СтрокаОбъекта,
																									"ДатаДокумента");
		ДанныеЗаполнения.Добавить(Формат(ДатаДокумента, "ДФ=yyyy-MM-dd"), "AccDoc.DocDate");
		СуммаЧислом = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																ДеревоРазбора,
																СтрокаОбъекта,
																"СуммаЧислом");
		ДанныеЗаполнения.Добавить(Формат(СуммаЧислом, "ЧДЦ=2; ЧРД=.; ЧГ="), "AccDoc.DocSum");
		ВидПлатежа = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																ДеревоРазбора,
																СтрокаОбъекта,
																"ВидПлатежа");
		ДанныеЗаполнения.Добавить(ВидПлатежа, "AccDoc.PaytKind");
		Очередность = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																ДеревоРазбора,
																СтрокаОбъекта,
																"Очередность");
		ДанныеЗаполнения.Добавить(Очередность, "AccDoc.Priority");
		НазначениеПлатежа = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
																										СтрокаОбъекта,
																										"НазначениеПлатежа");
		ДанныеЗаполнения.Добавить(НазначениеПлатежа, "AccDoc.Purpose");
		ВидОперации = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																ДеревоРазбора,
																СтрокаОбъекта,
																"ВидОперации");
		ДанныеЗаполнения.Добавить(ВидОперации, "AccDoc.TransKind");
		ДополнительнаяУслуга = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																ДеревоРазбора,
																СтрокаОбъекта,
																"ДополнительнаяУслуга");
		ДанныеЗаполнения.Добавить(ДополнительнаяУслуга, "AccDoc.UrgentSBRF");
		НомерКредитногоДоговора = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																ДеревоРазбора,
																СтрокаОбъекта,
																"НомерКредитногоДоговора");
		ДанныеЗаполнения.Добавить(НомерКредитногоДоговора, "Credit.CredConNum");
		ЦелевоеПоручение = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																ДеревоРазбора,
																СтрокаОбъекта,
																"ЦелевоеПоручение");
		ДанныеЗаполнения.Добавить(ЦелевоеПоручение, "Credit.FlagTargetAssignment");
		ИспользоватьСобственныеСредства = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																ДеревоРазбора,
																СтрокаОбъекта,
																"ИспользоватьСобственныеСредства");
		ДанныеЗаполнения.Добавить(ИспользоватьСобственныеСредства, "Credit.FlagUseOwnMeans");
		ДанныеЗаполнения.Добавить(
			ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "КодБК"),
			"DepartmentalInfo.CBC");
		ПоказательДаты = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																ДеревоРазбора,
																СтрокаОбъекта,
																"ПоказательДаты");
		ДанныеЗаполнения.Добавить(ПоказательДаты, "DepartmentalInfo.DocDate");
		ПоказательНомера = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																ДеревоРазбора,
																СтрокаОбъекта,
																"ПоказательНомера");
		ДанныеЗаполнения.Добавить(ПоказательНомера, "DepartmentalInfo.DocNo");
		СтатусСоставителя = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
																										СтрокаОбъекта,
																										"СтатусСоставителя");
		ДанныеЗаполнения.Добавить(СтатусСоставителя, "DepartmentalInfo.DrawerStatus");
		КодОКАТО = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																ДеревоРазбора,
																СтрокаОбъекта,
																"КодОКАТО");
		ДанныеЗаполнения.Добавить(КодОКАТО, "DepartmentalInfo.OKATO");
		ПоказательОснования = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																ДеревоРазбора,
																СтрокаОбъекта,
																"ПоказательОснования");
		ДанныеЗаполнения.Добавить(ПоказательОснования, "DepartmentalInfo.PaytReason");
		ПоказательТипа = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																ДеревоРазбора,
																СтрокаОбъекта,
																"ПоказательТипа");
		ДанныеЗаполнения.Добавить(ПоказательТипа, "DepartmentalInfo.TaxPaytKind");
		ПоказательПериода = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
																										СтрокаОбъекта,
																										"ПоказательПериода");
		ДанныеЗаполнения.Добавить(ПоказательПериода, "DepartmentalInfo.TaxPeriod");
		НаименованиеБанкаПолучателя = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																ДеревоРазбора,
																СтрокаОбъекта,
																"НаименованиеБанкаПолучателя");
		ДанныеЗаполнения.Добавить(НаименованиеБанкаПолучателя, "Payee.Bank.Name");
		НаселенныйПунктБанкаПолучателя = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																ДеревоРазбора,
																СтрокаОбъекта,
																"НаселенныйПунктБанкаПолучателя");
		ДанныеЗаполнения.Добавить(НаселенныйПунктБанкаПолучателя, "Payee.Bank.BankCity");
		ТипНаселенногоПунктаБанкаПолучателя = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																ДеревоРазбора,
																СтрокаОбъекта,
																"ТипНаселенногоПунктаБанкаПолучателя");
		ДанныеЗаполнения.Добавить(ТипНаселенногоПунктаБанкаПолучателя, "Payee.Bank.SettlementType");
		БИКБанкаПолучателя = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																ДеревоРазбора,
																СтрокаОбъекта,
																"БИКБанкаПолучателя");
		ДанныеЗаполнения.Добавить(БИКБанкаПолучателя, "Payee.Bank.Bic");
		СчетБанкаПолучателя = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																ДеревоРазбора,
																СтрокаОбъекта,
																"СчетБанкаПолучателя");
		ДанныеЗаполнения.Добавить(СчетБанкаПолучателя, "Payee.Bank.CorrespAcc");
		ФилиалБанкаПолучателя = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
																											СтрокаОбъекта,
																											"ФилиалБанкаПолучателя");
		ДанныеЗаполнения.Добавить(ФилиалБанкаПолучателя, "Payee.Filial");
		ИННПолучателя = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
																									СтрокаОбъекта,
																									"ИННПолучателя");
		ДанныеЗаполнения.Добавить(ИННПолучателя, "Payee.INN");
		КПППолучателя = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
																									СтрокаОбъекта,
																									"КПППолучателя");
		ДанныеЗаполнения.Добавить(КПППолучателя, "Payee.KPP");
		ТекстПолучателя = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																ДеревоРазбора,
																СтрокаОбъекта,
																"ТекстПолучателя");
		ДанныеЗаполнения.Добавить(ТекстПолучателя, "Payee.Name");
		НомерСчетаПолучателя = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																ДеревоРазбора,
																СтрокаОбъекта,
																"НомерСчетаПолучателя");
		ДанныеЗаполнения.Добавить(НомерСчетаПолучателя, "Payee.PersonalAcc");
		НаименованиеБанкаПлательщика = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																ДеревоРазбора,
																СтрокаОбъекта,
																"НаименованиеБанкаПлательщика");
		ДанныеЗаполнения.Добавить(НаименованиеБанкаПлательщика, "Payer.Bank.Name");
		НаселенныйПунктБанкаПлательщика = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																ДеревоРазбора,
																СтрокаОбъекта,
																"НаселенныйПунктБанкаПлательщика");
		ДанныеЗаполнения.Добавить(НаселенныйПунктБанкаПлательщика, "Payer.Bank.BankCity");
		ТипНаселенногоПунктаБанкаПлательщика = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																ДеревоРазбора,
																СтрокаОбъекта,
																"ТипНаселенногоПунктаБанкаПлательщика");
		ДанныеЗаполнения.Добавить(ТипНаселенногоПунктаБанкаПлательщика, "Payer.Bank.SettlementType");
		БИКБанкаПлательщика = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																ДеревоРазбора,
																СтрокаОбъекта,
																"БИКБанкаПлательщика");
		ДанныеЗаполнения.Добавить(БИКБанкаПлательщика, "Payer.Bank.Bic");
		СчетБанкаПлательщика = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																ДеревоРазбора,
																СтрокаОбъекта,
																"СчетБанкаПлательщика");
		ДанныеЗаполнения.Добавить(СчетБанкаПлательщика, "Payer.Bank.CorrespAcc");
		ФилиалБанкаПлательщика = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																ДеревоРазбора,
																СтрокаОбъекта,
																"ФилиалБанкаПлательщика");
		ДанныеЗаполнения.Добавить(ФилиалБанкаПлательщика, "Payer.Filial");
		ИННПлательщика = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																ДеревоРазбора,
																СтрокаОбъекта,
																"ИННПлательщика");
		ДанныеЗаполнения.Добавить(ИННПлательщика, "Payer.INN");
		КПППлательщика = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																ДеревоРазбора,
																СтрокаОбъекта,
																"КПППлательщика");
		ДанныеЗаполнения.Добавить(КПППлательщика, "Payer.KPP");
		ТекстПлательщика = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																ДеревоРазбора,
																СтрокаОбъекта,
																"ТекстПлательщика");
		ДанныеЗаполнения.Добавить(ТекстПлательщика, "Payer.Name");
		НомерСчетаПлательщика = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
																											СтрокаОбъекта,
																											"НомерСчетаПлательщика");
		ДанныеЗаполнения.Добавить(НомерСчетаПлательщика, "Payer.PersonalAcc");
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ЗапросВыписки Тогда
		СтрокаВозврата = "ATTRIBUTES" + Символ(10) + "OrgId=" + ИдентификаторОрганизации + Символ(10) + "FIELDS"
			+ Символ(10);
		ДатаНачалаПериода = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
																										СтрокаОбъекта,
																										"ДатаНачала");
		ДанныеЗаполнения.Добавить(Формат(ДатаНачалаПериода, "ДФ=yyyy-MM-dd"), "BeginDate");
		ДатаОкончанияПериода = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																ДеревоРазбора,
																СтрокаОбъекта,
																"ДатаКонца");
		ДанныеЗаполнения.Добавить(Формат(ДатаОкончанияПериода, "ДФ=yyyy-MM-dd"), "EndDate");
		ТипЗапроса = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																ДеревоРазбора,
																СтрокаОбъекта,
																"ТипЗапроса");
		ДанныеЗаполнения.Добавить(ТипЗапроса, "StmtType");
	ИначеЕсли ВидЭд = Перечисления.ВидыЭД.ВыпискаБанка Тогда
		СтрокаВозврата = "ATTRIBUTES" + Символ(10) + "OrgId=" + ИдентификаторОрганизации + Символ(10) + "FIELDS"
							+ Символ(10);
		УчетнаяЗапись = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
																									СтрокаОбъекта,
																									"УчетнаяЗапись");
		ДанныеЗаполнения.Добавить(УчетнаяЗапись, "AccountName");
		Исполнитель = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																ДеревоРазбора,
																СтрокаОбъекта,
																"Исполнитель");
		ДанныеЗаполнения.Добавить(Исполнитель, "Author");
		НомерСчета = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																ДеревоРазбора,
																СтрокаОбъекта,
																"РасчСчет");
		ДанныеЗаполнения.Добавить(НомерСчета, "ComRests.Acc");
		ДатаНачала = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																ДеревоРазбора,
																СтрокаОбъекта,
																"ДатаНачала");
		ДатаНачала = Формат(ДатаНачала, "ДФ=yyyy-MM-dd");
		ДанныеЗаполнения.Добавить(ДатаНачала, "ComRests.BeginDate");
		ДанныеЗаполнения.Добавить(
			ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "БИК"),
			"ComRests.Bic");
		ДатаПредыдущейОперации = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																ДеревоРазбора,
																СтрокаОбъекта,
																"ДатаПредыдущейОперации");
		ДатаПредыдущейОперации = Формат(ДатаПредыдущейОперации, "ДФ=yyyy-MM-dd");
		ДанныеЗаполнения.Добавить(ДатаПредыдущейОперации, "ComRests.DatePLast");
		ДатаОкончания = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
																									СтрокаОбъекта,
																									"ДатаКонца");
		ДатаОкончания = Формат(ДатаОкончания, "ДФ=yyyy-MM-dd");
		ДанныеЗаполнения.Добавить(ДатаОкончания, "ComRests.EndDate");
		ВходящийОстаток = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																ДеревоРазбора,
																СтрокаОбъекта,
																"НачальныйОстаток");
		ВходящийОстаток = Формат(ВходящийОстаток, "ЧДЦ=2; ЧРД=.; ЧН=0.00; ЧГ=");
		ДанныеЗаполнения.Добавить(ВходящийОстаток, "ComRests.EnterBal");
		ВходящийОстатокВНациональнойВалюте = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																ДеревоРазбора,
																СтрокаОбъекта,
																"ВходящийОстатокВНациональнойВалюте");
		ВходящийОстатокВНациональнойВалюте = Формат(ВходящийОстатокВНациональнойВалюте, "ЧДЦ=2; ЧРД=.; ЧН=0.00; ЧГ=");
		ДанныеЗаполнения.Добавить(ВходящийОстатокВНациональнойВалюте, "ComRests.EnterBalNat");
		ДатаПоследнейОперации = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
																											СтрокаОбъекта,
																											"ДатаПоследнейОперации");
		ДатаПоследнейОперации = Формат(ДатаПоследнейОперации, "ДФ=yyyy-MM-dd");
		ДанныеЗаполнения.Добавить(ДатаПоследнейОперации, "ComRests.LastMovetDate");
		ПлановыйИсходящийОстаток = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																ДеревоРазбора,
																СтрокаОбъекта,
																"ПлановыйИсходящийОстаток");
		ПлановыйИсходящийОстаток = Формат(ПлановыйИсходящийОстаток, "ЧДЦ=2; ЧРД=.; ЧН=0.00; ЧГ=");
		ДанныеЗаполнения.Добавить(ПлановыйИсходящийОстаток, "ComRests.PlanOutBal");
		ПлановыйИсходящийОстатокВНациональнойВалюте = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																ДеревоРазбора,
																СтрокаОбъекта,
																"ПлановыйИсходящийОстатокВНациональнойВалюте");
		ПлановыйИсходящийОстатокВНациональнойВалюте = Формат(
															ПлановыйИсходящийОстатокВНациональнойВалюте,
															"ЧДЦ=3; ЧРД=.; ЧН=0.00; ЧГ=");
		ДанныеЗаполнения.Добавить(ПлановыйИсходящийОстатокВНациональнойВалюте, "ComRests.PlanOutBalNat");
		КурсНаНачалоПериода = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																ДеревоРазбора,
																СтрокаОбъекта,
																"КурсНаНачалоПериода");
		КурсНаНачалоПериода = Формат(КурсНаНачалоПериода, "ЧДЦ=4; ЧРД=.; ЧГ=");
		ДанныеЗаполнения.Добавить(КурсНаНачалоПериода, "ComRests.RateIn");
		КурсНаКонецПериода = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																ДеревоРазбора,
																СтрокаОбъекта,
																"КурсНаКонецПериода");
		КурсНаКонецПериода = Формат(КурсНаКонецПериода, "ЧДЦ=4; ЧРД=.; ЧГ=");
		ДанныеЗаполнения.Добавить(КурсНаКонецПериода, "ComRests.RateOut");
		ИсходящийОстаток = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																ДеревоРазбора,
																СтрокаОбъекта,
																"КонечныйОстаток");
		ИсходящийОстаток = Формат(ИсходящийОстаток, "ЧДЦ=2; ЧРД=.; ЧН=0.00; ЧГ=");
		ДанныеЗаполнения.Добавить(ИсходящийОстаток, "ComRests.OutBal");
		ИсходящийОстатокВНациональнойВалюте = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																ДеревоРазбора,
																СтрокаОбъекта,
																"ИсходящийОстатокВНациональнойВалюте");
		ИсходящийОстатокВНациональнойВалюте = Формат(ИсходящийОстатокВНациональнойВалюте, "ЧДЦ=2; ЧРД=.; ЧН=0.00; ЧГ=");
		ДанныеЗаполнения.Добавить(ИсходящийОстатокВНациональнойВалюте, "ComRests.OutBalNat");
		ДатаСоставленияВыписки = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																ДеревоРазбора,
																СтрокаОбъекта,
																"ДатаСоставленияВыписки");
		ДатаСоставленияВыписки = Формат(ДатаСоставленияВыписки, "ДФ=yyyy-MM-ddTЧЧ:мм:сс");
		ДанныеЗаполнения.Добавить(ДатаСоставленияВыписки, "ComRests.StmtDateTime");
		ТипЗапросаВыписки = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
																										СтрокаОбъекта,
																										"ТипЗапросаВыписки");
		ДанныеЗаполнения.Добавить(ТипЗапросаВыписки, "ComRests.StmtType");
		Кредит = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																ДеревоРазбора,
																СтрокаОбъекта,
																"ВсегоПоступило");
		Кредит = Формат(Кредит, "ЧДЦ=2; ЧРД=.; ЧН=0.00; ЧГ=");
		ДанныеЗаполнения.Добавить(Кредит, "CreditSum");
		КредитВНациональнойВалюте = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																ДеревоРазбора,
																СтрокаОбъекта,
																"КредитВНациональнойВалюте");
		КредитВНациональнойВалюте = Формат(КредитВНациональнойВалюте, "ЧДЦ=2; ЧРД=.; ЧН=0.00; ЧГ=");
		ДанныеЗаполнения.Добавить(КредитВНациональнойВалюте, "CreditSumNat");
		ВсегоСписано = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																ДеревоРазбора,
																СтрокаОбъекта,
																"ВсегоСписано");
		Дебет = Формат(ВсегоСписано, "ЧДЦ=2; ЧРД=.; ЧН=0.00; ЧГ=");
		ДанныеЗаполнения.Добавить(Дебет, "DebetSum");
		ДебетВНациональнойВалюте = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																ДеревоРазбора,
																СтрокаОбъекта,
																"ДебетВНациональнойВалюте");
		ДебетВНациональнойВалюте = Формат(ДебетВНациональнойВалюте, "ЧДЦ=2; ЧРД=.; ЧН=0.00; ЧГ=");
		ДанныеЗаполнения.Добавить(ДебетВНациональнойВалюте, "DebetSumNat");
		ДопИнформация = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
																									СтрокаОбъекта,
																									"ДопИнформация");
		ДанныеЗаполнения.Добавить(ДопИнформация, "DocComment");
		ИдентификаторВыписки = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																ДеревоРазбора,
																СтрокаОбъекта,
																"ИдентификаторВыписки");
		ДанныеЗаполнения.Добавить(ИдентификаторВыписки, "DocId");
		НомерДокумента = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																ДеревоРазбора,
																СтрокаОбъекта,
																"НомерДокумента");
		ДанныеЗаполнения.Добавить(НомерДокумента, "DocNum");
		НаименованиеОрганизации = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																ДеревоРазбора,
																СтрокаОбъекта,
																"НаименованиеОрганизации");
		ДанныеЗаполнения.Добавить(НаименованиеОрганизации, "OrgName");
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.Квитанция Тогда
		ИдентификаторДокумента = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																	ДеревоРазбора, СтрокаОбъекта, "ТикетСББОЛ");
		СтрокаВозврата = "ATTRIBUTES" + Символ(10) + "DocId=" + ИдентификаторДокумента + Символ(10)
						+ "OrgId=" + ИдентификаторОрганизации + Символ(10) + "FIELDS" + Символ(10);
		ДатаСписанияСоСчетаПлательщика = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
														ДеревоРазбора, СтрокаОбъекта, "ДатаСписанияСоСчетаПлательщика");
		ДатаСписанияСоСчетаПлательщика = Формат(ДатаСписанияСоСчетаПлательщика, "ДФ=yyyy-MM-dd");
		ДанныеЗаполнения.Добавить(ДатаСписанияСоСчетаПлательщика, "Info.BankDate.ChargeOffDate");
		ДатаПеречисленияПлатежа = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
														ДеревоРазбора, СтрокаОбъекта, "ДатаПеречисленияПлатежа");
		ДатаПеречисленияПлатежа = Формат(ДатаПеречисленияПлатежа, "ДФ=yyyy-MM-dd");
		ДанныеЗаполнения.Добавить(ДатаПеречисленияПлатежа, "Info.BankDate.DPP");
		ДатаПостановкиВКартотеку = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
														ДеревоРазбора, СтрокаОбъекта, "ДатаПостановкиВКартотеку");
		ДатаПостановкиВКартотеку = Формат(ДатаПостановкиВКартотеку, "ДФ=yyyy-MM-dd");
		ДанныеЗаполнения.Добавить(ДатаПостановкиВКартотеку, "Info.BankDate.FileDate");
		ДатаОтметкиБанкомПолучателя = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
														ДеревоРазбора, СтрокаОбъекта, "ДатаОтметкиБанкомПолучателя");
		ДатаОтметкиБанкомПолучателя = Формат(ДатаОтметкиБанкомПолучателя, "ДФ=yyyy-MM-dd");
		ДанныеЗаполнения.Добавить(ДатаОтметкиБанкомПолучателя, "Info.BankDate.RecDate");
		ДатаПоступленияВБанкПлательщика = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
														ДеревоРазбора, СтрокаОбъекта, "ДатаПоступленияВБанкПлательщика");
		ДатаПоступленияВБанкПлательщика = Формат(ДатаПоступленияВБанкПлательщика, "ДФ=yyyy-MM-dd");
		ДанныеЗаполнения.Добавить(ДатаПоступленияВБанкПлательщика, "Info.BankDate.ReceiptDate");
		ДатаОтметкиБанкомПлательщика = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
														ДеревоРазбора, СтрокаОбъекта, "ДатаОтметкиБанкомПлательщика");
		ДатаОтметкиБанкомПлательщика = Формат(ДатаОтметкиБанкомПлательщика, "ДФ=yyyy-MM-dd");
		ДанныеЗаполнения.Добавить(ДатаОтметкиБанкомПлательщика, "Info.BankDate.SignDate");
		АвторСообщения = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
														ДеревоРазбора, СтрокаОбъекта, "АвторСообщения");
		ДанныеЗаполнения.Добавить(АвторСообщения, "Info.MsgFromBank.Author");
		СообщениеИзБанка = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
														ДеревоРазбора, СтрокаОбъекта, "СообщениеИзБанка");
		ДанныеЗаполнения.Добавить(СообщениеИзБанка, "Info.MsgFromBank.Message");
		КодСостоянияДокумента = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
														ДеревоРазбора, СтрокаОбъекта, "КодСостоянияДокумента");
		ДанныеЗаполнения.Добавить(КодСостоянияДокумента, "Info.StatusStateCode");
	КонецЕсли;
	
	ВсегоЗаписей = ДанныеЗаполнения.Количество();
	Индекс = 0;
	Для каждого Элемент из ДанныеЗаполнения Цикл
		Индекс = Индекс + 1;
		Если ЗначениеЗаполнено(Элемент.Значение) Тогда
				СтрокаВозврата= СтрокаВозврата + Элемент.Представление + "=" + Элемент.Значение
								+ ?(Индекс <> ВсегоЗаписей, Символ(10), "");
		КонецЕсли;
	КонецЦикла;

	Если ВидЭД = Перечисления.ВидыЭД.ЗапросВыписки Тогда
		
		СтрокаВозврата = СтрокаВозврата + Символ(10) + "TABLES" + Символ(10) + "Table=Accounts" + Символ(10);
		СтрокиТЧ = СтрокаОбъекта.Строки.НайтиСтроки(Новый Структура("Реквизит", "СтрокаТЧ"));
		Индекс = 0;
		ВсегоЗаписей = СтрокиТЧ.Количество();
		Для Каждого СтрокаТЧ Из СтрокиТЧ Цикл
			Индекс=Индекс + 1;
			БИК = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "БИК");
			НомерСчета = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																ДеревоРазбора,
																СтрокаТЧ,
																"НомерСчета");
			СтрокаВозврата = СтрокаВозврата + "Bic=" + БИК + Символ(10) + "Account=" + НомерСчета + Символ(10)+ "#"
							+ ?(Индекс <> ВсегоЗаписей, Символ(10), "");
		КонецЦикла;
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ВыпискаБанка Тогда
		СтрокаВозврата = СтрокаВозврата + Символ(10) + "TABLES";
		СтрокиТЧ = СтрокаОбъекта.Строки.НайтиСтроки(Новый Структура("Реквизит", "СтрокаТЧ"));
		Индекс = 0;
		ВсегоЗаписей = СтрокиТЧ.Количество();
		Если ВсегоЗаписей > 0 Тогда
			СтрокаВозврата = СтрокаВозврата + Символ(10) + "Table=TransInfo" + Символ(10);
		КонецЕсли;
		Для Каждого СтрокаТЧ Из СтрокиТЧ Цикл
			Индекс=Индекс + 1;
			ДанныеЗаполненияСтроки = Новый СписокЗначений;
			ДатаСписания = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																	ДеревоРазбора,
																	СтрокаТЧ,
																	"ДатаСписания");
			ДатаСписания = Формат(ДатаСписания, "ДФ=yyyy-MM-dd");
			ДанныеЗаполненияСтроки.Добавить(ДатаСписания, "BankDate.ChargeOffDate=");
			ДатаПеречисления = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																	ДеревоРазбора,
																	СтрокаТЧ,
																	"ДатаПеречисления");
			ДатаПеречисления = Формат(ДатаПеречисления, "ДФ=yyyy-MM-dd");
			ДанныеЗаполненияСтроки.Добавить(ДатаПеречисления, "BankDate.Dpp=");
			ДатаПостановкиВКартотеку = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																	ДеревоРазбора,
																	СтрокаТЧ,
																	"ДатаПостановкиВКартотеку");
			ДатаПостановкиВКартотеку = Формат(ДатаПостановкиВКартотеку, "ДФ=yyyy-MM-dd");
			ДанныеЗаполненияСтроки.Добавить(ДатаПостановкиВКартотеку, "BankDate.FileDate=");
			ДатаОтметкиБанкаПолучателя = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																	ДеревоРазбора,
																	СтрокаТЧ,
																	"ДатаОтметкиБанкаПолучателя");
			ДатаОтметкиБанкаПолучателя = Формат(ДатаОтметкиБанкаПолучателя, "ДФ=yyyy-MM-dd");
			ДанныеЗаполненияСтроки.Добавить(ДатаОтметкиБанкаПолучателя, "BankDate.RecDate=");
			ДатаПоступленияВБанкПлательщика = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																	ДеревоРазбора,
																	СтрокаТЧ,
																	"ДатаПоступленияВБанкПлательщика");
			ДатаПоступленияВБанкПлательщика = Формат(ДатаПоступленияВБанкПлательщика, "ДФ=yyyy-MM-dd");
			ДанныеЗаполненияСтроки.Добавить(ДатаПоступленияВБанкПлательщика, "BankDate.ReceiptDate=");
			ДатаОтметкиБанкомПлательщика = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																	ДеревоРазбора,
																	СтрокаТЧ,
																	"ДатаОтметкиБанкомПлательщика");
			ДатаОтметкиБанкомПлательщика =  Формат(ДатаОтметкиБанкомПлательщика, "ДФ=yyyy-MM-dd");
			ДанныеЗаполненияСтроки.Добавить(ДатаОтметкиБанкомПлательщика, "BankDate.SignDate=");
			НомерДокументаБанка = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																	ДеревоРазбора,
																	СтрокаТЧ,
																	"НомерДокументаБанка");
			ДанныеЗаполненияСтроки.Добавить(НомерДокументаБанка, "ComTransInfo.BankNumDoc=");
			КодПодразделения = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																	ДеревоРазбора,
																	СтрокаТЧ,
																	"КодПодразделения");
			КодПодразделения = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																	ДеревоРазбора,
																	СтрокаТЧ,
																	"КодПодразделения");
			ДанныеЗаполненияСтроки.Добавить(КодПодразделения, "ComTransInfo.BranchCode=");
			ДатаПроводки = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																	ДеревоРазбора,
																	СтрокаТЧ,
																	"ДатаСписано");
			ДатаПроводки = Формат(ДатаПроводки, "ДФ=yyyy-MM-ddTЧЧ:мм:сс");
			ДанныеЗаполненияСтроки.Добавить(ДатаПроводки, "ComTransInfo.CarryDate=");
			ПризнакПриложения = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
																											СтрокаТЧ,
																											"ПризнакПриложения");
			ПризнакПриложения = Формат(ПризнакПриложения, "БЛ=0; БИ=1");
			ДанныеЗаполненияСтроки.Добавить(ПризнакПриложения, "ComTransInfo.Dc=");
			ВалютаПлатежа = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
																										СтрокаТЧ,
																										"ВалютаПлатежа");
			ДанныеЗаполненияСтроки.Добавить(ВалютаПлатежа, "ComTransInfo.DocCurr=");
			ДатаРасчетногоДокумента = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																	ДеревоРазбора,
																	СтрокаТЧ,
																	"Дата");
			ДатаРасчетногоДокумента = Формат(ДатаРасчетногоДокумента, "ДФ=yyyy-MM-dd");
			ДанныеЗаполненияСтроки.Добавить(ДатаРасчетногоДокумента, "ComTransInfo.DocDate=");
			НомерРасчетногоДокумента = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																	ДеревоРазбора,
																	СтрокаТЧ,
																	"Номер");
			ДанныеЗаполненияСтроки.Добавить(НомерРасчетногоДокумента, "ComTransInfo.DocNum=");
			СуммаДокумента = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																	ДеревоРазбора,
																	СтрокаТЧ,
																	"Сумма");
			СуммаДокумента = Формат(СуммаДокумента, "ЧДЦ=2; ЧРД=.; ЧН=0.00; ЧГ=");
			ДанныеЗаполненияСтроки.Добавить(СуммаДокумента, "ComTransInfo.DocSum=");
			СуммаДокументаВНациональнойВалюте = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																	ДеревоРазбора,
																	СтрокаТЧ,
																	"СуммаДокументаВНациональнойВалюте");
			СуммаДокументаВНациональнойВалюте = Формат(СуммаДокументаВНациональнойВалюте, "ЧДЦ=2; ЧРД=.; ЧН=0.00; ЧГ=");
			ДанныеЗаполненияСтроки.Добавить(СуммаДокументаВНациональнойВалюте, "ComTransInfo.DocSumNat=");
			ОчередностьПлатежа = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																	ДеревоРазбора,
																	СтрокаТЧ,
																	"Очередность");
			ОчередностьПлатежа = Формат(ОчередностьПлатежа, "ЧДЦ=0; ЧГ=");
			ДанныеЗаполненияСтроки.Добавить(ОчередностьПлатежа, "ComTransInfo.PaymentOrder=");
			ВидПлатежа = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																	ДеревоРазбора,
																	СтрокаТЧ,
																	"ВидПлатежа");
			ДанныеЗаполненияСтроки.Добавить(ВидПлатежа, "ComTransInfo.PaytKind=");
			НазначениеПлатежа = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
																											СтрокаТЧ,
																											"НазначениеПлатежа");
			ДанныеЗаполненияСтроки.Добавить(НазначениеПлатежа, "ComTransInfo.Purpose=");
			ВидОперации = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																	ДеревоРазбора,
																	СтрокаТЧ,
																	"ВидОплаты");
			ДанныеЗаполненияСтроки.Добавить(ВидОперации, "ComTransInfo.TransKind=");
			ДопУслуга = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
																									СтрокаТЧ,
																									"ДопУслуга");
			ДанныеЗаполненияСтроки.Добавить(ДопУслуга, "ComTransInfo.UrgentSBRF=");
			ИдентификаторДокумента = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																	ДеревоРазбора,
																	СтрокаТЧ,
																	"ИдентификаторДокумента");
			ДанныеЗаполненияСтроки.Добавить(ИдентификаторДокумента, "DocId=");
			НаименованиеПолучателя = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																	ДеревоРазбора,
																	СтрокаТЧ,
																	"Получатель");
			ДанныеЗаполненияСтроки.Добавить(НаименованиеПолучателя, "Payee.Name=");
			СчетПолучателя = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																	ДеревоРазбора,
																	СтрокаТЧ,
																	"ПолучательСчет");
			ДанныеЗаполненияСтроки.Добавить(СчетПолучателя, "Payee.PayeeAcc=");
			ИННПолучателя = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
																										СтрокаТЧ,
																										"ПолучательИНН");
			ДанныеЗаполненияСтроки.Добавить(ИННПолучателя, "Payee.PayeeINN=");
			БИКБанкаПолучателя = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																	ДеревоРазбора,
																	СтрокаТЧ,
																	"ПолучательБИК");
			ДанныеЗаполненияСтроки.Добавить(БИКБанкаПолучателя, "PayeeBank.PayeeBankBic=");
			СчетБанкаПолучателя = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																	ДеревоРазбора,
																	СтрокаТЧ,
																	"СчетБанкаПолучателя");
			ДанныеЗаполненияСтроки.Добавить(СчетБанкаПолучателя, "PayeeBank.PayeeBankCorrAcc=");
			НаименованиеБанкаПолучателя = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																	ДеревоРазбора,
																	СтрокаТЧ,
																	"НаименованиеБанкаПолучателя");
			ДанныеЗаполненияСтроки.Добавить(НаименованиеБанкаПолучателя, "PayeeBank.PayeeBankName=");
			НаименованиеПлательщика = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																	ДеревоРазбора,
																	СтрокаТЧ,
																	"Плательщик1");
			ДанныеЗаполненияСтроки.Добавить(НаименованиеПлательщика, "Payer.Name=");
			СчетПлательщика = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																	ДеревоРазбора,
																	СтрокаТЧ,
																	"ПлательщикСчет");
			ДанныеЗаполненияСтроки.Добавить(СчетПлательщика, "Payer.PayerAcc=");
			ИННПлательщика = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																	ДеревоРазбора,
																	СтрокаТЧ,
																	"ПлательщикИНН");
			ДанныеЗаполненияСтроки.Добавить(ИННПлательщика, "Payer.PayerINN=");
			БИКБанкаПлательщика = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																	ДеревоРазбора,
																	СтрокаТЧ,
																	"ПлательщикБИК");
			ДанныеЗаполненияСтроки.Добавить(БИКБанкаПлательщика, "PayerBank.PayerBankBic=");
			СчетБанкаПлательщика = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																	ДеревоРазбора,
																	СтрокаТЧ,
																	"СчетБанкаПлательщика");
			ДанныеЗаполненияСтроки.Добавить(СчетБанкаПлательщика, "PayerBank.PayerBankCorrAcc=");
			НаименованиеБанкаПлательщика = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																	ДеревоРазбора,
																	СтрокаТЧ,
																	"НаименованиеБанкаПлательщика");
																	
			ДанныеЗаполненияСтроки.Добавить(НаименованиеБанкаПлательщика, "PayerBank.PayerBankName=");
			Переоценка = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																	ДеревоРазбора,
																	СтрокаТЧ,
																	"Переоценка");
			ДанныеЗаполненияСтроки.Добавить(Переоценка, "s_TI=");
			КодБюджетнойКлассификации = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																	ДеревоРазбора,
																	СтрокаТЧ,
																	"ПоказательКБК");
			ДанныеЗаполненияСтроки.Добавить(КодБюджетнойКлассификации, "DepartmentalInfo.Cbc=");
			ДатаНалоговогоДокумента = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																	ДеревоРазбора,
																	СтрокаТЧ,
																	"ПоказательДаты");
			ДанныеЗаполненияСтроки.Добавить(ДатаНалоговогоДокумента, "DepartmentalInfo.DocDate=");
			НомерНалоговогоДокумента = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																	ДеревоРазбора,
																	СтрокаТЧ,
																	"ПоказательНомера");
			ДанныеЗаполненияСтроки.Добавить(НомерНалоговогоДокумента, "DepartmentalInfo.DocNo=");
			ПоказательСтатусаНалогоплательщика = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																	ДеревоРазбора,
																	СтрокаТЧ,
																	"СтатусСоставителя");
			ДанныеЗаполненияСтроки.Добавить(ПоказательСтатусаНалогоплательщика, "DepartmentalInfo.DrawerStatus=");
			КПП102 = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																	ДеревоРазбора,
																	СтрокаТЧ,
																	"ПлательщикКПП");
			ДанныеЗаполненияСтроки.Добавить(КПП102, "DepartmentalInfo.Kpp102=");
			КПП103 = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																	ДеревоРазбора,
																	СтрокаТЧ,
																	"ПолучательКПП");
			ДанныеЗаполненияСтроки.Добавить(КПП103, "DepartmentalInfo.Kpp103=");
			ДанныеЗаполненияСтроки.Добавить(
				ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "КодОКАТО"),
				"DepartmentalInfo.Okato=");
			ПоказательОснованияПлатежа = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																	ДеревоРазбора,
																	СтрокаТЧ,
																	"ПоказательОснования");
			ДанныеЗаполненияСтроки.Добавить(ПоказательОснованияПлатежа, "DepartmentalInfo.PaytReason=");
			ТипНалоговогоПлатежа = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																	ДеревоРазбора,
																	СтрокаТЧ,
																	"ПоказательТип");
			ДанныеЗаполненияСтроки.Добавить(ТипНалоговогоПлатежа, "DepartmentalInfo.TaxPaytKind=");
			НалоговыйПериод = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																	ДеревоРазбора,
																	СтрокаТЧ,
																	"ПоказательПериода");
			ДанныеЗаполненияСтроки.Добавить(НалоговыйПериод, "DepartmentalInfo.TaxPeriod=");
			ДатаДокументаКартотека = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																	ДеревоРазбора,
																	СтрокаТЧ,
																	"ДатаОтсылкиДок");
			ДатаДокументаКартотека = Формат(ДатаДокументаКартотека, "ДФ=yyyy-MM-dd");
			ДанныеЗаполненияСтроки.Добавить(ДатаДокументаКартотека, "DiffDoc.DocDateCard=");
			НомерДокументаКартотека = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																	ДеревоРазбора,
																	СтрокаТЧ,
																	"НомерДокументаКартотека");
			ДанныеЗаполненияСтроки.Добавить(НомерДокументаКартотека, "DiffDoc.DocNumberCard=");
			ШифрДокументаКартотека = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																	ДеревоРазбора,
																	СтрокаТЧ,
																	"ШифрДокументаКартотека");
			ДанныеЗаполненияСтроки.Добавить(ШифрДокументаКартотека, "DiffDoc.DocShifr=");
			СрокАкцепта = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																	ДеревоРазбора,
																	СтрокаТЧ,
																	"СрокАкцепта");
			СрокАкцепта = Формат(СрокАкцепта, "ЧДЦ=0; ЧГ=");
			ДанныеЗаполненияСтроки.Добавить(СрокАкцепта, "DiffDoc.LetterOfCreditAcceptDate=");
			ДополнительныеУсловияАккредитива = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																	ДеревоРазбора,
																	СтрокаТЧ,
																	"ДополнУсловия");
			ДанныеЗаполненияСтроки.Добавить(ДополнительныеУсловияАккредитива, "DiffDoc.LetterOfCreditAddCond=");
			ТребуемыеДокументы = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																	ДеревоРазбора,
																	СтрокаТЧ,
																	"ПлатежПоПредст");
			ДанныеЗаполненияСтроки.Добавить(ТребуемыеДокументы, "DiffDoc.LetterOfCreditDemandDocs=");
			НомерСчетаПоставщика = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																	ДеревоРазбора,
																	СтрокаТЧ,
																	"НомерСчетаПоставщика");
			ДанныеЗаполненияСтроки.Добавить(НомерСчетаПоставщика, "DiffDoc.LetterOfCreditPayAcc=");
			УсловияОплатыАккредитива = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																	ДеревоРазбора,
																	СтрокаТЧ,
																	"Условие1");
			ДанныеЗаполненияСтроки.Добавить(УсловияОплатыАккредитива, "DiffDoc.LetterOfCreditPaymCond=");
			СрокДействияАккредитива = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																	ДеревоРазбора,
																	СтрокаТЧ,
																	"СрокПлатежа");
			СрокДействияАккредитива = Формат(СрокДействияАккредитива, "ДФ=yyyy-MM-dd");
			ДанныеЗаполненияСтроки.Добавить(СрокДействияАккредитива, "DiffDoc.LetterOfCreditPeriodVal=");
			ВидАккредитива = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																	ДеревоРазбора,
																	СтрокаТЧ,
																	"ВидАккредитива");
			ДанныеЗаполненияСтроки.Добавить(ВидАккредитива, "DiffDoc.LetterOfCreditType=");
			НомерПлатежа = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																	ДеревоРазбора,
																	СтрокаТЧ,
																	"НомерПлатежа");
			ДанныеЗаполненияСтроки.Добавить(НомерПлатежа, "DiffDoc.NumPaymentCard=");
			СодержаниеОперации = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																	ДеревоРазбора,
																	СтрокаТЧ,
																	"СодержаниеОперации");
			ДанныеЗаполненияСтроки.Добавить(СодержаниеОперации, "DiffDoc.OperContent=");
			УсловиеОплаты = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
																										СтрокаТЧ,
																										"УсловиеОплаты");
			ДанныеЗаполненияСтроки.Добавить(УсловиеОплаты, "DiffDoc.PayingCondition=");
			СуммаОстаткаПлатежа = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																	ДеревоРазбора,
																	СтрокаТЧ,
																	"СуммаОстаткаПлатежа");
			Если НЕ СуммаОстаткаПлатежа = Неопределено Тогда
				СуммаОстаткаПлатежаСтрокой = Формат(СуммаОстаткаПлатежа, "ЧДЦ=2; ЧРД=.; ЧН=0.00; ЧГ=");
				ДанныеЗаполненияСтроки.Добавить(СуммаОстаткаПлатежаСтрокой, "DiffDoc.SumRestCard=");
			КонецЕсли;
			ДополнительнаяИнформация = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																	ДеревоРазбора,
																	СтрокаТЧ,
																	"ДополнительнаяИнформация");
			ДанныеЗаполненияСтроки.Добавить(ДополнительнаяИнформация, "Info=");
			Для каждого Элемент из ДанныеЗаполненияСтроки Цикл
				Если ЗначениеЗаполнено(Элемент.Значение) Тогда
					СтрокаВозврата= СтрокаВозврата + Элемент.Представление + Элемент.Значение + Символ(10);
				КонецЕсли;
			КонецЦикла;
			СтрокаВозврата = СтрокаВозврата + "#" + ?(Индекс <> ВсегоЗаписей, Символ(10), "");
		КонецЦикла;
		
	КонецЕсли;

		
	Возврат СтрокаBase64(СтрокаВозврата);
	
КонецФункции

// Преобразует строку данных в формат Base64
//
// Параметры
//  <СтрокаДанных>  - <строка> - строка данных
//
// Возвращаемое значение:
//   <Строка>   - строка в формате base64
//
Функция СтрокаBase64(СтрокаДанных) Экспорт

	ВремФайл = ПолучитьИмяВременногоФайла();
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.УстановитьТекст(СтрокаДанных);
	ТекстовыйДокумент.Записать(ВремФайл, КодировкаТекста.UTF8, Символы.ПС);
	ДвоичныеДанные = Новый ДвоичныеДанные(ВремФайл);
	СтрокаФорматBase64 = Base64Строка(ДвоичныеДанные);
	СтрокаФорматBase64 = Сред(СтрокаФорматBase64, 5);
	УдалитьФайлы(ВремФайл);
	Возврат СтрокаФорматBase64;

КонецФункции

// Возвращает строку подписанных данных в формате Base64
//
// Параметры
//  <ЭД> - <СправочникСсылка.ЭДПрисоединенныеФайлы> - ссылка на электронный документ
//
// Возвращаемое значение:
//   <Строка>   - данные в формате base64
//
Функция ПодписанныеДанныеBase64(ЭД) Экспорт
	
	СлужебныйЭД = ЭлектронныеДокументыСлужебный.СлужебныйЭДБанка(ЭД);
	ДанныеЭД = ПрисоединенныеФайлы.ПолучитьДвоичныеДанныеФайла(СлужебныйЭД);
	Возврат Base64Строка(ДанныеЭД);
	
КонецФункции

// Записывает событие в журнал регистрации
//
// Параметры
//  <ИмяСобытия> - <Строка> - Название события
//  <Уровень> - <Строка> - Уровень важности события, возможные значения: "Информация", "Ошибка", "Предупреждение", "Примечание"
//  <Данные> - <Произвольный> - Данные, с которыми связано событие
//  <Комментарий> - <Строка> - Произвольная строка комментария к событию.
//
Процедура ЗаписатьВЖурналРегистрации(ОписаниеСобытия, КодСобытия, Уровень, Данные = Неопределено) Экспорт
	
	ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипЗнч(Данные));
	
	ЭлектронныеДокументыСлужебный.ВыполнитьЗаписьСобытияПоЭДВЖурналРегистрации(ОписаниеСобытия,
		КодСобытия, УровеньЖурналаРегистрации[Уровень], ОбъектМетаданных, Данные);
	
КонецПроцедуры

// Сохраняет результат проверки валидности подписей
//
// Параметры
//  <ЭД>  - <СправочникСсылка.ЭДПрисоединенныеФайлы> - электронный документ
//  <РезультатПроверки>  - <Массив> - содержит результаты проверки подписей по индексам
//
Процедура ЗафиксироватьРезультатПроверкиЭЦП(ЭД, РезультатПроверки) Экспорт

	ЭДОбъект = ЭД.ПолучитьОбъект();
	Для Каждого СтрокаПодписи Из ЭДОбъект.ЭлектронныеЦифровыеПодписи Цикл
		Если Не (РезультатПроверки[СтрокаПодписи.НомерСтроки - 1] = Неопределено) Тогда
			СтрокаПодписи.ДатаПроверкиПодписи = ТекущаяДатаСеанса();
			СтрокаПодписи.ПодписьВерна = РезультатПроверки[СтрокаПодписи.НомерСтроки - 1];
		КонецЕсли;
	КонецЦикла;
	ЭДОбъект.Записать();
	
КонецПроцедуры

// Возвращает массив, содержащий тесты запросов состояний электронных документов на обработке
//
// Параметры
//  <СоглашениеЭД> - <СправочникСсылка.СоглашенияОбиспользованииЭД> - соглашение со Сбербанком
//  <ВидЭД> - <ПеречислениеСсылка.ВидыЭД> - вид электронного документа
//
// Возвращаемое значение:
//   <Массив> - содержит тексты запросов
//
Функция МассивЗапросовСостоянийОбработкиДокументов(СоглашениеЭД, ВидЭД) Экспорт
	
	МассивВозврата = Новый Массив;
	
	Запрос = Новый Запрос;
	Если ВидЭД = Перечисления.ВидыЭД.ПлатежноеПоручение Тогда
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ЭДПрисоединенныеФайлы.УникальныйИДВнешний,
			|	ЭДПрисоединенныеФайлы.СоглашениеЭД.ИдентификаторОрганизации КАК ИдентификаторОрганизации
			|ИЗ
			|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияЭД КАК СостоянияЭД
			|		ПО ЭДПрисоединенныеФайлы.Ссылка = СостоянияЭД.ЭлектронныйДокумент
			|ГДЕ
			|	ЭДПрисоединенныеФайлы.СоглашениеЭД = &СоглашениеЭД
			|	И ЭДПрисоединенныеФайлы.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.ПлатежноеПоручение)
			|	И (СостоянияЭД.СостояниеВерсииЭД = ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.ОжидаетсяИсполнение)
			|			ИЛИ СостоянияЭД.СостояниеВерсииЭД = ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.ОжидаетсяИзвещениеОПолучении))
			|	И НЕ ЭДПрисоединенныеФайлы.УникальныйИДВнешний = """"
			|	И НЕ ЭДПрисоединенныеФайлы.ПометкаУдаления
			|	И НЕ ЭДПрисоединенныеФайлы.СтатусЭД = ЗНАЧЕНИЕ(Перечисление.СтатусыЭД.Отклонен)";
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ЗапросВыписки Тогда
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ЭДПрисоединенныеФайлы.УникальныйИДВнешний,
			|	ЭДПрисоединенныеФайлы.СоглашениеЭД.ИдентификаторОрганизации КАК ИдентификаторОрганизации
			|ИЗ
			|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияЭД КАК СостоянияЭД
			|		ПО (СостоянияЭД.ЭлектронныйДокумент = ЭДПрисоединенныеФайлы.Ссылка)
			|ГДЕ
			|	ЭДПрисоединенныеФайлы.СоглашениеЭД = &СоглашениеЭД
			|	И ЭДПрисоединенныеФайлы.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.ЗапросВыписки)
			|	И НЕ ЭДПрисоединенныеФайлы.УникальныйИДВнешний = """"
			|	И НЕ ЭДПрисоединенныеФайлы.ПометкаУдаления
			|	И (ЭДПрисоединенныеФайлы.СтатусЭД = ЗНАЧЕНИЕ(Перечисление.СтатусыЭД.Отправлен)
			|			ИЛИ ЭДПрисоединенныеФайлы.СтатусЭД = ЗНАЧЕНИЕ(Перечисление.СтатусыЭД.Принят)
			|			ИЛИ ЭДПрисоединенныеФайлы.СтатусЭД = ЗНАЧЕНИЕ(Перечисление.СтатусыЭД.Доставлен))";
	КонецЕсли;
	
	Запрос.УстановитьПараметр("СоглашениеЭД", СоглашениеЭД);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат МассивВозврата;
	КонецЕсли;

	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
	
		Попытка
			Request = ЭлектронныеДокументыВнутренний.ПолучитьОбъектТипаCML("Request", "http://bssys.com/upg/request");
			ИдентификаторЗапроса = Новый УникальныйИдентификатор;
			ТекстОшибки = "";
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(
													Request,
													"requestId",
													Строка(ИдентификаторЗапроса),
													Истина,
													ТекстОшибки);
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(
													Request,
													"orgId",
													Выборка.ИдентификаторОрганизации,
													Истина,
													ТекстОшибки);
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Request, "version", "1.0", Истина, ТекстОшибки);
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Request, "sender", "1С: Предприятие 8", Истина, ТекстОшибки);
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Request, "receiver", "SBBOL_DBO", Истина, ТекстОшибки);
			
			DocIds = ЭлектронныеДокументыВнутренний.ПолучитьОбъектТипаCML("Request.DocIds", "http://bssys.com/upg/request");
			DocId = ЭлектронныеДокументыВнутренний.ПолучитьОбъектТипаCML("Request.DocIds.DocId", "http://bssys.com/upg/request");
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(
													DocId,
													"docid",
													Выборка.УникальныйИДВнешний,
													Истина,
													ТекстОшибки);
			DocIds.DocId.Добавить(DocId);
			
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Request, "DocIds", DocIds, Истина, ТекстОшибки);
			
			Request.Проверить();
			
			Запись = Новый ЗаписьXML;
			Запись.УстановитьСтроку();
			ФабрикаXDTO.ЗаписатьXML(Запись, Request);
			ТекстЗапроса = Запись.Закрыть();
			
			Если Не ПустаяСтрока(ТекстЗапроса) Тогда
				МассивВозврата.Добавить(ТекстЗапроса);
			КонецЕсли;
			
		Исключение
			
			ШаблонСообщения = НСтр("ru = '%1. (подробности см. в Журнале регистрации).'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
															ШаблонСообщения,
															КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			ОбработатьИсключениеПоЭДНаСервере(
							НСтр("ru = 'Формирование запроса статуса электроного документа'"),
							ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
							ТекстСообщения,
							1);

		КонецПопытки
		
	КонецЦикла;
	
	Возврат МассивВозврата;
	
КонецФункции

// Возвращает номер контейнера, к которому привязан сертификат в токене банка
//
// Параметры
//  <Сертификат>  - <СправочникСсылка.СертификатыЭЦП> - сертификат подписи
//  <СоглашениеЭД>  - <СправочникСсылка.СоглашенияОбИспользованииЭД> - соглашение со Сбербанком
//
// Возвращаемое значение:
//   <Число> - Номер контейнера, если -1 - в соглашении не указан данный сертификат
//
Функция НомерКонтейнера(Сертификат, СоглашениеЭД) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СоглашенияОбИспользованииЭДСертификатыПодписейОрганизации.НомерКонтейнера
	|ИЗ
	|	Справочник.СоглашенияОбИспользованииЭД.СертификатыПодписейОрганизации КАК СоглашенияОбИспользованииЭДСертификатыПодписейОрганизации
	|ГДЕ
	|	СоглашенияОбИспользованииЭДСертификатыПодписейОрганизации.Сертификат = &Сертификат
	|	И НЕ СоглашенияОбИспользованииЭДСертификатыПодписейОрганизации.Ссылка.ПометкаУдаления
	|	И СоглашенияОбИспользованииЭДСертификатыПодписейОрганизации.Ссылка.СтатусСоглашения = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийЭД.Действует)
	|	И СоглашенияОбИспользованииЭДСертификатыПодписейОрганизации.Ссылка = &СоглашениеЭД";
	запрос.УстановитьПараметр("Сертификат",   Сертификат);
	запрос.УстановитьПараметр("СоглашениеЭД", СоглашениеЭД);
	Результат = Запрос.Выполнить().Выбрать();
	Если Результат.Количество() = 1 Тогда
		Результат.Следующий();
		Возврат Результат.НомерКонтейнера;
	КонецЕсли;
	
	Возврат -1; //не заполнено табличное поле СертификатыНеобходимыхПодписей
	
КонецФункции

// Определяет сертификат подписи по соглашению и номеру контейнера
//
// Параметры
//  <СоглашениеЭД>  - <СправочникСсылка.СоглашенияОбИспользованииЭД> - соглашение со Сбербанком
//  <НомерКонтейнера>  - <Число> - номер контейнера
//
// Возвращаемое значение:
//   <СправочникСсылка.СертификатыЭПЦ> или Неопределено - найденный сертификат
//
Функция СертификатИзСоглашенияЭД(СоглашениеЭД, НомерКонтейнера) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СоглашенияОбИспользованииЭДСертификатыПодписейОрганизации.Сертификат
	|ИЗ
	|	Справочник.СоглашенияОбИспользованииЭД.СертификатыПодписейОрганизации КАК СоглашенияОбИспользованииЭДСертификатыПодписейОрганизации
	|ГДЕ
	|	СоглашенияОбИспользованииЭДСертификатыПодписейОрганизации.Ссылка = &СоглашениеЭД
	|	И СоглашенияОбИспользованииЭДСертификатыПодписейОрганизации.НомерКонтейнера = &НомерКонтейнера";
	Запрос.УстановитьПараметр("СоглашениеЭД",    СоглашениеЭД);
	Запрос.УстановитьПараметр("НомерКонтейнера", НомерКонтейнера);
	результат = Запрос.Выполнить().Выбрать();
	Если результат.Следующий() Тогда
		Возврат Результат.Сертификат;
	КонецЕсли;
	Возврат Неопределено;
	
КонецФункции

// Формирует текст запроса состояния обработки отправленных ранее запросов выписки банка
//
// Параметры:
//  СоглашениеЭД - СправочникСсылка.СоглашенияОбИспользованииЭД, ссылка на соглашение с банком
//
// Возвращаемое значение:
//  Строка - текст для отправки в банк
//
Функция ТекстЗапросаСостоянияЗапросовВыпискиБанка(СоглашениеЭД) Экспорт
	
	МассивИдентификаторов = МассивИдентификаторовДокументовБанка(СоглашениеЭД);
	
	Если МассивИдентификаторов.Количество() = 0 Тогда
		Возврат "";
	КонецЕсли;
		
	
	Request = ЭлектронныеДокументыВнутренний.ПолучитьОбъектТипаCML("Request", "http://bssys.com/upg/request");
	ИдентификаторЗапроса = Новый УникальныйИдентификатор;
	ТекстОшибки = "";
	ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(
											Request,
											"requestId",
											Строка(ИдентификаторЗапроса),
											Истина,
											ТекстОшибки);
	ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(
											Request,
											"orgId",
											ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СоглашениеЭД, "ИдентификаторОрганизации"),
											Истина,
											ТекстОшибки);
	ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Request, "version",  "1.0",               Истина, ТекстОшибки);
	ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Request, "sender",   "1С: Предприятие 8", Истина, ТекстОшибки);
	ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Request, "receiver", "SBBOL_DBO",         Истина, ТекстОшибки);
		
	DocIds = ЭлектронныеДокументыВнутренний.ПолучитьОбъектТипаCML("Request.DocIds", "http://bssys.com/upg/request");
	Для Каждого Идентификатор Из МассивИдентификаторов Цикл
		DocId = ЭлектронныеДокументыВнутренний.ПолучитьОбъектТипаCML("Request.DocIds.DocId", "http://bssys.com/upg/request");
		ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(DocId, "docid", Идентификатор, Истина, ТекстОшибки);
		DocIds.DocId.Добавить(DocId);
	КонецЦикла;
		
	ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Request, "DocIds", DocIds, Истина, ТекстОшибки);
		
	Request.Проверить();
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку();
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, Request);
	
	Возврат ЗаписьXML.Закрыть();
	
КонецФункции

// Возвращает массив ссылок на сертификаты, которыми может подписан ЭД
//
// Параметры
//  <СоглашениеЭД>  - <СправочникСсылка.СоглашенияОбИспользованииЭД> - соглашение
//  <ВидЭД>  - <Перечисления.ВидыЭД> - вид электронного документа
//
// Возвращаемое значение:
//   <Массив>   - <Массив подходящих доступных сертификатов>
//
Функция ПолучитьДоступныеБанковскиеСертификаты(СоглашениеЭД, ВидЭД) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст =  "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	                |	СертификатыЭЦПВидыДокументов.Ссылка
	                |ИЗ
	                |	Справочник.СертификатыЭЦП.ВидыДокументов КАК СертификатыЭЦПВидыДокументов
	                |ГДЕ
	                |	СертификатыЭЦПВидыДокументов.Ссылка.Организация = &Организация
	                |	И СертификатыЭЦПВидыДокументов.ВидДокумента = &ВидЭД
	                |	И (СертификатыЭЦПВидыДокументов.Ссылка.СписокПользователей.Пользователь = &Пользователь
	                |			ИЛИ НЕ СертификатыЭЦПВидыДокументов.Ссылка.ОграничитьДоступКСертификату)
	                |	И СертификатыЭЦПВидыДокументов.Ссылка В(&СертификатыСоглашения)
	                |	И НЕ СертификатыЭЦПВидыДокументов.Ссылка.Отозван
	                |	И НЕ СертификатыЭЦПВидыДокументов.Ссылка.ПометкаУдаления
	                |	И СертификатыЭЦПВидыДокументов.ИспользоватьДляПодписи";
	Запрос.УстановитьПараметр("Организация",  СоглашениеЭД.Организация);
	Запрос.УстановитьПараметр("ВидЭД",        ВидЭД);
	Запрос.УстановитьПараметр("Пользователь", Пользователи.ТекущийПользователь());
	Запрос.УстановитьПараметр("СертификатыСоглашения", СоглашениеЭД.СертификатыПодписейОрганизации.ВыгрузитьКолонку("Сертификат"));
	ТЗРезультат = Запрос.Выполнить().Выгрузить();
	Возврат ТЗРезультат.ВыгрузитьКолонку("Ссылка");

КонецФункции

//только для внутреннего использования
Процедура СформироватьЭДЗапросаВыписки(СоглашениеЭД, ДатаНачала, ДатаОкончания, ЭД) Экспорт
	
	ФайлЗапроса = ПолучитьИмяВременногоФайла();
	
	ЕстьОшибка = Ложь;
	ИдентификаторЗапроса="";
	
	ЭлектронныеДокументыВнутренний.СформироватьЗапросВыписки(
										СоглашениеЭД,
										ДатаНачала,
										ДатаОкончания,
										ИдентификаторЗапроса,
										ФайлЗапроса,
										ЕстьОшибка);
	
	Если ЕстьОшибка Тогда
		УдалитьФайлы(ФайлЗапроса);
		Возврат;
	КонецЕсли;
	
	ДвоичныеДанныеФайла = Новый ДвоичныеДанные(ФайлЗапроса);
	АдресФайла = ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайла);
	
	ИмяФайла = "Запрос выписки за период с %1 по %2";
	ИмяФайла = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ИмяФайла, Формат(ДатаНачала, "ДЛФ=D"), Формат(ДатаОкончания, "ДЛФ=D"));
	ВремяСозданияЭД = ТекущаяДатаСеанса();
	
	ЭД = ПрисоединенныеФайлы.ДобавитьФайл(
									СоглашениеЭД,
									ИмяФайла,
									"xml",
									ВремяСозданияЭД,
									ВремяСозданияЭД,
									АдресФайла,
									Неопределено,
									,
									Справочники.ЭДПрисоединенныеФайлы.ПолучитьСсылку());
	ДайджестBase64 = Дайджест(ФайлЗапроса, СоглашениеЭД);
	УдалитьФайлы(ФайлЗапроса);
	ПодписанныеДанные = Base64Значение(ДайджестBase64);
	
	АдресХранилища = ПоместитьВоВременноеХранилище(ПодписанныеДанные);
	ДопФайл = ПрисоединенныеФайлы.ДобавитьФайл(
						СоглашениеЭД,
						"СхемаДанных",
						,
						,
						,
						АдресХранилища,
						,
						,
						Справочники.ЭДПрисоединенныеФайлы.ПолучитьСсылку());
	ПараметрыФайла = Новый Структура;
	ПараметрыФайла.Вставить("ВидЭД",                       Перечисления.ВидыЭД.ДопДанные);
	ПараметрыФайла.Вставить("ЭлектронныйДокументВладелец", ЭД);
	ПараметрыФайла.Вставить("НаименованиеФайла",           "СхемаДанных");
	ПараметрыФайла.Вставить("СтатусЭД",                    Перечисления.СтатусыЭД.Сформирован);
	ЭлектронныеДокументыСлужебный.ИзменитьПоСсылкеПрисоединенныйФайл(ДопФайл, ПараметрыФайла, Ложь);
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("СтатусЭД", Перечисления.СтатусыЭД.Сформирован);
	СтруктураПараметров.Вставить("ВидЭД", Перечисления.ВидыЭд.ЗапросВыписки);
	СтруктураПараметров.Вставить("УникальныйИД", ИдентификаторЗапроса);
	СтруктураПараметров.Вставить("СоглашениеЭД", СоглашениеЭД);
	СтруктураПараметров.Вставить("НаправлениеЭД", Перечисления.НаправленияЭД.Исходящий);
	СтруктураПараметров.Вставить("НаименованиеФайла", ИмяФайла);
	
	ЭлектронныеДокументыСлужебный.ИзменитьПоСсылкеПрисоединенныйФайл(ЭД, СтруктураПараметров, Ложь);
	
	ЗаписьСостояния = РегистрыСведений.СостоянияЭД.СоздатьМенеджерЗаписи();
	ЗаписьСостояния.Период = ТекущаяДатаСеанса();
	ЗаписьСостояния.СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.ОбменЗавершен;
	ЗаписьСостояния.СсылкаНаОбъект = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭД, "ВладелецФайла");
	ЗаписьСостояния.ЭлектронныйДокумент = ЭД;
	ЗаписьСостояния.Записать();
		
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ



Функция ЕстьПроверкаНовыхЭД()
	
	УстановитьПривилегированныйРежим(Истина);
	ЗаданиеНаличиеНовыхЭД = РегламентныеЗадания.НайтиПредопределенное(Метаданные.РегламентныеЗадания.НаличиеНовыхЭД);
	ЕстьПроверкаНовыхЭД = ЗаданиеНаличиеНовыхЭД.Использование;
	
	Возврат ЕстьПроверкаНовыхЭД;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Работа с версиями

Процедура УдалитьСтаруюВерсиюЭД(ЗаписьНабора)
	
	СтруктураВерсии =  ЭлектронныеДокументыСлужебный.ПолучитьСтруктуруВерсииЭД(ЗаписьНабора.СсылкаНаОбъект);
	
	Если ЗначениеЗаполнено(СтруктураВерсии.СсылкаНаДокумент)
		И ЭлектронныеДокументыСлужебный.ВозможноУдалениеЭД(СтруктураВерсии.СостояниеВерсииЭД) Тогда
		
		ДокументОбъект = СтруктураВерсии.СсылкаНаДокумент.ПолучитьОбъект();
		ДокументОбъект.ПометкаУдаления = Истина;
		ДокументОбъект.Записать();
		
		// Удалим подчиненные электронные доп. файлы.
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ЭДПрисоединенныеФайлы.Ссылка
		|ИЗ
		|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
		|ГДЕ
		|	ЭДПрисоединенныеФайлы.ВладелецФайла = &ВладелецФайла
		|	И НЕ ЭДПрисоединенныеФайлы.ПометкаУдаления";
		Запрос.УстановитьПараметр("ВладелецФайла", СтруктураВерсии.СсылкаНаДокумент);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ДокументОбъект.ПометкаУдаления = Истина;
			ДокументОбъект.Записать();
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Функция СостояниеВерсииЭД(СсылкаНаВладельца)
	
	ВозвращаемоеЗначение = Перечисления.СостоянияВерсийЭД.ПустаяСсылка();
	СтруктураВерсииЭД =  ЭлектронныеДокументыСлужебный.ПолучитьСтруктуруВерсииЭД(СсылкаНаВладельца);
	
	Если СтруктураВерсииЭД.Свойство("СостояниеВерсииЭД") Тогда
		
		Комментарий = Неопределено;
		ДобавитьПричинуЗакрытия = (СтруктураВерсииЭД.СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.ЗакрытПринудительно);
		
		Если СтруктураВерсииЭД.СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.ОбменЗавершен Тогда
			СостояниеВерсии = НСтр("ru='ЭДО завершен'");
		ИначеЕсли СтруктураВерсииЭД.СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.ОбменЗавершенСИсправлением Тогда
			СостояниеВерсии = НСтр("ru='ЭДО завершен с исправлением'");
		ИначеЕсли СтруктураВерсииЭД.СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.Аннулирован Тогда
			СостояниеВерсии = НСтр("ru='ЭДО аннулирован'");
		ИначеЕсли СтруктураВерсииЭД.СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.ЗакрытПринудительно Тогда
			СостояниеВерсии = НСтр("ru='ЭДО закрыт принудительно'");
		ИначеЕсли СтруктураВерсииЭД.СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.Отклонен Тогда
			СостояниеВерсии = НСтр("ru='ЭДО закрыт с отклонением'");
		ИначеЕсли СтруктураВерсииЭД.СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.НеСформирован 
			ИЛИ СтруктураВерсииЭД.СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.НеПолучен Тогда
			СостояниеВерсии = НСтр("ru='ЭДО не начат'");
		Иначе
			СостояниеВерсии = Строка(СтруктураВерсииЭД.СостояниеВерсииЭД);
		КонецЕсли;
		
		Если ДобавитьПричинуЗакрытия Тогда
			СтруктураВерсииЭД.Свойство("КомментарийРС", Комментарий);
			Причина = СтрЗаменить(НСтр("ru = ', причина: %1'"), "%1", ?(ЗначениеЗаполнено(Комментарий), Комментарий, "не указана"));
			ВозвращаемоеЗначение = СостояниеВерсии + Причина;
		Иначе
			ВозвращаемоеЗначение = СостояниеВерсии;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ПолучитьТекстСводногоСостоянияЭД(СсылкаНаВладельца)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекстСводногоСостояния = "";
	
	МассивСсылок = Новый Массив;
	МассивСсылок.Добавить(СсылкаНаВладельца);
	ТаблицаДанных = ПолучитьДанныеЭДПоВладельцам(МассивСсылок);

	Если ТаблицаДанных.Количество() > 0 Тогда
		Строка = ТаблицаДанных[0];
		
		ТекстСНашейСтороны = "";
		ТекстСоСтороныДругогоУчастника = "";
		
		Если Строка.СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.ЗакрытПринудительно Тогда
			ТекстСводногоСостояния = НСтр("ru = 'ЭДО закрыт принудительно'");
		Иначе
			Если ЗначениеЗаполнено(Строка.ДействияСНашейСтороны)
				И Строка.ДействияСНашейСтороны = Перечисления.СводныеСостоянияЭД.ТребуютсяДействия Тогда
				
				ТекстСНашейСтороны = НСтр("ru = 'с нашей стороны'");
			КонецЕсли;
			Если ЗначениеЗаполнено(Строка.ДействияСоСтороныДругогоУчастника)
				И Строка.ДействияСоСтороныДругогоУчастника = Перечисления.СводныеСостоянияЭД.ТребуютсяДействия Тогда
				
				ТекстСоСтороныДругогоУчастника = НСтр("ru = 'со стороны других участников'");
			КонецЕсли;
			Если ЗначениеЗаполнено(ТекстСНашейСтороны) ИЛИ ЗначениеЗаполнено(ТекстСоСтороныДругогоУчастника) Тогда
				
				ТекстСводногоСостояния = НСтр("ru = 'Требуются действия'")+ " " + ТекстСНашейСтороны
					+ ?(ЗначениеЗаполнено(ТекстСНашейСтороны) И ЗначениеЗаполнено(ТекстСоСтороныДругогоУчастника), " и ", "")
					+ ТекстСоСтороныДругогоУчастника;
			ИначеЕсли ЗначениеЗаполнено(Строка.ДействияСНашейСтороны)
				И Строка.ДействияСНашейСтороны = Перечисления.СводныеСостоянияЭД.ВсеВыполнено
				И ЗначениеЗаполнено(Строка.ДействияСоСтороныДругогоУчастника)
				И Строка.ДействияСоСтороныДругогоУчастника = Перечисления.СводныеСостоянияЭД.ВсеВыполнено Тогда
				
				Если Строка.СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.ОбменЗавершен Тогда
					ТекстСводногоСостояния = НСтр("ru = 'ЭДО завершен'");
				ИначеЕсли Строка.СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.ОбменЗавершенСИсправлением Тогда
					ТекстСводногоСостояния = НСтр("ru = 'ЭДО завершен с исправлением'");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТекстСводногоСостояния;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Подпись электронных документов 

// Проверяет все ли необходимые подписи установлены перед отправкой контрагенту.
// 
// Параметры:
//  ЭлектронныйДокумент - ссылка на присоединенный файл.
//
Функция ЭлектронныйДокументПолностьюПодписан(ЭлектронныйДокумент)
	
	ФлагПодписанПолностью = Истина;
	
	Если ЭлектронныйДокумент.ВидЭД = Перечисления.ВидыЭД.ПроизвольныйЭД Тогда
		Возврат ФлагПодписанПолностью;
	КонецЕсли;
	
	Если ЭлектронныйДокумент.НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани Тогда
		ТЗ = ЭлектронныйДокумент.ЭлектронныеЦифровыеПодписи.Выгрузить(, "Отпечаток");
		ТЗ.Свернуть("Отпечаток");
		ФлагПодписанПолностью = ТЗ.Количество() > 1;
	ИначеЕсли ЭлектронныйДокумент.ВидЭД = Перечисления.ВидыЭД.ПлатежноеПоручение Тогда
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СертификатыЭЦП.Ссылка КАК Сертификат,
		|	ЭДПрисоединенныеФайлыЭлектронныеЦифровыеПодписи.Отпечаток
		|ПОМЕСТИТЬ УстановленныеПодписи
		|ИЗ
		|	Справочник.ЭДПрисоединенныеФайлы.ЭлектронныеЦифровыеПодписи КАК ЭДПрисоединенныеФайлыЭлектронныеЦифровыеПодписи
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СертификатыЭЦП КАК СертификатыЭЦП
		|		ПО ЭДПрисоединенныеФайлыЭлектронныеЦифровыеПодписи.Отпечаток = СертификатыЭЦП.Отпечаток
		|ГДЕ
		|	ЭДПрисоединенныеФайлыЭлектронныеЦифровыеПодписи.Ссылка = &ЭД
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СоглашенияОбИспользованииЭДСертификатыПодписейОрганизации.Сертификат
		|ИЗ
		|	Справочник.СоглашенияОбИспользованииЭД.СертификатыПодписейОрганизации КАК СоглашенияОбИспользованииЭДСертификатыПодписейОрганизации
		|ГДЕ
		|	СоглашенияОбИспользованииЭДСертификатыПодписейОрганизации.Ссылка = &Соглашение
		|	И НЕ СоглашенияОбИспользованииЭДСертификатыПодписейОрганизации.Сертификат В
		|				(ВЫБРАТЬ
		|					УстПодп.Сертификат
		|				ИЗ
		|					УстановленныеПодписи КАК УстПодп)";
		
		Запрос.УстановитьПараметр("Соглашение", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭлектронныйДокумент,"СоглашениеЭД"));
		Запрос.УстановитьПараметр("ЭД", ЭлектронныйДокумент);
		Результат = Запрос.Выполнить().Выбрать();
		Если Результат.Следующий() Тогда
			ФлагПодписанПолностью = Ложь;
		КонецЕсли;
	Иначе
		// Массив отпечатков всех установленных ЭЦП на ЭД
		МассивОтпечатковСертификатов = ЭлектронныйДокумент.ЭлектронныеЦифровыеПодписи.ВыгрузитьКолонку("Отпечаток");
		
		// Выберем все действующие сертификаты по тек.организации и тек.виду ЭД,
		// совпадающие с сертификатами установленных ЭЦП.
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ 
		|	СертификатыЭЦПВидыДокументов.Ссылка КАК СертификатЭЦП
		|ИЗ
		|	Справочник.СертификатыЭЦП.ВидыДокументов КАК СертификатыЭЦПВидыДокументов
		|ГДЕ
		|	СертификатыЭЦПВидыДокументов.Ссылка.Организация = &Организация
		|	И СертификатыЭЦПВидыДокументов.ВидДокумента = &ВидДокумента
		|	И СертификатыЭЦПВидыДокументов.Ссылка.Отпечаток В(&МассивОтпечатковСертификатов)
		|	И СертификатыЭЦПВидыДокументов.Ссылка.Отозван = ЛОЖЬ
		|	И СертификатыЭЦПВидыДокументов.Ссылка.ПометкаУдаления = ЛОЖЬ";
		Запрос.УстановитьПараметр("МассивОтпечатковСертификатов", МассивОтпечатковСертификатов);
		Запрос.УстановитьПараметр("Организация",                  ЭлектронныйДокумент.Организация);
		Запрос.УстановитьПараметр("ВидДокумента",                 ЭлектронныйДокумент.ВидЭД);
		
		ФлагПодписанПолностью = НЕ Запрос.Выполнить().Пустой();
		
	КонецЕсли;
	
	ЭлектронныеДокументыПереопределяемый.ЭлектронныйДокументПолностьюПодписан(ЭлектронныйДокумент, ФлагПодписанПолностью);
	
	Возврат ФлагПодписанПолностью;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обмен через электронную почту

Функция ОтправитьЭлектронноеПисьмо(ПодготовленныеДокументы, АдресКаталогаСВложениями)
	
	СоответствиеВложений = СформироватьСоответствиеВложений(АдресКаталогаСВложениями);
	Результат = ПередатьПисьмоСВложениями(ПодготовленныеДокументы, СоответствиеВложений);
	УдалитьФайлы(АдресКаталогаСВложениями);
	
	Возврат Результат;
	
КонецФункции

Функция СформироватьСоответствиеВложений(КаталогВложений, ТолькоПодписи = Ложь)
	
	СписокДоступныхРасширений = СформироватьСписокРасширенийСертификатов();
	СоответствиеВозврата = Новый Соответствие;
	СписокВложений = НайтиФайлы(КаталогВложений, "*");
	Для Каждого ФайлВложений Из СписокВложений Цикл
		Если ТолькоПодписи И Найти(ФайлВложений.Расширение, СписокДоступныхРасширений) = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если ФайлВложений.ЭтоФайл() Тогда
			СоответствиеВозврата.Вставить(ФайлВложений.Имя, Новый ДвоичныеДанные(ФайлВложений.ПолноеИмя));
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СоответствиеВозврата;
	
КонецФункции

// Отправляет письмо с вложениями по пакету ЭД.
//
// Параметры:
//  Конверт - Ссылка на документ "ПакетЭД" - подготовленный к отправке пакет электронных документов,
//  СоответствиеВложений - Соответствие, список вложенных файлов в пакет электронных документов.
//
Функция ПередатьПисьмоСВложениями(ПакетЭД, СоответствиеВложений)
	
	РеквизитыПакетаЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
							ПакетЭД,
							"Отправитель, Получатель, АдресРесурсаКонтрагента, АдресРесурсаОрганизации, ПрофильНастроекЭДО");
	Пароль = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РеквизитыПакетаЭД.АдресРесурсаОрганизации, "Пароль");
	
	Получатель  = РеквизитыПакетаЭД.Получатель;
	Отправитель = РеквизитыПакетаЭД.Отправитель;
	
	ПараметрыОтправки = Новый Структура();
	ПараметрыОтправки.Вставить("Кому",     РеквизитыПакетаЭД.АдресРесурсаКонтрагента);
	ПараметрыОтправки.Вставить("Тема",     СформироватьТемуПисьма(Отправитель, Получатель));
	ПараметрыОтправки.Вставить("Тело",     );
	ПараметрыОтправки.Вставить("Вложения", СоответствиеВложений);
	ПараметрыОтправки.Вставить("Пароль",   Пароль);
	
	Попытка
		РаботаСПочтовымиСообщениями.ОтправитьСообщение(РеквизитыПакетаЭД.АдресРесурсаОрганизации, ПараметрыОтправки);
	Исключение
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Текст = НСтр("ru = 'Ошибка при отправке сообщения на сервер электронной почты по профилю настроек ЭДО %1.
						|%2'");
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
																	Текст,
																	РеквизитыПакетаЭД.ПрофильНастроекЭДО,
																	ТекстОшибки);
		
		ШаблонСообщения = НСтр("ru = 'Ошибка при отправке эл.документов по профилю настроек ЭДО: %1, способ обмена: %2.
								|(подробности см. в Журнале регистрации).'"); 
								

		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								ШаблонСообщения,
								РеквизитыПакетаЭД.ПрофильНастроекЭДО,
								Перечисления.СпособыОбменаЭД.ЧерезЭлектроннуюПочту);
		ВидОперации = НСтр("ru = 'Отправка эл.документов'");
		ОбработатьИсключениеПоЭДНаСервере(
							ВидОперации,
							ТекстОшибки,
							ТекстСообщения);
 		Возврат 0;
	КонецПопытки;
	
	Возврат 1;
	
КонецФункции

Функция СформироватьТемуПисьма(Отправитель, Получатель)
	
	Возврат Нстр("ru = 'Обмен эл.документами:'")+ " " + Отправитель + ?(ЗначениеЗаполнено(Получатель), " -> " + Получатель, "");
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обработка электронных документов

// Устанавливает признак того, что электронный документ был утвержден.
//
// Параметры:
//  ПрисоединенныйФайл - ссылка на электронный документ, который необходимо обработать.
//  НовыйЭД - ссылка на электронный документ, если при утверждении был создан новый электронный документ.
//
Процедура УстановитьПризнакУтвержден(ПрисоединенныйФайл, НовыйЭД)
	
	// Проверим, все ли необходимые условия выполнены
	Если ЭлектронныеДокументыПереопределяемый.ЭлектронныйДокументГотовКУтверждению(ПрисоединенныйФайл) Тогда
		Попытка
			
			НовыйСтатусЭД = ЭлектронныеДокументыСлужебный.ПолучитьДопустимыйСтатусЭД(
				Перечисления.СтатусыЭД.Утвержден, ПрисоединенныйФайл);
			
			Если ЭлектронныеДокументыСлужебный.УстановленныеПодписиВалидны(ПрисоединенныйФайл) Тогда
				
				СтруктураПараметров = Новый Структура;
				СтруктураПараметров.Вставить("СтатусЭД", НовыйСтатусЭД);
				СтруктураПараметров.Вставить("Изменил",  Пользователи.АвторизованныйПользователь());
				
				ЭлектронныеДокументыСлужебный.ИзменитьПоСсылкеПрисоединенныйФайл(ПрисоединенныйФайл, СтруктураПараметров, Ложь);
				ЭлектронныеДокументыПереопределяемый.НазначенСтатусУтвержден(ПрисоединенныйФайл);
				
			Иначе
				ОтменитьТранзакцию();
				Возврат;
				
			КонецЕсли;
			
		Исключение
			
			Если ТранзакцияАктивна() Тогда
				ОтменитьТранзакцию();
			КонецЕсли;
			
			ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке()) + НСтр("ru = ' (подробности см. в Журнале регистрации).'");
			ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			
			ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'утверждение ЭД'"), ТекстОшибки, ТекстСообщения);
			
		КонецПопытки;
	КонецЕсли;
	
	РеквизитыЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПрисоединенныйФайл,"ВидЭД, НаправлениеЭД, ТипЭлементаВерсииЭД, ТребуетсяПодтверждение");
	
	Если РеквизитыЭД.ТребуетсяПодтверждение Тогда
		
		
		Если ТранзакцияАктивна()
			И РеквизитыЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий
			
			И (РеквизитыЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец
				
				ИЛИ РеквизитыЭД.ВидЭД = Перечисления.ВидыЭД.АктИсполнитель
				
				ИЛИ РеквизитыЭД.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель
				
				Или РеквизитыЭД.ВидЭД = Перечисления.ВидыЭД.АктНаПередачуПрав
					И РеквизитыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДОПУПД
				
				ИЛИ РеквизитыЭД.ВидЭД = Перечисления.ВидыЭД.СчетФактура
					И РеквизитыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.СЧФДОПУПД
				
				ИЛИ РеквизитыЭД.ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура
					И РеквизитыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.КСЧФДИСУКД) Тогда
			
			Если ПрисоединенныйФайл.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец Тогда
				ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель;
			ИначеЕсли ПрисоединенныйФайл.ВидЭД = Перечисления.ВидыЭД.АктИсполнитель Тогда
				ВидЭД = Перечисления.ВидыЭД.АктЗаказчик;
			ИначеЕсли ПрисоединенныйФайл.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель Тогда
				ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель;
			КонецЕсли;
			
			ВладелецФайла = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПрисоединенныйФайл, "ВладелецФайла");
			
			Если РеквизитыЭД.ВидЭД = Перечисления.ВидыЭД.СчетФактура
				И РеквизитыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.СЧФДОПУПД Тогда
				
				НовыйЭД = ЭлектронныеДокументыВнутренний.СформироватьЭДИнформацияПокупателя(ПрисоединенныйФайл);
			ИначеЕсли РеквизитыЭД.ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура
				И РеквизитыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.КСЧФДИСУКД Тогда
				
				НовыйЭД = ЭлектронныеДокументыВнутренний.СформироватьЭДИнформацияПокупателяУКД(ПрисоединенныйФайл);
			ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель Тогда
				Если РеквизитыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДОПУПД Тогда
					НовыйЭД = ЭлектронныеДокументыВнутренний.СформироватьЭДИнформацияПокупателя(ПрисоединенныйФайл);
				Иначе
					НовыйЭД = ЭлектронныеДокументыВнутренний.СформироватьЭДТорг12Покупатель(ПрисоединенныйФайл);
				КонецЕсли;
			ИначеЕсли ВидЭД = Перечисления.ВидыЭД.АктЗаказчик Тогда
				Если РеквизитыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДОПУПД Тогда
					НовыйЭД = ЭлектронныеДокументыВнутренний.СформироватьЭДИнформацияПокупателя(ПрисоединенныйФайл);
				Иначе
					НовыйЭД = ЭлектронныеДокументыВнутренний.СформироватьЭДАкт501Заказчик(ПрисоединенныйФайл);
				КонецЕсли;
			ИначеЕсли РеквизитыЭД.ВидЭД = Перечисления.ВидыЭД.АктНаПередачуПрав Тогда
				НовыйЭД = ЭлектронныеДокументыВнутренний.СформироватьЭДИнформацияПокупателя(ПрисоединенныйФайл);
			ИначеЕсли ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель Тогда
				Если РеквизитыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДИСУКД Тогда
					НовыйЭД = ЭлектронныеДокументыВнутренний.СформироватьЭДИнформацияПокупателяУКД(ПрисоединенныйФайл);
				Иначе
					НовыйЭД = ЭлектронныеДокументыВнутренний.СформироватьЭДКорДокументаПолучатель(ПрисоединенныйФайл);
				КонецЕсли;
			КонецЕсли;
			
			Если НовыйЭД = Неопределено Тогда
				ОтменитьТранзакцию();
			КонецЕсли;
				
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Производит удаление из массива объектов для которых запрещено формирование новых ЭД.
//
// Параметры
//  МассивСсылок  - Массив - массив ссылок
//
Процедура УдалитьНедоступныеДляФормированияЭДОбъекты(МассивСсылок)

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СостоянияЭД.СсылкаНаОбъект
	|ИЗ
	|	РегистрСведений.СостоянияЭД КАК СостоянияЭД
	|ГДЕ
	|	СостоянияЭД.СсылкаНаОбъект В(&МассивСсылок)
	|	И НЕ СостоянияЭД.ЭлектронныйДокумент.СостояниеЭДО В (
	|		ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.НеСформирован),
	|		ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.ОшибкаПередачи),
	|		ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.ТребуетсяУточнитьДокумент),
	|		ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.ЗакрытПринудительно))";
	
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	Результат = Запрос.Выполнить();
	
	// Ищем уже созданные электронные документы.
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Индекс = МассивСсылок.Найти(Выборка.СсылкаНаОбъект);
		МассивСсылок.Удалить(Индекс);
		
		ШаблонСообщения = НСтр("ru='Для документа %1 уже есть актуальный электронный документ.'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Выборка.СсылкаНаОбъект);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
	КонецЦикла;
	
КонецПроцедуры

// Определяет необходимость выполнения какого-либо действия
// с электронным документом с нашей стороны, либо ожидание действия получателя,
// на основании статуса текущего электронного документа.
//
// Параметры:
//  СсылкаНаЭД - СправочникСсылка.ЭДПрисоединенныеФайлы
//               СправочникОбъект.ЭДПрисоединенныеФайлы.
//
Функция ОпределитьСводнуюИнформациюПоСтатусуЭД(СсылкаНаЭД) Экспорт
	
	Возврат ЭлектронныеДокументыСлужебный.ОпределитьСводнуюИнформациюПоСтатусуЭД(СсылкаНаЭД);
	
КонецФункции

Функция ОпределитьНаправление(СтруктураФайлаЭД)
	
	Если (СтруктураФайлаЭД.ВидЭД = Перечисления.ВидыЭД.ЗаказТовара)
		И СтруктураФайлаЭД.ПризнакПродавца Тогда
			Возврат Перечисления.НаправленияЭД.Исходящий;
	КонецЕсли;
	
	Возврат Перечисления.НаправленияЭД.Входящий;
	
КонецФункции

 // Устанавливает статус электронного документа Отклонен и добавляет ПричинуОтклонения
 //
 // Параметры
 //  <ЭД>  - <СправочникСсылка.ЭдПрисоединенныеФайлы> - ссылка на электронный документ
 //  <ПричинаОтклонения>  - строка - причина отклонения ЭД
 //
Процедура ОтклонитьЭДБезФормированияУОУ(ЭД, ПричинаОтклонения) Экспорт
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("СтатусЭД", Перечисления.СтатусыЭД.Отклонен);
	СтруктураПараметров.Вставить("ПричинаОтклонения", ПричинаОтклонения);
	ЭлектронныеДокументыСлужебный.ИзменитьПоСсылкеПрисоединенныйФайл(ЭД, СтруктураПараметров, Ложь);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Прочие

// Выполняется проверка возможности корректного чтения Пакета ЭД.
// Необходимость данной проверки возникает при работе с данными внешней информационной базы (через com-соединение).
//
// Параметры:
//  ПакетЭД - ДокументСсылка.ПакетЭД - исследуемый пакет электронных документов.
//
// Возвращаемое значение:
//  Булево - Истина - чтение данных пакета возможно, иначе - Ложь.
//
Функция ОпределитьВозможностьЧтенияДвоичныхДанныхПакетаЭД(ПакетЭД)
	
	ЧтениеПакетаВозможно = Истина;
	ЭлектронныеДокументыПереопределяемый.ОпределитьВозможностьЧтенияДвоичныхДанныхПакетаЭД(ПакетЭД, ЧтениеПакетаВозможно);
	
	Возврат ЧтениеПакетаВозможно;
	
КонецФункции

Функция ПолучитьСоответствиеФайлПараметры(ФайлИнформации)
	
	ЧтениеХМЛ = Новый ЧтениеXML;
	ЧтениеХМЛ.ОткрытьФайл(ФайлИнформации.ПолноеИмя);
	
	ПредставлениеДокумента = "";
	НашлиДокумент = Ложь;
	ПроизвольныйЭД = Ложь;
	СтруктураДопДанных = Новый Структура;
	СоответствиеВозврата = Новый Соответствие;
	
	Пока ЧтениеХМЛ.Прочитать() Цикл
		
		Параметры = Новый Структура;
		
		Если ЧтениеХМЛ.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеХМЛ.ЛокальноеИмя = "Текст" Тогда
			ПроизвольныйЭД = Истина;
			ЧтениеХМЛ.Прочитать();
			СтруктураДопДанных.Вставить("КомментарийЭД", СокрЛП(ЧтениеХМЛ.Значение));
		КонецЕсли;

		Если ЧтениеХМЛ.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеХМЛ.ЛокальноеИмя = "Документ" Тогда
			ПредставлениеДокумента = "";
			ПроизвольныйЭД = Ложь;
			СоответствиеВозврата = Новый Соответствие;
			ПредставленияПодписей = Новый Массив;
			ЧтениеХМЛ.Прочитать();
			ПредставлениеДокумента = СокрЛП(ЧтениеХМЛ.Значение);
			НашлиДокумент = Истина;
			УникальныйИД = "";
			НомерЭД = "";
			ДокументСодержитПодписи = Ложь;
		КонецЕсли;
		
		Если НЕ НашлиДокумент Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЧтениеХМЛ.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеХМЛ.ЛокальноеИмя = "Подпись" Тогда
			ЧтениеХМЛ.Прочитать();
			ПредставленияПодписей.Добавить(СокрЛП(ЧтениеХМЛ.Значение));
			ДокументСодержитПодписи = Истина;
		КонецЕсли;
		
		Если ЧтениеХМЛ.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеХМЛ.ЛокальноеИмя = "НомерЭД" Тогда
			ЧтениеХМЛ.Прочитать();
			НомерЭД = ЧтениеХМЛ.Значение
		КонецЕсли;
		
		Если ЧтениеХМЛ.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеХМЛ.ЛокальноеИмя = "УникальныйИД" Тогда
			ЧтениеХМЛ.Прочитать();
			УникальныйИД = ЧтениеХМЛ.Значение;
		КонецЕсли;
		Если ЧтениеХМЛ.ТипУзла = ТипУзлаXML.КонецЭлемента И ЧтениеХМЛ.ЛокальноеИмя = "Документ" Тогда
			НашлиДокумент = Ложь;
			СтруктураПредставления = Новый Структура("Подписи, НомерЭД, УникальныйИД, КодРегламента, ДокументСодержитПодписи, ПроизвольныйЭД, ДопДанные",
				ПредставленияПодписей, НомерЭД, УникальныйИД, "Nonformalized", ДокументСодержитПодписи, ПроизвольныйЭД, СтруктураДопДанных);
			СоответствиеВозврата.Вставить(ПредставлениеДокумента, СтруктураПредставления);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СоответствиеВозврата;
	
КонецФункции

Функция ПреобразоватьМассивФайловВДвоичныеДанные(МассивФайлов)
	
	МассивВозврата = Новый Массив;
	Для Каждого ФайлДанных Из МассивФайлов Цикл
		СтруктураМассива = Новый Структура;
		СтруктураМассива.Вставить("ДвоичныеДанные", Новый ДвоичныеДанные(ФайлДанных.ПолноеИмя));
		СтруктураМассива.Вставить("ИмяФайлаБезРасширения", ФайлДанных.ИмяБезРасширения);
		СтруктураМассива.Вставить("ИмяФайла", ФайлДанных.Имя);	
		МассивВозврата.Добавить(СтруктураМассива);
	КонецЦикла;
	
	Возврат МассивВозврата;
	
КонецФункции

// Проверяет в транспортном архиве имена файлов (без расширения) на наличие в них недопустимых символов.
// Такие имена при распаковке обрезаются и может получиться два файла с одинаковыми именами, в результате
// один перезапишет другого.
//
// Параметры:
//  АрхивФайлов - ЧтениеZipФайла         - Инициализированный объект чтения zip архива.
//  Пакет       - ДокументСсылка.ПакетЭД - Пакет электронного документа.
// 
// Возвращаемое значение - Булево - Истина, если в архиве есть файлы с недопустимыми символами в именах,
//                                  которые после обрезки становятся одинаковыми.
//
Функция ЕстьОдинаковыеИменаФайловСНедопустимымиСимволамиВАрхиве(АрхивФайлов, Пакет) Экспорт
	
	ФлагОшибки = Ложь;
	
	ИменаОсновныхФайлов = Новый ТаблицаЗначений;
	ИменаОсновныхФайлов.Колонки.Добавить("ИмяФайла");
	ИменаОсновныхФайлов.Колонки.Добавить("СчетчикИмен");
	
	Для Каждого ФайлАрхива Из АрхивФайлов.Элементы Цикл
		
		Если ФайлАрхива.ИмяБезРасширения <> "card" И ФайлАрхива.ИмяБезРасширения <> "meta" Тогда
			
			СтрокаТаблицы             = ИменаОсновныхФайлов.Добавить();
			СтрокаТаблицы.ИмяФайла    = ФайлАрхива.Имя;
			СтрокаТаблицы.СчетчикИмен = 1;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ИменаОсновныхФайлов.Количество() Тогда
		
		ИменаОсновныхФайлов.Свернуть("ИмяФайла", "СчетчикИмен");
		
		Для Каждого Строка Из ИменаОсновныхФайлов Цикл
			Если Строка.СчетчикИмен > 1 Тогда
				ФлагОшибки = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Если ФлагОшибки Тогда
		ТекстОшибки = НСтр("ru = '""%1"" содержит в своем архиве файлы с недопустимыми символами в именах. Распаковка не возможна.'")
			+ Символы.ПС + НСтр("ru = 'Необходимо запросить повторную отправку документа с исправленным именем файла.'");
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, Строка(Пакет));
		ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'Распаковка пакета ЭД'"), ТекстОшибки, ТекстОшибки);
	КонецЕсли;
	
	Возврат ФлагОшибки;
	
КонецФункции

Функция ПолучитьФайлДанныхДляОбработки(СтруктураДанных, ПапкаДляРасшифровки, ЭтоПроизвольныйЭД)
	
	ФайлДанныхОбработан = Ложь;
	Если ЗначениеЗаполнено(ПапкаДляРасшифровки) Тогда
		
		Если НайтиФайлы(ПапкаДляРасшифровки).Количество() = 0 Тогда
			СоздатьКаталог(ПапкаДляРасшифровки);
		КонецЕсли;
			
		Если НайтиФайлы(ПапкаДляРасшифровки).Количество() > 0 Тогда
			
			УдалитьФайлы(ПапкаДляРасшифровки, "*");
			
			ФайлДанных = СтруктураДанных.ДвоичныеДанные;
			Расширение = СтрЗаменить(СтруктураДанных.ИмяФайла, СтруктураДанных.ИмяФайлаБезРасширения, "");
			
			ФайлРасшифрованногоАрхива = ЭлектронныеДокументыСлужебный.ТекущееИмяВременногоФайла(Расширение);
			ФайлДанных.Записать(ФайлРасшифрованногоАрхива);
			
			Если Найти(Расширение, "zip") > 0 И ЭтоПроизвольныйЭД <> Истина Тогда
				Попытка
					ЧтениеЗИП = Новый ЧтениеZIPФайла(ФайлРасшифрованногоАрхива);
					ЧтениеЗИП.ИзвлечьВсе(ПапкаДляРасшифровки);
					ФайлДанныхОбработан = Истина;
				Исключение
					ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
					Если ЧтениеЗИП = Неопределено Тогда
						ТекстСообщения = НСтр("ru = 'Невозможно прочитать транспортный архив'");
					Иначе
						Если НЕ ЭлектронныеДокументыСлужебный.ВозможноИзвлечьФайлы(ЧтениеЗИП, ПапкаДляРасшифровки) Тогда
							ТекстСообщения = ЭлектронныеДокументыПовтИсп.ПолучитьСообщениеОбОшибке("006");
						КонецЕсли;
						ЧтениеЗИП.Закрыть();
					КонецЕсли;
					ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'Распаковка пакета ЭД'"), ТекстОшибки, ТекстСообщения);
				КонецПопытки;
			Иначе
				ФайлДвоичныхДанных = Новый Файл(ФайлРасшифрованногоАрхива);
				КопироватьФайл(ФайлРасшифрованногоАрхива, ПапкаДляРасшифровки + ФайлДвоичныхДанных.Имя);
				ФайлДанныхОбработан = Истина;
			КонецЕсли;
			
			УдалитьФайлы(ФайлРасшифрованногоАрхива);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ФайлДанныхОбработан;
	
КонецФункции

// Процедура определяет, по каким объектам ИБ не надо выполнять действия (утверждение,
// подписание, подготовка к отправке).
//
// Параметры:
//  НастройкиОбъектов - соответствие, содержит ссылки на документы ИБ, 
//                     по которым предполагается выполнение каких-либо действий с ЭД.
//  МассивНеобрабатываемыхОбъектов - массив, возвращает в вызывающую процедуру ссылки на объекты ИБ,
//                                  по которым не надо выполнять никаких действий.
//
Процедура ОпределитьНеобрабатываемыеОбъекты(НастройкиОбъектов, МассивНеобрабатываемыхОбъектов)
	
	МассивОтбора = Новый Массив;
	Для Каждого Элемент Из НастройкиОбъектов Цикл
		Если ЗначениеЗаполнено(Элемент.Значение) Тогда
			МассивОтбора.Добавить(Элемент.Ключ);
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СостоянияЭД.СсылкаНаОбъект,
	|	СостоянияЭД.ЭлектронныйДокумент,
	|	СостоянияЭД.СостояниеВерсииЭД,
	|	СостоянияЭД.ЭлектронныйДокумент.ПрофильНастроекЭДО.СпособОбменаЭД КАК СпособОбменаЭД,
	|	СостоянияЭД.СостояниеВерсииЭД КАК СостояниеВерсииЭД1,
	|	СостоянияЭД.ЭлектронныйДокумент.СтатусЭД
	|ИЗ
	|	РегистрСведений.СостоянияЭД КАК СостоянияЭД
	|ГДЕ
	|	СостоянияЭД.СсылкаНаОбъект В(&МассивСсылок)
	|	И СостоянияЭД.СостояниеВерсииЭД В(&СостоянияВерсийЭД)";
	
	СостоянияВерсийЭД = Новый Массив;
	СостоянияВерсийЭД.Добавить(Перечисления.СостоянияВерсийЭД.ОжидаетсяОтправка);
	СостоянияВерсийЭД.Добавить(Перечисления.СостоянияВерсийЭД.ОжидаетсяПодтверждение);
	СостоянияВерсийЭД.Добавить(Перечисления.СостоянияВерсийЭД.ОбменЗавершен);
	СостоянияВерсийЭД.Добавить(Перечисления.СостоянияВерсийЭД.ОбменЗавершенСИсправлением);
	СостоянияВерсийЭД.Добавить(Перечисления.СостоянияВерсийЭД.ОжидаетсяИзвещениеОПолучении);
	СостоянияВерсийЭД.Добавить(Перечисления.СостоянияВерсийЭД.Отклонен);
	Запрос.УстановитьПараметр("СостоянияВерсийЭД", СостоянияВерсийЭД);
	
	Запрос.УстановитьПараметр("МассивСсылок", МассивОтбора);
	
	Результат = Запрос.Выполнить().Выбрать();
	Пока Результат.Следующий() Цикл
		МассивНеОбрабатываемыхОбъектов.Добавить(Результат.ЭлектронныйДокумент);
		ТекстСообщения = НСтр("ru = 'Обработка %1.
				|Не требуется выполнения действий с электронным документом.'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Результат.СсылкаНаОбъект);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Результат.СсылкаНаОбъект);
	КонецЦикла;
	
КонецПроцедуры

Функция ОснованияЭлектронногоДокумента(Знач ЭлектронныйДокумент) 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СостоянияЭД.СсылкаНаОбъект КАК Основание
	|ИЗ
	|	РегистрСведений.СостоянияЭД КАК СостоянияЭД
	|ГДЕ
	|	СостоянияЭД.ЭлектронныйДокумент = &ЭлектронныйДокумент";
	Запрос.УстановитьПараметр("ЭлектронныйДокумент", ЭлектронныйДокумент);
	
	Основания = Новый Массив;
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Основания;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Основания.Добавить(Выборка.Основание);
		
	КонецЦикла;
	
	Возврат Основания;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Сертификаты

Функция СформироватьСписокРасширенийСертификатов()
	
	СписокРасширений = Новый СписокЗначений;
	СписокРасширений.Добавить(".p7s");
	
	Возврат СписокРасширений;
	
КонецФункции

Функция СформироватьФайлыДляОтправки(Конверт)
	
	ФайлыЭД = ЭлектронныеДокументыСлужебный.ПолучитьВыборкуЭДПоОтбору(Новый Структура("ВладелецФайла", Конверт));
	АдресКаталога = ЭлектронныеДокументыСлужебный.РабочийКаталог("send", Конверт.Ссылка.УникальныйИдентификатор());
	Если НЕ ФайлыЭД = Неопределено Тогда
		Пока ФайлыЭД.Следующий() Цикл
			ДанныеФайла = ПрисоединенныеФайлы.ПолучитьДанныеФайла(ФайлыЭД.Ссылка); //ЭлектронныеДокументыСлужебный.ПолучитьДанныеФайла(ФайлыЭД.Ссылка);
			ДвоичныеДанные = ПолучитьИзВременногоХранилища(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
			ДвоичныеДанные.Записать(АдресКаталога + ДанныеФайла.ИмяФайла);
		КонецЦикла;
	КонецЕсли;
	
	Возврат АдресКаталога;
	
КонецФункции

Процедура ЗаполнитьДокументИБПоЭД(СсылкаНаВладельца, СсылкаНаЭД, ДокЗаполнен =Ложь, СпособОбработки = "")
	
	УстановитьПривилегированныйРежим(Истина);
	
	ФайлДанныхСсылка = ПолучитьДанныеЭД(СсылкаНаЭД);
	Если НЕ ЗначениеЗаполнено(ФайлДанныхСсылка) Тогда
		Возврат;
	КонецЕсли;
	ВыборкаДопДанные = ЭлектронныеДокументыСлужебный.ВыборкаДопДанныеЭД(СсылкаНаЭД);
	Если ВыборкаДопДанные.Следующий() Тогда
		СсылкаНаЭДДопДанных = ВыборкаДопДанные.Ссылка;
		ФайлДопДанныхСсылка = ПолучитьДанныеЭД(СсылкаНаЭДДопДанных);
		Если НЕ ЗначениеЗаполнено(ФайлДопДанныхСсылка) Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура;
	
	ДокументыУчета = Новый Массив;
	Если СсылкаНаЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.СЧФДОПУПД
		ИЛИ СсылкаНаЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.КСЧФДИСУКД Тогда
		МассивСсылокНаЭД = Новый Массив;
		МассивСсылокНаЭД.Добавить(СсылкаНаЭД.ВладелецФайла);
		СоответствиеВладельцевИЭД = ПолучитьСоответствиеВладельцевИЭД(, МассивСсылокНаЭД);
		
		Если СоответствиеВладельцевИЭД.Количество() = 0 Тогда
			ДокументыУчета.Добавить(СсылкаНаВладельца);
		КонецЕсли;
		
		Для каждого ТекущаяСтрока Из СоответствиеВладельцевИЭД Цикл
		
			ДокументыУчета.Добавить(ТекущаяСтрока.Ключ);
		КонецЦикла;
	
	Иначе
		ДокументыУчета.Добавить(СсылкаНаВладельца);
	КонецЕсли;
	СтруктураПараметров.Вставить("ДокументыУчета", ДокументыУчета);
	
	СтруктураПараметров.Вставить("ФайлДанныхСсылка",  ФайлДанныхСсылка);
	СтруктураПараметров.Вставить("НаправлениеЭД",     СсылкаНаЭД.НаправлениеЭД);
	СтруктураПараметров.Вставить("ЗаполнитьДокумент", Истина);
	
	Если ФайлДопДанныхСсылка <> Неопределено Тогда
		СтруктураПараметров.Вставить("ФайлДопДанных", ФайлДопДанныхСсылка);
	КонецЕсли;
	
	СтруктураЭД = ЭлектронныеДокументыВнутренний.ПолучитьДанныеИзФайла(СтруктураПараметров);
		
	Если СтруктураЭД.Загружен Тогда
		НачатьТранзакцию();
		Попытка
			
			РеквизитыВладельца = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаЭД.ВладелецФайла, "ВидЭД, НастройкаЭДО");
			
			Если РеквизитыВладельца.ВидЭД = Перечисления.ВидыЭД.КаталогТоваров Тогда
				СтруктураПараметров.Вставить("ВладелецЭД", РеквизитыВладельца.НастройкаЭДО);
			КонецЕсли;
			
			ДокументыУчета = ЭлектронныеДокументыВнутренний.СохранитьДанныеОбъекта(СтруктураПараметров, СпособОбработки);
			
			Если ЗначениеЗаполнено(ДокументыУчета) Тогда
				Для каждого Строка Из ДокументыУчета Цикл
					ЭлектронныеДокументыСлужебный.УстановитьСсылкуДляВладельцаВРегистреСостояний(Строка, СсылкаНаЭД.ВладелецФайла);
				КонецЦикла;
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ВызватьИсключение;
		КонецПопытки;
	КонецЕсли;
	
	ДокЗаполнен = СтруктураЭД.Загружен;
	
КонецПроцедуры

Функция ПолучитьДанныеЭД(СсылкаНаЭД) Экспорт
	
	СсылкаНаДанные = "";
	
	ДопИнформацияПоЭД = ЭлектронныеДокументыСлужебный.ПолучитьДанныеФайла(СсылкаНаЭД);
	Если ДопИнформацияПоЭД.Свойство("СсылкаНаДвоичныеДанныеФайла")
		И ЗначениеЗаполнено(ДопИнформацияПоЭД.СсылкаНаДвоичныеДанныеФайла) Тогда
		
		ДанныеЭД = ПолучитьИзВременногоХранилища(ДопИнформацияПоЭД.СсылкаНаДвоичныеДанныеФайла);
		
		Если ЗначениеЗаполнено(ДопИнформацияПоЭД.Расширение) Тогда
			ИмяФайла = ЭлектронныеДокументыСлужебный.ТекущееИмяВременногоФайла(ДопИнформацияПоЭД.Расширение);
		Иначе
			ИмяФайла = ЭлектронныеДокументыСлужебный.ТекущееИмяВременногоФайла("xml");
		КонецЕсли;
		
		ДанныеЭД.Записать(ИмяФайла);
		
		Если Найти(ДопИнформацияПоЭД.Расширение, "zip") > 0
				И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаЭД, "ВидЭД") = Перечисления.ВидыЭД.КаталогТоваров Тогда
			СсылкаНаДанные = ДопИнформацияПоЭД.СсылкаНаДвоичныеДанныеФайла
		ИначеЕсли Найти(ДопИнформацияПоЭД.Расширение, "zip") > 0 Тогда
			
			УникальныйИдентификатор = Новый УникальныйИдентификатор;
			ПапкаДляРаспаковки = ЭлектронныеДокументыСлужебный.РабочийКаталог(, УникальныйИдентификатор);
			
			Попытка
				ЗИПЧтение = Новый ЧтениеZipФайла(ИмяФайла);
				ЗипЧтение.ИзвлечьВсе(ПапкаДляРаспаковки);
			Исключение
				ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
				Если ЗИПЧтение = Неопределено Тогда
					ТекстСообщения = НСтр("ru = 'Невозможно прочитать транспортный архив'")
				Иначе
					Если НЕ ЭлектронныеДокументыСлужебный.ВозможноИзвлечьФайлы(ЗипЧтение, ПапкаДляРаспаковки) Тогда
						ТекстСообщения = ЭлектронныеДокументыПовтИсп.ПолучитьСообщениеОбОшибке("006");
					КонецЕсли;
					ЗИПЧтение.Закрыть();
				КонецЕсли;
				ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'Распаковка пакета ЭД'"), ТекстОшибки, ТекстСообщения);
				УдалитьФайлы(ПапкаДляРаспаковки);
				Возврат "";
			КонецПопытки;
			
			ФайлыАрхиваXML = НайтиФайлы(ПапкаДляРаспаковки, "*.xml");
			Для Каждого РаспакованныйФайл Из ФайлыАрхиваXML Цикл
				ДвоичныеДанныеФайла = Новый ДвоичныеДанные(РаспакованныйФайл.ПолноеИмя);
				СсылкаНаДанные = ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайла, Новый УникальныйИдентификатор);
				Прервать;
			КонецЦикла;
			
			УдалитьФайлы(ПапкаДляРаспаковки);
			
		ИначеЕсли Найти(ДопИнформацияПоЭД.Расширение, "xml") > 0 Тогда
			СсылкаНаДанные = ДопИнформацияПоЭД.СсылкаНаДвоичныеДанныеФайла;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СсылкаНаДанные;
	
КонецФункции

// Только для внутреннего использования
Функция СоответствиеДанныхПакетов(МассивПакетовЭД) Экспорт
	
	СоответствиеВозврата = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПакетЭДЭлектронныеДокументы.Ссылка КАК ПакетЭД,
	|	ПакетЭДЭлектронныеДокументы.ЭлектронныйДокумент КАК ЭлектронныйДокумент,
	|	ПакетЭДЭлектронныеДокументы.ЭлектронныйДокумент.НаправлениеЭД КАК НаправлениеЭД,
	|	ПакетЭДЭлектронныеДокументы.ЭлектронныйДокумент.ВидЭД КАК ВидЭД
	|ИЗ
	|	Документ.ПакетЭД.ЭлектронныеДокументы КАК ПакетЭДЭлектронныеДокументы
	|ГДЕ
	|	ПакетЭДЭлектронныеДокументы.Ссылка В(&МассивПакетовЭД)
	|ИТОГИ ПО
	|	ПакетЭД";
	
	Запрос.УстановитьПараметр("МассивПакетовЭД", МассивПакетовЭД);
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаПакеты = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаПакеты.Следующий() Цикл
		ВыборкаЭД = ВыборкаПакеты.Выбрать();
		МассивЭД = Новый Массив;
		Пока ВыборкаЭД.Следующий() Цикл
			СтруктураДанныхФайла = Новый Структура;
			ДанныеФайла = ЭлектронныеДокументыСлужебный.ПолучитьДанныеФайла(ВыборкаЭД.ЭлектронныйДокумент);
			СтруктураДанныхФайла.Вставить("ЭлектронныйДокумент", ВыборкаЭД.ЭлектронныйДокумент);
			СтруктураДанныхФайла.Вставить("ДанныеФайла",         ДанныеФайла);
			СтруктураДанныхФайла.Вставить(
					"ЭтоОтправкаПодтверждения",
					ВыборкаЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий);
			ПараметрыШифрования = ЭлектронныеДокументыСлужебный.ПолучитьМассивАдресовСертификатовШифрования(
																			ВыборкаЭД.ЭлектронныйДокумент);
			СтруктураДанныхФайла.Вставить("ПараметрыШифрования", ПараметрыШифрования);
			МассивЭД.Добавить(СтруктураДанныхФайла);
		КонецЦикла;
		СоответствиеВозврата.Вставить(ВыборкаПакеты.ПакетЭД, МассивЭД);
	КонецЦикла;
	
	Возврат СоответствиеВозврата;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Подпись электронных документов

// Сохраняет результаты проверки ЭП, выполненные на клиенте
//
// Параметры:
// ЭД - СправочникСсылка.ЭДПрисоединенныеФайлы - ссылка на электронный документ.
// МассивРезультатов - массив - содержит данные проверки подписей.
//
Процедура СохранитьРезультатыПроверкиПодписей(ЭД, МассивРезультатов) Экспорт
	
	Если МассивРезультатов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОбъектСправочник = ЭД.ПолучитьОбъект();
	
	Для Каждого Элемент Из МассивРезультатов Цикл
		СтрокаТЧ = ОбъектСправочник.ЭлектронныеЦифровыеПодписи.Получить(Элемент.НомерСтроки-1);
		СтрокаТЧ.ДатаПроверкиПодписи = ТекущаяДатаСеанса();
		СтрокаТЧ.ПодписьВерна = Элемент.Результат;
		
		Если  Элемент.Свойство("КомуВыданСертификат")
			И Элемент.Свойство("Отпечаток") 
			И Элемент.Свойство("ДвоичныеДанныеСертификата") Тогда
			
			СтрокаТЧ.КомуВыданСертификат = Элемент.КомуВыданСертификат;
			СтрокаТЧ.Отпечаток           = Элемент.Отпечаток;
			СтрокаТЧ.Сертификат          = Новый ХранилищеЗначения(Элемент.ДвоичныеДанныеСертификата);
		КонецЕсли;
	КонецЦикла;
	
	Попытка
		ОбъектСправочник.Записать();
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
	КонецПопытки
	
КонецПроцедуры

// Подписывает электронные документы определенным сертификатом криптографии.
// 
// Параметры:
//  ДобавленныеФайлы - Массив ссылок на электронные документы, которые необходимо подписать,
//  СертификатПодписи - СертификатКриптографии, сертификат, которым необходимо подписать переданные электронные документы,
//  ПараметрыСертификата - Структура, содержит реквизиты сертификата
//  МассивНеПодписанныхЭД - Массив либо Неопределено, в этой переменной в вызывающую процедуру возвращается массив ЭД,
//    которые не были подписаны.
//
Функция ПодписатьЭДОпределеннымСертификатом(ДобавленныеФайлы,
											СертификатПодписи,
											ПараметрыСертификата,
											МассивНеПодписанныхЭД = Неопределено) Экспорт
											
	Если Не ТипЗнч(ДобавленныеФайлы) = Тип("Массив") Тогда
		 ФайлыНаПодпись = Новый Массив;
		 ФайлыНаПодпись.Добавить(ДобавленныеФайлы);
	 Иначе
		 ФайлыНаПодпись = ДобавленныеФайлы;
	КонецЕсли;
	
	Если ТипЗнч(МассивНеПодписанныхЭД) <> Тип("Массив") Тогда
		МассивНеПодписанныхЭД = Новый Массив;
	КонецЕсли;
	Попытка
		МенеджерКриптографии = ПолучитьМенеджерКриптографии();
	Исключение
		ТекстСообщения = ПолучитьСообщениеОбОшибке("110");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Для Каждого НеПодписанныйЭД Из ФайлыНаПодпись Цикл
			МассивНеПодписанныхЭД.Добавить(НеПодписанныйЭД);
		КонецЦикла;
		Возврат 0;
	КонецПопытки;
	
	ПроверитьСрокДействияСертификата(СертификатПодписи);
	
	МенеджерКриптографии.ВключениеСертификатовВПодпись = РежимВключенияСертификатовКриптографии.ВключатьСертификатСубъекта;
	
	КриптоСертификат = ПолучитьСертификатПоОтпечатку(ПараметрыСертификата.Отпечаток);
	
	КоличествоПодписанныхЭД = 0;
	
	Если КриптоСертификат <> Неопределено Тогда
		
		Попытка
			МенеджерКриптографии.ПроверитьСертификат(КриптоСертификат,
													 РежимПроверкиСертификатаКриптографии.РазрешитьТестовыеСертификаты);
		Исключение
			ТекстСообщения = ПолучитьСообщениеОбОшибке("112");
			ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'проверка сертификата на корректность'"),
											  ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
											  ТекстСообщения);
			Для Каждого НеПодписанныйЭД Из ФайлыНаПодпись Цикл
				МассивНеПодписанныхЭД.Добавить(НеПодписанныйЭД);
			КонецЦикла;
			Возврат 0;
		КонецПопыткИ;
		
		Для Каждого ТекДокумент Из ФайлыНаПодпись Цикл
			
			СтруктураДанныхПодписи = Новый Структура("Сертификат, ПарольПользователя, Комментарий", КриптоСертификат, ПараметрыСертификата.ПарольПользователя,
				НСтр("ru = 'Подписание электронного документа'"));
			Попытка
				ДвоичныеДанныеФайла = ПолучитьДвоичныеДанныеФайла(ТекДокумент, СертификатПодписи);
				ДанныеПодписи = СформироватьДанныеПодписи(МенеджерКриптографии, ТекДокумент, ДвоичныеДанныеФайла,
					СтруктураДанныхПодписи);
				
				ДобавитьПодпись(ТекДокумент, ДанныеПодписи);
				КоличествоПодписанныхЭД = КоличествоПодписанныхЭД + 1;
				ОпределитьСтатусыПодписей(ТекДокумент);
			Исключение
				ШаблонСообщения = НСтр("ru = 'Ошибка подписи на сервере. Необходимо провести тест сертификата криптографии для: %1.
				|%2'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, СертификатПодписи,
					КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
				ОбработатьИсключениеПоЭДНаСервере(
						НСтр("ru = 'установка подписи ЭЦП'"),
						ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
						ТекстСообщения);
				МассивНеПодписанныхЭД.Добавить(ТекДокумент);
			КонецПопытки;
			
		КонецЦикла;
	КонецЕсли;
	
	Возврат КоличествоПодписанныхЭД;
	
КонецФункции

// Заносит информацию о подписи объекта
//
// Параметры
//  ПодписываемыйОбъектСсылка  - любая ссылка / объект - в табличную часть которого будет занесена информация о ЭЦП
//  							в случае если ссылка - будет получен объект, блокировка, запись в ИБ
//  							в случае объекта за блокировку и запись отвечает вызывающий код
//  НоваяПодписьДвоичныеДанные  - ДвоичныеДанные - двоичные данные подписи
//  Отпечаток  - Строка - Base64 закодированная строка с отпечатком сертификата подписавшего
//  ДатаПодписи  - Дата - дата подписи
//  Комментарий  - Строка - комментарий подписи
//  ИмяФайлаПодписи  - Строка - имя файла подписи (не пусто только в случае если подпись добавлена из файла)
//  КомуВыданСертификат  - Строка - представление поля КомуВыдан сертификата
//  УникальныйИдентификатор - УникальныйИдентификатор - уникальный идентификатор формы
//
Процедура ЗанестиИнформациюОПодписи(
				ПодписываемыйОбъектСсылка,
				НоваяПодписьДвоичныеДанные,
				Отпечаток,
				ДатаПодписи,
				Комментарий,
				ИмяФайлаПодписи,
				КомуВыданСертификат,
				ДвоичныеДанныеСертификата,
				УникальныйИдентификатор = Неопределено) Экспорт
				
	УстановитьПривилегированныйРежим(Истина);
	
	ДатаУстановкиПодписи = ЭлектронныеДокументыСлужебный.ДатаУстановкиПодписи(НоваяПодписьДвоичныеДанные);
	ДатаУстановкиПодписи = ?(ЗначениеЗаполнено(ДатаУстановкиПодписи), ДатаУстановкиПодписи, ТекущаяДатаСеанса());
	
	ЭлектроннаяЦифроваяПодпись.ЗанестиИнформациюОПодписи(
										ПодписываемыйОбъектСсылка,
										НоваяПодписьДвоичныеДанные,
										Отпечаток,
										ДатаУстановкиПодписи,
										Комментарий,
										ИмяФайлаПодписи,
										КомуВыданСертификат,
										ДвоичныеДанныеСертификата,
										УникальныйИдентификатор)

КонецПроцедуры

// Производить проверку сертификата на сервере.
//
// Параметры:
// Отпечаток - строка - отпечаток сертификата.
// Пароль - строка - пароль сертификата.
// ВыводитьТолькоОшибки - булево - указывает, что выводить нужно только сообщения об ошибках.
// Отказ - булево - истина - если произошла ошибка, иначе Ложь
//
Процедура ТестСертификатаНаСервере(Отпечаток, Пароль, ВыводитьТолькоОшибки, Отказ) Экспорт
				
	ШаблонСообщения = НСтр("ru = '%1
	|%2'");
	
	// Блок проверки установленных криптосредств на компьютере.
	ОписаниеТеста = НСтр("ru = 'Тест. Проверка средства криптографии на сервере.'");
	Попытка
		МенеджерКриптографии = ПолучитьМенеджерКриптографии();
		РезультатТеста = НСтр("ru = 'Пройден успешно.'");
		Если ВыводитьТолькоОшибки Тогда // подавлять вывод сообщения об успешном прохождении теста
			РезультатТеста = "";
		КонецЕсли;
	Исключение
		ШаблонРезультата = НСтр("ru = '%1
		|%2'");
		ТекстОшибки = ПолучитьСообщениеОбОшибке("110");
		РезультатТеста = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								ШаблонРезультата,
								ТекстОшибки,
								КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		МенеджерКриптографии = Неопределено;
		Отказ = Истина;
	КонецПопытки;
	Если ЗначениеЗаполнено(РезультатТеста) Тогда 
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								ШаблонСообщения,
								ОписаниеТеста,
								РезультатТеста);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	// Критичная ошибка - дальше тесты не проводим.
	Если МенеджерКриптографии = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Блок проверки наличия сертификата в хранилище сертификатов компьютера.
	ОписаниеТеста = НСтр("ru = 'Тест. Проверка наличия сертификата на сервере.'");
	
	Сертификат = ПолучитьСертификатПоОтпечатку(Отпечаток);
	Если Сертификат <> Неопределено Тогда
		РезультатТеста = НСтр("ru = 'Пройден успешно.'");
		Если ВыводитьТолькоОшибки Тогда // подавлять вывод сообщения об успешном прохождении теста
			РезультатТеста = "";
		КонецЕсли;
	Иначе
		РезультатТеста = ПолучитьСообщениеОбОшибке("111");
		Отказ = Истина;
	КонецЕсли;
	Если ЗначениеЗаполнено(РезультатТеста) Тогда 
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								ШаблонСообщения,
								ОписаниеТеста,
								РезультатТеста);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	// Критичная ошибка - дальше тесты не проводим, будет ошибка платформы.
	Если Сертификат = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	МенеджерКриптографии.ПарольДоступаКЗакрытомуКлючу = Пароль;
	
	// Блок проверки сертификата на корректность.
	ОписаниеТеста = НСтр("ru = 'Тест. Проверка реквизитов сертификата.'");
	Попытка
		МенеджерКриптографии.ПроверитьСертификат(
									Сертификат,
									РежимПроверкиСертификатаКриптографии.РазрешитьТестовыеСертификаты);
		РезультатТеста = НСтр("ru = 'Пройден успешно.'");
		Если ВыводитьТолькоОшибки Тогда // подавлять вывод сообщения об успешном прохождении теста
			РезультатТеста = "";
		КонецЕсли;
	Исключение
		ШаблонРезультата = НСтр("ru = '%1
		|%2'");
		ТекстОшибки = ПолучитьСообщениеОбОшибке("112");
		РезультатТеста = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
									ШаблонРезультата,
									ТекстОшибки,
									КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		Отказ = Истина;
	КонецПопытки;
	Если ЗначениеЗаполнено(РезультатТеста) Тогда 
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								ШаблонСообщения,
								ОписаниеТеста,
								РезультатТеста);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	// Блок проверки шифрования/расшифровывания.
	ОтпечатокДвоичныеДанные = Base64Значение(Отпечаток);
	
	ОписаниеТеста = НСтр("ru = 'Тест. Проверка операций шифрования/расшифровки на сервере.'");
	ДвоичныеДанные = МенеджерКриптографии.Зашифровать(ОтпечатокДвоичныеДанные, Сертификат);
	Попытка
		РасшифрованныеДвоичныеДанные = МенеджерКриптографии.Расшифровать(ДвоичныеДанные);
		РезультатТеста = НСтр("ru = 'Пройден успешно.'");
		Если ВыводитьТолькоОшибки Тогда // подавлять вывод сообщения об успешном прохождении теста
			РезультатТеста = "";
		КонецЕсли;
	Исключение
		РезультатТеста = ПолучитьСообщениеОбОшибке("113");
		Отказ = Истина;
	КонецПопытки;
	Если ЗначениеЗаполнено(РезультатТеста) Тогда 
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
									ШаблонСообщения,
									ОписаниеТеста,
									РезультатТеста);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	// Блок проверки ЭЦП.
	ОписаниеТеста = НСтр("ru = 'Тест. Проверка операций формирования/проверки ЭЦП на сервере.'");
	Попытка
		ДвоичныеДанные = МенеджерКриптографии.Подписать(ОтпечатокДвоичныеДанные, Сертификат);
		ЭлектронныеДокументыСлужебный.ПроверитьПодпись(МенеджерКриптографии, ОтпечатокДвоичныеДанные, ДвоичныеДанные);
		РезультатТеста = НСтр("ru = 'Пройден успешно.'");
		Если ВыводитьТолькоОшибки Тогда // подавлять вывод сообщения об успешном прохождении теста
			РезультатТеста = "";
		КонецЕсли;
	Исключение
		ШаблонРезультата = НСтр("ru = '%1
		|%2'");
		ТекстОшибки = ПолучитьСообщениеОбОшибке("114");
		РезультатТеста = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
									ШаблонРезультата,
									ТекстОшибки,
									КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		Отказ = Истина;
	КонецПопытки;
	Если ЗначениеЗаполнено(РезультатТеста) Тогда 
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
									ШаблонСообщения,
									ОписаниеТеста,
									РезультатТеста);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Операции с криптографией

// Создает на сервере менеджер криптографии.  Пароль не устанавливается
//
// Возвращаемое значение:
//   МенеджерКриптографии  - менеджер криптографии
Функция ПолучитьМенеджерКриптографии(Отказ = Ложь) Экспорт
	
	ПерсональныеНастройкиРаботыСЭЦП = ЭлектроннаяЦифроваяПодпись.ПолучитьПерсональныеНастройкиРаботыСЭЦПСервер();
	ПровайдерЭЦП = ПерсональныеНастройкиРаботыСЭЦП.ПровайдерЭЦП;
	ПутьМодуляКриптографии = ПерсональныеНастройкиРаботыСЭЦП.ПутьМодуляКриптографии;
	ТипПровайдераЭЦП = ПерсональныеНастройкиРаботыСЭЦП.ТипПровайдераЭЦП;
	
	Если ПустаяСтрока(ПровайдерЭЦП) Тогда
		ВызватьИсключение
			НСтр("ru = 'Не указан провайдер ЭЦП.
			           |В настройках криптографии укажите провайдера ЭЦП,
			           |тип провайдера, алгоритмы подписи и хеширования.'");
	КонецЕсли;
	
	МенеджерКриптографии = Новый МенеджерКриптографии(ПровайдерЭЦП, ПутьМодуляКриптографии, ТипПровайдераЭЦП);
	
	МенеджерКриптографии.АлгоритмПодписи = ПерсональныеНастройкиРаботыСЭЦП.АлгоритмПодписи;
	МенеджерКриптографии.АлгоритмХеширования = ПерсональныеНастройкиРаботыСЭЦП.АлгоритмХеширования;
	МенеджерКриптографии.АлгоритмШифрования = ПерсональныеНастройкиРаботыСЭЦП.АлгоритмШифрования;
	
	Возврат МенеджерКриптографии;
	
КонецФункции

// Возвращает расшифрованные двоичные данные.
//
// Параметры:
//  ДвоичныеДанные - ДвоичныеДанные, данные, которое необходимо зашифровать
//  Пароль - Строка, пароль для расшифровки
//
// Возвращаемое значение:
//  ДвоичныеДанные или неопределено - зашифрованные двоичные данные или Неопределено в случае ошибки.
//
Функция РасшифрованныеДанные(ДвоичныеДанные, Пароль) Экспорт
	
	Попытка
		МенеджерКриптографии = ПолучитьМенеджерКриптографии();
	Исключение
		ТекстСообщения = ПолучитьСообщениеОбОшибке("110");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат Неопределено;
	КонецПопытки;
	
	МенеджерКриптографии.ПарольДоступаКЗакрытомуКлючу = Пароль;
	// Метод расшифровки генерирует исключение в случае ошибки.
	Попытка
		РасшифрованныеДвоичныеДанные = МенеджерКриптографии.Расшифровать(ДвоичныеДанные);
	Исключение
		ТекстСообщения = ПолучитьСообщениеОбОшибке("113");
		ОбработатьИсключениеПоЭДНаСервере(
				НСтр("ru = 'расшифровка пакета ЭД'"),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
				ТекстСообщения);
		Возврат Неопределено;
	КонецПопытки;

	Возврат РасшифрованныеДвоичныеДанные;
	
КонецФункции

// Формирует данные подписи объекта
//
// Параметры
//  МенеджерКриптографии  - МенеджерКриптографии - менеджер криптографии
//  ОбъектДляПодписиСсылка  - любая ссылка - ссылка на подписываемый объект
//  ДвоичныеДанные  - ДвоичныеДанные - двоичные данные подписи
//  СтруктураПараметровПодписи  - Структура - информация о подписи - выбранный сертификат, пароль, комментарий
//
// Возвращаемое значение:
//   Структура   - данные для занесения в табличную часть ЭЦП
Функция СформироватьДанныеПодписи(
				МенеджерКриптографии,
				ОбъектДляПодписиСсылка,
				ДвоичныеДанные,
				СтруктураПараметровПодписи) Экспорт
	
	МенеджерКриптографии.ПарольДоступаКЗакрытомуКлючу = СтруктураПараметровПодписи.ПарольПользователя;
	ДатаПодписи = Дата('00010101');
	
	НоваяПодписьДвоичныеДанные = МенеджерКриптографии.Подписать(ДвоичныеДанные, СтруктураПараметровПодписи.Сертификат);
	
	Отпечаток = Base64Строка(СтруктураПараметровПодписи.Сертификат.Отпечаток);
	КомуВыданСертификат = ЭлектроннаяЦифроваяПодписьКлиентСервер.ПолучитьПредставлениеПользователя(СтруктураПараметровПодписи.Сертификат.Субъект);
	ДвоичныеДанныеСертификата = СтруктураПараметровПодписи.Сертификат.Выгрузить();
	
	ДанныеПодписи = Новый Структура("ОбъектСсылка, НоваяПодписьДвоичныеДанные, Отпечаток, ДатаПодписи, Комментарий, ИмяФайлаПодписи, КомуВыданСертификат, АдресФайла, ДвоичныеДанныеСертификата",
							ОбъектДляПодписиСсылка,
							НоваяПодписьДвоичныеДанные,
							Отпечаток,
							ДатаПодписи,
							СтруктураПараметровПодписи.Комментарий,
							"", // ИмяФайлаПодписи
							КомуВыданСертификат,
							"", // АдресФайла
							ДвоичныеДанныеСертификата);
		
	Возврат ДанныеПодписи;
	
КонецФункции

// Получает массив структур сертификатов для показа в диалоге выбора сертификатов для подписи или шифрования
//
// Параметры
//  ТолькоЛичные  - Булево - если Ложь, то берутся также и сертификаты получателей 
//
// Возвращаемое значение:
//   Массив  - массив структур с полями сертификата
Функция ПолучитьМассивСтруктурСертификатов(знач ТолькоЛичные) Экспорт
	
	МассивСтруктурСертификатов = Новый Массив;
	
	Отказ = Ложь;
	МенеджерКриптографии = ПолучитьМенеджерКриптографии(Отказ);
	Если Отказ Тогда
		Возврат МассивСтруктурСертификатов;
	КонецЕсли;
	
	ТекущаяДата = ТекущаяДатаСеанса(); // Используется для выявления истекших сертификатов, которые хранятся на клиентском компьютере.
	
	Хранилище = МенеджерКриптографии.ПолучитьХранилищеСертификатов(ТипХранилищаСертификатовКриптографии.ПерсональныеСертификаты);
	СертификатыХранилища = Хранилище.ПолучитьВсе();
	
	МассивСтрокОтпечатков = Новый Массив;
	
	Для Каждого Сертификат Из СертификатыХранилища Цикл
		Если Сертификат.ДатаОкончания < ТекущаяДата Тогда
			Продолжить; // Пропуск истекших сертификатов.
		КонецЕсли;
		
		СтруктураСертификата = ЭлектроннаяЦифроваяПодписьКлиентСервер.ЗаполнитьСтруктуруСертификата(Сертификат);
		Если СтруктураСертификата <> Неопределено Тогда
			СтрокаОтпечатка = Base64Строка(Сертификат.Отпечаток);
			
			Если МассивСтрокОтпечатков.Найти(СтрокаОтпечатка) = Неопределено Тогда
				МассивСтрокОтпечатков.Добавить(СтрокаОтпечатка);
				МассивСтруктурСертификатов.Добавить(СтруктураСертификата);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ ТолькоЛичные Тогда
		Хранилище = МенеджерКриптографии.ПолучитьХранилищеСертификатов(ТипХранилищаСертификатовКриптографии.СертификатыПолучателей);
		СертификатыХранилища = Хранилище.ПолучитьВсе();
		
		Для Каждого Сертификат Из СертификатыХранилища Цикл
			Если Сертификат.ДатаОкончания < ТекущаяДата Тогда 
				Продолжить; // Пропуск истекших сертификатов.
			КонецЕсли;
			
			СтруктураСертификата = ЭлектроннаяЦифроваяПодписьКлиентСервер.ЗаполнитьСтруктуруСертификата(Сертификат);
			Если СтруктураСертификата <> Неопределено Тогда
				СтрокаОтпечатка = Base64Строка(Сертификат.Отпечаток);
				
				Если МассивСтрокОтпечатков.Найти(СтрокаОтпечатка) = Неопределено Тогда
					МассивСтрокОтпечатков.Добавить(СтрокаОтпечатка);
					МассивСтруктурСертификатов.Добавить(СтруктураСертификата);
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	
	Возврат МассивСтруктурСертификатов;
	
КонецФункции

// Проверяет наличие на сервере средств для работы с криптографией
//
// Возвращаемое значение:
//   Булево  - истина, если менеджер криптографии создан успешно
Функция ЕстьКриптосредстваНаСервере() Экспорт
	
	Отказ = Ложь;
	
	Попытка
		МенеджерКриптографии = ПолучитьМенеджерКриптографии(Отказ);
	Исключение
		ТекстСообщения = ПолучитьСообщениеОбОшибке("110");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Отказ = Истина;
	КонецПопытки;
	
	Возврат НЕ Отказ;

КонецФункции

// Заполняет структуру полями сертификата
//
// Параметры
//  Отпечаток  - Строка - base64 кодированный отпечаток сертификата 
//
// Возвращаемое значение:
//   Структура  - структура с полями сертификата
Функция ЗаполнитьСтруктуруСертификатаПоОтпечатку(Отпечаток) Экспорт
	
	ДвоичныеДанныеОтпечатка = Base64Значение(Отпечаток);
	
	Отказ = Ложь;
	МенеджерКриптографии = ПолучитьМенеджерКриптографии(Отказ);
	Если Отказ Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ХранилищеСертификатов = МенеджерКриптографии.ПолучитьХранилищеСертификатов();
	Сертификат = ХранилищеСертификатов.НайтиПоОтпечатку(ДвоичныеДанныеОтпечатка);
	
	Если Сертификат = Неопределено Тогда
		Предупреждение = НСтр("ru = 'Сертификат не найден'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Предупреждение);
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ЭлектроннаяЦифроваяПодписьКлиентСервер.ЗаполнитьСтруктуруСертификата(Сертификат);
	
КонецФункции

// Находит сертификат по строке отпечатка
//
// Параметры
//  Отпечаток  - Строка - base64 кодированный отпечаток сертификата 
//  ТолькоВЛичномХранилище  - Булево - вести поиск только в личном хранилище
//
// Возвращаемое значение:
//   СертификатКриптографии  - сертификат криптографии 
Функция ПолучитьСертификатПоОтпечатку(Отпечаток, ТолькоВЛичномХранилище = Ложь) Экспорт
	
	ДвоичныеДанныеОтпечатка = Base64Значение(Отпечаток);
	
	Отказ = Ложь;
	МенеджерКриптографии = ПолучитьМенеджерКриптографии(Отказ);
	Если Отказ Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ХранилищеСертификатов = Неопределено;
	Если ТолькоВЛичномХранилище Тогда
		ХранилищеСертификатов = МенеджерКриптографии.ПолучитьХранилищеСертификатов(
															ТипХранилищаСертификатовКриптографии.ПерсональныеСертификаты);
	Иначе	
		ХранилищеСертификатов = МенеджерКриптографии.ПолучитьХранилищеСертификатов();
	КонецЕсли;
	
	Сертификат = ХранилищеСертификатов.НайтиПоОтпечатку(ДвоичныеДанныеОтпечатка);
	
	Возврат Сертификат;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Прочие

// Преобразует двоичные данные в строку на сервере.
//
// Параметры:
//  ДвоичныеДанные - ДвоичныеДанные
//
// Возвращаемое значение:
//  <Строка> - Строка в кодировке UTF8
//
Функция СтрокаИзДвоичныхДанных(ДвоичныеДанные) Экспорт
	
	Если ТипЗнч(ДвоичныеДанные) = Тип("ДвоичныеДанные") Тогда
		ВремФайл = ПолучитьИмяВременногоФайла();
		ДвоичныеДанные.Записать(ВремФайл);
		ТекстовыйДокумент = Новый ТекстовыйДокумент;
		ТекстовыйДокумент.Прочитать(ВремФайл, КодировкаТекста.UTF8);
		УдалитьФайлы(ВремФайл);
		Результат = ТекстовыйДокумент.ПолучитьТекст();
		Возврат Результат;
	Иначе
		Возврат ДвоичныеДанные;
	КонецЕсли;
	
КонецФункции

// Создает присоединенные файлы пакетов, зашифрованных на клиенте
//
// Параметры:
// СоответствиеДанных - соответствие - содержит данные по пакетам и зашифрованным файлам
// СоответствиеПаролейДляЭДО - Соответствие - данные о паролях
//
Процедура СохранитьИОтправитьЗашифрованныеДанные(СоответствиеДанных, СоотвСоглашенийИСтруктурСертификатов, КолОтправленных) Экспорт
	
	МассивПЭД = Новый Массив;
	Для Каждого ЭлементПЭД из СоответствиеДанных Цикл
		ПакетЭД = ЭлементПЭД.Ключ;
		Если ПакетЭД.ВерсияФорматаПакета <> Перечисления.ВерсииФорматаПакетаЭД.Версия10 Тогда
			
			ЭлектронныеДокументыВнутренний.СформироватьЭДПрисоединенныйФайлПакетаОператораЭДО(
								ПакетЭД,
								ЭлементПЭД.Значение[0].ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
		Иначе
			ЭлектронныеДокументыСлужебный.СформироватьЭДПрисоединенныйФайлПакета(ПакетЭД, ЭлементПЭД.Значение);
		КонецЕсли;
		МассивПЭД.Добавить(ПакетЭД);
	КонецЦикла;
		
	Если СоответствиеДанных.Количество() > 0 И ЭлектронныеДокументыСлужебный.НемедленнаяОтправкаЭД() Тогда
		КолОтправленных = ОтправкаПакетовЭД(МассивПЭД, СоотвСоглашенийИСтруктурСертификатов);
	КонецЕсли;
	
КонецПроцедуры

// Только для внутреннего использования
Функция ЗашифрованныйМаркер(СтруктураПараметровЗапросаМаркера, ПараметрыАутентификации = Неопределено) Экспорт
	
	Возврат ЭлектронныеДокументыВнутренний.ПолучитьМаркерОЭДО(СтруктураПараметровЗапросаМаркера, Ложь, ПараметрыАутентификации)
	
КонецФункции

// Определяет, где нужно расшифровывать маркер оператора ЭДО.
//
// Возвращаемое значение:
//  Булево - Истина, если расшифровка происходит на сервере или Ложь - если на клиенте
//
Функция ВыполнятьАвторизациюНаСервере() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Возврат Константы.КонтекстАвторизации.Получить() = Перечисления.КонтекстыРаботыСЭД.НаСервере;
	
КонецФункции

// Определяет, где нужно проводить крипто операции.
//
// Возвращаемое значение:
//  Булево - Истина, если криптография настроена на сервере или Ложь - если на клиенте
//
Функция ВыполнятьКриптооперацииНаСервере() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Возврат Константы.КонтекстКриптографии.Получить() = Перечисления.КонтекстыРаботыСЭД.НаСервере;
	
КонецФункции

// Предназначен для возврата на клиента двоичных данных ЭД, установленных подписей и сертификатов для дальнейшей
// проверки валидности подписей на клиенте
//
// Параметры:
//  ЭД - СправочникСсылка.ЭДПрисоединенныеФайлы, ссылка на электронный документ
//
// Возвращаемое значение:
//  Структура или неопределено - данные электронного документа, Неопределено - если нет подписей
//
Функция СтруктураСодержимогоЭД(ЭД) Экспорт
	
	СтруктураВозврата = Новый Структура;
	
	СтруктураВозврата.Вставить("ВладелецФайла", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭД, "ВладелецФайла"));
	СтруктураВозврата.Вставить("ДанныеЭД",      ПрисоединенныеФайлы.ПолучитьДвоичныеДанныеФайла(ЭД));
	СтруктураВозврата.Вставить("Подписи",       ЭлектронныеДокументыСлужебный.УстановленныеПодписи(ЭД));
	
	Возврат СтруктураВозврата;
	
КонецФункции

// Функция проверяет доступность каталога, указанного в настройках соглашения об обмене (через каталог),
// на доступность как с клиента (т.к. выбор каталога происходит с клиента), так и с сервера (т.к. работа с файлами
// выполняется на сервере).
//
// Параметры:
//  ПутьККаталогу - строка - полный путь к каталогу, доступность которого надо проверить (с клиента и с сервера);
//
Функция ПроверитьДоступностьКаталогаДляПрямогоОбмена(ПутьККаталогу) Экспорт
	
	КаталогиДоступны = Ложь;
	Если ЗначениеЗаполнено(ПутьККаталогу) Тогда
		ПутьККаталогу = СокрЛП(ПутьККаталогу);
		УдалитьКаталогПослеТеста = Ложь;
		Каталог = Новый Файл(ПутьККаталогу);
		Если НЕ Каталог.Существует() Тогда
			УдалитьКаталогПослеТеста = Истина;
			СоздатьКаталог(ПутьККаталогу);
		КонецЕсли;
		Разделитель = ?(Прав(ПутьККаталогу, 1) = "\", "", "\");
		ТестовыйФайл = Новый ТекстовыйДокумент;
		ПолноеИмяТестовогоФайла = ПутьККаталогу + Разделитель + "EDI_" + Строка(Новый УникальныйИдентификатор) + ".tst";
		ТестовыйФайл.Записать(ПолноеИмяТестовогоФайла);
		КаталогиДоступны = ПрочитатьТестовыйФайлНаСервере(ПолноеИмяТестовогоФайла);
		Если НЕ КаталогиДоступны Тогда
			ТекстСообщения = НСтр("ru = 'Указанный каталог %1 не может использоваться для обмена, так как он не доступен с сервера.
				|Необходимо указать сетевой каталог для обмена.'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", """" + ПутьККаталогу + """");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		Если УдалитьКаталогПослеТеста Тогда
			УдалитьФайлы(Каталог.ПолноеИмя);
		Иначе
			УдалитьФайлы(ПолноеИмяТестовогоФайла);
		КонецЕсли;
	КонецЕсли;
	
	Возврат КаталогиДоступны;
	
КонецФункции

&НаСервере
Функция ПроверитьДоступностьКаталогаFTP(ПараметрыСоединения) Экспорт
	
	ИспользоватьПрокси = Ложь;
	
	НастройкаПроксиСервера = ПолучениеФайловИзИнтернета.НастройкиПроксиНаСервере();
	Если НастройкаПроксиСервера <> Неопределено Тогда
		ПараметрИспользоватьПрокси = НастройкаПроксиСервера.Получить("ИспользоватьПрокси");
		Если НЕ ПараметрИспользоватьПрокси=Неопределено Тогда
			ИспользоватьПрокси = ПараметрИспользоватьПрокси;
		КонецЕсли;
	КонецЕсли;
	
	Если ИспользоватьПрокси Тогда
		Если НастройкаПроксиСервера.Получить("ИспользоватьСистемныеНастройки") Тогда
			// Системные настройки прокси-сервера.
			Прокси = Новый ИнтернетПрокси(Истина);
		Иначе
			// Ручные настройки прокси-сервера.
			Прокси = Новый ИнтернетПрокси;
			Прокси.Установить("ftp", НастройкаПроксиСервера["Сервер"], НастройкаПроксиСервера["Порт"],
				НастройкаПроксиСервера["Пользователь"], НастройкаПроксиСервера["Пароль"]);
			Прокси.НеИспользоватьПроксиДляЛокальныхАдресов = НастройкаПроксиСервера["НеИспользоватьПроксиДляЛокальныхАдресов"];
			
		КонецЕсли;
	Иначе
		Прокси = Новый ИнтернетПрокси(Ложь);
	КонецЕсли;
	
	Попытка
		FTPСоединение = Новый FTPСоединение(ПараметрыСоединения.АдресСервераFTP,
											ПараметрыСоединения.ПортFTP,
											ПараметрыСоединения.ПользовательFTP,
											ПараметрыСоединения.ПарольFTP,
											Прокси,
											ПараметрыСоединения.ПассивноеСоединениеFTP);
	Исключение
		ТекстОшибки = ПолучитьСообщениеОбОшибке("121");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		Отказ = Истина;
		Возврат Ложь;
	КонецПопытки;
	
	Попытка
		ЭлектронныеДокументыСлужебный.ПодготовитьПутьFTP(ПараметрыСоединения.FTPКаталогВходящихДокументов);
		FTPСоединение.УстановитьТекущийКаталог(ПараметрыСоединения.FTPКаталогВходящихДокументов);
	Исключение
		ЭлектронныеДокументыСлужебный.СоздатьКаталогиFTP(FTPСоединение, ПараметрыСоединения.FTPКаталогВходящихДокументов, Истина, ТекстОшибки);
	КонецПопытки;
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		Отказ = Истина;
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Процедура СохранитьОтветСбербанка(ЭД, СоглашениеЭД, Идентификатор, ВидЭД, МассивНовыхЭД)
	
	Если ВидЭД = Перечисления.ВидыЭД.ЗапросНочнойВыписки И НЕ ЭД.Statements = Неопределено Тогда
		СохранитьВыпискуБанка(ЭД, СоглашениеЭД, Идентификатор, МассивНовыхЭД);
		Возврат;
	КонецЕсли;
		
	Если ЭД.Tickets = Неопределено Тогда
		УдалитьИдентификаторЗапроса(СоглашениеЭД, Идентификатор, ВидЭД);
		Возврат;
	КонецЕсли;
	
	ЗапросЭД = Новый Запрос;
	ЗапросЭД.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЭДПрисоединенныеФайлы.Ссылка
	|ПОМЕСТИТЬ ЭДВладелец
	|ИЗ
	|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	|ГДЕ
	|	ЭДПрисоединенныеФайлы.УникальныйИД = &УникальныйИД
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЭДПрисоединенныеФайлы.Ссылка
	|ПОМЕСТИТЬ ОтветБанкаЭД
	|ИЗ
	|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	|ГДЕ
	|	ЭДПрисоединенныеФайлы.ЭлектронныйДокументВладелец В
	|			(ВЫБРАТЬ
	|				ЭДВладелец.Ссылка
	|			ИЗ
	|				ЭДВладелец КАК ЭДВладелец)
	|	И ЭДПрисоединенныеФайлы.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.Квитанция)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЭДПрисоединенныеФайлы.Ссылка
	|ПОМЕСТИТЬ ДайджестКвитанции
	|ИЗ
	|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	|ГДЕ
	|	ЭДПрисоединенныеФайлы.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.ДопДанные)
	|	И ЭДПрисоединенныеФайлы.ЭлектронныйДокументВладелец В
	|			(ВЫБРАТЬ
	|				ЭДВладелец.Ссылка
	|			ИЗ
	|				ОтветБанкаЭД КАК ЭДВладелец)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтветБанкаЭД.Ссылка КАК ЭДОтветБанка,
	|	ЭДВладелец.Ссылка КАК ЭДВладелец,
	|	ДайджестКвитанции.Ссылка КАК ЭДДайджестКвитанции
	|ИЗ
	|	ЭДВладелец КАК ЭДВладелец
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОтветБанкаЭД КАК ОтветБанкаЭД
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДайджестКвитанции КАК ДайджестКвитанции
	|		ПО (ИСТИНА)";

	Для Каждого Тикет ИЗ ЭД.Tickets.Ticket Цикл
		Если Тикет.Info = Неопределено ИЛИ Тикет.Info.docExtId = Неопределено Тогда
			УникальныйИД = ЭД.requestId;
		Иначе
			УникальныйИД = Тикет.Info.docExtId;
		КонецЕсли;
		ЗапросЭД.УстановитьПараметр("УникальныйИД", УникальныйИД);
		ВыборкаЭД = ЗапросЭД.Выполнить().Выбрать();
		Если ВыборкаЭД.Следующий() Тогда
			Если Не ЗначениеЗаполнено(ВыборкаЭД.ЭДВладелец) Тогда
				Возврат;
			КонецЕсли;
			Если  НЕ ЭД.Statements = Неопределено Тогда
				СохранитьВыпискуБанка(ЭД, СоглашениеЭД, Идентификатор, МассивНовыхЭД, ВыборкаЭД.ЭДВладелец);
				Возврат;
			КонецЕсли;
			ВремФайл = ПолучитьИмяВременногоФайла();
			ЭлектронныеДокументыВнутренний.ВыгрузитьЭДвФайл(Тикет, ВремФайл);
			ДвоичныеДанныеФайлаОтвета = Новый ДвоичныеДанные(ВремФайл);
			СсылкаНаХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайлаОтвета);
			
			ВладелецФайла = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВыборкаЭД.ЭДВладелец, "ВладелецФайла");
			СтруктураВладельца = Новый Структура;
			
			ТекДата = ТекущаяДатаСеанса();
			Если НЕ ЗначениеЗаполнено(ВыборкаЭД.ЭДОтветБанка) Тогда
				ЭДОтветБанка = ПрисоединенныеФайлы.ДобавитьФайл(
									ВладелецФайла,
									Нстр("ru = 'Квитанция от'")+ " " + Формат(ТекДата, "ДЛФ=DDT"),
									"xml",
									ТекДата,
									ТекДата,
									СсылкаНаХранилище,
									,
									,
									Справочники.ЭДПрисоединенныеФайлы.ПолучитьСсылку());
									
				СтруктураОтветаБанка = Новый Структура;
				СтруктураОтветаБанка.Вставить("ЭлектронныйДокументВладелец", ВыборкаЭД.ЭДВладелец);
				СтруктураОтветаБанка.Вставить("СоглашениеЭД",                СоглашениеЭД);
				СтруктураОтветаБанка.Вставить("УникальныйИД",                ЭД.responseId);
				СтруктураОтветаБанка.Вставить("ВидЭД",                       Перечисления.ВидыЭД.Квитанция);
				СтруктураОтветаБанка.Вставить("СтатусЭД",                    Перечисления.СтатусыЭД.Получен);
				СтруктураОтветаБанка.Вставить("НаправлениеЭД",               Перечисления.НаправленияЭД.Входящий);
				СтруктураОтветаБанка.Вставить("НаименованиеФайла",           Нстр("ru = 'Квитанция от'")+ " " + Формат(ТекДата, "ДЛФ=DDT"));
				ЭлектронныеДокументыСлужебный.ИзменитьПоСсылкеПрисоединенныйФайл(ЭДОтветБанка, СтруктураОтветаБанка, Ложь);
				СтруктураВладельца.Вставить("УникальныйИДВнешний", Тикет.docId);
			Иначе
				ПрисоединенныеФайлыСлужебный.ЗаписатьФайлВИнформационнуюБазу(ВыборкаЭД.ЭДОтветБанка, ДвоичныеДанныеФайлаОтвета);
				
				СтруктураОтветаБанка = Новый Структура;
				СтруктураОтветаБанка.Вставить("Наименование", Нстр("ru = 'Квитанция от'") + " " + Формат(ТекДата, "ДЛФ=DDT"));
				СтруктураОтветаБанка.Вставить("Расширение",                   "xml");
				СтруктураОтветаБанка.Вставить("ДатаМодификацииУниверсальная", ТекДата);
				СтруктураОтветаБанка.Вставить("ДатаСоздания",                 ТекДата);
				СтруктураОтветаБанка.Вставить("ДатаИзмененияСтатусаЭД",       ТекущаяДатаСеанса());
				СтруктураОтветаБанка.Вставить("УникальныйИД",                 ЭД.responseId);
				СтруктураОтветаБанка.Вставить("УдалитьЭП");
				ЭлектронныеДокументыСлужебный.ИзменитьПоСсылкеПрисоединенныйФайл(
								ВыборкаЭД.ЭДОтветБанка, СтруктураОтветаБанка, Ложь);
				ЭДОтветБанка = ВыборкаЭД.ЭДОтветБанка;
			КонецЕсли;
			ДайджестBase64 = Дайджест(ВремФайл, СоглашениеЭД);
			УдалитьФайлы(ВремФайл);
			
			ДвоичныеДанныеДайджеста = Base64Значение(ДайджестBase64);
			
			Если Не ЗначениеЗаполнено(ВыборкаЭД.ЭДДайджестКвитанции) Тогда
				АдресХранилища = ПоместитьВоВременноеХранилище(ДвоичныеДанныеДайджеста);
				ДопФайл = ПрисоединенныеФайлы.ДобавитьФайл(
					СоглашениеЭД, "СхемаДанных", , , , АдресХранилища, , , Справочники.ЭДПрисоединенныеФайлы.ПолучитьСсылку());
				ПараметрыФайла = Новый Структура;
				ПараметрыФайла.Вставить("ВидЭД",                       Перечисления.ВидыЭД.ДопДанные);
				ПараметрыФайла.Вставить("ЭлектронныйДокументВладелец", ЭДОтветБанка);
				ПараметрыФайла.Вставить("НаименованиеФайла",           "СхемаДанных");
				ПараметрыФайла.Вставить("СтатусЭД",                    Перечисления.СтатусыЭД.Получен);
				ЭлектронныеДокументыСлужебный.ИзменитьПоСсылкеПрисоединенныйФайл(ДопФайл, ПараметрыФайла, Ложь);
			Иначе
				ПрисоединенныеФайлыСлужебный.ЗаписатьФайлВИнформационнуюБазу(ВыборкаЭД.ЭДДайджестКвитанции, ДвоичныеДанныеДайджеста);
			КонецЕсли;
			
			ХранилищеСертификата = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СоглашениеЭД, "СертификатКонтрагентаДляШифрования");
			ДанныеСертификата = ХранилищеСертификата.Получить();
			Если Не ДанныеСертификата = Неопределено Тогда
				Сертификат = Новый СертификатКриптографии(ДанныеСертификата);
				ВладелецПодписи = Тикет.Sign.issuer;
				ДвоичныеДанныеПодписи = Тикет.Sign.value;
				ДатаУстановкиПодписи = ЭлектронныеДокументыСлужебный.ДатаУстановкиПодписи(ДвоичныеДанныеПодписи);
				ДатаУстановкиПодписи = ?(ЗначениеЗаполнено(ДатаУстановкиПодписи), ДатаУстановкиПодписи, ТекущаяДатаСеанса());
				ЭлектроннаяЦифроваяПодпись.ЗанестиИнформациюОПодписи(
												ЭДОтветБанка,
												ДвоичныеДанныеПодписи,
												Сертификат.Отпечаток,
												ДатаУстановкиПодписи,
												"",
												"",
												ВладелецПодписи,
												ДанныеСертификата);
				МассивНовыхЭД.Добавить(ЭДОтветБанка);
			КонецЕсли;
		
			Информация = Тикет.Info;
			Если Не Информация=Неопределено Тогда
				СтатусСББОЛ = ВРег(Информация.statusStateCode);
				Если СтатусСББОЛ = "ACCEPTED" Тогда
					НовыйСтатусЭД = Перечисления.СтатусыЭД.Принят
				ИначеЕсли СтатусСББОЛ = "IMPLEMENTED" Тогда
					НовыйСтатусЭД = Перечисления.СтатусыЭД.Исполнен
				ИначеЕсли СтатусСББОЛ = "DELIVERED" Тогда
					НовыйСтатусЭД = Перечисления.СтатусыЭД.Доставлен
				ИначеЕсли СтатусСББОЛ = "CARD2" Тогда
					НовыйСтатусЭД = Перечисления.СтатусыЭД.Картотека2
				ИначеЕсли СтатусСББОЛ = "FORMAT_ERROR"
						ИЛИ СтатусСББОЛ = "RQUID_DUPLIC"
						ИЛИ СтатусСББОЛ = "ORG_NOT_FOUND"
						ИЛИ СтатусСББОЛ = "SERT_NOT_FOUND"
						ИЛИ СтатусСББОЛ = "DECLINED_BY_BANK"
						ИЛИ СтатусСББОЛ = "DECLINED"
						ИЛИ СтатусСББОЛ = "FAIL"
						ИЛИ СтатусСББОЛ = "DOCUMENT_NOT_FOUND" Тогда
					НовыйСтатусЭД = Перечисления.СтатусыЭД.ОтклоненБанком
				ИначеЕсли СтатусСББОЛ = "INVALIDEDS" Тогда
					НовыйСтатусЭД = Перечисления.СтатусыЭД.ЭЦПНеВерна
				ИначеЕсли СтатусСББОЛ = "REQUISITE_ERROR" Тогда
					НовыйСтатусЭД = Перечисления.СтатусыЭД.ОшибкаРеквизитов
				ИначеЕсли СтатусСББОЛ = "DECLINED_BY_ABS" Тогда
					НовыйСтатусЭД = Перечисления.СтатусыЭД.ОтказанАБС
				ИначеЕсли СтатусСББОЛ = "DELAYED" Тогда
					НовыйСтатусЭД = Перечисления.СтатусыЭД.Приостановлен
				ИначеЕсли СтатусСББОЛ = "RECALL" Тогда
					НовыйСтатусЭД = Перечисления.СтатусыЭД.Отклонен
				ИначеЕсли СтатусСББОЛ = "PROCESSED" Тогда
					НовыйСтатусЭД = Перечисления.СтатусыЭД.Обработан
				КонецЕсли;
				Если ЗначениеЗаполнено(НовыйСтатусЭД) Тогда
					СтруктураВладельца.Вставить("СтатусЭД", НовыйСтатусЭД);
				КонецЕсли
			КонецЕсли;
			
			Если СтруктураВладельца.Количество() > 0 Тогда
				ЭлектронныеДокументыСлужебный.ИзменитьПоСсылкеПрисоединенныйФайл(ВыборкаЭД.ЭДВладелец, СтруктураВладельца, Ложь);
			КонецЕсли;
			УдалитьИдентификаторЗапроса(СоглашениеЭД, Идентификатор, ВидЭД);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура СохранитьВыпискуБанка(ЭД, СоглашениеЭД, Идентификатор, МассивНовыхЭД, ВладелецЭД = Неопределено)
	
	Для Каждого ВыпискаXDTO из ЭД.Statements.Statement Цикл
		ВнешнИдентификатор = ВыпискаXDTO.docId;
		Если ВыпискаУжеБылаПолучена(СоглашениеЭД, ВнешнИдентификатор) Тогда
			Продолжить;
		КонецЕсли;
		ВремФайл = ПолучитьИмяВременногоФайла();
		ЭлектронныеДокументыВнутренний.ВыгрузитьЭДвФайл(ВыпискаXDTO, ВремФайл);
		ДвоичныеДанныеФайлаОтвета = Новый ДвоичныеДанные(ВремФайл);
		СсылкаНаХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайлаОтвета);
		ТекДата = ТекущаяДатаСеанса();
		ДатаНачала = ВыпискаXDTO.beginDate;
		ДатаОкончания = ВыпискаXDTO.endDate;
		ПредставлениеДокумента = Нстр("ru = 'Выписка банка за период с'") + " " + Формат(ДатаНачала, "ДФ=dd.MM.yyyy")
								+ " " + Нстр("ru = 'по'") + " " + Формат(ДатаОкончания, "ДФ=dd.MM.yyyy");
		ЭДВыпискаБанка = ПрисоединенныеФайлы.ДобавитьФайл(
													СоглашениеЭД,
													ПредставлениеДокумента,
													"xml",
													ТекДата,
													ТекДата,
													СсылкаНаХранилище,
													,
													,
													Справочники.ЭДПрисоединенныеФайлы.ПолучитьСсылку());
		ДайджестBase64 = Дайджест(ВремФайл, СоглашениеЭД);
		УдалитьФайлы(ВремФайл);
		
		АдресХранилища = ПоместитьВоВременноеХранилище(Base64Значение(ДайджестBase64));
		ДопФайл = ПрисоединенныеФайлы.ДобавитьФайл(
						СоглашениеЭД,
						"СхемаДанных",
						,
						,
						,
						АдресХранилища,
						,
						,
						Справочники.ЭДПрисоединенныеФайлы.ПолучитьСсылку());
		ПараметрыФайла = Новый Структура;
		ПараметрыФайла.Вставить("ВидЭД",                       Перечисления.ВидыЭД.ДопДанные);
		ПараметрыФайла.Вставить("ЭлектронныйДокументВладелец", ЭДВыпискаБанка);
		ПараметрыФайла.Вставить("НаименованиеФайла",           "СхемаДанных");
		ПараметрыФайла.Вставить("СтатусЭД",                    Перечисления.СтатусыЭД.Получен);
		ЭлектронныеДокументыСлужебный.ИзменитьПоСсылкеПрисоединенныйФайл(ДопФайл, ПараметрыФайла, Ложь);
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("СоглашениеЭД",            СоглашениеЭД);
		СтруктураПараметров.Вставить("ВидЭД",                   Перечисления.ВидыЭД.ВыпискаБанка);
		СтруктураПараметров.Вставить("СтатусЭД",                Перечисления.СтатусыЭД.Получен);
		СтруктураПараметров.Вставить("ДатаИзмененияСтатусаЭД",  ТекДата);
		СтруктураПараметров.Вставить("УникальныйИДВнешний",     ВнешнИдентификатор);
		СтруктураПараметров.Вставить("НаправлениеЭД",           Перечисления.НаправленияЭД.Входящий);
		СтруктураПараметров.Вставить("НаименованиеФайла",       ПредставлениеДокумента);
		СтруктураПараметров.Вставить("ДополнительнаяИнформация", ВыпискаXDTO.acc);
		Если НЕ ВладелецЭД = Неопределено Тогда
			СтруктураПараметров.Вставить("ЭлектронныйДокументВладелец", ВладелецЭД);
			СтруктураВладельца = Новый Структура("СтатусЭД", Перечисления.СтатусыЭД.ПолученоПодтверждение);
			ЭлектронныеДокументыСлужебный.ИзменитьПоСсылкеПрисоединенныйФайл(ВладелецЭД, СтруктураВладельца, Ложь);
		КонецЕсли;
		ЭлектронныеДокументыСлужебный.ИзменитьПоСсылкеПрисоединенныйФайл(ЭДВыпискаБанка, СтруктураПараметров, Ложь);
		
		ХранилищеСертификата = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СоглашениеЭД, "СертификатКонтрагентаДляШифрования");
		ДанныеСертификата = ХранилищеСертификата.Получить();
		Если Не ДанныеСертификата = Неопределено Тогда
			Сертификат = Новый СертификатКриптографии(ДанныеСертификата);
			ВладелецПодписи = ВыпискаXDTO.Sign.issuer;
			ДвоичныеДанныеПодписи = ВыпискаXDTO.Sign.value;
			ДатаУстановкиПодписи = ЭлектронныеДокументыСлужебный.ДатаУстановкиПодписи(ДвоичныеДанныеПодписи);
			ДатаУстановкиПодписи = ?(ЗначениеЗаполнено(ДатаУстановкиПодписи), ДатаУстановкиПодписи, ТекущаяДатаСеанса());
			ЭлектроннаяЦифроваяПодпись.ЗанестиИнформациюОПодписи(
												ЭДВыпискаБанка,
												ДвоичныеДанныеПодписи,
												Сертификат.Отпечаток,
												ДатаУстановкиПодписи,
												"",
												"",
												ВладелецПодписи,
												ДанныеСертификата);
			МассивНовыхЭД.Добавить(ЭДВыпискаБанка);
		КонецЕсли;
		СохранитьШтампыБанка(ВыпискаXDTO);
	КонецЦикла;
	УдалитьИдентификаторЗапроса(СоглашениеЭД, Идентификатор, Перечисления.ВидыЭД.ЗапросНочнойВыписки);
	
КонецПроцедуры

Функция ВыпискаУжеБылаПолучена(СоглашениеЭД, ВнешнийИдентификатор)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЭДПрисоединенныеФайлы.Ссылка
	|ИЗ
	|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	|ГДЕ
	|	ЭДПрисоединенныеФайлы.СоглашениеЭД = &СоглашениеЭД
	|	И ЭДПрисоединенныеФайлы.УникальныйИДВнешний = &УникальныйИДВнешний";
	Запрос.УстановитьПараметр("СоглашениеЭД", СоглашениеЭД);
	Запрос.УстановитьПараметр("УникальныйИДВнешний", ВнешнийИдентификатор);
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

Процедура СохранитьШтампыБанка(ВыпискаXDTO)
	
	ДанныеШтампов = Новый Соответствие;
	
	Если ВыпискаXDTO.Docs = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МассивВнешнихИдентификаторов = Новый Массив;
	Для Каждого ПлатежноеПоручениеXDTO Из ВыпискаXDTO.Docs.TransInfo Цикл
		Если НЕ ПлатежноеПоручениеXDTO.Params = Неопределено Тогда
			ВнешнийИдентификатор = ПлатежноеПоручениеXDTO.docid;
			ДанныеШтампа = Новый Структура;
			Для Каждого Param Из ПлатежноеПоручениеXDTO.Params.Param Цикл
				ДанныеШтампа.Вставить(Param.Name, Param.Value);
			КонецЦикла;
			МассивВнешнихИдентификаторов.Добавить(ВнешнийИдентификатор);
			ДанныеШтампов.Вставить(ВнешнийИдентификатор, ДанныеШтампа);
		КонецЕсли;
	КонецЦикла;
	
	Если МассивВнешнихИдентификаторов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЭДПрисоединенныеФайлы.Ссылка КАК ЭДПлатежноеПоручение,
	|	ЭДПрисоединенныеФайлы.УникальныйИДВнешний
	|ИЗ
	|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	|ГДЕ
	|	ЭДПрисоединенныеФайлы.УникальныйИДВнешний В(&МассивВнешнихИдентификаторов)
	|	И ЭДПрисоединенныеФайлы.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.ПлатежноеПоручение)";
	Запрос.УстановитьПараметр("МассивВнешнихИдентификаторов", МассивВнешнихИдентификаторов);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ДополнительныеРеквизиты = Новый Структура("ДанныеШтампа", ДанныеШтампов.Получить(Выборка.УникальныйИДВнешний));
		
		ЭлектронныеДокументыСлужебный.ИзменитьПоСсылкеПрисоединенныйФайл(Выборка.ЭДПлатежноеПоручение,
			ДополнительныеРеквизиты, Ложь);
	КонецЦикла;
	
КонецПроцедуры

// Возвращает строку с содержимым сертификата в формате Base64
//
// Параметры
//  <СсылкаНаХранилище>  - <Строка> - ссылка на хранилище с двоичными данными сертификата
//
// Возвращаемое значение:
//   <Строка>   - Строка содержит данные сертификата в формате Base64
//
Функция СертификатВФорматеBase64(СсылкаНаХранилище)

	ДвоичныеДанныеСертификата = СсылкаНаХранилище.Получить();
	
	СтрокаBase64 = Base64Строка(ДвоичныеДанныеСертификата);
	СтрокаBase64 = "-----BEGIN CERTIFICATE-----" + Символы.ПС + СтрокаBase64 + Символы.ПС + "-----END CERTIFICATE-----";

	Возврат СтрокаBase64;

КонецФункции // СертификатВФорматеBase64()

// Возвращает массив документов, которые могут быть проведены
//
// Параметры:
//  МассивДокументов - Массив - массив ссылок на документы 
//
// Возвращаемое значение:
//  Массив - массив документов, которые можно проводить
//
Функция МассивПроводимыхДокументов(МассивДокументов) Экспорт
	
	МассивПроводныхДокументов = Новый Массив;
	МассивТиповНеПроводныхДокументов = Новый Массив;
	Для каждого Элемент из МассивДокументов Цикл
		ИмяДокумента = Элемент.Метаданные().ПолноеИмя();
		Если Метаданные.Документы.Содержит(Метаданные.НайтиПоПолномуИмени(ИмяДокумента)) Тогда
			
			Если Элемент.Метаданные().Проведение = Метаданные.СвойстваОбъектов.Проведение.Запретить Тогда
				Если МассивТиповНеПроводныхДокументов.Найти(ТипЗнч(Элемент)) = Неопределено Тогда
					МассивТиповНеПроводныхДокументов.Добавить(ТипЗнч(Элемент));
				КонецЕсли;
			КонецЕсли;
			
			МассивПроводныхДокументов.Добавить(Элемент)
		КонецЕсли;
	КонецЦикла;
	
	Для каждого ТипНеПроводногоДокумента Из МассивТиповНеПроводныхДокументов Цикл
		ОбщегоНазначенияКлиентСервер.УдалитьВсеВхожденияТипаИзМассива(МассивПроводныхДокументов, ТипНеПроводногоДокумента);
	КонецЦикла;
	
	Возврат МассивПроводныхДокументов;
	
КонецФункции

// Возвращает способ обмена электронными документами.
//
// Параметры:
//  СсылкаНаОбъект - Ссылка на объект ИБ
// Возвращаемое значение
//  СпособОбменаЭД - ссылка на перечисление СпособыОбменаЭД
//
Функция СпособОбменаЭД(СсылкаНаОбъект) Экспорт
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаОбъект, "СпособОбменаЭД");
	
КонецФункции

// Только для внутреннего использования
Функция ОпределитьОбъектПривязки(СтруктураПараметровДокумента)
	
	УстановитьПривилегированныйРежим(Истина);
	ВозвращаемоеЗначение = Неопределено;
	
	Если ЭлектронныеДокументыСлужебный.ЭтоОтветныйТитул(СтруктураПараметровДокумента.ТипЭлементаВерсииЭД) Тогда
		ЭДВладелецСсылка = Справочники.ЭДПрисоединенныеФайлы.ПолучитьСсылку(
			Новый УникальныйИдентификатор(СтруктураПараметровДокумента.ИдЭДВладельца));
		Если ЭДВладелецСсылка.ПолучитьОбъект() <> Неопределено Тогда
			СтруктураПараметровДокумента.Вставить("ЭлектронныйДокументВладелец", ЭДВладелецСсылка);
			ВозвращаемоеЗначение = ЭДВладелецСсылка.ВладелецФайла;
		КонецЕсли;
	Иначе
		
		ПозПодстроки = Найти(СтруктураПараметровДокумента.НомерЭД, "##") - 1;
		Если ПозПодстроки > 0 Тогда
			ЭлектронныйНомерДокумента = Лев(СтруктураПараметровДокумента.НомерЭД, ПозПодстроки);
		Иначе
			ЭлектронныйНомерДокумента = СтруктураПараметровДокумента.НомерЭД;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ЭлектронныйНомерДокумента) Тогда
			
			Если ВозвращаемоеЗначение = Неопределено Тогда
				
				ЗапросДокументовОснований = Новый Запрос;
				ЗапросДокументовОснований.Текст =
				"ВЫБРАТЬ ПЕРВЫЕ 1
				|	ЭДПрисоединенныеФайлы.ВладелецФайла.Ссылка КАК Ссылка
				|ПОМЕСТИТЬ вт_ЭД
				|ИЗ
				|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
				|ГДЕ
				|	ЭДПрисоединенныеФайлы.ПометкаУдаления = ЛОЖЬ
				|	И ЭДПрисоединенныеФайлы.НомерЭД ПОДОБНО &Параметр
				|	И ЭДПрисоединенныеФайлы.ТипЭлементаВерсииЭД = &ТипЭлементаВерсииЭД
				|	И ЭДПрисоединенныеФайлы.НаправлениеЭД = &НаправлениеЭД
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	ЭлектронныйДокументИсходящийДокументыОснования.ДокументОснование КАК Ссылка
				|ИЗ
				|	вт_ЭД КАК вт_ЭД
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронныйДокументИсходящий.ДокументыОснования КАК ЭлектронныйДокументИсходящийДокументыОснования
				|		ПО вт_ЭД.Ссылка = ЭлектронныйДокументИсходящийДокументыОснования.Ссылка
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	ЭлектронныйДокументВходящийДокументыОснования.ДокументОснование
				|ИЗ
				|	вт_ЭД КАК вт_ЭД
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронныйДокументВходящий.ДокументыОснования КАК ЭлектронныйДокументВходящийДокументыОснования
				|		ПО вт_ЭД.Ссылка = ЭлектронныйДокументВходящийДокументыОснования.Ссылка";
				ЗапросДокументовОснований.УстановитьПараметр("НаправлениеЭД",       СтруктураПараметровДокумента.НаправлениеЭД);
				ЗапросДокументовОснований.УстановитьПараметр("Параметр",            ЭлектронныйНомерДокумента + "%");
				ЗапросДокументовОснований.УстановитьПараметр("ТипЭлементаВерсииЭД", СтруктураПараметровДокумента.ТипЭлементаВерсииЭД);
				
				НайденныеДокументы = ЗапросДокументовОснований.Выполнить().Выгрузить();
				Если ЗначениеЗаполнено(НайденныеДокументы) Тогда
					
					ВозвращаемоеЗначение = НайденныеДокументы.ВыгрузитьКолонку("Ссылка");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Процедура закрывает электронный документооборот для переданного массива ссылок на документы ИБ.
//
// Параметры:
//  МассивСсылокНаВладельцев - Массив - массив ссылок на документы ИБ, для которых требуется закрыть ЭДО.
//  ПричинаЗакрытия - Строка - описание причины закрытия ЭДО.
//  КоличествоОбработанныхЭД - Число - число документов ИБ, для которых ЭДО был закрыт.
//
Процедура ЗакрытьДокументыПринудительно(Знач МассивСсылокНаВладельцев, Знач ПричинаЗакрытия, КоличествоОбработанныхЭД) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СводнаяИнформацияПоСтатусу = Новый Структура;
	СводнаяИнформацияПоСтатусу.Вставить("СНашейСтороны",             Перечисления.СводныеСостоянияЭД.ДействийНеТребуется);
	СводнаяИнформацияПоСтатусу.Вставить("СоСтороныДругогоУчастника", Перечисления.СводныеСостоянияЭД.ДействийНеТребуется);
	СводнаяИнформацияПоСтатусу.Вставить("Комментарий",               ПричинаЗакрытия);
	
	МассивДляОчисткиРегистра       = Новый Массив;
	КОбработкеПрисоединенныйФайлов = Новый Массив;
	Для Каждого Документ Из МассивСсылокНаВладельцев Цикл
		
		Если ТипЗнч(Документ) = Тип("ДокументСсылка.ЭлектронныйДокументВходящий")
			Или ТипЗнч(Документ) = Тип("ДокументСсылка.ЭлектронныйДокументИсходящий") Тогда
			ДокументОбъект = Документ.ПолучитьОбъект();
			ДокументОбъект.СостояниеЭДО = Перечисления.СостоянияВерсийЭД.ЗакрытПринудительно;
			ДокументОбъект.ДатаИзмененияСостоянияЭДО = ТекущаяДатаСеанса();
			ДокументОбъект.ПричинаОтклонения = ?(ПустаяСтрока(ДокументОбъект.ПричинаОтклонения), "", Символы.ПС) 
				+ ПричинаЗакрытия;
			ДокументОбъект.Записать();
			
			ОбновитьВерсиюЭДВРегистре(Документ, Перечисления.СостоянияВерсийЭД.ЗакрытПринудительно, СводнаяИнформацияПоСтатусу);
			КОбработкеПрисоединенныйФайлов.Добавить(Документ);
			
			КоличествоОбработанныхЭД = КоличествоОбработанныхЭД + 1;
		Иначе
			МассивДляОчисткиРегистра.Добавить(Документ);
		КонецЕсли;
	КонецЦикла;
	
	Если МассивДляОчисткиРегистра.Количество() > 0 Тогда 
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СостоянияЭД.СсылкаНаОбъект,
		|	СостоянияЭД.ЭлектронныйДокумент
		|ИЗ
		|	РегистрСведений.СостоянияЭД КАК СостоянияЭД
		|ГДЕ
		|	СостоянияЭД.СсылкаНаОбъект В(&МассивСсылок)";
		Запрос.УстановитьПараметр("МассивСсылок", МассивДляОчисткиРегистра);
		ТЗ = Запрос.Выполнить().Выгрузить();
		
		ТЗОбъектов = Новый ТаблицаЗначений;
		ТЗОбъектов.Колонки.Добавить("СсылкаНаОбъект");
		ТЗОбъектов.Колонки.Добавить("ЭлектронныйДокумент");
		
		Для Каждого Элемент Из МассивДляОчисткиРегистра Цикл
			НовСтрока = ТЗОбъектов.Добавить();
			СтрокаТЗ = ТЗ.Найти(Элемент, "СсылкаНаОбъект");
			ЭлектронныйДокумент = Неопределено;
			Если СтрокаТЗ <> Неопределено Тогда
				ЭлектронныйДокумент = СтрокаТЗ.ЭлектронныйДокумент;
				Если ЗначениеЗаполнено(ЭлектронныйДокумент) Тогда
					ДокументОбъект = ЭлектронныйДокумент.ПолучитьОбъект();
					ДокументОбъект.СостояниеЭДО = Перечисления.СостоянияВерсийЭД.ЗакрытПринудительно;
					ДокументОбъект.ДатаИзмененияСостоянияЭДО = ТекущаяДатаСеанса();
					ДокументОбъект.Записать();
				КонецЕсли;
			КонецЕсли;
			НовСтрока.СсылкаНаОбъект = Элемент;
			НовСтрока.ЭлектронныйДокумент = ЭлектронныйДокумент;
			
		КонецЦикла;
		
		Для Каждого Строка Из ТЗОбъектов Цикл
			ЗаписьРегистра = РегистрыСведений.СостоянияЭД.СоздатьМенеджерЗаписи();
			ЗаписьРегистра.СсылкаНаОбъект = Строка.СсылкаНаОбъект;
			ЗаписьРегистра.ДействияСНашейСтороны = Перечисления.СводныеСостоянияЭД.ДействийНеТребуется;
			ЗаписьРегистра.ДействияСоСтороныДругогоУчастника = Перечисления.СводныеСостоянияЭД.ДействийНеТребуется;
			ЗаписьРегистра.СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.ЗакрытПринудительно;
			ЗаписьРегистра.ЭлектронныйДокумент = Строка.ЭлектронныйДокумент;
			ЗаписьРегистра.Комментарий = ПричинаЗакрытия;
			ЗаписьРегистра.Записать();
		КонецЦикла;
		
		КоличествоОбработанныхЭД = КоличествоОбработанныхЭД + ТЗОбъектов.Количество();
	КонецЕсли;
	
КонецПроцедуры

Функция ЕстьДоступныеСертификаты(МассивСтруктурСертификатов, ЭД) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	СертификатыЭЦПВидыДокументов.Ссылка
	|ИЗ
	|	Справочник.СертификатыЭЦП.ВидыДокументов КАК СертификатыЭЦПВидыДокументов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПрофилиНастроекЭДО.СертификатыПодписейОрганизации КАК ПрофилиНастроекЭДОСертификатыПодписейОрганизации
	|		ПО СертификатыЭЦПВидыДокументов.Ссылка = ПрофилиНастроекЭДОСертификатыПодписейОрганизации.Сертификат
	|ГДЕ
	|	НЕ СертификатыЭЦПВидыДокументов.Ссылка.Отозван
	|	И (СертификатыЭЦПВидыДокументов.Ссылка.СписокПользователей.Пользователь = &ТекущийПользователь
	|			ИЛИ НЕ СертификатыЭЦПВидыДокументов.Ссылка.ОграничитьДоступКСертификату)
	|	И НЕ СертификатыЭЦПВидыДокументов.Ссылка.ПометкаУдаления
	|	И СертификатыЭЦПВидыДокументов.ВидДокумента = &ВидДокумента
	|	И СертификатыЭЦПВидыДокументов.ИспользоватьДляПодписи
	|	И СертификатыЭЦПВидыДокументов.Ссылка.Организация = &Организация
	|	И СертификатыЭЦПВидыДокументов.Ссылка.Отпечаток В(&МассивОтпечатков)
	|	#УсловиеПрофильНастроекЭДО";
	
	МассивОтпечатков = Новый Массив;
	Для Каждого ЭлементСтруктуры Из МассивСтруктурСертификатов Цикл
		МассивОтпечатков.Добавить(ЭлементСтруктуры.Отпечаток);
	КонецЦикла;
	
	РеквизитыЭД = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(ЭД, "ВидЭД, Организация, ПрофильНастроекЭДО");
	
	Если РеквизитыЭД.ВидЭД = Перечисления.ВидыЭД.ПередачаТоваровМеждуОрганизациями Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "#УсловиеПрофильНастроекЭДО", "");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "#УсловиеПрофильНастроекЭДО",
			"И ПрофилиНастроекЭДОСертификатыПодписейОрганизации.Ссылка = &Профиль");
		Запрос.УстановитьПараметр("Профиль", РеквизитыЭД.ПрофильНастроекЭДО);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("МассивОтпечатков",    МассивОтпечатков);
	Запрос.УстановитьПараметр("ТекущийПользователь", Пользователи.АвторизованныйПользователь());
	Запрос.УстановитьПараметр("ВидДокумента",        РеквизитыЭД.ВидЭД);
	Запрос.УстановитьПараметр("Организация",         РеквизитыЭД.Организация);
	
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Соглашения

// Используется в случае отсутствия возможности предложить пользователю выбрать сертификат из списка доступных и/или
// ввести пароль для сертификата (например при выполнении регламентного задания).
// Возвращает Истина, если для входящих переменных найден хотя бы один сертификат с сохраненным в ИБ паролем.
// 
// Параметры:
//  МассивПрофилейНастроекЭДО     - Массив - содержит ссылки на профили настроек ЭДО, по которым требуется определить сертификаты;
//  ПараметрыАвторизации - Соответствие - в этой переменной в вызывающий метод возвращается соответствие:
//    * Ключ     - СправочникСсылка.СоглашенияОбИспользованииЭД - соглашение, для которого определен сертификат авторизации.
//    * Значение - Соответствие - соответствие сертификата и его параметров:
//       ** Ключ     - СправочникСсылка.СертификатыЭЦП - сертификат авторизации.
//       ** Значение - Структура - структура параметров сертификата:
//           *** СертификатПодписи           - СправочникСсылка.СертификатыЭЦП.
//           *** ПарольПолучен               - Булево.
//           *** ПарольПользователя          - Строка.
//           *** Отпечаток                   - Строка.
//           *** Отозван                     - Булево.
//           *** ФайлСертификата             - ХранилищеЗначений.
//           *** ОповещенОСрокеДействия      - Булево.
//           *** ДатаОкончания               - Дата.
//           *** ЗапомнитьПарольКСертификату - Булево.
//
// Возвращаемое значение:
//  Булево - Истина, если найдены сертификат(ы) с сохраненными в ИБ паролями, иначе Ложь.
//
Функция ДоступныПараметрыДляАвторизацииНаСервереОператора(Знач МассивПрофилейНастроекЭДО = Неопределено,
														ПараметрыАвторизации = Неопределено) Экспорт
	
	Попытка
		МассивСтруктурСертификатов = ПолучитьМассивСтруктурСертификатов(Истина);
	Исключение
		МассивСтруктурСертификатов = Новый Массив;
	КонецПопытки;
	
	ДоступныПараметры = Ложь;
	Если МассивСтруктурСертификатов.Количество() > 0 Тогда
		СтМассивовСтруктурСертификатов = Новый Структура("МассивСтруктурСертификатовСервер", МассивСтруктурСертификатов);
		
		Результат = СтруктураСоответствийСоглашенийИСертификатов(МассивПрофилейНастроекЭДО, , СтМассивовСтруктурСертификатов, , Ложь, Истина);
		
		ПараметрыАвторизации = Новый Соответствие;
		СоотвСоглашенийИМассиваСертификатовАвторизации = Неопределено;
		СоотвСертификатовИИхСтруктур = Неопределено;
		Если Результат.Свойство("СоотвСоглашенийИМассиваСертификатовАвторизации", СоотвСоглашенийИМассиваСертификатовАвторизации)
			И Результат.Свойство("СоотвСертификатовИИхСтруктур", СоотвСертификатовИИхСтруктур)
			И ТипЗнч(СоотвСоглашенийИМассиваСертификатовАвторизации) = Тип("Соответствие")
			И ТипЗнч(СоотвСертификатовИИхСтруктур) = Тип("Соответствие") Тогда
			// В СоотвСоглашенийИМассиваСертификатовАвторизации - Ключ - Соглашение, Значение - Массив сертификатов
			// по данному соглашению. Функция должна вернуть (в ПараметрыАвторизации) Соответствие, в котором Ключ - Соглашение,
			// Значение - Соответствие сертификата и его параметров.
			Для Каждого Элемент Из СоотвСоглашенийИМассиваСертификатовАвторизации Цикл
				
				ПрофильНастроекЭДО = Элемент.Ключ;
				РеквизитыПрофиляНастроекЭДО = РеквизитыПрофиляНастроекЭДО(ПрофильНастроекЭДО);
				
				МассивСертификатов = Элемент.Значение;
				Для Каждого Сертификат Из МассивСертификатов Цикл
					КлючПоискаСертификата = Строка(Сертификат) + "_" + РеквизитыПрофиляНастроекЭДО.ИдентификаторОрганизации;
					ПараметрыСертификата = СоотвСертификатовИИхСтруктур.Получить(КлючПоискаСертификата);
					Если ПараметрыСертификата.ПарольПолучен Тогда
						ПараметрыАвторизации.Вставить(Элемент.Ключ, ПараметрыСертификата);
						ДоступныПараметры = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ДоступныПараметры;
	
КонецФункции

// Функция возвращает соответствие соглашению - структуры данных сертификата,
// содержащую ссылку на сертификат и его доп.реквизиты (запомнить пароль, пароль пользователя, маркер расшифрованный/зашифрованный).
// 
// Параметры:
//  МассивСоглашений               - Массив    - содержит ссылки на соглашения, по которым требуется определить сертификаты;
//  СтМассивовСтруктурСертификатов - Структура - содержит структуру со свойствами:
//    * МассивСтруктурСертификатовСервер - Массив - массив структур сертификатов личного хранилища с сервера.
//    * МассивСтруктурСертификатовКлиент - Массив - массив структур сертификатов личного хранилища с клиента.
//  СоотвСертификатовИПаролей      - Фиксированное соответствие:
//    * Ключ     - СправочникСсылка.СертификатыЭЦП - сертификат авторизации.
//    * Значение - Строка - пароль к сертификату.
//
// Возвращаемое значение:
//  Соответствие: ключ - соглашение об обмене ЭД, значение - структура параметров сертификата ЭЦП
//    ("СертификатДляАвторизации, ЗапомнитьПарольКСертификату, ПарольПользователя, МаркерРасшифрованный, МаркерЗашифрованный").
//
Функция СоотвСоглашенийИСоответствийСертификатовИПараметровДляАвторизацииСервер(Знач МассивПрофилейНастроекЭДО = Неопределено,
																 Знач СтМассивовСтруктурСертификатов = Неопределено,
																 Знач СоотвСертификатовИПаролей = Неопределено) Экспорт
	
	Результат = СтруктураСоответствийСоглашенийИСертификатов(МассивПрофилейНастроекЭДО, ,
		СтМассивовСтруктурСертификатов, , Ложь, Истина, СоотвСертификатовИПаролей);
	
	СоотвСоглашений = Новый Соответствие;
	СоотвСоглашенийИМассиваСертификатовАвторизации = Неопределено;
	СоотвСертификатовИИхСтруктур = Неопределено;
	Если Результат.Свойство("СоотвСоглашенийИМассиваСертификатовАвторизации", СоотвСоглашенийИМассиваСертификатовАвторизации)
		И Результат.Свойство("СоотвСертификатовИИхСтруктур", СоотвСертификатовИИхСтруктур)
		И ТипЗнч(СоотвСоглашенийИМассиваСертификатовАвторизации) = Тип("Соответствие")
		И ТипЗнч(СоотвСертификатовИИхСтруктур) = Тип("Соответствие") Тогда
		// В СоотвСоглашенийИМассиваСертификатовАвторизации - Ключ - Соглашение, Значение - Массив сертификатов
		// по данному соглашению. Функция должна вернуть Соответствие, в котором Ключ - Соглашение,
		// Значение - Соответствие сертификатов и их параметров.
		Для Каждого Элемент Из СоотвСоглашенийИМассиваСертификатовАвторизации Цикл
			
			ПрофильНастроекЭДО = Элемент.Ключ;
			РеквизитыПрофиляНастроекЭДО = РеквизитыПрофиляНастроекЭДО(ПрофильНастроекЭДО);
				
			Соответствие = Новый Соответствие;
			
			МассивСертификатов = Элемент.Значение;
			Для Каждого Сертификат Из МассивСертификатов Цикл
				КлючПоискаСертификата = Строка(Сертификат) + "_" + РеквизитыПрофиляНастроекЭДО.ИдентификаторОрганизации;
				
				Структура = СоотвСертификатовИИхСтруктур.Получить(КлючПоискаСертификата);
				Если Структура.ПарольПолучен Тогда
					// Авторизоваться на сервере оператора можно любым зарегистрированным в соглашении сертификатом,
					// поэтому, если есть несколько доступных для авторизации сертификатов и среди них есть хотя бы
					// один с сохраненным (в сертификате или сеансе) паролем, то вернем именно его, чтобы не открывать
					// диалог выбора сертификата.
					Соответствие = Новый Соответствие;
					Соответствие.Вставить(Сертификат, Структура);
					Прервать;
				КонецЕсли;
				Соответствие.Вставить(Сертификат, Структура);
			КонецЦикла;
			СоотвСоглашений.Вставить(Элемент.Ключ, Соответствие);
		КонецЦикла;
	КонецЕсли;
	
	Возврат СоотвСоглашений;
	
КонецФункции

// Функция получает данные по сертификатам, разрешенным для использования при подписании ЭД и авторизации
// на сервере оператора ЭДО. Поиск сертификатов выполняется как пересечение массивов сертификатов установленных в
// личном хранилище (клиента либо сервера, в зависимости от настроек в 1с), с сертификатами импортированными в 1с и
// зарегистрированными у оператора ЭДО (регистрация у оператора отражается в таб.части соглашения об обмене ЭД
// "СертификатыПодписейОрганизации"). При необходимости, выборка может быть ограничена массивом соглашений, по которым
// требуется определить параметры сертификатов.
//
// Параметры:
//  МассивПрофилейНастроекЭДО - массив ссылок - ссылки на профили настроек ЭДО, по которым требуется определить сертификаты;
//  СтМассивовСтруктурСертификатов - структура массивов - может содержать 2 элемента: МассивСтруктурСертификатовСервер
//    и МассивСтруктурСертификатовКлиент, соответственно массив структур сертификатов личного хранилища с сервера и
//    то же самое с клиента;
//  ВидЭД - перечисление ссылка - вид ЭД, для подписания которого требуется найти сертификат(ы). Имеет смысл только
//    при параметре ДляПодписи = Истина;
//  ДляПодписи - булево - Истина - требуется найти сертификаты для подписи. Имеет смысл только при заполненном
//    параметре ВидЭД;
//  ДляАвторизации - булево - Истина - требуется найти сертификаты для авторизации на сервере оператора ЭДО.
//
// Возвращаемое значение:
//  Структура соответствий - пустая, либо содержит 3 элемента:
//    СоотвСоглашенийИСертификатовПодписи
//    СоотвСоглашенийИСертификатовАвторизации
//    СоотвСертификатовИИхСтруктур
//
Функция СтруктураСоответствийСоглашенийИСертификатов(Знач МассивПрофилейНастроекЭДО = Неопределено,
													 Знач МассивЭД = Неопределено,
													 Знач СтМассивовСтруктурСертификатов = Неопределено,
													 Знач ВидЭД = Неопределено,
													 Знач ДляПодписи = Истина,
													 Знач ДляАвторизации = Истина,
													 Знач СоотвСертификатовИПаролей = Неопределено) Экспорт
	
	СтруктураСоответствий = Новый Структура;
	
	ВыполнятьАвторизациюНаСервере = ВыполнятьАвторизациюНаСервере();
	ВыполнятьКриптооперацииНаСервере = ?(ВидЭД = Перечисления.ВидыЭД.ИзвещениеОПолучении,
		ВыполнятьАвторизациюНаСервере, ВыполнятьКриптооперацииНаСервере());
	// Если используется отложенная отправка, то искать сертификаты авторизации не надо.
	МассивСтруктурСертификатовКлиент = Новый Массив;
	МассивСтруктурСертификатовСервер = Новый Массив;
	
	ИспользоватьЭЦП = ПолучитьЗначениеФункциональнойОпции("ИспользоватьЭлектронныеЦифровыеПодписи");
	Если ТипЗнч(СтМассивовСтруктурСертификатов) = Тип("Структура") Тогда
		СтМассивовСтруктурСертификатов.Свойство("МассивСтруктурСертификатовСервер", МассивСтруктурСертификатовСервер);
		СтМассивовСтруктурСертификатов.Свойство("МассивСтруктурСертификатовКлиент", МассивСтруктурСертификатовКлиент);
		Если (ДляАвторизации И ВыполнятьАвторизациюНаСервере ИЛИ ДляПодписи И ВыполнятьКриптооперацииНаСервере)
			И НЕ ЗначениеЗаполнено(МассивСтруктурСертификатовСервер) И ИспользоватьЭЦП Тогда
			Попытка
				МассивСтруктурСертификатовСервер = ПолучитьМассивСтруктурСертификатов(Истина);
			Исключение
				МассивСтруктурСертификатовСервер = Новый Массив;
				ТекстСообщения = ПолучитьСообщениеОбОшибке("115");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
	МассивОтпечатков = Новый Массив;
	МассивОтпечатковСервер = Новый Массив;
	Если ТипЗнч(МассивСтруктурСертификатовСервер) = Тип("Массив") Тогда
		Для Каждого ЭлементСтруктуры Из МассивСтруктурСертификатовСервер Цикл
			МассивОтпечатковСервер.Добавить(ЭлементСтруктуры.Отпечаток);
			МассивОтпечатков.Добавить(ЭлементСтруктуры.Отпечаток);
		КонецЦикла;
	КонецЕсли;
	
	МассивОтпечатковКлиент = Новый Массив;
	Если ТипЗнч(МассивСтруктурСертификатовКлиент) = Тип("Массив") Тогда
		Для Каждого ЭлементСтруктуры Из МассивСтруктурСертификатовКлиент Цикл
			МассивОтпечатковКлиент.Добавить(ЭлементСтруктуры.Отпечаток);
			МассивОтпечатков.Добавить(ЭлементСтруктуры.Отпечаток);
		КонецЦикла;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(МассивОтпечатков) Тогда
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		ТекстЗапроса = "";
		Если ДляПодписи Тогда
			ТекстЗапроса =
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	ПрофилиНастроекЭДОСертификаты.Ссылка КАК ПрофильНастроекЭДО,
				|	СертификатыЭЦП.Ссылка КАК СертификатПодписи,
				|	ВЫБОР
				|		КОГДА СертификатыЭЦП.ЗапомнитьПарольКСертификату
				|			ТОГДА СертификатыЭЦП.ПарольПользователя
				|		ИНАЧЕ НЕОПРЕДЕЛЕНО
				|	КОНЕЦ КАК ПарольПользователя,
				|	СертификатыЭЦП.ЗапомнитьПарольКСертификату,
				|	СертификатыЭЦП.ЗапомнитьПарольКСертификату КАК ПарольПолучен,
				|	СертификатыЭЦП.Отпечаток,
				|	СертификатыЭЦП.Отозван,
				|	СертификатыЭЦП.ФайлСертификата,
				|	СертификатыЭЦП.ОповещенОСрокеДействия КАК ОповещенОСрокеДействия,
				|	СертификатыЭЦП.ДатаОкончания КАК ДатаОкончания,
				|	СертификатыЭЦП.ПрограммаБанка
				|ИЗ
				|	Справочник.ПрофилиНастроекЭДО.СертификатыПодписейОрганизации КАК ПрофилиНастроекЭДОСертификаты
				|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СертификатыЭЦП.ВидыДокументов КАК СертификатыЭЦПВидыДокументов
				|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СертификатыЭЦП КАК СертификатыЭЦП
				|			ПО СертификатыЭЦПВидыДокументов.Ссылка = СертификатыЭЦП.Ссылка
				|		ПО ПрофилиНастроекЭДОСертификаты.Сертификат = СертификатыЭЦПВидыДокументов.Ссылка
				|ГДЕ
				|	НЕ СертификатыЭЦП.ПометкаУдаления
				|	И НЕ СертификатыЭЦП.Отозван
				|	И (СертификатыЭЦП.СписокПользователей.Пользователь = &ТекущийПользователь
				|			ИЛИ НЕ СертификатыЭЦП.ОграничитьДоступКСертификату)
				|	И СертификатыЭЦПВидыДокументов.ИспользоватьДляПодписи
				|	И СертификатыЭЦПВидыДокументов.ВидДокумента = &ВидЭД
				|	И СертификатыЭЦП.Отпечаток В(&МассивОтпечатковДляПодписи)
				|	И (ПрофилиНастроекЭДОСертификаты.Ссылка.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезОператораЭДОТакском)
				|			ИЛИ ПрофилиНастроекЭДОСертификаты.Ссылка.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезСервис1СЭДО))
				|	И &ИспользоватьЭЦП
				|	И НЕ ПрофилиНастроекЭДОСертификаты.Ссылка.ПометкаУдаления
				|	И ПрофилиНастроекЭДОСертификаты.Ссылка В(&МассивПрофилейНастроекЭДО)
				|	И ВЫБОР
				|			КОГДА СертификатыЭЦП.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)
				|				ТОГДА ИСТИНА
				|			КОГДА РАЗНОСТЬДАТ(&ТекущаяДата, СертификатыЭЦП.ДатаОкончания, ДЕНЬ) > 0
				|				ТОГДА ИСТИНА
				|			ИНАЧЕ ЛОЖЬ
				|		КОНЕЦ
				|
				|УПОРЯДОЧИТЬ ПО
				|	ПарольПолучен УБЫВ";
			Запрос.УстановитьПараметр("МассивОтпечатковДляПодписи",
				?(ВыполнятьКриптооперацииНаСервере, МассивОтпечатковСервер, МассивОтпечатковКлиент));
			Запрос.УстановитьПараметр("ВидЭД", ВидЭД);
			ТекстЗапроса = ТекстЗапроса + "; ";
		КонецЕсли;
		Если ДляАвторизации Тогда
			ТекстЗапроса = ТекстЗапроса +
				"ВЫБРАТЬ
				|	ПрофилиНастроекЭДОСертификаты.Ссылка КАК ПрофильНастроекЭДО,
				|	ПрофилиНастроекЭДОСертификаты.Ссылка.СпособОбменаЭД КАК СпособОбменаЭД,
				|	ПрофилиНастроекЭДОСертификаты.Ссылка.ИдентификаторОрганизации КАК ИдентификаторОрганизации,
				|	СертификатыЭЦП.Ссылка КАК СертификатПодписи,
				|	ВЫБОР
				|		КОГДА СертификатыЭЦП.ЗапомнитьПарольКСертификату
				|			ТОГДА СертификатыЭЦП.ПарольПользователя
				|		ИНАЧЕ НЕОПРЕДЕЛЕНО
				|	КОНЕЦ КАК ПарольПользователя,
				|	СертификатыЭЦП.ЗапомнитьПарольКСертификату,
				|	СертификатыЭЦП.ЗапомнитьПарольКСертификату КАК ПарольПолучен,
				|	СертификатыЭЦП.Отпечаток,
				|	СертификатыЭЦП.Отозван,
				|	СертификатыЭЦП.ФайлСертификата,
				|	СертификатыЭЦП.ОповещенОСрокеДействия,
				|	СертификатыЭЦП.ДатаОкончания,
				|	СертификатыЭЦП.ПрограммаБанка
				|ИЗ
				|	Справочник.ПрофилиНастроекЭДО.СертификатыПодписейОрганизации КАК ПрофилиНастроекЭДОСертификаты
				|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СертификатыЭЦП КАК СертификатыЭЦП
				|		ПО ПрофилиНастроекЭДОСертификаты.Сертификат = СертификатыЭЦП.Ссылка
				|ГДЕ
				|	НЕ СертификатыЭЦП.ПометкаУдаления
				|	И НЕ СертификатыЭЦП.Отозван
				|	И (СертификатыЭЦП.СписокПользователей.Пользователь = &ТекущийПользователь
				|			ИЛИ НЕ СертификатыЭЦП.ОграничитьДоступКСертификату)
				|	И СертификатыЭЦП.Отпечаток В(&МассивОтпечатковДляАвторизации)
				|	И (ПрофилиНастроекЭДОСертификаты.Ссылка.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезОператораЭДОТакском)
				|			ИЛИ ПрофилиНастроекЭДОСертификаты.Ссылка.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезСервис1СЭДО))
				|	И &ИспользоватьЭЦП
				|	И НЕ ПрофилиНастроекЭДОСертификаты.Ссылка.ПометкаУдаления
				|	И ПрофилиНастроекЭДОСертификаты.Ссылка В(&МассивПрофилейНастроекЭДО)
				|	И ВЫБОР
				|			КОГДА СертификатыЭЦП.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)
				|				ТОГДА ИСТИНА
				|			КОГДА РАЗНОСТЬДАТ(&ТекущаяДата, СертификатыЭЦП.ДатаОкончания, ДЕНЬ) > 0
				|				ТОГДА ИСТИНА
				|			ИНАЧЕ ЛОЖЬ
				|		КОНЕЦ
				|
				|УПОРЯДОЧИТЬ ПО
				|	ПарольПолучен УБЫВ";
			Если НЕ ДляПодписи Тогда
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВЫБРАТЬ", "ВЫБРАТЬ РАЗРЕШЕННЫЕ");
			КонецЕсли;
			Запрос.УстановитьПараметр("МассивОтпечатковДляАвторизации",
				?(ВыполнятьАвторизациюНаСервере, МассивОтпечатковСервер, МассивОтпечатковКлиент));
		КонецЕсли;
		
		Запрос.УстановитьПараметр("ПустойПользователь",  Справочники.Пользователи.ПустаяСсылка());
		Запрос.УстановитьПараметр("ТекущийПользователь", Пользователи.АвторизованныйПользователь());
		Запрос.УстановитьПараметр("ИспользоватьЭЦП",     ИспользоватьЭЦП);
		Запрос.УстановитьПараметр("ТекущаяДата",         ТекущаяДатаСеанса());
		
		Если НЕ ЗначениеЗаполнено(МассивПрофилейНастроекЭДО) Тогда
			МассивПрофилейНастроекЭДО = Новый Массив;
		КонецЕсли;
		Если ЗначениеЗаполнено(МассивЭД) Тогда
			МассивПрофилейНастроекЭДО = Новый Массив;
			Если ТипЗнч(МассивЭД) = Тип("Массив") И МассивЭД.Количество() > 0 Тогда
				СоотвЭДИСтруктурыСоглашений = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивЭД, "ПрофильНастроекЭДО");
				Для Каждого ЭДВладелец Из СоотвЭДИСтруктурыСоглашений Цикл
					ПрофильНастроекЭДО = ЭДВладелец.Значение.ПрофильНастроекЭДО;
					Если МассивПрофилейНастроекЭДО.Найти(ПрофильНастроекЭДО) = Неопределено Тогда
						МассивПрофилейНастроекЭДО.Добавить(ПрофильНастроекЭДО);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		Если МассивПрофилейНастроекЭДО.Количество() > 0 Тогда
			Запрос.УстановитьПараметр("МассивПрофилейНастроекЭДО", МассивПрофилейНастроекЭДО);
		Иначе
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И ПрофилиНастроекЭДОСертификаты.Ссылка В(&МассивПрофилейНастроекЭДО)", "");
		КонецЕсли;
		Запрос.Текст = ТекстЗапроса;
		Результат = Запрос.ВыполнитьПакет();
		
		СоотвСоглашенийИМассиваСертификатовПодписи = Новый Соответствие;
		СоотвСоглашенийИМассиваСертификатовАвторизации = Новый Соответствие;
		СоотвСертификатовИИхСтруктур = Новый Соответствие;
		
		// Для авторизации, помимо сертификатов, попытаемся получить маркеры, по возможности расшифрованные.
		Если ДляАвторизации Тогда
			МенеджерКриптографииДоступенНаСервере = Ложь;
			Если ВыполнятьАвторизациюНаСервере Тогда
				Попытка
					МенеджерКриптографии = ПолучитьМенеджерКриптографии();
					МенеджерКриптографииДоступенНаСервере = Истина;
				Исключение
					ТекстСообщения = ПолучитьСообщениеОбОшибке("110");
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
					МенеджерКриптографииДоступенНаСервере = Ложь;
				КонецПопытки;
			КонецЕсли;
		КонецЕсли;
		
		Если ТипЗнч(СоотвСертификатовИПаролей) <> Тип("ФиксированноеСоответствие") Тогда
			СоотвСертификатовИПаролей = Новый Соответствие;
		КонецЕсли;
		
		КоличествоПроходов = ?(ДляПодписи И ДляАвторизации, 2, 1);
		Для Сч = 1 По КоличествоПроходов Цикл
			Выборка = Результат[Сч - 1].Выбрать();
			Если Выборка.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			// Первая выборка, в зависимости от входящих параметров, может быть как для подписи, так и для авторизации.
			// Если ДляПодписи = Истина, то первая выборка всегда по сертификатам подписи.
			ЗаполняемоеСоответствие = ?(ДляПодписи И Сч = 1,
				СоотвСоглашенийИМассиваСертификатовПодписи, СоотвСоглашенийИМассиваСертификатовАвторизации);
			ТекущийПрофильНастроекЭДО = Неопределено;
			Пока Выборка.Следующий() Цикл
				Если ТекущийПрофильНастроекЭДО <> Выборка.ПрофильНастроекЭДО Тогда
					МассивСертификатов = Новый Массив;
					ТекущийПрофильНастроекЭДО = Выборка.ПрофильНастроекЭДО;
				КонецЕсли;
				МассивСертификатов.Добавить(Выборка.СертификатПодписи);
				Если ЗаполняемоеСоответствие.Получить(ТекущийПрофильНастроекЭДО) = Неопределено Тогда
					ЗаполняемоеСоответствие.Вставить(ТекущийПрофильНастроекЭДО, МассивСертификатов);
				КонецЕсли;
				СтруктураСертификата = Новый Структура("СертификатПодписи, ПарольПолучен, ПарольПользователя, Отпечаток, Отозван,
														|ФайлСертификата, ОповещенОСрокеДействия, ДатаОкончания, ЗапомнитьПарольКСертификату, ПрограммаБанка");
				ЗаполнитьЗначенияСвойств(СтруктураСертификата, Выборка);
				Если НЕ (ДляПодписи И Сч = 1) Тогда
					// Заполняем данные для авторизации.
					Если ТипЗнч(СтруктураСертификата.ФайлСертификата) = Тип("ХранилищеЗначения") Тогда
						ПарольПользователя = СоотвСертификатовИПаролей.Получить(Выборка.СертификатПодписи);
						Если ПарольПользователя = Неопределено И Выборка.ПарольПолучен Тогда
							ПарольПользователя = Выборка.ПарольПользователя;
						КонецЕсли;
						ПарольПолучен = (ПарольПользователя <> Неопределено ИЛИ Выборка.ПарольПолучен);
						СтруктураСертификата.Вставить("ПарольПользователя", ПарольПользователя);
						СтруктураСертификата.Вставить("ПарольПолучен", ПарольПолучен);
						
						Расшифровывать = (ПарольПолучен И МенеджерКриптографииДоступенНаСервере);
						
						СтруктураПараметровЗапросаМаркера = СтруктураСертификата;
						СтруктураПараметровЗапросаМаркера.Вставить("СпособОбменаЭД", Выборка.СпособОбменаЭД);
						СтруктураПараметровЗапросаМаркера.Вставить("ИдентификаторОрганизации", Выборка.ИдентификаторОрганизации);
						
						Маркер = ЭлектронныеДокументыВнутренний.ПолучитьМаркерОЭДО(СтруктураПараметровЗапросаМаркера, Расшифровывать);
						Если ТипЗнч(Маркер) = Тип("ДвоичныеДанные") Тогда
							Если Расшифровывать Тогда
								СтруктураСертификата.Вставить("МаркерРасшифрованный", Маркер);
							Иначе
								СтруктураСертификата.Вставить("МаркерЗашифрованный", Маркер);
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				СоотвСертификатовИИхСтруктур.Вставить(Выборка.СертификатПодписи.Наименование + "_" + Выборка.ИдентификаторОрганизации,
					СтруктураСертификата);
				
			КонецЦикла;
		КонецЦикла;
		
		СтруктураСоответствий.Вставить("СоотвСоглашенийИМассиваСертификатовПодписи", СоотвСоглашенийИМассиваСертификатовПодписи);
		СтруктураСоответствий.Вставить("СоотвСоглашенийИМассиваСертификатовАвторизации", СоотвСоглашенийИМассиваСертификатовАвторизации);
		СтруктураСоответствий.Вставить("СоотвСертификатовИИхСтруктур", СоотвСертификатовИИхСтруктур);
	КонецЕсли;
	
	Возврат СтруктураСоответствий;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Сертификаты

// Функция проверяет наличие в структуре расшифрованного маркера, если его нет, то пытается расшифровать
// зашифрованный маркер, если расшифровка прошла успешно, то расшифрованный маркер помещается в структуру.
//
// Параметры:
//  СтруктураСертификата - структура - содержит сертификат ЭЦП и его параметры, включая расшифрованный
//    или зашифрованный маркер.
//
// Возвращаемое значение:
//  Булево - Истина - в структуре есть расшифрованный маркер, иначе - Ложь.
//
Функция РасшифроватьМаркерИзСтруктурыСертификатаНаСервере(СтруктураСертификата) Экспорт
	
	Расшифрован = Ложь;
	
	Если ТипЗнч(СтруктураСертификата) = Тип("Структура") Тогда
		МаркерРасшифрованный = Неопределено;
		МаркерЗашифрованный = Неопределено;
		МенеджерКриптографии = Неопределено;
		Если ВыполнятьАвторизациюНаСервере() Тогда
			Попытка
				МенеджерКриптографии = ПолучитьМенеджерКриптографии();
			Исключение
				ТекстСообщения = ПолучитьСообщениеОбОшибке("110");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				МенеджерКриптографии = Неопределено;
			КонецПопытки;
		КонецЕсли;
		
		Если СтруктураСертификата.Свойство("МаркерРасшифрованный", МаркерРасшифрованный)
			И ЗначениеЗаполнено(МаркерРасшифрованный) Тогда
			Расшифрован = Истина;
		ИначеЕсли СтруктураСертификата.Свойство("МаркерЗашифрованный", МаркерЗашифрованный)
			И ЗначениеЗаполнено(МаркерЗашифрованный) И МенеджерКриптографии <> Неопределено Тогда
			Попытка
				ПроверитьСрокДействияСертификата(СтруктураСертификата.СертификатПодписи);
				СтруктураСертификата.Свойство("ПарольПользователя", МенеджерКриптографии.ПарольДоступаКЗакрытомуКлючу);
				Маркер = МенеджерКриптографии.Расшифровать(МаркерЗашифрованный);
				Если ЗначениеЗаполнено(Маркер) Тогда
					Расшифрован = Истина;
					СтруктураСертификата.Вставить("МаркерРасшифрованный", Маркер);
				КонецЕсли;
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Расшифрован;
	
КонецФункции

// Выполняет последовательность действий для электронных документов.
//
// Параметры:
//  МассивСсылокНаОбъект - Массив ссылок на электронные документы, для которых надо определить последовательность действий,
//  МассивовСтруктурСертификатов - Массив доступных сертификатов
//  Действие - Строковое представление необходимых действий,
//  ДопПараметры - Структура, дополнительные параметры, определяющие последовательность действий с электронными документами.
//  СтруктураСоответствий - Структура -  Ключи структуры соответствий:
//   СоотвСертификатовИИхСтруктур - соответствие (ключи - СертификатыЭЦП, значения - структуры параметров сертификата);
//   СоотвСоглашенийИСертификатовАвторизации - соответствие (ключи - СоглашенияЭД, значения - СертификатыЭЦП).
//
// Возвращаемое значение:
//  Структура.
//
Функция ОбработатьЭДПрисоединенныеФайлы(Знач МассивСсылокНаОбъект,
										Знач МассивовСтруктурСертификатов,
										Знач Действие,
										Знач ДопПараметры,
										Знач СоотвСертификатовИПаролей) Экспорт
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("КоличествоУтвержденныхЭД", 0);
	СтруктураВозврата.Вставить("КолПодписанных",           0);
	СтруктураВозврата.Вставить("КолПодготовленных",        0);
	СтруктураВозврата.Вставить("ВыполнятьАвторизациюНаСервере",    ВыполнятьАвторизациюНаСервере());
	СтруктураВозврата.Вставить("ВыполнятьКриптооперацииНаСервере", ВыполнятьКриптооперацииНаСервере());
	СтруктураВозврата.Вставить("НемедленнаяОтправкаЭД", ЭлектронныеДокументыСлужебный.НемедленнаяОтправкаЭД());
	СтруктураВозврата.Вставить("СоотвСертификатовИМассивовЭДКПодписи", Новый Соответствие);
	СтруктураВозврата.Вставить("СоотвСертификатовИИхСтруктур", Новый Соответствие);
	СтруктураВозврата.Вставить("СтруктСтруктурМассивовЭДиСертификатов", Новый Структура);
	СтруктураВозврата.Вставить("СоотвЭДиСоглашений", Новый Соответствие);
	СтруктураКОтправке = Новый Структура("БезПодписи, СПодписью", Новый Массив, Новый Массив);
	СтруктураКОтправке.Вставить("САвторизацией", Новый Соответствие);
	СтруктураВозврата.Вставить("СтруктураКОтправке", СтруктураКОтправке);
	СтруктураВозврата.Вставить("СоотвСоглашенийИСертификатовАвторизации", Новый Соответствие);
	
	СоответствиеВладельцевИЭД = ПолучитьСоответствиеВладельцевИЭД( , МассивСсылокНаОбъект);
	СтруктураДействий = Неопределено;
	Для Каждого Элемент Из СоответствиеВладельцевИЭД Цикл
		МассивВладельцев = Новый Массив;
		МассивВладельцев.Добавить(Элемент.Ключ);
		ЭД = Элемент.Значение;
		СтруктураДействий = ВыполнитьДействияПоЭД(
									МассивВладельцев,
									МассивовСтруктурСертификатов,
									Действие,
									ДопПараметры,
									ЭД,
									СоотвСертификатовИПаролей);
		Если СтруктураДействий = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтруктураДействий.Свойство("СтруктураКОтправке") Тогда
			ДополнитьСоответствие(
					СтруктураВозврата.СтруктураКОтправке.САвторизацией,
					СтруктураДействий.СтруктураКОтправке.САвторизацией);
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
													СтруктураВозврата.СтруктураКОтправке.БезПодписи,
													СтруктураДействий.СтруктураКОтправке.БезПодписи,
													Истина);
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
													СтруктураВозврата.СтруктураКОтправке.СПодписью,
													СтруктураДействий.СтруктураКОтправке.СПодписью,
													Истина);
		КонецЕсли;
		
		Если СтруктураДействий.Свойство("СоотвСертификатовИМассивовЭДКПодписи") Тогда
			ДополнитьСоответствие(
					СтруктураВозврата.СоотвСертификатовИМассивовЭДКПодписи,
					СтруктураДействий.СоотвСертификатовИМассивовЭДКПодписи);
		КонецЕсли;

		Если СтруктураДействий.Свойство("КоличествоУтвержденныхЭД") Тогда
			СтруктураВозврата.КоличествоУтвержденныхЭД = СтруктураВозврата.КоличествоУтвержденныхЭД
														+ СтруктураДействий.КоличествоУтвержденныхЭД;
		КонецЕсли;
		Если СтруктураДействий.Свойство("КолПодготовленных") Тогда
			СтруктураВозврата.КолПодготовленных = СтруктураВозврата.КолПодготовленных + СтруктураДействий.КолПодготовленных;
		КонецЕсли;
		Если СтруктураДействий.Свойство("КолПодписанных") Тогда
			СтруктураВозврата.КолПодписанных = СтруктураВозврата.КолПодписанных + СтруктураДействий.КолПодписанных;
		КонецЕсли;
		
		Если СтруктураДействий.Свойство("СоотвСертификатовИИхСтруктур") Тогда
			ДополнитьСоответствие(
				СтруктураВозврата.СоотвСертификатовИИхСтруктур, СтруктураДействий.СоотвСертификатовИИхСтруктур);
		КонецЕсли;
		
		Если СтруктураДействий.Свойство("СтруктСтруктурМассивовЭДиСертификатов") Тогда
			Для Каждого КлючЗначение ИЗ СтруктураДействий.СтруктСтруктурМассивовЭДиСертификатов Цикл
				Если СтруктураВозврата.СтруктСтруктурМассивовЭДиСертификатов.Свойство(КлючЗначение.Ключ) Тогда
					ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
						СтруктураВозврата.СтруктСтруктурМассивовЭДиСертификатов[КлючЗначение.Ключ].МассивЭД,
						КлючЗначение.Значение.МассивЭД,
						Истина);
				Иначе
					СтруктураВозврата.СтруктСтруктурМассивовЭДиСертификатов.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если СтруктураДействий.Свойство("СоотвЭДиСоглашений") Тогда
			ДополнитьСоответствие(СтруктураВозврата.СоотвЭДиСоглашений, СтруктураДействий.СоотвЭДиСоглашений);
		КонецЕсли;
		
		Если СтруктураДействий.Свойство("СоотвСоглашенийИСертификатовАвторизации") Тогда
			ДополнитьСоответствие(СтруктураВозврата.СоотвСоглашенийИСертификатовАвторизации,
									СтруктураДействий.СоотвСоглашенийИСертификатовАвторизации);
		КонецЕсли;
		
	КонецЦикла;
		
	Возврат СтруктураВозврата;
	
КонецФункции

// Функция используется для минимизации серверных вызовов, в случае, когда есть несколько массивов ЭД,
// требующих подписания различными сертификатами и в настройках указано выполнение крипто операций на сервере.
//
// Параметры:
//  СоотвСертификатовИМассивовЭДКПодписи - Соответствие - ключ - справочник-ссылка сертификатЭЦП,
//    значение - массив ссылок на подписываемые ЭД. После подписания ЭД, возможно потребуется их отправка, поэтому
//    в случае, если подписать массив ЭД не удалось - то он удаляется из соответствия.
//  СоотвСертификатовИИхСтруктур - Соответствие - ключ - справочник-ссылка сертификатЭЦП,
//    значение - структура параметров сертификата ЭЦП.
//  МассивНеПодписанныхЭД - Массив либо Неопределено, в этой переменной в вызывающую процедуру возвращается массив ЭД,
//    которые не были подписаны.
//
// Возвращаемое значение:
//  Число - количество подписанных ЭД.
//
Функция ПодписатьЭДНаСервере(СоотвСертификатовИМассивовЭДКПодписи,
								Знач СоотвСертификатовИИхСтруктур,
								МассивНеПодписанныхЭД = Неопределено) Экспорт
	
	КолПодписанных = 0;
	Если ТипЗнч(МассивНеПодписанныхЭД) <> Тип("Массив") Тогда
		МассивНеПодписанныхЭД = Новый Массив;
	КонецЕсли;
	Если ТипЗнч(СоотвСертификатовИМассивовЭДКПодписи) = Тип("Соответствие")
		И СоотвСертификатовИМассивовЭДКПодписи.Количество() > 0
		И ТипЗнч(СоотвСертификатовИИхСтруктур) = Тип("Соответствие")
		И СоотвСертификатовИИхСтруктур.Количество() > 0 Тогда
		МассивКУдалению = Новый Массив;
		Для Каждого Элемент Из СоотвСертификатовИМассивовЭДКПодписи Цикл
			Сертификат = Элемент.Ключ;
			МассивЭД = Элемент.Значение;
			Если НЕ (ЗначениеЗаполнено(Сертификат) И ЗначениеЗаполнено(МассивЭД)) Тогда
				МассивКУдалению.Добавить(Сертификат.Ключ);
				Для Каждого НеПодписанныйЭД Из МассивЭД Цикл
					МассивНеПодписанныхЭД.Добавить(НеПодписанныйЭД);
				КонецЦикла;
				Продолжить;
			КонецЕсли;
			СтруктураСертификата = СоотвСертификатовИИхСтруктур.Получить(Сертификат);
			Если НЕ ЗначениеЗаполнено(СтруктураСертификата) Тогда
				МассивКУдалению.Добавить(Сертификат.Ключ);
				Для Каждого НеПодписанныйЭД Из МассивЭД Цикл
					МассивНеПодписанныхЭД.Добавить(НеПодписанныйЭД);
				КонецЦикла;
				Продолжить;
			КонецЕсли;
			Подписан = ПодписатьЭДОпределеннымСертификатом(МассивЭД, Сертификат, СтруктураСертификата, МассивНеПодписанныхЭД);
			Если Подписан > 0 Тогда
				КолПодписанных = КолПодписанных + Подписан;
			КонецЕсли;
		КонецЦикла;
		Для Каждого Элемент Из МассивКУдалению Цикл
			СоотвСертификатовИМассивовЭДКПодписи.Удалить(Элемент);
		КонецЦикла;
	КонецЕсли;
	
	Возврат КолПодписанных;
	
КонецФункции

// Перед формированием служебных ЭД (извещений о получении ЭД), из массива ЭД удаляются
// те ЭД, для которых извещения формироваться не должны (например, при получении ТОРГ-12
// титул покупателя при обмене по регламенту 2.0).
//
// Параметры:
//  МассивЭД - Массив электронных документов, на основании которых должны быть сформированы извещения.
//
Процедура УдалитьИзМассиваНеОбрабатываемыеЭД(МассивЭД) Экспорт
	
	РеквизитыОбъектов = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивЭД, "ВерсияРегламентаЭДО, ВидЭД, СоглашениеЭД");
	Для Каждого Элемент Из РеквизитыОбъектов Цикл
		Значение = Элемент.Значение;
		ВерсияФорматаПакета = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Значение.СоглашениеЭД, "ВерсияФорматаПакета");
		
		Если (Значение.ВерсияРегламентаЭДО = Перечисления.ВерсииРегламентаОбмена1С.Версия20
			Или ВерсияФорматаПакета = Перечисления.ВерсииФорматаПакетаЭД.Версия30)
			
			И (Значение.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель
				ИЛИ Значение.ВидЭД = Перечисления.ВидыЭД.АктЗаказчик
				ИЛИ Значение.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель) Тогда
				
			МассивЭД.Удалить(МассивЭД.Найти(Элемент.Ключ));
			
		КонецЕсли;
		
		
	КонецЦикла;
	
КонецПроцедуры


// Возвращает свойства сертификата, необходимые для открытия формы сертификата
// Параметры
// АдресДанныхСертификата - адрес во временном хранилище, где находяться двоичные данные сертификата
// Возвращаемое значение:
// СтруутураСертификата - структура - описание полей см. ЭлектроннаяПодписьКлиентСервер.ЗаполнитьСтруктуруСертификата(ВыбранныйСертификат)
//
Функция СвойстваСертификата(АдресДанныхСертификата) Экспорт
	
	ДвоичныеДанныеСертификата = ПолучитьИзВременногоХранилища(АдресДанныхСертификата);
	
	ВыбранныйСертификат = Новый СертификатКриптографии(ДвоичныеДанныеСертификата);
	Если ВыбранныйСертификат=Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Сертификат не найден'"));
		Возврат Неопределено;
	КонецЕсли;
	
	СтруктураСертификата = ЭлектроннаяЦифроваяПодписьКлиентСервер.ЗаполнитьСтруктуруСертификата(ВыбранныйСертификат);
	
	Возврат СтруктураСертификата;
	
КонецФункции

// Проверяет наличие в регистре сведений записей о новых эд
// 
// Возвращаемое значение - булево - признак наличия записей в регистре сведений
//
Функция ЕстьСобытияЭДО() Экспорт
	
	ЕстьНовыеСобытия = Ложь;
	
	Если Не ОповещатьОНовыхЭД() Тогда
		Возврат ЕстьНовыеСобытия;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	1 КАК ЕстьНовыеЭД
	|ИЗ
	|	РегистрСведений.НовыеДокументыВСервисеЭДО КАК Т
	|ГДЕ
	|	Т.ЕстьНовыеЭД = ИСТИНА";
	
	Результат = Запрос.Выполнить();
	
	
	Если Не Результат.Пустой() Тогда
		ЕстьНовыеСобытия = Истина;
	КонецЕсли;
	
	Возврат ЕстьНовыеСобытия;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Получение реквизитов объектов

// только для внутреннего использования
Функция РеквизитыСоглашенияЭД(СоглашениеЭД) Экспорт
	
	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СоглашениеЭД,
		"ИдентификаторОрганизации, ЭтоИнтеркампани, СпособОбменаЭД, ИспользуетсяКриптография");
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Сбербанк

// Возвращает массив идентификаторов отправленных запросов выписки на которые не была получена выписка
//
// Параметры:
// СоглашениеЭД - СправочникСсылка.СоглашенияЭД
//
// Возвращаемое значение:
// Массив или Неопределено
//
Функция МассивИдентификаторовДокументовБанка(СоглашениеЭД)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЭДПрисоединенныеФайлы.УникальныйИДВнешний КАК Идентификатор,
	|	ЭДПрисоединенныеФайлы.Ссылка КАК ЭД
	|ИЗ
	|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	|ГДЕ
	|	ЭДПрисоединенныеФайлы.СоглашениеЭД = &СоглашениеЭД
	|	И ЭДПрисоединенныеФайлы.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.ЗапросВыписки)
	|	И НЕ ЭДПрисоединенныеФайлы.УникальныйИДВнешний = """"
	|	И (ЭДПрисоединенныеФайлы.СтатусЭД = ЗНАЧЕНИЕ(Перечисление.СтатусыЭД.Доставлен)
	|			ИЛИ ЭДПрисоединенныеФайлы.СтатусЭД = ЗНАЧЕНИЕ(Перечисление.СтатусыЭД.Принят))
	|	И НЕ ЭДПрисоединенныеФайлы.ПометкаУдаления";
	Запрос.УстановитьПараметр("СоглашениеЭД", СоглашениеЭД);
	РезультатЗапроса = Запрос.Выполнить();
	
	ТабРезультата = РезультатЗапроса.Выгрузить();
	
	Возврат ТабРезультата.ВыгрузитьКолонку("Идентификатор");
	
КонецФункции

Процедура ДополнитьСоответствие(Приемник, Источник)
	
	Для Каждого Элемент ИЗ Источник Цикл
		Значение = Приемник.Получить(Элемент.Ключ);
		Если Значение = Неопределено Тогда
			Приемник.Вставить(Элемент.Ключ, Элемент.Значение);
		Иначе
			Если ТипЗнч(Элемент.Значение) = Тип("Массив") Тогда
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Приемник[Элемент.Ключ], Элемент.Значение, Истина);
			ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("Структура") Тогда
				ДополнитьСтруктуру(Приемник[Элемент.Ключ], Элемент.Значение, Истина);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ДополнитьСтруктуру(СтруктураПриемник, СтруктураИсточник, СЗаменой = Неопределено)
	
	ИскатьКлюч = (СЗаменой = Ложь Или СЗаменой = Неопределено);
	Для Каждого КлючИЗначение Из СтруктураИсточник Цикл
		Если ИскатьКлюч И СтруктураПриемник.Свойство(КлючИЗначение.Ключ) Тогда
			Если СЗаменой = Ложь Тогда
				Продолжить;
			Иначе
				ШаблонОшибки = НСтр("ru = 'Пересечение структур источника и приемника по ключу ""%1"".'");
				ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибки, КлючИЗначение.Ключ);
			КонецЕсли
		КонецЕсли;
		СтруктураПриемник.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	
КонецПроцедуры

// Процедура используется для минимизации серверных вызовов, при необходимости
// получения на клиенте всех или нескольких значений, перечисленных в параметрах констант.
//
Процедура ИнициализироватьПеременные(ВыполнятьКриптооперацииНаСервере = Неопределено,
									 ВыполнятьАвторизациюНаСервере = Неопределено,
									 НемедленнаяОтправкаЭД = Неопределено) Экспорт
	
	НемедленнаяОтправкаЭД = ЭлектронныеДокументыСлужебный.НемедленнаяОтправкаЭД();
	ВыполнятьАвторизациюНаСервере = ВыполнятьАвторизациюНаСервере();
	ВыполнятьКриптооперацииНаСервере = ВыполнятьКриптооперацииНаСервере();
	
КонецПроцедуры

// Возвращает массив проведенных документов
//
// Параметры:
//  МассивДокументов - Массив - массив ссылок на документы 
//
// Возвращаемое значение:
//  Массив - массив ссылок на документы, которые проведены
//
Функция МассивПроведенныхДокументов(Знач МассивДокументов) Экспорт
	
	МассивПроведенныхДокументов = Новый Массив;
	МассивПроводимыхДокументов = МассивПроводимыхДокументов(МассивДокументов);
	
	Для Каждого Документ ИЗ МассивПроводимыхДокументов Цикл
		Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ, "Проведен") Тогда
			МассивПроведенныхДокументов.Добавить(Документ);
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивПроведенныхДокументов;
	
КонецФункции

Процедура ЗаполнитьДанныеПодписантаЭД(ДанныеФайлаЭД, ПространствоИменСхемы, ПараметрыЭД, СертификатПодписи)
	
	ТекстОшибки = "";

	// Разложим ФИО из сертификата.
	ПараметрыСертификата = РеквизитыСертификата(СертификатПодписи);
	ФамилияСертификата   = ПараметрыСертификата.Фамилия;
	ИмяСертификата       = ПараметрыСертификата.Имя;
	ОтчествоСертификата  = ПараметрыСертификата.Отчество;
	Организация                = ПараметрыСертификата.Организация;
	Фирма = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "Наименование");
	
	ДолжностьПоСертификату = "---";
	Если ЗначениеЗаполнено(ПараметрыСертификата.ДолжностьПоСертификату) Тогда
		ДолжностьПоСертификату = ПараметрыСертификата.ДолжностьПоСертификату;
	КонецЕсли;
	
	ЭтоФизЛицо = ЭлектронныеДокументыПереопределяемый.ЭтоФизЛицо(ПараметрыЭД.Организация);
	ДанныеЮрФизЛица = ЭлектронныеДокументыПереопределяемый.ПолучитьДанныеЮрФизЛица(ПараметрыЭД.Организация);
	
	// Заполнение блока подписанта в ЭД.
	Если (ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.СчетФактура
		Или ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура)
		
		И (ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.СЧФДОПУПД
			Или ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.СЧФУПД
			Или ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.КСЧФДИСУКД
			Или ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.КСЧФУКД)
			
		Или (ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.АктИсполнитель
			Или ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец
			Или ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.АктНаПередачуПрав
			Или ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель)
		
		И (ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДОПУПД
			Или ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДИСУКД) Тогда
		
		Подписант = ЭлектронныеДокументыВнутренний.ПолучитьОбъектТипаCML("Файл.Документ.Подписант", ПространствоИменСхемы);
		Если Не ЭтоФизЛицо Тогда
			ЮЛ = ЭлектронныеДокументыВнутренний.ПолучитьОбъектТипаCML("Файл.Документ.Подписант.ЮЛ", ПространствоИменСхемы);
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(ЮЛ, "ИННЮЛ", ДанныеЮрФизЛица.ИНН, Истина, ТекстОшибки);
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(ЮЛ, "Должн", ДолжностьПоСертификату, Истина, ТекстОшибки);
			
			ФИО = ЭлектронныеДокументыВнутренний.ПолучитьОбъектТипаCML("Файл.Документ.Подписант.ЮЛ.ФИО", ПространствоИменСхемы);
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Фамилия", ФамилияСертификата, Истина, ТекстОшибки);
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Имя", ИмяСертификата, Истина, ТекстОшибки);
			Если ЗначениеЗаполнено(ОтчествоСертификата) Тогда
				ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Отчество", ОтчествоСертификата, , ТекстОшибки);
			КонецЕсли;
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(ЮЛ, "ФИО", ФИО, Истина, ТекстОшибки);
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Подписант, "ЮЛ", ЮЛ, Истина, ТекстОшибки);
		Иначе
			ИП = ЭлектронныеДокументыВнутренний.ПолучитьОбъектТипаCML("Файл.Документ.Подписант.ИП", ПространствоИменСхемы);
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(ИП, "ИННФЛ", ДанныеЮрФизЛица.ИНН, Истина, ТекстОшибки);
			
			ДанныеСвидетельства = "";
			ЭлектронныеДокументыПереопределяемый.ДанныеСвидетельстваОРегистрацииИП(ПараметрыЭД.Организация, ДанныеСвидетельства);
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(ИП, "СвГосРегИП", ДанныеСвидетельства, , ТекстОшибки);
			
			ФИО = ЭлектронныеДокументыВнутренний.ПолучитьОбъектТипаCML("Файл.Документ.Подписант.ИП.ФИО", ПространствоИменСхемы);
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Фамилия", ФамилияСертификата, Истина, ТекстОшибки);
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Имя", ИмяСертификата, Истина, ТекстОшибки);
			Если ЗначениеЗаполнено(ОтчествоСертификата) Тогда
				ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Отчество", ОтчествоСертификата, , ТекстОшибки);
			КонецЕсли;
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(ИП, "ФИО", ФИО, Истина, ТекстОшибки);
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Подписант, "ИП", ИП, Истина, ТекстОшибки);
		КонецЕсли;
		
		ИндексПодписанта = ДанныеФайлаЭД.Документ.Подписант.Количество() - 1;
		Если Не ЭтоФизЛицо Тогда
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(ДанныеФайлаЭД.Документ.Подписант[ИндексПодписанта], "ЮЛ", ЮЛ, Истина, ТекстОшибки);
		Иначе
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(ДанныеФайлаЭД.Документ.Подписант[ИндексПодписанта], "ИП", ИП, Истина, ТекстОшибки);
		КонецЕсли;
		
		СброситьСвойствоXDTO(ДанныеФайлаЭД.Документ.Подписант[ИндексПодписанта], "ФЛ",ТекстОшибки);
		
		Если (ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.СЧФДОПУПД
				ИЛИ ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДОПУПД)
			И ДанныеФайлаЭД.Документ.СвПродПер <> Неопределено
			И ДанныеФайлаЭД.Документ.СвПродПер.СвПер.СвЛицПер = Неопределено Тогда
			
			СведенияЛица = ЭлектронныеДокументыВнутренний.ПолучитьОбъектТипаCML(
				"Файл.Документ.СвПродПер.СвПер.СвЛицПер.РабОргПрод", ПространствоИменСхемы);
			Если ЭтоФизЛицо Тогда
				Должность = НСтр("ru = 'ИП'");
				ОснованиеПолномочий = НСтр("ru = 'Свидетельство ОГРН'");
			Иначе
				Должность = ДолжностьПоСертификату;
				ОснованиеПолномочий = НСтр("ru = 'Должностные обязанности'");
			КонецЕсли;
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(СведенияЛица, "Должность", Должность, Истина, ТекстОшибки);
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(СведенияЛица, "ОснПолн", ОснованиеПолномочий, Истина, ТекстОшибки);
			
			ФИО = ЭлектронныеДокументыВнутренний.ПолучитьОбъектТипаCML(
				"Файл.Документ.СвПродПер.СвПер.СвЛицПер.РабОргПрод.ФИО", ПространствоИменСхемы);
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Фамилия", ФамилияСертификата, Истина, ТекстОшибки);
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Имя", ИмяСертификата, Истина, ТекстОшибки);
			Если ЗначениеЗаполнено(ОтчествоСертификата) Тогда
				ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Отчество", ОтчествоСертификата, , ТекстОшибки);
			КонецЕсли;
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(СведенияЛица, "ФИО", ФИО, Истина, ТекстОшибки);
			
			ТоварПередал = ЭлектронныеДокументыВнутренний.ПолучитьОбъектТипаCML(
				"Файл.Документ.СвПродПер.СвПер.СвЛицПер", ПространствоИменСхемы);
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(ТоварПередал,
				"РабОргПрод", СведенияЛица, Истина, ТекстОшибки);
			
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(ДанныеФайлаЭД.Документ.СвПродПер.СвПер, "СвЛицПер",
				ТоварПередал, Истина, ТекстОшибки);
			
		КонецЕсли;
		
	ИначеЕсли ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИнформацияПокупателяУПД
		Или ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИнформацияПокупателяУКД Тогда
	
		Подписант = ЭлектронныеДокументыВнутренний.ПолучитьОбъектТипаCML("Файл.ИнфПок.Подписант", ПространствоИменСхемы);
		Если Не ЭтоФизЛицо Тогда
			ЮЛ = ЭлектронныеДокументыВнутренний.ПолучитьОбъектТипаCML("Файл.ИнфПок.Подписант.ЮЛ", ПространствоИменСхемы);
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(ЮЛ, "ИННЮЛ", ДанныеЮрФизЛица.ИНН, Истина, ТекстОшибки);
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(ЮЛ, "Должн", ДолжностьПоСертификату, Истина, ТекстОшибки);
			
			ФИО = ЭлектронныеДокументыВнутренний.ПолучитьОбъектТипаCML("Файл.ИнфПок.Подписант.ЮЛ.ФИО", ПространствоИменСхемы);
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Фамилия", ФамилияСертификата, Истина, ТекстОшибки);
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Имя", ИмяСертификата, Истина, ТекстОшибки);
			Если ЗначениеЗаполнено(ОтчествоСертификата) Тогда
				ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Отчество", ОтчествоСертификата, , ТекстОшибки);
			КонецЕсли;
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(ЮЛ, "ФИО", ФИО, Истина, ТекстОшибки);
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Подписант, "ЮЛ", ЮЛ, Истина, ТекстОшибки);
		Иначе
			ИП = ЭлектронныеДокументыВнутренний.ПолучитьОбъектТипаCML("Файл.ИнфПок.Подписант.ИП", ПространствоИменСхемы);
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(ИП, "ИННФЛ", ДанныеЮрФизЛица.ИНН, Истина, ТекстОшибки);
			
			ДанныеСвидетельства = "";
			ЭлектронныеДокументыПереопределяемый.ДанныеСвидетельстваОРегистрацииИП(ПараметрыЭД.Организация, ДанныеСвидетельства);
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(ИП, "СвГосРегИП", ДанныеСвидетельства, , ТекстОшибки);
			
			ФИО = ЭлектронныеДокументыВнутренний.ПолучитьОбъектТипаCML("Файл.ИнфПок.Подписант.ИП.ФИО", ПространствоИменСхемы);
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Фамилия", ФамилияСертификата, Истина, ТекстОшибки);
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Имя", ИмяСертификата, Истина, ТекстОшибки);
			Если ЗначениеЗаполнено(ОтчествоСертификата) Тогда
				ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Отчество", ОтчествоСертификата, , ТекстОшибки);
			КонецЕсли;
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(ИП, "ФИО", ФИО, Истина, ТекстОшибки);
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Подписант, "ИП", ИП, Истина, ТекстОшибки);
		КонецЕсли;
		ИндексПодписанта = ДанныеФайлаЭД.ИнфПок.Подписант.Количество() - 1;
		Если Не ЭтоФизЛицо Тогда
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(ДанныеФайлаЭД.ИнфПок.Подписант[ИндексПодписанта], "ЮЛ", ЮЛ, Истина, ТекстОшибки);
		Иначе
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(ДанныеФайлаЭД.ИнфПок.Подписант[ИндексПодписанта], "ИП", ИП, Истина, ТекстОшибки);
		КонецЕсли;
		
		СброситьСвойствоXDTO(ДанныеФайлаЭД.ИнфПок.Подписант[ИндексПодписанта], "ФЛ",ТекстОшибки);
		
		Если ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИнформацияПокупателяУПД 
			И ДанныеФайлаЭД.ИнфПок.СодФХЖ4.СвПрин.СвЛицПрин = Неопределено Тогда
			
			СведенияЛица = ЭлектронныеДокументыВнутренний.ПолучитьОбъектТипаCML(
				"Файл.ИнфПок.СодФХЖ4.СвПрин.СвЛицПрин.РабОргПок", ПространствоИменСхемы);
			Если ЭтоФизЛицо Тогда
				Должность = НСтр("ru = 'ИП'");
				ОснованиеПолномочий = НСтр("ru = 'Свидетельство ОГРН'");
			Иначе
				Должность = ДолжностьПоСертификату;
				ОснованиеПолномочий = НСтр("ru = 'Должностные обязанности'");
			КонецЕсли;
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(СведенияЛица, "Должность", Должность, Истина, ТекстОшибки);
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(СведенияЛица, "ОснПолн", ОснованиеПолномочий, Истина, ТекстОшибки);
				
			ФИО = ЭлектронныеДокументыВнутренний.ПолучитьОбъектТипаCML(
				"Файл.ИнфПок.СодФХЖ4.СвПрин.СвЛицПрин.РабОргПок.ФИО", ПространствоИменСхемы);
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Фамилия", ФамилияСертификата, Истина, ТекстОшибки);
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Имя", ИмяСертификата, Истина, ТекстОшибки);
			Если ЗначениеЗаполнено(ОтчествоСертификата) Тогда
				ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Отчество", ОтчествоСертификата, , ТекстОшибки);
			КонецЕсли;
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(СведенияЛица, "ФИО", ФИО, Истина, ТекстОшибки);
			
			ТоварПринял = ЭлектронныеДокументыВнутренний.ПолучитьОбъектТипаCML(
				"Файл.ИнфПок.СодФХЖ4.СвПрин.СвЛицПрин", ПространствоИменСхемы);
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(ТоварПринял, 
				"РабОргПок", СведенияЛица, Истина, ТекстОшибки);
			
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(ДанныеФайлаЭД.ИнфПок.СодФХЖ4.СвПрин, "СвЛицПрин",
				ТоварПринял, Истина, ТекстОшибки);
			
		КонецЕсли;
		
	ИначеЕсли ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.АктИсполнитель
		ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.АктЗаказчик
		ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец
		ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель
		ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.СчетФактура
		ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура
		ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель
		ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель Тогда
		
		Подписант = ЭлектронныеДокументыВнутренний.ПолучитьОбъектТипаCML("Файл.Документ.Подписант", ПространствоИменСхемы);
		
		Если Не ЭтоФизЛицо Тогда
			ЮЛ = ЭлектронныеДокументыВнутренний.ПолучитьОбъектТипаCML("Файл.Документ.Подписант.ЮЛ", ПространствоИменСхемы);
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(ЮЛ, "ИННЮЛ", ДанныеЮрФизЛица.ИНН, Истина, ТекстОшибки);
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(ЮЛ, "Должн", ДолжностьПоСертификату, Истина, ТекстОшибки);
			
			ФИО = ЭлектронныеДокументыВнутренний.ПолучитьОбъектТипаCML("Файл.Документ.Подписант.ЮЛ.ФИО", ПространствоИменСхемы);
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Фамилия", ФамилияСертификата, Истина, ТекстОшибки);
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Имя", ИмяСертификата, Истина, ТекстОшибки);
			Если ЗначениеЗаполнено(ОтчествоСертификата) Тогда
				ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Отчество", ОтчествоСертификата, , ТекстОшибки);
			КонецЕсли;
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(ЮЛ, "ФИО", ФИО, Истина, ТекстОшибки);
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Подписант, "ЮЛ", ЮЛ, Истина, ТекстОшибки);
		Иначе
			ИП = ЭлектронныеДокументыВнутренний.ПолучитьОбъектТипаCML("Файл.Документ.Подписант.ИП", ПространствоИменСхемы);
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(ИП, "ИННФЛ", ДанныеЮрФизЛица.ИНН, Истина, ТекстОшибки);
			
			ДанныеСвидетельства = "";
			ЭлектронныеДокументыПереопределяемый.ДанныеСвидетельстваОРегистрацииИП(ПараметрыЭД.Организация, ДанныеСвидетельства);
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(ИП, "СвГосРегИП", ДанныеСвидетельства, , ТекстОшибки);
			
			ФИО = ЭлектронныеДокументыВнутренний.ПолучитьОбъектТипаCML("Файл.Документ.Подписант.ИП.ФИО", ПространствоИменСхемы);
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Фамилия", ФамилияСертификата, Истина, ТекстОшибки);
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Имя", ИмяСертификата, Истина, ТекстОшибки);
			Если ЗначениеЗаполнено(ОтчествоСертификата) Тогда
				ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Отчество", ОтчествоСертификата, , ТекстОшибки);
			КонецЕсли;
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(ИП, "ФИО", ФИО, Истина, ТекстОшибки);
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Подписант, "ИП", ИП, Истина, ТекстОшибки);
		КонецЕсли;
		
		Если ПространствоИменСхемы = "TORGPR" ИЛИ ПространствоИменСхемы = "RUISP" // Передача товаров (продавец), акт результатов работ (Исполнитель).
			Или ПространствоИменСхемы = "TORGPOK" ИЛИ ПространствоИменСхемы = "RUZAK" Тогда // Передача товаров (покупатель), акт результатов работ (Исполнитель).
			
			ИндексПодписанта = ДанныеФайлаЭД.Документ.Подписант.Количество() - 1;
			Если Не ЭтоФизЛицо Тогда
				ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(ЮЛ, "НаимОрг", Фирма, Истина, ТекстОшибки);
				ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(ДанныеФайлаЭД.Документ.Подписант[ИндексПодписанта], "ЮЛ", ЮЛ, Истина, ТекстОшибки);
			Иначе
				ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(ДанныеФайлаЭД.Документ.Подписант[ИндексПодписанта], "ИП", ИП, Истина, ТекстОшибки);
			КонецЕсли;
			
			СброситьСвойствоXDTO(ДанныеФайлаЭД.Документ.Подписант[ИндексПодписанта], "ФЛ",ТекстОшибки);
			
		Иначе
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(ДанныеФайлаЭД.Документ, "Подписант", Подписант, Истина, ТекстОшибки);
		КонецЕсли;
		
		// Заполнение блока ответственного в ЭД
		Если ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец
			ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель Тогда
			
			Если ПространствоИменСхемы = "TORGPR" Тогда
				
				// Не заполняем, так как в соответствии с приказом, "обязателен, если лицо, отпустившее груз, 
				// не совпадает с лицом, ответственным за оформление факта хозяйственной жизни"
				
			Иначе
				
				ОтпускРазреш = ЭлектронныеДокументыВнутренний.ПолучитьОбъектТипаCML("Файл.Документ.СвТНО.ОтпускГруз.ОтпускРазреш", ПространствоИменСхемы);
				ФИО = ЭлектронныеДокументыВнутренний.ПолучитьОбъектТипаCML("Файл.Документ.СвТНО.ОтпускГруз.ОтпускРазреш.ФИО", ПространствоИменСхемы);
				ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Фамилия", ФамилияСертификата, Истина, ТекстОшибки);
				ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Имя", ИмяСертификата, Истина, ТекстОшибки);
				Если ЗначениеЗаполнено(ОтчествоСертификата) Тогда
					ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Отчество", ОтчествоСертификата, , ТекстОшибки);
				КонецЕсли;
				ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(ОтпускРазреш, "ФИО", ФИО, Истина, ТекстОшибки);
				ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(ОтпускРазреш, "Должность", ДолжностьПоСертификату, , ТекстОшибки);
				ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(ДанныеФайлаЭД.Документ.СвТНО.ОтпускГруз, "ОтпускРазреш", ОтпускРазреш, Истина, ТекстОшибки);
				
			КонецЕсли;
			
		ИначеЕсли ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель Тогда
			
			Если ПространствоИменСхемы = "TORGPOK" Тогда // Передача товаров, акт результатов работ (Исполнитель).
				// Не заполняем, так как в соответствии с приказом, "обязателен, если лицо, принявшее товар (получившее груз),
				// не совпадает с лицом, ответственным за оформление факта хозяйственной жизни"
			Иначе
				ГрузПолучил = ЭлектронныеДокументыВнутренний.ПолучитьОбъектТипаCML("Файл.Документ.СвТНП.ПолучилГруз.ГрузПолучил", ПространствоИменСхемы);
				ФИО = ЭлектронныеДокументыВнутренний.ПолучитьОбъектТипаCML("Файл.Документ.СвТНП.ПолучилГруз.ГрузПолучил.ФИО", ПространствоИменСхемы);
				ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Фамилия", ФамилияСертификата, Истина, ТекстОшибки);
				ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Имя", ИмяСертификата, Истина, ТекстОшибки);
				Если ЗначениеЗаполнено(ОтчествоСертификата) Тогда
					ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Отчество", ОтчествоСертификата, , ТекстОшибки);
				КонецЕсли;
				ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(ГрузПолучил, "ФИО", ФИО, Истина, ТекстОшибки);
				ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(ГрузПолучил, "Должность", ДолжностьПоСертификату, Истина, ТекстОшибки);
				ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(ДанныеФайлаЭД.Документ.СвТНП.ПолучилГруз, "ГрузПолучил", ГрузПолучил, Истина, ТекстОшибки);
			КонецЕсли;
			
		ИначеЕсли ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.АктИсполнитель Тогда
			
			Если Не ВРег(ПространствоИменСхемы) = ВРег("RUISP") Тогда
				
				ПодписьИсполн = ЭлектронныеДокументыВнутренний.ПолучитьОбъектТипаCML("Файл.Документ.СвАктИ.Сдал.ПодписьИсполн", ПространствоИменСхемы);
				ФИО = ЭлектронныеДокументыВнутренний.ПолучитьОбъектТипаCML("Файл.Документ.СвАктИ.Сдал.ПодписьИсполн.ФИО", ПространствоИменСхемы);
				ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Фамилия", ФамилияСертификата, Истина, ТекстОшибки);
				ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Имя", ИмяСертификата, Истина, ТекстОшибки);
				Если ЗначениеЗаполнено(ОтчествоСертификата) Тогда
					ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Отчество", ОтчествоСертификата, , ТекстОшибки);
				КонецЕсли;
				ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(ПодписьИсполн, "ФИО", ФИО, Истина, ТекстОшибки);
				ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(ПодписьИсполн, "Должность", ДолжностьПоСертификату, Истина, ТекстОшибки);
				ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(ДанныеФайлаЭД.Документ.СвАктИ.Сдал, "ПодписьИсполн", ПодписьИсполн, Истина, ТекстОшибки);
				
			КонецЕсли;
			
		ИначеЕсли ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.АктЗаказчик Тогда
			
			Если Не ВРег(ПространствоИменСхемы) = ВРег("RUZAK") Тогда
				
				ПодписьЗаказ = ЭлектронныеДокументыВнутренний.ПолучитьОбъектТипаCML("Файл.Документ.СвАктИ.Принял.ПодписьЗаказ", ПространствоИменСхемы);
				ФИО = ЭлектронныеДокументыВнутренний.ПолучитьОбъектТипаCML("Файл.Документ.СвАктИ.Принял.ПодписьЗаказ.ФИО", ПространствоИменСхемы);
				ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Фамилия", ФамилияСертификата, Истина, ТекстОшибки);
				ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Имя", ИмяСертификата, Истина, ТекстОшибки);
				Если ЗначениеЗаполнено(ОтчествоСертификата) Тогда
					ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Отчество", ОтчествоСертификата, , ТекстОшибки);
				КонецЕсли;
				ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(ПодписьЗаказ, "ФИО", ФИО, Истина, ТекстОшибки);
				ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(ПодписьЗаказ, "Должность", ДолжностьПоСертификату, Истина, ТекстОшибки);
				ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(ДанныеФайлаЭД.Документ.СвАктИ.Принял, "ПодписьЗаказ", ПодписьЗаказ, Истина, ТекстОшибки);
				
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ИзвещениеОПолучении
		ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.УведомлениеОбУточнении
		ИЛИ (ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ПредложениеОбАннулировании
			И ПараметрыЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий) Тогда
		
		Подписант = ЭлектронныеДокументыВнутренний.ПолучитьОбъектТипаCML("Файл.Документ.Подписант", ПространствоИменСхемы);
		ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Подписант, "Должность", ДолжностьПоСертификату, Истина, ТекстОшибки);
		ФИО = ЭлектронныеДокументыВнутренний.ПолучитьОбъектТипаCML("Файл.Документ.Подписант.ФИО", ПространствоИменСхемы);
		ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Фамилия", ФамилияСертификата, Истина, ТекстОшибки);
		ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Имя", ИмяСертификата, Истина, ТекстОшибки);
		Если ЗначениеЗаполнено(ОтчествоСертификата) Тогда
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Отчество", ОтчествоСертификата, , ТекстОшибки);
		КонецЕсли;
		ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Подписант, "ФИО", ФИО, Истина, ТекстОшибки);
		ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(ДанныеФайлаЭД.Документ, "Подписант", Подписант, Истина, ТекстОшибки);
		
	ИначеЕсли ПараметрыЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий
		И (ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.КаталогТоваров
		ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ПрайсЛист
		ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ЗаказТовара
		ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ОтветНаЗаказ
		ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.СчетНаОплату
		ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ОтчетОПродажахКомиссионногоТовара
		ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ОтчетОСписанииКомиссионногоТовара
		ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.АктНаПередачуПрав) Тогда
		
		Если ДанныеФайлаЭД.ВерсияСхемы = СокрЛП(СтрЗаменить(ЭлектронныеДокументыПовтИсп.ВерсияСхемыCML2(), "CML", "")) Тогда
			
			// Добавление шаблона подписанта для заполнения при подписи.
			Если ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.КаталогТоваров Тогда
				Подписанты = ЭлектронныеДокументыВнутренний.ПолучитьОбъектТипаCML("Каталог.Подписанты", ПространствоИменСхемы);
				Подписант = ЭлектронныеДокументыВнутренний.ПолучитьОбъектТипаCML("Каталог.Подписанты.Подписант", ПространствоИменСхемы);
			ИначеЕсли ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ПрайсЛист Тогда
				Подписанты = ЭлектронныеДокументыВнутренний.ПолучитьОбъектТипаCML("ПакетПредложений.Подписанты", ПространствоИменСхемы);
				Подписант = ЭлектронныеДокументыВнутренний.ПолучитьОбъектТипаCML("ПакетПредложений.Подписанты.Подписант", ПространствоИменСхемы);
			Иначе
				Подписанты = ЭлектронныеДокументыВнутренний.ПолучитьОбъектТипаCML("Документ.Подписанты", ПространствоИменСхемы);
				Подписант = ЭлектронныеДокументыВнутренний.ПолучитьОбъектТипаCML("Документ.Подписанты.Подписант", ПространствоИменСхемы);
			КонецЕсли;
			
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Подписант, "Фамилия", ФамилияСертификата, Истина, ТекстОшибки);
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Подписант, "Имя", ИмяСертификата, Истина, ТекстОшибки);
			Если ЗначениеЗаполнено(ОтчествоСертификата) Тогда
				ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Подписант, "Отчество", ОтчествоСертификата, , ТекстОшибки);
			КонецЕсли;
			
			Если Не ЭтоФизЛицо Тогда
				ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Подписант, "Должность", ДолжностьПоСертификату, Истина, ТекстОшибки);
			КонецЕсли;
			
			Подписанты.Подписант.Добавить(Подписант);
			Если ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.КаталогТоваров Тогда
				ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(ДанныеФайлаЭД.Каталог, "Подписанты", Подписанты, Ложь, ТекстОшибки);
			ИначеЕсли ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ПрайсЛист Тогда
				ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(ДанныеФайлаЭД.ПакетПредложений, "Подписанты", Подписанты, Ложь, ТекстОшибки);
			Иначе
				ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(ДанныеФайлаЭД.Документ[0], "Подписанты", Подписанты, Ложь, ТекстОшибки);
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.АктОРасхождениях Тогда
		
		ФорматЭлектронногоДокумента = ЭлектронныеДокументыВнутренний.ФорматЭлектронногоДокументаПоОбъекту(ДанныеФайлаЭД);
		
		Если ЭлектронныеДокументыВнутренний.ПроверитьФорматЭлектронногоДокумента(ФорматЭлектронногоДокумента, "АктОРасхождениях", "5.01") Тогда
			
			Подписант = ЭлектронныеДокументыВнутренний.ПолучитьОбъектТипаCML("Файл.Документ.Подписант", ПространствоИменСхемы);
			Если Не ЭтоФизЛицо Тогда
				ЮЛ = ЭлектронныеДокументыВнутренний.ПолучитьОбъектТипаCML("Файл.Документ.Подписант.ЮЛ", ПространствоИменСхемы);
				ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(ЮЛ, "ИННЮЛ", ДанныеЮрФизЛица.ИНН, Истина, ТекстОшибки);
				ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(ЮЛ, "Должн", ДолжностьПоСертификату, Истина, ТекстОшибки);
				ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(ЮЛ, "НаимОрг", Фирма, , ТекстОшибки);
				
				ФИО = ЭлектронныеДокументыВнутренний.ПолучитьОбъектТипаCML("Файл.Документ.Подписант.ЮЛ.ФИО", ПространствоИменСхемы);
				ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Фамилия", ФамилияСертификата, Истина, ТекстОшибки);
				ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Имя", ИмяСертификата, Истина, ТекстОшибки);
				Если ЗначениеЗаполнено(ОтчествоСертификата) Тогда
					ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Отчество", ОтчествоСертификата, , ТекстОшибки);
				КонецЕсли;
				ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(ЮЛ, "ФИО", ФИО, Истина, ТекстОшибки);
				ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Подписант, "ЮЛ", ЮЛ, Истина, ТекстОшибки);
			Иначе
				ИП = ЭлектронныеДокументыВнутренний.ПолучитьОбъектТипаCML("Файл.Документ.Подписант.ИП", ПространствоИменСхемы);
				ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(ИП, "ИННФЛ", ДанныеЮрФизЛица.ИНН, Истина, ТекстОшибки);
				
				ДанныеСвидетельства = "";
				ЭлектронныеДокументыПереопределяемый.ДанныеСвидетельстваОРегистрацииИП(ПараметрыЭД.Организация, ДанныеСвидетельства);
				ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(ИП, "СвГосРегИП", ДанныеСвидетельства, , ТекстОшибки);
				
				ФИО = ЭлектронныеДокументыВнутренний.ПолучитьОбъектТипаCML("Файл.Документ.Подписант.ИП.ФИО", ПространствоИменСхемы);
				ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Фамилия", ФамилияСертификата, Истина, ТекстОшибки);
				ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Имя", ИмяСертификата, Истина, ТекстОшибки);
				Если ЗначениеЗаполнено(ОтчествоСертификата) Тогда
					ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Отчество", ОтчествоСертификата, , ТекстОшибки);
				КонецЕсли;
				ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(ИП, "ФИО", ФИО, Истина, ТекстОшибки);
				ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Подписант, "ИП", ИП, Истина, ТекстОшибки);
			КонецЕсли;
			
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Подписант, "ОблПолн", "3", Истина, ТекстОшибки); // Лицо, ответственное за оформление события (операции).
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Подписант, "Статус", "5", Истина, ТекстОшибки); // Работник организации - покупателя.
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Подписант, "ОснПолн", "Должностные обязанности", Истина, ТекстОшибки);
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Подписант, "ПризнОзнак", "1", Истина, ТекстОшибки);
			
			ИндексПодписанта = ДанныеФайлаЭД.Документ.Подписант.Количество() - 1;
			Если Не ЭтоФизЛицо Тогда
				ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(ДанныеФайлаЭД.Документ.Подписант[ИндексПодписанта], "ЮЛ", ЮЛ, Истина, ТекстОшибки);
			Иначе
				ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(ДанныеФайлаЭД.Документ.Подписант[ИндексПодписанта], "ИП", ИП, Истина, ТекстОшибки);
			КонецЕсли;
			
			СброситьСвойствоXDTO(ДанныеФайлаЭД.Документ.Подписант[ИндексПодписанта], "ФЛ", ТекстОшибки);
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Только для внутреннего использования
Процедура ПроверитьСрокДействияСертификата(Сертификат) Экспорт
	
	Если Не (ЗначениеЗаполнено(Сертификат) И ТипЗнч(Сертификат) = Тип("СправочникСписок.СертификатыЭЦП"))  Тогда
		Возврат;
	КонецЕсли;
	
	РеквизитыСертификата = РеквизитыСертификата(Сертификат);
	РазностьДат = РеквизитыСертификата.ДатаОкончания - ТекущаяДатаСеанса();
	Если НЕ РеквизитыСертификата.ОповещенОСрокеДействия И РазностьДат > 0 И РазностьДат < 60*60*24*31 Тогда
		Операция = Нстр("ru = 'Проверка срока действия сертификата'");
		ТекстОшибки = Нстр("ru = 'Заканчивается срок действия сертификата %1
								|Необходимо получить новый'");
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, Строка(Сертификат));
		ОбработатьИсключениеПоЭДНаСервере(Операция, ТекстОшибки);
	КонецЕсли;
	
КонецПроцедуры

// Только для внутреннего использования
Процедура УстановитьОтветственногоЭД(Знач СписокОбъектов, Знач НовыйОтветственный, КоличествоОбработанныхЭД, ПричинаПеренаправления = "") Экспорт
	
	МассивЭД = Новый Массив;
	КоличествоОбработанныхЭД = 0;
	
	Для Каждого ЭлСписка Из СписокОбъектов Цикл
		Если ТипЗнч(ЭлСписка) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
			Продолжить;
		КонецЕсли;
		МассивЭД.Добавить(ЭлСписка.Ссылка);
	КонецЦикла;
	
	Если МассивЭД.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЭДПрисоединенныеФайлы.ВладелецФайла
	|ПОМЕСТИТЬ вт_Владельцы
	|ИЗ
	|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	|ГДЕ
	|	ЭДПрисоединенныеФайлы.Ссылка В(&МассивЭД)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЭлектронныйДокументВходящий.Ссылка,
	|	ЭлектронныйДокументВходящий.Ответственный,
	|	ЭлектронныйДокументВходящий.СостояниеЭДО
	|ИЗ
	|	Документ.ЭлектронныйДокументВходящий КАК ЭлектронныйДокументВходящий
	|ГДЕ
	|	ЭлектронныйДокументВходящий.Ссылка В
	|			(ВЫБРАТЬ
	|				вт_Владельцы.ВладелецФайла
	|			ИЗ
	|				вт_Владельцы КАК вт_Владельцы)
	|	И (ЭлектронныйДокументВходящий.Ответственный <> &Ответственный
	|			ИЛИ &ЗаписьОписания)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЭлектронныйДокументИсходящий.Ссылка,
	|	ЭлектронныйДокументИсходящий.Ответственный,
	|	ЭлектронныйДокументИсходящий.СостояниеЭДО
	|ИЗ
	|	Документ.ЭлектронныйДокументИсходящий КАК ЭлектронныйДокументИсходящий
	|ГДЕ
	|	ЭлектронныйДокументИсходящий.Ссылка В
	|			(ВЫБРАТЬ
	|				вт_Владельцы.ВладелецФайла
	|			ИЗ
	|				вт_Владельцы КАК вт_Владельцы)
	|	И (ЭлектронныйДокументИсходящий.Ответственный <> &Ответственный
	|			ИЛИ &ЗаписьОписания)";
	
	Запрос.УстановитьПараметр("МассивЭД", МассивЭД);
	Запрос.УстановитьПараметр("Ответственный", НовыйОтветственный);
	Запрос.УстановитьПараметр("ЗаписьОписания", ?(ЗначениеЗаполнено(ПричинаПеренаправления), Истина, Ложь));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	НачатьТранзакцию();
	Попытка
		Пока Выборка.Следующий() Цикл
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ДокументОбъект.Ответственный = НовыйОтветственный;
			ДокументОбъект.Текст = ?(ПустаяСтрока(ДокументОбъект.Текст), "", ДокументОбъект.Текст + Символы.ПС) + ПричинаПеренаправления;
			ДокументОбъект.Записать();
			КоличествоОбработанныхЭД = КоличествоОбработанныхЭД + 1;
		КонецЦикла;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Не удалось установить ответственного электронного документа (%1). %2'"),
			Выборка.Ссылка,
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение ТекстОшибки;
	КонецПопытки;
	
КонецПроцедуры

// Позволяет получить значения реквизитов сертификата ЭЦП.
//
// Параметры:
//  Сертификат ЭП - справочник-ссылка - ссылка на элемент справочника "Сертификаты ЭП".
//
// Возвращаемое значение:
//  Структура значений реквизитов.
//
Функция РеквизитыСертификата(СертификатЭП) Экспорт
	
	ПараметрыСертификата = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СертификатЭП,
		"ЗапомнитьПарольКСертификату, ПарольПользователя, Отозван, Отпечаток, ДатаОкончания, ОповещенОСрокеДействия,
		|Фамилия, Имя, Отчество, ДолжностьПоСертификату, Организация, Назначение, ФайлСертификата,
		|Наименование, ОграничитьДоступКСертификату, ПрограммаБанка, ПометкаУдаления");
	ПараметрыСертификата.Вставить("ДвоичныеДанныеСертификата", ПараметрыСертификата.ФайлСертификата.Получить());
	ПараметрыСертификата.Вставить("ВыбранныйСертификат", СертификатЭП);
	ПараметрыСертификата.Вставить("ПарольПолучен", ПараметрыСертификата.ЗапомнитьПарольКСертификату);
	
	// В БСП методах необходим параметр
	ПараметрыСертификата.Вставить("Комментарий", "");
	
	Если Не ПараметрыСертификата.ЗапомнитьПарольКСертификату Тогда
		ПараметрыСертификата.ПарольПользователя = Неопределено;
	КонецЕсли;
	
	Возврат ПараметрыСертификата;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Формирование электронных документов

// Только для внутреннего использования
Функция СформироватьСлужебныеЭД(МассивЭД, ВидЭД, ТекстУточнения = "") Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	МассивВозврата = Новый Массив;
	
	ДанныеЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивЭД, "НаправлениеЭД, Контрагент, ВидЭД, СтатусЭД,
							|УникальныйИД, ПрофильНастроекЭДО, СоглашениеЭД, ВерсияРегламентаЭДО, ТипЭлементаВерсииЭД,
							|ВладелецФайла, НомерЭД, ТребуетсяИзвещение");
	
	Для Каждого СсылкаНаЭД ИЗ МассивЭД Цикл
	
		ПараметрыЭД = ДанныеЭД.Получить(СсылкаНаЭД);
		
				
		ЭтоИзвещение = НЕ ЗначениеЗаполнено(ТекстУточнения);
		
		Если ЭтоИзвещение Тогда
			// Не формируем извещение о получении для версии регламента 20 в формализованных документах.
			Если ПараметрыЭД.ВерсияРегламентаЭДО = Перечисления.ВерсииРегламентаОбмена1С.Версия20
				И (ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель
				ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.АктЗаказчик
				ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель
				ИЛИ ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИнформацияПокупателяУПД
				ИЛИ ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИнформацияПокупателяУКД) Тогда
				
				Продолжить;
			КонецЕсли;

			Если НЕ (ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДОЭСФ
				Или ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДПЭСФ
				Или ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ЭСФ
				Или ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДОИПЭСФ
				Или ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.УУЭСФ
				Или ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПервичныйЭД
				Или ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДОП
				Или ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.СЧФУПД
				Или ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.СЧФДОПУПД
				Или ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДОПУПД
				Или ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.КСЧФУКД
				Или ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.КСЧФДИСУКД
				Или ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДИСУКД
				Или ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДОИПУПДУКД) Тогда
				
				ШаблонСообщения = НСтр("ru = 'Для типа ЭД %1 не предусмотрено формирование Извещения о получении.'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
					ПараметрыЭД.ТипЭлементаВерсииЭД);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Если Не ЭтоСлужебныйДокумент(СсылкаНаЭД)
			 И Не ПараметрыЭД.ТребуетсяИзвещение
			 И Не ЗначениеЗаполнено(ТекстУточнения) Тогда
			Продолжить;
		КонецЕсли;

		
		АдресВоВременномХранилище = "";
		
		СтруктураЭД = ЭлектронныеДокументыВнутренний.СформироватьФайлСлужебногоДокументаПоЭД(СсылкаНаЭД, ВидЭД, ТекстУточнения);
		Если НЕ ЗначениеЗаполнено(СтруктураЭД)
			ИЛИ НЕ СтруктураЭД.Свойство("АдресВоВременномХранилище", АдресВоВременномХранилище) Тогда
			
			Возврат МассивВозврата;
		КонецЕсли;
		ДатаСозданияФайла = ТекущаяДатаСеанса();
		Попытка
			НачатьТранзакцию();
			ДобавленныйФайл = ПрисоединенныеФайлы.ДобавитьФайл(
														ПараметрыЭД.ВладелецФайла,
														СтруктураЭД.ИдФайла,
														"xml",
														ДатаСозданияФайла,
														УниверсальноеВремя(ТекущаяДатаСеанса()),
														АдресВоВременномХранилище,
														Неопределено,
														,
														Справочники.ЭДПрисоединенныеФайлы.ПолучитьСсылку());
			
			СтруктураПараметров = Новый Структура;
			СтруктураПараметров.Вставить("НаправлениеЭД",               Перечисления.НаправленияЭД.Исходящий);
			СтруктураПараметров.Вставить("СтатусЭД",                    Перечисления.СтатусыЭД.Утвержден);
			СтруктураПараметров.Вставить("ВидЭД",                       СтруктураЭД.ВидЭД);
			СтруктураПараметров.Вставить("Получатель",                  СтруктураЭД.ИдПолучателя);
			СтруктураПараметров.Вставить("Отправитель",                 СтруктураЭД.ИдОтправителя);
			СтруктураПараметров.Вставить("НомерЭД",                     ПараметрыЭД.НомерЭД);
			СтруктураПараметров.Вставить("Организация",                 СтруктураЭД.Отправитель);
			СтруктураПараметров.Вставить("Контрагент",                  СтруктураЭД.Получатель);
			СтруктураПараметров.Вставить("ПрофильНастроекЭДО",          ПараметрыЭД.ПрофильНастроекЭДО);
			СтруктураПараметров.Вставить("СоглашениеЭД",                ПараметрыЭД.СоглашениеЭД);
			СтруктураПараметров.Вставить("ВладелецЭД",                  ПараметрыЭД.ВладелецФайла);
			СтруктураПараметров.Вставить("УникальныйИД",                ПараметрыЭД.УникальныйИД);
			СтруктураПараметров.Вставить("НаименованиеФайла",           СтруктураЭД.ИдФайла);
			Если ЭтоИзвещение Тогда
				ТипЭлементаВерсииЭД = ЭлектронныеДокументыВнутренний.ОпределитьТипЭДПоТипуЭДВладельца(СсылкаНаЭД);
			ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ПредложениеОбАннулировании Тогда
				ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПОА;
			Иначе
				Если СсылкаНаЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ЭСФ
					ИЛИ СсылкаНаЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.СЧФУПД
					ИЛИ СсылкаНаЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.СЧФДОПУПД
					ИЛИ СсылкаНаЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДОПУПД
					ИЛИ СсылкаНаЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.КСЧФУКД
					ИЛИ СсылкаНаЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.КСЧФДИСУКД
					ИЛИ СсылкаНаЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДИСУКД Тогда
				
					ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.УУЭСФ;
				Иначе
					
					ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.УОУ;
				КонецЕсли;
			КонецЕсли;
			СтруктураПараметров.Вставить("ТипЭлементаВерсииЭД",         ТипЭлементаВерсииЭД);
			СтруктураПараметров.Вставить("ДатаДокументаОтправителя",    ДатаСозданияФайла);
			СтруктураПараметров.Вставить("ЭлектронныйДокументВладелец", СсылкаНаЭД);
			СтруктураПараметров.Вставить("ВерсияРегламентаЭДО",         СсылкаНаЭД.ВерсияРегламентаЭДО);
			
			ЭлектронныеДокументыСлужебный.ИзменитьПоСсылкеПрисоединенныйФайл(ДобавленныйФайл, СтруктураПараметров);
			
			Если НЕ ЭтоИзвещение Тогда
				Если ВидЭД = Перечисления.ВидыЭД.УведомлениеОбУточнении Тогда
					НовыйСтатусЭД = Перечисления.СтатусыЭД.Отклонен;
					Запрос = Новый Запрос;
					Запрос.Текст =
						"ВЫБРАТЬ
						|	ПодчиненныеЭД.Ссылка,
						|	ПодчиненныеЭД.ВладелецФайла
						|ИЗ
						|	Справочник.ЭДПрисоединенныеФайлы КАК ПодчиненныеЭД
						|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
						|		ПО ЭДПрисоединенныеФайлы.Ссылка = ПодчиненныеЭД.ЭлектронныйДокументВладелец
						|ГДЕ
						|	ПодчиненныеЭД.ТипЭлементаВерсииЭД = ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ПервичныйЭД)
						|	И ПодчиненныеЭД.СтатусЭД <> ЗНАЧЕНИЕ(Перечисление.СтатусыЭД.Отклонен)
						|	И ЭДПрисоединенныеФайлы.Ссылка = &Ссылка";
					Запрос.УстановитьПараметр("Ссылка", СсылкаНаЭД);
					Результат = Запрос.Выполнить();
					Выборка = Результат.Выбрать();
					Пока Выборка.Следующий() Цикл
						ЭДОбъект = Выборка.Ссылка.ПолучитьОбъект();
						ЭДОбъект.СтатусЭД = НовыйСтатусЭД;
						ЭДОбъект.Записать();
						ЭлектронныеДокументыСлужебный.ЗаписатьПричинуОтклонения(Выборка.ВладелецФайла,ТекстУточнения);
					КонецЦикла;
					
				Иначе
					НовыйСтатусЭД = Перечисления.СтатусыЭД.СформированоПредложениеОбАннулировании;
				КонецЕсли;
				
				СтруктураПараметров = Новый Структура("СтатусЭД, ПричинаОтклонения", НовыйСтатусЭД, ТекстУточнения);
				ЭлектронныеДокументыСлужебный.ИзменитьПоСсылкеПрисоединенныйФайл(СсылкаНаЭД, СтруктураПараметров, Ложь);
			КонецЕсли;
			ЗафиксироватьТранзакцию();
			МассивВозврата.Добавить(ДобавленныйФайл);
		Исключение
			ОтменитьТранзакцию();
		КонецПопытки;
	КонецЦикла;
	
	Возврат МассивВозврата;
	
КонецФункции

// Определяет признак шифрования и статус пакета электронных документов.
//
// Параметры:
// МассивСсылокНаДокументы - массив ссылок на пакеты электронных документов, параметры которых надо определить.
//
Функция ОпределитьПараметрыРаспаковки(Знач МассивСсылокНаДокументы) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	МассивВозврата = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПакетЭД.Ссылка КАК СсылкаНаДокумент,
	|	ПакетЭД.НастройкаЭДО.СертификатОрганизацииДляРасшифровки КАК СертификатОрганизацииДляРасшифровки,
	|	ЭДПрисоединенныеФайлы.Ссылка,
	|	ПакетЭД.СтатусПакета
	|ИЗ
	|	Документ.ПакетЭД КАК ПакетЭД
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПакетЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	|		ПО (ЭДПрисоединенныеФайлы.ВладелецФайла = ПакетЭД.Ссылка)
	|ГДЕ
	|	ПакетЭД.Ссылка В(&МассивСсылок)";
	
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылокНаДокументы);
	
	ВыборкаПакеты = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаПакеты.Следующий() Цикл
		
		Если Не ЗначениеЗаполнено(ВыборкаПакеты.Ссылка) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ВыборкаПакеты.СтатусПакета <> Перечисления.СтатусыПакетовЭД.КРаспаковке Тогда
			
			ШаблонСообщения = Нстр("ru = 'Статус пакета %1 отличен от значения ""К распаковке"".");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ВыборкаПакеты.Ссылка);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Продолжить;
		КонецЕсли;
		
		ПараметрыДанных = ПрисоединенныеФайлы.ПолучитьДанныеФайла(ВыборкаПакеты.Ссылка);
		ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(ПараметрыДанных.СсылкаНаДвоичныеДанныеФайла);
		ФайлАрхива = ЭлектронныеДокументыСлужебный.ТекущееИмяВременногоФайла("zip");
		
		Если ДвоичныеДанныеФайла <> Неопределено Тогда		
			ДвоичныеДанныеФайла.Записать(ФайлАрхива);
			
			ПапкаДляРаспаковки = ЭлектронныеДокументыСлужебный.РабочийКаталог("ext", ВыборкаПакеты.Ссылка.УникальныйИдентификатор());
			
			Попытка
				ЗИПЧтение = Новый ЧтениеZipФайла(ФайлАрхива);
				ЗипЧтение.ИзвлечьВсе(ПапкаДляРаспаковки, РежимВосстановленияПутейФайловZIP.НеВосстанавливать);
			Исключение
				ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
				Если ЗИПЧтение = Неопределено Тогда
					ТекстСообщения = НСтр("ru = 'Невозможно прочитать транспортный архив'");
				Иначе
					Если НЕ ЭлектронныеДокументыСлужебный.ВозможноИзвлечьФайлы(ЗипЧтение, ПапкаДляРаспаковки) Тогда
						ТекстСообщения = ЭлектронныеДокументыПовтИсп.ПолучитьСообщениеОбОшибке("006");
					КонецЕсли;
					ЗИПЧтение.Закрыть();
				КонецЕсли;
				ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'Распаковка пакета ЭД'"), ТекстОшибки, ТекстСообщения);
				УдалитьФайлы(ПапкаДляРаспаковки);
				УдалитьФайлы(ФайлАрхива);
				Прервать;
			КонецПопытки;
			
			Если ЕстьОдинаковыеИменаФайловСНедопустимымиСимволамиВАрхиве(ЗипЧтение, ВыборкаПакеты.СсылкаНаДокумент) Тогда
				УдалитьФайлы(ПапкаДляРаспаковки);
				УдалитьФайлы(ФайлАрхива);
				Продолжить;
			КонецЕсли;
			
			ФайлыАрхива = НайтиФайлы(ПапкаДляРаспаковки, "*");
			ФайлИнформации = Неопределено;
			ФайлКарточки   = Неопределено;
			Зашифрован     = Ложь;
			
			Для Каждого ТекФайл Из ФайлыАрхива Цикл
				Если Найти(ТекФайл.Имя, "packageDescription") > 0 Тогда
					ФайлИнформации = ТекФайл;
					Прервать;
				ИначеЕсли Найти(ТекФайл.Имя, "card") > 0 Тогда
					ФайлКарточки = ТекФайл;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			СтруктураРаспаковки = Новый Структура;
			СтруктураРаспаковки.Вставить("ПакетЭД", ВыборкаПакеты.СсылкаНаДокумент);
			
			Если ФайлИнформации <> Неопределено Тогда
				
				ЧтениеХМЛ = Новый ЧтениеXML;
				ЧтениеХМЛ.ОткрытьФайл(ФайлИнформации.ПолноеИмя);
				НашлиШифрование = Ложь;
				Документ = Неопределено;
				Сертификат = "";
				Пока ЧтениеХМЛ.Прочитать() Цикл
					Если ЧтениеХМЛ.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеХМЛ.ЛокальноеИмя = "НастройкиШифрования" Тогда
						НашлиШифрование = Истина;
					КонецЕсли;
					
					Если ЧтениеХМЛ.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеХМЛ.ЛокальноеИмя = "ДокументШифрования" Тогда
						ЧтениеХМЛ.Прочитать();
						Документ = ЧтениеХМЛ.Значение;
					КонецЕсли;
					
					Если ЧтениеХМЛ.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеХМЛ.ЛокальноеИмя = "Зашифрован" Тогда
						ЧтениеХМЛ.Прочитать();
						Зашифрован = Булево(ЧтениеХМЛ.Значение);
						Сертификат = ВыборкаПакеты.СертификатОрганизацииДляРасшифровки;
					КонецЕсли;
					
					Если ЧтениеХМЛ.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеХМЛ.ЛокальноеИмя = "СертификатШифрования" Тогда
						ЧтениеХМЛ.Прочитать();
						Сертификат = ЧтениеХМЛ.Значение;
					КонецЕсли;
					
					Если ЧтениеХМЛ.ТипУзла = ТипУзлаXML.КонецЭлемента И ЧтениеХМЛ.ЛокальноеИмя = "ДокументШифрования" Тогда
						
						Если Зашифрован Тогда
							СтруктураШифрования = Новый Структура;
							СтруктураШифрования.Вставить("ВерсияФорматаПакета", Перечисления.ВерсииФорматаПакетаЭД.Версия10);
							
							Если ЗначениеЗаполнено(ВыборкаПакеты.СертификатОрганизацииДляРасшифровки) Тогда
								СтруктураШифрования.Вставить("Сертификат", ВыборкаПакеты.СертификатОрганизацииДляРасшифровки);
								СтруктураШифрования.Вставить("ПараметрыСертификата", РеквизитыСертификата(
								ВыборкаПакеты.СертификатОрганизацииДляРасшифровки));
							Иначе
								ШаблонСообщения = НСтр("ru = 'Не указан сертификат расшифровки для: %1.'");
								ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ВыборкаПакеты.Ссылка);
								Продолжить;
							КонецЕсли;
							
							СтруктураРаспаковки.Вставить("СтруктураШифрования", СтруктураШифрования);
						КонецЕсли;
						
						Документ = Неопределено;
						Зашифрован = Ложь;
						Сертификат = "";
					КонецЕсли;
					
					Если ЧтениеХМЛ.ТипУзла = ТипУзлаXML.КонецЭлемента И ЧтениеХМЛ.ЛокальноеИмя = "НастройкиШифрования" Тогда
						Продолжить;
					КонецЕсли;
					
				КонецЦикла;
				ЧтениеХМЛ.Закрыть();
			КонецЕсли;
			
			Если ФайлКарточки <> Неопределено Тогда
				
				ОбъектXML = Новый ЧтениеXML;
				
				Попытка
					ОбъектXML.ОткрытьФайл(ФайлКарточки.ПолноеИмя);
					ЭД = ФабрикаXDTO.ПрочитатьXML(ОбъектXML);
					ОбъектXML.Закрыть();
					
					Если ЭД.Свойства().Получить("Description") <> Неопределено
						И ЭД.Description <> Неопределено
						И ЭД.Description.Свойства().Получить("AdditionalData") <> Неопределено
						И ЭД.Description.AdditionalData <> Неопределено
						И ЭД.Description.AdditionalData.Свойства().Получить("AdditionalParameter") <> Неопределено
						И ЭД.Description.AdditionalData.AdditionalParameter <> Неопределено Тогда
						
						Если ТипЗнч(ЭД.Description.AdditionalData.AdditionalParameter) = Тип("СписокXDTO") Тогда
							Для Каждого Свойство Из ЭД.Description.AdditionalData.AdditionalParameter Цикл
								Если Свойство.Name = "Зашифрован" Тогда
									Зашифрован = Булево(Свойство.Value);
									Прервать;
								КонецЕсли;
							КонецЦикла;
							
						ИначеЕсли ТипЗнч(ЭД.Description.AdditionalData.AdditionalParameter) = Тип("ОбъектXDTO") Тогда
							Если ЭД.Description.AdditionalData.AdditionalParameter.Name = "Зашифрован" Тогда
								Зашифрован = Булево(ЭД.Description.AdditionalData.AdditionalParameter.Value);
							КонецЕсли;
						КонецЕсли;
						
						Если Зашифрован Тогда
							
							СтруктураШифрования = Новый Структура;
							СтруктураШифрования.Вставить("ВерсияФорматаПакета", Перечисления.ВерсииФорматаПакетаЭД.Версия20);
							
							Если ЗначениеЗаполнено(ВыборкаПакеты.СертификатОрганизацииДляРасшифровки) Тогда
								СтруктураШифрования.Вставить("Сертификат", ВыборкаПакеты.СертификатОрганизацииДляРасшифровки);
								СтруктураШифрования.Вставить("ПараметрыСертификата", РеквизитыСертификата(
								ВыборкаПакеты.СертификатОрганизацииДляРасшифровки));
							Иначе
								ШаблонСообщения = НСтр("ru = 'Не указан сертификат расшифровки для: %1.'");
								ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ВыборкаПакеты.Ссылка);
								Продолжить;
							КонецЕсли;
							
							СтруктураРаспаковки.Вставить("СтруктураШифрования", СтруктураШифрования);
						КонецЕсли;
						
					КонецЕсли;
				Исключение
					ОбъектXML.Закрыть();
					
					ШаблонСообщения = НСтр("ru = 'Возникла ошибка при чтении данных из файла %1: %2 (подробности см. в Журнале регистрации).'");
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
					ФайлКарточки.ПолноеИмя, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
					ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'Чтение ЭД.'"),
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
					ТекстСообщения);
				КонецПопытки;
			КонецЕсли;
			ДанныеРаспаковки = ВернутьМассивДвоичныхДанныхПакета(ВыборкаПакеты.СсылкаНаДокумент);
			СтруктураРаспаковки.Вставить("ДанныеРаспаковки", ДанныеРаспаковки);
			
			УдалитьФайлы(ПапкаДляРаспаковки);
			УдалитьФайлы(ФайлАрхива);
			
			МассивВозврата.Добавить(СтруктураРаспаковки);
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивВозврата;
	
КонецФункции

// Меняет статус и состояние исполненных платежных поручений по выписке банка
//
// Параметры:
//  ЭДВыписка - СправчоникСсылка.ЭДПрисоединенныефайлы - электронный документ выписки банка,
//
Процедура ОпределитьИсполненныеПлатежныеПоручения(Знач ЭДВыписка) Экспорт
	
	МассивВнешнихИдентификаторов = МассивИдентификаторовВыпискиБанка(ЭДВыписка);
	
	Если МассивВнешнихИдентификаторов.Количество()>0 Тогда

		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ЭДПрисоединенныеФайлы.Ссылка
		|ИЗ
		|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
		|ГДЕ
		|	ЭДПрисоединенныеФайлы.УникальныйИДВнешний В (&МассивИдентификаторов)
		|	И ЭДПрисоединенныеФайлы.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.ПлатежноеПоручение)
		|	И ЭДПрисоединенныеФайлы.СоглашениеЭД = &СоглашениеЭД";
		Запрос.УстановитьПараметр("МассивИдентификаторов", МассивВнешнихИдентификаторов);
		Запрос.УстановитьПараметр("СоглашениеЭД", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭДВыписка, "СоглашениеЭД"));
		ТабЭД = Запрос.Выполнить().Выгрузить();
		Для Каждого СтрокаЭД ИЗ ТабЭД Цикл
			СтруктураПараметров = Новый Структура("СтатусЭД", Перечисления.СтатусыЭД.Исполнен);
			ЭлектронныеДокументыСлужебный.ИзменитьПоСсылкеПрисоединенныйФайл(СтрокаЭД.Ссылка, СтруктураПараметров, Ложь);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Прямой обмен с банком

// Только для внутреннего использования
Функция МассивИдентификаторовВыпискиБанка(ЭДВыписка)
	
	МассивВнешнихИдентификаторов = Новый Массив;
		
	ДопИнформацияПоЭД = ЭлектронныеДокументыСлужебный.ПолучитьДанныеФайла(ЭДВыписка);
	Если ДопИнформацияПоЭД.Свойство("СсылкаНаДвоичныеДанныеФайла")
			И ЗначениеЗаполнено(ДопИнформацияПоЭД.СсылкаНаДвоичныеДанныеФайла) Тогда
		
		ДанныеЭД = ПолучитьИзВременногоХранилища(ДопИнформацияПоЭД.СсылкаНаДвоичныеДанныеФайла);

		ИмяФайла = ПолучитьИмяВременногоФайла("xml");
				
		Если ИмяФайла = Неопределено Тогда
			ТекстОшибки = НСтр("ru = 'Не удалось прочитать электронный документ. Проверьте настройку рабочего каталога'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			Возврат МассивВнешнихИдентификаторов;
		КонецЕсли;
		
		ДанныеЭД.Записать(ИмяФайла);
		
		СтруктураДанных = ЭлектронныеДокументыВнутренний.СформироватьДеревоРазбора(ИмяФайла, Неопределено);
		
		УдалитьФайлы(ИмяФайла);
		Если СтруктураДанных = Неопределено Тогда
			Возврат МассивВнешнихИдентификаторов;
		КонецЕсли;
		
		ДеревоРазбора = СтруктураДанных.ДеревоРазбора;
		СтрокаОбъекта = СтруктураДанных.СтрокаОбъекта;
		
		СтруктураОтбора = Новый Структура("Реквизит", "БанковскиеСчетаОрганизаций");
		БанковскиеСчетаОрганизаций = СтрокаОбъекта.Строки.НайтиСтроки(СтруктураОтбора);
		МассивСчетов = Новый Массив;
		
		Для Каждого СтрокаБанковскийСчет Из БанковскиеСчетаОрганизаций Цикл
			НомерСчета = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																			ДеревоРазбора,
																			СтрокаБанковскийСчет,
																			"БанковскийСчет.РасчСчет");
			МассивСчетов.Добавить(НомерСчета);
		КонецЦикла;
		
		СтрокиТЧ = СтрокаОбъекта.Строки.НайтиСтроки(Новый Структура("Реквизит", "СтрокаТЧ"));
				
		Для Каждого СтрокаТЧ Из СтрокиТЧ Цикл
			ТекНомерСчета = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																						ДеревоРазбора,
																						СтрокаТЧ,
																						"ПлательщикСчет");
			
			ЭтоИсходящийПлатеж = МассивСчетов.Найти(ТекНомерСчета) <> Неопределено;
			Если ЭтоИсходящийПлатеж Тогда
				ИДВнешний = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																							ДеревоРазбора,
																							СтрокаТЧ,
																							"ИдПлатежа");
				МассивВнешнихИдентификаторов.Добавить(ИДВнешний);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат МассивВнешнихИдентификаторов;

КонецФункции

// Перемещает элементы из МассивЭД, которые относятся к обмену с банком и требуют специфической обработки
//в МассивЭДБанка
//
// Параметры:
// МассивЭД - Массив - содержит ссылки на электронные документы
// ДанныеДляСпецОбработки - Соответствие - содержит массивы ЭД банков для специальной обработки
//
Процедура ОтделитьЭДДляСпециальнойОбработки(МассивЭД, ДанныеДляСпецОбработки) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЭДПрисоединенныеФайлы.Ссылка КАК ЭД
	|ИЗ
	|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	|ГДЕ
	|	ЭДПрисоединенныеФайлы.Ссылка В(&МассивЭД)
	|	И НЕ(ЭДПрисоединенныеФайлы.СоглашениеЭД.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезВебРесурсБанка)
	|				И (ЭДПрисоединенныеФайлы.СоглашениеЭД.ПрограммаБанка = ЗНАЧЕНИЕ(Перечисление.ПрограммыБанка.СбербанкОнлайн)
	|					ИЛИ ЭДПрисоединенныеФайлы.СоглашениеЭД.ПрограммаБанка = ЗНАЧЕНИЕ(Перечисление.ПрограммыБанка.ОбменЧерезДопОбработку)))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЭДПрисоединенныеФайлы.Ссылка КАК ЭД,
	|	ЭДПрисоединенныеФайлы.СоглашениеЭД.ПрограммаБанка КАК ПрограммаБанка,
	|	ЭДПрисоединенныеФайлы.СоглашениеЭД КАК СоглашениеЭД
	|ИЗ
	|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	|ГДЕ
	|	ЭДПрисоединенныеФайлы.Ссылка В(&МассивЭД)
	|	И ЭДПрисоединенныеФайлы.СоглашениеЭД.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезВебРесурсБанка)
	|	И (ЭДПрисоединенныеФайлы.СоглашениеЭД.ПрограммаБанка = ЗНАЧЕНИЕ(Перечисление.ПрограммыБанка.СбербанкОнлайн)
	|			ИЛИ ЭДПрисоединенныеФайлы.СоглашениеЭД.ПрограммаБанка = ЗНАЧЕНИЕ(Перечисление.ПрограммыБанка.ОбменЧерезДопОбработку))
	|ИТОГИ ПО
	|	ПрограммаБанка,
	|	СоглашениеЭД";
	
	Запрос.УстановитьПараметр("МассивЭД", МассивЭД);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	МассивЭД = РезультатЗапроса[0].Выгрузить().ВыгрузитьКолонку("ЭД");
	ВыборкаПрограммБанка = РезультатЗапроса[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ДанныеДляСпецОбработки = Новый Соответствие;
	СоглашенияИЭД = Новый Соответствие;
	Пока ВыборкаПрограммБанка.Следующий() Цикл
		ВыборкаСоглашений = ВыборкаПрограммБанка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаСоглашений.Следующий() Цикл
			МассивСпецЭД = Новый Массив;
			ВыборкаСпецЭД = ВыборкаСоглашений.Выбрать();
			Пока ВыборкаСпецЭД.Следующий() Цикл
				МассивСпецЭД.Добавить(ВыборкаСпецЭД.ЭД);
			КонецЦикла;
			СоглашенияИЭД.Вставить(ВыборкаСоглашений.СоглашениеЭД, МассивСпецЭД);
		КонецЦикла;
		ДанныеДляСпецОбработки.Вставить(ВыборкаПрограммБанка.ПрограммаБанка, СоглашенияИЭД);
	КонецЦикла;
	
КонецПроцедуры

Функция ДанныеПодписей(СсылкаНаОбъект)
	
	МассивВозврата = Новый Массив;
		
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ЭлектронныеЦифровыеПодписи.Подпись КАК Подпись,
	               |	ЭлектронныеЦифровыеПодписи.Сертификат
	               |ИЗ
	               |	Справочник.ЭДПрисоединенныеФайлы.ЭлектронныеЦифровыеПодписи КАК ЭлектронныеЦифровыеПодписи
	               |ГДЕ
	               |	ЭлектронныеЦифровыеПодписи.Ссылка = &СсылкаНаОбъект";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.Параметры.Вставить("СсылкаНаОбъект", СсылкаНаОбъект);
	
	ВыборкаЗапроса = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаЗапроса.Следующий() Цикл
		ДвоичныеДанные = ВыборкаЗапроса.Подпись.Получить();
		АдресПодписи = ПоместитьВоВременноеХранилище(ДвоичныеДанные, Новый УникальныйИдентификатор);
		ДанныеСертификата = ВыборкаЗапроса.Сертификат.Получить();
		СтруктураВозврата = Новый Структура("АдресПодписи, Сертификат", АдресПодписи, ДанныеСертификата);
		МассивВозврата.Добавить(СтруктураВозврата);
	КонецЦикла;
	
	Возврат МассивВозврата;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обмен через дополнительную обработку.

// Получает структуру данных электронных документов для последующего формирования ЭП
//
// Параметры
//  <МассивЭД>  - <массив> - массив ссылок на электронные документы
//
// Возвращаемое значение:
// Структура, содержит данные для обработки на клиенте
//
Функция ДанныеДляФормированияЭПЧерезДопОбработку(Знач МассивЭД) Экспорт
	
	СтруктураВозврата = Новый Структура();
	СтруктураВозврата.Вставить("МассивЭДБезСхем",         Новый Массив);
	СтруктураВозврата.Вставить("МассивЭДСоСхемами",       Новый Массив);
	СтруктураВозврата.Вставить("МассивТекстовыхДанныхЭД", Новый Массив);
	СтруктураВозврата.Вставить("МассивДанныхСхем",        Новый Массив);
	
	ВремФайл = ПолучитьИмяВременногоФайла();
	
	Для Каждого ЭД Из МассивЭД Цикл
		ЭДСхема = ЭлектронныеДокументыСлужебный.СлужебныйЭДБанка(ЭД);
		Если ЗначениеЗаполнено(ЭДСхема) Тогда
			СтруктураВозврата.МассивЭДСоСхемами.Добавить(ЭД);
			ДвоичныеДанные = ПрисоединенныеФайлы.ПолучитьДвоичныеДанныеФайла(ЭДСхема);
			СтруктураВозврата.МассивДанныхСхем.Добавить(ДвоичныеДанные);
		Иначе
			СтруктураВозврата.МассивЭДБезСхем.Добавить(ЭД);
			ДвоичныеДанные = ПрисоединенныеФайлы.ПолучитьДвоичныеДанныеФайла(ЭД);
			ДвоичныеДанные.Записать(ВремФайл);
			ТекстовыйДокумент = Новый ТекстовыйДокумент;
			ТекстовыйДокумент.Прочитать(ВремФайл);
			СтрокаXML = ТекстовыйДокумент.ПолучитьТекст();
			СтруктураВозврата.МассивТекстовыхДанныхЭД.Добавить(СтрокаXML);
		КонецЕсли;
	КонецЦикла;
		
	УдалитьФайлы(ВремФайл);
	
	Возврат СтруктураВозврата;
	
КонецФункции

// Сохраняет схемы данных электронных документов
//
// Параметры
//  СоглашениеЭД - СправочникСсылка.СоглашенияОбИспользованииЭД - ссылка на соглашение с банком
//  МассивЭД  - Массив - содержит ссылки на ЭД
//  МассивСхемДанных  - Массив - содержит текстовые данные ЭД
//
Процедура СохранитьСхемыДанных(Знач СоглашениеЭД, Знач МассивЭД, Знач МассивСхемДанных) Экспорт
	
	ВремФайл = ПолучитьИмяВременногоФайла();
	
	Индекс = 0;
	КоличествоЭД = МассивЭД.Количество();
	
	Для Индекс = 0 По КоличествоЭД - 1 Цикл
		
		ВладелецФайла = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(МассивЭД[Индекс], "ВладелецФайла");
		АдресХранилища = ПоместитьВоВременноеХранилище(МассивСхемДанных[Индекс]);
		ДопФайл = ПрисоединенныеФайлы.ДобавитьФайл(
						ВладелецФайла,
						"СхемаДанных",
						,
						,
						,
						АдресХранилища,
						,
						,
						Справочники.ЭДПрисоединенныеФайлы.ПолучитьСсылку());
		ПараметрыФайла = Новый Структура;
		ПараметрыФайла.Вставить("СоглашениеЭД",                СоглашениеЭД);
		ПараметрыФайла.Вставить("ВидЭД",                       Перечисления.ВидыЭД.ДопДанные);
		ПараметрыФайла.Вставить("ЭлектронныйДокументВладелец", МассивЭД[Индекс]);
		ПараметрыФайла.Вставить("НаименованиеФайла",           "СхемаДанных");
		ПараметрыФайла.Вставить("СтатусЭД",                    Перечисления.СтатусыЭД.Получен);
		ЭлектронныеДокументыСлужебный.ИзменитьПоСсылкеПрисоединенныйФайл(ДопФайл, ПараметрыФайла, Ложь);
		
	КонецЦикла;
	
	УдалитьФайлы(ВремФайл);

КонецПроцедуры

// Сохраняет подписи электронного документа
//
// Параметры
//  <МассивЭД>  - <Массив> - содержит массив ЭД
//  <МассивПодписей>  - <Массив> - содержит массив данных подписей
//  <Сертификат> - <СправочникСсылка.СертификатыЭЦП> - ссылка на сертификат подписи
//
Процедура СохранитьДанныеПодписей(Знач МассивЭД, Знач МассивПодписей, Знач Сертификат) Экспорт
	
	РеквизитыСертификата = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
								Сертификат,
								"Отпечаток, ФайлСертификата, Назначение");
	ЧастиНазначения = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
																		РеквизитыСертификата.Назначение,
																		Символы.ПС);
	СтрокаВладелец = ЧастиНазначения[0];
	СтрокаВладелец = СтрЗаменить(СтрокаВладелец, "Владелец: ", "");
	
	КоличествоЭД = МассивЭД.Количество();
	
	Для Индекс = 0 По КоличествоЭД - 1 Цикл
		ДанныеПодписи = Новый Структура;
		ДанныеПодписи.Вставить("НоваяПодписьДвоичныеДанные", МассивПодписей[Индекс]);
		ДанныеПодписи.Вставить("Отпечаток",                  РеквизитыСертификата.Отпечаток);
		ДанныеПодписи.Вставить("ДатаПодписи",                ТекущаяДатаСеанса());
		ДанныеПодписи.Вставить("Комментарий",                "");
		ДанныеПодписи.Вставить("ИмяФайлаПодписи",            "");
		ДанныеПодписи.Вставить("КомуВыданСертификат",        СтрокаВладелец);
		ДанныеПодписи.Вставить("ДвоичныеДанныеСертификата",  РеквизитыСертификата.ФайлСертификата.Получить());
		ДобавитьПодпись(МассивЭД[Индекс], ДанныеПодписи);
	КонецЦикла

КонецПроцедуры

// Производит подключение внешней обработки 
//
// Параметры:
//  СоглашениеЭД - СправочникСсылка.ЭДПрисоединенныеФайлы - ссылка на соглашение
//  ТекущаяВерсия  - Строка - текущая версия уже подключенной обработки - для исключения повторного подключения
//  НоваяВерсия  - Строка - новая версия обработки, возвращается версия подключенно обработки
//  ИмяОбъекта  - Строка - идентификатор внешней обработки
//  АдресФайла - Адрес временного хранилища, куда помещается двоичные данные обработки
//
// Возвращаемое значение:
//  Булево - Истина, если обработка подключена
//
Функция ПодключитьВнешнююОбработку(Знач СоглашениеЭД, Знач ТекущаяВерсия = Неопределено, НоваяВерсия = Неопределено, ИмяОбъекта = "", АдресФайла = "") Экспорт

	ОбработкаПодключена = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СоглашенияОбИспользованииЭД.ДополнительнаяОбработка.Версия КАК Версия,
	               |	СоглашенияОбИспользованииЭД.ДополнительнаяОбработка,
	               |	СоглашенияОбИспользованииЭД.ДополнительнаяОбработка.ИмяОбъекта КАК ИмяОбъекта,
	               |	СоглашенияОбИспользованииЭД.ДополнительнаяОбработка.ХранилищеОбработки КАК ХранилищеОбработки
	               |ИЗ
	               |	Справочник.СоглашенияОбИспользованииЭД КАК СоглашенияОбИспользованииЭД
	               |ГДЕ
	               |	СоглашенияОбИспользованииЭД.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", СоглашениеЭД);
	Результат = Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда
		Если ТекущаяВерсия = Результат.Версия Тогда
			НоваяВерсия = ТекущаяВерсия;
		Иначе
			#Если ТолстыйКлиентОбычноеПриложение Тогда
				ДвоичныеДанные = Результат.ХранилищеОбработки.Получить();
				АдресФайла = ПоместитьВоВременноеХранилище(ДвоичныеДанные, Новый УникальныйИдентификатор);
			#Иначе
				НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(Результат.ДополнительнаяОбработка, "ХранилищеОбработки");
				ВнешниеОбработки.Подключить(НавигационнаяСсылка, , Ложь);
			#КонецЕсли
			НоваяВерсия = Результат.Версия;
		КонецЕсли;
		ИмяОбъекта = Результат.ИмяОбъекта;
		ОбработкаПодключена = Истина;
	КонецЕсли;
	
	Если Не ОбработкаПодключена Тогда
		ТекстСообщения = Нстр("ru = 'Не выбрана дополнительная обработка в соглашении об использовании прямого обмена с банком: %1.'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, СоглашениеЭД);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	Возврат ОбработкаПодключена;
	
КонецФункции

// Обработывает ответ банка на отправку платежных документов
//
// Параметры
//  <ПакетыЭД>  Сответствие - в ключе ссылка на документ ПакетЭД
//  <ДанныеОтвета>  - <Соответствие> - данные ответа банка
//  <КоличествоОтправленных>  - <Число> - Количество отправленных пакетов
//
Процедура ОбработатьОтветЧерезДопОбработку(Знач ПакетыЭД, Знач ДанныеОтвета, КоличествоОтправленных) Экспорт
	
	Для Каждого Ответ ИЗ ДанныеОтвета Цикл
		
		Попытка
			НачатьТранзакцию();
			СтруктураПараметров = Новый Структура;
			Если ЗначениеЗаполнено(Ответ.Значение.Идентификатор) Тогда
				Если Ответ.Значение.Статус = "30" Тогда
					СтруктураПараметров.Вставить("СтатусЭД", Перечисления.СтатусыЭД.Отправлен);
				Иначе
					СтруктураПараметров.Вставить("СтатусЭД", Перечисления.СтатусыЭД.Доставлен);
				КонецЕсли;
				СтруктураПараметров.Вставить("УникальныйИДВнешний", Ответ.Значение.Идентификатор);
				КоличествоОтправленных = КоличествоОтправленных + 1;
			Иначе
				СтруктураПараметров.Вставить("СтатусЭД", Перечисления.СтатусыЭД.ОтклоненБанком);
				СтруктураПараметров.Вставить("ПричинаОтклонения", Ответ.Значение.ТекстОшибки);
			КонецЕсли;
			ЭД = Справочники.ЭДПрисоединенныеФайлы.ПолучитьСсылку(Ответ.Ключ);
			ЭлектронныеДокументыСлужебный.ИзменитьПоСсылкеПрисоединенныйФайл(ЭД, СтруктураПараметров, Ложь);
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
		КонецПопытки;
	
	КонецЦикла;
	
	ТекущаяДатаСеанса = ТекущаяДатаСеанса();
	
	Для Каждого Элемент Из ПакетыЭД Цикл
		ЭлектронныеДокументыСлужебный.ОбновитьСтатусыДокументовПакетаЭД(Элемент.Ключ,
																		Перечисления.СтатусыПакетовЭД.Отправлен,
																		ТекущаяДатаСеанса);
	КонецЦикла;

КонецПроцедуры

Функция ДанныеДляОтправкиЧерезДопОбработку(ПакетыЭД = Неопределено)
	
	ДанныеВозврата = Новый Соответствие;
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПакетЭД.Ссылка,
	|	ПакетЭД.НастройкаЭДО КАК СоглашениеЭД
	|ПОМЕСТИТЬ Пакеты
	|ИЗ
	|	Документ.ПакетЭД КАК ПакетЭД
	|ГДЕ
	|	НЕ ПакетЭД.НастройкаЭДО.ПометкаУдаления
	|	И ПакетЭД.НастройкаЭДО.СтатусСоглашения = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийЭД.Действует)
	|	И ПакетЭД.НастройкаЭДО.ПрограммаБанка = ЗНАЧЕНИЕ(Перечисление.ПрограммыБанка.ОбменЧерезДопОбработку)
	|	И НЕ ПакетЭД.ПометкаУдаления
	|	И ПакетЭД.СтатусПакета = ЗНАЧЕНИЕ(Перечисление.СтатусыПакетовЭД.ПодготовленКОтправке)
	|	И ИСТИНА
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПакетЭД.Ссылка,
	|	ПакетЭД.ЭлектронныеДокументы.(
	|		ЭлектронныйДокумент,
	|		ЭлектронныйДокумент.ВидЭД
	|	),
	|	ПакетЭД.НастройкаЭДО КАК СоглашениеЭД
	|ИЗ
	|	Документ.ПакетЭД КАК ПакетЭД
	|ГДЕ
	|	ПакетЭД.Ссылка В
	|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|				Пакеты.Ссылка
	|			ИЗ
	|				Пакеты)
	|ИТОГИ ПО
	|	СоглашениеЭД
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СертификатыПодписейОрганизации.Сертификат,
	|	СертификатыПодписейОрганизации.Ссылка КАК СоглашениеЭД
	|ПОМЕСТИТЬ Сертификаты
	|ИЗ
	|	Справочник.СоглашенияОбИспользованииЭД.СертификатыПодписейОрганизации КАК СертификатыПодписейОрганизации
	|ГДЕ
	|	СертификатыПодписейОрганизации.Ссылка В
	|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|				Пакеты.СоглашениеЭД
	|			ИЗ
	|				Пакеты)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СертификатыЭЦП.Ссылка,
	|	СертификатыЭЦП.ФайлСертификата,
	|	СертификатыЭЦП.ЗапомнитьПарольКСертификату,
	|	СертификатыЭЦП.ЗапомнитьПарольКСертификату КАК ПарольПолучен,
	|	ВЫБОР
	|		КОГДА СертификатыЭЦП.ЗапомнитьПарольКСертификату
	|			ТОГДА СертификатыЭЦП.ПарольПользователя
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ПарольПользователя,
	|	Сертификаты.СоглашениеЭД КАК СоглашениеЭД
	|ИЗ
	|	Справочник.СертификатыЭЦП КАК СертификатыЭЦП
	|		ЛЕВОЕ СОЕДИНЕНИЕ Сертификаты КАК Сертификаты
	|		ПО Сертификаты.Сертификат = СертификатыЭЦП.Ссылка
	|ГДЕ
	|	(СертификатыЭЦП.СписокПользователей.Пользователь = &ТекущийПользователь
	|		ИЛИ НЕ СертификатыЭЦП.ОграничитьДоступКСертификату)
	|	И СертификатыЭЦП.Ссылка В
	|			(ВЫБРАТЬ
	|				Сертификаты.Сертификат
	|			ИЗ
	|				Сертификаты)
	|ИТОГИ ПО
	|	СоглашениеЭД";
	Если НЕ ПакетыЭД = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ИСТИНА", "И ПакетЭД.Ссылка В (&ПакетыЭД)");
		Запрос.УстановитьПараметр("ПакетыЭД", ПакетыЭД);
	КонецЕсли;
	Запрос.УстановитьПараметр("ТекущийПользователь", Пользователи.ТекущийПользователь());
	ПакетЗапросов = Запрос.ВыполнитьПакет();
	ВыборкаСоглашения = ПакетЗапросов[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаСертификатов = ПакетЗапросов[3].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВремФайл = ПолучитьИмяВременногоФайла();
	Пока ВыборкаСоглашения.Следующий() Цикл
		ВыборкаПакеты = ВыборкаСоглашения.Выбрать();
		Пока ВыборкаПакеты.Следующий() Цикл
			ДанныеПакетов = Новый Соответствие;
			ВыборкаЭД = ВыборкаПакеты.ЭлектронныеДокументы.Выбрать();
			СтруктураДанных = Новый Структура;
			Пока ВыборкаЭД.Следующий() Цикл
				ДанныеЭД = ЭлектронныеДокументыСлужебный.ПолучитьДанныеФайла(ВыборкаЭД.ЭлектронныйДокумент, Новый УникальныйИдентификатор);
				Если ВыборкаЭД.ЭлектронныйДокументВидЭД = Перечисления.ВидыЭД.ПлатежноеПоручение Тогда
					ДвоичныеДанные = ПолучитьИзВременногоХранилища(ДанныеЭД.СсылкаНаДвоичныеДанныеФайла);
					ДвоичныеДанные.Записать(ВремФайл);
					ТекстовыйДокумент = Новый ТекстовыйДокумент;
					ТекстовыйДокумент.Прочитать(ВремФайл);
					СтрокаXML = ТекстовыйДокумент.ПолучитьТекст();
					СтруктураДанных.Вставить("ПлатежноеПоручение", СтрокаXML);
					СтруктураДанных.Вставить("Ключ",               ВыборкаЭД.ЭлектронныйДокумент.УникальныйИдентификатор());
					Подписи = ДанныеПодписей(ВыборкаЭД.ЭлектронныйДокумент);
					МассивПодписей = Новый Массив;
					Для Каждого ДанныеПодписи ИЗ Подписи Цикл
						СтруктураДанныхПодписи = Новый Структура;
						СтруктураДанныхПодписи.Вставить("АдресПодписи", ДанныеПодписи.АдресПодписи);
						СтруктураДанныхПодписи.Вставить("Сертификат",   ДанныеПодписи.Сертификат);
						МассивПодписей.Добавить(СтруктураДанныхПодписи);
					КонецЦикла;
					СтруктураДанных.Вставить("Подписи", МассивПодписей);
				ИначеЕсли ВыборкаЭД.ЭлектронныйДокументВидЭД = Перечисления.ВидыЭД.ДопДанные Тогда
					СтруктураДанных.Вставить("СлужебныеДанные", ДанныеЭД.СсылкаНаДвоичныеДанныеФайла);
				КонецЕсли;
			КонецЦикла;
			ДанныеПакетов.Вставить(ВыборкаПакеты.Ссылка, СтруктураДанных);
		КонецЦикла;
		ВыборкаСертификатов.Сбросить();
		СтруктураПоиска = Новый Структура("СоглашениеЭД", ВыборкаСоглашения.СоглашениеЭД);
		Если ВыборкаСертификатов.НайтиСледующий(СтруктураПоиска) Тогда
			ВыборкаСертификатовДанные = ВыборкаСертификатов.Выбрать();
			Сертификаты = Новый Массив;
			Пока ВыборкаСертификатовДанные.Следующий() Цикл
				ДанныеСертификата = Новый Структура();
				ДанныеСертификата.Вставить("СертификатСсылка",            ВыборкаСертификатовДанные.Ссылка);
				ДанныеСертификата.Вставить("ПарольПользователя",          ВыборкаСертификатовДанные.ПарольПользователя);
				ДанныеСертификата.Вставить("ФайлСертификата",             ВыборкаСертификатовДанные.ФайлСертификата.Получить());
				ДанныеСертификата.Вставить("ЗапомнитьПарольКСертификату", ВыборкаСертификатовДанные.ЗапомнитьПарольКСертификату);
				Сертификаты.Добавить(ДанныеСертификата);
			КонецЦикла;
			СтруктураДанных = Новый Структура("ДанныеПакетов, Сертификаты", ДанныеПакетов, Сертификаты);
			ДанныеВозврата.Вставить(ВыборкаСоглашения.СоглашениеЭД, СтруктураДанных);
		Иначе
			ШаблонСообщения = Нстр("ru = 'Не указаны сертификаты в соглашении об использовании прямого обмена с банком %1'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			                                                                         ВыборкаСоглашения.СоглашениеЭД);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ДанныеВозврата;
	
КонецФункции

// Определяет наличие доступного соглашения, для получения документов по которому требуется криптография
// 
// Возвращаемое значение:
//  Булево - есть или нет хотя бы одно соглашение
//
Функция ЕстьСоглашенияТребующиеЭЦП() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка
	|ИЗ
	|	Справочник.СоглашенияОбИспользованииЭД.ИсходящиеДокументы КАК СоглашенияОбИспользованииЭДИсходящиеДокументы
	|ГДЕ
	|	СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.СтатусПодключения = ЗНАЧЕНИЕ(Перечисление.СтатусыУчастниковОбменаЭД.Присоединен)
	|	И (СоглашенияОбИспользованииЭДИсходящиеДокументы.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезОператораЭДОТакском)
	|			ИЛИ СоглашенияОбИспользованииЭДИсходящиеДокументы.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезСервис1СЭДО)
	|			ИЛИ (СоглашенияОбИспользованииЭДИсходящиеДокументы.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезКаталог)
	|				ИЛИ СоглашенияОбИспользованииЭДИсходящиеДокументы.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезЭлектроннуюПочту)
	|				ИЛИ СоглашенияОбИспользованииЭДИсходящиеДокументы.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезFTP))
	|				И НЕ СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.СертификатОрганизацииДляРасшифровки = ЗНАЧЕНИЕ(Справочник.СертификатыЭЦП.ПустаяСсылка))";
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

// Возвращает соответствие с данными о доступных сертификатах.
//
// Параметры:
//  <СоглашениеЭД> - СправочникСсылка.СоглашениеОбИспользованииЭД - ссылка на соглашение
//
// Возвращаемое значение:
//  Соответствие - Ключ - ссылка на элемент справочника СертификатыЭЦП, значение - двоичные данные сертификата
//
Функция ДоступныеСертификаты(СоглашениеЭД) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СертификатыЭЦП.Ссылка,
	|	СертификатыЭЦП.ФайлСертификата,
	|	ВЫБОР
	|		КОГДА СертификатыЭЦП.ЗапомнитьПарольКСертификату
	|			ТОГДА СертификатыЭЦП.ПарольПользователя
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ПарольПользователя,
	|	СертификатыЭЦП.ЗапомнитьПарольКСертификату,
	|	СертификатыЭЦП.ЗапомнитьПарольКСертификату КАК ПарольПолучен,
	|	СертификатыЭЦП.Отпечаток,
	|	СертификатыЭЦП.ПрограммаБанка
	|ИЗ
	|	Справочник.СоглашенияОбИспользованииЭД.СертификатыПодписейОрганизации КАК СертификатыПодписейОрганизации
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СертификатыЭЦП КАК СертификатыЭЦП
	|		ПО СертификатыПодписейОрганизации.Сертификат = СертификатыЭЦП.Ссылка
	|ГДЕ
	|	СертификатыПодписейОрганизации.Ссылка = &СоглашениеЭД
	|	И (СертификатыЭЦП.СписокПользователей.Пользователь = &ТекущийПользователь
	|		ИЛИ НЕ СертификатыЭЦП.ОграничитьДоступКСертификату)";
	Запрос.УстановитьПараметр("СоглашениеЭД", СоглашениеЭД);
	Запрос.УстановитьПараметр("ТекущийПользователь", Пользователи.АвторизованныйПользователь());
	Результат = Запрос.Выполнить().Выбрать();
	ДанныеВозврата = Новый Соответствие;
	Пока Результат.Следующий() Цикл
		Структура = Новый Структура("ПарольПользователя, Отпечаток, ФайлСертификата, ПарольПолучен, ЗапомнитьПарольКСертификату, ПрограммаБанка");
		ЗаполнитьЗначенияСвойств(Структура, Результат);
		Структура.Вставить("ФайлСертификата", Результат.ФайлСертификата.Получить());
		ДанныеВозврата.Вставить(Результат.Ссылка, Структура);
	КонецЦикла;
	Возврат ДанныеВозврата;
	
КонецФункции

// См. эту функцию в модуле ЭлектронныеДокументыСлужебный.
Функция ПолучитьДанныеФайла(Знач ПрисоединенныйФайл,
                            Знач ИдентификаторФормы = Неопределено,
                            Знач ПолучатьСсылкуНаДвоичныеДанные = Истина) Экспорт
	
	Возврат ЭлектронныеДокументыСлужебный.ПолучитьДанныеФайла(
		ПрисоединенныйФайл, ИдентификаторФормы, ПолучатьСсылкуНаДвоичныеДанные);
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Получение значений реквизитов объектов

// Позволяет получить значения реквизитов соглашения об обмене ЭД.
//
// Параметры:
//  Соглашение - справочник-ссылка - ссылка на элемент справочника "Соглашение об обмене ЭД".
//
// Возвращаемое значение:
//  Структура значений реквизитов.
//
Функция ПрограммаБанка(СоглашениеЭД) Экспорт
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СоглашениеЭД, "ПрограммаБанка");
	
КонецФункции

Функция ВидИВладелецЭД(СсылкаНаЭД) Экспорт
	
	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаЭД, "ВидЭД, ВладелецФайла, ТипЭлементаВерсииЭД");
	
КонецФункции

Функция РеквизитыПрофиляНастроекЭДО(ПрофильНастроекЭДО) Экспорт
	
	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПрофильНастроекЭДО, "СпособОбменаЭД, ИдентификаторОрганизации");
	
КонецФункции

Функция СвойстваСертификатовПрофиляЭДО(Профиль) Экспорт
	
	
	СвойстваСертификатов = Новый Соответствие;
	Для Каждого Строка Из Профиль.СертификатыПодписейОрганизации Цикл
		
		Сертификат = Строка.Сертификат;
		ПараметрыСертификата = ЭлектронныеДокументыСлужебныйВызовСервера.РеквизитыСертификата(Сертификат);
		
		СвойстваСертификатов.Вставить(Сертификат, ПараметрыСертификата);
		
	КонецЦикла;
	
	Возврат СвойстваСертификатов;
	
КонецФункции

// Только для внутреннего использования
//
Функция ЕстьДОПоДокументу(Ссылка) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	1 КАК Результат
	|ИЗ
	|	РегистрСведений.СостоянияЭД КАК СостоянияЭД
	|ГДЕ
	|	СостоянияЭД.СсылкаНаОбъект = &СсылкаНаОбъект";
	Запрос.УстановитьПараметр("СсылкаНаОбъект", Ссылка);
	
	Результат = Запрос.Выполнить();
	
	ЕстьДО = Истина;
	Если Результат.Пустой() Тогда
		ЕстьДО = Ложь;
	КонецЕсли;
	
	Возврат ЕстьДО;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обмен через веб ресурс банка

// только для внутреннего использования
Процедура ОтправитьЭДВБанк(Знач ПараметрыАвторизации, ДанныеВозврата) Экспорт
	
	ДанныеВозврата = Новый Структура;
	
	КолОтправленныхПакетов = ОтправкаСформированныхЭДВБанк(ПараметрыАвторизации);
	ДанныеВозврата.Вставить("КолОтправленныхПакетов", КолОтправленныхПакетов);
	
	ДанныеДляОтправкиЧерезДопОбработку = ДанныеДляОтправкиЧерезДопОбработку();
	Если ДанныеДляОтправкиЧерезДопОбработку.Количество() > 0 Тогда
		ДанныеВозврата.Вставить("ДанныеДляОтправкиЧерезДопОбработку", ДанныеДляОтправкиЧерезДопОбработку);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает массив соглашений ЭД с банками, для которых есть подготовленные к отправке электронные документы
//
// Возвращаемое значение:
//   Массив - Содержит ссылки на справочник СоглашенияОбИспользованииЭД
//
Функция СоглашенияСБанкамиБезКриптографии() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ПакетЭД.НастройкаЭДО КАК СоглашениеЭД
	|ИЗ
	|	Документ.ПакетЭД КАК ПакетЭД
	|ГДЕ
	|	ПакетЭД.ПометкаУдаления = ЛОЖЬ
	|	И ПакетЭД.СтатусПакета = ЗНАЧЕНИЕ(Перечисление.СтатусыПакетовЭД.ПодготовленКОтправке)
	|	И ПакетЭД.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезВебРесурсБанка)
	|	И НЕ ПакетЭД.НастройкаЭДО.ИспользуетсяКриптография";
	
	Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("СоглашениеЭД");
	
	Возврат Результат;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Прямой обмен с банком

Функция ОтправкаСформированныхЭДВБанк(ПараметрыАвторизации = Неопределено) Экспорт
	
	Результат = 0;
	ГотовыеКОтправкеПакеты = ПодготовленныеКОтправкеЭДВБанк();
	Если ЗначениеЗаполнено(ГотовыеКОтправкеПакеты) Тогда
		Результат = ОтправкаПакетовЭД(ГотовыеКОтправкеПакеты, ПараметрыАвторизации);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПодготовленныеКОтправкеЭДВБанк()
	
	ЗапросПодготовленныхЭД = Новый Запрос;
	ЗапросПодготовленныхЭД.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПакетЭД.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ПакетЭД КАК ПакетЭД
	|ГДЕ
	|	НЕ ПакетЭД.ПометкаУдаления
	|	И ПакетЭД.СтатусПакета = ЗНАЧЕНИЕ(Перечисление.СтатусыПакетовЭД.ПодготовленКОтправке)
	|	И ПакетЭД.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезВебРесурсБанка)";
	ЗапросПодготовленныхЭД.УстановитьПараметр("СтатусПакета", Перечисления.СтатусыПакетовЭД.ПодготовленКОтправке);
	
	ПодсистемаСбербанкОнлайн = "ЭлектронноеВзаимодействие.ЭлектронныеДокументы.ОбменСБанками.СбербанкОнлайн";
	
	Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует(ПодсистемаСбербанкОнлайн) Тогда
		ЗапросПодготовленныхЭД.Текст = ЗапросПодготовленныхЭД.Текст + "
				|	И НЕ(ПакетЭД.НастройкаЭДО.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезВебРесурсБанка)
				|				И ПакетЭД.НастройкаЭДО.ПрограммаБанка = ЗНАЧЕНИЕ(Перечисление.ПрограммыБанка.СбербанкОнлайн))";
	КонецЕсли;
	
	Результат = ЗапросПодготовленныхЭД.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Возврат Результат;
	
КонецФункции

Функция ВерсияФорматаПакета(Пакет) Экспорт
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Пакет, "ВерсияФорматаПакета");
	
КонецФункции

Функция УдалитьМожноОтклонитьЭтотЭД(СсылкаНаЭД, ФормироватьУОУ = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ПараметрыЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаЭД, "СтатусЭД, ВидЭД, НаправлениеЭД");
	Если ЭДОтклонен(ПараметрыЭД.СтатусЭД) Тогда
		ВозвращаемоеЗначение = Ложь;
	ИначеЕсли ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ПредложениеОбАннулировании Тогда
		ВозвращаемоеЗначение = Истина;
		Если ПараметрыЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
			ФормироватьУОУ = Истина;
		КонецЕсли;
	ИначеЕсли ЭтоСлужебныйДокумент(СсылкаНаЭД) Тогда
		ВозвращаемоеЗначение = Ложь;
	Иначе
		ВозвращаемоеЗначение = Истина;
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЭДПрисоединенныеФайлы.Ссылка КАК ЭД
		|ИЗ
		|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЭДПрисоединенныеФайлы КАК ЭД_ПОА
		|		ПО ЭДПрисоединенныеФайлы.Ссылка = ЭД_ПОА.ЭлектронныйДокументВладелец
		|			И (ЭД_ПОА.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.ПредложениеОбАннулировании))
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЭДПрисоединенныеФайлы КАК ПодчиненныеЭД
		|		ПО ЭДПрисоединенныеФайлы.Ссылка = ПодчиненныеЭД.ЭлектронныйДокументВладелец
		|			И (ПодчиненныеЭД.ВидЭД В (&ВидыЭДОтветныхТитулов))
		|ГДЕ
		|	ЭДПрисоединенныеФайлы.Ссылка = &Ссылка
		|	И ВЫБОР
		|			КОГДА ЭД_ПОА.Ссылка ЕСТЬ NULL
		|					ИЛИ ЭД_ПОА.Ссылка = &ЭДПрисоединенныеФайлыПустаяСсылка
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ
		|	И ВЫБОР
		|			КОГДА ЭДПрисоединенныеФайлы.НаправлениеЭД = ЗНАЧЕНИЕ(Перечисление.НаправленияЭД.Входящий)
		|				ТОГДА ВЫБОР
		|						КОГДА ЭДПрисоединенныеФайлы.ВидЭД В (&ВидыЭДПервичныхТитулов)
		|							ТОГДА ВЫБОР
		|									КОГДА ПодчиненныеЭД.Ссылка ЕСТЬ NULL
		|											ИЛИ ПодчиненныеЭД.Ссылка = &ЭДПрисоединенныеФайлыПустаяСсылка
		|											ИЛИ ПодчиненныеЭД.СтатусЭД В (&СтатусыИсходящихЭДДопускающиеОтклонение)
		|										ТОГДА ИСТИНА
		|									ИНАЧЕ ЛОЖЬ
		|								КОНЕЦ
		|						ИНАЧЕ ЭДПрисоединенныеФайлы.СтатусЭД В (&СтатусыВходящихЭДДопускающиеОтклонение)
		|					КОНЕЦ
		|			ИНАЧЕ ЭДПрисоединенныеФайлы.СтатусЭД В (&СтатусыИсходящихЭДДопускающиеОтклонение)
		|		КОНЕЦ";
		
		Запрос.УстановитьПараметр("Ссылка", СсылкаНаЭД);
		Запрос.УстановитьПараметр("ЭДПрисоединенныеФайлыПустаяСсылка", Справочники.ЭДПрисоединенныеФайлы.ПустаяСсылка());
		СтатусыИсходящихЭДДопускающиеОтклонение = Новый Массив;
		СтатусыИсходящихЭДДопускающиеОтклонение.Добавить(Перечисления.СтатусыЭД.Сформирован);
		СтатусыИсходящихЭДДопускающиеОтклонение.Добавить(Перечисления.СтатусыЭД.Утвержден);
		СтатусыИсходящихЭДДопускающиеОтклонение.Добавить(Перечисления.СтатусыЭД.Подписан);
		СтатусыИсходящихЭДДопускающиеОтклонение.Добавить(Перечисления.СтатусыЭД.ПодготовленКОтправке);
		Запрос.УстановитьПараметр("СтатусыИсходящихЭДДопускающиеОтклонение", СтатусыИсходящихЭДДопускающиеОтклонение);
		СтатусыВходящихЭДДопускающиеОтклонение = Новый Массив;
		СтатусыВходящихЭДДопускающиеОтклонение.Добавить(Перечисления.СтатусыЭД.Получен);
		СтатусыВходящихЭДДопускающиеОтклонение.Добавить(Перечисления.СтатусыЭД.Утвержден);
		СтатусыВходящихЭДДопускающиеОтклонение.Добавить(Перечисления.СтатусыЭД.Подписан);
		СтатусыВходящихЭДДопускающиеОтклонение.Добавить(Перечисления.СтатусыЭД.ПодготовленКОтправке);
		Запрос.УстановитьПараметр("СтатусыВходящихЭДДопускающиеОтклонение", СтатусыВходящихЭДДопускающиеОтклонение);
		ВидыЭДОтветныхТитулов = Новый Массив;
		ВидыЭДОтветныхТитулов.Добавить(Перечисления.ВидыЭД.ТОРГ12Покупатель);
		ВидыЭДОтветныхТитулов.Добавить(Перечисления.ВидыЭД.АктЗаказчик);
		ВидыЭДОтветныхТитулов.Добавить(Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель);
		Запрос.УстановитьПараметр("ВидыЭДОтветныхТитулов", ВидыЭДОтветныхТитулов);
		ВидыЭДПервичныхТитулов = Новый Массив;
		ВидыЭДПервичныхТитулов.Добавить(Перечисления.ВидыЭД.ТОРГ12Продавец);
		ВидыЭДПервичныхТитулов.Добавить(Перечисления.ВидыЭД.АктИсполнитель);
		ВидыЭДПервичныхТитулов.Добавить(Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель);
		Запрос.УстановитьПараметр("ВидыЭДПервичныхТитулов", ВидыЭДПервичныхТитулов);
		Результат = Запрос.Выполнить();
		
		Если Результат.Пустой() Тогда
			ВозвращаемоеЗначение = Ложь;
		Иначе
			ФормироватьУОУ = (НЕ ПараметрыЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция МожноОтклонитьЭтотЭД(СсылкаНаФайлЭД, ФормироватьУОУ = Ложь) Экспорт
	
	ВозвращаемоеЗначение = Ложь;
	
	МассивЭД = Новый Массив;
	МассивЭД.Добавить(СсылкаНаФайлЭД);
	ПараметрыОтклонения = ПараметрыОтклоненияЭД(МассивЭД, ФормироватьУОУ);
	
	Если ПараметрыОтклонения.Количество() > 0 Тогда
		ВозвращаемоеЗначение = Истина;
		ФормироватьУОУ = ПараметрыОтклонения[0].ФормироватьУОУ;
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ПараметрыОтклоненияЭД(МассивЭД, ФормироватьУОУ = Ложь) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	ВозвращаемоеЗначение = Новый Массив; 
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЭДПрисоединенныеФайлы.Ссылка КАК ЭД,
	|	МАКСИМУМ(ЭДПрисоединенныеФайлы.СтатусЭД) КАК СтатусЭД,
	|	МАКСИМУМ(ЭДПрисоединенныеФайлы.ТипЭлементаВерсииЭД) КАК ТипЭлементаВерсииЭД,
	|	МАКСИМУМ(ЭДПрисоединенныеФайлы.НаправлениеЭД) КАК НаправлениеЭД,
	|	МИНИМУМ(ВЫБОР
	|			КОГДА ЭД_ПОА.Ссылка ЕСТЬ NULL 
	|					ИЛИ ЭД_ПОА.Ссылка = &ЭДПрисоединенныеФайлыПустаяСсылка
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК ПОАНеЗаведено,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ЭДПрисоединенныеФайлы.НаправлениеЭД = ЗНАЧЕНИЕ(Перечисление.НаправленияЭД.Входящий)
	|				ТОГДА ВЫБОР
	|						КОГДА ЭДПрисоединенныеФайлы.ВладелецФайла.ВидЭД В (&ВидыЭДПервичныхТитулов)
	|							ТОГДА ВЫБОР
	|									КОГДА ПодчиненныеЭД.Ссылка ЕСТЬ NULL 
	|											ИЛИ ПодчиненныеЭД.Ссылка = &ЭДПрисоединенныеФайлыПустаяСсылка
	|											ИЛИ ПодчиненныеЭД.СтатусЭД В (&СтатусыИсходящихПервичныхЭДДопускающиеОтклонение)
	|										ТОГДА ИСТИНА
	|									ИНАЧЕ ЛОЖЬ
	|								КОНЕЦ
	|						ИНАЧЕ ВЫБОР
	|								КОГДА ЭДПрисоединенныеФайлы.ВладелецФайла.ВидЭД В (&ВидыЭДСФ)
	|									ТОГДА ВЫБОР
	|											КОГДА ЭДПрисоединенныеФайлы.СтатусЭД В (&СтатусыЭДСФДопускающиеОтклонение)
	|												ТОГДА ИСТИНА
	|											ИНАЧЕ ЛОЖЬ
	|										КОНЕЦ
	|								КОГДА ЭДПрисоединенныеФайлы.СтатусЭД В (&СтатусыВходящихПервичныхЭДДопускающиеОтклонение)
	|									ТОГДА ИСТИНА
	|								ИНАЧЕ ЛОЖЬ
	|							КОНЕЦ
	|					КОНЕЦ
	|			КОГДА ЭДПрисоединенныеФайлы.СтатусЭД В (&СтатусыИсходящихПервичныхЭДДопускающиеОтклонение)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК СтатусДопускаетОтклонение,
	|	МАКСИМУМ(ЭДПрисоединенныеФайлы.ВладелецФайла.ВидЭД) КАК ВидЭД,
	|	МАКСИМУМ(ЭДПрисоединенныеФайлы.ВладелецФайла.ТребуетсяПодтверждение) КАК ТребуетсяПодтверждение,
	|	МАКСИМУМ(ЕСТЬNULL(ПодчиненныеЭД.ПодписанЭЦП, ЛОЖЬ)) КАК ОтветПодписан
	|ИЗ
	|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЭДПрисоединенныеФайлы КАК ЭД_ПОА
	|		ПО ЭДПрисоединенныеФайлы.Ссылка = ЭД_ПОА.ЭлектронныйДокументВладелец
	|			И (ЭД_ПОА.ТипЭлементаВерсииЭД = ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ПОА))
	|			И (ЭД_ПОА.СтатусЭД <> ЗНАЧЕНИЕ(Перечисление.СтатусыЭД.Отклонен))
	|			И (ЭД_ПОА.СтатусЭД <> ЗНАЧЕНИЕ(Перечисление.СтатусыЭД.ОтклоненПолучателем))
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЭДПрисоединенныеФайлы КАК ПодчиненныеЭД
	|		ПО ЭДПрисоединенныеФайлы.Ссылка = ПодчиненныеЭД.ЭлектронныйДокументВладелец
	|			И (ПодчиненныеЭД.ТипЭлементаВерсииЭД В (&ТипыЭДОтветныхТитулов))
	|ГДЕ
	|	ЭДПрисоединенныеФайлы.Ссылка В(&МассивЭД)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЭДПрисоединенныеФайлы.Ссылка";
	Запрос.УстановитьПараметр("МассивЭД", МассивЭД);
	Запрос.УстановитьПараметр("ЭДПрисоединенныеФайлыПустаяСсылка", Справочники.ЭДПрисоединенныеФайлы.ПустаяСсылка());
	СтатусыИсходящихЭДДопускающиеОтклонение = Новый Массив;
	СтатусыИсходящихЭДДопускающиеОтклонение.Добавить(Перечисления.СтатусыЭД.Сформирован);
	СтатусыИсходящихЭДДопускающиеОтклонение.Добавить(Перечисления.СтатусыЭД.Утвержден);
	СтатусыИсходящихЭДДопускающиеОтклонение.Добавить(Перечисления.СтатусыЭД.Подписан);
	СтатусыИсходящихЭДДопускающиеОтклонение.Добавить(Перечисления.СтатусыЭД.ПодготовленКОтправке);
	Запрос.УстановитьПараметр("СтатусыИсходящихПервичныхЭДДопускающиеОтклонение", СтатусыИсходящихЭДДопускающиеОтклонение);
	СтатусыВходящихЭДДопускающиеОтклонение = Новый Массив;
	СтатусыВходящихЭДДопускающиеОтклонение.Добавить(Перечисления.СтатусыЭД.Получен);
	СтатусыВходящихЭДДопускающиеОтклонение.Добавить(Перечисления.СтатусыЭД.Утвержден);
	СтатусыВходящихЭДДопускающиеОтклонение.Добавить(Перечисления.СтатусыЭД.Подписан);
	СтатусыВходящихЭДДопускающиеОтклонение.Добавить(Перечисления.СтатусыЭД.ПодготовленКОтправке);
	Запрос.УстановитьПараметр("СтатусыВходящихПервичныхЭДДопускающиеОтклонение", СтатусыВходящихЭДДопускающиеОтклонение);
	ВидыЭДОтветныхТитулов = Новый Массив;
	ВидыЭДОтветныхТитулов.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ТОРГ12Покупатель);
	ВидыЭДОтветныхТитулов.Добавить(Перечисления.ТипыЭлементовВерсииЭД.АктЗаказчик);
	ВидыЭДОтветныхТитулов.Добавить(Перечисления.ТипыЭлементовВерсииЭД.СоглашениеОбИзмененииСтоимостиПолучатель);
	ВидыЭДОтветныхТитулов.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ИнформацияПокупателяУПД);
	ВидыЭДОтветныхТитулов.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ИнформацияПокупателяУКД);
	Запрос.УстановитьПараметр("ТипыЭДОтветныхТитулов", ВидыЭДОтветныхТитулов);
	ВидыЭДПервичныхТитулов = Новый Массив;
	ВидыЭДПервичныхТитулов.Добавить(Перечисления.ВидыЭД.ТОРГ12Продавец);
	ВидыЭДПервичныхТитулов.Добавить(Перечисления.ВидыЭД.АктИсполнитель);
	ВидыЭДПервичныхТитулов.Добавить(Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель);
	Запрос.УстановитьПараметр("ВидыЭДПервичныхТитулов", ВидыЭДПервичныхТитулов);
	ВидыЭДСФ = Новый Массив;
	ВидыЭДСФ.Добавить(Перечисления.ВидыЭД.СчетФактура);
	ВидыЭДСФ.Добавить(Перечисления.ВидыЭД.КорректировочныйСчетФактура);
	Запрос.УстановитьПараметр("ВидыЭДСФ", ВидыЭДСФ);
	СтатусыЭДСФДопускающиеОтклонение = Новый Массив;
	СтатусыЭДСФДопускающиеОтклонение.Добавить(Перечисления.СтатусыЭД.Получен);
	СтатусыЭДСФДопускающиеОтклонение.Добавить(Перечисления.СтатусыЭД.Утвержден);
	Запрос.УстановитьПараметр("СтатусыЭДСФДопускающиеОтклонение", СтатусыЭДСФДопускающиеОтклонение);
	
	ТипыЭлементовВерсийСчетовФактур = Новый Массив;
	ТипыЭлементовВерсийСчетовФактур.Добавить(Перечисления.ТипыЭлементовВерсииЭД.КСЧФУКД);
	ТипыЭлементовВерсийСчетовФактур.Добавить(Перечисления.ТипыЭлементовВерсииЭД.СЧФУПД);
	
	Выборка = Запрос.Выполнить().Выбрать();
		
	Пока Выборка.Следующий() Цикл
		ФормироватьУОУТекущее = ФормироватьУОУ;
		МожноОтклонить = Ложь;
		Если НЕ ЭДОтклонен(Выборка.СтатусЭД) Тогда
			Если Выборка.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПОА Тогда
				МожноОтклонить = Истина;
				ФормироватьУОУТекущее = Выборка.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий;
			ИначеЕсли НЕ ЭтоСлужебныйДокумент(Выборка.ТипЭлементаВерсииЭД)
				И Выборка.ПОАНеЗаведено И Выборка.СтатусДопускаетОтклонение
				// Запрещаем отклонение исходящих произвольных документов при подписи
				И НЕ (Выборка.ВидЭД = Перечисления.ВидыЭД.ПроизвольныйЭД 
					И Выборка.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий)
				// Запрещаем отклонение входящих утвержденных документов, не требующих ответной подписи или уже подписанных.
				// Исключение: счета-фактуры - их отклонение допускаем в отсутствие функционала аннулирования.
				И НЕ (Выборка.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий 
					И Выборка.СтатусЭД = Перечисления.СтатусыЭД.Утвержден
					И (Выборка.ОтветПодписан ИЛИ Не Выборка.ТребуетсяПодтверждение)) Тогда
						
				МожноОтклонить = Истина;
				ФормироватьУОУТекущее = (НЕ Выборка.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий);
			КонецЕсли;
			
			Если МожноОтклонить Тогда
				ВозвращаемоеЗначение.Добавить(НовыеПараметрыОтклоненияАннулирования(
					Выборка.ЭД, ФормироватьУОУТекущее, ЭтоСчетФактура(Выборка.ТипЭлементаВерсииЭД), Выборка.ТребуетсяПодтверждение));
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ВозвращаемоеЗначение;

КонецФункции

// Формирует структуру параметров, необходимую для работы функций аннулирования и отклонения.
//
// Параметры:
//  ЭД - СправочникСсылка.ЭДПрисоединенныеФайлы - электронный документ.
//  ФормироватьУОУ - Булево - признак необходимости формирования уведомления об уточнении.
//  ЭтоСчетФактура - Булево - признак того, что обрабатываемый документ является счетом-фактурой.
// 
// Возвращаемое значение:
//  Структура - структура параметров:
//    * СсылкаНаЭД - СправочникСсылка.ЭДПрисоединенныеФайлы - электронный документ;
//    * ФормироватьУОУ - Булево - признак необходимости формирования уведомления;
//    * ЭтоСчетФактура - Булево - признак того, что обрабатываемый документ является счетом-фактурой.
//    * ТребуетсяПодтверждение - Булево - признак того, что требуется формировать ответный титул или ответную подпись.
//
Функция НовыеПараметрыОтклоненияАннулирования(ЭД, ФормироватьУОУ, ЭтоСчетФактура, ТребуетсяПодтверждение)
	
	Параметры = Новый Структура;
	Параметры.Вставить("СсылкаНаЭД", ЭД);
	Параметры.Вставить("ФормироватьУОУ", ФормироватьУОУ);
	Параметры.Вставить("ЭтоСчетФактура", ЭтоСчетФактура);
	Параметры.Вставить("ТребуетсяПодтверждение", ТребуетсяПодтверждение);
	Возврат Параметры;

КонецФункции

Функция ЭДОтклонен(СтатусЭД) Экспорт
	
	ЭДОтклонен = (СтатусЭД = Перечисления.СтатусыЭД.Отклонен
					ИЛИ СтатусЭД = Перечисления.СтатусыЭД.ОтклоненПолучателем
					ИЛИ СтатусЭД = Перечисления.СтатусыЭД.ОтклоненБанком
					ИЛИ СтатусЭД = Перечисления.СтатусыЭД.ОшибкаПередачи
					ИЛИ СтатусЭД = Перечисления.СтатусыЭД.ОтказанАБС
					ИЛИ СтатусЭД = Перечисления.СтатусыЭД.ЭЦПНеВерна
					ИЛИ СтатусЭД = Перечисления.СтатусыЭД.ОшибкаРеквизитов);
	Возврат ЭДОтклонен
	
КонецФункции

Функция ДОЗакрытПринудительно(ВладелецФайла) Экспорт
	
	СостояниеЭДО = СостояниеДокументооборота(ВладелецФайла);
	
	Результат = Ложь;
	Если СостояниеЭДО = Перечисления.СостоянияВерсийЭД.ЗакрытПринудительно Тогда
		Результат = Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьСсылкиНаЭДДляПОА(Знач ПервичныйЭД) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЭДПрисоединенныеФайлы.Ссылка КАК ПОА,
		|	ЭДПрисоединенныеФайлы.ВладелецФайла.Организация КАК Организация,
		|	ЭДВладелецЭД.ВладелецФайла КАК ВладелецФайла,
		|	ВЫБОР
		|		КОГДА ЭДПрисоединенныеФайлы.НаправлениеЭД = значение(Перечисление.НаправленияЭД.Входящий)
		|			ТОГДА 0
		|		ИНАЧЕ 1
		|	КОНЕЦ КАК Приоритет
		|ИЗ
		|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЭДПрисоединенныеФайлы КАК ЭДВладелецЭД
		|		ПО ЭДПрисоединенныеФайлы.ЭлектронныйДокументВладелец = ЭДВладелецЭД.Ссылка
		|ГДЕ
		|	ЭДПрисоединенныеФайлы.ТипЭлементаВерсииЭД = ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ПОА)
		|	И ЭДВладелецЭД.Ссылка = &Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	Приоритет";
	
	Запрос.УстановитьПараметр("Ссылка", ПервичныйЭД);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Если Выборка.Следующий() Тогда
		СтруктураВозврата = Новый Структура;
		СтруктураВозврата.Вставить("ПОА", Выборка.ПОА);
		СтруктураВозврата.Вставить("Организация", Выборка.Организация);
		СтруктураВозврата.Вставить("ВладелецФайла", Выборка.ВладелецФайла);
	Иначе
		СтруктураВозврата = Неопределено;
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

Функция МожноАннулироватьЭтотЭД(Знач СсылкаНаЭД) Экспорт
	
	МассивЭД = Новый Массив;
	МассивЭД.Добавить(СсылкаНаЭД);
	ПараметрыАннулированияЭД = ПараметрыАннулированияЭД(МассивЭД);
	МожноАннулировать = ПараметрыАннулированияЭД.Количество() > 0;
	Возврат МожноАннулировать;

КонецФункции

Функция ДокументооборотЗавершен(СсылкаНаЭД)
	
	Если НЕ ЗначениеЗаполнено(СсылкаНаЭД)
		ИЛИ ЭтоСлужебныйДокумент(СсылкаНаЭД) Тогда
		ВозвращаемоеЗначение = Ложь;
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ЭДПрисоединенныеФайлы.Ссылка КАК ЭД,
		|	ПодчиненныеЭД.Ссылка КАК ПодчиненныйЭД,
		|	ЭДПрисоединенныеФайлы.НаправлениеЭД,
		|	ЭДПрисоединенныеФайлы.СтатусЭД,
		|	ПодчиненныеЭД.СтатусЭД КАК СтатусПодчиненногоЭД
		|ИЗ
		|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЭДПрисоединенныеФайлы КАК ЭД_ПОА
		|		ПО (ЭД_ПОА.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.ПредложениеОбАннулировании))
		|			И ЭДПрисоединенныеФайлы.Ссылка = ЭД_ПОА.ЭлектронныйДокументВладелец
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЭДПрисоединенныеФайлы КАК ПодчиненныеЭД
		|		ПО ЭДПрисоединенныеФайлы.Ссылка = ПодчиненныеЭД.ЭлектронныйДокументВладелец
		|			И (ПодчиненныеЭД.ВидЭД В (&ВидыЭДОтветныхТитулов))
		|ГДЕ
		|	НЕ ЭДПрисоединенныеФайлы.СтатусЭД В (&СписокСтатусовИсключений)
		|	И НЕ ЭДПрисоединенныеФайлы.ТипЭлементаВерсииЭД В (&СписокТиповИсключений)
		|	И НЕ ЭДПрисоединенныеФайлы.ПометкаУдаления
		|	И ЭДПрисоединенныеФайлы.Ссылка = &Ссылка
		|	И ВЫБОР
		|			КОГДА ЭД_ПОА.Ссылка ЕСТЬ NULL 
		|					ИЛИ ЭД_ПОА.Ссылка = &ЭДПрисоединенныеФайлыПустаяСсылка
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ";
		
		СписокТиповИсключений = Новый Массив;
		СписокТиповИсключений.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ЭСФ);
		СписокТиповИсключений.Добавить(Перечисления.ТипыЭлементовВерсииЭД.СЧФДОПУПД);
		СписокТиповИсключений.Добавить(Перечисления.ТипыЭлементовВерсииЭД.СЧФУПД);
		СписокТиповИсключений.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ДОПУПД);
		СписокТиповИсключений.Добавить(Перечисления.ТипыЭлементовВерсииЭД.КСЧФДИСУКД);
		СписокТиповИсключений.Добавить(Перечисления.ТипыЭлементовВерсииЭД.КСЧФУКД);
		СписокТиповИсключений.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ДИСУКД);
		Запрос.УстановитьПараметр("СписокТиповИсключений", СписокТиповИсключений);
		
		МассивСтатусовИсключений = Новый Массив;
		МассивСтатусовИсключений.Добавить(Перечисления.СтатусыЭД.СформированоПредложениеОбАннулировании);
		МассивСтатусовИсключений.Добавить(Перечисления.СтатусыЭД.ПолученоПредложениеОбАннулировании);
		МассивСтатусовИсключений.Добавить(Перечисления.СтатусыЭД.Аннулирован);
		МассивСтатусовИсключений.Добавить(Перечисления.СтатусыЭД.Отклонен);
		МассивСтатусовИсключений.Добавить(Перечисления.СтатусыЭД.ОтклоненПолучателем);
		Запрос.УстановитьПараметр("Ссылка", СсылкаНаЭД);
		Запрос.УстановитьПараметр("СписокСтатусовИсключений", МассивСтатусовИсключений);
		Запрос.УстановитьПараметр("ЭДПрисоединенныеФайлыПустаяСсылка", Справочники.ЭДПрисоединенныеФайлы.ПустаяСсылка());
		ВидыЭДОтветныхТитулов = Новый Массив;
		ВидыЭДОтветныхТитулов.Добавить(Перечисления.ВидыЭД.ТОРГ12Покупатель);
		ВидыЭДОтветныхТитулов.Добавить(Перечисления.ВидыЭД.АктЗаказчик);
		ВидыЭДОтветныхТитулов.Добавить(Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель);
		Запрос.УстановитьПараметр("ВидыЭДОтветныхТитулов", ВидыЭДОтветныхТитулов);
		Выборка = Запрос.Выполнить().Выбрать();
		ВозвращаемоеЗначение = Ложь;
		Если Выборка.Следующий() Тогда
			Если Выборка.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
				Если ЗначениеЗаполнено(Выборка.ПодчиненныйЭД) Тогда
					ОбрабатываемыйЭД = Выборка.ПодчиненныйЭД;
					СтатусЭД = Выборка.СтатусПодчиненногоЭД;
				Иначе
					ОбрабатываемыйЭД = Выборка.ЭД;
					СтатусЭД = Выборка.СтатусЭД;
				КонецЕсли;
			Иначе
				ОбрабатываемыйЭД = Выборка.ЭД;
				СтатусЭД = Выборка.СтатусЭД;
			КонецЕсли;
			НастройкиОбмена = ЭлектронныеДокументыСлужебный.НастройкиОбменаЭД(ОбрабатываемыйЭД);
			МассивСтатусов = ЭлектронныеДокументыСлужебный.ВернутьМассивСтатусовЭД(НастройкиОбмена);
			Если МассивСтатусов.ВГраница() >= 0 И СтатусЭД = МассивСтатусов[МассивСтатусов.ВГраница()] Тогда
				ВозвращаемоеЗначение = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Ищет документы основания ИБ по реквизиту документа ЭД"НомерЭД" документа и заполняет ОснованияИБ
// Параметры:
// НомераЭД - Массив ИД документов основания,
//  колонка "ИдентификаторДокументаОснования" табличной части "ИдентификаторыОснованийВладельцаФайла" эд;
// НаправлениеЭД - определяет параметры поиска документа (входящий, исходящий);
// ОснованияИБ - массив в котрой помещаются документы основания.
//
Процедура НайтиДокументыОснования(НомераЭД, НаправлениеЭД, ОснованияИБ) Экспорт
	
	Запрос = Новый Запрос;
	Если НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЭДПрисоединенныеФайлы.ВладелецФайла КАК ДокументОснования,
		|	ЭДПрисоединенныеФайлы.НомерЭД КАК НомерЭД
		|ПОМЕСТИТЬ втЭД
		|ИЗ
		|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
		|ГДЕ
		|	ЭДПрисоединенныеФайлы.НомерЭД В(&НомераЭД)
		|	И ЭДПрисоединенныеФайлы.ТипЭлементаВерсииЭД В (ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ПервичныйЭД), ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ДОП), ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ЭСФ), ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.СЧФУПД), ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.СЧФДОПУПД))
		|	И ЭДПрисоединенныеФайлы.НаправлениеЭД = &НаправлениеЭД
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ДокументОснования
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЭлектронныйДокументВходящийИдентификаторыОснованийВладельцаФайла.ИдентификаторДокументаОснования КАК ИДОснования
		|ИЗ
		|	втЭД КАК втЭД
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронныйДокументВходящий.ИдентификаторыОснованийВладельцаФайла КАК ЭлектронныйДокументВходящийИдентификаторыОснованийВладельцаФайла
		|		ПО втЭД.ДокументОснования = ЭлектронныйДокументВходящийИдентификаторыОснованийВладельцаФайла.Ссылка
		|		И втЭД.НомерЭД <> ЭлектронныйДокументВходящийИдентификаторыОснованийВладельцаФайла.ИдентификаторДокументаОснования
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЭлектронныйДокументВходящийДокументыОснования.ДокументОснование
		|ИЗ
		|	Документ.ЭлектронныйДокументВходящий.ДокументыОснования КАК ЭлектронныйДокументВходящийДокументыОснования
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втЭД КАК втЭД
		|		ПО ЭлектронныйДокументВходящийДокументыОснования.Ссылка = втЭД.ДокументОснования";
		
	Иначе
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЭДПрисоединенныеФайлы.ВладелецФайла КАК ДокументОснования,
		|	ЭДПрисоединенныеФайлы.НомерЭД КАК НомерЭД
		|ПОМЕСТИТЬ втЭД
		|ИЗ
		|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
		|ГДЕ
		|	ЭДПрисоединенныеФайлы.НомерЭД В(&НомераЭД)
		|	И ЭДПрисоединенныеФайлы.ТипЭлементаВерсииЭД В (ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ПервичныйЭД), ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ДОП), ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ЭСФ), ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.СЧФУПД), ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.СЧФДОПУПД))
		|	И ЭДПрисоединенныеФайлы.НаправлениеЭД = &НаправлениеЭД
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ДокументОснования
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЭлектронныйДокументИсходящийИдентификаторыОснованийВладельцаФайла.ИдентификаторДокументаОснования КАК ИДОснования
		|ИЗ
		|	втЭД КАК втЭД
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронныйДокументИсходящий.ИдентификаторыОснованийВладельцаФайла КАК ЭлектронныйДокументИсходящийИдентификаторыОснованийВладельцаФайла
		|		ПО втЭД.ДокументОснования = ЭлектронныйДокументИсходящийИдентификаторыОснованийВладельцаФайла.Ссылка
		|		И втЭД.НомерЭД <> ЭлектронныйДокументИсходящийИдентификаторыОснованийВладельцаФайла.ИдентификаторДокументаОснования
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЭлектронныйДокументИсходящийДокументыОснования.ДокументОснование
		|ИЗ
		|	втЭД КАК втЭД
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронныйДокументИсходящий.ДокументыОснования КАК ЭлектронныйДокументИсходящийДокументыОснования
		|		ПО втЭД.ДокументОснования = ЭлектронныйДокументИсходящийДокументыОснования.Ссылка";
	КонецЕсли;
	
	Запрос.УстановитьПараметр("НомераЭД", НомераЭД);
	Запрос.УстановитьПараметр("НаправлениеЭД", НаправлениеЭД);
	МассивРезультатов = Запрос.ВыполнитьПакет();
	Выборка = МассивРезультатов[2].Выбрать();
		
	Пока Выборка.Следующий() Цикл
		ОснованияИБ.Добавить(Выборка.ДокументОснование);
	КонецЦикла;
	
	Выборка = МассивРезультатов[1].Выбрать();
		
	Пока Выборка.Следующий() Цикл
		Если ЗначениеЗаполнено(Выборка.ИДОснования) Тогда
			МассивИД = Новый Массив;
			МассивИД.Добавить(Выборка.ИДОснования);
			
			НайтиДокументыОснования(МассивИД, НаправлениеЭД, ОснованияИБ)
		КонецЕсли;
	КонецЦикла;
		
КонецПроцедуры

Функция ЭтоДокументКорректировки(ДобавленныйФайл) Экспорт
	
	// Документ, основания которых должны поменять свой статус должен быть вида:
	// ТОРГ12Продавец, ТОРГ12Покупатель или ИзвещениеОПолучении привязанный к с.ф.
	
	Если (ДобавленныйФайл.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец 
			Или ДобавленныйФайл.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель
			Или ДобавленныйФайл.ВидЭД = Перечисления.ВидыЭД.АктИсполнитель
			Или ДобавленныйФайл.ВидЭД = Перечисления.ВидыЭД.АктЗаказчик
			Или ДобавленныйФайл.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель
			Или ДобавленныйФайл.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель
			Или ДобавленныйФайл.ВидЭД = Перечисления.ВидыЭД.АктНаПередачуПрав
			Или ДобавленныйФайл.ВидЭД = Перечисления.ВидыЭД.АктОРасхождениях)
			
			Или ДобавленныйФайл.ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура
			
			Или (ДобавленныйФайл.ВидЭД = Перечисления.ВидыЭД.СчетФактура
			И ДобавленныйФайл.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.СЧФДОПУПД)
			
			Или (ДобавленныйФайл.ВидЭД = Перечисления.ВидыЭД.Подтверждение
			И ДобавленныйФайл.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДПЭСФ)
			
			Или (ДобавленныйФайл.ВидЭД = Перечисления.ВидыЭД.ИзвещениеОПолучении
				И ЗначениеЗаполнено(ДобавленныйФайл.ЭлектронныйДокументВладелец)
				И ДобавленныйФайл.ЭлектронныйДокументВладелец.ВидЭД = Перечисления.ВидыЭД.СчетФактура) Тогда
				
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Функция ЭДОснования(СсылкаНаЭД, НаправлениеЭД) Экспорт
	
	ФайлДанныхСсылка = ПолучитьДанныеЭД(СсылкаНаЭД);
	Если НЕ ЗначениеЗаполнено(ФайлДанныхСсылка) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ВыборкаДопДанные = ЭлектронныеДокументыСлужебный.ВыборкаДопДанныеЭД(СсылкаНаЭД);
	Если ВыборкаДопДанные.Следующий() Тогда
		СсылкаНаЭДДопДанных = ВыборкаДопДанные.Ссылка;
		ФайлДопДанныхСсылка = ПолучитьДанныеЭД(СсылкаНаЭДДопДанных);
		Если НЕ ЗначениеЗаполнено(ФайлДопДанныхСсылка) Тогда
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;

	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ФайлДанныхСсылка", ФайлДанныхСсылка);
	СтруктураПараметров.Вставить("НаправлениеЭД",	СсылкаНаЭД.НаправлениеЭД);
	Если ФайлДопДанныхСсылка <> Неопределено Тогда
		СтруктураПараметров.Вставить("ФайлДопДанных", ФайлДопДанныхСсылка);
	КонецЕсли;
	СтруктураПараметров.Вставить("ВладелецЭД", "ВладелецЭД");
	
	СтруктураЭД = ЭлектронныеДокументыВнутренний.ПолучитьДанныеИзФайла(СтруктураПараметров);
	
	ИДОснования = Неопределено;
	
	Если СтруктураЭД.Свойство("ИДЭДДокументаОснования", ИДОснования) И
		ЗначениеЗаполнено(ИДОснования) Тогда
		
		ЭДОснования = СсылкаЭДПоИД(ИДОснования, НаправлениеЭД);
		
	Иначе
		
		ДеревоДопДанных = Неопределено;
		Если Не СтруктураЭД.Свойство("ДеревоДопДанных", ДеревоДопДанных) Тогда 
			Возврат Неопределено;
		КонецЕсли;
		
		СтрокаДокументаОснования = СтруктураЭД.ДеревоДопДанных.Строки.Найти("ИДЭДДокументаОснования", , Истина);
		Если СтрокаДокументаОснования = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		ЭДОснования = СсылкаЭДПоИД(СтрокаДокументаОснования.ЗначениеРеквизита, НаправлениеЭД);
	КонецЕсли;
	
	Возврат ЭДОснования;
	
КонецФункции

Процедура УстановитьЭДСостояние(МассивЭД, Состояние) Экспорт
	
	Если ТипЗнч(МассивЭД) = Тип("СправочникСсылка.ЭДПрисоединенныеФайлы") Тогда
		ИзменяемыеЭД = Новый Массив;
		ИзменяемыеЭД.Добавить(МассивЭД);
	Иначе
		ИзменяемыеЭД = МассивЭД;
	КонецЕсли;
	
	Для Каждого ДокументЭ Из ИзменяемыеЭД Цикл
		
		СостояниеЭД = РегистрыСведений.СостоянияЭД.СоздатьМенеджерЗаписи();
		СостояниеЭД.СсылкаНаОбъект = ДокументЭ.ВладелецФайла;
		СостояниеЭД.ЭлектронныйДокумент = ДокументЭ;
		СостояниеЭД.Прочитать();
		
		Если НЕ (СостояниеЭД.СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.ОжидаетсяКорректировка
			Или СостояниеЭД.СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.ТребуетсяУточнитьДокумент) Тогда
			Продолжить;
		КонецЕсли;
		
		СостояниеЭД.ДействияСНашейСтороны = Перечисления.СводныеСостоянияЭД.ДействийНеТребуется;
		СостояниеЭД.ДействияСоСтороныДругогоУчастника = Перечисления.СводныеСостоянияЭД.ДействийНеТребуется;
		СостояниеЭД.СостояниеВерсииЭД = Состояние;
		СостояниеЭД.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

Функция СсылкаЭДПоИД(Наименование, НаправлениеЭД)
	Если Не ЗначениеЗаполнено(Наименование) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ЭДПрисоединенныеФайлы.Ссылка КАК ЭД
	|ИЗ
	|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	|ГДЕ
	|	ЭДПрисоединенныеФайлы.НаименованиеФайла ПОДОБНО &Наименование
	|	И ЭДПрисоединенныеФайлы.НаправлениеЭД = &НаправлениеЭД";
	
	Запрос.УстановитьПараметр("Наименование", Наименование);
	Запрос.УстановитьПараметр("НаправлениеЭД", НаправлениеЭД);
	
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ЭД;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// ЭД владелец - первичный ЭД к которому пришла вторая подпись
// для этого ЭД необходимо найти пакет ЭД, из него извлечь доп данные - наименование эл документа на основании которог он был введен
// по наименованию найти ЭДОснвания, установить у его владельца статус "Обмен завершен с исправлением"
Процедура УстановитьСостояниеЗавершен(ДобавленныйФайл, НаправлениеЭД) Экспорт
	
	Если Не ЭтоДокументКорректировки(ДобавленныйФайл) Тогда
		Возврат;
	КонецЕсли;
	
	РеквизитыФайлаЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДобавленныйФайл, "ВладелецФайла, СоглашениеЭД");
	
	ЭД = РеквизитыФайлаЭД.ВладелецФайла;
	
	НомераЭД = ЭД.ИдентификаторыОснованийВладельцаФайла.ВыгрузитьКолонку("ИдентификаторДокументаОснования");
	
	Если НомераЭД.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЭДПрисоединенныеФайлы.ВладелецФайла КАК ДокументОснования
	|ИЗ
	|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	|ГДЕ
	|	ЭДПрисоединенныеФайлы.НомерЭД В (&НомерЭД)
	|	И ЭДПрисоединенныеФайлы.СоглашениеЭД = &СоглашениеЭД
	|	И ЭДПрисоединенныеФайлы.НаправлениеЭД = &НаправлениеЭД
	|	И ЭДПрисоединенныеФайлы.ТипЭлементаВерсииЭД В
	|	(ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ПервичныйЭД),
	|	 ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ДОП),
	|	 ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ДОПУПД),
	|	 ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.СЧФДОПУПД),
	|	 ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.КСЧФДИСУКД),
	|	 ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ДИСУКД),
	|	 ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.КСЧФУКД))";
	Запрос.УстановитьПараметр("НомерЭД", НомераЭД);
	Запрос.УстановитьПараметр("НаправлениеЭД", НаправлениеЭД);
	Запрос.УстановитьПараметр("СоглашениеЭД", РеквизитыФайлаЭД.СоглашениеЭД);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	ДокументыОснования = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		
		ДокументыОснования.Добавить(Выборка.ДокументОснования);
		
	КонецЦикла;
	
	Если ДокументыОснования.Количество() > 0 Тогда
		
		ЭлектронныеДокументыВнутренний.УстановитьСостояниеОбменЗавершенСИсправлением(ДокументыОснования);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ЭтоОтветныйДокумент(ЭлектронныйДокумент) 
	
	Результат = Ложь;
	Если ЭлектронныйДокумент.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель
		Или ЭлектронныйДокумент.ВидЭД = Перечисления.ВидыЭД.АктЗаказчик
		Или ЭлектронныйДокумент.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель
		Или ЭлектронныйДокумент.ВидЭД = Перечисления.ВидыЭД.СчетФактура
		Или ЭлектронныйДокумент.ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура
		Или ЭлектронныйДокумент.ВидЭД = Перечисления.ВидыЭД.АктНаПередачуПрав
		ИЛИ ЭлектронныйДокумент.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИнформацияПокупателяУПД
		ИЛИ ЭлектронныйДокумент.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИнформацияПокупателяУКД
		Тогда
		
		Результат = Истина;
		
	КонецЕсли;
	
	Возврат Результат;
		
КонецФункции

Процедура ИзменитьСостояниеЭДДокументовОснования(РеквизитыПакетаЭД)
	
	Выборка = РеквизитыПакетаЭД.ЭлектронныеДокументы.Выбрать();
	Если Выборка.Количество() > 0 И Выборка.Следующий() Тогда
		ЭлектронныйДокумент = Выборка.ЭлектронныйДокумент;
		Если ЗначениеЗаполнено(ЭлектронныйДокумент) Тогда
			Если ЭтоОтветныйДокумент(ЭлектронныйДокумент) Тогда
				
				СвойстваЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЭлектронныйДокумент, "ВидЭД, НаправлениеЭД");
				Если СвойстваЭД.ВидЭД = Перечисления.ВидыЭД.АктНаПередачуПрав 
					И СвойстваЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий Тогда
					Возврат;
				КонецЕсли;
				
 				УстановитьСостояниеЗавершен(ЭлектронныйДокумент, СвойстваЭД.НаправлениеЭД);
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры
 
Функция ЭтоДокументРеализации(СвойстваЭД)
	
	Результат = Ложь;
	
	МассивРТУ = ВидыЭлектронныхДокументовРТУ();
	
	Если Не МассивРТУ.Найти(СвойстваЭД.ВидЭД) = Неопределено Тогда
		
		Результат = Истина;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ВидыЭлектронныхДокументовРТУ() Экспорт
	
	МассивВидов = Новый Массив;
	МассивВидов.Добавить(Перечисления.ВидыЭД.ТОРГ12Продавец);
	МассивВидов.Добавить(Перечисления.ВидыЭД.АктИсполнитель);
	МассивВидов.Добавить(Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель);
	МассивВидов.Добавить(Перечисления.ВидыЭД.АктНаПередачуПрав);
	
	Возврат МассивВидов;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Прочие

Процедура СброситьСвойствоXDTO(ОбъектXDTO, ИмяСвойства, ТекстОшибки)
	
	Попытка
		ОбъектXDTO.Сбросить(ИмяСвойства);
	Исключение
		ШаблонСообщения = НСтр("ru = 'Выполнение операции: Очистка XDTO.
			|Ошибка сброса значения свойства ""%1""!'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ИмяСвойства);
		ТекстОшибки = ?(ЗначениеЗаполнено(ТекстОшибки), ТекстОшибки + Символы.ПС + ТекстСообщения, ТекстСообщения);
		
		ЭлектронныеДокументыСлужебный.ВыполнитьЗаписьСобытияПоЭДВЖурналРегистрации(ТекстСообщения + Символы.ПС
			+ ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), 2);

	КонецПопытки
	
КонецПроцедуры

Процедура НайтиЗаполнитьОснованияУВладельцевЭД() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ИдентификаторыДокументовОснованийВладельцевЭД.ДокументПотомок,
		|	ИдентификаторыДокументовОснованийВладельцевЭД.ИдентификаторДокументаОснования,
		|	ИдентификаторыДокументовОснованийВладельцевЭД.ЭлектронныйДокумент,
		|	ИдентификаторыДокументовОснованийВладельцевЭД.ДокументОснование
		|ИЗ
		|	РегистрСведений.ИдентификаторыДокументовОснованийВладельцевЭД КАК ИдентификаторыДокументовОснованийВладельцевЭД
		|ГДЕ
		|	ИдентификаторыДокументовОснованийВладельцевЭД.ОснованиеПолучено";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если ТипЗнч(Выборка.ДокументПотомок) = Тип("ДокументСсылка.ЭлектронныйДокументВходящий") Тогда
			НачатьТранзакцию();
			Попытка
				ДокументОбъект = Выборка.ДокументПотомок.ПолучитьОбъект();
				НоваяСтрока = ДокументОбъект.ДокументыОснования.Добавить();
				НоваяСтрока.ДокументОснование = Выборка.ДокументОснование;
				ДокументОбъект.Записать();
				НаборЗаписей = РегистрыСведений.ИдентификаторыДокументовОснованийВладельцевЭД.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.ЭлектронныйДокумент.Установить(Выборка.ЭлектронныйДокумент);
				НаборЗаписей.Отбор.ЭлектронныйДокумент.Установить(Выборка.ИдентификаторДокументаОснования);
				НаборЗаписей.Прочитать();
				Для Каждого ЗаписьРегистра Из НаборЗаписей Цикл
					НаборЗаписей.Удалить(ЗаписьРегистра);
				КонецЦикла;
				НаборЗаписей.Записать(Истина);
				ЗафиксироватьТранзакцию();
			Исключение
				ОтменитьТранзакцию();
				ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке())
				+ НСтр("ru = ' (подробности см. в Журнале регистрации).'");
				ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ВидОперации = НСтр("ru = 'запись документа-основания ""%1"" в документ ""%2""'");
				ВидОперации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ВидОперации, Выборка.ДокументОснование, Выборка.ДокументПотомок);
				ОбработатьИсключениеПоЭДНаСервере(ВидОперации, ТекстОшибки, ТекстСообщения);
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ПроверитьСостояниеЭДО(ДокументИБ, СостояниеЭДО) Экспорт
	
	Если ТипЗнч(СостояниеЭДО) = Тип("ПеречислениеСсылка.СостоянияВерсийЭД") Тогда
		Состояния = Новый Массив;
		Состояния.Добавить(СостояниеЭДО);
	Иначе
		Состояния = СостояниеЭДО;
	КонецЕсли;
	
	СостояниеДО = СостояниеДокументооборота(ДокументИБ);
	
	Результат = Истина;
	Если Состояния.Найти(СостояниеДО) = Неопределено Тогда
		Результат = Ложь;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция СостояниеДокументооборота(ДокументИБ)
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументИБ,"СостояниеЭДО");
	
КонецФункции

Функция ВходящийТитул(СсылкаНаЭД) Экспорт
	
	Если Не ЭлектронныеДокументыСлужебный.ЭтоОтветныйТитул(СсылкаНаЭД) Тогда
		ПервыйТитул = Неопределено;
	Иначе
		ПервыйТитул = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаЭД, "ЭлектронныйДокументВладелец");
	КонецЕсли;
	
	Возврат ПервыйТитул;
	
КонецФункции

// Возвращает правила редактирования регламента строки профиля (или настройки) ЭДО.
// Параметры:
//  ВидЭД - ПеречислениеСсылка.ВидыЭД - вид электронного документа.
//  ВерсияФормата - строка - версия формата электронного документа.
//  СпособОбмена - СправочникСсылка.ПрофилиНастроекЭДО - профиль ЭДО.
// Возвращаемое значение:
//  Настройки - Структура с полями РедактироватьПодпись, РедактироватьИзвещение, РедактироватьОтветнуюПодпись.
//
Функция РегламентПрофиляЭДО(ВидЭД, ВерсияФормата, СпособОбменаЭДО) Экспорт
	
	Настройки = Новый Структура;
	Настройки.Вставить("РедактироватьПодпись", Ложь);
	Настройки.Вставить("РедактироватьИзвещение", Ложь);
	Настройки.Вставить("РедактироватьОтветнуюПодпись", Ложь);
	
	Если ВидЭД = Перечисления.ВидыЭД.АктИсполнитель
		И ВРег(ВерсияФормата) = ВРег("ФНС 5.01 (С 2016Г.)") Тогда
		
		Настройки.РедактироватьОтветнуюПодпись = Истина;
		
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.СчетФактура
		Или ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура Тогда
		
		Настройки.РедактироватьИзвещение = Истина;
		
	КонецЕсли;
	
	Если ЭтоПрямойОбмен(СпособОбменаЭДО) Тогда
		Настройки.РедактироватьПодпись = Истина;
	КонецЕсли;
	
	Возврат Настройки;
	
КонецФункции

// Обрабатывает исключительные ситуации по электронным документам.
//
// Параметры:
//  ВидОперации - строка - вид операции при которой возникло исключение.
//  ПодробныйТекстОшибки - строка - описание ошибки.
//  ТекстСообщения - строка - текст ошибки.
//  КодСобытия - Строка - код события, используется для стандартизации иерархии событий.
//                Может принимать значения: "ЭлектронноеВзаимодействие" - Общая подсистема, 
//                                          "ОбменСБанками" - Обмен с банками, 
//                                          "ОбменСКонтрагентами" - Обмен с контрагентами,
//                                          "ОбменССайтами" - Обмен с сайтами, 
//                                          "РегламентныеЗадания" - Регламентные задания, 
//                                          "БизнесСеть" - Бизнес-сеть,
//                                          "ИнтеграцияСЯндексКассой" - Интеграция с Яндекс.Кассой.
//  СсылкаНаОбъект - ДокументСсылка, СправочникСсылка - объект с которым связано данное событие.
//
Процедура ОбработатьОшибку(ВидОперации, ПодробныйТекстОшибки, ТекстСообщения = "", КодСобытия = "ОбменСКонтрагентами", СсылкаНаОбъект = Неопределено) Экспорт
	
	ЭтоПолноправныйПользователь = Пользователи.ЭтоПолноправныйПользователь( , , Ложь);
	
	Если ЭтоПолноправныйПользователь И ЗначениеЗаполнено(ПодробныйТекстОшибки) И НЕ ПустаяСтрока(ТекстСообщения)
		И ПодробныйТекстОшибки <> ТекстСообщения Тогда
		ТекстСообщения = ТекстСообщения + Символы.ПС
			+ НСтр("ru ='Подробности см. в журнале регистрации.'");
	КонецЕсли;

	Если НЕ ПустаяСтрока(ТекстСообщения) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, СсылкаНаОбъект);
	КонецЕсли;
	Если Прав(ВидОперации, 1) <> "." Тогда
		ВидОперации = ВидОперации + ".";
	КонецЕсли;
	ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Выполнение операции: %1
		|%2'"), ВидОперации, ПодробныйТекстОшибки);
	
	Если ЗначениеЗаполнено(СсылкаНаОбъект) Тогда
		ОбъектМетаданных = СсылкаНаОбъект.Метаданные();
	КонецЕсли;
	
	ЭлектронныеДокументыСлужебный.ВыполнитьЗаписьСобытияПоЭДВЖурналРегистрации(
		ТекстОшибки, КодСобытия, , ОбъектМетаданных, СсылкаНаОбъект);
	
КонецПроцедуры

// Вычисляет разность массивов. Разностью массивов А и В является массив, содержащий
// все элементы массива А не существующие в массиве В.
//
// Параметры:
//  Массив - Массив - массив элементов, из которого необходимо выполнить вычитание;
//  МассивВычитания - Массив - массив элементов, который будет вычитаться.
// 
// Возвращаемое значение:
//  Массив - дополнение массива В до А.
//
// Пример:
//	//А = [1, 3, 5, 7];
//	//В = [3, 7, 9];
//	Результат = РазностьМассивов(А, В);
//	//Результат = [1, 5];
//
Функция РазностьМассивов(Массив, МассивВычитания)
	
	Результат = Новый Массив;
	
	Для Каждого Элемент Из Массив Цикл
		
		Если МассивВычитания.Найти(Элемент) = Неопределено Тогда
			
			Результат.Добавить(Элемент);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Перезаполняет документ ИБ на основании актуального ЭД.
Функция ПерезаполнитьДокумент(Знач ПараметрыЗаполнения) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Отказ", Ложь);
	Результат.Вставить("НетПраваОбработкиЭД", Ложь);
	Результат.Вставить("МассивДокументов", Новый Массив);
	Результат.Вставить("СопоставитьНоменклатуру", Ложь);
	Результат.Вставить("ПараметрыСопоставления", Неопределено);
	
	Если НЕ ЕстьПравоОбработкиЭД(Истина) Тогда
		Результат.Отказ = Истина;
		Результат.НетПраваОбработкиЭД = Истина;
		Возврат Результат;
	КонецЕсли;
	
	МассивПроведенныхДокументов = МассивПроведенныхДокументов(
		ПараметрыЗаполнения.МассивСсылок);
		
	Шаблон = НСтр("ru = 'Перезаполнение документа %1.
						|Операция возможна только для непроведенных документов.'");
	Для Каждого Документ Из МассивПроведенныхДокументов Цикл
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон, Документ);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
	КонецЦикла;
	
	МассивСсылок = РазностьМассивов(ПараметрыЗаполнения.МассивСсылок, МассивПроведенныхДокументов);
	
	Если МассивСсылок.Количество() = 0 Тогда
		Результат.Отказ = Истина;
		Возврат Результат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыЗаполнения.ЭД) Тогда
		СоответствиеВладельцевИЭД = Новый Соответствие;
		Для Каждого ТекущийДокумент Из МассивСсылок Цикл
			СоответствиеВладельцевИЭД.Вставить(ТекущийДокумент, ПараметрыЗаполнения.ЭД);
		КонецЦикла;
	Иначе
		СоответствиеВладельцевИЭД = ПолучитьСоответствиеВладельцевИЭД(МассивСсылок);
	КонецЕсли;
	
	Если СоответствиеВладельцевИЭД.Количество() = 0 Тогда
		Для Каждого ТекущийДокумент Из МассивСсылок Цикл
			Шаблон = НСтр("ru = 'Электронный документ для %1 не найден'");
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон, ТекущийДокумент);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		КонецЦикла;
		
		Результат.Отказ = Истина;
		Возврат Результат;
	КонецЕсли;
	
	Для каждого ЭлементСоответствия Из СоответствиеВладельцевИЭД Цикл
		
		ДокументИБ = ЭлементСоответствия.Ключ;
		СсылкаНаЭД = ЭлементСоответствия.Значение;
		
		Если НЕ ЗначениеЗаполнено(ДокументИБ) ИЛИ НЕ ЗначениеЗаполнено(СсылкаНаЭД) Тогда
			Результат.Отказ = Истина;
			Возврат Результат;
		КонецЕсли;
		
		Если СоответствиеВладельцевИЭД.Количество() = 1 
			И ПараметрыЗаполнения.СопоставлятьНоменклатуруПередЗаполнениемДокумента
			И НЕ ПараметрыЗаполнения.СопоставлениеУжеВыполнено Тогда

			СтруктураПараметров = ПолучитьПараметрыФормыСопоставленияНоменклатуры(СсылкаНаЭД);
		
			Если ЗначениеЗаполнено(СтруктураПараметров) Тогда
				СтруктураПараметров.ПараметрыОткрытияФормы.Вставить("ВладелецЭД", ДокументИБ);
				
				Результат.СопоставитьНоменклатуру = Истина;
				Результат.ПараметрыСопоставления  = СтруктураПараметров;
				
				Возврат Результат;
			КонецЕсли;
		КонецЕсли;
		
		ОбъектМетаданных = "";
		ДокументЗагружен = Ложь;
		
		ЭлектронныеДокументыСлужебныйВызовСервера.ПерезаполнитьДокументыИБПоЭД(ДокументИБ, СсылкаНаЭД,
			ОбъектМетаданных, ДокументЗагружен, ПараметрыЗаполнения.СпособОбработки);
		
		Если ДокументЗагружен Тогда
				
			Результат.МассивДокументов.Добавить(ДокументИБ);
			
			// Форма сопоставления открывается только для одного выбранного документа.
			Если СоответствиеВладельцевИЭД.Количество() = 1 Тогда
				Если НЕ ПараметрыЗаполнения.СопоставлятьНоменклатуруПередЗаполнениемДокумента Тогда
					СтруктураПараметров = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьПараметрыФормыСопоставленияНоменклатуры(СсылкаНаЭД);
					Если ЗначениеЗаполнено(СтруктураПараметров) Тогда
						ДополнительныеПараметры = Новый Структура;
						ДополнительныеПараметры.Вставить("ОбъектМетаданных", ОбъектМетаданных);
						ДополнительныеПараметры.Вставить("КлючФормы", ДокументИБ);
						СтруктураПараметров.Вставить("ДополнительныеПараметры", ДополнительныеПараметры);
						
						Результат.СопоставитьНоменклатуру = Истина;
						Результат.ПараметрыСопоставления  = СтруктураПараметров;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Только для внутреннего использования
Функция ПолучитьИмяФормыЭД(СсылкаНаЭД) Экспорт
	
	ИмяФормы = "";
	
	Если ТипЗнч(СсылкаНаЭД) = Тип("СправочникСсылка.ЭДПрисоединенныеФайлы") Тогда
		ЭлектронныйДокумент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаЭД,"ВладелецФайла");
	Иначе
		ЭлектронныйДокумент = СсылкаНаЭД;
	КонецЕсли;
	
	Если ТипЗнч(ЭлектронныйДокумент) = Тип("ДокументСсылка.ЭлектронныйДокументВходящий") Тогда
		ИмяДокумента = "ЭлектронныйДокументВходящий";
	ИначеЕсли ТипЗнч(ЭлектронныйДокумент) = Тип("ДокументСсылка.ЭлектронныйДокументИсходящий") Тогда
		ИмяДокумента = "ЭлектронныйДокументИсходящий";
	Иначе
		Возврат "";
	КонецЕсли;
	
	ИмяФормы = "Документ." + ИмяДокумента + ".Форма.ФормаПросмотраЭД";
	
	Возврат ИмяФормы;
	
КонецФункции

Процедура ОбновитьВерсиюЭДВРегистре(СообщениеОбмена, СостояниеВерсииЭД, СводнаяИнформацияПоСтатусу) Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);

	ДействияСНашейСтороны = "";
	СводнаяИнформацияПоСтатусу.Свойство("СНашейСтороны",ДействияСНашейСтороны);
	
	ДействияСоСтороныДругогоУчастника = "";
	СводнаяИнформацияПоСтатусу.Свойство("СоСтороныДругогоУчастника",ДействияСоСтороныДругогоУчастника);
	
	ПредставлениеСостояния = "";
	СводнаяИнформацияПоСтатусу.Свойство("ПредставлениеСостояния",ПредставлениеСостояния);
	Если Не ЗначениеЗаполнено(ПредставлениеСостояния) Тогда
		ПредставлениеСостояния = Строка(СостояниеВерсииЭД);
	КонецЕсли;
	
	Комментарий = "";
	СводнаяИнформацияПоСтатусу.Свойство("Комментарий", Комментарий);
	
	Запрос = Новый Запрос;
	ТекстЗапроса = "ВЫБРАТЬ
	|	ЭлектронныйДокументИсходящийДокументыОснования.ДокументОснование КАК СсылкаНаОбъект,
	|	ЭлектронныйДокументИсходящийДокументыОснования.Ссылка КАК СообщениеОбмена
	|ПОМЕСТИТЬ втДокументыУчета
	|ИЗ
	|	Документ.ЭлектронныйДокументИсходящий.ДокументыОснования КАК ЭлектронныйДокументИсходящийДокументыОснования
	|ГДЕ
	|	ЭлектронныйДокументИсходящийДокументыОснования.Ссылка = &СообщениеОбмена
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЭлектронныйДокументВходящийДокументыОснования.ДокументОснование,
	|	ЭлектронныйДокументВходящийДокументыОснования.Ссылка
	|ИЗ
	|	Документ.ЭлектронныйДокументВходящий.ДокументыОснования КАК ЭлектронныйДокументВходящийДокументыОснования
	|ГДЕ
	|	ЭлектронныйДокументВходящийДокументыОснования.Ссылка = &СообщениеОбмена
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СсылкаНаОбъект,
	|	СообщениеОбмена
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СостоянияЭД.СсылкаНаОбъект
	|ИЗ
	|	РегистрСведений.СостоянияЭД КАК СостоянияЭД
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втДокументыУчета КАК втДокументыУчета
	|		ПО СостоянияЭД.СсылкаНаОбъект = втДокументыУчета.СсылкаНаОбъект
	|			И СостоянияЭД.ЭлектронныйДокумент = втДокументыУчета.СообщениеОбмена
	|ГДЕ
	|	СостоянияЭД.СостояниеВерсииЭД <> &СостояниеВерсииЭД
	|	ИЛИ СостоянияЭД.ПредставлениеСостояния <> &ПредставлениеСостояния";
	
	Запрос.УстановитьПараметр("СообщениеОбмена",СообщениеОбмена);
	Запрос.УстановитьПараметр("СостояниеВерсииЭД",СостояниеВерсииЭД);
	Запрос.УстановитьПараметр("ПредставлениеСостояния",ПредставлениеСостояния);
	
	Если ЗначениеЗаполнено(ДействияСНашейСтороны) Тогда
		ТекстЗапроса = ТекстЗапроса + "	ИЛИ СостоянияЭД.ДействияСНашейСтороны <> &ДействияСНашейСтороны ";
		Запрос.УстановитьПараметр("ДействияСНашейСтороны",ДействияСНашейСтороны);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДействияСоСтороныДругогоУчастника) Тогда
		ТекстЗапроса = ТекстЗапроса + "ИЛИ СостоянияЭД.ДействияСоСтороныДругогоУчастника <> &ДействияСоСтороныДругогоУчастника";
		Запрос.УстановитьПараметр("ДействияСоСтороныДругогоУчастника",ДействияСоСтороныДругогоУчастника);
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
				
		НаборЗаписей = РегистрыСведений.СостоянияЭД.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.СсылкаНаОбъект.Установить(Выборка.СсылкаНаОбъект,Истина);
		НаборЗаписей.Прочитать();
		
		Для Каждого ЗаписьНабора Из НаборЗаписей Цикл
			
			ЗаписьНабора.СостояниеВерсииЭД = СостояниеВерсииЭД;
			ЗаписьНабора.ПредставлениеСостояния = ПредставлениеСостояния;
			
			Если ЗначениеЗаполнено(ДействияСНашейСтороны) Тогда
				ЗаписьНабора.ДействияСНашейСтороны = ДействияСНашейСтороны;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ДействияСоСтороныДругогоУчастника) Тогда
				ЗаписьНабора.ДействияСоСтороныДругогоУчастника = ДействияСоСтороныДругогоУчастника;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Комментарий) Тогда
				ЗаписьНабора.Комментарий = Комментарий
			КонецЕсли;
			
		КонецЦикла;
		
		НаборЗаписей.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПараметрыАннулированияЭД(МассивЭД) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ВозвращаемоеЗначение = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЭДПрисоединенныеФайлы.Ссылка КАК ЭД,
	|	ПодчиненныеЭД.Ссылка КАК ПодчиненныйЭД,
	|	ЭДПрисоединенныеФайлы.ТипЭлементаВерсииЭД КАК ТипЭлементаВерсииЭД,
	|	ЭДПрисоединенныеФайлы.НаправлениеЭД КАК НаправлениеЭД,
	|	ЭДПрисоединенныеФайлы.СтатусЭД КАК СтатусЭД,
	|	ЭДПрисоединенныеФайлы.ВладелецФайла.ТребуетсяПодтверждение КАК ТребуетсяПодтверждение,
	|	ПодчиненныеЭД.СтатусЭД КАК СтатусПодчиненногоЭД
	|ИЗ
	|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЭДПрисоединенныеФайлы КАК ЭД_ПОА
	|		ПО (ЭД_ПОА.ТипЭлементаВерсииЭД = ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ПОА))
	|			И ЭДПрисоединенныеФайлы.Ссылка = ЭД_ПОА.ЭлектронныйДокументВладелец
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЭДПрисоединенныеФайлы КАК ПодчиненныеЭД
	|		ПО ЭДПрисоединенныеФайлы.Ссылка = ПодчиненныеЭД.ЭлектронныйДокументВладелец
	|			И (ПодчиненныеЭД.ТипЭлементаВерсииЭД В (&ТипыЭДОтветныхТитулов))
	|ГДЕ
	|	НЕ ЭДПрисоединенныеФайлы.СтатусЭД В (&СписокСтатусовИсключений)
	|	И НЕ ЭДПрисоединенныеФайлы.ВладелецФайла.ТипЭлементаВерсииЭД В (&СписокТиповИсключений)
	|	И НЕ ЭДПрисоединенныеФайлы.ПометкаУдаления
	|	И ЭДПрисоединенныеФайлы.Ссылка В(&МассивЭД)
	|	И ВЫБОР
	|			КОГДА ЭД_ПОА.Ссылка ЕСТЬ NULL
	|					ИЛИ ЭД_ПОА.Ссылка = &ЭДПрисоединенныеФайлыПустаяСсылка
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ
	|	И ЭДПрисоединенныеФайлы.ТипЭлементаВерсииЭД В(&ОсновныеТипыЭД)
	|ИТОГИ
	|	МАКСИМУМ(ПодчиненныйЭД),
	|	МАКСИМУМ(ТипЭлементаВерсииЭД),
	|	МАКСИМУМ(НаправлениеЭД),
	|	МАКСИМУМ(СтатусЭД)
	|ПО
	|	ЭД";
	
	Запрос.УстановитьПараметр("МассивЭД", МассивЭД);
	Запрос.УстановитьПараметр("ЭДПрисоединенныеФайлыПустаяСсылка", Справочники.ЭДПрисоединенныеФайлы.ПустаяСсылка());
	Запрос.УстановитьПараметр("НаправлениеВходящее", Перечисления.НаправленияЭД.Входящий);
	Запрос.УстановитьПараметр("ОсновныеТипыЭД", ЭлектронныеДокументыКлиентСервер.ОсновныеТипыЭД());
		
	СписокТиповИсключений = Новый Массив;
	СписокТиповИсключений.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ЭСФ);
	Запрос.УстановитьПараметр("СписокТиповИсключений", СписокТиповИсключений);
	
	МассивСтатусовИсключений = Новый Массив;
	МассивСтатусовИсключений.Добавить(Перечисления.СтатусыЭД.СформированоПредложениеОбАннулировании);
	МассивСтатусовИсключений.Добавить(Перечисления.СтатусыЭД.ПолученоПредложениеОбАннулировании);
	МассивСтатусовИсключений.Добавить(Перечисления.СтатусыЭД.Аннулирован);
	МассивСтатусовИсключений.Добавить(Перечисления.СтатусыЭД.Отклонен);
	МассивСтатусовИсключений.Добавить(Перечисления.СтатусыЭД.ОтклоненПолучателем);
	Запрос.УстановитьПараметр("СписокСтатусовИсключений", МассивСтатусовИсключений);
	
	ТипыЭДОтветныхТитулов = Новый Массив;
	ТипыЭДОтветныхТитулов.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ИнформацияПокупателяУПД);
	ТипыЭДОтветныхТитулов.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ИнформацияПокупателяУКД);
	ТипыЭДОтветныхТитулов.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ТОРГ12Покупатель);
	ТипыЭДОтветныхТитулов.Добавить(Перечисления.ТипыЭлементовВерсииЭД.АктЗаказчик);
	ТипыЭДОтветныхТитулов.Добавить(Перечисления.ТипыЭлементовВерсииЭД.СоглашениеОбИзмененииСтоимостиПолучатель);
	Запрос.УстановитьПараметр("ТипыЭДОтветныхТитулов", ТипыЭДОтветныхТитулов);
	
	ВыборкаЭД = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаЭД.Следующий() Цикл

		ОбрабатываемыйЭД = ВыборкаЭД.ЭД;
		СтатусЭД = ВыборкаЭД.СтатусЭД;
		Если ВыборкаЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий
			И ЗначениеЗаполнено(ВыборкаЭД.ПодчиненныйЭД) Тогда
				ВыборкаПодчиненныхЭД = ВыборкаЭД.Выбрать();
				ВыборкаПодчиненныхЭД.Следующий();
				
				ОбрабатываемыйЭД = ВыборкаПодчиненныхЭД.ПодчиненныйЭД;
				СтатусЭД = ВыборкаПодчиненныхЭД.СтатусПодчиненногоЭД;
		КонецЕсли;
		
		НастройкиОбмена = ЭлектронныеДокументыСлужебный.НастройкиОбменаЭД(ОбрабатываемыйЭД);
		МассивСтатусов = ЭлектронныеДокументыСлужебный.ВернутьМассивСтатусовЭД(НастройкиОбмена);
		
		Если МассивСтатусов.Количество() = 0 Тогда
			Возврат ВозвращаемоеЗначение;
		КонецЕсли;
		
		ИндексТекущегоСтатуса = МассивСтатусов.Найти(СтатусЭД);
		ИндексСтатусаПереданОператору = МассивСтатусов.Найти(Перечисления.СтатусыЭД.ПереданОператору);
		Если (ИндексТекущегоСтатуса <> Неопределено И ИндексСтатусаПереданОператору <> Неопределено
			И ИндексТекущегоСтатуса >= ИндексСтатусаПереданОператору)
			ИЛИ ИндексТекущегоСтатуса = МассивСтатусов.ВГраница() Тогда
			
			ВозвращаемоеЗначение.Добавить(НовыеПараметрыОтклоненияАннулирования(
				ВыборкаЭД.ЭД, Истина, ЭтоСчетФактура(ВыборкаЭД.ТипЭлементаВерсииЭД), ВыборкаЭД.ТребуетсяПодтверждение));
		КонецЕсли;
	КонецЦикла;
	
	Возврат ВозвращаемоеЗначение;

КонецФункции
 
Функция ЭтоИсходящийДокументРеализации(СвойстваЭД)
	
	Результат = Ложь;
	
	МассивРТУ = ВидыЭлектронныхДокументовРТУ();
	
	Если Не МассивРТУ.Найти(СвойстваЭД.ВидЭД) = Неопределено
		И СвойстваЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий Тогда
		
		Результат = Истина;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает признак принятия условий использования сервиса в разрезе профилей настроек ЭДО.
//
// Параметры:
//  НаборПрофилейНастроекЭДО - СправочникСсылка.ПрофилиНастроекЭДО, Массив - профили, для которых нужно получить признак.
//
// Возвращаемое значение:
//  Соответствие - ключ: профиль настроек ЭДО, значение: признак принятия условий использования.
//
Функция ПризнакПринятияУсловийИспользования(Знач НаборПрофилейНастроекЭДО = Неопределено) Экспорт
	
	Возврат ЭлектронныеДокументыСлужебный.ПризнакПринятияУсловийИспользования(НаборПрофилейНастроекЭДО);
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПроверкаИспользованияУниверсальныхДокументов

// Получает признак использования универсального передаточного документа между участниками ЭДО.
//
// Параметры:
//   Организация - Ссылка - элемент справочника Организации.
//   Контрагент - Ссылка - элемент справочника Контрагенты;
//   ДоговорКонтрагента - Ссылка - элемент справочника ДоговораКонтрагентов.
//
// Возвращаемое значение:
//   Результат - Булево - признак использования универсального передаточного документа.
//
Функция ИспользованиеУниверсальногоПередаточногоДокумента(Организация, Контрагент, ДоговорКонтрагента = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = Ложь;
	Если ЗначениеЗаполнено(Контрагент) И ЗначениеЗаполнено(Организация) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	НастройкаЭДО.ИспользоватьУПД КАК ИспользоватьУПД,
		|	ВЫБОР
		|		КОГДА НастройкаЭДО.ДоговорКонтрагента = &ДоговорКонтрагента
		|			ТОГДА 0
		|		ИНАЧЕ 1
		|	КОНЕЦ КАК Порядок
		|ИЗ
		|	Справочник.СоглашенияОбИспользованииЭД КАК НастройкаЭДО
		|ГДЕ
		|	НастройкаЭДО.Контрагент = &Контрагент
		|	И НастройкаЭДО.Организация = &Организация
		|	И НЕ НастройкаЭДО.ПометкаУдаления
		|	И НастройкаЭДО.СтатусПодключения = ЗНАЧЕНИЕ(Перечисление.СтатусыУчастниковОбменаЭД.Присоединен)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Порядок";
		
		Запрос.УстановитьПараметр("Контрагент",         Контрагент);
		Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорКонтрагента);
		Запрос.УстановитьПараметр("Организация",        Организация);
		
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			
			Результат = Выборка.ИспользоватьУПД;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Получает признак использования универсального корректировочного документа между участниками ЭДО.
//
// Параметры:
//   Организация - Ссылка - элемент справочника Организации.
//   Контрагент - Ссылка - элемент справочника Контрагенты;
//   ДоговорКонтрагента - Ссылка - элемент справочника ДоговораКонтрагентов.
//
// Возвращаемое значение:
//   Результат - Булево - признак использования универсального корректировочного документа.
//
Функция ИспользованиеУниверсальногоКорректировочногоДокумента(Организация, Контрагент, ДоговорКонтрагента = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = Ложь;
	Если ЗначениеЗаполнено(Контрагент) И ЗначениеЗаполнено(Организация) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	НастройкаЭДО.ИспользоватьУКД КАК ИспользоватьУКД,
		|	ВЫБОР
		|		КОГДА НастройкаЭДО.ДоговорКонтрагента = &ДоговорКонтрагента
		|			ТОГДА 0
		|		ИНАЧЕ 1
		|	КОНЕЦ КАК Порядок
		|ИЗ
		|	Справочник.СоглашенияОбИспользованииЭД КАК НастройкаЭДО
		|ГДЕ
		|	НастройкаЭДО.Контрагент = &Контрагент
		|	И НастройкаЭДО.Организация = &Организация
		|	И НЕ НастройкаЭДО.ПометкаУдаления
		|	И НастройкаЭДО.СтатусПодключения = ЗНАЧЕНИЕ(Перечисление.СтатусыУчастниковОбменаЭД.Присоединен)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Порядок";
		
		Запрос.УстановитьПараметр("Контрагент",         Контрагент);
		Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорКонтрагента);
		Запрос.УстановитьПараметр("Организация",        Организация);
		
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			
			Результат = Выборка.ИспользоватьУКД;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ЭтоДокументРегламентаСчетаФактуры(ТипЭлементаВерсииЭД) Экспорт
		Возврат ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.СЧФУПД
		ИЛИ ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.СЧФДОПУПД
		ИЛИ ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДОПУПД
		ИЛИ ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.КСЧФУКД
		ИЛИ ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.КСЧФДИСУКД
		ИЛИ ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДИСУКД;
	
КонецФункции