
Функция РассчитатьОстаткиДляСтроки(Счет, ПараметрыРасчета, Данные) Экспорт
	
	ОстаткиДС = Данные.ОстаткиДС;
	ПланируемыеДоходы = Данные.ПланируемыеДоходы;
	РаспределениеЗаявок = Данные.РаспределениеЗаявок;
	
	ИсходныйОстаток = 0;
	СтрокаСчета = ОстаткиДС.Найти(Счет, "БанковскийСчет");
	Если СтрокаСчета <> Неопределено Тогда
		ИсходныйОстаток = СтрокаСчета.ОстатокНаСчете;
	КонецЕсли;
	
	ОстатокНаСчете = ИсходныйОстаток;
	МинимальныйОстаток = ОстатокНаСчете;
	
	Для Сч = 1 по ПараметрыРасчета.ДнейПланирования Цикл
		
		Рабочая_Дата = ПараметрыРасчета.ПланироватьСДаты + (Сч - 1) * 86400;
		
		СтрокиДоходов = ПланируемыеДоходы.НайтиСтроки(Новый Структура("БанковскийСчет, Дата", Счет, Рабочая_Дата - 86400));
		Доход = ИтогПоСтрокам(СтрокиДоходов, "ДоходПлан");
		
		СтрокиРасходов = РаспределениеЗаявок.НайтиСтроки(Новый Структура("БанковскийСчет, ДатаПлатежа", Счет, Рабочая_Дата));
		Расход = ИтогПоСтрокам(СтрокиРасходов, "Распределено");
		
		ОстатокНаСчете = ОстатокНаСчете + Доход - Расход;
		МинимальныйОстаток = Макс(Мин(МинимальныйОстаток, ОстатокНаСчете), 0);
		
	КонецЦикла;
	
	СтрокаОстатков = Новый Структура("ОстатокНаСчете, ДоступныеПоступления");
	СтрокаОстатков.ОстатокНаСчете = МинимальныйОстаток;
	СтрокаОстатков.ДоступныеПоступления = ОстатокНаСчете - МинимальныйОстаток;
	
	Возврат СтрокаОстатков;
	
КонецФункции

Функция ИтогПоСтрокам(НайденныеСтроки, ИмяКолонки) Экспорт
	
	Результат = 0;
	Для Каждого НайденнаяСтрока из НайденныеСтроки Цикл
		Значение = НайденнаяСтрока[ИмяКолонки];
		Если ТипЗнч(Значение) <> Тип("Число") Тогда
			Продолжить;
		КонецЕсли;
		Результат = Результат + Значение;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ПодобратьДатуПлатежаПоСчету(Данные, Объект, Счет, Сумма) Экспорт
	
	РаспределениеЗаявок = Данные.РаспределениеЗаявок;
	ОстаткиДС = Данные.ОстаткиДС;
	ПланируемыеДоходы = Данные.ПланируемыеДоходы;
	
	ОстатокНаСчете = 0;
	СтрокаОстатков = ОстаткиДС.Найти(Счет, "БанковскийСчет");
	Если СтрокаОстатков <> Неопределено Тогда
		ОстатокНаСчете = СтрокаОстатков.ОстатокНаСчете;
	КонецЕсли;
	
	Для Сч = 1 по Объект.ДнейПланирования Цикл
		
		Рабочая_Дата = Объект.ПланироватьСДаты + (Сч - 1) * 86400;
		СтрокиДоходов = ПланируемыеДоходы.НайтиСтроки(Новый Структура("БанковскийСчет, Дата", Счет, Рабочая_Дата - 86400));
		
		Доход = Казначейство275Сервер.ИтогПоСтрокам(СтрокиДоходов, "ДоходПлан");
		СтрокиРасходов = РаспределениеЗаявок.НайтиСтроки(Новый Структура("БанковскийСчет, ДатаПлатежа", Счет, Рабочая_Дата));
		
		Расход = Казначейство275Сервер.ИтогПоСтрокам(СтрокиРасходов, "Распределено");
		ОстатокНаСчете = ОстатокНаСчете + Доход - Расход;
		
		Если ОстатокНаСчете >= Сумма Тогда
			ДатаПлатежа = Рабочая_Дата;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ДатаПлатежа;
	
КонецФункции

Функция ПланируемоеЗначениеЛимита(ОстаткиЛимитовПоКонтрактам, БанковскийСчет, СтатьяКалькуляции, СтрокаЛимита = Неопределено)
	
	СтрокаЛимита = Неопределено;
	
	СтрокиЛимита = ОстаткиЛимитовПоКонтрактам.НайтиСтроки(Новый Структура("БанковскийСчет, СтатьяКалькуляции", 
																	БанковскийСчет, СтатьяКалькуляции));
	Если Не СтрокиЛимита.Количество() Тогда
		Возврат 0;
	КонецЕсли;
	СтрокаЛимита = СтрокиЛимита[0];
	Если СтрокаЛимита.КоличествоМесяцевКонтракта < 1 Тогда
		//Контракт еще не начался
		Возврат 0;
	КонецЕсли;
	
	ДолжноБытьНачислено = СтрокаЛимита.СуммаПлан / СтрокаЛимита.ВсегоМесяцев * СтрокаЛимита.КоличествоМесяцевКонтракта;
	Возврат ДолжноБытьНачислено;
	
КонецФункции

Функция РассчитатьСреднийПроцентВыполнения(СуммаКРаспределению, ТаблицаОстатков, СтатьяКалькуляции, ОстаткиЛимитовПоКонтрактам)
	Перем СтрокаЛимита;
	
	ИтогоДолжноБыть = 0;
	ИтогоФакт = 0;
	Для Каждого СтрокаСчета из ТаблицаОстатков Цикл
		ДолжноБытьНачислено = ПланируемоеЗначениеЛимита(ОстаткиЛимитовПоКонтрактам, СтрокаСчета.БанковскийСчет, СтатьяКалькуляции, СтрокаЛимита);
		ИтогоДолжноБыть = ИтогоДолжноБыть + ДолжноБытьНачислено;
		ИтогоФакт = ИтогоФакт + ?(СтрокаЛимита <> Неопределено, СтрокаЛимита.СуммаФакт + СтрокаЛимита.СуммаФактВЗаявках, 0);
	КонецЦикла;
	
	Если ИтогоДолжноБыть <> 0 Тогда
		СреднийПроцентВыполнения = 100 * (СуммаКРаспределению + ИтогоФакт) / ИтогоДолжноБыть;
	Иначе
		СреднийПроцентВыполнения = 100;
	КонецЕсли;
	
	Возврат СреднийПроцентВыполнения;
	
КонецФункции

Функция СреднееЗначение(ТаблицаОстатков, СтатьяКалькуляции, ОстаткиЛимитовПоКонтрактам)
	Перем ВСреднем;
	
	ИтогоДолжноБыть = 0;
	Для Каждого СтрокаСчета из ТаблицаОстатков Цикл
		ДолжноБытьНачислено = ПланируемоеЗначениеЛимита(ОстаткиЛимитовПоКонтрактам, СтрокаСчета.БанковскийСчет, СтатьяКалькуляции);
		ИтогоДолжноБыть = ИтогоДолжноБыть + ДолжноБытьНачислено;
	КонецЦикла;
	
	Если Не ИтогоДолжноБыть Тогда
		Всего = ТаблицаОстатков.Итог("РаспределеноВТекущемПодборе");
		Для Каждого СтрокаОстатков из ТаблицаОстатков Цикл
			СтруктураПоиска = Новый Структура("БанковскийСчет, СтатьяКалькуляции", СтрокаОстатков.БанковскийСчет, СтатьяКалькуляции);
			НайденныеСтроки = ОстаткиЛимитовПоКонтрактам.НайтиСтроки(СтруктураПоиска);
			Всего = Всего + ИтогПоСтрокам(НайденныеСтроки, "СуммаФакт") + ИтогПоСтрокам(НайденныеСтроки, "СуммаФактВЗаявках");
		КонецЦикла;
		ВСреднем = Всего / ТаблицаОстатков.Количество();
	КонецЕсли;
	
	Возврат ВСреднем;
	
КонецФункции

Функция РассчитатьЗначениеЦелевойФункции(СреднийПроцентВыполнения, ТаблицаОстатков, СтатьяКалькуляции, ОстаткиЛимитовПоКонтрактам, СреднееЗначение)
	Перем СтрокаЛимита;

	МодульОтклонения = 0;
	Для Каждого СтрокаСчета из ТаблицаОстатков Цикл
		
		СуммаФакт = 0;
		ДолжноБытьНачислено = ПланируемоеЗначениеЛимита(ОстаткиЛимитовПоКонтрактам, СтрокаСчета.БанковскийСчет, СтатьяКалькуляции, СтрокаЛимита);
		Если СтрокаЛимита <> Неопределено Тогда
			СуммаФакт = СтрокаЛимита.СуммаФакт + СтрокаЛимита.СуммаФактВЗаявках;
		КонецЕсли;
		Если СреднееЗначение <> Неопределено Тогда
			ДолжноБытьНачислено = СреднееЗначение;
		КонецЕсли;
		
		Если Не ДолжноБытьНачислено Тогда
			ПроцентВыполнения = 0;
		Иначе
			ПроцентВыполнения = 100 * (СтрокаСчета.РаспределеноВТекущемПодборе + СуммаФакт) / ДолжноБытьНачислено;
		КонецЕсли;
		СтрокаСчета.ПроцентВыполнения = ПроцентВыполнения;
		ПроцентОтклонения = СтрокаСчета.ПроцентВыполнения - СреднийПроцентВыполнения;
		МодульОтклонения = МодульОтклонения + Макс(ПроцентОтклонения, -ПроцентОтклонения);
		
	КонецЦикла;
	
	Возврат МодульОтклонения;
	
КонецФункции

Функция ДоступноОстатковДляРаспределения(ТаблицаОстатков, СчетчикУровня, ОграничениеСверху)
	
	Доступно = 0;
	Если ОграничениеСверху Тогда
		Для Сч = СчетчикУровня + 1 По ТаблицаОстатков.Количество() - 1 Цикл
			Доступно = Доступно + (ТаблицаОстатков[Сч].МаксимумДоступно - ТаблицаОстатков[Сч].РаспределеноВТекущемПодборе);
		КонецЦикла;
	Иначе
		Для Сч = СчетчикУровня + 1 По ТаблицаОстатков.Количество() - 1 Цикл
			Доступно = Доступно + ТаблицаОстатков[Сч].РаспределеноВТекущемПодборе;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Доступно;
	
КонецФункции

Функция РаспределитьСуммуПоКонтрактамДихотомией(ТаблицаОстатков, СтатьяКалькуляции,
						ОстаткиЛимитовПоКонтрактам, СреднийПроцентВыполнения, ПредыдущееЛучшееРешение, СреднееЗначение, СчетчикУровня = 0)
	
	Перем ПредСуммаДобавления, ПредСуммаУменьшения;
	
	
	Если СчетчикУровня >= ТаблицаОстатков.Количество() - 1 Тогда
		НовоеРешение = Новый Структура("ТаблицаОстатков", ТаблицаОстатков.Скопировать());
		НовоеРешение.Вставить("ЗначениеФункции", РассчитатьЗначениеЦелевойФункции(СреднийПроцентВыполнения, ТаблицаОстатков, 
																				СтатьяКалькуляции, ОстаткиЛимитовПоКонтрактам, СреднееЗначение));
		Возврат НовоеРешение;
	КонецЕсли;
	
	СтрокаОбработки = ТаблицаОстатков[СчетчикУровня];
	ТекущееЛучшееРешение = ПредыдущееЛучшееРешение;
	

	Если СреднееЗначение <> Неопределено Тогда
		Лимит = СреднееЗначение;
	Иначе
		Лимит = ПланируемоеЗначениеЛимита(ОстаткиЛимитовПоКонтрактам, СтрокаОбработки.БанковскийСчет, СтатьяКалькуляции);
	КонецЕсли;
	
	Граница = Лимит * СреднийПроцентВыполнения / 100;
	
	Пока Истина Цикл
		
		СуммаДобавления = 0;
		СуммаУменьшения = 0;
		
		//Пробуем уменьшить сумму отклонения
		Если СтрокаОбработки.ПроцентВыполнения > СреднийПроцентВыполнения Тогда
			СуммаУменьшения = (СтрокаОбработки.РаспределеноВТекущемПодборе - Граница) / 2;
		Иначе
			СуммаДобавления = (Граница - СтрокаОбработки.РаспределеноВТекущемПодборе) / 2;
		КонецЕсли;
		
		Если Не СуммаУменьшения И Не СуммаДобавления Тогда
			//Алгоритм закончен
			Возврат ТекущееЛучшееРешение;
		КонецЕсли;
		
		СуммаДобавления = Окр(СуммаДобавления, 4);
		СуммаУменьшения = Окр(СуммаУменьшения, 4);
		
		Если (СуммаДобавления = ПредСуммаДобавления ИЛИ -СуммаДобавления = ПредСуммаДобавления)
			И (СуммаУменьшения = ПредСуммаУменьшения ИЛИ -СуммаУменьшения = ПредСуммаУменьшения) Тогда
			//Алгоритм закончен
			Возврат ТекущееЛучшееРешение;
		КонецЕсли;
		
		ПредСуммаДобавления = СуммаДобавления;
		ПредСуммаУменьшения = СуммаУменьшения;
		
		СуммаДобавления = Окр(СуммаДобавления, 2);
		СуммаУменьшения = Окр(СуммаУменьшения, 2);
		
		Если СуммаДобавления > 0 Тогда
			Если СуммаДобавления > ДоступноОстатковДляРаспределения(ТаблицаОстатков, СчетчикУровня, Ложь) Тогда
				Граница = Граница - СуммаДобавления / 2;
				Продолжить;
			КонецЕсли;
		ИначеЕсли СуммаУменьшения > 0 Тогда
			Если СуммаУменьшения > ДоступноОстатковДляРаспределения(ТаблицаОстатков, СчетчикУровня, Истина) Тогда
				Граница = Граница + СуммаУменьшения / 2;
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		СтрокаОбработки.РаспределеноВТекущемПодборе = СтрокаОбработки.РаспределеноВТекущемПодборе + СуммаДобавления - СуммаУменьшения;
		
		//Распределим СуммуУменьшения по последующим строкам
		Для Сч = СчетчикУровня + 1 По ТаблицаОстатков.Количество() - 1 Цикл
			СтрокаРаспределения = ТаблицаОстатков[Сч];
			
			ОтнестиНаСтроку = Мин(СуммаУменьшения, СтрокаРаспределения.МаксимумДоступно - СтрокаРаспределения.РаспределеноВТекущемПодборе);
			СтрокаРаспределения.РаспределеноВТекущемПодборе = СтрокаРаспределения.РаспределеноВТекущемПодборе + ОтнестиНаСтроку;
			СуммаУменьшения = СуммаУменьшения - ОтнестиНаСтроку;
			
			ОтнестиНаСтроку = Мин(СуммаДобавления, СтрокаРаспределения.РаспределеноВТекущемПодборе);
			СтрокаРаспределения.РаспределеноВТекущемПодборе = СтрокаРаспределения.РаспределеноВТекущемПодборе - ОтнестиНаСтроку;
			СуммаДобавления = СуммаДобавления - ОтнестиНаСтроку;
			
			Если Не СуммаДобавления И Не СуммаУменьшения Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		НовоеЗначениеОтклонения = РаспределитьСуммуПоКонтрактамДихотомией(ТаблицаОстатков, СтатьяКалькуляции, ОстаткиЛимитовПоКонтрактам, 
														СреднийПроцентВыполнения, ПредыдущееЛучшееРешение, СреднееЗначение, СчетчикУровня + 1);
		
		Если НовоеЗначениеОтклонения.ЗначениеФункции < ТекущееЛучшееРешение.ЗначениеФункции Тогда
			ТекущееЛучшееРешение = НовоеЗначениеОтклонения;
		КонецЕсли;
		
	КонецЦикла;
	
КонецФункции

Функция АктуальныйОстатокНаСчете(Данные, ПараметрыРаспределения, БанковскийСчет)
	
	ОстаткиДляСтроки = РассчитатьОстаткиДляСтроки(БанковскийСчет, ПараметрыРаспределения, Данные);
	
	ОстатокНаСчете = ОстаткиДляСтроки.ОстатокНаСчете;
	
	Если ПараметрыРаспределения.ИспользоватьДоступныеПоступления Тогда
		ОстатокНаСчете = ОстатокНаСчете + ОстаткиДляСтроки.ДоступныеПоступления;
	КонецЕсли;
	
	Возврат ОстатокНаСчете;
	
КонецФункции

Процедура СделатьЗаписьЭтапаРаспределения(РезультатРаспределения, ЭтоОшибка, Заявка, Этап, БанковскийСчет, Сумма, МинимальнаяДата, Комментарий)
	
	НоваяСтрока = РезультатРаспределения.Добавить();
	НоваяСтрока.Заявка = Заявка;
	НоваяСтрока.ЭтоОшибка = ЭтоОшибка;
	НоваяСтрока.Этап = Этап;
	НоваяСтрока.БанковскийСчет = БанковскийСчет;
	НоваяСтрока.Сумма = Сумма;
	НоваяСтрока.МинимальнаяДата = МинимальнаяДата;
	НоваяСтрока.Комментарий = Комментарий;
	
КонецПроцедуры

Процедура УменьшитьОстаткиЛимитовНаРаспределенныеЗначения(ЗаявкаОбъект, ОстаткиЛимитовПоКонтрактам, Финансирование)
	
	Для Каждого СтрокаФинансирования из Финансирование Цикл
		
		СтруктураПоиска = Новый Структура("БанковскийСчет, КонтрактСЗаказчиком, СтатьяКалькуляции", 
									СтрокаФинансирования.БанковскийСчет, СтрокаФинансирования.КонтрактСЗаказчиком, ЗаявкаОбъект.СтатьяКалькуляции);
		НайденныеСтроки = ОстаткиЛимитовПоКонтрактам.НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтроки.Количество() Тогда
			НайденнаяСтрока = НайденныеСтроки[0];
		Иначе
			НайденнаяСтрока = ОстаткиЛимитовПоКонтрактам.Добавить();
			ЗаполнитьЗначенияСвойств(НайденнаяСтрока, СтруктураПоиска);
			НайденнаяСтрока.СуммаПлан = 0;
			НайденнаяСтрока.СуммаФакт = 0;
			НайденнаяСтрока.СуммаФактВЗаявках = 0;
			НайденнаяСтрока.ДоступныйОстаток = 0;
			СтрокаКонтракта = ОстаткиЛимитовПоКонтрактам.Найти(НайденнаяСтрока.КонтрактСЗаказчиком);
			НайденнаяСтрока.КоличествоМесяцевКонтракта = СтрокаКонтракта.КоличествоМесяцевКонтракта;
			НайденнаяСтрока.ВсегоМесяцев = СтрокаКонтракта.ВсегоМесяцев;
		КонецЕсли;
		
		НайденнаяСтрока.СуммаФактВЗаявках = НайденнаяСтрока.СуммаФактВЗаявках + СтрокаФинансирования.Сумма;
		НайденнаяСтрока.ДоступныйОстаток = НайденнаяСтрока.ДоступныйОстаток - СтрокаФинансирования.Сумма;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура РассчитатьРаспределениеЗаявкиПоСчетам(ЗаявкаОбъект, ПараметрыРаспределения, Данные, РезультатРаспределения)
	
	СоответствиеКонтрактовИСчетов = Данные.СоответствиеКонтрактовИСчетов;
	ОстаткиДС 					= Данные.ОстаткиДС;
	РаспределениеЗаявок 		= Данные.РаспределениеЗаявок;
	ОстаткиПоСтатьямКалькуляции = Данные.ОстаткиПоСтатьямКалькуляции;
	ПланируемыеДоходы 			= Данные.ПланируемыеДоходы;
	ДоступныеСчетаПоЗаявкам 	= Данные.ДоступныеСчетаПоЗаявкам;
	ДоступныеКонтрактыПоЗаявкам = Данные.ДоступныеКонтрактыПоЗаявкам;
	ОстаткиЛимитовПоКонтрактам 	= Данные.ОстаткиЛимитовПоКонтрактам;
	ПланируемыеКонтрактыКОплате = Данные.ПланируемыеКонтрактыКОплате;
	
	ОстаткиЛимитовПоКонтрактам = ОстаткиЛимитовПоКонтрактам.Скопировать();
	
	СтруктураПоиска = Новый Структура("Заявка", ЗаявкаОбъект.Ссылка);
	СтруктураПоиска.Вставить("СобственныйСчет", Ложь);
	
	Счета = Данные.ДоступныеСчетаПоЗаявкам.НайтиСтроки(СтруктураПоиска);
	ТаблицаОстатков = Новый ТаблицаЗначений;
	ТаблицаОстатков.Колонки.Добавить("БанковскийСчет");
	ТаблицаОстатков.Колонки.Добавить("СобственныйСчет");
	ТаблицаОстатков.Колонки.Добавить("ОстатокНаСчете", ОбщегоНазначения275Сервер.ОписаниеТипаЧисло(15, 2));
	ТаблицаОстатков.Колонки.Добавить("МаксимумДоступно", ОбщегоНазначения275Сервер.ОписаниеТипаЧисло(15, 2));
	ТаблицаОстатков.Колонки.Добавить("РаспределеноВТекущемПодборе", ОбщегоНазначения275Сервер.ОписаниеТипаЧисло(15, 2));
	ТаблицаОстатков.Колонки.Добавить("ПроцентВыполнения", ОбщегоНазначения275Сервер.ОписаниеТипаЧисло(15, 7));
	
	Для Каждого ПодходящийСчет из Счета Цикл
		
		НоваяСтрока = ТаблицаОстатков.Добавить();
		НоваяСтрока.БанковскийСчет = ПодходящийСчет.БанковскийСчет;
		НоваяСтрока.СобственныйСчет = ПодходящийСчет.СобственныйСчет;
		
		НоваяСтрока.ОстатокНаСчете = АктуальныйОстатокНаСчете(Данные, ПараметрыРаспределения, ПодходящийСчет.БанковскийСчет);
		
	КонецЦикла;
	
	СуммаКРаспределению = Макс(ЗаявкаОбъект.СуммаДокумента - ЗаявкаОбъект.РазмещениеЗаявки.Итог("СуммаПлатежа"), 0);
	Если Не СуммаКРаспределению Тогда
		СделатьЗаписьЭтапаРаспределения(
			РезультатРаспределения, Ложь, ЗаявкаОбъект.Ссылка, 
			НСтр("ru = 'Предварительная проверка'"), 
			"", "", "", 
			НСтр("ru = 'Все суммы по заявке распределены'"));
		Возврат;
	КонецЕсли;
	
	Финансирование = ЗаявкаОбъект.РазмещениеЗаявки.Выгрузить();
	Финансирование.Колонки.МестоРазмещения.Имя = "БанковскийСчет";
	Финансирование.Колонки.СуммаПлатежа.Имя    = "Сумма";
	
	НайденныеСтроки = ПланируемыеКонтрактыКОплате.НайтиСтроки(Новый Структура("Заявка", ЗаявкаОбъект.Ссылка));
	
	НедостаточноСредств = Ложь;
	//1. Расставим планируемые оплаты
	Для Каждого НайденнаяСтрока из НайденныеСтроки Цикл
		
		СтрокаОстатков = ТаблицаОстатков.Найти(НайденнаяСтрока.БанковскийСчет, "БанковскийСчет");
		Если СтрокаОстатков <> Неопределено Тогда
			ОстатокНаСчете = СтрокаОстатков.ОстатокНаСчете;
			Если ОстатокНаСчете < НайденнаяСтрока.Сумма Тогда
				НедостаточноСредств = Истина;
				Комментарий = НСтр("ru = 'Недостаточно средств. Доступно на счете %1, требуется %2, не хватает %3'");
				
				СделатьЗаписьЭтапаРаспределения(
				РезультатРаспределения, Истина, ЗаявкаОбъект.Ссылка, 
				НСтр("ru = 'Распределение сумм, запланированных на закладке ""Контракты""'"), 
				НайденнаяСтрока.БанковскийСчет, "", "", 
				СтрШаблон(Комментарий, ОстатокНаСчете, НайденнаяСтрока.Сумма, (НайденнаяСтрока.Сумма - ОстатокНаСчете)));
				
			КонецЕсли;
			
			НоваяСтрока = Финансирование.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, НайденнаяСтрока);
			СтрокаОстатков.ОстатокНаСчете = СтрокаОстатков.ОстатокНаСчете - НоваяСтрока.Сумма;
			НоваяСтрока.ДатаПлатежа = ПодобратьДатуПлатежаПоСчету(Данные, ПараметрыРаспределения, НоваяСтрока.БанковскийСчет, НоваяСтрока.Сумма);
			
			Если Не НедостаточноСредств Тогда
				СделатьЗаписьЭтапаРаспределения(
				РезультатРаспределения, Ложь, ЗаявкаОбъект.Ссылка, 
				НСтр("ru = 'Распределение сумм, запланированных на закладке ""Контракты""'"), 
				НоваяСтрока.БанковскийСчет, НоваяСтрока.Сумма, НоваяСтрока.ДатаПлатежа, 
				"");
			КонецЕсли;
		КонецЕсли;	
	КонецЦикла;
	
	УменьшитьОстаткиЛимитовНаРаспределенныеЗначения(ЗаявкаОбъект, ОстаткиЛимитовПоКонтрактам, Финансирование);
	
	ОстатокКРаспределению = ЗаявкаОбъект.СуммаОплатыЗаСчетСобственныхСредств;
	
	Если ОстатокКРаспределению Тогда
		
		//Что бы сохранить порядок списания соответствующий порядку в АРМ - обходим таблицу ОстаткиДС
		НайденныеСтроки = ОстаткиДС.НайтиСтроки(Новый Структура("СобственныйСчет", Истина));
		
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			СтруктураПоиска = Новый Структура("Заявка, БанковскийСчет", ЗаявкаОбъект.Ссылка, НайденнаяСтрока.БанковскийСчет);
			Если Не ДоступныеСчетаПоЗаявкам.НайтиСтроки(СтруктураПоиска).Количество() Тогда
				Продолжить;
			КонецЕсли;
			
			ОстатокНаСчете = АктуальныйОстатокНаСчете(Данные, ПараметрыРаспределения, НайденнаяСтрока.БанковскийСчет);
			Использовать = Мин(ОстатокКРаспределению, ОстатокНаСчете);
			Если Не Использовать Тогда
				Продолжить;
			КонецЕсли;
			
			ОстатокКРаспределению = ОстатокКРаспределению - Использовать;
			НоваяСтрока = Финансирование.Добавить();
			НоваяСтрока.БанковскийСчет = НайденнаяСтрока.БанковскийСчет;
			НоваяСтрока.Сумма = Использовать;
			НоваяСтрока.ДатаПлатежа = ПодобратьДатуПлатежаПоСчету(Данные, ПараметрыРаспределения, НоваяСтрока.БанковскийСчет, НоваяСтрока.Сумма);
			
			СделатьЗаписьЭтапаРаспределения(
				РезультатРаспределения, Ложь, ЗаявкаОбъект.Ссылка, 
				НСтр("ru = 'Распределение сумм, запланированных на закладке ""Контракты""'"), 
				НоваяСтрока.БанковскийСчет, НоваяСтрока.Сумма, НоваяСтрока.ДатаПлатежа, 
				"");
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если НедостаточноСредств Тогда
		Возврат;
	КонецЕсли;
	
	Если ОстатокКРаспределению Тогда
		Комментарий = НСтр("ru = 'Недостаточно собственных средств для заявки: требуется %1, не хватает %2'");
		СделатьЗаписьЭтапаРаспределения(
			РезультатРаспределения, Истина, ЗаявкаОбъект.Ссылка, 
			НСтр("ru = 'Распределение собственных средств, запланированных на закладке ""Контракты""'"), 
			"Собственные средства", "", "", 
			СтрШаблон(Комментарий, ЗаявкаОбъект.СуммаОплатыЗаСчетСобственныхСредств, ОстатокКРаспределению));
		Возврат;
	КонецЕсли;
	
	ОстатокКРаспределению = СуммаКРаспределению - Финансирование.Итог("Сумма");
	
	//2. Рассчитаем максимальную доступность средств по счету
	//И сформируем "базовое" решение для расчета
	СчетчикРаспределения = ОстатокКРаспределению;
	Для Каждого СтрокаОстатков из ТаблицаОстатков Цикл
		
		МаксимальнаяГраница = СтрокаОстатков.ОстатокНаСчете;
		Если Не ПараметрыРаспределения.РазрешитьПревышатьЛимитыПоСтатьеКалькуляции Тогда
			Если Не ЗначениеЗаполнено(ЗаявкаОбъект.СтатьяКалькуляции) Тогда
				СтрокаЛимитов = ОстаткиЛимитовПоКонтрактам.Найти(СтрокаОстатков.БанковскийСчет, "БанковскийСчет");
			Иначе
				СтруктураПоиска = Новый Структура("БанковскийСчет,СтатьяКалькуляции",СтрокаОстатков.БанковскийСчет,ЗаявкаОбъект.СтатьяКалькуляции);
				СтрокиЛимитов = ОстаткиЛимитовПоКонтрактам.НайтиСтроки(СтруктураПоиска);
				Если СтрокиЛимитов.Количество() > 0 Тогда
					СтрокаЛимитов = СтрокиЛимитов[0];
				КонецЕсли;
			КонецЕсли;
			Если Не СтрокаЛимитов = Неопределено Тогда
				МаксимальнаяГраница = Мин(СтрокаЛимитов.ДоступныйОстаток, МаксимальнаяГраница);
			КонецЕсли;
		КонецЕсли;
		СтрокаОстатков.МаксимумДоступно = МаксимальнаяГраница;
		
		СтрокаОстатков.РаспределеноВТекущемПодборе = Мин(СчетчикРаспределения, СтрокаОстатков.МаксимумДоступно);
		СчетчикРаспределения = СчетчикРаспределения - СтрокаОстатков.РаспределеноВТекущемПодборе;
		
	КонецЦикла;
	
	Если ТаблицаОстатков.Итог("РаспределеноВТекущемПодборе") < ТаблицаОстатков.Итог("МаксимумДоступно") Тогда
	
		//3. Выполним оптимизацию решения, если есть запас средств на счетах
		СреднийПроцентВыполнения = РассчитатьСреднийПроцентВыполнения(СуммаКРаспределению, ТаблицаОстатков, 
													ЗаявкаОбъект.СтатьяКалькуляции, ОстаткиЛимитовПоКонтрактам);
		
		СреднееЗначение = СреднееЗначение(ТаблицаОстатков, ЗаявкаОбъект.СтатьяКалькуляции, ОстаткиЛимитовПоКонтрактам);
		Если СреднееЗначение <> Неопределено Тогда
			//Лимитов совсем нет - распределяем пропорционально
			Для Каждого СтрокаОстатков из ТаблицаОстатков Цикл
				СтрокаОстатков.МаксимумДоступно = СтрокаОстатков.ОстатокНаСчете;
			КонецЦикла;
			СделатьЗаписьЭтапаРаспределения(
				РезультатРаспределения, Ложь, ЗаявкаОбъект.Ссылка, 
				НСтр("ru = 'Расчет коэффициентов распределения'"), 
				"", "", "", 
				НСтр("ru = 'Лимиты по контрактам не обнаружены. Заявка будет распределена пропорционально количеству счетов.'"));
		Иначе
			СделатьЗаписьЭтапаРаспределения(
				РезультатРаспределения, Ложь, ЗаявкаОбъект.Ссылка, 
				НСтр("ru = 'Расчет коэффициентов распределения'"), 
				"", "", "", 
				СтрШаблон(НСтр("ru = 'Средний процент выполнения калькуляций: %1'"), Формат(СреднийПроцентВыполнения, "ЧДЦ=2")));
		КонецЕсли;
		
		ЛучшееРешение = Новый Структура("ТаблицаОстатков", ТаблицаОстатков.Скопировать());
		ЛучшееРешение.Вставить("ЗначениеФункции", РассчитатьЗначениеЦелевойФункции(СреднийПроцентВыполнения, ТаблицаОстатков, 
																		ЗаявкаОбъект.СтатьяКалькуляции, ОстаткиЛимитовПоКонтрактам, СреднееЗначение));
	
		НовоеЛучшееРешение = РаспределитьСуммуПоКонтрактамДихотомией(ТаблицаОстатков, ЗаявкаОбъект.СтатьяКалькуляции, 
													ОстаткиЛимитовПоКонтрактам, СреднийПроцентВыполнения, ЛучшееРешение, СреднееЗначение);
		
		ТаблицаОстатков = НовоеЛучшееРешение.ТаблицаОстатков;
		
	КонецЕсли;
	
	ТаблицаОстатков.Колонки.Добавить("ДатаПлатежа");
	
	Для Каждого СтрокаОстатков из ТаблицаОстатков Цикл
		
		Если Не СтрокаОстатков.РаспределеноВТекущемПодборе Тогда
			Продолжить;
		КонецЕсли;
		
		Сумма = СтрокаОстатков.РаспределеноВТекущемПодборе;
		СтрокаОстатков.ДатаПлатежа = ПодобратьДатуПлатежаПоСчету(Данные, ПараметрыРаспределения, СтрокаОстатков.БанковскийСчет, Сумма);
		
	КонецЦикла;
	
	Если ПараметрыРаспределения.МинимальнаяСуммаПлатежа Тогда
		
		ДополнениеДоМинимальногоПлатежа = 0;
		
		Для Каждого СтрокаОстатков из ТаблицаОстатков Цикл
			
			Если Не СтрокаОстатков.РаспределеноВТекущемПодборе Тогда
				Продолжить;
			КонецЕсли;
			
			Если СтрокаОстатков.РаспределеноВТекущемПодборе < ПараметрыРаспределения.МинимальнаяСуммаПлатежа Тогда
				МожноДополнить = Макс(СтрокаОстатков.МаксимумДоступно - СтрокаОстатков.РаспределеноВТекущемПодборе, 0);
				МожноДополнить = Мин(МожноДополнить, ПараметрыРаспределения.МинимальнаяСуммаПлатежа - СтрокаОстатков.РаспределеноВТекущемПодборе);
				ДополнениеДоМинимальногоПлатежа = ДополнениеДоМинимальногоПлатежа + МожноДополнить;
				СтрокаОстатков.РаспределеноВТекущемПодборе = СтрокаОстатков.РаспределеноВТекущемПодборе + МожноДополнить;
				Комментарий = НСтр("ru = 'Округление до суммы минимального платежа %1'");
				СделатьЗаписьЭтапаРаспределения(
					РезультатРаспределения, Ложь, ЗаявкаОбъект.Ссылка, 
					НСтр("ru = 'Округление до минимального платежа'"), 
					СтрокаОстатков.БанковскийСчет, МожноДополнить, "", 
					СтрШаблон(Комментарий, ПараметрыРаспределения.МинимальнаяСуммаПлатежа));
			КонецЕсли;
			
		КонецЦикла;
		
		Если ДополнениеДоМинимальногоПлатежа Тогда
			Для Сч = 1 по ТаблицаОстатков.Количество() Цикл
				
				СтрокаОстатков = ТаблицаОстатков[ТаблицаОстатков.Количество() - Сч];
				
				Если Не СтрокаОстатков.РаспределеноВТекущемПодборе Тогда
					Продолжить;
				КонецЕсли;
				
				МожноСписать = Мин(СтрокаОстатков.РаспределеноВТекущемПодборе, ДополнениеДоМинимальногоПлатежа);
				СтрокаОстатков.РаспределеноВТекущемПодборе = СтрокаОстатков.РаспределеноВТекущемПодборе - МожноСписать;
				ДополнениеДоМинимальногоПлатежа = ДополнениеДоМинимальногоПлатежа - МожноСписать;
				
				Комментарий = НСтр("ru = 'Корректировка суммы платежей на сумму отклонений от минимального платежа'");
				СделатьЗаписьЭтапаРаспределения(
					РезультатРаспределения, Ложь, ЗаявкаОбъект.Ссылка, 
					НСтр("ru = 'Округление до минимального платежа'"), 
					СтрокаОстатков.БанковскийСчет, -МожноСписать, "", 
					Комментарий);
				
				Если Не ДополнениеДоМинимальногоПлатежа Тогда
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	Для Каждого СтрокаОстатков из ТаблицаОстатков Цикл
		
		Если Не СтрокаОстатков.РаспределеноВТекущемПодборе Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = Финансирование.Добавить();
		НоваяСтрока.БанковскийСчет = СтрокаОстатков.БанковскийСчет;
		НоваяСтрока.КонтрактСЗаказчиком = СоответствиеКонтрактовИСчетов.Найти(СтрокаОстатков.БанковскийСчет, "БанковскийСчет").КонтрактСЗаказчиком;
		НоваяСтрока.Сумма = СтрокаОстатков.РаспределеноВТекущемПодборе;
		НоваяСтрока.ДатаПлатежа = СтрокаОстатков.ДатаПлатежа;
		
		СделатьЗаписьЭтапаРаспределения(
			РезультатРаспределения, Ложь, ЗаявкаОбъект.Ссылка, 
			НСтр("ru = 'Распределение сумм по отдельным счетам'"), 
			НоваяСтрока.БанковскийСчет, НоваяСтрока.Сумма, НоваяСтрока.ДатаПлатежа, 
			"");
			
	КонецЦикла;
	
	//4. Если средств не хватило - используем собственные счета в порядке, в котором они стоят в рабочем месте "Управление финансами"
	Если СчетчикРаспределения Тогда
		
		Если Не ПараметрыРаспределения.РазрешитьИспользоватьСобственныеСредства Тогда
			
			Комментарий = НСтр("ru = 'Недостаточно средств на отдельных счетах для заявки: не хватает %1'");
			СделатьЗаписьЭтапаРаспределения(
				РезультатРаспределения, Истина, ЗаявкаОбъект.Ссылка, 
				НСтр("ru = 'Распределение сумм по отдельным счетам'"), 
				"Средства на отдельных счетах", "", "", 
				СтрШаблон(Комментарий, СчетчикРаспределения));
				
			Возврат;
			
		КонецЕсли;
		
		//Что бы сохранить порядок списания соответствующий порядку в АРМ - обходим таблицу ОстаткиДС
		НайденныеСтроки = ОстаткиДС.НайтиСтроки(Новый Структура("СобственныйСчет", Истина));
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			
			СтруктураПоиска = Новый Структура("Заявка, БанковскийСчет", ЗаявкаОбъект.Ссылка, НайденнаяСтрока.БанковскийСчет);
			Если Не ДоступныеСчетаПоЗаявкам.НайтиСтроки(СтруктураПоиска).Количество() Тогда
				Продолжить;
			КонецЕсли;
			ОстатокНаСчете = АктуальныйОстатокНаСчете(Данные, ПараметрыРаспределения, НайденнаяСтрока.БанковскийСчет);
			Использовать = Мин(СчетчикРаспределения, ОстатокНаСчете);
			СчетчикРаспределения = СчетчикРаспределения - Использовать;
			НоваяСтрока = Финансирование.Добавить();
			НоваяСтрока.БанковскийСчет = НайденнаяСтрока.БанковскийСчет;
			НоваяСтрока.Сумма = Использовать;
			НоваяСтрока.ДатаПлатежа = ПодобратьДатуПлатежаПоСчету(Данные, ПараметрыРаспределения, НоваяСтрока.БанковскийСчет, НоваяСтрока.Сумма);
			
			СделатьЗаписьЭтапаРаспределения(
				РезультатРаспределения, Ложь, ЗаявкаОбъект.Ссылка, 
				НСтр("ru = 'Распределение сумм на собственные счета'"), 
				НоваяСтрока.БанковскийСчет, НоваяСтрока.Сумма, НоваяСтрока.ДатаПлатежа, 
				"");
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если СчетчикРаспределения Тогда
		
		Комментарий = НСтр("ru = 'Недостаточно средств для заявки с учетом собственных: не хватает %1'");
		СделатьЗаписьЭтапаРаспределения(
			РезультатРаспределения, Истина, ЗаявкаОбъект.Ссылка, 
			НСтр("ru = 'Распределение сумм по счетам'"), 
			"Средства на отдельных счетах", "", "", 
			СтрШаблон(Комментарий, СчетчикРаспределения));
		
		Возврат;
	КонецЕсли;
	
	//5. Сохранение результатов распределения
	МаксимальнаяДата = Дата(1, 1, 1);
	Для Каждого СтрокаФинансирования из Финансирование Цикл
		МаксимальнаяДата = Макс(МаксимальнаяДата, СтрокаФинансирования.ДатаПлатежа);
	КонецЦикла;
	Для Каждого СтрокаФинансирования из Финансирование Цикл
		СтрокаФинансирования.ДатаПлатежа = МаксимальнаяДата;
	КонецЦикла;
	Финансирование.Свернуть("КонтрактСЗаказчиком, БанковскийСчет, ДатаПлатежа", "Сумма");
	Финансирование.Колонки.БанковскийСчет.Имя = "МестоРазмещения";
	Финансирование.Колонки.Сумма.Имя          = "СуммаПлатежа";
	ЗаявкаОбъект.РазмещениеЗаявки.Загрузить(Финансирование);
	Финансирование.Колонки.МестоРазмещения.Имя = "БанковскийСчет";
	Финансирование.Колонки.СуммаПлатежа.Имя    = "Сумма";
	
	ПредставленияСчетов = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(Финансирование.ВыгрузитьКолонку("БанковскийСчет"), "Представление");
	
	Для Каждого СтрокаЗаявки из Финансирование Цикл
		НоваяСтрока = РаспределениеЗаявок.Добавить();
		НоваяСтрока.Заявка = ЗаявкаОбъект.Ссылка;
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаЗаявки);
		НоваяСтрока.Распределено = СтрокаЗаявки.Сумма;
		НоваяСтрока.БанковскийСчетПредставление = ПредставленияСчетов[НоваяСтрока.БанковскийСчет].Представление;
	КонецЦикла;
	
	УменьшитьОстаткиЛимитовНаРаспределенныеЗначения(ЗаявкаОбъект, Данные.ОстаткиЛимитовПоКонтрактам, Финансирование);
	
КонецПроцедуры

Функция РаспределитьЗаявкиПоСчетамИДням(АдресДанныхРаспределения, ПараметрыРаспределения, ДанныеСписка, ФильтрЗаявок) Экспорт
	
	//Схема = ПолучитьИзВременногоХранилища(ДанныеСписка.Схема);
	//Настройки = ПолучитьИзВременногоХранилища(ДанныеСписка.Настройки);
	//
	//ЭлементыВыбор = Настройки.Структура[0].Выбор.Элементы;
	//ЭлементыВыбор.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных")).Поле = Новый ПолеКомпоновкиДанных("Заявка");
	//
	//Если ФильтрЗаявок <> Неопределено Тогда
	//	
	//	НовыйОтбор = Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	//	НовыйОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Заявка");
	//	НовыйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	//	НовыйОтбор.ПравоеЗначение = ФильтрЗаявок;
	//	НовыйОтбор.Использование = Истина;
	//	
	//КонецЕсли;
	//
	//Результат = ОбщегоНазначения275Сервер.ВыгрузитьРезультатСКД(Схема, Настройки);
	
	Результат = ПолучитьИзВременногоХранилища(ДанныеСписка.Результат);
	
	Данные = ПолучитьИзВременногоХранилища(АдресДанныхРаспределения);
	
	СоответствиеКонтрактовИСчетов = Данные.СоответствиеКонтрактовИСчетов;
	ОстаткиДС 					= Данные.ОстаткиДС;
	РаспределениеЗаявок 		= Данные.РаспределениеЗаявок;
	ОстаткиПоСтатьямКалькуляции = Данные.ОстаткиПоСтатьямКалькуляции;
	ПланируемыеДоходы 			= Данные.ПланируемыеДоходы;
	ДоступныеСчетаПоЗаявкам 	= Данные.ДоступныеСчетаПоЗаявкам;
	ДоступныеКонтрактыПоЗаявкам = Данные.ДоступныеКонтрактыПоЗаявкам;
	
	РезультатРаспределения = Новый ТаблицаЗначений;
	РезультатРаспределения.Колонки.Добавить("Заявка");
	РезультатРаспределения.Колонки.Добавить("ЭтоОшибка");
	РезультатРаспределения.Колонки.Добавить("Этап");
	РезультатРаспределения.Колонки.Добавить("БанковскийСчет");
	РезультатРаспределения.Колонки.Добавить("Сумма");
	РезультатРаспределения.Колонки.Добавить("МинимальнаяДата");
	РезультатРаспределения.Колонки.Добавить("Комментарий");
	
	СоответствиеОбъектов = Новый Соответствие;
	ТаблицаСвязиЗаявок = СвязиНалоговыхПлатежейИЗарплатных(Результат);
	
	Для Каждого СтрокаЗаявки из Результат Цикл
		
		ДокументОбъект = СтрокаЗаявки.Заявка.ПолучитьОбъект();
		СоответствиеОбъектов.Вставить(СтрокаЗаявки.Заявка, ДокументОбъект);
		Если ПараметрыРаспределения.ОчищатьПредыдущиеДанныеРаспределения Тогда
			ДокументОбъект.РазмещениеЗаявки.Очистить();
			НайденныеСтроки = РаспределениеЗаявок.НайтиСтроки(Новый Структура("Заявка", ДокументОбъект.Ссылка));
			Для Каждого НайденнаяСтрока из НайденныеСтроки Цикл
				РаспределениеЗаявок.Удалить(НайденнаяСтрока);
			КонецЦикла;
			ДокументОбъект.Записать();
		КонецЕсли;
		
		НалоговыеПлатежи = ТаблицаСвязиЗаявок.НайтиСтроки(Новый Структура("Заявка", СтрокаЗаявки.Заявка));
		
		Для Каждого НалоговыйПлатеж из НалоговыеПлатежи Цикл
			УплатаНалоговОбъект = НалоговыйПлатеж.ЗаявкаНаУплатуНалогов.ПолучитьОбъект();
			СоответствиеОбъектов.Вставить(НалоговыйПлатеж.ЗаявкаНаУплатуНалогов, УплатаНалоговОбъект);
			Если ПараметрыРаспределения.ОчищатьПредыдущиеДанныеРаспределения Тогда
				УплатаНалоговОбъект.РазмещениеЗаявки.Очистить();
				НайденныеСтроки = РаспределениеЗаявок.НайтиСтроки(Новый Структура("Заявка", ДокументОбъект.Ссылка));
				Для Каждого НайденнаяСтрока из НайденныеСтроки Цикл
					РаспределениеЗаявок.Удалить(НайденнаяСтрока);
				КонецЦикла;
				УплатаНалоговОбъект.Записать();
			Иначе
				Для Каждого СтрокаФинансирования из УплатаНалоговОбъект.РазмещениеЗаявки Цикл
					ЗаполнитьЗначенияСвойств(ДокументОбъект.РазмещениеЗаявки.Добавить(), СтрокаФинансирования);
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;

		Если Не ПараметрыРаспределения.ОчищатьПредыдущиеДанныеРаспределения Тогда
			ДокументОбъект.РазмещениеЗаявки.Свернуть("КонтрактСЗаказчиком, МестоРазмещения, ДатаПлатежа", "СуммаПлатежа");
		КонецЕсли;
		
	КонецЦикла;
	
	ОстаткиЛимитовПоКонтрактам = ИсточникиДанных275Сервер.ОстаткиЛимитовПоКонтрактам();
	ПланируемыеКонтрактыКОплате = ИсточникиДанных275Сервер.ПланируемыеКонтрактыКОплате();
	РасходЛимитов3Миллиона = ИсточникиДанных275Сервер.РасходЛимитовПоТипу3Миллиона();
	
	ПланируемыеКонтрактыКОплате.Индексы.Добавить("Заявка");
	
	Данные.Вставить("ОстаткиЛимитовПоКонтрактам", ОстаткиЛимитовПоКонтрактам);
	Данные.Вставить("ПланируемыеКонтрактыКОплате", ПланируемыеКонтрактыКОплате);
	Данные.Вставить("РасходЛимитов3Миллиона", РасходЛимитов3Миллиона);
	
	Для Каждого СтрокаЗаявки из Результат Цикл
		
		СтрокаЗарплатнойЗаявки = ТаблицаСвязиЗаявок.Найти(СтрокаЗаявки.Заявка, "ЗаявкаНаУплатуНалогов");
		Если СтрокаЗарплатнойЗаявки <> Неопределено Тогда
			Комментарий = НСтр("ru = 'Заявка будет распределена вместе с заявкой на перечисление зарплаты ""%1""'");
			СделатьЗаписьЭтапаРаспределения(
				РезультатРаспределения, Ложь, СтрокаЗаявки.Заявка, 
				НСтр("ru = 'Предварительная проверка'"), 
				"", "", "", 
				СтрШаблон(Комментарий, СтрокаЗарплатнойЗаявки.ЗаявкаПредставление));
			Продолжить;
		КонецЕсли;
		
		ДокументОбъект = СоответствиеОбъектов[СтрокаЗаявки.Заявка];
		Если ДокументОбъект = Неопределено Тогда
			ДокументОбъект = СтрокаЗаявки.Заявка.ПолучитьОбъект();
		КонецЕсли;
		
		НалоговыеПлатежи = ТаблицаСвязиЗаявок.НайтиСтроки(Новый Структура("Заявка", СтрокаЗаявки.Заявка));
		Для Каждого НалоговыйПлатеж из НалоговыеПлатежи Цикл
			УплатаНалоговОбъект = НалоговыйПлатеж.ЗаявкаНаУплатуНалогов.ПолучитьОбъект();
			ДокументОбъект.СуммаДокумента = ДокументОбъект.СуммаДокумента + УплатаНалоговОбъект.СуммаДокумента;
		КонецЦикла;
		
		РассчитатьРаспределениеЗаявкиПоСчетам(ДокументОбъект, ПараметрыРаспределения, Данные, РезультатРаспределения);
		
		Для Каждого НалоговыйПлатеж из НалоговыеПлатежи Цикл
			УплатаНалоговОбъект = СоответствиеОбъектов[НалоговыйПлатеж.ЗаявкаНаУплатуНалогов];
			Пропорция = УплатаНалоговОбъект.СуммаДокумента / ДокументОбъект.СуммаДокумента;

			УплатаНалоговОбъект.РазмещениеЗаявки.Очистить();
			Для Каждого СтрокаФинансирования из ДокументОбъект.РазмещениеЗаявки Цикл
				Налоги = СтрокаФинансирования.СуммаПлатежа * Пропорция;
				НоваяСтрока = УплатаНалоговОбъект.РазмещениеЗаявки.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаФинансирования);
				НоваяСтрока.СуммаПлатежа = Налоги;

			КонецЦикла;
			ОшибкаОкругления = УплатаНалоговОбъект.СуммаДокумента - УплатаНалоговОбъект.РазмещениеЗаявки.Итог("Сумма");

			УплатаНалоговОбъект.РазмещениеЗаявки[0].СуммаПлатежа = УплатаНалоговОбъект.РазмещениеЗаявки[0].СуммаПлатежа - ОшибкаОкругления;
			УплатаНалоговОбъект.Записать();
		КонецЦикла;
		
		Для Каждого НалоговыйПлатеж из НалоговыеПлатежи Цикл
			УплатаНалоговОбъект = СоответствиеОбъектов[НалоговыйПлатеж.ЗаявкаНаУплатуНалогов];
			ДокументОбъект.СуммаДокумента = ДокументОбъект.СуммаДокумента - УплатаНалоговОбъект.СуммаДокумента;
			Для Каждого СтрокаФинансирования из УплатаНалоговОбъект.РазмещениеЗаявки Цикл
				НоваяСтрока = ДокументОбъект.РазмещениеЗаявки.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаФинансирования);
				НоваяСтрока.СуммаПлатежа = -НоваяСтрока.СуммаПлатежа;
			КонецЦикла;
		КонецЦикла;
		
		ДокументОбъект.РазмещениеЗаявки.Свернуть("ДатаПлатежа, КонтрактСЗаказчиком, МестоРазмещения", "СуммаПлатежа");
		
		ДокументОбъект.Записать();
		
	КонецЦикла;
	
	Возврат РезультатРаспределения;
	
КонецФункции

Функция НужноПоказыватьРезультатРаспределения(РезультатРаспределения, ПараметрыРаспределения) Экспорт
	
	Если ПараметрыРаспределения.ПоказатьКомментарииКРаспределению Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если РезультатРаспределения.Найти(Истина, "ЭтоОшибка") <> Неопределено Тогда
		
		Заявки = РезультатРаспределения.Скопировать(Новый Структура("ЭтоОшибка", Истина));
		Заявки.Свернуть("Заявка");
		КУдалению = Новый Массив;
		
		Для Каждого СтрокаРезультата из РезультатРаспределения Цикл
			Если СтрокаРезультата.Заявка <> СтрокаРезультата.Заявка Тогда
				КУдалению.Добавить(СтрокаРезультата);
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого ЭлементКУдалению из КУдалению Цикл
			РезультатРаспределения.Удалить(ЭлементКУдалению);
		КонецЦикла;
		
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция СвязиНалоговыхПлатежейИЗарплатных(ТаблицаЗаявок)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаявкаНаРасходованиеДенежныхСредств.Ссылка КАК ЗаявкаНаУплатуНалогов,
		|	ЗаявкаНаРасходованиеДенежныхСредств.ЗаявкаНаПеречислениеЗарплаты КАК Заявка,
		|	ЗаявкаНаРасходованиеДенежныхСредств.ЗаявкаНаПеречислениеЗарплаты.Представление КАК ЗаявкаПредставление
		|ИЗ
		|	Документ.ЗаявкаНаРасходованиеСредств КАК ЗаявкаНаРасходованиеДенежныхСредств
		|ГДЕ
		|	ЗаявкаНаРасходованиеДенежныхСредств.ЗаявкаНаПеречислениеЗарплаты <> ЗНАЧЕНИЕ(Документ.ЗаявкаНаРасходованиеСредств.ПустаяСсылка)
		|	И (ЗаявкаНаРасходованиеДенежныхСредств.Ссылка В (&МассивЗаявок)
		|			ИЛИ ЗаявкаНаРасходованиеДенежныхСредств.ЗаявкаНаПеречислениеЗарплаты В (&МассивЗаявок))";
		
	МассивЗаявок = Новый Массив;
	Для Каждого СтрокаЗаявки из ТаблицаЗаявок Цикл
		МассивЗаявок.Добавить(СтрокаЗаявки.Заявка);
	КонецЦикла;
	Запрос.УстановитьПараметр("МассивЗаявок", МассивЗаявок);
	
	РезультатЗапроса = Запрос.Выполнить();
	ТаблицаСвязиЗаявок = РезультатЗапроса.Выгрузить();
	ТаблицаСвязиЗаявок.Индексы.Добавить("ЗаявкаНаУплатуНалогов");
	
	Возврат ТаблицаСвязиЗаявок;
	
КонецФункции
