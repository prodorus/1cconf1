
// Область ПрограммныйИнтерфейс     

// Возвращает номер версии библиотеки подключаемого оборудования.
//
Функция ВерсияБиблиотеки() Экспорт
	
	Возврат "2.0.5.26";
	
КонецФункции

// Получает ревизию требований для драйверов подключаемого оборудования.
//
Функция РевизияИнтерфейсаДрайверов() Экспорт
	
	РевизияИнтерфейса = 2002;
	Возврат РевизияИнтерфейса;
	
КонецФункции

// Функция возвращает список подключенного в справочнике ПО
//
// Возвращаемое значение
//  Массив
// 
Функция ОборудованиеПоПараметрам(ТипыПО = Неопределено, Идентификатор = Неопределено, РабочееМесто = Неопределено) Экспорт
	
	Возврат Справочники.ПодключаемоеОборудование.ОборудованиеПоПараметрам(ТипыПО, Идентификатор, РабочееМесто);
	
КонецФункции

// Функция возвращает по идентификатору устройства его параметры.
//
Функция ПолучитьПараметрыУстройства(Идентификатор) Экспорт
	
	Возврат Справочники.ПодключаемоеОборудование.ПолучитьПараметрыУстройства(Идентификатор);
	
КонецФункции

// Функция возвращает по идентификатору устройства параметры регистрации.
//
Функция ПолучитьПараметрыРегистрацииУстройства(Идентификатор) Экспорт
	
	Возврат Справочники.ПодключаемоеОборудование.ПолучитьПараметрыРегистрацииУстройства(Идентификатор);
	
КонецФункции

// Процедура предназначена для сохранения параметров устройства
// в реквизит Параметры типа хранилище значения в элементе справочника.
//
Функция СохранитьПараметрыУстройства(Идентификатор, Параметры) Экспорт
	
	Возврат Справочники.ПодключаемоеОборудование.СохранитьПараметрыУстройства(Идентификатор, Параметры);
	
КонецФункции

// Процедура предназначена для сохранения параметров регистрации устройства
//
Функция СохранитьПараметрыРегистрацииУстройства(Идентификатор, ПараметрыРегистрации) Экспорт
	
	Возврат Справочники.ПодключаемоеОборудование.СохранитьПараметрыРегистрацииУстройства(Идентификатор, ПараметрыРегистрации); 
	
КонецФункции

// Функция возвращает структуру с данными устройства.
//
Функция ПолучитьДанныеУстройства(Идентификатор) Экспорт

	Возврат Справочники.ПодключаемоеОборудование.ПолучитьДанныеУстройства(Идентификатор);

КонецФункции

// Функция возвращает структуру с данными драйвера.
// 
Функция ПолучитьДанныеДрайвера(Идентификатор) Экспорт

	Возврат Справочники.ДрайверыОборудования.ПолучитьДанныеДрайвера(Идентификатор);
 
КонецФункции

// Функция возвращает параметры драйвера по наименованию обработчика.
//
Функция ПолучитьПараметрыДрайвераПоОбработчику(НаименованиеОбработчикаДрайвера) Экспорт

	Результат = Новый Структура;
	
	Для каждого ИмяПеречисления Из Метаданные.Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.ЗначенияПеречисления Цикл
		Если НаименованиеОбработчикаДрайвера = ИмяПеречисления.Синоним Тогда
			Результат.Вставить("Имя"            , ИмяПеречисления.Имя);
			Результат.Вставить("Наименование"   , ИмяПеречисления.Синоним);
			Результат.Вставить("ТипОборудования", Перечисления["ТипыПодключаемогоОборудования"][ИмяПеречисления.Комментарий]);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;

КонецФункции

// Функция возвращает из переменной сеанса имя компьютера клиента.
//
Функция ПолучитьРабочееМестоКлиента() Экспорт

	УстановитьПривилегированныйРежим(Истина);
	Возврат ПараметрыСеанса.РабочееМестоКлиента;

КонецФункции

// Функция возвращает список рабочих мест, соответствующих указанному имени компьютера.
//
Функция НайтиРабочиеМестаПоИД(ИдентификаторКлиента) Экспорт
	
	Если Не МенеджерОборудованияВызовСервераПереопределяемый.ДоступноИспользованиеРазделенныхДанных() Тогда
		Возврат Новый Массив();
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	РабочиеМеста.Ссылка
	|ИЗ
	|	Справочник.РабочиеМеста КАК РабочиеМеста
	|ГДЕ
	|	РабочиеМеста.Код = &Код
	|	И РабочиеМеста.ПометкаУдаления = ЛОЖЬ
	|");
	
	Запрос.УстановитьПараметр("Код", ИдентификаторКлиента);
	СписокКомпьютеров = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Возврат СписокКомпьютеров;
	
КонецФункции

// Функция устанавливает в переменную сеанса имя компьютера клиента.
//
Процедура УстановитьРабочееМестоКлиента(РабочееМестоКлиента) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	ПараметрыСеанса.РабочееМестоКлиента = РабочееМестоКлиента;
	ОбновитьПовторноИспользуемыеЗначения();

КонецПроцедуры

// Функция получает макет драйвера и сохраняет его во временное хранилище,
// возвращая ссылку на временное хранилище.
Функция ПолучитьМакетССервера(ИмяМакета) Экспорт

	Ссылка = ПоместитьВоВременноеХранилище(ПолучитьОбщийМакет(ИмяМакета));
	Возврат Ссылка;

КонецФункции

// Получает ссылку предопределенного элемента по его полному имени.
//
Функция ПредопределенныйЭлемент(Знач ПолноеИмяПредопределенного) Экспорт
	
	ИмяПредопределенного = ВРег(ПолноеИмяПредопределенного);
	
	Точка = Найти(ИмяПредопределенного, ".");
	ИмяКоллекции = Лев(ИмяПредопределенного, Точка - 1);
	ИмяПредопределенного = Сред(ИмяПредопределенного, Точка + 1);
	
	Точка = Найти(ИмяПредопределенного, ".");
	ИмяТаблицы = Лев(ИмяПредопределенного, Точка - 1);
	ИмяПредопределенного = Сред(ИмяПредопределенного, Точка + 1);
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1 Ссылка ИЗ &ПолноеИмяТаблицы ГДЕ ИмяПредопределенныхДанных = &ИмяПредопределенного";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПолноеИмяТаблицы", ИмяКоллекции + "." + ИмяТаблицы);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ИмяПредопределенного", ИмяПредопределенного);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	Иначе
		Возврат Результат.Выгрузить()[0].Ссылка;
	КонецЕсли;
	
КонецФункции

// Функция возвращает доступность сохранение данных пользователя.
//
Функция ПравоДоступаСохранениеДанныхПользователя() Экспорт
	
	Возврат ПравоДоступа("СохранениеДанныхПользователя", Метаданные);
	
КонецФункции

// Функция возвращает имя перечисления из его метаданных.
//
Функция ПолучитьИмяТипаОборудования(ТипОборудования) Экспорт

	Результат = Неопределено;
	
	МетаОбъект = ТипОборудования.Метаданные();
	Индекс = Перечисления.ТипыПодключаемогоОборудования.Индекс(ТипОборудования);
	Результат = МетаОбъект.ЗначенияПеречисления[Индекс].Имя;

	Возврат Результат;

КонецФункции

// Функция возвращает перечисление по имени.
//
Функция ПолучитьТипОборудования(ТипОборудованияИмя) Экспорт
	
	Попытка
		Результат = Перечисления["ТипыПодключаемогоОборудования"][ТипОборудованияИмя]; 
	Исключение
		Результат = Перечисления.ТипыПодключаемогоОборудования.ПустаяСсылка();
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Функция возвращает Тип подключаемого оборудования по ссылке.
//
Функция ПолучитьТипПодключаемогоОборудования(ПодключаемоеОборудование) Экспорт
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПодключаемоеОборудование, "ТипОборудования");
	
КонецФункции

// Функция возвращает созданное рабочее место клиента.
//
Функция СоздатьРабочееМестоКлиента(Параметры) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	РабочееМесто = Справочники.РабочиеМеста.СоздатьЭлемент();

	РабочееМесто.Код           = Параметры.ИдентификаторКлиента;
	РабочееМесто.ИмяКомпьютера = Параметры.ИмяКомпьютера;


	МенеджерОборудованияКлиентСервер.ЗаполнитьНаименованиеРабочегоМеста(РабочееМесто, ПользователиИнформационнойБазы.ТекущийПользователь());

	РабочееМесто.Записать();

	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат РабочееМесто.Ссылка;

КонецФункции // СоздатьРабочееМестоКлиентаПоИД()

// Процедура устанавливает значения параметров сеанса, относящихся к подключаемому оборудованию.
//
Процедура УстановитьПараметрыСеансаПодключаемогоОборудования(ИмяПараметра, УстановленныеПараметры) Экспорт

	Если ИмяПараметра = "РабочееМестоКлиента" Тогда
		
		// Если с идентификатором клиента текущего сеанса связано одно рабочее место,
		// то его сразу и запишем в параметры сеанса.
		ТекущееРМ           = Справочники.РабочиеМеста.ПустаяСсылка();
		СистемнаяИнформация = Новый СистемнаяИнформация();
		
		СписокРМ = НайтиРабочиеМестаПоИД(ВРег(СистемнаяИнформация.ИдентификаторКлиента));
		Если СписокРМ.Количество() = 0 Тогда
			// Будет создано с клиента.
		Иначе
			ТекущееРМ = СписокРМ[0];
		КонецЕсли;
		
		УстановитьРабочееМестоКлиента(ТекущееРМ);
		
		Если ТипЗнч(УстановленныеПараметры) = Тип("Структура") Тогда
			УстановленныеПараметры.Вставить("РабочееМестоКлиента");
		Иначе
			УстановленныеПараметры.Добавить("РабочееМестоКлиента");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает список оборудования для которого необходима переустановка компоненты.
//
// Параметр:
//  РабочееМесто - СправочникСсылка.РабочиеМеста
// 
// Возвращаемое значение
//  Массив
//
Функция ДрайвераДляПереустановки(РабочееМесто) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Список = Новый Массив;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ 
	|	ПодключаемоеОборудование.ДрайверОборудования
	|ИЗ
	|	Справочник.ПодключаемоеОборудование КАК ПодключаемоеОборудование
	|ГДЕ
	|	ПодключаемоеОборудование.РабочееМесто = &РабочееМесто 
	|	И ПодключаемоеОборудование.ТребуетсяПереустановка");
	Запрос.УстановитьПараметр("РабочееМесто", РабочееМесто);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Строка = Новый Структура("ДрайверОборудования, ДанныеДрайвера", Выборка.ДрайверОборудования, ПолучитьДанныеДрайвера(Выборка.ДрайверОборудования)); 
		Список.Добавить(Строка);
	КонецЦикла;
	
	Возврат Список;
	
КонецФункции

// Возвращает список оборудования для которого необходима установка компоненты.
//
// Параметр:
//  РабочееМесто - СправочникСсылка.РабочиеМеста
// 
// Возвращаемое значение
//  Массив
//
Функция ДрайвераДляУстановки(РабочееМесто) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Список = Новый Массив;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ 
	|	ПодключаемоеОборудование.ДрайверОборудования
	|ИЗ
	|	Справочник.ПодключаемоеОборудование КАК ПодключаемоеОборудование
	|ГДЕ
	|	ПодключаемоеОборудование.РабочееМесто = &РабочееМесто 
	|	И ПодключаемоеОборудование.ТребуетсяУстановка");
	Запрос.УстановитьПараметр("РабочееМесто", РабочееМесто);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Строка = Новый Структура("ДрайверОборудования, ДанныеДрайвера", Выборка.ДрайверОборудования, ПолучитьДанныеДрайвера(Выборка.ДрайверОборудования)); 
		Список.Добавить(Строка);
	КонецЦикла;
	
	Возврат Список;
	
КонецФункции

// Записывает изменения в переданном объекте.
// Для использования в обработчиках обновления.
//
// Параметры:
//   Данные                            - Произвольный - объект, набор записей или менеджер константы, который
//                                                      необходимо записать.
//   РегистрироватьНаУзлахПлановОбмена - Булево       - включает регистрацию на узлах планов обмена при записи объекта.
//   ВключитьБизнесЛогику              - Булево       - включает бизнес-логику при записи объекта.
//
Процедура ЗаписатьДанные(Знач Данные, Знач РегистрироватьНаУзлахПлановОбмена = Ложь, 
	Знач ВключитьБизнесЛогику = Ложь) Экспорт
	
	Данные.ОбменДанными.Загрузка = Не ВключитьБизнесЛогику;
	Если Не РегистрироватьНаУзлахПлановОбмена Тогда
		Данные.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов");
		Данные.ОбменДанными.Получатели.АвтоЗаполнение = Ложь;
	КонецЕсли;
	
	Данные.Записать();
	
КонецПроцедуры

// Устанавливает признак необходимости переустановки оборудования для подключаемого оборудования на рабочем месте.
//
Процедура УстановитьПризнакПереустановкиДрайвера(РабочееМесто, ДрайверОборудования, Признак) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ  
	|	ПодключаемоеОборудование.Ссылка
	|ИЗ
	|	Справочник.ПодключаемоеОборудование КАК ПодключаемоеОборудование
	|ГДЕ
	|	ПодключаемоеОборудование.РабочееМесто = &РабочееМесто
	|	И ПодключаемоеОборудование.ДрайверОборудования = &ДрайверОборудования
	|	И НЕ ПодключаемоеОборудование.ТребуетсяПереустановка = &ТребуетсяПереустановка"); 
	
	Запрос.УстановитьПараметр("РабочееМесто", РабочееМесто);
	Запрос.УстановитьПараметр("ДрайверОборудования", ДрайверОборудования);
	Запрос.УстановитьПараметр("ТребуетсяПереустановка", Признак);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СправочникОбъект = Выборка.Ссылка.ПолучитьОбъект();
		СправочникОбъект.ТребуетсяПереустановка = Признак;
		ЗаписатьДанные(СправочникОбъект)
	КонецЦикла;
	
КонецПроцедуры

// Устанавливает признак необходимости переустановки оборудования для подключаемого оборудования.
//
Процедура УстановитьПризнакПереустановкиДрайвераДляОборудования(ПодключаемоеОборудование, Признак) Экспорт
	
	УстановитьПризнакПереустановкиДрайвера(ПодключаемоеОборудование.РабочееМесто, ПодключаемоеОборудование.ДрайверОборудования, Признак);
	
КонецПроцедуры

// Обновить установленные драйвера по справочнику подключаемого оборудования.
//
Процедура ОбновитьУстановленныеДрайвера(ТипОборудования) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос("ВЫБРАТЬ
							|	ПодключаемоеОборудование.Ссылка
							|ИЗ
							|	Справочник.ПодключаемоеОборудование КАК ПодключаемоеОборудование
							|ГДЕ
							|	(ПодключаемоеОборудование.ТипОборудования = &ТипОборудования)");
							
	Запрос.УстановитьПараметр("ТипОборудования", ТипОборудования);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СправочникОбъект = Выборка.Ссылка.ПолучитьОбъект();
		СправочникОбъект.ТребуетсяПереустановка = Истина;
		ЗаписатьДанные(СправочникОбъект)
	КонецЦикла;
	
КонецПроцедуры

// Устанавливает признак необходимости установки оборудования для подключаемого оборудования на рабочем месте.
//
Процедура УстановитьПризнакУстановкиДрайвера(РабочееМесто, ДрайверОборудования, Признак) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ  
	|	ПодключаемоеОборудование.Ссылка
	|ИЗ
	|	Справочник.ПодключаемоеОборудование КАК ПодключаемоеОборудование
	|ГДЕ
	|	ПодключаемоеОборудование.РабочееМесто = &РабочееМесто
	|	И ПодключаемоеОборудование.ДрайверОборудования = &ДрайверОборудования
	|	И НЕ ПодключаемоеОборудование.ТребуетсяУстановка = &ТребуетсяУстановка"); 
	
	Запрос.УстановитьПараметр("РабочееМесто", РабочееМесто);
	Запрос.УстановитьПараметр("ДрайверОборудования", ДрайверОборудования);
	Запрос.УстановитьПараметр("ТребуетсяУстановка", Признак);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СправочникОбъект = Выборка.Ссылка.ПолучитьОбъект();
		СправочникОбъект.ТребуетсяУстановка = Признак;
		ЗаписатьДанные(СправочникОбъект)
	КонецЦикла;
	
КонецПроцедуры

// Сохраняет пользовательские настройки подключаемого оборудования.
//
Процедура СохранитьПользовательскиеНастройкиПодключаемогоОборудования(СписокНастроек) Экспорт
		
	Если НЕ ПравоДоступа("СохранениеДанныхПользователя", Метаданные) Тогда
		Возврат;
	КонецЕсли;

	Для Каждого Элемент Из СписокНастроек Цикл
		ХранилищеОбщихНастроек.Сохранить("ПользовательскиеНастройкиПодключаемогоОборудования", Элемент.Ключ, Элемент.Значение);
	КонецЦикла;
		
	ОбновитьПовторноИспользуемыеЗначения();

КонецПроцедуры

// Функция возвращает типы используемого оборудования для текущего рабочего места.
// 
Функция ТипыИспользуемогоОборудованияТекущегоРабочегоМеста()  Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	РабочееМесто = МенеджерОборудованияВызовСервера.ПолучитьРабочееМестоКлиента();
	
	Если ЗначениеЗаполнено(РабочееМесто) Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПодключаемоеОборудование.ТипОборудования КАК ТипОборудования
		|ИЗ
		|	Справочник.ПодключаемоеОборудование КАК ПодключаемоеОборудование
		|ГДЕ
		|	ПодключаемоеОборудование.УстройствоИспользуется
		|	И ПодключаемоеОборудование.РабочееМесто = &РабочееМесто");
		
		Запрос.УстановитьПараметр("РабочееМесто", РабочееМесто);
		
		Результат = Запрос.Выполнить();
		Возврат Результат.Выгрузить().ВыгрузитьКолонку("ТипОборудования");
		
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Производит разложение данных дорожек магнитной карты по шаблонам.
// На входе:
// ДанныеДорожек - массив строк. Значения полученные из дорожек.
// ПараметрыДорожек - массив структур содержащих параметры настройки устройства.
//  * Использовать, булево - признак использования дорожки.
//  * НомерДорожки, число - порядковый номер дорожки 1-3.
//
// На выходе:
// Массив структур содержащих расшифрованные данные по всем подходящим шаблонам со ссылкой на них.
// * Массив - шаблоны
//   * Структура - данные шаблона.
//     - Шаблон, СправочникСсылка.ШаблоныМагнитныхКарт
//     - ДанныеДорожек, массив полей всех дорожек.
//       * Структура - данные поля.
//         - Поле
//         - ЗначениеПоля
Функция РасшифроватьКодМагнитнойКарты(ДанныеДорожек, ПараметрыДорожек) Экспорт
	
//	Возврат Справочники.ШаблоныМагнитныхКарт.РасшифроватьКодМагнитнойКарты(ДанныеДорожек, ПараметрыДорожек);
	Возврат Новый Массив;
	
КонецФункции

// Область "Программный интерфейс "ТСД"

// Получить таблицу товаров из XML структуры для ТСД.
//
// Возвращаемое значение
//  Массив
//
Функция ТоварыТСД(ДанныеЗагрузки, АлкогольнаяПродукция) Экспорт
	
	Результат = Новый Массив();
	
	АлкогольнаяПродукция = Ложь;
	
	Если НЕ ПустаяСтрока(ДанныеЗагрузки) Тогда
		
		ЧтениеXML = Новый ЧтениеXML; 
		ЧтениеXML.УстановитьСтроку(ДанныеЗагрузки);
		ЧтениеXML.ПерейтиКСодержимому();
		
		Если ЧтениеXML.Имя = "Table" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда  
			Пока ЧтениеXML.Прочитать() Цикл  
				Если ЧтениеXML.Имя = "Record" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда  
					ПозицияДанных = Новый Структура();
					ПозицияДанных.Вставить("Штрихкод"  , ЧтениеXML.ЗначениеАтрибута("BarCode"));
					ПозицияДанных.Вставить("Количество", ЧтениеXML.ЗначениеАтрибута("Quantity"));
					// Атрибуты для поддержки интеграции с ЕГАИС.
					ШтрихкодМаркиАлкогольнойПродукции = ЧтениеXML.ЗначениеАтрибута("AlcoholExciseStamp");
					Если Не ПустаяСтрока(ШтрихкодМаркиАлкогольнойПродукции) Тогда
						АлкогольнаяПродукция = Истина;
					КонецЕсли;
					ПозицияДанных.Вставить("ШтрихкодМаркиАлкогольнойПродукции", ШтрихкодМаркиАлкогольнойПродукции);
					ПозицияДанных.Вставить("НаименованиеАлкогольнойПродукции" , ЧтениеXML.ЗначениеАтрибута("AlcoholName"));
					ПозицияДанных.Вставить("СерийныйНомерАлкогольнойПродукции", ЧтениеXML.ЗначениеАтрибута("AlcoholSerialNumber"));
					ПозицияДанных.Вставить("КодВидаАлкогольнойПродукции", ЧтениеXML.ЗначениеАтрибута("AlcoholKindCode"));
					ПозицияДанных.Вставить("КодАлкогольнойПродукции"    , ЧтениеXML.ЗначениеАтрибута("AlcoholCode"));
					ПозицияДанных.Вставить("ЕмкостьТары"                , ЧтениеXML.ЗначениеАтрибута("AlcoholContainerSize"));
					ПозицияДанных.Вставить("Крепость"                   , ЧтениеXML.ЗначениеАтрибута("AlcoholStrength"));
					ПозицияДанных.Вставить("ИННПроизводителя"           , ЧтениеXML.ЗначениеАтрибута("VendorINNCode"));
					ПозицияДанных.Вставить("КПППроизводителя"           , ЧтениеXML.ЗначениеАтрибута("VendorKPPCode"));
					Результат.Добавить(ПозицияДанных);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Сформировать таблицу товаров в XML структуре для ТСД.
//
Функция СформироватьТаблицуТоваровТСД(ДанныеЗагрузки, ПолнаяВыгрузка) Экспорт
	
	ЗаписьXML = Новый ЗаписьXML; 
	ЗаписьXML.УстановитьСтроку("UTF-8");
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Table");
	ЗаписьXML.ЗаписатьАтрибут("FullLoad", XMLСтрока(ПолнаяВыгрузка));
	
	Для Каждого Позиция Из ДанныеЗагрузки  Цикл
		ЗаписьXML.ЗаписатьНачалоЭлемента("Record");
		ЗаписьXML.ЗаписатьАтрибут("BarCode"                      , XMLСтрока(Позиция[0].Значение));
		ЗаписьXML.ЗаписатьАтрибут("Name"                         , XMLСтрока(Позиция[1].Значение));
		ЗаписьXML.ЗаписатьАтрибут("UnitOfMeasurement"            , XMLСтрока(Позиция[2].Значение));
		ЗаписьXML.ЗаписатьАтрибут("CharacteristicOfNomenclature" , XMLСтрока(Позиция[3].Значение));
		ЗаписьXML.ЗаписатьАтрибут("SeriesOfNomenclature"         , XMLСтрока(Позиция[4].Значение));
		ЗаписьXML.ЗаписатьАтрибут("Quality"                      , XMLСтрока(Позиция[5].Значение));
		ЗаписьXML.ЗаписатьАтрибут("Price"                        , XMLСтрока(Позиция[6].Значение));
		ЗаписьXML.ЗаписатьАтрибут("Quantity"                     , XMLСтрока(Позиция[7].Значение));
		ЗаписьXML.ЗаписатьАтрибут("Article"                     , XMLСтрока(Позиция[8].Значение));
		ЗаписьXML.ЗаписатьАтрибут("Alcohol"                     , XMLСтрока(Позиция[9].Значение));
		Если Позиция[9].Значение = Истина Тогда
			ЗаписьXML.ЗаписатьАтрибут("AlcoholExcisable"     , XMLСтрока(Позиция[10].Значение));
			ЗаписьXML.ЗаписатьАтрибут("AlcoholKindCode"      , XMLСтрока(Позиция[11].Значение));
			ЗаписьXML.ЗаписатьАтрибут("AlcoholCode"          , XMLСтрока(Позиция[12].Значение));
			ЗаписьXML.ЗаписатьАтрибут("AlcoholContainerSize" , XMLСтрока(Позиция[13].Значение));
			ЗаписьXML.ЗаписатьАтрибут("AlcoholStrength"      , XMLСтрока(Позиция[14].Значение));
			ЗаписьXML.ЗаписатьАтрибут("VendorINNCode"        , XMLСтрока(Позиция[15].Значение));
			ЗаписьXML.ЗаписатьАтрибут("VendorKPPCode"        , XMLСтрока(Позиция[16].Значение));
		КонецЕсли;
		ЗаписьXML.ЗаписатьКонецЭлемента();
	КонецЦикла;
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	Возврат ЗаписьXML.Закрыть();
	
КонецФункции

// Сформировать XML пакеты товаров для загрузки ТСД.
//
Функция ПодготовитьПакетыДляЗагрузкиТСД(ТаблицаВыгрузки, РазмерПакета, ПолнаяВыгрузка) Экспорт
	
	ПакетыДляВыгрузки = Новый Массив();
	МассивТоваров = Новый Массив;
	
	ЗаписьВПакете    = 0;
	ЗаписейВыгружено = 0;
	ЗаписейВсего     = ТаблицаВыгрузки.Количество();
	
	Для Каждого Позиция Из ТаблицаВыгрузки  Цикл
		
		Если ЗаписьВПакете = 0 Тогда
		    МассивТоваров.Очистить();
		КонецЕсли;
		МассивТоваров.Добавить(Позиция);
		
		ЗаписейВыгружено  = ЗаписейВыгружено + 1;
		ЗаписьВПакете = ЗаписьВПакете + 1;
		
		Если (ЗаписьВПакете = РазмерПакета) ИЛИ (ЗаписейВыгружено = ЗаписейВсего) Тогда  
			ДанныеДляВыгрузки = СформироватьТаблицуТоваровТСД(МассивТоваров, ПолнаяВыгрузка);
			ПакетыДляВыгрузки.Добавить(ДанныеДляВыгрузки);
			ЗаписьВПакете = 0;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ПакетыДляВыгрузки;
	
КонецФункции

// Конец области "Программный интерфейс "ТСД"

// Область "Программный интерфейс "Весы с печатью этикеток"

// Сформировать таблицу товаров в XML структуре для весов с печатью этикеток.
//
Функция СформироватьТаблицуТоваровВесыСПечатьюЭтикеток(ДанныеЗагрузки) Экспорт
	
	ЗаписьXML = Новый ЗаписьXML; 
	ЗаписьXML.УстановитьСтроку("UTF-8");
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Table");
	Для Каждого Позиция Из ДанныеЗагрузки  Цикл
		ЗаписьXML.ЗаписатьНачалоЭлемента("Record");
		ЗаписьXML.ЗаписатьАтрибут("PLU"          , XMLСтрока(Позиция[0].Значение));
		ЗаписьXML.ЗаписатьАтрибут("Code"         , XMLСтрока(Позиция[1].Значение));
		ЗаписьXML.ЗаписатьАтрибут("Name"         , XMLСтрока(Позиция[2].Значение));
		ЗаписьXML.ЗаписатьАтрибут("Price"        , XMLСтрока(Позиция[3].Значение));
		ЗаписьXML.ЗаписатьАтрибут("Description"  , XMLСтрока(Позиция[4].Значение));
		ЗаписьXML.ЗаписатьАтрибут("ShelfLife"    , XMLСтрока(Позиция[5].Значение));
		ЗаписьXML.ЗаписатьАтрибут("IsWeightGoods", XMLСтрока(Позиция[6].Значение));
		ЗаписьXML.ЗаписатьКонецЭлемента();
	КонецЦикла;
	ЗаписьXML.ЗаписатьКонецЭлемента();
		
	Возврат ЗаписьXML.Закрыть();
	
КонецФункции

// Сформировать XML пакеты товаров для загрузки ТСД.
//      
Функция ПодготовитьПакетыДляЗагрузкиВВесыСПечатьюЭтикеток(ТаблицаВыгрузки, РазмерПакета) Экспорт
	
	ПакетыДляВыгрузки = Новый Массив();
	МассивТоваров = Новый Массив;
	
	ЗаписьВПакете    = 0;
	ЗаписейВыгружено = 0;
	ЗаписейВсего     = ТаблицаВыгрузки.Количество();
	
	Для Каждого Позиция Из ТаблицаВыгрузки  Цикл
		
		Если ЗаписьВПакете = 0 Тогда
		    МассивТоваров.Очистить();
		КонецЕсли;
		
		ВремНаименование = ?(Позиция.Свойство("Номенклатура"), Позиция.Номенклатура, "");
		ВремНаименование = ?(Позиция.Свойство("Наименование"), Позиция.Наименование, ВремНаименование);
		Если Позиция.Свойство("НаименованиеПолное") И Не ПустаяСтрока(Позиция.НаименованиеПолное) Тогда
			ВремНаименование = Позиция.НаименованиеПолное;
		КонецЕсли;
		
		СтрокаМассиваТоваров = Новый СписокЗначений; 
		СтрокаМассиваТоваров.Добавить(Число(Позиция.PLU));
		СтрокаМассиваТоваров.Добавить(Число(Позиция.Код));
		СтрокаМассиваТоваров.Добавить(ВремНаименование);
		СтрокаМассиваТоваров.Добавить(?(Позиция.Свойство("Цена"), Позиция.Цена, 0));
		СтрокаМассиваТоваров.Добавить(?(Позиция.Свойство("ОписаниеТовара"), Позиция.ОписаниеТовара, ""));
		СтрокаМассиваТоваров.Добавить(?(Позиция.Свойство("СрокХранения"), Позиция.СрокХранения, 0));
		СтрокаМассиваТоваров.Добавить(?(Позиция.Свойство("ВесовойТовар"), Позиция.ВесовойТовар, Истина));
		МассивТоваров.Добавить(СтрокаМассиваТоваров);
		
		ЗаписейВыгружено  = ЗаписейВыгружено + 1;
		ЗаписьВПакете = ЗаписьВПакете + 1;
		
		Если (ЗаписьВПакете = РазмерПакета) ИЛИ (ЗаписейВыгружено = ЗаписейВсего) Тогда  
			ДанныеДляВыгрузки = СформироватьТаблицуТоваровВесыСПечатьюЭтикеток(МассивТоваров);
			ПакетыДляВыгрузки.Добавить(ДанныеДляВыгрузки);
			ЗаписьВПакете = 0;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ПакетыДляВыгрузки;
	
КонецФункции

// Конец области "Программный интерфейс "Весы с печатью этикеток"

// Сформировать таблицу параметров в XML для операции с ФН.
//
Функция СформироватьТаблицуПараметровДляОперацииФН(СтруктураПараметров) Экспорт
	
	ЗаписьXML = Новый ЗаписьXML; 
	ЗаписьXML.УстановитьСтроку("UTF-8");
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Parameters");
	ЗаписьXML.ЗаписатьАтрибут("CashierName" , XMLСтрока(?(СтруктураПараметров.Свойство("Кассир")   , XMLСтрока(СтруктураПараметров.Кассир), НСтр("ru='Администратор'"))));
	ЗаписьXML.ЗаписатьАтрибут("CashierVATIN", XMLСтрока(?(СтруктураПараметров.Свойство("КассирИНН"), XMLСтрока(СтруктураПараметров.КассирИНН), "")));
	// ФФД 1.0.0
	ЗаписьXML.ЗаписатьАтрибут("KKTNumber"          , XMLСтрока(СтруктураПараметров.РегистрационныйНомерККТ));
	ЗаписьXML.ЗаписатьАтрибут("OFDVATIN"           , XMLСтрока(СтруктураПараметров.ОрганизацияОФДИНН));
	ЗаписьXML.ЗаписатьАтрибут("OFDOrganizationName", XMLСтрока(СтруктураПараметров.ОрганизацияОФДНазвание));
	ЗаписьXML.ЗаписатьАтрибут("OrganizationName"   , XMLСтрока(СтруктураПараметров.ОрганизацияНазвание));
	ЗаписьXML.ЗаписатьАтрибут("VATIN"              , XMLСтрока(СтруктураПараметров.ОрганизацияИНН));
	ЗаписьXML.ЗаписатьАтрибут("AddressSettle"      , XMLСтрока(СтруктураПараметров.АдресУстановкиККТ));
	ЗаписьXML.ЗаписатьАтрибут("TaxVariant"         , XMLСтрока(СтруктураПараметров.КодыСистемыНалогообложения));
	ЗаписьXML.ЗаписатьАтрибут("OfflineMode"        , XMLСтрока(СтруктураПараметров.ПризнакАвтономногоРежима));
	ЗаписьXML.ЗаписатьАтрибут("DataEncryption"     , XMLСтрока(СтруктураПараметров.ПризнакШифрованиеДанных));
	ЗаписьXML.ЗаписатьАтрибут("ServiceSign"        , XMLСтрока(СтруктураПараметров.ПризнакРасчетовЗаУслуги));
	ЗаписьXML.ЗаписатьАтрибут("BSOSing"            , XMLСтрока(СтруктураПараметров.ПризнакФормированияТолькоБСО));
	ЗаписьXML.ЗаписатьАтрибут("CalcOnlineSign"     , XMLСтрока(СтруктураПараметров.ПризнакРасчетовТолькоВИнтернет));
	ЗаписьXML.ЗаписатьАтрибут("AutomaticMode"      , XMLСтрока(СтруктураПараметров.ПризнакАвтоматическогоРежима));
	ЗаписьXML.ЗаписатьАтрибут("AutomaticNumber"    , XMLСтрока(СтруктураПараметров.НомерАвтоматаДляАвтоматическогоРежима));
	// ФФД 1.0.5 & 1.1
	ЗаписьXML.ЗаписатьАтрибут("PlaceSettle"        , XMLСтрока(СтруктураПараметров.МестоПроведенияРасчетов));
	ЗаписьXML.ЗаписатьАтрибут("SaleExcisableGoods" , XMLСтрока(СтруктураПараметров.ПродажаПодакцизногоТовара));
	ЗаписьXML.ЗаписатьАтрибут("SignOfGambling"     , XMLСтрока(СтруктураПараметров.ПроведенияАзартныхИгр));
	ЗаписьXML.ЗаписатьАтрибут("SignOfLottery"      , XMLСтрока(СтруктураПараметров.ПроведенияЛотерей));
	ЗаписьXML.ЗаписатьАтрибут("SignOfAgent"        , XMLСтрока(СтруктураПараметров.ПризнакиАгента));
	ЗаписьXML.ЗаписатьАтрибут("PrinterAutomatic"   , XMLСтрока(СтруктураПараметров.УстановкаПринтераВАвтомате));
	// Изменение параметров регистрации.
	ЗаписьXML.ЗаписатьАтрибут("ReasonCode"         , XMLСтрока(СтруктураПараметров.КодПричиныПеререгистрации));
	Если Не ПустаяСтрока(СтруктураПараметров.КодыПричинИзмененияСведений) Тогда
		ЗаписьXML.ЗаписатьАтрибут("InfoChangesReasonsCodes", XMLСтрока(СтруктураПараметров.КодыПричинИзмененияСведений));
	КонецЕсли;
	
	Если Не ПустаяСтрока(СтруктураПараметров.ОтправительEmail) Тогда
		ЗаписьXML.ЗаписатьАтрибут("SenderEmail", XMLСтрока(СтруктураПараметров.ОтправительEmail));
	КонецЕсли;
	Если Не ПустаяСтрока(СтруктураПараметров.АдресСайтаФНС) Тогда
		ЗаписьXML.ЗаписатьАтрибут("FNSWebSite", XMLСтрока(СтруктураПараметров.АдресСайтаФНС));
	КонецЕсли;
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	Возврат ЗаписьXML.Закрыть();
	
КонецФункции

// Получить таблицу меток RFID.
//
// Возвращаемое значение
//  Массив
// 
Функция МеткиRFID(ДанныеМеток) Экспорт
	
	Результат = Новый Массив();
	
	ЧтениеXML = Новый ЧтениеXML; 
	ЧтениеXML.УстановитьСтроку(ДанныеМеток);
	ЧтениеXML.ПерейтиКСодержимому();
	
	Если ЧтениеXML.Имя = "Table" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда  
		Пока ЧтениеXML.Прочитать() Цикл  
			Если ЧтениеXML.Имя = "Tag" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда  
				
				// Получение банков памяти считанной метки.
				TID = ЧтениеXML.ЗначениеАтрибута("TID");
				EPC = ЧтениеXML.ЗначениеАтрибута("EPC");
				USER = ЧтениеXML.ЗначениеАтрибута("USER");
				// Декодирование банка EPC по формату SGTIN.  
				ПозицияДанных = МенеджерОборудованияКлиентСервер.ДекодированиеДанныхSGTIN(EPC);
				ПозицияДанных.Вставить("TID" , TID);  // Добавляем в структура значения TID чипа метки.
				ПозицияДанных.Вставить("USER", USER); // Добавляем в структура значения банка USER.
				ПозицияДанных.Вставить("UserMemory", МенеджерОборудованияКлиентСервер.ПреобразоватьHEXВСтроку(USER));
				
				Результат.Добавить(ПозицияДанных);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Функция получает значение атрибута текущего элемента.
//
Функция ПрочитатьАтрибут(ЧтениеXML, ИмяАтрибута, ЗначениеАтрибута)
	
	Значение = ЧтениеXML.ЗначениеАтрибута(ИмяАтрибута);
	
	Если Значение = Неопределено Тогда
		ЗначениеАтрибута = Неопределено;
		Возврат Ложь;
	Иначе
		ЗначениеАтрибута = XMLЗначение(Тип("Строка"), Значение);
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

Функция ПрочитатьЭлементXML(ЧтениеXML, ТекстСообщенияОбОшибке)
	
	Попытка
		Результат = ЧтениеXML.Прочитать();
	Исключение
		ТекстСообщенияОбОшибке = НСтр("ru='При чтении XML-описания макета произошла ошибка.'");
		Результат = Ложь;
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Процедура записывает значение атрибута текущего элемента.
//
Процедура ЗаписатьАтрибутЭлемента(ЗаписьXML, ИмяАтрибута, ЗначениеАтрибута, ФорматнаяСтрока="ЧРД=.; ЧН=0; ЧГ=0; БЛ=false; БИ=true")
	
	Если ЗначениеЗаполнено(ЗначениеАтрибута) ИЛИ ТипЗнч(ЗначениеАтрибута)=Тип("Число") ИЛИ ИмяАтрибута="Value" Тогда
		ЗаписьXML.ЗаписатьАтрибут(ИмяАтрибута, XMLСтрока(Формат(ЗначениеАтрибута, ФорматнаяСтрока)));
	КонецЕсли;
	
КонецПроцедуры

// Функция формирует структуру с описанием макета.
//
Функция ПолучитьОписаниеМакета(Источник, СообщениеОбОшибке, Результат) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Поля", Новый Массив);

	ЧтениеXML = Новый ЧтениеXML();
	ПараметрыЧтения = Новый ПараметрыЧтенияXML("1.0");
	ЧтениеXML.УстановитьСтроку(Источник, ПараметрыЧтения);

	ТекстСообщенияОбОшибке = "";
	
	Пока ПрочитатьЭлементXML(ЧтениеXML, ТекстСообщенияОбОшибке) Цикл

		ЗначениеАтрибута = Неопределено;

		Если ЧтениеXML.Имя="Formatting" И ЧтениеXML.ТипУзла=ТипУзлаXML.НачалоЭлемента Тогда			

			Если ПрочитатьАтрибут(ЧтениеXML, "Width", ЗначениеАтрибута) Тогда				
				Результат.Вставить("Ширина", Число(ЗначениеАтрибута));				
			Иначе				
				СообщениеОбОшибке = НСтр("ru='При чтении файла атрибута Width элемента Formatting произошла ошибка.'");
				Возврат Ложь;				
			КонецЕсли;

			Если ПрочитатьАтрибут(ЧтениеXML, "Height", ЗначениеАтрибута) Тогда				
				Результат.Вставить("Высота", Число(ЗначениеАтрибута));				
			Иначе				
				СообщениеОбОшибке = НСтр("ru='При чтении файла атрибута Height элемента Formatting произошла ошибка.'");
				Возврат Ложь;				
			КонецЕсли;

			Если ПрочитатьАтрибут(ЧтениеXML, "Orientation", ЗначениеАтрибута) Тогда				
				Результат.Вставить("Ориентация", Число(ЗначениеАтрибута));				
			Иначе				
				Результат.Вставить("Ориентация", 0);				
			КонецЕсли;
			
			Если ПрочитатьАтрибут(ЧтениеXML, "Scale", ЗначениеАтрибута) Тогда
				Результат.Вставить("Масштаб", Число(ЗначениеАтрибута));
			Иначе
				Результат.Вставить("Масштаб", 1);
			КонецЕсли;
			
		ИначеЕсли (ЧтениеXML.Имя="Text" ИЛИ ЧтениеXML.Имя="Barcode" ИЛИ ЧтениеXML.Имя="Image" ИЛИ ЧтениеXML.Имя="UserData") И ЧтениеXML.ТипУзла=ТипУзлаXML.НачалоЭлемента Тогда

			НовоеПоле = Новый Структура;			
			НовоеПоле.Вставить("Тип", ЧтениеXML.Имя);			

			Если ПрочитатьАтрибут(ЧтениеXML, "FieldName", ЗначениеАтрибута) Тогда				
				НовоеПоле.Вставить("Наименование", ЗначениеАтрибута);				
			Иначе				
				СообщениеОбОшибке = НСтр("ru='При чтении файла атрибута FieldName элемента UserData произошла ошибка.'");
				Возврат Ложь;				
			КонецЕсли;

			Если ПрочитатьАтрибут(ЧтениеXML, "TypeFill", ЗначениеАтрибута) Тогда

				Если ЗначениеАтрибута=Неопределено Тогда					
					СообщениеОбОшибке = НСтр("ru='При чтении файла атрибута TypeFill элемента UserData произошла ошибка.'");
					Возврат Ложь;					
				КонецЕсли;

				НовоеПоле.Вставить("ТипЗаполнения", ЗначениеАтрибута);

				Если ЗначениеАтрибута="Parameter" Тогда					
					Если ПрочитатьАтрибут(ЧтениеXML, "ValueDefault", ЗначениеАтрибута) Тогда						
						НовоеПоле.Вставить("ЗначениеПоУмолчанию", ЗначениеАтрибута);						
					КонецЕсли;

					Если ПрочитатьАтрибут(ЧтениеXML, "Value", ЗначениеАтрибута) Тогда

						Если ЗначениеАтрибута=Неопределено Тогда							
							СообщениеОбОшибке = НСтр("ru='При чтении файла атрибута Value элемента UserData произошла ошибка.'");
							Возврат Ложь;							
						Иначе							
							НовоеПоле.Вставить("Значение", ЗначениеАтрибута);
						КонецЕсли;

					Иначе						
						СообщениеОбОшибке = НСтр("ru='При чтении файла атрибута Value элемента UserData произошла ошибка.'");
						Возврат Ложь;						
					КонецЕсли;

				Иначе

					Если ПрочитатьАтрибут(ЧтениеXML, "Value", ЗначениеАтрибута) Тогда
						НовоеПоле.Вставить("Значение", ЗначениеАтрибута);
					КонецЕсли;

				КонецЕсли;
			Иначе				
				СообщениеОбОшибке = НСтр("ru='При чтении файла атрибута TypeFill элемента UserData произошла ошибка.'");
				Возврат Ложь;				
			КонецЕсли;

			Если НовоеПоле.Тип<>"UserData" Тогда				

				Если ПрочитатьАтрибут(ЧтениеXML, "Left", ЗначениеАтрибута) Тогда					
					НовоеПоле.Вставить("Лево", Число(ЗначениеАтрибута));					
				Иначе					
					СообщениеОбОшибке = НСтр("ru='При чтении файла атрибута Left элемента Text произошла ошибка.'");
					Возврат Ложь;					
				КонецЕсли;

				Если ПрочитатьАтрибут(ЧтениеXML, "Top", ЗначениеАтрибута) Тогда					
					НовоеПоле.Вставить("Верх", Число(ЗначениеАтрибута));					
				Иначе					
					СообщениеОбОшибке = НСтр("ru='При чтении файла атрибута Top элемента Text произошла ошибка.'");
					Возврат Ложь;					
				КонецЕсли;

				Если ПрочитатьАтрибут(ЧтениеXML, "Width", ЗначениеАтрибута) Тогда					
					НовоеПоле.Вставить("Право", НовоеПоле.Лево + Число(ЗначениеАтрибута) - 1);					
				Иначе					
					СообщениеОбОшибке = НСтр("ru='При чтении файла атрибута Width элемента Text произошла ошибка.'");
					Возврат Ложь;					
				КонецЕсли;

				Если ПрочитатьАтрибут(ЧтениеXML, "Height", ЗначениеАтрибута) Тогда					
					НовоеПоле.Вставить("Низ", НовоеПоле.Верх + Число(ЗначениеАтрибута) - 1);					
				Иначе					
					СообщениеОбОшибке = НСтр("ru='При чтении файла атрибута Height элемента Text произошла ошибка.'");
					Возврат Ложь;					
				КонецЕсли;

				Если ПрочитатьАтрибут(ЧтениеXML, "Orientation", ЗначениеАтрибута) Тогда					
					НовоеПоле.Вставить("Ориентация", Число(ЗначениеАтрибута));					
				КонецЕсли;				

				Если НовоеПоле.Тип="Text" Тогда

					Если ПрочитатьАтрибут(ЧтениеXML, "FontName", ЗначениеАтрибута) Тогда
						НовоеПоле.Вставить("ИмяШрифта", ЗначениеАтрибута);
					КонецЕсли;

					Если ПрочитатьАтрибут(ЧтениеXML, "FontSize", ЗначениеАтрибута) Тогда
						НовоеПоле.Вставить("РазмерШрифта", Число(ЗначениеАтрибута));
					Иначе
						СообщениеОбОшибке = НСтр("ru='При чтении файла атрибута FontSize элемента Text произошла ошибка.'");
						Возврат Ложь;
					КонецЕсли;

					Если ПрочитатьАтрибут(ЧтениеXML, "FontStyle", ЗначениеАтрибута) Тогда
						ЗначениеСтильШрифта = ЗначениеАтрибута;
						НовоеПоле.Вставить("Жирный", Найти(ЗначениеСтильШрифта, "Bold")>0);
						НовоеПоле.Вставить("Наклонный", Найти(ЗначениеСтильШрифта, "Italic")>0);
						НовоеПоле.Вставить("Подчеркивание",  Найти(ЗначениеСтильШрифта, "Underline")>0);
						НовоеПоле.Вставить("Зачеркивание", Найти(ЗначениеСтильШрифта, "Strikeout")>0);
					КонецЕсли;

					Если ПрочитатьАтрибут(ЧтениеXML, "Align", ЗначениеАтрибута) Тогда
						НовоеПоле.Вставить("ПоложениеПоГоризонтали", ЗначениеАтрибута);
					КонецЕсли;

					Если ПрочитатьАтрибут(ЧтениеXML, "VAlign", ЗначениеАтрибута) Тогда
						НовоеПоле.Вставить("ПоложениеПоВертикали", ЗначениеАтрибута);
					КонецЕсли;

					Если ПрочитатьАтрибут(ЧтениеXML, "Multiline", ЗначениеАтрибута) Тогда
						НовоеПоле.Вставить("Многострочность", ЗначениеАтрибута);
					КонецЕсли;

				ИначеЕсли НовоеПоле.Тип="Barcode" Тогда

					Если ПрочитатьАтрибут(ЧтениеXML, "Type", ЗначениеАтрибута) Тогда
						НовоеПоле.Вставить("ТипШтрихкода", ЗначениеАтрибута);
					Иначе
						СообщениеОбОшибке = НСтр("ru='При чтении файла атрибута Type элемента Barcode произошла ошибка.'");
						Возврат Ложь;
					КонецЕсли;

					Если ПрочитатьАтрибут(ЧтениеXML, "PrintHRI", ЗначениеАтрибута) Тогда						
						НовоеПоле.Вставить("ПодписьШтрихкода", ЗначениеАтрибута);
						ПодписьШтрихкода = ЗначениеАтрибута;						
					Иначе						
						ПодписьШтрихкода = Истина;						
					КонецЕсли;

					Если ПрочитатьАтрибут(ЧтениеXML, "FontSize", ЗначениеАтрибута) Тогда

						Если ПодписьШтрихкода И ЗначениеАтрибута=Неопределено Тогда							
							СообщениеОбОшибке = НСтр("ru='При чтении файла атрибута FontSize элемента Barcode произошла ошибка. При значении атрибута PrintHRI = True указание значения атрибута FontSize обязательно.'");
							Возврат Ложь;							
						КонецЕсли;

						НовоеПоле.Вставить("РазмерШрифтаПодписи", Число(ЗначениеАтрибута));

					КонецЕсли;

					Если ПрочитатьАтрибут(ЧтениеXML, "CheckSymbol", ЗначениеАтрибута) Тогда
						НовоеПоле.Вставить("КонтрольныйСимвол", ЗначениеАтрибута);
					КонецЕсли;

				КонецЕсли;

				Если НовоеПоле.Тип = "Text" ИЛИ НовоеПоле.Тип = "Image" Тогда

					Если ПрочитатьАтрибут(ЧтениеXML, "Border", ЗначениеАтрибута) Тогда
						ЗначениеBorder = ЗначениеАтрибута;
						НовоеПоле.Вставить("РамкаСлева", Найти(ЗначениеBorder, "Left")>0);
						НовоеПоле.Вставить("РамкаСверху", Найти(ЗначениеBorder, "Top")>0);
						НовоеПоле.Вставить("РамкаСправа",  Найти(ЗначениеBorder, "Right")>0);
						НовоеПоле.Вставить("РамкаСнизу", Найти(ЗначениеBorder, "Bottom")>0);

						Если ЗначениеЗаполнено(ЗначениеBorder) Тогда							

							Если ПрочитатьАтрибут(ЧтениеXML, "BorderStyle", ЗначениеАтрибута) Тогда
								НовоеПоле.Вставить("ТипРамки", ЗначениеАтрибута);
							КонецЕсли;

							Если ПрочитатьАтрибут(ЧтениеXML, "BorderWidth", ЗначениеАтрибута) Тогда
								НовоеПоле.Вставить("ТолщинаРамки", Число(ЗначениеАтрибута));
							КонецЕсли;

						КонецЕсли;

					КонецЕсли;

				КонецЕсли;

			КонецЕсли;

			Если НовоеПоле.Тип="UserData" ИЛИ НовоеПоле.Тип="Text" Тогда
				
				Если ПрочитатьАтрибут(ЧтениеXML, "Format", ЗначениеАтрибута) Тогда
					НовоеПоле.Вставить("Формат", ЗначениеАтрибута);
				КонецЕсли;
				
			КонецЕсли;
			
			Результат.Поля.Добавить(НовоеПоле);

		КонецЕсли;

	КонецЦикла;

	Если ЗначениеЗаполнено(ТекстСообщенияОбОшибке) Тогда
		СообщениеОбОшибке = ТекстСообщенияОбОшибке;
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

// Функция формирует текст XML для передачи его принтеру этикеток.
//
Функция СформироватьДанныеДляПринтераЭтикеток(МассивЭтикеток, МакетЭтикетки) Экспорт
	
	ФорматыПолей = Новый Структура;
	
	ЗаписьXML = Новый ЗаписьXML; 
	ЗаписьXML.УстановитьСтроку("UTF-8");
	ЗаписьXML.ЗаписатьОбъявлениеXML();

	ЗаписьXML.ЗаписатьНачалоЭлемента("Data");

	Если ЗначениеЗаполнено(МакетЭтикетки) Тогда
		ЗаписьXML.ЗаписатьНачалоЭлемента("Formatting");

		Если МакетЭтикетки.Ориентация = 0 ИЛИ МакетЭтикетки.Ориентация = 180 Тогда
			ЗаписатьАтрибутЭлемента(ЗаписьXML, "Width", МакетЭтикетки.Ширина);
			ЗаписатьАтрибутЭлемента(ЗаписьXML, "Height", МакетЭтикетки.Высота);
		Иначе
			ЗаписатьАтрибутЭлемента(ЗаписьXML, "Width", МакетЭтикетки.Высота);
			ЗаписатьАтрибутЭлемента(ЗаписьXML, "Height", МакетЭтикетки.Ширина);
		КонецЕсли;

		Для Каждого ТекЭлемент Из МакетЭтикетки.Поля Цикл

			ЗаписьXML.ЗаписатьНачалоЭлемента(ТекЭлемент.Тип);
			ЗаписатьАтрибутЭлемента(ЗаписьXML, "FieldName", ТекЭлемент.Наименование);

			Если ТекЭлемент.Тип <> "UserData" Тогда
				
				Если МакетЭтикетки.Ориентация = 0 Тогда
					ЗаписатьАтрибутЭлемента(ЗаписьXML, "Left", ТекЭлемент.Лево-1);
				ИначеЕсли МакетЭтикетки.Ориентация = 90 Тогда
					ЗаписатьАтрибутЭлемента(ЗаписьXML, "Left", ТекЭлемент.Верх-1);
				ИначеЕсли МакетЭтикетки.Ориентация = 180 Тогда
					ЗаписатьАтрибутЭлемента(ЗаписьXML, "Left", МакетЭтикетки.Ширина - ТекЭлемент.Право);
				ИначеЕсли МакетЭтикетки.Ориентация = 270 Тогда
					ЗаписатьАтрибутЭлемента(ЗаписьXML, "Left", МакетЭтикетки.Высота - ТекЭлемент.Низ);
				КонецЕсли;

				Если МакетЭтикетки.Ориентация = 0 Тогда
					ЗаписатьАтрибутЭлемента(ЗаписьXML, "Top", ТекЭлемент.Верх-1);
				ИначеЕсли МакетЭтикетки.Ориентация = 90 Тогда
					ЗаписатьАтрибутЭлемента(ЗаписьXML, "Top", МакетЭтикетки.Ширина - ТекЭлемент.Право);
				ИначеЕсли МакетЭтикетки.Ориентация = 180 Тогда
					ЗаписатьАтрибутЭлемента(ЗаписьXML, "Top", МакетЭтикетки.Высота - ТекЭлемент.Низ);
				ИначеЕсли МакетЭтикетки.Ориентация = 270 Тогда
					ЗаписатьАтрибутЭлемента(ЗаписьXML, "Top", ТекЭлемент.Лево-1);
				КонецЕсли;

				Если МакетЭтикетки.Ориентация = 0 ИЛИ МакетЭтикетки.Ориентация = 180 Тогда
					ЗаписатьАтрибутЭлемента(ЗаписьXML, "Width", ТекЭлемент.Право - ТекЭлемент.Лево+1);
					ЗаписатьАтрибутЭлемента(ЗаписьXML, "Height", ТекЭлемент.Низ - ТекЭлемент.Верх+1);
				Иначе
					ЗаписатьАтрибутЭлемента(ЗаписьXML, "Width", ТекЭлемент.Низ - ТекЭлемент.Верх+1);
					ЗаписатьАтрибутЭлемента(ЗаписьXML, "Height", ТекЭлемент.Право - ТекЭлемент.Лево+1);
				КонецЕсли;

				Если МакетЭтикетки.Ориентация <> 0 Тогда

					Если ТекЭлемент.Свойство("Ориентация") Тогда

						Если ЗначениеЗаполнено(ТекЭлемент.Ориентация) Тогда
							ОриентацияПоля = Число(ТекЭлемент.Ориентация);
						Иначе
							ОриентацияПоля = 0;
						КонецЕсли;

					Иначе
						ОриентацияПоля = 0;
					КонецЕсли;

					НовоеЗначениеОриентации = ОриентацияПоля + Число(МакетЭтикетки.Ориентация);
					НовоеЗначениеОриентации = Формат(?(НовоеЗначениеОриентации>270, НовоеЗначениеОриентации-360, НовоеЗначениеОриентации), "ЧГ=0");
					ЗаписатьАтрибутЭлемента(ЗаписьXML, "Orientation", НовоеЗначениеОриентации);

				Иначе

					Если ТекЭлемент.Свойство("Ориентация") Тогда
						ЗаписатьАтрибутЭлемента(ЗаписьXML, "Orientation", ТекЭлемент.Ориентация);
					КонецЕсли;

				КонецЕсли;
				
			КонецЕсли;
			
			Если ТекЭлемент.ТипЗаполнения = "Parameter" Тогда

				Если ТекЭлемент.Свойство("ЗначениеПоУмолчанию") Тогда
					
					Если ТекЭлемент.Тип = "Text" И ТекЭлемент.Свойство("Формат") И ЗначениеЗаполнено(ТекЭлемент.Формат) Тогда
						ЗаписатьАтрибутЭлемента(ЗаписьXML, "Value", ТекЭлемент.ЗначениеПоУмолчанию, ТекЭлемент.Формат);
					Иначе
						ЗаписатьАтрибутЭлемента(ЗаписьXML, "Value", ТекЭлемент.ЗначениеПоУмолчанию);
					КонецЕсли;
					
				КонецЕсли;

			Иначе
				ЗаписатьАтрибутЭлемента(ЗаписьXML, "Static", Истина);
				Если ТекЭлемент.Тип = "Text" И ТекЭлемент.Свойство("Формат") И ЗначениеЗаполнено(ТекЭлемент.Формат) Тогда
					ЗаписатьАтрибутЭлемента(ЗаписьXML, "Value", ТекЭлемент.Значение, ТекЭлемент.Формат);
				Иначе
					ЗаписатьАтрибутЭлемента(ЗаписьXML, "Value", ТекЭлемент.Значение);
				КонецЕсли;
			КонецЕсли;
			
			Если ТекЭлемент.Тип = "Text" Тогда
				
				Если ТекЭлемент.Свойство("Формат") И ЗначениеЗаполнено(ТекЭлемент.Формат) Тогда
					ФорматыПолей.Вставить("Формат" + СтрЗаменить(ТекЭлемент.Наименование, "-", ""), ТекЭлемент.Формат);
				КонецЕсли;
				
				Если ТекЭлемент.Свойство("ИмяШрифта") Тогда
					ЗаписатьАтрибутЭлемента(ЗаписьXML, "FontName", ТекЭлемент.ИмяШрифта);
				КонецЕсли;

				ЗаписатьАтрибутЭлемента(ЗаписьXML, "FontSize", ТекЭлемент.РазмерШрифта);

				СтильШрифта = "";
				
				Если ТекЭлемент.Свойство("Жирный") Тогда
					Если ТекЭлемент.Жирный Тогда
						СтильШрифта = "Bold";
					КонецЕсли;
				КонецЕсли;
				
				Если ТекЭлемент.Свойство("Наклонный") Тогда
					Если ТекЭлемент.Наклонный Тогда
						СтильШрифта = ?(СтильШрифта <> "", СтильШрифта + " ", "") + "Italic";
					КонецЕсли;
				КонецЕсли;
				
				Если ТекЭлемент.Свойство("Подчеркивание") Тогда
					Если ТекЭлемент.Подчеркивание Тогда
						СтильШрифта = ?(СтильШрифта <> "", СтильШрифта + " ", "") + "Underline";
					КонецЕсли;
				КонецЕсли;
				
				Если ТекЭлемент.Свойство("Зачеркивание") Тогда
					Если ТекЭлемент.Зачеркивание Тогда
						СтильШрифта = ?(СтильШрифта <> "", СтильШрифта + " ", "") + "StrikeOut";
					КонецЕсли;
				КонецЕсли;
				
				ЗаписатьАтрибутЭлемента(ЗаписьXML, "FontStyle", СтильШрифта);

				ВыравниваниеГоризонтальное = "Left";

				Если ТекЭлемент.Свойство("ПоложениеПоГоризонтали") Тогда

					Если ЗначениеЗаполнено(ТекЭлемент.ПоложениеПоГоризонтали) Тогда
						ВыравниваниеГоризонтальное = ТекЭлемент.ПоложениеПоГоризонтали;
					КонецЕсли;

				КонецЕсли;

				ВыравниваниеВертикальное = "Top";

				Если ТекЭлемент.Свойство("ПоложениеПоВертикали") Тогда

					Если ЗначениеЗаполнено(ТекЭлемент.ПоложениеПоВертикали) Тогда
						ВыравниваниеВертикальное = ТекЭлемент.ПоложениеПоВертикали;
					КонецЕсли;

				КонецЕсли;

				Если МакетЭтикетки.Ориентация = 0 Тогда
					ЗаписатьАтрибутЭлемента(ЗаписьXML, "Align", ВыравниваниеГоризонтальное);
					ЗаписатьАтрибутЭлемента(ЗаписьXML, "VAlign", ВыравниваниеВертикальное);
				ИначеЕсли МакетЭтикетки.Ориентация = 90 Тогда

					Если ВыравниваниеВертикальное="Top" Тогда
						ЗаписатьАтрибутЭлемента(ЗаписьXML, "Align", "Left");
					ИначеЕсли ВыравниваниеВертикальное="Center" Тогда
						ЗаписатьАтрибутЭлемента(ЗаписьXML, "Align", "Center");
					ИначеЕсли ВыравниваниеВертикальное="Bottom" Тогда
						ЗаписатьАтрибутЭлемента(ЗаписьXML, "Align", "Right");
					КонецЕсли;

					Если ВыравниваниеГоризонтальное="Left" Тогда
						ЗаписатьАтрибутЭлемента(ЗаписьXML, "VAlign", "Bottom");
					ИначеЕсли ВыравниваниеГоризонтальное="Center" Тогда
						ЗаписатьАтрибутЭлемента(ЗаписьXML, "VAlign", "Center");
					ИначеЕсли ВыравниваниеГоризонтальное="Right" Тогда
						ЗаписатьАтрибутЭлемента(ЗаписьXML, "VAlign", "Top");
					КонецЕсли;

				ИначеЕсли МакетЭтикетки.Ориентация = 180 Тогда

					Если ВыравниваниеГоризонтальное="Left" Тогда
						ЗаписатьАтрибутЭлемента(ЗаписьXML, "Align", "Right");
					ИначеЕсли ВыравниваниеГоризонтальное="Center" Тогда
						ЗаписатьАтрибутЭлемента(ЗаписьXML, "Align", "Center");
					ИначеЕсли ВыравниваниеГоризонтальное="Right" Тогда
						ЗаписатьАтрибутЭлемента(ЗаписьXML, "Align", "Left");
					КонецЕсли;

					Если ВыравниваниеВертикальное="Top" Тогда
						ЗаписатьАтрибутЭлемента(ЗаписьXML, "VAlign", "Bottom");
					ИначеЕсли ВыравниваниеВертикальное="Center" Тогда
						ЗаписатьАтрибутЭлемента(ЗаписьXML, "VAlign", "Center");
					ИначеЕсли ВыравниваниеВертикальное="Bottom" Тогда
						ЗаписатьАтрибутЭлемента(ЗаписьXML, "VAlign", "Top");
					КонецЕсли;

				ИначеЕсли МакетЭтикетки.Ориентация = 270 Тогда

					Если ВыравниваниеВертикальное="Top" Тогда
						ЗаписатьАтрибутЭлемента(ЗаписьXML, "Align", "Right");
					ИначеЕсли ВыравниваниеВертикальное="Center" Тогда
						ЗаписатьАтрибутЭлемента(ЗаписьXML, "Align", "Center");
					ИначеЕсли ВыравниваниеВертикальное="Bottom" Тогда
						ЗаписатьАтрибутЭлемента(ЗаписьXML, "Align", "Left");
					КонецЕсли;

					Если ВыравниваниеГоризонтальное="Left" Тогда
						ЗаписатьАтрибутЭлемента(ЗаписьXML, "VAlign", "Top");
					ИначеЕсли ВыравниваниеГоризонтальное="Center" Тогда
						ЗаписатьАтрибутЭлемента(ЗаписьXML, "VAlign", "Center");
					ИначеЕсли ВыравниваниеГоризонтальное="Right" Тогда
						ЗаписатьАтрибутЭлемента(ЗаписьXML, "VAlign", "Bottom");
					КонецЕсли;

				КонецЕсли;

				Если ТекЭлемент.Свойство("Многострочность") Тогда
					ЗаписатьАтрибутЭлемента(ЗаписьXML, "Multiline", ТекЭлемент.Многострочность);
				КонецЕсли;

			ИначеЕсли ТекЭлемент.Тип = "Barcode" Тогда

				ЗаписатьАтрибутЭлемента(ЗаписьXML, "Type", ТекЭлемент.ТипШтрихкода);

				Если ТекЭлемент.Свойство("ПодписьШтрихкода") Тогда
					ЗаписатьАтрибутЭлемента(ЗаписьXML, "PrintHRI", ТекЭлемент.ПодписьШтрихкода);

					Если ТекЭлемент.ПодписьШтрихкода Тогда
						ЗаписатьАтрибутЭлемента(ЗаписьXML, "FontSize", ТекЭлемент.РазмерШрифтаПодписи);
					КонецЕсли;

				КонецЕсли;

				Если ТекЭлемент.Свойство("КонтрольныйСимвол") Тогда
					ЗаписатьАтрибутЭлемента(ЗаписьXML, "CheckSymbol", ТекЭлемент.КонтрольныйСимвол);
				КонецЕсли;	

			КонецЕсли;

			Если ТекЭлемент.Тип = "Text" ИЛИ ТекЭлемент.Тип = "Image" Тогда

				Рамка = "";
				
				Если ТекЭлемент.Свойство("РамкаСлева") Тогда
					Если ТекЭлемент.РамкаСлева Тогда
						Рамка = "Left";
					КонецЕсли;
				КонецЕсли;
				
				Если ТекЭлемент.Свойство("РамкаСверху") Тогда
					Если ТекЭлемент.РамкаСверху Тогда
						Рамка = ?(Рамка <> "", Рамка + " ", "") + "Top";
					КонецЕсли;
				КонецЕсли;
				
				Если ТекЭлемент.Свойство("РамкаСправа") Тогда
					Если ТекЭлемент.РамкаСправа Тогда
						Рамка = ?(Рамка <> "", Рамка + " ", "") + "Right";
					КонецЕсли;
				КонецЕсли;
				
				Если ТекЭлемент.Свойство("РамкаСнизу") Тогда
					Если ТекЭлемент.РамкаСнизу Тогда
						Рамка = ?(Рамка <> "", Рамка + " ", "") + "Bottom";
					КонецЕсли;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(Рамка) Тогда
					
					Если МакетЭтикетки.Ориентация = 0 Тогда
						ЗаписатьАтрибутЭлемента(ЗаписьXML, "Border", Рамка);
					ИначеЕсли МакетЭтикетки.Ориентация = 90 Тогда
						Рамка=СтрЗаменить(Рамка, "Left", "B1ottom");
						Рамка=СтрЗаменить(Рамка, "Top", "L1eft");
						Рамка=СтрЗаменить(Рамка, "Right", "T1op");
						Рамка=СтрЗаменить(Рамка, "Bottom", "R1ight");
						Рамка=СтрЗаменить(Рамка, "1", "");
						ЗаписатьАтрибутЭлемента(ЗаписьXML, "Border", Рамка);
					ИначеЕсли МакетЭтикетки.Ориентация = 180 Тогда
						Рамка=СтрЗаменить(Рамка, "Left", "R1ight");
						Рамка=СтрЗаменить(Рамка, "Top", "B1ottom");
						Рамка=СтрЗаменить(Рамка, "Right", "L1eft");
						Рамка=СтрЗаменить(Рамка, "Bottom", "T1op");
						Рамка=СтрЗаменить(Рамка, "1", "");
						ЗаписатьАтрибутЭлемента(ЗаписьXML, "Border", Рамка);
					ИначеЕсли МакетЭтикетки.Ориентация = 270 Тогда
						Рамка=СтрЗаменить(Рамка, "Left", "T1op");
						Рамка=СтрЗаменить(Рамка, "Top", "R1ight");
						Рамка=СтрЗаменить(Рамка, "Right", "B1ottom");
						Рамка=СтрЗаменить(Рамка, "Bottom", "L1eft");
						Рамка=СтрЗаменить(Рамка, "1", "");
						ЗаписатьАтрибутЭлемента(ЗаписьXML, "Border", Рамка);
					КонецЕсли;
					
					Если ТекЭлемент.Свойство("ТипРамки") Тогда
						ЗаписатьАтрибутЭлемента(ЗаписьXML, "BorderStyle", ТекЭлемент.ТипРамки);
					КонецЕсли;
					
					Если ТекЭлемент.Свойство("ТолщинаРамки") Тогда
						ЗаписатьАтрибутЭлемента(ЗаписьXML, "BorderWidth", ТекЭлемент.ТолщинаРамки);
					КонецЕсли;
					
				КонецЕсли;

			КонецЕсли;

			ЗаписьXML.ЗаписатьКонецЭлемента();		

		КонецЦикла;

		ЗаписьXML.ЗаписатьКонецЭлемента();

	КонецЕсли;

	ЗаписьXML.ЗаписатьНачалоЭлемента("Labels");

	Для Каждого ТекЭтикетка Из МассивЭтикеток Цикл

		ЗаписьXML.ЗаписатьНачалоЭлемента("Label");

		Если ТекЭтикетка.Свойство("Количество") Тогда
			ЗаписатьАтрибутЭлемента(ЗаписьXML, "Quantity", ТекЭтикетка.Количество);
		КонецЕсли;

		Для Каждого ТекПоле Из ТекЭтикетка.Поля Цикл
			
			ЗаписьXML.ЗаписатьНачалоЭлемента("Record");
			ЗаписатьАтрибутЭлемента(ЗаписьXML, "FieldName", ТекПоле.ИмяПоля);
			Если ФорматыПолей.Свойство("Формат" + СтрЗаменить(ТекПоле.ИмяПоля, "-", "")) Тогда
				ЗаписатьАтрибутЭлемента(ЗаписьXML, "Value", ТекПоле.Значение, ФорматыПолей["Формат" + СтрЗаменить(ТекПоле.ИмяПоля, "-", "")]);
			Иначе
				ЗаписатьАтрибутЭлемента(ЗаписьXML, "Value", ТекПоле.Значение);
			КонецЕсли;
			ЗаписьXML.ЗаписатьКонецЭлемента();

		КонецЦикла;

		ЗаписьXML.ЗаписатьКонецЭлемента();

	КонецЦикла;

	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьКонецЭлемента();

	Возврат ЗаписьXML.Закрыть();
	
КонецФункции

// Сформировать XML пакеты товаров для загрузки ТСД.
//
Функция ПодготовитьПакетыДляПринтераЭтикеток(МассивЭтикеток, РазмерПакета, МакетЭтикетки = Неопределено) Экспорт
	
	ПакетыДляВыгрузки = Новый Массив();  
	МассивТоваров = Новый Массив;
	
	ПервыйПакет      = Истина;
	ЗаписьВПакете    = 0;
	ЗаписейВыгружено = 0;
	ЗаписейВсего     = МассивЭтикеток.Количество();
	
	Для Каждого Позиция Из МассивЭтикеток Цикл
		
		Если ЗаписьВПакете = 0 Тогда
		    МассивТоваров.Очистить();
		КонецЕсли;
		
		МассивТоваров.Добавить(Позиция);
		
		ЗаписейВыгружено  = ЗаписейВыгружено + 1;
		ЗаписьВПакете = ЗаписьВПакете + 1;
		
		Если (ЗаписьВПакете = РазмерПакета) ИЛИ (ЗаписейВыгружено = ЗаписейВсего) Тогда  
			ДанныеДляВыгрузки = СформироватьДанныеДляПринтераЭтикеток(МассивТоваров, ?(ПервыйПакет, МакетЭтикетки, Неопределено));
			ПакетыДляВыгрузки.Добавить(ДанныеДляВыгрузки);
			ЗаписьВПакете = 0;
			ПервыйПакет   = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ПакетыДляВыгрузки;
	
КонецФункции

// Функция формирует XML-описание макета.
//
Функция СохранитьXMLФайл(ШиринаЭтикетки, ВысотаЭтикетки, Ориентация, Поля) Экспорт

	ЗаписьXML = Новый ЗаписьXML();
	ЗаписьXML.УстановитьСтроку("UTF-8");
	ЗаписьXML.ЗаписатьОбъявлениеXML();

	ЗаписьXML.ЗаписатьНачалоЭлемента("Formatting");

	ЗаписатьАтрибутЭлемента(ЗаписьXML, "Width", ШиринаЭтикетки);
	ЗаписатьАтрибутЭлемента(ЗаписьXML, "Height", ВысотаЭтикетки);

	Если ЗначениеЗаполнено(Ориентация) Тогда
		ЗаписатьАтрибутЭлемента(ЗаписьXML, "Orientation", Ориентация);
	КонецЕсли;

	Для Каждого ТекЭлемент Из Поля Цикл

		ЗаписьXML.ЗаписатьНачалоЭлемента(ТекЭлемент.Тип);
		ЗаписатьАтрибутЭлемента(ЗаписьXML, "FieldName", ТекЭлемент.Наименование);

		Если ТекЭлемент.Тип <> "UserData" Тогда
			
			ЗаписатьАтрибутЭлемента(ЗаписьXML, "Left", ТекЭлемент.Лево);
			ЗаписатьАтрибутЭлемента(ЗаписьXML, "Top", ТекЭлемент.Верх);
			ЗаписатьАтрибутЭлемента(ЗаписьXML, "Width", ТекЭлемент.Право - ТекЭлемент.Лево + 1);
			ЗаписатьАтрибутЭлемента(ЗаписьXML, "Height", ТекЭлемент.Низ - ТекЭлемент.Верх + 1);

			Если ЗначениеЗаполнено(ТекЭлемент.Ориентация) Тогда
				ЗаписатьАтрибутЭлемента(ЗаписьXML, "Orientation", ТекЭлемент.Ориентация);
			КонецЕсли;
			
		Иначе
			
			ЗаписатьАтрибутЭлемента(ЗаписьXML, "Format", ТекЭлемент.Формат);

		КонецЕсли;

		Если ТекЭлемент.Тип = "Text" Тогда

			Если ЗначениеЗаполнено(ТекЭлемент.ИмяШрифта) Тогда
				ЗаписатьАтрибутЭлемента(ЗаписьXML, "FontName", ТекЭлемент.ИмяШрифта);
			КонецЕсли;

			ЗаписатьАтрибутЭлемента(ЗаписьXML, "FontSize", ТекЭлемент.РазмерШрифта);
			СтильШрифта = "";

			Если ТекЭлемент.Жирный Тогда
				СтильШрифта = "Bold";
			КонецЕсли;

			Если ТекЭлемент.Наклонный Тогда
				СтильШрифта = ?(ЗначениеЗаполнено(СтильШрифта), СтильШрифта + " ", "") + "Italic";
			КонецЕсли;

			Если ТекЭлемент.Подчеркивание Тогда
				СтильШрифта = ?(ЗначениеЗаполнено(СтильШрифта), СтильШрифта + " ", "") + "Underline";
			КонецЕсли;

			Если ТекЭлемент.Зачеркивание Тогда
				СтильШрифта = ?(ЗначениеЗаполнено(СтильШрифта), СтильШрифта + " ", "") + "Strikeout";
			КонецЕсли;

			Если ЗначениеЗаполнено(СтильШрифта) Тогда
				ЗаписатьАтрибутЭлемента(ЗаписьXML, "FontStyle", СтильШрифта);
			КонецЕсли;

			ЗаписатьАтрибутЭлемента(ЗаписьXML, "Align", ТекЭлемент.ПоложениеПоГоризонтали);
			ЗаписатьАтрибутЭлемента(ЗаписьXML, "VAlign", ТекЭлемент.ПоложениеПоВертикали);
			ЗаписатьАтрибутЭлемента(ЗаписьXML, "Multiline", ТекЭлемент.Многострочность);
			ЗаписатьАтрибутЭлемента(ЗаписьXML, "Format", ТекЭлемент.Формат);

		ИначеЕсли ТекЭлемент.Тип = "Barcode" Тогда

			Если ТекЭлемент.Тип = "Barcode" Тогда
				ЗаписатьАтрибутЭлемента(ЗаписьXML, "Type", ТекЭлемент.ТипШтрихкода);
			КонецЕсли;

			ЗаписатьАтрибутЭлемента(ЗаписьXML, "PrintHRI", ТекЭлемент.ПодписьШтрихкода);

			Если ТекЭлемент.ПодписьШтрихкода Тогда
				ЗаписатьАтрибутЭлемента(ЗаписьXML, "FontSize", ТекЭлемент.РазмерШрифтаПодписи);
				ЗаписатьАтрибутЭлемента(ЗаписьXML, "CheckSymbol", ТекЭлемент.КонтрольныйСимвол);
			КонецЕсли;

		КонецЕсли;

		Если ТекЭлемент.Тип = "Text" ИЛИ ТекЭлемент.Тип = "Image" Тогда

			Рамка = "";

			Если ТекЭлемент.РамкаСверху Тогда
				Рамка = "Top";
			КонецЕсли;

			Если ТекЭлемент.РамкаСлева Тогда
				Рамка = ?(ЗначениеЗаполнено(Рамка), Рамка + " ", "") + "Left";
			КонецЕсли;

			Если ТекЭлемент.РамкаСправа Тогда
				Рамка = ?(ЗначениеЗаполнено(Рамка), Рамка + " ", "") + "Right";
			КонецЕсли;

			Если ТекЭлемент.РамкаСнизу Тогда
				Рамка = ?(ЗначениеЗаполнено(Рамка), Рамка + " ", "") + "Bottom";
			КонецЕсли;

			Если ЗначениеЗаполнено(Рамка) Тогда
				ЗаписатьАтрибутЭлемента(ЗаписьXML, "Border", Рамка);
				ЗаписатьАтрибутЭлемента(ЗаписьXML, "BorderWidth", ТекЭлемент.ТолщинаРамки);
				ЗаписатьАтрибутЭлемента(ЗаписьXML, "BorderStyle", ТекЭлемент.ТипРамки);
			КонецЕсли;

		КонецЕсли;

		ЗаписатьАтрибутЭлемента(ЗаписьXML, "TypeFill", ТекЭлемент.ТипЗаполнения);
		ЗаписатьАтрибутЭлемента(ЗаписьXML, "Value", ТекЭлемент.Значение);

		Если ТекЭлемент.ТипЗаполнения<>"Constant" И ЗначениеЗаполнено(ТекЭлемент.ЗначениеПоУмолчанию) Тогда			
			ЗаписатьАтрибутЭлемента(ЗаписьXML, "ValueDefault", ТекЭлемент.ЗначениеПоУмолчанию);
		КонецЕсли;

		ЗаписьXML.ЗаписатьКонецЭлемента();

	КонецЦикла;

	ЗаписьXML.ЗаписатьКонецЭлемента();

	Возврат ЗаписьXML.Закрыть();
	
КонецФункции

// Функция определяет тип штрихкода по значение кода.
// 
Функция ОпределитьТипШтрихкода(Штрихкод) Экспорт
	
	Возврат МенеджерОборудованияКлиентСервер.ОпределитьТипШтрихкода(Штрихкод);
	
КонецФункции

// Функция выполняет формирование изображения штрихкода.
// Параметры: 
//   ПараметрыШтрихкода 
// Возвращаемое значение: 
//   Картинка - Картинка со сформированным штрихкодом или НЕОПРЕДЕЛЕНО.
Функция ПолучитьКартинкуШтрихкода(ПараметрыШтрихкода) Экспорт
	
	ВнешняяКомпонента = МенеджерОборудованияСерверПовтИсп.ПодключитьВнешнююКомпонентуПечатиШтрихкода();
	
	Если ВнешняяКомпонента = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Ошибка подключения внешней компоненты печати штрихкода.'");
	КонецЕсли;
	
	// Зададим размер формируемой картинки.
	ВнешняяКомпонента.Ширина = Окр(ПараметрыШтрихкода.Ширина);
	ВнешняяКомпонента.Высота = Окр(ПараметрыШтрихкода.Высота);
	
	ВнешняяКомпонента.АвтоТип = Ложь;
	
	Если ПараметрыШтрихкода.ТипКода = 99 Тогда
		ТипШтрихкодаВрем = ОпределитьТипШтрихкода(ПараметрыШтрихкода.Штрихкод);
		Если ТипШтрихкодаВрем = "EAN8" Тогда
			ВнешняяКомпонента.ТипКода = 0;
		ИначеЕсли ТипШтрихкодаВрем = "EAN13" Тогда
			ВнешняяКомпонента.ТипКода = 1;
			// Если код содержит контрольный символ, обязательно указываем.
			ВнешняяКомпонента.СодержитКС = СтрДлина(ПараметрыШтрихкода.Штрихкод) = 13;
		ИначеЕсли ТипШтрихкодаВрем = "EAN128" Тогда
			ВнешняяКомпонента.ТипКода = 2;
		ИначеЕсли ТипШтрихкодаВрем = "CODE39" Тогда
			ВнешняяКомпонента.ТипКода = 3;
		ИначеЕсли ТипШтрихкодаВрем = "CODE128" Тогда
			ВнешняяКомпонента.ТипКода = 4;
		ИначеЕсли ТипШтрихкодаВрем = "ITF14" Тогда
			ВнешняяКомпонента.ТипКода = 11;
		ИначеЕсли ТипШтрихкодаВрем = "QR" Тогда
			ВнешняяКомпонента.ТипКода = 16;
		ИначеЕсли ТипШтрихкодаВрем = "EAN13Addon2" Тогда
			ВнешняяКомпонента.ТипКода = 14;
		ИначеЕсли ТипШтрихкодаВрем = "EAN13Addon5" Тогда
			ВнешняяКомпонента.ТипКода = 15;
		Иначе
			ВнешняяКомпонента.АвтоТип = Истина;
		КонецЕсли;
	Иначе
		ВнешняяКомпонента.АвтоТип = Ложь;
		ВнешняяКомпонента.ТипКода = ПараметрыШтрихкода.ТипКода;
	КонецЕсли;
	
	Если ПараметрыШтрихкода.Свойство("ПрозрачныйФон") Тогда
		ВнешняяКомпонента.ПрозрачныйФон = ПараметрыШтрихкода.ПрозрачныйФон;
	КонецЕсли;
	
	ВнешняяКомпонента.ОтображатьТекст = ПараметрыШтрихкода.ОтображатьТекст;
	
	// Формируем картинку штрихкода.
	ВнешняяКомпонента.ЗначениеКода = ПараметрыШтрихкода.Штрихкод;
	// Угол поворота штрихкода.
	ВнешняяКомпонента.УголПоворота = ?(ПараметрыШтрихкода.Свойство("УголПоворота"), ПараметрыШтрихкода.УголПоворота, 0);
	// Уровень коррекции QR кода (L=0, M=1, Q=2, H=3).
	ВнешняяКомпонента.УровеньКоррекцииQR = ?(ПараметрыШтрихкода.Свойство("УровеньКоррекцииQR"), ПараметрыШтрихкода.УровеньКоррекцииQR, 1);
	
	// Если установленная нами ширина меньше минимально допустимой для этого штрихкода.
	Если ВнешняяКомпонента.Ширина < ВнешняяКомпонента.МинимальнаяШиринаКода Тогда
		ВнешняяКомпонента.Ширина = ВнешняяКомпонента.МинимальнаяШиринаКода;
	КонецЕсли;
	
	// Если установленная нами высота меньше минимально допустимой для этого штрихкода.
	Если ВнешняяКомпонента.Высота < ВнешняяКомпонента.МинимальнаяВысотаКода Тогда
		ВнешняяКомпонента.Высота = ВнешняяКомпонента.МинимальнаяВысотаКода;
	КонецЕсли;

	Если ПараметрыШтрихкода.Свойство("РазмерШрифта") И (ПараметрыШтрихкода.РазмерШрифта > 0) 
		И (ПараметрыШтрихкода.ОтображатьТекст) И (ВнешняяКомпонента.РазмерШрифта <> ПараметрыШтрихкода.РазмерШрифта) Тогда
		ВнешняяКомпонента.РазмерШрифта = ПараметрыШтрихкода.РазмерШрифта;
	КонецЕсли;
	
	// Сформируем картинку
	ДвоичныеДанныеКартинки = ВнешняяКомпонента.ПолучитьШтрихкод();
	
	// Если картинка сформировалась.
	Если ДвоичныеДанныеКартинки <> Неопределено Тогда
		// Формируем из двоичных данных.
		Возврат Новый Картинка(ДвоичныеДанныеКартинки);
	КонецЕсли;
	
	Возврат Неопределено;

КонецФункции

// Функция получает содержание текстовых файлов из временного хранилища.
// Параметры: 
//   ПомещенныеФайлы - массив содержащий элементы типа ОписаниеПередаваемогоФайла, из которых читается содержание.
// Возвращаемое значение: 
//   РезультатЧтения - структура с ключами:
//    - Успешно - булево.
//    - СодержаниеФайлов - массив структур, с ключами ОписаниеПереданногоФайла и ТекстСодержания.
//      или Неопределено, в случае Успешно = Ложь.
//    - ТекстОшибки - строка.
//
Функция ПолучитьСодержаниеТекстовыхФайловИзХранилища(ПомещенныеФайлы, Кодировка) Экспорт
	
	РезультатЧтения = Новый Структура;
	
	РезультатЧтения.Вставить("Успешно", Ложь);
	РезультатЧтения.Вставить("СодержаниеФайлов", Неопределено);
	РезультатЧтения.Вставить("ТекстОшибки", "");
	
	СодержаниеФайлов = Новый Массив;
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
	
	Для Каждого Файл Из ПомещенныеФайлы Цикл
		
		СтруктураСодержанияФайла = Новый Структура;
		
		ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(Файл.Хранение);
		
		Попытка
			
			ДвоичныеДанныеФайла.Записать(ИмяВременногоФайла);
			
			ЧтениеТекста = Новый ЧтениеТекста(ИмяВременногоФайла, Кодировка);
			ТекстСодержания = ЧтениеТекста.Прочитать();
			
			ЧтениеТекста.Закрыть();
			
			СтруктураСодержанияФайла.Вставить("ОписаниеПереданногоФайла", Файл);
			СтруктураСодержанияФайла.Вставить("ТекстСодержания",          ТекстСодержания);
			
			СодержаниеФайлов.Добавить(СтруктураСодержанияФайла);
			
		Исключение
			
			РезультатЧтения.ТекстОшибки = ОписаниеОшибки();
			Возврат РезультатЧтения;
			
		КонецПопытки;
		
	КонецЦикла;
	
	РезультатЧтения.Успешно = Истина;
	РезультатЧтения.СодержаниеФайлов = СодержаниеФайлов;
	
	Возврат РезультатЧтения;
	
КонецФункции

// Функция выполняет проверку дублирования кодов в массивах групп товаров и товаров подготавливаемых для ККМ-Offline.
// Параметры: 
//   РасширеннаяВыгрузка  - булево, признак расширенной выгрузки.
//   ГруппыТоваров  - массив, список групп товаров.
//   Товары  - массив, список товаров.
//   Коды  - строка, строка в которую через ", " будут перечислены дублирующиеся коды.
// Возвращаемое значение: 
//   Булево - если есть дублирование, возвращает Истина, иначе Ложь.
//
Функция ПроверитьДублированиеКодов(РасширеннаяВыгрузка, ГруппыТоваров, Товары, Коды) Экспорт
	
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("Код");
	ТЗ.Колонки.Добавить("Количество");
	
	Если РасширеннаяВыгрузка Тогда
		
		Для Каждого ТекГруппа Из ГруппыТоваров Цикл
			ДобавитьЭлементВКоллекцию(ТекГруппа, ТЗ);
		КонецЦикла;
		
		Для Каждого ТекТовар Из Товары Цикл
			ДобавитьКодыТоваров(ТЗ, ТекТовар, "Товар");
		КонецЦикла;
		
	Иначе
		
		Для Каждого ТекТовар Из Товары Цикл
			ДобавитьЭлементВКоллекцию(ТекТовар, ТЗ);
		КонецЦикла;
		
	КонецЕсли;
	
	ТЗ.Свернуть("Код", "Количество");
	
	ЕстьДублированиеКодов = Ложь;
	
	ДублирующиесяКоды = "";
	
	Для Каждого ТекСтрока Из ТЗ Цикл
		
		Если ТекСтрока.Количество > 1 Тогда
			
			Если НЕ ЕстьДублированиеКодов Тогда
				ЕстьДублированиеКодов = Истина;
				Коды = Формат(ТекСтрока.Код, "ЧН=0; ЧГ=0");
			Иначе
				Коды = Коды + ", " + Формат(ТекСтрока.Код, "ЧН=0; ЧГ=0");
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЕстьДублированиеКодов Тогда
		
		Возврат Истина;
		
	Иначе
		
		Возврат Ложь;
		
	КонецЕсли;
	
КонецФункции

// Область "Программный интерфейс ККТ"

// Записать операцию в журнал фискальных операций.
//
Процедура ЗаписатьФискальнуюОперацию(ПараметрыФискализации) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИдентификаторЗаписи = Новый УникальныйИдентификатор;

	НаборЗаписей = РегистрыСведений.ФискальныеОперации.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ДокументОснование.Установить(ПараметрыФискализации.ДокументОснование, Истина);
	НаборЗаписей.Отбор.ИдентификаторЗаписи.Установить(ИдентификаторЗаписи, Истина);
	
	НоваяСтрока = НаборЗаписей.Добавить();
	НоваяСтрока.Дата = ПараметрыФискализации.ДатаВремяЧека;
	НоваяСтрока.ИдентификаторЗаписи = ИдентификаторЗаписи;
	НоваяСтрока.ДокументОснование = ПараметрыФискализации.ДокументОснование;
	НоваяСтрока.ФискальныйПризнак = ПараметрыФискализации.ФискальныйПризнак;
	НоваяСтрока.ТипДокумента      = ПараметрыФискализации.ТипДокумента; 
	НоваяСтрока.Организация       = ПараметрыФискализации.Организация;
	НоваяСтрока.ТорговыйОбъект    = ПараметрыФискализации.ТорговыйОбъект;
	НоваяСтрока.ТипРасчета        = ПараметрыФискализации.ТипРасчета;
	НоваяСтрока.НомерСменыККМ     = ПараметрыФискализации.НомерСменыККТ;
	НоваяСтрока.НомерЧекаККМ      = ПараметрыФискализации.НомерЧекаККТ;
	НоваяСтрока.Сумма            = ПараметрыФискализации.СуммаЧека;
	НоваяСтрока.ОплатаНаличные   = ПараметрыФискализации.ОплатаНаличные;
	НоваяСтрока.ОплатаЭлектронно = ПараметрыФискализации.ОплатаЭлектронно;
	НоваяСтрока.ОплатаПостоплата = ПараметрыФискализации.ОплатаПостоплата;
	НоваяСтрока.ОплатаПредоплата = ПараметрыФискализации.ОплатаПредоплата;
	НоваяСтрока.ОплатаВстречноеПредоставление = ПараметрыФискализации.ОплатаПредоплата;
	НоваяСтрока.ДополнительныйРеквизит  = ПараметрыФискализации.ДополнительныйРеквизит;
	НоваяСтрока.АдресСайтаПроверки      = ПараметрыФискализации.АдресСайтаПроверки;
	НоваяСтрока.ЗаводскойНомерФН        = ПараметрыФискализации.ЗаводскойНомерФН;
	НоваяСтрока.РегистрационныйНомерККТ = ПараметрыФискализации.РегистрационныйНомерККТ; 
	НоваяСтрока.КорректируемыйДокумент  = ПараметрыФискализации.КорректируемыйДокумент;
	Если ПараметрыФискализации.ДанныеЧекаXML <> Неопределено Тогда
		НоваяСтрока.ДанныеXML = Новый ХранилищеЗначения(ПараметрыФискализации.ДанныеЧекаXML);
	КонецЕсли;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

// Получить данные журнала фискальных операций.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка - Документ-основание.
// 
// Возвращаемое значение:
//  Структура - Структура по свойствами:
//   * НомерСменыККМ - Число - Номер чека ККМ.
//   * Сумма - Число - Сумма.
//   * ДокументОснование - ДокументСсылка - Документ-основание.
//   * ДанныеXML - ХранилищеЗначений - Данные чека, переданные в ККТ (XML).
//
Функция ДанныеФискальнойОперации(ДокументСсылка, ИдентификаторЗаписи = Неопределено, ТипыДокументов = Неопределено, ТипРасчета = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ФискальныеОперации.ИдентификаторЗаписи     КАК ИдентификаторЗаписи,
	|	ФискальныеОперации.НомерЧекаККМ            КАК НомерЧекаККМ,
	|	ФискальныеОперации.НомерСменыККМ           КАК НомерСменыККМ,
	|	ФискальныеОперации.ТипДокумента            КАК ТипДокумента,
	|	ФискальныеОперации.ТипРасчета              КАК ТипРасчета,
	|	ФискальныеОперации.Организация             КАК Организация,
	|	ФискальныеОперации.ТорговыйОбъект          КАК ТорговыйОбъект,
	|	ФискальныеОперации.ЗаводскойНомерФН        КАК ЗаводскойНомерФН, 
	|	ФискальныеОперации.РегистрационныйНомерККТ КАК РегистрационныйНомерККТ,
	|	ФискальныеОперации.ДокументОснование       КАК ДокументОснование, 
	|	ФискальныеОперации.КорректируемыйДокумент  КАК КорректируемыйДокумент,
	|	ФискальныеОперации.Сумма                   КАК Сумма, 
	|	ФискальныеОперации.ФискальныйПризнак       КАК ФискальныйПризнак,
	|	ФискальныеОперации.ДополнительныйРеквизит  КАК ДополнительныйРеквизит,  
	|	ФискальныеОперации.ДанныеXML               КАК ДанныеXML
	|ИЗ
	|	РегистрСведений.ФискальныеОперации КАК ФискальныеОперации
	|ГДЕ
	|	(ФискальныеОперации.ДокументОснование = &ДокументСсылка)"
		+ ?(ИдентификаторЗаписи = Неопределено, "", " И (ФискальныеОперации.ИдентификаторЗаписи = &ИдентификаторЗаписи)")
		+ ?(ТипыДокументов = Неопределено, "", " И (ФискальныеОперации.ТипДокумента В (&ТипыДокументов))")
		+ ?(ТипРасчета = Неопределено, "", " И (ФискальныеОперации.ТипРасчета = &ТипРасчета)")
		+ " УПОРЯДОЧИТЬ ПО ФискальныеОперации.Дата УБЫВ, ФискальныеОперации.НомерСменыККМ УБЫВ");
		
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
	
	Если ИдентификаторЗаписи <> Неопределено Тогда
		Запрос.УстановитьПараметр("ИдентификаторЗаписи", ИдентификаторЗаписи);
	КонецЕсли;
	
	Если ТипыДокументов <> Неопределено Тогда
		// Подготовка типов документов для запроса.
		МассивТипыДокументов = Новый Массив();
		Если ТипЗнч(ТипыДокументов) = Тип("Массив") Тогда
			Для Каждого ТипДокумента Из ТипыДокументов Цикл
				МассивТипыДокументов.Добавить(ТипДокумента);
			КонецЦикла;
		Иначе
			МассивТипыДокументов.Добавить(ТипыДокументов);
		КонецЕсли;
		Запрос.УстановитьПараметр("ТипыДокументов", МассивТипыДокументов);
	КонецЕсли;
	
	Если ТипРасчета <> Неопределено Тогда
		Запрос.УстановитьПараметр("ТипРасчета", ТипРасчета);
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ФискальнаяОперация = Новый Структура;
		ФискальнаяОперация.Вставить("ИдентификаторЗаписи");
		ФискальнаяОперация.Вставить("НомерЧекаККМ");
		ФискальнаяОперация.Вставить("НомерСменыККМ");
		ФискальнаяОперация.Вставить("ЗаводскойНомерФН");
		ФискальнаяОперация.Вставить("РегистрационныйНомерККТ");
		ФискальнаяОперация.Вставить("ТипДокумента");
		ФискальнаяОперация.Вставить("ТипРасчета");
		ФискальнаяОперация.Вставить("Организация");
		ФискальнаяОперация.Вставить("ТорговыйОбъект");
		ФискальнаяОперация.Вставить("Сумма");
		ФискальнаяОперация.Вставить("ДокументОснование");
		ФискальнаяОперация.Вставить("КорректируемыйДокумент");
		ФискальнаяОперация.Вставить("ФискальныйПризнак");
		ФискальнаяОперация.Вставить("ДополнительныйРеквизит");
		ФискальнаяОперация.Вставить("ДанныеXML");
		ЗаполнитьЗначенияСвойств(ФискальнаяОперация, Выборка);
		Возврат ФискальнаяОперация;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Получить список журнала фискальных операций.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка - Документ-основание.
// 
// Возвращаемое значение:
//  Структура - Структура по свойствами:
//   * НомерСменыККМ - Число - Номер чека ККМ.
//   * Сумма - Число - Сумма.
//   * ДокументОснование - ДокументСсылка - Документ-основание.
//   * ДанныеXML - ХранилищеЗначений - Данные чека, переданные в ККТ (XML).
//
Функция СписокФискальныхОпераций(ДокументСсылка, ТипыДокументов = Неопределено, ТипРасчета = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ 
	|	ФискальныеОперации.ИдентификаторЗаписи     КАК ИдентификаторЗаписи,
	|	ФискальныеОперации.НомерЧекаККМ            КАК НомерЧекаККМ,
	|	ФискальныеОперации.НомерСменыККМ           КАК НомерСменыККМ,
	|	ФискальныеОперации.ТипДокумента            КАК ТипДокумента,
	|	ФискальныеОперации.ТипРасчета              КАК ТипРасчета,
	|	ФискальныеОперации.Организация             КАК Организация,
	|	ФискальныеОперации.ТорговыйОбъект          КАК ТорговыйОбъект,
	|	ФискальныеОперации.ЗаводскойНомерФН        КАК ЗаводскойНомерФН, 
	|	ФискальныеОперации.РегистрационныйНомерККТ КАК РегистрационныйНомерККТ,
	|	ФискальныеОперации.ДокументОснование       КАК ДокументОснование, 
	|	ФискальныеОперации.КорректируемыйДокумент  КАК КорректируемыйДокумент,
	|	ФискальныеОперации.Сумма                   КАК Сумма, 
	|	ФискальныеОперации.ФискальныйПризнак       КАК ФискальныйПризнак,
	|	ФискальныеОперации.ДополнительныйРеквизит  КАК ДополнительныйРеквизит,
	|	ФискальныеОперации.ДанныеXML               КАК ДанныеXML
	|ИЗ
	|	РегистрСведений.ФискальныеОперации КАК ФискальныеОперации
	|ГДЕ
	|	(ФискальныеОперации.ДокументОснование = &ДокументСсылка)"
		+ ?(ТипыДокументов = Неопределено, "", " И (ФискальныеОперации.ТипДокумента В (&ТипыДокументов))")
		+ ?(ТипРасчета = Неопределено, "", " И (ФискальныеОперации.ТипРасчета = &ТипРасчета)")
		+ " УПОРЯДОЧИТЬ ПО ФискальныеОперации.Дата УБЫВ, ФискальныеОперации.НомерСменыККМ УБЫВ");
		
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
	
	Если ТипыДокументов <> Неопределено Тогда
		// Подготовка типов документов для запроса.
		МассивТипыДокументов = Новый Массив();
		Если ТипЗнч(ТипыДокументов) = Тип("Массив") Тогда
			Для Каждого ТипДокумента Из ТипыДокументов Цикл
				МассивТипыДокументов.Добавить(ТипДокумента);
			КонецЦикла;
		Иначе
			МассивТипыДокументов.Добавить(ТипыДокументов);
		КонецЕсли;
		Запрос.УстановитьПараметр("ТипыДокументов", МассивТипыДокументов);
	КонецЕсли;
	
	Если ТипРасчета <> Неопределено Тогда
		Запрос.УстановитьПараметр("ТипРасчета", ТипРасчета);
	КонецЕсли;
	
	СписокОпераций = Новый Массив(); 
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ФискальнаяОперация = Новый Структура;
		ФискальнаяОперация.Вставить("ИдентификаторЗаписи");
		ФискальнаяОперация.Вставить("НомерЧекаККМ");
		ФискальнаяОперация.Вставить("НомерСменыККМ");
		ФискальнаяОперация.Вставить("ЗаводскойНомерФН");
		ФискальнаяОперация.Вставить("РегистрационныйНомерККТ");
		ФискальнаяОперация.Вставить("ТипДокумента");
		ФискальнаяОперация.Вставить("ТипРасчета");
		ФискальнаяОперация.Вставить("Организация");
		ФискальнаяОперация.Вставить("ТорговыйОбъект");
		ФискальнаяОперация.Вставить("Сумма");
		ФискальнаяОперация.Вставить("ДокументОснование");
		ФискальнаяОперация.Вставить("КорректируемыйДокумент");
		ФискальнаяОперация.Вставить("ФискальныйПризнак");
		ФискальнаяОперация.Вставить("ДополнительныйРеквизит");
		ФискальнаяОперация.Вставить("ДанныеXML");
		ЗаполнитьЗначенияСвойств(ФискальнаяОперация, Выборка);
		СписокОпераций.Добавить(ФискальнаяОперация);
	КонецЦикла;
	
	Возврат СписокОпераций;
	
КонецФункции


Процедура ЗаписатьДанныеКоррекции(ЗаписьXML, ДанныеКоррекции)
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("CorrectionData");
	ТипКоррекции = ?(ПустаяСтрока(ДанныеКоррекции.ТипКоррекции), 0, ДанныеКоррекции.ТипКоррекции);   
	ЗаписьXML.ЗаписатьАтрибут("Type",  XMLСтрока(ДанныеКоррекции.ТипКоррекции));
	Если Не ПустаяСтрока(ДанныеКоррекции.ДатаКоррекции) Тогда
		ЗаписьXML.ЗаписатьАтрибут("Datе",  XMLСтрока(НачалоДня(ДанныеКоррекции.ДатаКоррекции)));
	КонецЕсли;
	Если Не ПустаяСтрока(ДанныеКоррекции.НомерПредписания) Тогда
		ЗаписьXML.ЗаписатьАтрибут("Number",  XMLСтрока(ДанныеКоррекции.НомерПредписания));
	КонецЕсли;
	Если Не ПустаяСтрока(ДанныеКоррекции.ОписаниеКоррекции) Тогда
		ЗаписьXML.ЗаписатьАтрибут("Description",  XMLСтрока(ДанныеКоррекции.ОписаниеКоррекции));
	КонецЕсли;
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры

Процедура ЗаписатьДанныеАгента(ЗаписьXML, ДанныеАгента, РевизияИнтерфейса = 0)
	
	Если РевизияИнтерфейса >= 3000 Тогда  // Версия стандарта 3.0 (ОФД 1.1)
		ЗаписьXML.ЗаписатьНачалоЭлемента("AgentData");
		Если Не ПустаяСтрока(ДанныеАгента.ПлатежныйАгент.Операция) Тогда // Операция платежного агента
			ЗаписьXML.ЗаписатьАтрибут("AgentOperation" , XMLСтрока(ДанныеАгента.ПлатежныйАгент.Операция));
		КонецЕсли;
		Если Не ПустаяСтрока(ДанныеАгента.ПлатежныйАгент.Телефон) Тогда // Телефон платежного агента
			ЗаписьXML.ЗаписатьАтрибут("AgentPhone" , XMLСтрока(ДанныеАгента.ПлатежныйАгент.Телефон));
		КонецЕсли;
		Если Не ПустаяСтрока(ДанныеАгента.ОператорПоПриемуПлатежей.Телефон) Тогда // Телефон оператора по приему платежей
			ЗаписьXML.ЗаписатьАтрибут("PaymentProcessorPhone", XMLСтрока(ДанныеАгента.ОператорПоПриемуПлатежей.Телефон));
		КонецЕсли;
		Если Не ПустаяСтрока(ДанныеАгента.ОператорПеревода.Телефон) Тогда // Телефон оператора перевода
			ЗаписьXML.ЗаписатьАтрибут("AcquirerOperatorPhone" , XMLСтрока(ДанныеАгента.ОператорПеревода.Телефон));
		КонецЕсли;
		Если Не ПустаяСтрока(ДанныеАгента.ОператорПеревода.Наименование) Тогда // Наименование оператора перевода
			ЗаписьXML.ЗаписатьАтрибут("AcquirerOperatorName" , XMLСтрока(ДанныеАгента.ОператорПеревода.Наименование));
		КонецЕсли;
		Если Не ПустаяСтрока(ДанныеАгента.ОператорПеревода.Адрес) Тогда // Адрес оператора перевода
			ЗаписьXML.ЗаписатьАтрибут("AcquirerOperatorAddress" , XMLСтрока(ДанныеАгента.ОператорПеревода.Адрес));
		КонецЕсли;
		Если Не ПустаяСтрока(ДанныеАгента.ОператорПеревода.ИНН) Тогда // ИНН оператора перевода
			ЗаписьXML.ЗаписатьАтрибут("AcquirerOperatorINN" , XMLСтрока(ДанныеАгента.ОператорПеревода.ИНН));
		КонецЕсли;
		ЗаписьXML.ЗаписатьКонецЭлемента();
	Иначе
		ЗаписьXML.ЗаписатьНачалоЭлемента("AgentData");
	
		Если Не ПустаяСтрока(ДанныеАгента.ПлатежныйАгент.Операция) Тогда
			ЗаписьXML.ЗаписатьАтрибут("PayingAgentOperation" , XMLСтрока(ДанныеАгента.ПлатежныйАгент.Операция));
		КонецЕсли;
		Если Не ПустаяСтрока(ДанныеАгента.ПлатежныйАгент.Телефон) Тогда
			ЗаписьXML.ЗаписатьАтрибут("PayingAgentPhone" , XMLСтрока(ДанныеАгента.ПлатежныйАгент.Телефон));
		КонецЕсли;
		Если Не ПустаяСтрока(ДанныеАгента.ОператорПоПриемуПлатежей.Телефон) Тогда
			ЗаписьXML.ЗаписатьАтрибут("ReceivePaymentsOperatorPhone" , XMLСтрока(ДанныеАгента.ОператорПоПриемуПлатежей.Телефон));
		КонецЕсли;
		Если Не ПустаяСтрока(ДанныеАгента.ОператорПеревода.Телефон) Тогда
			ЗаписьXML.ЗаписатьАтрибут("MoneyTransferOperatorPhone" , XMLСтрока(ДанныеАгента.ОператорПеревода.Телефон));
		КонецЕсли;
		Если Не ПустаяСтрока(ДанныеАгента.ОператорПеревода.Наименование) Тогда
			ЗаписьXML.ЗаписатьАтрибут("MoneyTransferOperatorName" , XMLСтрока(ДанныеАгента.ОператорПеревода.Наименование));
		КонецЕсли;
		Если Не ПустаяСтрока(ДанныеАгента.ОператорПеревода.Адрес) Тогда
			ЗаписьXML.ЗаписатьАтрибут("MoneyTransferOperatorAddress" , XMLСтрока(ДанныеАгента.ОператорПеревода.Адрес));
		КонецЕсли;
		Если Не ПустаяСтрока(ДанныеАгента.ОператорПеревода.ИНН) Тогда
			ЗаписьXML.ЗаписатьАтрибут("MoneyTransferOperatorVATIN" , XMLСтрока(ДанныеАгента.ОператорПеревода.ИНН));
		КонецЕсли;
		ЗаписьXML.ЗаписатьКонецЭлемента();
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьДанныеПоставщика(ЗаписьXML, ДанныеПоставщика, РевизияИнтерфейса = 0)
	
	Если РевизияИнтерфейса >= 3000 Тогда // Версия стандарта 3.0 (ОФД 1.1)
		ЗаписьXML.ЗаписатьНачалоЭлемента("VendorData");
		Если Не ПустаяСтрока(ДанныеПоставщика.Телефон) Тогда // Телефон поставщика
			ЗаписьXML.ЗаписатьАтрибут("VendorPhone" , XMLСтрока(ДанныеПоставщика.Телефон));
		КонецЕсли;
		Если Не ПустаяСтрока(ДанныеПоставщика.Наименование) Тогда // Наименование поставщика
			ЗаписьXML.ЗаписатьАтрибут("VendorName" , XMLСтрока(ДанныеПоставщика.Наименование));
		КонецЕсли;
		Если Не ПустаяСтрока(ДанныеПоставщика.ИНН) Тогда // ИНН поставщика
			ЗаписьXML.ЗаписатьАтрибут("VendorINN" , XMLСтрока(ДанныеПоставщика.ИНН));
		КонецЕсли;
		ЗаписьXML.ЗаписатьКонецЭлемента();
	Иначе
		ЗаписьXML.ЗаписатьНачалоЭлемента("PurveyorData");
	
		Если Не ПустаяСтрока(ДанныеПоставщика.Телефон) Тогда
			ЗаписьXML.ЗаписатьАтрибут("PurveyorPhone" , XMLСтрока(ДанныеПоставщика.Телефон));
		КонецЕсли;
		Если Не ПустаяСтрока(ДанныеПоставщика.Наименование) Тогда
			ЗаписьXML.ЗаписатьАтрибут("PurveyorName" , XMLСтрока(ДанныеПоставщика.Наименование));
		КонецЕсли;
		Если Не ПустаяСтрока(ДанныеПоставщика.ИНН) Тогда
			ЗаписьXML.ЗаписатьАтрибут("PurveyorVATIN" , XMLСтрока(ДанныеПоставщика.ИНН));
		КонецЕсли;
	
		ЗаписьXML.ЗаписатьКонецЭлемента();
	КонецЕсли;
	
КонецПроцедуры

Процедура ПодготовитьДанныеДляФискализацииЧека(Ссылка, ОбщиеПараметры, ВерсияФормата, ТО, КомуОтКого, Основание) Экспорт
	
	Если ОбщиеПараметры = Неопределено Тогда
		ОбщиеПараметры = МенеджерОборудованияКлиентСервер.ПараметрыОперацииФискализацииЧека();
	КонецЕсли;
	ОбщиеПараметры.Вставить("ВерсияФормата", ВерсияФормата);
	ОбщиеПараметры.Вставить("МетаданныеОбъекта", Ссылка.Метаданные());
	
	ОписаниеПКС = Неопределено;
	Если ОбщиеПараметры.Свойство("ОписаниеПКС", ОписаниеПКС) Тогда
		ОбщиеПараметры.НомерСмены = КассовыеСменыВызовСервера.ТекущийНомерСмены(ОписаниеПКС);
		ОбщиеПараметры.НомерЧека = КассовыеСменыВызовСервера.ТекущийНомерЧека(ОписаниеПКС) + 1;
	КонецЕсли;
	
	ОрганизацияЧека = Ссылка.Организация;
	// Шапка
	ОбщиеПараметры.ДокументОснование = Ссылка;
	
	Если ОбщиеПараметры.МетаданныеОбъекта.Реквизиты.Найти("ВидОперации") <> Неопределено Тогда
		ВидОперации = Ссылка.ВидОперации;
	Иначе
		ВидОперации = "";
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПоставщиком Тогда
		ИмяТипаРасчета = "ВозвратРасходаДенежныхСредств";
	ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") ИЛИ 
		ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратДенежныхСредствПокупателю ИЛИ 
		ВидОперации = Перечисления.ВидыОперацийОплатаОтПокупателяПлатежнойКартой.ВозвратДенежныхСредствПокупателю Тогда
		ИмяТипаРасчета = "ВозвратДенежныхСредств";
	ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда
		// РКО - все остальные виды операций
		ИмяТипаРасчета = "РасходДенежныхСредств";
	Иначе
		// РТУ и ПКО, ОПК - все остальные виды операций
		ИмяТипаРасчета = "ПриходДенежныхСредств";
	КонецЕсли;
	
	ОбщиеПараметры.ПокупательEmail = СокрЛП(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "АдресЭП"));
	АдресЭПЗадан = Не ПустаяСтрока(ОбщиеПараметры.ПокупательEmail);
	
	ОбщиеПараметры.ТипРасчета = ПредопределенноеЗначение("Перечисление.ТипыРасчетаДенежнымиСредствами."+ИмяТипаРасчета);
	ОбщиеПараметры.Кассир = Ссылка.Ответственный.Наименование;
	ОбщиеПараметры.Электронно = глЗначениеПеременной("НеПечататьФискальныйЧекПриОтправкеЭлектронного") И АдресЭПЗадан;
	ОбщиеПараметры.Отправляет1СSMS = Ложь;
	ОбщиеПараметры.Отправляет1СEmail = Не глЗначениеПеременной("ОтправлятьЭлектронныеЧекиПоEmailЧерезОФД") И АдресЭПЗадан;
	ОбщиеПараметры.ОрганизацияНазвание = ОрганизацияЧека.НаименованиеПолное;
	ОбщиеПараметры.ОрганизацияИНН = ОрганизацияЧека.ИНН;
	ОбщиеПараметры.ОрганизацияКПП = ОрганизацияЧека.КПП;
	ОбщиеПараметры.СистемаНалогообложения = МенеджерОборудованияКлиентСервер.СистемаНалогообложения
		(ОрганизацияЧека, Ссылка.Дата);
	ОбщиеПараметры.СпособФорматоЛогическогоКонтроля = ТО.СпособФЛК;
	ОбщиеПараметры.ДопустимоеРасхождениеФорматоЛогическогоКонтроля = ТО.ДопустимоеРасхождениеФЛК;
	
	ЭтоТоварныйДокумент = ТипЗнч(Ссылка) = Тип("ДокументСсылка.РеализацияТоваровУслуг") ИЛИ 
		ТипЗнч(Ссылка) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") ИЛИ
		ТипЗнч(Ссылка) = Тип("ДокументСсылка.АктОбОказанииПроизводственныхУслуг");
		
	Если ЭтоТоварныйДокумент Тогда
		
		Если Ссылка.ВалютаДокумента = глЗначениеПеременной("ВалютаРегламентированногоУчета") Тогда
			КурсОплаты = 1;
		Иначе
			КурсОплаты = Ссылка.КурсВзаиморасчетов / Ссылка.КратностьВзаиморасчетов;
		КонецЕсли;
		
		ЗаполнитьОплатыДляТоварногоДокумента(Ссылка, ОбщиеПараметры, КурсОплаты);
		
		ЗаполнитьТоварныеПозицииДляТоварногоДокумента(Ссылка, ОбщиеПараметры, КурсОплаты);
		
	Иначе
		
		ЗаполнитьОплатыДляПлатежногоДокумента(Ссылка, ОбщиеПараметры);
		
		РасчетыСПокупателем = (ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.ОплатаПокупателя"))
			ИЛИ (ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВозвратДенежныхСредствПокупателю"))
			ИЛИ (ТипЗнч(Ссылка) = Тип("ДокументСсылка.ОплатаОтПокупателяПлатежнойКартой"))
			Или (ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаПокупателя"));
		ЭтоВозврат = (ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийОплатаОтПокупателяПлатежнойКартой.ВозвратДенежныхСредствПокупателю"))
			ИЛИ (ТипЗнч(Ссылка) = Тип("ДокументСсылка.РасходныйКассовыйОрдер"));
		
		ЗаполнитьТоварныеПозицииДляПлатежногоДокумента(Ссылка, ОбщиеПараметры, 
			РасчетыСПокупателем, ЭтоВозврат, КомуОтКого, Основание);
		
	КонецЕсли;
	
	ОбщиеПараметры.Удалить("МетаданныеОбъекта");
	МенеджерОборудованияКлиентСервер.ПровестиФорматоЛогическийКонтроль(ОбщиеПараметры);
	
КонецПроцедуры

Процедура ЗаполнитьОплатыДляТоварногоДокумента(Ссылка, ОбщиеПараметры, КурсОплаты)

	ДокументыРасчетов = Ссылка.ДокументыРасчетовСКонтрагентом;
	Если ДокументыРасчетов.Количество() = 0 Тогда
		
		ОбщиеПараметры.Вставить("ПризнакСпособаРасчета", Перечисления.ПризнакиСпособаРасчета.ПередачаБезОплаты);
		
		СтрокаОплаты = Новый Структура();
		СтрокаОплаты.Вставить("ТипОплаты", Перечисления.ТипыОплатыККТ.Постоплата);
		СтрокаОплаты.Вставить("Наименование", НСтр("ru = 'Постоплата'"));
		СтрокаОплаты.Вставить("Сумма", Ссылка.СуммаДокумента);
		ОбщиеПараметры.ТаблицаОплат.Добавить(СтрокаОплаты);
		
	Иначе
		
		СуммаЭлектронными = 0;
		СуммаНаличными = 0;
		СуммаДругое = 0;
		Для Каждого СтрокаРасчетныйДокумент Из ДокументыРасчетов Цикл
			
			Если ТипЗнч(СтрокаРасчетныйДокумент.ДокументРасчетовСКонтрагентом) = Тип("ДокументСсылка.ОплатаОтПокупателяПлатежнойКартой") Тогда
				СуммаЭлектронными = СуммаЭлектронными + СтрокаРасчетныйДокумент.СуммаВзаиморасчетов * КурсОплаты;
			ИначеЕсли ТипЗнч(СтрокаРасчетныйДокумент.ДокументРасчетовСКонтрагентом) = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") ИЛИ 
				ТипЗнч(СтрокаРасчетныйДокумент.ДокументРасчетовСКонтрагентом) = Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда
				СуммаНаличными = СуммаНаличными + СтрокаРасчетныйДокумент.СуммаВзаиморасчетов * КурсОплаты;
			Иначе
				СуммаДругое = СуммаДругое + СтрокаРасчетныйДокумент.СуммаВзаиморасчетов * КурсОплаты;
			КонецЕсли;
			
		КонецЦикла;
		
		СуммаОплаты = СуммаЭлектронными + СуммаНаличными + СуммаДругое;
		Если СуммаОплаты >= Ссылка.СуммаДокумента Тогда
			
			ОбщиеПараметры.Вставить("ПризнакСпособаРасчета", Перечисления.ПризнакиСпособаРасчета.ПередачаСПолнойОплатой);
			
			СтрокаОплаты = Новый Структура();
			СтрокаОплаты.Вставить("ТипОплаты", Перечисления.ТипыОплатыККТ.Предоплата);
			СтрокаОплаты.Вставить("Наименование", НСтр("ru = 'Зачет аванса'"));
			СтрокаОплаты.Вставить("Сумма", Ссылка.СуммаДокумента);
			ОбщиеПараметры.ТаблицаОплат.Добавить(СтрокаОплаты);
			
		Иначе
			
			ОбщиеПараметры.Вставить("ПризнакСпособаРасчета", Перечисления.ПризнакиСпособаРасчета.ПередачаСЧастичнойОплатой);
			
			СтрокаОплаты = Новый Структура();
			СтрокаОплаты.Вставить("ТипОплаты", Перечисления.ТипыОплатыККТ.Предоплата);
			СтрокаОплаты.Вставить("Наименование", НСтр("ru = 'Зачет аванса'"));
			СтрокаОплаты.Вставить("Сумма", СуммаОплаты);
			ОбщиеПараметры.ТаблицаОплат.Добавить(СтрокаОплаты);
			
			СтрокаОплаты = Новый Структура();
			СтрокаОплаты.Вставить("ТипОплаты", Перечисления.ТипыОплатыККТ.Постоплата);
			СтрокаОплаты.Вставить("Наименование", НСтр("ru = 'Постоплата'"));
			СтрокаОплаты.Вставить("Сумма", Ссылка.СуммаДокумента - СуммаОплаты);
			ОбщиеПараметры.ТаблицаОплат.Добавить(СтрокаОплаты);
			
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьТоварныеПозицииДляТоварногоДокумента(Ссылка, ОбщиеПараметры, КурсОплаты)
	
	ИмяДокумента = ОбщиеПараметры.МетаданныеОбъекта.Имя;
	
	Запрос = Новый Запрос;
	Запрос.Текст = Документы[ИмяДокумента].ТекстЗапросаТоварныеПозицииЧека();
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		СтрокаЧека = МенеджерОборудованияКлиентСервер.ПараметрыФискальнойСтрокиЧека();
		
		СтрокаЧека.Количество = Выборка.Количество;
		СтрокаЧека.Цена = Окр(Выборка.Цена * КурсОплаты, 2);
		СтрокаЧека.ЦенаСоСкидками = Окр(Выборка.Сумма * КурсОплаты / Выборка.Количество, 2);
		СтрокаЧека.Сумма = Окр(Выборка.Сумма * КурсОплаты, 2);
		СтрокаЧека.Наименование = СокрЛП(Выборка.Наименование) + ФормированиеПечатныхФорм.ПредставлениеСерий(Выборка) + 
		?(ЗначениеЗаполнено(Выборка.ЕдиницаИзмерения)," "+Строка(Выборка.ЕдиницаИзмерения),"");
		СтрокаЧека.СтавкаНДС = МенеджерОборудованияКлиентСервер.ПолучитьСтавкуНДСДляФискализацииЧека(Выборка.СтавкаНДС);
		СтрокаЧека.СуммаНДС = Выборка.СуммаНДС;
		// Дополнительные реквизиты начиная с ФФД 1.1
		СтрокаЧека.ПризнакСпособаРасчета = ОбщиеПараметры.ПризнакСпособаРасчета;
		СтрокаЧека.ПризнакПредметаРасчета = МенеджерОборудованияВызовСервера.ОпределитьПризнакПредметаРасчета(Выборка.Номенклатура);
		СтрокаЧека.НомерСекции = Выборка.НомерСекции;
		
		ОбщиеПараметры.ПозицииЧека.Добавить(СтрокаЧека);

	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьОплатыДляПлатежногоДокумента(Ссылка, ОбщиеПараметры)
	
	СуммаОплаты = Ссылка.СуммаДокумента;
	Если СуммаОплаты <> 0 И СуммаОплаты <> Неопределено Тогда
		СтрокаОплаты = Новый Структура();
		Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.ОплатаОтПокупателяПлатежнойКартой") Или ТипЗнч(Ссылка) = Тип("ДокументСсылка.ПлатежноеПоручениеВходящее")  Тогда
			СтрокаОплаты.Вставить("ТипОплаты", ПредопределенноеЗначение("Перечисление.ТипыОплатыККТ.Электронно"));
			СтрокаОплаты.Вставить("Наименование", "Платежная карта");
		Иначе
			СтрокаОплаты.Вставить("ТипОплаты", ПредопределенноеЗначение("Перечисление.ТипыОплатыККТ.Наличные"));
			СтрокаОплаты.Вставить("Наименование", "Наличная оплата");
		КонецЕсли;
		СтрокаОплаты.Вставить("Сумма", СуммаОплаты);
		ОбщиеПараметры.ТаблицаОплат.Добавить(СтрокаОплаты);
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьТоварныеПозицииДляПлатежногоДокумента(Ссылка, ОбщиеПараметры, РасчетыСПокупателем, ЭтоВозврат, КомуОтКого, Основание)
	
	ПривилегированныйРежимДо = ПривилегированныйРежим();
	УстановитьПривилегированныйРежим(Истина);
	
	Если ЭтоВозврат Тогда
		Заголовок = "Выдать: ";
	Иначе
		Заголовок = "Принято от: ";
	КонецЕсли;
	НаименованиеПредметаРасчета = Заголовок + КомуОтКого + " Основание: " + Основание;
	Если Не РасчетыСПокупателем Тогда
		Для Каждого СтрокаПлатежа Из Ссылка.РасшифровкаПлатежа Цикл
			ЗаполнитьФиктивнуюСтрокуЧека(ОбщиеПараметры, СтрокаПлатежа, НаименованиеПредметаРасчета);
		КонецЦикла;
		Возврат;
	КонецЕсли;
	// Заполнение для случая расчетов с покупателем
	ВалютаРеглУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");
	
	Запрос = ЗапросДанныеЧека(Ссылка, ВалютаРеглУчета);
	
	Результат = Запрос.ВыполнитьПакет();
	ДеревоСделок = Результат[2].Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Если ОбщиеПараметры.ВерсияФормата = "1.0" Тогда
		ЗаполнитьПоСтарому(ОбщиеПараметры, ДеревоСделок, НаименованиеПредметаРасчета, ВалютаРеглУчета);
	Иначе
		ЗаполнитьПоНовому(ОбщиеПараметры, ДеревоСделок, НаименованиеПредметаРасчета, ВалютаРеглУчета);
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(ПривилегированныйРежимДо);
	
КонецПроцедуры

Процедура ЗаполнитьПоСтарому(ОбщиеПараметры, ДеревоСделок, НаименованиеПредметаРасчета, ВалютаРеглУчета)
	Для Каждого СтрокаСделки Из ДеревоСделок.Строки Цикл
		Для Каждого СтрокаСтавки Из СтрокаСделки.Строки Цикл
			Если СтрокаСтавки.ВалютаСделки = ВалютаРеглУчета Тогда
				КурсОплаты = 1;
				ИмяРеквизитаДляСравнения = "СуммаПлатежа";
			Иначе
				КурсОплаты = Окр(СтрокаСтавки.СуммаПлатежа / СтрокаСтавки.СуммаВзаиморасчетов, 8);
				ИмяРеквизитаДляСравнения = "СуммаВзаиморасчетов";
			КонецЕсли;
			Если СтрокаСтавки.СуммаТовара = СтрокаСтавки[ИмяРеквизитаДляСравнения] Тогда
				Для Каждого СтрокаПозиции Из СтрокаСтавки.Строки Цикл
					ЗаполнитьТоварнуюСтрокуЧека(ОбщиеПараметры, СтрокаПозиции, КурсОплаты);
				КонецЦикла;
			Иначе
				ЗаполнитьФиктивнуюСтрокуЧека(ОбщиеПараметры, СтрокаСтавки, НаименованиеПредметаРасчета);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

Процедура ЗаполнитьПоНовому(ОбщиеПараметры, ДеревоСделок, НаименованиеПредметаРасчета, ВалютаРеглУчета)
	Для Каждого СтрокаСделки Из ДеревоСделок.Строки Цикл
		Для Каждого СтрокаСтавки Из СтрокаСделки.Строки Цикл
			Если СтрокаСтавки.ВалютаСделки = ВалютаРеглУчета Тогда
				КурсОплаты = 1;
			Иначе
				КурсОплаты = Окр(СтрокаСтавки.СуммаПлатежа / СтрокаСтавки.СуммаВзаиморасчетов, 8);
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(СтрокаСтавки.Сделка) Тогда
				ЗаполнитьФиктивнуюСтрокуЧека(ОбщиеПараметры, СтрокаСтавки, НаименованиеПредметаРасчета);
			Иначе
				// детальная печать
				Для Каждого СтрокаПозиции Из СтрокаСтавки.Строки Цикл
					Если ЗначениеЗаполнено(СтрокаПозиции.Номенклатура) Тогда
						ЗаполнитьТоварнуюСтрокуЧека(ОбщиеПараметры, СтрокаПозиции, КурсОплаты);
					Иначе
						// есть платеж по сделке и ставке, но нет товарных позиций по такой ставке
						// излишек денег, нужно добавить авансовую товарную позицию
						ЗаполнитьФиктивнуюСтрокуЧека(ОбщиеПараметры, СтрокаПозиции, НаименованиеПредметаРасчета);
					КонецЕсли;
				КонецЦикла;
				
				СуммаТовара = Окр(СтрокаСтавки.СуммаТовара * КурсОплаты,2);
				Если СуммаТовара <> 0 Тогда
					Если СтрокаСтавки.СуммаПлатежа > СуммаТовара Тогда
						// излишек денег по сделке и ставке, нужно добавить авансовую товарную позицию
						ЗаполнитьФиктивнуюСтрокуЧека(ОбщиеПараметры, СтрокаПозиции, НаименованиеПредметаРасчета, 
							СтрокаСтавки.СуммаПлатежа - СуммаТовара);
					ИначеЕсли СтрокаСтавки.СуммаПлатежа < СуммаТовара Тогда
						// недостаток денег по сделке и ставке, нужно добавить оплату кредитом
						СтрокаОплаты = Новый Структура();
						
						Если ТипЗнч(СтрокаСтавки.Сделка) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
							
							Если СтрокаСтавки.Сделка.ДокументыРасчетовСКонтрагентом.Количество() > 0 Тогда
								СтрокаОплаты.Вставить("Наименование", НСтр("ru = 'Зачет аванса'"));
								СуммаЗачета = Мин(СуммаТовара - СтрокаСтавки.СуммаПлатежа, СтрокаСтавки.Сделка.ДокументыРасчетовСКонтрагентом.Итог("СуммаВзаиморасчетов"));
								СтрокаОплаты.Вставить("Сумма", СуммаЗачета);
								СтрокаОплаты.Вставить("ТипОплаты", ПредопределенноеЗначение("Перечисление.ТипыОплатыККТ.Предоплата"));
								СуммаТовара = СуммаТовара - СуммаЗачета;
							Иначе
								СтрокаОплаты.Вставить("Наименование", "Постоплата (кредит)");
								СтрокаОплаты.Вставить("Сумма", СуммаТовара - СтрокаСтавки.СуммаПлатежа);
								СтрокаОплаты.Вставить("ТипОплаты", ПредопределенноеЗначение("Перечисление.ТипыОплатыККТ.Постоплата"));
								СуммаТовара = 0;
							КонецЕсли;
						
							ОбщиеПараметры.ТаблицаОплат.Добавить(СтрокаОплаты);
						
							Если СуммаТовара > 0 Тогда
								СтрокаОплаты = Новый Структура();
								СтрокаОплаты.Вставить("ТипОплаты", ПредопределенноеЗначение("Перечисление.ТипыОплатыККТ.Постоплата"));
								СтрокаОплаты.Вставить("Наименование", "Постоплата (кредит)");
								СтрокаОплаты.Вставить("Сумма", СуммаТовара - СтрокаСтавки.СуммаПлатежа);
								ОбщиеПараметры.ТаблицаОплат.Добавить(СтрокаОплаты);
							КонецЕСли;
							
						Иначе
							СтрокаОплаты.Вставить("ТипОплаты", ПредопределенноеЗначение("Перечисление.ТипыОплатыККТ.Постоплата"));
							СтрокаОплаты.Вставить("Наименование", "Постоплата (кредит)");
							СтрокаОплаты.Вставить("Сумма", СуммаТовара - СтрокаСтавки.СуммаПлатежа);
							ОбщиеПараметры.ТаблицаОплат.Добавить(СтрокаОплаты);
						КонецЕсли;
						
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

Функция ЗапросДанныеЧека(Ссылка, ВалютаРеглУчета)
	
	Запрос = Новый Запрос;
	
	ИмяДокумента = Ссылка.Метаданные().Имя;
	
	ДопустимыеТипыДР = МенеджерОборудованияКлиентСервер.ДопустимыеТипыДокументаРасчетов();
	ДопустимыеТипыСД = МенеджерОборудованияКлиентСервер.ДопустимыеТипыСделки();
	ДопустимыеТипыДО = Новый Массив;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ДопустимыеТипыДО, ДопустимыеТипыДР);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ДопустимыеТипыДО, ДопустимыеТипыСД);

	ТекстЗапроса = "ВЫБРАТЬ
	               |	ПДРП.Ссылка КАК Ссылка,
	               |	ВЫБОР
	               |		КОГДА ПДРП.ДокументРасчетовСКонтрагентом <> НЕОПРЕДЕЛЕНО
	               |				И ТИПЗНАЧЕНИЯ(ПДРП.ДокументРасчетовСКонтрагентом) В (&ДопустимыеТипыДР)
	               |				И НЕ ПДРП.ДокументРасчетовСКонтрагентом В (&ПустыеСсылки)
	               |			ТОГДА ПДРП.ДокументРасчетовСКонтрагентом
	               |		КОГДА ПДРП.Сделка <> НЕОПРЕДЕЛЕНО
	               |				И ТИПЗНАЧЕНИЯ(ПДРП.Сделка) В (&ДопустимыеТипыСД)
	               |				И НЕ ПДРП.Сделка В (&ПустыеСсылки)
	               |			ТОГДА ПДРП.Сделка
	               |		КОГДА ПДРП.Ссылка.ДокументОснование <> НЕОПРЕДЕЛЕНО
	               |				И ТИПЗНАЧЕНИЯ(ПДРП.Ссылка.ДокументОснование) В (&ДопустимыеТипыДО)
	               |				И НЕ ПДРП.Ссылка.ДокументОснование В (&ПустыеСсылки)
	               |			ТОГДА ПДРП.Ссылка.ДокументОснование
	               |		ИНАЧЕ НЕОПРЕДЕЛЕНО
	               |	КОНЕЦ КАК Сделка,
	               |	ПДРП.СтавкаНДС КАК СтавкаНДС,
	               |	СУММА(ПДРП.СуммаПлатежа) КАК СуммаПлатежа,
	               |	СУММА(ПДРП.СуммаВзаиморасчетов) КАК СуммаВзаиморасчетов,
	               |	СУММА(ПДРП.СуммаНДС) КАК СуммаНДС,
	               |	МАКСИМУМ(ВЫБОР
	               |			КОГДА ПДРП.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18)
	               |				ТОГДА 18
	               |			КОГДА ПДРП.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10)
	               |				ТОГДА 10
	               |			КОГДА ПДРП.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС20)
	               |				ТОГДА 20
	               |			ИНАЧЕ 0
	               |		КОНЕЦ) КАК ПроцентНДС,
	               |	ПДРП.ПризнакСпособаРасчета
	               |ПОМЕСТИТЬ ТаблицаПлатежей
	               |ИЗ
	               |	Документ."+ИмяДокумента+".РасшифровкаПлатежа КАК ПДРП
	               |ГДЕ
	               |	ПДРП.Ссылка = &Ссылка
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ПДРП.Ссылка,
	               |	ПДРП.СтавкаНДС,
	               |	ПДРП.ПризнакСпособаРасчета,
	               |	ВЫБОР
	               |		КОГДА ПДРП.ДокументРасчетовСКонтрагентом <> НЕОПРЕДЕЛЕНО
	               |				И ТИПЗНАЧЕНИЯ(ПДРП.ДокументРасчетовСКонтрагентом) В (&ДопустимыеТипыДР)
	               |				И НЕ ПДРП.ДокументРасчетовСКонтрагентом В (&ПустыеСсылки)
	               |			ТОГДА ПДРП.ДокументРасчетовСКонтрагентом
	               |		КОГДА ПДРП.Сделка <> НЕОПРЕДЕЛЕНО
	               |				И ТИПЗНАЧЕНИЯ(ПДРП.Сделка) В (&ДопустимыеТипыСД)
	               |				И НЕ ПДРП.Сделка В (&ПустыеСсылки)
	               |			ТОГДА ПДРП.Сделка
	               |		КОГДА ПДРП.Ссылка.ДокументОснование <> НЕОПРЕДЕЛЕНО
	               |				И ТИПЗНАЧЕНИЯ(ПДРП.Ссылка.ДокументОснование) В (&ДопустимыеТипыДО)
	               |				И НЕ ПДРП.Ссылка.ДокументОснование В (&ПустыеСсылки)
	               |			ТОГДА ПДРП.Ссылка.ДокументОснование
	               |		ИНАЧЕ НЕОПРЕДЕЛЕНО
	               |	КОНЕЦ
				   |;
				   |";
	ИмяВТ = "НоменклатураСделок";
	Для Каждого ОписаниеТипа Из ДопустимыеТипыДО Цикл
		ОбъектМетаданных = Метаданные.НайтиПоТипу(ОписаниеТипа);
		Если ОбъектМетаданных = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Для Каждого ТЧ Из МенеджерОборудованияКлиентСервер.ДопустимыеТабличныеЧасти() Цикл
			Если ОбъектМетаданных.ТабличныеЧасти.Найти(ТЧ) <> Неопределено Тогда
				ТекстЗапроса = ТекстЗапроса + ТекстаЗапросаТЧпоВидуДокументов(ОбъектМетаданных.Имя, ТЧ, ИмяВТ);
				ИмяВТ = "";
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	ТекстЗапроса = ТекстЗапроса +
				   "
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТаблицаПлатежей.Сделка КАК Сделка,
	               |	ТаблицаПлатежей.СтавкаНДС КАК СтавкаНДС,
				   |	ЕСТЬNULL(НоменклатураСделок.ВалютаСделки, &ВалютаРеглУчета) КАК ВалютаСделки,
	               |	НоменклатураСделок.Номенклатура КАК Номенклатура,
				   |	НоменклатураСделок.Услуга КАК Услуга,
	               |	НоменклатураСделок.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	               |	НоменклатураСделок.Характеристика КАК Характеристика,
	               |	НоменклатураСделок.Серия КАК Серия,
	               |	ВЫБОР
	               |		КОГДА НоменклатураСделок.Количество = 0
	               |				И ЕСТЬNULL(НоменклатураСделок.Номенклатура.Услуга, ИСТИНА)
	               |			ТОГДА 1
	               |		ИНАЧЕ ЕСТЬNULL(НоменклатураСделок.Количество, 0)
	               |	КОНЕЦ КАК Количество,
	               |	ВЫРАЗИТЬ(ВЫБОР
	               |			КОГДА НоменклатураСделок.СуммаВключаетНДС
	               |				ТОГДА НоменклатураСделок.Цена
	               |			ИНАЧЕ НоменклатураСделок.Цена + НоменклатураСделок.Цена * НоменклатураСделок.ПроцентНДС / 100
	               |		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК Цена,
	               |	ВЫБОР
	               |		КОГДА НоменклатураСделок.СуммаВключаетНДС
	               |			ТОГДА ЕСТЬNULL(НоменклатураСделок.Сумма, 0)
	               |		ИНАЧЕ ЕСТЬNULL(НоменклатураСделок.Сумма, 0) + ЕСТЬNULL(НоменклатураСделок.СуммаНДС, 0)
	               |	КОНЕЦ КАК СуммаТовара,
	               |	ЕСТЬNULL(НоменклатураСделок.СуммаНДС, 0) КАК СуммаНДСТовара,
	               |	ТаблицаПлатежей.СуммаПлатежа КАК СуммаПлатежа,
				   |	ТаблицаПлатежей.СуммаНДС КАК СуммаНДС,
	               |	ТаблицаПлатежей.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
	               |	&СтрокаВыборкиПоляСодержания КАК Наименование,
				   |	НоменклатураСделок.НомерСекции КАК НомерСекции,
				   |	ТаблицаПлатежей.ПризнакСпособаРасчета КАК ПризнакСпособаРасчета
	               |ИЗ
				   |	ТаблицаПлатежей КАК ТаблицаПлатежей
	               |	ЛЕВОЕ СОЕДИНЕНИЕ НоменклатураСделок КАК НоменклатураСделок
				   |		ПО ТаблицаПлатежей.Сделка = НоменклатураСделок.Сделка
				   |			И ТаблицаПлатежей.СтавкаНДС = НоменклатураСделок.СтавкаНДС
				   |	УПОРЯДОЧИТЬ ПО
				   |	Сделка,
				   |	СтавкаНДС
	               |ИТОГИ
	               |	СУММА(СуммаТовара),
				   |	СУММА(СуммаНДСТовара),
	               |	МАКСИМУМ(СуммаПлатежа),
				   |	МАКСИМУМ(СуммаНДС),
	               |	МАКСИМУМ(СуммаВзаиморасчетов),
				   |	МАКСИМУМ(ВалютаСделки),
				   |	МАКСИМУМ(ПризнакСпособаРасчета)
	               |ПО
	               |	Сделка,
	               |	СтавкаНДС";
				   
	СтрокаВыборкиПоляСодержания = ОбработкаТабличныхЧастей.ПолучитьЧастьЗапросаДляВыбораСодержания("НоменклатураСделок");
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&СтрокаВыборкиПоляСодержания", СтрокаВыборкиПоляСодержания);
	
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("ВалютаРеглУчета", ВалютаРеглУчета);
	Запрос.УстановитьПараметр("ДопустимыеТипыДР", ДопустимыеТипыДР);
	Запрос.УстановитьПараметр("ДопустимыеТипыСД", ДопустимыеТипыСД);
	Запрос.УстановитьПараметр("ДопустимыеТипыДО", ДопустимыеТипыДО);
	Запрос.УстановитьПараметр("ПустыеСсылки", ПустыеСсылки(ДопустимыеТипыДО));

	Возврат Запрос;
	
КонецФункции

Функция ТекстаЗапросаТЧпоВидуДокументов(ИмяДокумента, ИмяТЧ, ИмяВТ = "")
	
	ПолеНомерСекции = "
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ТаблицаНоменклатуры.Ссылка.СкладГруппа) = ТИП(Справочник.Склады)
	|				И ТаблицаНоменклатуры.Ссылка.СкладГруппа <> ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|			ТОГДА ТаблицаНоменклатуры.Ссылка.СкладГруппа.НомерСекции
	|		ИНАЧЕ 0
	|	КОНЕЦ";
	
	Если ИмяТЧ = "Товары" ИЛИ ИмяТЧ = "Продукция" Тогда
		ПолеЕдиницаИзмерения = "ТаблицаНоменклатуры.ЕдиницаИзмерения";
		ПолеХарактеристика = "ТаблицаНоменклатуры.ХарактеристикаНоменклатуры";
		Если Метаданные.Документы[ИмяДокумента].ТабличныеЧасти[ИмяТЧ].Реквизиты.Найти("СерияНоменклатуры") <> Неопределено Тогда
			ПолеСерия = "ТаблицаНоменклатуры.СерияНоменклатуры";
		Иначе
			ПолеСерия = "ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)";
		КонецЕсли;
		ПолеСодержание = """""";
		Если ИмяДокумента = "СчетНаОплатуПокупателю" Тогда
			ПолеНомерСекции = СтрЗаменить(ПолеНомерСекции, "СкладГруппа", "Склад");
		ИначеЕсли ИмяДокумента <> "ЗаказПокупателя" Тогда
			ПолеНомерСекции = "
			|	ВЫБОР
			|		КОГДА ТаблицаНоменклатуры.Склад <> ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
			|			ТОГДА ТаблицаНоменклатуры.Склад.НомерСекции
			|		КОГДА ТИПЗНАЧЕНИЯ(ТаблицаНоменклатуры.Ссылка.СкладОрдер) = ТИП(Справочник.Склады)
			|				И ТаблицаНоменклатуры.Ссылка.СкладОрдер <> ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
			|			ТОГДА ТаблицаНоменклатуры.Ссылка.СкладОрдер.НомерСекции
			|		ИНАЧЕ 0
			|	КОНЕЦ";
			Если ИмяДокумента = "РеализацияТоваровУслуг" Тогда
				ПолеНомерСекции = СтрЗаменить(ПолеНомерСекции, "СкладОрдер", "Склад");
			КонецЕсли;
		КонецЕсли;
	Иначе
		ПолеЕдиницаИзмерения = "ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка)";
		ПолеХарактеристика = "ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)";
		ПолеСерия = "ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)";
		ПолеСодержание = "ТаблицаНоменклатуры.Содержание";
		Если ИмяДокумента <> "ЗаказПокупателя" Тогда
			ПолеНомерСекции = СтрЗаменить(ПолеНомерСекции, "СкладГруппа", "Склад");
		КонецЕсли;
	КонецЕсли;
	Если ИмяДокумента = "РеализацияУслугПоПереработке" ИЛИ ИмяДокумента = "АктОбОказанииПроизводственныхУслуг" Тогда
		ПолеНомерСекции = "0";
	КонецЕсли;
	Если Не ПустаяСтрока(ИмяВТ) Тогда
		ТекстВТ = Символы.ПС + " ПОМЕСТИТЬ " + ИмяВТ;
		ТекстОбъединения = "";
	Иначе
		ТекстВТ = "";
		ТекстОбъединения = "
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |";
		
	КонецЕсли;
	Если ИмяДокумента = "ПередачаОС" Тогда
		ТекстЗапроса = ТекстЗапросаТЧПередачаОС(ТекстОбъединения, ТекстВТ);
		Возврат ТекстЗапроса;
	КонецЕсли;
	ТекстЗапроса = ТекстОбъединения + "
	               |ВЫБРАТЬ
	               |	ТаблицаПлатежей.Сделка,
	               |	ТаблицаНоменклатуры.Номенклатура КАК Номенклатура,
				   |	ТаблицаНоменклатуры.Номенклатура.Услуга КАК Услуга,
	               |	ТаблицаНоменклатуры.Количество КАК Количество,
	               |	ТаблицаНоменклатуры.Цена КАК Цена,
	               |	ТаблицаНоменклатуры.Сумма КАК Сумма,
	               |	ТаблицаПлатежей.СтавкаНДС КАК СтавкаНДС,
				   |	ТаблицаНоменклатуры.Ссылка.ВалютаДокумента КАК ВалютаСделки,
	               |	ТаблицаНоменклатуры.СуммаНДС КАК СуммаНДС,
	               |	"+ПолеЕдиницаИзмерения+" КАК ЕдиницаИзмерения,
	               |	ТаблицаНоменклатуры.Ссылка.СуммаВключаетНДС КАК СуммаВключаетНДС,
	               |	ТаблицаПлатежей.СуммаПлатежа КАК СуммаПлатежа,
	               |	ТаблицаПлатежей.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
	               |	"+ПолеХарактеристика+" КАК Характеристика,
	               |	"+ПолеСерия+" КАК Серия,
	               |	"+ПолеСодержание+" КАК Содержание,
				   |	"+ПолеНомерСекции+" КАК НомерСекции,
	               |	ТаблицаПлатежей.ПроцентНДС КАК ПроцентНДС"+
				   ТекстВТ+"
	               |ИЗ
	               |	ТаблицаПлатежей КАК ТаблицаПлатежей
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ."+ИмяДокумента+"."+ИмяТЧ+" КАК ТаблицаНоменклатуры
	               |		ПО ТаблицаПлатежей.Сделка = ТаблицаНоменклатуры.Ссылка
	               |			И ТаблицаПлатежей.СтавкаНДС = ТаблицаНоменклатуры.СтавкаНДС
				   |";
				   
	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаТЧПередачаОС(ТекстОбъединения, ТекстВТ)
	ТекстЗапроса = ТекстОбъединения + "
	               |ВЫБРАТЬ
	               |	ТаблицаПлатежей.Сделка,
	               |	ТаблицаНоменклатуры.ОсновноеСредство КАК Номенклатура,
				   |	ЛОЖЬ КАК Услуга,
	               |	1 КАК Количество,
	               |	ТаблицаНоменклатуры.Сумма КАК Цена,
	               |	ТаблицаНоменклатуры.Сумма КАК Сумма,
	               |	ТаблицаПлатежей.СтавкаНДС КАК СтавкаНДС,
				   |	ТаблицаНоменклатуры.Ссылка.ВалютаДокумента КАК ВалютаСделки,
	               |	ТаблицаНоменклатуры.СуммаНДС КАК СуммаНДС,
	               |	ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка) КАК ЕдиницаИзмерения,
	               |	ТаблицаНоменклатуры.Ссылка.СуммаВключаетНДС КАК СуммаВключаетНДС,
	               |	ТаблицаПлатежей.СуммаПлатежа КАК СуммаПлатежа,
	               |	ТаблицаПлатежей.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
	               |	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) КАК Характеристика,
	               |	ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка) КАК Серия,
	               |	"""" КАК Содержание,
				   |	0 КАК НомерСекции,
	               |	ТаблицаПлатежей.ПроцентНДС КАК ПроцентНДС"+
				   ТекстВТ+"
	               |ИЗ
	               |	ТаблицаПлатежей КАК ТаблицаПлатежей
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПередачаОС.ОС КАК ТаблицаНоменклатуры
	               |		ПО ТаблицаПлатежей.Сделка = ТаблицаНоменклатуры.Ссылка
	               |			И ТаблицаПлатежей.СтавкаНДС = ТаблицаНоменклатуры.СтавкаНДС
				   |";
				   
	Возврат ТекстЗапроса;
КонецФункции

Процедура ЗаполнитьТоварнуюСтрокуЧека(ОбщиеПараметры, СтрокаПозиции, КурсОплаты)
	
	СтрокаЧека = МенеджерОборудованияКлиентСервер.ПараметрыФискальнойСтрокиЧека();
	
	СтрокаЧека.Количество = СтрокаПозиции.Количество;
	СтрокаЧека.Цена = Окр(СтрокаПозиции.Цена * КурсОплаты, 2);
	СтрокаЧека.ЦенаСоСкидками = Окр(СтрокаПозиции.СуммаТовара * КурсОплаты / СтрокаПозиции.Количество, 2);
	СтрокаЧека.Сумма = Окр(СтрокаПозиции.СуммаТовара * КурсОплаты, 2);
	СтрокаЧека.Наименование = СокрЛП(СтрокаПозиции.Наименование) + ПредставлениеСерий(СтрокаПозиции) + 
		?(ЗначениеЗаполнено(СтрокаПозиции.ЕдиницаИзмерения)," "+Строка(СтрокаПозиции.ЕдиницаИзмерения),"");
	СтрокаЧека.СтавкаНДС = МенеджерОборудованияКлиентСервер.ПолучитьСтавкуНДСДляФискализацииЧека(СтрокаПозиции.СтавкаНДС);
	// Дополнительные реквизиты начиная с ФФД 1.1
	СтрокаЧека.СуммаНДС = Окр(СтрокаПозиции.СуммаНДСТовара * КурсОплаты, 2);
	СтрокаЧека.ПризнакСпособаРасчета = СтрокаПозиции.ПризнакСпособаРасчета;
	Если Не ЗначениеЗаполнено(СтрокаЧека.ПризнакСпособаРасчета) Тогда
		СтрокаЧека.ПризнакСпособаРасчета = ПредопределенноеЗначение("Перечисление.ПризнакиСпособаРасчета.ПередачаСПолнойОплатой");
	КонецЕсли;
	СтрокаЧека.ПризнакПредметаРасчета = ОпределитьПризнакПредметаРасчета(СтрокаПозиции.Номенклатура);
	СтрокаЧека.НомерСекции = СтрокаПозиции.НомерСекции;
	
	ОбщиеПараметры.ПозицииЧека.Добавить(СтрокаЧека);
	
КонецПроцедуры

Процедура ЗаполнитьФиктивнуюСтрокуЧека(ОбщиеПараметры, СтрокаРасшифровки, НаименованиеПредметаРасчета, Сумма = Неопределено)
	
	СтрокаЧека = МенеджерОборудованияКлиентСервер.ПараметрыФискальнойСтрокиЧека();
	
	Если Сумма = Неопределено Тогда
		Сумма = СтрокаРасшифровки.СуммаПлатежа;
	КонецЕсли;
	
	СтрокаЧека.Наименование = НаименованиеПредметаРасчета; // Наименование предмета расчета
	СтрокаЧека.Количество = 1; // Количество предмета расчета 
	СтрокаЧека.Цена = Сумма; // Цена без учета скидок и наценок
	СтрокаЧека.ЦенаСоСкидками = Сумма; // Цена с учетом скидок и наценок
	СтрокаЧека.Сумма = Сумма; // Cтоимость предмета расчета с учетом скидок и наценок
	СтрокаЧека.СтавкаНДС = МенеджерОборудованияКлиентСервер.ПолучитьСтавкуНДСДляФискализацииЧека(СтрокаРасшифровки.СтавкаНДС); // Cтавка НДС в %
	Если СтрокаЧека.СтавкаНДС = Неопределено Тогда
		СтрокаЧека.СтавкаНДС = 0;
	КонецЕсли;
	// Дополнительные реквизиты начиная с ФФД 1.1
	СтрокаЧека.СуммаНДС = СтрокаРасшифровки.СуммаНДС;
	СтрокаЧека.ПризнакСпособаРасчета = СтрокаРасшифровки.ПризнакСпособаРасчета;
	Если Не ЗначениеЗаполнено(СтрокаЧека.ПризнакСпособаРасчета) Тогда
		СтрокаЧека.ПризнакСпособаРасчета = ПредопределенноеЗначение("Перечисление.ПризнакиСпособаРасчета.Аванс");
	КонецЕсли;
	СтрокаЧека.ПризнакПредметаРасчета = ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.ПлатежВыплата");
	
	ОбщиеПараметры.ПозицииЧека.Добавить(СтрокаЧека);
	
КонецПроцедуры

Функция ПредставлениеСерий(Выборка, ИмяХарактеристики = "Характеристика", ИмяСерии = "Серия") Экспорт

	Результат = "(";

	Если ЗначениеЗаполнено(Выборка[ИмяХарактеристики]) Тогда
		Результат = Результат + Выборка[ИмяХарактеристики];
		Результат = СтрЗаменить(Результат, "<>", "");
	КонецЕсли;

	Если ЗначениеЗаполнено(Выборка[ИмяСерии]) Тогда
		Результат = ?(Результат = "(", Результат, Результат + "; ");
		Результат = Результат + Выборка[ИмяСерии];
		Результат = СтрЗаменить(Результат,  "(<>", "(");
		Результат = СтрЗаменить(Результат, "; <>",  "");
	КонецЕсли;

	Результат = Результат + ")";

	Возврат ?(Результат = "()", "", " " + Результат);

КонецФункции // ПредставлениеСерий()

Процедура ЗаписатьДанныеКодаТоварнойНоменклатуры(ЗаписьXML, ДанныеКодаТоварнойНоменклатуры)
	
	Если ПустаяСтрока(ДанныеКодаТоварнойНоменклатуры.ТипМаркировки) 
		И ПустаяСтрока(ДанныеКодаТоварнойНоменклатуры.КонтрольныйИдентификационныйЗнак)
		И ПустаяСтрока(ДанныеКодаТоварнойНоменклатуры.ГлобальныйИдентификаторТорговойЕдиницы)
		И ПустаяСтрока(ДанныеКодаТоварнойНоменклатуры.СерийныйНомер)Тогда
			Возврат;
	КонецЕсли;
		
	ЗаписьXML.ЗаписатьНачалоЭлемента("GoodCodeData");
	Если Не ПустаяСтрока(ДанныеКодаТоварнойНоменклатуры.ТипМаркировки) Тогда
		ЗаписьXML.ЗаписатьАтрибут("StampType" , XMLСтрока(ДанныеКодаТоварнойНоменклатуры.ТипМаркировки));
	КонецЕсли;
	Если Не ПустаяСтрока(ДанныеКодаТоварнойНоменклатуры.КонтрольныйИдентификационныйЗнак) Тогда
		ЗаписьXML.ЗаписатьАтрибут("Stamp" , XMLСтрока(ДанныеКодаТоварнойНоменклатуры.КонтрольныйИдентификационныйЗнак));
	КонецЕсли;
	Если Не ПустаяСтрока(ДанныеКодаТоварнойНоменклатуры.ГлобальныйИдентификаторТорговойЕдиницы) Тогда
		ЗаписьXML.ЗаписатьАтрибут("GTIN" , XMLСтрока(ДанныеКодаТоварнойНоменклатуры.ГлобальныйИдентификаторТорговойЕдиницы));
	КонецЕсли;
	Если Не ПустаяСтрока(ДанныеКодаТоварнойНоменклатуры.СерийныйНомер) Тогда
		ЗаписьXML.ЗаписатьАтрибут("SerialNumber" , XMLСтрока(ДанныеКодаТоварнойНоменклатуры.СерийныйНомер));
	КонецЕсли;
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры

Функция ПолучитьXMLПакетДляФискализацияЧека_ТО(ОбщиеПараметры, ВыходныеПараметры, СуммаЧека, ШиринаСтроки = 32, НовыйФормат = Ложь, ВерсияФФД = 0) Экспорт
	
	ПозицииЧека  = ОбщиеПараметры.ПозицииЧека;
	ТаблицаОплат = ОбщиеПараметры.ТаблицаОплат;
	СуммаЧека = 0;
	
	// Пакетная печать чека. Подготовка пакета.
	ЗаписьXML = Новый ЗаписьXML();
	ЗаписьXML.УстановитьСтроку("UTF-8");
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("CheckPackage");
	ЗаписьXML.ЗаписатьНачалоЭлемента("Parameters");
	
	ТипРасчета = МенеджерОборудованияКлиентСервер.ПолучитьКодТипаРасчетаДенежнымиСредствами(ОбщиеПараметры.ТипРасчета);
	СистемаНалогообложения = МенеджерОборудованияКлиентСервер.ПолучитьКодТипаСистемыНалогообложенияККТ(ОбщиеПараметры.СистемаНалогообложения);
	ЗаписьXML.ЗаписатьАтрибут("PaymentType", XMLСтрока(ТипРасчета));
	ЗаписьXML.ЗаписатьАтрибут("TaxVariant" , XMLСтрока(СистемаНалогообложения));
	ЗаписьXML.ЗаписатьАтрибут("CashierName",  XMLСтрока(ОбщиеПараметры.Кассир));
	Если ВерсияФФД > 0 Тогда // Атрибуты с ФФД 1.0.5 
		Если Не ПустаяСтрока(ОбщиеПараметры.КассирИНН) Тогда 
			ЗаписьXML.ЗаписатьАтрибут("CashierVATIN", XMLСтрока(ОбщиеПараметры.КассирИНН));
		КонецЕсли;
		Если Не ПустаяСтрока(ОбщиеПараметры.ОтправительEmail) Тогда
			ЗаписьXML.ЗаписатьАтрибут("SenderEmail", XMLСтрока(ОбщиеПараметры.ОтправительEmail));
		КонецЕсли;
	КонецЕсли;
	
	// Email отправляет средствами 1C
	Если ОбщиеПараметры.Свойство("Отправляет1СEmail") И НЕ ОбщиеПараметры.Отправляет1СEmail Тогда
		ЗаписьXML.ЗаписатьАтрибут("CustomerEmail", XMLСтрока(?(ОбщиеПараметры.Свойство("ПокупательEmail"), ОбщиеПараметры.ПокупательEmail, "")));
	КонецЕсли;
	// SMS отправляет средствами 1C
	Если ОбщиеПараметры.Свойство("Отправляет1СSMS") И НЕ ОбщиеПараметры.Отправляет1СSMS Тогда
		ЗаписьXML.ЗаписатьАтрибут("CustomerPhone", XMLСтрока(?(ОбщиеПараметры.Свойство("ПокупательНомер"), ОбщиеПараметры.ПокупательНомер, "")));
	КонецЕсли;
		
	Если НовыйФормат Тогда
		
		Если ВерсияФФД > 0 И ОбщиеПараметры.Свойство("ПризнакАгента") И ОбщиеПараметры.ПризнакАгента <> Неопределено Тогда  // Атрибут с ФФД 1.0.5 
			ПризнакАгента = МенеджерОборудованияКлиентСервер.ПолучитьКодПризнакаАгента(ОбщиеПараметры.ПризнакАгента);
			ЗаписьXML.ЗаписатьАтрибут("AgentSign", XMLСтрока(ПризнакАгента));
		КонецЕсли;
		
		ЗаписатьДанныеАгента(ЗаписьXML, ОбщиеПараметры.ДанныеАгента);
		ЗаписатьДанныеПоставщика(ЗаписьXML, ОбщиеПараметры.ДанныеПоставщика);
		
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
		// Табличная часть
		Если ОбщиеПараметры.ПозицииЧека <> Неопределено Тогда
			ЗаписьXML.ЗаписатьНачалоЭлемента("Positions");
			Для ИндексМассива = 0 По ОбщиеПараметры.ПозицииЧека.Количество() - 1 Цикл
				ТекущаяПозиция = ОбщиеПараметры.ПозицииЧека[ИндексМассива];
				
				Если ТекущаяПозиция.Свойство("ФискальнаяСтрока") Тогда
					
					ЗаписьXML.ЗаписатьНачалоЭлемента("FiscalString");
					ЗаписьXML.ЗаписатьАтрибут("Name"      , XMLСтрока(ТекущаяПозиция.Наименование));
					ЗаписьXML.ЗаписатьАтрибут("Quantity"         , XMLСтрока(ТекущаяПозиция.Количество));
					ЗаписьXML.ЗаписатьАтрибут("PriceWithDiscount", XMLСтрока(ТекущаяПозиция.ЦенаСоСкидками));
					ЗаписьXML.ЗаписатьАтрибут("SumWithDiscount"  , XMLСтрока(ТекущаяПозиция.Сумма));
					ЗаписьXML.ЗаписатьАтрибут("DiscountSum"      , XMLСтрока(ТекущаяПозиция.СуммаСкидок));
					ЗаписьXML.ЗаписатьАтрибут("Department"       , XMLСтрока(ТекущаяПозиция.НомерСекции));
					
					Если НЕ ПустаяСтрока(ТекущаяПозиция.СтавкаНДС) Тогда 
						Если ТекущаяПозиция.СтавкаНДС = 118 Тогда
							ЗначениеСтавкаНДС = "18/118";
						ИначеЕсли ТекущаяПозиция.СтавкаНДС = 110 Тогда
							ЗначениеСтавкаНДС = "10/110";
						Иначе
							ЗначениеСтавкаНДС = ТекущаяПозиция.СтавкаНДС;
						КонецЕсли;
					Иначе
						ЗначениеСтавкаНДС = "none";
					КонецЕсли;
					
					ЗаписьXML.ЗаписатьАтрибут("Tax", XMLСтрока(ЗначениеСтавкаНДС));
					
					Если ТекущаяПозиция.Свойство("ПризнакСпособаРасчета") И ТекущаяПозиция.ПризнакСпособаРасчета <> Неопределено Тогда
						ПризнакСпособаРасчета = МенеджерОборудованияКлиентСервер.ПолучитьКодПризнакаСпособаРасчета(ТекущаяПозиция.ПризнакСпособаРасчета);
						ЗаписьXML.ЗаписатьАтрибут("SignMethodCalculation", XMLСтрока(ПризнакСпособаРасчета));
					КонецЕсли;
					Если ТекущаяПозиция.Свойство("ПризнакПредметаРасчета") И ТекущаяПозиция.ПризнакПредметаРасчета <> Неопределено Тогда
						ПризнакПредметаРасчета = МенеджерОборудованияКлиентСервер.ПолучитьКодПризнакаПредметаРасчета(ТекущаяПозиция.ПризнакПредметаРасчета);
						ЗаписьXML.ЗаписатьАтрибут("SignCalculationObject", XMLСтрока(ПризнакПредметаРасчета));
					КонецЕсли;
					
					Если ВерсияФФД > 0 Тогда // Атрибуты с ФФД 1.0.5
						ЗаписьXML.ЗаписатьАтрибут("TaxSum", XMLСтрока(ТекущаяПозиция.СуммаНДС));
						Если ВерсияФФД > 1 Тогда // Атрибуты с ФФД 1.1
							Если ТекущаяПозиция.Свойство("ПризнакАгентаПоПредметуРасчета") И ТекущаяПозиция.ПризнакАгентаПоПредметуРасчета <> Неопределено Тогда
								ПризнакАгентаПоПредметуРасчета = МенеджерОборудованияКлиентСервер.ПолучитьКодПризнакаАгента(ТекущаяПозиция.ПризнакАгентаПоПредметуРасчета);
								ЗаписьXML.ЗаписатьАтрибут("SignSubjectCalculationAgent", XMLСтрока(ПризнакАгентаПоПредметуРасчета));
							КонецЕсли;
							Если ТекущаяПозиция.Свойство("ЕдиницаИзмеренияПредметаРасчета") И ТекущаяПозиция.ЕдиницаИзмеренияПредметаРасчета <> Неопределено Тогда
								ЗаписьXML.ЗаписатьАтрибут("MeasurementUnit"   , XMLСтрока(ТекущаяПозиция.ЕдиницаИзмеренияПредметаРасчета));
							КонецЕсли;
							Если ТекущаяПозиция.Свойство("КодТоварнойНоменклатуры") И ТекущаяПозиция.КодТоварнойНоменклатуры <> Неопределено Тогда
								ЗаписьXML.ЗаписатьАтрибут("NomenclatureCode"   , XMLСтрока(ТекущаяПозиция.КодТоварнойНоменклатуры));
							КонецЕсли;
							
							ЗаписатьДанныеАгента(ЗаписьXML, ТекущаяПозиция.ДанныеАгента);
							ЗаписатьДанныеПоставщика(ЗаписьXML, ТекущаяПозиция.ДанныеПоставщика);
						КонецЕсли;
					КонецЕсли;
					
					ЗаписьXML.ЗаписатьКонецЭлемента();
					СуммаЧека = СуммаЧека + ТекущаяПозиция.Сумма;
					
				ИначеЕсли ТекущаяПозиция.Свойство("ТекстоваяСтрока") Тогда
					
					Если ТекущаяПозиция.Свойство("ПереносСтроки") И ТекущаяПозиция.ПереносСтроки Тогда 
						ТекстовыеСтроки = МенеджерОборудованияКлиентСервер.ПостроитьПолеПереносом(ТекущаяПозиция.Текст, ШиринаСтроки);
					Иначе
						ТекстовыеСтроки = ТекущаяПозиция.Текст;
					КонецЕсли;
					Выравнивание = ?(ТекущаяПозиция.Свойство("Выравнивание"),  ТекущаяПозиция.Выравнивание, "Лево"); 
					Для НомерСтроки = 1 По СтрЧислоСтрок(ТекстовыеСтроки) Цикл
						ВыделеннаяСтрока = СтрПолучитьСтроку(ТекстовыеСтроки, НомерСтроки);
						ВыделеннаяСтрока = МенеджерОборудованияКлиентСервер.ВыравнитьПоле(ВыделеннаяСтрока, ШиринаСтроки, Выравнивание); 
						ЗаписьXML.ЗаписатьНачалоЭлемента("TextString");
						ЗаписьXML.ЗаписатьАтрибут("Text", XMLСтрока(ВыделеннаяСтрока));
						ЗаписьXML.ЗаписатьКонецЭлемента();  
					КонецЦикла;
					
				ИначеЕсли ТекущаяПозиция.Свойство("ШтрихКод") Тогда
					ЗаписьXML.ЗаписатьНачалоЭлемента("Barcode");
					ЗаписьXML.ЗаписатьАтрибут("BarcodeType", XMLСтрока(ТекущаяПозиция.ТипШтрихкода));
					ЗаписьXML.ЗаписатьАтрибут("Barcode", XMLСтрока(ТекущаяПозиция.ШтрихКод));
					ЗаписьXML.ЗаписатьКонецЭлемента();
				КонецЕсли;
			КонецЦикла;
			ЗаписьXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
		
		// Таблица оплат
		Если ТаблицаОплат <> Неопределено Тогда
			СуммаНаличными       = 0;
			СуммаЭлектронными    = 0;
			СуммаПостоплатой     = 0;
			СуммаПредоплатой     = 0;
			СуммаПредоставлением = 0;
			Для ИндексОплаты = 0 По ТаблицаОплат.Количество() - 1 Цикл
				Если ТаблицаОплат[ИндексОплаты].ТипОплаты = Перечисления.ТипыОплатыККТ.Электронно Тогда
					СуммаЭлектронными = СуммаЭлектронными + ТаблицаОплат[ИндексОплаты].Сумма;
				ИначеЕсли ТаблицаОплат[ИндексОплаты].ТипОплаты = Перечисления.ТипыОплатыККТ.Предоплата Тогда
					СуммаПредоплатой = СуммаПредоплатой + ТаблицаОплат[ИндексОплаты].Сумма;
				ИначеЕсли ТаблицаОплат[ИндексОплаты].ТипОплаты = Перечисления.ТипыОплатыККТ.Постоплата Тогда
					СуммаПостоплатой = СуммаПостоплатой + ТаблицаОплат[ИндексОплаты].Сумма;
				ИначеЕсли ТаблицаОплат[ИндексОплаты].ТипОплаты = Перечисления.ТипыОплатыККТ.ВстречноеПредоставление Тогда
					СуммаПредоставлением = СуммаПредоставлением + ТаблицаОплат[ИндексОплаты].Сумма;
				Иначе
					СуммаНаличными = СуммаНаличными + ТаблицаОплат[ИндексОплаты].Сумма;
				КонецЕсли;
			КонецЦикла;
			
			ЗаписьXML.ЗаписатьНачалоЭлемента("Payments");
			Если ВерсияФФД > 0 Тогда // Атрибуты с ФФД 1.0.5
				ЗаписьXML.ЗаписатьАтрибут("Cash"             , XMLСтрока(СуммаНаличными));
				ЗаписьXML.ЗаписатьАтрибут("ElectronicPayment", XMLСтрока(СуммаЭлектронными));
				ЗаписьXML.ЗаписатьАтрибут("Credit"           , XMLСтрока(СуммаПостоплатой));
				ЗаписьXML.ЗаписатьАтрибут("AdvancePayment"   , XMLСтрока(СуммаПредоплатой));
				ЗаписьXML.ЗаписатьАтрибут("CashProvision"    , XMLСтрока(СуммаПредоставлением));
			Иначе
				ЗаписьXML.ЗаписатьАтрибут("Cash"             , XMLСтрока(СуммаНаличными));
				ЗаписьXML.ЗаписатьАтрибут("ElectronicPayment", XMLСтрока(СуммаЭлектронными + СуммаПостоплатой + СуммаПредоплатой + СуммаПредоставлением));
			КонецЕсли;
			ЗаписьXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
		
	Иначе
		
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
		// Табличная часть
		Если ОбщиеПараметры.ПозицииЧека <> Неопределено Тогда
			ЗаписьXML.ЗаписатьНачалоЭлемента("Positions");
			Для ИндексМассива = 0 По ОбщиеПараметры.ПозицииЧека.Количество() - 1 Цикл
				ТекущаяПозиция = ОбщиеПараметры.ПозицииЧека[ИндексМассива];
				Если ТекущаяПозиция.Свойство("ФискальнаяСтрока") Тогда
					ЗаписьXML.ЗаписатьНачалоЭлемента("FiscalString");
					Наименование = ТекущаяПозиция.Наименование;
					Если ТекущаяПозиция.Свойство("ПризнакСпособаРасчета") И ТекущаяПозиция.ПризнакСпособаРасчета <> Неопределено Тогда
						Если НЕ ТекущаяПозиция.ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПередачаСПолнойОплатой Тогда // Не отображаем для полной оплаты.
							Наименование = МенеджерОборудованияКлиентСервер.ПолучитьПризнакСпособаРасчетаДляПечати(ТекущаяПозиция.ПризнакСпособаРасчета) + " " + Наименование;
						КонецЕсли;
					КонецЕсли;
					ЗаписьXML.ЗаписатьАтрибут("Name"      , Наименование);
					ЗаписьXML.ЗаписатьАтрибут("Quantity"  , XMLСтрока(ТекущаяПозиция.Количество));
					ЗаписьXML.ЗаписатьАтрибут("Price"     , XMLСтрока(ТекущаяПозиция.Цена));
					ЗаписьXML.ЗаписатьАтрибут("Amount"    , XMLСтрока(ТекущаяПозиция.Сумма));
					ЗаписьXML.ЗаписатьАтрибут("Department", XMLСтрока(ТекущаяПозиция.НомерСекции));
					Если НЕ ПустаяСтрока(ТекущаяПозиция.СтавкаНДС) Тогда 
						ЗаписьXML.ЗаписатьАтрибут("Tax"   , XMLСтрока(ТекущаяПозиция.СтавкаНДС));
					Иначе
						ЗаписьXML.ЗаписатьАтрибут("Tax"   , "none");
					КонецЕсли;
					ЗаписьXML.ЗаписатьКонецЭлемента();
					СуммаЧека = СуммаЧека + ТекущаяПозиция.Сумма;
				ИначеЕсли ТекущаяПозиция.Свойство("ТекстоваяСтрока") Тогда
					Если ТекущаяПозиция.Свойство("ПереносСтроки") И ТекущаяПозиция.ПереносСтроки Тогда 
						ТекстовыеСтроки = МенеджерОборудованияКлиентСервер.ПостроитьПолеПереносом(ТекущаяПозиция.Текст, ШиринаСтроки);
					Иначе
						ТекстовыеСтроки = ТекущаяПозиция.Текст;
					КонецЕсли;
					Выравнивание = ?(ТекущаяПозиция.Свойство("Выравнивание"),  ТекущаяПозиция.Выравнивание, "Лево"); 
					Для НомерСтроки = 1 По СтрЧислоСтрок(ТекстовыеСтроки) Цикл
						ВыделеннаяСтрока = СтрПолучитьСтроку(ТекстовыеСтроки, НомерСтроки);
						ВыделеннаяСтрока = МенеджерОборудованияКлиентСервер.ВыравнитьПоле(ВыделеннаяСтрока, ШиринаСтроки, Выравнивание); 
						ЗаписьXML.ЗаписатьНачалоЭлемента("TextString");
						ЗаписьXML.ЗаписатьАтрибут("Text", XMLСтрока(ВыделеннаяСтрока));
						ЗаписьXML.ЗаписатьКонецЭлемента();  
					КонецЦикла;
				ИначеЕсли ТекущаяПозиция.Свойство("ШтрихКод") Тогда
					ЗаписьXML.ЗаписатьНачалоЭлемента("Barcode");
					ЗаписьXML.ЗаписатьАтрибут("BarcodeType", XMLСтрока(ТекущаяПозиция.ТипШтрихкода));
					ЗаписьXML.ЗаписатьАтрибут("Barcode", XMLСтрока(ТекущаяПозиция.ШтрихКод));
					ЗаписьXML.ЗаписатьКонецЭлемента();
				КонецЕсли;
			КонецЦикла;
			ЗаписьXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
		
		// Таблица оплат
		Если ТаблицаОплат <> Неопределено Тогда
			СуммаНаличными       = 0;
			СуммаЭлектронными    = 0;
			СуммаПостоплатой     = 0;
			СуммаПредоплатой     = 0;
			Для ИндексОплаты = 0 По ТаблицаОплат.Количество() - 1 Цикл
				Если ТаблицаОплат[ИндексОплаты].ТипОплаты = Перечисления.ТипыОплатыККТ.Электронно Тогда
					СуммаЭлектронными = СуммаЭлектронными + ТаблицаОплат[ИндексОплаты].Сумма;
				ИначеЕсли ТаблицаОплат[ИндексОплаты].ТипОплаты = Перечисления.ТипыОплатыККТ.Предоплата Тогда
					СуммаПредоплатой = СуммаПредоплатой + ТаблицаОплат[ИндексОплаты].Сумма;
				ИначеЕсли ТаблицаОплат[ИндексОплаты].ТипОплаты = Перечисления.ТипыОплатыККТ.Постоплата Тогда
					СуммаПостоплатой = СуммаПостоплатой + ТаблицаОплат[ИндексОплаты].Сумма;
				Иначе
					СуммаНаличными = СуммаНаличными + ТаблицаОплат[ИндексОплаты].Сумма;
				КонецЕсли;
			КонецЦикла;
			
			ЗаписьXML.ЗаписатьНачалоЭлемента("Payments");
			ЗаписьXML.ЗаписатьАтрибут("Cash", XMLСтрока(СуммаНаличными));
			ЗаписьXML.ЗаписатьАтрибут("CashLessType1", XMLСтрока(СуммаЭлектронными));
			ЗаписьXML.ЗаписатьАтрибут("CashLessType2", XMLСтрока(СуммаПостоплатой));
			ЗаписьXML.ЗаписатьАтрибут("CashLessType3", XMLСтрока(СуммаПредоплатой));
			ЗаписьXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
		
	
	КонецЕсли;
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	Возврат ЗаписьXML.Закрыть();
	
КонецФункции   

// Функция формирует XML пакет для Фискализация чека.
// Параметры: 
//   РасширеннаяВыгрузка  - булево, признак расширенной выгрузки.
// Возвращаемое значение: 
//   Строка - если есть дублирование, возвращает Истина, иначе Ложь.
//
Функция ПолучитьXMLПакетДляФискализацияЧека(ОбщиеПараметры, ВыходныеПараметры, СуммаЧека, ШиринаСтроки = 32, НовыйФормат = Ложь) Экспорт
	
	ПозицииЧека  = ОбщиеПараметры.ПозицииЧека;
	ТаблицаОплат = ОбщиеПараметры.ТаблицаОплат;
	СуммаЧека = 0;
	
	// Пакетная печать чека. Подготовка пакета.
	ЗаписьXML = Новый ЗаписьXML();
	ЗаписьXML.УстановитьСтроку("UTF-8");
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("CheckPackage");
	ЗаписьXML.ЗаписатьНачалоЭлемента("Parameters");
	
	ТипРасчета = МенеджерОборудованияКлиентСервер.ПолучитьКодТипаРасчетаДенежнымиСредствами(ОбщиеПараметры.ТипРасчета);
	СистемаНалогообложения = МенеджерОборудованияКлиентСервер.ПолучитьКодТипаСистемыНалогообложенияККТ(ОбщиеПараметры.СистемаНалогообложения);
	ЗаписьXML.ЗаписатьАтрибут("PaymentType", XMLСтрока(ТипРасчета));
	ЗаписьXML.ЗаписатьАтрибут("TaxVariant" , XMLСтрока(СистемаНалогообложения));
	ЗаписьXML.ЗаписатьАтрибут("CashierName",  XMLСтрока(ОбщиеПараметры.Кассир));
	Если Не ПустаяСтрока(ОбщиеПараметры.КассирИНН) Тогда 
		ЗаписьXML.ЗаписатьАтрибут("CashierVATIN", XMLСтрока(ОбщиеПараметры.КассирИНН));
	КонецЕсли;
	Если Не ПустаяСтрока(ОбщиеПараметры.ОтправительEmail) Тогда
		ЗаписьXML.ЗаписатьАтрибут("SenderEmail", XMLСтрока(ОбщиеПараметры.ОтправительEmail));
	КонецЕсли;
	
	// Email отправляет средствами 1C
	Если ОбщиеПараметры.Свойство("Отправляет1СEmail") И НЕ ОбщиеПараметры.Отправляет1СEmail Тогда
		ЗаписьXML.ЗаписатьАтрибут("CustomerEmail", XMLСтрока(?(ОбщиеПараметры.Свойство("ПокупательEmail"), ОбщиеПараметры.ПокупательEmail, "")));
	КонецЕсли;
	// SMS отправляет средствами 1C
	Если ОбщиеПараметры.Свойство("Отправляет1СSMS") И НЕ ОбщиеПараметры.Отправляет1СSMS Тогда
		ЗаписьXML.ЗаписатьАтрибут("CustomerPhone", XMLСтрока(?(ОбщиеПараметры.Свойство("ПокупательНомер"), ОбщиеПараметры.ПокупательНомер, "")));
	КонецЕсли;
		
	Если НовыйФормат Тогда
		
		Если ОбщиеПараметры.Свойство("ПризнакАгента") И НЕ ПустаяСтрока(ОбщиеПараметры.ПризнакАгента) Тогда  // Атрибут с ФФД 1.0.5 
			ПризнакАгента = МенеджерОборудованияКлиентСервер.ПолучитьКодПризнакаАгента(ОбщиеПараметры.ПризнакАгента);
			ЗаписьXML.ЗаписатьАтрибут("AgentSign", XMLСтрока(ПризнакАгента));
		КонецЕсли;
		
		Если ОбщиеПараметры.Свойство("АдресРасчетов") И НЕ ПустаяСтрока(ОбщиеПараметры.АдресРасчетов) Тогда   
			ЗаписьXML.ЗаписатьАтрибут("AddressSettle", XMLСтрока(ОбщиеПараметры.АдресРасчетов));
		КонецЕсли;
		Если ОбщиеПараметры.Свойство("МестоРасчетов") И НЕ ПустаяСтрока(ОбщиеПараметры.МестоРасчетов) Тогда  
			ЗаписьXML.ЗаписатьАтрибут("PlaceSettle", XMLСтрока(ОбщиеПараметры.МестоРасчетов));
		КонецЕсли;
		
		ЗаписатьДанныеАгента(ЗаписьXML, ОбщиеПараметры.ДанныеАгента);
		ЗаписатьДанныеПоставщика(ЗаписьXML, ОбщиеПараметры.ДанныеПоставщика);
		
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
		// Табличная часть
		Если ОбщиеПараметры.ПозицииЧека <> Неопределено Тогда
			ЗаписьXML.ЗаписатьНачалоЭлемента("Positions");
			Для ИндексМассива = 0 По ОбщиеПараметры.ПозицииЧека.Количество() - 1 Цикл
				ТекущаяПозиция = ОбщиеПараметры.ПозицииЧека[ИндексМассива];
				
				Если ТекущаяПозиция.Свойство("ФискальнаяСтрока") Тогда
						Если ТекущаяПозиция.ЦенаСоСкидками = 0 И ТекущаяПозиция.Сумма > 0 И ТекущаяПозиция.Количество > 0 Тогда
							ЦенаСоСкидками = Окр(ТекущаяПозиция.Сумма / ТекущаяПозиция.Количество, 2); 
						Иначе
							ЦенаСоСкидками = ТекущаяПозиция.ЦенаСоСкидками; 
						КонецЕсли;
						ЗаписьXML.ЗаписатьНачалоЭлемента("FiscalString");
						ЗаписьXML.ЗаписатьАтрибут("Name"             , XMLСтрока(ТекущаяПозиция.Наименование));
						ЗаписьXML.ЗаписатьАтрибут("Quantity"         , XMLСтрока(ТекущаяПозиция.Количество));
						ЗаписьXML.ЗаписатьАтрибут("PriceWithDiscount", XMLСтрока(ЦенаСоСкидками));
						ЗаписьXML.ЗаписатьАтрибут("SumWithDiscount"  , XMLСтрока(ТекущаяПозиция.Сумма));
						ЗаписьXML.ЗаписатьАтрибут("DiscountSum"      , XMLСтрока(ТекущаяПозиция.СуммаСкидок));
						ЗаписьXML.ЗаписатьАтрибут("Department"       , XMLСтрока(ТекущаяПозиция.НомерСекции));
						
						Если НЕ ПустаяСтрока(ТекущаяПозиция.СтавкаНДС) Тогда 
							Если ТекущаяПозиция.СтавкаНДС = 120 Тогда
								ЗначениеСтавкаНДС = "20/120";
							ИначеЕсли ТекущаяПозиция.СтавкаНДС = 118 Тогда
								ЗначениеСтавкаНДС = "18/118";
							ИначеЕсли ТекущаяПозиция.СтавкаНДС = 110 Тогда
								ЗначениеСтавкаНДС = "10/110";
							Иначе
								ЗначениеСтавкаНДС = ТекущаяПозиция.СтавкаНДС;
							КонецЕсли;
						Иначе
							ЗначениеСтавкаНДС = "none";
						КонецЕсли;
						ЗаписьXML.ЗаписатьАтрибут("Tax", XMLСтрока(ЗначениеСтавкаНДС));
						
						Если ТекущаяПозиция.Свойство("ПризнакСпособаРасчета") И НЕ ПустаяСтрока(ТекущаяПозиция.ПризнакСпособаРасчета) Тогда
							ПризнакСпособаРасчета = МенеджерОборудованияКлиентСервер.ПолучитьКодПризнакСпособаРасчета(ТекущаяПозиция.ПризнакСпособаРасчета);
							ЗаписьXML.ЗаписатьАтрибут("SignMethodCalculation", XMLСтрока(ПризнакСпособаРасчета));
						КонецЕсли;
						Если ТекущаяПозиция.Свойство("ПризнакПредметаРасчета") И НЕ ПустаяСтрока(ТекущаяПозиция.ПризнакПредметаРасчета) Тогда
							ПризнакПредметаРасчета = МенеджерОборудованияКлиентСервер.ПолучитьКодПризнакаПредметаРасчета(ТекущаяПозиция.ПризнакПредметаРасчета);
							ЗаписьXML.ЗаписатьАтрибут("SignCalculationObject", XMLСтрока(ПризнакПредметаРасчета));
						КонецЕсли;
						
						Если ТекущаяПозиция.Свойство("СуммаНДС") И НЕ ПустаяСтрока(ТекущаяПозиция.СуммаНДС) Тогда
						ЗаписьXML.ЗаписатьАтрибут("TaxSum", XMLСтрока(ТекущаяПозиция.СуммаНДС));
						КонецЕсли;
						
						Если ТекущаяПозиция.Свойство("ПризнакАгентаПоПредметуРасчета") И НЕ ПустаяСтрока(ТекущаяПозиция.ПризнакАгентаПоПредметуРасчета) Тогда
							ПризнакАгентаПоПредметуРасчета = МенеджерОборудованияКлиентСервер.ПолучитьКодПризнакаАгента(ТекущаяПозиция.ПризнакАгентаПоПредметуРасчета);
							ЗаписьXML.ЗаписатьАтрибут("SignSubjectCalculationAgent", XMLСтрока(ПризнакАгентаПоПредметуРасчета));
						КонецЕсли;
						
						Если ТекущаяПозиция.Свойство("ЕдиницаИзмеренияПредметаРасчета") И ТекущаяПозиция.ЕдиницаИзмеренияПредметаРасчета <> Неопределено Тогда
							ЗаписьXML.ЗаписатьАтрибут("MeasurementUnit"   , XMLСтрока(ТекущаяПозиция.ЕдиницаИзмеренияПредметаРасчета));
						КонецЕсли;
						
						ЗаписатьДанныеАгента(ЗаписьXML, ТекущаяПозиция.ДанныеАгента);
						ЗаписатьДанныеПоставщика(ЗаписьXML, ТекущаяПозиция.ДанныеПоставщика);
						ЗаписатьДанныеКодаТоварнойНоменклатуры(ЗаписьXML, ТекущаяПозиция.ДанныеКодаТоварнойНоменклатуры);
						
						ЗаписьXML.ЗаписатьКонецЭлемента();
						СуммаЧека = СуммаЧека + ТекущаяПозиция.Сумма;
						
					ИначеЕсли ТекущаяПозиция.Свойство("ТекстоваяСтрока") Тогда
						
						Если ТекущаяПозиция.Свойство("ПереносСтроки") И ТекущаяПозиция.ПереносСтроки Тогда 
							ТекстовыеСтроки = МенеджерОборудованияКлиентСервер.ПостроитьПолеПереносом(ТекущаяПозиция.Текст, ШиринаСтроки);
						Иначе
							ТекстовыеСтроки = ТекущаяПозиция.Текст;
						КонецЕсли;
						Выравнивание = ?(ТекущаяПозиция.Свойство("Выравнивание"),  ТекущаяПозиция.Выравнивание, "Лево"); 
						Для НомерСтроки = 1 По СтрЧислоСтрок(ТекстовыеСтроки) Цикл
							ВыделеннаяСтрока = СтрПолучитьСтроку(ТекстовыеСтроки, НомерСтроки);
							ВыделеннаяСтрока = МенеджерОборудованияКлиентСервер.ВыравнитьПоле(ВыделеннаяСтрока, ШиринаСтроки, Выравнивание); 
							ЗаписьXML.ЗаписатьНачалоЭлемента("TextString");
							ЗаписьXML.ЗаписатьАтрибут("Text", XMLСтрока(ВыделеннаяСтрока));
							ЗаписьXML.ЗаписатьКонецЭлемента();  
						КонецЦикла;
						
					ИначеЕсли ТекущаяПозиция.Свойство("ШтрихКод") Тогда
						ЗаписьXML.ЗаписатьНачалоЭлемента("Barcode");
						ЗаписьXML.ЗаписатьАтрибут("BarcodeType", XMLСтрока(ТекущаяПозиция.ТипШтрихкода));
						ЗаписьXML.ЗаписатьАтрибут("Barcode", XMLСтрока(ТекущаяПозиция.ШтрихКод));
						ЗаписьXML.ЗаписатьКонецЭлемента();
				КонецЕсли;
			КонецЦикла;
			ЗаписьXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
		
		// Таблица оплат
		Если ТаблицаОплат <> Неопределено Тогда
			СуммаНаличными       = 0;
			СуммаЭлектронными    = 0;
			СуммаПостоплатой     = 0;
			СуммаПредоплатой     = 0;
			СуммаПредоставлением = 0;
			Для ИндексОплаты = 0 По ТаблицаОплат.Количество() - 1 Цикл
				Если ТаблицаОплат[ИндексОплаты].ТипОплаты = Перечисления.ТипыОплатыККТ.Электронно Тогда
					СуммаЭлектронными = СуммаЭлектронными + ТаблицаОплат[ИндексОплаты].Сумма;
				ИначеЕсли ТаблицаОплат[ИндексОплаты].ТипОплаты = Перечисления.ТипыОплатыККТ.Предоплата Тогда
					СуммаПредоплатой = СуммаПредоплатой + ТаблицаОплат[ИндексОплаты].Сумма;
				ИначеЕсли ТаблицаОплат[ИндексОплаты].ТипОплаты = Перечисления.ТипыОплатыККТ.Постоплата Тогда
					СуммаПостоплатой = СуммаПостоплатой + ТаблицаОплат[ИндексОплаты].Сумма;
				ИначеЕсли ТаблицаОплат[ИндексОплаты].ТипОплаты = Перечисления.ТипыОплатыККТ.ВстречноеПредоставление Тогда
					СуммаПредоставлением = СуммаПредоставлением + ТаблицаОплат[ИндексОплаты].Сумма;
				Иначе
					СуммаНаличными = СуммаНаличными + ТаблицаОплат[ИндексОплаты].Сумма;
				КонецЕсли;
			КонецЦикла;
			ЗаписьXML.ЗаписатьНачалоЭлемента("Payments");
			ЗаписьXML.ЗаписатьАтрибут("Cash"             , XMLСтрока(СуммаНаличными));
			ЗаписьXML.ЗаписатьАтрибут("ElectronicPayment", XMLСтрока(СуммаЭлектронными));
			ЗаписьXML.ЗаписатьАтрибут("Credit"           , XMLСтрока(СуммаПостоплатой));
			ЗаписьXML.ЗаписатьАтрибут("AdvancePayment"   , XMLСтрока(СуммаПредоплатой));
			ЗаписьXML.ЗаписатьАтрибут("CashProvision"    , XMLСтрока(СуммаПредоставлением));
			ЗаписьXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
		
	Иначе
		
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
		// Табличная часть
		Если ОбщиеПараметры.ПозицииЧека <> Неопределено Тогда
			ЗаписьXML.ЗаписатьНачалоЭлемента("Positions");
			Для ИндексМассива = 0 По ОбщиеПараметры.ПозицииЧека.Количество() - 1 Цикл
				ТекущаяПозиция = ОбщиеПараметры.ПозицииЧека[ИндексМассива];
				Если ТекущаяПозиция.Свойство("ФискальнаяСтрока") Тогда
						ЗаписьXML.ЗаписатьНачалоЭлемента("FiscalString");
						Наименование = ТекущаяПозиция.Наименование;
						Если ТекущаяПозиция.Свойство("ПризнакСпособаРасчета") И НЕ ПустаяСтрока(ТекущаяПозиция.ПризнакСпособаРасчета) Тогда
							Если НЕ ТекущаяПозиция.ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПередачаСПолнойОплатой Тогда // Не отображаем для полной оплаты.
								Наименование = МенеджерОборудованияКлиентСервер.ПолучитьПризнакСпособаРасчетаДляПечати(ТекущаяПозиция.ПризнакСпособаРасчета) + " " + Наименование;
							КонецЕсли;
						КонецЕсли;
						ЗаписьXML.ЗаписатьАтрибут("Name"      , Наименование);
						ЗаписьXML.ЗаписатьАтрибут("Quantity"  , XMLСтрока(ТекущаяПозиция.Количество));
						ЗаписьXML.ЗаписатьАтрибут("Price"     , XMLСтрока(ТекущаяПозиция.Цена));
						ЗаписьXML.ЗаписатьАтрибут("Amount"    , XMLСтрока(ТекущаяПозиция.Сумма));
						ЗаписьXML.ЗаписатьАтрибут("Department", XMLСтрока(ТекущаяПозиция.НомерСекции));
						Если НЕ ПустаяСтрока(ТекущаяПозиция.СтавкаНДС) Тогда
							Если ТекущаяПозиция.СтавкаНДС = 120 Тогда
								ЗначениеСтавкаНДС = "20/120";
							ИначеЕсли ТекущаяПозиция.СтавкаНДС = 118 Тогда
								ЗначениеСтавкаНДС = "18/118";
							ИначеЕсли ТекущаяПозиция.СтавкаНДС = 110 Тогда
								ЗначениеСтавкаНДС = "10/110";
							Иначе
								ЗначениеСтавкаНДС = ТекущаяПозиция.СтавкаНДС;
							КонецЕсли;
						Иначе
							ЗначениеСтавкаНДС = "none";
						КонецЕсли;
						ЗаписьXML.ЗаписатьАтрибут("Tax", XMLСтрока(ЗначениеСтавкаНДС));
						ЗаписьXML.ЗаписатьКонецЭлемента();
						СуммаЧека = СуммаЧека + ТекущаяПозиция.Сумма;
					ИначеЕсли ТекущаяПозиция.Свойство("ТекстоваяСтрока") Тогда
						Если ТекущаяПозиция.Свойство("ПереносСтроки") И ТекущаяПозиция.ПереносСтроки Тогда 
							ТекстовыеСтроки = МенеджерОборудованияКлиентСервер.ПостроитьПолеПереносом(ТекущаяПозиция.Текст, ШиринаСтроки);
						Иначе
							ТекстовыеСтроки = ТекущаяПозиция.Текст;
						КонецЕсли;
						Выравнивание = ?(ТекущаяПозиция.Свойство("Выравнивание"),  ТекущаяПозиция.Выравнивание, "Лево"); 
						Для НомерСтроки = 1 По СтрЧислоСтрок(ТекстовыеСтроки) Цикл
							ВыделеннаяСтрока = СтрПолучитьСтроку(ТекстовыеСтроки, НомерСтроки);
							ВыделеннаяСтрока = МенеджерОборудованияКлиентСервер.ВыравнитьПоле(ВыделеннаяСтрока, ШиринаСтроки, Выравнивание); 
							ЗаписьXML.ЗаписатьНачалоЭлемента("TextString");
							ЗаписьXML.ЗаписатьАтрибут("Text", XMLСтрока(ВыделеннаяСтрока));
							ЗаписьXML.ЗаписатьКонецЭлемента();  
						КонецЦикла;
					ИначеЕсли ТекущаяПозиция.Свойство("ШтрихКод") Тогда
						ЗаписьXML.ЗаписатьНачалоЭлемента("Barcode");
						ЗаписьXML.ЗаписатьАтрибут("BarcodeType", XMLСтрока(ТекущаяПозиция.ТипШтрихкода));
						ЗаписьXML.ЗаписатьАтрибут("Barcode", XMLСтрока(ТекущаяПозиция.ШтрихКод));
						ЗаписьXML.ЗаписатьКонецЭлемента();
				КонецЕсли;
			КонецЦикла;
			ЗаписьXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
		
		// Таблица оплат
		Если ТаблицаОплат <> Неопределено Тогда
			СуммаНаличными       = 0;
			СуммаЭлектронными    = 0;
			СуммаПостоплатой     = 0;
			СуммаПредоплатой     = 0;
			СуммаПредоставлением = 0;
			Для ИндексОплаты = 0 По ТаблицаОплат.Количество() - 1 Цикл
				Если ТаблицаОплат[ИндексОплаты].ТипОплаты = Перечисления.ТипыОплатыККТ.Электронно Тогда
					СуммаЭлектронными = СуммаЭлектронными + ТаблицаОплат[ИндексОплаты].Сумма;
				ИначеЕсли ТаблицаОплат[ИндексОплаты].ТипОплаты = Перечисления.ТипыОплатыККТ.Предоплата Тогда
					СуммаПредоплатой = СуммаПредоплатой + ТаблицаОплат[ИндексОплаты].Сумма;
				ИначеЕсли ТаблицаОплат[ИндексОплаты].ТипОплаты = Перечисления.ТипыОплатыККТ.Постоплата Тогда
					СуммаПостоплатой = СуммаПостоплатой + ТаблицаОплат[ИндексОплаты].Сумма;
				ИначеЕсли ТаблицаОплат[ИндексОплаты].ТипОплаты = Перечисления.ТипыОплатыККТ.ВстречноеПредоставление Тогда
					СуммаПредоставлением = СуммаПредоставлением + ТаблицаОплат[ИндексОплаты].Сумма;
				Иначе
					СуммаНаличными = СуммаНаличными + ТаблицаОплат[ИндексОплаты].Сумма;
				КонецЕсли;
			КонецЦикла;
			
			ЗаписьXML.ЗаписатьНачалоЭлемента("Payments");
			ЗаписьXML.ЗаписатьАтрибут("Cash", XMLСтрока(СуммаНаличными));
			ЗаписьXML.ЗаписатьАтрибут("CashLessType1", XMLСтрока(СуммаЭлектронными + СуммаПредоставлением));
			ЗаписьXML.ЗаписатьАтрибут("CashLessType2", XMLСтрока(СуммаПостоплатой));
			ЗаписьXML.ЗаписатьАтрибут("CashLessType3", XMLСтрока(СуммаПредоплатой));
			ЗаписьXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
		
	
	КонецЕсли;
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	Возврат ЗаписьXML.Закрыть();
	
КонецФункции   

Функция ПолучитьXMLПакетДляЧекаКоррекции_ТО(ОбщиеПараметры, ВыходныеПараметры, НовыйФормат = Ложь, ВидовОплаты = 0, ВерсияФФД = 0) Экспорт
	
	ВидовОплаты = 0;
	
	ЗаписьXML = Новый ЗаписьXML();
	ЗаписьXML.УстановитьСтроку("UTF-8");
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	ЗаписьXML.ЗаписатьНачалоЭлемента("CheckCorrectionPackage");
	ЗаписьXML.ЗаписатьНачалоЭлемента("Parameters");
	
	ТипРасчета = МенеджерОборудованияКлиентСервер.ПолучитьКодТипаРасчетаДенежнымиСредствами(ОбщиеПараметры.ТипРасчета);
	СистемаНалогообложения = МенеджерОборудованияКлиентСервер.ПолучитьКодТипаСистемыНалогообложенияККТ(ОбщиеПараметры.СистемаНалогообложения);
	ЗаписьXML.ЗаписатьАтрибут("PaymentType", XMLСтрока(ТипРасчета));
	ЗаписьXML.ЗаписатьАтрибут("TaxVariant" , XMLСтрока(СистемаНалогообложения));
	ЗаписьXML.ЗаписатьАтрибут("CashierName",  XMLСтрока(ОбщиеПараметры.Кассир));
	
	Если ВерсияФФД > 0 Тогда
		Если Не ПустаяСтрока(ОбщиеПараметры.КассирИНН) Тогда 
			ЗаписьXML.ЗаписатьАтрибут("CashierVATIN", XMLСтрока(ОбщиеПараметры.КассирИНН));
		КонецЕсли;
		Если ОбщиеПараметры.Свойство("ТипКоррекции") И ОбщиеПараметры.ТипКоррекции <> Неопределено Тогда
			ЗаписьXML.ЗаписатьАтрибут("CorrectionType",  XMLСтрока(ОбщиеПараметры.ТипКоррекции));
		КонецЕсли;
		Если ОбщиеПараметры.Свойство("НаименованиеОснования") И ОбщиеПараметры.НаименованиеОснования <> Неопределено Тогда
			ЗаписьXML.ЗаписатьАтрибут("СorrectionBaseName",  XMLСтрока(ОбщиеПараметры.НаименованиеОснования));
		КонецЕсли;
		Если ОбщиеПараметры.Свойство("ДатаДокументаОснования") И ОбщиеПараметры.ДатаДокументаОснования <> Неопределено Тогда
			ЗаписьXML.ЗаписатьАтрибут("СorrectionBaseDate",  XMLСтрока(ОбщиеПараметры.ДатаДокументаОснования));
		КонецЕсли;
		Если ОбщиеПараметры.Свойство("НомерДокументаОснования") И ОбщиеПараметры.НомерДокументаОснования <> Неопределено Тогда
			ЗаписьXML.ЗаписатьАтрибут("СorrectionBaseNumber",  XMLСтрока(ОбщиеПараметры.НомерДокументаОснования));
		КонецЕсли;
	КонецЕсли;
	
	ЗаписьXML.ЗаписатьАтрибут("Sum", XMLСтрока(ОбщиеПараметры.Сумма));
	
	Если НовыйФормат Тогда
		ЗаписьXML.ЗаписатьАтрибут("SumTAXNone", XMLСтрока(ОбщиеПараметры.СуммаБезНДС)); 
		ЗаписьXML.ЗаписатьАтрибут("SumTAX0"   , XMLСтрока(ОбщиеПараметры.СуммаНДС0));
		ЗаписьXML.ЗаписатьАтрибут("SumTAX10"  , XMLСтрока(ОбщиеПараметры.СуммаНДС10)); 
		ЗаписьXML.ЗаписатьАтрибут("SumTAX18"  , XMLСтрока(ОбщиеПараметры.СуммаНДС18)); 
		ЗаписьXML.ЗаписатьАтрибут("SumTAX110" , XMLСтрока(ОбщиеПараметры.СуммаНДС110)); 
		ЗаписьXML.ЗаписатьАтрибут("SumTAX118" , XMLСтрока(ОбщиеПараметры.СуммаНДС118));
	КонецЕсли;
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	Если НовыйФормат Тогда
		ЗаписьXML.ЗаписатьНачалоЭлемента("Payments");
		Если ВерсияФФД > 0 Тогда // Атрибуты с ФФД 1.0.5
			ЗаписьXML.ЗаписатьАтрибут("Cash"             , XMLСтрока(ОбщиеПараметры.НаличнаяОплата));
			ЗаписьXML.ЗаписатьАтрибут("ElectronicPayment", XMLСтрока(ОбщиеПараметры.ЭлектроннаяОплаты));
			ЗаписьXML.ЗаписатьАтрибут("Credit"           , XMLСтрока(ОбщиеПараметры.Постоплатой));
			ЗаписьXML.ЗаписатьАтрибут("AdvancePayment"   , XMLСтрока(ОбщиеПараметры.Предоплатой));
			ЗаписьXML.ЗаписатьАтрибут("CashProvision"    , XMLСтрока(ОбщиеПараметры.ВстречнымПредоставлением));
		Иначе
			ЗаписьXML.ЗаписатьАтрибут("Cash"             , XMLСтрока(ОбщиеПараметры.НаличнаяОплата));
			ЗаписьXML.ЗаписатьАтрибут("ElectronicPayment", XMLСтрока(ОбщиеПараметры.ЭлектроннаяОплаты + ОбщиеПараметры.Постоплатой 
				+ ОбщиеПараметры.Предоплатой + ОбщиеПараметры.ВстречнымПредоставлением));
		КонецЕсли;
		ЗаписьXML.ЗаписатьКонецЭлемента();
	Иначе
		ЗаписьXML.ЗаписатьНачалоЭлемента("Payments");
		ЗаписьXML.ЗаписатьАтрибут("Cash"         , XMLСтрока(ОбщиеПараметры.НаличнаяОплата));
		ЗаписьXML.ЗаписатьАтрибут("CashLessType1", XMLСтрока(ОбщиеПараметры.ЭлектроннаяОплаты));
		ЗаписьXML.ЗаписатьАтрибут("CashLessType2", XMLСтрока(ОбщиеПараметры.Предоплатой));
		ЗаписьXML.ЗаписатьАтрибут("CashLessType3", XMLСтрока(ОбщиеПараметры.Постоплатой));
		ЗаписьXML.ЗаписатьКонецЭлемента();
	КонецЕсли;
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ВидовОплаты = ВидовОплаты + ?(ОбщиеПараметры.НаличнаяОплата > 0, 1, 0) 
		+ ?(ОбщиеПараметры.ЭлектроннаяОплаты > 0, 1, 0) 
		+ ?(ОбщиеПараметры.Предоплатой > 0, 1, 0) 
		+ ?(ОбщиеПараметры.Постоплатой > 0, 1, 0) 
		+ ?(ОбщиеПараметры.ВстречнымПредоставлением > 0, 1, 0);
	
	Возврат ЗаписьXML.Закрыть();
	
КонецФункции   

Функция ПолучитьXMLПакетДляЧекаКоррекции(ОбщиеПараметры, ВыходныеПараметры, НовыйФормат = Ложь, ВидовОплаты = 0) Экспорт
	
	ВидовОплаты = 0;
	
	ЗаписьXML = Новый ЗаписьXML();
	ЗаписьXML.УстановитьСтроку("UTF-8");
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	ЗаписьXML.ЗаписатьНачалоЭлемента("CheckCorrectionPackage");
	ЗаписьXML.ЗаписатьНачалоЭлемента("Parameters");
	
	ТипРасчета = МенеджерОборудованияКлиентСервер.ПолучитьКодТипаРасчетаДенежнымиСредствами(ОбщиеПараметры.ТипРасчета);
	СистемаНалогообложения = МенеджерОборудованияКлиентСервер.ПолучитьКодТипаСистемыНалогообложенияККТ(ОбщиеПараметры.СистемаНалогообложения);
	ЗаписьXML.ЗаписатьАтрибут("PaymentType", XMLСтрока(ТипРасчета));
	ЗаписьXML.ЗаписатьАтрибут("TaxVariant" , XMLСтрока(СистемаНалогообложения));
	ЗаписьXML.ЗаписатьАтрибут("CashierName",  XMLСтрока(ОбщиеПараметры.Кассир));
	
	Если НовыйФормат Тогда
		Если Не ПустаяСтрока(ОбщиеПараметры.КассирИНН) Тогда 
			ЗаписьXML.ЗаписатьАтрибут("CashierVATIN", XMLСтрока(ОбщиеПараметры.КассирИНН));
		КонецЕсли;
		Если ОбщиеПараметры.Свойство("ТипКоррекции") И ОбщиеПараметры.ТипКоррекции <> Неопределено Тогда
			ЗаписьXML.ЗаписатьАтрибут("CorrectionType",  XMLСтрока(ОбщиеПараметры.ТипКоррекции));
		КонецЕсли;
		Если ОбщиеПараметры.Свойство("НаименованиеОснования") И НЕ ПустаяСтрока(ОбщиеПараметры.НаименованиеОснования) Тогда
			ЗаписьXML.ЗаписатьАтрибут("CorrectionBaseName",  XMLСтрока(ОбщиеПараметры.НаименованиеОснования));
		КонецЕсли;
		Если ОбщиеПараметры.Свойство("ДатаДокументаОснования") И НЕ ПустаяСтрока(ОбщиеПараметры.ДатаДокументаОснования) Тогда
			ЗаписьXML.ЗаписатьАтрибут("CorrectionBaseDate",  XMLСтрока(ОбщиеПараметры.ДатаДокументаОснования));
		КонецЕсли;
		Если ОбщиеПараметры.Свойство("НомерДокументаОснования") И НЕ ПустаяСтрока(ОбщиеПараметры.НомерДокументаОснования) Тогда
			ЗаписьXML.ЗаписатьАтрибут("CorrectionBaseNumber",  XMLСтрока(ОбщиеПараметры.НомерДокументаОснования));
		КонецЕсли;
	КонецЕсли;
	
	ЗаписьXML.ЗаписатьАтрибут("Sum", XMLСтрока(ОбщиеПараметры.Сумма));
	
	Если НовыйФормат Тогда
		ЗаписьXML.ЗаписатьАтрибут("SumTAXNone", XMLСтрока(ОбщиеПараметры.СуммаБезНДС)); 
		ЗаписьXML.ЗаписатьАтрибут("SumTAX0"   , XMLСтрока(ОбщиеПараметры.СуммаНДС0));
		ЗаписьXML.ЗаписатьАтрибут("SumTAX10"  , XMLСтрока(ОбщиеПараметры.СуммаНДС10)); 
		ЗаписьXML.ЗаписатьАтрибут("SumTAX18"  , XMLСтрока(ОбщиеПараметры.СуммаНДС18)); 
		ЗаписьXML.ЗаписатьАтрибут("SumTAX110" , XMLСтрока(ОбщиеПараметры.СуммаНДС110)); 
		ЗаписьXML.ЗаписатьАтрибут("SumTAX118" , XMLСтрока(ОбщиеПараметры.СуммаНДС118));
	КонецЕсли;
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	Если НовыйФормат Тогда
		ЗаписьXML.ЗаписатьНачалоЭлемента("Payments");
		ЗаписьXML.ЗаписатьАтрибут("Cash"             , XMLСтрока(ОбщиеПараметры.НаличнаяОплата));
		ЗаписьXML.ЗаписатьАтрибут("ElectronicPayment", XMLСтрока(ОбщиеПараметры.ЭлектроннаяОплаты));
		ЗаписьXML.ЗаписатьАтрибут("Credit"           , XMLСтрока(ОбщиеПараметры.Постоплатой));
		ЗаписьXML.ЗаписатьАтрибут("AdvancePayment"   , XMLСтрока(ОбщиеПараметры.Предоплатой));
		ЗаписьXML.ЗаписатьАтрибут("CashProvision"    , XMLСтрока(ОбщиеПараметры.ВстречнымПредоставлением));
		ЗаписьXML.ЗаписатьКонецЭлемента();
	Иначе
		ЗаписьXML.ЗаписатьНачалоЭлемента("Payments");
		ЗаписьXML.ЗаписатьАтрибут("Cash"         , XMLСтрока(ОбщиеПараметры.НаличнаяОплата));
		ЗаписьXML.ЗаписатьАтрибут("CashLessType1", XMLСтрока(ОбщиеПараметры.ЭлектроннаяОплаты));
		ЗаписьXML.ЗаписатьАтрибут("CashLessType2", XMLСтрока(ОбщиеПараметры.Предоплатой));
		ЗаписьXML.ЗаписатьАтрибут("CashLessType3", XMLСтрока(ОбщиеПараметры.Постоплатой));
		ЗаписьXML.ЗаписатьКонецЭлемента();
	КонецЕсли;
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ВидовОплаты = ВидовОплаты + ?(ОбщиеПараметры.НаличнаяОплата > 0, 1, 0) 
		+ ?(ОбщиеПараметры.ЭлектроннаяОплаты > 0, 1, 0) 
		+ ?(ОбщиеПараметры.Предоплатой > 0, 1, 0) 
		+ ?(ОбщиеПараметры.Постоплатой > 0, 1, 0) 
		+ ?(ОбщиеПараметры.ВстречнымПредоставлением > 0, 1, 0);
	
	Возврат ЗаписьXML.Закрыть();
	
КонецФункции   

// Процедура формирует XML пакет для Фискализация чека.
// Параметры: 
//   РасширеннаяВыгрузка  - булево, признак расширенной выгрузки.
// Возвращаемое значение: 
//   Строка - если есть дублирование, возвращает Истина, иначе Ложь.
//
Процедура СформироватьXMLПакетДляФискализацияЧека(ОбщиеПараметры, ПараметрыФискализации) Экспорт
	
	ПозицииЧека  = ОбщиеПараметры.ПозицииЧека;
	ТаблицаОплат = ОбщиеПараметры.ТаблицаОплат;
	Электронно   = ОбщиеПараметры.Электронно;
	СуммаЧека = 0;
	СуммаНаличные       = 0;
	СуммаЭлектронно     = 0;
	СуммаПредоплата     = 0;
	СуммаПостоплата     = 0;
	СуммаПредоставление = 0;
	
	ТипРасчета = МенеджерОборудованияКлиентСервер.КодРасчетаДенежнымиСредствами(ОбщиеПараметры.ТипРасчета);
	СистемаНалогообложения = МенеджерОборудованияКлиентСервер.КодСистемыНалогообложенияККТ(ОбщиеПараметры.СистемаНалогообложения);
	
	// Таблица оплат
	Если ТаблицаОплат <> Неопределено Тогда
		Для ИндексОплаты = 0 По ТаблицаОплат.Количество() - 1 Цикл
			Если ТаблицаОплат[ИндексОплаты].ТипОплаты = Перечисления.ТипыОплатыККТ.Электронно Тогда
				СуммаЭлектронно = СуммаЭлектронно + ТаблицаОплат[ИндексОплаты].Сумма;
			ИначеЕсли ТаблицаОплат[ИндексОплаты].ТипОплаты = Перечисления.ТипыОплатыККТ.Предоплата Тогда
				СуммаПредоплата = СуммаПредоплата + ТаблицаОплат[ИндексОплаты].Сумма;
			ИначеЕсли ТаблицаОплат[ИндексОплаты].ТипОплаты = Перечисления.ТипыОплатыККТ.Постоплата Тогда
				СуммаПостоплата = СуммаПостоплата + ТаблицаОплат[ИндексОплаты].Сумма;
			ИначеЕсли ТаблицаОплат[ИндексОплаты].ТипОплаты = Перечисления.ТипыОплатыККТ.ВстречноеПредоставление Тогда
				СуммаПредоставление = СуммаПредоставление + ТаблицаОплат[ИндексОплаты].Сумма;
			Иначе
				СуммаНаличные = СуммаНаличные + ТаблицаОплат[ИндексОплаты].Сумма;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Пакетная печать чека. Подготовка пакета.
	ЗаписьXML = Новый ЗаписьXML();
	ЗаписьXML.УстановитьСтроку("UTF-8");
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("CheckPackage");
	
	Если ПараметрыФискализации.РевизияИнтерфейса >= 3000 Тогда  // Версия стандарта 3.0 (ОФД 1.1)
		ЗаписьXML.ЗаписатьНачалоЭлемента("Parameters");
		ЗаписьXML.ЗаписатьАтрибут("CashierName",  XMLСтрока(ОбщиеПараметры.Кассир));
		Если Не ПустаяСтрока(ОбщиеПараметры.КассирИНН) Тогда 
			ЗаписьXML.ЗаписатьАтрибут("CashierINN", XMLСтрока(ОбщиеПараметры.КассирИНН));
		КонецЕсли;
		ЗаписьXML.ЗаписатьАтрибут("OperationType", XMLСтрока(ТипРасчета));
		ЗаписьXML.ЗаписатьАтрибут("TaxationSystem" , XMLСтрока(СистемаНалогообложения));
		
		Если Не ПустаяСтрока(ОбщиеПараметры.ОтправительEmail) И Электронно Тогда // Отправитель Email указывается только для Электронно.
			ЗаписьXML.ЗаписатьАтрибут("SenderEmail", XMLСтрока(ОбщиеПараметры.ОтправительEmail));
		КонецЕсли;
		
		Если ОбщиеПараметры.Свойство("АдресРасчетов") И НЕ ПустаяСтрока(ОбщиеПараметры.АдресРасчетов) Тогда   
			ЗаписьXML.ЗаписатьАтрибут("SaleAddres", XMLСтрока(ОбщиеПараметры.АдресРасчетов));
		КонецЕсли;
		Если ОбщиеПараметры.Свойство("МестоРасчетов") И НЕ ПустаяСтрока(ОбщиеПараметры.МестоРасчетов) Тогда  
			ЗаписьXML.ЗаписатьАтрибут("SaleLocation", XMLСтрока(ОбщиеПараметры.МестоРасчетов));
		КонецЕсли;
		
		// Email отправляет средствами 1C
		Если ОбщиеПараметры.Свойство("Отправляет1СEmail") И НЕ ОбщиеПараметры.Отправляет1СEmail Тогда
			ЗаписьXML.ЗаписатьАтрибут("CustomerEmail", XMLСтрока(?(ОбщиеПараметры.Свойство("ПокупательEmail"), ОбщиеПараметры.ПокупательEmail, "")));
		КонецЕсли;
		// SMS отправляет средствами 1C
		Если ОбщиеПараметры.Свойство("Отправляет1СSMS") И НЕ ОбщиеПараметры.Отправляет1СSMS Тогда
			ЗаписьXML.ЗаписатьАтрибут("CustomerPhone", XMLСтрока(?(ОбщиеПараметры.Свойство("ПокупательНомер"), ОбщиеПараметры.ПокупательНомер, "")));
		КонецЕсли;
		
		Если Не ПустаяСтрока(ОбщиеПараметры.Получатель) Тогда
			ЗаписьXML.ЗаписатьАтрибут("CustomerInfo", XMLСтрока(ОбщиеПараметры.Получатель));
		КонецЕсли;
		Если Не ПустаяСтрока(ОбщиеПараметры.ПолучательИНН) Тогда
			ЗаписьXML.ЗаписатьАтрибут("CustomerINN", XMLСтрока(ОбщиеПараметры.ПолучательИНН));
		КонецЕсли;
		
		Если ОбщиеПараметры.Свойство("ПризнакАгента") И НЕ ПустаяСтрока(ОбщиеПараметры.ПризнакАгента) Тогда
			ПризнакАгента = МенеджерОборудованияКлиентСервер.КодПризнакаАгента(ОбщиеПараметры.ПризнакАгента);
			ЗаписьXML.ЗаписатьАтрибут("AgentType", XMLСтрока(ПризнакАгента));
		КонецЕсли;
		
		Если ОбщиеПараметры.Свойство("ДополнительныйРеквизит") И НЕ ПустаяСтрока(ОбщиеПараметры.ДополнительныйРеквизит) Тогда  
			ЗаписьXML.ЗаписатьАтрибут("AdditionalAttribute", XMLСтрока(ОбщиеПараметры.ДополнительныйРеквизит));
		КонецЕсли;
		
		Если ОбщиеПараметры.Свойство("ДанныеКоррекции") Тогда
			ЗаписатьДанныеКоррекции(ЗаписьXML, ОбщиеПараметры.ДанныеКоррекции);
		КонецЕсли;
		
		ЗаписатьДанныеАгента(ЗаписьXML, ОбщиеПараметры.ДанныеАгента, ПараметрыФискализации.РевизияИнтерфейса);
		ЗаписатьДанныеПоставщика(ЗаписьXML, ОбщиеПараметры.ДанныеПоставщика, ПараметрыФискализации.РевизияИнтерфейса);
		
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
		// Табличная часть
		Если ОбщиеПараметры.ПозицииЧека <> Неопределено Тогда
			ЗаписьXML.ЗаписатьНачалоЭлемента("Positions");
			Для ИндексМассива = 0 По ОбщиеПараметры.ПозицииЧека.Количество() - 1 Цикл
				ТекущаяПозиция = ОбщиеПараметры.ПозицииЧека[ИндексМассива];
				
				Если ТекущаяПозиция.Свойство("ФискальнаяСтрока") Тогда // Фискальная строка
					
					Если ТекущаяПозиция.ЦенаСоСкидками = 0 И ТекущаяПозиция.Сумма > 0 И ТекущаяПозиция.Количество > 0 Тогда
						ЦенаСоСкидками = Окр(ТекущаяПозиция.Сумма / ТекущаяПозиция.Количество, 2); 
					Иначе
						ЦенаСоСкидками = ТекущаяПозиция.ЦенаСоСкидками; 
					КонецЕсли;
					ЗаписьXML.ЗаписатьНачалоЭлемента("FiscalString");
					ЗаписьXML.ЗаписатьАтрибут("Name"              , XMLСтрока(ТекущаяПозиция.Наименование)); // Наименование товара.
					ЗаписьXML.ЗаписатьАтрибут("Quantity"          , XMLСтрока(ТекущаяПозиция.Количество)); // Количество товара.
					ЗаписьXML.ЗаписатьАтрибут("PriceWithDiscount" , XMLСтрока(ЦенаСоСкидками)); // Цена единицы товара с учетом скидок/наценок.
					ЗаписьXML.ЗаписатьАтрибут("AmountWithDiscount", XMLСтрока(ТекущаяПозиция.Сумма)); // Конечная сумма по позиции чека с учетом всех скидок/наценок.
					ЗаписьXML.ЗаписатьАтрибут("DiscountAmount"    , XMLСтрока(ТекущаяПозиция.СуммаСкидок)); // Сумма скидок и наценок.
					ЗаписьXML.ЗаписатьАтрибут("Department"        , XMLСтрока(ТекущаяПозиция.НомерСекции)); // Отдел, по которому ведется продажа
					
					Если НЕ ПустаяСтрока(ТекущаяПозиция.СтавкаНДС) Тогда 
						Если ТекущаяПозиция.СтавкаНДС = 118 Тогда
							ЗначениеСтавкаНДС = "18/118";
						ИначеЕсли ТекущаяПозиция.СтавкаНДС = 110 Тогда
							ЗначениеСтавкаНДС = "10/110";
						ИначеЕсли ТекущаяПозиция.СтавкаНДС = 120 Тогда
							ЗначениеСтавкаНДС = "20/120";
						Иначе
							ЗначениеСтавкаНДС = ТекущаяПозиция.СтавкаНДС;
						КонецЕсли;
					Иначе
						ЗначениеСтавкаНДС = "none";
					КонецЕсли;
					
					ЗаписьXML.ЗаписатьАтрибут("VATRate", XMLСтрока(ЗначениеСтавкаНДС)); // Ставка НДС
					Если ТекущаяПозиция.Свойство("СуммаНДС") И НЕ ПустаяСтрока(ТекущаяПозиция.СуммаНДС) Тогда
						ЗаписьXML.ЗаписатьАтрибут("VATAmount", XMLСтрока(ТекущаяПозиция.СуммаНДС));
					КонецЕсли;
					
					Если ТекущаяПозиция.Свойство("ПризнакСпособаРасчета") И НЕ ПустаяСтрока(ТекущаяПозиция.ПризнакСпособаРасчета) Тогда
						ПризнакСпособаРасчета = МенеджерОборудованияКлиентСервер.КодПризнакаСпособаРасчета(ТекущаяПозиция.ПризнакСпособаРасчета);
						ЗаписьXML.ЗаписатьАтрибут("PaymentMethod", XMLСтрока(ПризнакСпособаРасчета));
					КонецЕсли;
					Если ТекущаяПозиция.Свойство("ПризнакПредметаРасчета") И НЕ ПустаяСтрока(ТекущаяПозиция.ПризнакПредметаРасчета) Тогда
						ПризнакПредметаРасчета = МенеджерОборудованияКлиентСервер.КодПризнакаПредметаРасчета(ТекущаяПозиция.ПризнакПредметаРасчета);
						ЗаписьXML.ЗаписатьАтрибут("CalculationSubject", XMLСтрока(ПризнакПредметаРасчета));
					КонецЕсли;
					Если ТекущаяПозиция.Свойство("ПризнакАгентаПоПредметуРасчета") И НЕ ПустаяСтрока(ТекущаяПозиция.ПризнакАгентаПоПредметуРасчета) Тогда
						ПризнакАгентаПоПредметуРасчета = МенеджерОборудованияКлиентСервер.КодПризнакаАгента(ТекущаяПозиция.ПризнакАгентаПоПредметуРасчета);
						ЗаписьXML.ЗаписатьАтрибут("CalculationAgent", XMLСтрока(ПризнакАгентаПоПредметуРасчета));
					КонецЕсли;
					
					Если ТекущаяПозиция.Свойство("ЕдиницаИзмеренияПредметаРасчета") И ТекущаяПозиция.ЕдиницаИзмеренияПредметаРасчета <> Неопределено Тогда
						ЗаписьXML.ЗаписатьАтрибут("MeasurementUnit"   , XMLСтрока(ТекущаяПозиция.ЕдиницаИзмеренияПредметаРасчета));
					КонецЕсли;
					
					Если ТекущаяПозиция.Свойство("КодСтраныПроисхожденияТовара") И ТекущаяПозиция.КодСтраныПроисхожденияТовара <> Неопределено Тогда
						ЗаписьXML.ЗаписатьАтрибут("CountryOfOrigin", XMLСтрока(ТекущаяПозиция.КодСтраныПроисхожденияТовара));
					КонецЕсли;
					Если ТекущаяПозиция.Свойство("НомерТаможеннойДекларации") И ТекущаяПозиция.НомерТаможеннойДекларации <> Неопределено Тогда
						ЗаписьXML.ЗаписатьАтрибут("CustomsDeclaration", XMLСтрока(ТекущаяПозиция.НомерТаможеннойДекларации));
					КонецЕсли;
					Если ТекущаяПозиция.Свойство("СуммаАкциза") И ТекущаяПозиция.СуммаАкциза <> Неопределено Тогда
						ЗаписьXML.ЗаписатьАтрибут("ExciseAmount", XMLСтрока(XMLСтрока(ТекущаяПозиция.СуммаАкциза)));
					КонецЕсли;
					
					ЗаписатьДанныеКодаТоварнойНоменклатуры(ЗаписьXML, ТекущаяПозиция.ДанныеКодаТоварнойНоменклатуры);
					ЗаписатьДанныеАгента(ЗаписьXML, ТекущаяПозиция.ДанныеАгента, ПараметрыФискализации.РевизияИнтерфейса);
					ЗаписатьДанныеПоставщика(ЗаписьXML, ТекущаяПозиция.ДанныеПоставщика, ПараметрыФискализации.РевизияИнтерфейса);
					
					ЗаписьXML.ЗаписатьКонецЭлемента();
					СуммаЧека = СуммаЧека + ТекущаяПозиция.Сумма;
			
				ИначеЕсли ТекущаяПозиция.Свойство("ТекстоваяСтрока") Тогда // Текстовая строка
					Если ТекущаяПозиция.Свойство("ПереносСтроки") И ТекущаяПозиция.ПереносСтроки Тогда 
						ТекстовыеСтроки = МенеджерОборудованияКлиентСервер.ПостроитьПолеПереносом(ТекущаяПозиция.Текст, ПараметрыФискализации.ШиринаСтроки);
					Иначе
						ТекстовыеСтроки = ТекущаяПозиция.Текст;
					КонецЕсли;
					Выравнивание = ?(ТекущаяПозиция.Свойство("Выравнивание"),  ТекущаяПозиция.Выравнивание, "Лево"); 
					Для НомерСтроки = 1 По СтрЧислоСтрок(ТекстовыеСтроки) Цикл
						ВыделеннаяСтрока = СтрПолучитьСтроку(ТекстовыеСтроки, НомерСтроки);
						ВыделеннаяСтрока = МенеджерОборудованияКлиентСервер.ВыравнитьПоле(ВыделеннаяСтрока, ПараметрыФискализации.ШиринаСтроки, Выравнивание); 
						ЗаписьXML.ЗаписатьНачалоЭлемента("TextString");
						ЗаписьXML.ЗаписатьАтрибут("Text", XMLСтрока(ВыделеннаяСтрока));
						ЗаписьXML.ЗаписатьКонецЭлемента();  
					КонецЦикла;
				ИначеЕсли ТекущаяПозиция.Свойство("ШтрихКод") Тогда // Штрихкод
					ЗаписьXML.ЗаписатьНачалоЭлемента("Barcode");
					ЗаписьXML.ЗаписатьАтрибут("Type" , XMLСтрока(ТекущаяПозиция.ТипШтрихкода));
					ЗаписьXML.ЗаписатьАтрибут("Value", XMLСтрока(ТекущаяПозиция.ШтрихКод));
					ЗаписьXML.ЗаписатьКонецЭлемента();
				КонецЕсли;
			КонецЦикла;
			ЗаписьXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
		
		// Таблица оплат
		Если ТаблицаОплат <> Неопределено Тогда
			ЗаписьXML.ЗаписатьНачалоЭлемента("Payments");
			Если СуммаНаличные > 0 Тогда 
				ЗаписьXML.ЗаписатьАтрибут("Cash", XMLСтрока(СуммаНаличные));
			КонецЕсли;
			Если СуммаЭлектронно > 0 Тогда 
				ЗаписьXML.ЗаписатьАтрибут("ElectronicPayment", XMLСтрока(СуммаЭлектронно));
			КонецЕсли;
			Если СуммаПредоплата > 0 Тогда 
				ЗаписьXML.ЗаписатьАтрибут("PrePayment", XMLСтрока(СуммаПредоплата));
			КонецЕсли;
			Если СуммаПостоплата > 0 Тогда 
				ЗаписьXML.ЗаписатьАтрибут("PostPayment", XMLСтрока(СуммаПостоплата));
			КонецЕсли;
			Если СуммаПредоставление > 0 Тогда 
				ЗаписьXML.ЗаписатьАтрибут("Barter", XMLСтрока(СуммаПредоставление));
			КонецЕсли;
			ЗаписьXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
		
	ИначеЕсли ПараметрыФискализации.РевизияИнтерфейса > 2001 Тогда  // Версия стандарта 2.2 и выше
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("Parameters");
		ЗаписьXML.ЗаписатьАтрибут("PaymentType" , XMLСтрока(ТипРасчета));
		ЗаписьXML.ЗаписатьАтрибут("TaxVariant"  , XMLСтрока(СистемаНалогообложения));
		ЗаписьXML.ЗаписатьАтрибут("CashierName" , XMLСтрока(ОбщиеПараметры.Кассир));
		ЗаписьXML.ЗаписатьАтрибут("CashierVATIN", ?(ОбщиеПараметры.Свойство("КассирИНН"), XMLСтрока(ОбщиеПараметры.КассирИНН), ""));
		Если Не ПустаяСтрока(ОбщиеПараметры.ОтправительEmail) И Электронно Тогда // Отправитель Email указывается только для Электронно.
			ЗаписьXML.ЗаписатьАтрибут("SenderEmail", XMLСтрока(ОбщиеПараметры.ОтправительEmail));
		КонецЕсли;
		// Email отправляет средствами 1C
		Если ОбщиеПараметры.Свойство("Отправляет1СEmail") И НЕ ОбщиеПараметры.Отправляет1СEmail Тогда
			ЗаписьXML.ЗаписатьАтрибут("CustomerEmail", XMLСтрока(?(ОбщиеПараметры.Свойство("ПокупательEmail"), ОбщиеПараметры.ПокупательEmail, "")));
		КонецЕсли;
		// SMS отправляет средствами 1C
		Если ОбщиеПараметры.Свойство("Отправляет1СSMS") И НЕ ОбщиеПараметры.Отправляет1СSMS Тогда
			ЗаписьXML.ЗаписатьАтрибут("CustomerPhone", XMLСтрока(?(ОбщиеПараметры.Свойство("ПокупательНомер"), ОбщиеПараметры.ПокупательНомер, "")));
		КонецЕсли;
			
		Если ОбщиеПараметры.Свойство("ПризнакАгента") И НЕ ПустаяСтрока(ОбщиеПараметры.ПризнакАгента) Тогда  // Атрибут с ФФД 1.0.5 
			ПризнакАгента = МенеджерОборудованияКлиентСервер.КодПризнакаАгента(ОбщиеПараметры.ПризнакАгента);
			ЗаписьXML.ЗаписатьАтрибут("AgentSign", XMLСтрока(ПризнакАгента));
		КонецЕсли;
		
		Если ОбщиеПараметры.Свойство("АдресРасчетов") И НЕ ПустаяСтрока(ОбщиеПараметры.АдресРасчетов) Тогда   
			ЗаписьXML.ЗаписатьАтрибут("AddressSettle", XMLСтрока(ОбщиеПараметры.АдресРасчетов));
		КонецЕсли;
		Если ОбщиеПараметры.Свойство("МестоРасчетов") И НЕ ПустаяСтрока(ОбщиеПараметры.МестоРасчетов) Тогда  
			ЗаписьXML.ЗаписатьАтрибут("PlaceSettle", XMLСтрока(ОбщиеПараметры.МестоРасчетов));
		КонецЕсли;
		
		Если ОбщиеПараметры.Свойство("ДополнительныйРеквизит") И НЕ ПустаяСтрока(ОбщиеПараметры.ДополнительныйРеквизит) Тогда  
			ЗаписьXML.ЗаписатьАтрибут("AdditionalAttribute", XMLСтрока(ОбщиеПараметры.ДополнительныйРеквизит));
		КонецЕсли;
		
		ЗаписатьДанныеАгента(ЗаписьXML, ОбщиеПараметры.ДанныеАгента);
		ЗаписатьДанныеПоставщика(ЗаписьXML, ОбщиеПараметры.ДанныеПоставщика);
		
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
		// Табличная часть
		Если ОбщиеПараметры.ПозицииЧека <> Неопределено Тогда
			ЗаписьXML.ЗаписатьНачалоЭлемента("Positions");
			Для ИндексМассива = 0 По ОбщиеПараметры.ПозицииЧека.Количество() - 1 Цикл
				ТекущаяПозиция = ОбщиеПараметры.ПозицииЧека[ИндексМассива];
				
				Если ТекущаяПозиция.Свойство("ФискальнаяСтрока") Тогда
						Если ТекущаяПозиция.ЦенаСоСкидками = 0 И ТекущаяПозиция.Сумма > 0 И ТекущаяПозиция.Количество > 0 Тогда
							ЦенаСоСкидками = Окр(ТекущаяПозиция.Сумма / ТекущаяПозиция.Количество, 2); 
						Иначе
							ЦенаСоСкидками = ТекущаяПозиция.ЦенаСоСкидками; 
						КонецЕсли;
						ЗаписьXML.ЗаписатьНачалоЭлемента("FiscalString");
						ЗаписьXML.ЗаписатьАтрибут("Name"             , XMLСтрока(ТекущаяПозиция.Наименование));
						ЗаписьXML.ЗаписатьАтрибут("Quantity"         , XMLСтрока(ТекущаяПозиция.Количество));
						ЗаписьXML.ЗаписатьАтрибут("PriceWithDiscount", XMLСтрока(ЦенаСоСкидками));
						ЗаписьXML.ЗаписатьАтрибут("SumWithDiscount"  , XMLСтрока(ТекущаяПозиция.Сумма));
						ЗаписьXML.ЗаписатьАтрибут("DiscountSum"      , XMLСтрока(ТекущаяПозиция.СуммаСкидок));
						ЗаписьXML.ЗаписатьАтрибут("Department"       , XMLСтрока(ТекущаяПозиция.НомерСекции));
						
						Если НЕ ПустаяСтрока(ТекущаяПозиция.СтавкаНДС) Тогда 
							Если ТекущаяПозиция.СтавкаНДС = 118 Тогда
								ЗначениеСтавкаНДС = "18/118";
							ИначеЕсли ТекущаяПозиция.СтавкаНДС = 110 Тогда
								ЗначениеСтавкаНДС = "10/110";
							ИначеЕсли ТекущаяПозиция.СтавкаНДС = 120 Тогда
								ЗначениеСтавкаНДС = "20/120";
							Иначе
								ЗначениеСтавкаНДС = ТекущаяПозиция.СтавкаНДС;
							КонецЕсли;
						Иначе
							ЗначениеСтавкаНДС = "none";
						КонецЕсли;
						ЗаписьXML.ЗаписатьАтрибут("Tax", XMLСтрока(ЗначениеСтавкаНДС));
						
						Если ТекущаяПозиция.Свойство("ПризнакСпособаРасчета") И НЕ ПустаяСтрока(ТекущаяПозиция.ПризнакСпособаРасчета) Тогда
							ПризнакСпособаРасчета = МенеджерОборудованияКлиентСервер.КодПризнакаСпособаРасчета(ТекущаяПозиция.ПризнакСпособаРасчета);
							ЗаписьXML.ЗаписатьАтрибут("SignMethodCalculation", XMLСтрока(ПризнакСпособаРасчета));
						КонецЕсли;
						Если ТекущаяПозиция.Свойство("ПризнакПредметаРасчета") И НЕ ПустаяСтрока(ТекущаяПозиция.ПризнакПредметаРасчета) Тогда
							ПризнакПредметаРасчета = МенеджерОборудованияКлиентСервер.КодПризнакаПредметаРасчета(ТекущаяПозиция.ПризнакПредметаРасчета);
							ЗаписьXML.ЗаписатьАтрибут("SignCalculationObject", XMLСтрока(ПризнакПредметаРасчета));
						КонецЕсли;
						
						Если ТекущаяПозиция.Свойство("СуммаНДС") И НЕ ПустаяСтрока(ТекущаяПозиция.СуммаНДС) Тогда
						ЗаписьXML.ЗаписатьАтрибут("TaxSum", XMLСтрока(ТекущаяПозиция.СуммаНДС));
						КонецЕсли;
						
						Если ТекущаяПозиция.Свойство("ПризнакАгентаПоПредметуРасчета") И НЕ ПустаяСтрока(ТекущаяПозиция.ПризнакАгентаПоПредметуРасчета) Тогда
							ПризнакАгентаПоПредметуРасчета = МенеджерОборудованияКлиентСервер.КодПризнакаАгента(ТекущаяПозиция.ПризнакАгентаПоПредметуРасчета);
							ЗаписьXML.ЗаписатьАтрибут("SignSubjectCalculationAgent", XMLСтрока(ПризнакАгентаПоПредметуРасчета));
						КонецЕсли;
						
						Если ТекущаяПозиция.Свойство("ЕдиницаИзмеренияПредметаРасчета") И ТекущаяПозиция.ЕдиницаИзмеренияПредметаРасчета <> Неопределено Тогда
							ЗаписьXML.ЗаписатьАтрибут("MeasurementUnit"   , XMLСтрока(ТекущаяПозиция.ЕдиницаИзмеренияПредметаРасчета));
						КонецЕсли;
						
						ЗаписатьДанныеАгента(ЗаписьXML, ТекущаяПозиция.ДанныеАгента);
						ЗаписатьДанныеПоставщика(ЗаписьXML, ТекущаяПозиция.ДанныеПоставщика);
						ЗаписатьДанныеКодаТоварнойНоменклатуры(ЗаписьXML, ТекущаяПозиция.ДанныеКодаТоварнойНоменклатуры);
						
						ЗаписьXML.ЗаписатьКонецЭлемента();
						СуммаЧека = СуммаЧека + ТекущаяПозиция.Сумма;
						
					ИначеЕсли ТекущаяПозиция.Свойство("ТекстоваяСтрока") Тогда
						
						Если ТекущаяПозиция.Свойство("ПереносСтроки") И ТекущаяПозиция.ПереносСтроки Тогда 
							ТекстовыеСтроки = МенеджерОборудованияКлиентСервер.ПостроитьПолеПереносом(ТекущаяПозиция.Текст, ПараметрыФискализации.ШиринаСтроки);
						Иначе
							ТекстовыеСтроки = ТекущаяПозиция.Текст;
						КонецЕсли;
						Выравнивание = ?(ТекущаяПозиция.Свойство("Выравнивание"),  ТекущаяПозиция.Выравнивание, "Лево"); 
						Для НомерСтроки = 1 По СтрЧислоСтрок(ТекстовыеСтроки) Цикл
							ВыделеннаяСтрока = СтрПолучитьСтроку(ТекстовыеСтроки, НомерСтроки);
							ВыделеннаяСтрока = МенеджерОборудованияКлиентСервер.ВыравнитьПоле(ВыделеннаяСтрока, ПараметрыФискализации.ШиринаСтроки, Выравнивание); 
							ЗаписьXML.ЗаписатьНачалоЭлемента("TextString");
							ЗаписьXML.ЗаписатьАтрибут("Text", XMLСтрока(ВыделеннаяСтрока));
							ЗаписьXML.ЗаписатьКонецЭлемента();  
						КонецЦикла;
						
					ИначеЕсли ТекущаяПозиция.Свойство("ШтрихКод") Тогда
						ЗаписьXML.ЗаписатьНачалоЭлемента("Barcode");
						ЗаписьXML.ЗаписатьАтрибут("BarcodeType", XMLСтрока(ТекущаяПозиция.ТипШтрихкода));
						ЗаписьXML.ЗаписатьАтрибут("Barcode", XMLСтрока(ТекущаяПозиция.ШтрихКод));
						ЗаписьXML.ЗаписатьКонецЭлемента();
					КонецЕсли;
			КонецЦикла;
			ЗаписьXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
		
		// Таблица оплат
		Если ТаблицаОплат <> Неопределено Тогда
			ЗаписьXML.ЗаписатьНачалоЭлемента("Payments");
			ЗаписьXML.ЗаписатьАтрибут("Cash"             , XMLСтрока(СуммаНаличные));
			ЗаписьXML.ЗаписатьАтрибут("ElectronicPayment", XMLСтрока(СуммаЭлектронно));
			ЗаписьXML.ЗаписатьАтрибут("Credit"           , XMLСтрока(СуммаПостоплата));
			ЗаписьXML.ЗаписатьАтрибут("AdvancePayment"   , XMLСтрока(СуммаПредоплата));
			ЗаписьXML.ЗаписатьАтрибут("CashProvision"    , XMLСтрока(СуммаПредоставление));
			ЗаписьXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
		
	Иначе
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("Parameters");
		ЗаписьXML.ЗаписатьАтрибут("PaymentType" , XMLСтрока(ТипРасчета));
		ЗаписьXML.ЗаписатьАтрибут("TaxVariant"  , XMLСтрока(СистемаНалогообложения));
		ЗаписьXML.ЗаписатьАтрибут("CashierName" , XMLСтрока(ОбщиеПараметры.Кассир));
		ЗаписьXML.ЗаписатьАтрибут("CashierVATIN", ?(ОбщиеПараметры.Свойство("КассирИНН"), XMLСтрока(ОбщиеПараметры.КассирИНН), ""));
		Если Не ПустаяСтрока(ОбщиеПараметры.ОтправительEmail) И Электронно Тогда // Отправитель Email указывается только для Электронно.
			ЗаписьXML.ЗаписатьАтрибут("SenderEmail", XMLСтрока(ОбщиеПараметры.ОтправительEmail));
		КонецЕсли;
		// Email отправляет средствами 1C
		Если ОбщиеПараметры.Свойство("Отправляет1СEmail") И НЕ ОбщиеПараметры.Отправляет1СEmail Тогда
			ЗаписьXML.ЗаписатьАтрибут("CustomerEmail", XMLСтрока(?(ОбщиеПараметры.Свойство("ПокупательEmail"), ОбщиеПараметры.ПокупательEmail, "")));
		КонецЕсли;
		// SMS отправляет средствами 1C
		Если ОбщиеПараметры.Свойство("Отправляет1СSMS") И НЕ ОбщиеПараметры.Отправляет1СSMS Тогда
			ЗаписьXML.ЗаписатьАтрибут("CustomerPhone", XMLСтрока(?(ОбщиеПараметры.Свойство("ПокупательНомер"), ОбщиеПараметры.ПокупательНомер, "")));
		КонецЕсли;
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
		// Табличная часть
		Если ОбщиеПараметры.ПозицииЧека <> Неопределено Тогда
			ЗаписьXML.ЗаписатьНачалоЭлемента("Positions");
			Для ИндексМассива = 0 По ОбщиеПараметры.ПозицииЧека.Количество() - 1 Цикл
				ТекущаяПозиция = ОбщиеПараметры.ПозицииЧека[ИндексМассива];
				Если ТекущаяПозиция.Свойство("ФискальнаяСтрока") Тогда
						ЗаписьXML.ЗаписатьНачалоЭлемента("FiscalString");
						Наименование = ТекущаяПозиция.Наименование;
						ЗаписьXML.ЗаписатьАтрибут("Name"      , Наименование);
						ЗаписьXML.ЗаписатьАтрибут("Quantity"  , XMLСтрока(ТекущаяПозиция.Количество));
						ЗаписьXML.ЗаписатьАтрибут("Price"     , XMLСтрока(ТекущаяПозиция.Цена));
						ЗаписьXML.ЗаписатьАтрибут("Amount"    , XMLСтрока(ТекущаяПозиция.Сумма));
						ЗаписьXML.ЗаписатьАтрибут("Department", XMLСтрока(ТекущаяПозиция.НомерСекции));
						Если НЕ ПустаяСтрока(ТекущаяПозиция.СтавкаНДС) Тогда 
							Если ТекущаяПозиция.СтавкаНДС = 118 Тогда
								ЗначениеСтавкаНДС = "18/118";
							ИначеЕсли ТекущаяПозиция.СтавкаНДС = 110 Тогда
								ЗначениеСтавкаНДС = "10/110";
							ИначеЕсли ТекущаяПозиция.СтавкаНДС = 120 Тогда
								ЗначениеСтавкаНДС = "20/120";
							Иначе
								ЗначениеСтавкаНДС = ТекущаяПозиция.СтавкаНДС;
							КонецЕсли;
						Иначе
							ЗначениеСтавкаНДС = "none";
						КонецЕсли;
						ЗаписьXML.ЗаписатьАтрибут("Tax", XMLСтрока(ЗначениеСтавкаНДС));
						ЗаписьXML.ЗаписатьКонецЭлемента();
						СуммаЧека = СуммаЧека + ТекущаяПозиция.Сумма;
					ИначеЕсли ТекущаяПозиция.Свойство("ТекстоваяСтрока") Тогда
						Если ТекущаяПозиция.Свойство("ПереносСтроки") И ТекущаяПозиция.ПереносСтроки Тогда 
							ТекстовыеСтроки = МенеджерОборудованияКлиентСервер.ПостроитьПолеПереносом(ТекущаяПозиция.Текст, ПараметрыФискализации.ШиринаСтроки);
						Иначе
							ТекстовыеСтроки = ТекущаяПозиция.Текст;
						КонецЕсли;
						Выравнивание = ?(ТекущаяПозиция.Свойство("Выравнивание"),  ТекущаяПозиция.Выравнивание, "Лево"); 
						Для НомерСтроки = 1 По СтрЧислоСтрок(ТекстовыеСтроки) Цикл
							ВыделеннаяСтрока = СтрПолучитьСтроку(ТекстовыеСтроки, НомерСтроки);
							ВыделеннаяСтрока = МенеджерОборудованияКлиентСервер.ВыравнитьПоле(ВыделеннаяСтрока, ПараметрыФискализации.ШиринаСтроки, Выравнивание); 
							ЗаписьXML.ЗаписатьНачалоЭлемента("TextString");
							ЗаписьXML.ЗаписатьАтрибут("Text", XMLСтрока(ВыделеннаяСтрока));
							ЗаписьXML.ЗаписатьКонецЭлемента();  
						КонецЦикла;
					ИначеЕсли ТекущаяПозиция.Свойство("ШтрихКод") Тогда
						ЗаписьXML.ЗаписатьНачалоЭлемента("Barcode");
						ЗаписьXML.ЗаписатьАтрибут("BarcodeType", XMLСтрока(ТекущаяПозиция.ТипШтрихкода));
						ЗаписьXML.ЗаписатьАтрибут("Barcode", XMLСтрока(ТекущаяПозиция.ШтрихКод));
						ЗаписьXML.ЗаписатьКонецЭлемента();
				КонецЕсли;
			КонецЦикла;
			ЗаписьXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
	
		// Таблица оплат
		Если ТаблицаОплат <> Неопределено Тогда
			ЗаписьXML.ЗаписатьНачалоЭлемента("Payments");
			ЗаписьXML.ЗаписатьАтрибут("Cash", XMLСтрока(СуммаНаличные));
			ЗаписьXML.ЗаписатьАтрибут("CashLessType1", XMLСтрока(СуммаЭлектронно + СуммаПредоставление));
			ЗаписьXML.ЗаписатьАтрибут("CashLessType2", XMLСтрока(СуммаПостоплата));
			ЗаписьXML.ЗаписатьАтрибут("CashLessType3", XMLСтрока(СуммаПредоплата));
			ЗаписьXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ПараметрыФискализации.ДанныеЧекаXML = ЗаписьXML.Закрыть();
	ПараметрыФискализации.ТипРасчета = ОбщиеПараметры.ТипРасчета;
	ПараметрыФискализации.СуммаЧека = СуммаЧека;
	ПараметрыФискализации.ОплатаНаличные    = ?(СуммаНаличные > СуммаЧека, СуммаЧека, СуммаНаличные); 
	ПараметрыФискализации.ОплатаЭлектронно  = СуммаЭлектронно;
	ПараметрыФискализации.ОплатаПостоплата  = СуммаПостоплата;
	ПараметрыФискализации.ОплатаПредоплата  = СуммаПредоплата;
	ПараметрыФискализации.ОплатаВстречноеПредоставление = СуммаПредоставление;
	
КонецПроцедуры

Процедура СформироватьXMLПакетДляЧекаКоррекции(ОбщиеПараметры, ПараметрыФискализации) Экспорт
	
	Если ПараметрыФискализации.РевизияИнтерфейса >= 3000 Тогда  // Версия стандарта 3.0 (ОФД 1.1)
		
		СформироватьXMLПакетДляФискализацияЧека(ОбщиеПараметры, ПараметрыФискализации);
		
	Иначе
		ТипРасчета = МенеджерОборудованияКлиентСервер.КодРасчетаДенежнымиСредствами(ОбщиеПараметры.ТипРасчета);
		СистемаНалогообложения = МенеджерОборудованияКлиентСервер.КодСистемыНалогообложенияККТ(ОбщиеПараметры.СистемаНалогообложения);
		
		ЗаписьXML = Новый ЗаписьXML();
		ЗаписьXML.УстановитьСтроку("UTF-8");
		ЗаписьXML.ЗаписатьОбъявлениеXML();
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("CheckCorrectionPackage");
		ЗаписьXML.ЗаписатьНачалоЭлемента("Parameters");
		ЗаписьXML.ЗаписатьАтрибут("PaymentType", XMLСтрока(ТипРасчета));
		ЗаписьXML.ЗаписатьАтрибут("TaxVariant" , XMLСтрока(СистемаНалогообложения));
		ЗаписьXML.ЗаписатьАтрибут("CashierName",  XMLСтрока(ОбщиеПараметры.Кассир));
		ЗаписьXML.ЗаписатьАтрибут("CashierVATIN", ?(ОбщиеПараметры.Свойство("КассирИНН"), XMLСтрока(ОбщиеПараметры.КассирИНН), ""));
		
		Если ОбщиеПараметры.Свойство("ДанныеКоррекции") Тогда
			ДанныеКоррекции = ОбщиеПараметры.ДанныеКоррекции;
			ТипКоррекции = ?(ПустаяСтрока(ДанныеКоррекции.ТипКоррекции), 0, ДанныеКоррекции.ТипКоррекции);   
			ЗаписьXML.ЗаписатьАтрибут("CorrectionType",  XMLСтрока(ДанныеКоррекции.ТипКоррекции));
			Если Не ПустаяСтрока(ДанныеКоррекции.ДатаКоррекции) Тогда
				ЗаписьXML.ЗаписатьАтрибут("CorrectionBaseDate",  XMLСтрока(НачалоДня(ДанныеКоррекции.ДатаКоррекции)));
			КонецЕсли;
			Если Не ПустаяСтрока(ДанныеКоррекции.НомерПредписания) Тогда
				ЗаписьXML.ЗаписатьАтрибут("CorrectionBaseNumber",  XMLСтрока(ДанныеКоррекции.НомерПредписания));
			КонецЕсли;
			Если Не ПустаяСтрока(ДанныеКоррекции.ОписаниеКоррекции) Тогда
				ЗаписьXML.ЗаписатьАтрибут("CorrectionBaseName",  XMLСтрока(ДанныеКоррекции.ОписаниеКоррекции));
			КонецЕсли;
		КонецЕсли;
		
		Если ОбщиеПараметры.Свойство("ДополнительныйРеквизит") И НЕ ПустаяСтрока(ОбщиеПараметры.ДополнительныйРеквизит) Тогда  
			ЗаписьXML.ЗаписатьАтрибут("AdditionalAttribute", XMLСтрока(ОбщиеПараметры.ДополнительныйРеквизит));
		КонецЕсли;
		
		СуммаЧека   = 0;
		СуммаНДС10  = 0;
		СуммаНДС18  = 0;
		СуммаНДС20  = 0;
		СуммаНДС110 = 0;
		СуммаНДС118 = 0;
		СуммаНДС120 = 0;
		СуммаНДС0   = 0;
		СуммаБезНДС = 0;
		
		Если ОбщиеПараметры.ПозицииЧека <> Неопределено Тогда
			Для ИндексМассива = 0 По ОбщиеПараметры.ПозицииЧека.Количество() - 1 Цикл
				ПозицияЧека = ОбщиеПараметры.ПозицииЧека[ИндексМассива];
				Если ПозицияЧека.Свойство("ФискальнаяСтрока") Тогда
					
					СуммаЧека = СуммаЧека + ПозицияЧека.Сумма; // Сумма позиции
					СтавкаНДС = ПозицияЧека.СтавкаНДС; // Ставка НДС
					СуммаНДС = ?(ПустаяСтрока(ПозицияЧека.СуммаНДС), 0, ПозицияЧека.СуммаНДС);  // Сумма НДС
					Если СтавкаНДС = 10 Тогда
						СуммаНДС10 = СуммаНДС10 + ?(СуммаНДС > 0, СуммаНДС, ПозицияЧека.Сумма / 110 * 10);
					ИначеЕсли СтавкаНДС = 18 Тогда
						СуммаНДС18 = СуммаНДС18 + ?(СуммаНДС > 0, СуммаНДС, ПозицияЧека.Сумма / 118 * 18);
					ИначеЕсли СтавкаНДС = 20 Тогда
						СуммаНДС20 = СуммаНДС20 + ?(СуммаНДС > 0, СуммаНДС, ПозицияЧека.Сумма / 120 * 20);
					ИначеЕсли СтавкаНДС = 0 Тогда
						СуммаНДС0 = СуммаНДС0 + ПозицияЧека.Сумма;
					ИначеЕсли СтавкаНДС = 110 Тогда
						СуммаНДС110 = СуммаНДС110 + ?(СуммаНДС > 0, СуммаНДС, ПозицияЧека.Сумма / 110 * 10);
					ИначеЕсли СтавкаНДС = 118 Тогда
						СуммаНДС118 = СуммаНДС118 + ?(СуммаНДС > 0, СуммаНДС, ПозицияЧека.Сумма / 118 * 18);
					ИначеЕсли СтавкаНДС = 120 Тогда
						СуммаНДС120 = СуммаНДС120 + ?(СуммаНДС > 0, СуммаНДС, ПозицияЧека.Сумма / 120 * 20);
					Иначе 
						СуммаБезНДС = СуммаБезНДС + ПозицияЧека.Сумма;
					КонецЕсли;
				КонецЕсли; 
			КонецЦикла;
		КонецЕсли;
		
		СуммаНаличные       = 0;
		СуммаЭлектронно     = 0;
		СуммаПостоплата     = 0;
		СуммаПредоплата     = 0;
		СуммаПредоставление = 0;
		ТаблицаОплат = ОбщиеПараметры.ТаблицаОплат; 
		Для ИндексОплаты = 0 По ТаблицаОплат.Количество() - 1 Цикл
			Если ТаблицаОплат[ИндексОплаты].ТипОплаты = ПредопределенноеЗначение("Перечисление.ТипыОплатыККТ.Электронно") Тогда
				СуммаЭлектронно = СуммаЭлектронно + ТаблицаОплат[ИндексОплаты].Сумма;
			ИначеЕсли ТаблицаОплат[ИндексОплаты].ТипОплаты = ПредопределенноеЗначение("Перечисление.ТипыОплатыККТ.Предоплата") Тогда
				СуммаПредоплата = СуммаПредоплата + ТаблицаОплат[ИндексОплаты].Сумма;
			ИначеЕсли ТаблицаОплат[ИндексОплаты].ТипОплаты = ПредопределенноеЗначение("Перечисление.ТипыОплатыККТ.Постоплата") Тогда
				СуммаПостоплата = СуммаПостоплата + ТаблицаОплат[ИндексОплаты].Сумма;
			ИначеЕсли ТаблицаОплат[ИндексОплаты].ТипОплаты = ПредопределенноеЗначение("Перечисление.ТипыОплатыККТ.ВстречноеПредоставление") Тогда
				СуммаПредоставление = СуммаПредоставление + ТаблицаОплат[ИндексОплаты].Сумма;
			Иначе
				СуммаНаличные = СуммаНаличные + ТаблицаОплат[ИндексОплаты].Сумма;
			КонецЕсли;
		КонецЦикла;
		
		ЗаписьXML.ЗаписатьАтрибут("Sum"       , XMLСтрока(СуммаЧека));
		ЗаписьXML.ЗаписатьАтрибут("SumTAXNone", XMLСтрока(СуммаБезНДС)); 
		ЗаписьXML.ЗаписатьАтрибут("SumTAX0"   , XMLСтрока(Окр(СуммаНДС0, 2)));
		ЗаписьXML.ЗаписатьАтрибут("SumTAX10"  , XMLСтрока(Окр(СуммаНДС10, 2))); 
		ЗаписьXML.ЗаписатьАтрибут("SumTAX18"  , XMLСтрока(Окр(СуммаНДС18, 2))); 
		ЗаписьXML.ЗаписатьАтрибут("SumTAX20"  , XMLСтрока(Окр(СуммаНДС20, 2))); 
		ЗаписьXML.ЗаписатьАтрибут("SumTAX110" , XMLСтрока(Окр(СуммаНДС110, 2))); 
		ЗаписьXML.ЗаписатьАтрибут("SumTAX118" , XMLСтрока(Окр(СуммаНДС118, 2)));
		ЗаписьXML.ЗаписатьАтрибут("SumTAX120" , XMLСтрока(Окр(СуммаНДС120, 2)));
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("Payments");
		ЗаписьXML.ЗаписатьАтрибут("Cash"             , XMLСтрока(СуммаНаличные));
		ЗаписьXML.ЗаписатьАтрибут("ElectronicPayment", XMLСтрока(СуммаЭлектронно));
		ЗаписьXML.ЗаписатьАтрибут("Credit"           , XMLСтрока(СуммаПостоплата));
		ЗаписьXML.ЗаписатьАтрибут("AdvancePayment"   , XMLСтрока(СуммаПредоплата));
		ЗаписьXML.ЗаписатьАтрибут("CashProvision"    , XMLСтрока(СуммаПредоставление));
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
		ПараметрыФискализации.ДанныеЧекаXML = ЗаписьXML.Закрыть();
		ПараметрыФискализации.ТипРасчета = ОбщиеПараметры.ТипРасчета;
		ПараметрыФискализации.СуммаЧека = СуммаЧека;
		ПараметрыФискализации.ОплатаНаличные    = СуммаНаличные; 
		ПараметрыФискализации.ОплатаЭлектронно  = СуммаЭлектронно;
		ПараметрыФискализации.ОплатаПостоплата  = СуммаПостоплата;
		ПараметрыФискализации.ОплатаПредоплата  = СуммаПредоплата;
		ПараметрыФискализации.ОплатаВстречноеПредоставление = СуммаПредоставление;

	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьXMLПакетДляТекста(СтрокаТекста) Экспорт
	
	Результат = Новый Массив();
	
	// Пакетная печать чека. Подготовка пакета.
	ЗаписьXML = Новый ЗаписьXML();
	ЗаписьXML.УстановитьСтроку("UTF-8");
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	ЗаписьXML.ЗаписатьНачалоЭлемента("Document");
	                              
	Если НЕ ПустаяСтрока(СтрокаТекста) Тогда
		ЗаписьXML.ЗаписатьНачалоЭлемента("Positions");
		
		Для НомерСтроки = 1 По СтрЧислоСтрок(СтрокаТекста) Цикл
			
			ВыделеннаяСтрока = СтрПолучитьСтроку(СтрокаТекста, НомерСтроки);
			
			Если (Найти(ВыделеннаяСтрока, "[отрезка]") > 0)
				 Или (Найти(ВыделеннаяСтрока, "[cut]") > 0) Тогда
				 
				// Завершаем запись текущего пакета. 
				ЗаписьXML.ЗаписатьКонецЭлемента();
				ЗаписьXML.ЗаписатьКонецЭлемента();
				Текст = ЗаписьXML.Закрыть();
				Результат.Добавить(Текст);
				
				// Новый пакет.
				ЗаписьXML = Новый ЗаписьXML();
				ЗаписьXML.УстановитьСтроку("UTF-8");
				ЗаписьXML.ЗаписатьОбъявлениеXML();
				ЗаписьXML.ЗаписатьНачалоЭлемента("Document");
				ЗаписьXML.ЗаписатьНачалоЭлемента("Positions");
				
			ИначеЕсли (Найти(ВыделеннаяСтрока, "|ШтрихКод|") > 0) Тогда
				ВыделеннаяСтрока = Сред(ВыделеннаяСтрока, СтрДлина("|ШтрихКод|") + 1);
				ВремТипШтрихкода = Сред(ВыделеннаяСтрока, 1, Найти(ВыделеннаяСтрока, "|") - 1);
	 			ВремШтрихКод = Сред(ВыделеннаяСтрока, Найти(ВыделеннаяСтрока, "|") + 1); 
				
				ЗаписьXML.ЗаписатьНачалоЭлемента("Barcode");
				ЗаписьXML.ЗаписатьАтрибут("BarcodeType", XMLСтрока(ВремТипШтрихкода));
				ЗаписьXML.ЗаписатьАтрибут("Barcode", XMLСтрока(ВремШтрихКод));
				ЗаписьXML.ЗаписатьКонецЭлемента();
			Иначе
				ЗаписьXML.ЗаписатьНачалоЭлемента("TextString");
				ЗаписьXML.ЗаписатьАтрибут("Text", XMLСтрока(ВыделеннаяСтрока));
				ЗаписьXML.ЗаписатьКонецЭлемента();
			КонецЕсли;
		КонецЦикла;
		
		ЗаписьXML.ЗаписатьКонецЭлемента();
	КонецЕсли;
		
	ЗаписьXML.ЗаписатьКонецЭлемента();
	Текст = ЗаписьXML.Закрыть();
	
	Результат.Добавить(Текст);
	
	Возврат Результат;

КонецФункции   

Функция ПолучитьXMLПакетДляТекстовогоДокумента(НефискальныеДокументы, ВыходныеПараметры, ШиринаСтроки = 32) Экспорт
	
	Результат = Новый Массив();
	
	Для Каждого ПозицииЧека Из НефискальныеДокументы Цикл
		
		// Пакетная печать чека. Подготовка пакета.
		ЗаписьXML = Новый ЗаписьXML();
		ЗаписьXML.УстановитьСтроку("UTF-8");
		ЗаписьXML.ЗаписатьОбъявлениеXML();
		ЗаписьXML.ЗаписатьНачалоЭлемента("Document");
		
		// Табличная часть
		Если ПозицииЧека <> Неопределено Тогда
			ЗаписьXML.ЗаписатьНачалоЭлемента("Positions");
			Для ИндексМассива = 0 По ПозицииЧека.Количество() - 1 Цикл
				ТекущаяПозиция = ПозицииЧека[ИндексМассива];
				Если ТекущаяПозиция.Свойство("ФискальнаяСтрока") Тогда
						ЗаписьXML.ЗаписатьНачалоЭлемента("FiscalString");
						ЗаписьXML.ЗаписатьАтрибут("Name"      , XMLСтрока(ТекущаяПозиция.Наименование));
						ЗаписьXML.ЗаписатьАтрибут("Quantity"  , XMLСтрока(ТекущаяПозиция.Количество));
						ЗаписьXML.ЗаписатьАтрибут("Price"     , XMLСтрока(ТекущаяПозиция.Цена));
						ЗаписьXML.ЗаписатьАтрибут("Amount"    , XMLСтрока(ТекущаяПозиция.Сумма));
						ЗаписьXML.ЗаписатьАтрибут("Department", XMLСтрока(ТекущаяПозиция.НомерСекции));
						Если НЕ ПустаяСтрока(ТекущаяПозиция.СтавкаНДС) Тогда 
							ЗаписьXML.ЗаписатьАтрибут("Tax"   , XMLСтрока(ТекущаяПозиция.СтавкаНДС));
						Иначе
							ЗаписьXML.ЗаписатьАтрибут("Tax"   , "none");
						КонецЕсли;
						ЗаписьXML.ЗаписатьКонецЭлемента();
					ИначеЕсли ТекущаяПозиция.Свойство("ТекстоваяСтрока") Тогда
						Если ТекущаяПозиция.Свойство("ПереносСтроки") И ТекущаяПозиция.ПереносСтроки Тогда 
							ТекстовыеСтроки = МенеджерОборудованияКлиентСервер.ПостроитьПолеПереносом(ТекущаяПозиция.Текст, ШиринаСтроки);
						Иначе
							ТекстовыеСтроки = ТекущаяПозиция.Текст;
						КонецЕсли;
						Выравнивание = ?(ТекущаяПозиция.Свойство("Выравнивание"),  ТекущаяПозиция.Выравнивание, "Лево"); 
						Для НомерСтроки = 1 По СтрЧислоСтрок(ТекстовыеСтроки) Цикл
							ВыделеннаяСтрока = СтрПолучитьСтроку(ТекстовыеСтроки, НомерСтроки);
							ВыделеннаяСтрока = МенеджерОборудованияКлиентСервер.ВыравнитьПоле(ВыделеннаяСтрока, ШиринаСтроки, Выравнивание); 
							ЗаписьXML.ЗаписатьНачалоЭлемента("TextString");
							ЗаписьXML.ЗаписатьАтрибут("Text", XMLСтрока(ВыделеннаяСтрока));
							ЗаписьXML.ЗаписатьКонецЭлемента();  
						КонецЦикла;
					ИначеЕсли ТекущаяПозиция.Свойство("ШтрихКод") Тогда
						ЗаписьXML.ЗаписатьНачалоЭлемента("Barcode");
						ЗаписьXML.ЗаписатьАтрибут("BarcodeType", XMLСтрока(ТекущаяПозиция.ТипШтрихкода));
						ЗаписьXML.ЗаписатьАтрибут("Barcode", XMLСтрока(ТекущаяПозиция.ШтрихКод));
						ЗаписьXML.ЗаписатьКонецЭлемента();
					Иначе
						ТекстОшибки = НСтр("ru='Не определен тип позиции чека.'"); 
						ВыходныеПараметры.Очистить();
						ВыходныеПараметры.Вставить("ТекстОшибки", ТекстОшибки);
						Результат = Ложь;  
						Возврат Результат;
				КонецЕсли;
			КонецЦикла;
			ЗаписьXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
		
		ЗаписьXML.ЗаписатьКонецЭлемента();
		Текст = ЗаписьXML.Закрыть();
		Результат.Добавить(Текст);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции  

Функция ПолучитьXMLПакетДляОперации(ОбщиеПараметры) Экспорт
	
	ЗаписьXML = Новый ЗаписьXML();
	ЗаписьXML.УстановитьСтроку("UTF-8");
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	ЗаписьXML.ЗаписатьНачалоЭлемента("InputParameters");
	ЗаписьXML.ЗаписатьНачалоЭлемента("Parameters");
	ЗаписьXML.ЗаписатьАтрибут("CashierName", ?(ОбщиеПараметры.Свойство("Кассир"), XMLСтрока(ОбщиеПараметры.Кассир), НСтр("ru='Администратор'")));
	ЗаписьXML.ЗаписатьАтрибут("CashierVATIN", ?(ОбщиеПараметры.Свойство("КассирИНН"), XMLСтрока(ОбщиеПараметры.КассирИНН), ""));
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	Возврат ЗаписьXML.Закрыть();
	
КонецФункции   

Функция ПолучитьТаблицуПараметрыИзXMLПакетаККТ(Данные, ИдентификаторУстройства = Неопределено) Экспорт
	
	ЧтениеXML = Новый ЧтениеXML; 
	ЧтениеXML.УстановитьСтроку(Данные);
	ЧтениеXML.ПерейтиКСодержимому();
	
	Параметры = МенеджерОборудованияКлиентСервер.ПараметрыРегистрацииККТ();
	
	Если ЧтениеXML.Имя = "Parameters" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда  
		Параметры.ВерсияФФДФН   = ЧтениеXML.ЗначениеАтрибута("FFDVersionFN");
		Параметры.ВерсияФФДККТ  = ЧтениеXML.ЗначениеАтрибута("FFDVersionKKT");
		// ФФД 1.0
		Параметры.РегистрационныйНомерККТ        = СокрЛП(ЧтениеXML.ЗначениеАтрибута("KKTNumber"));
		Параметры.ОрганизацияНазвание            = ЧтениеXML.ЗначениеАтрибута("OrganizationName");
		Параметры.ОрганизацияИНН                 = СокрЛП(ЧтениеXML.ЗначениеАтрибута("VATIN"));
		Параметры.АдресУстановкиККТ              = ЧтениеXML.ЗначениеАтрибута("AddressSettle");
		Параметры.КодыСистемыНалогообложения     = ЧтениеXML.ЗначениеАтрибута("TaxVariant");
		Если ПустаяСтрока(Параметры.КодыСистемыНалогообложения) Тогда
			Параметры.КодыСистемыНалогообложения = ЧтениеXML.ЗначениеАтрибута("TaxVarinat");
		КонецЕсли;
		Параметры.ПризнакАвтономногоРежима       = ВРег(ЧтениеXML.ЗначениеАтрибута("OfflineMode")) = "TRUE";
		Параметры.ПризнакАвтоматическогоРежима   = ВРег(ЧтениеXML.ЗначениеАтрибута("AutomaticMode")) = "TRUE";
		Параметры.НомерАвтоматаДляАвтоматическогоРежима = ЧтениеXML.ЗначениеАтрибута("AutomaticNumber");
		Параметры.ПризнакРасчетовЗаУслуги        = ВРег(ЧтениеXML.ЗначениеАтрибута("ServiceSign")) = "TRUE";
		Параметры.ПризнакФормированияТолькоБСО   = ВРег(ЧтениеXML.ЗначениеАтрибута("BSOSing")) = "TRUE";
		Параметры.ПризнакРасчетовТолькоВИнтернет = ВРег(ЧтениеXML.ЗначениеАтрибута("CalcOnlineSign")) = "TRUE";
		Параметры.ПризнакШифрованиеДанных        = ВРег(ЧтениеXML.ЗначениеАтрибута("DataEncryption")) = "TRUE";
		Параметры.ОрганизацияОФДИНН          = СокрЛП(ЧтениеXML.ЗначениеАтрибута("OFDVATIN"));
		Параметры.ОрганизацияОФДНазвание     = ЧтениеXML.ЗначениеАтрибута("OFDOrganizationName");
		Параметры.ЗаводскойНомерККТ          = СокрЛП(ЧтениеXML.ЗначениеАтрибута("KKTSerialNumber"));
		Параметры.ПризнакФискализации        = ВРег(ЧтениеXML.ЗначениеАтрибута("Fiscal")) = "TRUE";
		Параметры.ЗаводскойНомерФН           = СокрЛП(ЧтениеXML.ЗначениеАтрибута("FNSerialNumber"));
		Параметры.НомерДокументаФискализации = ЧтениеXML.ЗначениеАтрибута("DocumentNumber");
		Параметры.ДатаВремяФискализации      = ЧтениеXML.ЗначениеАтрибута("DateTime");
		// ФФД 1.0.5 & 1.1
		Параметры.МестоПроведенияРасчетов    = ЧтениеXML.ЗначениеАтрибута("PlaceSettle");
		Параметры.ПродажаПодакцизногоТовара  = ЧтениеXML.ЗначениеАтрибута("SaleExcisableGoods");
		Параметры.ПроведенияАзартныхИгр      = ЧтениеXML.ЗначениеАтрибута("SignOfGambling");
		Параметры.ПроведенияЛотерей          = ЧтениеXML.ЗначениеАтрибута("SignOfLottery");
		Параметры.ПризнакиАгента             = ЧтениеXML.ЗначениеАтрибута("SignOfAgent");
		Параметры.УстановкаПринтераВАвтомате = ЧтениеXML.ЗначениеАтрибута("PrinterAutomatic");
	КонецЕсли;
	
	Возврат Параметры;
	
КонецФункции

// Получить таблицу параметров из ККТ.
//
// Возвращаемое значение
//  Структура
//
Функция ПараметрыИзXMLПакетаККТ(Данные, ИдентификаторУстройства = Неопределено) Экспорт
	
	ЧтениеXML = Новый ЧтениеXML; 
	ЧтениеXML.УстановитьСтроку(Данные);
	ЧтениеXML.ПерейтиКСодержимому();
	
	Параметры = МенеджерОборудованияКлиентСервер.ПараметрыРегистрацииККТ();
	
	Параметры.Вставить("ТипОборудования", Перечисления.ТипыПодключаемогоОборудования.ККТ);
	
	Если ЧтениеXML.Имя = "Parameters" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда  
		Параметры.ВерсияФФДФН   = ЧтениеXML.ЗначениеАтрибута("FFDVersionFN");
		Если ПустаяСтрока(Параметры.ВерсияФФДФН) Тогда
			Параметры.ВерсияФФДФН = "1.0";
		КонецЕсли;
		Параметры.ВерсияФФДККТ  = ЧтениеXML.ЗначениеАтрибута("FFDVersionKKT");
		Если ПустаяСтрока(Параметры.ВерсияФФДККТ) Тогда
			Параметры.ВерсияФФДККТ = "1.0";
		КонецЕсли;
		// ФФД 1.0
		Параметры.РегистрационныйНомерККТ        = СокрЛП(ЧтениеXML.ЗначениеАтрибута("KKTNumber"));
		Параметры.ОрганизацияНазвание            = ЧтениеXML.ЗначениеАтрибута("OrganizationName");
		Параметры.ОрганизацияИНН                 = СокрЛП(ЧтениеXML.ЗначениеАтрибута("VATIN"));
		Параметры.АдресУстановкиККТ              = ЧтениеXML.ЗначениеАтрибута("AddressSettle");
		Параметры.КодыСистемыНалогообложения     = ЧтениеXML.ЗначениеАтрибута("TaxVariant");
		Если ПустаяСтрока(Параметры.КодыСистемыНалогообложения) Тогда
			Параметры.КодыСистемыНалогообложения = ЧтениеXML.ЗначениеАтрибута("TaxVarinat");
		КонецЕсли;
		Параметры.ПризнакАвтономногоРежима       = ВРег(ЧтениеXML.ЗначениеАтрибута("OfflineMode")) = "TRUE";
		Параметры.ПризнакАвтоматическогоРежима   = ВРег(ЧтениеXML.ЗначениеАтрибута("AutomaticMode")) = "TRUE";
		Параметры.НомерАвтоматаДляАвтоматическогоРежима = ЧтениеXML.ЗначениеАтрибута("AutomaticNumber");
		Параметры.ПризнакФормированияТолькоБСО   = ВРег(ЧтениеXML.ЗначениеАтрибута("BSOSing")) = "TRUE";
		Параметры.ПризнакРасчетовТолькоВИнтернет = ВРег(ЧтениеXML.ЗначениеАтрибута("CalcOnlineSign")) = "TRUE";
		Параметры.ПризнакШифрованиеДанных        = ВРег(ЧтениеXML.ЗначениеАтрибута("DataEncryption")) = "TRUE";
		Параметры.ОрганизацияОФДИНН          = СокрЛП(ЧтениеXML.ЗначениеАтрибута("OFDVATIN"));
		Параметры.ОрганизацияОФДНазвание     = ЧтениеXML.ЗначениеАтрибута("OFDOrganizationName");
		Параметры.ЗаводскойНомерККТ          = СокрЛП(ЧтениеXML.ЗначениеАтрибута("KKTSerialNumber"));
		Параметры.ПризнакФискализации        = ВРег(ЧтениеXML.ЗначениеАтрибута("Fiscal")) = "TRUE";
		Параметры.ЗаводскойНомерФН           = СокрЛП(ЧтениеXML.ЗначениеАтрибута("FNSerialNumber"));
		Параметры.НомерДокументаФискализации = ЧтениеXML.ЗначениеАтрибута("DocumentNumber");
		Параметры.ДатаВремяФискализации      = ЧтениеXML.ЗначениеАтрибута("DateTime");
		// ФФД 1.0.5 & 1.1
		Параметры.МестоПроведенияРасчетов    = ЧтениеXML.ЗначениеАтрибута("PlaceSettle");
		Параметры.ПризнакРасчетовЗаУслуги    = ВРег(ЧтениеXML.ЗначениеАтрибута("ServiceSign")) = "TRUE";
		Параметры.ПродажаПодакцизногоТовара  = ВРег(ЧтениеXML.ЗначениеАтрибута("SaleExcisableGoods")) = "TRUE";
		Параметры.ПроведенияАзартныхИгр      = ВРег(ЧтениеXML.ЗначениеАтрибута("SignOfGambling")) = "TRUE";
		Параметры.ПроведенияЛотерей          = ВРег(ЧтениеXML.ЗначениеАтрибута("SignOfLottery")) = "TRUE";
		Параметры.ПризнакиАгента             = ЧтениеXML.ЗначениеАтрибута("SignOfAgent");
		Параметры.УстановкаПринтераВАвтомате = ВРег(ЧтениеXML.ЗначениеАтрибута("PrinterAutomatic")) = "TRUE";;
		Параметры.ОтправительEmail           = ЧтениеXML.ЗначениеАтрибута("SenderEmail");
		Параметры.АдресСайтаФНС              = ЧтениеXML.ЗначениеАтрибута("FNSWebSite");
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ИдентификаторУстройства) Тогда
		СохранитьПараметрыРегистрацииУстройства(ИдентификаторУстройства, Параметры);
	КонецЕсли;
	
	Возврат Параметры;
	
КонецФункции

// Получить таблицу параметров состояния из ККТ.
//
Функция ПолучитьПараметрыСостоянияИзXMLПакета(Данные) Экспорт
	
	Параметры = МенеджерОборудованияКлиентСервер.ПараметрыСостоянияККТ();
	
	ЧтениеXML = Новый ЧтениеXML; 
	ЧтениеXML.УстановитьСтроку(Данные);
	ЧтениеXML.ПерейтиКСодержимому();
	
	Если ЧтениеXML.Имя = "StatusParameters" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
		Если ЧтениеXML.Прочитать() И ЧтениеXML.Имя = "Parameters" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда  
			Параметры.КоличествоНепереданныхФД    = Число(ЧтениеXML.ЗначениеАтрибута("BacklogDocumentsCounter"));
			Параметры.НомерПервогоНепереданногоФД = ЧтениеXML.ЗначениеАтрибута("BacklogDocumentFirstNumber");
			ДатаПервогоНепереданногоФД = ЧтениеXML.ЗначениеАтрибута("BacklogDocumentFirstDateTime");
			Если НЕ ПустаяСтрока(ДатаПервогоНепереданногоФД) Тогда
				Параметры.ДатаПервогоНепереданногоФД = XMLЗначение(Тип("Дата"), ДатаПервогоНепереданногоФД);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Параметры;
	
КонецФункции

// Получить таблицу параметров состояния из ККТ.
//
Функция ПолучитьПараметрыСостоянияСменыИзXMLПакета(Данные, НомерСмены) Экспорт
	
	Параметры = МенеджерОборудованияКлиентСервер.ПараметрыНормализуемыхФискальныхДанных();
	Параметры.НомерСменыККТ = НомерСмены;
	
	Если Не ПустаяСтрока(Данные) Тогда
		
		ЧтениеXML = Новый ЧтениеXML; 
		ЧтениеXML.УстановитьСтроку(Данные);
		ЧтениеXML.ПерейтиКСодержимому();
		
		Если ЧтениеXML.Имя = "StatusParameters" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			Если ЧтениеXML.Прочитать() И ЧтениеXML.Имя = "Parameters" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда  
				КоличествоНепереданныхФД = ЧтениеXML.ЗначениеАтрибута("BacklogDocumentsCounter");
				Параметры.КоличествоНепереданныхФД    = ?(ПустаяСтрока(КоличествоНепереданныхФД), 0, Число(КоличествоНепереданныхФД));
				Параметры.НомерПервогоНепереданногоФД = ЧтениеXML.ЗначениеАтрибута("BacklogDocumentFirstNumber");
				ДатаПервогоНепереданногоФД = ЧтениеXML.ЗначениеАтрибута("BacklogDocumentFirstDateTime");
				Если НЕ ПустаяСтрока(ДатаПервогоНепереданногоФД) Тогда
					Параметры.ДатаПервогоНепереданногоФД = XMLЗначение(Тип("Дата"), ДатаПервогоНепереданногоФД);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Параметры;
	
КонецФункции

// Получить таблицу параметров смены из ККТ.
//
Функция ПолучитьПараметрыСменыИзXMLПакета(Данные, НомерСмены) Экспорт
	
	Параметры = МенеджерОборудованияКлиентСервер.ПараметрыНормализуемыхФискальныхДанных();
	Параметры.НомерСменыККТ = НомерСмены;
	
	Если Не ПустаяСтрока(Данные) Тогда
		
		ЧтениеXML = Новый ЧтениеXML; 
		ЧтениеXML.УстановитьСтроку(Данные);
		ЧтениеXML.ПерейтиКСодержимому();
		
		Если ЧтениеXML.Имя = "OutputParameters" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			Если ЧтениеXML.Прочитать() И ЧтениеXML.Имя = "Parameters" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда  
				
				Параметры.ПревышеноВремяОжиданияОтветаОФД = ВРег(ЧтениеXML.ЗначениеАтрибута("OFDtimeout")) = "TRUE";
				Параметры.НеобходимаСтрочнаяЗаменаФН = ВРег(ЧтениеXML.ЗначениеАтрибута("UrgentReplacementFN")) = "TRUE";
				Параметры.ПамятьФНПереполнена        = ВРег(ЧтениеXML.ЗначениеАтрибута("MemoryOverflowFN")) = "TRUE";
				Параметры.РесурсФНИсчерпан           = ВРег(ЧтениеXML.ЗначениеАтрибута("ResourcesExhaustionFN")) = "TRUE";
				
				КоличествоНепереданныхФД = ЧтениеXML.ЗначениеАтрибута("BacklogDocumentsCounter");
				Параметры.КоличествоНепереданныхФД    = ?(ПустаяСтрока(КоличествоНепереданныхФД), 0, Число(КоличествоНепереданныхФД));
				Параметры.НомерПервогоНепереданногоФД = ЧтениеXML.ЗначениеАтрибута("BacklogDocumentFirstNumber");
				ДатаПервогоНепереданногоФД = ЧтениеXML.ЗначениеАтрибута("BacklogDocumentFirstDateTime");
				Если НЕ ПустаяСтрока(ДатаПервогоНепереданногоФД) Тогда
					Параметры.ДатаПервогоНепереданногоФД = XMLЗначение(Тип("Дата"), ДатаПервогоНепереданногоФД);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Параметры;
	
КонецФункции

// Заполнить результаты фискализация чека из XML пакета.
//
Процедура ЗаполнитьРезультатыФискализацияЧекаИзXMLПакета(ПараметрыФискализации) Экспорт
	
	Если Не ПустаяСтрока(ПараметрыФискализации.РезультатОперацииXML) Тогда
		ЧтениеXML = Новый ЧтениеXML; 
		ЧтениеXML.УстановитьСтроку(ПараметрыФискализации.РезультатОперацииXML);
		ЧтениеXML.ПерейтиКСодержимому();
		Если ЧтениеXML.Имя = "DocumentOutputParameters" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			Если ЧтениеXML.Прочитать() И ЧтениеXML.Имя = "Parameters" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда  
				ПараметрыФискализации.НомерСменыККТ = ЧтениеXML.ЗначениеАтрибута("ShiftNumber");
				ПараметрыФискализации.НомерЧекаККТ  = ЧтениеXML.ЗначениеАтрибута("CheckNumber");
				ПараметрыФискализации.НомерЧекаЗаСмену   = ЧтениеXML.ЗначениеАтрибута("ShiftClosingCheckNumber");
				ПараметрыФискализации.ФискальныйПризнак  = ЧтениеXML.ЗначениеАтрибута("FiscalSign");
				ПараметрыФискализации.АдресСайтаПроверки = ЧтениеXML.ЗначениеАтрибута("AddressSiteInspections");
				ДатаВремяЧека = ЧтениеXML.ЗначениеАтрибута("DateTime");
				Если НЕ ПустаяСтрока(ДатаВремяЧека) Тогда
					ПараметрыФискализации.ДатаВремяЧека = XMLЗначение(Тип("Дата"), ДатаВремяЧека);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ПодготовитьДанныеФискализацииЧека(ОбщиеПараметры, ПараметрыПодключения) Экспорт
	
	ПараметрыРегистрации = ПараметрыПодключения.ПараметрыРегистрации;
	ВерсияФФДККТ11 = ?(ПараметрыРегистрации.Свойство("ВерсияФФДККТ"), ПараметрыРегистрации.ВерсияФФДККТ, "1.0.5");
	ВерсияФФДККТ11 = ВерсияФФДККТ11 = "1.1"; // Признак ФФД 1.1

	Если ТипЗнч(ОбщиеПараметры) = Тип("Массив") Тогда
		СтруктураОбщихПараметров = ОбщиеПараметры[0];
	Иначе
		СтруктураОбщихПараметров = ОбщиеПараметры;
	КонецЕсли;
	
	ПараметрыФискализации = МенеджерОборудованияКлиентСервер.ПараметрыФискализацииЧека();
	ПараметрыФискализации.РегистрационныйНомерККТ = ?(ПараметрыРегистрации.Свойство("РегистрационныйНомерККТ"), ПараметрыРегистрации.РегистрационныйНомерККТ, "");
	ПараметрыФискализации.ЗаводскойНомерФН  = ?(ПараметрыРегистрации.Свойство("ЗаводскойНомерФН"), ПараметрыРегистрации.ЗаводскойНомерФН, "");
	ПараметрыФискализации.ШиринаСтроки      = ?(ПараметрыПодключения.Свойство("ШиринаСтроки"), ПараметрыПодключения.ШиринаСтроки, 32);
	ПараметрыФискализации.РевизияИнтерфейса = ПараметрыПодключения.РевизияИнтерфейса;
	ПараметрыФискализации.ДокументОснование = СтруктураОбщихПараметров.ДокументОснование;
	ПараметрыФискализации.Организация       = СтруктураОбщихПараметров.Организация;
	ПараметрыФискализации.ТорговыйОбъект    = СтруктураОбщихПараметров.ТорговыйОбъект;
	ПараметрыФискализации.ДополнительныйРеквизит = СтруктураОбщихПараметров.ДополнительныйРеквизит;  
	Если СтруктураОбщихПараметров.Свойство("КорректируемыйДокумент") Тогда 
		ПараметрыФискализации.КорректируемыйДокумент = СтруктураОбщихПараметров.КорректируемыйДокумент;
	КонецЕсли;
	ПараметрыФискализации.Кассир       = СтруктураОбщихПараметров.Кассир;
	ПараметрыФискализации.Электронно   = СтруктураОбщихПараметров.Электронно;
	ПараметрыФискализации.Отправляет1СSMS   = СтруктураОбщихПараметров.Отправляет1СSMS;
	ПараметрыФискализации.Отправляет1СEmail = СтруктураОбщихПараметров.Отправляет1СEmail;
	ПараметрыФискализации.ВерсияФФДККТ11    = ВерсияФФДККТ11;
	НеприменениеККТ = СтруктураОбщихПараметров.Свойство("НеприменениеККТ") И СтруктураОбщихПараметров.НеприменениеККТ;
	
	Если СтруктураОбщихПараметров.Свойство("СформироватьЧекКоррекции") И СтруктураОбщихПараметров.СформироватьЧекКоррекции Тогда
		Если НеприменениеККТ Или ВерсияФФДККТ11 Тогда
			// Если неприменение ККТ или ФФД 1.1 
			ПараметрыФискализации.ТипДокумента = Перечисления.ТипыФискальныхДокументовККТ.КассовыйЧекКоррекции;
			МенеджерОборудованияВызовСервера.СформироватьXMLПакетДляЧекаКоррекции(СтруктураОбщихПараметров, ПараметрыФискализации);
			ПараметрыФискализации.СформироватьЧекКоррекции = Истина;
		Иначе // Для ФФД 1.0.5 и исправления ошибок ККТ - КассовыйЧек 
			ПараметрыФискализации.ТипДокумента = Перечисления.ТипыФискальныхДокументовККТ.КассовыйЧек;
			МенеджерОборудованияВызовСервера.СформироватьXMLПакетДляФискализацияЧека(СтруктураОбщихПараметров, ПараметрыФискализации);
		КонецЕсли;
	Иначе
		ПараметрыФискализации.ТипДокумента = Перечисления.ТипыФискальныхДокументовККТ.КассовыйЧек;
		МенеджерОборудованияВызовСервера.СформироватьXMLПакетДляФискализацияЧека(СтруктураОбщихПараметров, ПараметрыФискализации);
	КонецЕсли;
	
	Возврат ПараметрыФискализации;
	
КонецФункции

Функция ПодготовитьДанныеЧекаКоррекции(ОбщиеПараметры, ПараметрыПодключения) Экспорт
	
	ПараметрыРегистрации = ПараметрыПодключения.ПараметрыРегистрации;
	ВерсияФФДККТ11 = ?(ПараметрыРегистрации.Свойство("ВерсияФФДККТ"), ПараметрыРегистрации.ВерсияФФДККТ, "1.0.5");
	ВерсияФФДККТ11 = ВерсияФФДККТ11 = "1.1"; // Признак ФФД 1.1
	
	Если ТипЗнч(ОбщиеПараметры) = Тип("Массив") Тогда
		СтруктураОбщихПараметров = ОбщиеПараметры[0];
	Иначе
		СтруктураОбщихПараметров = ОбщиеПараметры;
	КонецЕсли;
	
	ПараметрыФискализации = МенеджерОборудованияКлиентСервер.ПараметрыФискализацииЧека();
	ПараметрыФискализации.НеприменениеККТ   = СтруктураОбщихПараметров.НеприменениеККТ;
	ПараметрыФискализации.Кассир            = СтруктураОбщихПараметров.Кассир;
	ПараметрыФискализации.Электронно        = СтруктураОбщихПараметров.Электронно;
	ПараметрыФискализации.Отправляет1СSMS   = СтруктураОбщихПараметров.Отправляет1СSMS;
	ПараметрыФискализации.Отправляет1СEmail = СтруктураОбщихПараметров.Отправляет1СEmail;
	ПараметрыФискализации.Организация       = СтруктураОбщихПараметров.Организация;
	ПараметрыФискализации.ТорговыйОбъект    = СтруктураОбщихПараметров.ТорговыйОбъект;
	ПараметрыФискализации.ВерсияФФДККТ11    = ВерсияФФДККТ11; 
	
	ПараметрыФискализации.РегистрационныйНомерККТ = ?(ПараметрыРегистрации.Свойство("РегистрационныйНомерККТ"), ПараметрыРегистрации.РегистрационныйНомерККТ, "");
	ПараметрыФискализации.ЗаводскойНомерФН  = ?(ПараметрыРегистрации.Свойство("ЗаводскойНомерФН"), ПараметрыРегистрации.ЗаводскойНомерФН, "");
	ПараметрыФискализации.ШиринаСтроки      = ?(ПараметрыПодключения.Свойство("ШиринаСтроки"), ПараметрыПодключения.ШиринаСтроки, 32);
	ПараметрыФискализации.РевизияИнтерфейса = ПараметрыПодключения.РевизияИнтерфейса;
	ПараметрыФискализации.ДокументОснование = СтруктураОбщихПараметров.ДокументОснование;
	
	Если СтруктураОбщихПараметров.НеприменениеККТ Тогда
		
		Если ПараметрыПодключения.РевизияИнтерфейса < 3000 
			И (СтруктураОбщихПараметров.ТипРасчета = Перечисления.ТипыРасчетаДенежнымиСредствами.ВозвратДенежныхСредств 
				 Или СтруктураОбщихПараметров.ТипРасчета = Перечисления.ТипыРасчетаДенежнымиСредствами.ВозвратРасходаДенежныхСредств) Тогда
			ПараметрыФискализации.Результат = Ложь;
			ПараметрыФискализации.ТекстОшибки = НСтр("ru='Для данного типа расчета нельзя сформировать чек коррекции для данного ККТ.'");
			Возврат ПараметрыФискализации;
		КонецЕсли;
			 
		// Сценарий 1 - непримененин ККТ. 
		Если НЕ ПустаяСтрока(СтруктураОбщихПараметров.КорректируемыйДокумент) Тогда
			ПараметрыФискализации.Результат = Ложь;
			ПараметрыФискализации.ТекстОшибки = НСтр("ru='Чек коррекции «неприменение ККТ» нельзя сформировать для фискализированного ранее чека.'");
			Возврат ПараметрыФискализации;
		КонецЕсли;
		ПараметрыФискализации.ТипДокумента = Перечисления.ТипыФискальныхДокументовККТ.КассовыйЧекКоррекции;
		МенеджерОборудованияВызовСервера.СформироватьXMLПакетДляЧекаКоррекции(СтруктураОбщихПараметров, ПараметрыФискализации);
	Иначе
		// Сценарий 2 - исправление нарушений применения ККТ.
		Если ПустаяСтрока(СтруктураОбщихПараметров.КорректируемыйДокумент) Тогда
			ПараметрыФискализации.Результат = Ложь; 
			ПараметрыФискализации.ТекстОшибки = НСтр("ru='Корректируемый документ не указан для формирования чека коррекции.'");
			Возврат ПараметрыФискализации;
		КонецЕсли;
		
		ТипыДокументов = Новый Массив();
		ТипыДокументов.Добавить(Перечисления.ТипыФискальныхДокументовККТ.КассовыйЧек); // Для ФФД 1.0.5
		ТипыДокументов.Добавить(Перечисления.ТипыФискальныхДокументовККТ.КассовыйЧекКоррекции); // Для ФФД 1.1
		
		КорректируемыйДокументОперация = МенеджерОборудованияВызовСервера.ДанныеФискальнойОперации(СтруктураОбщихПараметров.КорректируемыйДокумент, ,ТипыДокументов, СтруктураОбщихПараметров.ТипРасчета); 
		Если КорректируемыйДокументОперация = Неопределено Тогда
			ПараметрыФискализации.Результат = Ложь; 
			ПараметрыФискализации.ТекстОшибки = НСтр("ru='Не найден ранее фискализиронный кассовый чек для формирования чека коррекции.'");
			Возврат ПараметрыФискализации;
		Иначе
			// В зависимости от версии ФФД формируем "Кассовый чек" или "Кассовый чек коррекции".
			ТипФискальногоДокументов = ?(ВерсияФФДККТ11, Перечисления.ТипыФискальныхДокументовККТ.КассовыйЧекКоррекции, Перечисления.ТипыФискальныхДокументовККТ.КассовыйЧек);
			
			// Дополнительный реквизит чека - фискальным признаком документа основания (по которому идет коррекция).
			ФискальныйПризнак = КорректируемыйДокументОперация.ФискальныйПризнак;
			
			// Формируем кассовый чек с корректными реквизитами.
			ОбщиеПараметры.ДополнительныйРеквизит = ФискальныйПризнак;
			ПараметрыФискализации.ДополнительныйРеквизит = ФискальныйПризнак;  
			ПараметрыФискализации.ТипДокумента = ТипФискальногоДокументов;
			ПараметрыФискализации.КорректируемыйДокумент = КорректируемыйДокументОперация.ДокументОснование;
			
			МенеджерОборудованияВызовСервера.СформироватьXMLПакетДляФискализацияЧека(СтруктураОбщихПараметров, ПараметрыФискализации);
			
			// Формируем параметры фискализации для сторнирующего чека коррекции.
			ДанныеСторноЧекаXML = КорректируемыйДокументОперация.ДанныеXML.Получить();
			ЧекКоррекцииСторно = МенеджерОборудованияКлиентСервер.ПараметрыФискализацииЧека();
			ЗаполнитьЗначенияСвойств(ЧекКоррекцииСторно, ПараметрыФискализации);
			
			ОбщиеПараметрыСторно = МенеджерОборудованияВызовСервера.ЗагрузитьДанныеФискализацииИзXML(ДанныеСторноЧекаXML);
			ОбщиеПараметрыСторно.ДополнительныйРеквизит = ФискальныйПризнак;
			
			// Меняем признак типа расчета на противоположный.
			Если ОбщиеПараметрыСторно.ТипРасчета = Перечисления.ТипыРасчетаДенежнымиСредствами.ПриходДенежныхСредств Тогда
				ОбщиеПараметрыСторно.ТипРасчета = Перечисления.ТипыРасчетаДенежнымиСредствами.ВозвратДенежныхСредств;
			ИначеЕсли ОбщиеПараметрыСторно.ТипРасчета = Перечисления.ТипыРасчетаДенежнымиСредствами.ВозвратДенежныхСредств Тогда
				ОбщиеПараметрыСторно.ТипРасчета = Перечисления.ТипыРасчетаДенежнымиСредствами.ПриходДенежныхСредств;
			ИначеЕсли ОбщиеПараметрыСторно.ТипРасчета = Перечисления.ТипыРасчетаДенежнымиСредствами.РасходДенежныхСредств Тогда
				ОбщиеПараметрыСторно.ТипРасчета = Перечисления.ТипыРасчетаДенежнымиСредствами.ВозвратРасходаДенежныхСредств;
			ИначеЕсли ОбщиеПараметрыСторно.ТипРасчета = Перечисления.ТипыРасчетаДенежнымиСредствами.ВозвратРасходаДенежныхСредств Тогда
				ОбщиеПараметрыСторно.ТипРасчета = Перечисления.ТипыРасчетаДенежнымиСредствами.РасходДенежныхСредств;
			КонецЕсли;
			МенеджерОборудованияВызовСервера.СформироватьXMLПакетДляФискализацияЧека(ОбщиеПараметрыСторно, ЧекКоррекцииСторно);
			
			ПараметрыФискализации.ЧекКоррекцииСторно = ЧекКоррекцииСторно;
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПараметрыФискализации;
	
КонецФункции

Процедура ОбработатьДанныеФискализацииЧекаКоррекции(ПараметрыФискализации) Экспорт
	
	// Заполнить результаты фискализация чека из XML пакета.
	МенеджерОборудованияВызовСервера.ЗаполнитьРезультатыФискализацияЧекаИзXMLПакета(ПараметрыФискализации); 
	
	Если НЕ ПараметрыФискализации.НеприменениеККТ Тогда
		// Заполнить результаты фискализация чека из XML пакета.
		МенеджерОборудованияВызовСервера.ЗаполнитьРезультатыФискализацияЧекаИзXMLПакета(ПараметрыФискализации.ЧекКоррекцииСторно); 
			Попытка
			// Записать фискальную операцию - сторно.
			МенеджерОборудованияВызовСервера.ЗаписатьФискальнуюОперацию(ПараметрыФискализации.ЧекКоррекцииСторно);
		Исключение
			ПараметрыФискализации.ЧекКоррекцииСторно.ОперацияЗаписана = Ложь;
		КонецПопытки;
	КонецЕсли;
		
	Попытка
		// Записать фискальную операцию.
		МенеджерОборудованияВызовСервера.ЗаписатьФискальнуюОперацию(ПараметрыФискализации);
	Исключение
		ПараметрыФискализации.ОперацияЗаписана = Ложь;
	КонецПопытки;
	
КонецПроцедуры

Процедура ОбработатьДанныеФискализацииЧека(ПараметрыФискализации) Экспорт
	
	// Заполнить результаты фискализация чека из XML пакета.
	МенеджерОборудованияВызовСервера.ЗаполнитьРезультатыФискализацияЧекаИзXMLПакета(ПараметрыФискализации); 
	
	Попытка
		// Записать фискальную операцию.
		МенеджерОборудованияВызовСервера.ЗаписатьФискальнуюОперацию(ПараметрыФискализации);
	Исключение
		ПараметрыФискализации.ОперацияЗаписана = Ложь;
	КонецПопытки;
	
	// Формируем текст сообщения с атрибутами фискального чека для отправки покупателю. 
	Если (ПараметрыФискализации.Отправляет1СSMS Или ПараметрыФискализации.Отправляет1СEmail) Тогда
		ПараметрыФискализации.ТекстСообщения = МенеджерОборудованияВызовСервера.ШаблонАтрибутовЧекаДляОтсылки(ПараметрыФискализации); 
	КонецЕсли;
	
КонецПроцедуры

Функция ЗначениеXMLАтрибута(ЧтениеXML, ИмяАтрибута, ДопИмяАтрибута = Неопределено, ЗначениеПоУмолчанию = Неопределено)
	
	Результат = ЗначениеПоУмолчанию;
	Если ЧтениеXML.ЗначениеАтрибута(ИмяАтрибута) <> Неопределено Тогда  
		Результат = ЧтениеXML.ЗначениеАтрибута(ИмяАтрибута);
	ИначеЕсли НЕ ПустаяСтрока(ДопИмяАтрибута) И ЧтениеXML.ЗначениеАтрибута(ДопИмяАтрибута) <> Неопределено Тогда
		Результат = ЧтениеXML.ЗначениеАтрибута(ДопИмяАтрибута);
	КонецЕсли;
	
	Возврат Результат; 
	
КонецФункции

// Получить структуру чека из XML.
//
Функция ЗагрузитьДанныеФискализацииИзXML(ДанныеXML) Экспорт
	
	ОбщиеПараметры = МенеджерОборудованияКлиентСервер.ПараметрыОперацииЧекаКоррекции();
	
	СтавкиНДС = Новый Соответствие();
	СтавкиНДС.Вставить("10", 10); 
	СтавкиНДС.Вставить("18", 18);
	СтавкиНДС.Вставить("20", 20);
	СтавкиНДС.Вставить("0", 0);
	СтавкиНДС.Вставить("10/110", 110);
	СтавкиНДС.Вставить("18/118", 118);
	СтавкиНДС.Вставить("20/120", 120);
	СтавкиНДС.Вставить("none", Неопределено);
	ФискальнаяСтрока = Неопределено;
	
	Если Не ПустаяСтрока(ДанныеXML) Тогда
		ЧтениеXML = Новый ЧтениеXML; 
		ЧтениеXML.УстановитьСтроку(ДанныеXML);
		ЧтениеXML.ПерейтиКСодержимому();
		Если ЧтениеXML.Имя = "CheckPackage" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			
			Пока ЧтениеXML.Прочитать() Цикл
				Если ЧтениеXML.Имя = "Parameters" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда  
					ТипРасчета = ?(ЧтениеXML.ЗначениеАтрибута("PaymentType") <> Неопределено, ЧтениеXML.ЗначениеАтрибута("PaymentType"), ЧтениеXML.ЗначениеАтрибута("OperationType"));
					ОбщиеПараметры.ТипРасчета = МенеджерОборудованияКлиентСервер.РасчетДенежнымиСредствамиПоКоду(Число(ТипРасчета));
					
					СистемаНалогообложения = ?(ЧтениеXML.ЗначениеАтрибута("TaxVariant") <> Неопределено, ЧтениеXML.ЗначениеАтрибута("TaxVariant"), ЧтениеXML.ЗначениеАтрибута("TaxationSystem"));
					ОбщиеПараметры.СистемаНалогообложения = МенеджерОборудованияКлиентСервер.СистемаНалогообложенияККТПоКоду(Число(СистемаНалогообложения));
					
					ОбщиеПараметры.Кассир = ЧтениеXML.ЗначениеАтрибута("CashierName");
					ОбщиеПараметры.КассирИНН = ЧтениеXML.ЗначениеАтрибута("CashierVATIN");
					ОбщиеПараметры.ОтправительEmail = ЧтениеXML.ЗначениеАтрибута("SenderEmail");
					ОбщиеПараметры.ПокупательEmail = ЧтениеXML.ЗначениеАтрибута("CustomerEmail");
					ОбщиеПараметры.ПокупательНомер = ЧтениеXML.ЗначениеАтрибута("CustomerPhone");
					ОбщиеПараметры.ПризнакАгента = ЧтениеXML.ЗначениеАтрибута("AgentSign");
					ОбщиеПараметры.АдресРасчетов = ЧтениеXML.ЗначениеАтрибута("AddressSettle");
					ОбщиеПараметры.МестоРасчетов = ЧтениеXML.ЗначениеАтрибута("PlaceSettle");
					ОбщиеПараметры.ДополнительныйРеквизит = ЧтениеXML.ЗначениеАтрибута("AdditionalAttribute");
					Если ЧтениеXML.ЗначениеАтрибута("AgentSign") <> Неопределено Тогда  
						ПризнакАгента = Число(ЧтениеXML.ЗначениеАтрибута("AgentSign"));
						ОбщиеПараметры.ПризнакАгента = МенеджерОборудованияКлиентСервер.ПризнакАгентаПоКоду(ПризнакАгента);
					КонецЕсли;
				КонецЕсли;
				
				Если ЧтениеXML.Имя = "PurveyorData" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда   
					ОбщиеПараметры.ДанныеПоставщика.Наименование = ЗначениеXMLАтрибута(ЧтениеXML, "PurveyorName");
					ОбщиеПараметры.ДанныеПоставщика.Телефон = ЗначениеXMLАтрибута(ЧтениеXML, "PurveyorPhone");
					ОбщиеПараметры.ДанныеПоставщика.ИНН = ЗначениеXMLАтрибута(ЧтениеXML, "PurveyorVATIN");
				КонецЕсли;
				
				Если ЧтениеXML.Имя = "AgentData" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда   
					ДанныеАгента = ОбщиеПараметры.ДанныеАгента;
					ДанныеАгента.ПлатежныйАгент.Операция = ЗначениеXMLАтрибута(ЧтениеXML, "PayingAgentOperation");
					ДанныеАгента.ПлатежныйАгент.Телефон  = ЗначениеXMLАтрибута(ЧтениеXML, "PayingAgentPhone");
					ДанныеАгента.ОператорПеревода.Телефон      = ЗначениеXMLАтрибута(ЧтениеXML, "MoneyTransferOperatorPhone");
					ДанныеАгента.ОператорПеревода.Наименование = ЗначениеXMLАтрибута(ЧтениеXML, "MoneyTransferOperatorName");
					ДанныеАгента.ОператорПеревода.Адрес        = ЗначениеXMLАтрибута(ЧтениеXML, "MoneyTransferOperatorAddress");
					ДанныеАгента.ОператорПеревода.ИНН          = ЗначениеXMLАтрибута(ЧтениеXML, "MoneyTransferOperatorVATIN");
					ДанныеАгента.ОператорПоПриемуПлатежей.Телефон = ЗначениеXMLАтрибута(ЧтениеXML, "ReceivePaymentsOperatorPhone");
				КонецЕсли;
		
				Если ЧтениеXML.Имя = "Positions" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда  
					
					Пока ЧтениеXML.Прочитать() И НЕ (ЧтениеXML.Имя = "Positions" И ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента) Цикл
						
						Если ЧтениеXML.Имя = "FiscalString" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда  
							ФискальнаяСтрока = МенеджерОборудованияКлиентСервер.ПараметрыФискальнойСтрокиЧека();
							
							ФискальнаяСтрока.Наименование =  ЗначениеXMLАтрибута(ЧтениеXML, "Name");
							ФискальнаяСтрока.Количество   =  Число(ЗначениеXMLАтрибута(ЧтениеXML, "Quantity", , 0));
							
							ФискальнаяСтрока.ЦенаСоСкидками =  Число(ЗначениеXMLАтрибута(ЧтениеXML, "PriceWithDiscount", , 0));
							ФискальнаяСтрока.Сумма          =  Число(ЗначениеXMLАтрибута(ЧтениеXML, "AmountWithDiscount", "SumWithDiscount", 0));
							СуммаСкидок = ЗначениеXMLАтрибута(ЧтениеXML, "DiscountAmount", "DiscountSum", 0);
							Если Не ПустаяСтрока(СуммаСкидок) Тогда
								ФискальнаяСтрока.СуммаСкидок  =  Число(СуммаСкидок);
							КонецЕсли;
							ФискальнаяСтрока.НомерСекции = Число(ЗначениеXMLАтрибута(ЧтениеXML, "Department", , 0));
							
							СтавкаНДС = ЗначениеXMLАтрибута(ЧтениеXML, "VATRate", "Tax");
							ФискальнаяСтрока.СтавкаНДС = СтавкиНДС.Получить(СтавкаНДС);
							ФискальнаяСтрока.СуммаНДС  =  Число(ЗначениеXMLАтрибута(ЧтениеXML, "VATAmount", "TaxSum", 0));
							
							ПризнакСпособаРасчета = Число(ЗначениеXMLАтрибута(ЧтениеXML, "SignMethodCalculation", "PaymentMethod", 0));
							ФискальнаяСтрока.ПризнакСпособаРасчета =  МенеджерОборудованияКлиентСервер.ПризнакСпособаРасчетаПоКоду(ПризнакСпособаРасчета);
							ПризнакПредметаРасчета = Число(ЗначениеXMLАтрибута(ЧтениеXML, "SignCalculationObject", "CalculationSubject", 0));
							ФискальнаяСтрока.ПризнакПредметаРасчета =  МенеджерОборудованияКлиентСервер.ПризнакПредметаРасчетаПоКоду(ПризнакПредметаРасчета);
							
							Если ЧтениеXML.ЗначениеАтрибута("SignSubjectCalculationAgent") <> Неопределено Тогда  
								ПризнакАгента = Число(ЧтениеXML.ЗначениеАтрибута("SignSubjectCalculationAgent"));
								ФискальнаяСтрока.ПризнакАгентаПоПредметуРасчета = МенеджерОборудованияКлиентСервер.ПризнакАгентаПоКоду(ПризнакАгента);
							КонецЕсли;
							
							ФискальнаяСтрока.КодСтраныПроисхожденияТовара = ЗначениеXMLАтрибута(ЧтениеXML, "CountryOfOrigin");
							ФискальнаяСтрока.НомерТаможеннойДекларации = ЗначениеXMLАтрибута(ЧтениеXML, "CustomsDeclaration");
							
							СуммаАкциза = ЗначениеXMLАтрибута(ЧтениеXML, "ExciseAmount");
							Если НЕ ПустаяСтрока(СуммаАкциза) Тогда
								ФискальнаяСтрока.СуммаАкциза = Число(СуммаАкциза);
							КонецЕсли;
							
							ОбщиеПараметры.ПозицииЧека.Добавить(ФискальнаяСтрока);
						КонецЕсли;
						
						Если ЧтениеXML.Имя = "AgentData" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда   
							Если ФискальнаяСтрока <> Неопределено Тогда
								ДанныеАгента = ФискальнаяСтрока.ДанныеАгента;
								ДанныеАгента.ПлатежныйАгент.Операция = ЗначениеXMLАтрибута(ЧтениеXML, "PayingAgentOperation");
								ДанныеАгента.ПлатежныйАгент.Телефон  = ЗначениеXMLАтрибута(ЧтениеXML, "PayingAgentPhone");
								ДанныеАгента.ОператорПеревода.Телефон      = ЗначениеXMLАтрибута(ЧтениеXML, "MoneyTransferOperatorPhone");
								ДанныеАгента.ОператорПеревода.Наименование = ЗначениеXMLАтрибута(ЧтениеXML, "MoneyTransferOperatorName");
								ДанныеАгента.ОператорПеревода.Адрес        = ЗначениеXMLАтрибута(ЧтениеXML, "MoneyTransferOperatorAddress");
								ДанныеАгента.ОператорПеревода.ИНН          = ЗначениеXMLАтрибута(ЧтениеXML, "MoneyTransferOperatorVATIN");
								ДанныеАгента.ОператорПоПриемуПлатежей.Телефон = ЗначениеXMLАтрибута(ЧтениеXML, "ReceivePaymentsOperatorPhone");
							КонецЕсли;
						КонецЕсли;
						
						Если ЧтениеXML.Имя = "PurveyorData" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда   
							Если ФискальнаяСтрока <> Неопределено Тогда
								ФискальнаяСтрока.ДанныеПоставщика.Наименование = ЗначениеXMLАтрибута(ЧтениеXML, "PurveyorName");
								ФискальнаяСтрока.ДанныеПоставщика.Телефон = ЗначениеXMLАтрибута(ЧтениеXML, "PurveyorPhone");
								ФискальнаяСтрока.ДанныеПоставщика.ИНН = ЗначениеXMLАтрибута(ЧтениеXML, "PurveyorVATIN");
							КонецЕсли;
						КонецЕсли;
						
						Если ЧтениеXML.Имя = "GoodCodeData" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда   
							Если ФискальнаяСтрока <> Неопределено Тогда
								ФискальнаяСтрока.ДанныеКодаТоварнойНоменклатуры.ГлобальныйИдентификаторТорговойЕдиницы = ЗначениеXMLАтрибута(ЧтениеXML, "GTIN");
								ФискальнаяСтрока.ДанныеКодаТоварнойНоменклатуры.КонтрольныйИдентификационныйЗнак = ЗначениеXMLАтрибута(ЧтениеXML, "Stamp");
								ФискальнаяСтрока.ДанныеКодаТоварнойНоменклатуры.СерийныйНомер = ЗначениеXMLАтрибута(ЧтениеXML, "SerialNumber");
								ТипМаркировки = ЗначениеXMLАтрибута(ЧтениеXML, "StampType");
								ФискальнаяСтрока.ДанныеКодаТоварнойНоменклатуры.ТипМаркировки = МенеджерОборудованияКлиентСервер.ТипМаркировкиККТПоКоду(ТипМаркировки);
							КонецЕсли
						КонецЕсли;
						
						Если ЧтениеXML.Имя = "TextString" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда  
							Текст = ЗначениеXMLАтрибута(ЧтениеXML, "Text");
							ТекстоваяСтрока = МенеджерОборудованияКлиентСервер.ПараметрыТекстовойСтрокиЧека(Текст);
							ОбщиеПараметры.ПозицииЧека.Добавить(ТекстоваяСтрока);
						КонецЕсли;
						
					КонецЦикла;  
					
				КонецЕсли;
				
				Если ЧтениеXML.Имя = "Payments" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда  
					
					СуммаНаличные   = Число(ЗначениеXMLАтрибута(ЧтениеXML, "Cash", , 0));
					СуммаЭлектронно = Число(ЗначениеXMLАтрибута(ЧтениеXML, "ElectronicPayment", , 0));
					СуммаПостоплата = Число(ЗначениеXMLАтрибута(ЧтениеXML, "Credit", "PostPayment", 0));
					СуммаПредоплата = Число(ЗначениеXMLАтрибута(ЧтениеXML, "AdvancePayment", "PrePayment", 0));
					СуммаПредоставление = Число(ЗначениеXMLАтрибута(ЧтениеXML, "CashProvision", "Barter", 0));
					
					Если СуммаНаличные > 0 Тогда
						СтрокаОплаты = Новый Структура();
						СтрокаОплаты.Вставить("ТипОплаты", ПредопределенноеЗначение("Перечисление.ТипыОплатыККТ.Наличные"));
						СтрокаОплаты.Вставить("Сумма", СуммаНаличные);
						ОбщиеПараметры.ТаблицаОплат.Добавить(СтрокаОплаты);
					КонецЕсли;
					
					Если СуммаЭлектронно > 0 Тогда
						СтрокаОплаты = Новый Структура();
						СтрокаОплаты.Вставить("ТипОплаты", ПредопределенноеЗначение("Перечисление.ТипыОплатыККТ.Электронно"));
						СтрокаОплаты.Вставить("Сумма", СуммаЭлектронно);
						ОбщиеПараметры.ТаблицаОплат.Добавить(СтрокаОплаты);
					КонецЕсли;
					
					Если СуммаПостоплата > 0 Тогда
						СтрокаОплаты = Новый Структура();
						СтрокаОплаты.Вставить("ТипОплаты", ПредопределенноеЗначение("Перечисление.ТипыОплатыККТ.Постоплата"));
						СтрокаОплаты.Вставить("Сумма", СуммаПостоплата);
						ОбщиеПараметры.ТаблицаОплат.Добавить(СтрокаОплаты);
					КонецЕсли;
					
					Если СуммаПредоплата > 0 Тогда
						СтрокаОплаты = Новый Структура();
						СтрокаОплаты.Вставить("ТипОплаты", ПредопределенноеЗначение("Перечисление.ТипыОплатыККТ.Предоплата"));
						СтрокаОплаты.Вставить("Сумма", СуммаПредоплата);
						ОбщиеПараметры.ТаблицаОплат.Добавить(СтрокаОплаты);
					КонецЕсли;
					
					Если СуммаПредоставление > 0 Тогда
						СтрокаОплаты = Новый Структура();
						СтрокаОплаты.Вставить("ТипОплаты", ПредопределенноеЗначение("Перечисление.ТипыОплатыККТ.ВстречноеПредоставление"));
						СтрокаОплаты.Вставить("Сумма", СуммаПредоставление);
						ОбщиеПараметры.ТаблицаОплат.Добавить(СтрокаОплаты);
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла; 
			
		ИначеЕсли ЧтениеXML.Имя = "CheckCorrectionPackage" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			Пока ЧтениеXML.Прочитать() Цикл
				Если ЧтениеXML.Имя = "Parameters" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда  
					
					ТипРасчета = ЧтениеXML.ЗначениеАтрибута("PaymentType");
					ОбщиеПараметры.ТипРасчета = МенеджерОборудованияКлиентСервер.РасчетДенежнымиСредствамиПоКоду(Число(ТипРасчета));
					
					ОбщиеПараметры.Кассир = ЧтениеXML.ЗначениеАтрибута("CashierName");
					ОбщиеПараметры.КассирИНН = ЧтениеXML.ЗначениеАтрибута("CashierVATIN");
					
					СистемаНалогообложения = ЧтениеXML.ЗначениеАтрибута("TaxVariant");
					ОбщиеПараметры.СистемаНалогообложения = МенеджерОборудованияКлиентСервер.СистемаНалогообложенияККТПоКоду(Число(СистемаНалогообложения));
					
					СуммаДокумента  = Число(ЗначениеXMLАтрибута(ЧтениеXML, "Sum"   , , 0));
					СуммаБезНДС = Число(ЗначениеXMLАтрибута(ЧтениеXML, "SumTAXNone", , 0));
					СуммаНДС0   = Число(ЗначениеXMLАтрибута(ЧтениеXML, "SumTAX0"   , , 0));
					
					СуммаНДС10  = Число(ЗначениеXMLАтрибута(ЧтениеXML, "SumTAX10"  , , 0));
					СуммаНДС18  = Число(ЗначениеXMLАтрибута(ЧтениеXML, "SumTAX18"  , , 0));
					СуммаНДС20  = Число(ЗначениеXMLАтрибута(ЧтениеXML, "SumTAX20"  , , 0));
					СуммаНДС110 = Число(ЗначениеXMLАтрибута(ЧтениеXML, "SumTAX110" , , 0));
					СуммаНДС118 = Число(ЗначениеXMLАтрибута(ЧтениеXML, "SumTAX118" , , 0));
					СуммаНДС120 = Число(ЗначениеXMLАтрибута(ЧтениеXML, "SumTAX120" , , 0));
					
					Если СуммаБезНДС > 0 Тогда
						ФискальнаяСтрока = МенеджерОборудованияКлиентСервер.ПараметрыФискальнойСтрокиЧека();
						ФискальнаяСтрока.Наименование = НСтр("ru='Фискальная позиция без НДС'");
						ФискальнаяСтрока.Количество   = 1;
						ФискальнаяСтрока.ЦенаСоСкидками = СуммаБезНДС;
						ФискальнаяСтрока.Сумма          = ФискальнаяСтрока.ЦенаСоСкидками;
						ФискальнаяСтрока.СтавкаНДС      = Неопределено;
						ОбщиеПараметры.ПозицииЧека.Добавить(ФискальнаяСтрока);
					КонецЕсли;
					
					Если СуммаНДС0 > 0 Тогда
						ФискальнаяСтрока = МенеджерОборудованияКлиентСервер.ПараметрыФискальнойСтрокиЧека();
						ФискальнаяСтрока.Наименование = НСтр("ru='Фискальная позиция НДС 0%'");
						ФискальнаяСтрока.Количество   = 1;
						ФискальнаяСтрока.ЦенаСоСкидками = СуммаНДС0;
						ФискальнаяСтрока.Сумма          = ФискальнаяСтрока.ЦенаСоСкидками;
						ФискальнаяСтрока.СтавкаНДС      = 0;
						ОбщиеПараметры.ПозицииЧека.Добавить(ФискальнаяСтрока);
					КонецЕсли;
					
					Если СуммаНДС10 > 0 Тогда
						ФискальнаяСтрока = МенеджерОборудованияКлиентСервер.ПараметрыФискальнойСтрокиЧека();
						ФискальнаяСтрока.Наименование = НСтр("ru='Фискальная позиция НДС 10%'");
						ФискальнаяСтрока.Количество   = 1;
						ФискальнаяСтрока.ЦенаСоСкидками = Мин(СуммаНДС10 * 110 / 10, СуммаДокумента);
						ФискальнаяСтрока.Сумма          = ФискальнаяСтрока.ЦенаСоСкидками;
						ФискальнаяСтрока.СтавкаНДС      = 10;
						ОбщиеПараметры.ПозицииЧека.Добавить(ФискальнаяСтрока);
					КонецЕсли;
					
					Если СуммаНДС20 > 0 Тогда
						ФискальнаяСтрока = МенеджерОборудованияКлиентСервер.ПараметрыФискальнойСтрокиЧека();
						ФискальнаяСтрока.Наименование = НСтр("ru='Фискальная позиция НДС 20%'");
						ФискальнаяСтрока.Количество   = 1;
						ФискальнаяСтрока.ЦенаСоСкидками = Мин(СуммаНДС20 * 120 / 20, СуммаДокумента);
						ФискальнаяСтрока.Сумма          = ФискальнаяСтрока.ЦенаСоСкидками;
						ФискальнаяСтрока.СтавкаНДС      = 20;
						ОбщиеПараметры.ПозицииЧека.Добавить(ФискальнаяСтрока);
					КонецЕсли;
					
					Если СуммаНДС18 > 0 Тогда
						ФискальнаяСтрока = МенеджерОборудованияКлиентСервер.ПараметрыФискальнойСтрокиЧека();
						ФискальнаяСтрока.Наименование = НСтр("ru='Фискальная позиция НДС 18%'");
						ФискальнаяСтрока.Количество   = 1;
						ФискальнаяСтрока.ЦенаСоСкидками = Мин(СуммаНДС18 * 118 / 18, СуммаДокумента);
						ФискальнаяСтрока.Сумма          = ФискальнаяСтрока.ЦенаСоСкидками;
						ФискальнаяСтрока.СтавкаНДС      = 18;
						ОбщиеПараметры.ПозицииЧека.Добавить(ФискальнаяСтрока);
					КонецЕсли;
		
					Если СуммаНДС110 > 0 Тогда
						ФискальнаяСтрока = МенеджерОборудованияКлиентСервер.ПараметрыФискальнойСтрокиЧека();
						ФискальнаяСтрока.Наименование = НСтр("ru='Фискальная позиция НДС 10/110'");
						ФискальнаяСтрока.Количество   = 1;
						ФискальнаяСтрока.ЦенаСоСкидками = Мин(СуммаНДС110 * 110 / 10, СуммаДокумента);
						ФискальнаяСтрока.Сумма          = ФискальнаяСтрока.ЦенаСоСкидками;
						ФискальнаяСтрока.СтавкаНДС      = 110;
						ОбщиеПараметры.ПозицииЧека.Добавить(ФискальнаяСтрока);
					КонецЕсли;
					
					Если СуммаНДС120 > 0 Тогда
						ФискальнаяСтрока = МенеджерОборудованияКлиентСервер.ПараметрыФискальнойСтрокиЧека();
						ФискальнаяСтрока.Наименование = НСтр("ru='Фискальная позиция НДС 20/120'");
						ФискальнаяСтрока.Количество   = 1;
						ФискальнаяСтрока.ЦенаСоСкидками = Мин(СуммаНДС120 * 120 / 20, СуммаДокумента);
						ФискальнаяСтрока.Сумма          = ФискальнаяСтрока.ЦенаСоСкидками;
						ФискальнаяСтрока.СтавкаНДС      = 120;
						ОбщиеПараметры.ПозицииЧека.Добавить(ФискальнаяСтрока);
					КонецЕсли;
					
					Если СуммаНДС118 > 0 Тогда
						ФискальнаяСтрока = МенеджерОборудованияКлиентСервер.ПараметрыФискальнойСтрокиЧека();
						ФискальнаяСтрока.Наименование = НСтр("ru='Фискальная позиция НДС 18/118'");
						ФискальнаяСтрока.Количество   = 1;
						ФискальнаяСтрока.ЦенаСоСкидками = Мин(СуммаНДС118 * 118 / 18, СуммаДокумента);
						ФискальнаяСтрока.Сумма          = ФискальнаяСтрока.ЦенаСоСкидками;
						ФискальнаяСтрока.СтавкаНДС      = 118;
						ОбщиеПараметры.ПозицииЧека.Добавить(ФискальнаяСтрока);
					КонецЕсли;
					
					СуммаПозиций = 0;
					Для Каждого ПозицияЧека Из ОбщиеПараметры.ПозицииЧека Цикл
						СуммаПозиций = СуммаПозиций + ПозицияЧека.Сумма;
					КонецЦикла;
					
					Если СуммаПозиций > СуммаДокумента Тогда
						Пока СуммаПозиций > СуммаДокумента Цикл
							Разница = Окр(СуммаДокумента - СуммаПозиций);
							Для Каждого ПозицияЧека Из ОбщиеПараметры.ПозицииЧека Цикл
								Если ПозицияЧека.СтавкаНДС <> 0 И ПозицияЧека.СтавкаНДС <> Неопределено Тогда
									ПозицияЧека.Сумма = ПозицияЧека.Сумма - 0.01;
									ПозицияЧека.ЦенаСоСкидками = ПозицияЧека.Сумма;
									СуммаПозиций = 0;
									Для Каждого ПозицияЧека Из ОбщиеПараметры.ПозицииЧека Цикл
										СуммаПозиций = СуммаПозиций + ПозицияЧека.Сумма;
									КонецЦикла;
								КонецЕсли;
							КонецЦикла;
						КонецЦикла;
					Иначе
						Пока СуммаДокумента > СуммаПозиций Цикл
							Разница = Окр(СуммаДокумента - СуммаПозиций);
							Для Каждого ПозицияЧека Из ОбщиеПараметры.ПозицииЧека Цикл
								Если ПозицияЧека.СтавкаНДС <> 0 И ПозицияЧека.СтавкаНДС <> Неопределено Тогда
									ПозицияЧека.Сумма = ПозицияЧека.Сумма + 0.01;
									ПозицияЧека.ЦенаСоСкидками = ПозицияЧека.Сумма;
									СуммаПозиций = 0;
									Для Каждого ПозицияЧека Из ОбщиеПараметры.ПозицииЧека Цикл
										СуммаПозиций = СуммаПозиций + ПозицияЧека.Сумма;
									КонецЦикла;
								КонецЕсли;
							КонецЦикла;
						КонецЦикла;
					КонецЕсли;
					
				КонецЕсли;
				
				Если ЧтениеXML.Имя = "Payments" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда  
					
					СуммаНаличные   = Число(ЗначениеXMLАтрибута(ЧтениеXML, "Cash", , 0));
					СуммаЭлектронно = Число(ЗначениеXMLАтрибута(ЧтениеXML, "ElectronicPayment", , 0));
					СуммаПостоплата = Число(ЗначениеXMLАтрибута(ЧтениеXML, "Credit", "PostPayment", 0));
					СуммаПредоплата = Число(ЗначениеXMLАтрибута(ЧтениеXML, "AdvancePayment", "PrePayment", 0));
					СуммаПредоставление = Число(ЗначениеXMLАтрибута(ЧтениеXML, "CashProvision", "Barter", 0));
					
					Если СуммаНаличные > 0 Тогда
						СтрокаОплаты = Новый Структура();
						СтрокаОплаты.Вставить("ТипОплаты", ПредопределенноеЗначение("Перечисление.ТипыОплатыККТ.Наличные"));
						СтрокаОплаты.Вставить("Сумма", СуммаНаличные);
						ОбщиеПараметры.ТаблицаОплат.Добавить(СтрокаОплаты);
					КонецЕсли;
					
					Если СуммаЭлектронно > 0 Тогда
						СтрокаОплаты = Новый Структура();
						СтрокаОплаты.Вставить("ТипОплаты", ПредопределенноеЗначение("Перечисление.ТипыОплатыККТ.Электронно"));
						СтрокаОплаты.Вставить("Сумма", СуммаЭлектронно);
						ОбщиеПараметры.ТаблицаОплат.Добавить(СтрокаОплаты);
					КонецЕсли;
					
					Если СуммаПостоплата > 0 Тогда
						СтрокаОплаты = Новый Структура();
						СтрокаОплаты.Вставить("ТипОплаты", ПредопределенноеЗначение("Перечисление.ТипыОплатыККТ.Постоплата"));
						СтрокаОплаты.Вставить("Сумма", СуммаПостоплата);
						ОбщиеПараметры.ТаблицаОплат.Добавить(СтрокаОплаты);
					КонецЕсли;
					
					Если СуммаПредоплата > 0 Тогда
						СтрокаОплаты = Новый Структура();
						СтрокаОплаты.Вставить("ТипОплаты", ПредопределенноеЗначение("Перечисление.ТипыОплатыККТ.Предоплата"));
						СтрокаОплаты.Вставить("Сумма", СуммаПредоплата);
						ОбщиеПараметры.ТаблицаОплат.Добавить(СтрокаОплаты);
					КонецЕсли;
					
					Если СуммаПредоставление > 0 Тогда
						СтрокаОплаты = Новый Структура();
						СтрокаОплаты.Вставить("ТипОплаты", ПредопределенноеЗначение("Перечисление.ТипыОплатыККТ.ВстречноеПредоставление"));
						СтрокаОплаты.Вставить("Сумма", СуммаПредоставление);
						ОбщиеПараметры.ТаблицаОплат.Добавить(СтрокаОплаты);
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла; 
		КонецЕсли;
		
	КонецЕсли;
		
	Возврат ОбщиеПараметры;
	
КонецФункции

// Возвращает Истина, если "функциональная" подсистема существует в конфигурации.
// Предназначена для реализации вызова необязательной подсистемы (условного вызова).
//
// У "функциональной" подсистемы снят флажок "Включать в командный интерфейс".
//
// Параметры:
//  ПолноеИмяПодсистемы - Строка - полное имя объекта метаданных подсистема
//                        без слов "Подсистема." и с учетом регистра символов.
//                        Например: "СтандартныеПодсистемы.ВариантыОтчетов".
//
// Пример:
//
//  Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ВариантыОтчетов") Тогда
//  	МодульВариантыОтчетов = ОбщегоНазначения.ОбщийМодуль("ВариантыОтчетов");
//  	МодульВариантыОтчетов.<Имя метода>();
//  КонецЕсли;
//
// Возвращаемое значение:
//  Булево.
//
Функция ПодсистемаСуществует(ПолноеИмяПодсистемы) Экспорт
	
	ИменаПодсистем = СтандартныеПодсистемыПовтИсп.ИменаПодсистем();
	Возврат ИменаПодсистем.Получить(ПолноеИмяПодсистемы) <> Неопределено;
	
КонецФункции

// Возвращает Истина, если используется подсистемы фискальных устройств и эти подсистемы существует в конфигурации.
// Предназначена для реализации вызова необязательной подсистемы (условного вызова).
//
// У хотя бы одной "функциональной" подсистемы включен флажок "Включать в командный интерфейс".
//
// Возвращаемое значение:
//  Булево.
//
Функция ИспользуетсяПодсистемыФискальныхУстройств() Экспорт
	
	Результат = ОбщегоНазначения.ПодсистемаСуществует("ПодключаемоеОборудование.ККТ")
		Или ОбщегоНазначения.ПодсистемаСуществует("ПодключаемоеОборудование.ФискальныеРегистраторы")
		Или ОбщегоНазначения.ПодсистемаСуществует("ПодключаемоеОборудование.ПринтерЧеков");
	Возврат Результат;
	
КонецФункции

// Возвращает Истина, если используется подсистема Офлайн оборудование и эта подсистемы существует в конфигурации.
// Предназначена для реализации вызова необязательной подсистемы (условного вызова).
//
// Возвращаемое значение:
//  Булево.
//
Функция ИспользуетсяПодсистемаОфлайнОборудования() Экспорт
	
	Результат = ОбщегоНазначения.ПодсистемаСуществует("ПодключаемоеОборудование.ОфлайнОборудование");
	
	Возврат Результат;
	
КонецФункции

// Конец области "Программный интерфейс ККТ"

Функция ВидимостьЭлементовОтправкиЧека() Экспорт
	Возврат глЗначениеПеременной("ОтправкаЭлектронныхЧековПослеПробития");
КонецФункции

// Конец области "Программный интерфейс"

// Область СлужебныеПроцедурыИФункции

Процедура ДобавитьКодыТоваров(ТЗ, Элемент, Уровень = "Товар")
	
	Если Уровень = "Товар" Тогда
		
		Если Элемент.ИмеетХарактеристики Тогда
			
			Для Каждого ТекХарактеристика Из Элемент.Характеристики Цикл
				ДобавитьКодыТоваров(ТЗ, ТекХарактеристика, "Характеристика");
			КонецЦикла;
			
		ИначеЕсли Элемент.ИмеетУпаковки Тогда
			
			Для Каждого ТекУпаковка Из Элемент.Упаковки Цикл
				ДобавитьКодыТоваров(ТЗ, ТекУпаковка, "Упаковка");
			КонецЦикла;
			
		Иначе
			
			ДобавитьЭлементВКоллекцию(Элемент, ТЗ);
			
		КонецЕсли;
		
	ИначеЕсли Уровень = "Характеристика" Тогда
		
		Если Элемент.ИмеетУпаковки Тогда
			
			Для Каждого ТекУпаковка Из Элемент.Упаковки Цикл
				ДобавитьКодыТоваров(ТЗ, ТекУпаковка, "Упаковка");
			КонецЦикла;
			
		Иначе
			
			ДобавитьЭлементВКоллекцию(Элемент, ТЗ);
			
		КонецЕсли;
		
	ИначеЕсли Уровень = "Упаковка" Тогда
		
		ДобавитьЭлементВКоллекцию(Элемент, ТЗ);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьЭлементВКоллекцию(Элемент, Коллекция)
	
	НоваяСтрока = Коллекция.Добавить();
	
	Попытка
		НоваяСтрока.Код = Число(Элемент.Код);
	Исключение
		НоваяСтрока.Код = 0;
	КонецПопытки;;
	
	НоваяСтрока.Количество = 1;
	
КонецПроцедуры

// Для внутреннего использования
//
Функция ПолучитьСтатусПоследнейСмены(ИдентификаторУстройства) Экспорт
	
	Если ИспользуетсяПодсистемыФискальныхУстройств() Тогда
		МодульКассовыеСменыВызовСервера = ОбщегоНазначения.ОбщийМодуль("КассовыеСменыВызовСервера");
		Возврат МодульКассовыеСменыВызовСервера.СтатусПоследнейСмены(ИдентификаторУстройства);
	Иначе
		ВызватьИсключение НСтр("ru='Выполнение команды невозможно, поскольку подсистемы ККТ, ФР, Принтер чеков недоступны.'");
	КонецЕсли;
	
КонецФункции

// Для внутреннего использования
///
Функция ТребуетсяЗакрытиеСмены(ИдентификаторУстройства) Экспорт
	
	Если ИспользуетсяПодсистемыФискальныхУстройств() Тогда
			МодульКассовыеСменыВызовСервера = ОбщегоНазначения.ОбщийМодуль("КассовыеСменыВызовСервера");
			Если МодульКассовыеСменыВызовСервера.ОписаниеПоследнейКассовойСмены(ИдентификаторУстройства) = Неопределено
				И ПолучитьТипПодключаемогоОборудования(ИдентификаторУстройства) = ПредопределенноеЗначение("Перечисление.ТипыПодключаемогоОборудования.ККТ") Тогда
				Возврат Истина;
		Иначе
			Возврат Ложь;
		КонецЕсли;
	Иначе
		ВызватьИсключение НСтр("ru='Выполнение команды невозможно, поскольку подсистемы ККТ, ФР, Принтер чеков недоступны.'");
	КонецЕсли;
	
КонецФункции

// Для внутреннего использования
///
Функция НоваяКассоваяСмена(ФискальноеУстройство) Экспорт
	
	Если ИспользуетсяПодсистемыФискальныхУстройств() Тогда
		МодульКассовыеСменыВызовСервера = ОбщегоНазначения.ОбщийМодуль("КассовыеСменыВызовСервера");
		Возврат МодульКассовыеСменыВызовСервера.НоваяКассоваяСмена(ФискальноеУстройство);
	Иначе
		ВызватьИсключение НСтр("ru='Выполнение команды невозможно, поскольку подсистемы ККТ, ФР, Принтер чеков недоступны.'");
	КонецЕсли;
	
КонецФункции

// Для внутреннего использования
///
Функция ОписаниеПоследнейКассовойСмены(ФискальноеУстройство) Экспорт
	
	Если ИспользуетсяПодсистемыФискальныхУстройств() Тогда
		МодульКассовыеСменыВызовСервера = ОбщегоНазначения.ОбщийМодуль("КассовыеСменыВызовСервера");
		Возврат МодульКассовыеСменыВызовСервера.ОписаниеПоследнейКассовойСмены(ФискальноеУстройство);
	Иначе
		ВызватьИсключение НСтр("ru='Выполнение команды невозможно, поскольку подсистемы ККТ, ФР, Принтер чеков недоступны.'");
	КонецЕсли;
	
КонецФункции

// Для внутреннего использования
///
Функция ИнкрементироватьТекущийНомерЧекаККТ(ФискальноеУстройство, КассоваяСмена) Экспорт
	
	Если ИспользуетсяПодсистемыФискальныхУстройств() Тогда
		МодульКассовыеСменыВызовСервера = ОбщегоНазначения.ОбщийМодуль("КассовыеСменыВызовСервера");
		МодульКассовыеСменыВызовСервера.ИнкрементироватьТекущийНомерЧекаККТ(ФискальноеУстройство, КассоваяСмена);
	Иначе
		ВызватьИсключение НСтр("ru='Выполнение команды невозможно, поскольку подсистемы ККТ, ФР, Принтер чеков недоступны.'");
	КонецЕсли;
	
КонецФункции

// Для внутреннего использования
Процедура ПослеВыполненияКомандыФискальнымУстройством(ПараметрыКоманды) Экспорт
	
	Если ИспользуетсяПодсистемыФискальныхУстройств() Тогда
			МодульКассовыеСменыВызовСервера = ОбщегоНазначения.ОбщийМодуль("КассовыеСменыВызовСервера");
			МодульКассовыеСменыВызовСервера.ПослеВыполненияКомандыФискальнымУстройством(ПараметрыКоманды);
	Иначе
		ВызватьИсключение НСтр("ru='Выполнение команды невозможно, поскольку подсистемы ККТ, ФР, Принтер чеков недоступны.'");
	КонецЕсли;
	
КонецПроцедуры

// Выполняет проверку обязательности заполняет тэгов.
// 
Функция ВыполненаПроверкаОбязательностиИПравильностиЗаполненияТэгов(Параметры, ИдентификаторУстройства, ОписаниеОшибки) Экспорт
	
	Если ИспользуетсяПодсистемыФискальныхУстройств() Тогда
		МодульФорматноЛогическийКонтрольВызовСервера = ОбщегоНазначения.ОбщийМодуль("ФорматноЛогическийКонтрольВызовСервера");
		Возврат МодульФорматноЛогическийКонтрольВызовСервера.ВыполненаПроверкаОбязательностиИПравильностиЗаполненияТэгов(Параметры, ИдентификаторУстройства, ОписаниеОшибки);
	Иначе
		ВызватьИсключение НСтр("ru='Выполнение команды невозможно, поскольку подсистемы ККТ, ФР, Принтер чеков недоступны.'");
	КонецЕсли;
	
КонецФункции

// Процедура приводит к формату согласованному с ФНС.
//
Процедура ПривестиДанныеКТребуемомуФормату(ОсновныеПараметры, Отказ, ОписаниеОшибки, ИсправленыОсноныеПараметры) Экспорт
	
	Если ИспользуетсяПодсистемыФискальныхУстройств() Тогда
		МодульФорматноЛогическийКонтрольКлиентСервер = ОбщегоНазначения.ОбщийМодуль("ФорматноЛогическийКонтрольКлиентСервер");
		МодульФорматноЛогическийКонтрольКлиентСервер.ПривестиДанныеКТребуемомуФормату(ОсновныеПараметры, Отказ, ОписаниеОшибки, ИсправленыОсноныеПараметры);
	Иначе
		ВызватьИсключение НСтр("ru='Выполнение команды невозможно, поскольку подсистемы ККТ, ФР, Принтер чеков недоступны.'");
	КонецЕсли;
	
КонецПроцедуры

Функция АдресЭПКонтрагентаПоУмолчанию(Контрагент) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КонтактнаяИнформация.Представление КАК АдресЭлектроннойПочтыКонтрагентаДляОтправкиЧеков
	|ИЗ
	|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|ГДЕ
	|	КонтактнаяИнформация.Объект = &Контрагент
	|	И (ВЫРАЗИТЬ(КонтактнаяИнформация.Представление КАК СТРОКА(1))) <> """"
	|	И КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)
	|	И КонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.АдресЭлектроннойПочтыКонтрагентаДляОтправкиЧеков)";
	
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Возврат Выборка.АдресЭлектроннойПочтыКонтрагентаДляОтправкиЧеков
	КонецЦикла;
	
	Возврат "";
	
КонецФункции // АдресЭПКонтрагентаПоУмолчанию()

Функция ОпределитьПризнакПредметаРасчета(Номенклатура) Экспорт
	
	Если ТипЗнч(Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
		РеквизитыНоменклатуры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Номенклатура, "АлкогольнаяПродукция, Услуга");
	Иначе
		РеквизитыНоменклатуры = Новый Структура("АлкогольнаяПродукция, Услуга", Ложь, Ложь);
	КонецЕсли;
	
	Если РеквизитыНоменклатуры.АлкогольнаяПродукция Тогда
		Результат = ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.ПодакцизныйТовар");
	ИначеЕсли РеквизитыНоменклатуры.Услуга Тогда
		Результат = ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.Услуга");
	Иначе
		Результат = ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.Товар");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПустыеСсылки(Знач ДопустимыеТипы = Неопределено)
	
	Если ДопустимыеТипы = Неопределено Тогда
		ДопустимыеТипы = Новый Массив;
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ДопустимыеТипы, МенеджерОборудованияКлиентСервер.ДопустимыеТипыДокументаРасчетов());
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ДопустимыеТипы, МенеджерОборудованияКлиентСервер.ДопустимыеТипыСделки());
	КонецЕсли;
	
	мСсылок = Новый Массив;
	
	Для Каждого ОписаниеТипа Из ДопустимыеТипы Цикл
		мСсылок.Добавить(Новый(ОписаниеТипа));
	КонецЦикла;
	
	Возврат мСсылок;
	
КонецФункции

// КонецОбласти

// Отправка электронных чеков

Функция УчетнаяЗаписьЭлектроннойПочтыДляОтправкиЧеков() Экспорт
	Возврат Справочники.УчетныеЗаписиЭлектроннойПочты.СистемнаяУчетнаяЗаписьЭлектроннойПочты;
КонецФункции

Процедура ПоставитьЧекВОчередьНаОтправку(ПараметрыЧека) Экспорт
	
	ПривилегированныйРежимБылУстановлен = ПривилегированныйРежим();
	
	УстановитьПривилегированныйРежим(Истина);

	МассивАдресов = ОбщегоНазначенияКлиентСервер.РазобратьСтрокуСПочтовымиАдресами(ПараметрыЧека.ПокупательEmail, Ложь);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	ЭлектронныеЧекиККМ.Источник,
	               |	ЭлектронныеЧекиККМ.ПорядковыйНомер КАК ПорядковыйНомер,
	               |	ЭлектронныеЧекиККМ.ТекстЧека,
	               |	ЭлектронныеЧекиККМ.АдресПолучателя,
	               |	ЭлектронныеЧекиККМ.ДатаПостановкиВОчередь,
	               |	ЭлектронныеЧекиККМ.ДатаОтправки,
	               |	ЭлектронныеЧекиККМ.ОписаниеОшибки
	               |ИЗ
	               |	РегистрСведений.ЭлектронныеЧекиККМ КАК ЭлектронныеЧекиККМ
	               |ГДЕ
	               |	ЭлектронныеЧекиККМ.Источник = &Источник
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ПорядковыйНомер УБЫВ";
	Запрос.УстановитьПараметр("Источник", ПараметрыЧека.ДокументОснование);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ПорядковыйНомерЧека = Выборка.ПорядковыйНомер + 1;
	Иначе
		ПорядковыйНомерЧека = 1;
	КонецЕсли;
	
	Для Каждого АдресЭП Из МассивАдресов Цикл
		
		АдресПолучателя = "";
		Если Не АдресЭП.Свойство("Адрес", АдресПолучателя) ИЛИ ПустаяСтрока(АдресПолучателя) Тогда
			Продолжить;
		КонецЕсли;
		
		нзЭЧ = РегистрыСведений.ЭлектронныеЧекиККМ.СоздатьНаборЗаписей();
		нзЭЧ.Отбор.Источник.Значение = ПараметрыЧека.ДокументОснование;
		нзЭЧ.Отбор.Источник.Использование = Истина;
		нзЭЧ.Отбор.ПорядковыйНомер.Значение = ПорядковыйНомерЧека;
		нзЭЧ.Отбор.ПорядковыйНомер.Использование = Истина;
		ЭлектронныйЧек = нзЭЧ.Добавить();
		ЭлектронныйЧек.Источник = ПараметрыЧека.ДокументОснование;
		ЭлектронныйЧек.ПорядковыйНомер = ПорядковыйНомерЧека;
		ЭлектронныйЧек.ТекстЧека = ПараметрыЧека.ТекстЭлектронногоЧека;
		ЭлектронныйЧек.АдресПолучателя = АдресПолучателя;
		ЭлектронныйЧек.ДатаПостановкиВОчередь = ТекущаяДата();
		
		Попытка
			нзЭЧ.Записать();
		Исключение
			Инфо = ИнформацияОбОшибке();
			ЗаписьЖурналаРегистрации("ПостановкаЧекаВОчередьНаОтправку", УровеньЖурналаРегистрации.Предупреждение, 
			ПараметрыЧека.ДокументОснование.Метаданные(), ПараметрыЧека.ДокументОснование, Инфо.Описание);
			ПараметрыЧека.Вставить("ОшибкаПостановкиВОчередьНаОтправку");
		КонецПопытки;
		
		ПорядковыйНомерЧека = ПорядковыйНомерЧека + 1;
		
	КонецЦикла;

	Если Не ПривилегированныйРежимБылУстановлен Тогда
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;

КонецПроцедуры
