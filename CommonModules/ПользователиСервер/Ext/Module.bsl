////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции программного интерфейса

// Функция АвторизованныйПользователь возвращает
// текущего пользователя сеанса.
// 
// Возвращаемое значение:
//  СправочникСсылка.Пользователи, СправочникСсылка.ВнешниеПользователи.
// 
Функция АвторизованныйПользователь() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Возврат ПараметрыСеанса.ТекущийПользователь;
	
КонецФункции

// Получает значение параметра сеанса "Текущий пользователь"
//
// Возвращаемое значение:
//  СправочникСсылка.Пользователи
//
Функция ТекущийПользователь() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Возврат ПараметрыСеанса.ТекущийПользователь;
	
КонецФункции

// Функция ЭтоПолноправныйПользовательИБ проверяет,
// является ли полноправным текущий пользователь ИБ или
// пользователь ИБ заданного пользователя (обычного или внешнего).
//
//  Полноправными считается:
// а) пользователь ИБ при пустом списке пользователей ИБ,
//    если основная роль не задана или ПолныеПрава,
// б) пользователь ИБ с ролью ПолныеПрава.
//
//
// Параметры:
//  Пользователь - Неопределено (проверяется текущий пользователь ИБ),
//                 Справочник.Пользователи, Справочник.ВнешниеПользователи
//                 (осуществляется поиск пользователя ИБ по уникальному
//                  идентификатору, заданному в реквизите ИдентификаторПользователяИБ,
//                  если пользователь ИБ не найден, возвращается Ложь).
//
// Возвращаемое значение:
//  Булево.
//
Функция ЭтоПолноправныйПользовательИБ(Пользователь = Неопределено) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	Если ЗначениеЗаполнено(Пользователь) И Пользователь <> АвторизованныйПользователь() Тогда
		ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(ОбщегоНазначения.ПолучитьЗначениеРеквизита(Пользователь, "ИдентификаторПользователяИБ"));
		Если ПользовательИБ = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
	Иначе
		ПользовательИБ = ПользователиИнформационнойБазы.ТекущийПользователь();
	КонецЕсли;
	
	Если ПользовательИБ.УникальныйИдентификатор = ПользователиИнформационнойБазы.ТекущийПользователь().УникальныйИдентификатор Тогда
		
		Если ЗначениеЗаполнено(ПользовательИБ.Имя) Тогда
			
			Возврат РольДоступна("ПолныеПрава") ИЛИ ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(ПользователиИнформационнойБазы.ТекущийПользователь().УникальныйИдентификатор).Роли.Содержит(Метаданные.Роли.ПолныеПрава);
		Иначе
			// Авторизован пустой пользователь - список пользователей пуст,
			// если основная роль пустая - все права разрешены.
			Если Метаданные.ОсновнаяРоль = Неопределено ИЛИ
				 Метаданные.ОсновнаяРоль = Метаданные.Роли.ПолныеПрава Тогда
				
				Возврат Истина;
			Иначе
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
	Иначе
		Возврат ПользовательИБ.Роли.Содержит(Метаданные.Роли.ПолныеПрава);
	КонецЕсли;
	
КонецФункции

// Функция ПолноеИмяНеУказанногоПользователя возвращает
// представление не указанного пользователя, т.е. когда
// список пользователей пуст.
// 
// Возвращаемое значение:
//  Строка.
//
Функция ПолноеИмяНеУказанногоПользователя() Экспорт
	
	Возврат НСтр("ru = '<Не указан>'");
	
КонецФункции

// Возвращает полное имя служебного пользователя для отображения в интерфейсах.
//
// Возвращаемое значение:
//  Строка
//
Функция ПолноеИмяСлужебногоПользователя() Экспорт
	
	Результат = НСтр("ru = '<Служебный пользователь %1>'");
	
	Возврат Результат;
	
КонецФункции

// Возвращает доступность хотя бы одной из указанных ролей или полноправность
// пользователя (текущего или указанного).
//
// Параметры:
//  ИменаРолей   - Строка - имена ролей, разделенные запятыми, доступность которых проверяется.
//
//  Пользователь - Неопределено - проверяется текущий пользователь ИБ;
//                 СправочникСсылка.Пользователи,
//                 СправочникСсылка.ВнешниеПользователи - осуществляется поиск
//                    пользователя ИБ по уникальному идентификатору,
//                    заданному в реквизите ИдентификаторПользователяИБ
//                    Прим.: если пользователь ИБ не найден, возвращается Ложь.
//                 ПользовательИнформационнойБазы - проверяется указанный
//                    пользователь ИБ
//
// Возвращаемое значение:
//  Булево - Истина, если хотя бы одна из указанных ролей доступна,
//           или функция ЭтоПолноправныйПользователь(Пользователь) возвращает Истина.
//
Функция РолиДоступны(Знач ИменаРолей, Пользователь = Неопределено) Экспорт
	
	Если ЭтоПолноправныйПользовательИБ(Пользователь) Тогда
		Возврат Истина;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Пользователь = Неопределено ИЛИ Пользователь = АвторизованныйПользователь() Тогда
		ПользовательИБ = ПользователиИнформационнойБазы.ТекущийПользователь();
		
	ИначеЕсли ТипЗнч(Пользователь) = Тип("ПользовательИнформационнойБазы") Тогда
		ПользовательИБ = Пользователь;
		
	Иначе
		// Указан не текущий пользователь.
		ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(
			ОбщегоНазначения.ПолучитьЗначениеРеквизита(Пользователь, "ИдентификаторПользователяИБ"));
		
		Если ПользовательИБ = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	УказанТекущийПользовательИБ = ПользовательИБ.УникальныйИдентификатор = ПользователиИнформационнойБазы.ТекущийПользователь().УникальныйИдентификатор;
	
	МассивИменРолей = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИменаРолей);
	Для каждого ИмяРоли Из МассивИменРолей Цикл
		
		Если УказанТекущийПользовательИБ Тогда
			Если РольДоступна(СокрЛП(ИмяРоли)) Тогда
				Возврат Истина;
			КонецЕсли;
		Иначе
			Если ПользовательИБ.Роли.Содержит(Метаданные.Роли.Найти(СокрЛП(ИмяРоли))) Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

// Обновляет вспомогательные данные, которые зависят только
// от конфигурации.
// Записывает изменения этих данных по версиям конфигурации
// (если изменения есть), чтобы использовать эти изменения
// при обновлении остальных вспомогательных данных, например,
// в обработчике ОбновитьВспомогательныеДанныеПриОбновленииИБ.
//
Процедура ОбновитьПараметрыРаботыПользователей(ЕстьИзменения = Неопределено, ТолькоПроверка = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТолькоПроверка ИЛИ МонопольныйРежим() Тогда
		СнятьМонопольныйРежим = Ложь;
	Иначе
		СнятьМонопольныйРежим = Истина;
		УстановитьМонопольныйРежим(Истина);
	КонецЕсли;
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("Константа.ПараметрыРаботыПользователей");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	
	НачатьТранзакцию();
	Попытка
		Блокировка.Заблокировать();
		
		Константы.ПараметрыРаботыПользователей.СоздатьМенеджерЗначения().ОбновитьОбщиеПараметры(ЕстьИзменения, ТолькоПроверка);
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		Если СнятьМонопольныйРежим Тогда
			УстановитьМонопольныйРежим(Ложь);
		КонецЕсли;
		ВызватьИсключение;
	КонецПопытки;
	
	Если СнятьМонопольныйРежим Тогда
		УстановитьМонопольныйРежим(Ложь);
	КонецЕсли;
	
КонецПроцедуры

// Проверяет возможность запуска с пустым списком пользователей для клиентских соединений.
//
// Для фоновых заданий, внешних соединений, вызовов веб-сервисов запуск с
// пустым списком пользователей всегда возможен - для пустого пользователя ИБ
// всегда используется пользователь <Не указан> справочника Пользователи.
//
// В случае, когда основная роль пустого пользователя не обеспечивает
// требуемых прав в обработчике фонового задания или веб-сервиса,
// привилегированный режим устанавливается прямо в обработчике.
// Для внешних соединений можно использовать запуск в привилегированном
// режиме (параметр командной строки "/UsePrivilegedMode").
//
Функция ПроверитьВозможностьЗапускаСПустымСпискомПользователейИБ(ВернутьТекстОшибки = Ложь) Экспорт
	
	Если ПривилегированныйРежим() Тогда
		// Выполнен запуск в привилегированном режиме
		// (параметр командной строки "/UsePrivilegedMode").
		//
		// В этом режиме пользователь имеет все права,
		// первого администратора не требуется создавать.
		Возврат "";
	КонецЕсли;
	
	ТекущийПользовательИБ = ПользователиИнформационнойБазы.ТекущийПользователь();
	
	Если ЗначениеЗаполнено(ТекущийПользовательИБ.Имя) Тогда
		// Список пользователей ИБ не пустой.
		Возврат "";
	КонецЕсли;
	
	ОсновнаяРоль = Метаданные.ОсновнаяРоль;
	
	Если ОсновнаяРоль = Неопределено Тогда
		// Основная роль не назначена, поэтому пустой пользователь
		// имеет права, соответствующие привилегированному режиму.
		Возврат "";
	КонецЕсли;
	
	Если ПравоДоступа("Администрирование", Метаданные, ОсновнаяРоль) Тогда
		// Когда основная роль имеет право Администрирование предполагается,
		// что она содержит все права необходимые для администрирования.
		Возврат "";
	КонецЕсли;
	
	Если НЕ ПравоДоступа("Администрирование", Метаданные, ТекущийПользовательИБ) Тогда
		// Список пользователей не пустой.
		//
		// Когда основная роль не содержит право Администрирование,
		// а пустой текущий пользователь содержит право Администрирование,
		// то оно было добавлено принудительно, что возможно только при пустом
		// списке пользователей информационной базы.
		Возврат "";
	КонецЕсли;
	
	ТекстОшибки =
		НСтр("ru = 'Запуск с пустым списком пользователей информационной базы невозможен.
		           |Необходимо добавить администратора системы с двумя ролями
		           |""Администратор системы"", ""Полные права"" и повторить запуск программы от его имени.
		           |
		           |Для перехода к списку пользователей информационной базы необходимо открыть
		           |Конфигуратор и воспользоваться пунктом меню ""Администрирование - Пользователи"".'");
	
	Если НЕ ВернутьТекстОшибки Тогда
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	Возврат ТекстОшибки;
	
КонецФункции

// Возвращает недоступные роли для указанного типа пользователей.
//
// Параметры:
//  ТипПользователей - ПеречислениеСсылка.ТипыПользователей.
//
// Возвращаемое значение:
//  ФиксированноеСоответствие, где Ключ - имя роли, а Значение - Истина.
//
Функция НедоступныеРолиПоТипуПользователей(ТипПользователей) Экспорт
	
	НедоступныеРоли = ПользователиСлужебныйПовтИсп.Параметры(
		).НедоступныеРолиПоТипамПользователей;
	
	Возврат НедоступныеРоли.Получить(ТипПользователей);
	
КонецФункции
