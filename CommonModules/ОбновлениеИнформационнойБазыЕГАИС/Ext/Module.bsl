////////////////////////////////////////////////////////////////////////////////
// Обновление информационной базы Библиотеки Интеграции с ЕГАИС (БЕГАИС).
// 
/////////////////////////////////////////////////////////////////////////////

//#Область ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// Сведения о библиотеке (или конфигурации).

// Заполняет основные сведения о библиотеке или основной конфигурации.
// Библиотека, имя которой имя совпадает с именем конфигурации в метаданных, определяется как основная конфигурация.
// 
// Параметры:
//  Описание - Структура - сведения о библиотеке:
//
//   * Имя                 - Строка - имя библиотеки, например, "СтандартныеПодсистемы".
//   * Версия              - Строка - версия в формате из 4-х цифр, например, "2.1.3.1".
//
//   * ТребуемыеПодсистемы - Массив - имена других библиотек (Строка), от которых зависит данная библиотека.
//                                    Обработчики обновления таких библиотек должны быть вызваны ранее
//                                    обработчиков обновления данной библиотеки.
//                                    При циклических зависимостях или, напротив, отсутствии каких-либо зависимостей,
//                                    порядок вызова обработчиков обновления определяется порядком добавления модулей
//                                    в процедуре ПриДобавленииПодсистем общего модуля
//                                    ПодсистемыКонфигурацииПереопределяемый.
//
Процедура ПриДобавленииПодсистемы(Описание) Экспорт
	
	Описание.Имя    = "БиблиотекаИнтеграцииЕГАИС";
	Описание.Версия = "3.1.0.0";
	
КонецПроцедуры

Функция ВерсияБиблиотеки()
	Возврат "3.1.0.0";
КонецФункции

Функция ОбработчикиОбновления()
	
	Обработчики = ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления();
	ПриДобавленииОбработчиковОбновления(Обработчики);
	Возврат Обработчики;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обработчики обновления информационной базы.

// Добавляет в список процедуры-обработчики обновления данных ИБ
// для всех поддерживаемых версий библиотеки или конфигурации.
// Вызывается перед началом обновления данных ИБ для построения плана обновления.
//
// Параметры:
//  Обработчики - ТаблицаЗначений - описание полей, см. в процедуре.
//                ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления.
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.Версия              = "1.1.0.0";
//  Обработчик.Процедура           = "ОбновлениеИБ.ПерейтиНаВерсию_1_1_0_0";
//  Обработчик.РежимВыполнения     = "Монопольно";
//
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.1.0.10";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыЕГАИС.СоздатьСправкиВТТН";
//	Обработчик.Комментарий = НСтр("ru = 'Создание справок 1 и 2 в ТТН.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.1.0.10";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыЕГАИС.ОбновитьСтатусыОбработкиЕГАИС";
//	Обработчик.Комментарий = НСтр("ru = 'Обновление статусов ТТН.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.1.0.10";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыЕГАИС.ЗаполнитьВидыОперацийТТНВходящей";
//	Обработчик.Комментарий = НСтр("ru = 'Заполнение типов ТТН.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.1.0.10";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыЕГАИС.ЗаполнитьДокументОснованиеВПротоколеОбмена";
//	Обработчик.Комментарий = НСтр("ru = 'Обновление данных в протоколе обмена.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.1.0.10";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыЕГАИС.ЗаполнитьИдентификаторЗапроса";
//	Обработчик.Комментарий = НСтр("ru = 'Обновление данных в протоколе обмена.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.1.0.10";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыЕГАИС.ЗаполнитьТипЗапроса";
//	Обработчик.Комментарий = НСтр("ru = 'Обновление данных в протоколе обмена.'");
	
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.1.1.0";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыЕГАИС.УстановитьПризнакИспользованияОбработкиОтветов";
//	Обработчик.Комментарий = НСтр("ru = 'Включение регламентного задания ""Обработка ответов ЕГАИС"".'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.1.1.0";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыЕГАИС.УстановитьПризнакПроведенияТТН";
//	Обработчик.Комментарий = НСтр("ru = 'Установка признака проведения для входящих ТТН.'");
	
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.2.1.0";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыЕГАИС.ЗаполнитьВидДокумента";
//	Обработчик.Комментарий = НСтр("ru = 'Заполнение вида документа.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.2.1.0";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыЕГАИС.ЗаполнитьТипОрганизацииЕГАИС";
//	Обработчик.Комментарий = НСтр("ru = 'Заполнение типа организации.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.2.1.0";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыЕГАИС.ЗаполнитьПричинуПостановкиНаБаланс";
//	Обработчик.Комментарий = НСтр("ru = 'Заполнение причины постановки на баланс.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.2.1.5";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыЕГАИС.УдалитьДвиженияПоТорговомуЗалу";
//	Обработчик.Комментарий = НСтр("ru = 'Удаление движений по торговому залу.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.2.1.5";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыЕГАИС.ЗаполнитьИдентификаторАктаПостановкиНаБаланс";
//	Обработчик.Комментарий = НСтр("ru = 'Заполнение идентификатора акта постановки на баланс.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.3.0.1";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыЕГАИС.РегистрыНакопленияОстаткиАлкогольнойПродукцииЕГАИСОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Приоритет = 2;
//	Обработчик.Комментарий = НСтр("ru = 'Формирует движения по регистру ""Остатки алкогольной продукции ЕГАИС"".'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.3.0.2";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыЕГАИС.УдалитьОбработчикОбновленияАктаСписания";
//	Обработчик.Комментарий = НСтр("ru='Удаление неиспользуемого обработчика обновления'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.1.2";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыЕГАИС.РегистрыСведенийНастройкиОбменаЕГАИСОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Приоритет = 1;
//	Обработчик.Комментарий = НСтр("ru = 'Обновляет записи регистра сведений ""НастройкиОбменаЕГАИС"": устанавливает таймаут соединения с УТМ 60 секунд.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.1.2";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыЕГАИС.РегистрыСведенийУдалитьПротоколОбменаЕГАИСОбработатьДанныеДляПереходаНаНовуюВерсиюИсходящиеСообщения";
	Обработчик.Приоритет = 1;
//	Обработчик.Комментарий = НСтр("ru = 'Переносит исходящие сообщения протокола обмена с ЕГАИС из регистра ""УдалитьПротоколОбменаЕГАИС"" в справочник ""ЕГАИСПрисоединенныеФайлы"".'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.1.4";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыЕГАИС.СправочникиЕГАИСПрисоединенныеФайлыОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Приоритет = 1;
//	Обработчик.Комментарий = НСтр("ru = 'Пересчитывает статус обработки в справочнике ""ЕГАИСПрисоединенныеФайлы"".'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.1.4";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыЕГАИС.РегистрыСведенийУдалитьПротоколОбменаЕГАИСОбработатьДанныеДляПереходаНаНовуюВерсиюВходящиеСообщения";
	Обработчик.Приоритет = 2;
//	Обработчик.Комментарий = НСтр("ru = 'Переносит входящие сообщения протокола обмена с ЕГАИС из регистра ""УдалитьПротоколОбменаЕГАИС"" в справочник ""ЕГАИСПрисоединенныеФайлы"".'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.1.4";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыЕГАИС.ДокументыАктПостановкиНаБалансЕГАИСОбработатьДанныеДляПереходаНаНовуюВерсиюГенерацияЗаполнениеАкцизныхМарок";
	Обработчик.Приоритет = 1;
//	Обработчик.Комментарий = НСтр("ru = 'Генерирует элементы справочника ""Штрихкоды упаковок и товаров"" по табличной части ""Акцизные марки"" документа ""Акт постановки на баланс ЕГАИС"".'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.1.4";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыЕГАИС.ДокументыАктСписанияЕГАИСОбработатьДанныеДляПереходаНаНовуюВерсиюГенерацияЗаполнениеАкцизныхМарок";
	Обработчик.Приоритет = 2;
//	Обработчик.Комментарий = НСтр("ru = 'Генерирует элементы справочника ""Штрихкоды упаковок и товаров"" по табличной части ""Акцизные марки"" документа ""Акт списания ЕГАИС"".'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.1.4";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыЕГАИС.ДокументыЧекЕГАИСВозвратОбработатьДанныеДляПереходаНаНовуюВерсиюГенерацияЗаполнениеАкцизныхМарок";
	Обработчик.Приоритет = 3;
//	Обработчик.Комментарий = НСтр("ru = 'Генерирует элементы справочника ""Штрихкоды упаковок и товаров"" по табличной части ""Акцизные марки"" документа ""Чек ЕГАИС на возврат"".'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.1.4";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыЕГАИС.ДокументыЧекЕГАИСОбработатьДанныеДляПереходаНаНовуюВерсиюГенерацияЗаполнениеАкцизныхМарок";
	Обработчик.Приоритет = 4;
//	Обработчик.Комментарий = НСтр("ru = 'Генерирует элементы справочника ""Штрихкоды упаковок и товаров"" по табличной части ""Акцизные марки"" документа ""Чек ЕГАИС на возврат"".'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.1.4";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыЕГАИС.РегистрыСведенийСоответствиеНоменклатурыЕГАИСОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Приоритет = 5;
	//Обработчик.Комментарий = НСтр("ru = 'Заполняет в регистре ""Соответствие номенклатуры ЕГАИС"" измерение Алкогольная продукция'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.1.4";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыЕГАИС.РегистрыСведенийСтатусыДокументовЕГАИСОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Приоритет = 6;
	//Обработчик.Комментарий = НСтр("ru = 'Заполняет регистр сведений ""СтатусыДокументовЕГАИС"" на основании записей протокола обмена и данных документов ЕГАИС.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.1.4";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыЕГАИС.ДокументыТТНВходящаяЕГАИСОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Приоритет = 7;
	//Обработчик.Комментарий = НСтр("ru = 'Заполняет пустые ссылки на номенклатуру в табличной части Товары документа ""ТТН (входящая)""'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.1.4";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыЕГАИС.ДокументыТТНИсходящаяЕГАИСОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Приоритет = 7;
	//Обработчик.Комментарий = НСтр("ru = 'Заполняет пустые ссылки на номенклатуру в табличной части Товары документа ""ТТН (исходящая)""'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.1.4";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыЕГАИС.РегистрыСведенийСоответствиеНоменклатурыЕГАИСОбработатьДанныеДляПереходаНаНовуюВерсиюЗаполнениеСправок2";
	Обработчик.Приоритет = 8;
	//Обработчик.Комментарий = НСтр("ru = 'Заполняет в регистре ""Соответствие номенклатуры ЕГАИС"" измерение Справка2'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.1.4";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыЕГАИС.СправочникиВидыАлкогольнойПродукцииОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Приоритет = 9;
	//Обработчик.Комментарий = НСтр("ru = 'Заполняет в регистре ""Соответствие номенклатуры ЕГАИС"" измерение Справка2'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.0.0";
	Обработчик.Процедура = "Справочники.КлассификаторОрганизацийЕГАИС.УстановитьФорматОбмена3";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       = "3.1.0.0";
	Обработчик.Процедура    = "МенеджерОборудованияВызовСервераПереопределяемый.ОбновитьПоставляемыеДрайвера";
	
КонецПроцедуры

// Вызывается перед процедурами-обработчиками обновления данных ИБ.
//
Процедура ПередОбновлениемИнформационнойБазы() Экспорт
	
	ВерсияКонфигурации = ОбновлениеИнформационнойБазы.ВерсияИБ(Метаданные.Имя);
	Если ВерсияКонфигурации <> "0.0.0.0" Тогда
		
		ИдентификаторБиблиотекаИнтеграцииЕГАИС = "БиблиотекаИнтеграцииЕГАИС";
		ВерсияБиблиотекаИнтеграцииЕГАИС = ОбновлениеИнформационнойБазы.ВерсияИБ(ИдентификаторБиблиотекаИнтеграцииЕГАИС);
		Если ВерсияБиблиотекаИнтеграцииЕГАИС = "0.0.0.0" Тогда
			
			ОбновлениеИнформационнойБазы.ВыполнитьИтерациюОбновления("БиблиотекаИнтеграцииЕГАИС", "1.0.0.0", Ложь);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Вызывается после завершения обновления данных ИБ.
// 
// Параметры:
//   ПредыдущаяВерсия       - Строка - версия до обновления. "0.0.0.0" для "пустой" ИБ.
//   ТекущаяВерсия          - Строка - версия после обновления.
//   ВыполненныеОбработчики - ДеревоЗначений - список выполненных процедур-обработчиков обновления,
//                                             сгруппированных по номеру версии.
//   ВыводитьОписаниеОбновлений - Булево - если установить Истина, то будет выведена форма
//                                с описанием обновлений. По умолчанию, Истина.
//                                Возвращаемое значение.
//   МонопольныйРежим           - Булево - Истина, если обновление выполнялось в монопольном режиме.
//
// Пример обхода выполненных обработчиков обновления:
//
//	Для Каждого Версия Из ВыполненныеОбработчики.Строки Цикл
//		
//		Если Версия.Версия = "*" Тогда
//			// Обработчик, который может выполнятся при каждой смене версии.
//		Иначе
//			// Обработчик, который выполняется для определенной версии.
//		КонецЕсли;
//		
//		Для Каждого Обработчик Из Версия.Строки Цикл
//			...
//		КонецЦикла;
//		
//	КонецЦикла;
//
Процедура ПослеОбновленияИнформационнойБазы(Знач ПредыдущаяВерсия, Знач ТекущаяВерсия,
		Знач ВыполненныеОбработчики, ВыводитьОписаниеОбновлений, МонопольныйРежим) Экспорт
	
	
КонецПроцедуры

// Вызывается при подготовке табличного документа с описанием изменений в программе.
//
// Параметры:
//   Макет - ТабличныйДокумент - описание обновления всех библиотек и конфигурации.
//           Макет можно дополнить или заменить.
//           См. также общий макет ОписаниеИзмененийСистемы.
//
Процедура ПриПодготовкеМакетаОписанияОбновлений(Знач Макет) Экспорт
	
КонецПроцедуры

// Позволяет переопределить режим обновления данных информационной базы.
// Для использования в редких (нештатных) случаях перехода, не предусмотренных в
// стандартной процедуре определения режима обновления.
//
// Параметры:
//   РежимОбновленияДанных - Строка - в обработчике можно присвоить одно из значений:
//              "НачальноеЗаполнение"     - если это первый запуск пустой базы (области данных);
//              "ОбновлениеВерсии"        - если выполняется первый запуск после обновление конфигурации базы данных;
//              "ПереходСДругойПрограммы" - если выполняется первый запуск после обновление конфигурации базы данных, 
//                                          в которой изменилось имя основной конфигурации.
//
//   СтандартнаяОбработка  - Булево - если присвоить Ложь, то стандартная процедура
//                                    определения режима обновления не выполняется, 
//                                    а используется значение РежимОбновленияДанных.
//
Процедура ПриОпределенииРежимаОбновленияДанных(РежимОбновленияДанных, СтандартнаяОбработка) Экспорт
 
КонецПроцедуры

// Добавляет в список процедуры-обработчики перехода с другой программы (с другим именем конфигурации).
// Например, для перехода между разными, но родственными конфигурациями: базовая -> проф -> корп.
// Вызывается перед началом обновления данных ИБ.
//
// Параметры:
//  Обработчики - ТаблицаЗначений - с колонками:
//    * ПредыдущееИмяКонфигурации - Строка - имя конфигурации, с которой выполняется переход;
//                                           или "*", если нужно выполнять при переходе с любой конфигурации.
//    * Процедура                 - Строка - полное имя процедуры-обработчика перехода с программы ПредыдущееИмяКонфигурации. 
//                                  Например, "ОбновлениеИнформационнойБазыУПП.ЗаполнитьУчетнуюПолитику"
//                                  Обязательно должна быть экспортной.
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.ПредыдущееИмяКонфигурации  = "УправлениеТорговлей";
//  Обработчик.Процедура                  = "ОбновлениеИнформационнойБазыУПП.ЗаполнитьУчетнуюПолитику";
//
Процедура ПриДобавленииОбработчиковПереходаСДругойПрограммы(Обработчики) Экспорт
 
КонецПроцедуры

// Вызывается после выполнения всех процедур-обработчиков перехода с другой программы (с другим именем конфигурации),
// и до начала выполнения обновления данных ИБ.
//
// Параметры:
//  ПредыдущееИмяКонфигурации    - Строка - имя конфигурации до перехода.
//  ПредыдущаяВерсияКонфигурации - Строка - имя предыдущей конфигурации (до перехода).
//  Параметры                    - Структура - 
//    * ВыполнитьОбновлениеСВерсии   - Булево - по умолчанию Истина. Если установить Ложь, 
//        то будут выполнена только обязательные обработчики обновления (с версией "*").
//    * ВерсияКонфигурации           - Строка - номер версии после перехода. 
//        По умолчанию, равен значению версии конфигурации в свойствах метаданных.
//        Для того чтобы выполнить, например, все обработчики обновления с версии ПредыдущаяВерсияКонфигурации, 
//        следует установить значение параметра в ПредыдущаяВерсияКонфигурации.
//        Для того чтобы выполнить вообще все обработчики обновления, установить значение "0.0.0.1".
//    * ОчиститьСведенияОПредыдущейКонфигурации - Булево - по умолчанию Истина. 
//        Для случаев когда предыдущая конфигурация совпадает по имени с подсистемой текущей конфигурации, следует указать Ложь.
//
Процедура ПриЗавершенииПереходаСДругойПрограммы(Знач ПредыдущееИмяКонфигурации, Знач ПредыдущаяВерсияКонфигурации, Параметры) Экспорт
 
КонецПроцедуры

// Обновление до версии ЕГАИС 3.1 производится здесь
Процедура ВыполнитьОбновлениеИнформационнойБазы() Экспорт
	
	ОбновлениеИнформационнойБазы.ВыполнитьИтерациюОбновления(
		"БиблиотекаИнтеграцииЕГАИС",
		ВерсияБиблиотеки(),
		ОбработчикиОбновления());
	
КонецПроцедуры

Процедура УстановитьПризнакВыгрузкиПродажНемаркируемойПродукции() Экспорт
	
КонецПроцедуры

//#КонецОбласти

//#Область МеханизмОтложенногоПроведения

// Результат адаптации запроса для функции ОбновлениеИнформационнойБазыЕГАИС.РегистраторыДляПерепроведения
// 
// Возвращаемое значение:
//  Структура - поля:
//	* ТекстЗапроса - Строка - должен быть объявлен обязательно, адаптированный текст запроса
//	* ЗначенияПараметров - Структура - значения параметров запроса, которые вычисляются из констант
//										(не зависят от конкретного документа)
//
Функция РезультатАдаптацииЗапроса() Экспорт
	
	РезультатАдаптацииЗапроса = Новый Структура;
	РезультатАдаптацииЗапроса.Вставить("ТекстЗапроса");
	РезультатАдаптацииЗапроса.Вставить("ЗначенияПараметров", Новый Структура);
	
	Возврат РезультатАдаптацииЗапроса;
КонецФункции

// Адаптирует запрос механизма проведения для использования в функции ОбновлениеИнформационнойБазыЕГАИС.РегистраторыДляПерепроведения,
// делая его запросом для всех проведенных документов.
// Параметры:
//  ИзначальныйТекстЗапроса - Строка - текст запроса механизма проведения, который или формирует таблицу движений, или создает временные таблицы,
//												используемые в запросах формирующих таблицы движений
//												Требования к тексту запроса:
//												- все объединяемые таблицы запроса, формирующего таблицу движений имеют один синоним;
//												- если есть соединения с другими таблицами, то оно реализовано таким образом, что будет
//													корректно работать, если не установлен отбор по ссылке;
//												- не используются временные таблицы;
//												- не используются вложенные запросы и группировки;
//												- нет упорядочивания;
//												- параметры запроса рассчитываются или по данным шапки, или являются значениями констант;
// 												- для всех полей непримитивных типов заполнены значения по умолчанию, как они хранятся в регистре.
//													Это или пустая ссылка типа, или НЕОПРЕДЕЛЕНО (для полей составного типа), то НЕ должно быть NULL
//												- параметр, устанавливающий отбор по ссылке называется &Ссылка
//												- в конце запроса не должно быть знака ";"
// 												- в тексте запроса, формирующим таблицу движения, должны выбираться только ЗНАЧИМЫЕ
//													для формирования движений поля (нет полей НомерСтроки, Порядок и т.д.);
//  ПолноеИмяРегистра				 - Строка - полное имя регистра, как оно задается в языке запросов (например, РегистрНакопления.ТоварыНаСкладах)
//  ПолноеИмяДокумента				 - Строка - полное имя документа, как оно задается в языке запросов (например, Документ.ВводОстатков)
//  СинонимТаблицыДокумента			 - Строка - синоним таблицы документа, используемый в запросе
//  ПереопределениеРасчетаПараметров - Структура - по умолчанию все параметры, которые есть в запросе заменяются на <СинонимТаблицыДокумента>.Ссылка.<ИмяПараметра>
//  												Для параметра &Период по умолчанию подставляется <СинонимТаблицыДокумента>.Ссылка.Дата
//  												Если параметры рассчитываются иначе, то в этой структуре в ключе передается имя параметра, в значении
//													- выражение для его расчета
//  ТекстыЗапросаВременныхТаблиц     - Массив - тексты запросов временных таблиц, используемых в тексте запроса механизма проведения. Массив структур с ключами:
//													  * Ключ - имя временной таблицы,
//													  * Значение - текст запроса временной таблицы.
//													  Параметр необходимо использовать когда механизм формирования движений опирается не на
//													  физическую таблицу документа, а на предварительно созданную временную таблицу.
//													  Поля выборки временной таблицы должны содержать поле "Ссылка" - ссылку на физическую таблицу проводимого документа.
//
// Возвращаемое значение:
//   - строка - адаптированный текст запроса
//
Функция АдаптироватьЗапросМеханизмаПроведения(Знач ИзначальныйТекстЗапроса,
														ПолноеИмяДокумента,
														СинонимТаблицыДокумента,
														ПереопределениеРасчетаПараметров,
														ТекстыЗапросаВременныхТаблиц = Неопределено) Экспорт
	
	ИзначальныйТекстЗапроса = СтрЗаменить(ИзначальныйТекстЗапроса,
										"ВЫБРАТЬ",
										"ВЫБРАТЬ
										|	ТаблицаДокументаОбновлениеИБ.Ссылка КАК Регистратор,");
				
	ИзначальныйТекстЗапроса = СтрЗаменить(ИзначальныйТекстЗапроса,
										"ГДЕ",
										"
										|ГДЕ
										|	ТаблицаДокументаОбновлениеИБ.Ссылка.Проведен
										|	И ");
	
	Если ТекстыЗапросаВременныхТаблиц <> Неопределено Тогда
		
		Для Каждого Элемент Из ТекстыЗапросаВременныхТаблиц Цикл
			
			ПервыйСимвол = СтрНайти(Элемент.Значение, "ПОМЕСТИТЬ");
			ПоследнийСимвол = СтрНайти(Элемент.Значение, Элемент.Ключ, "СНачала", ПервыйСимвол) + СтрДлина(Элемент.Ключ);
			ПодстановкаПоиска = Сред(Элемент.Значение, ПервыйСимвол, ПоследнийСимвол - ПервыйСимвол);
			ПодстановкаВременнойТаблицы = СтрЗаменить(Элемент.Значение, ПодстановкаПоиска, "");
			ИзначальныйТекстЗапроса = СтрЗаменить(ИзначальныйТекстЗапроса, Элемент.Ключ, "(" + ПодстановкаВременнойТаблицы + ")");
			
		КонецЦикла;
		
	КонецЕсли;
	
	ИзначальныйТекстЗапроса = СтрЗаменить(ИзначальныйТекстЗапроса,СинонимТаблицыДокумента,"ТаблицаДокументаОбновлениеИБ");
	ИзначальныйТекстЗапроса = СтрЗаменить(ИзначальныйТекстЗапроса,"ТаблицаДокументаОбновлениеИБ.Ссылка = &Ссылка","ИСТИНА");
	
	Запрос = Новый Запрос;
	Запрос.Текст = ИзначальныйТекстЗапроса;
	
	ПараметрыЗапроса = Запрос.НайтиПараметры();
	МетаданныеДокумента = Метаданные.НайтиПоПолномуИмени(ПолноеИмяДокумента);
	
	Для Каждого Параметр из ПараметрыЗапроса Цикл
		
		ТекстЗамены = Неопределено;
		
		Если ПереопределениеРасчетаПараметров.Свойство(Параметр.Имя) Тогда
			ТекстЗамены = ПереопределениеРасчетаПараметров[Параметр.Имя];
			ТекстЗамены = СтрЗаменить(ТекстЗамены, СинонимТаблицыДокумента, "ТаблицаДокументаОбновлениеИБ");
		ИначеЕсли Параметр.Имя = "Ссылка" Тогда
			ТекстЗамены = "ТаблицаДокументаОбновлениеИБ.Ссылка";
		ИначеЕсли Параметр.Имя = "Период" Тогда
			ТекстЗамены = "ТаблицаДокументаОбновлениеИБ.Ссылка.Дата";
		ИначеЕсли МетаданныеДокумента.Реквизиты.Найти(Параметр.Имя) <> Неопределено Тогда
			ТекстЗамены = "ТаблицаДокументаОбновлениеИБ.Ссылка." + Параметр.Имя;
		КонецЕсли;	
		
		Если ТекстЗамены <> Неопределено Тогда
			ИзначальныйТекстЗапроса = СтрЗаменить(ИзначальныйТекстЗапроса,"&" + Параметр.Имя, ТекстЗамены);
		КонецЕсли;
			
	КонецЦикла;
	
	Возврат ИзначальныйТекстЗапроса;
	
КонецФункции

// Выбирает регистраторы, по которым движения записанные в регистр отличаются от тех, которые формируются запросом механизма проведения
// Параметры:
//  РезультатАдаптацииЗапроса - Структура - см. ОбновлениеИнформационнойБазыЕГАИС.РезультатАдаптацииЗапроса 
// 												Требования к запросам:
// 												- текст не должен содержать обращения к временным таблицам
//												- все запросы должны быть адаптированы для выборки без отбора по ссылке.
//													это можно сделать  с помощью функции ОбновлениеИнформационнойБазыЕГАИС.АдаптироватьЗапросМеханизмаПроведения, 
//													 если текст запроса удовлетворяет ее условиям. Если нет - можно попробовать адаптировать текст самостоятельно
// 												- в тексте запроса, формирующим таблицу движения, должны выбираться только ЗНАЧИМЫЕ
//													для формирования движений поля (нет полей НомерСтроки, Порядок и т.д.);
// 												- нет упорядочивания; 
// 												- есть поле "Регистратор"; 
//  ПолноеИмяРегистра				 - Строка - полное имя регистра, как оно задается в языке запросов (например, РегистрНакопления.ТоварыНаСкладах)
//  ПолноеИмяДокумента				 - Строка - полное имя документа, как оно задается в языке запросов (например, Документ.ВводОстатков)
//  ЗначенияПараметров - Структура - если параметры не рассчитываются в запросе, а устанавливаются из кода, то в этом параметре нужно передать их значения
//									Например, это значения учитываемых ФО
//  Очередь - Число, Неопределено - если параметр <> Неопределено, то при составлении массива регистраторов учитывается информация о выполнении обработчиков обновления
//										- исключаются регистраторы, которые не обновлены обработчиками предыдущих очередей
//										- оптимизируется выборка данных, т.к. берутся только те регистраторы, которые еще не обрабатывались в текущей очереди
//									Важно, чтобы тексты запросов адаптировались тоже с учетом очереди (либо тоже без учета очереди)
// Возвращаемое значение:
//   - Массив - массив ссылок на документы, по которым нужно переформировать движения по регистру
//
Функция РегистраторыДляПерепроведения(РезультатАдаптацииЗапроса,
										ПолноеИмяРегистра,
										ПолноеИмяДокумента) Экспорт
	
	Очередь = Неопределено;
	ТекстЗапросаФормированияДвижений = РезультатАдаптацииЗапроса.ТекстЗапроса;
	ЗначенияПараметров = РезультатАдаптацииЗапроса.ЗначенияПараметров;
	
	ТекстРезультирующегоЗапроса = "";
	
	ЧастиИмениРегистра = СтрРазделить(ПолноеИмяРегистра, ".", Ложь);
	
	ТипРегистра = ЧастиИмениРегистра[0];
	ИмяРегистра = ЧастиИмениРегистра[1];
	
	Если ТипРегистра = "РегистрНакопления"
		Или ТипРегистра = "РегистрСведений" Тогда
		МетаданныеРегистра = Метаданные.НайтиПоПолномуИмени(ПолноеИмяРегистра);
	Иначе
		ТекстИсключения = НСтр("ru = 'Функция не поддерживает работу с регистрами типа %ТипРегистра%.'");
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ТипРегистра%", ТипРегистра);
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
		
	ТекстРегистра = 
	"ВЫБРАТЬ";
	
	ТекстВыборкиСуммирующегоЗапроса =
	"ВЫБРАТЬ";
	ТекстГруппировкиСуммирующегоЗапроса = "
	|СГРУППИРОВАТЬ ПО";
	ТекстУсловияСуммирующегоЗапроса = "
	|ИМЕЮЩИЕ
	|	ЛОЖЬ";
	
	Если ТипРегистра = "РегистрСведений" Тогда
		ТекстЗапросаФормированияДвижений = СтрЗаменить(ТекстЗапросаФормированияДвижений,
											"ВЫБРАТЬ",
											"ВЫБРАТЬ
											|	1 КАК КонтрольноеПолеОбновлениеИБ,");
		ТекстРегистра = СтрЗаменить(ТекстРегистра,
											"ВЫБРАТЬ",
											"ВЫБРАТЬ
											|	-1,");
		ТекстВыборкиСуммирующегоЗапроса = СтрЗаменить(ТекстВыборкиСуммирующегоЗапроса,
											"ВЫБРАТЬ",
											"ВЫБРАТЬ
											|	СУММА(КонтрольноеПолеОбновлениеИБ) КАК КонтрольноеПолеОбновлениеИБ,");
		ТекстУсловияСуммирующегоЗапроса = ТекстУсловияСуммирующегоЗапроса + "
		| ИЛИ СУММА(КонтрольноеПолеОбновлениеИБ) <> 0";
	КонецЕсли;				
	
	
	ПакетЗапросов = Новый Запрос;
	ПакетЗапросов.Текст = ТекстЗапросаФормированияДвижений;
	
	Для Каждого Параметр из ЗначенияПараметров Цикл
		
		ПакетЗапросов.УстановитьПараметр(Параметр.Ключ, Параметр.Значение);
		
	КонецЦикла;
	
	ПакетЗапросов = ПакетЗапросов.ВыполнитьПакет();
	
	Запрос = ПакетЗапросов[0].Выгрузить();
	
	ВсеКолонки = Новый Массив;
	
	Для каждого Колонка из Запрос.Колонки Цикл
		
		ВсеКолонки.Добавить(Колонка.Имя);
		
		Если ТипРегистра = "РегистрНакопления"
			И МетаданныеРегистра.Ресурсы.Найти(Колонка.Имя) <> Неопределено Тогда		
			
			ТекстРегистра = ТекстРегистра + "
			|	-ТаблицаРегистра." + Колонка.Имя + ",";
			
			ТекстВыборкиСуммирующегоЗапроса = ТекстВыборкиСуммирующегоЗапроса + "
			|	СУММА(ВложенныйЗапрос." + Колонка.Имя + ") КАК " + Колонка.Имя + ",";
			
			ТекстУсловияСуммирующегоЗапроса = ТекстУсловияСуммирующегоЗапроса + "
			|	ИЛИ СУММА(ВложенныйЗапрос." + Колонка.Имя + ") <> 0";
			
		ИначеЕсли Не Колонка.Имя = "КонтрольноеПолеОбновлениеИБ" Тогда
			ТекстРегистра = ТекстРегистра + "
			|	ТаблицаРегистра." + Колонка.Имя + ",";
			
			ТекстВыборкиСуммирующегоЗапроса = ТекстВыборкиСуммирующегоЗапроса + "
			|	ВложенныйЗапрос." + Колонка.Имя + " КАК " + Колонка.Имя + ",";
			
			ТекстГруппировкиСуммирующегоЗапроса = ТекстГруппировкиСуммирующегоЗапроса + " 
			|	ВложенныйЗапрос." + Колонка.Имя + ",";
		КонецЕсли;
				
	КонецЦикла;
	
	ТекстВставкиЗапросФормирующийДвижения = "";
	
	Для каждого Измерение из МетаданныеРегистра.Измерения Цикл
		
		Если ВсеКолонки.Найти(Измерение.Имя) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ТекстРегистра = ТекстРегистра + "
		|	ТаблицаРегистра." + Измерение.Имя + ",";
		
		ТекстВыборкиСуммирующегоЗапроса = ТекстВыборкиСуммирующегоЗапроса + "
		|	ВложенныйЗапрос." + Измерение.Имя + " КАК " + Измерение.Имя + ",";
		
		ТекстГруппировкиСуммирующегоЗапроса = ТекстГруппировкиСуммирующегоЗапроса + " 
		|	ВложенныйЗапрос." + Измерение.Имя + ",";
		
		ТекстВставкиЗапросФормирующийДвижения = ТекстВставкиЗапросФормирующийДвижения + "
		|	&ПустоеЗначение" + Измерение.Имя + " КАК " + Измерение.Имя + ",";
		
		ЗначенияПараметров.Вставить("ПустоеЗначение" + Измерение.Имя, Измерение.Тип.ПривестиЗначение());
		
	КонецЦикла;
	
	Для каждого Ресурс из МетаданныеРегистра.Ресурсы Цикл
		
		Если ВсеКолонки.Найти(Ресурс.Имя) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипРегистра = "РегистрНакопления" Тогда
			ТекстРегистра = ТекстРегистра + "
			|	-ТаблицаРегистра." + Ресурс.Имя + ",";
			
			ТекстВыборкиСуммирующегоЗапроса = ТекстВыборкиСуммирующегоЗапроса + "
			|	СУММА(ВложенныйЗапрос." + Ресурс.Имя + ") КАК " + Ресурс.Имя + ",";
			
			ТекстУсловияСуммирующегоЗапроса = ТекстУсловияСуммирующегоЗапроса + "
			|	ИЛИ СУММА(ВложенныйЗапрос." + Ресурс.Имя + ") <> 0";
			
			ТекстВставкиЗапросФормирующийДвижения = ТекстВставкиЗапросФормирующийДвижения + "
			|	0 КАК " + Ресурс.Имя + ",";
		Иначе
			ТекстРегистра = ТекстРегистра + "
			|	ТаблицаРегистра." + Ресурс.Имя + ",";
			
			ТекстВыборкиСуммирующегоЗапроса = ТекстВыборкиСуммирующегоЗапроса + "
			|	ВложенныйЗапрос." + Ресурс.Имя + " КАК " + Ресурс.Имя + ",";
			
			ТекстГруппировкиСуммирующегоЗапроса = ТекстГруппировкиСуммирующегоЗапроса + " 
			|	ВложенныйЗапрос." + Ресурс.Имя + ",";
			
			ТекстВставкиЗапросФормирующийДвижения = ТекстВставкиЗапросФормирующийДвижения + "
			|	&ПустоеЗначение" + Ресурс.Имя + " КАК " + Ресурс.Имя + ",";
			
			ЗначенияПараметров.Вставить("ПустоеЗначение" + Ресурс.Имя, Ресурс.Тип.ПривестиЗначение());
		КонецЕсли;
	КонецЦикла;
	
	Для каждого Реквизит из МетаданныеРегистра.Реквизиты Цикл
		
		Если ВсеКолонки.Найти(Реквизит.Имя) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ТекстРегистра = ТекстРегистра + "
		|	ТаблицаРегистра." + Реквизит.Имя + ",";
		
		ТекстВыборкиСуммирующегоЗапроса = ТекстВыборкиСуммирующегоЗапроса + "
		|	ВложенныйЗапрос." + Реквизит.Имя + " КАК " + Реквизит.Имя + ",";
		
		ТекстГруппировкиСуммирующегоЗапроса = ТекстГруппировкиСуммирующегоЗапроса + " 
		|	ВложенныйЗапрос." + Реквизит.Имя + ",";
		
		ТекстВставкиЗапросФормирующийДвижения = ТекстВставкиЗапросФормирующийДвижения + "
		|	&ПустоеЗначение" + Реквизит.Имя + " КАК " + Реквизит.Имя + ",";
		
		ЗначенияПараметров.Вставить("ПустоеЗначение" + Реквизит.Имя, Реквизит.Тип.ПривестиЗначение());
		
	КонецЦикла;
	
	ТекстРегистра = Лев(ТекстРегистра, СтрДлина(ТекстРегистра) - 1);
	ТекстВыборкиСуммирующегоЗапроса = Лев(ТекстВыборкиСуммирующегоЗапроса, СтрДлина(ТекстВыборкиСуммирующегоЗапроса) - 1);
	ТекстГруппировкиСуммирующегоЗапроса = Лев(ТекстГруппировкиСуммирующегоЗапроса, СтрДлина(ТекстГруппировкиСуммирующегоЗапроса) - 1);
	
	Если Не ПустаяСтрока(ТекстВставкиЗапросФормирующийДвижения) Тогда
		ТекстВставкиЗапросФормирующийДвижения = Лев(ТекстВставкиЗапросФормирующийДвижения, СтрДлина(ТекстВставкиЗапросФормирующийДвижения) - 1);
		ТекстЗапросаФормированияДвижений = СтрЗаменить(ТекстЗапросаФормированияДвижений,
											"ИЗ",
											",
											|" +ТекстВставкиЗапросФормирующийДвижения + "
											|ИЗ");
	КонецЕсли;
			
	ТекстРегистра = ТекстРегистра + "
	|ИЗ
	|	" + ПолноеИмяРегистра + " КАК ТаблицаРегистра";
	
	ТекстРегистра = ТекстРегистра + "
	|ГДЕ
	|	ТаблицаРегистра.Регистратор ССЫЛКА " + ПолноеИмяДокумента;
	
	ТекстРезультирующегоЗапроса = ТекстРезультирующегоЗапроса + "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НеправильныеДвижения.Регистратор КАК Регистратор
	|ИЗ
	|(" + ТекстВыборкиСуммирующегоЗапроса + "
	|ИЗ
	|	("
	+ ТекстЗапросаФормированияДвижений 
	+ "
	|ОБЪЕДИНИТЬ ВСЕ
	|" 
	+ ТекстРегистра
	+ ") КАК ВложенныйЗапрос "
	+ ТекстГруппировкиСуммирующегоЗапроса
	+ ТекстУсловияСуммирующегоЗапроса + ") КАК НеправильныеДвижения";
	
	ЗапросВыборки = Новый Запрос;
	
	Для Каждого Параметр из ЗначенияПараметров Цикл
		
		ЗапросВыборки.УстановитьПараметр(Параметр.Ключ, Параметр.Значение);
		
	КонецЦикла;
	
	ЗапросВыборки.Текст = ТекстРезультирующегоЗапроса;
	
	Регистраторы = ЗапросВыборки.Выполнить().Выгрузить().ВыгрузитьКолонку("Регистратор");
	
	Возврат Регистраторы;
КонецФункции

// На основе данных о необходимости переформирования движений перезаписывает движения документа.
//	Для работы функции необходимо, чтобы процедура ИнициализироватьДанныеДокумента модуля менеджера документа, поддерживала параметр Регистры.
//	см. например, Документ.АктПостановкиНаБалансЕГАИС.ИнициализироватьДанныеДокумента
//
// Параметры:
//  ПолноеИмяДокумента					 - Строка, Массив - имя документа, по которому нужно переформировать движения. Например, "Документ.АктПостановкиНаБалансЕГАИС"
//																Если документов несколько, то нужно передать их имена в массиве.
//  ПолныеИменаРегистров				 - Строка, Массив - имя регистра, по которому нужно переформировать движения. Например, "РегистрНакопления.ОстаткиАлкогольнойПродукцииЕГАИС"
//																Если регистров несколько, то их имена нужно передать в массиве.
//  МассивОбъектов						 - Массив - массив ссылок на регистраторы (каждый регистратор должен поддерживаться во всех регистрах)
// 
// Возвращаемое значение:
//  Булево - ИСТИНА, если обработка всех движений завершена 
//
Функция ПерезаписатьДвиженияИзОчереди(ПолныеИменаДокументов, ПолныеИменаРегистров, МассивОбъектов) Экспорт
	
	Если ТипЗнч(ПолныеИменаДокументов) = Тип("Строка") Тогда
		СписокДокументов = СтрРазделить(ПолныеИменаДокументов, ",", Ложь);
	Иначе
		СписокДокументов = ПолныеИменаДокументов;
	КонецЕсли;
	
	Если ТипЗнч(ПолныеИменаРегистров) = Тип("Строка") Тогда
		Регистры = СтрРазделить(ПолныеИменаРегистров, ",", Ложь);
	Иначе
		Регистры = ПолныеИменаРегистров;
	КонецЕсли;
		
	Для Каждого ПолноеИмяДокумента Из СписокДокументов Цикл
		
		МенеджерДокумента = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолноеИмяДокумента);
		
		Для Каждого ПолноеИмяРегистра Из Регистры Цикл
			ИмяРегистра = СтрРазделить(ПолноеИмяРегистра,".",Ложь)[1];
			МенеджерРегистра = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолноеИмяРегистра);
			
			ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыВыборкиДанныхДляОбработки();
			ДополнительныеПараметры.ДополнительныеИсточникиДанных = МенеджерДокумента.ДополнительныеИсточникиДанныхДляДвижений(ИмяРегистра);
			
			ВыборкаПоРегистраторам = ВыбратьРегистраторыРегистраДляОбработки(МассивОбъектов,
																			ПолноеИмяДокумента,
																			ПолноеИмяРегистра,
																			ДополнительныеПараметры);
			
			Для Каждого ДокументСсылка Из ВыборкаПоРегистраторам Цикл
				
				// Монопольный режим блокировки и попытки не ставим
				НаборЗаписей = МенеджерРегистра.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.Регистратор.Установить(ДокументСсылка);
				РегистраторПроведен = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументСсылка, "Проведен");
					
				Если РегистраторПроведен Тогда
					ДопСвойства = Новый Структура;
					ИнтеграцияЕГАИС.ИнициализироватьДополнительныеСвойстваДляПроведения(ДокументСсылка, ДопСвойства);
					МенеджерДокумента.ИнициализироватьДанныеДокумента(ДокументСсылка, ДопСвойства, ИмяРегистра);
					НаборЗаписей.Загрузить(ДопСвойства.ТаблицыДляДвижений["Таблица" + ИмяРегистра]);
				КонецЕсли;
				
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

//#КонецОбласти

//#Область ОбработчикиОбновления

// Создает справки 1 и 2 в табличной части Товары ТТН.
//
Процедура СоздатьСправкиВТТН() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТТНВходящаяЕГАИСТовары.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	ТТНВходящаяЕГАИСТовары.УдалитьНомерСправки2 КАК РегистрационныйНомер,
	|	ТТНВходящаяЕГАИСТовары.Ссылка КАК ДокументОснование,
	|	ЕСТЬNULL(Справки2ЕГАИС.Ссылка, ЗНАЧЕНИЕ(Справочник.Справки2ЕГАИС.ПустаяСсылка)) КАК Справка,
	|	ТТНВходящаяЕГАИСТовары.Количество КАК Количество,
	|	ТТНВходящаяЕГАИСТовары.НомерСтроки КАК НомерСтроки,
	|	ТТНВходящаяЕГАИСТовары.УдалитьНомерСправки1 КАК НомерСправки1
	|ИЗ
	|	Документ.ТТНВходящаяЕГАИС.Товары КАК ТТНВходящаяЕГАИСТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Справки2ЕГАИС КАК Справки2ЕГАИС
	|		ПО ТТНВходящаяЕГАИСТовары.УдалитьНомерСправки2 = Справки2ЕГАИС.РегистрационныйНомер
	|			И ТТНВходящаяЕГАИСТовары.АлкогольнаяПродукция = Справки2ЕГАИС.АлкогольнаяПродукция
	|ГДЕ
	|	ТТНВходящаяЕГАИСТовары.Справка2 = ЗНАЧЕНИЕ(Справочник.Справки2ЕГАИС.ПустаяСсылка)
	|	И ТТНВходящаяЕГАИСТовары.УдалитьНомерСправки2 <> """"
	|ИТОГИ ПО
	|	ДокументОснование,
	|	НомерСтроки";
	
	СозданныеСправки = Новый ТаблицаЗначений;
	СозданныеСправки.Колонки.Добавить("РегистрационныйНомер", Новый ОписаниеТипов("Строка"));
	СозданныеСправки.Колонки.Добавить("АлкогольнаяПродукция", Новый ОписаниеТипов("СправочникСсылка.КлассификаторАлкогольнойПродукцииЕГАИС"));
	СозданныеСправки.Колонки.Добавить("ДокументОснование"   , );
	СозданныеСправки.Колонки.Добавить("НомерСправки1"       , Новый ОписаниеТипов("Строка"));
	СозданныеСправки.Колонки.Добавить("Количество"          , Новый ОписаниеТипов("Число"));
	СозданныеСправки.Колонки.Добавить("Справка"             , Новый ОписаниеТипов("СправочникСсылка.Справки2ЕГАИС"));
	
	РеквизитыСправки = "РегистрационныйНомер, АлкогольнаяПродукция, ДокументОснование, НомерСправки1, Количество";
	
	ВыборкаТТН = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаТТН.Следующий() Цикл
		ТТН = ВыборкаТТН.ДокументОснование.ПолучитьОбъект();
		
		ВыборкаНомерСтроки = ВыборкаТТН.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаНомерСтроки.Следующий() Цикл
			
			Выборка = ВыборкаНомерСтроки.Выбрать();
			Пока Выборка.Следующий() Цикл
				
				Если НЕ Выборка.Справка.Пустая() Тогда
					Справка = Выборка.Справка;
				Иначе
					ПараметрыОтбора = Новый Структура(РеквизитыСправки);
					ЗаполнитьЗначенияСвойств(ПараметрыОтбора, Выборка);
					
					НайденныеСтроки = СозданныеСправки.НайтиСтроки(ПараметрыОтбора);
					Если НайденныеСтроки.Количество() > 0 Тогда
						Справка = НайденныеСтроки[0].Справка;
					Иначе
						ДанныеСправки = ИнтеграцияЕГАИСКлиентСервер.СтруктураДанныхСправки2();
						ДанныеСправки.Наименование = Выборка.РегистрационныйНомер;
						ЗаполнитьЗначенияСвойств(ДанныеСправки, Выборка, РеквизитыСправки);
						
						ТекстОшибки = "";
						Справка = ИнтеграцияЕГАИС.СоздатьСправку(ДанныеСправки, Перечисления.ВидыДокументовЕГАИС.ОтветНаЗапросСправки2);
						
						Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
							ВызватьИсключение ТекстОшибки;
						КонецЕсли;
						
						СтрокаТаблицы = СозданныеСправки.Добавить();
						СтрокаТаблицы.Справка = Справка;
						
						ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Выборка, РеквизитыСправки);
					КонецЕсли;
				КонецЕсли;
				
				ТТН.Товары[Выборка.НомерСтроки - 1]["Справка2"] = Справка;
				
			КонецЦикла;
			
		КонецЦикла;
		
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ТТН);
	КонецЦикла;
	
КонецПроцедуры

// Заполняет статусы обработки запросов ЕГАИС.
//
Процедура ОбновитьСтатусыОбработкиЕГАИС() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТТНВходящаяЕГАИС.Ссылка КАК Ссылка,
	|	ТТНВходящаяЕГАИС.УдалитьСтатусОбработки КАК СтатусОбработки
	|ИЗ
	|	Документ.ТТНВходящаяЕГАИС КАК ТТНВходящаяЕГАИС
	|ГДЕ
	|	ТТНВходящаяЕГАИС.УдалитьСтатусОбработки = ЗНАЧЕНИЕ(Перечисление.СтатусыОбработкиТТНВходящейЕГАИС.ПустаяСсылка)";
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ДокументОбъект.УдалитьСтатусОбработки = Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ПринятИзЕГАИС;
		ДокументОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры

// Заполняет виды операций входящей ТТН.
//
Процедура ЗаполнитьВидыОперацийТТНВходящей() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТТНВходящаяЕГАИС.Ссылка КАК Ссылка,
	|	ТТНВходящаяЕГАИС.Дата КАК Дата
	|ИЗ
	|	Документ.ТТНВходящаяЕГАИС КАК ТТНВходящаяЕГАИС
	|ГДЕ
	|	ТТНВходящаяЕГАИС.ВидОперации = &ПустойВидОперации
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата";
	
	Запрос.УстановитьПараметр("ПустойВидОперации", Перечисления.ВидыОперацийТТНВходящейЕГАИС.ПустаяСсылка());
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийТТНВходящейЕГАИС.ПриходнаяНакладная;
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокументОбъект);
	КонецЦикла;
	
КонецПроцедуры

// Заполнение регистра сведений Протокол обмена ЕГАИС.
//
Процедура ЗаполнитьДокументОснованиеВПротоколеОбмена() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТТНВходящаяЕГАИС.Ссылка КАК ДокументОснование,
	|	ТТНВходящаяЕГАИС.УдалитьЕстьОшибкиПередачиЗапроса КАК ПолученОтказ,
	|	УдалитьПротоколОбменаЕГАИС.ИдентификаторСессииОбмена КАК ИдентификаторСессииОбмена
	|ИЗ
	|	РегистрСведений.УдалитьПротоколОбменаЕГАИС КАК УдалитьПротоколОбменаЕГАИС
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ТТНВходящаяЕГАИС КАК ТТНВходящаяЕГАИС
	|		ПО УдалитьПротоколОбменаЕГАИС.ИдентификаторСессииОбмена = ТТНВходящаяЕГАИС.УдалитьИдентификаторПоследнегоЗапроса
	|ГДЕ
	|	УдалитьПротоколОбменаЕГАИС.ДокументОснование = НЕОПРЕДЕЛЕНО";
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Запись = РегистрыСведений.УдалитьПротоколОбменаЕГАИС.СоздатьМенеджерЗаписи();
		Запись.ИдентификаторСессииОбмена = Выборка.ИдентификаторСессииОбмена;
		Запись.Прочитать();
		
		Запись.ДокументОснование = Выборка.ДокументОснование;
		Запись.ПолученОтказ = Выборка.ПолученОтказ;
		Запись.Записать();
	КонецЦикла;
	
КонецПроцедуры

// Заполняет идентификатор запроса в списке запросов.
//
Процедура ЗаполнитьИдентификаторЗапроса() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УдалитьПротоколОбменаЕГАИС.ИдентификаторСессииОбмена КАК ИдентификаторСессииОбмена
	|ИЗ
	|	РегистрСведений.УдалитьПротоколОбменаЕГАИС КАК УдалитьПротоколОбменаЕГАИС
	|ГДЕ
	|	УдалитьПротоколОбменаЕГАИС.ИдентификаторЗапроса = """"";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Запись = РегистрыСведений.УдалитьПротоколОбменаЕГАИС.СоздатьМенеджерЗаписи();
		Запись.ИдентификаторСессииОбмена = Выборка.ИдентификаторСессииОбмена;
		Запись.Прочитать();
		
		Запись.ИдентификаторЗапроса = Выборка.ИдентификаторСессииОбмена;
		Запись.Записать();
	КонецЦикла;
	
КонецПроцедуры

// Заполняет тип запроса в списке запросов.
//
Процедура ЗаполнитьТипЗапроса() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УдалитьПротоколОбменаЕГАИС.ИдентификаторСессииОбмена КАК ИдентификаторСессииОбмена
	|ИЗ
	|	РегистрСведений.УдалитьПротоколОбменаЕГАИС КАК УдалитьПротоколОбменаЕГАИС
	|ГДЕ
	|	УдалитьПротоколОбменаЕГАИС.ТипЗапроса = ЗНАЧЕНИЕ(Перечисление.ТипыЗапросовЕГАИС.ПустаяСсылка)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Запись = РегистрыСведений.УдалитьПротоколОбменаЕГАИС.СоздатьМенеджерЗаписи();
		Запись.ИдентификаторСессииОбмена = Выборка.ИдентификаторСессииОбмена;
		Запись.Прочитать();
		
		Запись.ТипЗапроса = Перечисления.ТипыЗапросовЕГАИС.Исходящий;
		Запись.Записать();
	КонецЦикла;
	
КонецПроцедуры

// Устанавливает признак Использование для регламентного задания ОбработкаОтветовЕГАИС.
//
Процедура УстановитьПризнакИспользованияОбработкиОтветов() Экспорт
	
	Отбор = Новый Структура();
	Отбор.Вставить("Метаданные", "ОбработкаОтветовЕГАИС");
	
	Задания = ИнтеграцияЕГАИСУТВызовСервера.НайтиЗадания(Отбор);
	
	Если Задания.Количество() <> 1 Тогда
		Возврат;
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ВестиСведенияДляДекларацийПоАлкогольнойПродукции") Тогда
		Задание = Задания[0];
		
		ПараметрыЗадания = Новый Структура;
		ПараметрыЗадания.Вставить("Использование", Истина);
		
		ИнтеграцияЕГАИСУТВызовСервера.ИзменитьЗадание(Задание.УникальныйИдентификатор, ПараметрыЗадания);
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает признак проведения для входящих ТТН.
//
Процедура УстановитьПризнакПроведенияТТН() Экспорт
	
	СписокСтатусов = Новый Массив;
	СписокСтатусов.Добавить(Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ПринятИзЕГАИС);
	СписокСтатусов.Добавить(Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.Подтвержден);
	СписокСтатусов.Добавить(Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.АктРасхожденийОбрабатываетсяЕГАИС);
	СписокСтатусов.Добавить(Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.АктОтказаОбрабатываетсяЕГАИС);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокСтатусов", СписокСтатусов);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТТНВходящаяЕГАИС.Ссылка КАК Ссылка,
	|	ТТНВходящаяЕГАИС.Дата КАК Дата,
	|	ТТНВходящаяЕГАИС.УдалитьСтатусОбработки КАК СтатусОбработки
	|ИЗ
	|	Документ.ТТНВходящаяЕГАИС КАК ТТНВходящаяЕГАИС
	|ГДЕ
	|	НЕ ТТНВходящаяЕГАИС.Проведен
	|	И НЕ ТТНВходящаяЕГАИС.ПометкаУдаления
	|	И ТТНВходящаяЕГАИС.УдалитьСтатусОбработки В(&СписокСтатусов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Док = Выборка.Ссылка.ПолучитьОбъект();
		Если Выборка.СтатусОбработки <> Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ПринятИзЕГАИС Тогда
			Док.ДатаРегистрацииДвижений = Выборка.Дата;
		КонецЕсли;
		
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(Док,,, РежимЗаписиДокумента.Проведение);
	КонецЦикла;
	
КонецПроцедуры

// Заполняет реквизит ВидДокумента в существующих документах.
//
Процедура ЗаполнитьВидДокумента() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПустойВидДокумента", Перечисления.ВидыДокументовЕГАИС.ПустаяСсылка());
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОстаткиЕГАИС.Ссылка КАК Ссылка,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыДокументовЕГАИС.ЗапросОстатковВРегистре1) КАК ВидДокумента
	|ИЗ
	|	Документ.ОстаткиЕГАИС КАК ОстаткиЕГАИС
	|ГДЕ
	|	ОстаткиЕГАИС.ВидДокумента = &ПустойВидДокумента
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	АктПостановкиНаБалансЕГАИС.Ссылка,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыДокументовЕГАИС.АктПостановкиНаБалансВРегистр1)
	|ИЗ
	|	Документ.АктПостановкиНаБалансЕГАИС КАК АктПостановкиНаБалансЕГАИС
	|ГДЕ
	|	АктПостановкиНаБалансЕГАИС.ВидДокумента = &ПустойВидДокумента
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	АктСписанияЕГАИС.Ссылка,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыДокументовЕГАИС.АктСписанияИзРегистра1)
	|ИЗ
	|	Документ.АктСписанияЕГАИС КАК АктСписанияЕГАИС
	|ГДЕ
	|	АктСписанияЕГАИС.ВидДокумента = &ПустойВидДокумента";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Док = Выборка.Ссылка.ПолучитьОбъект();
		Док.ВидДокумента = Выборка.ВидДокумента;
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(Док);
	КонецЦикла;
	
КонецПроцедуры

// Заполняет тип организации.
//
Процедура ЗаполнитьТипОрганизацииЕГАИС() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КлассификаторОрганизацийЕГАИС.Ссылка КАК Ссылка,
	|	ВЫБОР
	|		КОГДА КлассификаторОрганизацийЕГАИС.УдалитьУНП <> """"
	|			ТОГДА КлассификаторОрганизацийЕГАИС.УдалитьУНП
	|		ИНАЧЕ КлассификаторОрганизацийЕГАИС.УдалитьРНН
	|	КОНЕЦ КАК ИдентификаторОрганизацииТС
	|ИЗ
	|	Справочник.КлассификаторОрганизацийЕГАИС КАК КлассификаторОрганизацийЕГАИС
	|ГДЕ
	|	КлассификаторОрганизацийЕГАИС.ИдентификаторОрганизацииТС = """"
	|	И (КлассификаторОрганизацийЕГАИС.УдалитьУНП <> """"
	|			ИЛИ КлассификаторОрганизацийЕГАИС.УдалитьРНН <> """")";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ОрганизацияЕГАИС = Выборка.Ссылка.ПолучитьОбъект();
		ОрганизацияЕГАИС.ИдентификаторОрганизацииТС = Выборка.ИдентификаторОрганизацииТС;
		Если ОрганизацияЕГАИС.ТипОрганизации.Пустая() Тогда
			ОрганизацияЕГАИС.ТипОрганизации = Перечисления.ТипыОрганизацийЕГАИС.КонтрагентТаможенногоСоюза;
		КонецЕсли;
		
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ОрганизацияЕГАИС);
	КонецЦикла;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КлассификаторОрганизацийЕГАИС.Ссылка КАК Ссылка,
	|	КлассификаторОрганизацийЕГАИС.ИНН КАК ИНН,
	|	КлассификаторОрганизацийЕГАИС.КПП КАК КПП
	|ИЗ
	|	Справочник.КлассификаторОрганизацийЕГАИС КАК КлассификаторОрганизацийЕГАИС
	|ГДЕ
	|	КлассификаторОрганизацийЕГАИС.ТипОрганизации = ЗНАЧЕНИЕ(Перечисление.ТипыОрганизацийЕГАИС.ПустаяСсылка)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ОрганизацияЕГАИС = Выборка.Ссылка.ПолучитьОбъект();
		
		Если ПустаяСтрока(Выборка.ИНН) И ПустаяСтрока(Выборка.КПП) Тогда
			ОрганизацияЕГАИС.ТипОрганизации = Перечисления.ТипыОрганизацийЕГАИС.ИностранныйКонтрагент;
		ИначеЕсли ПустаяСтрока(Выборка.КПП) И СтрДлина(СокрЛП(Выборка.ИНН)) = 12 Тогда
			ОрганизацияЕГАИС.ТипОрганизации = Перечисления.ТипыОрганизацийЕГАИС.ИндивидуальныйПредпринимательРФ;
		Иначе
			ОрганизацияЕГАИС.ТипОрганизации = Перечисления.ТипыОрганизацийЕГАИС.ЮридическоеЛицоРФ;
		КонецЕсли;
		
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ОрганизацияЕГАИС);
	КонецЦикла;
	
КонецПроцедуры

// Заполняет причину постановки на баланс в актах постановки на баланс.
//
Процедура ЗаполнитьПричинуПостановкиНаБаланс() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	АктПостановкиНаБалансЕГАИС.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.АктПостановкиНаБалансЕГАИС КАК АктПостановкиНаБалансЕГАИС
	|ГДЕ
	|	АктПостановкиНаБалансЕГАИС.ПричинаПостановкиНаБаланс = ЗНАЧЕНИЕ(Перечисление.ПричиныПостановкиНаБалансЕГАИС.ПустаяСсылка)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Док = Выборка.Ссылка.ПолучитьОбъект();
		Док.ПричинаПостановкиНаБаланс = Перечисления.ПричиныПостановкиНаБалансЕГАИС.ЗакупкаДо2016;
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(Док);
	КонецЦикла;
	
КонецПроцедуры

// Заполняет информацию об используемом формате обмена с УТМ.
//
Процедура ЗаполнитьФорматОбмена() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КлассификаторОрганизацийЕГАИС.Ссылка КАК Ссылка
	|ИЗ
	|	РегистрСведений.НастройкиОбменаЕГАИС КАК НастройкиОбменаЕГАИС
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлассификаторОрганизацийЕГАИС КАК КлассификаторОрганизацийЕГАИС
	|		ПО НастройкиОбменаЕГАИС.ИдентификаторФСРАР = КлассификаторОрганизацийЕГАИС.Код
	|ГДЕ
	|	КлассификаторОрганизацийЕГАИС.ФорматОбмена = ЗНАЧЕНИЕ(Перечисление.ФорматыОбменаЕГАИС.ПустаяСсылка)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ОрганизацияЕГАИС = Выборка.Ссылка.ПолучитьОбъект();
		ОрганизацияЕГАИС.ФорматОбмена = ИнтеграцияЕГАИСКлиентСервер.ФорматОбмена();
		
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ОрганизацияЕГАИС);
	КонецЦикла;
	
КонецПроцедуры

// Удаляет движения по торговому залу.
//
Процедура УдалитьДвиженияПоТорговомуЗалу() Экспорт
	
	ВидыДокументов = Новый Массив;
	ВидыДокументов.Добавить(Перечисления.ВидыДокументовЕГАИС.АктПостановкиНаБалансВРегистр2);
	ВидыДокументов.Добавить(Перечисления.ВидыДокументовЕГАИС.АктСписанияИзРегистра2);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВидыДокументов", ВидыДокументов);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОстаткиАлкогольнойПродукцииЕГАИС.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрНакопления.ОстаткиАлкогольнойПродукцииЕГАИС КАК ОстаткиАлкогольнойПродукцииЕГАИС
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.АктПостановкиНаБалансЕГАИС КАК АктПостановкиНаБалансЕГАИС
	|		ПО ОстаткиАлкогольнойПродукцииЕГАИС.Регистратор = АктПостановкиНаБалансЕГАИС.Ссылка
	|ГДЕ
	|	АктПостановкиНаБалансЕГАИС.ВидДокумента В(&ВидыДокументов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОстаткиАлкогольнойПродукцииЕГАИС.Регистратор
	|ИЗ
	|	РегистрНакопления.ОстаткиАлкогольнойПродукцииЕГАИС КАК ОстаткиАлкогольнойПродукцииЕГАИС
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.АктСписанияЕГАИС КАК АктСписанияЕГАИС
	|		ПО ОстаткиАлкогольнойПродукцииЕГАИС.Регистратор = АктСписанияЕГАИС.Ссылка
	|ГДЕ
	|	АктСписанияЕГАИС.ВидДокумента В(&ВидыДокументов)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НаборЗаписей = РегистрыНакопления.ОстаткиАлкогольнойПродукцииЕГАИС.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
	КонецЦикла;
	
КонецПроцедуры

// Заполняет реквизит Идентификатор в актах постановки на баланс.
//
Процедура ЗаполнитьИдентификаторАктаПостановкиНаБаланс() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	АктПостановкиНаБалансЕГАИС.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.АктПостановкиНаБалансЕГАИС КАК АктПостановкиНаБалансЕГАИС
	|ГДЕ
	|	АктПостановкиНаБалансЕГАИС.Идентификатор = """"";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Док = Выборка.Ссылка.ПолучитьОбъект();
		Док.Идентификатор = Строка(Выборка.Ссылка.УникальныйИдентификатор());
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(Док);
	КонецЦикла;
	
КонецПроцедуры

// Удаляет обработчик обновления, перенесенный в другой модуль.
//
Процедура УдалитьОбработчикОбновленияАктаСписания() Экспорт
	
	ОбновлениеИнформационнойБазы.УдалитьОтложенныйОбработчикИзОчереди("Документы.АктСписанияЕГАИС.ОбработатьДанныеДляПереходаНаНовуюВерсию");
	
КонецПроцедуры

// Возвращает Истина, если объект метаданных входит в состав РИБ.
//
Функция ОбъектМетаданныхВходитВСоставРИБ(ОбъектМетаданных)
	
	Для Каждого ПланОбмена Из Метаданные.ПланыОбмена Цикл
		
		Если ПланОбмена.РаспределеннаяИнформационнаяБаза
			И ПланОбмена.Состав.Содержит(ОбъектМетаданных) Тогда
			Возврат Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция ВыбратьРегистраторыРегистраДляОбработки(МассивОбъектов,
												ПолноеИмяДокумента,
												ПолноеИмяРегистра,
												ДополнительныеПараметры)
	Результат = Новый Массив;
	Для Каждого ОбъектСсылка Из МассивОбъектов Цикл
		Если Найти(ПолноеИмяДокумента,ОбъектСсылка.Метаданные().Имя)>0 Тогда
			Результат.Добавить(ОбъектСсылка);
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;
КонецФункции

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Адаптация: перенос обработчиков на старую версию БСП (монопольное обновление при старте системы)
//
//

Процедура РегистрыНакопленияОстаткиАлкогольнойПродукцииЕГАИСОбработатьДанныеДляПереходаНаНовуюВерсию() Экспорт
	Сообщить(НСтр("ru = 'Формирование движений по регистру ""Остатки алкогольной продукции ЕГАИС"".'"));
	ДанныеКОбработке = РегистрыНакопления.ОстаткиАлкогольнойПродукцииЕГАИС.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию();
	РегистрыНакопления.ОстаткиАлкогольнойПродукцииЕГАИС.ОбработатьДанныеДляПереходаНаНовуюВерсию(ДанныеКОбработке);
КонецПроцедуры

Процедура РегистрыСведенийНастройкиОбменаЕГАИСОбработатьДанныеДляПереходаНаНовуюВерсию() Экспорт
	Сообщить(НСтр("ru = 'Обновление записей регистра сведений ""НастройкиОбменаЕГАИС"": установка таймаута соединения с УТМ 60 секунд.'"));
	ДанныеКОбработке = РегистрыСведений.НастройкиОбменаЕГАИС.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию();
	РегистрыСведений.НастройкиОбменаЕГАИС.ОбработатьДанныеДляПереходаНаНовуюВерсию(ДанныеКОбработке);
КонецПроцедуры

Процедура РегистрыСведенийУдалитьПротоколОбменаЕГАИСОбработатьДанныеДляПереходаНаНовуюВерсиюИсходящиеСообщения() Экспорт
	
	Если ОбъектМетаданныхВходитВСоставРИБ(Метаданные.РегистрыСведений.УдалитьПротоколОбменаЕГАИС)
		И ПланыОбмена.ГлавныйУзел()<>Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Сообщить(НСтр("ru = 'Перенос исходящих сообщений протокола обмена с ЕГАИС из регистра ""УдалитьПротоколОбменаЕГАИС"" в справочник ""ЕГАИСПрисоединенныеФайлы"".'"));
	ДанныеКОбработке = РегистрыСведений.УдалитьПротоколОбменаЕГАИС.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсиюИсходящиеСообщения();
	РегистрыСведений.УдалитьПротоколОбменаЕГАИС.ОбработатьДанныеДляПереходаНаНовуюВерсиюИсходящиеСообщения(ДанныеКОбработке);
	
КонецПроцедуры

Процедура СправочникиЕГАИСПрисоединенныеФайлыОбработатьДанныеДляПереходаНаНовуюВерсию() Экспорт
	Сообщить(НСтр("ru = 'Пересчет статусов обработки в справочнике ""ЕГАИСПрисоединенныеФайлы"".'"));
	ДанныеКОбработке = Справочники.ЕГАИСПрисоединенныеФайлы.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию();
	Справочники.ЕГАИСПрисоединенныеФайлы.ОбработатьДанныеДляПереходаНаНовуюВерсию(ДанныеКОбработке);
КонецПроцедуры

Процедура РегистрыСведенийУдалитьПротоколОбменаЕГАИСОбработатьДанныеДляПереходаНаНовуюВерсиюВходящиеСообщения() Экспорт
	
	Если ОбъектМетаданныхВходитВСоставРИБ(Метаданные.РегистрыСведений.УдалитьПротоколОбменаЕГАИС)
		И ПланыОбмена.ГлавныйУзел()<>Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Сообщить(НСтр("ru = 'Перенос входящих сообщений протокола обмена с ЕГАИС из регистра ""УдалитьПротоколОбменаЕГАИС"" в справочник ""ЕГАИСПрисоединенныеФайлы"".'"));
	ДанныеКОбработке = РегистрыСведений.УдалитьПротоколОбменаЕГАИС.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсиюВходящиеСообщения();
	РегистрыСведений.УдалитьПротоколОбменаЕГАИС.ОбработатьДанныеДляПереходаНаНовуюВерсиюВходящиеСообщения(ДанныеКОбработке);
	
КонецПроцедуры

Процедура ДокументыАктПостановкиНаБалансЕГАИСОбработатьДанныеДляПереходаНаНовуюВерсиюГенерацияЗаполнениеАкцизныхМарок() Экспорт
	
	Если ПланыОбмена.ГлавныйУзел()<>Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Сообщить(НСтр("ru = 'Заполнение справочника ""Штрихкоды упаковок и товаров"" по табличной части ""Акцизные марки"" документа ""Акт постановки на баланс ЕГАИС"".'"));
	Сообщить(НСтр("ru = 'Заполнение ссылок на справочник ""Штрихкоды упаковок и товаров"" в табличной части ""Акцизные марки"" документа ""Акт постановки на баланс ЕГАИС"".'"));
	ДанныеКОбработке = Документы.АктПостановкиНаБалансЕГАИС.ЗарегистрироватьДанныеКОбработкеДляГенерацииЗаполненияАкцизныхМарок();
	Документы.АктПостановкиНаБалансЕГАИС.ОбработатьДанныеДляПереходаНаНовуюВерсиюГенерацияЗаполнениеАкцизныхМарок(ДанныеКОбработке);
	
КонецПроцедуры

Процедура ДокументыАктСписанияЕГАИСОбработатьДанныеДляПереходаНаНовуюВерсиюГенерацияЗаполнениеАкцизныхМарок() Экспорт
	
	Если ПланыОбмена.ГлавныйУзел()<>Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Сообщить(НСтр("ru = 'Заполнение справочника ""Штрихкоды упаковок и товаров"" по табличной части ""Акцизные марки"" документа ""Акт списания ЕГАИС"".'"));
	Сообщить(НСтр("ru = 'Заполнение ссылок на справочник ""Штрихкоды упаковок и товаров"" в табличной части ""Акцизные марки"" документа ""Акт списания ЕГАИС"".'"));
	ДанныеКОбработке = Документы.АктСписанияЕГАИС.ЗарегистрироватьДанныеКОбработкеДляГенерацииЗаполненияАкцизныхМарок();
	Документы.АктСписанияЕГАИС.ОбработатьДанныеДляПереходаНаНовуюВерсиюГенерацияЗаполнениеАкцизныхМарок(ДанныеКОбработке);
	
КонецПроцедуры

Процедура ДокументыЧекЕГАИСВозвратОбработатьДанныеДляПереходаНаНовуюВерсиюГенерацияЗаполнениеАкцизныхМарок() Экспорт
	
	Если ПланыОбмена.ГлавныйУзел()<>Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Сообщить(НСтр("ru = 'Заполнение справочника ""Штрихкоды упаковок и товаров"" по табличной части ""Акцизные марки"" документа ""Чек ЕГАИС на возврат"".'"));
	Сообщить(НСтр("ru = 'Заполнение ссылок на справочник ""Штрихкоды упаковок и товаров"" в табличной части ""Акцизные марки"" документа ""Чек ЕГАИС на возврат"".'"));
	ДанныеКОбработке = Документы.ЧекЕГАИСВозврат.ЗарегистрироватьДанныеКОбработкеДляГенерацииЗаполненияАкцизныхМарок();
	Документы.ЧекЕГАИСВозврат.ОбработатьДанныеДляПереходаНаНовуюВерсиюГенерацияЗаполнениеАкцизныхМарок(ДанныеКОбработке);
	
КонецПроцедуры

Процедура ДокументыЧекЕГАИСОбработатьДанныеДляПереходаНаНовуюВерсиюГенерацияЗаполнениеАкцизныхМарок() Экспорт
	
	Если ПланыОбмена.ГлавныйУзел()<>Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Сообщить(НСтр("ru = 'Заполнение справочника ""Штрихкоды упаковок и товаров"" по табличной части ""Акцизные марки"" документа ""Чек ЕГАИС"".'"));
	Сообщить(НСтр("ru = 'Заполнение ссылок на справочник ""Штрихкоды упаковок и товаров"" в табличной части ""Акцизные марки"" документа ""Чек ЕГАИС"".'"));
	Сообщить(НСтр("ru = 'Заполнение вида операции документа ""Чек ЕГАИС"".'"));
	ДанныеКОбработке = Документы.ЧекЕГАИС.ЗарегистрироватьДанныеКОбработкеДляГенерацииЗаполнения();
	Документы.ЧекЕГАИС.ОбработатьДанныеДляПереходаНаНовуюВерсиюГенерацияЗаполнение(ДанныеКОбработке);
	
КонецПроцедуры

Процедура РегистрыСведенийСоответствиеНоменклатурыЕГАИСОбработатьДанныеДляПереходаНаНовуюВерсию() Экспорт
	Сообщить(НСтр("ru = 'Заполнение измерения ""Алкогольная продукция"" в регистре ""Соответствие номенклатуры ЕГАИС""'"));
	ДанныеКОбработке = РегистрыСведений.СоответствиеНоменклатурыЕГАИС.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию();
	РегистрыСведений.СоответствиеНоменклатурыЕГАИС.ОбработатьДанныеДляПереходаНаНовуюВерсию(ДанныеКОбработке);
КонецПроцедуры

Процедура ДокументыТТНВходящаяЕГАИСОбработатьДанныеДляПереходаНаНовуюВерсию() Экспорт
	Сообщить(НСтр("ru = 'Заполнение пустых ссылок на номенклатуру в табличной части Товары документа ""ТТН (входящая)""'"));
	ДанныеКОбработке = Документы.ТТНВходящаяЕГАИС.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию();
	Документы.ТТНВходящаяЕГАИС.ОбработатьДанныеДляПереходаНаНовуюВерсию(ДанныеКОбработке);
КонецПроцедуры

Процедура ДокументыТТНИсходящаяЕГАИСОбработатьДанныеДляПереходаНаНовуюВерсию() Экспорт
	Сообщить(НСтр("ru = 'Заполнение пустых ссылок на номенклатуру в табличной части Товары документа ""ТТН (исходящая)""'"));
	ДанныеКОбработке = Документы.ТТНИсходящаяЕГАИС.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию();
	Документы.ТТНИсходящаяЕГАИС.ОбработатьДанныеДляПереходаНаНовуюВерсию(ДанныеКОбработке);
КонецПроцедуры

Процедура РегистрыСведенийСтатусыДокументовЕГАИСОбработатьДанныеДляПереходаНаНовуюВерсию() Экспорт
	Сообщить(НСтр("ru = 'Заполнение регистра сведений ""СтатусыДокументовЕГАИС"" на основании записей протокола обмена и данных документов ЕГАИС.'"));
	ДанныеКОбработке = РегистрыСведений.СтатусыДокументовЕГАИС.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию();
	РегистрыСведений.СтатусыДокументовЕГАИС.ОбработатьДанныеДляПереходаНаНовуюВерсию(ДанныеКОбработке);
КонецПроцедуры

Процедура РегистрыСведенийСоответствиеНоменклатурыЕГАИСОбработатьДанныеДляПереходаНаНовуюВерсиюЗаполнениеСправок2() Экспорт
	Сообщить(НСтр("ru = 'Заполнение измерения ""Справка 2"" в регистре ""Соответствие номенклатуры ЕГАИС""'"));
	ДанныеКОбработке = РегистрыСведений.СоответствиеНоменклатурыЕГАИС.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсиюЗаполнениеСправок2();
	РегистрыСведений.СоответствиеНоменклатурыЕГАИС.ОбработатьДанныеДляПереходаНаНовуюВерсиюЗаполнениеСправок2(ДанныеКОбработке);
КонецПроцедуры

Процедура СправочникиВидыАлкогольнойПродукцииОбработатьДанныеДляПереходаНаНовуюВерсию() Экспорт
	Сообщить(НСтр("ru = 'Заполнение ревизита ""Вид лицензии"" в справочнике ""Виды алкогольной продукции""'"));
	Справочники.ВидыАлкогольнойПродукции.ОбработатьДанныеДляПереходаНаНовуюВерсию();
КонецПроцедуры
	

//#КонецОбласти