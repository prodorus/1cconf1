////////////////////////////////////////////////////////////////////////////////
// Подсистема "Базовая функциональность".
// Серверные процедуры и функции общего назначения.
//  
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Возвращает признак включения условного разделения.
// В случае вызова в неразделенной конфигурации возвращает Ложь.
//
Функция РазделениеВключено() Экспорт
	
	Возврат Ложь;
	
КонецФункции

// Возвращает тип платформы сервера.
//
// Возвращаемое значение:
// ТипПлатформы; Неопределено.
//
Функция ТипПлатформыСервера() Экспорт
	
	СистемнаяИнфо = Новый СистемнаяИнформация;
	Возврат СистемнаяИнфо.ТипПлатформы;
	
КонецФункции	

// Функция возвращает реквизиты объекта
//
// Параметры
//	Ссылка				- <Произвольный>, ссылка на объект
//	СтруктураПолей		- <Структура>, реквизиты объекта, которые необходимо получить
//	ПолноеИмяОбъекта	- <Строка>, полное имя объекта, например "Справочник.Пользователи"
//
// Возвращаемое значение
//	Структура
//
Функция ПолучитьЗначенияРеквизитовОбъекта(Ссылка, СтруктураПолей, ПолноеИмяОбъекта = Неопределено) Экспорт

	Если ПолноеИмяОбъекта = Неопределено Тогда
		ПолноеИмяОбъекта = Ссылка.Метаданные().ПолноеИмя();
	КонецЕсли; 

	ТекстЗапроса = "";
	
	Для Каждого Элемент Из СтруктураПолей Цикл
		
		ИмяПоля = Элемент.Значение;
		
		Если НЕ ЗначениеЗаполнено(ИмяПоля) Тогда
			ИмяПоля = СокрЛП(Элемент.Ключ);
		КонецЕсли;
		
		ТекстЗапроса  = ТекстЗапроса + ?(ПустаяСтрока(ТекстЗапроса), "", ",") + "
		|	" + ИмяПоля + " КАК " + СокрЛП(Элемент.Ключ);
	КонецЦикла;

	Запрос = Новый Запрос();

	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ" + ТекстЗапроса + "
	|ИЗ
	|	" + ПолноеИмяОбъекта + " КАК ТаблицаОбъекта
	|ГДЕ
	|	Ссылка = &Ссылка";

	Запрос.УстановитьПараметр("Ссылка" , Ссылка);

	Выборка = Запрос.Выполнить().Выбрать();
	
	Результат = Новый Структура;
	Если Выборка.Следующий() Тогда
		Для Каждого КлючИЗначение ИЗ СтруктураПолей Цикл
			Результат.Вставить(КлючИЗначение.Ключ, Выборка[КлючИЗначение.Ключ]);
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

// Возвращает признак возможности обращения к разделенным данным из текущего сеанса.
// В случае вызова в неразделенной конфигурации возвращает Истина.
//
// Возвращаемое значение:
// Булево.
//
Функция ДоступноИспользованиеРазделенныхДанных() Экспорт
	
	Возврат Истина;
	
КонецФункции

// Возвращает признак наличия в конфигурации общих реквизитов-разделителей.
//
// Возвращаемое значение:
// Булево.
//
Функция ЭтоРазделеннаяКонфигурация() Экспорт
	
	ЕстьРазделители = Ложь;
	Для каждого ОбщийРеквизит Из Метаданные.ОбщиеРеквизиты Цикл
		Если ОбщийРеквизит.РазделениеДанных = Метаданные.СвойстваОбъектов.РазделениеДанныхОбщегоРеквизита.Разделять Тогда
			ЕстьРазделители = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ЕстьРазделители;
	
КонецФункции

// Возвращает признак того, что объект метаданных используется в общих реквизитах-разделителях.
//
// Параметры:
// ИмяОбъектаМетаданных - Строка.
// Разделитель - имя общего реквизита-разделителя, на разделение которыми проверяется объект метаданных.
//
// Возвращаемое значение:
// Булево.
//
Функция ЭтоРазделенныйОбъектМетаданных(Знач ИмяОбъектаМетаданных, Знач Разделитель) Экспорт
	
	Возврат ОбщегоНазначения.ЭтоРазделенныйОбъектМетаданных(ИмяОбъектаМетаданных, Разделитель);
	
КонецФункции

// Возвращает имя общего реквизита, который является разделителем основных данных.
//
// Возвращаемое значение: Строка.
//
Функция РазделительОсновныхДанных() Экспорт
	
	Результат = "";
	Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса.БазоваяФункциональностьВМоделиСервиса") Тогда
		МодульРаботаВМоделиСервиса = ОбщегоНазначенияКлиентСервер.ОбщийМодуль("РаботаВМоделиСервиса");
		Результат = МодульРаботаВМоделиСервиса.РазделительОсновныхДанных();
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает имя общего реквизита, который является разделителем вспомогательных данных.
//
// Возвращаемое значение: Строка.
//
Функция РазделительВспомогательныхДанных() Экспорт
	
	Результат = "";
	Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса.БазоваяФункциональностьВМоделиСервиса") Тогда
		МодульРаботаВМоделиСервиса = ОбщегоНазначенияКлиентСервер.ОбщийМодуль("РаботаВМоделиСервиса");
		Результат = МодульРаботаВМоделиСервиса.РазделительВспомогательныхДанных();
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Функция возвращает имя каталога временных файлов.
//
// Возвращаемое значение:
//	Строка - путь к каталогу временных файлов.
//
Функция КаталогВременногоХранилищаФайлов() Экспорт
	
	Возврат КаталогВременныхФайлов();
	
КонецФункции

// Определяет, сеанс запущен с разделителями или без.
//
// Возвращаемое значение:
// Булево.
//
Функция СеансЗапущенБезРазделителей() Экспорт
	
	Возврат ПользователиИнформационнойБазы.ТекущийПользователь().РазделениеДанных.Количество() = 0;
	
КонецФункции

// Функция возвращает объект WSПрокси созданный с переданными параметрами.
//
// Параметры соответствуют конструктору объекта WSПрокси.
//
Функция WSПрокси(Знач АдресWSDL, Знач URIПространстваИмен, Знач ИмяСервиса,
	Знач ИмяТочкиПодключения = "", Знач ИмяПользователя, Знач Пароль, Знач Таймаут = Неопределено) Экспорт
	
	Протокол = "";
	Позиция = Найти(АдресWSDL, "://");
	Если Позиция > 0 Тогда
		Протокол = НРег(Лев(АдресWSDL, Позиция - 1));
	КонецЕсли;
	
	ЗащищенноеСоединение = Неопределено;
	Если (Протокол = "https" Или Протокол = "ftps") Тогда
		ЗащищенноеСоединение = ОбщегоНазначенияКлиентСервер.НовоеЗащищенноеСоединение();
	КонецЕсли;
	
	Параметры = Новый Массив;
	Параметры.Добавить(АдресWSDL);
	Параметры.Добавить(ИмяПользователя);
	Параметры.Добавить(Пароль);
	Параметры.Добавить(Таймаут);
	
	СистемнаяИнформация = Новый СистемнаяИнформация;
	Если Найти(СистемнаяИнформация.ВерсияПриложения, "8.2.") = 0 И ЗащищенноеСоединение <> Неопределено Тогда
		Параметры.Добавить(ЗащищенноеСоединение);
	КонецЕсли;
	
	WSОпределения = Новый(Тип("WSОпределения"), Параметры);
	
	Если ПустаяСтрока(ИмяТочкиПодключения) Тогда
		ИмяТочкиПодключения = ИмяСервиса + "Soap";
	КонецЕсли;
	
	Параметры = Новый Массив;
	Параметры.Добавить(WSОпределения);
	Параметры.Добавить(URIПространстваИмен);
	Параметры.Добавить(ИмяСервиса);
	Параметры.Добавить(ИмяТочкиПодключения);
	Параметры.Добавить(Таймаут);
	
	Если Найти(СистемнаяИнформация.ВерсияПриложения, "8.2.") = 0 И ЗащищенноеСоединение <> Неопределено Тогда
		Параметры.Добавить(ЗащищенноеСоединение);
	КонецЕсли;
	
	Прокси = Новый(Тип("WSПрокси"), Параметры);
	Прокси.Пользователь = ИмяПользователя;
	Прокси.Пароль = Пароль;
	
	Возврат Прокси;
	
КонецФункции
