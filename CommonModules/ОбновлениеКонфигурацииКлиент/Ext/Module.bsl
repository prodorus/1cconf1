////////////////////////////////////////////////////////////////////////////////
// Процедуры для проверки легальности получения обновления

#Если Не ВебКлиент Тогда

// Возвращает структуру ответа веб-сервера
//
Функция ПроверитьЛегальностьСкачиванияОбновления(ПараметрыЗапроса) Экспорт
	
	Попытка
	// Создание описания сервиса
		ОписаниеСервиса = ОписаниеСервисаПроверкиЛегальности();
	Исключение
		ТекстОшибки = НСтр("ru = 'Ошибка создания описания веб-сервиса проверки легальности получения обновления.'");
		Возврат СтруктураОтветаВебСервера(ТекстОшибки,,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	// Определение доступности веб-сервиса
	Попытка
		
		ОтветСервера = СервисДоступен(ОписаниеСервиса);
		
		Если НРег(СокрЛП(ОтветСервера)) <> "ready" Тогда
			
			ТекстОшибки = НСтр("ru = 'Сервис проверки легальности получения обновлений временно недоступен.
				|Повторите попытку позднее'");
			Возврат СтруктураОтветаВебСервера(ТекстОшибки, ОтветСервера);
			
		КонецЕсли;
		
	Исключение
		
		ТекстОшибки = НСтр("ru = 'Не удалось подключиться к сервису проверки легальности получения обновлений.
			|Проверьте параметры подключения к Интернету'");
		Возврат СтруктураОтветаВебСервера(ТекстОшибки,,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
	// Получение ответа с веб-сервиса.
	Возврат ПроверитьЛегальностьПолученияОбновлений(ПараметрыЗапроса, ОписаниеСервиса);
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции для работы с веб-сервисом проверки легальности на "высоком уровне".

// Добавляет из структуры параметры в запрос.
//
// Параметры:
//	ОписаниеСервисаПроверкиЛегальности (Структура) - описание соединения с веб-сервисом проверки легальности
//	ПараметрыЗапроса - Строка -  уже сформированные параметры.
//	СписокПараметров - ОбъектXDTO - список значений параметров.
//
Процедура ДобавитьПараметрыКЗапросу(ОписаниеСервисаПроверкиЛегальности, ПараметрыЗапроса, СписокПараметров)
	
	ТипПараметр = ОписаниеСервисаПроверкиЛегальности.ФабрикаXDTO.Тип(ОписаниеСервисаПроверкиЛегальности.URIСервиса, "Parameter");
	КоличествоПараметров = 0;
	
	Для Каждого ПараметрПередачи Из СписокПараметров Цикл 
		
		// Определение объекта параметра (Объект XDTO).
		Параметр = ОписаниеСервисаПроверкиЛегальности.ФабрикаXDTO.Создать(ТипПараметр);
		
		Параметр.name  = СокрЛП(ПараметрПередачи.Ключ);
		Параметр.value = СокрЛП(ПараметрПередачи.Значение);
		Параметр.index = КоличествоПараметров;
		
		ПараметрыЗапроса.parameter.Добавить(Параметр);
		
		КоличествоПараметров = КоличествоПараметров + 1;
		
	КонецЦикла;
	
КонецПроцедуры

// Проверяет легальность скачивания обновления.
//
// Параметры:
//	ДополнительныеПараметры - Структура - дополнительные параметры для передачи веб-сервису;
//	ОписаниеСервисаПроверкиЛегальности (Структура) - описание соединения с веб-сервисом проверки легальности
//
// Возвращаемое значение:
//	Структура - структурированный ответ веб-сервера
//
Функция ПроверитьЛегальностьПолученияОбновлений(ДополнительныеПараметры, ОписаниеСервисаПроверкиЛегальности)
	
	Попытка
		
		ТипОтвета  = ОписаниеСервисаПроверкиЛегальности.ФабрикаXDTO.Тип(ОписаниеСервисаПроверкиЛегальности.URIСервиса, "ProcessResponseType");
		ТипЗапроса = ОписаниеСервисаПроверкиЛегальности.ФабрикаXDTO.Тип(ОписаниеСервисаПроверкиЛегальности.URIСервиса, "Parameters");
		
		ПараметрыЗапроса = ОписаниеСервисаПроверкиЛегальности.ФабрикаXDTO.Создать(ТипЗапроса);
		
		// Если имеются передаваемые параметры, то добавляем их.
		Если ДополнительныеПараметры <> Неопределено Тогда
			ДобавитьПараметрыКЗапросу(ОписаниеСервисаПроверкиЛегальности, ПараметрыЗапроса, ДополнительныеПараметры);
		КонецЕсли;
		
		// Выполнение метода "process" WEB-Сервиса.
		ОтветСервера = ОбновлениеПолученоЛегально(ПараметрыЗапроса, ОписаниеСервисаПроверкиЛегальности);
		
	Исключение
		
		ТекстОшибки = НСтр("ru = 'Ошибка выполнения проверки легальности получения обновления.
			|Обратитесь к администратору'");
		Возврат СтруктураОтветаВебСервера(ТекстОшибки,,,,ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
	СтруктураКоманды = ОтветСервера.command[0];
	
	Если СтруктураКоманды.name = "store.put" Тогда
		
		ПараметрыОтвета = СтруктураКоманды.parameters.parameter;
		
		Результат = Новый Структура;
		Для Каждого Параметр Из ПараметрыОтвета Цикл
			
			Результат.Вставить(Параметр.name, Параметр.value);
			
		КонецЦикла;
		
		Результат = СтруктураОтветаВебСервера(Результат.resultTextError,
			Результат.resultCodeError, Результат.resultAvtorisation, Ложь);
		
	Иначе
		
		Результат = СтруктураОтветаВебСервера(Нстр("ru = 'Неожиданный ответ сервиса проверки легальности получения обновлений'"));
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает ответ сервера в виде структуры
//
Функция СтруктураОтветаВебСервера(ТекстОшибки, КодОшибки = 0, ЗначениеРезультата = Ложь,
	ЗаписьВЖурналРегистрации = Истина, ТекстСообщения = "")
	
	СтруктураОтвета = Новый Структура;
	
	СтруктураОтвета.Вставить("ЗначениеРезультата", Булево(ЗначениеРезультата));
	СтруктураОтвета.Вставить("ТекстОшибки", Строка(ТекстОшибки));
	
	Если ЗаписьВЖурналРегистрации Тогда
		
		Если ПустаяСтрока(ТекстСообщения) Тогда
			ТекстСообщения = Нстр("ru = '%ТекстОшибки. Код ошибки: %КодОшибки.'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТекстОшибки", ТекстОшибки);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КодОшибки", КодОшибки);
		КонецЕсли;
		
		ОбщегоНазначения.ЗаписатьОшибкуВЖурналРегистрации(СобытиеЖурналаРегистрации(), ТекстСообщения);
		
	КонецЕсли;
	
	Возврат СтруктураОтвета;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции для работы с веб-сервисом проверки легальности на "низком уровне".

// Получить адрес сервиса проверки легальности получения обновления.
//
// Возвращаемое значение:
//   Строка   – адрес сервиса.
//
Функция АдресСервисаПроверкиЛегальности() Экспорт
	
	Возврат "https://webits.1c.ru/services/WebItsSimpleService?wsdl";
	
КонецФункции

// Формирует описание веб-сервиса из WSDL-документа для дальнейшей работы
// с веб-сервисом проверки легальности.
//
// Возвращаемое значение:
//	Структура со свойствами:
//		АдресWSDL (Строка) - URL WSDL-документа;
//			выполняется с использованием временных файлов;
//		ФабрикаXDTO (ФабрикаXDTO) - Фабрика XDTO веб-сервиса;
//		URIСервиса (Строка) - URI веб-сервиса проверки легальности;
//		СоединениеПорта (HTTPСоединение) - соединение с портом сервиса
//			для выполнения вызовов методов веб-сервиса;
//		ПутьПорта (Строка) - путь порта на сервере;
//	
Функция ОписаниеСервисаПроверкиЛегальности()
	
	АдресWSDL = АдресСервисаПроверкиЛегальности();
	ПараметрыСоединения = СтруктураURI(АдресWSDL);
	
	Результат = Новый Структура("АдресWSDL", АдресWSDL);
	
	ТаймаутСети = 10;
	
	HTTP = Новый HTTPСоединение(ПараметрыСоединения.Хост,
		ПараметрыСоединения.Порт,
		ПараметрыСоединения.Логин,
		ПараметрыСоединения.Пароль,
		,
		ТаймаутСети,
		?(ПараметрыСоединения.Схема = "https",
			Новый ЗащищенноеСоединениеOpenSSL(),
			Неопределено));
	
	Попытка
		
		HTTPЗапрос = Новый HTTPЗапрос(ПараметрыСоединения.ПутьНаСервере);
		Ответ = HTTP.Получить(HTTPЗапрос);
		ТекстWSDL = Ответ.ПолучитьТелоКакСтроку();
		
	Исключение
		ТекстИсключения = ПодставитьПараметрыВСтроку(НСтр("ru = 'Ошибка при создании описания веб-сервиса.
			|Не удалось получить WSDL-описание с сервера проверки легальности скачивания обновления (%1): %2.'"),
			АдресWSDL, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение ТекстИсключения;
	КонецПопытки;
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(ТекстWSDL);
	
	ПостроительDOM = Новый ПостроительDOM;
	Попытка
		ДокументDOM = ПостроительDOM.Прочитать(ЧтениеXML);
	Исключение
		ТекстИсключения = ПодставитьПараметрыВСтроку(НСтр("ru = 'Ошибка при создании описания веб-сервиса (%1).
			|Ошибка чтения WSDL-описания веб-сервиса проверки легальности скачивания обновления: %2.'"),
			АдресWSDL, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение ТекстИсключения;
	КонецПопытки;
	
	// Создание фабрики XDTO веб-сервиса проверки легальности
	
	УзлыСхемы = ДокументDOM.ПолучитьЭлементыПоИмени("wsdl:types");
	Если УзлыСхемы.Количество() = 0 Тогда
		
		ТекстИсключения = ПодставитьПараметрыВСтроку(НСтр("ru = 'Ошибка при создании описания веб-сервиса (%1).
			|Ошибка чтения WSDL-описания веб-сервиса проверки легальности скачивания обновления:
			|Отсутствует элемент описания типов данных (<wsdl:types ...>).'"), АдресWSDL);
		ВызватьИсключение ТекстИсключения;
		
	КонецЕсли;
	
	УзелОписанияСхемы = УзлыСхемы[0].ПервыйДочерний;
	Если УзелОписанияСхемы = Неопределено Тогда
		
		ТекстИсключения = ПодставитьПараметрыВСтроку(НСтр("ru = 'Ошибка при создании описания веб-сервиса (%1).
			|Ошибка чтения WSDL-описания веб-сервиса проверки легальности скачивания обновления:
			|Отсутствует элемент описания типов данных (<xs:schema ...>)'"), АдресWSDL);
		ВызватьИсключение ТекстИсключения;
		
	КонецЕсли;
	
	ПостроительСхемы = Новый ПостроительСхемXML;
	
	Попытка
		СхемаДанныхСервиса = ПостроительСхемы.СоздатьСхемуXML(УзелОписанияСхемы);
	Исключение
		
		ТекстИсключения = ПодставитьПараметрыВСтроку(НСтр("ru = 'Ошибка при создании описания веб-сервиса (%1).
			|Ошибка при создании схемы данных из WSDL-описания веб-сервиса проверки легальности скачивания обновления:
			|%2'"), АдресWSDL, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение ТекстИсключения;
		
	КонецПопытки;
	
	НаборСхем = Новый НаборСхемXML;
	НаборСхем.Добавить(СхемаДанныхСервиса);
	
	Попытка
		ФабрикаСервиса = Новый ФабрикаXDTO(НаборСхем);
	Исключение
		
		ТекстИсключения = ПодставитьПараметрыВСтроку(НСтр("ru = 'Ошибка при создании описания веб-сервиса (%1).
			|Ошибка при создании фабрики XDTO из WSDL-описания веб-сервиса проверки легальности скачивания обновления: %2'"),
			АдресWSDL, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение ТекстИсключения;
		
	КонецПопытки;
	
	// Определение параметров подключения к порту сервиса
	
	КорневойЭлемент = ДокументDOM.ПервыйДочерний;
	
	Результат.Вставить("ФабрикаXDTO", ФабрикаСервиса);
	
	URIСервиса = ЗначениеАтрибутаУзлаDOM(КорневойЭлемент, "targetNamespace");
	Если НЕ ЗначениеЗаполнено(URIСервиса) Тогда
		
		ТекстИсключения = ПодставитьПараметрыВСтроку(НСтр("ru = 'Ошибка при создании описания веб-сервиса (%1).
			|Ошибка чтения WSDL-описания веб-сервиса проверки легальности скачивания обновления:
			|Отсутствует URI пространства имен в WSDL-описании.'"), АдресWSDL);
		ВызватьИсключение ТекстИсключения;
		
	КонецЕсли;
	
	Результат.Вставить("URIСервиса" , URIСервиса);
	
	// Определение адреса порта веб-сервиса
	УзлыСервисов = КорневойЭлемент.ПолучитьЭлементыПоИмени("wsdl:service");
	Если УзлыСервисов.Количество() = 0 Тогда
		
		ТекстИсключения = ПодставитьПараметрыВСтроку(НСтр("ru = 'Ошибка при создании описания веб-сервиса (%1).
			|Ошибка чтения WSDL-описания веб-сервиса проверки легальности скачивания обновления:
			|Отсутствует описание веб-сервисов в WSDL-описании (<wsdl:service ...>).'"), АдресWSDL);
		ВызватьИсключение ТекстИсключения;
		
	КонецЕсли;
	
	УзелСервиса = УзлыСервисов[0];
	
	ИмяСервиса = ЗначениеАтрибутаУзлаDOM(УзелСервиса, "name");
	
	УзлыПортов = УзелСервиса.ПолучитьЭлементыПоИмени("wsdl:port");
	
	Если УзлыПортов.Количество() = 0 Тогда
		
		ТекстИсключения = ПодставитьПараметрыВСтроку(НСтр("ru = 'Ошибка при создании описания веб-сервиса (%1).
			|Ошибка чтения WSDL-описания веб-сервиса проверки легальности скачивания обновления:
			|Отсутствует описание портов в WSDL-описании (<wsdl:port ...>).'"), АдресWSDL);
		ВызватьИсключение ТекстИсключения;
		
	КонецЕсли;
	
	УзелПорта = УзлыПортов[0];
	ИмяПорта  = ЗначениеАтрибутаУзлаDOM(УзелПорта, "name");
	
	Если НЕ ЗначениеЗаполнено(ИмяПорта) Тогда
		
		ТекстИсключения = СтрЗаменить(НСтр("ru = 'Ошибка при создании описания веб-сервиса (%1).
			|Ошибка чтения WSDL-описания веб-сервиса интернет-поддержки пользователей:
			|Не удалось определить имя порта сервиса (%2)."), АдресWSDL, ИмяСервиса);
		
		ВызватьИсключение ТекстИсключения;
		
	КонецЕсли;
	
	АдресПорта = Неопределено;
	УзлыАдреса = УзелПорта.ПолучитьЭлементыПоИмени("soap:address");
	Если УзлыАдреса.Количество() > 0 Тогда
		АдресПорта = ЗначениеАтрибутаУзлаDOM(УзлыАдреса[0], "location");
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(АдресПорта) Тогда
		
		ТекстИсключения = ПодставитьПараметрыВСтроку(НСтр("ru = 'Ошибка при создании описания веб-сервиса (%1).
				|Ошибка чтения WSDL-описания веб-сервиса интернет-поддержки пользователей:
				|Не удалось определить URL заданного порта сервиса (%2).'"), АдресWSDL, ИмяПорта);
		
		ВызватьИсключение ТекстИсключения;
		
	КонецЕсли;
	
	СоединениеПорта = Новый HTTPСоединение(ПараметрыСоединения.Хост,
		ПараметрыСоединения.Порт,
		ПараметрыСоединения.Логин,
		ПараметрыСоединения.Пароль,
		,
		ТаймаутСети,
		?(ПараметрыСоединения.Схема = "https",
			Новый ЗащищенноеСоединениеOpenSSL(),
			Неопределено));
	
	Результат.Вставить("СоединениеПорта"       , СоединениеПорта);
	Результат.Вставить("ПутьПорта"             , ПараметрыСоединения.ПутьНаСервере);
	
	Возврат Результат;
	
КонецФункции

// Прокси-функция для вызова метода isReady() веб-сервиса проверки легальности
//
// Параметры:
//	ОписаниеСервисаПроверкиЛегальности (Структура) - описание веб-сервиса проверки легальности,
//		см. ОписаниеСервисаПроверкиЛегальности();
//
// Возвращаемое значение:
//	Строка:
//		значение, возвращенное методом isReady() веб-сервиса проверки легальности;
//
Функция СервисДоступен(ОписаниеСервисаПроверкиЛегальности)
	
	ЗаписьКонверта = НовыйЗаписьКонвертаSOAP();
	ТекстКонверта  = ТекстВКонвертеSOAP(ЗаписьКонверта);
	
	Попытка
		ТелоОтвета = ОтправитьЗапросSOAP(ТекстКонверта, ОписаниеСервисаПроверкиЛегальности);
	Исключение
		
		ТекстИсключения = ПодставитьПараметрыВСтроку(НСтр("ru = 'Ошибка при вызове операции isReady сервиса (%1): %2'"),
			ОписаниеСервисаПроверкиЛегальности.АдресWSDL, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение ТекстИсключения;
		
	КонецПопытки;
	
	ТипОбъекта = ТипЗначенияКорневогоСвойстваФабрикиСервисаЛегальности("isReadyResponse", ОписаниеСервисаПроверкиЛегальности);
	Если ТипОбъекта = Неопределено Тогда
		ТекстИсключения = СтрЗаменить(НСтр("ru = 'Ошибка при вызове операции isReady сервиса (%1).
			|Не удалось определить тип корневого свойства isReadyResponse.'"),
			"%1",
			ОписаниеСервисаПроверкиЛегальности.АдресWSDL);
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	Попытка
		Значение = ПрочитатьОтветВКонвертеSOAP(ТелоОтвета, ОписаниеСервисаПроверкиЛегальности, ТипОбъекта);
	Исключение
		ТекстИсключения = СтрЗаменить(НСтр("ru = 'Ошибка при вызове операции isReady сервиса (%1).'"),
			"%1",
			ОписаниеСервисаПроверкиЛегальности.АдресWSDL)
			+ Символы.ПС
			+ ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
			+ Символы.ПС + Символы.ПС
			+ НСтр("ru = 'Тело запроса:'")
			+ Символы.ПС
			+ ТекстКонверта;
		
		ВызватьИсключение ТекстИсключения;
	КонецПопытки;
	
	Если ТипЗнч(Значение) = Тип("Структура") Тогда
		
		// Возвращено описание исключения SOAP
		ТекстИсключения = ПодставитьПараметрыВСтроку(НСтр("ru = 'Ошибка при вызове операции isReady сервиса (%1)
			|Ошибка SOAP: %2'"), ОписаниеСервисаПроверкиЛегальности.АдресWSDL, ОписаниеИсключенияSOAPВСтроку(Значение));
		ВызватьИсключение ТекстИсключения;
		
	ИначеЕсли ТипЗнч(Значение) = Тип("ЗначениеXDTO") Тогда
		Возврат Значение.Значение;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Метод веб-сервиса для проверки легальности получения обновления
//
// Параметры:
//	ПараметрыЗапроса (ОбъектXDTO) - параметры запроса метода process();
//	ОписаниеСервисаПроверкиЛегальности (Структура) - описание веб-сервиса проверки легальности,
//		см. ОписаниеСервисаПроверкиЛегальности();
//
// Возвращаемое значение:
//	ОбъектXDTO:
//		значение, возвращенное методом process() веб-сервиса проверки легальности;
//
Функция ОбновлениеПолученоЛегально(ПараметрыЗапроса, ОписаниеСервисаПроверкиЛегальности)
	
	ЗаписьКонверта = НовыйЗаписьКонвертаSOAP();
	
	ЗаписьКонверта.ЗаписатьНачалоЭлемента("m:processRequest");
	ЗаписьКонверта.ЗаписатьАтрибут("xmlns:m", ОписаниеСервисаПроверкиЛегальности.URIСервиса);
	
	ОписаниеСервисаПроверкиЛегальности.ФабрикаXDTO.ЗаписатьXML(ЗаписьКонверта,
		ПараметрыЗапроса,
		"parameters",
		,
		ФормаXML.Элемент,
		НазначениеТипаXML.Явное);
	
	ЗаписьКонверта.ЗаписатьКонецЭлемента(); // </m:processRequest>
	
	ТекстКонверта = ТекстВКонвертеSOAP(ЗаписьКонверта);
	
	Попытка
		ТелоОтвета = ОтправитьЗапросSOAP(ТекстКонверта, ОписаниеСервисаПроверкиЛегальности);
	Исключение
		
		ТекстИсключения = ПодставитьПараметрыВСтроку(НСтр("ru = 'Ошибка при вызове операции process сервиса (%1): %2'"),
			ОписаниеСервисаПроверкиЛегальности.АдресWSDL, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение ТекстИсключения;
		
	КонецПопытки;
	
	ТипОбъекта = ТипЗначенияКорневогоСвойстваФабрикиСервисаЛегальности("processResponse", ОписаниеСервисаПроверкиЛегальности);
	Если ТипОбъекта = Неопределено Тогда
		ТекстИсключения = СтрЗаменить(НСтр("ru = 'Ошибка при вызове операции process сервиса (%1).
			|Не удалось определить тип корневого свойства processResponse.'"),
			"%1",
			ОписаниеСервисаПроверкиЛегальности.АдресWSDL);
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	Попытка
		Значение = ПрочитатьОтветВКонвертеSOAP(ТелоОтвета, ОписаниеСервисаПроверкиЛегальности, ТипОбъекта);
	Исключение
		
		ТекстИсключения = СтрЗаменить(НСтр("ru = 'Ошибка при вызове операции process сервиса (%1).'"),
			"%1",
			ОписаниеСервисаПроверкиЛегальности.АдресWSDL)
			+ Символы.ПС
			+ ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
			+ Символы.ПС + Символы.ПС
			+ НСтр("ru = 'Тело запроса:'")
			+ Символы.ПС
			+ ТекстКонверта;
		
		ВызватьИсключение ТекстИсключения;
		
	КонецПопытки;
	
	Если ТипЗнч(Значение) = Тип("ОбъектXDTO") Тогда
		Возврат Значение.commands;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Возвращает строковое значение атрибута узла DOM-документа.
//
// Параметры:
//	УзелDOM (УзелDOM) - узел DOM-документа;
//	ИмяАтрибута (Строка) - полное имя атрибута;
//	ЗначениеЕслиНеНайдено (Произвольный) - значение, если атрибут не найден;
//
// Возвращаемое значение:
//	Строка:
//		Строковое значение атрибута узла;
//
Функция ЗначениеАтрибутаУзлаDOM(УзелDOM, ИмяАтрибута, ЗначениеЕслиНеНайдено = Неопределено)
	
	Атрибут = УзелDOM.Атрибуты.ПолучитьИменованныйЭлемент(ИмяАтрибута);
	
	Если Атрибут = Неопределено Тогда
		Возврат ЗначениеЕслиНеНайдено;
	Иначе
		Возврат Атрибут.Значение;
	КонецЕсли;
	
КонецФункции

// Определяет тип значения корневого свойства пакета фабрики XDTO
// веб-сервиса проверки легальности.
//
// Параметры:
//	ИмяСвойства (Строка) - имя корневого свойства;
//	ОписаниеСервисаПроверкиЛегальности (Структура) - описание веб-сервиса проверки легальности,
//		см. ОписаниеСервисаПроверкиЛегальности();
//
// Возвращаемое значение:
//	ТипЗначенияXDTO;
//	ТипОбъектаXDTO;
//	Неопределено - если корневое свойство не найдено;
//
Функция ТипЗначенияКорневогоСвойстваФабрикиСервисаЛегальности(ИмяСвойства, ОписаниеСервисаПроверкиЛегальности)
	
	Пакет            = ОписаниеСервисаПроверкиЛегальности.ФабрикаXDTO.Пакеты.Получить(ОписаниеСервисаПроверкиЛегальности.URIСервиса);
	КорневоеСвойство = Пакет.КорневыеСвойства.Получить(ИмяСвойства);
	Если КорневоеСвойство = Неопределено Тогда
		Возврат Неопределено;
	Иначе
		Возврат КорневоеСвойство.Тип;
	КонецЕсли;
	
КонецФункции

// Формирует объект тип ЗаписьXML с уже записанными
// SOAP-заголовками;
//
// Возвращаемое значение:
//	ЗаписьXML:
//		объект записи XML с записанными SOAP-заголовками;
//
Функция НовыйЗаписьКонвертаSOAP()
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("soap:Envelope");
	ЗаписьXML.ЗаписатьАтрибут("xmlns:soap", "http://schemas.xmlsoap.org/soap/envelope/");
	ЗаписьXML.ЗаписатьНачалоЭлемента("soap:Header");
	ЗаписьXML.ЗаписатьКонецЭлемента(); // </soap:Header>
	ЗаписьXML.ЗаписатьНачалоЭлемента("soap:Body");
	
	Возврат ЗаписьXML;
	
КонецФункции

// Финализирует запись конверта SOAP и возвращает текст конверта.
//
// Параметры:
//	ЗаписьКонверта (ЗаписьXML) - объект, в который выполнялась запись конверта;
//
// Возвращаемое значение:
//	Строка: текст конверта SOAP;
//
Функция ТекстВКонвертеSOAP(ЗаписьКонверта)
	
	ЗаписьКонверта.ЗаписатьКонецЭлемента(); // </soap:Body>
	ЗаписьКонверта.ЗаписатьКонецЭлемента(); // </soap:Envelope>
	
	Возврат ЗаписьКонверта.Закрыть();
	
КонецФункции

// Выполняет отправку SOAP-конверта веб-сервису и получает ответный
// SOAP-конверт.
//
// Параметры:
//	ТекстКонверта (Строка) - текст конверта-запроса;
//	ОписаниеСервисаПроверкиЛегальности (Структура) - описание веб-сервиса проверки легальности,
//		см. ОписаниеСервисаПроверкиЛегальности();
//
// Возвращаемое значение:
//	Строка: текст SOAP-конверта-ответа;
//
Функция ОтправитьЗапросSOAP(ТекстКонверта, ОписаниеСервисаПроверкиЛегальности)
	
	HTTPЗапрос = Новый HTTPЗапрос(ОписаниеСервисаПроверкиЛегальности.ПутьПорта);
	HTTPЗапрос.Заголовки["Content-Type"] = "text/xml;charset=UTF-8";
	HTTPЗапрос.УстановитьТелоИзСтроки(ТекстКонверта);
	
	Попытка
		HTTPОтвет = ОписаниеСервисаПроверкиЛегальности.СоединениеПорта.ОтправитьДляОбработки(HTTPЗапрос);
	Исключение
		ТекстИсключения = НСтр("ru = 'Ошибка сетевого соединения при отправке SOAP-запроса.'")
			+ Символы.ПС
			+ ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ВызватьИсключение ТекстИсключения;
	КонецПопытки;
	
	ТелоОтвета = HTTPОтвет.ПолучитьТелоКакСтроку();
	
	Возврат ТелоОтвета;
	
КонецФункции

// Выполняет чтение объекта или значения в ответном SOAP-конверте в
// соответствии с фабрикой типов XDTO веб-сервиса.
//
// Параметры:
//	ТелоОтвета (Строка) - тело в SOAP-конверта-ответа;
//	ОписаниеСервисаПроверкиЛегальности (Структура) - описание веб-сервиса проверки легальности,
//		см. ОписаниеСервисаПроверкиЛегальности();
//	ТипЗначения (ТипЗначенияXDTO, ТипОбъектаXDTO) - тип читаемого значения;
//
Функция ПрочитатьОтветВКонвертеSOAP(ТелоОтвета, ОписаниеСервисаПроверкиЛегальности, ТипЗначения)
	
	ЧтениеОтвета = Новый ЧтениеXML;
	ЧтениеОтвета.УстановитьСтроку(ТелоОтвета);
	
	Попытка
		
		// Переход к телу ответа
		Пока ЧтениеОтвета.Имя <> "soap:Body" Цикл
			ЧтениеОтвета.Прочитать();
		КонецЦикла;
		
		// Переход к описанию объекта ответа
		ЧтениеОтвета.Прочитать();
		
	Исключение
		
		ТекстИсключения = ПодставитьПараметрыВСтроку(НСтр("ru = 'Ошибка чтения ответа SOAP:
			|%1
			|Тело ответа:
			|%2'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), ТелоОтвета);
		ВызватьИсключение ТекстИсключения;
		
	КонецПопытки;
	
	Если ЧтениеОтвета.ТипУзла = ТипУзлаXML.НачалоЭлемента
		И ВРег(ЧтениеОтвета.Имя) = "SOAP:FAULT" Тогда
		// Это исключение веб-сервиса
		Попытка
			ДеталиИсключения = ПрочитатьОписаниеИсключенияСервиса(ЧтениеОтвета);
		Исключение
			
			ТекстИсключения = ПодставитьПараметрыВСтроку(НСтр("ru = 'Ошибка чтения ответа SOAP:
				|%1
				|Тело ответа:
				|%2'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), ТелоОтвета);
			ВызватьИсключение ТекстИсключения;
			
		КонецПопытки;
		
		ТекстИсключения = ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ошибка SOAP-Сервера при обработке запроса: %1'"), ОписаниеИсключенияSOAPВСтроку(ДеталиИсключения));
		ВызватьИсключение ТекстИсключения;
		
	КонецЕсли;
	
	Попытка
		Значение = ОписаниеСервисаПроверкиЛегальности.ФабрикаXDTO.ПрочитатьXML(ЧтениеОтвета, ТипЗначения);
	Исключение
		
		ТекстИсключения = ПодставитьПараметрыВСтроку(НСтр("ru = 'Ошибка чтения объекта (%1) в конверте SOAP:
			|%2
			|Тело ответа:
			|%3'"), Строка(ТипЗначения), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), ТелоОтвета);
		ВызватьИсключение ТекстИсключения;
		
	КонецПопытки;
	
	Возврат Значение;
	
КонецФункции

// Если в ответном SOAP-конверте содержится описание ошибки,
// то выполняется чтение описания ошибки.
//
// Параметры:
//	ЧтениеОтвета (ЧтениеXML) - объект, используемый для чтения
//		ответного SOAP-конверта. На момент вызова спозиционирован на описании
//		исключения SOAP;
//
// Возвращаемое значение:
//	Структура со свойствами:
//		FaultCode (Строка), FaultString (Строка), FaultActor (Строка);
//
Функция ПрочитатьОписаниеИсключенияСервиса(ЧтениеОтвета)
	
	ОписаниеИсключения = Новый Структура("FaultCode, FaultString, FaultActor", "", "", "");
	
	Пока НЕ (ВРег(ЧтениеОтвета.Имя) = "SOAP:BODY" И ЧтениеОтвета.ТипУзла = ТипУзлаXML.КонецЭлемента) Цикл
		
		Если ЧтениеОтвета.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			ИмяУзлаВРег = ВРег(ЧтениеОтвета.Имя);
			
			Если ИмяУзлаВРег = "FAULTCODE"
				ИЛИ ИмяУзлаВРег = "FAULTSTRING"
				ИЛИ ИмяУзлаВРег = "FAULTACTOR" Тогда
				
				ЧтениеОтвета.Прочитать(); // Прочитать текст узла
				
				Если ЧтениеОтвета.ТипУзла = ТипУзлаXML.Текст Тогда
					ОписаниеИсключения[ИмяУзлаВРег] = ЧтениеОтвета.Значение;
				КонецЕсли;
				
				ЧтениеОтвета.Прочитать(); // Прочитать конец элемента
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ ЧтениеОтвета.Прочитать() Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ОписаниеИсключения;
	
КонецФункции

// Выполняет преобразование структуры-описателя исключения SOAP
// в строку для пользовательского представления;
//
// Параметры:
//	ИсключениеSOAP (Структура) - см. ПрочитатьОписаниеИсключенияСервиса();
//
// Возвращаемое значение:
//	Строка: пользовательское представление исключения SOAP;
//
Функция ОписаниеИсключенияSOAPВСтроку(ИсключениеSOAP)
	
	Результат = "";
	Если НЕ ПустаяСтрока(ИсключениеSOAP.FaultCode) Тогда
		Результат = ПодставитьПараметрыВСтроку(НСтр("ru = 'Код ошибки: %1'"), ИсключениеSOAP.FaultCode);
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ИсключениеSOAP.FaultString) Тогда
		ТекстОшибки = ПодставитьПараметрыВСтроку(НСтр("ru = 'Строка ошибки: %1'"), ИсключениеSOAP.FaultString);
		Результат = Результат + Символы.ПС + ТекстОшибки;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ИсключениеSOAP.FaultActor) Тогда
		ТекстОшибки = ПодставитьПараметрыВСтроку(НСтр("ru = 'Источник ошибки: %1'"), ИсключениеSOAP.FaultActor);
		Результат = Результат + Символы.ПС + ТекстОшибки;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Разбирает строку URI на составные части и возвращает в виде структуры.
// На основе RFC 3986.
//
// Параметры:
//  СтрокаURI - Строка - ссылка на ресурс в формате:
//    
//     <схема>://<логин>:<пароль>@<хост>:<порт>/<путь>?<параметры>#<якорь>
//               \______________/ \___________/
//                      |               |
//           	   авторизация     имя сервера
//               \____________________________/ \________________________/
//                              |                            |
//                       строка соединения            путь на сервере
//
// Возвращаемое значение:
//  Структура:
//             Схема         - Строка;
//             Логин         - Строка; 
//             Пароль        - Строка;
//             ИмяСервера    - Строка;
//             Хост          - Строка; 
//             Порт          - Строка; 
//             ПутьНаСервере - Строка;
//
Функция СтруктураURI(Знач СтрокаURI) Экспорт
	
	СтрокаURI = СокрЛП(СтрокаURI);
	
	// схема
	Схема = "";
	Позиция = Найти(СтрокаURI, "://");
	Если Позиция > 0 Тогда
		Схема = НРег(Лев(СтрокаURI, Позиция - 1));
		СтрокаURI = Сред(СтрокаURI, Позиция + 3);
	КонецЕсли;

	// строка соединения и путь на сервере
	СтрокаСоединения = СтрокаURI;
	ПутьНаСервере = "";
	Позиция = Найти(СтрокаСоединения, "/");
	Если Позиция > 0 Тогда
		ПутьНаСервере = Сред(СтрокаСоединения, Позиция + 1);
		СтрокаСоединения = Лев(СтрокаСоединения, Позиция - 1);
	КонецЕсли;
		
	// информация пользователя и имя сервера
	СтрокаАвторизации = "";
	ИмяСервера = СтрокаСоединения;
	Позиция = Найти(СтрокаСоединения, "@");
	Если Позиция > 0 Тогда
		СтрокаАвторизации = Лев(СтрокаСоединения, Позиция - 1);
		ИмяСервера = Сред(СтрокаСоединения, Позиция + 1);
	КонецЕсли;
	
	// логин и пароль
	Логин = СтрокаАвторизации;
	Пароль = "";
	Позиция = Найти(СтрокаАвторизации, ":");
	Если Позиция > 0 Тогда
		Логин = Лев(СтрокаАвторизации, Позиция - 1);
		Пароль = Сред(СтрокаАвторизации, Позиция + 1);
	КонецЕсли;
	
	// хост и порт
	Хост = ИмяСервера;
	Порт = "";
	Позиция = Найти(ИмяСервера, ":");
	Если Позиция > 0 Тогда
		Хост = Лев(ИмяСервера, Позиция - 1);
		Порт = Сред(ИмяСервера, Позиция + 1);
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("Схема", Схема);
	Результат.Вставить("Логин", Логин);
	Результат.Вставить("Пароль", Пароль);
	Результат.Вставить("ИмяСервера", ИмяСервера);
	Результат.Вставить("Хост", Хост);
	Результат.Вставить("Порт", ?(ПустаяСтрока(Порт), Неопределено, Число(Порт)));
	Результат.Вставить("ПутьНаСервере", ПутьНаСервере);
	
	Возврат Результат;
	
КонецФункции

#КонецЕсли

// Подставляет параметры в строку. Максимально возможное число параметров - 9.
// Параметры в строке задаются как %<номер параметра>. Нумерация параметров начинается с единицы.
//
// Параметры:
//  СтрокаПодстановки  – Строка – шаблон строки с параметрами (вхождениями вида "%ИмяПараметра");
//  Параметр<n>        - Строка - подставляемый параметр.
//
// Возвращаемое значение:
//  Строка   – текстовая строка с подставленными параметрами.
//
// Пример:
//  ПодставитьПараметрыВСтроку(НСтр("ru='%1 пошел в %2'"), "Вася", "Зоопарк") = "Вася пошел в Зоопарк".
//
Функция ПодставитьПараметрыВСтроку(Знач СтрокаПодстановки,
	Знач Параметр1, Знач Параметр2 = Неопределено, Знач Параметр3 = Неопределено,
	Знач Параметр4 = Неопределено, Знач Параметр5 = Неопределено, Знач Параметр6 = Неопределено,
	Знач Параметр7 = Неопределено, Знач Параметр8 = Неопределено, Знач Параметр9 = Неопределено) Экспорт
	
	СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%1", Параметр1);
	СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%2", Параметр2);
	СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%3", Параметр3);
	СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%4", Параметр4);
	СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%5", Параметр5);
	СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%6", Параметр6);
	СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%7", Параметр7);
	СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%8", Параметр8);
	СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%9", Параметр9);
	
	Возврат СтрокаПодстановки;
	
КонецФункции

// Возвращает имя события для записи журнала регистрации.
Функция СобытиеЖурналаРегистрации() Экспорт
	Возврат НСтр("ru = 'Обновление конфигурации'");
КонецФункции
////////////////////////////////////////////////////////////////////////////////
// Программный интерфейс подсистемы.

// Проверяет наличие обновления конфигурации при запуске программы.
//
Процедура ПроверитьОбновлениеКонфигурации() Экспорт
	
	#Если НЕ ВебКлиент Тогда
	ДоступноеОбновлениеКонфигурации = Неопределено;
	НастройкиОбновления = СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().НастройкиОбновления;
	НаличиеОбновления = НастройкиОбновления.ПроверитьПрошлыеОбновленияБазы;
	Если НЕ НаличиеОбновления И НастройкиОбновления.ЕстьДоступДляОбновления Тогда
		НаличиеОбновления = НастройкиОбновления.КонфигурацияИзменена;
	КонецЕсли;
	НаименованиеСтраницыДоступногоОбновления	= "ДоступноеОбновление";
	НаименованиеСтраницыФайлОбновления			= "ФайлОбновления";
	ЕстьДоступноеОбновлениеВИнтернете			= Ложь;
	НастройкиОбновленияКонфигурации				= НастройкиОбновления.НастройкиОбновленияКонфигурации;
	
	Если НЕ НаличиеОбновления И НастройкиОбновленияКонфигурации <> Неопределено
		И НастройкиОбновления.ЕстьДоступДляПроверкиОбновления И
		(НастройкиОбновленияКонфигурации.ПроверятьНаличиеОбновленияПриЗапуске = 1 ИЛИ
		 НастройкиОбновленияКонфигурации.ПроверятьНаличиеОбновленияПриЗапуске = 2) Тогда
		 
		// Подключение обработчика ожидания для проверки наличия обновления в интернете.
		Если НастройкиОбновленияКонфигурации <> Неопределено Тогда
			Если НастройкиОбновленияКонфигурации.ПроверятьНаличиеОбновленияПриЗапуске = 1  
				И НастройкиОбновленияКонфигурации.РасписаниеПроверкиНаличияОбновления <> Неопределено Тогда
				ПодключитьОтключитьПроверкуПоРасписанию(Истина);
			КонецЕсли;
		КонецЕсли;
		
		Параметры = ПолучитьДоступноеОбновлениеКонфигурации();
		// Если расписание не задано, то проверяем наличие обновления сейчас.
		Если НастройкиОбновленияКонфигурации.ПроверятьНаличиеОбновленияПриЗапуске = 2 Тогда
			ПроверитьНаличиеОбновленияЧерезИнтернет();
			ЕстьДоступноеОбновлениеВИнтернете = НастройкиОбновленияКонфигурации.ИсточникОбновления <> -1 
				И Параметры.ИмяСтраницы = НаименованиеСтраницыДоступногоОбновления;
			Если НЕ НаличиеОбновления И ЕстьДоступноеОбновлениеВИнтернете Тогда
				НаличиеОбновления = ЕстьДоступноеОбновлениеВИнтернете;
			КонецЕсли;
		КонецЕсли;
		Если Не НаличиеОбновления Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если НастройкиОбновления.КонфигурацияИзменена И НастройкиОбновления.ЕстьДоступДляПроверкиОбновления Тогда
		Настройки = ОбновлениеКонфигурацииКлиентСервер.ПолучитьОбновленныеНастройкиОбновленияКонфигурации(НастройкиОбновленияКонфигурации);
		Настройки.ИсточникОбновления	= 2;  // локальный или сетевой каталог
		Настройки.НуженФайлОбновления	= Ложь;
		ОбновлениеКонфигурации.ЗаписатьСтруктуруНастроекПомощника(НастройкиОбновленияКонфигурации);
		
		Параметры = ПолучитьДоступноеОбновлениеКонфигурации();
		Параметры.ИсточникОбновления = НастройкиОбновленияКонфигурации.ИсточникОбновления;
		Параметры.НуженФайлОбновления = НастройкиОбновленияКонфигурации.НуженФайлОбновления;
		Параметры.ФлагАвтоПереходаНаСтраницуСОбновлением = Истина;
		#Если ТолстыйКлиентОбычноеПриложение Тогда
			ОткрытьФорму("Обработка.ОбновлениеКонфигурации.Форма.Форма");
		#Иначе
		ПоказатьОповещениеПользователя(НСтр("ru = 'Обновление конфигурации'"),
			"e1cib/app/Обработка.ОбновлениеКонфигурации",
			НСтр("ru = 'Конфигурация отличается от основной конфигурации информационной базы.'"), 
			БиблиотекаКартинок.Информация32);
		#КонецЕсли
		Возврат;
	КонецЕсли;	
	
	Если ЕстьДоступноеОбновлениеВИнтернете И НастройкиОбновления.ЕстьДоступДляПроверкиОбновления Тогда
		Настройки = ОбновлениеКонфигурацииКлиентСервер.ПолучитьОбновленныеНастройкиОбновленияКонфигурации(НастройкиОбновленияКонфигурации);
		Настройки.ИсточникОбновления	= 0;  // интернет
		ОбновлениеКонфигурации.ЗаписатьСтруктуруНастроекПомощника(НастройкиОбновленияКонфигурации);
		
		Параметры = ПолучитьДоступноеОбновлениеКонфигурации();
		Параметры.ИсточникОбновления = НастройкиОбновленияКонфигурации.ИсточникОбновления;
		Параметры.НуженФайлОбновления = НастройкиОбновленияКонфигурации.НуженФайлОбновления;
		Параметры.ФлагАвтоПереходаНаСтраницуСОбновлением = Истина;
		#Если ТолстыйКлиентОбычноеПриложение Тогда
			ОткрытьФорму("Обработка.ОбновлениеКонфигурации.Форма.Форма");
		#Иначе
		ПоказатьОповещениеПользователя(НСтр("ru = 'Доступно обновление конфигурации'"),
			"e1cib/app/Обработка.ОбновлениеКонфигурации",
			НСтр("ru = 'Версия: '")	+ Параметры.ПараметрыФайлаПроверкиОбновления.Version, 
			БиблиотекаКартинок.Информация32);
		#КонецЕсли
		Возврат;	
	КонецЕсли;
	
	Если НаличиеОбновления Тогда
		// Надо завершить предыдущее обновление.
		ОткрытьФорму("Обработка.ОбновлениеКонфигурации.Форма.Форма");
	КонецЕсли;
#КонецЕсли

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Вспомогательные процедуры и функции

// Возвращает общие параметры обновления.
//
Функция ПолучитьПараметрыОбновления() Экспорт
	#Если НЕ ВебКлиент Тогда
		
	СтруктураПараметров = Новый Структура();
		
	СтруктураПараметров.Вставить("ДатаВремяОбновленияУстановлена"	, Ложь);
	
	// Интернет
	СтруктураПараметров.Вставить("ИмяZipФайлаСпискаШаблонов"		, "v8upd11.zip");
	СтруктураПараметров.Вставить("ИмяФайлаСпискаШаблонов"			, "v8cscdsc.xml");
	СтруктураПараметров.Вставить("ИмяФайлаОписанияОбновления"		, "news.htm");
	СтруктураПараметров.Вставить("ИмяФайлаПорядкаОбновления"		, "update.htm");

	// Имена служебных файлов
	СтруктураПараметров.Вставить("ИмяФайлаПрограммы"				, "1cv8.exe");

	// Реклама
	СтруктураПараметров.Вставить("ФайлАрхиваРекламы"				, "INDEX.ZIP");
	СтруктураПараметров.Вставить("ФайлРекламы"						, "index.htm");
	
	СтруктураПараметров.Вставить("СобытиеЖурналаРегистрации"		, НСтр("ru = 'Обновление информационной базы'"));
	
	// Определение каталога временных файлов.
	СтруктураПараметров.Вставить("КаталогФайловОбновления"			, КаталогLocalAppData() + "1C\1Cv8Update\"); 
	СтруктураПараметров.Вставить("КаталогВременныхФайловОбновления"	, КаталогВременныхФайлов() + "1Cv8Update." + Формат(ТекущаяДата(), "ДФ=ггММддЧЧммсс") + "\");
	
	// Определение каталога рекламы.
	СтруктураПараметров.Вставить("ИмяКаталогаРекламы"				, СтруктураПараметров.КаталогФайловОбновления + "adv\");
	СтруктураПараметров.Вставить("ПутьКФайлуАрхиваРекламы"			, СтруктураПараметров.ИмяКаталогаРекламы + СтруктураПараметров.ФайлАрхиваРекламы);
	
	СтруктураПараметров.Вставить("АдресРесурсовДляПроверкиНаличияОбновления"						, АдресРесурсовДляПроверкиНаличияОбновления());
	СтруктураПараметров.Вставить("АдресСтраницыИнформацииОПолученииДоступаКПользовательскомуСайту"	, АдресСтраницыИнформацииОПолученииДоступаКПользовательскомуСайту());
	СтруктураПараметров.Вставить("АдресКаталогаШаблоновНаСервереОбновлений"							, АдресКаталогаШаблоновНаСервереОбновлений());
	СтруктураПараметров.Вставить("АдресСервераОбновлений"											, АдресСервераОбновлений());
	СтруктураПараметров.Вставить("ИмяФайлаПроверкиНаличияОбновления"								, ИмяФайлаПроверкиНаличияОбновления());
	
	// ИТС
	СтруктураПараметров.Вставить("ИмяФайлаАдресовРелизовИТС", "AutoUpdate.xml");
	
	Возврат СтруктураПараметров;
	#КонецЕсли
КонецФункции

// Возвращает параметры найденного (доступного) обновления конфигурации.
Функция ПолучитьДоступноеОбновлениеКонфигурации() Экспорт
	
	Если ДоступноеОбновлениеКонфигурации = Неопределено Тогда
		ДоступноеОбновлениеКонфигурации = Новый Структура(
			"ИсточникОбновления,НуженФайлОбновления,ФлагАвтоПереходаНаСтраницуСОбновлением," + 
			"ПараметрыФайлаПроверкиОбновления,ИмяСтраницы,ВремяПолученияОбновления,ПоследняяВерсияКонфигурации",
			-1,   // ИсточникОбновления
			Ложь, // НуженФайлОбновления
			Ложь, // ФлагАвтоПереходаНаСтраницуСОбновлением
			Неопределено, // ПараметрыФайлаПроверкиОбновления
			"",   // ИмяСтраницы
			ТекущаяДата(), // ВремяПолученияОбновления
			"" // ПоследняяВерсияКонфигурации
			);
	КонецЕсли;
	Возврат ДоступноеОбновлениеКонфигурации;
	
КонецФункции

// Получить адрес страницы на веб-сервере поставщика конфигурации, на которой находится
// информация о доступных обновлениях.
//
// Возвращаемое значение:
//   Строка   – адрес веб-страницы.
//
Функция АдресРесурсовДляПроверкиНаличияОбновления() Экспорт
	НастройкиОбновления = СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().НастройкиОбновления;
	КороткоеИмяКонфигурации = НастройкиОбновления.КороткоеИмяКонфигурации;
	КороткоеИмяКонфигурации = СтрЗаменить(КороткоеИмяКонфигурации, "\", "/");	
	Результат = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(НастройкиОбновления.АдресРесурсаДляПроверкиНаличияОбновления) +
		КороткоеИмяКонфигурации + "/";	
	Возврат Результат;
КонецФункции

// Получить адрес веб-страницы с информацией о том, как получить доступ к 
// пользовательскому разделу на сайте поставщика конфигурации.
//
// Возвращаемое значение:
//   Строка   – адрес веб-страницы.
Функция АдресСтраницыИнформацииОПолученииДоступаКПользовательскомуСайту() Экспорт
	
	Значение = "http://users.v8.1c.ru/Rules.aspx";  // Значение по умолчанию
	
	ЗначениеПереопределяемогоМодуля = ОбновлениеКонфигурацииКлиентПереопределяемый.АдресСтраницыИнформацииОПолученииДоступаКПользовательскомуСайту();
	Если НЕ ПустаяСтрока(ЗначениеПереопределяемогоМодуля) Тогда  // Переопределяемое значение
		Значение = ЗначениеПереопределяемогоМодуля;
	КонецЕсли;
	
	Возврат Значение;
КонецФункции

// Получить адрес каталога файлов обновления на сервере обновлений.
//
// Возвращаемое значение:
//   Строка   – адрес каталога на веб-сервере.
//
Функция АдресКаталогаШаблоновНаСервереОбновлений() Экспорт
	
	СерверОбновлений = СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().НастройкиОбновления.КаталогОбновлений;
	СерверОбновлений = СтрЗаменить(СерверОбновлений, "http://", "");  
	КаталогШаблоновНаСервере = "";
	Позиция = Найти(СерверОбновлений, "/");
	Если Позиция > 0 Тогда
		КаталогШаблоновНаСервере = Сред(СерверОбновлений, Позиция, СтрДлина(СерверОбновлений));
	КонецЕсли;
	Возврат КаталогШаблоновНаСервере;
	
КонецФункции

// Получить адрес сервера обновлений.
//
// Возвращаемое значение:
//   Строка   – адрес веб-сервера.
//
Функция АдресСервераОбновлений() Экспорт
	
	СерверОбновлений = СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().НастройкиОбновления.КаталогОбновлений;
	СерверОбновлений = СтрЗаменить(СерверОбновлений, "http://", "");  
	Позиция = Найти(СерверОбновлений, "/");
	Если Позиция > 0 Тогда
		СерверОбновлений = Сред(СерверОбновлений, 1, Позиция - 1);
	КонецЕсли;
	Возврат "http://" + СерверОбновлений;
	
КонецФункции

// Получить имя файла с информацией о доступном обновлении на сайте поставщика
// конфигурации.
//
// Возвращаемое значение:
//   Строка   – имя файла.
//
Функция ИмяФайлаПроверкиНаличияОбновления() Экспорт
	
	Возврат "UpdInfo.txt";
	
КонецФункции

// Функция, выполняет включение и отключение проверки наличия обновления по расписанию
// 
// Параметры:
// ФлагПодключитьИЛИОтключить: Булево, если ИСТИНА - проводится включение проверки, иначе отключение
Функция ПодключитьОтключитьПроверкуПоРасписанию(ФлагПодключитьИЛИОтключить = Истина) Экспорт
	Если ФлагПодключитьИЛИОтключить Тогда
		ПодключитьОбработчикОжидания("ОбработатьПроверкуОбновленияПоРасписанию", 60 * 5); // каждые 5 минут
	Иначе
		ОтключитьОбработчикОжидания("ОбработатьПроверкуОбновленияПоРасписанию");
	КонецЕсли;
КонецФункции

// Процедура, выполняющая проверку наличия обновления для конфигурации через сеть Интернет.
//
// Параметры: 
//	ВыдаватьСообщения: Булево, признак вывода пользователю сообщений об ошибках
Процедура ПроверитьНаличиеОбновленияЧерезИнтернет(ВыдаватьСообщения = Ложь) Экспорт
	
	Состояние("Проверка наличия обновления в Интернете..");
	Параметры = ПолучитьДоступноеОбновлениеКонфигурации(); 
	Если Параметры.ИсточникОбновления <> -1 Тогда
		ВремяПолученияОбновления = Параметры.ВремяПолученияОбновления;
		Если ВремяПолученияОбновления <> Неопределено И ТекущаяДата() - ВремяПолученияОбновления < 30 Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Параметры.ПараметрыФайлаПроверкиОбновления = ПолучитьФайлПроверкиНаличияОбновлений(ВыдаватьСообщения);
	Если ТипЗнч(Параметры.ПараметрыФайлаПроверкиОбновления) = Тип("Строка") Тогда
		ОбщегоНазначенияКлиент.ДобавитьСообщениеДляЖурналаРегистрации(СобытиеЖурналаРегистрации(), "Предупреждение",
			НСтр("ru = 'Невозможно подключиться к сети Интернет для проверки обновлений.'"));
		Параметры.ИмяСтраницы = "ПодключениеКИнтернет";
		Возврат;
	КонецЕсли;
	
	Параметры.ПоследняяВерсияКонфигурации = Параметры.ПараметрыФайлаПроверкиОбновления.Version;
	ВерсияКонфигурации = СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().ВерсияКонфигурации;
	Если СтроковыеФункцииКлиентСервер.СравнитьВерсии(ВерсияКонфигурации, Параметры.ПоследняяВерсияКонфигурации) >= 0 Тогда  
		ОбщегоНазначенияКлиент.ДобавитьСообщениеДляЖурналаРегистрации(СобытиеЖурналаРегистрации(), "Информация",
			НСтр("ru = 'Обновление не требуется: последняя версия конфигурации уже установлена.'"));
			
		Параметры.ИмяСтраницы = "ОбновленияНеОбнаружено";
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияКлиент.ДобавитьСообщениеДляЖурналаРегистрации(СобытиеЖурналаРегистрации(), "Информация",
		НСтр("ru = 'Обнаружена более новая версия конфигурации в Интернете: '") + 
			Параметры.ПоследняяВерсияКонфигурации + ".");
			
	Параметры.ИмяСтраницы = "ДоступноеОбновление";
	Параметры.ВремяПолученияОбновления = ТекущаяДата();
	
КонецПроцедуры

// Процедура проверяет возможность и при необходимости выполняет проверку наличия обновления конфигурации через сеть Интернет
Процедура ПроверитьОбновлениеПоРасписанию() Экспорт
	
	НастройкиОбновленияКонфигурации = СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().НастройкиОбновления.НастройкиОбновленияКонфигурации;
	ОбновлениеКонфигурацииКлиентСервер.ПолучитьОбновленныеНастройкиОбновленияКонфигурации(НастройкиОбновленияКонфигурации);
	РасписаниеПроверкиНаличияОбновления = НастройкиОбновленияКонфигурации.РасписаниеПроверкиНаличияОбновления;
	Если НастройкиОбновленияКонфигурации.ПроверятьНаличиеОбновленияПриЗапуске <> 1 
		ИЛИ РасписаниеПроверкиНаличияОбновления = Неопределено Тогда
		Возврат;	
	КонецЕсли;	
			
	Расписание = ОбщегоНазначенияКлиентСервер.СтруктураВРасписание(РасписаниеПроверкиНаличияОбновления);
	ДатаПроверки = ТекущаяДата();
	Если НЕ Расписание.ТребуетсяВыполнение(ДатаПроверки, НастройкиОбновленияКонфигурации.ВремяПоследнейПроверкиОбновления) Тогда
		Возврат;	
	КонецЕсли;	
		
	НастройкиОбновленияКонфигурации.ВремяПоследнейПроверкиОбновления = ДатаПроверки;
	ОбщегоНазначенияКлиент.ДобавитьСообщениеДляЖурналаРегистрации(СобытиеЖурналаРегистрации(),, 
		НСтр("ru = 'Проверка наличия обновления в интернете по расписанию.'"));
		
	НаименованиеСтраницыДоступногоОбновления = "ДоступноеОбновление";
	ПроверитьНаличиеОбновленияЧерезИнтернет();
	Параметры = ПолучитьДоступноеОбновлениеКонфигурации();
	Если Параметры.ИсточникОбновления <> -1 И Параметры.ИмяСтраницы = НаименованиеСтраницыДоступногоОбновления Тогда
			
		ОбщегоНазначенияКлиент.ДобавитьСообщениеДляЖурналаРегистрации(СобытиеЖурналаРегистрации(),, 	
			НСтр("ru = 'Обнаружена новая версия конфигурации: '") + 
				Параметры.ПараметрыФайлаПроверкиОбновления.Version);
				
		НастройкиОбновленияКонфигурации.ИсточникОбновления = 0;
		НастройкиОбновленияКонфигурации.РасписаниеПроверкиНаличияОбновления = РасписаниеПроверкиНаличияОбновления;
		ОбновлениеКонфигурации.ЗаписатьСтруктуруНастроекПомощника(НастройкиОбновленияКонфигурации, СообщенияДляЖурналаРегистрации);
		
		Параметры.ИсточникОбновления = НастройкиОбновленияКонфигурации.ИсточникОбновления;
		Параметры.НуженФайлОбновления = НастройкиОбновленияКонфигурации.НуженФайлОбновления;
		Параметры.ФлагАвтоПереходаНаСтраницуСОбновлением = Истина;
		ПоказатьОповещениеПользователя(НСтр("ru = 'Доступно обновление конфигурации'"),
			"e1cib/app/Обработка.ОбновлениеКонфигурации",
			НСтр("ru = 'Версия: '")	+ Параметры.ПараметрыФайлаПроверкиОбновления.Version, 
			БиблиотекаКартинок.Информация32);
	Иначе
		ОбщегоНазначенияКлиент.ДобавитьСообщениеДляЖурналаРегистрации(СобытиеЖурналаРегистрации(),, 
			НСтр("ru = 'Доступных обновлений не обнаружено.'"));
	КонецЕсли;
	ОбновлениеКонфигурации.ЗаписатьСтруктуруНастроекПомощника(НастройкиОбновленияКонфигурации, СообщенияДляЖурналаРегистрации);
	
КонецПроцедуры

Функция ПолучитьФайлПроверкиНаличияОбновлений(Знач ВыдаватьСообщения = Истина)
	
	ПараметрыОбновления = ПолучитьПараметрыОбновления();
	НастройкиОбновления = СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().НастройкиОбновления;
	
	ВременныйФайл = ПараметрыОбновления.КаталогФайловОбновления + ПараметрыОбновления.ИмяФайлаПроверкиНаличияОбновления;
	
	// при необходимости, создаем каталог для временного файла
	КаталогВременногоФайла = ПолучитьКаталогФайла(ВременныйФайл);
	КаталогВременногоФайлаОбъект = Новый Файл(КаталогВременногоФайла);
	Если НЕ КаталогВременногоФайлаОбъект.Существует() Тогда
		Попытка 
			СоздатьКаталог(КаталогВременногоФайла);
		Исключение
			ИнфоОбОшибке = ИнформацияОбОшибке();
			
			СообщениеОбОшибке = НСтр("ru = 'Не удалось создать временный каталог для проверки наличия обновлений.
				|%1'");
			ОбщегоНазначенияКлиент.ДобавитьСообщениеДляЖурналаРегистрации(СобытиеЖурналаРегистрации(), "Ошибка",
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СообщениеОбОшибке, 
																		ПодробноеПредставлениеОшибки(ИнфоОбОшибке)),
				ТекущаяДата(), Истина);
				
			СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СообщениеОбОшибке, 
				КраткоеПредставлениеОшибки(ИнфоОбОшибке));
			Если ВыдаватьСообщения Тогда
				Предупреждение(СообщениеОбОшибке);
			КонецЕсли;
			Возврат СообщениеОбОшибке;
		КонецПопытки;
	КонецЕсли;
	
	// получаем сам файл из Интернета
	Результат = ПолучениеФайловИзИнтернетаКлиент.СкачатьФайлНаКлиенте(НастройкиОбновления.АдресСервераДляПроверкиНаличияОбновления +
		ПараметрыОбновления.АдресРесурсовДляПроверкиНаличияОбновления + ПараметрыОбновления.ИмяФайлаПроверкиНаличияОбновления,
		Новый Структура("ПутьДляСохранения", ? (ПустаяСтрока(ВременныйФайл), Неопределено, ВременныйФайл)));
		
	Если Результат.Статус <> Истина Тогда
		СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось проверить наличие обновлений.
				|%1'"), Результат.СообщениеОбОшибке);
		Если ВыдаватьСообщения Тогда
			Предупреждение(СообщениеОбОшибке);
		КонецЕсли;
		Возврат СообщениеОбОшибке;
	КонецЕсли;																
	
	Возврат ПараметрыДистрибутива(ВременныйФайл);
	
КонецФункции

// Функция, выполняющая копирование заданного файла в другой.
//
// Параметры:
// ИмяФайлаИсточника: строка, путь к файлу, который нужно скопировать.
// ИмяФайлаНазначение: строка, путь к файлу в который нужно скопировать источник.
// ВыдаватьСообщения: Булево, признак вывода на экран сообщений об ошибках.
Функция СкопироватьФайл(ИмяФайлаИсточник, ИмяФайлаНазначение, ВыдаватьСообщения = Ложь) Экспорт
	Попытка
		СоздатьКаталог(ПолучитьКаталогФайла(ИмяФайлаНазначение));
		КопироватьФайл(ИмяФайлаИсточник, ИмяФайлаНазначение);
	Исключение
		Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ошибка при копировании: %1
				|(источник: %2; приемник: %3)'"), 
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
				ИмяФайлаИсточник, ИмяФайлаНазначение);
		ОбщегоНазначенияКлиент.ДобавитьСообщениеДляЖурналаРегистрации(СобытиеЖурналаРегистрации(), "Предупреждение",Сообщение);
		Возврат Ложь;
	КонецПопытки;
	Возврат Истина;
КонецФункции

// Функция, возвращает структуру параметров обновления с диска ИТС.
// 
// Параметры: 
// КаталогОбновленияНаДискеИТС: Строка, путь к каталогу с обновлениями на диске ИТС
// ВыдаватьСообщения: Булево, признак вывода на экран сообщений об ошибках.
Функция ПолучитьПараметрыОбновленияИТС(КаталогОбновленияНаДискеИТС, Знач ВыдаватьСообщения = Истина) Экспорт
	
	Если ПустаяСтрока(КаталогОбновленияНаДискеИТС) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыОбновления = ПолучитьПараметрыОбновления();
	ВременныйФайл = ПараметрыОбновления.КаталогФайловОбновления + ПараметрыОбновления.ИмяФайлаПроверкиНаличияОбновления;
	Если НЕ СкопироватьФайл(КаталогОбновленияНаДискеИТС + ПараметрыОбновления.ИмяФайлаПроверкиНаличияОбновления, 
		ВременныйФайл, ВыдаватьСообщения) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыДискИТС = ПараметрыДистрибутива(ВременныйФайл);
	Если ТипЗнч(ПараметрыДискИТС) = Тип("Строка") Тогда
		Возврат Неопределено;                     
	КонецЕсли;
	Возврат ПараметрыДискИТС;
	
КонецФункции

// Функция возвращает структуру параметров релизов на диске ИТС.
//
// Параметры: 
// ДискИТС:  строка, путь к диску ИТС.
// ВыдаватьСообщения: Булево, признак вывода на экран сообщений об ошибках.
Функция ПолучитьПараметрыРелизовНаДискеИТС(ДискИТС, Знач ВыдаватьСообщения = Истина) Экспорт
	
	Если ПустаяСтрока(ДискИТС) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыОбновления = ПолучитьПараметрыОбновления();
	ВременныйФайл = ПараметрыОбновления.КаталогФайловОбновления + ПараметрыОбновления.ИмяФайлаАдресовРелизовИТС;
	Если НЕ СкопироватьФайл(
		ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ДискИТС) + 
		ПараметрыОбновления.ИмяФайлаАдресовРелизовИТС, ВременныйФайл, ВыдаватьСообщения) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыРелизовНаДискеИТС = ПрочитатьАдресаРелизовНаДискеИТС(ВременныйФайл, ДискИТС);
	Если ТипЗнч(ПараметрыРелизовНаДискеИТС) <> Тип("Структура") Тогда // ошибки при чтении файла
		Если ВыдаватьСообщения Тогда
			Предупреждение(НСтр("ru = 'Обновления на диске ИТС не найдены.'"));
		КонецЕсли;
		Возврат Неопределено;		
   	КонецЕсли;
	Возврат ПараметрыРелизовНаДискеИТС;
	
КонецФункции

Функция СуществуетФайлПроверкиНаличияОбновления(Знач ПутьККаталогу)
	ФайлПроверки = Новый Файл(ПутьККаталогу + ПолучитьПараметрыОбновления().ИмяФайлаПроверкиНаличияОбновления);
	Возврат ФайлПроверки.Существует();
КонецФункции

// Возвратить каталог файла - часть пути без имени файла.
//
// Параметры
//  ПутьКФайлу  – Строка – путь к файлу.
//
// Возвращаемое значение:
//   Строка   – каталог файла
Функция ПолучитьКаталогФайла(Знач ПутьКФайлу) Экспорт

	ПозицияСимвола = ПолучитьНомерПоследнегоСимвола(ПутьКФайлу, "\"); 
	Если ПозицияСимвола > 1 Тогда
		Возврат Сред(ПутьКФайлу, 1, ПозицияСимвола - 1); 
	Иначе
		Возврат "";
	КонецЕсли;

КонецФункции

// Чтение данных по обновлению из файла ИмяФайлаПроверкиНаличияОбновления (UpdInfo.txt)
// Вычисляются: 
//		номер версии обновления на сервере, 
//		номера версий, с которых производится обновление (раздляются символом ";")
//		дата публикации обновления
//
// Параметры:
//  ИмяФайла - полное имя файла UpdInfo.txt
// 
// Возвращаемое значение:
//  Структура: 
//		Version - версия обновления
//		FromVersions - с каких версий обновляет
//		UpdateDate - дата опубликования
//  Строка - описание ошибки, если файл не найден или не содержит нужных значений
//
Функция ПараметрыДистрибутива(Знач ИмяФайла)
	Файл = Новый Файл(ИмяФайла);
	Если НЕ Файл.Существует() Тогда
		Возврат НСтр("ru = 'Файл описания обновлений не получен'");
	КонецЕсли;	
	ТД = Новый ТекстовыйДокумент(); 
	ТД.Прочитать(Файл.ПолноеИмя);
	ПарКомпл = Новый Структура();
	Для Н = 1 По ТД.КоличествоСтрок() Цикл
		СтрТмп = НРег(СокрЛП(ТД.ПолучитьСтроку(Н)));
		Если ПустаяСтрока(СтрТмп) Тогда
			Продолжить;
		КонецЕсли; 
		Если Найти(СтрТмп,"fromversions=")>0 Тогда
			СтрТМП = СокрЛП(Сред(СтрТмп,Найти(СтрТмп,"fromversions=")+СтрДлина("fromversions=")));
			СтрТМП = ?(Лев(СтрТМП,1)=";","",";") + СтрТмп + ?(Прав(СтрТМП,1)=";","",";");
			ПарКомпл.Вставить("FromVersions",СтрТМП);
		ИначеЕсли Найти(СтрТмп,"version=")>0 Тогда
			ПарКомпл.Вставить("Version",Сред(СтрТмп,Найти(СтрТмп,"version=")+СтрДлина("version=")));
		ИначеЕсли Найти(СтрТмп,"updatedate=")>0 Тогда
			// формат даты = Дата, 
			СтрТмп = Сред(СтрТмп,Найти(СтрТмп,"updatedate=")+СтрДлина("updatedate="));
			Если СтрДлина(СтрТмп)>8 Тогда
				Если Найти(СтрТмп,".")=5 Тогда
					// дата в формате  ГГГГ.ММ.ДД
					СтрТмп = СтрЗаменить(СтрТмп,".","");
				ИначеЕсли Найти(СтрТмп,".")=3 Тогда
					// дата в формате ДД.ММ.ГГГГ
					СтрТмп = Прав(СтрТмп,4)+Сред(СтрТмп,4,2)+Лев(СтрТмп,2);
				Иначе 
					// дата в формате ГГГГММДД
				КонецЕсли;
			КонецЕсли;
			ПарКомпл.Вставить("UpdateDate",Дата(СтрТмп));
		Иначе
			Возврат НСтр("ru = 'Неверный формат сведений о наличии обновлений'");
		КонецЕсли;
	КонецЦикла;
	Если ПарКомпл.Количество() <> 3 Тогда 
		Возврат НСтр("ru = 'Неверный формат сведений о наличии обновлений'");
	КонецЕсли;
	Возврат ПарКомпл;
КонецФункции

Функция ПрочитатьАдресаРелизовНаДискеИТС(Знач ИмяФайла, Знач ДискИТС)
	Файл = Новый Файл(ИмяФайла);
	Если НЕ Файл.Существует() Тогда
		Возврат НСтр("ru = 'Файл описания обновлений не получен'");
	КонецЕсли;	
	
	КороткоеИмяКонфигурации = СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().НастройкиОбновления.КороткоеИмяКонфигурации;
	КороткоеИмяКонфигурации = СтрЗаменить(КороткоеИмяКонфигурации, "/", "\");	
	КороткоеИмяКонфигурации = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(КороткоеИмяКонфигурации);
	ВозвращаемаяСтруктура = Новый Структура("ПутьКФайламОбновленияНаДискеИТС, ПутьКСтатьеПеречнюРелизов", "", "");
	Попытка
		ЧтениеXML = Новый ЧтениеXML;
		ЧтениеXML.ОткрытьФайл(Файл.ПолноеИмя);
		ЧтениеXML.Прочитать();
		
		// Путь к статье с перечнем релизов на диске ИТС
		ПутьКСтатьеПеречнюРелизов = ЧтениеXML.ПолучитьАтрибут("UpdateListFile");
		Если НЕ ПустаяСтрока(ПутьКСтатьеПеречнюРелизов) Тогда
			ВозвращаемаяСтруктура.Вставить("ПутьКСтатьеПеречнюРелизов", ПутьКСтатьеПеречнюРелизов);
		КонецЕсли;
		
		// Читаем начало элемента Update или конец элемента UpdateList.
		Пока ЧтениеXML.Прочитать() Цикл
			Если ЧтениеXML.Имя = "UpdateSourceList" Тогда
				Прервать;					
			КонецЕсли;
			Если ЧтениеXML.Имя <> "source" Тогда
				Продолжить;
			КонецЕсли;
				
			ЧтениеXML.Прочитать();
			ЗначениеПутиКаталога = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ДискИТС) + 
				ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(СтроковыеФункцииКлиентСервер.СократитьДвойныеКавычки(
					СокрЛП(ЧтениеXML.Значение))) + 
				КороткоеИмяКонфигурации;
			Если НЕ ПустаяСтрока(ЗначениеПутиКаталога) И СуществуетФайлПроверкиНаличияОбновления(ЗначениеПутиКаталога) Тогда
				ВозвращаемаяСтруктура.Вставить("ПутьКФайламОбновленияНаДискеИТС", ЗначениеПутиКаталога);
				Прервать;
			КонецЕсли;
			ЧтениеXML.Прочитать();
		КонецЦикла;
		ЧтениеXML.Закрыть();
	Исключение
		ОбщегоНазначенияКлиент.ДобавитьСообщениеДляЖурналаРегистрации(СобытиеЖурналаРегистрации(), "Ошибка", 
			НСтр("ru = ' ПрочитатьАдресаРелизовНаДискеИТС: '") + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат ВозвращаемаяСтруктура;
КонецФункции

Функция ПолучитьНомерПоследнегоСимвола(Знач ИсходнаяСтрока, Знач СимволПоиска)
	
	ПозицияСимвола = СтрДлина(ИсходнаяСтрока);
	Пока ПозицияСимвола >= 1 Цикл
		
		Если Сред(ИсходнаяСтрока, ПозицияСимвола, 1) = СимволПоиска Тогда
			Возврат ПозицияСимвола; 
		КонецЕсли;
		
		ПозицияСимвола = ПозицияСимвола - 1;	
	КонецЦикла;

	Возврат 0;
  	
КонецФункции

// Функция, возвращает путь к каталогу временных файлов для проведения обновления.
Функция КаталогLocalAppData() Экспорт
	App			= Новый COMОбъект("Shell.Application");
	Folder		= App.Namespace(28);
	Результат	= Folder.Self.Path;
	Возврат ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(Результат);
КонецФункции

//Функция, открывает интерактивно адрес в сети интернет
//
//Параметры : 
//АдресСтраницы - строка, путь к странице в сети Интернет, которую надо открыть
//Заголовок - строка, заголовок окна "браузера"
Процедура ОткрытьВебСтраницу(Знач АдресСтраницы, Знач Заголовок = "") Экспорт
	
	ОткрытьФорму("Обработка.ОбновлениеКонфигурации.Форма.Обозреватель", 
		Новый Структура("АдресСтраницы,Заголовок", АдресСтраницы, Заголовок));

КонецПроцедуры


