////////////////////////////////////////////////////////////////////////////////
// Подсистема "Обмен данными"
// 
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Для внутреннего использования
//
Процедура ПроверитьНедопустимыеСимволыВИмениПользователяWSПрокси(Знач ИмяПользователя) Экспорт
	
	Если СтрокаСодержитСимвол(ИмяПользователя, НедопустимыеСимволыВИмениПользователяWSПрокси()) Тогда
		
		СтрокаСообщения = НСтр("ru = 'В имени пользователя %1 содержатся недопустимые символы.
			|Имя пользователя не должно содержать символы %2.'");
		СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщения,
			ИмяПользователя, НедопустимыеСимволыВИмениПользователяWSПрокси());
		ВызватьИсключение СтрокаСообщения;
	КонецЕсли;
	
КонецПроцедуры

// Для внутреннего использования
//
Функция НедопустимыеСимволыВИмениПользователяWSПрокси() Экспорт
	
	СистемнаяИнформация = Новый СистемнаяИнформация;
	
	Если СтроковыеФункцииКлиентСервер.СравнитьВерсии(СистемнаяИнформация.ВерсияПриложения, "8.2.17.0") > 0 Тогда
		Возврат ":";
	Иначе
		Возврат "@/\[]#&*?:;=";
	КонецЕсли;
	
КонецФункции

// Для внутреннего использования
//
Функция СтрокаСодержитСимвол(Знач Строка, Знач СтрокаСимволов)
	
	Для Индекс = 1 По СтрДлина(СтрокаСимволов) Цикл
		
		Символ = Сред(СтрокаСимволов, Индекс, 1);
		
		Если Найти(Строка, Символ) <> 0 Тогда
			
			Возврат Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
КонецФункции

// Для внутреннего использования.
//
Функция ДопустимыеПрефиксыWSПрокси()
	
	Результат = Новый Массив();
	
	Результат.Добавить("http");
	Результат.Добавить("https");
	
	Возврат Результат;
	
КонецФункции

// Для внутреннего использования.
//
Процедура ПроверитьКорректностьФорматаАдресаWSПрокси(Знач АдресWSПрокси) Экспорт
	
	ЭтоИнтернетАдрес           = Ложь;
	ДопустимыеПрефиксыWSПрокси = ДопустимыеПрефиксыWSПрокси();
	
	Для Каждого Префикс Из ДопустимыеПрефиксыWSПрокси Цикл
		Если Лев(НРег(АдресWSПрокси), СтрДлина(Префикс)) = НРег(Префикс) Тогда
			ЭтоИнтернетАдрес = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Не ЭтоИнтернетАдрес Тогда
		СтрокаПрефиксов = "";
		Для Каждого Префикс Из ДопустимыеПрефиксыWSПрокси Цикл
			СтрокаПрефиксов = СтрокаПрефиксов + ?(ПустаяСтрока(СтрокаПрефиксов), """", " или """) + Префикс + """";
		КонецЦикла;
		
		СтрокаСообщения = НСтр("ru = 'Неверный формат адреса ""%1"".
			|Адрес должен начинаться с префикса Интернет протокола %2 (например: ""http://myserver.com/service"").'");
			
		СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщения, АдресWSПрокси, СтрокаПрефиксов);
		
		ВызватьИсключение СтрокаСообщения;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеСтруктуры(Форма) Экспорт
	
	// Сохраним введенные значения этой программы.
	СтруктураНастроек = Форма.Контекст.НастройкаОтборовНаУзле;
	СоответствующиеРеквизиты = Форма.Реквизиты;
	
	Для Каждого ЭлементНастройки Из СтруктураНастроек Цикл
		
		Если СоответствующиеРеквизиты.Свойство(ЭлементНастройки.Ключ) Тогда
			
			ИмяРеквизита = СоответствующиеРеквизиты[ЭлементНастройки.Ключ];
			
		Иначе
			
			ИмяРеквизита = ЭлементНастройки.Ключ;
			
		КонецЕсли;
		
		РеквизитФормы = Форма[ИмяРеквизита];
		
		Если ТипЗнч(РеквизитФормы) = Тип("ДанныеФормыКоллекция") Тогда
			
			ИмяТаблицы = ЭлементНастройки.Ключ;
			
			Таблица = Новый Массив;
			
			Для Каждого Элемент Из Форма[ИмяРеквизита] Цикл
				
				СтрокаТаблицы = Новый Структура("Использовать, Представление, УникальныйИдентификаторСсылки");
				
				ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Элемент);
				
				Таблица.Добавить(СтрокаТаблицы);
				
			КонецЦикла;
			
			СтруктураНастроек.Вставить(ИмяТаблицы, Таблица);
			
		Иначе
			
			СтруктураНастроек.Вставить(ЭлементНастройки.Ключ, Форма[ИмяРеквизита]);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Форма.Контекст.НастройкаОтборовНаУзле = СтруктураНастроек;
	
	// Сохраним введенные значения другой программы.
	СтруктураНастроек = Форма.Контекст.НастройкаОтборовНаУзлеБазыКорреспондента;
	СоответствующиеРеквизиты = Форма.РеквизитыБазыКорреспондента;
	
	Для Каждого ЭлементНастройки Из СтруктураНастроек Цикл
		
		Если СоответствующиеРеквизиты.Свойство(ЭлементНастройки.Ключ) Тогда
			
			ИмяРеквизита = СоответствующиеРеквизиты[ЭлементНастройки.Ключ];
			
		Иначе
			
			ИмяРеквизита = ЭлементНастройки.Ключ;
			
		КонецЕсли;
		
		РеквизитФормы = Форма[ИмяРеквизита];
		
		Если ТипЗнч(РеквизитФормы) = Тип("ДанныеФормыКоллекция") Тогда
			
			ИмяТаблицы = ЭлементНастройки.Ключ;
			
			Таблица = Новый Массив;
			
			Для Каждого Элемент Из Форма[ИмяРеквизита] Цикл
				
				СтрокаТаблицы = Новый Структура("Использовать, Представление, УникальныйИдентификаторСсылки");
				
				ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Элемент);
				
				Таблица.Добавить(СтрокаТаблицы);
				
			КонецЦикла;
			
			СтруктураНастроек.Вставить(ИмяТаблицы, Таблица);
			
		Иначе
			
			СтруктураНастроек.Вставить(ЭлементНастройки.Ключ, Форма[ИмяРеквизита]);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Форма.Контекст.НастройкаОтборовНаУзлеБазыКорреспондента = СтруктураНастроек;
	
	Форма.Контекст.Вставить("ОписаниеКонтекста", Форма.ОписаниеКонтекста);
	
КонецПроцедуры
