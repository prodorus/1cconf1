Функция КодПоОКПИзКодаПоОКПД2(КодПоОКПД2) Экспорт
	
	Если НЕ ЗначениеЗаполнено(КодПоОКПД2) Тогда
		Возврат "";
	КонецЕсли;
	
	КодПоОКП = СтрЗаменить(КодПоОКПД2, ".", "");
	КодПоОКП = Лев(СтроковыеФункцииКлиентСервер.ДополнитьСтроку(КодПоОКП, 6, "0", "Справа"), 6);
	Возврат КодПоОКП;
	
КонецФункции

Функция РазложитьОКВЭДВСтроку(ИсходныйКодСТочками)
	
	МассивКодов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИсходныйКодСТочками, ".");
	
	Для НомерКода = 0 По МассивКодов.Количество() - 1 Цикл
		МассивКодов[НомерКода] = СтроковыеФункцииКлиентСервер.ДополнитьСтроку(МассивКодов[НомерКода],
			2, " ", "Справа");
	КонецЦикла;
	
	Возврат СтроковыеФункцииКлиентСервер.ПолучитьСтрокуИзМассиваПодстрок(МассивКодов, "");
	
КонецФункции

Функция РазложитьОКПД2ВСтроку(ИсходныйКодСТочками)
	
	МассивКодов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИсходныйКодСТочками, ".");
	
	Для НомерКода = 0 По МассивКодов.Количество() - 1 Цикл
		
		ДлинаЧастиКода = ?(НомерКода < 3, 2, 3);
		МассивКодов[НомерКода] = СтроковыеФункцииКлиентСервер.ДополнитьСтроку(МассивКодов[НомерКода],
			ДлинаЧастиКода, " ", "Справа");
		
	КонецЦикла;
	
	Возврат СтроковыеФункцииКлиентСервер.ПолучитьСтрокуИзМассиваПодстрок(МассивКодов, "");
	
КонецФункции

Функция СловаПострочно(Слова, ДлинаСтроки, ДлинаПодстроки)
	
	СтрокаСлов = "";
	ВсеСловаВыведены = Ложь;
	
	Для Каждого Слово Из Слова Цикл
		
		Если СтрокаСлов = "" Тогда
			СтрокаСлов = Слово;
		ИначеЕсли СтрДлина(Слово) > ДлинаПодстроки Тогда
			// Слово слишком длинное - выводим его как есть.
			СтрокаСлов = СтрокаСлов + " " + Слово;
		Иначе
			СимволовВСтроке = СтрДлина(СтрокаСлов);
			ВсегоПолныхСтрок = Цел(СимволовВСтроке/ДлинаПодстроки);
			СимволовВПолныхСтроках = ВсегоПолныхСтрок * ДлинаПодстроки;
			СимволовВПоследнейПодстроке = СимволовВСтроке - СимволовВПолныхСтроках;
			Если СимволовВПоследнейПодстроке + 1 + СтрДлина(Слово) > ДлинаПодстроки Тогда
				СтрокаСлов = СтроковыеФункцииКлиентСервер.ДополнитьСтроку(СтрокаСлов, ДлинаПодстроки, " ", "Справа");
				СтрокаСлов = СтрокаСлов + Слово;
			Иначе
				СтрокаСлов = СтрокаСлов + ?(СимволовВПоследнейПодстроке = 0, "", " ") + Слово;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если СтрДлина(СтрокаСлов) > ДлинаСтроки Тогда
		// Слова, выведенные построчно занимают места больше,
		// чем можно вывести. Поэтому считаем, что вывод не
		// удался и возвращаем пустую строку.
		Возврат "";
	Иначе
		Возврат СтрокаСлов;
	КонецЕсли;
	
КонецФункции

Процедура ДобавитьВСтруктуруПараметров(СтруктураПараметров, ИмяПараметра, ЗначениеПараметра)
	
	Для Позиция = 1 По СтрДлина(ЗначениеПараметра) Цикл
		ИмяПараметраЧастиЧисла = ИмяПараметра + Формат(Позиция, "ЧГ=0");
		СтруктураПараметров.Вставить(ИмяПараметраЧастиЧисла, Сред(ЗначениеПараметра, Позиция, 1));
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьДанныеЗаголовка(СтруктураПараметров, СведенияОбУведомлении)
	
	ДобавитьВСтруктуруПараметров(СтруктураПараметров, "ИНН", СведенияОбУведомлении.ИНН);
	ДобавитьВСтруктуруПараметров(СтруктураПараметров, "КПП", СведенияОбУведомлении.КПП);
	
КонецПроцедуры

Процедура ДобавитьДатуВСтруктуруПараметров(СтруктураПараметров, ИмяПараметра, ЗначениеПараметра)
	
	ДатаСтрокой = Формат(ЗначениеПараметра, "ДФ=ddMMyyyy");
	ДобавитьВСтруктуруПараметров(СтруктураПараметров, ИмяПараметра, ДатаСтрокой);
	
КонецПроцедуры

Процедура ДобавитьСтрокуВСтруктуруПараметров(СтруктураПараметров, ИмяПараметра, ЗначениеПараметра, ДлинаСтроки = 0, ДлинаПодстроки = 0)
	
	СтрокаДляВывода = ЗначениеПараметра;
	Если ДлинаСтроки > 0 И ДлинаПодстроки > 0 Тогда
		// Есть дополнительные ограничения по длине строки и делению ее на подстроки.
		// Выводим строку так, что бы целое слово умещалось на строке целиком.
		// Если так не получится - выводим как есть посимвольно.
		Слова = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ЗначениеПараметра, " ", Ложь);
		
		СтрокаСловВыведенныхПострочно = СловаПострочно(Слова, ДлинаСтроки, ДлинаПодстроки);
		Если ЗначениеЗаполнено(СтрокаСловВыведенныхПострочно) Тогда
			СтрокаДляВывода = СтрокаСловВыведенныхПострочно;
		КонецЕсли;
		
	КонецЕсли;
	
	ДобавитьВСтруктуруПараметров(СтруктураПараметров, ИмяПараметра, СтрокаДляВывода);
	
КонецПроцедуры

Процедура ДобавитьЧислоВСтруктуруПараметров(СтруктураПараметров, ИмяПараметра, ЗначениеПараметра, ДлинаЦелойЧасти, ДлинаДробнойЧасти, ВыводитьЛидирующиеНули = Ложь)
	
	ФорматЧисла = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("ЧЦ=%1; ЧДЦ=%2; ЧРД=.; ЧН=0; %3 ЧГ=0",
		Формат(ДлинаЦелойЧасти+ДлинаДробнойЧасти, ""),
		Формат(ДлинаДробнойЧасти, ""),
		?(ВыводитьЛидирующиеНули, "ЧВН=;", ""));
	
	ЧастиЧисла = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Формат(ЗначениеПараметра, ФорматЧисла), ".");
	Если ЧастиЧисла.Количество() > 0 Тогда
		ЦелаяЧастьЧисла = ЧастиЧисла[0];
	Иначе
		ЦелаяЧастьЧисла = "";
	КонецЕсли;
	
	ЧислоСтрокой = СтроковыеФункцииКлиентСервер.ДополнитьСтроку(ЦелаяЧастьЧисла, ДлинаЦелойЧасти, " ", "Справа");
	
	Если ЧастиЧисла.Количество() > 1 Тогда
		ДробнаяЧастьЧисла = СтроковыеФункцииКлиентСервер.УдалитьПовторяющиесяСимволы(ЧастиЧисла[1], "0", "Справа");
	Иначе
		ДробнаяЧастьЧисла = "";
	КонецЕсли;
	
	ЧислоСтрокой = ЧислоСтрокой + ДробнаяЧастьЧисла;
	
	ДобавитьВСтруктуруПараметров(СтруктураПараметров, ИмяПараметра, ЧислоСтрокой);
	
КонецПроцедуры

Процедура УстановитьНомерСтраницы(Макет, НомерСтраницы, ДлинаНомераСтраницы)
	
	ЧастиНомераСтраницы = Новый Структура();
	ДобавитьЧислоВСтруктуруПараметров(ЧастиНомераСтраницы, "СчетчикСтраниц_", НомерСтраницы, ДлинаНомераСтраницы, 0, Истина);
	ЗаполнитьЗначенияСвойств(Макет.Параметры, ЧастиНомераСтраницы);
	
КонецПроцедуры

Функция ДанныеЗаполненияЛиста1(СведенияОбУведомлении)
	
	ДанныеЗаполнения = Новый Структура;
	
	ДобавитьДанныеЗаголовка(ДанныеЗаполнения, СведенияОбУведомлении);
	
	ДобавитьЧислоВСтруктуруПараметров(ДанныеЗаполнения, "СтраницВсего_", СведенияОбУведомлении.ВсегоЛистов,
		СведенияОбУведомлении.ПараметрыВерсии.ДлинаНомераСтраница, 0);
	
	ДобавитьЧислоВСтруктуруПараметров(ДанныеЗаполнения, "НомерКорректировки_", СведенияОбУведомлении.НомерКорректировки, 3, 0);
	
	ОсновныеСведенияВыгрузки = Документы.УведомлениеОКонтролируемыхСделках.ПолучитьОсновныеСведенияУведомленияДляВыгрузки(СведенияОбУведомлении.Уведомление);
	
	ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "Налогоплательщик_", ОсновныеСведенияВыгрузки.НаименованиеДляЛиста1, 160, 40);
	
	ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "ОтчетныйГод_", ОсновныеСведенияВыгрузки.ОтчетГод);
	ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "НомерКонтактногоТелефона_", ОсновныеСведенияВыгрузки.Тлф);
	ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "ЭлектроннаяПочта_", ОсновныеСведенияВыгрузки.ЭлПочта);
	ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "КодНО_", ОсновныеСведенияВыгрузки.КодНО);
	ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "КодМестаПредставления_", ОсновныеСведенияВыгрузки.ПоМесту);
	
	Если ОсновныеСведенияВыгрузки.Свойство("ОКВЭД") Тогда
		ОКВЭД = РазложитьОКВЭДВСтроку(ОсновныеСведенияВыгрузки.ОКВЭД);
		ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "ОКВЭД_", ОКВЭД);
	КонецЕсли;
	
	Если ОсновныеСведенияВыгрузки.Свойство("ОКАТО") Тогда
		ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "КодПоОКАТО_", ОсновныеСведенияВыгрузки.ОКАТО);
	КонецЕсли;
	
	Если ОсновныеСведенияВыгрузки.Свойство("ОКТМО") Тогда
		ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "КодПоОКТМО_", ОсновныеСведенияВыгрузки.ОКТМО);
	КонецЕсли;
	
	ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "ПрПодп_", ОсновныеСведенияВыгрузки.ПрПодп);
	
	Если ОсновныеСведенияВыгрузки.Свойство("ПодпФамилия") Тогда
		ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "ОргПодписантФамилия_", ОсновныеСведенияВыгрузки.ПодпФамилия);
	КонецЕсли;
	Если ОсновныеСведенияВыгрузки.Свойство("ПодпИмя") Тогда
		ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "ОргПодписантИмя_", ОсновныеСведенияВыгрузки.ПодпИмя);
	КонецЕсли;
	Если ОсновныеСведенияВыгрузки.Свойство("ПодпОтчество") Тогда
		ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "ОргПодписантОтчество_", ОсновныеСведенияВыгрузки.ПодпОтчество);
	КонецЕсли;
	Если ОсновныеСведенияВыгрузки.Свойство("НаимДокПодп") Тогда
		ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "ДокУпПред_", ОсновныеСведенияВыгрузки.НаимДокПодп);
	КонецЕсли;
	Если ОсновныеСведенияВыгрузки.Свойство("НаимОргПодп") Тогда
		ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "ОргУп_", ОсновныеСведенияВыгрузки.НаимОргПодп);
	КонецЕсли;
	
	Если ОсновныеСведенияВыгрузки.Свойство("ФормРеорг") Тогда
		ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "ФормРеорг_", ОсновныеСведенияВыгрузки.ФормРеорг);
		ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "ИННЮЛРеорг_", ОсновныеСведенияВыгрузки.ИННЮЛРеорг);
		ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "КППЮЛРеорг_", ОсновныеСведенияВыгрузки.КППЮЛРеорг);
	КонецЕсли;
	
	ДобавитьДатуВСтруктуруПараметров(ДанныеЗаполнения, "ДатаПодписи", ТекущаяДатаСеанса());
	
	Возврат ДанныеЗаполнения;
	
КонецФункции

Функция ДанныеЗаполненияЛиста1А(СведенияОбУведомлении, Лист1А)
	
	ДанныеЗаполнения = Новый Структура;
	
	ДобавитьДанныеЗаголовка(ДанныеЗаполнения, СведенияОбУведомлении);
	
	ДанныеЗаполнения.Вставить("Сделка", Лист1А.Сделка);
	
	ДобавитьЧислоВСтруктуруПараметров(ДанныеЗаполнения, "НомерЛиста1А_", Лист1А.НомерЛиста1А, 6, 0);
	
	Если СведенияОбУведомлении.ВерсияУведомления >= КонтролируемыеСделкиКлиентСервер.ВерсияУведомления_2018() Тогда
		ДанныеЗаполнения.Вставить("СделкаОтИмениКомиссионера", Лист1А.СделкаСовАгент);
	КонецЕсли;
	
	ДанныеЗаполнения.Вставить("П100", Лист1А.Строка100Взаимозависимость);
	ДанныеЗаполнения.Вставить("П121", Лист1А.Строка121СтороныВзаимозависимыПоКодексу);
	ДанныеЗаполнения.Вставить("П122", Лист1А.Строка122СделкаВОбластиВнешнейТорговли);
	ДанныеЗаполнения.Вставить("П123", Лист1А.Строка123СделкаСКонтрагентомСЛьготнымНалогообложением);
	ДанныеЗаполнения.Вставить("П124", Лист1А.Строка124СделкаСНезависимымПосредником);
	
	ДанныеЗаполнения.Вставить("П131", Лист1А.Строка131СуммаДоходовПоСделкамПревышаетПредел);
	ДанныеЗаполнения.Вставить("П132", Лист1А.Строка132СделкаСПлательщикомНДПИ);
	ДанныеЗаполнения.Вставить("П133", Лист1А.Строка133СделкаСКонтрагентомНаСпецрежимах);
	ДанныеЗаполнения.Вставить("П134", Лист1А.Строка134СделкаСПлательщикомНалогаНаПрибыль);
	ДанныеЗаполнения.Вставить("П135", Лист1А.Строка135СделкаСРезидентомОЭЗ);
	
	Если СведенияОбУведомлении.ВерсияУведомления >= КонтролируемыеСделкиКлиентСервер.ВерсияУведомления_2018() Тогда
		ДанныеЗаполнения.Вставить("П136", Лист1А.Строка136СделкаМорскогоМесторождения);
		ДанныеЗаполнения.Вставить("П137", Лист1А.Строка137СделкаИнвестиционныйПроект);
		ДанныеЗаполнения.Вставить("П138", Лист1А.Строка138СделкаОсвобождениеОтНДС);
		ДанныеЗаполнения.Вставить("П139", Лист1А.Строка139СделкаНалоговыйВычетПоНалогуНаПрибыль);
		ДанныеЗаполнения.Вставить("П140", Лист1А.Строка140СделкаНалогНаДополнительныйДоходУглеводородов);
	КонецЕсли;
	
	ДанныеЗаполнения.Вставить("П200", "0");
	ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "П210_", Лист1А.Строка210КодНаименованияСделки);
	ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "П211_", Лист1А.Строка211КодСтороныСделки);
	ДанныеЗаполнения.Вставить("П220", Лист1А.Строка220ПризнакОпределенияЦеныСделки);
	ДанныеЗаполнения.Вставить("П2201", Лист1А.Строка220_1Комментарий);
	ДанныеЗаполнения.Вставить("П230", Лист1А.Строка230КодОпределенияЦены);
	ДанныеЗаполнения.Вставить("П2301", Лист1А.Строка230_1Комментарий);
	ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "П240_", Лист1А.Строка240КодМетодовЦенообразования);
	ДанныеЗаполнения.Вставить("П2401", Лист1А.Строка240_1Комментарий);
	
	ДанныеЗаполнения.Вставить("П251", Лист1А.Строка251);
	ДанныеЗаполнения.Вставить("П252", Лист1А.Строка252);
	ДанныеЗаполнения.Вставить("П253", Лист1А.Строка253);
	ДанныеЗаполнения.Вставить("П254", Лист1А.Строка254);
	ДанныеЗаполнения.Вставить("П255", Лист1А.Строка255);
	ДанныеЗаполнения.Вставить("П256", Лист1А.Строка256);
	ДанныеЗаполнения.Вставить("П257", Лист1А.Строка257);
	ДанныеЗаполнения.Вставить("П258", Лист1А.Строка258);
	ДанныеЗаполнения.Вставить("П259", Лист1А.Строка259);
	
	ДобавитьЧислоВСтруктуруПараметров(ДанныеЗаполнения, "П260_", Лист1А.Строка260КоличествоУчастниковСделки, 3, 0);
	ДанныеЗаполнения.Вставить("П2601", Лист1А.Строка260_1Комментарий);
	
	ДобавитьЧислоВСтруктуруПараметров(ДанныеЗаполнения, "П300_", Лист1А.Строка300СуммаДоходов, 15, 0);
	ДобавитьЧислоВСтруктуруПараметров(ДанныеЗаполнения, "П301_", Лист1А.Строка301СуммаРегулируемыхДоходов, 15, 0);
	ДобавитьЧислоВСтруктуруПараметров(ДанныеЗаполнения, "П310_", Лист1А.Строка310СуммаРасходов, 15, 0);
	ДобавитьЧислоВСтруктуруПараметров(ДанныеЗаполнения, "П311_", Лист1А.Строка311СуммаРегулируемыхРасходов, 15, 0);
	
	Возврат ДанныеЗаполнения;
	
КонецФункции

Функция ДанныеЗаполненияЛиста1Б(СведенияОбУведомлении, Лист1Б)
	
	ДанныеЗаполнения = Новый Структура;
	
	ДобавитьДанныеЗаголовка(ДанныеЗаполнения, СведенияОбУведомлении);
	
	ДанныеЗаполнения.Вставить("Сделка", Лист1Б.Сделка);
	
	ДобавитьЧислоВСтруктуруПараметров(ДанныеЗаполнения, "НомерСделки1А_", Лист1Б.НомерЛиста1А, 6, 0);
	
	ДанныеЗаполнения.Вставить("П020", Лист1Б.Строка020ТипПредмета);
	ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "П030_", Лист1Б.Строка030НаименованиеПредмета);
	ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "П040_", Лист1Б.Строка040КодПоТНВЭД);
	
	Если СведенияОбУведомлении.ВерсияУведомления = КонтролируемыеСделкиКлиентСервер.ВерсияУведомления_2012() Тогда
		ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "П043_", Лист1Б.Строка043КодПоОКП);
	ИначеЕсли СведенияОбУведомлении.ВерсияУведомления = КонтролируемыеСделкиКлиентСервер.ВерсияУведомления_2017() Тогда
		КодОКПД2 = КодПоОКПИзКодаПоОКПД2(Лист1Б.Строка043КодПоОКПД2);
		ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "П043_", КодОКПД2);
	Иначе
		КодОКПД2 = РазложитьОКПД2ВСтроку(Лист1Б.Строка043КодПоОКПД2);
		ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "П043_", КодОКПД2);
	КонецЕсли;
	
	Если СведенияОбУведомлении.ВерсияУведомления = КонтролируемыеСделкиКлиентСервер.ВерсияУведомления_2012() Тогда
		КодОКВЭД = РазложитьОКВЭДВСтроку(Лист1Б.Строка045КодОКВЭД);
		ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "П045_", КодОКВЭД);
	Иначе
		КодОКВЭД = РазложитьОКВЭДВСтроку(Лист1Б.Строка045КодОКВЭД2);
		ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "П045_", КодОКВЭД);
	КонецЕсли;
	
	ДобавитьЧислоВСтруктуруПараметров(ДанныеЗаполнения, "П050_", Лист1Б.Строка050НомерУчастникаСделки, 4, 0);
	ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "П060_", Лист1Б.Строка060НомерДоговора);
	ДобавитьДатуВСтруктуруПараметров(ДанныеЗаполнения, "П065_", Лист1Б.Строка065ДатаДоговора);
	
	ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "П070_", Лист1Б.Строка070КодСтраныПроисхождения);
	
	ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "П080_С_", Лист1Б.Строка080КодСтраныОтправки);
	ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "П080_Р_", Лист1Б.Строка080КодРегионаОтправки);
	
	Если СведенияОбУведомлении.ВерсияУведомления < КонтролируемыеСделкиКлиентСервер.ВерсияУведомления_2018() Тогда
		ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "П080_Г_", Лист1Б.Строка080ГородОтправки);
	КонецЕсли;
	
	ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "П080_Н_", Лист1Б.Строка080НаселенныйПунктОтправки);
	
	ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "П090_С_", Лист1Б.Строка090КодСтраныСовершенияСделки);
	ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "П090_Р_", Лист1Б.Строка090КодРегионаСовершенияСделки);
	
	Если СведенияОбУведомлении.ВерсияУведомления < КонтролируемыеСделкиКлиентСервер.ВерсияУведомления_2018() Тогда
		ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "П090_Г_", Лист1Б.Строка090ГородСовершенияСделки);
	КонецЕсли;
	
	ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "П090_Н_", Лист1Б.Строка090НаселенныйПунктСовершенияСделки);
	
	ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "П100_", Лист1Б.Строка100КодУсловийПоставки);
	ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "П110_", Лист1Б.Строка110КодЕдиницыИзмерения);
	
	Если СведенияОбУведомлении.ВерсияУведомления < КонтролируемыеСделкиКлиентСервер.ВерсияУведомления_2018() Тогда
		ДобавитьЧислоВСтруктуруПараметров(ДанныеЗаполнения, "П120_", Лист1Б.Строка120Количество, 15, 0);
		ДобавитьЧислоВСтруктуруПараметров(ДанныеЗаполнения, "П130_", Лист1Б.Строка130Цена, 15, 0);
		ДобавитьЧислоВСтруктуруПараметров(ДанныеЗаполнения, "П140_", Лист1Б.Строка140Стоимость, 15, 0);
	Иначе
		ДобавитьЧислоВСтруктуруПараметров(ДанныеЗаполнения, "П120_", Лист1Б.Строка120Количество, 9, 5);
		ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "П140_", Лист1Б.Строка140КодВалюты);
		Если Лист1Б.ТипПредметаСделки = Перечисления.ТипыПредметовКонтролируемыхСделок.ДолговоеОбязательство Тогда
			ДобавитьЧислоВСтруктуруПараметров(ДанныеЗаполнения, "П150_", Лист1Б.Строка150ПроцентнаяСтавка, 3, 4);
		Иначе
			ДобавитьЧислоВСтруктуруПараметров(ДанныеЗаполнения, "П130_", Лист1Б.Строка130Цена, 14, 4);
			ДобавитьЧислоВСтруктуруПараметров(ДанныеЗаполнения, "П160_", Лист1Б.Строка160Стоимость, 15, 0);
		КонецЕсли;
	КонецЕсли;
	
	ДобавитьДатуВСтруктуруПараметров(ДанныеЗаполнения, "ДатаСовершенияСделки_", Лист1Б.Строка150ДатаСовершения);
	
	Возврат ДанныеЗаполнения;
	
КонецФункции

Функция ДанныеЗаполненияЛиста2(СведенияОбУведомлении)
	
	ДанныеЗаполнения = Новый Структура;
	
	ДобавитьДанныеЗаголовка(ДанныеЗаполнения, СведенияОбУведомлении);
	
	ДатаОкончания = КонецГода(СведенияОбУведомлении.ОтчетныйГод);
	ФизическоеЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СведенияОбУведомлении.Организация, "ИндивидуальныйПредприниматель");
	Если Не ЗначениеЗаполнено(ФизическоеЛицо) Тогда 
		Возврат ДанныеЗаполнения;
	КонецЕсли;
	
	ОсновныеСведенияВыгрузки = Документы.УведомлениеОКонтролируемыхСделках.ПолучитьОсновныеСведенияУведомленияДляВыгрузки(СведенияОбУведомлении.Уведомление);
	
	ДобавитьДатуВСтруктуруПараметров(ДанныеЗаполнения, "ДатаРождения_", ОсновныеСведенияВыгрузки.НПФЛДатаРожд);
	ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "МестоРождения_", ОсновныеСведенияВыгрузки.НПФЛМестоРожд);
	ДанныеЗаполнения.Вставить("Гражданство", ОсновныеСведенияВыгрузки.НПФЛНалГражд);
	Если ОсновныеСведенияВыгрузки.Свойство("НПФЛОКСМ") Тогда
		ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "КодОКСМ_", ОсновныеСведенияВыгрузки.НПФЛОКСМ);
	КонецЕсли;
	Если ОсновныеСведенияВыгрузки.Свойство("НПФЛКодВидДок") Тогда
		ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "КодВидаДокумента_", ОсновныеСведенияВыгрузки.НПФЛКодВидДок);
		ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "СерияНомер_", ОсновныеСведенияВыгрузки.НПФЛСерНомДок);
		ДобавитьДатуВСтруктуруПараметров(ДанныеЗаполнения, "ДатаВыдачи_", ОсновныеСведенияВыгрузки.НПФЛДатаДок);
		ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "ОрганВыдавшийДокумент_", ОсновныеСведенияВыгрузки.НПФЛВыдДок);
	КонецЕсли;
	
	ДанныеЗаполнения.Вставить("СтатусНалогоплательщика", ОсновныеСведенияВыгрузки.НПФЛСтатусНП);
	Если СведенияОбУведомлении.ВерсияУведомления < КонтролируемыеСделкиКлиентСервер.ВерсияУведомления_2018()
		И ОсновныеСведенияВыгрузки.Свойство("НПФЛПрАдр") Тогда
		ДанныеЗаполнения.Вставить("МестоЖительства", ОсновныеСведенияВыгрузки.НПФЛПрАдр);
		ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "Индекс_", ОсновныеСведенияВыгрузки.НПФЛИндекс);
		ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "РегионКод_", ОсновныеСведенияВыгрузки.НПФЛКодРегион);
		ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "Район_", ОсновныеСведенияВыгрузки.НПФЛРайон);
		ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "Город_", ОсновныеСведенияВыгрузки.НПФЛГород);
		ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "НаселенныйПункт_", ОсновныеСведенияВыгрузки.НПФЛНаселПункт);
		ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "Улица_", ОсновныеСведенияВыгрузки.НПФЛУлица);
		ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "Дом_", ОсновныеСведенияВыгрузки.НПФЛДом);
		ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "НПФЛКорпус", ОсновныеСведенияВыгрузки.Корпус_);
		ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "НПФЛКварт", ОсновныеСведенияВыгрузки.Квартира_);
	КонецЕсли;
	
	Если ОсновныеСведенияВыгрузки.Свойство("АдрИнКодСтраны") Тогда
		ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "КодСтраныОКСМ_", ОсновныеСведенияВыгрузки.АдрИнКодСтраны);
		ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "АдресЗаПределамиРФ_", ОсновныеСведенияВыгрузки.АдрИнТекст);
	КонецЕсли;
	
	Возврат ДанныеЗаполнения;
	
КонецФункции

Функция ДанныеЗаполненияРаздела2(СведенияОбУведомлении, Лист2, ДанныеРаздела2)
	
	ДанныеЗаполнения = Новый Структура;
	
	ДобавитьДанныеЗаголовка(ДанныеЗаполнения, СведенияОбУведомлении);
	ДанныеЗаполнения.Вставить("Сделка", Лист2.Сделка);
	
	Если СведенияОбУведомлении.ВерсияУведомления >= КонтролируемыеСделкиКлиентСервер.ВерсияУведомления_2018() Тогда
		ДанныеЗаполнения.Вставить("СведенияОКомиссионере", Лист2.СведОтносительноАгента);
	КонецЕсли;
	
	СведенияОКонтрагенте = ДанныеРаздела2.Найти(Лист2.Контрагент, "Контрагент");
	Если СведенияОКонтрагенте = Неопределено Тогда
		Возврат ДанныеЗаполнения;
	КонецЕсли;
	
	ДобавитьЧислоВСтруктуруПараметров(ДанныеЗаполнения, "П010_", Лист2.НомерЛиста1А, 6, 0);
	Если Не Лист2.СведенияОКомиссионере Тогда
		ДобавитьЧислоВСтруктуруПараметров(ДанныеЗаполнения, "П015_", СведенияОКонтрагенте.НомерКонтрагента, 4, 0);
	Иначе
		ДобавитьЧислоВСтруктуруПараметров(ДанныеЗаполнения, "П015_", 0, 4, 0);
	КонецЕсли;
	
	ДанныеЗаполнения.Вставить("П020", Строка(СведенияОКонтрагенте.Строка020ТипОрганизации));
	ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "П030_", СведенияОКонтрагенте.Строка030КакКодСтраныРегистрации);
	ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "П040_", СведенияОКонтрагенте.Строка040Наименование);
	
	Если СведенияОбУведомлении.ВерсияУведомления >= КонтролируемыеСделкиКлиентСервер.ВерсияУведомления_2018() Тогда
		ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "П040_ЛАТ_", СведенияОКонтрагенте.Строка040НаименованиеЛат);
	КонецЕсли;
	ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "П050_", СведенияОКонтрагенте.Строка050ИНН);
	ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "П060_", СведенияОКонтрагенте.Строка060КПП);
	ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "П070_", СведенияОКонтрагенте.Строка070РегНомерВСтрокеРегистрации);
	ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "П080_", СведенияОКонтрагенте.Строка080КодНалогВСтранеРегистрации);
	
	Если СведенияОКонтрагенте.Строка020ТипОрганизации = 2 Тогда
		ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "П090_", СведенияОКонтрагенте.Строка090АдресИностраннойОрганизации);
	КонецЕсли;
	
	Возврат ДанныеЗаполнения;
	
КонецФункции

Функция ДанныеЗаполненияРаздела3(СведенияОбУведомлении, Лист3, ДанныеРаздела3)
	
	ДанныеЗаполнения = Новый Структура;
	
	ДобавитьДанныеЗаголовка(ДанныеЗаполнения, СведенияОбУведомлении);
	ДанныеЗаполнения.Вставить("Сделка", Лист3.Сделка);
	
	Если СведенияОбУведомлении.ВерсияУведомления >= КонтролируемыеСделкиКлиентСервер.ВерсияУведомления_2018() Тогда
		ДанныеЗаполнения.Вставить("СведенияОКомиссионере", Лист3.СведОтносительноАгента);
	КонецЕсли;
	
	СведенияОФизическомЛице = ДанныеРаздела3.Найти(Лист3.Контрагент, "Контрагент");
	Если СведенияОФизическомЛице = Неопределено Тогда
		Возврат ДанныеЗаполнения;
	КонецЕсли;
	
	ДобавитьЧислоВСтруктуруПараметров(ДанныеЗаполнения, "НомерСделки_", Лист3.НомерЛиста1А, 6, 0);
	Если Не Лист3.СведенияОКомиссионере Тогда
		ДобавитьЧислоВСтруктуруПараметров(ДанныеЗаполнения, "НомерУчастника_", СведенияОФизическомЛице.НомерКонтрагента, 4, 0);
	Иначе
		ДобавитьЧислоВСтруктуруПараметров(ДанныеЗаполнения, "НомерУчастника_", 0, 4, 0);
	КонецЕсли;
	
	ДанныеЗаполнения.Вставить("КодВидаДеятельности", СведенияОФизическомЛице.Строка020КодВидаДеятельности);
	ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "ИННФизлица_", СведенияОФизическомЛице.Строка030ИНН);
	
	Контрагент = СведенияОФизическомЛице.Контрагент;
	ФизическоеЛицо = СведенияОФизическомЛице.ФизическоеЛицо;
	
	ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "Фамилия_", СведенияОФизическомЛице.Фамилия);
	ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "Имя_", СведенияОФизическомЛице.Имя);
	ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "Отчество_", СведенияОФизическомЛице.Отчество);
	
	Если НЕ ЗначениеЗаполнено(СведенияОФизическомЛице.Строка030ИНН) Тогда
		
		ДобавитьДатуВСтруктуруПараметров(ДанныеЗаполнения, "ДатаРождения_", ФизическоеЛицо.ДатаРождения);
		ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "МестоРождения_", ФизическоеЛицо.МестоРождения);
		
		Если СведенияОбУведомлении.ВерсияУведомления < КонтролируемыеСделкиКлиентСервер.ВерсияУведомления_2018() Тогда
			Если ЗначениеЗаполнено(СведенияОФизическомЛице.ГражданствоФизЛицСтрана) Тогда
				ДанныеЗаполнения.Вставить("Гражданство", "1");
				ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "КодОКСМ_", СведенияОФизическомЛице.ГражданствоФизЛицСтрана.Код);
			Иначе
				ДанныеЗаполнения.Вставить("Гражданство", "2");
			КонецЕсли;
		Иначе
			СведенияОГражданстве = Документы.УведомлениеОКонтролируемыхСделках.СведенияОГражданстве2018(СведенияОФизическомЛице.ГражданствоФизЛицСтрана);
			ДанныеЗаполнения.Вставить("Гражданство", СведенияОГражданстве.Гражд);
			ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "КодОКСМ_", СведенияОГражданстве.ОКСМ);
		КонецЕсли;
		
		КодВидаДокумента= КонтролируемыеСделки.ПолучитьКодВидаДокументаПоВидуДокумента(СведенияОФизическомЛице.ДокументВид);
		ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "КодВидаДокумента_", КодВидаДокумента);
		
		Если ЗначениеЗаполнено(СведенияОФизическомЛице.ДокументСерия) Или ЗначениеЗаполнено(СведенияОФизическомЛице.ДокументНомер) Тогда 
			ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "СерияНомер_",
				СведенияОФизическомЛице.ДокументСерия + " " + СведенияОФизическомЛице.ДокументНомер);
		КонецЕсли;
		
		ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "ОрганВыдавшийДокумент_", СведенияОФизическомЛице.ДокументКемВыдан);
		ДобавитьДатуВСтруктуруПараметров(ДанныеЗаполнения, "ДатаВыдачи_", СведенияОФизическомЛице.ДокументДатаВыдачи);
		
		Если СведенияОбУведомлении.ВерсияУведомления < КонтролируемыеСделкиКлиентСервер.ВерсияУведомления_2018() Тогда
			
			Если СведенияОФизическомЛице.ГражданствоФизЛицСтрана = Справочники.КлассификаторСтранМира.Россия Тогда
				ДанныеЗаполнения.Вставить("МестоЖительства", "1");
			Иначе
				ДанныеЗаполнения.Вставить("МестоЖительства", "2");
			КонецЕсли;
			
			ЗначениеАдреса = "," + ?(ЗначениеЗаполнено(СведенияОФизическомЛице.КонтактнаяИнформацияПоле1), СведенияОФизическомЛице.КонтактнаяИнформацияПоле1, "") + "," + ?(ЗначениеЗаполнено(СведенияОФизическомЛице.КонтактнаяИнформацияПоле2), СведенияОФизическомЛице.КонтактнаяИнформацияПоле2, "") + ","
			+ ?(ЗначениеЗаполнено(СведенияОФизическомЛице.КонтактнаяИнформацияПоле3), СведенияОФизическомЛице.КонтактнаяИнформацияПоле3, "") + "," + ?(ЗначениеЗаполнено(СведенияОФизическомЛице.КонтактнаяИнформацияПоле4), СведенияОФизическомЛице.КонтактнаяИнформацияПоле4, "") + ","
			+ ?(ЗначениеЗаполнено(СведенияОФизическомЛице.КонтактнаяИнформацияПоле5), СведенияОФизическомЛице.КонтактнаяИнформацияПоле5, "") + "," + ?(ЗначениеЗаполнено(СведенияОФизическомЛице.КонтактнаяИнформацияПоле6), СведенияОФизическомЛице.КонтактнаяИнформацияПоле6, "") + ","
			+ ?(ЗначениеЗаполнено(СведенияОФизическомЛице.КонтактнаяИнформацияПоле7), СведенияОФизическомЛице.КонтактнаяИнформацияПоле7, "") + "," + ?(ЗначениеЗаполнено(СведенияОФизическомЛице.КонтактнаяИнформацияПоле8), СведенияОФизическомЛице.КонтактнаяИнформацияПоле8, "") + ","
			+ ?(ЗначениеЗаполнено(СведенияОФизическомЛице.КонтактнаяИнформацияПоле9), СведенияОФизическомЛице.КонтактнаяИнформацияПоле9, "");
			
			АдресСтруктурой = УправлениеКонтактнойИнформацией.ПолучитьСтруктуруАдресаИзСтроки(ЗначениеАдреса);
			
			ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "Индекс_", АдресСтруктурой.Индекс);
			ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "РегионКод_", АдресСтруктурой.Регион);
			ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "Район_", АдресСтруктурой.Район);
			ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "Город_", АдресСтруктурой.Город);
			ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "НаселенныйПункт_", АдресСтруктурой.НаселенныйПункт);
			ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "Улица_", АдресСтруктурой.Улица);
			ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "Дом_", АдресСтруктурой.Дом);
			ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "Корпус_", АдресСтруктурой.Корпус);
			ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "Квартира_", АдресСтруктурой.Квартира);
			
		КонецЕсли;
		
		Если СведенияОФизическомЛице.ГражданствоФизЛицСтрана <> Справочники.КлассификаторСтранМира.Россия Тогда
			НаименованиеСтраны = СведенияОФизическомЛице.КонтактнаяИнформацияЗаРФПоле1;
			Если ЗначениеЗаполнено(НаименованиеСтраны) Тогда
				НайденнаяСтрана = Справочники.КлассификаторСтранМира.НайтиПоНаименованию(НаименованиеСтраны);
				Если ЗначениеЗаполнено(НайденнаяСтрана) И НайденнаяСтрана <> Справочники.КлассификаторСтранМира.Россия Тогда
					ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "КодСтраныОКСМ_", НайденнаяСтрана.Код);
					ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "АдресЗаПределамиРФ_", СведенияОФизическомЛице.КонтактнаяИнформацияЗаРФПредставление);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ДанныеЗаполнения;
	
КонецФункции

Функция ПолучитьЛистыУведомления(Уведомление, Лист1АДляПечати = Неопределено) Экспорт
	
	СведенияОбУведомлении = Документы.УведомлениеОКонтролируемыхСделках.ПолучитьСведенияОбУведомлении(Уведомление);

	ДатаАктуальностиСведений = КонецГода(СведенияОбУведомлении.ОтчетныйГод);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("УведомлениеОКонтролируемойСделке", Уведомление);
	Запрос.УстановитьПараметр("ДатаАктуальностиСведений", ДатаАктуальностиСведений);
	
	Если СведенияОбУведомлении.ВерсияУведомления < КонтролируемыеСделкиКлиентСервер.ВерсияУведомления_2018() Тогда
		Запрос.Текст = Документы.УведомлениеОКонтролируемыхСделках.ПолучитьТекстЗапросаПоКонтролируемымСделкам_2012();
	Иначе
		Запрос.Текст = Документы.УведомлениеОКонтролируемыхСделках.ПолучитьТекстЗапросаПоКонтролируемымСделкам_2018();
	КонецЕсли;
	Если Лист1АДляПечати <> Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И НЕ КонтролируемаяСделка.ПометкаУдаления", "И НЕ КонтролируемаяСделка.ПометкаУдаления И КонтролируемаяСделка.Ссылка = &Лист1АДляПечати");
		Запрос.УстановитьПараметр("Лист1АДляПечати", Лист1АДляПечати);
	КонецЕсли;
	Запрос.Выполнить();
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Листы1А.*
	|ИЗ
	|	Листы1А КАК Листы1А
	|УПОРЯДОЧИТЬ ПО
	|	Листы1А.НомерЛиста1А
	|;
	|
	|//////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Листы1Б.*
	|ИЗ
	|	Листы1Б КАК Листы1Б
	|УПОРЯДОЧИТЬ ПО
	|	Листы1Б.НомерЛиста1А, Листы1Б.НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Раздел2.Контрагент КАК Контрагент,
	|	Раздел2.Строка020ТипОрганизации КАК Строка020ТипОрганизации,
	|	Раздел2.Строка030КакКодСтраныРегистрации КАК Строка030КакКодСтраныРегистрации,
	|	Раздел2.Строка040Наименование КАК Строка040Наименование,
	|	Раздел2.Строка040НаименованиеЛат КАК Строка040НаименованиеЛат,
	|	Раздел2.Строка050ИНН КАК Строка050ИНН,
	|	Раздел2.Строка060КПП КАК Строка060КПП,
	|	Раздел2.Строка070РегНомерВСтрокеРегистрации КАК Строка070РегНомерВСтрокеРегистрации,
	|	Раздел2.Строка080КодНалогВСтранеРегистрации КАК Строка080КодНалогВСтранеРегистрации,
	|	Раздел2.Строка090АдресИностраннойОрганизации КАК Строка090АдресИностраннойОрганизации
	|ИЗ
	|	Раздел2 КАК Раздел2
	|
	|УПОРЯДОЧИТЬ ПО
	|	Раздел2.Строка040Наименование
	|;
	|
	|//////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Раздел3.*
	|ИЗ
	|	Раздел3 КАК Раздел3
	|УПОРЯДОЧИТЬ ПО
	|	Раздел3.Фамилия, Раздел3.Имя, Раздел3.Отчество;
	|
	|//////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Листы1А.Сделка КАК Сделка,
	|	Листы1А.НомерЛиста1А КАК НомерЛиста1А,
	|	Листы1Б.Контрагент КАК Контрагент,
	|	ЛОЖЬ КАК СведенияОКомиссионере,
	|	""0"" КАК СведОтносительноАгента
	|ИЗ
	|	Листы1Б КАК Листы1Б
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Листы1А КАК Листы1А
	|		ПО (Листы1А.Сделка = Листы1Б.Сделка)
	|ГДЕ
	|	Листы1Б.ТипКонтрагента = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ЮрЛицо)
	|
	|ОБЪЕДИНИТЬ
	|

	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Листы1А.Сделка,
	|	Листы1А.НомерЛиста1А,
	|	Листы1Б.Комиссионер,
	|	ИСТИНА,
	|	""1""
	|ИЗ
	|	Листы1Б КАК Листы1Б
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Листы1А КАК Листы1А
	|		ПО Листы1Б.Сделка = Листы1А.Сделка
	|ГДЕ
	|	Листы1Б.ТипКомиссионера = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ЮрЛицо)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерЛиста1А,
	|	СведенияОКомиссионере УБЫВ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Листы1А.Сделка КАК Сделка,
	|	Листы1А.НомерЛиста1А КАК НомерЛиста1А,
	|	Листы1Б.Контрагент КАК Контрагент,
	|	ЛОЖЬ КАК СведенияОКомиссионере,
	|	""0"" КАК СведОтносительноАгента
	|ИЗ
	|	Листы1Б КАК Листы1Б
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Листы1А КАК Листы1А
	|		ПО (Листы1А.Сделка = Листы1Б.Сделка)
	|ГДЕ
	|	Листы1Б.ТипКонтрагента = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ФизЛицо)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Листы1А.Сделка,
	|	Листы1А.НомерЛиста1А,
	|	Листы1Б.Комиссионер,
	|	ИСТИНА,
	|	""1""
	|ИЗ
	|	Листы1Б КАК Листы1Б
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Листы1А КАК Листы1А
	|		ПО Листы1Б.Сделка = Листы1А.Сделка
	|ГДЕ
	|	Листы1Б.ТипКомиссионера = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ФизЛицо)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерЛиста1А,
	|	СведенияОКомиссионере УБЫВ";
	
	Результат = Запрос.ВыполнитьПакет();
	Листы1А = Результат[0].Выгрузить(); 
	Листы1Б = Результат[1].Выгрузить(); 
	Раздел2 = Результат[2].Выгрузить(); 
	Раздел3 = Результат[3].Выгрузить();
	Листы2 = Результат[4].Выгрузить(); 
	Листы3 = Результат[5].Выгрузить();

	Листы1А.Индексы.Добавить("Сделка");
	Листы1Б.Индексы.Добавить("Сделка");
	Раздел2.Индексы.Добавить("Контрагент");
	Раздел3.Индексы.Добавить("Контрагент");
	Листы2.Индексы.Добавить("Сделка");
	Листы3.Индексы.Добавить("Сделка");
	
	ОписаниеТипаНомераУчастникаСделки = Новый ОписаниеТипов("Число", 
		Новый КвалификаторыЧисла(4, 0, ДопустимыйЗнак.Неотрицательный));
	
	Раздел2.Колонки.Добавить("НомерКонтрагента", ОписаниеТипаНомераУчастникаСделки);
	Раздел3.Колонки.Добавить("НомерКонтрагента", ОписаниеТипаНомераУчастникаСделки);
	
	НомерКонтрагента = 1;
	Для Каждого Контрагент Из Раздел2 Цикл
		Контрагент.НомерКонтрагента = НомерКонтрагента;
		НомерКонтрагента = НомерКонтрагента + 1;
	КонецЦикла;
	Для Каждого Контрагент Из Раздел3 Цикл
		Контрагент.НомерКонтрагента = НомерКонтрагента;
		НомерКонтрагента = НомерКонтрагента + 1;
	КонецЦикла;

	ТипНомераСтраницы = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Неотрицательный));
	КоличествоЛистовРаздела = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(6, 0, ДопустимыйЗнак.Неотрицательный));
	
	Листы1А.Колонки.Добавить("Количество1Б", КоличествоЛистовРаздела);
	
	Листы1Б.Колонки.Добавить("Строка050НомерУчастникаСделки", ОписаниеТипаНомераУчастникаСделки);

	
	Листы = Новый ТаблицаЗначений();
	Листы.Колонки.Добавить("Раздел",             Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(50)));
	Листы.Колонки.Добавить("НомерСтрокиРаздела", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,0)));
	
	ДобавитьЛистВУведомление(Листы, "ТитульныйЛист", 0);
	//Для организации физического-лица титульные листы содержат 2 листа
	Если СведенияОбУведомлении.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо
		И СокрЛП(СведенияОбУведомлении.ИНН) = "" Тогда
		ДобавитьЛистВУведомление(Листы, "ТитульныйЛистФизическоеЛицо", 0);
	КонецЕсли;
	
	//нумерация листов раздела 1А и 1Б
	Для каждого Лист1А Из Листы1А Цикл
		
		ДобавитьЛистВУведомление(Листы, "Лист1А", Листы1А.Индекс(Лист1А));
		
		Отбор = Новый Структура("Сделка", Лист1А.Сделка);
		
		СписокЛистов1Б = Листы1Б.НайтиСтроки(Отбор);
		Лист1А.Количество1Б = СписокЛистов1Б.Количество();
		
		Для Каждого Лист1Б Из СписокЛистов1Б Цикл
			
			ДобавитьЛистВУведомление(Листы, "Лист1Б", Листы1Б.Индекс(Лист1Б));
			
			Если Лист1Б.ТипКонтрагента = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
				СведенияОКонтрагенте = Раздел3.Найти(Лист1Б.Контрагент, "Контрагент");
			Иначе
				СведенияОКонтрагенте = Раздел2.Найти(Лист1Б.Контрагент, "Контрагент");
			КонецЕсли;
			Если СведенияОКонтрагенте <> Неопределено Тогда
				Лист1Б.Строка050НомерУчастникаСделки = СведенияОКонтрагенте.НомерКонтрагента;
			КонецЕсли;
			
		КонецЦикла;
		
		СписокЛистов2 = Листы2.НайтиСтроки(Отбор);
		Для Каждого Лист2 Из СписокЛистов2 Цикл
			ДобавитьЛистВУведомление(Листы, "Раздел2", Листы2.Индекс(Лист2));
		КонецЦикла;
		
		СписокЛистов3 = Листы3.НайтиСтроки(Отбор);
		Для Каждого Лист3 Из СписокЛистов3 Цикл
			ДобавитьЛистВУведомление(Листы, "Раздел3", Листы3.Индекс(Лист3));
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Новый Структура("Листы, ЛистыРаздела1А, ЛистыРаздела1Б, ЛистыРаздела2, ЛистыРаздела3, ДанныеРаздела2, ДанныеРаздела3", 
		Листы, Листы1А, Листы1Б, Листы2, Листы3, Раздел2, Раздел3);
	
КонецФункции

Процедура ДобавитьЛистВУведомление(Знач Листы, Знач Раздел, Знач НомерСтрокиРаздела)
	
	Лист = Листы.Добавить();
	Лист.Раздел = Раздел;
	Лист.НомерСтрокиРаздела = НомерСтрокиРаздела;
	
КонецПроцедуры

Функция ПолучитьКодВидаДокументаПоВидуДокумента(ДокументВид) Экспорт
	
	Если ЗначениеЗаполнено(ДокументВид) Тогда
		Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументВид, "КодИМНС");
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

Функция ЛистУведомления(НомерЛиста, ЛистыУведомления, СведенияОбУведомлении)
	
	Лист = ЛистыУведомления.Листы[НомерЛиста - 1];
	
	ИменаМакетов = СведенияОбУведомлении.ПараметрыВерсии.Макеты;
	Макет = Документы.УведомлениеОКонтролируемыхСделках.ПолучитьМакет(ИменаМакетов[Лист.Раздел]);
	УстановитьНомерСтраницы(Макет, НомерЛиста, СведенияОбУведомлении.ПараметрыВерсии.ДлинаНомераСтраница);
	
	Если Лист.Раздел = "ТитульныйЛист" Тогда
		ДанныеЛиста = ДанныеЗаполненияЛиста1(СведенияОбУведомлении);
	ИначеЕсли Лист.Раздел = "ТитульныйЛистФизическоеЛицо" Тогда
		ДанныеЛиста = ДанныеЗаполненияЛиста2(СведенияОбУведомлении);
	ИначеЕсли Лист.Раздел = "Лист1А" Тогда
		Лист1А = ЛистыУведомления.ЛистыРаздела1А[Лист.НомерСтрокиРаздела];
		ДанныеЛиста = ДанныеЗаполненияЛиста1А(СведенияОбУведомлении, Лист1А);
	ИначеЕсли Лист.Раздел = "Лист1Б" Тогда
		Лист1Б = ЛистыУведомления.ЛистыРаздела1Б[Лист.НомерСтрокиРаздела];
		ДанныеЛиста = ДанныеЗаполненияЛиста1Б(СведенияОбУведомлении, Лист1Б);
	ИначеЕсли Лист.Раздел = "Раздел2" Тогда
		Лист2 = ЛистыУведомления.ЛистыРаздела2[Лист.НомерСтрокиРаздела];
		ДанныеРаздела2 = ЛистыУведомления.ДанныеРаздела2;
		ДанныеЛиста = ДанныеЗаполненияРаздела2(СведенияОбУведомлении, Лист2, ДанныеРаздела2);
	ИначеЕсли Лист.Раздел = "Раздел3" Тогда
		Лист3 = ЛистыУведомления.ЛистыРаздела3[Лист.НомерСтрокиРаздела];
		ДанныеРаздела3 = ЛистыУведомления.ДанныеРаздела3;
		ДанныеЛиста = ДанныеЗаполненияРаздела3(СведенияОбУведомлении, Лист3, ДанныеРаздела3);
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Макет.Параметры, ДанныеЛиста);
	
	Возврат Макет;
	
КонецФункции

Процедура СформироватьЛистыУведомления(ЛистыУведомления, СведенияОбУведомлении, ПервыйЛист, ПоследнийЛист, ТабличныйДокумент) Экспорт
	
	Для НомерЛиста = ПервыйЛист По ПоследнийЛист Цикл
		
		ЛистУведомления = ЛистУведомления(НомерЛиста, ЛистыУведомления, СведенияОбУведомлении);
		
		ТабличныйДокумент.Вывести(ЛистУведомления);
		ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		
	КонецЦикла
	
КонецПроцедуры

Процедура ЗаполнитьГраницыКонтролируемости() Экспорт
	
	РегистрыСведений.ГраницыКонтролируемостиСделок.ЗаполнитьГраницыКонтролируемости();
	
КонецПроцедуры

//Возвращает уведомление оргнанизации в отчетном году
//Параметры
//Организация - Справочник Организации
//ОтчетныйГод - Число(4,0)
//ТипУведомления - Число(1,0)
//	0 - Уведомление
//	1 - Корректировка
//НомерКорректировки - Число(3,0)
//ТипПоиска - Строка
//	Последний 	- Искать корректировку с наибольшим номером
//	Следующий 	- Искать коректировку с номером "НомерКорректировки" или следующую
//	Предыдущий 	- Искать коректировку с номером "НомерКорректировки" или предидущую
//	Указанный 	- Искать только указанный номер корректировки 
//	(Возвращает неопределено если уведомление  не найдено)
Функция НайтиУведомлениеОрганизацииВОтчетномГоду(Организация, ОтчетныйГод, ТипУведомления = Неопределено, НомерКорректировки = Неопределено, ТипПоиска = "Последний") Экспорт
		
		Запрос = Новый Запрос();
		Запрос.Параметры.Вставить("Организация", Организация);
		Запрос.Параметры.Вставить("ОтчетныйГод", Дата(ОтчетныйГод, 1, 1));
		Запрос.Параметры.Вставить("НомерКорректировки", ?(ТипУведомления = 0, 0, ?(НомерКорректировки = Неопределено,0,НомерКорректировки)));
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	УведомлениеОКонтролируемыхСделках.Ссылка КАК Уведомление,
		|	УведомлениеОКонтролируемыхСделках.НомерКорректировки КАК НомерКорректировки,
		|	УведомлениеОКонтролируемыхСделках.Организация,
		|	УведомлениеОКонтролируемыхСделках.ОтчетныйГод,
		|	УведомлениеОКонтролируемыхСделках.ДатаФормированияСпискаСделок,
		|	УведомлениеОКонтролируемыхСделках.ДатаЗаполненияУведомления
		|ИЗ
		|	Документ.УведомлениеОКонтролируемыхСделках КАК УведомлениеОКонтролируемыхСделках
		|ГДЕ
		|	УведомлениеОКонтролируемыхСделках.Организация = &Организация
		|	И УведомлениеОКонтролируемыхСделках.ОтчетныйГод = &ОтчетныйГод
		|	И УведомлениеОКонтролируемыхСделках.НомерКорректировки >= &НомерКорректировки
		|	И НЕ УведомлениеОКонтролируемыхСделках.ПометкаУдаления";
		
		Если ТипУведомления = Неопределено и ТипПоиска = "Последний" Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"И УведомлениеОКонтролируемыхСделках.НомерКорректировки >= &НомерКорректировки","");	
		КонецЕсли;
		
		Если ТипПоиска = "Последний" Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|
			|УПОРЯДОЧИТЬ ПО
			|	НомерКорректировки УБЫВ";
		ИначеЕсли ТипПоиска = "Следующий" Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|
			|УПОРЯДОЧИТЬ ПО
			|	НомерКорректировки ВОЗР";
		ИначеЕсли ТипПоиска = "Предыдущий" Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|
			|УПОРЯДОЧИТЬ ПО
			|	НомерКорректировки УБЫВ";
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"И УведомлениеОКонтролируемыхСделках.НомерКорректировки >= &НомерКорректировки",
													"И УведомлениеОКонтролируемыхСделках.НомерКорректировки <= &НомерКорректировки");	
		ИначеЕсли ТипПоиска = "Указанный" Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"И УведомлениеОКонтролируемыхСделках.НомерКорректировки >= &НомерКорректировки",
													"И УведомлениеОКонтролируемыхСделках.НомерКорректировки = &НомерКорректировки");	
		КонецЕсли;	
		
		Запрос.Текст = ТекстЗапроса;
		Результат = Запрос.Выполнить().Выбрать();
		
		Если Результат.Следующий() Тогда
			ТипУведомления = ?(Результат.НомерКорректировки = 0, 0, 1);
			НомерКорректировки = ?(ТипУведомления = 0, 0, Результат.НомерКорректировки);
			Возврат Результат.Уведомление;
		Иначе
			Возврат Неопределено;
		КонецЕсли;

	КонецФункции	

Функция ПредставлениеУведомления(Уведомление, ШаблонТекста) Экспорт
	
	Если Уведомление = ПредопределенноеЗначение("Документ.УведомлениеОКонтролируемыхСделках.ПустаяСсылка") Тогда
		Возврат НСтр("ru = ''");
	КонецЕсли;
	
	ПараметрыУведомления = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(Уведомление, "Организация, НомерКорректировки, ОтчетныйГод");
	
	Представление = ?(ПараметрыУведомления.НомерКорректировки > 0, 
		НСтр("ru = '%ШаблонТекста% корректировки №%НомерКорректировки% уведомления ""%Организация%"" за %Год%'"),
		НСтр("ru = '%ШаблонТекста% уведомления ""%Организация%"" за %Год%'"));
	Представление = СтрЗаменить(Представление, "%НомерКорректировки%", ПараметрыУведомления.НомерКорректировки);
	Представление = СтрЗаменить(Представление, "%Организация%", ПараметрыУведомления.Организация);
	Представление = СтрЗаменить(Представление, "%Год%", Формат(ПараметрыУведомления.ОтчетныйГод,"ДФ=yyyy"));
	Представление = СтрЗаменить(Представление, "%ШаблонТекста%", ШаблонТекста);
	
	Возврат Представление;
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////////////////////
//ФОРМИРОВАНИЕ ДВИЖЕНИЙ

Процедура СформироватьДвиженияКонтролируемыхСделокОрганизаций(КонтролируемыеСделкиОрганизаций, Движения, Отказ) Экспорт
	
	Движения.КонтролируемыеСделкиОрганизаций.Загрузить(КонтролируемыеСделкиОрганизаций);
	
	Движения.КонтролируемыеСделкиОрганизаций.Записывать = Истина;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////////////////////
//НУМЕРАЦИЯ ДОКУМЕНТОВ

Процедура ПеренумерацияКонтролируемыхСделокУведомления(Уведомление) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	КонтролируемаяСделка.Ссылка КАК Документ
	               |ИЗ
	               |	Документ.КонтролируемаяСделка КАК КонтролируемаяСделка
	               |ГДЕ
	               |	КонтролируемаяСделка.УведомлениеОКонтролируемойСделке = &Уведомление
	               |	И НЕ КонтролируемаяСделка.ПометкаУдаления
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	КонтролируемаяСделка.Номер";
	
	Запрос.УстановитьПараметр("Уведомление", Уведомление);
	
	Сч = 1;
	
	Выборка = Запрос.Выполнить().Выбрать();
	СчетчикТранзакции = 0;
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.Документ.Номер <> Сч Тогда
			КонтролируемаяСделка = Выборка.Документ.ПолучитьОбъект();
			КонтролируемаяСделка.Номер = Сч;
			КонтролируемаяСделка.Записать();
		КонецЕсли;
		
		Сч = Сч + 1;
		
	КонецЦикла;
	
КонецПроцедуры	

Функция НомераКонтролируемыхСделокУведомленияКоректны(Уведомление) Экспорт
	
	НомераКорректны = Истина;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =  "ВЫБРАТЬ
					|	КОЛИЧЕСТВО(КонтролируемаяСделка.Ссылка) КАК Количество,
					|	ЕстьNull(МАКСИМУМ(КонтролируемаяСделка.Номер), 0) КАК МаксимальныйНомер,
					|    КОЛИЧЕСТВО(РАЗЛИЧНЫЕ КонтролируемаяСделка.Номер) КАК КоличествоРазличных
					|ИЗ
					|	Документ.КонтролируемаяСделка КАК КонтролируемаяСделка
					|ГДЕ
					|	КонтролируемаяСделка.УведомлениеОКонтролируемойСделке = &Уведомление
					|	И НЕ КонтролируемаяСделка.ПометкаУдаления";
				   
	Запрос.УстановитьПараметр("Уведомление", Уведомление);
	РезультатПроверки = Запрос.Выполнить().Выбрать();			   
	
	Если РезультатПроверки.Следующий() Тогда
		
		НомераКорректны	= (РезультатПроверки.МаксимальныйНомер = РезультатПроверки.Количество 
							И РезультатПроверки.МаксимальныйНомер = РезультатПроверки.КоличествоРазличных);
		
	КонецЕсли;	
				   
	Возврат НомераКорректны;	
	
КонецФункции	

Функция ПолучитьСледующийНомерКонтролируемойСделкиУведомления(Уведомление) Экспорт
	
	Номер = 0;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =  "ВЫБРАТЬ
					|	ЕстьNull(МАКСИМУМ(КонтролируемаяСделка.Номер), 0) КАК Номер
					|ИЗ
					|	Документ.КонтролируемаяСделка КАК КонтролируемаяСделка
					|ГДЕ
					|	КонтролируемаяСделка.УведомлениеОКонтролируемойСделке = &Уведомление
					|	И НЕ КонтролируемаяСделка.ПометкаУдаления";
			   
	Запрос.УстановитьПараметр("Уведомление", Уведомление);
	Результат = Запрос.Выполнить().Выбрать();			   
	
	Если Результат.Следующий() Тогда
		
		Номер = Результат.Номер;
		
	КонецЕсли;	
				   
	Возврат Номер + 1;	
	
	
КонецФункции	

Процедура ПолучитьЛистыУведомленияВФоне(ПараметрыОтчета, АдресХранилища) Экспорт 
	
	Результат = ПолучитьЛистыУведомления(ПараметрыОтчета);
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
	
КонецПроцедуры

Процедура ЗаполнитьСписокГоловныхОрганизаций(СписокОрганизаций) Экспорт
	
	СписокОрганизаций.Очистить();
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Организации.Ссылка,
	|	Организации.Наименование КАК Наименование
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СписокОрганизаций.Добавить(Выборка.Ссылка, Выборка.Наименование);
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьПравильностьЗаполненияКонтрагентаРегистра(Отказ, ТаблицаЗаписей, ОписаниеКлючаЗаписи) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Параметры.Вставить("КлючиРегистра", ТаблицаЗаписей);
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	КлючиРегистра.Контрагент КАК Контрагент
	|ПОМЕСТИТЬ КлючиРегистра
	|ИЗ
	|	&КлючиРегистра КАК КлючиРегистра
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Контрагент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Контрагенты.Наименование КАК Наименование,
	|	КлючиРегистра.Контрагент КАК Контрагент
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ КлючиРегистра КАК КлючиРегистра
	|		ПО Контрагенты.Ссылка = КлючиРегистра.Контрагент
	|ГДЕ
	|	Контрагенты.Ссылка В
	|			(ВЫБРАТЬ
	|				КлючиРегистра.Контрагент
	|			ИЗ
	|				КлючиРегистра КАК КлючиРегистра)
	|	И Контрагенты.ОбособленноеПодразделение = ИСТИНА";
	
	ПоляКлюча = "";
	Для Каждого ОписаниеКлюча Из ОписаниеКлючаЗаписи Цикл
		ПоляКлюча = ПоляКлюча + ?(ПоляКлюча = "", "", ", ") + ОписаниеКлюча.Ключ + " КАК " + ОписаниеКлюча.Ключ;
	КонецЦикла;
	
	Запрос.Текст = СтрЗаменить(ТекстЗапроса, "КлючиРегистра.Контрагент КАК Контрагент", ПоляКлюча);
	
	Ошибка = Запрос.Выполнить().Выбрать();
	
	Пока Ошибка.Следующий() Цикл
		
		ТекстСообщения = НСтр("ru = 'Контрагент ""%1"" является обособленным подразделением. Можно выбирать только головного контрагента'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Ошибка.Наименование);
		
		ЗаполнитьЗначенияСвойств(ОписаниеКлючаЗаписи, Ошибка);
		КлючЗаписи = РегистрыСведений.ВзаимозависимыеЛица.СоздатьКлючЗаписи(ОписаниеКлючаЗаписи);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, КлючЗаписи, "Запись.Контрагент", , Отказ);
		
	КонецЦикла;

	
КонецПроцедуры

Процедура ЗаполнитьТаблицуОфшоров(Таблица) Экспорт
	
	МассивКодов = Новый Массив;
	
	Макет = РегистрыСведений.УчастникиКонтролируемыхСделок.ПолучитьМакет("ПереченьОфшоров2015");
	ОбластьМакета = Макет.ПолучитьОбласть("ПереченьТерриторий");
	
	Для Ном = 1 По ОбластьМакета.ВысотаТаблицы Цикл
		ТекКод = ОбластьМакета.Область(Ном,1, Ном, 1).Текст;
		МассивКодов.Добавить(СокрЛП(ТекКод));
	КонецЦикла;
	
	Запрос = Новый Запрос();
	Запрос.Параметры.Вставить("МассивКодов", МассивКодов);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КлассификаторСтранМира.Ссылка КАК СтранаРегистрации
	|ИЗ
	|	Справочник.КлассификаторСтранМира КАК КлассификаторСтранМира
	|ГДЕ
	|	КлассификаторСтранМира.Код В(&МассивКодов)";
	
	Таблица.Очистить();
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Таблица.Добавить().СтранаРегистрации = Выборка.СтранаРегистрации;
	КонецЦикла;
	
КонецПроцедуры

Функция СписокОфшоров(Знач ОтчетныйГод) Экспорт
	
	МассивКодов = Новый Массив;
	
	Если НЕ ЗначениеЗаполнено(ОтчетныйГод) Тогда
		ОтчетныйГод = НачалоГода(ТекущаяДатаСеанса());
	КонецЕсли;
	
	Если ОтчетныйГод < Дата(2015, 01, 01) Тогда
		Макет = РегистрыСведений.УчастникиКонтролируемыхСделок.ПолучитьМакет("ПереченьОфшоров");
	ИначеЕсли ОтчетныйГод < Дата(2018, 01, 01) Тогда
		Макет = РегистрыСведений.УчастникиКонтролируемыхСделок.ПолучитьМакет("ПереченьОфшоров2015");
	Иначе
		Макет = РегистрыСведений.УчастникиКонтролируемыхСделок.ПолучитьМакет("ПереченьОфшоров2018");
	КонецЕсли;
	
	ОбластьМакета = Макет.ПолучитьОбласть("ПереченьТерриторий");
	
	Для Ном = 1 По ОбластьМакета.ВысотаТаблицы Цикл
		ТекКод = ОбластьМакета.Область(Ном,1, Ном, 1).Текст;
		МассивКодов.Добавить(СокрЛП(ТекКод));
	КонецЦикла;
	
	Запрос = Новый Запрос();
	Запрос.Параметры.Вставить("МассивКодов", МассивКодов);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтраныМира.Ссылка КАК СтранаРегистрации
	|ИЗ
	|	Справочник.КлассификаторСтранМира КАК СтраныМира
	|ГДЕ
	|	СтраныМира.Код В(&МассивКодов)";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("СтранаРегистрации");
	
КонецФункции

Функция СписокТоваровМировойБиржевойТорговли() Экспорт
	
	МассивКодов = Новый Массив;
	
	Макет = РегистрыСведений.ПредметыКонтролируемыхСделок.ПолучитьМакет("ТоварыМировойБиржевойТорговли");
	ОбластьМакета = Макет.ПолучитьОбласть("ПереченьКодовТНВЭД");
	
	Для Ном = 1 По ОбластьМакета.ВысотаТаблицы Цикл
		ТекКод = ОбластьМакета.Область(Ном,1, Ном, 1).Текст;
		МассивКодов.Добавить(СокрЛП(ТекКод));
	КонецЦикла;
	
	Запрос = Новый Запрос();
	Запрос.Параметры.Вставить("МассивКодов", МассивКодов);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК ПредметСделки
	|ИЗ
	|	Справочник.КлассификаторТНВЭД КАК КлассификаторТНВЭД
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
	|		ПО КлассификаторТНВЭД.Ссылка = Номенклатура.КодТНВЭД
	|ГДЕ
	|	КлассификаторТНВЭД.Код В(&МассивКодов)";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ПредметСделки");
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////////////////////
//ЗАПОЛНЕНИЕ ТАБЛИЧНЫХ ЧАСТЕЙ

Процедура ВыполнитьЗаполнениеТабличнойЧасти(Объект, ИмяТабличнойЧасти, ТабличноеПоле, ВыполняемаяОбработка, ДополнительныеПараметры) Экспорт
	
	// Проверка корректности переданных параметров
	Если ТипЗнч(ВыполняемаяОбработка) <> Тип("СправочникСсылка.ВнешниеОбработки") 
		ИЛИ ВыполняемаяОбработка = Справочники.ВнешниеОбработки.ПустаяСсылка() Тогда
		Возврат;
	КонецЕсли;
	
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ВыполняемаяОбработка.ХранилищеВнешнейОбработки.Получить());
	
	ИмяОбработки = ВнешниеОбработки.Подключить(АдресВоВременномХранилище, , Истина);
	
	Обработка = ВнешниеОбработки.Создать(ИмяОбработки);
	
	// Передать внешней обработке дополнительные параметры
	Если ДополнительныеПараметры <> Неопределено Тогда
		
		// Если у внешней обработки есть реквизит для дополнительных параметров, присвоить ему значение
		Если НЕ Обработка.Метаданные().Реквизиты.Найти("ДополнительныеПараметры") = Неопределено Тогда
			Обработка.ДополнительныеПараметры = ДополнительныеПараметры;
		КонецЕсли;
		
	КонецЕсли;
	
	Попытка
		Обработка.Инициализировать(Объект, ИмяТабличнойЧасти, ТабличноеПоле);
	Исключение
		ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки(),, "Заполнение ТЧ не произведено!");
	КонецПопытки;
	
КонецПроцедуры

Функция ЗаполнитьДеревоКнопокЗаполненияТабличныхЧастей(ДеревоКомандЗаполненияТабличныхЧастей, МетаданныеОбъекта)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВнешниеОбработкиПринадлежность.Ссылка,
	|	ВнешниеОбработкиПринадлежность.ДополнительныеПараметрыОбработки КАК ДополнительныеПараметрыОбработки,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВнешниеОбработкиПринадлежность.ПредставлениеКнопки, """") <> """" ТОГДА ВнешниеОбработкиПринадлежность.ПредставлениеКнопки
	|		ИНАЧЕ ВнешниеОбработкиПринадлежность.Ссылка.Наименование
	|	КОНЕЦ КАК Наименование,
	|	ВнешниеОбработкиПринадлежность.ТабличнаяЧастьИмя КАК ТабличнаяЧастьИмя
	|ИЗ
	|	Справочник.ВнешниеОбработки.Принадлежность КАК ВнешниеОбработкиПринадлежность
	|ГДЕ
	|	(НЕ ВнешниеОбработкиПринадлежность.Ссылка.ПометкаУдаления)
	|	И ВнешниеОбработкиПринадлежность.МетаданныеОбъекта = &МетаданныеОбъекта
	|	И ВнешниеОбработкиПринадлежность.Ссылка.ВидОбработки = &ВидОбработки
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТабличнаяЧастьИмя
	|ИТОГИ ПО
	|	ТабличнаяЧастьИмя";
	
	ДеревоКнопок = ИнициализироватьДеревоДополнительныхКнопок(ДеревоКомандЗаполненияТабличныхЧастей);
	
	Запрос.УстановитьПараметр("ВидОбработки", Перечисления.ВидыДополнительныхВнешнихОбработок.ЗаполнениеТабличныхЧастей);
	Если Метаданные.Документы.Содержит(МетаданныеОбъекта) Тогда
		Запрос.УстановитьПараметр("МетаданныеОбъекта", "Документ." + МетаданныеОбъекта.Имя);
	ИначеЕсли Метаданные.Справочники.Содержит(МетаданныеОбъекта) Тогда
		Запрос.УстановитьПараметр("МетаданныеОбъекта", "Справочник." + МетаданныеОбъекта.Имя);
	ИначеЕсли Метаданные.Отчеты.Содержит(МетаданныеОбъекта) Тогда
		Запрос.УстановитьПараметр("МетаданныеОбъекта", "Отчет." + МетаданныеОбъекта.Имя);
	Иначе
		Возврат ДеревоКнопок;
	КонецЕсли;
	
	НомерКнопки = 0;
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока Выборка.Следующий() Цикл
		СтрокаПодменю = ДобавитьСтрокуВДеревоКнопок(ДеревоКнопок, Выборка.ТабличнаяЧастьИмя, , , , , , , Истина);
		ВыборкаДействий            = Выборка.Выбрать();
		
		Пока ВыборкаДействий.Следующий() Цикл
			
			НомерКнопки = НомерКнопки + 1;
			
			СтруктураРасшифровки = Новый Структура("СсылкаНаВнешнююОбработку, ДополнительныеПараметрыОбработки", ВыборкаДействий.Ссылка, ВыборкаДействий.ДополнительныеПараметрыОбработки.Получить());
			
			ДобавитьСтрокуВДеревоКнопок(СтрокаПодменю, "ЗаполнениеТЧ"+Выборка.ТабличнаяЧастьИмя+НомерКнопки, ВыборкаДействий.Наименование, СтруктураРасшифровки, , , , , Истина);
			
		КонецЦикла;
	КонецЦикла;
	
КонецФункции

Функция ИнициализироватьДеревоДополнительныхКнопок(ДеревоКнопок)
	
	ДеревоКнопок = Новый ДеревоЗначений;
	
	ДеревоКнопок.Колонки.Добавить("Имя");
	ДеревоКнопок.Колонки.Добавить("Текст");
	ДеревоКнопок.Колонки.Добавить("Подсказка");
	ДеревоКнопок.Колонки.Добавить("Картинка");
	ДеревоКнопок.Колонки.Добавить("Пометка");
	
	ДеревоКнопок.Колонки.Добавить("ИзменяетДанные");
	
	//Остальные свойства кнопки
	
	ДеревоКнопок.Колонки.Добавить("Расшифровка");
	
	Возврат ДеревоКнопок;
	
КонецФункции

Функция ДобавитьСтрокуВДеревоКнопок(СтрокаПодменю, Имя, Текст = "", Расшифровка = Неопределено, Пометка = Ложь, Подсказка = "", Картинка = Неопределено, Позиция = Неопределено, ИзменяетДанные = Ложь)
	
	Если Позиция = Неопределено Тогда
		СтрокаКнопки         = СтрокаПодменю.Строки.Добавить();
	Иначе
		СтрокаКнопки         = СтрокаПодменю.Строки.Вставить(Позиция);
	КонецЕсли;
	
	СтрокаКнопки.Имя                = Имя;
	СтрокаКнопки.Текст              = Текст;
	СтрокаКнопки.Картинка           = Картинка;
	СтрокаКнопки.Подсказка          = Подсказка;
	СтрокаКнопки.Пометка            = Пометка;
	СтрокаКнопки.ИзменяетДанные     = ИзменяетДанные;
	
	СтрокаКнопки.Расшифровка = Расшифровка;
	
	Возврат СтрокаКнопки;
	
КонецФункции

Процедура СоздатьКомандыЗаполненияТабличныхЧастей(Форма, МетаданныеОбъекта, ТабличныеЧасти) Экспорт
	
	Перем ЭлементыТабличнойЧасти;
	
	ЗаполнитьДеревоКнопокЗаполненияТабличныхЧастей(Форма.ДеревоКомандЗаполненияТабличныхЧастей, МетаданныеОбъекта);
	
	Для Каждого ТабличнаяЧасть Из Форма.ДеревоКомандЗаполненияТабличныхЧастей.Строки Цикл
		
		ТабличныеЧасти.Свойство(ТабличнаяЧасть.Имя, ЭлементыТабличнойЧасти);
		
		Если ЭлементыТабличнойЧасти <> Неопределено Тогда
			ТабличнаяЧасть.Расшифровка = ЭлементыТабличнойЧасти.ИмяТабличногоПоля;
			
			Для Каждого КомандаТабличнойЧасти ИЗ ТабличнаяЧасть.Строки Цикл
				Команда = Форма.Команды.Добавить(КомандаТабличнойЧасти.Имя);
				Команда.Заголовок = КомандаТабличнойЧасти.Текст;
				Команда.Действие = "ЗаполнениеТабличныхЧастей_Подключаемый";
				Команда.Подсказка = КомандаТабличнойЧасти.Подсказка;
				Команда.ИзменяетСохраняемыеДанные = КомандаТабличнойЧасти.ИзменяетДанные;
				Кнопка = Форма.Элементы.Добавить(КомандаТабличнойЧасти.Имя, Тип("КнопкаФормы"), Форма.Элементы[ЭлементыТабличнойЧасти.ИмяГруппыКоманд]);
				Кнопка.ИмяКоманды = КомандаТабличнойЧасти.Имя;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

/////////////////////////////////////////
// ПЕЧАТЬ

Функция ПечатьКонтролируемойСделки(КонтролируемаяСделка, ОбъектыПечати) Экспорт 
	
	Если НЕ ЗначениеЗаполнено(КонтролируемаяСделка) Тогда
		Возврат Новый ТабличныйДокумент;
	КонецЕсли;
	
	Уведомление = ОбщегоНазначения.ПолучитьЗначениеРеквизита(КонтролируемаяСделка, "УведомлениеОКонтролируемойСделке");
	СведенияОбУведомлении = Документы.УведомлениеОКонтролируемыхСделках.ПолучитьСведенияОбУведомлении(Уведомление);
	
	ЛистыУведомления = КонтролируемыеСделки.ПолучитьЛистыУведомления(Уведомление, КонтролируемаяСделка);
	Листы = ЛистыУведомления.Листы;
	
	Если Листы.Количество()>1 
		И Листы[1].Раздел = "ТитульныйЛистФизическоеЛицо" Тогда
		ПервыйЛист = 3;
	Иначе
		ПервыйЛист = 2;
	КонецЕсли;
	
	ТабДокумент = Новый ТабличныйДокумент;
	
	НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;
	СформироватьЛистыУведомления(ЛистыУведомления, СведенияОбУведомлении, ПервыйЛист, ЛистыУведомления.Листы.Количество(), ТабДокумент);
	
	УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент, НомерСтрокиНачало, ОбъектыПечати, Уведомление);
	Возврат ТабДокумент;
	
КонецФункции