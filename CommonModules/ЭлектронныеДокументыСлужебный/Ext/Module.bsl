////////////////////////////////////////////////////////////////////////////////
// ЭлектронныеДокументыСлужебный: механизм обмена электронными документами.
//
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЙ ПРОГРАММНЫЙ ИНТЕРФЕЙС

////////////////////////////////////////////////////////////////////////////////
// Регистрация объектов для обмена электронными документами

// Обработчик события "ПередЗаписью" владельцев электронных документов.
//
// Параметры:
//  Источник        - объект - владелец присоединенного файла,
//  Отказ           - булево - признак отказа от записи,
//  РежимЗаписи     - РежимЗаписиДокумента - режим записи владельца электронного документа,
//  РежимПроведения - РежимПроведенияДокумента - режим проведения владельца электронного документа.
//
Процедура ЭлектронныеДокументыВладелецПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// Проверка технического документа в подписке на событие.
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.ПакетЭД") Тогда
		Возврат;
	КонецЕсли;
	
	ГрупповоеПерепроведение = Неопределено;
	Если Источник.ДополнительныеСвойства.Свойство("ГрупповоеПерепроведение", ГрупповоеПерепроведение)
		И ГрупповоеПерепроведение = Истина Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьЗначениеФункциональнойОпции("ИспользоватьОбменЭД") Тогда
		Возврат;
	КонецЕсли;
	
	// Пометим на удаление (снимем пометку) электронные документы, связанные с владельцем.
	Если Не Источник.ЭтоНовый() Тогда
		ИсточникСсылкаПометкаУдаления = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Источник.Ссылка, "ПометкаУдаления");
		Если Источник.ПометкаУдаления <> ИсточникСсылкаПометкаУдаления Тогда
			ЭлектронныеДокументыСлужебныйВызовСервера.ПометитьНаУдалениеЭлектронныеДокументыПоВладельцу(Источник.Ссылка, Источник.ПометкаУдаления);
		КонецЕсли;
	Иначе
		Источник.ДополнительныеСвойства.Вставить("ЭтоНовыйОбъект", Истина);
	КонецЕсли;
	
	ТипИсточника = ТипЗнч(Источник);
	
	// ЭД делаем только когда есть действующее соглашение об обмене
	Если (Не Источник.ДополнительныеСвойства.Свойство("ЕстьСоглашение") ИЛИ НЕ Источник.ДополнительныеСвойства.ЕстьСоглашение)
		И Не ТипИсточника = Тип("ДокументОбъект.ПакетЭД") Тогда
		
		ПараметрыЭД = ЗаполнитьПараметрыЭДПоИсточнику(Источник);
		
		Если Не ЭлектронныеДокументыСлужебныйВызовСервера.ЕстьДействующееСоглашение(ПараметрыЭД) Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Источник.ДополнительныеСвойства.Вставить("ЕстьСоглашение", Истина);
	
	ИзменилисьКлючевыеРеквизиты = Ложь;
	ПодлежитОбмену = Истина;
	СостояниеЭД = ПолучитьСтруктуруВерсииЭД(Источник.Ссылка).СостояниеВерсииЭД;
	
	ЭлектронныеДокументыПереопределяемый.ПередЗаписьюВладельцаЭлектронногоДокумента(
		Источник, ИзменилисьКлючевыеРеквизиты, СостояниеЭД, ПодлежитОбмену, Отказ);
		
	Если Отказ Тогда
		Если ИзменилисьКлючевыеРеквизиты Тогда
			ТекстСообщения = НСтр("ru='Существует электронный документ. Изменение ключевых реквизитов документа запрещено.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если ПодлежитОбмену Тогда
		Если (Источник.ЭтоНовый() Или ИзменилисьКлючевыеРеквизиты) Тогда
			Источник.ДополнительныеСвойства.Вставить("ЗарегистрироватьОбъект", Истина);
		КонецЕсли;
	Иначе
		Источник.ДополнительныеСвойства.Вставить("УдалитьСостояниеОбъекта", Истина);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события "ПриЗаписи" владельцев электронных документов.
//
// Параметры:
//  Источник - объект - владелец присоединенного файла,
//  Отказ    - булево - признак отказа от записи.
//
Процедура ЭлектронныеДокументыВладелецПриЗаписи(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ГрупповоеПерепроведение = Неопределено;
	Если Источник.ДополнительныеСвойства.Свойство("ГрупповоеПерепроведение", ГрупповоеПерепроведение)
		И ГрупповоеПерепроведение = Истина Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьЗначениеФункциональнойОпции("ИспользоватьОбменЭД") Тогда
		Возврат;
	КонецЕсли;
	
	Если 
		(Не Источник.ДополнительныеСвойства.Свойство("ЕстьСоглашение")
		Или Не Источник.ДополнительныеСвойства.ЕстьСоглашение)
		Или 
		(Источник.ДополнительныеСвойства.Свойство("УдалитьСостояниеОбъекта")
		И Источник.ДополнительныеСвойства.УдалитьСостояниеОбъекта) Тогда
		
		ЭлектронныеДокументыСлужебныйВызовСервера.ПроверитьНаличиеИУдалитьСостояниеДокумента(Источник.Ссылка);
		Возврат;
	КонецЕсли;
	
	Если Не Источник.ДополнительныеСвойства.Свойство("ЗарегистрироватьОбъект")
		ИЛИ Не Источник.ДополнительныеСвойства.ЗарегистрироватьОбъект Тогда
		
		Возврат;
	КонецЕсли;
	
	// При изменении ключевых реквизитов объекта устанавливается новая версия электронного документа
	ЭлектронныеДокументыСлужебныйВызовСервера.УстановитьНовуюВерсиюЭД(Источник.Ссылка);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Изменение электронных документов

// Обработчик события "ПередЗаписью" электронных документов.
// 
// Параметры:
//  Источник - объект - электронный документ,
//  Отказ    - булево - признак отказа от записи.
//
Процедура ПередЗаписьюЭлектронногоДокумента(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.ПометкаУдаления Тогда
		ОбработатьУдалениеЭлектронногоДокумента(Источник.Ссылка);
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Источник.НаправлениеЭД)
		ИЛИ НЕ ЗначениеЗаполнено(Источник.ВидЭД)
		ИЛИ НЕ ЗначениеЗаполнено(Источник.ВладелецФайла) Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Источник.Ссылка) Тогда
		Источник.ДополнительныеСвойства.Вставить("ЗаписатьСобытиеЖР", Ложь);
		Возврат;
	ИначеЕсли Источник.Ссылка.СтатусЭД = Источник.СтатусЭД Тогда
		Если Источник.Ссылка.Ответственный <> Источник.Ответственный ИЛИ Источник.Ссылка.Описание <> Источник.Описание Тогда
			Источник.ДополнительныеСвойства.Вставить("ЗаписатьСобытиеЖР", Истина);
		Иначе
			Источник.ДополнительныеСвойства.Вставить("ЗаписатьСобытиеЖР", Ложь);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Источник.ДополнительныеСвойства.Вставить("ЗаписатьСобытиеЖР", Истина);
	Источник.ДополнительныеСвойства.Вставить("СостояниеВерсииЭД", ОпределитьСостояниеВерсииПоСтатусуЭД(Источник.Ссылка));
	
	Если Источник.ТипЭлементаВерсииЭД <> Перечисления.ТипыЭлементовВерсииЭД.ПДО
		ИЛИ Источник.ТипЭлементаВерсииЭД <> Перечисления.ТипыЭлементовВерсииЭД.ПДП Тогда
		
		Если Не ЗначениеЗаполнено(Источник.ТипЭлементаВерсииЭД) Тогда
			Возврат
		КонецЕсли;
		
		Если Источник.ДополнительныеСвойства.Свойство("СоглашениеЭД") Тогда
			СостояниеВерсииЭД = ОпределитьСостояниеВерсииПоСтатусуЭД(Источник);
		КонецЕсли;
		
		ВерсияЭДОбновлена = Ложь;
		ПринудительнаяСменаСостоянияВерсии = Неопределено;
		Источник.ДополнительныеСвойства.Свойство("ПринудительнаяСменаСостоянияВерсии", ПринудительнаяСменаСостоянияВерсии);
		ВерсияФорматаПакета = Неопределено;
		Источник.ДополнительныеСвойства.Свойство("ВерсияФорматаПакета", ВерсияФорматаПакета);
		ОтклонениеАннулирования = Неопределено;
		Источник.ДополнительныеСвойства.Свойство("ОтклонениеАннулирования", ОтклонениеАннулирования);
		
		Если Источник.ДополнительныеСвойства.Свойство("ДокументыДляОбновленияВладельца") Тогда
			Для Каждого Документ Из Источник.ДополнительныеСвойства.ДокументыДляОбновленияВладельца Цикл
				УстановитьСсылкуДляВладельцаВРегистреСостояний(Документ, Источник.Ссылка);
			КонецЦикла;
		КонецЕсли;
		
		Если Источник.ДополнительныеСвойства.Свойство("СостояниеВерсииЭД") Тогда
			
			СледСостояниеВерсииЭД = Источник.ДополнительныеСвойства.СостояниеВерсииЭД;
			СтруктураТекВерсииЭД  = ПолучитьСтруктуруВерсииЭД(Источник.ВладелецФайла);
			
			ОбновитьВерсию = СостояниеВерсииЭД <> СтруктураТекВерсииЭД.СостояниеВерсииЭД
			И Не ЭтоОтветныйТитул(Источник.Ссылка);
			
			Если ОбновитьВерсию Тогда
				ВерсияЭДОбновлена = Истина;
				ОбновитьВерсиюЭД(Источник, ПринудительнаяСменаСостоянияВерсии, ВерсияФорматаПакета, ОтклонениеАннулирования);
			КонецЕсли;
			
		КонецЕсли;
		
		// Установка флага "НаПодпись" для присоединенного файла
		АктуализироватьФлагНаПодпись(Источник);
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события "ПриЗаписи" электронных документов.
// 
// Параметры:
//  Источник - объект - электронный документ,
//  Отказ    - булево - признак отказа от записи.
//
Процедура ПриЗаписиЭлектронногоДокумента(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.ДополнительныеСвойства.Свойство("ЗаписатьСобытиеЖР")
		 И Источник.ДополнительныеСвойства.ЗаписатьСобытиеЖР Тогда
		ЗаписатьСобытиеЖурналаРегистрацииПоОбменуЭД(Источник.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Заполнение объектов

// Получает выборку элементов справочника ЭДПрисоединенныеФайлы по отбору
//
// Параметры:
//  Параметры - Структура, Ключ - название реквизита отбора, Значение - значение отбора
//
Функция ПолучитьВыборкуЭДПоОтбору(Параметры) Экспорт
	
	Если НЕ ТипЗнч(Параметры) = Тип("Структура") ИЛИ Параметры.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ 
	|	ЭДПрисоединенныеФайлы.Наименование,
	|	ЭДПрисоединенныеФайлы.Ссылка
	|ИЗ
	|	Справочник.ПакетЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	|ГДЕ 
	|";
	
	ПервыйЭлемент = Истина;
	Для Каждого Элемент Из Параметры Цикл
		Запрос.Текст = Запрос.Текст + ?(НЕ ПервыйЭлемент," И ","") + " ЭДПрисоединенныеФайлы." + Элемент.Ключ + "=&" + Элемент.Ключ;
		ПервыйЭлемент = Ложь;
		Запрос.УстановитьПараметр(Элемент.Ключ, Элемент.Значение);
	КонецЦикла;
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Регламентные задания

// Проверяет функциональные опции от которых зависит регламентное задание
//
// Параметры:
//  ПроверятьОбменЭД - булево, проверять функциональную опцию "ИспользоватьОбменЭД"
//  ПроверятьЭЦП - булево, проверять функциональную опцию "ИспользоватьЭлектронныеЦифровыеПодписи"
//  ИмяЗадания - строка, имя регламентного задания.
//
Процедура ПроверитьВозможностьВыполненияРегламентногоЗадания(ПроверятьОбменЭД, ПроверятьЭЦП, ИмяЗадания)
	
	ОписаниеОшибки = НСтр("ru = 'Регламентное задание ""%1"" отключено функциональной опцией ""%2"".'");
	
	Если ПроверятьОбменЭД Тогда
		ИспользоватьОбменЭД = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьЗначениеФункциональнойОпции(
			"ИспользоватьОбменЭД");
		Если Не ИспользоватьОбменЭД Тогда
			ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ОписаниеОшибки,
				ИмяЗадания, "ИспользоватьОбменЭД");
			ВызватьИсключение ОписаниеОшибки;
		КонецЕсли;
	КонецЕсли;
	
	Если ПроверятьЭЦП Тогда
		ИспользоватьЭЦП = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьЗначениеФункциональнойОпции(
			"ИспользоватьЭлектронныеЦифровыеПодписи");
		Если Не ИспользоватьЭЦП Тогда
			ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ОписаниеОшибки,
				ИмяЗадания, "ИспользоватьЭлектронныеЦифровыеПодписи");
			ВызватьИсключение ОписаниеОшибки;
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры

// Выполняет регламентное задание по получению
// новых электронных документов.
//
// Параметры:
//  ОписаниеОшибки - строка, описание ошибки, в случае ее возникновения в ходе получения документов.
//
Процедура РегламентноеПолучениеНовыхЭД() Экспорт
	
	ПроверитьВозможностьВыполненияРегламентногоЗадания(Истина, Истина, Метаданные.РегламентныеЗадания.НаличиеНовыхЭД.Имя);
	
	Если ПустаяСтрока(ИмяПользователя()) Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
	
	Текст = НСтр("ru = 'Начато регламентное задание по получению новых эл.документов.'");
	ВыполнитьЗаписьСобытияПоЭДВЖурналРегистрации(Текст, 4, УровеньЖурналаРегистрации.Информация);
	
	Попытка
		СоотвСоглашений = Неопределено;
		Если ЭлектронныеДокументыСлужебныйВызовСервера.ДоступныПараметрыДляАвторизацииНаСервереОператора( , СоотвСоглашений) Тогда
			
			ЭлектронныеДокументыСлужебныйВызовСервера.ОбновитьСтатусыПодключенияНастроекЭДО(СоотвСоглашений);
			
		КонецЕсли;
		
		НовыеДокументы = ПолучитьНовыеЭД(СоотвСоглашений);
		
		ЭлектронныеДокументыСлужебныйВызовСервера.ДополнитьПакетамиКРаспаковке(НовыеДокументы.ПараметрыРаспаковки, НовыеДокументы.Профили);
		
		КоличествоПакетов = НовыеДокументы.МассивВозврата.Количество();
		Для Каждого СтруктураРаспаковки Из НовыеДокументы.ПараметрыРаспаковки Цикл
			СтруктураШифрования = Неопределено;
			СтруктураРаспаковки.Свойство("СтруктураШифрования", СтруктураШифрования);
			Если СтруктураШифрования <> Неопределено Тогда
				Если СтруктураШифрования.ПараметрыСертификата.ЗапомнитьПарольКСертификату Тогда
					
					СтруктураШифрования.Вставить("ПарольПользователя", СтруктураШифрования.ПараметрыСертификата.ПарольПользователя);
				КонецЕсли;
			КонецЕсли;
			ДанныеРаспаковки = Неопределено;
			СтруктураРаспаковки.Свойство("ДанныеРаспаковки", ДанныеРаспаковки);
			
			РаспаковатьПакетЭДНаСервере(СтруктураРаспаковки.ПакетЭД, СтруктураШифрования, ДанныеРаспаковки);
		КонецЦикла;
		
		ШаблонСообщения = НСтр("ru = 'Закончено регламентное задание. Получено пакетов: %1.'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, КоличествоПакетов);
		ВыполнитьЗаписьСобытияПоЭДВЖурналРегистрации(ТекстСообщения, 4, УровеньЖурналаРегистрации.Информация);
		
	Исключение
		
		ШаблонСообщения = НСтр("ru = 'Во время регламентного получения новых эл.документов произошла ошибка.
									|Дополнительное описание:
									|%1'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ИнформацияОбОшибке().Описание);
		ВыполнитьЗаписьСобытияПоЭДВЖурналРегистрации(ТекстСообщения, 4, УровеньЖурналаРегистрации.Ошибка);
	КонецПопытки;
	
КонецПроцедуры

// Выполняет регламентное задание по фактической отправке
// электронных документов.
//
Процедура РегламентнаяОтправкаОформленныхЭД() Экспорт
	
	ПроверитьВозможностьВыполненияРегламентногоЗадания(Истина, Истина, Метаданные.РегламентныеЗадания.ОтправкаОформленныхЭД.Имя);
		
	Если ПустаяСтрока(ИмяПользователя()) Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
	
	Текст = НСтр("ru = 'Начато регламентное задание по отправке оформленных эл.документов.'");
	ВыполнитьЗаписьСобытияПоЭДВЖурналРегистрации(Текст, 4, УровеньЖурналаРегистрации.Информация);
		
	Попытка
		КоличествоПакетов = ОтправкаСформированныхЭД();
		Текст = НСтр("ru = 'Закончено регламентное задание. Отправлено пакетов: %КоличествоПакетов%.'");
		Текст = СтрЗаменить(Текст, "%КоличествоПакетов%", КоличествоПакетов);
		ВыполнитьЗаписьСобытияПоЭДВЖурналРегистрации(Текст, 4, УровеньЖурналаРегистрации.Информация);
	Исключение
		ОписаниеОшибки = НСтр("ru = 'Во время регламентной отправки оформленных эл.документов произошла ошибка.
		|Дополнительное описание:
		|%ДополнительноеОписание%'");
		ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%ДополнительноеОписание%", ИнформацияОбОшибке().Описание);
		
		ВыполнитьЗаписьСобытияПоЭДВЖурналРегистрации(ОписаниеОшибки, 4, УровеньЖурналаРегистрации.Ошибка);
	КонецПопытки;
	
КонецПроцедуры

// Метод регламентного задания по управлению проверкой контрагентов в справочнике.
// Создает подчиненной регламентное задание ПроверкаКонтрагентовБЭДВыполнение
Процедура ПроверитьКонтрагентовРегламентноеЗадание() Экспорт
	
	МетаданныеОсновногоЗадания = Метаданные.РегламентныеЗадания.ПроверкаКонтрагентовБЭД;
	МетаданныеПодчиненногоЗадания = Метаданные.РегламентныеЗадания.ПроверкаКонтрагентовБЭДВыполнение;
	
	// Удалим подчиненные задания выполнения проверки, если они остались с предыдущего раза.
	
	ОтборЗадания = Новый Структура;
	ОтборЗадания.Вставить("Метаданные", МетаданныеПодчиненногоЗадания);
	
	ВсеЗадания = РегламентныеЗадания.ПолучитьРегламентныеЗадания(ОтборЗадания);
	Для каждого Задание Из ВсеЗадания Цикл
		Задание.Удалить();
	КонецЦикла;
	
	// Добавим подчиненное задание для выполнения проверки контрагентов.
	// Запустим задание в случайный момент в интервале следующих 0,5 - 10 минут.
	
	ГСЧ = Новый ГенераторСлучайныхЧисел();
	СекундДоСтарта = ГСЧ.СлучайноеЧисло(30, 600);
	
	Расписание = Новый РасписаниеРегламентногоЗадания;
	// Используем текущую дату, т.к. время запуска определяется по времени сервера.
	Расписание.ВремяНачала = ТекущаяДата() + СекундДоСтарта;
	
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("Использование", Истина);
	ПараметрыЗадания.Вставить("Наименование", МетаданныеОсновногоЗадания.Синоним + " (" + Формат(Расписание.ВремяНачала, "ДФ=HH:mm:ss") + ")");
	ПараметрыЗадания.Вставить("Расписание", Расписание);
	
	НовоеЗадание = РегламентныеЗадания.СоздатьРегламентноеЗадание(МетаданныеПодчиненногоЗадания);
	ЗаполнитьЗначенияСвойств(НовоеЗадание, ПараметрыЗадания);
	НовоеЗадание.Записать();
	
КонецПроцедуры

// Процедура - метод регламентного задания по проверке контрагентов в справочнике.
// 		В модели сервиса обновляет состояния контрагентов по каждой записи регистра.
// 		В локальном режима записывает недостающих контрагентов в регистр и обновляет состояния по каждой записи регистра.
Процедура ПроверитьКонтрагентовВыполнениеРегламентноеЗадание() Экспорт
	
	ПроверитьВозможностьВыполненияРегламентногоЗадания(Истина, Ложь, Метаданные.РегламентныеЗадания.ПроверкаКонтрагентовБЭД.Имя);
	
	Если ПустаяСтрока(ИмяПользователя()) Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
	
	Текст = НСтр("ru = 'Начато регламентное задание по проверке контрагентов в сервисе 1С-ЭДО.'");
	ВыполнитьЗаписьСобытияПоЭДВЖурналРегистрации(Текст, 4, УровеньЖурналаРегистрации.Информация);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	СостоянияКонтрагентов.Контрагент,
	|	СостоянияКонтрагентов.ИНН,
	|	СостоянияКонтрагентов.КПП,
	|	СостоянияКонтрагентов.ОбластьДанныхВспомогательныеДанные КАК ОбластьДанныхВспомогательныеДанные,
	|	&Дата КАК Дата
	|ИЗ
	|	РегистрСведений.СостоянияКонтрагентовБЭД КАК СостоянияКонтрагентов";

	Если НЕ ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса") Тогда
		
		Запрос.Текст = СтрЗаменить(
			Запрос.Текст,
			"СостоянияКонтрагентов.ОбластьДанныхВспомогательныеДанные КАК ОбластьДанныхВспомогательныеДанные,",
			"");
			
	КонецЕсли;
	
	// Указываем дату, на которую будет выполняться проверка.
	Запрос.УстановитьПараметр("Дата", НачалоДня(ТекущаяДатаСеанса()));
	ДанныеКонтрагентов = Запрос.Выполнить().Выгрузить();
	
	Попытка
		// Выполняется проверка только тех ИНН и КПП, которые записаны в регистр.
		ПроверитьКонтрагентов(ДанныеКонтрагентов);
		
		// Дозаписываем недостающие ИНН и КПП в регистр в локальном режиме.
		Если НЕ ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
			ПроверитьНепроверенныхКонтрагентов(Ложь);
		КонецЕсли;
		
		Текст = НСтр("ru = 'Закончено регламентное задание по проверке контрагентов в сервисе 1С-ЭДО.'");
		ВыполнитьЗаписьСобытияПоЭДВЖурналРегистрации(Текст, 4, УровеньЖурналаРегистрации.Информация);
	Исключение
		ОписаниеОшибки = НСтр("ru = 'Во время регламентной отправки оформленных эл.документов произошла ошибка.
		|Дополнительное описание:
		|%ДополнительноеОписание%'");
		ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%ДополнительноеОписание%", ИнформацияОбОшибке().Описание);
		
		ВыполнитьЗаписьСобытияПоЭДВЖурналРегистрации(ОписаниеОшибки, 4, УровеньЖурналаРегистрации.Ошибка);
	КонецПопытки;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа с ЭЦП

// Только для внутреннего использования
Процедура СохранитьВместеСПоследнейЭЦП(ПрисоединенныйФайл,
										ДанныеФайла,

										АдресКаталога,
										СоответствиеФайлЭД) Экспорт
	
	ПолноеИмяФайла = АдресКаталога + ДанныеФайла.ИмяФайла;
	
	УникальныйИдентификатор = Новый УникальныйИдентификатор;
	МассивСтруктурПодписей = ЭлектроннаяЦифроваяПодпись.ПолучитьВсеПодписи(ПрисоединенныйФайл, УникальныйИдентификатор);
	
	Файл = Новый Файл(АдресКаталога);
	Если Не Файл.Существует() Тогда
		СоздатьКаталог(АдресКаталога);
	КонецЕсли;
	
	Если ТипЗнч(МассивСтруктурПодписей) = Тип("Массив") И МассивСтруктурПодписей.Количество() > 0 Тогда
		КоличествоПодписей = МассивСтруктурПодписей.Количество();
		Для Сч = 1 По КоличествоПодписей - 1 Цикл
			МассивСтруктурПодписей.Удалить(0);
		КонецЦикла;
		СохранитьПодписи(
				ПрисоединенныйФайл,
				ПолноеИмяФайла,
				МассивСтруктурПодписей,
				АдресКаталога,
				СоответствиеФайлЭД,
				Истина);
	КонецЕсли;
	
КонецПроцедуры

// Только для внутреннего использования
Процедура СохранитьВместеСЭЦП(ПрисоединенныйФайл,
								ДанныеФайла,
								АдресКаталога,
								СоответствиеФайлЭД,
								ЭтоПроизвольныйДокумент = Неопределено) Экспорт
	
	// Для подтверждения необходимо в каталог формирования файлов сохранить только последнюю подпись
	ПолноеИмяФайла = СохранитьФайлКак(ДанныеФайла, АдресКаталога, ПрисоединенныйФайл, ЭтоПроизвольныйДокумент, СоответствиеФайлЭД);
	Если ПолноеИмяФайла = "" Тогда
		Возврат;
	КонецЕсли;
	
	УникальныйИдентификатор = Новый УникальныйИдентификатор;
	МассивСтруктурПодписей = ЭлектроннаяЦифроваяПодпись.ПолучитьВсеПодписи(ПрисоединенныйФайл, УникальныйИдентификатор);
	Если ТипЗнч(МассивСтруктурПодписей) = Тип("Массив") И МассивСтруктурПодписей.Количество() > 0 Тогда
		СохранитьПодписи(ПрисоединенныйФайл, ПолноеИмяФайла, МассивСтруктурПодписей, АдресКаталога,
			СоответствиеФайлЭД, , ЭтоПроизвольныйДокумент);
	КонецЕсли;
	
КонецПроцедуры

// Проверяет действительность подписи, без учета списка отозванных сертификатов.
// В случае ошибки генерирует исключение
//
// Параметры
//  МенеджерКриптографии  - МенеджерКриптографии - менеджер криптографии
//  ДвоичныеДанныеФайла   - двоичные данные файла
//  ДвоичныеДанныеПодписи - двоичные данные подписи
//
Процедура ПроверитьПодпись(МенеджерКриптографии, ДвоичныеДанныеФайла, ДвоичныеДанныеПодписи) Экспорт
	
	МенеджерКриптографии.ПроверитьПодпись(ДвоичныеДанныеФайла, ДвоичныеДанныеПодписи);
	
КонецПроцедуры

// Только для внутреннего использования
Функция ЕстьТакаяПодпись(ДвоичныеДанныеПроверки, ЭлектронныйДокумент) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если НЕ ЗначениеЗаполнено(ЭлектронныйДокумент) Тогда
		
		Возврат Ложь;
	КонецЕсли;
	
	Для Каждого ПодписьДокумента Из ЭлектронныйДокумент.ЭлектронныеЦифровыеПодписи Цикл
		ДвоичныеДанныеПодписи = ПодписьДокумента.Подпись.Получить();
		Если ДвоичныеДанныеПодписи = ДвоичныеДанныеПроверки Тогда
			
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция ПодписиЭлектронногоДокумента(ФайлЭлектронногоДокумента, ТипЭлектронногоДокумента = Неопределено) Экспорт
	
	Если ТипЭлектронногоДокумента = Неопределено Тогда
		ТипЭлектронногоДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ФайлЭлектронногоДокумента, "ТипЭлементаВерсииЭД")
	КонецЕсли;
	
	СтруктураПодписей = Новый Структура;
	
	Типы = Новый Массив;
	Типы.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ПервичныйЭД);
	Типы.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ДОП);
	Типы.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ДОПУПД);
	Типы.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ДИСУКД);
	Типы.Добавить(Перечисления.ТипыЭлементовВерсииЭД.СЧФДОПУПД);
	Типы.Добавить(Перечисления.ТипыЭлементовВерсииЭД.КСЧФДИСУКД);
	
	Если Типы.Найти(ТипЭлектронногоДокумента) <> Неопределено Тогда
		
		ВладелецФайла = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ФайлЭлектронногоДокумента, "ВладелецФайла");
		
		Если ЭтоТитулФНС(ВладелецФайла) Тогда
			ЭлектронныеПодписиЭД = ЭлектронныеПодписиДвухТитулов(ФайлЭлектронногоДокумента);
		Иначе
			ЭлектронныеПодписиЭД = УстановленныеПодписи(ФайлЭлектронногоДокумента);
		КонецЕсли;
		
	Иначе
		ЭлектронныеПодписиЭД = УстановленныеПодписи(ФайлЭлектронногоДокумента);
	КонецЕсли;
	
	СтруктураПодписей.Вставить("Подписи", ЭлектронныеПодписиЭД);
	
	Возврат СтруктураПодписей;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Сертификаты электронных документов

// Функция возвращает пересечение массива сертификатов, установленных в личном хранилище
// с массивом сертификатов зарегистрированных в 1с (действующих и доступных текущему пользователю).
// В случае, если передан необязательный параметр СоглашениеЭД, то массив зарегистрированных в 1с сертификатов,
// дополнительно ограничивается условием вхождения в список зарегистрированных, по данному соглашению, сертификатов.
//
// Параметры:
//  МассивСтруктурСертификатов - массив - массив структур сертификатов, установленных в хранилище на Клиенте/Сервере
//    (в зависимости от настроек работы с криптографией).
//  ПрофильНастроекЭДО - справочник-ссылка - ссылка на профиль настроек ЭДО, список сертификатов
//    которого требуется.
//
// Возвращаемое значение - таблица значений.
//
Функция ТаблицаДоступныхДляПодписиСертификатов(МассивСтруктурСертификатов, ПрофильНастроекЭДО = Неопределено) Экспорт
	
	Если Не ЭлектронныеДокументыПереопределяемый.ЕстьПравоПодписанияЭД() Тогда 
		ПустаяТаблица = Новый ТаблицаЗначений;
		ПустаяТаблица.Колонки.Добавить("Ссылка");
		ПустаяТаблица.Колонки.Добавить("Отпечаток");
		Возврат ПустаяТаблица;	
	КонецЕсли;

	
	МассивОтпечатков = Новый Массив;
	Для Каждого ЭлементСтруктуры Из МассивСтруктурСертификатов Цикл
		МассивОтпечатков.Добавить(ЭлементСтруктуры.Отпечаток);
	КонецЦикла;
	
	ЗапросПоСертификатам = Новый Запрос;
	Если ЗначениеЗаполнено(ПрофильНастроекЭДО) Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	СертификатыЭЦП.Ссылка,
		|	ВЫБОР
		|		КОГДА СертификатыЭЦП.ЗапомнитьПарольКСертификату
		|			ТОГДА СертификатыЭЦП.ПарольПользователя
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК ПарольПользователя,
		|	СертификатыЭЦП.ЗапомнитьПарольКСертификату,
		|	СертификатыЭЦП.ЗапомнитьПарольКСертификату КАК ПарольПолучен,
		|	СертификатыЭЦП.Отпечаток
		|ИЗ
		|	Справочник.ПрофилиНастроекЭДО.СертификатыПодписейОрганизации КАК ПрофильНастроекЭДОСертификаты
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СертификатыЭЦП КАК СертификатыЭЦП
		|		ПО ПрофильНастроекЭДОСертификаты.Сертификат = СертификатыЭЦП.Ссылка
		|ГДЕ
		|	ПрофильНастроекЭДОСертификаты.Ссылка = &ПрофильНастроекЭДО";
		ЗапросПоСертификатам.УстановитьПараметр("ПрофильНастроекЭДО", ПрофильНастроекЭДО);
	Иначе
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	СертификатыЭЦП.Ссылка,
		|	ВЫБОР
		|		КОГДА СертификатыЭЦП.ЗапомнитьПарольКСертификату
		|			ТОГДА СертификатыЭЦП.ПарольПользователя
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК ПарольПользователя,
		|	СертификатыЭЦП.ЗапомнитьПарольКСертификату,
		|	СертификатыЭЦП.ЗапомнитьПарольКСертификату КАК ПарольПолучен,
		|	СертификатыЭЦП.Отпечаток
		|ИЗ
		|	Справочник.СертификатыЭЦП КАК СертификатыЭЦП
		|ГДЕ
		|	Истина";
	КонецЕсли;
	ТекстЗапроса = ТекстЗапроса + "
		|	И (СертификатыЭЦП.СписокПользователей.Пользователь = &ТекущийПользователь
		|			ИЛИ НЕ СертификатыЭЦП.ОграничитьДоступКСертификату)
		|	И (СертификатыЭЦП.Отпечаток В (&МассивОтпечатков)
		|			ИЛИ СертификатыЭЦП.ПрограммаБанка = ЗНАЧЕНИЕ(Перечисление.ПрограммыБанка.СбербанкОнлайн))
		|	И НЕ СертификатыЭЦП.Отозван
		|	И НЕ СертификатыЭЦП.ПометкаУдаления";
	
	ЗапросПоСертификатам.Текст = ТекстЗапроса;
		
	ЗапросПоСертификатам.УстановитьПараметр("ТекущийПользователь", Пользователи.АвторизованныйПользователь());
	ЗапросПоСертификатам.УстановитьПараметр("ПустойПользователь",  Справочники.Пользователи.ПустаяСсылка());
	ЗапросПоСертификатам.УстановитьПараметр("МассивОтпечатков",    МассивОтпечатков);
	
	Возврат ЗапросПоСертификатам.Выполнить().Выгрузить();
	
КонецФункции

// Функция возвращает пересечение массива сертификатов, установленных в личном хранилище
// с массивом сертификатов зарегистрированных в 1с (действующих и доступных текущему пользователю).
// В случае, если передан необязательный параметр СоглашениеЭД, то массив зарегистрированных в 1с сертификатов,
// дополнительно ограничивается условием вхождения в список зарегистрированных, по данному соглашению, сертификатов.
//
// Параметры:
//  МассивСтруктурСертификатов - массив - массив структур сертификатов, установленных в хранилище на Клиенте/Сервере
//    (в зависимости от настроек работы с криптографией).
//  СоглашениеЭД - справочник-ссылка - ссылка на соглашение об обмене ЭД через оператора ЭДО, список сертификатов
//    которого требуется.
//
// Возвращаемое значение - массив структур сертификатов.
//
Функция МассивСтруктурДоступныхДляПодписиСертификатов(МассивСтруктурСертификатов, ПрофильНастроекЭДО = Неопределено) Экспорт
	
	МассивСтруктурДоступныхСертификатов = Новый Массив;
	
	ТаблицаДоступныхСертификатов = ТаблицаДоступныхДляПодписиСертификатов(МассивСтруктурСертификатов, ПрофильНастроекЭДО);
	Для Каждого ТекЭл Из МассивСтруктурСертификатов Цикл
		СтрокаТаблицы = ТаблицаДоступныхСертификатов.Найти(ТекЭл.Отпечаток, "Отпечаток");
		Если СтрокаТаблицы = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ТекЭл.Вставить("Сертификат",                  СтрокаТаблицы.Ссылка);
		ТекЭл.Вставить("ПарольПолучен",               СтрокаТаблицы.ПарольПолучен);
		ТекЭл.Вставить("ПарольПользователя",          СтрокаТаблицы.ПарольПользователя);
		ТекЭл.Вставить("ЗапомнитьПарольКСертификату", СтрокаТаблицы.ЗапомнитьПарольКСертификату);
		ТекЭл.Вставить("Комментарий",                 "");
		МассивСтруктурДоступныхСертификатов.Добавить(ТекЭл);
	КонецЦикла;
	
	Возврат МассивСтруктурДоступныхСертификатов;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Работа с версиями электронных документов

// Только для внутреннего использования
Функция ОпределитьЭлектронныйДокумент(СтруктураПараметровПоиска) Экспорт
	
	Запрос = Новый Запрос;
	Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЭДПрисоединенныеФайлы.Ссылка
	|ИЗ
	|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	|ГДЕ
	|	ЭДПрисоединенныеФайлы.ПометкаУдаления = ЛОЖЬ";
	
	Шаблон = "
		|И ЭДПрисоединенныеФайлы.%1 %2 %3";
	Для Каждого Элемент Из СтруктураПараметровПоиска Цикл
		Если ЗначениеЗаполнено(Элемент.Значение) Тогда

			Если Элемент.Ключ = "НастройкаЭДО" Тогда
				ШаблонИмяРеквизита = СтрЗаменить(Шаблон, "%1", "ВладелецФайла." + Элемент.Ключ);
			Иначе
				ШаблонИмяРеквизита = СтрЗаменить(Шаблон, "%1", Элемент.Ключ);
			КонецЕсли;
			
			Если ТипЗнч(Элемент.Значение) = Тип("Массив") Тогда
				ЗнакСравнения = "В";
				ШаблонСравнение = СтрЗаменить(ШаблонИмяРеквизита, "%2", ЗнакСравнения);
				ШаблонИмяПараметра = СтрЗаменить(ШаблонСравнение, "%3", "("+"&" +Элемент.Ключ+ ")");
			Иначе
				ЗнакСравнения = "=";
				ШаблонСравнение = СтрЗаменить(ШаблонИмяРеквизита, "%2", ЗнакСравнения);
				ШаблонИмяПараметра = СтрЗаменить(ШаблонСравнение, "%3", "&"+Элемент.Ключ);
			КонецЕсли;
			Текст = Текст + ШаблонИмяПараметра;
			Запрос.УстановитьПараметр(Элемент.Ключ, Элемент.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Запрос.Текст = Текст;
	Результат = Запрос.Выполнить().Выбрать();
	ВозвращаемыйПараметр = Неопределено;
	Если Результат.Следующий() Тогда
		ВозвращаемыйПараметр = Результат.Ссылка;
	КонецЕсли;
	
	Возврат ВозвращаемыйПараметр;
		
КонецФункции

// Получает номер текущей версии электронного документа для владельца.
// 
// Параметры:
//  СсылкаНаВладельца - Ссылка на объект ИБ, номер версии электронного документа которого надо получить.
//
Функция НомерВерсииЭДПоВладельцу(СсылкаНаВладельца) Экспорт
	
	СтруктураВерсииЭД = ПолучитьСтруктуруВерсииЭД(СсылкаНаВладельца);
	Если ЗначениеЗаполнено(СтруктураВерсииЭД.НомерВерсииЭД) Тогда
		Возврат СтруктураВерсииЭД.НомерВерсииЭД;
	КонецЕсли;

	Возврат ПолучитьПоследнююВерсиюЭДПоВладельцу(СсылкаНаВладельца) + 1;
	
КонецФункции

// Только для внутреннего использования
Функция ПолучитьСтруктуруВерсииЭД(СсылкаНаВладельца) Экспорт
	
	СтруктураВерсииЭД = Новый Структура;
	
	Если ТипЗнч(СсылкаНаВладельца) = Тип("ДокументСсылка.ЭлектронныйДокументВходящий")
		ИЛИ ТипЗнч(СсылкаНаВладельца) = Тип("ДокументСсылка.ЭлектронныйДокументИсходящий") Тогда
		
		РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаВладельца,"СостояниеЭДО, НомерВерсииЭД, ПричинаОтклонения");
		СтруктураВерсииЭД.Вставить("НомерВерсииЭД",     РеквизитыДокумента.НомерВерсииЭД);
		СтруктураВерсииЭД.Вставить("СсылкаНаДокумент",  СсылкаНаВладельца);
		СтруктураВерсииЭД.Вставить("СостояниеВерсииЭД", РеквизитыДокумента.СостояниеЭДО);
		СтруктураВерсииЭД.Вставить("КомментарийРС",     РеквизитыДокумента.ПричинаОтклонения);
	ИначеЕсли ТипЗнч(СсылкаНаВладельца) = Тип("Структура") Тогда
		// Бизнес-сеть.
		СтруктураВерсииЭД.Вставить("НомерВерсииЭД",     1);
		СтруктураВерсииЭД.Вставить("СсылкаНаДокумент",  Неопределено);
		СтруктураВерсииЭД.Вставить("СостояниеВерсииЭД", Неопределено);
		СтруктураВерсииЭД.Вставить("КомментарийРС",     "");
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЕСТЬNULL(СостоянияЭД.ЭлектронныйДокумент.НомерВерсииЭД, 0) КАК НомерВерсииЭД,
		|	СостоянияЭД.ЭлектронныйДокумент КАК ЭлектронныйДокумент,
		|	СостоянияЭД.СостояниеВерсииЭД,
		|	ВЫБОР КОГДА СостоянияЭД.ЭлектронныйДокумент ССЫЛКА Документ.ЭлектронныйДокументВходящий ТОГДА
		|		ВЫРАЗИТЬ(СостоянияЭД.ЭлектронныйДокумент КАК Документ.ЭлектронныйДокументВходящий).ПричинаОтклонения
		|	КОГДА СостоянияЭД.ЭлектронныйДокумент ССЫЛКА Документ.ЭлектронныйДокументИсходящий ТОГДА
		|		ВЫРАЗИТЬ(СостоянияЭД.ЭлектронныйДокумент КАК Документ.ЭлектронныйДокументИсходящий).ПричинаОтклонения
		|	ИНАЧЕ """"
		|	КОНЕЦ КАК Комментарий
		|ИЗ
		|	РегистрСведений.СостоянияЭД КАК СостоянияЭД
		|ГДЕ
		|	СостоянияЭД.СсылкаНаОбъект = &СсылкаНаОбъект
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЭлектронныйДокументИсходящийДокументыОснования.Ссылка КАК СообщениеОбмена,
		|	ЭлектронныйДокументИсходящийДокументыОснования.Ссылка.СостояниеЭДО КАК СообщениеОбменаСостояниеЭДО,
		|	ЭлектронныйДокументИсходящийДокументыОснования.Ссылка.НомерВерсииЭД КАК НомерВерсииЭД
		|ПОМЕСТИТЬ вт_СвязанныеЭД
		|ИЗ
		|	Документ.ЭлектронныйДокументИсходящий.ДокументыОснования КАК ЭлектронныйДокументИсходящийДокументыОснования
		|ГДЕ
		|	ЭлектронныйДокументИсходящийДокументыОснования.ДокументОснование = &СсылкаНаОбъект
		|	И НЕ ЭлектронныйДокументИсходящийДокументыОснования.Ссылка.ПометкаУдаления
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЭлектронныйДокументВходящийДокументыОснования.Ссылка,
		|	ЭлектронныйДокументВходящийДокументыОснования.Ссылка.СостояниеЭДО,
		|	ЭлектронныйДокументВходящийДокументыОснования.Ссылка.НомерВерсииЭД
		|ИЗ
		|	Документ.ЭлектронныйДокументВходящий.ДокументыОснования КАК ЭлектронныйДокументВходящийДокументыОснования
		|ГДЕ
		|	ЭлектронныйДокументВходящийДокументыОснования.ДокументОснование = &СсылкаНаОбъект
		|	И НЕ ЭлектронныйДокументВходящийДокументыОснования.Ссылка.ПометкаУдаления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МАКСИМУМ(вт_СвязанныеЭД.НомерВерсииЭД) КАК НомерВерсииЭД
		|ПОМЕСТИТЬ вт_МаксимальныйНомер
		|ИЗ
		|	вт_СвязанныеЭД КАК вт_СвязанныеЭД
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	вт_СвязанныеЭД.НомерВерсииЭД,
		|	вт_СвязанныеЭД.СообщениеОбмена КАК ЭлектронныйДокумент,
		|	вт_СвязанныеЭД.СообщениеОбменаСостояниеЭДО КАК СостояниеЭДО
		|ИЗ
		|	вт_МаксимальныйНомер КАК вт_МаксимальныйНомер
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ вт_СвязанныеЭД КАК вт_СвязанныеЭД
		|		ПО вт_МаксимальныйНомер.НомерВерсииЭД = вт_СвязанныеЭД.НомерВерсииЭД";
		
		Запрос.УстановитьПараметр("СсылкаНаОбъект", СсылкаНаВладельца);
		
		Результат = Запрос.ВыполнитьПакет();
		КомментарийРС = "";
		ВыборкаПоРегистру = Результат[0].Выбрать();
		Если ВыборкаПоРегистру.Следующий() Тогда
			НомерВерсииЭД     = ВыборкаПоРегистру.НомерВерсииЭД;
			СостояниеВерсииЭД = ВыборкаПоРегистру.СостояниеВерсииЭД;
			СсылкаНаДокумент  = ВыборкаПоРегистру.ЭлектронныйДокумент;
			КомментарийРС     = ВыборкаПоРегистру.Комментарий;
		Иначе
			НомерВерсииЭД     = 0;
			СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.ПустаяСсылка();
			СсылкаНаДокумент  = Справочники.ЭДПрисоединенныеФайлы.ПустаяСсылка();
		КонецЕсли;
		
		Если НомерВерсииЭД = 0 Тогда
			ВыборкаПоСправочнику = Результат[3].Выбрать();
			Если ВыборкаПоСправочнику.Количество() > 0 Тогда
				ВыборкаПоСправочнику.Следующий();
				НомерВерсииЭД     = ВыборкаПоСправочнику.НомерВерсииЭД;
				СсылкаНаДокумент  = ВыборкаПоСправочнику.ЭлектронныйДокумент;
				СостояниеВерсииЭД = ВыборкаПоСправочнику.СостояниеЭДО;
			КонецЕсли;
		КонецЕсли;
		СтруктураВерсииЭД.Вставить("НомерВерсииЭД",     НомерВерсииЭД);
		СтруктураВерсииЭД.Вставить("СсылкаНаДокумент",  СсылкаНаДокумент);
		СтруктураВерсииЭД.Вставить("СостояниеВерсииЭД", СостояниеВерсииЭД);
		СтруктураВерсииЭД.Вставить("КомментарийРС",     КомментарийРС);
		
	КонецЕсли;
	
	Возврат СтруктураВерсииЭД;
	
КонецФункции

// Только для внутреннего использования
Функция ПолучитьПервоеСостояниеВерсииЭДДляВладельца(СсылкаНаВладельца, ПризнакПолучения = Ложь) Экспорт
	
	ПараметрыЭД = ЗаполнитьПараметрыЭДПоИсточнику(СсылкаНаВладельца.Ссылка);
	
	СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.ПустаяСсылка();
	НаправлениеЭД = "";
	Если ПараметрыЭД.Свойство("НаправлениеЭД", НаправлениеЭД) И ЗначениеЗаполнено(НаправлениеЭД) Тогда
		Если НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий 
			ИЛИ НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани Тогда
			
			СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.НеСформирован;
		ИначеЕсли НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
			Если ПризнакПолучения Тогда 
				СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.НаУтверждении;
			Иначе
				СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.НеПолучен;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СостояниеВерсииЭД;
	
КонецФункции

// Только для внутреннего использования
Функция АктуальнаяВерсияФорматаЭД(ВидЭлектронногоДокумента) Экспорт
	
	Результат = Неопределено;
	
	ТаблицаФорматов = ФорматыЭлектронныхДокументов();
	СтрокиДействующихФорматов = ТаблицаФорматов.НайтиСтроки(
		Новый Структура("ВидЭлектронногоДокумента, Действует", ВидЭлектронногоДокумента, Истина));
		
	Если СтрокиДействующихФорматов.Количество() Тогда
		Результат = СтрокиДействующихФорматов[СтрокиДействующихФорматов.Количество() - 1].ИдентификаторФормата;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Формирует структуру сведений о формате.
//
// Параметры:
//  ВидЭлектронногоДокумента - ПеречислениеСсылка.ВидыЭД - вид электронного документа.
//  ИдентификаторФормата	 - Строка - формат электронного документа.
// 
// Возвращаемое значение:
//  Структура - содержит данные о формате. Состав и типы ключей описываются в макете
//              Обработка.ЭлектронныеДокументы.ВерсииФорматовЭД.
//
Функция СведенияОФормате(ВидЭлектронногоДокумента, ИдентификаторФормата) Экспорт

	Результат = Неопределено;
	
	ТаблицаФорматов = ФорматыЭлектронныхДокументов();
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("ВидЭлектронногоДокумента", ВидЭлектронногоДокумента);
	ПараметрыОтбора.Вставить("ИдентификаторФормата", ИдентификаторФормата);
	СтрокиВидаЭлектронногоДокумента = ТаблицаФорматов.НайтиСтроки(ПараметрыОтбора);
	Если СтрокиВидаЭлектронногоДокумента.Количество() Тогда
		СтрокаФормата = СтрокиВидаЭлектронногоДокумента[СтрокиВидаЭлектронногоДокумента.Количество() - 1];
		
		Результат = Новый Структура;
		Для Каждого Колонка Из ТаблицаФорматов.Колонки Цикл
			Результат.Вставить(Колонка.Имя, СтрокаФормата[Колонка.Имя]);
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

// Формирует таблицу сведений о форматах электронных документов.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - состав и типы колонок описаны в макете Обработка.ЭлектронныеДокументы.ВерсииФорматовЭД.
//                    Дополняется служебной колонкой "Действует" типа Булево.
//
Функция ФорматыЭлектронныхДокументов() Экспорт

	ТекущаяДата = ТекущаяДатаСеанса();
	
	Результат = ЭлектронныеДокументыПовтИсп.СведенияОФорматахЭлектронныхДокументов();
	Если Результат.Колонки.Найти("Действует") = Неопределено Тогда
		Результат.Колонки.Добавить("Действует", Новый ОписаниеТипов("Булево"));
	КонецЕсли;
	
	Для Каждого СтрокаФормата Из Результат Цикл
		// Проставим признак действия формата
		Если Не СтрокаФормата.Отключен
			И (НЕ ЗначениеЗаполнено(СтрокаФормата.ДатаНачалаДействия) 
				ИЛИ СтрокаФормата.ДатаНачалаДействия <= ТекущаяДата)
			И (НЕ ЗначениеЗаполнено(СтрокаФормата.ДатаОкончанияДействия) 
				ИЛИ КонецДня(СтрокаФормата.ДатаОкончанияДействия) >= ТекущаяДата) Тогда
			СтрокаФормата.Действует = Истина;
		Иначе
			СтрокаФормата.Действует = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;

КонецФункции

// Проверяет форматы электронных документов в настройках на актуальность и при необходимости актуализирует их.
//
// Параметры:
//  НастройкиОбмена			 - Структура - см. функцию ЭлектронныеДокументыСлужебный.ОпределитьНастройкиОбменаЭДПоИсточнику;
//  СообщенияПользователю	 - Массив - содержит элементы типа СообщениеПользователю, которые нужно вывести по результатам
//                                      работы процедуры
//
Процедура АктуализироватьФорматыЭДВНастройкахОбмена(НастройкиОбмена, СообщенияПользователю = Неопределено) Экспорт

	Если НастройкиОбмена <> Неопределено И ТипЗнч(НастройкиОбмена) = Тип("Структура") Тогда
		ВидЭД = Неопределено;
		ВерсияФормата = Неопределено;
		
		Если НастройкиОбмена.Свойство("ВидЭД", ВидЭД) И НастройкиОбмена.Свойство("ВерсияФормата", ВерсияФормата) 
				И ЗначениеЗаполнено(ВидЭД) И ЗначениеЗаполнено(ВерсияФормата) Тогда
			ТаблицаФорматов = ФорматыЭлектронныхДокументов();
			СведенияОФормате = ТаблицаФорматов.НайтиСтроки(
				Новый Структура("ВидЭлектронногоДокумента, ИдентификаторФормата", ВидЭД, ВерсияФормата));
				
			Если СведенияОФормате.Количество() И Не СведенияОФормате[0].Действует Тогда
				ПредставлениеСтарогоФормата = СведенияОФормате[0].ПредставлениеФормата;
				
				АктуальныйФормат = АктуальнаяВерсияФорматаЭД(ВидЭД);
				СведенияОНовомФормате = ТаблицаФорматов.НайтиСтроки(
					Новый Структура("ВидЭлектронногоДокумента, ИдентификаторФормата", ВидЭД, АктуальныйФормат));
				ПредставлениеНовогоФормата = СведенияОНовомФормате[0].ПредставлениеФормата;
				
				НастройкиОбмена.Вставить("ВерсияФормата", АктуальныйФормат);
				
				//скорректируем настройку и при необходимости профиль
				НастройкаЭДО = Неопределено;
				Если НастройкиОбмена.Свойство("СоглашениеЭД", НастройкаЭДО) Тогда
					Если СообщенияПользователю = Неопределено Тогда
						СообщенияПользователю = Новый Массив;
					КонецЕсли;
					
					УстановитьПривилегированныйРежим(Истина);
					
					НастройкаЭДООбъект = НастройкаЭДО.ПолучитьОбъект();
					ИсходнаяСтрокаЭД = НастройкаЭДООбъект.ИсходящиеДокументы.Найти(ВидЭД, "ИсходящийДокумент");
					ИсходнаяСтрокаЭД.ВерсияФормата = АктуальныйФормат;
					НастройкаЭДООбъект.Записать();
					
					НовоеСообщение = Новый СообщениеПользователю;
					НовоеСообщение.Поле = "ИсходящиеДокументы[%1].ДокументУчета";
					НовоеСообщение.ПутьКДанным = "Объект";
						
					Если НЕ НастройкаЭДООбъект.РасширенныйРежимНастройкиСоглашения 
						И ЗначениеЗаполнено(ИсходнаяСтрокаЭД.ПрофильНастроекЭДО) Тогда
						ПрофильЭДО = ИсходнаяСтрокаЭД.ПрофильНастроекЭДО;
						
						ПрофильЭДООбъект = ПрофильЭДО.ПолучитьОбъект();
						ИсходнаяСтрокаЭД = ПрофильЭДООбъект.ИсходящиеДокументы.Найти(ВидЭД, "ИсходящийДокумент");
						ИсходнаяСтрокаЭД.ВерсияФормата = АктуальныйФормат;
						ПрофильЭДООбъект.Записать();
						
						НовоеСообщение.КлючДанных = ПрофильЭДО;
						ТипНастройки = НСтр("ru = 'профиле настроек ЭДО'");
						ИндексСтрокиНастройки = ПрофильЭДООбъект.ИсходящиеДокументы.Индекс(ИсходнаяСтрокаЭД);
					Иначе
						НовоеСообщение.КлючДанных = НастройкаЭДО;
						ТипНастройки = НСтр("ru = 'настройке ЭДО'");
						ИндексСтрокиНастройки = НастройкаЭДООбъект.ИсходящиеДокументы.Индекс(ИсходнаяСтрокаЭД);
					КонецЕсли;
					
					НовоеСообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'В %1 ""%2"" устаревший формат (%3) был заменен на актуальный (%4).'"),
						ТипНастройки, НовоеСообщение.КлючДанных, ПредставлениеСтарогоФормата, ПредставлениеНовогоФормата);
					НовоеСообщение.Поле = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НовоеСообщение.Поле, 
						ИндексСтрокиНастройки);	
						
					СообщенияПользователю.Добавить(НовоеСообщение);
					
					УстановитьПривилегированныйРежим(Ложь);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Изменяет состояние версии электронного документа.
//
// Параметры:
//  ЭлектронныйДокумент - СправочникСсылка.ЭДПрисоединенныеФайлы, Массив - электронные документы, версии которых надо обновить.
//  ПринудительнаяСменаСостоянияВерсии - Булево, признак смены версии, несмотря на условия.
//
Процедура ОбновитьВерсиюЭД(ЭлектронныйДокумент, ПринудительнаяСменаСостоянияВерсии = Ложь, ВерсияФорматаПакета = Неопределено,
	ОтклонениеАннулирования = Ложь) Экспорт
		
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТипЗнч(ЭлектронныйДокумент) = Тип("Массив") Тогда
		Для Каждого ЭлементМассива Из ЭлектронныйДокумент Цикл
			ОбновитьВерсиюЭД(ЭлементМассива);
		КонецЦикла;
		Возврат;
	КонецЕсли;
	
	СвойстваЭД = ЭлектронныеДокументыСлужебный.ЗначенияРеквизитовОбъектаИлиСсылки(ЭлектронныйДокумент,
		"НаправлениеЭД, ВладелецФайла, ТипЭлементаВерсииЭД, ЭлектронныйДокументВладелец, ПрофильНастроекЭДО");
	
	РеквизитыЭД      = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СвойстваЭД.ВладелецФайла, "ВидЭД,СостояниеЭДО,ТипЭлементаВерсииЭД");
	РеквизитыПрофиля = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СвойстваЭД.ПрофильНастроекЭДО, "СпособОбменаЭД");
	
	ТекущееСостояниеВерсииЭД = РеквизитыЭД.СостояниеЭДО;
	
	НовоеСостояниеВерсииЭД = Неопределено;
	СводнаяИнформацияПоСтатусу = Новый Структура;
	
	Если НЕ ЭтоСлужебныйДокумент(СвойстваЭД.ТипЭлементаВерсииЭД)
		Или ЭлектронныеДокументыСлужебный.ЭтоОтветныйТитул(СвойстваЭД.ТипЭлементаВерсииЭД) Тогда
		
		СостояниеВерсииЭД = ЭлектронныеДокументыСлужебный.ОпределитьСостояниеВерсииПоСтатусуЭД(ЭлектронныйДокумент,
			ВерсияФорматаПакета, ПринудительнаяСменаСостоянияВерсии, ОтклонениеАннулирования);
		
		Если ТекущееСостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.ЗакрытПринудительно Тогда
			 //Для "Акта на передачу прав" и "с.ф." меняет состояние "Закрыт принудительно" на "Обмен завершен",
			 //если для него пришла вторая подпись.
			Если Не ((РеквизитыЭД.ВидЭД = Перечисления.ВидыЭД.АктНаПередачуПрав
				Или РеквизитыЭД.ВидЭД = Перечисления.ВидыЭД.СчетФактура
				Или РеквизитыЭД.ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура)
				И СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.ОбменЗавершен) Тогда
				Возврат;
			КонецЕсли;
		ИначеЕсли ТекущееСостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.ОбменЗавершенСИсправлением
			И СостояниеВерсииЭД <> Перечисления.СостоянияВерсийЭД.ОжидаетсяАннулирование
			И СостояниеВерсииЭД <> Перечисления.СостоянияВерсийЭД.ТребуетсяАннулировать
			И СостояниеВерсииЭД <> Перечисления.СостоянияВерсийЭД.Аннулирован Тогда
			Возврат;
		КонецЕсли;
		
		Если (СвойстваЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий
			Или СвойстваЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани)
			Или (СвойстваЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий //новый каталог делает неактуальным старый
				И РеквизитыЭД.ВидЭД = Перечисления.ВидыЭД.КаталогТоваров)
			Или ПринудительнаяСменаСостоянияВерсии Тогда
			
			НовоеСостояниеВерсииЭД = СостояниеВерсииЭД;
			СводнаяИнформацияПоСтатусу = ОпределитьСводнуюИнформациюПоСтатусуЭД(ЭлектронныйДокумент);
			
			Если
				Не ЭлектронныеДокументыСлужебныйВызовСервера.ЭтоПрямойОбмен(РеквизитыПрофиля.СпособОбменаЭД)
				
				И(СвойстваЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ЭСФ
					Или СвойстваЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИнформацияПокупателяУПД
					Или СвойстваЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИнформацияПокупателяУКД)
				
				И СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.ОбменЗавершен
				
				И НЕ(СводнаяИнформацияПоСтатусу.СНашейСтороны = Перечисления.СводныеСостоянияЭД.ВсеВыполнено
					И СводнаяИнформацияПоСтатусу.СоСтороныДругогоУчастника = Перечисления.СводныеСостоянияЭД.ВсеВыполнено) Тогда
					
				НовоеСостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.ОжидаетсяПодтверждение;
			КонецЕсли;
			
			 //Если утверждается входящий э.д. в формате "доп. УПД" без подписи, то состояние меняется
			 //с ОбменЗавершен на ОжидаетсяПодтверждение.
			Если НовоеСостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.ОбменЗавершен
				И СвойстваЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДОПУПД 
				И Не (СводнаяИнформацияПоСтатусу.СНашейСтороны = Перечисления.СводныеСостоянияЭД.ВсеВыполнено
					И СводнаяИнформацияПоСтатусу.СоСтороныДругогоУчастника = Перечисления.СводныеСостоянияЭД.ВсеВыполнено) Тогда
				НовоеСостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.ОжидаетсяПодтверждение;
			
			КонецЕсли;
			
		ИначеЕсли РеквизитыЭД.ВидЭД = Перечисления.ВидыЭД.ОтветНаЗаказ
			И СвойстваЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий
			И НовоеСостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.НеСформирован Тогда
			
			НовоеСостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.ТребуетсяУточнитьДокумент;
			
		ИначеЕсли (СвойстваЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ТОРГ12Покупатель
			И РеквизитыЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец)
			
			Или (СвойстваЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.АктЗаказчик
			И РеквизитыЭД.ВидЭД = Перечисления.ВидыЭД.АктИсполнитель)
			
			Или (СвойстваЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.СоглашениеОбИзмененииСтоимостиПолучатель
			И РеквизитыЭД.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель) Тогда
			
			НовоеСостояниеВерсииЭД = ЭлектронныеДокументыСлужебный.ОпределитьСостояниеВерсииПоСтатусуЭД(ЭлектронныйДокумент,
			ВерсияФорматаПакета, ПринудительнаяСменаСостоянияВерсии, ОтклонениеАннулирования);
			
			СводнаяИнформацияПоСтатусу = ОпределитьСводнуюИнформациюПоСтатусуЭД(ЭлектронныйДокумент);
		КонецЕсли;
		
	ИначеЕсли ЭлектронныеДокументыСлужебный.ЭтоИзвещениеОПолучении(СвойстваЭД.ТипЭлементаВерсииЭД) Тогда
		
		Если ТекущееСостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.ЗакрытПринудительно
			ИЛИ ТекущееСостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.ОжидаетсяАннулирование
			ИЛИ ТекущееСостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.ТребуетсяАннулировать Тогда
			Возврат;
		КонецЕсли;
		
		ПервичныйДокумент = ЭлектронныеДокументыСлужебный.ПрисоединенныйФайл(СвойстваЭД.ВладелецФайла);
		Если ЗначениеЗаполнено(ПервичныйДокумент) Тогда
			
			Если ЭлектронныеДокументыСлужебный.ЭтоТитулФНС(РеквизитыЭД) Тогда
				ОтветныйТитул = ЭлектронныеДокументыСлужебный.ВторойТитулДокумента(ПервичныйДокумент);
				Если ЗначениеЗаполнено(ОтветныйТитул) Тогда
					НовоеСостояниеВерсииЭД = ЭлектронныеДокументыСлужебный.ОпределитьСостояниеВерсииПоСтатусуЭД(ОтветныйТитул);
				Иначе
					НовоеСостояниеВерсииЭД = ЭлектронныеДокументыСлужебный.ОпределитьСостояниеВерсииПоСтатусуЭД(ПервичныйДокумент);
				КонецЕсли;
			Иначе
				НовоеСостояниеВерсииЭД = ЭлектронныеДокументыСлужебный.ОпределитьСостояниеВерсииПоСтатусуЭД(ПервичныйДокумент);
			КонецЕсли;
			
			СводнаяИнформацияПоСтатусу = ОпределитьСводнуюИнформациюПоСтатусуЭД(ПервичныйДокумент);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НовоеСостояниеВерсииЭД) Тогда
		
		Если НовоеСостояниеВерсииЭД <> ТекущееСостояниеВерсииЭД Тогда
			
			ДокументОбъект = СвойстваЭД.ВладелецФайла.ПолучитьОбъект();
			ДокументОбъект.СостояниеЭДО = НовоеСостояниеВерсииЭД;
			ДокументОбъект.ДатаИзмененияСостоянияЭДО = ТекущаяДатаСеанса();
			ДокументОбъект.НаОзнакомлении = ДокументНаОзнакомление(ТекущееСостояниеВерсииЭД, НовоеСостояниеВерсииЭД, СвойстваЭД.НаправлениеЭД);
			ДокументОбъект.Записать();
	
			Если НовоеСостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.ОбменЗавершен
				Или НовоеСостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.ОбменЗавершенСИсправлением Тогда
				
				ОснованияДокумента = СвойстваЭД.ВладелецФайла.ДокументыОснования.ВыгрузитьКолонку("ДокументОснование");
				
				ЭлектронныеДокументыПереопределяемый.УстановленоСостояниеОбменЗавершен(ОснованияДокумента);
			КонецЕсли;
			
		КонецЕсли;
		
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбновитьВерсиюЭДВРегистре(
			СвойстваЭД.ВладелецФайла, НовоеСостояниеВерсииЭД, СводнаяИнформацияПоСтатусу);
	КонецЕсли;
		
КонецПроцедуры

// Проверяет, является ли переданный в параметре ЭД служебным или нет.
//
Функция ЭтоСлужебныйДокумент(ФайлЭД) Экспорт
	
	Если ТипЗнч(ФайлЭД) = Тип("ПеречислениеСсылка.ТипыЭлементовВерсииЭД") Тогда
		ТипЭлементаВерсииЭД = ФайлЭД;
	Иначе
		ТипЭлементаВерсииЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ФайлЭД, "ТипЭлементаВерсииЭД"); 	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТипЭлементаВерсииЭД) Тогда
		
		ОсновныеТипыЭД = ЭлектронныеДокументыКлиентСервер.ОсновныеТипыЭД();
		ВозвращаемоеЗначение = ОсновныеТипыЭД.Найти(ТипЭлементаВерсииЭД) = Неопределено;
	Иначе
		ВозвращаемоеЗначение = Ложь;
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Определяет необходимость выполнения какого-либо действия
// с электронным документом с нашей стороны, либо ожидание действия получателя,
// на основании статуса текущего электронного документа.
//
// Параметры:
//  СсылкаНаЭД - СправочникСсылка.ЭДПрисоединенныеФайлы
//               СправочникОбъект.ЭДПрисоединенныеФайлы.
//
Функция ОпределитьСводнуюИнформациюПоСтатусуЭД(СсылкаНаЭД) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СтруктураДействий = Новый Структура("СНашейСтороны, СоСтороныДругогоУчастника",
		Перечисления.СводныеСостоянияЭД.ДействийНеТребуется, Перечисления.СводныеСостоянияЭД.ДействийНеТребуется);
		
	Если СсылкаНаЭД <> Неопределено Тогда
	
		ПараметрыЭД = ЭлектронныеДокументыСлужебный.ЗначенияРеквизитовОбъектаИлиСсылки(СсылкаНаЭД, 
			"ВидЭД, СтатусЭД, НаправлениеЭД, ВерсияРегламентаЭДО, СоглашениеЭД, ПрофильНастроекЭДО,
			|ЭлектронныйДокументВладелец, ВладелецФайла, ТребуетсяИзвещение, ТребуетсяПодтверждение, ТипЭлементаВерсииЭД, Ссылка");
		
		Если ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.СЧФДОПУПД
			Или ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.КСЧФДИСУКД
			Или ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДОПУПД
			Или ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДИСУКД Тогда
			
			МассивЭД = Новый Массив;
			МассивПодчиненныхЭД = Новый Массив;
			МассивЭД.Добавить(ПараметрыЭД.Ссылка);
			МассивПодчиненныхЭД = ПолучитьПодчиненныеЭД(МассивЭД);
			
			СтруктураФлагов = Новый Структура;
			СтруктураФлагов.Вставить("НаправлениеЭСФ",   ПараметрыЭД.НаправлениеЭД);
			СтруктураФлагов.Вставить("СтатусЭСФ",        ПараметрыЭД.СтатусЭД);
			СтруктураФлагов.Вставить("ОтправленИПУУ",    Ложь);
			СтруктураФлагов.Вставить("ЭСФОтправлен",     (ПараметрыЭД.СтатусЭД = Перечисления.СтатусыЭД.ПереданОператору
				Или ПараметрыЭД.СтатусЭД = Перечисления.СтатусыЭД.Отправлен
				Или ПараметрыЭД.СтатусЭД = Перечисления.СтатусыЭД.Доставлен
				Или ПараметрыЭД.СтатусЭД = Перечисления.СтатусыЭД.ПолученоПодтверждение));
			СтруктураФлагов.Вставить("ПДППолучен",       Ложь);
			СтруктураФлагов.Вставить("ПДОПолучен",       Ложь);
			СтруктураФлагов.Вставить("ПДОИППолучен",     Ложь);
			СтруктураФлагов.Вставить("ИПЭСФОтправлен",   Ложь);
			СтруктураФлагов.Вставить("ИПЭСФПолучен",     Ложь);
			СтруктураФлагов.Вставить("ИПУУПолучен",      Ложь);
			СтруктураФлагов.Вставить("ИПУУОтправлен",    Ложь);
			СтруктураФлагов.Вставить("ИППДПОтправлен",   Ложь);
			СтруктураФлагов.Вставить("ИППДООтправлен",   Ложь);
			СтруктураФлагов.Вставить("ИППДОИПОтправлен", Ложь);
			СтруктураФлагов.Вставить("УУОтправлен",      Ложь);
			СтруктураФлагов.Вставить("ИПОтправлен",      Ложь);
			СтруктураФлагов.Вставить("ИППолучен",        Ложь);
			СтруктураФлагов.Вставить("ИППДОПолучен",     Ложь);
			СтруктураФлагов.Вставить("ИППДОИПОтправлен", Ложь);
			
			Для Каждого Элемент Из МассивПодчиненныхЭД Цикл
				Если Элемент.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДПЭСФ Тогда
					
					СтруктураФлагов.ПДППолучен = Истина;
				ИначеЕсли Элемент.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДОЭСФ Тогда
					
					СтруктураФлагов.ПДОПолучен = Истина;
				ИначеЕсли Элемент.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДОИПЭСФ Тогда
					
					СтруктураФлагов.ПДОИППолучен = Истина;
				ИначеЕсли Элемент.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИПЭСФ Тогда
					
					Если Элемент.СтатусЭД = Перечисления.СтатусыЭД.Отправлен Тогда
						СтруктураФлагов.ИПЭСФОтправлен = Истина;
					ИначеЕсли Элемент.СтатусЭД = Перечисления.СтатусыЭД.Получен Тогда
						СтруктураФлагов.ИПЭСФПолучен = Истина;
					КонецЕсли;
					
				ИначеЕсли Элемент.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИПУУЭСФ Тогда
					
					Если Элемент.СтатусЭД = Перечисления.СтатусыЭД.Отправлен Тогда
						СтруктураФлагов.ИПУУОтправлен = Истина;
					Иначе
						СтруктураФлагов.ИПУУПолучен = Истина;
					КонецЕсли;
					
				ИначеЕсли Элемент.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИППДПЭСФ Тогда
					
					Если Элемент.СтатусЭД = Перечисления.СтатусыЭД.Отправлен Тогда
						СтруктураФлагов.ИППДПОтправлен = Истина;
					КонецЕсли;
					
				ИначеЕсли Элемент.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИППДОЭСФ Тогда
					
					Если Элемент.СтатусЭД = Перечисления.СтатусыЭД.Отправлен Тогда
						СтруктураФлагов.ИППДООтправлен = Истина;
					КонецЕсли;
					
				ИначеЕсли Элемент.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИППДОИПЭСФ Тогда
					
					Если Элемент.СтатусЭД = Перечисления.СтатусыЭД.Отправлен Тогда
						СтруктураФлагов.ИППДОИПОтправлен = Истина;
					КонецЕсли;
					
				ИначеЕсли Элемент.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.УУЭСФ Тогда
					
					Если Элемент.СтатусЭД = Перечисления.СтатусыЭД.Отправлен Тогда
						СтруктураФлагов.УУОтправлен = Истина;
					КонецЕсли;
				ИначеЕсли Элемент.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИнформацияПокупателяУПД
					Или Элемент.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИнформацияПокупателяУКД Тогда
					
					Если Элемент.СтатусЭД = Перечисления.СтатусыЭД.Отправлен
						Или Элемент.СтатусЭД = Перечисления.СтатусыЭД.ПереданОператору Тогда
						СтруктураФлагов.ИПОтправлен = Истина;
					ИначеЕсли Элемент.СтатусЭД = Перечисления.СтатусыЭД.Получен Тогда
						СтруктураФлагов.ИППолучен = Истина;
					КонецЕсли;
				ИначеЕсли Элемент.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДОИПУПДУКД Тогда
					
					Если Элемент.СтатусЭД = Перечисления.СтатусыЭД.Получен Тогда
						СтруктураФлагов.ИППДОПолучен = Истина;
					КонецЕсли;
					
				ИначеЕсли Элемент.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИППДОИПУПДУКД Тогда
					
					Если Элемент.СтатусЭД = Перечисления.СтатусыЭД.Отправлен Тогда
						СтруктураФлагов.ИППДОИПОтправлен = Истина;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			Если ПараметрыЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий Тогда
				
				Если ПараметрыЭД.СтатусЭД = Перечисления.СтатусыЭД.ОтклоненПолучателем
					Или НЕ СтруктураФлагов.ЭСФОтправлен 
					Или (СтруктураФлагов.ПДППолучен 
						И НЕ СтруктураФлагов.ИППДПОтправлен) Тогда
					
					СтруктураДействий.СНашейСтороны = Перечисления.СводныеСостоянияЭД.ТребуютсяДействия;
				КонецЕсли;
				
				Если ПараметрыЭД.СтатусЭД = Перечисления.СтатусыЭД.ОтклоненПолучателем Тогда
					СтруктураДействий.СоСтороныДругогоУчастника = Перечисления.СводныеСостоянияЭД.Отклонен;
					
				ИначеЕсли (ПараметрыЭД.СтатусЭД = Перечисления.СтатусыЭД.ПереданОператору
							Или ПараметрыЭД.СтатусЭД = Перечисления.СтатусыЭД.Отправлен)
						И (НЕ СтруктураФлагов.ПДППолучен 
							Или (НЕ СтруктураФлагов.ИПЭСФПолучен И ПараметрыЭД.ТребуетсяИзвещение)
							Или (НЕ СтруктураФлагов.ИППолучен И ПараметрыЭД.ТребуетсяПодтверждение)) Тогда
					
					СтруктураДействий.СоСтороныДругогоУчастника = Перечисления.СводныеСостоянияЭД.ТребуютсяДействия;
				КонецЕсли;
			Иначе
				
				Если ПараметрыЭД.СтатусЭД = Перечисления.СтатусыЭД.Отклонен И СтруктураФлагов.УУОтправлен Тогда
					
					СтруктураДействий.СНашейСтороны = Перечисления.СводныеСостоянияЭД.Отклонен;
					
				ИначеЕсли (СтруктураФлагов.ПДОПолучен И НЕ СтруктураФлагов.ИППДООтправлен)
					Или ((ПараметрыЭД.СтатусЭД = Перечисления.СтатусыЭД.Получен
						Или ПараметрыЭД.СтатусЭД = Перечисления.СтатусыЭД.Утвержден) 
						И (НЕ СтруктураФлагов.ИПЭСФОтправлен И ПараметрыЭД.ТребуетсяИзвещение))
					Или (НЕ СтруктураФлагов.ИПОтправлен И ПараметрыЭД.ТребуетсяПодтверждение)
					Или (СтруктураФлагов.ИППДОПолучен И НЕ СтруктураФлагов.ИППДОИПОтправлен) Тогда
					
					СтруктураДействий.СНашейСтороны = Перечисления.СводныеСостоянияЭД.ТребуютсяДействия;
				КонецЕсли;
				
				Если ПараметрыЭД.СтатусЭД = Перечисления.СтатусыЭД.Получен Тогда
					СтруктураДействий.СНашейСтороны = Перечисления.СводныеСостоянияЭД.ТребуютсяДействия;
				КонецЕсли;
				
				Если (ПараметрыЭД.СтатусЭД = Перечисления.СтатусыЭД.Отклонен)
					Или НЕ СтруктураФлагов.ПДОПолучен
					Или (СтруктураФлагов.ИПЭСФОтправлен И ПараметрыЭД.ТребуетсяИзвещение И НЕ СтруктураФлагов.ПДОИППолучен)
					Или (ПараметрыЭД.СтатусЭД = Перечисления.СтатусыЭД.Отклонен И НЕ СтруктураФлагов.ИПУУПолучен)
					Или (СтруктураФлагов.ИПОтправлен И ПараметрыЭД.ТребуетсяПодтверждение И НЕ СтруктураФлагов.ИППДОПолучен) Тогда
					
					СтруктураДействий.СоСтороныДругогоУчастника = Перечисления.СводныеСостоянияЭД.ТребуютсяДействия;
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.СЧФУПД
			ИЛИ ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.КСЧФУКД
			ИЛИ ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ЭСФ Тогда
			
			МассивЭД = Новый Массив;
			МассивПодчиненныхЭД = Новый Массив;
			МассивЭД.Добавить(ПараметрыЭД.Ссылка);
			МассивПодчиненныхЭД = ПолучитьПодчиненныеЭД(МассивЭД);
			
			СтруктураФлагов = Новый Структура;
			СтруктураФлагов.Вставить("НаправлениеЭСФ",   ПараметрыЭД.НаправлениеЭД);
			СтруктураФлагов.Вставить("СтатусЭСФ",        ПараметрыЭД.СтатусЭД);
			СтруктураФлагов.Вставить("ОтправленИПУУ",    Ложь);
			СтруктураФлагов.Вставить("ЭСФОтправлен",     (ПараметрыЭД.СтатусЭД = Перечисления.СтатусыЭД.ПереданОператору
				Или ПараметрыЭД.СтатусЭД = Перечисления.СтатусыЭД.Отправлен
				Или ПараметрыЭД.СтатусЭД = Перечисления.СтатусыЭД.Доставлен));
			СтруктураФлагов.Вставить("ПДППолучен",       Ложь);
			СтруктураФлагов.Вставить("ПДОПолучен",       Ложь);
			СтруктураФлагов.Вставить("ПДОИППолучен",     Ложь);
			СтруктураФлагов.Вставить("ИПЭСФОтправлен",   Ложь);
			СтруктураФлагов.Вставить("ИПЭСФПолучен",     Ложь);
			СтруктураФлагов.Вставить("ИПУУПолучен",      Ложь);
			СтруктураФлагов.Вставить("ИПУУОтправлен",    Ложь);
			СтруктураФлагов.Вставить("ИППДПОтправлен",   Ложь);
			СтруктураФлагов.Вставить("ИППДООтправлен",   Ложь);
			СтруктураФлагов.Вставить("ИППДОИПОтправлен", Ложь);
			СтруктураФлагов.Вставить("УУОтправлен",      Ложь);
			
			Для Каждого Элемент Из МассивПодчиненныхЭД Цикл
				Если Элемент.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДПЭСФ Тогда
					
					СтруктураФлагов.ПДППолучен = Истина;
				ИначеЕсли Элемент.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДОЭСФ Тогда
					
					СтруктураФлагов.ПДОПолучен = Истина;
				ИначеЕсли Элемент.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДОИПЭСФ Тогда
					
					СтруктураФлагов.ПДОИППолучен = Истина;
				ИначеЕсли Элемент.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИПЭСФ Тогда
					
					Если Элемент.СтатусЭД = Перечисления.СтатусыЭД.Отправлен Тогда
						СтруктураФлагов.ИПЭСФОтправлен = Истина;
					ИначеЕсли Элемент.СтатусЭД = Перечисления.СтатусыЭД.Получен Тогда
						СтруктураФлагов.ИПЭСФПолучен = Истина;
					КонецЕсли;
					
				ИначеЕсли Элемент.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИПУУЭСФ Тогда
					
					Если Элемент.СтатусЭД = Перечисления.СтатусыЭД.Отправлен Тогда
						СтруктураФлагов.ИПУУОтправлен = Истина;
					Иначе
						СтруктураФлагов.ИПУУПолучен = Истина;
					КонецЕсли;
					
				ИначеЕсли Элемент.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИППДПЭСФ Тогда
					
					Если Элемент.СтатусЭД = Перечисления.СтатусыЭД.Отправлен Тогда
						СтруктураФлагов.ИППДПОтправлен = Истина;
					КонецЕсли;
					
				ИначеЕсли Элемент.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИППДОЭСФ Тогда
					
					Если Элемент.СтатусЭД = Перечисления.СтатусыЭД.Отправлен Тогда
						СтруктураФлагов.ИППДООтправлен = Истина;
					КонецЕсли;
					
				ИначеЕсли Элемент.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИППДОИПЭСФ Тогда
					
					Если Элемент.СтатусЭД = Перечисления.СтатусыЭД.Отправлен Тогда
						СтруктураФлагов.ИППДОИПОтправлен = Истина;
					КонецЕсли;
					
				ИначеЕсли Элемент.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.УУЭСФ Тогда
					
					Если Элемент.СтатусЭД = Перечисления.СтатусыЭД.Отправлен Тогда
						СтруктураФлагов.УУОтправлен = Истина;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			Если ПараметрыЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий Тогда
				
				Если ПараметрыЭД.СтатусЭД = Перечисления.СтатусыЭД.ОтклоненПолучателем
					Или НЕ СтруктураФлагов.ЭСФОтправлен 
					Или СтруктураФлагов.ПДППолучен И НЕ СтруктураФлагов.ИППДПОтправлен Тогда
		
					СтруктураДействий.СНашейСтороны = Перечисления.СводныеСостоянияЭД.ТребуютсяДействия;
					
				КонецЕсли;
				
				Если ПараметрыЭД.СтатусЭД = Перечисления.СтатусыЭД.ОтклоненПолучателем Тогда
					СтруктураДействий.СоСтороныДругогоУчастника = Перечисления.СводныеСостоянияЭД.Отклонен;
					
				ИначеЕсли (ПараметрыЭД.СтатусЭД = Перечисления.СтатусыЭД.ПереданОператору
							Или ПараметрыЭД.СтатусЭД = Перечисления.СтатусыЭД.Отправлен)
					И (Не СтруктураФлагов.ПДППолучен 
						Или (Не СтруктураФлагов.ИПЭСФПолучен И ПараметрыЭД.ТребуетсяИзвещение)) Тогда
					
					СтруктураДействий.СоСтороныДругогоУчастника = Перечисления.СводныеСостоянияЭД.ТребуютсяДействия;
					
				КонецЕсли;
				
			Иначе
				Если ПараметрыЭД.СтатусЭД = Перечисления.СтатусыЭД.Отклонен И СтруктураФлагов.УУОтправлен Тогда
					
					СтруктураДействий.СНашейСтороны = Перечисления.СводныеСостоянияЭД.Отклонен;
					
				ИначеЕсли СтруктураФлагов.ПДОПолучен И Не СтруктураФлагов.ИППДООтправлен
					Или ПараметрыЭД.СтатусЭД = Перечисления.СтатусыЭД.Получен
					Или ПараметрыЭД.СтатусЭД = Перечисления.СтатусыЭД.Утвержден
					И (Не СтруктураФлагов.ИПЭСФОтправлен И ПараметрыЭД.ТребуетсяИзвещение)  Тогда
					
					СтруктураДействий.СНашейСтороны = Перечисления.СводныеСостоянияЭД.ТребуютсяДействия;
					
				КонецЕсли;
				
				Если ПараметрыЭД.СтатусЭД = Перечисления.СтатусыЭД.Отклонен 
					Или НЕ СтруктураФлагов.ПДОПолучен
					Или СтруктураФлагов.ИПЭСФОтправлен И Не СтруктураФлагов.ПДОИППолучен
					Или ПараметрыЭД.СтатусЭД = Перечисления.СтатусыЭД.Отклонен И Не СтруктураФлагов.ИПУУПолучен Тогда
					
					СтруктураДействий.СоСтороныДругогоУчастника = Перечисления.СводныеСостоянияЭД.ТребуютсяДействия;
				КонецЕсли;
			КонецЕсли;
			
		Иначе
			
			Если ПараметрыЭД.СтатусЭД = Перечисления.СтатусыЭД.Сформирован
				ИЛИ ПараметрыЭД.СтатусЭД = Перечисления.СтатусыЭД.Утвержден
				ИЛИ ПараметрыЭД.СтатусЭД = Перечисления.СтатусыЭД.Подписан
				ИЛИ ПараметрыЭД.СтатусЭД = Перечисления.СтатусыЭД.Получен
				ИЛИ ПараметрыЭД.СтатусЭД = Перечисления.СтатусыЭД.ПодготовленКОтправке
				ИЛИ ПараметрыЭД.СтатусЭД = Перечисления.СтатусыЭД.ПодготовленоПодтверждение Тогда
				
				СтруктураДействий.СНашейСтороны = Перечисления.СводныеСостоянияЭД.ТребуютсяДействия;
				
				// Если обмен прямой, и получен ответный ЭД на отправленный ЭД, то больше не требуется действий с нашей стороны.
				Если ПараметрыЭД.СтатусЭД = Перечисления.СтатусыЭД.Получен
					И ЗначениеЗаполнено(ПараметрыЭД.ЭлектронныйДокументВладелец) Тогда
					
					СпособОбменаЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыЭД.ПрофильНастроекЭДО, "СпособОбменаЭД");
					Если СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезКаталог
						ИЛИ СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезFTP Тогда
						
						СтруктураДействий.СНашейСтороны = Перечисления.СводныеСостоянияЭД.ДействийНеТребуется;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Если ПараметрыЭД.СтатусЭД = Перечисления.СтатусыЭД.ПереданОператору 
				Или ПараметрыЭД.СтатусЭД = Перечисления.СтатусыЭД.Отправлен Тогда
				СтруктураДействий.СоСтороныДругогоУчастника = Перечисления.СводныеСостоянияЭД.ТребуютсяДействия;
			КонецЕсли;
			
			Если (ПараметрыЭД.ВерсияРегламентаЭДО = Перечисления.ВерсииРегламентаОбмена1С.Версия20
				И (ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель
					ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.АктЗаказчик
					ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель))
				ИЛИ (НЕ ПараметрыЭД.ВерсияРегламентаЭДО = Перечисления.ВерсииРегламентаОбмена1С.Версия20
					И ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ИзвещениеОПолучении) Тогда
				
				СостояниеЭД = Неопределено;
				Если ЭлектронныеДокументыСлужебный.ЕстьНеотправленноеПодтверждение(ПараметрыЭД.ВладелецФайла, СостояниеЭД) Тогда
					СтруктураДействий.СНашейСтороны = Перечисления.СводныеСостоянияЭД.ТребуютсяДействия;
				КонецЕсли;
				
				Если ЭлектронныеДокументыСлужебный.ЕстьНепринятоеПодтверждение(ПараметрыЭД.ВладелецФайла, СостояниеЭД) Тогда
					СтруктураДействий.СНашейСтороны = Перечисления.СводныеСостоянияЭД.ДействийНеТребуется;
					СтруктураДействий.СоСтороныДругогоУчастника = Перечисления.СводныеСостоянияЭД.ТребуютсяДействия;
				КонецЕсли;
				
			КонецЕсли;
			
			Если ПараметрыЭД.СтатусЭД = Перечисления.СтатусыЭД.ПереданОператору
				 И (ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.АктЗаказчик
					ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель
					ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель) Тогда
				СтруктураДействий.СоСтороныДругогоУчастника = Перечисления.СводныеСостоянияЭД.ДействийНеТребуется;
			КонецЕсли;
			
			Если ПараметрыЭД.СтатусЭД = Перечисления.СтатусыЭД.Доставлен
				И ПараметрыЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий
				И (ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.АктВыполненныхРабот
					ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.АктНаПередачуПрав
					ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ВозвратТоваровМеждуОрганизациями
					ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.КаталогТоваров
					ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ОтчетОПродажахКомиссионногоТовара
					ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ОтчетОСписанииКомиссионногоТовара
					ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ПередачаТоваровМеждуОрганизациями
					ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ПрайсЛист
					ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель
					ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.АктИсполнитель
					ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12
					ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец
					ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ЗаказТовара
					ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ОтветНаЗаказ) Тогда
				СтруктураДействий.СоСтороныДругогоУчастника = Перечисления.СводныеСостоянияЭД.ТребуютсяДействия;
			КонецЕсли;
			
			Если ПараметрыЭД.СтатусЭД = Перечисления.СтатусыЭД.ПолученоПредложениеОбАннулировании Тогда
				СтруктураДействий.СНашейСтороны = Перечисления.СводныеСостоянияЭД.ТребуютсяДействия;
			ИначеЕсли ПараметрыЭД.СтатусЭД = Перечисления.СтатусыЭД.СформированоПредложениеОбАннулировании
				ИЛИ ПараметрыЭД.СтатусЭД = Перечисления.СтатусыЭД.ОтправленоПредложениеОбАннулировании Тогда
				СтруктураДействий.СоСтороныДругогоУчастника = Перечисления.СводныеСостоянияЭД.ТребуютсяДействия;
			КонецЕсли;
			
			Если ПараметрыЭД.СтатусЭД = Перечисления.СтатусыЭД.Отклонен
				Или ПараметрыЭД.СтатусЭД = Перечисления.СтатусыЭД.ОтклоненПолучателем Тогда
				СтруктураДействий.СоСтороныДругогоУчастника = Перечисления.СводныеСостоянияЭД.ТребуютсяДействия;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураДействий.СоСтороныДругогоУчастника = Перечисления.СводныеСостоянияЭД.ДействийНеТребуется
		И СтруктураДействий.СНашейСтороны = Перечисления.СводныеСостоянияЭД.ДействийНеТребуется Тогда
		
		СтруктураДействий.СНашейСтороны = Перечисления.СводныеСостоянияЭД.ВсеВыполнено;
		СтруктураДействий.СоСтороныДругогоУчастника = Перечисления.СводныеСостоянияЭД.ВсеВыполнено;
	КонецЕсли;
	
	Возврат СтруктураДействий;
	
КонецФункции

// определяет, нужно ли поставить электронному документу флаг "НаОзнакомлении"
//
// Параметры
//  ТекущееСостояние - Перечисление.СостоянияВерсийЭД - текущее состояние ЭД
//  НовоеСостояние - Перечисление.СостоянияВерсийЭД - новое состояние ЭД
//
// Возвращаемое значение:
//   Булево
//
Функция ДокументНаОзнакомление(ТекущееСостояние, НовоеСостояние, НаправлениеЭД)
	
	НаОзнакомление = Ложь;
	
	Если Константы.ИспользоватьОзнакомлениеСЭлектроннымиДокументами.Получить() Тогда
		
		Если НовоеСостояние = Перечисления.СостоянияВерсийЭД.ОбменЗавершен
			ИЛИ НовоеСостояние = Перечисления.СостоянияВерсийЭД.ОбменЗавершенСИсправлением Тогда
			
			СостоянияЗавершающиесяПриОбмене = Новый Массив;
			СостоянияЗавершающиесяПриОбмене.Добавить(Перечисления.СостоянияВерсийЭД.ОжидаетсяПодтверждение);
			СостоянияЗавершающиесяПриОбмене.Добавить(Перечисления.СостоянияВерсийЭД.ОжидаетсяИзвещениеОПолучении);
			СостоянияЗавершающиесяПриОбмене.Добавить(Перечисления.СостоянияВерсийЭД.ОжидаетсяОтправкаИзвещения);
			СостоянияЗавершающиесяПриОбмене.Добавить(Перечисления.СостоянияВерсийЭД.ОжидаетсяАннулирование);
			
			Если СостоянияЗавершающиесяПриОбмене.Найти(ТекущееСостояние) <> Неопределено Тогда
				НаОзнакомление = Истина;
			КонецЕсли;
			
		ИначеЕсли НовоеСостояние = Перечисления.СостоянияВерсийЭД.Аннулирован Тогда
			
			СостоянияАннулирующиесяПриОбмене = Новый Массив; 
			СостоянияАннулирующиесяПриОбмене.Добавить(Перечисления.СостоянияВерсийЭД.ОжидаетсяАннулирование);
			Если НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
				// Аннулирование входящего документа без требования ответной подписи.
				СостоянияАннулирующиесяПриОбмене.Добавить(Перечисления.СостоянияВерсийЭД.ОбменЗавершен);
				СостоянияАннулирующиесяПриОбмене.Добавить(Перечисления.СостоянияВерсийЭД.ОбменЗавершенСИсправлением);
			КонецЕсли;
			
			Если СостоянияАннулирующиесяПриОбмене.Найти(ТекущееСостояние) <> Неопределено Тогда
				НаОзнакомление = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат НаОзнакомление;

КонецФункции

// Получает рекурсивно все подчиненные электронные документы с любой глубиной вложенности.
//
// Параметры:
//  МассивЭДВладельцев - массив ссылок на электронные документы владельцы (для текущей итерации - владелец выбираемых ЭД).
//  МассивЭД - массив подчиненных электронных документов (с каждой итерацией увеличивается на количество найденных ЭД).
//
Функция ПолучитьПодчиненныеЭД(Знач МассивЭДВладельцев, Знач МассивЭД = Неопределено)

	Если МассивЭД = Неопределено Тогда
		МассивЭД = Новый Массив;
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЭДПрисоединенныеФайлы.Ссылка
	|ПОМЕСТИТЬ Уровень1
	|ИЗ
	|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	|ГДЕ
	|	ЭДПрисоединенныеФайлы.ЭлектронныйДокументВладелец В (&МассивЭДВладельцев)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Уровень1.Ссылка КАК Ссылка,
	|	ВЫБОР
	|		КОГДА ЭДПрисоединенныеФайлы.Ссылка ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЕстьПодчиненныеЭлементы
	|ИЗ
	|	Уровень1 КАК Уровень1
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	|		ПО Уровень1.Ссылка = ЭДПрисоединенныеФайлы.ЭлектронныйДокументВладелец";
	
	Запрос.УстановитьПараметр("МассивЭДВладельцев", МассивЭДВладельцев);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	МассивПодчиненныхЭД = Новый Массив;
	Пока Выборка.Следующий() Цикл
		МассивЭД.Добавить(Выборка.Ссылка);
		Если Выборка.ЕстьПодчиненныеЭлементы Тогда
			МассивПодчиненныхЭД.Добавить(Выборка.Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	Если МассивПодчиненныхЭД.Количество() Тогда
		МассивЭД = ПолучитьПодчиненныеЭД(МассивПодчиненныхЭД, МассивЭД);	
	КонецЕсли;
	
	Возврат МассивЭД;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обмен через FTP

// Только для внутреннего использования
Функция ПолучитьFTPСоединение(ПрофильНастроекЭДО, ЭтоТест = Ложь) Экспорт
	
	Если ЭтоТест Тогда
		ШаблонСообщения = НСтр("ru = 'Тест. Проверка установки FTP соединения.
			|%1'");
	Иначе
		ШаблонСообщения = "%1";
	КонецЕсли;
		
	ИспользоватьПрокси = Ложь;
	
	НастройкаПроксиСервера = ПолучениеФайловИзИнтернета.НастройкиПроксиНаСервере();
	Если НастройкаПроксиСервера <> Неопределено Тогда
		ПараметрИспользоватьПрокси = НастройкаПроксиСервера.Получить("ИспользоватьПрокси");
		Если НЕ ПараметрИспользоватьПрокси=Неопределено Тогда
			ИспользоватьПрокси = ПараметрИспользоватьПрокси;
		КонецЕсли;
	КонецЕсли;
	
	Если ИспользоватьПрокси Тогда
		Если НастройкаПроксиСервера.Получить("ИспользоватьСистемныеНастройки") Тогда
			// Системные настройки прокси-сервера.
			Прокси = Новый ИнтернетПрокси(Истина);
		Иначе
			// Ручные настройки прокси-сервера.
			Прокси = Новый ИнтернетПрокси;
			Прокси.Установить("ftp", НастройкаПроксиСервера["Сервер"], НастройкаПроксиСервера["Порт"]);
			Прокси.НеИспользоватьПроксиДляЛокальныхАдресов = НастройкаПроксиСервера["НеИспользоватьПроксиДляЛокальныхАдресов"];
			Прокси.Пользователь = НастройкаПроксиСервера["Пользователь"];
			Прокси.Пароль = НастройкаПроксиСервера["Пароль"];
		КонецЕсли;
	Иначе
		Прокси = Новый ИнтернетПрокси(Ложь);
	КонецЕсли;
	
	ПараметрыПрофиляНастроекЭДО = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПрофильНастроекЭДО,
		"АдресСервера, Логин, Пароль, Порт, ПассивноеСоединение");
	
	Попытка
		FTPСоединение = Новый FTPСоединение(ПараметрыПрофиляНастроекЭДО.АдресСервера,
											ПараметрыПрофиляНастроекЭДО.Порт,
											ПараметрыПрофиляНастроекЭДО.Логин,
											ПараметрыПрофиляНастроекЭДО.Пароль,
											Прокси,
											ПараметрыПрофиляНастроекЭДО.ПассивноеСоединение);
	Исключение
		ШаблонРезультата = НСтр("ru = '%1
			|%2'");
		ТекстОшибки = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьСообщениеОбОшибке("121");
		РезультатТеста = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонРезультата, ТекстОшибки,
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, РезультатТеста);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат Неопределено;
	КонецПопытки;
	
	Если ЭтоТест Тогда
		РезультатТеста = НСтр("ru = 'Пройден успешно.'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, РезультатТеста);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	Возврат FTPСоединение;
	
КонецФункции

// Только для внутреннего использования
Процедура ПодготовитьПутьFTP(Путь) Экспорт
	Путь = СтрЗаменить(Путь, "\", "/");
	Если ЗначениеЗаполнено(Путь) Тогда
		Если НЕ Лев(Путь, 1) = "/" Тогда
			Путь = "/" + Путь;
		КонецЕсли;
		Если НЕ Прав(Путь, 1) = "/" Тогда
			Путь = Путь + "/";
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// Процедура используется для проведения тестирования настроек обмена через FTP
//
// Параметры:
//  ПрофильНастроекЭДО - СправочникСсылка.Соглашение - тестируемое соглашение;
//  КаталогВходящихДокументов - Строка - пусть к каталогу обмена входящими документами;
//  КаталогИсходящихДокументов - Строка - пусть к каталогу обмена исходящими документами.
//
Процедура ТестСвязиОбменаЧерезFTP(ПрофильНастроекЭДО, КаталогВходящихДокументов, КаталогИсходящихДокументов) Экспорт
	
	FTPСоединение = ПолучитьFTPСоединение(ПрофильНастроекЭДО, Истина);
	
	Если FTPСоединение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ШаблонСообщения = НСтр("ru = 'Тест. Проверка каталога исходящих документов.
							|%1'");
	
	ТекстОшибки = "";
	Попытка
		ПодготовитьПутьFTP(КаталогИсходящихДокументов);
		FTPСоединение.УстановитьТекущийКаталог(КаталогИсходящихДокументов);
	Исключение
		СоздатьКаталогиFTP(FTPСоединение, КаталогИсходящихДокументов, Истина, ТекстОшибки);
	КонецПопытки;
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		РезультатТеста = ТекстОшибки;
	Иначе
		РезультатТеста = НСтр("ru = 'Пройден успешно.'");
	КонецЕсли;
	
	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, РезультатТеста);
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	
	Если НЕ ЗначениеЗаполнено(ТекстОшибки) Тогда
		ШаблонСообщения = НСтр("ru = 'Тест. Проверка записи и чтения файлов в каталоге исходящих документов.
									|%1'");
		ПроверитьФайл(ШаблонСообщения, FTPСоединение, ТекстОшибки);
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			РезультатТеста = ТекстОшибки;
		Иначе
			РезультатТеста = НСтр("ru = 'Пройден успешно.'");
		КонецЕсли;
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, РезультатТеста);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	ТекстОшибки = "";
	
	ШаблонСообщения = НСтр("ru = 'Тест. Проверка каталога входящих документов.
		|%1'");
	Попытка
		ПодготовитьПутьFTP(КаталогВходящихДокументов);
		FTPСоединение.УстановитьТекущийКаталог(КаталогВходящихДокументов);
	Исключение
		СоздатьКаталогиFTP(FTPСоединение, КаталогВходящихДокументов, Истина, ТекстОшибки);
	КонецПопытки;
		
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		РезультатТеста = ТекстОшибки;
	Иначе
		РезультатТеста = НСтр("ru = 'Пройден успешно.'");
	КонецЕсли;
	
	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, РезультатТеста);
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	
	Если НЕ ЗначениеЗаполнено(ТекстОшибки) Тогда
		ШаблонСообщения = НСтр("ru = 'Тест. Проверка записи и чтения файлов в каталоге входящих документов.
									|%1'");
		ПроверитьФайл(ШаблонСообщения, FTPСоединение, ТекстОшибки);
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			РезультатТеста = ТекстОшибки;
		Иначе
			РезультатТеста = НСтр("ru = 'Пройден успешно.'");
		КонецЕсли;
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, РезультатТеста);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

// Только для внутреннего использования
Процедура СоздатьКаталогиFTP(FTPСоединение, ПолныйПуть, ЭтоТест = Ложь, ТекстОшибки = Неопределено) Экспорт
	
	ПолныйПуть = СтрЗаменить(ПолныйПуть, "\", "/");
	МассивКаталогов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПолныйПуть, "/", Истина);
	ТекущийПуть = "/";
	FTPСоединение.УстановитьТекущийКаталог(ТекущийПуть);
	Для Каждого Элемент ИЗ МассивКаталогов Цикл
		
		мКаталог = Новый Массив;
		
		НайтиФайлыВКаталогеFTP(FTPСоединение, Элемент, Неопределено, Истина, ТекстОшибки, мКаталог);
		
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			Возврат;
		КонецЕсли;
		
		Если мКаталог.Количество() = 1 Тогда 
			Если мКаталог[0].ЭтоФайл() Тогда 
				ТекстОшибки = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьСообщениеОбОшибке("122");
				Если НЕ ЭтоТест Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
				КонецЕсли;
				Возврат;
			КонецЕсли;
			СоздаватьКаталог = Ложь;
		Иначе
			СоздаватьКаталог = Истина;
		КонецЕсли;

		Если СоздаватьКаталог Тогда
			Попытка
				FTPСоединение.СоздатьКаталог(Элемент);
			Исключение
				ТекстОшибки = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьСообщениеОбОшибке("123");
				Если НЕ ЭтоТест Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
				КонецЕсли;
				Возврат;
			КонецПопытки
		КонецЕсли;
		
		ТекущийПуть = ТекущийПуть + Элемент + "/";
		
		Попытка
			FTPСоединение.УстановитьТекущийКаталог(ТекущийПуть);
		Исключение
			ТекстОшибки = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьСообщениеОбОшибке("124");
			Если НЕ ЭтоТест Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			КонецЕсли;
		КонецПопытки
		
	КонецЦикла;
	
КонецПроцедуры

// Только для внутреннего использования
Процедура ЗаписатьФайлНаFTP(FTPСоединение,
							Источник,
							ИмяВыходногоФайла,
							ЭтоТест = Ложь,
							РезультатТеста = Неопределено) Экспорт
	
	Попытка
		FTPСоединение.Записать(Источник, ИмяВыходногоФайла);
	Исключение
		РезультатТеста = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьСообщениеОбОшибке("127");
		
		Если НЕ ЭтоТест Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатТеста);
		КонецЕсли;
	КонецПопытки;

КонецПроцедуры

// Загружает файл с FTP источника
//
// Параметры:
//    FTPСоединение - FTPСоединение - используемое соединение для получения файла
//    Источник - Строка - Адрес ресурса
//    ИмяВыходногоФайла - Строка - Имя файла, в который помещаются данные полученного ресурса
//    ЭтоТест - Булево - Получение файла выполняется в рамках тестирования
//    РезультатТеста - Строка - текст ошибки, если она возникнет
//
Процедура ПолучитьФайлСFTP(FTPСоединение, Источник, ИмяВыходногоФайла, ЭтоТест = Ложь, РезультатТеста = Неопределено) Экспорт
	
	Попытка
		FTPСоединение.Получить(Источник, ИмяВыходногоФайла);
	Исключение
		РезультатТеста = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьСообщениеОбОшибке("128");
		
		Если НЕ ЭтоТест Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатТеста);
		КонецЕсли;
	КонецПопытки;
	
КонецПроцедуры

// Удаляет файл с FTP источника
//
// Параметры:
//    FTPСоединение - FTPСоединение - используемое соединение для получения файла
//    Путь - Строка - Путь к удаляемым файлам на сервере
//    РезультатТеста - Строка - текст ошибки, если она возникнет
//    ЭтоТест - Булево - Получение файла выполняется в рамках тестирования
//
Процедура УдалитьФайлFTP(FTPСоединение, Путь, РезультатТеста = Неопределено, ЭтоТест = Ложь) Экспорт
		
	Попытка
		FTPСоединение.Удалить(Путь);
	Исключение
		РезультатТеста = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьСообщениеОбОшибке("129");
		
		Если НЕ ЭтоТест Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатТеста);
		КонецЕсли;
	КонецПопытки;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Аунтификация на пользовательском сайте.

// Только для внутреннего использования
Функция БилетНаСайтПоддержки(Аутентификация) Экспорт
	
	Билет = "";
	Попытка
		ВебСервис = ОбщегоНазначения.WSПрокси(
			"https://login.1c.ru/api/public/ticket?wsdl",
			"http://api.cas.jasig.org/",
			"TicketApiImplService",
			"TicketApiImplPort",
			Аутентификация.Логин,
			Аутентификация.Пароль,
			5,
			Ложь);
		
		Билет = ВебСервис.getTicket(
			Аутентификация.Логин,
			Аутентификация.Пароль,
			"1C-EDO");
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		КраткоеПредставлениеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
		Если Найти(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке), "IncorrectLoginOrPasswordApiException") > 0 Тогда
			КраткоеПредставлениеОшибки = НСтр("ru = 'Некорректный логин или пароль пользователя.'");
		КонецЕсли;
		ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось подключиться к пользовательскому сайту по причине:
			           |%1'"),
			КраткоеПредставлениеОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки);
		
		СохранитьПараметрыАутентификацииНаСайте(Неопределено);
	КонецПопытки;
	
	Возврат Билет;
	
КонецФункции

// Возвращает логин и пароль пользователя Интернет-поддержки,
// сохраненные в информационной базе.
//
// Возвращаемое значение:
//   Структура    - текущие значения:
//     * Логин     - Строка - логин пользователя Интернет-поддержки;
//     * Пароль    - Строка - пароль пользователя Интернет-поддержки.
//   Неопределено - если параметры еще не были введены.
//
Функция ПараметрыАутентификацииНаСайте() Экспорт
	
	Результат = Новый Структура("Логин, Пароль");
	Если Метаданные.Константы.Найти("ФайлОбработкиИнтернетПоддержкиПользователей") <> Неопределено Тогда
		МодульИнтернетПоддержки = ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ИнтернетПоддержкаПользователейВызовСервера");
		МодульИнтернетПоддержки.ЗагрузкаЛогинаИПароляИзПараметровИнтернетПоддержкиПользователей(Результат.Логин, Результат.Пароль);
	Иначе
		Результат.Логин = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("АутентификацияНаПользовательскомСайте", "КодПользователя", "");
		Результат.Пароль = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("АутентификацияНаПользовательскомСайте", "Пароль", "");
	КонецЕсли;
	
	Возврат ?(Результат.Логин <> "", Результат, Неопределено);
	
КонецФункции

// Сохраняет параметры аутентификации пользователя (логин и пароль) на пользовательском сайте 1С.
//
// Параметры:
//     СохраняемыеПараметры - Структура - сохраняемые значения:
//         * Логин  - Строка - логин пользователя Интернет-поддержки;
//         * Пароль - Строка - пароль пользователя Интернет-поддержки.
// 
Процедура СохранитьПараметрыАутентификацииНаСайте(СохраняемыеПараметры) Экспорт

	Если Метаданные.Константы.Найти("ФайлОбработкиИнтернетПоддержкиПользователей") <> Неопределено Тогда
		
		Если СохраняемыеПараметры <> Неопределено Тогда
			Запись = РегистрыСведений["ПараметрыИнтернетПоддержкиПользователей"].СоздатьМенеджерЗаписи();
			Запись.Имя              = "login";
			Запись.Значение         = СохраняемыеПараметры.Логин;
			Запись.Пользователь     = "00000000-0000-0000-0000-000000000000";
			Запись.ОбластьВидимости = "startup";
			Запись.Записать();
			
			Запись = РегистрыСведений["ПараметрыИнтернетПоддержкиПользователей"].СоздатьМенеджерЗаписи();
			Запись.Имя              = "password";
			Запись.Значение         = СохраняемыеПараметры.Пароль;
			Запись.Пользователь     = "00000000-0000-0000-0000-000000000000";
			Запись.ОбластьВидимости = "startup";
			Запись.Записать();
		Иначе
			
			Запись = РегистрыСведений["ПараметрыИнтернетПоддержкиПользователей"].СоздатьМенеджерЗаписи();
			Запись.Имя              = "password";
			Запись.Значение         = "";
			Запись.Пользователь     = "00000000-0000-0000-0000-000000000000";
			Запись.ОбластьВидимости = "startup";
			Запись.Записать();
		КонецЕсли;
		
	Иначе
		Если СохраняемыеПараметры <> Неопределено Тогда
			ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("АутентификацияНаПользовательскомСайте", "КодПользователя", СохраняемыеПараметры.Логин);
			ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("АутентификацияНаПользовательскомСайте", "Пароль", СохраняемыеПараметры.Пароль);
		Иначе	
			ОбщегоНазначения.ХранилищеОбщихНастроекУдалить("АутентификацияНаПользовательскомСайте", "КодПользователя", ИмяПользователя());
			ОбщегоНазначения.ХранилищеОбщихНастроекУдалить("АутентификацияНаПользовательскомСайте", "Пароль", ИмяПользователя());
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработка пакетов электронных документов

// Создает пакет электронных документов.
// 
// Параметры:
//  МассивЭД - Массив ссылок на электронные документы, которые надо включить в пакет.
//  ПризнакПодписи - булево, признак, что документы подписаны ЭЦП.
//
Функция СоздатьДокументыПакетовЭД(МассивЭД, ПризнакПодписи) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТЗ_ПЭД = Новый ТаблицаЗначений;
	ТЗ_ПЭД.Колонки.Добавить("ПЭД");
	ТЗ_ПЭД.Колонки.Добавить("СпособОбменаЭД");
	ТЗ_ПЭД.Колонки.Добавить("АдресРесурсаПолучателя");
	ТЗ_ПЭД.Колонки.Добавить("ТребуетсяШифрованиеНаКлиенте");
	ТЗ_ПЭД.Колонки.Добавить("ВерсияФорматаПакета");
	ТЗ_ПЭД.Колонки.Добавить("ПрограммаБанка");
	ТЗ_ПЭД.Колонки.Добавить("ТребуетсяИзвещениеОПолучении");
	
	МассивПодготовленныхКОтправкеЭД = Новый Массив;
	
	Для Каждого ЭД Из МассивЭД Цикл
		
		РеквизитыЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЭД, "СтатусЭД, СоглашениеЭД, НаправлениеЭД, ОтправительЭД, ПолучательЭД,
		|ВладелецФайла, ТипЭлементаВерсииЭД, ТребуетсяИзвещение, ЭлектронныйДокументВладелец");
		
		РеквизитыНастройкиЭДО = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РеквизитыЭД.СоглашениеЭД, "СпособОбменаЭД, ПрограммаБанка");
		
		ДокументНеПодписан = РеквизитыЭД.СтатусЭД = Перечисления.СтатусыЭД.Сформирован
						 ИЛИ РеквизитыЭД.СтатусЭД = Перечисления.СтатусыЭД.Утвержден
						 ИЛИ РеквизитыЭД.СтатусЭД = Перечисления.СтатусыЭД.ЧастичноПодписан;
		Если (ПризнакПодписи И ДокументНеПодписан)
				ИЛИ НЕ УстановленныеПодписиВалидны(ЭД)
				ИЛИ (РеквизитыНастройкиЭДО.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезВебРесурсБанка
					И РеквизитыНастройкиЭДО.ПрограммаБанка = Перечисления.ПрограммыБанка.СбербанкОнлайн) Тогда
			Продолжить;
		КонецЕсли;
		
		Если РеквизитыНастройкиЭДО.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезВебРесурсБанка
			И РеквизитыНастройкиЭДО.ПрограммаБанка = Перечисления.ПрограммыБанка.ОбменЧерезДопОбработку Тогда
			СлужебныйЭДБанка = СлужебныйЭДБанка(ЭД);
			Если Не ЗначениеЗаполнено(СлужебныйЭДБанка) Тогда
				ШаблонСообщения = НСтр("ru = '%1 (подробности см. в Журнале регистрации)'");
				ТекстСообщения = НСтр("ru = 'Невозможно сформировать пакет банка'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ТекстСообщения);
				ВидОперации = НСтр("ru = 'формирование пакета ЭД'");
				ТекстОшибки = НСтр("ru = 'Не найдены дополнительные данные для электронного документа'");
				ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(
													ВидОперации, ТекстОшибки, ТекстСообщения, 1);
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		ВидЭД = Неопределено;
		Если Не ЭлектронныеДокументыСлужебныйВызовСервера.ЭтоСлужебныйДокумент(ЭД) Тогда
			Если ЗначениеЗаполнено(РеквизитыЭД.ЭлектронныйДокументВладелец) Тогда
				ВидЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РеквизитыЭД.ЭлектронныйДокументВладелец, "ВидЭД");
			КонецЕсли;
		КонецЕсли;

		// Для банков получаем настройки соглашения по владельцу.
		Если РеквизитыНастройкиЭДО.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезВебРесурсБанка Тогда
			ПараметрыНастройкиЭДО = ОпределитьНастройкиОбменаЭДПоИсточнику(РеквизитыЭД.ВладелецФайла, , , ЭД);
			
		Иначе
			// Поиск настройки ЭДО для исходящего пакета ЭД.
			Если РеквизитыЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
				ПараметрыНастройкиЭДО = ПолучитьНастройкиОбменаЭДПоИД(РеквизитыЭД.ПолучательЭД, РеквизитыЭД.ОтправительЭД);
			ИначеЕсли РеквизитыЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий Тогда
				ПараметрыНастройкиЭДО = ПолучитьНастройкиОбменаЭДПоИД(РеквизитыЭД.ОтправительЭД, РеквизитыЭД.ПолучательЭД);
			КонецЕсли;
		КонецЕсли;
			
		Попытка
			Если Не ЗначениеЗаполнено(ПараметрыНастройкиЭДО) Тогда
				ШаблонСообщения = НСтр("ru = 'В информационной базе не найдена настройка ЭДО с реквизитами:
				|идентификатор отправителя: %1;
				|идентификатор получателя:  %2.'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
					РеквизитыЭД.ОтправительЭД, РеквизитыЭД.ПолучательЭД);
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;
			
			// Дополним параметры настройки ЭДО реквизитами 
			ПараметрыНастройкиЭДО.Вставить("ТипЭлементаВерсииЭД", РеквизитыЭД.ТипЭлементаВерсииЭД);
			ПараметрыНастройкиЭДО.Вставить("НаправлениеЭД", РеквизитыЭД.НаправлениеЭД);
			
			ПЭД = НайтиСоздатьПакетЭД(ТЗ_ПЭД, ПараметрыНастройкиЭДО, ПараметрыНастройкиЭДО.ТребуетсяИзвещениеОПолучении);
			НоваяСтрока                     = ПЭД.ЭлектронныеДокументы.Добавить();
			НоваяСтрока.ЭлектронныйДокумент = ЭД;
			НоваяСтрока.ОбъектВладелец      = РеквизитыЭД.ВладелецФайла;
			
			Если ЗначениеЗаполнено(СлужебныйЭДБанка) Тогда
				НоваяСтрока                     = ПЭД.ЭлектронныеДокументы.Добавить();
				НоваяСтрока.ЭлектронныйДокумент = СлужебныйЭДБанка;
				НоваяСтрока.ОбъектВладелец      = РеквизитыЭД.ВладелецФайла;
			КонецЕсли;
			
			ПЭД.Записать();
			МассивПодготовленныхКОтправкеЭД.Добавить(ЭД);
		Исключение
			ШаблонСообщения = НСтр("ru = '%1 (подробности см. в Журнале регистрации)'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
				КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'формирование пакета ЭД'"),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
				ТекстСообщения);
		КонецПопытки;
	КонецЦикла;
	
	// Сформируем массив структур для обработки на клиенте
	МассивСтруктурПЭД = Новый Массив;
	Для Каждого ТекСтрока Из ТЗ_ПЭД Цикл
		СтруктураПЭД = Новый Структура;
		СтруктураПЭД.Вставить("ПЭД",                    ТекСтрока.ПЭД);
		СтруктураПЭД.Вставить("АдресРесурсаПолучателя", ТекСтрока.АдресРесурсаПолучателя);
		СтруктураПЭД.Вставить("ТребуетсяШифрованиеНаКлиенте", Ложь);
		Если ТекСтрока.ТребуетсяШифрованиеНаКлиенте = Истина Тогда
			СтруктураПЭД.ТребуетсяШифрованиеНаКлиенте = Истина;
			МассивСтруктурПЭД.Добавить(СтруктураПЭД);
			Продолжить;
		КонецЕсли;
		
		Если (ТекСтрока.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском
			ИЛИ ТекСтрока.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезСервис1СЭДО)
			ИЛИ (ТекСтрока.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезЭлектроннуюПочту
				ИЛИ ТекСтрока.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезКаталог
				ИЛИ ТекСтрока.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезFTP
				И ТекСтрока.ВерсияФорматаПакета <> Перечисления.ВерсииФорматаПакетаЭД.Версия10) Тогда
			
			Если ЭлектронныеДокументыВнутренний.СформироватьЭДПрисоединенныйФайлПакетаОператораЭДО(ТекСтрока.ПЭД, , ТекСтрока.ТребуетсяИзвещениеОПолучении) Тогда
				МассивСтруктурПЭД.Добавить(СтруктураПЭД);
			Иначе
				Для Каждого ЭД Из ТекСтрока.ПЭД.ЭлектронныеДокументы Цикл
					ЭДвМассиве = МассивПодготовленныхКОтправкеЭД.Найти(ЭД.ЭлектронныйДокумент);
					Если ЭДвМассиве <> Неопределено Тогда
						МассивПодготовленныхКОтправкеЭД.Удалить(ЭДвМассиве);
					КонецЕсли;
				КонецЦикла;
				ПЭД = ТекСтрока.ПЭД.ПолучитьОбъект();
				ПЭД.СтатусПакета    = Перечисления.СтатусыПакетовЭД.Отменен;
				ПЭД.ПометкаУдаления = Истина;
				ПЭД.Записать();
			КонецЕсли;
		ИначеЕсли ТекСтрока.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезВебРесурсБанка Тогда
			Если ТекСтрока.ПрограммаБанка = Перечисления.ПрограммыБанка.ОбменЧерезДопОбработку Тогда
				СтруктураПЭД.Вставить("ОтправкаСКлиента");
				МассивСтруктурПЭД.Добавить(СтруктураПЭД);
			Иначе
				СформироватьЭДПрисоединенныйФайлПакетаБанка(ТекСтрока.ПЭД);
				МассивСтруктурПЭД.Добавить(СтруктураПЭД);
			КонецЕсли;
		Иначе
			СформироватьЭДПрисоединенныйФайлПакета(ТекСтрока.ПЭД);
			МассивСтруктурПЭД.Добавить(СтруктураПЭД);
		КонецЕсли;
	КонецЦикла;
	ОбновитьСтатусыЭД(МассивПодготовленныхКОтправкеЭД, ПризнакПодписи);
	
	Возврат МассивСтруктурПЭД;
	
КонецФункции

// Только для внутреннего использования
Функция СформироватьНовыйПакетЭД(СтруктураПараметров) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Попытка
		ПакетЭД                         = Документы.ПакетЭД.СоздатьДокумент();
		ПакетЭД.Дата                    = ТекущаяДатаСеанса();
		ПакетЭД.СтатусПакета            = СтруктураПараметров.СтатусПакета;
		
		ПакетЭД.Направление             = СтруктураПараметров.НаправленияЭД;
		
		ПакетЭД.Контрагент              = СтруктураПараметров.Контрагент;
		ПакетЭД.Организация             = СтруктураПараметров.Организация;
		
		ПакетЭД.Отправитель             = СтруктураПараметров.Отправитель;
		ПакетЭД.Получатель              = СтруктураПараметров.Получатель;
		
		ПакетЭД.ПрофильНастроекЭДО      = СтруктураПараметров.ПрофильНастроекЭДО;
		ПакетЭД.НастройкаЭДО            = СтруктураПараметров.НастройкаЭДО;
		ПакетЭД.СпособОбменаЭД          = СтруктураПараметров.СпособОбменаЭД;
		
		ПакетЭД.ВерсияФорматаПакета     = СтруктураПараметров.ВерсияФорматаПакета;
		
		ПакетЭД.ДанныеЗашифрованы       = СтруктураПараметров.Зашифрован;
		Если СтруктураПараметров.СертификатОрганизацииДляРасшифровки <> Неопределено Тогда
			ПакетЭД.СертификатШифрования = СтруктураПараметров.СертификатОрганизацииДляРасшифровки;
		КонецЕсли;
		
		ПакетЭД.АдресРесурсаКонтрагента = СтруктураПараметров.АдресОтправителя;
		ПакетЭД.АдресРесурсаОрганизации = СтруктураПараметров.АдресПолучателя;
		
		Если СтруктураПараметров.Свойство("ВнешнийУИД") Тогда
			ПакетЭД.ВнешнийУИД          = СтруктураПараметров.ВнешнийУИД;
		КонецЕсли;
		ПакетЭД.Записать();
	Исключение
		ШаблонСообщения = НСтр("ru = '%1 (подробности см. в Журнале регистрации).'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'создание нового ПакетаЭД'"),
																					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
																					ТекстСообщения);
	КонецПопытки;
	
	Возврат ПакетЭД;
	
КонецФункции

// Только для внутреннего использования
Процедура ПоместитьПакетЭДВКонверт(Конверт, АдресЗипКонтейнера) Экспорт
	
	// Так как теперь может быть несколько документов в одном пакете, надо проверять, есть ли
	// уже присоединенные файлы к пакету. Если есть - ничего не делать.
	
	УстановитьПривилегированныйРежим(Истина);
	
	Выборка = ПолучитьВыборкуЭДПоОтбору(Новый Структура("ВладелецФайла", Конверт));
	
	Если ЗначениеЗаполнено(Выборка) И Выборка.Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	
	Файл = Новый Файл(АдресЗипКонтейнера);
	ДвоичныеДанныеФайла = Новый ДвоичныеДанные(АдресЗипКонтейнера);
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайла);
	ДобавленныйФайл = ПрисоединенныеФайлы.ДобавитьФайл(
												Конверт,
												Файл.ИмяБезРасширения,
												СтрЗаменить(Файл.Расширение,".", ""),
												ТекущаяДатаСеанса(),
												ТекущаяДатаСеанса(),
												АдресВоВременномХранилище,
												Неопределено,
												,
												Справочники.ПакетЭДПрисоединенныеФайлы.ПолучитьСсылку());
	
КонецПроцедуры

// Только для внутреннего использования
Процедура ОбновитьСтатусыДокументовПакетаЭД(ПакетЭД, НовыйСтатусПакетаЭД, ДатаИзменения) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если НЕ ЗначениеЗаполнено(ПакетЭД) Тогда
		Возврат;
	КонецЕсли;
	
	Если ПакетЭД.ЭлектронныеДокументы.Количество() = 0 Тогда
		
		ШаблонОшибки = НСтр("ru = 'Документ %1 не был отправлен. Подробнее см. Журнал регистрации'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибки,
					ПакетЭД );
		ШаблонОшибки = НСтр("ru = 'Некорректно заполнен документ %1.
			|Не заполнена табличная часть ""ОбменСКонтрагентами""'");
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибки,
					ПакетЭД );
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(
			НСтр("ru = 'Отправка пакета ЭД и обновление статусов ЭД'"),
			ТекстОшибки,
			ТекстСообщения);
		
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		Для Каждого Документ Из ПакетЭД.ЭлектронныеДокументы Цикл
			Если НовыйСтатусПакетаЭД = Перечисления.СтатусыПакетовЭД.Доставлен Тогда
				ЗаписатьДатуПолучения(Документ.ЭлектронныйДокумент, ДатаИзменения);
			ИначеЕсли НовыйСтатусПакетаЭД = Перечисления.СтатусыПакетовЭД.Отправлен Тогда
				ЗаписатьДатуОтправки(Документ.ЭлектронныйДокумент, ДатаИзменения);
			КонецЕсли;
			ЭлектронныеДокументыСлужебныйВызовСервера.ОбновитьВерсиюЭД(Документ.ЭлектронныйДокумент);
		КонецЦикла;
		ПакетОбъект = ПакетЭД.ПолучитьОбъект();
		ПакетОбъект.СтатусПакета = НовыйСтатусПакетаЭД;
		ПакетОбъект.Записать();
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(
			НСтр("ru = 'смена статуса пакета ЭД и обновление статусов ЭД'"), ТекстОшибки, ТекстСообщения);
	КонецПопытки;

КонецПроцедуры

// Только для внутреннего использования
Функция НемедленнаяОтправкаЭД() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Возврат НЕ Константы.ИспользоватьОтложеннуюОтправкуЭлектронныхДокументов.Получить();
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Распаковка пакетов электронных документов

// Функция определяет настройки обмена ЭД
// по источнику - документу базы данных или по ЭД
//
Функция ОпределитьНастройкиОбменаЭДПоИсточнику(
				Источник,
				ВыводитьСообщения = Истина,
				ПараметрыСертификатов = Неопределено,
				ЭД = Неопределено,
				ВидЭД = Неопределено,
				ФлагДействующиеСоглашения = Истина) Экспорт
	
	Если ЗначениеЗаполнено(ЭД) Тогда
		
		СвойстваДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЭД,
			"ВидЭД, СоглашениеЭД, Контрагент, Организация, ЭлектронныйДокументВладелец");
		
		ПараметрыЭД = ЗаполнитьПараметрыЭДПоИсточнику(Источник, , СвойстваДокумента.ВидЭД);
		
		Если ЗначениеЗаполнено(СвойстваДокумента.СоглашениеЭД) Тогда
			ПараметрыЭД.СоглашениеЭД = СвойстваДокумента.СоглашениеЭД;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ПараметрыЭД.Контрагент) Тогда
			ПараметрыЭД.Контрагент = СвойстваДокумента.Контрагент;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ПараметрыЭД.Организация) Тогда
			ПараметрыЭД.Организация = СвойстваДокумента.Организация;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ПараметрыЭД.ВидЭД) Тогда
			ПараметрыЭД.ВидЭД = СвойстваДокумента.ВидЭД;
		КонецЕсли;
		
		Если СвойстваДокумента.ВидЭД = Перечисления.ВидыЭД.УведомлениеОбУточнении
			ИЛИ СвойстваДокумента.ВидЭД = Перечисления.ВидыЭД.ПредложениеОбАннулировании
			ИЛИ СвойстваДокумента.ВидЭД = Перечисления.ВидыЭД.ИзвещениеОПолучении
			ИЛИ СвойстваДокумента.ВидЭД = Перечисления.ВидыЭД.Подтверждение Тогда
			
			ВидЭДВладельца =  ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СвойстваДокумента.ЭлектронныйДокументВладелец, "ВидЭД");

			Если ВидЭДВладельца = Перечисления.ВидыЭД.ИзвещениеОПолучении
				ИЛИ ВидЭДВладельца = Перечисления.ВидыЭД.ТОРГ12Покупатель
				ИЛИ ВидЭДВладельца = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель Тогда
				
				ВладелецДокументВладелец = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СвойстваДокумента.ЭлектронныйДокументВладелец,
					"ЭлектронныйДокументВладелец");
					
				ВидЭДВладельца = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВладелецДокументВладелец,
					"ВидЭД");
				
			КонецЕсли;
			
			ПараметрыЭД.Вставить("ВидЭДВладельца", ВидЭДВладельца);
			
		КонецЕсли;
		
		ПараметрыЭД.Вставить("УстановленныеПодписи", ЭД.ЭлектронныеЦифровыеПодписи.ВыгрузитьКолонку("Отпечаток"));
	Иначе
		ПараметрыЭД = ЗаполнитьПараметрыЭДПоИсточнику(Источник);
	КонецЕсли;
	
	// Заполним ВидЭД в случае непосредственного выбора пользователем.
	Если ЗначениеЗаполнено(ВидЭД) Тогда
		ПараметрыЭД.ВидЭД = ВидЭД;
	КонецЕсли;
	
	Результат = ОпределитьНастройкиОбменаЭД(ПараметрыЭД, ПараметрыСертификатов, ФлагДействующиеСоглашения);
	
	Если Результат = Неопределено Тогда
		Если ВыводитьСообщения Тогда
			ПараметрыЭД.Удалить("ИмяРеквизитаОрганизации");
			ПараметрыЭД.Удалить("ИмяРеквизитаКонтрагента");
			СообщитьОбОтсутствииСоглашенияЭД(ПараметрыЭД, Источник);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает настройки обмена ЭД по ИД участников.
//
// Параметры
//  ИДОтправителя – строка с уникальный идентификатор отправителя,
//  ИДПолучателя - строка с уникальный идентификатор получателя
//
// Возвращаемое значение:
//  Структуру параметров с настройками обмена
//
Функция ПолучитьНастройкиОбменаЭДПоИД(ИДОтправителя, ИДПолучателя, ВидЭД = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СтруктураВозврата = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НастройкиЭДОИсходящиеДокументы.Ссылка.Организация,
	|	НастройкиЭДОИсходящиеДокументы.Ссылка.Контрагент,
	|	НастройкиЭДОИсходящиеДокументы.Ссылка КАК НастройкаЭДО,
	|	НастройкиЭДОИсходящиеДокументы.СпособОбменаЭД КАК СпособОбменаЭД,
	|	НастройкиЭДОИсходящиеДокументы.ПрофильНастроекЭДО КАК ПрофильНастроекЭД,
	|	НастройкиЭДОИсходящиеДокументы.ПрофильНастроекЭДО.РесурсВходящихДокументов КАК ОбщийРесурсВходящихДокументов,
	|	НастройкиЭДОИсходящиеДокументы.ТребуетсяИзвещениеОПолучении КАК ТребуетсяИзвещениеОПолучении,
	|	НастройкиЭДОИсходящиеДокументы.Ссылка.КаталогВходящихДокументов,
	|	НастройкиЭДОИсходящиеДокументы.Ссылка.КаталогИсходящихДокументов,
	|	НастройкиЭДОИсходящиеДокументы.Ссылка.КаталогВходящихДокументовFTP,
	|	НастройкиЭДОИсходящиеДокументы.Ссылка.КаталогИсходящихДокументовFTP,
	|	НастройкиЭДОИсходящиеДокументы.Ссылка.ЭлектроннаяПочтаКонтрагента,
	|	НастройкиЭДОИсходящиеДокументы.Ссылка.РесурсВходящихДокументов,
	|	НастройкиЭДОИсходящиеДокументы.Ссылка.РесурсИсходящихДокументов,
	|	НастройкиЭДОИсходящиеДокументы.Ссылка.СертификатОрганизацииДляРасшифровки,
	|	НастройкиЭДОИсходящиеДокументы.Ссылка.СертификатКонтрагентаДляШифрования,
	|	НастройкиЭДОИсходящиеДокументы.Ссылка.ВерсияФорматаПакета
	|ИЗ
	|	Справочник.СоглашенияОбИспользованииЭД.ИсходящиеДокументы КАК НастройкиЭДОИсходящиеДокументы
	|ГДЕ
	|	ВЫБОР
	|			КОГДА НЕ &ИдентификаторКонтрагента = НЕОПРЕДЕЛЕНО
	|				ТОГДА НастройкиЭДОИсходящиеДокументы.ИдентификаторКонтрагента = &ИдентификаторКонтрагента
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА НЕ &ИдентификаторОрганизации = НЕОПРЕДЕЛЕНО
	|				ТОГДА НастройкиЭДОИсходящиеДокументы.ИдентификаторОрганизации = &ИдентификаторОрганизации
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И НЕ НастройкиЭДОИсходящиеДокументы.Ссылка.ПометкаУдаления
	|	И НастройкиЭДОИсходящиеДокументы.Ссылка.СтатусПодключения = ЗНАЧЕНИЕ(Перечисление.СтатусыУчастниковОбменаЭД.Присоединен)
	|	И ВЫБОР
	|			КОГДА НЕ &ВидЭД = НЕОПРЕДЕЛЕНО
	|				ТОГДА НастройкиЭДОИсходящиеДокументы.ИсходящийДокумент = &ВидЭД
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ";
	Запрос.УстановитьПараметр("ИдентификаторКонтрагента", ИДПолучателя);
	Запрос.УстановитьПараметр("ИдентификаторОрганизации", ИДОтправителя);
	Запрос.УстановитьПараметр("ВидЭД", ВидЭД);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		СтруктураВозврата = Новый Структура;
		СтруктураВозврата.Вставить("Отправитель",         ИДОтправителя);
		СтруктураВозврата.Вставить("Получатель",          ИДПолучателя);
		СтруктураВозврата.Вставить("Организация",         Выборка.Организация);
		СтруктураВозврата.Вставить("Контрагент",          Выборка.Контрагент);
		СтруктураВозврата.Вставить("ПрофильНастроекЭДО",  Выборка.ПрофильНастроекЭД);
		СтруктураВозврата.Вставить("НастройкаЭДО",        Выборка.НастройкаЭДО);
		СтруктураВозврата.Вставить("СпособОбменаЭД",      Выборка.СпособОбменаЭД);
		СтруктураВозврата.Вставить("СертификатОрганизацииДляРасшифровки", Выборка.СертификатОрганизацииДляРасшифровки);
		СтруктураВозврата.Вставить("СертификатКонтрагентаДляШифрования",  Выборка.СертификатКонтрагентаДляШифрования);
		СтруктураВозврата.Вставить("ВерсияФорматаПакета", Выборка.ВерсияФорматаПакета);
		СтруктураВозврата.Вставить("ТребуетсяИзвещениеОПолучении", Выборка.ТребуетсяИзвещениеОПолучении);
		
		АдресОтправителя = Выборка.РесурсВходящихДокументов;
		АдресПолучателя  = Выборка.РесурсИсходящихДокументов;
		Если Выборка.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезЭлектроннуюПочту Тогда
			АдресОтправителя = Выборка.ОбщийРесурсВходящихДокументов;
			АдресПолучателя  = Выборка.ЭлектроннаяПочтаКонтрагента;
			
		ИначеЕсли Выборка.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезКаталог Тогда
			
			АдресОтправителя = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(
				Выборка.ОбщийРесурсВходящихДокументов, Выборка.КаталогВходящихДокументов);
			АдресПолучателя = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(
				Выборка.ОбщийРесурсВходящихДокументов, Выборка.КаталогИсходящихДокументов);
		
		ИначеЕсли Выборка.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезFTP Тогда
			
			АдресОтправителя = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(
				Выборка.ОбщийРесурсВходящихДокументов, Выборка.КаталогВходящихДокументовFTP);
			АдресПолучателя = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(
				Выборка.ОбщийРесурсВходящихДокументов, Выборка.КаталогИсходящихДокументовFTP)
			
		КонецЕсли;
		СтруктураВозврата.Вставить("АдресОтправителя", АдресОтправителя);
		СтруктураВозврата.Вставить("АдресПолучателя",  АдресПолучателя);
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

// Только для внутреннего использования
Функция ОбработатьПодтвержденияДокументов(ФайлыПакета, СоответствиеФайлПараметры, ПакетЭДОбъект) Экспорт
	
	МассивВозврата = Новый Массив;
	
	// Попытаемся получить настройки криптографии.
	Если ЭлектронныеДокументыСлужебныйВызовСервера.ВыполнятьКриптооперацииНаСервере() Тогда
		Попытка
			НастройкиКриптографии = ЭлектроннаяЦифроваяПодпись.ПолучитьПерсональныеНастройкиРаботыСЭЦПСервер();
			ПровайдерЭЦП = НастройкиКриптографии.ПровайдерЭЦП;
			ПутьМодуляКриптографии = НастройкиКриптографии.ПутьМодуляКриптографии;
			ТипПровайдераЭЦП = НастройкиКриптографии .ТипПровайдераЭЦП;
			
			МенеджерКриптографии = Новый МенеджерКриптографии(ПровайдерЭЦП, ПутьМодуляКриптографии, ТипПровайдераЭЦП);
			МенеджерКриптографии.АлгоритмПодписи     = НастройкиКриптографии.АлгоритмПодписи;
			МенеджерКриптографии.АлгоритмХеширования = НастройкиКриптографии.АлгоритмХеширования;
			МенеджерКриптографии.АлгоритмШифрования  = НастройкиКриптографии.АлгоритмШифрования;
		Исключение
			Возврат МассивВозврата;
		КонецПопытки;
	Иначе
		Возврат МассивВозврата;
	КонецЕсли;
	
	Для Каждого ЭлементСоответствие Из СоответствиеФайлПараметры Цикл
		Если Найти(ЭлементСоответствие.Ключ, ".p7s") > 0 Тогда
			НаправлениеИскомогоДокумента = Перечисления.НаправленияЭД.Исходящий;
			СсылкаНаФайл = ФайлыПакета.Получить(ЭлементСоответствие.Ключ);
			Если СсылкаНаФайл = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ДвоичныеДанныеПодписи = ПолучитьИзВременногоХранилища(СсылкаНаФайл);
		
			СтруктураПараметровПоиска = Новый Структура;
			СтруктураПараметровПоиска.Вставить("УникальныйИД",  ЭлементСоответствие.Значение.УникальныйИД);
			СтруктураПараметровПоиска.Вставить("НаправлениеЭД", НаправлениеИскомогоДокумента);
			ЭлектронныйДокумент = ОпределитьЭлектронныйДокумент(СтруктураПараметровПоиска);
			Если ЕстьТакаяПодпись(ДвоичныеДанныеПодписи , ЭлектронныйДокумент) Тогда
				Продолжить;
			КонецЕсли;
			
			АдресДанныхДокументов = ПолучитьДанныеФайла(ЭлектронныйДокумент).СсылкаНаДвоичныеДанныеФайла;
			ДвоичныеДанныеДокумента = ПолучитьИзВременногоХранилища(АдресДанныхДокументов);
				
			Попытка
				Сертификат = Неопределено;
				МенеджерКриптографии.ПроверитьПодпись(ДвоичныеДанныеДокумента, ДвоичныеДанныеПодписи, Сертификат);
			Исключение
				
				ТекстСообщения = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьСообщениеОбОшибке("114");
				ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ВидОперации = НСтр("ru = 'проверка электронной подписи'");
				ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(ВидОперации,
					ПодробноеПредставлениеОшибки, ТекстСообщения);
			КонецПопытки;
			
			Если Сертификат <> Неопределено Тогда
				ДатаУстановкиПодписи = ДатаУстановкиПодписи(ДвоичныеДанныеПодписи);
				ДатаУстановкиПодписи = ?(ЗначениеЗаполнено(ДатаУстановкиПодписи), ДатаУстановкиПодписи, ТекущаяДатаСеанса());
				ОтпечатокBase64 = Base64Строка(Сертификат.Отпечаток);
				ПредставлениеПользователя = ЭлектроннаяЦифроваяПодписьКлиентСервер.ПолучитьПредставлениеПользователя(Сертификат.Субъект);
				ЭлектроннаяЦифроваяПодпись.ЗанестиИнформациюОПодписи(
												ЭлектронныйДокумент,
												ДвоичныеДанныеПодписи,
												ОтпечатокBase64,
												ДатаУстановкиПодписи,
												"",
												ЭлементСоответствие.Ключ,
												ПредставлениеПользователя,
												Сертификат.Выгрузить());
			КонецЕсли;
			ЭлектронныеДокументыСлужебныйВызовСервера.ОпределитьСтатусыПодписей(ЭлектронныйДокумент);
			
			Попытка
				НачатьТранзакцию();
				СтруктураПараметров = Новый Структура;
				ДопустимыйСтатусЭД = ПолучитьДопустимыйСтатусЭД(Перечисления.СтатусыЭД.ПолученоПодтверждение, ЭлектронныйДокумент);
				СтруктураПараметров.Вставить("СтатусЭД", ДопустимыйСтатусЭД);
				ИзменитьПоСсылкеПрисоединенныйФайл(ЭлектронныйДокумент, СтруктураПараметров, Ложь);
				ЗафиксироватьТранзакцию();
			Исключение
				ОтменитьТранзакцию();
				ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке())
					+ НСтр("ru = ' (подробности см. в Журнале регистрации).'");
				ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(
					НСтр("ru = 'получение подтверждения ЭД'"), ТекстОшибки, ТекстСообщения);
			КонецПопытки;
			
			СтрокаПакетаЭД = ПакетЭДОбъект.ЭлектронныеДокументы.Добавить();
			СтрокаПакетаЭД.ЭлектронныйДокумент = "Подтверждение";
			СтрокаПакетаЭД.ОбъектВладелец = ЭлектронныйДокумент.ВладелецФайла;
			МассивВозврата.Добавить(ЭлектронныйДокумент.ВладелецФайла);
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивВозврата;
	
КонецФункции

// Получает текстовое представление электронного документа.
//
// Параметры:
//  СсылкаНаЭД - Ссылка на электронный документ, текстовое представление которого необходимо получить.
//
Функция ПолучитьПредставлениеЭД(СсылкаНаФайлЭД) Экспорт
	
	Если ТипЗнч(СсылкаНаФайлЭД) = Тип("СправочникСсылка.ЭДПрисоединенныеФайлы") Тогда
		
		РеквизитыФайла = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаФайлЭД, "ДатаФормированияЭДОтправителем,
		|НаправлениеЭД, ТипЭлементаВерсииЭД, ВладелецФайла, ДатаСоздания");
		
		РеквизитыЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РеквизитыФайла.ВладелецФайла, "НомерВерсииЭД,
		|ВидЭД, ДатаДокументаОтправителя, НомерДокументаОтправителя, Номер, Дата");
		
		Версия = РеквизитыЭД.НомерВерсииЭД;
		Если РеквизитыФайла.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий 
			И ЗначениеЗаполнено(РеквизитыФайла.ДатаФормированияЭДОтправителем) Тогда
			Версия = РеквизитыФайла.ДатаФормированияЭДОтправителем;
		ИначеЕсли РеквизитыФайла.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий
			И ЗначениеЗаполнено(РеквизитыФайла.ДатаСоздания) Тогда
			Версия = РеквизитыФайла.ДатаСоздания;
		КонецЕсли;
		
		ТекстВерсии = ?(ЗначениеЗаполнено(Версия), " (версия " + Версия + ")", "");
		
		ТекстДаты = ?(ЗначениеЗаполнено(РеквизитыЭД.ДатаДокументаОтправителя),
		" " + "от" + " " + Формат(РеквизитыЭД.ДатаДокументаОтправителя, "ДЛФ=D"), " " + "от" + " " + Формат(РеквизитыЭД.Дата, "ДЛФ=D"));
		
		Если РеквизитыЭД.ВидЭД = Перечисления.ВидыЭД.КаталогТоваров ИЛИ РеквизитыЭД.ВидЭД = Перечисления.ВидыЭД.ПрайсЛист Тогда
			Представление = "" + РеквизитыЭД.ВидЭД + ТекстДаты + ТекстВерсии;
		ИначеЕсли  ЭтоИзвещениеОПолучении(РеквизитыФайла.ТипЭлементаВерсииЭД)
			ИЛИ ЭтоПодтверждение(РеквизитыФайла.ТипЭлементаВерсииЭД)
			ИЛИ ЭтоУведомлениеОбУточнении(РеквизитыФайла.ТипЭлементаВерсииЭД)  Тогда
			Представление = "" + РеквизитыФайла.ТипЭлементаВерсииЭД + ТекстДаты;
		ИначеЕсли РеквизитыЭД.ВидЭД = Перечисления.ВидыЭД.СчетФактура
			ИЛИ РеквизитыЭД.ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура Тогда
			Представление = "" + РеквизитыЭД.ВидЭД + " № " + РеквизитыЭД.НомерДокументаОтправителя + ТекстДаты;
		Иначе
			НомерДокумента = ?(ЗначениеЗаполнено(РеквизитыЭД.НомерДокументаОтправителя), РеквизитыЭД.НомерДокументаОтправителя, РеквизитыЭД.Номер);
			Представление = "" + РеквизитыЭД.ВидЭД + " "+"№"+" " + НомерДокумента + " " +ТекстДаты
			+ ТекстВерсии;
		КонецЕсли;
		
	Иначе
		
		РеквизитыЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаФайлЭД, "НомерВерсииЭД,
		|ВидЭД, ДатаДокументаОтправителя, НомерДокументаОтправителя, ТипЭлементаВерсииЭД, Номер, Дата");
		
		Версия = РеквизитыЭД.НомерВерсииЭД;
		ТекстВерсии = ?(ЗначениеЗаполнено(Версия), " (версия " + Версия + ")", "");
		ТекстДаты = ?(ЗначениеЗаполнено(РеквизитыЭД.ДатаДокументаОтправителя),
		" от " + Формат(РеквизитыЭД.ДатаДокументаОтправителя, "ДЛФ=D"), "");
		
		Если РеквизитыЭД.ВидЭД = Перечисления.ВидыЭД.КаталогТоваров ИЛИ РеквизитыЭД.ВидЭД = Перечисления.ВидыЭД.ПрайсЛист Тогда
			Представление = "" + РеквизитыЭД.ВидЭД + ТекстДаты + ТекстВерсии;
		ИначеЕсли РеквизитыЭД.ВидЭД = Перечисления.ВидыЭД.СчетФактура
			ИЛИ РеквизитыЭД.ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура Тогда
			Представление = "" + РеквизитыЭД.ВидЭД + " № " + РеквизитыЭД.НомерДокументаОтправителя + ТекстДаты;
		ИначеЕсли РеквизитыЭД.ВидЭД = Перечисления.ВидыЭД.ПроизвольныйЭД Тогда
			ТекстЗаголовка = НСтр("ru = 'Произвольный документ %1 от %2'");
			Представление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ТекстЗаголовка, РеквизитыЭД.Номер, РеквизитыЭД.Дата);
			
		ИначеЕсли РеквизитыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.СЧФДОПУПД
			ИЛИ РеквизитыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.СЧФУПД
			ИЛИ РеквизитыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДОПУПД
			ИЛИ РеквизитыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.КСЧФДИСУКД
			ИЛИ РеквизитыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.КСЧФУКД
			ИЛИ РеквизитыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДИСУКД Тогда
			
			Представление = НСтр("ru = 'Информация продавца №'") + " " + РеквизитыЭД.НомерДокументаОтправителя + ТекстДаты;
		Иначе
			Представление = "" + РеквизитыЭД.ВидЭД + " № " + РеквизитыЭД.НомерДокументаОтправителя + ТекстДаты
			+ ТекстВерсии;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Представление;
	
КонецФункции

// Определяет состояние версии электронного документа на основании статуса текущего электронного документа.
//
// Параметры:
//  СсылкаНаЭД - СправочникСсылка.ЭДПрисоединенныеФайлы, ссылка на электронный документ.
//
Функция ОпределитьСостояниеВерсииПоСтатусуЭД(СсылкаНаЭД, ВерсияФорматаПакетаЭД = Неопределено, ПринудительнаяСменаСостояния = Ложь,
	ОтклонениеАннулирования = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВозвращаемоеЗначение = Неопределено;
	
	Если СсылкаНаЭД = Неопределено Или СсылкаНаЭД = Справочники.ЭДПрисоединенныеФайлы.ПустаяСсылка() Тогда
		ВозвращаемоеЗначение = Перечисления.СостоянияВерсийЭД.НеСформирован;
	Иначе
		РеквизитыФайлаЭД = ЭлектронныеДокументыСлужебный.ЗначенияРеквизитовОбъектаИлиСсылки(СсылкаНаЭД, 
			"ТипЭлементаВерсииЭД, СтатусЭД, ВладелецФайла");
		РеквизитыВладельцаЭД = ЭлектронныеДокументыСлужебный.ЗначенияРеквизитовОбъектаИлиСсылки(РеквизитыФайлаЭД.ВладелецФайла, 
			"СостояниеЭДО, ВидЭД");
		Если ЗначениеЗаполнено(РеквизитыФайлаЭД.ТипЭлементаВерсииЭД) 
			И НЕ РеквизитыФайлаЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДополнительныйЭД  Тогда
			 
			ТекущийСтатус = РеквизитыФайлаЭД.СтатусЭД;
			
			НастройкиОбмена = НастройкиОбменаЭД(СсылкаНаЭД);
			
			Если ТекущийСтатус = Перечисления.СтатусыЭД.ОшибкаПередачи Тогда
				ВозвращаемоеЗначение = Перечисления.СостоянияВерсийЭД.ОшибкаПередачи;
			ИначеЕсли ТекущийСтатус = Перечисления.СтатусыЭД.Отклонен
				ИЛИ ТекущийСтатус = Перечисления.СтатусыЭД.ОтклоненПолучателем Тогда
				
				Если НастройкиОбмена.СпособОбмена = Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском
					ИЛИ НастройкиОбмена.СпособОбмена = Перечисления.СпособыОбменаЭД.ЧерезСервис1СЭДО
					ИЛИ НастройкиОбмена.Направление = Перечисления.НаправленияЭД.Входящий Тогда
					
					Если НастройкиОбмена.Направление = Перечисления.НаправленияЭД.Исходящий Тогда
						
						// Если отклонение пришло с другой стороны, надо править документ.
						Если ТекущийСтатус = Перечисления.СтатусыЭД.ОтклоненПолучателем Тогда
							ВозвращаемоеЗначение = Перечисления.СостоянияВерсийЭД.ТребуетсяУточнитьДокумент;
						// Если статус "отклонен" установлен на стороне отправителя, то дальнейшее поведение зависит от состояния ЭД.
						Иначе	
							// Если документ отклоняется на подписи, отправляем его на исправление.
							Если РеквизитыВладельцаЭД.СостояниеЭДО = Перечисления.СостоянияВерсийЭД.НаПодписи Тогда
								ВозвращаемоеЗначение = Перечисления.СостоянияВерсийЭД.ТребуетсяУточнитьДокумент;
							// Из любого другого состояния закрываем документооборот.
							Иначе
								ВозвращаемоеЗначение = Перечисления.СостоянияВерсийЭД.Отклонен;
							КонецЕсли;
						КонецЕсли;
						
					ИначеЕсли НастройкиОбмена.Направление = Перечисления.НаправленияЭД.Входящий
						И ТекущийСтатус = Перечисления.СтатусыЭД.Отклонен
						И НЕ ЭтоФНС(РеквизитыВладельцаЭД.ВидЭД) Тогда
						ВозвращаемоеЗначение = Перечисления.СостоянияВерсийЭД.Отклонен;
						
					Иначе
						ВозвращаемоеЗначение = Перечисления.СостоянияВерсийЭД.ОжидаетсяКорректировка;
					КонецЕсли;
					
				Иначе
					Если ТекущийСтатус = Перечисления.СтатусыЭД.ОтклоненПолучателем Тогда
						ВозвращаемоеЗначение = Перечисления.СостоянияВерсийЭД.ТребуетсяУточнитьДокумент;
					Иначе
						Если НастройкиОбмена.Направление = Перечисления.НаправленияЭД.Исходящий Тогда
							ВозвращаемоеЗначение = Перечисления.СостоянияВерсийЭД.ТребуетсяУточнитьДокумент;
						Иначе
							ВозвращаемоеЗначение = Перечисления.СостоянияВерсийЭД.Отклонен;	
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			ИначеЕсли ТекущийСтатус = Перечисления.СтатусыЭД.СформированоПредложениеОбАннулировании Тогда
				ВозвращаемоеЗначение = Перечисления.СостоянияВерсийЭД.ОжидаетсяАннулирование;
			ИначеЕсли ТекущийСтатус = Перечисления.СтатусыЭД.ПолученоПредложениеОбАннулировании Тогда
				ВозвращаемоеЗначение = Перечисления.СостоянияВерсийЭД.ТребуетсяАннулировать;
			ИначеЕсли ТекущийСтатус = Перечисления.СтатусыЭД.Аннулирован Тогда
				ВозвращаемоеЗначение = Перечисления.СостоянияВерсийЭД.Аннулирован;
			ИначеЕсли НастройкиОбмена <> Неопределено Тогда
				
				Если ВерсияФорматаПакетаЭД = Неопределено Тогда
					ВерсияФорматаПакетаЭД = ВерсияПакетаЭД(СсылкаНаЭД);
				КонецЕсли;
				
				Если ВерсияФорматаПакетаЭД = Перечисления.ВерсииФорматаПакетаЭД.Версия30
					ИЛИ НастройкиОбмена.СпособОбмена = Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском
					ИЛИ НастройкиОбмена.СпособОбмена = Перечисления.СпособыОбменаЭД.ЧерезСервис1СЭДО Тогда
					
					// Если у документа владельца ЭД есть неотправленное подтверждение о получении, то меняем состояние версии ЭД.
					Если (ТекущийСтатус = Перечисления.СтатусыЭД.Получен 
							И НЕ ЭлектронныеДокументыСлужебныйВызовСервера.ЭтоСлужебныйДокумент(РеквизитыФайлаЭД.ТипЭлементаВерсииЭД)
							И ЭтоСчетНаОплату(РеквизитыФайлаЭД.ВладелецФайла))
						
						Или ЭтоОтветныйТитул(РеквизитыФайлаЭД.ТипЭлементаВерсииЭД)
						// Последний статус для фнс документов через оператора.
						И (ТекущийСтатус = Перечисления.СтатусыЭД.ПереданОператору
						// Последний статус для фнс документов через прямой обмен.
						ИЛИ ТекущийСтатус = Перечисления.СтатусыЭД.Отправлен)
						
						// Для CML документов последний статус.
						Или (ТекущийСтатус = Перечисления.СтатусыЭД.ОтправленоПодтверждение
						И НЕ ЭтоCMLДокумент(РеквизитыФайлаЭД.ВладелецФайла)) Тогда
						
						Если ЕстьНеотправленноеПодтверждение(РеквизитыФайлаЭД.ВладелецФайла, ВозвращаемоеЗначение) Тогда
							Возврат ВозвращаемоеЗначение;
						КонецЕсли;
						
					КонецЕсли;
					
					
				КонецЕсли;
				
				МассивСтатусов = ВернутьМассивСтатусовЭД(НастройкиОбмена);
				Если МассивСтатусов.Количество() > 0 Тогда
					
					ИндексТекущегоСтатуса = МассивСтатусов.Найти(ТекущийСтатус);
					Если ИндексТекущегоСтатуса = Неопределено Тогда
					ИначеЕсли ИндексТекущегоСтатуса + 1 = МассивСтатусов.Количество() Тогда
						
						Если ТекущийСтатус = Перечисления.СтатусыЭД.Утвержден 
							И НастройкиОбмена.Направление = Перечисления.НаправленияЭД.Входящий 
							И НастройкиОбмена.ИспользоватьПодпись
							И НастройкиОбмена.ТребуетсяПодтверждение
							И ЭтоТитулФНС(НастройкиОбмена) Тогда
							ВозвращаемоеЗначение = Перечисления.СостоянияВерсийЭД.НаПодписи;
							
						Иначе
							
							ВозвращаемоеЗначение = Перечисления.СостоянияВерсийЭД.ОбменЗавершен;
							
						КонецЕсли;
					Иначе
						
						СпособОбмена = Неопределено;
						ПрофильНастроек = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РеквизитыФайлаЭД.ВладелецФайла, "ПрофильНастроекЭДО");
						Если ПрофильНастроек <> Неопределено Тогда
							СпособОбмена = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПрофильНастроек, "СпособОбменаЭД");
						КонецЕсли;
						
						СледующийСтатус = МассивСтатусов[ИндексТекущегоСтатуса + 1];
						Если СледующийСтатус = Перечисления.СтатусыЭД.Утвержден Тогда
							
							ВозвращаемоеЗначение = Перечисления.СостоянияВерсийЭД.НаУтверждении;
							
						ИначеЕсли СледующийСтатус = Перечисления.СтатусыЭД.Подписан
							ИЛИ СледующийСтатус = Перечисления.СтатусыЭД.ПолностьюПодписан
							ИЛИ СледующийСтатус = Перечисления.СтатусыЭД.ЧастичноПодписан Тогда
							
							ВозвращаемоеЗначение = Перечисления.СостоянияВерсийЭД.НаПодписи;
							
						ИначеЕсли СледующийСтатус = Перечисления.СтатусыЭД.Отправлен
							И Не ЭлектронныеДокументыСлужебныйВызовСервера.ЭтоПрямойОбмен(СпособОбмена) Тогда
							
							ВозвращаемоеЗначение = Перечисления.СостоянияВерсийЭД.ОжидаетсяОтправкаПолучателю;
							
						ИначеЕсли СледующийСтатус = Перечисления.СтатусыЭД.ПереданОператору Тогда
							
							ВозвращаемоеЗначение = Перечисления.СостоянияВерсийЭД.ОжидаетсяПередачаОператору;
							
						ИначеЕсли СледующийСтатус = Перечисления.СтатусыЭД.Отправлен
							ИЛИ СледующийСтатус = Перечисления.СтатусыЭД.ОтправленоПодтверждение
							ИЛИ СледующийСтатус = Перечисления.СтатусыЭД.ПодготовленКОтправке Тогда
							
							ВозвращаемоеЗначение = Перечисления.СостоянияВерсийЭД.ОжидаетсяОтправка;
							
						ИначеЕсли СледующийСтатус = Перечисления.СтатусыЭД.Доставлен
							ИЛИ СледующийСтатус = Перечисления.СтатусыЭД.ДоставленоПодтверждение Тогда
							
							ВозвращаемоеЗначение = Перечисления.СостоянияВерсийЭД.ОжидаетсяИзвещениеОПолучении;
							
						ИначеЕсли СледующийСтатус = Перечисления.СтатусыЭД.ПолученоПодтверждение Тогда
							
							ВозвращаемоеЗначение = Перечисления.СостоянияВерсийЭД.ОжидаетсяПодтверждение;
							
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Определяет, все ли установленные на ЭД подписи являются валидными
//
// Параметры: 
// ЭД - СправочникСсылка.ЭДПрисоединенныеФайлы, ссылка на электронный документ.
//
Функция УстановленныеПодписиВалидны(ЭД) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЭДПрисоединенныеФайлыЭлектронныеЦифровыеПодписи.ПодписьВерна
	|ИЗ
	|	Справочник.ЭДПрисоединенныеФайлы.ЭлектронныеЦифровыеПодписи КАК ЭДПрисоединенныеФайлыЭлектронныеЦифровыеПодписи
	|ГДЕ
	|	ЭДПрисоединенныеФайлыЭлектронныеЦифровыеПодписи.Ссылка = &Ссылка
	|	И НЕ ЭДПрисоединенныеФайлыЭлектронныеЦифровыеПодписи.ПодписьВерна";
	Запрос.УстановитьПараметр("Ссылка", ЭД);
	
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		ШаблонТекста = НСтр("ru = 'Обработка электронного документа %1.
		|Документ не обработан, так как содержит невалидные подписи.'");
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонТекста, ЭД);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
		
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Определяет возможно ли без ошибки извлечь файлы из архива
// Проверяется максимальная длина полного имени файла в 255 символов
// 
// Параметры:
//  ZipЧтение - ЧтениеZIPФайла - открытий zip архив
//  ПапкаРаспаковки - папка, в которую будут извлечены данные
//  ИмяСоздаваемогоФайла - имя файла, который не может быть извлечен
//
// Возвращаемое значение:
//  Булево 
//
Функция ВозможноИзвлечьФайлы(ZipЧтение, ПапкаРаспаковки, ИмяСоздаваемогоФайла="") Экспорт
	
	ДлинаПутиПапки = СтрДлина(ПапкаРаспаковки);
	
	Для Каждого Элемент Из ZipЧтение.Элементы Цикл
		ИмяФайла = Элемент.ПолноеИмя;
		ДлинаИмениФайла = СтрДлина(ИмяФайла);
		ПолнаяДлина = ДлинаПутиПапки + ДлинаИмениФайла + 1;
		Если ПолнаяДлина > 255 Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обработка электронных документов

// Только для внутреннего использования
Функция ОтправкаСформированныхЭД(СоотвСоглашенийИСтруктурСертификатов = Неопределено) Экспорт
	
	Результат = 0;
	// Создадим и заполним документы ПакетыЭД
	ГотовыеКОтправкеПакеты = ОпределитьПодготовленныеКОтправкеЭД();
	Если ЗначениеЗаполнено(ГотовыеКОтправкеПакеты) Тогда
		Результат = ЭлектронныеДокументыСлужебныйВызовСервера.ОтправкаПакетовЭД(ГотовыеКОтправкеПакеты,
																				СоотвСоглашенийИСтруктурСертификатов);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Выполняет получение новых электронных документов
// на основе заведенных соглашений об обмене.
//
Функция ПолучитьНовыеЭД(СоотвСоглашенийИСтруктурСертификатов = Неопределено, ПовторноеПолучение = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("ПараметрыРаспаковки", Новый Массив);
	СтруктураВозврата.Вставить("МассивВозврата", Новый Массив);
	СтруктураВозврата.Вставить("ВызватьОповещение", Ложь);
	СтруктураВозврата.Вставить("Профили", Новый Массив);
	
	Профили = СтруктураВозврата.Профили;
	
	МассивВозврата = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	НастройкиЭДОИсходящиеДокументы.ПрофильНастроекЭДО КАК ПрофильНастроекЭДО,
	|	НастройкиЭДОИсходящиеДокументы.ПрофильНастроекЭДО.СпособОбменаЭД КАК СпособОбменаЭД,
	|	НастройкиЭДОИсходящиеДокументы.ПрофильНастроекЭДО.РесурсВходящихДокументов КАК ОбщийРесурсВходящихДокументов,
	|	НастройкиЭДОИсходящиеДокументы.Ссылка.КаталогВходящихДокументов КАК КаталогВходящихДокументов,
	|	НастройкиЭДОИсходящиеДокументы.Ссылка.КаталогВходящихДокументовFTP КАК КаталогВходящихДокументовFTP
	|ИЗ
	|	Справочник.СоглашенияОбИспользованииЭД.ИсходящиеДокументы КАК НастройкиЭДОИсходящиеДокументы
	|ГДЕ
	|	НЕ НастройкиЭДОИсходящиеДокументы.Ссылка.ПометкаУдаления
	|	И НастройкиЭДОИсходящиеДокументы.Ссылка.СтатусПодключения = ЗНАЧЕНИЕ(Перечисление.СтатусыУчастниковОбменаЭД.Присоединен)";
	
	РесурсыДляПроверки = Запрос.Выполнить().Выгрузить();
	
	ОтборЭП = Новый Структура("СпособОбменаЭД", Перечисления.СпособыОбменаЭД.ЧерезЭлектроннуюПочту);
	МассивРесурсовЭП = РесурсыДляПроверки.НайтиСтроки(ОтборЭП);
	Для Каждого СтрокаРесурсовЭП Из МассивРесурсовЭП Цикл
		Если ПустаяСтрока(СтрокаРесурсовЭП.ОбщийРесурсВходящихДокументов) Тогда
			Продолжить;
		КонецЕсли;
		
		УчетнаяЗаписьЭП = СтрокаРесурсовЭП.ОбщийРесурсВходящихДокументов;
		НаборСообщений = Новый Массив();
		Попытка
			НаборСообщений = ЭлектроннаяПочта.ЗагрузитьПочтовыеСообщения(УчетнаяЗаписьЭП);
		Исключение
			ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			Текст = НСтр("ru = 'Ошибка при получении сообщения с сервера электронной почты.
			|%1'");
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, ТекстОшибки);
			
			ТекстСообщения = НСтр("ru = 'Ошибка при получении новых эл.документов.
			|(подробности см. в Журнале регистрации).'");
			ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(
				НСтр("ru = 'Получение новых эл.документов'"), ТекстОшибки, ТекстСообщения);
			Продолжить;
		КонецПопытки;
		
		Профили.Добавить(СтрокаРесурсовЭП.ПрофильНастроекЭДО);
		
		Для Каждого Сообщение Из НаборСообщений Цикл
			СтруктураПараметров = Новый Структура;
			Если НЕ НеобходимоПолучить(Сообщение, СтруктураПараметров) Тогда
				Продолжить;
			КонецЕсли;
			
			Если Найти(Сообщение.Тема, "Подтверждение получения пакета электронных документов") Тогда
				ОбработатьПодтверждениеПолучения(Сообщение);
				СтруктураВозврата.ВызватьОповещение = Истина;
				Продолжить;
			КонецЕсли;
			
			СтруктураПараметров.Вставить("СтатусПакета",   Перечисления.СтатусыПакетовЭД.КРаспаковке);
			СтруктураПараметров.Вставить("НаправленияЭД",  Перечисления.НаправленияЭД.Входящий);
			ПакетЭД = СформироватьНовыйПакетЭД(СтруктураПараметров);
			
			Для Каждого ЭлементВложенийПисьма Из Сообщение.Вложения Цикл
				
				ДвоичныеДанныеЭлемента = ЭлементВложенийПисьма.Значение;
				АдресВХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанныеЭлемента);
				ПрисоединенныйФайл = ПрисоединенныеФайлы.ДобавитьФайл(
					ПакетЭД.Ссылка, 
					Лев(ЭлементВложенийПисьма.Ключ,
					СтрДлина(ЭлементВложенийПисьма.Ключ) -4), 
					Прав(ЭлементВложенийПисьма.Ключ, 3), 
					ТекущаяДатаСеанса(),
					ТекущаяДатаСеанса(), 
					АдресВХранилище, 
					, 
					, 
					Справочники.ПакетЭДПрисоединенныеФайлы.ПолучитьСсылку());
				
				МассивВозврата.Добавить(ПрисоединенныйФайл);
				
			КонецЦикла;
			
			Если Не СтруктураПараметров.ВерсияФорматаПакета = Перечисления.ВерсииФорматаПакетаЭД.Версия30 Тогда
				
				ОтправитьПодтверждениеПоПакету(ПакетЭД.Ссылка, УчетнаяЗаписьЭП, Сообщение.Отправитель,
												Перечисления.СпособыОбменаЭД.ЧерезЭлектроннуюПочту);
			КонецЕсли;
			
			СтруктураРаспаковки = Новый Структура;
			СтруктураРаспаковки.Вставить("ПакетЭД", ПакетЭД.Ссылка);
			Если СтруктураПараметров.Зашифрован Тогда
				СтруктураШифрования = Новый Структура;
				
				Если ЗначениеЗаполнено(СтруктураПараметров.СертификатОрганизацииДляРасшифровки) Тогда
					СтруктураШифрования.Вставить("Сертификат", СтруктураПараметров.СертификатОрганизацииДляРасшифровки);
					СтруктураШифрования.Вставить("ПараметрыСертификата", ЭлектронныеДокументыСлужебныйВызовСервера.РеквизитыСертификата(
						СтруктураПараметров.СертификатОрганизацииДляРасшифровки));
				Иначе
					ШаблонСообщения = НСтр("ru = 'Не указан сертификат расшифровки для: %1.'");
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ПакетЭД);
					Продолжить;
				КонецЕсли;
			
				СтруктураРаспаковки.Вставить("СтруктураШифрования", СтруктураШифрования);
			КонецЕсли;
			СтруктураРаспаковки.Вставить("ДанныеРаспаковки",
				ЭлектронныеДокументыСлужебныйВызовСервера.ВернутьМассивДвоичныхДанныхПакета(ПакетЭД.Ссылка));
				
			СтруктураВозврата.ПараметрыРаспаковки.Добавить(СтруктураРаспаковки);
		КонецЦикла;
	КонецЦикла;
	
	ОтборКаталог = Новый Структура("СпособОбменаЭД", Перечисления.СпособыОбменаЭД.ЧерезКаталог);
	МассивРесурсовКаталоги = РесурсыДляПроверки.НайтиСтроки(ОтборКаталог);
	Для Каждого СтрокаРесурсовКаталог Из МассивРесурсовКаталоги Цикл
		КаталогСФайлами = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(
			СтрокаРесурсовКаталог.ОбщийРесурсВходящихДокументов, СтрокаРесурсовКаталог.КаталогВходящихДокументов);
			
		Профили.Добавить(СтрокаРесурсовКаталог.ПрофильНастроекЭДО);
		
		МассивИменФайлов = Новый Массив;
		МассивФайлов = НайтиФайлы(КаталогСФайлами, "*");
		Для Каждого ЭлементФайл Из МассивФайлов Цикл
			Если ЭлементФайл.ЭтоКаталог() Тогда
				Продолжить;
			КонецЕсли;
			
			Если ЭлементФайл.Расширение = ".xml" Тогда
				ОбработатьПодтверждениеПолучения(ЭлементФайл, Истина);
				СтруктураВозврата.ВызватьОповещение = Истина;
				Продолжить;
			КонецЕсли;
			
			Если НЕ ЭлементФайл.Расширение = ".zip" Тогда
				Продолжить;
			КонецЕсли;
			
			СтруктураПараметров = Новый Структура;
			ДвоичныеДанныеЭлемента = Новый ДвоичныеДанные(ЭлементФайл.ПолноеИмя);
			Если Не НеобходимоПолучитьДвоичныеДанные(ДвоичныеДанныеЭлемента, ЭлементФайл.Имя, СтруктураПараметров) Тогда
				УдалитьФайлы(ЭлементФайл.ПолноеИмя);
				Продолжить;
			КонецЕсли;
			
			СтруктураПараметров.Вставить("СтатусПакета",       Перечисления.СтатусыПакетовЭД.КРаспаковке);
			СтруктураПараметров.Вставить("НаправленияЭД",      Перечисления.НаправленияЭД.Входящий);
			ПакетЭД = СформироватьНовыйПакетЭД(СтруктураПараметров);
			
			АдресВХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанныеЭлемента);
			ПрисоединенныйФайл = ПрисоединенныеФайлы.ДобавитьФайл(
				ПакетЭД.Ссылка, 
				Лев(ЭлементФайл.Имя,
				СтрДлина(ЭлементФайл.Имя) -4), 
				Прав(ЭлементФайл.Имя, 3), 
				ТекущаяДатаСеанса(), 
				ТекущаяДатаСеанса(),
				АдресВХранилище,
				, 
				, 
				Справочники.ПакетЭДПрисоединенныеФайлы.ПолучитьСсылку());
			
			МассивВозврата.Добавить(ПрисоединенныйФайл);
			
			Если Не СтруктураПараметров.ВерсияФорматаПакета = Перечисления.ВерсииФорматаПакетаЭД.Версия30 Тогда
				
				ОтправитьПодтверждениеПоПакету(ПакетЭД.Ссылка, СтрокаРесурсовКаталог, СтруктураПараметров.АдресОтправителя,
											  Перечисления.СпособыОбменаЭД.ЧерезКаталог);
			КонецЕсли;
			
			УдалитьФайлы(ЭлементФайл.ПолноеИмя);
			
			СтруктураРаспаковки = Новый Структура;
			СтруктураРаспаковки.Вставить("ПакетЭД", ПакетЭД.Ссылка);
			Если СтруктураПараметров.Зашифрован Тогда
				СтруктураШифрования = Новый Структура;
				
				Если ЗначениеЗаполнено(СтруктураПараметров.СертификатОрганизацииДляРасшифровки) Тогда
					СтруктураШифрования.Вставить("Сертификат", СтруктураПараметров.СертификатОрганизацииДляРасшифровки);
					СтруктураШифрования.Вставить("ПараметрыСертификата", ЭлектронныеДокументыСлужебныйВызовСервера.РеквизитыСертификата(
						СтруктураПараметров.СертификатОрганизацииДляРасшифровки));
				Иначе
					ШаблонСообщения = НСтр("ru = 'Не указан сертификат расшифровки для: %1.'");
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ПакетЭД);
					Продолжить;
				КонецЕсли;
			
				СтруктураРаспаковки.Вставить("СтруктураШифрования", СтруктураШифрования);
			КонецЕсли;
			СтруктураРаспаковки.Вставить("ДанныеРаспаковки",
				ЭлектронныеДокументыСлужебныйВызовСервера.ВернутьМассивДвоичныхДанныхПакета(ПакетЭД.Ссылка));
				
			СтруктураВозврата.ПараметрыРаспаковки.Добавить(СтруктураРаспаковки);
		КонецЦикла;
	КонецЦикла;
	
	ОтборFTP = Новый Структура("СпособОбменаЭД", Перечисления.СпособыОбменаЭД.ЧерезFTP);
	МассивРесурсовFTP = РесурсыДляПроверки.НайтиСтроки(ОтборFTP);
	Для Каждого СтрокаРесурсовFTP Из МассивРесурсовFTP Цикл
		ПрофильНастроекЭДО = СтрокаРесурсовFTP.ПрофильНастроекЭДО;
		FTPСоединение = ПолучитьFTPСоединение(ПрофильНастроекЭДО);
		Если FTPСоединение = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		КаталогВхДокументов = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(
			СтрокаРесурсовFTP.ОбщийРесурсВходящихДокументов, СтрокаРесурсовFTP.КаталогВходящихДокументовFTP);
			
		МассивИменФайлов = Новый Массив;
		МассивФайловFTP = Новый Массив;
		ТекстОшибки = "";
		ПодготовитьПутьFTP(КаталогВхДокументов);
		Попытка
			FTPСоединение.УстановитьТекущийКаталог(КаталогВхДокументов);
		Исключение
			Продолжить;
		КонецПопытки;
		НайтиФайлыВКаталогеFTP(FTPСоединение, КаталогВхДокументов, "*", Ложь, ТекстОшибки, МассивФайловFTP);
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого ФайлFTP Из МассивФайловFTP Цикл
			Если ФайлFTP.ЭтоКаталог() Тогда
				Продолжить;
			КонецЕсли;
			ВремКаталог = РабочийКаталог("ext", Новый УникальныйИдентификатор);
			ПолноеИмяФайла = ВремКаталог + ФайлFTP.Имя;
			ПолучитьФайлСFTP(FTPСоединение, ФайлFTP.ПолноеИмя, ПолноеИмяФайла, , ТекстОшибки);
			Если ЗначениеЗаполнено(ТекстОшибки) Тогда
				УдалитьФайлы(ВремКаталог);
				Продолжить;
			КонецЕсли;
			ЭлементФайл = Новый Файл(ПолноеИмяФайла);
			ДвоичныеДанныеЭлемента = Новый ДвоичныеДанные(ЭлементФайл.ПолноеИмя);
			СтруктураПараметров = Новый Структура;
			
			Если ЭлементФайл.Расширение = ".xml" Тогда
				ОбработатьПодтверждениеПолучения(ЭлементФайл, Истина);
				СтруктураВозврата.ВызватьОповещение = Истина;
				УдалитьФайлFTP(FTPСоединение, ФайлFTP.ПолноеИмя);
				УдалитьФайлы(ВремКаталог);
				Продолжить;
			КонецЕсли;
			
			УдалитьФайлы(ВремКаталог);

			Если НЕ ЭлементФайл.Расширение = ".zip" Тогда
				Продолжить;
			КонецЕсли;
			
			Если НЕ НеобходимоПолучитьДвоичныеДанные(ДвоичныеДанныеЭлемента, ЭлементФайл.Имя, СтруктураПараметров) Тогда
				УдалитьФайлFTP(FTPСоединение, ФайлFTP.ПолноеИмя);
				УдалитьФайлы(ВремКаталог);
				Продолжить;
			КонецЕсли;
			
			СтруктураПараметров.Вставить("СтатусПакета",   Перечисления.СтатусыПакетовЭД.КРаспаковке);
			СтруктураПараметров.Вставить("НаправленияЭД",  Перечисления.НаправленияЭД.Входящий);
			ПакетЭД = СформироватьНовыйПакетЭД(СтруктураПараметров);
			
			АдресВХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанныеЭлемента);
			ПрисоединенныйФайл = ПрисоединенныеФайлы.ДобавитьФайл(
				ПакетЭД.Ссылка,
				Лев(ЭлементФайл.Имя, СтрДлина(ЭлементФайл.Имя) -4),
				Прав(ЭлементФайл.Имя, 3),
				ТекущаяДатаСеанса(),
				ТекущаяДатаСеанса(),
				АдресВХранилище,
				,
				,
				Справочники.ПакетЭДПрисоединенныеФайлы.ПолучитьСсылку());
			
			МассивВозврата.Добавить(ПрисоединенныйФайл);
			
			Если СтруктураПараметров.ВерсияФорматаПакета = Перечисления.ВерсииФорматаПакетаЭД.Версия30 Тогда
				
				ОтправитьПодтверждениеПоПакету(ПакетЭД.Ссылка, СтрокаРесурсовFTP, СтруктураПараметров.АдресОтправителя,
											   Перечисления.СпособыОбменаЭД.ЧерезFTP);
				УдалитьФайлFTP(FTPСоединение, ФайлFTP.ПолноеИмя);
				
			КонецЕсли;
			
			СтруктураРаспаковки = Новый Структура;
			СтруктураРаспаковки.Вставить("ПакетЭД", ПакетЭД.Ссылка);
			Если СтруктураПараметров.Зашифрован Тогда
				СтруктураШифрования = Новый Структура;
				
				Если ЗначениеЗаполнено(СтруктураПараметров.СертификатОрганизацииДляРасшифровки) Тогда
					СтруктураШифрования.Вставить("Сертификат", СтруктураПараметров.СертификатОрганизацииДляРасшифровки);
					СтруктураШифрования.Вставить("ПараметрыСертификата", ЭлектронныеДокументыСлужебныйВызовСервера.РеквизитыСертификата(
						СтруктураПараметров.СертификатОрганизацииДляРасшифровки));
				Иначе
					ШаблонСообщения = НСтр("ru = 'Не указан сертификат расшифровки для: %1.'");
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ПакетЭД);
					Продолжить;
				КонецЕсли;
			
				СтруктураРаспаковки.Вставить("СтруктураШифрования", СтруктураШифрования);
			КонецЕсли;
			СтруктураРаспаковки.Вставить("ДанныеРаспаковки",
				ЭлектронныеДокументыСлужебныйВызовСервера.ВернутьМассивДвоичныхДанныхПакета(ПакетЭД.Ссылка));
				
			СтруктураВозврата.ПараметрыРаспаковки.Добавить(СтруктураРаспаковки);
		КонецЦикла;
		
		Профили.Добавить(СтрокаРесурсовFTP.ПрофильНастроекЭДО);
		
	КонецЦикла;

	СтруктураВозврата.МассивВозврата = МассивВозврата;
	
	// Получаем документы из сервисов операторов ЭДО.
	ЭлектронныеДокументыВнутренний.ПолучитьНовыеЭДОператораЭДО(СтруктураВозврата,
		СоотвСоглашенийИСтруктурСертификатов, , ПовторноеПолучение);
		
	Если СтруктураВозврата.Свойство("ИдентификаторыЭДО") Тогда
		ОчиститьИдентификаторыЭДО(СтруктураВозврата.ИдентификаторыЭДО);
		СтруктураВозврата.Вставить("ОбновитьНаличиеЭД", Истина);
	КонецЕсли;
		
	Возврат СтруктураВозврата;
	
КонецФункции

// Определяет параметры электронного документа по типу владельца.
//
// Параметры:
//  Источник - объекта либо ссылка документа/справочника-источника.
//  ФорматCML - булево, если истина, то для формирования ЭД будут использоваться схемы CML (не ФНС),
//    в параметрах должны быть указаны соответствующие виды ЭД.
//
// Возвращаемое значение:
//  ПараметрыЭД - структура параметров источника, необходимых для определения
//  настроек обмена ЭД. Обязательные параметры: НаправлениеЭД, ВидЭД,
//  Контрагент, СоглашениеЭД или Организация.
//
Функция ЗаполнитьПараметрыЭДПоИсточнику(Источник, ФорматCML = Ложь, ВидЭД = Неопределено, БыстрыйОбмен = Ложь) Экспорт
	
	ПараметрыЭД = СтруктураПараметровЭД();
	
	ТипИсточника                = ТипЗнч(Источник);
	РеквизитыИсточника          = Новый Массив;
	ЗначенияРеквизитовИсточника = Новый Структура;
	
	Если ТипИсточника = Тип("СправочникСсылка.СоглашенияОбИспользованииЭД")
		ИЛИ ТипИсточника = Тип("СправочникОбъект.СоглашенияОбИспользованииЭД") Тогда
		
		Если Источник.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезВебРесурсБанка Тогда
			ПараметрыЭД.ВидЭД     = Перечисления.ВидыЭД.ЗапросВыписки;
		Иначе
			ПараметрыЭД.ВидЭД     = Перечисления.ВидыЭД.КаталогТоваров;
		КонецЕсли;
		
		ПараметрыЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий;
		ПараметрыЭД.СоглашениеЭД  = Источник.Ссылка;
		Если Не Источник.ЭтоИнтеркампани Тогда
			
			ПараметрыЭД.Контрагент  = Источник.Контрагент;
			ПараметрыЭД.Организация = Источник.Организация;
		КонецЕсли;
		
	ИначеЕсли ТипИсточника = Тип("СправочникСсылка.Организации")
		Или ТипИсточника = Тип("СправочникОбъект.Организации") Тогда
		
		ПараметрыЭД.ВидЭД = "РеквизитыОрганизации";
		ПараметрыЭД.Организация = Источник;
		ПараметрыЭД.Вставить("РеквизитыОрганизации", Истина);
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.ЭлектронныйДокументВходящий")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.ЭлектронныйДокументВходящий") Тогда
		
		РеквизитыИсточника.Добавить("ВидЭД");
		РеквизитыИсточника.Добавить("Контрагент");
		РеквизитыИсточника.Добавить("Организация");
		РеквизитыИсточника.Добавить("ДоговорКонтрагента");
		РеквизитыИсточника.Добавить("НастройкаЭДО");
		
		ПараметрыЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.ЭлектронныйДокументИсходящий")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.ЭлектронныйДокументИсходящий") Тогда
		
		РеквизитыИсточника.Добавить("ВидЭД");
		РеквизитыИсточника.Добавить("Контрагент");
		РеквизитыИсточника.Добавить("Организация");
		РеквизитыИсточника.Добавить("ДоговорКонтрагента");
		РеквизитыИсточника.Добавить("НастройкаЭДО");
		
		ПараметрыЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий;
	Иначе
		
		ПараметрыЭД.ВидЭД = ВидЭД;
		ЭлектронныеДокументыПереопределяемый.ЗаполнитьПараметрыЭДПоИсточнику(Источник, ПараметрыЭД, ФорматCML);
	КонецЕсли;
	
	Если РеквизитыИсточника.Количество() Тогда
		ЗначенияРеквизитовИсточника = ЗначенияРеквизитовОбъектаИлиСсылки(Источник, РеквизитыИсточника);
		ЗаполнитьЗначенияСвойств(ПараметрыЭД, ЗначенияРеквизитовИсточника);
		
		Если ЗначенияРеквизитовИсточника.Свойство("НастройкаЭДО") Тогда
			ПараметрыЭД.СоглашениеЭД  = ЗначенияРеквизитовИсточника.НастройкаЭДО;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПараметрыЭД.Контрагент) 
		И Не ЗначениеЗаполнено(ПараметрыЭД.Организация) Тогда
		ДополнитьПараметрыЭД(Источник, ПараметрыЭД);
	КонецЕсли;
	
	Если БыстрыйОбмен Тогда
		Возврат ПараметрыЭД;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПараметрыЭД.ВидЭД)
		И ЭлектронныеДокументыСлужебныйВызовСервера.ЕстьПравоЧтенияЭД(Ложь) Тогда
	
		МассивСсылок = Новый Массив;
		МассивСсылок.Добавить(?(ОбщегоНазначения.ЭтоСсылка(ТипИсточника), Источник, Источник.Ссылка));
	
		СоответствиеВладельцевИЭД = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьСоответствиеВладельцевИЭД(МассивСсылок);
		Для Каждого ТекЭл Из МассивСсылок Цикл
			
			СсылкаНаЭД = СоответствиеВладельцевИЭД.Получить(ТекЭл);
			Если ЗначениеЗаполнено(СсылкаНаЭД) Тогда
				Если ТипЗнч(СсылкаНаЭД) = Тип("СправочникСсылка.ЭДПрисоединенныеФайлы") Тогда
					ВладелецЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаЭД, "ВладелецФайла");
					ПараметрыЭД.ВидЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВладелецЭД, "ВидЭД");
				Иначе
					ПараметрыЭД.ВидЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаЭД, "ВидЭД");
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ЭлектронныеДокументы.ИспользованиеУниверсальногоПередаточногоДокумента(ПараметрыЭД.Организация, ПараметрыЭД.Контрагент, ПараметрыЭД.ДоговорКонтрагента) Тогда
		Если ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.АктНаПередачуПрав
			ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.АктИсполнитель
			ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.АктЗаказчик
			ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец
			ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель Тогда
			ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.СчетФактура;
		КонецЕсли;
	КонецЕсли;
	Если ЭлектронныеДокументы.ИспользованиеУниверсальногоКорректировочногоДокумента(ПараметрыЭД.Организация, ПараметрыЭД.Контрагент, ПараметрыЭД.ДоговорКонтрагента) Тогда
		Если ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель
			ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель Тогда
			ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура;
		КонецЕсли;
	КонецЕсли;

	Возврат ПараметрыЭД;
	
КонецФункции

// Изменяет реквизиты элемента справочника ЭДПрисоединенныеФайлы,
//
// Параметры:
//  ДобавленныйФайл - Ссылка на элемент справочника с электронным документом,
//  СтруктураЭД - Структура параметров, которые необходимо заполнить в справочнике.
//
Процедура ИзменитьПоСсылкеПрисоединенныйФайл(
				ДобавленныйФайл,
				СтруктураЭД,
				ПоверятьОбязательныеРеквизиты = Истина) Экспорт
	
	Если Не ЗначениеЗаполнено(ДобавленныйФайл) Тогда 
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	НачатьТранзакцию();
	
	Попытка
	
		Если ПоверятьОбязательныеРеквизиты Тогда
			ТекстОшибки = "";
			СтруктураОбязательныхПолей = Новый Структура("ВладелецЭД, Контрагент, ВидЭД, НаправлениеЭД, СоглашениеЭД");
			Если СтруктураЭД.ВидЭД = Перечисления.ВидыЭД.ПлатежноеПоручение Тогда
				СтруктураОбязательныхПолей.Удалить("Контрагент");
			КонецЕсли;
			Для Каждого КлючЗначение Из СтруктураОбязательныхПолей Цикл
				Значение = Неопределено;
				Если СтруктураЭД.Свойство(КлючЗначение.Ключ, Значение) Тогда
					Если НЕ ЗначениеЗаполнено(Значение) Тогда
						Текст = НСтр("ru = 'Значение параметра <%1> не заполнено!'");
						Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, КлючЗначение.Ключ);
						ТекстОшибки = ?(ЗначениеЗаполнено(ТекстОшибки), ТекстОшибки + Символы.ПС + Текст, Текст);
					КонецЕсли;
				Иначе
					Текст = НСтр("ru = 'Не передан обязательный параметр <%1>!'");
					Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, КлючЗначение.Ключ);
					ТекстОшибки = ?(ЗначениеЗаполнено(ТекстОшибки), ТекстОшибки + Символы.ПС + Текст, Текст);
				КонецЕсли;
			КонецЦикла;
			Если ЗначениеЗаполнено(ТекстОшибки) Тогда
				ТекстСообщения = НСтр("ru = 'Ошибка заполнения доп.свойств электронного документа!
				|%1'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ТекстОшибки);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
		КонецЕсли;
		
		ЭлектронныеДокументыПереопределяемый.ПриИзмененииПрисоединенногоФайла(ДобавленныйФайл, СтруктураЭД);
		
		Блокировка = Новый БлокировкаДанных;
		МетаданныеОбъекта = ДобавленныйФайл.Метаданные();
		ЭлементБлокировки = Блокировка.Добавить(МетаданныеОбъекта.ПолноеИмя());
		ЭлементБлокировки.УстановитьЗначение("Ссылка", ДобавленныйФайл);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		Блокировка.Заблокировать();
		
		ФайлОбъект = ДобавленныйФайл.ПолучитьОбъект();
		ФайлОбъект.Заблокировать();
		
		ПринудительнаяСменаСостоянияВерсии = Ложь;
		
		Если СтруктураЭД.Свойство("Автор") Тогда
			ФайлОбъект.Автор = СтруктураЭД.Автор;
		КонецЕсли;
		
		Если СтруктураЭД.Свойство("ВерсияРегламентаЭДО") Тогда
			ФайлОбъект.ВерсияРегламентаЭДО = СтруктураЭД.ВерсияРегламентаЭДО;
		КонецЕсли;
		
		Если СтруктураЭД.Свойство("ВидЭД") Тогда
			ФайлОбъект.ВидЭД = СтруктураЭД.ВидЭД;
		КонецЕсли;
		
		Если СтруктураЭД.Свойство("ДатаДокументаОтправителя") Тогда
			ФайлОбъект.ДатаДокументаОтправителя = СтруктураЭД.ДатаДокументаОтправителя;
		КонецЕсли;
		
		Если СтруктураЭД.Свойство("ДатаИзмененияСтатусаЭД") Тогда
			ФайлОбъект.ДатаИзмененияСтатусаЭД = СтруктураЭД.ДатаИзмененияСтатусаЭД;
		КонецЕсли;
		
		Если СтруктураЭД.Свойство("ДатаМодификацииУниверсальная") Тогда
			ФайлОбъект.ДатаМодификацииУниверсальная = СтруктураЭД.ДатаМодификацииУниверсальная;
		КонецЕсли;
		
		Если СтруктураЭД.Свойство("ДатаСоздания") Тогда
			ФайлОбъект.ДатаСоздания = СтруктураЭД.ДатаСоздания;
		КонецЕсли;
		
		Если СтруктураЭД.Свойство("ДатаФормированияЭДОтправителем") Тогда
			ФайлОбъект.ДатаФормированияЭДОтправителем = СтруктураЭД.ДатаФормированияЭДОтправителем;
		КонецЕсли;
		
		Если СтруктураЭД.Свойство("ДополнительнаяИнформация") Тогда
			ФайлОбъект.ДополнительнаяИнформация = СтруктураЭД.ДополнительнаяИнформация;
		КонецЕсли;
		
		Если СтруктураЭД.Свойство("ДополнительныеРеквизиты") Тогда
			Если ЗначениеЗаполнено(ФайлОбъект.ДополнительныеРеквизиты) Тогда
				ДополнительныеРеквизиты = ФайлОбъект.ДополнительныеРеквизиты.Получить();
				Если Не ЗначениеЗаполнено(ДополнительныеРеквизиты) Тогда
					ДополнительныеРеквизиты = Новый Структура;
				КонецЕсли;
			Иначе
				ДополнительныеРеквизиты = СтруктураЭД.ДополнительныеРеквизиты;
			КонецЕсли;
			
			Для Каждого КлючЗначение Из СтруктураЭД.ДополнительныеРеквизиты Цикл
				ДополнительныеРеквизиты.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);
			КонецЦикла;
			
			ФайлОбъект.ДополнительныеРеквизиты = Новый ХранилищеЗначения(СтруктураЭД.ДополнительныеРеквизиты);
		КонецЕсли;
		
		ИдентификаторыОснований = Неопределено;
		Если СтруктураЭД.Свойство("ИдентификаторыДокументовИЭДОснований", ИдентификаторыОснований) Тогда
			ФайлОбъект.ИдентификаторыОснованийВладельцаФайла.Очистить();
			Для Каждого СтрокаИдентификатора Из ИдентификаторыОснований Цикл
				НоваяСтрока = ФайлОбъект.ИдентификаторыОснованийВладельцаФайла.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаИдентификатора);
			КонецЦикла;
		КонецЕсли;
		
		Если СтруктураЭД.Свойство("Изменил") Тогда
			ФайлОбъект.Изменил = СтруктураЭД.Изменил;
		КонецЕсли;
		
		Если СтруктураЭД.Свойство("Контрагент") Тогда
			ФайлОбъект.Контрагент = СтруктураЭД.Контрагент;
		КонецЕсли;
		
		Если СтруктураЭД.Свойство("Наименование") Тогда
			ФайлОбъект.Наименование = СтруктураЭД.Наименование;
		КонецЕсли;
		
		Если СтруктураЭД.Свойство("НаименованиеФайла") Тогда
			ФайлОбъект.НаименованиеФайла = СтруктураЭД.НаименованиеФайла;
		КонецЕсли;
		
		Если СтруктураЭД.Свойство("НаправлениеЭД") Тогда
			ФайлОбъект.НаправлениеЭД = СтруктураЭД.НаправлениеЭД;
		КонецЕсли;
		
		Если СтруктураЭД.Свойство("НомерВерсииЭД") Тогда
			ФайлОбъект.НомерВерсииЭД = СтруктураЭД.НомерВерсииЭД;
		ИначеЕсли СтруктураЭД.Свойство("ВладелецЭД") Тогда
			ФайлОбъект.НомерВерсииЭД = НомерВерсииЭДПоВладельцу(СтруктураЭД.ВладелецЭД);
		КонецЕсли;
		
		Если СтруктураЭД.Свойство("НомерДокументаОтправителя") Тогда
			ФайлОбъект.НомерДокументаОтправителя = СтруктураЭД.НомерДокументаОтправителя;
		КонецЕсли;
		
		Если СтруктураЭД.Свойство("НомерЭД") Тогда 
			ФайлОбъект.НомерЭД = СтруктураЭД.НомерЭД;
		КонецЕсли;
		
		Если СтруктураЭД.Свойство("Описание") Тогда
			ФайлОбъект.Описание = СокрЛП(СтруктураЭД.Описание);
		Иначе
			ФайлОбъект.Описание = "";
		КонецЕсли;
		
		Если СтруктураЭД.Свойство("Организация") Тогда
			ФайлОбъект.Организация = СтруктураЭД.Организация;
		КонецЕсли;
		
		Если СтруктураЭД.Свойство("Ответственный") Тогда
			ФайлОбъект.Ответственный = СтруктураЭД.Ответственный;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ФайлОбъект.Ответственный) Тогда
			ФайлОбъект.Ответственный = Пользователи.АвторизованныйПользователь();
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ФайлОбъект.ОтправительЭД) И СтруктураЭД.Свойство("Отправитель") Тогда
			ФайлОбъект.ОтправительЭД = СтруктураЭД.Отправитель;
		КонецЕсли;
		
		Если СтруктураЭД.Свойство("ПодписанныеДанные") Тогда
			ХранилищеПодписанныхДанных = Новый ХранилищеЗначения(СтруктураЭД.ПодписанныеДанные);
			ФайлОбъект.ПодписанныеДанные = ХранилищеПодписанныхДанных;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ФайлОбъект.ПолучательЭД) И СтруктураЭД.Свойство("Получатель") Тогда
			ФайлОбъект.ПолучательЭД = СтруктураЭД.Получатель;
		КонецЕсли;
		
		Если СтруктураЭД.Свойство("ПрофильНастроекЭДО") Тогда
			ФайлОбъект.ПрофильНастроекЭДО = СтруктураЭД.ПрофильНастроекЭДО;
		КонецЕсли;
		
		Если СтруктураЭД.Свойство("Расширение") Тогда
			ФайлОбъект.Расширение = СтруктураЭД.Расширение;
		КонецЕсли;
		
		Если СтруктураЭД.Свойство("СоглашениеЭД") Тогда
			ФайлОбъект.СоглашениеЭД = СтруктураЭД.СоглашениеЭД;
			ФайлОбъект.ДополнительныеСвойства.Вставить("СоглашениеЭД", СтруктураЭД.СоглашениеЭД);
		КонецЕсли;
		
		Если СтруктураЭД.Свойство("СтатусЭД") Тогда
			Если ФайлОбъект.СтатусЭД <> СтруктураЭД.СтатусЭД Тогда
				ПринудительнаяСменаСостоянияВерсии = Истина;
			КонецЕсли;
			ФайлОбъект.СтатусЭД = СтруктураЭД.СтатусЭД;
			ФайлОбъект.ДатаИзмененияСтатусаЭД = ТекущаяДатаСеанса();
		КонецЕсли;
		
		ОбновитьСостояниеЭД = Неопределено;
		Если СтруктураЭД.Свойство("ОбновитьСостояниеЭД", ОбновитьСостояниеЭД)
			И Не ОбновитьСостояниеЭД = Неопределено Тогда
			ПринудительнаяСменаСостоянияВерсии = ОбновитьСостояниеЭД;
		КонецЕсли;
		
		ОтклонениеАннулирования = Ложь;
		Если СтруктураЭД.Свойство("ОтклонениеАннулирования") Тогда
			ОтклонениеАннулирования = Истина;
		КонецЕсли;
		
		Если СтруктураЭД.Свойство("ТекстУточнения") Тогда
			ЗаписатьПричинуОтклонения(ФайлОбъект.ВладелецФайла,СтруктураЭД.ТекстУточнения);
		КонецЕсли;  
		
		Если СтруктураЭД.Свойство("ПричинаОтклонения") Тогда
			ЗаписатьПричинуОтклонения(ФайлОбъект.ВладелецФайла,СтруктураЭД.ПричинаОтклонения);
		КонецЕсли;
		
		Если СтруктураЭД.Свойство("СуммаДокумента") И ЗначениеЗаполнено(СтруктураЭД.СуммаДокумента) Тогда
			ФайлОбъект.СуммаДокумента = СтруктураЭД.СуммаДокумента;
		КонецЕсли;
		
		Если СтруктураЭД.Свойство("ТипЭлементаВерсииЭД") Тогда
			ФайлОбъект.ТипЭлементаВерсииЭД = СтруктураЭД.ТипЭлементаВерсииЭД;
		КонецЕсли;
		
		Если СтруктураЭД.Свойство("УдалитьЭП") Тогда
			ФайлОбъект.ЭлектронныеЦифровыеПодписи.Очистить();
			ФайлОбъект.ПодписанЭЦП = Ложь;
		КонецЕсли;
		
		Если СтруктураЭД.Свойство("УникальныйИД") Тогда
			ФайлОбъект.УникальныйИД = СтруктураЭД.УникальныйИД;
		КонецЕсли;
		
		Если СтруктураЭД.Свойство("УникальныйИДВнешний") Тогда
			ФайлОбъект.УникальныйИДВнешний = СтруктураЭД.УникальныйИДВнешний;
		КонецЕсли;
		
		Если СтруктураЭД.Свойство("ТребуетсяПодтверждение") Тогда
			ФайлОбъект.ТребуетсяПодтверждение = СтруктураЭД.ТребуетсяПодтверждение;
		КонецЕсли;
		
		Если СтруктураЭД.Свойство("ТребуетсяИзвещение") Тогда
			ФайлОбъект.ТребуетсяИзвещение = СтруктураЭД.ТребуетсяИзвещение;
		КонецЕсли;
		
		Если СтруктураЭД.Свойство("ЭлектронныйДокументВладелец") Тогда
			ФайлОбъект.ЭлектронныйДокументВладелец = СтруктураЭД.ЭлектронныйДокументВладелец;
			СтруктураЭД.Вставить(
					"СуммаДокумента",
					ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтруктураЭД.ЭлектронныйДокументВладелец, "СуммаДокумента"));
		КонецЕсли;
		
		Если СтруктураЭД.Свойство("ДатаВыпискиБанка") Тогда
			ФайлОбъект.ДатаВыпискиБанка = СтруктураЭД.ДатаВыпискиБанка;
		КонецЕсли;
		
		ВерсияФорматаПакета = Неопределено;
		СтруктураЭД.Свойство("ВерсияФорматаПакета", ВерсияФорматаПакета);
		
		// Добавим дополнительные свойства, если они переданы.
		ДополнительныеСвойства = Новый Структура;
		Если СтруктураЭД.Свойство("ДополнительныеСвойства", ДополнительныеСвойства) Тогда
			Для Каждого КлючИЗначение Из СтруктураЭД.ДополнительныеСвойства Цикл
				ФайлОбъект.ДополнительныеСвойства.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
			КонецЦикла;
		КонецЕсли;
		
		ФайлОбъект.ДополнительныеСвойства.Вставить("ВерсияФорматаПакета", ВерсияФорматаПакета);
		ФайлОбъект.ДополнительныеСвойства.Вставить("ПринудительнаяСменаСостоянияВерсии", ПринудительнаяСменаСостоянияВерсии);
		ФайлОбъект.ДополнительныеСвойства.Вставить("ОбновитьВерсиюЭД", Истина);
		ФайлОбъект.ДополнительныеСвойства.Вставить("ОтклонениеАннулирования", ОтклонениеАннулирования);
		
		ФайлОбъект.Записать();
		ФайлОбъект.Разблокировать();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

// Возвращает структуру данных файла, полученную из одноименной функции общего модуля ПрисоединенныеФайлы.
// В полученной структуре данных меняет значение элемента с ключом Наименование на полное наименование,
// хранящееся в реквизите элемента справочника НаименованиеФайла, так же заново формирует значениеэлемента ИмяФайла.
// Используется в различных командах работы с файлами,
// и как значение параметра ДанныеФайла других процедур и функций.
//
// Параметры:
//  ПрисоединенныйФайл - Ссылка на присоединенный файл.
//
//  ИдентификаторФормы - УникальныйИдентификатор формы,
//                 используется при получении двоичных данных файла.
//
//  ПолучатьСсылкуНаДвоичныеДанные - Булево - начальное значение Истина,
//                 если передать Ложь, то ссылка на двоичные данные не будет получена,
//                 что существенно ускорит выполнение для больших двоичных данных.
//
// Возвращаемое значение:
//  Структура со свойствами:
//    СсылкаНаДвоичныеДанныеФайла        - Строка - адрес во временном хранилище.
//    ОтносительныйПуть                  - Строка.
//    ДатаМодификацииУниверсальная       - Дата.
//    ИмяФайла                           - Строка.
//    Наименование                       - Строка, соответствует значению реквизита элемента справочника НаименованиеФайла.
//    Расширение                         - Строка.
//    Размер                             - Число.
//    Редактирует                        - СправочникСсылка.Пользователи.
//    ПодписанЭЦП                        - Булево.
//    Зашифрован                         - Булево.
//    ФайлРедактируется                  - Булево.
//    ФайлРедактируетТекущийПользователь - Булево.
// 
Функция ПолучитьДанныеФайла(Знач ПрисоединенныйФайл,
                            Знач ИдентификаторФормы = Неопределено,
                            Знач ПолучатьСсылкуНаДвоичныеДанные = Истина,
							Знач ДляРедактирования = Ложь) Экспорт
	
	ДанныеФайла = ПрисоединенныеФайлы.ПолучитьДанныеФайла(ПрисоединенныйФайл,
		ИдентификаторФормы, ПолучатьСсылкуНаДвоичныеДанные);
		
	Если ТипЗнч(ДанныеФайла) = Тип("Структура") Тогда
		СтруктураПараметров = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПрисоединенныйФайл, "ВидЭД, УникальныйИД, НаименованиеФайла");
		Если ЗначениеЗаполнено(СтруктураПараметров.НаименованиеФайла) Тогда
			ДанныеФайла.Наименование = СокрЛП(СтруктураПараметров.НаименованиеФайла);
			ДанныеФайла.ИмяФайла = ДанныеФайла.Наименование + "." + ДанныеФайла.Расширение;
			НаименованиеСкорректированно = Истина;
		ИначеЕсли СтруктураПараметров.ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура Тогда
			СтрокаУИД = СтруктураПараметров.УникальныйИД;
			Наименование = ДанныеФайла.Наименование;
			ПозицияУИД = Найти(Наименование, "_" + Лев(СтрокаУИД, 35));
			Если ПозицияУИД > 0 Тогда
				ДанныеФайла.Наименование = Лев(Наименование, ПозицияУИД) + СтрокаУИД;
				ДанныеФайла.ИмяФайла = ДанныеФайла.Наименование + "." + ДанныеФайла.Расширение;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ДанныеФайла;
	
КонецФункции

// Только для внутреннего использования
Процедура СохранитьПриглашения(ТаблицаПриглашений) Экспорт
	
	Если ТаблицаПриглашений.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Приглашения.ПрофильНастроекЭДО,
	|	Приглашения.ТекстПриглашения,
	|	Приглашения.Идентификатор,
	|	Приглашения.ВнешнийИД КАК ВнешнийИД,
	|	Приглашения.ИНН КАК ИНН,
	|	Приглашения.КПП,
	|	Приглашения.Состояние,
	|	Приглашения.Наименование,
	|	Приглашения.Изменен КАК Изменен,
	|	Приглашения.ОписаниеОшибки
	|ПОМЕСТИТЬ Приглашения
	|ИЗ
	|	&Приглашения КАК Приглашения
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ИНН,
	|	ВнешнийИД,
	|	Изменен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Приглашения.ПрофильНастроекЭДО,
	|	Приглашения.Идентификатор,
	|	Приглашения.ИНН КАК ИНН,
	|	Приглашения.КПП,
	|	Приглашения.ВнешнийИД КАК ВнешнийИД,
	|	МАКСИМУМ(Приглашения.Изменен) КАК Изменен
	|ПОМЕСТИТЬ ПоследниеИзмененияЗаписей
	|ИЗ
	|	Приглашения КАК Приглашения
	|
	|СГРУППИРОВАТЬ ПО
	|	Приглашения.ПрофильНастроекЭДО,
	|	Приглашения.Идентификатор,
	|	Приглашения.ИНН,
	|	Приглашения.КПП,
	|	Приглашения.ВнешнийИД
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ИНН,
	|	ВнешнийИД,
	|	Изменен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Приглашения.ПрофильНастроекЭДО,
	|	Приглашения.ТекстПриглашения,
	|	Приглашения.Идентификатор,
	|	Приглашения.ВнешнийИД,
	|	Приглашения.ИНН,
	|	Приглашения.КПП,
	|	Приглашения.Наименование,
	|	Приглашения.Изменен КАК Изменен,
	|	Приглашения.ОписаниеОшибки,
	|	Приглашения.Состояние КАК СтатусУчастника
	|ИЗ
	|	ПоследниеИзмененияЗаписей КАК ПоследниеИзмененияЗаписей
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Приглашения КАК Приглашения
	|		ПО ПоследниеИзмененияЗаписей.ПрофильНастроекЭДО = Приглашения.ПрофильНастроекЭДО
	|			И ПоследниеИзмененияЗаписей.Идентификатор = Приглашения.Идентификатор
	|			И ПоследниеИзмененияЗаписей.ИНН = Приглашения.ИНН
	|			И ПоследниеИзмененияЗаписей.Изменен = Приглашения.Изменен
	|			И ПоследниеИзмененияЗаписей.ВнешнийИД = Приглашения.ВнешнийИД
	|
	|УПОРЯДОЧИТЬ ПО
	|	Изменен";
	Запрос.УстановитьПараметр("Приглашения", ТаблицаПриглашений);
	
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		
		УстановитьПривилегированныйРежим(Истина); // Приглашения сохранять можно с любыми правами, а вот принимать нет.
		
		ТЗПоследнихИзменений = Результат.Выгрузить();
		
		// В случае ошибки, содержащейся в запросе на присоединение контрагента,
		// Такском возвращает запись с указанием ошибки, но без КПП. В результате
		// запрос может вернуть 2 записи по одному контрагенту (ИНН и ВнешнийИД совпадают,
		// а КПП в одной записи пустой, а в другой заполнен). Чтобы не вводить в заблуждение
		// пользователей, одну запись (более раннюю) надо удалить.
		Для Сч = -ТЗПоследнихИзменений.Количество() + 1 По 0 Цикл
			СтрокаТЗ = ТЗПоследнихИзменений[-Сч];
			Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТЗ.ПрофильНастроекЭДО,
				"СпособОбменаЭД") = Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском Тогда
				
				Отбор = Новый Структура("ИНН, ВнешнийИД, ПрофильНастроекЭДО", СтрокаТЗ.ИНН, СтрокаТЗ.ВнешнийИД, СтрокаТЗ.ПрофильНастроекЭДО);
				МассивСтрок = ТЗПоследнихИзменений.НайтиСтроки(Отбор);
				Если МассивСтрок.Количество() > 1 Тогда
					ПервыйЭлемент = МассивСтрок[0];
					ВторойЭлемент = МассивСтрок[1];
					Если НЕ ЗначениеЗаполнено(ПервыйЭлемент.КПП) ИЛИ НЕ ЗначениеЗаполнено(ВторойЭлемент.КПП) Тогда
						Если ПервыйЭлемент.Изменен > ВторойЭлемент.Изменен Тогда
							ТЗПоследнихИзменений.Удалить(ВторойЭлемент);
						Иначе
							ТЗПоследнихИзменений.Удалить(ПервыйЭлемент);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		СдвигатьДату = Истина;
		Для Каждого НовыеПриглашения Из ТЗПоследнихИзменений Цикл
			
			// Поиск контрагента в информационной базе.
			Контрагент = Неопределено;
			Ошибка = (НовыеПриглашения.СтатусУчастника = Перечисления.СтатусыУчастниковОбменаЭД.Ошибка);
			Если ЗначениеЗаполнено(НовыеПриглашения.ИНН) Тогда
				ИмяРеквизитаИННКонтрагента = ЭлектронныеДокументыПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("ИННКонтрагента");
				ИмяРеквизитаКППКонтрагента = ЭлектронныеДокументыПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("КППКонтрагента");
				
				Запрос = Новый Запрос;
				ТекстЗапроса =
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	НастройкиЭДО.Контрагент
				|ИЗ
				|	Справочник.СоглашенияОбИспользованииЭД КАК НастройкиЭДО
				|ГДЕ
				|	НЕ НастройкиЭДО.ПометкаУдаления
				|	И (НастройкиЭДО.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезСервис1СЭДО)
				|			ИЛИ НастройкиЭДО.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезОператораЭДОТакском))
				|	И НастройкиЭДО.Контрагент." + ИмяРеквизитаИННКонтрагента + " = &ИНН";
				Запрос.УстановитьПараметр("ИНН", НовыеПриглашения.ИНН);
				Если ЗначениеЗаполнено(НовыеПриглашения.КПП) И ИмяРеквизитаКППКонтрагента <> Неопределено Тогда
					ТекстЗапроса = ТекстЗапроса + " И
					|	НастройкиЭДО.Контрагент." + ИмяРеквизитаКППКонтрагента + " = &КПП";
					Запрос.УстановитьПараметр("КПП", НовыеПриглашения.КПП);
				КонецЕсли;
				Запрос.Текст = ТекстЗапроса;
				
				Выборка = Запрос.Выполнить().Выбрать();
				Если Выборка.Следующий() Тогда
					Контрагент = Выборка.Контрагент;
				Иначе
					Контрагент = ЭлектронныеДокументыПереопределяемый.СсылкаНаОбъектПоИННКПП("Контрагенты", НовыеПриглашения.ИНН,
						НовыеПриглашения.КПП);
				КонецЕсли;
			КонецЕсли;
			
			// Поиск настроек ЭДО в информационной базе.
			Запрос = Новый Запрос;
			Если ЗначениеЗаполнено(Контрагент) Тогда
				Запрос.Текст =
				"ВЫБРАТЬ
				|	НастройкаЭДОИсходящиеДокументы.Ссылка КАК НастройкаЭДО,
				|	НастройкаЭДОИсходящиеДокументы.Ссылка.РасширенныйРежимНастройкиСоглашения КАК РасширенныйРежимНастройки,
				|	НастройкаЭДОИсходящиеДокументы.Ссылка.СпособОбменаЭД КАК СпособОбменаЭД,
				|	НастройкаЭДОИсходящиеДокументы.ИдентификаторКонтрагента КАК ИдентификаторКонтрагента,
				|	НастройкаЭДОИсходящиеДокументы.Ссылка.СтатусПодключения,
				|	НастройкаЭДОИсходящиеДокументы.Ссылка.ПометкаУдаления КАК ПометкаУдаления
				|ИЗ
				|	Справочник.СоглашенияОбИспользованииЭД.ИсходящиеДокументы КАК НастройкаЭДОИсходящиеДокументы
				|ГДЕ
				|	НастройкаЭДОИсходящиеДокументы.Ссылка.Контрагент = &Контрагент
				|	И НастройкаЭДОИсходящиеДокументы.Ссылка.Организация = &Организация
				|	И НастройкаЭДОИсходящиеДокументы.Ссылка.ПрофильНастроекЭДО = &ПрофильНастроекЭДО
				|	И НастройкаЭДОИсходящиеДокументы.ИдентификаторКонтрагента В (&ИдентификаторКонтрагента, """")
				|
				|СГРУППИРОВАТЬ ПО
				|	НастройкаЭДОИсходящиеДокументы.Ссылка,
				|	НастройкаЭДОИсходящиеДокументы.ИдентификаторКонтрагента,
				|	НастройкаЭДОИсходящиеДокументы.Ссылка.СпособОбменаЭД,
				|	НастройкаЭДОИсходящиеДокументы.Ссылка.РасширенныйРежимНастройкиСоглашения,
				|	НастройкаЭДОИсходящиеДокументы.Ссылка.СтатусПодключения,
				|	НастройкаЭДОИсходящиеДокументы.Ссылка.ПометкаУдаления
				|
				|УПОРЯДОЧИТЬ ПО
				|	ПометкаУдаления,
				|	ИдентификаторКонтрагента УБЫВ";
			Иначе
				Запрос.Текст =
				"ВЫБРАТЬ
				|	НастройкаЭДОИсходящиеДокументы.Ссылка КАК НастройкаЭДО,
				|	НастройкаЭДОИсходящиеДокументы.Ссылка.РасширенныйРежимНастройкиСоглашения КАК РасширенныйРежимНастройки,
				|	НастройкаЭДОИсходящиеДокументы.Ссылка.СпособОбменаЭД КАК СпособОбменаЭД,
				|	НастройкаЭДОИсходящиеДокументы.ИдентификаторКонтрагента КАК ИдентификаторКонтрагента,
				|	НастройкаЭДОИсходящиеДокументы.Ссылка.СтатусПодключения,
				|	НастройкаЭДОИсходящиеДокументы.Ссылка.ПометкаУдаления КАК ПометкаУдаления
				|ИЗ
				|	Справочник.СоглашенияОбИспользованииЭД.ИсходящиеДокументы КАК НастройкаЭДОИсходящиеДокументы
				|ГДЕ
				|	НастройкаЭДОИсходящиеДокументы.Ссылка.ИННКонтрагента = &ИННКонтрагента
				|	И НастройкаЭДОИсходящиеДокументы.Ссылка.КППКонтрагента = &КППКонтрагента
				|	И НастройкаЭДОИсходящиеДокументы.Ссылка.Организация = &Организация
				|	И НастройкаЭДОИсходящиеДокументы.Ссылка.ПрофильНастроекЭДО = &ПрофильНастроекЭДО
				|	И НастройкаЭДОИсходящиеДокументы.ИдентификаторКонтрагента В (&ИдентификаторКонтрагента, """")
				|
				|СГРУППИРОВАТЬ ПО
				|	НастройкаЭДОИсходящиеДокументы.Ссылка,
				|	НастройкаЭДОИсходящиеДокументы.ИдентификаторКонтрагента,
				|	НастройкаЭДОИсходящиеДокументы.Ссылка.СпособОбменаЭД,
				|	НастройкаЭДОИсходящиеДокументы.Ссылка.РасширенныйРежимНастройкиСоглашения,
				|	НастройкаЭДОИсходящиеДокументы.Ссылка.СтатусПодключения,
				|	НастройкаЭДОИсходящиеДокументы.Ссылка.ПометкаУдаления
				|
				|УПОРЯДОЧИТЬ ПО
				|	ПометкаУдаления,
				|	ИдентификаторКонтрагента УБЫВ";
			КонецЕсли;
			
			Запрос.УстановитьПараметр("Контрагент",  Контрагент);
			Запрос.УстановитьПараметр("ИННКонтрагента",  НовыеПриглашения.ИНН);
			Запрос.УстановитьПараметр("КППКонтрагента",  НовыеПриглашения.КПП);
			Запрос.УстановитьПараметр("ИдентификаторКонтрагента", НовыеПриглашения.Идентификатор);
			Запрос.УстановитьПараметр("Организация", НовыеПриглашения.ПрофильНастроекЭДО.Организация);
			Запрос.УстановитьПараметр("ПрофильНастроекЭДО", НовыеПриглашения.ПрофильНастроекЭДО);
			
			Выборка = Запрос.Выполнить().Выбрать();
			
			Если Выборка.Следующий() Тогда
				
				// Проверка найденной настройки ЭДО. Если статус и идентификатор совпадают, обработка следующего приглашения.
				Если Выборка.СтатусПодключения = НовыеПриглашения.СтатусУчастника
					И Выборка.ИдентификаторКонтрагента = НовыеПриглашения.Идентификатор Тогда
					Продолжить;
				КонецЕсли;
				
				НастройкаЭДО = Выборка.НастройкаЭДО.ПолучитьОбъект();
				Если НастройкаЭДО.ПометкаУдаления Тогда
					НастройкаЭДО.ПометкаУдаления = Ложь;
				КонецЕсли;
				
				Если Не Выборка.РасширенныйРежимНастройки
					И ЭлектронныеДокументыСлужебныйВызовСервера.ЭтоПрямойОбмен(Выборка.СпособОбменаЭД) Тогда
					
					НастройкаЭДО.РасширенныйРежимНастройкиСоглашения = Истина;
					
					ПараметрыПрофиляНастроек = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(НовыеПриглашения.ПрофильНастроекЭДО,
						"ИдентификаторОрганизации, СпособОбменаЭД");
					
					Отбор = Новый Структура;
					Отбор.Вставить("ИсходящийДокумент", Перечисления.ВидыЭД.СчетФактура);
					НайденныеСтроки = НастройкаЭДО.ИсходящиеДокументы.НайтиСтроки(Отбор);
					Для каждого Строка Из НайденныеСтроки Цикл
						Строка.Формировать              = Истина;
						Строка.ИспользоватьЭЦП          = Истина;
						Строка.ПрофильНастроекЭДО       = НовыеПриглашения.ПрофильНастроекЭДО;
						Строка.СпособОбменаЭД           = ПараметрыПрофиляНастроек.СпособОбменаЭД;
						Строка.ИдентификаторОрганизации = ПараметрыПрофиляНастроек.ИдентификаторОрганизации;
						Строка.ИдентификаторКонтрагента = НовыеПриглашения.Идентификатор;
					КонецЦикла;
					
					Отбор = Новый Структура;
					Отбор.Вставить("ИсходящийДокумент", Перечисления.ВидыЭД.КорректировочныйСчетФактура);
					НайденныеСтроки = НастройкаЭДО.ИсходящиеДокументы.НайтиСтроки(Отбор);
					Для каждого Строка Из НайденныеСтроки Цикл
						Строка.Формировать              = Истина;
						Строка.ИспользоватьЭЦП          = Истина;
						Строка.ПрофильНастроекЭДО       = НовыеПриглашения.ПрофильНастроекЭДО;
						Строка.СпособОбменаЭД           = ПараметрыПрофиляНастроек.СпособОбменаЭД;
						Строка.ИдентификаторОрганизации = ПараметрыПрофиляНастроек.ИдентификаторОрганизации;
						Строка.ИдентификаторКонтрагента = НовыеПриглашения.Идентификатор;
					КонецЦикла;
				Иначе
					Отбор = Новый Структура;
					Отбор.Вставить("ПрофильНастроекЭДО", НовыеПриглашения.ПрофильНастроекЭДО);
					НайденныеСтроки = НастройкаЭДО.ИсходящиеДокументы.НайтиСтроки(Отбор);
					Для каждого Строка Из НайденныеСтроки Цикл
						Строка.ИдентификаторКонтрагента = НовыеПриглашения.Идентификатор;
					КонецЦикла;
				КонецЕсли;
			Иначе
				
				// Создание новой настройки ЭДО по входящему приглашению.
				ПараметрыПрофиляНастроек = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(НовыеПриглашения.ПрофильНастроекЭДО,
					"Организация, ИдентификаторОрганизации, СпособОбменаЭД, ШаблонТекстаПриглашений, ИсходящиеДокументы, ИспользоватьУПД, ИспользоватьУКД");
					
				НастройкаЭДО = Справочники.СоглашенияОбИспользованииЭД.СоздатьЭлемент();
				НастройкаЭДО.ОбменДанными.Загрузка = Истина;
				НастройкаЭДО.Контрагент = Контрагент;
				НастройкаЭДО.ИННКонтрагента = НовыеПриглашения.ИНН;
				НастройкаЭДО.КППКонтрагента = НовыеПриглашения.КПП;
				НастройкаЭДО.НаименованиеКонтрагента = НовыеПриглашения.Наименование;
				НастройкаЭДО.Наименование = Строка(Контрагент);
				НастройкаЭДО.ПрофильНастроекЭДО = НовыеПриглашения.ПрофильНастроекЭДО;
				НастройкаЭДО.Организация                 = ПараметрыПрофиляНастроек.Организация;
				НастройкаЭДО.СпособОбменаЭД              = ПараметрыПрофиляНастроек.СпособОбменаЭД;
				НастройкаЭДО.ИдентификаторОрганизации    = ПараметрыПрофиляНастроек.ИдентификаторОрганизации;
				НастройкаЭДО.ИспользоватьУПД    		 = ПараметрыПрофиляНастроек.ИспользоватьУПД;
				НастройкаЭДО.ИспользоватьУКД    		 = ПараметрыПрофиляНастроек.ИспользоватьУКД;
				НастройкаЭДО.ВерсияФорматаПакета         = Перечисления.ВерсииФорматаПакетаЭД.Версия30;
				
				// Загрузка табличной части из профиля настроек ЭДО.
				ИсходнаяТаблицаЭД = ПараметрыПрофиляНастроек.ИсходящиеДокументы.Выгрузить();
				ИсходнаяТаблицаЭД.Колонки.Добавить("ПрофильНастроекЭДО");
				ИсходнаяТаблицаЭД.Колонки.Добавить("СпособОбменаЭД");
				ИсходнаяТаблицаЭД.Колонки.Добавить("ИдентификаторОрганизации");
				ИсходнаяТаблицаЭД.Колонки.Добавить("ИдентификаторКонтрагента");
				ИсходнаяТаблицаЭД.ЗаполнитьЗначения(НовыеПриглашения.ПрофильНастроекЭДО, "ПрофильНастроекЭДО");
				ИсходнаяТаблицаЭД.ЗаполнитьЗначения(ПараметрыПрофиляНастроек.СпособОбменаЭД, "СпособОбменаЭД");
				ИсходнаяТаблицаЭД.ЗаполнитьЗначения(ПараметрыПрофиляНастроек.ИдентификаторОрганизации, "ИдентификаторОрганизации");
				ИсходнаяТаблицаЭД.ЗаполнитьЗначения(НовыеПриглашения.Идентификатор, "ИдентификаторКонтрагента");
				НастройкаЭДО.ИсходящиеДокументы.Загрузить(ИсходнаяТаблицаЭД);
				НастройкаЭДО.ВходящиеДокументы.Загрузить(ТаблицаПредопределенногоПрофиля("ПервоначальноеЗаполнение"));
			КонецЕсли;
			
			НастройкаЭДО.ИдентификаторКонтрагента  = НовыеПриглашения.Идентификатор;
			НастройкаЭДО.СтатусПодключения = НовыеПриглашения.СтатусУчастника;
			ЭлектронныеДокументыВнутренний.ОбновитьДатуИзмененияСтатуса(НастройкаЭДО);
			
			Если ЗначениеЗаполнено(НовыеПриглашения.ТекстПриглашения) Тогда
				НастройкаЭДО.ТекстПриглашения = НовыеПриглашения.ТекстПриглашения;
			КонецЕсли;
			
			СостояниеСоглашения = Перечисления.СостоянияСоглашенийЭД.ОжидаетсяСогласование;
			Если НовыеПриглашения.СтатусУчастника = Перечисления.СтатусыУчастниковОбменаЭД.Присоединен Тогда
				СостояниеСоглашения = Перечисления.СостоянияСоглашенийЭД.ПроверкаТехническойСовместимости;
				
				// Поиск присоединенной настройки по контрагенту.
				Запрос = Новый Запрос;
				Запрос.Текст =
				"ВЫБРАТЬ
				|	НастройкаЭДОИсходящиеДокументы.Ссылка КАК НастройкаЭДО
				|ИЗ
				|	Справочник.СоглашенияОбИспользованииЭД.ИсходящиеДокументы КАК НастройкаЭДОИсходящиеДокументы
				|ГДЕ
				|	НастройкаЭДОИсходящиеДокументы.Ссылка.Контрагент = &Контрагент
				|	И НастройкаЭДОИсходящиеДокументы.Ссылка.ДоговорКонтрагента = &ДоговорКонтрагента
				|	И НастройкаЭДОИсходящиеДокументы.Ссылка.Организация = &Организация
				|	И НастройкаЭДОИсходящиеДокументы.Ссылка.СтатусПодключения = ЗНАЧЕНИЕ(Перечисление.СтатусыУчастниковОбменаЭД.Присоединен)
				|	И НЕ НастройкаЭДОИсходящиеДокументы.Ссылка.ПометкаУдаления
				|
				|СГРУППИРОВАТЬ ПО
				|	НастройкаЭДОИсходящиеДокументы.Ссылка";
				
				Запрос.УстановитьПараметр("Контрагент",  Контрагент);
				Запрос.УстановитьПараметр("Организация", НовыеПриглашения.ПрофильНастроекЭДО.Организация);
				Запрос.УстановитьПараметр("ДоговорКонтрагента", НастройкаЭДО.ДоговорКонтрагента);
				Выборка = Запрос.Выполнить().Выбрать();
				Если Выборка.Следующий() Тогда
					НастройкаЭДО.ОбменДанными.Загрузка = Истина;
					НастройкаЭДО.СтатусПодключения = Перечисления.СтатусыУчастниковОбменаЭД.ТребуетсяСогласие;
					НастройкаЭДО.Комментарий  = НСтр("ru = '##Автоматически снят статус ""присоединен"". Уже существует настройка ЭДО по выбранному контрагенту.'");
				КонецЕсли;
				
			ИначеЕсли НовыеПриглашения.СтатусУчастника = Перечисления.СтатусыУчастниковОбменаЭД.Отсоединен Тогда
				СостояниеСоглашения = Перечисления.СостоянияСоглашенийЭД.Закрыто;
			КонецЕсли;
			НастройкаЭДО.СостояниеСоглашения = СостояниеСоглашения;
			
			ТекстОписанияОшибки = "";
			Если Ошибка Тогда
				ШаблонОписанияОшибки = НСтр("ru = '%1. Повторите отправку.'");
				ТекстОписанияОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОписанияОшибки,
					НовыеПриглашения.ОписаниеОшибки);
			КонецЕсли;
			НастройкаЭДО.ОписаниеОшибки = ТекстОписанияОшибки;
			НастройкаЭДО.АвтоПереходНаНовыеФорматы = Истина;
			НастройкаЭДО.Записать();
			
			// Сдвиг даты проверrи приглашений.
			Если СдвигатьДату Тогда
				Запись = РегистрыСведений.СостоянияОбменовЭДЧерезОператоровЭДО.СоздатьМенеджерЗаписи();
				Запись.ПрофильНастроекЭДО = НовыеПриглашения.ПрофильНастроекЭДО;
				Запись.Прочитать();
				Запись.ДатаПоследнегоПолученияПриглашений = НовыеПриглашения.Изменен;
				Запись.Записать();
			КонецЕсли;
			
		КонецЦикла;
		
		УстановитьПривилегированныйРежим(Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

// Определяет, нужно ли выводить предупреждение по формату в электронном документе, а также формирует необходимые
// для вывода предупреждения данные.
//
// Параметры:
//  ЭлектронныйДокумент	 - ДокументСсылка.ЭлектронныйДокументВходящий - электронный документ.
// 
// Возвращаемое значение:
//  Структура - содержит ключи:
//               * Выводить - Булево;
//               * ТекстПредупреждения - Строка.
//
Функция ПараметрыВыводаПредупреждения(ЭлектронныйДокумент) Экспорт

	Результат = Новый Структура("Выводить, ТекстПредупреждения, Гиперссылка", Ложь, "", "");
	                           
	ПрисоединенныйФайлСсылка = ПрисоединенныйФайл(ЭлектронныйДокумент);
	Если ЗначениеЗаполнено(ПрисоединенныйФайлСсылка) Тогда
		РеквизитыФайла = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПрисоединенныйФайлСсылка, 
			"ВидЭД, ДатаФормированияЭДОтправителем");
		
		ВидЭД = РеквизитыФайла.ВидЭД;
		
		// Сохраним электронный документ в файл.
		ПараметрыФайла = Неопределено;
		ЭлектронныеДокументыВнутренний.СохранитьЭДВФайл(ПрисоединенныйФайлСсылка, ПараметрыФайла);
		
		Если ЗначениеЗаполнено(ПараметрыФайла.ИмяФайла) Тогда
			ОписаниеОшибки = "";
			ДанныеФайла = ЭлектронныеДокументыВнутренний.ДанныеФайлаЭД(ПараметрыФайла.ИмяФайла, ОписаниеОшибки);
			
			Если ДанныеФайла <> Неопределено Тогда
				ПространствоИмен = ДанныеФайла.Тип().URIПространстваИмен;
				ФорматЭлектронногоДокумента = ЭлектронныеДокументыСлужебный.ФорматПоПространствуИмен(ВидЭД, ПространствоИмен);
				
				СведенияОФормате = СведенияОФормате(ВидЭД, ФорматЭлектронногоДокумента);
				
				Если СведенияОФормате <> Неопределено 
					И ЗначениеЗаполнено(СведенияОФормате.ТекстПредупрежденияДляВходящегоДокумента) Тогда
					
					Если Не ЗначениеЗаполнено(СведенияОФормате.УсловиеВыводаПредупреждения) Тогда
						Результат.Выводить = Истина;
					ИначеЕсли СведенияОФормате.УсловиеВыводаПредупреждения = "ДатаФормированияЭлектронногоДокумента" Тогда
						Если ЗначениеЗаполнено(СведенияОФормате.ДатаОкончанияДействия) 
							И КонецДня(СведенияОФормате.ДатаОкончанияДействия) < РеквизитыФайла.ДатаФормированияЭДОтправителем Тогда
							Результат.Выводить = Истина;
						КонецЕсли;
					КонецЕсли;
					
					Результат.ТекстПредупреждения = СведенияОФормате.ТекстПредупрежденияДляВходящегоДокумента;
					Результат.Гиперссылка = СведенияОФормате.ГиперссылкаПредупреждения;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Запись событий в журнал регистрации. Обработка ошибок

// Данная процедура используется для стандартизации всех записей событий подсистемы ЭлектронноеВзаиможействие
// в журнал регистрации. В результате в журнал добавляется группировка записей с иерархией:
//  Электронное взаимодействие
//  |_ Ошибка
//    |_ Общая подсистема
//    |_ Обмен с банками
//    |_ Обмен с контрагентами
//    |_ Обмен с сайтами
//    |_ Регламентные задания
//  |_ Информация
//    |_ Общая подсистема
//    |_ Обмен с банками
//    |_ Обмен с контрагентами
//    |_ Обмен с сайтами
//    |_ Регламентные задания
//
// Параметры:
//   ОписаниеСобытия - Строка - описание содержания события, которое требуется записать в журнал регистрации.
//   КодСобытия - Число - код события, используется для стандартизации иерархии событий.
//               Может принимать значения: 0 - Общая подсистема, 1 - Обмен с банками, 2 - Обмен с контрагентами.
//                                         3 - Обмен с сайтами, 4 - Регламентные задания
//   УровеньВажности - УровеньЖурналаРегистрации - один из доступных уровней журнала регистрации (Ошибка, Информация, ...).
//   ОбъектМетаданных - ОбъектМетаданных - объект метаданных, к которому относится событие.
//   ДанныеСсылка - Произвольный - данные, с которыми связано событие. Рекомендуется указывать ссылки на объекты данных
//                  (элементы справочников, документы, к которым относится событие).
//   РежимТранзакции - РежимТранзакцииЗаписиЖурналаРегистрации - указывает отношение записи к текущей транзакции.
//
Процедура ВыполнитьЗаписьСобытияПоЭДВЖурналРегистрации(ОписаниеСобытия, КодСобытия = 0, УровеньВажности = Неопределено,
	ОбъектМетаданных = Неопределено, ДанныеСсылка = Неопределено, РежимТранзакции = Неопределено) Экспорт
	
	Подсистема = "Общая подсистема";
	Если КодСобытия = 1 Тогда Подсистема = НСтр("ru = 'Обмен с банками'",
		ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	ИначеЕсли КодСобытия = 2 Тогда Подсистема = НСтр("ru = 'Обмен с контрагентами'",
		ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	ИначеЕсли КодСобытия = 3 Тогда Подсистема = НСтр("ru = 'Обмен с сайтами'",
		ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	ИначеЕсли КодСобытия = 4 Тогда Подсистема = НСтр("ru = 'Регламентные задания'",
		ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	КонецЕсли;
	УровеньВажностиСобытия = ?(ТипЗнч(УровеньВажности) = Тип("УровеньЖурналаРегистрации"),
		УровеньВажности, УровеньЖурналаРегистрации.Ошибка);
	Шаблон = НСтр("ru = 'Электронное взаимодействие. %1'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	ИмяСобытия = СтрЗаменить(Шаблон, "%1", Подсистема);
	ЗаписьЖурналаРегистрации(ИмяСобытия,
		УровеньВажностиСобытия, ОбъектМетаданных, ДанныеСсылка, ОписаниеСобытия, РежимТранзакции);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа с файлами

// Только для внутреннего использования
Функция ПолучитьСтруктуруФайла(Строка) Экспорт
	
	ИмяФайла = КорректноеИмяФайла(Строка, Истина);
	Файл = Новый Файл(ИмяФайла);
	
	Возврат Новый Структура("ИмяБезРасширения, Расширение", Файл.ИмяБезРасширения, СтрЗаменить(Файл.Расширение, ".",""));
	
КонецФункции

// Только для внутреннего использования
Функция ФНСИмяФайла(СтруктураИмени) Экспорт
	
	ИмяФайла = СтруктураИмени.Префикс + "_" + СтруктураИмени.ИДПолучателя + "_"
		+ СтруктураИмени.ИДОтправителя + "_" + СтруктураИмени.ГГГГММДД + "_" + СтруктураИмени.УникальныйИдентификатор;
	
	Возврат ИмяФайла;
	
КонецФункции

// Только для внутреннего использования
Функция ТекущееИмяВременногоФайла(Расширение = "") Экспорт
	
	ИмяВременногоФайла = "";
	ЭлектронныеДокументыПереопределяемый.ТекущееИмяВременногоФайла(ИмяВременногоФайла, Расширение);
	Если НЕ ЗначениеЗаполнено(ИмяВременногоФайла) Тогда
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла(Расширение);
	КонецЕсли;
	
	Возврат ИмяВременногоФайла;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Сообщения пользователю

// Выводит сообщение пользователю о нехватки прав доступа.
Процедура СообщитьПользователюОНарушенииПравДоступа() Экспорт
	
	ТекстСообщения = НСтр("ru = 'Нарушение прав доступа'");
	ЭлектронныеДокументыПереопределяемый.ПодготовитьТекстСообщенияОНарушенииПравДоступа(ТекстСообщения);
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	
КонецПроцедуры

// Только для внутреннего использования
Процедура СообщитьОбОтсутствииСоглашенияЭД(ПараметрыЭД, Источник) Экспорт
	
	Если НЕ ЭлектронныеДокументыПереопределяемый.ПроверитьПравильностьЗаполненияОбъекта(ПараметрыЭД) Тогда
		Возврат;
	КонецЕсли;
	
	ШаблонСообщения = Нстр("ru = 'Обработка %1.
								 |Операция не выполнена!
								 |Необходимо создать ""Настройку ЭДО"" с реквизитами:'");
	
	Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Источник);
	
	ТаблицаПараметров = Новый ТаблицаЗначений();
	ТаблицаПараметров.Колонки.Добавить("Ключ");
	ТаблицаПараметров.Колонки.Добавить("Значение");
	ТаблицаПараметров.Колонки.Добавить("Порядок");
	
	ЭтоСчетФактураВыданный = Ложь;
	Если ПараметрыЭД.Свойство("ЭтоСчетФактураВыданный") И ЗначениеЗаполнено(ПараметрыЭД.ЭтоСчетФактураВыданный) Тогда
		ЭтоСчетФактураВыданный = ПараметрыЭД.ЭтоСчетФактураВыданный;
	КонецЕсли;
	
	ЭтоПлатежноеПоручение = Ложь;
	Если ПараметрыЭД.Свойство("ВидЭД") И ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ПлатежноеПоручение Тогда
		ЭтоПлатежноеПоручение = Истина;
	КонецЕсли;
	
	Для Каждого ТекПараметр Из ПараметрыЭД Цикл
		
		Если ЭтоПлатежноеПоручение И (ТекПараметр.Ключ = "ДоговорКонтрагента"
										ИЛИ ТекПараметр.Ключ = "НаправлениеЭД"
										ИЛИ ТекПараметр.Ключ = "НаправлениеЭД"
										ИЛИ ТекПараметр.Ключ = "ВидЭД") Тогда
			Продолжить;
		КонецЕсли;

		Порядок = 0;
		Если НРег(ТекПараметр.Ключ) = НРег("Организация") Тогда
			Порядок = 1;
		ИначеЕсли НРег(ТекПараметр.Ключ) = НРег("Партнер") И НЕ ЭтоСчетФактураВыданный Тогда
			Порядок = 2;
		ИначеЕсли НРег(ТекПараметр.Ключ) = НРег("Контрагент") Тогда
			Порядок = 3;
		ИначеЕсли НРег(ТекПараметр.Ключ) = НРег("ДоговорКонтрагента") Тогда
			Порядок = 4;
		ИначеЕсли НРег(ТекПараметр.Ключ) = НРег("ВидЭД") И НЕ ЭтоСчетФактураВыданный Тогда
			Порядок = 5;
		ИначеЕсли НРег(ТекПараметр.Ключ) = НРег("ЭтоСчетФактураВыданный") И ЭтоСчетФактураВыданный Тогда
			Порядок = 0.5;
		КонецЕсли;
		
		Если Порядок > 0 Тогда
			СтрокаПараметров = ТаблицаПараметров.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаПараметров, ТекПараметр);
			Если ЭтоСчетФактураВыданный Тогда
				Если НРег(ТекПараметр.Ключ) = НРег("ЭтоСчетФактураВыданный") Тогда
					СтрокаПараметров.Ключ = "Способ обмена";
					СтрокаПараметров.Значение = "через оператора ЭДО";
				ИначеЕсли НРег(ТекПараметр.Ключ) = НРег("Контрагент") Тогда
					СтрокаПараметров.Ключ = "Участник";
				КонецЕсли;
			ИначеЕсли ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ПлатежноеПоручение Тогда
				Если ТекПараметр.Ключ = "Контрагент" Тогда
					СтрокаПараметров.Ключ = "Банк";
				КонецЕсли;
			ИначеЕсли ПараметрыЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани Тогда
				Если ТекПараметр.Ключ = "Организация" Тогда
					СтрокаПараметров.Ключ = "Организация-отправитель";
				ИначеЕсли ТекПараметр.Ключ = "Контрагент" Тогда
					СтрокаПараметров.Ключ = "Организация-получатель";
				КонецЕсли;
			КонецЕсли;
			СтрокаПараметров.Порядок = Порядок;
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаПараметров.Сортировать("Порядок");
	Для Каждого СтрокаПараметров Из ТаблицаПараметров Цикл
		Если ЗначениеЗаполнено(СтрокаПараметров.Значение) Тогда
			Текст = Текст + Символы.ПС + НСтр("ru = '<%1>: %2'");
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, СтрокаПараметров.Ключ, СтрокаПараметров.Значение);
		КонецЕсли;
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Прямой обмен с банком

// Только для внутреннего использования
Процедура ОтправитьПакетЧерезРесурсБанка(Настройки, Данные, Результат, ТекстОшибки) Экспорт

	Соединение = ПолучитьСоединение(Настройки);
	
	ИмяФайлаРезультата = ПолучитьИмяВременногоФайла();
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("User-Agent", "1C:Enterprise/8");
	Заголовки.Вставить("Content-Type", "application/xml");
	Если Настройки.Свойство("Хэш") Тогда
		Заголовки.Вставить("Authorization", "Basic " + Настройки.Хэш);
	КонецЕсли;
	
	HTTPЗапрос = Новый HTTPЗапрос(Настройки.Ресурс, Заголовки);
	HTTPЗапрос.УстановитьИмяФайлаТела(Данные);
	
	Ответ = Соединение.ОтправитьДляОбработки(HTTPЗапрос, ИмяФайлаРезультата);
	HTTPЗапрос = Неопределено;
	УдалитьФайлы(Данные);
	ФайлРезультата = Новый ТекстовыйДокумент;
	ФайлРезультата.Прочитать(ИмяФайлаРезультата, КодировкаТекста.UTF8);
	УдалитьФайлы(ИмяФайлаРезультата);
	Результат = ФайлРезультата.ПолучитьТекст();
	
	ПакетОтправлен = Истина;
	
	Если Ответ.КодСостояния <> 200 Тогда
		ПакетОтправлен = Ложь;
		Шаблон = Нстр("ru = 'Ошибка работы с Интернет (%1)%2'");
		Если Ответ.КодСостояния = 401 Тогда
			Расшифровка = НСтр("ru = ': Доступ разрешен только для пользователей, прошедших аутентификацию.
				|Проверьте правильность указания логина и пароля.'");
		ИначеЕсли Ответ.КодСостояния = 500 Тогда
			Расшифровка = НСтр("ru = ': Внутренняя ошибка сервера'");
		Иначе
			Расшифровка = "";
		КонецЕсли;
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон, Ответ.КодСостояния, Расшифровка);
	КонецЕсли;
	
КонецПроцедуры

// Только для внутреннего использования
Функция ПолучитьСоединение(Настройки) Экспорт
	
	Адрес = "";
	ЗащищенноеСоединение = Ложь;
	Протокол = "";
	
	ОпределитьПараметрыСайта(Настройки.Адрес, ЗащищенноеСоединение, Адрес, Протокол);
	
	Прокси = СформироватьПрокси(Протокол);
	Соединение = Новый HTTPСоединение(Адрес, , , ,Прокси, ЗащищенноеСоединение);
	
	Возврат Соединение;

КонецФункции

// Только для внутреннего использования
Функция ПолучитьДанныеИзОтветаБанка(ОтветБанка, ЭД) Экспорт
	
	СодержимоеФайла = Новый Соответствие;
	Чтение = Новый ЧтениеXML;
	Чтение.УстановитьСтроку(ОтветБанка);
		
	URI = "urn:x-obml:1.0";
	Попытка
		Message = ФабрикаXDTO.ПрочитатьXML(Чтение, ФабрикаXDTO.Тип(URI, "CMSDETACHED"));
		СодержимоеФайла.Вставить("Данные", Message.data.__content);
		Подписи = Новый Массив;
		Для Каждого Подпись ИЗ Message.signature Цикл
			Подписи.Добавить(Подпись);
		КонецЦикла;
		СодержимоеФайла.Вставить("Подписи", Подписи);
	Исключение
		ВремФайл = ПолучитьИмяВременногоФайла();
		ТекстовыйДокумент = Новый ТекстовыйДокумент;
		ТекстовыйДокумент.УстановитьТекст(ОтветБанка);
		ТекстовыйДокумент.Записать(ВремФайл);
		ДвоичныеДанные = Новый ДвоичныеДанные(ВремФайл);
		СодержимоеФайла.Вставить("Данные", ДвоичныеДанные);
		УдалитьФайлы(ВремФайл);
	КонецПопытки;
		
	Возврат СодержимоеФайла;

КонецФункции

// Только для внутреннего использования
Процедура ОбработатьОтветБанка(ДанныеОтвета, ЭД, НовыйЭД = Неопределено, ЕстьОшибка = Неопределено) Экспорт
	
	ЕстьОшибка = Ложь;
	ФайлДанных = ПолучитьИмяВременногоФайла();
	Сообщение = ДанныеОтвета.Получить("Данные");
	РеквизитыЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЭД, "Организация, СоглашениеЭД, ВидЭД");
	ВидЭД = РеквизитыЭД.ВидЭД;
	Сообщение.Записать(ФайлДанных);
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ФайлДанных);
	Если ЧтениеXML.Прочитать() И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента
		И (ЧтениеXML.ЛокальноеИмя = "success" ИЛИ ЧтениеXML.ЛокальноеИмя = "error") Тогда
		ЧтениеXML.ОткрытьФайл(ФайлДанных);
		Пока ЧтениеXML.Прочитать() Цикл
			Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеXML.ЛокальноеИмя = "success" Тогда
				ЧтениеXML.Прочитать();
				ЧтениеXML.Прочитать();
				СтруктураПараметров = Новый Структура;
				СтруктураПараметров.Вставить("УникальныйИДВнешний", ЧтениеXML.Значение);
				СтруктураПараметров.Вставить("СтатусЭД", Перечисления.СтатусыЭД.Доставлен);
				ДополнительныеРеквизиты = Новый Структура("ДатаПоступленияВБанк", ТекущаяДатаСеанса());
				СтруктураПараметров.Вставить("ДополнительныеРеквизиты", ДополнительныеРеквизиты);
				ИзменитьПоСсылкеПрисоединенныйФайл(ЭД, СтруктураПараметров, Ложь);
				Прервать;
			ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеXML.ЛокальноеИмя = "error" Тогда
				ЧтениеXML.Прочитать();
				ЧтениеXML.Прочитать();
				КодОшибки = ЧтениеXML.Значение;
				ЧтениеXML.Прочитать();
				ЧтениеXML.Прочитать();
				ЧтениеXML.Прочитать();
				ОписаниеОшибки = ЧтениеXML.Значение;
				ТекстОшибки = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьСообщениеОбОшибке(КодОшибки, ОписаниеОшибки);
				СтруктураПараметров = Новый Структура;
				СтруктураПараметров.Вставить("ПричинаОтклонения", ТекстОшибки);
				СтруктураПараметров.Вставить("СтатусЭД", Перечисления.СтатусыЭД.ОтклоненБанком);
				ИзменитьПоСсылкеПрисоединенныйФайл(ЭД, СтруктураПараметров, Ложь);
				Если ВидЭД = Перечисления.ВидыЭД.ЗапросВыписки Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
				КонецЕсли;
				ЕстьОшибка = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	Иначе
		АдресФайла = ПоместитьВоВременноеХранилище(Сообщение);
		НаименованиеЗапроса = ЭД.Наименование;
		ДобавленныйФайл = ПрисоединенныеФайлы.ДобавитьФайл(
								РеквизитыЭД.СоглашениеЭД,
								СтрЗаменить(НаименованиеЗапроса, "Запрос выписки", "Выписка банка за период "),
								"xml",
								ТекущаяДатаСеанса(),
								ТекущаяДатаСеанса(),
								АдресФайла,
								,
								,
								Справочники.ЭДПрисоединенныеФайлы.ПолучитьСсылку());
		Если ЭлектронныеДокументыСлужебныйВызовСервера.ВыполнятьКриптооперацииНаСервере() Тогда
			Подписи = ДанныеОтвета.Получить("Подписи");
			Попытка
				НастройкиКриптографии = ЭлектроннаяЦифроваяПодпись.ПолучитьПерсональныеНастройкиРаботыСЭЦПСервер();
				ПровайдерЭЦП = НастройкиКриптографии.ПровайдерЭЦП;
				ПутьМодуляКриптографии = НастройкиКриптографии.ПутьМодуляКриптографии;
				ТипПровайдераЭЦП = НастройкиКриптографии.ТипПровайдераЭЦП;
		
				МенеджерКриптографии = Новый МенеджерКриптографии(ПровайдерЭЦП, ПутьМодуляКриптографии, ТипПровайдераЭЦП);
				МенеджерКриптографии.АлгоритмПодписи     = НастройкиКриптографии.АлгоритмПодписи;
				МенеджерКриптографии.АлгоритмХеширования = НастройкиКриптографии.АлгоритмХеширования;
				МенеджерКриптографии.АлгоритмШифрования  = НастройкиКриптографии.АлгоритмШифрования;
				МенеджерКриптографииПодключен = Истина;
			Исключение
				ТекстСообщения = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьСообщениеОбОшибке("110");
				ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				Операция = НСтр("ru = 'Инициализация криптосредства на сервере'");
				ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(Операция,
																							ТекстОшибки,
																							ТекстСообщения,
																							1);
				МенеджерКриптографииПодключен = Ложь;
			КонецПопытки;

			Если МенеджерКриптографииПодключен Тогда
			
				Для Каждого Подпись ИЗ Подписи Цикл
					СертификатыПодписи = МенеджерКриптографии.ПолучитьСертификатыИзПодписи(Подпись);
					Если СертификатыПодписи.Количество() > 0 Тогда
						Сертификат = СертификатыПодписи[0];
					Иначе
						Продолжить;
					КонецЕсли;
					ПредставлениеПользователя = ЭлектроннаяЦифроваяПодписьКлиентСервер.ПолучитьПредставлениеПользователя(
																										Сертификат.Субъект);
					Отпечаток = Base64Строка(Сертификат.Отпечаток);
					ДвоичныеДанныеСертификата = Сертификат.Выгрузить();
					ДатаУстановкиПодписи = ДатаУстановкиПодписи(Подпись);
					ДатаУстановкиПодписи = ?(ЗначениеЗаполнено(ДатаУстановкиПодписи), ДатаУстановкиПодписи, ТекущаяДатаСеанса());
					ЭлектроннаяЦифроваяПодпись.ЗанестиИнформациюОПодписи(
												ДобавленныйФайл,
												Подпись,
												Отпечаток,
												ДатаУстановкиПодписи,
												"",
												,
												ПредставлениеПользователя,
												ДвоичныеДанныеСертификата);
				КонецЦикла;
				ЭлектронныеДокументыСлужебныйВызовСервера.ОпределитьСтатусыПодписей(ДобавленныйФайл, Истина);
			КонецЕсли;
		КонецЕсли;
		
		Контрагент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РеквизитыЭД.СоглашениеЭД, "Контрагент");
		Ответственный = ЭлектронныеДокументыПереопределяемый.ПолучитьОтветственногоПоЭД(Контрагент,
																						РеквизитыЭД.СоглашениеЭД);
		Если Не ЗначениеЗаполнено(Ответственный) Тогда 
			Ответственный = Пользователи.АвторизованныйПользователь();
		КонецЕсли;
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("Автор",                       Пользователи.АвторизованныйПользователь());
		СтруктураПараметров.Вставить("СтатусЭД",                    Перечисления.СтатусыЭД.Получен);
		СтруктураПараметров.Вставить("НаправлениеЭД",               Перечисления.НаправленияЭД.Входящий);
		СтруктураПараметров.Вставить("ВидЭД",                       Перечисления.ВидыЭД.ВыпискаБанка);
		СтруктураПараметров.Вставить("Ответственный",               Ответственный);
		СтруктураПараметров.Вставить("Организация",                 РеквизитыЭД.Организация);
		СтруктураПараметров.Вставить("СоглашениеЭД",                РеквизитыЭД.СоглашениеЭД);
		СтруктураПараметров.Вставить("Контрагент",                  Контрагент);
		СтруктураПараметров.Вставить("ДатаДокументаОтправителя",    ТекущаяДатаСеанса());
		СтруктураПараметров.Вставить("ЭлектронныйДокументВладелец", ЭД);
		СтруктураПараметров.Вставить("ВладелецЭД",                  РеквизитыЭД.СоглашениеЭД);
		СтруктураПараметров.Вставить("НаименованиеФайла",           СтрЗаменить(НаименованиеЗапроса, "Запрос выписки", "Выписка банка за период "));
		
		ИзменитьПоСсылкеПрисоединенныйФайл(ДобавленныйФайл, СтруктураПараметров);
		
		ЭлектронныеДокументыСлужебныйВызовСервера.ОпределитьИсполненныеПлатежныеПоручения(ДобавленныйФайл);
		НовыйЭД = ДобавленныйФайл;
	КонецЕсли;
	ЧтениеXML.Закрыть();
	
	УдалитьФайлы(ФайлДанных);

КонецПроцедуры

// Собирает пакет с запросом выписки и отправляет в банк. В ответ получает выписку банка.
//
// Параметры:
//  СтруктураПараметров - структура, содержит 2 элемента
//      ЭД - СправочникСсылка.ЭДПрисоединенныеФайлы - электронный документ с запросом выписки,
//      СоглашениеЭД - СправочникСсылка.СоглашенияОбИспользованииЭД - соглашение
//  АдресХранилища - строка, содержит адрес хранилища, содержащий структуру из 2 элементов:
//      ЗапросОтправлен - Булево, признак, что запрос был отправлен
//      ВыпискаБанка - СправочникСсылка.ЭДПрисоединенныеФайлы - электронный документ с выпиской банка
//  ЕстьОшибка - Булево - признак получения информации из банка об ошибке
//
Процедура ОтправитьЗапросВыпискиВБанк(СтруктураПараметров, АдресХранилища, ЕстьОшибка) Экспорт

	Перем ВыпискаБанка;
	СтруктураВозврата = Новый Структура;
	ЭД                = СтруктураПараметров.ЭД;
	СоглашениеЭД      = СтруктураПараметров.СоглашениеЭД;
	ЗапросОтправлен   = Ложь;
	
	РеквизитыСоглашения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СоглашениеЭД,
		"АдресСервера, РесурсИсходящихДокументов, РесурсВходящихДокументов, ПрограммаБанка");
	Настройки = Новый Структура("Адрес", РеквизитыСоглашения.АдресСервера);
	КолОтправленных = 0;
	
	Данные = ПрисоединенныеФайлы.ПолучитьДвоичныеДанныеФайла(ЭД);
	URI = "urn:x-obml:1.0";
	ТипMessage = ФабрикаXDTO.Тип("urn:x-obml:1.0", "CMSDETACHED");
	Message = ФабрикаXDTO.Создать(ТипMessage);
	ТипData = ТипMessage.Свойства[0].Тип;
	Data = ФабрикаXDTO.Создать(ТипData);
	Data.ContentType = "application/xml";
	Data.__content = Данные;
	Message.data = Data;
	
	МассивПодписей = ЭлектроннаяЦифроваяПодпись.ПолучитьВсеПодписи(ЭД, Новый УникальныйИдентификатор);
		
	Для Каждого СтрокаПодписи ИЗ МассивПодписей Цикл
		Message.signature.Добавить(ПолучитьИзВременногоХранилища(СтрокаПодписи.АдресПодписи));
	КонецЦикла;
	
	ПутьКФайлуОтправки = ПолучитьИмяВременногоФайла();
	Запись = Новый ЗаписьXML;
	Запись.ОткрытьФайл(ПутьКФайлуОтправки);
	Запись.ЗаписатьОбъявлениеXML();

	ФабрикаXDTO.ЗаписатьXML(Запись, Message, "signed", URI, , НазначениеТипаXML.Явное);
	
	Запись.Закрыть();
	
	Настройки.Вставить("Ресурс", РеквизитыСоглашения.РесурсВходящихДокументов);
	
	Если ЗначениеЗаполнено(СтруктураПараметров.Пользователь) Тогда
		Настройки.Вставить("ХЭШ", ХэшАвторизации(СтруктураПараметров.Пользователь, СтруктураПараметров.Пароль));
	КонецЕсли;
	
	ВидОперации = НСтр("ru = 'Отправка запроса выписки в банк'");
	
	Попытка
		ОтветБанка = "";
		ТекстОшибки = "";
		ОтправитьПакетЧерезРесурсБанка(Настройки, ПутьКФайлуОтправки, ОтветБанка, ТекстОшибки);
		
		Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
			ОбработатьОшибкуПередачиПакетаБанка(ЭД, ВидОперации, ТекстОшибки, ТекстОшибки);
			ЕстьОшибка = Истина;
		Иначе
			СтруктураПараметров = Новый Структура;
			СтруктураПараметров.Вставить("СтатусЭД", Перечисления.СтатусыЭД.Отправлен);
			ИзменитьПоСсылкеПрисоединенныйФайл(ЭД, СтруктураПараметров, Ложь);
			
			ЗапросОтправлен = Истина;
		
			УдалитьФайлы(ПутьКФайлуОтправки);
		
			ДанныеОтвета = ПолучитьДанныеИзОтветаБанка(ОтветБанка, ЭД);
		
			Если НЕ ДанныеОтвета = Неопределено Тогда
				ВыпискаПолучена = Истина;
				ОбработатьОтветБанка(ДанныеОтвета, ЭД, ВыпискаБанка, ЕстьОшибка);
			КонецЕсли;
			СтруктураВозврата.Вставить("Подписи", ДанныеОтвета.Получить("Подписи"));
		КонецЕсли;
	Исключение
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстСообщения = НСтр("ru = 'При отправке запроса выписки произошла ошибка, подробности см. в Журнале регистрации.'");
		ОбработатьОшибкуПередачиПакетаБанка(ЭД, ВидОперации, ТекстОшибки, ТекстСообщения);
		ЕстьОшибка = Истина;
	КонецПопытки;
	УдалитьФайлы(ПутьКФайлуОтправки);
	СтруктураВозврата.Вставить("ЗапросОтправлен", ЗапросОтправлен);
	СтруктураВозврата.Вставить("ВыпискаБанка", ВыпискаБанка);
	СтруктураВозврата.Вставить("ЕстьОшибка", ЕстьОшибка);
	СтруктураВозврата.Вставить("ТекстОшибки", ТекстОшибки);
	
	ПоместитьВоВременноеХранилище(СтруктураВозврата, АдресХранилища);
	
КонецПроцедуры

// Только для внутреннего использования
Процедура ОбработатьОшибкуПередачиПакетаБанка(ЭД, ВидОперации, ТекстОшибки, ТекстСообщения) Экспорт
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("СтатусЭД", Перечисления.СтатусыЭД.ОшибкаПередачи);
	СтруктураПараметров.Вставить("ПричинаОтклонения", ТекстОшибки);
	ИзменитьПоСсылкеПрисоединенныйФайл(ЭД, СтруктураПараметров, Ложь);
	
	ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(
									ВидОперации, ТекстОшибки, ТекстСообщения, 1);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обмен через сервис 1CЭДО

// Проверяет наличие доступа к веб-сервису 1С-ЭДО.
//
// Параметры:
//  ВыводитьСообщения - Булево, требуется ли выводить сообщения.
//
// Возвращаемое значение:
//  Булево - наличие доступа к веб-сервису ФНС.
//
Функция ЕстьДоступКВебСервису1CЭДО(ВыводитьСообщения = Ложь) Экспорт
	
	Результат = Истина;
	
	ИмяФайлаРезультата = ТекущееИмяВременногоФайла("xml");
	Соединение = ЭлектронныеДокументыВнутренний.ПолучитьСоединение(Перечисления.СпособыОбменаЭД.ЧерезСервис1СЭДО, 7);
	Попытка
		Соединение.Получить("GetInfo/1", ИмяФайлаРезультата);
	Исключение
		
		ТекстЗаголовкаСообщения = НСтр("ru = 'При работе с сервисом 1С-ЭДО возникла ошибка:'");
		
		ШаблонСообщения = НСтр("ru = '%1
		|Сервис 1С-ЭДО не доступен. Попробуйте чуть позже.'");
		
		ТекстСообщения = "";
		Если ВыводитьСообщения Тогда
			ТекстСообщения = ТекстЗаголовкаСообщения + Символы.ПС
				+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецЕсли;
		ПодробныйТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(ТекстЗаголовкаСообщения,
			ПодробныйТекстОшибки, ТекстСообщения);
		
		Результат = Ложь;
		
	КонецПопытки;
	
	УдалитьФайлы(ИмяФайлаРезультата);
	
	Возврат Результат;
	
КонецФункции

// Только для внутреннего использования
Функция РегистрационныйПакетДляОператораЭДО(РеквизитыПакета, ЗашифрованныеДвоичныеДанныеОператораЭДО, ПодписанныеДвоичныеДанныеДляОператораЭДО,
		ДвоичныеДанныеСоглашенияНаПодключениеЭДО, ПодписанныеДвоичныеДанныеСоглашенияНаПодключениеЭДО) Экспорт
		
	// Сформируем пакет для 1СЭДО
	ИмяФайлаПакетаДля1СЭДО = РабочийКаталог() + "EDI_" + РеквизитыПакета.УникальныйИдентификаторЗаявки1СЭДО + ".zip";
	
	АдресКаталогаРегистрации = РабочийКаталог("reg", РеквизитыПакета.УникальныйИдентификаторЗаявки1СЭДО);
	ИмяВременногоФайлаПакетаДляОператораЭДО           = АдресКаталогаРегистрации + "packet.zip";
	ИмяВременногоФайлаАрхиваСоглашенияНаПодлючениеЭДО = АдресКаталогаРегистрации + "LicenseCard.zip";
	ИмяВременногоФайлаЭДКарточки                      = АдресКаталогаРегистрации + "card.xml";
	ИмяВременногоФайлаЭДТранспортнойИнформации        = АдресКаталогаРегистрации + "meta.xml";
	
	// Готовим данные для ОператораЭДО
	ИмяФайла = АдресКаталогаРегистрации + СгенерироватьUUID() + ".bin";
	ЗашифрованныеДвоичныеДанныеОператораЭДО.Записать(ИмяФайла);
	
	ИмяФайлаПодписи = АдресКаталогаРегистрации + СгенерироватьUUID() + ".bin";
	ПодписанныеДвоичныеДанныеДляОператораЭДО.Записать(ИмяФайлаПодписи);
	
	ИмяФайлаОписанияПакетаДляОператораЭДО = АдресКаталогаРегистрации + "packageDescription.xml";
	ДвоичныеДанныеОписанияПакетаДляОператораЭДО = ОписаниеПакетаДляОператораЭДО(РеквизитыПакета, ИмяФайла, ИмяФайлаПодписи);
	ДвоичныеДанныеОписанияПакетаДляОператораЭДО.Записать(ИмяФайлаОписанияПакетаДляОператораЭДО);
	
	МассивФайловПакетаНаПодлючениеЭДО = Новый Массив;
	МассивФайловПакетаНаПодлючениеЭДО.Добавить(ИмяФайлаОписанияПакетаДляОператораЭДО);
	МассивФайловПакетаНаПодлючениеЭДО.Добавить(ИмяФайла);
	МассивФайловПакетаНаПодлючениеЭДО.Добавить(ИмяФайлаПодписи);
	СформироватьЗипАрхивФайлов(ИмяВременногоФайлаПакетаДляОператораЭДО, МассивФайловПакетаНаПодлючениеЭДО);
	
	// Готовим соглашение для 1СЭДО
	ИмяФайлаСоглашенияНаПодлючениеЭДО       = АдресКаталогаРегистрации + "LicenseCard.xml";
	ДвоичныеДанныеСоглашенияНаПодключениеЭДО.Записать(ИмяФайлаСоглашенияНаПодлючениеЭДО);
	
	ИмяФайлПодписиСоглашенияНаПодлючениеЭДО = АдресКаталогаРегистрации + "LicenseCard.p7s";
	ПодписанныеДвоичныеДанныеСоглашенияНаПодключениеЭДО.Записать(ИмяФайлПодписиСоглашенияНаПодлючениеЭДО);
	
	МассивФайловАрхиваСоглашенияНаПодлючениеЭДО = Новый Массив;
	МассивФайловАрхиваСоглашенияНаПодлючениеЭДО.Добавить(ИмяФайлаСоглашенияНаПодлючениеЭДО);
	МассивФайловАрхиваСоглашенияНаПодлючениеЭДО.Добавить(ИмяФайлПодписиСоглашенияНаПодлючениеЭДО);
	СформироватьЗипАрхивФайлов(ИмяВременногоФайлаАрхиваСоглашенияНаПодлючениеЭДО, МассивФайловАрхиваСоглашенияНаПодлючениеЭДО);
	
	// Готовим описание пакета для 1СЭДО
	РеквизитыПакета.Вставить("ИмяВременногоФайлаЭДКарточки", ИмяВременногоФайлаЭДКарточки);
	РеквизитыПакета.Вставить("ИмяВременногоФайлаЭДТранспортнойИнформации", ИмяВременногоФайлаЭДТранспортнойИнформации);
	СоздатьФайлыОписанияПакета(РеквизитыПакета);
	
	МасисивФайловРегистрационногоПакета = Новый Массив;
	МасисивФайловРегистрационногоПакета.Добавить(ИмяВременногоФайлаПакетаДляОператораЭДО);
	МасисивФайловРегистрационногоПакета.Добавить(ИмяВременногоФайлаАрхиваСоглашенияНаПодлючениеЭДО);
	МасисивФайловРегистрационногоПакета.Добавить(ИмяВременногоФайлаЭДКарточки);
	МасисивФайловРегистрационногоПакета.Добавить(ИмяВременногоФайлаЭДТранспортнойИнформации);
	СформироватьЗипАрхивФайлов(ИмяФайлаПакетаДля1СЭДО, МасисивФайловРегистрационногоПакета);
	
	УдалитьФайлы(АдресКаталогаРегистрации);
	
	Возврат ИмяФайлаПакетаДля1СЭДО;

КонецФункции

Функция ОписаниеПакетаДляОператораЭДО(РеквизитыПакета, ИмяФайла, ИмяФайлаПодписи)
	
	ИмяВременногоФайлаОписаниеПакетаЭДО = ЭлектронныеДокументыСлужебный.ТекущееИмяВременногоФайла("xml");
	
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента = Новый ЗаписьXML;
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.ОткрытьФайл(ИмяВременногоФайлаОписаниеПакетаЭДО, "windows-1251");
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.ЗаписатьОбъявлениеXML();
	
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.ЗаписатьНачалоЭлемента("ТрансИнф");
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.ЗаписатьАтрибут("ВерсПрог", ВРЕГ(Лев(Метаданные.Имя + " " + СокрЛП(Метаданные.Версия), 40)));
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.ЗаписатьАтрибут("версияФормата", "ФНС:1.0");
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.ЗаписатьАтрибут("идентификаторДокументооборота", РеквизитыПакета.УникальныйИдентификаторЗаявки1СЭДО);
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.ЗаписатьАтрибут("типДокументооборота", "Участник");
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.ЗаписатьАтрибут("типТранзакции", "УчастникНП");
	
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.ЗаписатьНачалоЭлемента("отправитель");
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.ЗаписатьАтрибут("типСубъекта", "абонент");
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.ЗаписатьКонецЭлемента(); // отправитель
	
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.ЗаписатьНачалоЭлемента("получатель");
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.ЗаписатьАтрибут("идентификаторСубъекта", РеквизитыПакета.ОператорЭДОИд);
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.ЗаписатьАтрибут("типСубъекта", "спецоператор");
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.ЗаписатьКонецЭлемента(); // получатель
	
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.ЗаписатьНачалоЭлемента("документ");
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.ЗаписатьАтрибут("идентификаторДокумента", СгенерироватьUUID());
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.ЗаписатьАтрибут("сжат", XMLСтрока(Ложь));
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.ЗаписатьАтрибут("зашифрован", XMLСтрока(Истина));
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.ЗаписатьАтрибут("типДокумента", "участник");
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.ЗаписатьАтрибут("типСодержимого", "xml");
	
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.ЗаписатьНачалоЭлемента("содержимое");
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.ЗаписатьАтрибут("имяФайла", ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ИмяФайла).Имя);
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.ЗаписатьКонецЭлемента(); // содержимое
	
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.ЗаписатьНачалоЭлемента("подпись");
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.ЗаписатьАтрибут("имяФайла", ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ИмяФайлаПодписи).Имя);
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.ЗаписатьКонецЭлемента(); // подпись
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.ЗаписатьКонецЭлемента(); // документ
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.ЗаписатьКонецЭлемента(); // ТрансИнф
	
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.Закрыть();
	
	ДвоичныеДанныеОписаниеПакетаЭДО = Новый ДвоичныеДанные(ИмяВременногоФайлаОписаниеПакетаЭДО);
	УдалитьФайлы(ИмяВременногоФайлаОписаниеПакетаЭДО);
	
	Возврат ДвоичныеДанныеОписаниеПакетаЭДО;
	
КонецФункции

Процедура СоздатьФайлыОписанияПакета(РеквизитыПакета)
	
	// Card
	ЭДКарточки = Новый ЗаписьXML;
	ЭДКарточки.ОткрытьФайл(РеквизитыПакета.ИмяВременногоФайлаЭДКарточки, "windows-1251");
	ЭДКарточки.ЗаписатьОбъявлениеXML();
	
	ЭДКарточки.ЗаписатьНачалоЭлемента("card");
	
	ЭДКарточки.ЗаписатьАтрибут("xmlns:xs", "http://www.w3.org/2001/XMLSchema");
	ЭДКарточки.ЗаписатьАтрибут("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
	ЭДКарточки.ЗаписатьАтрибут("xmlns", "http://www.1c.ru/edo/card");
	
	ЭДКарточки.ЗаписатьНачалоЭлемента("Identifiers");
	ЭДКарточки.ЗаписатьАтрибут("ExternalIdentifier", "packet.zip");
	ЭДКарточки.ЗаписатьКонецЭлемента();
	
	ЭДКарточки.ЗаписатьНачалоЭлемента("Type");
	ЭДКарточки.ЗаписатьАтрибут("Name", "Registration");
	ЭДКарточки.ЗаписатьАтрибут("ResignRequired", XMLСтрока(Истина));
	ЭДКарточки.ЗаписатьКонецЭлемента();
	
	ЭДКарточки.ЗаписатьНачалоЭлемента("Description");
	ЭДКарточки.ЗаписатьАтрибут("Title", "Регистрация");
	ЭДКарточки.ЗаписатьАтрибут("Date", XMLСтрока(ТекущаяДатаСеанса()));
	
	ЭДКарточки.ЗаписатьНачалоЭлемента("AdditionalData");
	
	// Наименование организации.
	ЭДКарточки.ЗаписатьНачалоЭлемента("AdditionalParameter");
	ЭДКарточки.ЗаписатьАтрибут("Name",  "AbonentOrganisationName");
	ЭДКарточки.ЗаписатьАтрибут("Value", РеквизитыПакета.НаименованиеОрганизации);
	ЭДКарточки.ЗаписатьКонецЭлемента();
	
	// Фамилия.
	ЭДКарточки.ЗаписатьНачалоЭлемента("AdditionalParameter");
	ЭДКарточки.ЗаписатьАтрибут("Name",  "AbonentSurname");
	ЭДКарточки.ЗаписатьАтрибут("Value", РеквизитыПакета.Фамилия);
	ЭДКарточки.ЗаписатьКонецЭлемента();
	
	// Имя.
	ЭДКарточки.ЗаписатьНачалоЭлемента("AdditionalParameter");
	ЭДКарточки.ЗаписатьАтрибут("Name",  "AbonentName");
	ЭДКарточки.ЗаписатьАтрибут("Value", РеквизитыПакета.Имя);
	ЭДКарточки.ЗаписатьКонецЭлемента();
	
	// Отчество.
	ЭДКарточки.ЗаписатьНачалоЭлемента("AdditionalParameter");
	ЭДКарточки.ЗаписатьАтрибут("Name",  "AbonentPatronymic");
	ЭДКарточки.ЗаписатьАтрибут("Value", РеквизитыПакета.Отчество);
	ЭДКарточки.ЗаписатьКонецЭлемента();
	
	// ОГРН.
	ЭДКарточки.ЗаписатьНачалоЭлемента("AdditionalParameter");
	ЭДКарточки.ЗаписатьАтрибут("Name",  "AbonentOGRN");
	ЭДКарточки.ЗаписатьАтрибут("Value", РеквизитыПакета.ОГРНОрганизации);
	ЭДКарточки.ЗаписатьКонецЭлемента();
	
	// Сертификаты.
	Для каждого ДанныеСертификата Из РеквизитыПакета.Сертификат Цикл
		ЭДКарточки.ЗаписатьНачалоЭлемента("AdditionalParameter");
		ЭДКарточки.ЗаписатьАтрибут("Name", "Certificate");
		ЭДКарточки.ЗаписатьАтрибут("Value", ДанныеСертификата);
		ЭДКарточки.ЗаписатьКонецЭлемента();
	КонецЦикла;
	
	// Электронная почта.
	ЭДКарточки.ЗаписатьНачалоЭлемента("AdditionalParameter");
	ЭДКарточки.ЗаписатьАтрибут("Name", "Email");
	ЭДКарточки.ЗаписатьАтрибут("Value", РеквизитыПакета.ЭлектроннаяПочта);
	ЭДКарточки.ЗаписатьКонецЭлемента();
	
	ЭДКарточки.ЗаписатьНачалоЭлемента("AdditionalParameter");
	ЭДКарточки.ЗаписатьАтрибут("Name", "OperatorID");
	ЭДКарточки.ЗаписатьАтрибут("Value", РеквизитыПакета.ОператорЭДОИд);
	ЭДКарточки.ЗаписатьКонецЭлемента();
	
	ЭДКарточки.ЗаписатьНачалоЭлемента("AdditionalParameter");
	ЭДКарточки.ЗаписатьАтрибут("Name", "ВерсияБЭД");
	ЭДКарточки.ЗаписатьАтрибут("Value", ОбновлениеИнформационнойБазыЭД.ВерсияБиблиотеки());
	ЭДКарточки.ЗаписатьКонецЭлемента();
	
	ЭДКарточки.ЗаписатьНачалоЭлемента("AdditionalParameter");
	ЭДКарточки.ЗаписатьАтрибут("Name", "ПрикладноеРешение");
	ЭДКарточки.ЗаписатьАтрибут("Value", Метаданные.Имя);
	ЭДКарточки.ЗаписатьКонецЭлемента();
	
	ЭДКарточки.ЗаписатьНачалоЭлемента("AdditionalParameter");
	ЭДКарточки.ЗаписатьАтрибут("Name", "ВерсияПрикладногоРешения");
	ЭДКарточки.ЗаписатьАтрибут("Value", Метаданные.Версия);
	ЭДКарточки.ЗаписатьКонецЭлемента();
	
	ЭДКарточки.ЗаписатьКонецЭлемента();
	ЭДКарточки.ЗаписатьКонецЭлемента();
	
	ЭДКарточки.ЗаписатьНачалоЭлемента("Sender");
	ЭДКарточки.ЗаписатьНачалоЭлемента("Abonent");
	ЭДКарточки.ЗаписатьАтрибут("Name", РеквизитыПакета.НаименованиеОрганизации);
	ЭДКарточки.ЗаписатьАтрибут("Inn", РеквизитыПакета.ИННОрганизации);
	
	Если НЕ ПустаяСтрока(РеквизитыПакета.КППОрганизации) Тогда
		ЭДКарточки.ЗаписатьАтрибут("Kpp", РеквизитыПакета.КППОрганизации);
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(РеквизитыПакета.ИдентификаторОрганизации) Тогда
		ЭДКарточки.ЗаписатьАтрибут("Id", РеквизитыПакета.ИдентификаторОрганизации);
	КонецЕсли;
	
	ЭДКарточки.ЗаписатьКонецЭлемента();
	ЭДКарточки.ЗаписатьКонецЭлемента();
	
	ЭДКарточки.ЗаписатьНачалоЭлемента("Receiver");
	ЭДКарточки.ЗаписатьНачалоЭлемента("Organization");
	ЭДКарточки.ЗаписатьАтрибут("Name", РеквизитыПакета.ОператорЭДО);
	ЭДКарточки.ЗаписатьАтрибут("Type", "SpecOperator");
	ЭДКарточки.ЗаписатьКонецЭлемента();
	ЭДКарточки.ЗаписатьКонецЭлемента();
	
	ЭДКарточки.ЗаписатьКонецЭлемента();
	ЭДКарточки.Закрыть();
	
	// meta
	ЭДТранспортнойИнформации = Новый ЗаписьXML;
	ЭДТранспортнойИнформации.ОткрытьФайл(РеквизитыПакета.ИмяВременногоФайлаЭДТранспортнойИнформации, "windows-1251");
	ЭДТранспортнойИнформации.ЗаписатьОбъявлениеXML();
	
	ЭДТранспортнойИнформации.ЗаписатьНачалоЭлемента("ContainerDescription");
	
	ЭДТранспортнойИнформации.ЗаписатьАтрибут("xmlns:xs", "http://www.w3.org/2001/XMLSchema");
	ЭДТранспортнойИнформации.ЗаписатьАтрибут("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
	ЭДТранспортнойИнформации.ЗаписатьАтрибут("xmlns", "http://www.1c.ru/edo/meta");
	
	ЭДТранспортнойИнформации.ЗаписатьНачалоЭлемента("DocFlow");
	
	ЭДТранспортнойИнформации.ЗаписатьАтрибут("Id", РеквизитыПакета.УникальныйИдентификаторЗаявки1СЭДО);
	
	ЭДТранспортнойИнформации.ЗаписатьНачалоЭлемента("Documents");
	
	ЭДТранспортнойИнформации.ЗаписатьНачалоЭлемента("Document");
	ЭДТранспортнойИнформации.ЗаписатьАтрибут("TransactionCode", "card");
	ЭДТранспортнойИнформации.ЗаписатьАтрибут("ReglamentCode", "Registration");
	ЭДТранспортнойИнформации.ЗаписатьНачалоЭлемента("Files");
	ЭДТранспортнойИнформации.ЗаписатьНачалоЭлемента("MainImage");
	ЭДТранспортнойИнформации.ЗаписатьАтрибут("xmlns:d6p1", "http://www.1c.ru/edo/card");
	ЭДТранспортнойИнформации.ЗаписатьАтрибут("Path", "card.xml");
	ЭДТранспортнойИнформации.ЗаписатьКонецЭлемента(); // MainImage
	ЭДТранспортнойИнформации.ЗаписатьНачалоЭлемента("ExternalCard");
	ЭДТранспортнойИнформации.ЗаписатьАтрибут("xmlns:d6p1", "http://www.1c.ru/edo/card");
	ЭДТранспортнойИнформации.ЗаписатьАтрибут("Path", "card.xml");
	ЭДТранспортнойИнформации.ЗаписатьКонецЭлемента(); // ExternalCard
	ЭДТранспортнойИнформации.ЗаписатьКонецЭлемента(); // Files
	ЭДТранспортнойИнформации.ЗаписатьКонецЭлемента(); // Document
	
	ЭДТранспортнойИнформации.ЗаписатьНачалоЭлемента("Document");
	ЭДТранспортнойИнформации.ЗаписатьАтрибут("TransactionCode", "AccessionAgreement");
	ЭДТранспортнойИнформации.ЗаписатьАтрибут("ReglamentCode", "Registration");
	ЭДТранспортнойИнформации.ЗаписатьНачалоЭлемента("Files");
	ЭДТранспортнойИнформации.ЗаписатьНачалоЭлемента("MainImage");
	ЭДТранспортнойИнформации.ЗаписатьАтрибут("xmlns:d6p1", "http://www.1c.ru/edo/Registration");
	ЭДТранспортнойИнформации.ЗаписатьАтрибут("Path", "packet.zip");
	ЭДТранспортнойИнформации.ЗаписатьКонецЭлемента(); // MainImage
	ЭДТранспортнойИнформации.ЗаписатьНачалоЭлемента("ExternalCard");
	ЭДТранспортнойИнформации.ЗаписатьАтрибут("xmlns:d6p1", "http://www.1c.ru/edo/Registration");
	ЭДТранспортнойИнформации.ЗаписатьАтрибут("Path", "packet.zip");
	ЭДТранспортнойИнформации.ЗаписатьКонецЭлемента(); // ExternalCard
	ЭДТранспортнойИнформации.ЗаписатьКонецЭлемента(); // Files
	ЭДТранспортнойИнформации.ЗаписатьКонецЭлемента(); // Document
	
	ЭДТранспортнойИнформации.ЗаписатьНачалоЭлемента("Document");
	ЭДТранспортнойИнформации.ЗаписатьАтрибут("TransactionCode", "LicenseCard");
	ЭДТранспортнойИнформации.ЗаписатьАтрибут("ReglamentCode", "Registration");
	ЭДТранспортнойИнформации.ЗаписатьНачалоЭлемента("Files");
	ЭДТранспортнойИнформации.ЗаписатьНачалоЭлемента("MainImage");
	ЭДТранспортнойИнформации.ЗаписатьАтрибут("xmlns:d6p1", "http://www.1c.ru/edo/LicenseCard");
	ЭДТранспортнойИнформации.ЗаписатьАтрибут("Path", "LicenseCard.zip");
	ЭДТранспортнойИнформации.ЗаписатьКонецЭлемента(); // MainImage
	ЭДТранспортнойИнформации.ЗаписатьНачалоЭлемента("ExternalCard");
	ЭДТранспортнойИнформации.ЗаписатьАтрибут("xmlns:d6p1", "http://www.1c.ru/edo/LicenseCard");
	ЭДТранспортнойИнформации.ЗаписатьАтрибут("Path", "LicenseCard.zip");
	ЭДТранспортнойИнформации.ЗаписатьКонецЭлемента(); // ExternalCard
	ЭДТранспортнойИнформации.ЗаписатьКонецЭлемента(); // Files
	ЭДТранспортнойИнформации.ЗаписатьКонецЭлемента(); // Document
	
	ЭДТранспортнойИнформации.ЗаписатьКонецЭлемента(); // Documents
	
	ЭДТранспортнойИнформации.ЗаписатьКонецЭлемента(); // DocFlow
	
	ЭДТранспортнойИнформации.ЗаписатьКонецЭлемента(); // ContainerDescription
	ЭДТранспортнойИнформации.Закрыть();
	
КонецПроцедуры

// Только для внутреннего использования
Функция ПрочитатьТекстИзФайла(ИмяФайла, Кодировка = Неопределено, АвтоопределениеКодировкиXML = Ложь) Экспорт
	
	Если ЭтоАдресВременногоХранилища(ИмяФайла) Тогда
		ИмяФайлаНаДиске = ПолучитьИмяВременногоФайла();
		ПолучитьИзВременногоХранилища(ИмяФайла).Записать(ИмяФайлаНаДиске);
	Иначе
		ИмяФайлаНаДиске = ИмяФайла;
	КонецЕсли;
	
	ОбъектЧтение = Новый ЧтениеТекста(ИмяФайлаНаДиске, Кодировка);
	ТекстИзФайла = ОбъектЧтение.Прочитать();
	ОбъектЧтение.Закрыть();
	
	Если АвтоопределениеКодировкиXML И ЗначениеЗаполнено(ТекстИзФайла) Тогда
		ПерваяСтрокаФайла = ВРЕГ(Лев(СтрПолучитьСтроку(ТекстИзФайла, 1), 100));
		Если Найти(ПерваяСтрокаФайла, ВРЕГ("encoding=""UTF-8""")) <> 0 Тогда
			ТекстИзФайла = ПрочитатьТекстИзФайла(ИмяФайла, КодировкаТекста.UTF8);
		ИначеЕсли Найти(ПерваяСтрокаФайла, ВРЕГ("encoding=""UTF-16""")) <> 0 Тогда
			ТекстИзФайла = ПрочитатьТекстИзФайла(ИмяФайла, КодировкаТекста.UTF16);
		КонецЕсли;
	КонецЕсли;
	
	УдалитьФайлы(ИмяФайлаНаДиске);
	
	Возврат ТекстИзФайла;
	
КонецФункции

// Только для внутреннего использования
Функция ЗагрузитьСтрокуXMLВДеревоЗначений(СтрокаXML, ОписаниеОшибки = Неопределено, ЧтениеXML = Неопределено, Знач ТекУзел = Неопределено) Экспорт
	
	ПерваяИтерация = (ТекУзел = Неопределено);
	Если ПерваяИтерация Тогда
		ТекУзел = СоздатьДеревоСтруктурыXML();
		Попытка
			ЧтениеXML = Новый ЧтениеXML;
			ЧтениеXML.УстановитьСтроку(СтрокаXML);
		Исключение
			ОписаниеОшибки = "Ошибка разбора XML: " + ИнформацияОбОшибке().Описание + ".";
			Возврат Неопределено;
		КонецПопытки;
	КонецЕсли;
	
	Попытка
		Пока ЧтениеXML.Прочитать() Цикл
			ТипУзла = ЧтениеXML.ТипУзла;
			Если ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
				НовУзел = ТекУзел.Строки.Добавить();
				НовУзел.Имя = ЧтениеXML.Имя;
				НовУзел.Тип = "Э";
				НовУзел.Значение = ЧтениеXML.Значение;
				Пока ЧтениеXML.ПрочитатьАтрибут() Цикл
					НовАтрибут = НовУзел.Строки.Добавить();
					НовАтрибут.Имя = ЧтениеXML.Имя;
					НовАтрибут.Тип = "А";
					НовАтрибут.Значение = ЧтениеXML.Значение;
				КонецЦикла;
				ЗагрузитьСтрокуXMLВДеревоЗначений(СтрокаXML, ОписаниеОшибки, ЧтениеXML, НовУзел);
				Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
					Возврат Неопределено;
				КонецЕсли;
			ИначеЕсли ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
				Прервать;
			ИначеЕсли ТипУзла = ТипУзлаXML.Текст И ТипЗнч(ТекУзел) = Тип("СтрокаДереваЗначений") И ТекУзел.Тип = "Э" Тогда
				ТекУзел.Значение = ЧтениеXML.Значение;
			КонецЕсли;
		КонецЦикла;
	Исключение
		ОписаниеОшибки = "Ошибка разбора XML: " + ИнформацияОбОшибке().Описание + ".";
		Возврат Неопределено;
	КонецПопытки;
	
	Если ПерваяИтерация Тогда
		Возврат ТекУзел;
	КонецЕсли;
	
КонецФункции

// Только для внутреннего использования
Функция СоздатьДеревоСтруктурыXML() Экспорт
	
	ДеревоСтруктуры = Новый ДеревоЗначений;
	ДеревоСтруктуры.Колонки.Добавить("Имя");
	ДеревоСтруктуры.Колонки.Добавить("Тип");
	ДеревоСтруктуры.Колонки.Добавить("Значение");
	Возврат ДеревоСтруктуры;
	
КонецФункции

// Только для внутреннего использования
Процедура ОтправитьРегистрационныйПакет1СЭДО(Знач Файл, ПараметрыАутентификации, ЕстьОшибки) Экспорт
	
	// Если доступа к вебсервису нет, то работу с ним прекращаем.
	Если Не ЕстьДоступКВебСервису1CЭДО(Истина) Тогда
		ЕстьОшибки = Истина;
		Возврат;
	КонецЕсли;

	Билет = БилетНаСайтПоддержки(ПараметрыАутентификации);
	Если Не ЗначениеЗаполнено(Билет) Тогда
		Возврат;
	КонецЕсли;
	
	ФайлДляОтправки = Новый Файл(Файл);
	Соединение = ЭлектронныеДокументыВнутренний.ПолучитьСоединение(Перечисления.СпособыОбменаЭД.ЧерезСервис1СЭДО,
		ЭлектронныеДокументыВнутренний.ТаймаутПоРазмеруФайла(ФайлДляОтправки.Размер()));
	АдресРесурса = "SendRequest?ticket=" + Билет;
	
	// возможно будет ответ от сервера
	ИмяФайлаРезультата = ТекущееИмяВременногоФайла("txt");
	Попытка
		Соединение.ОтправитьДляОбработки(Файл, АдресРесурса, ИмяФайлаРезультата);
	Исключение
		ЕстьОшибки = Истина;
		ТекстСообщения = "При отправке заявления о регистрации на сервисе 1С-ЭДО возникла ошибка :" + ОписаниеОшибки();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		УдалитьФайлы(ИмяФайлаРезультата);
	КонецПопытки;
	УдалитьФайлы(Файл);
	
КонецПроцедуры

// Только для внутреннего использования
Функция ПолучитьФайлОтветаОтСервераЭДО(АдресРесурса, ПараметрЗапросаОтветаОтСервера = Неопределено, Отказ = Ложь) Экспорт
	
	// Если доступа к вебсервису нет, то работу с ним прекращаем.
	Если Не ЕстьДоступКВебСервису1CЭДО(Истина) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Соединение = ЭлектронныеДокументыВнутренний.ПолучитьСоединение(Перечисления.СпособыОбменаЭД.ЧерезСервис1СЭДО, 60);
	
	ИмяФайлаРезультата = ТекущееИмяВременногоФайла("xml");
	Если ПараметрЗапросаОтветаОтСервера <> Неопределено Тогда
		АдресРесурса = АдресРесурса + "/" + ПараметрЗапросаОтветаОтСервера;
	КонецЕсли;
	
	Попытка
		Соединение.Получить(АдресРесурса, ИмяФайлаРезультата);
	Исключение
		Отказ = Истина;
		ФайлРезультата = Новый ТекстовыйДокумент;
		ФайлРезультата.Прочитать(ИмяФайлаРезультата, КодировкаТекста.UTF8);
		Результат = ФайлРезультата.ПолучитьТекст();
		
		ТекстЗаголовкаСообщения = НСтр("ru = 'При работе с сервисом 1С-ЭДО возникла ошибка:'");
		
		ТекстСообщения = "";
		Если ЗначениеЗаполнено(Результат) Тогда
			Результат = СтрЗаменить(Результат, """", "");
			Результат = СтрЗаменить(Результат, ":", ",");
			МассивПараметровОшибки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Результат, ",");
			Если МассивПараметровОшибки.Количество() >= 7 Тогда
				
				КодОшибки = МассивПараметровОшибки[5];
				
				ШаблонОшибки = НСтр("ru = '%1: %2.'");
				ТекстОшибкиЭДО = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибки,
					МассивПараметровОшибки[7], МассивПараметровОшибки[1]);
				
				ТекстОшибки = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьСообщениеОбОшибке(
					КодОшибки, ТекстОшибкиЭДО);
				
				ТекстСообщения = ТекстЗаголовкаСообщения + Символы.ПС + ТекстОшибки;
			КонецЕсли;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ТекстСообщения) Тогда
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			Результат = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
			ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
		КонецЕсли;
		
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(ТекстЗаголовкаСообщения,
																					Результат,
																					ТекстСообщения);
	
	КонецПопытки;
	
	Возврат ИмяФайлаРезультата;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПроверкаСостоянияКонтрагентовВ1СЭДО

// Часть фонового задания по проверке контрагента из формы контрагента
Процедура ПроверитьКонтрагентаФоновоеЗадание(Параметры) Экспорт
	
	// Присвоение даты находится здесь, так как ТекущаяДатаСеанса работает только на сервере
	Если Не Параметры.Свойство("Дата") Тогда
		Параметры.Вставить("Дата", НачалоДня(ТекущаяДатаСеанса()));
	КонецЕсли;
	
	Попытка
		ПроверитьКонтрагента(Параметры);
	Исключение
		
		Операция = Нстр("ru = 'Проверка подключения контрагента к 1С-ЭДО из формы контрагента.'");
		ПодробныйТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(Операция, ПодробныйТекстОшибки);
	КонецПопытки;
	
КонецПроцедуры

// Процедура - Проверка одного контрагента по ИНН, КПП и Дате.
//
// Параметры:
//  Параметры	 - Структура - Параметры запуска фонового задания. Ключи структуры:
//		"Контрагент" - СправочникСсылка.<Контрагенты> - Проверяемый контрагент.
//		"ИНН"		 - Строка - ИНН Контрагента.
//		"КПП"		 - Строка - КПП Контрагента.
//		"Дата"		 - Дата - Дата, на которую выполняется проверка контрагента. Может быть не указана,
//		                  тогда берется текущая дата.
//		"СохранятьРезультатСразуПослеПроверки" - Булево - Признак, указывающий нужно ли результат
//		                  проверки контрагента сразу сохранять в регистр.
//		"АдресХранилища" - Строка - Адрес, в который будет помещен результат проверки контрагента.
//  АдресХранилища	 - Строка - Адрес временного хранилища, в который будет помещен результат проверки контрагента.
Процедура ПроверитьКонтрагента(Параметры) Экспорт 
	
	// Готовим данные в нужном формате для передачи на проверку.
	ДанныеКонтрагентов = ШаблонТаблицыДанныеКонтрагента();
	
	НоваяСтрока = ДанныеКонтрагентов.Добавить();
	Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса") Тогда
		НоваяСтрока.ОбластьДанныхВспомогательныеДанные = ОбщегоНазначения.ЗначениеРазделителяСеанса();
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(НоваяСтрока, Параметры);
	
	ПроверитьКонтрагентов(ДанныеКонтрагентов, Истина, Параметры.СохранятьРезультатСразуПослеПроверки);
	
КонецПроцедуры

// Процедура - Проверка нескольких контрагентов.
//
// Параметры:
//  ДанныеКонтрагентов					 - ТаблицаЗначений - Содержит данные проверяемых контрагентов. 
//		Структуру колонок таблицы см в функции ШаблонТаблицыДанныеКонтрагента.
//  АдресХранилища						 - Строка - Адрес, в который будет помещен результат проверки контрагента.
//  ЭтоПроверкаСправочника				 - Булево - Указывает, выполняется ли проверка справочника. 
//		Для справочника результат проверки сохраняется во временное хранилище, либо записывается в регистр.
//		Для остальных объектов результат проверки заполняется в колонке Состояние таблицы ДанныеКонтрагентов.
//  СохранятьРезультатСразуПослеПроверки - Булево - Признак, указывающий нужно ли результат проверки контрагента.
Процедура ПроверитьКонтрагентов(ДанныеКонтрагентов, ЭтоПроверкаСправочника = Истина, СохранятьРезультатСразуПослеПроверки = Ложь) Экспорт
	
	// Если доступа к вебсервису нет, то проверку не делаем.
	Если Не ЕстьДоступКВебСервису1CЭДО() Тогда
		Возврат;
	КонецЕсли;
	
	// Если по некоторым контрагентам можно определить, что они не существуют, не обращаясь к сервису, то к сервису по ним
	// обращаться не будем.
	Если ЭтоПроверкаСправочника Тогда
		ПолучитьСостоянияКонтрагентовИзКэша(ДанныеКонтрагентов);
	КонецЕсли;

	// Приведение данных к нужному формату, выявление записей с ошибками.
	ПодготовитьДанныеКПроверке(ДанныеКонтрагентов);
	
	// Получение результатов проверки от веб-сервиса.
	// Проверяем только тех контрагентов, у которых неопределено состояние и у которых нет ошибок.
	Отбор = Новый Структура();
	Отбор.Вставить("Состояние", Перечисления.СостоянияКонтрагентаБЭД.ПустаяСсылка());
	ПолучитьРезультатПроверкиВебСервисом(ДанныеКонтрагентов, Отбор);
	
	// Сохраняем результаты проверки, если это справочник.
	Если ЭтоПроверкаСправочника Тогда
		УстановитьПривилегированныйРежим(Истина);
		СохранитьРезультатыПроверкиСправочника(ДанныеКонтрагентов, СохранятьРезультатСразуПослеПроверки);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьНепроверенныхКонтрагентов(ЭтоОбновлениеИБВМоделиСервиса, Параметры = Неопределено) Экспорт
	
	// Выбираем контрагентов, которых нет в регистре сведений.
	Запрос = Новый Запрос;
	Текст = 
	"ВЫБРАТЬ %5
	|	Контрагенты.Ссылка КАК Контрагент,
	|	Контрагенты.%1 КАК ИНН,
	|	Контрагенты.%2 КАК КПП,
	|	&ОбластьДанныхВспомогательныеДанные КАК ОбластьДанныхВспомогательныеДанные,
	|	&Дата КАК Дата
	|ИЗ
	|	Справочник.%3 КАК Контрагенты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияКонтрагентовБЭД КАК СостоянияКонтрагентовБЭД
	|		ПО Контрагенты.Ссылка = СостоянияКонтрагентовБЭД.Контрагент
	|ГДЕ
	|	(СостоянияКонтрагентовБЭД.Состояние ЕСТЬ NULL 
	|	ИЛИ СостоянияКонтрагентовБЭД.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияКонтрагентаБЭД.НеПодключен))
	|	%4";
		
	Если НЕ ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса") Тогда
		
		Текст = СтрЗаменить(
			Текст,
			"&ОбластьДанныхВспомогательныеДанные КАК ОбластьДанныхВспомогательныеДанные,",
			"");
		
	КонецЕсли;
	
	ИмяПрикладногоСправочника = ЭлектронныеДокументыПовтИсп.ПолучитьИмяПрикладногоСправочника("Контрагенты");
	ИмяРеквизитаИННКонтрагента = ЭлектронныеДокументыПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("ИННКонтрагента");
	ИмяРеквизитаКППКонтрагента = ЭлектронныеДокументыПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("КППКонтрагента");
	
	УсловиеНаГруппу = "";
	Если СправочникКонтрагентовИерархический() Тогда
		УсловиеНаГруппу = "И Контрагенты.ЭтоГруппа = ЛОЖЬ";
	КонецЕсли;
	
	ОграничениеНаПрава = "";
	Если ЭтоОбновлениеИБВМоделиСервиса Тогда
		РазмерПорции = 1000;
		ОграничениеНаПрава = "РАЗЛИЧНЫЕ ПЕРВЫЕ " + Формат(РазмерПорции, "ЧГ=0");
	Иначе
		ОграничениеНаПрава = "РАЗЛИЧНЫЕ";
	КонецЕсли;
	
	Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст,
		ИмяРеквизитаИННКонтрагента,
		ИмяРеквизитаКППКонтрагента,
		ИмяПрикладногоСправочника,
		УсловиеНаГруппу,
		ОграничениеНаПрава);
		
	Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса") Тогда
		Запрос.УстановитьПараметр("ОбластьДанныхВспомогательныеДанные", ОбщегоНазначения.ЗначениеРазделителяСеанса());
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Дата", НачалоДня(ТекущаяДатаСеанса()));
	ДанныеКонтрагентов = Запрос.Выполнить().Выгрузить();
	
	// Прерываем обновление, если не осталось необработанных данных.
	Если ЭтоОбновлениеИБВМоделиСервиса Тогда
		Параметры.ОбработкаЗавершена = ДанныеКонтрагентов.Количество() = 0;
		Если Параметры.ОбработкаЗавершена Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ПроверитьКонтрагентов(ДанныеКонтрагентов);
	
КонецПроцедуры

// ПроверкаКонтрагентовВСправочнике

// Подписка на событие. Добавление в регистр набора ИНН и КПП для последующей проверки регламентным заданием.
//
// Параметры:
//  КонтрагентОбъект - СправочникОбъект.<Контрагенты> - записываемый контрагент.
//  Отказ			 - Булево - Параметр обработчика подписки на событие.
Процедура СохранитьРезультатПроверкиКонтрагентаПриЗаписи(КонтрагентОбъект, Отказ) Экспорт 
	
	Если КонтрагентОбъект.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если СправочникКонтрагентовИерархический() И КонтрагентОбъект.ЭтоГруппа Тогда
		Возврат;
	КонецЕсли;
	
	ИмяРеквизитаИННКонтрагента = ЭлектронныеДокументыПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("ИННКонтрагента");
	ИмяРеквизитаКППКонтрагента = ЭлектронныеДокументыПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("КППКонтрагента");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СостоянияКонтрагентовБЭД.Состояние
	|ИЗ
	|	РегистрСведений.СостоянияКонтрагентовБЭД КАК СостоянияКонтрагентовБЭД
	|ГДЕ
	|	СостоянияКонтрагентовБЭД.Контрагент = &Контрагент
	|	И СостоянияКонтрагентовБЭД.ИНН = &ИНН
	|	И СостоянияКонтрагентовБЭД.КПП = &КПП";
	
	Запрос.УстановитьПараметр("ИНН", КонтрагентОбъект[ИмяРеквизитаИННКонтрагента]);
	Запрос.УстановитьПараметр("КПП", КонтрагентОбъект[ИмяРеквизитаКППКонтрагента]);
	Запрос.УстановитьПараметр("Контрагент", КонтрагентОбъект.Ссылка);
	
	Если Не Запрос.Выполнить().Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеКонтрагента = Новый Структура;
	
	ДанныеКонтрагента.Вставить("Контрагент",	КонтрагентОбъект.Ссылка);
	ДанныеКонтрагента.Вставить("ИНН", 			КонтрагентОбъект[ИмяРеквизитаИННКонтрагента]);
	ДанныеКонтрагента.Вставить("КПП",			КонтрагентОбъект[ИмяРеквизитаКППКонтрагента]);
	ДанныеКонтрагента.Вставить("Дата", 			НачалоДня(ТекущаяДатаСеанса()));
	ДанныеКонтрагента.Вставить("Состояние", 	Перечисления.СостоянияКонтрагентаБЭД.НеПодключен);
	
	Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса") Тогда
		ДанныеКонтрагента.Вставить("ОбластьДанныхВспомогательныеДанные", ОбщегоНазначения.ЗначениеРазделителяСеанса());
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	СохранитьРезультатыПроверкиКонтрагентаВРегистр(ДанныеКонтрагента);
	
КонецПроцедуры

// ПодготовкаДанныхКПроверке

// Проверка ошибок, удаление дублей.
Процедура ПодготовитьДанныеКПроверке(ДанныеКонтрагентовДляПроверки)
	
	ДанныеКонтрагентов = ДанныеКонтрагентовТипизированные(ДанныеКонтрагентовДляПроверки);
	ОставитьРазрешенныхКонтрагентов(ДанныеКонтрагентов);
	СвернутьДанныеКонтрагентов(ДанныеКонтрагентов);
	
	ДанныеКонтрагентовДляПроверки = ДанныеКонтрагентов;
	
КонецПроцедуры

Функция ДанныеКонтрагентовТипизированные(ДанныеКонтрагентовДляПроверки)
	
	// Создаем таблицу
	ДанныеКонтрагентов = ШаблонТаблицыДанныеКонтрагента();
	ЕстьОбластьДанных = ДанныеКонтрагентовДляПроверки.Колонки.Найти("ОбластьДанныхВспомогательныеДанные") <> Неопределено И ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса");
	
	// Копируем таблицу, сохраняя типы колонок.
	Для каждого ДанныеКонтрагентаДляПроверки Из ДанныеКонтрагентовДляПроверки Цикл
		
		// Копируем данные из таблицы с "сырыми данными" в таблицу с "типизированными" колонками.
		ДанныеКонтрагента = ДанныеКонтрагентов.Добавить();
		
		// В зависимости от наличия колонки ОбластьДанныхВспомогательныеДанные, копируем разный набор данных.
		СписокСвойств = "Контрагент, ИНН, КПП, Состояние, Дата";
		Если ЕстьОбластьДанных Тогда
			СписокСвойств = СписокСвойств + ", ОбластьДанныхВспомогательныеДанные";
		КонецЕсли;
		
		// Не выполняем проверку, если поля не заполнены.
		Если Не ЗначениеЗаполнено(ДанныеКонтрагентаДляПроверки.ИНН) И Не ЗначениеЗаполнено(ДанныеКонтрагентаДляПроверки.КПП) Тогда
			ДанныеКонтрагентаДляПроверки.Состояние = Перечисления.СостоянияКонтрагентаБЭД.НеПодключен;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ДанныеКонтрагента, ДанныеКонтрагентаДляПроверки, СписокСвойств);
		
	КонецЦикла;
	
	Возврат ДанныеКонтрагентов;
	
КонецФункции

Процедура СвернутьДанныеКонтрагентов(ДанныеКонтрагентов)
	
	// Удаляем из таблицы дубли
	Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса") Тогда
		ДанныеКонтрагентов.Свернуть("Контрагент, ИНН, КПП, Дата, Состояние, ОбластьДанныхВспомогательныеДанные");
	Иначе
		ДанныеКонтрагентов.Свернуть("Контрагент, ИНН, КПП, Дата, Состояние");
	КонецЕсли;
	
КонецПроцедуры

// Процедура - В таблице ДанныеКонтрагентов оставляет только записи по контрагентам,
//		к которым есть доступ. В модели сервиса из неразделенной области проверку делать
//		не нужно, поскольку регламентное задание выполняется под администратором 
//		и нет доступа к разделенному справочнику контрагентов.
//
Процедура ОставитьРазрешенныхКонтрагентов(ДанныеКонтрагентов)
	
	РазделениеВключено = ОбщегоНазначенияПовтИсп.РазделениеВключено();
	
	Если НЕ РазделениеВключено
		ИЛИ РазделениеВключено И ОбщегоНазначенияПовтИсп.ДоступноИспользованиеРазделенныхДанных() Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ДанныеКонтрагентов.Контрагент,
			|	ДанныеКонтрагентов.ИНН,
			|	ДанныеКонтрагентов.КПП,
			|	ДанныеКонтрагентов.Дата,
			|	ДанныеКонтрагентов.ОбластьДанныхВспомогательныеДанные,
			|	ДанныеКонтрагентов.Состояние
			|ПОМЕСТИТЬ ВсеДанныеКонтрагентов
			|ИЗ
			|	&ДанныеКонтрагентов КАК ДанныеКонтрагентов
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	ВсеДанныеКонтрагентов.Контрагент КАК Контрагент
			|ПОМЕСТИТЬ ВсеКонтрагенты
			|ИЗ
			|	Справочник.%1 КАК СправочникКонтрагентов
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВсеДанныеКонтрагентов КАК ВсеДанныеКонтрагентов
			|		ПО СправочникКонтрагентов.Ссылка = ВсеДанныеКонтрагентов.Контрагент
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ВсеДанныеКонтрагентов.Контрагент,
			|	ВсеДанныеКонтрагентов.ИНН,
			|	ВсеДанныеКонтрагентов.КПП,
			|	ВсеДанныеКонтрагентов.Дата,
			|	ВсеДанныеКонтрагентов.ОбластьДанныхВспомогательныеДанные,
			|	ВсеДанныеКонтрагентов.Состояние
			|ИЗ
			|	ВсеДанныеКонтрагентов КАК ВсеДанныеКонтрагентов
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВсеКонтрагенты КАК ВсеКонтрагенты
			|		ПО (ВсеКонтрагенты.Контрагент = ВсеДанныеКонтрагентов.Контрагент)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ВсеДанныеКонтрагентов.Контрагент,
			|	ВсеДанныеКонтрагентов.ИНН,
			|	ВсеДанныеКонтрагентов.КПП,
			|	ВсеДанныеКонтрагентов.Дата,
			|	ВсеДанныеКонтрагентов.ОбластьДанныхВспомогательныеДанные,
			|	ВсеДанныеКонтрагентов.Состояние
			|ИЗ
			|	ВсеДанныеКонтрагентов КАК ВсеДанныеКонтрагентов
			|ГДЕ
			|	ВсеДанныеКонтрагентов.Контрагент = ЗНАЧЕНИЕ(Справочник.%1.ПустаяСсылка)";
			
		Если НЕ ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса") Тогда
			
			Запрос.Текст = СтрЗаменить(
				Запрос.Текст,
				"ВсеДанныеКонтрагентов.ОбластьДанныхВспомогательныеДанные,",
				"");
				
			Запрос.Текст = СтрЗаменить(
				Запрос.Текст,
				"ДанныеКонтрагентов.ОбластьДанныхВспомогательныеДанные,",
				"");
				
		КонецЕсли;
			
		ИмяПрикладногоСправочника = ЭлектронныеДокументыПовтИсп.ПолучитьИмяПрикладногоСправочника("Контрагенты");
		Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Запрос.Текст, ИмяПрикладногоСправочника);
			
		Запрос.УстановитьПараметр("ДанныеКонтрагентов", ДанныеКонтрагентов);
		ДанныеКонтрагентов = Запрос.Выполнить().Выгрузить();
		
	КонецЕсли;
	
КонецПроцедуры

// РаботаСВебСервисом

Процедура ПолучитьРезультатПроверкиВебСервисом(ДанныеКонтрагентов, Отбор)
	
	// Проверяем только тех контрагентов, которые соответствуют указанному отбору
	ДанныеКонтрагентовДляПроверкиСервисом = ДанныеКонтрагентов.НайтиСтроки(Отбор);
	КоличествоКонтрагентов = ДанныеКонтрагентовДляПроверкиСервисом.Количество();

	Если КоличествоКонтрагентов = 0 Тогда
		// Нет данных для проверки
		Возврат;
	КонецЕсли;
	
	РазмерПорции = 10000;
	
	// Разбиваем всю таблицу на блоки запросов 
	КоличествоЗапросов = ?(КоличествоКонтрагентов % РазмерПорции = 0, КоличествоКонтрагентов / РазмерПорции, Цел(КоличествоКонтрагентов / РазмерПорции) + 1);
	
	// Выполняем несколько запросов. В каждом запросе не более 10000 строк
	Для НомерПорции = 1 По КоличествоЗапросов Цикл 
		
		МинимальныйНомерКонтрагента 	= Мин(РазмерПорции * (НомерПорции - 1), КоличествоКонтрагентов);
		МаксимальныйНомерКонтрагента 	= Мин(РазмерПорции * НомерПорции, КоличествоКонтрагентов) - 1;
		
		ИмяВременногоФайлаЗапросаСостояний = ТекущееИмяВременногоФайла("xml");
		ЗапросСостояний = Новый ЗаписьXML;
		ЗапросСостояний.ОткрытьФайл(ИмяВременногоФайлаЗапросаСостояний, "windows-1251");
		ЗапросСостояний.ЗаписатьОбъявлениеXML();
		ЗапросСостояний.ЗаписатьНачалоЭлемента("Abonents");
			
		Для ИндексТекущегоКонтрагента = МинимальныйНомерКонтрагента По МаксимальныйНомерКонтрагента Цикл
			
			ДанныеКонтрагента = ДанныеКонтрагентовДляПроверкиСервисом[ИндексТекущегоКонтрагента];
			
			ЗапросСостояний.ЗаписатьНачалоЭлемента("Abonent");
				ЗапросСостояний.ЗаписатьНачалоЭлемента("INN");
					ЗапросСостояний.ЗаписатьТекст(ДанныеКонтрагента.ИНН);
				ЗапросСостояний.ЗаписатьКонецЭлемента();
				ЗапросСостояний.ЗаписатьНачалоЭлемента("KPP");
					ЗапросСостояний.ЗаписатьТекст(ДанныеКонтрагента.КПП);
				ЗапросСостояний.ЗаписатьКонецЭлемента();
			ЗапросСостояний.ЗаписатьКонецЭлемента();
			
		КонецЦикла;
		ЗапросСостояний.ЗаписатьКонецЭлемента();
		ЗапросСостояний.Закрыть();
		
		ФайлЗапросаСостояний = Новый Файл(ИмяВременногоФайлаЗапросаСостояний);
		Соединение = ЭлектронныеДокументыВнутренний.ПолучитьСоединение(Перечисления.СпособыОбменаЭД.ЧерезСервис1СЭДО,
			ЭлектронныеДокументыВнутренний.ТаймаутПоРазмеруФайла(ФайлЗапросаСостояний.Размер()));
		АдресРесурса = "GetMassInfo";
		
		// возможно будет ответ от сервера
		ИмяФайлаРезультата = ТекущееИмяВременногоФайла("xml"); ДанныеФайла = "";
		Если Не ЕстьДоступКВебСервису1CЭДО() Тогда
			Возврат;
		КонецЕсли;
		Попытка
			Соединение.ОтправитьДляОбработки(ИмяВременногоФайлаЗапросаСостояний, АдресРесурса, ИмяФайлаРезультата);
			
			ДанныеФайла = ПрочитатьТекстИзФайла(ИмяФайлаРезультата, , Истина);
			ОбработатьОтветСервиса(ДанныеФайла, ДанныеКонтрагентовДляПроверкиСервисом, МинимальныйНомерКонтрагента, МаксимальныйНомерКонтрагента);
		Исключение
			ЕстьОшибки = Истина;
			
			ФайлРезультата = Новый ТекстовыйДокумент;
			ФайлРезультата.Прочитать(ИмяФайлаРезультата, КодировкаТекста.UTF8);
			Результат = ФайлРезультата.ПолучитьТекст();
			
			ШаблонСообщения = НСтр("ru = 'При проверке состояния контрагентов на сервисе 1С-ЭДО возникла ошибка:'");
			
			Файл = Новый Файл(Файл);
			ТекстЗаголовкаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонСообщения, Файл.Имя);
				
			ТекстСообщения = "";
			Если ЗначениеЗаполнено(Результат) Тогда
				Результат = СтрЗаменить(Результат, """", "");
				Результат = СтрЗаменить(Результат, ":", ",");
				МассивПараметровОшибки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Результат, ",");
				Если МассивПараметровОшибки.Количество() >= 7 Тогда
					
					КодОшибки = МассивПараметровОшибки[5];
					
					ШаблонОшибки = НСтр("ru = '%1: %2.'");
					ТекстОшибкиЭДО = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибки,
						МассивПараметровОшибки[7], МассивПараметровОшибки[1]);
					
					ТекстОшибки = ЭлектронныеДокументыПовтИсп.ПолучитьСообщениеОбОшибке(
						КодОшибки, ТекстОшибкиЭДО);
					
					ТекстСообщения = ТекстЗаголовкаСообщения + Символы.ПС + ТекстОшибки;
				КонецЕсли;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ТекстСообщения) Тогда
				ИнформацияОбОшибке = ИнформацияОбОшибке();
				Результат = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
				ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
			КонецЕсли;
			
			ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(ТекстЗаголовкаСообщения,
				Результат, ТекстСообщения);
		КонецПопытки;
		
		УдалитьФайлы(ИмяВременногоФайлаЗапросаСостояний);
		УдалитьФайлы(ИмяФайлаРезультата);
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработатьОтветСервиса(ДанныеФайла, ДанныеКонтрагентовДляПроверкиСервисом, МинимальныйНомерКонтрагента, МаксимальныйНомерКонтрагента)
	
	Если НЕ ПустаяСтрока(ДанныеФайла) Тогда
		
		ИННКПП = Новый Массив;
		ПрочитатьИННКППИзФайла(ИННКПП, ДанныеФайла);
		
		Если ИННКПП.Количество() >0 Тогда
			
			Для ИндексТекущегоКонтрагента = МинимальныйНомерКонтрагента По МаксимальныйНомерКонтрагента Цикл
				
				ДанныеКонтрагента = ДанныеКонтрагентовДляПроверкиСервисом[ИндексТекущегоКонтрагента];
				
				КлючПоиска = ДанныеКонтрагента.ИНН + ?(ЗначениеЗаполнено(ДанныеКонтрагента.КПП), "/"+ДанныеКонтрагента.КПП, "");
				
				НайденныйКонтрагент = ИННКПП.Найти(КлючПоиска);
				Если Не НайденныйКонтрагент = Неопределено Тогда
					ДанныеКонтрагента.Состояние = Перечисления.СостоянияКонтрагентаБЭД.Подключен;
				Иначе
					ДанныеКонтрагента.Состояние = Перечисления.СостоянияКонтрагентаБЭД.НеПодключен;
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// ЗаписьРезультатаПроверкиВРегистрСведений

// Проверка нескольких контрагентов.
Процедура СохранитьРезультатыПроверкиСправочника(ДанныеКонтрагентов, СохранятьРезультатСразуПослеПроверки = Ложь)
	
	Если ДанныеКонтрагентов.Количество() = 1 Тогда
		
		ДанныеКонтрагента = ДанныеКонтрагентов[0]; 
		
		// Сохраняем в регистр
		Если ЗначениеЗаполнено(ДанныеКонтрагента.Контрагент) 
			И СохранятьРезультатСразуПослеПроверки Тогда
			
			СохранитьРезультатыПроверкиКонтрагентовВРегистр(ДанныеКонтрагентов);
			
		КонецЕсли;
		
	Иначе
		
		СохранитьРезультатыПроверкиКонтрагентовВРегистр(ДанныеКонтрагентов);
		
	КонецЕсли;
		
КонецПроцедуры

Процедура СохранитьРезультатыПроверкиКонтрагентовВРегистр(ДанныеКонтрагентов)
	
	Для каждого ДанныеКонтрагента Из ДанныеКонтрагентов Цикл
		СохранитьРезультатыПроверкиКонтрагентаВРегистр(ДанныеКонтрагента);
	КонецЦикла;
	
КонецПроцедуры

Процедура СохранитьРезультатыПроверкиКонтрагентаВРегистр(ДанныеКонтрагента)
	
	Попытка
		
		Контрагент = ДанныеКонтрагента.Контрагент;
		
		// Блокируем по Контрагенту
		СтруктураКлюча = Новый Структура();
		СтруктураКлюча.Вставить("Контрагент", Контрагент);
		
		Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса") Тогда
			ОбластьДанныхВспомогательныеДанные	= ДанныеКонтрагента.ОбластьДанныхВспомогательныеДанные;
			СтруктураКлюча.Вставить("ОбластьДанныхВспомогательныеДанные", ОбластьДанныхВспомогательныеДанные);
		КонецЕсли;

		Ключ = РегистрыСведений.СостоянияКонтрагентовБЭД.СоздатьКлючЗаписи(СтруктураКлюча);
		ЗаблокироватьДанныеДляРедактирования(Ключ);
		
		// Записываем данные в регистр.
		НаборЗаписей = РегистрыСведений.СостоянияКонтрагентовБЭД.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Контрагент.Установить(Контрагент);
		Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса") Тогда
			НаборЗаписей.Отбор.ОбластьДанныхВспомогательныеДанные.Установить(ОбластьДанныхВспомогательныеДанные);
		КонецЕсли;
		НаборЗаписей.Очистить();
		
		Запись = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, ДанныеКонтрагента); 
		
		НаборЗаписей.Записать();
		
	Исключение
		
		Операция = Нстр("ru = 'Запись результатов проверки подключения контрагентов к 1С-ЭДО в регистр.'");
		ПодробныйТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(Операция, ПодробныйТекстОшибки);
	КонецПопытки;
	
КонецПроцедуры

// СлужебныеПроцедурыИФункции

Процедура ПрочитатьИННКППИзФайла(ИННКПП, СтрокаXML)
	
	Попытка
		ЧтениеXML = Новый ЧтениеXML;
		ЧтениеXML.УстановитьСтроку(СтрокаXML);
	Исключение
		
		ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ошибка разбора XML: %1.'"), ИнформацияОбОшибке().Описание);
		Возврат;
	КонецПопытки;
	
	ИННПрочитан = Ложь;
	КПППрочитан = Ложь;
	
	Попытка
		Пока ЧтениеXML.Прочитать() Цикл
			ТипУзла = ЧтениеXML.ТипУзла;
			Если ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
				Если Врег(ЧтениеXML.Имя) = ВРег("INN") Тогда
					ЧтениеXML.Прочитать();
					ИНН = ЧтениеXML.Значение;
					ИННПрочитан = Истина;
				КонецЕсли;
				
				Если Врег(ЧтениеXML.Имя) = ВРег("KPP") Тогда
					ЧтениеXML.Прочитать();
					КПП = ЧтениеXML.Значение;
					КПППрочитан = Истина;
					
				КонецЕсли;
				
				Если ИННПрочитан И КПППрочитан Тогда
					
					ИННКППКонтрагента = ИНН + ?(ЗначениеЗаполнено(КПП), "/" + КПП,"");
					Если ИННКПП.Найти(ИННКППКонтрагента) = Неопределено Тогда
						ИННКПП.Добавить(ИННКППКонтрагента);
					КонецЕсли;
					
					ИННПрочитан = Ложь;
					КПППрочитан = Ложь;
					
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
	Исключение
		ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ошибка разбора XML: %1.'"), ИнформацияОбОшибке().Описание);
		Возврат ;
	КонецПопытки;
	
КонецПроцедуры


// Функция - Шаблон таблицы, используемой для передачи данных в веб-сервис ФНС.
// Возвращаемое значение:
// ТаблицаЗначений - пустая таблица с колонками "Контрагент", "ИНН", "КПП", "Дата", "Состояние", "ДополнительныеПараметры"
//                   "ОбластьДанныхВспомогательныеДанные"(если есть подсистема РаботаВМоделиСервиса).
Функция ШаблонТаблицыДанныеКонтрагента()
	
	// Создаем таблицу
	ДанныеКонтрагентов = Новый ТаблицаЗначений;
	
	//СвойстваСправочника = ПроверкаКонтрагентовКлиентСервер.СвойстваСправочникаКонтрагенты();
	ИмяПрикладногоСправочника = ЭлектронныеДокументыПовтИсп.ПолучитьИмяПрикладногоСправочника("Контрагенты");
	ИмяРеквизитаИННКонтрагента = ЭлектронныеДокументыПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("ИННКонтрагента");
	ИмяРеквизитаКППКонтрагента = ЭлектронныеДокументыПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("КППКонтрагента");
	
	Тип = "СправочникСсылка." + ИмяПрикладногоСправочника;
	
	// Проверяемый контрагент
	ДанныеКонтрагентов.Колонки.Добавить("Контрагент", 	Новый ОписаниеТипов(Тип));
	// ИНН контрагента
	ДанныеКонтрагентов.Колонки.Добавить(ИмяРеквизитаИННКонтрагента, 			Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(12)));
	// КПП контрагента
	ДанныеКонтрагентов.Колонки.Добавить(ИмяРеквизитаКППКонтрагента, 			Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(9)));
	// Дата, на которую выполняется проверка контрагента.
	ДанныеКонтрагентов.Колонки.Добавить("Дата", 		Новый ОписаниеТипов("Дата",,,Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	// Результат проверки контрагента.
	ДанныеКонтрагентов.Колонки.Добавить("Состояние", 	Новый ОписаниеТипов("ПеречислениеСсылка.СостоянияКонтрагентаБЭД"));
	// Область данных
	ДобавитьКолонкуОбластьДанных(ДанныеКонтрагентов);

	Возврат ДанныеКонтрагентов;
	
КонецФункции

Процедура ДобавитьКолонкуОбластьДанных(Таблица)
	
	Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса") Тогда
		Таблица.Колонки.Добавить("ОбластьДанныхВспомогательныеДанные", 	Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(7, 0, ДопустимыйЗнак.Неотрицательный)));
	КонецЕсли;
	
КонецПроцедуры

Функция СправочникКонтрагентовИерархический()
	
	ИмяПрикладногоСправочника = ЭлектронныеДокументыПовтИсп.ПолучитьИмяПрикладногоСправочника("Контрагенты");
	Возврат Метаданные.Справочники[ИмяПрикладногоСправочника].Иерархический;
	
КонецФункции

Процедура ПолучитьСостоянияКонтрагентовИзКэша(ДанныеКонтрагентов, ПолучатьВсеСостоянияИзРегистра = Ложь)
	
	Запрос = Новый Запрос;
	Запрос.Текст =	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	              	|	ДанныеКонтрагентов.Контрагент,
	              	|	ДанныеКонтрагентов.ИНН,
	              	|	ДанныеКонтрагентов.КПП,
	              	|	ДанныеКонтрагентов.ОбластьДанныхВспомогательныеДанные,
	              	|	ДанныеКонтрагентов.Дата
	              	|ПОМЕСТИТЬ ДанныеКонтрагентов
	              	|ИЗ
	              	|	&ДанныеКонтрагентов КАК ДанныеКонтрагентов
	              	|;
	              	|
	              	|////////////////////////////////////////////////////////////////////////////////
	              	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	              	|	ДанныеКонтрагентов.Контрагент,
	              	|	ДанныеКонтрагентов.ИНН,
	              	|	ДанныеКонтрагентов.КПП,
	              	|	ДанныеКонтрагентов.Дата,
	              	|	ДанныеКонтрагентов.ОбластьДанныхВспомогательныеДанные,
	              	|	ВЫБОР
	              	|		КОГДА &ПолучатьВсеСостоянияИзРегистра
	              	|			ТОГДА СостоянияКонтрагентовБЭД.Состояние
	              	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СостоянияКонтрагентаБЭД.ПустаяСсылка)
	              	|	КОНЕЦ КАК Состояние
	              	|ИЗ
	              	|	ДанныеКонтрагентов КАК ДанныеКонтрагентов
	              	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияКонтрагентовБЭД КАК СостоянияКонтрагентовБЭД
	              	|		ПО ДанныеКонтрагентов.Контрагент = СостоянияКонтрагентовБЭД.Контрагент
	              	|			И ДанныеКонтрагентов.ИНН = СостоянияКонтрагентовБЭД.ИНН
	              	|			И ДанныеКонтрагентов.КПП = СостоянияКонтрагентовБЭД.КПП
	              	|			И ДанныеКонтрагентов.ОбластьДанныхВспомогательныеДанные = СостоянияКонтрагентовБЭД.ОбластьДанныхВспомогательныеДанные";
					
	Если НЕ ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса") Тогда
		
		Запрос.Текст = СтрЗаменить(
			Запрос.Текст,
			"ДанныеКонтрагентов.ОбластьДанныхВспомогательныеДанные,",
			"");
		
		Запрос.Текст = СтрЗаменить(
			Запрос.Текст,
			"И ДанныеКонтрагентов.ОбластьДанныхВспомогательныеДанные = СостоянияКонтрагентовБЭД.ОбластьДанныхВспомогательныеДанные",
			"");
		
	КонецЕсли;
				  
	Запрос.УстановитьПараметр("ПолучатьВсеСостоянияИзРегистра", ПолучатьВсеСостоянияИзРегистра); 
	
	Запрос.УстановитьПараметр("ДанныеКонтрагентов", ДанныеКонтрагентов);
	ДанныеКонтрагентов = Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры


Функция СформироватьТекстИсключения(Знач ТипИсключения, Знач Параметр) Экспорт
	
	ЧастиТекста = Новый Массив;
	Если ТипИсключения = "НедопустимыеПараметрыМетода" Тогда
		
		ЧастиТекста.Добавить(НСтр("ru = 'Недопустимые параметры метода'"));
		ЧастиТекста.Добавить(Параметр);
		
	Иначе
		
		ЧастиТекста.Добавить(НСтр("ru = 'Неизвестная ошибка'"));
		Если ЗначениеЗаполнено(Параметр) Тогда
			ЧастиТекста.Добавить(Параметр);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтроковыеФункцииКлиентСервер.ПолучитьСтрокуИзМассиваПодстрок(ЧастиТекста, Символы.ПС);
	
КонецФункции
///////////////////////////////////////////////////////////////////////////////
// Сравнение электронных документов

// Готовит файлы табличных документов MXL по данным электронных документов.
//
// Параметры:
//  МассивЭД - массив ссылок на электронные документы, которые необходимо обработать.
//
// Возвращаемое значение:
//  Массив структур - структура содержит имя файла данных и имя файла табличного документа MXL
//
Функция ПодготовитьВременныеФайлыПросмотраЭД(МассивЭД) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПереченьВременныхФайлов = Новый Массив;
	
	Для Каждого ЭД Из МассивЭД Цикл
		
		ДопИнформацияПоЭД = ПолучитьДанныеФайла(ЭД, Новый УникальныйИдентификатор, Истина);
		Если ДопИнформацияПоЭД.Свойство("СсылкаНаДвоичныеДанныеФайла")
			И ЗначениеЗаполнено(ДопИнформацияПоЭД.СсылкаНаДвоичныеДанныеФайла) Тогда
			
			ДанныеЭД = ПолучитьИзВременногоХранилища(ДопИнформацияПоЭД.СсылкаНаДвоичныеДанныеФайла);
			Если ЗначениеЗаполнено(ДопИнформацияПоЭД.Расширение) Тогда
				ИмяФайла = ТекущееИмяВременногоФайла(ДопИнформацияПоЭД.Расширение);
			Иначе
				ИмяФайла = ТекущееИмяВременногоФайла("xml");
			КонецЕсли;
			ДанныеЭД.Записать(ИмяФайла);
			
			ФайлыАрхива = Новый Массив;
			Если Найти(ДопИнформацияПоЭД.Расширение, "zip") > 0 Тогда
				
				ПапкаДляРаспаковки =  РабочийКаталог("proc", ЭД.УникальныйИдентификатор());
				Попытка
					ЗИПЧтение = Новый ЧтениеZipФайла(ИмяФайла);
					ЗипЧтение.ИзвлечьВсе(ПапкаДляРаспаковки);
				Исключение
					
					ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
					
					Если ЗИПЧтение = Неопределено Тогда
						ТекстСообщения = НСтр("ru = 'Невозможно прочитать транспортный архив'");
					Иначе
						Если НЕ ВозможноИзвлечьФайлы(ЗипЧтение, ПапкаДляРаспаковки) Тогда
							ТекстСообщения = ЭлектронныеДокументыПовтИсп.ПолучитьСообщениеОбОшибке("006");
						КонецЕсли;
						ЗИПЧтение.Закрыть();
					КонецЕсли;
					
					ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(
						НСтр("ru = 'Распаковка пакета ЭД'"), ТекстОшибки, ТекстСообщения);
					
				КонецПопытки;

				ФайлыАрхива = НайтиФайлы(ПапкаДляРаспаковки, "*.xml");
			ИначеЕсли Найти(ДопИнформацияПоЭД.Расширение, "xml") > 0 Тогда
				
				ФайлДанных = Новый Файл(ИмяФайла);
				ФайлыАрхива.Добавить(ФайлДанных);
			КонецЕсли;
			
			Для Каждого РаспакованныйФайл Из ФайлыАрхива Цикл
				
				ПараметрыПечати = Новый Структура;
				ПараметрыПечати.Вставить("ИД", ЭД.УникальныйИдентификатор());
				
				ТабличныйДокумент = ЭлектронныеДокументыВнутренний.СформироватьПечатнуюФормуЭД(РаспакованныйФайл.ПолноеИмя,
																								ЭД.НаправлениеЭД,
																								ПараметрыПечати);
					
				Если ТипЗнч(ТабличныйДокумент) = Тип("ТабличныйДокумент") Тогда
					АдресФайлаДанных = ПоместитьВоВременноеХранилище(ТабличныйДокумент, ЭД.УникальныйИдентификатор());
					НазваниеЭД = ПолучитьПредставлениеЭД(ЭД.Ссылка);
					
					СтруктураИменФайлов = Новый Структура("НазваниеЭД, АдресФайлаДанных", НазваниеЭД, АдресФайлаДанных);
					ПереченьВременныхФайлов.Добавить(СтруктураИменФайлов);
				КонецЕсли;
				Прервать; // должен быть только один файл данных
			КонецЦикла;
			
			Если ЗначениеЗаполнено(ПапкаДляРаспаковки) Тогда
				УдалитьФайлы(ПапкаДляРаспаковки);
			КонецЕсли;
			
			УдалитьФайлы(ИмяФайла);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПереченьВременныхФайлов;
	
КонецФункции

// Только для внутреннего использования
Функция СгенерироватьUUID() Экспорт
	
	Возврат нрег(СтрЗаменить(Строка(Новый("УникальныйИдентификатор")), "-", ""));
	
КонецФункции

// Только для внутреннего использования
Функция НастройкиОбменаЭД(СсылкаНаЭД) Экспорт
	
	НастройкиОбмена = Неопределено;
	
	Если СсылкаНаЭД <> Справочники.ЭДПрисоединенныеФайлы.ПустаяСсылка() Тогда
		
		РеквизитыЭД = ЗначенияРеквизитовОбъектаИлиСсылки(СсылкаНаЭД,
			"НаправлениеЭД, СоглашениеЭД, ПодписанЭЦП, ВладелецФайла, ТипЭлементаВерсииЭД, ЭлектронныйДокументВладелец");
		
		РеквизитыВладельца = ЗначенияРеквизитовОбъектаИлиСсылки(РеквизитыЭД.ВладелецФайла,
			"ВидЭД, НастройкаЭДО, ПрофильНастроекЭДО, ВерсияРегламентаЭДО, ТребуетсяПодтверждение, ТребуетсяИзвещение");
		
		Если ЗначениеЗаполнено(РеквизитыЭД) Тогда
			НастройкиОбмена = Новый Структура;
			СпособОбменаЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РеквизитыЭД.СоглашениеЭД, "СпособОбменаЭД");
			Если СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезВебРесурсБанка Тогда
				
				РеквизитыСоглашения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РеквизитыЭД.СоглашениеЭД,
				"СпособОбменаЭД, СертификатыПодписейОрганизации, ПрограммаБанка");
				НастройкиОбмена.Вставить("СпособОбмена",          РеквизитыСоглашения.СпособОбменаЭД);
				НастройкиОбмена.Вставить("ПрограммаБанка",        РеквизитыСоглашения.ПрограммаБанка);
				ИспользуетсяНесколькоПодписей = Ложь;
				Если ЗначениеЗаполнено(РеквизитыСоглашения.СертификатыПодписейОрганизации) Тогда
					ИспользуетсяНесколькоПодписей = РеквизитыСоглашения.СертификатыПодписейОрганизации.Выгрузить().Количество() > 1;
				КонецЕсли;
				НастройкиОбмена.Вставить("ИспользуетсяНесколькоПодписей", ИспользуетсяНесколькоПодписей);
			Иначе
				
				РеквизитыПрофиляНастроекЭДО = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РеквизитыВладельца.ПрофильНастроекЭДО,
					"СпособОбменаЭД");
				
				НастройкиОбмена.Вставить("СпособОбмена",          РеквизитыПрофиляНастроекЭДО.СпособОбменаЭД);
			КонецЕсли;
			
			НастройкиОбмена.Вставить("Направление",            РеквизитыЭД.НаправлениеЭД);
			НастройкиОбмена.Вставить("ВидЭД",                  РеквизитыВладельца.ВидЭД);
			НастройкиОбмена.Вставить("ИспользоватьПодпись",    РеквизитыЭД.ПодписанЭЦП);
			НастройкиОбмена.Вставить("ИспользоватьКвитанции",  Ложь);
			НастройкиОбмена.Вставить("ТребуетсяПодтверждение", РеквизитыВладельца.ТребуетсяПодтверждение);
			НастройкиОбмена.Вставить("ТребуетсяИзвещение",     РеквизитыВладельца.ТребуетсяИзвещение);
			НастройкиОбмена.Вставить("ТипЭлементаВерсииЭД",    РеквизитыЭД.ТипЭлементаВерсииЭД);
			НастройкиОбмена.Вставить("ВерсияРегламентаЭДО",    РеквизитыВладельца.ВерсияРегламентаЭДО);
			
			ВерсияФорматаПакета = ВерсияПакетаЭД(СсылкаНаЭД);
			НастройкиОбмена.Вставить("ВерсияФорматаПакета", ВерсияФорматаПакета);
			
			ЗапросПоНастройкам = Новый Запрос;
			ЗапросПоНастройкам.УстановитьПараметр("СоглашениеЭД",    РеквизитыВладельца.НастройкаЭДО);
			ЗапросПоНастройкам.УстановитьПараметр("НаправлениеЭД",   РеквизитыЭД.НаправлениеЭД);
			ЗапросПоНастройкам.УстановитьПараметр("ВидЭД",           РеквизитыВладельца.ВидЭД);
			ИспользоватьЭП = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьЗначениеФункциональнойОпции(
				"ИспользоватьЭлектронныеЦифровыеПодписи");
			ЭтоОбменСБанком = СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезВебРесурсБанка;
			ЗапросПоНастройкам.УстановитьПараметр("ИспользуетсяЭЦП", ИспользоватьЭП ИЛИ ЭтоОбменСБанком);
			
			ВидЭДВладельца = Неопределено;
			ЭтоСлужебныйЭД = Ложь;
			Если ЭлектронныеДокументыСлужебныйВызовСервера.ЭтоСлужебныйДокумент(РеквизитыЭД.ТипЭлементаВерсииЭД) Тогда
				ЭтоСлужебныйЭД = Истина;
				ЭДВладелец = РеквизитыЭД.ЭлектронныйДокументВладелец;
				Если ЗначениеЗаполнено(ЭДВладелец) Тогда
					ВидЭДВладельца = РеквизитыВладельца.ВидЭД;
				КонецЕсли;
			КонецЕсли;
			ЗапросПоНастройкам.УстановитьПараметр("ВидЭДВладельца", ВидЭДВладельца);
			ЗапросПоНастройкам.УстановитьПараметр("ЭтоСлужебныйЭД", ЭтоСлужебныйЭД);

			
			ВидыЭДФНС = Новый Массив;
			ВидыЭДФНС.Добавить(Перечисления.ВидыЭД.ТОРГ12Продавец);
			ВидыЭДФНС.Добавить(Перечисления.ВидыЭД.АктЗаказчик);
			ВидыЭДФНС.Добавить(Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель);
			ЗапросПоНастройкам.УстановитьПараметр("ВидыЭДФНС", ВидыЭДФНС);
			
			ЗапросПоНастройкам.Текст =
			"ВЫБРАТЬ
			|	ВЫБОР
			|		КОГДА &ИспользуетсяЭЦП
			|			ТОГДА Соглашение.ИспользоватьПодпись
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК ИспользоватьПодпись,
			|	Соглашение.ИспользоватьКвитанции
			|ИЗ
			|	(ВЫБРАТЬ
			|		СоглашенияОбИспользованииЭДИсходящиеДокументы.ИспользоватьЭЦП КАК ИспользоватьПодпись,
			|		ВЫБОР
			|			КОГДА СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.ВерсияФорматаПакета = ЗНАЧЕНИЕ(Перечисление.ВерсииФорматаПакетаЭД.Версия30)
			|				ТОГДА ЛОЖЬ
			|			ИНАЧЕ ИСТИНА
			|		КОНЕЦ КАК ИспользоватьКвитанции,
			|		ВЫБОР
			|			КОГДА &НаправлениеЭД = ЗНАЧЕНИЕ(Перечисление.НаправленияЭД.Интеркампани)
			|				ТОГДА ЗНАЧЕНИЕ(Перечисление.НаправленияЭД.Интеркампани)
			|			ИНАЧЕ ВЫБОР
			|					КОГДА &ВидЭД В (&ВидыЭДФНС)
			|							И &НаправлениеЭД = ЗНАЧЕНИЕ(Перечисление.НаправленияЭД.Входящий)
			|						ТОГДА ЗНАЧЕНИЕ(Перечисление.НаправленияЭД.Входящий)
			|					ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.НаправленияЭД.Исходящий)
			|				КОНЕЦ
			|		КОНЕЦ КАК НаправлениеЭД
			|	ИЗ
			|		Справочник.СоглашенияОбИспользованииЭД.ИсходящиеДокументы КАК СоглашенияОбИспользованииЭДИсходящиеДокументы
			|	ГДЕ
			|		ВЫБОР
			|				КОГДА &ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.Торг12Покупатель)
			|					ТОГДА СоглашенияОбИспользованииЭДИсходящиеДокументы.ИсходящийДокумент = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.ТОРГ12Продавец)
			|				КОГДА &ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.АктЗаказчик)
			|					ТОГДА СоглашенияОбИспользованииЭДИсходящиеДокументы.ИсходящийДокумент = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.АктИсполнитель)
			|				КОГДА &ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель)
			|					ТОГДА СоглашенияОбИспользованииЭДИсходящиеДокументы.ИсходящийДокумент = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель)
			|				КОГДА &ЭтоСлужебныйЭД
			|					ТОГДА СоглашенияОбИспользованииЭДИсходящиеДокументы.ИсходящийДокумент = &ВидЭДВладельца
			|				ИНАЧЕ СоглашенияОбИспользованииЭДИсходящиеДокументы.ИсходящийДокумент = &ВидЭД
			|			КОНЕЦ
			|		И СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка = &СоглашениеЭД
			|		И СоглашенияОбИспользованииЭДИсходящиеДокументы.Формировать) КАК Соглашение
			|ГДЕ
			|	Соглашение.НаправлениеЭД = &НаправлениеЭД";
			
			Результат = ЗапросПоНастройкам.Выполнить();
			
			Если НЕ Результат.Пустой() Тогда
				ТЗ = Результат.Выгрузить();
				ЗаполнитьЗначенияСвойств(НастройкиОбмена, ТЗ[0]);
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат НастройкиОбмена;
	
КонецФункции

// Только для внутреннего использования
Функция ВыборкаДопДанныеЭД(ЭДВладелец) Экспорт
	
	// Для одного ЭД может быть сформирован один ЭД-доп.данных.
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ЭДПрисоединенныеФайлы.Ссылка
		|ИЗ
		|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
		|ГДЕ
		|	ЭДПрисоединенныеФайлы.ЭлектронныйДокументВладелец = &ЭлектронныйДокументВладелец
		|	И ЭДПрисоединенныеФайлы.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.ДопДанные)";

	Запрос.УстановитьПараметр("ЭлектронныйДокументВладелец", ЭДВладелец);

	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

// Только для внутреннего использования
Процедура СохранитьФайлыДопДанныхЭД(ПрисоединенныйФайл, ИмяКаталога, СтруктураФайловЭД) Экспорт
	
	Если ЗначениеЗаполнено(ПрисоединенныйФайл) Тогда
		// Для одного ЭД может быть сформирован один ЭД-доп.данных.
		Выборка = ВыборкаДопДанныеЭД(ПрисоединенныйФайл);

		Если Выборка.Следующий() Тогда
			Файл = Новый Файл(ИмяКаталога);
			Если НЕ Файл.Существует() Тогда
				СоздатьКаталог(ИмяКаталога);
			КонецЕсли;
			ДанныеФайла = ПолучитьДанныеФайла(Выборка.Ссылка);
			ИмяПолучаемогоФайла = ДанныеФайла.ИмяФайла;
			ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
			ДвоичныеДанныеФайла.Записать(ИмяКаталога + ИмяПолучаемогоФайла);
		
			СтруктураФайловЭД.Вставить("ДополнительныйФайл", ИмяПолучаемогоФайла);
			
			// Необходимо предусмотреть заполнение подписей для дополнительного файла в дереве транспортной информации.
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Определяет представление электронного документа.
//
// Параметры:
//  ВидЭД - Вид электронного документа, перечисление.
//  СтруктураПараметров: НомерВладельца, ДатаВладельца, ВерсияЭД.
//
Функция ОпределитьПредставлениеЭД(ВидЭД, СтруктураПараметров) Экспорт
	
	ТекстВидЭД  = "";
	ТекстНомера = "";
	ТекстДаты   = "";
	ТекстВерсии = "";
	ЗначениеСвойства = Неопределено;
	
	Если СтруктураПараметров.Свойство("НомерВладельца", ЗначениеСвойства) И ЗначениеЗаполнено(ЗначениеСвойства) Тогда
		ТекстНомера = " № " + ЗначениеСвойства;
		
	КонецЕсли;
	Если СтруктураПараметров.Свойство("ДатаВладельца", ЗначениеСвойства) И ЗначениеЗаполнено(ЗначениеСвойства) Тогда
		ТекстДаты = " от " + Формат(ЗначениеСвойства, "ДЛФ=D");
	КонецЕсли;
	
	Если ВидЭД <> Перечисления.ВидыЭД.СчетФактура И ВидЭД <> Перечисления.ВидыЭД.ИзвещениеОПолучении
		И ВидЭД <> Перечисления.ВидыЭД.Подтверждение И ВидЭД <> Перечисления.ВидыЭД.УведомлениеОбУточнении
		И СтруктураПараметров.Свойство("ВерсияЭД", ЗначениеСвойства) И ЗначениеЗаполнено(ЗначениеСвойства) Тогда
		
		ШаблонТекстаВерсии = НСтр("ru = '(версия %1)'");
		ТекстВерсии = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонТекстаВерсии, ЗначениеСвойства);
		
	КонецЕсли;
	
	ТипЭД = "";
	Если СтруктураПараметров.Свойство("ТипЭД", ТипЭД)
		И ТипЭД <> Перечисления.ТипыЭлементовВерсииЭД.СЧФДОПУПД
		И ТипЭД <> Перечисления.ТипыЭлементовВерсииЭД.СЧФУПД
		И ТипЭД <> Перечисления.ТипыЭлементовВерсииЭД.ДОПУПД
		И ТипЭД <> Перечисления.ТипыЭлементовВерсииЭД.КСЧФДИСУКД
		И ТипЭД <> Перечисления.ТипыЭлементовВерсииЭД.КСЧФУКД
		И ТипЭД <> Перечисления.ТипыЭлементовВерсииЭД.ДИСУКД
		И ТипЭД <> Перечисления.ТипыЭлементовВерсииЭД.ПервичныйЭД
		И ТипЭД <> Перечисления.ТипыЭлементовВерсииЭД.ДОП
		И ТипЭД <> Перечисления.ТипыЭлементовВерсииЭД.ЭСФ Тогда
		
		Если ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.ИнформацияПокупателяУПД
			ИЛИ ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.ИнформацияПокупателяУКД Тогда
			ТекстВидЭД = НСтр("ru = 'Информация покупателя'");
		ИначеЕсли ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.ТОРГ12Покупатель Тогда
			ТекстВидЭД = Строка(ТипЭД);
		ИначеЕсли ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.СоглашениеОбИзмененииСтоимостиПолучатель Тогда
			ТекстВидЭД = Строка(ТипЭД);
		ИначеЕсли ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.АктЗаказчик Тогда
			ТекстВидЭД = Строка(ТипЭД);
		ИначеЕсли ЭтоИзвещениеОПолучении(ТипЭД) Тогда
			ТекстВидЭД = НСтр("ru = 'Извещение о получении'");
		ИначеЕсли ЭтоПодтверждение(ТипЭД) Тогда
			ТекстВидЭД = НСтр("ru = 'Подтверждение'");
			
			Если ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДПЭСФ
				ИЛИ ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДП Тогда
				ТекстВидЭД = ТекстВидЭД + " " + НСтр("ru = 'даты получения'");
			Иначе
				ТекстВидЭД = ТекстВидЭД + " " + НСтр("ru = 'даты отправки'");
			КонецЕсли;
			
		ИначеЕсли ЭтоУведомлениеОбУточнении(ТипЭД) Тогда
			ТекстВидЭД = НСтр("ru = 'Уведомление об уточнении'");
		ИначеЕсли ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.ПОА Тогда
			ТекстВидЭД = НСтр("ru = 'Предложение об аннулировании'");
		КонецЕсли;
	Иначе
		
		Если ВидЭД = Перечисления.ВидыЭД.СчетФактура Тогда
			ТекстВидЭД = НСтр("ru = 'Счет-фактура'");
			Если ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.СЧФДОПУПД Тогда
				ТекстВидЭД = НСтр("ru = 'Информация продавца'");
			КонецЕсли;
		ИначеЕсли ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура Тогда
			ТекстВидЭД = НСтр("ru = 'Корректировочный счет-фактура'");
			Если ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.КСЧФДИСУКД Тогда
				ТекстВидЭД = НСтр("ru = 'Информация продавца'");
			КонецЕсли;
			
		ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ТОРГ12 Тогда
			ТекстВидЭД = НСтр("ru = 'Товарная накладная (ТОРГ-12)'");
		ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец Тогда
			ТекстВидЭД = Строка(ВидЭД);
			Если ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.ДОПУПД Тогда
				ТекстВидЭД = НСтр("ru = 'Информация продавца'");
			КонецЕсли;
		ИначеЕсли ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель Тогда
			ТекстВидЭД = Строка(ВидЭД);
			Если ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.ДИСУКД Тогда
				ТекстВидЭД = НСтр("ru = 'Информация продавца'");
			КонецЕсли;
		ИначеЕсли ВидЭД = Перечисления.ВидыЭД.АктВыполненныхРабот Тогда
			ТекстВидЭД = НСтр("ru = 'Акт'");
		ИначеЕсли ВидЭД = Перечисления.ВидыЭД.АктНаПередачуПрав Тогда
			ТекстВидЭД = НСтр("ru = 'Акт на передачу прав'");
			Если ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.ДОПУПД Тогда
				ТекстВидЭД = НСтр("ru = 'Информация продавца'");
			КонецЕсли;
		ИначеЕсли ВидЭД = Перечисления.ВидыЭД.АктИсполнитель ИЛИ ВидЭД = Перечисления.ВидыЭД.АктЗаказчик Тогда
			ТекстВидЭД = Строка(ВидЭД);
			Если ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.ДОПУПД Тогда
				ТекстВидЭД = НСтр("ru = 'Информация продавца'");
			КонецЕсли;
		ИначеЕсли ВидЭД = Перечисления.ВидыЭД.СчетНаОплату Тогда
			ТекстВидЭД = НСтр("ru = 'Счет'");
		ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ЗаказТовара Тогда
			ТекстВидЭД = НСтр("ru = 'Заказ товара'");
		ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ОтветНаЗаказ Тогда
			ТекстВидЭД = НСтр("ru = 'Ответ на заказ'");
		ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ПрайсЛист Тогда
			ТекстВидЭД = НСтр("ru = 'Прайс-лист'");
		ИначеЕсли ВидЭД = Перечисления.ВидыЭД.КаталогТоваров Тогда
			ТекстВидЭД = НСтр("ru = 'Каталог товаров'");
		ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ОтчетОПродажахКомиссионногоТовара Тогда
			ТекстВидЭД = НСтр("ru = 'Отчет о продажах комиссионного товара'");
		ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ОтчетОСписанииКомиссионногоТовара Тогда
			ТекстВидЭД = НСтр("ru = 'Отчет о списании комиссионного товара'");
		ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ПередачаТоваровМеждуОрганизациями Тогда
			ТекстВидЭД = НСтр("ru = 'Передача товаров'");
		ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ВозвратТоваровМеждуОрганизациями Тогда
			ТекстВидЭД = НСтр("ru = 'Возврат товаров'");
		ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ПроизвольныйЭД Тогда
			ТекстВидЭД = НСтр("ru = 'Произвольный документ'");
		Иначе
			ТекстВидЭД = Строка(ВидЭД);
		КонецЕсли;
	КонецЕсли;
	
	ПредставлениеЭД = ТекстВидЭД + ТекстНомера + ТекстДаты + ТекстВерсии;
	
	Возврат ПредставлениеЭД;
	
КонецФункции

// Только для внутреннего использования
Функция СтрокаЛатиницей(Знач Строка) Экспорт
	Результат = "";
	
	Соответствие = ЭлектронныеДокументыПовтИсп.СоответствиеКириллицыИЛатиницы();
	
	ПредыдущийСимвол = "";
	Для Позиция = 1 По СтрДлина(Строка) Цикл
		Символ = Сред(Строка, Позиция, 1);
		СимволЛатиницей = Соответствие[НРег(Символ)]; // поиск соответствия без учета регистра
		Если СимволЛатиницей = Неопределено Тогда
			// другие символы остаются "как есть"
			СимволЛатиницей = Символ;
		Иначе
			Если Символ = ВРег(Символ) Тогда
				СимволЛатиницей = ТРег(СимволЛатиницей); // восстанавливаем регистр
			КонецЕсли;
		КонецЕсли;
		Результат = Результат + СимволЛатиницей;
		ПредыдущийСимвол = СимволЛатиницей;
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

// Функция предназначена для проверки имени файла на наличие некорректных символов
// Алгоритм взят с небольшими изменениями из процедуры клиентского общего модуля "ФайловыеФункции"
//
// Параметры:
//  СтрИмяФайла - Строка - проверяемое имя файла
//  ФлУдалятьНекорректные - Булево - удалять или нет некорректные символы из переданной строки
// Возвращаемое значение:
//  Строка - имя файла
//
Функция КорректноеИмяФайла(Знач СтрИмяФайла, ФлУдалятьНекорректные = Ложь) Экспорт
	
	// Перечень запрещенных символов взят отсюда: http://support.microsoft.com/kb/100108/ru
	// при этом были объединены запрещенные символы для файловых систем FAT и NTFS
	СтрИсключения = """ / \ [ ] : ; | = , ? * < > №";
	СтрИсключения = СтрЗаменить(СтрИсключения, " ", "");
	
	Результат = Истина;
	
	Для Сч = 1 по СтрДлина(СтрИсключения) Цикл
		Символ = Сред(СтрИсключения, Сч, 1);
		Если Найти(СтрИмяФайла, Символ) <> 0 Тогда
			Если ФлУдалятьНекорректные Тогда
				СтрИмяФайла = СтрЗаменить(СтрИмяФайла, Символ, "");
			Иначе
				Результат = Ложь;
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если Не Результат Тогда
		Текст = НСтр("ru = 'В имени файла не должно быть следующих символов: %1
		|Имя файла: %2'");
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, СтрИсключения, СтрИмяФайла);
		ВызватьИсключение ТекстОшибки;
	Иначе
		Возврат СтрИмяФайла;
	КонецЕсли;
	
КонецФункции

// Возвращает временный рабочий каталог для работы с файлами ЭДО.
// Каталог создается в каталоге временных файлов системы или ином предопределенном каталоге.
//
// Параметры:
//  Подкаталог - Строка - Вложенный каталог первого уровня (не используется, оставлено для совместимости)
//  КлючУникальности - Строка - Вложенный каталог второго уровня (не используется, оставлено для совместимости)
Функция РабочийКаталог(Знач Подкаталог = "", КлючУникальности = "") Экспорт
	
	ИмяКаталога = ПолучитьИмяВременногоФайла() + ОбщегоНазначенияКлиентСервер.РазделительПути();
	СоздатьКаталог(ИмяКаталога);
	Возврат ИмяКаталога;
	
КонецФункции

// Только для внутреннего использования
Функция ПолучитьДопустимыйСтатусЭД(НовыйСтатус, СсылкаНаЭД) Экспорт
	
	ТекущийСтатус = Неопределено;
	
	Если ЗначениеЗаполнено(СсылкаНаЭД) Тогда
		
		СвойстваДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаЭД,
			"СтатусЭД, ВладелецФайла, ТипЭлементаВерсииЭД");
		ТекущийСтатус = СвойстваДокумента.СтатусЭД;
		
		Если НовыйСтатус = Перечисления.СтатусыЭД.Отклонен ИЛИ НовыйСтатус = Перечисления.СтатусыЭД.ОтклоненПолучателем
			ИЛИ НЕ ЗначениеЗаполнено(ТекущийСтатус) ИЛИ НовыйСтатус = Перечисления.СтатусыЭД.ОшибкаПередачи
			ИЛИ НовыйСтатус = Перечисления.СтатусыЭД.Аннулирован
			ИЛИ НовыйСтатус = Перечисления.СтатусыЭД.СформированоПредложениеОбАннулировании
			ИЛИ НовыйСтатус = Перечисления.СтатусыЭД.ПолученоПредложениеОбАннулировании Тогда
			ТекущийСтатус = НовыйСтатус;
		Иначе
			НастройкиОбмена = НастройкиОбменаЭД(СсылкаНаЭД);
			Если НастройкиОбмена <> Неопределено Тогда
				МассивСтатусов = ВернутьМассивСтатусовЭД(НастройкиОбмена);
				ИндексТекущегоСтатуса = МассивСтатусов.Найти(ТекущийСтатус);
				ИндексНовогоСтатуса   = МассивСтатусов.Найти(НовыйСтатус);
				Если ИндексНовогоСтатуса <> Неопределено И ИндексТекущегоСтатуса <> Неопределено Тогда
					Если ИндексНовогоСтатуса > ИндексТекущегоСтатуса Тогда
						ТекущийСтатус = НовыйСтатус;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТекущийСтатус;
	
КонецФункции

// Только для внутреннего использования
Функция ВернутьМассивСтатусовЭД(НастройкиОбмена) Экспорт
	
	МассивСтатусов = Новый Массив;
	
	Если Не ЗначениеЗаполнено(НастройкиОбмена) Тогда
		Возврат МассивСтатусов;
	КонецЕсли;
	
	ТребуетсяИзвещение = Неопределено;
	Если Не НастройкиОбмена.Свойство("ТребуетсяИзвещение", ТребуетсяИзвещение) Тогда
		ТребуетсяИзвещение = Истина;
	КонецЕсли;
	
	ТребуетсяПодтверждение = Неопределено;
	Если ЭтоОтветныйТитул(НастройкиОбмена.ТипЭлементаВерсииЭД) Тогда
		ТребуетсяПодтверждение = Ложь;
	ИначеЕсли Не НастройкиОбмена.Свойство("ТребуетсяПодтверждение", ТребуетсяПодтверждение) Тогда
		ТребуетсяПодтверждение = Истина;
	КонецЕсли;
	
	Если НастройкиОбмена.Направление = Перечисления.НаправленияЭД.Исходящий Тогда
		
		Если ЭтоИзвещениеОПолучении(НастройкиОбмена.ТипЭлементаВерсииЭД)
			ИЛИ ЭтоУведомлениеОбУточнении(НастройкиОбмена.ТипЭлементаВерсииЭД) Тогда
			
			МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Сформирован);
			МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Утвержден);
			Если НастройкиОбмена.ИспользоватьПодпись Тогда
				МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Подписан);
			КонецЕсли;
			МассивСтатусов.Добавить(Перечисления.СтатусыЭД.ПодготовленКОтправке);
			МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Отправлен);
			
		ИначеЕсли НастройкиОбмена.СпособОбмена = Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском
			ИЛИ НастройкиОбмена.СпособОбмена = Перечисления.СпособыОбменаЭД.ЧерезСервис1СЭДО Тогда
			
			МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Сформирован);
			Если ЭтоОтветныйТитул(НастройкиОбмена.ТипЭлементаВерсииЭД)
					ИЛИ НастройкиОбмена.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПОА Тогда
				МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Утвержден);
			КонецЕсли;
			МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Подписан);
			МассивСтатусов.Добавить(Перечисления.СтатусыЭД.ПодготовленКОтправке);
			МассивСтатусов.Добавить(Перечисления.СтатусыЭД.ПереданОператору);
			
			Если НастройкиОбмена.ВидЭД = Перечисления.ВидыЭД.ПроизвольныйЭД 
				И НастройкиОбмена.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПервичныйЭД Тогда
				МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Отправлен);
				Если ТребуетсяИзвещение Тогда
					МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Доставлен);
				КонецЕсли;
				Если ТребуетсяПодтверждение Тогда
					МассивСтатусов.Добавить(Перечисления.СтатусыЭД.ПолученоПодтверждение);
				КонецЕсли;
			Иначе
				
				// Изменяется набор статусов ЭД в зависимости от использования версии регламента.
				Если НастройкиОбмена.ВерсияРегламентаЭДО = Перечисления.ВерсииРегламентаОбмена1С.Версия20 Тогда
					
					Если НЕ ЭтоОтветныйТитул(НастройкиОбмена.ТипЭлементаВерсииЭД) Тогда
						
						МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Отправлен);
						
						Если ТребуетсяИзвещение Тогда
							МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Доставлен);
						КонецЕсли;
					КонецЕсли;
				Иначе
					МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Отправлен);
					МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Доставлен);
				КонецЕсли;
				
				
				Если ТребуетсяПодтверждение Тогда
					МассивСтатусов.Добавить(Перечисления.СтатусыЭД.ПолученоПодтверждение);
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			
			МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Сформирован);
			
			Если ЭтоОтветныйТитул(НастройкиОбмена.ТипЭлементаВерсииЭД)
				ИЛИ НастройкиОбмена.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПОА Тогда
				МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Утвержден);
			КонецЕсли;
			
			Если НастройкиОбмена.ИспользоватьПодпись Тогда
				МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Подписан);
			КонецЕсли;
			МассивСтатусов.Добавить(Перечисления.СтатусыЭД.ПодготовленКОтправке);
			МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Отправлен);
			Если НастройкиОбмена.ВидЭД = Перечисления.ВидыЭД.ПроизвольныйЭД
				И НастройкиОбмена.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПервичныйЭД Тогда
				Если ТребуетсяИзвещение Тогда
					МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Доставлен);
				КонецЕсли;
				Если ТребуетсяПодтверждение Тогда
					МассивСтатусов.Добавить(Перечисления.СтатусыЭД.ПолученоПодтверждение);
				КонецЕсли;
			Иначе
				Если НастройкиОбмена.ВерсияФорматаПакета = Перечисления.ВерсииФорматаПакетаЭД.Версия30 Тогда
					// Не будем для ответных титулов добавлять статус Доставлен,
					// т.к. по ним не должны приходить Уведомления.
					Если НЕ ЭтоОтветныйТитул(НастройкиОбмена.ТипЭлементаВерсииЭД) Тогда
						
						Если ТребуетсяИзвещение Тогда
							МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Доставлен);
						КонецЕсли;
						
						Если НастройкиОбмена.ТребуетсяПодтверждение Тогда
							МассивСтатусов.Добавить(Перечисления.СтатусыЭД.ПолученоПодтверждение);
						КонецЕсли;
					КонецЕсли;
				Иначе
					// Если формат исходящих документов 2.0
					Если НастройкиОбмена.ИспользоватьКвитанции Тогда
						МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Доставлен);
					КонецЕсли;
					Если НастройкиОбмена.ИспользоватьПодпись
						И НЕ ЭтоОтветныйТитул(НастройкиОбмена.ТипЭлементаВерсииЭД) Тогда
						
						МассивСтатусов.Добавить(Перечисления.СтатусыЭД.ПолученоПодтверждение);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли НастройкиОбмена.Направление = Перечисления.НаправленияЭД.Входящий Тогда
		
		МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Получен);
		
		Если ЭлектронныеДокументыКлиентСервер.ОсновныеТипыЭД().Найти(НастройкиОбмена.ТипЭлементаВерсииЭД) <> Неопределено
			И ЭтоФНС(НастройкиОбмена.ВидЭД) Тогда
			МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Утвержден);
		
		ИначеЕсли НЕ (ЭтоИзвещениеОПолучении(НастройкиОбмена.ТипЭлементаВерсииЭД)
			ИЛИ ЭтоПодтверждение(НастройкиОбмена.ТипЭлементаВерсииЭД)
			ИЛИ ЭтоУведомлениеОбУточнении(НастройкиОбмена.ТипЭлементаВерсииЭД)
			ИЛИ ЭтоОтветныйТитул(НастройкиОбмена.ТипЭлементаВерсииЭД)) Тогда
			
			МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Утвержден);
			
			Если НастройкиОбмена.СпособОбмена = Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском
				ИЛИ НастройкиОбмена.СпособОбмена = Перечисления.СпособыОбменаЭД.ЧерезСервис1СЭДО Тогда
					
				Если ТребуетсяПодтверждение
					ИЛИ НастройкиОбмена.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПОА Тогда
					МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Подписан);
					МассивСтатусов.Добавить(Перечисления.СтатусыЭД.ПодготовленоПодтверждение);
					МассивСтатусов.Добавить(Перечисления.СтатусыЭД.ПереданОператору);
					МассивСтатусов.Добавить(Перечисления.СтатусыЭД.ОтправленоПодтверждение);
				КонецЕсли;
					
			Иначе
				
				Если НастройкиОбмена.ИспользоватьПодпись
					И (ТребуетсяПодтверждение ИЛИ НастройкиОбмена.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПОА) Тогда
					МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Подписан);
					МассивСтатусов.Добавить(Перечисления.СтатусыЭД.ПодготовленоПодтверждение);
					МассивСтатусов.Добавить(Перечисления.СтатусыЭД.ОтправленоПодтверждение);
				КонецЕсли;
				
				Если НастройкиОбмена.ИспользоватьКвитанции
					И Не НастройкиОбмена.ВидЭД = Перечисления.ВидыЭД.СчетНаОплату Тогда
					МассивСтатусов.Добавить(Перечисления.СтатусыЭД.ДоставленоПодтверждение);
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли НастройкиОбмена.Направление = Перечисления.НаправленияЭД.Интеркампани Тогда
		МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Сформирован);
		МассивСтатусов.Добавить(Перечисления.СтатусыЭД.ПолностьюПодписан);
	КонецЕсли;
	
	
	Возврат МассивСтатусов;
	
КонецФункции

// Только для внутреннего использования
Процедура УдалитьЛишнийСлэшВПути(Путь) Экспорт
	
	Пока Найти(Путь, "\\") > 0 Цикл
		
		Путь = СтрЗаменить(Путь, "\\", "\");
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура вызывается из клиентского модуля, удаляет папку,
// созданную на сервере и переданную на клиент в качестве параметра.
// 
// Параметры:
// Папка - строка, путь к временной папке на сервере.
//
Процедура УдалитьПапкуНаСервере(Папка) Экспорт
	
	Если ЗначениеЗаполнено(Папка) Тогда
		
		Файл = Новый Файл(Папка);
		Если Файл.Существует() Тогда
			УдалитьФайлы(Папка);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Определяет настройки обмена электронными документами по структуре параметров.
Функция ОпределитьНастройкиОбменаЭД(СтруктураПараметров, ПараметрыСертификатов = Неопределено,
	ФлагДействующиеСоглашения = Истина) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НастройкиОбменаЭД = Неопределено;
	
	НаправлениеЭД = "";
	ВидЭД = "";
	Контрагент = "";
	Если СтруктураПараметров.Свойство("НаправлениеЭД", НаправлениеЭД)
		И СтруктураПараметров.Свойство("ВидЭД", ВидЭД)
		И СтруктураПараметров.Свойство("Контрагент", Контрагент)
		И ЗначениеЗаполнено(НаправлениеЭД) И ЗначениеЗаполнено(ВидЭД) И ЗначениеЗаполнено(Контрагент) Тогда
		
		ФлагИспользованияЭЦП = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьЗначениеФункциональнойОпции(
			"ИспользоватьЭлектронныеЦифровыеПодписи");
			
		Запрос  = Новый Запрос;
		Запрос.УстановитьПараметр("Пользователь",  Пользователи.АвторизованныйПользователь());
		Запрос.УстановитьПараметр("НаправлениеЭД", НаправлениеЭД);
		
		Если ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель Тогда
			ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец;
		ИначеЕсли ВидЭД = Перечисления.ВидыЭД.АктЗаказчик Тогда
			ВидЭД = Перечисления.ВидыЭД.АктИсполнитель;
		ИначеЕсли ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель Тогда
			ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель;
		КонецЕсли;
		
		Запрос.УстановитьПараметр("ВидЭД",         ВидЭД);
		Запрос.УстановитьПараметр("Контрагент",    Контрагент);
		
		ДоговорКонтрагента = "";
		Если СтруктураПараметров.Свойство("ДоговорКонтрагента", ДоговорКонтрагента) И Не ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
			ДоговорКонтрагента = ЭлектронныеДокументыПовтИсп.ПолучитьПустуюСсылку("ДоговорыКонтрагентов");
		КонецЕсли;
		Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорКонтрагента);
		
		ВидЭДВладельца = Неопределено;
		Если СтруктураПараметров.Свойство("ВидЭДВладельца", ВидЭДВладельца) Тогда
			Запрос.УстановитьПараметр("ЭтоОтклонение", Истина);
		Иначе
			Запрос.УстановитьПараметр("ЭтоОтклонение", Ложь);
		КонецЕсли;
		Запрос.УстановитьПараметр("ВидЭДВладельца", ВидЭДВладельца);
		Запрос.УстановитьПараметр("ДокументФНС", ЭтоФНС(ВидЭДВладельца));
		
		Запрос.УстановитьПараметр("ТолькоДействующиеСоглашения",  ФлагДействующиеСоглашения);
		
		СоглашениеЭД = "";
		Организация = "";
		ВыполнитьЗапрос = Ложь;
		Если СтруктураПараметров.Свойство("СоглашениеЭД", СоглашениеЭД) И ЗначениеЗаполнено(СоглашениеЭД) Тогда
			Запрос.УстановитьПараметр("СоглашениеЭД", СоглашениеЭД);
			
			ПолучитьТекстНастроекОбменаПоСоглашению(Запрос.Текст);
			ОтборНастроек = Новый Структура("СоглашениеЭД");
			ЗаполнитьЗначенияСвойств(ОтборНастроек,Запрос.Параметры);
			МенеджерТаблиц = Новый МенеджерВременныхТаблиц;
			ПодготовитьНастройкиЭДОДляНеактуальныхВидовЭДПоСоглашению(ОтборНастроек,МенеджерТаблиц,"втДополнительныеНастройки");
			Запрос.МенеджерВременныхТаблиц = МенеджерТаблиц;
			ВыполнитьЗапрос = Истина;
			
		ИначеЕсли СтруктураПараметров.Свойство("Организация", Организация) И ЗначениеЗаполнено(Организация) Тогда
			Запрос.УстановитьПараметр("Организация", Организация);
			ПолучитьТекстЗапросаНастроекОбменаСПриоритетами(Запрос.Текст);
			ОтборНастроек = Новый Структура("Организация,Контрагент,ДоговорКонтрагента");
			ЗаполнитьЗначенияСвойств(ОтборНастроек,Запрос.Параметры);
			МенеджерТаблиц = Новый МенеджерВременныхТаблиц;
			ПодготовитьНастройкиЭДОДляНеактуальныхВидовЭД(ОтборНастроек,МенеджерТаблиц,"втДополнительныеНастройки");
			Запрос.МенеджерВременныхТаблиц = МенеджерТаблиц;
			РезультатЗапроса = Запрос.ВыполнитьПакет();
			Если РезультатЗапроса[2].Пустой() Тогда
				// Поищем настройку ЭДО без указания договора контрагента.
				ДоговорКонтрагента = ЭлектронныеДокументыПовтИсп.ПолучитьПустуюСсылку("ДоговорыКонтрагентов");
				Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорКонтрагента);
				ОтборНастроек = Новый Структура("Организация,Контрагент,ДоговорКонтрагента");
				ЗаполнитьЗначенияСвойств(ОтборНастроек,Запрос.Параметры);
				МенеджерТаблиц = Новый МенеджерВременныхТаблиц;
				ПодготовитьНастройкиЭДОДляНеактуальныхВидовЭД(ОтборНастроек,МенеджерТаблиц,"втДополнительныеНастройки");
				Запрос.МенеджерВременныхТаблиц = МенеджерТаблиц;
				ВыполнитьЗапрос = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Запрос.Текст) Тогда
			
			Если ВыполнитьЗапрос Тогда
				РезультатЗапроса = Запрос.ВыполнитьПакет();
			КонецЕсли;
			ТЗ = РезультатЗапроса[2].Выгрузить();
			ТЗСертификатовНеобходимыхПодписей = РезультатЗапроса[3].Выгрузить();
			
			Если Не ТЗ.Количество() = 0 Тогда
				ТекущаяНастройка = ТЗ[0];
				
				НастройкиОбменаЭД = Новый Структура;
				НастройкиОбменаЭД.Вставить("СертификатДоступен", Ложь);
				// Если с клиента были переданы установленные сертификаты криптографии,
				// то надо выбрать настройку с этими сертификатами.
				Если ФлагИспользованияЭЦП И ПараметрыСертификатов <> Неопределено Тогда
					МассивОтпечатковСертификатов = ВернутьМассивОтпечатковСтруктуры(ПараметрыСертификатов);
					Для Каждого СтрокаТЗ Из ТЗ Цикл
						Если СтрокаТЗ.Подписывать Тогда
							Если СтрокаТЗ.ВидЭД = Перечисления.ВидыЭД.ПлатежноеПоручение
								ИЛИ СтрокаТЗ.ВидЭД = Перечисления.ВидыЭД.ЗапросВыписки Тогда
								НайденПодходящийСертификат = Ложь;
								ПараметрыОтбора = Новый Структура("Соглашение, Отпечаток", 
								СтрокаТЗ.СоглашениеЭД, 
								СтрокаТЗ.СертификатОрганизацииДляПодписи.Отпечаток);
								МассивСтрок = ТЗСертификатовНеобходимыхПодписей.НайтиСтроки(ПараметрыОтбора);
								Для Каждого Элемент ИЗ МассивСтрок Цикл
									Если (МассивОтпечатковСертификатов.Найти(Элемент.Отпечаток) <> Неопределено
										ИЛИ ТекущаяНастройка.ПрограммаБанка = Перечисления.ПрограммыБанка.СбербанкОнлайн)
										И СтруктураПараметров.УстановленныеПодписи.Найти(СтрокаТЗ.СертификатОрганизацииДляПодписи.Отпечаток) = Неопределено Тогда 
										ТекущаяНастройка = СтрокаТЗ;
										НастройкиОбменаЭД.Вставить("СертификатДоступен", Истина);
										НайденПодходящийСертификат = Истина;
										Прервать;
									КонецЕсли
								КонецЦикла;
								Если НайденПодходящийСертификат Тогда
									Прервать;
								КонецЕсли;
							ИначеЕсли ПараметрыСертификатов.Количество() = 0 Тогда
								Прервать;
							Иначе
								Если МассивОтпечатковСертификатов.Найти(СтрокаТЗ.СертификатОрганизацииДляПодписи.Отпечаток) <> Неопределено
									ИЛИ МассивОтпечатковСертификатов.Найти(СтрокаТЗ.СертификатОрганизацииПолучателяДляПодписи.Отпечаток) <> Неопределено
									ИЛИ МассивОтпечатковСертификатов.Найти(СтрокаТЗ.СертификатОрганизацииДляПодтверждения.Отпечаток) <> Неопределено Тогда
									
									ТекущаяНастройка = СтрокаТЗ;
									НастройкиОбменаЭД.Вставить("СертификатДоступен", Истина);
									Прервать;
								КонецЕсли;
							КонецЕсли;
						Иначе
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				Для Каждого ТекКолонка Из ТЗ.Колонки Цикл
					НастройкиОбменаЭД.Вставить(ТекКолонка.Имя, ТекущаяНастройка[ТекКолонка.Имя]);
				КонецЦикла;
				
				Если ФлагИспользованияЭЦП Тогда
					ФлагПодписи = НастройкиОбменаЭД.Подписывать;
				Иначе
					ФлагПодписи = Ложь;
				КонецЕсли;
				НастройкиОбменаЭД.Вставить("Подписывать", ФлагПодписи);
			КонецЕсли;
		КонецЕсли;
	Иначе
		// Если заполнены не все обязательные реквизиты, то нельзя утверждать, что нет соглашения об обмене.
		НастройкиОбменаЭД = "";
	КонецЕсли;
	
	Возврат НастройкиОбменаЭД;
	
КонецФункции

// Получает текст запроса по настройкам обмена.
//
// Возвращаемое значение:
//  ТекстЗапроса - текст запроса.
//
Процедура ПолучитьТекстНастроекОбменаПоСоглашению(ТекстЗапроса) Экспорт
	
	ТекстЗапроса = ЭлектронныеДокументыПереопределяемый.ПолучитьТекстНастроекОбменаПоСоглашению();
	Если Не ЗначениеЗаполнено(ТекстЗапроса) Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТЧ_Соглашения.Организация КАК Организация,
		|	ТЧ_Соглашения.Контрагент КАК Контрагент,
		|	ТЧ_Соглашения.ВидЭД,
		|	ТЧ_Соглашения.НаправлениеЭД,
		|	ТЧ_Соглашения.ИспользоватьЭЦП КАК Подписывать,
		|	ТЧ_Соглашения.ТребуетсяПодтверждение КАК ТребуетсяПодтверждение,
		|	ТЧ_Соглашения.ТребуетсяИзвещениеОПолучении КАК ТребуетсяИзвещение,
		|	ВЫБОР
		|		КОГДА &ЭтоОтклонение
		|			ТОГДА НЕОПРЕДЕЛЕНО
		|		ИНАЧЕ ТЧ_Соглашения.Ссылка.СертификатКонтрагентаДляШифрования
		|	КОНЕЦ КАК СертификатКонтрагентаДляШифрования,
		|	ТЧ_Соглашения.Ссылка.СертификатОрганизацииДляРасшифровки КАК СертификатОрганизацииДляРасшифровки,
		|	ТЧ_Соглашения.ПрофильНастроекЭДО.РесурсВходящихДокументов КАК ОбщийРесурсВходящихДокументов,
		|	ТЧ_Соглашения.Ссылка.РесурсВходящихДокументов КАК РесурсВходящихДокументов,
		|	ТЧ_Соглашения.Ссылка.РесурсИсходящихДокументов КАК РесурсИсходящихДокументов,
		|	ТЧ_Соглашения.Ссылка.КаталогВходящихДокументов КАК КаталогВходящихДокументов,
		|	ТЧ_Соглашения.Ссылка.КаталогИсходящихДокументов КАК КаталогИсходящихДокументов,
		|	ТЧ_Соглашения.Ссылка.КаталогВходящихДокументовFTP КАК КаталогВходящихДокументовFTP,
		|	ТЧ_Соглашения.Ссылка.КаталогИсходящихДокументовFTP КАК КаталогИсходящихДокументовFTP,
		|	ТЧ_Соглашения.Ссылка.ЭлектроннаяПочтаКонтрагента КАК ЭлектроннаяПочтаКонтрагента,
		|	ТЧ_Соглашения.ИдентификаторКонтрагента КАК ИдентификаторКонтрагента,
		|	ТЧ_Соглашения.ИдентификаторОрганизации КАК ИдентификаторОрганизации,
		|	ТЧ_Соглашения.Ссылка КАК Основание,
		|	ТЧ_Соглашения.ПрофильНастроекЭДО КАК ПрофильНастроекЭДО,
		|	ТЧ_Соглашения.СпособОбменаЭД КАК СпособОбменаЭД,
		|	ТЧ_Соглашения.ВерсияРегламентаЭДО,
		|	ТЧ_Соглашения.ВерсияФормата,
		|	ТЧ_Соглашения.ВерсияФорматаПакета,
		|	ТЧ_Соглашения.Ссылка.ПрограммаБанка КАК ПрограммаБанка,
		|	ТЧ_Соглашения.НайстройкаЭДОДействует
		|ПОМЕСТИТЬ ВТ_ТЧ_Соглашения
		|ИЗ
		|	(ВЫБРАТЬ
		|		СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка КАК Ссылка,
		|		СоглашенияОбИспользованииЭДИсходящиеДокументы.ИсходящийДокумент КАК ВидЭД,
		|		СоглашенияОбИспользованииЭДИсходящиеДокументы.ИспользоватьЭЦП КАК ИспользоватьЭЦП,
		|		СоглашенияОбИспользованииЭДИсходящиеДокументы.ТребуетсяОтветнаяПодпись КАК ТребуетсяПодтверждение,
		|		СоглашенияОбИспользованииЭДИсходящиеДокументы.ТребуетсяИзвещениеОПолучении КАК ТребуетсяИзвещениеОПолучении,
		|		&НаправлениеЭД КАК НаправлениеЭД,
		|		СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.Организация КАК Организация,
		|		СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.Контрагент КАК Контрагент,
		|		СоглашенияОбИспользованииЭДИсходящиеДокументы.ИдентификаторКонтрагента КАК ИдентификаторКонтрагента,
		|		СоглашенияОбИспользованииЭДИсходящиеДокументы.ИдентификаторОрганизации КАК ИдентификаторОрганизации,
		|		СоглашенияОбИспользованииЭДИсходящиеДокументы.СпособОбменаЭД КАК СпособОбменаЭД,
		|		ЗНАЧЕНИЕ(Перечисление.ВерсииРегламентаОбмена1С.Версия20) КАК ВерсияРегламентаЭДО,
		|		СоглашенияОбИспользованииЭДИсходящиеДокументы.ВерсияФормата КАК ВерсияФормата,
		|		СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.ВерсияФорматаПакета КАК ВерсияФорматаПакета,
		|		СоглашенияОбИспользованииЭДИсходящиеДокументы.ПрофильНастроекЭДО КАК ПрофильНастроекЭДО,
		|		ВЫБОР
		|			КОГДА НЕ СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.ПометкаУдаления
		|					И СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.СтатусПодключения = ЗНАЧЕНИЕ(Перечисление.СтатусыУчастниковОбменаЭД.Присоединен)
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ КАК НайстройкаЭДОДействует
		|	ИЗ
		|		Справочник.СоглашенияОбИспользованииЭД.ИсходящиеДокументы КАК СоглашенияОбИспользованииЭДИсходящиеДокументы
		|	ГДЕ
		|		СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка = &СоглашениеЭД
		|		И ВЫБОР
		|				КОГДА &ЭтоОтклонение
		|					ТОГДА СоглашенияОбИспользованииЭДИсходящиеДокументы.ИсходящийДокумент = &ВидЭДВладельца
		|				ИНАЧЕ СоглашенияОбИспользованииЭДИсходящиеДокументы.ИсходящийДокумент = &ВидЭД
		|			КОНЕЦ
		|		И ВЫБОР
		|				КОГДА &ТолькоДействующиеСоглашения
		|					ТОГДА НЕ СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.ПометкаУдаления
		|							И (СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезВебРесурсБанка)
		|									И СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.СтатусСоглашения = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийЭД.Действует)
		|								ИЛИ СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.СпособОбменаЭД <> ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезВебРесурсБанка)
		|									И СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.СтатусПодключения = ЗНАЧЕНИЕ(Перечисление.СтатусыУчастниковОбменаЭД.Присоединен))
		|				ИНАЧЕ ИСТИНА
		|			КОНЕЦ
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		втДополнительныеНастройки.Ссылка,
		|		втДополнительныеНастройки.ИсходящийДокумент,
		|		втДополнительныеНастройки.ИспользоватьЭЦП,
		|		втДополнительныеНастройки.ТребуетсяОтветнаяПодпись,
		|		втДополнительныеНастройки.ТребуетсяИзвещениеОПолучении,
		|		&НаправлениеЭД,
		|		втДополнительныеНастройки.Организация,
		|		втДополнительныеНастройки.Контрагент,
		|		втДополнительныеНастройки.ИдентификаторКонтрагента,
		|		втДополнительныеНастройки.ИдентификаторОрганизации,
		|		"""",
		|		ЗНАЧЕНИЕ(Перечисление.ВерсииРегламентаОбмена1С.Версия20),
		|		втДополнительныеНастройки.ВерсияФормата,
		|		втДополнительныеНастройки.ВерсияФорматаПакета,
		|		втДополнительныеНастройки.ПрофильНастроекЭДО,
		|		ИСТИНА
		|	ИЗ
		|		втДополнительныеНастройки КАК втДополнительныеНастройки
		|	ГДЕ
		|		ВЫБОР
		|				КОГДА &ТолькоДействующиеСоглашения
		|					ТОГДА НЕ втДополнительныеНастройки.Ссылка.ПометкаУдаления
		|							И (втДополнительныеНастройки.Ссылка.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезВебРесурсБанка)
		|									И втДополнительныеНастройки.Ссылка.СтатусСоглашения = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийЭД.Действует)
		|								ИЛИ втДополнительныеНастройки.Ссылка.СпособОбменаЭД <> ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезВебРесурсБанка)
		|									И (втДополнительныеНастройки.Ссылка.СтатусПодключения = ЗНАЧЕНИЕ(Перечисление.СтатусыУчастниковОбменаЭД.Присоединен)
		|										ИЛИ втДополнительныеНастройки.Ссылка.СтатусСоглашения = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийЭД.Действует)))
		|				ИНАЧЕ ИСТИНА
		|			КОНЕЦ
		|		И ВЫБОР
		|				КОГДА &ВидЭД = НЕОПРЕДЕЛЕНО
		|						И &НаправлениеЭД = НЕОПРЕДЕЛЕНО
		|					ТОГДА ИСТИНА
		|				КОГДА ВЫБОР
		|						КОГДА &ЭтоОтклонение
		|							ТОГДА втДополнительныеНастройки.ИсходящийДокумент = &ВидЭДВладельца
		|						ИНАЧЕ втДополнительныеНастройки.ИсходящийДокумент = &ВидЭД
		|					КОНЕЦ
		|					ТОГДА ИСТИНА
		|				ИНАЧЕ ЛОЖЬ
		|			КОНЕЦ
		|		И &НаправлениеЭД = ЗНАЧЕНИЕ(Перечисление.НаправленияЭД.Входящий)) КАК ТЧ_Соглашения
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СправочникСертификатов.Ссылка КАК Ссылка,
		|	СправочникСертификатов.ВидДокумента КАК ВидДокумента,
		|	СправочникСертификатов.Ссылка.Организация КАК Организация,
		|	СправочникСертификатов.Ссылка.ЗапомнитьПарольКСертификату,
		|	СправочникСертификатов.Ссылка.ЗапомнитьПарольКСертификату КАК ПарольПолучен,
		|	ВЫБОР
		|		КОГДА СправочникСертификатов.Ссылка.ЗапомнитьПарольКСертификату
		|			ТОГДА СправочникСертификатов.Ссылка.ПарольПользователя
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК ПарольПользователя
		|ПОМЕСТИТЬ ВТ_Сертификаты
		|ИЗ
		|	Справочник.СертификатыЭЦП.ВидыДокументов КАК СправочникСертификатов
		|ГДЕ
		|	НЕ СправочникСертификатов.Ссылка.ПометкаУдаления
		|	И НЕ СправочникСертификатов.Ссылка.Отозван
		|	И СправочникСертификатов.ИспользоватьДляПодписи
		|	И СправочникСертификатов.ВидДокумента = &ВидЭД
		|	И (СправочникСертификатов.Ссылка.СписокПользователей.Пользователь = &Пользователь
		|			ИЛИ НЕ СправочникСертификатов.Ссылка.ОграничитьДоступКСертификату)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ТЧ_Соглашения.Организация,
		|	ВТ_ТЧ_Соглашения.Контрагент,
		|	ВТ_ТЧ_Соглашения.ВидЭД,
		|	ВТ_ТЧ_Соглашения.НаправлениеЭД,
		|	ВТ_ТЧ_Соглашения.Подписывать КАК Подписывать,
		|	ВТ_ТЧ_Соглашения.ТребуетсяПодтверждение КАК ТребуетсяПодтверждение,
		|	ВТ_ТЧ_Соглашения.ТребуетсяИзвещение КАК ТребуетсяИзвещение,
		|	ВТ_ТЧ_Соглашения.СертификатКонтрагентаДляШифрования,
		|	ВТ_ТЧ_Соглашения.СертификатОрганизацииДляРасшифровки,
		|	ВТ_ТЧ_Соглашения.ОбщийРесурсВходящихДокументов,
		|	ВТ_ТЧ_Соглашения.РесурсВходящихДокументов КАК РесурсВходящихДокументов,
		|	ВТ_ТЧ_Соглашения.РесурсИсходящихДокументов КАК РесурсИсходящихДокументов,
		|	ВТ_ТЧ_Соглашения.КаталогВходящихДокументов,
		|	ВТ_ТЧ_Соглашения.КаталогИсходящихДокументов,
		|	ВТ_ТЧ_Соглашения.КаталогВходящихДокументовFTP,
		|	ВТ_ТЧ_Соглашения.КаталогИсходящихДокументовFTP,
		|	ВТ_ТЧ_Соглашения.ЭлектроннаяПочтаКонтрагента,
		|	ВТ_ТЧ_Соглашения.ИдентификаторКонтрагента КАК ИдентификаторКонтрагента,
		|	ВТ_ТЧ_Соглашения.ИдентификаторОрганизации КАК ИдентификаторОрганизации,
		|	ВТ_ТЧ_Соглашения.Основание КАК СоглашениеЭД,
		|	ВТ_ТЧ_Соглашения.ПрофильНастроекЭДО КАК ПрофильНастроекЭДО,
		|	ВТ_ТЧ_Соглашения.СпособОбменаЭД КАК СпособОбменаЭД,
		|	ВЫБОР
		|		КОГДА ВТ_Сертификаты.Ссылка ЕСТЬ NULL 
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.СертификатыЭЦП.ПустаяСсылка)
		|		ИНАЧЕ ВТ_Сертификаты.Ссылка
		|	КОНЕЦ КАК СертификатОрганизацииДляПодписи,
		|	ВЫБОР
		|		КОГДА ВТ_Сертификаты.Ссылка ЕСТЬ NULL 
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.СертификатыЭЦП.ПустаяСсылка)
		|		ИНАЧЕ ВТ_Сертификаты.Ссылка
		|	КОНЕЦ КАК СертификатОрганизацииДляПодтверждения,
		|	ВЫБОР
		|		КОГДА &НаправлениеЭД <> ЗНАЧЕНИЕ(Перечисление.НаправленияЭД.Интеркампани)
		|				ИЛИ ВТ_СертификатыОрганизацииПолучателя.Ссылка ЕСТЬ NULL 
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.СертификатыЭЦП.ПустаяСсылка)
		|		ИНАЧЕ ВТ_СертификатыОрганизацииПолучателя.Ссылка
		|	КОНЕЦ КАК СертификатОрганизацииПолучателяДляПодписи,
		|	ЕСТЬNULL(ВТ_Сертификаты.ЗапомнитьПарольКСертификату, ЛОЖЬ) КАК ЗапомнитьПарольКСертификату,
		|	ЕСТЬNULL(ВТ_Сертификаты.ЗапомнитьПарольКСертификату, ЛОЖЬ) КАК ПарольПолучен,
		|	ВТ_Сертификаты.ПарольПользователя,
		|	ЕСТЬNULL(ВТ_СертификатыОрганизацииПолучателя.ЗапомнитьПарольКСертификату, ЛОЖЬ) КАК ЗапомнитьПарольКСертификатуОргПолуч,
		|	ЕСТЬNULL(ВТ_СертификатыОрганизацииПолучателя.ЗапомнитьПарольКСертификату, ЛОЖЬ) КАК ПарольПолученОргПолуч,
		|	ВТ_СертификатыОрганизацииПолучателя.ПарольПользователя КАК ПарольПользователяОргПолуч,
		|	ВТ_ТЧ_Соглашения.ВерсияРегламентаЭДО,
		|	ВТ_ТЧ_Соглашения.ВерсияФормата,
		|	ВТ_ТЧ_Соглашения.ВерсияФорматаПакета,
		|	ВТ_ТЧ_Соглашения.ПрограммаБанка,
		|	ВТ_ТЧ_Соглашения.НайстройкаЭДОДействует
		|ИЗ
		|	ВТ_ТЧ_Соглашения КАК ВТ_ТЧ_Соглашения
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Сертификаты КАК ВТ_Сертификаты
		|		ПО ВТ_ТЧ_Соглашения.ВидЭД = ВТ_Сертификаты.ВидДокумента
		|			И (ВТ_Сертификаты.Организация = ВТ_ТЧ_Соглашения.Организация)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Сертификаты КАК ВТ_СертификатыОрганизацииПолучателя
		|		ПО ВТ_ТЧ_Соглашения.ВидЭД = ВТ_СертификатыОрганизацииПолучателя.ВидДокумента
		|			И ВТ_ТЧ_Соглашения.Контрагент = ВТ_СертификатыОрганизацииПолучателя.Организация
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СоглашенияОбИспользованииЭДСертификатыПодписейОрганизации.Сертификат.Отпечаток КАК Отпечаток,
		|	СоглашенияОбИспользованииЭДСертификатыПодписейОрганизации.Ссылка КАК Соглашение
		|ИЗ
		|	Справочник.СоглашенияОбИспользованииЭД.СертификатыПодписейОрганизации КАК СоглашенияОбИспользованииЭДСертификатыПодписейОрганизации
		|ГДЕ
		|	НЕ СоглашенияОбИспользованииЭДСертификатыПодписейОрганизации.Ссылка.ПометкаУдаления
		|	И СоглашенияОбИспользованииЭДСертификатыПодписейОрганизации.Ссылка = &СоглашениеЭД";
	КонецЕсли;
	
КонецПроцедуры

// Получает текст запроса по настройкам обмена с приоритетами.
//
// Параметры:
//  ТекстЗапроса - текст запроса.
//
Процедура ПолучитьТекстЗапросаНастроекОбменаСПриоритетами(ТекстЗапроса)
	
	ТекстЗапроса = ЭлектронныеДокументыПереопределяемый.ПолучитьТекстЗапросаНастроекОбменаСПриоритетами();
	Если Не ЗначениеЗаполнено(ТекстЗапроса) Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТЧ_Соглашения.Организация КАК Организация,
		|	ТЧ_Соглашения.Контрагент КАК Контрагент,
		|	ТЧ_Соглашения.ВидЭД,
		|	ТЧ_Соглашения.НаправлениеЭД,
		|	ТЧ_Соглашения.ИспользоватьЭЦП КАК Подписывать,
		|	ТЧ_Соглашения.ТребуетсяПодтверждение КАК ТребуетсяПодтверждение,
		|	ТЧ_Соглашения.ТребуетсяИзвещениеОПолучении КАК ТребуетсяИзвещение,
		|	ИСТИНА КАК ОжидатьКвитанциюОДоставке,
		|	ТЧ_Соглашения.Ссылка.СертификатКонтрагентаДляШифрования КАК СертификатКонтрагентаДляШифрования,
		|	ТЧ_Соглашения.Ссылка.СертификатОрганизацииДляРасшифровки КАК СертификатОрганизацииДляРасшифровки,
		|	ТЧ_Соглашения.ПрофильНастроекЭДО.РесурсВходящихДокументов КАК ОбщийРесурсВходящихДокументов,
		|	ТЧ_Соглашения.Ссылка.РесурсВходящихДокументов КАК РесурсВходящихДокументов,
		|	ТЧ_Соглашения.Ссылка.РесурсИсходящихДокументов КАК РесурсИсходящихДокументов,
		|	ТЧ_Соглашения.Ссылка.КаталогВходящихДокументов КАК КаталогВходящихДокументов,
		|	ТЧ_Соглашения.Ссылка.КаталогИсходящихДокументов КАК КаталогИсходящихДокументов,
		|	ТЧ_Соглашения.Ссылка.КаталогВходящихДокументовFTP КАК КаталогВходящихДокументовFTP,
		|	ТЧ_Соглашения.Ссылка.КаталогИсходящихДокументовFTP КАК КаталогИсходящихДокументовFTP,
		|	ТЧ_Соглашения.Ссылка.ЭлектроннаяПочтаКонтрагента КАК ЭлектроннаяПочтаКонтрагента,
		|	ТЧ_Соглашения.ИдентификаторКонтрагента КАК ИдентификаторКонтрагента,
		|	ТЧ_Соглашения.ИдентификаторОрганизации КАК ИдентификаторОрганизации,
		|	ТЧ_Соглашения.Ссылка КАК Основание,
		|	ТЧ_Соглашения.ПрофильНастроекЭДО КАК ПрофильНастроекЭДО,
		|	ТЧ_Соглашения.СпособОбменаЭД КАК СпособОбменаЭД,
		|	ТЧ_Соглашения.ВерсияРегламентаЭДО КАК ВерсияРегламентаЭДО,
		|	ТЧ_Соглашения.Приоритет,
		|	ТЧ_Соглашения.ВерсияФормата,
		|	ТЧ_Соглашения.ВерсияФорматаПакета,
		|	ТЧ_Соглашения.Ссылка.ПрограммаБанка КАК ПрограммаБанка,
		|	ТЧ_Соглашения.НайстройкаЭДОДействует
		|ПОМЕСТИТЬ ВТ_ТЧ_Соглашения
		|ИЗ
		|	(ВЫБРАТЬ
		|		СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка КАК Ссылка,
		|		СоглашенияОбИспользованииЭДИсходящиеДокументы.ИсходящийДокумент КАК ВидЭД,
		|		СоглашенияОбИспользованииЭДИсходящиеДокументы.ИспользоватьЭЦП КАК ИспользоватьЭЦП,
		|		СоглашенияОбИспользованииЭДИсходящиеДокументы.ТребуетсяОтветнаяПодпись КАК ТребуетсяПодтверждение,
		|		СоглашенияОбИспользованииЭДИсходящиеДокументы.ТребуетсяИзвещениеОПолучении КАК ТребуетсяИзвещениеОПолучении,
		|		&НаправлениеЭД КАК НаправлениеЭД,
		|		СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.Организация КАК Организация,
		|		СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.Контрагент КАК Контрагент,
		|		СоглашенияОбИспользованииЭДИсходящиеДокументы.ИдентификаторКонтрагента КАК ИдентификаторКонтрагента,
		|		СоглашенияОбИспользованииЭДИсходящиеДокументы.ИдентификаторОрганизации КАК ИдентификаторОрганизации,
		|		СоглашенияОбИспользованииЭДИсходящиеДокументы.СпособОбменаЭД КАК СпособОбменаЭД,
		|		ЗНАЧЕНИЕ(Перечисление.ВерсииРегламентаОбмена1С.Версия20) КАК ВерсияРегламентаЭДО,
		|		СоглашенияОбИспользованииЭДИсходящиеДокументы.ВерсияФормата КАК ВерсияФормата,
		|		СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.ВерсияФорматаПакета КАК ВерсияФорматаПакета,
		|		СоглашенияОбИспользованииЭДИсходящиеДокументы.ПрофильНастроекЭДО КАК ПрофильНастроекЭДО,
		|		ВЫБОР
		|			КОГДА СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.ИспользуетсяДляОтправки
		|				ТОГДА 0
		|			ИНАЧЕ 1
		|		КОНЕЦ КАК Приоритет,
		|		ВЫБОР
		|			КОГДА НЕ СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.ПометкаУдаления
		|						И СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.СтатусПодключения = ЗНАЧЕНИЕ(Перечисление.СтатусыУчастниковОбменаЭД.Присоединен)
		|					ИЛИ СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.СтатусСоглашения = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийЭД.Действует)
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ КАК НайстройкаЭДОДействует
		|	ИЗ
		|		Справочник.СоглашенияОбИспользованииЭД.ИсходящиеДокументы КАК СоглашенияОбИспользованииЭДИсходящиеДокументы
		|	ГДЕ
		|		ВЫБОР
		|				КОГДА &ТолькоДействующиеСоглашения
		|					ТОГДА НЕ СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.ПометкаУдаления
		|							И (СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезВебРесурсБанка)
		|									И СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.СтатусСоглашения = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийЭД.Действует)
		|								ИЛИ СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.СпособОбменаЭД <> ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезВебРесурсБанка)
		|									И (СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.СтатусПодключения = ЗНАЧЕНИЕ(Перечисление.СтатусыУчастниковОбменаЭД.Присоединен)
		|										ИЛИ СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.СтатусСоглашения = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийЭД.Действует)))
		|				ИНАЧЕ ИСТИНА
		|			КОНЕЦ
		|		И СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.Организация = &Организация
		|		И СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.Контрагент = &Контрагент
		|		И СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.ДоговорКонтрагента = &ДоговорКонтрагента
		|		И ВЫБОР
		|				КОГДА &ВидЭД = НЕОПРЕДЕЛЕНО
		|						И &НаправлениеЭД = НЕОПРЕДЕЛЕНО
		|					ТОГДА ИСТИНА
		|				КОГДА ВЫБОР
		|						КОГДА &ЭтоОтклонение
		|							ТОГДА СоглашенияОбИспользованииЭДИсходящиеДокументы.ИсходящийДокумент = &ВидЭДВладельца
		|						ИНАЧЕ СоглашенияОбИспользованииЭДИсходящиеДокументы.ИсходящийДокумент = &ВидЭД
		|					КОНЕЦ
		|					ТОГДА СоглашенияОбИспользованииЭДИсходящиеДокументы.Формировать
		|				ИНАЧЕ ЛОЖЬ
		|			КОНЕЦ
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		втДополнительныеНастройки.Ссылка,
		|		втДополнительныеНастройки.ИсходящийДокумент,
		|		втДополнительныеНастройки.ИспользоватьЭЦП,
		|		втДополнительныеНастройки.ТребуетсяОтветнаяПодпись,
		|		втДополнительныеНастройки.ТребуетсяИзвещениеОПолучении,
		|		&НаправлениеЭД,
		|		втДополнительныеНастройки.Организация,
		|		втДополнительныеНастройки.Контрагент,
		|		втДополнительныеНастройки.ИдентификаторКонтрагента,
		|		втДополнительныеНастройки.ИдентификаторОрганизации,
		|		"""",
		|		ЗНАЧЕНИЕ(Перечисление.ВерсииРегламентаОбмена1С.Версия20),
		|		втДополнительныеНастройки.ВерсияФормата,
		|		втДополнительныеНастройки.ВерсияФорматаПакета,
		|		втДополнительныеНастройки.ПрофильНастроекЭДО,
		|		0,
		|		ИСТИНА
		|	ИЗ
		|		втДополнительныеНастройки КАК втДополнительныеНастройки
		|	ГДЕ
		|		ВЫБОР
		|				КОГДА &ТолькоДействующиеСоглашения
		|					ТОГДА НЕ втДополнительныеНастройки.Ссылка.ПометкаУдаления
		|							И (втДополнительныеНастройки.Ссылка.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезВебРесурсБанка)
		|									И втДополнительныеНастройки.Ссылка.СтатусСоглашения = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийЭД.Действует)
		|								ИЛИ втДополнительныеНастройки.Ссылка.СпособОбменаЭД <> ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезВебРесурсБанка)
		|									И (втДополнительныеНастройки.Ссылка.СтатусПодключения = ЗНАЧЕНИЕ(Перечисление.СтатусыУчастниковОбменаЭД.Присоединен)
		|										ИЛИ втДополнительныеНастройки.Ссылка.СтатусСоглашения = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийЭД.Действует)))
		|				ИНАЧЕ ИСТИНА
		|			КОНЕЦ
		|		И ВЫБОР
		|				КОГДА &ВидЭД = НЕОПРЕДЕЛЕНО
		|						И &НаправлениеЭД = НЕОПРЕДЕЛЕНО
		|					ТОГДА ИСТИНА
		|				КОГДА ВЫБОР
		|						КОГДА &ЭтоОтклонение
		|							ТОГДА втДополнительныеНастройки.ИсходящийДокумент = &ВидЭДВладельца
		|						ИНАЧЕ втДополнительныеНастройки.ИсходящийДокумент = &ВидЭД
		|					КОНЕЦ
		|					ТОГДА ИСТИНА
		|				ИНАЧЕ ЛОЖЬ
		|			КОНЕЦ
		|		И &НаправлениеЭД = ЗНАЧЕНИЕ(Перечисление.НаправленияЭД.Входящий)) КАК ТЧ_Соглашения
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СправочникСертификатов.Ссылка КАК Ссылка,
		|	СправочникСертификатов.ВидДокумента КАК ВидДокумента,
		|	СправочникСертификатов.Ссылка.Организация КАК Организация,
		|	СправочникСертификатов.Ссылка.ЗапомнитьПарольКСертификату,
		|	СправочникСертификатов.Ссылка.ЗапомнитьПарольКСертификату КАК ПарольПолучен,
		|	ВЫБОР
		|		КОГДА СправочникСертификатов.Ссылка.ЗапомнитьПарольКСертификату
		|			ТОГДА СправочникСертификатов.Ссылка.ПарольПользователя
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК ПарольПользователя
		|ПОМЕСТИТЬ ВТ_Сертификаты
		|ИЗ
		|	Справочник.СертификатыЭЦП.ВидыДокументов КАК СправочникСертификатов
		|ГДЕ
		|	НЕ СправочникСертификатов.Ссылка.ПометкаУдаления
		|	И (СправочникСертификатов.Ссылка.Организация = &Организация
		|			ИЛИ ВЫБОР
		|				КОГДА &НаправлениеЭД = ЗНАЧЕНИЕ(Перечисление.НаправленияЭД.Интеркампани)
		|					ТОГДА СправочникСертификатов.Ссылка.Организация = &Контрагент
		|				ИНАЧЕ ЛОЖЬ
		|			КОНЕЦ)
		|	И НЕ СправочникСертификатов.Ссылка.Отозван
		|	И ВЫБОР
		|			КОГДА &ВидЭД = НЕОПРЕДЕЛЕНО
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ СправочникСертификатов.ВидДокумента = &ВидЭД
		|		КОНЕЦ
		|	И СправочникСертификатов.ИспользоватьДляПодписи
		|	И (СправочникСертификатов.Ссылка.СписокПользователей.Пользователь = &Пользователь
		|			ИЛИ НЕ СправочникСертификатов.Ссылка.ОграничитьДоступКСертификату)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ТЧ_Соглашения.Приоритет КАК Приоритет,
		|	ВТ_ТЧ_Соглашения.Организация,
		|	ВТ_ТЧ_Соглашения.Контрагент,
		|	ВТ_ТЧ_Соглашения.ВидЭД,
		|	ВТ_ТЧ_Соглашения.НаправлениеЭД,
		|	ВТ_ТЧ_Соглашения.Подписывать КАК Подписывать,
		|	ВТ_ТЧ_Соглашения.ТребуетсяПодтверждение КАК ТребуетсяПодтверждение,
		|	ВТ_ТЧ_Соглашения.ТребуетсяИзвещение КАК ТребуетсяИзвещение,
		|	ВТ_ТЧ_Соглашения.ОжидатьКвитанциюОДоставке КАК ОжидатьКвитанциюОДоставке,
		|	ВТ_ТЧ_Соглашения.СертификатКонтрагентаДляШифрования,
		|	ВТ_ТЧ_Соглашения.СертификатОрганизацииДляРасшифровки,
		|	ВТ_ТЧ_Соглашения.ОбщийРесурсВходящихДокументов,
		|	ВТ_ТЧ_Соглашения.РесурсВходящихДокументов КАК РесурсВходящихДокументов,
		|	ВТ_ТЧ_Соглашения.РесурсИсходящихДокументов КАК РесурсИсходящихДокументов,
		|	ВТ_ТЧ_Соглашения.КаталогВходящихДокументов,
		|	ВТ_ТЧ_Соглашения.КаталогИсходящихДокументов,
		|	ВТ_ТЧ_Соглашения.КаталогВходящихДокументовFTP,
		|	ВТ_ТЧ_Соглашения.КаталогИсходящихДокументовFTP,
		|	ВТ_ТЧ_Соглашения.ЭлектроннаяПочтаКонтрагента,
		|	ВТ_ТЧ_Соглашения.ИдентификаторКонтрагента КАК ИдентификаторКонтрагента,
		|	ВТ_ТЧ_Соглашения.ИдентификаторОрганизации КАК ИдентификаторОрганизации,
		|	ВТ_ТЧ_Соглашения.Основание КАК СоглашениеЭД,
		|	ВТ_ТЧ_Соглашения.ПрофильНастроекЭДО КАК ПрофильНастроекЭДО,
		|	ВТ_ТЧ_Соглашения.СпособОбменаЭД КАК СпособОбменаЭД,
		|	ВЫБОР
		|		КОГДА ВТ_Сертификаты.Ссылка ЕСТЬ NULL 
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.СертификатыЭЦП.ПустаяСсылка)
		|		ИНАЧЕ ВТ_Сертификаты.Ссылка
		|	КОНЕЦ КАК СертификатОрганизацииДляПодписи,
		|	ВЫБОР
		|		КОГДА ВТ_Сертификаты.Ссылка ЕСТЬ NULL 
		|				ИЛИ ВТ_Сертификаты.Организация <> &Организация
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.СертификатыЭЦП.ПустаяСсылка)
		|		ИНАЧЕ ВТ_Сертификаты.Ссылка
		|	КОНЕЦ КАК СертификатОрганизацииДляПодтверждения,
		|	ВЫБОР
		|		КОГДА НЕ &НаправлениеЭД = ЗНАЧЕНИЕ(Перечисление.НаправленияЭД.Интеркампани)
		|				ИЛИ ВТ_СертификатыОрганизацииПолучателя.Ссылка ЕСТЬ NULL 
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.СертификатыЭЦП.ПустаяСсылка)
		|		ИНАЧЕ ВТ_СертификатыОрганизацииПолучателя.Ссылка
		|	КОНЕЦ КАК СертификатОрганизацииПолучателяДляПодписи,
		|	ЕСТЬNULL(ВТ_Сертификаты.ЗапомнитьПарольКСертификату, ЛОЖЬ) КАК ЗапомнитьПарольКСертификату,
		|	ЕСТЬNULL(ВТ_Сертификаты.ЗапомнитьПарольКСертификату, ЛОЖЬ) КАК ПарольПолучен,
		|	ВТ_Сертификаты.ПарольПользователя,
		|	ЕСТЬNULL(ВТ_СертификатыОрганизацииПолучателя.ЗапомнитьПарольКСертификату, ЛОЖЬ) КАК ЗапомнитьПарольКСертификатуОргПолуч,
		|	ЕСТЬNULL(ВТ_СертификатыОрганизацииПолучателя.ЗапомнитьПарольКСертификату, ЛОЖЬ) КАК ПарольПолученОргПолуч,
		|	ВТ_СертификатыОрганизацииПолучателя.ПарольПользователя КАК ПарольПользователяОргПолуч,
		|	ВТ_ТЧ_Соглашения.ВерсияРегламентаЭДО,
		|	ВТ_ТЧ_Соглашения.ВерсияФормата,
		|	ВТ_ТЧ_Соглашения.ВерсияФорматаПакета,
		|	ВТ_ТЧ_Соглашения.ПрограммаБанка,
		|	ВТ_ТЧ_Соглашения.НайстройкаЭДОДействует
		|ИЗ
		|	ВТ_ТЧ_Соглашения КАК ВТ_ТЧ_Соглашения
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Сертификаты КАК ВТ_Сертификаты
		|		ПО ВТ_ТЧ_Соглашения.ВидЭД = ВТ_Сертификаты.ВидДокумента
		|			И ВТ_ТЧ_Соглашения.Организация = ВТ_Сертификаты.Организация
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Сертификаты КАК ВТ_СертификатыОрганизацииПолучателя
		|		ПО ВТ_ТЧ_Соглашения.ВидЭД = ВТ_СертификатыОрганизацииПолучателя.ВидДокумента
		|			И ВТ_ТЧ_Соглашения.Контрагент = ВТ_СертификатыОрганизацииПолучателя.Организация
		|ГДЕ
		|	ВЫБОР
		|			КОГДА &ВидЭД = НЕОПРЕДЕЛЕНО
		|					И &НаправлениеЭД = НЕОПРЕДЕЛЕНО
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ВТ_ТЧ_Соглашения.НаправлениеЭД = &НаправлениеЭД
		|					И ВЫБОР
		|						КОГДА &ЭтоОтклонение
		|							ТОГДА ВЫБОР
		|									КОГДА &ДокументФНС
		|										ТОГДА ИСТИНА
		|									ИНАЧЕ ВТ_ТЧ_Соглашения.ВидЭД = &ВидЭДВладельца
		|								КОНЕЦ
		|						ИНАЧЕ ВТ_ТЧ_Соглашения.ВидЭД = &ВидЭД
		|					КОНЕЦ
		|		КОНЕЦ
		|
		|УПОРЯДОЧИТЬ ПО
		|	Приоритет
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СоглашенияОбИспользованииЭДСертификатыПодписейОрганизации.Ссылка КАК Соглашение,
		|	СоглашенияОбИспользованииЭДСертификатыПодписейОрганизации.Сертификат.Отпечаток КАК Отпечаток
		|ИЗ
		|	Справочник.СоглашенияОбИспользованииЭД.СертификатыПодписейОрганизации КАК СоглашенияОбИспользованииЭДСертификатыПодписейОрганизации
		|ГДЕ
		|	СоглашенияОбИспользованииЭДСертификатыПодписейОрганизации.Ссылка.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезВебРесурсБанка)
		|	И НЕ СоглашенияОбИспользованииЭДСертификатыПодписейОрганизации.Ссылка.ПометкаУдаления
		|	И СоглашенияОбИспользованииЭДСертификатыПодписейОрганизации.Ссылка.СтатусСоглашения = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийЭД.Действует)";
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает структуру, содержащую значения реквизитов прочитанные из информационной базы
// по ссылке на объект.
// 
//  Если доступа к одному из реквизитов нет, возникнет исключение прав доступа.
//  Если необходимо зачитать реквизит независимо от прав текущего пользователя,
//  то следует использовать предварительный переход в привилегированный режим.
// 
// Параметры:
//  Ссылка       - ссылка на объект, - элемент справочника, документ, ...
//  ИменаРеквизитов - Строка или Структура - если Строка, то имена реквизитов, 
//               перечисленные через запятую, в формате требований к свойствам структуры.
//               Например, "Код, Наименование, Родитель".
//               Если Структура, то в качестве ключа передается псевдоним поля для
//               возвращаемой структуры с результатом, а в качестве значения (опционально) 
//               - фактическое имя поля в таблице. 
//               Если значение не определено, то имя поля берется из ключа.
// 
// Возвращаемое значение:
//  Структура    - содержит список свойств, как список имен в строке
//                 ИменаРеквизитов, со значениям реквизитов, прочитанных
//                 из информационной базы.
// 
Функция СтруктураЗначенийРеквизитов(Ссылка, ИменаРеквизитов) Экспорт
	
	СтруктураДанных = "";
	ЭлектронныеДокументыПереопределяемый.ПолучитьСтруктуруЗначенийРеквизитов(Ссылка, ИменаРеквизитов, СтруктураДанных);
	
	Если ТипЗнч(СтруктураДанных) <> Тип("Структура") Тогда
		СтруктураДанных = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, ИменаРеквизитов);
	КонецЕсли;
	
	Возврат СтруктураДанных;
	
КонецФункции

// Функция формирует электронные документы и помещает их в справочник присоединенных файлов
//
// Параметры:
//  МассивОбъектов - массив ссылок на объекты, к которым надо создать электронный документ;
//  СоответствиеПараметров - соответствие, содержащая настройки обмена ЭД для объектов.
//
Функция СформироватьПрисоединенныеФайлы(МассивОбъектов, ПараметрыОбмена, ДопПараметры = "") Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	МассивСтруктурОбмена = СформироватьХМЛФайлыДокументов(МассивОбъектов, ПараметрыОбмена, ДопПараметры);
	МассивСформированныхФайлов = Новый Массив;
	Для Каждого СтруктураОбмена Из МассивСтруктурОбмена Цикл
	
		ПолноеИмяФайла = СтруктураОбмена.ПолноеИмяФайла;
		
		Если НЕ ЗначениеЗаполнено(ПолноеИмяФайла) Тогда
			Продолжить;
		КонецЕсли;
		
		ВремяСозданияЭД = СтруктураОбмена.СтруктураЭД.ДатаЭД;
		Файл = Новый Файл(ПолноеИмяФайла);
		ДвоичныеДанные = Новый ДвоичныеДанные(Файл.ПолноеИмя);
		АдресФайла = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
		
		УникальныйИдентификаторЭД = "";
		СтруктураОбмена.Свойство("УникальныйИдентификатор", УникальныйИдентификаторЭД);
		
		Ответственный = ЭлектронныеДокументыПереопределяемый.ПолучитьОтветственногоПоЭД(
			СтруктураОбмена.СтруктураЭД.Контрагент, СтруктураОбмена.СтруктураЭД.СоглашениеЭД);
		СтруктураОбмена.СтруктураЭД.Вставить("Ответственный", Ответственный);
		
		СтруктураОбмена.СтруктураЭД.Вставить("НаименованиеФайла", Файл.ИмяБезРасширения);
		
		НовыйЭлектронныйДокумент = СоздатьЭлектронныйДокумент(СтруктураОбмена.СтруктураЭД);
		
		ДобавленныйФайл = ПрисоединенныеФайлы.ДобавитьФайл(
			НовыйЭлектронныйДокумент,
			Файл.ИмяБезРасширения,
			СтрЗаменить(Файл.Расширение, ".", ""),
			ВремяСозданияЭД,
			ВремяСозданияЭД,
			АдресФайла,
			Неопределено,
			,
			Справочники.ЭДПрисоединенныеФайлы.ПолучитьСсылку(УникальныйИдентификаторЭД));
													
		СтруктураОбмена.СтруктураЭД.Вставить("НаименованиеФайла", Файл.ИмяБезРасширения);
		СтруктураОбмена.СтруктураЭД.Вставить("ВладелецЭД", НовыйЭлектронныйДокумент);
		
		Если (СтруктураОбмена.СтруктураЭД.ВидЭД = Перечисления.ВидыЭД.ПлатежноеПоручение
			  ИЛИ СтруктураОбмена.СтруктураЭД.ВидЭД = Перечисления.ВидыЭД.ЗапросВыписки
			  ИЛИ СтруктураОбмена.СтруктураЭД.ВидЭД = Перечисления.ВидыЭД.ЗапросНочнойВыписки)
			И СтруктураОбмена.СтруктураЭД.ПрограммаБанка = Перечисления.ПрограммыБанка.СбербанкОнлайн Тогда
			
			Дайджест = ЭлектронныеДокументыСлужебныйВызовСервера.Дайджест(ПолноеИмяФайла,
			                                                              СтруктураОбмена.СтруктураЭД.СоглашениеЭД);
			АдресХранилища = ПоместитьВоВременноеХранилище(Base64Значение(Дайджест));
			ДопФайл = ПрисоединенныеФайлы.ДобавитьФайл(НовыйЭлектронныйДокумент,
				"СхемаДанных",
				,
				,
				,
				АдресХранилища,
				,
				,
				Справочники.ЭДПрисоединенныеФайлы.ПолучитьСсылку());
			ПараметрыФайла = Новый Структура;
			ПараметрыФайла.Вставить("ВидЭД",                       Перечисления.ВидыЭД.ДопДанные);
			ПараметрыФайла.Вставить("ЭлектронныйДокументВладелец", ДобавленныйФайл);
			ПараметрыФайла.Вставить("НаименованиеФайла",           "СхемаДанных");
			ПараметрыФайла.Вставить("СтатусЭД",                    Перечисления.СтатусыЭД.Сформирован);
			ИзменитьПоСсылкеПрисоединенныйФайл(ДопФайл, ПараметрыФайла, Ложь);
		КонецЕсли;
			
		ФлагПродолжить = Ложь;
		
		Если НЕ ЗначениеЗаполнено(ДобавленныйФайл) Тогда
			ФлагПродолжить = Истина;
		ИначеЕсли СтруктураОбмена.Свойство("ПолноеИмяДопФайла") Тогда
			ДопФайлСоздан = СоздатьПрисоединенныйДопФайл(СтруктураОбмена, ДобавленныйФайл);
			Если НЕ ДопФайлСоздан Тогда
				ФлагПродолжить = Истина;
			КонецЕсли;
		КонецЕсли;
		
		УдалитьФайлы(Файл.Путь);
		Если ФлагПродолжить Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтруктураОбмена.Свойство("МассивФайлов") И СтруктураОбмена.МассивФайлов.Количество() > 0 Тогда
			АдресАрхива = АрхивДополнительныхФайлов(СтруктураОбмена.МассивФайлов);
			Если Не АдресАрхива = Неопределено Тогда
				ДопФайл = ПрисоединенныеФайлы.ДобавитьФайл(
								НовыйЭлектронныйДокумент,
								Нстр("ru = 'Дополнительные файлы'"),
								"zip",
								ВремяСозданияЭД,
								ВремяСозданияЭД,
								АдресАрхива,
								Неопределено,
								,
								Справочники.ЭДПрисоединенныеФайлы.ПолучитьСсылку());
				СтруктураПараметров = Новый Структура;
				СтруктураПараметров.Вставить("ЭлектронныйДокументВладелец", ДобавленныйФайл);
				СтруктураПараметров.Вставить("ВидЭД", Перечисления.ВидыЭД.ДопДанные);
				СтруктураПараметров.Вставить("НаправлениеЭД", Перечисления.НаправленияЭД.Исходящий);
				СтруктураПараметров.Вставить("СтатусЭД", Перечисления.СтатусыЭД.Сформирован);
				СтруктураПараметров.Вставить("Организация", СтруктураОбмена.СтруктураЭД.Организация);
				СтруктураПараметров.Вставить("Контрагент", СтруктураОбмена.СтруктураЭД.Контрагент);
				СтруктураПараметров.Вставить("СоглашениеЭД", СтруктураОбмена.СтруктураЭД.СоглашениеЭД);
				СтруктураПараметров.Вставить("ВладелецЭД", СтруктураОбмена.СтруктураЭД.ВладелецЭД);
				ИзменитьПоСсылкеПрисоединенныйФайл(ДопФайл, СтруктураПараметров, Ложь);
			КонецЕсли;
		КонецЕсли;
		
		СтруктураОбмена.СтруктураЭД.Вставить("УникальныйИД", Строка(ДобавленныйФайл.УникальныйИдентификатор()));
				
		Если Не СтруктураОбмена.СтруктураЭД.Свойство("ТипЭлементаВерсииЭД") Тогда
			Если СтруктураОбмена.СтруктураЭД.ВидЭД = Перечисления.ВидыЭД.СчетФактура
				ИЛИ СтруктураОбмена.СтруктураЭД.ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура Тогда
				ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ЭСФ;
			Иначе
				ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПервичныйЭД;
			КонецЕсли;
			
			СтруктураОбмена.СтруктураЭД.Вставить("ТипЭлементаВерсииЭД", ТипЭлементаВерсииЭД);
		КонецЕсли;
		
		ДатаФормированияЭДОтправителем = "";
		Если НЕ СтруктураОбмена.СтруктураЭД.Свойство("ДатаФормированияЭДОтправителем", ДатаФормированияЭДОтправителем) Тогда
			ДатаФормированияЭДОтправителем = ВремяСозданияЭД;
		КонецЕсли;
		СтруктураОбмена.СтруктураЭД.Вставить("ДатаФормированияЭДОтправителем", ДатаФормированияЭДОтправителем);
		СтатусЭД = Неопределено;
		Если НЕ (СтруктураОбмена.СтруктураЭД.Свойство("СтатусЭД", СтатусЭД) И ЗначениеЗаполнено(СтатусЭД)) Тогда
			СтруктураОбмена.СтруктураЭД.Вставить("СтатусЭД", Перечисления.СтатусыЭД.Сформирован);
		КонецЕсли;
		
		Если СтруктураОбмена.Свойство("СчетФактураБезФормированияЭД")
			И ЗначениеЗаполнено(СтруктураОбмена.СчетФактураБезФормированияЭД) Тогда
			
			Если ДопПараметры = "" Тогда
				ДопПараметры = Новый Структура;
			КонецЕсли;
			
			Если ДопПараметры.Свойство("МассивОбработанныхСФ") Тогда
				ДопПараметры.МассивОбработанныхСФ.Добавить(СтруктураОбмена.СчетФактураБезФормированияЭД);
			Иначе
				МассивОбработанныхСФ = Новый Массив;
				МассивОбработанныхСФ.Добавить(СтруктураОбмена.СчетФактураБезФормированияЭД);
				ДопПараметры.Вставить("МассивОбработанныхСФ", МассивОбработанныхСФ);
			КонецЕсли;
			
		КонецЕсли;
		
		ИзменитьПоСсылкеПрисоединенныйФайл(ДобавленныйФайл, СтруктураОбмена.СтруктураЭД);
		Для каждого Строка Из СтруктураОбмена.СтруктураЭД.ДокументыОснования Цикл
			УстановитьСсылкуДляВладельцаВРегистреСостояний(Строка, НовыйЭлектронныйДокумент);
		КонецЦикла;
		МассивСформированныхФайлов.Добавить(НовыйЭлектронныйДокумент);
		
	КонецЦикла;
	
	Возврат МассивСформированныхФайлов;
	
КонецФункции

// Только для внутреннего использования
Функция СформироватьХМЛФайлыДокументов(МассивОбъектовДляВыгрузки, ПараметрыОбмена, ДопПараметры = "") Экспорт
	
	МассивСтруктурВозврата = Новый Массив;
	СтруктураВидовЭД = Новый Соответствие;
	
	Для Каждого ТекЭлемент Из МассивОбъектовДляВыгрузки Цикл
		ВидЭД = "";
		Если НЕ ЗначениеЗаполнено(ДопПараметры) ИЛИ НЕ ДопПараметры.Свойство("ВидЭД", ВидЭД) Тогда
			ПараметрыЭД = ПараметрыОбмена.Получить(ТекЭлемент.Ссылка);
			ПараметрыЭД.Свойство("ВидЭД", ВидЭД);
		КонецЕсли;
	
		МассивОбъектовПоВидуЭД = СтруктураВидовЭД.Получить(ВидЭД);
		Если МассивОбъектовПоВидуЭД = Неопределено Тогда
			МассивОбъектовПоВидуЭД = Новый Массив;
		КонецЕсли;
		МассивОбъектовПоВидуЭД.Добавить(ТекЭлемент);
		СтруктураВидовЭД.Вставить(ВидЭД, МассивОбъектовПоВидуЭД);
	КонецЦикла;
	
	Для Каждого ТекЭлемент Из СтруктураВидовЭД Цикл
		СформироватьХМЛФайл(ТекЭлемент, МассивСтруктурВозврата, ПараметрыОбмена, ДопПараметры);
	КонецЦикла;
	
	Возврат МассивСтруктурВозврата;
	
КонецФункции

// Функция формирует прокси по настройкам прокси (передаваемому параметру)
//
// Параметры:
// 
// НастройкаПроксиСервера - Соответствие:
//		ИспользоватьПрокси - использовать ли прокси-сервер
//		НеИспользоватьПроксиДляЛокальныхАдресов - использовать ли прокси-сервер для локальных адресов
//		ИспользоватьСистемныеНастройки - использовать ли системные настройки прокси-сервера
//		Сервер       - адрес прокси-сервера
//		Порт         - порт прокси-сервера
//		Пользователь - имя пользователя для авторизации на прокси-сервере
//		Пароль       - пароль пользователя
// Протокол - строка - протокол для которого устанавливаются параметры прокси сервера, например "http", "https", "ftp"
// 
Функция СформироватьПрокси(Протокол) Экспорт
	
	НастройкаПроксиСервера = ПолучениеФайловИзИнтернета.НастройкиПроксиНаСервере();
	Если НастройкаПроксиСервера <> Неопределено Тогда
		ИспользоватьПрокси = НастройкаПроксиСервера.Получить("ИспользоватьПрокси");
		ИспользоватьСистемныеНастройки = НастройкаПроксиСервера.Получить("ИспользоватьСистемныеНастройки");
		Если ИспользоватьПрокси Тогда
			Если ИспользоватьСистемныеНастройки Тогда
				// Системные настройки прокси-сервера.
				Прокси = Новый ИнтернетПрокси(Истина);
			Иначе
				// Ручные настройки прокси-сервера.
				Прокси = Новый ИнтернетПрокси;
				Прокси.Установить(Протокол, НастройкаПроксиСервера["Сервер"], НастройкаПроксиСервера["Порт"]);
				Прокси.НеИспользоватьПроксиДляЛокальныхАдресов = НастройкаПроксиСервера["НеИспользоватьПроксиДляЛокальныхАдресов"];
				Прокси.Пользователь = НастройкаПроксиСервера["Пользователь"];
				Прокси.Пароль       = НастройкаПроксиСервера["Пароль"];
			КонецЕсли;
		Иначе
			// Не использовать прокси-сервер.
			Прокси = Новый ИнтернетПрокси(Ложь);
		КонецЕсли;
	Иначе
		Прокси = Неопределено;
	КонецЕсли;
	
	Возврат Прокси;
	
КонецФункции

// Только для внутреннего использования.
Процедура ПроверитьДлинуНомераСчета(НомерСчета, ШаблонСообщения, ЕстьОшибкиЗаполнения, ТекстОшибки) Экспорт
	
	ПространствоИменСхемы = ЭлектронныеДокументыПовтИсп.ПространствоИменCML();
	Длина = Число(ЭлектронныеДокументыВнутренний.ПолучитьСвойствоПоляXDTOСхемы(ПространствоИменСхемы, "РасчетныйСчет", "НомерСчета", ВидФасетаXDTO.Длина));

	Если Длина <> СтрДлина(СокрЛП(НомерСчета)) Тогда
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Длина);
		ТекстОшибки = ?(ЗначениеЗаполнено(ТекстОшибки), ТекстОшибки + Символы.ПС + ТекстСообщения, ТекстСообщения);
		ЕстьОшибкиЗаполнения = Истина;
			
	КонецЕсли;
	
КонецПроцедуры

// Меняет состояние ЭД документа ИБ
// Параметры:
// ИзменяемыеДокументы - массив - ссылка на документ ИБ
// НовоеСостояние - ПеречислениеСсылка.СостоянияВерсийЭД - значение нового состояния
// ИзменяемыеСостояния - Массив- ПеречислениеСсылка.СостоянияВерсийЭД - Массив состояний, менять которые не нужно
//
Процедура ИзменитьСостояниеЭД(ИзменяемыеДокументы, НовоеСостояние, ИзменяемыеСостояния = Неопределено) Экспорт
	
	Если Не ТипЗнч(ИзменяемыеДокументы) = Тип("Массив") Тогда
		
		ДокументыИБ = Новый Массив;
		ДокументыИБ.Добавить(ИзменяемыеДокументы);
	Иначе
		ДокументыИБ = ИзменяемыеДокументы;
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		Для Каждого ДокументИБ Из ДокументыИБ Цикл
			Если Не ИзменяемыеСостояния = Неопределено Тогда
				Если ИзменяемыеСостояния.Найти(ДокументИБ.СостояниеЭДО) = Неопределено Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			ДокументОбъект = ДокументИБ.ПолучитьОбъект();
			ДокументОбъект.СостояниеЭДО = НовоеСостояние;
			ДокументОбъект.ДатаИзмененияСостоянияЭДО = ТекущаяДатаСеанса();
			ДокументОбъект.Записать();
			СводнаяИнформацияПоСтатусу = Новый Структура;
			СводнаяИнформацияПоСтатусу.Вставить("СНашейСтороны", Перечисления.СводныеСостоянияЭД.ВсеВыполнено);
			СводнаяИнформацияПоСтатусу.Вставить("СоСтороныДругогоУчастника", Перечисления.СводныеСостоянияЭД.ВсеВыполнено);
			ЭлектронныеДокументыСлужебныйВызовСервера.ОбновитьВерсиюЭДВРегистре(ДокументИБ, НовоеСостояние, СводнаяИнформацияПоСтатусу);
		КонецЦикла;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Функция - Значение статуса
//
// Параметры:
//  ЗначениеСтатусаВФайле	 - Строка - значение статуса в xml файле(true, false)
// 
// Возвращаемое значение:
// Булево - Значение статуса.
//
Функция ЗначениеСтатуса(ЗначениеСтатусаВФайле) Экспорт
	
	Если ВРег(ЗначениеСтатусаВФайле) = ВРег("True") Тогда
		ЗначениеСтатуса = Истина;
	Иначе
		ЗначениеСтатуса = Ложь;
	КонецЕсли;
	
	Возврат ЗначениеСтатуса;
	
КонецФункции

// Добавляет в форму элементы условного оформления, необходимые для оформления таблицы исходящих документов.
//
// Параметры:
//  Форма							 - УправляемаяФорма - форма настроек. Должна содержать таблицу параметров обработки исходящих
//                                                        документов. В таблице обязательно должны присутствовать колонки,
//                                                        содержащая вид электронного документа и версию формата.
//  ИмяЭлементаВерсияФормата		 - Строка - имя элемента формы, отображающего версию формата.
//  ПолноеИмяПоляВерсияФормата		 - Строка - имя поля, содержащего версию формата.
//  ПолноеИмяПоляИсходящийДокумент	 - Строка - имя поля, содержащего вид электронного документа.
//
Процедура УстановитьУсловноеОформлениеФорматов(Форма, ИмяЭлементаВерсияФормата = "ИсходящиеДокументыВерсияФормата",
	ПолноеИмяПоляВерсияФормата = "Объект.ИсходящиеДокументы.ВерсияФормата", 
	ПолноеИмяПоляИсходящийДокумент = "Объект.ИсходящиеДокументы.ИсходящийДокумент") Экспорт
	
	ТаблицаФорматов = ЭлектронныеДокументыСлужебный.ФорматыЭлектронныхДокументов();
	
	Для Каждого СтрокаФормата Из ТаблицаФорматов Цикл
		Элемент = Форма.УсловноеОформление.Элементы.Добавить();
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяЭлементаВерсияФормата);
		
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПолноеИмяПоляВерсияФормата);
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = СтрокаФормата.ИдентификаторФормата;
		
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПолноеИмяПоляИсходящийДокумент);
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = СтрокаФормата.ВидЭлектронногоДокумента;
		
		Элемент.Оформление.УстановитьЗначениеПараметра("Текст", СтрокаФормата.ПредставлениеФормата);
		Если Не СтрокаФормата.Действует Тогда
			Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Красный);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Регламентные задания

// Только для внутреннего использования
Процедура СформироватьЭДПрисоединенныйФайлПакета(Конверт, МассивСтруктурДанных = Неопределено) Экспорт
	
	ПодготовленныеДокументы = Конверт.ЭлектронныеДокументы.ВыгрузитьКолонку("ЭлектронныйДокумент");
	ЭтоПроизвольныйДокумент = ЭтоПакетПроизвольногоЭД(ПодготовленныеДокументы);
	
	СоответствиеФайлЭД      = Новый Соответствие;
	
	АдресКаталога = РабочийКаталог("send", Конверт.Ссылка.УникальныйИдентификатор());
	УдалитьФайлы(АдресКаталога, "*");
	Для Каждого СтрокаЭД Из Конверт.ЭлектронныеДокументы Цикл
		ДокументНаОтправку = СтрокаЭД.ЭлектронныйДокумент;
		
		ДанныеФайла = ПолучитьДанныеФайла(ДокументНаОтправку);
		
		// Шифрование ЭД
		Если Конверт.ДанныеЗашифрованы Тогда
			Если МассивСтруктурДанных <> Неопределено Тогда // шифрование произведено на клиенте
				Для Каждого ЭлементДанных ИЗ МассивСтруктурДанных Цикл
					Если ЭлементДанных.ЭлектронныйДокумент = СтрокаЭД.ЭлектронныйДокумент Тогда
						ДанныеФайла.СсылкаНаДвоичныеДанныеФайла = ЭлементДанных.ДанныеФайла.СсылкаНаДвоичныеДанныеФайла;
					Конецесли;
				КонецЦикла;
			Иначе
				ПараметрыШифрования = ПолучитьМассивАдресовСертификатовШифрования(ДокументНаОтправку);
				Если ПараметрыШифрования <> Неопределено Тогда
					Попытка
						НастройкиКриптографии  = ЭлектроннаяЦифроваяПодпись.ПолучитьПерсональныеНастройкиРаботыСЭЦПСервер();
						ПровайдерЭЦП           = НастройкиКриптографии.ПровайдерЭЦП;
						ПутьМодуляКриптографии = НастройкиКриптографии.ПутьМодуляКриптографии;
						ТипПровайдераЭЦП       = НастройкиКриптографии.ТипПровайдераЭЦП;
						
						МенеджерКриптографии = Новый МенеджерКриптографии(ПровайдерЭЦП, ПутьМодуляКриптографии, ТипПровайдераЭЦП);
						МенеджерКриптографии.АлгоритмПодписи     = НастройкиКриптографии.АлгоритмПодписи;
						МенеджерКриптографии.АлгоритмХеширования = НастройкиКриптографии.АлгоритмХеширования;
						МенеджерКриптографии.АлгоритмШифрования  = НастройкиКриптографии.АлгоритмШифрования;
					Исключение
						ТекстСообщения = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьСообщениеОбОшибке("110");
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
						
						УдалитьФайлы(АдресКаталога);
						Возврат ;
					КонецПопытки;
					
					МассивСертификатов = Новый Массив;
					Для каждого СтрокаСертификата Из ПараметрыШифрования Цикл
						
						ДвоичныеДанныеСертификата = ПолучитьИзВременногоХранилища(СтрокаСертификата);
						Сертификат = Новый СертификатКриптографии(ДвоичныеДанныеСертификата);
						МассивСертификатов.Добавить(Сертификат);
					КонецЦикла;
					
					ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
					ЗашифрованныеДанные = МенеджерКриптографии.Зашифровать(ДвоичныеДанныеФайла, МассивСертификатов);
					ДанныеФайла.СсылкаНаДвоичныеДанныеФайла = ПоместитьВоВременноеХранилище(ЗашифрованныеДанные);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ЭтоОтправкаПодтверждения(ДокументНаОтправку) Тогда
			СохранитьВместеСПоследнейЭЦП(ДокументНаОтправку, ДанныеФайла, АдресКаталога, СоответствиеФайлЭД);
		Иначе
			СохранитьВместеСЭЦП(ДокументНаОтправку, ДанныеФайла, АдресКаталога, СоответствиеФайлЭД);
		КонецЕсли;
		
	КонецЦикла;
	
	Файлы = НайтиФайлы(АдресКаталога, "*");
	Если Файлы.Количество() = 0 Тогда
		УдалитьФайлы(АдресКаталога);
		Возврат ;
	КонецЕсли;
	
	МассивИменФайлов = Новый Массив;
	Для Каждого НайденныйФайл Из Файлы Цикл
		МассивИменФайлов.Добавить(НайденныйФайл.Имя);
	КонецЦикла;
	
	ЗипКонтейнер = Новый ЗаписьZipФайла();
	ИмяФайла = "EDI_" + Конверт.УникальныйИдентификатор();
	ИмяФайла = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(ИмяФайла);
	ЗипКонтейнер.Открыть(АдресКаталога + ИмяФайла + ".zip");
	
	Для Каждого Файл Из Файлы Цикл
		ЗипКонтейнер.Добавить(Файл.ПолноеИмя);
	КонецЦикла;
	
	СоответствиеВложений    = ПолучитьСоответствиеФайловИПодписей(МассивИменФайлов);
	ТекстОписанияУчастников = СоздатьТекстОписиЭД(
									Конверт,
									СоответствиеВложений,
									СоответствиеФайлЭД,
									ЭтоПроизвольныйДокумент);
	
	КопироватьФайл(ТекстОписанияУчастников, АдресКаталога + "packageDescription.xml");
	УдалитьФайлы(ТекстОписанияУчастников);
	ЗипКонтейнер.Добавить(АдресКаталога + "packageDescription.xml");
	
	ЗипКонтейнер.Записать();
	
	ПоместитьПакетЭДВКонверт(Конверт, АдресКаталога + ИмяФайла + ".zip");
	УдалитьФайлы(АдресКаталога);
	
КонецПроцедуры

// Только для внутреннего использования
Функция РаспаковатьПакетЭДНаСервере(ПакетЭД, СтруктураШифрования, ДанныеРаспаковки)
	
	КоличествоОбработанныхДокументов = 0;
	
	Попытка
		
		Если ДанныеРаспаковки = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		МенеджерКриптографииПолучен = Ложь;
		ВыполнятьКриптооперацииНаСервере = Ложь;
		ВыполнятьАвторизациюНаСервере = Ложь;
		ЭлектронныеДокументыСлужебныйВызовСервера.ИнициализироватьПеременные(ВыполнятьКриптооперацииНаСервере, ВыполнятьАвторизациюНаСервере);
		Если ВыполнятьКриптооперацииНаСервере ИЛИ ВыполнятьАвторизациюНаСервере Тогда
			Попытка
				МенеджерКриптографии = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьМенеджерКриптографии();
				МенеджерКриптографииПолучен = Истина;
			Исключение
				МенеджерКриптографии = Неопределено;
			КонецПопытки;
		КонецЕсли;
		
		// Перед формированием ЭД необходимо получить все данные по подписям и сертификатам.
		// При чтении данных файлов пакета ЭД на сервере (метод ВернутьМассивДвоичныхДанныхПакета(...)),
		// выполняется получение всех доступных данных по подписям и сертификатам, если
		// данные получить не удалось, то прерываем обработку текущего пакета.
		Для Каждого ЭлементСоответствия Из ДанныеРаспаковки.СоответствиеФайлПараметры Цикл
			МассивКУдалениюИзСоответствия = Новый Массив;
			СоответствиеФайлПараметры = ЭлементСоответствия.Значение;
			Если СоответствиеФайлПараметры.ДанныеСертификатовПолучены Тогда // данные были получены на сервере.
				Продолжить;
			Иначе
				МассивДанныхПодписей = "";
				Если СоответствиеФайлПараметры.ДокументСодержитПодписи
					И СоответствиеФайлПараметры.Свойство("МассивДанныхПодписей", МассивДанныхПодписей) Тогда
					
					Если НЕ ВыполнятьКриптооперацииНаСервере Тогда
						МассивКУдалениюИзСоответствия.Добавить(ЭлементСоответствия.Ключ);
						ТекстОшибки = НСтр("ru = 'Пакет электронных документов %1 содержит электронные подписи,
							|при работе с криптосредством на сервере возникли ошибки.
							|Распаковку пакета необходимо выполнить интерактивно.'");
						ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", ПакетЭД);
						ТекстОшибки = СтрЗаменить(ТекстОшибки, "%1", ПакетЭД);
						ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'распаковка пакета ЭД'"), ТекстОшибки);
						Продолжить;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Для Каждого Элемент Из МассивКУдалениюИзСоответствия Цикл
				СоответствиеФайлПараметры.Удалить(Элемент);
			КонецЦикла;
			
			Если СоответствиеФайлПараметры.Количество() = 0 Тогда
				Возврат Неопределено;
			КонецЕсли;
		КонецЦикла;
		
		ФлагОшибки = Ложь;
		НачатьТранзакцию();
		
		ЕстьКриптосредствоНаКлиенте = Ложь;
		ТипДанных = Неопределено;
		ЕстьТипДанных = ДанныеРаспаковки.Свойство("ТипДанных", ТипДанных);
		Если ЕстьТипДанных И ТипДанных <> "ЭД" И ТипДанных <> "Подпись" Тогда
			СтруктураВозврата       = Новый Структура;
			СоответствиеЭДИПодписей = Новый Соответствие;
			КоличествоОбработанныхДокументов = ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьДвоичныеДанныеПакетаОператораЭДО(
				ПакетЭД,
				ДанныеРаспаковки,
				ЕстьКриптосредствоНаКлиенте,
				СоответствиеЭДИПодписей,
				СтруктураВозврата);
			
			МассивДобавленныхФайловДляИзвещений = СтруктураВозврата.МассивДобавленныхФайловДляИзвещений;
			
			// Получили данные от оператора ЭДО
			Если МассивДобавленныхФайловДляИзвещений.Количество() > 0 Тогда
				ВидЭД = ПредопределенноеЗначение("Перечисление.ВидыЭД.ИзвещениеОПолучении");
				ЭлектронныеДокументыКлиентСервер.СформироватьПодписатьИОтправитьСлужебныеЭД(МассивДобавленныхФайловДляИзвещений, ВидЭД);
			КонецЕсли;
			
		Иначе
			
			МассивДвоичныхДанных = ДанныеРаспаковки.СтруктураДвоичныхДанных;
			МассивДвоичныхДанныхИзвещений = ДанныеРаспаковки.СтруктураДвоичныхДанныхИзвещений;
			
			Если МассивДвоичныхДанных.Количество() = 0 Тогда
				ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьПодтвержденияДокументовНаСервере(
					ДанныеРаспаковки.СоответствиеФайлПараметры,
					ПакетЭД,
					ДанныеРаспаковки.ФайлыПакета);
			КонецЕсли;
			
			Если МассивДвоичныхДанныхИзвещений.Количество() > 0 Тогда
				Для Каждого СтруктураДанных Из МассивДвоичныхДанныхИзвещений Цикл
					
					// Обработать пришедшие извещения от оператора.
					// Может быть в случае, когда получаем извещение от покупателя о приеме ЭСФ
					СтруктураДанныхФайла = ДанныеРаспаковки.СоответствиеФайлПараметры[СтруктураДанных.ИмяФайла];
					Если СтруктураДанныхФайла <> Неопределено Тогда
						МассивДанныхПодписей = СтруктураДанныхФайла.МассивДанныхПодписей;
						ФлагОшибки = Ложь;
						Для Каждого ДанныеПодписи Из МассивДанныхПодписей Цикл
							Если ДанныеПодписи.ДвоичныеДанные <> Неопределено Тогда
								Попытка
									ПроверитьПодпись(МенеджерКриптографии, СтруктураДанных.ДвоичныеДанные, ДанныеПодписи.ДвоичныеДанные);
								Исключение
									ТекстСообщения = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьСообщениеОбОшибке("114");
									ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(
									НСтр("ru = 'проверка подписи'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), ТекстСообщения);
									
									ФлагОшибки = Истина;
									Прервать;
									
								КонецПопытки;
							КонецЕсли;
						КонецЦикла;
						
						Если ФлагОшибки Тогда
							Прервать;
						КонецЕсли;
					КонецЕсли;
					
					МассивДобавленныхФайлов = ЭлектронныеДокументыСлужебныйВызовСервера.ДобавитьДанныеПоПакетуЭД(ПакетЭД,
						СтруктураДанных, ДанныеРаспаковки.СоответствиеФайлПараметры, ДанныеРаспаковки.ФайлыПакета);
					
				КонецЦикла;
			КонецЕсли;
			
			Если НЕ ФлагОшибки Тогда
				
				ЕстьОшибкаРаспаковки = Ложь;
				
				Для Каждого СтруктураДанных Из МассивДвоичныхДанных Цикл
					Если СтруктураШифрования <> Неопределено Тогда
						Если СтруктураШифрования.Свойство("ПарольПользователя") Тогда
							Если ЭлектронныеДокументыСлужебныйВызовСервера.ВыполнятьКриптооперацииНаСервере() Тогда
								РасшифрованныеДвоичныеДанные = ЭлектронныеДокументыСлужебныйВызовСервера.РасшифрованныеДанные(
								СтруктураДанных.ДвоичныеДанные, СтруктураШифрования.ПарольПользователя);
								Если РасшифрованныеДвоичныеДанные = Неопределено Тогда
									ФлагОшибки = Истина;
									Прервать;
								КонецЕсли;
							Иначе
								// Если контекст выполнения криптоопераций стоит "на клиенте", то не расшифровываем.
								ФлагОшибки = Истина;
								Прервать;
							КонецЕсли;
							СтруктураДанных.ДвоичныеДанные = РасшифрованныеДвоичныеДанные;
						Иначе
							ШаблонСообщения = НСтр("ru = '%1. Не указан пароль к сертификату расшифровки: %2.'");
							ПодробныйТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
								ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьСообщениеОбОшибке("113"), СтруктураШифрования.Сертификат);
							ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(
								НСтр("ru = 'расшифровка пакета ЭД'"), ПодробныйТекстСообщения);
							
							ФлагОшибки = Истина;
							Прервать;
							
						КонецЕсли;
					КонецЕсли;
					
					МассивДобавленныхФайлов = ЭлектронныеДокументыСлужебныйВызовСервера.ДобавитьДанныеПоПакетуЭД(
																							ПакетЭД,
																							СтруктураДанных,
																							ДанныеРаспаковки.СоответствиеФайлПараметры,
																							ДанныеРаспаковки.ФайлыПакета,
																							ЕстьОшибкаРаспаковки,
																							ЕстьКриптосредствоНаКлиенте);
					
					Если Не МассивДобавленныхФайлов = Неопределено И МассивДобавленныхФайлов.Количество() > 0
						И МенеджерКриптографииПолучен
						И Не ЭлектронныеДокументыСлужебныйВызовСервера.ВыполнятьКриптооперацииНаСервере() Тогда
						
						Для Каждого ЭД ИЗ МассивДобавленныхФайлов Цикл
							ЭлектронныеДокументыСлужебныйВызовСервера.ОпределитьСтатусыПодписей(ЭД);
						КонецЦикла;
					КонецЕсли;
					Если Не ЕстьОшибкаРаспаковки Тогда
						СоответствиеФайлПараметры = ДанныеРаспаковки.СоответствиеФайлПараметры[СтруктураДанных.ИмяФайла];
						ТребуетсяИзвещение = Истина;
						ДополнительныеДанные = Новый Структура;
						Если СоответствиеФайлПараметры.Свойство("ДопДанные", ДополнительныеДанные)
							И ТипЗнч(ДополнительныеДанные) = Тип("Структура") Тогда
							ДополнительныеПараметры = Неопределено;
							Если ДополнительныеДанные.Свойство("ДопПараметры", ДополнительныеПараметры) 
								И ТипЗнч(ДополнительныеПараметры) = Тип("Структура") Тогда
								
								Если ДополнительныеПараметры.Свойство("НеТребуетсяИзвещение") Тогда
									ТребуетсяИзвещение = Ложь;
								КонецЕсли;
								
							КонецЕсли;
						КонецЕсли;
						Если ЗначениеЗаполнено(ТипДанных) И ТребуетсяИзвещение Тогда
							ВидЭД = ПредопределенноеЗначение("Перечисление.ВидыЭД.ИзвещениеОПолучении");
							ЭлектронныеДокументыКлиентСервер.СформироватьПодписатьИОтправитьСлужебныеЭД(МассивДобавленныхФайлов, ВидЭД);
						КонецЕсли;
						
						Если ТипЗнч(МассивДобавленныхФайлов) = Тип("Массив") Тогда
							КоличествоОбработанныхДокументов = МассивДобавленныхФайлов.Количество();
						КонецЕсли;
						
					КонецЕсли;
				КонецЦикла;
				
				Если НЕ ЕстьОшибкаРаспаковки Тогда
					ЭлектронныеДокументыСлужебныйВызовСервера.УстановитьСтатусПакета(ПакетЭД,
					ПредопределенноеЗначение("Перечисление.СтатусыПакетовЭД.Распакован"));
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
		Если ФлагОшибки Тогда
			ОтменитьТранзакцию();
		Иначе
			ЗафиксироватьТранзакцию();
		КонецЕсли;
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ШаблонСообщения = НСтр("ru = 'Ошибка распаковки входящего пакета ЭД.
		|%1.'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(
			НСтр("ru = 'распаковка входящего пакета ЭД'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), ТекстСообщения);
	КонецПопытки;
	
	Возврат КоличествоОбработанныхДокументов;
	
КонецФункции

Функция ОпределитьПодготовленныеКОтправкеЭД()
	
	ЗапросПодготовленныхЭД = Новый Запрос;
	ЗапросПодготовленныхЭД.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПакетЭД.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ПакетЭД КАК ПакетЭД
	|ГДЕ
	|	ПакетЭД.ПометкаУдаления = ЛОЖЬ
	|	И ПакетЭД.СтатусПакета = &СтатусПакета
	|	И НЕ ПакетЭД.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезВебРесурсБанка)";
	ЗапросПодготовленныхЭД.УстановитьПараметр("СтатусПакета", Перечисления.СтатусыПакетовЭД.ПодготовленКОтправке);
	
	Результат = ЗапросПодготовленныхЭД.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Возврат Результат;
	
КонецФункции

Функция ЭтоПакетПроизвольногоЭД(МассивДокументов)
	
	ВладельцыФайлов  = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивДокументов, "ВладелецФайла");
	ВидыЭДВладельцев = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(ВладельцыФайлов,  "ВидЭД");
	
	Для Каждого Документ Из МассивДокументов Цикл
		
		ВладелецФайла  = ВладельцыФайлов[Документ];
		ВидЭДВладельца = ВидыЭДВладельцев[ВладелецФайла];
		
		Если ТипЗнч(ВладелецФайла) = Тип("ДокументСсылка.ЭлектронныйДокументИсходящий")
			И ВидЭДВладельца = Перечисления.ВидыЭД.ПроизвольныйЭД Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция НайтиИменаФайловПодписей(ИмяФайлаДанных, ИменаФайловПодписей)
	
	ИменаПодписей = Новый Массив;
	
	Файл = Новый Файл(ИмяФайлаДанных);
	ИмяБезРасширения = Файл.ИмяБезРасширения;
	
	Для Каждого ИмяФайлаПодписи Из ИменаФайловПодписей Цикл
		Если Найти(ИмяФайлаПодписи, ИмяБезРасширения) > 0 Тогда
			ИменаПодписей.Добавить(ИмяФайлаПодписи);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ИмяФайлаПодписи Из ИменаПодписей Цикл
		ИменаФайловПодписей.Удалить(ИменаФайловПодписей.Найти(ИмяФайлаПодписи));
	КонецЦикла;
	
	Возврат ИменаПодписей;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Работа с сертификатами ЭЦП

Процедура СохранитьПодписи(ФайлСсылка,
							ПолноеИмяФайла,

							МассивСтруктурПодписей,
							АдресКаталога,
							СоответствиеФайлЭД,
							БезИсходногоФайла = Ложь,
							ЭтоПроизвольныйЭД = Ложь)
	
	ОсновнойФайл = Новый Файл(ПолноеИмяФайла);
	Путь = ОсновнойФайл.Путь;
	МассивИмен = Новый Массив;
	
	ТипПлатформыСервера = ОбщегоНазначенияПовтИсп.ТипПлатформыСервера();
	
	Если НЕ БезИсходногоФайла Тогда
		МассивИмен.Добавить(ОсновнойФайл.Имя);
	КонецЕсли;
	
	Сч = 0;
	Для Каждого СтруктураПодписи Из МассивСтруктурПодписей Цикл
		ИмяФайлаПодписи = СтруктураПодписи.ИмяФайлаПодписи;
		
		Сч = Сч + 1;
		Если ПустаяСтрока(ИмяФайлаПодписи) Тогда
			Если ЗначениеЗаполнено(ЭтоПроизвольныйЭД) И ЭтоПроизвольныйЭД И Прав(ПолноеИмяФайла, 4) = ".zip" Тогда
				ИмяФайлаПодписи = Строка(ФайлСсылка)+"ЭЦП" + "-" + Строка(СтруктураПодписи.КомуВыданСертификат) + ".p7s";
			Иначе
				ИмяФайлаПодписи = Строка(ФайлСсылка) + "-" + Сч + ".p7s";
			КонецЕсли;
		КонецЕсли;
		
		ИмяФайлаПодписи = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(ИмяФайлаПодписи, "");
		
		ПолныйПутьПодписи = Путь;
		ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ПолныйПутьПодписи, ТипПлатформыСервера);
		ПолныйПутьПодписи = ПолныйПутьПодписи + ИмяФайлаПодписи;
		
		ФайлПоИмени = Новый Файл(ПолныйПутьПодписи);
		ФайлСуществует = ФайлПоИмени.Существует();
		
		Счетчик = 0;
		ИмяФайлаПодписиБезПостфикса = ФайлПоИмени.ИмяБезРасширения;
		Пока ФайлСуществует Цикл
			Счетчик = Счетчик + 1;
			
			ИмяФайлаПодписи = ИмяФайлаПодписиБезПостфикса + " (" + Строка(Счетчик) + ")" + ".p7s";
			ИмяФайлаПодписи = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(ИмяФайлаПодписи, "");
			
			ПолныйПутьПодписи = Путь;
			ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ПолныйПутьПодписи, ТипПлатформыСервера);
			ПолныйПутьПодписи = ПолныйПутьПодписи + ИмяФайлаПодписи;
			
			ФайлДляПроверки = Новый Файл(ПолныйПутьПодписи);
			ФайлСуществует = ФайлДляПроверки.Существует();
		КонецЦикла;
		
		Файл = Новый Файл(ПолныйПутьПодписи);
		МассивИмен.Добавить(Файл.Имя);
		
		Если ТипЗнч(СоответствиеФайлЭД) = Тип("Соответствие") Тогда
			СтруктураПараметровЭД = Новый Структура;
			СтруктураПараметровЭД.Вставить("НомерЭД", ФайлСсылка.НомерЭД);
			СтруктураПараметровЭД.Вставить("УникальныйИД", ФайлСсылка.УникальныйИД);
			
			СоответствиеФайлЭД.Вставить(Файл.Имя, СтруктураПараметровЭД);
		Иначе
			// СоответствиеФайлЭД - структура файлов ЭД.
			НоваяСтрока = СоответствиеФайлЭД.ГлавныйФайлПодписи.Добавить();
			НоваяСтрока.Имя = "";
			НоваяСтрока.Путь = Файл.Имя
		КонецЕсли;
		
		ПутьКФайлу = Файл.Путь;
		Если Прав(ПутьКФайлу,1) <> "\" Тогда
			ПутьКФайлу = ПутьКФайлу + "\";
		КонецЕсли;
		
		ДвоичныеДанныеПодписи = ПолучитьИзВременногоХранилища(СтруктураПодписи.АдресПодписи);
		ДвоичныеДанныеПодписи.Записать(ПолныйПутьПодписи);
		УдалитьИзВременногоХранилища(СтруктураПодписи.АдресПодписи);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьСоответствиеФайловИПодписей(ИменаФайлов)
	
	Результат = Новый Соответствие;
	
	ИменаФайловПодписей = Новый Массив;
	ИменаФайловДанных   = Новый Массив;
	
	Для Каждого ИмяФайла Из ИменаФайлов Цикл
		Если Прав(ИмяФайла, 3) = "p7s" Тогда
			ИменаФайловПодписей.Добавить(ИмяФайла);
		Иначе
			ИменаФайловДанных.Добавить(ИмяФайла);
		КонецЕсли;
	КонецЦикла;
	
	Для ИндексА = 1 По ИменаФайловДанных.Количество() Цикл
		ИндексМАКС = ИндексА;
		Для ИндексБ = ИндексА+1 По ИменаФайловДанных.Количество() Цикл
			Если СтрДлина(ИменаФайловДанных[ИндексМАКС - 1]) > СтрДлина(ИменаФайловДанных[ИндексБ - 1]) Тогда
				ИндексМАКС = ИндексБ;
			КонецЕсли;
		КонецЦикла;
		Своп = ИменаФайловДанных[ИндексА - 1];
		ИменаФайловДанных[ИндексА - 1] = ИменаФайловДанных[ИндексМАКС - 1];
		ИменаФайловДанных[ИндексМАКС - 1] = Своп;
	КонецЦикла;
	
	Для Каждого ИмяФайлаДанных Из ИменаФайловДанных Цикл
		Результат.Вставить(ИмяФайлаДанных, НайтиИменаФайловПодписей(ИмяФайлаДанных, ИменаФайловПодписей));
	КонецЦикла;
	
	Для Каждого ИмяФайлаПодписи Из ИменаФайловПодписей Цикл
		Результат.Вставить(ИмяФайлаПодписи, Новый Массив);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция СохранитьФайлКак(ДанныеФайла,
						ИмяКаталога,
						ПрисоединенныйФайл = Неопределено,
						ЭтоПроизвольныйЭД = Неопределено,
						СоответствиеФайлЭД = Неопределено)
	
	Файл = Новый Файл(ИмяКаталога);
	Если НЕ Файл.Существует() Тогда
		СоздатьКаталог(ИмяКаталога);
	КонецЕсли;
	
	РазмерВМб = ДанныеФайла.Размер / (1024 * 1024);
	
	ИмяПолучаемогоФайла = ДанныеФайла.ИмяФайла;
	ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
	ДвоичныеДанныеФайла.Записать(ИмяКаталога + ИмяПолучаемогоФайла);
	
	Если ЗначениеЗаполнено(ПрисоединенныйФайл) Тогда
		Если ТипЗнч(СоответствиеФайлЭД) = Тип("Соответствие") Тогда
			СтруктураПараметровЭД = Новый Структура;
			СтруктураПараметровЭД.Вставить("НомерЭД", ПрисоединенныйФайл.НомерЭД);
			СтруктураПараметровЭД.Вставить("УникальныйИД", ПрисоединенныйФайл.УникальныйИД);
			
			СоответствиеФайлЭД.Вставить(ДанныеФайла.ИмяФайла, СтруктураПараметровЭД);
		Иначе
			СоответствиеФайлЭД.Вставить("ГлавныйФайл", ДанныеФайла.ИмяФайла);
		КонецЕсли;
		
		ПутьКФайлу = Файл.Путь;
		Если Прав(ПутьКФайлу,1) <> "\" Тогда
			ПутьКФайлу = ПутьКФайлу + "\";
		КонецЕсли;
	КонецЕсли;
	
	Если ЭтоПроизвольныйЭД = Истина Тогда
		
		ИмяФайла      = ДанныеФайла.Наименование;
		ИмяКонтейнера = ИмяКаталога + ИмяФайла + ".zip";
		ИмяАрхива     = ИмяФайла + ".zip";
		
		Если ИмяФайла + ".zip" = ИмяПолучаемогоФайла Тогда
			ИмяКонтейнера = ИмяКаталога+ИмяФайла+"ЭЦП.zip";
			ИмяАрхива     = ИмяФайла + "ЭЦП.zip";
		КонецЕсли;
		
		ЗипКонтейнер = Новый ЗаписьZipФайла(ИмяКонтейнера);
		ЗипКонтейнер.Добавить(ИмяКаталога + ИмяПолучаемогоФайла );
		
		ЗипКонтейнер.Записать();
		Если ИмяФайла + ".zip" = ИмяПолучаемогоФайла Тогда
			УдалитьФайлы(ИмяКаталога + ИмяПолучаемогоФайла);
		КонецЕсли;
		Если ЗначениеЗаполнено(ПрисоединенныйФайл) Тогда
			СтруктураПараметровЭД = Новый Структура;
			СтруктураПараметровЭД.Вставить("НомерЭД", ПрисоединенныйФайл.НомерЭД);
			СтруктураПараметровЭД.Вставить("УникальныйИД", ПрисоединенныйФайл.УникальныйИД);
			
			СоответствиеФайлЭД.Вставить(ИмяАрхива, СтруктураПараметровЭД);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ИмяКаталога + ИмяПолучаемогоФайла;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Добавление объектов в присоединенные файлы

Процедура СформироватьХМЛФайл(ТекЭлемент, МассивСтруктурВозврата, ПараметрыОбмена, ДопПараметры)
	
	МассивОбъектовДляВыгрузки = ТекЭлемент.Значение;
	
	ВерсияСхемыCML2 = ЭлектронныеДокументыПовтИсп.ВерсияСхемыCML2();
	ВерсияСхемыCML402 = ЭлектронныеДокументыПовтИсп.ВерсияСхемыCML402();
	ВерсияФНС_2016 = ВерсияСхемыФНС_2016();
	ВерсияФНС_2015 = ВерсияСхемыФНС_2015();
	ВерсияФНС_СФ = ВерсияСхемыФНС_СФ();
	
	Для Каждого ОбъектДляВыгрузки Из МассивОбъектовДляВыгрузки Цикл
		
		Если ТекЭлемент.Ключ = Перечисления.ВидыЭД.КаталогТоваров И НЕ ДопПараметры.Свойство("БыстрыйОбмен") Тогда
			НастройкиОбменаЭД = ОпределитьНастройкиОбменаЭДПоИсточнику(ОбъектДляВыгрузки);
		Иначе
			НастройкиОбменаЭД = ПараметрыОбмена.Получить(ОбъектДляВыгрузки);
		КонецЕсли;
		Если Не ЗначениеЗаполнено(НастройкиОбменаЭД) Тогда
			Продолжить
		КонецЕсли;
		
		Если НастройкиОбменаЭД.ПрофильНастроекЭДО.СпособОбменаЭД <> Перечисления.СпособыОбменаЭД.БыстрыйОбмен Тогда
			ЭлектронныеДокументыСлужебныйВызовСервера.УстановитьНовуюВерсиюЭД(ОбъектДляВыгрузки, , Истина);
		КонецЕсли;

		Если ТекЭлемент.Ключ = Перечисления.ВидыЭД.СчетФактура Тогда
			
			Если НастройкиОбменаЭД.ВерсияФормата = ВерсияФНС_СФ Тогда
				СтруктураВозврата = ЭлектронныеДокументыВнутренний.СформироватьСчетФактуруФНС(ОбъектДляВыгрузки, НастройкиОбменаЭД);
			Иначе
				СтруктураВозврата = ЭлектронныеДокументыВнутренний.СформироватьИнформациюПродавца(ОбъектДляВыгрузки, НастройкиОбменаЭД);
			КонецЕсли;
			
		ИначеЕсли ТекЭлемент.Ключ = Перечисления.ВидыЭД.КорректировочныйСчетФактура Тогда
			
			Если НастройкиОбменаЭД.ВерсияФормата = ВерсияФНС_СФ Тогда
				СтруктураВозврата = ЭлектронныеДокументыВнутренний.СформироватьСчетФактуруФНС(ОбъектДляВыгрузки, НастройкиОбменаЭД);
			Иначе
				СтруктураВозврата = ЭлектронныеДокументыВнутренний.СформироватьИнформациюПродавцаУКД(ОбъектДляВыгрузки, НастройкиОбменаЭД);
			КонецЕсли;
				
		ИначеЕсли ТекЭлемент.Ключ = Перечисления.ВидыЭД.ТОРГ12Продавец Тогда
			
			Если НастройкиОбменаЭД.ВерсияФормата = ВерсияФНС_2016 Тогда
				СтруктураВозврата = ЭлектронныеДокументыВнутренний.СформироватьПередачаТоваровПродавец(ОбъектДляВыгрузки, НастройкиОбменаЭД);
			ИначеЕсли НастройкиОбменаЭД.ВерсияФормата = ВерсияФНС_2015 ИЛИ НастройкиОбменаЭД.ВерсияФормата = ВерсияСхемыCML2 Тогда
				СтруктураВозврата = ЭлектронныеДокументыВнутренний.СформироватьТорг12ПродавецФНС(ОбъектДляВыгрузки, НастройкиОбменаЭД);
			Иначе
				СтруктураВозврата = ЭлектронныеДокументыВнутренний.СформироватьИнформациюПродавца(ОбъектДляВыгрузки, НастройкиОбменаЭД);
			КонецЕсли;
			
		ИначеЕсли ТекЭлемент.Ключ = Перечисления.ВидыЭД.АктИсполнитель Тогда
			
			Если НастройкиОбменаЭД.ВерсияФормата = ВерсияФНС_2016 Тогда
				СтруктураВозврата = ЭлектронныеДокументыВнутренний.СформироватьПередачаРаботИсполнитель(ОбъектДляВыгрузки, НастройкиОбменаЭД);
			ИначеЕсли НастройкиОбменаЭД.ВерсияФормата = ВерсияФНС_2015 ИЛИ НастройкиОбменаЭД.ВерсияФормата = ВерсияСхемыCML2 Тогда
				СтруктураВозврата = ЭлектронныеДокументыВнутренний.СформироватьАкт501ИсполнительФНС(ОбъектДляВыгрузки, НастройкиОбменаЭД);
			Иначе
				СтруктураВозврата = ЭлектронныеДокументыВнутренний.СформироватьИнформациюПродавца(ОбъектДляВыгрузки, НастройкиОбменаЭД);
			КонецЕсли;
			
		ИначеЕсли ТекЭлемент.Ключ = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель Тогда
			
			Если НастройкиОбменаЭД.ВерсияФормата = ВерсияФНС_2015 Или НастройкиОбменаЭД.ВерсияФормата = ВерсияСхемыCML2
				Или НастройкиОбменаЭД.ВерсияФормата = ВерсияФНС_2016 Тогда
				СтруктураВозврата = ЭлектронныеДокументыВнутренний.СформироватьКорДокументПоДокументу(ОбъектДляВыгрузки, НастройкиОбменаЭД);
			Иначе
				СтруктураВозврата = ЭлектронныеДокументыВнутренний.СформироватьИнформациюПродавцаУКД(ОбъектДляВыгрузки, НастройкиОбменаЭД);
			КонецЕсли;
				
		ИначеЕсли ТекЭлемент.Ключ = Перечисления.ВидыЭД.АктНаПередачуПрав Тогда
			Если НастройкиОбменаЭД.ВерсияФормата = ВерсияСхемыCML2 Тогда
				СтруктураВозврата = ЭлектронныеДокументыВнутренний.СформироватьАктНаПередачуПрав(ОбъектДляВыгрузки, НастройкиОбменаЭД);
			Иначе
				СтруктураВозврата = ЭлектронныеДокументыВнутренний.СформироватьИнформациюПродавца(ОбъектДляВыгрузки, НастройкиОбменаЭД);
			КонецЕсли;
		
		ИначеЕсли ТекЭлемент.Ключ = Перечисления.ВидыЭД.ТОРГ12 Тогда
			СтруктураВозврата = ЭлектронныеДокументыВнутренний.СформироватьНакладнуюПоДокументу(ОбъектДляВыгрузки,
				НастройкиОбменаЭД);
				
		ИначеЕсли ТекЭлемент.Ключ = Перечисления.ВидыЭД.СчетНаОплату Тогда
			
			Если НастройкиОбменаЭД.ВерсияФормата = ВерсияСхемыCML2 Тогда
				
				СтруктураВозврата = ЭлектронныеДокументыВнутренний.СформироватьСчетНаОплатуПоДокументу(ОбъектДляВыгрузки,
																											НастройкиОбменаЭД);
			Иначе
				СтруктураВозврата = ЭлектронныеДокументыВнутренний.УдалитьСформироватьСчетНаОплатуПоДокументу(ОбъектДляВыгрузки,
																											НастройкиОбменаЭД);
			КонецЕсли;
			
		ИначеЕсли ТекЭлемент.Ключ = Перечисления.ВидыЭД.ПрайсЛист Тогда
			
			Если НастройкиОбменаЭД.ВерсияФормата = ВерсияСхемыCML2 Тогда
				
				СтруктураВозврата = ЭлектронныеДокументыВнутренний.СформироватьПрайсПоДокументу(ОбъектДляВыгрузки,
																									НастройкиОбменаЭД);
			Иначе
				
				СтруктураВозврата = ЭлектронныеДокументыВнутренний.УдалитьСформироватьПрайсПоДокументу(ОбъектДляВыгрузки,
																									НастройкиОбменаЭД);
				
			КонецЕсли;

		ИначеЕсли ТекЭлемент.Ключ = Перечисления.ВидыЭД.ЗаказТовара Тогда
			
			Если НастройкиОбменаЭД.ВерсияФормата = ВерсияСхемыCML2 Тогда
				
				СтруктураВозврата = ЭлектронныеДокументыВнутренний.СформироватьЗаказПоставщикуПоДокументу(ОбъектДляВыгрузки,
																											НастройкиОбменаЭД);

			Иначе
				СтруктураВозврата = ЭлектронныеДокументыВнутренний.УдалитьСформироватьЗаказПоставщикуПоДокументу(ОбъектДляВыгрузки,
																											НастройкиОбменаЭД);
			КонецЕсли;
			
		ИначеЕсли ТекЭлемент.Ключ = Перечисления.ВидыЭД.ОтветНаЗаказ Тогда
			
			Если НастройкиОбменаЭД.ВерсияФормата = ВерсияСхемыCML2 Тогда
				
				СтруктураВозврата = ЭлектронныеДокументыВнутренний.СформироватьЗаказКлиентаПоДокументу(ОбъектДляВыгрузки,
																											НастройкиОбменаЭД);
			Иначе
				СтруктураВозврата = ЭлектронныеДокументыВнутренний.УдалитьСформироватьЗаказКлиентаПоДокументу(ОбъектДляВыгрузки,
																												НастройкиОбменаЭД);
			КонецЕсли;
			
		ИначеЕсли ТекЭлемент.Ключ = Перечисления.ВидыЭД.ОтчетОПродажахКомиссионногоТовара Тогда
			
			Если НастройкиОбменаЭД.ВерсияФормата = ВерсияСхемыCML2 Тогда
				
				СтруктураВозврата = ЭлектронныеДокументыВнутренний.СформироватьОтчетОПродажахКомиссионногоТовараПоДокументу(ОбъектДляВыгрузки,
																									НастройкиОбменаЭД);
			Иначе
				
				СтруктураВозврата = ЭлектронныеДокументыВнутренний.УдалитьСформироватьОтчетОПродажахКомиссионногоТовараПоДокументу(ОбъектДляВыгрузки,
																									НастройкиОбменаЭД);
				
			КонецЕсли;
	
		ИначеЕсли ТекЭлемент.Ключ = Перечисления.ВидыЭД.ОтчетОСписанииКомиссионногоТовара Тогда
			
			Если НастройкиОбменаЭД.ВерсияФормата = ВерсияСхемыCML2 Тогда
				
				СтруктураВозврата = ЭлектронныеДокументыВнутренний.СформироватьОтчетОСписанииКомиссионногоТовараПоДокументу(
																						ОбъектДляВыгрузки, НастройкиОбменаЭД);
			Иначе
				СтруктураВозврата = ЭлектронныеДокументыВнутренний.УдалитьСформироватьОтчетОСписанииКомиссионногоТовараПоДокументу(
																						ОбъектДляВыгрузки, НастройкиОбменаЭД);
																						
			КонецЕсли;
			
		ИначеЕсли ТекЭлемент.Ключ = Перечисления.ВидыЭД.КаталогТоваров Тогда
			
			Если НастройкиОбменаЭД.ВерсияФормата = ВерсияСхемыCML2 Тогда
				
				СтруктураВозврата = ЭлектронныеДокументыВнутренний.СформироватьКаталогНоменклатуры(НастройкиОбменаЭД, ДопПараметры);
			
			ИначеЕсли НастройкиОбменаЭД.ВерсияФормата = ВерсияСхемыCML402
					ИЛИ Не ЗначениеЗаполнено(НастройкиОбменаЭД.ВерсияФормата) Тогда
					
				ТоварыКаталога = "";
				ДопПараметры.Свойство("ТоварыКаталога", ТоварыКаталога);
				СписокТоваровКаталога = ПолучитьИзВременногоХранилища(ТоварыКаталога);
				СтруктураВозврата = ЭлектронныеДокументыВнутренний.УдалитьСформироватьКаталогНоменклатуры(ОбъектДляВыгрузки,
				СписокТоваровКаталога, НастройкиОбменаЭД);
			КонецЕсли;
			
		ИначеЕсли ТекЭлемент.Ключ = Перечисления.ВидыЭД.АктВыполненныхРабот Тогда
			СтруктураВозврата = ЭлектронныеДокументыВнутренний.СформироватьАктВыполненныхРаботПоДокументу(ОбъектДляВыгрузки,
				НастройкиОбменаЭД);
				
		ИначеЕсли ТекЭлемент.Ключ = Перечисления.ВидыЭД.ПередачаТоваровМеждуОрганизациями Тогда
			СтруктураВозврата = ЭлектронныеДокументыВнутренний.СформироватьПередачуТоваровМеждуОрганизациями(ОбъектДляВыгрузки,
				НастройкиОбменаЭД);
				
		ИначеЕсли ТекЭлемент.Ключ = Перечисления.ВидыЭД.ВозвратТоваровМеждуОрганизациями Тогда
			СтруктураВозврата = ЭлектронныеДокументыВнутренний.СформироватьВозвратТоваровМеждуОрганизациями(ОбъектДляВыгрузки,
				НастройкиОбменаЭД);
				
		ИначеЕсли ТекЭлемент.Ключ = Перечисления.ВидыЭД.ПлатежноеПоручение Тогда
			СтруктураВозврата = ЭлектронныеДокументыВнутренний.СформироватьПлатежноеПоручение(ОбъектДляВыгрузки, НастройкиОбменаЭД);
			
		ИначеЕсли ТекЭлемент.Ключ = Перечисления.ВидыЭД.АктОРасхождениях Тогда
			СтруктураВозврата = ЭлектронныеДокументыВнутренний.СформироватьАктОРасхожденияхПоДокументу(
				ОбъектДляВыгрузки, НастройкиОбменаЭД);
			
		ИначеЕсли Врег(ТекЭлемент.Ключ) = ВРег("РеквизитыОрганизации") Тогда
			СтруктураВозврата = ЭлектронныеДокументыВнутренний.СформироватьРеквизитыОрганизации(ОбъектДляВыгрузки,
				НастройкиОбменаЭД);

		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтруктураВозврата) Тогда
			ВерсияРегламентаЭДО = "";
			Если НЕ НастройкиОбменаЭД.Свойство("ВерсияРегламентаЭДО", ВерсияРегламентаЭДО)
				ИЛИ НЕ ЗначениеЗаполнено(ВерсияРегламентаЭДО) Тогда
				ВерсияРегламентаЭДО = Перечисления.ВерсииРегламентаОбмена1С.Версия20;
			КонецЕсли;
			СтруктураВозврата.СтруктураЭД.Вставить("ВерсияРегламентаЭДО", ВерсияРегламентаЭДО);
			
			СтруктураВозврата.СтруктураЭД.Вставить("ТребуетсяПодтверждение", ?(НастройкиОбменаЭД.Свойство("ТребуетсяПодтверждение"),
				НастройкиОбменаЭД.ТребуетсяПодтверждение, Ложь));
				
			Если СтруктураВозврата.СтруктураЭД.Свойство("ПодтверждениеОбязательно") 
				И СтруктураВозврата.СтруктураЭД.ПодтверждениеОбязательно Тогда
				СтруктураВозврата.СтруктураЭД.ТребуетсяПодтверждение = Истина;
			КонецЕсли;

			СтруктураВозврата.СтруктураЭД.Вставить("ТребуетсяИзвещение", ?(НастройкиОбменаЭД.Свойство("ТребуетсяИзвещение"),
				НастройкиОбменаЭД.ТребуетсяИзвещение, Ложь));

			
			МассивСтруктурВозврата.Добавить(СтруктураВозврата);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьСсылкуДляВладельцаВРегистреСостояний(СсылкаНаОбъект, ЭлектронныйДокумент) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если НЕ ЭлектронныеДокументыСлужебныйВызовСервера.ЭтоСлужебныйДокумент(ЭлектронныйДокумент) Тогда
				
		НаборЗаписей = РегистрыСведений.СостоянияЭД.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.СсылкаНаОбъект.Установить(СсылкаНаОбъект);
		НаборЗаписей.Прочитать();
		
		Если НаборЗаписей.Количество() = 0 Тогда
			НоваяЗаписьНабора = НаборЗаписей.Добавить();
			НоваяЗаписьНабора.СсылкаНаОбъект = СсылкаНаОбъект;
		Иначе
			НоваяЗаписьНабора = НаборЗаписей.Получить(0);
		КонецЕсли;
		
		СтруктураИнформации = ЭлектронныеДокументыСлужебныйВызовСервера.ОпределитьСводнуюИнформациюПоСтатусуЭД(ПрисоединенныйФайл(ЭлектронныйДокумент));
		
		НоваяЗаписьНабора.ЭлектронныйДокумент               = ЭлектронныйДокумент;
		НоваяЗаписьНабора.СостояниеВерсииЭД                 = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭлектронныйДокумент,"СостояниеЭДО");
		НоваяЗаписьНабора.ДействияСНашейСтороны             = СтруктураИнформации.СНашейСтороны;
		НоваяЗаписьНабора.ДействияСоСтороныДругогоУчастника = СтруктураИнформации.СоСтороныДругогоУчастника;
		
		НаборЗаписей.Записать();
		
	КонецЕсли;
	
КонецПроцедуры

Функция СформироватьЗипАрхивФайлов(ИмяОсновногоФайла, МассивФайлов)
	
	Попытка
		Файл = Новый Файл(ИмяОсновногоФайла);
		ФайлЗипАрхива = СтрЗаменить(ИмяОсновногоФайла, Файл.Расширение, ".zip");
		ЗаписьЗип = Новый ЗаписьZIPФайла(ФайлЗипАрхива);
		Для Каждого ИмяФайла Из МассивФайлов Цикл
			ЗаписьЗип.Добавить(ИмяФайла);
		КонецЦикла;
		ЗаписьЗип.Записать();
		Возврат ФайлЗипАрхива;
	Исключение
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке())
			+ НСтр("ru = ' (подробности см. в Журнале регистрации).'");
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()) + Символы.ПС
			+ НСтр("ru = 'Проверьте поддержку русского языка в региональных настройках ОС для non-Unicode programs
			|и наличие доступа к каталогу временных файлов.'");
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'запись файла архива на диск'"),
																					ТекстОшибки,
																					ТекстСообщения);
		
		Возврат "";
	КонецПопытки;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Отправка сообщений

Функция СоздатьТекстОписиЭД(Конверт, СоответствиеВложений, СоответствиеФайлЭД, ЭтоПроизвольныйДокумент)
	
	РеквизитыКонверта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Конверт, "Отправитель, Получатель");
	ЦентрОбменаЭД =    РеквизитыКонверта.Отправитель;
	УчастникОбменаЭД = РеквизитыКонверта.Получатель;
	
	ИмяФайла = ТекущееИмяВременногоФайла("xml");
	ЗаписьХМЛ = Новый ЗаписьXML;
	ЗаписьХМЛ.ОткрытьФайл(ИмяФайла);
	ЗаписьХМЛ.ЗаписатьНачалоЭлемента("ТранспортнаяИнформация");
	// Имя документа
	ЗаписьХМЛ.ЗаписатьНачалоЭлемента("ДатаИВремяФормирования");
	ЗаписьХМЛ.ЗаписатьТекст(ПреобразоватьДатуВКаноническийВид(ТекущаяДатаСеанса()));
	ЗаписьХМЛ.ЗаписатьКонецЭлемента();
	// Идентификатор документа
	ЗаписьХМЛ.ЗаписатьНачалоЭлемента("Идентификатор");
	ЗаписьХМЛ.ЗаписатьТекст(Строка(Конверт.УникальныйИдентификатор()));
	ЗаписьХМЛ.ЗаписатьКонецЭлемента();	
	// Дата получения
	ЗаписьХМЛ.ЗаписатьНачалоЭлемента("Отправитель");
	ЗаписьХМЛ.ЗаписатьТекст(ЦентрОбменаЭД);
	ЗаписьХМЛ.ЗаписатьКонецЭлемента();
	ЗаписьХМЛ.ЗаписатьНачалоЭлемента("Получатель");
	ЗаписьХМЛ.ЗаписатьТекст(УчастникОбменаЭД);
	ЗаписьХМЛ.ЗаписатьКонецЭлемента();
	// Текст произвольного документа
	Если ЭтоПроизвольныйДокумент Тогда 
		Текст = Конверт.ЭлектронныеДокументы[0].ЭлектронныйДокумент.ВладелецФайла.Текст;
		ЗаписьХМЛ.ЗаписатьНачалоЭлемента("Текст");
		ЗаписьХМЛ.ЗаписатьТекст(Текст);
		ЗаписьХМЛ.ЗаписатьКонецЭлемента();
	КонецЕсли;	
	
	// Шифрование по документам
	
	ЗаписьХМЛ.ЗаписатьНачалоЭлемента("НастройкиШифрования");
	Для Каждого ВложениеДокумент Из Конверт.ЭлектронныеДокументы Цикл
		ЗаписьХМЛ.ЗаписатьНачалоЭлемента("ДокументШифрования");
		ЗаписьХМЛ.ЗаписатьТекст(Строка(ВложениеДокумент.ЭлектронныйДокумент));
		
		ЗаписьХМЛ.ЗаписатьНачалоЭлемента("Зашифрован");
		Если Конверт.ДанныеЗашифрованы Тогда
			ЗаписьХМЛ.ЗаписатьТекст("Да");
		Иначе
			ЗаписьХМЛ.ЗаписатьТекст("Нет");
		КонецЕсли;
		ЗаписьХМЛ.ЗаписатьКонецЭлемента();
		
		Если Конверт.ДанныеЗашифрованы Тогда
			ЗаписьХМЛ.ЗаписатьНачалоЭлемента("СертификатШифрования");
			ЗаписьХМЛ.ЗаписатьТекст(Строка(Конверт.СертификатШифрования));
			ЗаписьХМЛ.ЗаписатьКонецЭлемента();
		КонецЕсли;
		ЗаписьХМЛ.ЗаписатьКонецЭлемента();
	КонецЦикла;
	ЗаписьХМЛ.ЗаписатьКонецЭлемента();
	
	ЗаписьХМЛ.ЗаписатьНачалоЭлемента("ДокументыИПодписи");
	Для Каждого Вложение Из СоответствиеВложений Цикл
		ЗаписьХМЛ.ЗаписатьНачалоЭлемента("Документ");
		ЗаписьХМЛ.ЗаписатьТекст(Вложение.Ключ);
		
		СтруктураПараметровЭД = СоответствиеФайлЭД.Получить(Вложение.Ключ);
		НомерЭД = ""; УникальныйИД = "";
		Если СтруктураПараметровЭД.Свойство("НомерЭД", НомерЭД) И ЗначениеЗаполнено(НомерЭД) Тогда
			ЗаписьХМЛ.ЗаписатьНачалоЭлемента("НомерЭД");
			ЗаписьХМЛ.ЗаписатьТекст(НомерЭД);
			ЗаписьХМЛ.ЗаписатьКонецЭлемента();
		КонецЕсли;
		Если СтруктураПараметровЭД.Свойство("УникальныйИД", УникальныйИД) И ЗначениеЗаполнено(УникальныйИД) Тогда
			ЗаписьХМЛ.ЗаписатьНачалоЭлемента("УникальныйИД");
			ЗаписьХМЛ.ЗаписатьТекст(УникальныйИД);
			ЗаписьХМЛ.ЗаписатьКонецЭлемента();
		КонецЕсли;
		
		Для Каждого Подпись Из Вложение.Значение Цикл
			ЗаписьХМЛ.ЗаписатьНачалоЭлемента("Подпись");
			ЗаписьХМЛ.ЗаписатьТекст(Подпись);
			ЗаписьХМЛ.ЗаписатьКонецЭлемента();
		КонецЦикла;
		ЗаписьХМЛ.ЗаписатьКонецЭлемента();
	КонецЦикла;
	ЗаписьХМЛ.ЗаписатьКонецЭлемента();
	
	ЗаписьХМЛ.ЗаписатьКонецЭлемента();
	ЗаписьХМЛ.Закрыть();
	
	Возврат ИмяФайла;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Получение почты

Процедура ОбработатьПодтверждениеПолучения(Сообщение, ЭтоФайл = Ложь)
	
	Если ЭтоФайл Тогда
		ЧтениеХМЛ = Новый ЧтениеXML;
		ЧтениеХМЛ.ОткрытьФайл(Сообщение.ПолноеИмя);
		Пока ЧтениеХМЛ.Прочитать() Цикл
			Если ЧтениеХМЛ.ЛокальноеИмя = "ЭлектронныйДокумент" И ЧтениеХМЛ.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
				ЧтениеХМЛ.Прочитать();
				ДокументПакетЭД = ОпределитьПодтверждаемыйПакетЭД(ЧтениеХМЛ.Значение);
			КонецЕсли;
			Если ЧтениеХМЛ.ЛокальноеИмя = "ДатаПолучения" И ЧтениеХМЛ.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
				ЧтениеХМЛ.Прочитать();
				ДатаПолучения = Дата(ЧтениеХМЛ.Значение);
			КонецЕсли;
		КонецЦикла;
		ЧтениеХМЛ.Закрыть();
		
		Если ЗначениеЗаполнено(ДокументПакетЭД) И ДокументПакетЭД.СтатусПакета <> Перечисления.СтатусыПакетовЭД.Доставлен
			И ДатаПолучения <> Дата('00010101') Тогда
			ОбновитьСтатусыДокументовПакетаЭД(ДокументПакетЭД, Перечисления.СтатусыПакетовЭД.Доставлен, ДатаПолучения);
		КонецЕсли;
		УдалитьФайлы(Сообщение.ПолноеИмя);
	Иначе
		Если Найти(Сообщение.Тема, "Подтверждение получения пакета электронных документов") > 0 Тогда
			Для Каждого Вложение Из Сообщение.Вложения Цикл
				ДвоичныеДанныеПодтверждения = Вложение.Значение;
				ИмяФайла = ТекущееИмяВременногоФайла("xml");
				ДвоичныеДанныеПодтверждения.Записать(ИмяФайла);
				
				ЧтениеХМЛ = Новый ЧтениеXML;
				ЧтениеХМЛ.ОткрытьФайл(ИмяФайла);
				Пока ЧтениеХМЛ.Прочитать() Цикл
					Если ЧтениеХМЛ.ЛокальноеИмя = "ЭлектронныйДокумент" И ЧтениеХМЛ.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
						ЧтениеХМЛ.Прочитать();
						ДокументПакетЭД = ОпределитьПодтверждаемыйПакетЭД(ЧтениеХМЛ.Значение);
					КонецЕсли;
					Если ЧтениеХМЛ.ЛокальноеИмя = "ДатаПолучения" И ЧтениеХМЛ.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
						ЧтениеХМЛ.Прочитать();
						ДатаПолучения = Дата(ЧтениеХМЛ.Значение);
					КонецЕсли;
				КонецЦикла;
				ЧтениеХМЛ.Закрыть();
				УдалитьФайлы(ИмяФайла);
				Если ЗначениеЗаполнено(ДокументПакетЭД) И ДокументПакетЭД.СтатусПакета <> Перечисления.СтатусыПакетовЭД.Доставлен
					И ДатаПолучения <> Дата('00010101') Тогда
					
					ОбновитьСтатусыДокументовПакетаЭД(ДокументПакетЭД, Перечисления.СтатусыПакетовЭД.Доставлен, ДатаПолучения);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ОтправитьПодтверждениеПоПакету(ПакетЭД, РесурсОтправителя, АдресОтправителя, ТипОтправки)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВыборкаПрисоединенныхФайлов = ПолучитьВыборкуЭДПоОтбору(Новый Структура("ВладелецФайла", ПакетЭД));
	Если ЗначениеЗаполнено(ВыборкаПрисоединенныхФайлов) И ВыборкаПрисоединенныхФайлов.Следующий() Тогда
		Если ТипОтправки = Перечисления.СпособыОбменаЭД.ЧерезЭлектроннуюПочту Тогда
			ИмяПакетаЭД = ВыборкаПрисоединенныхФайлов.Наименование;
			
			ФайлХМЛ = СформироватьХМЛФайлПодтвержденияПолучения(ИмяПакетаЭД);
			СоответствиеВложений = Новый Соответствие;
			СоответствиеВложений.Вставить(ФайлХМЛ.Имя, Новый ДвоичныеДанные(ФайлХМЛ.ПолноеИмя));
			ПараметрыОтправки = Новый Структура("Кому, Тема, Тело, Вложения, Пароль", АдресОтправителя,
			"Подтверждение получения пакета электронных документов: " + ИмяПакетаЭД, , СоответствиеВложений, РесурсОтправителя.Пароль);
			Попытка
				РаботаСПочтовымиСообщениями.ОтправитьСообщение(РесурсОтправителя, ПараметрыОтправки);
			Исключение
				ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				Текст = НСтр("ru = 'Ошибка при отправке сообщения на сервер электронной почты.
				|%1'");
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, ТекстОшибки);
				
				ТекстСообщения = НСтр("ru = 'Ошибка при отправке эл.документов.
				|(подробности см. в Журнале регистрации).'");
				ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'Отправка эл.документов'"),
				ТекстОшибки,
				ТекстСообщения);
			КонецПопытки;
			УдалитьФайлы(ФайлХМЛ.ПолноеИмя);
		ИначеЕсли ТипОтправки = Перечисления.СпособыОбменаЭД.ЧерезFTP Тогда
			ПрофильНастроекЭДО = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПакетЭД, "ПрофильНастроекЭДО");
			FTPСоединение = ПолучитьFTPСоединение(ПрофильНастроекЭДО);
			Если FTPСоединение = Неопределено Тогда 
				Возврат;
			КонецЕсли;
			КаталогИсхДокументов = АдресОтправителя;
			
			ПодготовитьПутьFTP(КаталогИсхДокументов);
			ИмяПакетаЭД = ВыборкаПрисоединенныхФайлов.Наименование;
			ФайлХМЛ = СформироватьХМЛФайлПодтвержденияПолучения(ИмяПакетаЭД);
			
			ТекстОшибки = "";
			Попытка
				FTPСоединение.УстановитьТекущийКаталог(КаталогИсхДокументов);
			Исключение
				СоздатьКаталогиFTP(FTPСоединение, КаталогИсхДокументов, , ТекстОшибки);
			КонецПопытки;
			Если ЗначениеЗаполнено(ТекстОшибки) Тогда
				Возврат;
			КонецЕсли;
			ЗаписатьФайлНаFTP(FTPСоединение, ФайлХМЛ.ПолноеИмя, ФайлХМЛ.Имя);
			УдалитьФайлы(ФайлХМЛ.ПолноеИмя);
		ИначеЕсли ТипОтправки = Перечисления.СпособыОбменаЭД.ЧерезКаталог Тогда
			ИмяПакетаЭД = ВыборкаПрисоединенныхФайлов.Наименование;
			
			ФайлХМЛ = СформироватьХМЛФайлПодтвержденияПолучения(ИмяПакетаЭД);
			АдресКаталога = АдресОтправителя + ?(Прав(АдресОтправителя, 1) <> "\", "\", "");
			КопироватьФайл(ФайлХМЛ.ПолноеИмя, АдресКаталога + ФайлХМЛ.Имя);
			УдалитьФайлы(ФайлХМЛ.ПолноеИмя);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция СформироватьХМЛФайлПодтвержденияПолучения(ИмяПакетаЭД)
	
	ИмяФайла = ТекущееИмяВременногоФайла("xml");
	ЗаписьХМЛ = Новый ЗаписьXML;
	ЗаписьХМЛ.ОткрытьФайл(ИмяФайла);
	// Корневой элемент
	ЗаписьХМЛ.ЗаписатьНачалоЭлемента("Подтверждение");
	// Имя документа
	ЗаписьХМЛ.ЗаписатьНачалоЭлемента("ЭлектронныйДокумент");
	ЗаписьХМЛ.ЗаписатьТекст(ИмяПакетаЭД);
	ЗаписьХМЛ.ЗаписатьКонецЭлемента();
	ЗаписьХМЛ.ЗаписатьНачалоЭлемента("ДатаПолучения");
	ЗаписьХМЛ.ЗаписатьТекст(ПреобразоватьДатуВКаноническийВид(ТекущаяДатаСеанса()));
	ЗаписьХМЛ.ЗаписатьКонецЭлемента();

	ЗаписьХМЛ.ЗаписатьКонецЭлемента();
	ЗаписьХМЛ.Закрыть();
	
	Возврат Новый Файл(ИмяФайла);
	
КонецФункции

Функция НеобходимоПолучить(Сообщение, СтруктураПараметров)
	
	Если Сообщение.Вложения.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Сообщение.Вложения.Количество() = 1 Тогда 
	
		Если Найти(Сообщение.Тема, "Подтверждение") Тогда
			Возврат Истина;
		КонецЕсли;
		
		Если Найти(Сообщение.Тема, "Обмен эл.документами:") Тогда
			
			Для Каждого Вложение ИЗ Сообщение.Вложения Цикл
				ДвоичныеДанныеВложения = Вложение.Значение;
			КонецЦикла;
		
			Результат = НеобходимоПолучитьДвоичныеДанные(ДвоичныеДанныеВложения, Вложение.Ключ, СтруктураПараметров);
			
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция НеобходимоПолучитьДвоичныеДанные(ДвоичныеДанные, ИмяФайла, СтруктураПараметров)
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Определим из файла вложений идентификаторы отправителя и получателя
	// и сохраним файл на диск
	ИмяВременногоФайлаЗИП = ТекущееИмяВременногоФайла("zip");
	ДвоичныеДанные.Записать(ИмяВременногоФайлаЗИП);
	
	КлючУникальности = Новый УникальныйИдентификатор();
	ПапкаДляРаспаковки = РабочийКаталог("input", КлючУникальности);
	
	Попытка
		ЗИПЧтение = Новый ЧтениеZipФайла(ИмяВременногоФайлаЗИП);
		ЗипЧтение.ИзвлечьВсе(ПапкаДляРаспаковки);
	Исключение
		
		ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		
		Если ЗИПЧтение = Неопределено Тогда
			ТекстСообщения = НСтр("ru = 'Невозможно прочитать транспортный архив'");
		Иначе
			Если НЕ ВозможноИзвлечьФайлы(ЗипЧтение, ПапкаДляРаспаковки) Тогда
				ТекстСообщения = ЭлектронныеДокументыПовтИсп.ПолучитьСообщениеОбОшибке("006");
			КонецЕсли;
			ЗипЧтение.Закрыть();
		КонецЕсли;
		
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(
			НСтр("ru = 'Распаковка пакета ЭД'"), ТекстОшибки, ТекстСообщения);
		
		УдалитьФайлы(ИмяВременногоФайлаЗИП);
		УдалитьФайлы(ПапкаДляРаспаковки);
		Возврат Ложь;
		
	КонецПопытки;

	ЗипЧтение.Закрыть();
	УдалитьФайлы(ИмяВременногоФайлаЗИП);
	РаспакованныеФайлы = НайтиФайлы(ПапкаДляРаспаковки, "*");
	
	ФайлИнформации      = Неопределено;
	ФайлКарточки        = Неопределено;
	НастройкиСоглашения = Неопределено;
	
	Для Каждого ТекФайл Из РаспакованныеФайлы Цикл
		Если Найти(ТекФайл.Имя, "packageDescription") > 0 Тогда
			ФайлИнформации = ТекФайл;
			Прервать;
		ИначеЕсли Найти(ТекФайл.Имя, "card") > 0 Тогда
			ФайлКарточки = ТекФайл;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Зашифрован = Ложь;
	
	Если НЕ ФайлИнформации = Неопределено Тогда
		// Определим в этом файле строку с отправителем и получателем
		// и признак шифрования и попытаемся найти соглашение
		ЧтениеХМЛ = Новый ЧтениеXML;
		ЧтениеХМЛ.ОткрытьФайл(ФайлИнформации.ПолноеИмя);
		Пока ЧтениеХМЛ.Прочитать() Цикл
			Если ЧтениеХМЛ.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеХМЛ.ЛокальноеИмя = "Отправитель" Тогда
				ЧтениеХМЛ.Прочитать();
				ИДОтправителя = ЧтениеХМЛ.Значение;
			КонецЕсли;
			
			Если ЧтениеХМЛ.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеХМЛ.ЛокальноеИмя = "Зашифрован" Тогда
				ЧтениеХМЛ.Прочитать();
				Зашифрован = Зашифрован ИЛИ Булево(ЧтениеХМЛ.Значение);
			КонецЕсли;
			
			Если ЧтениеХМЛ.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеХМЛ.ЛокальноеИмя = "Получатель" Тогда
				ЧтениеХМЛ.Прочитать();
				ИДПолучателя = ЧтениеХМЛ.Значение;
			КонецЕсли;
				
		КонецЦикла;
		
		ЧтениеХМЛ.Закрыть();
		НастройкиСоглашения = ПолучитьНастройкиОбменаЭДПоИД(ИДПолучателя, ИДОтправителя);
		
		ВерсияФорматаПакета = Перечисления.ВерсииФорматаПакетаЭД.Версия10;
		
	КонецЕсли;
	
	Если НЕ ФайлКарточки = Неопределено Тогда
		
		ИДПолучателя  = Неопределено;
		ИДОтправителя = Неопределено;
		
		ОбъектXML = Новый ЧтениеXML;
		СтруктураЗначений = Новый Структура;
		
		Попытка
			ТипКарточки = ЭлектронныеДокументыВнутренний.ПолучитьТипЗначенияCML("Card", "http://api-invoice.taxcom.ru/card");
			ОбъектXML.ОткрытьФайл(ФайлКарточки.ПолноеИмя);
			ЭД = ФабрикаXDTO.ПрочитатьXML(ОбъектXML, ТипКарточки);
			ОбъектXML.Закрыть();
			ИДОтправителя = ЭД.Sender.Abonent.ID;
			ИДПолучателя  = ЭД.Receiver.Abonent.ID;
			Если ЭД.Description <> Неопределено
				И ЭД.Description.Свойства().Получить("AdditionalData") <> Неопределено
				И ЭД.Description.AdditionalData <> Неопределено
				И ЭД.Description.AdditionalData.Свойства().Получить("AdditionalParameter") <> Неопределено
				И ЭД.Description.AdditionalData.AdditionalParameter <> Неопределено Тогда
				
				Для Каждого Свойство Из ЭД.Description.AdditionalData.AdditionalParameter Цикл
					Если Свойство.Name = "Зашифрован" Тогда
						Зашифрован = Булево(Свойство.Value);
						Продолжить;
					КонецЕсли;
					Если Свойство.Name = "ВерсияФорматаПакета" Тогда
						ВерсияФорматаПакета = ВерсияФорматаИзСтроки(Свойство.Value);
						Продолжить;
					КонецЕсли;
					
				КонецЦикла;
			КонецЕсли;
			
			НастройкиСоглашения = ПолучитьНастройкиОбменаЭДПоИД(ИДПолучателя, ИДОтправителя);
			
		Исключение
			
			ОбъектXML.Закрыть();
			
			ШаблонСообщения = НСтр("ru = 'Возникла ошибка при чтении данных из файла %1: %2 (подробности см. в Журнале регистрации).'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
				ФайлКарточки.ПолноеИмя, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'Чтение ЭД.'"),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
				ТекстСообщения);
		КонецПопытки;
		
	КонецЕсли;
	
	Если (ФайлИнформации = Неопределено И ФайлКарточки = Неопределено)
		ИЛИ НастройкиСоглашения = Неопределено Тогда // не нашли файл с описанием или нет обмена
		
		УдалитьФайлы(ПапкаДляРаспаковки);
		Возврат Ложь;
	КонецЕсли;
	
	// Теперь проверим, что такого транспортного пакета от этого отправителя еще не было
	ИмяПакета = Лев(ИмяФайла, СтрДлина(ИмяФайла)-4);
	
	ЗапросПрисоединенногоФайла = Новый Запрос;
	ЗапросПрисоединенногоФайла.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК ЕстьПрисоединенныйФайл
	|ИЗ
	|	Справочник.ПакетЭДПрисоединенныеФайлы КАК ПакетЭДПрисоединенныеФайлы
	|ГДЕ
	|	ПакетЭДПрисоединенныеФайлы.ВладелецФайла ССЫЛКА Документ.ПакетЭД
	|	И ВЫРАЗИТЬ(ПакетЭДПрисоединенныеФайлы.ВладелецФайла КАК Документ.ПакетЭД).Направление = &Направление
	|	И ВЫРАЗИТЬ(ПакетЭДПрисоединенныеФайлы.ВладелецФайла КАК Документ.ПакетЭД).Получатель ПОДОБНО &Получатель
	|	И ВЫРАЗИТЬ(ПакетЭДПрисоединенныеФайлы.ВладелецФайла КАК Документ.ПакетЭД).Отправитель ПОДОБНО &Отправитель
	|	И ПакетЭДПрисоединенныеФайлы.Наименование ПОДОБНО &Наименование
	|	И ПакетЭДПрисоединенныеФайлы.ПометкаУдаления = ЛОЖЬ";
	ЗапросПрисоединенногоФайла.УстановитьПараметр("Направление",  Перечисления.НаправленияЭД.Входящий);
	ЗапросПрисоединенногоФайла.УстановитьПараметр("Получатель",   ИДПолучателя);
	ЗапросПрисоединенногоФайла.УстановитьПараметр("Отправитель",  ИДОтправителя);
	ЗапросПрисоединенногоФайла.УстановитьПараметр("Наименование", ИмяПакета);
	
	РезультатПустой = ЗапросПрисоединенногоФайла.Выполнить().Пустой();
	
	УдалитьФайлы(ПапкаДляРаспаковки);
	
	Если РезультатПустой Тогда
		СтруктураПараметров.Вставить("Получатель",          ИДПолучателя);
		СтруктураПараметров.Вставить("Отправитель",         ИДОтправителя);
		СтруктураПараметров.Вставить("Организация",         НастройкиСоглашения.Организация);
		СтруктураПараметров.Вставить("Контрагент",          НастройкиСоглашения.Контрагент);
		СтруктураПараметров.Вставить("ПрофильНастроекЭДО",  НастройкиСоглашения.ПрофильНастроекЭДО);
		СтруктураПараметров.Вставить("НастройкаЭДО",        НастройкиСоглашения.НастройкаЭДО);
		СтруктураПараметров.Вставить("СпособОбменаЭД",      НастройкиСоглашения.СпособОбменаЭД);
		СтруктураПараметров.Вставить("СертификатОрганизацииДляРасшифровки", НастройкиСоглашения.СертификатОрганизацииДляРасшифровки);
		СтруктураПараметров.Вставить("АдресОтправителя",    НастройкиСоглашения.АдресОтправителя);
		СтруктураПараметров.Вставить("АдресПолучателя",     НастройкиСоглашения.АдресПолучателя);
		СтруктураПараметров.Вставить("Зашифрован",          Зашифрован);
		СтруктураПараметров.Вставить("ВерсияФорматаПакета", ВерсияФорматаПакета);
	
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ОпределитьПодтверждаемыйПакетЭД(ПредставлениеПакета)
	
	СтрокаИдентификатора = СтрЗаменить(ПредставлениеПакета, "EDI_", "");
	Идентификатор = Новый УникальныйИдентификатор(СтрокаИдентификатора);
	ДокументПакет = Документы.ПакетЭД.ПолучитьСсылку(Идентификатор);
	Если НЕ ОбщегоНазначения.СсылкаСуществует(ДокументПакет) Тогда
		ДокументПакет = Неопределено;
	КонецЕсли;
	
	Возврат ДокументПакет;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обмен через каталог

// Обновляет статусы электронных документов.
//
// Параметры: 
//  МассивДокументов - массив ссылок на электронные документы, состояние которых надо обновить,
//  ПризнакПодписи - булево, признак того, что документы подписаны ЭЦП.
//
Процедура ОбновитьСтатусыЭД(МассивДокументов, ПризнакПодписи)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого ЭлектронныйДокумент Из МассивДокументов Цикл
			Если ((ПризнакПодписи И ЭлектронныйДокумент.СтатусЭД <> Перечисления.СтатусыЭД.Подписан)
			
			ИЛИ (ЭлектронныйДокумент.НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани
				И ЭлектронныйДокумент.СтатусЭД = Перечисления.СтатусыЭД.Подписан)
				
			ИЛИ (ЭлектронныйДокумент.СтатусЭД = Перечисления.СтатусыЭД.ПолученоПодтверждение))
			
			И Не (ЭлектронныйДокумент.ВидЭД = Перечисления.ВидыЭД.УведомлениеОбУточнении
			 		И ЭлектронныйДокумент.СтатусЭД = Перечисления.СтатусыЭД.Утвержден) Тогда
			
			Продолжить;
		КонецЕсли;
		
		Попытка
			
			НачатьТранзакцию();
			
			НаправлениеЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭлектронныйДокумент, "НаправлениеЭД");
			
			Если НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий Тогда
				НовыйСтатусЭД = ПолучитьДопустимыйСтатусЭД(Перечисления.СтатусыЭД.ПодготовленКОтправке, ЭлектронныйДокумент);
			Иначе
				НовыйСтатусЭД = ПолучитьДопустимыйСтатусЭД(Перечисления.СтатусыЭД.ПодготовленоПодтверждение, ЭлектронныйДокумент);
			КонецЕсли;
			
			СтруктураПараметров = Новый Структура("СтатусЭД", НовыйСтатусЭД);
			
			ИзменитьПоСсылкеПрисоединенныйФайл(ЭлектронныйДокумент, СтруктураПараметров, Ложь);
			
			ПринудительнаяСменаСостояния = Ложь;
			Если ЭлектронныйДокумент.ВидЭД = Перечисления.ВидыЭД.ИзвещениеОПолучении
				И ЭлектронныйДокумент.СтатусЭД = Перечисления.СтатусыЭД.Отправлен Тогда
				
				ПринудительнаяСменаСостояния = Истина;
			КонецЕсли;
			
			ЭлектронныеДокументыСлужебныйВызовСервера.ОбновитьВерсиюЭД(ЭлектронныйДокумент, ПринудительнаяСменаСостояния);
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ШаблонСообщения = НСтр("ru = '%1 (подробности см. в Журнале регистрации).'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
				КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'подготовка к отправке ЭД'"),
																						ТекстОшибки,
																						ТекстСообщения);
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

// Получает адрес сертификата шифрования во временном хранилище данных.
//
// Параметры:
//  ПрисоединенныйФайл - Ссылка на электронный документ, адрес сертификата шифрования по которому необходимо получить.
//
Функция ПолучитьМассивАдресовСертификатовШифрования(ПрисоединенныйФайл) Экспорт
	
	ПараметрыСоглашения = ОпределитьНастройкиОбменаЭДПоИсточнику(ПрисоединенныйФайл.ВладелецФайла, , , ПрисоединенныйФайл);
	Если НЕ ЗначениеЗаполнено(ПараметрыСоглашения)
		ИЛИ Не ЭлектронныеДокументыСлужебныйВызовСервера.ЭтоПрямойОбмен(ПараметрыСоглашения.СпособОбменаЭД) Тогда
		
		Возврат Неопределено;
	КонецЕсли;
	
	СертификатКонтрагентаШифрования = ПараметрыСоглашения.СертификатКонтрагентаДляШифрования;
	СертификатОрганизацииШифрования = ПараметрыСоглашения.СертификатОрганизацииДляРасшифровки;
	
		
	Если СертификатКонтрагентаШифрования = Неопределено ИЛИ СертификатОрганизацииШифрования = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
		
	ЭлектронныеДокументыСлужебныйВызовСервера.ПроверитьСрокДействияСертификата(СертификатОрганизацииШифрования);
	
	ДвоичныеДанныеСертификата            = СертификатКонтрагентаШифрования.Получить();
	ДвоичныеДанныеСертификатаОрганизации = СертификатОрганизацииШифрования.ФайлСертификата.Получить();
		
	Если ДвоичныеДанныеСертификата = Неопределено ИЛИ ДвоичныеДанныеСертификатаОрганизации = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	АдресСертификата = ПоместитьВоВременноеХранилище(ДвоичныеДанныеСертификата);
	АдресСертификатаОрганизации = ПоместитьВоВременноеХранилище(ДвоичныеДанныеСертификатаОрганизации);
	
	МассивВозврата = Новый Массив;
	МассивВозврата.Добавить(АдресСертификата);
	МассивВозврата.Добавить(АдресСертификатаОрганизации);
	
	Возврат МассивВозврата;
	
КонецФункции

Функция НайтиСоздатьПакетЭД(ТЗ_ПЭД, ПараметрыСоглашения, ТребуетсяИзвещениеОПолучении)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеЗашифрованы = Ложь;
	СертификатШифрования = Неопределено;
	ТребуетсяШифрованиеНаКлиенте = Ложь;
	ИспользоватьЭЦП = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьЗначениеФункциональнойОпции(
	"ИспользоватьЭлектронныеЦифровыеПодписи");
	
	Если ИспользоватьЭЦП Тогда
		Если ЗначениеЗаполнено(ПараметрыСоглашения.СертификатКонтрагентаДляШифрования)
			И ПараметрыСоглашения.СпособОбменаЭД <> Перечисления.СпособыОбменаЭД.ЧерезВебРесурсБанка
			И ПараметрыСоглашения.СпособОбменаЭД <> Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском
			И ПараметрыСоглашения.СпособОбменаЭД <> Перечисления.СпособыОбменаЭД.ЧерезСервис1СЭДО Тогда
			
			Если ПараметрыСоглашения.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий
				И (ПараметрыСоглашения.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПервичныйЭД
				ИЛИ ПараметрыСоглашения.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДОП) Тогда
				
				СертификатШифрования = ПараметрыСоглашения.СертификатКонтрагентаДляШифрования.Получить();
				Если ЗначениеЗаполнено(СертификатШифрования) Тогда
					ДанныеЗашифрованы = Истина;
					
					СертификатКриптографии = Новый СертификатКриптографии(СертификатШифрования);
					СертификатШифрования   = ЭлектроннаяЦифроваяПодписьКлиентСервер.ПолучитьПредставлениеПользователя(
					СертификатКриптографии.Субъект);
					
					Если НЕ ЭлектронныеДокументыСлужебныйВызовСервера.ВыполнятьКриптооперацииНаСервере() Тогда
						ТребуетсяШифрованиеНаКлиенте = Истина;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ПЭД                         = Документы.ПакетЭД.СоздатьДокумент();
	ПЭД.Дата                    = ТекущаяДатаСеанса();
	Если ПараметрыСоглашения.Свойство("Отправитель") Тогда
		ПЭД.Отправитель             = ПараметрыСоглашения.Отправитель;
	КонецЕсли;
	Если ПараметрыСоглашения.Свойство("Получатель") Тогда
		ПЭД.Получатель              = ПараметрыСоглашения.Получатель;
	КонецЕсли;
	ПЭД.Контрагент              = ПараметрыСоглашения.Контрагент;
	ПЭД.Организация             = ПараметрыСоглашения.Организация;
	
	ПЭД.СтатусПакета            = Перечисления.СтатусыПакетовЭД.ПодготовленКОтправке;
	ПЭД.Направление             = Перечисления.НаправленияЭД.Исходящий;
	ПЭД.ДанныеЗашифрованы       = ДанныеЗашифрованы;
	ПЭД.СертификатШифрования    = СертификатШифрования;
	ПЭД.ВерсияФорматаПакета     = ПараметрыСоглашения.ВерсияФорматаПакета;
	
	Если ПараметрыСоглашения.Свойство("АдресОтправителя") Тогда
		ПЭД.АдресРесурсаОрганизации = ПараметрыСоглашения.АдресОтправителя;
	КонецЕсли;
	Если ПараметрыСоглашения.Свойство("АдресПолучателя") Тогда
		ПЭД.АдресРесурсаКонтрагента = ПараметрыСоглашения.АдресПолучателя;
	КонецЕсли;
	
	Если ПараметрыСоглашения.Свойство("СоглашениеЭД") 
		И ПараметрыСоглашения.СоглашениеЭД.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезВебРесурсБанка Тогда
		
		ПЭД.НастройкаЭДО            = ПараметрыСоглашения.СоглашениеЭД;
		СпособОбменаЭД              = ПараметрыСоглашения.СоглашениеЭД.СпособОбменаЭД;
		ПрограммаБанка              = ПараметрыСоглашения.СоглашениеЭД.ПрограммаБанка;
		АдресПолучателя             = "";
	Иначе
		
		ПЭД.НастройкаЭДО            = ПараметрыСоглашения.НастройкаЭДО;
		ПЭД.ПрофильНастроекЭДО      = ПараметрыСоглашения.ПрофильНастроекЭДО;
		СпособОбменаЭД              = ПараметрыСоглашения.СпособОбменаЭД;
		ПрограммаБанка              = "";
		АдресПолучателя             = ПараметрыСоглашения.АдресПолучателя;
	КонецЕсли;
	ПЭД.СпособОбменаЭД          = СпособОбменаЭД;
	
	ПЭД.Записать();
	
	НовСтрока                              = ТЗ_ПЭД.Добавить();
	НовСтрока.ПЭД                          = ПЭД.Ссылка;
	НовСтрока.СпособОбменаЭД               = СпособОбменаЭД;
	НовСтрока.АдресРесурсаПолучателя       = АдресПолучателя;
	НовСтрока.ТребуетсяШифрованиеНаКлиенте = ТребуетсяШифрованиеНаКлиенте;
	НовСтрока.ВерсияФорматаПакета          = ПараметрыСоглашения.ВерсияФорматаПакета;
	НовСтрока.ТребуетсяИзвещениеОПолучении = ТребуетсяИзвещениеОПолучении;
	НовСтрока.ПрограммаБанка               = ПрограммаБанка;
	
	Возврат ПЭД;
	
КонецФункции

// Только для внутреннего использования
Функция ВернутьМассивОтпечатковСтруктуры(СтруктураСертификатов) Экспорт
	
	МассивВозврата = Новый Массив;
	Для Каждого СтруктураКлиентскогоСертификата Из СтруктураСертификатов Цикл
		МассивВозврата.Добавить(СтруктураКлиентскогоСертификата.Отпечаток);
	КонецЦикла;
	
	Возврат МассивВозврата;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обработка электронных документов

Функция ЭтоОтправкаПодтверждения(ПрисоединенныйФайл)
	
	Возврат ПрисоединенныйФайл.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий;
	
КонецФункции

Процедура ЗаписатьДатуПолучения(ЭД, ДатаИзменения)
	
	ТекСтатусЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭД, "СтатусЭД");
	
	Попытка
		Если ЭД.Пустая() ИЛИ (ТекСтатусЭД <> Перечисления.СтатусыЭД.ОтправленоПодтверждение
								И ТекСтатусЭД <> Перечисления.СтатусыЭД.Отправлен) Тогда
			Возврат;
		КонецЕсли;
		НовСтатусЭД = Неопределено;
		Если ТекСтатусЭД = Перечисления.СтатусыЭД.ОтправленоПодтверждение Тогда
			НовСтатусЭД = ПолучитьДопустимыйСтатусЭД(Перечисления.СтатусыЭД.ДоставленоПодтверждение, ЭД);
		ИначеЕсли ТекСтатусЭД = Перечисления.СтатусыЭД.Отправлен Тогда
			НовСтатусЭД = ПолучитьДопустимыйСтатусЭД(Перечисления.СтатусыЭД.Доставлен, ЭД);
		КонецЕсли;
		Если ЗначениеЗаполнено(НовСтатусЭД) Тогда
			СтруктураПараметров = Новый Структура("СтатусЭД", НовСтатусЭД);
			ИзменитьПоСсылкеПрисоединенныйФайл(ЭД, СтруктураПараметров, Ложь);
		КонецЕсли;
	Исключение
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке())
			+ НСтр("ru = ' (подробности см. в Журнале регистрации).'");
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'запись даты получения ЭД'"),
																					ТекстОшибки,
																					ТекстСообщения);
	КонецПопытки;
	
КонецПроцедуры

Процедура ЗаписатьДатуОтправки(ЭД, ДатаИзменения)
	
	РеквизитыЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЭД, "СтатусЭД, ВидЭД, СоглашениеЭД, ПрофильНастроекЭДО");
	ТекСтатусЭД = РеквизитыЭД.СтатусЭД;
	СпособОбменаЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РеквизитыЭД.ПрофильНастроекЭДО, "СпособОбменаЭД");
	
	Попытка
		
		Если ЭД.Пустая() ИЛИ (ТекСтатусЭД <> Перечисления.СтатусыЭД.ПодготовленоПодтверждение
								И ТекСтатусЭД <> Перечисления.СтатусыЭД.ПодготовленКОтправке) Тогда
			Возврат;
		КонецЕсли;
		НовСтатусЭД = Неопределено;
		Если ТекСтатусЭД = Перечисления.СтатусыЭД.ПодготовленоПодтверждение Тогда
			НовСтатусЭД = ПолучитьДопустимыйСтатусЭД(Перечисления.СтатусыЭД.ОтправленоПодтверждение, ЭД);
		ИначеЕсли ТекСтатусЭД = Перечисления.СтатусыЭД.ПодготовленКОтправке Тогда
			Если НЕ ЭлектронныеДокументыСлужебныйВызовСервера.ЭтоПрямойОбмен(СпособОбменаЭД)
				
				И РеквизитыЭД.ВидЭД <> Перечисления.ВидыЭД.ИзвещениеОПолучении
				И РеквизитыЭД.ВидЭД <> Перечисления.ВидыЭД.УведомлениеОбУточнении Тогда
				
				НовСтатусЭД = ПолучитьДопустимыйСтатусЭД(Перечисления.СтатусыЭД.ПереданОператору, ЭД);
				
			Иначе
				
				НовСтатусЭД = ПолучитьДопустимыйСтатусЭД(Перечисления.СтатусыЭД.Отправлен, ЭД);
				
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(НовСтатусЭД) Тогда
			СтруктураПараметров = Новый Структура("СтатусЭД", НовСтатусЭД);
			ИзменитьПоСсылкеПрисоединенныйФайл(ЭД, СтруктураПараметров, Ложь);
			
			Если ЭтоОтветныйТитул(ЭД) Тогда
				ЭлектронныеДокументыСлужебныйВызовСервера.ОбновитьВерсиюЭД(ЭД);
			КонецЕсли;
			
		КонецЕсли;
		
	Исключение
		ШаблонСообщения = НСтр("ru = '%1 (подробности см. в Журнале регистрации).'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'запись даты отправки ЭД'"),
																					ТекстОшибки,
																					ТекстСообщения);
	КонецПопытки;
	
КонецПроцедуры

Функция СтруктураПараметровЭД()
	
	ПараметрыЭД = Новый Структура;
	
	ПараметрыЭД.Вставить("ВидЭД",                Неопределено);
	ПараметрыЭД.Вставить("НаправлениеЭД",        Неопределено);
	ПараметрыЭД.Вставить("Контрагент",           Неопределено);
	ПараметрыЭД.Вставить("ДоговорКонтрагента",   Неопределено);
	ПараметрыЭД.Вставить("Организация",          Неопределено);
	ПараметрыЭД.Вставить("СоглашениеЭД",         Неопределено);
	ПараметрыЭД.Вставить("УстановленныеПодписи", Новый Массив);
	
	Если ЭлектронныеДокументыПовтИсп.ИспользуетсяДополнительнаяАналитикаКонтрагентовСправочникПартнеры() Тогда
		ПараметрыЭД.Вставить("Партнер",          Неопределено);
	КонецЕсли;
	
	Возврат ПараметрыЭД;
	
КонецФункции

// Определяет идентификатор формата электронного документа, соответствующего указанному пространству имен.
//
// Параметры:
//  ВидЭлектронногоДокумента - ПеречислениеСсылка.ВидыЭД - вид электронного документа
//  ПространствоИмен		 - Строка - пространство имен.
// 
// Возвращаемое значение:
//  Строка - идентификатор формата.
//
Функция ФорматПоПространствуИмен(ВидЭлектронногоДокумента, ПространствоИмен) Экспорт

	Результат = Неопределено;
	
	ТаблицаФорматов = ФорматыЭлектронныхДокументов();
	ПараметрыОтбора = Новый Структура("ВидЭлектронногоДокумента", ВидЭлектронногоДокумента);
	СтрокиВидаЭлектронногоДокумента = ТаблицаФорматов.НайтиСтроки(ПараметрыОтбора);
	
	Для Каждого СтрокаФормата Из СтрокиВидаЭлектронногоДокумента Цикл
		Если СтрокаФормата.ПространстваИмен.Найти(СокрЛП(ПространствоИмен)) <> Неопределено Тогда
			Результат = СтрокаФормата.ИдентификаторФормата;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Версии электронных документов

Функция ПолучитьПоследнююВерсиюЭДПоВладельцу(СсылкаНаВладельца)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗапросЭД = Новый Запрос;
	ЗапросЭД.УстановитьПараметр("СсылкаНаВладельца", СсылкаНаВладельца);
	ЗапросЭД.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЭДПрисоединенныеФайлы.НомерВерсииЭД КАК НомерВерсии
	|ИЗ
	|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	|ГДЕ
	|	ЭДПрисоединенныеФайлы.ПометкаУдаления = ЛОЖЬ
	|	И ЭДПрисоединенныеФайлы.ВладелецФайла = &СсылкаНаВладельца
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЭДПрисоединенныеФайлы.НомерВерсииЭД УБЫВ";
	
	Результат = ЗапросЭД.Выполнить().Выбрать();
	Если Результат.Следующий() Тогда
		Возврат Результат.НомерВерсии;
	КонецЕсли;
	
	Возврат 0;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Функционал клиент банка

Процедура СформироватьЭДПрисоединенныйФайлПакетаБанка(Конверт)
	
	РеквизитыСоглашения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
								Конверт.НастройкаЭДО,
								"АдресСервера, РесурсИсходящихДокументов, РесурсВходящихДокументов");
	Настройки = Новый Структура("Адрес", РеквизитыСоглашения.АдресСервера);
	
	ЭД = Конверт.ЭлектронныеДокументы[0].ЭлектронныйДокумент;
	
	Данные = ПрисоединенныеФайлы.ПолучитьДвоичныеДанныеФайла(ЭД);
	URI = "urn:x-obml:1.0";
	ТипMessage = ФабрикаXDTO.Тип("urn:x-obml:1.0","CMSDETACHED");
	Message = ФабрикаXDTO.Создать(ТипMessage);
	ТипData = ТипMessage.Свойства[0].Тип;
	Data = ФабрикаXDTO.Создать(ТипData);
	Data.ContentType = "application/xml";
	Data.__content = Данные;
	Message.data = Data;
		
	Для Каждого СтрокаПодписи ИЗ ЭД.ЭлектронныеЦифровыеПодписи Цикл
		Message.signature.Добавить(СтрокаПодписи.Подпись.Получить());
	КонецЦикла;
	
	ПутьКФайлуОтправки = ПолучитьИмяВременногоФайла("xml");
	Запись = Новый ЗаписьXML;
	Запись.ОткрытьФайл(ПутьКФайлуОтправки);
	Запись.ЗаписатьОбъявлениеXML();

	ФабрикаXDTO.ЗаписатьXML(Запись,Message,"signed",URI,,НазначениеТипаXML.Явное);
	
	Запись.Закрыть();
				
	ВидЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭД, "ВидЭД");

	Если ВидЭД = Перечисления.ВидыЭД.ПлатежноеПоручение Тогда
		Настройки.Вставить("Ресурс", РеквизитыСоглашения.РесурсИсходящихДокументов);
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ЗапросВыписки Тогда
		Настройки.Вставить("Ресурс", РеквизитыСоглашения.РесурсВходящихДокументов);
	КонецЕсли;
		
	ПоместитьПакетЭДВКонверт(Конверт, ПутьКФайлуОтправки);
	
	УдалитьФайлы(ПутьКФайлуОтправки);
	
КонецПроцедуры

Процедура ОпределитьПараметрыСайта(Знач АдресСайта, ЗащищенноеСоединение, Адрес, Протокол)
	
	АдресСайта = СокрЛП(АдресСайта);
	
	АдресСайта = СтрЗаменить(АдресСайта, "\", "/");
	АдресСайта = СтрЗаменить(АдресСайта, " ", "");
		
	Если НРег(Лев(АдресСайта, 7)) = "http://" Тогда
		Протокол = "http";
		Адрес = Сред(АдресСайта, 8);
		ЗащищенноеСоединение = ложь;
	ИначеЕсли НРег(Лев(АдресСайта, 8)) = "https://" Тогда
		Протокол = "https";
		Адрес = Сред(АдресСайта, 9);
		ЗащищенноеСоединение = истина;
	КонецЕсли;
			
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обмен через каталог

Функция СоздатьПрисоединенныйДопФайл(СтруктураПараметров, ЭДВладелец)
	
	ДопЭДСоздан = Ложь;
	ПолноеИмяФайла = СтруктураПараметров.ПолноеИмяДопФайла;
	
	Если ЗначениеЗаполнено(ПолноеИмяФайла) Тогда
		
		ВремяСозданияЭД = СтруктураПараметров.СтруктураЭД.ДатаЭД;
		ВладелецЭД = СтруктураПараметров.СтруктураЭД.ВладелецЭД;
		Файл = Новый Файл(ПолноеИмяФайла);
		ДвоичныеДанные = Новый ДвоичныеДанные(Файл.ПолноеИмя);
		АдресФайла = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
		
		УникальныйИдентификаторЭД = "";
		СтруктураПараметров.Свойство("ИдентификаторДопФайла", УникальныйИдентификаторЭД);
		
		ДобавленныйФайл = ПрисоединенныеФайлы.ДобавитьФайл(
													ВладелецЭД,
													Файл.ИмяБезРасширения,
													СтрЗаменить(Файл.Расширение, ".", ""),
													ВремяСозданияЭД,
													ВремяСозданияЭД,
													АдресФайла,
													Неопределено,
													,
													Справочники.ЭДПрисоединенныеФайлы.ПолучитьСсылку(УникальныйИдентификаторЭД));
		
		УдалитьФайлы(ПолноеИмяФайла);
		Если ЗначениеЗаполнено(ДобавленныйФайл) Тогда
			ДопЭДСоздан = Истина;
			ВспомогательнаяСтруктура = Новый Структура;
			ВспомогательнаяСтруктура.Вставить("ВидЭД", Перечисления.ВидыЭД.ДопДанные);
			ВспомогательнаяСтруктура.Вставить("Организация", СтруктураПараметров.СтруктураЭД.Организация);
			ВспомогательнаяСтруктура.Вставить("Контрагент", СтруктураПараметров.СтруктураЭД.Контрагент);
			ВспомогательнаяСтруктура.Вставить("ВладелецЭД", ВладелецЭД);
			ВспомогательнаяСтруктура.Вставить("СоглашениеЭД", СтруктураПараметров.СтруктураЭД.СоглашениеЭД);
			ВспомогательнаяСтруктура.Вставить("НомерЭД", СтруктураПараметров.СтруктураЭД.НомерЭД);
			ВспомогательнаяСтруктура.Вставить("УникальныйИД", СтруктураПараметров.УникальныйИдентификатор);
			ВспомогательнаяСтруктура.Вставить("НаправлениеЭД", Перечисления.НаправленияЭД.Исходящий);
			ВспомогательнаяСтруктура.Вставить("ТипЭлементаВерсииЭД", Перечисления.ТипыЭлементовВерсииЭД.ДополнительныйЭД);
			ВспомогательнаяСтруктура.Вставить("ЭлектронныйДокументВладелец", ЭДВладелец);
			ВспомогательнаяСтруктура.Вставить("НаименованиеФайла", Файл.ИмяБезРасширения);
			ВспомогательнаяСтруктура.Вставить("СтатусЭД", Перечисления.СтатусыЭД.Сформирован);
			
			ДатаФормированияЭДОтправителем = "";
			Если НЕ СтруктураПараметров.СтруктураЭД.Свойство("ДатаФормированияЭДОтправителем", ДатаФормированияЭДОтправителем) Тогда
				ДатаФормированияЭДОтправителем = ВремяСозданияЭД;
			КонецЕсли;
			ВспомогательнаяСтруктура.Вставить("ДатаФормированияЭДОтправителем", ДатаФормированияЭДОтправителем);
			
			ИзменитьПоСсылкеПрисоединенныйФайл(ДобавленныйФайл, ВспомогательнаяСтруктура);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ДопЭДСоздан;
	
КонецФункции

Функция ПреобразоватьДатуВКаноническийВид(ИскомаяДата)
	
	Если ТипЗнч(ИскомаяДата) = Тип("Дата") Тогда
		
		ДатаКаноническогоВида = Формат(Год(ИскомаяДата),"ЧГ=0") + Формат(Месяц(ИскомаяДата), "ЧЦ=2; ЧВН=")
			+ Формат(День(ИскомаяДата), "ЧЦ=2; ЧВН=") + Формат(Час(ИскомаяДата), "ЧЦ=2; ЧН=; ЧВН=")
			+ Формат(Минута(ИскомаяДата), "ЧЦ=2; ЧН=; ЧВН=") + Формат(Секунда(ИскомаяДата), "ЧЦ=2; ЧН=; ЧВН=");
	Иначе
		ДатаКаноническогоВида = ИскомаяДата;
	КонецЕсли;
	
	Возврат ДатаКаноническогоВида;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обмен через FTP

Процедура ПроверитьФайл(ШаблонСообщения, FTPСоединение, ТекстОшибки)
	
	ВремФайл = ПолучитьИмяВременногоФайла();
	ТекстовыйДокумент = Новый ТекстовыйДокумент();
	ТестоваяСтрока = "Тестовая строка 1С: Предприятие";
	ТекстовыйДокумент.УстановитьТекст(ТестоваяСтрока);
	ТекстовыйДокумент.Записать(ВремФайл);
	ФайлТест = Новый Файл(ВремФайл);
		
	ЗаписатьФайлНаFTP(FTPСоединение, ВремФайл, ФайлТест.Имя, Истина, ТекстОшибки);
	
	УдалитьФайлы(ВремФайл);

	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		Возврат;
	КонецЕсли;
	
	ФайлПолучатель = ПолучитьИмяВременногоФайла();
	
	ПолучитьФайлСFTP(FTPСоединение, ФайлТест.Имя, ФайлПолучатель, Истина, ТекстОшибки);
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		Возврат;
	КонецЕсли;
		
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.Прочитать(ФайлПолучатель);
	СтрокаРезультата = ТекстовыйДокумент.ПолучитьТекст();
	УдалитьФайлы(ФайлПолучатель);
	Если НЕ СтрокаРезультата = ТестоваяСтрока Тогда
		ШаблонСообщения = НСтр("ru = '%1 %2.'");
		ТекстСообщения = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьСообщениеОбОшибке("126");
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ТекстСообщения,
			FTPСоединение.ТекущийКаталог());
		Возврат;
	КонецЕсли;
	
	УдалитьФайлFTP(FTPСоединение, ФайлТест.Имя, Истина, ТекстОшибки);
	
КонецПроцедуры

Процедура НайтиФайлыВКаталогеFTP(FTPСоединение, Путь, Маска, ЭтоТест, РезультатТеста, МассивФайлов)
	
	Попытка
		Если Маска = Неопределено Тогда
			МассивФайлов = FTPСоединение.НайтиФайлы(Путь);
		Иначе
			МассивФайлов = FTPСоединение.НайтиФайлы(Путь, Маска);
		КонецЕсли;
	Исключение
		РезультатТеста = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьСообщениеОбОшибке("125");
		
		Если НЕ ЭтоТест = Истина Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатТеста);
		КонецЕсли;
	КонецПопытки;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработка электронных документов

Процедура ОбработатьУдалениеЭлектронногоДокумента(СсылкаНаОбъект)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если НЕ ЭлектронныеДокументыСлужебныйВызовСервера.ЭтоСлужебныйДокумент(СсылкаНаОбъект) Тогда
		ЗапросДокументовИБ = Новый Запрос;
		ЗапросДокументовИБ.УстановитьПараметр("ЭлектронныйДокумент", СсылкаНаОбъект);
		ЗапросДокументовИБ.Текст =
		"ВЫБРАТЬ
		|	СостоянияЭД.СсылкаНаОбъект
		|ИЗ
		|	РегистрСведений.СостоянияЭД КАК СостоянияЭД
		|ГДЕ
		|	СостоянияЭД.ЭлектронныйДокумент = &ЭлектронныйДокумент";
		
		ВыборкаДокументов = ЗапросДокументовИБ.Выполнить().Выбрать();
		Пока ВыборкаДокументов.Следующий() Цикл
			НаборЗаписей = РегистрыСведений.СостоянияЭД.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.СсылкаНаОбъект.Установить(ВыборкаДокументов.СсылкаНаОбъект);
			НаборЗаписей.Прочитать();
			
			Если НаборЗаписей.Количество() = 0 Тогда
				Продолжить;
			Иначе
				НоваяЗаписьНабора = НаборЗаписей.Получить(0);
			КонецЕсли;
			НоваяЗаписьНабора.СостояниеВерсииЭД   = ПолучитьПервоеСостояниеВерсииЭДДляВладельца(ВыборкаДокументов.СсылкаНаОбъект);
			НоваяЗаписьНабора.ЭлектронныйДокумент = Справочники.ЭДПрисоединенныеФайлы.ПустаяСсылка();
			НаборЗаписей.Записать();
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа с журналом регистрации

// Записывает в журнал регистрации событие записи ЭД.
//
// Параметры:
//  СсылкаНаЭД - ссылка на элемент справочника ЭДПрисоединенныеФайлы.
//
Процедура ЗаписатьСобытиеЖурналаРегистрацииПоОбменуЭД(СсылкаНаЭД)
	
	Если ТипЗнч(СсылкаНаЭД) = Тип("СправочникСсылка.ЭДПрисоединенныеФайлы") Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		
		НачатьТранзакцию();
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ЖурналСобытийЭД");
		ЭлементБлокировки.УстановитьЗначение("ПрисоединенныйФайл", СсылкаНаЭД);
		Блокировка.Заблокировать();
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ЕСТЬNULL(МАКСИМУМ(ЖурналСобытийЭД.НомерЗаписи), 0) + 1 КАК НомерЗаписи
		|ИЗ
		|	РегистрСведений.ЖурналСобытийЭД КАК ЖурналСобытийЭД
		|ГДЕ
		|	ЖурналСобытийЭД.ПрисоединенныйФайл = &ПрисоединенныйФайл";
		Запрос.УстановитьПараметр("ПрисоединенныйФайл", СсылкаНаЭД);
		НомерЗаписи = Запрос.Выполнить().Выгрузить()[0].НомерЗаписи;
		
		МенеджерЗаписи                    = РегистрыСведений.ЖурналСобытийЭД.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.ПрисоединенныйФайл = СсылкаНаЭД;
		МенеджерЗаписи.НомерЗаписи        = НомерЗаписи;
		МенеджерЗаписи.ВладелецЭД         = СсылкаНаЭД.ВладелецФайла;
		МенеджерЗаписи.СтатусЭД           = СсылкаНаЭД.СтатусЭД;
		МенеджерЗаписи.Дата               = ТекущаяДатаСеанса();
		МенеджерЗаписи.Пользователь       = ПараметрыСеанса.ТекущийПользователь;
		МенеджерЗаписи.Ответственный      = СсылкаНаЭД.Ответственный;
		МенеджерЗаписи.Комментарий        = СсылкаНаЭД.Описание;
		МенеджерЗаписи.Записать();
		
		ЗафиксироватьТранзакцию();
		
	КонецЕсли;
	
КонецПроцедуры


// Получает фактическую дату установки электронной подписи и двоичных данных подписи
//
// Параметры:
//  ДвоичныеДанныеПодписи - ДвоичныеДанные - подпись
//
// Возвращаемое значение - Дата или Неопределено.
//
Функция ДатаУстановкиПодписи(ДвоичныеДанныеПодписи) Экспорт
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
	ДвоичныеДанныеПодписи.Записать(ИмяВременногоФайла);
	ЧтениеТекста = Новый ЧтениеТекста(ИмяВременногоФайла);
	Символ = ЧтениеТекста.Прочитать(1);
	Пока Символ <> Неопределено Цикл
		Если КодСимвола(Символ) = 15 Тогда
			Символ = ЧтениеТекста.Прочитать(2);
			Если КодСимвола(Символ, 1) = 23 И КодСимвола(Символ, 2) = 13 Тогда
				ДатаПодписания = ЧтениеТекста.Прочитать(12);
				ДатаПодписиНайдена = Истина;
				ЧтениеТекста.Закрыть();
				УдалитьФайлы(ИмяВременногоФайла);
				Возврат МестноеВремя(Дата("20" + ДатаПодписания));
			КонецЕсли;
		КонецЕсли;
		Символ = ЧтениеТекста.Прочитать(1);
	КонецЦикла;
	
	ЧтениеТекста.Закрыть();
	УдалитьФайлы(ИмяВременногоФайла);
	Возврат Неопределено;

КонецФункции

// Только для внутреннего использования
Функция СлужебныйЭДБанка(ЭД) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	ЭДПрисоединенныеФайлы.Ссылка
	               |ИЗ
	               |	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	               |ГДЕ
	               |	ЭДПрисоединенныеФайлы.ЭлектронныйДокументВладелец = &ЭлектронныйДокументВладелец
	               |	И ЭДПрисоединенныеФайлы.ВидЭД = ЗНАЧЕНИЕ(перечисление.ВидыЭД.ДопДанные)";
	Запрос.УстановитьПараметр("ЭлектронныйДокументВладелец", ЭД);
	Результат = Запрос.Выполнить().Выбрать();
	Если Результат.Следующий() Тогда
		Возврат Результат.Ссылка;
	КонецЕсли
	
КонецФункции

// Возвращает ссылку на временное хранилище двоичных данных архива с дополнительными файлами каталога.
//
// Параметры:
//  МассивФайлов - массив - содержить ссылки на временное хранилище дополнительного файла.
//
// Возвращаемое значение:
//  Строка - ссылка на временное хранилище
//
Функция АрхивДополнительныхФайлов(МассивФайлов) Экспорт
	
	ВремПапка = ЭлектронныеДокументыСлужебныйВызовСервера.ТекущийКаталогВременныхФайлов()
				+ Строка(Новый УникальныйИдентификатор) + "\";
	СоздатьКаталог(ВремПапка);
	УдалитьФайлы(ВремПапка, "*");
	Для Каждого Элемент Из МассивФайлов Цикл
		ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(Элемент.АдресВременногоХранилища);
		СоздатьКаталог(ВремПапка + Элемент.ИдТовара + "\");
		ДвоичныеДанныеФайла.Записать(ВремПапка + Элемент.ИдТовара + "\" + Элемент.ИмяФайла);
	КонецЦикла;
	Архив = ПолучитьИмяВременногоФайла();
	Zip = Новый ЗаписьZipФайла(Архив);
	Zip.Добавить(
			ВремПапка + "*",
			РежимСохраненияПутейZIP.СохранятьОтносительныеПути,
			РежимОбработкиПодкаталоговZIP.ОбрабатыватьРекурсивно);
	Попытка
		Zip.Записать();
	Исключение
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке())
			+ НСтр("ru = ' (подробности см. в Журнале регистрации).'");
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()) + Символы.ПС
			+ НСтр("ru = 'Проверьте поддержку русского языка в региональных настройках ОС для non-Unicode programs
			|и наличие доступа к каталогу временных файлов.'");
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'запись файла архива на диск'"),
																					ТекстОшибки,
																					ТекстСообщения);
		УдалитьФайлы(Архив);
		УдалитьФайлы(ВремПапка);
		Возврат Неопределено;
	КонецПопытки;
	ДвоичныеДанныеАрхива = Новый ДвоичныеДанные(Архив);
	УдалитьФайлы(ВремПапка);
	УдалитьФайлы(Архив);
	Возврат ПоместитьВоВременноеХранилище(ДвоичныеДанныеАрхива);
	
КонецФункции

// Формирует хэш для авторизации на ресурсе банка
//
// Параметры
//  Логин  - Строка - логин
//  Пароль  - Строка - пароль
//
// Возвращаемое значение:
//   Строка   - хэш авторизации
//
Функция ХэшАвторизации(Логин, Пароль) Экспорт
	
	ВремФайл = ПолучитьИмяВременногоФайла();
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.УстановитьТекст(Логин + ":" + Пароль);
	ТекстовыйДокумент.Записать(ВремФайл, КодировкаТекста.ANSI);
	ДвоичныеДанные = Новый ДвоичныеДанные(ВремФайл);
	УдалитьФайлы(ВремФайл);
	Возврат Base64Строка(ДвоичныеДанные);
	
КонецФункции

Функция ВерсияПакетаЭД(ЭД) Экспорт
	
	Если ТипЗнч(ЭД.ВладелецФайла) = Тип("ДокументСсылка.ЭлектронныйДокументВходящий") Тогда
		
		ВерсияФормата = ФорматПакетаЭД(ЭД.Ссылка);
		
	Иначе
		
		Если ЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ТОРГ12Покупатель
			Или ЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.АктЗаказчик
			Или ЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.СоглашениеОбИзмененииСтоимостиПолучатель Тогда
			
			ВерсияФормата = ФорматПакетаЭД(ЭД.ЭлектронныйДокументВладелец);
			
		Иначе
			
			НастройкаЭДО  = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭД.ВладелецФайла, "НастройкаЭДО");
			ВерсияФормата = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НастройкаЭДО,     "ВерсияФорматаПакета");
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ВерсияФормата;
	
КонецФункции

Функция ФорматПакетаЭД(ЭД)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Пакет.Ссылка.ВерсияФорматаПакета КАК Версия
	|ИЗ
	|	Документ.ПакетЭД.ЭлектронныеДокументы КАК Пакет
	|ГДЕ
	|	Пакет.ЭлектронныйДокумент = &ЭлектронныйДокумент";
	
	Запрос.УстановитьПараметр("ЭлектронныйДокумент", ЭД);
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		ВерсияФормата = Неопределено;
	Иначе
		
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		
		ВерсияФормата = Выборка.Версия;
		
	КонецЕсли;
	
	Возврат ВерсияФормата;
	
КонецФункции

Функция ВерсияФорматаИзСтроки(Версия)
	Если Версия = "2" Тогда
		Результат = Перечисления.ВерсииФорматаПакетаЭД.Версия20;
	ИначеЕсли Версия = "3" Тогда
		Результат = Перечисления.ВерсииФорматаПакетаЭД.Версия30;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ЭтоФНС(ВидЭД) Экспорт
	
	Если ВидЭД = Перечисления.ВидыЭД.ТОРГ12
		Или ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель
		Или ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец
		Или ВидЭД = Перечисления.ВидыЭД.АктЗаказчик
		Или ВидЭД = Перечисления.ВидыЭД.АктИсполнитель
		Или ВидЭД = Перечисления.ВидыЭД.АктНаПередачуПрав
		Или ВидЭД = Перечисления.ВидыЭД.СчетФактура
		Или ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура
		Или ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель
		Или ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель
		Или ВидЭД = Перечисления.ВидыЭД.АктОРасхождениях Тогда
		Результат = Истина;
	Иначе
		Результат = Ложь;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Функция определяет отправлено ли подтверждение о доставке
// для документов ФНС
Функция ЕстьНеотправленноеПодтверждение(ВладелецФайла, СостояниеЭД) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЭДПрисоединенныеФайлы.СтатусЭД,
	|	ЭДПрисоединенныеФайлы.ПодписанЭЦП,
	|	ЕСТЬNULL(ЭДПрисоединенныеФайлы.ЭлектронныйДокументВладелец.ПодписанЭЦП, ЛОЖЬ) КАК ВладелецПодписанЭЦП
	|ИЗ
	|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	|ГДЕ
	|	ЭДПрисоединенныеФайлы.ВладелецФайла = &ВладелецФайла
	|	И ЭДПрисоединенныеФайлы.ВидЭД = &ВидЭД
	|	И ЭДПрисоединенныеФайлы.СтатусЭД В(&СтатусыНеотправленногоЭД)";
	
	СтатусыНеотправленногоЭД = Новый Массив;
	СтатусыНеотправленногоЭД.Добавить(Перечисления.СтатусыЭД.Утвержден);
	СтатусыНеотправленногоЭД.Добавить(Перечисления.СтатусыЭД.Подписан);
	СтатусыНеотправленногоЭД.Добавить(Перечисления.СтатусыЭД.ПодготовленКОтправке);
	
	Запрос.УстановитьПараметр("СтатусыНеотправленногоЭД", СтатусыНеотправленногоЭД);
	Запрос.УстановитьПараметр("ВидЭД", Перечисления.ВидыЭД.ИзвещениеОПолучении);
	Запрос.УстановитьПараметр("ВладелецФайла", ВладелецФайла);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	Если Выборка.СтатусЭД = Перечисления.СтатусыЭД.Утвержден Тогда
		СостояниеЭД = Перечисления.СостоянияВерсийЭД.ИзвещениеНаПодписи;
	ИначеЕсли Выборка.СтатусЭД = Перечисления.СтатусыЭД.Подписан Тогда
		
		Если Выборка.ВладелецПодписанЭЦП И Не Выборка.ПодписанЭЦП Тогда
			СостояниеЭД = Перечисления.СостоянияВерсийЭД.ИзвещениеНаПодписи;
		Иначе
			СостояниеЭД = Перечисления.СостоянияВерсийЭД.ОжидаетсяОтправкаИзвещения;
		КонецЕсли;
	ИначеЕсли Выборка.СтатусЭД = Перечисления.СтатусыЭД.ПодготовленКОтправке Тогда
		СостояниеЭД = Перечисления.СостоянияВерсийЭД.ОжидаетсяОтправкаИзвещения;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Функция определяет есть ли подтверждение о доставке
// для документов ФНС
Функция ЕстьНепринятоеПодтверждение(ВладелецФайла, СостояниеЭД) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЭДПрисоединенныеФайлы.Ссылка
	|ИЗ
	|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	|ГДЕ
	|	ЭДПрисоединенныеФайлы.ВладелецФайла = &ВладелецФайла
	|	И ЭДПрисоединенныеФайлы.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.ИзвещениеОПолучении)";
	Запрос.УстановитьПараметр("ВладелецФайла", ВладелецФайла);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		СостояниеЭД = Перечисления.СостоянияВерсийЭД.ОбменЗавершен;
		Возврат Истина;
	КонецЕсли;
	
	
	Возврат Ложь;
	
КонецФункции

Функция ЭтоСчетНаОплату(СсылкаНаЭД)
	
	Результат = Ложь;
	ВидЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаЭД, "ВидЭД");
	
	Если ВидЭД = Перечисления.ВидыЭД.СчетНаОплату Тогда
		Результат = Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ЭтоCMLДокумент(СсылкаНаЭД)
	
	Результат = Ложь;
	ВидЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаЭД, "ВидЭД");
	
	Если ВидЭД = Перечисления.ВидыЭД.СчетНаОплату
		Или ВидЭД = Перечисления.ВидыЭД.ЗаказТовара
		Или ВидЭД = Перечисления.ВидыЭД.ОтветНаЗаказ
		Или ВидЭД = Перечисления.ВидыЭД.ПрайсЛист
		Или ВидЭД = Перечисления.ВидыЭД.ОтчетОПродажахКомиссионногоТовара
		Или ВидЭД = Перечисления.ВидыЭД.ОтчетОСписанииКомиссионногоТовара
		Или ВидЭД = Перечисления.ВидыЭД.КаталогТоваров Тогда
		
		Результат = Истина;
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

// Определяет является ли ЭД титулом.
Функция ЭтоТитулФНС(ДанныеЭД) Экспорт
	
	Результат = Ложь;
	Если ТипЗнч(ДанныеЭД) = Тип("ДокументСсылка.ЭлектронныйДокументВходящий") 
		ИЛИ ТипЗнч(ДанныеЭД) = Тип("ДокументСсылка.ЭлектронныйДокументИсходящий") Тогда
		РеквизитыЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеЭД, "ВидЭД, ТипЭлементаВерсииЭД");
	Иначе
		РеквизитыЭД = Новый Структура("ВидЭД, ТипЭлементаВерсииЭД", ДанныеЭД.ВидЭД, ДанныеЭД.ТипЭлементаВерсииЭД);
	КонецЕсли;
	
	Если РеквизитыЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец
		Или РеквизитыЭД.ВидЭД = Перечисления.ВидыЭД.АктИсполнитель
		Или РеквизитыЭД.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель
		Или (РеквизитыЭД.ВидЭД = Перечисления.ВидыЭД.АктНаПередачуПрав
				И РеквизитыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДОПУПД)
		ИЛИ ((РеквизитыЭД.ВидЭД = Перечисления.ВидыЭД.СчетФактура
			ИЛИ РеквизитыЭД.ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура)
			И (РеквизитыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.СЧФДОПУПД
			ИЛИ РеквизитыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.КСЧФДИСУКД)) Тогда
			
		Результат = Истина;
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

// Определяет является ли ЭД ответным титулом.
Функция ЭтоОтветныйТитул(ДанныеЭД) Экспорт
	
	Результат = Ложь;
	
	Если ТипЗнч(ДанныеЭД) = Тип("СправочникСсылка.ЭДПрисоединенныеФайлы") Тогда
		ТипЭлементаВерсииЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеЭД, "ТипЭлементаВерсииЭД");
	Иначе
		ТипЭлементаВерсииЭД = ДанныеЭД;
	КонецЕсли;
	
	Если ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИнформацияПокупателяУПД
		ИЛИ ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИнформацияПокупателяУКД
		ИЛИ ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ТОРГ12Покупатель
		Или ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.АктЗаказчик
		Или ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.СоглашениеОбИзмененииСтоимостиПолучатель Тогда
		Результат = Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает ответный титул.
//
Функция ВторойТитулДокумента(ПервыйТитул) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЭДПрисоединенныеФайлы.Ссылка КАК ВторойТитул
	|ИЗ
	|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	|ГДЕ
	|	ЭДПрисоединенныеФайлы.ЭлектронныйДокументВладелец = &ЭлектронныйДокументВладелец
	|	И ЭДПрисоединенныеФайлы.ТипЭлементаВерсииЭД В (&МассивТиповТитулов)";
	
	МассивТиповТитулов = Новый Массив;
	МассивТиповТитулов.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ИнформацияПокупателяУПД);
	МассивТиповТитулов.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ИнформацияПокупателяУКД);
	МассивТиповТитулов.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ТОРГ12Покупатель);
	МассивТиповТитулов.Добавить(Перечисления.ТипыЭлементовВерсииЭД.АктЗаказчик);
	МассивТиповТитулов.Добавить(Перечисления.ТипыЭлементовВерсииЭД.СоглашениеОбИзмененииСтоимостиПолучатель);
	
	Запрос.УстановитьПараметр("МассивТиповТитулов",          МассивТиповТитулов);
	Запрос.УстановитьПараметр("ЭлектронныйДокументВладелец", ПервыйТитул);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		ВторойТитул = Неопределено;
		
	Иначе
		
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		
		ВторойТитул = Выборка.ВторойТитул;
		
	КонецЕсли;
	
	Возврат ВторойТитул
	
КонецФункции

// Проверяет является ли ЭД банковским
Функция ЭтоБанковскийЭД(ДанныеЭД) Экспорт
	
	Результат = Ложь;
	Если ТипЗнч(ДанныеЭД) = Тип("СправочникСсылка.ЭДПрисоединенныеФайлы") Тогда
		ВидЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеЭД, "ВидЭД");
	Иначе
		ВидЭД = ДанныеЭД;
	КонецЕсли;
	
	Если ВидЭД = Перечисления.ВидыЭД.ВыпискаБанка
		Или ВидЭД = Перечисления.ВидыЭД.ЗапросВыписки
		Или ВидЭД = Перечисления.ВидыЭД.ЗапросНочнойВыписки
		Или ВидЭД = Перечисления.ВидыЭД.Квитанция
		Или ВидЭД = Перечисления.ВидыЭД.ПлатежноеПоручение Тогда
		Результат = Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Прочие

Функция ВерсияСхемыФНС_2016() Экспорт
	Возврат "ФНС 5.01 (с 2016г.)";
КонецФункции

Функция ВерсияСхемыФНС_2015() Экспорт
	Возврат "ФНС 5.01";
КонецФункции

Функция ВерсияСхемыФНС_СФ() Экспорт
	Возврат "ФНС 5.02";
КонецФункции

Процедура ДополнитьПараметрыЭД(ДокументИБ, ПараметрыЭД)
	
	Если Не ОбщегоНазначения.ЭтоСсылка(ТипЗнч(ДокументИБ)) Тогда
		СсылкаНаОбъект = ДокументИБ.Ссылка;
	Иначе
		СсылкаНаОбъект = ДокументИБ
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СостоянияЭД.ЭлектронныйДокумент КАК ЭД
	|ИЗ
	|	РегистрСведений.СостоянияЭД КАК СостоянияЭД
	|ГДЕ
	|	СостоянияЭД.СсылкаНаОбъект = &СсылкаНаОбъект";
	Запрос.УстановитьПараметр("СсылкаНаОбъект", СсылкаНаОбъект);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	
	ЭД = Выборка.ЭД;
	СвойстваЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЭД, "Организация, Контрагент");
	
	ПараметрыЭД.Контрагент = СвойстваЭД.Контрагент;
	ПараметрыЭД.Организация = СвойстваЭД.Организация;
	
КонецПроцедуры

// Добавление нового параметра в ПараметрыКлиентаНаСервере.
//
// Параметры:
//  ИмяПараметра      - Произвольный - имя добавляемого параметра.
//  ЗначениеПараметра - Произвольный - значение добавляемого параметра.
//
Процедура ПоместитьПараметрВПараметрыКлиентаНаСервере(ИмяПараметра, ЗначениеПараметра) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ПараметрыКлиентаНаСервере = ОбщегоНазначенияКлиентСервер.СкопироватьСоответствие(ПараметрыСеанса.ПараметрыКлиентаНаСервере);
	
	ПараметрыОбменСКонтрагентами = ПараметрыКлиентаНаСервере.Получить("ОбменСКонтрагентами");
	Если ПараметрыОбменСКонтрагентами = Неопределено ИЛИ ТипЗнч(ПараметрыОбменСКонтрагентами) <> Тип("ФиксированноеСоответствие") Тогда
		// Параметр еще не установлен.
		ПараметрыОбменСКонтрагентами = Новый Соответствие;
	Иначе
		ПараметрыОбменСКонтрагентами = ОбщегоНазначенияКлиентСервер.СкопироватьСоответствие(ПараметрыОбменСКонтрагентами);
	КонецЕсли;
	
	ПараметрыОбменСКонтрагентами.Вставить(ИмяПараметра, ПреобразоватьКоллекциюЗначенийВФиксированную(ЗначениеПараметра));
	ПараметрыКлиентаНаСервере.Вставить("ОбменСКонтрагентами", Новый ФиксированноеСоответствие(ПараметрыОбменСКонтрагентами));
	ПараметрыСеанса.ПараметрыКлиентаНаСервере = Новый ФиксированноеСоответствие(ПараметрыКлиентаНаСервере);
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Получение хранящегося в ПараметрыКлиентаНаСервере параметра.
//
// Параметры:
//   ИмяПараметра                  - Произвольный - имя добавляемого параметра.
//   УдалитьПараметрПослеПолучения - Булево - признак необходимости удаления параметра из ПараметрыКлиентаНаСервере,
//                                  после получения значения.
//
// Возвращаемое значение:
//   Произвольный, Неопределено - хранимое в параметре значение, если параметра с таким именем нет, то неопределено.
//
Функция ПараметрИзПараметрыКлиентаНаСервере(ИмяПараметра, УдалитьПараметрПослеПолучения = Истина) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ПараметрыКлиентаНаСервере = ОбщегоНазначенияКлиентСервер.СкопироватьСоответствие(ПараметрыСеанса.ПараметрыКлиентаНаСервере);
	
	ЗначениеПараметра = Неопределено;
	
	ПараметрыОбменСКонтрагентами = ПараметрыКлиентаНаСервере.Получить("ОбменСКонтрагентами");
	Если ТипЗнч(ПараметрыОбменСКонтрагентами) = Тип("ФиксированноеСоответствие") Тогда
		ЗначениеПараметра = ПараметрыОбменСКонтрагентами.Получить(ИмяПараметра);
		Если ЗначениеПараметра <> Неопределено Тогда
			ЗначениеПараметра = ПреобразоватьФиксированнуюКоллекциюЗначенийВПростую(ЗначениеПараметра);
			Если УдалитьПараметрПослеПолучения И ЗначениеПараметра <> Неопределено Тогда
				ПараметрыОбменСКонтрагентами = ОбщегоНазначенияКлиентСервер.СкопироватьСоответствие(ПараметрыОбменСКонтрагентами);
				ПараметрыОбменСКонтрагентами.Удалить(ИмяПараметра);
				ПараметрыКлиентаНаСервере.Вставить("ОбменСКонтрагентами", Новый ФиксированноеСоответствие(ПараметрыОбменСКонтрагентами));
				ПараметрыСеанса.ПараметрыКлиентаНаСервере = Новый ФиксированноеСоответствие(ПараметрыКлиентаНаСервере);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ЗначениеПараметра;
	
КонецФункции

Функция ПреобразоватьКоллекциюЗначенийВФиксированную(ЗначениеПараметра)
	
	Если ТипЗнч(ЗначениеПараметра) = Тип("Соответствие") Тогда
		ВозвращаемоеЗначение = Новый ФиксированноеСоответствие(ЗначениеПараметра);
	ИначеЕсли ТипЗнч(ЗначениеПараметра) = Тип("Структура") Тогда
		ВозвращаемоеЗначение = Новый ФиксированнаяСтруктура(ЗначениеПараметра);
	ИначеЕсли ТипЗнч(ЗначениеПараметра) = Тип("Массив") Тогда
		ВозвращаемоеЗначение = Новый ФиксированныйМассив(ЗначениеПараметра);
	Иначе
		ВозвращаемоеЗначение = ЗначениеПараметра;
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ПреобразоватьФиксированнуюКоллекциюЗначенийВПростую(ЗначениеПараметра)
	
	Если ТипЗнч(ЗначениеПараметра) = Тип("ФиксированноеСоответствие") Тогда
		ВозвращаемоеЗначение = ОбщегоНазначенияКлиентСервер.СкопироватьСоответствие(ЗначениеПараметра);
	ИначеЕсли ТипЗнч(ЗначениеПараметра) = Тип("ФиксированнаяСтруктура") Тогда
		ВозвращаемоеЗначение = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ЗначениеПараметра);
	ИначеЕсли ТипЗнч(ЗначениеПараметра) = Тип("ФиксированныйМассив") Тогда
		ВозвращаемоеЗначение = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(ЗначениеПараметра);
	Иначе
		ВозвращаемоеЗначение = ЗначениеПараметра;
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция СформироватьДопДокумент(СтруктураОбмена, ОписаниеФормата)  Экспорт
	
	ФайлИсходногоДокумента = Новый Файл(СтруктураОбмена.ПолноеИмяФайла);
	ИмяИсходногоДокумента = ФайлИсходногоДокумента.ИмяБезРасширения;
	
	ПолноеИмяДопФайла = Неопределено;
	СтруктураОбмена.Свойство("ПолноеИмяДопФайла", ПолноеИмяДопФайла);
	
	
	ТабличныйДокумент = ЭлектронныеДокументыВнутренний.СформироватьПечатнуюФормуЭД(
		СтруктураОбмена.ПолноеИмяФайла,
		СтруктураОбмена.СтруктураЭД.НаправлениеЭД
		,
		,
		,
		,
		ПолноеИмяДопФайла);
		
	Если ТабличныйДокумент <> Неопределено Тогда
		СтруктураОбработкиДопФайла = ОпределитьТипСохраненияПоПеречислению(ОписаниеФормата);
		
		ФайлСохранения = ФайлИсходногоДокумента.Путь + ИмяИсходногоДокумента +"."
			+ СтруктураОбработкиДопФайла.ПредставлениеРасширения;
		
		ТабличныйДокумент.Записать(ФайлСохранения,СтруктураОбработкиДопФайла.ПредставлениеТипаСохранения);
	Иначе
		ТекстСообщения = НСтр("ru = 'Не удалось сформировать табличный документ (подробности см. в Журнале регистрации).'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		ФайлСохранения = Неопределено;
	КонецЕсли;
	
	Возврат ФайлСохранения;
	
КонецФункции

Функция ОпределитьТипСохраненияПоПеречислению(ТипСохранения)
	
	СтруктураВозврата = Новый Структура("ПредставлениеРасширения, ПредставлениеТипаСохранения");
	Если ТипСохранения = Перечисления.ФорматыФайловОбменаЭД.DOCX Тогда
		СтруктураВозврата.ПредставлениеРасширения = "docx";
		СтруктураВозврата.ПредставлениеТипаСохранения = ТипФайлаТабличногоДокумента.DOCX;
	ИначеЕсли ТипСохранения = Перечисления.ФорматыФайловОбменаЭД.HTML Тогда
		СтруктураВозврата.ПредставлениеРасширения = "html";
		СтруктураВозврата.ПредставлениеТипаСохранения = ТипФайлаТабличногоДокумента.HTML;
	ИначеЕсли ТипСохранения = Перечисления.ФорматыФайловОбменаЭД.XLS Тогда
		СтруктураВозврата.ПредставлениеРасширения = "xls";
		СтруктураВозврата.ПредставлениеТипаСохранения = ТипФайлаТабличногоДокумента.XLS;
	ИначеЕсли ТипСохранения = Перечисления.ФорматыФайловОбменаЭД.MXL Тогда
		СтруктураВозврата.ПредставлениеРасширения = "mxl";
		СтруктураВозврата.ПредставлениеТипаСохранения = ТипФайлаТабличногоДокумента.MXL;
	ИначеЕсли ТипСохранения = Перечисления.ФорматыФайловОбменаЭД.ODS Тогда
		СтруктураВозврата.ПредставлениеРасширения = "ods";
		СтруктураВозврата.ПредставлениеТипаСохранения = ТипФайлаТабличногоДокумента.ODS;
	ИначеЕсли ТипСохранения = Перечисления.ФорматыФайловОбменаЭД.PDF Тогда
		СтруктураВозврата.ПредставлениеРасширения = "pdf";
		СтруктураВозврата.ПредставлениеТипаСохранения = ТипФайлаТабличногоДокумента.PDF;
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

// Выполняет регламентное задание по проверке в сервисе 1С-ЭДО
// новых электронных документов
//
Процедура ПроверитьНаличиеНовыхЭД() Экспорт
	
	ПроверитьВозможностьВыполненияРегламентногоЗадания(Истина, Ложь, Метаданные.РегламентныеЗадания.НаличиеНовыхЭД.Имя); 
	
	СпособОбмена = Перечисления.СпособыОбменаЭД.ЧерезСервис1СЭДО;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПрофилиНастроекЭДО.ИдентификаторОрганизации КАК ИдентификаторОрганизации
	|ИЗ
	|	Справочник.ПрофилиНастроекЭДО КАК ПрофилиНастроекЭДО
	|ГДЕ
	|	ПрофилиНастроекЭДО.СпособОбменаЭД = &СпособОбменаЭД
	|	И ПрофилиНастроекЭДО.ПометкаУдаления = ЛОЖЬ";
	Запрос.УстановитьПараметр("СпособОбменаЭД", СпособОбмена);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	
	Соединение = ЭлектронныеДокументыВнутренний.ПолучитьСоединение(СпособОбмена, 10);
	
	ИдентификаторыЕстьЭДО = Новый Массив;
	ИдентфикаторыНетЭДО = Новый Массив;
	
	ВидОперации = НСтр("ru = 'Получение информации о новых электронных документах'");
	
	Пока Выборка.Следующий() Цикл
		
		ИдентификаторОрганизации = Выборка.ИдентификаторОрганизации;
		
		Если Не УведомленияПодключены(ИдентификаторОрганизации) Тогда
			ИдентфикаторыНетЭДО.Добавить(ИдентификаторОрганизации);
			Продолжить;
		КонецЕсли;
		
		ИмяМетода = "IsMessagesExists?query=" + Выборка.ИдентификаторОрганизации;
		Запрос = Новый HTTPЗапрос(ИмяМетода);
		
		Попытка
			Ответ = Соединение.Получить(Запрос);
		Исключение
			
			ТекстСообщения = НСтр("ru = 'Ошибка выполнения команды сервиса.'");
			
			ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(
				ВидОперации, ПодробноеПредставлениеОшибки, ТекстСообщения);
				
			Продолжить;
			
		КонецПопытки;
		
		Если Не Ответ.КодСостояния = 200 Тогда
			
			ШаблонСообщения = НСтр("ru = 'Код ответа сервиса %1'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Ответ.КодСостояния);
			
			ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(
				ВидОперации, ТекстСообщения);
			
			Продолжить;
		КонецЕсли;
		
		Результат = Ответ.ПолучитьТелоКакСтроку();
		
		ХМЛ = Новый ЧтениеXML;
		ХМЛ.УстановитьСтроку(Результат);
		ЭДО = ФабрикаXDTO.ПрочитатьXML(ХМЛ);
		
		ЕстьНовыйЭД = ЗначениеСтатуса(ЭДО.Result);
		Если ЕстьНовыйЭД Тогда
			ИдентификаторыЕстьЭДО.Добавить(ИдентификаторОрганизации);
		Иначе
			ИдентфикаторыНетЭДО.Добавить(ИдентификаторОрганизации);
		КонецЕсли;
		
	КонецЦикла;
	
	ОбновитьИдентификаторыЭДО(ИдентификаторыЕстьЭДО);
	ОбновитьИдентификаторыЭДО(ИдентфикаторыНетЭДО, Истина);
	
КонецПроцедуры

Процедура ОбновитьИдентификаторыЭДО(ИдентификаторыЭДО, Удалить = Ложь)
	
	Если ИдентификаторыЭДО.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если Удалить Тогда
		ОчиститьИдентификаторыЭДО(ИдентификаторыЭДО);
	Иначе
		ЗаполнитьИдентификаторыЭДО(ИдентификаторыЭДО);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОчиститьИдентификаторыЭДО(ИдентификаторыЭДО)
	
	Если ИдентификаторыЭДО.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПрофилиНастроекЭДО.Ссылка КАК ПрофильЭДО
	|ИЗ
	|	Справочник.ПрофилиНастроекЭДО КАК ПрофилиНастроекЭДО
	|ГДЕ
	|	ПрофилиНастроекЭДО.ИдентификаторОрганизации В(&ИдентификаторОрганизации)";
	
	Запрос.УстановитьПараметр("ИдентификаторОрганизации", ИдентификаторыЭДО);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	НаборЗаписей = РегистрыСведений.НовыеДокументыВСервисеЭДО.СоздатьНаборЗаписей();
	Пока Выборка.Следующий() Цикл
	
		НаборЗаписей.Отбор.ПрофильЭДО.Установить(Выборка.ПрофильЭДО);
		НаборЗаписей.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьИдентификаторыЭДО(ИдентификаторыЭДО)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПрофилиНастроекЭДО.Ссылка КАК ПрофильЭДО,
	|	ИСТИНА КАК ЕстьНовыеЭД
	|ИЗ
	|	Справочник.ПрофилиНастроекЭДО КАК ПрофилиНастроекЭДО
	|ГДЕ
	|	ПрофилиНастроекЭДО.ИдентификаторОрганизации В(&Идентификаторы)
	|	И ПрофилиНастроекЭДО.ПометкаУдаления = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("Идентификаторы", ИдентификаторыЭДО);
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НаборЗаписей = РегистрыСведений.НовыеДокументыВСервисеЭДО.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ПрофильЭДО.Установить(Выборка.ПрофильЭДО);
		
		НоваяЗапись = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяЗапись, Выборка);
		
		НаборЗаписей.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

// Функция - Уведомления подключены
//
// Параметры:
//  ИдентификаторОрганизации - Строка - Идентификатор организации в сервисе 1С-ЭДО
// 
// Возвращаемое значение:
//  Булево - Состояние уведомлений.
//
Функция УведомленияПодключены(ИдентификаторОрганизации) Экспорт
	
	СпособОбмена = Перечисления.СпособыОбменаЭД.ЧерезСервис1СЭДО;
	Соединение = ЭлектронныеДокументыВнутренний.ПолучитьСоединение(СпособОбмена, 10);
	
	ВидОперации = НСтр("ru = 'Получение информации о состоянии уведомлений'");
	
	ИмяМетода = "CheckSubscriptions/" + ИдентификаторОрганизации;
	Запрос = Новый HTTPЗапрос(ИмяМетода);
	
	УведомленияВключены = Ложь;
	Попытка
		Ответ = Соединение.Получить(Запрос);
	Исключение
		
		ТекстСообщения = НСтр("ru = 'Ошибка выполнения команды сервиса.'");
		
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(
		ВидОперации, ПодробноеПредставлениеОшибки, ТекстСообщения);
		
		Возврат УведомленияВключены;
		
	КонецПопытки;
		
	Если Не Ответ.КодСостояния = 200 Тогда
		
		ШаблонСообщения = НСтр("ru = 'Код ответа сервиса %1'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Ответ.КодСостояния);
		
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(
		ВидОперации, ТекстСообщения);
		
		
		Возврат УведомленияВключены;
	КонецЕсли;
		
	Результат = Ответ.ПолучитьТелоКакСтроку();
	
	УведомленияВключены = ЗначениеСтатуса(Результат);
	
	Возврат УведомленияВключены;
	
КонецФункции

Процедура СформироватьДокумент(ФорматЭлектронногоДокумента, ДеревоРазбора, СтрокаОбъекта, ДокументСсылка, Контрагент, Записывать, ТекстСообщения, Отказ) Экспорт
	
	ЭтоПередачаРабот = Ложь;
	ЭтоПередачаТоваров = Ложь;
	УПДДокументОПередаче = Ложь;
	УКДДокументОбИзмененииСтоимости = Ложь;
	
	ИмяРеквизитаКонтрагент = "Контрагент";
	Если СтрокаОбъекта.ВидЭД = Перечисления.ВидыЭД.АктИсполнитель
		И ВРег(СтрокаОбъекта.ОписаниеОбъекта) = ВРег("ПередачаРезультатовРабот") Тогда
		
		ЭтоПередачаРабот = Истина;
		ИмяРеквизитаКонтрагент = "Заказчик";
		ДанныеВыбранногоКонтрагента = ЭлектронныеДокументыПереопределяемый.ПолучитьДанныеЮрФизЛица(Контрагент);
		Если ТипЗнч(ДанныеВыбранногоКонтрагента) = Тип("Структура") Тогда
			
			ДанныеВыбранногоКонтрагента.Вставить("ЭтоФизЛицо",
				ЭлектронныеДокументыПереопределяемый.ЭтоФизЛицо(Контрагент));

			ЗаполнитьДанныеУчастникаСделки(ДанныеВыбранногоКонтрагента, СтрокаОбъекта.ЗначениеРеквизита, ИмяРеквизитаКонтрагент); 
			
		КонецЕсли;
		
	ИначеЕсли СтрокаОбъекта.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец
		И ВРег(СтрокаОбъекта.ОписаниеОбъекта) = ВРег("ПередачаТоваров") Тогда
		
		ЭтоПередачаТоваров = Истина;
		
		ИмяРеквизитаКонтрагент = "Поставщик";
		ДанныеВыбранногоКонтрагента = ЭлектронныеДокументыПереопределяемый.ПолучитьДанныеЮрФизЛица(Контрагент);
		Если ТипЗнч(ДанныеВыбранногоКонтрагента) = Тип("Структура") Тогда
			
			ДанныеВыбранногоКонтрагента.Вставить("ЭтоФизЛицо",
				ЭлектронныеДокументыПереопределяемый.ЭтоФизЛицо(Контрагент));
				
			ЗаполнитьДанныеУчастникаСделки(ДанныеВыбранногоКонтрагента, СтрокаОбъекта.ЗначениеРеквизита, ИмяРеквизитаКонтрагент);
			
		КонецЕсли;
	ИначеЕсли СтрокаОбъекта.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель
		И СтрокаОбъекта.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДИСУКД Тогда
		
		УКДДокументОбИзмененииСтоимости = Истина;
		
		ИмяРеквизитаКонтрагент = "СведенияОПродавце";
		ДанныеВыбранногоКонтрагента = ЭлектронныеДокументыПереопределяемый.ПолучитьДанныеЮрФизЛица(Контрагент);
		Если ТипЗнч(ДанныеВыбранногоКонтрагента) = Тип("Структура") Тогда
			
			ДанныеВыбранногоКонтрагента.Вставить("ЭтоФизЛицо",
				ЭлектронныеДокументыПереопределяемый.ЭтоФизЛицо(Контрагент));
				
			ЗаполнитьДанныеУчастникаСделкиУПДУКД(ДанныеВыбранногоКонтрагента, СтрокаОбъекта.ЗначениеРеквизита, ИмяРеквизитаКонтрагент);
			
		КонецЕсли;
	ИначеЕсли СтрокаОбъекта.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец
		И СтрокаОбъекта.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДОПУПД Тогда
		
		УПДДокументОПередаче = Истина;
		
		ИмяРеквизитаКонтрагент = "СведенияОПродавце";
		ДанныеВыбранногоКонтрагента = ЭлектронныеДокументыПереопределяемый.ПолучитьДанныеЮрФизЛица(Контрагент);
		Если ТипЗнч(ДанныеВыбранногоКонтрагента) = Тип("Структура") Тогда
			
			ДанныеВыбранногоКонтрагента.Вставить("ЭтоФизЛицо",
				ЭлектронныеДокументыПереопределяемый.ЭтоФизЛицо(Контрагент));
				
			ЗаполнитьДанныеУчастникаСделкиУПДУКД(ДанныеВыбранногоКонтрагента, СтрокаОбъекта.ЗначениеРеквизита, ИмяРеквизитаКонтрагент);
			
		КонецЕсли;
	ИначеЕсли СтрокаОбъекта.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.СЧФУПД
		Или СтрокаОбъекта.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.СЧФДОПУПД
		ИЛИ СтрокаОбъекта.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.КСЧФДИСУКД
		ИЛИ СтрокаОбъекта.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.КСЧФУКД Тогда
		
		ШаблонСообщения = НСтр("ru = 'Загрузка документов вида ""%1"" возможна только через оператора ЭДО.'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, СтрокаОбъекта.ВидЭД);
			
		Отказ = Истина;
	Иначе
		
		СтрокаДерева = НайтиСтрокуВДереве(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаКонтрагент);
		Если СтрокаДерева.СсылкаНаОбъект <> Контрагент Тогда
			СтрокаДерева.СсылкаНаОбъект = Контрагент;
			// Замена партнера.
			Если ЭлектронныеДокументыПовтИсп.ИспользуетсяДополнительнаяАналитикаКонтрагентовСправочникПартнеры() Тогда
				СтрокаДереваПартнер = НайтиСтрокуВДереве(ДеревоРазбора, СтрокаОбъекта, "Партнер");
				Если СтрокаДереваПартнер <> Неопределено Тогда
					РеквизитыПартнера = Новый Структура();
					РеквизитыПартнера.Вставить("Контрагент", Контрагент);
					ИмяПрикладногоСправочника = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьИмяПрикладногоСправочника("Партнеры");
					СтрокаДереваПартнер.СсылкаНаОбъект = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект(ИмяПрикладногоСправочника, , РеквизитыПартнера);
				КонецЕсли; 
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не Отказ Тогда
		Попытка
			Если ЭтоПередачаРабот Тогда
				ЭлектронныеДокументыПереопределяемый.НайтиСоздатьДокументПередачаРезультатовРабот(СтрокаОбъекта.ЗначениеРеквизита, ДокументСсылка, Записывать);
			ИначеЕсли ЭтоПередачаТоваров Тогда
				ЭлектронныеДокументыПереопределяемый.НайтиСоздатьДокументПередачаТоваров(СтрокаОбъекта.ЗначениеРеквизита, ДокументСсылка, Записывать);
			ИначеЕсли УПДДокументОПередаче Тогда
				ЭлектронныеДокументыВнутренний.НайтиСоздатьУПДДокументОПередаче(
					ФорматЭлектронногоДокумента, СтрокаОбъекта.ЗначениеРеквизита, ДокументСсылка, Записывать, "");
			ИначеЕсли УКДДокументОбИзмененииСтоимости Тогда
				ЭлектронныеДокументыПереопределяемый.НайтиСоздатьУКДДокументОбИзмененииСтоимости(СтрокаОбъекта.ЗначениеРеквизита, ДокументСсылка, Записывать);
			Иначе
				ДокументСсылка = ЭлектронныеДокументыПереопределяемый.СохранитьДанныеОбъектаВБД(СтрокаОбъекта, ДеревоРазбора,
					ДокументСсылка, Записывать);
			КонецЕсли;
			
		Исключение
			ШаблонСообщения = НСтр("ru = '%1.
									|%2'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
				ИнформацияОбОшибке().Описание,
				КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			Отказ = Истина;
		Конецпопытки;
	КонецЕсли;
		
КонецПроцедуры

Процедура ЗаполнитьДанныеУчастникаСделки(ДанныеВыбранногоКонтрагента, ДеревоЭД, ВидУчастника)
		
	Если ДанныеВыбранногоКонтрагента.ЭтоФизЛицо Тогда
		
		Если ДанныеВыбранногоКонтрагента.Свойство("ИНН") Тогда
			ИНН = ДанныеВыбранногоКонтрагента.ИНН;
			ЗаполнитьРеквизитДерева(
				ДеревоЭД,
				ВидУчастника + ".ТипУчастника.ФЛ.ИНН",
				ИНН);
		КонецЕсли;
			
		Если ДанныеВыбранногоКонтрагента.Свойство("Фамилия") Тогда
			Фамилия = ДанныеВыбранногоКонтрагента.Фамилия;
			ЗаполнитьРеквизитДерева(
				ДеревоЭД,
				ВидУчастника + ".ТипУчастника.ФЛ.Фамилия",
				Фамилия);
		КонецЕсли;
		
		Если ДанныеВыбранногоКонтрагента.Свойство("Имя") Тогда
			Имя = ДанныеВыбранногоКонтрагента.Имя;
			ЗаполнитьРеквизитДерева(
				ДеревоЭД,
				ВидУчастника + ".ТипУчастника.ФЛ.Имя",
				Имя);
		КонецЕсли;
		
		Если ДанныеВыбранногоКонтрагента.Свойство("Отчество") Тогда
			Отчество = ДанныеВыбранногоКонтрагента.Отчество;
			ЗаполнитьРеквизитДерева(
				ДеревоЭД,
				ВидУчастника + ".ТипУчастника.ФЛ.Отчество",
				Отчество);
		КонецЕсли;
	
		ОчиститьСтрокиДереваЭД(ДеревоЭД, ВидУчастника + ".ТипУчастника.ЮЛ");
		
	Иначе
		
		Если ДанныеВыбранногоКонтрагента.Свойство("ПолноеНаименование") Тогда
			Наименование = ДанныеВыбранногоКонтрагента.ПолноеНаименование;
			ЗаполнитьРеквизитДерева(
				ДеревоЭД,
				ВидУчастника + ".ТипУчастника.ЮЛ.НаименованиеОрганизации",
				Наименование);
		КонецЕсли;
		
		Если ДанныеВыбранногоКонтрагента.Свойство("ИНН") Тогда
			ИНН = ДанныеВыбранногоКонтрагента.ИНН;
			ЗаполнитьРеквизитДерева(
				ДеревоЭД,
				ВидУчастника + ".ТипУчастника.ЮЛ.ИНН",
				ИНН);
		КонецЕсли;
		
		Если ДанныеВыбранногоКонтрагента.Свойство("КПП") Тогда
			КПП = ДанныеВыбранногоКонтрагента.КПП;
			ЗаполнитьРеквизитДерева(
				ДеревоЭД,
				ВидУчастника + ".ТипУчастника.ЮЛ.КПП",
				КПП);
		КонецЕсли;
		
		ОчиститьСтрокиДереваЭД(ДеревоЭД, ВидУчастника + ".ТипУчастника.ФЛ")
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеУчастникаСделкиУПДУКД(ДанныеВыбранногоКонтрагента, ДеревоЭД, ВидУчастника)
		
	Если ДанныеВыбранногоКонтрагента.ЭтоФизЛицо Тогда
		
		Если ДанныеВыбранногоКонтрагента.Свойство("ИНН") Тогда
			ИНН = ДанныеВыбранногоКонтрагента.ИНН;
			ЗаполнитьРеквизитДерева(
				ДеревоЭД,
				ВидУчастника + ".ТипУчастника.ИП.ИНН",
				ИНН);
		КонецЕсли;
			
		Если ДанныеВыбранногоКонтрагента.Свойство("Фамилия") Тогда
			Фамилия = ДанныеВыбранногоКонтрагента.Фамилия;
			ЗаполнитьРеквизитДерева(
				ДеревоЭД,
				ВидУчастника + ".ТипУчастника.ИП.Фамилия",
				Фамилия);
		КонецЕсли;
		
		Если ДанныеВыбранногоКонтрагента.Свойство("Имя") Тогда
			Имя = ДанныеВыбранногоКонтрагента.Имя;
			ЗаполнитьРеквизитДерева(
				ДеревоЭД,
				ВидУчастника + ".ТипУчастника.ИП.Имя",
				Имя);
		КонецЕсли;
		
		Если ДанныеВыбранногоКонтрагента.Свойство("Отчество") Тогда
			Отчество = ДанныеВыбранногоКонтрагента.Отчество;
			ЗаполнитьРеквизитДерева(
				ДеревоЭД,
				ВидУчастника + ".ТипУчастника.ИП.Отчество",
				Отчество);
		КонецЕсли;
	
		ОчиститьСтрокиДереваЭД(ДеревоЭД, ВидУчастника + ".ТипУчастника.ЮЛ");
		
	Иначе
		
		Если ДанныеВыбранногоКонтрагента.Свойство("ПолноеНаименование") Тогда
			Наименование = ДанныеВыбранногоКонтрагента.ПолноеНаименование;
			ЗаполнитьРеквизитДерева(
				ДеревоЭД,
				ВидУчастника + ".ТипУчастника.ЮЛ.НаименованиеОрганизации",
				Наименование);
		КонецЕсли;
		
		Если ДанныеВыбранногоКонтрагента.Свойство("ИНН") Тогда
			ИНН = ДанныеВыбранногоКонтрагента.ИНН;
			ЗаполнитьРеквизитДерева(
				ДеревоЭД,
				ВидУчастника + ".ТипУчастника.ЮЛ.ИНН",
				ИНН);
		КонецЕсли;
		
		Если ДанныеВыбранногоКонтрагента.Свойство("КПП") Тогда
			КПП = ДанныеВыбранногоКонтрагента.КПП;
			ЗаполнитьРеквизитДерева(
				ДеревоЭД,
				ВидУчастника + ".ТипУчастника.ЮЛ.КПП",
				КПП);
		КонецЕсли;
		
		ОчиститьСтрокиДереваЭД(ДеревоЭД, ВидУчастника + ".ТипУчастника.ФЛ")
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОчиститьСтрокиДереваЭД(ДеревоЭД, ПутьКДанным)
	
	СтрокаДерева = ДеревоЭД.Строки.Найти(ПутьКДанным, "ПолныйПуть", Истина);
	Если Не СтрокаДерева = Неопределено Тогда
		СтрокаДерева.Строки.Очистить();
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитДерева(Дерево, Реквизит, Значение, КорневойЭлементДерева = "")
	
	Если Не ЗначениеЗаполнено(Значение) Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(Дерево, Реквизит, Значение, КорневойЭлементДерева = "");
	
КонецПроцедуры

Функция НайтиСтрокуВДереве(ДеревоРазбора, СтрокаОбъекта, ИмяОбъектаПоиска)
	
	ВозвращаемоеЗначение = Неопределено;
	
	СтруктураПоиска = Новый Структура("Реквизит", ИмяОбъектаПоиска);
	МассивСтрок = СтрокаОбъекта.Строки.НайтиСтроки(СтруктураПоиска);
	Если МассивСтрок.Количество() > 0 Тогда
		ИндексСтрокиКонтрагента = МассивСтрок[0].ЗначениеРеквизита;
		СтруктураПоиска = Новый Структура("ИндексСтроки", ИндексСтрокиКонтрагента);
		МассивСтрок = ДеревоРазбора.Строки.НайтиСтроки(СтруктураПоиска, Истина);
		Если МассивСтрок.Количество() > 0 Тогда
			СтрокаДерева = МассивСтрок[0];
			ВозвращаемоеЗначение = СтрокаДерева;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Обновление значения флага "НаПодпись" для присоединенного файла.
// Флаг используется для выборки присоединенных файлов в "ТекущиеДелаЭДО"
// в раздел "Подписать"
//
// Параметры
//  ЭДОбъект  - СправочникОбъект.ЭДПрисоединенныеФайлы - Присоединенный файл электронного документа.
//
Процедура АктуализироватьФлагНаПодпись(ЭДОбъект) Экспорт
	
	СостояниеЭДО = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ЭДОбъект.ВладелецФайла, "СостояниеЭДО");
	Если ЗначениеЗаполнено(ЭДОбъект.ТипЭлементаВерсииЭД) И ЗначениеЗаполнено(СостояниеЭДО) Тогда
		
		Если Не ЭлектронныеДокументыСлужебныйВызовСервера.ЭтоСлужебныйДокумент(ЭДОбъект.ТипЭлементаВерсииЭД) Тогда
			ЭДОбъект.НаПодпись = СостояниеЭДО = Перечисления.СостоянияВерсийЭД.НаПодписи;
		ИначеЕсли ЭтоОтветныйТитул(ЭДОбъект.ТипЭлементаВерсииЭД) Тогда
			ТитулПродавца = ЭДОбъект.ЭлектронныйДокументВладелец;
			Если ЗначениеЗаполнено(ТитулПродавца) Тогда
				НовоеСостояниеФлага = СостояниеЭДО = Перечисления.СостоянияВерсийЭД.НаПодписи;
				ТекущееСостояниеФлага = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ТитулПродавца, "НаПодпись");
				Если ТекущееСостояниеФлага <> НовоеСостояниеФлага Тогда
					Объект = ТитулПродавца.ПолучитьОбъект();
					Объект.ОбменДанными.Загрузка = Истина;
					Объект.НаПодпись = НовоеСостояниеФлага;
					Объект.Записать();
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли ЭтоИзвещениеОПолучении(ЭДОбъект.ТипЭлементаВерсииЭД) Тогда
			ЭДОбъект.НаПодпись = СостояниеЭДО <> Перечисления.СостоянияВерсийЭД.ЗакрытПринудительно
				И ЭДОбъект.СтатусЭД = Перечисления.СтатусыЭД.Утвержден;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Получает переданные реквизиты объекта или ссылки.
//
// Параметры:
//  Объект    - Объект, ЛюбаяСсылка - объект ссылочного типа или любая ссылка.
//  Реквизиты - Строка - имена реквизитов, перечисленные через запятую, в формате
//              требований к свойствам структуры.
//              Например, "Код, Наименование, Родитель".
//            - Структура, ФиксированнаяСтруктура - в качестве ключа передается
//              псевдоним поля для возвращаемой структуры с результатом, а в качестве
//              значения (опционально) фактическое имя поля в таблице.
//              Если значение не определено, то имя поля берется из ключа.
//            - Массив, ФиксированныйМассив - имена реквизитов в формате требований
//              к свойствам структуры.
// 
// Возвращаемое значение:
//  Структура - структура, в которой ключами являются имена реквизитов, а значениями - их значения.
//
Функция ЗначенияРеквизитовОбъектаИлиСсылки(Объект, Знач Реквизиты) Экспорт
	
	Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Объект)) Тогда
		Результат = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект, Реквизиты);
	Иначе
		// Передан объект - поэтому нужно составить структуру из реквизитов и прочитать в нее значения из объекта напрямую.
		Если ТипЗнч(Реквизиты) = Тип("Строка") Тогда
			Если ПустаяСтрока(Реквизиты) Тогда
				Возврат Новый Структура;
			КонецЕсли;
			Реквизиты = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Реквизиты, ",", Ложь);
		КонецЕсли;
		
		Результат = Новый Структура;
		Если ТипЗнч(Реквизиты) = Тип("Структура") Или ТипЗнч(Реквизиты) = Тип("ФиксированнаяСтруктура") Тогда
			Результат = Реквизиты;
		ИначеЕсли ТипЗнч(Реквизиты) = Тип("Массив") Или ТипЗнч(Реквизиты) = Тип("ФиксированныйМассив") Тогда
			Для Каждого Реквизит Из Реквизиты Цикл
				Результат.Вставить(СтрЗаменить(Реквизит, ".", ""), Реквизит);
			КонецЦикла;
		Иначе
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Неверный тип второго параметра Реквизиты: %1'"), Строка(ТипЗнч(Реквизиты)));
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(Результат, Объект);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Добавляет в переданную таблицу установленных электронных подписей служебную колонку, отражающую направление подписи.
//
// Параметры:
//  МассивПодписей			 - Массив - массив структур установленных подписей.
//  ЗначениеДляПростановки	 - Булево - значение для заполнения служебной колонки "Входящая".
//
Процедура ДополнитьМассивПодписейПризнакомНаправления(МассивПодписей, ЗначениеДляПростановки = Неопределено) Экспорт

	Для Каждого ДанныеПодписи Из МассивПодписей Цикл
		ДанныеПодписи.Вставить("Входящая", ЗначениеДляПростановки);
	КонецЦикла;

КонецПроцедуры

// Получение отпечатков ожидаемых сертификатов
//
// Параметры:
//  ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящий, ЭлектронныйДокументИсходящий - электронный документ.
// 
// Возвращаемое значение:
//  Массив - отпечатки сертификатов.
//
Функция ОтпечаткиОжидаемыхСертификатов(ТекущееСоглашение) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СертификатыЭЦП.Отпечаток КАК Отпечаток
	|ИЗ
	|	Справочник.СертификатыЭЦП КАК СертификатыЭЦП
	|ГДЕ
	|	СертификатыЭЦП.Организация = &Организация
	|	И СертификатыЭЦП.Отозван = ЛОЖЬ
	|	И СертификатыЭЦП.ПометкаУдаления = ЛОЖЬ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СоглашенияОбИспользованииЭДСертификатыПодписейКонтрагента.Отпечаток
	|ИЗ
	|	Справочник.СоглашенияОбИспользованииЭД.СертификатыПодписейКонтрагента КАК СоглашенияОбИспользованииЭДСертификатыПодписейКонтрагента
	|ГДЕ
	|	СоглашенияОбИспользованииЭДСертификатыПодписейКонтрагента.Ссылка = &СоглашениеОбИспользованииЭД";
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос.УстановитьПараметр("Организация", ОбщегоНазначения.ПолучитьЗначениеРеквизита(ТекущееСоглашение, "Организация"));
	Запрос.УстановитьПараметр("СоглашениеОбИспользованииЭД", ТекущееСоглашение);
	МассивОтпечатков = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Отпечаток");
	
	Возврат МассивОтпечатков;
	
КонецФункции

// Процедура - Удаляет запись регистра СостоянияЭД для пары документ учета и электронный документ.
//
// Параметры:
//  СсылкаНаОбъект		 - ДокументСсылка, СправочникСсылка.СоглашенияОбИспользованииЭД - объект-владелец записи в регистре
//  ЭлектронныйДокумент	 - ДокументСсылка.ЭлектронныйДокументВходящий, ДокументСсылка.ЭлектронныйДокументИсходящий - ссылка на электронный документ.
//
Процедура УдалитьСсылкуДляВладельцаВРегистреСостояний(СсылкаНаОбъект,ЭлектронныйДокумент) Экспорт 
	
	НаборЗаписей = РегистрыСведений.СостоянияЭД.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.СсылкаНаОбъект.Установить(СсылкаНаОбъект,Истина);
	НаборЗаписей.Прочитать();
	
	МассивКУдалению = Новый Массив;
	Для Каждого Запись Из НаборЗаписей Цикл
		Если Запись.ЭлектронныйДокумент = ЭлектронныйДокумент Тогда
			МассивКУдалению.Добавить(Запись);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Запись Из МассивКУдалению Цикл
		НаборЗаписей.Удалить(Запись);
	КонецЦикла;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

Функция ЭлектронныеДокументыИзДереваЗначений(ДеревоЗначений)
	
	ТаблицаЭД = Новый ТаблицаЗначений;
	ТаблицаЭД.Колонки.Добавить("Ссылка");
	ТаблицаЭД.Колонки.Добавить("ИмяРеквизита");
	ТаблицаЭД.Колонки.Добавить("ТипЭД");
	ТаблицаЭД.Колонки.Добавить("ВидЭД");
	ТаблицаЭД.Колонки.Добавить("ДанныеЭД");
		
	ЗаполнитьТаблицуРекурсивно(ДеревоЗначений.Строки,ТаблицаЭД);
	
	Возврат ТаблицаЭД;
	
КонецФункции

// Преобразует ссылочное значение ставки НДС в числовое.
//
// Параметры:
//  СтавкаНДС	 - ЛюбаяСсылка - ссылка на значение ставки НДС.
// 
// Возвращаемое значение:
//  Число - числовое значение ставки НДС.
//
Функция ЗначениеСтавкиНДСИзПеречисления(СтавкаНДС) Экспорт

	ПредставлениеСтавки = ЭлектронныеДокументыПовтИсп.СтавкаНДСИзСоответствия(, СтавкаНДС);
	
	Если ПредставлениеСтавки = "18" ИЛИ ПредставлениеСтавки = "18/118" Тогда
		Значение = 0.18;
	ИначеЕсли ПредставлениеСтавки = "10" ИЛИ ПредставлениеСтавки = "10/110" Тогда
		Значение = 0.10;
	ИначеЕсли ПредставлениеСтавки = "20" ИЛИ ПредставлениеСтавки = "20/120" Тогда
		Значение = 0.20;
	Иначе
		Значение = 0;
	КонецЕсли;
	
	Возврат Значение;

КонецФункции

// возвращает значения полей документа, которыми заполняется РС "СостоянияЭД"
Функция ОписаниеОснованияЭлектронногоДокумента(Знач ОснованиеЭД) Экспорт
	
	МетаданныеОснования = ОснованиеЭД.Метаданные();
	ИмяОснования        = МетаданныеОснования.Имя;
	СинонимОснования    = МетаданныеОснования.Синоним;

	РеквизитыОснования = Новый Массив;
	РеквизитыОснования.Добавить("Организация");
	РеквизитыОснования.Добавить("Контрагент");
	РеквизитыОснования.Добавить("Дата");
	РеквизитыОснования.Добавить("Номер");
	РеквизитыОснования.Добавить("СуммаДокумента");
	
	ШаблонЗапроса =
	"ВЫБРАТЬ
	|	&Псевдоним.Организация    КАК Организация,
	|	&Псевдоним.Контрагент     КАК Контрагент,
	|	&Псевдоним.Дата           КАК Дата,
	|	&Псевдоним.Номер          КАК Номер,
	|	&Псевдоним.СуммаДокумента КАК СуммаДокумента
	|ИЗ
	|	Документ.&ИмяДокумента КАК &Псевдоним
	|ГДЕ
	|	&Псевдоним.Ссылка = &Ссылка";
	
	ПсевдонимТаблицы = "Документ";
	
	Для Каждого ИмяРеквизита Из РеквизитыОснования Цикл
		
		ЗаменяемыйШаблон = "&Псевдоним." + ИмяРеквизита;
		
		ПрикладноеПредставление = ЭлектронныеДокументыПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении(
			ИмяОснования + "." + ИмяРеквизита);
			
		Если ЗначениеЗаполнено(ПрикладноеПредставление) Тогда
			
			ШаблонЗапроса = СтрЗаменить(ШаблонЗапроса, ЗаменяемыйШаблон, ПрикладноеПредставление);
			
			Если ПсевдонимТаблицы = "Документ" Тогда
				СтрокиВМассиве = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПрикладноеПредставление, ".");
				ПсевдонимТаблицы = СтрокиВМассиве[0];
			КонецЕсли;
			
		Иначе
			
			РеквизитЕсть = Ложь;
			Если МетаданныеОснования.Реквизиты.Найти(ИмяРеквизита) <> Неопределено Тогда
				РеквизитЕсть = Истина
			КонецЕсли;
			Если Не РеквизитЕсть Тогда
				Для Каждого СтдРеквизит Из МетаданныеОснования.СтандартныеРеквизиты Цикл
					Если СтдРеквизит.Имя = ИмяРеквизита Тогда
						РеквизитЕсть = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			Если Не РеквизитЕсть Тогда
				ШаблонЗапроса = СтрЗаменить(ШаблонЗапроса, ЗаменяемыйШаблон, "NULL");
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ШаблонЗапроса = СтрЗаменить(ШаблонЗапроса, "&ИмяДокумента", ИмяОснования);
	ШаблонЗапроса = СтрЗаменить(ШаблонЗапроса, "&Псевдоним",    ПсевдонимТаблицы);
	
	ОписаниеОснованияЭД = Новый Структура;
	ОписаниеОснованияЭД.Вставить("Вид",            СинонимОснования);
	ОписаниеОснованияЭД.Вставить("Организация",    "");
	ОписаниеОснованияЭД.Вставить("Контрагент",     "");
	ОписаниеОснованияЭД.Вставить("Дата",           '00010101');
	ОписаниеОснованияЭД.Вставить("Номер",          "");
	ОписаниеОснованияЭД.Вставить("СуммаДокумента", 0);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ШаблонЗапроса;
	Запрос.УстановитьПараметр("Ссылка", ОснованиеЭД);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат ОписаниеОснованияЭД;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ОписаниеОснованияЭД, Выборка);
	КонецЕсли;
	
	Возврат Новый ФиксированнаяСтруктура(ОписаниеОснованияЭД);
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// НоваяАрхитектураЭДО

// Сохраняет текст причины отклонения в входящем или исходящем электронном документе.
//
// Параметры:
//  СсылкаНаЭД			 - ДокументСсылка.ЭлектронныйДокументВходящий, ДокументСсылка.ЭлектронныйДокументИсходящий - ссылка на отклоняемый документ
//  ПричинаОтклонения	 - Строка - строка, содержащая причину отклонения документа.
//
Процедура ЗаписатьПричинуОтклонения(СсылкаНаЭД, ПричинаОтклонения) Экспорт 
	
	ОбъектЭДО = СсылкаНаЭД.ПолучитьОбъект();
	ОбъектЭДО.ПричинаОтклонения = ПричинаОтклонения;
	ОбъектЭДО.Записать();
	
КонецПроцедуры

// Получает подписи объекта и возвращает их.
//
// Параметры:
//  Объект - Ссылка - Ссылка на подписанный объект.
//                    Объект должен иметь реквизит ПодписанЭП.
//
// Возвращаемое значение:
//  Массив - массив описанных ниже структур.
//    - Структура - развернутое описание подписи:
//     * Подпись                 - ДвоичныеДанные - результат подписания.
//     * УстановившийПодпись     - СправочникСсылка.Пользователи - пользователь, который
//                                подписал объект информационной базы.
//     * Комментарий             - Строка - комментарий, если он был введен при подписании.
//     * ИмяФайлаПодписи         - Строка - если подпись добавлена из файла.
//     * ДатаПодписи             - Дата   - дата, когда подпись была сделана. Имеет смысл для случая,
//                                      когда дату невозможно извлечь из данных подписи.
//     * ДатаПроверкиПодписи     - Дата   - дата последней проверки подписи.
//     * ПодписьВерна            - Булево - результат последней проверки подписи.
//     * ПорядковыйНомер         - Число - идентификатор подписи, по которому можно упорядочивать их в списке.
//
//     Производные свойства:
//     * Сертификат              - ДвоичныеДанные - содержит выгрузку сертификата,
//                                который использовался для подписания (содержится в подписи).
//     * Отпечаток               - Строка - отпечаток сертификата в формате строки Base64.
//     * КомуВыданСертификат     - Строка - представление субъекта, полученное из двоичных данных сертификата.
//
Функция УстановленныеПодписи(Объект) Экспорт
	
	//ПроверитьПараметрОбъект(Объект, "ЭлектроннаяПодпись.УстановленныеПодписи",, Истина);
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЭлектронныеПодписи.Подпись,
		|	ЭлектронныеПодписи.НомерСтроки КАК ПорядковыйНомер,
		|	ЭлектронныеПодписи.УстановившийПодпись,
		|	ЭлектронныеПодписи.Комментарий,
		|	ЭлектронныеПодписи.ИмяФайлаПодписи,
		|	ЭлектронныеПодписи.ДатаПодписи,
		|	ЭлектронныеПодписи.ДатаПроверкиПодписи,
		|	ЭлектронныеПодписи.ПодписьВерна,
		|	ЭлектронныеПодписи.Сертификат,
		|	ЭлектронныеПодписи.Отпечаток,
		|	ЭлектронныеПодписи.КомуВыданСертификат
		|ИЗ
		|	&ИмяОбъекта.ЭлектронныеЦифровыеПодписи КАК ЭлектронныеПодписи
		|ГДЕ
		|	ЭлектронныеПодписи.Ссылка = &ПодписанныйОбъект
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПорядковыйНомер";
		
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ИмяОбъекта", Объект.Метаданные().ПолноеИмя());
	
	Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Объект)) Тогда
		Запрос.УстановитьПараметр("ПодписанныйОбъект", Объект);
	Иначе
		Запрос.УстановитьПараметр("ПодписанныйОбъект", Объект.Ссылка);
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	МассивЭлектронныхПодписей = Новый Массив;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ОтпечатокСтруктура = Новый Структура(
			"ПорядковыйНомер, ДатаПодписи, УстановившийПодпись,
			|ДатаПроверкиПодписи, ИмяФайлаПодписи, Комментарий, КомуВыданСертификат,
			|Отпечаток, Подпись, ПодписьВерна, Сертификат");
		ЗаполнитьЗначенияСвойств(ОтпечатокСтруктура, ВыборкаДетальныеЗаписи);
		ОтпечатокСтруктура.Подпись = ОтпечатокСтруктура.Подпись.Получить();
		МассивЭлектронныхПодписей.Добавить(ОтпечатокСтруктура);
	КонецЦикла;
	
	Возврат МассивЭлектронныхПодписей;
	
КонецФункции

// Получает из табличной части "Входящие электронные документы" настройки ЭДО способ обработки 
// электронного документа переданного вида.
//
// Параметры:
//  НастройкаЭДО - СправочникСсылка.СоглашенияОбИспользованииЭД - ссылка на настройку для которой определяется способ
//  ВидЭД		 - ПеречислениеСсылка.ВидыЭД - вид ЭД для поиска.
// 
// Возвращаемое значение:
//  Строка - способ обработки из табличной части настройки ЭДО.
//
Функция СпособОбработкиВходящегоДокумента(НастройкаЭДО, ВидЭД, ТипЭлементаВерсииЭД) Экспорт 
	
	СпособОбработки = "Автоматически";
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	СоглашенияОбИспользованииЭДВходящиеДокументы.СпособОбработки,
	|	СоглашенияОбИспользованииЭДВходящиеДокументы.ВходящийДокумент
	|ИЗ
	|	Справочник.СоглашенияОбИспользованииЭД.ВходящиеДокументы КАК СоглашенияОбИспользованииЭДВходящиеДокументы
	|ГДЕ
	|	СоглашенияОбИспользованииЭДВходящиеДокументы.ВходящийДокумент В (&ВидЭД)
	|	И СоглашенияОбИспользованииЭДВходящиеДокументы.Ссылка = &НастройкаЭДО";
	Запрос.УстановитьПараметр("НастройкаЭДО", НастройкаЭДО);
	
	Если ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.СЧФДОПУПД
		ИЛИ ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.КСЧФДИСУКД Тогда
		
		МассивВидовЭД = Новый Массив;
		МассивВидовЭД.Добавить(ВидЭД);
		МассивВидовЭД.Добавить(Перечисления.ВидыЭД.ТОРГ12Продавец);
		Запрос.УстановитьПараметр("ВидЭД", МассивВидовЭД);
	Иначе
		Запрос.УстановитьПараметр("ВидЭД", ВидЭД);
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат СпособОбработки;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		СпособОбработки = Выборка.СпособОбработки;
	КонецЕсли;
	
	Если Выборка.Следующий() Тогда
		СтруктураСпособовОбработки = Новый Структура("ПервичныйДокумент, СчетФактура");
		Если Выборка.ВходящийДокумент = Перечисления.ВидыЭД.ТОРГ12Продавец Тогда
			СтруктураСпособовОбработки.ПервичныйДокумент = Выборка.СпособОбработки;
			СтруктураСпособовОбработки.СчетФактура = СпособОбработки;
		Иначе
			СтруктураСпособовОбработки.ПервичныйДокумент = СпособОбработки;
			СтруктураСпособовОбработки.СчетФактура = Выборка.СпособОбработки;
		КонецЕсли;
		СпособОбработки = СтруктураСпособовОбработки;
	КонецЕсли;
	
	Возврат СпособОбработки;
	
КонецФункции

// Функция создает электронный документ.
//
// Параметры:
//  СтруктураЭД - Структура - содержит значения реквизитов нового документа, для создания входящего документа структура 
//                            должна содержать элемент "Входящий" со значением Истина иначе будет создан исходящий документ.
//  УникальныйИдентификаторЭД - УникальныйИдентификатор - уникальный идентификатор для создания ссылки на объект.
// 
// Возвращаемое значение:
//  ДокументСсылка - ссылка на новый входящий или исходящий электронный документ.
//
Функция СоздатьЭлектронныйДокумент(СтруктураЭД = Неопределено) Экспорт 
	
	Если СтруктураЭД.Свойство("Входящий") И СтруктураЭД.Входящий Тогда
		НовыйЭлектронныйДокумент = Документы.ЭлектронныйДокументВходящий.СоздатьДокумент();
	Иначе
		НовыйЭлектронныйДокумент = Документы.ЭлектронныйДокументИсходящий.СоздатьДокумент();
	КонецЕсли;
	
	Если СтруктураЭД.Свойство("ДокументыОснования") Тогда
		Для каждого Строка Из СтруктураЭД.ДокументыОснования Цикл
			НоваяСтрока = НовыйЭлектронныйДокумент.ДокументыОснования.Добавить();
			НоваяСтрока.ДокументОснование = Строка;
		КонецЦикла;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(НовыйЭлектронныйДокумент,СтруктураЭД);
	
	Если СтруктураЭД.Свойство("СоглашениеЭД") Тогда
		НовыйЭлектронныйДокумент.НастройкаЭДО = СтруктураЭД.СоглашениеЭД;
	КонецЕсли;
	
	Если СтруктураЭД.Свойство("УникальныйИдентификатор") Тогда
		НовыйЭлектронныйДокумент.УникальныйИД = СтруктураЭД.УникальныйИдентификатор;
	КонецЕсли;
	
	Если СтруктураЭД.Свойство("ДатаЭД") Тогда
		НовыйЭлектронныйДокумент.Дата = СтруктураЭД.ДатаЭД;
	Иначе
		НовыйЭлектронныйДокумент.Дата = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Если СтруктураЭД.Свойство("ТребуетсяПодтверждение") Тогда
		НовыйЭлектронныйДокумент.ТребуетсяПодтверждение = СтруктураЭД.ТребуетсяПодтверждение;
	КонецЕсли;
	
	Если СтруктураЭД.Свойство("ТребуетсяИзвещение") Тогда
		НовыйЭлектронныйДокумент.ТребуетсяИзвещение = СтруктураЭД.ТребуетсяИзвещение;
	КонецЕсли;
	
	Если СтруктураЭД.Свойство("НаименованиеДокументаОтправителя") Тогда
		НовыйЭлектронныйДокумент.НаименованиеДокументаОтправителя = СтруктураЭД.НаименованиеДокументаОтправителя;
	КонецЕсли;
	
	Если СтруктураЭД.Свойство("ИдентификаторыДокументовИЭДОснований") Тогда
		Для Каждого СтрокаТаблицы Из СтруктураЭД.ИдентификаторыДокументовИЭДОснований Цикл
			НоваяСтрока = НовыйЭлектронныйДокумент.ИдентификаторыОснованийВладельцаФайла.Добавить();	
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТаблицы);
		КонецЦикла;
	КонецЕсли;
	
	НовыйЭлектронныйДокумент.Записать();
	НовыйЭлектронныйДокументСсылка = НовыйЭлектронныйДокумент.Ссылка; 
	
	Возврат НовыйЭлектронныйДокументСсылка;
	
КонецФункции

// Функция возвращает присоединенный файл с данными электронного документа
//
// Параметры:
//  ВладелецФайла		 - ДокументСсылка.ЭлектронныйДокументВходящий, ДокументСсылка.ЭлектронныйДокументИсходящий - документ, для которого требуется найти
//  присоединенный файл
//  ТипЭлементаВерсииЭД	 - ПеречислениеСсылка.ТипыЭлементовВерсииЭД - тип присоединенного файла, если не указан - то найдется основной присоединенный файл
//  СообщатьОбОшибке	 - Булево - признак необходимости сообщить пользователю, если файл не будет найден.
// 
// Возвращаемое значение:
//  СправочникСсылка.ЭДПрисоединенныеФайлы, Неопределено - ссылка на присоединенный файл либо неопределено, если файл не найден.
//
Функция ПрисоединенныйФайл(ВладелецФайла, ТипЭлементаВерсииЭД = Неопределено,СообщатьОбОшибке = Ложь) Экспорт
	
	Перем ПрисоединенныйФайл;
	
	Если ТипЭлементаВерсииЭД = Неопределено Тогда
		ТипЭлементаВерсииЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВладелецФайла, "ТипЭлементаВерсииЭД");
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЭДПрисоединенныеФайлы.Ссылка
	|ИЗ
	|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	|ГДЕ
	|	ЭДПрисоединенныеФайлы.ВладелецФайла = &ВладелецФайла
	|	И ЭДПрисоединенныеФайлы.ТипЭлементаВерсииЭД = &ТипЭлементаВерсииЭД";
	Запрос.УстановитьПараметр("ВладелецФайла",ВладелецФайла);
	Запрос.УстановитьПараметр("ТипЭлементаВерсииЭД",ТипЭлементаВерсииЭД);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ПрисоединенныйФайл = Выборка.Ссылка;
	ИначеЕсли СообщатьОбОшибке Тогда
		Операция = НСтр("ru = 'Получение присоединенного файла'");
		ТекстОшибки = НСтр("ru = 'Не обнаружен присоединенный файл документа %1'");
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, ВладелецФайла);
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьОшибку(
			Операция, 
			ТекстОшибки, 
			ТекстОшибки, 
			"ОбменСБанками", 
			ВладелецФайла);
	КонецЕсли;
	
	Возврат ПрисоединенныйФайл;
	
КонецФункции

// Формирует список способов отражения в учете входящего электронного документа определенного вида.
//
// Параметры:
//  ВидЭД							 - ПеречислениеСсылка.ВидыЭД - 
//  ДобавлятьПредопределенныеСпособы	 - Булево - признак добавления способов "Вручную" и "Автоматически"
// (последний - если в переопределяемом модуле не указаны способы отражения для вида ЭД)
//  Префикс							 - Строка - текст, который будет добавлен к представлению способа обработки.
// 
// Возвращаемое значение:
//  СписокЗначений - список способов обработки с указанием представления и отметки в списке используемого по-умолчанию способа.
//
Функция СписокОперацийВидаЭД(ВидЭД, ДобавлятьПредопределенныеСпособы = Ложь, Префикс = "") Экспорт 
	
	СписокОпераций = Новый СписокЗначений;
	
	Если ВидЭД = Перечисления.ВидыЭД.ПроизвольныйЭД Тогда
		
		Основания = Метаданные.Документы.ЭлектронныйДокументВходящий.ТабличныеЧасти.ДокументыОснования.Реквизиты.ДокументОснование.Тип.Типы();
		Для Каждого ТекущееОснование Из Основания Цикл
			СписокОпераций.Добавить(Метаданные.НайтиПоТипу(ТекущееОснование).Имя,
				Метаданные.НайтиПоТипу(ТекущееОснование).Синоним);
		КонецЦикла;
	Иначе
		ЭлектронныеДокументыПереопределяемый.СписокОперацийВидаЭД(ВидЭД, СписокОпераций);
	КонецЕсли;
	
	Для Каждого ЭлементСписка Из СписокОпераций Цикл
		ЭлементСписка.Представление = Префикс + " " + ЭлементСписка.Представление;
	КонецЦикла;
	
	Если ДобавлятьПредопределенныеСпособы Тогда
		Если СписокОпераций.Количество() = 0 Тогда
			СписокОпераций.Добавить("Автоматически", НСтр("ru = 'Автоматически'"),Истина);
		КонецЕсли;
		
		СписокОпераций.Добавить("Вручную", НСтр("ru = 'Вручную в форме электронного документа'"));
	КонецЕсли;
	
	Возврат СписокОпераций;
	
КонецФункции

// Требуется для получения имени документа для открытия форм по способу обработки входящего документа.
//
// Параметры:
//  СпособОбработки	 - Строка - один из способов обработки входящего электронного документа.
// 
// Возвращаемое значение:
//  Строка - имя объекта метаданных (документа), соответствующего способу обработки.
//
Функция ИмяДокументаПоСпособуОбработки(СпособОбработки) Экспорт
	
	ИмяДокумента = СпособОбработки; 
	
	ЭлектронныеДокументыПереопределяемый.ИмяДокументаПоСпособуОбработки(СпособОбработки,ИмяДокумента);
		
	Возврат ИмяДокумента;
	
КонецФункции

// Проверяет является ли переданный тип ЭД типом извещения о получении
//
// Параметры:
//  ТипЭлементаВерсииЭД	 - ПеречислениеСсылка.ТипыЭлементовВерсииЭД - тип ЭД для проверки.
// 
// Возвращаемое значение:
//  Булево - результат проверки
//
Функция ЭтоИзвещениеОПолучении(ТипЭлементаВерсииЭД) Экспорт 
	
	Возврат ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИОП
			ИЛИ ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИППДОИПЭСФ
			ИЛИ ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИППДОЭСФ
			ИЛИ ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИППДПЭСФ
			ИЛИ ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИПУУЭСФ
			ИЛИ ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИПЭСФ
			ИЛИ ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИППДОИПУПДУКД;
	
КонецФункции

// Проверяет является ли переданный тип ЭД типом подтверждения получения.
//
// Параметры:
//  ТипЭлементаВерсииЭД	 - ПеречислениеСсылка.ТипыЭлементовВерсииЭД - тип ЭД для проверки.
// 
// Возвращаемое значение:
//  Булево - результат проверки
//
Функция ЭтоПодтверждение(ТипЭлементаВерсииЭД) Экспорт 
	
	Возврат ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДО
			ИЛИ ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДОИПЭСФ
			ИЛИ ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДОЭСФ
			ИЛИ ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДП
			ИЛИ ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДПЭСФ
			ИЛИ ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДОИПУПДУКД;
			
КонецФункции

// Проверяет является ли переданный тип ЭД типом уведомления об уточнении.
//
// Параметры:
//  ТипЭлементаВерсииЭД	 - ПеречислениеСсылка.ТипыЭлементовВерсииЭД - тип ЭД для проверки.
// 
// Возвращаемое значение:
//  Булево - результат проверки
//
Функция ЭтоУведомлениеОбУточнении(ТипЭлементаВерсииЭД) Экспорт 
	
	Возврат ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.УОУ
			ИЛИ ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.УУЭСФ;
			
КонецФункции

// Проверяет наличие подписи для второго титула электронного документа
//
// Параметры:
//  СсылкаНаФайлЭД	 - СправочникСсылка.ЭДПрисоединенныеФайлы - первый титул документа.
// 
// Возвращаемое значение:
//  Булево - Истина, если для второго титула установлена подпись.
//
Функция ВторойТитулПодписан(СсылкаНаФайлЭД) Экспорт 
	
	Результат = Ложь;
	ФайлВторогоТитула = ВторойТитулДокумента(СсылкаНаФайлЭД);
	Если ФайлВторогоТитула = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	Статус = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ФайлВторогоТитула, "СтатусЭД");
	Если Статус = Перечисления.СтатусыЭД.Подписан
		Или Статус = Перечисления.СтатусыЭД.ПодготовленКОтправке
		Или Статус = Перечисления.СтатусыЭД.Отправлен
		Или Статус = Перечисления.СтатусыЭД.ПереданОператору
		Или Статус = Перечисления.СтатусыЭД.Доставлен Тогда
		Результат = Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Ищет среди присоединенных файлов электронного документа отправленное уведомление об уточнении.
//
// Параметры:
//  СсылкаНаФайлЭД	 - СправочникСсылка.ЭДПрисоединенныеФайлы - основной присоединенный файл среди связанных с которым будет происходить поиск уведомления.
// 
// Возвращаемое значение:
//  Булево - Возвращает ИСТИНА, если удалось найти уведомление об уточнении.
//
Функция ЕстьОтправленноеУведомление(СсылкаНаФайлЭД) Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	""1"" КАК Поле1
	|ИЗ
	|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	|ГДЕ
	|	(ЭДПрисоединенныеФайлы.ТипЭлементаВерсииЭД = ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.УОУ)
	|			ИЛИ ЭДПрисоединенныеФайлы.ТипЭлементаВерсииЭД = ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.УУЭСФ))
	|			И ЭДПрисоединенныеФайлы.ЭлектронныйДокументВладелец = &ЭлектронныйДокументВладелец
	|			И ЭДПрисоединенныеФайлы.СтатусЭД = &СтатусЭД";
	Запрос.УстановитьПараметр("ЭлектронныйДокументВладелец", СсылкаНаФайлЭД);
	Запрос.УстановитьПараметр("СтатусЭД", Перечисления.СтатусыЭД.Отправлен);
	
	Результат = Запрос.Выполнить();
	ЕстьУведомление = Истина;
	Если Результат.Пустой() Тогда
		ЕстьУведомление = Ложь;
	КонецЕсли;
	
	Возврат ЕстьУведомление;
	
КонецФункции

Функция ЭлектронныеПодписиДвухТитулов(ЭлектронныйДокумент) Экспорт
	
	ДанныеЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЭлектронныйДокумент, "НаправлениеЭД");
	ЭлектронныеПодписиЭД = УстановленныеПодписи(ЭлектронныйДокумент);
	
	// Дополним сведения о подписи признаком направления
	ЭтоВходящийДокумент = ДанныеЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий;
	ДополнитьМассивПодписейПризнакомНаправления(ЭлектронныеПодписиЭД, ЭтоВходящийДокумент);
	
	ВторойТитул = ВторойТитулДокумента(ЭлектронныйДокумент);
	Если ЗначениеЗаполнено(ВторойТитул) Тогда
		ДанныеВторогоТитула = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВторойТитул, 
			"НаправлениеЭД");
		ЭлектронныеПодписиВторогоТитула = УстановленныеПодписи(ВторойТитул);
		
		// Дополним сведения о подписи признаком направления
		ЭтоВходящийДокумент = ДанныеВторогоТитула.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий;
		ДополнитьМассивПодписейПризнакомНаправления(ЭлектронныеПодписиВторогоТитула, ЭтоВходящийДокумент);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ЭлектронныеПодписиЭД, ЭлектронныеПодписиВторогоТитула);
	КонецЕсли;
	
	Возврат ЭлектронныеПодписиЭД;
	
КонецФункции

Процедура СформироватьДеревьяЭД(ДеревоОбъект,СоответствиеВладельцевИЭД, НастройкиОбмена, ВыводитьНеактуальные = Ложь, ТолькоКорень = Ложь) Экспорт 
	
	Если СоответствиеВладельцевИЭД.Количество() > 0 Тогда
		
		ОбъектСсылка = Неопределено;
		
		Для Каждого Элемент Из СоответствиеВладельцевИЭД Цикл
			ОбъектСсылка = Элемент.Ключ;
			АктуальныйЭД = "";
			Если ЗначениеЗаполнено(Элемент.Значение) Тогда
				Если НЕ ЗначениеЗаполнено(НастройкиОбмена) Тогда
					НастройкиОбмена = ОпределитьНастройкиОбменаЭДПоИсточнику(
						Элемент.Значение, Ложь, , , , Ложь);
				КонецЕсли;
				АктуальныйЭД = Элемент.Значение;
				КорневойЭлемент = Неопределено;
				ПредварительноеЗаполнениеДерева(АктуальныйЭД, ДеревоОбъект, Истина, НастройкиОбмена, КорневойЭлемент);
				Если Не КорневойЭлемент = Неопределено Тогда
					ВывестиПодчиненныеДокументы(АктуальныйЭД, КорневойЭлемент, АктуальныйЭД, ТолькоКорень);
				КонецЕсли;
			ИначеЕсли ЗначениеЗаполнено(НастройкиОбмена) Тогда
				СтруктураПараметров = Новый Структура;
				СтруктураПараметров.Вставить("ВидЭД",               НастройкиОбмена.ВидЭД);
				СтруктураПараметров.Вставить("НаправлениеЭД",       НастройкиОбмена.НаправлениеЭД);
				СтруктураПараметров.Вставить("ВерсияРегламентаЭДО", НастройкиОбмена.ВерсияРегламентаЭДО);
				СтруктураПараметров.Вставить("СтатусЭД",            Перечисления.СтатусыЭД.ПустаяСсылка());
				СтруктураПараметров.Вставить("ПрофильНастроекЭДО",  НастройкиОбмена.ПрофильНастроекЭДО);
				СтруктураПараметров.Вставить("СоглашениеЭД",        НастройкиОбмена.СоглашениеЭД);
				СтруктураПараметров.Вставить("СостояниеЭДО",        Перечисления.СостоянияВерсийЭД.НеСформирован);
				
				СтруктураПараметров.Вставить("ТипЭлементаВерсииЭД", Перечисления.ТипыЭлементовВерсииЭД.ПервичныйЭД);
				Если НастройкиОбмена.ВидЭД = Перечисления.ВидыЭД.СчетФактура
					ИЛИ НастройкиОбмена.ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура Тогда
					
					СтруктураПараметров.Вставить("ТипЭлементаВерсииЭД", Перечисления.ТипыЭлементовВерсииЭД.ЭСФ);
				КонецЕсли;
				
				ФорматЭлектронногоДокумента = ЭлектронныеДокументыВнутренний.ФорматЭлектронногоДокументаПоИдентификатору(НастройкиОбмена.ВерсияФормата);
				ЭтоУПД_ДОП_2019 = ЭлектронныеДокументыВнутренний.ПроверитьФорматЭлектронногоДокумента(ФорматЭлектронногоДокумента, "УПД", "2019", "ДОП");
				ЭтоУПД_СЧФДОП_2019 = ЭлектронныеДокументыВнутренний.ПроверитьФорматЭлектронногоДокумента(ФорматЭлектронногоДокумента, "УПД", "2019", "СЧФ+ДОП");
				ЭтоУПД_СЧФ_2019 = ЭлектронныеДокументыВнутренний.ПроверитьФорматЭлектронногоДокумента(ФорматЭлектронногоДокумента, "УПД", "2019", "СЧФ");
				
				Если НастройкиОбмена.ВерсияФормата = "ФНС 5.01 (УПД:Счет-фактура и первичный документ)" ИЛИ ЭтоУПД_СЧФДОП_2019 Тогда
					СтруктураПараметров.Вставить("ТипЭлементаВерсииЭД", Перечисления.ТипыЭлементовВерсииЭД.СЧФДОПУПД);
				ИначеЕсли НастройкиОбмена.ВерсияФормата = "ФНС 5.01 (УПД:Счет-фактура)" ИЛИ ЭтоУПД_СЧФ_2019 Тогда
					СтруктураПараметров.Вставить("ТипЭлементаВерсииЭД", Перечисления.ТипыЭлементовВерсииЭД.СЧФУПД);
				ИначеЕсли НастройкиОбмена.ВерсияФормата = "ФНС 5.01 (УПД:Первичный документ)" ИЛИ ЭтоУПД_ДОП_2019 Тогда
					СтруктураПараметров.Вставить("ТипЭлементаВерсииЭД", Перечисления.ТипыЭлементовВерсииЭД.ДОПУПД);
				ИначеЕсли НастройкиОбмена.ВерсияФормата = "ФНС 5.01 (УКД:Корректировочный счет-фактура и первичный документ)" Тогда
					СтруктураПараметров.Вставить("ТипЭлементаВерсииЭД", Перечисления.ТипыЭлементовВерсииЭД.КСЧФДИСУКД);
				ИначеЕсли НастройкиОбмена.ВерсияФормата = "ФНС 5.01 (УКД:Корректировочный счет-фактура)" Тогда
					СтруктураПараметров.Вставить("ТипЭлементаВерсииЭД", Перечисления.ТипыЭлементовВерсииЭД.КСЧФУКД);
				ИначеЕсли НастройкиОбмена.ВерсияФормата = "ФНС 5.01 (УКД:Первичный документ)" Тогда
					СтруктураПараметров.Вставить("ТипЭлементаВерсииЭД", Перечисления.ТипыЭлементовВерсииЭД.ДИСУКД);
				КонецЕсли;
				
				ПредварительноеЗаполнениеДерева(СтруктураПараметров, ДеревоОбъект, Ложь, НастройкиОбмена);
				
			Иначе
				Возврат;
			КонецЕсли;
		КонецЦикла;
		
		Если ВыводитьНеактуальные Тогда
			ВывестиНеАктуальныеЭД(ДеревоОбъект, АктуальныйЭД, ОбъектСсылка, НастройкиОбмена);
		КонецЕсли;
		
		ОбработатьДерево(ДеревоОбъект);
		
		ЗаполнитьДанныеВПустыхСтроках(ДеревоОбъект);
		
	КонецЕсли;

КонецПроцедуры

Процедура ПредварительноеЗаполнениеДерева(ЭД, ДеревоОбъект, ЭтоАктуальныйЭД, НастройкиОбмена,
	КорневойЭлемент = Неопределено)
	
	Если ЗначениеЗаполнено(НастройкиОбмена) И НастройкиОбмена.Свойство("СоглашениеЭД") Тогда
		ОбменЧерезОператора = НастройкиОбмена.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезСервис1СЭДО
			ИЛИ НастройкиОбмена.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском;
		
		ВерсияФорматаПакета = НастройкиОбмена.ВерсияФорматаПакета;
		
		СписокРеквизитов = "";
		Если ТипЗнч(ЭД) = Тип("ДокументСсылка.ЭлектронныйДокументИсходящий")
			Или ТипЗнч(ЭД) = Тип("ДокументСсылка.ЭлектронныйДокументВходящий") Тогда
			СписокРеквизитов = "ВерсияРегламентаЭДО, ВидЭД, СостояниеЭДО, ТребуетсяИзвещение, ТребуетсяПодтверждение";
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СписокРеквизитов) Тогда
			СвойстваЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЭД, СписокРеквизитов);
		Иначе
			
			СвойстваЭД = ЭД;
			СвойстваЭД.Вставить("ТребуетсяИзвещение", НастройкиОбмена.ТребуетсяИзвещение);
			СвойстваЭД.Вставить("ТребуетсяПодтверждение", НастройкиОбмена.ТребуетсяПодтверждение);
		КонецЕсли;
		
		КорневойЭлемент = Неопределено;
		
		Если ОбменЧерезОператора
			И (ЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.СЧФДОПУПД
				ИЛИ ЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.КСЧФДИСУКД)
			ИЛИ ЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДОПУПД
			ИЛИ ЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДИСУКД Тогда
		
			СтрокаЭСФ                = ДеревоОбъект.Строки.Добавить();
			СтрокаЭСФ.ТипЭД          = ЭД.ТипЭлементаВерсииЭД;
			СтрокаЭСФ.ВидЭД          = ЭД.ВидЭД;
			СтрокаЭСФ.НаправлениеЭД  = НастройкиОбмена.НаправлениеЭД;
			СтрокаЭСФ.СтрокаДоступна = Истина;
			СтрокаЭСФ.АктуальныйЭД   = ЭтоАктуальныйЭД;
			КорневойЭлемент = СтрокаЭСФ;
			
			ТипВстречногоЭД = Перечисления.ТипыЭлементовВерсииЭД.ИнформацияПокупателяУПД;
			Если ЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.КСЧФДИСУКД
				ИЛИ ЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДИСУКД Тогда
				ТипВстречногоЭД = Перечисления.ТипыЭлементовВерсииЭД.ИнформацияПокупателяУКД;
			КонецЕсли;
			
			Если НастройкиОбмена.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
				
				Если ОбменЧерезОператора Тогда
					СтрокаПДО                 = СтрокаЭСФ.Строки.Добавить();
					СтрокаПДО.ТипЭД           = Перечисления.ТипыЭлементовВерсииЭД.ПДОЭСФ;
					СтрокаПДО.ВидЭД           = Перечисления.ВидыЭД.Подтверждение;
					СтрокаПДО.НаправлениеЭД   = Перечисления.НаправленияЭД.Входящий;
					
					НоваяСтрока               = СтрокаПДО.Строки.Добавить();
					НоваяСтрока.ТипЭД         = Перечисления.ТипыЭлементовВерсииЭД.ИППДОЭСФ;
					НоваяСтрока.ВидЭД         = Перечисления.ВидыЭД.ИзвещениеОПолучении;
					НоваяСтрока.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий;
				КонецЕсли;
				
				Если СвойстваЭД.ТребуетсяИзвещение Тогда
					
					СтрокаИП                  = СтрокаЭСФ.Строки.Добавить();
					СтрокаИП.ТипЭД            = Перечисления.ТипыЭлементовВерсииЭД.ИПЭСФ;
					СтрокаИП.ВидЭД            = Перечисления.ВидыЭД.ИзвещениеОПолучении;
					СтрокаИП.НаправлениеЭД    = Перечисления.НаправленияЭД.Исходящий;
					
					Если ОбменЧерезОператора Тогда
						СтрокаПДОИП               = СтрокаИП.Строки.Добавить();
						СтрокаПДОИП.ТипЭД         = Перечисления.ТипыЭлементовВерсииЭД.ПДОИПЭСФ;
						СтрокаПДОИП.ВидЭД         = Перечисления.ВидыЭД.Подтверждение;
						СтрокаПДОИП.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий;
						
						НоваяСтрока               = СтрокаПДОИП.Строки.Добавить();
						НоваяСтрока.ТипЭД         = Перечисления.ТипыЭлементовВерсииЭД.ИППДОИПЭСФ;
						НоваяСтрока.ВидЭД         = Перечисления.ВидыЭД.ИзвещениеОПолучении;
						НоваяСтрока.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий;
					КонецЕсли;
						
				КонецЕсли;
				
				Если ЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.СЧФДОПУПД
					ИЛИ ЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДОПУПД
					ИЛИ ЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.КСЧФДИСУКД
					ИЛИ ЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДИСУКД Тогда
						
						Если СвойстваЭД.ТребуетсяПодтверждение Тогда
						
							ИПСтрока                  = СтрокаЭСФ.Строки.Добавить();
							ИПСтрока.ТипЭД            = ТипВстречногоЭД;
							ИПСтрока.ВидЭД            = ЭД.ВидЭД;
							ИПСтрока.НаправлениеЭД    = Перечисления.НаправленияЭД.Исходящий;
							
							Если ОбменЧерезОператора Тогда
								ПДОИПСтрока               = ИПСтрока.Строки.Добавить();
								ПДОИПСтрока.ТипЭД         = Перечисления.ТипыЭлементовВерсииЭД.ПДОИПУПДУКД;
								ПДОИПСтрока.ВидЭД         = Перечисления.ВидыЭД.Подтверждение;
								ПДОИПСтрока.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий;
								
								ИППДОИПСтрока               = ПДОИПСтрока.Строки.Добавить();
								ИППДОИПСтрока.ТипЭД         = Перечисления.ТипыЭлементовВерсииЭД.ИППДОИПУПДУКД;
								ИППДОИПСтрока.ВидЭД         = Перечисления.ВидыЭД.ИзвещениеОПолучении;
								ИППДОИПСтрока.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий;
							КонецЕсли;
						
						КонецЕсли;
						
				КонецЕсли;
				
			Иначе
				
				Если ОбменЧерезОператора Тогда
					СтрокаПДП                 = СтрокаЭСФ.Строки.Добавить();
					СтрокаПДП.ТипЭД           = Перечисления.ТипыЭлементовВерсииЭД.ПДПЭСФ;
					СтрокаПДП.ВидЭД           = Перечисления.ВидыЭД.Подтверждение;
					СтрокаПДП.НаправлениеЭД   = Перечисления.НаправленияЭД.Входящий;
					
					НоваяСтрока               = СтрокаПДП.Строки.Добавить();
					НоваяСтрока.ТипЭД         = Перечисления.ТипыЭлементовВерсииЭД.ИППДПЭСФ;
					НоваяСтрока.ВидЭД         = Перечисления.ВидыЭД.ИзвещениеОПолучении;
					НоваяСтрока.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий;
				КонецЕсли;
				
				Если СвойстваЭД.ТребуетсяИзвещение Тогда
					
					НоваяСтрока               = СтрокаЭСФ.Строки.Добавить();
					НоваяСтрока.ТипЭД         = Перечисления.ТипыЭлементовВерсииЭД.ИПЭСФ;
					НоваяСтрока.ВидЭД         = Перечисления.ВидыЭД.ИзвещениеОПолучении;
					НоваяСтрока.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий;
				КонецЕсли;
				
				Если ЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.СЧФДОПУПД
					ИЛИ ЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДОПУПД
					ИЛИ ЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.КСЧФДИСУКД
					ИЛИ ЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДИСУКД Тогда
					
					Если СвойстваЭД.ТребуетсяПодтверждение Тогда
						
						ИПСтрока                  = СтрокаЭСФ.Строки.Добавить();
						ИПСтрока.ТипЭД            = ТипВстречногоЭД;
						ИПСтрока.ВидЭД            = ЭД.ВидЭД;
						ИПСтрока.НаправлениеЭД    = Перечисления.НаправленияЭД.Входящий;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли ОбменЧерезОператора
			И (ЭД.ВидЭД = Перечисления.ВидыЭД.СчетФактура
				ИЛИ ЭД.ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура) Тогда
		
			СтрокаЭСФ                = ДеревоОбъект.Строки.Добавить();
			СтрокаЭСФ.ТипЭД          = Перечисления.ТипыЭлементовВерсииЭД.ЭСФ;
			СтрокаЭСФ.ВидЭД          = ЭД.ВидЭД;
			СтрокаЭСФ.НаправлениеЭД  = НастройкиОбмена.НаправлениеЭД;
			СтрокаЭСФ.СтрокаДоступна = Истина;
			СтрокаЭСФ.АктуальныйЭД   = ЭтоАктуальныйЭД;
			КорневойЭлемент = СтрокаЭСФ;
			
			Если НастройкиОбмена.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
				
				СтрокаПДО                 = СтрокаЭСФ.Строки.Добавить();
				СтрокаПДО.ТипЭД           = Перечисления.ТипыЭлементовВерсииЭД.ПДОЭСФ;
				СтрокаПДО.ВидЭД           = Перечисления.ВидыЭД.Подтверждение;
				СтрокаПДО.НаправлениеЭД   = Перечисления.НаправленияЭД.Входящий;
				
				Если СвойстваЭД.ТребуетсяИзвещение Тогда
					
					СтрокаИП                  = СтрокаЭСФ.Строки.Добавить();
					СтрокаИП.ТипЭД            = Перечисления.ТипыЭлементовВерсииЭД.ИПЭСФ;
					СтрокаИП.ВидЭД            = Перечисления.ВидыЭД.ИзвещениеОПолучении;
					СтрокаИП.НаправлениеЭД    = Перечисления.НаправленияЭД.Исходящий;
					
					НоваяСтрока               = СтрокаПДО.Строки.Добавить();
					НоваяСтрока.ТипЭД         = Перечисления.ТипыЭлементовВерсииЭД.ИППДОЭСФ;
					НоваяСтрока.ВидЭД         = Перечисления.ВидыЭД.ИзвещениеОПолучении;
					НоваяСтрока.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий;
					
					СтрокаПДОИП               = СтрокаИП.Строки.Добавить();
					СтрокаПДОИП.ТипЭД         = Перечисления.ТипыЭлементовВерсииЭД.ПДОИПЭСФ;
					СтрокаПДОИП.ВидЭД         = Перечисления.ВидыЭД.Подтверждение;
					СтрокаПДОИП.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий;
					
					НоваяСтрока               = СтрокаПДОИП.Строки.Добавить();
					НоваяСтрока.ТипЭД         = Перечисления.ТипыЭлементовВерсииЭД.ИППДОИПЭСФ;
					НоваяСтрока.ВидЭД         = Перечисления.ВидыЭД.ИзвещениеОПолучении;
					НоваяСтрока.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий;
					
				КонецЕсли;
				
			Иначе
				
				СтрокаПДП                 = СтрокаЭСФ.Строки.Добавить();
				СтрокаПДП.ТипЭД           = Перечисления.ТипыЭлементовВерсииЭД.ПДПЭСФ;
				СтрокаПДП.ВидЭД           = Перечисления.ВидыЭД.Подтверждение;
				СтрокаПДП.НаправлениеЭД   = Перечисления.НаправленияЭД.Входящий;
				
				НоваяСтрока               = СтрокаПДП.Строки.Добавить();
				НоваяСтрока.ТипЭД         = Перечисления.ТипыЭлементовВерсииЭД.ИППДПЭСФ;
				НоваяСтрока.ВидЭД         = Перечисления.ВидыЭД.ИзвещениеОПолучении;
				НоваяСтрока.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий;
				
				Если СвойстваЭД.ТребуетсяИзвещение Тогда
					
					НоваяСтрока               = СтрокаЭСФ.Строки.Добавить();
					НоваяСтрока.ТипЭД         = Перечисления.ТипыЭлементовВерсииЭД.ИПЭСФ;
					НоваяСтрока.ВидЭД         = Перечисления.ВидыЭД.ИзвещениеОПолучении;
					НоваяСтрока.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий;
					
				КонецЕсли;
				
			КонецЕсли;
		ИначеЕсли ЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец
			ИЛИ ЭД.ВидЭД = Перечисления.ВидыЭД.АктИсполнитель
			ИЛИ ЭД.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель Тогда
			
			ТипВстречногоЭД = Перечисления.ТипыЭлементовВерсииЭД.ТОРГ12Покупатель;
			Если ЭД.ВидЭД = Перечисления.ВидыЭД.АктИсполнитель Тогда
				
				ТипВстречногоЭД = Перечисления.ТипыЭлементовВерсииЭД.АктЗаказчик;
			ИначеЕсли ЭД.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель Тогда
				
				ТипВстречногоЭД = Перечисления.ТипыЭлементовВерсииЭД.СоглашениеОбИзмененииСтоимостиПолучатель;
			КонецЕсли;
			
			ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.ПервичныйЭД;
			Если ЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДОП Тогда
				
				ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.ДОП;
			КонецЕсли;
			
			СтрокаПродавец                = ДеревоОбъект.Строки.Добавить();
			СтрокаПродавец.ТипЭД          = ТипЭД;
			СтрокаПродавец.ВидЭД          = ЭД.ВидЭД;
			СтрокаПродавец.НаправлениеЭД  = НастройкиОбмена.НаправлениеЭД;
			СтрокаПродавец.СтрокаДоступна = Истина;
			СтрокаПродавец.АктуальныйЭД   = ЭтоАктуальныйЭД;
			КорневойЭлемент = СтрокаПродавец;
			
			Если ОбменЧерезОператора
				Или ВерсияФорматаПакета = Перечисления.ВерсииФорматаПакетаЭД.Версия30 Тогда
				
				Если НастройкиОбмена.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
					
					СтрокаИП                  = СтрокаПродавец.Строки.Добавить();
					СтрокаИП.ТипЭД            = Перечисления.ТипыЭлементовВерсииЭД.ИОП;
					СтрокаИП.ВидЭД            = Перечисления.ВидыЭД.ИзвещениеОПолучении;
					СтрокаИП.НаправлениеЭД    = Перечисления.НаправленияЭД.Исходящий;
					
					Если СвойстваЭД.ТребуетсяПодтверждение Тогда
						
						СтрокаПокупатель          = СтрокаПродавец.Строки.Добавить();
						СтрокаПокупатель.ТипЭД    = ТипВстречногоЭД;
						СтрокаПокупатель.ВидЭД    = ЭД.ВидЭД;
						СтрокаПокупатель.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий;
						
						// Изменяется набор служебных документов в зависимости от использования версии регламента.
						Если ЭД.ВерсияРегламентаЭДО <> Перечисления.ВерсииРегламентаОбмена1С.Версия20
							И ОбменЧерезОператора Тогда
							
							НоваяСтрока               = СтрокаПокупатель.Строки.Добавить();
							НоваяСтрока.ТипЭД         = Перечисления.ТипыЭлементовВерсииЭД.ПДП;
							НоваяСтрока.ВидЭД         = Перечисления.ВидыЭД.Подтверждение;
							НоваяСтрока.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий;
							
							СтрокаИП                  = СтрокаПокупатель.Строки.Добавить();
							СтрокаИП.ТипЭД            = Перечисления.ТипыЭлементовВерсииЭД.ИОП;
							СтрокаИП.ВидЭД            = Перечисления.ВидыЭД.ИзвещениеОПолучении;
							СтрокаИП.НаправлениеЭД    = Перечисления.НаправленияЭД.Входящий;
						КонецЕсли;
					КонецЕсли;

				Иначе
					
					Если ОбменЧерезОператора Тогда
						СтрокаПДО                 = СтрокаПродавец.Строки.Добавить();
						СтрокаПДО.ТипЭД           = Перечисления.ТипыЭлементовВерсииЭД.ПДП;
						СтрокаПДО.ВидЭД           = Перечисления.ВидыЭД.Подтверждение;
						СтрокаПДО.НаправлениеЭД   = Перечисления.НаправленияЭД.Входящий;
					КонецЕсли;
					
					СтрокаИП                  = СтрокаПродавец.Строки.Добавить();
					СтрокаИП.ТипЭД            = Перечисления.ТипыЭлементовВерсииЭД.ИОП;
					СтрокаИП.ВидЭД            = Перечисления.ВидыЭД.ИзвещениеОПолучении;
					СтрокаИП.НаправлениеЭД    = Перечисления.НаправленияЭД.Входящий;
					
					Если СвойстваЭД.ТребуетсяПодтверждение Тогда
						
						СтрокаПокупатель          = СтрокаПродавец.Строки.Добавить();
						СтрокаПокупатель.ТипЭД    = ТипВстречногоЭД;
						СтрокаПокупатель.ВидЭД    = ЭД.ВидЭД;
						СтрокаПокупатель.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий;
						
						// Изменяется набор служебных документов в зависимости от использования версии регламента.
						Если ЗначениеЗаполнено(ЭД.ВерсияРегламентаЭДО) 
							И ЭД.ВерсияРегламентаЭДО <> Перечисления.ВерсииРегламентаОбмена1С.Версия20 Тогда
							СтрокаИП                  = СтрокаПокупатель.Строки.Добавить();
							СтрокаИП.ТипЭД            = Перечисления.ТипыЭлементовВерсииЭД.ИОП;
							СтрокаИП.ВидЭД            = Перечисления.ВидыЭД.ИзвещениеОПолучении;
							СтрокаИП.НаправлениеЭД    = Перечисления.НаправленияЭД.Исходящий;
						КонецЕсли;
					КонецЕсли;

				КонецЕсли;
			Иначе
				СтрокаПокупатель          = СтрокаПродавец.Строки.Добавить();
				СтрокаПокупатель.ТипЭД    = ТипВстречногоЭД;
				СтрокаПокупатель.ВидЭД    = ЭД.ВидЭД;
				СтрокаПокупатель.НаправлениеЭД = ?(НастройкиОбмена.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий,
					Перечисления.НаправленияЭД.Исходящий, Перечисления.НаправленияЭД.Входящий);
			КонецЕсли;
		ИначеЕсли ЭД.ВидЭД = Перечисления.ВидыЭД.ЗаказТовара
			ИЛИ ЭД.ВидЭД = Перечисления.ВидыЭД.ОтветНаЗаказ Тогда

			СтрокаГлавная                = ДеревоОбъект.Строки.Добавить();
			СтрокаГлавная.ТипЭД          = Перечисления.ТипыЭлементовВерсииЭД.ПервичныйЭД;
			СтрокаГлавная.ВидЭД          = ЭД.ВидЭД;
			СтрокаГлавная.НаправлениеЭД  = НастройкиОбмена.НаправлениеЭД;
			СтрокаГлавная.СтрокаДоступна = Истина;
			СтрокаГлавная.АктуальныйЭД   = ЭтоАктуальныйЭД;
			КорневойЭлемент = СтрокаГлавная;
			
			Если ЭД.ВидЭД = Перечисления.ВидыЭД.ЗаказТовара Тогда
				
				Если ТипЗнч(ЭД) = Тип("ДокументСсылка.ЭлектронныйДокументВходящий") Тогда
					// Извещение о получении
					СтрокаДерева                  = СтрокаГлавная.Строки.Добавить();
					СтрокаДерева.ТипЭД            = Перечисления.ТипыЭлементовВерсииЭД.ИОП;
					СтрокаДерева.ВидЭД            = Перечисления.ВидыЭД.ИзвещениеОПолучении;
					СтрокаДерева.НаправлениеЭД    = Перечисления.НаправленияЭД.Исходящий;
				КонецЕсли;
					
			ИначеЕсли ЭД.ВидЭД = Перечисления.ВидыЭД.ОтветНаЗаказ Тогда
				
				Если ТипЗнч(ЭД) = Тип("ДокументСсылка.ЭлектронныйДокументИсходящий") Тогда
					
					Если ОбменЧерезОператора Тогда
						// Подтверждение доставки
						СтрокаДерева                 = СтрокаГлавная.Строки.Добавить();
						СтрокаДерева.ТипЭД           = Перечисления.ТипыЭлементовВерсииЭД.ПДП;
						СтрокаДерева.ВидЭД           = Перечисления.ВидыЭД.Подтверждение;
						СтрокаДерева.НаправлениеЭД   = Перечисления.НаправленияЭД.Входящий;
					КонецЕсли;
					
					// Извещение о получении
					СтрокаДерева                  = СтрокаГлавная.Строки.Добавить();
					СтрокаДерева.ТипЭД            = Перечисления.ТипыЭлементовВерсииЭД.ИОП;
					СтрокаДерева.ВидЭД            = Перечисления.ВидыЭД.ИзвещениеОПолучении;
					СтрокаДерева.НаправлениеЭД    = Перечисления.НаправленияЭД.Входящий;
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			
			НаправлениеЭД = НастройкиОбмена.НаправлениеЭД;
			Если ЭД.ВидЭД = Перечисления.ВидыЭД.КаталогТоваров Тогда
				НаправлениеЭД = ?(ТипЗнч(ЭД) = Тип("ДокументСсылка.ЭлектронныйДокументИсходящий"),
					Перечисления.НаправленияЭД.Исходящий,
					Перечисления.НаправленияЭД.Входящий);
			КонецЕсли;
			
			СтрокаПродавец                = ДеревоОбъект.Строки.Добавить();
			СтрокаПродавец.ТипЭД          = Перечисления.ТипыЭлементовВерсииЭД.ПервичныйЭД;
			СтрокаПродавец.ВидЭД          = ЭД.ВидЭД;
			СтрокаПродавец.НаправлениеЭД  = НаправлениеЭД;
			СтрокаПродавец.СтрокаДоступна = Истина;
			СтрокаПродавец.АктуальныйЭД   = ЭтоАктуальныйЭД;
			КорневойЭлемент = СтрокаПродавец;
			
			Если ОбменЧерезОператора
				Или ВерсияФорматаПакета = Перечисления.ВерсииФорматаПакетаЭД.Версия30 Тогда
				
				Если НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
					
					Если СвойстваЭД.ТребуетсяИзвещение Тогда
						СтрокаИП                  = СтрокаПродавец.Строки.Добавить();
						СтрокаИП.ТипЭД            = Перечисления.ТипыЭлементовВерсииЭД.ИОП;
						СтрокаИП.ВидЭД            = Перечисления.ВидыЭД.ИзвещениеОПолучении;
						СтрокаИП.НаправлениеЭД    = Перечисления.НаправленияЭД.Исходящий;
					КонецЕсли;
					
				Иначе
					Если ОбменЧерезОператора Тогда
						СтрокаПДО                 = СтрокаПродавец.Строки.Добавить();
						СтрокаПДО.ТипЭД           = Перечисления.ТипыЭлементовВерсииЭД.ПДП;
						СтрокаПДО.ВидЭД           = Перечисления.ВидыЭД.Подтверждение;
						СтрокаПДО.НаправлениеЭД   = Перечисления.НаправленияЭД.Входящий;
					КонецЕсли;
					
					Если СвойстваЭД.ТребуетсяИзвещение Тогда
						СтрокаИП                  = СтрокаПродавец.Строки.Добавить();
						СтрокаИП.ТипЭД            = Перечисления.ТипыЭлементовВерсииЭД.ИОП;
						СтрокаИП.ВидЭД            = Перечисления.ВидыЭД.ИзвещениеОПолучении;
						СтрокаИП.НаправлениеЭД    = Перечисления.НаправленияЭД.Входящий;
					КонецЕсли;
						
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ВывестиПодчиненныеДокументы(ТекущийДокумент, ДеревоРодитель, АктуальныйЭД = Неопределено, ТолькоКорень = Ложь)

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ПрисоединенныеФайлы.Ссылка,
	|	ПрисоединенныеФайлы.Ссылка.СтатусЭД КАК СтатусЭД,
	|	ПрисоединенныеФайлы.Ссылка.ДатаИзмененияСтатусаЭД КАК ДатаИзмененияСтатусаЭД,
	|	ПрисоединенныеФайлы.Ссылка.ЭлектронныйДокументВладелец КАК ЭлектронныйДокументВладелец,
	|	ПрисоединенныеФайлы.Ссылка.НаправлениеЭД КАК НаправлениеЭД,
	|	ПрисоединенныеФайлы.Ссылка.ВладелецФайла КАК ВладелецФайла,
	|	ПрисоединенныеФайлы.Ссылка.Представление КАК Представление,
	|	ПрисоединенныеФайлы.Ссылка.ПометкаУдаления КАК ПометкаУдаления,
	|	ВЫБОР
	|		КОГДА ПодчиненныеПрисоединенныеФайлы.Ссылка ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК НаличиеПодчиненныхДокументов,
	|	ПрисоединенныеФайлы.Ссылка.ТипЭлементаВерсииЭД КАК ТипЭД,
	|	ВЫБОР
	|		КОГДА ПрисоединенныеФайлы.Ссылка.ТипЭлементаВерсииЭД В (&СписокТиповЭД)
	|			ТОГДА ВЫБОР
	|					КОГДА ПрисоединенныеФайлы.Ссылка.НаправлениеЭД = ЗНАЧЕНИЕ(Перечисление.НаправленияЭД.Исходящий)
	|						ТОГДА ПрисоединенныеФайлы.Ссылка.ДатаСоздания
	|					ИНАЧЕ ВЫБОР
	|							КОГДА ПрисоединенныеФайлы.Ссылка.ДатаФормированияЭДОтправителем = ДАТАВРЕМЯ(1, 1, 1)
	|								ТОГДА ПрисоединенныеФайлы.Ссылка.ДатаСоздания
	|							ИНАЧЕ ПрисоединенныеФайлы.Ссылка.ДатаФормированияЭДОтправителем
	|						КОНЕЦ
	|				КОНЕЦ
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК Версия
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПрисоединенныеФайлы.Ссылка КАК Ссылка
	|	ИЗ
	|		Справочник.ЭДПрисоединенныеФайлы КАК ПрисоединенныеФайлы
	|	ГДЕ
	|		ПрисоединенныеФайлы.ВладелецФайла = &ОбъектВладелец
	|		И НЕ ПрисоединенныеФайлы.ТипЭлементаВерсииЭД В (&ТиповЭДИсключения)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ПрисоединенныеФайлы.Ссылка
	|	ИЗ
	|		Справочник.ЭДПрисоединенныеФайлы КАК ПрисоединенныеФайлы
	|	ГДЕ
	|		ПрисоединенныеФайлы.ЭлектронныйДокументВладелец = &ОбъектВладелец
	|		И НЕ ПрисоединенныеФайлы.ТипЭлементаВерсииЭД В (&ТиповЭДИсключения)) КАК ПрисоединенныеФайлы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЭДПрисоединенныеФайлы КАК ПодчиненныеПрисоединенныеФайлы
	|		ПО (НЕ ПодчиненныеПрисоединенныеФайлы.ТипЭлементаВерсииЭД В (&ТиповЭДИсключения))
	|			И ПрисоединенныеФайлы.Ссылка = ПодчиненныеПрисоединенныеФайлы.ЭлектронныйДокументВладелец
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаИзмененияСтатусаЭД";
		
	Запрос.УстановитьПараметр("СписокТиповЭД", МассивТиповЭДКорневыхЭлементовДерева());
	Запрос.УстановитьПараметр("ТиповЭДИсключения", МассивТиповЭДНеОтображаемыхВДереве());
	Запрос.УстановитьПараметр("ОбъектВладелец", ТекущийДокумент);
	Выборка = Запрос.Выполнить().Выбрать();

	ДатаАктуальногоЭД = Неопределено;
	
	ПараметрыПоискаСтроки = Новый Структура("ТипЭД, НаправлениеЭД");
	
	Пока Выборка.Следующий() Цикл
		
		Если НЕ ЭлектронныеДокументыСлужебныйВызовСервера.ЭтоСлужебныйДокумент(Выборка.Ссылка) Тогда
			ЗаполнитьСтрокуДерева(ДеревоРодитель, Выборка, ДатаАктуальногоЭД);
			Если ТолькоКорень Тогда
				Прервать
			Иначе
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Если ТолькоКорень Тогда
			Продолжить;
		КонецЕсли;
		
		ТипЭД = ?(Выборка.ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДО,
			Перечисления.ТипыЭлементовВерсииЭД.ПДП,
			Выборка.ТипЭД);
			
		Если ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.ПОА
			ИЛИ ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.УОУ Тогда
			МассивСтрокДерева = Неопределено;
		Иначе
			ПараметрыПоискаСтроки.ТипЭД = ТипЭД;
			ПараметрыПоискаСтроки.НаправлениеЭД = Выборка.НаправлениеЭД;
			МассивСтрокДерева = ДеревоРодитель.Строки.НайтиСтроки(ПараметрыПоискаСтроки, Истина);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(МассивСтрокДерева) Тогда
			
			Если ЗначениеЗаполнено(Выборка.ЭлектронныйДокументВладелец) Тогда
				ПараметрыПоискаВладельца = Новый Структура("Ссылка",Выборка.ЭлектронныйДокументВладелец);
				МассивСтрокДереваВладельца = ДеревоРодитель.Строки.НайтиСтроки(ПараметрыПоискаВладельца, Ложь);
				Если МассивСтрокДереваВладельца.Количество() > 0 Тогда
					СтрокаДерева = МассивСтрокДереваВладельца[0].Строки.Добавить();
				Иначе
					СтрокаДерева = ДеревоРодитель.Строки.Добавить();
				КонецЕсли;
			Иначе
				СтрокаДерева = ДеревоРодитель.Строки.Добавить();
			КонецЕсли;
			
			ЗаполнитьСтрокуДерева(СтрокаДерева, Выборка, ДатаАктуальногоЭД);
			Если ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.ПОА Тогда
				СтрокаДерева.ВидЭД = Перечисления.ВидыЭД.ПредложениеОбАннулировании;
			ИначеЕсли ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.УОУ Тогда
				СтрокаДерева.ВидЭД = Перечисления.ВидыЭД.УведомлениеОбУточнении;
			КонецЕсли;
			
			Продолжить;
		КонецЕсли;
		
		Для Каждого СтрокаДерева Из МассивСтрокДерева Цикл
			ЗаполнитьСтрокуДерева(СтрокаДерева, Выборка, ДатаАктуальногоЭД);
		КонецЦикла;
		
	КонецЦикла;

КонецПроцедуры

// Процедура добавляет в дерево неактуальные первичные ЭД
// с полной структурой подчиненности.
Процедура ВывестиНеАктуальныеЭД(ДеревоОбъект, АктуальныйЭД, ОбъектСсылка, НастройкиОбмена)

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЭлектронныйДокументИсходящийДокументыОснования.Ссылка КАК СсылкаНаОбъект,
	|	ЭлектронныйДокументИсходящийДокументыОснования.ДокументОснование КАК Ссылка
	|ИЗ
	|	Документ.ЭлектронныйДокументИсходящий.ДокументыОснования КАК ЭлектронныйДокументИсходящийДокументыОснования
	|ГДЕ
	|	ЭлектронныйДокументИсходящийДокументыОснования.ДокументОснование = &ОбъектСсылка
	|	И НЕ ЭлектронныйДокументИсходящийДокументыОснования.Ссылка = &АктуальныйЭД
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЭлектронныйДокументВходящийДокументыОснования.Ссылка,
	|	ЭлектронныйДокументВходящийДокументыОснования.ДокументОснование
	|ИЗ
	|	Документ.ЭлектронныйДокументВходящий.ДокументыОснования КАК ЭлектронныйДокументВходящийДокументыОснования
	|ГДЕ
	|	ЭлектронныйДокументВходящийДокументыОснования.ДокументОснование = &ОбъектСсылка
	|	И НЕ ЭлектронныйДокументВходящийДокументыОснования.Ссылка = &АктуальныйЭД";

	Запрос.УстановитьПараметр("ОбъектСсылка", ОбъектСсылка);
	Запрос.УстановитьПараметр("АктуальныйЭД", АктуальныйЭД);

	Результат = Запрос.Выполнить();

	Выборка = Результат.Выбрать();

	Пока Выборка.Следующий() Цикл
		КорневойЭлемент = Неопределено;
		ПредварительноеЗаполнениеДерева(Выборка.СсылкаНаОбъект, ДеревоОбъект, Ложь, НастройкиОбмена, КорневойЭлемент);
		Если ЗначениеЗаполнено(КорневойЭлемент) Тогда
			ВывестиПодчиненныеДокументы(Выборка.СсылкаНаОбъект, КорневойЭлемент, Выборка.Ссылка);
		КонецЕсли;
	КонецЦикла;

	ДеревоОбъект.Строки.Сортировать("Версия");
	
КонецПроцедуры

Процедура ОбработатьДерево(ДеревоОбъект)
	
	Отбор = Новый Структура("АктуальныйЭД", Истина);
	
	АктуальныеСтроки = ДеревоОбъект.Строки.НайтиСтроки(Отбор, Истина);
	
	ЭдНеСформирован = (АктуальныеСтроки.Количество()=0);
	
	Для Каждого Строка Из ДеревоОбъект.Строки Цикл
		
		Если Строка.АктуальныйЭД Или ЭдНеСформирован Тогда
			
			Если НЕ ЗначениеЗаполнено(Строка.Ссылка) Тогда
				
				Если (НЕ ЗначениеЗаполнено(Строка.Родитель) ИЛИ ЗначениеЗаполнено(Строка.Родитель.Ссылка))
					И Строка.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий
					И НЕ ЭтоОтветныйТитул(Строка.ТипЭД) Тогда
					
					Если Не Строка.ВидЭД = Перечисления.ВидыЭД.ПроизвольныйЭД Тогда 
						Строка.ОжидаемоеДействие = Перечисления.ОжидаемоеДействиеЭД.Сформировать;
					КонецЕсли;
					Если ЗначениеЗаполнено(Строка.Родитель) Тогда
						Если ЗначениеЗаполнено(Строка.Родитель.Ссылка) Тогда
							
							Если ЭлектронныеДокументыСлужебныйВызовСервера.ДОЗакрытПринудительно(Строка.Родитель.Ссылка.ВладелецФайла) Тогда
								Строка.ОжидаемоеДействие = Перечисления.ОжидаемоеДействиеЭД.ПустаяСсылка();
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
					
				КонецЕсли;
			Иначе
				Если НЕ ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Строка.Ссылка, "ПометкаУдаления") Тогда
					Строка.ОжидаемоеДействие = ОжидаемоеДействиеПоТекущемуСтатусу(Строка);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Строка.Ссылка) Тогда
			Строка.ОжидаемоеДействиеКонтрагента = ПолучитьОжидаемоеДействиеКонтрагента(Строка,Строка.Ссылка.ВладелецФайла);
		Иначе
			Строка.ОжидаемоеДействиеКонтрагента = ПолучитьОжидаемоеДействиеКонтрагента(Строка,Неопределено);
		КонецЕсли;
		Строка.СтрокаДоступна = ?(ЗначениеЗаполнено(Строка.ОжидаемоеДействие), Истина, Ложь);
		Строка.Представление = СтрЗаменить(Строка.Представление, "_", " ");
		
		Если Строка.Строки.Количество() > 0 Тогда
			ОбработатьДерево(Строка);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеВПустыхСтроках(ДеревоОбъект)
	
	СтруктураПараметров = Новый Структура;
	Для Каждого Строка Из ДеревоОбъект.Строки Цикл
		Если НЕ ЗначениеЗаполнено(Строка.Ссылка) Тогда
			СтруктураПараметров.Вставить("ТипЭД", Строка.ТипЭД);
			Строка.Представление = ОпределитьПредставлениеЭД(Строка.ВидЭД, СтруктураПараметров);
			Строка.СтатусЭД = Перечисления.СтатусыЭД[?(Строка.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий, "НеСформирован", "НеПолучен")];
		КонецЕсли;
		Если Строка.Строки.Количество() > 0 Тогда
			ЗаполнитьДанныеВПустыхСтроках(Строка);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция МассивТиповЭДКорневыхЭлементовДерева()
	
	СписокТиповЭД = Новый Массив;	
	СписокТиповЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ПервичныйЭД);
	СписокТиповЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ЭСФ);
	СписокТиповЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.СЧФДОПУПД);
	СписокТиповЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.СЧФУПД);
	СписокТиповЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ДОПУПД);
	СписокТиповЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.КСЧФДИСУКД);
	СписокТиповЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.КСЧФУКД);
	СписокТиповЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ДИСУКД);
	СписокТиповЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ДОП);
	
	Возврат СписокТиповЭД;
	
КонецФункции

Функция МассивТиповЭДНеОтображаемыхВДереве()
	
	СписокТиповЭД = Новый Массив;
	СписокТиповЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ДополнительныйЭД);
	
	Возврат СписокТиповЭД;
	
КонецФункции

Функция ОжидаемоеДействиеПоТекущемуСтатусу(Строка)
	
	ВозвращаемоеЗначение = Перечисления.ОжидаемоеДействиеЭД.ПустаяСсылка();
	
	СостояниеЭД = ОпределитьСостояниеВерсииПоСтатусуЭД(Строка.Ссылка);
	Если СостояниеЭД = Перечисления.СостоянияВерсийЭД.ОбменЗавершен
		Или СостояниеЭД = Перечисления.СостоянияВерсийЭД.ОбменЗавершенСИсправлением
		Или СостояниеЭД = Перечисления.СостоянияВерсийЭД.ОжидаетсяИзвещениеОПолучении Тогда
		
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	СвойстваЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Строка.Ссылка, "ВладелецФайла, НаправлениеЭД");
	ДОЗакрыт = ЭлектронныеДокументыСлужебныйВызовСервера.ДОЗакрытПринудительно(СвойстваЭД.ВладелецФайла);

	Если ДОЗакрыт Тогда
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	ТекущийСтатусЭД = Строка.СтатусЭД;
	ЭтоСлужебныйЭД = ЭтоИзвещениеОПолучении(Строка.ТипЭД)
		ИЛИ ЭтоПодтверждение(Строка.ТипЭД)
		ИЛИ ЭтоУведомлениеОбУточнении(Строка.ТипЭД);
	
	Если ТекущийСтатусЭД = Перечисления.СтатусыЭД.ОшибкаПередачи Тогда
		
	ИначеЕсли ТекущийСтатусЭД = Перечисления.СтатусыЭД.Отклонен
		ИЛИ ТекущийСтатусЭД = Перечисления.СтатусыЭД.ОтклоненПолучателем Тогда
		
	ИначеЕсли НЕ ЭтоСлужебныйЭД И ТекущийСтатусЭД = Перечисления.СтатусыЭД.Утвержден
		И ЭтоТитулФНС(СвойстваЭД.ВладелецФайла)
		И СвойстваЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
		
		Возврат ВозвращаемоеЗначение;
		
	ИначеЕсли Строка.ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.ПОА
		И ТекущийСтатусЭД = Перечисления.СтатусыЭД.Получен Тогда
		ВозвращаемоеЗначение = Перечисления.ОжидаемоеДействиеЭД.Принять;
	Иначе
		НастройкиОбменаДляСтатусов = НастройкиОбменаЭД(Строка.Ссылка);
		МассивСтатусовЭД = ВернутьМассивСтатусовЭД(НастройкиОбменаДляСтатусов);
		
		Если МассивСтатусовЭД.Количество() > 0 Тогда
			ИндексТекСтатуса = МассивСтатусовЭД.Найти(ТекущийСтатусЭД);
			Если ИндексТекСтатуса <> Неопределено Тогда
				
				Если ИндексТекСтатуса + 1 < МассивСтатусовЭД.Количество() Тогда
					СледующийСтатус = МассивСтатусовЭД[ИндексТекСтатуса + 1];
					
					Если ТекущийСтатусЭД = Перечисления.СтатусыЭД.Получен
						ИЛИ ТекущийСтатусЭД = Перечисления.СтатусыЭД.Сформирован
								И СледующийСтатус = Перечисления.СтатусыЭД.Утвержден Тогда
						
						ВозвращаемоеЗначение = Перечисления.ОжидаемоеДействиеЭД.Утвердить;
						Если НЕ (НЕ НемедленнаяОтправкаЭД()
								ИЛИ ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьЗначениеФункциональнойОпции("ИспользоватьЭлектронныеПодписиЭД")) Тогда
								
							ВозвращаемоеЗначение = Перечисления.ОжидаемоеДействиеЭД.УтвердитьОтправить;
						КонецЕсли;
						
					ИначеЕсли ТекущийСтатусЭД = Перечисления.СтатусыЭД.Сформирован
								И СледующийСтатус <> Перечисления.СтатусыЭД.Утвержден
							ИЛИ ТекущийСтатусЭД = Перечисления.СтатусыЭД.Утвержден
							ИЛИ ТекущийСтатусЭД = Перечисления.СтатусыЭД.Подписан Тогда
						Если СледующийСтатус = Перечисления.СтатусыЭД.Подписан Тогда							
							ВозвращаемоеЗначение = Перечисления.ОжидаемоеДействиеЭД.Подписать;
							Если НемедленнаяОтправкаЭД() Тогда
								ВозвращаемоеЗначение = Перечисления.ОжидаемоеДействиеЭД.ПодписатьОтправить;
							КонецЕсли;
						ИначеЕсли СледующийСтатус = Перечисления.СтатусыЭД.ПодготовленКОтправке
							ИЛИ СледующийСтатус = Перечисления.СтатусыЭД.ПодготовленоПодтверждение Тогда
							
							ВозвращаемоеЗначение = Перечисления.ОжидаемоеДействиеЭД.Отправить;
						КонецЕсли;
					ИначеЕсли ТекущийСтатусЭД = Перечисления.СтатусыЭД.ПодготовленКОтправке Тогда
						
						Если СледующийСтатус = Перечисления.СтатусыЭД.Доставлен Тогда
							ВозвращаемоеЗначение = Перечисления.ОжидаемоеДействиеЭД.ПустаяСсылка();
						Иначе
							ВозвращаемоеЗначение = Перечисления.ОжидаемоеДействиеЭД.Отправить;
						КонецЕсли;
						
					ИначеЕсли ТекущийСтатусЭД = Перечисления.СтатусыЭД.ПодготовленоПодтверждение
						И СледующийСтатус = Перечисления.СтатусыЭД.ОтправленоПодтверждение Тогда
						ВозвращаемоеЗначение = Перечисления.ОжидаемоеДействиеЭД.Отправить;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Процедура ЗаполнитьСтрокуДерева(СтрокаДерева, Выборка, ДатаАктуальногоЭД)
	
	ЗаполнитьЗначенияСвойств(СтрокаДерева, Выборка,
		"Ссылка, СтатусЭД, ДатаИзмененияСтатусаЭД, НаправлениеЭД, Представление, ПометкаУдаления, Версия, ТипЭД");
	
	СтруктураПараметров = Новый Структура;
	Если Выборка.ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.СЧФДОПУПД
		ИЛИ Выборка.ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.СЧФУПД
		ИЛИ Выборка.ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.ДОПУПД
		ИЛИ Выборка.ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.КСЧФДИСУКД
		ИЛИ Выборка.ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.КСЧФУКД
		ИЛИ Выборка.ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.ДИСУКД
		ИЛИ Выборка.ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.ДОП
		ИЛИ Выборка.ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.ПервичныйЭД
		ИЛИ Выборка.ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.ЭСФ Тогда
		
		СвойстваЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Выборка.ВладелецФайла,"НомерДокументаОтправителя,ДатаДокументаОтправителя");

		СтруктураПараметров.Вставить("НомерВладельца", СвойстваЭД.НомерДокументаОтправителя);
		СтруктураПараметров.Вставить("ДатаВладельца",  СвойстваЭД.ДатаДокументаОтправителя);
	КонецЕсли;
	СтруктураПараметров.Вставить("ТипЭД",              Выборка.ТипЭД);

	СтрокаДерева.Представление = ОпределитьПредставлениеЭД(СтрокаДерева.ВидЭД, СтруктураПараметров);
	
	// Для входящих ЭД актуальность меняется вручную. В связи с этим надо выделять в списке
	// цветом более актуальные ЭД. Для этого в дереве есть реквизит "ДатаЭДБольшеАктуального",
	// а так же для сравнивания текущей даты создания ЭД с датой актуального ЭД, существует
	// реквизит объекта "ДатаАктуальногоЭД". Необходимо заполнить их.
	СтрокаДерева.ДатаЭДБольшеАктуального = Ложь;
	Если СтрокаДерева.АктуальныйЭД Тогда
		Если НЕ ЗначениеЗаполнено(ДатаАктуальногоЭД) И ЗначениеЗаполнено(Выборка.Версия) Тогда
			ДатаАктуальногоЭД = Выборка.Версия;
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(ДатаАктуальногоЭД) И ЗначениеЗаполнено(Выборка.Версия)
		И ДатаАктуальногоЭД < Выборка.Версия Тогда
		СтрокаДерева.ДатаЭДБольшеАктуального = Истина;
	КонецЕсли;
		
КонецПроцедуры

Функция ПолучитьОжидаемоеДействиеКонтрагента(Строка,ВладелецФайла)
	
	ВозвращаемоеЗначение = "";
	
	ВерсияСтатусуЭД = ОпределитьСостояниеВерсииПоСтатусуЭД(Строка.Ссылка);
	Если ВерсияСтатусуЭД = Перечисления.СостоянияВерсийЭД.ОбменЗавершен
		Или ВерсияСтатусуЭД = Перечисления.СостоянияВерсийЭД.ОбменЗавершенСИсправлением
		Или ВерсияСтатусуЭД = Перечисления.СостоянияВерсийЭД.ИзвещениеНаПодписи
		Или ВерсияСтатусуЭД = Перечисления.СостоянияВерсийЭД.ОжидаетсяОтправкаИзвещения Тогда
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;

	
	Если Строка.ВидЭД = Перечисления.ВидыЭД.ИзвещениеОПолучении
		ИЛИ Строка.ВидЭД = Перечисления.ВидыЭД.Подтверждение
		ИЛИ Строка.ВидЭД = Перечисления.ВидыЭД.УведомлениеОбУточнении Тогда
		
		Если Строка.ВидЭД = Перечисления.ВидыЭД.Подтверждение И НЕ ЗначениеЗаполнено(Строка.Ссылка)
			И ЗначениеЗаполнено(Строка.Родитель.Ссылка)
			И (Строка.Родитель.СтатусЭД = Перечисления.СтатусыЭД.ПереданОператору
			ИЛИ Строка.Родитель.СтатусЭД = Перечисления.СтатусыЭД.Отправлен
			ИЛИ Строка.Родитель.СтатусЭД = Перечисления.СтатусыЭД.Получен
			ИЛИ Строка.Родитель.СтатусЭД = Перечисления.СтатусыЭД.Доставлен) Тогда
			
			ВозвращаемоеЗначение = НСтр("ru = 'Подтверждения оператора ЭДО'");
		ИначеЕсли (Строка.ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.ИПУУЭСФ
				ИЛИ Строка.ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.ИПЭСФ)
				И Строка.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий
				И ЗначениеЗаполнено(Строка.Родитель.Ссылка) И (Строка.Родитель.СтатусЭД = Перечисления.СтатусыЭД.Отправлен
					ИЛИ Строка.Родитель.СтатусЭД = Перечисления.СтатусыЭД.ПереданОператору
					ИЛИ Строка.Родитель.СтатусЭД = Перечисления.СтатусыЭД.Доставлен)
				И НЕ ЗначениеЗаполнено(Строка.Ссылка) Тогда
			
			ВозвращаемоеЗначение = НСтр("ru = 'Извещения о получении'");
		КонецЕсли;
		
	Иначе
		Если Строка.СтатусЭД = Перечисления.СтатусыЭД.ПереданОператору Тогда
			
			ВозвращаемоеЗначение = НСтр("ru = 'Подтверждения отправки'");
			
			// Изменения в поведении дерева для версии регламента 20.
			Если ВладелецФайла.ВерсияРегламентаЭДО = Перечисления.ВерсииРегламентаОбмена1С.Версия20
				И ЭтоОтветныйТитул(Строка.ТипЭД) Тогда
				
				ВозвращаемоеЗначение = "";
			КонецЕсли;
		ИначеЕсли Строка.СтатусЭД = Перечисления.СтатусыЭД.Отправлен Тогда
			
			ВозвращаемоеЗначение = НСтр("ru = 'Подтверждения о доставке'");
		КонецЕсли;
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Добавляет на форму страницы для отображения электронных документов и реквизиты для хранения табличных документов.
//
// Параметры:
//  Форма			 - УправляемаяФорма - форма, на которую требуется добавить новые элементы
//  ДеревоЗначений	 - ДеревоЗначений - дерево, содержащее ссылки на справочник ЭДПрисоединенныеФайлы которые требуется вывести на форме.
//
Процедура СоздатьРеквизитыИЭлементыДляПечатныхФорм(Форма, ДеревоЗначений)  Экспорт 
	
	ТаблицаЭД = ЭлектронныеДокументыИзДереваЗначений(ДеревоЗначений);
		
	МассивНовыхРеквизитовЭД = Новый Массив;
	
	Для Каждого СтрокаТаблицы Из ТаблицаЭД Цикл
		
		Если СтрокаТаблицы.ВидЭД = Перечисления.ВидыЭД.ПроизвольныйЭД Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураПодписей = ПодписиЭлектронногоДокумента(СтрокаТаблицы.Ссылка, СтрокаТаблицы.ТипЭД);
		
		ПараметрыПросмотра = Новый Структура;
		ПараметрыПросмотра.Вставить("УникальныйИдентификатор", Форма.УникальныйИдентификатор);
		ПараметрыПросмотра.Вставить("СтруктураПодписей", СтруктураПодписей);
		ПараметрыПросмотра.Вставить("СкрыватьИдентификаторДокумента", Ложь);
		ПараметрыПросмотра.Вставить("СкрыватьДопДанные", Форма.ОтключитьВыводДопДанных);
		ПараметрыПросмотра.Вставить("СкрыватьКопияВерна", Форма.ОтключитьВыводКопияВерна);
		
		ДанныеЭД = ЭлектронныеДокументыВнутренний.ФайлДанныхЭД(СтрокаТаблицы.Ссылка, ПараметрыПросмотра);		
		СтрокаТаблицы.ДанныеЭД = ДанныеЭД;
		
		Если Форма.Элементы.Найти(СтрокаТаблицы.ИмяРеквизита) = Неопределено Тогда
			
			Если ТипЗнч(СтрокаТаблицы.ДанныеЭД) = Тип("ТабличныйДокумент") Тогда
				РеквизитФормы = Новый РеквизитФормы(СтрокаТаблицы.ИмяРеквизита, Новый ОписаниеТипов("ТабличныйДокумент"));
			Иначе
				РеквизитФормы = Новый РеквизитФормы(СтрокаТаблицы.ИмяРеквизита, Новый ОписаниеТипов("Строка"));
			КонецЕсли;
			
			МассивНовыхРеквизитовЭД.Добавить(РеквизитФормы);
		КонецЕсли;
	КонецЦикла;
	
	Если МассивНовыхРеквизитовЭД.Количество() > 0 Тогда	
		Форма.ИзменитьРеквизиты(МассивНовыхРеквизитовЭД);
	КонецЕсли;
		
	Для Каждого СтрокаТаблицы Из ТаблицаЭД Цикл
		
		Элемент = Форма.Элементы.Найти(СтрокаТаблицы.ИмяРеквизита); 
		
		Если Элемент = Неопределено Тогда
			
			ИмяСтраницы = "Страница" + СтрокаТаблицы.ИмяРеквизита;
			Страница = Форма.Элементы.Добавить(ИмяСтраницы, Тип("ГруппаФормы"), Форма.Элементы.СтраницыЭД);
			Страница.Вид = ВидГруппыФормы.Страница;
			Страница.ОтображатьЗаголовок = Ложь;
			Страница.Видимость = Истина;
			
			// Создание элементов под табличные документы.
			Если ТипЗнч(СтрокаТаблицы.ДанныеЭД) = Тип("ТабличныйДокумент") Тогда
				
				Форма[СтрокаТаблицы.ИмяРеквизита] = СтрокаТаблицы.ДанныеЭД;
				
				НовыйЭлемент = Форма.Элементы.Добавить(СтрокаТаблицы.ИмяРеквизита, Тип("ПолеФормы"), Страница);
				НовыйЭлемент.Вид = ВидПоляФормы.ПолеТабличногоДокумента;
				НовыйЭлемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
				НовыйЭлемент.ПутьКДанным = СтрокаТаблицы.ИмяРеквизита;
				НовыйЭлемент.Редактирование = Ложь;
				
				НовыйЭлемент.УстановитьДействие("ОбработкаРасшифровки","Подключаемый_ТабличныйДокументОбработкаРасшифровки")
			Иначе
				
			КонецЕсли;
			
		Иначе
			
			Если ТипЗнч(СтрокаТаблицы.ДанныеЭД) = Тип("ТабличныйДокумент") Тогда
				Форма[СтрокаТаблицы.ИмяРеквизита].Очистить();
				
				ЭлектронныеДокументыВнутренний.ВывестиОбластьВТабличныйДокумент(Форма[СтрокаТаблицы.ИмяРеквизита], СтрокаТаблицы.ДанныеЭД, "");
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьТаблицуРекурсивно(ДеревоЗначений,ТаблицаЭД)
	
	Для Каждого СтрокаДерева Из ДеревоЗначений Цикл
		
		Если ЗначениеЗаполнено(СтрокаДерева.Ссылка) Тогда
			НоваяСтрока = ТаблицаЭД.Добавить();
			НоваяСтрока.Ссылка = СтрокаДерева.Ссылка;
			НоваяСтрока.ТипЭД = СтрокаДерева.ТипЭД;
			НоваяСтрока.ВидЭД = СтрокаДерева.ВидЭД;
			
			ОбъектМетаданных = СтрокаДерева.ТипЭД.Метаданные();
			ИндексЗначения = Перечисления[ОбъектМетаданных.Имя].Индекс(СтрокаДерева.ТипЭД);
			ИмяЗначенияПеречисления = ОбъектМетаданных.ЗначенияПеречисления[ИндексЗначения].Имя;
			
			НоваяСтрока.ИмяРеквизита = "ТабличныйДокумент" 
				+ ?(СтрокаДерева.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий, "Входящий", "Исходящий")
				+ ?(СтрокаДерева.ВидЭД = Перечисления.ВидыЭД.ПроизвольныйЭД, "Произвольный", "")
				+ ИмяЗначенияПеречисления;
				
			СтрокаДерева.ИмяРеквизита = НоваяСтрока.ИмяРеквизита;
		КонецЕсли;
		
		Если СтрокаДерева.Строки.Количество() > 0 Тогда
			ЗаполнитьТаблицуРекурсивно(СтрокаДерева.Строки,ТаблицаЭД);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Формирует таблицу способов отражения входящих документов по имени профиля.
//
// Параметры:
//  Профиль	 - Строка - имя профиля настроек: "Автоматически", "Вручную", "Поставщик", "Покупатель".
// 
// Возвращаемое значение:
//  ТаблицаЗначений - таблица, содержащая колонки "ВходящийДокумент" и "СпособОбработки".
//
Функция ТаблицаПредопределенногоПрофиля(Профиль) Экспорт

	
	ТаблицаПрофиля = Новый ТаблицаЗначений;
	ТаблицаПрофиля.Колонки.Добавить("ВходящийДокумент");
	ТаблицаПрофиля.Колонки.Добавить("СпособОбработки");
	
	АктуальныеВидыЭД = Новый Массив; 
	ЭлектронныеДокументыПереопределяемый.ПолучитьАктуальныеВидыЭД(АктуальныеВидыЭД);
	
	Для Каждого ВидЭД Из АктуальныеВидыЭД Цикл
		Если ВидЭД <> Перечисления.ВидыЭД.ТОРГ12Покупатель
			И ВидЭД <> Перечисления.ВидыЭД.ВозвратТоваровМеждуОрганизациями
			И ВидЭД <> Перечисления.ВидыЭД.АктЗаказчик
			И ВидЭД <> Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель Тогда
						
			СписокОпераций = СписокОперацийВидаЭД(ВидЭД,Истина);
			
			Для Каждого ЭлементСписка Из СписокОпераций Цикл
				Если ЭлементСписка.Пометка Тогда
					СпособОбработки = ЭлементСписка.Значение;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если ВРег(Профиль) = ВРег("Вручную") Тогда
				СпособОбработки = "Вручную";
			ИначеЕсли ВРег(Профиль) = ВРег("ПервоначальноеЗаполнение") И СписокОпераций.Количество() > 2 Тогда
				СпособОбработки = "Вручную";
			ИначеЕсли ВРег(Профиль) = ВРег("Поставщик") Тогда
				Если ВидЭД = Перечисления.ВидыЭД.ЗаказТовара 
					ИЛИ ВидЭД = Перечисления.ВидыЭД.ВозвратТоваровМеждуОрганизациями 
					ИЛИ ВидЭД = Перечисления.ВидыЭД.ПередачаТоваровМеждуОрганизациями 
					ИЛИ ВидЭД = Перечисления.ВидыЭД.ОтчетОПродажахКомиссионногоТовара 
					ИЛИ ВидЭД = Перечисления.ВидыЭД.ОтчетОСписанииКомиссионногоТовара Тогда
					
					СпособОбработки = "Вручную";
				КонецЕсли;
			ИначеЕсли ВРег(Профиль) = ВРег("Покупатель") Тогда
				Если ВидЭД = Перечисления.ВидыЭД.ТОРГ12
					ИЛИ ВидЭД = Перечисления.ВидыЭД.СчетФактура 
					ИЛИ ВидЭД = Перечисления.ВидыЭД.СчетНаОплату 
					ИЛИ ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель 
					ИЛИ ВидЭД = Перечисления.ВидыЭД.АктИсполнитель 
					ИЛИ ВидЭД = Перечисления.ВидыЭД.АктНаПередачуПрав 
					ИЛИ ВидЭД = Перечисления.ВидыЭД.ВозвратТоваровМеждуОрганизациями
					ИЛИ ВидЭД = Перечисления.ВидыЭД.КаталогТоваров
					ИЛИ ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура
					ИЛИ ВидЭД = Перечисления.ВидыЭД.ОтветНаЗаказ
					ИЛИ ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец Тогда
					
					СпособОбработки = "Вручную";
				КонецЕсли;
			КонецЕсли;
			
			НоваяСтрока = ТаблицаПрофиля.Добавить();
			НоваяСтрока.ВходящийДокумент = ВидЭД;
			НоваяСтрока.СпособОбработки	= СпособОбработки;
			
		КонецЕсли;            
	КонецЦикла;
	
	ТаблицаПрофиля.Сортировать("ВходящийДокумент");
	
	ЭлектронныеДокументыПереопределяемый.ТаблицаПредопределенногоПрофиля(ТаблицаПрофиля,Профиль);
	
	Возврат ТаблицаПрофиля;
	
КонецФункции

// Проверяет возможность удаления электронного документа по его состоянию
//
// Параметры:
//  СостояниеЭДО - ПеречислениеСсылка.СостоянияВерсийЭД - состояние электронного документа.
// 
// Возвращаемое значение:
//  Булево - результат проверки
//
Функция ВозможноУдалениеЭД(СостояниеЭДО) Экспорт 

	Возврат СостояниеЭДО = Перечисления.СостоянияВерсийЭД.НаУтверждении
			ИЛИ СостояниеЭДО = Перечисления.СостоянияВерсийЭД.НаПодписи;
КонецФункции

// Включает использование механизма ознакомления с электронными документами.
//
// Параметры:
//  Параметры - Структура - параметры обработчика обновления.
//                          См. документацию по подсистеме СтандартныеПодсистемы.ОбновлениеВерсииИБ.
//
Процедура ВключитьИспользованиеОзнакомленийСЭД() Экспорт
	
	Если Не Константы.ИспользоватьОзнакомлениеСЭлектроннымиДокументами.Получить() Тогда
		Константы.ИспользоватьОзнакомлениеСЭлектроннымиДокументами.Установить(Истина);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает значение свойства XDTO
//
// Параметры:
//  ОбъектXDTO - ОбъектXDTO - объект, значение свойства которого нужно получить
//  Путь - Строка - путь к свойству, разделителем является символ ".".
// 
// Возвращаемое значение:
//  Неопределено - данное свойство отсутствует;
//  Строка - значение свойства;
//  ОбъектXDTO - объект XDTO.
//
Функция ЗначениеСвойстваXDTO(ОбъектXDTO, Путь) Экспорт
	
	Если ТипЗнч(ОбъектXDTO) <> Тип("ОбъектXDTO") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	МассивСтрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(Путь, ".");
	
	Если ОбъектXDTO.Свойства().Получить(МассивСтрок[0]) = Неопределено Тогда
		Возврат Неопределено
	КонецЕсли;
	
	Если МассивСтрок.Количество() = 1 Тогда
		Значение = ОбъектXDTO[МассивСтрок[0]];
		Если ТипЗнч(Значение) = Тип("ОбъектXDTO") И Значение.Свойства().Количество() = 0 Тогда
			Возврат Неопределено;
		КонецЕсли;
		Возврат Значение;
	Иначе
		НаборСвойств = ОбъектXDTO.Свойства();
		Свойство = НаборСвойств.Получить(МассивСтрок[0]);
		Если Свойство = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		Если Свойство.ВерхняяГраница = 1 Тогда
			ПодОбъектXDTO = ОбъектXDTO.ПолучитьXDTO(Свойство);
		Иначе
			Список = ОбъектXDTO.ПолучитьСписок(Свойство);
			Если Список.Количество() = 0 Тогда
				Возврат Неопределено;
			Иначе
				ПодОбъектXDTO = Список[0];
			КонецЕсли;
		КонецЕсли;
		МассивСтрок.Удалить(0);
		НоваяСтрока = "";
		Для Каждого Элемент Из МассивСтрок Цикл
			НоваяСтрока = НоваяСтрока + ?(ПустаяСтрока(НоваяСтрока), "", ".") + Элемент;
		КонецЦикла;
		Возврат ЗначениеСвойстваXDTO(ПодОбъектXDTO, НоваяСтрока);
	КонецЕсли;
	
КонецФункции

Функция ДанныеЭлементаДереваЭлектронногоДокумента(Знач Дерево, Знач Путь) Экспорт
	
	ЭлементДерева = Дерево.Строки.Найти(Путь, "ПолныйПуть", Истина);
	Если ЭлементДерева = Неопределено Тогда
		ВызватьИсключение СформироватьТекстИсключения(
			"НедопустимыеПараметрыМетода", "ДанныеЭлементаДереваЭлектронногоДокумента/НеверноеЗначениеПараметра/Путь");
	КонецЕсли;
	
	Данные = Неопределено;
	
	Если ЭлементДерева.Признак = "Таблица" Тогда
		
		Данные = ДанныеТаблицыДереваЭлектронногоДокумента(ЭлементДерева);
		
	ИначеЕсли ЭлементДерева.Признак = "Группа" Тогда
		
		Данные = ДанныеГруппыДереваЭлектронногоДокумента(ЭлементДерева);
		
	ИначеЕсли ЭлементДерева.Признак = "Выбор" Тогда
		
		Данные = ДанныеВыбораДереваЭлектронногоДокумента(ЭлементДерева);
		
	Иначе
		
		Данные = ДанныеЗначенияДереваЭлектронногоДокумента(ЭлементДерева);
		
	КонецЕсли;
	
	Возврат Данные;
	
КонецФункции

Функция ДанныеГруппыДереваЭлектронногоДокумента(Знач ГруппаДерева)
	
	Данные = Новый Структура;
	
	Для каждого СтрокаДерева Из ГруппаДерева.Строки Цикл
		
		ИмяПоля = ОбщегоНазначенияЭД.НазваниеКолонки(СтрокаДерева.ПолныйПуть);
		Значение = ДанныеЭлементаДереваЭлектронногоДокумента(ГруппаДерева, СтрокаДерева.ПолныйПуть);
		
		Данные.Вставить(ИмяПоля, Значение);
		
	КонецЦикла;
	
	Возврат Данные;
	
КонецФункции

Функция ДанныеВыбораДереваЭлектронногоДокумента(Знач ВыборДерева)
	
	Данные = Новый Структура;
	
	Для каждого СтрокаДерева Из ВыборДерева.Строки Цикл
		
		ИмяПоля = ОбщегоНазначенияЭД.НазваниеКолонки(СтрокаДерева.ПолныйПуть);
		Если ИмяПоля <> ВыборДерева.Значение Тогда
			Продолжить;
		КонецЕсли;
		Значение = ДанныеЭлементаДереваЭлектронногоДокумента(ВыборДерева, СтрокаДерева.ПолныйПуть);
		
		Данные.Вставить(ИмяПоля, Значение);
		
	КонецЦикла;
	
	Возврат Данные;
	
КонецФункции

Функция ДанныеТаблицыДереваЭлектронногоДокумента(Знач ТаблицаДерева)
	
	Данные = Новый ТаблицаЗначений;
	
	СтрокаНомерСтроки = ТаблицаДерева.Строки[0];
	Для Каждого СтрокаКолонки Из СтрокаНомерСтроки.Строки Цикл
		ИмяКолонки = ОбщегоНазначенияЭД.НазваниеКолонки(СтрокаКолонки.ПолныйПуть);
		Данные.Колонки.Добавить(ИмяКолонки);
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(ТаблицаДерева.Значение) Тогда
		Возврат Данные;
	КонецЕсли;
	
	Для Каждого СтрокаНомерСтроки Из ТаблицаДерева.Строки Цикл
		
		НоваяСтрока = Данные.Добавить();
		
		Для Каждого СтрокаКолонки Из СтрокаНомерСтроки.Строки Цикл
			
			ИмяКолонки = ОбщегоНазначенияЭД.НазваниеКолонки(СтрокаКолонки.ПолныйПуть);
			НоваяСтрока[ИмяКолонки] = ДанныеЭлементаДереваЭлектронногоДокумента(СтрокаНомерСтроки, СтрокаКолонки.ПолныйПуть);
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Данные;
	
КонецФункции

Функция ДанныеЗначенияДереваЭлектронногоДокумента(Знач ЗначениеДерева)
	
	Значение = ЗначениеДерева.Значение;
	
	Если Не ЗначениеЗаполнено(Значение) Тогда
		
		Если ЗначениеДерева.Тип = "Строка" Тогда
			Значение = "";
		ИначеЕсли ЗначениеДерева.Тип = "Число" Тогда
			Значение = 0;
		ИначеЕсли ЗначениеДерева.Тип = "Дата" Тогда
			Значение = Дата(1, 1, 1);
		Иначе
			Значение = Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции


Функция НастройкиЭДОПоУмолчанию() Экспорт
	
	Настройки = Справочники.СоглашенияОбИспользованииЭД.ПустаяСсылка().ИсходящиеДокументы.ВыгрузитьКолонки();
	
	Исключения = Новый Массив;
	Исключения.Добавить(Перечисления.ВидыЭД.Подтверждение);
	Исключения.Добавить(Перечисления.ВидыЭД.ВозвратТоваровМеждуОрганизациями);
	Исключения.Добавить(Перечисления.ВидыЭД.ПередачаТоваровМеждуОрганизациями);
	Исключения.Добавить(Перечисления.ВидыЭД.УведомлениеОбУточнении);
	Исключения.Добавить(Перечисления.ВидыЭД.Ошибка);
	Исключения.Добавить(Перечисления.ВидыЭД.ИзвещениеОПолучении);
	Исключения.Добавить(Перечисления.ВидыЭД.ПлатежноеПоручение);
	Исключения.Добавить(Перечисления.ВидыЭД.ЗапросВыписки);
	Исключения.Добавить(Перечисления.ВидыЭД.ВыпискаБанка);
	Исключения.Добавить(Перечисления.ВидыЭД.ПредложениеОбАннулировании);
	Исключения.Добавить(Перечисления.ВидыЭД.ТОРГ12Покупатель);
	Исключения.Добавить(Перечисления.ВидыЭД.АктЗаказчик);
	Исключения.Добавить(Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель);
	
	ТребуетсяОтветнаяПодписьВидЭД = Новый Массив;
	ТребуетсяОтветнаяПодписьВидЭД.Добавить(Перечисления.ВидыЭД.ТОРГ12);
	ТребуетсяОтветнаяПодписьВидЭД.Добавить(Перечисления.ВидыЭД.ТОРГ12Продавец);
	ТребуетсяОтветнаяПодписьВидЭД.Добавить(Перечисления.ВидыЭД.АктНаПередачуПрав);
	ТребуетсяОтветнаяПодписьВидЭД.Добавить(Перечисления.ВидыЭД.АктВыполненныхРабот);
	ТребуетсяОтветнаяПодписьВидЭД.Добавить(Перечисления.ВидыЭД.АктИсполнитель);
	ТребуетсяОтветнаяПодписьВидЭД.Добавить(Перечисления.ВидыЭД.ПроизвольныйЭД);
	ТребуетсяОтветнаяПодписьВидЭД.Добавить(Перечисления.ВидыЭД.СчетНаОплату);
	ТребуетсяОтветнаяПодписьВидЭД.Добавить(Перечисления.ВидыЭД.ПрайсЛист);
	ТребуетсяОтветнаяПодписьВидЭД.Добавить(Перечисления.ВидыЭД.ЗаказТовара);
	ТребуетсяОтветнаяПодписьВидЭД.Добавить(Перечисления.ВидыЭД.КаталогТоваров);
	ТребуетсяОтветнаяПодписьВидЭД.Добавить(Перечисления.ВидыЭД.ОтчетОПродажахКомиссионногоТовара);
	ТребуетсяОтветнаяПодписьВидЭД.Добавить(Перечисления.ВидыЭД.ОтчетОСписанииКомиссионногоТовара);
	ТребуетсяОтветнаяПодписьВидЭД.Добавить(Перечисления.ВидыЭД.АктОРасхождениях);
	ТребуетсяОтветнаяПодписьВидЭД.Добавить(Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель);
	
	ТребуетсяОтветнаяПодписьФормат = Новый Массив;
	ТребуетсяОтветнаяПодписьФормат.Добавить("ФНС 5.01 (УПД:Счет-фактура и первичный документ)");
	ТребуетсяОтветнаяПодписьФормат.Добавить("ФНС 2019 (УПД:Счет-фактура и первичный документ)");
	ТребуетсяОтветнаяПодписьФормат.Добавить("ФНС 5.01 (УКД:Корректировочный счет-фактура и первичный документ)");
	
	ИспользоватьЭЦП = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьЗначениеФункциональнойОпции("ИспользоватьЭлектронныеЦифровыеПодписи");
	
	Для каждого ВидЭД Из Перечисления.ВидыЭД Цикл
		
		Если Исключения.Найти(ВидЭД) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаНастроек = Настройки.Добавить();
		СтрокаНастроек.ИсходящийДокумент = ВидЭД;
		СтрокаНастроек.Формировать = Истина;
		СтрокаНастроек.ТребуетсяИзвещениеОПолучении = Истина;
	
		Если ВидЭД <> Перечисления.ВидыЭД.ПроизвольныйЭД Тогда
			СтрокаНастроек.ВерсияФормата = ЭлектронныеДокументыСлужебный.АктуальнаяВерсияФорматаЭД(ВидЭД);
		КонецЕсли;
		
		Если ИспользоватьЭЦП 
			И (ТребуетсяОтветнаяПодписьВидЭД.Найти(ВидЭД) <> Неопределено 
			ИЛИ ТребуетсяОтветнаяПодписьФормат.Найти(СтрокаНастроек.ВерсияФормата) <> Неопределено) Тогда
			СтрокаНастроек.ТребуетсяОтветнаяПодпись = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Настройки;
	
КонецФункции

Процедура ПодготовитьНастройкиЭДОДляНеактуальныхВидовЭД(Отбор, МенеджерТаблиц, ИмяТаблицы)
	
	НастройкиПоУмолчанию = НастройкиЭДОПоУмолчанию();
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НастройкиПоУмолчанию.ИсходящийДокумент,
	|	НастройкиПоУмолчанию.ИспользоватьЭЦП,
	|	НастройкиПоУмолчанию.ТребуетсяОтветнаяПодпись,
	|	НастройкиПоУмолчанию.ТребуетсяИзвещениеОПолучении,
	|	НастройкиПоУмолчанию.ВерсияФормата
	|ПОМЕСТИТЬ втНастройки
	|ИЗ
	|	&НастройкиПоУмолчанию КАК НастройкиПоУмолчанию
	|ГДЕ
	|	НЕ НастройкиПоУмолчанию.ИсходящийДокумент В (&АктуальныеВидыЭД)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Соглашения.Ссылка,
	|	Соглашения.Ссылка.Организация КАК Организация,
	|	Соглашения.Ссылка.Контрагент КАК Контрагент,
	|	Соглашения.Ссылка.ИдентификаторКонтрагента КАК ИдентификаторКонтрагента,
	|	Соглашения.Ссылка.ИдентификаторОрганизации КАК ИдентификаторОрганизации,
	|	Соглашения.Ссылка.ВерсияФорматаПакета КАК ВерсияФорматаПакета,
	|	Соглашения.Ссылка.ПрофильНастроекЭДО КАК ПрофильНастроекЭДО,
	|	втНастройки.ИсходящийДокумент,
	|	втНастройки.ВерсияФормата,
	|	втНастройки.ИспользоватьЭЦП,
	|	втНастройки.ТребуетсяОтветнаяПодпись,
	|	втНастройки.ТребуетсяИзвещениеОПолучении
	|ПОМЕСТИТЬ ИмяТаблицы
	|ИЗ
	|	Справочник.СоглашенияОбИспользованииЭД КАК Соглашения
	|		ЛЕВОЕ СОЕДИНЕНИЕ втНастройки КАК втНастройки
	|		ПО (Соглашения.Организация = &Организация)
	|			И (Соглашения.Контрагент = &Контрагент)
	|			И (Соглашения.ДоговорКонтрагента = &ДоговорКонтрагента)";
	Запрос.УстановитьПараметр("НастройкиПоУмолчанию", НастройкиПоУмолчанию);
	Запрос.УстановитьПараметр("АктуальныеВидыЭД", ЭлектронныеДокументыПовтИсп.ПолучитьАктуальныеВидыЭД());
	Запрос.УстановитьПараметр("Организация", Отбор.Организация);
	Запрос.УстановитьПараметр("Контрагент", Отбор.Контрагент);
	Запрос.УстановитьПараметр("ДоговорКонтрагента", Отбор.ДоговорКонтрагента);
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПОМЕСТИТЬ ИмяТаблицы", "ПОМЕСТИТЬ " + ИмяТаблицы);
	
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура ПодготовитьНастройкиЭДОДляНеактуальныхВидовЭДПоСоглашению(Отбор, МенеджерТаблиц, ИмяТаблицы)
	
	НастройкиПоУмолчанию = НастройкиЭДОПоУмолчанию();
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НастройкиПоУмолчанию.ИсходящийДокумент,
	|	НастройкиПоУмолчанию.ИспользоватьЭЦП,
	|	НастройкиПоУмолчанию.ТребуетсяОтветнаяПодпись,
	|	НастройкиПоУмолчанию.ТребуетсяИзвещениеОПолучении,
	|	НастройкиПоУмолчанию.ВерсияФормата
	|ПОМЕСТИТЬ втНастройки
	|ИЗ
	|	&НастройкиПоУмолчанию КАК НастройкиПоУмолчанию
	|ГДЕ
	|	НЕ НастройкиПоУмолчанию.ИсходящийДокумент В (&АктуальныеВидыЭД)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Соглашения.Ссылка,
	|	Соглашения.Ссылка.Организация КАК Организация,
	|	Соглашения.Ссылка.Контрагент КАК Контрагент,
	|	Соглашения.Ссылка.ИдентификаторКонтрагента КАК ИдентификаторКонтрагента,
	|	Соглашения.Ссылка.ИдентификаторОрганизации КАК ИдентификаторОрганизации,
	|	Соглашения.Ссылка.ВерсияФорматаПакета КАК ВерсияФорматаПакета,
	|	Соглашения.Ссылка.ПрофильНастроекЭДО КАК ПрофильНастроекЭДО,
	|	втНастройки.ИсходящийДокумент,
	|	втНастройки.ВерсияФормата,
	|	втНастройки.ИспользоватьЭЦП,
	|	втНастройки.ТребуетсяОтветнаяПодпись,
	|	втНастройки.ТребуетсяИзвещениеОПолучении
	|ПОМЕСТИТЬ ИмяТаблицы
	|ИЗ
	|	Справочник.СоглашенияОбИспользованииЭД КАК Соглашения
	|		ЛЕВОЕ СОЕДИНЕНИЕ втНастройки КАК втНастройки
	|		ПО (Соглашения.Ссылка = &СоглашениеЭД)";
	Запрос.УстановитьПараметр("НастройкиПоУмолчанию", НастройкиПоУмолчанию);
	Запрос.УстановитьПараметр("АктуальныеВидыЭД", ЭлектронныеДокументыПовтИсп.ПолучитьАктуальныеВидыЭД());
	Запрос.УстановитьПараметр("СоглашениеЭД", Отбор.СоглашениеЭД);
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПОМЕСТИТЬ ИмяТаблицы", "ПОМЕСТИТЬ " + ИмяТаблицы);
	
	Запрос.Выполнить();
	
КонецПроцедуры

// Формирует список типов версий, являющихся ответными титулами.
// 
// Возвращаемое значение:
//  Массив - элементами массива являются значения перечисления "ТипыЭлементовВерсииЭД".
//
Функция ТипыОтветныхТитулов() Экспорт

	Результат = Новый Массив;
	Результат.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ИнформацияПокупателяУПД);
	Результат.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ИнформацияПокупателяУКД);
	Результат.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ТОРГ12Покупатель);
	Результат.Добавить(Перечисления.ТипыЭлементовВерсииЭД.АктЗаказчик);
	Результат.Добавить(Перечисления.ТипыЭлементовВерсииЭД.СоглашениеОбИзмененииСтоимостиПолучатель);
	
	Возврат Результат;

КонецФункции

// Возвращает признак принятия условий использования сервиса в разрезе профилей настроек ЭДО.
//
// Параметры:
//  НаборПрофилейНастроекЭДО - СправочникСсылка.ПрофилиНастроекЭДО, Массив - профили, для которых нужно получить признак.
//
// Возвращаемое значение:
//  Соответствие - ключ: профиль настроек ЭДО, значение: признак принятия условий использования.
//
Функция ПризнакПринятияУсловийИспользования(Знач НаборПрофилейНастроекЭДО = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПрофилиНастроекЭДО.Ссылка КАК ПрофильНастроекЭДО,
	|	ПрофилиНастроекЭДО.ПринятыУсловияИспользования КАК ПринятыУсловияИспользования
	|ИЗ
	|	Справочник.ПрофилиНастроекЭДО КАК ПрофилиНастроекЭДО
	|ГДЕ
	|	&ОтборПрофилей";
	
	ТекстОтборПрофилей = "ИСТИНА";
	Если ЗначениеЗаполнено(НаборПрофилейНастроекЭДО) Тогда
		Запрос.УстановитьПараметр("НаборПрофилейНастроекЭДО", НаборПрофилейНастроекЭДО);
		ТекстОтборПрофилей = "ПрофилиНастроекЭДО.Ссылка В(&НаборПрофилейНастроекЭДО)";
	КонецЕсли;
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборПрофилей", ТекстОтборПрофилей);
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	
	Признаки = Новый Соответствие;
	Пока Выборка.Следующий() Цикл
		Признаки.Вставить(Выборка.ПрофильНастроекЭДО, Выборка.ПринятыУсловияИспользования);
	КонецЦикла;
	
	Возврат Признаки;
	
КонецФункции

Функция ПроверитьЗаполнениеНастройкиЭДО(Знач НастройкаЭДО) Экспорт
	
	Результат = Истина;
	
	РеквизитыНастройки = Новый Структура("Контрагент");
	Если ТипЗнч(НастройкаЭДО) = Тип("СправочникСсылка.СоглашенияОбИспользованииЭД") Тогда
		РеквизитыНастройки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(НастройкаЭДО, "Контрагент");
	Иначе
		ЗаполнитьЗначенияСвойств(РеквизитыНастройки, НастройкаЭДО);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(РеквизитыНастройки.Контрагент) Тогда
		Результат = Ложь;
		ТекстСообщения = НСтр("ru = 'Не заполнен контрагент в настройке ЭДО.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////////////////////
// РаботаССервисомНастроек

// Запускает обновление данных по операторам ЭДО и Форматам ЭД
Процедура ОбновитьКешиОператоровЭДОИФорматов() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПрофилиНастроекЭДО.Ссылка КАК ПрофильНастроекЭДО,
	|	ПрофилиНастроекЭДО.ИдентификаторОрганизации КАК ИдентификаторЭДО
	|ИЗ
	|	Справочник.ПрофилиНастроекЭДО КАК ПрофилиНастроекЭДО
	|ГДЕ
	|	ПрофилиНастроекЭДО.ВерсияКонфигурации <> &ВерсияКонфигурации
	|	И ПрофилиНастроекЭДО.СпособОбменаЭД В(&СпособОбменаЧерезОператора)
	|	И НЕ ПрофилиНастроекЭДО.ПометкаУдаления";
	СпособОбменаЧерезОператора = Новый Массив;
	СпособОбменаЧерезОператора.Добавить(Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском);
	СпособОбменаЧерезОператора.Добавить(Перечисления.СпособыОбменаЭД.ЧерезСервис1СЭДО);
	Запрос.УстановитьПараметр("СпособОбменаЧерезОператора", СпособОбменаЧерезОператора);
	Запрос.УстановитьПараметр("ВерсияКонфигурации", Метаданные.Версия);
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	ФорматыЭД = Неопределено;
	Попытка
		ФорматыЭД = ФорматыЭДИзСервисаНастроек();
	Исключение
		ОписаниеОшибки = ИнформацияОбОшибке();
		ВидОперации = НСтр("ru = 'Обновление кеша настроек ЭДО'");
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьОшибку(ВидОперации, ПодробноеПредставлениеОшибки(ОписаниеОшибки));
	КонецПопытки;
	Если ФорматыЭД = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Пока Выборка.Следующий() Цикл
		Попытка
			Адрес = ПоместитьВоВременноеХранилище(Неопределено);
			ПараметрыОперации = Новый Структура;
			ПараметрыОперации.Вставить("ИдентификаторЭДО", Выборка.ИдентификаторЭДО);
			ПараметрыОперации.Вставить("ПрофильНастроекЭДО", Выборка.ПрофильНастроекЭДО);
			ОтправитьДанныеАбонентаВСервисНастроек(ПараметрыОперации, Адрес, ФорматыЭД);
		Исключение
			ОписаниеОшибки = ИнформацияОбОшибке();
			ВидОперации = НСтр("ru = 'Обновление учетной записи в сервисе настроек'");
			ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьОшибку(ВидОперации, ПодробноеПредставлениеОшибки(ОписаниеОшибки));
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

// Отправка данных в сервис 1C:Сервис настроек
//
// Параметры:
//   ПараметрыОперации - Структура - См. ОписаниеПараметровУведомленийВСервисеЭДО
//     * ИдентификаторЭДО  - Строка - Идентификатор учетной записи организации
//   АдресРезультата - Строка - Адрес результата в хранилище значений.
//
Процедура ОтправитьДанныеАбонентаВСервисНастроек(ПараметрыОперации, АдресРезультата, ФорматыЭД) Экспорт
	
	Отказ = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПрофилиНастроекЭДО.НазначениеУчетнойЗаписи КАК НазначениеУчетнойЗаписи,
	|	ПрофилиНастроекЭДО.ПодробноеОписаниеУчетнойЗаписи КАК ПодробноеОписаниеУчетнойЗаписи,
	|	ПрофилиНастроекЭДО.Организация КАК Организация
	|ИЗ
	|	Справочник.ПрофилиНастроекЭДО КАК ПрофилиНастроекЭДО
	|ГДЕ
	|	ПрофилиНастроекЭДО.Ссылка = &ПрофильНастроекЭДО
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Сертификаты.Отпечаток КАК imprint,
	|	Сертификаты.ДатаОкончания КАК expireDate
	|ИЗ
	|	Справочник.ПрофилиНастроекЭДО.СертификатыПодписейОрганизации КАК СертификатыПрофилей
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СертификатыЭЦП КАК Сертификаты
	|		ПО СертификатыПрофилей.Сертификат = Сертификаты.Ссылка
	|ГДЕ
	|	СертификатыПрофилей.Ссылка = &ПрофильНастроекЭДО
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МаппингФорматов.ВидЭД КАК ВидЭД,
	|	МаппингФорматов.Формат КАК Формат,
	|	МаппингФорматов.ВариантЗаполнения КАК ВариантЗаполнения
	|ПОМЕСТИТЬ МаппингФорматов
	|ИЗ
	|	&МаппингФорматов КАК МаппингФорматов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ФорматыЭД.ИдентификаторСервиса КАК ИдентификаторСервиса,
	|	ФорматыЭД.Формат КАК Формат
	|ПОМЕСТИТЬ ФорматыЭД
	|ИЗ
	|	&ФорматыЭД КАК ФорматыЭД
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ФорматыЭД.ИдентификаторСервиса КАК formatUeid,
	|	МаппингФорматов.ВариантЗаполнения КАК fillOption
	|ИЗ
	|	МаппингФорматов КАК МаппингФорматов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ФорматыЭД КАК ФорматыЭД
	|		ПО МаппингФорматов.Формат = ФорматыЭД.Формат";
	
	Расшифровка = РасшифровкаВариантовЗаполненияФорматовЭДО();
	Запрос.УстановитьПараметр("МаппингФорматов" , Расшифровка);
	Запрос.УстановитьПараметр("ФорматыЭД" , ФорматыЭД.ФорматыЭлектронныхДокументов);
	Запрос.УстановитьПараметр("ПрофильНастроекЭДО", ПараметрыОперации.ПрофильНастроекЭДО);
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	УстановитьПривилегированныйРежим(Ложь);
	
	ДанныеПоУчетнойЗаписи = РезультатЗапроса[0].Выгрузить()[0];
	
	Если ПараметрыОперации.Свойство("НазначениеУчетнойЗаписи") Тогда
		ДанныеПоУчетнойЗаписи.НазначениеУчетнойЗаписи = ПараметрыОперации.НазначениеУчетнойЗаписи;
	КонецЕсли;
	
	Если ПараметрыОперации.Свойство("ПодробноеОписаниеУчетнойЗаписи") Тогда
		ДанныеПоУчетнойЗаписи.ПодробноеОписаниеУчетнойЗаписи = ПараметрыОперации.ПодробноеОписаниеУчетнойЗаписи;
	КонецЕсли;
	
	ИмяРеквизитаИННОрганизации = ЭлектронныеДокументыПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("ИННОрганизации");
	ИмяРеквизитаКППОрганизации = ЭлектронныеДокументыПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("КППОрганизации");
	
	ПараметрыОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеПоУчетнойЗаписи.Организация,
		ИмяРеквизитаИННОрганизации + ", " + ИмяРеквизитаКППОрганизации);
	
	ОписаниеДанных = НовоеОписаниеОтправкиДанныхАбонентаВСервисеНастроек();
	ОписаниеДанных.ИНН              = СокрЛП(ПараметрыОрганизации[ИмяРеквизитаИННОрганизации]);
	ОписаниеДанных.КПП              = СокрЛП(ПараметрыОрганизации[ИмяРеквизитаКППОрганизации]);
	ОписаниеДанных.ИдентификаторЭДО = ПараметрыОперации.ИдентификаторЭДО;
	ОписаниеДанных.Версия           = Метаданные.Версия;
	
	СертификатыАбонента = Новый Массив;
	Для Каждого СтокаТЧ Из РезультатЗапроса[1].Выгрузить() Цикл
		
		ДатаJSON = ДатаВJSON(СтокаТЧ.expireDate);
		
		Сертификат = Новый Структура;
		Сертификат.Вставить("imprint"   , СтокаТЧ.imprint);
		Сертификат.Вставить("expireDate", СтрЗаменить(ДатаJSON,"+",".0+"));
		СертификатыАбонента.Добавить(Сертификат);
	КонецЦикла;
	
	ТаблицаФорматов = РезультатЗапроса[4].Выгрузить();
	ТаблицаФорматов.Сортировать("formatUeid");
	
	ОписаниеДанных.ВариантыЗаполненияФорматов = ТаблицаЗначенийВМассив(ТаблицаФорматов);
	ОписаниеДанных.СертификатыАбонента        = СертификатыАбонента;
	
	ЗаполнитьЗначенияСвойств(ОписаниеДанных, ДанныеПоУчетнойЗаписи, "НазначениеУчетнойЗаписи, ПодробноеОписаниеУчетнойЗаписи");
	
	ПараметрыКоманды = ПараметрыКомандыОтправкаДанныхАбонентаВСервисНастроек(ОписаниеДанных, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Результат = ВыполнитьКомандуСервиса(ПараметрыКоманды, Отказ);
	
	Если Результат = Истина Тогда
		
		ПрофильОбъект = ПараметрыОперации.ПрофильНастроекЭДО.ПолучитьОбъект();
		
		Если ПрофильОбъект.ВерсияКонфигурации <> ОписаниеДанных.Версия Тогда
			
			ПрофильОбъект.ВерсияКонфигурации = ОписаниеДанных.Версия;
			УстановитьПривилегированныйРежим(Истина);
			ПрофильОбъект.Записать();
			УстановитьПривилегированныйРежим(Ложь);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

// Отправка данных об активности учетной записи в сервис 1C:Сервис настроек ЭДО
//
// Параметры:
//    ПрофильНастроекЭДО - СправочникСсылка.ПрофилиНастроекЭДО - профиль, по которому нужно обновить информацию.
//
Процедура ОбновитьИнформациюОбАктивностиУчетнойЗаписи(ПрофильНастроекЭДО) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИСТИНА КАК Обновить
	|ИЗ
	|	РегистрСведений.СостоянияОбменовЭДЧерезОператоровЭДО КАК СостоянияОбменов
	|ГДЕ
	|	СостоянияОбменов.ПрофильНастроекЭДО = &ПрофильНастроекЭДО
	|	И СостоянияОбменов.ДатаПоследнейАктивности < &ТекущаяДатаСеанса";
	
	Запрос.УстановитьПараметр("ПрофильНастроекЭДО", ПрофильНастроекЭДО);
	Запрос.УстановитьПараметр("ТекущаяДатаСеанса", НачалоДня(ТекущаяДатаСеанса()));
	
	УстановитьПривилегированныйРежим(Истина);
	ОбновитьАктивность = Не Запрос.Выполнить().Пустой();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Не ОбновитьАктивность Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторЭДО = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПрофильНастроекЭДО, "ИдентификаторОрганизации");
	
	Отказ = Ложь;
	ИнтернетПоддержкаПользователейПодключена = Истина;
	СтруктураJSON = Новый Структура;
	AuthenticationInfo = Новый Структура;
	
	УстановитьПривилегированныйРежим(Истина);
	Аутентификация = ЭлектронныеДокументыСлужебный.ПараметрыАутентификацииНаСайте();
	Тикет = БилетНаСайтПоддержки(Аутентификация);
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Не ЗначениеЗаполнено(Тикет) Или Не ИнтернетПоддержкаПользователейПодключена Тогда
		Возврат;
	КонецЕсли;
	
	AuthenticationInfo.Вставить("authToken", Тикет);
	
	СтруктураJSON.Вставить("authenticationInfo", AuthenticationInfo);

	СтруктураJSON.Вставить("id", ПреобразоватьВИдентификаторЗапросаСервисаНастроек(ИдентификаторЭДО));
	
	ТекстJSON = ЗначениеВСтрокуJSON(СтруктураJSON);
	
	ПараметрыКоманды = НовоеОписаниеПараметровКомандыСервиса();
	ПараметрыКоманды.Адрес               = "api/edo-settings/identifiers/activity";
	ПараметрыКоманды.Наименование        = НСтр("ru = 'Отправка данных об активности абонента в сервис 1С:ЭДО'");
	ПараметрыКоманды.Метод               = "POST";
	ПараметрыКоманды.ОбработкаРезультата = Неопределено;
	ПараметрыКоманды.Данные              = ТекстJSON;
	ПараметрыКоманды.Заголовки.Вставить("Content-Type", "application/json");
	
	ПоддержкаПодключена = Истина;
	Аутентификация = ЭлектронныеДокументыСлужебный.ПараметрыАутентификацииНаСайте();
	БилетПоддержки = БилетНаСайтПоддержки(Аутентификация);
	
	Если ЗначениеЗаполнено(БилетПоддержки) Тогда
		ПараметрыКоманды.Заголовки.Вставить("ticket", БилетПоддержки);
	Иначе
		Возврат;
	КонецЕсли;
	
	Результат = ВыполнитьКомандуСервиса(ПараметрыКоманды, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат = Истина Тогда
		МенеджерЗаписи = РегистрыСведений.СостоянияОбменовЭДЧерезОператоровЭДО.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.ПрофильНастроекЭДО = ПрофильНастроекЭДО;
		
		УстановитьПривилегированныйРежим(Истина);
		МенеджерЗаписи.Прочитать();
		МенеджерЗаписи.ДатаПоследнейАктивности = ТекущаяДатаСеанса();
		МенеджерЗаписи.Записать();
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает таблицу с данными для маппинга формата и вида ЭД в Формат, вариант заполнения и
//																				и в обратном направлении
//
// Возвращаемое значение:
//  ТаблицаЗначений   - Расшифровка вариантов заполнения.
//
Функция РасшифровкаВариантовЗаполненияФорматовЭДО() Экспорт
	
	ВариантыЗаполнения = Новый ТаблицаЗначений;
	ВариантыЗаполнения.Колонки.Добавить("Формат"            , Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(50)));
	ВариантыЗаполнения.Колонки.Добавить("ВариантЗаполнения" , Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(50)));
	ВариантыЗаполнения.Колонки.Добавить("ВидЭД"             , Новый ОписаниеТипов("ПеречислениеСсылка.ВидыЭД"));
	
	//Перечисления.ВидыЭД.АктИсполнитель
	
	НоваяСтрока = ВариантыЗаполнения.Добавить();
	НоваяСтрока.Формат = "DP_REZRUISP_1_990_01_05_01";
	НоваяСтрока.ВидЭД = Перечисления.ВидыЭД.АктИсполнитель;
	НоваяСтрока.ВариантЗаполнения = "ПередачаРезультатовРабот";
	
	///////////////////////////////////////////////////////////////////////////////////
	
	// Перечисления.ВидыЭД.ТОРГ12Продавец
	НоваяСтрока = ВариантыЗаполнения.Добавить();
	НоваяСтрока.Формат = "DP_TOVTORGPR_1_992_01_05_01";
	НоваяСтрока.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец;
	НоваяСтрока.ВариантЗаполнения = "ПередачаТоваров";
	///////////////////////////////////////////////////////////////////////////////////
	
	// Перечисления.ВидыЭД.СчетФактура
	НоваяСтрока = ВариантыЗаполнения.Добавить();
	НоваяСтрока.Формат = "ON_SCHFDOPPR_1_995_01_05_01";
	НоваяСтрока.ВидЭД = Перечисления.ВидыЭД.СчетФактура;
	НоваяСтрока.ВариантЗаполнения = СЧФ();
	
	НоваяСтрока = ВариантыЗаполнения.Добавить();
	НоваяСтрока.Формат = "ON_NSCHFDOPPR_1_997_01_05_01";
	НоваяСтрока.ВидЭД = Перечисления.ВидыЭД.СчетФактура;
	НоваяСтрока.ВариантЗаполнения = СЧФ();
	///////////////////////////////////////////////////////////////////////////////////
	
	// Перечисления.ВидыЭД.КорректировочныйСчетФактура
	НоваяСтрока = ВариантыЗаполнения.Добавить();
	НоваяСтрока.Формат = "ON_KORSCHFDOPPR_1_996_01_05_01";
	НоваяСтрока.ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура;
	НоваяСтрока.ВариантЗаполнения = СЧФ();
	
	///////////////////////////////////////////////////////////////////////////////////
	
	// Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель
	НоваяСтрока = ВариантыЗаполнения.Добавить();
	НоваяСтрока.Формат = "ON_KORSCHFDOPPR_1_996_01_05_01";
	НоваяСтрока.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель;
	НоваяСтрока.ВариантЗаполнения = ДОП();
	///////////////////////////////////////////////////////////////////////////////////
	
	// Перечисления.ВидыЭД.КаталогТоваров
	НоваяСтрока = ВариантыЗаполнения.Добавить();
	НоваяСтрока.Формат = "CML_2_08";
	НоваяСтрока.ВидЭД = Перечисления.ВидыЭД.КаталогТоваров;
	НоваяСтрока.ВариантЗаполнения = "Каталог";
	///////////////////////////////////////////////////////////////////////////////////
	
	// Перечисления.ВидыЭД.СчетНаОплату
	НоваяСтрока = ВариантыЗаполнения.Добавить();
	НоваяСтрока.Формат = "CML_2_08";
	НоваяСтрока.ВидЭД = Перечисления.ВидыЭД.КаталогТоваров;
	НоваяСтрока.ВариантЗаполнения = "СчетНаОплату";
	///////////////////////////////////////////////////////////////////////////////////
	
	// Перечисления.ВидыЭД.ПрайсЛист
	НоваяСтрока = ВариантыЗаполнения.Добавить();
	НоваяСтрока.Формат = "CML_2_08";
	НоваяСтрока.ВидЭД = Перечисления.ВидыЭД.ПрайсЛист;
	НоваяСтрока.ВариантЗаполнения = "Контрагент";
	///////////////////////////////////////////////////////////////////////////////////
	
	// Перечисления.ВидыЭД.ЗаказТовара
	НоваяСтрока = ВариантыЗаполнения.Добавить();
	НоваяСтрока.Формат = "CML_2_08";
	НоваяСтрока.ВидЭД = Перечисления.ВидыЭД.ЗаказТовара;
	НоваяСтрока.ВариантЗаполнения = "ЗаказТовара";
	///////////////////////////////////////////////////////////////////////////////////
	
	// Перечисления.ВидыЭД.ОтветНаЗаказ
	НоваяСтрока = ВариантыЗаполнения.Добавить();
	НоваяСтрока.Формат = "CML_2_08";
	НоваяСтрока.ВидЭД = Перечисления.ВидыЭД.ОтветНаЗаказ;
	НоваяСтрока.ВариантЗаполнения = "ЗаказКлиента";
	///////////////////////////////////////////////////////////////////////////////////
	
	// Перечисления.ВидыЭД.ОтчетОПродажахКомиссионногоТовара
	НоваяСтрока = ВариантыЗаполнения.Добавить();
	НоваяСтрока.Формат = "CML_2_08";
	НоваяСтрока.ВидЭД = Перечисления.ВидыЭД.ОтчетОПродажахКомиссионногоТовара;
	НоваяСтрока.ВариантЗаполнения = "ОтчетОПродажахКомиссионногоТовара";
	///////////////////////////////////////////////////////////////////////////////////
	
	// Перечисления.ВидыЭД.ОтчетОСписанииКомиссионногоТовара
	НоваяСтрока = ВариантыЗаполнения.Добавить();
	НоваяСтрока.Формат = "CML_2_08";
	НоваяСтрока.ВидЭД = Перечисления.ВидыЭД.ОтчетОСписанииКомиссионногоТовара;
	НоваяСтрока.ВариантЗаполнения = "ОтчетОСписанииКомиссионногоТовара";
	///////////////////////////////////////////////////////////////////////////////////
	
	// Перечисления.ВидыЭД.АктОРасхождениях
	НоваяСтрока = ВариантыЗаполнения.Добавить();
	НоваяСтрока.Формат = "DP_PRIRASXPRIN_1_994_01_05_01";
	НоваяСтрока.ВидЭД = Перечисления.ВидыЭД.АктОРасхождениях;
	НоваяСтрока.ВариантЗаполнения = "ДокументОПриемкеИРасхождениях";
	///////////////////////////////////////////////////////////////////////////////////
	
	ВариантыЗаполнения.Индексы.Добавить("Формат, ВидЭД");
	ВариантыЗаполнения.Индексы.Добавить("Формат, ВариантЗаполнения");
	
	Возврат ВариантыЗаполнения;
	
КонецФункции

// Получение и обновление данных форматов ЭДО 
//
Функция ФорматыЭДИзСервисаНастроек()
	
	Отказ = Ложь;
	ИнтернетПоддержкаПользователейПодключена = Истина;
	ПараметрыЗапроса = Новый Структура;
	
	Страница = 0;
	КоличествоПолучено = 0;
	РазмерСтраницы     = 0;
	ФорматыЭД = Неопределено;
	
	Пока КоличествоПолучено = РазмерСтраницы Цикл
		
		УстановитьПривилегированныйРежим(Истина);
		Аутентификация = ЭлектронныеДокументыСлужебный.ПараметрыАутентификацииНаСайте();
		Тикет = БилетНаСайтПоддержки(Аутентификация);
		УстановитьПривилегированныйРежим(Ложь);
		
		Если Не ЗначениеЗаполнено(Тикет) Или Не ИнтернетПоддержкаПользователейПодключена Тогда
			Возврат ФорматыЭД;
		КонецЕсли;
		
		ПараметрыЗапроса.Вставить("Тикет", Тикет);
		ПараметрыЗапроса.Вставить("Страница", Страница);
		ПараметрыКоманды = ПараметрыПолученияДанныхФорматовЭДО(ПараметрыЗапроса);
		СписокФорматовЭД = ВыполнитьКомандуСервиса(ПараметрыКоманды, Отказ);
		
		Если Отказ Тогда
			Возврат ФорматыЭД;
		КонецЕсли;
		
		Если ФорматыЭД = Неопределено Тогда
			ФорматыЭД = СписокФорматовЭД;
		Иначе
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(СписокФорматовЭД.ФорматыЭлектронныхДокументов,
				ФорматыЭД.ФорматыЭлектронныхДокументов);
		КонецЕсли;
		
		РазмерСтраницы = СписокФорматовЭД.РазмерСтраницы;
		КоличествоПолучено = СписокФорматовЭД.ФорматыЭлектронныхДокументов.Количество();
		
		Страница = Страница + 1;
	КонецЦикла;
	
	Возврат ФорматыЭД;
	
КонецФункции

// Получение параметров запроса для получения Форматов ЭДО
//
// Параметры:
//  ПараметрыЗапроса - Структура - Параметры запроса.
//    * ЛогинПоддержки  - Строка - Логин поддержки 1С
//    * ПарольПоддержки - Строка - Пароль поддержки 1С
//    * Страница        - Строка - Номер страницы ответа сервера
// 
// Возвращаемое значение:
//  Структура - параметры команды ВыполнитьКомандуСервиса.
//
Функция ПараметрыПолученияДанныхФорматовЭДО(ПараметрыЗапроса)
	
	СтруктураJSON         = Новый Структура;
	AuthenticationInfo = Новый Структура;
	
	Если ПараметрыЗапроса.Свойство("Логин") И ЗначениеЗаполнено(ПараметрыЗапроса.Логин) Тогда
		
		AuthenticationInfo.Вставить("login", ПараметрыЗапроса.Логин);
		
	КонецЕсли;
	
	Если ПараметрыЗапроса.Свойство("Пароль") И ЗначениеЗаполнено(ПараметрыЗапроса.Пароль) Тогда
		
		AuthenticationInfo.Вставить("password", ПараметрыЗапроса.Пароль);
		
	КонецЕсли;
	
	Если ПараметрыЗапроса.Свойство("Тикет") И ЗначениеЗаполнено(ПараметрыЗапроса.Тикет) Тогда
		
		AuthenticationInfo.Вставить("authToken", ПараметрыЗапроса.Тикет);
		
	КонецЕсли;
	
	СтруктураJSON.Вставить("authenticationInfo", AuthenticationInfo);
	
	Если ПараметрыЗапроса.Свойство("Страница") Тогда
		СтруктураJSON.Вставить("page", ПараметрыЗапроса.Страница);
	КонецЕсли;
	
	ТекстJSON = ЗначениеВСтрокуJSON(СтруктураJSON);
	
	ПараметрыКоманды = НовоеОписаниеПараметровКомандыСервиса();
	ПараметрыКоманды.Адрес               = "api/edo-settings/document-formats/catalog";
	ПараметрыКоманды.Наименование        = НСтр("ru = 'Получение данных о форматах ЭДО из сервиса настроек 1С:ЭДО'");
	ПараметрыКоманды.Метод               = "POST";
	ПараметрыКоманды.ОбработкаРезультата = "КаталогФорматовЭД";
	ПараметрыКоманды.Данные              = ТекстJSON;
	
	ПараметрыКоманды.Заголовки.Вставить("Content-Type", "application/json");
	
	Возврат ПараметрыКоманды;
	
КонецФункции

// Общие параметры вызова команд сервиса.
//
Функция НовоеОписаниеПараметровКомандыСервиса()
	
	ПараметрыКоманды = Новый Структура;
	ПараметрыКоманды.Вставить("Наименование",                  "");                // Полное наименование метода.
	ПараметрыКоманды.Вставить("Адрес",                         "");                // Адрес URI метода.
	ПараметрыКоманды.Вставить("Метод",                         "");                // Метод HTTP соединения, например POST.
	ПараметрыКоманды.Вставить("Таймаут",                       30);                // Длительность ожидания ответа.
	ПараметрыКоманды.Вставить("Данные",                        Неопределено);      // Двоичные данные или строка.
	ПараметрыКоманды.Вставить("СпособОбмена",                  Неопределено);      // Двоичные данные или строка.
	ПараметрыКоманды.Вставить("НастройкиСервисаЭДО",           Неопределено);      // Двоичные данные или строка.
	ПараметрыКоманды.Вставить("Аутентификация",                Неопределено);      // Требуется аутентификация.
	ПараметрыКоманды.Вставить("БлокироватьСообщенияОбОшибках", Неопределено);      // Не выводить сообщения об ошибках.
	ПараметрыКоманды.Вставить("Результат",                     Неопределено);      // Свойство возврата результата, например "path[0].cat".
	ПараметрыКоманды.Вставить("Обработка",                     Неопределено);      // Описание обработки данных результата.
	ПараметрыКоманды.Вставить("Заголовки",                     Новый Соответствие);// Описание обработки данных результата.
	ПараметрыКоманды.Вставить("ДополнительныеПараметры",       Неопределено);      // Дополнительные параметры.
	ПараметрыКоманды.Вставить("Ошибки",                        Новый Соответствие);// Соответствие ошибок, например: (404, "Не найдено"). ОбработкаРезультата
	ПараметрыКоманды.Вставить("РазрешенныеСостояния",          Новый Массив);      // Соответствие ошибок, например: (404, "Не найдено"). ОбработкаРезультата
	ПараметрыКоманды.Вставить("ОбработкаРезультата",           Неопределено);      // Соответствие ошибок, например: (404, "Не найдено"). 
	ПараметрыКоманды.Вставить("Страница",                      0 );                // Номер получаемой страницы
	ПараметрыКоманды.Вставить("ПолучитьВсеСтраницы",           Ложь );             // Перебрать и получить все страницы
	
	Возврат ПараметрыКоманды;
	
КонецФункции

// Выполнение команды сервиса.
//
// Параметры:
//   ПараметрыКоманды - Структура - параметры вызова или имя команды.
//   Отказ - Булево - признак ошибки выполнения.
// Возврат
//   Строка, Массив, Структура - возвращаемые данные сервиса.
//
Функция ВыполнитьКомандуСервиса(ПараметрыКоманды, Отказ)
	
	// Проверка отказа заполнения параметров.
	Если Отказ Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Установка параметров запроса.
	Запрос = Новый HTTPЗапрос(ПараметрыКоманды.Адрес);
	
	Если ПараметрыКоманды.Свойство("Заголовки") Тогда
		Для каждого ПараметрЗаголовка Из ПараметрыКоманды.Заголовки Цикл
			Запрос.Заголовки.Вставить(ПараметрЗаголовка.Ключ, ПараметрЗаголовка.Значение);
		КонецЦикла;
	КонецЕсли;
	
	// Установка данных.
	Если ЗначениеЗаполнено(ПараметрыКоманды.Данные) Тогда
		Если ТипЗнч(ПараметрыКоманды.Данные) = Тип("ДвоичныеДанные") Тогда
			Запрос.УстановитьТелоИзДвоичныхДанных(ПараметрыКоманды.Данные);
		Иначе
			Запрос.УстановитьТелоИзСтроки(ПараметрыКоманды.Данные);
		КонецЕсли;
	КонецЕсли;
	
	ДвоичныеДанныеТела = Запрос.ПолучитьТелоКакДвоичныеДанные();
	Если ДвоичныеДанныеТела = Неопределено Тогда
		Таймаут = 10;
	Иначе 
		Таймаут = ЭлектронныеДокументыВнутренний.ТаймаутПоРазмеруФайла(ДвоичныеДанныеТела.Размер());
	КонецЕсли;
	
	// Получение соединения для способа обмена
	Соединение = ЭлектронныеДокументыВнутренний.ПолучитьСоединение(ПараметрыКоманды.СпособОбмена, Таймаут);
	
	// Выполнение запроса HTTP к сервису.
	Попытка
		
		Ответ = Соединение.ОтправитьДляОбработки(Запрос);
		
		КодСостояния = Ответ.КодСостояния;
	Исключение
		
		Отказ = Истина;
		ТекстОшибки = НСтр("ru = 'Ошибка выполнения запроса к сервису.'");
		ПодробныйТекстОшибки = ТекстОшибки + Символы.ПС + ПараметрыКоманды.Адрес + Символы.ПС
			+ ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьОшибку(ПараметрыКоманды.Наименование,
			ПодробныйТекстОшибки, ТекстОшибки);
		Возврат Неопределено;
		
	КонецПопытки;
	
	Результат = ОбработатьРезультатОтветаСервиса(ПараметрыКоманды, Ответ, Отказ);
	
	Возврат Результат;
	
КонецФункции

// Обработка ответа сервиса.
//
// Параметры:
//  ПараметрыКоманды - Структура - параметры команды.
//  Ответ			 - HTTPОтвет - возвращаемые данные сервиса.
//  Отказ			 - Булево - результат проверки.
// 
// Возвращаемое значение:
//  Произвольный - возвращаемый результат обработки.
//
Функция ОбработатьРезультатОтветаСервиса(Знач ПараметрыКоманды, Ответ, Отказ)
	
	ПолученныеДанные = Новый Структура;
	// Инициализация возврата ошибки.
	Результат = Неопределено;
	КодСостояния = Ответ.КодСостояния;
	Если ПараметрыКоманды.Ошибки.Получить(КодСостояния) = Неопределено
		И КодСостояния <> 200
		И ПараметрыКоманды.РазрешенныеСостояния.Найти(КодСостояния) = Неопределено Тогда
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Внутренняя ошибка сервиса: %1'"), Ответ.ПолучитьТелоКакСтроку());
		ПараметрыКоманды.Ошибки.Вставить(КодСостояния, ТекстОшибки);
	КонецЕсли;
	
	Если ПараметрыКоманды.Ошибки.Получить(КодСостояния) <> Неопределено Тогда
		
		ТекстОшибки = ПараметрыКоманды.Ошибки.Получить(КодСостояния);
		
		Если ТекстОшибки = Ложь Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Отказ = Истина;
		
	Иначе
		
		Если ЗначениеЗаполнено(ПараметрыКоманды.ОбработкаРезультата) Тогда
			
			Если ПараметрыКоманды.ОбработкаРезультата = "КаталогФорматовЭД" Тогда
				
				ПолученныеДанные = ОбъектИзJSONПоСтроке(ПараметрыКоманды, Ответ.ПолучитьТелоКакСтроку(), Отказ);
				
				Если Отказ Тогда
					Возврат Неопределено;
				КонецЕсли;
				
				Результат = ОбработкаРезультатаКаталогФорматовЭД(ПолученныеДанные, Отказ);
				
			ИначеЕсли ПараметрыКоманды.ОбработкаРезультата = "КаталогВидовЭД" Тогда
				
				ПолученныеДанные = ОбъектИзJSONПоСтроке(ПараметрыКоманды, Ответ.ПолучитьТелоКакСтроку(), Отказ);
				
				Если Отказ Тогда
					Возврат Неопределено;
				КонецЕсли;
				
				Результат = ОбработкаРезультатаКаталогВидовЭД(ПолученныеДанные, Отказ);
				
			КонецЕсли;
			
		Иначе
			
			Результат = КодСостояния = 200 Или Не ПараметрыКоманды.РазрешенныеСостояния.Найти(КодСостояния) = Неопределено;
			
		КонецЕсли;
			
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

Функция ОбъектИзJSONПоСтроке(Знач ПараметрыКоманды, Знач СтрокаJSON, Отказ)
	
	Попытка
		ПолученныеДанные = ЗначениеИзСтрокиJSON(СтрокаJSON);
	Исключение
		
		Отказ = Истина;
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		
		ТекстСообщения = НСтр("ru = 'Не удалось прочитать ответ от сервиса по причине:'") + Символы.ПС + КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
		
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьОшибку(ПараметрыКоманды.Наименование,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке), ТекстСообщения);
		
	КонецПопытки;
	
	Возврат ПолученныеДанные;
КонецФункции

// Описание параметров отправки данных в сервис 1С:Сервис настроек.
//
Функция НовоеОписаниеОтправкиДанныхАбонентаВСервисеНастроек()
	
	Результат = Новый Структура;
	Результат.Вставить("ИНН"                            , "");
	Результат.Вставить("КПП"                            , "");
	Результат.Вставить("ИдентификаторЭДО"               , "");
	Результат.Вставить("НазначениеУчетнойЗаписи"        , "");
	Результат.Вставить("Версия            "             , "");
	Результат.Вставить("ПодробноеОписаниеУчетнойЗаписи" , "");
	Результат.Вставить("СертификатыАбонента"            , Новый Массив);
	Результат.Вставить("ВариантыЗаполненияФорматов"           , Новый Массив);
	
	Возврат Результат;
	
КонецФункции

Функция ПараметрыКомандыОтправкаДанныхАбонентаВСервисНастроек(ПараметрыЗапроса, Отказ)
	
	СтруктураJSON      = Новый Структура;
	AuthenticationInfo = Новый Структура;
	identifierInfo     = Новый Структура;
	ИнтернетПоддержкаПользователейПодключена = Истина;
	УстановитьПривилегированныйРежим(Истина);
	Аутентификация = ЭлектронныеДокументыСлужебный.ПараметрыАутентификацииНаСайте();
	Тикет = БилетНаСайтПоддержки(Аутентификация);
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Не ЗначениеЗаполнено(Тикет) Или Не ИнтернетПоддержкаПользователейПодключена Тогда
		Отказ = Истина;
		Возврат Неопределено;
	КонецЕсли;
	
	AuthenticationInfo.Вставить("authToken", Тикет);
	
	СтруктураJSON.Вставить("authenticationInfo", AuthenticationInfo);
	
	Идентификатор = ПреобразоватьВИдентификаторЗапросаСервисаНастроек(ПараметрыЗапроса.ИдентификаторЭДО);
	
	identifierInfo.Вставить("inn"                     , ПараметрыЗапроса.ИНН);
	identifierInfo.Вставить("kpp"                     , ПараметрыЗапроса.КПП);
	identifierInfo.Вставить("id"                      , Идентификатор);
	identifierInfo.Вставить("name"                    , ПараметрыЗапроса.НазначениеУчетнойЗаписи);
	identifierInfo.Вставить("description"             , ПараметрыЗапроса.ПодробноеОписаниеУчетнойЗаписи);
	identifierInfo.Вставить("configurationName"       , Метаданные.Имя);
	identifierInfo.Вставить("programVersionName"      , ПараметрыЗапроса.Версия);
	identifierInfo.Вставить("certificates"            , ПараметрыЗапроса.СертификатыАбонента);
	identifierInfo.Вставить("documentTypes"           , ПараметрыЗапроса.ВариантыЗаполненияФорматов);
	
	СтруктураJSON.Вставить("identifierInfo", identifierInfo);
	
	ТекстJSON = ЗначениеВСтрокуJSON(СтруктураJSON);
	
	ПараметрыКоманды = НовоеОписаниеПараметровКомандыСервиса();
	ПараметрыКоманды.Адрес               = "api/edo-settings/identifiers";
	ПараметрыКоманды.Наименование        = НСтр("ru = 'Отправка данных абонента в сервис 1С:ЭДО'");
	ПараметрыКоманды.Метод               = "POST";
	ПараметрыКоманды.ОбработкаРезультата = Неопределено;
	ПараметрыКоманды.Данные              = ТекстJSON;
	ПараметрыКоманды.Заголовки.Вставить("Content-Type", "application/json");
	ПоддержкаПодключена = Истина;
	Аутентификация = ЭлектронныеДокументыСлужебный.ПараметрыАутентификацииНаСайте();
	БилетПоддержки = БилетНаСайтПоддержки(Аутентификация);
	
	Если ЗначениеЗаполнено(БилетПоддержки) Тогда
		ПараметрыКоманды.Заголовки.Вставить("ticket", БилетПоддержки);
	Иначе
		Отказ = Истина;
	КонецЕсли;
	
	Возврат ПараметрыКоманды;
	
КонецФункции

// Преобразует идентификатор в формат используемый в сервисе настроек
//
// Параметры:
//  ИдентификаторЭДО  - Строка - Идентификатор учетной записи ЭДО
//
// Возвращаемое значение:
//   Строка   - Идентификатор учетной записи ЭДО в формате сервиса настроек
//
Функция ПреобразоватьВИдентификаторЗапросаСервисаНастроек(Знач ИдентификаторЭДО)
	
	ОператорЭДО = Лев(ИдентификаторЭДО, 3);
	
	Если ВРег(ОператорЭДО) <> "2AE" Тогда
		Возврат ИдентификаторЭДО;
	КонецЕсли;
	
	Результат = ИдентификаторЭДО;
	
	Если Сред(ИдентификаторЭДО, СтрДлина(ОператорЭДО) + 1, 1) <> "-" Тогда
		МассивСтрок = Новый Массив;
		МассивСтрок.Добавить(ОператорЭДО);
		МассивСтрок.Добавить("-");
		МассивСтрок.Добавить(Сред(ИдентификаторЭДО, СтрДлина(ОператорЭДО) + 1));
		Результат = СтроковыеФункцииКлиентСервер.ПолучитьСтрокуИзМассиваПодстрок(МассивСтрок, "");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Преобразует идентификатор в формат используемый Оператором ЭДО
//
// Параметры:
//  ИдентификаторЭДО  - Строка - Идентификатор учетной записи ЭДО в сервисе настроек
//
// Возвращаемое значение:
//   Строка   - Идентификатор учетной записи ЭДО в формате оператора ЭДО
//
Функция ПреобразоватьВИдентификаторЗапросаОператораЭДО(Свойство, ИдентификаторЭДО, ДополнительныеПараметры) Экспорт
	
	ОператорЭДО = Лев(ИдентификаторЭДО, 3);
	
	Если ПустаяСтрока(ОператорЭДО) Тогда
		Возврат ИдентификаторЭДО;
	КонецЕсли;
	
	Результат = ИдентификаторЭДО;
	
	Если Сред(ИдентификаторЭДО, СтрДлина(ОператорЭДО) + 1, 1) = "-"
			И ВРег(ОператорЭДО) = "2AE" Тогда
		МассивСтрок = Новый Массив;
		МассивСтрок.Добавить(ОператорЭДО);
		МассивСтрок.Добавить(Сред(ИдентификаторЭДО, СтрДлина(ОператорЭДО) + 2));
		
		Результат = СтроковыеФункцииКлиентСервер.ПолучитьСтрокуИзМассиваПодстрок(МассивСтрок, "");
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

Функция ОбработкаРезультатаКаталогФорматовЭД(Знач ПолученныеДанные, Отказ)
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("Формат"                , Типы().Строка);
	Таблица.Колонки.Добавить("ИдентификаторСервиса"  , Типы().Строка);
	Таблица.Колонки.Добавить("Представление"         , Типы().Строка);
	Таблица.Колонки.Добавить("ДатаНачалаДействия"    , Типы().Дата);
	Таблица.Колонки.Добавить("ДатаОкончанияДействия" , Типы().Дата);
	Таблица.Колонки.Добавить("Регламентированный"    , Типы().Булево);
	Таблица.Колонки.Добавить("ЭтоУПД"                , Типы().Булево);
	Таблица.Колонки.Добавить("ПространстваИмен"      , Типы().Строка);
	Таблица.Колонки.Добавить("ПриказОВведенииФормата", Типы().Строка);
	Таблица.Колонки.Добавить("СсылкаНаПриказОВведенииФормата"        , Типы().Строка);
	
	Для Каждого ОператорЭДО Из ПолученныеДанные.documentFormats Цикл
		
		НоваяСтрока = Таблица.Добавить();
		НоваяСтрока.Формат                = ОператорЭДО.nick;
		НоваяСтрока.Представление         = ОператорЭДО.name;
		НоваяСтрока.ИдентификаторСервиса  = ОператорЭДО.ueid;
		НоваяСтрока.Регламентированный    = ОператорЭДО.isRegulated;
		НоваяСтрока.ЭтоУПД                = ОператорЭДО.isUpd;
		НоваяСтрока.ПространстваИмен      = ОператорЭДО.namespace;
		НоваяСтрока.СсылкаНаПриказОВведенииФормата        = ОператорЭДО.descriptionLink;
		НоваяСтрока.ДатаНачалаДействия    = ДатаИзJsonСПроверкой(ОператорЭДО.startDate);
		НоваяСтрока.ДатаОкончанияДействия = ДатаИзJsonСПроверкой(ОператорЭДО.expireDate);
	КонецЦикла;
	lastChangeDate = ДатаИзJsonСПроверкой(ПолученныеДанные.lastChangeDate);
	Возврат Новый Структура("ДатаПоследнегоИзменения, РазмерСтраницы, ФорматыЭлектронныхДокументов", lastChangeDate, ПолученныеДанные.pageSize, Таблица);
	
КонецФункции

Функция ОбработкаРезультатаКаталогВидовЭД(Знач ПолученныеДанные, Отказ)
	
	Данные = Новый Соответствие;
	
	Для Каждого documentTypes Из ПолученныеДанные.documentTypes Цикл
		
		ВидЭД = Неопределено;
		Мета = Метаданные.Перечисления.ВидыЭД.ЗначенияПеречисления.Найти(documentTypes.type);
		Если Мета <> Неопределено Тогда
			ВидЭД = Перечисления.ВидыЭД[documentTypes.type];
		КонецЕсли;
		
		Данные.Вставить(documentTypes.ueid, ВидЭД);
		
	КонецЦикла;
	
	lastChangeDate = ДатаИзJsonСПроверкой(ПолученныеДанные.lastChangeDate);
	Возврат Новый Структура("ДатаПоследнегоИзменения, РазмерСтраницы, Данные", lastChangeDate, ПолученныеДанные.pageSize, Данные);
	
КонецФункции

// Типы получаемых данных.
// 
// Возвращаемое значение:
//  Структура - описание типов:
//   * Простой         - простой тип.
//   * Строка          - тип Строка.
//   * Число           - тип Число.
//   * Булево          - тип Булево.
//   * Структура       - тип Структура.
//   * Дата            - тип Дата.
//   * ТаблицаЗначений - тип ТаблицаЗначений.
//
Функция Типы()
	
	Результат = Новый Структура;
	Результат.Вставить("Булево"         , Новый ОписаниеТипов("Булево"));
	Результат.Вставить("Число"          , Новый ОписаниеТипов("Число"));
	Результат.Вставить("Дата"           , Новый ОписаниеТипов("Дата"));
	Результат.Вставить("Строка"         , Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(1000)));
	Результат.Вставить("Структура"      , Новый ОписаниеТипов("Структура"));
	Результат.Вставить("Массив"         , Новый ОписаниеТипов("Массив"));
	Результат.Вставить("Таблица"        , Новый ОписаниеТипов("ТаблицаЗначений"));
	Результат.Вставить("СпособыОбменаЭД", Новый ОписаниеТипов("ПеречислениеСсылка.СпособыОбменаЭД"));
	Результат.Вставить("ВидЭД"          , Новый ОписаниеТипов("ПеречислениеСсылка.ВидыЭД"));
	
	Возврат Результат;
	
КонецФункции

// преобразует дату из тестового формата json с проверкой на отсутствие даты
//
// Параметры:
//  Строка          - Строка         - Строка Json
//
// Возвращаемое значение:
//   Дата   - прочитанная Дата
//
Функция ДатаИзJsonСПроверкой(Строка)
	
	Результат = Дата(1,1,1);
	
	Если ЗначениеЗаполнено(Строка) Тогда
		Результат = ДатаИзJSON(Строка);
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

Функция ДатаВJSON(Знач Дата)
	
	Результат = Формат(Дата, "ДФ=yyyy-MM-ddTHH:mm:ss; ДП=0001-01-01T00:00:00") + СмещениеЧасовогоПоясаСеанса();
	Возврат Результат;
	
КонецФункции

Функция ДатаИзJSON(Знач ДатаJSON)
	
	// Формат yyyy-MM-ddTHH:mm:ss+смещение
	ДатаСтрокой = Лев(ДатаJSON, 19);
	УдаляемыеСимволы = Новый Массив;
	УдаляемыеСимволы.Добавить("-");
	УдаляемыеСимволы.Добавить("T");
	УдаляемыеСимволы.Добавить(":");
	Для каждого Символ Из УдаляемыеСимволы Цикл
		ДатаСтрокой = СтрЗаменить(ДатаСтрокой, Символ, "");
	КонецЦикла;
	
	Возврат Дата(ДатаСтрокой);
	
КонецФункции

Функция СмещениеЧасовогоПоясаСеанса()
	
	ЧасовойПояс = ЧасовойПоясСеанса();
	СмещениеВСекундах = СмещениеСтандартногоВремени(ЧасовойПояс);
	ДатаСмещения = Дата(1, 1, 1) + СмещениеВСекундах;
	Смещение = Формат(ДатаСмещения, "ДФ=+HH:mm; ДП=");
	
	Возврат Смещение;
	
КонецФункции

Функция ЗначениеИзСтрокиJSON(СтрокаJSON) Экспорт
	
	Возврат СледующееЗначениеИзСтрокиJSON(СтрокаJSON, СтрДлина(СтрокаJSON));
	
КонецФункции

Функция ЗначениеВСтрокуJSON(Значение, Уровень = 0) Экспорт
	
	Результат = "";
	
	ТипЗначения = ТипЗнч(Значение);
	Если ТипЗначения = Тип("Строка") Тогда
		Результат = Значение;
		Если Найти(Результат, """") Тогда
			Результат = СтрЗаменить(Результат, """", "\""");
		КонецЕсли;
		Если Найти(Результат, Символы.ПС) Тогда
			Результат = СтрЗаменить(Результат, Символы.ПС, "\n");
		КонецЕсли;
		Результат = """" + Результат + """";
	ИначеЕсли ТипЗначения = Тип("Число") Тогда
		Результат = Формат(Значение, "ЧРД=.; ЧН=0; ЧГ=0");
	ИначеЕсли ТипЗначения = Тип("Дата") Тогда
		Результат = """" + Формат(Значение, "ДФ=yyyy-MM-ddTHH:mm:ss; ДП=0001-01-01T00:00:00") + """";
	ИначеЕсли ТипЗначения = Тип("Булево") Тогда
		Результат = Формат(Значение, "БЛ=false; БИ=true")
	ИначеЕсли Типзначения = Тип("Неопределено") 
		ИЛИ ТипЗначения = Тип("Null") Тогда
		Результат = "null";
	ИначеЕсли ТипЗначения = Тип("Массив")
		ИЛИ ТипЗначения = Тип("ФиксированныйМассив") Тогда
		Результат = Результат + "[";
		Уровень = Уровень + 1;
		ПервыйЭлемент = Истина;
		Для Каждого Элемент Из Значение Цикл
			Если ПервыйЭлемент Тогда
				ПервыйЭлемент = Ложь;
			Иначе
				Результат = Результат + ", ";
			КонецЕсли;
			Результат = Результат + Символы.ПС + ОтступУровняВложенностиJSON(Уровень)
				+ ЗначениеВСтрокуJSON(Элемент, Уровень);
		КонецЦикла;
		Уровень = Уровень - 1;
		Результат = Результат + Символы.ПС + ОтступУровняВложенностиJSON(Уровень) + "]";
	ИначеЕсли ТипЗначения = Тип("Структура")
		ИЛИ ТипЗначения = Тип("ФиксированнаяСтруктура") Тогда
		Результат = Результат + "{";
		ПервыйЭлемент = Истина;
		Уровень = Уровень + 1;
		Для Каждого Элемент Из Значение Цикл
			Если ПервыйЭлемент Тогда
				ПервыйЭлемент = Ложь;
			Иначе
				Результат = Результат + ",";
			КонецЕсли;
			Результат = Результат + Символы.ПС + ОтступУровняВложенностиJSON(Уровень)
				+ """" + Элемент.Ключ  + """: " + ЗначениеВСтрокуJSON(Элемент.Значение, Уровень);
		КонецЦикла;
		Уровень = Уровень - 1;
		Результат = Результат + Символы.ПС + ОтступУровняВложенностиJSON(Уровень) + "}";
	Иначе
		ВызватьИсключение НСтр("ru = 'Передано значение недопустимого типа'");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция СледующееЗначениеИзСтрокиJSON(СтрокаJSON, ДлинаСтроки, НомерСимвола = 1, ЕстьСледующее = Ложь)
	
	Результат = Неопределено;
	ТипЗначения = Неопределено;
	НачальныйНомер = 0;
	
	СимволЭкранирован = Ложь;
	ЕстьЭкранированиеКовычек = Ложь;
	ЕстьПереносСтроки = Ложь;
	
	Пока ДлинаСтроки > НомерСимвола Цикл
		
		КодСимвола = КодСимвола(СтрокаJSON, НомерСимвола);
		Если ТипЗначения = Неопределено Тогда
			
			Если КодСимвола = 123 Тогда // {
				Результат = Новый Структура;
				ТипЗначения = 1; // КлючСтруктуры
				
			ИначеЕсли КодСимвола = 91 Тогда // [
				Результат = Новый Массив;
				ТипЗначения = 3; // ЗначениеМассива
				
			ИначеЕсли КодСимвола = 34 Тогда // "
				ТипЗначения = 4; // Строка
				НачальныйНомер = НомерСимвола + 1;
				
			ИначеЕсли КодСимвола = 45 // -
				ИЛИ (КодСимвола >= 48 И КодСимвола <= 57) Тогда // 0...9
				ТипЗначения = 5; // Число
				НачальныйНомер = НомерСимвола;
				
			ИначеЕсли КодСимвола = 116 Тогда // t
				Результат = Истина;
				НомерСимвола = НомерСимвола + 3;
				ТипЗначения = 0; // Разделитель
				
			ИначеЕсли КодСимвола = 102 Тогда // f
				Результат = Ложь;
				НомерСимвола = НомерСимвола + 4;
				ТипЗначения = 0; // Разделитель
				
			ИначеЕсли КодСимвола = 110 Тогда // n
				Результат = Null;
				НомерСимвола = НомерСимвола + 3;
				ТипЗначения = 0; // Разделитель
				
			КонецЕсли;
			
		ИначеЕсли ТипЗначения = 4 Тогда // Строка
			
			Если КодСимвола = 34 Тогда // "
				Если СимволЭкранирован Тогда
					СимволЭкранирован = Ложь;
					ЕстьЭкранированиеКовычек = Истина;
				Иначе
					ЧислоСимволов = НомерСимвола - НачальныйНомер;
					Результат = Сред(СтрокаJSON, НачальныйНомер, ЧислоСимволов);
					Если ЕстьЭкранированиеКовычек Тогда
						Результат = СтрЗаменить(Результат, "\""", """");
					КонецЕсли;
					Если ЕстьПереносСтроки Тогда
						Результат = СтрЗаменить(Результат, "\n", Символы.ПС);
					КонецЕсли;
					НачальныйНомер = 0;
					ТипЗначения = 0; // Разделитель
				КонецЕсли;
			ИначеЕсли КодСимвола = 92 Тогда // \
				СимволЭкранирован = Истина;
			ИначеЕсли КодСимвола = 110 И СимволЭкранирован Тогда // n
				ЕстьПереносСтроки = Истина;
				СимволЭкранирован = Ложь;
			КонецЕсли;
			
		ИначеЕсли ТипЗначения = 5 Тогда // Число
			
			Если Не ((КодСимвола >= 48 И КодСимвола <= 57) // 0...9
				ИЛИ КодСимвола = 46) Тогда // .
				Результат = Число(Сред(СтрокаJSON, НачальныйНомер, НомерСимвола - НачальныйНомер));
				НачальныйНомер = 0;
				ТипЗначения = 0; // Разделитель
			КонецЕсли;
			
		ИначеЕсли ТипЗначения = 1 Тогда // КлючСтруктуры
			
			Если КодСимвола = 34 Тогда // "
				
				Если НачальныйНомер = 0 Тогда
					НачальныйНомер = НомерСимвола + 1;
				Иначе
					КлючСтруктуры = Сред(СтрокаJSON, НачальныйНомер, НомерСимвола - НачальныйНомер);
					НачальныйНомер = 0;
					ТипЗначения = 0; // Разделитель
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли ТипЗначения = 2 Тогда // ЗначениеСтруктуры
			ЕстьСледующее = Ложь;
			ЗначениеСтруктуры = СледующееЗначениеИзСтрокиJSON(СтрокаJSON, ДлинаСтроки, НомерСимвола, ЕстьСледующее);
			Результат.Вставить(КлючСтруктуры, ЗначениеСтруктуры);
			Если ЕстьСледующее Тогда
				ТипЗначения = 1; // КлючСтруктуры
			Иначе
				ТипЗначения = 0; // Разделитель
			КонецЕсли;
			
		ИначеЕсли ТипЗначения = 3 Тогда // ЗначениеМассива
			ЕстьСледующее = Ложь;
			ЗначениеМассива = СледующееЗначениеИзСтрокиJSON(СтрокаJSON, ДлинаСтроки, НомерСимвола, ЕстьСледующее);
			Результат.Добавить(ЗначениеМассива);
			Если Не ЕстьСледующее Тогда
				ТипЗначения = 0; // Разделитель
			КонецЕсли;
			
		КонецЕсли;
		
		Если ТипЗначения <> 0 Тогда // Разделитель
			
		ИначеЕсли КодСимвола = 58 Тогда // :
			ТипЗначения = 2; // ЗначениеСтруктуры
			
		ИначеЕсли КодСимвола = 93 ИЛИ КодСимвола = 125 Тогда // ] или }
			Возврат Результат;
			
		ИначеЕсли КодСимвола = 44 Тогда // ,
			ЕстьСледующее = Истина;
			Возврат Результат;
			
		КонецЕсли;
		
		НомерСимвола = НомерСимвола + 1;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ОтступУровняВложенностиJSON(Уровень)
	
	Результат = "";
	
	Для Счетчик = 1 По Уровень Цикл
		Результат = Результат + Символы.Таб;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция СЧФДОП() Экспорт
	Возврат "СЧФДОП";
КонецФункции

Функция СЧФ() Экспорт
	Возврат "СЧФ";
КонецФункции

Функция ДОП() Экспорт
	Возврат "ДОП";
КонецФункции

Функция ТаблицаЗначенийВМассив(ТаблицаЗначений) Экспорт
	
	Массив = Новый Массив();
	СтруктураСтрокой = "";
	НужнаЗапятая = Ложь;
	Для Каждого Колонка Из ТаблицаЗначений.Колонки Цикл
		Если НужнаЗапятая Тогда
			СтруктураСтрокой = СтруктураСтрокой + ",";
		КонецЕсли;
		СтруктураСтрокой = СтруктураСтрокой + Колонка.Имя;
		НужнаЗапятая = Истина;
	КонецЦикла;
	Для Каждого Строка Из ТаблицаЗначений Цикл
		НоваяСтрока = Новый Структура(СтруктураСтрокой);
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		Массив.Добавить(НоваяСтрока);
	КонецЦикла;
	Возврат Массив;

КонецФункции

// РаботаССервисомНастроек (конец)
////////////////////////////////////////////////////////////////////////////////////////////////
