
Функция ВерсияБиблиотеки() Экспорт
	
	Возврат "2.0.4.9";
	
КонецФункции

Функция КодПризнакаСпособаРасчета(ПризнакСпособаРасчета) Экспорт
	
	ПризнакиСпособаРасчета = Новый Соответствие();
	ПризнакиСпособаРасчета.Вставить(ПредопределенноеЗначение("Перечисление.ПризнакиСпособаРасчета.ПредоплатаПолная")         , 1); 
	ПризнакиСпособаРасчета.Вставить(ПредопределенноеЗначение("Перечисление.ПризнакиСпособаРасчета.ПредоплатаЧастичная")      , 2);
	ПризнакиСпособаРасчета.Вставить(ПредопределенноеЗначение("Перечисление.ПризнакиСпособаРасчета.Аванс")                    , 3); 
	ПризнакиСпособаРасчета.Вставить(ПредопределенноеЗначение("Перечисление.ПризнакиСпособаРасчета.ПередачаСПолнойОплатой")   , 4); 
	ПризнакиСпособаРасчета.Вставить(ПредопределенноеЗначение("Перечисление.ПризнакиСпособаРасчета.ПередачаСЧастичнойОплатой"), 5);  
	ПризнакиСпособаРасчета.Вставить(ПредопределенноеЗначение("Перечисление.ПризнакиСпособаРасчета.ПередачаБезОплаты")        , 6);  
	ПризнакиСпособаРасчета.Вставить(ПредопределенноеЗначение("Перечисление.ПризнакиСпособаРасчета.ОплатаКредита")            , 7);  
	
	Возврат ПризнакиСпособаРасчета.Получить(ПризнакСпособаРасчета);
	
КонецФункции

// Получить признак способа расчета по коду.
// 
Функция ПризнакСпособаРасчетаПоКоду(КодПризнакаСпособаРасчета) Экспорт
	
	ПризнакиСпособаРасчета = Новый Соответствие();
	ПризнакиСпособаРасчета.Вставить(1, ПредопределенноеЗначение("Перечисление.ПризнакиСпособаРасчета.ПредоплатаПолная")); 
	ПризнакиСпособаРасчета.Вставить(2, ПредопределенноеЗначение("Перечисление.ПризнакиСпособаРасчета.ПредоплатаЧастичная"));
	ПризнакиСпособаРасчета.Вставить(3, ПредопределенноеЗначение("Перечисление.ПризнакиСпособаРасчета.Аванс")); 
	ПризнакиСпособаРасчета.Вставить(4, ПредопределенноеЗначение("Перечисление.ПризнакиСпособаРасчета.ПередачаСПолнойОплатой")); 
	ПризнакиСпособаРасчета.Вставить(5, ПредопределенноеЗначение("Перечисление.ПризнакиСпособаРасчета.ПередачаСЧастичнойОплатой"));  
	ПризнакиСпособаРасчета.Вставить(6, ПредопределенноеЗначение("Перечисление.ПризнакиСпособаРасчета.ПередачаБезОплаты"));  
	ПризнакиСпособаРасчета.Вставить(7, ПредопределенноеЗначение("Перечисление.ПризнакиСпособаРасчета.ОплатаКредита"));  
	
	Возврат ПризнакиСпособаРасчета.Получить(КодПризнакаСпособаРасчета);
	
КонецФункции

// Получить код системы налогообложения ККТ.
// 
Функция КодСистемыНалогообложенияККТ(СистемаНалогообложенияККТ) Экспорт
	
	СистемыНалогообложения = Новый Соответствие();
	СистемыНалогообложения.Вставить(ПредопределенноеЗначение("Перечисление.ТипыСистемНалогообложенияККТ.ОСН")           , 0);
	СистемыНалогообложения.Вставить(ПредопределенноеЗначение("Перечисление.ТипыСистемНалогообложенияККТ.УСНДоход")      , 1);
	СистемыНалогообложения.Вставить(ПредопределенноеЗначение("Перечисление.ТипыСистемНалогообложенияККТ.УСНДоходРасход"), 2);
	СистемыНалогообложения.Вставить(ПредопределенноеЗначение("Перечисление.ТипыСистемНалогообложенияККТ.ЕНВД")          , 3);
	СистемыНалогообложения.Вставить(ПредопределенноеЗначение("Перечисление.ТипыСистемНалогообложенияККТ.ЕСН")           , 4);
	СистемыНалогообложения.Вставить(ПредопределенноеЗначение("Перечисление.ТипыСистемНалогообложенияККТ.Патент")        , 5);
	
	Возврат СистемыНалогообложения.Получить(СистемаНалогообложенияККТ);
	
КонецФункции

// Получить систему налогообложения ККТ по коду
// 
Функция СистемаНалогообложенияККТПоКоду(КодСистемыНалогообложенияККТ) Экспорт
	
	СистемыНалогообложения = Новый Соответствие();
	СистемыНалогообложения.Вставить(0, ПредопределенноеЗначение("Перечисление.ТипыСистемНалогообложенияККТ.ОСН"));
	СистемыНалогообложения.Вставить(1, ПредопределенноеЗначение("Перечисление.ТипыСистемНалогообложенияККТ.УСНДоход"));
	СистемыНалогообложения.Вставить(2, ПредопределенноеЗначение("Перечисление.ТипыСистемНалогообложенияККТ.УСНДоходРасход"));
	СистемыНалогообложения.Вставить(3, ПредопределенноеЗначение("Перечисление.ТипыСистемНалогообложенияККТ.ЕНВД"));
	СистемыНалогообложения.Вставить(4, ПредопределенноеЗначение("Перечисление.ТипыСистемНалогообложенияККТ.ЕСН"));
	СистемыНалогообложения.Вставить(5, ПредопределенноеЗначение("Перечисление.ТипыСистемНалогообложенияККТ.Патент"));
	
	Возврат СистемыНалогообложения.Получить(КодСистемыНалогообложенияККТ);
	
КонецФункции

// Получить код расчета денежными средствами.
// 
Функция КодРасчетаДенежнымиСредствами(ТипРасчета) Экспорт
	
	ТипыРасчета = Новый Соответствие();
	ТипыРасчета.Вставить(ПредопределенноеЗначение("Перечисление.ТипыРасчетаДенежнымиСредствами.ПриходДенежныхСредств")        , 1);
	ТипыРасчета.Вставить(ПредопределенноеЗначение("Перечисление.ТипыРасчетаДенежнымиСредствами.ВозвратДенежныхСредств")       , 2);
	ТипыРасчета.Вставить(ПредопределенноеЗначение("Перечисление.ТипыРасчетаДенежнымиСредствами.РасходДенежныхСредств")        , 3);
	ТипыРасчета.Вставить(ПредопределенноеЗначение("Перечисление.ТипыРасчетаДенежнымиСредствами.ВозвратРасходаДенежныхСредств"), 4);
	
	Возврат ТипыРасчета.Получить(ТипРасчета);
	
КонецФункции

// Получить типа расчета денежными средствами по коду.
// 
Функция РасчетДенежнымиСредствамиПоКоду(КодПризнакаРасчета) Экспорт
	
	ТипыРасчета = Новый Соответствие();
	ТипыРасчета.Вставить(1, ПредопределенноеЗначение("Перечисление.ТипыРасчетаДенежнымиСредствами.ПриходДенежныхСредств"));
	ТипыРасчета.Вставить(2, ПредопределенноеЗначение("Перечисление.ТипыРасчетаДенежнымиСредствами.ВозвратДенежныхСредств"));
	ТипыРасчета.Вставить(3, ПредопределенноеЗначение("Перечисление.ТипыРасчетаДенежнымиСредствами.РасходДенежныхСредств"));
	ТипыРасчета.Вставить(4, ПредопределенноеЗначение("Перечисление.ТипыРасчетаДенежнымиСредствами.ВозвратРасходаДенежныхСредств"));
	
	Возврат ТипыРасчета.Получить(КодПризнакаРасчета);
	
КонецФункции

Функция КодПризнакаАгента(КодПризнакаАгента) Экспорт
	
	ПризнакиАгента = Новый Соответствие(); 
	
	ПризнакиАгента.Вставить(ПредопределенноеЗначение("Перечисление.ПризнакиАгента.БанковскийПлатежныйАгент")   , 0);
	ПризнакиАгента.Вставить(ПредопределенноеЗначение("Перечисление.ПризнакиАгента.БанковскийПлатежныйСубагент"), 1);
	ПризнакиАгента.Вставить(ПредопределенноеЗначение("Перечисление.ПризнакиАгента.ПлатежныйАгент")             , 2);
	ПризнакиАгента.Вставить(ПредопределенноеЗначение("Перечисление.ПризнакиАгента.ПлатежныйСубагент")          , 3);
	ПризнакиАгента.Вставить(ПредопределенноеЗначение("Перечисление.ПризнакиАгента.Поверенный")                 , 4);
	ПризнакиАгента.Вставить(ПредопределенноеЗначение("Перечисление.ПризнакиАгента.Комиссионер")                , 5);
	ПризнакиАгента.Вставить(ПредопределенноеЗначение("Перечисление.ПризнакиАгента.Агент")                      , 6);
	
	Возврат ПризнакиАгента.Получить(КодПризнакаАгента);
	
КонецФункции

// Получить код типа признака агента.
// 
Функция ПризнакАгентаПоКоду(ПризнакАгента) Экспорт
	
	ПризнакиАгента = Новый Соответствие(); 
	
	ПризнакиАгента.Вставить(0, ПредопределенноеЗначение("Перечисление.ПризнакиАгента.БанковскийПлатежныйАгент"));
	ПризнакиАгента.Вставить(1, ПредопределенноеЗначение("Перечисление.ПризнакиАгента.БанковскийПлатежныйСубагент"));
	ПризнакиАгента.Вставить(2, ПредопределенноеЗначение("Перечисление.ПризнакиАгента.ПлатежныйАгент"));
	ПризнакиАгента.Вставить(3, ПредопределенноеЗначение("Перечисление.ПризнакиАгента.ПлатежныйСубагент"));
	ПризнакиАгента.Вставить(4, ПредопределенноеЗначение("Перечисление.ПризнакиАгента.Поверенный"));
	ПризнакиАгента.Вставить(5, ПредопределенноеЗначение("Перечисление.ПризнакиАгента.Комиссионер"));
	ПризнакиАгента.Вставить(6, ПредопределенноеЗначение("Перечисление.ПризнакиАгента.Агент"));
	
	Возврат ПризнакиАгента.Получить(ПризнакАгента);
	
КонецФункции

// Получить код признака способа расчета.
// 
Функция КодПризнакаПредметаРасчета(ПризнакПредметаРасчета) Экспорт
	
	ПризнакиПредметаРасчета = Новый Соответствие(); 
	
	ПризнакиПредметаРасчета.Вставить(ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.Товар")                  , 1);
	ПризнакиПредметаРасчета.Вставить(ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.ПодакцизныйТовар")       , 2);
	ПризнакиПредметаРасчета.Вставить(ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.Работа")                 , 3);
	ПризнакиПредметаРасчета.Вставить(ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.Услуга")                 , 4);
	ПризнакиПредметаРасчета.Вставить(ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.СтавкаАзартнойИгры")     , 5);
	ПризнакиПредметаРасчета.Вставить(ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.ВыигрышАзартнойИгры")    , 6);
	ПризнакиПредметаРасчета.Вставить(ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.ЛотерейныйБилет")        , 7);
	ПризнакиПредметаРасчета.Вставить(ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.ВыигрышЛотереи")         , 8);
	ПризнакиПредметаРасчета.Вставить(ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.ПредоставлениеРИД")      , 9);
	ПризнакиПредметаРасчета.Вставить(ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.ПлатежВыплата")          , 10);
	ПризнакиПредметаРасчета.Вставить(ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.АгентскоеВознаграждение"), 11);
	ПризнакиПредметаРасчета.Вставить(ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.СоставнойПредметРасчета"), 12);
	ПризнакиПредметаРасчета.Вставить(ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.ИнойПредметРасчета")     , 13);
	
	Возврат ПризнакиПредметаРасчета.Получить(ПризнакПредметаРасчета);
	
КонецФункции

// Получить признак способа расчета по коду.
// 
Функция ПризнакПредметаРасчетаПоКоду(КодПризнакаПредметаРасчета) Экспорт
	
	ПризнакиПредметаРасчета = Новый Соответствие(); 
	
	ПризнакиПредметаРасчета.Вставить(1,  ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.Товар"));
	ПризнакиПредметаРасчета.Вставить(2,  ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.ПодакцизныйТовар"));
	ПризнакиПредметаРасчета.Вставить(3,  ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.Работа"));
	ПризнакиПредметаРасчета.Вставить(4,  ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.Услуга"));
	ПризнакиПредметаРасчета.Вставить(5,  ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.СтавкаАзартнойИгры"));
	ПризнакиПредметаРасчета.Вставить(6,  ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.ВыигрышАзартнойИгры"));
	ПризнакиПредметаРасчета.Вставить(7,  ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.ЛотерейныйБилет"));
	ПризнакиПредметаРасчета.Вставить(8,  ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.ВыигрышЛотереи"));
	ПризнакиПредметаРасчета.Вставить(9,  ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.ПредоставлениеРИД"));
	ПризнакиПредметаРасчета.Вставить(10, ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.ПлатежВыплата"));
	ПризнакиПредметаРасчета.Вставить(11, ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.АгентскоеВознаграждение"));
	ПризнакиПредметаРасчета.Вставить(12, ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.СоставнойПредметРасчета"));
	ПризнакиПредметаРасчета.Вставить(13, ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.ИнойПредметРасчета"));
	
	Возврат ПризнакиПредметаРасчета.Получить(КодПризнакаПредметаРасчета);
	
КонецФункции

// Получить код типа маркировки ККТ.
// 
Функция ТипМаркировкиККТПоКоду(КодТипМаркировкиККТ) Экспорт
	
	ТипыМаркировкиККТ = Новый Соответствие(); 
	
//ТипыМаркировкиККТ.Вставить("02"  , ПредопределенноеЗначение("Перечисление.ТипыМаркировкиККТ.ИзделияИзМеха"));
//	ТипыМаркировкиККТ.Вставить("03"  , ПредопределенноеЗначение("Перечисление.ТипыМаркировкиККТ.ЛекарственныеПрепараты"));
//	ТипыМаркировкиККТ.Вставить("05"  , ПредопределенноеЗначение("Перечисление.ТипыМаркировкиККТ.ТабачнаяПродукция"));
//	ТипыМаркировкиККТ.Вставить("1520", ПредопределенноеЗначение("Перечисление.ТипыМаркировкиККТ.ОбувныеТовары"));
	
	Возврат Неопределено//ТипыМаркировкиККТ.Получить(КодТипМаркировкиККТ)
		;
	
КонецФункции

Функция ПараметрыФискальногоНакопителяОбщие() Экспорт
	
	Параметры = Новый Структура();
	// ФФД 1.0
	Параметры.Вставить("РегистрационныйНомерККТ");
	Параметры.Вставить("ОрганизацияНазвание");
	Параметры.Вставить("ОрганизацияИНН");
	Параметры.Вставить("АдресУстановкиККТ");
	Параметры.Вставить("КодыСистемыНалогообложения");
	Параметры.Вставить("ПризнакАвтономногоРежима"      , Ложь);
	Параметры.Вставить("ПризнакАвтоматическогоРежима"  , Ложь);
	Параметры.Вставить("НомерАвтоматаДляАвтоматическогоРежима");
	Параметры.Вставить("ПризнакШифрованиеДанных"       , Ложь);
	Параметры.Вставить("ПризнакРасчетовЗаУслуги"       , Ложь);
	Параметры.Вставить("ПризнакФормированияТолькоБСО"  , Ложь);
	Параметры.Вставить("ПризнакРасчетовТолькоВИнтернет", Ложь);
	Параметры.Вставить("ОрганизацияОФДИНН");
	Параметры.Вставить("ОрганизацияОФДНазвание");
	// ФФД 1.0.5 & 1.1
 	Параметры.Вставить("МестоПроведенияРасчетов"); // PlaceSettle
	Параметры.Вставить("ПродажаПодакцизногоТовара"); //SaleExcisableGoods
	Параметры.Вставить("ПроведенияАзартныхИгр"); //SignOfGambling
	Параметры.Вставить("ПроведенияЛотерей"); //SignOfLottery
	Параметры.Вставить("ПризнакиАгента"); //SignOfAgent 
	Параметры.Вставить("УстановкаПринтераВАвтомате"); //PrinterAutomatic
	Возврат Параметры; 
	
КонецФункции

Функция ПараметрыРегистрацииККТ() Экспорт
	
	Параметры = ПараметрыФискальногоНакопителяОбщие();
	Параметры.Вставить("ЗаводскойНомерККТ");
	Параметры.Вставить("ПризнакФискализации");
	Параметры.Вставить("ЗаводскойНомерФН");
	Параметры.Вставить("НомерДокументаФискализации");
	Параметры.Вставить("ДатаВремяФискализации");
	Параметры.Вставить("ВерсияФФДККТ");
	Параметры.Вставить("ВерсияФФДФН");

	Возврат Параметры; 
	
КонецФункции

Функция ПараметрыДанныеАгента() Экспорт
	
	// ФФД - Значения реквизита «данные агента» (тег 1223) указаны в таблице 22.
	Параметры = Новый Структура();
	
	ПлатежныйАгент = Новый Структура();
	ПлатежныйАгент.Вставить("Операция", Неопределено);  // Строка - Операция платежного агента.
	ПлатежныйАгент.Вставить("Телефон" , Неопределено);  // Строка - Телефон платежного агента.
	Параметры.Вставить("ПлатежныйАгент", ПлатежныйАгент);
	
	ОператорПеревода = Новый Структура();
	ОператорПеревода.Вставить("Телефон"     , Неопределено); // Строка - Телефон оператора перевода.
	ОператорПеревода.Вставить("Наименование", Неопределено); // Строка - Наименование оператора перевода.
	ОператорПеревода.Вставить("Адрес"       , Неопределено); // Строка - Адрес оператора перевода.
	ОператорПеревода.Вставить("ИНН"         , Неопределено); // Строка - ИНН оператора перевода.
	Параметры.Вставить("ОператорПеревода", ОператорПеревода);
	
	ОператорПоПриемуПлатежей = Новый Структура();
	ОператорПоПриемуПлатежей.Вставить("Телефон", Неопределено); // Строка - Телефон оператора по приему платежей.
	Параметры.Вставить("ОператорПоПриемуПлатежей", ОператорПоПриемуПлатежей);
	
	Возврат Параметры; 
	
КонецФункции

Функция ПараметрыДанныеПоставщика() Экспорт
	
	Параметры = Новый Структура();
	Параметры.Вставить("Телефон");      // Строка - Телефон поставщика.
	Параметры.Вставить("Наименование"); // Строка - Наименование поставщика.
	Параметры.Вставить("ИНН");          // Строка - ИНН поставщика.
	Возврат Параметры; 
	
КонецФункции

Функция ПараметрыСостоянияККТ() Экспорт
	
	Параметры = Новый Структура();
	Параметры.Вставить("КоличествоНепереданныхФД"   , Неопределено); // Количество непереданных документов (BacklogDocumentsCounter).
	Параметры.Вставить("НомерПервогоНепереданногоФД", Неопределено);  // Номер первого непереданного документа (BacklogDocumentFirstNumber). 
	Параметры.Вставить("ДатаПервогоНепереданногоФД ", Неопределено); // Дата и время первого из непереданных документов (BacklogDocumentFirstDateTime).
	
	Возврат Параметры; 
	
КонецФункции

Функция ПараметрыОткрытияЗакрытияСмены() Экспорт
	
	ПараметрыОперации = Новый Структура();
	ПараметрыОперации.Вставить("Кассир"     , НСтр("ru='Администратор'")); // Должность и фамилия лица, осуществившего операцию.
	ПараметрыОперации.Вставить("КассирИНН"  , Неопределено); // Идентификационный номер налогоплательщика кассира, при наличии.
	Возврат ПараметрыОперации; 
	
КонецФункции

// Заполнить структуру фискализации чека
//
Функция ПараметрыФискализацииЧека() Экспорт
	
	ПараметрыФискализации = Новый Структура();

	ПараметрыФискализации.Вставить("Кассир");
	ПараметрыФискализации.Вставить("ДокументОснование");
	ПараметрыФискализации.Вставить("Организация");
	ПараметрыФискализации.Вставить("ТорговыйОбъект");
	ПараметрыФискализации.Вставить("КорректируемыйДокумент");
	
	ПараметрыФискализации.Вставить("ТипРасчета");
	ПараметрыФискализации.Вставить("ТипДокумента");
	ПараметрыФискализации.Вставить("ТипИнкассации");
	
	ПараметрыФискализации.Вставить("РевизияИнтерфейса");
	ПараметрыФискализации.Вставить("ШиринаСтроки");
	ПараметрыФискализации.Вставить("РегистрационныйНомерККТ");
	ПараметрыФискализации.Вставить("ЗаводскойНомерФН"); 
	ПараметрыФискализации.Вставить("ДополнительныйРеквизит");
	
	ПараметрыФискализации.Вставить("НомерСменыККТ"   , 0); // Номер смены.
	ПараметрыФискализации.Вставить("НомерЧекаККТ"    , 0); // Номер фискального чека.
	ПараметрыФискализации.Вставить("НомерЧекаЗаСмену", 0); // Номер чека за смену.
	ПараметрыФискализации.Вставить("ДатаВремяЧека"); // Дата и время фискализации чека на ККТ.
	
	ПараметрыФискализации.Вставить("СуммаЧека", 0);
	ПараметрыФискализации.Вставить("ОплатаНаличные" , 0);                   
	ПараметрыФискализации.Вставить("ОплатаЭлектронно", 0);
	ПараметрыФискализации.Вставить("ОплатаПредоплата", 0);  
	ПараметрыФискализации.Вставить("ОплатаПостоплата", 0);
	ПараметрыФискализации.Вставить("ОплатаВстречноеПредоставление", 0);
	
	ПараметрыФискализации.Вставить("ФискальныйПризнак" , ""); // Фискальный признак документа.
	ПараметрыФискализации.Вставить("АдресСайтаПроверки", ""); // Адрес cайта проверки ФНС.
	
	ПараметрыФискализации.Вставить("Электронно");
	ПараметрыФискализации.Вставить("Отправляет1СSMS");
	ПараметрыФискализации.Вставить("Отправляет1СEmail");
	
	ПараметрыФискализации.Вставить("ДанныеЧекаXML");
	ПараметрыФискализации.Вставить("РезультатОперацииXML");
	ПараметрыФискализации.Вставить("ТекстСообщения");
	
	ПараметрыФискализации.Вставить("ЧекКоррекцииСторно");
	ПараметрыФискализации.Вставить("СформироватьЧекКоррекции", Ложь);
	
	ПараметрыФискализации.Вставить("НеприменениеККТ", Истина);
	ПараметрыФискализации.Вставить("ВерсияФФДККТ11" , Ложь);
	
	ПараметрыФискализации.Вставить("Результат", Истина);
	ПараметрыФискализации.Вставить("ОперацияЗаписана", Истина);
	ПараметрыФискализации.Вставить("ТекстОшибки");
	
	Возврат ПараметрыФискализации;
	
КонецФункции 

Функция ПараметрыВыполненияОперации() Экспорт
	
	ПараметрыОперации = Новый Структура();
	ПараметрыОперации.Вставить("Кассир"     , НСтр("ru='Администратор'")); // Должность и фамилия лица, осуществившего операцию.
	ПараметрыОперации.Вставить("КассирИНН"  , Неопределено); // Идентификационный номер налогоплательщика кассира, при наличии.
	Возврат ПараметрыОперации; 
	
КонецФункции

// Заполняет структуру данных кода товарной номенклатуры.
//
Функция ПараметрыДанныеКодаТоварнойНоменклатуры() Экспорт
	
	Параметры = Новый Структура();
	Параметры.Вставить("ТипМаркировки"); // Перечисление.ТипыМаркировкиККТ, Обязательно - Тип маркировки. 
	Параметры.Вставить("КонтрольныйИдентификационныйЗнак");       // Строка,Необязательно - Контрольный идентификационный знак (КиЗ).
	Параметры.Вставить("ГлобальныйИдентификаторТорговойЕдиницы"); // Строка,Необязательно - Глобальный идентификатор торговой единицы (GTIN).
	Параметры.Вставить("СерийныйНомер"); // Строка,Необязательно - Серийный номер.
	Параметры.Вставить("КодКонтрольнойМарки"); // Строка,Необязательно - Код контрольной марки.
	Параметры.Вставить("ИзмененияСостояния"); // Перечисление,Необязательно - Состояние в которое предполагается перевод контрольной марки.
	Возврат Параметры; 
	
КонецФункции

Функция ПараметрыОперацииФискализацииЧека() Экспорт
	
	ПараметрыЧека = Новый Структура();
	// Общие реквизиты для всех типов оборудования.
	ПараметрыЧека.Вставить("ДокументОснование"  , Неопределено); // Ссылка,Необязательно. Документ по которому пробивается чек.
	ПараметрыЧека.Вставить("Организация"       , Неопределено); // Ссылка,Обязательно. Организация по которому пробивается чек.
	ПараметрыЧека.Вставить("ТорговыйОбъект"    , Неопределено); // Ссылка,Необязательно. Объект по которому пробивается чек.
	ПараметрыЧека.Вставить("Электронно"         , Ложь); // Булево,Обязательно - Чек будет предоставлен в электронной форме, без печати. Ложь-Значение по умолчанию.
	
	// Тип расчета - "Перечисление.ТипыРасчетаДенежнымиСредствами"
	ПараметрыЧека.Вставить("ТипРасчета"        , ПредопределенноеЗначение("Перечисление.ТипыРасчетаДенежнымиСредствами.ПриходДенежныхСредств")); // Обязательно.

	// Параметры для ККТ по ФЗ-54
	ПараметрыЧека.Вставить("Кассир"            , Неопределено); // Строка,Обязательно   - ФИО лица, осуществившего расчет с покупателем (клиентом), оформившего кассовый чек.
	ПараметрыЧека.Вставить("КассирИНН"         , Неопределено); // Строка,Необязательно - Идентификационный номер налогоплательщика кассира, при наличии.
	ПараметрыЧека.Вставить("Отправляет1СSMS"   , Ложь); // Булево,Обязательно - SMS отправляет средствами 1C.   Ложь-Значение по умолчанию.
	ПараметрыЧека.Вставить("Отправляет1СEmail" , Ложь); // Булево,Обязательно - Email отправляет средствами 1C. Ложь-Значение по умолчанию.
	
	// Системы налогообложения - "Перечисление.ТипыСистемНалогообложенияККТ"
	ПараметрыЧека.Вставить("СистемаНалогообложения", ПредопределенноеЗначение("Перечисление.ТипыСистемНалогообложенияККТ.ОСН")); // Обязательно. Заполняется значением по умолчанию.  
	ПараметрыЧека.Вставить("АдресРасчетов"     ); // Строка,Необязательно - Адрес расчетов (Тег 1009).
	ПараметрыЧека.Вставить("МестоРасчетов"     ); // Строка,Необязательно - Место расчетов (Тег 1187).
	ПараметрыЧека.Вставить("ОтправительEmail"  ); // Строка,Необязательно - Адрес электронной почты отправителя чека (Тег 1117).
	ПараметрыЧека.Вставить("ПокупательEmail"   ); // Строка,Необязательно - Адрес электронной почты покупателя.
	ПараметрыЧека.Вставить("ПокупательНомер"   ); // Строка,Необязательно - Телефонный номер покупателя.
	
	// Признак агента - "Перечисление.ПризнакиАгента", (ФФД, Тег 1057, Расшифровка - таблица 10)
	ПараметрыЧека.Вставить("ПризнакАгента"     , Неопределено); // Перечисление - Признак агента (Тег 1057).
	ПараметрыЧека.Вставить("ДанныеАгента"      , ПараметрыДанныеАгента());     // Структура,Заполнение необязательно - Данные агента.
	ПараметрыЧека.Вставить("ДанныеПоставщика"  , ПараметрыДанныеПоставщика()); // Структура,Заполнение необязательно - Данные поставщика.
	
	// Параметры необходимые для ФР
	ПараметрыЧека.Вставить("СерийныйНомер"       ); // Строка,Необязательно - Заводской номер ККМ (совместимость с ФР).
	// Параметры необходимые для чека ЕНВД на принтере чеков
	ПараметрыЧека.Вставить("ОрганизацияНазвание" ); // Строка,Необязательно - Название организации (Для чека ЕНВД).
	ПараметрыЧека.Вставить("ОрганизацияИНН"      ); // Строка,Необязательно - ИНН организации (Для чека ЕНВД).
	ПараметрыЧека.Вставить("ОрганизацияКПП"      ); // Строка,Необязательно - КПП организации (Для чека ЕНВД).
	ПараметрыЧека.Вставить("АдресМагазина"       ); // Строка,Необязательно - Адрес магазина (Для чека ЕНВД).
	ПараметрыЧека.Вставить("НаименованиеМагазина"); // Строка,Необязательно - Наименование магазина (Для чека ЕНВД).
	ПараметрыЧека.Вставить("НомерКассы"          ); // Строка,Необязательно - Номер кассы (Для чека ЕНВД).
	ПараметрыЧека.Вставить("НомерЧека"           ); // Строка,Необязательно - Номер чека  (Для чека ЕНВД).
	ПараметрыЧека.Вставить("НомерСмены"          ); // Строка,Необязательно - Номер смены (Для чека ЕНВД).
	ПараметрыЧека.Вставить("ДатаВремя", ТекущаяДата()); // ДатаВремя, Необязательно - Дата время в чеке (Для чека ЕНВД).
	ПараметрыЧека.Вставить("ТекстШапки"   , НСтр("ru='ДОБРО ПОЖАЛОВАТЬ!'"));   // Строка - заполняется значением по умолчанию. 
	ПараметрыЧека.Вставить("ТекстПодвала" , НСтр("ru='СПАСИБО ЗА ПОКУПКУ!'")); // Строка - заполняется значением по умолчанию. 
	ПараметрыЧека.Вставить("КопийЧека"    , 1); // Число,Необязательно - Сколько печатать копий чеков ЕНВД на принтере чеков.

	// Позиции чека для фискализациию
	ПараметрыЧека.Вставить("ПозицииЧека"  , Новый Массив()); // Массив элементов "Структура". Обязательно.
	// Таблица оплаты чека
	ПараметрыЧека.Вставить("ТаблицаОплат" , Новый Массив()); // Массив элементов "Структура". Обязательно.
	
	// Параметры для печати чека по шаблону.
	ПараметрыЧека.Вставить("ШаблонЧека"            ); // Ссылка,Необязательно - Пользовательский шаблон для формирования чека.
	ПараметрыЧека.Вставить("КассаККМ"              ); // Ссылка,Необязательно - Касса ККМ. 
	ПараметрыЧека.Вставить("НефискальныеДокументы" , Новый Массив()); // Массив нефискальных документов. Необязательно.
	
	ПараметрыЧека.Вставить("ДополнительныйРеквизит"  , Неопределено); // Строка,Необязательно - Дополнительный реквизит Тег 1192.
	ПараметрыЧека.Вставить("СформироватьЧекКоррекции", Ложь); // Булево,Необязательно - сформировать чек коррекции, только для ФФД 1.1.
	
	// Формато-логический контроль - "ПеречислениеСсылка.СпособыФорматоЛогическогоКонтроля"
	ПараметрыЧека.Вставить("СпособФорматоЛогическогоКонтроля", 
		ПредопределенноеЗначение("Перечисление.СпособыФорматоЛогическогоКонтроля.НеКонтролировать")); // Перечисление,Необязательно - Способ формато-логического контроля. 
	ПараметрыЧека.Вставить("ДопустимоеРасхождениеФорматоЛогическогоКонтроля", 0.01); // Число,Необязательно - устанавливается значение по умочанию. 
	ПараметрыЧека.Вставить("ИндивидуальныйРежимПодготовкиДанныхКПередачеВОФД", Ложь); // Булево,Необязательно - устанавливается значение по умолчанию. 
	
	Возврат ПараметрыЧека; 
	
КонецФункции

Функция ПараметрыФискальнойСтрокиЧека() Экспорт
	
	ПараметрыСтроки = Новый Структура();
	ПараметрыСтроки.Вставить("ФискальнаяСтрока");  // Тип строки. Исходящий служебный параметр. 
	ПараметрыСтроки.Вставить("НомерСтрокиТовара"); // Необязательно, Дополнительный параметр для обработки строк чека.
	
	// Обязательные реквизиты
	ПараметрыСтроки.Вставить("Наименование");    	 // Обязательно, Наименование предмета расчета
	ПараметрыСтроки.Вставить("Количество"     , 0);  // Обязательно, Количество предмета расчета 
	ПараметрыСтроки.Вставить("Цена"           , 0);  // Обязательно, Цена без учета скидок и наценок (Необходимо для ФР и ФФД 1.0)
	ПараметрыСтроки.Вставить("ЦенаСоСкидками" , 0);  // Обязательно, Цена с учетом скидок и наценок (Необходимо начиная с ФФД 1.0.5 и выше)
	ПараметрыСтроки.Вставить("Сумма"          , 0);  // Обязательно, Стоимость предмета расчета с учетом скидок и наценок
	ПараметрыСтроки.Вставить("СуммаСкидок");         // Необязательно, Сумма скидок и наценок, не входит в ФФД.
	ПараметрыСтроки.Вставить("СтавкаНДС"      , 0);  // Обязательно, Ставка НДС (Значения: Неопределено-БезНДС, 0, 10, 18, 110, 118)
	ПараметрыСтроки.Вставить("СуммаНДС");            // Необязательно, Сумма НДС
	
	// Реквизиты начиная с ФФД 1.0.5
	// Перечисление - ПризнакиСпособаРасчета - (ФФД, Тег 1214, Расшифровка - таблица 28)
	ПараметрыСтроки.Вставить("ПризнакСпособаРасчета", Неопределено); // Признак способа расчета. Обязательно для ФФД 1.0.5 и выше.
	                                         
	// Реквизиты начиная с ФФД 1.1
	// Перечисление - ПризнакиПредметаРасчета - (ФФД, Тег 1030, Расшифровка - таблица 29)
	ПараметрыСтроки.Вставить("ПризнакПредметаРасчета", Неопределено); // Признак предмета расчета. Обязательно для ФФД 1.1 и выше.
	
	// Перечисление - ПризнакиАгента - (ФФД, Тег 1222, Расшифровка - таблица 21)
	ПараметрыСтроки.Вставить("ПризнакАгентаПоПредметуРасчета");  // Необязательно, Признак агента по предмету расчета, Тег 1222.
	ПараметрыСтроки.Вставить("ДанныеАгента"     , ПараметрыДанныеАгента());     // Структура - Данные агента, Тег 1223. Заполение необязательно.
	ПараметрыСтроки.Вставить("ДанныеПоставщика" , ПараметрыДанныеПоставщика()); // Структура - Данные поставщика, Тег 1224. Заполение необязательно.
	
	ПараметрыСтроки.Вставить("ЕдиницаИзмерения");         // Необязательно, Единица измерения предмета расчета. 
	ПараметрыСтроки.Вставить("КодТоварнойНоменклатуры");  // Необязательно, Код товарной номенклатуры.
	ПараметрыСтроки.Вставить("ДанныеКодаТоварнойНоменклатуры", ПараметрыДанныеКодаТоварнойНоменклатуры());  // Коды товарной номенклатуры.
	
	// Реквизиты начиная с ФФД 1.1 (Введены приказом от 9 апреля 2018 г. N ММВ-7-20/207@)
	ПараметрыСтроки.Вставить("КодСтраныПроисхожденияТовара"); // Строка,Необязательно - Цифровой код страны происхождения товара в соответствии с Общероссийским классификатором стран мира.
	ПараметрыСтроки.Вставить("НомерТаможеннойДекларации");    // Строка,Необязательно - Регистрационный номер таможенной декларации.
	ПараметрыСтроки.Вставить("СуммаАкциза");                  // Число,Необязательно  - Cумма акциза, включенная в стоимость предмета расчета.
	
	// Дополнительные реквизиты не входящие в ФФД.
	ПараметрыСтроки.Вставить("НомерСекции" , 0);   // Необязательно, Номер секции ФР (для совместимости), 0-Значение по умолчанию.
	ПараметрыСтроки.Вставить("Штрихкод");          // Необязательно, Штрихкод
	
	Возврат ПараметрыСтроки; 
	
КонецФункции

Функция ПараметрыТекстовойСтрокиЧека(Текст = Неопределено) Экспорт
	
	ПараметрыСтроки = Новый Структура();
	ПараметрыСтроки.Вставить("ТекстоваяСтрока");       // Тип строки. Исходящий служебный параметр. 
	ПараметрыСтроки.Вставить("Текст", Текст);          // Строка, Обязательно - текстовая строка
	ПараметрыСтроки.Вставить("ПереносСтроки", Ложь);   // Булево - Перенос строки, устанавливается значение по умочанию.  
	ПараметрыСтроки.Вставить("Выравнивание" , "Лево"); // Строка - Выравнивание текста, Значения: "Лево", "Право", "Центр".
	Возврат ПараметрыСтроки; 
	
КонецФункции

// Заполняет структуру параметров строки оплаты.
//
Функция ПараметрыСтрокиОплаты() Экспорт
	
	ПараметрыСтроки = Новый Структура();
	ПараметрыСтроки.Вставить("ТипОплаты", ПредопределенноеЗначение("Перечисление.ТипыОплатыККТ.Наличные")); 
	ПараметрыСтроки.Вставить("Сумма"    , 0);
	Возврат ПараметрыСтроки; 
	
КонецФункции

// Заполняет структуру параметров строки оплаты.
//
Функция ПараметрыДанныеКоррекции()  Экспорт
	
	ДанныеКоррекции = Новый Структура();
	ДанныеКоррекции.Вставить("ТипКоррекции", 0);   // Число,Обязательно     - Тип коррекции: 0-самостоятельно, 1-по предписанию.
	ДанныеКоррекции.Вставить("ОписаниеКоррекции"); // Строка,Необязательно  - Описание коррекции.
	ДанныеКоррекции.Вставить("ДатаКоррекции");     // ДатаВремя,Обязательно - Дата совершения корректируемого расчета.
	ДанныеКоррекции.Вставить("НомерПредписания");  // Строка,Обязательно    - Номер предписания налогового органа.
	Возврат ДанныеКоррекции; 
	
КонецФункции

Функция ПараметрыОперацииЧекаКоррекции() Экспорт
	
//	ПараметрыЧека = Новый Структура();
	
	// Тип расчета - "Перечисление.ТипыРасчетаДенежнымиСредствами"
//	ПараметрыЧека.Вставить("ТипРасчета" , ПредопределенноеЗначение("Перечисление.ТипыРасчетаДенежнымиСредствами.РасходДенежныхСредств")); // Обязательно.
//	ПараметрыЧека.Вставить("Кассир"     , Неопределено); // Строка,Обязательно   - ФИО лица, осуществившего расчет с покупателем (клиентом), оформившего кассовый чек.
//	ПараметрыЧека.Вставить("КассирИНН"  , Неопределено); // Строка,Необязательно - Идентификационный номер налогоплательщика кассира, при наличии.
	// Системы налогообложения - "Перечисление.ТипыСистемНалогообложенияККТ"
//	ПараметрыЧека.Вставить("СистемаНалогообложения", ПредопределенноеЗначение("Перечисление.ТипыСистемНалогообложенияККТ.ОСН")); // Обязательно. Заполняется значением по умолчанию.  
	
//	ПараметрыЧека.Вставить("НаименованиеОснования");     // Наименование документа основания для коррекции
//	ПараметрыЧека.Вставить("ДатаДокументаОснования");    // Дата документа основания для коррекции
//	ПараметрыЧека.Вставить("НомерДокументаОснования");   // Номер документа основания для коррекции
	
//	ПараметрыЧека.Вставить("Сумма"      , 0); // Сумма расчета, указанного в чеке
	// Реквизиты начиная с ФФД 1.0.5
//	ПараметрыЧека.Вставить("ТипКоррекции", 0); // Тип коррекции: 0 - самостоятельно, 1 - по предписанию
//	ПараметрыЧека.Вставить("НаличнаяОплата"    , 0); // Сумма наличной оплаты
//	ПараметрыЧека.Вставить("ЭлектроннаяОплаты" , 0); // Сумма электронной оплаты
	// Реквизиты начиная с ФФД 1.1
//	ПараметрыЧека.Вставить("Предоплатой"       , 0); // Сумма предоплатой (зачетом аванса)
//	ПараметрыЧека.Вставить("Постоплатой"       , 0); // Сумма постоплатой (в кредит)
//	ПараметрыЧека.Вставить("ВстречнымПредоставлением", 0); // Сумма встречным предоставлением
	
//	ПараметрыЧека.Вставить("СуммаБезНДС", 0); // Сумма НДС чека по без НДС
//	ПараметрыЧека.Вставить("СуммаНДС0"  , 0); // Сумма НДС чека по ставке 0%
//	ПараметрыЧека.Вставить("СуммаНДС10" , 0); // Сумма НДС чека по ставке 10%
//	ПараметрыЧека.Вставить("СуммаНДС18" , 0); // Сумма НДС чека по ставке 18%
//	ПараметрыЧека.Вставить("СуммаНДС110", 0); // Сумма НДС чека по расч. ставке 10/110
//	ПараметрыЧека.Вставить("СуммаНДС118", 0); // Сумма НДС чека по расч. ставке 18/118
	
	ПараметрыЧека = ПараметрыОперацииФискализацииЧека();
	
	ПараметрыЧека.Вставить("КорректируемыйДокумент");
	ПараметрыЧека.Вставить("НеприменениеККТ", Ложь); 
	ПараметрыЧека.Вставить("ДанныеКоррекции", ПараметрыДанныеКоррекции()); 
	
	Возврат ПараметрыЧека; 
	
КонецФункции

Функция ПараметрыНормализуемыхФискальныхДанных() Экспорт
	
	СтруктураРезультат = Новый Структура();
	СтруктураРезультат.Вставить("ДатаСменыККТ"   , Неопределено);
	СтруктураРезультат.Вставить("НомерСменыККТ"  , Неопределено);
	СтруктураРезультат.Вставить("КоличествоЧеков", Неопределено); // Количество кассовых чеков за смену (NumberOfChecks).
	СтруктураРезультат.Вставить("КоличествоФД"   , Неопределено); // Количество общее ФД за смену (NumberOfDocuments).
	
	СтруктураРезультат.Вставить("КоличествоНепереданныхФД"   , Неопределено); // Количество непереданных документов (BacklogDocumentsCounter).
	СтруктураРезультат.Вставить("НомерПервогоНепереданногоФД", Неопределено); // Номер первого непереданного документа (BacklogDocumentFirstNumber). 
	СтруктураРезультат.Вставить("ДатаПервогоНепереданногоФД ", Неопределено); // Дата и время первого из непереданных документов (BacklogDocumentFirstDateTime).

	СтруктураРезультат.Вставить("ПревышеноВремяОжиданияОтветаОФД");// OFDTimeout  
	СтруктураРезультат.Вставить("НеобходимаСтрочнаяЗаменаФН");     // Признак необходимости срочной замены ФН (UrgentReplacementFN).
	СтруктураРезультат.Вставить("ПамятьФНПереполнена");            // Признак переполнения памяти ФН (MemoryOverflowFN).
	СтруктураРезультат.Вставить("РесурсФНИсчерпан");               // Признак исчерпания ресурса ФН (ResourcesExhaustionFN).
	
	Возврат СтруктураРезультат;
	
КонецФункции

Функция ПолучитьНаименованиеСистемыНалогообложения(СистемаНалогообложения, Кратко = Ложь) Экспорт;
	
	СистемыНалогообложения = Новый Соответствие();
	Если Кратко Тогда
		СистемыНалогообложения.Вставить(0, НСтр("ru='ОСН'"));
		СистемыНалогообложения.Вставить(1, НСтр("ru='УСН доход'"));
		СистемыНалогообложения.Вставить(2, НСтр("ru='УСН доход-расход'"));
		СистемыНалогообложения.Вставить(3, НСтр("ru='ЕНВД'"));
		СистемыНалогообложения.Вставить(4, НСтр("ru='ЕСН'"));
		СистемыНалогообложения.Вставить(5, НСтр("ru='Патент'"));
	Иначе
		СистемыНалогообложения.Вставить(0, НСтр("ru='Общая'"));
		СистемыНалогообложения.Вставить(1, НСтр("ru='Упрощенная Доход'"));
		СистемыНалогообложения.Вставить(2, НСтр("ru='Упрощенная Доход минус Расход'"));
		СистемыНалогообложения.Вставить(3, НСтр("ru='Единый налог на вмененный доход'"));
		СистемыНалогообложения.Вставить(4, НСтр("ru='Единый сельскохозяйственный налог'"));
		СистемыНалогообложения.Вставить(5, НСтр("ru='Патентная система налогообложения'"));
	КонецЕсли;
	
	Возврат СистемыНалогообложения.Получить(СистемаНалогообложения);
	
КонецФункции

Функция ПолучитьКодТипаСистемыНалогообложенияККТ(СистемаНалогообложенияККТ) Экспорт
	
	Если СистемаНалогообложенияККТ = ПредопределенноеЗначение("Перечисление.ТипыСистемНалогообложенияККТ.УСНДоход") Тогда
		СистемаНалогообложения = 1 
	ИначеЕсли СистемаНалогообложенияККТ = ПредопределенноеЗначение("Перечисление.ТипыСистемНалогообложенияККТ.УСНДоходРасход") Тогда
		СистемаНалогообложения = 2
	ИначеЕсли СистемаНалогообложенияККТ = ПредопределенноеЗначение("Перечисление.ТипыСистемНалогообложенияККТ.ЕНВД") Тогда
		СистемаНалогообложения = 3
	ИначеЕсли СистемаНалогообложенияККТ = ПредопределенноеЗначение("Перечисление.ТипыСистемНалогообложенияККТ.ЕСН") Тогда
		СистемаНалогообложения = 4
	ИначеЕсли СистемаНалогообложенияККТ = ПредопределенноеЗначение("Перечисление.ТипыСистемНалогообложенияККТ.Патент") Тогда
		СистемаНалогообложения = 5
	Иначе
		СистемаНалогообложения = 0
	КонецЕсли;
	
	Возврат СистемаНалогообложения;
	
КонецФункции

Функция ПолучитьКодТипаРасчетаДенежнымиСредствами(ТипРасчета) Экспорт
	
	Если ТипРасчета = ПредопределенноеЗначение("Перечисление.ТипыРасчетаДенежнымиСредствами.ПриходДенежныхСредств") Тогда
		ПризнакРасчетаКод = 1 
	ИначеЕсли ТипРасчета = ПредопределенноеЗначение("Перечисление.ТипыРасчетаДенежнымиСредствами.ВозвратДенежныхСредств") Тогда
		ПризнакРасчетаКод = 2 
	ИначеЕсли ТипРасчета = ПредопределенноеЗначение("Перечисление.ТипыРасчетаДенежнымиСредствами.РасходДенежныхСредств") Тогда
		ПризнакРасчетаКод = 3
	Иначе
		ПризнакРасчетаКод = 4
	КонецЕсли;
	
	Возврат ПризнакРасчетаКод;
	
КонецФункции

Функция ПолучитьКодПризнакаАгента(ПризнакАгента) Экспорт
	
	Если ПризнакАгента = ПредопределенноеЗначение("Перечисление.ПризнакиАгента.БанковскийПлатежныйАгент") Тогда
		ПризнакАгентаКод = 0 
	ИначеЕсли ПризнакАгента = ПредопределенноеЗначение("Перечисление.ПризнакиАгента.БанковскийПлатежныйСубагент") Тогда
		ПризнакАгентаКод = 1 
	ИначеЕсли ПризнакАгента = ПредопределенноеЗначение("Перечисление.ПризнакиАгента.ПлатежныйАгент") Тогда
		ПризнакАгентаКод = 2
	ИначеЕсли ПризнакАгента = ПредопределенноеЗначение("Перечисление.ПризнакиАгента.ПлатежныйСубагент") Тогда
		ПризнакАгентаКод = 3 
	ИначеЕсли ПризнакАгента = ПредопределенноеЗначение("Перечисление.ПризнакиАгента.Поверенный") Тогда
		ПризнакАгентаКод = 4
	ИначеЕсли ПризнакАгента = ПредопределенноеЗначение("Перечисление.ПризнакиАгента.Комиссионер") Тогда
		ПризнакАгентаКод = 5 
	ИначеЕсли ПризнакАгента = ПредопределенноеЗначение("Перечисление.ПризнакиАгента.Агент") Тогда
		ПризнакАгентаКод = 6
	КонецЕсли;
	
	Возврат ПризнакАгентаКод;
	
КонецФункции

Функция ПолучитьКодПризнакаСпособаРасчета(ПризнакСпособаРасчета) Экспорт
	
	Если ПризнакСпособаРасчета = ПредопределенноеЗначение("Перечисление.ПризнакиСпособаРасчета.ПредоплатаПолная") Тогда
		ПризнакСпособаРасчетаКод = 1 
	ИначеЕсли ПризнакСпособаРасчета = ПредопределенноеЗначение("Перечисление.ПризнакиСпособаРасчета.ПредоплатаЧастичная") Тогда
		ПризнакСпособаРасчетаКод = 2 
	ИначеЕсли ПризнакСпособаРасчета = ПредопределенноеЗначение("Перечисление.ПризнакиСпособаРасчета.Аванс") Тогда
		ПризнакСпособаРасчетаКод = 3
	ИначеЕсли ПризнакСпособаРасчета = ПредопределенноеЗначение("Перечисление.ПризнакиСпособаРасчета.ПередачаСПолнойОплатой") Тогда
		ПризнакСпособаРасчетаКод = 4 
	ИначеЕсли ПризнакСпособаРасчета = ПредопределенноеЗначение("Перечисление.ПризнакиСпособаРасчета.ПередачаСЧастичнойОплатой") Тогда
		ПризнакСпособаРасчетаКод = 5
	ИначеЕсли ПризнакСпособаРасчета = ПредопределенноеЗначение("Перечисление.ПризнакиСпособаРасчета.ПередачаБезОплаты") Тогда
		ПризнакСпособаРасчетаКод = 6 
	ИначеЕсли ПризнакСпособаРасчета = ПредопределенноеЗначение("Перечисление.ПризнакиСпособаРасчета.ОплатаКредита") Тогда
		ПризнакСпособаРасчетаКод = 7
	КонецЕсли;
	
	Возврат ПризнакСпособаРасчетаКод;
	
КонецФункции

Функция ПолучитьПризнакСпособаРасчетаДляПечати(ПризнакСпособаРасчета) Экспорт
	
	Если ПризнакСпособаРасчета = ПредопределенноеЗначение("Перечисление.ПризнакиСпособаРасчета.ПредоплатаПолная") Тогда
		ПризнакСпособаРасчетаДляПечати = "[ПрОп100]"   
	ИначеЕсли ПризнакСпособаРасчета = ПредопределенноеЗначение("Перечисление.ПризнакиСпособаРасчета.ПредоплатаЧастичная") Тогда
		ПризнакСпособаРасчетаДляПечати = "[ПрОпл]"
	ИначеЕсли ПризнакСпособаРасчета = ПредопределенноеЗначение("Перечисление.ПризнакиСпособаРасчета.Аванс") Тогда
		ПризнакСпособаРасчетаДляПечати = "[Аванс]"
	ИначеЕсли ПризнакСпособаРасчета = ПредопределенноеЗначение("Перечисление.ПризнакиСпособаРасчета.ПередачаСПолнойОплатой") Тогда
		ПризнакСпособаРасчетаДляПечати = "[ПОпл]"
	ИначеЕсли ПризнакСпособаРасчета = ПредопределенноеЗначение("Перечисление.ПризнакиСпособаРасчета.ПередачаСЧастичнойОплатой") Тогда
		ПризнакСпособаРасчетаДляПечати = "[ЧОпл]"
	ИначеЕсли ПризнакСпособаРасчета = ПредопределенноеЗначение("Перечисление.ПризнакиСпособаРасчета.ПередачаБезОплаты") Тогда
		ПризнакСпособаРасчетаДляПечати = "[БезОп]" 
	ИначеЕсли ПризнакСпособаРасчета = ПредопределенноеЗначение("Перечисление.ПризнакиСпособаРасчета.ОплатаКредита") Тогда
		ПризнакСпособаРасчетаДляПечати = "[Кред]"
	КонецЕсли;
	
	Возврат ПризнакСпособаРасчетаДляПечати;
	
КонецФункции

Функция ПолучитьКодПризнакаПредметаРасчета(ПризнакПредметаРасчета) Экспорт
	
	Если ПризнакПредметаРасчета = ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.Товар") Тогда
		ПризнакПредметаРасчетаКод = 1 
	ИначеЕсли ПризнакПредметаРасчета = ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.ПодакцизныйТовар") Тогда
		ПризнакПредметаРасчетаКод = 2 
	ИначеЕсли ПризнакПредметаРасчета = ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.Работа") Тогда
		ПризнакПредметаРасчетаКод = 3 
	ИначеЕсли ПризнакПредметаРасчета = ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.Услуга") Тогда
		ПризнакПредметаРасчетаКод = 4 
	ИначеЕсли ПризнакПредметаРасчета = ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.СтавкаАзартнойИгры") Тогда
		ПризнакПредметаРасчетаКод = 5 
	ИначеЕсли ПризнакПредметаРасчета = ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.ВыигрышАзартнойИгры") Тогда
		ПризнакПредметаРасчетаКод = 6 
	ИначеЕсли ПризнакПредметаРасчета = ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.ЛотерейныйБилет") Тогда
		ПризнакПредметаРасчетаКод = 7 
	ИначеЕсли ПризнакПредметаРасчета = ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.ВыигрышЛотереи") Тогда
		ПризнакПредметаРасчетаКод = 8 
	ИначеЕсли ПризнакПредметаРасчета = ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.ПредоставлениеРИД") Тогда
		ПризнакПредметаРасчетаКод = 9 
	ИначеЕсли ПризнакПредметаРасчета = ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.ПлатежВыплата") Тогда
		ПризнакПредметаРасчетаКод = 10 
	ИначеЕсли ПризнакПредметаРасчета = ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.АгентскоеВознаграждение") Тогда
		ПризнакПредметаРасчетаКод = 11 
	ИначеЕсли ПризнакПредметаРасчета = ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.СоставнойПредметРасчета") Тогда
		ПризнакПредметаРасчетаКод = 12 
	Иначе
	   ПризнакПредметаРасчетаКод = 13
	КонецЕсли;
	
	Возврат ПризнакПредметаРасчетаКод;
	
КонецФункции

Процедура ПровестиФорматоЛогическийКонтроль(ОбщиеПараметры) Экспорт
	
	СпособФорматоЛогическогоКонтроля = Неопределено;
	ОбщиеПараметры.Свойство("СпособФорматоЛогическогоКонтроля", СпособФорматоЛогическогоКонтроля);
	Если СпособФорматоЛогическогоКонтроля = ПредопределенноеЗначение("Перечисление.СпособыФорматоЛогическогоКонтроля.НеКонтролировать") Тогда
		Возврат;
	КонецЕсли;
	ДопустимоеРасхождение = 0.01; // В соответствии с текущей версией 54-ФЗ
	Если ОбщиеПараметры.Свойство("ДопустимоеРасхождениеФорматоЛогическогоКонтроля") Тогда
		ДопустимоеРасхождение = ОбщиеПараметры.ДопустимоеРасхождениеФорматоЛогическогоКонтроля;
	КонецЕсли;
	
		Если ОбщиеПараметры.ПозицииЧека <> Неопределено Тогда
			ГраницаНачальногоМассива = ОбщиеПараметры.ПозицииЧека.Количество() - 1;
			НовыеПозицииЧека = Новый Массив;
			Если СпособФорматоЛогическогоКонтроля = ПредопределенноеЗначение("Перечисление.СпособыФорматоЛогическогоКонтроля.ЗачитыватьСуммы") Тогда
				
				СтрокиПоложительные = Новый Массив;
				СтрокиОтрицательные = Новый Массив;
				СтрокаПоследнегоТовара = 0;
				
				Для ИндексМассива = 0 По ГраницаНачальногоМассива Цикл
					ТекущаяПозиция = ОбщиеПараметры.ПозицииЧека[ИндексМассива];
					Если ТекущаяПозиция.Свойство("ФискальнаяСтрока") Тогда
						СтрокаПоследнегоТовара = ТекущаяПозиция.НомерСтрокиТовара;
						Наименование = ТекущаяПозиция.Наименование;
						Количество = ?(ТекущаяПозиция.Количество = 0, 1, ТекущаяПозиция.Количество);
						Если Количество = 1 Тогда
							НоваяПозиция = ОбщегоНазначения.СкопироватьУниверсальнуюКоллекцию(ТекущаяПозиция);
							НоваяПозиция.ЦенаСоСкидками = НоваяПозиция.Сумма;
							НоваяПозиция.Вставить("СтрокаПоследнегоТовара", СтрокаПоследнегоТовара);
							НовыеПозицииЧека.Добавить(НоваяПозиция);
							Продолжить;
						КонецЕсли;
						Сумма = ТекущаяПозиция.Сумма;
						НомерСекции = ТекущаяПозиция.НомерСекции;
						СтавкаНДС = ТекущаяПозиция.СтавкаНДС;
						// Получаем расчетную цену с учетом скидок делением входящей суммы на входящее количество.
						РасчетнаяЦена = Окр(Сумма / Количество, 2, 1);
						// Здесь и далее все цены и суммы округляем до 2 знаков после запятой, количества - до 3 знаков.
						// Умножаем входящее количество  на расчетную цену и получаем новую промежуточную сумму.
						НоваяСумма = Окр(Количество * РасчетнаяЦена, 2, 1);
						// Вычисляем разницу между промежуточной и входящей суммой.
						РазницаСумм = НоваяСумма - Сумма;
						НоваяПозиция = ОбщегоНазначения.СкопироватьУниверсальнуюКоллекцию(ТекущаяПозиция);
						НоваяПозиция.ЦенаСоСкидками = РасчетнаяЦена;
						НоваяПозиция.Вставить("РасчетнаяЦена", РасчетнаяЦена);
						НоваяПозиция.Вставить("РазницаСумм", РазницаСумм);
						НоваяПозиция.Вставить("СтрокаПоследнегоТовара", СтрокаПоследнегоТовара);
						Если РазницаСумм >= -ДопустимоеРасхождение И РазницаСумм <= ДопустимоеРасхождение Тогда
							// Если разница допустима - оставляем одну строку.
							НовыеПозицииЧека.Добавить(НоваяПозиция);
							Продолжить;
						ИначеЕсли РазницаСумм > 0 Тогда
							//Если разница есть, то строку с  положительной разницей добавляем в массив положительных строк.
							СтрокиПоложительные.Добавить(НоваяПозиция);
						Иначе
							//Если разница есть, то строку с  отрицательной разницей добавляем в массив отрицательных строк.
							НоваяПозиция.РазницаСумм = -РазницаСумм;
							СтрокиОтрицательные.Добавить(НоваяПозиция);
						КонецЕсли;
					Иначе
						НоваяПозиция = ОбщегоНазначения.СкопироватьУниверсальнуюКоллекцию(ТекущаяПозиция);
						Если СтрокаПоследнегоТовара = 0 Тогда
							НоваяПозиция.Вставить("СтрокаПоследнегоТовара", 0);
						Иначе
							НоваяПозиция.Вставить("СтрокаПоследнегоТовара", 99999);
						КонецЕсли;
						НовыеПозицииЧека.Добавить(НоваяПозиция);
					КонецЕсли;
				КонецЦикла;
				
				ИндексПоложительных = СтрокиПоложительные.ВГраница();
				ИндексОтрицательных = СтрокиОтрицательные.ВГраница();
				Если ИндексПоложительных >= 0 И ИндексОтрицательных >= 0 Тогда
					// В массиве положительных и отрицательных.
					// Находим строки с совпадающей по модулю сумой расхождения.
					// Строки идут одна к одному.
					СдвигПоложительного = 0;
					Для СчетикПоложительный = 0 По ИндексПоложительных Цикл
						ПоложительнаяСтрока = СтрокиПоложительные[СчетикПоложительный - СдвигПоложительного];
						СдвигОтрицательного = 0;
						ИндексОтрицательных = СтрокиОтрицательные.ВГраница();
						Для СчетикОтрицательный = 0 По ИндексОтрицательных Цикл
							ОтрицательнаяСтрока = СтрокиОтрицательные[СчетикОтрицательный - СдвигОтрицательного];
							Если ПоложительнаяСтрока.РазницаСумм = ОтрицательнаяСтрока.РазницаСумм Тогда
								// Перекрываем разницу по совпадающим строкам из одного массива суммами другого.
								// Увеличивая сумму в положительной строке и уменьшая в отрицательной.
								ПоложительнаяСтрока.Сумма =  ПоложительнаяСтрока.Сумма + ПоложительнаяСтрока.РазницаСумм;
								ОтрицательнаяСтрока.Сумма =  ОтрицательнаяСтрока.Сумма - ПоложительнаяСтрока.РазницаСумм;
								
								// Перекрытые строки переносим в массив для печати и удаляем из массивов.
								НоваяПозиция = ОбщегоНазначения.СкопироватьУниверсальнуюКоллекцию(ПоложительнаяСтрока);
								НовыеПозицииЧека.Добавить(НоваяПозиция);
								
								НоваяПозиция = ОбщегоНазначения.СкопироватьУниверсальнуюКоллекцию(ОтрицательнаяСтрока);
								НовыеПозицииЧека.Добавить(НоваяПозиция);
								
								СтрокиПоложительные.Удалить(СчетикПоложительный - СдвигПоложительного);
								СтрокиОтрицательные.Удалить(СчетикОтрицательный - СдвигОтрицательного);
								
								СдвигПоложительного = СдвигПоложительного + 1;
								СдвигОтрицательного = СдвигОтрицательного + 1;
								Прервать;
							КонецЕсли;
						КонецЦикла;
						
						Если ИндексПоложительных < 0 Тогда
							Прервать;
						КонецЕсли;
					КонецЦикла;
					
				КонецЕсли;
				
				ИндексПоложительных = СтрокиПоложительные.ВГраница();
				ИндексОтрицательных = СтрокиОтрицательные.ВГраница();
				Если ИндексПоложительных >= 0 И ИндексОтрицательных >= 0 Тогда
					// Обходим строки положительного массива.
					// Увеличивая сумму в каждой из них на сумму расхождения.
					// Которую распределяем по строкам с отрицательным расхождением, уменьшая сумму там.
					СдвигПоложительного = 0;
					Для СчетикПоложительный = 0 По ИндексПоложительных Цикл
						ПоложительнаяСтрока = СтрокиПоложительные[СчетикПоложительный - СдвигПоложительного];
						Если ПоложительнаяСтрока.РазницаСумм <= ДопустимоеРасхождение Тогда
							// Разница сумм в строке всегда по модулю.
							Продолжить;
						КонецЕсли;
						СдвигОтрицательного = 0;
						ИндексОтрицательных = СтрокиОтрицательные.ВГраница();
						Для СчетикОтрицательный = 0 По ИндексОтрицательных Цикл
							ОтрицательнаяСтрока = СтрокиОтрицательные[СчетикОтрицательный - СдвигОтрицательного];
							Если ОтрицательнаяСтрока.РазницаСумм <= ДопустимоеРасхождение
								И ОтрицательнаяСтрока.РазницаСумм <> ПоложительнаяСтрока.РазницаСумм Тогда
								// Разница сумм в строке всегда по модулю.
								Продолжить;
							КонецЕсли;
							// Перекрываем разницу по совпадающим строкам из одного массива суммами другого.
							// Увеличивая сумму в положительной строке и уменьшая в отрицательной.
							
							Если ПоложительнаяСтрока.РазницаСумм > ОтрицательнаяСтрока.РазницаСумм Тогда
								ПоложительнаяСтрока.Сумма =  ПоложительнаяСтрока.Сумма + ОтрицательнаяСтрока.РазницаСумм;
								ОтрицательнаяСтрока.Сумма =  ОтрицательнаяСтрока.Сумма - ОтрицательнаяСтрока.РазницаСумм;
								// Уменьшаем остаток разницы положительной строки
								ПоложительнаяСтрока.РазницаСумм = ПоложительнаяСтрока.РазницаСумм - ОтрицательнаяСтрока.РазницаСумм;
								// Перекрытую строку переносим в массив для печати.
								
								НоваяПозиция = ОбщегоНазначения.СкопироватьУниверсальнуюКоллекцию(ОтрицательнаяСтрока);
								НовыеПозицииЧека.Добавить(НоваяПозиция);
								
								// И удаляем из массивов.
								СтрокиОтрицательные.Удалить(СчетикОтрицательный - СдвигОтрицательного);
								// Сдвигаем отрицательные счетчики
								СдвигОтрицательного = СдвигОтрицательного + 1;
								
							Иначе
								
								НадоУдалятьОтрицательные = ПоложительнаяСтрока.РазницаСумм = ОтрицательнаяСтрока.РазницаСумм;
								
								ПоложительнаяСтрока.Сумма =  ПоложительнаяСтрока.Сумма + ПоложительнаяСтрока.РазницаСумм;
								ОтрицательнаяСтрока.Сумма =  ОтрицательнаяСтрока.Сумма - ПоложительнаяСтрока.РазницаСумм;
								// Уменьшаем остаток разницы положительной строки
								ОтрицательнаяСтрока.РазницаСумм = ОтрицательнаяСтрока.РазницаСумм - ПоложительнаяСтрока.РазницаСумм;
								// Перекрытую строку переносим в массив для печати.
								
								НоваяПозиция = ОбщегоНазначения.СкопироватьУниверсальнуюКоллекцию(ПоложительнаяСтрока);
								НовыеПозицииЧека.Добавить(НоваяПозиция);
								Если НадоУдалятьОтрицательные Тогда
									НоваяПозиция = ОбщегоНазначения.СкопироватьУниверсальнуюКоллекцию(ОтрицательнаяСтрока);
									НовыеПозицииЧека.Добавить(НоваяПозиция);
								КонецЕсли;
								
								// И удаляем из массивов.
								СтрокиПоложительные.Удалить(СчетикПоложительный - СдвигПоложительного);
								// Сдвигаем положительные счетчики
								СдвигПоложительного = СдвигПоложительного + 1;
								
								Если НадоУдалятьОтрицательные Тогда
									// И удаляем из массивов.
									СтрокиОтрицательные.Удалить(СчетикОтрицательный - СдвигОтрицательного);
									// Сдвигаем отрицательные счетчики
									СдвигОтрицательного = СдвигОтрицательного + 1;
								КонецЕсли;
								
								// Отрицательный цикл прерываем.
								// Ибо закрывать текущую строку придется следующей положительной.
								// Если она есть.
								Прервать;
							КонецЕсли;
						КонецЦикла;
						
						Если ИндексПоложительных < 0 Тогда
							Прервать;
						КонецЕсли;
					КонецЦикла;
					
				КонецЕсли;
				
				ИндексПоложительных = СтрокиПоложительные.ВГраница();
				// Оставшиеся строки обоих массивов разделяются.
				// Каждая на две по первому алгоритму и добавляются в массив для печати.
				Если ИндексПоложительных >= 0 Тогда
					Для Каждого ТекущаяПозиция Из СтрокиПоложительные Цикл
						// Еще раз пересчитываем разницу
						// Получаем расчетную цену с учетом скидок делением входящей суммы на входящее количество.
						РасчетнаяЦена = Окр(ТекущаяПозиция.Сумма / ТекущаяПозиция.Количество, 2, 1);
						// Здесь и далее все цены и суммы округляем до 2 знаков после запятой, количества - до 3 знаков.
						// Умножаем входящее количество  на расчетную цену и получаем новую промежуточную сумму.
						НоваяСумма = Окр(ТекущаяПозиция.Количество * РасчетнаяЦена, 2, 1);
						// Вычисляем разницу между промежуточной и входящей суммой.
						РазницаСумм = НоваяСумма - ТекущаяПозиция.Сумма;
						Если РазницаСумм >= -ДопустимоеРасхождение И РазницаСумм <= ДопустимоеРасхождение Тогда
							// Если разница допустима - оставляем одну строку.
							НовыеПозицииЧека.Добавить(ТекущаяПозиция);
						Иначе
							// Разделяем строку.
							РазделитьФискальнуюСтроку(ТекущаяПозиция, НовыеПозицииЧека, РасчетнаяЦена, РазницаСумм);
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				ИндексОтрицательных = СтрокиОтрицательные.ВГраница();
				Если ИндексОтрицательных >= 0 Тогда
					Для Каждого ТекущаяПозиция Из СтрокиОтрицательные Цикл
						// Еще раз пересчитываем разницу
						// Получаем расчетную цену с учетом скидок делением входящей суммы на входящее количество.
						РасчетнаяЦена = Окр(ТекущаяПозиция.Сумма / ТекущаяПозиция.Количество, 2, 1);
						// Здесь и далее все цены и суммы округляем до 2 знаков после запятой, количества - до 3 знаков.
						// Умножаем входящее количество  на расчетную цену и получаем новую промежуточную сумму.
						НоваяСумма = Окр(ТекущаяПозиция.Количество * РасчетнаяЦена, 2, 1);
						// Вычисляем разницу между промежуточной и входящей суммой.
						РазницаСумм = НоваяСумма - ТекущаяПозиция.Сумма;
						Если РазницаСумм >= -ДопустимоеРасхождение И РазницаСумм <= ДопустимоеРасхождение Тогда
							// Если разница допустима - оставляем одну строку.
							НоваяПозиция = ОбщегоНазначения.СкопироватьУниверсальнуюКоллекцию(ТекущаяПозиция);
							НоваяПозиция.ЦенаСоСкидками = РасчетнаяЦена;
							НовыеПозицииЧека.Добавить(НоваяПозиция);
						Иначе
							// Разделяем строку.
							РазделитьФискальнуюСтроку(ТекущаяПозиция, НовыеПозицииЧека, РасчетнаяЦена, РазницаСумм);
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				// Массив для печати сортируется по первоначальному номеру строки.
				СортироватьМассивФискальныхСтрок(НовыеПозицииЧека);
				
			Иначе
				Для ИндексМассива = 0 По ГраницаНачальногоМассива Цикл
					ТекущаяПозиция = ОбщиеПараметры.ПозицииЧека[ИндексМассива];
					Если ТекущаяПозиция.Свойство("ФискальнаяСтрока") Тогда
						Наименование = ТекущаяПозиция.Наименование;
						Количество = ?(ТекущаяПозиция.Количество = 0, 1, ТекущаяПозиция.Количество);
						Если Количество = 1 Тогда
							НоваяПозиция = ОбщегоНазначения.СкопироватьУниверсальнуюКоллекцию(ТекущаяПозиция);
							НоваяПозиция.ЦенаСоСкидками = НоваяПозиция.Сумма;
							НовыеПозицииЧека.Добавить(НоваяПозиция);
							Продолжить;
						КонецЕсли;
						Сумма = ТекущаяПозиция.Сумма;
						НомерСекции = ТекущаяПозиция.НомерСекции;
						СтавкаНДС = ТекущаяПозиция.СтавкаНДС;
						// Получаем расчетную цену с учетом скидок делением входящей суммы на входящее количество.
						РасчетнаяЦена = Окр(Сумма / Количество, 2, 1);
						// Здесь и далее все цены и суммы округляем до 2 знаков после запятой, количества - до 3 знаков.
						// Умножаем входящее количество  на расчетную цену и получаем новую промежуточную сумму.
						НоваяСумма = Окр(Количество * РасчетнаяЦена, 2, 1);
						// Вычисляем разницу между промежуточной и входящей суммой.
						РазницаСумм = НоваяСумма - Сумма;
						Если РазницаСумм >= -ДопустимоеРасхождение И РазницаСумм <= ДопустимоеРасхождение Тогда
							// Если разница допустима - оставляем одну строку.
							// Если разницы нет - оставляем одну строку.
							НоваяПозиция = ОбщегоНазначения.СкопироватьУниверсальнуюКоллекцию(ТекущаяПозиция);
							НоваяПозиция.ЦенаСоСкидками = РасчетнаяЦена;
							НовыеПозицииЧека.Добавить(НоваяПозиция);
							Продолжить;
						Иначе
							// Разделяем строку.
							РазделитьФискальнуюСтроку(ТекущаяПозиция, НовыеПозицииЧека, РасчетнаяЦена, РазницаСумм);
						КонецЕсли;
						
					Иначе
						НоваяПозиция = ОбщегоНазначения.СкопироватьУниверсальнуюКоллекцию(ТекущаяПозиция);
						НовыеПозицииЧека.Добавить(НоваяПозиция);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			ОбщиеПараметры.ПозицииЧека = НовыеПозицииЧека;
		КонецЕсли;
	
КонецПроцедуры

Функция ПостроитьПолеПереносом(Знач Текст, Знач ДлинаПоля, ДобСимвол = "", ПоЦентру = Ложь) Экспорт
	
	ДобСимвол = ?(ПустаяСтрока(ДобСимвол), " ", ДобСимвол);
	
	Если СтрДлина(Текст) > ДлинаПоля Тогда 
		ТекстПолный = "";
		Пока СтрДлина(Текст) > ДлинаПоля Цикл
			ТекстПолный = ТекстПолный + ?(ПустаяСтрока(ТекстПолный), "", Символы.ПС) +  Лев(Текст, ДлинаПоля);
			Текст = Сред(Текст, ДлинаПоля + 1);
		КонецЦикла;
		ТекстПолный = ТекстПолный + ?(ПустаяСтрока(Текст), "", Символы.ПС + Текст);
	Иначе
		Если ПоЦентру Тогда
			ТекстПолный = Текст;
			ДобавлятьСправа = Истина; 
			Пока СтрДлина(ТекстПолный) < ДлинаПоля Цикл
				Если ДобавлятьСправа Тогда
					ТекстПолный = ТекстПолный + ДобСимвол;
				Иначе
					ТекстПолный = ДобСимвол + ТекстПолный;
				КонецЕсли;
				ДобавлятьСправа = Не ДобавлятьСправа;
			КонецЦикла;
		Иначе
			ТекстПолный = Текст;
		КонецЕсли;
	КонецЕсли;
		
	Возврат ТекстПолный;
	
КонецФункции

Функция ПостроитьПоле(Знач Текст, Знач ДлинаПоля, ДобСимвол = "", ДобавлятьСправа = Истина) Экспорт
	
	ДобСимвол = ?(ПустаяСтрока(ДобСимвол), " ", ДобСимвол);
	
	ТекстПолный = Лев(Текст, ДлинаПоля);
	Пока СтрДлина(ТекстПолный) < ДлинаПоля Цикл
		Если ДобавлятьСправа Тогда
			ТекстПолный = ТекстПолный + ДобСимвол;
		Иначе
			ТекстПолный = ДобСимвол + ТекстПолный;
		КонецЕсли;
	КонецЦикла;
	          
	Возврат ТекстПолный;
	
КонецФункции

Функция ВыстроитьПоля(Знач Текст1, Знач Текст2 = "", Знач ДлинаПоля) Экспорт
	
	Если ПустаяСтрока(Текст2) Тогда
		ТекстПолный = ПостроитьПоле(Текст1, СтрДлина(Текст1) + Цел((ДлинаПоля - СтрДлина(Текст1))/2), , Ложь);
		ТекстПолный = ПостроитьПоле(ТекстПолный, ДлинаПоля);
	ИначеЕсли СтрДлина(Текст1) + СтрДлина(Текст2) < ДлинаПоля Тогда
		ТекстПолный = ПостроитьПоле(Текст1, ДлинаПоля - СтрДлина(Текст2)) + Текст2;
	Иначе
		ТекстПолный = ПостроитьПоле(Текст1, ДлинаПоля) + Символы.ПС + ПостроитьПоле(Текст2, ДлинаПоля, ,Ложь)
	КонецЕсли;
	
	Возврат ТекстПолный;
	
КонецФункции

Функция ВыравнитьПоле(Знач Текст, Знач ДлинаПоля = 32, Знач Выравнивание = "Лево", ДобСимвол = "") Экспорт
	
	ДобСимвол = ?(ПустаяСтрока(ДобСимвол), " ", ДобСимвол);
	НачПозиция = Истина;
	ТекстПолный = Лев(Текст, ДлинаПоля);
	Пока СтрДлина(ТекстПолный) < ДлинаПоля Цикл
		Если Выравнивание = "Лево" Тогда
			ТекстПолный = ТекстПолный + ДобСимвол;
		ИначеЕсли Выравнивание = "Право" Тогда
			ТекстПолный = ДобСимвол + ТекстПолный;
		Иначе
			Если НачПозиция Тогда
				ТекстПолный = ТекстПолный + ДобСимвол;
				НачПозиция = Ложь;
			Иначе
				ТекстПолный = ДобСимвол + ТекстПолный;
				НачПозиция = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	          
	Возврат ТекстПолный;
	
КонецФункции

Процедура РазделитьФискальнуюСтроку(ТекущаяПозиция, НовыеПозицииЧека, РасчетнаяЦена, РазницаСумм) Экспорт
	
	// Запоминаем начальные значения.
	КоличествоНачальное = ТекущаяПозиция.Количество;
	СуммаСкидокНачальная = ТекущаяПозиция.СуммаСкидок;
	СуммаНДСНачальная = ТекущаяПозиция.СуммаНДС; // Рассчитывается формально, т.к. сумма НДС текущими драйверами игнорируется.
	
	// Если разница есть, то ее делим на копейку.
	// Получаем количество, которое нужно переоценить.
	КоличествоПереоценки = Окр(РазницаСумм / 0.01, 3, 1);
	Если КоличествоПереоценки < 0 Тогда
		КоличествоПереоценки = -КоличествоПереоценки;
	КонецЕсли;
	// Цена переоценки во всех примерах отличается от расчетной на 1 копейку.
	// В  большую или меньшую сторону в зависимости от знака разницы - зависимость обратная.
	ЦенаПереоценки = РасчетнаяЦена - Окр(РазницаСумм / КоличествоПереоценки, 2, 1);
	// Распределяем суммы скидок и НДС пропорционально количеству.
	// Если суммы есть. А если их нет, то должно остаться Неопределено.
	Если СуммаСкидокНачальная <> Неопределено Тогда
		СуммаСкидокПереоценки = Окр(СуммаСкидокНачальная * КоличествоПереоценки / КоличествоНачальное, 2, 1);
	КонецЕсли;
	Если СуммаНДСНачальная <> Неопределено Тогда
		СуммаНДСПереоценки = Окр(СуммаНДСНачальная * КоличествоПереоценки / КоличествоНачальное, 2, 1);
	КонецЕсли;
	
	// Из начального количества отнимаем количество переоценки.
	// Получаем количество, которое остается по расчетной цене.
	Количество = ТекущаяПозиция.Количество - КоличествоПереоценки;
	
	// Выводим вместо первоначальной строки две новых.
	// Сначала с расчетной ценой и остатком количества.
	// И суммой - произведение цены и количества.
	НоваяПозиция = ОбщегоНазначения.СкопироватьУниверсальнуюКоллекцию(ТекущаяПозиция);
	НоваяПозиция.Количество = Количество;
	НоваяПозиция.ЦенаСоСкидками = РасчетнаяЦена;
	НоваяПозиция.Сумма = Окр(Количество * РасчетнаяЦена, 2, 1);
	Если СуммаСкидокНачальная <> Неопределено Тогда
		НоваяПозиция.СуммаСкидок = СуммаСкидокНачальная - СуммаСкидокПереоценки;
	КонецЕсли;
	Если СуммаНДСНачальная <> Неопределено Тогда
		НоваяПозиция.СуммаНДС = СуммаНДСНачальная - СуммаНДСПереоценки;
	КонецЕсли;
	НовыеПозицииЧека.Добавить(НоваяПозиция);
	
	// Потом с переоцененной ценой и переоцененным количеством.
	// И суммой - произведение цены и количества.
	НоваяПозиция = ОбщегоНазначения.СкопироватьУниверсальнуюКоллекцию(ТекущаяПозиция);
	НоваяПозиция.Количество = КоличествоПереоценки;
	НоваяПозиция.ЦенаСоСкидками = ЦенаПереоценки;
	НоваяПозиция.Сумма = Окр(КоличествоПереоценки * ЦенаПереоценки, 2, 1);
	Если СуммаСкидокНачальная <> Неопределено Тогда
		НоваяПозиция.СуммаСкидок = СуммаСкидокПереоценки;
	КонецЕсли;
	Если СуммаНДСНачальная <> Неопределено Тогда
		НоваяПозиция.СуммаНДС = СуммаНДСПереоценки;
	КонецЕсли;
	НовыеПозицииЧека.Добавить(НоваяПозиция);
	
КонецПроцедуры

Процедура СортироватьМассивФискальныхСтрок(МассивФискальныхСтрок, ИмяРеквизита = "СтрокаПоследнегоТовара")
	
	МаксимальныйИндекс = МассивФискальныхСтрок.ВГраница();
	Если МаксимальныйИндекс >= 0 Тогда
		// Начинаем со второго элемента.
		Для ТекущийИндекс = 1 По МаксимальныйИндекс Цикл
			ТекущаяСтрока = МассивФискальныхСтрок[ТекущийИндекс];
			НоваяТекущаяСтрока = ОбщегоНазначения.СкопироватьУниверсальнуюКоллекцию(ТекущаяСтрока);
			НовыйИндексТекущейСтроки = -1;
			Для ОбратныйСчетчик = 1 По ТекущийИндекс Цикл
				ПредыдущаяСтрока = МассивФискальныхСтрок[ТекущийИндекс - ОбратныйСчетчик];
				Если ПредыдущаяСтрока[ИмяРеквизита] > ТекущаяСтрока[ИмяРеквизита] Тогда
					НоваяПредыдущаяСтрока = ОбщегоНазначения.СкопироватьУниверсальнуюКоллекцию(ПредыдущаяСтрока);
					
					НовыйИндексТекущейСтроки = ТекущийИндекс - ОбратныйСчетчик;
					МассивФискальныхСтрок.Удалить(НовыйИндексТекущейСтроки + 1);
					МассивФискальныхСтрок.Вставить(НовыйИндексТекущейСтроки + 1, НоваяПредыдущаяСтрока);
				Иначе
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если НовыйИндексТекущейСтроки >=0 Тогда
				МассивФискальныхСтрок.Удалить(НовыйИндексТекущейСтроки);
				МассивФискальныхСтрок.Вставить(НовыйИндексТекущейСтроки, НоваяТекущаяСтрока);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Функция СформироватьТекстНефискальногоДокумента(ТипДокумента, ОбщиеПараметры, ШиринаСтроки = 32, ДополнительныйТекст = Неопределено) Экспорт
	
	ПозицииЧека  = ?(ОбщиеПараметры.Свойство("ПозицииЧека"), ОбщиеПараметры.ПозицииЧека, Неопределено);
	ТаблицаОплат = ?(ОбщиеПараметры.Свойство("ТаблицаОплат"), ОбщиеПараметры.ТаблицаОплат, Неопределено);
	
	Если ТипДокумента = 0 Тогда
		ТипыЧеков = Новый Соответствие();
		ТипыЧеков.Вставить(1, НСтр("ru='ПРИХОД'"));          // Чек продажи     
		ТипыЧеков.Вставить(2, НСтр("ru='ВОЗВРАТ ПРИХОДА'")); // Чек возврата продажи 
		ТипыЧеков.Вставить(3, НСтр("ru='РАСХОД'"));          // Чек покупки 
		ТипыЧеков.Вставить(4, НСтр("ru='ВОЗВРАТ РАСХОДА'")); // Чек возврата покупки 
		ТипЧека = ТипыЧеков.Получить(МенеджерОборудованияКлиентСервер.ПолучитьКодТипаРасчетаДенежнымиСредствами(ОбщиеПараметры.ТипРасчета))
	ИначеЕсли ТипДокумента = 1 Тогда
		ТипЧека = НСтр("ru='ОТКРЫТИЕ СМЕНЫ'");  
	ИначеЕсли ТипДокумента = 2 Тогда
		ТипЧека = НСтр("ru='ВНЕСЕНИЕ'");  
	ИначеЕсли ТипДокумента = 3 Тогда
		ТипЧека = НСтр("ru='ВЫЕМКА'");  
	ИначеЕсли ТипДокумента = 4 Тогда
		ТипЧека = НСтр("ru='ОТЧЕТ БЕЗ ГАШЕНИЯ'");   
	ИначеЕсли ТипДокумента = 5 Тогда
		ТипЧека = НСтр("ru='ОТЧЕТ С ГАШЕНИЕМ'");  
	КонецЕсли;
	
	ПечатьКлише = Истина;
	
	Разделитель = ПостроитьПоле("", ШиринаСтроки, "=") + Символы.ПС;
	РазделительВнут = ПостроитьПоле("", ШиринаСтроки, "-") + Символы.ПС;
	
	Текст = Разделитель;
	
	Если ПечатьКлише Тогда 
		// Сформировать шапку чека.
		Если ОбщиеПараметры.Свойство("ОрганизацияНазвание") И НЕ ПустаяСтрока(ОбщиеПараметры.ОрганизацияНазвание) Тогда
			Текст = Текст + ПостроитьПолеПереносом(ОбщиеПараметры.ОрганизацияНазвание, ШиринаСтроки, , Истина) + Символы.ПС;
		КонецЕсли;
		
		Если ОбщиеПараметры.Свойство("АдресРасчетов") Тогда
			АдресРасчетов = ОбщиеПараметры.АдресРасчетов;
			Если НЕ ПустаяСтрока(АдресРасчетов) Тогда
				Текст = Текст + ПостроитьПолеПереносом(АдресРасчетов, ШиринаСтроки, , Истина) + Символы.ПС;
				Если ОбщиеПараметры.Свойство("МестоРасчетов") И НЕ ПустаяСтрока(ОбщиеПараметры.МестоРасчетов) Тогда
					Текст = Текст + ПостроитьПолеПереносом(ОбщиеПараметры.МестоРасчетов, ШиринаСтроки, , Истина) + Символы.ПС;
				КонецЕсли;
			ИначеЕсли ОбщиеПараметры.Свойство("АдресМагазина") И НЕ ПустаяСтрока(ОбщиеПараметры.АдресМагазина) Тогда
				Текст = Текст + ПостроитьПолеПереносом(ОбщиеПараметры.АдресМагазина, ШиринаСтроки) + Символы.ПС;
			КонецЕсли;
		КонецЕсли;
			
		Если ОбщиеПараметры.Свойство("ТекстШапки") И НЕ ПустаяСтрока(ОбщиеПараметры.ТекстШапки) Тогда
			Текст = Текст + ВыстроитьПоля(ОбщиеПараметры.ТекстШапки, , ШиринаСтроки) + Символы.ПС;
		КонецЕсли;
		
		Если ТипДокумента = 0 Тогда 
			Текст = Текст +  ВыстроитьПоля(НСтр("ru='КАССОВЫЙ ЧЕК'"), , ШиринаСтроки) + Символы.ПС;
		КонецЕсли;
		
		ОрганизацияИНН = ?(ОбщиеПараметры.Свойство("ОрганизацияИНН") И НЕ ПустаяСтрока(ОбщиеПараметры.ОрганизацияИНН), 
			НСтр("ru='ИНН'") + Символы.НПП + ОбщиеПараметры.ОрганизацияИНН, "");
			
		НомерСмены = ?(ОбщиеПараметры.Свойство("НомерСмены") И НЕ ПустаяСтрока(ОбщиеПараметры.НомерСмены),
			НСтр("ru='СМЕНА №'") + ОбщиеПараметры.НомерСмены, "");
			
		НомерЧека = ?(ОбщиеПараметры.Свойство("НомерЧека") И НЕ ПустаяСтрока(ОбщиеПараметры.НомерЧека),
			НСтр("ru='ЧЕК №'") + ОбщиеПараметры.НомерЧека, "");
			
		Если Не ПустаяСтрока(ОрганизацияИНН) Тогда
			Текст = Текст + ВыстроитьПоля(ТипЧека, ОрганизацияИНН, ШиринаСтроки) + Символы.ПС;
		Иначе
			Текст = Текст + ПостроитьПоле(ТипЧека, ШиринаСтроки) + Символы.ПС;
		КонецЕсли;
		
		ДатаВремя = ?(ОбщиеПараметры.Свойство("ДатаВремя") И НЕ ПустаяСтрока(ОбщиеПараметры.ДатаВремя), ОбщиеПараметры.ДатаВремя, ТекущаяДата());
		ДатаВремя = Формат(ДатаВремя, "ДФ=""дд.ММ.гггг ЧЧ:мм""");
		Текст = Текст + ВыстроитьПоля(НомерЧека, ДатаВремя, ШиринаСтроки) + Символы.ПС;
		
		Текст = Текст + РазделительВнут;
	КонецЕсли;
	
	ФорматЧисла = "ЧРД=.;ЧЦ=10;ЧДЦ=2;ЧН=0.00;ЧГ=0";
	СуммаЧека    = 0;
	СуммаНДС0    = 0;
	СуммаНДС10   = 0;
	СуммаНДС18   = 0;
	СуммаНДС110  = 0;
	СуммаНДС118  = 0;
	СуммаБезНДС  = 0;
	
	// Формируем строки чека.
	Если ПозицииЧека <> Неопределено Тогда
		
		Для ИндексМассива = 0 По ПозицииЧека.Количество() - 1 Цикл
			
			ПозицияЧека = ПозицииЧека[ИндексМассива];
			
			Если ПозицияЧека.Свойство("ФискальнаяСтрока") Тогда
				Наименование = ?(ПозицияЧека.Свойство("Наименование"), ПозицияЧека.Наименование, "");
				Количество   = ?(ПозицияЧека.Свойство("Количество")  , ПозицияЧека.Количество  , 1);
				Цена         = ?(ПозицияЧека.Свойство("Цена")        , ПозицияЧека.Цена        , 0);
				Сумма        = ?(ПозицияЧека.Свойство("Сумма")       , ПозицияЧека.Сумма       , 0);
				НомерСекции  = ?(ПозицияЧека.Свойство("НомерСекции") , ПозицияЧека.НомерСекции , 0);
				СтавкаНДС    = ?(ПозицияЧека.Свойство("СтавкаНДС")   , ПозицияЧека.СтавкаНДС   , 0);
				
				Если ПозицияЧека.Свойство("ПризнакСпособаРасчета") И НЕ ПустаяСтрока(ПозицияЧека.ПризнакСпособаРасчета) Тогда
					Если НЕ ПозицияЧека.ПризнакСпособаРасчета = ПредопределенноеЗначение("Перечисление.ПризнакиСпособаРасчета.ПередачаСПолнойОплатой") Тогда // Не отображаем для полной оплаты.
						Наименование = МенеджерОборудованияКлиентСервер.ПолучитьПризнакСпособаРасчетаДляПечати(ПозицияЧека.ПризнакСпособаРасчета) + " " + Наименование;
					КонецЕсли;
				КонецЕсли;
				
				ТекстСтроки  = ПостроитьПолеПереносом(Наименование, ШиринаСтроки) + Символы.ПС;
				ЦенаДляПечати = Окр(Сумма / Количество , 2);
				
				СтрокаТовара = Формат(Количество, "ЧРД=.;ЧЦ=10;ЧДЦ=3;ЧН=0.000;ЧГ=0") + " х " 
					+ Формат(ЦенаДляПечати, ФорматЧисла) + " =" + Формат(Сумма, ФорматЧисла);
				ТекстСтроки = ТекстСтроки + ВыстроитьПоля( , СтрокаТовара, ШиринаСтроки) + Символы.ПС;
				
				Если Окр(Количество * Цена, 2) > Сумма Тогда
					ТекстСкидки = НСтр("ru='СКИДКА'") + "=" + Формат(Количество * Цена - Сумма, ФорматЧисла);
				ИначеЕсли Окр(Количество * Цена, 2) < Сумма Тогда
					ТекстСкидки = НСтр("ru='НАДБАВКА'") + "=" + Формат(Сумма - Количество * Цена, ФорматЧисла);
				Иначе
					ТекстСкидки = "";
				КонецЕсли;
				
				ТекстНалога = "";
				Если ПозицияЧека.Свойство("СтавкаНДС") Тогда
					Если ПозицияЧека.СтавкаНДС = 10 Тогда
						СуммаНДС10  = СуммаНДС10 + Сумма;
						ТекстНалога = НСтр("ru='НДС 10%'");
					ИначеЕсли ПозицияЧека.СтавкаНДС = 18 Тогда
						СуммаНДС18  = СуммаНДС18 + Сумма; 
						ТекстНалога = НСтр("ru='НДС 18%'");
					ИначеЕсли ПозицияЧека.СтавкаНДС = 0 Тогда
						СуммаНДС0 = СуммаНДС0 + Сумма;
						ТекстНалога = НСтр("ru='НДС 0%'");
					ИначеЕсли ПозицияЧека.СтавкаНДС = 110 Тогда
						СуммаНДС110  = СуммаНДС110 + Сумма;
						ТекстНалога = НСтр("ru='НДС 10/110%'");
					ИначеЕсли ПозицияЧека.СтавкаНДС = 118 Тогда
						СуммаНДС118  = СуммаНДС118 + Сумма; 
						ТекстНалога = НСтр("ru='НДС 18/118%'");
					Иначе 
						СуммаБезНДС = СуммаБезНДС + Сумма;
						ТекстНалога = НСтр("ru='БЕЗ НДС'");
					КонецЕсли;
				КонецЕсли;
				
				Если ПустаяСтрока(ТекстСкидки) Тогда
					ТекстСтроки = ТекстСтроки + ПостроитьПоле(" " + ТекстНалога, ШиринаСтроки) + Символы.ПС;
				Иначе
					ТекстСтроки = ТекстСтроки + ВыстроитьПоля(" " + ТекстНалога, ТекстСкидки, ШиринаСтроки) + Символы.ПС;
				КонецЕсли;
				Текст = Текст + ТекстСтроки;        
				
				СуммаЧека = СуммаЧека + Сумма;
			ИначеЕсли ПозицияЧека.Свойство("ТекстоваяСтрока") Тогда
				ТекстСтроки = ?(ПозицияЧека.Свойство("Текст"), ПозицияЧека.Текст, "");
				Текст = Текст + ТекстСтроки + Символы.ПС;
			ИначеЕсли ПозицияЧека.Свойство("ШтрихКод") Тогда
				СтрокаШтрихкода = "|ШтрихКод|" + ПозицияЧека.ТипШтрихкода + "|" + ПозицияЧека.ШтрихКод; 
				Текст = Текст + СтрокаШтрихкода + Символы.ПС; 
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Формируем подвал чека
	Если ТаблицаОплат <> Неопределено Тогда
		
		СуммаНаличными       = 0;
		СуммаЭлектронными    = 0;
		СуммаПостоплатой     = 0;
		СуммаПредоплатой     = 0;
		СуммаПредоставлением = 0;
		Для ИндексОплаты = 0 По ТаблицаОплат.Количество() - 1 Цикл
			Если ТаблицаОплат[ИндексОплаты].ТипОплаты = ПредопределенноеЗначение("Перечисление.ТипыОплатыККТ.Электронно") Тогда
				СуммаЭлектронными = СуммаЭлектронными + ТаблицаОплат[ИндексОплаты].Сумма;
			ИначеЕсли ТаблицаОплат[ИндексОплаты].ТипОплаты = ПредопределенноеЗначение("Перечисление.ТипыОплатыККТ.Предоплата") Тогда
				СуммаПредоплатой = СуммаПредоплатой + ТаблицаОплат[ИндексОплаты].Сумма;
			ИначеЕсли ТаблицаОплат[ИндексОплаты].ТипОплаты = ПредопределенноеЗначение("Перечисление.ТипыОплатыККТ.Постоплата") Тогда
				СуммаПостоплатой = СуммаПостоплатой + ТаблицаОплат[ИндексОплаты].Сумма;
			ИначеЕсли ТаблицаОплат[ИндексОплаты].ТипОплаты = ПредопределенноеЗначение("Перечисление.ТипыОплатыККТ.ВстречноеПредоставление") Тогда
				СуммаПредоставлением = СуммаПредоставлением + ТаблицаОплат[ИндексОплаты].Сумма;
			Иначе
				СуммаНаличными = СуммаНаличными + ТаблицаОплат[ИндексОплаты].Сумма;
			КонецЕсли;
		КонецЦикла;
		
		СуммаОплаты = СуммаНаличными + СуммаЭлектронными + СуммаПостоплатой + СуммаПредоплатой + СуммаПредоставлением;
	
		Текст = Текст + РазделительВнут;
		Текст = Текст + ВыстроитьПоля(НСтр("ru='ИТОГ'"), "=" + Формат(СуммаЧека, ФорматЧисла), ШиринаСтроки) + Символы.ПС;
		Текст = Текст + РазделительВнут;
		
		Текст = Текст + НСтр("ru='ОПЛАТА'") + Символы.ПС;
		Если СуммаНаличными > 0 Тогда
			Текст = Текст + ВыстроитьПоля(" " + НСтр("ru='НАЛИЧНЫМИ'"), "=" + Формат(СуммаНаличными, ФорматЧисла), ШиринаСтроки) + Символы.ПС;
		КонецЕсли;
		Если СуммаЭлектронными > 0 Тогда
			Текст = Текст + ВыстроитьПоля(" " + НСтр("ru='ЭЛЕКТРОННЫМИ'"), "=" + Формат(СуммаЭлектронными, ФорматЧисла), ШиринаСтроки) + Символы.ПС;
		КонецЕсли;
		Если СуммаПостоплатой > 0 Тогда
			Текст = Текст + ВыстроитьПоля(" " + НСтр("ru='ПОСТОПЛАТОЙ'"), "=" + Формат(СуммаПостоплатой, ФорматЧисла), ШиринаСтроки) + Символы.ПС;
		КонецЕсли;
		Если СуммаПредоплатой > 0 Тогда
			Текст = Текст + ВыстроитьПоля(" " + НСтр("ru='ЗАЧЕТ АВАНСА'"), "=" + Формат(СуммаПредоплатой, ФорматЧисла), ШиринаСтроки) + Символы.ПС;
		КонецЕсли;          
		Если СуммаПредоставлением > 0 Тогда
			Текст = Текст + ВыстроитьПоля(" " + НСтр("ru='ВСТР.ПРЕДОСТ.'"), "=" + Формат(СуммаПредоставлением, ФорматЧисла), ШиринаСтроки) + Символы.ПС;
		КонецЕсли;          
		
		Текст = Текст + ВыстроитьПоля(НСтр("ru='ПОЛУЧЕНО'"), "=" + Формат(СуммаОплаты, ФорматЧисла), ШиринаСтроки) + Символы.ПС;
		Текст = Текст + ВыстроитьПоля(" " + НСтр("ru='СДАЧА'"), "=" + Формат(СуммаОплаты - СуммаЧека, ФорматЧисла), ШиринаСтроки) + Символы.ПС;
		
		Если ОбщиеПараметры.Свойство("СистемаНалогообложения") Тогда
			СистемаНалогообложенияКод = МенеджерОборудованияКлиентСервер.ПолучитьКодТипаСистемыНалогообложенияККТ(ОбщиеПараметры.СистемаНалогообложения);
			СистемаНалогообложения = МенеджерОборудованияКлиентСервер.ПолучитьНаименованиеСистемыНалогообложения(СистемаНалогообложенияКод, Истина);
			Текст = Текст + ВыстроитьПоля(НСтр("ru='СНО:'"), СистемаНалогообложения, ШиринаСтроки) + Символы.ПС;
		КонецЕсли;          
		
		Если СуммаНДС0 > 0 Тогда
			Текст = Текст + ВыстроитьПоля(НСтр("ru=' СУММА C НДС 0%'")  , "=" + Формат(СуммаНДС0, ФорматЧисла), ШиринаСтроки) + Символы.ПС;
		КонецЕсли;
		Если СуммаНДС10 > 0 Тогда
			Текст = Текст + ВыстроитьПоля(НСтр("ru=' СУММА НДС 10%'"), "=" + Формат(СуммаНДС10 / 110 * 10, ФорматЧисла), ШиринаСтроки) + Символы.ПС;
		КонецЕсли;
		Если СуммаНДС18 > 0 Тогда
			Текст = Текст + ВыстроитьПоля(НСтр("ru=' СУММА НДС 18%'"), "=" + Формат(СуммаНДС18 / 118 * 18, ФорматЧисла), ШиринаСтроки) + Символы.ПС;
		КонецЕсли;
		Если СуммаНДС110 > 0 Тогда
			Текст = Текст + ВыстроитьПоля(НСтр("ru=' СУММА НДС 10/110%'"), "=" + Формат(СуммаНДС110 / 110 * 10, ФорматЧисла), ШиринаСтроки) + Символы.ПС;
		КонецЕсли;
		Если СуммаНДС118 > 0 Тогда
			Текст = Текст + ВыстроитьПоля(НСтр("ru=' СУММА НДС 18/118%'"), "=" + Формат(СуммаНДС118 / 118 * 18, ФорматЧисла), ШиринаСтроки) + Символы.ПС;
		КонецЕсли;
		Если СуммаБезНДС > 0 Тогда
			Текст = Текст + ВыстроитьПоля(НСтр("ru=' СУММА БЕЗ НДС'"), "=" + Формат(СуммаБезНДС, ФорматЧисла), ШиринаСтроки) + Символы.ПС;
		КонецЕсли;
		
		Кассир = ?(ОбщиеПараметры.Свойство("Кассир"), ОбщиеПараметры.Кассир, "");
		Текст = Текст + ПостроитьПоле(НСтр("ru='КАССИР'") + ":" + Символы.НПП + Кассир, ШиринаСтроки) + Символы.ПС + Символы.ПС;                        
		Текст = Текст + ПостроитьПоле(НСтр("ru='ПОДПИСЬ'") + ":", ШиринаСтроки, "_") + Символы.ПС;
		
		Если ОбщиеПараметры.Свойство("ТекстПодвала") И НЕ ПустаяСтрока(ОбщиеПараметры.ТекстПодвала) Тогда
			Текст = Текст + ВыстроитьПоля(ОбщиеПараметры.ТекстПодвала, , ШиринаСтроки) + Символы.ПС;
		КонецЕсли;
	
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ДополнительныйТекст) Тогда
		Текст = Текст + ДополнительныйТекст + Символы.ПС;
	КонецЕсли;
	
	Текст = Текст + Разделитель + Символы.ПС;
	
	Возврат Текст;
	
КонецФункции

Функция СформироватьТекстНефискальногоЧека(ШиринаСтроки, ТипДокумента, ВходныеПараметры, ДополнительныйТекст = Неопределено) Экспорт
	
	ОбщиеПараметры = Новый Структура("ТипЧека");
	
	Если ВходныеПараметры <> Неопределено Тогда
		ОбщиеПараметры = ВходныеПараметры[0];
	КонецЕсли;
	
	Текст = СформироватьТекстНефискальногоДокумента(ТипДокумента, ОбщиеПараметры, ШиринаСтроки, ДополнительныйТекст);
	
	Если ОбщиеПараметры.Свойство("КопийЧека") И ОбщиеПараметры.КопийЧека > 1 Тогда
		Эталон = Текст;
		Для Копия = 2 По ОбщиеПараметры.КопийЧека Цикл
			Текст = Текст + "[отрезка]" + Символы.ПС + Эталон;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Текст;
	
КонецФункции

// Добавленные

Функция СистемаНалогообложения(Организация, ДатаДокумента = Неопределено, ПриоритетныйПорядок = Неопределено) Экспорт
	
	Если ПриоритетныйПорядок <> Неопределено Тогда
		Если ВРег(ПриоритетныйПорядок) = "ЕНВД" Тогда
			Результат = ПредопределенноеЗначение("Перечисление.ТипыСистемНалогообложенияККТ.ЕНВД");
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	
	Если ДатаДокумента = Неопределено Тогда
		ДатаДокумента = ТекущаяДата();
	КонецЕсли;

	Отказ = Ложь;
	УП = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(ДатаДокумента, Организация);
	
	Если УП = Неопределено Тогда
		Результат = ПредопределенноеЗначение("Перечисление.ТипыСистемНалогообложенияККТ.ПустаяСсылка");
	ИначеЕсли УП.СистемаНалогообложения = ПредопределенноеЗначение("Перечисление.СистемыНалогообложения.Общая") Тогда
		Результат = ПредопределенноеЗначение("Перечисление.ТипыСистемНалогообложенияККТ.ОСН");
	ИначеЕсли УП.СистемаНалогообложения = ПредопределенноеЗначение("Перечисление.СистемыНалогообложения.Упрощенная") Тогда
		Если УП.ОбъектНалогообложенияУСН = ПредопределенноеЗначение("Перечисление.ОбъектыНалогообложенияПоУСН.Доходы") Тогда
			Результат = ПредопределенноеЗначение("Перечисление.ТипыСистемНалогообложенияККТ.УСНДоход");
		ИначеЕсли УП.ОбъектНалогообложенияУСН = ПредопределенноеЗначение("Перечисление.ОбъектыНалогообложенияПоУСН.ДоходыМинусРасходы") Тогда
			Результат = ПредопределенноеЗначение("Перечисление.ТипыСистемНалогообложенияККТ.УСНДоходРасход");
		Иначе
			Результат = ПредопределенноеЗначение("Перечисление.ТипыСистемНалогообложенияККТ.ПустаяСсылка");
		КонецЕсли;
	Иначе
		Результат = ПредопределенноеЗначение("Перечисление.ТипыСистемНалогообложенияККТ.ПустаяСсылка");
	КонецЕсли;
		
	Возврат Результат;

КонецФункции

Функция ПолучитьСтавкуНДСДляФискализацииЧека(СтавкаНДС, ПорядокНалогообложения = "") Экспорт
	
	Если СтавкаНДС = ПредопределенноеЗначение("Перечисление.СтавкиНДС.БезНДС") 
		ИЛИ СтавкаНДС = ПредопределенноеЗначение("Перечисление.СтавкиНДС.ПустаяСсылка")
		ИЛИ ВРег(ПорядокНалогообложения) = "ЕНВД" Тогда
		Результат = "";
	ИначеЕсли СтавкаНДС = ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС10") Тогда
		Результат = 10;
	ИначеЕсли СтавкаНДС = ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС18") Тогда
		Результат = 18;
	ИначеЕсли СтавкаНДС = ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС20") Тогда
		Результат = 20;
	ИначеЕсли СтавкаНДС = ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС10_110") Тогда
		Результат = 110;
	ИначеЕсли СтавкаНДС = ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС18_118") Тогда
		Результат = 118;
	ИначеЕсли СтавкаНДС = ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС20_120") Тогда
		Результат = 120;
	КонецЕсли;
		
	Возврат Результат;
	
КонецФункции

Процедура ЗаполнитьПризнакСпособаРасчета(СтрокаРасшифровки, ВидОперации, ДокументОснование) Экспорт
	
	Если СтрокаРасшифровки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДопустимыеТипыДР = ДопустимыеТипыДокументаРасчетов();
	ДопустимыеТипыСД = ДопустимыеТипыСделки();
	ДопустимыеТипыДО = Новый Массив;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ДопустимыеТипыДО, ДопустимыеТипыДР);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ДопустимыеТипыДО, ДопустимыеТипыСД);
	
	ТД = СтрокаРасшифровки.ДокументРасчетовСКонтрагентом;
	ТипТД = ТипЗнч(ТД);
	Если ТД = Неопределено ИЛИ Не ЗначениеЗаполнено(ТД) ИЛИ ДопустимыеТипыДР.Найти(ТипТД) = Неопределено Тогда
		ТД = СтрокаРасшифровки.Сделка;
		ТипТД = ТипЗнч(ТД);
		Если ТД = Неопределено ИЛИ Не ЗначениеЗаполнено(ТД) ИЛИ ДопустимыеТипыСД.Найти(ТипТД) = Неопределено Тогда
			ТД = ДокументОснование;
			ТипТД = ТипЗнч(ТД);
			Если ТД = Неопределено ИЛИ Не ЗначениеЗаполнено(ТД) ИЛИ ДопустимыеТипыДО.Найти(ТипТД) = Неопределено Тогда
				ТД = Неопределено;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	СуммаПоСтавке = 0;
	Если ТД <> Неопределено Тогда
		СуммыПоСтавкам = УчетНДС.ПолучитьСуммыДокументаСНДСПоСтавкам(ТД.ПолучитьОбъект());
		СуммаПоСтавке = СуммыПоСтавкам[СтрокаРасшифровки.СтавкаНДС];
		Если СуммаПоСтавке = Неопределено ИЛИ ТипЗнч(СуммаПоСтавке) <> Тип("Число") Тогда
			СуммаПоСтавке = 0;
		КонецЕсли;
	КонецЕсли;
	
	Если ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.ОплатаПокупателя") ИЛИ
		ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийОплатаОтПокупателяПлатежнойКартой.ОплатаПокупателя") Тогда
		
		Если ТД = Неопределено ИЛИ СуммаПоСтавке = 0 Тогда
			СтрокаРасшифровки.ПризнакСпособаРасчета = ПредопределенноеЗначение("Перечисление.ПризнакиСпособаРасчета.Аванс");
		ИначеЕсли ДопустимыеТипыДР.Найти(ТипТД) <> Неопределено Тогда
			СтрокаРасшифровки.ПризнакСпособаРасчета = ПредопределенноеЗначение("Перечисление.ПризнакиСпособаРасчета.ОплатаКредита");
		ИначеЕсли ДопустимыеТипыСД.Найти(ТипТД) <> Неопределено Тогда
			Если СтрокаРасшифровки.СуммаПлатежа >= СуммаПоСтавке Тогда
				СтрокаРасшифровки.ПризнакСпособаРасчета = ПредопределенноеЗначение("Перечисление.ПризнакиСпособаРасчета.ПредоплатаПолная");
			Иначе
				СтрокаРасшифровки.ПризнакСпособаРасчета = ПредопределенноеЗначение("Перечисление.ПризнакиСпособаРасчета.ПредоплатаЧастичная");
			КонецЕсли;
		КонецЕсли;			
		
	ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВозвратДенежныхСредствПокупателю") ИЛИ
		ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийОплатаОтПокупателяПлатежнойКартой.ВозвратДенежныхСредствПокупателю") Тогда
		
		Если ТД = Неопределено ИЛИ СуммаПоСтавке = 0 Тогда
			СтрокаРасшифровки.ПризнакСпособаРасчета = ПредопределенноеЗначение("Перечисление.ПризнакиСпособаРасчета.Аванс");
		ИначеЕсли ДопустимыеТипыДР.Найти(ТипТД) <> Неопределено Тогда
			Если СтрокаРасшифровки.СуммаПлатежа >= СуммаПоСтавке Тогда
				СтрокаРасшифровки.ПризнакСпособаРасчета = ПредопределенноеЗначение("Перечисление.ПризнакиСпособаРасчета.ПередачаСПолнойОплатой");
			Иначе
				СтрокаРасшифровки.ПризнакСпособаРасчета = ПредопределенноеЗначение("Перечисление.ПризнакиСпособаРасчета.ПередачаСЧастичнойОплатой");
			КонецЕсли;
		ИначеЕсли ДопустимыеТипыСД.Найти(ТипТД) <> Неопределено Тогда
			Если СтрокаРасшифровки.СуммаПлатежа >= СуммаПоСтавке Тогда
				СтрокаРасшифровки.ПризнакСпособаРасчета = ПредопределенноеЗначение("Перечисление.ПризнакиСпособаРасчета.ПредоплатаПолная");
			Иначе
				СтрокаРасшифровки.ПризнакСпособаРасчета = ПредопределенноеЗначение("Перечисление.ПризнакиСпособаРасчета.ПредоплатаЧастичная");
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		СтрокаРасшифровки.ПризнакСпособаРасчета = ПредопределенноеЗначение("Перечисление.ПризнакиСпособаРасчета.Аванс");
	КонецЕсли;

КонецПроцедуры

Функция ВерсияФФД(ПараметрыККТ) Экспорт
	
	ВерсияФФДККТ = Неопределено;
	ПараметрыККТ.Свойство("ВерсияФФДККТ", ВерсияФФДККТ);
	
	Если ВерсияФФДККТ = Неопределено Тогда
		Результат = "1.0";
	Иначе
		Результат = ВерсияФФДККТ;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ДопустимыеТипыДокументаРасчетов() Экспорт
	мТипы = Новый Массив;
	мТипы.Добавить(Тип("ДокументСсылка.РеализацияТоваровУслуг"));
	мТипы.Добавить(Тип("ДокументСсылка.ВозвратТоваровОтПокупателя"));
	мТипы.Добавить(Тип("ДокументСсылка.РеализацияУслугПоПереработке"));
	мТипы.Добавить(Тип("ДокументСсылка.ПередачаОС"));
	мТипы.Добавить(Тип("ДокументСсылка.АктОбОказанииПроизводственныхУслуг"));
	Возврат мТипы;
КонецФункции

Функция ДопустимыеТипыСделки() Экспорт
	мТипы = Новый Массив;
	мТипы.Добавить(Тип("ДокументСсылка.ЗаказПокупателя"));
	мТипы.Добавить(Тип("ДокументСсылка.СчетНаОплатуПокупателю"));
	Возврат мТипы;
КонецФункции

Функция ДопустимыеТабличныеЧасти() Экспорт
	мТабличныеЧасти = Новый Массив;
	мТабличныеЧасти.Добавить("Товары");
	мТабличныеЧасти.Добавить("Услуги");
	мТабличныеЧасти.Добавить("Продукция");
	мТабличныеЧасти.Добавить("ОС");
	Возврат мТабличныеЧасти;
КонецФункции

// Отправка электронных чеков

Процедура СформироватьТекстЭлектронногоЧека(ПараметрыЧека) Экспорт
	ТекстЭлектронногоЧека  = НСтр("ru='ККТ№'") + ПараметрыЧека.РегистрационныйНомерККТ + Символы.НПП + 
		Формат(ПараметрыЧека.СуммаЧека, "ЧРД=,;ЧЦ=10;ЧДЦ=2;ЧН=0,00;ЧГ=0") + Символы.НПП + 
		Формат(ТекущаяДата(), "ДФ=""дд.ММ.гггг ЧЧ:мм""") + Символы.НПП + 
		НСтр("ru='ФПД:'") + ПараметрыЧека.ФискальныйПризнак + Символы.НПП + 
		НСтр("ru='САЙТ:'") + ПараметрыЧека.АдресСайтаПроверки;
	ПараметрыЧека.Вставить("ТекстЭлектронногоЧека", ТекстЭлектронногоЧека);
КонецПроцедуры

Процедура ПроверитьВозможностьОтправкиЭлектронногоЧека(ИсходныйДокумент, СообщенияОбОшибках) Экспорт
	
	Если ТипЗнч(СообщенияОбОшибках) = Тип("Массив") ИЛИ ТипЗнч(СообщенияОбОшибках) = Тип("ФиксированныйМассив") Тогда
		СообщенияОбОшибках.Очистить();
	Иначе
		СообщенияОбОшибках = Новый Массив;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИсходныйДокумент.НомерЧекаККМ) Тогда
		СообщенияОбОшибках.Добавить("Чек не фискализирован");
	КонецЕсли;
	Если ПустаяСтрока(ИсходныйДокумент.АдресЭП) Тогда
		СообщенияОбОшибках.Добавить("В чеке не указан адрес электронной почты покупателя");
	КонецЕсли;
	Если ПустаяСтрока(ИсходныйДокумент.ТекстЭлектронногоЧека) Тогда
		СообщенияОбОшибках.Добавить("Текст электронного чека не был сформирован при фискализации");
	КонецЕсли;
	
КонецПроцедуры

// Функция заполняет наименование рабочего места клиента по имени пользователя
//
Процедура ЗаполнитьНаименованиеРабочегоМеста(Объект, ИмяПользователя) Экспорт
	
	ИмяПустойПользователь = НСтр("ru='<Пользователь>'");
	
	Если ПустаяСтрока(Объект.Наименование) Тогда
		
		Если ПустаяСтрока(ИмяПользователя) Тогда
			Объект.Наименование = "<" + ИмяПустойПользователь + ">";
		Иначе
			Объект.Наименование = Строка(ИмяПользователя);
		КонецЕсли;
		
		Если ПустаяСтрока(Объект.ИмяКомпьютера) Тогда
			Объект.Наименование = Объект.Наименование + "(" + Объект.Код           + ")";
		Иначе
			Объект.Наименование = Объект.Наименование + "(" + Объект.ИмяКомпьютера + ")";
		КонецЕсли;
		
	ИначеЕсли Не ПустаяСтрока(Строка(ИмяПользователя))
	          И Найти(Объект.Наименование, ИмяПустойПользователь) > 0 Тогда
	
		Объект.Наименование = СтрЗаменить(Объект.Наименование, ИмяПустойПользователь, Строка(ИмяПользователя));
	
	КонецЕсли;

КонецПроцедуры

// Функция возвращает сетевой порт по умолчанию
// 
Функция ПолучитьСетевойПортПоУмолчанию() Экспорт

	Возврат 15000;

КонецФункции 

///////////////////////////////////////////////////////////////////////////////////////////////////////
//  ЕГАИС v3
//  Процедуры из новых версий БСП
///////////////////////////////////////////////////////////////////////////////////////////////////////

// Функция определяет тип штрихкода по значение кода.
// 
Функция ОпределитьТипШтрихкода(Штрихкод) Экспорт
	
	ТипШтрихкодаЗнач = "";	
	ДлинаШтрихкода = СтрДлина(Штрихкод);
	
	Если ДлинаШтрихкода = 0 Тогда
		Возврат ТипШтрихкодаЗнач;
	КонецЕсли;
	
	Сумма = 0;
	
	Если ДлинаШтрихкода = 14 Тогда // ITF14
		
		Коэффициент = 1; 
		Для Сч = 1 По 13 Цикл
			ВремКодСимвола = КодСимвола(Штрихкод, Сч);
			Если ВремКодСимвола < 48 Или ВремКодСимвола > 57 Тогда
				Прервать;
			КонецЕсли;
			Сумма       = Сумма + Коэффициент * (ВремКодСимвола - 48);
			Коэффициент = 4 - Коэффициент;
		КонецЦикла;
		Сумма = (10 - Сумма % 10) % 10;
		Если КодСимвола(Штрихкод, 14) = Сумма + 48 Тогда
			ТипШтрихкодаЗнач = "ITF14";
 		КонецЕсли;
		
	ИначеЕсли ДлинаШтрихкода = 13 Тогда // EAN13
		
		EAN13 = Истина;
		Коэффициент = 1;
		Для Сч = 1 По 12 Цикл
			ВремКодСимвола = КодСимвола(Штрихкод, Сч);
			Если ВремКодСимвола < 48 Или ВремКодСимвола > 57 Тогда
				EAN13 = Ложь;
				Прервать;
			КонецЕсли;
			Сумма  = Сумма + Коэффициент * (ВремКодСимвола - 48);
			Коэффициент = 4 - Коэффициент;
		КонецЦикла;
		Сумма = (10 - Сумма % 10) % 10;
		ПроверочныйСимвол = Символ(Сумма + 48);
		Если EAN13 И ПроверочныйСимвол = Прав(Штрихкод, 1) Тогда
			ТипШтрихкодаЗнач = "EAN13";
		КонецЕсли;
		
	ИначеЕсли ДлинаШтрихкода = 8 Тогда // EAN8
		
		EAN8 = Истина;
		Коэффициент = 3;
		Для Сч = 1 По 7 Цикл
			ВремКодСимвола = КодСимвола(Штрихкод, Сч);
			Если ВремКодСимвола < 48 Или ВремКодСимвола > 57 Тогда
				EAN8 = Ложь;
				Прервать;
			КонецЕсли;
			Сумма       = Сумма + Коэффициент * (ВремКодСимвола - 48);
			Коэффициент = 4 - Коэффициент;
		КонецЦикла;
		Сумма = (10 - Сумма % 10) % 10;
		Если EAN8 И (КодСимвола(Штрихкод, 8) = Сумма + 48) Тогда
			ТипШтрихкодаЗнач = "EAN8";
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТипШтрихкодаЗнач= "" Тогда // CODE39
		
		CODE39 = Истина;
		Для Сч = 1 По ДлинаШтрихкода Цикл
			ВремКодСимвола = КодСимвола(Штрихкод, Сч);
			Если (ВремКодСимвола <> 32)
				И (ВремКодСимвола < 36 Или ВремКодСимвола > 37)
				И (ВремКодСимвола <> 43)
				И (ВремКодСимвола < 45 Или ВремКодСимвола > 57)
				И (ВремКодСимвола < 65 Или ВремКодСимвола > 90) Тогда
				CODE39 = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если CODE39 Тогда
			ТипШтрихкодаЗнач = "CODE39";
		КонецЕсли                                                     
		
	КонецЕсли;
	
	Если ТипШтрихкодаЗнач= ""  Тогда // CODE128
		// CODE128 символы ASCII от 0 до 127 (цифры от «0» до «9», буквы от «A» до «Z» и от «a» до «z») и специальные символы;
		CODE128 = Истина;
		Для Сч = 1 По ДлинаШтрихкода Цикл
			ВремКодСимвола = КодСимвола(Штрихкод, Сч);
			Если (ВремКодСимвола > 127) Тогда
				CODE128 = Ложь;
			Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если CODE128 Тогда
			ТипШтрихкодаЗнач = "CODE128";
		КонецЕсли                                                     
		
	КонецЕсли;
	
	Если ТипШтрихкодаЗнач = "CODE128"  Тогда // EAN128
		// В коде EAN128 регламентирован словарь CODE128 но регламентированы группы кодов.
		Если КодСимвола(Штрихкод, 1) = 40 Тогда
			ТипШтрихкодаЗнач = "EAN128";
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТипШтрихкодаЗнач;
	
КонецФункции

Функция ПолучитьКартинкуШтрихкода(ПараметрыШтрихкода) Экспорт
	Возврат Новый Картинка;
КонецФункции

// Определяет необходимость выполнения серверного события ПослеВыполненияКомандыФискальнымУстройством.
//
Функция ТребуетсяВызовСобытияПослеВыполненияКомандыФискальнымУстройством(Контекст) Экспорт
	
	Если Не КомандыРаботыСоСменами().Найти(Контекст.ВыполняемаяКоманда) = Неопределено Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// Возвращает массив команд работы с кассовой сменой.
//
Функция КомандыРаботыСоСменами()
	
	МассивРезультат = Новый Массив();
	
	//МассивРезультат.Добавить("ReportCurrentStatusOfSettlements");
	МассивРезультат.Добавить("OpenShift");
	МассивРезультат.Добавить("CloseShift");
	
	Возврат МассивРезультат;
	
КонецФункции

// Преобразовывает HEX строку в строку символов.
//
// Параметры:
//  СтрокаHEX - Строка HEX содержащая символы.  
// 
// Возвращаемое значение:
//   - Тестовая строка
//
Функция ПреобразоватьHEXВСтроку(Знач СтрокаHEX) Экспорт
	
	Результат = "";
	ВремСтрока = СтрокаHEX;
	КодСимвола = 0;
	
	Пока СтрДлина(ВремСтрока) > 0 Цикл
		ТекСимвол  = Лев(ВремСтрока, 2);
		ТекСимвол  = ПреобразоватьHEXВБинарнуюСтроку(ТекСимвол);
		КодСимвола = ПреобразоватьБинарнуюСтрокуВЧисло(ТекСимвол);
		Если КодСимвола > 31 Тогда
			Результат = Результат + Символ(КодСимвола);
		КонецЕсли;
		ВремСтрока = Сред(ВремСтрока, 3);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Преобразовывает строку символов в HEX строку.
//
// Параметры:
//   Строка - Тестовая строка
// 
// Возвращаемое значение:
//   - СтрокаHEX - Строка HEX содержащая символы.  
//
Функция ПреобразоватьСтрокуВHEX(Знач Строка) Экспорт
	
	Результат = "";
	ИндексСимвола = 1;
	
	Пока ИндексСимвола <= СтрДлина(Строка) Цикл
		ТекКод = КодСимвола(Строка, ИндексСимвола);
		ТекСимвол = ДобавитьЛидирующиеНули(ПреобразоватьЧислоВБинарнуюСтроку(ТекКод), 8);
		Результат = Результат + ПреобразоватьБинарнуюСтрокуВHEX(ТекСимвол);
		ИндексСимвола = ИндексСимвола + 1;
	КонецЦикла;
	
	Результат = ДобавитьЛидирующиеНули(Результат, 8);
	Возврат Результат;
	
КонецФункции

// Функция - Преобразовать HEX в бинарную строку
//
// Параметры:
//  СтрокаHEX - Строка HEX содержащая символы.  
// 
// Возвращаемое значение:
//   - Текстовая строка в бинарном представлении (Пример "000010101"). 
//
Функция ПреобразоватьHEXВБинарнуюСтроку(Знач СтрокаHEX) Экспорт
	
	Результат = "";
	
	Для ИндексСимвола = 1 По СтрДлина(СтрокаHEX) Цикл 
		ТекСимвол = Сред(СтрокаHEX, ИндексСимвола, 1);
		Если ТекСимвол = "0" Тогда 
			Результат = Результат + "0000"
		ИначеЕсли ТекСимвол = "1" Тогда 
			Результат = Результат + "0001"
		ИначеЕсли ТекСимвол = "2" Тогда 
			Результат = Результат + "0010"
		ИначеЕсли ТекСимвол = "3" Тогда 
			Результат = Результат + "0011"
		ИначеЕсли ТекСимвол = "4" Тогда 
			Результат = Результат + "0100"
		ИначеЕсли ТекСимвол = "5" Тогда 
			Результат = Результат + "0101"
		ИначеЕсли ТекСимвол = "6" Тогда 
			Результат = Результат + "0110"
		ИначеЕсли ТекСимвол = "7" Тогда 
			Результат = Результат + "0111"
		ИначеЕсли ТекСимвол = "8" Тогда 
			Результат = Результат + "1000"
		ИначеЕсли ТекСимвол = "9" Тогда 
			Результат = Результат + "1001"
		ИначеЕсли ТекСимвол = "A" Тогда 
			Результат = Результат + "1010"
		ИначеЕсли ТекСимвол = "B" Тогда 
			Результат = Результат + "1011"
		ИначеЕсли ТекСимвол = "C" Тогда 
			Результат = Результат + "1100"
		ИначеЕсли ТекСимвол = "D" Тогда 
			Результат = Результат + "1101"
		ИначеЕсли ТекСимвол = "E" Тогда 
			Результат = Результат + "1110"
		ИначеЕсли ТекСимвол = "F" Тогда 
			Результат = Результат + "1111"
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Функция - Преобразовать бинарную строку ВHEX
//
// Параметры:
//  БинарнаяСтрока- Текстовая строка в бинарном представлении (Пример "000010101").
// 
// Возвращаемое значение:
//   - Строка HEX содержащая символы.  
//
Функция ПреобразоватьБинарнуюСтрокуВHEX(Знач БинарнаяСтрока) Экспорт
	
	Результат = "";
	ВремСтрока = БинарнаяСтрока;
	
	Пока СтрДлина(ВремСтрока) > 0 Цикл
		ТекСимвол = Лев(ВремСтрока, 4);
		Если ТекСимвол = "0000" Тогда 
			Результат = Результат + "0";
		ИначеЕсли ТекСимвол = "0001" Тогда 
			Результат = Результат + "1";
		ИначеЕсли ТекСимвол = "0010" Тогда 
			Результат = Результат + "2";
		ИначеЕсли ТекСимвол = "0011" Тогда 
			Результат = Результат + "3";
		ИначеЕсли ТекСимвол = "0100" Тогда 
			Результат = Результат + "4";
		ИначеЕсли ТекСимвол = "0101" Тогда 
			Результат = Результат + "5";
		ИначеЕсли ТекСимвол = "0110" Тогда 
			Результат = Результат + "6";
		ИначеЕсли ТекСимвол = "0111" Тогда 
			Результат = Результат + "7";
		ИначеЕсли ТекСимвол = "1000" Тогда 
			Результат = Результат + "8";
		ИначеЕсли ТекСимвол = "1001" Тогда 
			Результат = Результат + "9";
		ИначеЕсли ТекСимвол = "1010" Тогда 
			Результат = Результат + "A";
		ИначеЕсли ТекСимвол = "1011" Тогда 
			Результат = Результат + "B";
		ИначеЕсли ТекСимвол = "1100" Тогда 
			Результат = Результат + "C";
		ИначеЕсли ТекСимвол = "1101" Тогда 
			Результат = Результат + "D";
		ИначеЕсли ТекСимвол = "1110" Тогда 
			Результат = Результат + "E";
		ИначеЕсли ТекСимвол = "1111" Тогда 
			Результат = Результат + "F";
		КонецЕсли;
		ВремСтрока = Сред(ВремСтрока, 5);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Функция - Преобразовать бинарную строку в десятичное число
//
// Параметры:
//  БинарнаяСтрока - Текстовая строка в бинарном представлении (Пример "000010101"). 
// 
// Возвращаемое значение:
//   - Десятичное число. 
//
Функция ПреобразоватьБинарнуюСтрокуВЧисло(Знач БинарнаяСтрока) Экспорт
	
	Результат = 0;
	ТекущийИндекс = СтрДлина(БинарнаяСтрока) - 1;
	
	Для ИндексСимвол = 1 По СтрДлина(БинарнаяСтрока) Цикл
		ТекСимвол = Сред(БинарнаяСтрока, ИндексСимвол, 1);
		Если ТекСимвол = "1" Тогда
			Результат = Результат + Pow(2, ТекущийИндекс); 
		КонецЕсли;
		ТекущийИндекс = ТекущийИндекс - 1;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Функция - Преобразовать десятичное число в бинарную строку
//
// Параметры:
//  Число - Десятичное число которое будет преобразовано в бинарный вид. 
// 
// Возвращаемое значение:
//   - Текстовая строка в бинарном представлении (Пример "000010101").
//
Функция ПреобразоватьЧислоВБинарнуюСтроку(Знач Число) Экспорт 
	
	Результат = "";
	
	Пока Число > 0 Цикл
		Остаток = Число % 2;
		Число = Цел(Число / 2);
		Результат = Строка(Остаток) + Результат;
	КонецЦикла;
	
	Результат =?(ПустаяСтрока(Результат), "0", Результат); 
	Возврат Результат;
	
КонецФункции

Функция ДобавитьЛидирующиеНули(Знач Строка, Знач ДлиннаСтроки) 
	
	ТекстПолный = Строка;
	Пока СтрДлина(ТекстПолный) < ДлиннаСтроки Цикл
		ТекстПолный = "0" + ТекстПолный;
	КонецЦикла;
	          
	Возврат ТекстПолный;
	
КонецФункции

// Декодирование данных по значение EPC(HEX строка). Поддерживается формат SGTIN-96 и SGTIN-198.
//
// Параметры:
//   EPC - Строка содержащая значение банка EPC в HEX виде.
// 
// Возвращаемое значение:
//  - Структура
//       Результат       - Результат декодирования (успешно или нет)
//       EPC             - Значение EPC в виде HEX строки
//       EPC_BIN         - Значение EPC в виде бинарной строки
//       Формат          - Распознанный формат данных SGTIN-96 или SGTIN-198  
//       GTIN            - GTIN 
//       СерийныйНомер   - Серийный номер SGTIN 
//       ПрефиксКомпании - Префикс компании
//       URI             - EPC Tag URI
//       
Функция ДекодированиеДанныхSGTIN(EPC) Экспорт
	
	// Преобразовываем HEX строку значение банка EPC в бинарную строку.
	БитовыйМассив = ПреобразоватьHEXВБинарнуюСтроку(EPC);
	
	// Подготавливаем структура результата.
	СтруктураРезультата = ПолучитьСтруктуруЗаписиEPC();
	СтруктураРезультата.EPC = EPC;
	СтруктураРезультата.EPC_BIN = БитовыйМассив; 
	
	// Получаем заголовок метки.
	Заголовок = Сред(БитовыйМассив, 1, 8);
	
	Если Заголовок = "00110000" Тогда // Распознан заголовок SGTIN-96.
		
		Формат = "sgtin-96";
		// Для SGTIN-96 длинная серийного номера 38 bit.
		СерийныйНомер = Сред(БитовыйМассив, 59); 
		// Серийный номер состоит из десятичных цифр. Максимальное значение 274,877,906,943
		СерийныйНомер = ДобавитьЛидирующиеНули(Формат(ПреобразоватьБинарнуюСтрокуВЧисло(СерийныйНомер), "ЧГ=0"), 12); 
		
	ИначеЕсли Заголовок = "00110110" Тогда // Распознан заголовок SGTIN-198.
		
		Формат = "sgtin-198";
		// Для SGTIN-198 длинная серийного номера 140 bit.
		СерийныйНомерВрем = Сред(БитовыйМассив, 59); 
		// Серийный номер состоит из 7 битных символов. Максимально 20 символов.
		СерийныйНомер = "";
		Пока СтрДлина(СерийныйНомерВрем) > 0 Цикл
			ТекСимвол  = Лев(СерийныйНомерВрем, 7);
			КодСимвола = ПреобразоватьБинарнуюСтрокуВЧисло(ТекСимвол);
			Если КодСимвола > 31 Тогда
				СерийныйНомер = СерийныйНомер + Символ(КодСимвола);
			КонецЕсли;
			СерийныйНомерВрем = Сред(СерийныйНомерВрем, 8);
		КонецЦикла;
		
	Иначе
		Возврат СтруктураРезультата; // Не распознан формат данных EPC.
	КонецЕсли;
	
	СтруктураРезультата.СерийныйНомер = СерийныйНомер;
	СтруктураРезультата.Формат        = Формат;
	
	Фильтр      = ПреобразоватьБинарнуюСтрокуВЧисло(Сред(БитовыйМассив, 9, 3));
	Разделитель = ПреобразоватьБинарнуюСтрокуВЧисло(Сред(БитовыйМассив, 12, 3));
	
	// Определяем разделить префикса компании.
	Если Разделитель = 1 Тогда
		РазрядовКомпании = 37;
		РазрядовЗнаков   = 11;
	ИначеЕсли Разделитель = 2 Тогда
		РазрядовКомпании = 34;
		РазрядовЗнаков   = 10;
	ИначеЕсли Разделитель = 3 Тогда
		РазрядовКомпании = 30;
		РазрядовЗнаков   = 9;
	ИначеЕсли Разделитель = 4 Тогда
		РазрядовКомпании = 27;
		РазрядовЗнаков   = 8;
	ИначеЕсли Разделитель = 5 Тогда
		РазрядовКомпании = 24;
		РазрядовЗнаков   = 7;
	ИначеЕсли Разделитель = 6 Тогда
		РазрядовКомпании = 20;
		РазрядовЗнаков   = 6;
	Иначе
		РазрядовКомпании = 40;
		РазрядовЗнаков   = 12;
	КонецЕсли;
	
	ПрефиксКомпании = Сред(БитовыйМассив, 15, РазрядовКомпании);
	ГруппаТовара    = Сред(БитовыйМассив, 15 + РазрядовКомпании, 44 - РазрядовКомпании);
	
	ПрефиксКомпании = ДобавитьЛидирующиеНули(Формат(ПреобразоватьБинарнуюСтрокуВЧисло(ПрефиксКомпании), "ЧГ=0"), РазрядовЗнаков); 
	ГруппаТовара    = ДобавитьЛидирующиеНули(Формат(ПреобразоватьБинарнуюСтрокуВЧисло(ГруппаТовара), "ЧГ=0"), 13 - РазрядовЗнаков);
	
	URI = "urn:epc:tag:" + Формат + ":" + Фильтр + "." + ПрефиксКомпании + "." + ГруппаТовара + "." + СерийныйНомер; 
	
	GTIN = Лев(ГруппаТовара, 1) + ПрефиксКомпании + Прав(ГруппаТовара, СтрДлина(ГруппаТовара) - 1);;
	
	Если СтрДлина(GTIN) = 13 Тогда
		GTIN = GTIN + РассчитатьКонтрольныйСимволGTIN14(GTIN) 
	КонецЕсли;
	
	СтруктураРезультата.ПрефиксКомпании = ПрефиксКомпании; 
	СтруктураРезультата.GTIN = GTIN;
	СтруктураРезультата.URI  = URI;
	СтруктураРезультата.Результат = Истина;
	
	Возврат СтруктураРезультата;
	
КонецФункции

// Функция возвращает пустую структуру записи EPC.
// 
// Возвращаемое значение:
//  - Структура
//       Результат       - Результат декодирования (успешно или нет)
//       EPC             - Значение EPC в виде HEX строки
//       EPC_BIN         - Значение EPC в виде бинарной строки
//       Формат          - Распознанный формат данных SGTIN-96 или SGTIN-198  
//       GTIN            - GTIN 
//       СерийныйНомер   - Серийный номер SGTIN 
//       ПрефиксКомпании - Префикс компании
//       URI             - EPC Tag URI
//       
Функция ПолучитьСтруктуруЗаписиEPC() Экспорт
	
	СтруктураЗаписиEPC = Новый Структура;
	
	СтруктураЗаписиEPC.Вставить("Результат", Ложь); // Результат декодирования (успешно или нет)
	СтруктураЗаписиEPC.Вставить("EPC");              // Значение EPC в виде HEX строки
	СтруктураЗаписиEPC.Вставить("EPC_BIN");          // Значение EPC в виде бинарной строки
	СтруктураЗаписиEPC.Вставить("Формат");           // Распознанный формат данных SGTIN-96 или SGTIN-198  
	СтруктураЗаписиEPC.Вставить("GTIN");             // GTIN 
	СтруктураЗаписиEPC.Вставить("СерийныйНомер");    // Серийный номер SGTIN 
	СтруктураЗаписиEPC.Вставить("ПрефиксКомпании");  // Префикс компании
	СтруктураЗаписиEPC.Вставить("URI");              // EPC Tag URI
	
	Возврат СтруктураЗаписиEPC;
	
КонецФункции

// Расчет контрольной цифры для GTIN-14. 
//
// Параметры:
//  GTIN - Текстовая строка с GTIN-14. Может содержать числа от 0 до 9. 
// 
// Возвращаемое значение:
//   - Контрольный символ (число) рассчитанный по алгоритму для GTIN.
//
Функция РассчитатьКонтрольныйСимволGTIN14(Знач GTIN) Экспорт
	
	Сумма = 0;
	Коэффициент = 3;
	
	Для Сч = 1 По 13 Цикл
		ВремКодСимвола = КодСимвола(GTIN, Сч);
		Сумма  = Сумма + Коэффициент * (ВремКодСимвола - 48);
		Коэффициент = 4 - Коэффициент;
	КонецЦикла;
	Сумма = (10 - Сумма % 10) % 10;
	КонтрольныйСимвол = Символ(Сумма + 48);
	
	Возврат КонтрольныйСимвол;
	
КонецФункции

Функция ТребуетсяЗакрытиеСмены(СтатусСмены) Экспорт
	
	Если СтатусСмены = 0 или СтатусСмены = 1 Тогда // неопределено или закрыта
		Возврат Ложь;
	ИначеЕсли СтатусСмены = 2 или СтатусСмены = 3 Тогда // открыта или истекла
		Возврат Истина;
	Иначе
		ТекстОшибки = НСтр("ru = 'Неизвестный статус смены'");
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
КонецФункции

