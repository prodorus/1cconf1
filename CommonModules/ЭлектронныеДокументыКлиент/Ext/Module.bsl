////////////////////////////////////////////////////////////////////////////////
// ЭлектронныеДокументыКлиент: механизм обмена электронными документами.
//
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Показывает оповещение пользователю о наличии новых документов в сервисе 1С-ЭДО
//
Процедура ОповеститьОНовыхДокументахЭДО() Экспорт
	
	НавигационнаяСсылка = НавигационнаяСсылкаТекущиеДелаЭДО();
		ЗаголовокОповещения = НСтр("ru ='Сервис ЭДО'");
		ТекстОповещения = НСтр("ru = 'Получить новые документы'");
		
	ПоказатьОповещениеПользователя(ЗаголовокОповещения,
			НавигационнаяСсылка,
			ТекстОповещения,
			БиблиотекаКартинок.ЭмблемаСервиса1СЭДО)
	
КонецПроцедуры
////////////////////////////////////////////////////////////////////////////////
// ЭлектронныеДокументыКлиент: механизм обмена электронными документами.
//
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

////////////////////////////////////////////////////////////////////////////////
// Работа с электронными документами

// Процедура открывает форму администрирования обмена электронными документами.
//
// Параметры:
//  ПараметрКоманды - ссылкаНаОбъект - ссылка на объект ИБ, электронные документы которого надо отправить,
//  ПараметрыОткрытия - структура, дополнительные параметры просмотра.
//
Процедура ОткрытьФормуОбменаЭлектроннымиДокументами(ПараметрКоманды, ПараметрыВыполненияКоманды) Экспорт
	
	//ИмяФормы = "ОбменЭлектроннымиДокументами";
	//
	//ПараметрыФормы = Новый Структура("ТекущийРаздел", ИмяФормы);
	//
	//ОткрытьФорму(
	//	"Обработка.ПанельАдминистрированияЭД.Форма.ОбменЭлектроннымиДокументами",
	//	ПараметрыФормы,
	//	ПараметрыВыполненияКоманды.Источник,
	//	ПараметрыВыполненияКоманды.Уникальность,
	//	ПараметрыВыполненияКоманды.Источник);
	
КонецПроцедуры

// Открывает форму со списком электронных документов для данного владельца.
//
// Параметры:
//  СсылкаНаОбъект - ссылка на объект ИБ, электронные документы которого надо увидеть.
//  ПараметрыОткрытия - структура, дополнительные параметры просмотра списка электронных документов.
//
Процедура ОткрытьСписокЭД(СсылкаНаОбъект, ПараметрыОткрытия = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(СсылкаНаОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭлектронныеДокументыСлужебныйВызовСервера.ЕстьДОПоДокументу(СсылкаНаОбъект) Тогда
		
		ЭлектронныеДокументыСлужебныйКлиент.ОткрытьСписокЭД(СсылкаНаОбъект, ПараметрыОткрытия);
	Иначе
		
		ОбработкаНавигационнойСсылкиВФормеОбъектаИБ(СсылкаНаОбъект);
	КонецЕсли;
	
КонецПроцедуры

// Перезаполняет документ ИБ на основании актуального ЭД.
//
// Параметры:
//  ПараметрКоманды - Массив, Ссылка - объекты информационной базы.
//  Источник - УправляемаяФорма - форма объекта.
//  СопоставлениеУжеВыполнено - Булево - если Истина, то сопоставление уже выполнялось;
//  ЭД - ДокуменСсылка.ВходящийЭлектронныйДокумент - электронный документ, номенклатура которого сопоставляется.
//  СпособОбработки - Строка - способ обработки входящего электронного документа.
//
Процедура ПерезаполнитьДокумент(ПараметрКоманды, Источник = Неопределено, СопоставлениеУжеВыполнено = Ложь, ЭД = Неопределено, СпособОбработки = "") Экспорт
	
	ОчиститьСообщения();
	
	МассивСсылок = ЭлектронныеДокументыСлужебныйКлиент.МассивПараметров(ПараметрКоманды);
	Если МассивСсылок = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СопоставлятьНоменклатуруПередЗаполнениемДокумента = Ложь;
	ЭлектронныеДокументыКлиентПереопределяемый.СопоставлятьНоменклатуруПередЗаполнениемДокумента(СопоставлятьНоменклатуруПередЗаполнениемДокумента);
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("ЭД", ЭД);
	ПараметрыЗаполнения.Вставить("МассивСсылок", МассивСсылок);
	ПараметрыЗаполнения.Вставить("СпособОбработки", СпособОбработки);
	ПараметрыЗаполнения.Вставить("СопоставлениеУжеВыполнено", СопоставлениеУжеВыполнено);
	ПараметрыЗаполнения.Вставить("СопоставлятьНоменклатуруПередЗаполнениемДокумента", СопоставлятьНоменклатуруПередЗаполнениемДокумента);
	
	Результат = ЭлектронныеДокументыСлужебныйВызовСервера.ПерезаполнитьДокумент(ПараметрыЗаполнения);
	
	Если Результат.Отказ Тогда
		
		Если Результат.НетПраваОбработкиЭД Тогда
			ЭлектронныеДокументыСлужебныйКлиент.СообщитьПользователюОНарушенииПравДоступа();
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	Если Результат.СопоставитьНоменклатуру Тогда
		
		ПараметрыСопоставления = Результат.ПараметрыСопоставления;
		ПараметрыСопоставления.ПараметрыОткрытияФормы.Вставить("СпособОбработки", СпособОбработки);
		
		Если Результат.МассивДокументов.Количество() = 0 Тогда
			ОткрытьФорму(ПараметрыСопоставления.ИмяФормы,ПараметрыСопоставления.ПараметрыОткрытияФормы, Источник);
			Возврат;
		Иначе
			ОткрытьФорму(ПараметрыСопоставления.ИмяФормы, ПараметрыСопоставления.ПараметрыОткрытияФормы);
		КонецЕсли;
		
	КонецЕсли;
	
	Если Результат.МассивДокументов.Количество() > 0 Тогда
		
		Оповестить("ОбновитьДокументИБПослеЗаполнения", Результат.МассивДокументов);
		
		Если Результат.МассивДокументов.Количество() = 1 Тогда
			ТекстСостоянияВывод = НСтр("ru = 'Документ перезаполнен.'");
		Иначе
			ТекстСостоянияВывод = НСтр("ru = 'Документы перезаполнены (%1).'");
			ТекстСостоянияВывод = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСостоянияВывод, 
				Результат.МассивДокументов.Количество());
		КонецЕсли;
		ТекстЗаголовка = НСтр("ru = 'Обмен электронными документами'");
		ПоказатьОповещениеПользователя(ТекстЗаголовка, , ТекстСостоянияВывод);
		
	КонецЕсли;
	
КонецПроцедуры

// Открывает актуальный ЭД по документу ИБ
//
// Параметры:
//  ПараметрКоманды - ссылка на документ ИБ;
//  Источник - управляемая форма;
//  ПараметрыОткрытия - структура, дополнительные параметры просмотра.
//
Процедура ОткрытьАктуальныйЭД(ПараметрКоманды, Источник = Неопределено, ПараметрыОткрытия = Неопределено) Экспорт
	
	ОчиститьСообщения();
	
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		Если НЕ ЭлектронныеДокументыСлужебныйВызовСервера.ЕстьПравоЧтенияЭД() Тогда
			Возврат;
		КонецЕсли;
	#КонецЕсли
	
	МассивСсылок = ЭлектронныеДокументыСлужебныйКлиент.ПолучитьМассивПараметров(ПараметрКоманды);
	Если МассивСсылок = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СоответствиеВладельцевИЭД = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьСоответствиеВладельцевИЭД(МассивСсылок);
	Для Каждого ТекЭл Из МассивСсылок Цикл
		
		СсылкаНаЭД = СоответствиеВладельцевИЭД.Получить(ТекЭл);
		Если ЗначениеЗаполнено(СсылкаНаЭД) Тогда
			Если ТипЗнч(ПараметрыОткрытия) = Тип("ПараметрыВыполненияКоманды") Тогда
				
				ЭлектронныеДокументыСлужебныйКлиент.ОткрытьЭДДляПросмотра(СсылкаНаЭД,
																		  ПараметрыОткрытия,
																		  ПараметрыОткрытия.Источник,
																		  Истина);
			Иначе
				ЭлектронныеДокументыСлужебныйКлиент.ОткрытьЭДДляПросмотра(СсылкаНаЭД, , Источник, Истина);
			КонецЕсли;
			
		Иначе
			ТекстШаблона = НСтр("ru = '%1. Актуальный электронный документ не найден!'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстШаблона, ТекЭл);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Открывает форму с деревом электронных документов для данного владельца.
//
// Параметры:
//  СсылкаНаОбъект - ссылка на объект ИБ, электронные документы которого надо увидеть,
//  ПараметрыОткрытия - структура, дополнительные параметры просмотра дерева электронных документов.
//  ПроверятьСоглашение - Булево - используется для исключения лишнего серверного вызова,
//    при вызове данной процедуры из процедуры ОткрытьСписокЭД(...), т.к. данная проверка там уже выполнялась.
//
Процедура ОткрытьДеревоЭД(СсылкаНаОбъект, ПараметрыОткрытия = Неопределено, ЭД = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(СсылкаНаОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭлектронныеДокументыСлужебныйВызовСервера.ЕстьДОПоДокументу(СсылкаНаОбъект)
		ИЛИ ЭлектронныеДокументыСлужебныйВызовСервера.ОпределитьДействующуюНастройкуЭДО(СсылкаНаОбъект) Тогда
		
		ЭлектронныеДокументыСлужебныйКлиент.ОткрытьДеревоЭД(СсылкаНаОбъект, ПараметрыОткрытия, ЭД);
	Иначе
		
		ОбработкаНавигационнойСсылкиВФормеОбъектаИБ(СсылкаНаОбъект);
	КонецЕсли;
	
КонецПроцедуры

// Процедура обрабатывает нажатие на рекламную ссылку на форме объекта.
//
// Параметры:
//  СсылкаНаОбъект - СсылкаНаОбъект - ссылка на объект ИБ, на форме которого была активирована гиперссылка с рекламным текстом.
//
Процедура ОбработкаНавигационнойСсылкиВФормеОбъектаИБ(СсылкаНаОбъект) Экспорт
	
	Если ЭлектронныеДокументыСлужебныйВызовСервера.ЕстьПравоНастройкиЭДО(Ложь) = Ложь Тогда
		ТекстСообщения = НСтр("ru = 'Недостаточно прав для настройки ЭДО с контрагентом.
									|Обратитесь к администратору.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ПараметрыЭД = Неопределено;
	ЭлектронныеДокументыСлужебныйВызовСервера.ОпределитьДействующуюНастройкуЭДО(СсылкаНаОбъект, ПараметрыЭД);
	
	Если ПараметрыЭД.Свойство("НастройкаЭДО") И ЗначениеЗаполнено(ПараметрыЭД.НастройкаЭДО) Тогда
		
		Если ПараметрыЭД.Свойство("СтатусПодключения") И ЗначениеЗаполнено(ПараметрыЭД.СтатусПодключения)
			И ПараметрыЭД.СтатусПодключения = ПредопределенноеЗначение("Перечисление.СтатусыУчастниковОбменаЭД.ТребуетсяПригласить") Тогда
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("НастройкаЭДО", ПараметрыЭД.НастройкаЭДО);
			ПараметрыФормы.Вставить("ФормаОткрытаИзНастройкиЭДО", Ложь);
			ОткрытьФорму("Справочник.СоглашенияОбИспользованииЭД.Форма.ФормаПриглашения", ПараметрыФормы);
		Иначе
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("Ключ", ПараметрыЭД.НастройкаЭДО);
			
			ОткрытьФорму("Справочник.СоглашенияОбИспользованииЭД.Форма.ФормаЭлемента", ПараметрыФормы, , СсылкаНаОбъект.УникальныйИдентификатор());
			
		КонецЕсли;
	Иначе
		ПредложениеОформитьЗаявлениеНаПодключение(ПараметрыЭД.Контрагент, ПараметрыЭД.Организация);
	КонецЕсли;
	
КонецПроцедуры

// Открывает рекламную форму ЭДО.
//
Процедура ПредложениеОформитьЗаявлениеНаПодключение(Контрагент = Неопределено, Организация = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	ПараметрыОткрытия = Новый Структура();
	ПараметрыОткрытия.Вставить("Контрагент", Контрагент);
	ПараметрыОткрытия.Вставить("Организация", Организация);
	ПараметрыОткрытия.Вставить("ДополнительныеПараметры", ДополнительныеПараметры);
	
	ОткрытьФорму("ОбщаяФорма.ПредложениеОформитьЗаявлениеНаПодключение", ПараметрыОткрытия);
	
КонецПроцедуры

// Процедура создает, подписывает и отправляет электронный документ.
//
// Параметры:
//  ПараметрКоманды - СсылкаНаОбъект - ссылка на объект ИБ, электронные документы которого надо отправить,
//  ЭД - электронный документ, который надо подписать, отправить.
//
Процедура СформироватьПодписатьОтправитьЭД(ПараметрКоманды, ЭД = Неопределено) Экспорт
	
	МассивСсылок = ЭлектронныеДокументыСлужебныйКлиент.ПолучитьМассивПараметров(ПараметрКоманды);
	Если МассивСсылок = Неопределено Тогда
		Если ЭД = Неопределено Тогда
			Возврат;
		Иначе
			МассивСсылок = Новый Массив;
		КонецЕсли;
	КонецЕсли;
	
	ЭлектронныеДокументыСлужебныйКлиент.ОбработатьЭД(МассивСсылок, "СформироватьУтвердитьПодписатьОтправить", , ЭД);
	
КонецПроцедуры

// Процедура создает новый электронный документ.
//
// Параметры:
//  ПараметрКоманды - СсылкаНаОбъект - ссылка на объект ИБ, электронные документы которого надо отправить,
//
Процедура СформироватьНовыйЭД(ПараметрКоманды, Показывать = Истина) Экспорт
	
	МассивСсылок = ЭлектронныеДокументыСлужебныйКлиент.ПолучитьМассивПараметров(ПараметрКоманды);
	Если МассивСсылок = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если Показывать Тогда
		ЭлектронныеДокументыСлужебныйКлиент.ОбработатьЭД(МассивСсылок, "СформироватьПоказать");
	Иначе
		ЭлектронныеДокументыСлужебныйКлиент.ОбработатьЭД(МассивСсылок, "Сформировать");
	КонецЕсли;
	
КонецПроцедуры

// Запускает мастер-помощник по подключению организации к прямому обмену с контрагентами.
//
Процедура ПомощникПодключенияКПрямомуОбмену() Экспорт
	
	СпособыОЭД = Новый Массив;
	СпособыОЭД.Добавить(ПредопределенноеЗначение("Перечисление.СпособыОбменаЭД.ЧерезКаталог"));
	СпособыОЭД.Добавить(ПредопределенноеЗначение("Перечисление.СпособыОбменаЭД.ЧерезЭлектроннуюПочту"));
	СпособыОЭД.Добавить(ПредопределенноеЗначение("Перечисление.СпособыОбменаЭД.ЧерезFTP"));
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СпособыОбменаЭД", СпособыОЭД);
	ОткрытьФорму("Справочник.ПрофилиНастроекЭДО.Форма.ПомощникПодключенияЭДО", ПараметрыФормы);
	
КонецПроцедуры

// Запускает мастер-помощник по подключению организации к сервису 1С-Такском.
//
Процедура ПомощникПодключенияКСервису1СТакском() Экспорт
	
	СпособыОЭД = Новый Массив;
	СпособыОЭД.Добавить(ПредопределенноеЗначение("Перечисление.СпособыОбменаЭД.ЧерезОператораЭДОТакском"));
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СпособыОбменаЭД", СпособыОЭД);
	ОткрытьФорму("Справочник.ПрофилиНастроекЭДО.Форма.ПомощникПодключенияЭДО", ПараметрыФормы);
	
КонецПроцедуры

// Запускает мастер-помощник по подключению организации к сервису 1С-ЭДО.
//
Процедура ПомощникПодключенияКСервису1СЭДО() Экспорт
	
	ПараметрыАутентификации = ЭлектронныеДокументыСлужебныйКлиент.АутентификацияНаСайте(Истина);
	Если ПараметрыАутентификации <> Неопределено Тогда
		
		ПараметрыФормы = Новый Структура;
		СпособыОЭД = Новый Массив;
		СпособыОЭД.Добавить(ПредопределенноеЗначение("Перечисление.СпособыОбменаЭД.ЧерезСервис1СЭДО"));
		ПараметрыФормы.Вставить("СпособыОбменаЭД", СпособыОЭД);
		ОткрытьФорму("Справочник.ПрофилиНастроекЭДО.Форма.ПомощникПодключенияЭДО", ПараметрыФормы);
	КонецЕсли;
	
КонецПроцедуры

// Запускает обработку "Текущие дела по ЭДО".
//
Процедура ОткрытьТекущиеДелаЭДО() Экспорт
	
	ОткрытьФорму("Обработка.ТекущиеДелаПоЭДО.Форма");
	
КонецПроцедуры

// Процедура создает новый электронный документ.
//
// Параметры:
//  ПараметрКоманды - СсылкаНаОбъект - ссылка на объект ИБ, электронные документы которого надо отправить,
//
Процедура БыстрыйОбменСформироватьНовыйЭД(ПараметрКоманды) Экспорт
	
	МассивСсылок = ЭлектронныеДокументыСлужебныйКлиент.ПолучитьМассивПараметров(ПараметрКоманды);
	Если МассивСсылок = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = Новый Структура("СтруктураЭД", МассивСсылок);
	ФормаПросмотраЭД = ОткрытьФорму("Обработка.ЭлектронныеДокументы.Форма.ФормаВыгрузкаЭДВФайл", Параметры);
	
КонецПроцедуры

// Процедура создает новый электронный каталог.
//
Процедура БыстрыйОбменСформироватьНовыйЭДКаталог() Экспорт
	
	
	НазваниеСправочникаОрганизации = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьИмяПрикладногоСправочника("Организации");
	Если Не ЗначениеЗаполнено(НазваниеСправочникаОрганизации) Тогда
		НазваниеСправочникаОрганизации = "Организации";
	КонецЕсли;

	Организация = ОткрытьФормуМодально("Справочник." + НазваниеСправочникаОрганизации + ".ФормаВыбора");
	Если Не ЗначениеЗаполнено(Организация) Тогда
		Возврат;
	КонецЕсли;
	
	АдресВоВременномХранилище = Неопределено;
	ЭлектронныеДокументыКлиентПереопределяемый.ПоместитьКаталогТоваровВоВременноеХранилище(
		АдресВоВременномХранилище, Новый УникальныйИдентификатор());
	
	Если АдресВоВременномХранилище = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураКаталога = Новый Структура;
	СтруктураКаталога.Вставить("Организация", Организация);
	СтруктураКаталога.Вставить("ТоварыКаталога", АдресВоВременномХранилище);
	
	Параметры = Новый Структура("СтруктураКаталога", СтруктураКаталога);
	ОткрытьФорму("Обработка.ЭлектронныеДокументы.Форма.ФормаВыгрузкаЭДВФайл", Параметры);
	
КонецПроцедуры

// Процедура отправляет повторно электронный документ.
//
// Параметры:
//  ПараметрКоманды - СсылкаНаОбъект - ссылка на объект ИБ, электронные документы которого надо отправить,
//  ЭД - электронный документ, который надо подписать, отправить.
//
Процедура ОтправитьПовторноЭД(ПараметрКоманды, ЭД = Неопределено) Экспорт
	
	МассивСсылок = ЭлектронныеДокументыСлужебныйКлиент.ПолучитьМассивПараметров(ПараметрКоманды);
	Если МассивСсылок = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭлектронныеДокументыСлужебныйКлиент.ОбработатьЭД(МассивСсылок, "ОтправитьПовторно", , ЭД);
	
КонецПроцедуры

// Проверяет на модифицированность объект.
//
// Параметры:
//  Объект - объекта, модифицированность которого надо проверить;
//  Форма - форма объекта, модифицированность которого надо проверить.
//
// Возвращаемое значение:
//  Результат - Булево - результат проверки модифицированности формы объекта.
//
Функция ОбъектМодифицирован(Объект, Форма) Экспорт
	
	Результат = Ложь;
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		РезультатПроверки = Неопределено;
		ЭлектронныеДокументыКлиентПереопределяемый.ОбъектМодифицирован(Объект, Форма, РезультатПроверки);
		Если РезультатПроверки = Неопределено Тогда
			Результат = Истина;
			Если Форма.Модифицированность ИЛИ НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
				
				Проведен    = Метаданные.Документы.Содержит(Объект.Метаданные()) И Объект.Проведен;
				СтрПроведен = ?(Проведен, "записать и провести.
				|Записать и провести?", "записать.
				|Записать?");
				
				ШаблонСообщения = НСтр("ru = 'Документ изменен. Для формирования электронного документа его необходимо %1'");
				ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, СтрПроведен);
				
				Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ОКОтмена, , КодВозвратаДиалога.Отмена, Нстр("ru = 'Документ изменен.'"));
				Если Ответ = КодВозвратаДиалога.ОК Тогда
					Если Проведен Тогда
						Попытка
							Отказ = Не Форма.ЗаписатьВФорме(РежимЗаписиДокумента.Проведение);
						Исключение
							Предупреждение(Нстр("ru = 'Операция не выполнена!'"));
							Отказ = Истина;
						КонецПопытки;
					Иначе
						Отказ = Не Форма.ЗаписатьВФорме();
					КонецЕсли;
					
					Если Не Отказ Тогда
						Результат = Ложь;
					КонецЕсли;
				КонецЕсли;
			Иначе
				Результат = Ложь;
			КонецЕсли;
		Иначе
			Результат = РезультатПроверки;
		КонецЕсли;
	#КонецЕсли
	
	Возврат Результат;
	
КонецФункции

// Отправка и получение электронных документов одной командой.
//
//
Процедура ОтправитьПолучитьЭлектронныеДокументы() Экспорт
	
	ЭлектронныеДокументыСлужебныйКлиент.ОтправитьПолучитьЭлектронныеДокументы();
	
КонецПроцедуры

// Загружает файл электронного документа в документ ИБ.
//
// Параметры:
//  СсылкаНаДокумент - Ссылка на объект ИБ, данные которого необходимо перезаполнить.
//
Процедура БыстрыйОбменЗагрузитьЭД(СсылкаНаДокумент = Неопределено) Экспорт
	
	Файл = Неопределено;
	АдресВХранилище = Неопределено;
	УникальныйИдентификатор = Новый УникальныйИдентификатор;
	
	Если ПоместитьФайл(АдресВХранилище, , Файл, Истина, УникальныйИдентификатор) Тогда
		
		Расширение = Прав(Файл, 3);
		
		Если ВРег(Расширение) <> ВРег("zip")
			И ВРег(Расширение) <> ВРег("xml") Тогда
			ТекстСообщения = НСтр("ru = 'Некорректный формат файла.
									|Выберите файл с расширением ""zip"" или ""xml"".'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Возврат;
		КонецЕсли;
		
		СтруктураОбмена = Новый Структура("НаправлениеЭД, УникальныйИдентификатор, АдресХранилища, СсылкаНаДокумент, ИмяФайла, ФайлАрхива",
			ПредопределенноеЗначение("Перечисление.НаправленияЭД.Входящий"), УникальныйИдентификатор, АдресВХранилище,
			СсылкаНаДокумент, Файл, ВРег(Расширение) = Врег("zip"));
			
		Параметры = Новый Структура("СтруктураЭД", СтруктураОбмена);
		ОткрытьФорму("Обработка.ЭлектронныеДокументы.Форма.ФормаЗагрузкиПросмотраЭД", Параметры, ,
			СтруктураОбмена.УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

// Загружает файл электронного документа в данные ИБ, используется для вывода команды в интерфейсы.
//
Процедура БыстрыйОбменЗагрузитьЭДИзФайла() Экспорт
	
	БыстрыйОбменЗагрузитьЭД();
	
КонецПроцедуры

// Процедура принудительно закрывает электронный документооборот для массива ссылок на документы.
//
// Параметры:
//   МассивВладельцевЭД - Массив - содержит ссылки на документы ИБ, для которых требуется закрыть
//      электронный документооборот.
//
Процедура ЗакрытьПринудительноЭДО(МассивВладельцевЭД) Экспорт
	
	МассивСсылок = ЭлектронныеДокументыСлужебныйКлиент.ПолучитьМассивПараметров(МассивВладельцевЭД);
	Если МассивСсылок = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПричинаЗакрытия = "";
	УточнениеВведено = ВвестиСтроку(ПричинаЗакрытия, НСтр("ru = 'Укажите причину закрытия документооборота'"), , Истина);
	
	Если УточнениеВведено И ЗначениеЗаполнено(ПричинаЗакрытия) Тогда
		КоличествоОбработанныхЭД = 0;
		ЭлектронныеДокументыСлужебныйВызовСервера.ЗакрытьДокументыПринудительно(МассивСсылок, ПричинаЗакрытия, КоличествоОбработанныхЭД);
		
		ТекстОповещения = НСтр("ru = 'Изменено состояние ЭД документов на ""Закрыт принудительно"": (%1)'");
		ТекстОповещения = СтрЗаменить(ТекстОповещения, "%1", КоличествоОбработанныхЭД);
		ПоказатьОповещениеПользователя(НСтр("ru = 'Обработка документов'"), , ТекстОповещения);
		Если КоличествоОбработанныхЭД > 0 Тогда
			Оповестить("ОбновитьСостояниеЭД");
		КонецЕсли;
	Иначе
		ТекстСообщения = НСтр("ru = 'Для закрытия документооборота по выбранным ЭД необходимо указать причину закрытия!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

// Открывается форма списка только с закладкой Настройки ЭДО с контрагентами.
//
Процедура ОткрытьФормуНастроекЭДОСКонтрагентами() Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("НастройкиЭДОСКонтрагентами", Истина);
	ОткрытьФорму("Справочник.СоглашенияОбИспользованииЭД.Форма.ФормаСписка", ПараметрыФормы);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Выбор электронных документов для передачи в ФНС

// Получает документы информационной базы по заданным критериям отбора.
// Процедура предназначена для использования совместно с библиотекой "Регламентированная отчетность".
//
// Параметры:
//  СтруктураОтбора - структура, параметры отбора для формы выбора документов ИБ;
//
Процедура ПолучитьСвойстваДокументовИБДляПередачиФНС(СтруктураОтбора = Неопределено) Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВерсияВызова", 3);
	
	Если СтруктураОтбора <> Неопределено Тогда
		Если СтруктураОтбора.Свойство("ВидДокумента") Тогда
			ПараметрыФормы.Вставить("ВидДокумента", СтруктураОтбора.ВидДокумента);
		КонецЕсли;
		
		Если СтруктураОтбора.Свойство("Организация") Тогда
			ПараметрыФормы.Вставить("Организация", СтруктураОтбора.Организация);
		КонецЕсли;
		
		Если СтруктураОтбора.Свойство("Контрагент") Тогда
			ПараметрыФормы.Вставить("Контрагент", СтруктураОтбора.Контрагент);
		КонецЕсли;
	КонецЕсли;
	ОткрытьФорму("Обработка.ЭлектронныеДокументы.Форма.ФормаВыбораЭДДляПередачиФНС", ПараметрыФормы);
	
КонецПроцедуры

// Получает документы информационной базы по заданным критериям отбора.
// Функция предназначена для использования совместно с библиотекой "Регламентированная отчетность".
//
// Параметры:
//  СтруктураОтбора - структура, параметры отбора для формы выбора документов ИБ;
//  МножественныйВыбор - булево, свойство формы выбора.
//
Функция ПолучитьДокументыИБДляПередачиФНС(СтруктураОтбора, МножественныйВыбор) Экспорт
	
	МассивДокументовИБ = Новый Массив;

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВерсияВызова", 2);
	ПараметрыФормы.Вставить("МножественныйВыбор", МножественныйВыбор);
	
	Если СтруктураОтбора.Свойство("ВидДокумента") Тогда
		ПараметрыФормы.Вставить("ВидДокумента", СтруктураОтбора.ВидДокумента);
	КонецЕсли;
	
	Если СтруктураОтбора.Свойство("Организация") Тогда
		ПараметрыФормы.Вставить("Организация", СтруктураОтбора.Организация);
	КонецЕсли;
	
	Если СтруктураОтбора.Свойство("Контрагент") Тогда
		ПараметрыФормы.Вставить("Контрагент", СтруктураОтбора.Контрагент);
	КонецЕсли;
	МассивДокументовИБ = ОткрытьФормуМодально("Обработка.ЭлектронныеДокументы.Форма.ФормаВыбораЭДДляПередачиФНС", ПараметрыФормы);
	
	Возврат МассивДокументовИБ;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Команды работы с файлами

// Сохраняет текущую версию файла в выбранный каталог на жестком или сетевом диске.
Процедура СохранитьКак(ДанныеФайла) Экспорт
	
	ЭлектронныеДокументыСлужебныйКлиент.СохранитьКак(ДанныеФайла);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Прямой обмен с банком

// Отправляет запрос выписки в банк, а после получения выписки вызывает оповещение о выборе
// для формы или элемента формы, указанного в параметре Владелец
//
// Параметры:
//  СоглашениеЭД - СправочникСсылка.СоглашениеОбИспользованииЭД, текущее соглашение;
//  ДатаНачала - дата, начало периода запроса
//  ДатаОкончания - дата, окончание периода запроса
//  Владелец - Форма или элемент формы - получатель оповещения о выборе элемента - выписки банка
//  НомерСчета - Строка, номер банковского счета организации. Если не указан, то запрос по всем счетам;
//
Процедура ПолучитьВыпискуБанка(СоглашениеЭД, ДатаНачала, ДатаОкончания, Владелец, НомерСчета = Неопределено) Экспорт
	
	Параметры = Новый Структура;
	
	Параметры.Вставить("СоглашениеЭД",  СоглашениеЭД);
	Параметры.Вставить("НомерСчета",    НомерСчета);
	Параметры.Вставить("ДатаНачала",    ДатаНачала);
	Параметры.Вставить("ДатаОкончания", ДатаОкончания);
	
	ПараметрыАвторизации = Новый Структура;
	РеквизитыСоглашения = ЭлектронныеДокументыСлужебныйВызовСервера.РеквизитыСоглашенияЭД(СоглашениеЭД);
	Если Не РеквизитыСоглашения.ИспользуетсяКриптография Тогда
		Если ЭлектронныеДокументыСлужебныйКлиент.ПолученыДанныеАвторизации(СоглашениеЭД, ПараметрыАвторизации) Тогда
			Параметры.Вставить("Пользователь", ПараметрыАвторизации.Пользователь);
			Параметры.Вставить("Пароль", ПараметрыАвторизации.Пароль);
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ОткрытьФорму("Обработка.ОбменЭлектроннымиДокументамиСБанком.Форма.ЗапросВыписки", Параметры, Владелец);
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// Обработчики событий 

// Вызывается из обработчика события "ПриОткртыиии" формы списка и формы документа.
// Параметры:
//  Форма	 -  УправляемаФорма - Форма документа или форма списков документов
//
Процедура ПриОткрытии(Форма) Экспорт
	
	Если ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьЗначениеФункциональнойОпции("ИспользоватьОбменЭД") Тогда
		Форма.ПодключитьОбработчикОжидания("Подключаемый_ОбработчикОжиданияЭДО", ВремяОжиданияЭДО(), Истина);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события "ОбработкаОповещения" формы документа.
//
// Параметры:
//  ИмяСобытия - Строка - Имя события.
//  Параметр - Параметр сообщения. Могут быть переданы любые необходимые данные. 
//  Источник - Источник события. Например, в качестве источника может быть указана другая форма. 
//  ПараметрыОповещения - Структура - см. "ЭлектронныеДокументыКлиент.ПараметрыОповещенияЭДО_ФормаДокумента".
//
Процедура ОбработкаОповещения_ФормаДокумента(ИмяСобытия, Параметр, Источник, ПараметрыОповещения) Экспорт
	
	Если ИмяСобытия = "ОбновитьСостояниеЭД" Тогда
		
		ДекорацияСостояниеЭДО = ПараметрыОповещения.ДекорацияСостояниеЭДО;
		ДокументСсылка = ПараметрыОповещения.ДокументСсылка;
		
		ЭлектронныеДокументыКлиентСервер.ЗаполнитьСостояниеЭДО(ДокументСсылка, ДекорацияСостояниеЭДО);
		
	ИначеЕсли ИмяСобытия = "ОбновитьОСобытияхЭДО" Тогда
		
		Форма = ПараметрыОповещения.Форма;
		ПодменюЭДО = ПараметрыОповещения.ПодменюЭДО;
		ОбновитьПиктограммуОповещенияЭДО(Форма, ПодменюЭДО);
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события "ОбработкаОповещения" формы списка документов.
//
// Параметры:
//  ИмяСобытия - Строка - Имя события.
//  Параметр - Параметр сообщения. Могут быть переданы любые необходимые данные. 
//  Источник - Источник события. Например, в качестве источника может быть указана другая форма. 
//  ПараметрыОповещения - Структура - см. "ЭлектронныеДокументыКлиент.ПараметрыОповещенияЭДО_ФормаСписка".
//
Процедура ОбработкаОповещения_ФормаСписка(ИмяСобытия, Параметр, Источник, ПараметрыОповещения) Экспорт
	
	Если ИмяСобытия = "ОбновитьСостояниеЭД" Тогда
		
		Форма = ПараметрыОповещения.Форма;
		ИмяДинамическогоСписка = ПараметрыОповещения.ИмяДинамическогоСписка;
		
		ЭтоУправляемаяФорма = (ТипЗнч(Форма) = Тип("УправляемаяФорма"));
		
		МассивСписков = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИмяДинамическогоСписка, ",", Ложь);
		Для Каждого ИмяРеквизита Из МассивСписков Цикл
			Если ЭтоУправляемаяФорма Тогда
				Форма.Элементы[СокрЛП(ИмяРеквизита)].Обновить();
			Иначе
				Форма[СокрЛП(ИмяРеквизита)].Обновить();
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли ИмяСобытия = "ОбновитьОСобытияхЭДО" Тогда
		
		Форма = ПараметрыОповещения.Форма;
		ПодменюЭДО = ПараметрыОповещения.ПодменюЭДО;
		ОбновитьПиктограммуОповещенияЭДО(Форма, ПодменюЭДО);
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращаемое значение:
//  Структура - параметры, которые нужно передавать в метод "ЭлектронныеДокументыКлиент.ОбработчикОжиданияЭДО".
//    * ПодменюЭДО - ЭлементФормы, массив элементов формы - Элемент формы подменю ЭДО.
//                   Параметр заполняется если подменю ЭДО не является группой команд "ЭД".
//
Функция ПараметрыОбработчикаОжиданияЭДО() Экспорт
	
	ПараметрыОбработчика = Новый Структура("ПодменюЭДО");
	
	Возврат ПараметрыОбработчика;

КонецФункции

// Обработчик ожидания событий ЭДО
//
Процедура ОбработчикОжиданияЭДО(Форма, ПараметрыОбработчикаОжиданияЭДО = Неопределено) Экспорт
	
	Если Не ПараметрыОбработчикаОжиданияЭДО = Неопределено Тогда
		ПодменюЭДО = ПараметрыОбработчикаОжиданияЭДО.ПодменюЭДО;
	КонецЕсли;
	
	Если ТипЗнч(ПодменюЭДО) = Тип("Массив") Тогда
		Для Каждого ЭлементПодменю Из ПодменюЭДО Цикл
			ОбновитьПиктограммуОповещенияЭДО(Форма, ЭлементПодменю);
		КонецЦикла;
	Иначе
		ОбновитьПиктограммуОповещенияЭДО(Форма, ПодменюЭДО);
	КонецЕсли;
	
	Форма.ПодключитьОбработчикОжидания("Подключаемый_ОбработчикОжиданияЭДО", ВремяОжиданияЭДО(), Истина);
	
КонецПроцедуры

Процедура ОбновитьПиктограммуОповещенияЭДО(Форма, ПодменюЭДО = Неопределено) Экспорт
	
	КартинкаПодменюЭДО = ЭлектронныеДокументыСлужебныйКлиент.КартинкаОповещенияЭДО();
	ОбновитьОтображениеНовыхЭД(Форма, КартинкаПодменюЭДО, ПодменюЭДО);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Служебные процедуры и функции

Процедура ОбновитьОтображениеНовыхЭД(Форма, КартинкаЭДО, ПодменюЭДО) 
	
	Если ПодменюЭДО = Неопределено Тогда
		Если ТипЗнч(Форма) = Тип("УправляемаяФорма") Тогда
			Элементы = Форма.Элементы;
			ПодменюЭДО = ЭлектронныеДокументыКлиентСервер.ПодменюЭДО(Элементы);
		КонецЕсли;
	КонецЕсли;
	
	Если ПодменюЭДО = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ПодменюЭДО) = Тип("Массив") Тогда
		Для Каждого ЭлементМассива Из ПодменюЭДО Цикл
			ЭлектронныеДокументыКлиентСервер.ОбновитьПодменюЭДО(ЭлементМассива, КартинкаЭДО);
		КонецЦикла;
		
	Иначе
		ЭлектронныеДокументыКлиентСервер.ОбновитьПодменюЭДО(ПодменюЭДО, КартинкаЭДО);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ВремяОжиданияЭДО()
	Возврат 1800;
КонецФункции


Функция НавигационнаяСсылкаТекущиеДелаЭДО()
	
	Возврат "e1cib/app/Обработка.ТекущиеДелаПоЭДО";
	
КонецФункции

// Возвращаемое значение:
//  Структура - параметры, которые нужно передавать в метод "ЭлектронныеДокументыКлиент.ОбработкаОповещения_ФормаДокумента".
//    * Форма - Управляемая форма - форма документа.
//    * ДокументСсылка - ДокументСсылка - Ссылка на документ.
//    * ДекорацияСостояниеЭДО - Элемент формы - элемент формы "декорация", в заголовке которого будет отображаться состояние ЭДО.
//    * ПодменюЭДО - Элемент формы - Подменю команд ЭДО. Необязательный параметр. Заполняется для неуправляемых форм.
//
Функция ПараметрыОповещенияЭДО_ФормаДокумента() Экспорт
	
	ПараметрыОповещений = Новый Структура("Форма, ДокументСсылка, ДекорацияСостояниеЭДО, ПодменюЭДО");
	
	Возврат ПараметрыОповещений;
	
КонецФункции

// Возвращаемое значение:
//  Структура - параметры, которые нужно передавать в метод "ЭлектронныеДокументыКлиент.ОбработкаОповещения_ФормаДокумента".
//    * Форма - Управляемая форма - форма документа.
//    * ИмяДинамическогоСписка - Строка - Наименование дмнамического списка формы, отображабщего "СостояниеЭД".
//                               Возможно указание нескольких списков через ("СписокИсходящий, СписокВходящий").
//    * ПодменюЭДО - Элемент формы - Подменю команд ЭДО. Необязательный параметр. Заполняется для неуправляемых форм.
//
Функция ПараметрыОповещенияЭДО_ФормаСписка() Экспорт
	
	ПараметрыОповещений = Новый Структура("Форма, ИмяДинамическогоСписка, ПодменюЭДО");
	
	Возврат ПараметрыОповещений;
	
КонецФункции

