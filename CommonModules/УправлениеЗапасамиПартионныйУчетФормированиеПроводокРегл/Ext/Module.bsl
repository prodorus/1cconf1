////////////////////////////////////////////////////////////////////////////////
// ТЕХНОЛОГИЧЕСКИЕ

Функция ОтноситсяКДеятельностиЕНВДИзСтруктурыПараметров(СтруктураПараметров, Счет)
	
	Кэш = СтруктураПараметров.КэшОтноситсяКДеятельностиЕНВД;
	Результат = Кэш[Счет];
	Если Результат = Неопределено Тогда
		Результат = НалоговыйУчетУСН.ОтноситсяКДеятельностиЕНВД(Счет);
		Кэш.Вставить(Счет, Результат);
	КонецЕсли;
	Возврат Результат;
	
КонецФункции

// Процедура считывает контрагента договора по ссылке без чтения всего объекта
//
Функция ПолучитьКонтрагентаИзДоговора(ДоговорКонтрагента, СтруктураПараметров) Экспорт
	
	Если ТипЗнч(ДоговорКонтрагента) = Тип("СправочникСсылка.ДоговорыКонтрагентов")
		И ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		
			СтруктураПараметров.Вставить("КонтрагентИзДоговораКонтрагента",ДоговорКонтрагента.Владелец);
			Возврат СтруктураПараметров.КонтрагентИзДоговораКонтрагента;
			
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Процедура считывает контрагента из документа по ссылке без чтения всего объекта
//
Функция ПолучитьКонтрагентаИзДокументаОприходования(ДокументОприходования)
	
	// Получаем контрагента из документа партии
	Если ЗначениеЗаполнено(ДокументОприходования) Тогда
		
		МетаданныеДокумента = Метаданные.НайтиПоТипу(ТипЗнч(ДокументОприходования));
		
		Если МетаданныеДокумента <> Неопределено Тогда
			Если МетаданныеДокумента.Реквизиты.Найти("Контрагент")<>Неопределено Тогда
				
				Запрос = Новый Запрос("Выбрать Контрагент Из Документ."+МетаданныеДокумента.Имя+" ГДЕ Ссылка = &Ссылка");
				Запрос.УстановитьПараметр("Ссылка", ДокументОприходования);
				Выборка = Запрос.Выполнить().Выбрать();
				Если Выборка.Следующий() Тогда
					
					Возврат Выборка.Контрагент;
					
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции


// Проверяет, что счет является субсчетом
//
// Параметры:
//	Проверяемый счет, Счет-родитель, общая структура параметров.
//
// Возвращаемое значение:
//	
//
Функция СчетВИерархии(ПроверяемыйСчет, СчетРодитель, СтруктураПараметров) Экспорт
	
	Перем СоотвИерархияСчетов;
	
	Если НЕ ЗначениеЗаполнено(ПроверяемыйСчет) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// В свойстве СоотвИерархияСчетов кэшируются данные об иерархии счетов
	Если НЕ СтруктураПараметров.Свойство("СоотвИерархияСчетов", СоотвИерархияСчетов) Тогда
		СоотвИерархияСчетов = Новый Соответствие;
		СтруктураПараметров.Вставить("СоотвИерархияСчетов", СоотвИерархияСчетов);
	КонецЕсли;
	
	// Иерархия для каждого отдельного счета
	СоотвИерархия = СоотвИерархияСчетов[СчетРодитель];
	
	Если ТипЗнч(СоотвИерархия) <> Тип("Соответствие") Тогда
		СоотвИерархия = Новый Соответствие;
		
		// Определим иерархию счетов
		ИмяПланаСчетов = ПроверяемыйСчет.Метаданные().Имя;
		
		ЗапросСчета = Новый Запрос(
		"ВЫБРАТЬ
		|	ПланСчетовРегистра.Ссылка КАК Ссылка
		|ИЗ
		|	ПланСчетов."+ИмяПланаСчетов+" КАК ПланСчетовРегистра
		|
		|ГДЕ
		|	ПланСчетовРегистра.Ссылка В ИЕРАРХИИ (&Ссылка)
		|");
		
		ЗапросСчета.УстановитьПараметр("Ссылка", СчетРодитель);
		
		ВыборкаСчета = ЗапросСчета.Выполнить().Выбрать(ОбходРезультатаЗапроса.Прямой);
		
		Пока ВыборкаСчета.Следующий() Цикл
			СоотвИерархия.Вставить(ВыборкаСчета.Ссылка, ВыборкаСчета.Ссылка);
		КонецЦикла;
		
		СоотвИерархияСчетов.Вставить(СчетРодитель, СоотвИерархия);
	КонецЕсли;
	
	// Собственно проверка
	Возврат НЕ (СоотвИерархия[ПроверяемыйСчет] = Неопределено);
	
КонецФункции // СчетВИерархии()

Функция ВидСубконтоСодержитТип(СтруктураПараметров, ВидСубконто, ТипЗнчСубконто)
	
	Кэш = СтруктураПараметров.КэшПоВидамСубконто;
	КэшПоВиду = Кэш[ВидСубконто];
	Если КэшПоВиду = Неопределено Тогда
		КэшПоВиду = Новый Соответствие;
		Кэш.Вставить(ВидСубконто, КэшПоВиду);
	КонецЕсли;
	
	Результат = КэшПоВиду[ТипЗнчСубконто];
	ЕСли Результат = НЕопределено Тогда
		Результат = ВидСубконто.ВидСубконто.ТипЗначения.СодержитТип(ТипЗнчСубконто);
		КэшПоВиду.Вставить(ТипЗнчСубконто, Результат);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции//ВидСубконтоСодержитТип

Процедура ЗаполнитьСубконтоПоРеквизитам(ВидСубконто, Субконто, ЗначениеСубконто1, ЗначениеСубконто2=Неопределено, ЗначениеСубконто3=Неопределено, ЗаполнятьТолькоПустые = Ложь, СтруктураПараметров) Экспорт
	
	Если ЗаполнятьТолькоПустые Тогда // в этом режиме заполняются только пустые
		Если ЗначениеЗаполнено(Субконто[ВидСубконто.Видсубконто]) Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ТипЗнчСубконто1 = ТипЗнч(ЗначениеСубконто1);
	ТипЗнчСубконто2 = ТипЗнч(ЗначениеСубконто2);
	ТипЗнчСубконто3 = ТипЗнч(ЗначениеСубконто3);
	
	Если ЗначениеЗаполнено(ЗначениеСубконто1) И ВидСубконтоСодержитТип(СтруктураПараметров, ВидСубконто, ТипЗнчСубконто1) Тогда
				
		Субконто.Вставить(ВидСубконто.ВидСубконто, ЗначениеСубконто1);
		
	ИначеЕсли ЗначениеЗаполнено(ЗначениеСубконто2) И ВидСубконтоСодержитТип(СтруктураПараметров, ВидСубконто, ТипЗнчСубконто2) Тогда
		
		Субконто.Вставить(ВидСубконто.ВидСубконто, ЗначениеСубконто2);
		
	ИначеЕсли ЗначениеЗаполнено(ЗначениеСубконто3) И ВидСубконтоСодержитТип(СтруктураПараметров, ВидСубконто, ТипЗнчСубконто3) Тогда
		
		Субконто.Вставить(ВидСубконто.ВидСубконто, ЗначениеСубконто3);
		
	КонецЕсли;
	
КонецПроцедуры//ЗаполнитьСубконтоПоРеквизитам

Процедура ЗаполнитьСубконтоПоСписаниюТоваровРегл(Проводка, СтрокаДокумента, Движение, СтруктураПараметров, ВидУчета)
	
	Если СтрокаДокумента.ОтражатьВБухгалтерскомУчете тогда
		КорСубконто1 = СтрокаДокумента.КорСубконтоБУ1;
		КорСубконто2 = СтрокаДокумента.КорСубконтоБУ2;
		КорСубконто3 = СтрокаДокумента.КорСубконтоБУ3;		
		
		СчетТоварыПринятые    = ПланыСчетов.Хозрасчетный.ТоварыПринятыеНаКомиссию;
		
	ИначеЕсли СтрокаДокумента.ОтражатьВНалоговомУчете тогда		
		КорСубконто1 = ?(ЗначениеЗаполнено(СтрокаДокумента.КорСубконтоНУ1), СтрокаДокумента.КорСубконтоНУ1, СтрокаДокумента.КорСубконтоБУ1);
		КорСубконто2 = ?(ЗначениеЗаполнено(СтрокаДокумента.КорСубконтоНУ2), СтрокаДокумента.КорСубконтоНУ2, СтрокаДокумента.КорСубконтоБУ2);
		КорСубконто3 = ?(ЗначениеЗаполнено(СтрокаДокумента.КорСубконтоНУ3), СтрокаДокумента.КорСубконтоНУ3, СтрокаДокумента.КорСубконтоБУ3);
		
		СчетТоварыПринятые    = ПланыСчетов.Налоговый.ТоварыПринятыеНаКомиссию;
		
	КонецЕсли;	
	
	ВидСубконтоНоменклатура = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура;
	ВидСубконтоНоменклатурныеГруппы = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы;
	ВидСубконтоСклады       = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады;
	ВидСубконтоПодразделения= ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Подразделения;
	ВидСубконтоСтатьиЗатрат = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат;
	ВидСубконтоДоговоры     = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры;
	ВидСубконтоКонтрагенты  = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты;
	ВидСубконтоКомиссионеры = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Комиссионеры;
	ВидСубконтоОбъектыСтроительства = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОбъектыСтроительства;
	ВидСубконтоОсновныеСредства = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства;
	
	// Заполняем дебет:
	Если ЗначениеЗаполнено(Проводка.СчетДт) Тогда
		
		Для каждого ВидСубконто Из Проводка.СчетДт.ВидыСубконто Цикл
			
			Если Движение.КодОперации <> Перечисления.КодыОперацийПартииТоваров.ВозвратОтКомиссионера Тогда
			
				ЗаполнитьСубконтоПоРеквизитам(ВидСубконто, Проводка.СубконтоДт, КорСубконто1, КорСубконто2, КорСубконто3, , СтруктураПараметров);
				
				Если Проводка.СубконтоДт[ВидСубконто.ВидСубконто] <> Неопределено Тогда
					Продолжить;
				КонецЕсли;
			
			КонецЕсли;
			
			Если ВидСубконто.ВидСубконто = ВидСубконтоНоменклатура Тогда
				
				Проводка.СубконтоДт.Вставить(ВидСубконто.ВидСубконто, СтрокаДокумента.Номенклатура);
				
				Если ЗначениеЗаполнено(СтрокаДокумента.НоменклатураНовая) Тогда
					
					Проводка.СубконтоДт.Вставить(ВидСубконто.ВидСубконто, СтрокаДокумента.НоменклатураНовая);
					
				КонецЕсли;
				
			ИначеЕсли ВидСубконто.ВидСубконто = ВидСубконтоПодразделения Тогда
				
				Проводка.СубконтоДт.Вставить(ВидСубконто.ВидСубконто, СтрокаДокумента.ПодразделениеОрганизации);
				
			ИначеЕсли ВидСубконто.ВидСубконто = ВидСубконтоСклады Тогда
				
				Проводка.СубконтоДт.Вставить(ВидСубконто.ВидСубконто, СтрокаДокумента.Склад);
				
				Если ЗначениеЗаполнено(СтрокаДокумента.СкладПолучатель) ИЛИ СтрокаДокумента.ИзменитьСклад Тогда
					
					Проводка.СубконтоДт.Вставить(ВидСубконто.ВидСубконто, СтрокаДокумента.СкладПолучатель);
					
				КонецЕсли;
				
			ИначеЕсли ВидСубконто.ВидСубконто = ВидСубконтоСтатьиЗатрат Тогда
				
				Проводка.СубконтоДт.Вставить(ВидСубконто.ВидСубконто, СтрокаДокумента.СтатьяЗатрат);
				
			ИначеЕсли ВидСубконто.ВидСубконто = ВидСубконтоНоменклатурныеГруппы Тогда
				
				Если ЗначениеЗаполнено(СтрокаДокумента.НоменклатурнаяГруппа) Тогда
					
					Проводка.СубконтоДт.Вставить(ВидСубконто.ВидСубконто, СтрокаДокумента.НоменклатурнаяГруппа);
					
				КонецЕсли;
				
			ИначеЕсли ВидСубконто.ВидСубконто = ВидСубконтоДоговоры Тогда
				
				Проводка.СубконтоДт.Вставить(ВидСубконто.ВидСубконто, СтрокаДокумента.ДоговорКонтрагента);
				
			ИначеЕсли ВидСубконто.ВидСубконто = ВидСубконтоКонтрагенты Тогда
				
				Контрагент = Неопределено;
				
				// Для товаров принятых субконто Контрагент - это комитент
				Если СчетВИерархии(Проводка.СчетДт, СчетТоварыПринятые, СтруктураПараметров) Тогда
					
					Если НЕ ЗначениеЗаполнено(Контрагент) Тогда
						Если Движение<>Неопределено Тогда
							Контрагент = ПолучитьКонтрагентаИзДокументаОприходования(Движение.ДокументОприходования);
						КонецЕсли;
					КонецЕсли;
					
				Иначе
					
					Если ЗначениеЗаполнено(СтрокаДокумента.ДоговорКонтрагента) Тогда
						Контрагент = ПолучитьКонтрагентаИзДоговора(СтрокаДокумента.ДоговорКонтрагента, СтруктураПараметров);
					КонецЕсли;
					
				КонецЕсли;
				
				Проводка.СубконтоДт.Вставить(ВидСубконто.ВидСубконто, Контрагент);
				
			ИначеЕсли ВидСубконто.ВидСубконто = ВидСубконтоКомиссионеры Тогда
				
				Комиссионер = Неопределено;
				
				Если ЗначениеЗаполнено(СтрокаДокумента.ДоговорКонтрагента) Тогда
					Комиссионер = ПолучитьКонтрагентаИзДоговора(СтрокаДокумента.ДоговорКонтрагента, СтруктураПараметров);
				КонецЕсли;
				
				Проводка.СубконтоДт.Вставить(ВидСубконто.ВидСубконто, Комиссионер);
				
			КонецЕсли;
			
			Если Движение.КодОперации = Перечисления.КодыОперацийПартииТоваров.ВозвратОтКомиссионера Тогда

				ЗаполнитьСубконтоПоРеквизитам(ВидСубконто, Проводка.СубконтоДт, КорСубконто1, КорСубконто2, КорСубконто3, Истина, СтруктураПараметров);

			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Заполняем кредит
	Если ЗначениеЗаполнено(Проводка.СчетКт) Тогда
		
		Для каждого ВидСубконто Из Проводка.СчетКт.ВидыСубконто Цикл
			
			Если ВидСубконто.ВидСубконто = ВидСубконтоНоменклатура Тогда
				
				Проводка.СубконтоКт.Вставить(ВидСубконто.ВидСубконто, СтрокаДокумента.Номенклатура);
				
			ИначеЕсли ВидСубконто.ВидСубконто = ВидСубконтоПодразделения Тогда
				
				Проводка.СубконтоКт.Вставить(ВидСубконто.ВидСубконто, СтрокаДокумента.ПодразделениеОрганизации);
				
			ИначеЕсли ВидСубконто.ВидСубконто = ВидСубконтоСклады Тогда
				
				Проводка.СубконтоКт.Вставить(ВидСубконто.ВидСубконто, СтрокаДокумента.Склад);
				
			ИначеЕсли ВидСубконто.ВидСубконто = ВидСубконтоСтатьиЗатрат Тогда
				
				Проводка.СубконтоКт.Вставить(ВидСубконто.ВидСубконто, СтрокаДокумента.СтатьяЗатрат);
				
			ИначеЕсли ВидСубконто.ВидСубконто = ВидСубконтоНоменклатурныеГруппы Тогда
					
				Проводка.СубконтоКт.Вставить(ВидСубконто.ВидСубконто, СтрокаДокумента.НоменклатурнаяГруппа);
				
			ИначеЕсли ВидСубконто.ВидСубконто = ВидСубконтоДоговоры Тогда
				
				Проводка.СубконтоКт.Вставить(ВидСубконто.ВидСубконто, СтрокаДокумента.ДоговорКонтрагента);
				
			ИначеЕсли ВидСубконто.ВидСубконто = ВидСубконтоКонтрагенты Тогда
				
				Контрагент = Неопределено;
				
				// Для товаров принятых субконто Контрагент - это комитент
				Если СчетВИерархии(Проводка.СчетКт, СчетТоварыПринятые, СтруктураПараметров) Тогда
					
					Если НЕ ЗначениеЗаполнено(Контрагент) Тогда
						Если Движение<>Неопределено Тогда
							Контрагент = ПолучитьКонтрагентаИзДокументаОприходования(Движение.ДокументОприходования);
						КонецЕсли;
					КонецЕсли;
					
				Иначе
					
					Если ЗначениеЗаполнено(СтрокаДокумента.ДоговорКонтрагента) Тогда
						Контрагент = ПолучитьКонтрагентаИзДоговора(СтрокаДокумента.ДоговорКонтрагента, СтруктураПараметров);
					КонецЕсли;
					
				КонецЕсли;
				
				Проводка.СубконтоКт.Вставить(ВидСубконто.ВидСубконто, Контрагент);
				
			ИначеЕсли ВидСубконто.ВидСубконто = ВидСубконтоКомиссионеры Тогда
				
				Комиссионер = Неопределено;
				
				Если ЗначениеЗаполнено(СтрокаДокумента.ДоговорКонтрагента) Тогда
					Комиссионер = ПолучитьКонтрагентаИзДоговора(СтрокаДокумента.ДоговорКонтрагента, СтруктураПараметров);
				КонецЕсли;
				
				Проводка.СубконтоКт.Вставить(ВидСубконто.ВидСубконто, Комиссионер);
				
			КонецЕсли;
			
			ЗаполнитьСубконтоПоРеквизитам(ВидСубконто, Проводка.СубконтоКт, КорСубконто1, КорСубконто2, КорСубконто3, Истина , СтруктураПараметров);
			
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры//ЗаполнитьСубконтоПоСписаниюТоваровРегл

/////////////////////////////////////////////////////////////////////////////////
// ДВИЖЕНИЯ,ВЫПОЛНЯЕМЫЕ ПО РЕЗУЛЬТАТУ СПИСАНИЯ
// Связанные со списанием движения по бух и нал учету
//
// Параметры:
//	Нет.
//
Процедура ВыполнитьСвязанныеДвиженияРегл(СтрокаДокумента, СтруктураПараметров, Движение) Экспорт
	
	Если СтруктураПараметров.Свойство("ИспользоватьРасширеннуюАналитику")
	  И СтруктураПараметров.ИспользоватьРасширеннуюАналитику
	  И УправлениеЗапасамиПартионныйУчет.ПолучитьПараметрУчетнойПолитикиПартионногоУчета("СистемаНалогообложения", "Бух", СтруктураПараметров) = Перечисления.СистемыНалогообложения.Упрощенная Тогда
		Возврат;
	КонецЕсли;	
	
	Если СтрокаДокумента.ОтражатьвБухгалтерскомУчете Тогда
		
		КодыОпераций = Перечисления.КодыОперацийПартииТоваров;
		
		// 1. Начисление задолженности перед комитентом при реализации комиссионных товаров
		Если (СтрокаДокумента.КодОперацииПартииТоваров = КодыОпераций.Реализация
			ИЛИ СтрокаДокумента.КодОперацииПартииТоваров = КодыОпераций.РеализацияРозница
			ИЛИ СтрокаДокумента.КодОперацииПартииТоваров = КодыОпераций.РеализацияКомиссия
			ИЛИ СтрокаДокумента.КодОперацииПартииТоваров = КодыОпераций.СписаниеНаБрак
			ИЛИ СтрокаДокумента.КодОперацииПартииТоваров = КодыОпераций.СписаниеПоИнвентаризации)
			И Движение.СчетУчета=СтрокаДокумента.ПринятыеСчетУчетаБУ Тогда
			
			НачислитьЗадолженностьПередКомитентом(СтрокаДокумента, СтруктураПараметров, Движение);
			
		КонецЕсли;
		
		// Начисление задолженности покупателя при реализации собственных товаров
		Если (СтрокаДокумента.КодОперацииПартииТоваров = КодыОпераций.Реализация 
			ИЛИ СтрокаДокумента.КодОперацииПартииТоваров = КодыОпераций.РеализацияРозница
			ИЛИ СтрокаДокумента.КодОперацииПартииТоваров = КодыОпераций.РеализацияКомиссия)
			И Движение.СчетУчета=СтрокаДокумента.СчетУчетаБУ Тогда
			
			НачислитьДоходОтРеализации(СтрокаДокумента, СтруктураПараметров, Движение);
			
		КонецЕсли;
		
		// Сторно  задолженности покупателя 
		Если  СтрокаДокумента.КодОперацииПартииТоваров = КодыОпераций.ВозвратОтПокупателя  
		   И Движение.СчетУчета=СтрокаДокумента.СчетУчетаБУ Тогда
				
			НачислитьДоходОтРеализации(СтрокаДокумента, СтруктураПараметров, Движение,"Сторно");
				
		КонецЕсли;
		
		// Сторно задолженности перед комитентом
		Если  СтрокаДокумента.КодОперацииПартииТоваров = КодыОпераций.ВозвратОтПокупателя  
		   И Движение.СчетУчета=СтрокаДокумента.ПринятыеСчетУчетаБУ Тогда
				
			НачислитьЗадолженностьПередКомитентом(СтрокаДокумента, СтруктураПараметров, Движение, "Сторно");
				
		КонецЕсли;
		
		Если СтрокаДокумента.НеСписывать И НЕ СтруктураПараметров.СписыватьПартииРасходнымОрдером 
		   И ( СтрокаДокумента.КодОперацииПартииТоваров = Перечисления.КодыОперацийПартииТоваров.Реализация Или
				СтрокаДокумента.КодОперацииПартииТоваров = Перечисления.КодыОперацийПартииТоваров.ПередачаТарыКонтрагенту) Тогда
				
			ОприходоватьТоварПринятыйНаОтветственноеХранениеБух(СтрокаДокумента, СтруктураПараметров, Движение);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если (СтрокаДокумента.ОтражатьВНалоговомУчете) И (ТипЗнч(СтрокаДокумента.СчетУчетаНУ) <> Тип("ПланСчетовСсылка.Хозрасчетный")) Тогда	
		
		КодыОпераций = Перечисления.КодыОперацийПартииТоваров;
		
		// Начисление задолженности покупателя при реализации собственных товаров
		Если (СтрокаДокумента.КодОперацииПартииТоваров = КодыОпераций.Реализация 
			ИЛИ СтрокаДокумента.КодОперацииПартииТоваров = КодыОпераций.РеализацияРозница
			ИЛИ СтрокаДокумента.КодОперацииПартииТоваров = КодыОпераций.РеализацияКомиссия)
			И Движение.СчетУчета = СтрокаДокумента.СчетУчетаНУ Тогда
			
			НачислитьДоходОтРеализации(СтрокаДокумента, СтруктураПараметров, Движение);
			
		КонецЕсли;
		
		// Сторно  задолженности покупателя 
		Если  СтрокаДокумента.КодОперацииПартииТоваров = КодыОпераций.ВозвратОтПокупателя  
		   И Движение.СчетУчета=СтрокаДокумента.СчетУчетаНУ Тогда
					
			НачислитьДоходОтРеализации(СтрокаДокумента, СтруктураПараметров, Движение,"Сторно");
					
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ВыполнитьСвязанныеДвиженияРегл()

//Ответственное хранение
Процедура ОприходоватьТоварПринятыйНаОтветственноеХранениеБух(СтрокаДокумента, СтруктураПараметров, Строка)

	Если СтрокаДокумента.ОтражатьВБухгалтерскомУчете Тогда
		
		Учет = "Бух";
	Иначе
		Возврат;
	КонецЕсли;
	
	Движение = УправлениеЗапасамиПартионныйУчет.ДобавитьДвижениеВСтруктуруПараметров("ПартииТоваровНаСкладах"+Учет, СтруктураПараметров);
	
	ЗаполнитьЗначенияСвойств(Движение,Строка);
	
	Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
	
	Движение.КодОперации = Перечисления.КодыОперацийПартииТоваров.ОтложеннаяОтгрузка;
	
	Движение.СчетУчета = ПланыСчетов.Хозрасчетный.ТМЦпринятыеНаОтветственноеХранение;
	
	// В бухгалтерском учете партия принятая на ответственное 
	//хранение учитывается по стоимости реализации
	Движение.Стоимость = Строка.СуммаВыручкиБУ;
	
	Проводка = СтруктураПараметров.ДвиженияХозрасчетный.Добавить();
	
	Проводка.Период        = СтруктураПараметров.Период;
	Проводка.Регистратор   = СтруктураПараметров.Регистратор;
	Проводка.Активность    = Истина;
	Проводка.Организация   = СтрокаДокумента.Организация;
		
	Проводка.Сумма  = Движение.СуммаВыручкиБУ; // Сумма выручки по бух. учету
		
	Проводка.СчетДт = Движение.СчетУчета;
	
	Проводка.КоличествоДт = Движение.Количество;
	
	Проводка.Содержание = Строка(Движение.КодОперации);
	
	ЗаполнитьСубконтоПоСписаниюТоваровРегл(Проводка, СтрокаДокумента, Движение, СтруктураПараметров, Учет);
	
	СтруктураПараметров.ИзмененыДвиженияХозрасчетный = Истина;
	
КонецПроцедуры//ОприходоватьТоварПринятыйНаОтветственноеХранение

Процедура ЗаполнитьКорРеквизитыВозвратаКорректировкиРеализации(Движение, СтрокаДокумента, СтруктураПараметров, ВидУчета) Экспорт
	
	Если ВидУчета = "БухгалтерскийУчет" Тогда
		Движение.КорСчет = СтрокаДокумента.КорСчетБУ;
		КорСубконто1 = СтрокаДокумента.КорСубконтоБУ1;
		КорСубконто2 = СтрокаДокумента.КорСубконтоБУ2;
		КорСубконто3 = СтрокаДокумента.КорСубконтоБУ3;
	ИначеЕсли ВидУчета = "НалоговыйУчет" Тогда
		Движение.КорСчет = СтрокаДокумента.КорСчетНУ;
		КорСубконто1 = ?(ЗначениеЗаполнено(СтрокаДокумента.КорСубконтоНУ1), СтрокаДокумента.КорСубконтоНУ1, СтрокаДокумента.КорСубконтоБУ1);
		КорСубконто2 = ?(ЗначениеЗаполнено(СтрокаДокумента.КорСубконтоНУ2), СтрокаДокумента.КорСубконтоНУ2, СтрокаДокумента.КорСубконтоБУ2);
		КорСубконто3 = ?(ЗначениеЗаполнено(СтрокаДокумента.КорСубконтоНУ3), СтрокаДокумента.КорСубконтоНУ3, СтрокаДокумента.КорСубконтоБУ3);
	Иначе
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Движение.КорСчет) Тогда
		Возврат;
	КонецЕсли;
	
	ТипЗнчСубконто1 = ТипЗнч(КорСубконто1);
	ТипЗнчСубконто2 = ТипЗнч(КорСубконто2);
	ТипЗнчСубконто3 = ТипЗнч(КорСубконто3);
	
	НомерСубконто = 1;
	
	Для Каждого ВидСубконто Из Движение.КорСчет.ВидыСубконто Цикл
		
		Если ВидСубконто.ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы Тогда
			
			Движение["КорСубконто" + НомерСубконто] = СтрокаДокумента.НоменклатурнаяГруппа;
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Движение["КорСубконто" + НомерСубконто]) Тогда
			
			Если ЗначениеЗаполнено(КорСубконто1) И ВидСубконтоСодержитТип(СтруктураПараметров, ВидСубконто, ТипЗнчСубконто1) Тогда
				
				Движение["КорСубконто" + НомерСубконто] = КорСубконто1;
				
			ИначеЕсли ЗначениеЗаполнено(КорСубконто2) И ВидСубконтоСодержитТип(СтруктураПараметров, ВидСубконто, ТипЗнчСубконто2) Тогда
				
				Движение["КорСубконто" + НомерСубконто] = КорСубконто2;
				
			ИначеЕсли ЗначениеЗаполнено(КорСубконто3) И ВидСубконтоСодержитТип(СтруктураПараметров, ВидСубконто, ТипЗнчСубконто3) Тогда
				
				Движение["КорСубконто" + НомерСубконто] = КорСубконто3;
				
			КонецЕсли;
			
		КонецЕсли;
		
		НомерСубконто = НомерСубконто + 1;
		
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СПИСАНИЕ ПО СЧЕТАМ БУХ УЧЕТА

// Регл

// Содержание проводки для бухгалтерского и налогового учета
Функция ПолучитьСодержаниеПроводки(СтрокаДокумента, СтруктураПараметров, Актив = "") Экспорт  
	
	КодыОпераций = СтруктураПараметров.КодыОпераций;
	НазваниеАктива = ?(Актив = "" Или Актив = Неопределено, "", БухгалтерскийУчет.ПолучитьНазваниеОбъекта(Актив) + " ");
	
	Если СтруктураПараметров.ТипЗначенияРегистратора =Тип("ДокументСсылка.РеализацияУслугПоПереработке") тогда
		СодержаниеПроводки = "Реализация услуг по переработке";
	ИначеЕсли СтрокаДокумента.КодОперацииПартииТоваров = КодыОпераций.СписаниеПартийВПроизводствоОперативно тогда
		СодержаниеПроводки = "Списание " + НазваниеАктива + "в производство ";
	ИначеЕсли СтрокаДокумента.КодОперацииПартииТоваров = КодыОпераций.СписаниеНаБрак тогда
		СодержаниеПроводки = "Списание " + НазваниеАктива + "на брак ";
	ИначеЕсли СтрокаДокумента.КодОперацииПартииТоваров = КодыОпераций.СписаниеНаВложенияВоВнеоборотныеАктивы тогда
		СодержаниеПроводки = "Списание " + НазваниеАктива + "внеоборотные активы ";
	ИначеЕсли СтрокаДокумента.КодОперацииПартииТоваров = КодыОпераций.СписаниеНаЗатраты тогда
		СодержаниеПроводки = "Списание " + НазваниеАктива + "на затраты ";
	ИначеЕсли СтрокаДокумента.КодОперацииПартииТоваров = КодыОпераций.СписаниеПоИнвентаризации тогда
		СодержаниеПроводки = "Списание " + НазваниеАктива + " (недостача)";
	ИначеЕсли СтрокаДокумента.КодОперацииПартииТоваров = КодыОпераций.СписаниеПартийПереданныхВПроизводство тогда 
		СодержаниеПроводки = "Списание " + НазваниеАктива + "в производство (переработка)";
	Иначе
		СодержаниеПроводки = Строка(СтрокаДокумента.КодОперацииПартииТоваров) + " " + НазваниеАктива;
	КонецЕсли;
	
	Возврат СодержаниеПроводки;
	
КонецФункции//ПолучитьСодержаниеПроводки

// Формирование проводок по отклонению в стоимости тары для бухгалтерского и налогового учета 
Процедура СформироватьПроводкуОтклоненияВСтоимостиТары(СтрокаДокумента, Проводка, Движение, СтруктураПараметров, ИмяРегистра )
	
	// Проводка по передаче тары (при проведении документа реализации)
	Если СтрокаДокумента.КодОперацииПартииТоваров = Перечисления.КодыОперацийПартииТоваров.ПередачаТарыКонтрагенту 
		И Проводка.КоличествоКт>0
		И ((НЕ Проводка.СчетКт.Забалансовый И ИмяРегистра = "Хозрасчетный") Или ИмяРегистра = "Налоговый")
		Тогда
		
		Себестоимость = Проводка.Сумма;
		СтоимостьПередачи = Движение.СтоимостьПоступление;
		
		// Задолженность по новой (залоговой) стоимости
		Проводка.Сумма = СтоимостьПередачи;
		
		// Если стоимость передачи не равна себестоимости - добавим проводку по начислению разницы на прочие доходы/расходы
		ПерваяПроводка = Проводка;
		
		Если СтоимостьПередачи <> Себестоимость Тогда
			
			ВтораяПроводка = СтруктураПараметров["Движения"+ИмяРегистра].Добавить();
			
			ВтораяПроводка.Период        = СтруктураПараметров.Период;
			ВтораяПроводка.Регистратор   = СтруктураПараметров.Регистратор;
			ВтораяПроводка.Активность    = Истина;
			
			Если Себестоимость > СтоимостьПередачи Тогда
				Если ИмяРегистра = "Хозрасчетный" тогда
					ВтораяПроводка.СчетДт    = СтрокаДокумента.СчетРасходовБУ;
				Иначе
					ВтораяПроводка.СчетДт    = СтрокаДокумента.СчетРасходовНУ;
				КонецЕсли;

				Для каждого ВидСубконто Из ВтораяПроводка.СчетДт.ВидыСубконто Цикл
					ЗаполнитьСубконтоПоРеквизитам(ВидСубконто, ВтораяПроводка.СубконтоДт, СтрокаДокумента.СтатьяДоходовИРасходов , , , , СтруктураПараметров);
				КонецЦикла;

				ВтораяПроводка.Сумма = Себестоимость - СтоимостьПередачи;
				
				ВтораяПроводка.СчетКт = ПерваяПроводка.СчетКт;
				Для каждого ВидСубконто Из ВтораяПроводка.СчетКт.ВидыСубконто Цикл
					ВтораяПроводка.СубконтоКт.Вставить(ВидСубконто.ВидСубконто,  ПерваяПроводка.СубконтоКт[ВидСубконто.ВидСубконто]);
				КонецЦикла;
				
			Иначе
				Если ИмяРегистра = "Хозрасчетный" тогда
					ВтораяПроводка.СчетКт    = СтрокаДокумента.СчетДоходовБУ;
				Иначе
					ВтораяПроводка.СчетКт    = СтрокаДокумента.СчетДоходовНУ;
				КонецЕсли;
				
				Для каждого ВидСубконто Из ВтораяПроводка.СчетКт.ВидыСубконто Цикл
					ЗаполнитьСубконтоПоРеквизитам(ВидСубконто, ВтораяПроводка.СубконтоКт, СтрокаДокумента.СтатьяДоходовИРасходов , , , , СтруктураПараметров);
				КонецЦикла;

				ВтораяПроводка.Сумма = СтоимостьПередачи-Себестоимость;
				
				ВтораяПроводка.СчетДт = ПерваяПроводка.СчетКт;
				
				Для каждого ВидСубконто Из ВтораяПроводка.СчетДт.ВидыСубконто Цикл
					ВтораяПроводка.СубконтоДт.Вставить(ВидСубконто.ВидСубконто,  ПерваяПроводка.СубконтоКт[ВидСубконто.ВидСубконто]);
				КонецЦикла;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ВтораяПроводка.СчетКт) Или НЕ ЗначениеЗаполнено(ВтораяПроводка.СчетДт) тогда
				
				СтрокаСообщения = "Документ " + СтрокаДокумента.Регистратор + ". Не заполнены значения счетов учета доходов и расходов." + Символы.ПС
				+ "Проводка по отклонению в стоимости тары для номенклатуры " + СтрокаДокумента.Номенклатура 
				+ " не сформирована.";
				ОбщегоНазначения.СообщитьОбОшибке(СтрокаСообщения);
				
				СтруктураПараметров["Движения"+ИмяРегистра].Удалить(ВтораяПроводка);
				
			Иначе
				ВтораяПроводка.Организация   = СтрокаДокумента.Организация;
				
				ВтораяПроводка.Содержание    = ПерваяПроводка.Содержание;
				ВтораяПроводка.НомерЖурнала  = ПерваяПроводка.НомерЖурнала;
				
			КонецЕсли;
			
		КонецЕсли;
				
	КонецЕсли;
	
КонецПроцедуры

// Формирование проводок по списанию на счет по бухгалтерскому учету
Процедура СписаниеНаСчетБух(СписаноИз, СтрокаДокумента, СтруктураПараметров, Движение, ТипЗаписи = "Прямая")
	
	Если НЕ СтрокаДокумента.ОтражатьВБухгалтерскомУчете Тогда
		Возврат;
	КонецЕсли;
	
	ИмяРегистра = "Хозрасчетный";
	
	Проводка = СтруктураПараметров["Движения"+ИмяРегистра].Добавить();
	
	Количество = Движение.Количество;
	Сумма      = Движение.Стоимость;
	
	Если СписаноИз = "Переданные" 
		И Движение.СтоимостьПоступление<>0 Тогда
		Сумма = Движение.СтоимостьПоступление;
	КонецЕсли;
	
	Если ТипЗаписи = "Сторно" Тогда
		Количество = - Количество;
		Сумма      = - Сумма;
	КонецЕсли;
	
	Проводка.Период        = СтруктураПараметров.Период;
	Проводка.Регистратор   = СтруктураПараметров.Регистратор;
	Проводка.Активность    = Истина;
	Проводка.Организация   = СтрокаДокумента.Организация;
	
	Проводка.СчетКт        = Движение.СчетУчета;
	
	Если ЗначениеЗаполнено(СтрокаДокумента.КорСчетБУ)
		И Проводка.СчетКт.Забалансовый = СтрокаДокумента.КорСчетБУ.Забалансовый Тогда
		
		Проводка.СчетДт    = СтрокаДокумента.КорСчетБУ;
		
	ИначеЕсли НЕ ЗначениеЗаполнено(СтрокаДокумента.КорСчетБУ)
		И УправлениеЗапасамиПартионныйУчет.ПолучитьНаправлениеСписанияПоКодуОперации(СтрокаДокумента.КодОперацииПартиитоваров, СтрокаДокумента.СтатьяЗатрат) = "НаСкладах" Тогда
		
		Проводка.СчетДт    = Проводка.СчетКт;
		
	КонецЕсли;
	
	// Перемещение комиссионных товаров
	Если НЕ СтрокаДокумента.КодОперацииПартииТоваров = Перечисления.КодыОперацийПартииТоваров.ВозвратОтПокупателя тогда
		Если Проводка.СчетКт.Забалансовый
			И (ЗначениеЗаполнено(СтрокаДокумента.ПринятыеКорСчетБУ)) Тогда
			
			Проводка.СчетДт    = СтрокаДокумента.ПринятыеКорСчетБУ;
			
		КонецЕсли;
	КонецЕсли;
	
	Если Проводка.СчетДт.Валютный Тогда
			
		Проводка.ВалютаДт		 = СтрокаДокумента.КорВалютаЗадолженностиБУ;
		Проводка.ВалютнаяСуммаДт = Движение.ВалютнаяСуммаЗадолженностиБУ;
			
	КонецЕсли;
	
	ЗаполнитьСубконтоПоСписаниюТоваровРегл(Проводка, СтрокаДокумента, Движение, СтруктураПараметров, "Бух");
	
	// Сумма в перемещении должна быть только если ведется партионный учет по складам
	// или если товар перемещается на другой счет
	Если СтрокаДокумента.КодОперацииПартииТоваров = Перечисления.КодыОперацийПартииТоваров.ПеремещениеМеждуСкладами 
	   И Не УправлениеЗапасамиПартионныйУчет.ПолучитьПараметрУчетнойПолитикиПартионногоУчета("ВестиПартионныйУчетПоСкладам", "Бух", СтруктураПараметров) 
	   И Проводка.СчетДт = Проводка.СчетКт Тогда
			
		Проводка.Сумма = 0;
		
	Иначе
		
		Проводка.Сумма = Сумма;
		
	КонецЕсли;
	
	Если Проводка.СчетКт.Количественный Тогда
		Проводка.КоличествоКт  = Количество;
	КонецЕсли;
	
	// Количество
	Если ЗначениеЗаполнено(Проводка.СчетДт) Тогда
		
		Если Проводка.СчетДт.Количественный  Тогда
			
			Проводка.КоличествоДт  = Количество;
			
			// Новое количество-для комплектации
			Если Движение.КоличествоПоступление<>0 Тогда 
				
				Проводка.КоличествоДт	= Движение.КоличествоПоступление;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Проводка.Содержание = ПолучитьСодержаниеПроводки(СтрокаДокумента, СтруктураПараметров, Проводка.СчетКт);
	
	// Проверка добавленных проводок
	НеДобавлять = Ложь;
	
	// Проводки с одинаковыми субсчетами и субконто не добавляем:
	Если Проводка.СчетДт = Проводка.СчетКт Тогда 
		
		НеДобавлять = Проводка.КоличествоДт = Проводка.КоличествоКт;
		
		Для каждого ВидСубконто Из Проводка.СчетКт.ВидыСубконто Цикл
			
			СубконтоСовпадают = Проводка.СубконтоДт[ВидСубконто.ВидСубконто] = Проводка.СубконтоКт[ВидСубконто.ВидСубконто];
			
			НеДобавлять = НеДобавлять И СубконтоСовпадают;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Проводки с нулевой суммой и количеством не добавляем
	НеДобавлять = НеДобавлять ИЛИ (Проводка.Сумма=0 И Проводка.КоличествоДт=0 И Проводка.КоличествоКт=0);
	
	// Незаконченные проводки с балансовыми счетами не добавляем
	НеДобавлять = НеДобавлять ИЛИ 
	(   НЕ Проводка.СчетДт.Забалансовый И НЕ ЗначениеЗаполнено(Проводка.СчетКт)	
	ИЛИ НЕ Проводка.СчетКт.Забалансовый И НЕ ЗначениеЗаполнено(Проводка.СчетДт));
	
	// Проводки не добавляем к не регистрируемым в регистре документам
	НеДобавлять = НеДобавлять ИЛИ СтруктураПараметров["Движения"+ИмяРегистра].Отбор.Регистратор.Значение = Неопределено;
	
	// Проводка по передаче тары (при проведении документа реализации)
	СформироватьПроводкуОтклоненияВСтоимостиТары(СтрокаДокумента, Проводка, Движение, СтруктураПараметров, ИмяРегистра);
	
	// Забалансовые счета с разными суммами поступления и списания:
	// две  проводки без корреспонденции
	Если СтрокаДокумента.КодОперацииПартииТоваров = Перечисления.КодыОперацийПартииТоваров.ПереоценкаПринятыхНаКомиссию
		И Проводка.СчетДт.Забалансовый И Проводка.СчетКт.Забалансовый
		И Движение.СтоимостьПоступление<>0 Тогда
		
		НеДобавлять = Ложь;
		
		ПерваяПроводка = Проводка;
		
		ВтораяПроводка = СтруктураПараметров["Движения"+ИмяРегистра].Добавить();
		
		ВтораяПроводка.Период        = СтруктураПараметров.Период;
		ВтораяПроводка.Регистратор   = СтруктураПараметров.Регистратор;
		ВтораяПроводка.Активность    = Истина;
		
		ВтораяПроводка.СчетДт        = ПерваяПроводка.СчетДт;
		
		ВтораяПроводка.Сумма         = Движение.СтоимостьПоступление;
		
		Если ВтораяПроводка.СчетДт.Количественный Тогда
			ВтораяПроводка.КоличествоДт  = Количество;
		КонецЕсли;
		
		ВтораяПроводка.Организация   = СтрокаДокумента.Организация;
		
		// Перенос субконто
		Для каждого ВидСубконто Из ВтораяПроводка.СчетДт.ВидыСубконто Цикл
			
			ВтораяПроводка.СубконтоДт.Вставить(ВидСубконто.ВидСубконто,  ПерваяПроводка.СубконтоДт[ВидСубконто.ВидСубконто]);
			
		КонецЦикла; 
		
		ВтораяПроводка.Содержание    = ПерваяПроводка.Содержание;
		ВтораяПроводка.НомерЖурнала  = ПерваяПроводка.НомерЖурнала;
		
		// Очистка первой проводки
		ПерваяПроводка.СчетДт = Неопределено;
		ПерваяПроводка.СубконтоДт.Очистить();
		ПерваяПроводка.КоличествоДт = 0;
		
		// Нужно устанавливать в зависимости от кода операции
		ПерваяПроводка.НомерЖурнала  = "";
		
		// Проводка для указания корреспонденции в регистре
		Проводка = ВтораяПроводка;
		
	КонецЕсли;
	
	// В случае, если проводку добавлять не нужно, удаляем ее из движений
	Если НеДобавлять Тогда
		
		// Удаляем добавленную строку
		СтруктураПараметров["Движения"+ИмяРегистра].Удалить(Проводка);
		
		// Если проводки не добавляются, тогда выход без изменения
		Возврат;
		
	КонецЕсли;
	
	СтруктураПараметров["ИзмененыДвижения"+ИмяРегистра] = Истина;
	
	// В реквизиты движения регистра занесем счет списания
	Движение.КорСчет      = Проводка.СчетДт;
	
	Сч = 0;
	Для Каждого ВидСубконто Из Проводка.СчетДт.ВидыСубконто Цикл
		
		Сч = Сч+1;
		
		Если ЗначениеЗаполнено(Проводка.СубконтоДт[ВидСубконто.ВидСубконто]) тогда
			Движение["КорСубконто"+Сч] = Проводка.СубконтоДт[ВидСубконто.ВидСубконто];
		Иначе
			Движение["КорСубконто"+Сч] = Неопределено;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // СписаниеНаСчетБух()

// Формирование проводок по списанию на счет по налоговому учету
Процедура СписаниеНаСчетНал(СписаноИз, СтрокаДокумента, СтруктураПараметров, Движение, ТипЗаписи = "Прямая", ПриходоватьВ)
	
	Если (НЕ СтрокаДокумента.ОтражатьВНалоговомУчете) 
	   ИЛИ (ТипЗнч(Движение.СчетУчета) = Тип("ПланСчетовСсылка.Хозрасчетный")) Тогда
		Возврат;
	КонецЕсли;
	
	ИмяРегистра = "Налоговый";
	
	Количество = Движение.Количество;
	Сумма      = Движение.Стоимость;
	
	СуммаПР    = Движение.ПостояннаяРазница;
	СуммаВР    = Движение.ВременнаяРазница;
	
	Если СписаноИз = "Переданные" 
		И Движение.СтоимостьПоступление<>0 Тогда
		Сумма = Движение.СтоимостьПоступление;
	КонецЕсли;
	
	Если ТипЗаписи = "Сторно" Тогда
		Количество = - Количество;
		Сумма      = - Сумма;
		СуммаПР    = - СуммаПР;
		СуммаВР    = - СуммаВР;
	КонецЕсли;
	
	Если Движение.СчетУчета = СтрокаДокумента.СчетУчетаНУ Тогда
		КорСчетНУ = СтрокаДокумента.КорСчетНУ;
	ИначеЕсли Движение.СчетУчета = СтрокаДокумента.ПринятыеСчетУчетаНУ Тогда
		КорСчетНУ = СтрокаДокумента.ПринятыеКорСчетНУ;
	ИначеЕсли Движение.СчетУчета = ПланыСчетов.Налоговый.МатериалыВСоставеОСвНУ тогда
		// Счет МатериалыВСоставеОСвНУ обрабатывается особым образом
		Если ПриходоватьВ = "НаСкладах" или ПриходоватьВ = "Переданные"
		   или ПриходоватьВ = "ПартииМатериаловВЭксплуатации" тогда
			КорСчетНУ = ПланыСчетов.Налоговый.МатериалыВСоставеОСвНУ;
		Иначе
			КорСчетНУ = СтрокаДокумента.КорСчетНУ;
		КонецЕсли;
	КонецЕсли;
	
	Для НомерПроводки = 1 По 5 Цикл // сумма, ПР, ВР, доп проводка по ПР, доп проводка по ВР
		
		Проводка = СтруктураПараметров["Движения"+ИмяРегистра].Добавить();
		
		Проводка.Период        = СтруктураПараметров.Период;
		Проводка.Регистратор   = СтруктураПараметров.Регистратор;
		Проводка.Активность    = Истина;
		Проводка.Организация   = СтрокаДокумента.Организация;
		
		Проводка.СчетДт        = КорСчетНУ;
		Проводка.СчетКт        = Движение.СчетУчета;
		
		Если СтрокаДокумента.КодОперацииПартииТоваров = Перечисления.КодыОперацийПартииТоваров.СнятиеРезерваПодЗаказ Тогда
			Проводка.СчетДт = Проводка.СчетКт;
		КонецЕсли;
		
		// Сумма в перемещении должна быть только если ведется партионный учет по складам
		// или если товар перемещается на другой счет
		Если СтрокаДокумента.КодОперацииПартииТоваров = Перечисления.КодыОперацийПартииТоваров.ПеремещениеМеждуСкладами 
		   И Не УправлениеЗапасамиПартионныйУчет.ПолучитьПараметрУчетнойПолитикиПартионногоУчета("ВестиПартионныйУчетПоСкладам", "Бух", СтруктураПараметров) 
		   И Проводка.СчетДт = Проводка.СчетКт Тогда
		
			Сумма      = 0;
			СуммаПР    = 0;
			СуммаВР    = 0;
		
		КонецЕсли;
		
		ОпределятьСоответствиеНУ = СтруктураПараметров.Свойство("ДвиженияХозрасчетный");
		Если ОпределятьСоответствиеНУ тогда
			// Определим соответствующий счет НУ
			Если СуммаПР<>0 ИЛИ СуммаВР<>0 Тогда
				
				СоотвСчетНУ = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", СтрокаДокумента.СчетУчетаБУ), Ложь, СтрокаДокумента.Период);
				
			КонецЕсли;
		КонецЕсли;
		
		ЗаполнитьСубконтоПоСписаниюТоваровРегл(Проводка, СтрокаДокумента, Движение, СтруктураПараметров, "Нал");
		
		Если НомерПроводки=1 Тогда
			
			Проводка.Сумма   = Сумма;
			//Проводка.ВидУчетаДТ = Перечисления.ВидыУчетаПоПБУ18.НУ;
			Проводка.ВидУчетаКТ = Перечисления.ВидыУчетаПоПБУ18.НУ;
			
		ИначеЕсли НомерПроводки=2 Тогда
			
			Проводка.Сумма = СуммаПР;
			Проводка.ВидУчетаДТ = Перечисления.ВидыУчетаПоПБУ18.ПР;
			Проводка.ВидУчетаКТ = Перечисления.ВидыУчетаПоПБУ18.ПР;
			
		ИначеЕсли НомерПроводки=3 Тогда
			
			Проводка.Сумма  = СуммаВР;
			Проводка.ВидУчетаДТ = Перечисления.ВидыУчетаПоПБУ18.ВР;
			Проводка.ВидУчетаКТ = Перечисления.ВидыУчетаПоПБУ18.ВР;
			
		ИначеЕсли НомерПроводки=4 Тогда
			
			Если СуммаПР<>0 И ОпределятьСоответствиеНУ Тогда
				
				Если Движение.СчетУчета <> СоотвСчетНУ Тогда
					
					// Добавляем проводку
					
					Если НЕ Движение.СчетУчета = ПланыСчетов.Налоговый.МатериалыВСоставеОСвНУ тогда
						Проводка.СчетКт = СоотвСчетНУ;
						Проводка.Сумма  = - СуммаПР;
						Проводка.ВидУчетаДТ = Перечисления.ВидыУчетаПоПБУ18.ПР;
						Проводка.ВидУчетаКТ = Перечисления.ВидыУчетаПоПБУ18.ПР;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли НомерПроводки=5 Тогда
			
			Если СуммаВР<>0 И ОпределятьСоответствиеНУ Тогда
				
				Если Движение.СчетУчета <> СоотвСчетНУ Тогда
					
					// Добавляем проводку
					
					Если НЕ Движение.СчетУчета = ПланыСчетов.Налоговый.МатериалыВСоставеОСвНУ тогда
						Проводка.СчетКт = СоотвСчетНУ;
						Проводка.Сумма  = - СуммаВР;
						Проводка.ВидУчетаДТ = Перечисления.ВидыУчетаПоПБУ18.ВР;
						Проводка.ВидУчетаКТ = Перечисления.ВидыУчетаПоПБУ18.ВР;
					КонецЕсли;
					
				КонецЕсли;
				
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если Проводка.СчетКт.Количественный Тогда
			
			// По разницам количественный учет не ведется
			Если Проводка.ВидУчетаКТ = Перечисления.ВидыУчетаПоПБУ18.НУ Тогда
				
				Проводка.КоличествоКт  = Количество;
			КонецЕсли;
		КонецЕсли;
		
		// Количество
		Если ЗначениеЗаполнено(Проводка.СчетДт) Тогда
			
			Если Проводка.СчетДт.Количественный  Тогда
				
				// По разницам количественный учет не ведется
				// Первая проводка может быть и с видом учета ПР ВР по дебету 
				// Вид учета устанавливается в модуле набора записей регистра бухгалтерии Налоговый
				// Там же и должно обнуляться количество если вид учета не НУ
				Если НомерПроводки = 1 Тогда
					
					Проводка.КоличествоДт  = Количество;
					
					// Новое количество-для комплектации
					Если Движение.КоличествоПоступление<>0 Тогда 
						Проводка.КоличествоДт	= Движение.КоличествоПоступление;
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		Проводка.Содержание = ПолучитьСодержаниеПроводки(СтрокаДокумента, СтруктураПараметров, Проводка.СчетКт);
		
		// Проверка добавленных проводок
		
		НеДобавлять = Ложь;
		
		// Проводки с одинаковыми субсчетами и субконто не добавляем кроме тех случаев, когда не совпадает количество:
		Если Проводка.СчетДт = Проводка.СчетКт Тогда 
			
			НеДобавлять = Проводка.КоличествоДт = Проводка.КоличествоКт;
			
			Для каждого ВидСубконто Из Проводка.СчетКт.ВидыСубконто Цикл
				
				СубконтоСовпадают = Проводка.СубконтоДт[ВидСубконто.ВидСубконто] = Проводка.СубконтоКт[ВидСубконто.ВидСубконто];
				
				НеДобавлять = НеДобавлять И СубконтоСовпадают;
				
			КонецЦикла;
			
		КонецЕсли;
		
		// Проводки с нулевой суммой и количеством не добавляем
		НеДобавлять = НеДобавлять ИЛИ (Проводка.Сумма=0 И Проводка.КоличествоДт=0 И Проводка.КоличествоКт=0);
		
		// Незаконченные проводки с балансовыми счетами не добавляем
		НеДобавлять = НеДобавлять ИЛИ 
		(   НЕ Проводка.СчетДт.Забалансовый И НЕ ЗначениеЗаполнено(Проводка.СчетКт)	
		ИЛИ НЕ Проводка.СчетКт.Забалансовый И НЕ ЗначениеЗаполнено(Проводка.СчетДт));
		
		// Проводки не добавляем к не регистрируемым в регистре документам
		НеДобавлять = НеДобавлять ИЛИ СтруктураПараметров["Движения"+ИмяРегистра].Отбор.Регистратор.Значение = Неопределено;
		
		Если НомерПроводки = 1 тогда
			СформироватьПроводкуОтклоненияВСтоимостиТары(СтрокаДокумента, Проводка, Движение, СтруктураПараметров, ИмяРегистра);
		КонецЕсли;
		
		// Забалансовые счета с разными суммами поступления и списания:
		// две  проводки без корреспонденции
		Если СтрокаДокумента.КодОперацииПартииТоваров = Перечисления.КодыОперацийПартииТоваров.ПереоценкаПринятыхНаКомиссию
			И Проводка.СчетДт.Забалансовый И Проводка.СчетКт.Забалансовый
			И СтрокаДокумента.СтоимостьПоступлениеБУ<>0 Тогда
			
			НеДобавлять = Ложь;
			
			ПерваяПроводка = Проводка;
			
			ВтораяПроводка = СтруктураПараметров["Движения"+ИмяРегистра].Добавить();
			
			ВтораяПроводка.Период        = СтруктураПараметров.Период;
			ВтораяПроводка.Регистратор   = СтруктураПараметров.Регистратор;
			ВтораяПроводка.Активность    = Истина;
			
			ВтораяПроводка.СчетДт        = ПерваяПроводка.СчетДт;
			
			ВтораяПроводка.Сумма         = СтрокаДокумента.СтоимостьПоступлениеБУ;
			
			Если ВтораяПроводка.СчетДт.Количественный Тогда
				ВтораяПроводка.КоличествоДт  = Количество;
			КонецЕсли;
			
			ВтораяПроводка.Организация   = СтрокаДокумента.Организация;
			
			// Перенос субконто
			Для каждого ВидСубконто Из ВтораяПроводка.СчетДт.ВидыСубконто Цикл
				
				ВтораяПроводка.СубконтоДт.Вставить(ВидСубконто.ВидСубконто,  ПерваяПроводка.СубконтоДт[ВидСубконто.ВидСубконто]);
				
			КонецЦикла; 
			
			ВтораяПроводка.Содержание    = ПерваяПроводка.Содержание;
			ВтораяПроводка.НомерЖурнала  = ПерваяПроводка.НомерЖурнала;
			
			// Очистка первой проводки
			ПерваяПроводка.СчетДт = Неопределено;
			ПерваяПроводка.СубконтоДт.Очистить();
			ПерваяПроводка.КоличествоДт = 0;
			
			// Нужно устанавливать в зависимости от кода операции
			ПерваяПроводка.НомерЖурнала  = "";
			
			// Проводка для указания корреспонденции в регистре
			Проводка = ВтораяПроводка;
			
		КонецЕсли;
		
		// В случае, если проводку добавлять не нужно, удаляем ее из движений
		Если НеДобавлять Тогда
			
			// Удаляем добавленную строку
			СтруктураПараметров["Движения"+ИмяРегистра].Удалить(Проводка);
			
			// Если проводки не добавляются, тогда выход без изменения
			Продолжить;
			
		КонецЕсли;
		
		СтруктураПараметров["ИзмененыДвижения"+ИмяРегистра] = Истина;
		
		// В реквизиты движения регистра занесем счет списания
		Движение.КорСчет      = Проводка.СчетДт;
		
		Сч = 0;
		Для Каждого ВидСубконто Из Проводка.СчетДт.ВидыСубконто Цикл
			
			Сч = Сч+1;
			
			Если ЗначениеЗаполнено(Проводка.СубконтоДт[ВидСубконто.ВидСубконто]) тогда
				Движение["КорСубконто"+Сч] = Проводка.СубконтоДт[ВидСубконто.ВидСубконто];
			Иначе
				Движение["КорСубконто"+Сч] = Неопределено;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры // СписаниеНаСчетНал()

// Списание партии на счет бухгалтерского учета
Процедура СписаниеНаСчет(СписаноИз, СтрокаДокумента, СтруктураПараметров, Движение, ТипЗаписи = "Прямая", ПриходоватьВ = Неопределено) Экспорт
	
	Если СтруктураПараметров.Свойство("ИспользоватьРасширеннуюАналитику")
	  И СтруктураПараметров.ИспользоватьРасширеннуюАналитику
	  И УправлениеЗапасамиПартионныйУчет.ПолучитьПараметрУчетнойПолитикиПартионногоУчета("СистемаНалогообложения", "Бух", СтруктураПараметров) = Перечисления.СистемыНалогообложения.Упрощенная Тогда
		Возврат;
	КонецЕсли;	
	
	Если СтруктураПараметров.ФормироватьПроводкиПоСписаниюТМЦ Тогда
		СписаниеНаСчетБух(СписаноИз, СтрокаДокумента, СтруктураПараметров, Движение, ТипЗаписи);
		
		СписаниеНаСчетНал(СписаноИз, СтрокаДокумента, СтруктураПараметров, Движение, ТипЗаписи, ПриходоватьВ);
	КонецЕсли;	
	
КонецПроцедуры//СписаниеНаСчет


////////////////////////////////////////////////////////////////////////////////
// ПРОВОДКИ ПО БУХ УЧЕТУ, ЗАВИСЯЩИЕ ОТ ТОГО, КАКИЕ ПАРТИИ СПИСАНЫ

// Формирование проводок по начислению задолженности перед комитентом
//
Процедура НачислитьЗадолженностьПередКомитентом(СтрокаДокумента, СтруктураПараметров, Движение, ТипЗаписи = "Прямая")
	
	КодыОпераций = Перечисления.КодыОперацийПартииТоваров;
	
	Если ТипЗаписи = "Сторно" Тогда
		КоэффициентСторно = -1;
	Иначе
		КоэффициентСторно = 1;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ПоступлениеТоваровУслуг.Контрагент,
	|	ПоступлениеТоваровУслуг.ДоговорКонтрагента,
	|	ПоступлениеТоваровУслуг.СчетУчетаРасчетовСКонтрагентом,
	|	ПоступлениеТоваровУслуг.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаРасчетовСКомитентом
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
	|ГДЕ
	|	ПоступлениеТоваровУслуг.Ссылка = &Ссылка");
	
	Запрос.УстановитьПараметр("Ссылка", Движение.ДокументОприходования);
	
	ВыборкаПринятиеНаКомиссию = Запрос.Выполнить().Выбрать();
	Если ВыборкаПринятиеНаКомиссию.Следующий() Тогда 
		
		Если ЗначениеЗаполнено(ВыборкаПринятиеНаКомиссию.СчетУчетаРасчетовСКонтрагентом) Тогда
			
			Проводка = СтруктураПараметров["ДвиженияХозрасчетный"].Добавить();
			
			Проводка.Период        = СтруктураПараметров.Период;
			Проводка.Регистратор   = СтруктураПараметров.Регистратор;
			Проводка.Активность    = Истина;
			Проводка.Организация   = СтрокаДокумента.Организация;
			
			Проводка.СчетКт        = ВыборкаПринятиеНаКомиссию.СчетУчетаРасчетовСКонтрагентом;
			Проводка.СубконтоКт.Контрагенты = ВыборкаПринятиеНаКомиссию.Контрагент;
			Проводка.СубконтоКт.Договоры    = ВыборкаПринятиеНаКомиссию.ДоговорКонтрагента;
			
			Проводка.СчетДт        = СтрокаДокумента.КорСчетЗадолженностиБУ;
			Если Проводка.СчетДт.Валютный Тогда
				Проводка.ВалютаДт      = СтрокаДокумента.КорВалютаЗадолженностиБУ;
				Проводка.ВалютнаяСуммаДт = КоэффициентСторно*Движение.ВалютнаяСуммаЗадолженностиБУ;
			КонецЕсли;
			
			Если Проводка.СчетКт.Валютный Тогда
			
				Если СтрокаДокумента.КорВалютаЗадолженностиБУ = ВыборкаПринятиеНаКомиссию.ВалютаРасчетовСКомитентом тогда

					//Если валюта расчетов с комитентом совпадает с валютой расчетов по договору, считаем что и курсы совпадают.
					Проводка.ВалютаКт        = СтрокаДокумента.КорВалютаЗадолженностиБУ;
					Проводка.ВалютнаяСуммаКт = Проводка.ВалютнаяСуммаДт;

				Иначе

					мВалютаРегламентированногоУчета   = глЗначениеПеременной("ВалютаРегламентированногоУчета");
					
					ДанныеОВалютеРасчетовСКомитентом = МодульВалютногоУчета.ПолучитьКурсВалюты(ВыборкаПринятиеНаКомиссию.ВалютаРасчетовСКомитентом,СтруктураПараметров.Период);

					Проводка.ВалютаКт        = ВыборкаПринятиеНаКомиссию.ВалютаРасчетовСКомитентом;
					Проводка.ВалютнаяСуммаКт = КоэффициентСторно*МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Движение.СуммаВыручкиБУ
												,мВалютаРегламентированногоУчета,ВыборкаПринятиеНаКомиссию.ВалютаРасчетовСКомитентом
												,1,ДанныеОВалютеРасчетовСКомитентом.Курс
												,1,ДанныеОВалютеРасчетовСКомитентом.Кратность);

				КонецЕсли;
											
			КонецЕсли;
			
			Проводка.Сумма = КоэффициентСторно*Движение.СуммаВыручкиБУ;
			
			// При списании по инвентаризации начисляется задолженность на сумму поступления
			Если СтрокаДокумента.КодОперацииПартииТоваров = КодыОпераций.СписаниеПоИнвентаризации Тогда
				
				Проводка.Сумма         = КоэффициентСторно*Движение.Стоимость;
				
			КонецЕсли;
			
			//Проводка.НомерЖурнала  = ПолучитьНомерЖурналаБУПоКоду(СтрокаДокумента);
			
			КорСубконто1 = СтрокаДокумента.КорСубконтоЗадолженностиБУ1;
			КорСубконто2 = СтрокаДокумента.КорСубконтоЗадолженностиБУ2;
			КорСубконто3 = СтрокаДокумента.КорСубконтоЗадолженностиБУ3;
			
			ТипЗнчКорСубконто1 = ТипЗнч(КорСубконто1);
			ТипЗнчКорСубконто2 = ТипЗнч(КорСубконто2);
			ТипЗнчКорСубконто3 = ТипЗнч(КорСубконто3);
			
			Для каждого ВидСубконто Из Проводка.СчетДт.ВидыСубконто Цикл
				
				ЗаполнитьСубконтоПоРеквизитам(ВидСубконто, Проводка.СубконтоДт, КорСубконто1, КорСубконто2, КорСубконто3, , СтруктураПараметров);
				
			КонецЦикла;
			
			СтруктураПараметров["ИзмененыДвиженияХозрасчетный"] = Истина;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры//НачислитьЗадолженностьПередКомитентом

// Формирование проводок по начислению дохода от реализации товаров по бух и нал учету,
// Используется в случаях, когда при реализации может быть списан как собственный, так и комиссионный товар
//
Процедура НачислитьДоходОтРеализации(СтрокаДокумента, СтруктураПараметров, Движение, ТипЗаписи = "Прямая")
	
	Если СтрокаДокумента.ОтражатьВБухгалтерскомУчете Тогда
		Учет="Бух";
	ИначеЕсли СтрокаДокумента.ОтражатьВНалоговомУчете Тогда
		Учет="Нал";
	КонецЕсли;
	
	Если Учет = "Бух" Тогда 
		ИмяРегистра = "Хозрасчетный";
	ИначеЕсли Учет = "Нал" Тогда
		ИмяРегистра = "Налоговый";
	Иначе
		Возврат;
	КонецЕсли;
	
	Если ТипЗаписи = "Сторно" Тогда
		КоэффициентСторно = -1;
	Иначе
		КоэффициентСторно = 1;
	КонецЕсли;
	
	// Для проверки добавленных проводок
	НеДобавлять = Ложь;
	
	Проводка = СтруктураПараметров["Движения"+ИмяРегистра].Добавить();
	
	Проводка.Период        = СтруктураПараметров.Период;
	Проводка.Регистратор   = СтруктураПараметров.Регистратор;
	Проводка.Активность    = Истина;
	Проводка.Организация   = СтрокаДокумента.Организация;
	
	Проводка.Содержание = ПолучитьСодержаниеПроводки(СтрокаДокумента, СтруктураПараметров, Проводка.СчетКт);
	
	Если Учет="Бух" Тогда
		
		Проводка.Сумма  = КоэффициентСторно*Движение.СуммаВыручкиБУ; // Сумма выручки по бух. учету
		
		Проводка.СчетДт = СтрокаДокумента.КорСчетЗадолженностиБУ;
		
		Если Проводка.СчетДт.Валютный Тогда
			Проводка.ВалютаДт        = СтрокаДокумента.КорВалютаЗадолженностиБУ;
			Проводка.ВалютнаяСуммаДт = КоэффициентСторно*Движение.ВалютнаяСуммаЗадолженностиБУ;
		КонецЕсли;
		
		Для каждого ВидСубконто Из Проводка.СчетДт.ВидыСубконто Цикл
			ЗаполнитьСубконтоПоРеквизитам(ВидСубконто, Проводка.СубконтоДт, СтрокаДокумента.КорСубконтоЗадолженностиБУ1, СтрокаДокумента.КорСубконтоЗадолженностиБУ2, СтрокаДокумента.КорСубконтоЗадолженностиБУ3, , СтруктураПараметров);
		КонецЦикла;
		
		Проводка.СчетКт = СтрокаДокумента.СчетДоходовБУ;
		
		Для каждого ВидСубконто Из Проводка.СчетКт.ВидыСубконто Цикл
			
			ЗаполнитьСубконтоПоРеквизитам(ВидСубконто, Проводка.СубконтоКт, СтрокаДокумента.КорСубконтоБУ1, СтрокаДокумента.КорСубконтоБУ2, , , СтруктураПараметров);
			Если ВидСубконто.ВидСубконто.ТипЗначения.СодержитТип(ТипЗнч(СтрокаДокумента.СтавкаНДС)) Тогда
				Проводка.СубконтоКт.Вставить(ВидСубконто.ВидСубконто, СтрокаДокумента.СтавкаНДС);
			КонецЕсли;
		КонецЦикла;
		
		//Движения по НДС от реализации
		Если Не Движение.СчетУчета.Забалансовый Тогда

			// Начисление НДС с выручки
			
			Если (Не СтрокаДокумента.КодОперацииПартииТоваров = Перечисления.КодыОперацийПартииТоваров.ВозвратОтПокупателя)
			  И (Не СтрокаДокумента.КодОперацииПартииТоваров = Перечисления.КодыОперацийПартииТоваров.ВозвратОтПокупателяТекущийМесяц) Тогда	
				УчетНДС.НачислитьНДСРеализации(КоэффициентСторно*Движение.СуммаНДСВыручкиБУ, СтрокаДокумента, СтруктураПараметров);
			КонецЕсли;	
			
		КонецЕсли;
		
		
	ИначеЕсли Учет="Нал" Тогда
		
		Проводка.Сумма = КоэффициентСторно*(Движение.СуммаВыручкиБУ - Движение.СуммаНДСВыручкиБУ); // Сумма выручки по нал. учету не включает НДС
		
		// Проверяем, не относится ли к деятельности, облагаемой ЕНВД
		// Доход от продажи может облагаться ЕНВД (что определяется по бух. счету учета)
		Если НЕ ОтноситсяКДеятельностиЕНВДИзСтруктурыПараметров(СтруктураПараметров, СтрокаДокумента.СчетДоходовБУ) Тогда
			
			Проводка.СчетДт = ПланыСчетов.Налоговый.ПоступлениеИВыбытиеИмуществаРаботУслугПрав;
			Проводка.СубконтоДт.УсловияПоступленияИВыбытия = Перечисления.УсловияПоступленияИВыбытияИмущества.ЗаПлату;
			
			Проводка.СчетКт = СтрокаДокумента.СчетДоходовНУ;
			Если Проводка.СчетКт.Количественный Тогда
				//Количество в возврате и так "красное"
				Проводка.КоличествоКт = Движение.Количество;
			КонецЕсли;
			
			//Счет 90.01 в НУ ведется в разрезе номенклатуры, перенесем эту информацию из строки документа
			ЗаполнитьСубконтоПоСписаниюТоваровРегл(Проводка, СтрокаДокумента, Движение, СтруктураПараметров, "Нал");
			
		Иначе // Если доход от деятельности, обл. ЕНВД - проводка в налоговом учете не формируется
			
			НеДобавлять = Истина;

		КонецЕсли;
		
		//Заполним остальные субконто
		
		Для каждого ВидСубконто Из Проводка.СчетДт.ВидыСубконто Цикл
			ЗаполнитьСубконтоПоРеквизитам(ВидСубконто, Проводка.СубконтоДт, СтрокаДокумента.КорСубконтоЗадолженностиБУ1, СтрокаДокумента.КорСубконтоЗадолженностиБУ2, СтрокаДокумента.КорСубконтоЗадолженностиБУ3, , СтруктураПараметров);
		КонецЦикла;
		
		Для каждого ВидСубконто Из Проводка.СчетКт.ВидыСубконто Цикл
			ЗаполнитьСубконтоПоРеквизитам(ВидСубконто, Проводка.СубконтоКт, СтрокаДокумента.КорСубконтоБУ1, СтрокаДокумента.КорСубконтоБУ2, , , СтруктураПараметров);
		КонецЦикла;
		
	КонецЕсли;
	
	// Проверка добавленных проводок
	
	Если Проводка.Сумма = 0 Тогда
		НеДобавлять = Истина;
	КонецЕсли;
	
	// Незаконченные проводки с балансовыми счетами не добавляем
	НеДобавлять = НеДобавлять ИЛИ 
	(   НЕ Проводка.СчетДт.Забалансовый И НЕ ЗначениеЗаполнено(Проводка.СчетКт)	
	ИЛИ НЕ Проводка.СчетКт.Забалансовый И НЕ ЗначениеЗаполнено(Проводка.СчетДт));
	
	// В случае, если проводку добавлять не нужно, удаляем ее из движений
	Если НеДобавлять Тогда
		
		// Удаляем добавленную строку
		СтруктураПараметров["Движения"+ИмяРегистра].Удалить(Проводка);
		
		// Если проводки не добавляются, тогда выход без изменения
		Возврат;
		
	КонецЕсли;
	
	СтруктураПараметров["ИзмененыДвижения"+ИмяРегистра] = Истина;
	
КонецПроцедуры // НачислитьДоходОтРеализации()

Процедура СформироватьПроводкиОтклоненийВСтоимостиПриВозвратеПоставщику(СтруктураПараметров) Экспорт

	Если СтруктураПараметров.Свойство("ИспользоватьРасширеннуюАналитику")
	  И СтруктураПараметров.ИспользоватьРасширеннуюАналитику
	  И УправлениеЗапасамиПартионныйУчет.ПолучитьПараметрУчетнойПолитикиПартионногоУчета("СистемаНалогообложения", "Бух", СтруктураПараметров) = Перечисления.СистемыНалогообложения.Упрощенная Тогда
		Возврат;
	КонецЕсли;	
	
	СтоимостьСписания = 0;
	
	Если СтруктураПараметров.ЕстьСтрокиОтражатьВБухгалтерскомУчете Тогда
	
		Если НЕ СтруктураПараметров.Свойство("СтоимостьСписанияБУ",СтоимостьСписания) Тогда
		
			Возврат;
		
		КонецЕсли;
		
		СформироватьПроводкиОтклоненийВСтоимостиПриВозвратеБух(СтруктураПараметров, СтоимостьСписания);
	КонецЕсли;
		
	Если СтруктураПараметров.ЕстьСтрокиОтражатьВНалоговомУчете Тогда
		
		Если НЕ СтруктураПараметров.Свойство("СтоимостьСписанияНУ",СтоимостьСписания) Тогда
		
			Возврат;
		
		КонецЕсли;
		
		СформироватьПроводкиОтклоненийВСтоимостиПриВозвратеНал(СтруктураПараметров, СтоимостьСписания);
		
	КонецЕсли;

КонецПроцедуры // СформироватьПроводкиОтклоненийВСтоимостиПриВозврате

Процедура СформироватьПроводкиОтклоненийВСтоимостиПриВозвратеБух(СтруктураПараметров, СтоимостьСписания)

	ВозвратНДС = 0;
	
	Если НЕ СтруктураПараметров.Свойство("ВозвратНДС",ВозвратНДС) тогда
		ВозвратНДС = 0;
	КонецЕсли;
	
	ВозвратНДСВал = 0;
	
	Если НЕ СтруктураПараметров.Свойство("ВозвратНДСВал",ВозвратНДСВал) тогда
		ВозвратНДСВал = 0;
	КонецЕсли;
	
	СуммаОтклонения = СтруктураПараметров.СуммаЗадолженностиБУ - СтруктураПараметров.СтоимостьСписанияБУ - ВозвратНДС;
	
	СтоимостьСписанияБУВал = СтруктураПараметров.ТаблицаДвиженийПартииТоваровНаСкладахБух.Итог("ВалютнаяСуммаЗадолженностиБУ");
	СуммаОтклоненияВал = СтруктураПараметров.СуммаЗадолженностиБУВал - СтоимостьСписанияБУВал - ВозвратНДСВал;
	
	Если СуммаОтклонения = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураРеквизитов = УчетНДС.ПолучитьСтруктуруШапкиДокументаПоСсылке(СтруктураПараметров.Регистратор);
	
	Если НЕ ЗначениеЗаполнено(СтруктураРеквизитов.СчетУчетаРасходовБУ) Или НЕ ЗначениеЗаполнено(СтруктураРеквизитов.СчетУчетаДоходовБУ) Тогда
		СтрокаСообщения = "Бухгалтерский учет. Документ " + СтруктураПараметров.Регистратор + ". Не заполнены значения счетов учета доходов и расходов." + Символы.ПС
		+ "Проводка по отклонению в стоимости не сформирована.";
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаСообщения);
		Возврат;
	
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтруктураРеквизитов.СчетУчетаРасчетовПоПретензиям) Тогда
		РасчетыПоПретензиям = СтруктураРеквизитов.СчетУчетаРасчетовСКонтрагентом;
	Иначе
		РасчетыПоПретензиям = СтруктураРеквизитов.СчетУчетаРасчетовПоПретензиям;
	КонецЕсли;
		
	Проводка = СтруктураПараметров.ДвиженияХозрасчетный.Добавить();
	
	Проводка.Период        = СтруктураПараметров.Период;
	Проводка.Регистратор   = СтруктураПараметров.Регистратор;
	Проводка.Активность    = Истина;
	Проводка.Организация   = СтруктураРеквизитов.Организация;
	
	Проводка.Содержание = "Отклонение в стоимости номенклатуры";
		
	// Если стоимость списанных партий меньше стоимости по документу
	Если СуммаОтклонения > 0 Тогда
		Проводка.СчетДт = РасчетыПоПретензиям;
		Проводка.СчетКт = СтруктураРеквизитов.СчетУчетаДоходовБУ;
		Проводка.Сумма  = СуммаОтклонения;
		Если Проводка.СчетДт.Валютный Тогда
			Проводка.ВалютаДт        = СтруктураРеквизитов.ВалютаВзаиморасчетов;
			Проводка.ВалютнаяСуммаДт = СуммаОтклоненияВал;
		КонецЕсли;
		Для каждого ВидСубконто Из Проводка.СчетКт.ВидыСубконто Цикл
			ЗаполнитьСубконтоПоРеквизитам(ВидСубконто, Проводка.СубконтоКт, СтруктураРеквизитов.СтатьяДоходовИРасходов , , , , СтруктураПараметров);
		КонецЦикла;
		Для каждого ВидСубконто Из Проводка.СчетДт.ВидыСубконто Цикл
			ЗаполнитьСубконтоПоРеквизитам(ВидСубконто, Проводка.СубконтоДт, СтруктураРеквизитов.ДоговорКонтрагента, СтруктураРеквизитов.Контрагент, , , СтруктураПараметров);
		КонецЦикла;
	Иначе
	// Если стоимость списанных партий больше стоимости по документу
		Проводка.СчетКт = РасчетыПоПретензиям;
		Проводка.СчетДт = СтруктураРеквизитов.СчетУчетаРасходовБУ;
		Проводка.Сумма  = -СуммаОтклонения;
		Если Проводка.СчетКт.Валютный Тогда
			Проводка.ВалютаКт        = СтруктураРеквизитов.ВалютаВзаиморасчетов;
			Проводка.ВалютнаяСуммаКт = -СуммаОтклоненияВал;
		КонецЕсли;
		Для каждого ВидСубконто Из Проводка.СчетДт.ВидыСубконто Цикл
			ЗаполнитьСубконтоПоРеквизитам(ВидСубконто, Проводка.СубконтоДт, СтруктураРеквизитов.СтатьяДоходовИРасходов , , , , СтруктураПараметров);
		КонецЦикла;
		Для каждого ВидСубконто Из Проводка.СчетКт.ВидыСубконто Цикл
			ЗаполнитьСубконтоПоРеквизитам(ВидСубконто, Проводка.СубконтоКт, СтруктураРеквизитов.ДоговорКонтрагента, СтруктураРеквизитов.Контрагент, , , СтруктураПараметров);
		КонецЦикла;
	КонецЕсли;
	
	СтруктураПараметров["ИзмененыДвиженияХозрасчетный"] = Истина;

КонецПроцедуры // СформироватьПроводкиОтклоненийВСтоимостиПриВозврате

Процедура СформироватьПроводкиОтклоненийВСтоимостиПриВозвратеНал(СтруктураПараметров, СтоимостьСписания)

	ВозвратНДС = 0;
	
	Если НЕ СтруктураПараметров.Свойство("ВозвратНДС",ВозвратНДС) тогда
		ВозвратНДС = 0;
	КонецЕсли;
	
	СуммаОтклонения = СтруктураПараметров.СуммаЗадолженностиБУ - СтруктураПараметров.СтоимостьСписанияБУ - ВозвратНДС;
	
	Если СуммаОтклонения = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураРеквизитов = Новый Структура("СчетУчетаРасходовНУ, СчетУчетаДоходовНУ, Организация, СтатьяДоходовИРасходов, ДоговорКонтрагента, Контрагент");
	УправлениеЗапасамиПартионныйУчет.ПолучитьРеквизитыОбъекта(СтруктураПараметров.Регистратор, СтруктураРеквизитов);

	Если НЕ ЗначениеЗаполнено(СтруктураРеквизитов.СчетУчетаРасходовНУ) Или НЕ ЗначениеЗаполнено(СтруктураРеквизитов.СчетУчетаДоходовНУ) Тогда
		СтрокаСообщения = "Налоговый учет. Документ " + СтруктураПараметров.Регистратор + ". Не заполнены значения счетов учета доходов и расходов." + Символы.ПС
		+ "Проводка по отклонению в стоимости не сформирована.";
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаСообщения);
		Возврат;
	
	КонецЕсли;
	
	ВидУчетаПВ = ?(СтруктураРеквизитов.СтатьяДоходовИРасходов.ПринятиеКналоговомуУчету, Перечисления.ВидыУчетаПоПБУ18.НУ, Перечисления.ВидыУчетаПоПБУ18.ПР);
	Проводка = СтруктураПараметров.ДвиженияНалоговый.Добавить();
	
	Проводка.Период        = СтруктураПараметров.Период;
	Проводка.Регистратор   = СтруктураПараметров.Регистратор;
	Проводка.Активность    = Истина;
	Проводка.Организация   = СтруктураРеквизитов.Организация;

	Проводка.Содержание = "Отклонение в стоимости номенклатуры";
	
	// Если стоимость списанных партий меньше стоимости по документу
	Если СуммаОтклонения > 0  Тогда
		Проводка.СчетДт = ПланыСчетов.Налоговый.ПоступлениеИВыбытиеИмуществаРаботУслугПрав;
		Проводка.ВидУчетаДт = ВидУчетаПВ;
		Проводка.СчетКт = СтруктураРеквизитов.СчетУчетаДоходовНУ;
		Проводка.Сумма  = СуммаОтклонения;
		Для каждого ВидСубконто Из Проводка.СчетКт.ВидыСубконто Цикл
			ЗаполнитьСубконтоПоРеквизитам(ВидСубконто, Проводка.СубконтоКт, СтруктураРеквизитов.СтатьяДоходовИРасходов , , , , СтруктураПараметров);
		КонецЦикла;
		Для каждого ВидСубконто Из Проводка.СчетДт.ВидыСубконто Цикл
			ЗаполнитьСубконтоПоРеквизитам (ВидСубконто,
										  Проводка.СубконтоДт,
										  СтруктураРеквизитов.ДоговорКонтрагента,
										  СтруктураРеквизитов.Контрагент,
										  Перечисления.УсловияПоступленияИВыбытияИмущества.Возврат
										  , , СтруктураПараметров);
		КонецЦикла;
	Иначе
	// Если стоимость списанных партий больше стоимости по документу
		Проводка.СчетКт = ПланыСчетов.Налоговый.ПоступлениеИВыбытиеИмуществаРаботУслугПрав;
		Проводка.ВидУчетаКт = ВидУчетаПВ;
		Проводка.СчетДт = СтруктураРеквизитов.СчетУчетаРасходовНУ;
		Проводка.Сумма  = -СуммаОтклонения;
		Для каждого ВидСубконто Из Проводка.СчетДт.ВидыСубконто Цикл
			ЗаполнитьСубконтоПоРеквизитам(ВидСубконто, Проводка.СубконтоДт, СтруктураРеквизитов.СтатьяДоходовИРасходов , , , , СтруктураПараметров);
		КонецЦикла;
		Для каждого ВидСубконто Из Проводка.СчетКт.ВидыСубконто Цикл
			ЗаполнитьСубконтоПоРеквизитам (ВидСубконто,
										  Проводка.СубконтоКт,
										  СтруктураРеквизитов.ДоговорКонтрагента,
										  СтруктураРеквизитов.Контрагент
										  , , , СтруктураПараметров);
		КонецЦикла;
	КонецЕсли;
	
	СтруктураПараметров["ИзмененыДвиженияНалоговый"] = Истина;

КонецПроцедуры // СформироватьПроводкиОтклоненийВСтоимостиПриВозврате

Процедура ДвижениеНДС(ТаблицаДокументов,ФормироватьПроводки = Истина) Экспорт
	УчетНДС.ДвижениеНДСпоТаблицеДокументов(ТаблицаДокументов,ФормироватьПроводки);
КонецПроцедуры



////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ, ФОРМИРУЮЩИЕ СТРУКТУРУ ДАННЫХ ДЛЯ ПЕРЕДАЧИ В РЕГЛ. УЧЕТ

Процедура ОпределитьСоставКолонокТаблицаСписанныхПартийБух(СтруктураПараметров, СписокИспользуемыхОпераций, СтруктураКолонок) Экспорт
	
	УправлениеЗапасамиПартионныйУчет.ОпределитьСоставКолонокТаблицаСписанныхПартийОбщихДляВсехВидовУчета(СтруктураПараметров, СписокИспользуемыхОпераций, СтруктураКолонок);
	
	КодыОпераций = СтруктураПараметров.КодыОпераций;
	// Колонки базовые
	СтруктураКолонок.Вставить("СчетУчета");
	
	СтруктураКолонок.Вставить("СчетДоходовБУ");
	СтруктураКолонок.Вставить("СчетРасходовБУ");
	СтруктураКолонок.Вставить("СчетУчетаБУ");
	СтруктураКолонок.Вставить("ПринятыеСчетУчетаБУ");
	
	СтруктураКолонок.Вставить("КорСчетБУ");
	СтруктураКолонок.Вставить("ПринятыеКорСчетБУ");
	СтруктураКолонок.Вставить("КорСубконтоБУ1");
	СтруктураКолонок.Вставить("КорСубконтоБУ2");
	СтруктураКолонок.Вставить("КорСубконтоБУ3");
	
	СтруктураКолонок.Вставить("СтатьяДоходовИРасходов");
	
	//Колонки с распределенными суммами для НДС
	СтруктураКолонок.Вставить("СуммаВыручкиБУ");
	СтруктураКолонок.Вставить("СуммаНДСВыручкиБУ");
	СтруктураКолонок.Вставить("КоличествоПоступление");
	
	// Колонки по набору условий
	Если не СписокИспользуемыхОпераций.НайтиПоЗначению(КодыОпераций.Реализация ) = неопределено
		ИЛИ не СписокИспользуемыхОпераций.НайтиПоЗначению(КодыОпераций.РеализацияРозница) = неопределено
		ИЛИ не СписокИспользуемыхОпераций.НайтиПоЗначению(КодыОпераций.РеализацияКомиссия) = неопределено
		ИЛИ не СписокИспользуемыхОпераций.НайтиПоЗначению(КодыОпераций.ВозвратПоставщику) = неопределено
		ИЛИ не СписокИспользуемыхОпераций.НайтиПоЗначению(КодыОпераций.ПередачаТарыКонтрагенту) = неопределено
		ИЛИ не СписокИспользуемыхОпераций.НайтиПоЗначению(КодыОпераций.ОтложеннаяОтгрузка) = неопределено
		ИЛИ не СписокИспользуемыхОпераций.НайтиПоЗначению(КодыОпераций.ВозвратОтПокупателя) = неопределено
		ИЛИ не СписокИспользуемыхОпераций.НайтиПоЗначению(КодыОпераций.СписаниеПоИнвентаризации) = неопределено
		ИЛИ не СписокИспользуемыхОпераций.НайтиПоЗначению(КодыОпераций.СписаниеПоОрдеру) = неопределено
		Тогда

		СтруктураКолонок.Вставить("КорСчетЗадолженностиБУ");
		СтруктураКолонок.Вставить("КорСубконтоЗадолженностиБУ1");
		СтруктураКолонок.Вставить("КорСубконтоЗадолженностиБУ2");
		СтруктураКолонок.Вставить("КорСубконтоЗадолженностиБУ3");
		СтруктураКолонок.Вставить("ВалютнаяСуммаЗадолженностиБУ");
		СтруктураКолонок.Вставить("КорВалютаЗадолженностиБУ");
	КонецЕсли;
	
КонецПроцедуры

Процедура ОпределитьСоставКолонокТаблицаСписанныхПартийНал(СтруктураПараметров, СписокИспользуемыхОпераций, СтруктураКолонок) Экспорт
	
	УправлениеЗапасамиПартионныйУчет.ОпределитьСоставКолонокТаблицаСписанныхПартийОбщихДляВсехВидовУчета(СтруктураПараметров, СписокИспользуемыхОпераций, СтруктураКолонок);
	
	// Колонки базовые
	СтруктураКолонок.Вставить("ПринятыеСчетУчетаНУ");
	СтруктураКолонок.Вставить("СчетДоходовНУ");
	СтруктураКолонок.Вставить("СчетРасходовНУ");
	СтруктураКолонок.Вставить("СчетУчетаНУ");
	
	СтруктураКолонок.Вставить("КорСчетНУ");
	СтруктураКолонок.Вставить("ПринятыеКорСчетНУ");
	СтруктураКолонок.Вставить("КорСубконтоНУ1");
	СтруктураКолонок.Вставить("КорСубконтоНУ2");
	СтруктураКолонок.Вставить("КорСубконтоНУ3");
	
	СтруктураКолонок.Вставить("КорСубконтоБУ1");
	СтруктураКолонок.Вставить("КорСубконтоБУ2");
	СтруктураКолонок.Вставить("КорСубконтоБУ3");
	
	СтруктураКолонок.Вставить("ПостояннаяРазница", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	СтруктураКолонок.Вставить("ВременнаяРазница", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	
	СтруктураКолонок.Вставить("Период");

КонецПроцедуры

