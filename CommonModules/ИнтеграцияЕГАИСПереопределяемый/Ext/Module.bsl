
//#Область ПрограммныйИнтерфейс

// Процедура вызывается при загрузке после записи алкогольной продукции в базу.
//
// Параметры:
//  АлкогольнаяПродукция - СправочникСсылка.КлассификаторАлкогольнойПродукцииЕГАИС - загружаемая алкогольная продукция,
//  ЕстьИзменения - Булево - признак наличия изменений.
//
Процедура ПриЗагрузкеАлкогольнойПродукции(АлкогольнаяПродукция, ЕстьИзменения) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Процедура вызывается перед записью организации в базу.
//
// Параметры:
//  Организация - СправочникОбъект.КлассификаторОрганизацийЕГАИС - загружаемая организация.
//
Процедура ПриЗагрузкеОрганизации(Организация) Экспорт
	
	//++ НЕ ГОСИС
	Если ЗначениеЗаполнено(Организация.ИНН) И Не Организация.Сопоставлено Тогда
		РезультатПоиска = ИнтеграцияЕГАИСУТКлиентСервер.ИННКППУжеИспользуетсяВИнформационнойБазе(Организация.ИНН, Организация.КПП);
		
		Если ЗначениеЗаполнено(РезультатПоиска) Тогда
			
			Организация.Контрагент     = РезультатПоиска.Ссылка;
			Организация.ТорговыйОбъект = РезультатПоиска.Ссылка;
			Организация.Сопоставлено   = Истина;
			
		КонецЕсли;
	КонецЕсли;
	//-- НЕ ГОСИС
	
	Возврат;
	
КонецПроцедуры

// Процедура вызывается при загрузке ТТН (перед записью).
//
// Параметры:
//  ТТН_Объект - ДокументОбъект.ТТНВходящаяЕГАИС - загружаемая ТТН.
//
Процедура ПриЗагрузкеТТНВходящаяЕГАИС(ТТНВходящаяОбъект) Экспорт
	
	//++ НЕ ГОСИС
	// Заполнение склада и организации
	РеквизитыОрганизацииЕГАИС = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ТТНВходящаяОбъект.Грузополучатель, "Контрагент, ТорговыйОбъект");
	
	ТТНВходящаяОбъект.Организация = РеквизитыОрганизацииЕГАИС.Контрагент;
	ТТНВходящаяОбъект.ТорговыйОбъект = РеквизитыОрганизацииЕГАИС.ТорговыйОбъект;
	
	// Заполнение документа основания
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ТТНИсходящаяЕГАИС.Ссылка            КАК Ссылка,
	|	ТТНИсходящаяЕГАИС.ДокументОснование КАК ДокументОснование
	|ИЗ
	|	Документ.ТТНИсходящаяЕГАИС КАК ТТНИсходящаяЕГАИС
	|ГДЕ
	|	ТТНИсходящаяЕГАИС.Идентификатор = &Идентификатор");
	
	Запрос.УстановитьПараметр("Идентификатор", ТТНВходящаяОбъект.Идентификатор);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	ТТНИсходящая = Неопределено;
	
	Если Выборка.Следующий() Тогда
		ТТНИсходящая = Выборка.Ссылка;
		Если ЗначениеЗаполнено(Выборка.ДокументОснование) Тогда
			ТТНВходящаяОбъект.ДокументОснование = Выборка.ДокументОснование;
		КонецЕсли;
	КонецЕсли;
	
	// Заполнение серий
	ПараметрыУказанияСерий = ГосударственныеИнформационныеСистемыПереопределяемый.ПараметрыУказанияСерийФормыОбъекта(ТТНВходящаяОбъект, Документы.ТТНВходящаяЕГАИС);;
	
	Если ЗначениеЗаполнено(ТТНВходящаяОбъект.ДокументОснование) Тогда // скопировать ТЧ из ТТНИсходящая
		
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	ТТНИсходящаяЕГАИСТовары.НомерСтроки                   КАК НомерСтроки,
		|	ТТНИсходящаяЕГАИСТовары.АлкогольнаяПродукция          КАК АлкогольнаяПродукция,
		|	ТТНИсходящаяЕГАИСТовары.Номенклатура                  КАК Номенклатура,
		|	ТТНИсходящаяЕГАИСТовары.Характеристика                КАК Характеристика,
		|	ТТНИсходящаяЕГАИСТовары.Серия                         КАК Серия,
		|	ТТНИсходящаяЕГАИСТовары.ИдентификаторУпаковки         КАК ИдентификаторУпаковки,
		|	ТТНИсходящаяЕГАИСТовары.Количество                    КАК Количество,
		|	ТТНИсходящаяЕГАИСТовары.Сумма                         КАК Сумма,
		|	ТТНИсходящаяЕГАИСТовары.Цена                          КАК Цена,
		|	ТТНИсходящаяЕГАИСТовары.НомерПартии                   КАК НомерПартии,
		|	ТТНИсходящаяЕГАИСТовары.Справка2.РегистрационныйНомер КАК НомерСправки2Поставщика
		|ИЗ
		|	Документ.ТТНИсходящаяЕГАИС.Товары КАК ТТНИсходящаяЕГАИСТовары
		|ГДЕ
		|	ТТНИсходящаяЕГАИСТовары.Ссылка = &Ссылка
		|";
		Запрос.УстановитьПараметр("Ссылка", ТТНИсходящая);
		Результат = Запрос.Выполнить();
		
		ТаблицаТТН = ТТНВходящаяОбъект.Товары.Выгрузить(, "НомерСправки2Поставщика,ИдентификаторСтроки,Справка2");
		
		ТТНВходящаяОбъект.Товары.Загрузить(Результат.Выгрузить());
		
		Для Каждого СтрокаТТН Из ТаблицаТТН Цикл
			СтруктураПоиска = Новый Структура("НомерСправки2Поставщика", СтрокаТТН.НомерСправки2Поставщика);
			СтрокиТовары = ТТНВходящаяОбъект.Товары.НайтиСтроки(СтруктураПоиска);
			
			Для Каждого СтрокаТовары Из СтрокиТовары Цикл
				СтрокаТовары.ИдентификаторСтроки = СтрокаТТН.ИдентификаторСтроки;
				СтрокаТовары.Справка2            = СтрокаТТН.Справка2;
			КонецЦикла;
		КонецЦикла;
		
		//пересчитываем количество и цену, если алкогольная продукция неупакованная
		Для каждого СтрокаТТНВходящая Из ТТНВходящаяОбъект.Товары Цикл
			Если СтрокаТТНВходящая.АлкогольнаяПродукция.ТипПродукции = Перечисления.ТипыПродукцииЕГАИС.Неупакованная Тогда
				Если СтрокаТТНВходящая.Номенклатура.ОбъемДАЛ <> 0 Тогда
					СтрокаТТНВходящая.Количество = СтрокаТТНВходящая.Количество * СтрокаТТНВходящая.Номенклатура.ОбъемДАЛ;
					СтрокаТТНВходящая.Цена       = СтрокаТТНВходящая.Цена / СтрокаТТНВходящая.Номенклатура.ОбъемДАЛ;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	Иначе // сгенерировать новые серии
		
		ПараметрыЗаполнения = ПараметрыЗаполненияСерий();
		ПараметрыЗаполнения.ОрганизацияЕГАИС = ТТНВходящаяОбъект.Грузополучатель;
		ПараметрыЗаполнения.ЗаполнятьБезЗапросаСправок = Истина;
		ПараметрыЗаполнения.ПараметрыУказанияСерий = ПараметрыУказанияСерий;
		
		СобственныйТорговыйОбъектЗначениеПоУмолчанию = "";
		ЗначенияПоУмолчаниюНеСопоставленныхОбъектов(, СобственныйТорговыйОбъектЗначениеПоУмолчанию);
		
		Если ТипЗнч(ТТНВходящаяОбъект.ТорговыйОбъект) = ТипЗнч(СобственныйТорговыйОбъектЗначениеПоУмолчанию) Тогда
			ЗаполнитьПараметрЗаполненияСклад(ТТНВходящаяОбъект, ПараметрыЗаполнения);
		КонецЕсли;
		
		Результат = ИнтеграцияЕГАИСПереопределяемый.ЗаполнитьСгенерироватьСерии(
			ТТНВходящаяОбъект.Товары,
			Неопределено,
			ПараметрыЗаполнения);
			
	КонецЕсли;
	
	ГосударственныеИнформационныеСистемыПереопределяемый.ЗаполнитьСтатусыУказанияСерий(ТТНВходящаяОбъект, ПараметрыУказанияСерий);
	//-- НЕ ГОСИС
	
	Возврат;
	
КонецПроцедуры

// Процедура вызывается при загрузке акта подтверждения ТТН.
//
// Параметры:
//  ТТН_Объект - ДокументОбъект.ТТНИсходящаяЕГАИС - подтверждаемая ТТН,
//  ОтказОтТТН - Булево - признак загрузки акта отказа от ТТН,
//  ЕстьРасхождения - Булево - признак загрузки акта расхождений.
//
Процедура ПриЗагрузкеАктаПодтвержденияТТН(ТТН_Объект, ОтказОтТТН, ЕстьРасхождения) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Процедура вызывается при загрузке подтверждения акта расхождений ТТН.
//
// Параметры:
//  ТТН - ДокументСсылка.ТТНВходящаяЕГАИС - подтверждаемая ТТН,
//  ОтказОтАкта - Булево - признак загрузки отказа от акта расхождений ТТН,
//
Процедура ПриЗагрузкеПодтвержденияАктаРасхожденийТТН(ТТН, ОтказОтАкта) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Процедура вызывается при изменении статуса обработки документа.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка - ссылка на документ,
//  ПредыдущийСтатус - ПеречислениеСсылка.СтатусыОбработки* - предыдущий статус обработки,
//  НовыйСтатус - ПеречислениеСсылка.СтатусыОбработки* - новый статус обработки.
//  ДополнительныеПараметры - Структура - см. функцию ИнтеграцияЕГАИС.ПараметрыОбновленияСтатуса().
//
Процедура ПриИзмененииСтатусаДокумента(ДокументСсылка, ПредыдущийСтатус, НовыйСтатус, ДополнительныеПараметры = Неопределено) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Вызывается при определении настроек обмена с УТМ.
//
// Параметры:
//  ТранспортныйМодуль - Структура - данные транспортного модуля.
//
Процедура ПриПолученииНастроекУТМ(ТранспортныйМодуль) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Вызывается при отказе от входящей ТТН. Нужно реализовать алгоритм отмены проведения связанных поступлений.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ТТНВходящаяЕГАИС - ссылка на документ.
//
Процедура ОтменитьПроведениеПоступленияТоваровПриОтказеОтТТН(ДокументСсылка) Экспорт
	
	//++ НЕ ГОСИС
	УстановитьПривилегированныйРежим(Истина);
	
	ДокументПоступления = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументСсылка, "ДокументПоступления");
	
	Если ЗначениеЗаполнено(ДокументПоступления) Тогда
		
		ДокументПоступленияОбъект = ДокументПоступления.ПолучитьОбъект();
		
		Если ДокументПоступленияОбъект.Проведен Тогда
			ДокументПоступленияОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		Иначе
			ДокументПоступленияОбъект.Записать();
		КонецЕсли;
		
		ДокументПоступленияОбъект.УстановитьПометкуУдаления(Истина);
		
	КонецЕсли;
	//-- НЕ ГОСИС
	
	Возврат;
	
КонецПроцедуры

// Возвращает таблицу расхождений между входящей ТТН и документом поступления товаров.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ТТНВходящаяЕГАИС - ссылка на документ.
//
// Возвращаемое значение:
//  ТаблицаЗначений - таблица расхождений с колонками:
//   * АлкогольнаяПродукция,
//   * Справка2,
//   * Количество,
//   * КоличествоФакт,
//   * Расхождение,
//   * ИдентификаторСтроки.
//
Функция ТаблицаРасхожденийТТН_ЕГАИС(ДокументСсылка) Экспорт
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("АлкогольнаяПродукция");
	Результат.Колонки.Добавить("Справка2");
	Результат.Колонки.Добавить("Количество");
	Результат.Колонки.Добавить("КоличествоФакт");
	Результат.Колонки.Добавить("Расхождение");
	Результат.Колонки.Добавить("ИдентификаторСтроки");
	
	
	Возврат Результат;
	
КонецФункции

// Заполняет таблицу штрихкодов алкогольной продукции входящей ТТН.
//
// Параметры:
//  ДокументСсылка     - ДокументСсылка.ТТНВходящаяЕГАИС - ссылка на документ.
//  ЗаполняемаяТаблица - ДанныеФормыКоллеция - заполняемая таблица.
//
Процедура ЗаполнитьТаблицуШтрихкодовНеМаркируемойПродукцииТТН_ЕГАИС(ДокументСсылка, ЗаполняемаяТаблица) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ШтрихкодыНоменклатуры.Штрихкод КАК Штрихкод,
	               |	ТТНВходящаяЕГАИСТовары.АлкогольнаяПродукция КАК АлкогольнаяПродукция
	               |ИЗ
	               |	Документ.ТТНВходящаяЕГАИС.Товары КАК ТТНВходящаяЕГАИСТовары
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлассификаторАлкогольнойПродукцииЕГАИС КАК КлассификаторАлкогольнойПродукцииЕГАИС
	               |		ПО ТТНВходящаяЕГАИСТовары.АлкогольнаяПродукция = КлассификаторАлкогольнойПродукцииЕГАИС.Ссылка
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыАлкогольнойПродукции КАК ВидыАлкогольнойПродукции
	               |		ПО (КлассификаторАлкогольнойПродукцииЕГАИС.ВидПродукции = ВидыАлкогольнойПродукции.Ссылка)
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Штрихкоды КАК ШтрихкодыНоменклатуры
	               |		ПО ТТНВходящаяЕГАИСТовары.Номенклатура = ШтрихкодыНоменклатуры.Владелец
	               |			И ТТНВходящаяЕГАИСТовары.Характеристика = ШтрихкодыНоменклатуры.ХарактеристикаНоменклатуры
	               |ГДЕ
	               |	ТТНВходящаяЕГАИСТовары.Ссылка = &ДокументСсылка
	               |	И НЕ ВидыАлкогольнойПродукции.Маркируемый";
	
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
	
	ЗаполняемаяТаблица.Загрузить(Запрос.Выполнить().Выгрузить());

КонецПроцедуры

// Заполняет таблицу сопоставленных справок 2 документа документа ТТН входящая.
//
// Параметры:
//  ДокументСсылка     - ДокументСсылка.ТТНВходящаяЕГАИС - ссылка на документ.
//  ЗаполняемаяТаблица - ДанныеФормыКоллеция - заполняемая таблица.
//
Процедура ЗаполнитьТаблицуСопоставленныхСправок2ТТН_ЕГАИС(ДокументСсылка, ЗаполняемаяТаблица) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ТТНВходящаяЕГАИСТовары.Справка2 КАК Справка2,
	|	ТТНВходящаяЕГАИСТовары.Номенклатура КАК Номенклатура,
	|	ТТНВходящаяЕГАИСТовары.Характеристика КАК Характеристика
	|ИЗ
	|	Документ.ТТНВходящаяЕГАИС.Товары КАК ТТНВходящаяЕГАИСТовары
	|ГДЕ
	|	ТТНВходящаяЕГАИСТовары.Ссылка = &ДокументСсылка
	|	И ТТНВходящаяЕГАИСТовары.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|	И ТТНВходящаяЕГАИСТовары.Справка2 <> ЗНАЧЕНИЕ(Справочник.Справки2ЕГАИС.ПустаяСсылка)";
	
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
	
	ЗаполняемаяТаблица.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

// Получить представление валюты регламентированного учета.
// 
// Возвращаемое значение:
//  Строка - Представление валюты.
//
Функция ПредставлениеВалютыРегламентированногоУчета() Экспорт
	
	Возврат Константы.ВалютаРегламентированногоУчета.Получить();
	
КонецФункции

// Получить представление документа поступления.
//
// Параметры:
//  Номер - Строка - номер документа поступления,
//  Дата - Дата - дата документа поступления.
// 
// Возвращаемое значение:
//  Строка - представление документа поступления.
//
Функция ПредставлениеДокументаПоступления(Номер, Дата) Экспорт
	
	
	Возврат "";
	
КонецФункции

// В функции нужно реализовать алгоритм получения данных документа поступления.
//
// Параметры:
//  ДокументПоступления - ДокументСсылка - ссылка на документ поступления товаров.
// 
// Возвращаемое значение:
//  Структура - данные поступления. Структура со свойствами:
//   * ТекстПоступлениеТоваров - Строка - представление документа поступления товаров и услуг,
//   * ПоступлениеТоваровУслуг - ДокументСсылка - ссылка на документ поступления товаров и услуг.
//
Функция ДанныеДокументаПоступления(ДокументПоступления) Экспорт
	
	
	Возврат Неопределено;
	
КонецФункции

// Функция проверяет наличие расхождений между ТТН и товарами накладной.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ТТНВходящаяЕГАИС - проверяемая ТТН,
//  ДокументПоступления - ДокументСсылка - проверяемое поступление товаров.
//
// Возвращаемое значение:
//  Булево - Истина, если есть расхождения, иначе - Ложь.
//
Функция ЕстьРасхожденияМеждуДокументомПоступленияИТТНЕГАИС(ДокументСсылка, ДокументПоступления) Экспорт
	
	//++ НЕ ЕГАИС
	Если ТипЗнч(ДокументПоступления) = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда
		Возврат ИнтеграцияЕГАИСУТ.ЕстьРасхожденияМеждуДокументомПеремещениеТоваровИТТНЕГАИС(ДокументСсылка, ДокументПоступления);
	ИначеЕсли ТипЗнч(ДокументПоступления) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
		Возврат ИнтеграцияЕГАИСУТ.ЕстьРасхожденияМеждуДокументомПоступлениеТоваровУслугИТТНЕГАИС(ДокументСсылка, ДокументПоступления);
	КонецЕсли;
	//-- НЕ ЕГАИС
	
КонецФункции

// Получить представление номенклатуры.
//
// Параметры:
//  Номенклатура - ОпределяемыйТип.Номенклатура - ссылка на номенклатуру,
//  ХарактеристикаНоменклатуры - ОпределяемыйТип.ХарактеристикаНоменклатуры - ссылка на характеристику номенклатуры,
//  Упаковка - ОпределяемыйТип.Упаковка - ссылка на упаковку.
// 
// Возвращаемое значение:
//  Строка - представление номенклатуры.
//
Функция ПредставлениеНоменклатуры(Номенклатура, ХарактеристикаНоменклатуры, Упаковка) Экспорт
	
	//++ НЕ ГОСИС
	Возврат НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
		Строка(Номенклатура),
		Строка(ХарактеристикаНоменклатуры),
		Упаковка);
	//-- НЕ ГОСИС
	
	Возврат "";
	
КонецФункции

// Возвращает текст запроса списка распоряжений на оформление документа передача в регистр №2 ЕГАИС.
// 
// Возвращаемое значение:
//  Строка - текст запроса.
//
Функция ТекстЗапросаСпискаРаспоряженийНаОформлениеДокументаПередачаВРегистр2ЕГАИС() Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОстаткиАлкогольнойПродукцииЕГАИСОстатки.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	ОстаткиАлкогольнойПродукцииЕГАИСОстатки.Справка2 КАК Справка2,
	|	ОстаткиАлкогольнойПродукцииЕГАИСОстатки.ОрганизацияЕГАИС КАК ОрганизацияЕГАИС,
	|	ОстаткиАлкогольнойПродукцииЕГАИСОстатки.СвободныйОстатокОстаток - ЕСТЬNULL(КОЛИЧЕСТВО(РАЗЛИЧНЫЕ АкцизныеМаркиЕГАИС.АкцизнаяМарка), 0) КАК КПередаче
	|ИЗ
	|	РегистрНакопления.ОстаткиАлкогольнойПродукцииЕГАИС.Остатки(
	|			,
	|			ОрганизацияЕГАИС.ТорговыйОбъект.ВидСклада = ЗНАЧЕНИЕ(Перечисление.ВидыСкладов.Розничный)
	|				ИЛИ ОрганизацияЕГАИС.ТорговыйОбъект.ВидСклада = ЗНАЧЕНИЕ(Перечисление.ВидыСкладов.НТТ)) КАК ОстаткиАлкогольнойПродукцииЕГАИСОстатки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиОбменаЕГАИС КАК НастройкиОбменаЕГАИС
	|		ПО ОстаткиАлкогольнойПродукцииЕГАИСОстатки.ОрганизацияЕГАИС.Код = НастройкиОбменаЕГАИС.ИдентификаторФСРАР
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АкцизныеМаркиЕГАИС КАК АкцизныеМаркиЕГАИС
	|		ПО ОстаткиАлкогольнойПродукцииЕГАИСОстатки.ОрганизацияЕГАИС = АкцизныеМаркиЕГАИС.ОрганизацияЕГАИС
	|			И ОстаткиАлкогольнойПродукцииЕГАИСОстатки.Справка2 = АкцизныеМаркиЕГАИС.Справка2
	|ГДЕ
	|	ОстаткиАлкогольнойПродукцииЕГАИСОстатки.СвободныйОстатокОстаток > 0
	|	И АкцизныеМаркиЕГАИС.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыАкцизныхМарок.ВНаличии), ЗНАЧЕНИЕ(Перечисление.СтатусыАкцизныхМарок.КПостановкеНаБаланс))
	|
	|СГРУППИРОВАТЬ ПО
	|	ОстаткиАлкогольнойПродукцииЕГАИСОстатки.АлкогольнаяПродукция,
	|	ОстаткиАлкогольнойПродукцииЕГАИСОстатки.Справка2,
	|	ОстаткиАлкогольнойПродукцииЕГАИСОстатки.ОрганизацияЕГАИС,
	|	ОстаткиАлкогольнойПродукцииЕГАИСОстатки.СвободныйОстатокОстаток
	|
	|ИМЕЮЩИЕ
	|	ОстаткиАлкогольнойПродукцииЕГАИСОстатки.СвободныйОстатокОстаток - ЕСТЬNULL(КОЛИЧЕСТВО(РАЗЛИЧНЫЕ АкцизныеМаркиЕГАИС.АкцизнаяМарка), 0) > 0";
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Возвращает текст запроса для движений по регистру Серии номенклатуры.
// 
// Возвращаемое значение:
//  Строка - текст запроса.
//
Функция ТекстЗапросаДвижениеСерийТоваров(ИмяТаблицы) Экспорт
	
	ТекстЗапроса = "";
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаСерии.Номенклатура                                     КАК Номенклатура,
	|	ТаблицаСерии.Характеристика                                   КАК Характеристика,
	|	ТаблицаСерии.Серия                                            КАК Серия,
	|	ТаблицаСерии.Количество                                       КАК Количество,
	|	&Ссылка                                                       КАК Документ,
	|	&Период                                                       КАК Период,
	|	&Ссылка                                                       КАК Регистратор
	|ИЗ
	|	Документ.%ИмяТаблицы%.Товары КАК ТаблицаСерии
	|
	|ГДЕ
	|	ТаблицаСерии.Ссылка = &Ссылка
	|	И ТаблицаСерии.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ИмяТаблицы%", ИмяТаблицы);
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Возвращает имя формы рабочего места по оформлению входящих ТТН.
// 
// Возвращаемое значение:
//  Строка - имя формы.
//
Функция ИмяФормыРабочегоМестаПоОформлениюДокументаТТНВходящаяЕГАИС() Экспорт
	
	ИмяФормы = "Документ.ТТНВходящаяЕГАИС.Форма.ФормаСписка";
	
	
	Возврат ИмяФормы;
	
КонецФункции

// Получить количество возможных документов поступления товаров для сопоставления.
//
// Параметры:
//  Организация - ОпределяемыйТип.ОрганизацияКонтрагентЕГАИС - ссылка на собственную организацию,
//  ТорговыйОбъект - ОпределяемыйТип.ТорговыйОбъектЕГАИС - ссылка на торговый объект,
//  Контрагент - ОпределяемыйТип.ОрганизацияКонтрагентЕГАИС - поставщик.
// 
// Возвращаемое значение:
//  Число - количество документов.
//
Функция ПолучитьКоличествоВозможныхДокументовПоступленияТоваров(Организация, ТорговыйОбъект, Контрагент) Экспорт
	
	КоличествоНакладных = 0;
	
	//++ НЕ ЕГАИС
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ПоступлениеТоваровУслуг.Ссылка
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриходныйОрдерНаТовары КАК ПриходныйОрдерНаТовары
	|		ПО ПриходныйОрдерНаТовары.Ссылка = ПоступлениеТоваровУслуг.СкладОрдер
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ТТНВходящаяЕГАИС КАК ТТНВходящаяЕГАИС
	|		ПО ТТНВходящаяЕГАИС.ДокументОснование = ПоступлениеТоваровУслуг.Ссылка
	|ГДЕ
	|	НЕ ПоступлениеТоваровУслуг.ПометкаУдаления
	|	И ПоступлениеТоваровУслуг.ЕстьАлкогольнаяПродукция
	|	И ПоступлениеТоваровУслуг.Организация = &Организация
	|	И ПоступлениеТоваровУслуг.Контрагент = &ПоставщикКонтрагент
	|	И ВЫБОР
	|		КОГДА НЕ ПриходныйОрдерНаТовары.Ссылка ЕСТЬ NULL
	|			ТОГДА ПриходныйОрдерНаТовары.Склад = &Склад
	|		ИНАЧЕ
	|			ВЫРАЗИТЬ(ПоступлениеТоваровУслуг.СкладОрдер КАК Справочник.Склады) = &Склад
	|	КОНЕЦ
	|	И ТТНВходящаяЕГАИС.Ссылка ЕСТЬ NULL
	|");
	
	Запрос.УстановитьПараметр("Организация",         Организация);
	Запрос.УстановитьПараметр("Склад",               ТорговыйОбъект);
	Запрос.УстановитьПараметр("ПоставщикКонтрагент", Контрагент);
	
	КоличествоНакладных = Запрос.Выполнить().Выгрузить().Количество();
	//-- НЕ ЕГАИС
	
	Возврат КоличествоНакладных;
	
КонецФункции

// Возвращает признак разрешения розничной продажи без сопоставления с классификатором ЕГАИС.
// 
// Возвращаемое значение:
//  Булево - если Истина, продажа разрешена, иначе - Ложь.
//
Функция РазрешатьПродажуАлкогольнойПродукцииБезСопоставленияЕГАИС() Экспорт
	
	
	Возврат Ложь;
	
КонецФункции

// Процедура формирования движений по регистру "Движения серий товаров".
//
// Параметры:
//	ДополнительныеСвойства - Структура - дополнительные свойства для записи движений 
//	Движения - КоллекцияДвижений - движения по которым двигается документ
//	Отказ - Булево - признак отказа от проведения документа
//
Процедура ОтразитьДвиженияСерийТоваров(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	Таблица= ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаДвиженияСерийТоваров;
	
	Если Отказ ИЛИ Таблица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Движения.ДвиженияСерийТоваров.Записывать = Истина;
	Движения.ДвиженияСерийТоваров.Загрузить(Таблица);
	
	Возврат;
	
КонецПроцедуры

//#Область Служебный программный интерфейс
Процедура УстановитьЗначениеДатаНачалаРегистрацииРозничныхПродажВЕГАИС() Экспорт
	
	
	Возврат;
	
КонецПроцедуры

Процедура УстановитьЗначениеДатаНачалаПримененияПриказа164() Экспорт
	
	
	Возврат;
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыАП() Экспорт
	
	
	Возврат;
	
КонецПроцедуры
//

//#Область ОбработчикиСобытийДокументов

// Вызывается при вводе документа на основании, при выполнении метода Заполнить или при интерактивном вводе нового.
//
// Параметры:
//  ДокументОбъект - ДокументОбъект - заполняемый документ,
//  ДанныеЗаполнения - Произвольный - значение, которое используется как основание для заполнения,
//  ТекстЗаполнения - Строка, Неопределено - текст, используемый для заполнения документа,
//  СтандартнаяОбработка - Булево - признак выполнения стандартной (системной) обработки события.
//
Процедура ОбработкаЗаполненияДокумента(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Экспорт
	
	ДокументОбъект.Ответственный = Пользователи.ТекущийПользователь();
	
	Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.АктПостановкиНаБалансЕГАИС") Тогда
		ОбработкаЗаполненияАктаПостановкиНаБалансЕГАИС(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	КонецЕсли;
	
	Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.АктСписанияЕГАИС") Тогда
		ОбработкаЗаполненияАктаСписанияЕГАИС(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
		Если ДокументОбъект.ВидДокумента = Перечисления.ВидыДокументовЕГАИС.АктСписанияИзРегистра1 Тогда
			Документы.АктСписанияЕГАИС.ПодобратьСправки2(ДокументОбъект);
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ТТНИсходящаяЕГАИС") Тогда
		ОбработкаЗаполненияТТНИсходящейЕГАИС(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
		Документы.ТТНИсходящаяЕГАИС.ПодобратьСправки2(ДокументОбъект);
	КонецЕсли;
	
	Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ПередачаВРегистр2ЕГАИС") Тогда
		
		Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура")
			И ДанныеЗаполнения.Свойство("ЗаполнитьТоварыКОформлению") Тогда
			
			ДокументОбъект.ОрганизацияЕГАИС = ДанныеЗаполнения.ОрганизацияЕГАИС;
			
			ТаблицаТовары = Новый ТаблицаЗначений;
			ТаблицаТовары.Колонки.Добавить("АлкогольнаяПродукция", Новый ОписаниеТипов("СправочникСсылка.КлассификаторАлкогольнойПродукцииЕГАИС"));
			ТаблицаТовары.Колонки.Добавить("Справка2",             Новый ОписаниеТипов("СправочникСсылка.Справки2ЕГАИС"));
			ТаблицаТовары.Колонки.Добавить("Количество",           Новый ОписаниеТипов("Число"));
			
			Для Каждого СтрокаТЧ Из ДанныеЗаполнения.Товары Цикл
				ЗаполнитьЗначенияСвойств(ТаблицаТовары.Добавить(), СтрокаТЧ);
			КонецЦикла;
			
			Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	Т.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
			|	Т.Справка2 КАК Справка2,
			|	Т.Количество КАК Количество
			|ПОМЕСТИТЬ втТовары
			|ИЗ
			|	&Товары КАК Т
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Т.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
			|	Т.Справка2 КАК Справка2,
			|	СУММА(Т.Количество) КАК Количество
			|ПОМЕСТИТЬ Товары
			|ИЗ
			|	втТовары КАК Т
			|
			|СГРУППИРОВАТЬ ПО
			|	Т.АлкогольнаяПродукция,
			|	Т.Справка2
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ТабличнаяЧасть.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
			|	ТабличнаяЧасть.Справка2 КАК Справка2,
			|	МАКСИМУМ(СоответствиеНоменклатурыЕГАИС.Номенклатура) КАК Номенклатура,
			|	МАКСИМУМ(СоответствиеНоменклатурыЕГАИС.Характеристика) КАК Характеристика
			|ПОМЕСТИТЬ СопоставленыеПозиции
			|ИЗ
			|	Товары КАК ТабличнаяЧасть
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеНоменклатурыЕГАИС КАК СоответствиеНоменклатурыЕГАИС
			|		ПО (СоответствиеНоменклатурыЕГАИС.АлкогольнаяПродукция = ТабличнаяЧасть.АлкогольнаяПродукция)
			|			И (СоответствиеНоменклатурыЕГАИС.Справка2 = ТабличнаяЧасть.Справка2)
			|ГДЕ
			|	НЕ СоответствиеНоменклатурыЕГАИС.АлкогольнаяПродукция ЕСТЬ NULL
			|
			|СГРУППИРОВАТЬ ПО
			|	ТабличнаяЧасть.АлкогольнаяПродукция,
			|	ТабличнаяЧасть.Справка2
			|
			|ИМЕЮЩИЕ
			|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СоответствиеНоменклатурыЕГАИС.Номенклатура) = 1 И
			|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СоответствиеНоменклатурыЕГАИС.Характеристика) < 2
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	СопоставленыеПозиции.Номенклатура КАК Номенклатура,
			|	СопоставленыеПозиции.Характеристика КАК Характеристика,
			|	ТабличнаяЧасть.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
			|	ТабличнаяЧасть.Справка2 КАК Справка2,
			|	ВЫБОР
			|		КОГДА ТабличнаяЧасть.АлкогольнаяПродукция.ТипПродукции = ЗНАЧЕНИЕ(Перечисление.ТипыПродукцииЕГАИС.Неупакованная)
			|			ТОГДА ВЫБОР
			|					КОГДА ЕСТЬNULL(СопоставленыеПозиции.Номенклатура.ОбъемДАЛ, 1) <> 0
			|						ТОГДА ТабличнаяЧасть.Количество / ЕСТЬNULL(СопоставленыеПозиции.Номенклатура.ОбъемДАЛ, 1)
			|					ИНАЧЕ 0
			|				КОНЕЦ
			|		ИНАЧЕ ТабличнаяЧасть.Количество
			|	КОНЕЦ КАК Количество,
			|	ВЫБОР
			|		КОГДА ТабличнаяЧасть.АлкогольнаяПродукция.ТипПродукции = ЗНАЧЕНИЕ(Перечисление.ТипыПродукцииЕГАИС.Неупакованная)
			|			ТОГДА ВЫБОР
			|					КОГДА ЕСТЬNULL(СопоставленыеПозиции.Номенклатура.ОбъемДАЛ, 1) <> 0
			|						ТОГДА ТабличнаяЧасть.Количество / ЕСТЬNULL(СопоставленыеПозиции.Номенклатура.ОбъемДАЛ, 1)
			|					ИНАЧЕ 0
			|				КОНЕЦ
			|		ИНАЧЕ ТабличнаяЧасть.Количество
			|	КОНЕЦ КАК КоличествоУпаковок
			|ИЗ
			|	Товары КАК ТабличнаяЧасть
			|		ЛЕВОЕ СОЕДИНЕНИЕ СопоставленыеПозиции КАК СопоставленыеПозиции
			|		ПО ТабличнаяЧасть.АлкогольнаяПродукция = СопоставленыеПозиции.АлкогольнаяПродукция
			|			И ТабличнаяЧасть.Справка2 = СопоставленыеПозиции.Справка2
			|			И (НЕ СопоставленыеПозиции.АлкогольнаяПродукция ЕСТЬ NULL)");
			Запрос.УстановитьПараметр("Товары", ТаблицаТовары);
			
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				ЗаполнитьЗначенияСвойств(ДокументОбъект.Товары.Добавить(), Выборка);
			КонецЦикла;
			
		Иначе
			
			ОбработкаЗаполненияПередачиВРегистр2ЕГАИС(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
			Документы.ПередачаВРегистр2ЕГАИС.ПодобратьСправки2(ДокументОбъект);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ВозвратИзРегистра2ЕГАИС") Тогда
		ОбработкаЗаполненияВозвратаИзРегистра2ЕГАИС(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
		Документы.ВозвратИзРегистра2ЕГАИС.ПодобратьСправки2(ДокументОбъект);
	КонецЕсли;
	
	Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ЧекЕГАИС") Тогда
		ОбработкаЗаполненияЧекаЕГАИС(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	КонецЕсли;
	
	Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ЧекЕГАИСВозврат") Тогда
		ОбработкаЗаполненияЧекаЕГАИСВозврат(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	КонецЕсли;
	
	Если ИнтеграцияЕГАИСКлиентСервер.ЕстьРеквизитОбъекта(ДокументОбъект,"СтатусПроверкиИПодбора") Тогда
		ДокументОбъект.СтатусПроверкиИПодбора = Перечисления.СтатусыПроверкиИПодбораЕГАИС.НеВыполнялось;
	КонецЕсли;
	
КонецПроцедуры

// Вызывается расширением формы при необходимости проверки заполнения реквизитов при записи или при проведении документа в форме,
// а также при выполнении метода ПроверитьЗаполнение.
//
// Параметры:
//  ДокументОбъект - ДокументОбъект - проверяемый документ,
//  Отказ - Булево - признак отказа от проведения документа,
//  ПроверяемыеРеквизиты - Массив - массив путей к реквизитам, для которых будет выполнена проверка заполнения,
//  МассивНепроверяемыхРеквизитов - Массив - массив путей к реквизитам, для которых не будет выполнена проверка заполнения.
//
Процедура ОбработкаПроверкиЗаполнения(ДокументОбъект, Отказ, ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов) Экспорт
	
	Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.АктПостановкиНаБалансЕГАИС") Тогда
		
		ПроверитьЗаполнениеКоличества(ДокументОбъект, ПроверяемыеРеквизиты, Отказ);
		ПроверитьЗаполнениеХарактеристик(ДокументОбъект, МассивНепроверяемыхРеквизитов, Отказ);
		
	ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.АктСписанияЕГАИС") Тогда
		
		ПроверитьЗаполнениеКоличества(ДокументОбъект, ПроверяемыеРеквизиты, Отказ);
		ПроверитьЗаполнениеХарактеристик(ДокументОбъект, МассивНепроверяемыхРеквизитов, Отказ);
		
	ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ВозвратИзРегистра2ЕГАИС") Тогда
		
		ПроверитьЗаполнениеКоличества(ДокументОбъект, ПроверяемыеРеквизиты, Отказ);
		ПроверитьЗаполнениеХарактеристик(ДокументОбъект, МассивНепроверяемыхРеквизитов, Отказ);
		
	ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ЗапросАкцизныхМарокЕГАИС") Тогда
		
		ПроверитьЗаполнениеХарактеристик(ДокументОбъект, МассивНепроверяемыхРеквизитов, Отказ);
		
	ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ПередачаВРегистр2ЕГАИС") Тогда
		
		ПроверитьЗаполнениеКоличества(ДокументОбъект, ПроверяемыеРеквизиты, Отказ);
		ПроверитьЗаполнениеХарактеристик(ДокументОбъект, МассивНепроверяемыхРеквизитов, Отказ);
		
	ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ТТНВходящаяЕГАИС") Тогда
		
		ПроверитьЗаполнениеХарактеристик(ДокументОбъект, МассивНепроверяемыхРеквизитов, Отказ);
		
		ПроверитьЗаполнениеСерий(ДокументОбъект,
								ПараметрыУказанияСерий(ДокументОбъект, Документы.ТТНВходящаяЕГАИС),
								Отказ,
								МассивНепроверяемыхРеквизитов);
		
	ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ТТНИсходящаяЕГАИС") Тогда
		
		СтатусЕГАИС = Неопределено;
		Если ЗначениеЗаполнено(ДокументОбъект.Ссылка) Тогда
			
			Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	СтатусыДокументовЕГАИС.Статус КАК Статус
			|ИЗ
			|	РегистрСведений.СтатусыДокументовЕГАИС КАК СтатусыДокументовЕГАИС
			|ГДЕ
			|	СтатусыДокументовЕГАИС.Документ = &Ссылка");
			Запрос.УстановитьПараметр("Ссылка", ДокументОбъект.Ссылка);
			
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				СтатусЕГАИС = Выборка.Статус;
			КонецЕсли;
			
		КонецЕсли;
		
		РедактированиеФормыДоступно = СтатусЕГАИС = Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.Черновик
		                            Или СтатусЕГАИС = Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ОшибкаПередачи
		                            Или СтатусЕГАИС = Неопределено;
		
		Если РедактированиеФормыДоступно Тогда
			
			КлючевыеРеквизитыТабличнойЧасти = Новый Массив;
			КлючевыеРеквизитыТабличнойЧасти.Добавить("АлкогольнаяПродукция");
			КлючевыеРеквизитыТабличнойЧасти.Добавить("Справка2");
			ПроверитьНаличиеДублейСтрокТЧ(
				ДокументОбъект,
				"Товары",
				КлючевыеРеквизитыТабличнойЧасти,
				Отказ,,
				Ложь);
			
			ПроверитьЗаполнениеКоличества(ДокументОбъект, ПроверяемыеРеквизиты, Отказ);
			ПроверитьЗаполнениеХарактеристик(ДокументОбъект, МассивНепроверяемыхРеквизитов, Отказ);
			
		Иначе
			
			МассивНепроверяемыхРеквизитов.Добавить("Товары.КоличествоУпаковок");
			МассивНепроверяемыхРеквизитов.Добавить("Товары.Номенклатура");
			МассивНепроверяемыхРеквизитов.Добавить("Товары.Характеристика");
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ЧекЕГАИС") Тогда
		
		ПроверитьЗаполнениеКоличества(ДокументОбъект, ПроверяемыеРеквизиты, Отказ);
		ПроверитьЗаполнениеХарактеристик(ДокументОбъект, МассивНепроверяемыхРеквизитов, Отказ);
		
	ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ЧекЕГАИСВозврат") Тогда
		
		ПроверитьЗаполнениеКоличества(ДокументОбъект, ПроверяемыеРеквизиты, Отказ);
		ПроверитьЗаполнениеХарактеристик(ДокументОбъект, МассивНепроверяемыхРеквизитов, Отказ);
		
	ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("СправочникОбъект.ШтрихкодыУпаковокТоваров") Тогда
		
		ИспользоватьХарактеристики = ПолучитьФункциональнуюОпцию("ИспользованиеХарактеристикНоменклатуры");
		Если Не ИспользоватьХарактеристики Или Не ДокументОбъект.Номенклатура.ВестиУчетПоХарактеристикам Тогда
			МассивНепроверяемыхРеквизитов.Добавить("Характеристика");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Вызывается при проведении документа. Выполняется в транзакции записи.
//
// Параметры:
//  ДокументОбъект - ДокументОбъект - проводимый документ,
//  Отказ - Булево - признак отказа от проведения документа,
//  РежимПроведения - РежимПроведенияДокумента - текущий режим проведения.
//
Процедура ОбработкаПроведения(ДокументОбъект, Отказ, РежимПроведения) Экспорт
	
	
	Возврат;
	
КонецПроцедуры

// Возникает перед выполнением записи документа. Вызывается после начала транзакции записи, но до начала записи документа.
//
// Параметры:
//  ДокументОбъект - ДокументОбъект - записываемый документ,
//  Отказ - Булево - признак отказа от записи,
//  РежимЗаписи - РежимЗаписиДокумента - текущий режим записи документа,
//  РежимПроведения - РежимПроведенияДокумента - текущий режим проведения документа.
//
Процедура ПередЗаписью(ДокументОбъект, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	
	Возврат;
	
КонецПроцедуры

//#КонецОбласти

// Проверяет возможность использования регистр №2 для организации.
//
// Параметры:
//  ОрганизацияЕГАИС - СправочникСсылка.КлассификаторОрганизацийЕГАИС - ссылка на организацию в классификаторе ЕГАИС.
// 
// Возвращаемое значение:
//  Булево - Истина, если для организации можно использовать регистр №2.
//
Функция ИспользоватьРегистр2(ОрганизацияЕГАИС) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ОрганизацииЕГАИС.ТорговыйОбъект.ВидСклада КАК ТипСклада
	|ИЗ
	|	РегистрСведений.НастройкиОбменаЕГАИС КАК НастройкиОбменаЕГАИС
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлассификаторОрганизацийЕГАИС КАК ОрганизацииЕГАИС
	|		ПО ОрганизацииЕГАИС.Код = НастройкиОбменаЕГАИС.ИдентификаторФСРАР
	|ГДЕ
	|	ОрганизацииЕГАИС.Ссылка = &ОрганизацияЕГАИС
	|");
	
	Запрос.УстановитьПараметр("ОрганизацияЕГАИС", ОрганизацияЕГАИС);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Возврат (Выборка.ТипСклада = Перечисления.ВидыСкладов.Розничный
		ИЛИ Выборка.ТипСклада = Перечисления.ВидыСкладов.НТТ);
	
КонецФункции

// Записывает соответствие между номенклатурой и классификатором ЕГАИС из табличной части документа.
//
// Параметры:
//  ДокументОбъект - ДокументОбъект - документ, содержащий табличную часть Товары.
//  ЗаписыватьСправку2 - Булево - признак сопоставления по справке 2.
//  СопоставлятьПоИдентификаторуУпаковки - Булево - признак сопоставления по идентификатору.
//  СопоставлятьПоСерии - Булево - признак сопоставления по серии.
//
Процедура ЗаписатьСоответствиеНоменклатуры(ДокументОбъект, ЗаписыватьСправку2 = Ложь, СопоставлятьПоИдентификаторуУпаковки = Ложь, СопоставлятьПоСерии = Истина) Экспорт
	
	//++ НЕ ГОСИС
	РозничныеПродажи.СопоставитьАлкогольнуюПродукциюСНоменклатурой(ДокументОбъект,
		"АлкогольнаяПродукция",
		ЗаписыватьСправку2,
		СопоставлятьПоИдентификаторуУпаковки,
		СопоставлятьПоСерии);
	//-- НЕ ГОСИС
	
	Возврат;
	
КонецПроцедуры

// Заполняет таблицу данными о действующих лицензиях на продажу алкогольной продукции.
//
// Параметры:
//  ТаблицаЛицензий - ТаблицаЗначений - таблица для заполнения. Колонки:
//   * Лицензиат     - ОпределяемыйТип.ОрганизацияКонтрагентЕГАИС - контрагент, для которого нужно получить лицензию,
//   * ДатаТТН       - Дата - дата документа, на которую нужно получить действующую лицензию,
//   * Наименование  - Строка - представление лицензии,
//   * ДатаНачала    - Дата - дата начала действия лицензии,
//   * ДатаОкончания - Дата - дата окончания действия лицензии,
//   * КемВыдана     - Строка - наименование организации, выдавшей лицензию.
//
Процедура ЗаполнитьТаблицуЛицензийНаАлкоголь(ТаблицаЛицензий) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаЛицензий", ТаблицаЛицензий);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаЛицензий.Лицензиат КАК Лицензиат,
	|	ТаблицаЛицензий.ДатаТТН КАК ДатаТТН
	|ПОМЕСТИТЬ ИсходныеДанные
	|ИЗ
	|	&ТаблицаЛицензий КАК ТаблицаЛицензий
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИсходныеДанные.Лицензиат КАК Лицензиат,
	|	ИсходныеДанные.ДатаТТН КАК ДатаТТН,
	|	МАКСИМУМ(ЛицензииПоставщиковАлкогольнойПродукции.ДатаОкончания) КАК ДатаОкончания
	|ПОМЕСТИТЬ ДатыОкончанияЛицензий
	|ИЗ
	|	ИсходныеДанные КАК ИсходныеДанные
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЛицензииПоставщиковАлкогольнойПродукции КАК ЛицензииПоставщиковАлкогольнойПродукции
	|		ПО ИсходныеДанные.Лицензиат = ЛицензииПоставщиковАлкогольнойПродукции.Владелец
	|			И (ИсходныеДанные.ДатаТТН МЕЖДУ ЛицензииПоставщиковАлкогольнойПродукции.ДатаНачала И ЛицензииПоставщиковАлкогольнойПродукции.ДатаОкончания)
	|
	|СГРУППИРОВАТЬ ПО
	|	ИсходныеДанные.Лицензиат,
	|	ИсходныеДанные.ДатаТТН
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДатыОкончанияЛицензий.Лицензиат КАК Лицензиат,
	|	ДатыОкончанияЛицензий.ДатаТТН КАК ДатаТТН,
	|	МАКСИМУМ(ЛицензииПоставщиковАлкогольнойПродукции.Ссылка) КАК Лицензия
	|ПОМЕСТИТЬ ЛицензииНаАлкоголь
	|ИЗ
	|	Справочник.ЛицензииПоставщиковАлкогольнойПродукции КАК ЛицензииПоставщиковАлкогольнойПродукции
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДатыОкончанияЛицензий КАК ДатыОкончанияЛицензий
	|		ПО ЛицензииПоставщиковАлкогольнойПродукции.ДатаОкончания = ДатыОкончанияЛицензий.ДатаОкончания
	|			И ЛицензииПоставщиковАлкогольнойПродукции.Владелец = ДатыОкончанияЛицензий.Лицензиат
	|
	|СГРУППИРОВАТЬ ПО
	|	ДатыОкончанияЛицензий.Лицензиат,
	|	ДатыОкончанияЛицензий.ДатаТТН
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЛицензииНаАлкоголь.Лицензиат КАК Лицензиат,
	|	ЛицензииНаАлкоголь.ДатаТТН КАК ДатаТТН,
	|	ЛицензииНаАлкоголь.Лицензия.Наименование КАК Наименование,
	|	ЛицензииНаАлкоголь.Лицензия.ДатаНачала КАК ДатаНачала,
	|	ЛицензииНаАлкоголь.Лицензия.ДатаОкончания КАК ДатаОкончания,
	|	ЛицензииНаАлкоголь.Лицензия.КемВыдана КАК КемВыдана
	|ИЗ
	|	ЛицензииНаАлкоголь КАК ЛицензииНаАлкоголь";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Лицензиат", Выборка.Лицензиат);
		ПараметрыОтбора.Вставить("ДатаТТН", Выборка.ДатаТТН);
		
		МассивСтрок = ТаблицаЛицензий.НайтиСтроки(ПараметрыОтбора);
		Для Каждого СтрокаТаблицы Из МассивСтрок Цикл
			ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Выборка);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

// Настраивает подключаемое оборудование в форме,
// устанавливает флаг ИспользоватьПодключаемоеОборудование в форме.
//
// Параметры:
//  Форма - УправляемаяФорма - форма, в которой необходимо настроить подключаемое оборудование,
//  ПрефиксыЭлементовФормы - Строка - строка имен табличных частей, разделенных запятыми, в которых нужно настроить видимость команд.
//
Процедура НастроитьПодключаемоеОборудование(Форма, ПрефиксыЭлементовФормы = "Товары") Экспорт
	
	ТипыПодключенногоОборудования = Форма.ПоддерживаемыеТипыПодключаемогоОборудования;
	
	ИспользоватьПодключаемоеОборудование = ПолучитьФункциональнуюОпцию("ИспользоватьПодключаемоеОборудование");
	ПользовательАвторизовался 			 = ТипЗнч(Пользователи.АвторизованныйПользователь()) = Тип("СправочникСсылка.Пользователи");
	
	Форма.ИспользоватьПодключаемоеОборудование =
		ИспользоватьПодключаемоеОборудование
		И ПользовательАвторизовался
		И ТипыПодключенногоОборудования <> Неопределено;
	
КонецПроцедуры

// В функции нужно определить значения по умолчанию, которые будут подставляться в
// реквизиты не сопоставленных элементов справочника.
//
// Параметры:
//  СобственнаяОрганизация - ОпределяемыйТип.ОрганизацияКонтрагентЕГАИС - значение по умолчанию для собственной организации,
//  СобственныйТорговыйОбъект - ОпределяемыйТип.ТорговыйОбъектЕГАИС - значение по умолчанию для собственного торгового объекта,
//  СторонняяОрганизация - ОпределяемыйТип.ОрганизацияКонтрагентЕГАИС - значение по умолчанию для сторонней организации,
//  СтороннийТорговыйОбъект - ОпределяемыйТип.ТорговыйОбъектЕГАИС - значение по умолчанию для стороннего торгового объекта.
//
Процедура ЗначенияПоУмолчаниюНеСопоставленныхОбъектов(
		СобственнаяОрганизация = Неопределено,
		СобственныйТорговыйОбъект = Неопределено,
		СторонняяОрганизация = Неопределено,
		СтороннийТорговыйОбъект = Неопределено) Экспорт
	
	//++ НЕ ЕГАИС
	СобственнаяОрганизация = Справочники.Организации.ПустаяСсылка();
	СобственныйТорговыйОбъект = Справочники.Склады.ПустаяСсылка();
	СторонняяОрганизация = Справочники.Контрагенты.ПустаяСсылка();
	СтороннийТорговыйОбъект = Справочники.Контрагенты.ПустаяСсылка();
	//-- НЕ ЕГАИС
	
	Возврат;
	
КонецПроцедуры


// Данные сопоставления организации ЕГАИС с объектами предприятия.
//
// Параметры:
//  КодВФСРАР - Строка - код организации в ФСРАР.
// 
// Возвращаемое значение:
//  Структура - структура со свойствами:
//   * ОрганизацияЕГАИС - СправочникСсылка.КлассификаторОрганизацийЕГАИС, Неопределено - ссылка на организацию в классификаторе ЕГАИС,
//   * Организация - ОпределяемыйТип.ОрганизацияКонтрагентЕГАИС - сопоставленная организация предприятия,
//   * ТорговыйОбъект - ОпределяемыйТип.ТорговыйОбъектЕГАИС - сопоставленный торговый объект предприятия,
//   * КПП - Строка - КПП организации,
//   * ИНН - Строка - ИНН организации.
//
Функция ДанныеСопоставленияОрганизацииЕГАИС(КодВФСРАР) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Склады.Подразделение                         КАК Подразделение,
	|	КлассификаторОрганизацийЕГАИС.ТорговыйОбъект КАК ТорговыйОбъект,
	|	КлассификаторОрганизацийЕГАИС.Контрагент     КАК Организация,
	|	КлассификаторОрганизацийЕГАИС.Код            КАК КодВФСРАР
	|ПОМЕСТИТЬ Данные
	|ИЗ
	|	Справочник.КлассификаторОрганизацийЕГАИС КАК КлассификаторОрганизацийЕГАИС
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК Склады
	|		ПО Склады.Ссылка = КлассификаторОрганизацийЕГАИС.ТорговыйОбъект
	|ГДЕ
	|	КлассификаторОрганизацийЕГАИС.Код = &КодВФСРАР
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КлассификаторОрганизацийЕГАИС.Ссылка                                        КАК ОрганизацияЕГАИС,
	|	ЕСТЬNULL(Данные.Организация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) КАК Организация,
	|	ЕСТЬNULL(Данные.Организация.ИНН, """")                                      КАК ИНН,
	|	ЕСТЬNULL(Данные.ТорговыйОбъект, ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка))   КАК ТорговыйОбъект,
	|	ЕСТЬNULL(Данные.Организация.КПП, """")                                      КАК КПП
	|ИЗ
	|	Данные КАК Данные
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторОрганизацийЕГАИС КАК КлассификаторОрганизацийЕГАИС
	|			ПО КлассификаторОрганизацийЕГАИС.Код = Данные.КодВФСРАР");
	
	Запрос.УстановитьПараметр("КодВФСРАР", КодВФСРАР);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		ВозвращаемоеЗначение = Новый Структура;
		ВозвращаемоеЗначение.Вставить("ОрганизацияЕГАИС", Выборка.ОрганизацияЕГАИС);
		ВозвращаемоеЗначение.Вставить("ТорговыйОбъект",   Выборка.ТорговыйОбъект);
		ВозвращаемоеЗначение.Вставить("Организация",      Выборка.Организация);
		ВозвращаемоеЗначение.Вставить("ИНН",              Выборка.ИНН);
		ВозвращаемоеЗначение.Вставить("КПП",              Выборка.КПП);
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
	Возврат Неопределено;
	
КонецФункции

// Возвращает ИНН и КПП переданной организации и торгового объекта.
//
// Параметры:
//  Организация - ОпределяемыйТип.ОрганизацияКонтрагентЕГАИС - ссылка на организацию, реквизиты которой нужно определить,
//  ТорговыйОбъект - ОпределяемыйТип.ТорговыйОбъектЕГАИС - ссылка на торговый объект для определения КПП.
// 
// Возвращаемое значение:
//  Структура - структура со свойствами:
//   * КПП - Строка - КПП организации,
//   * ИНН - Строка - ИНН организации.
//
Функция ИННКППСопоставленнойОрганизации(Организация, ТорговыйОбъект) Экспорт
	
	ВозвращаемоеЗначение = Неопределено;
	
	Если ТипЗнч(Организация) = Тип("СправочникСсылка.Контрагенты") Тогда
		Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Контрагенты.ИНН КАК ИНН,
		|	Контрагенты.КПП КАК КПП
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	Контрагенты.Ссылка = &Организация");
	Иначе
		Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Организации.ИНН КАК ИНН,
		|	Организации.КПП КАК КПП
		|ИЗ
		|	Справочник.Организации  КАК Организации 
		|ГДЕ 
		|Организации.Ссылка = &Организация");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Организация"   , Организация);
	Запрос.УстановитьПараметр("ТорговыйОбъект", ТорговыйОбъект);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		ВозвращаемоеЗначение = Новый Структура;
		ВозвращаемоеЗначение.Вставить("ИНН", Выборка.ИНН);
		ВозвращаемоеЗначение.Вставить("КПП", Выборка.КПП);
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// В функции нужно реализовать поиск организации предприятия по ИНН и/или КПП.
//
// Параметры:
//  ИНН - Строка - ИНН искомой организации,
//  КПП - Строка - КПП искомой организации.
// 
// Возвращаемое значение:
//  ОпределяемыйТип.ОрганизацияКонтрагентЕГАИС - найденная организация,
//  Неопределено - организация не найдена.
//
Функция ОрганизацияПоИННКПП(ИНН, КПП) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Выборка.Ссылка
	|ИЗ
	|	Справочник.Организации КАК Выборка
	|ГДЕ
	|	Выборка.ИНН = &ИНН И
	|	Выборка.КПП = &КПП";
	
	Запрос.УстановитьПараметр("ИНН", ИНН);
	Запрос.УстановитьПараметр("КПП", КПП);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Возвращает список значений идентификаторов организаций и их представлений
//
// Параметры:
//  ВключаяДату - Дата - В состав идентификатора может быть включено представление даты маркировки.
//              - Неопределено - В состав идентификатора представление даты не включается.
//
// Возвращаемое значение:
//  СписокЗначений - Список идентификаторов
//   * Значение - Строка - Идентификатор организации для генерации штрихкода, содержащий символы цифр.
//   * Представление - Строка - Представление идентификатора для отображения пользователю.
//
Функция ИдентификаторыОрганизации(ВключаяДату = Неопределено, ТолькоКодФСРАР = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	1 КАК Порядок,
		|	Организации.ИНН КАК ИдентификаторОрганизации,
		|	&ТипИдентификатораИНН КАК ТипИдентификатора
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	НЕ Организации.ПометкаУдаления
		|	И НЕ Организации.ИНН = """"
		|	И &ТолькоКодФСРАР = ЛОЖЬ
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	2,
		|	НастройкиОбменаЕГАИС.ИдентификаторФСРАР,
		|	&ТипИдентификатораКодФСРАР
		|ИЗ
		|	РегистрСведений.НастройкиОбменаЕГАИС КАК НастройкиОбменаЕГАИС
		|
		|УПОРЯДОЧИТЬ ПО
		|	Порядок,
		|	ТипИдентификатора";
	
	Запрос.УстановитьПараметр("ТолькоКодФСРАР", ТолькоКодФСРАР);
	Если ВключаяДату = Неопределено Тогда
		Запрос.УстановитьПараметр("ТипИдентификатораИНН",
		                          НСтр("ru = 'ИНН'"));
		
		Запрос.УстановитьПараметр("ТипИдентификатораКодФСРАР",
		                          НСтр("ru = 'Код ФСРАР'"));
	Иначе
		Запрос.УстановитьПараметр("ТипИдентификатораИНН",
		                          НСтр("ru = 'ИНН + дата'"));
		
		Запрос.УстановитьПараметр("ТипИдентификатораКодФСРАР",
		                          НСтр("ru = 'Код ФСРАР + дата'"));
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	СписокИдентификаторовОрганизации = Новый СписокЗначений;
	ШаблонПредставления = НСтр("ru = '%1: %2'");
	
	Пока Выборка.Следующий() Цикл
		
		Если ВключаяДату = Неопределено Тогда
			ИдентификаторОрганизации = Выборка.ИдентификаторОрганизации;
		Иначе
			ИдентификаторОрганизации = Выборка.ИдентификаторОрганизации + Формат(ВключаяДату, "ДФ=yyMMdd"); // Установленный формат даты в GS1-128
		КонецЕсли;
		
		ПредставлениеИдентификатора = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонПредставления,
			Выборка.ТипИдентификатора,
			ИдентификаторОрганизации);
		
		СписокИдентификаторовОрганизации.Добавить(ИдентификаторОрганизации, ПредставлениеИдентификатора);
	КонецЦикла;
	
	Возврат СписокИдентификаторовОрганизации;
	
КонецФункции

// Проверяет наличие права создания котрагента у текущего пользователя.
//
// Возвращаемое значение:
//  Булево - Истина, если есть право создания контрагента, Ложь в обратном случае.
//
Функция ЕстьПравоСозданияКонтрагента() Экспорт
	
	Возврат ПравоДоступа("Добавление", Метаданные.Справочники.Контрагенты)
		И ПравоДоступа("Добавление", Метаданные.Справочники.Организации);
	
КонецФункции

// В функции нужно реализовать поиск контрагента и торгового объекта контрагента (партнера) по ИНН и/или КПП.
//
// Параметры:
//  ИНН - Строка - ИНН искомого контрагента,
//  КПП - Строка - КПП искомого контрагента.
// 
// Возвращаемое значение:
//  Структура - структура со свойствами:
//   * Контрагент - ОпределяемыйТип.ОрганизацияКонтрагентЕГАИС - найденный контрагент,
//   * ТорговыйОбъект - ОпределяемыйТип.ТорговыйОбъектЕГАИС - найденный торговый объект контрагента (партнер).
//  Неопределено - контрагент не найден.
//
Функция КонтрагентТорговыйОбъектПоИННКПП(ИНН, КПП) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	Контрагенты.Ссылка
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.ИНН = &ИНН
	|	И Контрагенты.КПП = &КПП";
	
	Запрос.УстановитьПараметр("ИНН",ИНН);
	Запрос.УстановитьПараметр("КПП",КПП);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Получает контрагента торгового объекта.
//
// Параметры:
//  ТорговыйОбъект - ОпределяемыйТип.ТорговыйОбъектЕГАИС - Торговый объект, для которого необходимо получить контрагента.
//
// Возвращаемое значение:
//   ОпределяемыйТип.ОрганизацияКонтрагентЕГАИС - контрагент торгового объекта.
//
Функция КонтрагентТорговогоОбъекта(ТорговыйОбъект) Экспорт
	
	Возврат Неопределено;
	
КонецФункции

// Получает торгового объект контрагента.
//
// Параметры:
//  ТорговыйОбъект - ОпределяемыйТип.ОрганизацияКонтрагентЕГАИС - Контрагент.
//
// Возвращаемое значение:
//   ОпределяемыйТип.ТорговыйОбъектЕГАИС - Торговый объект.
//
Функция ТорговыйОбъектКонтрагента(Контрагент) Экспорт
	
	//++ НЕ ГОСИС
	Возврат Контрагент;
	//-- НЕ ГОСИС
	
	Возврат Неопределено;
	
КонецФункции

// Возвращает фактический адрес торгового объекта для чека ЕГАИС.
//
// Параметры:
//  ТорговыйОбъект - ОпределяемыйТип.ТорговыйОбъектЕГАИС - ссылка на торговый объект для определения адреса.
//
// Возвращаемое значение:
//  Строка - адрес торгового объекта.
//
Функция АдресТорговогоОбъекта(ТорговыйОбъект) Экспорт
	
	Возврат УправлениеКонтактнойИнформацией.ПолучитьАдресИзКонтактнойИнформации(ТорговыйОбъект,"Фактический");
	
КонецФункции

// Возвращает признак использования торговых объектов для контрагентов.
//
// Возвращаемое значение:
//  Булево - признак использования торговых объектов.
//
Функция ИспользоватьТорговыеОбъектыКонтрагентов() Экспорт
	
	Возврат Ложь;
	
КонецФункции

// Проверяет наличие права создания поступления товаров у текущего пользователя.
//
// Возвращаемое значение:
//  Булево - Истина, если есть право создания поступления товаров, Ложь в обратном случае.
//
Функция ЕстьПравоСозданияПоступления() Экспорт
	
	Возврат ПравоДоступа("Добавление", Метаданные.Документы.ПоступлениеТоваровУслуг);
	
КонецФункции

// Проверяет наличие права изменения поступления товаров у текущего пользователя.
//
// Возвращаемое значение:
//  Булево - Истина, если есть право изменения поступления товаров, Ложь в обратном случае.
//
Функция ЕстьПравоИзмененияПоступления() Экспорт
	
	Возврат ПравоДоступа("Изменение", Метаданные.Документы.ПоступлениеТоваровУслуг);
	
КонецФункции

// Возвращает имя документа поступления товаров, который создается на основании входящей ТТН.
//
Функция ИмяДокументаПоступлениеТоваров() Экспорт
	
	Возврат "ПоступлениеТоваровУслуг";
	
КонецФункции

// Возвращает имя документа перемещения товаров, который создается на основании входящей ТТН.
//
Функция ИмяДокументаПеремещениеТоваров() Экспорт
	
	Возврат "ПеремещениеТоваров";
	
КонецФункции

// Проверить сопоставление классификаторов
//
// Параметры:
//  ДокументСсылка - ДокументСсылка - Документ, для которого необходимо проверить соответствие классификаторов.
//  УникальныйИдентификатор - УникальныйИдентификатор - Идентификатор формы открытого документа.
// 
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   *ЕстьНеСопоставленныеТовары - Булево - Признак наличия несопоставленных товаров.
//   *НеСопоставленныеТовары - Строка - Адрес по временном хранилище.
//
Функция ПроверитьСопоставлениеКлассификаторовПрикладногоДокумента(ДокументСсылка, УникальныйИдентификатор) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ЕстьНеСопоставленныеТовары", Ложь);
	Результат.Вставить("НеСопоставленныеТовары", "");
	
	Возврат Результат;
	
КонецФункции

// Возвращает текст запроса ТТН динамического списка, отображаемого в форме списка документов.
//
// Параметры:
//  Организация - ОпределяемыйТип.ОрганизацияКонтрагентЕГАИС - организация, по которой нужно отобрать документы,
//  ТорговыйОбъект - ОпределяемыйТип.ТорговыйОбъектЕГАИС - торговый объект, по которому нужно отобрать документы,
//  ОжидаетсяОформление- Булево - если Истина, будут отобраны только документы, ожидающие оформления.
//
// Возвращаемое значение:
//  Строка - текст запроса.
//
Функция ТекстЗапросаТТН(Организация = Неопределено, ТорговыйОбъект = Неопределено, ОжидаетсяОформление = Ложь) Экспорт
	
	ТекстЗапроса = "";
	
	//++ НЕ ЕГАИС
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДокументТТНВходящаяЕГАИС.Ссылка,
	|	ДокументТТНВходящаяЕГАИС.ПометкаУдаления,
	|	ДокументТТНВходящаяЕГАИС.Номер,
	|	ДокументТТНВходящаяЕГАИС.Дата,
	|	ДокументТТНВходящаяЕГАИС.Проведен,
	|	ДокументТТНВходящаяЕГАИС.ТорговыйОбъект,
	|	ДокументТТНВходящаяЕГАИС.Организация,
	|	ДокументТТНВходящаяЕГАИС.Идентификатор,
	|	ДокументТТНВходящаяЕГАИС.ИдентификаторЕГАИС,
	|	ДокументТТНВходящаяЕГАИС.Упакована,
	|	ДокументТТНВходящаяЕГАИС.НомерТТН,
	|	ДокументТТНВходящаяЕГАИС.ДатаТТН,
	|	ДокументТТНВходящаяЕГАИС.ДатаОтгрузки,
	|	ДокументТТНВходящаяЕГАИС.Грузоотправитель,
	|	ДокументТТНВходящаяЕГАИС.Грузополучатель,
	|	ДокументТТНВходящаяЕГАИС.Поставщик,
	|	ЕСТЬNULL(ДокументТТНВходящаяЕГАИС.Поставщик.Контрагент, ДокументТТНВходящаяЕГАИС.Грузоотправитель.Контрагент) КАК ПоставщикКонтрагент,
	|	ДокументТТНВходящаяЕГАИС.Основание,
	|	ДокументТТНВходящаяЕГАИС.Комментарий,
	|	ДокументТТНВходящаяЕГАИС.ТипДоставки,
	|	ДокументТТНВходящаяЕГАИС.Перевозчик,
	|	ДокументТТНВходящаяЕГАИС.Автомобиль,
	|	ДокументТТНВходящаяЕГАИС.Прицеп,
	|	ДокументТТНВходящаяЕГАИС.Заказчик,
	|	ДокументТТНВходящаяЕГАИС.Водитель,
	|	ДокументТТНВходящаяЕГАИС.ПунктПогрузки,
	|	ДокументТТНВходящаяЕГАИС.ПунктРазгрузки,
	|	ДокументТТНВходящаяЕГАИС.Перенаправление,
	|	ДокументТТНВходящаяЕГАИС.Экспедитор,
	|	ДокументТТНВходящаяЕГАИС.СуммаДокумента,
	|	ДокументТТНВходящаяЕГАИС.МоментВремени,
	|	ДокументТТНВходящаяЕГАИС.ЕстьРасхождения,
	|	ВЫБОР
	|		КОГДА ДокументТТНВходящаяЕГАИС.ДокументОснование В(&ПустыеЗначенияДокументаОснования) ТОГДА
	|			ЛОЖЬ
	|		ИНАЧЕ
	|			ИСТИНА
	|	КОНЕЦ КАК ВведеноПоступление,
	|	ДокументТТНВходящаяЕГАИС.ДокументОснование КАК ПоступлениеТоваров,
	|	ВЫБОР
	|		КОГДА ДокументТТНВходящаяЕГАИС.ДокументОснование В(&ПустыеЗначенияДокументаОснования) ТОГДА
	|			""""
	|		ИНАЧЕ
	|			ДокументТТНВходящаяЕГАИС.ДокументОснование.Номер
	|	КОНЕЦ КАК ПоступлениеТоваровПредставление,
	|	ВЫБОР
	|		КОГДА НЕ ДокументТТНВходящаяЕГАИС.ДокументОснование В(&ПустыеЗначенияДокументаОснования)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыОформленияДокументовЕГАИС.Оформлено)
	|		КОГДА СтатусыДокументовЕГАИС.Статус В (
	|			ЗНАЧЕНИЕ(Перечисление.СтатусыОбработкиТТНВходящейЕГАИС.Отменен),
	|			ЗНАЧЕНИЕ(Перечисление.СтатусыОбработкиТТНВходящейЕГАИС.ОтмененПоставщиком),
	|			ЗНАЧЕНИЕ(Перечисление.СтатусыОбработкиТТНВходящейЕГАИС.ЗапросНаОтменуПроведенияКПередаче),
	|			ЗНАЧЕНИЕ(Перечисление.СтатусыОбработкиТТНВходящейЕГАИС.ЗапросНаОтменуПроведенияПереданВУТМ),
	|			ЗНАЧЕНИЕ(Перечисление.СтатусыОбработкиТТНВходящейЕГАИС.ЗапросНаОтменуПроведенияОбрабатываетсяЕГАИС),
	|			ЗНАЧЕНИЕ(Перечисление.СтатусыОбработкиТТНВходящейЕГАИС.ЗапросНаОтменуПроведенияОшибка),
	|			ЗНАЧЕНИЕ(Перечисление.СтатусыОбработкиТТНВходящейЕГАИС.АктОтказаКПередаче),
	|			ЗНАЧЕНИЕ(Перечисление.СтатусыОбработкиТТНВходящейЕГАИС.АктОтказаПереданВУТМ),
	|			ЗНАЧЕНИЕ(Перечисление.СтатусыОбработкиТТНВходящейЕГАИС.АктОтказаОбрабатываетсяЕГАИС),
	|			ЗНАЧЕНИЕ(Перечисление.СтатусыОбработкиТТНВходящейЕГАИС.АктОтказаОшибка))
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыОформленияДокументовЕГАИС.НеОформлено)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СтатусыОформленияДокументовЕГАИС.НеТребуется)
	|	КОНЕЦ КАК ОформлениеПоступления,
	|	ВЫБОР
	|		КОГДА СтатусыДокументовЕГАИС.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОбработкиТТНВходящейЕГАИС.ПустаяСсылка)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ПустойСтатус,
	|	
	|	СтатусыДокументовЕГАИС.Статус              КАК СтатусЕГАИС,
	|	СтатусыДокументовЕГАИС.ДальнейшееДействие1 КАК ДальнейшееДействиеЕГАИС1,
	|	СтатусыДокументовЕГАИС.ДальнейшееДействие2 КАК ДальнейшееДействиеЕГАИС2,
	|	СтатусыДокументовЕГАИС.ДальнейшееДействие3 КАК ДальнейшееДействиеЕГАИС3
	|ИЗ
	|	Документ.ТТНВходящаяЕГАИС КАК ДокументТТНВходящаяЕГАИС
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДокументовЕГАИС КАК СтатусыДокументовЕГАИС
	|		ПО (СтатусыДокументовЕГАИС.Документ = ДокументТТНВходящаяЕГАИС.Ссылка)
	|	
	|ГДЕ
	|	&УсловиеОтбора";
	
	УсловиеОтбора = "";
	Если ЗначениеЗаполнено(Организация) Тогда
		УсловиеОтбора = УсловиеОтбора + "ДокументТТНВходящаяЕГАИС.Организация = &Организация";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТорговыйОбъект) Тогда
		Если ЗначениеЗаполнено(УсловиеОтбора) Тогда
			УсловиеОтбора = УсловиеОтбора + " И ";
		КонецЕсли;
		УсловиеОтбора = УсловиеОтбора + "ДокументТТНВходящаяЕГАИС.ТорговыйОбъект = &ТорговыйОбъект";
	КонецЕсли;
	
	Если ОжидаетсяОформление Тогда
		Если ЗначениеЗаполнено(УсловиеОтбора) Тогда
			УсловиеОтбора = УсловиеОтбора + " И ";
		КонецЕсли;
		УсловиеОтбора = УсловиеОтбора +
		"(СтатусыДокументовЕГАИС.ДальнейшееДействие1 В(&ТребующиеДействия))";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(УсловиеОтбора) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&УсловиеОтбора", УсловиеОтбора);
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&УсловиеОтбора", "ИСТИНА");
	КонецЕсли;
	//-- НЕ ЕГАИС
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Возвращает текст запроса для формирования временной таблицы коэффициентов пересчета базовых единиц измерения
// номенклатуры в единицы ЕГАИС:
//   - для упакованного товара: коэффициент пересчета в штуки (бутылки)
//   - для неупакованного товара: коэффициент пересчета в декалитры.
// Временная таблица используется при проведении документов по регистру ОстаткиЕГАИС и при передаче данных в УТМ.
//
// Параметры:
//  ИмяТаблицыТовары - Строка - Имя таблицы с колонками: АлкогольнаяПродукция, Номенклатура, Характеристика.
//  ИмяВременнойТаблицы - Строка - Имя результирующей временной таблицы.
//  ДобавлятьРазделитель - Булево - Признак добавления разделителя запросов.
//
// Возвращаемое значение:
//  Строка - Текст запроса.
//
Функция ТекстЗапросаВТКоэффициентыПересчетаВЕдиницыЕГАИС(ИмяТаблицыТовары = "ВТТовары", ИмяВременнойТаблицы = "ВТКоэффициентыПересчетаВЕдиницыЕГАИС") Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Таблица.АлкогольнаяПродукция  КАК АлкогольнаяПродукция,
	|	Таблица.Номенклатура          КАК Номенклатура,
	|	Таблица.Характеристика        КАК Характеристика,
	|	Таблица.Серия                 КАК Серия,
	|	МАКСИМУМ(ВЫБОР
	|		КОГДА Таблица.АлкогольнаяПродукция.ТипПродукции = ЗНАЧЕНИЕ(Перечисление.ТипыПродукцииЕГАИС.Неупакованная) ТОГДА
	|			ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ) КАК ПроверятьОбъемДАЛ,
	|	МАКСИМУМ(ЕСТЬNULL(Таблица.Номенклатура.ОбъемДАЛ, 0)) КАК ОбъемДАЛ,
	|	МАКСИМУМ(ВЫБОР
	|		КОГДА Таблица.АлкогольнаяПродукция.ТипПродукции = ЗНАЧЕНИЕ(Перечисление.ТипыПродукцииЕГАИС.Неупакованная) ТОГДА
	|			ЕСТЬNULL(Таблица.Номенклатура.ОбъемДАЛ, 0)
	|		ИНАЧЕ
	|			1
	|	КОНЕЦ) КАК Коэффициент
	|ПОМЕСТИТЬ ШаблонИмяВременнойТаблицы
	|ИЗ
	|	ШаблонТаблицаТовары КАК Таблица
	|СГРУППИРОВАТЬ ПО
	|	Таблица.АлкогольнаяПродукция,
	|	Таблица.Номенклатура,
	|	Таблица.Характеристика,
	|	Таблица.Серия
	|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ШаблонТаблицаТовары",       ИмяТаблицыТовары);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ШаблонИмяВременнойТаблицы", ИмяВременнойТаблицы);
	
	Возврат ТекстЗапроса;
	
КонецФункции

//#Область МенюОтчеты

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов.
//
Процедура ДобавитьКомандуАнализРасхожденийПриПоступленииАлкогольнойПродукцииВТТН_ЕГАИС(КомандыОтчетов) Экспорт
	
	
	Возврат;
	
КонецПроцедуры

//#КонецОбласти

// Заполняет в переданной таблице значений реквизиты: Крепость, ВидПродукции и Объем.
//
// Параметры:
//  ТаблицаНоменклатуры - ТаблицаЗначений - таблица номенклатуры с колонками: НомерСтроки, Номенклатура.
//
Процедура ЗаполнитьРеквизитыАлкогольнойПродукции(ТаблицаНоменклатуры) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	ВЫРАЗИТЬ(Товары.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура
	|ПОМЕСТИТЬ
	|	Товары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|/////////////////////////////////////////////////////////////////
	|ВЫБРАТь
	|	Товары.НомерСтроки                                          КАК НомерСтроки,
	|	Товары.Номенклатура.Крепость                                КАК Крепость,
	|	Товары.Номенклатура.ВидАлкогольнойПродукцииЕГАИС            КАК ВидПродукции,
	|	ВЫРАЗИТЬ(Товары.Номенклатура.ОбъемДАЛ * 10 КАК Число(10,3)) КАК Объем
	|ИЗ
	|	Товары КАК Товары
	|");
	
	Запрос.УстановитьПараметр("Товары", ТаблицаНоменклатуры);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокаТаблицы = ТаблицаНоменклатуры.Найти(Выборка.НомерСтроки, "НомерСтроки");
		Если СтрокаТаблицы <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Выборка, "Крепость, ВидПродукции, Объем");
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ТекстЗапросаСопоставлениеОрганизацийЕГАИСПоТТН() Экспорт
	
	ТекстЗапроса = "";
	
	//++ НЕ ГОСИС
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВложенныйЗапрос.ОрганизацияЕГАИС                                     КАК ОрганизацияЕГАИС,
	|	ВложенныйЗапрос.ОрганизацияЕГАИС.ИНН                                 КАК ИНН,
	|	ВложенныйЗапрос.ОрганизацияЕГАИС.КПП                                 КАК КПП,
	|	ВложенныйЗапрос.ОрганизацияЕГАИС.Наименование                        КАК Наименование,
	|	ПОДСТРОКА(ВложенныйЗапрос.ОрганизацияЕГАИС.НаименованиеПолное,1,255) КАК НаименованиеПолное,
	|	ВложенныйЗапрос.ОрганизацияЕГАИС.ТорговыйОбъект                      КАК ТорговыйОбъект,
	|	ВложенныйЗапрос.ОрганизацияЕГАИС.Контрагент                          КАК Контрагент,
	|	ВложенныйЗапрос.ОрганизацияЕГАИС.Сопоставлено                        КАК Сопоставлено
	|ПОМЕСТИТЬ ВтОрганизацииЕГАИС
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТТНВходящаяЕГАИС.Грузоотправитель КАК ОрганизацияЕГАИС
	|	ИЗ
	|		Документ.ТТНВходящаяЕГАИС КАК ТТНВходящаяЕГАИС
	|	ГДЕ
	|		ТТНВходящаяЕГАИС.Ссылка В(&СписокТТН)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТТНВходящаяЕГАИС.Грузополучатель
	|	ИЗ
	|		Документ.ТТНВходящаяЕГАИС КАК ТТНВходящаяЕГАИС
	|	ГДЕ
	|		ТТНВходящаяЕГАИС.Ссылка В(&СписокТТН)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТТНВходящаяЕГАИС.Поставщик
	|	ИЗ
	|		Документ.ТТНВходящаяЕГАИС КАК ТТНВходящаяЕГАИС
	|	ГДЕ
	|		ТТНВходящаяЕГАИС.Ссылка В(&СписокТТН)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВЫБОР
	|			КОГДА ТабличнаяЧасть.АлкогольнаяПродукция.Импортер = ЗНАЧЕНИЕ(Справочник.КлассификаторОрганизацийЕГАИС.ПустаяСсылка)
	|				ТОГДА ТабличнаяЧасть.АлкогольнаяПродукция.Производитель
	|			ИНАЧЕ ТабличнаяЧасть.АлкогольнаяПродукция.Импортер
	|		КОНЕЦ
	|	ИЗ
	|		Документ.ТТНВходящаяЕГАИС.Товары КАК ТабличнаяЧасть
	|	ГДЕ
	|		ТабличнаяЧасть.Ссылка В(&СписокТТН)) КАК ВложенныйЗапрос
	|ГДЕ
	|	НЕ (ВложенныйЗапрос.ОрганизацияЕГАИС = ЗНАЧЕНИЕ(Справочник.КлассификаторОрганизацийЕГАИС.ПустаяСсылка))
	|	И НЕ (ВложенныйЗапрос.ОрганизацияЕГАИС.СоответствуетОрганизации)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтОрганизацииЕГАИС.ОрганизацияЕГАИС КАК ОрганизацияЕГАИС,
	|	ВтОрганизацииЕГАИС.Наименование     КАК НаименованиеЕГАИС,
	|	Контрагенты1.Ссылка                 КАК Контрагент1,
	|	Контрагенты1.Ссылка                 КАК ТорговыйОбъект1,
	|	Контрагенты2.Ссылка                 КАК Контрагент2,
	|	Контрагенты2.Ссылка                 КАК ТорговыйОбъект2
	|ПОМЕСТИТЬ ВтСопоставления
	|ИЗ
	|	ВтОрганизацииЕГАИС КАК ВтОрганизацииЕГАИС
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты1
	|		ПО ВтОрганизацииЕГАИС.ИНН = Контрагенты1.ИНН
	|			И ВтОрганизацииЕГАИС.КПП = Контрагенты1.КПП
	|			И (НЕ Контрагенты1.ИНН = """")
	|			И (НЕ Контрагенты1.ПометкаУдаления)
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты2
	|		ПО ВтОрганизацииЕГАИС.ИНН = Контрагенты2.ИНН
	|			И (НЕ Контрагенты2.ИНН = """")
	|			И (НЕ Контрагенты2.ПометкаУдаления)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОрганизацииЕГАИС.ОрганизацияЕГАИС   КАК ОрганизацияЕГАИС,
	|	ОрганизацииЕГАИС.Наименование       КАК Наименование,
	|	ОрганизацииЕГАИС.ТорговыйОбъект     КАК ТорговыйОбъект,
	|	ОрганизацииЕГАИС.Контрагент         КАК Контрагент,
	|	ОрганизацииЕГАИС.Сопоставлено       КАК Сопоставлено,
	|	ОрганизацииЕГАИС.ИНН                КАК ИНН,
	|	ОрганизацииЕГАИС.КПП                КАК КПП,
	|	ОрганизацииЕГАИС.НаименованиеПолное КАК НаименованиеПолное
	|ИЗ
	|	ВтОрганизацииЕГАИС КАК ОрганизацииЕГАИС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Сопоставления.ОрганизацияЕГАИС                                         КАК ОрганизацияЕГАИС,
	|	ЕстьNULL(Сопоставления.Контрагент1,     Сопоставления.Контрагент2)     КАК Контрагент,
	|	ЕстьNULL(Сопоставления.ТорговыйОбъект1, Сопоставления.ТорговыйОбъект2) КАК ТорговыйОбъект
	|ИЗ
	|	ВтСопоставления КАК Сопоставления
	|ГДЕ
	|	Сопоставления.Контрагент1 ЕСТЬ НЕ NULL
	|	ИЛИ Сопоставления.Контрагент2 ЕСТЬ НЕ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Сопоставления.ОрганизацияЕГАИС  КАК ОрганизацияЕГАИС,
	|	Сопоставления.НаименованиеЕГАИС КАК НаименованиеЕГАИС
	|ИЗ
	|	ВтСопоставления КАК Сопоставления
	|ГДЕ
	|	Сопоставления.Контрагент1 ЕСТЬ NULL
	|	И Сопоставления.Контрагент2 ЕСТЬ NULL
	|";
	//-- НЕ ГОСИС

	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаСопоставлениеНоменклатурыПоТТН() Экспорт
	
	ТекстЗапроса = "";
	
	//++ НЕ ГОСИС
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Товары.АлкогольнаяПродукция  КАК АлкогольнаяПродукция,
	|	Товары.ИдентификаторУпаковки КАК ИдентификаторУпаковки,
	|	Товары.Номенклатура          КАК Номенклатура,
	|	Товары.Характеристика        КАК Характеристика,
	|	Товары.Серия                 КАК Серия
	|ПОМЕСТИТЬ втТовары
	|ИЗ
	|	Документ.ТТНВходящаяЕГАИС.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка В (&СписокТТН)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Товары.АлкогольнаяПродукция КАК АлкогольнаяПродукция
	|ПОМЕСТИТЬ втАлкогольнаяПродукция
	|ИЗ
	|	втТовары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втАлкогольнаяПродукция.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СоответствиеНоменклатурыЕГАИС.Номенклатура) КАК Количество
	|ПОМЕСТИТЬ СопоставленоПозиций
	|ИЗ
	|	втАлкогольнаяПродукция КАК втАлкогольнаяПродукция
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеНоменклатурыЕГАИС КАК СоответствиеНоменклатурыЕГАИС
	|		ПО (СоответствиеНоменклатурыЕГАИС.АлкогольнаяПродукция = втАлкогольнаяПродукция.АлкогольнаяПродукция)
	|ГДЕ
	|	НЕ СоответствиеНоменклатурыЕГАИС.АлкогольнаяПродукция ЕСТЬ NULL
	|
	|СГРУППИРОВАТЬ ПО
	|	втАлкогольнаяПродукция.АлкогольнаяПродукция
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Товары.ИдентификаторУпаковки                                      КАК ИдентификаторУпаковки,
	|	Товары.АлкогольнаяПродукция                                       КАК АлкогольнаяПродукция,
	|	Товары.АлкогольнаяПродукция.Объем                                 КАК Объем,
	|	ЕСТЬNULL(СопоставленоПозиций.Количество, 0)                       КАК Количество,
	|	Товары.АлкогольнаяПродукция.Крепость                              КАК Крепость,
	|	Товары.АлкогольнаяПродукция.Наименование                          КАК Наименование,
	|	ПОДСТРОКА(Товары.АлкогольнаяПродукция.НаименованиеПолное, 1, 255) КАК НаименованиеПолное,
	|	Товары.АлкогольнаяПродукция.ВидПродукции                          КАК ВидПродукции,
	|	Товары.АлкогольнаяПродукция.Производитель.Контрагент              КАК ПроизводительИБ,
	|	Товары.АлкогольнаяПродукция.Импортер.Контрагент                   КАК ИмпортерИБ,
	|	Товары.АлкогольнаяПродукция.Производитель                         КАК Производитель,
	|	Товары.АлкогольнаяПродукция.Импортер                              КАК Импортер,
	|	Товары.Номенклатура                                               КАК Номенклатура,
	|	Товары.Характеристика                                             КАК Характеристика,
	|	Товары.Серия                                                      КАК Серия
	|ПОМЕСТИТЬ втДанныеТТН
	|ИЗ
	|	втТовары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ СопоставленоПозиций КАК СопоставленоПозиций
	|		ПО (СопоставленоПозиций.АлкогольнаяПродукция = Товары.АлкогольнаяПродукция)
	|		
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СправочникНоменклатура.Ссылка                                 КАК Номенклатура,
	|	СправочникНоменклатура.Наименование                           КАК Наименование,
	|	СправочникНоменклатура.ВидАлкогольнойПродукцииЕГАИС           КАК ВидАлкогольнойПродукции,
	|	ВЫБОР
	|		КОГДА СправочникНоменклатура.ИмпортнаяАлкогольнаяПродукция
	|			ТОГДА СправочникНоменклатура.Импортер
	|		ИНАЧЕ
	|			СправочникНоменклатура.Производитель
	|	КОНЕЦ                                                         КАК ПроизводительИмпортер,
	|	СправочникНоменклатура.ОбъемДАЛ                               КАК ОбъемДАЛ,
	|	СправочникНоменклатура.Крепость                               КАК Крепость
	|ПОМЕСТИТЬ втНоменклатура
	|ИЗ
	|	Справочник.Номенклатура КАК СправочникНоменклатура
	|ГДЕ
	|	СправочникНоменклатура.АлкогольнаяПродукция
	|	И НЕ СправочникНоменклатура.АлкогольнаяПродукцияВоВскрытойТаре
	|	И НЕ СправочникНоменклатура.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДанныеТТН.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	втДанныеТТН.Наименование         КАК Наименование
	|ИЗ
	|	втДанныеТТН КАК втДанныеТТН
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втНоменклатура.Номенклатура КАК Номенклатура,
	|	втНоменклатура.Наименование КАК Наименование
	|ИЗ
	|	втНоменклатура КАК втНоменклатура
	|";
	//-- НЕ ГОСИС
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаСопоставлениеОрганизацийЕГАИСПоВходящимДанным() Экспорт
	
	ТекстЗапроса = "";
	
	//++ НЕ ГОСИС
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Товары.АлкогольнаяПродукция  КАК АлкогольнаяПродукция,
	|	Товары.ИдентификаторУпаковки КАК ИдентификаторУпаковки,
	|	Товары.Номенклатура          КАК Номенклатура,
	|	Товары.Характеристика        КАК Характеристика
	|ПОМЕСТИТЬ втТаблицаТовары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОрганизацииЕГАИС.ОрганизацияЕГАИС КАК ОрганизацияЕГАИС
	|ПОМЕСТИТЬ втТаблицаОрганизацииЕГАИС
	|ИЗ
	|	&ОрганизацииЕГАИС КАК ОрганизацииЕГАИС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВложенныйЗапрос.ОрганизацияЕГАИС                                     КАК ОрганизацияЕГАИС,
	|	ВложенныйЗапрос.ОрганизацияЕГАИС.ИНН                                 КАК ИНН,
	|	ВложенныйЗапрос.ОрганизацияЕГАИС.КПП                                 КАК КПП,
	|	ВложенныйЗапрос.ОрганизацияЕГАИС.Наименование                        КАК Наименование,
	|	ПОДСТРОКА(ВложенныйЗапрос.ОрганизацияЕГАИС.НаименованиеПолное,1,255) КАК НаименованиеПолное,
	|	ВложенныйЗапрос.ОрганизацияЕГАИС.ТорговыйОбъект                      КАК ТорговыйОбъект,
	|	ВложенныйЗапрос.ОрганизацияЕГАИС.Контрагент                          КАК Контрагент,
	|	ВложенныйЗапрос.ОрганизацияЕГАИС.Сопоставлено                        КАК Сопоставлено
	|ПОМЕСТИТЬ ВтОрганизацииЕГАИС
	|ИЗ
	|	(ВЫБРАТЬ
	|		ОрганизацииЕГАИС.ОрганизацияЕГАИС КАК ОрганизацияЕГАИС
	|	ИЗ
	|		втТаблицаОрганизацииЕГАИС КАК ОрганизацииЕГАИС
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВЫБОР
	|			КОГДА ТабличнаяЧасть.АлкогольнаяПродукция.Импортер = ЗНАЧЕНИЕ(Справочник.КлассификаторОрганизацийЕГАИС.ПустаяСсылка)
	|				ТОГДА ТабличнаяЧасть.АлкогольнаяПродукция.Производитель
	|			ИНАЧЕ ТабличнаяЧасть.АлкогольнаяПродукция.Импортер
	|		КОНЕЦ
	|	ИЗ
	|		втТаблицаТовары КАК ТабличнаяЧасть) КАК ВложенныйЗапрос
	|ГДЕ
	|	НЕ (ВложенныйЗапрос.ОрганизацияЕГАИС = ЗНАЧЕНИЕ(Справочник.КлассификаторОрганизацийЕГАИС.ПустаяСсылка))
	|	И НЕ (ВложенныйЗапрос.ОрганизацияЕГАИС.СоответствуетОрганизации)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтОрганизацииЕГАИС.ОрганизацияЕГАИС КАК ОрганизацияЕГАИС,
	|	ВтОрганизацииЕГАИС.Наименование     КАК НаименованиеЕГАИС,
	|	Контрагенты1.Ссылка                 КАК Контрагент1,
	|	Контрагенты1.Ссылка                 КАК ТорговыйОбъект1,
	|	Контрагенты2.Ссылка                 КАК Контрагент2,
	|	Контрагенты2.Ссылка                 КАК ТорговыйОбъект2
	|ПОМЕСТИТЬ ВтСопоставления
	|ИЗ
	|	ВтОрганизацииЕГАИС КАК ВтОрганизацииЕГАИС
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты1
	|		ПО ВтОрганизацииЕГАИС.ИНН = Контрагенты1.ИНН
	|			И ВтОрганизацииЕГАИС.КПП = Контрагенты1.КПП
	|			И (НЕ Контрагенты1.ИНН = """")
	|			И (НЕ Контрагенты1.ПометкаУдаления)
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты2
	|		ПО ВтОрганизацииЕГАИС.ИНН = Контрагенты2.ИНН
	|			И (НЕ Контрагенты2.ИНН = """")
	|			И (НЕ Контрагенты2.ПометкаУдаления)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОрганизацииЕГАИС.ОрганизацияЕГАИС   КАК ОрганизацияЕГАИС,
	|	ОрганизацииЕГАИС.Наименование       КАК Наименование,
	|	ОрганизацииЕГАИС.ТорговыйОбъект     КАК ТорговыйОбъект,
	|	ОрганизацииЕГАИС.Контрагент         КАК Контрагент,
	|	ОрганизацииЕГАИС.Сопоставлено       КАК Сопоставлено,
	|	ОрганизацииЕГАИС.ИНН                КАК ИНН,
	|	ОрганизацииЕГАИС.КПП                КАК КПП,
	|	ОрганизацииЕГАИС.НаименованиеПолное КАК НаименованиеПолное
	|ИЗ
	|	ВтОрганизацииЕГАИС КАК ОрганизацииЕГАИС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Сопоставления.ОрганизацияЕГАИС                                         КАК ОрганизацияЕГАИС,
	|	ЕстьNULL(Сопоставления.Контрагент1,     Сопоставления.Контрагент2)     КАК Контрагент,
	|	ЕстьNULL(Сопоставления.ТорговыйОбъект1, Сопоставления.ТорговыйОбъект2) КАК ТорговыйОбъект
	|ИЗ
	|	ВтСопоставления КАК Сопоставления
	|ГДЕ
	|	Сопоставления.Контрагент1 ЕСТЬ НЕ NULL
	|	ИЛИ Сопоставления.Контрагент2 ЕСТЬ НЕ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Сопоставления.ОрганизацияЕГАИС  КАК ОрганизацияЕГАИС,
	|	Сопоставления.НаименованиеЕГАИС КАК НаименованиеЕГАИС
	|ИЗ
	|	ВтСопоставления КАК Сопоставления
	|ГДЕ
	|	Сопоставления.Контрагент1 ЕСТЬ NULL
	|	И Сопоставления.Контрагент2 ЕСТЬ NULL
	|";
	//-- НЕ ГОСИС
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаСопоставлениеНоменклатурыПоВходящимДанным() Экспорт
	
	ТекстЗапроса = "";
	
	//++ НЕ ГОСИС
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Товары.АлкогольнаяПродукция  КАК АлкогольнаяПродукция,
	|	Товары.ИдентификаторУпаковки КАК ИдентификаторУпаковки,
	|	Товары.Номенклатура          КАК Номенклатура,
	|	Товары.Характеристика        КАК Характеристика,
	|	Товары.Серия                 КАК Серия
	|ПОМЕСТИТЬ втТовары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.АлкогольнаяПродукция                                      КАК АлкогольнаяПродукция,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СоответствиеНоменклатурыЕГАИС.Номенклатура) КАК Количество
	|ПОМЕСТИТЬ КоличествоСопоставлено
	|ИЗ
	|	втТовары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеНоменклатурыЕГАИС КАК СоответствиеНоменклатурыЕГАИС
	|		ПО (Товары.АлкогольнаяПродукция = СоответствиеНоменклатурыЕГАИС.АлкогольнаяПродукция)
	|СГРУППИРОВАТЬ ПО
	|	Товары.АлкогольнаяПродукция
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.ИдентификаторУпаковки                                      КАК ИдентификаторУпаковки,
	|	Товары.АлкогольнаяПродукция                                       КАК АлкогольнаяПродукция,
	|	Товары.АлкогольнаяПродукция.Объем                                 КАК Объем,
	|	Товары.АлкогольнаяПродукция.Крепость                              КАК Крепость,
	|	Товары.АлкогольнаяПродукция.Наименование                          КАК Наименование,
	|	ПОДСТРОКА(Товары.АлкогольнаяПродукция.НаименованиеПолное, 1, 255) КАК НаименованиеПолное,
	|	Товары.АлкогольнаяПродукция.ВидПродукции                          КАК ВидПродукции,
	|	Товары.АлкогольнаяПродукция.Производитель.Контрагент              КАК ПроизводительИБ,
	|	Товары.АлкогольнаяПродукция.Импортер.Контрагент                   КАК ИмпортерИБ,
	|	Товары.АлкогольнаяПродукция.Производитель                         КАК Производитель,
	|	Товары.АлкогольнаяПродукция.Импортер                              КАК Импортер,
	|	ЕСТЬNULL(КоличествоСопоставлено.Количество, 0)                    КАК Количество,
	|	Товары.Номенклатура                                               КАК Номенклатура,
	|	Товары.Характеристика                                             КАК Характеристика,
	|	Товары.Серия                                                      КАК Серия
	|ПОМЕСТИТЬ втДанныеТТН
	|ИЗ
	|	втТовары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ КоличествоСопоставлено КАК КоличествоСопоставлено
	|		ПО (Товары.АлкогольнаяПродукция = КоличествоСопоставлено.АлкогольнаяПродукция)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СправочникНоменклатура.Ссылка                                 КАК Номенклатура,
	|	СправочникНоменклатура.Наименование                           КАК Наименование,
	|	СправочникНоменклатура.ВидАлкогольнойПродукцииЕГАИС           КАК ВидАлкогольнойПродукции,
	|	ВЫБОР
	|		КОГДА СправочникНоменклатура.ИмпортнаяАлкогольнаяПродукция
	|			ТОГДА СправочникНоменклатура.Импортер
	|		ИНАЧЕ
	|			СправочникНоменклатура.Производитель
	|	КОНЕЦ                                                         КАК ПроизводительИмпортер,
	|	СправочникНоменклатура.ОбъемДАЛ                               КАК ОбъемДАЛ,
	|	СправочникНоменклатура.Крепость                               КАК Крепость
	|ПОМЕСТИТЬ втНоменклатура
	|ИЗ
	|	Справочник.Номенклатура КАК СправочникНоменклатура
	|ГДЕ
	|	СправочникНоменклатура.АлкогольнаяПродукция
	//|	И НЕ СправочникНоменклатура.АлкогольнаяПродукцияВоВскрытойТаре
	|	И НЕ СправочникНоменклатура.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДанныеТТН.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	втДанныеТТН.Наименование         КАК Наименование
	|ИЗ
	|	втДанныеТТН КАК втДанныеТТН
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втНоменклатура.Номенклатура КАК Номенклатура,
	|	втНоменклатура.Наименование КАК Наименование
	|ИЗ
	|	втНоменклатура КАК втНоменклатура
	|";
	//-- НЕ ГОСИС
	
	Возврат ТекстЗапроса;
	
КонецФункции

//#КонецОбласти

//#Область ПанельОбменСЕГАИС

Функция ТекстЗапросаАктПостановкиНаБалансЕГАИСОформите() Экспорт
	
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ СУММА(ВложенныйЗапрос.КоличествоДокументов) ИЗ(
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО (РАЗЛИЧНЫЕ СтатусыОформленияДокументовЕГАИС.Документ)
	|	* КОЛИЧЕСТВО (РАЗЛИЧНЫЕ СтатусыОформленияДокументовЕГАИС.Основание) КАК КоличествоДокументов
	|ИЗ
	|	РегистрСведений.СтатусыОформленияДокументовЕГАИС КАК СтатусыОформленияДокументовЕГАИС
	|%ЛевоеСоединение%
	|ГДЕ
	|	СтатусыОформленияДокументовЕГАИС.Документ = ЗНАЧЕНИЕ(Документ.АктПостановкиНаБалансЕГАИС.ПустаяСсылка)
	|	И СтатусыОформленияДокументовЕГАИС.СтатусОформления В (
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыОформленияДокументовЕГАИС.НеОформлено),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыОформленияДокументовЕГАИС.ОформленоЧастично),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыОформленияДокументовЕГАИС.ТребуетсяСопоставлениеНоменклатуры)
	|	)
	|	%Условие%
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ РАЗЛИЧНЫЕ 1
	|ИЗ
	|	РегистрСведений.АкцизныеМаркиЕГАИС КАК АкцизныеМаркиЕГАИС
	|ГДЕ
	|	АкцизныеМаркиЕГАИС.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыАкцизныхМарок.КПостановкеНаБаланс)
	|	И (АкцизныеМаркиЕГАИС.ОрганизацияЕГАИС В(&ОрганизацияЕГАИС) ИЛИ &БезОтбораПоОрганизацииЕГАИС)
	|	И НЕ АкцизныеМаркиЕГАИС.ОрганизацияЕГАИС.Ссылка ЕСТЬ NULL)КАК ВложенныйЗапрос
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|";
	
	Если ПравоДоступа("Чтение", Метаданные.Документы.ОприходованиеТоваров) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ЛевоеСоединение%",
		"ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОприходованиеТоваров КАК ОприходованиеТоваров
		|	ПО СтатусыОформленияДокументовЕГАИС.Основание = ОприходованиеТоваров.Ссылка
		|ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторОрганизацийЕГАИС КАК КлассификаторОрганизацийЕГАИС
		|	ПО КлассификаторОрганизацийЕГАИС.Ссылка В(&ОрганизацияЕГАИС)");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%Условие%", 
		"И ОприходованиеТоваров.Ссылка ЕСТЬ НЕ NULL
		|И ((ОприходованиеТоваров.Организация = КлассификаторОрганизацийЕГАИС.Контрагент) ИЛИ &БезОтбораПоОрганизацииЕГАИС)");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ЛевоеСоединение%", "");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%Условие%", "");
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаАктСписанияЕГАИСОформите() Экспорт
	
	ТекстЗапроса = "";
	
	//++ НЕ ЕГАИС
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО (РАЗЛИЧНЫЕ СтатусыОформленияДокументовЕГАИС.Документ)
	|	* КОЛИЧЕСТВО (РАЗЛИЧНЫЕ СтатусыОформленияДокументовЕГАИС.Основание) КАК КоличествоДокументов
	|ИЗ
	|	РегистрСведений.СтатусыОформленияДокументовЕГАИС КАК СтатусыОформленияДокументовЕГАИС
	|%ЛевоеСоединение%
	|ГДЕ
	|	СтатусыОформленияДокументовЕГАИС.Документ = ЗНАЧЕНИЕ(Документ.АктСписанияЕГАИС.ПустаяСсылка)
	|	И СтатусыОформленияДокументовЕГАИС.СтатусОформления В (
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыОформленияДокументовЕГАИС.НеОформлено),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыОформленияДокументовЕГАИС.ОформленоЧастично),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыОформленияДокументовЕГАИС.ТребуетсяСопоставлениеНоменклатуры)
	|	)
	|	%УсловиеСсылка%
	|	%УсловиеОрганизация%
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|";
	
	ПравоДоступаТребованиеНакладная      = ПравоДоступа("Чтение", Метаданные.Документы.ТребованиеНакладная);
	ПравоДоступаСписаниеТоваров          = ПравоДоступа("Чтение", Метаданные.Документы.СписаниеТоваров);
	ПравоДоступаОтчетОРозничныхПродажах  = ПравоДоступа("Чтение", Метаданные.Документы.ОтчетОРозничныхПродажах);
	ПравоДоступаКомплектацияНоменклатуры = ПравоДоступа("Чтение", Метаданные.Документы.КомплектацияНоменклатуры);
	
	УсловияСсылка = Новый Массив;
	УсловияОрганизация = Новый Массив;
	
	ЛевоеСоединение = "";
	Если ПравоДоступаТребованиеНакладная Тогда
		ЛевоеСоединение = ЛевоеСоединение + "
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	Документ.ТребованиеНакладная КАК ТребованиеНакладная
		|ПО
		|	СтатусыОформленияДокументовЕГАИС.Основание = ТребованиеНакладная.Ссылка
		|";
		УсловияСсылка.Добавить("ТребованиеНакладная.Ссылка ЕСТЬ НЕ NULL");
		УсловияОрганизация.Добавить("ТребованиеНакладная.Организация = КлассификаторОрганизацийЕГАИС.Контрагент");
	КонецЕсли;
	
	Если ПравоДоступаСписаниеТоваров Тогда
		ЛевоеСоединение = ЛевоеСоединение + "
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	Документ.СписаниеТоваров КАК СписаниеТоваров
		|ПО
		|	СтатусыОформленияДокументовЕГАИС.Основание = СписаниеТоваров.Ссылка
		|";
		УсловияСсылка.Добавить("СписаниеТоваров.Ссылка ЕСТЬ НЕ NULL");
		УсловияОрганизация.Добавить("СписаниеТоваров.Организация = КлассификаторОрганизацийЕГАИС.Контрагент");
	КонецЕсли;
	
	Если ПравоДоступаОтчетОРозничныхПродажах Тогда
		ЛевоеСоединение = ЛевоеСоединение + "
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	Документ.ОтчетОРозничныхПродажах КАК ОтчетОРозничныхПродажах
		|ПО
		|	СтатусыОформленияДокументовЕГАИС.Основание = ОтчетОРозничныхПродажах.Ссылка
		|";
		УсловияСсылка.Добавить("ОтчетОРозничныхПродажах.Ссылка ЕСТЬ НЕ NULL");
		УсловияОрганизация.Добавить("ОтчетОРозничныхПродажах.Организация = КлассификаторОрганизацийЕГАИС.Контрагент");
	КонецЕсли;
	
	Если ПравоДоступаКомплектацияНоменклатуры Тогда
		ЛевоеСоединение = ЛевоеСоединение + "
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	Документ.КомплектацияНоменклатуры КАК КомплектацияНоменклатуры
		|ПО
		|	СтатусыОформленияДокументовЕГАИС.Основание = КомплектацияНоменклатуры.Ссылка
		|";
		УсловияСсылка.Добавить("КомплектацияНоменклатуры.Ссылка ЕСТЬ НЕ NULL");
		УсловияОрганизация.Добавить("КомплектацияНоменклатуры.Организация = КлассификаторОрганизацийЕГАИС.Контрагент");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЛевоеСоединение) Тогда
		ЛевоеСоединение = ЛевоеСоединение + "
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	Справочник.КлассификаторОрганизацийЕГАИС КАК КлассификаторОрганизацийЕГАИС
		|ПО
		|	КлассификаторОрганизацийЕГАИС.Ссылка В(&ОрганизацияЕГАИС)
		|";
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ЛевоеСоединение%", ЛевоеСоединение);
	
	Если УсловияСсылка.Количество() > 0 Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%УсловиеСсылка%", СтрШаблон("И (%1)", СтрСоединить(УсловияСсылка, " ИЛИ ")));
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%УсловиеСсылка%", "");
	КонецЕсли;
	
	Если УсловияОрганизация.Количество() > 0 Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%УсловиеОрганизация%", СтрШаблон("И ((%1) ИЛИ &БезОтбораПоОрганизацииЕГАИС)", СтрСоединить(УсловияОрганизация, " ИЛИ ")));
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%УсловиеОрганизация%", "");
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВозвратИзРегистра2ЕГАИСОформите() Экспорт
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО (РАЗЛИЧНЫЕ СтатусыОформленияДокументовЕГАИС.Документ)
	|	* КОЛИЧЕСТВО (РАЗЛИЧНЫЕ СтатусыОформленияДокументовЕГАИС.Основание) КАК КоличествоДокументов
	|ИЗ
	|	РегистрСведений.СтатусыОформленияДокументовЕГАИС КАК СтатусыОформленияДокументовЕГАИС
	|%ЛевоеСоединение%
	|ГДЕ
	|	(%УсловиеСсылка%)
	|	И СтатусыОформленияДокументовЕГАИС.Документ = ЗНАЧЕНИЕ(Документ.ВозвратИзРегистра2ЕГАИС.ПустаяСсылка)
	|	И СтатусыОформленияДокументовЕГАИС.СтатусОформления В (
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыОформленияДокументовЕГАИС.НеОформлено),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыОформленияДокументовЕГАИС.ОформленоЧастично),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыОформленияДокументовЕГАИС.ТребуетсяСопоставлениеНоменклатуры)
	|	)
	|	И (%УсловиеОрганизация% ИЛИ &БезОтбораПоОрганизацииЕГАИС)
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|";
	
	ПравоДоступаТТНИсходящаяЕГАИС = ПравоДоступа("Чтение", Метаданные.Документы.ТТНИсходящаяЕГАИС);
	
	ЛевоеСоединение = "";
	Если ПравоДоступаТТНИсходящаяЕГАИС Тогда
		ЛевоеСоединение = ЛевоеСоединение + "
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	Документ.ТТНИсходящаяЕГАИС КАК ТТНИсходящаяЕГАИС
		|ПО
		|	СтатусыОформленияДокументовЕГАИС.Основание = ТТНИсходящаяЕГАИС.Ссылка
		|	
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	Справочник.КлассификаторОрганизацийЕГАИС КАК КлассификаторОрганизацийЕГАИС
		|ПО
		|	КлассификаторОрганизацийЕГАИС.Ссылка В(&ОрганизацияЕГАИС)
		|";
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ЛевоеСоединение%", ЛевоеСоединение);
	
	УсловиеСсылка = "";
	УсловиеОрганизация = "";
	
	Если ПравоДоступаТТНИсходящаяЕГАИС Тогда
		
		УсловиеСсылка = "ТТНИсходящаяЕГАИС.Ссылка ЕСТЬ НЕ NULL";
		УсловиеОрганизация = "ТТНИсходящаяЕГАИС.Грузоотправитель = КлассификаторОрганизацийЕГАИС.Контрагент";
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(УсловиеСсылка) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%УсловиеСсылка%", СтрШаблон("И (%1)", УсловиеСсылка));
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%УсловиеСсылка%", "");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(УсловиеОрганизация) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%УсловиеОрганизация%", СтрШаблон("И ((%1) ИЛИ &БезОтбораПоОрганизацииЕГАИС)", УсловиеОрганизация));
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%УсловиеОрганизация%", "");
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаПередачаВРегистр2ЕГАИСОформите() Экспорт
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО (РАЗЛИЧНЫЕ СтатусыОформленияДокументовЕГАИС.Документ)
	|	* КОЛИЧЕСТВО (РАЗЛИЧНЫЕ СтатусыОформленияДокументовЕГАИС.Основание) КАК КоличествоДокументов
	|ИЗ
	|	РегистрСведений.СтатусыОформленияДокументовЕГАИС КАК СтатусыОформленияДокументовЕГАИС
	|%ЛевоеСоединение%
	|ГДЕ
	|	СтатусыОформленияДокументовЕГАИС.Документ = ЗНАЧЕНИЕ(Документ.ПередачаВРегистр2ЕГАИС.ПустаяСсылка)
	|	И СтатусыОформленияДокументовЕГАИС.СтатусОформления В (
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыОформленияДокументовЕГАИС.НеОформлено),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыОформленияДокументовЕГАИС.ОформленоЧастично),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыОформленияДокументовЕГАИС.ТребуетсяСопоставлениеНоменклатуры)
	|	)
	|	%УсловиеСсылка%
	|	%УсловиеОрганизация%
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|";
	
	ПравоДоступаТТНВходящаяЕГАИС = ПравоДоступа("Чтение", Метаданные.Документы.ТТНВходящаяЕГАИС);
	
	УсловияСсылка = Новый Массив;
	УсловияОрганизация = Новый Массив;
	
	ЛевоеСоединение = "";
	Если ПравоДоступаТТНВходящаяЕГАИС Тогда
		ЛевоеСоединение = ЛевоеСоединение + "
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	Документ.ТТНВходящаяЕГАИС КАК ТТНВходящаяЕГАИС
		|ПО
		|	СтатусыОформленияДокументовЕГАИС.Основание = ТТНВходящаяЕГАИС.Ссылка
		|";
		УсловияСсылка.Добавить("ТТНВходящаяЕГАИС.Ссылка ЕСТЬ НЕ NULL");
		УсловияОрганизация.Добавить("ТТНВходящаяЕГАИС.Грузополучатель В(&ОрганизацияЕГАИС)");
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ЛевоеСоединение%", ЛевоеСоединение);
	
	Если УсловияСсылка.Количество() > 0 Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%УсловиеСсылка%", СтрШаблон("И (%1)", СтрСоединить(УсловияСсылка, " ИЛИ ")));
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%УсловиеСсылка%", "");
	КонецЕсли;
	
	Если УсловияОрганизация.Количество() > 0 Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%УсловиеОрганизация%", СтрШаблон("И ((%1) ИЛИ &БезОтбораПоОрганизацииЕГАИС)", СтрСоединить(УсловияОрганизация, " ИЛИ ")));
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%УсловиеОрганизация%", "");
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТТНИсходящаяЕГАИСОформите() Экспорт
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО (РАЗЛИЧНЫЕ СтатусыОформленияДокументовЕГАИС.Документ)
	|	* КОЛИЧЕСТВО (РАЗЛИЧНЫЕ СтатусыОформленияДокументовЕГАИС.Основание) КАК КоличествоДокументов
	|ИЗ
	|	РегистрСведений.СтатусыОформленияДокументовЕГАИС КАК СтатусыОформленияДокументовЕГАИС
	|%ЛевоеСоединение%
	|ГДЕ
	|	СтатусыОформленияДокументовЕГАИС.Документ = ЗНАЧЕНИЕ(Документ.ТТНИсходящаяЕГАИС.ПустаяСсылка)
	|	И СтатусыОформленияДокументовЕГАИС.СтатусОформления В (
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыОформленияДокументовЕГАИС.НеОформлено),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыОформленияДокументовЕГАИС.ОформленоЧастично),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыОформленияДокументовЕГАИС.ТребуетсяСопоставлениеНоменклатуры)
	|	)
	|	%УсловиеСсылка%
	|	%УсловиеОрганизация%
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|";
	
	ПравоДоступаВозвратТоваровПоставщику          = ПравоДоступа("Чтение", Метаданные.Документы.ВозвратТоваровПоставщику);
	ПравоДоступаПеремещениеТоваров                = ПравоДоступа("Чтение", Метаданные.Документы.ПеремещениеТоваров);
	
	УсловияСсылка = Новый Массив;
	УсловияОрганизация = Новый Массив;
	
	ЛевоеСоединение = "";
	Если ПравоДоступаВозвратТоваровПоставщику Тогда
		ЛевоеСоединение = ЛевоеСоединение + "
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	Документ.ВозвратТоваровПоставщику КАК ВозвратТоваровПоставщику
		|ПО
		|	СтатусыОформленияДокументовЕГАИС.Основание = ВозвратТоваровПоставщику.Ссылка
		|";
		УсловияСсылка.Добавить("ВозвратТоваровПоставщику.Ссылка ЕСТЬ НЕ NULL");
		УсловияОрганизация.Добавить("ВозвратТоваровПоставщику.Организация = КлассификаторОрганизацийЕГАИС.Контрагент");
	КонецЕсли;
	
	Если ПравоДоступаПеремещениеТоваров Тогда
		ЛевоеСоединение = ЛевоеСоединение + "
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
		|ПО
		|	СтатусыОформленияДокументовЕГАИС.Основание = ПеремещениеТоваров.Ссылка
		|";
		УсловияСсылка.Добавить("ПеремещениеТоваров.Ссылка ЕСТЬ НЕ NULL");
		УсловияОрганизация.Добавить("ПеремещениеТоваров.Организация = КлассификаторОрганизацийЕГАИС.Контрагент");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЛевоеСоединение) Тогда
		ЛевоеСоединение = ЛевоеСоединение + "
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	Справочник.КлассификаторОрганизацийЕГАИС КАК КлассификаторОрганизацийЕГАИС
		|ПО
		|	КлассификаторОрганизацийЕГАИС.Ссылка В(&ОрганизацияЕГАИС)
		|";
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ЛевоеСоединение%", ЛевоеСоединение);
	
	Если УсловияСсылка.Количество() > 0 Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%УсловиеСсылка%", СтрШаблон("И (%1)", СтрСоединить(УсловияСсылка, " ИЛИ ")));
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%УсловиеСсылка%", "");
	КонецЕсли;
	
	Если УсловияОрганизация.Количество() > 0 Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%УсловиеОрганизация%", СтрШаблон("И ((%1) ИЛИ &БезОтбораПоОрганизацииЕГАИС)", СтрСоединить(УсловияОрганизация, " ИЛИ ")));
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%УсловиеОрганизация%", "");
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаЧекЕГАИСОформите() Экспорт
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО (РАЗЛИЧНЫЕ СтатусыОформленияДокументовЕГАИС.Документ)
	|	* КОЛИЧЕСТВО (РАЗЛИЧНЫЕ СтатусыОформленияДокументовЕГАИС.Основание) КАК КоличествоДокументов
	|ИЗ
	|	РегистрСведений.СтатусыОформленияДокументовЕГАИС КАК СтатусыОформленияДокументовЕГАИС
	|%ЛевоеСоединение%
	|ГДЕ
	|	СтатусыОформленияДокументовЕГАИС.Документ = ЗНАЧЕНИЕ(Документ.ЧекЕГАИС.ПустаяСсылка)
	|	И СтатусыОформленияДокументовЕГАИС.СтатусОформления В (
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыОформленияДокументовЕГАИС.НеОформлено),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыОформленияДокументовЕГАИС.ОформленоЧастично),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыОформленияДокументовЕГАИС.ТребуетсяСопоставлениеНоменклатуры)
	|	)
	|	%УсловиеСсылка%
	|	%УсловиеОрганизация%
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|";
	
	ПравоДоступаРеализацияТоваровУслуг   = ПравоДоступа("Чтение", Метаданные.Документы.РеализацияТоваровУслуг);
	ПравоДоступаКомплектацияНоменклатуры = ПравоДоступа("Чтение", Метаданные.Документы.КомплектацияНоменклатуры);
	
	УсловияСсылка = Новый Массив;
	УсловияОрганизация = Новый Массив;
	
	ЛевоеСоединение = "";
	Если ПравоДоступаРеализацияТоваровУслуг Тогда
		ЛевоеСоединение = ЛевоеСоединение + "
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		|ПО
		|	СтатусыОформленияДокументовЕГАИС.Основание = РеализацияТоваровУслуг.Ссылка
		|";
		УсловияСсылка.Добавить("РеализацияТоваровУслуг.Ссылка ЕСТЬ НЕ NULL");
		УсловияОрганизация.Добавить("РеализацияТоваровУслуг.Организация = КлассификаторОрганизацийЕГАИС.Контрагент");
	КонецЕсли;
	
	Если ПравоДоступаКомплектацияНоменклатуры Тогда
		ЛевоеСоединение = ЛевоеСоединение + "
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	Документ.КомплектацияНоменклатуры КАК КомплектацияНоменклатуры
		|ПО
		|	СтатусыОформленияДокументовЕГАИС.Основание = КомплектацияНоменклатуры.Ссылка
		|";
		УсловияСсылка.Добавить("КомплектацияНоменклатуры.Ссылка ЕСТЬ НЕ NULL");
		УсловияОрганизация.Добавить("КомплектацияНоменклатуры.Организация = КлассификаторОрганизацийЕГАИС.Контрагент");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЛевоеСоединение) Тогда
		ЛевоеСоединение = ЛевоеСоединение + "
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	Справочник.КлассификаторОрганизацийЕГАИС КАК КлассификаторОрганизацийЕГАИС
		|ПО
		|	КлассификаторОрганизацийЕГАИС.Ссылка В(&ОрганизацияЕГАИС)
		|";
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ЛевоеСоединение%", ЛевоеСоединение);
	
	Если УсловияСсылка.Количество() > 0 Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%УсловиеСсылка%", СтрШаблон("И (%1)", СтрСоединить(УсловияСсылка, " ИЛИ ")));
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%УсловиеСсылка%", "");
	КонецЕсли;
	
	Если УсловияОрганизация.Количество() > 0 Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%УсловиеОрганизация%", СтрШаблон("И ((%1) ИЛИ &БезОтбораПоОрганизацииЕГАИС)", СтрСоединить(УсловияОрганизация, " ИЛИ ")));
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%УсловиеОрганизация%", "");
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаЧекЕГАИСВозвратОформите() Экспорт
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО (РАЗЛИЧНЫЕ СтатусыОформленияДокументовЕГАИС.Документ)
	|	* КОЛИЧЕСТВО (РАЗЛИЧНЫЕ СтатусыОформленияДокументовЕГАИС.Основание) КАК КоличествоДокументов
	|ИЗ
	|	РегистрСведений.СтатусыОформленияДокументовЕГАИС КАК СтатусыОформленияДокументовЕГАИС
	|%ЛевоеСоединение%
	|ГДЕ
	|	СтатусыОформленияДокументовЕГАИС.Документ = ЗНАЧЕНИЕ(Документ.ЧекЕГАИСВозврат.ПустаяСсылка)
	|	И СтатусыОформленияДокументовЕГАИС.СтатусОформления В (
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыОформленияДокументовЕГАИС.НеОформлено),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыОформленияДокументовЕГАИС.ОформленоЧастично),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыОформленияДокументовЕГАИС.ТребуетсяСопоставлениеНоменклатуры)
	|	)
	|	%УсловиеСсылка%
	|	%УсловиеОрганизация%
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|";
	
	ПравоДоступаВозвратТоваровОтПокупателя = ПравоДоступа("Чтение", Метаданные.Документы.ВозвратТоваровОтПокупателя);
	
	ЛевоеСоединение = "";
	Если ПравоДоступаВозвратТоваровОтПокупателя Тогда
		ЛевоеСоединение = ЛевоеСоединение + "
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	Документ.ВозвратТоваровОтПокупателя КАК ВозвратТоваровОтПокупателя
		|ПО
		|	СтатусыОформленияДокументовЕГАИС.Основание = ВозвратТоваровОтПокупателя.Ссылка
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	Справочник.КлассификаторОрганизацийЕГАИС КАК КлассификаторОрганизацийЕГАИС
		|ПО
		|	КлассификаторОрганизацийЕГАИС.Ссылка В(&ОрганизацияЕГАИС)
		|";
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ЛевоеСоединение%", ЛевоеСоединение);
	
	УсловиеСсылка = "";
	УсловиеОрганизация = "";
	
	Если ПравоДоступаВозвратТоваровОтПокупателя Тогда
		
		УсловиеСсылка = "ВозвратТоваровОтПокупателя.Ссылка ЕСТЬ НЕ NULL";
		УсловиеОрганизация = "ВозвратТоваровОтПокупателя.Организация = КлассификаторОрганизацийЕГАИС.Контрагент";
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(УсловиеСсылка) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%УсловиеСсылка%", СтрШаблон("И (%1)", УсловиеСсылка));
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%УсловиеСсылка%", "");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(УсловиеОрганизация) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%УсловиеОрганизация%", СтрШаблон("И ((%1) ИЛИ &БезОтбораПоОрганизацииЕГАИС)", УсловиеОрганизация));
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%УсловиеОрганизация%", "");
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

//#КонецОбласти

//#Область Статусы

Функция ТекстСостоянияДокумента(Источник) Экспорт
	Возврат "";
КонецФункции

Процедура РассчитатьСтатусОформленияАктПостановкиНаБалансЕГАИС(Источник, Отказ) Экспорт
	
	//++ НЕ ГОСИС
	ИнтеграцияЕГАИСУТ.РассчитатьСтатусОформленияАктПостановкиНаБалансЕГАИС(Источник, Отказ);
	//-- НЕ ГОСИС
	
КонецПроцедуры

Функция ЗапросСтатусаОформленияАктПостановкиНаБалансЕГАИС(ДокументОснование) Экспорт
	
	//++ НЕ ГОСИС
	Запрос = ИнтеграцияЕГАИСУТ.ЗапросСтатусаОформленияАктПостановкиНаБалансЕГАИС(ДокументОснование);
	
	Возврат Запрос;
	//-- НЕ ГОСИС
	
КонецФункции

Процедура РассчитатьСтатусОформленияАктСписанияЕГАИС(Источник, Отказ) Экспорт
	
	//++ НЕ ГОСИС
	ИнтеграцияЕГАИСУТ.РассчитатьСтатусОформленияАктСписанияЕГАИС(Источник, Отказ);
	//-- НЕ ГОСИС
	
КонецПроцедуры

Функция ЗапросСтатусаОформленияАктСписанияЕГАИС(ДокументОснование) Экспорт
	
	//++ НЕ ГОСИС
	Запрос = ИнтеграцияЕГАИСУТ.ЗапросСтатусаОформленияАктСписанияЕГАИС(ДокументОснование);
	
	Возврат Запрос;
	//-- НЕ ГОСИС
	
КонецФункции


Процедура РассчитатьСтатусОформленияВозвратИзРегистра2ЕГАИС(Источник, Отказ) Экспорт
	
	//++ НЕ ГОСИС
	ИнтеграцияЕГАИСУТ.РассчитатьСтатусОформленияВозвратИзРегистра2ЕГАИС(Источник, Отказ);
	//-- НЕ ГОСИС
	
КонецПроцедуры

Функция ЗапросСтатусаОформленияВозвратИзРегистра2ЕГАИС(ДокументОснование) Экспорт
	
	//++ НЕ ГОСИС
	Запрос = ИнтеграцияЕГАИСУТ.ЗапросСтатусаОформленияВозвратИзРегистра2ЕГАИС(ДокументОснование);
	
	Возврат Запрос;
	//-- НЕ ГОСИС
	
КонецФункции


Процедура РассчитатьСтатусОформленияПередачаВРегистр2ЕГАИС(Источник, Отказ) Экспорт
	
	//++ НЕ ГОСИС
	ИнтеграцияЕГАИСУТ.РассчитатьСтатусОформленияПередачаВРегистр2ЕГАИС(Источник, Отказ);
	//-- НЕ ГОСИС
	
КонецПроцедуры

Функция ЗапросСтатусаОформленияПередачаВРегистр2ЕГАИС(ДокументОснование) Экспорт
	
	//++ НЕ ГОСИС
	Запрос = ИнтеграцияЕГАИСУТ.ЗапросСтатусаОформленияПередачаВРегистр2ЕГАИС(ДокументОснование);
	
	Возврат Запрос;
	//-- НЕ ГОСИС
	
КонецФункции


Процедура РассчитатьСтатусОформленияТТНИсходящаяЕГАИС(Источник, Отказ) Экспорт
	
	//++ НЕ ГОСИС
	ИнтеграцияЕГАИСУТ.РассчитатьСтатусОформленияТТНИсходящаяЕГАИС(Источник, Отказ);
	//-- НЕ ГОСИС
	
КонецПроцедуры

Функция ЗапросСтатусаОформленияТТНИсходящаяЕГАИС(ДокументОснование) Экспорт
	
	//++ НЕ ГОСИС
	Запрос = ИнтеграцияЕГАИСУТ.ЗапросСтатусаОформленияТТНИсходящаяЕГАИС(ДокументОснование);
	
	Возврат Запрос;
	//-- НЕ ГОСИС
	
КонецФункции


Процедура РассчитатьСтатусОформленияТТНВходящаяЕГАИС(Источник, Отказ) Экспорт
	
	//++ НЕ ГОСИС
	ИнтеграцияЕГАИСУТ.РассчитатьСтатусОформленияТТНВходящаяЕГАИС(Источник, Отказ);
	//-- НЕ ГОСИС
	
КонецПроцедуры

Функция ЗапросСтатусаОформленияТТНВходящаяЕГАИС(ДокументОснование) Экспорт
	
	//++ НЕ ГОСИС
	Запрос = ИнтеграцияЕГАИСУТ.ЗапросСтатусаОформленияТТНВходящаяЕГАИС(ДокументОснование);
	
	Возврат Запрос;
	//-- НЕ ГОСИС
	
КонецФункции


Процедура РассчитатьСтатусОформленияЧекЕГАИС(Источник, Отказ) Экспорт
	
	//++ НЕ ГОСИС
	ИнтеграцияЕГАИСУТ.РассчитатьСтатусОформленияЧекЕГАИС(Источник, Отказ);
	//-- НЕ ГОСИС
	
КонецПроцедуры

Функция ЗапросСтатусаОформленияЧекЕГАИС(ДокументОснование) Экспорт
	
	//++ НЕ ГОСИС
	Запрос = ИнтеграцияЕГАИСУТ.ЗапросСтатусаОформленияЧекЕГАИС(ДокументОснование);
	
	Возврат Запрос;
	//-- НЕ ГОСИС
	
КонецФункции


Процедура РассчитатьСтатусОформленияЧекЕГАИСВозврат(Источник, Отказ) Экспорт
	
	//++ НЕ ГОСИС
	ИнтеграцияЕГАИСУТ.РассчитатьСтатусОформленияЧекЕГАИСВозврат(Источник, Отказ);
	//-- НЕ ГОСИС
	
КонецПроцедуры

Функция ЗапросСтатусаОформленияЧекЕГАИСВозврат(ДокументОснование) Экспорт
	
	//++ НЕ ГОСИС
	Запрос = ИнтеграцияЕГАИСУТ.ЗапросСтатусаОформленияЧекЕГАИСВозврат(ДокументОснование);
	
	Возврат Запрос;
	//-- НЕ ГОСИС
	
КонецФункции


Функция ЭтоНеиспользуемыйСтатусДокумента(Статус) Экспорт
	
	Возврат Ложь;
	
КонецФункции

//#КонецОбласти

//#Область Серии

// Создает структуру для передачи параметров заполнения серий в функцию ЗаполнитьСгенерироватьСерии
//
// Возвращаемое значение:
//   Структура - Структура с необходимыми свойствами
//
Функция ПараметрыЗаполненияСерий() Экспорт

 	ПараметрыЗаполнения = Новый Структура();
	ПараметрыЗаполнения.Вставить("ОрганизацияЕГАИС",			Неопределено);
	ПараметрыЗаполнения.Вставить("ЗаполнятьБезЗапросаСправок",	Ложь);
	ПараметрыЗаполнения.Вставить("ПараметрыУказанияСерий",		Неопределено);
	ПараметрыЗаполнения.Вставить("Склад",						Неопределено);
	
	Возврат ПараметрыЗаполнения;

КонецФункции // ПараметрыЗаполненияСерий()

// Создает структуру возвращаемых значений функции ЗаполнитьСгенерироватьСерии
//
// Возвращаемое значение:
//   Структура - Структура с необходимыми свойствами
//
Функция РезультатЗаполненияСерий() Экспорт
	
	Результат = Новый Структура();
	Результат.Вставить("АдресМассиваЗапросов", Неопределено);
	Результат.Вставить("ЗаполнениеЗавершено",  Ложь);
	Результат.Вставить("СписокОшибок",         Неопределено);
	
	Возврат Результат;
	
КонецФункции

// Заполняет свойство "Склад" в структуре параметров заполнения серий
//
// Параметры:
// 	Объект - ДокументОбъект, ДанныеФормыКоллекция - объект, содержащий значение склада
//  ПараметрыЗаполнения - Структура - Структура параметров заполнения серий
//
Процедура ЗаполнитьПараметрЗаполненияСклад(Объект, ПараметрыЗаполнения) Экспорт

	ПараметрыУказанияСерий = ПараметрыЗаполнения.ПараметрыУказанияСерий;
	
	Если ПараметрыУказанияСерий = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыУказанияСерий.ИмяПоляСклад)
		И ИнтеграцияЕГАИСКлиентСервер.ЕстьРеквизитОбъекта(Объект, ПараметрыУказанияСерий.ИмяПоляСклад) Тогда
		ПараметрыЗаполнения.Склад = Объект[ПараметрыУказанияСерий.ИмяПоляСклад];
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьПараметрЗаполненияСклад()


// Заполняет реквизит "Серия" в товарной табличной части
//
// Параметры:
// 		ТабличнаяЧасть - ДанныеФормыКоллекция, ТабличнаяЧасть - Товарная табличная часть документа
// 		ВыделенныеСтроки - Массив - Массив выделенных строк
// 		ПараметрыЗаполнения - Структура - Структура параметров заполнения
// 			Обязательные поля:
// 				"ОрганизацияЕГАИС" - СправочникСсылка.КлассификаторОрганизацийЕГАИС - Организация
// 				"ЗаполнятьБезЗапросаСправок" - Булево - Принудительное заполнение серий без запроса справок 1
// 				"ПараметрыУказанияСерий" - Структура - Параметры указания серий, формируется в модулях менеджеров документов
// 				"Склад" - СправочникСсылка.Склады - склад
// 			Необязательные поля:
// 				"ПоляЗаполнения" - Строка - Строка с перечислением заполняемых полей в таблице. Значение по умолчанию: "Серия".
// 				"КолонкиПоЗначению" - Структура - Структура для передачи в качестве параметра "КолонкиПоЗначению" в функцию "ОбщегоНазначенияУТ.ВыгрузитьТаблицуЗначений"
// 				"ДругиеИменаКолонок" - Структура - Структура для передачи в качестве параметра "НовыеИменаКолонок" в функцию "ОбщегоНазначенияУТ.ВыгрузитьТаблицуЗначений"
// 		СтруктураДействий - Структура - Стандартная структура действий со строками для вызова "ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ"
// 		
// Возвращаемое значение:
//   Структура - Структура с результатом выполнения функции.
//
Функция ЗаполнитьСгенерироватьСерии(ТабличнаяЧасть, ВыделенныеСтроки = Неопределено, ПараметрыЗаполнения = Неопределено, СтруктураДействий = Неопределено) Экспорт
	
	Если СтруктураДействий = Неопределено Тогда
		СтруктураДействий = Новый Структура();
	КонецЕсли;
	
	Если ПараметрыЗаполнения = Неопределено Тогда
		ПараметрыУказанияСерий = Неопределено;
		Склад = Неопределено;
	Иначе
		ПараметрыУказанияСерий = ПараметрыЗаполнения.ПараметрыУказанияСерий;
		Склад = ПараметрыЗаполнения.Склад;
	КонецЕсли;
	
	СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус", Новый Структура("ПараметрыУказанияСерий, Склад", ПараметрыУказанияСерий, Склад));
	
	Результат = ИнтеграцияЕГАИСУТ.ЗаполнитьСгенерироватьСерии(ТабличнаяЧасть, ВыделенныеСтроки, ПараметрыЗаполнения, СтруктураДействий);
	
	Возврат Результат;
	
	Возврат РезультатЗаполненияСерий();
	
КонецФункции

//#КонецОбласти

///////////////////////////////////////////////////////////////////////////////////////////////////
//
// Адаптация: перенесенные процедуры проверки заполнения
//
///////////////////////////////////////////////////////////////////////////////////////////////////

// Функция возвращает параметры проверки заполнения количества
// 
// Возвращаемое значение:
//  Структура - структура параметров:
//  	*ИмяТЧ - Строка - значение по умолчанию "Товары"
//  	*СуффиксДопРеквизита - Строка - значение по умолчанию "" - если в ТЧ два реквизита "Количество", то второй назван с суффиксом.
//  		если суффикс передан, то проверяются оба реквизита
//  	*ПроверитьВозможностьОкругления - Булево - Истина если нужно проверить возможность округления
//  	*УсловиеОтбораСтрокДляОкругления - Строка - Условие выбора строк для проверки округления.
//  		в качестве имени таблицы нужно использовать имя переданное в ИмяТЧ
//  	*ПроверитьКомплектностьТоварныхМест - Булево - Флаг необходимости проверки комплектности товарных есть.
//  	*УсловиеОтбораСтрокПроверкиКомплектности - Строка - строка условия для запроса. Например, "Не ТаблицаТовары.ЭтоУпаковочныйЛист"
//  	*ПоляГруппировкиПроверкиКомплектности - Строка - Поля, по которым группируются товары для формирования целых товаров из товарных мест. 
//			Поля "Номенклатура", "Характеристика" и "Серия" будут добавлены по умолчанию. 
//			Поле "<Приставка>Назначение" нужно добавлять, если имя колонки отлично от строки "Назначение". Например, "НовоеНазначение".
//
Функция ПараметрыПроверкиЗаполненияКоличества() Экспорт
	
	ПараметрыПроверки = Новый Структура;
	ПараметрыПроверки.Вставить("ИмяТЧ",                           		  "Товары");
	ПараметрыПроверки.Вставить("ПредставлениеТЧ",                         "");
	ПараметрыПроверки.Вставить("ПутьКДанным",                             "Объект");
	ПараметрыПроверки.Вставить("СуффиксДопРеквизита",             		  "");
	ПараметрыПроверки.Вставить("ПроверитьВозможностьОкругления",  		  Истина);
	ПараметрыПроверки.Вставить("УсловиеОтбораСтрокДляОкругления", 		  "");
	ПараметрыПроверки.Вставить("ПроверитьКомплектностьТоварныхМест", 	  Ложь);
	ПараметрыПроверки.Вставить("УсловиеОтбораСтрокПроверкиКомплектности", "");
	ПараметрыПроверки.Вставить("ПоляГруппировкиПроверкиКомплектности", 	  "");
	
	Возврат ПараметрыПроверки;
	
КонецФункции

// Процедуры проверки заполнения реквизита Количество и КоличествоУпаковок в документах.
// Параметры:
//	Объект - проверяемый ДокументОбъект
//	ПроверяемыеРеквизиты - массив проверяемых реквизитов
//	Отказ - отказ продолжения операции.
Процедура ПроверитьЗаполнениеКоличества(Объект, ПроверяемыеРеквизиты, Отказ, ПараметрыПроверки = Неопределено) Экспорт
	
	Перем ЗаполнятьРеквизитОбязательно;
	Перем ЗаполнятьДопРеквизитОбязательно;
	
	Если ПараметрыПроверки = Неопределено Тогда
		ПараметрыПроверки = ПараметрыПроверкиЗаполненияКоличества();
	КонецЕсли;
	
	ИмяТЧ               = ПараметрыПроверки.ИмяТЧ;
	СуффиксДопРеквизита = ПараметрыПроверки.СуффиксДопРеквизита;
	
	КлючДанных = КлючДанныхДляСообщенияПользователю(Объект);
	
	Если ИмяТЧ = "Объект" Тогда
		
		ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("Количество"));
		ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("КоличествоУпаковок"));

		Если Объект.Количество = 0 И Объект.КоличествоУпаковок <> 0 Тогда

			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Обнаружено нулевое количество при пересчете в единицу хранения'"),
					КлючДанных,
					"КоличествоУпаковок",
					,
					Отказ);

		ИначеЕсли Объект.Количество = 0 Или Объект.КоличествоУпаковок = 0 Тогда

			ТекстСообщения = НСтр("ru = 'Не заполнено поле ""%ПредставлениеПоляКоличество%""'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ПредставлениеПоляКоличество%", Объект.Метаданные().Реквизиты.Количество.Синоним);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,
					КлючДанных,
					"КоличествоУпаковок",
					,
					Отказ);
				
		КонецЕсли;
	Иначе
		МетаданныеОбъекта = Объект.Метаданные();
		                                 
		РеквизитПроверки =  ПроверяемыеРеквизиты.Найти(ИмяТЧ + ".КоличествоУпаковок");
		ЗаполнятьРеквизитОбязательно = РеквизитПроверки <> Неопределено;
		Если РеквизитПроверки <> Неопределено Тогда
			ПроверяемыеРеквизиты.Удалить(РеквизитПроверки);
			ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти(ИмяТЧ + ".Количество"));
		КонецЕсли;
		
		ПредставлениеТЧ = ?(ПараметрыПроверки.ПредставлениеТЧ = "",
			МетаданныеОбъекта.ТабличныеЧасти[ИмяТЧ].Синоним,
			ПараметрыПроверки.ПредставлениеТЧ);
		
		ПредставлениеРеквизитаКоличествоУпаковок = МетаданныеОбъекта.ТабличныеЧасти[ИмяТЧ].Реквизиты.КоличествоУпаковок.Синоним;
		Если ЗначениеЗаполнено(СуффиксДопРеквизита) Тогда
			РеквизитПроверки =  ПроверяемыеРеквизиты.Найти(ИмяТЧ + ".КоличествоУпаковок"+СуффиксДопРеквизита);
			ЗаполнятьДопРеквизитОбязательно = РеквизитПроверки <> Неопределено;
			Если РеквизитПроверки <> Неопределено Тогда
				ПроверяемыеРеквизиты.Удалить(РеквизитПроверки);
				ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти(ИмяТЧ + ".Количество"+СуффиксДопРеквизита));
			КонецЕсли;
			ПредставлениеРеквизитаКоличествоУпаковокДоп  = МетаданныеОбъекта.ТабличныеЧасти[ИмяТЧ].Реквизиты["КоличествоУпаковок"+СуффиксДопРеквизита].Синоним;
		Иначе
			ЗаполнятьДопРеквизитОбязательно = Ложь;
			ПредставлениеРеквизитаКоличествоУпаковокДоп = "";
		КонецЕсли;
		
		ШаблонОшибкаКоличества = НСтр("ru = 'Не заполнена колонка ""%ПредставлениеКолонки%"" в строке %НомерСтроки% списка ""%ПредставлениеТЧ%""'");
		ШаблонОшибкаКоличества = СтрЗаменить(ШаблонОшибкаКоличества, "%ПредставлениеТЧ%", ПредставлениеТЧ);
		ШаблонОшибкаПересчета = НСтр("ru = 'Обнаружено нулевое количество при пересчете в единицу хранения в строке %НомерСтроки% списка ""%ПредставлениеТЧ%""'");
		ШаблонОшибкаПересчета = СтрЗаменить(ШаблонОшибкаПересчета, "%ПредставлениеТЧ%", ПредставлениеТЧ);
		
		Для Каждого СтрокаТаб Из Объект[ИмяТЧ] Цикл
			
			Если СтрокаТаб.Количество = 0 
				И СтрокаТаб.КоличествоУпаковок <> 0 Тогда
				
				ТекстСообщения = СтрЗаменить(ШаблонОшибкаПересчета, "%НомерСтроки%", Строка(СтрокаТаб.НомерСтроки));
				Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТЧ, СтрокаТаб.НомерСтроки, "КоличествоУпаковок");
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,КлючДанных,Поле,ПараметрыПроверки.ПутьКДанным,Отказ);
				
			ИначеЕсли ЗаполнятьРеквизитОбязательно
				И (СтрокаТаб.Количество = 0
				Или СтрокаТаб.КоличествоУпаковок = 0) Тогда
				
				ТекстСообщения = СтрЗаменить(ШаблонОшибкаКоличества, "%НомерСтроки%", Строка(СтрокаТаб.НомерСтроки));
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ПредставлениеКолонки%", ПредставлениеРеквизитаКоличествоУпаковок);
				
				Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТЧ, СтрокаТаб.НомерСтроки, "КоличествоУпаковок");
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,КлючДанных,Поле,ПараметрыПроверки.ПутьКДанным,Отказ);
						
			КонецЕсли;
			
			
			Если Не ЗначениеЗаполнено(СуффиксДопРеквизита) Тогда
				Продолжить;
			КонецЕсли;
			
			Если СтрокаТаб["Количество"+СуффиксДопРеквизита] = 0 
				И СтрокаТаб["КоличествоУпаковок"+СуффиксДопРеквизита] <> 0 Тогда
				
				ТекстСообщения = СтрЗаменить(ШаблонОшибкаПересчета, "%НомерСтроки%", Строка(СтрокаТаб.НомерСтроки));
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ПредставлениеТЧ%", ПредставлениеТЧ);
				
				Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТЧ, СтрокаТаб.НомерСтроки, "КоличествоУпаковок"+СуффиксДопРеквизита);
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,КлючДанных,Поле,ПараметрыПроверки.ПутьКДанным,Отказ);
				
			ИначеЕсли ЗаполнятьДопРеквизитОбязательно
				И (СтрокаТаб["Количество"+СуффиксДопРеквизита] = 0
				Или СтрокаТаб["КоличествоУпаковок"+СуффиксДопРеквизита]  = 0) Тогда
				
				ТекстСообщения = СтрЗаменить(ШаблонОшибкаКоличества, "%НомерСтроки%", Строка(СтрокаТаб.НомерСтроки));
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ПредставлениеТЧ%", ПредставлениеТЧ);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ПредставлениеКолонки%", ПредставлениеРеквизитаКоличествоУпаковокДоп);
				
				Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТЧ, СтрокаТаб.НомерСтроки,"КоличествоУпаковок"+СуффиксДопРеквизита);
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,КлючДанных,Поле,ПараметрыПроверки.ПутьКДанным,Отказ);
						
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТЧ.НомерСтроки КАК НомерСтроки,
	|	ТЧ.Номенклатура КАК Номенклатура,
	|	ТЧ.КоличествоУпаковок КАК КоличествоУпаковок,
	|	ТЧ.Количество КАК КоличествоВДокументе,
	|	ВЫРАЗИТЬ(ТЧ.Упаковка КАК Справочник.ЕдиницыИзмерения) КАК Упаковка,
	|	&ИмяПоляКоличествоУпаковокСуффикс КАК КоличествоУпаковокСуффикс,
	|	&ИмяПоляКоличествоСуффикс КАК КоличествоВДокументеСуффикс
	|ПОМЕСТИТЬ ВТДляЗапроса
	|ИЗ
	|	&ТЧ КАК ТЧ
	|ГДЕ
	|	ТЧ.Упаковка <> ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка)
	|	И &УсловиеОтбораСтрокДляОкругления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТДляЗапроса.НомерСтроки,
	|	ЛОЖЬ КАК МожноОкруглять,
	|	ВЫРАЗИТЬ(ВТДляЗапроса.Номенклатура КАК Справочник.Номенклатура).ЕдиницаХраненияОстатков КАК БазоваяЕдиницаИзмерения,
	|	ВТДляЗапроса.Номенклатура,
	|	ВТДляЗапроса.Упаковка,
	|	ЕСТЬNULL(ВТДляЗапроса.Упаковка.Коэффициент,1) КАК КоэффициентУпаковки,
	|	ВЫРАЗИТЬ(ВТДляЗапроса.КоличествоУпаковок * ЕСТЬNULL(ВТДляЗапроса.Упаковка.Коэффициент,1) КАК ЧИСЛО(15, 3)) КАК Количество,
	|	ВЫРАЗИТЬ(ВТДляЗапроса.КоличествоУпаковок * ЕСТЬNULL(ВТДляЗапроса.Упаковка.Коэффициент,1) КАК ЧИСЛО(15, 0)) КАК КоличествоОкругленное,
	|	ВТДляЗапроса.КоличествоВДокументе КАК КоличествоВДокументе,
	|	ВЫРАЗИТЬ(ВТДляЗапроса.КоличествоУпаковокСуффикс * ЕСТЬNULL(ВТДляЗапроса.Упаковка.Коэффициент,1) КАК ЧИСЛО(15, 3)) КАК КоличествоСуффикс,
	|	ВЫРАЗИТЬ(ВТДляЗапроса.КоличествоУпаковокСуффикс * ЕСТЬNULL(ВТДляЗапроса.Упаковка.Коэффициент,1) КАК ЧИСЛО(15, 0)) КАК КоличествоСуффиксОкругленное,
	|	ВТДляЗапроса.КоличествоВДокументеСуффикс КАК КоличествоВДокументеСуффикс
	|ПОМЕСТИТЬ ВТ
	|ИЗ
	|	ВТДляЗапроса КАК ВТДляЗапроса  
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТЧ.НомерСтроки КАК НомерСтроки,
	|	ПРЕДСТАВЛЕНИЕ(ТЧ.БазоваяЕдиницаИзмерения) КАК БазоваяЕдиницаИзмерения,
	|	ПРЕДСТАВЛЕНИЕ(ТЧ.Упаковка) КАК Упаковка,
	|	ТЧ.КоличествоОкругленное КАК КоличествоОкругленное,
	|	ТЧ.КоличествоСуффиксОкругленное КАК КоличествоСуффиксОкругленное,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА &ПроверитьВозможностьОкругления
	|					И ТЧ.МожноОкруглять
	|				ТОГДА ВЫБОР
	|						КОГДА ТЧ.Количество - ТЧ.КоличествоОкругленное > 0
	|							ТОГДА ТЧ.Количество - ТЧ.КоличествоОкругленное
	|						ИНАЧЕ ТЧ.КоличествоОкругленное - ТЧ.Количество
	|					КОНЕЦ
	|			ИНАЧЕ ВЫБОР
	|					КОГДА ТЧ.КоличествоВДокументе - ТЧ.Количество > 0
	|						ТОГДА ТЧ.КоличествоВДокументе - ТЧ.Количество
	|					ИНАЧЕ ТЧ.Количество - ТЧ.КоличествоВДокументе
	|				КОНЕЦ
	|		КОНЕЦ / ТЧ.КоэффициентУпаковки КАК ЧИСЛО(15, 3)) КАК КоличествоОтклонение,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА &ПроверитьВозможностьОкругления
	|					И ТЧ.МожноОкруглять
	|				ТОГДА &ДопустимыйПроцентОтклонения * ТЧ.КоличествоОкругленное / ТЧ.КоэффициентУпаковки / 100
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК ЧИСЛО(15, 3)) КАК КоличествоМаксимальнаяПогрешность,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА &ПроверитьВозможностьОкругления
	|				ТОГДА ВЫБОР
	|						КОГДА ТЧ.КоличествоСуффикс - ТЧ.КоличествоСуффиксОкругленное > 0
	|							ТОГДА ТЧ.КоличествоСуффикс - ТЧ.КоличествоСуффиксОкругленное
	|						ИНАЧЕ ТЧ.КоличествоСуффиксОкругленное - ТЧ.КоличествоСуффикс
	|					КОНЕЦ
	|			ИНАЧЕ ВЫБОР
	|					КОГДА ТЧ.КоличествоВДокументеСуффикс - ТЧ.КоличествоСуффикс > 0
	|						ТОГДА ТЧ.КоличествоВДокументеСуффикс - ТЧ.КоличествоСуффикс
	|					ИНАЧЕ ТЧ.КоличествоСуффикс - ТЧ.КоличествоВДокументеСуффикс
	|				КОНЕЦ
	|		КОНЕЦ / ТЧ.КоэффициентУпаковки КАК ЧИСЛО(15, 3)) КАК КоличествоСуффиксОтклонение,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА &ПроверитьВозможностьОкругления
	|					И ТЧ.МожноОкруглять
	|				ТОГДА &ДопустимыйПроцентОтклонения * ТЧ.КоличествоСуффиксОкругленное / ТЧ.КоэффициентУпаковки / 100
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК ЧИСЛО(15, 3)) КАК КоличествоСуффиксМаксимальнаяПогрешность
	|ИЗ
	|	ВТ КАК ТЧ
	|ГДЕ
	|	((ВЫРАЗИТЬ(ВЫБОР
	|					КОГДА &ПроверитьВозможностьОкругления
	|							И ТЧ.МожноОкруглять
	|						ТОГДА ВЫБОР
	|								КОГДА ТЧ.Количество - ТЧ.КоличествоОкругленное > 0
	|									ТОГДА ТЧ.Количество - ТЧ.КоличествоОкругленное
	|								ИНАЧЕ ТЧ.КоличествоОкругленное - ТЧ.Количество
	|							КОНЕЦ
	|					ИНАЧЕ ВЫБОР
	|							КОГДА ТЧ.КоличествоВДокументе - ТЧ.Количество > 0
	|								ТОГДА ТЧ.КоличествоВДокументе - ТЧ.Количество
	|							ИНАЧЕ ТЧ.Количество - ТЧ.КоличествоВДокументе
	|						КОНЕЦ
	|				КОНЕЦ / ТЧ.КоэффициентУпаковки КАК ЧИСЛО(15, 3))) > (ВЫРАЗИТЬ(ВЫБОР
	|					КОГДА &ПроверитьВозможностьОкругления
	|							И ТЧ.МожноОкруглять
	|						ТОГДА &ДопустимыйПроцентОтклонения * ТЧ.КоличествоОкругленное / ТЧ.КоэффициентУпаковки / 100
	|					ИНАЧЕ 0
	|				КОНЕЦ КАК ЧИСЛО(15, 3)))
	|			ИЛИ (ВЫРАЗИТЬ(ВЫБОР
	|					КОГДА &ПроверитьВозможностьОкругления
	|							И ТЧ.МожноОкруглять
	|						ТОГДА ВЫБОР
	|								КОГДА ТЧ.КоличествоСуффикс - ТЧ.КоличествоСуффиксОкругленное > 0
	|									ТОГДА ТЧ.КоличествоСуффикс - ТЧ.КоличествоСуффиксОкругленное
	|								ИНАЧЕ ТЧ.КоличествоСуффиксОкругленное - ТЧ.КоличествоСуффикс
	|							КОНЕЦ
	|					ИНАЧЕ ВЫБОР
	|							КОГДА ТЧ.КоличествоВДокументеСуффикс - ТЧ.КоличествоСуффикс > 0
	|								ТОГДА ТЧ.КоличествоВДокументеСуффикс - ТЧ.КоличествоСуффикс
	|							ИНАЧЕ ТЧ.КоличествоСуффикс - ТЧ.КоличествоВДокументеСуффикс
	|						КОНЕЦ
	|				КОНЕЦ / ТЧ.КоэффициентУпаковки КАК ЧИСЛО(15, 3))) > (ВЫРАЗИТЬ(ВЫБОР
	|					КОГДА &ПроверитьВозможностьОкругления
	|							И ТЧ.МожноОкруглять
	|						ТОГДА &ДопустимыйПроцентОтклонения * ТЧ.КоличествоСуффиксОкругленное / ТЧ.КоэффициентУпаковки / 100
	|					ИНАЧЕ 0
	|				КОНЕЦ КАК ЧИСЛО(15, 3))))
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";

	
	Если ЗначениеЗаполнено(СуффиксДопРеквизита) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяПоляКоличествоСуффикс", "ТЧ.Количество"+СуффиксДопРеквизита);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяПоляКоличествоУпаковокСуффикс", "ТЧ.КоличествоУпаковок"+СуффиксДопРеквизита);
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяПоляКоличествоСуффикс", "0");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяПоляКоличествоУпаковокСуффикс", "0");
	КонецЕсли;
	
	Если ПараметрыПроверки.УсловиеОтбораСтрокДляОкругления <> "" Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеОтбораСтрокДляОкругления", 
									СтрЗаменить(ПараметрыПроверки.УсловиеОтбораСтрокДляОкругления, ИмяТЧ + ".", "ТЧ."));
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеОтбораСтрокДляОкругления", "ИСТИНА");
	КонецЕсли; 
	
	ДопустимыйПроцентОтклонения = 0;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Если ИмяТЧ = "Объект" Тогда
		
		Таблица = Новый ТаблицаЗначений;
		Таблица.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(5,0,ДопустимыйЗнак.Неотрицательный)));	
		Таблица.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
		Таблица.Колонки.Добавить("Упаковка", Новый ОписаниеТипов("СправочникСсылка.ЕдиницыИзмерения"));
		Таблица.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,3,ДопустимыйЗнак.Неотрицательный)));	
		Таблица.Колонки.Добавить("КоличествоУпаковок", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,3,ДопустимыйЗнак.Неотрицательный)));	
		
		СтрокаТаблицы = Таблица.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Объект);
		
		Запрос.УстановитьПараметр("ТЧ", Таблица);
	Иначе	
		Запрос.УстановитьПараметр("ТЧ", Объект[ИмяТЧ].Выгрузить());
	КонецЕсли;	
	
	Запрос.УстановитьПараметр("ДопустимыйПроцентОтклонения", ДопустимыйПроцентОтклонения);
	Запрос.УстановитьПараметр("ПроверитьВозможностьОкругления", ПараметрыПроверки.ПроверитьВозможностьОкругления);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если ИмяТЧ = "Объект" Тогда
		Если Не ПараметрыПроверки.ПроверитьВозможностьОкругления Тогда
			ШаблонОшибкаОкругления = НСтр("ru = 'Количество в ""%Упаковка%"" переведено в количество в ""%БазоваяЕдиницаИзмерения%"" с погрешностью - %КоличествоОтклонение% %Упаковка%, что недопустимо, что свидетельствует об ошибке в работе программы. Обратитесь к администратору.'");
		ИначеЕсли ДопустимыйПроцентОтклонения > 0 Тогда
			ШаблонОшибкаОкругления = НСтр("ru = 'После округления количество товара будет равно %КоличествоОкругленное% %БазоваяЕдиницаИзмерения%, при этом погрешность округления составит %КоличествоОтклонение% %Упаковка%, что превышает максимальную погрешность - %КоличествоМаксимальнаяПогрешность% %Упаковка%.'");
		Иначе
			ШаблонОшибкаОкругления = НСтр("ru = 'Количество в ""%Упаковка%"" некратно количеству в ""%БазоваяЕдиницаИзмерения%"". Отклонение - %КоличествоОтклонение% %Упаковка%.'");
		КонецЕсли;
	Иначе
		Если Не ПараметрыПроверки.ПроверитьВозможностьОкругления Тогда
			ШаблонОшибкаОкругления = НСтр("ru = 'В строке %НомерСтроки% списка ""%ПредставлениеТЧ%"" количество в ""%Упаковка%"" переведено в количество в ""%БазоваяЕдиницаИзмерения%"" с отклонением - %КоличествоОтклонение% %Упаковка%, что свидетельствует об ошибке в работе программы. Обратитесь к администратору.'");
		ИначеЕсли ДопустимыйПроцентОтклонения > 0 Тогда
			ШаблонОшибкаОкругления = НСтр("ru = 'После округления количество товара будет равно %КоличествоОкругленное% %БазоваяЕдиницаИзмерения% в строке %НомерСтроки% списка ""%ПредставлениеТЧ%"", при этом погрешность округления составит %КоличествоОтклонение% %Упаковка%, что превышает максимальную погрешность - %КоличествоМаксимальнаяПогрешность% %Упаковка%.'");
		Иначе 
			ШаблонОшибкаОкругления = НСтр("ru = 'В строке %НомерСтроки% списка ""%ПредставлениеТЧ%"" количество в ""%Упаковка%"" некратно количеству в ""%БазоваяЕдиницаИзмерения%"". Отклонение - %КоличествоОтклонение% %Упаковка%.'");
		КонецЕсли;
		ШаблонОшибкаОкругления = СтрЗаменить(ШаблонОшибкаОкругления, "%ПредставлениеТЧ%", ПредставлениеТЧ);
	КонецЕсли;
	
	Пока Выборка.Следующий() Цикл
		Если Выборка.КоличествоОтклонение > Выборка.КоличествоМаксимальнаяПогрешность Тогда
			ТекстСообщения = ШаблонОшибкаОкругления;
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%БазоваяЕдиницаИзмерения%", Выборка.БазоваяЕдиницаИзмерения);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КоличествоОтклонение%", Выборка.КоличествоОтклонение);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Упаковка%", Выборка.Упаковка);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КоличествоМаксимальнаяПогрешность%", Выборка.КоличествоМаксимальнаяПогрешность);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КоличествоОкругленное%", Выборка.КоличествоОкругленное);
			Если ИмяТЧ = "Объект" Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, КлючДанных, "КоличествоУпаковок", ПараметрыПроверки.ПутьКДанным, Отказ);
			Иначе
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерСтроки%", Строка(Выборка.НомерСтроки));
				Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТЧ, Выборка.НомерСтроки, "КоличествоУпаковок");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,КлючДанных,Поле,ПараметрыПроверки.ПутьКДанным,Отказ);
			КонецЕсли;
		КонецЕсли;
		Если Выборка.КоличествоСуффиксОтклонение > Выборка.КоличествоСуффиксМаксимальнаяПогрешность Тогда
			ТекстСообщения = ШаблонОшибкаОкругления;
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%БазоваяЕдиницаИзмерения%", Выборка.БазоваяЕдиницаИзмерения);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КоличествоОтклонение%", Выборка.КоличествоСуффиксОтклонение);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Упаковка%", Выборка.Упаковка);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КоличествоМаксимальнаяПогрешность%", Выборка.КоличествоСуффиксМаксимальнаяПогрешность);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КоличествоОкругленное%", Выборка.КоличествоСуффиксОкругленное);
			Если ИмяТЧ = "Объект" Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, КлючДанных, "КоличествоУпаковок"+СуффиксДопРеквизита, ПараметрыПроверки.ПутьКДанным, Отказ);
			Иначе
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерСтроки%", Строка(Выборка.НомерСтроки));
				Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТЧ, Выборка.НомерСтроки, "КоличествоУпаковок"+СуффиксДопРеквизита);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,КлючДанных,Поле,ПараметрыПроверки.ПутьКДанным,Отказ);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ПараметрыПроверки.ПроверитьКомплектностьТоварныхМест Тогда 
		ПроверитьКомплектностьТоварныхМест(Объект[ИмяТЧ], Отказ, ПараметрыПроверки);
	КонецЕсли;
	
КонецПроцедуры

// Функция возвращает параметры проверки заполнения характеристик номенклатуры
//
//	Возвращаемое значение:
//		Структура  - структура со следующими ключами:
//			*ИмяТЧ - Строка - значение по умолчанию "Товары"
//			*СуффиксДопРеквизита - Строка - значение по умолчанию "" - если в ТЧ два реквизита "Характеристика", то второй назван с суффиком. 
//											если суффикс передан, то проверяются оба реквизита
//          *СписокСтрок - Массив, Неопределенно - значение по умолчанию Неопределенно
//			*ВыводитьНомераСтрок - Булево - значение по умолчанию Истина
//			*ВыдаватьСообщения - Булево - значение по умолчанию пустая ИСТИНА - если ЛОЖЬ, но не будут выдаваться сообщения, просто выставится Отказ.
//			*ПутьКДаннымТаблицыФормы - Строка - значение по умолчанию "Объект" - путь к реквизиту формы, содержащий проверяемую табличную часть.
//                                                                               Если проверяется таблица, которая сама является реквизитом формы, нужно
//                                                                               передать "" (т.е. пустую строку)
//			*ИмяКолонкиХарактеристикаТаблицыФормы - Структура - значение по умолчанию "Характеристика" - имя колонки таблицы формы, рядом с которой нужно
//																вывести сообщение. Нужно переопределять, когда вместо колонки характеристики отображатеся какая-то
//																другая колонка, например, с какими-то строковыми представлениями.
//
Функция ПараметрыПроверкиЗаполненияХарактеристик() Экспорт
	
	ПараметрыПроверки = Новый Структура;
	ПараметрыПроверки.Вставить("ИмяТЧ",                 "Товары");	
	ПараметрыПроверки.Вставить("ПредставлениеТЧ",       "");
	ПараметрыПроверки.Вставить("СуффиксДопРеквизита",   "");	
	ПараметрыПроверки.Вставить("СписокСтрок",           Неопределено);
	ПараметрыПроверки.Вставить("ВыводитьНомераСтрок",   Истина);
	ПараметрыПроверки.Вставить("ОтборПроверяемыхСтрок", Новый Структура);
	ПараметрыПроверки.Вставить("ВыдаватьСообщения", Истина);
	ПараметрыПроверки.Вставить("ПутьКДаннымТаблицыФормы", "Объект");
	ПараметрыПроверки.Вставить("ИмяКолонкиХарактеристикаТаблицыФормы", "Характеристика");
	
	Возврат ПараметрыПроверки;
	
КонецФункции

// Процедура проверки заполнения колонок "Характеристика" в объектах.
//
// Параметры:
//	Объект - ДокументОбъект (СправочникОбъект и т.п.) - объект, для которого требуется проверить заполнение 
//		колонки "Характеристика" в табличной части;
//	МассивНепроверяемыхРеквизитов -Массив - реквизиты, которые не нужно проверять платформенной проверкой;
//	Отказ - Булево, Истина - признак отказа продолжения операции;
//	ПараметрыПроверки - Структура - см. НоменклатураСервер.ПараметрыПроверкиЗаполненияХарактеристик.
//
Процедура ПроверитьЗаполнениеХарактеристик(Объект,МассивНепроверяемыхРеквизитов,Отказ,ПараметрыПроверки = Неопределено) Экспорт
	
	Если ПараметрыПроверки = Неопределено Тогда
		ПараметрыПроверки = ПараметрыПроверкиЗаполненияХарактеристик();
	КонецЕсли;
	
	ИмяТЧ                 = ПараметрыПроверки.ИмяТЧ;
	СуффиксДопРеквизита   = ПараметрыПроверки.СуффиксДопРеквизита;
	СписокСтрок           = ПараметрыПроверки.СписокСтрок;
	ВыводитьНомераСтрок   = ПараметрыПроверки.ВыводитьНомераСтрок;
	
	МассивНепроверяемыхРеквизитов.Добавить(ИмяТЧ+".Характеристика");
	
	Если ЗначениеЗаполнено(СуффиксДопРеквизита) Тогда
		МассивНепроверяемыхРеквизитов.Добавить(ИмяТЧ+".Характеристика"+СуффиксДопРеквизита);
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользованиеХарактеристикНоменклатуры") Тогда
		Возврат;
	КонецЕсли;
	
	КлючДанных = КлючДанныхДляСообщенияПользователю(Объект);
	
	Запрос = Новый Запрос;
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки,";
	
	Если ЗначениеЗаполнено(СуффиксДопРеквизита) Тогда
		ТекстЗапроса = ТекстЗапроса + "
	|	ТаблицаТоваров.Номенклатура"+СуффиксДопРеквизита+" КАК Номенклатура"+СуффиксДопРеквизита+",
	|	ТаблицаТоваров.Характеристика"+СуффиксДопРеквизита+" КАК Характеристика"+СуффиксДопРеквизита+",";
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + "
	|	ТаблицаТоваров.Номенклатура КАК Номенклатура,
	|	ТаблицаТоваров.Характеристика КАК Характеристика
	|ПОМЕСТИТЬ СтрокиСОшибками
	|ИЗ
	|	&ТаблицаТоваров КАК ТаблицаТоваров
	|ГДЕ
	|	ТаблицаТоваров.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)";
	
	Если ЗначениеЗаполнено(СуффиксДопРеквизита) Тогда
		ТекстЗапроса = ТекстЗапроса + "
	|	ИЛИ ТаблицаТоваров.Характеристика"+СуффиксДопРеквизита+" = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)";
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтрокиСОшибками.НомерСтроки,";
	
	Если ЗначениеЗаполнено(СуффиксДопРеквизита) Тогда
		ТекстЗапроса = ТекстЗапроса + "	
		|	ВЫБОР
		|		КОГДА ВЫРАЗИТЬ(СтрокиСОшибками.Номенклатура" + СуффиксДопРеквизита +" КАК Справочник.Номенклатура).ВестиУчетПоХарактеристикам
		|			И СтрокиСОшибками.Характеристика"+СуффиксДопРеквизита+" = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК НеЗаполненаХарактеристика" + СуффиксДопРеквизита +",";
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + "	
	|	ВЫБОР
	|		КОГДА ВЫРАЗИТЬ(СтрокиСОшибками.Номенклатура КАК Справочник.Номенклатура).ВестиУчетПоХарактеристикам
	|			И СтрокиСОшибками.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НеЗаполненаХарактеристика
	|ИЗ
	|	СтрокиСОшибками КАК СтрокиСОшибками
	|ГДЕ
	|	ВЫРАЗИТЬ(СтрокиСОшибками.Номенклатура КАК Справочник.Номенклатура).ВестиУчетПоХарактеристикам
	| 	И СтрокиСОшибками.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)";
	
	Если ЗначениеЗаполнено(СуффиксДопРеквизита) Тогда
		ТекстЗапроса = ТекстЗапроса + "
	|	ИЛИ ВЫРАЗИТЬ(СтрокиСОшибками.Номенклатура" + СуффиксДопРеквизита +" КАК Справочник.Номенклатура).ВестиУчетПоХарактеристикам
	|			И СтрокиСОшибками.Характеристика"+СуффиксДопРеквизита+" = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)";
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	СтрокаДопРеквизитов = ?(Не ЗначениеЗаполнено(СуффиксДопРеквизита), "", ",Номенклатура"+СуффиксДопРеквизита+",Характеристика"+СуффиксДопРеквизита);
	
	ОтборСтрокДляПроверки = Неопределено;
	
	Если СписокСтрок = Неопределено
		И ПараметрыПроверки.ОтборПроверяемыхСтрок.Количество() > 0 Тогда
		ОтборСтрокДляПроверки = ПараметрыПроверки.ОтборПроверяемыхСтрок;
	Иначе
		ОтборСтрокДляПроверки = СписокСтрок;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ТаблицаТоваров",
		Объект[ИмяТЧ].Выгрузить(ОтборСтрокДляПроверки, "НомерСтроки,Номенклатура,Характеристика"+СтрокаДопРеквизитов));
	
	Если ВыводитьНомераСтрок Тогда
		ШаблонСообщения = НСтр("ru='Не заполнена колонка ""%Характеристика%"" в строке %НомерСтроки% списка ""%ТаблицаТовары%"".'");
	Иначе
		ШаблонСообщения = НСтр("ru='Не заполнена колонка ""%Характеристика%"" в списке ""%ТаблицаТовары%"".'");
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не ПараметрыПроверки.ВыдаватьСообщения Тогда
		
		Если Не РезультатЗапроса.Пустой() Тогда
			Отказ = Истина;
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если ТипЗнч(Объект) = Тип("УправляемаяФорма") Тогда
		МетаданныеОбъекта = Объект.Ссылка.Метаданные();
	Иначе
		МетаданныеОбъекта = Объект.Метаданные();
	КонецЕсли;
	
	ПредставлениеТЧ = ?(Не ПараметрыПроверки.Свойство("ПредставлениеТЧ") ИЛИ Не ЗначениеЗаполнено(ПараметрыПроверки.ПредставлениеТЧ),
		МетаданныеОбъекта.ТабличныеЧасти[ИмяТЧ].Синоним,
		ПараметрыПроверки.ПредставлениеТЧ);
	ПредставлениеРеквизитаХарактеристика = МетаданныеОбъекта.ТабличныеЧасти[ИмяТЧ].Реквизиты.Характеристика.Синоним;
	ПредставлениеРеквизитаХарактеристикаДоп = МетаданныеОбъекта.ТабличныеЧасти[ИмяТЧ].Реквизиты["Характеристика"+СуффиксДопРеквизита].Синоним;
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.НеЗаполненаХарактеристика Тогда
			
			ТекстСообщения = СтрЗаменить(ШаблонСообщения, "%Характеристика%", ПредставлениеРеквизитаХарактеристика);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТаблицаТовары%", ПредставлениеТЧ);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерСтроки%", Выборка.НомерСтроки);
			
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТЧ,
																	Выборка.НомерСтроки,
																	ПараметрыПроверки.ИмяКолонкиХарактеристикаТаблицыФормы);
			                                                                           
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,
																КлючДанных,
																Поле,
																ПараметрыПроверки.ПутьКДаннымТаблицыФормы,
																Отказ);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СуффиксДопРеквизита)
			И Выборка["НеЗаполненаХарактеристика" + СуффиксДопРеквизита] Тогда
			
			ТекстСообщения = СтрЗаменить(ШаблонСообщения, "%Характеристика%", ПредставлениеРеквизитаХарактеристикаДоп);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТаблицаТовары%", ПредставлениеТЧ);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерСтроки%", Выборка.НомерСтроки);
			
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТЧ,
																	Выборка.НомерСтроки,
																	ПараметрыПроверки.ИмяКолонкиХарактеристикаТаблицыФормы + СуффиксДопРеквизита);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,
																КлючДанных,
																Поле,
																ПараметрыПроверки.ПутьКДаннымТаблицыФормы,
																Отказ);
		КонецЕсли;
		
	КонецЦикла;
		
КонецПроцедуры

// Функция возвращает параметры проверки заполнения характеристик номенклатуры
//
//	Возвращаемое значение:
//		Структура  - структура со следующими ключами:
//			*ВыдаватьСообщения - Булево - значение по умолчанию пустая ИСТИНА - если ЛОЖЬ, но не будут выдаваться сообщения, просто выставится Отказ.
//			*ПутьКДаннымТаблицыФормы - Строка - значение по умолчанию "Объект" - путь к реквизиту формы, содержащий проверяемую табличную часть.
//                                                                               Если проверяется таблица, которая сама является реквизитом формы, нужно
//                                                                               передать "" (т.е. пустую строку)
//			*ИмяКолонкиСерияТаблицыФормы - Структура - значение по умолчанию "Серия" - имя колонки таблицы формы, рядом с которой нужно
//																вывести сообщение. Нужно переопределять, когда вместо колонки серии отображатеся какая-то
//																другая колонка, например, с какими-то строковыми представлениями.
//
Функция ПараметрыПроверкиЗаполненияСерий() Экспорт
	
	ПараметрыПроверки = Новый Структура;
	ПараметрыПроверки.Вставить("ВыдаватьСообщения", Истина);
	ПараметрыПроверки.Вставить("ПутьКДаннымТаблицыФормы", "Объект");
	ПараметрыПроверки.Вставить("ИмяКолонкиСерияТаблицыФормы", "Серия");
	
	Возврат ПараметрыПроверки;
	
КонецФункции

// Процедура проверяет правильность указания серий товаров по статусам в ТЧ "Товары"
//  Если статусы
//  	1 - количество по сериям не совпадает с количеством товаров (движения по сериям делать не нужно)
//  	3 - количество по сериям не совпадает с количеством товаров (нужно делать движения по сериям)
//  	5 - количество по сериям не совпадает с количеством товаров (нужно делать движения по сериям, серии заполняются по FEFO)
//  	7 - количество по сериям не совпадает с количеством товаров (серии указываются при планировании отбора)
//  	9 - количество по сериям не совпадает с количеством товаров (серии указываются при планировании отгрузки)
//  	13 - количество по сериям не совпадает с количеством товаров или серия не указана (учет себестоимости по сериям)
// 			то выдается ошибка.
//
// Параметры:
//  ДокументОбъект					 - ДокументОбъект	 - объект, в котором нужно проверить указание серий
//  ПараметрыУказанияСерий			 - Структура		 - структура параметров указания серий, возвращаемая соотвествующей процедурой модуля менеджера документа
//  Отказ							 - Булево			 - признак ошибки проверки
//  МассивНепроверяемыхРеквизитов	 - Массив, Строка	 - массив имен реквизитов, которые нужно исключить из платформенной проверки
//  ВыдаватьСообщения				 - Булево			 - признак того, что нужно выдавать сообщения об ошибках проверки.
//
Процедура ПроверитьЗаполнениеСерий(ДокументОбъект,ПараметрыУказанияСерий,Отказ,МассивНепроверяемыхРеквизитов = Неопределено, ПараметрыПроверки = Неопределено) Экспорт
	
	Если ПараметрыПроверки = Неопределено Тогда
		ПараметрыПроверки = ПараметрыПроверкиЗаполненияСерий(); 
	КонецЕсли;
	
	МетаданныеДокумента = МетаданныеОбъектаПоПолномуИмени(ПараметрыУказанияСерий.ПолноеИмяОбъекта);
	
	Суффиксы = Новый Массив;
	Если ПараметрыУказанияСерий.ИменаПолейСтатусУказанияСерий.Количество() = 0 Тогда
		Суффиксы.Добавить("");
	Иначе
		Для Каждого ИмяПоляСтатус Из ПараметрыУказанияСерий.ИменаПолейСтатусУказанияСерий Цикл
			Суффикс = СуффиксВИмениПоляСтатусУказанияСерий(ИмяПоляСтатус);
			Если МетаданныеДокумента.ТабличныеЧасти[ПараметрыУказанияСерий.ИмяТЧТовары].Реквизиты.Найти("Серия" + Суффикс) <> Неопределено Тогда
				Суффиксы.Добавить(Суффикс);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если МассивНепроверяемыхРеквизитов <> Неопределено Тогда
		Для Каждого Суффикс Из Суффиксы Цикл
			МассивНепроверяемыхРеквизитов.Добавить(ПараметрыУказанияСерий.ИмяТЧТовары  +".Серия" + Суффикс);
		КонецЦикла;
		МассивНепроверяемыхРеквизитов.Добавить("Серия");
	КонецЕсли;
	
	Если Не ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры Тогда
		Возврат;
	КонецЕсли;
	
	КлючДанных = КлючДанныхДляСообщенияПользователю(ДокументОбъект);
	
	Если ПараметрыУказанияСерий.ТоварВШапке Тогда
		
		Если СтатусыСерийСерияНеУказана().Найти(ДокументОбъект.СтатусУказанияСерий) <> Неопределено
			И ДокументОбъект.СтатусУказанияСерий <> 13 Тогда
			
			ТекстСообщения = НСтр("ru = 'Количество товара ""%Товар%"" не соответствует указанному для него количеству серий. Исправьте серии.'");
				
			ТекстСообщения = СтрЗаменить(ТекстСообщения,
				"%Товар%","" + ДокументОбъект.Номенклатура + " " + ДокументОбъект.Характеристика);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,
				КлючДанных,
				"Номенклатура",
				ПараметрыПроверки.ПутьКДаннымТаблицыФормы,
				Отказ);
			
		ИначеЕсли ДокументОбъект.СтатусУказанияСерий = 13 Тогда
			ТекстСообщения = НСтр("ru = 'Поле ""Серия"" не заполнено'");
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,
				КлючДанных,
				ПараметрыПроверки.ИмяКолонкиСерияТаблицыФормы,
				ПараметрыПроверки.ПутьКДаннымТаблицыФормы,
				Отказ);
				
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	Если ПараметрыУказанияСерий.ИмяТЧТовары = ПараметрыУказанияСерий.ИмяТЧСерии Тогда
		
		Если ПараметрыУказанияСерий.ОсобеннаяПроверкаСтатусовУказанияСерий Тогда
	
			МодульМенеджера = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПараметрыУказанияСерий.ПолноеИмяОбъекта);
			ТекстЗапроса =	МодульМенеджера.ТекстЗапросаПроверкиЗаполненияСерий(ПараметрыУказанияСерий);
			
		Иначе
			
			ПроверитьКоличествоПоСериям(ДокументОбъект, ПараметрыУказанияСерий, Отказ, ПараметрыПроверки.ВыдаватьСообщения);
			
			ТекстЗапроса = 
			"ВЫБРАТЬ
			|	ТаблицаСерий.НомерСтроки КАК НомерСтроки,
			|	ТаблицаСерий.Серия КАК Серия,
			|	ТаблицаСерий.Номенклатура КАК Номенклатура,
			|	ТаблицаСерий.Характеристика КАК Характеристика,
			|	ТаблицаСерий.ПоляСвязи КАК ПоляСвязи,
			|	ТаблицаСерий.ИмяПоляКоличество КАК КоличествоУпаковок
			|ПОМЕСТИТЬ ТаблицаСерийДляЗапроса
			|ИЗ
			|	&ТаблицаСерий КАК ТаблицаСерий
			|ГДЕ
			|	ТаблицаСерий.СтатусУказанияСерий  > 0
			|	И НЕ ТаблицаСерий.СтатусУказанияСерий В (&СтатусыСерийСериюМожноУказать)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	МИНИМУМ(ТаблицаСерий.НомерСтроки) КАК НомерСтроки,
			|	ТаблицаСерий.Номенклатура КАК Номенклатура,
			|	СУММА(ТаблицаСерий.КоличествоУпаковок) КАК КоличествоУпаковок
			|ПОМЕСТИТЬ ТаблицаСерий
			|ИЗ
			|	ТаблицаСерийДляЗапроса КАК ТаблицаСерий
			|
			|СГРУППИРОВАТЬ ПО
			|	ТаблицаСерий.Серия,
			|	ТаблицаСерий.Номенклатура,
			|	ТаблицаСерий.ПоляСвязи,
			|	ТаблицаСерий.Характеристика
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ПРЕДСТАВЛЕНИЕ(Т.Номенклатура) КАК ТоварПредставление,
			|	ВЫБОР
			|		КОГДА Т.Номенклатура.ВестиУчетПоСериям 
			|			И Т.Серия = ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК СерияНеЗаполнена,
			|	ЛОЖЬ КАК ОшибкаКоличества,
			|	Т.НомерСтроки КАК НомерСтроки
			|ИЗ
			|	ТаблицаСерийДляЗапроса КАК Т
			|ГДЕ
			|	Т.Серия = ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
			|
			|УПОРЯДОЧИТЬ ПО
			|	Т.НомерСтроки";
			
			ПоляСвязиВЫБРАТЬ = "";
			ПоляСвязиСГРУППИРОВАТЬПО = "";
			Для Каждого ПолеСвязи Из ПараметрыУказанияСерий.ПоляСвязи Цикл
				ПоляСвязиВЫБРАТЬ = ПоляСвязиВЫБРАТЬ + "
				|	ТаблицаСерий." + ПолеСвязи + " КАК " + ПолеСвязи + ",";
				
				ПоляСвязиСГРУППИРОВАТЬПО = ПоляСвязиСГРУППИРОВАТЬПО + "
				|	ТаблицаСерий." + ПолеСвязи + ",";
			КонецЦикла;
			
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаСерий.ПоляСвязи КАК ПоляСвязи,", ПоляСвязиВЫБРАТЬ);
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаСерий.ПоляСвязи,", ПоляСвязиСГРУППИРОВАТЬПО);
		
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИмяПоляКоличество", ПараметрыУказанияСерий.ИмяПоляКоличество);
		
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапроса;
		Запрос.УстановитьПараметр("СтатусыСерийСериюМожноУказать", СтатусыСерийСериюМожноУказать());
		
		Если ПараметрыУказанияСерий.ОтборПроверяемыхСтрок <> Неопределено Тогда
			Запрос.УстановитьПараметр("ТаблицаСерий",
			ДокументОбъект[ПараметрыУказанияСерий.ИмяТЧТовары].Выгрузить(ПараметрыУказанияСерий.ОтборПроверяемыхСтрок));
		Иначе
			Запрос.УстановитьПараметр("ТаблицаСерий",
			ДокументОбъект[ПараметрыУказанияСерий.ИмяТЧТовары].Выгрузить());
		КонецЕсли;
		
		Если ПараметрыПроверки.ВыдаватьСообщения Тогда
			Выборка = Запрос.Выполнить().Выбрать();
			
			ПредставлениеТЧ = МетаданныеДокумента.ТабличныеЧасти[ПараметрыУказанияСерий.ИмяТЧТовары].Синоним;
			
			Пока Выборка.Следующий() Цикл
				
				Если Выборка.СерияНеЗаполнена Тогда
					ТекстСообщения = НСтр("ru = 'Не заполнена колонка ""%ИмяРеквизитаСерия%"" в строке %НомерСтроки% списка ""%ПредставлениеТЧ%""'");
					
					ИмяРеквизитаСерия = МетаданныеДокумента.ТабличныеЧасти[ПараметрыУказанияСерий.ИмяТЧТовары].Реквизиты["Серия"].Синоним;
					
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИмяРеквизитаСерия%", ИмяРеквизитаСерия);
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерСтроки%", Строка(Выборка.НомерСтроки));
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ПредставлениеТЧ%", ПредставлениеТЧ);
					
					Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ПараметрыУказанияСерий.ИмяТЧТовары, Выборка.НомерСтроки, ПараметрыПроверки.ИмяКолонкиСерияТаблицыФормы);
					
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,КлючДанных,Поле,ПараметрыПроверки.ПутьКДаннымТаблицыФормы,Отказ);
				КонецЕсли;
				
				Если Выборка.ОшибкаКоличества Тогда
					// Только для случая ПараметрыУказанияСерий.ОсобеннаяПроверкаСтатусовУказанияСерий, 
					ТекстСообщения = НСтр("ru = 'Политика учета серий товара ""%ТоварПредставление%"" предусматривает, что количество по любой серии этого товара всегда будет равно 1""'");
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерСтроки%", Строка(Выборка.НомерСтроки));
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТоварПредставление%", Выборка.ТоварПредставление);
					
					// Сделано неуниверсально, т.к. во всех документах, где справочные серии указываются только в той же ТЧ, что и
					// товары, есть поле КоличествоУпаковок.
					Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ПараметрыУказанияСерий.ИмяТЧТовары, Выборка.НомерСтроки, "КоличествоУпаковок");
					
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,КлючДанных,Поле,ПараметрыПроверки.ПутьКДаннымТаблицыФормы,Отказ);
				КонецЕсли;
				
			КонецЦикла;
		Иначе
			Если Не Запрос.Выполнить().Пустой() Тогда
				Отказ = Истина;	
			КонецЕсли;
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	&ТекстПоляВыбораТовары,
	|	ТаблицаТоваров.Номенклатура КАК Номенклатура,
	|	ТаблицаТоваров.Характеристика КАК Характеристика,
	|	&ИмяПоляКоличествоТовары КАК Количество,
	|	ТаблицаТоваров.СтатусУказанияСерий КАК СтатусУказанияСерий,
	|	ТаблицаТоваров.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ ТаблицаТоваров
	|ИЗ
	|	&ТаблицаТоваров КАК ТаблицаТоваров
	|ГДЕ
	|	ТаблицаТоваров.СтатусУказанияСерий В (&СтатусыСерийСерияНеУказана)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&ТекстПоляВыбораТовары,
	|	&ИмяПоляЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ТаблицаТоваров.Номенклатура КАК Номенклатура,
	|	ТаблицаТоваров.Характеристика КАК Характеристика,
	|	ТаблицаТоваров.СтатусУказанияСерий КАК СтатусУказанияСерий,
	|	СУММА(ТаблицаТоваров.Количество) КАК Количество
	|ПОМЕСТИТЬ ТаблицаТоваровДляЗапроса
	|ИЗ
	|	ТаблицаТоваров КАК ТаблицаТоваров
	|
	|СГРУППИРОВАТЬ ПО
	|	&ТекстПоляВыбораТовары,
	|	ТаблицаТоваров.Номенклатура,
	|	ТаблицаТоваров.Характеристика,
	|	ТаблицаТоваров.СтатусУказанияСерий
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&ТекстПоляВыбораСерии,
	|	ТаблицаСерий.Серия КАК Серия,
	|	ТаблицаСерий.Номенклатура КАК Номенклатура,
	|	ТаблицаСерий.Характеристика КАК Характеристика,
	|	&ИмяПоляКоличествоСерии КАК Количество
	|ПОМЕСТИТЬ ТаблицаСерий
	|ИЗ
	|	&ТаблицаСерий КАК ТаблицаСерий
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&ТекстПоляВыбораСерии,
	|	ТаблицаСерий.Номенклатура КАК Номенклатура,
	|	ТаблицаСерий.Характеристика КАК Характеристика,
	|	СУММА(ТаблицаСерий.Количество) КАК Количество
	|ПОМЕСТИТЬ ТаблицаСерийДляЗапроса
	|ИЗ
	|	ТаблицаСерий КАК ТаблицаСерий
	|
	|СГРУППИРОВАТЬ ПО
	|	&ТекстПоляВыбораСерии,
	|	ТаблицаСерий.Номенклатура,
	|	ТаблицаСерий.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	null КАК НомерКиЗГИСМ,
	|	ЕСТЬNULL(ТаблицаСерийДляЗапроса.Количество, 0) КАК КоличествоСерий,
	|	ТаблицаТоваровДляЗапроса.Количество КАК КоличествоТоваров,
	|	ТаблицаТоваров.НомерСтроки КАК НомерСтроки,
	|	ТаблицаТоваров.СтатусУказанияСерий КАК СтатусУказанияСерий,
	|	ТаблицаТоваров.СтатусУказанияСерий = 13
	|		ИЛИ &СерииПриПланированииОтгрузкиУказываютсяВТЧТовары
	|			И ТаблицаТоваров.СтатусУказанияСерий = 9 КАК ОшибкаНеУказанаСерия,
	|	ЕСТЬNULL(ТаблицаСерийДляЗапроса.Количество, 0) <> ТаблицаТоваровДляЗапроса.Количество КАК ОшибкаНеРавноКоличество,
	|	ЛОЖЬ КАК ОшибкаКоличестваКиЗ,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаТоваров.Номенклатура) КАК Номенклатура,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаТоваров.Характеристика) КАК Характеристика,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаТоваровДляЗапроса.ЕдиницаИзмерения) КАК ЕдиницаИзмерения
	|ИЗ
	|	ТаблицаТоваров КАК ТаблицаТоваров
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаТоваровДляЗапроса КАК ТаблицаТоваровДляЗапроса
	|		ПО ТаблицаТоваров.Номенклатура = ТаблицаТоваровДляЗапроса.Номенклатура
	|			И ТаблицаТоваров.Характеристика = ТаблицаТоваровДляЗапроса.Характеристика
	|			И (&ТекстПоляСвязиСоединениеТоварыВсеТовары)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСерийДляЗапроса КАК ТаблицаСерийДляЗапроса
	|		ПО ТаблицаТоваров.Номенклатура = ТаблицаСерийДляЗапроса.Номенклатура
	|			И ТаблицаТоваров.Характеристика = ТаблицаСерийДляЗапроса.Характеристика
	|			И (&ТекстПоляСвязиСоединениеТоварыСерии)
	|ГДЕ
	|	(ТаблицаТоваров.СтатусУказанияСерий = 13
	|			ИЛИ &СерииПриПланированииОтгрузкиУказываютсяВТЧТовары
	|				И ТаблицаТоваров.СтатусУказанияСерий = 9
	|			ИЛИ ЕСТЬNULL(ТаблицаСерийДляЗапроса.Количество, 0) <> ТаблицаТоваровДляЗапроса.Количество)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	ТекстПоляВыбораТовары = "";
	ТекстПоляВыбораСерии = "";
	ТекстПоляСвязиСоединениеТоварыСерии = "";
	ТекстПоляСвязиСоединениеТоварыВсеТовары = "";
	Для Каждого СтрМас Из ПараметрыУказанияСерий.ПоляСвязи Цикл
		ТекстПоляВыбораТовары = ТекстПоляВыбораТовары + "
		|	ТаблицаТоваров." + СтрМас + ",";
		ТекстПоляВыбораСерии = ТекстПоляВыбораСерии + "
		|	ТаблицаСерий." + СтрМас + ",";
		ТекстПоляСвязиСоединениеТоварыСерии = ТекстПоляСвязиСоединениеТоварыСерии + "
		|			И ТаблицаТоваров."+СтрМас+" = ТаблицаСерийДляЗапроса."+СтрМас;
		ТекстПоляСвязиСоединениеТоварыВсеТовары = ТекстПоляСвязиСоединениеТоварыВсеТовары + "
		|			И ТаблицаТоваров."+СтрМас+" = ТаблицаТоваровДляЗапроса." + СтрМас;
	КонецЦикла;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстПоляВыбораТовары,", ТекстПоляВыбораТовары);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстПоляВыбораСерии,", ТекстПоляВыбораСерии);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И (&ТекстПоляСвязиСоединениеТоварыСерии)", ТекстПоляСвязиСоединениеТоварыСерии);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И (&ТекстПоляСвязиСоединениеТоварыВсеТовары)", ТекстПоляСвязиСоединениеТоварыВсеТовары);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяПоляКоличествоТовары", "ТаблицаТоваров." + ПараметрыУказанияСерий.ИмяПоляКоличество);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяПоляКоличествоСерии", "ТаблицаСерий." + ПараметрыУказанияСерий.ИмяПоляКоличество);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяПоляЕдиницаИзмерения",
		?(ПараметрыУказанияСерий.ПоляСвязи.Найти("Упаковка") <> Неопределено, "ТаблицаТоваров.Упаковка","ТаблицаТоваров.Номенклатура.ЕдиницаИзмерения"));
		
	МенеджерВТ = Новый МенеджерВременныхТаблиц;
		
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.Текст = ТекстЗапроса;
	Если ПараметрыУказанияСерий.Свойство("ОтборПроверяемыхСтрок") Тогда
		Запрос.УстановитьПараметр("ТаблицаТоваров",
			ДокументОбъект[ПараметрыУказанияСерий.ИмяТЧТовары].Выгрузить(ПараметрыУказанияСерий.ОтборПроверяемыхСтрок));
	Иначе
		Запрос.УстановитьПараметр("ТаблицаТоваров",
			ДокументОбъект[ПараметрыУказанияСерий.ИмяТЧТовары].Выгрузить());
	КонецЕсли;
	
	Запрос.УстановитьПараметр("СтатусыСерийСерияНеУказана", СтатусыСерийСерияНеУказана());
	
	Запрос.УстановитьПараметр("ТаблицаСерий",
			ДокументОбъект[ПараметрыУказанияСерий.ИмяТЧСерии].Выгрузить());
	СерииПриПланированииОтгрузкиУказываютсяВТЧТовары = Не ПараметрыУказанияСерий.СерииПриПланированииОтгрузкиУказываютсяВТЧСерии;
	Запрос.УстановитьПараметр("СерииПриПланированииОтгрузкиУказываютсяВТЧТовары", СерииПриПланированииОтгрузкиУказываютсяВТЧТовары);
	
	ПредставлениеТЧ = МетаданныеДокумента.ТабличныеЧасти[ПараметрыУказанияСерий.ИмяТЧТовары].Синоним;
	ЕстьРеквизитСерия = МетаданныеДокумента.ТабличныеЧасти[ПараметрыУказанияСерий.ИмяТЧТовары].Реквизиты.Найти("Серия") <> Неопределено;
			
	Если ПараметрыПроверки.ВыдаватьСообщения Тогда
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			Если Выборка.ОшибкаНеУказанаСерия
				Или Выборка.ОшибкаНеРавноКоличество Тогда
				Если (Выборка.СтатусУказанияСерий = 13
						Или СерииПриПланированииОтгрузкиУказываютсяВТЧТовары И Выборка.СтатусУказанияСерий = 9)
					И  ЕстьРеквизитСерия Тогда
					ТекстСообщения = НСтр("ru = 'Не заполнена колонка ""Серия"" в строке %НомерСтроки% списка ""%ПредставлениеТЧ%""'");
					
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерСтроки%",Выборка.НомерСтроки);
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ПредставлениеТЧ%",ПредставлениеТЧ);
					
					Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ПараметрыУказанияСерий.ИмяТЧТовары, Выборка.НомерСтроки, ПараметрыПроверки.ИмяКолонкиСерияТаблицыФормы);
					
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, КлючДанных , Поле, ПараметрыПроверки.ПутьКДаннымТаблицыФормы, Отказ);
				Иначе
					ТекстСообщения = НСтр("ru = 'Для товара ""%Товар%"" указано по сериям %КоличествоСерий% %ЕдиницаИзмерения%. Необходимо указать %КоличествоТоваров% %ЕдиницаИзмерения%. Исправьте серии.'");
					
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Товар%","" + Выборка.Номенклатура + " " + Выборка.Характеристика);
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КоличествоСерий%",Выборка.КоличествоСерий);
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КоличествоТоваров%",Выборка.КоличествоТоваров);
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ЕдиницаИзмерения%",Выборка.ЕдиницаИзмерения);
					
					Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ПараметрыУказанияСерий.ИмяТЧТовары, Выборка.НомерСтроки, "СтатусУказанияСерий");
					
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, КлючДанных , Поле, ПараметрыПроверки.ПутьКДаннымТаблицыФормы, Отказ);
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
	Иначе
		Если Не Запрос.Выполнить().Пустой() Тогда
			Отказ = Истина;	
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// Возвращает метаданные объекта по полному имени объекта метаданных
//
// Не обрабатываются точки маршрутов бизнес-процессов
//
// Параметры:
//  ПолноеИмя    - Строка, полное имя объекта метаданных,
//                 например, "Справочник.Организации".
//
// Возвращаемое значение:
//  КоллекцияОбъектовМетаданных
// 
Функция МетаданныеОбъектаПоПолномуИмени(ПолноеИмя) Экспорт
	
	ЧастиИмени = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПолноеИмя, ".");
	
	КлассОМ = ЧастиИмени[0];
	ИмяОМ   = ЧастиИмени[1];
	
	Если      ВРег(КлассОМ) = "ПЛАНОБМЕНА" Тогда
		Возврат Метаданные.ПланыОбмена[ИмяОМ];
		
	ИначеЕсли ВРег(КлассОМ) = "СПРАВОЧНИК" Тогда
		Возврат Метаданные.Справочники[ИмяОМ];
		
	ИначеЕсли ВРег(КлассОМ) = "ДОКУМЕНТ" Тогда
		Возврат Метаданные.Документы[ИмяОМ];
		
	ИначеЕсли ВРег(КлассОМ) = "ЖУРНАЛДОКУМЕНТОВ" Тогда
		Возврат Метаданные.ЖурналыДокументов[ИмяОМ];
		
	ИначеЕсли ВРег(КлассОМ) = "ПЕРЕЧИСЛЕНИЕ" Тогда
		Возврат Метаданные.Перечисления[ИмяОМ];
		
	ИначеЕсли ВРег(КлассОМ) = "ОТЧЕТ" Тогда
		Возврат Метаданные.Отчеты[ИмяОМ];
		
	ИначеЕсли ВРег(КлассОМ) = "ОБРАБОТКА" Тогда
		Возврат Метаданные.Обработки[ИмяОМ];
		
	ИначеЕсли ВРег(КлассОМ) = "ПЛАНВИДОВХАРАКТЕРИСТИК" Тогда
		Возврат Метаданные.ПланыВидовХарактеристик[ИмяОМ];
		
	ИначеЕсли ВРег(КлассОМ) = "ПЛАНСЧЕТОВ" Тогда
		Возврат Метаданные.ПланыСчетов[ИмяОМ];
		
	ИначеЕсли ВРег(КлассОМ) = "ПЛАНВИДОВРАСЧЕТА" Тогда
		Возврат Метаданные.ПланЫВидовРасчета[ИмяОМ];
		
	ИначеЕсли ВРег(КлассОМ) = "РЕГИСТРСВЕДЕНИЙ" Тогда
		Возврат Метаданные.РегистрыСведений[ИмяОМ];
		
	ИначеЕсли ВРег(КлассОМ) = "РЕГИСТРНАКОПЛЕНИЯ" Тогда
		Возврат Метаданные.РегистрыНакопления[ИмяОМ];
		
	ИначеЕсли ВРег(КлассОМ) = "РЕГИСТРБУХГАЛТЕРИИ" Тогда
		Возврат Метаданные.РегистрыБухгалтерии[ИмяОМ];
		
	ИначеЕсли ВРег(КлассОМ) = "РЕГИСТРРАСЧЕТА" Тогда
		Возврат Метаданные.РегистрыРасчета[ИмяОМ];
		
	ИначеЕсли ВРег(КлассОМ) = "БИЗНЕСПРОЦЕСС" Тогда
		Возврат Метаданные.БизнесПроцессы[ИмяОМ];
		
	ИначеЕсли ВРег(КлассОМ) = "ЗАДАЧА" Тогда
		Возврат Метаданные.Задачи[ИмяОМ];
		
	ИначеЕсли ВРег(КлассОМ) = "КОНСТАНТА" Тогда
		Возврат Метаданные.Константы[ИмяОМ];
		
	ИначеЕсли ВРег(КлассОМ) = "ПОСЛЕДОВАТЕЛЬНОСТЬ" Тогда
		Возврат Метаданные.Последовательности[ИмяОМ];
		
	Иначе
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Неизвестный тип объекта метаданных (%1)'"), КлассОМ);
	КонецЕсли;
	
КонецФункции

// Возвращает ключ данных для подстановки в сообщение пользователю
// Ключ данных нужен при групповой обработке объектов - если он установлен, то при нажатии пользователем на сообщение
// будет открываться форма объекта.
//
//	Параметры:
//		Объект - Произвольный - объект, для которого нужно получить ключ данных.
//	
//	Возвращаемое значение
//		Ссылка - ссылка на объект информационной базы.
//
Функция КлючДанныхДляСообщенияПользователю(Объект) Экспорт
	
	КлючДанных = Неопределено;
	XMLТипЗнч = XMLТипЗнч(Объект); 
	
	Если XMLТипЗнч <> Неопределено Тогда
		ТипЗначенияСтрокой = XMLТипЗнч.ИмяТипа;
		Если СтрНайти(ТипЗначенияСтрокой, "Object.") > 0 Тогда
			КлючДанных = Объект.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	Возврат КлючДанных;
	
КонецФункции

Процедура ПроверитьКомплектностьТоварныхМест(ТабличнаяЧастьТоваров, Отказ, ПараметрыПроверки = Неопределено) Экспорт  
	
	Если ПараметрыПроверки = Неопределено Тогда
		ПараметрыПроверки = ПараметрыПроверкиЗаполненияКоличества();
	КонецЕсли;
	
	ТаблицаТоваров = ТабличнаяЧастьТоваров.Выгрузить();
	
	ЕстьОшибки = Ложь;	
	
	Запрос = Новый Запрос;
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(Таблица.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
	|	ВЫРАЗИТЬ(Таблица.Характеристика КАК Справочник.ХарактеристикиНоменклатуры) КАК Характеристика,
	|	ВЫРАЗИТЬ(Таблица.Серия КАК Справочник.СерииНоменклатуры) КАК Серия,
	|	&ПоляГруппировки,
	|	ВЫРАЗИТЬ(Таблица.Упаковка КАК Справочник.ЕдиницыИзмерения) КАК Упаковка,
	|	Таблица.Количество КАК Количество,
	|	Таблица.КоличествоУпаковок КАК КоличествоУпаковок
	|ПОМЕСТИТЬ ТаблицаТоваров
	|ИЗ
	|	&Таблица КАК Таблица
	|ГДЕ
	|	&УсловиеОтбораСтрокПроверкиКомплектности
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Таблица.Номенклатура КАК Номенклатура,
	|	Таблица.Характеристика КАК Характеристика,
	|	Таблица.Серия КАК Серия,
	|	&ПоляГруппировки,
	|	Таблица.Упаковка КАК Упаковка,
	|	Таблица.Номенклатура.Наименование КАК НоменклатураПредставление,
	|	Таблица.Характеристика.Наименование КАК ХарактеристикаПредставление,
	|	ПРЕДСТАВЛЕНИЕ(Таблица.Серия) КАК СерияПредставление,
	|	СУММА(Таблица.Количество) КАК Количество,
	|	СУММА(Таблица.КоличествоУпаковок) КАК КоличествоУпаковок
	|ИЗ
	|	ТаблицаТоваров КАК Таблица
	|ГДЕ
	|	ЕСТЬNULL(Таблица.Упаковка.ТипУпаковки, НЕОПРЕДЕЛЕНО) = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковокНоменклатуры.ТоварноеМесто)
	|
	|СГРУППИРОВАТЬ ПО
	|	Таблица.Номенклатура,
	|	Таблица.Характеристика,
	|	Таблица.Серия,
	|	&ПоляГруппировки,
	|	Таблица.Упаковка,
	|	Таблица.Характеристика.Наименование,
	|	Таблица.Номенклатура.Наименование
	|ИТОГИ ПО
	|	Номенклатура,
	|	Характеристика,
	|	&ПоляГруппировки,
	|	Серия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Номенклатура.Ссылка КАК Номенклатура,
	|	Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ЕдиницыИзмерения.Ссылка КАК Упаковка,
	|	1 КАК КоличествоТоварныхМест
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
	|		ПО (ЕдиницыИзмерения.Владелец = Номенклатура.Ссылка)
	|ГДЕ
	|	Номенклатура.Ссылка В
	|			(ВЫБРАТЬ
	|				ТаблицаТоваров.Номенклатура КАК Номенклатура
	|			ИЗ
	|				ТаблицаТоваров КАК ТаблицаТоваров)
	|	И НЕ ЕдиницыИзмерения.ПометкаУдаления
	|";
	
	Если ПараметрыПроверки.УсловиеОтбораСтрокПроверкиКомплектности <> "" Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеОтбораСтрокПроверкиКомплектности", 
									СтрЗаменить(ПараметрыПроверки.УсловиеОтбораСтрокПроверкиКомплектности, ПараметрыПроверки.ИмяТЧ + ".", "Таблица."));
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеОтбораСтрокПроверкиКомплектности", "ИСТИНА");
	КонецЕсли;
	
	ТекстПоляГруппировки = ПараметрыПроверки.ПоляГруппировкиПроверкиКомплектности;
	
	Если ТабличнаяЧастьТоваров.Количество() <> 0 Тогда
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТабличнаяЧастьТоваров[0], "Назначение") Тогда
			ПолеНазначение = ?(ЗначениеЗаполнено(ТекстПоляГруппировки), "Назначение,", "Назначение");
			ТекстПоляГруппировки = ПолеНазначение + ТекстПоляГруппировки;
		КонецЕсли;
	КонецЕсли;
	
	ТекстПоляГруппировки = СтрЗаменить(ТекстПоляГруппировки, " ", "");
	ТекстПоляГруппировки = СтрЗаменить(ТекстПоляГруппировки, ",", ",Таблица.");
	Если ЗначениеЗаполнено(ТекстПоляГруппировки) Тогда
		ТекстПоляГруппировки = "Таблица." + ТекстПоляГруппировки;
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПоляГруппировки", ТекстПоляГруппировки);
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПоляГруппировки,", "");
	КонецЕсли;
	
	МаксимальныйНомерПоля = СтрРазделить(ТекстПоляГруппировки, ",").Количество();
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Таблица", ТаблицаТоваров);
	РезультатЗапроса 		= Запрос.ВыполнитьПакет();
	ВыборкаПоНоменклатуре 	= РезультатЗапроса[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ТаблицаТоварныхМест 	= РезультатЗапроса[2].Выгрузить();
		
	Пока ВыборкаПоНоменклатуре.Следующий() Цикл
		ТоварныеМестаПоНоменклатуре = ТаблицаТоварныхМест.Скопировать(Новый Структура("Номенклатура", ВыборкаПоНоменклатуре.Номенклатура));
		Если ТоварныеМестаПоНоменклатуре.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		ВыборкаПоХарактеристике = ВыборкаПоНоменклатуре.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);	
		Пока ВыборкаПоХарактеристике.Следующий() Цикл
			
			ПройтиРекурсивноПоПолямГруппировки(ВыборкаПоХарактеристике, ТоварныеМестаПоНоменклатуре, 1, МаксимальныйНомерПоля, ЕстьОшибки);
				
		КонецЦикла;
	КонецЦикла;
	
	Отказ = ?(ЕстьОшибки, Истина, Отказ);
				
КонецПроцедуры


Функция СуффиксВИмениПоляСтатусУказанияСерий(ИмяПоляСтатус) Экспорт
	
	Возврат 
		Прав(ИмяПоляСтатус, СтрДлина(ИмяПоляСтатус) - СтрНайти(ИмяПоляСтатус, "СтатусУказанияСерий") - 18);//СтрДлина("СтатусУказанияСерий") + 1 = 18 
	
КонецФункции

Функция СтатусыСерийСерияНеУказана() Экспорт
	
	// Порядок статусов следования используется в ПересчитатьСтатусУказанияСерийПриОбработке
	// и должен соотвествовать порядку в других фунциях СтатусыСерийСерия.
	Статусы = Новый Массив;
	Статусы.Добавить(1);
	Статусы.Добавить(3);
	Статусы.Добавить(5);
	Статусы.Добавить(7);
	Статусы.Добавить(9);
	Статусы.Добавить(13);
	Статусы.Добавить(17);
	
	Возврат Статусы;
	
КонецФункции

Функция СтатусыСерийСерияУказана() Экспорт
	
	// Порядок статусов следования используется в ПересчитатьСтатусУказанияСерийПриОбработке
	// и должен соотвествовать порядку в других фунциях СтатусыСерийСерия.
	Статусы = Новый Массив;
	Статусы.Добавить(2);
	Статусы.Добавить(4);
	Статусы.Добавить(6);
	Статусы.Добавить(8);
	Статусы.Добавить(10);
	Статусы.Добавить(14);
	Статусы.Добавить(18);
	
	Возврат Статусы;
	
КонецФункции

Функция СтатусыСерийСериюМожноУказать() Экспорт
	
	// Порядок статусов следования используется в ПересчитатьСтатусУказанияСерийПриОбработке
	// и должен соотвествовать порядку в других фунциях СтатусыСерийСерия.
	Статусы = Новый Массив;
	Статусы.Добавить(21);
	Статусы.Добавить(23);
	Статусы.Добавить(25);
	Статусы.Добавить(27);
	Статусы.Добавить(11);
	Статусы.Добавить(15);
	Статусы.Добавить(28);
	
	Возврат Статусы;
	
КонецФункции

// Возвращает параметры указания серий для товаров, указанных в документе.
//
// Параметры:
//  Объект			 - ДокументОбъект или ДанныеФормыСтруктура - документ, для которого нужно сформировать параметры проверки,
//  МенеджерОбъекта	 - ДокументМенеджер - менеджер документа, для которого нужно сформировать параметры проверки.
// 
// Возвращаемое значение:
//  Структура - параметры, уточняющие особенности указания серий в каждом документе, состав полей задается в функции НоменклатураКлиентСервер.ПараметрыУказанияСерий.
//
Функция ПараметрыУказанияСерий(Объект, МенеджерОбъекта) Экспорт
	
	ИменаРеквизитов = МенеджерОбъекта.ИменаРеквизитовДляЗаполненияПараметровУказанияСерий();
	ЗначенияРеквизитов = ЗначенияРеквизитовДляЗаполненияПараметровУказанияСерий(Объект, ИменаРеквизитов);
	Возврат МенеджерОбъекта.ПараметрыУказанияСерий(ЗначенияРеквизитов);
	
КонецФункции

Функция ЗначенияРеквизитовДляЗаполненияПараметровУказанияСерий(Объект, ИменаРеквизитов)
	
	Если Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(Объект)) Тогда
		Структура = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект, ИменаРеквизитов);
	Иначе
		Структура = Новый Структура(ИменаРеквизитов);
		ЗаполнитьЗначенияСвойств(Структура, Объект);
	КонецЕсли;
	Если Структура.Свойство("Дата") И НЕ ЗначениеЗаполнено(Структура.Дата) Тогда
		Структура.Дата = ТекущаяДатаСеанса();
	КонецЕсли;
	Если Структура.Свойство("ДатаОтгрузки") И НЕ ЗначениеЗаполнено(Структура.ДатаОтгрузки) Тогда
		Структура.ДатаОтгрузки = ТекущаяДатаСеанса();
	КонецЕсли;
	Возврат Структура;
	
КонецФункции

// Процедура проверяет дубли строк в табличной части
//
// Параметры:
//  Объект				 - ДокументОбъект	 - проверяемый ДокументОбъект
//  ИмяТЧ				 - Строка			 - имя проверяемой табличной части
//  КлючевыеРеквизитыТЧ	 - Массив, Строка	 - массив имен реквизитов, по которым определяется уникальность строки
//  Отказ				 - Булево			 - отказ продолжения операции.
//  ПредставлениеТЧ		 - Строка			 - если не указано, то представление будет получено из метаданных.
//  УказыватьНомераСтрок - Булево			 - определяет необходимость вывода номера строки в сообщении об ошибке.
//
Процедура ПроверитьНаличиеДублейСтрокТЧ(Объект, ИмяТЧ, КлючевыеРеквизитыТЧ, Отказ, ПредставлениеТЧ = "", УказыватьНомераСтрок = Истина) Экспорт
	
	Если ТипЗнч(КлючевыеРеквизитыТЧ) = Тип("Строка") Тогда
		КлючевыеРеквизиты = СтрРазделить(КлючевыеРеквизитыТЧ, ",");
	Иначе
		КлючевыеРеквизиты = КлючевыеРеквизитыТЧ;
	КонецЕсли;
	
	КлючДанных = КлючДанныхДляСообщенияПользователю(Объект);
	
	МетаданныеОбъекта = Объект.Метаданные();
	Если ПустаяСтрока(ПредставлениеТЧ) Тогда
		ПредставлениеТЧ   = МетаданныеОбъекта.ТабличныеЧасти[ИмяТЧ].Синоним;
	КонецЕсли;
	
	ТекстПоляВыборки = "";
	ТекстПоляСоединения = "";	
    ТекстПоляВыгрузки = "";
	ТекстДляСообщенияОДублях = "";
	
	Для Каждого СтрМас Из КлючевыеРеквизиты Цикл
		ТекстПоляВыборки = ТекстПоляВыборки + "
			|	ТаблицаПроверки." + СтрМас + ",";
		ТекстПоляСоединения = ТекстПоляСоединения + "
			|	И ТаблицаПроверки." + СтрМас + " = ДублирующиесяСтроки."+ СтрМас;
		ТекстПоляВыгрузки = ТекстПоляВыгрузки + СтрМас + ",";
		
		ПредставлениеРеквизита = МетаданныеОбъекта.ТабличныеЧасти[ИмяТЧ].Реквизиты[СтрМас].Синоним;
		
		ТекстДляСообщенияОДублях = ТекстДляСообщенияОДублях + """"  + ПредставлениеРеквизита  + """, "
	КонецЦикла;	
	
	ТекстДляСообщенияОДублях = Лев(ТекстДляСообщенияОДублях, СтрДлина(ТекстДляСообщенияОДублях) - 2);
	
	СтроковыеФункцииКлиентСервер.УдалитьПоследнийСимволВСтроке(ТекстПоляВыборки,1);
	СтроковыеФункцииКлиентСервер.УдалитьПоследнийСимволВСтроке(ТекстПоляВыгрузки,1);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ 
	|	ТаблицаПроверки.НомерСтроки, " +
		ТекстПоляВыборки + "
	|ПОМЕСТИТЬ ТаблицаПроверки
	|ИЗ
	|	&ТаблицаПроверки КАК ТаблицаПроверки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(ТаблицаПроверки.НомерСтроки) КАК НомерСтроки,
	|	СУММА(1) КАК КоличествоДублей,"+
		ТекстПоляВыборки + "
	|ПОМЕСТИТЬ ДублирующиесяСтроки
	|ИЗ
	|	ТаблицаПроверки КАК ТаблицаПроверки
	|
	|СГРУППИРОВАТЬ ПО " +
		ТекстПоляВыборки + "
	|
	|ИМЕЮЩИЕ
	|	СУММА(1) > 1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПроверки.НомерСтроки,
	|	ДублирующиесяСтроки.НомерСтроки КАК ПерваяСтрока,"+
		ТекстПоляВыборки + "
	|ИЗ
	|	ТаблицаПроверки КАК ТаблицаПроверки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДублирующиесяСтроки КАК ДублирующиесяСтроки
	|		ПО ТаблицаПроверки.НомерСтроки <> ДублирующиесяСтроки.НомерСтроки " +
	     		ТекстПоляСоединения;
	Запрос.УстановитьПараметр("ТаблицаПроверки",Объект[ИмяТЧ].Выгрузить(,"НомерСтроки," + ТекстПоляВыгрузки));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если УказыватьНомераСтрок Тогда
		Если КлючевыеРеквизиты.Количество() = 1 Тогда
			ШаблонСообщения = НСтр("ru = 'В строке %НомерСтроки% списка ""%ПредставлениеТЧ%"" по сравнению со строкой %ПерваяСтрока% повторяется значение ""%ПовторяемоеЗначение%"" в полях %НазванияПолей%.'");
		Иначе
			ШаблонСообщения = НСтр("ru = 'В строке %НомерСтроки% списка ""%ПредставлениеТЧ%"" по сравнению со строкой %ПерваяСтрока% повторяется сочетание значений ""%ПовторяемоеЗначение%"" в полях %НазванияПолей%.'");
		КонецЕсли;	
	Иначе
		Если КлючевыеРеквизиты.Количество() = 1 Тогда
			ШаблонСообщения = НСтр("ru = 'В списке ""%ПредставлениеТЧ%"" повторяется значение ""%ПовторяемоеЗначение%"" в поле %НазванияПолей%.'");
		Иначе
			ШаблонСообщения = НСтр("ru = 'В списке ""%ПредставлениеТЧ%"" повторяется сочетание значений ""%ПовторяемоеЗначение%"" в полях %НазванияПолей%.'");
		КонецЕсли;	
	КонецЕсли;
	Пока Выборка.Следующий() Цикл
		
		ТекстСообщения =  СтрЗаменить(ШаблонСообщения, "%ПредставлениеТЧ%", ПредставлениеТЧ);
		ТекстСообщения =  СтрЗаменить(ТекстСообщения, "%НомерСтроки%", Выборка.НомерСтроки);
		ТекстСообщения =  СтрЗаменить(ТекстСообщения, "%ПерваяСтрока%", Выборка.ПерваяСтрока);
		ТекстСообщения =  СтрЗаменить(ТекстСообщения, "%НазванияПолей%", ТекстДляСообщенияОДублях);
		
		ПовторяемоеЗначение = "";
		
		Для Каждого СтрМас Из КлючевыеРеквизиты Цикл
			ПредставлениеЗначения = СокрЛП(Строка(Выборка[СтрМас]));
			Если ЗначениеЗаполнено(ПредставлениеЗначения) Тогда
				ПовторяемоеЗначение = ПовторяемоеЗначение + Выборка[СтрМас] + "/";
			КонецЕсли;
		КонецЦикла;
		
		ПовторяемоеЗначение = Лев(ПовторяемоеЗначение, СтрДлина(ПовторяемоеЗначение) - 1);
		
		ТекстСообщения =  СтрЗаменить(ТекстСообщения, "%ПовторяемоеЗначение%", ПовторяемоеЗначение);
		
		Если УказыватьНомераСтрок Тогда
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТЧ, Выборка.НомерСтроки, "НомерСтроки");
		Иначе
			Поле = ИмяТЧ;
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,КлючДанных,Поле,"Объект",Отказ);
		
	КонецЦикла;
КонецПроцедуры

// Процедура проверяет правильность указания количества для серий товаров,
// которые идентифицируют экземпляр товара по уникальному номеру и указываются в основной ТЧ документа (Товары).
// Если для такой серии указано количество не равное 1, то выдается ошибка.
//
// Параметры:
//	ДокументОбъект - ДокументОбъект - документ, в котором нужно проверить указание серий;
//	ПараметрыУказанияСерий - Структура - параметры указания серий, возвращаемые соотвествующей процедурой модуля менеджера документа;
//	Отказ - Булево, Истина- признак ошибки проверки;
//	ВыдаватьСообщения - Булево, Истина - признак того, что нужно выдавать сообщения об ошибках проверки.
//
Процедура ПроверитьКоличествоПоСериям(ДокументОбъект, ПараметрыУказанияСерий, Отказ, ВыдаватьСообщения = Истина) Экспорт
	
	Возврат;
	
КонецПроцедуры

Процедура ПройтиРекурсивноПоПолямГруппировки(Выборка, ТоварныеМестаПоНоменклатуре, НомерТекущегоПоля, МаксимальныйНомерПоля, ЕстьОшибки)
	
	Если НомерТекущегоПоля > МаксимальныйНомерПоля Тогда
		ПродолжитьОбходПоСериям(Выборка, ТоварныеМестаПоНоменклатуре, ЕстьОшибки);
	Иначе
		ВыборкаСледующегоУровня = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);			
		Пока ВыборкаСледующегоУровня.Следующий() Цикл
			ПройтиРекурсивноПоПолямГруппировки(ВыборкаСледующегоУровня, ТоварныеМестаПоНоменклатуре, НомерТекущегоПоля + 1, МаксимальныйНомерПоля, ЕстьОшибки); 
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПродолжитьОбходПоСериям(Выборка, ТоварныеМестаПоНоменклатуре, ЕстьОшибки)
	
	ЕстьПолеНазначение = ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Выборка, "Назначение");
	
	ВыборкаПоСерии = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоСерии.Следующий() Цикл 
		Выборка = ВыборкаПоСерии.Выбрать();
		
		КоличествоЦелыхНаборов = 999999999;
		МаксимальноеКоличествоНаборов = 0;
		
		Если Выборка.Количество() <> ТоварныеМестаПоНоменклатуре.Количество() Тогда
			КоличествоЦелыхНаборов = 0;
		КонецЕсли;
		
		КолонкаКоличествоВДокументе = ТоварныеМестаПоНоменклатуре.Колонки.Найти("КоличествоВДокументе");
		
		Если КолонкаКоличествоВДокументе = Неопределено Тогда
			ТоварныеМестаПоНоменклатуре.Колонки.Добавить("КоличествоВДокументе", Новый ОписаниеТипов("Число"));
		Иначе
			ТоварныеМестаПоНоменклатуре.ЗаполнитьЗначения(0, "КоличествоВДокументе");
		КонецЕсли;
		
		Пока Выборка.Следующий() Цикл
			
			НайденныеСтроки = ТоварныеМестаПоНоменклатуре.НайтиСтроки(Новый Структура("Упаковка", Выборка.Упаковка));
			Если НайденныеСтроки.Количество() > 0 Тогда 
				СтрокаТоварноеМесто = НайденныеСтроки[0];
			Иначе 
				Продолжить;
			КонецЕсли;
			
			КоличествоТоварныхМест = СтрокаТоварноеМесто.КоличествоТоварныхМест;
			КоличествоЦелыхНаборов = Мин(КоличествоЦелыхНаборов, Цел(Выборка.КоличествоУпаковок / КоличествоТоварныхМест));
			МаксимальноеКоличествоНаборовТекущее = ОкруглитьВверх(Выборка.КоличествоУпаковок / КоличествоТоварныхМест);
			МаксимальноеКоличествоНаборов = Макс(МаксимальноеКоличествоНаборов, МаксимальноеКоличествоНаборовТекущее);
			
			СтрокаТоварноеМесто.КоличествоВДокументе = Выборка.КоличествоУпаковок;

		КонецЦикла;
		
		ОписанияНедостач = Новый Массив;
		ОписанияИзлишков = Новый Массив;
		
		Для Каждого ТоварноеМестоСтрока Из ТоварныеМестаПоНоменклатуре Цикл
			КоличествоИзлишек = ТоварноеМестоСтрока.КоличествоВДокументе - КоличествоЦелыхНаборов * ТоварноеМестоСтрока.КоличествоТоварныхМест;
			КоличествоНедостача = МаксимальноеКоличествоНаборов * ТоварноеМестоСтрока.КоличествоТоварныхМест - ТоварноеМестоСтрока.КоличествоВДокументе;
			Если КоличествоИзлишек > 0 Тогда
				ОписанияИзлишков.Добавить(Строка(КоличествоИзлишек) + Символы.НПП + ТоварноеМестоСтрока.Упаковка);					
			КонецЕсли;
			Если КоличествоНедостача > 0 Тогда
				ОписанияНедостач.Добавить(Строка(КоличествоНедостача) + Символы.НПП + ТоварноеМестоСтрока.Упаковка);
			КонецЕсли;
		КонецЦикла;
		
		Если ОписанияИзлишков.Количество() <> 0 Или ОписанияНедостач.Количество() <> 0 Тогда
			ЕстьОшибки = Истина;
			СообщениеПользователю = НСтр("ru = 'Из следущих товарных мест нельзя собрать целое количество %ЕдИзм% товара ""%Товар%"": %ОписаниеИзлишков%. Необходимо или удалить эти товарные места, или дополнить товарными местами: %ОписаниеНедостач%.'");
			ОписаниеИзлишков = СтрСоединить(ОписанияИзлишков, ", ");
			ОписаниеНедостач = СтрСоединить(ОписанияНедостач, ", ");
			СообщениеПользователю = СтрЗаменить(СообщениеПользователю, "%ОписаниеИзлишков%", 	ОписаниеИзлишков);
			СообщениеПользователю = СтрЗаменить(СообщениеПользователю, "%ОписаниеНедостач%", 	ОписаниеНедостач);
			СообщениеПользователю = СтрЗаменить(СообщениеПользователю, "%ЕдИзм%", 				ТоварныеМестаПоНоменклатуре[0].ЕдиницаИзмерения);
			Назначение = ?(ЕстьПолеНазначение, ВыборкаПоСерии.Назначение, "");
			ПредставлениеТовара =  "" + ВыборкаПоСерии.НоменклатураПредставление + " " + ВыборкаПоСерии.ХарактеристикаПредставление 
								+ " " + ВыборкаПоСерии.СерияПредставление + " " + Назначение;
			СообщениеПользователю = СтрЗаменить(СообщениеПользователю, "%Товар%", ПредставлениеТовара);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеПользователю);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ОкруглитьВверх(Число)
	
	Если Цел(Число) <> Число Тогда
		Результат = Цел(Число) + 1;
	Иначе
		Результат = Число;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ЕГАИСПередЗаписьюДокументаИБПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	// Вставить содержимое обработчика.
КонецПроцедуры

Процедура ЕГАИСПриКопированииДокументаИБПриКопировании(Источник, ОбъектКопирования) Экспорт
	// Вставить содержимое обработчика.
КонецПроцедуры

Процедура УстановитьСвойстваЭлементовЕГАИСнаФормеДокумента(Форма) Экспорт
	// Вставить содержимое обработчика.
КонецПроцедуры

Процедура ПриОткрытииФормыДокумента(Форма, Объект) Экспорт
	// Вставить содержимое обработчика.
КонецПроцедуры

Функция ЭтоРозничныйВозвратАлкоголя(ЭтотОбъект)
	
	// Для ВозвратаТоваровОтПокупателя должен возвращать "Истина"
	// для всех остальных должна возвращать "Ложь"
	Возврат  
		  ТипЗнч(ЭтотОбъект) = Тип("ДокументОбъект.ВозвратТоваровОтПокупателя");
		
КонецФункции

Функция ОпределитьСостояниеПеремещения(ЭтотОбъект, ДокЕГАИС = Неопределено) Экспорт
	// Если в ДокЕГАИС передано любое значение отличное от Неопределено,
	// то в него нужно вернуть ссылку на документ егаис из перемещения,
	// которая соответствует текущему состоянию
	Если ЗначениеЗаполнено(ЭтотОбъект.ТТНВходящая) Тогда
		Если Не ЗначениеЗаполнено(ЭтотОбъект.ТТНИсходящая) Тогда
			Результат = "Входящий";
			ИмяРеквизита = "ТТНВходящая";
		Иначе
			СтатусОбработки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭтотОбъект.ТТНИсходящая, "СтатусОбработки");
			ЗавершающиеСтатусы = ЗавершающиеСтатусы(ЭтотОбъект.ТТНИсходящая);
			Если ЗавершающиеСтатусы.Найти(СтатусОбработки) <> Неопределено Тогда
				Результат = "Исходящий";
				ИмяРеквизита = "ТТНИсходящая";
			Иначе
				Результат = "Входящий";
				ИмяРеквизита = "ТТНВходящая";
			КонецЕсли;
		КонецЕсли;
	Иначе
		Результат = "Исходящий";
		ИмяРеквизита = "ТТНИсходящая";
	КонецЕсли;
	Если ДокЕГАИС <> Неопределено Тогда
		ДокЕГАИС = ЭтотОбъект[ИмяРеквизита];
	КонецЕсли;
	Возврат Результат;
КонецФункции

Функция ЗавершающиеСтатусы(ДокументЕГАИС)
	
	ТипДокументаЕГАИС = ТипЗнч(ДокументЕГАИС);
	МассивСтатусов = Новый Массив;
	
	Если ТипДокументаЕГАИС = Тип("ДокументСсылка.ТТНИсходящаяЕГАИС") Тогда
		Возврат Документы.ТТНИсходящаяЕГАИС.КонечныеСтатусы();
	ИначеЕсли ТипДокументаЕГАИС = Тип("ДокументСсылка.ТТНВходящаяЕГАИС") Тогда
		Возврат Документы.ТТНВходящаяЕГАИС.КонечныеСтатусы();
	ИначеЕсли ТипДокументаЕГАИС = Тип("ДокументСсылка.АктПостановкиНаБалансЕГАИС") Тогда
		Возврат Документы.АктПостановкиНаБалансЕГАИС.КонечныеСтатусы();
	ИначеЕсли ТипДокументаЕГАИС = Тип("ДокументСсылка.АктСписанияЕГАИС") Тогда
		Возврат Документы.АктСписанияЕГАИС.КонечныеСтатусы();
	КонецЕсли;
	
	Возврат МассивСтатусов;
	
КонецФункции

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Обработки заполнения
//

// Вызывается при вводе акта постановки на баланс на основании, при выполнении метода Заполнить или при интерактивном вводе нового.
//
Процедура ОбработкаЗаполненияАктаПостановкиНаБалансЕГАИС(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	ИнтеграцияЕГАИСУТ.ОбработкаЗаполненияАктаПостановкиНаБалансЕГАИС(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	
КонецПроцедуры

// Вызывается при вводе акта списания на основании, при выполнении метода Заполнить или при интерактивном вводе нового.
//
Процедура ОбработкаЗаполненияАктаСписанияЕГАИС(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	ИнтеграцияЕГАИСУТ.ОбработкаЗаполненияАктаСписанияЕГАИС(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	
КонецПроцедуры

// Вызывается при вводе исходящей ТТН на основании, при выполнении метода Заполнить или при интерактивном вводе нового.
//
Процедура ОбработкаЗаполненияТТНИсходящейЕГАИС(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	ИнтеграцияЕГАИСУТ.ОбработкаЗаполненияТТНИсходящейЕГАИС(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	
КонецПроцедуры

// Вызывается при вводе чека на основании, при выполнении метода Заполнить или при интерактивном вводе нового.
//
Процедура ОбработкаЗаполненияЧекаЕГАИС(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	ИнтеграцияЕГАИСУТ.ОбработкаЗаполненияЧекаЕГАИС(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	
КонецПроцедуры

// Вызывается при вводе возвратного чека на основании, при выполнении метода Заполнить или при интерактивном вводе нового.
//
Процедура ОбработкаЗаполненияЧекаЕГАИСВозврат(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	ИнтеграцияЕГАИСУТ.ОбработкаЗаполненияЧекаЕГАИСВозврат(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	
КонецПроцедуры

// Вызывается при вводе возврата из регистра №2 на основании, при выполнении метода Заполнить или при интерактивном вводе нового.
//
Процедура ОбработкаЗаполненияВозвратаИзРегистра2ЕГАИС(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	ИнтеграцияЕГАИСУТ.ОбработкаЗаполненияВозвратаИзРегистра2ЕГАИС(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	
КонецПроцедуры

// Вызывается при вводе передачи в регистр №2 на основании, при выполнении метода Заполнить или при интерактивном вводе нового.
//
Процедура ОбработкаЗаполненияПередачиВРегистр2ЕГАИС(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	ИнтеграцияЕГАИСУТ.ОбработкаЗаполненияПередачиВРегистр2ЕГАИС(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура ОбработатьОповещения(ЭтаФорма, ЭтотОбъект, ИмяСобытия, Параметр, Источник) Экспорт
	
КонецПроцедуры

Процедура ТоварыПередНачаломДобавления(Элемент, Отказ, Копирование, ЭтаФорма, ЭтотОбъект) Экспорт
	
КонецПроцедуры

Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, ЭтаФорма, ЭтотОбъект) Экспорт
	
КонецПроцедуры

Процедура ПроверитьНеобходимостьВводаАкцизнойМарки(СтрокаТабличнойЧасти, ЭтаФорма, ЭтотОбъект) Экспорт
	
	ОбработкаТабличнойЧастиСерверЕГАИСУТ.ПроверитьНеобходимостьВводаАкцизнойМарки(СтрокаТабличнойЧасти, ЭтаФорма, ЭтотОбъект);
	
КонецПроцедуры

Процедура ТоварыПередНачаломИзменения(Элемент, Отказ, ЭтаФорма, ЭтотОбъект) Экспорт
	
КонецПроцедуры

Процедура ТоварыПередУдалением(Элемент, Отказ, ЭтаФорма, ЭтотОбъект) Экспорт
	
КонецПроцедуры

