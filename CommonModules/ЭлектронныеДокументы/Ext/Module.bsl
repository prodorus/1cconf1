////////////////////////////////////////////////////////////////////////////////
// ЭлектронныеДокументы: механизм обмена электронными документами.
//
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Формирует фамилию и инициалы по переданной строке.
//
// Параметры
//  ПолноеНаименование - строка с наименованием.
//
// Возвращаемое значение:
//  Строка - фамилия и инициалы одной строкой.
//  В параметрах Фамилия, Имя и Отчество записываются вычисленные части.
//
// Пример:
//  Результат = ФамилияИнициалыФизЛица("Иванов Иван Иванович"); Результат = "Иванов И. И."
//
Функция ФамилияИнициалыФизЛица(ПолноеНаименование, Фамилия = " ", Имя = " ", Отчество = " ") Экспорт
	
	ЭлектронныеДокументыПереопределяемый.РазобратьНаименованиеФизЛица(ПолноеНаименование, Фамилия, Имя, Отчество);
	Если НЕ ЗначениеЗаполнено(Фамилия) И НЕ ЗначениеЗаполнено(Имя) И НЕ ЗначениеЗаполнено(Отчество) Тогда
		
		ФИО = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СокрЛП(ПолноеНаименование), " ");
		
		КоличествоПодстрок = ФИО.Количество();
		Фамилия            = ?(КоличествоПодстрок > 0, ФИО[0], "");
		Имя                = ?(КоличествоПодстрок > 1, ФИО[1], "");
		Отчество           = ?(КоличествоПодстрок > 2, ФИО[2], "");
	КонецЕсли;
	
	Возврат ?(НЕ ПустаяСтрока(Фамилия), Фамилия + ?(НЕ ПустаяСтрока(Имя), " " + Лев(Имя, 1) + "."
		+ ?(НЕ ПустаяСтрока(Отчество), Лев(Отчество, 1) + ".", ""), ""), "");
	
КонецФункции

// Определяет, существует ли актуальный электронный документ Счет-фактура для переданного владельца
//
// Параметры
//  СсылкаНаВладельца - ДокументСсылка,- владелец электронного документа
//
// Возвращаемое значение:
//  Булево - Истина - существует актуальный электронный документ, в противном случае Ложь.
//
Функция ЕстьРабочийЭСФ(СсылкаНаВладельца) Экспорт
	
	Возврат ЭлектронныеДокументыСлужебныйВызовСервера.ЕстьРабочийЭСФ(СсылкаНаВладельца);
	
КонецФункции

// Получает значение функциональной опции.
//
// Параметры:
//  НаименованиеФО - Строка, имя функциональной опции
//
// Возвращаемое значение:
//  ЗначениеВозврата - булево, результат включенности ФО.
//
Функция ПолучитьЗначениеФункциональнойОпции(НаименованиеФО) Экспорт
	
	ЗначениеВозврата = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьЗначениеФункциональнойОпции(НаименованиеФО);
	Возврат ЗначениеВозврата;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Работа с версиями электронных документов

// Получает представление (текст либо структура) состояний электронных документов по владельцам.
//
// Параметры:
// МассивСсылокНаВладельцев - массив ссылок на владельцев электронных документов, данные которых необходимо получить.
// ПомещатьВСтруктуру - булево, если истина, то представления состояний электронных документов
//                      (СостояниеВерсииЭД, ДействияСНашейСтороны, ДействияСоСтороныДругогоУчастника),
//                      будут помещены в структуру, для возможности последующего разбора на клиенте.
//
// Возвращаемое значение:
// Соответствие - соответствие ссылок на документы ИБ состояниям ЭД. Ключ - ссылка на документ ИБ,
//                Значение - текст (состояние ЭД), либо структура - в зависимости от параметра ПомещатьВСтруктуру.
//
Функция ПолучитьТекстСостоянияЭДПоВладельцам(МассивСсылокНаВладельцев, ПомещатьВСтруктуру = Ложь) Экспорт
		
	ТаблицаДанных = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьДанныеЭДПоВладельцам(МассивСсылокНаВладельцев);
	Соответствие = Новый Соответствие;
	Для Каждого ТекСтрока Из ТаблицаДанных Цикл
		
		Если ПомещатьВСтруктуру Тогда
			СостояниеВерсииЭД = Новый Структура("СостояниеВерсииЭД, ДействияСНашейСтороны, ДействияСоСтороныДругогоУчастника");
			ЗаполнитьЗначенияСвойств(СостояниеВерсииЭД, ТекСтрока);
		Иначе
			СостояниеВерсииЭД = Строка(ТекСтрока.СостояниеВерсииЭД);
		КонецЕсли;
		Соответствие.Вставить(ТекСтрока.ВладелецЭД, СостояниеВерсииЭД);
	КонецЦикла;
	
	Возврат Соответствие;
	
КонецФункции

// Получает дату выставления счет-фактуры в электронном виде.
//
// Параметры:
// СчетФактура - СсылкаНаДокумент - ссылка на счет-фактуру исходящую в прикладном решении.
//
// Возвращаемое значение:
//  ДатаВыставления - дата - дата выставления электронной счет-фактуры.
//
Функция ДатаВыставленияСчетФактуры(СчетФактура) Экспорт
	
	ДатаВыставления = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СостоянияЭД.ЭлектронныйДокумент
	|ИЗ
	|	РегистрСведений.СостоянияЭД КАК СостоянияЭД
	|ГДЕ
	|	СостоянияЭД.СсылкаНаОбъект = &СсылкаНаОбъект";
	Запрос.УстановитьПараметр("СсылкаНаОбъект", СчетФактура);
	
	Результат = Запрос.Выполнить().Выбрать();
	Результат.Следующий();
	
	Если ЗначениеЗаполнено(Результат.ЭлектронныйДокумент) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ЭДПрисоединенныеФайлы.ДатаДокументаОтправителя
		|ИЗ
		|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
		|ГДЕ
		|	ЭДПрисоединенныеФайлы.ЭлектронныйДокументВладелец = &ЭлектронныйДокументВладелец
		|	И ЭДПрисоединенныеФайлы.ТипЭлементаВерсииЭД = ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ПДПЭСФ)";
		Запрос.УстановитьПараметр("ЭлектронныйДокументВладелец", Результат.ЭлектронныйДокумент);
		
		Результат = Запрос.Выполнить().Выбрать();
		Результат.Следующий();
		ДатаВыставления = Результат.ДатаДокументаОтправителя;
	КонецЕсли;
	
	Возврат ДатаВыставления
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обработка электронных документов

// Возвращает текст запроса для электронных документов на подписи.
// Варианты - для рабочего места документов на подпись,
// или для показателя на рабочем столе (УТ 11)
//
// Параметры:
//  ДляРабочегоСтола - Булево, признак того, что текст запроса формируется для показателя на рабочем столе (УТ 11)
//
Функция ПолучитьТекстЗапросаЭлектронныхДокументовНаПодписи(ДляРабочегоСтола = Истина, СтруктураДопОтборов = Неопределено) Экспорт

	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ЭД.Ссылка КАК ЭД,
	|	ЭД.СуммаДокумента,
	|	ЭД.ДатаДокументаОтправителя,
	|	ВЫБОР
	|		КОГДА ЭД.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.ПроизвольныйЭД)
	|				ИЛИ ЭД.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.КаталогТоваров)
	|				ИЛИ ЭД.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.СчетФактура)
	|				ИЛИ ЭД.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.КорректировочныйСчетФактура)
	|				ИЛИ ЭД.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.ИзвещениеОПолучении)
	|				ИЛИ ЭД.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.Подтверждение)
	|				ИЛИ ЭД.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.УведомлениеОбУточнении)
	|				ИЛИ ЭД.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.Ошибка)
	|			ТОГДА 1
	|		КОГДА ЭД.ДатаФормированияЭДОтправителем = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ЭД.НомерВерсииЭД
	|		ИНАЧЕ ЭД.ДатаФормированияЭДОтправителем
	|	КОНЕЦ КАК Версия,
	|	ЭД.ВидЭД,
	|	ЭД.НаправлениеЭД,
	|	ЭД.Организация,
	|	ЭД.Контрагент,
	|	ЭД.ПрофильНастроекЭДО,
	|	ЭД.СоглашениеЭД,
	|	ЭД.СтатусЭД,
	|	ЭД.Изменил
	|ПОМЕСТИТЬ ЭДНаПодпись
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПрисоединенныеФайлы.Ссылка КАК Ссылка,
	|		ЭлектронныйДокумент.СуммаДокумента КАК СуммаДокумента,
	|		ЭлектронныйДокумент.ДатаДокументаОтправителя КАК ДатаДокументаОтправителя,
	|		ЭлектронныйДокумент.ВидЭД КАК ВидЭД,
	|		ПрисоединенныеФайлы.ДатаФормированияЭДОтправителем КАК ДатаФормированияЭДОтправителем,
	|		ЭлектронныйДокумент.НомерВерсииЭД КАК НомерВерсииЭД,
	|		ПрисоединенныеФайлы.НаправлениеЭД КАК НаправлениеЭД,
	|		ЭлектронныйДокумент.Организация КАК Организация,
	|		ЭлектронныйДокумент.Контрагент КАК Контрагент,
	|		ЭлектронныйДокумент.ПрофильНастроекЭДО КАК ПрофильНастроекЭДО,
	|		ПрисоединенныеФайлы.СоглашениеЭД КАК СоглашениеЭД,
	|		ПрисоединенныеФайлы.СтатусЭД КАК СтатусЭД,
	|		ПрисоединенныеФайлы.Изменил КАК Изменил
	|	ИЗ
	|		Справочник.ЭДПрисоединенныеФайлы КАК ПрисоединенныеФайлы
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронныйДокументВходящий КАК ЭлектронныйДокумент
	|			ПО ПрисоединенныеФайлы.ВладелецФайла = ЭлектронныйДокумент.Ссылка
	|				И (ПрисоединенныеФайлы.НаПодпись)
	|				И (НЕ ЭлектронныйДокумент.ПометкаУдаления)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ПрисоединенныеФайлы.Ссылка,
	|		ЭлектронныйДокумент.СуммаДокумента,
	|		ЭлектронныйДокумент.ДатаДокументаОтправителя,
	|		ЭлектронныйДокумент.ВидЭД,
	|		ПрисоединенныеФайлы.ДатаФормированияЭДОтправителем,
	|		ЭлектронныйДокумент.НомерВерсииЭД,
	|		ПрисоединенныеФайлы.НаправлениеЭД,
	|		ЭлектронныйДокумент.Организация,
	|		ЭлектронныйДокумент.Контрагент,
	|		ЭлектронныйДокумент.ПрофильНастроекЭДО,
	|		ПрисоединенныеФайлы.СоглашениеЭД,
	|		ПрисоединенныеФайлы.СтатусЭД,
	|		ПрисоединенныеФайлы.Изменил
	|	ИЗ
	|		Справочник.ЭДПрисоединенныеФайлы КАК ПрисоединенныеФайлы
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронныйДокументИсходящий КАК ЭлектронныйДокумент
	|			ПО ПрисоединенныеФайлы.ВладелецФайла = ЭлектронныйДокумент.Ссылка
	|				И (ПрисоединенныеФайлы.НаПодпись)
	|				И (НЕ ЭлектронныйДокумент.ПометкаУдаления)) КАК ЭД
	|ГДЕ
	|	ЭД.СоглашениеЭД.СтатусПодключения = ЗНАЧЕНИЕ(Перечисление.СтатусыУчастниковОбменаЭД.Присоединен)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ЭД.СоглашениеЭД,
	|	ЭД.Организация,
	|	ЭД.ВидЭД
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	*
	|ИЗ
	|	ЭДНаПодпись КАК ЭДНаПодпись
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СертификатыЭЦП.ВидыДокументов КАК СертификатыЭЦПВидыДокументов
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СертификатыЭЦП КАК СертификатыЭЦП
	|			ПО СертификатыЭЦПВидыДокументов.Ссылка = СертификатыЭЦП.Ссылка
	|		ПО ЭДНаПодпись.ВидЭД = СертификатыЭЦПВидыДокументов.ВидДокумента
	|			И ЭДНаПодпись.Организация = СертификатыЭЦПВидыДокументов.Ссылка.Организация
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СоглашенияОбИспользованииЭД КАК СоглашенияОбИспользованииЭД
	|		ПО ЭДНаПодпись.СоглашениеЭД = СоглашенияОбИспользованииЭД.Ссылка
	|			И (СоглашенияОбИспользованииЭД.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезВебРесурсБанка)
	|					И СоглашенияОбИспользованииЭД.СтатусСоглашения = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийЭД.Действует)
	|				ИЛИ СоглашенияОбИспользованииЭД.СпособОбменаЭД <> ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезВебРесурсБанка)
	|					И СоглашенияОбИспользованииЭД.СтатусПодключения = ЗНАЧЕНИЕ(Перечисление.СтатусыУчастниковОбменаЭД.Присоединен))
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПрофилиНастроекЭДО.СертификатыПодписейОрганизации КАК ПрофилиНастроекЭДОСертификаты
	|		ПО ЭДНаПодпись.ПрофильНастроекЭДО = ПрофилиНастроекЭДОСертификаты.Ссылка
	|			И (ЭДНаПодпись.СоглашениеЭД.СтатусПодключения = ЗНАЧЕНИЕ(Перечисление.СтатусыУчастниковОбменаЭД.Присоединен))
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияОбИспользованииЭД.СертификатыПодписейОрганизации КАК СоглашенияОбИспользованииЭДСертификатыПодписейОрганизации
	|		ПО ЭДНаПодпись.СоглашениеЭД = СоглашенияОбИспользованииЭДСертификатыПодписейОрганизации.Ссылка
	|ГДЕ
	|	НЕ СертификатыЭЦПВидыДокументов.Ссылка.Отозван
	|	И (СертификатыЭЦПВидыДокументов.Ссылка.СписокПользователей.Пользователь = &ТекущийПользователь
	|			ИЛИ НЕ СертификатыЭЦПВидыДокументов.Ссылка.ОграничитьДоступКСертификату)
	|	И НЕ СертификатыЭЦПВидыДокументов.Ссылка.ПометкаУдаления
	|	И ВЫБОР
	|			КОГДА СоглашенияОбИспользованииЭД.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезВебРесурсБанка)
	|				ТОГДА СертификатыЭЦПВидыДокументов.Ссылка = СоглашенияОбИспользованииЭДСертификатыПодписейОрганизации.Сертификат
	|			КОГДА СоглашенияОбИспользованииЭД.СпособОбменаЭД <> ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезВебРесурсБанка)
	|				ТОГДА СертификатыЭЦПВидыДокументов.Ссылка = ПрофилиНастроекЭДОСертификаты.Сертификат
	|		КОНЕЦ
	|	И НЕ СоглашенияОбИспользованииЭД.ПометкаУдаления
	|	И НЕ СертификатыЭЦПВидыДокументов.Ссылка.Отпечаток В
	|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					ЭД_ЭП.Отпечаток
	|				ИЗ
	|					Справочник.ЭДПрисоединенныеФайлы.ЭлектронныеЦифровыеПодписи КАК ЭД_ЭП
	|				ГДЕ
	|					ЭД_ЭП.Ссылка = ЭДНаПодпись.ЭД)";
	
	Если ДляРабочегоСтола Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "*", "
			|	СертификатыЭЦП.Отпечаток КАК Отпечаток,
			|	СертификатыЭЦП.Представление КАК Сертификат,
			|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СертификатыЭЦП.Ссылка) КАК ЗначениеПоказателя
			|");
		
		Если СтруктураДопОтборов <> Неопределено И ТипЗнч(СтруктураДопОтборов) = Тип("Структура")
			И СтруктураДопОтборов.Количество() > 0 И СтруктураДопОтборов.Свойство("ОтборПоИсполнителям") Тогда
			ТекстЗапроса = ТекстЗапроса + " И ЭДНаПодпись.Изменил В (&СоставИсполнителей)";
		КонецЕсли;
		ТекстЗапроса = ТекстЗапроса + "
			|СГРУППИРОВАТЬ ПО
			|	СертификатыЭЦП.Отпечаток,
			|	СертификатыЭЦП.Представление";
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "*", "
			|	ЭДНаПодпись.ЭД КАК ЭлектронныйДокумент,
			|	ЭДНаПодпись.СуммаДокумента,
			|	ЭДНаПодпись.Версия,
			|	ЭДНаПодпись.ДатаДокументаОтправителя КАК ДатаДокумента,
			|	ЭДНаПодпись.ВидЭД КАК ВидЭД,
			|	СертификатыЭЦПВидыДокументов.Ссылка КАК Сертификат
			|");
		
		Если СтруктураДопОтборов <> Неопределено И ТипЗнч(СтруктураДопОтборов) = Тип("Структура")
			И СтруктураДопОтборов.Количество() > 0 Тогда
			
			Если СтруктураДопОтборов.Свойство("Контрагент") Тогда
				ТекстЗапроса = ТекстЗапроса + " И ЭДНаПодпись.Контрагент = &Контрагент";
			КонецЕсли;
			Если СтруктураДопОтборов.Свойство("ВидЭД") Тогда
				ТекстЗапроса = ТекстЗапроса + " И ЭДНаПодпись.ВидЭД = &ВидЭД";
			КонецЕсли;
			Если СтруктураДопОтборов.Свойство("НаправлениеЭД") Тогда
				ТекстЗапроса = ТекстЗапроса + " И ЭДНаПодпись.НаправлениеЭД = &НаправлениеЭД";
			КонецЕсли;
		КонецЕсли;
		ТекстЗапроса = ТекстЗапроса + " УПОРЯДОЧИТЬ ПО ДатаДокумента";
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Передача электронных документов в ФНС

// Получает соответствие документам информационной базы и актуальных электронных документов.
// Функция предназначена для использования совместно с библиотекой "Регламентированная отчетность".
//
// Параметры:
//   ДокументыИБ - массив(ссылка), массив ссылок на документы информационной базы;
//   УникальныйИдентификатор - уникальныйИдентификатор, признак уникальности для формы выбора документов
//
// Возвращаемое значение:
//   Соответствие:
//     Ключ     - ДокументСсылка - ссылка на документ-Вдалелец ЭД.
//     Значение - Массив         - массив структур параметров ЭД, с ключами:
//                ТипФайла - Строка - возможные значения: ФайлВыгрузки, ЭЦП, ФайлПодтверждения, ЭЦППодтверждения.
//                КНД      - Строка - КНД выгружаемого ЭД, заполняется только для файла выгрузки и файла подтверждения.
//                ИмяФайла - Строка - Имя выгружаемого файла.
//                АдресВременногоХранилища - Строка.
//
Функция ПолучитьСоответствиеДокументамИБКомплектыЭлектронныхДокументов(ДокументыИБ, УникальныйИдентификатор) Экспорт
	
	Соответствие = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЭДПрисоединенныеФайлы.Ссылка КАК ПрисоединенныйФайл,
		|	СостоянияЭД.СсылкаНаОбъект КАК ДокументИБ,
		|	ЭДПрисоединенныеФайлы.ВидЭД,
		|	ЭДПрисоединенныеФайлы.ТипЭлементаВерсииЭД,
		|	ЭДПрисоединенныеФайлы.УникальныйИД,
		|	ПодтвержденияЭД.Ссылка КАК ПодтверждениеСсылка,
		|	ПодтвержденияЭД.ВидЭД КАК ВидЭДПодтверждения,
		|	ПодтвержденияЭД.УникальныйИД КАК УникальныйИДПодтверждения
		|ИЗ
		|	РегистрСведений.СостоянияЭД КАК СостоянияЭД
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЭДПрисоединенныеФайлы КАК ПодтвержденияЭД
		|			ПО ЭДПрисоединенныеФайлы.Ссылка = ПодтвержденияЭД.ЭлектронныйДокументВладелец
		|				И (ПодтвержденияЭД.ВидЭД В (&ВидыОтветныхТитулов))
		|		ПО СостоянияЭД.СсылкаНаОбъект = ЭДПрисоединенныеФайлы.ВладелецФайла
		|			И (ЭДПрисоединенныеФайлы.ВидЭД В (&ВидыПервичныхТитулов))
		|ГДЕ
		|	ЭДПрисоединенныеФайлы.ВладелецФайла В(&ВладелецФайла)
		|	И СостоянияЭД.СостояниеВерсииЭД В(&ОбменЗавершен)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДокументИБ,
		|	ПрисоединенныйФайл";
	Запрос.УстановитьПараметр("ВладелецФайла", ДокументыИБ);
	ОбменЗавершен = Новый Массив;
	ОбменЗавершен.Добавить(Перечисления.СостоянияВерсийЭД.ОбменЗавершен);
	ОбменЗавершен.Добавить(Перечисления.СостоянияВерсийЭД.ОбменЗавершенСИсправлением);
	Запрос.УстановитьПараметр("ОбменЗавершен", ОбменЗавершен);
	ВидыПервичныхТитулов = Новый Массив;
	ВидыПервичныхТитулов.Добавить(Перечисления.ВидыЭД.ТОРГ12Продавец);
	ВидыПервичныхТитулов.Добавить(Перечисления.ВидыЭД.АктИсполнитель);
	ВидыПервичныхТитулов.Добавить(Перечисления.ВидыЭД.СчетФактура);
	ВидыПервичныхТитулов.Добавить(Перечисления.ВидыЭД.КорректировочныйСчетФактура);
	Запрос.УстановитьПараметр("ВидыПервичныхТитулов", ВидыПервичныхТитулов);
	ВидыОтветныхТитулов = Новый Массив;
	ВидыОтветныхТитулов.Добавить(Перечисления.ВидыЭД.ТОРГ12Покупатель);
	ВидыОтветныхТитулов.Добавить(Перечисления.ВидыЭД.АктЗаказчик);
	Запрос.УстановитьПараметр("ВидыОтветныхТитулов", ВидыОтветныхТитулов);
	
	Результат = Запрос.Выполнить().Выбрать();
	Пока Результат.СледующийПоЗначениюПоля("ДокументИБ") Цикл
		МассивФайловЭД = Новый Массив;
		Пока Результат.СледующийПоЗначениюПоля("ПрисоединенныйФайл") Цикл
			
			СвойстваДокумента = Новый Структура;
			СвойстваДокумента.Вставить("ВидЭД", Результат.ВидЭД);
			СвойстваДокумента.Вставить("ТипЭлементаВерсииЭД", Результат.ТипЭлементаВерсииЭД);

			ЗаполнитьДанныеЭД(МассивФайловЭД, Результат.ПрисоединенныйФайл,
				СвойстваДокумента, Результат.УникальныйИД, "ФайлВыгрузки", УникальныйИдентификатор);
			Если ЗначениеЗаполнено(Результат.ПодтверждениеСсылка) Тогда
				
				СвойстваДокумента.Вставить("Подтверждение", Истина);
				
				ЗаполнитьДанныеЭД(МассивФайловЭД, Результат.ПодтверждениеСсылка,
					СвойстваДокумента, Результат.УникальныйИДПодтверждения, "ФайлПодтверждения", УникальныйИдентификатор);
			КонецЕсли;
		КонецЦикла;
		Соответствие.Вставить(Результат.ДокументИБ, МассивФайловЭД);
	КонецЦикла;
	
	Возврат Соответствие;
	
КонецФункции

// Формирует сведения об ЭД, которые будут отражаться в едином списке документов,
// представляемых по требованию ФНС. Электронные документы должны быть по завершенным обменам,
// не помечены на удаление и принадлежать следующим видам ЭД:
// СчетФактура
// КорректировочныйСчетФактура
// ТОРГ12Продавец
// АктИсполнитель
//
// Параметры:
//
//    СвойстваЭД - Соответствие:
//       Ключ     – СправочникСсылка.ЭДПрисоединенныеФайлы.
//       Значение – Структура, Поля структуры:
//          ЭД              - СправочникСсылка.ЭДПрисоединенныеФайлы
//          ВладелецЭД      - ДокументСсылка - ссылка на объект метаданных - владельца файла
//          ВидДокументаФНС - Строка, вид электронного документа следует преобразовать
//                       к строковому представлению определенного формата. Возможные значения:
//                       "АктПриемкиСдачиРабот"
//                       "СчетФактура"
//                       "КорректировочныйСчетФактура"
//                       "ТоварнаяНакладнаяТОРГ12"
//    МассивЭД - Массив, массив ссылок на электронные документы.
//             Если массив заполнен, требуется заполнить свойства ЭД из массива.
//             Если массив пустой, тогда требуется заполнить свойства для всех ЭД,
//             удовлетворяющих свойствам, указанным выше.
//
Процедура ОпределитьСвойстваЭДДляЖурналаДокументовПредставляемыхПоТребованиюФНС(СвойстваЭД, МассивЭД) Экспорт
	
	Запрос = Новый Запрос;
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ЕСТЬNULL(ЭДПрисоединенныеФайлыВладельцы.Ссылка, ЭДПрисоединенныеФайлы.Ссылка) КАК ЭД,
	               |	ЕСТЬNULL(ЭДПрисоединенныеФайлыВладельцы.ВладелецФайла, ЭДПрисоединенныеФайлы.ВладелецФайла) КАК ВладелецЭД,
	               |	ВЫБОР
	               |		КОГДА ЕСТЬNULL(ЭДПрисоединенныеФайлыВладельцы.ВидЭД, ЭДПрисоединенныеФайлы.ВидЭД) = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.АктИсполнитель)
	               |			ТОГДА ""АктПриемкиСдачиРабот""
	               |		КОГДА ЕСТЬNULL(ЭДПрисоединенныеФайлыВладельцы.ВидЭД, ЭДПрисоединенныеФайлы.ВидЭД) = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.КорректировочныйСчетФактура)
	               |			ТОГДА ""КорректировочныйСчетФактура""
	               |		КОГДА ЕСТЬNULL(ЭДПрисоединенныеФайлыВладельцы.ВидЭД, ЭДПрисоединенныеФайлы.ВидЭД) = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.СчетФактура)
	               |			ТОГДА ""СчетФактура""
	               |		КОГДА ЕСТЬNULL(ЭДПрисоединенныеФайлыВладельцы.ВидЭД, ЭДПрисоединенныеФайлы.ВидЭД) = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.ТОРГ12Продавец)
	               |			ТОГДА ""ТоварнаяНакладнаяТОРГ12""
	               |		ИНАЧЕ """"
	               |	КОНЕЦ КАК ВидДокументаФНС
	               |ИЗ
	               |	РегистрСведений.СостоянияЭД КАК СостоянияЭД
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	               |			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлыВладельцы
	               |			ПО ЭДПрисоединенныеФайлы.ЭлектронныйДокументВладелец = ЭДПрисоединенныеФайлыВладельцы.Ссылка
	               |		ПО СостоянияЭД.ЭлектронныйДокумент = ЭДПрисоединенныеФайлы.Ссылка
	               |ГДЕ
	               |	СостоянияЭД.СостояниеВерсииЭД = ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.ОбменЗавершен)
	               |	И (ЕСТЬNULL(ЭДПрисоединенныеФайлыВладельцы.ВидЭД, ЭДПрисоединенныеФайлы.ВидЭД) В (&ВидыЭД))
	               |	И ЕСТЬNULL(ЭДПрисоединенныеФайлыВладельцы.ПодписанЭЦП, ЭДПрисоединенныеФайлы.ПодписанЭЦП)
	               |	И НЕ ЕСТЬNULL(ЭДПрисоединенныеФайлыВладельцы.ПометкаУдаления, ЭДПрисоединенныеФайлы.ПометкаУдаления)";
	
	Если ЗначениеЗаполнено(МассивЭД) Тогда
		ТекстЗапроса = ТекстЗапроса + "
			| И ЕСТЬNULL(ЭДПрисоединенныеФайлыВладельцы.Ссылка, ЭДПрисоединенныеФайлы.Ссылка) В (&МассивЭД)";
		Запрос.УстановитьПараметр("МассивЭД", МассивЭД);
	КонецЕсли;
	
	МассивВидовЭД = Новый Массив;
	МассивВидовЭД.Добавить(Перечисления.ВидыЭД.СчетФактура);
	МассивВидовЭД.Добавить(Перечисления.ВидыЭД.АктИсполнитель);
	МассивВидовЭД.Добавить(Перечисления.ВидыЭД.ТОРГ12Продавец);
	МассивВидовЭД.Добавить(Перечисления.ВидыЭД.КорректировочныйСчетФактура);
	Запрос.УстановитьПараметр("ВидыЭД", МассивВидовЭД);
	Запрос.Текст = ТекстЗапроса;
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СтруктураСвойств = Новый Структура;
		СтруктураСвойств.Вставить("ВидДокументаФНС", Выборка.ВидДокументаФНС);
		СтруктураСвойств.Вставить("ВладелецЭД", Выборка.ВладелецЭД);
		СтруктураСвойств.Вставить("ЭД", Выборка.ЭД);
		
		СвойстваЭД.Вставить(Выборка.ЭД, СтруктураСвойств);
	КонецЦикла;
	
КонецПроцедуры

// Определяет владельца электронного документа
//
// Параметры:
//   ЭД         - СправочникСсылка - ссылка на  электронный документ.
//   ВладелецЭД - ссылка на владельца электронного документа.
//
Процедура ОпределитьВладельцаЭлектронногоДокумента(ЭД, ВладелецЭД) Экспорт
	
	ВладелецЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭД, "ВладелецФайла");
	
КонецПроцедуры

// Заполняет вид документа ФНС для владельцев электронных документов,
// которые будут отражаться в едином списке документов, представляемых по требованию ФНС.
// Для владельца ЭД должны существовать электронные документы по завершенным обменам,
// не помеченные на удаление и принадлежащие следующим видам ЭД:
// СчетФактура
// КорректировочныйСчетФактура
// ТОРГ12Продавец
// ТОРГ12Покупатель
// АктИсполнитель
// АктЗаказчик
//
// Параметры:
//   СвойстваВладельцевЭД - Соответствие:
//      Ключ     – ДокументСсылка - ссылка на владельца электронного документа
//      Значение – Строка - вид электронного документа, который следует преобразовать
//                 к строковому представлению определенного формата. Возможные значения:
//                   "АктПриемкиСдачиРабот"
//                   "СчетФактура"
//                   "КорректировочныйСчетФактура"
//                   "ТоварнаяНакладнаяТОРГ12"
//   МассивВладельцевЭД - (необязательный) Массив, массив ссылок на владельцев электронные документы.
//      Если параметр указан, требуется заполнить свойства владельцев ЭД из массива.
//      Если параметр не указан или массив пустой, тогда требуется заполнить свойства для всех владельцев ЭД, удовлетворяющих свойствам, указанным выше.
//
Процедура ОпределитьСвойстваВладельцевЭлектронныхДокументов(СвойстваВладельцевЭД, МассивВладельцевЭД = Неопределено) Экспорт
	
	Если ТипЗнч(МассивВладельцевЭД) = Тип("Массив") Тогда
		СоответствиеВладельцевИЭД = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьСоответствиеВладельцевИЭД(МассивВладельцевЭД);
		СвойстваВладельцевЭД = Новый Соответствие;
		Для Каждого ВладелецЭД Из МассивВладельцевЭД Цикл
			СсылкаНаЭД = СоответствиеВладельцевИЭД.Получить(ВладелецЭД);
			ПредставлениеЭД = "";
			Если ЗначениеЗаполнено(СсылкаНаЭД) Тогда
				СвойстваДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаЭД, "ВидЭД, ТипЭлементаВерсииЭД");
				ВидЭД = СвойстваДокумента.ВидЭД;
				ТипЭлементаВерсииЭД = СвойстваДокумента.ТипЭлементаВерсииЭД;
				Если ВидЭД = Перечисления.ВидыЭД.СчетФактура Тогда
					Если ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ЭСФ Тогда
						ПредставлениеЭД = "СчетФактура";
					Иначе
						ПредставлениеЭД = "УПД";
					КонецЕсли;
				ИначеЕсли ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура Тогда
					Если ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ЭСФ Тогда
						ПредставлениеЭД = "КорректировочныйСчетФактура";
					Иначе
						ПредставлениеЭД = "УКД";
					КонецЕсли;
				ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец
					ИЛИ ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель Тогда
					Если ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПервичныйЭД Тогда
						ПредставлениеЭД = "ТоварнаяНакладнаяТОРГ12";
					Иначе
						ПредставлениеЭД = "ПередачаТоваров";
					КонецЕсли;
				ИначеЕсли ВидЭД = Перечисления.ВидыЭД.АктИсполнитель
					ИЛИ ВидЭД = Перечисления.ВидыЭД.АктЗаказчик Тогда
					Если ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПервичныйЭД Тогда
						ПредставлениеЭД = "АктПриемкиСдачиРабот";
					Иначе
						ПредставлениеЭД = "ПередачаУслуг";
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			СвойстваВладельцевЭД.Вставить(ВладелецЭД, ПредставлениеЭД);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработка ошибок

// Обрабатывает исключительные ситуации по электронным документам.
//
// Параметры:
// ВидОперации - строка - вид операции при которой возникло исключение.
// ПодробныйТекстОшибки - строка - описание ошибки.
// ТекстСообщения - строка - текст ошибки.
//
Процедура ОбработатьИсключениеПоЭДНаСервере(ВидОперации, ПодробныйТекстОшибки, ТекстСообщения = "", КодСобытия = 2) Экспорт
	
	ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(ВидОперации,
		ПодробныйТекстОшибки, ТекстСообщения, КодСобытия);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Заполнение объектов

// В процедуре происходит добавление данных из СтруктурыДанных в Таблицу значений "ТаблицаДопДанных".
// Параметры:
//  ЮридическиЗначимый - Булево - если Истина - то текущие данные необходимо по возможности поместить в основной ЭД.
//  НомерСтроки - Строка/Неопределено - если заполнен, то указывает на принадлежность текущих данных табличной части.
//    Значение параметра указывает к какой строке табличной части относятся данные. Может иметь вид "1" или "1.1".
//    Если значение вида "1.1", то это значит, что текущие данные относятся к первой строке табличной части, 
//    расположеной в первой строке таблицы-владельца. (подробнее см. схему ХДТО "АктТитулИсполнителя", список "ОписьРабот"
//    , вложенный список "Работа").
//
Процедура ДобавитьДанныеВДеревоДопДанных(СтруктураПараметров, СтруктураДанных, ИмяЭлементаВладельца, ЮридическиЗначимый = Ложь, НомерСтроки = Неопределено) Экспорт
	
	ДеревоДопДанных = СтруктураПараметров.ДеревоДопДанных;
	Если ТипЗнч(ДеревоДопДанных) = Тип("ДеревоЗначений") Тогда
		ЭлементТЧ = (НомерСтроки <> Неопределено);
		СтОтбора = Новый Структура("ЗначениеРеквизита, ТЧ", ИмяЭлементаВладельца, ЭлементТЧ);
		СтрокиДерева = ДеревоДопДанных.Строки.НайтиСтроки(СтОтбора, Истина);
		
		Если СтрокиДерева.Количество() = 0 Тогда
			СтрокаДерева = ДеревоДопДанных.Строки.Добавить();
			СтрокаДерева.ИмяРеквизита = ?(ЭлементТЧ, "Список", "Набор");
			СтрокаДерева.ЗначениеРеквизита = ИмяЭлементаВладельца;
			СтрокаДерева.ТЧ = ЭлементТЧ;
		Иначе
			СтрокаДерева = СтрокиДерева[0];
		КонецЕсли;
		
		Если ЭлементТЧ Тогда
			СтОтбора = Новый Структура("ИмяРеквизита, ЗначениеРеквизита", "Нпп", Строка(НомерСтроки));
			СтрокиСписка = СтрокаДерева.Строки.НайтиСтроки(СтОтбора);
			Если СтрокиСписка.Количество() = 0 Тогда
				СтрокаДерева = СтрокаДерева.Строки.Добавить();
				СтрокаДерева.ИмяРеквизита = "Нпп";
				СтрокаДерева.ТЧ = ЭлементТЧ;
				СтрокаДерева.ЗначениеРеквизита = Строка(НомерСтроки);
			Иначе
				СтрокаДерева = СтрокиСписка[0];
			КонецЕсли;
		КонецЕсли;
		
		ДоступноСимволов = 0;
		Если ЮридическиЗначимый Тогда
			Если НомерСтроки = Неопределено Тогда
				ДоступноСимволов = СтруктураПараметров.ДопустимаяДлинаДопДанныхШапки;
			Иначе
				ДоступноСимволов = СтруктураПараметров.ДопустимаяДлинаДопДанныхСтроки;
			КонецЕсли;
		КонецЕсли;
		
		ДобавитьДанныеРекурсивно(СтрокаДерева,
								 СтруктураДанных,
								 ДоступноСимволов,
								 ЮридическиЗначимый,
								 ЭлементТЧ,
								 НомерСтроки);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчик событий формы

// Функция - Параметры "ПриСозданииНаСервере" вызывается из формы документа.
// 
// Возвращаемое значение:
//  Структура - параметры, которые нужно передавать в метод "ЭлектронныеДокументы.ПриСозданииНаСервере_ФормаДокумента".
//    * Форма - Управляемая форма - форма документа.
//    * ДокументСсылка - ДокументСсылка - Ссылка на документ.
//    * ДекорацияСостояниеЭДО - Элемент формы - элемент формы "декорация", в заголовке которого будет отображаться состояние ЭДО.
//    * ПодменюЭДО - ЭлементФормы, массив элементов формы - Элемент формы подменю ЭДО.
//                   Параметр заполняется если подменю ЭДО не является группой команд "ЭД".
//
Функция ПараметрыПриСозданииНаСервере_ФормаДокумента() Экспорт
	
	ПараметрыПриСоздании = Новый Структура("Форма, ДокументСсылка, ДекорацияСостояниеЭДО, ПодменюЭДО");
	Возврат ПараметрыПриСоздании;
	
КонецФункции

// Обработчик события "ПриСозданииНаСервере" формы документа.
//
// Параметры:
//  Отказ - Булево - Признак отказа от создания формы.
//  СтандартнаяОбработка - Булево - Признак выполнения стандартной (системной) обработки события.
//  ПараметрыПриСозданииНаСервере - Структура - см."ЭлектронныеДокументы.ПараметрыПриСозданииНаСервере_ФормаДокумента".
//
Процедура ПриСозданииНаСервере_ФормаДокумента(Отказ, СтандартнаяОбработка, ПараметрыПриСозданииНаСервере) Экспорт
	
	ОбновитьПиктограммуПодменюЭДО(ПараметрыПриСозданииНаСервере);
	
	ЗаполнитьСостояниеЭДО(ПараметрыПриСозданииНаСервере);
	
КонецПроцедуры

// Функция - Параметры "ПриСозданииНаСервере" вызывается формы списка документов.
// 
// Возвращаемое значение:
//  Структура - параметры, которые необхдимо передать в метод "ЭлектронныеДокументы.ПараметрыПриСозданииНаСервере_ФормаСписка".
//    * Форма - управляемая форма - форма списка документа.
//    * ПодменюЭДО - ЭлементФормы, массив элементов формы - Элемент формы подменю ЭДО.
//                   Параметр заполняется если подменю ЭДО не является группой команд "ЭД".
//
Функция ПараметрыПриСозданииНаСервере_ФормаСписка() Экспорт
	
	ПараметрыПриСоздании = Новый Структура("Форма, ПодменюЭДО");
	Возврат ПараметрыПриСоздании;
	
КонецФункции

// Обработчик события "ПриСозданииНаСервере" вызывается из формы списка документов.
//
// Параметры:
//  Отказ - булево - Признак отказа от создания формы.
//  СтандартнаяОбработка - булево - Признак выполнения стандартной (системной) обработки события.
//  ПараметрыПриСозданииНаСервере - структура - см."ЭлектронныеДокументы.ПараметрыПриСозданииНаСервере_ФормаСписка".
//
Процедура ПриСозданииНаСервере_ФормаСписка(Отказ, СтандартнаяОбработка, ПараметрыПриСозданииНаСервере) Экспорт
	
	ОбновитьПиктограммуПодменюЭДО(ПараметрыПриСозданииНаСервере);
	
КонецПроцедуры

// Функция - Параметры "ПослеЗаписиНаСервере" вызывается из формы документа.
// 
// Возвращаемое значение:
//  Структура - Параметры, которые нужно передавать в метод "ЭлектронныеДокументы.ПослеЗаписиНаСервере".
//    * Форма - Управляемая форма - форма документа.
//    * ДокументСсылка - ДокументСсылка - ссылка на документ.
//    * ДекорацияСостояниеЭДО - Элемент формы - элемент формы "декорация", в заголовке которого будет отображаться состояние ЭДО.
//
Функция ПараметрыПослеЗаписиНаСервере() Экспорт
	
	ПараметрыПослеЗаписи = Новый Структура("ДокументСсылка, ДекорацияСостояниеЭДО");
	
	Возврат ПараметрыПослеЗаписи;
	
КонецФункции

// Обработчик события "ПослеЗаписиНаСервере" формы документа.
//
// Параметры:
//  ДокументОбъект - ДокументОбъект - Записываемый объект.
//  СтандартнаяОбработка - Структура - Структура, содержащая параметры записи.
//  ПараметрыПослеЗаписи - Структура - см."ЭлектронныеДокументы.ПараметрыПослеЗаписиНаСервере".
//
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи, ПараметрыПослеЗаписи) Экспорт
	
	// Установить состояине ЭДО документа
	ЗаполнитьСостояниеЭДО(ПараметрыПослеЗаписи);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Заполнение объектов

// Получает выписку банка в текстовом формате, а также массив ссылок на банковские счета организаций в выписке
//
// Параметры
//  ЭД - СправочникСсылка.ЭДПрисоединенныеФайлы - содержит файл выписки банка
//  СсылкаНаХранилище - Cтрока - содержит ссылку на хранилище тестовых данных
//  МассивСчетов - Массив - cодержит ссылки на банковские счета организации
//
Процедура ПолучитьДанныеВыпискиБанкаТекстовыйФормат(ЭД, СсылкаНаХранилище, МассивСчетов) Экспорт

	МассивСчетов = Новый Массив;
	ДопИнформацияПоЭД = ЭлектронныеДокументыСлужебный.ПолучитьДанныеФайла(ЭД);
	Если ДопИнформацияПоЭД.Свойство("СсылкаНаДвоичныеДанныеФайла")
			И ЗначениеЗаполнено(ДопИнформацияПоЭД.СсылкаНаДвоичныеДанныеФайла) Тогда
		
		ДанныеЭД = ПолучитьИзВременногоХранилища(ДопИнформацияПоЭД.СсылкаНаДвоичныеДанныеФайла);

		ИмяФайла = ПолучитьИмяВременногоФайла("xml");
				
		Если ИмяФайла = Неопределено Тогда
			ТекстОшибки = НСтр("ru = 'Не удалось прочитать электронный документ. Проверьте настройку рабочего каталога'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			Возврат;
		КонецЕсли;
		
		ДанныеЭД.Записать(ИмяФайла);
		РеквизитыЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЭД, "НаправлениеЭД, Организация");
		СтруктураДанных = ЭлектронныеДокументыВнутренний.СформироватьДеревоРазбора(ИмяФайла, РеквизитыЭД.НаправлениеЭД);
		
		УдалитьФайлы(ИмяФайла);
		Если СтруктураДанных = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ДеревоРазбора = СтруктураДанных.ДеревоРазбора;
		СтрокаОбъекта = СтруктураДанных.СтрокаОбъекта;
			
		Текст = Новый ТекстовыйДокумент();

		Текст.ДобавитьСтроку("1CClientBankExchange");
		Текст.ДобавитьСтроку("ВерсияФормата=1.02");
		Текст.ДобавитьСтроку("Кодировка=Windows");
		ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаОбъекта, Текст, "Отправитель");
		Получатель = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																					ДеревоРазбора,
																					СтрокаОбъекта,
																					"Получатель");
		Текст.ДобавитьСтроку("Получатель=" + Получатель);
		ДатаСоздания = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																					ДеревоРазбора,
																					СтрокаОбъекта,
																					"ДатаСоздания");
		Если ЗначениеЗаполнено(ДатаСоздания) Тогда
			Текст.ДобавитьСтроку("ДатаСоздания=" + Формат(ДатаСоздания, "ДФ=dd.MM.yyyy"));
		КонецЕсли;
		ВремяСоздания = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																					ДеревоРазбора,
																					СтрокаОбъекта,
																					"ВремяСоздания");
		Если ЗначениеЗаполнено(ВремяСоздания) Тогда
			Текст.ДобавитьСтроку("ВремяСоздания=" + Формат(ВремяСоздания, "ДФ=dd.MM.yyyy"));
		КонецЕсли;
		
		СтруктураОтбора = Новый Структура("Реквизит", "БанковскиеСчетаОрганизаций");
		БанковскиеСчетаОрганизаций = СтрокаОбъекта.Строки.НайтиСтроки(СтруктураОтбора);
		ДатаНачала = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																					ДеревоРазбора,
																					СтрокаОбъекта,
																					"ДатаНачала");
		ДатаКонца  = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																					ДеревоРазбора,
																					СтрокаОбъекта,
																					"ДатаКонца");
																					
		Текст.ДобавитьСтроку("ДатаНачала=" + Формат(ДатаНачала, "ДФ=dd.MM.yyyy"));
		Текст.ДобавитьСтроку("ДатаКонца="  + Формат(ДатаКонца,  "ДФ=dd.MM.yyyy"));
		
		Для Каждого СтрокаБанковскийСчет Из БанковскиеСчетаОрганизаций Цикл
			НомерСчета = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																					ДеревоРазбора,
																					СтрокаБанковскийСчет,
																					"БанковскийСчет.РасчСчет");
			Текст.ДобавитьСтроку("РасчСчет=" + НомерСчета);
		КонецЦикла;
		
		Для Каждого СтрокаБанковскийСчет Из БанковскиеСчетаОрганизаций Цикл
			Текст.ДобавитьСтроку("СекцияРасчСчет");
			Текст.ДобавитьСтроку("ДатаНачала=" + Формат(ДатаНачала, "ДФ=dd.MM.yyyy"));
			Текст.ДобавитьСтроку("ДатаКонца="  + Формат(ДатаКонца,  "ДФ=dd.MM.yyyy"));
			НомерСчета = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																					ДеревоРазбора,
																					СтрокаБанковскийСчет,
																					"БанковскийСчет.РасчСчет");
			ДополнительныеРеквизиты = Новый Структура("Владелец", РеквизитыЭД.Организация);
			СчетОрганизации = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект(
						"БанковскиеСчетаОрганизаций", НомерСчета, ДополнительныеРеквизиты);
			МассивСчетов.Добавить(СчетОрганизации);
			Текст.ДобавитьСтроку("РасчСчет=" + НомерСчета);
			
			НачальныйОстаток = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																					ДеревоРазбора,
																					СтрокаБанковскийСчет,
																					"БанковскийСчет.НачальныйОстаток");
			Если ЗначениеЗаполнено(НачальныйОстаток) Тогда
				Текст.ДобавитьСтроку("НачальныйОстаток=" + Формат(НачальныйОстаток, "ЧРД=.; ЧГ="));
			КонецЕсли;
			ВсегоПоступило = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																					ДеревоРазбора,
																					СтрокаБанковскийСчет,
																					"БанковскийСчет.ВсегоПоступило");
			Если ЗначениеЗаполнено(ВсегоПоступило) Тогда
				Текст.ДобавитьСтроку("ВсегоПоступило=" + Формат(ВсегоПоступило, "ЧРД=.; ЧГ="));
			КонецЕсли;
			ВсегоСписано = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																					ДеревоРазбора,
																					СтрокаБанковскийСчет,
																					"БанковскийСчет.ВсегоСписано");
			Если ЗначениеЗаполнено(ВсегоСписано) Тогда
				Текст.ДобавитьСтроку("ВсегоСписано=" + Формат(ВсегоСписано, "ЧРД=.; ЧГ="));
			КонецЕсли;
			КонечныйОстаток = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																					ДеревоРазбора,
																					СтрокаБанковскийСчет,
																					"БанковскийСчет.КонечныйОстаток");
			Если ЗначениеЗаполнено(КонечныйОстаток) Тогда
				Текст.ДобавитьСтроку("КонечныйОстаток=" + Формат(КонечныйОстаток, "ЧРД=.; ЧГ="));
			КонецЕсли;
			
			Текст.ДобавитьСтроку("КонецРасчСчет");
			
		КонецЦикла;
			
		СтрокиТЧ = СтрокаОбъекта.Строки.НайтиСтроки(Новый Структура("Реквизит", "СтрокаТЧ"));
		Для Каждого СтрокаТЧ Из СтрокиТЧ Цикл
			СекцияДокумент = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																					ДеревоРазбора,
																					СтрокаТЧ,
																					"СекцияДокумент");
			Текст.ДобавитьСтроку("СекцияДокумент=" + СекцияДокумент);
			Номер = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																					ДеревоРазбора,
																					СтрокаТЧ,
																					"Номер");
			Текст.ДобавитьСтроку("Номер=" + Номер);
			Дата = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																					ДеревоРазбора,
																					СтрокаТЧ,
																					"Дата");
			Текст.ДобавитьСтроку("Дата=" + Формат(Дата, "ДФ=dd.MM.yyyy"));
			Сумма = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																					ДеревоРазбора,
																					СтрокаТЧ,
																					"Сумма");
			Текст.ДобавитьСтроку("Сумма=" + Формат(Сумма, "ЧРД=.; ЧГ="));
			КвитанцияДата = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																					ДеревоРазбора,
																					СтрокаТЧ,
																					"КвитанцияДата");
			Если ЗначениеЗаполнено(КвитанцияДата) Тогда
				Текст.ДобавитьСтроку("КвитанцияДата=" + Формат(КвитанцияДата, "ДФ=dd.MM.yyyy"));
			КонецЕсли;
			КвитанцияВремя = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																					ДеревоРазбора,
																					СтрокаТЧ,
																					"КвитанцияВремя");
			Если ЗначениеЗаполнено(КвитанцияВремя) Тогда
				Текст.ДобавитьСтроку("КвитанцияВремя=" + Формат(КвитанцияВремя, "ДЛФ=T"));
			КонецЕсли;
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "КвитанцияСодержание");
			
			ПлательщикСчет = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																					ДеревоРазбора,
																					СтрокаТЧ,
																					"ПлательщикСчет");
			Текст.ДобавитьСтроку("ПлательщикСчет=" + ПлательщикСчет);
			ДатаСписано = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																					ДеревоРазбора,
																					СтрокаТЧ,
																					"ДатаСписано");
			Если ЗначениеЗаполнено(ДатаСписано) Тогда
				Текст.ДобавитьСтроку("ДатаСписано=" + Формат(ДатаСписано, "ДФ=dd.MM.yyyy"));
			КонецЕсли;
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "Плательщик");
			ПлательщикИНН = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																					ДеревоРазбора,
																					СтрокаТЧ,
																					"ПлательщикИНН");
			Текст.ДобавитьСтроку("ПлательщикИНН=" + ПлательщикИНН);
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "ПлательщикКПП");
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "Плательщик1");
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "Плательщик2");
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "Плательщик3");
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "Плательщик4");
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "ПлательщикРасчСчет");
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "ПлательщикБанк1");
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "ПлательщикБанк2");
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "ПлательщикБИК");
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "ПлательщикКорсчет");
			ПолучательСчет = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																					ДеревоРазбора,
																					СтрокаТЧ,
																					"ПолучательСчет");
			Текст.ДобавитьСтроку("ПолучательСчет=" + ПолучательСчет);
			ДатаПоступило = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																					ДеревоРазбора,
																					СтрокаТЧ,
																					"ДатаПоступило");
			Если ЗначениеЗаполнено(ДатаПоступило) Тогда
				Текст.ДобавитьСтроку("ДатаПоступило=" + Формат(ДатаПоступило, "ДФ=dd.MM.yyyy"));
			КонецЕсли;
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "Получатель");
			ПолучательИНН = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																					ДеревоРазбора,
																					СтрокаТЧ,
																					"ПолучательИНН");
			Текст.ДобавитьСтроку("ПолучательИНН=" + ПолучательИНН);
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "ПолучательКПП");
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "Получатель1");
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "Получатель2");
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "Получатель3");
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "Получатель4");
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "ПолучательРасчСчет");
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "ПолучательБанк1");
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "ПолучательБанк2");
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "ПолучательБИК");
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "ПолучательКорсчет");
			
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "ВидПлатежа");
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "ВидОплаты");
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "Код");
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "НазначениеПлатежа");
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "НазначениеПлатежа1");
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "НазначениеПлатежа2");
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "НазначениеПлатежа3");
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "НазначениеПлатежа4");
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "НазначениеПлатежа5");
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "НазначениеПлатежа6");
				
			ЭтоПлатежВБюджет = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																						ДеревоРазбора,
																						СтрокаТЧ,
																						"ЭтоПлатежВБюджет");
			Если ЭтоПлатежВБюджет = Истина Тогда
				ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "СтатусСоставителя");
				ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "ПоказательКБК");
				ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "ОКАТО");
				ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "ПоказательОснования");
				ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "ПоказательПериода");
				ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "ПоказательНомера");
				ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "ПоказательДаты");
				ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "ПоказательТипа");
			КонецЕсли;
				
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "Очередность");
			СрокАкцепта = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																						ДеревоРазбора,
																						СтрокаТЧ,
																						"СрокАкцепта");
			Если ЗначениеЗаполнено(СрокАкцепта) Тогда
				Текст.ДобавитьСтроку("СрокАкцепта=" + Формат(СрокАкцепта,"ЧДЦ=0; ЧГ="));
			КонецЕсли;
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "ВидАккредитива");
			СрокПлатежа = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																						ДеревоРазбора,
																						СтрокаТЧ,
																						"СрокПлатежа");
			Если ЗначениеЗаполнено(СрокПлатежа) Тогда
				Текст.ДобавитьСтроку("СрокПлатежа=" + Формат(СрокПлатежа, "ДФ=dd.MM.yyyy"));
			КонецЕсли;
			УсловиеОплаты1 = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																						ДеревоРазбора,
																						СтрокаТЧ,
																						"УсловиеОплаты");
			Если ЗначениеЗаполнено(УсловиеОплаты1) Тогда
				Текст.ДобавитьСтроку("УсловиеОплаты1="+ УсловиеОплаты1);
			КонецЕсли;
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "ПлатежПоПредст");
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "ДополнУсловия");
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "НомерСчетаПоставщика");
			ДатаОтсылкиДок = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																						ДеревоРазбора,
																						СтрокаТЧ,
																						"ДатаОтсылкиДок");
			Если ЗначениеЗаполнено(ДатаОтсылкиДок) Тогда
				Текст.ДобавитьСтроку("ДатаОтсылкиДок="+ Формат(ДатаОтсылкиДок, "ДФ=dd.MM.yyyy"));
			КонецЕсли;
			Текст.ДобавитьСтроку("КонецДокумента");
		КонецЦикла;
	
		Текст.ДобавитьСтроку("КонецФайла");
		
		ТекстВыписки = Текст.ПолучитьТекст();
		
		ИмяФайла = ПолучитьИмяВременногоФайла();
		ТекстовыйДокумент = Новый ТекстовыйДокумент();
		ТекстовыйДокумент.УстановитьТекст(ТекстВыписки);
		ТекстовыйДокумент.Записать(ИмяФайла, "windows-1251");
		ДанныеФайла = Новый ДвоичныеДанные(ИмяФайла);
		СсылкаНаХранилище = ПоместитьВоВременноеХранилище(ДанныеФайла, Новый УникальныйИдентификатор());
		УдалитьФайлы(ИмяФайла);
		
	КонецЕсли;
	
КонецПроцедуры

// Получает выписку банка в виде дерева значений
//
// Параметры
//  ЭД - СправочникСсылка.ЭДПрисоединенныеФайлы - содержит файл выписки банка
//  ДанныеВыписки - ДеревоЗначений - содержит дерево данных выписки
//
Процедура ПолучитьДанныеВыпискиБанкаДеревоЗначений(ЭД, ДанныеВыписки) Экспорт
	
	ДопИнформацияПоЭД = ЭлектронныеДокументыСлужебный.ПолучитьДанныеФайла(ЭД);
	Если ДопИнформацияПоЭД.Свойство("СсылкаНаДвоичныеДанныеФайла")
			И ЗначениеЗаполнено(ДопИнформацияПоЭД.СсылкаНаДвоичныеДанныеФайла) Тогда
		
		ДанныеЭД = ПолучитьИзВременногоХранилища(ДопИнформацияПоЭД.СсылкаНаДвоичныеДанныеФайла);

		ИмяФайла = ПолучитьИмяВременногоФайла("xml");
				
		Если ИмяФайла = Неопределено Тогда
			ТекстОшибки = НСтр("ru = 'Не удалось прочитать электронный документ. Проверьте настройку рабочего каталога'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			Возврат;
		КонецЕсли;
		
		ДанныеЭД.Записать(ИмяФайла);
		
		СтруктураДанных = ЭлектронныеДокументыВнутренний.СформироватьДеревоРазбора(ИмяФайла, ЭД.НаправлениеЭД);
		
		УдалитьФайлы(ИмяФайла);
		Если СтруктураДанных = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ДанныеВыписки = СтруктураДанных.ДеревоРазбора;
		
	КонецЕсли;
	
КонецПроцедуры

// Получает дерево разбора, содержащее данные выписки
//
// Параметры:
// ТекстДляРазбора - Строка - текст выписки.
//
// Возвращаемое значение:
//  ДеревоЗначений - данные выписки.
//
Функция ДеревоРазбораВыпискиБанка(ТекстДляРазбора) Экспорт
	
	Возврат ЭлектронныеДокументыВнутренний.ДеревоРазбораВыпискиБанка(ТекстДляРазбора);
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Интеграция1СЭДОИ1СОтчетности

// В процедуре заполняются данные по организации для мастера 1С-Отчетности.
//
// Параметры:
//  Организация - СправочникСсылка.Организации - Организация, по которой необходимо заполнить данные.
//  ДополнительныеПараметры - Струкутура - может иметь следующий набор свойств:
//    ЕстьПодключениеЭДО - Булево - признак подключенности переданной организации к сервису 1С-ЭДО;
//    МассивОператоровЭДО - Массив - перечень актуальных операторов ЭДО в сервисе 1С-ЭДО;
//    СсылкаОписаниеСервиса - Строка - ссылка на актуальную информацию о сервисе 1С-ЭДО.
//
Процедура ЗаполнитьДанныеПо1СЭДОДляМастера1СОтчетности(Организация, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Организация) ИЛИ НЕ ЗначениеЗаполнено(ДополнительныеПараметры) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПрофилиНастроекЭДО.Ссылка
	|ИЗ
	|	Справочник.ПрофилиНастроекЭДО КАК ПрофилиНастроекЭДО
	|ГДЕ
	|	ПрофилиНастроекЭДО.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезСервис1СЭДО)
	|	И ПрофилиНастроекЭДО.Организация = &Организация
	|	И НЕ ПрофилиНастроекЭДО.ПометкаУдаления";
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Если Запрос.Выполнить().Пустой() Тогда
		ДополнительныеПараметры.Вставить("ЕстьПодключениеЭДО", Ложь);
		
		ИмяФайлаОтвета = ЭлектронныеДокументыСлужебный.ПолучитьФайлОтветаОтСервераЭДО("GetOperators");
		Если ИмяФайлаОтвета <> Неопределено Тогда
			ДанныеФайла = ЭлектронныеДокументыСлужебный.ПрочитатьТекстИзФайла(ИмяФайлаОтвета, , Истина);
			
			// ОператорыЭДОПодключенныеК1СЭДО
			МассивОператоровЭДО = Новый Массив;
			
			Если НЕ ПустаяСтрока(ДанныеФайла) Тогда
				ДеревоXML = ЭлектронныеДокументыСлужебный.ЗагрузитьСтрокуXMLВДеревоЗначений(ДанныеФайла);
				
				Если ДеревоXML <> Неопределено Тогда
					
					УзелОператорыЭДО = ДеревоXML.Строки.Найти("Operators", "Имя");
					Если УзелОператорыЭДО <> Неопределено Тогда
						Для Каждого УзелОператорЭДО Из УзелОператорыЭДО.Строки Цикл
							
							УзелОператорЭДОНаимОрг = УзелОператорЭДО.Строки.Найти("НаимОрг", "Имя");
							Если Найти(УзелОператорЭДОНаимОрг.Значение, "тест") = 0 Тогда
								МассивОператоровЭДО.Добавить(УзелОператорЭДОНаимОрг.Значение);
							КонецЕсли;
							
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(МассивОператоровЭДО) Тогда
				ДополнительныеПараметры.Вставить("МассивОператоровЭДО", МассивОператоровЭДО);
			КонецЕсли;
		КонецЕсли;
		
		ДополнительныеПараметры.Вставить("СсылкаОписаниеСервиса", "https://portal.1c.ru/applications/30/#conditions");
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПроверкаСостоянияКонтрагентовВ1СЭДО

// Метод запускает проверку состояния контрагента в сервисе 1С-ЭДО.
//
// Параметры:
//  СсылкаНаКонтрагента - Ссылка, ссылка не справочник контрагента, которого необходимо проверить по подключение к 1С-ЭДО.
//
Процедура ПроверитьКонтрагентаВ1СЭДОПриСозданииНаСервере(СсылкаНаКонтрагента) Экспорт
	
	// Проверим необходимость запуска фонового задания
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СостоянияКонтрагентовБЭД.Состояние
	|ИЗ
	|	РегистрСведений.СостоянияКонтрагентовБЭД КАК СостоянияКонтрагентовБЭД
	|ГДЕ
	|	СостоянияКонтрагентовБЭД.Контрагент = &Контрагент
	|	И СостоянияКонтрагентовБЭД.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияКонтрагентаБЭД.НеПодключен)";
	
	Запрос.УстановитьПараметр("Контрагент", СсылкаНаКонтрагента);
	
	УстановитьПривилегированныйРежим(Истина);
	Если Запрос.Выполнить().Пустой() Тогда
		Возврат;
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);
	
	// Запуск фонового задания для проверки контрагента
	ПараметрыЗапуска = Новый Структура;
	ПараметрыЗапуска.Вставить("Контрагент",     СсылкаНаКонтрагента);
	ПараметрыЗапуска.Вставить("СохранятьРезультатСразуПослеПроверки", Истина);
	
	ИмяРеквизитаИННКонтрагента = ЭлектронныеДокументыПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("ИННКонтрагента");
	ИмяРеквизитаКППКонтрагента = ЭлектронныеДокументыПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("КППКонтрагента");
	
	ПараметрыКонтрагента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаКонтрагента,
		ИмяРеквизитаИННКонтрагента + ", " + ИмяРеквизитаКППКонтрагента);
		
	ПараметрыЗапуска.Вставить("ИНН", ПараметрыКонтрагента[ИмяРеквизитаИННКонтрагента]);
	ПараметрыЗапуска.Вставить("КПП", ПараметрыКонтрагента[ИмяРеквизитаКППКонтрагента]);
	
	Попытка
		
		Если ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
			ЭлектронныеДокументыСлужебный.ПроверитьКонтрагентаФоновоеЗадание(ПараметрыЗапуска);
			
		Иначе
			Параметры = Новый Массив;
			Параметры.Добавить(ПараметрыЗапуска);
		
			ФоновыеЗадания.Выполнить("ЭлектронныеДокументыСлужебный.ПроверитьКонтрагентаФоновоеЗадание", 
				Параметры, ПараметрыЗапуска.ИНН + " " + ПараметрыЗапуска.КПП, НСтр("ru = 'Проверка подключения к 1С-ЭДО'"));
		КонецЕсли;
	Исключение
		
		// Исключение возникнет в случае запуска фонового задания с таким же ключем
		// Спецальной обработки не требуется
			
		Операция = Нстр("ru = 'Проверка подключения контрагента к 1С-ЭДО в фоновом задании.'");
		ПодробныйТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(Операция, ПодробныйТекстОшибки);
		
	КонецПопытки;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПроверкаИспользованияУниверсальныхДокументов

// Получает признак использования универсального передаточного документа между участниками ЭДО.
//
// Параметры:
//   Организация - Ссылка - элемент справочника Организации.
//   Контрагент - Ссылка - элемент справочника Контрагенты;
//   ДоговорКонтрагента - Ссылка - элемент справочника ДоговораКонтрагентов.
//
// Возвращаемое значение:
//   Результат - Булево - признак использования универсального передаточного документа.
//
Функция ИспользованиеУниверсальногоПередаточногоДокумента(Организация, Контрагент, ДоговорКонтрагента = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = Ложь;
	Если ЗначениеЗаполнено(Контрагент) И ЗначениеЗаполнено(Организация) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	НастройкаЭДО.ИспользоватьУПД КАК ИспользоватьУПД,
		|	ВЫБОР
		|		КОГДА НастройкаЭДО.ДоговорКонтрагента = &ДоговорКонтрагента
		|			ТОГДА 0
		|		ИНАЧЕ 2
		|	КОНЕЦ + ВЫБОР
		|		КОГДА НастройкаЭДО.ИспользуетсяДляОтправки
		|			ТОГДА 0
		|		ИНАЧЕ 1
		|	КОНЕЦ КАК Порядок
		|ИЗ
		|	Справочник.СоглашенияОбИспользованииЭД КАК НастройкаЭДО
		|ГДЕ
		|	НастройкаЭДО.Контрагент = &Контрагент
		|	И НастройкаЭДО.Организация = &Организация
		|	И НЕ НастройкаЭДО.ПометкаУдаления
		|	И НастройкаЭДО.СтатусПодключения = ЗНАЧЕНИЕ(Перечисление.СтатусыУчастниковОбменаЭД.Присоединен)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Порядок";
		
		Запрос.УстановитьПараметр("Контрагент",         Контрагент);
		Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорКонтрагента);
		Запрос.УстановитьПараметр("Организация",        Организация);
		
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			
			Результат = Выборка.ИспользоватьУПД;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Получает признак использования универсального корректировочного документа между участниками ЭДО.
//
// Параметры:
//   Организация - Ссылка - элемент справочника Организации.
//   Контрагент - Ссылка - элемент справочника Контрагенты;
//   ДоговорКонтрагента - Ссылка - элемент справочника ДоговораКонтрагентов.
//
// Возвращаемое значение:
//   Результат - Булево - признак использования универсального корректировочного документа.
//
Функция ИспользованиеУниверсальногоКорректировочногоДокумента(Организация, Контрагент, ДоговорКонтрагента = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = Ложь;
	Если ЗначениеЗаполнено(Контрагент) И ЗначениеЗаполнено(Организация) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	НастройкаЭДО.ИспользоватьУКД КАК ИспользоватьУКД,
		|	ВЫБОР
		|		КОГДА НастройкаЭДО.ДоговорКонтрагента = &ДоговорКонтрагента
		|			ТОГДА 0
		|		ИНАЧЕ 2
		|	КОНЕЦ + ВЫБОР
		|		КОГДА НастройкаЭДО.ИспользуетсяДляОтправки
		|			ТОГДА 0
		|		ИНАЧЕ 1
		|	КОНЕЦ КАК Порядок
		|ИЗ
		|	Справочник.СоглашенияОбИспользованииЭД КАК НастройкаЭДО
		|ГДЕ
		|	НастройкаЭДО.Контрагент = &Контрагент
		|	И НастройкаЭДО.Организация = &Организация
		|	И НЕ НастройкаЭДО.ПометкаУдаления
		|	И НастройкаЭДО.СтатусПодключения = ЗНАЧЕНИЕ(Перечисление.СтатусыУчастниковОбменаЭД.Присоединен)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Порядок";
		
		Запрос.УстановитьПараметр("Контрагент",         Контрагент);
		Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорКонтрагента);
		Запрос.УстановитьПараметр("Организация",        Организация);
		
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			
			Результат = Выборка.ИспользоватьУКД;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Процедура ОбновитьПиктограммуПодменюЭДО(ПараметрыЭДО)
	
	Форма = ПараметрыЭДО.Форма;
	ПодменюЭДО = ПараметрыЭДО.ПодменюЭДО;
	
	Если ПодменюЭДО = Неопределено Тогда
		Если ТипЗнч(Форма) = Тип("УправляемаяФорма") Тогда
		Элементы = Форма.Элементы;
		ПодменюЭДО = ЭлектронныеДокументыКлиентСервер.ПодменюЭДО(Элементы);
		КонецЕсли;
	КонецЕсли;
	
	Если ПодменюЭДО = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КартинкаЭДО = БиблиотекаКартинок.ЭмблемаСервиса1СЭДО;
	Если ЭлектронныеДокументыСлужебныйВызовСервера.ЕстьСобытияЭДО() Тогда
		КартинкаЭДО = БиблиотекаКартинок.ВосклицательныйЗнакКрасный;
	КонецЕсли;
	
	Если ТипЗнч(ПодменюЭДО) = Тип("Массив") Тогда
		Для Каждого ЭлементМассива Из ПодменюЭДО Цикл
			ЭлектронныеДокументыКлиентСервер.ОбновитьПодменюЭДО(ЭлементМассива, КартинкаЭДО);
		КонецЦикла;
	Иначе
		ЭлектронныеДокументыКлиентСервер.ОбновитьПодменюЭДО(ПодменюЭДО, КартинкаЭДО);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСостояниеЭДО(ПараметрыЭДО)
	
	ДекорацияСостояниеЭДО = ПараметрыЭДО.ДекорацияСостояниеЭДО;
	ДокументСсылка = ПараметрыЭДО.ДокументСсылка;
	
	ЭлектронныеДокументыКлиентСервер.ЗаполнитьСостояниеЭДО(ДокументСсылка, ДекорацияСостояниеЭДО);
	
КонецПроцедуры

 // Процедура используется для формирования дерева доп.данных.
// Данные из полученной структуры, рекурсивно добавляет в дерево доп.данных.
//
// Параметры:
//  СтрокаДереваДопДанных - Строка дерева значений - строка дерева, в которую добавляются данные.
//  СтруктураДанных - Структура - структура с добавляемыми в дерево данными. Элементами структуры могут быть: данные с
//    простым типом, массивы значений, вложенные структуры данных.
//  ДоступноСимволов - Число - количество символов, доступных для размещения данных внутри основного файла ЭД.
//  ЮридическиЗначимый - Булево - Истина - пометка данных, которые в последствии из дерева доп.данных надо будет
//    разместить в основном файле ЭД. Ложь - данные будут помещены в файл доп.данных.
//  ЭлементТЧ - Булево - данные принадлежат строке табличной части документа ИБ.
//  НомерСтроки - Строка - номер строки табличной части документа ИБ.
//
Процедура ДобавитьДанныеРекурсивно(СтрокаДереваДопДанных,
								   СтруктураДанных,
								   ДоступноСимволов,
								   ЮридическиЗначимый,
								   ЭлементТЧ,
								   НомерСтроки)
	
	Для Каждого Элемент Из СтруктураДанных Цикл
		Если ЗначениеЗаполнено(Элемент.Значение) Тогда
			Если ТипЗнч(Элемент.Значение) = Тип("Структура") Тогда
				СтОтбора = Новый Структура("ЗначениеРеквизита, ТЧ", Элемент.Ключ, ЭлементТЧ);
				СтрокиДерева = СтрокаДереваДопДанных.Строки.НайтиСтроки(СтОтбора, Истина);
				Если СтрокиДерева.Количество() = 0 Тогда
					СтрокаДерева = СтрокаДереваДопДанных.Строки.Добавить();
					СтрокаДерева.ИмяРеквизита = "Набор";
					СтрокаДерева.ЗначениеРеквизита = Элемент.Ключ;
					СтрокаДерева.ТЧ = ЭлементТЧ;
					СтрокаДерева.ЮридическиЗначимый = ЮридическиЗначимый;
				Иначе
					СтрокаДерева = СтрокиДерева[0];
				КонецЕсли;
				ДобавитьДанныеРекурсивно(СтрокаДерева, Элемент.Значение, ДоступноСимволов, ЮридическиЗначимый, ЭлементТЧ, НомерСтроки);
			ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("ТаблицаЗначений") И Элемент.Значение.Количество() > 0 Тогда
				СтОтбора = Новый Структура("ЗначениеРеквизита, ТЧ", Элемент.Ключ, Истина);
				СтрокиДерева = СтрокаДереваДопДанных.Строки.НайтиСтроки(СтОтбора, Истина);
				Если СтрокиДерева.Количество() = 0 Тогда
					СтрокаДерева = СтрокаДереваДопДанных.Строки.Добавить();
					СтрокаДерева.ИмяРеквизита = "Список";
					СтрокаДерева.ЗначениеРеквизита = Элемент.Ключ;
					СтрокаДерева.ТЧ = Истина;
					
					ВозможноРазмещение = ВозможноРазмещениеВОсновномФайле("Список", Элемент.Ключ, ДоступноСимволов);
					Если ЮридическиЗначимый И Не ВозможноРазмещение Тогда
						ЮридическиЗначимый = Ложь;
					КонецЕсли;
					СтрокаДерева.ЮридическиЗначимый = ЮридическиЗначимый;

				Иначе
					СтрокаДерева = СтрокиДерева[0];
				КонецЕсли;
				ТЗ = Элемент.Значение;
				ПоляСтруктурыТЗ = "";
				Для Каждого КолонкаТЗ Из ТЗ.Колонки Цикл
					ПоляСтруктурыТЗ = ПоляСтруктурыТЗ + ?(ЗначениеЗаполнено(ПоляСтруктурыТЗ), ", ", "") + КолонкаТЗ.Имя;
				КонецЦикла;
				
				ЮридическийДо = ЮридическиЗначимый;
				
				Для Каждого СтрокаТЗ Из ТЗ Цикл
					СтрокаДереваНпп = СтрокаДерева.Строки.Добавить();
					СтрокаДереваНпп.ИмяРеквизита = "Нпп";
					СтрокаДереваНпп.ТЧ = Истина;
					
					Для Каждого КолонкаТЗ Из ТЗ.Колонки Цикл
						ВозможноРазмещение = ВозможноРазмещениеВОсновномФайле(КолонкаТЗ.Имя, "", ДоступноСимволов);
					КонецЦикла;

					ВозможноРазмещение = ВозможноРазмещениеВОсновномФайле("Нпп", "", ДоступноСимволов);
					Если ЮридическиЗначимый И Не ВозможноРазмещение Тогда
						ЮридическиЗначимый = Ложь;
					КонецЕсли;
					СтрокаДереваНпп.ЮридическиЗначимый = ЮридическиЗначимый;
					
					СтрокаДереваНпп.ЗначениеРеквизита = Строка(ТЗ.Индекс(СтрокаТЗ));
					СтруктураДанныхТЗ = Новый Структура(ПоляСтруктурыТЗ);
					ЗаполнитьЗначенияСвойств(СтруктураДанныхТЗ, СтрокаТЗ);
					ДобавитьДанныеРекурсивно(СтрокаДереваНпп, СтруктураДанныхТЗ, ДоступноСимволов, ЮридическиЗначимый, ЭлементТЧ, ТЗ.Индекс(СтрокаТЗ));
				КонецЦикла;
				
				Если Не ЮридическийДо = ЮридическиЗначимый Тогда
					СтрокаДерева.ЮридическиЗначимый = ЮридическиЗначимый;
					ОбновитьСтрокиДерева(СтрокаДерева,ЮридическиЗначимый);
				КонецЕсли;
				
			Иначе
				НоваяСтрока = СтрокаДереваДопДанных.Строки.Добавить();
				ВозможноРазмещениеВОсновномФайле = ВозможноРазмещениеВОсновномФайле(Элемент.Ключ,
																					Элемент.Значение,
																					ДоступноСимволов);
				Если ЮридическиЗначимый И НЕ ВозможноРазмещениеВОсновномФайле Тогда
					ЮридическиЗначимый = Ложь;
				КонецЕсли;
				НоваяСтрока.ЮридическиЗначимый = ЮридическиЗначимый;
				Если ТипЗнч(Элемент.Значение) = Тип("Массив") Тогда
					НоваяСтрока.ИмяРеквизита = "Массив";
					НоваяСтрока.ЗначениеРеквизита = Элемент.Ключ;
					НоваяСтрока.ТЧ = ЭлементТЧ;
					Для Каждого Значение Из Элемент.Значение Цикл
						СтрокаЗн = НоваяСтрока.Строки.Добавить();
						СтрокаЗн.ИмяРеквизита = "Эл" + Элемент.Значение.Найти(Значение);
						СтрокаЗн.ТЧ = ЭлементТЧ;
						СтрокаЗн.ЮридическиЗначимый = НоваяСтрока.ЮридическиЗначимый;
						Если ТипЗнч(Значение) = Тип("Структура") Тогда
							СтрокаЗн.ЗначениеРеквизита = "Структура";
							ДобавитьДанныеРекурсивно(СтрокаЗн, Значение, ДоступноСимволов, ЮридическиЗначимый, ЭлементТЧ, НомерСтроки);
						Иначе
							
							СтрокаЗн.ЗначениеРеквизита = Значение;
						КонецЕсли
					КонецЦикла;
				Иначе
					НоваяСтрока.ИмяРеквизита = Элемент.Ключ;
					НоваяСтрока.ЗначениеРеквизита = Элемент.Значение;
					НоваяСтрока.ТЧ = ЭлементТЧ;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьСтрокиДерева(СтрокаДерева, ЮридическиЗначимый);
	
	Для Каждого ТекСтрока Из СтрокаДерева.Строки Цикл
		
		ТекСтрока.ЮридическиЗначимый = ЮридическиЗначимый;
		Если ТекСтрока.Строки.Количество()> 0 Тогда
			ОбновитьСтрокиДерева(ТекСтрока, ЮридическиЗначимый);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// В функции выполняется проверка: длина строки, полученной после преобразования данных из структуры (с учетом служебных
// символов), не должна превышать количества доступных символов.
//
// Параметры:
//  СтруктураДанных - Структура - заполняемая структура.
//  Ключ - Строка - ключ добавляемого элемента.
//  Значение - Структура, примитивный тип или массив (элементы массива имеют примитивный тип) - значение добавляемого элемента.
//  ДоступноСимволов - Число - количество доступных символов результирующей строки.
//
// Возвращаемое значение:
//  Булево - Истина - элемент добавлен в структуру, Ложь - элемент не добавлен.
//
Функция ВозможноРазмещениеВОсновномФайле(Ключ, Значение, ДоступноСимволов)
	
	РазмещениеВозможно = Ложь;
	
	СлужебныеСимволы = 0;
	ДлинаСтрЗначения = 0;
	
	// Числа 41 и 31 обозначают количество служебных символов и рассчитываются следующим образом:
	// 1) если в ДеревоЗначений добавляется строка, которая будет иметь подчиненные строки, то данная строка в xml будет
	// выглядеть как элемент, имеющий вложенные (подчиненные) элементы, поэтому количество служебных символов = 41
	// (без учета длинны имени и значения самого реквизита), расчет по формуле:
	// СтрДлина("<Реквизит Имя="""" Значение=""""></Реквизит>") + 1;
	// 2) если в ДеревоЗначений добавляется строка без подчиненных строк, то количество служебных символов = 31
	// (без учета длинны имени и значения самого реквизита), расчет по формуле:
	// СтрДлина("<Реквизит Имя="""" Значение=""""/>") + 1;
	
	Если ТипЗнч(Значение) = Тип("Массив") Тогда
		Для Каждого Элемент Из Значение Цикл
			СлужебныеСимволы = СлужебныеСимволы + СтрДлина("Эл" + Значение.Найти(Элемент)) + СтрДлина(Элемент) + 31;
		КонецЦикла;
		
		СлужебныеСимволы = СлужебныеСимволы + СтрДлина("Массив") + СтрДлина(Ключ) + 41;
	ИначеЕсли ТипЗнч(Значение) = Тип("Структура") Тогда
		Для Каждого Элемент Из Значение Цикл
			РазмещениеВозможно = ВозможноРазмещениеВОсновномФайле(Элемент.Ключ, Элемент.Значение, ДоступноСимволов);
			Если НЕ РазмещениеВозможно Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЦикла;
		
		СлужебныеСимволы = СтрДлина("Набор") + СтрДлина(Ключ) + 41;
	Иначе // простой тип.
		СлужебныеСимволы = СтрДлина(Ключ) + СтрДлина(Значение) + 31;
	КонецЕсли;
	
	Если ДоступноСимволов >= СлужебныеСимволы Тогда
		ДоступноСимволов = ДоступноСимволов - СлужебныеСимволы;
		РазмещениеВозможно = Истина;
	КонецЕсли;
	
	Возврат РазмещениеВозможно;
	
КонецФункции

Процедура ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаОбъекта, Текст, ИмяПараметра)
	
	ЗначениеПараметра = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
																									СтрокаОбъекта,
																									ИмяПараметра);
	Если ЗначениеЗаполнено(ЗначениеПараметра) Тогда
		Текст.ДобавитьСтроку(ИмяПараметра + "=" + СтрЗаменить(ЗначениеПараметра, Символы.ПС, ""));
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьДанныеЭД(МассивФайловЭД, ЭД, СвойстваДокумента, СтрокаУИД, ТипФайла, УникальныйИдентификатор)
	
	ДанныеФайла = ЭлектронныеДокументыСлужебный.ПолучитьДанныеФайла(ЭД, УникальныйИдентификатор);
	
	СтруктураПараметровЭД = Новый Структура;
	СтруктураПараметровЭД.Вставить("ТипФайла", ТипФайла);
	СтруктураПараметровЭД.Вставить("ИмяФайла", ДанныеФайла.ИмяФайла);
	СтруктураПараметровЭД.Вставить("КНД", ЭлектронныеДокументыПовтИсп.КНДпоВидуЭД(СвойстваДокумента));
	СтруктураПараметровЭД.Вставить("АдресВременногоХранилища", ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
	
	МассивФайловЭД.Добавить(СтруктураПараметровЭД);
	
	МассивСтруктурПодписей = ЭлектроннаяЦифроваяПодпись.ПолучитьВсеПодписи(ЭД, УникальныйИдентификатор);
	
	Если ТипЗнч(МассивСтруктурПодписей) = Тип("Массив") И МассивСтруктурПодписей.Количество() > 0 Тогда
		Для Каждого СтруктураПодписи Из МассивСтруктурПодписей Цикл
			ИмяФайлаПодписи = СтруктураПодписи.ИмяФайлаПодписи;
			Если НЕ ЗначениеЗаполнено(ИмяФайлаПодписи) Тогда
				ИмяФайлаПодписи = ДанныеФайла.Наименование + ".p7s";
			КонецЕсли;
			
			СтруктураПараметровЭД = Новый Структура;
			СтруктураПараметровЭД.Вставить("ТипФайла", ?(ТипФайла = "ФайлВыгрузки", "ЭЦП", "ЭЦППодтверждения"));
			СтруктураПараметровЭД.Вставить("ИмяФайла", ИмяФайлаПодписи);
			СтруктураПараметровЭД.Вставить("КНД", "");
			СтруктураПараметровЭД.Вставить("АдресВременногоХранилища", СтруктураПодписи.АдресПодписи);
			
			МассивФайловЭД.Добавить(СтруктураПараметровЭД);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры
