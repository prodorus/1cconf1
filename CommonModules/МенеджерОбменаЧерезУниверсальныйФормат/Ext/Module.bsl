// Конвертация УПП 1.3 от 13.09.2018 12:59:11
//  ПроцедурыКонвертации
Процедура ПередКонвертацией(КомпонентыОбмена) Экспорт
	Если КомпонентыОбмена.НаправлениеОбмена = "Отправка" Тогда
		ДатаОстатков = Неопределено;
		Если КомпонентыОбмена.ПараметрыКонвертации.Свойство("ДатаОстатков", ДатаОстатков)
			И ТипЗнч(ДатаОстатков) = Тип("Дата") Тогда
			КомпонентыОбмена.ПараметрыКонвертации.Вставить("ДатаНачалаПериодаВыгрузкиДокументов", НачалоДня(КонецДня(ДатаОстатков) + 1));
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ПослеКонвертации(КомпонентыОбмена) Экспорт
	
КонецПроцедуры

Процедура ПередОтложеннымЗаполнением(КомпонентыОбмена) Экспорт
	
КонецПроцедуры

// Возвращает версию формата менеджера обмена.
// Возвращаемое значение:
//  Число - номер версии.
Функция ВерсияФорматаМенеджераОбмена() Экспорт
    Возврат "2";
КонецФункции

//  ПОД
// Заполняет таблицу правил обработки данных.
//
// Параметры:
//  НаправлениеОбмена - строка ("Отправка" либо "Получение").
//  ПравилаОбработкиДанных - таблица значений, в которую добавляются правила. 
Процедура ЗаполнитьПравилаОбработкиДанных(НаправлениеОбмена, ПравилаОбработкиДанных) Экспорт
	Если НаправлениеОбмена = "Отправка" Тогда
		Если ПравилаОбработкиДанных.Колонки.Найти("ОчисткаДанных") = Неопределено Тогда
			ПравилаОбработкиДанных.Колонки.Добавить("ОчисткаДанных");
		КонецЕсли;
		ДобавитьПОД_Документ_АвансовыйОтчет_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_АккрПеред_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_АккрПолуч_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ВозвратСырьяОтПереработчика_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ВозвратТоваровОтПокупателя_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ВозвратТоваровПоставщику_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ВозвратТоваровПоставщикуИзНТТ_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ВыпускПродукции_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ГТДИмпорт_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ИнкассоПеред_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ИнкассоПолуч_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_КомплектацияНоменклатуры_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_КорректировкаДолга_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_КорректировкаПоступленияТоваров_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_КорректировкаРеализацииТоваров_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОперацияПоПлатежнойКарте_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОприходованиеТоваров_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОтчетДавальцу_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОтчетКомиссионера_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОтчетКомитенту_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОтчетОРозничныхПродажах_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОтчетПереработчика_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОтчетПроизводстваЗаСмену_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПередачаТоваров_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПеремещениеТоваров_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПлатОрдерПоступление_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПлатОрдерСписание_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПлатПорВх_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПлатПорИсх_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПлатТребВыст_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПлТребПолуч_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПоступлениеДопРасходов_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПоступлениеОтПереработчика_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПоступлениеТоваровУслуг_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПоступлениеТоваровУслугВНТТ_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПриходныйКассовыйОрдер_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_РасходныйКассовыйОрдер_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_РеализацияОтгруженныхТоваров_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_РеализацияТоваровУслуг_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СписаниеТоваров_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СчетФактураВыданный_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СчетФактураПолученный_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ТребованиеНакладная_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_УстановкаЦенНоменклатуры_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Банки_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_БанковскиеСчета_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Валюты_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Договоры_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ЕдиницыИзмерения_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_КЕИ_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Контрагенты_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Номенклатура_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Организации_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Подразделения_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Пользователи_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Склады_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_СпецификацииНоменклатуры_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_СтатьиДДС_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_СтатьиЗатрат_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_СтраныМира_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ТипыЦенНоменклатуры_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ФизическиеЛица_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ХарактеристикиНоменклатуры_Отправка(ПравилаОбработкиДанных);
	ИначеЕсли НаправлениеОбмена = "Получение" Тогда
		ДобавитьПОД_Документ_АвансовыйОтчет_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ВозвратТоваровОтПокупателя_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ВозвратТоваровПоставщику_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ВыпускПродукции_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ГТДИмпорт_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_КорректировкаДолга_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_КорректировкаПоступленияТоваров_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_КорректировкаРеализацииТоваров_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОперацияПоПлатежнойКарте_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОприходованиеТоваров_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОтчетКомиссионера_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОтчетКомитенту_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОтчетОРозничныхПродажах_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПБДСПоПлатежнымКартам_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПБДСПрочееПоступление_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПБДСПрочиеДоходы_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПБДСРасчетыСКонтрагентами_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПередачаМатериаловВПроизводство_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПеремещениеТоваров_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПКОПрочееПоступление_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПКОРасчетыСКонтрагентами_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПКОРасчетыССотрудниками_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПКОРозничнаяВыручка_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПоступлениеТоваровУслуг_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_РеализацияТоваровУслуг_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_РКОВыплатаЗарплаты_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_РКОНаБанковскийСчет_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_РКОПрочаяВыдача_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_РКОРасчетыСКонтрагентами_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_РКОРасчетыССотрудниками_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СБДСПереводНаДругойСчет_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СБДСПеречислениеЗаработнойПлаты_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СБДСПлатежиВБюджет_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СБДСПрочееСписание_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СБДСПрочиеРасходы_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СБДСРасчетыСКонтрагентами_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СБДСРасчетыССотрудниками_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СборкаТоваров_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СписаниеТоваров_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СчетФактураВыданный_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СчетФактураПолученный_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_УстановкаЦенНоменклатуры_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Банки_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_БанковскиеСчета_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Валюты_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Договоры_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Контрагенты_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_КонтрагентыГруппа_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Номенклатура_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_НоменклатураГруппа_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Организации_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Подразделения_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Пользователи_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Склады_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_СкладыГруппа_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_СпецификацииНоменклатуры_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_СтатьиДДС_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_СтатьиДДСГруппа_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_СтатьиЗатрат_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_СтраныМира_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ТипыЦен_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ФизическиеЛица_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ФизическиеЛицаГруппа_Получение(ПравилаОбработкиДанных);
	КонецЕсли;
КонецПроцедуры

//  Отправка
//  Документ_АвансовыйОтчет_Отправка
Процедура ДобавитьПОД_Документ_АвансовыйОтчет_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_АвансовыйОтчет_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.АвансовыйОтчет;
	ПравилоОбработки.ВыборкаДанных           = "ПОД_Документ_АвансовыйОтчет_Отправка_ВыборкаДанных";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_АвансовыйОтчет_Отправка");
КонецПроцедуры

Функция ПОД_Документ_АвансовыйОтчет_Отправка_ВыборкаДанных(КомпонентыОбмена)
	МассивВыборки = Новый Массив;
		
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	Док.Ссылка
		|ИЗ
		|	Документ.АвансовыйОтчет КАК Док
		|ГДЕ
		|	Док.Проведен
		|	И Док.Дата >= &ДатаНачала 
		|	И Док.Дата <= &ДатаОкончания";
	Запрос.УстановитьПараметр("ДатаНачала", КомпонентыОбмена.ПараметрыКонвертации.ДатаНачалаПериодаВыгрузкиДокументов);
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(КомпонентыОбмена.ПараметрыКонвертации.ДатаОкончанияПериодаВыгрузкиДокументов));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		МассивВыборки.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат МассивВыборки;
КонецФункции
//  Документ_АккрПеред_Отправка
Процедура ДобавитьПОД_Документ_АккрПеред_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_АккрПеред_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.АккредитивПереданный;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_АккрПеред_Отправка_ПриОбработке";
	ПравилоОбработки.ВыборкаДанных           = "ПОД_Документ_АккрПеред_Отправка_ВыборкаДанных";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_АккрПередПрочее_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_АккрПередРасчетыСКонтрагентами_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_АккрПеред_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Документ_АккрПередРасчетыСКонтрагентами_Отправка = Ложь;
	ИспользованиеПКО.Документ_АккрПередПрочее_Отправка = Ложь;
	Если ЭтоСБДСРасчетыСКонтрагентами(ДанныеИБ) Тогда
		ИспользованиеПКО.Документ_АккрПередРасчетыСКонтрагентами_Отправка = Истина;
	ИначеЕсли ЭтоСБДСПрочее(ДанныеИБ) Тогда
		ИспользованиеПКО.Документ_АккрПередПрочее_Отправка = Истина;
	КонецЕсли;
КонецПроцедуры

Функция ПОД_Документ_АккрПеред_Отправка_ВыборкаДанных(КомпонентыОбмена)
	МассивВыборки = Новый Массив;
		
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	Док.Ссылка
		|ИЗ
		|	Документ.АккредитивПереданный КАК Док
		|ГДЕ
		|	Док.Проведен
		|	И Док.Оплачено
		|	И Док.Дата >= &ДатаНачала 
		|	И Док.Дата <= &ДатаОкончания";
	Запрос.УстановитьПараметр("ДатаНачала", КомпонентыОбмена.ПараметрыКонвертации.ДатаНачалаПериодаВыгрузкиДокументов);
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(КомпонентыОбмена.ПараметрыКонвертации.ДатаОкончанияПериодаВыгрузкиДокументов));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		МассивВыборки.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат МассивВыборки;
КонецФункции
//  Документ_АккрПолуч_Отправка
Процедура ДобавитьПОД_Документ_АккрПолуч_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_АккрПолуч_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.АккредитивПолученный;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_АккрПолуч_Отправка_ПриОбработке";
	ПравилоОбработки.ВыборкаДанных           = "ПОД_Документ_АккрПолуч_Отправка_ВыборкаДанных";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_АккрПолучПрочее_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_АккрПолучРасчетыСКонтрагентами_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_АккрПолуч_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Документ_АккрПолучРасчетыСКонтрагентами_Отправка = Ложь;
	ИспользованиеПКО.Документ_АккрПолучПрочее_Отправка = Ложь;
	
	Если ЭтоПБДСРасчетыСКонтрагентами(ДанныеИБ) Тогда
		ИспользованиеПКО.Документ_АккрПолучРасчетыСКонтрагентами_Отправка = Истина;
	ИначеЕсли ЭтоПБДСПрочее(ДанныеИБ) Тогда
		ИспользованиеПКО.Документ_АккрПолучПрочее_Отправка = Истина;
	КонецЕсли;
КонецПроцедуры

Функция ПОД_Документ_АккрПолуч_Отправка_ВыборкаДанных(КомпонентыОбмена)
	МассивВыборки = Новый Массив;
		
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	Док.Ссылка
		|ИЗ
		|	Документ.АккредитивПолученный КАК Док
		|ГДЕ
		|	Док.Проведен
		|	И Док.Оплачено
		|	И Док.Дата >= &ДатаНачала 
		|	И Док.Дата <= &ДатаОкончания";
	Запрос.УстановитьПараметр("ДатаНачала", КомпонентыОбмена.ПараметрыКонвертации.ДатаНачалаПериодаВыгрузкиДокументов);
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(КомпонентыОбмена.ПараметрыКонвертации.ДатаОкончанияПериодаВыгрузкиДокументов));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		МассивВыборки.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат МассивВыборки;
КонецФункции
//  Документ_ВозвратСырьяОтПереработчика_Отправка
Процедура ДобавитьПОД_Документ_ВозвратСырьяОтПереработчика_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ВозвратСырьяОтПереработчика_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ВозвратПереданныхТоваров;
	ПравилоОбработки.ВыборкаДанных           = "ПОД_Документ_ВозвратСырьяОтПереработчика_Отправка_ВыборкаДанных";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ВозвратСырьяОтПереработчика_Отправка");
КонецПроцедуры

Функция ПОД_Документ_ВозвратСырьяОтПереработчика_Отправка_ВыборкаДанных(КомпонентыОбмена)
	МассивВыборки = Новый Массив;
		
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	Док.Ссылка
		|ИЗ
		|	Документ.ВозвратПереданныхТоваров КАК Док
		|ГДЕ
		|	Док.Проведен
		|	И Док.Дата >= &ДатаНачала 
		|	И Док.Дата <= &ДатаОкончания
		|	И Док.ВидОперации <> ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВозвратТоваров.ОтЗаказчика)";
	Запрос.УстановитьПараметр("ДатаНачала", КомпонентыОбмена.ПараметрыКонвертации.ДатаНачалаПериодаВыгрузкиДокументов);
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(КомпонентыОбмена.ПараметрыКонвертации.ДатаОкончанияПериодаВыгрузкиДокументов));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		МассивВыборки.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат МассивВыборки;
КонецФункции
//  Документ_ВозвратТоваровОтПокупателя_Отправка
Процедура ДобавитьПОД_Документ_ВозвратТоваровОтПокупателя_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ВозвратТоваровОтПокупателя_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ВозвратТоваровОтПокупателя;
	ПравилоОбработки.ВыборкаДанных           = "ПОД_Документ_ВозвратТоваровОтПокупателя_Отправка_ВыборкаДанных";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ВозвратТоваровОтПокупателя_Отправка");
КонецПроцедуры

Функция ПОД_Документ_ВозвратТоваровОтПокупателя_Отправка_ВыборкаДанных(КомпонентыОбмена)
	МассивВыборки = Новый Массив;
		
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	Док.Ссылка
		|ИЗ
		|	Документ.ВозвратТоваровОтПокупателя КАК Док
		|ГДЕ
		|	Док.Проведен
		|	И Док.Дата >= &ДатаНачала 
		|	И Док.Дата <= &ДатаОкончания
		|	И Док.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВозвратТоваровОтПокупателя.ПродажаКомиссия)";
	Запрос.УстановитьПараметр("ДатаНачала", КомпонентыОбмена.ПараметрыКонвертации.ДатаНачалаПериодаВыгрузкиДокументов);
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(КомпонентыОбмена.ПараметрыКонвертации.ДатаОкончанияПериодаВыгрузкиДокументов));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		МассивВыборки.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат МассивВыборки;
КонецФункции
//  Документ_ВозвратТоваровПоставщику_Отправка
Процедура ДобавитьПОД_Документ_ВозвратТоваровПоставщику_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ВозвратТоваровПоставщику_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ВозвратТоваровПоставщику;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ВозвратТоваровПоставщику_Отправка_ПриОбработке";
	ПравилоОбработки.ВыборкаДанных           = "ПОД_Документ_ВозвратТоваровПоставщику_Отправка_ВыборкаДанных";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ВозвратТоваровПоставщику_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ВозвратСырьяДавальцу_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_ВозвратТоваровПоставщику_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Документ_ВозвратТоваровПоставщику_Отправка = Ложь;
	ИспользованиеПКО.Документ_ВозвратСырьяДавальцу_Отправка = Ложь;
	
	Если ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.ИзПереработки Тогда
		ИспользованиеПКО.Документ_ВозвратСырьяДавальцу_Отправка = Истина;
	Иначе
		ИспользованиеПКО.Документ_ВозвратТоваровПоставщику_Отправка = Истина;
	КонецЕсли;
КонецПроцедуры

Функция ПОД_Документ_ВозвратТоваровПоставщику_Отправка_ВыборкаДанных(КомпонентыОбмена)
	МассивВыборки = Новый Массив;
		
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	Док.Ссылка
		|ИЗ
		|	Документ.ВозвратТоваровПоставщику КАК Док
		|ГДЕ
		|	Док.Проведен
		|	И Док.Дата >= &ДатаНачала 
		|	И Док.Дата <= &ДатаОкончания
		|	И Док.ВидОперации <> ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВозвратТоваровПоставщику.Оборудование)";
	Запрос.УстановитьПараметр("ДатаНачала", КомпонентыОбмена.ПараметрыКонвертации.ДатаНачалаПериодаВыгрузкиДокументов);
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(КомпонентыОбмена.ПараметрыКонвертации.ДатаОкончанияПериодаВыгрузкиДокументов));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		МассивВыборки.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат МассивВыборки;
КонецФункции
//  Документ_ВозвратТоваровПоставщикуИзНТТ_Отправка
Процедура ДобавитьПОД_Документ_ВозвратТоваровПоставщикуИзНТТ_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ВозвратТоваровПоставщикуИзНТТ_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ВозвратТоваровПоставщикуИзНТТ;
	ПравилоОбработки.ВыборкаДанных           = "ПОД_Документ_ВозвратТоваровПоставщикуИзНТТ_Отправка_ВыборкаДанных";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ВозвратТоваровПоставщикуИзНТТ_Отправка");
КонецПроцедуры

Функция ПОД_Документ_ВозвратТоваровПоставщикуИзНТТ_Отправка_ВыборкаДанных(КомпонентыОбмена)
	МассивВыборки = Новый Массив;
		
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	Док.Ссылка
		|ИЗ
		|	Документ.ВозвратТоваровПоставщикуИзНТТ КАК Док
		|ГДЕ
		|	Док.Проведен
		|	И Док.Дата >= &ДатаНачала 
		|	И Док.Дата <= &ДатаОкончания";
	Запрос.УстановитьПараметр("ДатаНачала", КомпонентыОбмена.ПараметрыКонвертации.ДатаНачалаПериодаВыгрузкиДокументов);
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(КомпонентыОбмена.ПараметрыКонвертации.ДатаОкончанияПериодаВыгрузкиДокументов));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		МассивВыборки.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат МассивВыборки;
КонецФункции
//  Документ_ВыпускПродукции_Отправка
Процедура ДобавитьПОД_Документ_ВыпускПродукции_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ВыпускПродукции_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ВыпускПродукции;
	ПравилоОбработки.ВыборкаДанных           = "ПОД_Документ_ВыпускПродукции_Отправка_ВыборкаДанных";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ВыпускПродукции_Отправка");
КонецПроцедуры

Функция ПОД_Документ_ВыпускПродукции_Отправка_ВыборкаДанных(КомпонентыОбмена)
	МассивВыборки = Новый Массив;
		
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	Док.Ссылка
		|ИЗ
		|	Документ.ВыпускПродукции КАК Док
		|ГДЕ
		|	Док.Проведен
		|	И Док.Дата >= &ДатаНачала 
		|	И Док.Дата <= &ДатаОкончания";
	Запрос.УстановитьПараметр("ДатаНачала", КомпонентыОбмена.ПараметрыКонвертации.ДатаНачалаПериодаВыгрузкиДокументов);
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(КомпонентыОбмена.ПараметрыКонвертации.ДатаОкончанияПериодаВыгрузкиДокументов));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		МассивВыборки.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат МассивВыборки;
КонецФункции
//  Документ_ГТДИмпорт_Отправка
Процедура ДобавитьПОД_Документ_ГТДИмпорт_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ГТДИмпорт_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ГТДИмпорт;
	ПравилоОбработки.ВыборкаДанных           = "ПОД_Документ_ГТДИмпорт_Отправка_ВыборкаДанных";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ГТДИмпорт_Отправка");
КонецПроцедуры

Функция ПОД_Документ_ГТДИмпорт_Отправка_ВыборкаДанных(КомпонентыОбмена)
	МассивВыборки = Новый Массив;
		
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	Док.Ссылка
		|ИЗ
		|	Документ.ГТДИмпорт КАК Док
		|ГДЕ
		|	Док.Проведен
		|	И Док.Дата >= &ДатаНачала 
		|	И Док.Дата <= &ДатаОкончания";
	Запрос.УстановитьПараметр("ДатаНачала", КомпонентыОбмена.ПараметрыКонвертации.ДатаНачалаПериодаВыгрузкиДокументов);
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(КомпонентыОбмена.ПараметрыКонвертации.ДатаОкончанияПериодаВыгрузкиДокументов));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		МассивВыборки.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат МассивВыборки;
КонецФункции
//  Документ_ИнкассоПеред_Отправка
Процедура ДобавитьПОД_Документ_ИнкассоПеред_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ИнкассоПеред_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ИнкассовоеПоручениеПереданное;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ИнкассоПеред_Отправка_ПриОбработке";
	ПравилоОбработки.ВыборкаДанных           = "ПОД_Документ_ИнкассоПеред_Отправка_ВыборкаДанных";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ИнкассоПередПрочее_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ИнкассПередРасчетыСКонтрагентами_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_ИнкассоПеред_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Документ_ИнкассПередРасчетыСКонтрагентами_Отправка = Ложь;
	ИспользованиеПКО.Документ_ИнкассоПередПрочее_Отправка = Ложь;
	Если ЭтоПБДСРасчетыСКонтрагентами(ДанныеИБ) Тогда
		ИспользованиеПКО.Документ_ИнкассПередРасчетыСКонтрагентами_Отправка = Истина;
	ИначеЕсли ЭтоПБДСПрочее(ДанныеИБ) Тогда
		ИспользованиеПКО.Документ_ИнкассоПередПрочее_Отправка = Истина;
	КонецЕсли;
КонецПроцедуры

Функция ПОД_Документ_ИнкассоПеред_Отправка_ВыборкаДанных(КомпонентыОбмена)
	МассивВыборки = Новый Массив;
		
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	Док.Ссылка
		|ИЗ
		|	Документ.ИнкассовоеПоручениеПереданное КАК Док
		|ГДЕ
		|	Док.Проведен
		|	И Док.Оплачено
		|	И Док.Дата >= &ДатаНачала 
		|	И Док.Дата <= &ДатаОкончания";
	Запрос.УстановитьПараметр("ДатаНачала", КомпонентыОбмена.ПараметрыКонвертации.ДатаНачалаПериодаВыгрузкиДокументов);
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(КомпонентыОбмена.ПараметрыКонвертации.ДатаОкончанияПериодаВыгрузкиДокументов));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		МассивВыборки.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат МассивВыборки;
КонецФункции
//  Документ_ИнкассоПолуч_Отправка
Процедура ДобавитьПОД_Документ_ИнкассоПолуч_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ИнкассоПолуч_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ИнкассовоеПоручениеПолученное;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ИнкассоПолуч_Отправка_ПриОбработке";
	ПравилоОбработки.ВыборкаДанных           = "ПОД_Документ_ИнкассоПолуч_Отправка_ВыборкаДанных";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ИнкассоПолучПрочее_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ИнкассПолучРасчетыСКонтрагентами_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_ИнкассоПолуч_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Документ_ИнкассПолучРасчетыСКонтрагентами_Отправка = Ложь;
	ИспользованиеПКО.Документ_ИнкассоПолучПрочее_Отправка = Ложь;
	
	Если ЭтоСБДСРасчетыСКонтрагентами(ДанныеИБ) Тогда
		ИспользованиеПКО.Документ_ИнкассПолучРасчетыСКонтрагентами_Отправка = Истина;
	ИначеЕсли ЭтоСБДСПрочее(ДанныеИБ) Тогда
		ИспользованиеПКО.Документ_ИнкассоПолучПрочее_Отправка = Истина;
	КонецЕсли;
КонецПроцедуры

Функция ПОД_Документ_ИнкассоПолуч_Отправка_ВыборкаДанных(КомпонентыОбмена)
	МассивВыборки = Новый Массив;
		
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	Док.Ссылка
		|ИЗ
		|	Документ.ИнкассовоеПоручениеПолученное КАК Док
		|ГДЕ
		|	Док.Проведен
		|	И Док.Оплачено
		|	И Док.Дата >= &ДатаНачала 
		|	И Док.Дата <= &ДатаОкончания";
	Запрос.УстановитьПараметр("ДатаНачала", КомпонентыОбмена.ПараметрыКонвертации.ДатаНачалаПериодаВыгрузкиДокументов);
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(КомпонентыОбмена.ПараметрыКонвертации.ДатаОкончанияПериодаВыгрузкиДокументов));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		МассивВыборки.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат МассивВыборки;
КонецФункции
//  Документ_КомплектацияНоменклатуры_Отправка
Процедура ДобавитьПОД_Документ_КомплектацияНоменклатуры_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_КомплектацияНоменклатуры_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.КомплектацияНоменклатуры;
	ПравилоОбработки.ВыборкаДанных           = "ПОД_Документ_КомплектацияНоменклатуры_Отправка_ВыборкаДанных";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_КомплектацияНоменклатуры_Отправка");
КонецПроцедуры

Функция ПОД_Документ_КомплектацияНоменклатуры_Отправка_ВыборкаДанных(КомпонентыОбмена)
	МассивВыборки = Новый Массив;
		
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	Док.Ссылка
		|ИЗ
		|	Документ.КомплектацияНоменклатуры КАК Док
		|ГДЕ
		|	Док.Проведен
		|	И Док.Дата >= &ДатаНачала 
		|	И Док.Дата <= &ДатаОкончания";
	Запрос.УстановитьПараметр("ДатаНачала", КомпонентыОбмена.ПараметрыКонвертации.ДатаНачалаПериодаВыгрузкиДокументов);
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(КомпонентыОбмена.ПараметрыКонвертации.ДатаОкончанияПериодаВыгрузкиДокументов));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		МассивВыборки.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат МассивВыборки;
КонецФункции
//  Документ_КорректировкаДолга_Отправка
Процедура ДобавитьПОД_Документ_КорректировкаДолга_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_КорректировкаДолга_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.КорректировкаДолга;
	ПравилоОбработки.ВыборкаДанных           = "ПОД_Документ_КорректировкаДолга_Отправка_ВыборкаДанных";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_КорректировкаДолга_Отправка");
КонецПроцедуры

Функция ПОД_Документ_КорректировкаДолга_Отправка_ВыборкаДанных(КомпонентыОбмена)
	МассивВыборки = Новый Массив;
		
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	Док.Ссылка
		|ИЗ
		|	Документ.ВозвратТоваровОтПокупателя КАК Док
		|ГДЕ
		|	Док.Проведен
		|	И Док.Дата >= &ДатаНачала 
		|	И Док.Дата <= &ДатаОкончания
		|	И Док.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВозвратТоваровОтПокупателя.ПродажаКомиссия)";
	Запрос.УстановитьПараметр("ДатаНачала", КомпонентыОбмена.ПараметрыКонвертации.ДатаНачалаПериодаВыгрузкиДокументов);
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(КомпонентыОбмена.ПараметрыКонвертации.ДатаОкончанияПериодаВыгрузкиДокументов));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		МассивВыборки.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат МассивВыборки;
КонецФункции
//  Документ_КорректировкаПоступленияТоваров_Отправка
Процедура ДобавитьПОД_Документ_КорректировкаПоступленияТоваров_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_КорректировкаПоступленияТоваров_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.КорректировкаПоступления;
	ПравилоОбработки.ВыборкаДанных           = "ПОД_Документ_КорректировкаПоступленияТоваров_Отправка_ВыборкаДанных";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_КорректировкаПоступленияТоваров_Отправка");
КонецПроцедуры

Функция ПОД_Документ_КорректировкаПоступленияТоваров_Отправка_ВыборкаДанных(КомпонентыОбмена)
	МассивВыборки = Новый Массив;
		
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	Док.Ссылка
		|ИЗ
		|	Документ.КорректировкаПоступления КАК Док
		|ГДЕ
		|	Док.Проведен
		|	И Док.Дата >= &ДатаНачала 
		|	И Док.Дата <= &ДатаОкончания";
	Запрос.УстановитьПараметр("ДатаНачала", КомпонентыОбмена.ПараметрыКонвертации.ДатаНачалаПериодаВыгрузкиДокументов);
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(КомпонентыОбмена.ПараметрыКонвертации.ДатаОкончанияПериодаВыгрузкиДокументов));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		МассивВыборки.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат МассивВыборки;
КонецФункции
//  Документ_КорректировкаРеализацииТоваров_Отправка
Процедура ДобавитьПОД_Документ_КорректировкаРеализацииТоваров_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_КорректировкаРеализацииТоваров_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.КорректировкаРеализации;
	ПравилоОбработки.ВыборкаДанных           = "ПОД_Документ_КорректировкаРеализацииТоваров_Отправка_ВыборкаДанных";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_КорректировкаРеализацииТоваров_Отправка");
КонецПроцедуры

Функция ПОД_Документ_КорректировкаРеализацииТоваров_Отправка_ВыборкаДанных(КомпонентыОбмена)
	МассивВыборки = Новый Массив;
		
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	Док.Ссылка
		|ИЗ
		|	Документ.КорректировкаРеализации КАК Док
		|ГДЕ
		|	Док.Проведен
		|	И Док.Дата >= &ДатаНачала 
		|	И Док.Дата <= &ДатаОкончания";
	Запрос.УстановитьПараметр("ДатаНачала", КомпонентыОбмена.ПараметрыКонвертации.ДатаНачалаПериодаВыгрузкиДокументов);
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(КомпонентыОбмена.ПараметрыКонвертации.ДатаОкончанияПериодаВыгрузкиДокументов));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		МассивВыборки.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат МассивВыборки;
КонецФункции
//  Документ_ОперацияПоПлатежнойКарте_Отправка
Процедура ДобавитьПОД_Документ_ОперацияПоПлатежнойКарте_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ОперацияПоПлатежнойКарте_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ОплатаОтПокупателяПлатежнойКартой;
	ПравилоОбработки.ВыборкаДанных           = "ПОД_Документ_ОперацияПоПлатежнойКарте_Отправка_ВыборкаДанных";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОперацияПоПлатежнойКарте_Отправка");
КонецПроцедуры

Функция ПОД_Документ_ОперацияПоПлатежнойКарте_Отправка_ВыборкаДанных(КомпонентыОбмена)
	МассивВыборки = Новый Массив;
		
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	Док.Ссылка
		|ИЗ
		|	Документ.ОплатаОтПокупателяПлатежнойКартой КАК Док
		|ГДЕ
		|	Док.Проведен
		|	И Док.Дата >= &ДатаНачала 
		|	И Док.Дата <= &ДатаОкончания";
	Запрос.УстановитьПараметр("ДатаНачала", КомпонентыОбмена.ПараметрыКонвертации.ДатаНачалаПериодаВыгрузкиДокументов);
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(КомпонентыОбмена.ПараметрыКонвертации.ДатаОкончанияПериодаВыгрузкиДокументов));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		МассивВыборки.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат МассивВыборки;
КонецФункции
//  Документ_ОприходованиеТоваров_Отправка
Процедура ДобавитьПОД_Документ_ОприходованиеТоваров_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ОприходованиеТоваров_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ОприходованиеТоваров;
	ПравилоОбработки.ВыборкаДанных           = "ПОД_Документ_ОприходованиеТоваров_Отправка_ВыборкаДанных";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОприходованиеТоваров_Отправка");
КонецПроцедуры

Функция ПОД_Документ_ОприходованиеТоваров_Отправка_ВыборкаДанных(КомпонентыОбмена)
	МассивВыборки = Новый Массив;
		
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	Док.Ссылка
		|ИЗ
		|	Документ.ОприходованиеТоваров КАК Док
		|ГДЕ
		|	Док.Проведен
		|	И Док.Дата >= &ДатаНачала 
		|	И Док.Дата <= &ДатаОкончания";
	Запрос.УстановитьПараметр("ДатаНачала", КомпонентыОбмена.ПараметрыКонвертации.ДатаНачалаПериодаВыгрузкиДокументов);
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(КомпонентыОбмена.ПараметрыКонвертации.ДатаОкончанияПериодаВыгрузкиДокументов));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		МассивВыборки.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат МассивВыборки;
КонецФункции
//  Документ_ОтчетДавальцу_Отправка
Процедура ДобавитьПОД_Документ_ОтчетДавальцу_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ОтчетДавальцу_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.РеализацияУслугПоПереработке;
	ПравилоОбработки.ВыборкаДанных           = "ПОД_Документ_ОтчетДавальцу_Отправка_ВыборкаДанных";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОтчетДавальцу_Отправка");
КонецПроцедуры

Функция ПОД_Документ_ОтчетДавальцу_Отправка_ВыборкаДанных(КомпонентыОбмена)
	МассивВыборки = Новый Массив;
		
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	Док.Ссылка
		|ИЗ
		|	Документ.РеализацияУслугПоПереработке КАК Док
		|ГДЕ
		|	Док.Проведен
		|	И Док.Дата >= &ДатаНачала 
		|	И Док.Дата <= &ДатаОкончания";
	Запрос.УстановитьПараметр("ДатаНачала", КомпонентыОбмена.ПараметрыКонвертации.ДатаНачалаПериодаВыгрузкиДокументов);
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(КомпонентыОбмена.ПараметрыКонвертации.ДатаОкончанияПериодаВыгрузкиДокументов));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		МассивВыборки.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат МассивВыборки;
КонецФункции
//  Документ_ОтчетКомиссионера_Отправка
Процедура ДобавитьПОД_Документ_ОтчетКомиссионера_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ОтчетКомиссионера_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ОтчетКомиссионераОПродажах;
	ПравилоОбработки.ВыборкаДанных           = "ПОД_Документ_ОтчетКомиссионера_Отправка_ВыборкаДанных";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОтчетКомиссионера_Отправка");
КонецПроцедуры

Функция ПОД_Документ_ОтчетКомиссионера_Отправка_ВыборкаДанных(КомпонентыОбмена)
	МассивВыборки = Новый Массив;
		
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	Док.Ссылка
		|ИЗ
		|	Документ.ОтчетКомиссионераОПродажах КАК Док
		|ГДЕ
		|	Док.Проведен
		|	И Док.Дата >= &ДатаНачала 
		|	И Док.Дата <= &ДатаОкончания";
	Запрос.УстановитьПараметр("ДатаНачала", КомпонентыОбмена.ПараметрыКонвертации.ДатаНачалаПериодаВыгрузкиДокументов);
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(КомпонентыОбмена.ПараметрыКонвертации.ДатаОкончанияПериодаВыгрузкиДокументов));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		МассивВыборки.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат МассивВыборки;
КонецФункции
//  Документ_ОтчетКомитенту_Отправка
Процедура ДобавитьПОД_Документ_ОтчетКомитенту_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ОтчетКомитенту_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ОтчетКомитентуОПродажах;
	ПравилоОбработки.ВыборкаДанных           = "ПОД_Документ_ОтчетКомитенту_Отправка_ВыборкаДанных";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОтчетКомитенту_Отправка");
КонецПроцедуры

Функция ПОД_Документ_ОтчетКомитенту_Отправка_ВыборкаДанных(КомпонентыОбмена)
	МассивВыборки = Новый Массив;
		
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	Док.Ссылка
		|ИЗ
		|	Документ.ОтчетКомитентуОПродажах КАК Док
		|ГДЕ
		|	Док.Проведен
		|	И Док.Дата >= &ДатаНачала 
		|	И Док.Дата <= &ДатаОкончания";
	Запрос.УстановитьПараметр("ДатаНачала", КомпонентыОбмена.ПараметрыКонвертации.ДатаНачалаПериодаВыгрузкиДокументов);
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(КомпонентыОбмена.ПараметрыКонвертации.ДатаОкончанияПериодаВыгрузкиДокументов));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		МассивВыборки.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат МассивВыборки;
КонецФункции
//  Документ_ОтчетОРозничныхПродажах_Отправка
Процедура ДобавитьПОД_Документ_ОтчетОРозничныхПродажах_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ОтчетОРозничныхПродажах_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ОтчетОРозничныхПродажах;
	ПравилоОбработки.ВыборкаДанных           = "ПОД_Документ_ОтчетОРозничныхПродажах_Отправка_ВыборкаДанных";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОтчетОРозничныхПродажах_Отправка");
КонецПроцедуры

Функция ПОД_Документ_ОтчетОРозничныхПродажах_Отправка_ВыборкаДанных(КомпонентыОбмена)
	МассивВыборки = Новый Массив;
		
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	Док.Ссылка
		|ИЗ
		|	Документ.ОтчетОРозничныхПродажах КАК Док
		|ГДЕ
		|	Док.Проведен
		|	И Док.Дата >= &ДатаНачала 
		|	И Док.Дата <= &ДатаОкончания";
	Запрос.УстановитьПараметр("ДатаНачала", КомпонентыОбмена.ПараметрыКонвертации.ДатаНачалаПериодаВыгрузкиДокументов);
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(КомпонентыОбмена.ПараметрыКонвертации.ДатаОкончанияПериодаВыгрузкиДокументов));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		МассивВыборки.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат МассивВыборки;
КонецФункции
//  Документ_ОтчетПереработчика_Отправка
Процедура ДобавитьПОД_Документ_ОтчетПереработчика_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ОтчетПереработчика_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ПолучениеУслугПоПереработке;
	ПравилоОбработки.ВыборкаДанных           = "ПОД_Документ_ОтчетПереработчика_Отправка_ВыборкаДанных";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОтчетПереработчика_Отправка");
КонецПроцедуры

Функция ПОД_Документ_ОтчетПереработчика_Отправка_ВыборкаДанных(КомпонентыОбмена)
	МассивВыборки = Новый Массив;
		
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	Док.Ссылка
		|ИЗ
		|	Документ.ПолучениеУслугПоПереработке КАК Док
		|ГДЕ
		|	Док.Проведен
		|	И Док.Дата >= &ДатаНачала 
		|	И Док.Дата <= &ДатаОкончания";
	Запрос.УстановитьПараметр("ДатаНачала", КомпонентыОбмена.ПараметрыКонвертации.ДатаНачалаПериодаВыгрузкиДокументов);
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(КомпонентыОбмена.ПараметрыКонвертации.ДатаОкончанияПериодаВыгрузкиДокументов));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		МассивВыборки.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат МассивВыборки;
КонецФункции
//  Документ_ОтчетПроизводстваЗаСмену_Отправка
Процедура ДобавитьПОД_Документ_ОтчетПроизводстваЗаСмену_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ОтчетПроизводстваЗаСмену_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ОтчетПроизводстваЗаСмену;
	ПравилоОбработки.ВыборкаДанных           = "ПОД_Документ_ОтчетПроизводстваЗаСмену_Отправка_ВыборкаДанных";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОтчетПроизводстваЗаСмену_Отправка");
КонецПроцедуры

Функция ПОД_Документ_ОтчетПроизводстваЗаСмену_Отправка_ВыборкаДанных(КомпонентыОбмена)
	МассивВыборки = Новый Массив;
		
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДокШапка.Ссылка
		|ИЗ
		|	Документ.ОтчетПроизводстваЗаСмену КАК ДокШапка
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	Документ.ОтчетПроизводстваЗаСмену.Продукция КАК ДокТовары
		|ПО ДокШапка.Ссылка = ДокТовары.Ссылка
		|ГДЕ
		|	ДокШапка.Проведен
		|	И ДокШапка.Дата >= &ДатаНачала 
		|	И ДокШапка.Дата <= &ДатаОкончания
		|	И ДокТовары.ВидВыпуска = ЗНАЧЕНИЕ(Перечисление.ВидыВыпуска.Выпуск)
		|	И ДокТовары.НаправлениеВыпуска = ЗНАЧЕНИЕ(Перечисление.НаправленияВыпуска.НаСклад)";
	Запрос.УстановитьПараметр("ДатаНачала", КомпонентыОбмена.ПараметрыКонвертации.ДатаНачалаПериодаВыгрузкиДокументов);
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(КомпонентыОбмена.ПараметрыКонвертации.ДатаОкончанияПериодаВыгрузкиДокументов));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		МассивВыборки.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат МассивВыборки;
КонецФункции
//  Документ_ПередачаТоваров_Отправка
Процедура ДобавитьПОД_Документ_ПередачаТоваров_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПередачаТоваров_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ПередачаТоваров;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ПередачаТоваров_Отправка_ПриОбработке";
	ПравилоОбработки.ВыборкаДанных           = "ПОД_Документ_ПередачаТоваров_Отправка_ВыборкаДанных";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПередачаДавальцу_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПередачаПереработчику_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_ПередачаТоваров_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Документ_ПередачаПереработчику_Отправка = Ложь;
	ИспользованиеПКО.Документ_ПередачаДавальцу_Отправка = Ложь;
	
	Если ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПередачаТоваров.ИзПереработки Тогда
		ИспользованиеПКО.Документ_ПередачаДавальцу_Отправка = Истина;
	Иначе
		ИспользованиеПКО.Документ_ПередачаПереработчику_Отправка = Истина;
	КонецЕсли;
КонецПроцедуры

Функция ПОД_Документ_ПередачаТоваров_Отправка_ВыборкаДанных(КомпонентыОбмена)
	МассивВыборки = Новый Массив;
		
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	Док.Ссылка
		|ИЗ
		|	Документ.ПередачаТоваров КАК Док
		|ГДЕ
		|	Док.Проведен
		|	И Док.Дата >= &ДатаНачала 
		|	И Док.Дата <= &ДатаОкончания";
	Запрос.УстановитьПараметр("ДатаНачала", КомпонентыОбмена.ПараметрыКонвертации.ДатаНачалаПериодаВыгрузкиДокументов);
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(КомпонентыОбмена.ПараметрыКонвертации.ДатаОкончанияПериодаВыгрузкиДокументов));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		МассивВыборки.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат МассивВыборки;
КонецФункции
//  Документ_ПеремещениеТоваров_Отправка
Процедура ДобавитьПОД_Документ_ПеремещениеТоваров_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПеремещениеТоваров_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ПеремещениеТоваров;
	ПравилоОбработки.ВыборкаДанных           = "ПОД_Документ_ПеремещениеТоваров_Отправка_ВыборкаДанных";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПеремещениеТоваров_Отправка");
КонецПроцедуры

Функция ПОД_Документ_ПеремещениеТоваров_Отправка_ВыборкаДанных(КомпонентыОбмена)
	МассивВыборки = Новый Массив;
		
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	Док.Ссылка
		|ИЗ
		|	Документ.ПеремещениеТоваров КАК Док
		|ГДЕ
		|	Док.Проведен
		|	И Док.Дата >= &ДатаНачала 
		|	И Док.Дата <= &ДатаОкончания";
	Запрос.УстановитьПараметр("ДатаНачала", КомпонентыОбмена.ПараметрыКонвертации.ДатаНачалаПериодаВыгрузкиДокументов);
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(КомпонентыОбмена.ПараметрыКонвертации.ДатаОкончанияПериодаВыгрузкиДокументов));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		МассивВыборки.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат МассивВыборки;
КонецФункции
//  Документ_ПлатОрдерПоступление_Отправка
Процедура ДобавитьПОД_Документ_ПлатОрдерПоступление_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПлатОрдерПоступление_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ПлатежныйОрдерПоступлениеДенежныхСредств;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ПлатОрдерПоступление_Отправка_ПриОбработке";
	ПравилоОбработки.ВыборкаДанных           = "ПОД_Документ_ПлатОрдерПоступление_Отправка_ВыборкаДанных";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПлОрПостКонвертацияВалюты_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПлОрПостПлатКарты_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПлОрПостПрочее_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПлОрПостРасчетыСКонтрагентами_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_ПлатОрдерПоступление_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Документ_ПлОрПостКонвертацияВалюты_Отправка = Ложь;
	ИспользованиеПКО.Документ_ПлОрПостРасчетыСКонтрагентами_Отправка = Ложь;
	ИспользованиеПКО.Документ_ПлОрПостПрочее_Отправка = Ложь;
	ИспользованиеПКО.Документ_ПлОрПостПлатКарты_Отправка = Ложь;
	
	Если ЭтоПБДСРасчетыСКонтрагентами(ДанныеИБ) Тогда
		ИспользованиеПКО.Документ_ПлОрПостРасчетыСКонтрагентами_Отправка = Истина;
	ИначеЕсли ЭтоПБДСПрочее(ДанныеИБ) Тогда
		ИспользованиеПКО.Документ_ПлОрПостПрочее_Отправка = Истина;
	ИначеЕсли ЭтоПБДСПлатКарты(ДанныеИБ) Тогда
		ИспользованиеПКО.Документ_ПлОрПостПлатКарты_Отправка = Истина;
	ИначеЕсли ЭтоПБДСКонвертацияВалюты(ДанныеИБ) Тогда
		ИспользованиеПКО.Документ_ПлОрПостКонвертацияВалюты_Отправка = Истина;
	КонецЕсли;
КонецПроцедуры

Функция ПОД_Документ_ПлатОрдерПоступление_Отправка_ВыборкаДанных(КомпонентыОбмена)
	МассивВыборки = Новый Массив;
		
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	Док.Ссылка
		|ИЗ
		|	Документ.ПлатежныйОрдерПоступлениеДенежныхСредств КАК Док
		|ГДЕ
		|	Док.Проведен
		|	И Док.Оплачено
		|	И Док.Дата >= &ДатаНачала 
		|	И Док.Дата <= &ДатаОкончания";
	Запрос.УстановитьПараметр("ДатаНачала", КомпонентыОбмена.ПараметрыКонвертации.ДатаНачалаПериодаВыгрузкиДокументов);
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(КомпонентыОбмена.ПараметрыКонвертации.ДатаОкончанияПериодаВыгрузкиДокументов));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		МассивВыборки.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат МассивВыборки;
КонецФункции
//  Документ_ПлатОрдерСписание_Отправка
Процедура ДобавитьПОД_Документ_ПлатОрдерСписание_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПлатОрдерСписание_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ПлатежныйОрдерСписаниеДенежныхСредств;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ПлатОрдерСписание_Отправка_ПриОбработке";
	ПравилоОбработки.ВыборкаДанных           = "ПОД_Документ_ПлатОрдерСписание_Отправка_ВыборкаДанных";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПлатОрдерСписаниеСотрудники_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПлОрдерСписПереводНаДрСчет_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПлОрдерСписПеречислениеЗП_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПлОрдерСписПрочее_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПлОрдерСписРасчетыСКонтрагентами_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_ПлатОрдерСписание_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Документ_ПлОрдерСписРасчетыСКонтрагентами_Отправка = Ложь;
	ИспользованиеПКО.Документ_ПлОрдерСписПрочее_Отправка = Ложь;
	ИспользованиеПКО.Документ_ПлатОрдерСписаниеСотрудники_Отправка = Ложь;
	ИспользованиеПКО.Документ_ПлОрдерСписПереводНаДрСчет_Отправка = Ложь;
	ИспользованиеПКО.Документ_ПлОрдерСписПеречислениеЗП_Отправка = Ложь;
	Если ЭтоСБДСРасчетыСКонтрагентами(ДанныеИБ) Тогда
		ИспользованиеПКО.Документ_ПлОрдерСписРасчетыСКонтрагентами_Отправка = Истина;
	ИначеЕсли ЭтоСБДСПрочее(ДанныеИБ) Тогда
		ИспользованиеПКО.Документ_ПлОрдерСписПрочее_Отправка = Истина;
	ИначеЕсли ЭтоСБДСРасчетыССотрудниками(ДанныеИБ) Тогда
		ИспользованиеПКО.Документ_ПлатОрдерСписаниеСотрудники_Отправка = Истина;
	ИначеЕсли ЭтоСБДСВнутреннееПеремещение(ДанныеИБ) Тогда
		ИспользованиеПКО.Документ_ПлОрдерСписПереводНаДрСчет_Отправка = Истина;
	ИначеЕсли ЭтоСБДСПеречислениеЗП(ДанныеИБ) Тогда
		ИспользованиеПКО.Документ_ПлОрдерСписПеречислениеЗП_Отправка = Истина;
	КонецЕсли;
КонецПроцедуры

Функция ПОД_Документ_ПлатОрдерСписание_Отправка_ВыборкаДанных(КомпонентыОбмена)
	МассивВыборки = Новый Массив;
		
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	Док.Ссылка
		|ИЗ
		|	Документ.ПлатежныйОрдерСписаниеДенежныхСредств КАК Док
		|ГДЕ
		|	Док.Проведен
		|	И Док.Оплачено
		|	И Док.Дата >= &ДатаНачала 
		|	И Док.Дата <= &ДатаОкончания";
	Запрос.УстановитьПараметр("ДатаНачала", КомпонентыОбмена.ПараметрыКонвертации.ДатаНачалаПериодаВыгрузкиДокументов);
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(КомпонентыОбмена.ПараметрыКонвертации.ДатаОкончанияПериодаВыгрузкиДокументов));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		МассивВыборки.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат МассивВыборки;
КонецФункции
//  Документ_ПлатПорВх_Отправка
Процедура ДобавитьПОД_Документ_ПлатПорВх_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПлатПорВх_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ПлатежноеПоручениеВходящее;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ПлатПорВх_Отправка_ПриОбработке";
	ПравилоОбработки.ВыборкаДанных           = "ПОД_Документ_ПлатПорВх_Отправка_ВыборкаДанных";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПлатПорВхРасчетыСКонтрагентами_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПлатПорВхПрочее_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПлатПорВхПлатКарты_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_ПлатПорВх_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Документ_ПлатПорВхРасчетыСКонтрагентами_Отправка = Ложь;
	ИспользованиеПКО.Документ_ПлатПорВхПрочее_Отправка = Ложь;
	ИспользованиеПКО.Документ_ПлатПорВхПлатКарты_Отправка = Ложь;
	
	Если ЭтоПБДСРасчетыСКонтрагентами(ДанныеИБ) Тогда
		ИспользованиеПКО.Документ_ПлатПорВхРасчетыСКонтрагентами_Отправка = Истина;
	ИначеЕсли ЭтоПБДСПрочее(ДанныеИБ) Тогда
		ИспользованиеПКО.Документ_ПлатПорВхПрочее_Отправка = Истина;
	ИначеЕсли ЭтоПБДСПлатКарты(ДанныеИБ) Тогда
		ИспользованиеПКО.Документ_ПлатПорВхПлатКарты_Отправка = Истина;
	КонецЕсли;
КонецПроцедуры

Функция ПОД_Документ_ПлатПорВх_Отправка_ВыборкаДанных(КомпонентыОбмена)
	МассивВыборки = Новый Массив;
		
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	Док.Ссылка
		|ИЗ
		|	Документ.ПлатежноеПоручениеВходящее КАК Док
		|ГДЕ
		|	Док.Проведен
		|	И Док.Оплачено
		|	И Док.Дата >= &ДатаНачала 
		|	И Док.Дата <= &ДатаОкончания";
	Запрос.УстановитьПараметр("ДатаНачала", КомпонентыОбмена.ПараметрыКонвертации.ДатаНачалаПериодаВыгрузкиДокументов);
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(КомпонентыОбмена.ПараметрыКонвертации.ДатаОкончанияПериодаВыгрузкиДокументов));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		МассивВыборки.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат МассивВыборки;
КонецФункции
//  Документ_ПлатПорИсх_Отправка
Процедура ДобавитьПОД_Документ_ПлатПорИсх_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПлатПорИсх_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ПлатежноеПоручениеИсходящее;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ПлатПорИсх_Отправка_ПриОбработке";
	ПравилоОбработки.ВыборкаДанных           = "ПОД_Документ_ПлатПорИсх_Отправка_ВыборкаДанных";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПлатПорИсхРасчетыСКонтрагентами_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПлатПорИсхПрочее_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПлатПорИсхСотрудники_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПлатПорИсхНалоги_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПлатПорИсхПереводНаДрСчет_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПлатПорИсхПеречислениеЗП_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_ПлатПорИсх_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Документ_ПлатПорИсхРасчетыСКонтрагентами_Отправка = Ложь;
	ИспользованиеПКО.Документ_ПлатПорИсхПрочее_Отправка = Ложь;
	ИспользованиеПКО.Документ_ПлатПорИсхСотрудники_Отправка = Ложь;
	ИспользованиеПКО.Документ_ПлатПорИсхНалоги_Отправка = Ложь;
	ИспользованиеПКО.Документ_ПлатПорИсхПереводНаДрСчет_Отправка = Ложь;
	ИспользованиеПКО.Документ_ПлатПорИсхПеречислениеЗП_Отправка = Ложь;
	Если ЭтоСБДСРасчетыСКонтрагентами(ДанныеИБ) Тогда
		ИспользованиеПКО.Документ_ПлатПорИсхРасчетыСКонтрагентами_Отправка = Истина;
	ИначеЕсли ЭтоСБДСПрочее(ДанныеИБ) Тогда
		ИспользованиеПКО.Документ_ПлатПорИсхПрочее_Отправка = Истина;
	ИначеЕсли ЭтоСБДСРасчетыССотрудниками(ДанныеИБ) Тогда
		ИспользованиеПКО.Документ_ПлатПорИсхСотрудники_Отправка = Истина;
	ИначеЕсли ЭтоСБДСБюджет(ДанныеИБ) Тогда
		ИспользованиеПКО.Документ_ПлатПорИсхНалоги_Отправка = Истина;
	ИначеЕсли ЭтоСБДСВнутреннееПеремещение(ДанныеИБ) Тогда
		ИспользованиеПКО.Документ_ПлатПорИсхПереводНаДрСчет_Отправка = Истина;
	ИначеЕсли ЭтоСБДСПеречислениеЗП(ДанныеИБ) Тогда
		ИспользованиеПКО.Документ_ПлатПорИсхПеречислениеЗП_Отправка = Истина;
	КонецЕсли;
КонецПроцедуры

Функция ПОД_Документ_ПлатПорИсх_Отправка_ВыборкаДанных(КомпонентыОбмена)
	МассивВыборки = Новый Массив;
		
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	Док.Ссылка
		|ИЗ
		|	Документ.ПлатежноеПоручениеИсходящее КАК Док
		|ГДЕ
		|	Док.Проведен
		|	И Док.Оплачено
		|	И Док.Дата >= &ДатаНачала 
		|	И Док.Дата <= &ДатаОкончания";
	Запрос.УстановитьПараметр("ДатаНачала", КомпонентыОбмена.ПараметрыКонвертации.ДатаНачалаПериодаВыгрузкиДокументов);
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(КомпонентыОбмена.ПараметрыКонвертации.ДатаОкончанияПериодаВыгрузкиДокументов));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		МассивВыборки.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат МассивВыборки;
КонецФункции
//  Документ_ПлатТребВыст_Отправка
Процедура ДобавитьПОД_Документ_ПлатТребВыст_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПлатТребВыст_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ПлатежноеТребованиеВыставленное;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ПлатТребВыст_Отправка_ПриОбработке";
	ПравилоОбработки.ВыборкаДанных           = "ПОД_Документ_ПлатТребВыст_Отправка_ВыборкаДанных";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПлТребВыстПрочее_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПлТребВыстРасчетыСКонтрагентами_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_ПлатТребВыст_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Документ_ПлТребВыстРасчетыСКонтрагентами_Отправка = Ложь;
	ИспользованиеПКО.Документ_ПлТребВыстПрочее_Отправка = Ложь;
	Если ЭтоПБДСРасчетыСКонтрагентами(ДанныеИБ) Тогда
		ИспользованиеПКО.Документ_ПлТребВыстРасчетыСКонтрагентами_Отправка = Истина;
	ИначеЕсли ЭтоПБДСПрочее(ДанныеИБ) Тогда
		ИспользованиеПКО.Документ_ПлТребВыстПрочее_Отправка = Истина;
	КонецЕсли;
КонецПроцедуры

Функция ПОД_Документ_ПлатТребВыст_Отправка_ВыборкаДанных(КомпонентыОбмена)
	МассивВыборки = Новый Массив;
		
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	Док.Ссылка
		|ИЗ
		|	Документ.ПлатежноеТребованиеВыставленное КАК Док
		|ГДЕ
		|	Док.Проведен
		|	И Док.Оплачено
		|	И Док.Дата >= &ДатаНачала 
		|	И Док.Дата <= &ДатаОкончания";
	Запрос.УстановитьПараметр("ДатаНачала", КомпонентыОбмена.ПараметрыКонвертации.ДатаНачалаПериодаВыгрузкиДокументов);
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(КомпонентыОбмена.ПараметрыКонвертации.ДатаОкончанияПериодаВыгрузкиДокументов));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		МассивВыборки.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат МассивВыборки;
КонецФункции
//  Документ_ПлТребПолуч_Отправка
Процедура ДобавитьПОД_Документ_ПлТребПолуч_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПлТребПолуч_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ПлатежноеТребованиеПолученное;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ПлТребПолуч_Отправка_ПриОбработке";
	ПравилоОбработки.ВыборкаДанных           = "ПОД_Документ_ПлТребПолуч_Отправка_ВыборкаДанных";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПлТребПолучПрочее_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПлТребПолучРасчетыСКонтрагентами_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_ПлТребПолуч_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Документ_ПлТребПолучРасчетыСКонтрагентами_Отправка = Ложь;
	ИспользованиеПКО.Документ_ПлТребПолучПрочее_Отправка = Ложь;
	
	Если ЭтоСБДСРасчетыСКонтрагентами(ДанныеИБ) Тогда
		ИспользованиеПКО.Документ_ПлТребПолучРасчетыСКонтрагентами_Отправка = Истина;
	ИначеЕсли ЭтоСБДСПрочее(ДанныеИБ) Тогда
		ИспользованиеПКО.Документ_ПлТребПолучПрочее_Отправка = Истина;
	КонецЕсли;
КонецПроцедуры

Функция ПОД_Документ_ПлТребПолуч_Отправка_ВыборкаДанных(КомпонентыОбмена)
	МассивВыборки = Новый Массив;
		
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	Док.Ссылка
		|ИЗ
		|	Документ.ПлатежноеТребованиеПолученное КАК Док
		|ГДЕ
		|	Док.Проведен
		|	И Док.Оплачено
		|	И Док.Дата >= &ДатаНачала 
		|	И Док.Дата <= &ДатаОкончания";
	Запрос.УстановитьПараметр("ДатаНачала", КомпонентыОбмена.ПараметрыКонвертации.ДатаНачалаПериодаВыгрузкиДокументов);
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(КомпонентыОбмена.ПараметрыКонвертации.ДатаОкончанияПериодаВыгрузкиДокументов));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		МассивВыборки.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат МассивВыборки;
КонецФункции
//  Документ_ПоступлениеДопРасходов_Отправка
Процедура ДобавитьПОД_Документ_ПоступлениеДопРасходов_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПоступлениеДопРасходов_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ПоступлениеДопРасходов;
	ПравилоОбработки.ВыборкаДанных           = "ПОД_Документ_ПоступлениеДопРасходов_Отправка_ВыборкаДанных";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПоступлениеДопРасходов_Отправка");
КонецПроцедуры

Функция ПОД_Документ_ПоступлениеДопРасходов_Отправка_ВыборкаДанных(КомпонентыОбмена)
	МассивВыборки = Новый Массив;
		
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	Док.Ссылка
		|ИЗ
		|	Документ.ПоступлениеДопРасходов КАК Док
		|ГДЕ
		|	Док.Проведен
		|	И Док.Дата >= &ДатаНачала 
		|	И Док.Дата <= &ДатаОкончания
		|	И Док.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоступлениеДопРасходов.УслугаСтороннейОрганизации)";
	Запрос.УстановитьПараметр("ДатаНачала", КомпонентыОбмена.ПараметрыКонвертации.ДатаНачалаПериодаВыгрузкиДокументов);
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(КомпонентыОбмена.ПараметрыКонвертации.ДатаОкончанияПериодаВыгрузкиДокументов));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		МассивВыборки.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат МассивВыборки;
КонецФункции
//  Документ_ПоступлениеОтПереработчика_Отправка
Процедура ДобавитьПОД_Документ_ПоступлениеОтПереработчика_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПоступлениеОтПереработчика_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ПоступлениеТоваровИзПереработки;
	ПравилоОбработки.ВыборкаДанных           = "ПОД_Документ_ПоступлениеОтПереработчика_Отправка_ВыборкаДанных";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПоступлениеОтПереработчика_Отправка");
КонецПроцедуры

Функция ПОД_Документ_ПоступлениеОтПереработчика_Отправка_ВыборкаДанных(КомпонентыОбмена)
	МассивВыборки = Новый Массив;
		
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	Док.Ссылка
		|ИЗ
		|	Документ.ПоступлениеТоваровИзПереработки КАК Док
		|ГДЕ
		|	Док.Проведен
		|	И Док.Дата >= &ДатаНачала 
		|	И Док.Дата <= &ДатаОкончания";
	Запрос.УстановитьПараметр("ДатаНачала", КомпонентыОбмена.ПараметрыКонвертации.ДатаНачалаПериодаВыгрузкиДокументов);
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(КомпонентыОбмена.ПараметрыКонвертации.ДатаОкончанияПериодаВыгрузкиДокументов));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		МассивВыборки.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат МассивВыборки;
КонецФункции
//  Документ_ПоступлениеТоваровУслуг_Отправка
Процедура ДобавитьПОД_Документ_ПоступлениеТоваровУслуг_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПоступлениеТоваровУслуг_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ПоступлениеТоваровУслуг;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ПоступлениеТоваровУслуг_Отправка_ПриОбработке";
	ПравилоОбработки.ВыборкаДанных           = "ПОД_Документ_ПоступлениеТоваровУслуг_Отправка_ВыборкаДанных";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПоступлениеТоваровУслуг_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПоступлениеСырьяОтДавальца_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_ПоступлениеТоваровУслуг_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Документ_ПоступлениеТоваровУслуг_Отправка = Ложь;
	ИспользованиеПКО.Документ_ПоступлениеСырьяОтДавальца_Отправка = Ложь;
	
	Если ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку Тогда
		ИспользованиеПКО.Документ_ПоступлениеСырьяОтДавальца_Отправка = Истина;
	Иначе
		ИспользованиеПКО.Документ_ПоступлениеТоваровУслуг_Отправка = Истина;
	КонецЕсли;
КонецПроцедуры

Функция ПОД_Документ_ПоступлениеТоваровУслуг_Отправка_ВыборкаДанных(КомпонентыОбмена)
	МассивВыборки = Новый Массив;
		
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	Док.Ссылка
		|ИЗ
		|	Документ.ПоступлениеТоваровУслуг КАК Док
		|ГДЕ
		|	Док.Проведен
		|	И Док.Дата >= &ДатаНачала 
		|	И Док.Дата <= &ДатаОкончания
		|	И Док.ВидОперации <> ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоступлениеТоваровУслуг.Оборудование)
		|	И Док.ВидОперации <> ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоступлениеТоваровУслуг.ОбъектыСтроительства)";
	Запрос.УстановитьПараметр("ДатаНачала", КомпонентыОбмена.ПараметрыКонвертации.ДатаНачалаПериодаВыгрузкиДокументов);
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(КомпонентыОбмена.ПараметрыКонвертации.ДатаОкончанияПериодаВыгрузкиДокументов));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		МассивВыборки.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат МассивВыборки;
КонецФункции
//  Документ_ПоступлениеТоваровУслугВНТТ_Отправка
Процедура ДобавитьПОД_Документ_ПоступлениеТоваровУслугВНТТ_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПоступлениеТоваровУслугВНТТ_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ПоступлениеТоваровУслугВНТТ;
	ПравилоОбработки.ВыборкаДанных           = "ПОД_Документ_ПоступлениеТоваровУслугВНТТ_Отправка_ВыборкаДанных";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПоступлениеТоваровУслугВНТТ_Отправка");
КонецПроцедуры

Функция ПОД_Документ_ПоступлениеТоваровУслугВНТТ_Отправка_ВыборкаДанных(КомпонентыОбмена)
	МассивВыборки = Новый Массив;
		
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	Док.Ссылка
		|ИЗ
		|	Документ.ПоступлениеТоваровУслугВНТТ КАК Док
		|ГДЕ
		|	Док.Проведен
		|	И Док.Дата >= &ДатаНачала 
		|	И Док.Дата <= &ДатаОкончания
		|	И Док.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоступлениеТоваровУслугВНТТ.ОтПоставщика)";
	Запрос.УстановитьПараметр("ДатаНачала", КомпонентыОбмена.ПараметрыКонвертации.ДатаНачалаПериодаВыгрузкиДокументов);
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(КомпонентыОбмена.ПараметрыКонвертации.ДатаОкончанияПериодаВыгрузкиДокументов));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		МассивВыборки.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат МассивВыборки;
КонецФункции
//  Документ_ПриходныйКассовыйОрдер_Отправка
Процедура ДобавитьПОД_Документ_ПриходныйКассовыйОрдер_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПриходныйКассовыйОрдер_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ПриходныйКассовыйОрдер;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ПриходныйКассовыйОрдер_Отправка_ПриОбработке";
	ПравилоОбработки.ВыборкаДанных           = "ПОД_Документ_ПриходныйКассовыйОрдер_Отправка_ВыборкаДанных";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПКОРасчетыСКонтрагентами_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПКОРасчетыССотрудниками_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПКОПолучениеНаличныхВБанке_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПКОРозничнаяВыручка_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПКОПрочееПоступление_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_ПриходныйКассовыйОрдер_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ВидОперации = ДанныеИБ.ВидОперации;
	ИспользованиеПКО.Документ_ПКОРасчетыСКонтрагентами_Отправка = Ложь;
	ИспользованиеПКО.Документ_ПКОРасчетыССотрудниками_Отправка = Ложь;
	ИспользованиеПКО.Документ_ПКОПолучениеНаличныхВБанке_Отправка = Ложь;
	ИспользованиеПКО.Документ_ПКОРозничнаяВыручка_Отправка = Ложь;
	ИспользованиеПКО.Документ_ПКОПрочееПоступление_Отправка = Ложь;
	
	Если ВидОперации = Перечисления.ВидыОперацийПКО.ОплатаПокупателя
		Или ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПоставщиком
		Или ВидОперации = Перечисления.ВидыОперацийПКО.РасчетыПоКредитамИЗаймамСКонтрагентами
		Или ВидОперации = Перечисления.ВидыОперацийПКО.ПрочиеРасчетыСКонтрагентами Тогда
	
		ИспользованиеПКО.Документ_ПКОРасчетыСКонтрагентами_Отправка = Истина;
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПодотчетником
		Или ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствРаботником
		Или ВидОперации = Перечисления.ВидыОперацийПКО.РасчетыПоКредитамИЗаймамСРаботниками Тогда
	
		ИспользованиеПКО.Документ_ПКОРасчетыССотрудниками_Отправка = Истина;
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПКО.ПолучениеНаличныхДенежныхСредствВБанке Тогда
		ИспользованиеПКО.Документ_ПКОПолучениеНаличныхВБанке_Отправка = Истина;
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствРозничнаяВыручка Тогда
		ИспользованиеПКО.Документ_ПКОРозничнаяВыручка_Отправка = Истина;
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствПрочее Тогда
		ИспользованиеПКО.Документ_ПКОПрочееПоступление_Отправка = Истина;
	КонецЕсли;
КонецПроцедуры

Функция ПОД_Документ_ПриходныйКассовыйОрдер_Отправка_ВыборкаДанных(КомпонентыОбмена)
	МассивВыборки = Новый Массив;
		
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	Док.Ссылка
		|ИЗ
		|	Документ.ПриходныйКассовыйОрдер КАК Док
		|ГДЕ
		|	Док.Проведен
		|	И Док.Дата >= &ДатаНачала 
		|	И Док.Дата <= &ДатаОкончания";
	Запрос.УстановитьПараметр("ДатаНачала", КомпонентыОбмена.ПараметрыКонвертации.ДатаНачалаПериодаВыгрузкиДокументов);
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(КомпонентыОбмена.ПараметрыКонвертации.ДатаОкончанияПериодаВыгрузкиДокументов));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		МассивВыборки.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат МассивВыборки;
КонецФункции
//  Документ_РасходныйКассовыйОрдер_Отправка
Процедура ДобавитьПОД_Документ_РасходныйКассовыйОрдер_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_РасходныйКассовыйОрдер_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.РасходныйКассовыйОрдер;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_РасходныйКассовыйОрдер_Отправка_ПриОбработке";
	ПравилоОбработки.ВыборкаДанных           = "ПОД_Документ_РасходныйКассовыйОрдер_Отправка_ВыборкаДанных";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РКОРасчетыССотрудниками_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РКОРасчетыСКонтрагентами_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РКОВыдачаВКассуККМ_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РКОНаБанковскийСчет_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РКОПрочаяВыдача_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РКОВыплатаЗарплаты_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_РасходныйКассовыйОрдер_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Документ_РКОРасчетыССотрудниками_Отправка = Ложь;
	ИспользованиеПКО.Документ_РКОРасчетыСКонтрагентами_Отправка = Ложь;
	ИспользованиеПКО.Документ_РКОВыдачаВКассуККМ_Отправка = Ложь;
	ИспользованиеПКО.Документ_РКОНаБанковскийСчет_Отправка = Ложь;
	ИспользованиеПКО.Документ_РКОПрочаяВыдача_Отправка = Ложь;
	ИспользованиеПКО.Документ_РКОВыплатаЗарплаты_Отправка = Ложь;
	ВидОперации = ДанныеИБ.ВидОперации;
	Если ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствПодотчетнику
		Или ВидОперации = Перечисления.ВидыОперацийРКО.РасчетыПоКредитамИЗаймамСРаботниками Тогда
		ИспользованиеПКО.Документ_РКОРасчетыССотрудниками_Отправка = Истина;
	ИначеЕсли  ВидОперации = Перечисления.ВидыОперацийРКО.ОплатаПоставщику
		Или ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратДенежныхСредствПокупателю
		Или ВидОперации = Перечисления.ВидыОперацийРКО.ПрочиеРасчетыСКонтрагентами
		Или ВидОперации = Перечисления.ВидыОперацийРКО.РасчетыПоКредитамИЗаймамСКонтрагентами  Тогда
		ИспользованиеПКО.Документ_РКОРасчетыСКонтрагентами_Отправка = Истина;
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям
		Или ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику
		Или ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаДепонентов Тогда
		ИспользованиеПКО.Документ_РКОВыплатаЗарплаты_Отправка = Истина;
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРКО.ВзносНаличнымиВБанк Тогда
		ИспользованиеПКО.Документ_РКОНаБанковскийСчет_Отправка = Истина;
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствКассеККМ Тогда
		ИспользованиеПКО.Документ_РКОВыдачаВКассуККМ_Отправка = Истина;
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРКО.РасходДенежныхСредствПрочее Тогда
		ИспользованиеПКО.Документ_РКОПрочаяВыдача_Отправка = Истина;
	КонецЕсли;
КонецПроцедуры

Функция ПОД_Документ_РасходныйКассовыйОрдер_Отправка_ВыборкаДанных(КомпонентыОбмена)
	МассивВыборки = Новый Массив;
		
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	Док.Ссылка
		|ИЗ
		|	Документ.РасходныйКассовыйОрдер КАК Док
		|ГДЕ
		|	Док.Проведен
		|	И Док.Дата >= &ДатаНачала 
		|	И Док.Дата <= &ДатаОкончания";
	Запрос.УстановитьПараметр("ДатаНачала", КомпонентыОбмена.ПараметрыКонвертации.ДатаНачалаПериодаВыгрузкиДокументов);
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(КомпонентыОбмена.ПараметрыКонвертации.ДатаОкончанияПериодаВыгрузкиДокументов));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		МассивВыборки.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат МассивВыборки;
КонецФункции
//  Документ_РеализацияОтгруженныхТоваров_Отправка
Процедура ДобавитьПОД_Документ_РеализацияОтгруженныхТоваров_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_РеализацияОтгруженныхТоваров_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.РеализацияОтгруженныхТоваров;
	ПравилоОбработки.ВыборкаДанных           = "ПОД_Документ_РеализацияОтгруженныхТоваров_Отправка_ВыборкаДанных";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РеализацияОтгруженныхТоваров_Отправка");
КонецПроцедуры

Функция ПОД_Документ_РеализацияОтгруженныхТоваров_Отправка_ВыборкаДанных(КомпонентыОбмена)
	МассивВыборки = Новый Массив;
		
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	Док.Ссылка
		|ИЗ
		|	Документ.РеализацияОтгруженныхТоваров КАК Док
		|ГДЕ
		|	Док.Проведен
		|	И Док.Дата >= &ДатаНачала 
		|	И Док.Дата <= &ДатаОкончания
		|	И Док.ДокументОтгрузки.Проведен";
	Запрос.УстановитьПараметр("ДатаНачала", КомпонентыОбмена.ПараметрыКонвертации.ДатаНачалаПериодаВыгрузкиДокументов);
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(КомпонентыОбмена.ПараметрыКонвертации.ДатаОкончанияПериодаВыгрузкиДокументов));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		МассивВыборки.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат МассивВыборки;
КонецФункции
//  Документ_РеализацияТоваровУслуг_Отправка
Процедура ДобавитьПОД_Документ_РеализацияТоваровУслуг_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_РеализацияТоваровУслуг_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.РеализацияТоваровУслуг;
	ПравилоОбработки.ВыборкаДанных           = "ПОД_Документ_РеализацияТоваровУслуг_Отправка_ВыборкаДанных";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РеализацияТоваровУслуг_Отправка");
КонецПроцедуры

Функция ПОД_Документ_РеализацияТоваровУслуг_Отправка_ВыборкаДанных(КомпонентыОбмена)
	МассивВыборки = Новый Массив;
		
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	Док.Ссылка
		|ИЗ
		|	Документ.РеализацияТоваровУслуг КАК Док
		|ГДЕ
		|	Док.Проведен
		|	И Док.Дата >= &ДатаНачала 
		|	И Док.Дата <= &ДатаОкончания";
	Запрос.УстановитьПараметр("ДатаНачала", КомпонентыОбмена.ПараметрыКонвертации.ДатаНачалаПериодаВыгрузкиДокументов);
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(КомпонентыОбмена.ПараметрыКонвертации.ДатаОкончанияПериодаВыгрузкиДокументов));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		МассивВыборки.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат МассивВыборки;
КонецФункции
//  Документ_СписаниеТоваров_Отправка
Процедура ДобавитьПОД_Документ_СписаниеТоваров_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_СписаниеТоваров_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.СписаниеТоваров;
	ПравилоОбработки.ВыборкаДанных           = "ПОД_Документ_СписаниеТоваров_Отправка_ВыборкаДанных";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СписаниеТоваров_Отправка");
КонецПроцедуры

Функция ПОД_Документ_СписаниеТоваров_Отправка_ВыборкаДанных(КомпонентыОбмена)
	МассивВыборки = Новый Массив;
		
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	Док.Ссылка
		|ИЗ
		|	Документ.СписаниеТоваров КАК Док
		|ГДЕ
		|	Док.Проведен
		|	И Док.Дата >= &ДатаНачала 
		|	И Док.Дата <= &ДатаОкончания";
	Запрос.УстановитьПараметр("ДатаНачала", КомпонентыОбмена.ПараметрыКонвертации.ДатаНачалаПериодаВыгрузкиДокументов);
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(КомпонентыОбмена.ПараметрыКонвертации.ДатаОкончанияПериодаВыгрузкиДокументов));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		МассивВыборки.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат МассивВыборки;
КонецФункции
//  Документ_СчетФактураВыданный_Отправка
Процедура ДобавитьПОД_Документ_СчетФактураВыданный_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_СчетФактураВыданный_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.СчетФактураВыданный;
	ПравилоОбработки.ВыборкаДанных           = "ПОД_Документ_СчетФактураВыданный_Отправка_ВыборкаДанных";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СчетФактураВыданный_Отправка");
КонецПроцедуры

Функция ПОД_Документ_СчетФактураВыданный_Отправка_ВыборкаДанных(КомпонентыОбмена)
	МассивВыборки = Новый Массив;
		
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	Док.Ссылка
		|ИЗ
		|	Документ.СчетФактураВыданный КАК Док
		|ГДЕ
		|	Док.Проведен
		|	И Док.Дата >= &ДатаНачала 
		|	И Док.Дата <= &ДатаОкончания";
	Запрос.УстановитьПараметр("ДатаНачала", КомпонентыОбмена.ПараметрыКонвертации.ДатаНачалаПериодаВыгрузкиДокументов);
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(КомпонентыОбмена.ПараметрыКонвертации.ДатаОкончанияПериодаВыгрузкиДокументов));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		МассивВыборки.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат МассивВыборки;
КонецФункции
//  Документ_СчетФактураПолученный_Отправка
Процедура ДобавитьПОД_Документ_СчетФактураПолученный_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_СчетФактураПолученный_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.СчетФактураПолученный;
	ПравилоОбработки.ВыборкаДанных           = "ПОД_Документ_СчетФактураПолученный_Отправка_ВыборкаДанных";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СчетФактураПолученный_Отправка");
КонецПроцедуры

Функция ПОД_Документ_СчетФактураПолученный_Отправка_ВыборкаДанных(КомпонентыОбмена)
	МассивВыборки = Новый Массив;
		
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	Док.Ссылка
		|ИЗ
		|	Документ.СчетФактураПолученный КАК Док
		|ГДЕ
		|	Док.Проведен
		|	И Док.Дата >= &ДатаНачала 
		|	И Док.Дата <= &ДатаОкончания";
	Запрос.УстановитьПараметр("ДатаНачала", КомпонентыОбмена.ПараметрыКонвертации.ДатаНачалаПериодаВыгрузкиДокументов);
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(КомпонентыОбмена.ПараметрыКонвертации.ДатаОкончанияПериодаВыгрузкиДокументов));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		МассивВыборки.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат МассивВыборки;
КонецФункции
//  Документ_ТребованиеНакладная_Отправка
Процедура ДобавитьПОД_Документ_ТребованиеНакладная_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ТребованиеНакладная_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ТребованиеНакладная;
	ПравилоОбработки.ВыборкаДанных           = "ПОД_Документ_ТребованиеНакладная_Отправка_ВыборкаДанных";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ТребованиеНакладная_Отправка");
КонецПроцедуры

Функция ПОД_Документ_ТребованиеНакладная_Отправка_ВыборкаДанных(КомпонентыОбмена)
	МассивВыборки = Новый Массив;
		
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	Док.Ссылка
		|ИЗ
		|	Документ.ТребованиеНакладная КАК Док
		|ГДЕ
		|	Док.Проведен
		|	И Док.Дата >= &ДатаНачала 
		|	И Док.Дата <= &ДатаОкончания";
	Запрос.УстановитьПараметр("ДатаНачала", КомпонентыОбмена.ПараметрыКонвертации.ДатаНачалаПериодаВыгрузкиДокументов);
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(КомпонентыОбмена.ПараметрыКонвертации.ДатаОкончанияПериодаВыгрузкиДокументов));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		МассивВыборки.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат МассивВыборки;
КонецФункции
//  Документ_УстановкаЦенНоменклатуры_Отправка
Процедура ДобавитьПОД_Документ_УстановкаЦенНоменклатуры_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_УстановкаЦенНоменклатуры_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.УстановкаЦенНоменклатуры;
	ПравилоОбработки.ВыборкаДанных           = "ПОД_Документ_УстановкаЦенНоменклатуры_Отправка_ВыборкаДанных";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_УстановкаЦенНоменклатуры_Отправка");
КонецПроцедуры

Функция ПОД_Документ_УстановкаЦенНоменклатуры_Отправка_ВыборкаДанных(КомпонентыОбмена)
	МассивВыборки = Новый Массив;
		
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	Док.Ссылка
		|ИЗ
		|	Документ.УстановкаЦенНоменклатуры КАК Док
		|ГДЕ
		|	Док.Проведен
		|	И Док.Дата >= &ДатаНачала 
		|	И Док.Дата <= &ДатаОкончания";
	Запрос.УстановитьПараметр("ДатаНачала", КомпонентыОбмена.ПараметрыКонвертации.ДатаНачалаПериодаВыгрузкиДокументов);
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(КомпонентыОбмена.ПараметрыКонвертации.ДатаОкончанияПериодаВыгрузкиДокументов));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если Выборка.Ссылка.ТипыЦен.Количество() <> 1 Тогда
			Продолжить;
		КонецЕсли;
		ЕстьЦены = Ложь;
		Для Каждого СтрТовары Из Выборка.Ссылка.Товары Цикл
			Если СтрТовары.Цена > 0 Тогда
				ЕстьЦены = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ЕстьЦены Тогда
			МассивВыборки.Добавить(Выборка.Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивВыборки;
КонецФункции
//  Справочник_Банки_Отправка
Процедура ДобавитьПОД_Справочник_Банки_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Банки_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.Банки;
	ПравилоОбработки.ВыборкаДанных           = "ПОД_Справочник_Банки_Отправка_ВыборкаДанных";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Банки");
КонецПроцедуры

Функция ПОД_Справочник_Банки_Отправка_ВыборкаДанных(КомпонентыОбмена)
	МассивВыборки = Новый Массив;
		
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	Спр.Ссылка
		|ИЗ
		|	Справочник.Банки КАК Спр
		|ГДЕ
		|	НЕ Спр.ЭтоГруппа
		|";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		МассивВыборки.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат МассивВыборки;
КонецФункции
//  Справочник_БанковскиеСчета_Отправка
Процедура ДобавитьПОД_Справочник_БанковскиеСчета_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_БанковскиеСчета_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.БанковскиеСчета;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_БанковскиеСчета");
КонецПроцедуры
//  Справочник_Валюты_Отправка
Процедура ДобавитьПОД_Справочник_Валюты_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Валюты_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.Валюты;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Валюты");
КонецПроцедуры
//  Справочник_Договоры_Отправка
Процедура ДобавитьПОД_Справочник_Договоры_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Договоры_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.ДоговорыКонтрагентов;
	ПравилоОбработки.ВыборкаДанных           = "ПОД_Справочник_Договоры_Отправка_ВыборкаДанных";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Договоры_Отправка");
КонецПроцедуры

Функция ПОД_Справочник_Договоры_Отправка_ВыборкаДанных(КомпонентыОбмена)
	МассивВыборки = Новый Массив;
		
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	Спр.Ссылка
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов КАК Спр
		|ГДЕ
		|	НЕ Спр.ЭтоГруппа
		|";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		МассивВыборки.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат МассивВыборки;
КонецФункции
//  Справочник_ЕдиницыИзмерения_Отправка
Процедура ДобавитьПОД_Справочник_ЕдиницыИзмерения_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ЕдиницыИзмерения_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.ЕдиницыИзмерения;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ЕдиницыИзмерения");
КонецПроцедуры
//  Справочник_КЕИ_Отправка
Процедура ДобавитьПОД_Справочник_КЕИ_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_КЕИ_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.КлассификаторЕдиницИзмерения;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_КЕИ");
КонецПроцедуры
//  Справочник_Контрагенты_Отправка
Процедура ДобавитьПОД_Справочник_Контрагенты_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Контрагенты_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.Контрагенты;
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_Контрагенты_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Контрагенты");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_КонтрагентыГруппа");
КонецПроцедуры

Процедура ПОД_Справочник_Контрагенты_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Справочник_Контрагенты = Не ДанныеИБ.ЭтоГруппа;
	ИспользованиеПКО.Справочник_КонтрагентыГруппа = ДанныеИБ.ЭтоГруппа;
КонецПроцедуры
//  Справочник_Номенклатура_Отправка
Процедура ДобавитьПОД_Справочник_Номенклатура_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Номенклатура_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.Номенклатура;
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_Номенклатура_Отправка_ПриОбработке";
	ПравилоОбработки.ВыборкаДанных           = "ПОД_Справочник_Номенклатура_Отправка_ВыборкаДанных";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Номенклатура_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_НоменклатураГруппа");
КонецПроцедуры

Процедура ПОД_Справочник_Номенклатура_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Справочник_Номенклатура_Отправка = Не ДанныеИБ.ЭтоГруппа;
	ИспользованиеПКО.Справочник_НоменклатураГруппа = ДанныеИБ.ЭтоГруппа;
КонецПроцедуры

Функция ПОД_Справочник_Номенклатура_Отправка_ВыборкаДанных(КомпонентыОбмена)
	МассивВыборки = Новый Массив;
		
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	Спр.Ссылка
		|ИЗ
		|	Справочник.Номенклатура КАК Спр
		|ГДЕ
		|	Спр.ЭтоГруппа ИЛИ (НЕ Спр.Набор И НЕ Спр.Комплект)
		|";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		МассивВыборки.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат МассивВыборки;
КонецФункции
//  Справочник_Организации_Отправка
Процедура ДобавитьПОД_Справочник_Организации_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Организации_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.Организации;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Организации");
КонецПроцедуры
//  Справочник_Подразделения_Отправка
Процедура ДобавитьПОД_Справочник_Подразделения_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Подразделения_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.Подразделения;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Подразделения");
КонецПроцедуры
//  Справочник_Пользователи_Отправка
Процедура ДобавитьПОД_Справочник_Пользователи_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Пользователи_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.Пользователи;
	ПравилоОбработки.ВыборкаДанных           = "ПОД_Справочник_Пользователи_Отправка_ВыборкаДанных";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Пользователи");
КонецПроцедуры

Функция ПОД_Справочник_Пользователи_Отправка_ВыборкаДанных(КомпонентыОбмена)
	МассивВыборки = Новый Массив;
		
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	Спр.Ссылка
		|ИЗ
		|	Справочник.Пользователи КАК Спр
		|ГДЕ
		|	НЕ Спр.ЭтоГруппа
		|";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		МассивВыборки.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат МассивВыборки;
КонецФункции
//  Справочник_Склады_Отправка
Процедура ДобавитьПОД_Справочник_Склады_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Склады_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.Склады;
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_Склады_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Склады");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СкладыГруппа");
КонецПроцедуры

Процедура ПОД_Справочник_Склады_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Справочник_Склады = НЕ ДанныеИБ.ЭтоГруппа;
	ИспользованиеПКО.Справочник_СкладыГруппа = ДанныеИБ.ЭтоГруппа;
КонецПроцедуры
//  Справочник_СпецификацииНоменклатуры_Отправка
Процедура ДобавитьПОД_Справочник_СпецификацииНоменклатуры_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_СпецификацииНоменклатуры_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.СпецификацииНоменклатуры;
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_СпецификацииНоменклатуры_Отправка_ПриОбработке";
	ПравилоОбработки.ВыборкаДанных           = "ПОД_Справочник_СпецификацииНоменклатуры_Отправка_ВыборкаДанных";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СпецификацииНоменклатуры_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СпецификацииНоменклатурыГруппа");
КонецПроцедуры

Процедура ПОД_Справочник_СпецификацииНоменклатуры_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Справочник_СпецификацииНоменклатуры_Отправка = Не ДанныеИБ.ЭтоГруппа;
	ИспользованиеПКО.Справочник_СпецификацииНоменклатурыГруппа = ДанныеИБ.ЭтоГруппа;
КонецПроцедуры

Функция ПОД_Справочник_СпецификацииНоменклатуры_Отправка_ВыборкаДанных(КомпонентыОбмена)
	МассивВыборки = Новый Массив;
		
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	Спр.Ссылка
		|ИЗ
		|	Справочник.СпецификацииНоменклатуры КАК Спр
		|ГДЕ
		|	Спр.Активная И НЕ Спр.ПометкаУдаления
		|	И Спр.ВидСпецификации = ЗНАЧЕНИЕ(Перечисление.ВидыСпецификаций.Сборочная) 
		|";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		МассивВыборки.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат МассивВыборки;
КонецФункции
//  Справочник_СтатьиДДС_Отправка
Процедура ДобавитьПОД_Справочник_СтатьиДДС_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_СтатьиДДС_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.СтатьиДвиженияДенежныхСредств;
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_СтатьиДДС_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СтатьиДДС");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СтатьиДДСГруппа");
КонецПроцедуры

Процедура ПОД_Справочник_СтатьиДДС_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Справочник_СтатьиДДС = Не ДанныеИБ.ЭтоГруппа;
	ИспользованиеПКО.Справочник_СтатьиДДСГруппа = ДанныеИБ.ЭтоГруппа;
КонецПроцедуры
//  Справочник_СтатьиЗатрат_Отправка
Процедура ДобавитьПОД_Справочник_СтатьиЗатрат_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_СтатьиЗатрат_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.СтатьиЗатрат;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СтатьиЗатрат_Отправка");
КонецПроцедуры
//  Справочник_СтраныМира_Отправка
Процедура ДобавитьПОД_Справочник_СтраныМира_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_СтраныМира_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.КлассификаторСтранМира;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СтраныМира");
КонецПроцедуры
//  Справочник_ТипыЦенНоменклатуры_Отправка
Процедура ДобавитьПОД_Справочник_ТипыЦенНоменклатуры_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ТипыЦенНоменклатуры_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.ТипыЦенНоменклатуры;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ТипыЦенНоменклатуры");
КонецПроцедуры
//  Справочник_ФизическиеЛица_Отправка
Процедура ДобавитьПОД_Справочник_ФизическиеЛица_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ФизическиеЛица_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.ФизическиеЛица;
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_ФизическиеЛица_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ФизическиеЛица_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ФизическиеЛицаГруппа");
КонецПроцедуры

Процедура ПОД_Справочник_ФизическиеЛица_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Справочник_ФизическиеЛица_Отправка = Не ДанныеИБ.ЭтоГруппа;
	ИспользованиеПКО.Справочник_ФизическиеЛицаГруппа = ДанныеИБ.ЭтоГруппа;
КонецПроцедуры
//  Справочник_ХарактеристикиНоменклатуры_Отправка
Процедура ДобавитьПОД_Справочник_ХарактеристикиНоменклатуры_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ХарактеристикиНоменклатуры_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.ХарактеристикиНоменклатуры;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ХарактеристикиНоменклатуры_Отправка");
КонецПроцедуры
//  Получение
//  Документ_АвансовыйОтчет_Получение
Процедура ДобавитьПОД_Документ_АвансовыйОтчет_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_АвансовыйОтчет_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.АвансовыйОтчет";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_АвансовыйОтчет_Получение");
КонецПроцедуры
//  Документ_ВозвратТоваровОтПокупателя_Получение
Процедура ДобавитьПОД_Документ_ВозвратТоваровОтПокупателя_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ВозвратТоваровОтПокупателя_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ВозвратТоваровОтПокупателя";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ВозвратТоваровОтПокупателя_Получение");
КонецПроцедуры
//  Документ_ВозвратТоваровПоставщику_Получение
Процедура ДобавитьПОД_Документ_ВозвратТоваровПоставщику_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ВозвратТоваровПоставщику_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ВозвратТоваровПоставщику";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ВозвратТоваровПоставщику_Получение");
КонецПроцедуры
//  Документ_ВыпускПродукции_Получение
Процедура ДобавитьПОД_Документ_ВыпускПродукции_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ВыпускПродукции_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ВыпускПродукции";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ВыпускПродукции_Получение");
КонецПроцедуры
//  Документ_ГТДИмпорт_Получение
Процедура ДобавитьПОД_Документ_ГТДИмпорт_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ГТДИмпорт_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ТаможеннаяДекларация";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ГТДИмпорт_Получение");
КонецПроцедуры
//  Документ_КорректировкаДолга_Получение
Процедура ДобавитьПОД_Документ_КорректировкаДолга_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_КорректировкаДолга_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.КорректировкаДолга";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_КорректировкаДолга_Получение");
КонецПроцедуры
//  Документ_КорректировкаПоступленияТоваров_Получение
Процедура ДобавитьПОД_Документ_КорректировкаПоступленияТоваров_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_КорректировкаПоступленияТоваров_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.КорректировкаПоступленияТоваров";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_КорректировкаПоступленияТоваров_Получение");
КонецПроцедуры
//  Документ_КорректировкаРеализацииТоваров_Получение
Процедура ДобавитьПОД_Документ_КорректировкаРеализацииТоваров_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_КорректировкаРеализацииТоваров_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.КорректировкаРеализацииТоваров";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_КорректировкаРеализацииТоваров_Получение");
КонецПроцедуры
//  Документ_ОперацияПоПлатежнойКарте_Получение
Процедура ДобавитьПОД_Документ_ОперацияПоПлатежнойКарте_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ОперацияПоПлатежнойКарте_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ОперацияПоПлатежнойКарте";
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ОперацияПоПлатежнойКарте_Получение_ПриОбработке";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОперацияПоПлатежнойКарте_Получение");
КонецПроцедуры

Процедура ПОД_Документ_ОперацияПоПлатежнойКарте_Получение_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	Если ДанныеXDTO.Свойство("ВидОперации") И ЗначениеЗаполнено(ДанныеXDTO.ВидОперации)
		И ДанныеXDTO.ВидОперации.Значение = "ВозвратОплатыКлиентуНаПлатежнуюКарту" Тогда
		ИспользованиеПКО.Документ_ОперацияПоПлатежнойКарте_Получение = Ложь;
	КонецЕсли;
КонецПроцедуры
//  Документ_ОприходованиеТоваров_Получение
Процедура ДобавитьПОД_Документ_ОприходованиеТоваров_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ОприходованиеТоваров_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ОприходованиеТоваров";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОприходованиеТоваров_Получение");
КонецПроцедуры
//  Документ_ОтчетКомиссионера_Получение
Процедура ДобавитьПОД_Документ_ОтчетКомиссионера_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ОтчетКомиссионера_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ОтчетКомиссионера";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОтчетКомиссионера_Получение");
КонецПроцедуры
//  Документ_ОтчетКомитенту_Получение
Процедура ДобавитьПОД_Документ_ОтчетКомитенту_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ОтчетКомитенту_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ОтчетКомитенту";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОтчетКомитенту_Получение");
КонецПроцедуры
//  Документ_ОтчетОРозничныхПродажах_Получение
Процедура ДобавитьПОД_Документ_ОтчетОРозничныхПродажах_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ОтчетОРозничныхПродажах_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ОтчетОРозничныхПродажах";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОтчетОРозничныхПродажах_Получение");
КонецПроцедуры
//  Документ_ПБДСПоПлатежнымКартам_Получение
Процедура ДобавитьПОД_Документ_ПБДСПоПлатежнымКартам_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПБДСПоПлатежнымКартам_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ПБДСПоПлатежнымКартам";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПБДСПоПлатежнымКартам_Получение");
КонецПроцедуры
//  Документ_ПБДСПрочееПоступление_Получение
Процедура ДобавитьПОД_Документ_ПБДСПрочееПоступление_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПБДСПрочееПоступление_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ПБДСПрочееПоступление";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПБДСПрочееПоступление_Получение");
КонецПроцедуры
//  Документ_ПБДСПрочиеДоходы_Получение
Процедура ДобавитьПОД_Документ_ПБДСПрочиеДоходы_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПБДСПрочиеДоходы_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ПБДСПрочиеДоходы";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПБДСПрочиеДоходы_Получение");
КонецПроцедуры
//  Документ_ПБДСРасчетыСКонтрагентами_Получение
Процедура ДобавитьПОД_Документ_ПБДСРасчетыСКонтрагентами_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПБДСРасчетыСКонтрагентами_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ПБДСРасчетыСКонтрагентами";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПБДСРасчетыСКонтрагентами_Получение");
КонецПроцедуры
//  Документ_ПередачаМатериаловВПроизводство_Получение
Процедура ДобавитьПОД_Документ_ПередачаМатериаловВПроизводство_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПередачаМатериаловВПроизводство_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ПередачаМатериаловВПроизводство";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПередачаМатериаловВПроизводство_Получение");
КонецПроцедуры
//  Документ_ПеремещениеТоваров_Получение
Процедура ДобавитьПОД_Документ_ПеремещениеТоваров_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПеремещениеТоваров_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ПеремещениеТоваров";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПеремещениеТоваров_Получение");
КонецПроцедуры
//  Документ_ПКОПрочееПоступление_Получение
Процедура ДобавитьПОД_Документ_ПКОПрочееПоступление_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПКОПрочееПоступление_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ПКОПрочееПоступление";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПКОПрочееПоступление_Получение");
КонецПроцедуры
//  Документ_ПКОРасчетыСКонтрагентами_Получение
Процедура ДобавитьПОД_Документ_ПКОРасчетыСКонтрагентами_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПКОРасчетыСКонтрагентами_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ПКОРасчетыСКонтрагентами";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПКОРасчетыСКонтрагентами_Получение");
КонецПроцедуры
//  Документ_ПКОРасчетыССотрудниками_Получение
Процедура ДобавитьПОД_Документ_ПКОРасчетыССотрудниками_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПКОРасчетыССотрудниками_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ПКОРасчетыССотрудниками";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПКОРасчетыССотрудниками_Получение");
КонецПроцедуры
//  Документ_ПКОРозничнаяВыручка_Получение
Процедура ДобавитьПОД_Документ_ПКОРозничнаяВыручка_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПКОРозничнаяВыручка_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ПКОРозничнаяВыручка";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПКОРозничнаяВыручка_Получение");
КонецПроцедуры
//  Документ_ПоступлениеТоваровУслуг_Получение
Процедура ДобавитьПОД_Документ_ПоступлениеТоваровУслуг_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПоступлениеТоваровУслуг_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ПоступлениеТоваровУслуг";
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ПоступлениеТоваровУслуг_Получение_ПриОбработке";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПоступлениеТоваровУслуг_Получение");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПоступлениеДопРасходов_Получение");
КонецПроцедуры

Процедура ПОД_Документ_ПоступлениеТоваровУслуг_Получение_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Документ_ПоступлениеТоваровУслуг_Получение = Ложь;
	ИспользованиеПКО.Документ_ПоступлениеДопРасходов_Получение = Ложь;
	
	Если ДанныеXDTO.Свойство("Товары") И ДанныеXDTO.Товары.Количество() > 0 Тогда
		ИспользованиеПКО.Документ_ПоступлениеТоваровУслуг_Получение = Истина;
	КонецЕсли;
	Если ДанныеXDTO.Свойство("РасшифровкаДопРасходов") И ДанныеXDTO.РасшифровкаДопРасходов.Количество() > 0 Тогда
		ИспользованиеПКО.Документ_ПоступлениеДопРасходов_Получение = Истина;
	КонецЕсли;
	
	Если ДанныеXDTO.Свойство("Услуги") И НЕ ИспользованиеПКО.Документ_ПоступлениеТоваровУслуг_Получение Тогда
		Для Каждого СтрУслуги Из ДанныеXDTO.Услуги Цикл
			Если НЕ СтрУслуги.ЭтоДопРасходы Тогда
				ИспользованиеПКО.Документ_ПоступлениеТоваровУслуг_Получение = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры
//  Документ_РеализацияТоваровУслуг_Получение
Процедура ДобавитьПОД_Документ_РеализацияТоваровУслуг_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_РеализацияТоваровУслуг_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.РеализацияТоваровУслуг";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РеализацияТоваровУслуг_Получение");
КонецПроцедуры
//  Документ_РКОВыплатаЗарплаты_Получение
Процедура ДобавитьПОД_Документ_РКОВыплатаЗарплаты_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_РКОВыплатаЗарплаты_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.РКОВыплатаЗарплаты";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РКОВыплатаЗарплаты_Получение");
КонецПроцедуры
//  Документ_РКОНаБанковскийСчет_Получение
Процедура ДобавитьПОД_Документ_РКОНаБанковскийСчет_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_РКОНаБанковскийСчет_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.РКОНаБанковскийСчет";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РКОНаБанковскийСчет_Получение");
КонецПроцедуры
//  Документ_РКОПрочаяВыдача_Получение
Процедура ДобавитьПОД_Документ_РКОПрочаяВыдача_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_РКОПрочаяВыдача_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.РКОПрочаяВыдача";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РКОПрочаяВыдача_Получение");
КонецПроцедуры
//  Документ_РКОРасчетыСКонтрагентами_Получение
Процедура ДобавитьПОД_Документ_РКОРасчетыСКонтрагентами_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_РКОРасчетыСКонтрагентами_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.РКОРасчетыСКонтрагентами";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РКОРасчетыСКонтрагентами_Получение");
КонецПроцедуры
//  Документ_РКОРасчетыССотрудниками_Получение
Процедура ДобавитьПОД_Документ_РКОРасчетыССотрудниками_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_РКОРасчетыССотрудниками_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.РКОРасчетыССотрудниками";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РКОРасчетыССотрудниками_Получение");
КонецПроцедуры
//  Документ_СБДСПереводНаДругойСчет_Получение
Процедура ДобавитьПОД_Документ_СБДСПереводНаДругойСчет_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_СБДСПереводНаДругойСчет_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.СБДСПереводНаДругойСчет";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СБДСПереводНаДругойСчет_Получение");
КонецПроцедуры
//  Документ_СБДСПеречислениеЗаработнойПлаты_Получение
Процедура ДобавитьПОД_Документ_СБДСПеречислениеЗаработнойПлаты_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_СБДСПеречислениеЗаработнойПлаты_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.СБДСПеречислениеЗаработнойПлаты";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СБДСПеречислениеЗаработнойПлаты_Получение");
КонецПроцедуры
//  Документ_СБДСПлатежиВБюджет_Получение
Процедура ДобавитьПОД_Документ_СБДСПлатежиВБюджет_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_СБДСПлатежиВБюджет_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.СБДСПлатежиВБюджет";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СБДСПлатежиВБюджет_Получение");
КонецПроцедуры
//  Документ_СБДСПрочееСписание_Получение
Процедура ДобавитьПОД_Документ_СБДСПрочееСписание_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_СБДСПрочееСписание_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.СБДСПрочееСписание";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СБДСПрочееСписание_Получение");
КонецПроцедуры
//  Документ_СБДСПрочиеРасходы_Получение
Процедура ДобавитьПОД_Документ_СБДСПрочиеРасходы_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_СБДСПрочиеРасходы_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.СБДСПрочиеРасходы";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СБДСПрочиеРасходы_Получение");
КонецПроцедуры
//  Документ_СБДСРасчетыСКонтрагентами_Получение
Процедура ДобавитьПОД_Документ_СБДСРасчетыСКонтрагентами_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_СБДСРасчетыСКонтрагентами_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.СБДСРасчетыСКонтрагентами";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СБДСРасчетыСКонтрагентами_Получение");
КонецПроцедуры
//  Документ_СБДСРасчетыССотрудниками_Получение
Процедура ДобавитьПОД_Документ_СБДСРасчетыССотрудниками_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_СБДСРасчетыССотрудниками_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.СБДСРасчетыССотрудниками";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СБДСРасчетыССотрудниками_Получение");
КонецПроцедуры
//  Документ_СборкаТоваров_Получение
Процедура ДобавитьПОД_Документ_СборкаТоваров_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_СборкаТоваров_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.СборкаТоваров";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СборкаТоваров_Получение");
КонецПроцедуры
//  Документ_СписаниеТоваров_Получение
Процедура ДобавитьПОД_Документ_СписаниеТоваров_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_СписаниеТоваров_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.СписаниеНедостач";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СписаниеТоваров_Получение");
КонецПроцедуры
//  Документ_СчетФактураВыданный_Получение
Процедура ДобавитьПОД_Документ_СчетФактураВыданный_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_СчетФактураВыданный_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.СчетФактураВыданный";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СчетФактураВыданный_Получение");
КонецПроцедуры
//  Документ_СчетФактураПолученный_Получение
Процедура ДобавитьПОД_Документ_СчетФактураПолученный_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_СчетФактураПолученный_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.СчетФактураПолученный";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СчетФактураПолученный_Получение");
КонецПроцедуры
//  Документ_УстановкаЦенНоменклатуры_Получение
Процедура ДобавитьПОД_Документ_УстановкаЦенНоменклатуры_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_УстановкаЦенНоменклатуры_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.УстановкаЦенНоменклатуры";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_УстановкаЦенНоменклатуры_Получение");
КонецПроцедуры
//  Справочник_Банки_Получение
Процедура ДобавитьПОД_Справочник_Банки_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Банки_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.Банки";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Банки");
КонецПроцедуры
//  Справочник_БанковскиеСчета_Получение
Процедура ДобавитьПОД_Справочник_БанковскиеСчета_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_БанковскиеСчета_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.БанковскиеСчета";
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_БанковскиеСчета_Получение_ПриОбработке";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_БанковскиеСчета");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_БанковскиеСчетаФизЛиц_Получение");
КонецПроцедуры

Процедура ПОД_Справочник_БанковскиеСчета_Получение_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Справочник_БанковскиеСчета = Истина;
	ИспользованиеПКО.Справочник_БанковскиеСчетаФизЛиц_Получение = Ложь;
	Если ДанныеXDTO.КлючевыеСвойства.Свойство("Владелец") И ТипЗнч(ДанныеXDTO.КлючевыеСвойства.Владелец) = Тип("Структура") Тогда
		ТипЗначенияСвойства = ДанныеXDTO.КлючевыеСвойства.Владелец.ТипЗначения;
		Если Найти(ТипЗначенияСвойства, "ФизическоеЛицо")>0 Тогда
			ИспользованиеПКО.Справочник_БанковскиеСчета = Ложь;
			ИспользованиеПКО.Справочник_БанковскиеСчетаФизЛиц_Получение = Истина;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
//  Справочник_Валюты_Получение
Процедура ДобавитьПОД_Справочник_Валюты_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Валюты_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.Валюты";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Валюты");
КонецПроцедуры
//  Справочник_Договоры_Получение
Процедура ДобавитьПОД_Справочник_Договоры_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Договоры_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.Договоры";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Договоры_Получение");
КонецПроцедуры
//  Справочник_Контрагенты_Получение
Процедура ДобавитьПОД_Справочник_Контрагенты_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Контрагенты_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.Контрагенты";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Контрагенты");
КонецПроцедуры
//  Справочник_КонтрагентыГруппа_Получение
Процедура ДобавитьПОД_Справочник_КонтрагентыГруппа_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_КонтрагентыГруппа_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.КонтрагентыГруппа";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_КонтрагентыГруппа");
КонецПроцедуры
//  Справочник_Номенклатура_Получение
Процедура ДобавитьПОД_Справочник_Номенклатура_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Номенклатура_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.Номенклатура";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Номенклатура_Получение");
КонецПроцедуры
//  Справочник_НоменклатураГруппа_Получение
Процедура ДобавитьПОД_Справочник_НоменклатураГруппа_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_НоменклатураГруппа_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.НоменклатураГруппа";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_НоменклатураГруппа");
КонецПроцедуры
//  Справочник_Организации_Получение
Процедура ДобавитьПОД_Справочник_Организации_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Организации_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.Организации";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Организации");
КонецПроцедуры
//  Справочник_Подразделения_Получение
Процедура ДобавитьПОД_Справочник_Подразделения_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Подразделения_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.Подразделения";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Подразделения");
КонецПроцедуры
//  Справочник_Пользователи_Получение
Процедура ДобавитьПОД_Справочник_Пользователи_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Пользователи_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.Пользователи";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Пользователи");
КонецПроцедуры
//  Справочник_Склады_Получение
Процедура ДобавитьПОД_Справочник_Склады_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Склады_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.Склады";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Склады");
КонецПроцедуры
//  Справочник_СкладыГруппа_Получение
Процедура ДобавитьПОД_Справочник_СкладыГруппа_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_СкладыГруппа_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.СкладыГруппа";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СкладыГруппа");
КонецПроцедуры
//  Справочник_СпецификацииНоменклатуры_Получение
Процедура ДобавитьПОД_Справочник_СпецификацииНоменклатуры_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_СпецификацииНоменклатуры_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.СпецификацииНоменклатуры";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СпецификацииНоменклатуры_Получение");
КонецПроцедуры
//  Справочник_СтатьиДДС_Получение
Процедура ДобавитьПОД_Справочник_СтатьиДДС_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_СтатьиДДС_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.СтатьиДДС";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СтатьиДДС");
КонецПроцедуры
//  Справочник_СтатьиДДСГруппа_Получение
Процедура ДобавитьПОД_Справочник_СтатьиДДСГруппа_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_СтатьиДДСГруппа_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.СтатьиДДСГруппа";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СтатьиДДСГруппа");
КонецПроцедуры
//  Справочник_СтатьиЗатрат_Получение
Процедура ДобавитьПОД_Справочник_СтатьиЗатрат_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_СтатьиЗатрат_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.СтатьиРасходов";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СтатьиЗатрат_Получение");
КонецПроцедуры
//  Справочник_СтраныМира_Получение
Процедура ДобавитьПОД_Справочник_СтраныМира_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_СтраныМира_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.СтраныМира";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СтраныМира");
КонецПроцедуры
//  Справочник_ТипыЦен_Получение
Процедура ДобавитьПОД_Справочник_ТипыЦен_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ТипыЦен_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.ТипыЦен";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ТипыЦенНоменклатуры");
КонецПроцедуры
//  Справочник_ФизическиеЛица_Получение
Процедура ДобавитьПОД_Справочник_ФизическиеЛица_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ФизическиеЛица_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.ФизическиеЛица";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ФизическиеЛица_Получение");
КонецПроцедуры
//  Справочник_ФизическиеЛицаГруппа_Получение
Процедура ДобавитьПОД_Справочник_ФизическиеЛицаГруппа_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ФизическиеЛицаГруппа_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.ФизическиеЛицаГруппа";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ФизическиеЛицаГруппа");
КонецПроцедуры

//  ПКО
// Заполняет таблицу правил конвертации объектов.
//
// Параметры:
//  НаправлениеОбмена - строка ("Отправка" либо "Получение").
//  ПравилаКонвертации - таблица значений, в которую добавляются правила. 
Процедура ЗаполнитьПравилаКонвертацииОбъектов(НаправлениеОбмена, ПравилаКонвертации) Экспорт
	Если НаправлениеОбмена = "Отправка" Тогда
		ДобавитьПКО_Документ_АвансовыйОтчет_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_АккрПередПрочее_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_АккрПередРасчетыСКонтрагентами_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_АккрПолучПрочее_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_АккрПолучРасчетыСКонтрагентами_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ВозвратСырьяДавальцу_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ВозвратСырьяОтПереработчика_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ВозвратТоваровОтПокупателя_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ВозвратТоваровПоставщику_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ВозвратТоваровПоставщикуИзНТТ_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ВыпускПродукции_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ГТДИмпорт_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ИнкассоПередПрочее_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ИнкассоПолучПрочее_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ИнкассПередРасчетыСКонтрагентами_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ИнкассПолучРасчетыСКонтрагентами_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_КомплектацияНоменклатуры_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_КорректировкаДолга_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_КорректировкаПоступленияТоваров_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_КорректировкаРеализацииТоваров_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОперацияПоПлатежнойКарте_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОприходованиеТоваров_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОтчетДавальцу_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОтчетКомиссионера_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОтчетКомитенту_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОтчетОРозничныхПродажах_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОтчетПереработчика_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОтчетПроизводстваЗаСмену_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПередачаДавальцу_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПередачаПереработчику_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПеремещениеТоваров_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПКОПолучениеНаличныхВБанке_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПКОПрочееПоступление_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПКОРасчетыСКонтрагентами_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПКОРасчетыССотрудниками_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПКОРозничнаяВыручка_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПлатОрдерСписаниеСотрудники_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПлатПорВхПлатКарты_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПлатПорВхПрочее_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПлатПорВхРасчетыСКонтрагентами_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПлатПорИсхНалоги_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПлатПорИсхПереводНаДрСчет_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПлатПорИсхПеречислениеЗП_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПлатПорИсхПрочее_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПлатПорИсхРасчетыСКонтрагентами_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПлатПорИсхСотрудники_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПлОрдерСписПереводНаДрСчет_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПлОрдерСписПеречислениеЗП_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПлОрдерСписПрочее_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПлОрдерСписРасчетыСКонтрагентами_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПлОрПостКонвертацияВалюты_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПлОрПостПлатКарты_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПлОрПостПрочее_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПлОрПостРасчетыСКонтрагентами_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПлТребВыстПрочее_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПлТребВыстРасчетыСКонтрагентами_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПлТребПолучПрочее_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПлТребПолучРасчетыСКонтрагентами_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПоступлениеДопРасходов_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПоступлениеОтПереработчика_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПоступлениеСырьяОтДавальца_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПоступлениеТоваровУслуг_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПоступлениеТоваровУслугВНТТ_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_РеализацияОтгруженныхТоваров_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_РеализацияТоваровУслуг_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_РКОВыдачаВКассуККМ_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_РКОВыплатаЗарплаты_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_РКОНаБанковскийСчет_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_РКОПрочаяВыдача_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_РКОРасчетыСКонтрагентами_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_РКОРасчетыССотрудниками_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_СписаниеТоваров_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_СчетФактураВыданный_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_СчетФактураПолученный_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ТребованиеНакладная_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_УстановкаЦенНоменклатуры_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Договоры_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ЕдиницыИзмерения(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Номенклатура_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_СпецификацииНоменклатуры_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_СтатьиЗатрат_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ФизическиеЛица_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ХарактеристикиНоменклатуры_Отправка(ПравилаКонвертации);
	ИначеЕсли НаправлениеОбмена = "Получение" Тогда
		ДобавитьПКО_Документ_АвансовыйОтчет_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ВозвратТоваровОтПокупателя_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ВозвратТоваровПоставщику_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ВыпускПродукции_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ГТДИмпорт_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_КорректировкаДолга_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_КорректировкаПоступленияТоваров_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_КорректировкаРеализацииТоваров_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОперацияПоПлатежнойКарте_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОприходованиеТоваров_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОтчетКомиссионера_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОтчетКомитенту_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОтчетОРозничныхПродажах_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПБДСПоПлатежнымКартам_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПБДСПрочееПоступление_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПБДСПрочиеДоходы_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПБДСРасчетыСКонтрагентами_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПередачаМатериаловВПроизводство_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПеремещениеТоваров_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПКОПолучениеНаличныхВБанке_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПКОПрочееПоступление_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПКОРасчетыСКонтрагентами_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПКОРасчетыССотрудниками_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПКОРозничнаяВыручка_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПоступлениеДопРасходов_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПоступлениеТоваровУслуг_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_РеализацияТоваровУслуг_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_РКОВыдачаВКассуККМ_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_РКОВыплатаЗарплаты_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_РКОНаБанковскийСчет_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_РКОПрочаяВыдача_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_РКОРасчетыСКонтрагентами_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_РКОРасчетыССотрудниками_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_СБДСПереводНаДругойСчет_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_СБДСПеречислениеЗаработнойПлаты_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_СБДСПлатежиВБюджет_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_СБДСПрочееСписание_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_СБДСПрочиеРасходы_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_СБДСРасчетыСКонтрагентами_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_СБДСРасчетыССотрудниками_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_СборкаТоваров_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_СписаниеТоваров_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_СчетФактураВыданный_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_СчетФактураПолученный_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_УстановкаЦенНоменклатуры_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_БанковскиеСчетаФизЛиц_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Договоры_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ЕдиницыИзмеренияИзСтруктуры(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Номенклатура_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_СпецификацииНоменклатуры_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_СтатьиЗатрат_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ФизическиеЛица_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ФизлицаВКонтрагенты_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ХарактеристикиИзСтруктуры_Получение(ПравилаКонвертации);
	КонецЕсли;
	ДобавитьПКО_Справочник_Банки(ПравилаКонвертации);
	ДобавитьПКО_Справочник_БанковскиеСчета(ПравилаКонвертации);
	ДобавитьПКО_Справочник_Валюты(ПравилаКонвертации);
	ДобавитьПКО_Справочник_КЕИ(ПравилаКонвертации);
	ДобавитьПКО_Справочник_Контрагенты(ПравилаКонвертации);
	ДобавитьПКО_Справочник_КонтрагентыГруппа(ПравилаКонвертации);
	ДобавитьПКО_Справочник_НоменклатураГруппа(ПравилаКонвертации);
	ДобавитьПКО_Справочник_Организации(ПравилаКонвертации);
	ДобавитьПКО_Справочник_Подразделения(ПравилаКонвертации);
	ДобавитьПКО_Справочник_Пользователи(ПравилаКонвертации);
	ДобавитьПКО_Справочник_Склады(ПравилаКонвертации);
	ДобавитьПКО_Справочник_СкладыГруппа(ПравилаКонвертации);
	ДобавитьПКО_Справочник_СпецификацииНоменклатурыГруппа(ПравилаКонвертации);
	ДобавитьПКО_Справочник_СтатьиДДС(ПравилаКонвертации);
	ДобавитьПКО_Справочник_СтатьиДДСГруппа(ПравилаКонвертации);
	ДобавитьПКО_Справочник_СтраныМира(ПравилаКонвертации);
	ДобавитьПКО_Справочник_ТипыЦенНоменклатуры(ПравилаКонвертации);
	ДобавитьПКО_Справочник_ФизическиеЛицаГруппа(ПравилаКонвертации);
КонецПроцедуры

Функция ДобавитьПКТЧ(ПравилоКонвертации, ИмяТЧКонфигурации, ИмяТЧФормата)
    Если ПравилоКонвертации.СвойстваТабличныхЧастей.Колонки.Количество() = 0 Тогда
        ОбменДаннымиXDTOСервер.ИнициализироватьСвойстваТабличныхЧастей(ПравилоКонвертации);
    КонецЕсли;
    КонвертацияТабличнойЧасти                = ПравилоКонвертации.СвойстваТабличныхЧастей.Добавить();
    КонвертацияТабличнойЧасти.ТЧКонфигурации = ИмяТЧКонфигурации;
    КонвертацияТабличнойЧасти.ТЧФормата      = ИмяТЧФормата;
    КонвертацияТабличнойЧасти.Свойства       = ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации();
    Возврат КонвертацияТабличнойЧасти.Свойства;
КонецФункции

Процедура ДобавитьПКС(РодительПКС, СвойствоКонфигурации, СвойствоФормата, ИспользуетсяАлгоритмКонвертации = 0, 
                    ПравилоКонвертацииСвойства = "")
	НоваяСтрока                                 = РодительПКС.Добавить();
	НоваяСтрока.СвойствоКонфигурации            = СвойствоКонфигурации;
	НоваяСтрока.СвойствоФормата                 = СвойствоФормата;
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = ?(ИспользуетсяАлгоритмКонвертации = 0, Ложь, Истина);
	НоваяСтрока.ПравилоКонвертацииСвойства      = ПравилоКонвертацииСвойства;
КонецПроцедуры

//  Отправка
//  Документ_АвансовыйОтчет_Отправка
Процедура ДобавитьПКО_Документ_АвансовыйОтчет_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_АвансовыйОтчет_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.АвансовыйОтчет;
	ПравилоКонвертации.ОбъектФормата     = "Документ.АвансовыйОтчет";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_АвансовыйОтчет_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",      "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                 "Дата");
	ДобавитьПКС(СвойстваШапки, "КоличествоДокументов", "КоличествоДокументов");
	ДобавитьПКС(СвойстваШапки, "КоличествоЛистов",     "КоличествоЛистов");
	ДобавитьПКС(СвойстваШапки, "Комментарий",          "Комментарий");
	ДобавитьПКС(СвойстваШапки, "КратностьДокумента",   "КратностьДокумента");
	ДобавитьПКС(СвойстваШапки, "КурсДокумента",        "КурсДокумента");
	ДобавитьПКС(СвойстваШапки, "НазначениеАванса",     "НазначениеАванса");
	ДобавитьПКС(СвойстваШапки, "Номер",                "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",          "Организация", , "Справочник_Организации");
	ДобавитьПКС(СвойстваШапки, "Ответственный",        "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Подразделение",        "Подразделение", , "Справочник_Подразделения");
	ДобавитьПКС(СвойстваШапки, "СуммаВключаетНДС",     "СуммаВключаетНДС");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",       "Сумма");
	ДобавитьПКС(СвойстваШапки, "ФизЛицо",              "ПодотчетноеЛицо", , "Справочник_ФизическиеЛица_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                     "Склад", 1, "Справочник_Склады");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ВыданныеАвансы");
	ДобавитьПКС(СвойстваТЧ, "", "Документ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ОплатаКонтрагентам");
	ДобавитьПКС(СвойстваТЧ, "", "ВалютаВзаиморасчетов", 1,"Справочник_Валюты");
	ДобавитьПКС(СвойстваТЧ, "", "ДатаВходящегоДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Договор", 1,"Справочник_Договоры_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Контрагент", 1,"Справочник_Контрагенты");
	ДобавитьПКС(СвойстваТЧ, "", "КратностьВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КурсВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НаименованиеВходящегоДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НомерВходящегоДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "РасчетыВУсловныхЕдиницах", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Содержание", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаВзаиморасчетов", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ОплатаПоставщикам");
	ДобавитьПКС(СвойстваТЧ, "", "ВалютаВзаиморасчетов", 1,"Справочник_Валюты");
	ДобавитьПКС(СвойстваТЧ, "", "ДатаВходящегоДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Договор", 1,"Справочник_Договоры_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Контрагент", 1,"Справочник_Контрагенты");
	ДобавитьПКС(СвойстваТЧ, "", "КратностьВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КурсВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НаименованиеВходящегоДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НомерВходящегоДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "РасчетыВУсловныхЕдиницах", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Содержание", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаВзаиморасчетов", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ПрочиеРасходы");
	ДобавитьПКС(СвойстваТЧ, "", "ДатаВходящегоДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ДатаСФ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НаименованиеВходящегоДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерВходящегоДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НомерСФ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ПодразделениеЗатрат", 1,"Справочник_Подразделения");
	ДобавитьПКС(СвойстваТЧ, "", "Поставщик", 1,"Справочник_Контрагенты");
	ДобавитьПКС(СвойстваТЧ, "", "ПредъявленСФ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Содержание", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "", "СтатьяЗатрат", 1,"Справочник_СтатьиЗатрат_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СчетЗатрат", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ДатаВходящегоДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ДатаСФ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоУпаковок", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НаименованиеВходящегоДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерВходящегоДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НомерСФ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Поставщик", 1,"Справочник_Контрагенты");
	ДобавитьПКС(СвойстваТЧ, "", "ПредъявленСФ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Характеристика", 1,"Справочник_ХарактеристикиНоменклатуры_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);

КонецПроцедуры

Процедура ПКО_Документ_АвансовыйОтчет_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	Если ТипЗнч(ДанныеИБ.СкладОрдер) = Тип("СправочникСсылка.Склады") Тогда
		Склад = ДанныеИБ.СкладОрдер;
	Иначе
		Склад = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.СкладОрдер, "Склад");
	КонецЕсли;
	ДанныеXDTO.Вставить("Склад", Склад);
	
	ЗапросАвансы = Новый Запрос;
	ЗапросАвансы.Текст = "ВЫБРАТЬ
	|ТЧ.ДокументАванса КАК ДокументАванса,
	|ТЧ.Сумма КАК Сумма
	|ИЗ Документ.АвансовыйОтчет.ВыданныеАвансы КАК ТЧ
	|ГДЕ ТЧ.Ссылка = &Ссылка
	|	И НЕ (ТЧ.ДокументАванса ССЫЛКА Документ.ВыдачаДенежныхДокументов)";
	ТабАвансы = Новый ТаблицаЗначений;
	ТабАвансы.Колонки.Добавить("Документ");
	ТабАвансы.Колонки.Добавить("Сумма");
	ЗапросАвансы.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	ВыборкаАвансы = ЗапросАвансы.Выполнить().Выбрать();
	Пока ВыборкаАвансы.Следующий() Цикл
		ИмяПКО = "";
		Если ТипЗнч(ВыборкаАвансы.ДокументАванса) = Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда
			ИмяПКО = "Документ_РКОРасчетыССотрудниками_Отправка";
		ИначеЕсли ТипЗнч(ВыборкаАвансы.ДокументАванса) = Тип("ДокументСсылка.ПлатежныйОрдерСписаниеДенежныхСредств") Тогда
			ИмяПКО = "Документ_ПлатОрдерСписаниеСотрудники_Отправка";
		Иначе
			// Платежное поручение.
			ИмяПКО = "Документ_ПлатПорИсхСотрудники_Отправка";
		КонецЕсли;
		Если ИмяПКО = "" Тогда
			Продолжить;
		КонецЕсли;
		СтрАвансы = ТабАвансы.Добавить();
		СтрАвансы.Сумма = ВыборкаАвансы.Сумма;
		СтрАвансы.Документ = Новый Структура("Значение, ИмяПКО", ВыборкаАвансы.ДокументАванса, ИмяПКО);
	КонецЦикла;
	ДанныеXDTO.Вставить("ВыданныеАвансы", ТабАвансы);
	
	//Оплата поставщикам.
	ЗапросОплаты = Новый Запрос;
	ЗапросОплаты.Текст = "ВЫБРАТЬ
	|ТЧ.ВидДокВходящий КАК НаименованиеВходящегоДокумента,
	|ТЧ.ДатаВходящегоДокумента КАК ДатаВходящегоДокумента,
	|ТЧ.НомерВходящегоДокумента КАК НомерВходящегоДокумента,
	|ТЧ.Контрагент КАК Контрагент,
	|ТЧ.ДоговорКонтрагента КАК Договор,
	|ТЧ.Содержание КАК Содержание,
	|ТЧ.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
	|ТЧ.КурсВзаиморасчетов КАК КурсВзаиморасчетов,
	|ТЧ.КратностьВзаиморасчетов КАК КратностьВзаиморасчетов,
	|ТЧ.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|ТЧ.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах КАК РасчетыВУсловныхЕдиницах,
	|ТЧ.Сумма КАК Сумма
	|ИЗ Документ.АвансовыйОтчет.ОплатаПоставщикам КАК ТЧ
	|ГДЕ ТЧ.Ссылка = &Ссылка";
	ЗапросОплаты.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	ТабОплаты = ЗапросОплаты.Выполнить().Выгрузить();
	// в разных версиях формата ТЧ называются по разному.
	ДанныеXDTO.Вставить("ОплатаПоставщикам", ТабОплаты);
	ДанныеXDTO.Вставить("ОплатаКонтрагентам", ТабОплаты);
	
	// Прочие расходы.
	ЗапросРасходы = Новый Запрос;
	ЗапросРасходы.Текст = "ВЫБРАТЬ
	|ТЧ.ВидДокВходящий КАК НаименованиеВходящегоДокумента,
	|ТЧ.ДатаВходящегоДокумента КАК ДатаВходящегоДокумента,
	|ТЧ.НомерВходящегоДокумента КАК НомерВходящегоДокумента,
	|ТЧ.Поставщик КАК Поставщик,
	|ТЧ.ПредъявленСФ КАК ПредъявленСФ,
	|ТЧ.ДатаСФ КАК ДатаСФ,
	|ТЧ.НомерСФ КАК НомерСФ,
	|ТЧ.Номенклатура КАК Номенклатура,
	|ТЧ.Содержание КАК Содержание,
	|ТЧ.Сумма КАК Сумма,
	|ТЧ.СуммаНДС КАК СуммаНДС,
	|ТЧ.СтавкаНДС КАК СтавкаНДС,
	|ТЧ.СчетЗатрат.Код КАК СчетЗатрат,
	|ТЧ.СтатьяЗатрат КАК СтатьяЗатрат,
	|ТЧ.Подразделение КАК ПодразделениеЗатрат
	|ИЗ Документ.АвансовыйОтчет.Прочее КАК ТЧ
	|ГДЕ ТЧ.Ссылка = &Ссылка";
	ЗапросРасходы.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	ТабРасходы = ЗапросРасходы.Выполнить().Выгрузить();
	ДанныеXDTO.Вставить("ПрочиеРасходы", ТабРасходы);
	
	// Товары.
	ЗапросТовары = Новый Запрос;
	ЗапросТовары.Текст = "ВЫБРАТЬ
	|ТЧ.ВидДокВходящий КАК НаименованиеВходящегоДокумента,
	|ТЧ.ДатаВходящегоДокумента КАК ДатаВходящегоДокумента,
	|ТЧ.НомерВходящегоДокумента КАК НомерВходящегоДокумента,
	|ТЧ.Поставщик КАК Поставщик,
	|ТЧ.ПредъявленСФ КАК ПредъявленСФ,
	|ТЧ.ДатаСФ КАК ДатаСФ,
	|ТЧ.НомерСФ КАК НомерСФ,
	|ТЧ.Номенклатура КАК Номенклатура,
	|ТЧ.ХарактеристикаНоменклатуры КАК Характеристика,
	|ТЧ.Цена КАК Цена,
	|ТЧ.Сумма КАК Сумма,
	|ТЧ.СуммаНДС КАК СуммаНДС,
	|ТЧ.СтавкаНДС КАК СтавкаНДС,
	|ТЧ.Количество * ТЧ.Коэффициент КАК Количество,
	|ТЧ.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|ТЧ.Количество КАК КоличествоУпаковок,
	|ВЫРАЗИТЬ(""СобственныеТовары"" КАК Строка(50)) КАК ТипЗапасов
	|ИЗ Документ.АвансовыйОтчет.Товары КАК ТЧ
	|ГДЕ ТЧ.Ссылка = &Ссылка
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ
	|ТЧ.ВидДокВходящий,
	|ТЧ.ДатаВходящегоДокумента,
	|ТЧ.НомерВходящегоДокумента,
	|ТЧ.Контрагент,
	|null,
	|null,
	|null,
	|ТЧ.Номенклатура,
	|null,
	|ТЧ.Цена КАК Цена,
	|ТЧ.Сумма,
	|0,
	|null,
	|ТЧ.Количество,
	|ТЧ.Номенклатура.ЕдиницаХраненияОстатков,
	|ТЧ.Количество,
	|ВЫРАЗИТЬ(""ВозвратнаяТара"" КАК Строка(50)) КАК ТипЗапасов
	|ИЗ Документ.АвансовыйОтчет.ВозвратнаяТара КАК ТЧ
	|ГДЕ ТЧ.Ссылка = &Ссылка
	|";
	ЗапросТовары.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	ТабТовары = ЗапросТовары.Выполнить().Выгрузить();
	ДанныеXDTO.Вставить("Товары", ТабТовары);
КонецПроцедуры
//  Документ_АккрПередПрочее_Отправка
Процедура ДобавитьПКО_Документ_АккрПередПрочее_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_АккрПередПрочее_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.АккредитивПереданный;
	ПравилоКонвертации.ОбъектФормата     = "Документ.СБДСПрочееСписание";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_АккрПередПрочее_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",   "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "ВидПлатежа",        "ВидПлатежа");
	ДобавитьПКС(СвойстваШапки, "Дата",              "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "ДатаОплаты",        "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаОплаты",        "ДатаВыписки");
	ДобавитьПКС(СвойстваШапки, "Комментарий",       "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",        "Контрагент", , "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваШапки, "НазначениеПлатежа", "НазначениеПлатежа");
	ДобавитьПКС(СвойстваШапки, "Номер",             "Номер");
	ДобавитьПКС(СвойстваШапки, "Номер",             "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Организация",       "Организация", , "Справочник_Организации");
	ДобавитьПКС(СвойстваШапки, "Ответственный",     "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",    "Сумма");
	ДобавитьПКС(СвойстваШапки, "СчетКонтрагента",   "БанковскийСчет", , "Справочник_БанковскиеСчета");
	ДобавитьПКС(СвойстваШапки, "СчетОрганизации",   "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчета");
	ДобавитьПКС(СвойстваШапки, "",                  "ВидОперации", 1);
	ДобавитьПКС(СвойстваШапки, "",                  "ТипПлатежногоДокумента", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "РасшифровкаПлатежа", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "СтатьяДвиженияДенежныхСредств", "СтатьяДДС", ,"Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "СуммаПлатежа",                  "Сумма");

КонецПроцедуры

Процедура ПКО_Документ_АккрПередПрочее_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	ДанныеXDTO.Вставить("ТипПлатежногоДокумента", "Аккредитив");
	ДанныеXDTO.Вставить("ВидОперации", "ПрочееСписание");
	ПроверитьОбрезатьНазначениеПлатежа(ДанныеИБ, ДанныеXDTO);
КонецПроцедуры
//  Документ_АккрПередРасчетыСКонтрагентами_Отправка
Процедура ДобавитьПКО_Документ_АккрПередРасчетыСКонтрагентами_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_АккрПередРасчетыСКонтрагентами_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.АккредитивПереданный;
	ПравилоКонвертации.ОбъектФормата     = "Документ.СБДСРасчетыСКонтрагентами";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_АккрПередРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",   "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "ВидПлатежа",        "ВидПлатежа");
	ДобавитьПКС(СвойстваШапки, "Дата",              "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "ДатаОплаты",        "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаОплаты",        "ДатаВыписки");
	ДобавитьПКС(СвойстваШапки, "Комментарий",       "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",        "Контрагент", , "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваШапки, "НазначениеПлатежа", "НазначениеПлатежа");
	ДобавитьПКС(СвойстваШапки, "Номер",             "Номер");
	ДобавитьПКС(СвойстваШапки, "Номер",             "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Организация",       "Организация", , "Справочник_Организации");
	ДобавитьПКС(СвойстваШапки, "Ответственный",     "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",    "Сумма");
	ДобавитьПКС(СвойстваШапки, "СчетКонтрагента",   "БанковскийСчет", , "Справочник_БанковскиеСчета");
	ДобавитьПКС(СвойстваШапки, "СчетОрганизации",   "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчета");
	ДобавитьПКС(СвойстваШапки, "",                  "ВидРасчетов", 1);
	ДобавитьПКС(СвойстваШапки, "",                  "ТипПлатежногоДокумента", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "", "ВалютаВзаиморасчетов", 1,"Справочник_Валюты");
	ДобавитьПКС(СвойстваТЧ, "", "Договор", 1,"Справочник_Договоры_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "КратностьВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КурсВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "РасчетыВУсловныхЕдиницах", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "", "СтатьяДДС", 1,"Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);

КонецПроцедуры

Процедура ПКО_Документ_АккрПередРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	ВидРасчетов = "";
	ЭтоСБДСРасчетыСКонтрагентами(ДанныеИБ, ВидРасчетов);
	ДанныеXDTO.Вставить("ВидРасчетов", ВидРасчетов);
	ДанныеXDTO.Вставить("ТипПлатежногоДокумента", "Аккредитив");
	ПроверитьОбрезатьНазначениеПлатежа(ДанныеИБ, ДанныеXDTO);
	
	ПодготовитьДанныеРасчетыСКонтрагентами(ДанныеИБ, ДанныеXDTO, "АккредитивПереданный");
КонецПроцедуры
//  Документ_АккрПолучПрочее_Отправка
Процедура ДобавитьПКО_Документ_АккрПолучПрочее_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_АккрПолучПрочее_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.АккредитивПолученный;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПБДСПрочееПоступление";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_АккрПолучПрочее_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",         "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                    "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоДокумента",  "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "ДатаОплаты",              "ДатаВыписки");
	ДобавитьПКС(СвойстваШапки, "Комментарий",             "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",              "Контрагент", , "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваШапки, "НазначениеПлатежа",       "НазначениеПлатежа");
	ДобавитьПКС(СвойстваШапки, "Номер",                   "Номер");
	ДобавитьПКС(СвойстваШапки, "НомерВходящегоДокумента", "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Организация",             "Организация", , "Справочник_Организации");
	ДобавитьПКС(СвойстваШапки, "Ответственный",           "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",          "Сумма");
	ДобавитьПКС(СвойстваШапки, "СчетКонтрагента",         "БанковскийСчетКонтрагента", , "Справочник_БанковскиеСчета");
	ДобавитьПКС(СвойстваШапки, "СчетОрганизации",         "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчета");
	ДобавитьПКС(СвойстваШапки, "",                        "ТипПлатежногоДокумента", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "РасшифровкаПлатежа", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "СтатьяДвиженияДенежныхСредств", "СтатьяДДС", ,"Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "СуммаПлатежа",                  "Сумма");

КонецПроцедуры

Процедура ПКО_Документ_АккрПолучПрочее_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	ДанныеXDTO.Вставить("ТипПлатежногоДокумента", "Аккредитив");
	ПроверитьОбрезатьНазначениеПлатежа(ДанныеИБ, ДанныеXDTO);
КонецПроцедуры
//  Документ_АккрПолучРасчетыСКонтрагентами_Отправка
Процедура ДобавитьПКО_Документ_АккрПолучРасчетыСКонтрагентами_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_АккрПолучРасчетыСКонтрагентами_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.АккредитивПолученный;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПБДСРасчетыСКонтрагентами";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_АккрПолучРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",         "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                    "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоДокумента",  "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "ДатаОплаты",              "ДатаВыписки");
	ДобавитьПКС(СвойстваШапки, "Комментарий",             "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",              "Контрагент", , "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваШапки, "НазначениеПлатежа",       "НазначениеПлатежа");
	ДобавитьПКС(СвойстваШапки, "Номер",                   "Номер");
	ДобавитьПКС(СвойстваШапки, "НомерВходящегоДокумента", "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Организация",             "Организация", , "Справочник_Организации");
	ДобавитьПКС(СвойстваШапки, "Ответственный",           "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",          "Сумма");
	ДобавитьПКС(СвойстваШапки, "СчетКонтрагента",         "БанковскийСчетКонтрагента", , "Справочник_БанковскиеСчета");
	ДобавитьПКС(СвойстваШапки, "СчетОрганизации",         "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчета");
	ДобавитьПКС(СвойстваШапки, "",                        "ВидРасчетов", 1);
	ДобавитьПКС(СвойстваШапки, "",                        "ТипПлатежногоДокумента", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "", "ВалютаВзаиморасчетов", 1,"Справочник_Валюты");
	ДобавитьПКС(СвойстваТЧ, "", "Договор", 1,"Справочник_Договоры_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "КратностьВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КурсВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "РасчетыВУсловныхЕдиницах", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "", "СтатьяДДС", 1,"Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);

КонецПроцедуры

Процедура ПКО_Документ_АккрПолучРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	ВидРасчетов = "";
	ЭтоПБДСРасчетыСКонтрагентами(ДанныеИБ, ВидРасчетов);
	ДанныеXDTO.Вставить("ВидРасчетов", ВидРасчетов);
	ДанныеXDTO.Вставить("ТипПлатежногоДокумента", "Аккредитив");
	ПроверитьОбрезатьНазначениеПлатежа(ДанныеИБ, ДанныеXDTO);
	
	ПодготовитьДанныеРасчетыСКонтрагентами(ДанныеИБ, ДанныеXDTO, "АккредитивПолученный");
КонецПроцедуры
//  Документ_ВозвратСырьяДавальцу_Отправка
Процедура ДобавитьПКО_Документ_ВозвратСырьяДавальцу_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ВозвратСырьяДавальцу_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ВозвратТоваровПоставщику;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ВозвратСырьяДавальцу";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ВозвратСырьяДавальцу_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "БанковскийСчетОрганизации", "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчета");
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",           "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Грузополучатель",           "Грузополучатель", , "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваШапки, "Дата",                      "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",               "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",                "Контрагент", , "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваШапки, "КратностьВзаиморасчетов",   "КратностьВзаиморасчетов");
	ДобавитьПКС(СвойстваШапки, "КурсВзаиморасчетов",        "КурсВзаиморасчетов");
	ДобавитьПКС(СвойстваШапки, "Номер",                     "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",               "Организация", , "Справочник_Организации");
	ДобавитьПКС(СвойстваШапки, "Ответственный",             "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Подразделение",             "Подразделение", , "Справочник_Подразделения");
	ДобавитьПКС(СвойстваШапки, "Склад",                     "Склад", , "Справочник_Склады");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",            "Сумма");
	ДобавитьПКС(СвойстваШапки, "",                          "ВалютаВзаиморасчетов", 1, "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "",                          "РасчетыВУсловныхЕдиницах", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ДокументПоступления", 1,"Документ_ПоступлениеСырьяОтДавальца_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоУпаковок", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Характеристика", 1,"Справочник_ХарактеристикиНоменклатуры_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);

КонецПроцедуры

Процедура ПКО_Документ_ВозвратСырьяДавальцу_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	ДанныеДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеИБ.ДоговорКонтрагента, "РасчетыВУсловныхЕдиницах, ВалютаВзаиморасчетов");
	ДанныеXDTO.Вставить("ВалютаВзаиморасчетов", ДанныеДоговора.ВалютаВзаиморасчетов); 
	ДанныеXDTO.Вставить("РасчетыВУсловныхЕдиницах", ДанныеДоговора.РасчетыВУсловныхЕдиницах); 
	
	ЗапросТовары = Новый Запрос;
	ЗапросТовары.Текст = "ВЫБРАТЬ
	|	ТабТовары.Номенклатура КАК Номенклатура,
	|	ТабТовары.ХарактеристикаНоменклатуры КАК Характеристика,
	|	ТабТовары.ДокументПоступления КАК ДокументПоступления,
	|	ТабТовары.Количество * ТабТовары.Коэффициент КАК Количество,
	|	ТабТовары.Коэффициент КАК Коэффициент,
	|	ТабТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ТабТовары.Количество КАК КоличествоУпаковок,
	|	ТабТовары.Цена КАК Цена,
	|	ВЫРАЗИТЬ(""ДавальческиеСырьеИМатериалы"" КАК Строка(50)) КАК ТипЗапасов,
	|	ТабТовары.Сумма КАК Сумма
	|ИЗ Документ.ВозвратТоваровПоставщику.Товары КАК ТабТовары
	|ГДЕ ТабТовары.Ссылка = &Ссылка
	|";
	ЗапросТовары.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	ТабТовары = ЗапросТовары.Выполнить().Выгрузить();
	ДанныеXDTO.Вставить("Товары", ТабТовары);
КонецПроцедуры
//  Документ_ВозвратСырьяОтПереработчика_Отправка
Процедура ДобавитьПКО_Документ_ВозвратСырьяОтПереработчика_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ВозвратСырьяОтПереработчика_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ВозвратПереданныхТоваров;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ВозвратСырьяОтПереработчика";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ВозвратСырьяОтПереработчика_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента", "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",            "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",     "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",      "Контрагент", , "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваШапки, "Номер",           "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",     "Организация", , "Справочник_Организации");
	ДобавитьПКС(СвойстваШапки, "Ответственный",   "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",  "Сумма");
	ДобавитьПКС(СвойстваШапки, "",                "Склад", 1, "Справочник_Склады");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ДокументПоступления", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоУпаковок", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Характеристика", 1,"Справочник_ХарактеристикиНоменклатуры_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);

КонецПроцедуры

Процедура ПКО_Документ_ВозвратСырьяОтПереработчика_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	Если ЗначениеЗаполнено(ДанныеИБ.СкладОрдер) Тогда
		Если ТипЗнч(ДанныеИБ.СкладОрдер) = Тип("СправочникСсылка.Склады") Тогда
			Склад = ДанныеИБ.СкладОрдер;
		Иначе
			Склад = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.СкладОрдер, "Склад");
		КонецЕсли;
		ДанныеXDTO.Вставить("Склад", Склад); 
	КонецЕсли;
	ЗапросТовары = Новый Запрос;
	ЗапросТовары.Текст = "ВЫБРАТЬ
	|	ТабТовары.Номенклатура КАК Номенклатура,
	|	ТабТовары.ХарактеристикаНоменклатуры КАК Характеристика,
	|	ТабТовары.Количество * ТабТовары.Коэффициент КАК Количество,
	|	ТабТовары.Коэффициент КАК Коэффициент,
	|	ТабТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ТабТовары.ДокументПартии КАК ДокументПартии,
	|	ТабТовары.Количество КАК КоличествоУпаковок,
	|	ТабТовары.Цена КАК Цена,
	|	ТабТовары.Сумма КАК Сумма
	|ИЗ Документ.ВозвратПереданныхТоваров.Товары КАК ТабТовары
	|ГДЕ ТабТовары.Ссылка = &Ссылка
	|УПОРЯДОЧИТЬ ПО ТабТовары.НомерСтроки";
	ЗапросТовары.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	ТабТовары = ЗапросТовары.Выполнить().Выгрузить();
	ОпределитьТипыЗапасовПриОтправке(ДанныеИБ, ТабТовары);
	ТабТовары.Колонки.Добавить("ДокументПоступления");
	Для Каждого СтрТовары Из ТабТовары Цикл
		Если ЗначениеЗаполнено(СтрТовары.ДокументПартии) Тогда
			СтрТовары.ДокументПоступления = Новый Структура("Значение, ИмяПКО", СтрТовары.ДокументПартии, "Документ_ПередачаПереработчику_Отправка");
		КонецЕсли;
	КонецЦикла;
	ДанныеXDTO.Вставить("Товары", ТабТовары);
КонецПроцедуры
//  Документ_ВозвратТоваровОтПокупателя_Отправка
Процедура ДобавитьПКО_Документ_ВозвратТоваровОтПокупателя_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ВозвратТоваровОтПокупателя_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ВозвратТоваровОтПокупателя;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ВозвратТоваровОтПокупателя";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ВозвратТоваровОтПокупателя_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",                             "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                                        "Дата");
	ДобавитьПКС(СвойстваШапки, "ДоговорКонтрагента",                          "Договор", , "Справочник_Договоры_Отправка");
	ДобавитьПКС(СвойстваШапки, "Комментарий",                                 "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",                                  "Контрагент", , "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваШапки, "КратностьВзаиморасчетов",                     "КратностьВзаиморасчетов");
	ДобавитьПКС(СвойстваШапки, "КурсВзаиморасчетов",                          "КурсВзаиморасчетов");
	ДобавитьПКС(СвойстваШапки, "Номер",                                       "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",                                 "Организация", , "Справочник_Организации");
	ДобавитьПКС(СвойстваШапки, "Ответственный",                               "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Подразделение",                               "Подразделение", , "Справочник_Подразделения");
	ДобавитьПКС(СвойстваШапки, "ПокупателемВыставляетсяСчетФактураНаВозврат", "ПокупателемВыставляетсяСчетФактураНаВозврат");
	ДобавитьПКС(СвойстваШапки, "СуммаВключаетНДС",                            "СуммаВключаетНДС");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",                              "Сумма");
	ДобавитьПКС(СвойстваШапки, "",                                            "ВалютаВзаиморасчетов", 1, "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "",                                            "ВидОперации", 1);
	ДобавитьПКС(СвойстваШапки, "",                                            "ДокументРеализации", 1);
	ДобавитьПКС(СвойстваШапки, "",                                            "РасчетыВУсловныхЕдиницах", 1);
	ДобавитьПКС(СвойстваШапки, "",                                            "Склад", 1, "Справочник_Склады");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоУпаковок", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Характеристика", 1,"Справочник_ХарактеристикиНоменклатуры_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);

КонецПроцедуры

Процедура ПКО_Документ_ВозвратТоваровОтПокупателя_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	ТипЗапасовТЧТовары = "СобственныеТовары";
	ДанныеДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеИБ.ДоговорКонтрагента, "ВидДоговора, РасчетыВУсловныхЕдиницах, ВалютаВзаиморасчетов");
	Если ДанныеДоговора.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом 
		Или ДанныеДоговора.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
		ВидОперации = "ВозвратОтКомиссионера";
		ТипЗапасовТЧТовары = "КомиссионныеТовары";
	Иначе
		ВидОперации = "ВозвратОтКлиента";
	КонецЕсли;
	ДанныеXDTO.Вставить("ВидОперации", ВидОперации); 
	ДанныеXDTO.Вставить("ВалютаВзаиморасчетов", ДанныеДоговора.ВалютаВзаиморасчетов); 
	ДанныеXDTO.Вставить("РасчетыВУсловныхЕдиницах", ДанныеДоговора.РасчетыВУсловныхЕдиницах); 
	
	Если ЗначениеЗаполнено(ДанныеИБ.СкладОрдер) Тогда
		Если ТипЗнч(ДанныеИБ.СкладОрдер) = Тип("СправочникСсылка.Склады") Тогда
			Склад = ДанныеИБ.СкладОрдер;
		Иначе
			Склад = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.СкладОрдер, "Склад");
		КонецЕсли;
		ДанныеXDTO.Вставить("Склад", Склад); 
	КонецЕсли;
	Если ДанныеИБ.Товары.Количество() > 0 Тогда
		ДокРеализации = ДанныеИБ.Товары[0].ДокументПартии;
		ИмяПКО = ОпределитьИмяПКОПоСсылкеНаДокумент(ДокРеализации);
		Если НЕ ПустаяСтрока(ИмяПКО) Тогда
			ДанныеXDTO.Вставить("ДокументРеализации", Новый Структура("Значение, ИмяПКО", ДокРеализации, ИмяПКО));
		КонецЕсли;
	КонецЕсли;
	
	ЗапросТовары = Новый Запрос;
	ЗапросТовары.Текст = "ВЫБРАТЬ
	|	ТабТовары.Номенклатура КАК Номенклатура,
	|	ТабТовары.ХарактеристикаНоменклатуры КАК Характеристика,
	|	ТабТовары.Количество * ТабТовары.Коэффициент КАК Количество,
	|	ТабТовары.Коэффициент КАК Коэффициент,
	|	ТабТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ТабТовары.Количество КАК КоличествоУпаковок,
	|	ТабТовары.Цена КАК Цена,
	|	ТабТовары.СтавкаНДС КАК СтавкаНДС,
	|	ТабТовары.СуммаНДС КАК СуммаНДС,  
	|	ВЫРАЗИТЬ("""+ ТипЗапасовТЧТовары +""" КАК Строка(50)) КАК ТипЗапасов,
	|	ТабТовары.Сумма КАК Сумма
	|ИЗ Документ.ВозвратТоваровОтПокупателя.Товары КАК ТабТовары
	|ГДЕ ТабТовары.Ссылка = &Ссылка
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ
	|	ТабТара.Номенклатура,
	|	null,
	|	ТабТара.Количество,
	|	1,
	|	ТабТара.Номенклатура.ЕдиницаХраненияОстатков,
	|	ТабТара.Количество,
	|	ТабТара.Цена,
	|	null,
	|	0,  
	|	ВЫРАЗИТЬ(""ВозвратнаяТара"" КАК Строка(50)) КАК ТипЗапасов,
	|	ТабТара.Сумма КАК Сумма
	|ИЗ Документ.ВозвратТоваровОтПокупателя.ВозвратнаяТара КАК ТабТара
	|ГДЕ ТабТара.Ссылка = &Ссылка";
	ЗапросТовары.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	ДанныеXDTO.Вставить("Товары", ЗапросТовары.Выполнить().Выгрузить());
КонецПроцедуры
//  Документ_ВозвратТоваровПоставщику_Отправка
Процедура ДобавитьПКО_Документ_ВозвратТоваровПоставщику_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ВозвратТоваровПоставщику_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ВозвратТоваровПоставщику;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ВозвратТоваровПоставщику";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ВозвратТоваровПоставщику_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "БанковскийСчетОрганизации", "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчета");
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",           "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Грузоотправитель",          "Грузоотправитель", , "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваШапки, "Грузополучатель",           "Грузополучатель", , "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваШапки, "Дата",                      "Дата");
	ДобавитьПКС(СвойстваШапки, "ДоговорКонтрагента",        "Договор", , "Справочник_Договоры_Отправка");
	ДобавитьПКС(СвойстваШапки, "Комментарий",               "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",                "Контрагент", , "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваШапки, "КратностьВзаиморасчетов",   "КратностьВзаиморасчетов");
	ДобавитьПКС(СвойстваШапки, "КурсВзаиморасчетов",        "КурсВзаиморасчетов");
	ДобавитьПКС(СвойстваШапки, "Номер",                     "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",               "Организация", , "Справочник_Организации");
	ДобавитьПКС(СвойстваШапки, "Ответственный",             "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Подразделение",             "Подразделение", , "Справочник_Подразделения");
	ДобавитьПКС(СвойстваШапки, "Склад",                     "Склад", , "Справочник_Склады");
	ДобавитьПКС(СвойстваШапки, "СуммаВключаетНДС",          "СуммаВключаетНДС");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",            "Сумма");
	ДобавитьПКС(СвойстваШапки, "",                          "ВалютаВзаиморасчетов", 1, "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "",                          "ВидОперации", 1);
	ДобавитьПКС(СвойстваШапки, "",                          "РасчетыВУсловныхЕдиницах", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ДокументПоступления", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоУпаковок", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Характеристика", 1,"Справочник_ХарактеристикиНоменклатуры_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);

КонецПроцедуры

Процедура ПКО_Документ_ВозвратТоваровПоставщику_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	ДанныеДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеИБ.ДоговорКонтрагента, "ВидДоговора, РасчетыВУсловныхЕдиницах, ВалютаВзаиморасчетов");
	Если ДанныеДоговора.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом 
		Или ДанныеДоговора.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
		ВидОперации = "ВозвратКомитенту";
	Иначе
		ВидОперации = "ВозвратПоставщику";
	КонецЕсли;
	ДанныеXDTO.Вставить("ВидОперации", ВидОперации); 
	ДанныеXDTO.Вставить("ВалютаВзаиморасчетов", ДанныеДоговора.ВалютаВзаиморасчетов); 
	ДанныеXDTO.Вставить("РасчетыВУсловныхЕдиницах", ДанныеДоговора.РасчетыВУсловныхЕдиницах); 
	
	ЗапросТовары = Новый Запрос;
	ЗапросТовары.Текст = "ВЫБРАТЬ
	|	ТабТовары.Номенклатура КАК Номенклатура,
	|	ТабТовары.ХарактеристикаНоменклатуры КАК Характеристика,
	|	ТабТовары.ДокументПоступления КАК ДокПоступления,
	|	ТабТовары.Количество * ТабТовары.Коэффициент КАК Количество,
	|	ТабТовары.Коэффициент КАК Коэффициент,
	|	ТабТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ТабТовары.Количество КАК КоличествоУпаковок,
	|	ТабТовары.Цена КАК Цена,
	|	ТабТовары.СтавкаНДС КАК СтавкаНДС,
	|	ТабТовары.СуммаНДС КАК СуммаНДС,  
	|	ВЫРАЗИТЬ("""" КАК Строка(50)) КАК ТипЗапасов,
	|	ТабТовары.Сумма КАК Сумма
	|ИЗ Документ.ВозвратТоваровПоставщику.Товары КАК ТабТовары
	|ГДЕ ТабТовары.Ссылка = &Ссылка
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ
	|	ТабТара.Номенклатура,
	|	null,
	|	null,
	|	ТабТара.Количество,
	|	1,
	|	ТабТара.Номенклатура.ЕдиницаХраненияОстатков,
	|	ТабТара.Количество,
	|	ТабТара.Цена,
	|	null,
	|	0,  
	|	ВЫРАЗИТЬ(""ВозвратнаяТара"" КАК Строка(50)) КАК ТипЗапасов,
	|	ТабТара.Сумма КАК Сумма
	|ИЗ Документ.ВозвратТоваровПоставщику.ВозвратнаяТара КАК ТабТара
	|ГДЕ ТабТара.Ссылка = &Ссылка
	|";
	ЗапросТовары.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	ТабТовары = ЗапросТовары.Выполнить().Выгрузить();
	ОпределитьТипыЗапасовПриОтправке(ДанныеИБ, ТабТовары);
	ТабТовары.Колонки.Добавить("ДокументПоступления");
	Для Каждого СтрТовары Из ТабТовары Цикл
		Если НЕ ЗначениеЗаполнено(СтрТовары.ДокПоступления) Тогда
			Продолжить;
		КонецЕсли;
		ИмяПКО = ОпределитьИмяПКОПоСсылкеНаДокумент(СтрТовары.ДокПоступления);
		Если ПустаяСтрока(ИмяПКО) Тогда 
			Продолжить;
		КонецЕсли;
		СтрТовары.ДокументПоступления = Новый Структура("Значение, ИмяПКО", СтрТовары.ДокПоступления, ИмяПКО);
	КонецЦикла;
	ДанныеXDTO.Вставить("Товары", ТабТовары);
КонецПроцедуры
//  Документ_ВозвратТоваровПоставщикуИзНТТ_Отправка
Процедура ДобавитьПКО_Документ_ВозвратТоваровПоставщикуИзНТТ_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ВозвратТоваровПоставщикуИзНТТ_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ВозвратТоваровПоставщикуИзНТТ;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ВозвратТоваровПоставщику";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ВозвратТоваровПоставщикуИзНТТ_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "БанковскийСчетОрганизации", "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчета");
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",           "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Грузополучатель",           "Грузополучатель", , "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваШапки, "Дата",                      "Дата");
	ДобавитьПКС(СвойстваШапки, "ДоговорКонтрагента",        "Договор", , "Справочник_Договоры_Отправка");
	ДобавитьПКС(СвойстваШапки, "Комментарий",               "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",                "Контрагент", , "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваШапки, "КратностьВзаиморасчетов",   "КратностьВзаиморасчетов");
	ДобавитьПКС(СвойстваШапки, "КурсВзаиморасчетов",        "КурсВзаиморасчетов");
	ДобавитьПКС(СвойстваШапки, "Номер",                     "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",               "Организация", , "Справочник_Организации");
	ДобавитьПКС(СвойстваШапки, "Ответственный",             "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Подразделение",             "Подразделение", , "Справочник_Подразделения");
	ДобавитьПКС(СвойстваШапки, "Склад",                     "Склад", , "Справочник_Склады");
	ДобавитьПКС(СвойстваШапки, "СуммаВключаетНДС",          "СуммаВключаетНДС");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",            "Сумма");
	ДобавитьПКС(СвойстваШапки, "",                          "ВалютаВзаиморасчетов", 1, "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "",                          "ВидОперации", 1);
	ДобавитьПКС(СвойстваШапки, "",                          "РасчетыВУсловныхЕдиницах", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ДокументПоступления", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоУпаковок", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Характеристика", 1,"Справочник_ХарактеристикиНоменклатуры_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);

КонецПроцедуры

Процедура ПКО_Документ_ВозвратТоваровПоставщикуИзНТТ_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	ДанныеДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеИБ.ДоговорКонтрагента, "ВидДоговора, РасчетыВУсловныхЕдиницах, ВалютаВзаиморасчетов");
	Если ДанныеДоговора.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом 
		Или ДанныеДоговора.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
		ВидОперации = "ВозвратКомитенту";
	Иначе
		ВидОперации = "ВозвратПоставщику";
	КонецЕсли;
	ДанныеXDTO.Вставить("ВидОперации", ВидОперации); 
	ДанныеXDTO.Вставить("ВалютаВзаиморасчетов", ДанныеДоговора.ВалютаВзаиморасчетов); 
	ДанныеXDTO.Вставить("РасчетыВУсловныхЕдиницах", ДанныеДоговора.РасчетыВУсловныхЕдиницах); 
	
	ЗапросТовары = Новый Запрос;
	ЗапросТовары.Текст = "ВЫБРАТЬ
	|	ТабТовары.Номенклатура КАК Номенклатура,
	|	ТабТовары.ХарактеристикаНоменклатуры КАК Характеристика,
	|	ТабТовары.ДокументПоступления КАК ДокПоступления,
	|	ТабТовары.Количество * ТабТовары.Коэффициент КАК Количество,
	|	ТабТовары.Коэффициент КАК Коэффициент,
	|	ТабТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ТабТовары.Количество КАК КоличествоУпаковок,
	|	ТабТовары.Цена КАК Цена,
	|	ТабТовары.СтавкаНДС КАК СтавкаНДС,
	|	ТабТовары.СуммаНДС КАК СуммаНДС,  
	|	ВЫРАЗИТЬ("""" КАК Строка(50)) КАК ТипЗапасов,
	|	ТабТовары.Сумма КАК Сумма
	|ИЗ Документ.ВозвратТоваровПоставщикуИзНТТ.Товары КАК ТабТовары
	|ГДЕ ТабТовары.Ссылка = &Ссылка
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ
	|	ТабТара.Номенклатура,
	|	null,
	|	null,
	|	ТабТара.Количество,
	|	1,
	|	ТабТара.Номенклатура.ЕдиницаХраненияОстатков,
	|	ТабТара.Количество,
	|	ТабТара.Цена,
	|	null,
	|	0,  
	|	ВЫРАЗИТЬ(""ВозвратнаяТара"" КАК Строка(50)) КАК ТипЗапасов,
	|	ТабТара.Сумма КАК Сумма
	|ИЗ Документ.ВозвратТоваровПоставщикуИзНТТ.ВозвратнаяТара КАК ТабТара
	|ГДЕ ТабТара.Ссылка = &Ссылка
	|";
	ЗапросТовары.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	ТабТовары = ЗапросТовары.Выполнить().Выгрузить();
	ОпределитьТипыЗапасовПриОтправке(ДанныеИБ, ТабТовары);
	ТабТовары.Колонки.Добавить("ДокументПоступления");
	Для Каждого СтрТовары Из ТабТовары Цикл
		ИмяПКО = ОпределитьИмяПКОПоСсылкеНаДокумент(СтрТовары.ДокПоступления);
		Если ПустаяСтрока(ИмяПКО) Тогда 
			Продолжить;
		КонецЕсли;
		СтрТовары.ДокументПоступления = Новый Структура("Значение, ИмяПКО", СтрТовары.ДокПоступления, ИмяПКО);
	КонецЦикла;
	ДанныеXDTO.Вставить("Товары", ТабТовары);
КонецПроцедуры
//  Документ_ВыпускПродукции_Отправка
Процедура ДобавитьПКО_Документ_ВыпускПродукции_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ВыпускПродукции_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ВыпускПродукции;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ВыпускПродукции";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ВыпускПродукции_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",          "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",   "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",         "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",   "Организация", , "Справочник_Организации");
	ДобавитьПКС(СвойстваШапки, "Ответственный", "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Подразделение", "Подразделение", , "Справочник_Подразделения");
	ДобавитьПКС(СвойстваШапки, "Подразделение", "ПодразделениеЗатрат", , "Справочник_Подразделения");
	ДобавитьПКС(СвойстваШапки, "Склад",         "Склад", , "Справочник_Склады");
	ДобавитьПКС(СвойстваШапки, "",              "ВидОперации", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Продукция");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоУпаковок", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "СпецификацияНоменклатуры", 1,"Справочник_СпецификацииНоменклатуры_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Характеристика", 1,"Справочник_ХарактеристикиНоменклатуры_Отправка");

КонецПроцедуры

Процедура ПКО_Документ_ВыпускПродукции_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	ДанныеXDTO.Вставить("ВидОперации", "ВыпускПродукцииНаСклад");
	ЗапросТовары = Новый Запрос;
	ЗапросТовары.Текст = "ВЫБРАТЬ
	|	ТабТовары.Номенклатура КАК Номенклатура,
	|	ТабТовары.ХарактеристикаНоменклатуры КАК Характеристика,
	|	ТабТовары.Количество * ТабТовары.Коэффициент КАК Количество,
	|	ТабТовары.Коэффициент КАК Коэффициент,
	|	ТабТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ТабТовары.Спецификация КАК СпецификацияНоменклатуры,
	|	ТабТовары.Количество КАК КоличествоУпаковок
	|ИЗ Документ.ВыпускПродукции.Продукция КАК ТабТовары
	|ГДЕ ТабТовары.Ссылка = &Ссылка";
	ЗапросТовары.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	ТабТовары = ЗапросТовары.Выполнить().Выгрузить();
	ДанныеXDTO.Вставить("Продукция", ТабТовары);
КонецПроцедуры
//  Документ_ГТДИмпорт_Отправка
Процедура ДобавитьПКО_Документ_ГТДИмпорт_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ГТДИмпорт_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ГТДИмпорт;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ТаможеннаяДекларация";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ГТДИмпорт_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",         "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                    "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",             "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",              "Контрагент", , "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваШапки, "КратностьВзаиморасчетов", "КратностьВзаиморасчетов");
	ДобавитьПКС(СвойстваШапки, "КратностьДокумента",      "КратностьДокумента");
	ДобавитьПКС(СвойстваШапки, "КурсВзаиморасчетов",      "КурсВзаиморасчетов");
	ДобавитьПКС(СвойстваШапки, "КурсДокумента",           "КурсДокумента");
	ДобавитьПКС(СвойстваШапки, "Номер",                   "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",             "Организация", , "Справочник_Организации");
	ДобавитьПКС(СвойстваШапки, "Ответственный",           "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Подразделение",           "Подразделение", , "Справочник_Подразделения");
	ДобавитьПКС(СвойстваШапки, "ТаможенныйСбор",          "ТаможенныйСбор");
	ДобавитьПКС(СвойстваШапки, "ТаможенныйШтраф",         "ТаможенныйШтраф");
	ДобавитьПКС(СвойстваШапки, "",                        "Договор", 1, "Справочник_Договоры_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                        "НомерДекларации", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Разделы");
	ДобавитьПКС(СвойстваТЧ, "", "НДСВВалюте", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НомерРаздела", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ПошлинаВВалюте", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаПошлины", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаПошлины", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТаможеннаяСтоимость", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ДокументПоступления", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерРаздела", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтранаПроисхождения", 1,"Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаПошлины", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТаможеннаяСтоимость", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Характеристика", 1,"Справочник_ХарактеристикиНоменклатуры_Отправка");

КонецПроцедуры

Процедура ПКО_Документ_ГТДИмпорт_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	НомерДекларации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.НомерГТД, "Код");
	ДанныеXDTO.Вставить("НомерДекларации", НомерДекларации);
	ДанныеXDTO.Вставить("Договор", ?(ЗначениеЗаполнено(ДанныеИБ.ДоговорКонтрагента), ДанныеИБ.ДоговорКонтрагента, ДанныеИБ.ДоговорКонтрагентаРегл));
	
	ЗапросТовары = Новый Запрос;
	ЗапросТовары.Текст = "ВЫБРАТЬ
	|ТабТовары.Номенклатура КАК Номенклатура,
	|ТабТовары.ХарактеристикаНоменклатуры КАК Характеристика,
	|ТабТовары.Количество КАК Количество,
	|ТабТовары.НомерРаздела КАК НомерРаздела,
	|ТабТовары.ДокументПартии КАК ДокументПартии,
	|ТабТовары.Номенклатура.СтранаПроисхождения КАК СтранаПроисхождения,
	|ТабТовары.СуммаНДС КАК СуммаНДС,
	|ТабТовары.СуммаПошлины КАК СуммаПошлины,
	|ТабТовары.ФактурнаяСтоимость КАК ТаможеннаяСтоимость
	|ИЗ Документ.ГТДИмпорт.Товары КАК ТабТовары
	|ГДЕ ТабТовары.Ссылка = &Ссылка";
	ЗапросТовары.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	ТабТовары = ЗапросТовары.Выполнить().Выгрузить();
	ТабТовары.Колонки.Добавить("ДокументПоступления");
	Для Каждого СтрТовары Из ТабТовары Цикл
		Если НЕ ЗначениеЗаполнено(СтрТовары.ДокументПартии) Тогда
			Продолжить;
		КонецЕсли;
		ИмяПКО = ОпределитьИмяПКОПоСсылкеНаДокумент(СтрТовары.ДокументПартии);
		Если ПустаяСтрока(ИмяПКО) Тогда 
			Продолжить;
		КонецЕсли;
		СтрТовары.ДокументПоступления = Новый Структура("Значение, ИмяПКО", СтрТовары.ДокументПартии, ИмяПКО);
	КонецЦикла;
	ДанныеXDTO.Вставить("Товары", ТабТовары);
	
	ЗапросРазделы = Новый Запрос;
	ЗапросРазделы.Текст = "ВЫБРАТЬ
	|ТабРазделы.СтавкаПошлины КАК СтавкаПошлины,
	|ТабРазделы.СтавкаНДС КАК СтавкаНДС,
	|ТабРазделы.ПошлинаВВалюте КАК ПошлинаВВалюте,
	|ТабРазделы.НДСВВалюте КАК НДСВВалюте,
	|ТабРазделы.НомерСтроки КАК НомерРаздела,
	|ТабРазделы.СуммаНДС КАК СуммаНДС,
	|ТабРазделы.СуммаПошлины КАК СуммаПошлины,
	|ТабРазделы.ТаможеннаяСтоимость КАК ТаможеннаяСтоимость
	|ИЗ Документ.ГТДИмпорт.Разделы КАК ТабРазделы
	|ГДЕ ТабРазделы.Ссылка = &Ссылка";
	ЗапросРазделы.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	ДанныеXDTO.Вставить("Разделы", ЗапросРазделы.Выполнить().Выгрузить());
КонецПроцедуры
//  Документ_ИнкассоПередПрочее_Отправка
Процедура ДобавитьПКО_Документ_ИнкассоПередПрочее_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ИнкассоПередПрочее_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ИнкассовоеПоручениеПереданное;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПБДСПрочееПоступление";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ИнкассоПередПрочее_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",   "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",              "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "ДатаОплаты",        "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаОплаты",        "ДатаВыписки");
	ДобавитьПКС(СвойстваШапки, "Комментарий",       "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",        "Контрагент", , "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваШапки, "НазначениеПлатежа", "НазначениеПлатежа");
	ДобавитьПКС(СвойстваШапки, "Номер",             "Номер");
	ДобавитьПКС(СвойстваШапки, "Номер",             "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Организация",       "Организация", , "Справочник_Организации");
	ДобавитьПКС(СвойстваШапки, "Ответственный",     "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",    "Сумма");
	ДобавитьПКС(СвойстваШапки, "СчетКонтрагента",   "БанковскийСчетКонтрагента", , "Справочник_БанковскиеСчета");
	ДобавитьПКС(СвойстваШапки, "СчетОрганизации",   "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчета");
	ДобавитьПКС(СвойстваШапки, "",                  "ТипПлатежногоДокумента", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "РасшифровкаПлатежа", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "СтатьяДвиженияДенежныхСредств", "СтатьяДДС", ,"Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "СуммаПлатежа",                  "Сумма");

КонецПроцедуры

Процедура ПКО_Документ_ИнкассоПередПрочее_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	ДанныеXDTO.Вставить("ТипПлатежногоДокумента", "ИнкассовоеПоручение");
	ПроверитьОбрезатьНазначениеПлатежа(ДанныеИБ, ДанныеXDTO);
КонецПроцедуры
//  Документ_ИнкассоПолучПрочее_Отправка
Процедура ДобавитьПКО_Документ_ИнкассоПолучПрочее_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ИнкассоПолучПрочее_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ИнкассовоеПоручениеПолученное;
	ПравилоКонвертации.ОбъектФормата     = "Документ.СБДСПрочееСписание";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ИнкассоПолучПрочее_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",         "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "ВидПлатежа",              "ВидПлатежа");
	ДобавитьПКС(СвойстваШапки, "Дата",                    "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоДокумента",  "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "ДатаОплаты",              "ДатаВыписки");
	ДобавитьПКС(СвойстваШапки, "Комментарий",             "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",              "Контрагент", , "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваШапки, "НазначениеПлатежа",       "НазначениеПлатежа");
	ДобавитьПКС(СвойстваШапки, "Номер",                   "Номер");
	ДобавитьПКС(СвойстваШапки, "НомерВходящегоДокумента", "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Организация",             "Организация", , "Справочник_Организации");
	ДобавитьПКС(СвойстваШапки, "Ответственный",           "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",          "Сумма");
	ДобавитьПКС(СвойстваШапки, "СчетКонтрагента",         "БанковскийСчет", , "Справочник_БанковскиеСчета");
	ДобавитьПКС(СвойстваШапки, "СчетОрганизации",         "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчета");
	ДобавитьПКС(СвойстваШапки, "",                        "ВидОперации", 1);
	ДобавитьПКС(СвойстваШапки, "",                        "ТипПлатежногоДокумента", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "РасшифровкаПлатежа", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "СтатьяДвиженияДенежныхСредств", "СтатьяДДС", ,"Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "СуммаПлатежа",                  "Сумма");

КонецПроцедуры

Процедура ПКО_Документ_ИнкассоПолучПрочее_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	ДанныеXDTO.Вставить("ТипПлатежногоДокумента", "ИнкассовоеПоручение");
	ДанныеXDTO.Вставить("ВидОперации", "ПрочееСписание");
	ПроверитьОбрезатьНазначениеПлатежа(ДанныеИБ, ДанныеXDTO);
КонецПроцедуры
//  Документ_ИнкассПередРасчетыСКонтрагентами_Отправка
Процедура ДобавитьПКО_Документ_ИнкассПередРасчетыСКонтрагентами_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ИнкассПередРасчетыСКонтрагентами_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ИнкассовоеПоручениеПереданное;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПБДСРасчетыСКонтрагентами";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ИнкассПередРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",   "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",              "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "ДатаОплаты",        "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаОплаты",        "ДатаВыписки");
	ДобавитьПКС(СвойстваШапки, "Комментарий",       "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",        "Контрагент", , "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваШапки, "НазначениеПлатежа", "НазначениеПлатежа");
	ДобавитьПКС(СвойстваШапки, "Номер",             "Номер");
	ДобавитьПКС(СвойстваШапки, "Номер",             "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Организация",       "Организация", , "Справочник_Организации");
	ДобавитьПКС(СвойстваШапки, "Ответственный",     "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",    "Сумма");
	ДобавитьПКС(СвойстваШапки, "СчетКонтрагента",   "БанковскийСчетКонтрагента", , "Справочник_БанковскиеСчета");
	ДобавитьПКС(СвойстваШапки, "СчетОрганизации",   "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчета");
	ДобавитьПКС(СвойстваШапки, "",                  "ВидРасчетов", 1);
	ДобавитьПКС(СвойстваШапки, "",                  "ТипПлатежногоДокумента", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "", "ВалютаВзаиморасчетов", 1,"Справочник_Валюты");
	ДобавитьПКС(СвойстваТЧ, "", "Договор", 1,"Справочник_Договоры_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "КратностьВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КурсВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "РасчетыВУсловныхЕдиницах", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "", "СтатьяДДС", 1,"Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);

КонецПроцедуры

Процедура ПКО_Документ_ИнкассПередРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	ВидРасчетов = "";
	ЭтоПБДСРасчетыСКонтрагентами(ДанныеИБ, ВидРасчетов);
	ДанныеXDTO.Вставить("ВидРасчетов", ВидРасчетов);
	ДанныеXDTO.Вставить("ТипПлатежногоДокумента", "ИнкассовоеПоручение");
	ПроверитьОбрезатьНазначениеПлатежа(ДанныеИБ, ДанныеXDTO);
	
	ПодготовитьДанныеРасчетыСКонтрагентами(ДанныеИБ, ДанныеXDTO, "ИнкассовоеПоручениеПереданное");
КонецПроцедуры
//  Документ_ИнкассПолучРасчетыСКонтрагентами_Отправка
Процедура ДобавитьПКО_Документ_ИнкассПолучРасчетыСКонтрагентами_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ИнкассПолучРасчетыСКонтрагентами_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ИнкассовоеПоручениеПолученное;
	ПравилоКонвертации.ОбъектФормата     = "Документ.СБДСРасчетыСКонтрагентами";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ИнкассПолучРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",         "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "ВидПлатежа",              "ВидПлатежа");
	ДобавитьПКС(СвойстваШапки, "Дата",                    "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоДокумента",  "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "ДатаОплаты",              "ДатаВыписки");
	ДобавитьПКС(СвойстваШапки, "Комментарий",             "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",              "Контрагент", , "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваШапки, "НазначениеПлатежа",       "НазначениеПлатежа");
	ДобавитьПКС(СвойстваШапки, "Номер",                   "Номер");
	ДобавитьПКС(СвойстваШапки, "НомерВходящегоДокумента", "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Организация",             "Организация", , "Справочник_Организации");
	ДобавитьПКС(СвойстваШапки, "Ответственный",           "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",          "Сумма");
	ДобавитьПКС(СвойстваШапки, "СчетКонтрагента",         "БанковскийСчет", , "Справочник_БанковскиеСчета");
	ДобавитьПКС(СвойстваШапки, "СчетОрганизации",         "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчета");
	ДобавитьПКС(СвойстваШапки, "",                        "ВидРасчетов", 1);
	ДобавитьПКС(СвойстваШапки, "",                        "ТипПлатежногоДокумента", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "", "ВалютаВзаиморасчетов", 1,"Справочник_Валюты");
	ДобавитьПКС(СвойстваТЧ, "", "Договор", 1,"Справочник_Договоры_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "КратностьВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КурсВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "РасчетыВУсловныхЕдиницах", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "", "СтатьяДДС", 1,"Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);

КонецПроцедуры

Процедура ПКО_Документ_ИнкассПолучРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	ВидРасчетов = "";
	ЭтоСБДСРасчетыСКонтрагентами(ДанныеИБ, ВидРасчетов);
	ДанныеXDTO.Вставить("ВидРасчетов", ВидРасчетов);
	ДанныеXDTO.Вставить("ТипПлатежногоДокумента", "ИнкассовоеПоручение");
	ПроверитьОбрезатьНазначениеПлатежа(ДанныеИБ, ДанныеXDTO);
	
	ПодготовитьДанныеРасчетыСКонтрагентами(ДанныеИБ, ДанныеXDTO, "ИнкассовоеПоручениеПолученное");
КонецПроцедуры
//  Документ_КомплектацияНоменклатуры_Отправка
Процедура ДобавитьПКО_Документ_КомплектацияНоменклатуры_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_КомплектацияНоменклатуры_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.КомплектацияНоменклатуры;
	ПравилоКонвертации.ОбъектФормата     = "Документ.СборкаТоваров";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_КомплектацияНоменклатуры_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВидКомплектации",            "ВидОперации", , "Перечисление_ВидыКомплектации");
	ДобавитьПКС(СвойстваШапки, "Дата",                       "Дата");
	ДобавитьПКС(СвойстваШапки, "ЕдиницаИзмерения",           "ЕдиницаИзмерения", , "Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваШапки, "Количество",                 "КоличествоУпаковок");
	ДобавитьПКС(СвойстваШапки, "Комментарий",                "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номенклатура",               "Номенклатура", , "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваШапки, "Номер",                      "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",                "Организация", , "Справочник_Организации");
	ДобавитьПКС(СвойстваШапки, "Ответственный",              "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Подразделение",              "Подразделение", , "Справочник_Подразделения");
	ДобавитьПКС(СвойстваШапки, "Склад",                      "Склад", , "Справочник_Склады");
	ДобавитьПКС(СвойстваШапки, "ХарактеристикаНоменклатуры", "Характеристика", , "Справочник_ХарактеристикиНоменклатуры_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                           "Количество", 1);
	ДобавитьПКС(СвойстваШапки, "",                           "ТипЗапасов", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ДоляСтоимости", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоУпаковок", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Характеристика", 1,"Справочник_ХарактеристикиНоменклатуры_Отправка");

КонецПроцедуры

Процедура ПКО_Документ_КомплектацияНоменклатуры_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.КОличество() > 1 Тогда
		Возврат;
	КонецЕсли;
	ДанныеXDTO.Вставить("Количество", ?(ДанныеИБ.Коэффициент = 0, ДанныеИБ.Количество, ДанныеИБ.Количество * ДанныеИБ.Коэффициент));
	// Тип запасов в шапке.
	Если ДанныеИБ.СтатусПартии = Перечисления.СтатусыПартийТоваров.ВозвратнаяТара Тогда
		ДанныеXDTO.Вставить("ТипЗапасов", "ВозвратнаяТара");
	ИначеЕсли ДанныеИБ.СтатусПартии = Перечисления.СтатусыПартийТоваров.ВПереработку Тогда
		ДанныеXDTO.Вставить("ТипЗапасов", "ДавальческиеСырьеИМатериалы");
	ИначеЕсли ДанныеИБ.СтатусПартии = Перечисления.СтатусыПартийТоваров.НаКомиссию Тогда
		ДанныеXDTO.Вставить("ТипЗапасов", "КомиссионныеТовары");
	Иначе
		ДанныеXDTO.Вставить("ТипЗапасов", "СобственныеТовары");
	КонецЕсли;
	
	//ТЧ Товары
	ЗапросТовары = Новый Запрос;
	ЗапросТовары.Текст = "ВЫБРАТЬ
	|	ТабТовары.Номенклатура КАК Номенклатура,
	|	ТабТовары.ХарактеристикаНоменклатуры КАК Характеристика,
	|	ТабТовары.Количество * ТабТовары.Коэффициент КАК Количество,
	|	ТабТовары.Коэффициент КАК Коэффициент,
	|	ТабТовары.ДоляСтоимости КАК ДоляСтоимости,
	|	ТабТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ТабТовары.Количество КАК КоличествоУпаковок
	|ИЗ Документ.КомплектацияНоменклатуры.Комплектующие КАК ТабТовары
	|ГДЕ ТабТовары.Ссылка = &Ссылка
	|";
	ЗапросТовары.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	ТабТовары = ЗапросТовары.Выполнить().Выгрузить();
	ОпределитьТипыЗапасовПриОтправке(ДанныеИБ, ТабТовары, ?(ДанныеИБ.ВидКомплектации = Перечисления.ВидыКомплектации.Сборка,"-","+"));
	ДанныеXDTO.Вставить("Товары", ТабТовары);
КонецПроцедуры
//  Документ_КорректировкаДолга_Отправка
Процедура ДобавитьПКО_Документ_КорректировкаДолга_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_КорректировкаДолга_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.КорректировкаДолга;
	ПравилоКонвертации.ОбъектФормата     = "Документ.КорректировкаДолга";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_КорректировкаДолга_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",    "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "ВидОперации",        "ВидОперации", , "Перечисление_ВидыОперацийКорректировкаДолга");
	ДобавитьПКС(СвойстваШапки, "Дата",               "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",        "Комментарий");
	ДобавитьПКС(СвойстваШапки, "КратностьДокумента", "КратностьДокумента");
	ДобавитьПКС(СвойстваШапки, "КурсДокумента",      "КурсДокумента");
	ДобавитьПКС(СвойстваШапки, "Номер",              "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",        "Организация", , "Справочник_Организации");
	ДобавитьПКС(СвойстваШапки, "Ответственный",      "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Подразделение",      "Подразделение", , "Справочник_Подразделения");
	ДобавитьПКС(СвойстваШапки, "",                   "КонтрагентДебитор", 1, "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваШапки, "",                   "КонтрагентКредитор", 1, "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваШапки, "",                   "СуммаДебиторскойЗадолженности", 1);
	ДобавитьПКС(СвойстваШапки, "",                   "СуммаКредиторскойЗадолженности", 1);
	ДобавитьПКС(СвойстваШапки, "",                   "СчетДт", 1);
	ДобавитьПКС(СвойстваШапки, "",                   "СчетКт", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДебиторскаяЗадолженность");
	ДобавитьПКС(СвойстваТЧ, "", "ВалютаВзаиморасчетов", 1,"Справочник_Валюты");
	ДобавитьПКС(СвойстваТЧ, "", "ВидРасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Договор", 1,"Справочник_Договоры_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "КратностьВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КурсВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СчетУчетаРасчетовПоАвансам", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СчетУчетаРасчетовСКонтрагентом", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "КредиторскаяЗадолженность");
	ДобавитьПКС(СвойстваТЧ, "", "ВалютаВзаиморасчетов", 1,"Справочник_Валюты");
	ДобавитьПКС(СвойстваТЧ, "", "ВидРасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Договор", 1,"Справочник_Договоры_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "КратностьВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КурсВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СчетУчетаРасчетовПоАвансам", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СчетУчетаРасчетовСКонтрагентом", 1);

КонецПроцедуры

Процедура ПКО_Документ_КорректировкаДолга_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.КОличество() > 1 Тогда
		Возврат;
	КонецЕсли;
	Если ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета Тогда
		ДанныеXDTO.Вставить("КонтрагентКредитор", ДанныеИБ.КонтрагентКредитор);
		ДанныеXDTO.Вставить("КонтрагентДебитор", ДанныеИБ.КонтрагентДебитор);
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.СписаниеЗадолженности Тогда
		ДанныеXDTO.Вставить("КонтрагентКредитор", ДанныеИБ.КонтрагентДебитор);
		ДанныеXDTO.Вставить("КонтрагентДебитор", ДанныеИБ.КонтрагентДебитор);
	КонецЕсли;
	Если ЗначениеЗаполнено(ДанныеИБ.СчетДт) Тогда
		ДанныеXDTO.Вставить("СчетДт", ДанныеИБ.СчетДт.Код);
	КонецЕсли;
	Если ЗначениеЗаполнено(ДанныеИБ.СчетКт) Тогда
		ДанныеXDTO.Вставить("СчетКт", ДанныеИБ.СчетКт.Код);
	КонецЕсли;
	Если ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПереносЗадолженности Тогда
		ТекстЗапросаШапка = "ВЫБРАТЬ
		|	Док.ДоговорКонтрагента КАК Договор,
		|	Док.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
		|	ВЫБОР КОГДА Док.ДоговорКонтрагента.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком)
		|		ИЛИ  Док.ДоговорКонтрагента.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СКомитентом) ТОГДА
		|		""СПоставщиком""
		|	КОГДА  Док.ДоговорКонтрагента.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПокупателем)
		|		ИЛИ  Док.ДоговорКонтрагента.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СКомиссионером) ТОГДА
		|		""СПокупателем""
		|	КОГДА Док.ДоговорКонтрагента.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.Прочее) ТОГДА
		|		""Прочее""
		|	КОНЕЦ КАК ВидРасчетов,
		|	КурсДокумента КАК КурсВзаиморасчетов,
		|	КратностьДокумента КАК КратностьВзаиморасчетов
		|ИЗ Документ.КорректировкаДолга КАК Док
		|ГДЕ Ссылка = &Ссылка";
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапросаШапка;
		Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
		ТЧШапка = Запрос.Выполнить().Выгрузить();
		ТЧШапка.Колонки.Добавить("СуммаВзаиморасчетов");
		ТЧШапка.Колонки.Добавить("Сумма");
		ТЧШапка[0].СуммаВзаиморасчетов = ДанныеИБ.СуммыДолга.Итог("Сумма");
		ТЧШапка[0].Сумма = ДанныеИБ.СуммыДолга.Итог("СуммаРегл");
	КонецЕсли;
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	ТЧ.ДоговорКонтрагента КАК Договор,
	|	ТЧ.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	ВЫБОР КОГДА ТЧ.ДоговорКонтрагента.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком)
	|		ИЛИ  ТЧ.ДоговорКонтрагента.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СКомитентом) ТОГДА
	|		""СПоставщиком""
	|	КОГДА  ТЧ.ДоговорКонтрагента.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПокупателем)
	|		ИЛИ  ТЧ.ДоговорКонтрагента.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СКомиссионером) ТОГДА
	|		""СПокупателем""
	|	КОГДА ТЧ.ДоговорКонтрагента.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.Прочее) ТОГДА
	|		""Прочее""
	|	КОНЕЦ КАК ВидРасчетов,
	|	ТЧ.КурсВзаиморасчетов КАК КурсВзаиморасчетов,
	|	ТЧ.КратностьВзаиморасчетов КАК КратностьВзаиморасчетов,
	|	ТЧ.Сумма КАК СуммаВзаиморасчетов,
	|	ТЧ.СуммаРегл КАК Сумма,
	|	ТЧ.СчетУчетаРасчетов.Код КАК СчетУчетаРасчетовСКонтрагентом,
	|	ТЧ.СчетУчетаАвансов.Код КАК СчетУчетаРасчетовПоАвансам
	|ИЗ Документ.КорректировкаДолга.СуммыДолга КАК ТЧ
	|ГДЕ ТЧ.Ссылка = &Ссылка И ТЧ.ВидЗадолженности = &ВидЗадолженности";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	Запрос.УстановитьПараметр("ВидЗадолженности", Перечисления.ВидыЗадолженности.Дебиторская);
	ТЧЗадолженность = Запрос.Выполнить().Выгрузить();
	Если ТЧЗадолженность.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("ДебиторскаяЗадолженность", ТЧЗадолженность);
		ДанныеXDTO.Вставить("СуммаДебиторскойЗадолженности", ТЧЗадолженность.Итог("СуммаВзаиморасчетов"));
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПереносЗадолженности Тогда
		// ТЧ заполняется по данным шапки.
		ДанныеXDTO.Вставить("ДебиторскаяЗадолженность", ТЧШапка);
		ДанныеXDTO.Вставить("СуммаДебиторскойЗадолженности", ТЧШапка.Итог("СуммаВзаиморасчетов"));
		ДанныеXDTO.Вставить("КонтрагентДебитор", ДанныеИБ.КонтрагентКредитор);
		ДанныеXDTO.Вставить("КонтрагентКредитор", ДанныеИБ.КонтрагентДебитор);	
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	Запрос.УстановитьПараметр("ВидЗадолженности", Перечисления.ВидыЗадолженности.Кредиторская);
	ТЧЗадолженность = Запрос.Выполнить().Выгрузить();
	Если ТЧЗадолженность.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("КредиторскаяЗадолженность", ТЧЗадолженность);
		ДанныеXDTO.Вставить("СуммаКредиторскойЗадолженности", ТЧЗадолженность.Итог("СуммаВзаиморасчетов"));
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПереносЗадолженности Тогда
		// ТЧ заполняется по данным шапки.
		ДанныеXDTO.Вставить("КредиторскаяЗадолженность", ТЧШапка);
		ДанныеXDTO.Вставить("СуммаКредиторскойЗадолженности", ТЧШапка.Итог("СуммаВзаиморасчетов"));
		ДанныеXDTO.Вставить("КонтрагентКредитор", ДанныеИБ.КонтрагентКредитор);
		ДанныеXDTO.Вставить("КонтрагентДебитор", ДанныеИБ.КонтрагентДебитор);	
	КонецЕсли;
КонецПроцедуры
//  Документ_КорректировкаПоступленияТоваров_Отправка
Процедура ДобавитьПКО_Документ_КорректировкаПоступленияТоваров_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_КорректировкаПоступленияТоваров_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.КорректировкаПоступления;
	ПравилоКонвертации.ОбъектФормата     = "Документ.КорректировкаПоступленияТоваров";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_КорректировкаПоступленияТоваров_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",         "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "ВидОперации",             "ВидОперации", , "Перечисление_ВидыОперацийИсправленияПостРеал");
	ДобавитьПКС(СвойстваШапки, "ВосстановитьНДС",         "ВосстановитьНДС");
	ДобавитьПКС(СвойстваШапки, "Грузоотправитель",        "Грузоотправитель", , "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваШапки, "Дата",                    "Дата");
	ДобавитьПКС(СвойстваШапки, "Дата",                    "ДатаИсправления");
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоДокумента",  "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "ДоговорКонтрагента",      "Договор", , "Справочник_Договоры_Отправка");
	ДобавитьПКС(СвойстваШапки, "Комментарий",             "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",              "Контрагент", , "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваШапки, "Номер",                   "Номер");
	ДобавитьПКС(СвойстваШапки, "НомерВходящегоДокумента", "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Организация",             "Организация", , "Справочник_Организации");
	ДобавитьПКС(СвойстваШапки, "Ответственный",           "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Подразделение",           "Подразделение", , "Справочник_Подразделения");
	ДобавитьПКС(СвойстваШапки, "Склад",                   "Склад", , "Справочник_Склады");
	ДобавитьПКС(СвойстваШапки, "СуммаВключаетНДС",        "СуммаВключаетНДС");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",          "Сумма");
	ДобавитьПКС(СвойстваШапки, "",                        "ДокументПоступления", 1);
	ДобавитьПКС(СвойстваШапки, "",                        "ИсправляемыйДокументПоступления", 1);
	ДобавитьПКС(СвойстваШапки, "",                        "НомерИсправления", 1);
	ДобавитьПКС(СвойстваШапки, "",                        "ОтражатьВУчете", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕстьВДокументеПоступленияРеализации", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоДоИзменения", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоДоКорректировки", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДСДоИзменения", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаДоИзменения", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаДоКорректировки", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДСДоИзменения", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДСДоКорректировки", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Характеристика", 1,"Справочник_ХарактеристикиНоменклатуры_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЦенаДоИзменения", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЦенаДоКорректировки", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Услуги");
	ДобавитьПКС(СвойстваТЧ, "", "ЕстьВДокументеПоступленияРеализации", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоДоИзменения", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоДоКорректировки", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "ПодразделениеЗатрат", 1,"Справочник_Подразделения");
	ДобавитьПКС(СвойстваТЧ, "", "Содержание", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СодержаниеДоИзменения", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДСДоИзменения", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "", "СтатьяЗатрат", 1,"Справочник_СтатьиЗатрат_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаДоИзменения", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаДоКорректировки", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДСДоИзменения", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДСДоКорректировки", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СчетЗатрат", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЦенаДоИзменения", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЦенаДоКорректировки", 1);

КонецПроцедуры

Процедура ПКО_Документ_КорректировкаПоступленияТоваров_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда 
		Возврат;
	КонецЕсли;
	ДанныеXDTO.Вставить("ОтражатьВУчете", ДанныеИБ.КорректироватьБУиНУ Или ДанныеИБ.КорректироватьНДС);
	ИмяПКО = ОпределитьИмяПКОПоСсылкеНаДокумент(ДанныеИБ.ДокументПоступления);
	Если НЕ ПустаяСтрока(ИмяПКО) Тогда
		ДанныеXDTO.Вставить("ДокументПоступления", Новый Структура("Значение, ИмяПКО", ДанныеИБ.ДокументПоступления, ИмяПКО));
	КонецЕсли;
	ИмяПКО = ОпределитьИмяПКОПоСсылкеНаДокумент(ДанныеИБ.ИсправляемыйДокументПоступления);
	Если НЕ ПустаяСтрока(ИмяПКО) Тогда
		ДанныеXDTO.Вставить("ИсправляемыйДокументПоступления", Новый Структура("Значение, ИмяПКО", ДанныеИБ.ИсправляемыйДокументПоступления, ИмяПКО));
	КонецЕсли;
	НомерИсправления = 1;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|Количество(Ссылка) КАК КоличествоДокументов
	|ИЗ Документ.КорректировкаПоступления
	|ГДЕ Дата <= &Дата И (ИсправляемыйДокументПоступления = &ИспрДокумент
	|	ИЛИ ДокументПоступления = &Документ)
	|	И Проведен И Ссылка <> &Ссылка";
	Запрос.УстановитьПараметр("Дата", ДанныеИБ.Дата);
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	Запрос.УстановитьПараметр("ИспрДокумент", ДанныеИБ.ИсправляемыйДокументПоступления);
	Запрос.УстановитьПараметр("Документ", ДанныеИБ.ДокументПоступления);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		НомерИсправления = Выборка.КоличествоДокументов + 1;
	КонецЕсли;
	ДанныеXDTO.Вставить("НомерИсправления", НомерИсправления);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|ТЧ.Номенклатура КАК Номенклатура,
	|ТЧ.ХарактеристикаНоменклатуры КАК Характеристика,
	|ТЧ.Количество КАК Количество,
	|ТЧ.Цена КАК Цена,
	|ТЧ.Сумма КАК Сумма,
	|ТЧ.СтавкаНДС КАК СтавкаНДС,
	|ТЧ.СуммаНДС КАК СуммаНДС,
	|ТЧ.ЕстьВДокументеПоступления КАК ЕстьВДокументеПоступленияРеализации,
	|ТЧ.КоличествоДоИзменения КАК КоличествоДоИзменения,
	|ТЧ.ЦенаДоИзменения КАК ЦенаДоИзменения,
	|ТЧ.СуммаДоИзменения КАК СуммаДоИзменения,
	|ТЧ.СтавкаНДСДоИзменения КАК СтавкаНДСДоИзменения,
	|ТЧ.СуммаНДСДоИзменения КАК СуммаНДСДоИзменения,
	|ТЧ.КоличествоДоКорректировки КАК КоличествоДоКорректировки,
	|ТЧ.ЦенаДоКорректировки КАК ЦенаДоКорректировки,
	|ТЧ.СуммаДоКорректировки КАК СуммаДоКорректировки,
	|ТЧ.СуммаНДСДоКорректировки КАК СуммаНДСДоКорректировки
	|ИЗ Документ.КорректировкаПоступления.Товары КАК ТЧ
	|ГДЕ ТЧ.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	ДанныеXDTO.Вставить("Товары", Запрос.Выполнить().Выгрузить());
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|ТЧ.Номенклатура КАК Номенклатура,
	|ТЧ.Содержание КАК Содержание,
	|ТЧ.Количество КАК Количество,
	|ТЧ.Цена КАК Цена,
	|ТЧ.Сумма КАК Сумма,
	|ТЧ.СтавкаНДС КАК СтавкаНДС,
	|ТЧ.СуммаНДС КАК СуммаНДС,
	|ТЧ.ЕстьВДокументеПоступления КАК ЕстьВДокументеПоступленияРеализации,
	|ТЧ.СодержаниеДоИзменения КАК СодержаниеДоИзменения,
	|ТЧ.КоличествоДоИзменения КАК КоличествоДоИзменения,
	|ТЧ.ЦенаДоИзменения КАК ЦенаДоИзменения,
	|ТЧ.СуммаДоИзменения КАК СуммаДоИзменения,
	|ТЧ.СтавкаНДСДоИзменения КАК СтавкаНДСДоИзменения,
	|ТЧ.СуммаНДСДоИзменения КАК СуммаНДСДоИзменения,
	|ТЧ.КоличествоДоКорректировки КАК КоличествоДоКорректировки,
	|ТЧ.ЦенаДоКорректировки КАК ЦенаДоКорректировки,
	|ТЧ.СуммаДоКорректировки КАК СуммаДоКорректировки,
	|ТЧ.СуммаНДСДоКорректировки КАК СуммаНДСДоКорректировки,
	|ТЧ.СчетЗатрат.Код КАК СчетЗатрат,
	|ТЧ.СтатьяЗатрат КАК СтатьяЗатрат,
	|ТЧ.Подразделение КАК ПодразделениеЗатрат
	|ИЗ Документ.КорректировкаПоступления.Услуги КАК ТЧ
	|ГДЕ ТЧ.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	ДанныеXDTO.Вставить("Услуги", Запрос.Выполнить().Выгрузить());
КонецПроцедуры
//  Документ_КорректировкаРеализацииТоваров_Отправка
Процедура ДобавитьПКО_Документ_КорректировкаРеализацииТоваров_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_КорректировкаРеализацииТоваров_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.КорректировкаРеализации;
	ПравилоКонвертации.ОбъектФормата     = "Документ.КорректировкаРеализацииТоваров";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_КорректировкаРеализацииТоваров_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "АдресДоставки",             "АдресДоставки");
	ДобавитьПКС(СвойстваШапки, "БанковскийСчетОрганизации", "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчета");
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",           "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "ВидОперации",               "ВидОперации", , "Перечисление_ВидыОперацийИсправленияПостРеал");
	ДобавитьПКС(СвойстваШапки, "Грузоотправитель",          "Грузоотправитель", , "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваШапки, "Грузополучатель",           "Грузополучатель", , "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваШапки, "Дата",                      "Дата");
	ДобавитьПКС(СвойстваШапки, "ДоговорКонтрагента",        "Договор", , "Справочник_Договоры_Отправка");
	ДобавитьПКС(СвойстваШапки, "Комментарий",               "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",                "Контрагент", , "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваШапки, "Номер",                     "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",               "Организация", , "Справочник_Организации");
	ДобавитьПКС(СвойстваШапки, "Ответственный",             "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Подразделение",             "Подразделение", , "Справочник_Подразделения");
	ДобавитьПКС(СвойстваШапки, "Склад",                     "Склад", , "Справочник_Склады");
	ДобавитьПКС(СвойстваШапки, "СуммаВключаетНДС",          "СуммаВключаетНДС");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",            "Сумма");
	ДобавитьПКС(СвойстваШапки, "",                          "ДокументРеализации", 1);
	ДобавитьПКС(СвойстваШапки, "",                          "ИсправляемыйДокументРеализации", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕстьВДокументеПоступленияРеализации", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоДоИзменения", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоДоКорректировки", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДСДоИзменения", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаДоИзменения", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаДоКорректировки", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДСДоИзменения", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДСДоКорректировки", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Характеристика", 1,"Справочник_ХарактеристикиНоменклатуры_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЦенаДоИзменения", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЦенаДоКорректировки", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Услуги");
	ДобавитьПКС(СвойстваТЧ, "", "ЕстьВДокументеПоступленияРеализации", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоДоИзменения", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоДоКорректировки", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Содержание", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СодержаниеДоИзменения", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДСДоИзменения", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаДоИзменения", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаДоКорректировки", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДСДоИзменения", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДСДоКорректировки", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЦенаДоИзменения", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЦенаДоКорректировки", 1);

КонецПроцедуры

Процедура ПКО_Документ_КорректировкаРеализацииТоваров_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда 
		Возврат;
	КонецЕсли;
	ИмяПКО = ОпределитьИмяПКОПоСсылкеНаДокумент(ДанныеИБ.ДокументРеализации);
	Если НЕ ПустаяСтрока(ИмяПКО) Тогда
		ДанныеXDTO.Вставить("ДокументРеализации", Новый Структура("Значение, ИмяПКО", ДанныеИБ.ДокументРеализации, ИмяПКО));
	КонецЕсли;
	ИмяПКО = ОпределитьИмяПКОПоСсылкеНаДокумент(ДанныеИБ.ИсправляемыйДокументРеализации);
	Если НЕ ПустаяСтрока(ИмяПКО) Тогда
		ДанныеXDTO.Вставить("ИсправляемыйДокументРеализации", Новый Структура("Значение, ИмяПКО", ДанныеИБ.ИсправляемыйДокументРеализации, ИмяПКО));
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|ТЧ.Номенклатура КАК Номенклатура,
	|ТЧ.ХарактеристикаНоменклатуры КАК Характеристика,
	|ТЧ.Количество КАК Количество,
	|ТЧ.Цена КАК Цена,
	|ТЧ.Сумма КАК Сумма,
	|ТЧ.СтавкаНДС КАК СтавкаНДС,
	|ТЧ.СуммаНДС КАК СуммаНДС,
	|ТЧ.ЕстьВДокументеРеализации КАК ЕстьВДокументеПоступленияРеализации,
	|ТЧ.КоличествоДоИзменения КАК КоличествоДоИзменения,
	|ТЧ.ЦенаДоИзменения КАК ЦенаДоИзменения,
	|ТЧ.СуммаДоИзменения КАК СуммаДоИзменения,
	|ТЧ.СтавкаНДСДоИзменения КАК СтавкаНДСДоИзменения,
	|ТЧ.СуммаНДСДоИзменения КАК СуммаНДСДоИзменения,
	|ТЧ.КоличествоДоКорректировки КАК КоличествоДоКорректировки,
	|ТЧ.ЦенаДоКорректировки КАК ЦенаДоКорректировки,
	|ТЧ.СуммаДоКорректировки КАК СуммаДоКорректировки,
	|ТЧ.СуммаНДСДоКорректировки КАК СуммаНДСДоКорректировки
	|ИЗ Документ.КорректировкаРеализации.Товары КАК ТЧ
	|ГДЕ ТЧ.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	ДанныеXDTO.Вставить("Товары", Запрос.Выполнить().Выгрузить());
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|ТЧ.Номенклатура КАК Номенклатура,
	|ТЧ.Содержание КАК Содержание,
	|ТЧ.Количество КАК Количество,
	|ТЧ.Цена КАК Цена,
	|ТЧ.Сумма КАК Сумма,
	|ТЧ.СтавкаНДС КАК СтавкаНДС,
	|ТЧ.СуммаНДС КАК СуммаНДС,
	|ТЧ.ЕстьВДокументеРеализации КАК ЕстьВДокументеПоступленияРеализации,
	|ТЧ.СодержаниеДоИзменения КАК СодержаниеДоИзменения,
	|ТЧ.КоличествоДоИзменения КАК КоличествоДоИзменения,
	|ТЧ.ЦенаДоИзменения КАК ЦенаДоИзменения,
	|ТЧ.СуммаДоИзменения КАК СуммаДоИзменения,
	|ТЧ.СтавкаНДСДоИзменения КАК СтавкаНДСДоИзменения,
	|ТЧ.СуммаНДСДоИзменения КАК СуммаНДСДоИзменения,
	|ТЧ.КоличествоДоКорректировки КАК КоличествоДоКорректировки,
	|ТЧ.ЦенаДоКорректировки КАК ЦенаДоКорректировки,
	|ТЧ.СуммаДоКорректировки КАК СуммаДоКорректировки,
	|ТЧ.СуммаНДСДоКорректировки КАК СуммаНДСДоКорректировки
	|ИЗ Документ.КорректировкаРеализации.Услуги КАК ТЧ
	|ГДЕ ТЧ.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	ДанныеXDTO.Вставить("Услуги", Запрос.Выполнить().Выгрузить());
КонецПроцедуры
//  Документ_ОперацияПоПлатежнойКарте_Отправка
Процедура ДобавитьПКО_Документ_ОперацияПоПлатежнойКарте_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ОперацияПоПлатежнойКарте_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ОплатаОтПокупателяПлатежнойКартой;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ОперацияПоПлатежнойКарте";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ОперацияПоПлатежнойКарте_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента", "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "ВидОперации",     "ВидОперации", , "Перечисление_ВидыОперацийПоПлатежнойКарте");
	ДобавитьПКС(СвойстваШапки, "Дата",            "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",     "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",      "Контрагент", , "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваШапки, "Номер",           "Номер");
	ДобавитьПКС(СвойстваШапки, "НомерЧекаККМ",    "НомерЧекаККМ");
	ДобавитьПКС(СвойстваШапки, "Организация",     "Организация", , "Справочник_Организации");
	ДобавитьПКС(СвойстваШапки, "Ответственный",   "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Подразделение",   "Подразделение", , "Справочник_Подразделения");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",  "Сумма");
	ДобавитьПКС(СвойстваШапки, "Эквайрер",        "Эквайрер", , "Справочник_Контрагенты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "", "ВалютаВзаиморасчетов", 1,"Справочник_Валюты");
	ДобавитьПКС(СвойстваТЧ, "", "КратностьВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КурсВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "РасчетыВУсловныхЕдиницах", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "", "СтатьяДДС", 1,"Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);

КонецПроцедуры

Процедура ПКО_Документ_ОперацияПоПлатежнойКарте_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|РП.ДоговорКонтрагента КАК Договор,
	|РП.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|РП.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах КАК РасчетыВУсловныхЕдиницах,
	|РП.КурсВзаиморасчетов КАК КурсВзаиморасчетов,
	|РП.КратностьВзаиморасчетов КАК КратностьВзаиморасчетов,
	|РП.СтавкаНДС КАК СтавкаНДС,
	|РП.СтатьяДвиженияДенежныхСредств КАК СтатьяДДС,
	|РП.СуммаНДС КАК СуммаНДС,
	|РП.СуммаПлатежа КАК Сумма,
	|РП.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов
	|ИЗ Документ.ОплатаОтПокупателяПлатежнойКартой.РасшифровкаПлатежа КАК РП
	|ГДЕ РП.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", Запрос.Выполнить().Выгрузить());
КонецПроцедуры
//  Документ_ОприходованиеТоваров_Отправка
Процедура ДобавитьПКО_Документ_ОприходованиеТоваров_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ОприходованиеТоваров_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ОприходованиеТоваров;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ОприходованиеТоваров";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ОприходованиеТоваров_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",           "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",    "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",          "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",    "Организация", , "Справочник_Организации");
	ДобавитьПКС(СвойстваШапки, "Основание",      "Основание");
	ДобавитьПКС(СвойстваШапки, "Склад",          "Склад", , "Справочник_Склады");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента", "Сумма");
	ДобавитьПКС(СвойстваШапки, "ТипЦен",         "ТипЦен", , "Справочник_ТипыЦенНоменклатуры");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоУпаковок", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Характеристика", 1,"Справочник_ХарактеристикиНоменклатуры_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);

КонецПроцедуры

Процедура ПКО_Документ_ОприходованиеТоваров_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ЗапросТовары = Новый Запрос;
	ЗапросТовары.Текст = "ВЫБРАТЬ
	|	ТабТовары.Номенклатура КАК Номенклатура,
	|	ТабТовары.ХарактеристикаНоменклатуры КАК Характеристика,
	|	ТабТовары.Количество * ТабТовары.Коэффициент КАК Количество,
	|	ТабТовары.Коэффициент КАК Коэффициент,
	|	ТабТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ТабТовары.Количество КАК КоличествоУпаковок,
	|	ТабТовары.Цена КАК Цена,
	|	ТабТовары.Сумма КАК Сумма
	|ИЗ Документ.ОприходованиеТоваров.Товары КАК ТабТовары
	|ГДЕ ТабТовары.Ссылка = &Ссылка
	|УПОРЯДОЧИТЬ ПО ТабТовары.НомерСтроки";
	ЗапросТовары.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	ТабТовары = ЗапросТовары.Выполнить().Выгрузить();
	ОпределитьТипыЗапасовПриОтправке(ДанныеИБ, ТабТовары);
	ДанныеXDTO.Вставить("Товары", ТабТовары);
КонецПроцедуры
//  Документ_ОтчетДавальцу_Отправка
Процедура ДобавитьПКО_Документ_ОтчетДавальцу_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ОтчетДавальцу_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.РеализацияУслугПоПереработке;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ОтчетДавальцу";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ОтчетДавальцу_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",         "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                    "Дата");
	ДобавитьПКС(СвойстваШапки, "ДоговорКонтрагента",      "Договор", , "Справочник_Договоры_Отправка");
	ДобавитьПКС(СвойстваШапки, "Исполнитель",             "Исполнитель", , "Справочник_ФизическиеЛица_Отправка");
	ДобавитьПКС(СвойстваШапки, "Комментарий",             "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",              "Контрагент", , "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваШапки, "КратностьВзаиморасчетов", "КратностьВзаиморасчетов");
	ДобавитьПКС(СвойстваШапки, "КурсВзаиморасчетов",      "КурсВзаиморасчетов");
	ДобавитьПКС(СвойстваШапки, "Номер",                   "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",             "Организация", , "Справочник_Организации");
	ДобавитьПКС(СвойстваШапки, "Ответственный",           "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Подразделение",           "Подразделение", , "Справочник_Подразделения");
	ДобавитьПКС(СвойстваШапки, "СуммаВключаетНДС",        "СуммаВключаетНДС");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",          "Сумма");
	ДобавитьПКС(СвойстваШапки, "",                        "ВалютаВзаиморасчетов", 1, "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "",                        "РасчетыВУсловныхЕдиницах", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "МатериалыЗаказчика");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоУпаковок", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Характеристика", 1,"Справочник_ХарактеристикиНоменклатуры_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Услуги");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Содержание", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);

КонецПроцедуры

Процедура ПКО_Документ_ОтчетДавальцу_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	ДанныеДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеИБ.ДоговорКонтрагента, "РасчетыВУсловныхЕдиницах, ВалютаВзаиморасчетов");
	
	ДанныеXDTO.Вставить("ВалютаВзаиморасчетов", ДанныеДоговора.ВалютаВзаиморасчетов); 
	ДанныеXDTO.Вставить("РасчетыВУсловныхЕдиницах", ДанныеДоговора.РасчетыВУсловныхЕдиницах);
	
	ЗапросТовары = Новый Запрос;
	ЗапросТовары.Текст = "ВЫБРАТЬ
	|	ТабТовары.Номенклатура КАК Номенклатура,
	|	ТабТовары.ХарактеристикаНоменклатуры КАК Характеристика,
	|	ТабТовары.Количество * ТабТовары.Коэффициент КАК Количество,
	|	ТабТовары.Коэффициент КАК Коэффициент,
	|	ТабТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ТабТовары.Количество КАК КоличествоУпаковок
	|ИЗ Документ.РеализацияУслугПоПереработке.ИспользованныеМатериалы КАК ТабТовары
	|ГДЕ ТабТовары.Ссылка = &Ссылка
	|УПОРЯДОЧИТЬ ПО ТабТовары.НомерСтроки";
	ЗапросТовары.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	ТабТовары = ЗапросТовары.Выполнить().Выгрузить();
	ДанныеXDTO.Вставить("МатериалыЗаказчика", ТабТовары); 
	
	ЗапросУслуги = Новый Запрос;
	ЗапросУслуги.Текст = "ВЫБРАТЬ
	|	ТабУслуги.Номенклатура КАК Номенклатура,
	|	ТабУслуги.Содержание КАК Содержание,
	|	ТабУслуги.Количество КАК Количество,
	|	ТабУслуги.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаИзмерения,
	|	ТабУслуги.Цена КАК Цена,
	|	ТабУслуги.Сумма КАК Сумма,
	|	ТабУслуги.СтавкаНДС КАК СтавкаНДС,
	|	ТабУслуги.СуммаНДС КАК СуммаНДС
	|ИЗ Документ.РеализацияУслугПоПереработке.Услуги КАК ТабУслуги
	|ГДЕ ТабУслуги.Ссылка = &Ссылка
	|ОБЪЕДИНИТЬ ВСЕ
	|	ВЫБРАТЬ
	|	ТабПродукция.Номенклатура КАК Номенклатура,
	|	ТабПродукция.Номенклатура.Наименование КАК Содержание,
	|	ТабПродукция.Количество * ТабПродукция.Коэффициент КАК Количество, 
	|	ТабПродукция.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ТабПродукция.Цена КАК Цена,
	|	ТабПродукция.Сумма КАК Сумма,
	|	ТабПродукция.СтавкаНДС КАК СтавкаНДС,
	|	ТабПродукция.СуммаНДС КАК СуммаНДС
	|ИЗ Документ.РеализацияУслугПоПереработке.Продукция КАК ТабПродукция
	|ГДЕ ТабПродукция.Ссылка = &Ссылка
	|";
	ЗапросУслуги.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	ТабУслуги = ЗапросУслуги.Выполнить().Выгрузить();
	ДанныеXDTO.Вставить("Услуги", ТабУслуги);
КонецПроцедуры
//  Документ_ОтчетКомиссионера_Отправка
Процедура ДобавитьПКО_Документ_ОтчетКомиссионера_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ОтчетКомиссионера_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ОтчетКомиссионераОПродажах;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ОтчетКомиссионера";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ОтчетКомиссионера_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",                          "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                                     "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоДокумента",                   "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "ДоговорКонтрагента",                       "Договор", , "Справочник_Договоры_Отправка");
	ДобавитьПКС(СвойстваШапки, "Комментарий",                              "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",                               "Контрагент", , "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваШапки, "КратностьВзаиморасчетов",                  "КратностьВзаиморасчетов");
	ДобавитьПКС(СвойстваШапки, "КурсВзаиморасчетов",                       "КурсВзаиморасчетов");
	ДобавитьПКС(СвойстваШапки, "Номер",                                    "Номер");
	ДобавитьПКС(СвойстваШапки, "НомерВходящегоДокумента",                  "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Организация",                              "Организация", , "Справочник_Организации");
	ДобавитьПКС(СвойстваШапки, "Ответственный",                            "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Подразделение",                            "ПодразделениеЗатрат", , "Справочник_Подразделения");
	ДобавитьПКС(СвойстваШапки, "ПроцентКомиссионногоВознаграждения",       "ПроцентКомиссионногоВознаграждения");
	ДобавитьПКС(СвойстваШапки, "СпособРасчетаКомиссионногоВознаграждения", "СпособРасчетаКомиссионногоВознаграждения", , "Перечисление_СпособыРасчетаКомВознагр");
	ДобавитьПКС(СвойстваШапки, "СтавкаНДСВознаграждения",                  "СтавкаНДСВознаграждения", , "Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваШапки, "СтатьяЗатрат",                             "СтатьяЗатрат", , "Справочник_СтатьиЗатрат_Отправка");
	ДобавитьПКС(СвойстваШапки, "СуммаВключаетНДС",                         "СуммаВключаетНДС");
	ДобавитьПКС(СвойстваШапки, "СуммаВознаграждения",                      "СуммаВознаграждения");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",                           "Сумма");
	ДобавитьПКС(СвойстваШапки, "УдержатьКомиссионноеВознаграждение",       "УдержатьКомиссионноеВознаграждение");
	ДобавитьПКС(СвойстваШапки, "",                                         "ВалютаВзаиморасчетов", 1, "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "",                                         "РасчетыВУсловныхЕдиницах", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Покупатели");
	ДобавитьПКС(СвойстваТЧ, "", "ВыставленСФ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КлючСтроки", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Покупатель", 1,"Справочник_Контрагенты");
	ДобавитьПКС(СвойстваТЧ, "", "СчетФактура", 1,"Документ_СчетФактураВыданный_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "КлючСтроки", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоУпаковок", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаВознаграждения", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДСВознаграждения", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаПередачи", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Характеристика", 1,"Справочник_ХарактеристикиНоменклатуры_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЦенаПередачи", 1);

КонецПроцедуры

Процедура ПКО_Документ_ОтчетКомиссионера_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	ДанныеДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеИБ.ДоговорКонтрагента, "РасчетыВУсловныхЕдиницах, ВалютаВзаиморасчетов");
	ДанныеXDTO.Вставить("ВалютаВзаиморасчетов", ДанныеДоговора.ВалютаВзаиморасчетов); 
	ДанныеXDTO.Вставить("РасчетыВУсловныхЕдиницах", ДанныеДоговора.РасчетыВУсловныхЕдиницах); 
	
	ЗапросТовары = Новый Запрос;
	ЗапросТовары.Текст = "ВЫБРАТЬ
	|	ТабТовары.Номенклатура КАК Номенклатура,
	|	ТабТовары.ХарактеристикаНоменклатуры КАК Характеристика,
	|	ТабТовары.Количество * ТабТовары.Коэффициент КАК Количество,
	|	ТабТовары.Коэффициент КАК Коэффициент,
	|	ТабТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ТабТовары.Количество КАК КоличествоУпаковок,
	|	ТабТовары.Цена КАК Цена,
	|	ТабТовары.СтавкаНДС КАК СтавкаНДС,
	|	ТабТовары.СуммаНДС КАК СуммаНДС,  
	|	ТабТовары.Сумма КАК Сумма,
	|	ТабТовары.СуммаВознаграждения КАК СуммаВознаграждения,
	|	ТабТовары.СуммаНДСВознаграждения КАК СуммаНДСВознаграждения,
	|	ТабТовары.ЦенаПередачи КАК ЦенаПередачи,  
	|	ТабТовары.СуммаПередачи КАК СуммаПередачи,
	|	ТабТовары.СуммаНДСПередачи КАК СуммаНДСПередачи, 
	|	ТабТовары.КлючСтроки + 1 КАК КлючСтроки 
	|ИЗ Документ.ОтчетКомиссионераОПродажах.Товары КАК ТабТовары
	|ГДЕ ТабТовары.Ссылка = &Ссылка";
	ЗапросТовары.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	ДанныеXDTO.Вставить("Товары", ЗапросТовары.Выполнить().Выгрузить());
	
	ЗапросПокупатели = Новый Запрос;
	ЗапросПокупатели.Текст = "ВЫБРАТЬ
	|	ТЧ.ВыставленСФ КАК ВыставленСФ,
	|	ТЧ.Покупатель КАК Покупатель,
	|	ТЧ.СчетФактура КАК СчетФактура,
	|	ТЧ.КлючСтроки + 1 КАК КлючСтроки 
	|ИЗ Документ.ОтчетКомиссионераОПродажах.Покупатели КАК ТЧ
	|ГДЕ ТЧ.Ссылка = &Ссылка";
	ЗапросПокупатели.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	
	ДанныеXDTO.Вставить("Покупатели", ЗапросПокупатели.Выполнить().Выгрузить());
КонецПроцедуры
//  Документ_ОтчетКомитенту_Отправка
Процедура ДобавитьПКО_Документ_ОтчетКомитенту_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ОтчетКомитенту_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ОтчетКомитентуОПродажах;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ОтчетКомитенту";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ОтчетКомитенту_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",                          "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                                     "Дата");
	ДобавитьПКС(СвойстваШапки, "ДоговорКонтрагента",                       "Договор", , "Справочник_Договоры_Отправка");
	ДобавитьПКС(СвойстваШапки, "Комментарий",                              "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",                               "Контрагент", , "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваШапки, "КратностьВзаиморасчетов",                  "КратностьВзаиморасчетов");
	ДобавитьПКС(СвойстваШапки, "КурсВзаиморасчетов",                       "КурсВзаиморасчетов");
	ДобавитьПКС(СвойстваШапки, "Номер",                                    "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",                              "Организация", , "Справочник_Организации");
	ДобавитьПКС(СвойстваШапки, "Ответственный",                            "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Подразделение",                            "Подразделение", , "Справочник_Подразделения");
	ДобавитьПКС(СвойстваШапки, "ПроцентКомиссионногоВознаграждения",       "ПроцентКомиссионногоВознаграждения");
	ДобавитьПКС(СвойстваШапки, "СпособРасчетаКомиссионногоВознаграждения", "СпособРасчетаКомиссионногоВознаграждения", , "Перечисление_СпособыРасчетаКомВознагр");
	ДобавитьПКС(СвойстваШапки, "СтавкаНДСВознаграждения",                  "СтавкаНДСВознаграждения", , "Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваШапки, "СуммаВознаграждения",                      "СуммаВознаграждения");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",                           "Сумма");
	ДобавитьПКС(СвойстваШапки, "УдержатьКомиссионноеВознаграждение",       "УдержатьКомиссионноеВознаграждение");
	ДобавитьПКС(СвойстваШапки, "УслугаПоВознаграждению",                   "УслугаПоВознаграждению", , "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                                         "ВалютаВзаиморасчетов", 1, "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "",                                         "РасчетыВУсловныхЕдиницах", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ДатаРеализации", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоУпаковок", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Покупатель", 1,"Справочник_Контрагенты");
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаВознаграждения", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДСВознаграждения", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаПоступления", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Характеристика", 1,"Справочник_ХарактеристикиНоменклатуры_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЦенаПоступления", 1);

КонецПроцедуры

Процедура ПКО_Документ_ОтчетКомитенту_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	ДанныеДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеИБ.ДоговорКонтрагента, "РасчетыВУсловныхЕдиницах, ВалютаВзаиморасчетов");
	ДанныеXDTO.Вставить("ВалютаВзаиморасчетов", ДанныеДоговора.ВалютаВзаиморасчетов); 
	ДанныеXDTO.Вставить("РасчетыВУсловныхЕдиницах", ДанныеДоговора.РасчетыВУсловныхЕдиницах); 
	
	ЗапросТовары = Новый Запрос;
	ЗапросТовары.Текст = "ВЫБРАТЬ
	|	ТабТовары.Номенклатура КАК Номенклатура,
	|	ТабТовары.ХарактеристикаНоменклатуры КАК Характеристика,
	|	ТабТовары.Количество * ТабТовары.Коэффициент КАК Количество,
	|	ТабТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ТабТовары.Количество КАК КоличествоУпаковок,
	|	ТабТовары.Цена КАК Цена,
	|	ТабТовары.ЦенаПоступления КАК ЦенаПоступления,
	|	ТабТовары.Сумма КАК Сумма,
	|	ТабТовары.СуммаВознаграждения КАК СуммаВознаграждения,
	|	ТабТовары.СуммаНДСВознаграждения КАК СуммаНДСВознаграждения,
	|	ТабТовары.СуммаПоступления КАК СуммаПоступления,
	|	ТабТовары.Покупатель КАК Покупатель,
	|	ТабТовары.ДатаРеализации КАК ДатаРеализации  
	|ИЗ Документ.ОтчетКомитентуОПродажах.Товары КАК ТабТовары
	|ГДЕ ТабТовары.Ссылка = &Ссылка";
	ЗапросТовары.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	ДанныеXDTO.Вставить("Товары", ЗапросТовары.Выполнить().Выгрузить());
КонецПроцедуры
//  Документ_ОтчетОРозничныхПродажах_Отправка
Процедура ДобавитьПКО_Документ_ОтчетОРозничныхПродажах_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ОтчетОРозничныхПродажах_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ОтчетОРозничныхПродажах;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ОтчетОРозничныхПродажах";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ОтчетОРозничныхПродажах_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",                          "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",                   "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",                         "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",                   "Организация", , "Справочник_Организации");
	ДобавитьПКС(СвойстваШапки, "Ответственный",                 "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Подразделение",                 "Подразделение", , "Справочник_Подразделения");
	ДобавитьПКС(СвойстваШапки, "СтатьяДвиженияДенежныхСредств", "СтатьяДДС", , "Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваШапки, "СуммаВключаетНДС",              "СуммаВключаетНДС");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",                "Сумма");
	ДобавитьПКС(СвойстваШапки, "ТипЦен",                        "ТипЦен", , "Справочник_ТипыЦенНоменклатуры");
	ДобавитьПКС(СвойстваШапки, "",                              "Валюта", 1, "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "",                              "Склад", 1, "Справочник_Склады");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоУпаковок", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Характеристика", 1,"Справочник_ХарактеристикиНоменклатуры_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);

КонецПроцедуры

Процедура ПКО_Документ_ОтчетОРозничныхПродажах_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	ДанныеXDTO.Вставить("Валюта", Константы.ВалютаРегламентированногоУчета.Получить());
	Если ЗначениеЗаполнено(ДанныеИБ.Склад) Тогда
		ДанныеXDTO.Вставить("Склад", ДанныеИБ.Склад);
	Иначе
		ДанныеXDTO.Вставить("Склад", ДанныеИБ.Товары[0].Склад);
	КонецЕсли;
	ЗапросТовары = Новый Запрос;
	ЗапросТовары.Текст = "ВЫБРАТЬ
	|	ТабТовары.Номенклатура КАК Номенклатура,
	|	ТабТовары.ХарактеристикаНоменклатуры КАК Характеристика,
	|	ТабТовары.Количество * ТабТовары.Коэффициент КАК Количество,
	|	ТабТовары.Коэффициент КАК Коэффициент,
	|	ТабТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ТабТовары.Количество КАК КоличествоУпаковок,
	|	ТабТовары.Цена КАК Цена,
	|	ТабТовары.СтавкаНДС КАК СтавкаНДС,
	|	ТабТовары.СуммаНДС КАК СуммаНДС,
	|	ТабТовары.Сумма КАК Сумма
	|ИЗ Документ.ОтчетОРозничныхПродажах.Товары КАК ТабТовары
	|ГДЕ ТабТовары.Ссылка = &Ссылка
	|";
	ЗапросТовары.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	ТабТовары = ЗапросТовары.Выполнить().Выгрузить();
	ОпределитьТипыЗапасовПриОтправке(ДанныеИБ, ТабТовары);
	ДанныеXDTO.Вставить("Товары", ТабТовары);
КонецПроцедуры
//  Документ_ОтчетПереработчика_Отправка
Процедура ДобавитьПКО_Документ_ОтчетПереработчика_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ОтчетПереработчика_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПолучениеУслугПоПереработке;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ОтчетПереработчика";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ОтчетПереработчика_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",         "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                    "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоДокумента",  "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "ДоговорКонтрагента",      "Договор", , "Справочник_Договоры_Отправка");
	ДобавитьПКС(СвойстваШапки, "Комментарий",             "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",              "Контрагент", , "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваШапки, "КратностьВзаиморасчетов", "КратностьВзаиморасчетов");
	ДобавитьПКС(СвойстваШапки, "КурсВзаиморасчетов",      "КурсВзаиморасчетов");
	ДобавитьПКС(СвойстваШапки, "Номер",                   "Номер");
	ДобавитьПКС(СвойстваШапки, "НомерВходящегоДокумента", "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Организация",             "Организация", , "Справочник_Организации");
	ДобавитьПКС(СвойстваШапки, "Ответственный",           "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Подразделение",           "Подразделение", , "Справочник_Подразделения");
	ДобавитьПКС(СвойстваШапки, "СуммаВключаетНДС",        "СуммаВключаетНДС");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",          "Сумма");
	ДобавитьПКС(СвойстваШапки, "",                        "ВалютаВзаиморасчетов", 1, "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "",                        "РасчетыВУсловныхЕдиницах", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Материалы");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоУпаковок", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Характеристика", 1,"Справочник_ХарактеристикиНоменклатуры_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Продукция");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоУпаковок", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Характеристика", 1,"Справочник_ХарактеристикиНоменклатуры_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Услуги");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Содержание", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);

КонецПроцедуры

Процедура ПКО_Документ_ОтчетПереработчика_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	ДанныеДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеИБ.ДоговорКонтрагента, "РасчетыВУсловныхЕдиницах, ВалютаВзаиморасчетов");
	
	ДанныеXDTO.Вставить("ВалютаВзаиморасчетов", ДанныеДоговора.ВалютаВзаиморасчетов); 
	ДанныеXDTO.Вставить("РасчетыВУсловныхЕдиницах", ДанныеДоговора.РасчетыВУсловныхЕдиницах);
	
	ЗапросТовары = Новый Запрос;
	ЗапросТовары.Текст = "ВЫБРАТЬ
	|	ТабТовары.Номенклатура КАК Номенклатура,
	|	ТабТовары.ХарактеристикаНоменклатуры КАК Характеристика,
	|	ТабТовары.Количество * ТабТовары.Коэффициент КАК Количество,
	|	ТабТовары.Коэффициент КАК Коэффициент,
	|	ТабТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ТабТовары.Количество КАК КоличествоУпаковок
	|ИЗ Документ.ПолучениеУслугПоПереработке.ИспользованныеМатериалы КАК ТабТовары
	|ГДЕ ТабТовары.Ссылка = &Ссылка
	|УПОРЯДОЧИТЬ ПО ТабТовары.НомерСтроки";
	ЗапросТовары.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	ТабТовары = ЗапросТовары.Выполнить().Выгрузить();
	ДанныеXDTO.Вставить("Материалы", ТабТовары); 
	
	ТабУслуги = Новый ТаблицаЗначений;
	ТабУслуги.Колонки.Добавить("Содержание");
	ТабУслуги.Колонки.Добавить("Количество");
	ТабУслуги.Колонки.Добавить("Номенклатура");
	ТабУслуги.Колонки.Добавить("Цена");
	ТабУслуги.Колонки.Добавить("Сумма");
	ТабУслуги.Колонки.Добавить("СтавкаНДС");
	ТабУслуги.Колонки.Добавить("СуммаНДС");
	// Сам по себе документ является фактом получения услуги по переработке. Добавляем эту услугу в таблицу.
	Если ДанныеИБ.Товары.Количество() > 0 Тогда
		СтрУслуга = ТабУслуги.Добавить();
		СтрУслуга.Содержание = "Переработка давальческого сырья";
		СтрУслуга.Количество = 1;
		СтрУслуга.Цена = ДанныеИБ.Товары.Итог("Сумма");
		СтрУслуга.Сумма = ДанныеИБ.Товары.Итог("Сумма");
		СтрУслуга.СуммаНДС = ДанныеИБ.Товары.Итог("СуммаНДС");
		СтрУслуга.СтавкаНДС = ДанныеИБ.Товары[0].СтавкаНДС;
	КонецЕсли;  
	
	ЗапросУслуги = Новый Запрос;
	ЗапросУслуги.Текст = "ВЫБРАТЬ
	|	ТабУслуги.Номенклатура КАК Номенклатура,
	|	ТабУслуги.Содержание КАК Содержание,
	|	ТабУслуги.Количество КАК Количество,
	|	ТабУслуги.Цена КАК Цена,
	|	ТабУслуги.Сумма КАК Сумма,
	|	ТабУслуги.СтавкаНДС КАК СтавкаНДС,
	|	ТабУслуги.СуммаНДС КАК СуммаНДС
	|ИЗ Документ.ПолучениеУслугПоПереработке.Услуги КАК ТабУслуги
	|ГДЕ ТабУслуги.Ссылка = &Ссылка";
	ЗапросУслуги.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	Выборка = ЗапросУслуги.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрУслуга = ТабУслуги.Добавить();
		ЗаполнитьЗначенияСвойств(СтрУслуга, Выборка);
	КонецЦикла;
	ДанныеXDTO.Вставить("Услуги", ТабУслуги); 
	
	ЗапросПродукция = Новый Запрос;
	ЗапросПродукция.Текст = "ВЫБРАТЬ
	|	ТабПродукция.Номенклатура КАК Номенклатура,
	|	ТабПродукция.ХарактеристикаНоменклатуры КАК Характеристика,
	|	ТабПродукция.Количество * ТабПродукция.Коэффициент КАК Количество, 
	|	ТабПродукция.Количество КАК КоличествоУпаковок,
	|	ТабПродукция.ЕдиницаИзмерения КАК ЕдиницаИзмерения
	|ИЗ Документ.ПолучениеУслугПоПереработке.Товары КАК ТабПродукция
	|ГДЕ ТабПродукция.Ссылка = &Ссылка
	|";
	ЗапросПродукция.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	ТабПродукция = ЗапросПродукция.Выполнить().Выгрузить();
	ДанныеXDTO.Вставить("Продукция", ТабПродукция);
КонецПроцедуры
//  Документ_ОтчетПроизводстваЗаСмену_Отправка
Процедура ДобавитьПКО_Документ_ОтчетПроизводстваЗаСмену_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ОтчетПроизводстваЗаСмену_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ОтчетПроизводстваЗаСмену;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ВыпускПродукции";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ОтчетПроизводстваЗаСмену_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",          "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",   "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",         "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",   "Организация", , "Справочник_Организации");
	ДобавитьПКС(СвойстваШапки, "Ответственный", "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Подразделение", "Подразделение", , "Справочник_Подразделения");
	ДобавитьПКС(СвойстваШапки, "Склад",         "Склад", , "Справочник_Склады");
	ДобавитьПКС(СвойстваШапки, "СтатьяЗатрат",  "СтатьяЗатрат", , "Справочник_СтатьиЗатрат_Отправка");
	ДобавитьПКС(СвойстваШапки, "",              "ВидОперации", 1);
	ДобавитьПКС(СвойстваШапки, "",              "ПодразделениеЗатрат", 1, "Справочник_Подразделения");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ВозвратныеОтходы");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоУпаковок", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "ПодразделениеЗатрат", 1,"Справочник_Подразделения");
	ДобавитьПКС(СвойстваТЧ, "", "СтатьяЗатрат", 1,"Справочник_СтатьиЗатрат_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Характеристика", 1,"Справочник_ХарактеристикиНоменклатуры_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Материалы");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоУпаковок", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "ПодразделениеЗатрат", 1,"Справочник_Подразделения");
	ДобавитьПКС(СвойстваТЧ, "", "СтатьяЗатрат", 1,"Справочник_СтатьиЗатрат_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Характеристика", 1,"Справочник_ХарактеристикиНоменклатуры_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Продукция");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоУпаковок", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "СпецификацияНоменклатуры", 1,"Справочник_СпецификацииНоменклатуры_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Характеристика", 1,"Справочник_ХарактеристикиНоменклатуры_Отправка");

КонецПроцедуры

Процедура ПКО_Документ_ОтчетПроизводстваЗаСмену_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеXDTO.Вставить("ВидОперации", "ВыпускПродукцииНаСклад");
	ЗапросТовары = Новый Запрос;
	ЗапросТовары.Текст = "ВЫБРАТЬ
	|	ТабТовары.Номенклатура КАК Номенклатура,
	|	ТабТовары.ХарактеристикаНоменклатуры КАК Характеристика,
	|	ТабТовары.Количество * ТабТовары.Коэффициент КАК Количество,
	|	ТабТовары.Коэффициент КАК Коэффициент,
	|	ТабТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ТабТовары.Спецификация КАК СпецификацияНоменклатуры,
	|	ТабТовары.СтатьяЗатратПолучатель КАК СтатьяЗатрат,
	|	ТабТовары.ПодразделениеПолучатель КАК Подразделение,
	|	ТабТовары.Количество КАК КоличествоУпаковок
	|ИЗ Документ.ОтчетПроизводстваЗаСмену.Продукция КАК ТабТовары
	|ГДЕ ТабТовары.Ссылка = &Ссылка И ТабТовары.ВидВыпуска = ЗНАЧЕНИЕ(Перечисление.ВидыВыпуска.Выпуск)
	|	И НаправлениеВыпуска = ЗНАЧЕНИЕ(Перечисление.НаправленияВыпуска.НаСклад)";
	ЗапросТовары.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	ТабТовары = ЗапросТовары.Выполнить().Выгрузить();
	ДанныеXDTO.Вставить("Продукция", ТабТовары);
	Если ТабТовары.КОличество() > 0 И ЗначениеЗаполнено(ТабТовары[0].Подразделение) Тогда
		ДанныеXDTO.Вставить("ПодразделениеЗатрат", ТабТовары[0].Подразделение);
	Иначе
		ДанныеXDTO.Вставить("ПодразделениеЗатрат", ДанныеИБ.Подразделение);
	КонецЕсли;
	
	ЗапросТовары = Новый Запрос;
	ЗапросТовары.Текст = "ВЫБРАТЬ
	|	ТабТовары.Номенклатура КАК Номенклатура,
	|	ТабТовары.ХарактеристикаНоменклатуры КАК Характеристика,
	|	ТабТовары.Количество * ТабТовары.Коэффициент КАК Количество,
	|	ТабТовары.Коэффициент КАК Коэффициент,
	|	ТабТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ТабТовары.ПодразделениеНЗП КАК ПодразделениеЗатрат,
	|	ТабТовары.СтатьяЗатрат КАК СтатьяЗатрат,
	|	ТабТовары.Количество КАК КоличествоУпаковок
	|ИЗ Документ.ОтчетПроизводстваЗаСмену.Материалы КАК ТабТовары
	|ГДЕ ТабТовары.Ссылка = &Ссылка И ТабТовары.ВидВыпуска = ЗНАЧЕНИЕ(Перечисление.ВидыВыпуска.Выпуск)
	|";
	ЗапросТовары.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	ТабТовары = ЗапросТовары.Выполнить().Выгрузить();
	ДанныеXDTO.Вставить("Материалы", ТабТовары);
	
	ЗапросТовары = Новый Запрос;
	ЗапросТовары.Текст = "ВЫБРАТЬ
	|	ТабТовары.Номенклатура КАК Номенклатура,
	|	ТабТовары.ХарактеристикаНоменклатуры КАК Характеристика,
	|	ТабТовары.Количество * ТабТовары.Коэффициент КАК Количество,
	|	ТабТовары.Коэффициент КАК Коэффициент,
	|	ТабТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ТабТовары.ПодразделениеНЗП КАК ПодразделениеЗатрат,
	|	ТабТовары.СтатьяЗатрат КАК СтатьяЗатрат,
	|	ТабТовары.Количество КАК КоличествоУпаковок
	|ИЗ Документ.ОтчетПроизводстваЗаСмену.ВозвратныеОтходы КАК ТабТовары
	|ГДЕ ТабТовары.Ссылка = &Ссылка И ТабТовары.ВидВыпуска = ЗНАЧЕНИЕ(Перечисление.ВидыВыпуска.Выпуск)
	|";
	ЗапросТовары.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	ТабТовары = ЗапросТовары.Выполнить().Выгрузить();
	ДанныеXDTO.Вставить("ВозвратныеОтходы", ТабТовары);
КонецПроцедуры
//  Документ_ПередачаДавальцу_Отправка
Процедура ДобавитьПКО_Документ_ПередачаДавальцу_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПередачаДавальцу_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПередачаТоваров;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПередачаДавальцу";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПередачаДавальцу_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Грузоотправитель",   "Грузоотправитель", , "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваШапки, "Грузополучатель",    "Грузополучатель", , "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваШапки, "Дата",               "Дата");
	ДобавитьПКС(СвойстваШапки, "ДоговорКонтрагента", "Договор", , "Справочник_Договоры_Отправка");
	ДобавитьПКС(СвойстваШапки, "Комментарий",        "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",         "Контрагент", , "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваШапки, "Номер",              "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",        "Организация", , "Справочник_Организации");
	ДобавитьПКС(СвойстваШапки, "Ответственный",      "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Склад",              "Склад", , "Справочник_Склады");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоУпаковок", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Характеристика", 1,"Справочник_ХарактеристикиНоменклатуры_Отправка");

КонецПроцедуры

Процедура ПКО_Документ_ПередачаДавальцу_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.КОличество() > 1 Тогда
		Возврат;
	КонецЕсли;
	ЗапросТовары = Новый Запрос;
	ЗапросТовары.Текст = "ВЫБРАТЬ
	|	ТабТовары.Номенклатура КАК Номенклатура,
	|	ТабТовары.ХарактеристикаНоменклатуры КАК Характеристика,
	|	ТабТовары.Количество * ТабТовары.Коэффициент КАК Количество,
	|	ТабТовары.Коэффициент КАК Коэффициент,
	|	ТабТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ТабТовары.Количество КАК КоличествоУпаковок
	|ИЗ Документ.ПередачаТоваров.Товары КАК ТабТовары
	|ГДЕ ТабТовары.Ссылка = &Ссылка
	|";
	ЗапросТовары.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	ТабТовары = ЗапросТовары.Выполнить().Выгрузить();
	ДанныеXDTO.Вставить("Товары", ТабТовары);
КонецПроцедуры
//  Документ_ПередачаПереработчику_Отправка
Процедура ДобавитьПКО_Документ_ПередачаПереработчику_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПередачаПереработчику_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПередачаТоваров;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПередачаПереработчику";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПередачаПереработчику_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",    "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Грузоотправитель",   "Грузоотправитель", , "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваШапки, "Грузополучатель",    "Грузополучатель", , "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваШапки, "Дата",               "Дата");
	ДобавитьПКС(СвойстваШапки, "ДоговорКонтрагента", "Договор", , "Справочник_Договоры_Отправка");
	ДобавитьПКС(СвойстваШапки, "Комментарий",        "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",         "Контрагент", , "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваШапки, "Номер",              "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",        "Организация", , "Справочник_Организации");
	ДобавитьПКС(СвойстваШапки, "Ответственный",      "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Склад",              "Склад", , "Справочник_Склады");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",     "Сумма");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоУпаковок", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Характеристика", 1,"Справочник_ХарактеристикиНоменклатуры_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);

КонецПроцедуры

Процедура ПКО_Документ_ПередачаПереработчику_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.КОличество() > 1 Тогда
		Возврат;
	КонецЕсли;
	ЗапросТовары = Новый Запрос;
	ЗапросТовары.Текст = "ВЫБРАТЬ
	|	ТабТовары.Номенклатура КАК Номенклатура,
	|	ТабТовары.ХарактеристикаНоменклатуры КАК Характеристика,
	|	ТабТовары.Количество * ТабТовары.Коэффициент КАК Количество,
	|	ТабТовары.Коэффициент КАК Коэффициент,
	|	ТабТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ТабТовары.Цена КАК Цена,
	|	ТабТовары.Сумма КАК Сумма, 
	|	ТабТовары.Количество КАК КоличествоУпаковок
	|ИЗ Документ.ПередачаТоваров.Товары КАК ТабТовары
	|ГДЕ ТабТовары.Ссылка = &Ссылка
	|";
	ЗапросТовары.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	ТабТовары = ЗапросТовары.Выполнить().Выгрузить();
	ОпределитьТипыЗапасовПриОтправке(ДанныеИБ, ТабТовары);
	ДанныеXDTO.Вставить("Товары", ТабТовары);
КонецПроцедуры
//  Документ_ПеремещениеТоваров_Отправка
Процедура ДобавитьПКО_Документ_ПеремещениеТоваров_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПеремещениеТоваров_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПеремещениеТоваров;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПеремещениеТоваров";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПеремещениеТоваров_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",             "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",      "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",            "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",      "Организация", , "Справочник_Организации");
	ДобавитьПКС(СвойстваШапки, "Ответственный",    "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "СкладОтправитель", "СкладОтправитель", , "Справочник_Склады");
	ДобавитьПКС(СвойстваШапки, "СкладПолучатель",  "СкладПолучатель", , "Справочник_Склады");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоУпаковок", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Характеристика", 1,"Справочник_ХарактеристикиНоменклатуры_Отправка");

КонецПроцедуры

Процедура ПКО_Документ_ПеремещениеТоваров_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ЗапросТовары = Новый Запрос;
	ЗапросТовары.Текст = "ВЫБРАТЬ
	|	ТабТовары.Номенклатура КАК Номенклатура,
	|	ТабТовары.ХарактеристикаНоменклатуры КАК Характеристика,
	|	ТабТовары.Количество * ТабТовары.Коэффициент КАК Количество,
	|	ТабТовары.Коэффициент КАК Коэффициент,
	|	ТабТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ТабТовары.Количество КАК КоличествоУпаковок,
	|	ВЫРАЗИТЬ("""" КАК Строка(30)) КАК ТипЗапасов
	|ИЗ Документ.ПеремещениеТоваров.Товары КАК ТабТовары
	|ГДЕ ТабТовары.Ссылка = &Ссылка
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ
	|	ТабТара.Номенклатура КАК Номенклатура,
	|	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка),
	|	ТабТара.Количество КАК Количество,
	|	1 КАК Коэффициент,
	|	ТабТара.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаИзмерения,
	|	ТабТара.Количество КАК КоличествоУпаковок,
	|	""ВозвратнаяТара"" КАК ТипЗапасов
	|ИЗ Документ.ПеремещениеТоваров.ВозвратнаяТара КАК ТабТара
	|ГДЕ ТабТара.Ссылка = &Ссылка
	|";
	ЗапросТовары.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	ТабТовары = ЗапросТовары.Выполнить().Выгрузить();
	ОпределитьТипыЗапасовПриОтправке(ДанныеИБ, ТабТовары, "+");
	ДанныеXDTO.Вставить("Товары", ТабТовары);
КонецПроцедуры
//  Документ_ПКОПолучениеНаличныхВБанке_Отправка
Процедура ДобавитьПКО_Документ_ПКОПолучениеНаличныхВБанке_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПКОПолучениеНаличныхВБанке_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПриходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПКОПолучениеНаличныхВБанке";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПКОПолучениеНаличныхВБанке_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента", "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",            "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",     "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",           "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",     "Организация", , "Справочник_Организации");
	ДобавитьПКС(СвойстваШапки, "Основание",       "Основание");
	ДобавитьПКС(СвойстваШапки, "Ответственный",   "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Приложение",      "Приложение");
	ДобавитьПКС(СвойстваШапки, "ПринятоОт",       "ПринятоОт");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",  "Сумма");
	ДобавитьПКС(СвойстваШапки, "СчетОрганизации", "БанковскийСчет", , "Справочник_БанковскиеСчета");
	ДобавитьПКС(СвойстваШапки, "",                "ВидОперации", 1);

КонецПроцедуры

Процедура ПКО_Документ_ПКОПолучениеНаличныхВБанке_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.Вставить("ВидОперации", "ПолучениеНаличных");
КонецПроцедуры
//  Документ_ПКОПрочееПоступление_Отправка
Процедура ДобавитьПКО_Документ_ПКОПрочееПоступление_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПКОПрочееПоступление_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПриходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПКОПрочееПоступление";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПКОПрочееПоступление_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента", "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",            "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",     "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",           "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",     "Организация", , "Справочник_Организации");
	ДобавитьПКС(СвойстваШапки, "Приложение",      "Приложение");
	ДобавитьПКС(СвойстваШапки, "ПринятоОт",       "ПринятоОт");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",  "Сумма");
	ДобавитьПКС(СвойстваШапки, "",                "Контрагент", 1, "Справочник_Контрагенты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "", "СтатьяДДС", 1,"Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);

КонецПроцедуры

Процедура ПКО_Документ_ПКОПрочееПоступление_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	Если ТипЗнч(ДанныеИБ.Контрагент) = Тип("СправочникСсылка.Контрагенты") И ЗначениеЗаполнено(ДанныеИБ.Контрагент) Тогда
		ДанныеXDTO.Вставить("Контрагент", ДанныеИБ.КОнтрагент);
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|РП.СтатьяДвиженияДенежныхСредств КАК СтатьяДДС,
	|РП.СуммаПлатежа КАК Сумма
	|ИЗ Документ.ПриходныйКассовыйОрдер.РасшифровкаПлатежа КАК РП
	|ГДЕ РП.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", Запрос.Выполнить().Выгрузить());
КонецПроцедуры
//  Документ_ПКОРасчетыСКонтрагентами_Отправка
Процедура ДобавитьПКО_Документ_ПКОРасчетыСКонтрагентами_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПКОРасчетыСКонтрагентами_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПриходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПКОРасчетыСКонтрагентами";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПКОРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента", "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",            "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",     "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",      "Контрагент", , "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваШапки, "Номер",           "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",     "Организация", , "Справочник_Организации");
	ДобавитьПКС(СвойстваШапки, "Основание",       "Основание");
	ДобавитьПКС(СвойстваШапки, "Ответственный",   "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Приложение",      "Приложение");
	ДобавитьПКС(СвойстваШапки, "ПринятоОт",       "ПринятоОт");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",  "Сумма");
	ДобавитьПКС(СвойстваШапки, "",                "ВидРасчетов", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "", "ВалютаВзаиморасчетов", 1,"Справочник_Валюты");
	ДобавитьПКС(СвойстваТЧ, "", "Договор", 1,"Справочник_Договоры_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "КратностьВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КурсВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "РасчетыВУсловныхЕдиницах", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "", "СтатьяДДС", 1,"Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);

КонецПроцедуры

Процедура ПКО_Документ_ПКОРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ВидРасчетов = "";
	ВидОперации = ДанныеИБ.ВидОперации;
	Если ВидОперации = Перечисления.ВидыОперацийПКО.ОплатаПокупателя Тогда
		ВидРасчетов = "СПокупателем";
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПоставщиком Тогда
		ВидРасчетов = "СПоставщиком";
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПКО.РасчетыПоКредитамИЗаймамСКонтрагентами Тогда
		ВидРасчетов = "КредитыИЗаймы";
	Иначе
		ВидРасчетов = "Прочее";
	КонецЕсли;
	ДанныеXDTO.Вставить("ВидРасчетов", ВидРасчетов);
	ПодготовитьДанныеРасчетыСКонтрагентами(ДанныеИБ, ДанныеXDTO, "ПриходныйКассовыйОрдер");
КонецПроцедуры
//  Документ_ПКОРасчетыССотрудниками_Отправка
Процедура ДобавитьПКО_Документ_ПКОРасчетыССотрудниками_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПКОРасчетыССотрудниками_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПриходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПКОРасчетыССотрудниками";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПКОРасчетыССотрудниками_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента", "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",            "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",     "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",      "Сотрудник", , "Справочник_ФизическиеЛица_Отправка");
	ДобавитьПКС(СвойстваШапки, "Номер",           "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",     "Организация", , "Справочник_Организации");
	ДобавитьПКС(СвойстваШапки, "Основание",       "Основание");
	ДобавитьПКС(СвойстваШапки, "Ответственный",   "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Приложение",      "Приложение");
	ДобавитьПКС(СвойстваШапки, "ПринятоОт",       "ПринятоОт");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",  "Сумма");
	ДобавитьПКС(СвойстваШапки, "",                "ВидРасчетов", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "РасшифровкаПлатежа", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "СтатьяДвиженияДенежныхСредств", "СтатьяДДС", ,"Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "СуммаПлатежа",                  "Сумма");

КонецПроцедуры

Процедура ПКО_Документ_ПКОРасчетыССотрудниками_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	ВидРасчетов = "";
	Если ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПодотчетником Тогда
		ВидРасчетов = "Подотчет";
	
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПКО.РасчетыПоКредитамИЗаймамСРаботниками Тогда
		ВидРасчетов = "Займы";
	КонецЕсли;
	ДанныеXDTO.Вставить("ВидРасчетов", ВидРасчетов);
КонецПроцедуры
//  Документ_ПКОРозничнаяВыручка_Отправка
Процедура ДобавитьПКО_Документ_ПКОРозничнаяВыручка_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПКОРозничнаяВыручка_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПриходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПКОРозничнаяВыручка";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента", "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "ВыручкаСНТТ",     "ВыручкаНТТ");
	ДобавитьПКС(СвойстваШапки, "Дата",            "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",     "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",           "Номер");
	ДобавитьПКС(СвойстваШапки, "НомерЧекаККМ",    "НомерЧекаККМ");
	ДобавитьПКС(СвойстваШапки, "Организация",     "Организация", , "Справочник_Организации");
	ДобавитьПКС(СвойстваШапки, "Основание",       "Основание");
	ДобавитьПКС(СвойстваШапки, "Ответственный",   "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Приложение",      "Приложение");
	ДобавитьПКС(СвойстваШапки, "ПринятоОт",       "ПринятоОт");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",  "Сумма");

КонецПроцедуры
//  Документ_ПлатОрдерСписаниеСотрудники_Отправка
Процедура ДобавитьПКО_Документ_ПлатОрдерСписаниеСотрудники_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПлатОрдерСписаниеСотрудники_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПлатежныйОрдерСписаниеДенежныхСредств;
	ПравилоКонвертации.ОбъектФормата     = "Документ.СБДСРасчетыССотрудниками";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПлатОрдерСписаниеСотрудники_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента", "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",            "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "ДатаОплаты",      "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаОплаты",      "ДатаВыписки");
	ДобавитьПКС(СвойстваШапки, "Комментарий",     "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",           "Номер");
	ДобавитьПКС(СвойстваШапки, "Номер",           "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Организация",     "Организация", , "Справочник_Организации");
	ДобавитьПКС(СвойстваШапки, "Ответственный",   "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",  "Сумма");
	ДобавитьПКС(СвойстваШапки, "СчетКонтрагента", "БанковскийСчетСотрудника", , "Справочник_БанковскиеСчета");
	ДобавитьПКС(СвойстваШапки, "СчетОрганизации", "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчета");
	ДобавитьПКС(СвойстваШапки, "ФизЛицо",         "Сотрудник", , "Справочник_ФизическиеЛица_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                "ВидРасчетов", 1);
	ДобавитьПКС(СвойстваШапки, "",                "ТипПлатежногоДокумента", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "РасшифровкаПлатежа", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "СтатьяДвиженияДенежныхСредств", "СтатьяДДС", ,"Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "СуммаПлатежа",                  "Сумма");

КонецПроцедуры

Процедура ПКО_Документ_ПлатОрдерСписаниеСотрудники_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	ДанныеXDTO.Вставить("ТипПлатежногоДокумента", "ПлатежныйОрдер");
	ДанныеXDTO.Вставить("ВидРасчетов", "Подотчет");
КонецПроцедуры
//  Документ_ПлатПорВхПлатКарты_Отправка
Процедура ДобавитьПКО_Документ_ПлатПорВхПлатКарты_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПлатПорВхПлатКарты_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПлатежноеПоручениеВходящее;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПБДСПоПлатежнымКартам";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПлатПорВхПлатКарты_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",         "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                    "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоДокумента",  "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "ДатаОплаты",              "ДатаВыписки");
	ДобавитьПКС(СвойстваШапки, "Комментарий",             "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",              "Контрагент", , "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваШапки, "НазначениеПлатежа",       "НазначениеПлатежа");
	ДобавитьПКС(СвойстваШапки, "Номер",                   "Номер");
	ДобавитьПКС(СвойстваШапки, "НомерВходящегоДокумента", "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Организация",             "Организация", , "Справочник_Организации");
	ДобавитьПКС(СвойстваШапки, "Ответственный",           "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "СтатьяЗатрат",            "СтатьяРасходов", , "Справочник_СтатьиЗатрат_Отправка");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",          "Сумма");
	ДобавитьПКС(СвойстваШапки, "СуммаУслуг",              "СуммаУслуг");
	ДобавитьПКС(СвойстваШапки, "СчетКонтрагента",         "БанковскийСчетКонтрагента", , "Справочник_БанковскиеСчета");
	ДобавитьПКС(СвойстваШапки, "СчетОрганизации",         "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчета");
	ДобавитьПКС(СвойстваШапки, "",                        "ТипПлатежногоДокумента", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "", "ВалютаВзаиморасчетов", 1,"Справочник_Валюты");
	ДобавитьПКС(СвойстваТЧ, "", "Договор", 1,"Справочник_Договоры_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "КратностьВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КурсВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "РасчетыВУсловныхЕдиницах", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "", "СтатьяДДС", 1,"Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);

КонецПроцедуры

Процедура ПКО_Документ_ПлатПорВхПлатКарты_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	ДанныеXDTO.Вставить("ТипПлатежногоДокумента", "ПлатежноеПоручение");
	ПроверитьОбрезатьНазначениеПлатежа(ДанныеИБ, ДанныеXDTO);
	
	ПодготовитьДанныеРасчетыСКонтрагентами(ДанныеИБ, ДанныеXDTO, "ПлатежноеПоручениеВходящее");
КонецПроцедуры
//  Документ_ПлатПорВхПрочее_Отправка
Процедура ДобавитьПКО_Документ_ПлатПорВхПрочее_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПлатПорВхПрочее_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПлатежноеПоручениеВходящее;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПБДСПрочееПоступление";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПлатПорВхПрочее_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",         "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                    "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоДокумента",  "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "ДатаОплаты",              "ДатаВыписки");
	ДобавитьПКС(СвойстваШапки, "Комментарий",             "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",              "Контрагент", , "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваШапки, "НазначениеПлатежа",       "НазначениеПлатежа");
	ДобавитьПКС(СвойстваШапки, "Номер",                   "Номер");
	ДобавитьПКС(СвойстваШапки, "НомерВходящегоДокумента", "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Организация",             "Организация", , "Справочник_Организации");
	ДобавитьПКС(СвойстваШапки, "Ответственный",           "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",          "Сумма");
	ДобавитьПКС(СвойстваШапки, "СчетКонтрагента",         "БанковскийСчетКонтрагента", , "Справочник_БанковскиеСчета");
	ДобавитьПКС(СвойстваШапки, "СчетОрганизации",         "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчета");
	ДобавитьПКС(СвойстваШапки, "",                        "ТипПлатежногоДокумента", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "РасшифровкаПлатежа", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "СтатьяДвиженияДенежныхСредств", "СтатьяДДС", ,"Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "СуммаПлатежа",                  "Сумма");

КонецПроцедуры

Процедура ПКО_Документ_ПлатПорВхПрочее_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	ДанныеXDTO.Вставить("ТипПлатежногоДокумента", "ПлатежноеПоручение");
	ПроверитьОбрезатьНазначениеПлатежа(ДанныеИБ, ДанныеXDTO);
КонецПроцедуры
//  Документ_ПлатПорВхРасчетыСКонтрагентами_Отправка
Процедура ДобавитьПКО_Документ_ПлатПорВхРасчетыСКонтрагентами_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПлатПорВхРасчетыСКонтрагентами_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПлатежноеПоручениеВходящее;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПБДСРасчетыСКонтрагентами";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПлатПорВхРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",         "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                    "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоДокумента",  "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "ДатаОплаты",              "ДатаВыписки");
	ДобавитьПКС(СвойстваШапки, "Комментарий",             "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",              "Контрагент", , "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваШапки, "НазначениеПлатежа",       "НазначениеПлатежа");
	ДобавитьПКС(СвойстваШапки, "Номер",                   "Номер");
	ДобавитьПКС(СвойстваШапки, "НомерВходящегоДокумента", "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Организация",             "Организация", , "Справочник_Организации");
	ДобавитьПКС(СвойстваШапки, "Ответственный",           "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",          "Сумма");
	ДобавитьПКС(СвойстваШапки, "СчетКонтрагента",         "БанковскийСчетКонтрагента", , "Справочник_БанковскиеСчета");
	ДобавитьПКС(СвойстваШапки, "СчетОрганизации",         "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчета");
	ДобавитьПКС(СвойстваШапки, "",                        "ВидРасчетов", 1);
	ДобавитьПКС(СвойстваШапки, "",                        "ТипПлатежногоДокумента", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "", "ВалютаВзаиморасчетов", 1,"Справочник_Валюты");
	ДобавитьПКС(СвойстваТЧ, "", "Договор", 1,"Справочник_Договоры_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "КратностьВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КурсВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "РасчетыВУсловныхЕдиницах", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "", "СтатьяДДС", 1,"Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);

КонецПроцедуры

Процедура ПКО_Документ_ПлатПорВхРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	ВидРасчетов = "";
	ЭтоПБДСРасчетыСКонтрагентами(ДанныеИБ, ВидРасчетов);
	ДанныеXDTO.Вставить("ВидРасчетов", ВидРасчетов);
	ДанныеXDTO.Вставить("ТипПлатежногоДокумента", "ПлатежноеПоручение");
	ПроверитьОбрезатьНазначениеПлатежа(ДанныеИБ, ДанныеXDTO);
	
	ПодготовитьДанныеРасчетыСКонтрагентами(ДанныеИБ, ДанныеXDTO, "ПлатежноеПоручениеВходящее");
КонецПроцедуры
//  Документ_ПлатПорИсхНалоги_Отправка
Процедура ДобавитьПКО_Документ_ПлатПорИсхНалоги_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПлатПорИсхНалоги_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПлатежноеПоручениеИсходящее;
	ПравилоКонвертации.ОбъектФормата     = "Документ.СБДСПлатежиВБюджет";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПлатПорИсхНалоги_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",     "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "ВидПлатежа",          "ВидПлатежа");
	ДобавитьПКС(СвойстваШапки, "Дата",                "Дата");
	ДобавитьПКС(СвойстваШапки, "Дата",                "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "ДатаОплаты",          "ДатаВыписки");
	ДобавитьПКС(СвойстваШапки, "КодБК",               "ПоказательКБК");
	ДобавитьПКС(СвойстваШапки, "КодОКАТО",            "ОКАТО");
	ДобавитьПКС(СвойстваШапки, "Комментарий",         "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",          "Контрагент", , "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваШапки, "НазначениеПлатежа",   "НазначениеПлатежа");
	ДобавитьПКС(СвойстваШапки, "Номер",               "Номер");
	ДобавитьПКС(СвойстваШапки, "Номер",               "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Организация",         "Организация", , "Справочник_Организации");
	ДобавитьПКС(СвойстваШапки, "Ответственный",       "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ОчередностьПлатежа",  "Очередность");
	ДобавитьПКС(СвойстваШапки, "ПоказательДаты",      "ПоказательДаты");
	ДобавитьПКС(СвойстваШапки, "ПоказательНомера",    "ПоказательНомера");
	ДобавитьПКС(СвойстваШапки, "ПоказательОснования", "ПоказательОснования");
	ДобавитьПКС(СвойстваШапки, "ПоказательПериода",   "ПоказательПериода");
	ДобавитьПКС(СвойстваШапки, "ПоказательТипа",      "ПоказательТипа");
	ДобавитьПКС(СвойстваШапки, "СтатусСоставителя",   "СтатусСоставителя");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",      "Сумма");
	ДобавитьПКС(СвойстваШапки, "СчетКонтрагента",     "БанковскийСчет", , "Справочник_БанковскиеСчета");
	ДобавитьПКС(СвойстваШапки, "СчетОрганизации",     "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчета");
	ДобавитьПКС(СвойстваШапки, "",                    "ТипПлатежногоДокумента", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "РасшифровкаПлатежа", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "СтатьяДвиженияДенежныхСредств", "СтатьяДДС", ,"Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "СуммаПлатежа",                  "Сумма");

КонецПроцедуры

Процедура ПКО_Документ_ПлатПорИсхНалоги_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	ДанныеXDTO.Вставить("ТипПлатежногоДокумента", "ПлатежноеПоручение");
	ПроверитьОбрезатьНазначениеПлатежа(ДанныеИБ, ДанныеXDTO);
КонецПроцедуры
//  Документ_ПлатПорИсхПереводНаДрСчет_Отправка
Процедура ДобавитьПКО_Документ_ПлатПорИсхПереводНаДрСчет_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПлатПорИсхПереводНаДрСчет_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПлатежноеПоручениеИсходящее;
	ПравилоКонвертации.ОбъектФормата     = "Документ.СБДСПереводНаДругойСчет";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПлатПорИсхПереводНаДрСчет_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",               "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "ВидПлатежа",                    "ВидПлатежа");
	ДобавитьПКС(СвойстваШапки, "Дата",                          "Дата");
	ДобавитьПКС(СвойстваШапки, "Дата",                          "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "ДатаОплаты",                    "ДатаВыписки");
	ДобавитьПКС(СвойстваШапки, "Комментарий",                   "Комментарий");
	ДобавитьПКС(СвойстваШапки, "НазначениеПлатежа",             "НазначениеПлатежа");
	ДобавитьПКС(СвойстваШапки, "Номер",                         "Номер");
	ДобавитьПКС(СвойстваШапки, "Номер",                         "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Организация",                   "Организация", , "Справочник_Организации");
	ДобавитьПКС(СвойстваШапки, "Ответственный",                 "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ОчередностьПлатежа",            "Очередность");
	ДобавитьПКС(СвойстваШапки, "СтатьяДвиженияДенежныхСредств", "СтатьяДДС", , "Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",                "Сумма");
	ДобавитьПКС(СвойстваШапки, "СчетКонтрагента",               "БанковскийСчет", , "Справочник_БанковскиеСчета");
	ДобавитьПКС(СвойстваШапки, "СчетОрганизации",               "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчета");
	ДобавитьПКС(СвойстваШапки, "",                              "ТипПлатежногоДокумента", 1);

КонецПроцедуры

Процедура ПКО_Документ_ПлатПорИсхПереводНаДрСчет_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	ДанныеXDTO.Вставить("ТипПлатежногоДокумента", "ПлатежноеПоручение");
	ПроверитьОбрезатьНазначениеПлатежа(ДанныеИБ, ДанныеXDTO);
КонецПроцедуры
//  Документ_ПлатПорИсхПеречислениеЗП_Отправка
Процедура ДобавитьПКО_Документ_ПлатПорИсхПеречислениеЗП_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПлатПорИсхПеречислениеЗП_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПлатежноеПоручениеИсходящее;
	ПравилоКонвертации.ОбъектФормата     = "Документ.СБДСПеречислениеЗаработнойПлаты";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПлатПорИсхПеречислениеЗП_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",    "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "ВидПлатежа",         "ВидПлатежа");
	ДобавитьПКС(СвойстваШапки, "Дата",               "Дата");
	ДобавитьПКС(СвойстваШапки, "Дата",               "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "ДатаОплаты",         "ДатаВыписки");
	ДобавитьПКС(СвойстваШапки, "Комментарий",        "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",         "Контрагент", , "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваШапки, "НазначениеПлатежа",  "НазначениеПлатежа");
	ДобавитьПКС(СвойстваШапки, "Номер",              "Номер");
	ДобавитьПКС(СвойстваШапки, "Номер",              "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Организация",        "Организация", , "Справочник_Организации");
	ДобавитьПКС(СвойстваШапки, "Ответственный",      "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ОчередностьПлатежа", "Очередность");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",     "Сумма");
	ДобавитьПКС(СвойстваШапки, "СчетКонтрагента",    "БанковскийСчет", , "Справочник_БанковскиеСчета");
	ДобавитьПКС(СвойстваШапки, "СчетОрганизации",    "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчета");
	ДобавитьПКС(СвойстваШапки, "",                   "ТипПлатежногоДокумента", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "", "ДатаВедомостиНаВыплатуЗарплаты", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НомерВедомостиНаВыплатуЗарплаты", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтатьяДДС", 1,"Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);

КонецПроцедуры

Процедура ПКО_Документ_ПлатПорИсхПеречислениеЗП_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	ДанныеXDTO.Вставить("ТипПлатежногоДокумента", "ПлатежноеПоручение");
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|РП.Ведомость.Дата КАК ДатаВедомостиНаВыплатуЗарплаты,
	|РП.Ведомость.Номер КАК НомерВедомостиНаВыплатуЗарплаты,
	|РП.СтатьяДвиженияДенежныхСредств КАК СтатьяДДС,
	|РП.СуммаПлатежа КАК Сумма
	|ИЗ Документ.ПлатежноеПоручениеИсходящее.ПеречислениеЗаработнойПлаты КАК РП
	|ГДЕ РП.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", Запрос.Выполнить().Выгрузить());
	ПроверитьОбрезатьНазначениеПлатежа(ДанныеИБ, ДанныеXDTO);
КонецПроцедуры
//  Документ_ПлатПорИсхПрочее_Отправка
Процедура ДобавитьПКО_Документ_ПлатПорИсхПрочее_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПлатПорИсхПрочее_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПлатежноеПоручениеИсходящее;
	ПравилоКонвертации.ОбъектФормата     = "Документ.СБДСПрочееСписание";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПлатПорИсхПрочее_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",    "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "ВидПлатежа",         "ВидПлатежа");
	ДобавитьПКС(СвойстваШапки, "Дата",               "Дата");
	ДобавитьПКС(СвойстваШапки, "Дата",               "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "ДатаОплаты",         "ДатаВыписки");
	ДобавитьПКС(СвойстваШапки, "Комментарий",        "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",         "Контрагент", , "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваШапки, "НазначениеПлатежа",  "НазначениеПлатежа");
	ДобавитьПКС(СвойстваШапки, "Номер",              "Номер");
	ДобавитьПКС(СвойстваШапки, "Номер",              "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Организация",        "Организация", , "Справочник_Организации");
	ДобавитьПКС(СвойстваШапки, "Ответственный",      "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ОчередностьПлатежа", "Очередность");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",     "Сумма");
	ДобавитьПКС(СвойстваШапки, "СчетКонтрагента",    "БанковскийСчет", , "Справочник_БанковскиеСчета");
	ДобавитьПКС(СвойстваШапки, "СчетОрганизации",    "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчета");
	ДобавитьПКС(СвойстваШапки, "",                   "ВидОперации", 1);
	ДобавитьПКС(СвойстваШапки, "",                   "ТипПлатежногоДокумента", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "РасшифровкаПлатежа", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "СтатьяДвиженияДенежныхСредств", "СтатьяДДС", ,"Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "СуммаПлатежа",                  "Сумма");

КонецПроцедуры

Процедура ПКО_Документ_ПлатПорИсхПрочее_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	ДанныеXDTO.Вставить("ТипПлатежногоДокумента", "ПлатежноеПоручение");
	ДанныеXDTO.Вставить("ВидОперации", "ПрочееСписание");
	ПроверитьОбрезатьНазначениеПлатежа(ДанныеИБ, ДанныеXDTO);
КонецПроцедуры
//  Документ_ПлатПорИсхРасчетыСКонтрагентами_Отправка
Процедура ДобавитьПКО_Документ_ПлатПорИсхРасчетыСКонтрагентами_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПлатПорИсхРасчетыСКонтрагентами_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПлатежноеПоручениеИсходящее;
	ПравилоКонвертации.ОбъектФормата     = "Документ.СБДСРасчетыСКонтрагентами";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПлатПорИсхРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",    "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "ВидПлатежа",         "ВидПлатежа");
	ДобавитьПКС(СвойстваШапки, "Дата",               "Дата");
	ДобавитьПКС(СвойстваШапки, "Дата",               "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "ДатаОплаты",         "ДатаВыписки");
	ДобавитьПКС(СвойстваШапки, "Комментарий",        "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",         "Контрагент", , "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваШапки, "НазначениеПлатежа",  "НазначениеПлатежа");
	ДобавитьПКС(СвойстваШапки, "Номер",              "Номер");
	ДобавитьПКС(СвойстваШапки, "Номер",              "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Организация",        "Организация", , "Справочник_Организации");
	ДобавитьПКС(СвойстваШапки, "Ответственный",      "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ОчередностьПлатежа", "Очередность");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",     "Сумма");
	ДобавитьПКС(СвойстваШапки, "СчетКонтрагента",    "БанковскийСчет", , "Справочник_БанковскиеСчета");
	ДобавитьПКС(СвойстваШапки, "СчетОрганизации",    "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчета");
	ДобавитьПКС(СвойстваШапки, "",                   "ВидРасчетов", 1);
	ДобавитьПКС(СвойстваШапки, "",                   "ТипПлатежногоДокумента", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "", "ВалютаВзаиморасчетов", 1,"Справочник_Валюты");
	ДобавитьПКС(СвойстваТЧ, "", "Договор", 1,"Справочник_Договоры_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "КратностьВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КурсВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "РасчетыВУсловныхЕдиницах", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "", "СтатьяДДС", 1,"Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);

КонецПроцедуры

Процедура ПКО_Документ_ПлатПорИсхРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	ВидРасчетов = "";
	ЭтоСБДСРасчетыСКонтрагентами(ДанныеИБ, ВидРасчетов);
	ДанныеXDTO.Вставить("ВидРасчетов", ВидРасчетов);
	ДанныеXDTO.Вставить("ТипПлатежногоДокумента", "ПлатежноеПоручение");
	ПроверитьОбрезатьНазначениеПлатежа(ДанныеИБ, ДанныеXDTO);
	
	ПодготовитьДанныеРасчетыСКонтрагентами(ДанныеИБ, ДанныеXDTO, "ПлатежноеПоручениеИсходящее");
КонецПроцедуры
//  Документ_ПлатПорИсхСотрудники_Отправка
Процедура ДобавитьПКО_Документ_ПлатПорИсхСотрудники_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПлатПорИсхСотрудники_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПлатежноеПоручениеИсходящее;
	ПравилоКонвертации.ОбъектФормата     = "Документ.СБДСРасчетыССотрудниками";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПлатПорИсхСотрудники_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",    "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "ВидПлатежа",         "ВидПлатежа");
	ДобавитьПКС(СвойстваШапки, "Дата",               "Дата");
	ДобавитьПКС(СвойстваШапки, "Дата",               "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "ДатаОплаты",         "ДатаВыписки");
	ДобавитьПКС(СвойстваШапки, "Комментарий",        "Комментарий");
	ДобавитьПКС(СвойстваШапки, "НазначениеПлатежа",  "НазначениеПлатежа");
	ДобавитьПКС(СвойстваШапки, "Номер",              "Номер");
	ДобавитьПКС(СвойстваШапки, "Номер",              "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Организация",        "Организация", , "Справочник_Организации");
	ДобавитьПКС(СвойстваШапки, "Ответственный",      "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ОчередностьПлатежа", "Очередность");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",     "Сумма");
	ДобавитьПКС(СвойстваШапки, "СчетКонтрагента",    "БанковскийСчетСотрудника", , "Справочник_БанковскиеСчета");
	ДобавитьПКС(СвойстваШапки, "СчетОрганизации",    "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчета");
	ДобавитьПКС(СвойстваШапки, "ФизЛицо",            "Сотрудник", , "Справочник_ФизическиеЛица_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                   "ВидРасчетов", 1);
	ДобавитьПКС(СвойстваШапки, "",                   "ТипПлатежногоДокумента", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "РасшифровкаПлатежа", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "СтатьяДвиженияДенежныхСредств", "СтатьяДДС", ,"Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "СуммаПлатежа",                  "Сумма");

КонецПроцедуры

Процедура ПКО_Документ_ПлатПорИсхСотрудники_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	ДанныеXDTO.Вставить("ТипПлатежногоДокумента", "ПлатежноеПоручение");
	ДанныеXDTO.Вставить("ВидРасчетов", ?(ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеДенежныхСредствПодотчетнику,"Подотчет","Займы"));
	ПроверитьОбрезатьНазначениеПлатежа(ДанныеИБ, ДанныеXDTO);
КонецПроцедуры
//  Документ_ПлОрдерСписПереводНаДрСчет_Отправка
Процедура ДобавитьПКО_Документ_ПлОрдерСписПереводНаДрСчет_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПлОрдерСписПереводНаДрСчет_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПлатежныйОрдерСписаниеДенежныхСредств;
	ПравилоКонвертации.ОбъектФормата     = "Документ.СБДСПереводНаДругойСчет";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПлОрдерСписПереводНаДрСчет_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",               "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                          "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "ДатаОплаты",                    "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаОплаты",                    "ДатаВыписки");
	ДобавитьПКС(СвойстваШапки, "Комментарий",                   "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",                         "Номер");
	ДобавитьПКС(СвойстваШапки, "Номер",                         "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Организация",                   "Организация", , "Справочник_Организации");
	ДобавитьПКС(СвойстваШапки, "Ответственный",                 "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "СтатьяДвиженияДенежныхСредств", "СтатьяДДС", , "Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",                "Сумма");
	ДобавитьПКС(СвойстваШапки, "СчетКонтрагента",               "БанковскийСчет", , "Справочник_БанковскиеСчета");
	ДобавитьПКС(СвойстваШапки, "СчетОрганизации",               "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчета");
	ДобавитьПКС(СвойстваШапки, "",                              "ТипПлатежногоДокумента", 1);

КонецПроцедуры

Процедура ПКО_Документ_ПлОрдерСписПереводНаДрСчет_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	ДанныеXDTO.Вставить("ТипПлатежногоДокумента", "ПлатежныйОрдер");
КонецПроцедуры
//  Документ_ПлОрдерСписПеречислениеЗП_Отправка
Процедура ДобавитьПКО_Документ_ПлОрдерСписПеречислениеЗП_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПлОрдерСписПеречислениеЗП_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПлатежныйОрдерСписаниеДенежныхСредств;
	ПравилоКонвертации.ОбъектФормата     = "Документ.СБДСПеречислениеЗаработнойПлаты";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПлОрдерСписПеречислениеЗП_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента", "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",            "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "ДатаОплаты",      "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаОплаты",      "ДатаВыписки");
	ДобавитьПКС(СвойстваШапки, "Комментарий",     "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",      "Контрагент", , "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваШапки, "Номер",           "Номер");
	ДобавитьПКС(СвойстваШапки, "Номер",           "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Организация",     "Организация", , "Справочник_Организации");
	ДобавитьПКС(СвойстваШапки, "Ответственный",   "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",  "Сумма");
	ДобавитьПКС(СвойстваШапки, "СчетКонтрагента", "БанковскийСчет", , "Справочник_БанковскиеСчета");
	ДобавитьПКС(СвойстваШапки, "СчетОрганизации", "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчета");
	ДобавитьПКС(СвойстваШапки, "",                "ТипПлатежногоДокумента", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "", "ДатаВедомостиНаВыплатуЗарплаты", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НомерВедомостиНаВыплатуЗарплаты", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сотрудник", 1,"Справочник_ФизическиеЛица_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "СтатьяДДС", 1,"Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);

КонецПроцедуры

Процедура ПКО_Документ_ПлОрдерСписПеречислениеЗП_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	ДанныеXDTO.Вставить("ТипПлатежногоДокумента", "ПлатежныйОрдер");
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|РП.Ведомость.Дата КАК ДатаВедомостиНаВыплатуЗарплаты,
	|РП.Ведомость.Номер КАК НомерВедомостиНаВыплатуЗарплаты,
	|РП.Физлицо КАК Сотрудник,  
	|РП.СтатьяДвиженияДенежныхСредств КАК СтатьяДДС,
	|РП.СуммаПлатежа КАК Сумма
	|ИЗ Документ.ПлатежныйОрдерСписаниеДенежныхСредств.ПеречислениеЗаработнойПлаты КАК РП
	|ГДЕ РП.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", Запрос.Выполнить().Выгрузить());
КонецПроцедуры
//  Документ_ПлОрдерСписПрочее_Отправка
Процедура ДобавитьПКО_Документ_ПлОрдерСписПрочее_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПлОрдерСписПрочее_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПлатежныйОрдерСписаниеДенежныхСредств;
	ПравилоКонвертации.ОбъектФормата     = "Документ.СБДСПрочееСписание";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПлОрдерСписПрочее_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента", "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",            "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "ДатаОплаты",      "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаОплаты",      "ДатаВыписки");
	ДобавитьПКС(СвойстваШапки, "Комментарий",     "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",      "Контрагент", , "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваШапки, "Номер",           "Номер");
	ДобавитьПКС(СвойстваШапки, "Номер",           "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Организация",     "Организация", , "Справочник_Организации");
	ДобавитьПКС(СвойстваШапки, "Ответственный",   "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",  "Сумма");
	ДобавитьПКС(СвойстваШапки, "СчетКонтрагента", "БанковскийСчет", , "Справочник_БанковскиеСчета");
	ДобавитьПКС(СвойстваШапки, "СчетОрганизации", "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчета");
	ДобавитьПКС(СвойстваШапки, "",                "ВидОперации", 1);
	ДобавитьПКС(СвойстваШапки, "",                "ТипПлатежногоДокумента", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "РасшифровкаПлатежа", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "СтатьяДвиженияДенежныхСредств", "СтатьяДДС", ,"Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "СуммаПлатежа",                  "Сумма");

КонецПроцедуры

Процедура ПКО_Документ_ПлОрдерСписПрочее_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	ДанныеXDTO.Вставить("ТипПлатежногоДокумента", "ПлатежныйОрдер");
	ДанныеXDTO.Вставить("ВидОперации", "ПрочееСписание");
КонецПроцедуры
//  Документ_ПлОрдерСписРасчетыСКонтрагентами_Отправка
Процедура ДобавитьПКО_Документ_ПлОрдерСписРасчетыСКонтрагентами_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПлОрдерСписРасчетыСКонтрагентами_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПлатежныйОрдерСписаниеДенежныхСредств;
	ПравилоКонвертации.ОбъектФормата     = "Документ.СБДСРасчетыСКонтрагентами";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПлОрдерСписРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента", "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",            "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "ДатаОплаты",      "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаОплаты",      "ДатаВыписки");
	ДобавитьПКС(СвойстваШапки, "Комментарий",     "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",      "Контрагент", , "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваШапки, "Номер",           "Номер");
	ДобавитьПКС(СвойстваШапки, "Номер",           "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Организация",     "Организация", , "Справочник_Организации");
	ДобавитьПКС(СвойстваШапки, "Ответственный",   "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",  "Сумма");
	ДобавитьПКС(СвойстваШапки, "СчетКонтрагента", "БанковскийСчет", , "Справочник_БанковскиеСчета");
	ДобавитьПКС(СвойстваШапки, "СчетОрганизации", "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчета");
	ДобавитьПКС(СвойстваШапки, "",                "ВидРасчетов", 1);
	ДобавитьПКС(СвойстваШапки, "",                "ТипПлатежногоДокумента", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "", "ВалютаВзаиморасчетов", 1,"Справочник_Валюты");
	ДобавитьПКС(СвойстваТЧ, "", "Договор", 1,"Справочник_Договоры_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "КратностьВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КурсВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "РасчетыВУсловныхЕдиницах", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "", "СтатьяДДС", 1,"Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);

КонецПроцедуры

Процедура ПКО_Документ_ПлОрдерСписРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	ВидРасчетов = "";
	ЭтоСБДСРасчетыСКонтрагентами(ДанныеИБ, ВидРасчетов);
	ДанныеXDTO.Вставить("ВидРасчетов", ВидРасчетов);
	ДанныеXDTO.Вставить("ТипПлатежногоДокумента", "ПлатежныйОрдер");
	
	ПодготовитьДанныеРасчетыСКонтрагентами(ДанныеИБ, ДанныеXDTO, "ПлатежныйОрдерСписаниеДенежныхСредств");
КонецПроцедуры
//  Документ_ПлОрПостКонвертацияВалюты_Отправка
Процедура ДобавитьПКО_Документ_ПлОрПостКонвертацияВалюты_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПлОрПостКонвертацияВалюты_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПлатежныйОрдерПоступлениеДенежныхСредств;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПБДСКонвертацияВалюты";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПлОрПостКонвертацияВалюты_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",         "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                    "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоДокумента",  "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "ДатаОплаты",              "ДатаВыписки");
	ДобавитьПКС(СвойстваШапки, "Комментарий",             "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",              "Контрагент", , "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваШапки, "НазначениеПлатежа",       "НазначениеПлатежа");
	ДобавитьПКС(СвойстваШапки, "Номер",                   "Номер");
	ДобавитьПКС(СвойстваШапки, "НомерВходящегоДокумента", "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Организация",             "Организация", , "Справочник_Организации");
	ДобавитьПКС(СвойстваШапки, "Ответственный",           "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",          "Сумма");
	ДобавитьПКС(СвойстваШапки, "СчетКонтрагента",         "БанковскийСчетКонтрагента", , "Справочник_БанковскиеСчета");
	ДобавитьПКС(СвойстваШапки, "СчетОрганизации",         "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчета");
	ДобавитьПКС(СвойстваШапки, "",                        "ТипПлатежногоДокумента", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "", "ВалютаКонвертации", 1,"Справочник_Валюты");
	ДобавитьПКС(СвойстваТЧ, "", "Договор", 1,"Справочник_Договоры_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "КратностьКонвертации", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КурсКонвертации", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КурсЦБНаДатуКонвертации", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтатьяДДС", 1,"Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаВал", 1);

КонецПроцедуры

Процедура ПКО_Документ_ПлОрПостКонвертацияВалюты_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	ДанныеXDTO.Вставить("ТипПлатежногоДокумента", "ПлатежныйОрдер");
	ПроверитьОбрезатьНазначениеПлатежа(ДанныеИБ, ДанныеXDTO);
	
	ПодготовитьДанныеКонвертацияВалюты(ДанныеИБ, ДанныеXDTO, "ПлатежныйОрдерПоступлениеДенежныхСредств");
КонецПроцедуры
//  Документ_ПлОрПостПлатКарты_Отправка
Процедура ДобавитьПКО_Документ_ПлОрПостПлатКарты_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПлОрПостПлатКарты_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПлатежныйОрдерПоступлениеДенежныхСредств;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПБДСПоПлатежнымКартам";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПлОрПостПлатКарты_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",         "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                    "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоДокумента",  "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "ДатаОплаты",              "ДатаВыписки");
	ДобавитьПКС(СвойстваШапки, "Комментарий",             "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",              "Контрагент", , "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваШапки, "НазначениеПлатежа",       "НазначениеПлатежа");
	ДобавитьПКС(СвойстваШапки, "Номер",                   "Номер");
	ДобавитьПКС(СвойстваШапки, "НомерВходящегоДокумента", "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Организация",             "Организация", , "Справочник_Организации");
	ДобавитьПКС(СвойстваШапки, "Ответственный",           "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "СтатьяЗатрат",            "СтатьяРасходов", , "Справочник_СтатьиЗатрат_Отправка");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",          "Сумма");
	ДобавитьПКС(СвойстваШапки, "СуммаУслуг",              "СуммаУслуг");
	ДобавитьПКС(СвойстваШапки, "СчетКонтрагента",         "БанковскийСчетКонтрагента", , "Справочник_БанковскиеСчета");
	ДобавитьПКС(СвойстваШапки, "СчетОрганизации",         "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчета");
	ДобавитьПКС(СвойстваШапки, "",                        "ТипПлатежногоДокумента", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "", "ВалютаВзаиморасчетов", 1,"Справочник_Валюты");
	ДобавитьПКС(СвойстваТЧ, "", "Договор", 1,"Справочник_Договоры_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "КратностьВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КурсВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "РасчетыВУсловныхЕдиницах", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "", "СтатьяДДС", 1,"Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);

КонецПроцедуры

Процедура ПКО_Документ_ПлОрПостПлатКарты_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	ДанныеXDTO.Вставить("ТипПлатежногоДокумента", "ПлатежныйОрдер");
	ПроверитьОбрезатьНазначениеПлатежа(ДанныеИБ, ДанныеXDTO);
	
	ПодготовитьДанныеРасчетыСКонтрагентами(ДанныеИБ, ДанныеXDTO, "ПлатежныйОрдерПоступлениеДенежныхСредств");
КонецПроцедуры
//  Документ_ПлОрПостПрочее_Отправка
Процедура ДобавитьПКО_Документ_ПлОрПостПрочее_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПлОрПостПрочее_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПлатежныйОрдерПоступлениеДенежныхСредств;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПБДСПрочееПоступление";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПлОрПостПрочее_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",         "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                    "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоДокумента",  "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "ДатаОплаты",              "ДатаВыписки");
	ДобавитьПКС(СвойстваШапки, "Комментарий",             "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",              "Контрагент", , "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваШапки, "НазначениеПлатежа",       "НазначениеПлатежа");
	ДобавитьПКС(СвойстваШапки, "Номер",                   "Номер");
	ДобавитьПКС(СвойстваШапки, "НомерВходящегоДокумента", "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Организация",             "Организация", , "Справочник_Организации");
	ДобавитьПКС(СвойстваШапки, "Ответственный",           "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",          "Сумма");
	ДобавитьПКС(СвойстваШапки, "СчетКонтрагента",         "БанковскийСчетКонтрагента", , "Справочник_БанковскиеСчета");
	ДобавитьПКС(СвойстваШапки, "СчетОрганизации",         "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчета");
	ДобавитьПКС(СвойстваШапки, "",                        "ТипПлатежногоДокумента", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "РасшифровкаПлатежа", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "СтатьяДвиженияДенежныхСредств", "СтатьяДДС", ,"Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "СуммаПлатежа",                  "Сумма");

КонецПроцедуры

Процедура ПКО_Документ_ПлОрПостПрочее_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	ДанныеXDTO.Вставить("ТипПлатежногоДокумента", "ПлатежныйОрдер");
	ПроверитьОбрезатьНазначениеПлатежа(ДанныеИБ, ДанныеXDTO);
КонецПроцедуры
//  Документ_ПлОрПостРасчетыСКонтрагентами_Отправка
Процедура ДобавитьПКО_Документ_ПлОрПостРасчетыСКонтрагентами_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПлОрПостРасчетыСКонтрагентами_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПлатежныйОрдерПоступлениеДенежныхСредств;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПБДСРасчетыСКонтрагентами";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПлОрПостРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",         "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                    "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоДокумента",  "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "ДатаОплаты",              "ДатаВыписки");
	ДобавитьПКС(СвойстваШапки, "Комментарий",             "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",              "Контрагент", , "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваШапки, "НазначениеПлатежа",       "НазначениеПлатежа");
	ДобавитьПКС(СвойстваШапки, "Номер",                   "Номер");
	ДобавитьПКС(СвойстваШапки, "НомерВходящегоДокумента", "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Организация",             "Организация", , "Справочник_Организации");
	ДобавитьПКС(СвойстваШапки, "Ответственный",           "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",          "Сумма");
	ДобавитьПКС(СвойстваШапки, "СчетКонтрагента",         "БанковскийСчетКонтрагента", , "Справочник_БанковскиеСчета");
	ДобавитьПКС(СвойстваШапки, "СчетОрганизации",         "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчета");
	ДобавитьПКС(СвойстваШапки, "",                        "ВидРасчетов", 1);
	ДобавитьПКС(СвойстваШапки, "",                        "ТипПлатежногоДокумента", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "", "ВалютаВзаиморасчетов", 1,"Справочник_Валюты");
	ДобавитьПКС(СвойстваТЧ, "", "Договор", 1,"Справочник_Договоры_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "КратностьВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КурсВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "РасчетыВУсловныхЕдиницах", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "", "СтатьяДДС", 1,"Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);

КонецПроцедуры

Процедура ПКО_Документ_ПлОрПостРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	ВидРасчетов = "";
	ЭтоПБДСРасчетыСКонтрагентами(ДанныеИБ, ВидРасчетов);
	ДанныеXDTO.Вставить("ВидРасчетов", ВидРасчетов);
	ДанныеXDTO.Вставить("ТипПлатежногоДокумента", "ПлатежныйОрдер");
	ПроверитьОбрезатьНазначениеПлатежа(ДанныеИБ, ДанныеXDTO);
	
	ПодготовитьДанныеРасчетыСКонтрагентами(ДанныеИБ, ДанныеXDTO, "ПлатежныйОрдерПоступлениеДенежныхСредств");
КонецПроцедуры
//  Документ_ПлТребВыстПрочее_Отправка
Процедура ДобавитьПКО_Документ_ПлТребВыстПрочее_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПлТребВыстПрочее_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПлатежноеТребованиеВыставленное;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПБДСПрочееПоступление";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПлТребВыстПрочее_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",   "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",              "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаОплаты",        "ДатаВыписки");
	ДобавитьПКС(СвойстваШапки, "Комментарий",       "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",        "Контрагент", , "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваШапки, "НазначениеПлатежа", "НазначениеПлатежа");
	ДобавитьПКС(СвойстваШапки, "Номер",             "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",       "Организация", , "Справочник_Организации");
	ДобавитьПКС(СвойстваШапки, "Ответственный",     "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",    "Сумма");
	ДобавитьПКС(СвойстваШапки, "СчетКонтрагента",   "БанковскийСчетКонтрагента", , "Справочник_БанковскиеСчета");
	ДобавитьПКС(СвойстваШапки, "СчетОрганизации",   "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчета");
	ДобавитьПКС(СвойстваШапки, "",                  "ТипПлатежногоДокумента", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "РасшифровкаПлатежа", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "СтатьяДвиженияДенежныхСредств", "СтатьяДДС", ,"Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "СуммаПлатежа",                  "Сумма");

КонецПроцедуры

Процедура ПКО_Документ_ПлТребВыстПрочее_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	ДанныеXDTO.Вставить("ТипПлатежногоДокумента", "ПлатежноеТребование");
	ПроверитьОбрезатьНазначениеПлатежа(ДанныеИБ, ДанныеXDTO);
КонецПроцедуры
//  Документ_ПлТребВыстРасчетыСКонтрагентами_Отправка
Процедура ДобавитьПКО_Документ_ПлТребВыстРасчетыСКонтрагентами_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПлТребВыстРасчетыСКонтрагентами_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПлатежноеТребованиеВыставленное;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПБДСРасчетыСКонтрагентами";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПлТребВыстРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",   "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",              "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаОплаты",        "ДатаВыписки");
	ДобавитьПКС(СвойстваШапки, "Комментарий",       "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",        "Контрагент", , "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваШапки, "НазначениеПлатежа", "НазначениеПлатежа");
	ДобавитьПКС(СвойстваШапки, "Номер",             "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",       "Организация", , "Справочник_Организации");
	ДобавитьПКС(СвойстваШапки, "Ответственный",     "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",    "Сумма");
	ДобавитьПКС(СвойстваШапки, "СчетКонтрагента",   "БанковскийСчетКонтрагента", , "Справочник_БанковскиеСчета");
	ДобавитьПКС(СвойстваШапки, "СчетОрганизации",   "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчета");
	ДобавитьПКС(СвойстваШапки, "",                  "ВидРасчетов", 1);
	ДобавитьПКС(СвойстваШапки, "",                  "ТипПлатежногоДокумента", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "", "ВалютаВзаиморасчетов", 1,"Справочник_Валюты");
	ДобавитьПКС(СвойстваТЧ, "", "Договор", 1,"Справочник_Договоры_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "КратностьВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КурсВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "РасчетыВУсловныхЕдиницах", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "", "СтатьяДДС", 1,"Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);

КонецПроцедуры

Процедура ПКО_Документ_ПлТребВыстРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	ВидРасчетов = "";
	ЭтоПБДСРасчетыСКонтрагентами(ДанныеИБ, ВидРасчетов);
	ДанныеXDTO.Вставить("ВидРасчетов", ВидРасчетов);
	ДанныеXDTO.Вставить("ТипПлатежногоДокумента", "ПлатежноеТребование");
	ПроверитьОбрезатьНазначениеПлатежа(ДанныеИБ, ДанныеXDTO);
	
	ПодготовитьДанныеРасчетыСКонтрагентами(ДанныеИБ, ДанныеXDTO, "ПлатежноеТребованиеВыставленное");
КонецПроцедуры
//  Документ_ПлТребПолучПрочее_Отправка
Процедура ДобавитьПКО_Документ_ПлТребПолучПрочее_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПлТребПолучПрочее_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПлатежноеТребованиеПолученное;
	ПравилоКонвертации.ОбъектФормата     = "Документ.СБДСПрочееСписание";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПлТребПолучПрочее_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",         "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "ВидПлатежа",              "ВидПлатежа");
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоДокумента",  "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "ДатаОплаты",              "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаОплаты",              "ДатаВыписки");
	ДобавитьПКС(СвойстваШапки, "Комментарий",             "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",              "Контрагент", , "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваШапки, "НазначениеПлатежа",       "НазначениеПлатежа");
	ДобавитьПКС(СвойстваШапки, "Номер",                   "Номер");
	ДобавитьПКС(СвойстваШапки, "НомерВходящегоДокумента", "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Организация",             "Организация", , "Справочник_Организации");
	ДобавитьПКС(СвойстваШапки, "Ответственный",           "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",          "Сумма");
	ДобавитьПКС(СвойстваШапки, "СчетКонтрагента",         "БанковскийСчет", , "Справочник_БанковскиеСчета");
	ДобавитьПКС(СвойстваШапки, "СчетОрганизации",         "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчета");
	ДобавитьПКС(СвойстваШапки, "",                        "ВидОперации", 1);
	ДобавитьПКС(СвойстваШапки, "",                        "ТипПлатежногоДокумента", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "РасшифровкаПлатежа", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "СтатьяДвиженияДенежныхСредств", "СтатьяДДС", ,"Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "СуммаПлатежа",                  "Сумма");

КонецПроцедуры

Процедура ПКО_Документ_ПлТребПолучПрочее_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	ДанныеXDTO.Вставить("ТипПлатежногоДокумента", "ПлатежноеТребование");
	ДанныеXDTO.Вставить("ВидОперации", "ПрочееСписание");
	ПроверитьОбрезатьНазначениеПлатежа(ДанныеИБ, ДанныеXDTO);
КонецПроцедуры
//  Документ_ПлТребПолучРасчетыСКонтрагентами_Отправка
Процедура ДобавитьПКО_Документ_ПлТребПолучРасчетыСКонтрагентами_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПлТребПолучРасчетыСКонтрагентами_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПлатежноеТребованиеПолученное;
	ПравилоКонвертации.ОбъектФормата     = "Документ.СБДСРасчетыСКонтрагентами";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПлТребПолучРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",         "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "ВидПлатежа",              "ВидПлатежа");
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоДокумента",  "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "ДатаОплаты",              "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаОплаты",              "ДатаВыписки");
	ДобавитьПКС(СвойстваШапки, "Комментарий",             "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",              "Контрагент", , "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваШапки, "НазначениеПлатежа",       "НазначениеПлатежа");
	ДобавитьПКС(СвойстваШапки, "Номер",                   "Номер");
	ДобавитьПКС(СвойстваШапки, "НомерВходящегоДокумента", "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Организация",             "Организация", , "Справочник_Организации");
	ДобавитьПКС(СвойстваШапки, "Ответственный",           "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",          "Сумма");
	ДобавитьПКС(СвойстваШапки, "СчетКонтрагента",         "БанковскийСчет", , "Справочник_БанковскиеСчета");
	ДобавитьПКС(СвойстваШапки, "СчетОрганизации",         "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчета");
	ДобавитьПКС(СвойстваШапки, "",                        "ВидРасчетов", 1);
	ДобавитьПКС(СвойстваШапки, "",                        "ТипПлатежногоДокумента", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "", "ВалютаВзаиморасчетов", 1,"Справочник_Валюты");
	ДобавитьПКС(СвойстваТЧ, "", "Договор", 1,"Справочник_Договоры_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "КратностьВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КурсВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "РасчетыВУсловныхЕдиницах", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "", "СтатьяДДС", 1,"Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);

КонецПроцедуры

Процедура ПКО_Документ_ПлТребПолучРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	ВидРасчетов = "";
	ЭтоСБДСРасчетыСКонтрагентами(ДанныеИБ, ВидРасчетов);
	ДанныеXDTO.Вставить("ВидРасчетов", ВидРасчетов);
	ДанныеXDTO.Вставить("ТипПлатежногоДокумента", "ПлатежноеТребование");
	ПроверитьОбрезатьНазначениеПлатежа(ДанныеИБ, ДанныеXDTO);
	
	ПодготовитьДанныеРасчетыСКонтрагентами(ДанныеИБ, ДанныеXDTO, "ПлатежноеТребованиеПолученное");
КонецПроцедуры
//  Документ_ПоступлениеДопРасходов_Отправка
Процедура ДобавитьПКО_Документ_ПоступлениеДопРасходов_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПоступлениеДопРасходов_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПоступлениеДопРасходов;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПоступлениеТоваровУслуг";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПоступлениеДопРасходов_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",         "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                    "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоДокумента",  "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "ДоговорКонтрагента",      "Договор", , "Справочник_Договоры_Отправка");
	ДобавитьПКС(СвойстваШапки, "Комментарий",             "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",              "Контрагент", , "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваШапки, "КратностьВзаиморасчетов", "КратностьВзаиморасчетов");
	ДобавитьПКС(СвойстваШапки, "КурсВзаиморасчетов",      "КурсВзаиморасчетов");
	ДобавитьПКС(СвойстваШапки, "Номер",                   "Номер");
	ДобавитьПКС(СвойстваШапки, "НомерВходящегоДокумента", "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Организация",             "Организация", , "Справочник_Организации");
	ДобавитьПКС(СвойстваШапки, "Ответственный",           "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Подразделение",           "Подразделение", , "Справочник_Подразделения");
	ДобавитьПКС(СвойстваШапки, "Сумма",                   "Сумма");
	ДобавитьПКС(СвойстваШапки, "СуммаВключаетНДС",        "СуммаВключаетНДС");
	ДобавитьПКС(СвойстваШапки, "",                        "ВалютаВзаиморасчетов", 1, "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "",                        "ВидОперации", 1);
	ДобавитьПКС(СвойстваШапки, "",                        "РасчетыВУсловныхЕдиницах", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "РасшифровкаДопРасходов");
	ДобавитьПКС(СвойстваТЧ, "", "ДокументПоступления", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "СтоимостьТоваров", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Услуги");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Содержание", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЭтоДопРасходы", 1);

КонецПроцедуры

Процедура ПКО_Документ_ПоступлениеДопРасходов_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
		
	ДанныеXDTO.Вставить("ВидОперации", "ПокупкаУПоставщика");
	ДанныеДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеИБ.ДоговорКонтрагента, "РасчетыВУсловныхЕдиницах, ВалютаВзаиморасчетов");
	ДанныеXDTO.Вставить("ВалютаВзаиморасчетов", ДанныеДоговора.ВалютаВзаиморасчетов); 
	ДанныеXDTO.Вставить("РасчетыВУсловныхЕдиницах", ДанныеДоговора.РасчетыВУсловныхЕдиницах);
	
	ЗапросУслуги = Новый Запрос;
	ЗапросУслуги.Текст = "ВЫБРАТЬ
	|Док.Содержание КАК Содержание,
	|1 КАК Количество,
	|ИСТИНА КАК ЭтоДопРасходы,
	|Док.СтавкаНДС КАК СтавкаНДС,
	|Док.Сумма КАК Сумма,
	|Док.СуммаНДС КАК СуммаНДС,
	|Док.Сумма КАК Цена
	|ИЗ Документ.ПоступлениеДопРасходов КАК Док
	|ГДЕ Док.Ссылка = &Ссылка";
	ЗапросУслуги.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	ДанныеXDTO.Вставить("Услуги", ЗапросУслуги.Выполнить().Выгрузить());
	 
	ЗапросТовары = Новый Запрос;
	Если Константы.ИспользоватьРасширеннуюАналитикуУчетаНоменклатурыИЗатрат.Получить() = Истина
		И Константы.ДатаНачалаИспользованияРасширеннойАналитикиУчетаНоменклатурыИЗатрат.Получить() <= ДанныеИБ.Дата Тогда
		ЗапросТовары.Текст = "ВЫБРАТЬ
		|РегАналитикаУчетаЗатрат.Затрата КАК Номенклатура,
		|РегАналитикаУчетаЗатрат.ХарактеристикаЗатраты КАК Характеристика,
		|Сумма(УчетЗатрат.Стоимость) КАК Стоимость
		|ПОМЕСТИТЬ ТабПартии
		|ИЗ РегистрНакопления.УчетЗатрат КАК УчетЗатрат
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПартий КАК РегАналитикаУчетаПартий
		|ПО УчетЗатрат.АналитикаУчетаПартий = РегАналитикаУчетаПартий.Ссылка
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаЗатрат КАК РегАналитикаУчетаЗатрат
		|ПО УчетЗатрат.АналитикаУчетаЗатрат = РегАналитикаУчетаЗатрат.Ссылка
		|ГДЕ УчетЗатрат.Регистратор = &Ссылка 
		|СГРУППИРОВАТЬ ПО
		|РегАналитикаУчетаЗатрат.Затрата,
		|РегАналитикаУчетаЗатрат.ХарактеристикаЗатраты 
		|;";
	Иначе
		ЗапросТовары.Текст = "ВЫБРАТЬ
		|ТабПартии.Номенклатура КАК Номенклатура,
		|ТабПартии.ХарактеристикаНоменклатуры КАК Характеристика,
		|Сумма(ТабПартии.Стоимость) КАК Стоимость
		|ПОМЕСТИТЬ ТабПартии
		|ИЗ РегистрНакопления.ПартииТоваровНаСкладах КАК ТабПартии
		|ГДЕ ТабПартии.Регистратор = &Ссылка
		|СГРУППИРОВАТЬ ПО
		|ТабПартии.Номенклатура,
		|ТабПартии.ХарактеристикаНоменклатуры
		|;";
	КонецЕсли;
	
	ЗапросТовары.Текст = ЗапросТовары.Текст + "
	|ВЫБРАТЬ
	|	ТабТовары.Номенклатура КАК Номенклатура,
	|	ТабТовары.ХарактеристикаНоменклатуры КАК Характеристика,
	|	ТабТовары.Количество * ТабТовары.Коэффициент КАК Количество,
	|	ТабТовары.СуммаТовара КАК СтоимостьТоваров,
	|	ТабТовары.ДокументПартии КАК ДокументПартии,
	|	ТабТовары.СуммаНДС КАК СуммаНДС,  
	|	ТабТовары.Сумма КАК Сумма,
	|	ЕстьNULL(ТабПартии.Стоимость,0) КАК СтоимостьПартии 
	|ИЗ Документ.ПоступлениеДопРасходов.Товары КАК ТабТовары
	|ЛЕВОЕ СОЕДИНЕНИЕ ТабПартии КАК ТабПартии
	|ПО ТабПартии.Номенклатура = ТабТовары.Номенклатура
	|	И ТабПартии.Характеристика = ТабТовары.ХарактеристикаНоменклатуры
	|ГДЕ ТабТовары.Ссылка = &Ссылка
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ
	|	ТабТовары.Номенклатура КАК Номенклатура,
	|	ТабТовары.ХарактеристикаНоменклатуры КАК Характеристика,
	|	ТабТовары.Количество * ТабТовары.Коэффициент КАК Количество,
	|	ТабТовары.СуммаТовара КАК СтоимостьТоваров,
	|	ТабТовары.ДокументПартии КАК ДокументПартии,
	|	ТабТовары.СуммаНДС КАК СуммаНДС,  
	|	ТабТовары.Сумма КАК Сумма,
	|	ЕстьNULL(ТабПартии.Стоимость,0) КАК СтоимостьПартии 
	|ИЗ Документ.ПоступлениеДопРасходов.Оборудование КАК ТабТовары
	|ЛЕВОЕ СОЕДИНЕНИЕ ТабПартии КАК ТабПартии
	|ПО ТабПартии.Номенклатура = ТабТовары.Номенклатура
	|	И ТабПартии.Характеристика = ТабТовары.ХарактеристикаНоменклатуры
	|ГДЕ ТабТовары.Ссылка = &Ссылка
	|";
	ЗапросТовары.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	ТабТовары = ЗапросТовары.Выполнить().Выгрузить();
	ТабТовары.Колонки.Добавить("ДокументПоступления");
	ТабТоварыСвод = ТабТовары.Скопировать();
	ТабТоварыСвод.Свернуть("Номенклатура, Характеристика", "СтоимостьТоваров, Количество");
	Если ТабТоварыСвод.Количество() <> ТабТовары.Количество() Тогда
		РаспределятьПоСумме = (ДанныеИБ.СпособРаспределения = Перечисления.СпособыРаспределенияДопРасходов.ПоСумме);
		Для Каждого СтрТоварыСвод Из ТабТоварыСвод Цикл
			СтрПоиска = Новый Структура("Номенклатура, Характеристика", СтрТоварыСвод.Номенклатура, СтрТоварыСвод.Характеристика);
			СтрокиТовары = ТабТовары.НайтиСтроки(СтрПоиска);
			Если СтрокиТовары.Количество() > 1 Тогда  // требуется распределение стоимости партии по строкам с одинаковой номенклатурой.
				СтоимостьПартии = СтрокиТовары[0].СтоимостьПартии;
				Для Каждого СтрТовары Из СтрокиТовары Цикл
					Если РаспределятьПоСумме Тогда
						Коэф = СтрТовары.СтоимостьТоваров / СтрТоварыСвод.СтоимостьТоваров;
					Иначе
						Коэф = СтрТовары.Количество / СтрТоварыСвод.Количество;
					КонецЕсли;
					СтрТовары.СтоимостьПартии = Окр(СтоимостьПартии * Коэф, 2); 
				КонецЦикла
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Для Каждого СтрТовары Из ТабТовары Цикл
		// Сумма доп расходов на товар
		Если СтрТовары.СтоимостьПартии <> 0 Тогда
			СтрТовары.Сумма = СтрТовары.СтоимостьПартии;
		КонецЕсли;
		ИмяПКО = ОпределитьИмяПКОПоСсылкеНаДокумент(СтрТовары.ДокументПартии);
		Если ПустаяСтрока(ИмяПКО) Тогда
			Продолжить;
		КонецЕсли;
		СтрТовары.ДокументПоступления = Новый Структура("Значение, ИмяПКО", СтрТовары.ДокументПартии, ИмяПКО);
	КонецЦикла;
	ДанныеXDTO.Вставить("РасшифровкаДопРасходов", ТабТовары);
КонецПроцедуры
//  Документ_ПоступлениеОтПереработчика_Отправка
Процедура ДобавитьПКО_Документ_ПоступлениеОтПереработчика_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПоступлениеОтПереработчика_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПоступлениеТоваровИзПереработки;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПоступлениеОтПереработчика";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПоступлениеОтПереработчика_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",               "Дата");
	ДобавитьПКС(СвойстваШапки, "ДоговорКонтрагента", "Договор", , "Справочник_Договоры_Отправка");
	ДобавитьПКС(СвойстваШапки, "Комментарий",        "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",         "Контрагент", , "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваШапки, "Номер",              "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",        "Организация", , "Справочник_Организации");
	ДобавитьПКС(СвойстваШапки, "Ответственный",      "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Подразделение",      "Подразделение", , "Справочник_Подразделения");
	ДобавитьПКС(СвойстваШапки, "",                   "Склад", 1, "Справочник_Склады");
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",    "Валюта", 1, "Справочник_Валюты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоУпаковок", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Характеристика", 1,"Справочник_ХарактеристикиНоменклатуры_Отправка");

КонецПроцедуры

Процедура ПКО_Документ_ПоступлениеОтПереработчика_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	Если ЗначениеЗаполнено(ДанныеИБ.СкладОрдер) Тогда
		Если ТипЗнч(ДанныеИБ.СкладОрдер) = Тип("СправочникСсылка.Склады") Тогда
			Склад = ДанныеИБ.СкладОрдер;
		Иначе
			Склад = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.СкладОрдер, "Склад");
		КонецЕсли;
		ДанныеXDTO.Вставить("Склад", Склад); 
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ДанныеИБ.ВалютаДокумента) Тогда
		ДанныеXDTO.Вставить("Валюта", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.ДоговорКонтрагента, "ВалютаВзаиморасчетов"));
	КонецЕсли;
	ЗапросТовары = Новый Запрос;
	ЗапросТовары.Текст = "ВЫБРАТЬ
	|	ТабТовары.Номенклатура КАК Номенклатура,
	|	ТабТовары.ХарактеристикаНоменклатуры КАК Характеристика,
	|	ТабТовары.Количество * ТабТовары.Коэффициент КАК Количество,
	|	ТабТовары.Коэффициент КАК Коэффициент,
	|	ТабТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ТабТовары.Количество КАК КоличествоУпаковок
	|ИЗ Документ.ПоступлениеТоваровИзПереработки.Продукция КАК ТабТовары
	|ГДЕ ТабТовары.Ссылка = &Ссылка
	|УПОРЯДОЧИТЬ ПО ТабТовары.НомерСтроки";
	ЗапросТовары.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	ТабТовары = ЗапросТовары.Выполнить().Выгрузить();
	ДанныеXDTO.Вставить("Товары", ТабТовары);
КонецПроцедуры
//  Документ_ПоступлениеСырьяОтДавальца_Отправка
Процедура ДобавитьПКО_Документ_ПоступлениеСырьяОтДавальца_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПоступлениеСырьяОтДавальца_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПоступлениеТоваровУслуг;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПоступлениеСырьяОтДавальца";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПоступлениеСырьяОтДавальца_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "БанковскийСчетКонтрагента", "БанковскийСчетКонтрагента", , "Справочник_БанковскиеСчета");
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",           "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Грузоотправитель",          "Грузоотправитель", , "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваШапки, "Дата",                      "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоДокумента",    "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "ДоговорКонтрагента",        "Договор", , "Справочник_Договоры_Отправка");
	ДобавитьПКС(СвойстваШапки, "Комментарий",               "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",                "Контрагент", , "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваШапки, "КратностьВзаиморасчетов",   "КратностьВзаиморасчетов");
	ДобавитьПКС(СвойстваШапки, "КурсВзаиморасчетов",        "КурсВзаиморасчетов");
	ДобавитьПКС(СвойстваШапки, "Номер",                     "Номер");
	ДобавитьПКС(СвойстваШапки, "НомерВходящегоДокумента",   "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Организация",               "Организация", , "Справочник_Организации");
	ДобавитьПКС(СвойстваШапки, "Ответственный",             "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Подразделение",             "Подразделение", , "Справочник_Подразделения");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",            "Сумма");
	ДобавитьПКС(СвойстваШапки, "",                          "РасчетыВУсловныхЕдиницах", 1);
	ДобавитьПКС(СвойстваШапки, "",                          "Склад", 1, "Справочник_Склады");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоУпаковок", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Характеристика", 1,"Справочник_ХарактеристикиНоменклатуры_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);

КонецПроцедуры

Процедура ПКО_Документ_ПоступлениеСырьяОтДавальца_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	Склад = Неопределено;
	Если ЗначениеЗаполнено(ДанныеИБ.СкладОрдер) Тогда
		Если ТипЗнч(ДанныеИБ.СкладОрдер) = Тип("ДокументСсылка.ПриходныйОрдерНаТовары") Тогда
			Склад = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.СкладОрдер, "Склад");
		Иначе
			Склад = ДанныеИБ.СкладОрдер;
		КонецЕсли;
	ИначеЕсли ДанныеИБ.Товары.Количество() > 0 Тогда
		Склад = ДанныеИБ.Товары[0].Склад;
	КонецЕсли;
	ДанныеXDTO.Вставить("Склад", Склад);
	
	ДанныеДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеИБ.ДоговорКонтрагента, "РасчетыВУсловныхЕдиницах");
	ДанныеXDTO.Вставить("РасчетыВУсловныхЕдиницах", ДанныеДоговора.РасчетыВУсловныхЕдиницах); 
	
	ЗапросТовары = Новый Запрос;
	ЗапросТовары.Текст = "ВЫБРАТЬ
	|	ТабТовары.Номенклатура КАК Номенклатура,
	|	ТабТовары.ХарактеристикаНоменклатуры КАК Характеристика,
	|	ТабТовары.Количество * ТабТовары.Коэффициент КАК Количество,
	|	ТабТовары.Коэффициент КАК Коэффициент,
	|	ТабТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ТабТовары.Количество КАК КоличествоУпаковок,
	|	ТабТовары.Цена КАК Цена,
	|	ВЫРАЗИТЬ(""ДавальческиеСырьеИМатериалы"" КАК Строка(50)) КАК ТипЗапасов,
	|	ТабТовары.Сумма КАК Сумма
	|ИЗ Документ.ПоступлениеТоваровУслуг.Товары КАК ТабТовары
	|ГДЕ ТабТовары.Ссылка = &Ссылка
	|";
	ЗапросТовары.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	ТабТовары = ЗапросТовары.Выполнить().Выгрузить();
	ДанныеXDTO.Вставить("Товары", ТабТовары);
КонецПроцедуры
//  Документ_ПоступлениеТоваровУслуг_Отправка
Процедура ДобавитьПКО_Документ_ПоступлениеТоваровУслуг_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПоступлениеТоваровУслуг_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПоступлениеТоваровУслуг;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПоступлениеТоваровУслуг";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПоступлениеТоваровУслуг_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "БанковскийСчетКонтрагента", "БанковскийСчетКонтрагента", , "Справочник_БанковскиеСчета");
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",           "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                      "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоДокумента",    "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "ДоговорКонтрагента",        "Договор", , "Справочник_Договоры_Отправка");
	ДобавитьПКС(СвойстваШапки, "Комментарий",               "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",                "Контрагент", , "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваШапки, "КратностьВзаиморасчетов",   "КратностьВзаиморасчетов");
	ДобавитьПКС(СвойстваШапки, "КурсВзаиморасчетов",        "КурсВзаиморасчетов");
	ДобавитьПКС(СвойстваШапки, "Номер",                     "Номер");
	ДобавитьПКС(СвойстваШапки, "НомерВходящегоДокумента",   "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Организация",               "Организация", , "Справочник_Организации");
	ДобавитьПКС(СвойстваШапки, "Ответственный",             "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Подразделение",             "Подразделение", , "Справочник_Подразделения");
	ДобавитьПКС(СвойстваШапки, "СуммаВключаетНДС",          "СуммаВключаетНДС");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",            "Сумма");
	ДобавитьПКС(СвойстваШапки, "",                          "ВалютаВзаиморасчетов", 1, "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "",                          "ВидОперации", 1);
	ДобавитьПКС(СвойстваШапки, "",                          "РасчетыВУсловныхЕдиницах", 1);
	ДобавитьПКС(СвойстваШапки, "",                          "Склад", 1, "Справочник_Склады");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоУпаковок", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Характеристика", 1,"Справочник_ХарактеристикиНоменклатуры_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Услуги");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "ПодразделениеЗатрат", 1,"Справочник_Подразделения");
	ДобавитьПКС(СвойстваТЧ, "", "Содержание", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "", "СтатьяЗатрат", 1,"Справочник_СтатьиЗатрат_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СчетЗатрат", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);

КонецПроцедуры

Процедура ПКО_Документ_ПоступлениеТоваровУслуг_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	Склад = Неопределено;
	Если ЗначениеЗаполнено(ДанныеИБ.СкладОрдер) Тогда
		Если ТипЗнч(ДанныеИБ.СкладОрдер) = Тип("ДокументСсылка.ПриходныйОрдерНаТовары") Тогда
			Склад = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.СкладОрдер, "Склад");
		Иначе
			Склад = ДанныеИБ.СкладОрдер;
		КонецЕсли;
	ИначеЕсли ДанныеИБ.Товары.Количество() > 0 Тогда
		Склад = ДанныеИБ.Товары[0].Склад;
	ИначеЕсли ДанныеИБ.ВозвратнаяТара.Количество() > 0 Тогда
		Склад = ДанныеИБ.ВозвратнаяТара[0].Склад;
	КонецЕсли;
	ДанныеXDTO.Вставить("Склад", Склад);
	
	ДанныеДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеИБ.ДоговорКонтрагента, "ВидДоговора, РасчетыВУсловныхЕдиницах, ВалютаВзаиморасчетов");
	Если ДанныеДоговора.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом 
		Или ДанныеДоговора.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
		ВидОперации = "ПриемНаКомиссию";
	Иначе
		ВидОперации = "ПокупкаУПоставщика";
	КонецЕсли;
	ДанныеXDTO.Вставить("ВидОперации", ВидОперации); 
	ДанныеXDTO.Вставить("ВалютаВзаиморасчетов", ДанныеДоговора.ВалютаВзаиморасчетов); 
	ДанныеXDTO.Вставить("РасчетыВУсловныхЕдиницах", ДанныеДоговора.РасчетыВУсловныхЕдиницах); 
	
	ЗапросТовары = Новый Запрос;
	ЗапросТовары.Текст = "ВЫБРАТЬ
	|	ТабТовары.Номенклатура КАК Номенклатура,
	|	ТабТовары.ХарактеристикаНоменклатуры КАК Характеристика,
	|	ТабТовары.Количество * ТабТовары.Коэффициент КАК Количество,
	|	ТабТовары.Коэффициент КАК Коэффициент,
	|	ТабТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ТабТовары.Количество КАК КоличествоУпаковок,
	|	ТабТовары.Цена КАК Цена,
	|	ТабТовары.СтавкаНДС КАК СтавкаНДС,
	|	ТабТовары.СуммаНДС КАК СуммаНДС,  
	|	ВЫРАЗИТЬ("""" КАК Строка(50)) КАК ТипЗапасов,
	|	ТабТовары.Сумма КАК Сумма
	|ИЗ Документ.ПоступлениеТоваровУслуг.Товары КАК ТабТовары
	|ГДЕ ТабТовары.Ссылка = &Ссылка
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ
	|	ТабТара.Номенклатура,
	|	null,
	|	ТабТара.Количество,
	|	1,
	|	ТабТара.Номенклатура.ЕдиницаХраненияОстатков,
	|	ТабТара.Количество,
	|	ТабТара.Цена,
	|	null,
	|	0,  
	|	ВЫРАЗИТЬ(""ВозвратнаяТара"" КАК Строка(50)) КАК ТипЗапасов,
	|	ТабТара.Сумма КАК Сумма
	|ИЗ Документ.ПоступлениеТоваровУслуг.ВозвратнаяТара КАК ТабТара
	|ГДЕ ТабТара.Ссылка = &Ссылка
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ
	|	ТабТовары.Номенклатура КАК Номенклатура,
	|	ТабТовары.ХарактеристикаНоменклатуры КАК Характеристика,
	|	ТабТовары.Количество * ТабТовары.Коэффициент КАК Количество,
	|	ТабТовары.Коэффициент КАК Коэффициент,
	|	ТабТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ТабТовары.Количество КАК КоличествоУпаковок,
	|	ТабТовары.Цена КАК Цена,
	|	ТабТовары.СтавкаНДС КАК СтавкаНДС,
	|	ТабТовары.СуммаНДС КАК СуммаНДС,  
	|	ВЫРАЗИТЬ(""СобственныеТовары"" КАК Строка(50)) КАК ТипЗапасов,
	|	ТабТовары.Сумма КАК Сумма
	|ИЗ Документ.ПоступлениеТоваровУслуг.Оборудование КАК ТабТовары
	|ГДЕ ТабТовары.Ссылка = &Ссылка
	|";
	ЗапросТовары.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	ТабТовары = ЗапросТовары.Выполнить().Выгрузить();
	ОпределитьТипыЗапасовПриОтправке(ДанныеИБ, ТабТовары);
	ДанныеXDTO.Вставить("Товары", ТабТовары);
	
	ЗапросУслуги = Новый Запрос;
	ЗапросУслуги.Текст = "ВЫБРАТЬ
	|	ТабУслуги.Номенклатура КАК Номенклатура,
	|	ТабУслуги.Содержание КАК Содержание,
	|	ТабУслуги.Количество КАК Количество,
	|	ТабУслуги.Подразделение КАК ПодразделениеЗатрат,
	|	ТабУслуги.СтатьяЗатрат КАК СтатьяЗатрат,
	|	ТабУслуги.СчетЗатрат.Код КАК СчетЗатрат,
	|	ТабУслуги.Цена КАК Цена,
	|	ТабУслуги.СтавкаНДС КАК СтавкаНДС,
	|	ТабУслуги.СуммаНДС КАК СуммаНДС,  
	|	ТабУслуги.Сумма КАК Сумма
	|ИЗ Документ.ПоступлениеТоваровУслуг.Услуги КАК ТабУслуги
	|ГДЕ ТабУслуги.Ссылка = &Ссылка
	|";
	ЗапросУслуги.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	ДанныеXDTO.Вставить("Услуги", ЗапросУслуги.Выполнить().Выгрузить());
КонецПроцедуры
//  Документ_ПоступлениеТоваровУслугВНТТ_Отправка
Процедура ДобавитьПКО_Документ_ПоступлениеТоваровУслугВНТТ_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПоступлениеТоваровУслугВНТТ_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПоступлениеТоваровУслугВНТТ;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПоступлениеТоваровУслуг";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПоступлениеТоваровУслугВНТТ_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "БанковскийСчетКонтрагента", "БанковскийСчетКонтрагента", , "Справочник_БанковскиеСчета");
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",           "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                      "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоДокумента",    "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "ДоговорКонтрагента",        "Договор", , "Справочник_Договоры_Отправка");
	ДобавитьПКС(СвойстваШапки, "Комментарий",               "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",                "Контрагент", , "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваШапки, "КратностьВзаиморасчетов",   "КратностьВзаиморасчетов");
	ДобавитьПКС(СвойстваШапки, "КурсВзаиморасчетов",        "КурсВзаиморасчетов");
	ДобавитьПКС(СвойстваШапки, "Номер",                     "Номер");
	ДобавитьПКС(СвойстваШапки, "НомерВходящегоДокумента",   "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Организация",               "Организация", , "Справочник_Организации");
	ДобавитьПКС(СвойстваШапки, "Ответственный",             "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Подразделение",             "Подразделение", , "Справочник_Подразделения");
	ДобавитьПКС(СвойстваШапки, "Склад",                     "Склад", , "Справочник_Склады");
	ДобавитьПКС(СвойстваШапки, "СуммаВключаетНДС",          "СуммаВключаетНДС");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",            "Сумма");
	ДобавитьПКС(СвойстваШапки, "",                          "ВалютаВзаиморасчетов", 1, "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "",                          "ВидОперации", 1);
	ДобавитьПКС(СвойстваШапки, "",                          "РасчетыВУсловныхЕдиницах", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоУпаковок", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаВРознице", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Характеристика", 1,"Справочник_ХарактеристикиНоменклатуры_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЦенаВРознице", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Услуги");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "ПодразделениеЗатрат", 1,"Справочник_Подразделения");
	ДобавитьПКС(СвойстваТЧ, "", "Содержание", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "", "СтатьяЗатрат", 1,"Справочник_СтатьиЗатрат_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СчетЗатрат", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);

КонецПроцедуры

Процедура ПКО_Документ_ПоступлениеТоваровУслугВНТТ_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	ДанныеДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеИБ.ДоговорКонтрагента, "ВидДоговора, РасчетыВУсловныхЕдиницах, ВалютаВзаиморасчетов");
	Если ДанныеДоговора.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом 
		Или ДанныеДоговора.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
		ВидОперации = "ПриемНаКомиссию";
	Иначе
		ВидОперации = "ПокупкаУПоставщика";
	КонецЕсли;
	ДанныеXDTO.Вставить("ВидОперации", ВидОперации); 
	ДанныеXDTO.Вставить("ВалютаВзаиморасчетов", ДанныеДоговора.ВалютаВзаиморасчетов); 
	ДанныеXDTO.Вставить("РасчетыВУсловныхЕдиницах", ДанныеДоговора.РасчетыВУсловныхЕдиницах); 
	
	ЗапросТовары = Новый Запрос;
	ЗапросТовары.Текст = "ВЫБРАТЬ
	|	ТабТовары.Номенклатура КАК Номенклатура,
	|	ТабТовары.ХарактеристикаНоменклатуры КАК Характеристика,
	|	ТабТовары.Количество * ТабТовары.Коэффициент КАК Количество,
	|	ТабТовары.Коэффициент КАК Коэффициент,
	|	ТабТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ТабТовары.Количество КАК КоличествоУпаковок,
	|	ТабТовары.Цена КАК Цена,
	|	ТабТовары.ЦенаВРознице КАК ЦенаВРознице,
	|	ТабТовары.СтавкаНДС КАК СтавкаНДС,
	|	ТабТовары.СуммаНДС КАК СуммаНДС,  
	|	ТабТовары.ЦенаВРознице * ТабТовары.Количество КАК СуммаВРознице,
	|	ВЫРАЗИТЬ("""" КАК Строка(50)) КАК ТипЗапасов,
	|	ТабТовары.Сумма КАК Сумма
	|ИЗ Документ.ПоступлениеТоваровУслугВНТТ.Товары КАК ТабТовары
	|ГДЕ ТабТовары.Ссылка = &Ссылка
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ
	|	ТабТара.Номенклатура,
	|	null,
	|	ТабТара.Количество,
	|	1,
	|	ТабТара.Номенклатура.ЕдиницаХраненияОстатков,
	|	ТабТара.Количество,
	|	ТабТара.Цена,
	|	0,
	|	null,
	|	0, 
	|	0, 
	|	ВЫРАЗИТЬ(""ВозвратнаяТара"" КАК Строка(50)) КАК ТипЗапасов,
	|	ТабТара.Сумма КАК Сумма
	|ИЗ Документ.ПоступлениеТоваровУслугВНТТ.ВозвратнаяТара КАК ТабТара
	|ГДЕ ТабТара.Ссылка = &Ссылка
	|";
	ЗапросТовары.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	ТабТовары = ЗапросТовары.Выполнить().Выгрузить();
	ОпределитьТипыЗапасовПриОтправке(ДанныеИБ, ТабТовары);
	ДанныеXDTO.Вставить("Товары", ТабТовары);
	
	ЗапросУслуги = Новый Запрос;
	ЗапросУслуги.Текст = "ВЫБРАТЬ
	|	ТабУслуги.Номенклатура КАК Номенклатура,
	|	ТабУслуги.Содержание КАК Содержание,
	|	ТабУслуги.Количество КАК Количество,
	|	ТабУслуги.Подразделение КАК ПодразделениеЗатрат,
	|	ТабУслуги.СтатьяЗатрат КАК СтатьяЗатрат,
	|	ТабУслуги.СчетЗатрат.Код КАК СчетЗатрат,
	|	ТабУслуги.Цена КАК Цена,
	|	ТабУслуги.СтавкаНДС КАК СтавкаНДС,
	|	ТабУслуги.СуммаНДС КАК СуммаНДС,  
	|	ТабУслуги.Сумма КАК Сумма
	|ИЗ Документ.ПоступлениеТоваровУслугВНТТ.Услуги КАК ТабУслуги
	|ГДЕ ТабУслуги.Ссылка = &Ссылка
	|";
	ЗапросУслуги.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	ДанныеXDTO.Вставить("Услуги", ЗапросУслуги.Выполнить().Выгрузить());
КонецПроцедуры
//  Документ_РеализацияОтгруженныхТоваров_Отправка
Процедура ДобавитьПКО_Документ_РеализацияОтгруженныхТоваров_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_РеализацияОтгруженныхТоваров_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.РеализацияОтгруженныхТоваров;
	ПравилоКонвертации.ОбъектФормата     = "Документ.РеализацияТоваровУслуг";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_РеализацияОтгруженныхТоваров_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Контрагент",  "Контрагент", , "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваШапки, "Организация", "Организация", , "Справочник_Организации");
	ДобавитьПКС(СвойстваШапки, "",            "АдресДоставки", 1);
	ДобавитьПКС(СвойстваШапки, "",            "БанковскийСчетОрганизации", 1, "Справочник_БанковскиеСчета");
	ДобавитьПКС(СвойстваШапки, "",            "Валюта", 1, "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "",            "ВалютаВзаиморасчетов", 1, "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "",            "ВидОперации", 1);
	ДобавитьПКС(СвойстваШапки, "",            "ГлавныйБухгалтер", 1, "Справочник_ФизическиеЛица_Отправка");
	ДобавитьПКС(СвойстваШапки, "",            "Грузоотправитель", 1, "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваШапки, "",            "Грузополучатель", 1, "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваШапки, "",            "Дата", 1);
	ДобавитьПКС(СвойстваШапки, "",            "ДатаПереходаПраваСобственности", 1);
	ДобавитьПКС(СвойстваШапки, "",            "ДоверенностьДата", 1);
	ДобавитьПКС(СвойстваШапки, "",            "ДоверенностьКемВыдана", 1);
	ДобавитьПКС(СвойстваШапки, "",            "ДоверенностьКомуВыдана", 1);
	ДобавитьПКС(СвойстваШапки, "",            "ДоверенностьНомер", 1);
	ДобавитьПКС(СвойстваШапки, "",            "Договор", 1, "Справочник_Договоры_Отправка");
	ДобавитьПКС(СвойстваШапки, "",            "ЗаГлавногоБухгалтераПоПриказу", 1, "Справочник_ФизическиеЛица_Отправка");
	ДобавитьПКС(СвойстваШапки, "",            "ЗаРуководителяПоПриказу", 1, "Справочник_ФизическиеЛица_Отправка");
	ДобавитьПКС(СвойстваШапки, "",            "Комментарий", 1);
	ДобавитьПКС(СвойстваШапки, "",            "КратностьВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваШапки, "",            "КурсВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваШапки, "",            "Номер", 1);
	ДобавитьПКС(СвойстваШапки, "",            "Ответственный", 1, "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "",            "ОтпускПроизвел", 1, "Справочник_ФизическиеЛица_Отправка");
	ДобавитьПКС(СвойстваШапки, "",            "Подразделение", 1, "Справочник_Подразделения");
	ДобавитьПКС(СвойстваШапки, "",            "РасчетыВУсловныхЕдиницах", 1);
	ДобавитьПКС(СвойстваШапки, "",            "Склад", 1, "Справочник_Склады");
	ДобавитьПКС(СвойстваШапки, "",            "Сумма", 1);
	ДобавитьПКС(СвойстваШапки, "",            "СуммаВключаетНДС", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоУпаковок", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Характеристика", 1,"Справочник_ХарактеристикиНоменклатуры_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Услуги");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Содержание", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);

КонецПроцедуры

Процедура ПКО_Документ_РеализацияОтгруженныхТоваров_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.Вставить("Ссылка", ДанныеИБ.ДокументОтгрузки);
	Если СтекВыгрузки.Количество() > 1 Тогда
		ДанныеДокументаОтгрузки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеИБ.ДокументОтгрузки, "Дата, Номер");
	
		ДанныеXDTO.Вставить("Номер", ДанныеДокументаОтгрузки.Номер);
		ДанныеXDTO.Вставить("Дата", ДанныеДокументаОтгрузки.Дата);
		ДанныеXDTO.Вставить("Ссылка", ДанныеИБ.ДокументОтгрузки);
	
		Возврат;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ДанныеИБ.ДокументОтгрузки)
		Или ТипЗнч(ДанныеИБ.ДокументОтгрузки) = Тип("ДокументСсылка.ПередачаОС") Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеДокументаОтгрузки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеИБ.ДокументОтгрузки,
					"ДоговорКонтрагента, АдресДоставки, БанковскийСчетОрганизации, ГлавныйБухгалтер, Грузоотправитель, Грузополучатель," +
					"ДоверенностьДата, ДоверенностьНомер, ЗаГлавногоБухгалтераПоПриказу, ЗаРуководителяПоПриказу, Комментарий," +
					"Номер, Дата, Ответственный, ОтпускПроизвел, Подразделение, Склад, СуммаВключаетНДС, ВалютаДокумента," +
					"ДоверенностьЧерезКого, ДоверенностьВыдана, СуммаДокумента, КурсВзаиморасчетов, КратностьВзаиморасчетов");
	ДанныеДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеДокументаОтгрузки.ДоговорКонтрагента, "ВидДоговора, РасчетыВУсловныхЕдиницах, ВалютаВзаиморасчетов");
	ВидОперации = "ОтгрузкаБезПереходаПравСобственности_Реализовано";
	ДанныеXDTO.Вставить("ВидОперации", ВидОперации); 
	ДанныеXDTO.Вставить("ВалютаВзаиморасчетов", ДанныеДоговора.ВалютаВзаиморасчетов); 
	ДанныеXDTO.Вставить("РасчетыВУсловныхЕдиницах", ДанныеДоговора.РасчетыВУсловныхЕдиницах); 
	
	Для Каждого РеквизитДокументаОтгрузки Из ДанныеДокументаОтгрузки Цикл
		ДанныеXDTO.Вставить(РеквизитДокументаОтгрузки.Ключ, РеквизитДокументаОтгрузки.Значение);
	КонецЦикла;
	// За руководителя и за главного бухгалтера
	ДанныеXDTO.Вставить("ЗаРуководителяПоПриказу", Неопределено);
	ДанныеXDTO.Вставить("ЗаГлавногоБухгалтераПоПриказу", Неопределено);
	Если ЗначениеЗаполнено(ДанныеДокументаОтгрузки.ЗаРуководителяПоПриказу) Тогда
		ФизЛицоСсылка = Справочники.ФизическиеЛица.НайтиПоНаименованию(ДанныеДокументаОтгрузки.ЗаРуководителяПоПриказу);
		Если ЗНачениеЗаполнено(ФизЛицоСсылка) Тогда
			ДанныеXDTO.Вставить("ЗаРуководителяПоПриказу", ФизЛицоСсылка);
		КонецЕсли;
	КонецЕсли;
	Если ЗначениеЗаполнено(ДанныеДокументаОтгрузки.ЗаГлавногоБухгалтераПоПриказу) Тогда
		ФизЛицоСсылка = Справочники.ФизическиеЛица.НайтиПоНаименованию(ДанныеДокументаОтгрузки.ЗаГлавногоБухгалтераПоПриказу);
		Если ЗНачениеЗаполнено(ФизЛицоСсылка) Тогда
			ДанныеXDTO.Вставить("ЗаГлавногоБухгалтераПоПриказу", ФизЛицоСсылка);
		КонецЕсли;
	КонецЕсли;
	
	ДанныеXDTO.Вставить("Валюта", ДанныеДокументаОтгрузки.ВалютаДокумента);
	ДанныеXDTO.Вставить("Сумма", ДанныеДокументаОтгрузки.СуммаДокумента);
	ДанныеXDTO.Вставить("Договор", ДанныеДокументаОтгрузки.ДоговорКонтрагента); 
	ДанныеXDTO.Вставить("ДоверенностьКемВыдана", ДанныеДокументаОтгрузки.ДоверенностьВыдана); 
	ДанныеXDTO.Вставить("ДоверенностьКомуВыдана", ДанныеДокументаОтгрузки.ДоверенностьЧерезКого); 
	ДанныеXDTO.Вставить("ДатаПереходаПраваСобственности", ДанныеИБ.Дата); 
	ДанныеXDTO.КлючевыеСвойства.Вставить("Ссылка", ДанныеИБ.ДокументОтгрузки); 
	ДанныеXDTO.КлючевыеСвойства.Вставить("Дата", ДанныеДокументаОтгрузки.Дата); 
	ДанныеXDTO.КлючевыеСвойства.Вставить("Номер", ДанныеДокументаОтгрузки.Номер); 
	
	
	ДанныеДокументаОтгрузки.Вставить("Ссылка", ДанныеИБ.ДокументОтгрузки);
	РеализацияТоваровУслугВыгрузитьТабличныеЧасти(ДанныеДокументаОтгрузки, ДанныеXDTO);
КонецПроцедуры
//  Документ_РеализацияТоваровУслуг_Отправка
Процедура ДобавитьПКО_Документ_РеализацияТоваровУслуг_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_РеализацияТоваровУслуг_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.РеализацияТоваровУслуг;
	ПравилоКонвертации.ОбъектФормата     = "Документ.РеализацияТоваровУслуг";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_РеализацияТоваровУслуг_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "АдресДоставки",             "АдресДоставки");
	ДобавитьПКС(СвойстваШапки, "БанковскийСчетОрганизации", "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчета");
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",           "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "ГлавныйБухгалтер",          "ГлавныйБухгалтер", , "Справочник_ФизическиеЛица_Отправка");
	ДобавитьПКС(СвойстваШапки, "Грузоотправитель",          "Грузоотправитель", , "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваШапки, "Грузополучатель",           "Грузополучатель", , "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваШапки, "Дата",                      "Дата");
	ДобавитьПКС(СвойстваШапки, "ДоверенностьВыдана",        "ДоверенностьКемВыдана");
	ДобавитьПКС(СвойстваШапки, "ДоверенностьДата",          "ДоверенностьДата");
	ДобавитьПКС(СвойстваШапки, "ДоверенностьНомер",         "ДоверенностьНомер");
	ДобавитьПКС(СвойстваШапки, "ДоверенностьЧерезКого",     "ДоверенностьКомуВыдана");
	ДобавитьПКС(СвойстваШапки, "ДоговорКонтрагента",        "Договор", , "Справочник_Договоры_Отправка");
	ДобавитьПКС(СвойстваШапки, "Комментарий",               "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",                "Контрагент", , "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваШапки, "КратностьВзаиморасчетов",   "КратностьВзаиморасчетов");
	ДобавитьПКС(СвойстваШапки, "КурсВзаиморасчетов",        "КурсВзаиморасчетов");
	ДобавитьПКС(СвойстваШапки, "Номер",                     "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",               "Организация", , "Справочник_Организации");
	ДобавитьПКС(СвойстваШапки, "Ответственный",             "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ОтпускПроизвел",            "ОтпускПроизвел", , "Справочник_ФизическиеЛица_Отправка");
	ДобавитьПКС(СвойстваШапки, "Подразделение",             "Подразделение", , "Справочник_Подразделения");
	ДобавитьПКС(СвойстваШапки, "Склад",                     "Склад", , "Справочник_Склады");
	ДобавитьПКС(СвойстваШапки, "СуммаВключаетНДС",          "СуммаВключаетНДС");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",            "Сумма");
	ДобавитьПКС(СвойстваШапки, "",                          "ВалютаВзаиморасчетов", 1, "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "",                          "ВидОперации", 1);
	ДобавитьПКС(СвойстваШапки, "",                          "ДатаПереходаПраваСобственности", 1);
	ДобавитьПКС(СвойстваШапки, "",                          "ЗаГлавногоБухгалтераПоПриказу", 1, "Справочник_ФизическиеЛица_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                          "ЗаРуководителяПоПриказу", 1, "Справочник_ФизическиеЛица_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                          "РасчетыВУсловныхЕдиницах", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоУпаковок", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Характеристика", 1,"Справочник_ХарактеристикиНоменклатуры_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Услуги");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Содержание", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);

КонецПроцедуры

Процедура ПКО_Документ_РеализацияТоваровУслуг_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	// За руководителя и за главного бухгалтера
	Если ЗначениеЗаполнено(ДанныеИБ.ЗаРуководителяПоПриказу) Тогда
		ФизЛицоСсылка = Справочники.ФизическиеЛица.НайтиПоНаименованию(ДанныеИБ.ЗаРуководителяПоПриказу);
		Если ЗНачениеЗаполнено(ФизЛицоСсылка) Тогда
			ДанныеXDTO.Вставить("ЗаРуководителяПоПриказу", ФизЛицоСсылка);
		КонецЕсли;
	КонецЕсли;
	Если ЗначениеЗаполнено(ДанныеИБ.ЗаГлавногоБухгалтераПоПриказу) Тогда
		ФизЛицоСсылка = Справочники.ФизическиеЛица.НайтиПоНаименованию(ДанныеИБ.ЗаГлавногоБухгалтераПоПриказу);
		Если ЗНачениеЗаполнено(ФизЛицоСсылка) Тогда
			ДанныеXDTO.Вставить("ЗаГлавногоБухгалтераПоПриказу", ФизЛицоСсылка);
		КонецЕсли;
	КонецЕсли;
	
	ДанныеДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеИБ.ДоговорКонтрагента, "ВидДоговора, РасчетыВУсловныхЕдиницах, ВалютаВзаиморасчетов");
	Если ДанныеДоговора.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом 
		Или ДанныеДоговора.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
		ВидОперации = "ПередачаНаКомиссию";
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ОтгрузкаБезПереходаПраваСобственности Тогда
		// Поиск - состоялась ли отгрузка.
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		|Ссылка,
		|Дата
		|ИЗ Документ.РеализацияОтгруженныхТоваров
		|ГДЕ Проведен И ДокументОтгрузки = &Ссылка";
		Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
		РезультатЗапроса = Запрос.Выполнить();
		Если РезультатЗапроса.Пустой() Тогда
			ВидОперации = "ОтгрузкаБезПереходаПравСобственности_ВПути";
		Иначе
			ВидОперации = "ОтгрузкаБезПереходаПравСобственности_Реализовано";
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			ДанныеXDTO.Вставить("ДатаПереходаПраваСобственности", Выборка.Дата); 
		КонецЕсли;
	Иначе
		ВидОперации = "РеализацияКлиенту";
	КонецЕсли;
	ДанныеXDTO.Вставить("ВидОперации", ВидОперации); 
	ДанныеXDTO.Вставить("ВалютаВзаиморасчетов", ДанныеДоговора.ВалютаВзаиморасчетов); 
	ДанныеXDTO.Вставить("РасчетыВУсловныхЕдиницах", ДанныеДоговора.РасчетыВУсловныхЕдиницах); 
	
	РеализацияТоваровУслугВыгрузитьТабличныеЧасти(ДанныеИБ, ДанныеXDTO);
КонецПроцедуры
//  Документ_РКОВыдачаВКассуККМ_Отправка
Процедура ДобавитьПКО_Документ_РКОВыдачаВКассуККМ_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_РКОВыдачаВКассуККМ_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.РасходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата     = "Документ.РКОВыдачаВКассуККМ";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента", "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Выдать",          "Выдать");
	ДобавитьПКС(СвойстваШапки, "Дата",            "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",     "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",           "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",     "Организация", , "Справочник_Организации");
	ДобавитьПКС(СвойстваШапки, "Основание",       "Основание");
	ДобавитьПКС(СвойстваШапки, "Ответственный",   "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ПоДокументу",     "ПоДокументу");
	ДобавитьПКС(СвойстваШапки, "Приложение",      "Приложение");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",  "Сумма");

КонецПроцедуры
//  Документ_РКОВыплатаЗарплаты_Отправка
Процедура ДобавитьПКО_Документ_РКОВыплатаЗарплаты_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_РКОВыплатаЗарплаты_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.РасходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата     = "Документ.РКОВыплатаЗарплаты";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_РКОВыплатаЗарплаты_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента", "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Выдать",          "Выдать");
	ДобавитьПКС(СвойстваШапки, "Дата",            "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",     "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",           "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",     "Организация", , "Справочник_Организации");
	ДобавитьПКС(СвойстваШапки, "Основание",       "Основание");
	ДобавитьПКС(СвойстваШапки, "Ответственный",   "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ПоДокументу",     "ПоДокументу");
	ДобавитьПКС(СвойстваШапки, "Приложение",      "Приложение");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",  "Сумма");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "", "ДатаВедомостиНаВыплатуЗарплаты", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НомерВедомостиНаВыплатуЗарплаты", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сотрудник", 1,"Справочник_ФизическиеЛица_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "СтатьяДДС", 1,"Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);

КонецПроцедуры

Процедура ПКО_Документ_РКОВыплатаЗарплаты_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	
	Если ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям Тогда
		Запрос.Текст = "ВЫБРАТЬ
		|РП.СтатьяДвиженияДенежныхСредств КАК СтатьяДДС,
		|РП.СуммаПлатежа КАК Сумма,
		|РП.Ведомость.Дата КАК ДатаВедомостиНаВыплатуЗарплаты,
		|РП.Ведомость.Номер КАК НомерВедомостиНаВыплатуЗарплаты 
		|ИЗ Документ.РасходныйКассовыйОрдер.ВыплатаЗаработнойПлаты КАК РП
		|ГДЕ РП.Ссылка = &Ссылка";
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику Тогда
		Запрос.Текст = "ВЫБРАТЬ
		|РП.СтатьяДвиженияДенежныхСредств КАК СтатьяДДС,
		|РП.СуммаДокумента КАК Сумма,
		|РП.Контрагент КАК Сотрудник
		|ИЗ Документ.РасходныйКассовыйОрдер КАК РП
		|ГДЕ РП.Ссылка = &Ссылка";
	
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаДепонентов Тогда
		Запрос.Текст = "ВЫБРАТЬ
		|РП.СтатьяДвиженияДенежныхСредств КАК СтатьяДДС,
		|РП.СуммаКВыплате КАК Сумма,
		|РП.ФизЛицо КАК Сотрудник,
		|РП.Ведомость.Дата КАК ДатаВедомостиНаВыплатуЗарплаты,
		|РП.Ведомость.Номер КАК НомерВедомостиНаВыплатуЗарплаты 
		|ИЗ Документ.РасходныйКассовыйОрдер.ВыплатаДепонентов КАК РП
		|ГДЕ РП.Ссылка = &Ссылка";
	
	КонецЕсли;
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", Запрос.Выполнить().Выгрузить());
КонецПроцедуры
//  Документ_РКОНаБанковскийСчет_Отправка
Процедура ДобавитьПКО_Документ_РКОНаБанковскийСчет_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_РКОНаБанковскийСчет_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.РасходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата     = "Документ.РКОНаБанковскийСчет";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_РКОНаБанковскийСчет_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента", "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Выдать",          "Выдать");
	ДобавитьПКС(СвойстваШапки, "Дата",            "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",     "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",           "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",     "Организация", , "Справочник_Организации");
	ДобавитьПКС(СвойстваШапки, "Основание",       "Основание");
	ДобавитьПКС(СвойстваШапки, "Ответственный",   "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ПоДокументу",     "ПоДокументу");
	ДобавитьПКС(СвойстваШапки, "Приложение",      "Приложение");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",  "Сумма");
	ДобавитьПКС(СвойстваШапки, "СчетОрганизации", "БанковскийСчет", , "Справочник_БанковскиеСчета");
	ДобавитьПКС(СвойстваШапки, "",                "ВидОперации", 1);

КонецПроцедуры

Процедура ПКО_Документ_РКОНаБанковскийСчет_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.Вставить("ВидОперации", "ВзносНаличными");
КонецПроцедуры
//  Документ_РКОПрочаяВыдача_Отправка
Процедура ДобавитьПКО_Документ_РКОПрочаяВыдача_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_РКОПрочаяВыдача_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.РасходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата     = "Документ.РКОПрочаяВыдача";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента", "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Выдать",          "Выдать");
	ДобавитьПКС(СвойстваШапки, "Дата",            "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",     "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",           "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",     "Организация", , "Справочник_Организации");
	ДобавитьПКС(СвойстваШапки, "Основание",       "Основание");
	ДобавитьПКС(СвойстваШапки, "Ответственный",   "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ПоДокументу",     "ПоДокументу");
	ДобавитьПКС(СвойстваШапки, "Приложение",      "Приложение");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",  "Сумма");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "РасшифровкаПлатежа", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "СтатьяДвиженияДенежныхСредств", "СтатьяДДС", ,"Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "СуммаПлатежа",                  "Сумма");

КонецПроцедуры
//  Документ_РКОРасчетыСКонтрагентами_Отправка
Процедура ДобавитьПКО_Документ_РКОРасчетыСКонтрагентами_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_РКОРасчетыСКонтрагентами_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.РасходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата     = "Документ.РКОРасчетыСКонтрагентами";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_РКОРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента", "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Выдать",          "Выдать");
	ДобавитьПКС(СвойстваШапки, "Дата",            "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",     "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",      "Контрагент", , "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваШапки, "Номер",           "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",     "Организация", , "Справочник_Организации");
	ДобавитьПКС(СвойстваШапки, "Основание",       "Основание");
	ДобавитьПКС(СвойстваШапки, "Ответственный",   "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ПоДокументу",     "ПоДокументу");
	ДобавитьПКС(СвойстваШапки, "Приложение",      "Приложение");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",  "Сумма");
	ДобавитьПКС(СвойстваШапки, "",                "ВидРасчетов", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "", "ВалютаВзаиморасчетов", 1,"Справочник_Валюты");
	ДобавитьПКС(СвойстваТЧ, "", "Договор", 1,"Справочник_Договоры_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "КратностьВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КурсВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "РасчетыВУсловныхЕдиницах", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "", "СтатьяДДС", 1,"Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);

КонецПроцедуры

Процедура ПКО_Документ_РКОРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ВидРасчетов = "";
	ВидОперации = ДанныеИБ.ВидОперации;
	
	Если ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратДенежныхСредствПокупателю Тогда
		ВидРасчетов = "СПокупателем";
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРКО.ОплатаПоставщику Тогда
		ВидРасчетов = "СПоставщиком";
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРКО.РасчетыПоКредитамИЗаймамСКонтрагентами Тогда
		ВидРасчетов = "КредитыИЗаймы";
	Иначе
		ВидРасчетов = "Прочее";
	КонецЕсли;
	ДанныеXDTO.Вставить("ВидРасчетов", ВидРасчетов);
	ПодготовитьДанныеРасчетыСКонтрагентами(ДанныеИБ, ДанныеXDTO, "РасходныйКассовыйОрдер");
КонецПроцедуры
//  Документ_РКОРасчетыССотрудниками_Отправка
Процедура ДобавитьПКО_Документ_РКОРасчетыССотрудниками_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_РКОРасчетыССотрудниками_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.РасходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата     = "Документ.РКОРасчетыССотрудниками";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_РКОРасчетыССотрудниками_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента", "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Выдать",          "Выдать");
	ДобавитьПКС(СвойстваШапки, "Дата",            "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",     "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",      "Сотрудник", , "Справочник_ФизическиеЛица_Отправка");
	ДобавитьПКС(СвойстваШапки, "Номер",           "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",     "Организация", , "Справочник_Организации");
	ДобавитьПКС(СвойстваШапки, "Основание",       "Основание");
	ДобавитьПКС(СвойстваШапки, "Ответственный",   "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ПоДокументу",     "ПоДокументу");
	ДобавитьПКС(СвойстваШапки, "Приложение",      "Приложение");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",  "Сумма");
	ДобавитьПКС(СвойстваШапки, "",                "ВидРасчетов", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "РасшифровкаПлатежа", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "СтатьяДвиженияДенежныхСредств", "СтатьяДДС", ,"Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "СуммаПлатежа",                  "Сумма");

КонецПроцедуры

Процедура ПКО_Документ_РКОРасчетыССотрудниками_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	ВидРасчетов = "";
	Если ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствПодотчетнику Тогда
		ВидРасчетов = "Подотчет";
	
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРКО.РасчетыПоКредитамИЗаймамСРаботниками Тогда
		ВидРасчетов = "Займы";
	КонецЕсли;
	ДанныеXDTO.Вставить("ВидРасчетов", ВидРасчетов);
КонецПроцедуры
//  Документ_СписаниеТоваров_Отправка
Процедура ДобавитьПКО_Документ_СписаниеТоваров_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_СписаниеТоваров_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.СписаниеТоваров;
	ПравилоКонвертации.ОбъектФормата     = "Документ.СписаниеНедостач";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_СписаниеТоваров_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",           "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",    "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",          "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",    "Организация", , "Справочник_Организации");
	ДобавитьПКС(СвойстваШапки, "Основание",      "Основание");
	ДобавитьПКС(СвойстваШапки, "Ответственный",  "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Подразделение",  "Подразделение", , "Справочник_Подразделения");
	ДобавитьПКС(СвойстваШапки, "Склад",          "Склад", , "Справочник_Склады");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента", "Сумма");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоУпаковок", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Характеристика", 1,"Справочник_ХарактеристикиНоменклатуры_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);

КонецПроцедуры

Процедура ПКО_Документ_СписаниеТоваров_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ЗапросТовары = Новый Запрос;
	ЗапросТовары.Текст = "ВЫБРАТЬ
	|	ТабТовары.Номенклатура КАК Номенклатура,
	|	ТабТовары.ХарактеристикаНоменклатуры КАК Характеристика,
	|	ТабТовары.Количество * ТабТовары.Коэффициент КАК Количество,
	|	ТабТовары.Коэффициент КАК Коэффициент,
	|	ТабТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ТабТовары.Количество КАК КоличествоУпаковок,
	|	ТабТовары.Цена КАК Цена,
	|	ТабТовары.Сумма КАК Сумма,
	|	ВЫРАЗИТЬ("""" КАК Строка(30)) КАК ТипЗапасов
	|ИЗ Документ.СписаниеТоваров.Товары КАК ТабТовары
	|ГДЕ ТабТовары.Ссылка = &Ссылка
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ
	|	ТабТара.Номенклатура КАК Номенклатура,
	|	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка),
	|	ТабТара.Количество КАК Количество,
	|	1 КАК Коэффициент,
	|	ТабТара.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаИзмерения,
	|	ТабТара.Количество КАК КоличествоУпаковок,
	|	0 КАК Цена,
	|	0 КАК Сумма,
	|	""ВозвратнаяТара"" КАК ТипЗапасов
	|ИЗ Документ.СписаниеТоваров.ВозвратнаяТара КАК ТабТара
	|ГДЕ ТабТара.Ссылка = &Ссылка
	|";
	ЗапросТовары.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	ТабТовары = ЗапросТовары.Выполнить().Выгрузить();
	ОпределитьТипыЗапасовПриОтправке(ДанныеИБ, ТабТовары);
	ДанныеXDTO.Вставить("Товары", ТабТовары);
КонецПроцедуры
//  Документ_СчетФактураВыданный_Отправка
Процедура ДобавитьПКО_Документ_СчетФактураВыданный_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_СчетФактураВыданный_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.СчетФактураВыданный;
	ПравилоКонвертации.ОбъектФормата     = "Документ.СчетФактураВыданный";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_СчетФактураВыданный_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",                              "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "ВидСчетаФактуры",                              "ВидСчетаФактуры", , "Перечисление_ВидСчетаФактурыВыставленного");
	ДобавитьПКС(СвойстваШапки, "ГлавныйБухгалтер",                             "ГлавныйБухгалтер", , "Справочник_ФизическиеЛица_Отправка");
	ДобавитьПКС(СвойстваШапки, "Дата",                                         "Дата");
	ДобавитьПКС(СвойстваШапки, "Дата",                                         "ДатаВыставления");
	ДобавитьПКС(СвойстваШапки, "ДатаИсправляемогоКорректировочногоДокумента",  "ДатаИсправляемогоКорректировочногоДокумента");
	ДобавитьПКС(СвойстваШапки, "ДатаИсходногоДокумента",                       "ДатаИсходногоДокумента");
	ДобавитьПКС(СвойстваШапки, "ДатаПлатежноРасчетногоДокумента",              "ДатаПлатежноРасчетногоДокумента");
	ДобавитьПКС(СвойстваШапки, "ДоговорКонтрагента",                           "Договор", , "Справочник_Договоры_Отправка");
	ДобавитьПКС(СвойстваШапки, "Исправление",                                  "Исправление");
	ДобавитьПКС(СвойстваШапки, "ИсправляемыйСчетФактура",                      "ИсправляемыйСчетФактура", , "Документ_СчетФактураВыданный_Отправка");
	ДобавитьПКС(СвойстваШапки, "КодВидаОперации",                              "КодВидаОперации");
	ДобавитьПКС(СвойстваШапки, "Комментарий",                                  "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",                                   "Контрагент", , "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваШапки, "Номер",                                        "Номер");
	ДобавитьПКС(СвойстваШапки, "НомерИсправления",                             "НомерИсправления");
	ДобавитьПКС(СвойстваШапки, "НомерИсправляемогоКорректировочногоДокумента", "НомерИсправляемогоКорректировочногоДокумента");
	ДобавитьПКС(СвойстваШапки, "НомерИсходногоДокумента",                      "НомерИсходногоДокумента");
	ДобавитьПКС(СвойстваШапки, "НомерПлатежноРасчетногоДокумента",             "НомерПлатежноРасчетногоДокумента");
	ДобавитьПКС(СвойстваШапки, "Организация",                                  "Организация", , "Справочник_Организации");
	ДобавитьПКС(СвойстваШапки, "Ответственный",                                "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Руководитель",                                 "Руководитель", , "Справочник_ФизическиеЛица_Отправка");
	ДобавитьПКС(СвойстваШапки, "СводныйКомиссионный",                          "СводныйКомиссионный");
	ДобавитьПКС(СвойстваШапки, "СтавкаНДС",                                    "СтавкаНДС", , "Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваШапки, "Сумма",                                        "Сумма");
	ДобавитьПКС(СвойстваШапки, "СуммаНДС",                                     "СуммаНДС");
	ДобавитьПКС(СвойстваШапки, "",                                             "Выставлен", 1);
	ДобавитьПКС(СвойстваШапки, "",                                             "СпособВыставления", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Авансы",                    "Авансы");
	ДобавитьПКС(СвойстваТЧ, "Содержание", "Содержание");
	ДобавитьПКС(СвойстваТЧ, "СтавкаНДС",  "СтавкаНДС", ,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "Сумма",      "Сумма");
	ДобавитьПКС(СвойстваТЧ, "СуммаНДС",   "СуммаНДС");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "",                          "ДокументыОснования");
	ДобавитьПКС(СвойстваТЧ, "", "ДатаИсправленияИсходногоДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ДатаИсходногоДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ДокументОснование", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НомерИсправленияИсходногоДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НомерИсходногоДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "УчитыватьИсправлениеИсходногоДокумента", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ДатаНомерДокументовОплаты", "ПлатежноРасчетныеДокументы");
	ДобавитьПКС(СвойстваТЧ, "ДатаПлатежноРасчетногоДокумента",  "ДатаДокумента");
	ДобавитьПКС(СвойстваТЧ, "НомерПлатежноРасчетногоДокумента", "НомерДокумента");

КонецПроцедуры

Процедура ПКО_Документ_СчетФактураВыданный_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	Если ДанныеИБ.КодСпособаВыставления = 1 Тогда
		СпособВыставления = "НаБумажномНосителе";
	Иначе
		СпособВыставления = "ВЭлектронномВиде";
	КонецЕсли;
	ДанныеXDTO.Вставить("СпособВыставления", СпособВыставления);
	Если НЕ ДанныеИБ.СчетФактураНеВыставляется Тогда
		ДанныеXDTO.Вставить("Выставлен", Истина);
	Иначе
		ДанныеXDTO.Вставить("Выставлен", Ложь);
	КонецЕсли;  
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|ТЧ.ДокументОснование КАК ДокументОснованиеСсылка,
	|ТЧ.НомерИсходногоДокумента КАК НомерИсходногоДокумента,
	|ТЧ.ДатаИсходногоДокумента КАК ДатаИсходногоДокумента,
	|ТЧ.УчитыватьИсправлениеИсходногоДокумента КАК УчитыватьИсправлениеИсходногоДокумента,
	|ТЧ.НомерИсправленияИсходногоДокумента КАК НомерИсправленияИсходногоДокумента,
	|ТЧ.ДатаИсправленияИсходногоДокумента КАК ДатаИсправленияИсходногоДокумента
	|ИЗ Документ.СчетФактураВыданный.ДокументыОснования КАК ТЧ
	|ГДЕ ТЧ.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	ТабОснования = Запрос.Выполнить().Выгрузить();
	ТабОснования.Колонки.Добавить("ДокументОснование");
	Для Каждого СтрОснования Из ТабОснования Цикл
		ИмяПКО = ОпределитьИмяПКОПоСсылкеНаДокумент(СтрОснования.ДокументОснованиеСсылка);
		Если НЕ ПустаяСтрока(ИмяПКО) Тогда
			СтрОснования.ДокументОснование = Новый Структура("Значение, ИмяПКО", СтрОснования.ДокументОснованиеСсылка, ИмяПКО);
		КонецЕсли;
	КонецЦикла;
	ДанныеXDTO.Вставить("ДокументыОснования", ТабОснования);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|ТЧ.ДатаПлатежноРасчетногоДокумента КАК ДатаДокумента,
	|ТЧ.НомерПлатежноРасчетногоДокумента КАК НомерДокумента
	|ИЗ Документ.СчетФактураВыданный.ДатаНомерДокументовОплаты КАК ТЧ
	|ГДЕ ТЧ.Ссылка = &Ссылка И ТЧ.ДатаПлатежноРасчетногоДокумента <> ДатаВремя(1,1,1,0,0,0)";
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	
	ДанныеXDTO.Вставить("ПлатежноРасчетныеДокументы", Запрос.Выполнить().Выгрузить());
КонецПроцедуры
//  Документ_СчетФактураПолученный_Отправка
Процедура ДобавитьПКО_Документ_СчетФактураПолученный_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_СчетФактураПолученный_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.СчетФактураПолученный;
	ПравилоКонвертации.ОбъектФормата     = "Документ.СчетФактураПолученный";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_СчетФактураПолученный_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",               "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "ВидСчетаФактуры",               "ВидСчетаФактуры", , "Перечисление_ВидСчетаФактурыПолученного_Отправка");
	ДобавитьПКС(СвойстваШапки, "Дата",                          "ДатаПолучения");
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоДокумента",        "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "ДатаИсправления",               "ДатаИсправления");
	ДобавитьПКС(СвойстваШапки, "ДатаИсходногоДокумента",        "ДатаИсходногоДокумента");
	ДобавитьПКС(СвойстваШапки, "ДоговорКонтрагента",            "Договор", , "Справочник_Договоры_Отправка");
	ДобавитьПКС(СвойстваШапки, "Исправление",                   "Исправление");
	ДобавитьПКС(СвойстваШапки, "ИсправляемыйСчетФактура",       "ИсправляемыйСчетФактура", , "Документ_СчетФактураПолученный_Отправка");
	ДобавитьПКС(СвойстваШапки, "КодВидаОперации",               "КодВидаОперации");
	ДобавитьПКС(СвойстваШапки, "Комментарий",                   "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",                    "Контрагент", , "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваШапки, "НомерВходящегоДокумента",       "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "НомерИсправления",              "НомерИсправления");
	ДобавитьПКС(СвойстваШапки, "НомерИсходногоДокумента",       "НомерИсходногоДокумента");
	ДобавитьПКС(СвойстваШапки, "Организация",                   "Организация", , "Справочник_Организации");
	ДобавитьПКС(СвойстваШапки, "Ответственный",                 "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "СводныйКомиссионный",           "СводныйКомиссионный");
	ДобавитьПКС(СвойстваШапки, "Субкомиссионер",                "ДанныеРеализацииСубкомиссионер", , "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",                "Сумма");
	ДобавитьПКС(СвойстваШапки, "СуммаНДСДокумента",             "СуммаНДС");
	ДобавитьПКС(СвойстваШапки, "СчетФактураВыданныйПокупателю", "ДанныеРеализацииСчетФактураВыставленный");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Авансы", "Авансы");
	ДобавитьПКС(СвойстваТЧ, "СтавкаНДС", "СтавкаНДС", ,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "Сумма",     "Сумма");
	ДобавитьПКС(СвойстваТЧ, "СуммаНДС",  "СуммаНДС");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "",       "ДокументыОснования");
	ДобавитьПКС(СвойстваТЧ, "", "ДокументОснование", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ИсходныйДокумент", 1,"Документ_СчетФактураПолученный_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "УчитыватьИсправлениеИсходногоДокумента", 1);

КонецПроцедуры

Процедура ПКО_Документ_СчетФактураПолученный_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|ТЧ.ДокументОснование КАК ДокументОснованиеСсылка,
	|ТЧ.УчитыватьИсправлениеИсходногоДокумента КАК УчитыватьИсправлениеИсходногоДокумента,
	|СФИсходный.Ссылка КАК ИсходныйДокумент
	|ИЗ Документ.СчетФактураПолученный.ДокументыОснования КАК ТЧ
	|ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураПолученный КАК СФИсходный
	|	ПО СФИсходный.Номер = ТЧ.НомерИсходногоДокумента
	|		И СФИсходный.Дата = ТЧ.ДатаИсходногоДокумента
	|		И СФИсходный.Проведен
	|ГДЕ ТЧ.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	ТабОснования = Запрос.Выполнить().Выгрузить();
	ТабОснования.Колонки.Добавить("ДокументОснование");
	Для Каждого СтрТаб Из ТабОснования Цикл
		ИмяПКО = ОпределитьИмяПКОПоСсылкеНаДокумент(СтрТаб.ДокументОснованиеСсылка);
		Если НЕ ПустаяСтрока(ИмяПКО) Тогда
			СтрТаб.ДокументОснование = Новый Структура("Значение, ИмяПКО", СтрТаб.ДокументОснованиеСсылка, ИмяПКО);
		КонецЕсли;
	КонецЦикла;
	ДанныеXDTO.Вставить("ДокументыОснования", ТабОснования);
КонецПроцедуры
//  Документ_ТребованиеНакладная_Отправка
Процедура ДобавитьПКО_Документ_ТребованиеНакладная_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ТребованиеНакладная_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ТребованиеНакладная;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПередачаМатериаловВПроизводство";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ТребованиеНакладная_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",          "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",   "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",         "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",   "Организация", , "Справочник_Организации");
	ДобавитьПКС(СвойстваШапки, "Ответственный", "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Подразделение", "Подразделение", , "Справочник_Подразделения");
	ДобавитьПКС(СвойстваШапки, "Склад",         "Склад", , "Справочник_Склады");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоУпаковок", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "СтатьяЗатрат", 1,"Справочник_СтатьиЗатрат_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Характеристика", 1,"Справочник_ХарактеристикиНоменклатуры_Отправка");

КонецПроцедуры

Процедура ПКО_Документ_ТребованиеНакладная_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ЗапросТовары = Новый Запрос;
	ЗапросТовары.Текст = "ВЫБРАТЬ
	|	ТабТовары.Номенклатура КАК Номенклатура,
	|	ТабТовары.ХарактеристикаНоменклатуры КАК Характеристика,
	|	ТабТовары.СтатьяЗатрат КАК СтатьяЗатрат,
	|	ТабТовары.Количество * ТабТовары.Коэффициент КАК Количество,
	|	ТабТовары.Коэффициент КАК Коэффициент,
	|	ТабТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ТабТовары.Количество КАК КоличествоУпаковок
	|ИЗ Документ.ТребованиеНакладная.Материалы КАК ТабТовары
	|ГДЕ ТабТовары.Ссылка = &Ссылка";
	ЗапросТовары.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	ТабТовары = ЗапросТовары.Выполнить().Выгрузить();
	ОпределитьТипыЗапасовПриОтправке(ДанныеИБ, ТабТовары);
	ДанныеXDTO.Вставить("Товары", ТабТовары);
	
	Если НЕ ЗначениеЗаполнено(ДанныеИБ.Склад) Тогда
		// Если склад в шапке не заполнен берем из табличной части если он там один.
		ЗапросТовары = Новый Запрос;
		ЗапросТовары.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТабТовары.Склад
		|ИЗ Документ.ТребованиеНакладная.Материалы КАК ТабТовары
		|ГДЕ ТабТовары.Ссылка = &Ссылка";
		ЗапросТовары.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
		Выборка = ЗапросТовары.Выполнить().Выбрать();
		Если Выборка.Количество() = 1 Тогда
			Выборка.Следующий();
			ДанныеXDTO.Вставить("Склад", Выборка.Склад);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
//  Документ_УстановкаЦенНоменклатуры_Отправка
Процедура ДобавитьПКО_Документ_УстановкаЦенНоменклатуры_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_УстановкаЦенНоменклатуры_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.УстановкаЦенНоменклатуры;
	ПравилоКонвертации.ОбъектФормата     = "Документ.УстановкаЦенНоменклатуры";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_УстановкаЦенНоменклатуры_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",          "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",   "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",         "Номер");
	ДобавитьПКС(СвойстваШапки, "Ответственный", "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "",              "ТипЦен", 1, "Справочник_ТипыЦенНоменклатуры");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Характеристика", 1,"Справочник_ХарактеристикиНоменклатуры_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);

КонецПроцедуры

Процедура ПКО_Документ_УстановкаЦенНоменклатуры_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.Вставить("ТипЦен", ДанныеИБ.ТипыЦен[0].ТипЦен);
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Номенклатура КАК Номенклатура,
	|	ХарактеристикаНоменклатуры КАК Характеристика,
	|	Цена КАК Цена
	|ИЗ Документ.УстановкаЦенНоменклатуры.Товары КАК ТабТовары
	|ГДЕ ТабТовары.Ссылка = &Ссылка И ТабТовары.Цена > 0";
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	ДанныеXDTO.Вставить("Товары", Запрос.Выполнить().Выгрузить());
КонецПроцедуры
//  Справочник_Договоры_Отправка
Процедура ДобавитьПКО_Справочник_Договоры_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_Договоры_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.ДоговорыКонтрагентов;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.Договоры";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_Договоры_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаВзаиморасчетов",     "ВалютаВзаиморасчетов", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "ВидДоговора",              "ВидДоговора", , "Перечисление_ВидыДоговоров");
	ДобавитьПКС(СвойстваШапки, "Владелец",                 "Контрагент", , "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваШапки, "Дата",                     "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",              "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Наименование",             "Наименование");
	ДобавитьПКС(СвойстваШапки, "Номер",                    "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",              "Организация", , "Справочник_Организации");
	ДобавитьПКС(СвойстваШапки, "РасчетыВУсловныхЕдиницах", "РасчетыВУсловныхЕдиницах");
	ДобавитьПКС(СвойстваШапки, "СрокДействия",             "СрокДействия");
	ДобавитьПКС(СвойстваШапки, "УчетАгентскогоНДС",        "УчетАгентскогоНДС");
	ДобавитьПКС(СвойстваШапки, "",                         "ТипЦен", 1, "Справочник_ТипыЦенНоменклатуры");

КонецПроцедуры

Процедура ПКО_Справочник_Договоры_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеИБ.ТипЦен) И ТипЗнч(ДанныеИБ.ТипЦен) = Тип("СправочникСсылка.ТипыЦенНоменклатуры") Тогда
		ДанныеXDTO.Вставить("ТипЦен", ДанныеИБ.ТипЦен);
	КонецЕсли;
КонецПроцедуры
//  Справочник_ЕдиницыИзмерения
Процедура ДобавитьПКО_Справочник_ЕдиницыИзмерения(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_ЕдиницыИзмерения";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.ЕдиницыИзмерения;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.ЕдиницыИзмерения";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_ЕдиницыИзмерения_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "", "Код", 1);
	ДобавитьПКС(СвойстваШапки, "", "Наименование", 1);
	ДобавитьПКС(СвойстваШапки, "", "НаименованиеПолное", 1);

КонецПроцедуры

Процедура ПКО_Справочник_ЕдиницыИзмерения_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если ЗначениеЗаполнено(ДанныеИБ.ЕдиницаПоКлассификатору) Тогда
		ДанныеКЕИ = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеИБ.ЕдиницаПоКлассификатору, "Код, Наименование, НаименованиеПолное");
	Иначе
		ДанныеКЕИ = Новый Структура("Код, Наименование, НаименованиеПолное", ДанныеИБ.КОд, ДанныеИБ.Наименование, ДанныеИБ.Наименование);
	КонецЕсли;
	// в зависимости от версии наименование может быть в составе как ключевых так и обычных свойств.
	Если СтекВыгрузки.Количество() > 1 Тогда
		ДанныеXDTO.Вставить("Код", ДанныеКЕИ.Код);
		ДанныеXDTO.Вставить("Наименование", ДанныеКЕИ.Наименование);
	Иначе
		ДанныеXDTO.КлючевыеСвойства.Вставить("Код", ДанныеКЕИ.Код);
		ДанныеXDTO.КлючевыеСвойства.Вставить("Наименование", ДанныеКЕИ.Наименование);
		ДанныеXDTO.Вставить("НаименованиеПолное", ДанныеКЕИ.НаименованиеПолное);
		ДанныеXDTO.Вставить("Наименование", ДанныеКЕИ.Наименование);
	КонецЕсли;
КонецПроцедуры
//  Справочник_Номенклатура_Отправка
Процедура ДобавитьПКО_Справочник_Номенклатура_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_Номенклатура_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.Номенклатура;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.Номенклатура";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_Номенклатура_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "АлкогольнаяПродукция",          "АлкогольнаяПродукция");
	ДобавитьПКС(СвойстваШапки, "Артикул",                       "Артикул");
	ДобавитьПКС(СвойстваШапки, "ИмпортнаяАлкогольнаяПродукция", "ИмпортнаяАлкогольнаяПродукция");
	ДобавитьПКС(СвойстваШапки, "Код",                           "КодВПрограмме");
	ДобавитьПКС(СвойстваШапки, "Наименование",                  "Наименование");
	ДобавитьПКС(СвойстваШапки, "НаименованиеПолное",            "НаименованиеПолное");
	ДобавитьПКС(СвойстваШапки, "Родитель",                      "Группа", , "Справочник_НоменклатураГруппа");
	ДобавитьПКС(СвойстваШапки, "СтавкаНДС",                     "СтавкаНДС", , "Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваШапки, "",                              "ВидАлкогольнойПродукции", 1);
	ДобавитьПКС(СвойстваШапки, "",                              "ЕдиницаИзмерения", 1);
	ДобавитьПКС(СвойстваШапки, "",                              "КодОКП", 1);
	ДобавитьПКС(СвойстваШапки, "",                              "КодТНВЭД", 1);
	ДобавитьПКС(СвойстваШапки, "",                              "ОсновнаяСпецификацияНоменклатуры", 1, "Справочник_СпецификацииНоменклатуры_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                              "ТипНоменклатуры", 1);

КонецПроцедуры

Процедура ПКО_Справочник_Номенклатура_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если НЕ ЗначениеЗаполнено(ДанныеИБ.НаименованиеПолное) Тогда
		ДанныеXDTO.КлючевыеСвойства.Вставить("НаименованиеПолное", ДанныеИБ.Наименование);
	КонецЕсли;
	
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	ДанныеXDTO.Вставить("ТипНоменклатуры", ?(ДанныеИБ.Услуга,"Услуга","Товар"));
	Если ЗначениеЗаполнено(ДанныеИБ.ЕдиницаХраненияОстатков) Тогда
		ДанныеXDTO.Вставить("ЕдиницаИзмерения", Новый Структура("Значение, ИмяПКО", ДанныеИБ.ЕдиницаХраненияОстатков, "Справочник_ЕдиницыИзмерения"));
	ИначеЕсли ЗначениеЗаполнено(ДанныеИБ.БазоваяЕдиницаИзмерения) Тогда
		ДанныеXDTO.Вставить("ЕдиницаИзмерения", Новый Структура("Значение, ИмяПКО", ДанныеИБ.БазоваяЕдиницаИзмерения, "Справочник_КЕИ"));
	Иначе
		ЕИПоУмолчанию = Новый Структура("Код, Ссылка","796");
		ЕдиницаШтука = Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду("796");
		Если НЕ ЗначениеЗаполнено(ЕдиницаШтука) Тогда
			ЕдиницаШтука = Справочники.КлассификаторЕдиницИзмерения.НайтиПоНаименованию("шт");
		КонецЕсли;
		Если ЗначениеЗаполнено(ЕдиницаШтука) Тогда
			ДанныеXDTO.Вставить("ЕдиницаИзмерения", Новый Структура("Значение, ИмяПКО", ЕдиницаШтука, "Справочник_КЕИ"));
		Иначе
			ДанныеXDTO.Вставить("ЕдиницаИзмерения", Новый Структура("Значение, ИмяПКО",ЕИПоУмолчанию,""));
		КонецЕсли;
	КонецЕсли;
	Если ЗначениеЗаполнено(ДанныеИБ.ВидАлкогольнойПродукцииЕГАИС) Тогда
		СтруктураВидАП = Новый Структура("Код, Наименование, ВидЛицензии");
		ЗаполнитьЗначенияСвойств(СтруктураВидАП, ДанныеИБ.ВидАлкогольнойПродукцииЕГАИС);
		СтруктураВидАП.Код = ДанныеИБ.ВидАлкогольнойПродукцииЕГАИС.КодВидаПродукции;
		Если ЗначениеЗаполнено(ДанныеИБ.ВидАлкогольнойПродукцииЕГАИС.ВидЛицензии) Тогда
			ВидЛицензии = "";
			Если Метаданные.Перечисления.Найти("ВидыЛицензийАлкогольнойПродукции") <> Неопределено Тогда
				МенеджерВидыЛицензий = Перечисления.ВидыЛицензийАлкогольнойПродукции;
			Иначе
				МенеджерВидыЛицензий = Перечисления.ВидыЛицензийНаПродажуАлкоголя;
			КонецЕсли;
			Если ДанныеИБ.ВидАлкогольнойПродукцииЕГАИС.ВидЛицензии = МенеджерВидыЛицензий.Пиво Тогда
				ВидЛицензии = "Пиво";
			ИначеЕсли ДанныеИБ.ВидАлкогольнойПродукцииЕГАИС.ВидЛицензии = МенеджерВидыЛицензий.АлкогольнаяПродукция Тогда
				ВидЛицензии = "АлкогольнаяПродукция";
			ИначеЕсли ДанныеИБ.ВидАлкогольнойПродукцииЕГАИС.ВидЛицензии = МенеджерВидыЛицензий.СпиртосодержащаяПищеваяПродукция Тогда
				ВидЛицензии = "СпиртосодержащаяПищеваяПродукция";
			ИначеЕсли ДанныеИБ.ВидАлкогольнойПродукцииЕГАИС.ВидЛицензии = МенеджерВидыЛицензий.СпиртосодержащаяНеПищеваяПродукция Тогда
				ВидЛицензии = "СпиртосодержащаяНеПищеваяПродукция";
			КонецЕсли;
			СтруктураВидАП.Вставить("ВидЛицензии", ВидЛицензии);
		КонецЕсли;
		ДанныеXDTO.Вставить("ВидАлкогольнойПродукции", СтруктураВидАП);
	Иначе
		ДанныеXDTO.Вставить("ВидАлкогольнойПродукции", Неопределено);
	КонецЕсли;
	ДанныеXDTO.Вставить("КодТНВЭД");
	ДанныеXDTO.Вставить("КодОКП");
	Если ЗначениеЗаполнено(ДанныеИБ.КодТНВЭД) Тогда
		ДанныеXDTO.Вставить("КодТНВЭД", ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеИБ.КодТНВЭД, "Код, Наименование"));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеИБ.ОКП) Тогда
		ДанныеXDTO.Вставить("КодОКП",   ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеИБ.ОКП, "Код, Наименование"));
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	СпецификацияНоменклатуры
	|ИЗ РегистрСведений.ОсновныеСпецификацииНоменклатуры.СрезПоследних(, Номенклатура = &Номенклатура)
	|ГДЕ СпецификацияНоменклатуры.Активная = Истина";
	Запрос.УстановитьПараметр("Номенклатура", ДанныеИБ.Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ДанныеXDTO.Вставить("ОсновнаяСпецификацияНоменклатуры", Выборка.СпецификацияНоменклатуры);
	КонецЕсли;
КонецПроцедуры
//  Справочник_СпецификацииНоменклатуры_Отправка
Процедура ДобавитьПКО_Справочник_СпецификацииНоменклатуры_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_СпецификацииНоменклатуры_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.СпецификацииНоменклатуры;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.СпецификацииНоменклатуры";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_СпецификацииНоменклатуры_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Код",          "КодВПрограмме");
	ДобавитьПКС(СвойстваШапки, "Комментарий",  "Описание");
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");
	ДобавитьПКС(СвойстваШапки, "Родитель",     "Группа", , "Справочник_СпецификацииНоменклатурыГруппа");
	ДобавитьПКС(СвойстваШапки, "",             "Количество", 1);
	ДобавитьПКС(СвойстваШапки, "",             "КоличествоУпаковок", 1);
	ДобавитьПКС(СвойстваШапки, "",             "Номенклатура", 1, "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваШапки, "",             "Характеристика", 1, "Справочник_ХарактеристикиНоменклатуры_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ДоляСтоимости", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоУпаковок", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Характеристика", 1,"Справочник_ХарактеристикиНоменклатуры_Отправка");

КонецПроцедуры

Процедура ПКО_Справочник_СпецификацииНоменклатуры_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	Номенклатура,
	|	ХарактеристикаНоменклатуры КАК Характеристика,
	|	ВЫРАЗИТЬ(Количество * ЕстьNULL(Номенклатура.ЕдиницаХраненияОстатков.Коэффициент,1) КАК Число(10,3)) КАК КоличествоУпаковок,
	|	ВЫРАЗИТЬ(Количество * ЕстьNULL(Номенклатура.ЕдиницаХраненияОстатков.Коэффициент,1) КАК Число(10,3)) КАК Количество
	|ИЗ Справочник.СпецификацииНоменклатуры.ВыходныеИзделия
	|ГДЕ Ссылка = &Ссылка
	|УПОРЯДОЧИТЬ ПО ДоляСтоимости УБЫВ";
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ДанныеXDTO.Вставить("Номенклатура", Выборка.Номенклатура);
		ДанныеXDTO.Вставить("Характеристика", Выборка.Характеристика);
		ДанныеXDTO.Вставить("Количество", Выборка.Количество);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Номенклатура,
	|	ВЫРАЗИТЬ(ХарактеристикаНоменклатуры КАК Справочник.ХарактеристикиНоменклатуры) КАК Характеристика,
	|	1 КАК ДоляСтоимости,
	|	ВЫРАЗИТЬ(Количество * Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК Число(10,3)) КАК КоличествоУпаковок,
	|	ВЫРАЗИТЬ(Количество * Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК Число(10,3)) КАК Количество
	|ИЗ Справочник.СпецификацииНоменклатуры.ИсходныеКомплектующие
	|ГДЕ Ссылка = &Ссылка И Номенклатура ССЫЛКА Справочник.Номенклатура
	|";
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	ДанныеXDTO.Вставить("Товары", Запрос.Выполнить().Выгрузить());
КонецПроцедуры
//  Справочник_СтатьиЗатрат_Отправка
Процедура ДобавитьПКО_Справочник_СтатьиЗатрат_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_СтатьиЗатрат_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.СтатьиЗатрат;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.СтатьиРасходов";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Код",          "КодВПрограмме");
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");

КонецПроцедуры
//  Справочник_ФизическиеЛица_Отправка
Процедура ДобавитьПКО_Справочник_ФизическиеЛица_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_ФизическиеЛица_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.ФизическиеЛица;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.ФизическиеЛица";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_ФизическиеЛица_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ДатаРождения",      "ДатаРождения");
	ДобавитьПКС(СвойстваШапки, "ИНН",               "ИНН");
	ДобавитьПКС(СвойстваШапки, "Код",               "КодВПрограмме");
	ДобавитьПКС(СвойстваШапки, "МестоРождения",     "МестоРождения");
	ДобавитьПКС(СвойстваШапки, "Пол",               "Пол", , "Перечисление_ПолФизлиц");
	ДобавитьПКС(СвойстваШапки, "Родитель",          "Группа", , "Справочник_ФизическиеЛицаГруппа");
	ДобавитьПКС(СвойстваШапки, "СтраховойНомерПФР", "СтраховойНомерПФР");
	ДобавитьПКС(СвойстваШапки, "",                  "Имя", 1);
	ДобавитьПКС(СвойстваШапки, "",                  "Отчество", 1);
	ДобавитьПКС(СвойстваШапки, "",                  "Фамилия", 1);
	ДобавитьПКС(СвойстваШапки, "",                  "ФИО", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДанныеФИО");
	ДобавитьПКС(СвойстваТЧ, "", "Имя", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НачалоПериода", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Отчество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Фамилия", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "КонтактнаяИнформация");
	ДобавитьПКС(СвойстваТЧ, "", "ВидКонтактнойИнформации", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЗначенияПолей", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НаименованиеКонтактнойИнформации", 1);

КонецПроцедуры

Процедура ПКО_Справочник_ФизическиеЛица_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ФИО = ДанныеИБ.Наименование;
	Фамилия = "";
	Имя = "";
	Отчество = "";
	ВерсияСтарше1_2 = (ОбменДаннымиXDTOСервер.СравнитьВерсии(КомпонентыОбмена.ВерсияФорматаОбмена, "1.2") > 0);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ФизЛицо", ДанныеИБ.Ссылка);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ФИОФизЛицСрезПоследних.Период,
	|	ФИОФизЛицСрезПоследних.ФизЛицо,
	|	ФИОФизЛицСрезПоследних.Фамилия,
	|	ФИОФизЛицСрезПоследних.Имя,
	|	ФИОФизЛицСрезПоследних.Отчество
	|ИЗ
	|	РегистрСведений.ФИОФизЛиц.СрезПоследних(, ФизЛицо = &ФизЛицо) КАК ФИОФизЛицСрезПоследних";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Фамилия = Выборка.Фамилия;
		Имя = Выборка.Имя;
		Отчество = Выборка.Отчество;
		ФИО = СокрЛП(Фамилия + " " + Имя + " " + Отчество);
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ФИО) Тогда
	// ФИО нет в регистре либо запись пустая
		ФИО = СокрЛП(ДанныеИБ.Наименование);
		ЧастиФИО = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ДанныеИБ.Наименование, " ", Истина);
		Если ЧастиФИО.Количество() > 0 Тогда
			Фамилия = ЧастиФИО[0];
			Если ЧастиФИО.Количество() > 1 Тогда
				Имя = ЧастиФИО[1];
				Если ЧастиФИО.Количество() > 2 Тогда
					Отчество = ЧастиФИО[2];
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если СтекВыгрузки.Количество() > 1 Тогда
		ДанныеXDTO.Вставить("ФИО", ФИО);
		Если ВерсияСтарше1_2 Тогда
			ДанныеXDTO.Вставить("Фамилия", Фамилия);
			ДанныеXDTO.Вставить("Имя", Имя);
			ДанныеXDTO.Вставить("Отчество", Отчество);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	ДанныеXDTO.КлючевыеСвойства.Вставить("ФИО", ФИО);
	Если ВерсияСтарше1_2 Тогда
		ДанныеXDTO.КлючевыеСвойства.Вставить("Фамилия", Фамилия);
		ДанныеXDTO.КлючевыеСвойства.Вставить("Имя", Имя);
		ДанныеXDTO.КлючевыеСвойства.Вставить("Отчество", Отчество);
		
		// Выгрузка подробных данных ФИО.
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	Период КАК НачалоПериода,
		|	Фамилия,
		|	Имя,
		|	Отчество
		|ИЗ РегистрСведений.ФИОФизЛиц
		|ГДЕ ФизЛицо = &ФизЛицо";
		Запрос.УстановитьПараметр("ФизЛицо", ДанныеИБ.Ссылка);
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			ДанныеXDTO.Вставить("ДанныеФИО", РезультатЗапроса.Выгрузить());
		КонецЕсли;
	Иначе
		ДанныеXDTO.Вставить("Фамилия", Фамилия);
		ДанныеXDTO.Вставить("Имя", Имя);
		ДанныеXDTO.Вставить("Отчество", Отчество);
	КонецЕсли;
	ПодготовитьДанныеКонтактнаяИнформация(ДанныеИБ, ДанныеXDTO);
КонецПроцедуры
//  Справочник_ХарактеристикиНоменклатуры_Отправка
Процедура ДобавитьПКО_Справочник_ХарактеристикиНоменклатуры_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_ХарактеристикиНоменклатуры_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.ХарактеристикиНоменклатуры;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.ХарактеристикиНоменклатуры";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_ХарактеристикиНоменклатуры_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");
	ДобавитьПКС(СвойстваШапки, "",             "НаименованиеПолное", 1);

КонецПроцедуры

Процедура ПКО_Справочник_ХарактеристикиНоменклатуры_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() = 1 Тогда
		ДанныеXDTO.КлючевыеСвойства.Вставить("НаименованиеПолное", ДанныеИБ.Наименование);
	Иначе
		ДанныеXDTO.Вставить("НаименованиеПолное", ДанныеИБ.Наименование);
	КонецЕсли;
КонецПроцедуры
//  Получение
//  Документ_АвансовыйОтчет_Получение
Процедура ДобавитьПКО_Документ_АвансовыйОтчет_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_АвансовыйОтчет_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.АвансовыйОтчет;
	ПравилоКонвертации.ОбъектФормата                = "Документ.АвансовыйОтчет";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_АвансовыйОтчет_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_АвансовыйОтчет_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_АвансовыйОтчет";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",      "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                 "Дата");
	ДобавитьПКС(СвойстваШапки, "КоличествоДокументов", "КоличествоДокументов");
	ДобавитьПКС(СвойстваШапки, "КоличествоЛистов",     "КоличествоЛистов");
	ДобавитьПКС(СвойстваШапки, "Комментарий",          "Комментарий");
	ДобавитьПКС(СвойстваШапки, "КратностьДокумента",   "КратностьДокумента");
	ДобавитьПКС(СвойстваШапки, "КурсДокумента",        "КурсДокумента");
	ДобавитьПКС(СвойстваШапки, "НазначениеАванса",     "НазначениеАванса");
	ДобавитьПКС(СвойстваШапки, "Номер",                "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",          "Организация", , "Справочник_Организации");
	ДобавитьПКС(СвойстваШапки, "Ответственный",        "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Подразделение",        "Подразделение", , "Справочник_Подразделения");
	ДобавитьПКС(СвойстваШапки, "СкладОрдер",           "Склад", , "Справочник_Склады");
	ДобавитьПКС(СвойстваШапки, "СуммаВключаетНДС",     "СуммаВключаетНДС");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",       "Сумма");
	ДобавитьПКС(СвойстваШапки, "ФизЛицо",              "ПодотчетноеЛицо", , "Справочник_ФизическиеЛица_Получение");
	ДобавитьПКС(СвойстваШапки, "ВидПоступления",       "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ВыданныеАвансы",    "");
	ДобавитьПКС(СвойстваТЧ, "ДокументАванса", "", 1);
	ДобавитьПКС(СвойстваТЧ, "Сумма",          "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ОплатаПоставщикам", "");
	ДобавитьПКС(СвойстваТЧ, "ВидДокВходящий",          "", 1);
	ДобавитьПКС(СвойстваТЧ, "ДатаВходящегоДокумента",  "", 1);
	ДобавитьПКС(СвойстваТЧ, "ДоговорКонтрагента",      "", 1,"Справочник_Договоры_Получение");
	ДобавитьПКС(СвойстваТЧ, "Контрагент",              "", 1,"Справочник_Контрагенты");
	ДобавитьПКС(СвойстваТЧ, "КратностьВзаиморасчетов", "", 1);
	ДобавитьПКС(СвойстваТЧ, "КурсВзаиморасчетов",      "", 1);
	ДобавитьПКС(СвойстваТЧ, "НомерВходящегоДокумента", "", 1);
	ДобавитьПКС(СвойстваТЧ, "Содержание",              "", 1);
	ДобавитьПКС(СвойстваТЧ, "Сумма",                   "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаВзаиморасчетов",     "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Прочее",            "");
	ДобавитьПКС(СвойстваТЧ, "ВидДокВходящий",          "", 1);
	ДобавитьПКС(СвойстваТЧ, "ДатаВходящегоДокумента",  "", 1);
	ДобавитьПКС(СвойстваТЧ, "ДатаСФ",                  "", 1);
	ДобавитьПКС(СвойстваТЧ, "Количество",              "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",            "", 1,"Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "НомерВходящегоДокумента", "", 1);
	ДобавитьПКС(СвойстваТЧ, "НомерСФ",                 "", 1);
	ДобавитьПКС(СвойстваТЧ, "Подразделение",           "", 1,"Справочник_Подразделения");
	ДобавитьПКС(СвойстваТЧ, "Поставщик",               "", 1,"Справочник_Контрагенты");
	ДобавитьПКС(СвойстваТЧ, "ПредъявленСФ",            "", 1);
	ДобавитьПКС(СвойстваТЧ, "Содержание",              "", 1);
	ДобавитьПКС(СвойстваТЧ, "СтавкаНДС",               "", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "СтатьяЗатрат",            "", 1,"Справочник_СтатьиЗатрат_Получение");
	ДобавитьПКС(СвойстваТЧ, "Сумма",                   "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаНДС",                "", 1);
	ДобавитьПКС(СвойстваТЧ, "СчетЗатрат",              "", 1);
	ДобавитьПКС(СвойстваТЧ, "СчетЗатратНУ",            "", 1);
	ДобавитьПКС(СвойстваТЧ, "Цена",                    "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Товары",            "");
	ДобавитьПКС(СвойстваТЧ, "ВидДокВходящий",             "", 1);
	ДобавитьПКС(СвойстваТЧ, "ДатаВходящегоДокумента",     "", 1);
	ДобавитьПКС(СвойстваТЧ, "ДатаСФ",                     "", 1);
	ДобавитьПКС(СвойстваТЧ, "ЕдиницаИзмерения",           "", 1,"Справочник_ЕдиницыИзмеренияИзСтруктуры");
	ДобавитьПКС(СвойстваТЧ, "Количество",                 "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",               "", 1,"Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "НомерВходящегоДокумента",    "", 1);
	ДобавитьПКС(СвойстваТЧ, "НомерСФ",                    "", 1);
	ДобавитьПКС(СвойстваТЧ, "Поставщик",                  "", 1,"Справочник_Контрагенты");
	ДобавитьПКС(СвойстваТЧ, "ПредъявленСФ",               "", 1);
	ДобавитьПКС(СвойстваТЧ, "Склад",                      "", 1,"Справочник_Склады");
	ДобавитьПКС(СвойстваТЧ, "СтавкаНДС",                  "", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "Сумма",                      "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаНДС",                   "", 1);
	ДобавитьПКС(СвойстваТЧ, "ХарактеристикаНоменклатуры", "", 1,"Справочник_ХарактеристикиИзСтруктуры_Получение");
	ДобавитьПКС(СвойстваТЧ, "Цена",                       "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер,Организация");
КонецПроцедуры

Процедура ПКО_Документ_АвансовыйОтчет_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.Проведен = Истина;
	ПолученныеДанные.ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад;
	
	// ТЧ Товары
	ПравилаЗаполнения = Новый Соответствие;
	ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
	ПравилаЗаполнения.Вставить("Количество",   "Количество");
	ПравилаЗаполнения.Вставить("Цена",         "Цена");
	ПравилаЗаполнения.Вставить("Сумма",        "Сумма");
	ПравилаЗаполнения.Вставить("СуммаНДС",     "СуммаНДС");
	ПравилаЗаполнения.Вставить("СтавкаНДС",    "СтавкаНДС");
	ПравилаЗаполнения.Вставить("Поставщик",    "Поставщик");
	ПравилаЗаполнения.Вставить("ПредъявленСФ", "ПредъявленСФ");
	ПравилаЗаполнения.Вставить("ДатаСФ",        "ДатаСФ");
	ПравилаЗаполнения.Вставить("НомерСФ",       "НомерСФ");
	ПравилаЗаполнения.Вставить("ВидДокВходящий","НаименованиеВходящегоДокумента");
	ПравилаЗаполнения.Вставить("ДатаВходящегоДокумента","ДатаВходящегоДокумента");
	ПравилаЗаполнения.Вставить("НомерВходящегоДокумента","НомерВходящегоДокумента");
	МассивСтрокТовары = Новый Массив;
	Если ДанныеXDTO.Свойство("Товары")
		И ЗначениеЗаполнено(ДанныеXDTO.Товары) Тогда
		
		Для Каждого Строка Из ДанныеXDTO.Товары Цикл
			
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			
			// Единица изменения в виде структуры
			Если ЗначениеЗаполнено(Строка.ЕдиницаИзмерения) И ТипЗнч(Строка.ЕдиницаИзмерения) = Тип("Структура") Тогда
				СтруктураДанныхСтроки.Вставить("ЕдиницаИзмерения", ПодготовитьСтруктуруДанныхСПодчинением(Строка.ЕдиницаИзмерения, Строка.Номенклатура));
			КонецЕсли;
			// Характеристика в виде структуры
			Если ЗначениеЗаполнено(Строка.Характеристика) И ТипЗнч(Строка.Характеристика) = Тип("Структура") Тогда
				СтруктураДанныхСтроки.Вставить("ХарактеристкаНоменклатуры", ПодготовитьСтруктуруДанныхСПодчинением(Строка.Характеристика, Строка.Номенклатура));
			КонецЕсли;
			СтруктураДанныхСтроки.Вставить("Склад", ДанныеXDTO.Склад);
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
		
		КонецЦикла;
		
	КонецЕсли;
	ПолученныеДанные.ДополнительныеСвойства.Вставить("Товары", МассивСтрокТовары);
	
	// ТЧ Прочее
	ПравилаЗаполнения = Новый Соответствие;
	ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
	ПравилаЗаполнения.Вставить("Содержание", "Содержание");
	ПравилаЗаполнения.Вставить("Сумма",        "Сумма");
	ПравилаЗаполнения.Вставить("СуммаНДС",     "СуммаНДС");
	ПравилаЗаполнения.Вставить("СтавкаНДС",    "СтавкаНДС");
	ПравилаЗаполнения.Вставить("Поставщик",    "Поставщик");
	ПравилаЗаполнения.Вставить("ПредъявленСФ", "ПредъявленСФ");
	ПравилаЗаполнения.Вставить("ДатаСФ",        "ДатаСФ");
	ПравилаЗаполнения.Вставить("НомерСФ",       "НомерСФ");
	ПравилаЗаполнения.Вставить("СтатьяЗатрат", "СтатьяЗатрат");
	ПравилаЗаполнения.Вставить("ПодразделениеЗатрат","Подразделение");
	
	ПравилаЗаполнения.Вставить("ВидДокВходящий","НаименованиеВходящегоДокумента");
	ПравилаЗаполнения.Вставить("ДатаВходящегоДокумента","ДатаВходящегоДокумента");
	ПравилаЗаполнения.Вставить("НомерВходящегоДокумента","НомерВходящегоДокумента");
	МассивСтрокПрочее = Новый Массив;
	Если ДанныеXDTO.Свойство("ПрочиеРасходы")
		И ЗначениеЗаполнено(ДанныеXDTO.ПрочиеРасходы) Тогда
		
		Для Каждого Строка Из ДанныеXDTO.ПрочиеРасходы Цикл
			
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			СтруктураДанныхСтроки.Вставить("Количество",1);
			СтруктураДанныхСтроки.Вставить("Цена",Строка.Сумма);
			Если ЗначениеЗаполнено(Строка.СчетЗатрат) Тогда
				СчетЗатратБУ = ПланыСчетов.Хозрасчетный.НайтиПоКОду(Строка.СчетЗатрат);
				СтруктураДанныхСтроки.Вставить("СчетЗатрат",СчетЗатратБУ);
				СчетЗатратНУ = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", СчетЗатратБУ));
				СтруктураДанныхСтроки.Вставить("СчетЗатратНУ",СчетЗатратНУ);
			КонецЕсли;
			МассивСтрокПрочее.Добавить(СтруктураДанныхСтроки);
		
		КонецЦикла;
		
	КонецЕсли;
	
	ПолученныеДанные.ДополнительныеСвойства.Вставить("Прочее", МассивСтрокПрочее);
	
	// ТЧ Оплата поставщикам
	ПравилаЗаполнения = Новый Соответствие;
	ПравилаЗаполнения.Вставить("ВидДокВходящий","НаименованиеВходящегоДокумента");
	ПравилаЗаполнения.Вставить("ДатаВходящегоДокумента","ДатаВходящегоДокумента");
	ПравилаЗаполнения.Вставить("НомерВходящегоДокумента","НомерВходящегоДокумента");
	ПравилаЗаполнения.Вставить("Контрагент","Контрагент");
	ПравилаЗаполнения.Вставить("Договор","ДоговорКонтрагента");
	ПравилаЗаполнения.Вставить("КурсВзаиморасчетов","КурсВзаиморасчетов");
	ПравилаЗаполнения.Вставить("КратностьВзаиморасчетов","КратностьВзаиморасчетов");
	ПравилаЗаполнения.Вставить("Содержание","Содержание");
	ПравилаЗаполнения.Вставить("Сумма","Сумма");
	ПравилаЗаполнения.Вставить("СуммаВзаиморасчетов","СуммаВзаиморасчетов");
	МассивСтрокОплата = Новый Массив;
	Если ДанныеXDTO.Свойство("ОплатаКонтрагентам")
		И ЗначениеЗаполнено(ДанныеXDTO.ОплатаКонтрагентам) Тогда
		
		Для Каждого Строка Из ДанныеXDTO.ОплатаКонтрагентам Цикл
			
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			МассивСтрокОплата.Добавить(СтруктураДанныхСтроки);
		
		КонецЦикла;
		
	КонецЕсли;
	
	ПолученныеДанные.ДополнительныеСвойства.Вставить("ОплатаПоставщикам", МассивСтрокОплата);
	
	// ТЧ ВыданныеАвансы
	МассивСтрокАвансы = Новый Массив;
	Если ДанныеXDTO.Свойство("ВыданныеАвансы")
		И ЗначениеЗаполнено(ДанныеXDTO.ВыданныеАвансы) Тогда
		
		Для Каждого Строка Из ДанныеXDTO.ВыданныеАвансы Цикл
			
			СтруктураДанныхСтроки = Новый Структура("Сумма", Строка.Сумма);
			Если ЗначениеЗаполнено(Строка.Документ) Тогда
				ТипЗначенияСвойства = Строка.Документ.ТипЗначения;
				ИмяПКО = "";
				Если Найти(ТипЗначенияСвойства, "АвансовыйОтчет")>0 Тогда
					ИмяПКО = "Документ_АвансовыйОтчет_Получение";
				ИначеЕсли Найти(ТипЗначенияСвойства, "РасходныйКассовыйОрдер")>0 Тогда
					ИмяПКО = "Документ_РКОРасчетыССотрудниками_Получение";
				ИначеЕсли Найти(ТипЗначенияСвойства, "СписаниеБезналичныхДенежныхСредств")>0 Тогда
					ИмяПКО = "Документ_СБДСРасчетыССотрудниками_Получение";
				КонецЕсли;
				Если НЕ ПустаяСтрока(ИмяПКО) Тогда
					СтруктураДанныхСтроки.Вставить("ДокументАванса", Новый Структура("Значение, ИмяПКО", Строка.Документ, ИмяПКО));
				КонецЕсли;
			КонецЕсли;
			МассивСтрокАвансы.Добавить(СтруктураДанныхСтроки);
		
		КонецЦикла;
		
	КонецЕсли;
	
	ПолученныеДанные.ДополнительныеСвойства.Вставить("ВыданныеАвансы", МассивСтрокАвансы);
КонецПроцедуры

Процедура ПКО_Документ_АвансовыйОтчет_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗаполнитьПризнакиОтраженияВУчетах(ПолученныеДанные);
КонецПроцедуры
//  Документ_ВозвратТоваровОтПокупателя_Получение
Процедура ДобавитьПКО_Документ_ВозвратТоваровОтПокупателя_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ВозвратТоваровОтПокупателя_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ВозвратТоваровОтПокупателя;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ВозвратТоваровОтПокупателя";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ВозвратТоваровОтПокупателя_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ВозвратТоваровОтПокупателя_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_Возвраты";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",                             "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                                        "Дата");
	ДобавитьПКС(СвойстваШапки, "ДоговорКонтрагента",                          "Договор", , "Справочник_Договоры_Получение");
	ДобавитьПКС(СвойстваШапки, "Комментарий",                                 "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",                                  "Контрагент", , "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваШапки, "КратностьВзаиморасчетов",                     "КратностьВзаиморасчетов");
	ДобавитьПКС(СвойстваШапки, "КурсВзаиморасчетов",                          "КурсВзаиморасчетов");
	ДобавитьПКС(СвойстваШапки, "Номер",                                       "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",                                 "Организация", , "Справочник_Организации");
	ДобавитьПКС(СвойстваШапки, "Ответственный",                               "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Подразделение",                               "Подразделение", , "Справочник_Подразделения");
	ДобавитьПКС(СвойстваШапки, "ПокупателемВыставляетсяСчетФактураНаВозврат", "ПокупателемВыставляетсяСчетФактураНаВозврат");
	ДобавитьПКС(СвойстваШапки, "СкладОрдер",                                  "Склад", , "Справочник_Склады");
	ДобавитьПКС(СвойстваШапки, "СуммаВключаетНДС",                            "СуммаВключаетНДС");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",                              "Сумма");
	ДобавитьПКС(СвойстваШапки, "ВидОперации",                                 "", 1);
	ДобавитьПКС(СвойстваШапки, "ВидПоступления",                              "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Товары", "");
	ДобавитьПКС(СвойстваТЧ, "ДокументПартии",             "", 1);
	ДобавитьПКС(СвойстваТЧ, "ЕдиницаИзмерения",           "", 1,"Справочник_ЕдиницыИзмеренияИзСтруктуры");
	ДобавитьПКС(СвойстваТЧ, "Количество",                 "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",               "", 1,"Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "Склад",                      "", 1,"Справочник_Склады");
	ДобавитьПКС(СвойстваТЧ, "СтавкаНДС",                  "", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "Сумма",                      "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаНДС",                   "", 1);
	ДобавитьПКС(СвойстваТЧ, "СчетДоходовБУ",              "", 1);
	ДобавитьПКС(СвойстваТЧ, "СчетДоходовНУ",              "", 1);
	ДобавитьПКС(СвойстваТЧ, "СчетРасходовБУ",             "", 1);
	ДобавитьПКС(СвойстваТЧ, "СчетРасходовНУ",             "", 1);
	ДобавитьПКС(СвойстваТЧ, "СчетУчетаБУ",                "", 1);
	ДобавитьПКС(СвойстваТЧ, "СчетУчетаНУ",                "", 1);
	ДобавитьПКС(СвойстваТЧ, "ХарактеристикаНоменклатуры", "", 1,"Справочник_ХарактеристикиИзСтруктуры_Получение");
	ДобавитьПКС(СвойстваТЧ, "Цена",                       "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер,Организация");
КонецПроцедуры

Процедура ПКО_Документ_ВозвратТоваровОтПокупателя_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.Проведен = Истина;
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийВозвратТоваровОтПокупателя.ПродажаКомиссия;
	ПолученныеДанные.ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад;
	
	// ТЧ Товары
	ПравилаЗаполнения = Новый Соответствие;
	ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
	ПравилаЗаполнения.Вставить("Количество",   "Количество");
	ПравилаЗаполнения.Вставить("Цена",         "Цена");
	ПравилаЗаполнения.Вставить("Сумма",        "Сумма");
	ПравилаЗаполнения.Вставить("СуммаНДС",     "СуммаНДС");
	ПравилаЗаполнения.Вставить("СтавкаНДС",    "СтавкаНДС");
	
	МассивСтрокТовары = Новый Массив;
	Если ДанныеXDTO.Свойство("Товары")
		И ЗначениеЗаполнено(ДанныеXDTO.Товары) Тогда
		
		Для Каждого Строка Из ДанныеXDTO.Товары Цикл
			
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			
			// Единица изменения в виде структуры
			Если ЗначениеЗаполнено(Строка.ЕдиницаИзмерения) И ТипЗнч(Строка.ЕдиницаИзмерения) = Тип("Структура") Тогда
				СтруктураДанныхСтроки.Вставить("ЕдиницаИзмерения", ПодготовитьСтруктуруДанныхСПодчинением(Строка.ЕдиницаИзмерения, Строка.Номенклатура));
			КонецЕсли;
			// Характеристика в виде структуры
			Если ЗначениеЗаполнено(Строка.Характеристика) И ТипЗнч(Строка.Характеристика) = Тип("Структура") Тогда
				СтруктураДанныхСтроки.Вставить("ХарактеристкаНоменклатуры", ПодготовитьСтруктуруДанныхСПодчинением(Строка.Характеристика, Строка.Номенклатура));
			КонецЕсли;
			СтруктураДанныхСтроки.Вставить("Склад", ДанныеXDTO.Склад);
			Если ЗначениеЗаполнено(Строка.ДокументПоступления) Тогда
				ИмяПКО = ОпределитьИмяПКОПоДаннымXDTO(Строка.ДокументПоступления);
				Если ЗначениеЗаполнено(ИмяПКО) Тогда
					СтруктураДанныхСтроки.Вставить("ДокументПартии",Новый Структура("Значение, ИмяПКО", Строка.ДокументПоступления, ИмяПКО));
				КонецЕсли;
			КонецЕсли;
	
			Если ЗначениеЗаполнено(Строка.СчетУчета) Тогда
				СчетУчетаБУ = ПланыСчетов.Хозрасчетный.НайтиПоКОду(Строка.СчетУчета);
				СтруктураДанныхСтроки.Вставить("СчетУчетаБУ",СчетУчетаБУ);
				СчетУчетаНУ = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", СчетУчетаБУ));
				СтруктураДанныхСтроки.Вставить("СчетУчетаНУ",СчетУчетаНУ);
			КонецЕсли;
			Если ЗначениеЗаполнено(Строка.СчетДоходов) Тогда
				СчетДоходовБУ = ПланыСчетов.Хозрасчетный.НайтиПоКОду(Строка.СчетДоходов);
				СтруктураДанныхСтроки.Вставить("СчетДоходовБУ",СчетДоходовБУ);
				СчетДоходовНУ = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", СчетДоходовБУ));
				СтруктураДанныхСтроки.Вставить("СчетДоходовНУ",СчетДоходовНУ);
			КонецЕсли;
	
			Если ЗначениеЗаполнено(Строка.СчетРасходов) Тогда
				СчетРасходовБУ = ПланыСчетов.Хозрасчетный.НайтиПоКОду(Строка.СчетРасходов);
				СтруктураДанныхСтроки.Вставить("СчетРасходовБУ",СчетРасходовБУ);
				СчетРасходовНУ = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", СчетРасходовБУ));
				СтруктураДанныхСтроки.Вставить("СчетРасходовНУ",СчетРасходовНУ);
			КонецЕсли;
	
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
		
		КонецЦикла;
		
	КонецЕсли;
	ПолученныеДанные.ДополнительныеСвойства.Вставить("Товары", МассивСтрокТовары);
КонецПроцедуры

Процедура ПКО_Документ_ВозвратТоваровОтПокупателя_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗаполнитьПризнакиОтраженияВУчетах(ПолученныеДанные);
	ЗаполнитьКолонкиТабличнойЧасти(ПолученныеДанные, "Товары", "Коэффициент, Качество");
КонецПроцедуры
//  Документ_ВозвратТоваровПоставщику_Получение
Процедура ДобавитьПКО_Документ_ВозвратТоваровПоставщику_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ВозвратТоваровПоставщику_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ВозвратТоваровПоставщику;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ВозвратТоваровПоставщику";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ВозвратТоваровПоставщику_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ВозвратТоваровПоставщику_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_Возвраты";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "БанковскийСчетОрганизации", "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчета");
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",           "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Грузоотправитель",          "Грузоотправитель", , "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваШапки, "Грузополучатель",           "Грузополучатель", , "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваШапки, "Дата",                      "Дата");
	ДобавитьПКС(СвойстваШапки, "ДоговорКонтрагента",        "Договор", , "Справочник_Договоры_Получение");
	ДобавитьПКС(СвойстваШапки, "Комментарий",               "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",                "Контрагент", , "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваШапки, "КратностьВзаиморасчетов",   "КратностьВзаиморасчетов");
	ДобавитьПКС(СвойстваШапки, "КурсВзаиморасчетов",        "КурсВзаиморасчетов");
	ДобавитьПКС(СвойстваШапки, "Номер",                     "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",               "Организация", , "Справочник_Организации");
	ДобавитьПКС(СвойстваШапки, "Ответственный",             "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Подразделение",             "Подразделение", , "Справочник_Подразделения");
	ДобавитьПКС(СвойстваШапки, "Склад",                     "Склад", , "Справочник_Склады");
	ДобавитьПКС(СвойстваШапки, "СуммаВключаетНДС",          "СуммаВключаетНДС");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",            "Сумма");
	ДобавитьПКС(СвойстваШапки, "ВидОперации",               "", 1);
	ДобавитьПКС(СвойстваШапки, "ВидПередачи",               "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Товары", "");
	ДобавитьПКС(СвойстваТЧ, "ДокументПоступления",        "", 1,"Документ_ПоступлениеТоваровУслуг_Получение");
	ДобавитьПКС(СвойстваТЧ, "ЕдиницаИзмерения",           "", 1,"Справочник_ЕдиницыИзмеренияИзСтруктуры");
	ДобавитьПКС(СвойстваТЧ, "Количество",                 "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",               "", 1,"Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "Склад",                      "", 1,"Справочник_Склады");
	ДобавитьПКС(СвойстваТЧ, "СтавкаНДС",                  "", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "Сумма",                      "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаНДС",                   "", 1);
	ДобавитьПКС(СвойстваТЧ, "ХарактеристикаНоменклатуры", "", 1,"Справочник_ХарактеристикиИзСтруктуры_Получение");
	ДобавитьПКС(СвойстваТЧ, "Цена",                       "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер,Организация");
КонецПроцедуры

Процедура ПКО_Документ_ВозвратТоваровПоставщику_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.Проведен = Истина;
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.ПокупкаКомиссия;
	ПолученныеДанные.ВидПередачи = Перечисления.ВидыПередачиТоваров.СоСклада;
	
	// ТЧ Товары
	ПравилаЗаполнения = Новый Соответствие;
	ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
	ПравилаЗаполнения.Вставить("Количество",   "Количество");
	ПравилаЗаполнения.Вставить("Цена",         "Цена");
	ПравилаЗаполнения.Вставить("Сумма",        "Сумма");
	ПравилаЗаполнения.Вставить("СуммаНДС",     "СуммаНДС");
	ПравилаЗаполнения.Вставить("СтавкаНДС",    "СтавкаНДС");
	ПравилаЗаполнения.Вставить("ДокументПоступления","ДокументПоступления");
	
	
	МассивСтрокТовары = Новый Массив;
	Если ДанныеXDTO.Свойство("Товары")
		И ЗначениеЗаполнено(ДанныеXDTO.Товары) Тогда
		
		Для Каждого Строка Из ДанныеXDTO.Товары Цикл
			
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			
			// Единица изменения в виде структуры
			Если ЗначениеЗаполнено(Строка.ЕдиницаИзмерения) И ТипЗнч(Строка.ЕдиницаИзмерения) = Тип("Структура") Тогда
				СтруктураДанныхСтроки.Вставить("ЕдиницаИзмерения", ПодготовитьСтруктуруДанныхСПодчинением(Строка.ЕдиницаИзмерения, Строка.Номенклатура));
			КонецЕсли;
			// Характеристика в виде структуры
			Если ЗначениеЗаполнено(Строка.Характеристика) И ТипЗнч(Строка.Характеристика) = Тип("Структура") Тогда
				СтруктураДанныхСтроки.Вставить("ХарактеристкаНоменклатуры", ПодготовитьСтруктуруДанныхСПодчинением(Строка.Характеристика, Строка.Номенклатура));
			КонецЕсли;
			Если НЕ (СтруктураДанныхСтроки.Свойство("ДокументПоступления") И ЗначениеЗаполнено(СтруктураДанныхСтроки.ДокументПоступления))
				И ДанныеXDTO.Свойство("ДокументПоступления") И ЗначениеЗаполнено(ДанныеXDTO.ДокументПоступления) Тогда
				СтруктураДанныхСтроки.Вставить("ДокументПоступления", ДанныеXDTO.ДокументПоступления);
			КонецЕсли;
			СтруктураДанныхСтроки.Вставить("Склад", ДанныеXDTO.Склад);
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
		
		КонецЦикла;
		
	КонецЕсли;
	ПолученныеДанные.ДополнительныеСвойства.Вставить("Товары", МассивСтрокТовары);
КонецПроцедуры

Процедура ПКО_Документ_ВозвратТоваровПоставщику_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗаполнитьПризнакиОтраженияВУчетах(ПолученныеДанные);
	ЗаполнитьКолонкиТабличнойЧасти(ПолученныеДанные, "Товары", "Коэффициент, Качество");
КонецПроцедуры
//  Документ_ВыпускПродукции_Получение
Процедура ДобавитьПКО_Документ_ВыпускПродукции_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ВыпускПродукции_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ВыпускПродукции;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ВыпускПродукции";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ВыпускПродукции_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ВыпускПродукции_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_ВыпускПродукции";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",          "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",   "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",         "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",   "Организация", , "Справочник_Организации");
	ДобавитьПКС(СвойстваШапки, "Ответственный", "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Подразделение", "Подразделение", , "Справочник_Подразделения");
	ДобавитьПКС(СвойстваШапки, "Склад",         "Склад", , "Справочник_Склады");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Продукция", "");
	ДобавитьПКС(СвойстваТЧ, "ЕдиницаИзмерения",           "", 1,"Справочник_ЕдиницыИзмеренияИзСтруктуры");
	ДобавитьПКС(СвойстваТЧ, "Количество",                 "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",               "", 1,"Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "Спецификация",               "", 1,"Справочник_СпецификацииНоменклатуры_Получение");
	ДобавитьПКС(СвойстваТЧ, "СчетУчетаБУ",                "", 1);
	ДобавитьПКС(СвойстваТЧ, "СчетУчетаНУ",                "", 1);
	ДобавитьПКС(СвойстваТЧ, "ХарактеристикаНоменклатуры", "", 1,"Справочник_ХарактеристикиИзСтруктуры_Получение");

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер,Организация");
КонецПроцедуры

Процедура ПКО_Документ_ВыпускПродукции_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.Проведен = Истина;
	
	ПравилаЗаполнения = Новый Соответствие;
	ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
	ПравилаЗаполнения.Вставить("Количество",   "Количество");
	ПравилаЗаполнения.Вставить("Спецификация", "СпецификацияНоменклатуры");
	
	МассивСтрокТовары = Новый Массив;
	Если ДанныеXDTO.Свойство("Продукция")
		И ЗначениеЗаполнено(ДанныеXDTO.Продукция) Тогда
		
		Для Каждого Строка Из ДанныеXDTO.Продукция Цикл
			
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			
			// Единица изменения в виде структуры
			Если ЗначениеЗаполнено(Строка.ЕдиницаИзмерения) И ТипЗнч(Строка.ЕдиницаИзмерения) = Тип("Структура") Тогда
				СтруктураДанныхСтроки.Вставить("ЕдиницаИзмерения", ПодготовитьСтруктуруДанныхСПодчинением(Строка.ЕдиницаИзмерения, Строка.Номенклатура));
			КонецЕсли;
			// Характеристика в виде структуры
			Если ЗначениеЗаполнено(Строка.Характеристика) И ТипЗнч(Строка.Характеристика) = Тип("Структура") Тогда
				СтруктураДанныхСтроки.Вставить("ХарактеристкаНоменклатуры", ПодготовитьСтруктуруДанныхСПодчинением(Строка.Характеристика, Строка.Номенклатура));
			КонецЕсли;
			Если ЗначениеЗаполнено(Строка.СчетУчета) Тогда
				СчетУчета = ПланыСчетов.Хозрасчетный.НайтиПоКоду(Строка.СчетУчета);
				СтруктураДанныхСтроки.Вставить("СчетУчета", СчетУчета);
				СтруктураДанныхСтроки.Вставить("СчетУчетаНУ", БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", СчетУчета)));
			КонецЕсли;
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
		
		КонецЦикла;
		
	КонецЕсли;
	ПолученныеДанные.ДополнительныеСвойства.Вставить("Продукция", МассивСтрокТовары);
КонецПроцедуры

Процедура ПКО_Документ_ВыпускПродукции_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗаполнитьПризнакиОтраженияВУчетах(ПолученныеДанные);
КонецПроцедуры
//  Документ_ГТДИмпорт_Получение
Процедура ДобавитьПКО_Документ_ГТДИмпорт_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ГТДИмпорт_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ГТДИмпорт;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ТаможеннаяДекларация";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ГТДИмпорт_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ГТДИмпорт_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_ГТДИмпорт";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",         "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                    "Дата");
	ДобавитьПКС(СвойстваШапки, "ДоговорКонтрагентаРегл",  "Договор", , "Справочник_Договоры_Получение");
	ДобавитьПКС(СвойстваШапки, "Комментарий",             "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",              "Контрагент", , "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваШапки, "КратностьВзаиморасчетов", "КратностьВзаиморасчетов");
	ДобавитьПКС(СвойстваШапки, "КратностьДокумента",      "КратностьДокумента");
	ДобавитьПКС(СвойстваШапки, "КурсВзаиморасчетов",      "КурсВзаиморасчетов");
	ДобавитьПКС(СвойстваШапки, "КурсДокумента",           "КурсДокумента");
	ДобавитьПКС(СвойстваШапки, "Номер",                   "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",             "Организация", , "Справочник_Организации");
	ДобавитьПКС(СвойстваШапки, "Ответственный",           "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Подразделение",           "Подразделение", , "Справочник_Подразделения");
	ДобавитьПКС(СвойстваШапки, "ТаможенныйСбор",          "ТаможенныйСбор");
	ДобавитьПКС(СвойстваШапки, "ТаможенныйШтраф",         "ТаможенныйШтраф");
	ДобавитьПКС(СвойстваШапки, "НомерГТД",                "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Разделы", "");
	ДобавитьПКС(СвойстваТЧ, "НДСВВалюте",                          "", 1);
	ДобавитьПКС(СвойстваТЧ, "ПошлинаВВалюте",                      "", 1);
	ДобавитьПКС(СвойстваТЧ, "СтавкаНДС",                           "", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "СтавкаПошлины",                       "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаНДС",                            "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаПошлины",                        "", 1);
	ДобавитьПКС(СвойстваТЧ, "ТаможеннаяСтоимость",                 "", 1);
	ДобавитьПКС(СвойстваТЧ, "ТаможеннаяСтоимостьВВалютеРеглУчета", "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Товары",  "");
	ДобавитьПКС(СвойстваТЧ, "ДокументПартии",             "", 1,"Документ_ПоступлениеТоваровУслуг_Получение");
	ДобавитьПКС(СвойстваТЧ, "Количество",                 "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",               "", 1,"Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "НомерРаздела",               "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаНДС",                   "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаПошлины",               "", 1);
	ДобавитьПКС(СвойстваТЧ, "СчетУчетаБУ",                "", 1);
	ДобавитьПКС(СвойстваТЧ, "СчетУчетаНДС",               "", 1);
	ДобавитьПКС(СвойстваТЧ, "ФактурнаяСтоимость",         "", 1);
	ДобавитьПКС(СвойстваТЧ, "ХарактеристикаНоменклатуры", "", 1,"Справочник_ХарактеристикиИзСтруктуры_Получение");

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер,Организация");
КонецПроцедуры

Процедура ПКО_Документ_ГТДИмпорт_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.Проведен = Истина;
	// Номер ГТД
	Если ДанныеXDTO.Свойство("НомерДекларации")  Тогда
		НомерДекларации = ДанныеXDTO.НомерДекларации;
		НомерГТДСсылка = Справочники.НомераГТД.НайтиПоКоду(НомерДекларации); 
		Если НЕ ЗначениеЗаполнено(НомерГТДСсылка) Тогда
			НомерГТДНовый = Справочники.НомераГТД.СоздатьЭлемент();
			НомерГТДНовый.Код = НомерДекларации;
			НомерГТДНовый.ОбменДанными.Загрузка = Истина;
			НомерГТДНовый.Записать();
			НомерГТДСсылка = НомерГТДНовый.Ссылка; 
		КонецЕсли;
		ПолученныеДанные.НомерГТД = НомерГТДСсылка;
	КонецЕсли;
	// ТЧ Товары
	ПравилаЗаполнения = Новый Соответствие;
	ПравилаЗаполнения.Вставить("НомерРаздела", "НомерРаздела");
	ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
	ПравилаЗаполнения.Вставить("Количество",   "Количество");
	ПравилаЗаполнения.Вставить("ТаможеннаяСтоимость","ФактурнаяСтоимость");
	ПравилаЗаполнения.Вставить("СуммаПошлины", "СуммаПошлины");
	ПравилаЗаполнения.Вставить("СуммаНДС",     "СуммаНДС");
	ПравилаЗаполнения.Вставить("ДокументПоступления","ДокументПартии");
	
	
	МассивСтрокТовары = Новый Массив;
	Если ДанныеXDTO.Свойство("Товары")
		И ЗначениеЗаполнено(ДанныеXDTO.Товары) Тогда
		
		Для Каждого Строка Из ДанныеXDTO.Товары Цикл
			
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			
			// Характеристика в виде структуры
			Если ЗначениеЗаполнено(Строка.Характеристика) И ТипЗнч(Строка.Характеристика) = Тип("Структура") Тогда
				СтруктураДанныхСтроки.Вставить("ХарактеристкаНоменклатуры", ПодготовитьСтруктуруДанныхСПодчинением(Строка.Характеристика, Строка.Номенклатура));
			КонецЕсли;
			Если ЗначениеЗаполнено(Строка.СчетУчета) Тогда
				СтруктураДанныхСтроки.Вставить("СчетУчетаБУ", ПланыСчетов.Хозрасчетный.НайтиПоКоду(Строка.СчетУчета));
			КонецЕсли;
			Если ЗначениеЗаполнено(Строка.СчетУчетаНДС) Тогда
				СтруктураДанныхСтроки.Вставить("СчетУчетаНДС", ПланыСчетов.Хозрасчетный.НайтиПоКоду(Строка.СчетУчетаНДС));
			КонецЕсли;
	
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
		
		КонецЦикла;
		
	КонецЕсли;
	ПолученныеДанные.ДополнительныеСвойства.Вставить("Товары", МассивСтрокТовары);
	// ТЧ Разделы
	ПравилаЗаполнения = Новый Соответствие;
	ПравилаЗаполнения.Вставить("СтавкаНДС", "СтавкаНДС");
	ПравилаЗаполнения.Вставить("СтавкаПошлины", "СтавкаПошлины");
	ПравилаЗаполнения.Вставить("СуммаПошлины", "СуммаПошлины");
	ПравилаЗаполнения.Вставить("СуммаНДС",     "СуммаНДС");
	ПравилаЗаполнения.Вставить("ТаможеннаяСтоимость","ТаможеннаяСтоимость");
	ПравилаЗаполнения.Вставить("НДСВВалюте", "НДСВВалюте");
	ПравилаЗаполнения.Вставить("ПошлинаВВалюте",   "ПошлинаВВалюте");
	МассивСтрокРазделы = Новый Массив;
	Если ДанныеXDTO.Свойство("Разделы")
		И ЗначениеЗаполнено(ДанныеXDTO.Разделы) Тогда
		
		Для Каждого Строка Из ДанныеXDTO.Разделы Цикл
			
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			СтруктураДанныхСтроки.Вставить("ТаможеннаяСтоимостьВВалютеРеглУчета", Строка.ТаможеннаяСтоимость);
			МассивСтрокРазделы.Добавить(СтруктураДанныхСтроки);
		
		КонецЦикла;
		
	КонецЕсли;
	ПолученныеДанные.ДополнительныеСвойства.Вставить("Разделы", МассивСтрокРазделы);
КонецПроцедуры

Процедура ПКО_Документ_ГТДИмпорт_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗаполнитьПризнакиОтраженияВУчетах(ПолученныеДанные);
	ЗаполнитьКолонкиТабличнойЧасти(ПолученныеДанные, "Товары", "ЕдиницаИзмерения, Коэффициент, СтатусПартии");
	Если ПолученныеДанные.ОтражатьВБухгалтерскомУчете Тогда
		СчетаУчетаВДокументах.ЗаполнитьСчетаУчетаТабличнойЧасти("Товары", ПолученныеДанные.Товары, ПолученныеДанные, Истина, ПолученныеДанные.ОтражатьВНалоговомУчете, , , Истина);
	КонецЕсли;
КонецПроцедуры
//  Документ_КорректировкаДолга_Получение
Процедура ДобавитьПКО_Документ_КорректировкаДолга_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_КорректировкаДолга_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.КорректировкаДолга;
	ПравилоКонвертации.ОбъектФормата                = "Документ.КорректировкаДолга";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_КорректировкаДолга_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_КорректировкаДолга_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_КоррДолга";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",    "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "ВидОперации",        "ВидОперации", , "Перечисление_ВидыОперацийКорректировкаДолга");
	ДобавитьПКС(СвойстваШапки, "Дата",               "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",        "Комментарий");
	ДобавитьПКС(СвойстваШапки, "КонтрагентКредитор", "КонтрагентКредитор", , "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваШапки, "КратностьДокумента", "КратностьДокумента");
	ДобавитьПКС(СвойстваШапки, "КурсДокумента",      "КурсДокумента");
	ДобавитьПКС(СвойстваШапки, "Номер",              "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",        "Организация", , "Справочник_Организации");
	ДобавитьПКС(СвойстваШапки, "Ответственный",      "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Подразделение",      "Подразделение", , "Справочник_Подразделения");
	ДобавитьПКС(СвойстваШапки, "КонтрагентДебитор",  "", 1, "Справочник_Контрагенты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "СуммыДолга", "");
	ДобавитьПКС(СвойстваТЧ, "ВидЗадолженности",        "", 1);
	ДобавитьПКС(СвойстваТЧ, "ДоговорКонтрагента",      "", 1,"Справочник_Договоры_Получение");
	ДобавитьПКС(СвойстваТЧ, "КратностьВзаиморасчетов", "", 1);
	ДобавитьПКС(СвойстваТЧ, "КурсВзаиморасчетов",      "", 1);
	ДобавитьПКС(СвойстваТЧ, "Сумма",                   "", 1);
	ДобавитьПКС(СвойстваТЧ, "СчетУчетаАвансов",        "", 1);
	ДобавитьПКС(СвойстваТЧ, "СчетУчетаРасчетов",       "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер,Организация");
КонецПроцедуры

Процедура ПКО_Документ_КорректировкаДолга_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.Проведен = Истина;
	КонтрагентДебитор = Неопределено;
	КонтрагентКредитор = Неопределено;
	ДанныеXDTO.Свойство("КонтрагентДебитор", КонтрагентДебитор);
	ДанныеXDTO.Свойство("КонтрагентКредитор", КонтрагентКредитор);
	
	Если ДанныеXDTO.ВидОперации.Значение = "ПроведениеВзаимозачета" И КонтрагентДебитор <> Неопределено Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("КонтрагентДебитор", КонтрагентДебитор);
	ИначеЕсли КонтрагентКредитор <> Неопределено Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("КонтрагентДебитор", КонтрагентКредитор);
	ИначеЕсли КонтрагентДебитор <> Неопределено Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("КонтрагентДебитор", КонтрагентДебитор);
	КонецЕсли;
	
	Если ДанныеXDTO.Свойство("СчетДт") Тогда
		СчетДт = ПланыСчетов.Хозрасчетный.НайтиПоКоду(ДанныеXDTO.СчетДт);
		Если ЗначениеЗаполнено(СчетДт) Тогда
			ПолученныеДанные.СчетДт = СчетДт;
			ПолученныеДанные.СчетДтНУ = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", СчетДт));
		КонецЕсли;
	КонецЕсли;
	Если ДанныеXDTO.Свойство("СчетКт") Тогда
		СчетКт = ПланыСчетов.Хозрасчетный.НайтиПоКоду(ДанныеXDTO.СчетКт);
		Если ЗначениеЗаполнено(СчетКт) Тогда
			ПолученныеДанные.СчетКт = СчетКт;
			ПолученныеДанные.СчетКтНУ = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", СчетКт));
		КонецЕсли;
	КонецЕсли;
	
	Если ДанныеXDTO.Свойство("ДебиторскаяЗадолженность") Тогда
		ЗагрузитьСуммыДолга(ПолученныеДанные, ДанныеXDTO.ДебиторскаяЗадолженность, Перечисления.ВидыЗадолженности.Дебиторская);
	КонецЕсли;
	Если ДанныеXDTO.Свойство("КредиторскаяЗадолженность") Тогда
		ЗагрузитьСуммыДолга(ПолученныеДанные, ДанныеXDTO.КредиторскаяЗадолженность, Перечисления.ВидыЗадолженности.Кредиторская);
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Документ_КорректировкаДолга_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗаполнитьПризнакиОтраженияВУчетах(ПолученныеДанные);
КонецПроцедуры
//  Документ_КорректировкаПоступленияТоваров_Получение
Процедура ДобавитьПКО_Документ_КорректировкаПоступленияТоваров_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_КорректировкаПоступленияТоваров_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.КорректировкаПоступления;
	ПравилоКонвертации.ОбъектФормата                = "Документ.КорректировкаПоступленияТоваров";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_КорректировкаПоступленияТоваров_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_КорректировкаПоступленияТоваров_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_КорректировкаПоступления";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",                 "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "ВидОперации",                     "ВидОперации", , "Перечисление_ВидыОперацийИсправленияПостРеал");
	ДобавитьПКС(СвойстваШапки, "ВосстановитьНДС",                 "ВосстановитьНДС");
	ДобавитьПКС(СвойстваШапки, "Грузоотправитель",                "Грузоотправитель", , "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваШапки, "Дата",                            "Дата");
	ДобавитьПКС(СвойстваШапки, "ДоговорКонтрагента",              "Договор", , "Справочник_Договоры_Получение");
	ДобавитьПКС(СвойстваШапки, "Комментарий",                     "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",                      "Контрагент", , "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваШапки, "Номер",                           "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",                     "Организация", , "Справочник_Организации");
	ДобавитьПКС(СвойстваШапки, "Ответственный",                   "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Подразделение",                   "Подразделение", , "Справочник_Подразделения");
	ДобавитьПКС(СвойстваШапки, "Склад",                           "Склад", , "Справочник_Склады");
	ДобавитьПКС(СвойстваШапки, "СуммаВключаетНДС",                "СуммаВключаетНДС");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",                  "Сумма");
	ДобавитьПКС(СвойстваШапки, "ДокументПоступления",             "", 1);
	ДобавитьПКС(СвойстваШапки, "ИсправляемыйДокументПоступления", "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Товары", "");
	ДобавитьПКС(СвойстваТЧ, "ЕдиницаИзмерения",           "", 1,"Справочник_ЕдиницыИзмеренияИзСтруктуры");
	ДобавитьПКС(СвойстваТЧ, "ЕстьВДокументеПоступления",  "", 1);
	ДобавитьПКС(СвойстваТЧ, "Количество",                 "", 1);
	ДобавитьПКС(СвойстваТЧ, "КоличествоДоИзменения",      "", 1);
	ДобавитьПКС(СвойстваТЧ, "КоличествоДоКорректировки",  "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",               "", 1,"Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "Склад",                      "", 1,"Справочник_Склады");
	ДобавитьПКС(СвойстваТЧ, "СтавкаНДС",                  "", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "СтавкаНДСДоИзменения",       "", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "Сумма",                      "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаДоИзменения",           "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаДоКорректировки",       "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаНДС",                   "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаНДСДоИзменения",        "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаНДСДоКорректировки",    "", 1);
	ДобавитьПКС(СвойстваТЧ, "СчетУчетаБУ",                "", 1);
	ДобавитьПКС(СвойстваТЧ, "СчетУчетаНУ",                "", 1);
	ДобавитьПКС(СвойстваТЧ, "ХарактеристикаНоменклатуры", "", 1,"Справочник_ХарактеристикиИзСтруктуры_Получение");
	ДобавитьПКС(СвойстваТЧ, "Цена",                       "", 1);
	ДобавитьПКС(СвойстваТЧ, "ЦенаДоИзменения",            "", 1);
	ДобавитьПКС(СвойстваТЧ, "ЦенаДоКорректировки",        "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Услуги", "");
	ДобавитьПКС(СвойстваТЧ, "ЕстьВДокументеПоступления", "", 1);
	ДобавитьПКС(СвойстваТЧ, "Количество",                "", 1);
	ДобавитьПКС(СвойстваТЧ, "КоличествоДоИзменения",     "", 1);
	ДобавитьПКС(СвойстваТЧ, "КоличествоДоКорректировки", "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",              "", 1,"Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "Подразделение",             "", 1,"Справочник_Подразделения");
	ДобавитьПКС(СвойстваТЧ, "Содержание",                "", 1);
	ДобавитьПКС(СвойстваТЧ, "СодержаниеДоИзменения",     "", 1);
	ДобавитьПКС(СвойстваТЧ, "СтавкаНДС",                 "", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "СтавкаНДСДоИзменения",      "", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "СтатьяЗатрат",              "", 1,"Справочник_СтатьиЗатрат_Получение");
	ДобавитьПКС(СвойстваТЧ, "Сумма",                     "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаДоИзменения",          "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаДоКорректировки",      "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаНДС",                  "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаНДСДоИзменения",       "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаНДСДоКорректировки",   "", 1);
	ДобавитьПКС(СвойстваТЧ, "СчетЗатрат",                "", 1);
	ДобавитьПКС(СвойстваТЧ, "СчетЗатратНУ",              "", 1);
	ДобавитьПКС(СвойстваТЧ, "Цена",                      "", 1);
	ДобавитьПКС(СвойстваТЧ, "ЦенаДоИзменения",           "", 1);
	ДобавитьПКС(СвойстваТЧ, "ЦенаДоКорректировки",       "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер,Организация");
КонецПроцедуры

Процедура ПКО_Документ_КорректировкаПоступленияТоваров_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.Проведен = Истина;
	Если ДанныеXDTO.Свойство("ДокументПоступления") Тогда
		ИмяПКО = ОпределитьИмяПКОПоДаннымXDTO(ДанныеXDTO.ДокументПоступления);
		Если НЕ ПустаяСтрока(ИмяПКО) Тогда 
			ПолученныеДанные.ДополнительныеСвойства.Вставить("ДокументПоступления", Новый Структура("Значение, ИмяПКО", ДанныеXDTO.ДокументПоступления, ИмяПКО));
		КонецЕсли;
	КонецЕсли;
	Если ДанныеXDTO.Свойство("ИсправляемыйДокументПоступления") Тогда
		ИмяПКО = ОпределитьИмяПКОПоДаннымXDTO(ДанныеXDTO.ИсправляемыйДокументПоступления);
		Если НЕ ПустаяСтрока(ИмяПКО) Тогда 
			ПолученныеДанные.ДополнительныеСвойства.Вставить("ИсправляемыйДокументПоступления", Новый Структура("Значение, ИмяПКО", ДанныеXDTO.ИсправляемыйДокументПоступления, ИмяПКО));
		КонецЕсли;
	КонецЕсли;
	
	// ТЧ Товары
	ПравилаЗаполнения = Новый Соответствие;
	ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
	ПравилаЗаполнения.Вставить("Количество",   "Количество");
	ПравилаЗаполнения.Вставить("КоличествоДоИзменения","КоличествоДоИзменения");
	ПравилаЗаполнения.Вставить("КоличествоДоКорректировки","КоличествоДоКорректировки");
	
	ПравилаЗаполнения.Вставить("Цена","Цена");
	ПравилаЗаполнения.Вставить("ЦенаДоИзменения","ЦенаДоИзменения");
	ПравилаЗаполнения.Вставить("ЦенаДоКорректировки","ЦенаДоКорректировки");
	
	ПравилаЗаполнения.Вставить("Сумма","Сумма");
	ПравилаЗаполнения.Вставить("СуммаДоИзменения","СуммаДоИзменения");
	ПравилаЗаполнения.Вставить("СуммаДоКорректировки","СуммаДоКорректировки");
	
	ПравилаЗаполнения.Вставить("СуммаНДС","СуммаНДС");
	ПравилаЗаполнения.Вставить("СуммаНДСДоИзменения","СуммаНДСДоИзменения");
	ПравилаЗаполнения.Вставить("СуммаНДСсДоКорректировки","СуммаНДСДоКорректировки");
	
	ПравилаЗаполнения.Вставить("СтавкаНДС","СтавкаНДС");
	ПравилаЗаполнения.Вставить("СтавкаНДСДоИзменения","СтавкаНДСДоИзменения");
	
	ПравилаЗаполнения.Вставить("ЕстьВДокументеПоступленияРеализации", "ЕстьВДокументеПоступления");
	
	МассивСтрокТовары = Новый Массив;
	Если ДанныеXDTO.Свойство("Товары")
		И ЗначениеЗаполнено(ДанныеXDTO.Товары) Тогда
		
		Для Каждого Строка Из ДанныеXDTO.Товары Цикл
			
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			
			// Характеристика в виде структуры
			Если ЗначениеЗаполнено(Строка.Характеристика) И ТипЗнч(Строка.Характеристика) = Тип("Структура") Тогда
				СтруктураДанныхСтроки.Вставить("ХарактеристкаНоменклатуры", ПодготовитьСтруктуруДанныхСПодчинением(Строка.Характеристика, Строка.Номенклатура));
			КонецЕсли;
			СтруктураДанныхСтроки.Вставить("Склад", ДанныеXDTO.Склад);
			Если ЗначениеЗаполнено(Строка.СчетУчета) Тогда
				СчетУчетаБУ = ПланыСчетов.Хозрасчетный.НайтиПоКОду(Строка.СчетУчета);
				СтруктураДанныхСтроки.Вставить("СчетУчетаБУ",СчетУчетаБУ);
				СчетУчетаНУ = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", СчетУчетаБУ));
				СтруктураДанныхСтроки.Вставить("СчетУчетаНУ",СчетУчетаНУ);
			КонецЕсли;
	
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
		
		КонецЦикла;
		
	КонецЕсли;
	ПолученныеДанные.ДополнительныеСвойства.Вставить("Товары", МассивСтрокТовары);
	
	// ТЧ Услуги
	ПравилаЗаполнения = Новый Соответствие;
	ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
	ПравилаЗаполнения.Вставить("Содержание", "Содержание");
	ПравилаЗаполнения.Вставить("СодержаниеДоИзменения", "СодержаниеДоИзменения");
	
	ПравилаЗаполнения.Вставить("Сумма","Сумма");
	ПравилаЗаполнения.Вставить("СуммаДоИзменения","СуммаДоИзменения");
	ПравилаЗаполнения.Вставить("СуммаДоКорректировки","СуммаДоКорректировки");
	
	ПравилаЗаполнения.Вставить("СуммаНДС","СуммаНДС");
	ПравилаЗаполнения.Вставить("СуммаНДСДоИзменения","СуммаНДСДоИзменения");
	ПравилаЗаполнения.Вставить("СуммаНДСсДоКорректировки","СуммаНДСДоКорректировки");
	
	ПравилаЗаполнения.Вставить("СтавкаНДС","СтавкаНДС");
	ПравилаЗаполнения.Вставить("СтавкаНДСДоИзменения","СтавкаНДСДоИзменения");
	ПравилаЗаполнения.Вставить("ЕстьВДокументеПоступленияРеализации", "ЕстьВДокументеПоступления");
	
	
	ПравилаЗаполнения.Вставить("СтатьяЗатрат", "СтатьяЗатрат");
	ПравилаЗаполнения.Вставить("ПодразделениеЗатрат","Подразделение"); 
	
	ПравилаЗаполнения.Вставить("Количество",   "Количество");
	ПравилаЗаполнения.Вставить("КоличествоДоИзменения","КоличествоДоИзменения");
	ПравилаЗаполнения.Вставить("КоличествоДоКорректировки","КоличествоДоКорректировки");
	
	ПравилаЗаполнения.Вставить("Цена","Цена");
	ПравилаЗаполнения.Вставить("ЦенаДоИзменения","ЦенаДоИзменения");
	ПравилаЗаполнения.Вставить("ЦенаДоКорректировки","ЦенаДоКорректировки");
	
	МассивСтрокУслуги = Новый Массив;
	Если ДанныеXDTO.Свойство("Услуги")
		И ЗначениеЗаполнено(ДанныеXDTO.Услуги) Тогда
		
		Для Каждого Строка Из ДанныеXDTO.Услуги Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			Если ЗначениеЗаполнено(Строка.СчетЗатрат) Тогда
				СчетЗатратБУ = ПланыСчетов.Хозрасчетный.НайтиПоКОду(Строка.СчетЗатрат);
				СтруктураДанныхСтроки.Вставить("СчетЗатрат",СчетЗатратБУ);
				СчетЗатратНУ = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", СчетЗатратБУ));
				СтруктураДанныхСтроки.Вставить("СчетЗатратНУ",СчетЗатратНУ);
			КонецЕсли;
			МассивСтрокУслуги.Добавить(СтруктураДанныхСтроки);
		
		КонецЦикла;
		
	КонецЕсли;
	
	ПолученныеДанные.ДополнительныеСвойства.Вставить("Услуги", МассивСтрокУслуги);
КонецПроцедуры

Процедура ПКО_Документ_КорректировкаПоступленияТоваров_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗаполнитьПризнакиОтраженияВУчетах(ПолученныеДанные);
	Если ПолученныеДанные.ОтражатьВБухгалтерскомУчете Тогда
		ПолученныеДанные.КорректироватьБУиНУ = Истина;
		ПолученныеДанные.КорректироватьНДС = Истина;
	КонецЕсли;
КонецПроцедуры
//  Документ_КорректировкаРеализацииТоваров_Получение
Процедура ДобавитьПКО_Документ_КорректировкаРеализацииТоваров_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_КорректировкаРеализацииТоваров_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.КорректировкаРеализации;
	ПравилоКонвертации.ОбъектФормата                = "Документ.КорректировкаРеализацииТоваров";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_КорректировкаРеализацииТоваров_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_КорректировкаРеализацииТоваров_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_КорректировкаРеализации";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "АдресДоставки",                  "АдресДоставки");
	ДобавитьПКС(СвойстваШапки, "БанковскийСчетОрганизации",      "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчета");
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",                "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "ВидОперации",                    "ВидОперации", , "Перечисление_ВидыОперацийИсправленияПостРеал");
	ДобавитьПКС(СвойстваШапки, "Грузоотправитель",               "Грузоотправитель", , "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваШапки, "Грузополучатель",                "Грузополучатель", , "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваШапки, "Дата",                           "Дата");
	ДобавитьПКС(СвойстваШапки, "ДоговорКонтрагента",             "Договор", , "Справочник_Договоры_Получение");
	ДобавитьПКС(СвойстваШапки, "Комментарий",                    "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",                     "Контрагент", , "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваШапки, "Номер",                          "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",                    "Организация", , "Справочник_Организации");
	ДобавитьПКС(СвойстваШапки, "Ответственный",                  "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Подразделение",                  "Подразделение", , "Справочник_Подразделения");
	ДобавитьПКС(СвойстваШапки, "Склад",                          "Склад", , "Справочник_Склады");
	ДобавитьПКС(СвойстваШапки, "СуммаВключаетНДС",               "СуммаВключаетНДС");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",                 "Сумма");
	ДобавитьПКС(СвойстваШапки, "ДокументРеализации",             "", 1);
	ДобавитьПКС(СвойстваШапки, "ИсправляемыйДокументРеализации", "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Товары", "");
	ДобавитьПКС(СвойстваТЧ, "ЕстьВДокументеРеализации",   "", 1);
	ДобавитьПКС(СвойстваТЧ, "Количество",                 "", 1);
	ДобавитьПКС(СвойстваТЧ, "КоличествоДоИзменения",      "", 1);
	ДобавитьПКС(СвойстваТЧ, "КоличествоДоКорректировки",  "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",               "", 1,"Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "Склад",                      "", 1,"Справочник_Склады");
	ДобавитьПКС(СвойстваТЧ, "СтавкаНДС",                  "", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "Сумма",                      "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаДоИзменения",           "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаДоКорректировки",       "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаНДС",                   "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаНДСДоИзменения",        "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаНДСДоКорректировки",    "", 1);
	ДобавитьПКС(СвойстваТЧ, "СчетДоходовБУ",              "", 1);
	ДобавитьПКС(СвойстваТЧ, "СчетДоходовНУ",              "", 1);
	ДобавитьПКС(СвойстваТЧ, "СчетРасходовБУ",             "", 1);
	ДобавитьПКС(СвойстваТЧ, "СчетРасходовНУ",             "", 1);
	ДобавитьПКС(СвойстваТЧ, "СчетУчетаБУ",                "", 1);
	ДобавитьПКС(СвойстваТЧ, "СчетУчетаНУ",                "", 1);
	ДобавитьПКС(СвойстваТЧ, "ХарактеристикаНоменклатуры", "", 1,"Справочник_ХарактеристикиИзСтруктуры_Получение");
	ДобавитьПКС(СвойстваТЧ, "Цена",                       "", 1);
	ДобавитьПКС(СвойстваТЧ, "ЦенаДоИзменения",            "", 1);
	ДобавитьПКС(СвойстваТЧ, "ЦенаДоКорректировки",        "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Услуги", "");
	ДобавитьПКС(СвойстваТЧ, "ЕстьВДокументеРеализации",  "", 1);
	ДобавитьПКС(СвойстваТЧ, "Количество",                "", 1);
	ДобавитьПКС(СвойстваТЧ, "КоличествоДоИзменения",     "", 1);
	ДобавитьПКС(СвойстваТЧ, "КоличествоДоКорректировки", "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",              "", 1,"Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "Содержание",                "", 1);
	ДобавитьПКС(СвойстваТЧ, "СодержаниеДоИзменения",     "", 1);
	ДобавитьПКС(СвойстваТЧ, "СтавкаНДС",                 "", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "СтавкаНДСДоИзменения",      "", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "Сумма",                     "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаДоИзменения",          "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаДоКорректировки",      "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаНДС",                  "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаНДСДоИзменения",       "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаНДСДоКорректировки",   "", 1);
	ДобавитьПКС(СвойстваТЧ, "СчетДоходовБУ",             "", 1);
	ДобавитьПКС(СвойстваТЧ, "СчетДоходовНУ",             "", 1);
	ДобавитьПКС(СвойстваТЧ, "СчетРасходовБУ",            "", 1);
	ДобавитьПКС(СвойстваТЧ, "СчетРасходовНУ",            "", 1);
	ДобавитьПКС(СвойстваТЧ, "Цена",                      "", 1);
	ДобавитьПКС(СвойстваТЧ, "ЦенаДоИзменения",           "", 1);
	ДобавитьПКС(СвойстваТЧ, "ЦенаДоКорректировки",       "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер,Организация");
КонецПроцедуры

Процедура ПКО_Документ_КорректировкаРеализацииТоваров_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.Проведен = Истина;
	Если ДанныеXDTO.Свойство("ДокументРеализации") Тогда
		ИмяПКО = ОпределитьИмяПКОПоДаннымXDTO(ДанныеXDTO.ДокументРеализации);
		Если НЕ ПустаяСтрока(ИмяПКО) Тогда 
			ПолученныеДанные.ДополнительныеСвойства.Вставить("ДокументРеализации", Новый Структура("Значение, ИмяПКО", ДанныеXDTO.ДокументРеализации, ИмяПКО));
		КонецЕсли;
	КонецЕсли;
	Если ДанныеXDTO.Свойство("ИсправляемыйДокументРеализации") Тогда
		ИмяПКО = ОпределитьИмяПКОПоДаннымXDTO(ДанныеXDTO.ИсправляемыйДокументРеализации);
		Если НЕ ПустаяСтрока(ИмяПКО) Тогда 
			ПолученныеДанные.ДополнительныеСвойства.Вставить("ИсправляемыйДокументРеализации", Новый Структура("Значение, ИмяПКО", ДанныеXDTO.ИсправляемыйДокументРеализации, ИмяПКО));
		КонецЕсли;
	КонецЕсли;
	
	// ТЧ Товары
	ПравилаЗаполнения = Новый Соответствие;
	ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
	ПравилаЗаполнения.Вставить("Количество",   "Количество");
	ПравилаЗаполнения.Вставить("КоличествоДоИзменения","КоличествоДоИзменения");
	ПравилаЗаполнения.Вставить("КоличествоДоКорректировки","КоличествоДоКорректировки");
	
	ПравилаЗаполнения.Вставить("Цена","Цена");
	ПравилаЗаполнения.Вставить("ЦенаДоИзменения","ЦенаДоИзменения");
	ПравилаЗаполнения.Вставить("ЦенаДоКорректировки","ЦенаДоКорректировки");
	
	ПравилаЗаполнения.Вставить("Сумма","Сумма");
	ПравилаЗаполнения.Вставить("СуммаДоИзменения","СуммаДоИзменения");
	ПравилаЗаполнения.Вставить("СуммаДоКорректировки","СуммаДоКорректировки");
	
	ПравилаЗаполнения.Вставить("СуммаНДС","СуммаНДС");
	ПравилаЗаполнения.Вставить("СуммаНДСДоИзменения","СуммаНДСДоИзменения");
	ПравилаЗаполнения.Вставить("СуммаНДСсДоКорректировки","СуммаНДСДоКорректировки");
	
	ПравилаЗаполнения.Вставить("СтавкаНДС","СтавкаНДС");
	ПравилаЗаполнения.Вставить("СтавкаНДСДоИзменения","СтавкаНДСДоИзменения");
	
	ПравилаЗаполнения.Вставить("ЕстьВДокументеПоступленияРеализации", "ЕстьВДокументеРеализации");
	
	МассивСтрокТовары = Новый Массив;
	Если ДанныеXDTO.Свойство("Товары")
		И ЗначениеЗаполнено(ДанныеXDTO.Товары) Тогда
		
		Для Каждого Строка Из ДанныеXDTO.Товары Цикл
			
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			
			// Характеристика в виде структуры
			Если ЗначениеЗаполнено(Строка.Характеристика) И ТипЗнч(Строка.Характеристика) = Тип("Структура") Тогда
				СтруктураДанныхСтроки.Вставить("ХарактеристкаНоменклатуры", ПодготовитьСтруктуруДанныхСПодчинением(Строка.Характеристика, Строка.Номенклатура));
			КонецЕсли;
			СтруктураДанныхСтроки.Вставить("Склад", ДанныеXDTO.Склад);
			Если ЗначениеЗаполнено(Строка.СчетУчета) Тогда
				СчетУчетаБУ = ПланыСчетов.Хозрасчетный.НайтиПоКОду(Строка.СчетУчета);
				СтруктураДанныхСтроки.Вставить("СчетУчетаБУ",СчетУчетаБУ);
				СчетУчетаНУ = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", СчетУчетаБУ));
				СтруктураДанныхСтроки.Вставить("СчетУчетаНУ",СчетУчетаНУ);
			КонецЕсли;
			Если ЗначениеЗаполнено(Строка.СчетДоходов) Тогда
				СчетДоходовБУ = ПланыСчетов.Хозрасчетный.НайтиПоКОду(Строка.СчетДоходов);
				СтруктураДанныхСтроки.Вставить("СчетДоходовБУ",СчетДоходовБУ);
				СчетДоходовНУ = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", СчетДоходовБУ));
				СтруктураДанныхСтроки.Вставить("СчетДоходовНУ",СчетДоходовНУ);
			КонецЕсли;
			Если ЗначениеЗаполнено(Строка.СчетРасходов) Тогда
				СчетРасходовБУ = ПланыСчетов.Хозрасчетный.НайтиПоКОду(Строка.СчетРасходов);
				СтруктураДанныхСтроки.Вставить("СчетРасходовБУ",СчетРасходовБУ);
				СчетРасходовНУ = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", СчетРасходовБУ));
				СтруктураДанныхСтроки.Вставить("СчетРасходовНУ",СчетРасходовНУ);
			КонецЕсли;
	
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
		
		КонецЦикла;
		
	КонецЕсли;
	ПолученныеДанные.ДополнительныеСвойства.Вставить("Товары", МассивСтрокТовары);
	
	// ТЧ Услуги
	ПравилаЗаполнения = Новый Соответствие;
	ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
	ПравилаЗаполнения.Вставить("Содержание", "Содержание");
	ПравилаЗаполнения.Вставить("СодержаниеДоИзменения", "СодержаниеДоИзменения");
	
	ПравилаЗаполнения.Вставить("Сумма","Сумма");
	ПравилаЗаполнения.Вставить("СуммаДоИзменения","СуммаДоИзменения");
	ПравилаЗаполнения.Вставить("СуммаДоКорректировки","СуммаДоКорректировки");
	
	ПравилаЗаполнения.Вставить("СуммаНДС","СуммаНДС");
	ПравилаЗаполнения.Вставить("СуммаНДСДоИзменения","СуммаНДСДоИзменения");
	ПравилаЗаполнения.Вставить("СуммаНДСсДоКорректировки","СуммаНДСДоКорректировки");
	
	ПравилаЗаполнения.Вставить("СтавкаНДС","СтавкаНДС");
	ПравилаЗаполнения.Вставить("СтавкаНДСДоИзменения","СтавкаНДСДоИзменения");
	ПравилаЗаполнения.Вставить("ЕстьВДокументеПоступленияРеализации", "ЕстьВДокументеРеализации");
	
	ПравилаЗаполнения.Вставить("Количество",   "Количество");
	ПравилаЗаполнения.Вставить("КоличествоДоИзменения","КоличествоДоИзменения");
	ПравилаЗаполнения.Вставить("КоличествоДоКорректировки","КоличествоДоКорректировки");
	
	ПравилаЗаполнения.Вставить("Цена","Цена");
	ПравилаЗаполнения.Вставить("ЦенаДоИзменения","ЦенаДоИзменения");
	ПравилаЗаполнения.Вставить("ЦенаДоКорректировки","ЦенаДоКорректировки");
	
	МассивСтрокУслуги = Новый Массив;
	Если ДанныеXDTO.Свойство("Услуги")
		И ЗначениеЗаполнено(ДанныеXDTO.Услуги) Тогда
		
		Для Каждого Строка Из ДанныеXDTO.Услуги Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			Если ЗначениеЗаполнено(Строка.СчетДоходов) Тогда
				СчетДоходовБУ = ПланыСчетов.Хозрасчетный.НайтиПоКОду(Строка.СчетДоходов);
				СтруктураДанныхСтроки.Вставить("СчетДоходовБУ",СчетДоходовБУ);
				СчетДоходовНУ = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", СчетДоходовБУ));
				СтруктураДанныхСтроки.Вставить("СчетДоходовНУ",СчетДоходовНУ);
			КонецЕсли;
			Если ЗначениеЗаполнено(Строка.СчетРасходов) Тогда
				СчетРасходовБУ = ПланыСчетов.Хозрасчетный.НайтиПоКОду(Строка.СчетРасходов);
				СтруктураДанныхСтроки.Вставить("СчетРасходовБУ",СчетРасходовБУ);
				СчетРасходовНУ = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", СчетРасходовБУ));
				СтруктураДанныхСтроки.Вставить("СчетРасходовНУ",СчетРасходовНУ);
			КонецЕсли;
			МассивСтрокУслуги.Добавить(СтруктураДанныхСтроки);
		
		КонецЦикла;
		
	КонецЕсли;
	
	ПолученныеДанные.ДополнительныеСвойства.Вставить("Услуги", МассивСтрокУслуги);
КонецПроцедуры

Процедура ПКО_Документ_КорректировкаРеализацииТоваров_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗаполнитьПризнакиОтраженияВУчетах(ПолученныеДанные);
	Если ПолученныеДанные.ОтражатьВБухгалтерскомУчете Тогда
		ПолученныеДанные.КорректироватьБУиНУ = Истина;
		ПолученныеДанные.КорректироватьНДС = Истина;
	КонецЕсли;
КонецПроцедуры
//  Документ_ОперацияПоПлатежнойКарте_Получение
Процедура ДобавитьПКО_Документ_ОперацияПоПлатежнойКарте_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ОперацияПоПлатежнойКарте_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ОплатаОтПокупателяПлатежнойКартой;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ОперацияПоПлатежнойКарте";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ОперацияПоПлатежнойКарте_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ОперацияПоПлатежнойКарте_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_ОперацияПоПлатежнойКарте";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента", "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "ВидОперации",     "ВидОперации", , "Перечисление_ВидыОперацийПоПлатежнойКарте");
	ДобавитьПКС(СвойстваШапки, "Дата",            "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",     "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",      "Контрагент", , "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваШапки, "Номер",           "Номер");
	ДобавитьПКС(СвойстваШапки, "НомерЧекаККМ",    "НомерЧекаККМ");
	ДобавитьПКС(СвойстваШапки, "Организация",     "Организация", , "Справочник_Организации");
	ДобавитьПКС(СвойстваШапки, "Ответственный",   "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Подразделение",   "Подразделение", , "Справочник_Подразделения");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",  "Сумма");
	ДобавитьПКС(СвойстваШапки, "Эквайрер",        "Эквайрер", , "Справочник_Контрагенты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "РасшифровкаПлатежа", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "ДоговорКонтрагента",            "Договор", ,"Справочник_Договоры_Получение");
	ДобавитьПКС(СвойстваТЧ, "КратностьВзаиморасчетов",       "КратностьВзаиморасчетов");
	ДобавитьПКС(СвойстваТЧ, "КурсВзаиморасчетов",            "КурсВзаиморасчетов");
	ДобавитьПКС(СвойстваТЧ, "СтавкаНДС",                     "СтавкаНДС", ,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "СтатьяДвиженияДенежныхСредств", "СтатьяДДС", ,"Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "СуммаВзаиморасчетов",           "СуммаВзаиморасчетов");
	ДобавитьПКС(СвойстваТЧ, "СуммаНДС",                      "СуммаНДС");
	ДобавитьПКС(СвойстваТЧ, "СуммаПлатежа",                  "Сумма");

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер,Организация");
КонецПроцедуры

Процедура ПКО_Документ_ОперацияПоПлатежнойКарте_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.Проведен = Истина;
	Если ДанныеXDTO.Свойство("РасшифровкаПлатежа") Тогда
		ИндексСтроки = 0;
		Для Каждого СтрРасшифровка Из ДанныеXDTO.РасшифровкаПлатежа Цикл
			СтрокаПД = ПолученныеДанные.РасшифровкаПлатежа[ИндексСтроки];
			Если ЗначениеЗаполнено(СтрРасшифровка.СчетУчетаРасчетовСКонтрагентом) Тогда
				СтрокаПД.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.НайтиПоКоду(СтрРасшифровка.СчетУчетаРасчетовСКонтрагентом);
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрРасшифровка.СчетУчетаРасчетовПоАвансам) Тогда
				СтрокаПД.СчетУчетаРасчетовПоАвансам = ПланыСчетов.Хозрасчетный.НайтиПоКоду(СтрРасшифровка.СчетУчетаРасчетовПоАвансам);
			КонецЕсли; 
			
			Если НЕ ЗначениеЗаполнено(СтрокаПД.СчетУчетаРасчетовСКонтрагентом) ИЛИ НЕ ЗначениеЗаполнено(СтрокаПД.СчетУчетаРасчетовПоАвансам) Тогда
				СчетаУчета = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(ПолученныеДанные.Организация, ПолученныеДанные.Контрагент, СтрокаПД.ДоговорКонтрагента);
				Если НЕ ЗначениеЗаполнено(СтрокаПД.СчетУчетаРасчетовСКонтрагентом) Тогда
					СтрокаПД.СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетов;
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(СтрокаПД.СчетУчетаРасчетовПоАвансам) Тогда
					СтрокаПД.СчетУчетаРасчетовПоАвансам		= СчетаУчета.СчетАвансов;
				КонецЕсли;
			КонецЕсли;
			ИндексСтроки = ИндексСтроки + 1;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Документ_ОперацияПоПлатежнойКарте_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗаполнитьПризнакиОтраженияВУчетах(ПолученныеДанные);
КонецПроцедуры
//  Документ_ОприходованиеТоваров_Получение
Процедура ДобавитьПКО_Документ_ОприходованиеТоваров_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ОприходованиеТоваров_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ОприходованиеТоваров;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ОприходованиеТоваров";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ОприходованиеТоваров_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ОприходованиеТоваров_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_ОприходованиеТоваров";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",               "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",        "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",              "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",        "Организация", , "Справочник_Организации");
	ДобавитьПКС(СвойстваШапки, "Основание",          "Основание");
	ДобавитьПКС(СвойстваШапки, "Ответственный",      "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Подразделение",      "Подразделение", , "Справочник_Подразделения");
	ДобавитьПКС(СвойстваШапки, "Склад",              "Склад", , "Справочник_Склады");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",     "Сумма");
	ДобавитьПКС(СвойстваШапки, "ТипЦен",             "ТипЦен", , "Справочник_ТипыЦенНоменклатуры");
	ДобавитьПКС(СвойстваШапки, "ВидОперации",        "", 1);
	ДобавитьПКС(СвойстваШапки, "Проведен",           "", 1);
	ДобавитьПКС(СвойстваШапки, "СуммаДокументаРегл", "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Товары", "");
	ДобавитьПКС(СвойстваТЧ, "ЕдиницаИзмерения",           "", 1,"Справочник_ЕдиницыИзмеренияИзСтруктуры");
	ДобавитьПКС(СвойстваТЧ, "Количество",                 "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",               "", 1,"Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "Сумма",                      "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаРегл",                  "", 1);
	ДобавитьПКС(СвойстваТЧ, "ХарактеристикаНоменклатуры", "", 1,"Справочник_ХарактеристикиИзСтруктуры_Получение");
	ДобавитьПКС(СвойстваТЧ, "Цена",                       "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер,Организация");
КонецПроцедуры

Процедура ПКО_Документ_ОприходованиеТоваров_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.Проведен = Истина;
	
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийОприходованиеТоваров.ОприходованиеТоваров;
	ПравилаЗаполнения = Новый Соответствие;
	ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
	ПравилаЗаполнения.Вставить("Количество",   "Количество");
	ПравилаЗаполнения.Вставить("Цена",         "Цена");
	ПравилаЗаполнения.Вставить("Сумма",        "Сумма");
	
	ВалютаУпр = Константы.ВалютаУправленческогоУчета.Получить();
	ВалютаРегл = Константы.ВалютаРегламентированногоУчета.Получить();
	МассивСтрокТовары = Новый Массив;
	СуммаВВалютеРегл = 0;
	КурсВалютыУпр = Неопределено;
	КурсВалютыРегл = Неопределено;
	Если ДанныеXDTO.Свойство("Товары")
		И ЗначениеЗаполнено(ДанныеXDTO.Товары) Тогда
		
		Для Каждого Строка Из ДанныеXDTO.Товары Цикл
			
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			
			// Единица изменения в виде структуры
			Если ЗначениеЗаполнено(Строка.ЕдиницаИзмерения) И ТипЗнч(Строка.ЕдиницаИзмерения) = Тип("Структура") Тогда
				СтруктураДанныхСтроки.Вставить("ЕдиницаИзмерения", ПодготовитьСтруктуруДанныхСПодчинением(Строка.ЕдиницаИзмерения, Строка.Номенклатура));
			КонецЕсли;
			// Характеристика в виде структуры
			Если ЗначениеЗаполнено(Строка.Характеристика) И ТипЗнч(Строка.Характеристика) = Тип("Структура") Тогда
				СтруктураДанныхСтроки.Вставить("ХарактеристкаНоменклатуры", ПодготовитьСтруктуруДанныхСПодчинением(Строка.Характеристика, Строка.Номенклатура));
			КонецЕсли;
	
			//Расчет суммы регл.
			Если ЗначениеЗаполнено(Строка.Сумма) Тогда
				Если ВалютаУпр = ВалютаРегл Тогда
					СтруктураДанныхСтроки.Вставить("СуммаРегл", Строка.Сумма);
				Иначе
					Если КурсВалютыУпр = Неопределено Тогда
						КурсВалютыУпр = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаУпр, ПолученныеДанные.Дата);
					КонецЕсли;
					Если КурсВалютыРегл = Неопределено Тогда
						КурсВалютыРегл = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаРегл, ПолученныеДанные.Дата);
					КонецЕсли;
					СтруктураДанныхСтроки.Вставить("СуммаРегл", МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Строка.Сумма, ВалютаУпр, ВалютаРегл,
									КурсВалютыУпр.Курс, КурсВалютыРегл.Курс, КурсВалютыУпр.Кратность, КурсВалютыРегл.Кратность));
	
				КонецЕсли;
				СуммаВВалютеРегл = СуммаВВалютеРегл + СтруктураДанныхСтроки.СуммаРегл;
			КонецЕсли;
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
		
		КонецЦикла;
		
	КонецЕсли;
	ПолученныеДанные.СуммаДокументаРегл = СуммаВВалютеРегл;
	ПолученныеДанные.ДополнительныеСвойства.Вставить("Товары", МассивСтрокТовары);
КонецПроцедуры

Процедура ПКО_Документ_ОприходованиеТоваров_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗаполнитьПризнакиОтраженияВУчетах(ПолученныеДанные);
КонецПроцедуры
//  Документ_ОтчетКомиссионера_Получение
Процедура ДобавитьПКО_Документ_ОтчетКомиссионера_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ОтчетКомиссионера_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ОтчетКомиссионераОПродажах;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ОтчетКомиссионера";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ОтчетКомиссионера_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ОтчетКомиссионера_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_ОтчетКомиссионера";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",                          "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                                     "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоДокумента",                   "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "ДоговорКонтрагента",                       "Договор", , "Справочник_Договоры_Получение");
	ДобавитьПКС(СвойстваШапки, "Комментарий",                              "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",                               "Контрагент", , "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваШапки, "КратностьВзаиморасчетов",                  "КратностьВзаиморасчетов");
	ДобавитьПКС(СвойстваШапки, "КурсВзаиморасчетов",                       "КурсВзаиморасчетов");
	ДобавитьПКС(СвойстваШапки, "Номер",                                    "Номер");
	ДобавитьПКС(СвойстваШапки, "НомерВходящегоДокумента",                  "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Организация",                              "Организация", , "Справочник_Организации");
	ДобавитьПКС(СвойстваШапки, "Ответственный",                            "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Подразделение",                            "ПодразделениеЗатрат", , "Справочник_Подразделения");
	ДобавитьПКС(СвойстваШапки, "ПроцентКомиссионногоВознаграждения",       "ПроцентКомиссионногоВознаграждения");
	ДобавитьПКС(СвойстваШапки, "СпособРасчетаКомиссионногоВознаграждения", "СпособРасчетаКомиссионногоВознаграждения", , "Перечисление_СпособыРасчетаКомВознагр");
	ДобавитьПКС(СвойстваШапки, "СтавкаНДСВознаграждения",                  "СтавкаНДСВознаграждения", , "Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваШапки, "СтатьяЗатрат",                             "СтатьяЗатрат", , "Справочник_СтатьиЗатрат_Получение");
	ДобавитьПКС(СвойстваШапки, "СуммаВключаетНДС",                         "СуммаВключаетНДС");
	ДобавитьПКС(СвойстваШапки, "СуммаВознаграждения",                      "СуммаВознаграждения");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",                           "Сумма");
	ДобавитьПКС(СвойстваШапки, "УдержатьКомиссионноеВознаграждение",       "УдержатьКомиссионноеВознаграждение");
	ДобавитьПКС(СвойстваШапки, "СчетУчетаЗатрат",                          "", 1);
	ДобавитьПКС(СвойстваШапки, "СчетУчетаЗатратНУ",                        "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Покупатели", "Покупатели");
	ДобавитьПКС(СвойстваТЧ, "ВыставленСФ", "ВыставленСФ");
	ДобавитьПКС(СвойстваТЧ, "КлючСтроки",  "КлючСтроки");
	ДобавитьПКС(СвойстваТЧ, "Покупатель",  "Покупатель", ,"Справочник_Контрагенты");
	ДобавитьПКС(СвойстваТЧ, "СчетФактура", "СчетФактура", ,"Документ_СчетФактураВыданный_Получение");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Товары",     "");
	ДобавитьПКС(СвойстваТЧ, "ЕдиницаИзмерения",           "", 1,"Справочник_ЕдиницыИзмеренияИзСтруктуры");
	ДобавитьПКС(СвойстваТЧ, "Количество",                 "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",               "", 1,"Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "СтавкаНДС",                  "", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "Сумма",                      "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаВознаграждения",        "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаНДС",                   "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаНДСВознаграждения",     "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаНДСПередачи",           "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаПередачи",              "", 1);
	ДобавитьПКС(СвойстваТЧ, "СчетДоходовБУ",              "", 1);
	ДобавитьПКС(СвойстваТЧ, "СчетДоходовНУ",              "", 1);
	ДобавитьПКС(СвойстваТЧ, "СчетРасходовБУ",             "", 1);
	ДобавитьПКС(СвойстваТЧ, "СчетРасходовНУ",             "", 1);
	ДобавитьПКС(СвойстваТЧ, "СчетУчетаБУ",                "", 1);
	ДобавитьПКС(СвойстваТЧ, "СчетУчетаНУ",                "", 1);
	ДобавитьПКС(СвойстваТЧ, "ХарактеристикаНоменклатуры", "", 1,"Справочник_ХарактеристикиИзСтруктуры_Получение");
	ДобавитьПКС(СвойстваТЧ, "Цена",                       "", 1);
	ДобавитьПКС(СвойстваТЧ, "ЦенаПередачи",               "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер,Организация");
КонецПроцедуры

Процедура ПКО_Документ_ОтчетКомиссионера_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.Проведен = Истина;
	Если ДанныеXDTO.Свойство("СчетУчетаРасчетовЗаПосредническиеУслуги") И ЗначениеЗаполнено(ДанныеXDTO.СчетУчетаРасчетовЗаПосредническиеУслуги) Тогда
		ПолученныеДанные.СчетУчетаРасчетовЗаПосредническиеУслуги = ПланыСчетов.Хозрасчетный.НайтиПоКОду(ДанныеXDTO.СчетУчетаРасчетовЗаПосредническиеУслуги);
	КонецЕсли;
	Если ДанныеXDTO.Свойство("СчетУчетаРасчетовСКонтрагентом") И ЗначениеЗаполнено(ДанныеXDTO.СчетУчетаРасчетовСКонтрагентом) Тогда
		ПолученныеДанные.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.НайтиПоКОду(ДанныеXDTO.СчетУчетаРасчетовСКонтрагентом);
	КонецЕсли;
	Если ДанныеXDTO.Свойство("СчетУчетаРасчетовПоАвансам") И ЗначениеЗаполнено(ДанныеXDTO.СчетУчетаРасчетовПоАвансам) Тогда
		ПолученныеДанные.СчетУчетаРасчетовПоАвансамВыданным = ПланыСчетов.Хозрасчетный.НайтиПоКОду(ДанныеXDTO.СчетУчетаРасчетовПоАвансам);
		ПолученныеДанные.СчетУчетаРасчетовПоАвансамПолученным = ПолученныеДанные.СчетУчетаРасчетовПоАвансамВыданным;
	КонецЕсли;
	
	Если ДанныеXDTO.Свойство("СчетЗатрат") И ЗначениеЗаполнено(ДанныеXDTO.СчетЗатрат) Тогда
		ПолученныеДанные.СчетУчетаЗатрат = ПланыСчетов.Хозрасчетный.НайтиПоКОду(ДанныеXDTO.СчетЗатрат);
		ПолученныеДанные.СчетУчетаЗатратНУ = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", ПолученныеДанные.СчетУчетаЗатрат));
	КонецЕсли;
	
	
	// ТЧ Товары
	ПравилаЗаполнения = Новый Соответствие;
	ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
	ПравилаЗаполнения.Вставить("Количество",   "Количество");
	ПравилаЗаполнения.Вставить("Цена",         "Цена");
	ПравилаЗаполнения.Вставить("Сумма",        "Сумма");
	ПравилаЗаполнения.Вставить("СуммаНДС",     "СуммаНДС");
	ПравилаЗаполнения.Вставить("СтавкаНДС",    "СтавкаНДС");
	ПравилаЗаполнения.Вставить("ЦенаПередачи", "ЦенаПередачи");
	ПравилаЗаполнения.Вставить("СуммаПередачи","СуммаПередачи");
	ПравилаЗаполнения.Вставить("СуммаВознаграждения","СуммаВознаграждения");
	ПравилаЗаполнения.Вставить("СуммаНДСВознаграждения","СуммаНДСВознаграждения");
	МассивСтрокТовары = Новый Массив;
	Если ДанныеXDTO.Свойство("Товары")
		И ЗначениеЗаполнено(ДанныеXDTO.Товары) Тогда
		
		Для Каждого Строка Из ДанныеXDTO.Товары Цикл
			
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			
			// Единица изменения в виде структуры
			Если ЗначениеЗаполнено(Строка.ЕдиницаИзмерения) И ТипЗнч(Строка.ЕдиницаИзмерения) = Тип("Структура") Тогда
				СтруктураДанныхСтроки.Вставить("ЕдиницаИзмерения", ПодготовитьСтруктуруДанныхСПодчинением(Строка.ЕдиницаИзмерения, Строка.Номенклатура));
			КонецЕсли;
			// Характеристика в виде структуры
			Если ЗначениеЗаполнено(Строка.Характеристика) И ТипЗнч(Строка.Характеристика) = Тип("Структура") Тогда
				СтруктураДанныхСтроки.Вставить("ХарактеристкаНоменклатуры", ПодготовитьСтруктуруДанныхСПодчинением(Строка.Характеристика, Строка.Номенклатура));
			КонецЕсли;
			Если ЗначениеЗаполнено(Строка.СчетУчета) Тогда
				СчетУчетаБУ = ПланыСчетов.Хозрасчетный.НайтиПоКОду(Строка.СчетУчета);
				СтруктураДанныхСтроки.Вставить("СчетУчетаБУ",СчетУчетаБУ);
				СчетУчетаНУ = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", СчетУчетаБУ));
				СтруктураДанныхСтроки.Вставить("СчетУчетаНУ",СчетУчетаНУ);
			КонецЕсли;
	
			Если ЗначениеЗаполнено(Строка.СчетДоходов) Тогда
				СчетДоходовБУ = ПланыСчетов.Хозрасчетный.НайтиПоКОду(Строка.СчетДоходов);
				СтруктураДанныхСтроки.Вставить("СчетДоходовБУ",СчетДоходовБУ);
				СчетДоходовНУ = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", СчетДоходовБУ));
				СтруктураДанныхСтроки.Вставить("СчетДоходовНУ",СчетДоходовНУ);
			КонецЕсли;
	
			Если ЗначениеЗаполнено(Строка.СчетРасходов) Тогда
				СчетРасходовБУ = ПланыСчетов.Хозрасчетный.НайтиПоКОду(Строка.СчетРасходов);
				СтруктураДанныхСтроки.Вставить("СчетРасходовБУ",СчетРасходовБУ);
				СчетРасходовНУ = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", СчетРасходовБУ));
				СтруктураДанныхСтроки.Вставить("СчетРасходовНУ",СчетРасходовНУ);
			КонецЕсли;
	
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
		
		КонецЦикла;
		
	КонецЕсли;
	ПолученныеДанные.ДополнительныеСвойства.Вставить("Товары", МассивСтрокТовары);
КонецПроцедуры

Процедура ПКО_Документ_ОтчетКомиссионера_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗаполнитьПризнакиОтраженияВУчетах(ПолученныеДанные);
КонецПроцедуры
//  Документ_ОтчетКомитенту_Получение
Процедура ДобавитьПКО_Документ_ОтчетКомитенту_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ОтчетКомитенту_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ОтчетКомитентуОПродажах;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ОтчетКомитенту";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ОтчетКомитенту_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ОтчетКомитенту_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_ОтчетКомитенту";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",                          "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                                     "Дата");
	ДобавитьПКС(СвойстваШапки, "ДоговорКонтрагента",                       "Договор", , "Справочник_Договоры_Получение");
	ДобавитьПКС(СвойстваШапки, "Комментарий",                              "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",                               "Контрагент", , "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваШапки, "КратностьВзаиморасчетов",                  "КратностьВзаиморасчетов");
	ДобавитьПКС(СвойстваШапки, "КурсВзаиморасчетов",                       "КурсВзаиморасчетов");
	ДобавитьПКС(СвойстваШапки, "Номер",                                    "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",                              "Организация", , "Справочник_Организации");
	ДобавитьПКС(СвойстваШапки, "Ответственный",                            "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Подразделение",                            "Подразделение", , "Справочник_Подразделения");
	ДобавитьПКС(СвойстваШапки, "ПроцентКомиссионногоВознаграждения",       "ПроцентКомиссионногоВознаграждения");
	ДобавитьПКС(СвойстваШапки, "СпособРасчетаКомиссионногоВознаграждения", "СпособРасчетаКомиссионногоВознаграждения", , "Перечисление_СпособыРасчетаКомВознагр");
	ДобавитьПКС(СвойстваШапки, "СтавкаНДСВознаграждения",                  "СтавкаНДСВознаграждения", , "Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваШапки, "СуммаВознаграждения",                      "СуммаВознаграждения");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",                           "Сумма");
	ДобавитьПКС(СвойстваШапки, "УдержатьКомиссионноеВознаграждение",       "УдержатьКомиссионноеВознаграждение");
	ДобавитьПКС(СвойстваШапки, "УслугаПоВознаграждению",                   "УслугаПоВознаграждению", , "Справочник_Номенклатура_Получение");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Товары", "");
	ДобавитьПКС(СвойстваТЧ, "ДатаРеализации",             "", 1);
	ДобавитьПКС(СвойстваТЧ, "ЕдиницаИзмерения",           "", 1,"Справочник_ЕдиницыИзмеренияИзСтруктуры");
	ДобавитьПКС(СвойстваТЧ, "Количество",                 "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",               "", 1,"Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "Покупатель",                 "", 1,"Справочник_Контрагенты");
	ДобавитьПКС(СвойстваТЧ, "Сумма",                      "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаВознаграждения",        "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаНДСВознаграждения",     "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаПоступления",           "", 1);
	ДобавитьПКС(СвойстваТЧ, "ХарактеристикаНоменклатуры", "", 1,"Справочник_ХарактеристикиИзСтруктуры_Получение");
	ДобавитьПКС(СвойстваТЧ, "Цена",                       "", 1,"Справочник_ХарактеристикиИзСтруктуры_Получение");
	ДобавитьПКС(СвойстваТЧ, "ЦенаПоступления",            "", 1,"Справочник_ХарактеристикиИзСтруктуры_Получение");

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер,Организация");
КонецПроцедуры

Процедура ПКО_Документ_ОтчетКомитенту_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.Проведен = Истина;
	
	Если ДанныеXDTO.Свойство("СчетДоходов") И ЗначениеЗаполнено(ДанныеXDTO.СчетДоходов) Тогда
		СчетДоходовБУ = ПланыСчетов.Хозрасчетный.НайтиПоКОду(ДанныеXDTO.СчетДоходов);
		ПолученныеДанные.СчетДоходовБУ = СчетДоходовБУ;
		СчетДоходовНУ = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", СчетДоходовБУ));
		ПолученныеДанные.СчетДоходовНУ = СчетДоходовНУ;
	КонецЕсли;
	Если ДанныеXDTO.Свойство("СчетУчетаНДСПоРеализации") И ЗначениеЗаполнено(ДанныеXDTO.СчетУчетаНДСПоРеализации) Тогда
		ПолученныеДанные.СчетУчетаНДСПоРеализации = ПланыСчетов.Хозрасчетный.НайтиПоКОду(ДанныеXDTO.СчетУчетаНДСПоРеализации);
	КонецЕсли;
	
	
	// ТЧ Товары
	ПравилаЗаполнения = Новый Соответствие;
	ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
	ПравилаЗаполнения.Вставить("Количество",   "Количество");
	ПравилаЗаполнения.Вставить("Цена",         "Цена");
	ПравилаЗаполнения.Вставить("Сумма",        "Сумма");
	ПравилаЗаполнения.Вставить("СуммаВознаграждения","СуммаВознаграждения");
	ПравилаЗаполнения.Вставить("СуммаНДСВознаграждения","СуммаНДСВознаграждения");
	ПравилаЗаполнения.Вставить("ЦенаПоступления", "ЦенаПоступления");
	ПравилаЗаполнения.Вставить("СуммаПоступления","СуммаПоступления");
	ПравилаЗаполнения.Вставить("ДатаРеализации","ДатаРеализации");
	ПравилаЗаполнения.Вставить("Покупатель","Покупатель");
	МассивСтрокТовары = Новый Массив;
	Если ДанныеXDTO.Свойство("Товары")
		И ЗначениеЗаполнено(ДанныеXDTO.Товары) Тогда
		
		Для Каждого Строка Из ДанныеXDTO.Товары Цикл
			
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			
			// Единица изменения в виде структуры
			Если ЗначениеЗаполнено(Строка.ЕдиницаИзмерения) И ТипЗнч(Строка.ЕдиницаИзмерения) = Тип("Структура") Тогда
				СтруктураДанныхСтроки.Вставить("ЕдиницаИзмерения", ПодготовитьСтруктуруДанныхСПодчинением(Строка.ЕдиницаИзмерения, Строка.Номенклатура));
			КонецЕсли;
			// Характеристика в виде структуры
			Если ЗначениеЗаполнено(Строка.Характеристика) И ТипЗнч(Строка.Характеристика) = Тип("Структура") Тогда
				СтруктураДанныхСтроки.Вставить("ХарактеристкаНоменклатуры", ПодготовитьСтруктуруДанныхСПодчинением(Строка.Характеристика, Строка.Номенклатура));
			КонецЕсли;
	
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
		
		КонецЦикла;
		
	КонецЕсли;
	ПолученныеДанные.ДополнительныеСвойства.Вставить("Товары", МассивСтрокТовары);
КонецПроцедуры

Процедура ПКО_Документ_ОтчетКомитенту_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗаполнитьПризнакиОтраженияВУчетах(ПолученныеДанные);
КонецПроцедуры
//  Документ_ОтчетОРозничныхПродажах_Получение
Процедура ДобавитьПКО_Документ_ОтчетОРозничныхПродажах_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ОтчетОРозничныхПродажах_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ОтчетОРозничныхПродажах;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ОтчетОРозничныхПродажах";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ОтчетОРозничныхПродажах_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ОтчетОРозничныхПродажах_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_ОтчетОРП";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",                          "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",                   "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",                         "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",                   "Организация", , "Справочник_Организации");
	ДобавитьПКС(СвойстваШапки, "Ответственный",                 "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Подразделение",                 "Подразделение", , "Справочник_Подразделения");
	ДобавитьПКС(СвойстваШапки, "Склад",                         "Склад", , "Справочник_Склады");
	ДобавитьПКС(СвойстваШапки, "СтатьяДвиженияДенежныхСредств", "СтатьяДДС", , "Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваШапки, "СуммаВключаетНДС",              "СуммаВключаетНДС");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",                "Сумма");
	ДобавитьПКС(СвойстваШапки, "ТипЦен",                        "ТипЦен", , "Справочник_ТипыЦенНоменклатуры");
	ДобавитьПКС(СвойстваШапки, "ВидОперации",                   "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Товары", "");
	ДобавитьПКС(СвойстваТЧ, "ЕдиницаИзмерения",           "", 1,"Справочник_ЕдиницыИзмеренияИзСтруктуры");
	ДобавитьПКС(СвойстваТЧ, "Количество",                 "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",               "", 1,"Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "Склад",                      "", 1,"Справочник_Склады");
	ДобавитьПКС(СвойстваТЧ, "СтавкаНДС",                  "", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "Сумма",                      "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаНДС",                   "", 1);
	ДобавитьПКС(СвойстваТЧ, "СчетДоходовБУ",              "", 1);
	ДобавитьПКС(СвойстваТЧ, "СчетДоходовНУ",              "", 1);
	ДобавитьПКС(СвойстваТЧ, "СчетРасходовБУ",             "", 1);
	ДобавитьПКС(СвойстваТЧ, "СчетРасходовНУ",             "", 1);
	ДобавитьПКС(СвойстваТЧ, "СчетУчетаБУ",                "", 1);
	ДобавитьПКС(СвойстваТЧ, "СчетУчетаНУ",                "", 1);
	ДобавитьПКС(СвойстваТЧ, "ХарактеристикаНоменклатуры", "", 1,"Справочник_ХарактеристикиИзСтруктуры_Получение");
	ДобавитьПКС(СвойстваТЧ, "Цена",                       "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер,Организация");
КонецПроцедуры

Процедура ПКО_Документ_ОтчетОРозничныхПродажах_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.Проведен = Истина;
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийОтчетОРозничныхПродажах.ОтчетККМОПродажах;
	
	// ТЧ Товары
	ПравилаЗаполнения = Новый Соответствие;
	ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
	ПравилаЗаполнения.Вставить("Количество",   "Количество");
	ПравилаЗаполнения.Вставить("Цена",         "Цена");
	ПравилаЗаполнения.Вставить("Сумма",        "Сумма");
	ПравилаЗаполнения.Вставить("СуммаНДС",     "СуммаНДС");
	ПравилаЗаполнения.Вставить("СтавкаНДС",    "СтавкаНДС");
	ПравилаЗаполнения.Вставить("ЦенаПередачи", "ЦенаПередачи");
	ПравилаЗаполнения.Вставить("СуммаПередачи","СуммаПередачи");
	ПравилаЗаполнения.Вставить("СуммаВознаграждения","СуммаВознаграждения");
	ПравилаЗаполнения.Вставить("СуммаНДСВознаграждения","СуммаНДСВознаграждения");
	МассивСтрокТовары = Новый Массив;
	Если ДанныеXDTO.Свойство("Товары")
		И ЗначениеЗаполнено(ДанныеXDTO.Товары) Тогда
		
		Для Каждого Строка Из ДанныеXDTO.Товары Цикл
			
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			
			// Единица изменения в виде структуры
			Если ЗначениеЗаполнено(Строка.ЕдиницаИзмерения) И ТипЗнч(Строка.ЕдиницаИзмерения) = Тип("Структура") Тогда
				СтруктураДанныхСтроки.Вставить("ЕдиницаИзмерения", ПодготовитьСтруктуруДанныхСПодчинением(Строка.ЕдиницаИзмерения, Строка.Номенклатура));
			КонецЕсли;
			// Характеристика в виде структуры
			Если ЗначениеЗаполнено(Строка.Характеристика) И ТипЗнч(Строка.Характеристика) = Тип("Структура") Тогда
				СтруктураДанныхСтроки.Вставить("ХарактеристкаНоменклатуры", ПодготовитьСтруктуруДанныхСПодчинением(Строка.Характеристика, Строка.Номенклатура));
			КонецЕсли;
			Если ЗначениеЗаполнено(Строка.СчетУчета) Тогда
				СчетУчетаБУ = ПланыСчетов.Хозрасчетный.НайтиПоКоду(Строка.СчетУчета);
				СтруктураДанныхСтроки.Вставить("СчетУчетаБУ",СчетУчетаБУ);
				СчетУчетаНУ = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", СчетУчетаБУ));
				СтруктураДанныхСтроки.Вставить("СчетУчетаНУ",СчетУчетаНУ);
			КонецЕсли;
	
			Если ЗначениеЗаполнено(Строка.СчетДоходов) Тогда
				СчетДоходовБУ = ПланыСчетов.Хозрасчетный.НайтиПоКоду(Строка.СчетДоходов);
				СтруктураДанныхСтроки.Вставить("СчетДоходовБУ",СчетДоходовБУ);
				СчетДоходовНУ = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", СчетДоходовБУ));
				СтруктураДанныхСтроки.Вставить("СчетДоходовНУ",СчетДоходовНУ);
			КонецЕсли;
	
			Если ЗначениеЗаполнено(Строка.СчетРасходов) Тогда
				СчетРасходовБУ = ПланыСчетов.Хозрасчетный.НайтиПоКоду(Строка.СчетРасходов);
				СтруктураДанныхСтроки.Вставить("СчетРасходовБУ",СчетРасходовБУ);
				СчетРасходовНУ = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", СчетРасходовБУ));
				СтруктураДанныхСтроки.Вставить("СчетРасходовНУ",СчетРасходовНУ);
			КонецЕсли;
			СтруктураДанныхСтроки.Вставить("Склад",ДанныеXDTO.Склад);
	
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
		
		КонецЦикла;
		
	КонецЕсли;
	ПолученныеДанные.ДополнительныеСвойства.Вставить("Товары", МассивСтрокТовары);
КонецПроцедуры

Процедура ПКО_Документ_ОтчетОРозничныхПродажах_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗаполнитьПризнакиОтраженияВУчетах(ПолученныеДанные);
КонецПроцедуры
//  Документ_ПБДСПоПлатежнымКартам_Получение
Процедура ДобавитьПКО_Документ_ПБДСПоПлатежнымКартам_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ПБДСПоПлатежнымКартам_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ПлатежноеПоручениеВходящее;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ПБДСПоПлатежнымКартам";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ПБДСПоПлатежнымКартам_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ПБДСПоПлатежнымКартам_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",               "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                          "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоДокумента",        "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "ДатаОплаты",                    "ДатаВыписки");
	ДобавитьПКС(СвойстваШапки, "Комментарий",                   "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",                    "Контрагент", , "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваШапки, "НазначениеПлатежа",             "НазначениеПлатежа");
	ДобавитьПКС(СвойстваШапки, "Номер",                         "Номер");
	ДобавитьПКС(СвойстваШапки, "НомерВходящегоДокумента",       "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Организация",                   "Организация", , "Справочник_Организации");
	ДобавитьПКС(СвойстваШапки, "Ответственный",                 "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Подразделение",                 "Подразделение", , "Справочник_Подразделения");
	ДобавитьПКС(СвойстваШапки, "СтатьяЗатрат",                  "СтатьяРасходов", , "Справочник_СтатьиЗатрат_Получение");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",                "Сумма");
	ДобавитьПКС(СвойстваШапки, "СуммаУслуг",                    "СуммаУслуг");
	ДобавитьПКС(СвойстваШапки, "СчетКонтрагента",               "БанковскийСчетКонтрагента", , "Справочник_БанковскиеСчета");
	ДобавитьПКС(СвойстваШапки, "СчетОрганизации",               "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчета");
	ДобавитьПКС(СвойстваШапки, "ВидОперации",                   "", 1);
	ДобавитьПКС(СвойстваШапки, "Оплачено",                      "", 1);
	ДобавитьПКС(СвойстваШапки, "СтатьяДвиженияДенежныхСредств", "", 1, "Справочник_СтатьиДДС");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "РасшифровкаПлатежа", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "КратностьВзаиморасчетов",       "КратностьВзаиморасчетов");
	ДобавитьПКС(СвойстваТЧ, "КурсВзаиморасчетов",            "КурсВзаиморасчетов");
	ДобавитьПКС(СвойстваТЧ, "СтатьяДвиженияДенежныхСредств", "СтатьяДДС", ,"Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "СуммаВзаиморасчетов",           "СуммаВзаиморасчетов");
	ДобавитьПКС(СвойстваТЧ, "СуммаПлатежа",                  "Сумма");

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер,Организация");
КонецПроцедуры

Процедура ПКО_Документ_ПБДСПоПлатежнымКартам_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.Оплачено = Истина;
	ПолученныеДанные.Проведен = Истина;
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПоступлениеОплатыПоПлатежнымКартам;
	Если ДанныеXDTO.Свойство("СчетРасходов") Тогда
		СчетРасходов = ПланыСчетов.Хозрасчетный.НайтиПоКоду(ДанныеXDTO.СчетРасходов);
		ПолученныеДанные.СчетУчетаРасчетовСКонтрагентом = СчетРасходов;
		ПолученныеДанные.СчетУчетаРасчетовСКонтрагентомНУ = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", СчетРасходов));
	КонецЕсли;
	Если ДанныеXDTO.Свойство("РасшифровкаПлатежа") Тогда
		Для Каждого СтрРасшифровка Из ДанныеXDTO.РасшифровкаПлатежа Цикл
			Если ЗначениеЗаполнено(СтрРасшифровка.СтатьяДДС) 
				И НЕ ПолученныеДанные.ДополнительныеСвойства.Свойство("СтатьяДвиженияДенежныхСредств") Тогда
				ПолученныеДанные.ДополнительныеСвойства.Вставить("СтатьяДвиженияДенежныхСредств", СтрРасшифровка.СтатьяДДС);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Документ_ПБДСПоПлатежнымКартам_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗаполнитьПризнакиОтраженияВУчетахБДС(ПолученныеДанные);
КонецПроцедуры
//  Документ_ПБДСПрочееПоступление_Получение
Процедура ДобавитьПКО_Документ_ПБДСПрочееПоступление_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ПБДСПрочееПоступление_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ПлатежноеПоручениеВходящее;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ПБДСПрочееПоступление";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ПБДСПрочееПоступление_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ПБДСПрочееПоступление_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",               "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                          "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоДокумента",        "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "ДатаОплаты",                    "ДатаВыписки");
	ДобавитьПКС(СвойстваШапки, "Комментарий",                   "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",                    "Контрагент", , "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваШапки, "НазначениеПлатежа",             "НазначениеПлатежа");
	ДобавитьПКС(СвойстваШапки, "Номер",                         "Номер");
	ДобавитьПКС(СвойстваШапки, "НомерВходящегоДокумента",       "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Организация",                   "Организация", , "Справочник_Организации");
	ДобавитьПКС(СвойстваШапки, "Ответственный",                 "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Подразделение",                 "Подразделение", , "Справочник_Подразделения");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",                "Сумма");
	ДобавитьПКС(СвойстваШапки, "СчетКонтрагента",               "БанковскийСчетКонтрагента", , "Справочник_БанковскиеСчета");
	ДобавитьПКС(СвойстваШапки, "СчетОрганизации",               "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчета");
	ДобавитьПКС(СвойстваШапки, "ВидОперации",                   "", 1);
	ДобавитьПКС(СвойстваШапки, "Оплачено",                      "", 1);
	ДобавитьПКС(СвойстваШапки, "СтатьяДвиженияДенежныхСредств", "", 1, "Справочник_СтатьиДДС");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "РасшифровкаПлатежа", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "СтатьяДвиженияДенежныхСредств", "СтатьяДДС", ,"Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "СуммаПлатежа",                  "Сумма");

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер,Организация");
КонецПроцедуры

Процедура ПКО_Документ_ПБДСПрочееПоступление_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.Оплачено = Истина;
	ПолученныеДанные.Проведен = Истина;
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочееПоступлениеБезналичныхДенежныхСредств;
	
	Если ДанныеXDTO.Свойство("РасшифровкаПлатежа") Тогда
		ИндексСтроки = 0;
		Для Каждого СтрРасшифровка Из ДанныеXDTO.РасшифровкаПлатежа Цикл
			Если ЗначениеЗаполнено(СтрРасшифровка.СтатьяДДС) 
				И НЕ ПолученныеДанные.ДополнительныеСвойства.Свойство("СтатьяДвиженияДенежныхСредств") Тогда
				ПолученныеДанные.ДополнительныеСвойства.Вставить("СтатьяДвиженияДенежныхСредств", СтрРасшифровка.СтатьяДДС);
			КонецЕсли;
			СтрокаПД = ПолученныеДанные.РасшифровкаПлатежа[ИндексСтроки];
			Если ЗначениеЗаполнено(СтрРасшифровка.СчетУчетаРасчетов) Тогда
				СтрокаПД.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.НайтиПоКоду(СтрРасшифровка.СчетУчетаРасчетов);
			КонецЕсли;
			
			ИндексСтроки = ИндексСтроки + 1;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Документ_ПБДСПрочееПоступление_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗаполнитьПризнакиОтраженияВУчетахБДС(ПолученныеДанные);
КонецПроцедуры
//  Документ_ПБДСПрочиеДоходы_Получение
Процедура ДобавитьПКО_Документ_ПБДСПрочиеДоходы_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ПБДСПрочиеДоходы_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ПлатежноеПоручениеВходящее;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ПБДСПрочиеДоходы";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ПБДСПрочиеДоходы_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ПБДСПрочиеДоходы_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",               "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                          "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоДокумента",        "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "ДатаОплаты",                    "ДатаВыписки");
	ДобавитьПКС(СвойстваШапки, "Комментарий",                   "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",                    "Контрагент", , "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваШапки, "НазначениеПлатежа",             "НазначениеПлатежа");
	ДобавитьПКС(СвойстваШапки, "Номер",                         "Номер");
	ДобавитьПКС(СвойстваШапки, "НомерВходящегоДокумента",       "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Организация",                   "Организация", , "Справочник_Организации");
	ДобавитьПКС(СвойстваШапки, "Ответственный",                 "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Подразделение",                 "Подразделение", , "Справочник_Подразделения");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеЗатраты",          "Подразделение", , "Справочник_Подразделения");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",                "Сумма");
	ДобавитьПКС(СвойстваШапки, "СчетКонтрагента",               "БанковскийСчетКонтрагента", , "Справочник_БанковскиеСчета");
	ДобавитьПКС(СвойстваШапки, "СчетОрганизации",               "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчета");
	ДобавитьПКС(СвойстваШапки, "ВидОперации",                   "", 1);
	ДобавитьПКС(СвойстваШапки, "Оплачено",                      "", 1);
	ДобавитьПКС(СвойстваШапки, "СтатьяДвиженияДенежныхСредств", "", 1, "Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваШапки, "СтатьяЗатрат",                  "", 1, "Справочник_СтатьиЗатрат_Получение");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "РасшифровкаПлатежа", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "СтатьяДвиженияДенежныхСредств", "СтатьяДДС", ,"Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "СуммаПлатежа",                  "Сумма");

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер,Организация");
КонецПроцедуры

Процедура ПКО_Документ_ПБДСПрочиеДоходы_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.Оплачено = Истина;
	ПолученныеДанные.Проведен = Истина;
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочееПоступлениеБезналичныхДенежныхСредств;
	
	Если ДанныеXDTO.Свойство("РасшифровкаПлатежа") Тогда
		Для Каждого СтрРасшифровка Из ДанныеXDTO.РасшифровкаПлатежа Цикл
			Если ЗначениеЗаполнено(СтрРасшифровка.СтатьяДДС) 
				И НЕ ПолученныеДанные.ДополнительныеСвойства.Свойство("СтатьяДвиженияДенежныхСредств") Тогда
				ПолученныеДанные.ДополнительныеСвойства.Вставить("СтатьяДвиженияДенежныхСредств", СтрРасшифровка.СтатьяДДС);
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрРасшифровка.СчетДоходов) Тогда
				СчетДоходов = ПланыСчетов.Хозрасчетный.НайтиПоКоду(СтрРасшифровка.СчетДоходов);
	
				ПолученныеДанные.СчетУчетаРасчетовСКонтрагентом = СчетДоходов;
				ПолученныеДанные.СчетУчетаРасчетовСКонтрагентомНУ = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", СчетДоходов));
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрРасшифровка.СтатьяДоходов) Тогда
				ПолученныеДанные.ДополнительныеСвойства.Вставить("СтатьяЗатрат", СтрРасшифровка.СтатьяДоходов);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Документ_ПБДСПрочиеДоходы_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗаполнитьПризнакиОтраженияВУчетахБДС(ПолученныеДанные);
КонецПроцедуры
//  Документ_ПБДСРасчетыСКонтрагентами_Получение
Процедура ДобавитьПКО_Документ_ПБДСРасчетыСКонтрагентами_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ПБДСРасчетыСКонтрагентами_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ПлатежноеПоручениеВходящее;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ПБДСРасчетыСКонтрагентами";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ПБДСРасчетыСКонтрагентами_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ПБДСРасчетыСКонтрагентами_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",               "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                          "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоДокумента",        "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "ДатаОплаты",                    "ДатаВыписки");
	ДобавитьПКС(СвойстваШапки, "Комментарий",                   "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",                    "Контрагент", , "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваШапки, "НазначениеПлатежа",             "НазначениеПлатежа");
	ДобавитьПКС(СвойстваШапки, "Номер",                         "Номер");
	ДобавитьПКС(СвойстваШапки, "НомерВходящегоДокумента",       "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Организация",                   "Организация", , "Справочник_Организации");
	ДобавитьПКС(СвойстваШапки, "Ответственный",                 "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Подразделение",                 "Подразделение", , "Справочник_Подразделения");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",                "Сумма");
	ДобавитьПКС(СвойстваШапки, "СчетКонтрагента",               "БанковскийСчетКонтрагента", , "Справочник_БанковскиеСчета");
	ДобавитьПКС(СвойстваШапки, "СчетОрганизации",               "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчета");
	ДобавитьПКС(СвойстваШапки, "ВидОперации",                   "", 1);
	ДобавитьПКС(СвойстваШапки, "Оплачено",                      "", 1);
	ДобавитьПКС(СвойстваШапки, "СтатьяДвиженияДенежныхСредств", "", 1, "Справочник_СтатьиДДС");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "РасшифровкаПлатежа", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "ДоговорКонтрагента",            "Договор", ,"Справочник_Договоры_Получение");
	ДобавитьПКС(СвойстваТЧ, "КратностьВзаиморасчетов",       "КратностьВзаиморасчетов");
	ДобавитьПКС(СвойстваТЧ, "КурсВзаиморасчетов",            "КурсВзаиморасчетов");
	ДобавитьПКС(СвойстваТЧ, "СтавкаНДС",                     "СтавкаНДС", ,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "СтатьяДвиженияДенежныхСредств", "СтатьяДДС", ,"Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "СуммаВзаиморасчетов",           "СуммаВзаиморасчетов");
	ДобавитьПКС(СвойстваТЧ, "СуммаНДС",                      "СуммаНДС");
	ДобавитьПКС(СвойстваТЧ, "СуммаПлатежа",                  "Сумма");

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер,Организация");
КонецПроцедуры

Процедура ПКО_Документ_ПБДСРасчетыСКонтрагентами_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.Оплачено = Истина;
	ПолученныеДанные.Проведен = Истина;
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочиеРасчетыСКонтрагентами;
	ВидРасчетов = "";
	ДанныеXDTO.Свойство("ВидРасчетов", ВидРасчетов);
	Если ЗначениеЗаполнено(ВидРасчетов) Тогда
		ВидРасчетовСтрокой = ВидРасчетов.Значение;
		Если ВидРасчетовСтрокой = "СПоставщиком" Тогда
			ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратДенежныхСредствПоставщиком;
		ИначеЕсли ВидРасчетовСтрокой = "СПокупателем" Тогда
			ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаПокупателя;
		ИначеЕсли ВидРасчетовСтрокой = "КредитыИЗаймы" Тогда
			ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.РасчетыПоКредитамИЗаймам;
		КонецЕсли;
	КонецЕсли;
	
	Если ДанныеXDTO.Свойство("РасшифровкаПлатежа") Тогда
		ИндексСтроки = 0;
		Для Каждого СтрРасшифровка Из ДанныеXDTO.РасшифровкаПлатежа Цикл
			Если ЗначениеЗаполнено(СтрРасшифровка.СтатьяДДС) 
				И НЕ ПолученныеДанные.ДополнительныеСвойства.Свойство("СтатьяДвиженияДенежныхСредств") Тогда
				ПолученныеДанные.ДополнительныеСвойства.Вставить("СтатьяДвиженияДенежныхСредств", СтрРасшифровка.СтатьяДДС);
			КонецЕсли;
			СтрокаПД = ПолученныеДанные.РасшифровкаПлатежа[ИндексСтроки];
			Если ЗначениеЗаполнено(СтрРасшифровка.СчетУчетаРасчетовСКонтрагентом) Тогда
				СтрокаПД.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.НайтиПоКоду(СтрРасшифровка.СчетУчетаРасчетовСКонтрагентом);
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрРасшифровка.СчетУчетаРасчетовПоАвансам) Тогда
				СтрокаПД.СчетУчетаРасчетовПоАвансам = ПланыСчетов.Хозрасчетный.НайтиПоКоду(СтрРасшифровка.СчетУчетаРасчетовПоАвансам);
			КонецЕсли; 
			
			Если НЕ ЗначениеЗаполнено(СтрокаПД.СчетУчетаРасчетовСКонтрагентом) ИЛИ НЕ ЗначениеЗаполнено(СтрокаПД.СчетУчетаРасчетовПоАвансам) Тогда
				СчетаУчета = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(ПолученныеДанные.Организация, ПолученныеДанные.Контрагент, СтрокаПД.ДоговорКонтрагента);
				Если НЕ ЗначениеЗаполнено(СтрокаПД.СчетУчетаРасчетовСКонтрагентом) Тогда
					СтрокаПД.СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетов;
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(СтрокаПД.СчетУчетаРасчетовПоАвансам) Тогда
					СтрокаПД.СчетУчетаРасчетовПоАвансам		= СчетаУчета.СчетАвансов;
				КонецЕсли;
			КонецЕсли;
			ИндексСтроки = ИндексСтроки + 1;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Документ_ПБДСРасчетыСКонтрагентами_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗаполнитьПризнакиОтраженияВУчетахБДС(ПолученныеДанные);
КонецПроцедуры
//  Документ_ПередачаМатериаловВПроизводство_Получение
Процедура ДобавитьПКО_Документ_ПередачаМатериаловВПроизводство_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ПередачаМатериаловВПроизводство_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ТребованиеНакладная;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ПередачаМатериаловВПроизводство";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ПередачаМатериаловВПроизводство_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ПередачаМатериаловВПроизводство_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_ПередачаВПроизводство";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",          "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",   "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",         "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",   "Организация", , "Справочник_Организации");
	ДобавитьПКС(СвойстваШапки, "Ответственный", "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Подразделение", "Подразделение", , "Справочник_Подразделения");
	ДобавитьПКС(СвойстваШапки, "Склад",         "Склад", , "Справочник_Склады");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Материалы", "");
	ДобавитьПКС(СвойстваТЧ, "ЕдиницаИзмерения",           "", 1,"Справочник_ЕдиницыИзмеренияИзСтруктуры");
	ДобавитьПКС(СвойстваТЧ, "Количество",                 "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",               "", 1,"Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "Склад",                      "", 1,"Справочник_Склады");
	ДобавитьПКС(СвойстваТЧ, "СтатьяЗатрат",               "", 1,"Справочник_СтатьиЗатрат_Получение");
	ДобавитьПКС(СвойстваТЧ, "Счет",                       "", 1);
	ДобавитьПКС(СвойстваТЧ, "СчетЗатрат",                 "", 1);
	ДобавитьПКС(СвойстваТЧ, "СчетЗатратНУ",               "", 1);
	ДобавитьПКС(СвойстваТЧ, "СчетНУ",                     "", 1);
	ДобавитьПКС(СвойстваТЧ, "ХарактеристикаНоменклатуры", "", 1,"Справочник_ХарактеристикиИзСтруктуры_Получение");

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер,Организация");
КонецПроцедуры

Процедура ПКО_Документ_ПередачаМатериаловВПроизводство_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.Проведен = Истина;
	
	ПравилаЗаполнения = Новый Соответствие;
	ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
	ПравилаЗаполнения.Вставить("Количество",   "Количество");
	ПравилаЗаполнения.Вставить("СтатьяЗатрат", "СтатьяЗатрат");
	
	МассивСтрокТовары = Новый Массив;
	Если ДанныеXDTO.Свойство("Товары")
		И ЗначениеЗаполнено(ДанныеXDTO.Товары) Тогда
		
		Для Каждого Строка Из ДанныеXDTO.Товары Цикл
			
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			
			// Единица изменения в виде структуры
			Если ЗначениеЗаполнено(Строка.ЕдиницаИзмерения) И ТипЗнч(Строка.ЕдиницаИзмерения) = Тип("Структура") Тогда
				СтруктураДанныхСтроки.Вставить("ЕдиницаИзмерения", ПодготовитьСтруктуруДанныхСПодчинением(Строка.ЕдиницаИзмерения, Строка.Номенклатура));
			КонецЕсли;
			// Характеристика в виде структуры
			Если ЗначениеЗаполнено(Строка.Характеристика) И ТипЗнч(Строка.Характеристика) = Тип("Структура") Тогда
				СтруктураДанныхСтроки.Вставить("ХарактеристкаНоменклатуры", ПодготовитьСтруктуруДанныхСПодчинением(Строка.Характеристика, Строка.Номенклатура));
			КонецЕсли;
			Если ЗначениеЗаполнено(Строка.СчетУчета) Тогда
				СчетУчета = ПланыСчетов.Хозрасчетный.НайтиПоКоду(Строка.СчетУчета);
				СтруктураДанныхСтроки.Вставить("Счет", СчетУчета);
				СтруктураДанныхСтроки.Вставить("СчетНУ", БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", СчетУчета)));
			КонецЕсли;
			Если ЗначениеЗаполнено(Строка.СчетЗатрат) Тогда
				СчетЗатрат = ПланыСчетов.Хозрасчетный.НайтиПоКоду(Строка.СчетЗатрат);
				СтруктураДанныхСтроки.Вставить("СчетЗатрат", СчетЗатрат);
				СтруктураДанныхСтроки.Вставить("СчетЗатратНУ", БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", СчетЗатрат)));
			КонецЕсли;
			СтруктураДанныхСтроки.Вставить("Склад", ДанныеXDTO.Склад);
	
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
		
		КонецЦикла;
		
	КонецЕсли;
	ПолученныеДанные.ДополнительныеСвойства.Вставить("Материалы", МассивСтрокТовары);
КонецПроцедуры

Процедура ПКО_Документ_ПередачаМатериаловВПроизводство_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗаполнитьПризнакиОтраженияВУчетах(ПолученныеДанные);
КонецПроцедуры
//  Документ_ПеремещениеТоваров_Получение
Процедура ДобавитьПКО_Документ_ПеремещениеТоваров_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ПеремещениеТоваров_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ПеремещениеТоваров;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ПеремещениеТоваров";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ПеремещениеТоваров_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ПеремещениеТоваров_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_ПеремещениеТоваров";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",             "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",      "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",            "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",      "Организация", , "Справочник_Организации");
	ДобавитьПКС(СвойстваШапки, "Ответственный",    "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "СкладОтправитель", "СкладОтправитель", , "Справочник_Склады");
	ДобавитьПКС(СвойстваШапки, "СкладПолучатель",  "СкладПолучатель", , "Справочник_Склады");
	ДобавитьПКС(СвойстваШапки, "ВидОперации",      "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Товары", "");
	ДобавитьПКС(СвойстваТЧ, "ЕдиницаИзмерения",           "", 1,"Справочник_ЕдиницыИзмеренияИзСтруктуры");
	ДобавитьПКС(СвойстваТЧ, "Количество",                 "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",               "", 1,"Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "ХарактеристикаНоменклатуры", "", 1,"Справочник_ХарактеристикиИзСтруктуры_Получение");

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер,Организация");
КонецПроцедуры

Процедура ПКО_Документ_ПеремещениеТоваров_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПеремещениеТоваров.ТоварыПродукция;
	ПолученныеДанные.Проведен = Истина;
	ПолученныеДанные.НДСвСтоимостиТоваров = Перечисления.ДействиеНДСВСтоимостиТоваров.НеИзменять;
	
	ПравилаЗаполнения = Новый Соответствие;
	ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
	ПравилаЗаполнения.Вставить("Количество",   "Количество");
	
	МассивСтрокТовары = Новый Массив;
	Если ДанныеXDTO.Свойство("Товары")
		И ЗначениеЗаполнено(ДанныеXDTO.Товары) Тогда
		
		Для Каждого Строка Из ДанныеXDTO.Товары Цикл
			
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			
			// Единица изменения в виде структуры
			Если ЗначениеЗаполнено(Строка.ЕдиницаИзмерения) И ТипЗнч(Строка.ЕдиницаИзмерения) = Тип("Структура") Тогда
				СтруктураДанныхСтроки.Вставить("ЕдиницаИзмерения", ПодготовитьСтруктуруДанныхСПодчинением(Строка.ЕдиницаИзмерения, Строка.Номенклатура));
			КонецЕсли;
			// Характеристика в виде структуры
			Если ЗначениеЗаполнено(Строка.Характеристика) И ТипЗнч(Строка.Характеристика) = Тип("Структура") Тогда
				СтруктураДанныхСтроки.Вставить("ХарактеристкаНоменклатуры", ПодготовитьСтруктуруДанныхСПодчинением(Строка.Характеристика, Строка.Номенклатура));
			КонецЕсли;
	
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
		
		КонецЦикла;
		
	КонецЕсли;
	ПолученныеДанные.ДополнительныеСвойства.Вставить("Товары", МассивСтрокТовары);
КонецПроцедуры

Процедура ПКО_Документ_ПеремещениеТоваров_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗаполнитьПризнакиОтраженияВУчетах(ПолученныеДанные);
	ЗаполнитьКолонкиТабличнойЧасти(ПолученныеДанные, "Товары", "Качество, Коэффициент");
КонецПроцедуры
//  Документ_ПКОПолучениеНаличныхВБанке_Получение
Процедура ДобавитьПКО_Документ_ПКОПолучениеНаличныхВБанке_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ПКОПолучениеНаличныхВБанке_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ПриходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ПКОПолучениеНаличныхВБанке";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ПКОПолучениеНаличныхВБанке_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ПКОПолучениеНаличныхВБанке_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_ЗаполнитьКассуВКассовомОрдере";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента", "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",            "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",     "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",      "Контрагент", , "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваШапки, "Номер",           "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",     "Организация", , "Справочник_Организации");
	ДобавитьПКС(СвойстваШапки, "Ответственный",   "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Приложение",      "Приложение");
	ДобавитьПКС(СвойстваШапки, "ПринятоОт",       "ПринятоОт");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",  "Сумма");
	ДобавитьПКС(СвойстваШапки, "СчетОрганизации", "БанковскийСчет", , "Справочник_БанковскиеСчета");
	ДобавитьПКС(СвойстваШапки, "ВидОперации",     "", 1);
	ДобавитьПКС(СвойстваШапки, "Оплачено",        "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер,Организация");
КонецПроцедуры

Процедура ПКО_Документ_ПКОПолучениеНаличныхВБанке_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.Оплачено = Истина;
	ПолученныеДанные.Проведен = Истина;
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПКО.ПолучениеНаличныхДенежныхСредствВБанке;
КонецПроцедуры

Процедура ПКО_Документ_ПКОПолучениеНаличныхВБанке_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗаполнитьПризнакиОтраженияВУчетах(ПолученныеДанные);
КонецПроцедуры
//  Документ_ПКОПрочееПоступление_Получение
Процедура ДобавитьПКО_Документ_ПКОПрочееПоступление_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ПКОПрочееПоступление_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ПриходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ПКОПрочееПоступление";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ПКОПрочееПоступление_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ПКОПрочееПоступление_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_ЗаполнитьКассуВКассовомОрдере";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",               "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                          "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",                   "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",                    "Контрагент", , "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваШапки, "Номер",                         "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",                   "Организация", , "Справочник_Организации");
	ДобавитьПКС(СвойстваШапки, "Ответственный",                 "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Приложение",                    "Приложение");
	ДобавитьПКС(СвойстваШапки, "ПринятоОт",                     "ПринятоОт");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",                "Сумма");
	ДобавитьПКС(СвойстваШапки, "ВидОперации",                   "", 1);
	ДобавитьПКС(СвойстваШапки, "Оплачено",                      "", 1);
	ДобавитьПКС(СвойстваШапки, "СтатьяДвиженияДенежныхСредств", "", 1, "Справочник_СтатьиДДС");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "РасшифровкаПлатежа", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "СтатьяДвиженияДенежныхСредств", "СтатьяДДС", ,"Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "СуммаПлатежа",                  "Сумма");

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер,Организация");
КонецПроцедуры

Процедура ПКО_Документ_ПКОПрочееПоступление_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.Оплачено = Истина;
	ПолученныеДанные.Проведен = Истина;
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствПрочее;
	
	Если ДанныеXDTO.Свойство("РасшифровкаПлатежа") Тогда
		ИндексСтроки = 0;
		Для Каждого СтрРасшифровка Из ДанныеXDTO.РасшифровкаПлатежа Цикл
			Если ЗначениеЗаполнено(СтрРасшифровка.СтатьяДДС) 
				И НЕ ПолученныеДанные.ДополнительныеСвойства.Свойство("СтатьяДвиженияДенежныхСредств") Тогда
				ПолученныеДанные.ДополнительныеСвойства.Вставить("СтатьяДвиженияДенежныхСредств", СтрРасшифровка.СтатьяДДС);
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрРасшифровка.СчетУчетаРасчетов) Тогда
				ПолученныеДанные.РасшифровкаПлатежа[ИндексСтроки].СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.НайтиПоКоду(СтрРасшифровка.СчетУчетаРасчетов);
			КонецЕсли;
			ИндексСтроки = ИндексСтроки + 1;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Документ_ПКОПрочееПоступление_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗаполнитьПризнакиОтраженияВУчетах(ПолученныеДанные);
КонецПроцедуры
//  Документ_ПКОРасчетыСКонтрагентами_Получение
Процедура ДобавитьПКО_Документ_ПКОРасчетыСКонтрагентами_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ПКОРасчетыСКонтрагентами_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ПриходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ПКОРасчетыСКонтрагентами";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ПКОРасчетыСКонтрагентами_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ПКОРасчетыСКонтрагентами_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_ЗаполнитьКассуВКассовомОрдере";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",               "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                          "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",                   "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",                    "Контрагент", , "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваШапки, "Номер",                         "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",                   "Организация", , "Справочник_Организации");
	ДобавитьПКС(СвойстваШапки, "Ответственный",                 "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Приложение",                    "Приложение");
	ДобавитьПКС(СвойстваШапки, "ПринятоОт",                     "ПринятоОт");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",                "Сумма");
	ДобавитьПКС(СвойстваШапки, "ВидОперации",                   "", 1);
	ДобавитьПКС(СвойстваШапки, "Оплачено",                      "", 1);
	ДобавитьПКС(СвойстваШапки, "СтатьяДвиженияДенежныхСредств", "", 1, "Справочник_СтатьиДДС");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "РасшифровкаПлатежа", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "ДоговорКонтрагента",            "Договор", ,"Справочник_Договоры_Получение");
	ДобавитьПКС(СвойстваТЧ, "КратностьВзаиморасчетов",       "КратностьВзаиморасчетов");
	ДобавитьПКС(СвойстваТЧ, "КурсВзаиморасчетов",            "КурсВзаиморасчетов");
	ДобавитьПКС(СвойстваТЧ, "СтавкаНДС",                     "СтавкаНДС", ,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "СтатьяДвиженияДенежныхСредств", "СтатьяДДС", ,"Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "СуммаВзаиморасчетов",           "СуммаВзаиморасчетов");
	ДобавитьПКС(СвойстваТЧ, "СуммаПлатежа",                  "Сумма");

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер,Организация");
КонецПроцедуры

Процедура ПКО_Документ_ПКОРасчетыСКонтрагентами_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.Оплачено = Истина;
	ПолученныеДанные.Проведен = Истина;
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПКО.ПрочиеРасчетыСКонтрагентами;
	ВидРасчетов = "";
	ДанныеXDTO.Свойство("ВидРасчетов", ВидРасчетов);
	Если ЗначениеЗаполнено(ВидРасчетов) Тогда
		ВидРасчетовСтрокой = ВидРасчетов.Значение;
		Если ВидРасчетовСтрокой = "СПоставщиком" Тогда
			ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПоставщиком;
		ИначеЕсли ВидРасчетовСтрокой = "СПокупателем" Тогда
			ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПКО.ОплатаПокупателя;
		ИначеЕсли ВидРасчетовСтрокой = "КредитыИЗаймы" Тогда
			ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПКО.РасчетыПоКредитамИЗаймамСКонтрагентами;
		КонецЕсли;
	КонецЕсли;
	
	Если ДанныеXDTO.Свойство("РасшифровкаПлатежа") Тогда
		ИндексСтроки = 0;
		Для Каждого СтрРасшифровка Из ДанныеXDTO.РасшифровкаПлатежа Цикл
			Если ЗначениеЗаполнено(СтрРасшифровка.СтатьяДДС) 
				И НЕ ПолученныеДанные.ДополнительныеСвойства.Свойство("СтатьяДвиженияДенежныхСредств") Тогда
				ПолученныеДанные.ДополнительныеСвойства.Вставить("СтатьяДвиженияДенежныхСредств", СтрРасшифровка.СтатьяДДС);
			КонецЕсли;
			СтрокаПД = ПолученныеДанные.РасшифровкаПлатежа[ИндексСтроки];
			Если ЗначениеЗаполнено(СтрРасшифровка.СчетУчетаРасчетовСКонтрагентом) Тогда
				СтрокаПД.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.НайтиПоКоду(СтрРасшифровка.СчетУчетаРасчетовСКонтрагентом);
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрРасшифровка.СчетУчетаРасчетовПоАвансам) Тогда
				СтрокаПД.СчетУчетаРасчетовПоАвансам = ПланыСчетов.Хозрасчетный.НайтиПоКоду(СтрРасшифровка.СчетУчетаРасчетовПоАвансам);
			КонецЕсли; 
			
			Если НЕ ЗначениеЗаполнено(СтрокаПД.СчетУчетаРасчетовСКонтрагентом) ИЛИ НЕ ЗначениеЗаполнено(СтрокаПД.СчетУчетаРасчетовПоАвансам) Тогда
				СчетаУчета = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(ПолученныеДанные.Организация, ПолученныеДанные.Контрагент, СтрокаПД.ДоговорКонтрагента);
				Если НЕ ЗначениеЗаполнено(СтрокаПД.СчетУчетаРасчетовСКонтрагентом) Тогда
					СтрокаПД.СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетов;
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(СтрокаПД.СчетУчетаРасчетовПоАвансам) Тогда
					СтрокаПД.СчетУчетаРасчетовПоАвансам		= СчетаУчета.СчетАвансов;
				КонецЕсли;
			КонецЕсли;
			ИндексСтроки = ИндексСтроки + 1;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Документ_ПКОРасчетыСКонтрагентами_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗаполнитьПризнакиОтраженияВУчетах(ПолученныеДанные);
КонецПроцедуры
//  Документ_ПКОРасчетыССотрудниками_Получение
Процедура ДобавитьПКО_Документ_ПКОРасчетыССотрудниками_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ПКОРасчетыССотрудниками_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ПриходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ПКОРасчетыССотрудниками";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ПКОРасчетыССотрудниками_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ПКОРасчетыССотрудниками_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_ЗаполнитьКассуВКассовомОрдере";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаВзаиморасчетовПодотчетника", "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",                  "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                             "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",                      "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",                       "Сотрудник", , "Справочник_ФизическиеЛица_Получение");
	ДобавитьПКС(СвойстваШапки, "Номер",                            "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",                      "Организация", , "Справочник_Организации");
	ДобавитьПКС(СвойстваШапки, "Ответственный",                    "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Приложение",                       "Приложение");
	ДобавитьПКС(СвойстваШапки, "ПринятоОт",                        "ПринятоОт");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",                   "Сумма");
	ДобавитьПКС(СвойстваШапки, "ВидОперации",                      "", 1);
	ДобавитьПКС(СвойстваШапки, "Оплачено",                         "", 1);
	ДобавитьПКС(СвойстваШапки, "СтатьяДвиженияДенежныхСредств",    "", 1, "Справочник_СтатьиДДС");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "РасшифровкаПлатежа", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "СтатьяДвиженияДенежныхСредств", "СтатьяДДС", ,"Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "СуммаВзаиморасчетов",           "Сумма");
	ДобавитьПКС(СвойстваТЧ, "СуммаПлатежа",                  "Сумма");

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер,Организация");
КонецПроцедуры

Процедура ПКО_Документ_ПКОРасчетыССотрудниками_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.Оплачено = Истина;
	ПолученныеДанные.Проведен = Истина;
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствРаботником;
	ВидРасчетов = "";
	ДанныеXDTO.Свойство("ВидРасчетов", ВидРасчетов);
	Если ЗначениеЗаполнено(ВидРасчетов) Тогда
		ВидРасчетовСтрокой = ВидРасчетов.Значение;
		Если ВидРасчетовСтрокой = "Подотчет" Тогда
			ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПодотчетником;
		ИначеЕсли ВидРасчетовСтрокой = "Займы" Тогда
			ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПКО.РасчетыПоКредитамИЗаймамСРаботниками;
		КонецЕсли;
	КонецЕсли;
	
	Если ДанныеXDTO.Свойство("РасшифровкаПлатежа") Тогда
		ИндексСтроки = 0;
		Для Каждого СтрРасшифровка Из ДанныеXDTO.РасшифровкаПлатежа Цикл
			Если ЗначениеЗаполнено(СтрРасшифровка.СтатьяДДС) 
				И НЕ ПолученныеДанные.ДополнительныеСвойства.Свойство("СтатьяДвиженияДенежныхСредств") Тогда
				ПолученныеДанные.ДополнительныеСвойства.Вставить("СтатьяДвиженияДенежныхСредств", СтрРасшифровка.СтатьяДДС);
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрРасшифровка.СчетУчетаРасчетов) Тогда
				ПолученныеДанные.РасшифровкаПлатежа[ИндексСтроки].СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.НайтиПоКоду(СтрРасшифровка.СчетУчетаРасчетов);
			КонецЕсли;
			ИндексСтроки = ИндексСтроки + 1;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Документ_ПКОРасчетыССотрудниками_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗаполнитьПризнакиОтраженияВУчетах(ПолученныеДанные);
КонецПроцедуры
//  Документ_ПКОРозничнаяВыручка_Получение
Процедура ДобавитьПКО_Документ_ПКОРозничнаяВыручка_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ПКОРозничнаяВыручка_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ПриходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ПКОРозничнаяВыручка";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ПКОРозничнаяВыручка_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ПКОРозничнаяВыручка_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_ЗаполнитьКассуВКассовомОрдере";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента", "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "ВыручкаСНТТ",     "ВыручкаНТТ");
	ДобавитьПКС(СвойстваШапки, "Дата",            "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",     "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",           "Номер");
	ДобавитьПКС(СвойстваШапки, "НомерЧекаККМ",    "НомерЧекаККМ");
	ДобавитьПКС(СвойстваШапки, "Организация",     "Организация", , "Справочник_Организации");
	ДобавитьПКС(СвойстваШапки, "Ответственный",   "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Приложение",      "Приложение");
	ДобавитьПКС(СвойстваШапки, "ПринятоОт",       "ПринятоОт");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",  "Сумма");
	ДобавитьПКС(СвойстваШапки, "ВидОперации",     "", 1);
	ДобавитьПКС(СвойстваШапки, "Оплачено",        "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер,Организация");
КонецПроцедуры

Процедура ПКО_Документ_ПКОРозничнаяВыручка_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.Оплачено = Истина;
	ПолученныеДанные.Проведен = Истина;
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствРозничнаяВыручка;
КонецПроцедуры

Процедура ПКО_Документ_ПКОРозничнаяВыручка_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗаполнитьПризнакиОтраженияВУчетах(ПолученныеДанные);
КонецПроцедуры
//  Документ_ПоступлениеДопРасходов_Получение
Процедура ДобавитьПКО_Документ_ПоступлениеДопРасходов_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ПоступлениеДопРасходов_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ПоступлениеДопРасходов;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ПоступлениеТоваровУслуг";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ПоступлениеДопРасходов_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ПоступлениеДопРасходов_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_ПоступлениеДопРасходов";
	ПравилоКонвертации.ВариантИдентификации         = "ПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",         "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                    "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоДокумента",  "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "ДоговорКонтрагента",      "Договор", , "Справочник_Договоры_Получение");
	ДобавитьПКС(СвойстваШапки, "Комментарий",             "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",              "Контрагент", , "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваШапки, "КратностьВзаиморасчетов", "КратностьВзаиморасчетов");
	ДобавитьПКС(СвойстваШапки, "КурсВзаиморасчетов",      "КурсВзаиморасчетов");
	ДобавитьПКС(СвойстваШапки, "Номер",                   "Номер");
	ДобавитьПКС(СвойстваШапки, "НомерВходящегоДокумента", "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Организация",             "Организация", , "Справочник_Организации");
	ДобавитьПКС(СвойстваШапки, "Ответственный",           "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Подразделение",           "Подразделение", , "Справочник_Подразделения");
	ДобавитьПКС(СвойстваШапки, "Сумма",                   "Сумма");
	ДобавитьПКС(СвойстваШапки, "СуммаВключаетНДС",        "СуммаВключаетНДС");
	ДобавитьПКС(СвойстваШапки, "ВидОперации",             "", 1);
	ДобавитьПКС(СвойстваШапки, "Содержание",              "", 1);
	ДобавитьПКС(СвойстваШапки, "СтавкаНДС",               "", 1, "Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваШапки, "Сумма",                   "", 1);
	ДобавитьПКС(СвойстваШапки, "СуммаНДС",                "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Товары", "");
	ДобавитьПКС(СвойстваТЧ, "ДокументПартии", "", 1,"Документ_ПоступлениеТоваровУслуг_Получение");
	ДобавитьПКС(СвойстваТЧ, "Количество",     "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",   "", 1,"Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "Сумма",          "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаНДС",       "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаТовара",    "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер,Организация");
КонецПроцедуры

Процедура ПКО_Документ_ПоступлениеДопРасходов_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.Проведен = Истина;
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПоступлениеДопРасходов.УслугаСтороннейОрганизации;
	
	// ТЧ Услуги
	ПравилаЗаполнения = Новый Соответствие;
	ПравилаЗаполнения.Вставить("Содержание", "Содержание");
	ПравилаЗаполнения.Вставить("Сумма",        "Сумма");
	ПравилаЗаполнения.Вставить("СуммаНДС",     "СуммаНДС");
	ПравилаЗаполнения.Вставить("СтавкаНДС",    "СтавкаНДС");
	
	МассивСтрокУслуги = Новый Массив;
	Если ДанныеXDTO.Свойство("Услуги")
		И ЗначениеЗаполнено(ДанныеXDTO.Услуги) Тогда
		
		Для Каждого Строка Из ДанныеXDTO.Услуги Цикл
			Если Строка.ЭтоДопРасходы = Ложь Тогда
				Продолжить;
			КонецЕсли;
			
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			Если СтруктураДанныхСтроки.Свойство("Содержание") Тогда
				ПолученныеДанные.Содержание = СтруктураДанныхСтроки.Содержание;
			КонецЕсли;
			Если СтруктураДанныхСтроки.Свойство("Сумма") Тогда
				ПолученныеДанные.Сумма = СтруктураДанныхСтроки.Сумма;
			КонецЕсли;
			Если СтруктураДанныхСтроки.Свойство("СуммаНДС") Тогда
				ПолученныеДанные.СуммаНДС = СтруктураДанныхСтроки.СуммаНДС;
			КонецЕсли;
			Если СтруктураДанныхСтроки.Свойство("СтавкаНДС") Тогда
		    	ПолученныеДанные.ДополнительныеСвойства.Вставить("СтавкаНДС", СтруктураДанныхСтроки.СтавкаНДС);
			КонецЕсли;
		    Прервать;
		КонецЦикла;
	КонецЕсли;
	
	
	// ТЧ Расшифровка доп расходов
	ПравилаЗаполнения = Новый Соответствие;
	ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
	ПравилаЗаполнения.Вставить("Количество",   "Количество");
	ПравилаЗаполнения.Вставить("Цена",         "Цена");
	ПравилаЗаполнения.Вставить("Сумма",        "Сумма");
	ПравилаЗаполнения.Вставить("СуммаНДС",     "СуммаНДС");
	ПравилаЗаполнения.Вставить("СтавкаНДС",    "СтавкаНДС");
	ПравилаЗаполнения.Вставить("ДокументПоступления","ДокументПартии");
	ПравилаЗаполнения.Вставить("СтоимостьТоваров","СуммаТовара");
	
	МассивСтрокТовары = Новый Массив;
	Если ДанныеXDTO.Свойство("РасшифровкаДопРасходов")
		И ЗначениеЗаполнено(ДанныеXDTO.РасшифровкаДопРасходов) Тогда
		
		Для Каждого Строка Из ДанныеXDTO.РасшифровкаДопРасходов Цикл
			
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
	КонецЕсли;
	ПолученныеДанные.ДополнительныеСвойства.Вставить("Товары", МассивСтрокТовары);
КонецПроцедуры

Процедура ПКО_Документ_ПоступлениеДопРасходов_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗаполнитьПризнакиОтраженияВУчетах(ПолученныеДанные);
КонецПроцедуры
//  Документ_ПоступлениеТоваровУслуг_Получение
Процедура ДобавитьПКО_Документ_ПоступлениеТоваровУслуг_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ПоступлениеТоваровУслуг_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ПоступлениеТоваровУслуг;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ПоступлениеТоваровУслуг";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ПоступлениеТоваровУслуг_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ПоступлениеТоваровУслуг_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_ПоступлениеТоваровУслуг";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "БанковскийСчетКонтрагента", "БанковскийСчетКонтрагента", , "Справочник_БанковскиеСчета");
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",           "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                      "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоДокумента",    "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "ДоговорКонтрагента",        "Договор", , "Справочник_Договоры_Получение");
	ДобавитьПКС(СвойстваШапки, "Комментарий",               "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",                "Контрагент", , "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваШапки, "КратностьВзаиморасчетов",   "КратностьВзаиморасчетов");
	ДобавитьПКС(СвойстваШапки, "КурсВзаиморасчетов",        "КурсВзаиморасчетов");
	ДобавитьПКС(СвойстваШапки, "Номер",                     "Номер");
	ДобавитьПКС(СвойстваШапки, "НомерВходящегоДокумента",   "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Организация",               "Организация", , "Справочник_Организации");
	ДобавитьПКС(СвойстваШапки, "Ответственный",             "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Подразделение",             "Подразделение", , "Справочник_Подразделения");
	ДобавитьПКС(СвойстваШапки, "СкладОрдер",                "Склад", , "Справочник_Склады");
	ДобавитьПКС(СвойстваШапки, "СуммаВключаетНДС",          "СуммаВключаетНДС");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",            "Сумма");
	ДобавитьПКС(СвойстваШапки, "ВидОперации",               "", 1);
	ДобавитьПКС(СвойстваШапки, "ВидПоступления",            "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Товары", "");
	ДобавитьПКС(СвойстваТЧ, "ЕдиницаИзмерения",           "", 1,"Справочник_ЕдиницыИзмеренияИзСтруктуры");
	ДобавитьПКС(СвойстваТЧ, "Количество",                 "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",               "", 1,"Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "Склад",                      "", 1,"Справочник_Склады");
	ДобавитьПКС(СвойстваТЧ, "СтавкаНДС",                  "", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "Сумма",                      "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаНДС",                   "", 1);
	ДобавитьПКС(СвойстваТЧ, "ХарактеристикаНоменклатуры", "", 1,"Справочник_ХарактеристикиИзСтруктуры_Получение");
	ДобавитьПКС(СвойстваТЧ, "Цена",                       "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Услуги", "");
	ДобавитьПКС(СвойстваТЧ, "Количество",    "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",  "", 1,"Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "Подразделение", "", 1,"Справочник_Подразделения");
	ДобавитьПКС(СвойстваТЧ, "Содержание",    "", 1);
	ДобавитьПКС(СвойстваТЧ, "СтавкаНДС",     "", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "СтатьяЗатрат",  "", 1,"Справочник_СтатьиЗатрат_Получение");
	ДобавитьПКС(СвойстваТЧ, "Сумма",         "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаНДС",      "", 1);
	ДобавитьПКС(СвойстваТЧ, "СчетЗатрат",    "", 1);
	ДобавитьПКС(СвойстваТЧ, "СчетЗатратНУ",  "", 1);
	ДобавитьПКС(СвойстваТЧ, "Цена",          "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер,Организация");
КонецПроцедуры

Процедура ПКО_Документ_ПоступлениеТоваровУслуг_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.Проведен = Истина;
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия;
	ПолученныеДанные.ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад;
	
	// ТЧ Товары
	ПравилаЗаполнения = Новый Соответствие;
	ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
	ПравилаЗаполнения.Вставить("Количество",   "Количество");
	ПравилаЗаполнения.Вставить("Цена",         "Цена");
	ПравилаЗаполнения.Вставить("Сумма",        "Сумма");
	ПравилаЗаполнения.Вставить("СуммаНДС",     "СуммаНДС");
	ПравилаЗаполнения.Вставить("СтавкаНДС",    "СтавкаНДС");
	СкладИзШапки = Неопределено;
	ДанныеXDTO.Свойство("Склад", СкладИзШапки);
	МассивСтрокТовары = Новый Массив;
	Если ДанныеXDTO.Свойство("Товары")
		И ЗначениеЗаполнено(ДанныеXDTO.Товары) Тогда
		
		Для Каждого Строка Из ДанныеXDTO.Товары Цикл
			
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			
			// Единица изменения в виде структуры
			Если ЗначениеЗаполнено(Строка.ЕдиницаИзмерения) И ТипЗнч(Строка.ЕдиницаИзмерения) = Тип("Структура") Тогда
				СтруктураДанныхСтроки.Вставить("ЕдиницаИзмерения", ПодготовитьСтруктуруДанныхСПодчинением(Строка.ЕдиницаИзмерения, Строка.Номенклатура));
			КонецЕсли;
			// Характеристика в виде структуры
			Если ЗначениеЗаполнено(Строка.Характеристика) И ТипЗнч(Строка.Характеристика) = Тип("Структура") Тогда
				СтруктураДанныхСтроки.Вставить("ХарактеристкаНоменклатуры", ПодготовитьСтруктуруДанныхСПодчинением(Строка.Характеристика, Строка.Номенклатура));
			КонецЕсли;
			Если ЗначениеЗаполнено(СкладИзШапки) Тогда
				СтруктураДанныхСтроки.Вставить("Склад", СкладИзШапки);
			КонецЕсли;
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
		
		КонецЦикла;
		
	КонецЕсли;
	ПолученныеДанные.ДополнительныеСвойства.Вставить("Товары", МассивСтрокТовары);
	
	// ТЧ Услуги
	ПравилаЗаполнения = Новый Соответствие;
	ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
	ПравилаЗаполнения.Вставить("Содержание", "Содержание");
	ПравилаЗаполнения.Вставить("Сумма",        "Сумма");
	ПравилаЗаполнения.Вставить("СуммаНДС",     "СуммаНДС");
	ПравилаЗаполнения.Вставить("СтавкаНДС",    "СтавкаНДС");
	ПравилаЗаполнения.Вставить("СтатьяЗатрат", "СтатьяЗатрат");
	ПравилаЗаполнения.Вставить("ПодразделениеЗатрат","Подразделение"); 
	ПравилаЗаполнения.Вставить("Количество",    "Количество");
	ПравилаЗаполнения.Вставить("Цена", "Цена");
	
	МассивСтрокУслуги = Новый Массив;
	Если ДанныеXDTO.Свойство("Услуги")
		И ЗначениеЗаполнено(ДанныеXDTO.Услуги) Тогда
		
		Для Каждого Строка Из ДанныеXDTO.Услуги Цикл
			Если Строка.ЭтоДопРасходы Тогда
				Продолжить;
			КонецЕсли;
			
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			Если ЗначениеЗаполнено(Строка.СчетЗатрат) Тогда
				СчетЗатратБУ = ПланыСчетов.Хозрасчетный.НайтиПоКОду(Строка.СчетЗатрат);
				СтруктураДанныхСтроки.Вставить("СчетЗатрат",СчетЗатратБУ);
				СчетЗатратНУ = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", СчетЗатратБУ));
				СтруктураДанныхСтроки.Вставить("СчетЗатратНУ",СчетЗатратНУ);
			КонецЕсли;
			МассивСтрокУслуги.Добавить(СтруктураДанныхСтроки);
		
		КонецЦикла;
		
	КонецЕсли;
	
	ПолученныеДанные.ДополнительныеСвойства.Вставить("Услуги", МассивСтрокУслуги);
КонецПроцедуры

Процедура ПКО_Документ_ПоступлениеТоваровУслуг_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗаполнитьПризнакиОтраженияВУчетах(ПолученныеДанные);
КонецПроцедуры
//  Документ_РеализацияТоваровУслуг_Получение
Процедура ДобавитьПКО_Документ_РеализацияТоваровУслуг_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_РеализацияТоваровУслуг_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.РеализацияТоваровУслуг;
	ПравилоКонвертации.ОбъектФормата                = "Документ.РеализацияТоваровУслуг";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_РеализацияТоваровУслуг_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_РеализацияТоваровУслуг_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_РеализацияТоваровУслуг";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "АдресДоставки",                 "АдресДоставки");
	ДобавитьПКС(СвойстваШапки, "БанковскийСчетОрганизации",     "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчета");
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",               "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "ГлавныйБухгалтер",              "ГлавныйБухгалтер", , "Справочник_ФизическиеЛица_Получение");
	ДобавитьПКС(СвойстваШапки, "Грузоотправитель",              "Грузоотправитель", , "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваШапки, "Грузополучатель",               "Грузополучатель", , "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваШапки, "Дата",                          "Дата");
	ДобавитьПКС(СвойстваШапки, "ДоверенностьВыдана",            "ДоверенностьКемВыдана");
	ДобавитьПКС(СвойстваШапки, "ДоверенностьДата",              "ДоверенностьДата");
	ДобавитьПКС(СвойстваШапки, "ДоверенностьНомер",             "ДоверенностьНомер");
	ДобавитьПКС(СвойстваШапки, "ДоверенностьЧерезКого",         "ДоверенностьКомуВыдана");
	ДобавитьПКС(СвойстваШапки, "ДоговорКонтрагента",            "Договор", , "Справочник_Договоры_Получение");
	ДобавитьПКС(СвойстваШапки, "Комментарий",                   "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",                    "Контрагент", , "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваШапки, "КратностьВзаиморасчетов",       "КратностьВзаиморасчетов");
	ДобавитьПКС(СвойстваШапки, "КурсВзаиморасчетов",            "КурсВзаиморасчетов");
	ДобавитьПКС(СвойстваШапки, "Номер",                         "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",                   "Организация", , "Справочник_Организации");
	ДобавитьПКС(СвойстваШапки, "Ответственный",                 "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ОтпускПроизвел",                "ОтпускПроизвел", , "Справочник_ФизическиеЛица_Получение");
	ДобавитьПКС(СвойстваШапки, "Подразделение",                 "Подразделение", , "Справочник_Подразделения");
	ДобавитьПКС(СвойстваШапки, "Склад",                         "Склад", , "Справочник_Склады");
	ДобавитьПКС(СвойстваШапки, "СуммаВключаетНДС",              "СуммаВключаетНДС");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",                "Сумма");
	ДобавитьПКС(СвойстваШапки, "ВидОперации",                   "", 1);
	ДобавитьПКС(СвойстваШапки, "ВидПередачи",                   "", 1);
	ДобавитьПКС(СвойстваШапки, "ЗаГлавногоБухгалтераПоПриказу", "", 1);
	ДобавитьПКС(СвойстваШапки, "ЗаРуководителяПоПриказу",       "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Товары", "");
	ДобавитьПКС(СвойстваТЧ, "ЕдиницаИзмерения",           "", 1,"Справочник_ЕдиницыИзмеренияИзСтруктуры");
	ДобавитьПКС(СвойстваТЧ, "Количество",                 "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",               "", 1,"Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "Склад",                      "", 1,"Справочник_Склады");
	ДобавитьПКС(СвойстваТЧ, "СтавкаНДС",                  "", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "Сумма",                      "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаНДС",                   "", 1);
	ДобавитьПКС(СвойстваТЧ, "СчетДоходовБУ",              "", 1);
	ДобавитьПКС(СвойстваТЧ, "СчетДоходовНУ",              "", 1);
	ДобавитьПКС(СвойстваТЧ, "СчетРасходовБУ",             "", 1);
	ДобавитьПКС(СвойстваТЧ, "СчетРасходовНУ",             "", 1);
	ДобавитьПКС(СвойстваТЧ, "СчетУчетаБУ",                "", 1);
	ДобавитьПКС(СвойстваТЧ, "СчетУчетаНУ",                "", 1);
	ДобавитьПКС(СвойстваТЧ, "ХарактеристикаНоменклатуры", "", 1,"Справочник_ХарактеристикиИзСтруктуры_Получение");
	ДобавитьПКС(СвойстваТЧ, "Цена",                       "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Услуги", "");
	ДобавитьПКС(СвойстваТЧ, "Количество",     "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",   "", 1,"Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "Содержание",     "", 1);
	ДобавитьПКС(СвойстваТЧ, "СтавкаНДС",      "", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "Сумма",          "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаНДС",       "", 1);
	ДобавитьПКС(СвойстваТЧ, "СчетДоходовБУ",  "", 1);
	ДобавитьПКС(СвойстваТЧ, "СчетДоходовНУ",  "", 1);
	ДобавитьПКС(СвойстваТЧ, "СчетРасходовБУ", "", 1);
	ДобавитьПКС(СвойстваТЧ, "СчетРасходовНУ", "", 1);
	ДобавитьПКС(СвойстваТЧ, "Цена",           "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер,Организация");
КонецПроцедуры

Процедура ПКО_Документ_РеализацияТоваровУслуг_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.Проведен = Истина;
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия;
	ПолученныеДанные.ВидПередачи = Перечисления.ВидыПередачиТоваров.СоСклада;
	Если ДанныеXDTO.Свойство("ЗаГлавногоБухгалтераПоПриказу") И ЗначениеЗаполнено(ДанныеXDTO.ЗаГлавногоБухгалтераПоПриказу) Тогда
		ПолученныеДанные.ЗаГлавногоБухгалтераПоПриказу = ДанныеXDTO.ЗаГлавногоБухгалтераПоПриказу.ФИО;
	КонецЕсли;
	Если ДанныеXDTO.Свойство("ЗаРуководителяПоПриказу") И ЗначениеЗаполнено(ДанныеXDTO.ЗаРуководителяПоПриказу) Тогда
		ПолученныеДанные.ЗаРуководителяПоПриказу = ДанныеXDTO.ЗаРуководителяПоПриказу.ФИО;
	КонецЕсли;
	СкладИзШапки = Неопределено;
	ДанныеXDTO.Свойство("Склад", СкладИзШапки);
	// ТЧ Товары
	ПравилаЗаполнения = Новый Соответствие;
	ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
	ПравилаЗаполнения.Вставить("Количество",   "Количество");
	ПравилаЗаполнения.Вставить("Цена",         "Цена");
	ПравилаЗаполнения.Вставить("Сумма",        "Сумма");
	ПравилаЗаполнения.Вставить("СуммаНДС",     "СуммаНДС");
	ПравилаЗаполнения.Вставить("СтавкаНДС",    "СтавкаНДС");
	
	МассивСтрокТовары = Новый Массив;
	Если ДанныеXDTO.Свойство("Товары")
		И ЗначениеЗаполнено(ДанныеXDTO.Товары) Тогда
		
		Для Каждого Строка Из ДанныеXDTO.Товары Цикл
			
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			
			// Единица изменения в виде структуры
			Если ЗначениеЗаполнено(Строка.ЕдиницаИзмерения) И ТипЗнч(Строка.ЕдиницаИзмерения) = Тип("Структура") Тогда
				СтруктураДанныхСтроки.Вставить("ЕдиницаИзмерения", ПодготовитьСтруктуруДанныхСПодчинением(Строка.ЕдиницаИзмерения, Строка.Номенклатура));
			КонецЕсли;
			// Характеристика в виде структуры
			Если ЗначениеЗаполнено(Строка.Характеристика) И ТипЗнч(Строка.Характеристика) = Тип("Структура") Тогда
				СтруктураДанныхСтроки.Вставить("ХарактеристкаНоменклатуры", ПодготовитьСтруктуруДанныхСПодчинением(Строка.Характеристика, Строка.Номенклатура));
			КонецЕсли;
			Если ЗначениеЗаполнено(СкладИзШапки) Тогда
				СтруктураДанныхСтроки.Вставить("Склад", СкладИзШапки);
			КонецЕсли;
			Если ЗначениеЗаполнено(Строка.СчетУчета) Тогда
				СчетУчетаБУ = ПланыСчетов.Хозрасчетный.НайтиПоКОду(Строка.СчетУчета);
				СтруктураДанныхСтроки.Вставить("СчетУчетаБУ",СчетУчетаБУ);
				СчетУчетаНУ = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", СчетУчетаБУ));
				СтруктураДанныхСтроки.Вставить("СчетУчетаНУ",СчетУчетаНУ);
			КонецЕсли;
			Если ЗначениеЗаполнено(Строка.СчетДоходов) Тогда
				СчетДоходовБУ = ПланыСчетов.Хозрасчетный.НайтиПоКОду(Строка.СчетДоходов);
				СтруктураДанныхСтроки.Вставить("СчетДоходовБУ",СчетДоходовБУ);
				СчетДоходовНУ = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", СчетДоходовБУ));
				СтруктураДанныхСтроки.Вставить("СчетДоходовНУ",СчетУчетаНУ);
			КонецЕсли;
	
			Если ЗначениеЗаполнено(Строка.СчетРасходов) Тогда
				СчетРасходовБУ = ПланыСчетов.Хозрасчетный.НайтиПоКОду(Строка.СчетРасходов);
				СтруктураДанныхСтроки.Вставить("СчетРасходовБУ",СчетРасходовБУ);
				СчетРасходовНУ = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", СчетРасходовБУ));
				СтруктураДанныхСтроки.Вставить("СчетРасходовНУ",СчетРасходовНУ);
			КонецЕсли;
	
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
		
		КонецЦикла;
		
	КонецЕсли;
	ПолученныеДанные.ДополнительныеСвойства.Вставить("Товары", МассивСтрокТовары);
	
	// ТЧ Услуги
	ПравилаЗаполнения = Новый Соответствие;
	ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
	ПравилаЗаполнения.Вставить("Содержание", "Содержание");
	ПравилаЗаполнения.Вставить("Сумма",        "Сумма");
	ПравилаЗаполнения.Вставить("СуммаНДС",     "СуммаНДС");
	ПравилаЗаполнения.Вставить("СтавкаНДС",    "СтавкаНДС");
	ПравилаЗаполнения.Вставить("СтатьяЗатрат", "СтатьяЗатрат");
	ПравилаЗаполнения.Вставить("ПодразделениеЗатрат","Подразделение"); 
	ПравилаЗаполнения.Вставить("Количество",    "Количество");
	ПравилаЗаполнения.Вставить("Цена", "Цена");
	
	МассивСтрокУслуги = Новый Массив;
	Если ДанныеXDTO.Свойство("Услуги")
		И ЗначениеЗаполнено(ДанныеXDTO.Услуги) Тогда
		
		Для Каждого Строка Из ДанныеXDTO.Услуги Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			Если ЗначениеЗаполнено(Строка.СчетДоходов) Тогда
				СчетДоходовБУ = ПланыСчетов.Хозрасчетный.НайтиПоКОду(Строка.СчетДоходов);
				СтруктураДанныхСтроки.Вставить("СчетДоходовБУ",СчетДоходовБУ);
				СчетДоходовНУ = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", СчетДоходовБУ));
				СтруктураДанныхСтроки.Вставить("СчетДоходовНУ",СчетУчетаНУ);
			КонецЕсли;
	
			Если ЗначениеЗаполнено(Строка.СчетРасходов) Тогда
				СчетРасходовБУ = ПланыСчетов.Хозрасчетный.НайтиПоКОду(Строка.СчетРасходов);
				СтруктураДанныхСтроки.Вставить("СчетРасходовБУ",СчетРасходовБУ);
				СчетРасходовНУ = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", СчетРасходовБУ));
				СтруктураДанныхСтроки.Вставить("СчетРасходовНУ",СчетРасходовНУ);
			КонецЕсли;
			МассивСтрокУслуги.Добавить(СтруктураДанныхСтроки);
		
		КонецЦикла;
		
	КонецЕсли;
	
	ПолученныеДанные.ДополнительныеСвойства.Вставить("Услуги", МассивСтрокУслуги);
КонецПроцедуры

Процедура ПКО_Документ_РеализацияТоваровУслуг_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗаполнитьПризнакиОтраженияВУчетах(ПолученныеДанные);
КонецПроцедуры
//  Документ_РКОВыдачаВКассуККМ_Получение
Процедура ДобавитьПКО_Документ_РКОВыдачаВКассуККМ_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_РКОВыдачаВКассуККМ_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.РасходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата                = "Документ.РКОВыдачаВКассуККМ";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_РКОВыдачаВКассуККМ_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_РКОВыдачаВКассуККМ_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_РКОККМ";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента", "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Выдать",          "Выдать");
	ДобавитьПКС(СвойстваШапки, "Дата",            "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",     "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",           "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",     "Организация", , "Справочник_Организации");
	ДобавитьПКС(СвойстваШапки, "Основание",       "Основание");
	ДобавитьПКС(СвойстваШапки, "Ответственный",   "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ПоДокументу",     "ПоДокументу");
	ДобавитьПКС(СвойстваШапки, "Подразделение",   "Подразделение", , "Справочник_Подразделения");
	ДобавитьПКС(СвойстваШапки, "Приложение",      "Приложение");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",  "Сумма");
	ДобавитьПКС(СвойстваШапки, "ВидОперации",     "", 1);
	ДобавитьПКС(СвойстваШапки, "Оплачено",        "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер,Организация");
КонецПроцедуры

Процедура ПКО_Документ_РКОВыдачаВКассуККМ_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.Оплачено = Истина;
	ПолученныеДанные.Проведен = Истина;
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствКассеККМ;
КонецПроцедуры

Процедура ПКО_Документ_РКОВыдачаВКассуККМ_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗаполнитьПризнакиОтраженияВУчетах(ПолученныеДанные);
КонецПроцедуры
//  Документ_РКОВыплатаЗарплаты_Получение
Процедура ДобавитьПКО_Документ_РКОВыплатаЗарплаты_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_РКОВыплатаЗарплаты_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.РасходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата                = "Документ.РКОВыплатаЗарплаты";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_РКОВыплатаЗарплаты_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_РКОВыплатаЗарплаты_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_ЗаполнитьКассуВКассовомОрдере";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаВзаиморасчетовРаботника", "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",               "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Выдать",                        "Выдать");
	ДобавитьПКС(СвойстваШапки, "Дата",                          "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",                   "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",                         "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",                   "Организация", , "Справочник_Организации");
	ДобавитьПКС(СвойстваШапки, "Основание",                     "Основание");
	ДобавитьПКС(СвойстваШапки, "Ответственный",                 "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ПоДокументу",                   "ПоДокументу");
	ДобавитьПКС(СвойстваШапки, "Подразделение",                 "Подразделение", , "Справочник_Подразделения");
	ДобавитьПКС(СвойстваШапки, "Приложение",                    "Приложение");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",                "Сумма");
	ДобавитьПКС(СвойстваШапки, "ВидОперации",                   "", 1);
	ДобавитьПКС(СвойстваШапки, "Контрагент",                    "", 1, "Справочник_ФизическиеЛица_Получение");
	ДобавитьПКС(СвойстваШапки, "Оплачено",                      "", 1);
	ДобавитьПКС(СвойстваШапки, "СтатьяДвиженияДенежныхСредств", "", 1, "Справочник_СтатьиДДС");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ВыплатаЗаработнойПлаты", "");
	ДобавитьПКС(СвойстваТЧ, "Ведомость",                     "", 1);
	ДобавитьПКС(СвойстваТЧ, "СтатьяДвиженияДенежныхСредств", "", 1,"Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "СуммаПлатежа",                  "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер,Организация");
КонецПроцедуры

Процедура ПКО_Документ_РКОВыплатаЗарплаты_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.Оплачено = Истина;
	ПолученныеДанные.Проведен = Истина;
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику;
	
	// ТЧ ВыплатаЗаработнойПлаты
	ПравилаЗаполнения = Новый Соответствие;
	ПравилаЗаполнения.Вставить("СтатьяДДС", "СтатьяДвиженияДенежныхСредств");
	ПравилаЗаполнения.Вставить("СуммаПлатежа","Сумма");
	
	МассивСтрокЗП = Новый Массив;
	
	Если ДанныеXDTO.Свойство("РасшифровкаПлатежа") Тогда
		Для Каждого СтрРасшифровка Из ДанныеXDTO.РасшифровкаПлатежа Цикл
			Если ЗначениеЗаполнено(СтрРасшифровка.СтатьяДДС) 
				И НЕ ПолученныеДанные.ДополнительныеСвойства.Свойство("СтатьяДвиженияДенежныхСредств") Тогда
				ПолученныеДанные.ДополнительныеСвойства.Вставить("СтатьяДвиженияДенежныхСредств", СтрРасшифровка.СтатьяДДС);
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрРасшифровка.Сотрудник) Тогда
				ПолученныеДанные.ДополнительныеСвойства.Вставить("Контрагент", СтрРасшифровка.Сотрудник);
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрРасшифровка.ДатаВедомостиНаВыплатуЗарплаты)
				Или ЗначениеЗаполнено(СтрРасшифровка.НомерВедомостиНаВыплатуЗарплаты) Тогда
				СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(СтрРасшифровка, ПравилаЗаполнения);
				ВедомостьСсылка = Документы.ЗарплатаКВыплате.НайтиПоНомеру(СтрРасшифровка.НомерВедомостиНаВыплатуЗарплаты, СтрРасшифровка.ДатаВедомостиНаВыплатуЗарплаты);
				Если НЕ ЗначениеЗаполнено(ВедомостьСсылка) Тогда
					ВедомостьСсылка = Документы.ЗарплатаКВыплатеОрганизаций.НайтиПоНомеру(СтрРасшифровка.НомерВедомостиНаВыплатуЗарплаты, СтрРасшифровка.ДатаВедомостиНаВыплатуЗарплаты);
				КонецЕсли;
				Если ЗначениеЗаполнено(ВедомостьСсылка) Тогда
					СтруктураДанныхСтроки.Вставить("Ведомость", ВедомостьСсылка);
				КонецЕсли;
				МассивСтрокЗП.Добавить(СтруктураДанныхСтроки);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Если МассивСтрокЗП.Количество() > 0 Тогда
		ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям;
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ВыплатаЗаработнойПлаты", МассивСтрокЗП);
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Документ_РКОВыплатаЗарплаты_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗаполнитьПризнакиОтраженияВУчетах(ПолученныеДанные);
КонецПроцедуры
//  Документ_РКОНаБанковскийСчет_Получение
Процедура ДобавитьПКО_Документ_РКОНаБанковскийСчет_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_РКОНаБанковскийСчет_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.РасходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата                = "Документ.РКОНаБанковскийСчет";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_РКОНаБанковскийСчет_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_РКОНаБанковскийСчет_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_ЗаполнитьКассуВКассовомОрдере";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента", "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Выдать",          "Выдать");
	ДобавитьПКС(СвойстваШапки, "Дата",            "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",     "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",           "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",     "Организация", , "Справочник_Организации");
	ДобавитьПКС(СвойстваШапки, "Основание",       "Основание");
	ДобавитьПКС(СвойстваШапки, "Ответственный",   "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ПоДокументу",     "ПоДокументу");
	ДобавитьПКС(СвойстваШапки, "Подразделение",   "Подразделение", , "Справочник_Подразделения");
	ДобавитьПКС(СвойстваШапки, "Приложение",      "Приложение");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",  "Сумма");
	ДобавитьПКС(СвойстваШапки, "СчетОрганизации", "БанковскийСчет", , "Справочник_БанковскиеСчета");
	ДобавитьПКС(СвойстваШапки, "ВидОперации",     "", 1);
	ДобавитьПКС(СвойстваШапки, "Оплачено",        "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер,Организация");
КонецПроцедуры

Процедура ПКО_Документ_РКОНаБанковскийСчет_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.Оплачено = Истина;
	ПолученныеДанные.Проведен = Истина;
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийРКО.ВзносНаличнымиВБанк;
КонецПроцедуры

Процедура ПКО_Документ_РКОНаБанковскийСчет_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗаполнитьПризнакиОтраженияВУчетах(ПолученныеДанные);
КонецПроцедуры
//  Документ_РКОПрочаяВыдача_Получение
Процедура ДобавитьПКО_Документ_РКОПрочаяВыдача_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_РКОПрочаяВыдача_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.РасходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата                = "Документ.РКОПрочаяВыдача";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_РКОПрочаяВыдача_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_РКОПрочаяВыдача_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_ЗаполнитьКассуВКассовомОрдере";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",               "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Выдать",                        "Выдать");
	ДобавитьПКС(СвойстваШапки, "Дата",                          "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",                   "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",                         "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",                   "Организация", , "Справочник_Организации");
	ДобавитьПКС(СвойстваШапки, "Основание",                     "Основание");
	ДобавитьПКС(СвойстваШапки, "Ответственный",                 "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ПоДокументу",                   "ПоДокументу");
	ДобавитьПКС(СвойстваШапки, "Подразделение",                 "Подразделение", , "Справочник_Подразделения");
	ДобавитьПКС(СвойстваШапки, "Приложение",                    "Приложение");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",                "Сумма");
	ДобавитьПКС(СвойстваШапки, "ВидОперации",                   "", 1);
	ДобавитьПКС(СвойстваШапки, "Оплачено",                      "", 1);
	ДобавитьПКС(СвойстваШапки, "СтатьяДвиженияДенежныхСредств", "", 1, "Справочник_СтатьиДДС");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "РасшифровкаПлатежа", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "СтатьяДвиженияДенежныхСредств", "СтатьяДДС", ,"Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "СуммаПлатежа",                  "Сумма");

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер,Организация");
КонецПроцедуры

Процедура ПКО_Документ_РКОПрочаяВыдача_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.Оплачено = Истина;
	ПолученныеДанные.Проведен = Истина;
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийРКО.РасходДенежныхСредствПрочее;
	
	Если ДанныеXDTO.Свойство("РасшифровкаПлатежа") Тогда
		ИндексСтроки = 0;
		Для Каждого СтрРасшифровка Из ДанныеXDTO.РасшифровкаПлатежа Цикл
			Если ЗначениеЗаполнено(СтрРасшифровка.СтатьяДДС) 
				И НЕ ПолученныеДанные.ДополнительныеСвойства.Свойство("СтатьяДвиженияДенежныхСредств") Тогда
				ПолученныеДанные.ДополнительныеСвойства.Вставить("СтатьяДвиженияДенежныхСредств", СтрРасшифровка.СтатьяДДС);
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрРасшифровка.СчетУчетаРасчетов) Тогда
				ПолученныеДанные.РасшифровкаПлатежа[ИндексСтроки].СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.НайтиПоКоду(СтрРасшифровка.СчетУчетаРасчетов);
			КонецЕсли;
			ИндексСтроки = ИндексСтроки + 1;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Документ_РКОПрочаяВыдача_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗаполнитьПризнакиОтраженияВУчетах(ПолученныеДанные);
КонецПроцедуры
//  Документ_РКОРасчетыСКонтрагентами_Получение
Процедура ДобавитьПКО_Документ_РКОРасчетыСКонтрагентами_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_РКОРасчетыСКонтрагентами_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.РасходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата                = "Документ.РКОРасчетыСКонтрагентами";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_РКОРасчетыСКонтрагентами_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_РКОРасчетыСКонтрагентами_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_ЗаполнитьКассуВКассовомОрдере";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",               "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Выдать",                        "Выдать");
	ДобавитьПКС(СвойстваШапки, "Дата",                          "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",                   "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",                    "Контрагент", , "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваШапки, "Номер",                         "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",                   "Организация", , "Справочник_Организации");
	ДобавитьПКС(СвойстваШапки, "Основание",                     "Основание");
	ДобавитьПКС(СвойстваШапки, "Ответственный",                 "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ПоДокументу",                   "ПоДокументу");
	ДобавитьПКС(СвойстваШапки, "Подразделение",                 "Подразделение", , "Справочник_Подразделения");
	ДобавитьПКС(СвойстваШапки, "Приложение",                    "Приложение");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",                "Сумма");
	ДобавитьПКС(СвойстваШапки, "ВидОперации",                   "", 1);
	ДобавитьПКС(СвойстваШапки, "Оплачено",                      "", 1);
	ДобавитьПКС(СвойстваШапки, "СтатьяДвиженияДенежныхСредств", "", 1, "Справочник_СтатьиДДС");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "РасшифровкаПлатежа", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "ДоговорКонтрагента",            "Договор", ,"Справочник_Договоры_Получение");
	ДобавитьПКС(СвойстваТЧ, "КратностьВзаиморасчетов",       "КратностьВзаиморасчетов");
	ДобавитьПКС(СвойстваТЧ, "КурсВзаиморасчетов",            "КурсВзаиморасчетов");
	ДобавитьПКС(СвойстваТЧ, "СтавкаНДС",                     "СтавкаНДС", ,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "СтатьяДвиженияДенежныхСредств", "СтатьяДДС", ,"Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "СуммаВзаиморасчетов",           "СуммаВзаиморасчетов");
	ДобавитьПКС(СвойстваТЧ, "СуммаНДС",                      "СуммаНДС");
	ДобавитьПКС(СвойстваТЧ, "СуммаПлатежа",                  "Сумма");

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер,Организация");
КонецПроцедуры

Процедура ПКО_Документ_РКОРасчетыСКонтрагентами_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.Оплачено = Истина;
	ПолученныеДанные.Проведен = Истина;
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийРКО.ПрочиеРасчетыСКонтрагентами;
	ВидРасчетов = "";
	ДанныеXDTO.Свойство("ВидРасчетов", ВидРасчетов);
	Если ЗначениеЗаполнено(ВидРасчетов) Тогда
		ВидРасчетовСтрокой = ВидРасчетов.Значение;
		Если ВидРасчетовСтрокой = "СПоставщиком" Тогда
			ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийРКО.ОплатаПоставщику;
		ИначеЕсли ВидРасчетовСтрокой = "СПокупателем" Тогда
			ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратДенежныхСредствПокупателю;
		ИначеЕсли ВидРасчетовСтрокой = "КредитыИЗаймы" Тогда
			ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийРКО.РасчетыПоКредитамИЗаймамСКонтрагентами;
		КонецЕсли;
	КонецЕсли;
	
	Если ДанныеXDTO.Свойство("РасшифровкаПлатежа") Тогда
		ИндексСтроки = 0;
		Для Каждого СтрРасшифровка Из ДанныеXDTO.РасшифровкаПлатежа Цикл
			Если ЗначениеЗаполнено(СтрРасшифровка.СтатьяДДС) 
				И НЕ ПолученныеДанные.ДополнительныеСвойства.Свойство("СтатьяДвиженияДенежныхСредств") Тогда
				ПолученныеДанные.ДополнительныеСвойства.Вставить("СтатьяДвиженияДенежныхСредств", СтрРасшифровка.СтатьяДДС);
			КонецЕсли;
			СтрокаПД = ПолученныеДанные.РасшифровкаПлатежа[ИндексСтроки];
			Если ЗначениеЗаполнено(СтрРасшифровка.СчетУчетаРасчетовСКонтрагентом) Тогда
				СтрокаПД.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.НайтиПоКоду(СтрРасшифровка.СчетУчетаРасчетовСКонтрагентом);
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрРасшифровка.СчетУчетаРасчетовПоАвансам) Тогда
				СтрокаПД.СчетУчетаРасчетовПоАвансам = ПланыСчетов.Хозрасчетный.НайтиПоКоду(СтрРасшифровка.СчетУчетаРасчетовПоАвансам);
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(СтрокаПД.СчетУчетаРасчетовСКонтрагентом) ИЛИ НЕ ЗначениеЗаполнено(СтрокаПД.СчетУчетаРасчетовПоАвансам) Тогда
				СчетаУчета = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(ПолученныеДанные.Организация, ПолученныеДанные.Контрагент, СтрокаПД.ДоговорКонтрагента);
				Если НЕ ЗначениеЗаполнено(СтрокаПД.СчетУчетаРасчетовСКонтрагентом) Тогда
					СтрокаПД.СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетов;
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(СтрокаПД.СчетУчетаРасчетовПоАвансам) Тогда
					СтрокаПД.СчетУчетаРасчетовПоАвансам		= СчетаУчета.СчетАвансов;
				КонецЕсли;
			КонецЕсли;
	 
			ИндексСтроки = ИндексСтроки + 1;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Документ_РКОРасчетыСКонтрагентами_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗаполнитьПризнакиОтраженияВУчетах(ПолученныеДанные);
КонецПроцедуры
//  Документ_РКОРасчетыССотрудниками_Получение
Процедура ДобавитьПКО_Документ_РКОРасчетыССотрудниками_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_РКОРасчетыССотрудниками_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.РасходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата                = "Документ.РКОРасчетыССотрудниками";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_РКОРасчетыССотрудниками_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_РКОРасчетыССотрудниками_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_ЗаполнитьКассуВКассовомОрдере";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаВзаиморасчетовРаботника", "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",               "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Выдать",                        "Выдать");
	ДобавитьПКС(СвойстваШапки, "Дата",                          "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",                   "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",                    "Сотрудник", , "Справочник_ФизическиеЛица_Получение");
	ДобавитьПКС(СвойстваШапки, "Номер",                         "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",                   "Организация", , "Справочник_Организации");
	ДобавитьПКС(СвойстваШапки, "Основание",                     "Основание");
	ДобавитьПКС(СвойстваШапки, "Ответственный",                 "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ПоДокументу",                   "ПоДокументу");
	ДобавитьПКС(СвойстваШапки, "Подразделение",                 "Подразделение", , "Справочник_Подразделения");
	ДобавитьПКС(СвойстваШапки, "Приложение",                    "Приложение");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",                "Сумма");
	ДобавитьПКС(СвойстваШапки, "ВидОперации",                   "", 1);
	ДобавитьПКС(СвойстваШапки, "Оплачено",                      "", 1);
	ДобавитьПКС(СвойстваШапки, "СтатьяДвиженияДенежныхСредств", "", 1, "Справочник_СтатьиДДС");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "РасшифровкаПлатежа", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "СтатьяДвиженияДенежныхСредств", "СтатьяДДС", ,"Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "СуммаПлатежа",                  "Сумма");

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер,Организация");
КонецПроцедуры

Процедура ПКО_Документ_РКОРасчетыССотрудниками_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.Оплачено = Истина;
	ПолученныеДанные.Проведен = Истина;
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийРКО.РасходДенежныхСредствПрочее;
	ВидРасчетов = "";
	ДанныеXDTO.Свойство("ВидРасчетов", ВидРасчетов);
	Если ЗначениеЗаполнено(ВидРасчетов) Тогда
		ВидРасчетовСтрокой = ВидРасчетов.Значение;
		Если ВидРасчетовСтрокой = "Подотчет" Тогда
			ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствПодотчетнику;
		ИначеЕсли ВидРасчетовСтрокой = "Займы" Тогда
			ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийРКО.РасчетыПоКредитамИЗаймамСРаботниками;
		КонецЕсли;
	КонецЕсли;
	
	Если ДанныеXDTO.Свойство("РасшифровкаПлатежа") Тогда
		ИндексСтроки = 0;
		Для Каждого СтрРасшифровка Из ДанныеXDTO.РасшифровкаПлатежа Цикл
			Если ЗначениеЗаполнено(СтрРасшифровка.СтатьяДДС) 
				И НЕ ПолученныеДанные.ДополнительныеСвойства.Свойство("СтатьяДвиженияДенежныхСредств") Тогда
				ПолученныеДанные.ДополнительныеСвойства.Вставить("СтатьяДвиженияДенежныхСредств", СтрРасшифровка.СтатьяДДС);
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрРасшифровка.СчетУчетаРасчетов) Тогда
				ПолученныеДанные.РасшифровкаПлатежа[ИндексСтроки].СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.НайтиПоКоду(СтрРасшифровка.СчетУчетаРасчетов);
			КонецЕсли;
			ИндексСтроки = ИндексСтроки + 1;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Документ_РКОРасчетыССотрудниками_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗаполнитьПризнакиОтраженияВУчетах(ПолученныеДанные);
КонецПроцедуры
//  Документ_СБДСПереводНаДругойСчет_Получение
Процедура ДобавитьПКО_Документ_СБДСПереводНаДругойСчет_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_СБДСПереводНаДругойСчет_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ПлатежноеПоручениеИсходящее;
	ПравилоКонвертации.ОбъектФормата                = "Документ.СБДСПереводНаДругойСчет";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_СБДСПереводНаДругойСчет_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_СБДСПереводНаДругойСчет_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",               "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "ВидПлатежа",                    "ВидПлатежа");
	ДобавитьПКС(СвойстваШапки, "Дата",                          "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаОплаты",                    "ДатаВыписки");
	ДобавитьПКС(СвойстваШапки, "НазначениеПлатежа",             "НазначениеПлатежа");
	ДобавитьПКС(СвойстваШапки, "Номер",                         "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",                   "Организация", , "Справочник_Организации");
	ДобавитьПКС(СвойстваШапки, "Ответственный",                 "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "СтатьяДвиженияДенежныхСредств", "СтатьяДДС", , "Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",                "Сумма");
	ДобавитьПКС(СвойстваШапки, "СчетКонтрагента",               "БанковскийСчет", , "Справочник_БанковскиеСчета");
	ДобавитьПКС(СвойстваШапки, "СчетОрганизации",               "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчета");
	ДобавитьПКС(СвойстваШапки, "ВидОперации",                   "", 1);
	ДобавитьПКС(СвойстваШапки, "Оплачено",                      "", 1);
	ДобавитьПКС(СвойстваШапки, "ОчередностьПлатежа",            "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер,Организация");
КонецПроцедуры

Процедура ПКО_Документ_СБДСПереводНаДругойСчет_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ЗаполнитьСБДСПриПолучении(ДанныеXDTO, ПолученныеДанные);
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПереводНаДругойСчет;
КонецПроцедуры

Процедура ПКО_Документ_СБДСПереводНаДругойСчет_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗаполнитьПризнакиОтраженияВУчетахБДС(ПолученныеДанные);
КонецПроцедуры
//  Документ_СБДСПеречислениеЗаработнойПлаты_Получение
Процедура ДобавитьПКО_Документ_СБДСПеречислениеЗаработнойПлаты_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_СБДСПеречислениеЗаработнойПлаты_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ПлатежноеПоручениеИсходящее;
	ПравилоКонвертации.ОбъектФормата                = "Документ.СБДСПеречислениеЗаработнойПлаты";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_СБДСПеречислениеЗаработнойПлаты_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_СБДСПеречислениеЗаработнойПлаты_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",               "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "ВидПлатежа",                    "ВидПлатежа");
	ДобавитьПКС(СвойстваШапки, "Дата",                          "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаОплаты",                    "ДатаВыписки");
	ДобавитьПКС(СвойстваШапки, "Контрагент",                    "Контрагент", , "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваШапки, "НазначениеПлатежа",             "НазначениеПлатежа");
	ДобавитьПКС(СвойстваШапки, "Номер",                         "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",                   "Организация", , "Справочник_Организации");
	ДобавитьПКС(СвойстваШапки, "Ответственный",                 "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",                "Сумма");
	ДобавитьПКС(СвойстваШапки, "СчетКонтрагента",               "БанковскийСчет", , "Справочник_БанковскиеСчета");
	ДобавитьПКС(СвойстваШапки, "СчетОрганизации",               "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчета");
	ДобавитьПКС(СвойстваШапки, "ВидОперации",                   "", 1);
	ДобавитьПКС(СвойстваШапки, "Оплачено",                      "", 1);
	ДобавитьПКС(СвойстваШапки, "ОчередностьПлатежа",            "", 1);
	ДобавитьПКС(СвойстваШапки, "СтатьяДвиженияДенежныхСредств", "", 1, "Справочник_СтатьиДДС");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ПеречислениеЗаработнойПлаты", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "СтатьяДвиженияДенежныхСредств", "СтатьяДДС", ,"Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "СуммаПлатежа",                  "Сумма");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Работники",                   "");
	ДобавитьПКС(СвойстваТЧ, "Сумма",   "", 1);
	ДобавитьПКС(СвойстваТЧ, "Физлицо", "", 1,"Справочник_ФизическиеЛица_Получение");

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер,Организация");
КонецПроцедуры

Процедура ПКО_Документ_СБДСПеречислениеЗаработнойПлаты_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ЗаполнитьСБДСПриПолучении(ДанныеXDTO, ПолученныеДанные);
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеЗП;
	
	Если ДанныеXDTO.Свойство("РасшифровкаПлатежа") Тогда
		ИндексСтроки = 0;
		ТабРаботники = Новый ТаблицаЗначений;
		ТабРаботники.Колонки.Добавить("ФизЛицо");
		ТабРаботники.Колонки.Добавить("Сумма");
	
		Для Каждого СтрРасшифровка Из ДанныеXDTO.РасшифровкаПлатежа Цикл
			Если ЗначениеЗаполнено(СтрРасшифровка.СтатьяДДС) 
				И НЕ ПолученныеДанные.ДополнительныеСвойства.Свойство("СтатьяДвиженияДенежныхСредств") Тогда
				ПолученныеДанные.ДополнительныеСвойства.Вставить("СтатьяДвиженияДенежныхСредств", СтрРасшифровка.СтатьяДДС);
			КонецЕсли;
			СтрокаПД = ПолученныеДанные.ПеречислениеЗаработнойПлаты[ИндексСтроки];
			Если ЗначениеЗаполнено(СтрРасшифровка.НомерВедомостиНаВыплатуЗарплаты)
				И ЗначениеЗаполнено(СтрРасшифровка.ДатаВедомостиНаВыплатуЗарплаты) Тогда
				ВедомостьСсылка = Документы.ЗарплатаКВыплатеОрганизаций.НайтиПоНомеру(СтрРасшифровка.НомерВедомостиНаВыплатуЗарплаты, СтрРасшифровка.ДатаВедомостиНаВыплатуЗарплаты);
				Если ЗначениеЗаполнено(ВедомостьСсылка) Тогда
					СтрокаПД.Ведомость = ВедомостьСсылка;
				КонецЕсли;
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрРасшифровка.Сотрудник) Тогда
				СтрРаботники = ТабРаботники.Добавить();
				СтрРаботники.ФизЛицо = СтрРасшифровка.Сотрудник;
				СтрРаботники.Сумма = СтрРасшифровка.Сумма;
			КонецЕсли;
			ИндексСтроки = ИндексСтроки + 1;
		КонецЦикла;
	КонецЕсли;
	Если ТабРаботники.КОличество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Работники", ТабРаботники);
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Документ_СБДСПеречислениеЗаработнойПлаты_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗаполнитьПризнакиОтраженияВУчетахБДС(ПолученныеДанные);
КонецПроцедуры
//  Документ_СБДСПлатежиВБюджет_Получение
Процедура ДобавитьПКО_Документ_СБДСПлатежиВБюджет_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_СБДСПлатежиВБюджет_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ПлатежноеПоручениеИсходящее;
	ПравилоКонвертации.ОбъектФормата                = "Документ.СБДСПлатежиВБюджет";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_СБДСПлатежиВБюджет_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_СБДСПлатежиВБюджет_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",               "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "ВидПлатежа",                    "ВидПлатежа");
	ДобавитьПКС(СвойстваШапки, "Дата",                          "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаОплаты",                    "ДатаВыписки");
	ДобавитьПКС(СвойстваШапки, "КодБК",                         "ПоказательКБК");
	ДобавитьПКС(СвойстваШапки, "КодОКАТО",                      "ОКАТО");
	ДобавитьПКС(СвойстваШапки, "Контрагент",                    "Контрагент", , "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваШапки, "НазначениеПлатежа",             "НазначениеПлатежа");
	ДобавитьПКС(СвойстваШапки, "Номер",                         "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",                   "Организация", , "Справочник_Организации");
	ДобавитьПКС(СвойстваШапки, "Ответственный",                 "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ПоказательДаты",                "ПоказательДаты");
	ДобавитьПКС(СвойстваШапки, "ПоказательНомера",              "ПоказательНомера");
	ДобавитьПКС(СвойстваШапки, "ПоказательОснования",           "ПоказательОснования");
	ДобавитьПКС(СвойстваШапки, "ПоказательПериода",             "ПоказательПериода");
	ДобавитьПКС(СвойстваШапки, "ПоказательТипа",                "ПоказательТипа");
	ДобавитьПКС(СвойстваШапки, "СтатусСоставителя",             "СтатусСоставителя");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",                "Сумма");
	ДобавитьПКС(СвойстваШапки, "СчетКонтрагента",               "БанковскийСчет", , "Справочник_БанковскиеСчета");
	ДобавитьПКС(СвойстваШапки, "СчетОрганизации",               "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчета");
	ДобавитьПКС(СвойстваШапки, "ВидОперации",                   "", 1);
	ДобавитьПКС(СвойстваШапки, "ВидПеречисленияВБюджет",        "", 1);
	ДобавитьПКС(СвойстваШапки, "Оплачено",                      "", 1);
	ДобавитьПКС(СвойстваШапки, "ОчередностьПлатежа",            "", 1);
	ДобавитьПКС(СвойстваШапки, "ПеречислениеВБюджет",           "", 1);
	ДобавитьПКС(СвойстваШапки, "СтатьяДвиженияДенежныхСредств", "", 1, "Справочник_СтатьиДДС");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "РасшифровкаПлатежа", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "СтатьяДвиженияДенежныхСредств", "СтатьяДДС", ,"Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "СуммаПлатежа",                  "Сумма");

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер,Организация");
КонецПроцедуры

Процедура ПКО_Документ_СБДСПлатежиВБюджет_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ЗаполнитьСБДСПриПолучении(ДанныеXDTO, ПолученныеДанные);
	ПолученныеДанные.ПеречислениеВБюджет = Истина;
	ПолученныеДанные.ВидПеречисленияВБюджет = Перечисления.ВидыПеречисленийВБюджет.НалоговыйПлатеж;
	
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеНалога;
	
	Если ДанныеXDTO.Свойство("РасшифровкаПлатежа") Тогда
		ИндексСтроки = 0;
		Для Каждого СтрРасшифровка Из ДанныеXDTO.РасшифровкаПлатежа Цикл
			Если ЗначениеЗаполнено(СтрРасшифровка.СтатьяДДС) 
				И НЕ ПолученныеДанные.ДополнительныеСвойства.Свойство("СтатьяДвиженияДенежныхСредств") Тогда
				ПолученныеДанные.ДополнительныеСвойства.Вставить("СтатьяДвиженияДенежныхСредств", СтрРасшифровка.СтатьяДДС);
			КонецЕсли;
			СтрокаПД = ПолученныеДанные.РасшифровкаПлатежа[ИндексСтроки];
			Если ЗначениеЗаполнено(СтрРасшифровка.СчетУчетаРасчетов) Тогда
				СтрокаПД.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.НайтиПоКоду(СтрРасшифровка.СчетУчетаРасчетов);
			КонецЕсли;
			ИндексСтроки = ИндексСтроки + 1;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Документ_СБДСПлатежиВБюджет_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗаполнитьПризнакиОтраженияВУчетахБДС(ПолученныеДанные);
КонецПроцедуры
//  Документ_СБДСПрочееСписание_Получение
Процедура ДобавитьПКО_Документ_СБДСПрочееСписание_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_СБДСПрочееСписание_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ПлатежноеПоручениеИсходящее;
	ПравилоКонвертации.ОбъектФормата                = "Документ.СБДСПрочееСписание";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_СБДСПрочееСписание_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_СБДСПрочееСписание_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",               "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "ВидПлатежа",                    "ВидПлатежа");
	ДобавитьПКС(СвойстваШапки, "Дата",                          "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаОплаты",                    "ДатаВыписки");
	ДобавитьПКС(СвойстваШапки, "Контрагент",                    "Контрагент", , "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваШапки, "НазначениеПлатежа",             "НазначениеПлатежа");
	ДобавитьПКС(СвойстваШапки, "Номер",                         "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",                   "Организация", , "Справочник_Организации");
	ДобавитьПКС(СвойстваШапки, "Ответственный",                 "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",                "Сумма");
	ДобавитьПКС(СвойстваШапки, "СчетКонтрагента",               "БанковскийСчет", , "Справочник_БанковскиеСчета");
	ДобавитьПКС(СвойстваШапки, "СчетОрганизации",               "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчета");
	ДобавитьПКС(СвойстваШапки, "ВидОперации",                   "", 1);
	ДобавитьПКС(СвойстваШапки, "Оплачено",                      "", 1);
	ДобавитьПКС(СвойстваШапки, "ОчередностьПлатежа",            "", 1);
	ДобавитьПКС(СвойстваШапки, "СтатьяДвиженияДенежныхСредств", "", 1, "Справочник_СтатьиДДС");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "РасшифровкаПлатежа", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "СтатьяДвиженияДенежныхСредств", "СтатьяДДС", ,"Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "СуммаПлатежа",                  "Сумма");

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер,Организация");
КонецПроцедуры

Процедура ПКО_Документ_СБДСПрочееСписание_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ЗаполнитьСБДСПриПолучении(ДанныеXDTO, ПолученныеДанные);
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПрочееСписаниеБезналичныхДенежныхСредств;
	
	Если ДанныеXDTO.Свойство("РасшифровкаПлатежа") Тогда
		ИндексСтроки = 0;
		Для Каждого СтрРасшифровка Из ДанныеXDTO.РасшифровкаПлатежа Цикл
			Если ЗначениеЗаполнено(СтрРасшифровка.СтатьяДДС) 
				И НЕ ПолученныеДанные.ДополнительныеСвойства.Свойство("СтатьяДвиженияДенежныхСредств") Тогда
				ПолученныеДанные.ДополнительныеСвойства.Вставить("СтатьяДвиженияДенежныхСредств", СтрРасшифровка.СтатьяДДС);
			КонецЕсли;
			СтрокаПД = ПолученныеДанные.РасшифровкаПлатежа[ИндексСтроки];
			Если ЗначениеЗаполнено(СтрРасшифровка.СчетУчетаРасчетов) Тогда
				СтрокаПД.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.НайтиПоКоду(СтрРасшифровка.СчетУчетаРасчетов);
			КонецЕсли;
			ИндексСтроки = ИндексСтроки + 1;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Документ_СБДСПрочееСписание_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗаполнитьПризнакиОтраженияВУчетахБДС(ПолученныеДанные);
КонецПроцедуры
//  Документ_СБДСПрочиеРасходы_Получение
Процедура ДобавитьПКО_Документ_СБДСПрочиеРасходы_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_СБДСПрочиеРасходы_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ПлатежноеПоручениеИсходящее;
	ПравилоКонвертации.ОбъектФормата                = "Документ.СБДСПрочиеРасходы";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_СБДСПрочиеРасходы_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_СБДСПрочиеРасходы_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",               "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "ВидПлатежа",                    "ВидПлатежа");
	ДобавитьПКС(СвойстваШапки, "Дата",                          "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаОплаты",                    "ДатаВыписки");
	ДобавитьПКС(СвойстваШапки, "Контрагент",                    "Контрагент", , "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваШапки, "НазначениеПлатежа",             "НазначениеПлатежа");
	ДобавитьПКС(СвойстваШапки, "Номер",                         "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",                   "Организация", , "Справочник_Организации");
	ДобавитьПКС(СвойстваШапки, "Ответственный",                 "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",                "Сумма");
	ДобавитьПКС(СвойстваШапки, "СчетКонтрагента",               "БанковскийСчет", , "Справочник_БанковскиеСчета");
	ДобавитьПКС(СвойстваШапки, "СчетОрганизации",               "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчета");
	ДобавитьПКС(СвойстваШапки, "ВидОперации",                   "", 1);
	ДобавитьПКС(СвойстваШапки, "Оплачено",                      "", 1);
	ДобавитьПКС(СвойстваШапки, "ОчередностьПлатежа",            "", 1);
	ДобавитьПКС(СвойстваШапки, "СтатьяДвиженияДенежныхСредств", "", 1, "Справочник_СтатьиДДС");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "РасшифровкаПлатежа", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "СтатьяДвиженияДенежныхСредств", "СтатьяДДС", ,"Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "СуммаПлатежа",                  "Сумма");

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер,Организация");
КонецПроцедуры

Процедура ПКО_Документ_СБДСПрочиеРасходы_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ЗаполнитьСБДСПриПолучении(ДанныеXDTO, ПолученныеДанные);
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПрочееСписаниеБезналичныхДенежныхСредств;
	
	Если ДанныеXDTO.Свойство("РасшифровкаПлатежа") Тогда
		ИндексСтроки = 0;
		Для Каждого СтрРасшифровка Из ДанныеXDTO.РасшифровкаПлатежа Цикл
			Если ЗначениеЗаполнено(СтрРасшифровка.СтатьяДДС) 
				И НЕ ПолученныеДанные.ДополнительныеСвойства.Свойство("СтатьяДвиженияДенежныхСредств") Тогда
				ПолученныеДанные.ДополнительныеСвойства.Вставить("СтатьяДвиженияДенежныхСредств", СтрРасшифровка.СтатьяДДС);
			КонецЕсли;
			СтрокаПД = ПолученныеДанные.РасшифровкаПлатежа[ИндексСтроки];
			Если ЗначениеЗаполнено(СтрРасшифровка.СчетРасходов) Тогда
				СтрокаПД.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.НайтиПоКоду(СтрРасшифровка.СчетРасходов);
			КонецЕсли;
			ИндексСтроки = ИндексСтроки + 1;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Документ_СБДСПрочиеРасходы_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗаполнитьПризнакиОтраженияВУчетахБДС(ПолученныеДанные);
КонецПроцедуры
//  Документ_СБДСРасчетыСКонтрагентами_Получение
Процедура ДобавитьПКО_Документ_СБДСРасчетыСКонтрагентами_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_СБДСРасчетыСКонтрагентами_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ПлатежноеПоручениеИсходящее;
	ПравилоКонвертации.ОбъектФормата                = "Документ.СБДСРасчетыСКонтрагентами";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_СБДСРасчетыСКонтрагентами_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_СБДСРасчетыСКонтрагентами_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",               "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "ВидПлатежа",                    "ВидПлатежа");
	ДобавитьПКС(СвойстваШапки, "Дата",                          "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаОплаты",                    "ДатаВыписки");
	ДобавитьПКС(СвойстваШапки, "Контрагент",                    "Контрагент", , "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваШапки, "НазначениеПлатежа",             "НазначениеПлатежа");
	ДобавитьПКС(СвойстваШапки, "Номер",                         "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",                   "Организация", , "Справочник_Организации");
	ДобавитьПКС(СвойстваШапки, "Ответственный",                 "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",                "Сумма");
	ДобавитьПКС(СвойстваШапки, "СчетКонтрагента",               "БанковскийСчет", , "Справочник_БанковскиеСчета");
	ДобавитьПКС(СвойстваШапки, "СчетОрганизации",               "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчета");
	ДобавитьПКС(СвойстваШапки, "ВидОперации",                   "", 1);
	ДобавитьПКС(СвойстваШапки, "Оплачено",                      "", 1);
	ДобавитьПКС(СвойстваШапки, "ОчередностьПлатежа",            "", 1);
	ДобавитьПКС(СвойстваШапки, "СтатьяДвиженияДенежныхСредств", "", 1, "Справочник_СтатьиДДС");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "РасшифровкаПлатежа", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "ДоговорКонтрагента",            "Договор", ,"Справочник_Договоры_Получение");
	ДобавитьПКС(СвойстваТЧ, "КратностьВзаиморасчетов",       "КратностьВзаиморасчетов");
	ДобавитьПКС(СвойстваТЧ, "КурсВзаиморасчетов",            "КурсВзаиморасчетов");
	ДобавитьПКС(СвойстваТЧ, "СтавкаНДС",                     "СтавкаНДС", ,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "СтатьяДвиженияДенежныхСредств", "СтатьяДДС", ,"Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "СуммаВзаиморасчетов",           "СуммаВзаиморасчетов");
	ДобавитьПКС(СвойстваТЧ, "СуммаНДС",                      "СуммаНДС");
	ДобавитьПКС(СвойстваТЧ, "СуммаПлатежа",                  "Сумма");

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер,Организация");
КонецПроцедуры

Процедура ПКО_Документ_СБДСРасчетыСКонтрагентами_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ЗаполнитьСБДСПриПолучении(ДанныеXDTO, ПолученныеДанные);
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПрочиеРасчетыСКонтрагентами;
	ВидРасчетов = "";
	ДанныеXDTO.Свойство("ВидРасчетов", ВидРасчетов);
	Если ЗначениеЗаполнено(ВидРасчетов) Тогда
		ВидРасчетовСтрокой = ВидРасчетов.Значение;
		Если ВидРасчетовСтрокой = "СПоставщиком" Тогда
			ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ОплатаПоставщику;
		ИначеЕсли ВидРасчетовСтрокой = "СПокупателем" Тогда
			ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ВозвратДенежныхСредствПокупателю;
		ИначеЕсли ВидРасчетовСтрокой = "КредитыИЗаймы" Тогда
			ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийППИсходящее.РасчетыПоКредитамИЗаймамСКонтрагентами;
		КонецЕсли;
	КонецЕсли;
	
	Если ДанныеXDTO.Свойство("РасшифровкаПлатежа") Тогда
		ИндексСтроки = 0;
		Для Каждого СтрРасшифровка Из ДанныеXDTO.РасшифровкаПлатежа Цикл
			Если ЗначениеЗаполнено(СтрРасшифровка.СтатьяДДС) 
				И НЕ ПолученныеДанные.ДополнительныеСвойства.Свойство("СтатьяДвиженияДенежныхСредств") Тогда
				ПолученныеДанные.ДополнительныеСвойства.Вставить("СтатьяДвиженияДенежныхСредств", СтрРасшифровка.СтатьяДДС);
			КонецЕсли;
			СтрокаПД = ПолученныеДанные.РасшифровкаПлатежа[ИндексСтроки];
			Если ЗначениеЗаполнено(СтрРасшифровка.СчетУчетаРасчетовСКонтрагентом) Тогда
				СтрокаПД.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.НайтиПоКоду(СтрРасшифровка.СчетУчетаРасчетовСКонтрагентом);
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрРасшифровка.СчетУчетаРасчетовПоАвансам) Тогда
				СтрокаПД.СчетУчетаРасчетовПоАвансам = ПланыСчетов.Хозрасчетный.НайтиПоКоду(СтрРасшифровка.СчетУчетаРасчетовПоАвансам);
			КонецЕсли; 
			
			Если НЕ ЗначениеЗаполнено(СтрокаПД.СчетУчетаРасчетовСКонтрагентом) ИЛИ НЕ ЗначениеЗаполнено(СтрокаПД.СчетУчетаРасчетовПоАвансам) Тогда
				СчетаУчета = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(ПолученныеДанные.Организация, ПолученныеДанные.Контрагент, СтрокаПД.ДоговорКонтрагента);
				Если НЕ ЗначениеЗаполнено(СтрокаПД.СчетУчетаРасчетовСКонтрагентом) Тогда
					СтрокаПД.СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетов;
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(СтрокаПД.СчетУчетаРасчетовПоАвансам) Тогда
					СтрокаПД.СчетУчетаРасчетовПоАвансам		= СчетаУчета.СчетАвансов;
				КонецЕсли;
			КонецЕсли;
			ИндексСтроки = ИндексСтроки + 1;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Документ_СБДСРасчетыСКонтрагентами_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗаполнитьПризнакиОтраженияВУчетахБДС(ПолученныеДанные);
КонецПроцедуры
//  Документ_СБДСРасчетыССотрудниками_Получение
Процедура ДобавитьПКО_Документ_СБДСРасчетыССотрудниками_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_СБДСРасчетыССотрудниками_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ПлатежноеПоручениеИсходящее;
	ПравилоКонвертации.ОбъектФормата                = "Документ.СБДСРасчетыССотрудниками";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_СБДСРасчетыССотрудниками_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_СБДСРасчетыССотрудниками_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаВзаиморасчетовРаботника", "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",               "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "ВидПлатежа",                    "ВидПлатежа");
	ДобавитьПКС(СвойстваШапки, "Дата",                          "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаОплаты",                    "ДатаВыписки");
	ДобавитьПКС(СвойстваШапки, "Контрагент",                    "Сотрудник", , "Справочник_ФизлицаВКонтрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "НазначениеПлатежа",             "НазначениеПлатежа");
	ДобавитьПКС(СвойстваШапки, "Номер",                         "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",                   "Организация", , "Справочник_Организации");
	ДобавитьПКС(СвойстваШапки, "Ответственный",                 "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",                "Сумма");
	ДобавитьПКС(СвойстваШапки, "СчетКонтрагента",               "БанковскийСчетСотрудника", , "Справочник_БанковскиеСчетаФизЛиц_Получение");
	ДобавитьПКС(СвойстваШапки, "СчетОрганизации",               "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчета");
	ДобавитьПКС(СвойстваШапки, "ФизЛицо",                       "Сотрудник", , "Справочник_ФизическиеЛица_Получение");
	ДобавитьПКС(СвойстваШапки, "ВидОперации",                   "", 1);
	ДобавитьПКС(СвойстваШапки, "Оплачено",                      "", 1);
	ДобавитьПКС(СвойстваШапки, "ОчередностьПлатежа",            "", 1);
	ДобавитьПКС(СвойстваШапки, "СтатьяДвиженияДенежныхСредств", "", 1, "Справочник_СтатьиДДС");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "РасшифровкаПлатежа", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "СтатьяДвиженияДенежныхСредств", "СтатьяДДС", ,"Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "СуммаВзаиморасчетов",           "Сумма");
	ДобавитьПКС(СвойстваТЧ, "СуммаПлатежа",                  "Сумма");

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер,Организация");
КонецПроцедуры

Процедура ПКО_Документ_СБДСРасчетыССотрудниками_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ЗаполнитьСБДСПриПолучении(ДанныеXDTO, ПолученныеДанные);
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеДенежныхСредствПодотчетнику;
	ВидРасчетов = "";
	ДанныеXDTO.Свойство("ВидРасчетов", ВидРасчетов);
	Если ЗначениеЗаполнено(ВидРасчетов) Тогда
		ВидРасчетовСтрокой = ВидРасчетов.Значение;
		Если ВидРасчетовСтрокой = "Займы" Тогда
			ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийППИсходящее.РасчетыПоКредитамИЗаймамСРаботниками;
		КонецЕсли;
	КонецЕсли;
	
	Если ДанныеXDTO.Свойство("РасшифровкаПлатежа") Тогда
		ИндексСтроки = 0;
		Для Каждого СтрРасшифровка Из ДанныеXDTO.РасшифровкаПлатежа Цикл
			Если ЗначениеЗаполнено(СтрРасшифровка.СтатьяДДС) 
				И НЕ ПолученныеДанные.ДополнительныеСвойства.Свойство("СтатьяДвиженияДенежныхСредств") Тогда
				ПолученныеДанные.ДополнительныеСвойства.Вставить("СтатьяДвиженияДенежныхСредств", СтрРасшифровка.СтатьяДДС);
			КонецЕсли;
			СтрокаПД = ПолученныеДанные.РасшифровкаПлатежа[ИндексСтроки];
			Если ЗначениеЗаполнено(СтрРасшифровка.СчетУчетаРасчетов) Тогда
				СтрокаПД.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.НайтиПоКоду(СтрРасшифровка.СчетУчетаРасчетов);
			КонецЕсли;
			ИндексСтроки = ИндексСтроки + 1;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Документ_СБДСРасчетыССотрудниками_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗаполнитьПризнакиОтраженияВУчетахБДС(ПолученныеДанные);
КонецПроцедуры
//  Документ_СборкаТоваров_Получение
Процедура ДобавитьПКО_Документ_СборкаТоваров_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_СборкаТоваров_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.КомплектацияНоменклатуры;
	ПравилоКонвертации.ОбъектФормата                = "Документ.СборкаТоваров";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_СборкаТоваров_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_СборкаТоваров_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_СборкаТоваров";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВидКомплектации",              "ВидОперации", , "Перечисление_ВидыКомплектации");
	ДобавитьПКС(СвойстваШапки, "Дата",                         "Дата");
	ДобавитьПКС(СвойстваШапки, "Количество",                   "Количество");
	ДобавитьПКС(СвойстваШапки, "Комментарий",                  "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номенклатура",                 "Номенклатура", , "Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваШапки, "Номер",                        "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",                  "Организация", , "Справочник_Организации");
	ДобавитьПКС(СвойстваШапки, "Ответственный",                "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Подразделение",                "Подразделение", , "Справочник_Подразделения");
	ДобавитьПКС(СвойстваШапки, "Склад",                        "Склад", , "Справочник_Склады");
	ДобавитьПКС(СвойстваШапки, "ВидОперации",                  "", 1);
	ДобавитьПКС(СвойстваШапки, "ЕдиницаИзмерения",             "", 1, "Справочник_ЕдиницыИзмеренияИзСтруктуры");
	ДобавитьПКС(СвойстваШапки, "СпособСписанияОстаткаТоваров", "", 1);
	ДобавитьПКС(СвойстваШапки, "ХарактеристикаНоменклатуры",   "", 1, "Справочник_ХарактеристикиИзСтруктуры_Получение");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Комплектующие", "");
	ДобавитьПКС(СвойстваТЧ, "ДоляСтоимости",              "", 1);
	ДобавитьПКС(СвойстваТЧ, "ЕдиницаИзмерения",           "", 1,"Справочник_ЕдиницыИзмеренияИзСтруктуры");
	ДобавитьПКС(СвойстваТЧ, "Количество",                 "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",               "", 1,"Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "ХарактеристикаНоменклатуры", "", 1,"Справочник_ХарактеристикиИзСтруктуры_Получение");

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер,Организация");
КонецПроцедуры

Процедура ПКО_Документ_СборкаТоваров_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийКомплектацияНоменклатуры.КомплектацияНоменклатуры;
	ПолученныеДанные.Проведен = Истина;
	ПолученныеДанные.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.СоСклада;
	ПолученныеДанные.СтатусПартии = Перечисления.СтатусыПартийТоваров.Купленный;
	ПолученныеДанные.НДСвСтоимостиТоваров = Перечисления.ДействиеНДСВСтоимостиТоваров.НеИзменять;
	
	
	Если ДанныеXDTO.Свойство("Характеристика") И ЗначениеЗаполнено(ДанныеXDTO.Характеристика) Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ХарактеристкаНоменклатуры", ПодготовитьСтруктуруДанныхСПодчинением(ДанныеXDTO.Характеристика, ДанныеXDTO.Номенклатура));
	КонецЕсли;
	Если ДанныеXDTO.Свойство("ЕдиницаИзмерения") И ЗначениеЗаполнено(ДанныеXDTO.ЕдиницаИзмерения) Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ЕдиницаИзмерения", ПодготовитьСтруктуруДанныхСПодчинением(ДанныеXDTO.ЕдиницаИзмерения, ДанныеXDTO.Номенклатура));
	КонецЕсли;
	
	
	ПравилаЗаполнения = Новый Соответствие;
	ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
	ПравилаЗаполнения.Вставить("Количество",   "Количество");
	ПравилаЗаполнения.Вставить("ДоляСтоимости", "ДоляСтоимости");
	
	МассивСтрокТовары = Новый Массив;
	Если ДанныеXDTO.Свойство("Товары")
		И ЗначениеЗаполнено(ДанныеXDTO.Товары) Тогда
		
		Для Каждого Строка Из ДанныеXDTO.Товары Цикл
			
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			
			// Единица изменения в виде структуры
			Если ЗначениеЗаполнено(Строка.ЕдиницаИзмерения) И ТипЗнч(Строка.ЕдиницаИзмерения) = Тип("Структура") Тогда
				СтруктураДанныхСтроки.Вставить("ЕдиницаИзмерения", ПодготовитьСтруктуруДанныхСПодчинением(Строка.ЕдиницаИзмерения, Строка.Номенклатура));
			КонецЕсли;
			// Характеристика в виде структуры
			Если ЗначениеЗаполнено(Строка.Характеристика) И ТипЗнч(Строка.Характеристика) = Тип("Структура") Тогда
				СтруктураДанныхСтроки.Вставить("ХарактеристкаНоменклатуры", ПодготовитьСтруктуруДанныхСПодчинением(Строка.Характеристика, Строка.Номенклатура));
			КонецЕсли;
	
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
		
		КонецЦикла;
		
	КонецЕсли;
	ПолученныеДанные.ДополнительныеСвойства.Вставить("Комплектующие", МассивСтрокТовары);
КонецПроцедуры

Процедура ПКО_Документ_СборкаТоваров_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗаполнитьПризнакиОтраженияВУчетах(ПолученныеДанные);
КонецПроцедуры
//  Документ_СписаниеТоваров_Получение
Процедура ДобавитьПКО_Документ_СписаниеТоваров_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_СписаниеТоваров_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.СписаниеТоваров;
	ПравилоКонвертации.ОбъектФормата                = "Документ.СписаниеНедостач";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_СписаниеТоваров_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_СписаниеТоваров_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_СписаниеТоваров";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",           "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",    "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",          "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",    "Организация", , "Справочник_Организации");
	ДобавитьПКС(СвойстваШапки, "Основание",      "Основание");
	ДобавитьПКС(СвойстваШапки, "Ответственный",  "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Подразделение",  "Подразделение", , "Справочник_Подразделения");
	ДобавитьПКС(СвойстваШапки, "Склад",          "Склад", , "Справочник_Склады");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента", "Сумма");
	ДобавитьПКС(СвойстваШапки, "ВидОперации",    "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Товары", "");
	ДобавитьПКС(СвойстваТЧ, "ЕдиницаИзмерения",           "", 1,"Справочник_ЕдиницыИзмеренияИзСтруктуры");
	ДобавитьПКС(СвойстваТЧ, "Количество",                 "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",               "", 1,"Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "Сумма",                      "", 1);
	ДобавитьПКС(СвойстваТЧ, "ХарактеристикаНоменклатуры", "", 1,"Справочник_ХарактеристикиИзСтруктуры_Получение");
	ДобавитьПКС(СвойстваТЧ, "Цена",                       "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер,Организация");
КонецПроцедуры

Процедура ПКО_Документ_СписаниеТоваров_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийСписаниеТоваров.ТоварыПродукция;
	ПолученныеДанные.Проведен = Истина;
	ПолученныеДанные.НДСвСтоимостиТоваров = Перечисления.ДействиеНДСВСтоимостиТоваров.НеИзменять;
	
	ПравилаЗаполнения = Новый Соответствие;
	ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
	ПравилаЗаполнения.Вставить("Количество",   "Количество");
	ПравилаЗаполнения.Вставить("Цена",         "Цена");
	ПравилаЗаполнения.Вставить("Сумма",        "Сумма");
	
	МассивСтрокТовары = Новый Массив;
	Если ДанныеXDTO.Свойство("Товары")
		И ЗначениеЗаполнено(ДанныеXDTO.Товары) Тогда
		
		Для Каждого Строка Из ДанныеXDTO.Товары Цикл
			
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			
			// Единица изменения в виде структуры
			Если ЗначениеЗаполнено(Строка.ЕдиницаИзмерения) И ТипЗнч(Строка.ЕдиницаИзмерения) = Тип("Структура") Тогда
				СтруктураДанныхСтроки.Вставить("ЕдиницаИзмерения", ПодготовитьСтруктуруДанныхСПодчинением(Строка.ЕдиницаИзмерения, Строка.Номенклатура));
			КонецЕсли;
			// Характеристика в виде структуры
			Если ЗначениеЗаполнено(Строка.Характеристика) И ТипЗнч(Строка.Характеристика) = Тип("Структура") Тогда
				СтруктураДанныхСтроки.Вставить("ХарактеристкаНоменклатуры", ПодготовитьСтруктуруДанныхСПодчинением(Строка.Характеристика, Строка.Номенклатура));
			КонецЕсли;
	
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
		
		КонецЦикла;
		
	КонецЕсли;
	ПолученныеДанные.ДополнительныеСвойства.Вставить("Товары", МассивСтрокТовары);
КонецПроцедуры

Процедура ПКО_Документ_СписаниеТоваров_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗаполнитьПризнакиОтраженияВУчетах(ПолученныеДанные);
КонецПроцедуры
//  Документ_СчетФактураВыданный_Получение
Процедура ДобавитьПКО_Документ_СчетФактураВыданный_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_СчетФактураВыданный_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.СчетФактураВыданный;
	ПравилоКонвертации.ОбъектФормата                = "Документ.СчетФактураВыданный";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_СчетФактураВыданный_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_СчетФактура";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",                              "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "ВидСчетаФактуры",                              "ВидСчетаФактуры", , "Перечисление_ВидСчетаФактурыВыставленного");
	ДобавитьПКС(СвойстваШапки, "Выставлен",                                    "Выставлен");
	ДобавитьПКС(СвойстваШапки, "ГлавныйБухгалтер",                             "ГлавныйБухгалтер", , "Справочник_ФизическиеЛица_Получение");
	ДобавитьПКС(СвойстваШапки, "Дата",                                         "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаВыставления",                              "ДатаВыставления");
	ДобавитьПКС(СвойстваШапки, "ДатаИсправляемогоКорректировочногоДокумента",  "ДатаИсправляемогоКорректировочногоДокумента");
	ДобавитьПКС(СвойстваШапки, "ДатаПлатежноРасчетногоДокумента",              "ДатаПлатежноРасчетногоДокумента");
	ДобавитьПКС(СвойстваШапки, "ДоговорКонтрагента",                           "Договор", , "Справочник_Договоры_Получение");
	ДобавитьПКС(СвойстваШапки, "ИсправляемыйСчетФактура",                      "ИсправляемыйСчетФактура", , "Документ_СчетФактураВыданный_Получение");
	ДобавитьПКС(СвойстваШапки, "КодВидаОперации",                              "КодВидаОперации");
	ДобавитьПКС(СвойстваШапки, "Комментарий",                                  "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",                                   "Контрагент", , "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваШапки, "Номер",                                        "Номер");
	ДобавитьПКС(СвойстваШапки, "НомерИсправления",                             "НомерИсправления");
	ДобавитьПКС(СвойстваШапки, "НомерИсправляемогоКорректировочногоДокумента", "НомерИсправляемогоКорректировочногоДокумента");
	ДобавитьПКС(СвойстваШапки, "НомерПлатежноРасчетногоДокумента",             "НомерПлатежноРасчетногоДокумента");
	ДобавитьПКС(СвойстваШапки, "Организация",                                  "Организация", , "Справочник_Организации");
	ДобавитьПКС(СвойстваШапки, "Ответственный",                                "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Руководитель",                                 "Руководитель", , "Справочник_ФизическиеЛица_Получение");
	ДобавитьПКС(СвойстваШапки, "СводныйКомиссионный",                          "СводныйКомиссионный");
	ДобавитьПКС(СвойстваШапки, "СтавкаНДС",                                    "СтавкаНДС", , "Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваШапки, "Сумма",                                        "Сумма");
	ДобавитьПКС(СвойстваШапки, "СуммаНДС",                                     "СуммаНДС");
	ДобавитьПКС(СвойстваШапки, "КодСпособаВыставления",                        "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Авансы",                    "Авансы");
	ДобавитьПКС(СвойстваТЧ, "Номенклатура", "Номенклатура", ,"Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "Содержание",   "Содержание");
	ДобавитьПКС(СвойстваТЧ, "СтавкаНДС",    "СтавкаНДС", ,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "Сумма",        "Сумма", ,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "СуммаНДС",     "СуммаНДС", ,"Перечисление_СтавкиНДС");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ДатаНомерДокументовОплаты", "ПлатежноРасчетныеДокументы");
	ДобавитьПКС(СвойстваТЧ, "ДатаПлатежноРасчетногоДокумента",  "ДатаДокумента");
	ДобавитьПКС(СвойстваТЧ, "НомерПлатежноРасчетногоДокумента", "НомерДокумента");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ДокументыОснования",        "");
	ДобавитьПКС(СвойстваТЧ, "ДатаИсходногоДокумента",                 "", 1);
	ДобавитьПКС(СвойстваТЧ, "ДокументОснование",                      "", 1);
	ДобавитьПКС(СвойстваТЧ, "НомерИсходногоДокумента",                "", 1);
	ДобавитьПКС(СвойстваТЧ, "УчитыватьИсправлениеИсходногоДокумента", "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер,Организация");
КонецПроцедуры

Процедура ПКО_Документ_СчетФактураВыданный_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.Проведен = Истина;
	ПолученныеДанные.КодСпособаВыставления = 1;
	Если ДанныеXDTO.Свойство("СпособВыставления") Тогда
		Если ДанныеXDTO.СпособВыставления.Значение = "НаБумажномНосителе" Тогда
			ПолученныеДанные.КодСпособаВыставления = 1;
		Иначе
			ПолученныеДанные.КодСпособаВыставления = 2;
		КонецЕсли;
	КонецЕсли;
	// Документы основания
	ПравилаЗаполнения = Новый Соответствие;
	ПравилаЗаполнения.Вставить("УчитыватьИсправлениеИсходногоДокумента", "УчитыватьИсправлениеИсходногоДокумента");
	
	МассивСтрокДокОсн = Новый Массив;
	Если ДанныеXDTO.Свойство("ДокументыОснования")
		И ЗначениеЗаполнено(ДанныеXDTO.ДокументыОснования) Тогда
		
		Для Каждого Строка Из ДанныеXDTO.ДокументыОснования Цикл
			
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			
			// Документ основание
			Если ЗначениеЗаполнено(Строка.ДокументОснование) И ТипЗнч(Строка.ДокументОснование) = Тип("Структура") Тогда
				ИмяПКО = ОпределитьИмяПКОПоДаннымXDTO(Строка.ДокументОснование);
				Если ЗначениеЗаполнено(ИмяПКО) Тогда
					СтруктураДанныхСтроки.Вставить("ДокументОснование", Новый Структура("Значение, ИмяПКО", Строка.ДокументОснование, ИмяПКО));
				КонецЕсли;
			КонецЕсли;
			// ИсходныйДокумент
			Если ЗначениеЗаполнено(Строка.ИсходныйДокумент) И ТипЗнч(Строка.ИсходныйДокумент) = Тип("Структура") Тогда
				ДатаИсходногоДокумента = Неопределено;
				НомерИсходногоДокумента = Неопределено;
				Строка.ИсходныйДокумент.Свойство("Номер", НомерИсходногоДокумента);
				Строка.ИсходныйДокумент.Свойство("Дата", ДатаИсходногоДокумента);
				СтруктураДанныхСтроки.Вставить("ДатаИсходногоДокумента", ДатаИсходногоДокумента);
				СтруктураДанныхСтроки.Вставить("НомерИсходногоДокумента", НомерИсходногоДокумента);
	
			КонецЕсли;
	
			МассивСтрокДокОсн.Добавить(СтруктураДанныхСтроки);
		
		КонецЦикла;
		
	КонецЕсли;
	ПолученныеДанные.ДополнительныеСвойства.Вставить("ДокументыОснования", МассивСтрокДокОсн);
КонецПроцедуры
//  Документ_СчетФактураПолученный_Получение
Процедура ДобавитьПКО_Документ_СчетФактураПолученный_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_СчетФактураПолученный_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.СчетФактураПолученный;
	ПравилоКонвертации.ОбъектФормата                = "Документ.СчетФактураПолученный";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_СчетФактураПолученный_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_СчетФактура";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",         "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "ВидСчетаФактуры",         "ВидСчетаФактуры", , "Перечисление_ВидСчетаФактурыПолученного_Отправка");
	ДобавитьПКС(СвойстваШапки, "Дата",                    "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоДокумента",  "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "ДатаИсправления",         "ДатаИсправления");
	ДобавитьПКС(СвойстваШапки, "ДоговорКонтрагента",      "Договор", , "Справочник_Договоры_Получение");
	ДобавитьПКС(СвойстваШапки, "ИсправляемыйСчетФактура", "ИсправляемыйСчетФактура", , "Документ_СчетФактураПолученный_Получение");
	ДобавитьПКС(СвойстваШапки, "КодВидаОперации",         "КодВидаОперации");
	ДобавитьПКС(СвойстваШапки, "Комментарий",             "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",              "Контрагент", , "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваШапки, "Номер",                   "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "НомерВходящегоДокумента", "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "НомерИсправления",        "НомерИсправления");
	ДобавитьПКС(СвойстваШапки, "Организация",             "Организация", , "Справочник_Организации");
	ДобавитьПКС(СвойстваШапки, "Ответственный",           "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "СводныйКомиссионный",     "СводныйКомиссионный");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",          "Сумма");
	ДобавитьПКС(СвойстваШапки, "СуммаНДСДокумента",       "СуммаНДС");
	ДобавитьПКС(СвойстваШапки, "КодСпособаПолучения",     "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Авансы",                          "Авансы");
	ДобавитьПКС(СвойстваТЧ, "СтавкаНДС", "СтавкаНДС", ,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "Сумма",     "Сумма");
	ДобавитьПКС(СвойстваТЧ, "СуммаНДС",  "СуммаНДС");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ДокументыОснования",              "");
	ДобавитьПКС(СвойстваТЧ, "ДатаИсходногоДокумента",                 "", 1);
	ДобавитьПКС(СвойстваТЧ, "ДокументОснование",                      "", 1);
	ДобавитьПКС(СвойстваТЧ, "НомерИсходногоДокумента",                "", 1);
	ДобавитьПКС(СвойстваТЧ, "УчитыватьИсправлениеИсходногоДокумента", "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "СчетаФактурыВыданныеПокупателям", "СчетаФактурыВыданныеПокупателям");
	ДобавитьПКС(СвойстваТЧ, "НДС",            "СуммаНДС");
	ДобавитьПКС(СвойстваТЧ, "Покупатель",     "Покупатель", ,"Справочник_Контрагенты");
	ДобавитьПКС(СвойстваТЧ, "Субкомиссионер", "Субкомиссионер", ,"Справочник_Контрагенты");
	ДобавитьПКС(СвойстваТЧ, "Сумма",          "Сумма");
	ДобавитьПКС(СвойстваТЧ, "СчетФактура",    "СчетФактураВыданный", ,"Документ_СчетФактураВыданный_Получение");

	ПравилоКонвертации.ПоляПоиска.Добавить("ДатаВходящегоДокумента,НомерВходящегоДокумента,Организация");
КонецПроцедуры

Процедура ПКО_Документ_СчетФактураПолученный_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.Проведен = Истина;
	ПолученныеДанные.КодСпособаПолучения = 1;
	Если ДанныеXDTO.Свойство("СпособВыставления") Тогда
		Если ДанныеXDTO.СпособВыставления.Значение = "НаБумажномНосителе" Тогда
			ПолученныеДанные.КодСпособаПолучения = 1;
		Иначе
			ПолученныеДанные.КодСпособаПолучения = 2;
		КонецЕсли;
	КонецЕсли;
	
	// Документы основания
	ПравилаЗаполнения = Новый Соответствие;
	ПравилаЗаполнения.Вставить("УчитыватьИсправлениеИсходногоДокумента", "УчитыватьИсправлениеИсходногоДокумента");
	
	МассивСтрокДокОсн = Новый Массив;
	Если ДанныеXDTO.Свойство("ДокументыОснования")
		И ЗначениеЗаполнено(ДанныеXDTO.ДокументыОснования) Тогда
		
		Для Каждого Строка Из ДанныеXDTO.ДокументыОснования Цикл
			
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			
			// Документ основание
			Если ЗначениеЗаполнено(Строка.ДокументОснование) И ТипЗнч(Строка.ДокументОснование) = Тип("Структура") Тогда
				ИмяПКО = ОпределитьИмяПКОПоДаннымXDTO(Строка.ДокументОснование);
				Если ЗначениеЗаполнено(ИмяПКО) Тогда
					СтруктураДанныхСтроки.Вставить("ДокументОснование", Новый Структура("Значение, ИмяПКО", Строка.ДокументОснование, ИмяПКО));
				КонецЕсли;
			КонецЕсли;
			// ИсходныйДокумент
			Если ЗначениеЗаполнено(Строка.ИсходныйДокумент) И ТипЗнч(Строка.ИсходныйДокумент) = Тип("Структура") Тогда
				ДатаИсходногоДокумента = Неопределено;
				НомерИсходногоДокумента = Неопределено;
				Строка.ИсходныйДокумент.Свойство("Номер", НомерИсходногоДокумента);
				Строка.ИсходныйДокумент.Свойство("Дата", ДатаИсходногоДокумента);
				СтруктураДанныхСтроки.Вставить("ДатаИсходногоДокумента", ДатаИсходногоДокумента);
				СтруктураДанныхСтроки.Вставить("НомерИсходногоДокумента", НомерИсходногоДокумента);
	
			КонецЕсли;
	
			МассивСтрокДокОсн.Добавить(СтруктураДанныхСтроки);
		
		КонецЦикла;
		
	КонецЕсли;
	ПолученныеДанные.ДополнительныеСвойства.Вставить("ДокументыОснования", МассивСтрокДокОсн);
КонецПроцедуры
//  Документ_УстановкаЦенНоменклатуры_Получение
Процедура ДобавитьПКО_Документ_УстановкаЦенНоменклатуры_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_УстановкаЦенНоменклатуры_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.УстановкаЦенНоменклатуры;
	ПравилоКонвертации.ОбъектФормата                = "Документ.УстановкаЦенНоменклатуры";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_УстановкаЦенНоменклатуры_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_УстановкаЦенНоменклатуры";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",          "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",   "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",         "Номер");
	ДобавитьПКС(СвойстваШапки, "Ответственный", "Ответственный", , "Справочник_Пользователи");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ТипыЦен", "");
	ДобавитьПКС(СвойстваТЧ, "ТипЦен", "", 1,"Справочник_ТипыЦенНоменклатуры");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Товары",  "");
	ДобавитьПКС(СвойстваТЧ, "ИндексСтрокиТаблицыЦен",     "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",               "", 1,"Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "ТипЦен",                     "", 1,"Справочник_ТипыЦенНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "ХарактеристикаНоменклатуры", "", 1,"Справочник_ХарактеристикиИзСтруктуры_Получение");
	ДобавитьПКС(СвойстваТЧ, "Цена",                       "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_УстановкаЦенНоменклатуры_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.Проведен = Истина;
	// ТЧ Товары
	ПравилаЗаполнения = Новый Соответствие;
	ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
	ПравилаЗаполнения.Вставить("Цена",         "Цена");
	МассивСтрокТовары = Новый Массив;
	Если ДанныеXDTO.Свойство("Товары")
		И ЗначениеЗаполнено(ДанныеXDTO.Товары) Тогда
		
		Для Каждого Строка Из ДанныеXDTO.Товары Цикл
			
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			
			// Характеристика в виде структуры
			Если ЗначениеЗаполнено(Строка.Характеристика) И ТипЗнч(Строка.Характеристика) = Тип("Структура") Тогда
				СтруктураДанныхСтроки.Вставить("ХарактеристкаНоменклатуры", ПодготовитьСтруктуруДанныхСПодчинением(Строка.Характеристика, Строка.Номенклатура));
			КонецЕсли;
			СтруктураДанныхСтроки.Вставить("ТипЦен", ДанныеXDTO.ТипЦен);
			СтруктураДанныхСтроки.Вставить("ИндексСтрокиТаблицыЦен", 0);
	
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
		
		КонецЦикла;
		
	КонецЕсли;
	ПолученныеДанные.ДополнительныеСвойства.Вставить("Товары", МассивСтрокТовары);
	
	МассивСтрокТипыЦен = Новый Массив;
	МассивСтрокТипыЦен.Добавить(Новый Структура("ТипЦен", ДанныеXDTO.ТипЦен));
	ПолученныеДанные.ДополнительныеСвойства.Вставить("ТипыЦен", МассивСтрокТипыЦен);
КонецПроцедуры
//  Справочник_БанковскиеСчетаФизЛиц_Получение
Процедура ДобавитьПКО_Справочник_БанковскиеСчетаФизЛиц_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_БанковскиеСчетаФизЛиц_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.БанковскиеСчета;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.БанковскиеСчета";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Банк",                  "Банк", , "Справочник_Банки");
	ДобавитьПКС(СвойстваШапки, "БанкДляРасчетов",       "БанкДляРасчетов", , "Справочник_Банки");
	ДобавитьПКС(СвойстваШапки, "ВалютаДенежныхСредств", "ВалютаДенежныхСредств", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "ВидСчета",              "ВидСчета");
	ДобавитьПКС(СвойстваШапки, "Владелец",              "Владелец", , "Справочник_ФизлицаВКонтрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "ДатаЗакрытия",          "ДатаЗакрытия");
	ДобавитьПКС(СвойстваШапки, "ДатаОткрытия",          "ДатаОткрытия");
	ДобавитьПКС(СвойстваШапки, "МесяцПрописью",         "ВыводитьМесяцПрописью");
	ДобавитьПКС(СвойстваШапки, "Наименование",          "Наименование");
	ДобавитьПКС(СвойстваШапки, "НомерИДатаРазрешения",  "НомерИДатаРазрешения");
	ДобавитьПКС(СвойстваШапки, "НомерСчета",            "НомерСчета");
	ДобавитьПКС(СвойстваШапки, "СуммаБезКопеек",        "ВыводитьСуммуБезКопеек");
	ДобавитьПКС(СвойстваШапки, "ТекстКорреспондента",   "ТекстКорреспондента");
	ДобавитьПКС(СвойстваШапки, "ТекстНазначения",       "ТекстНазначения");

	ПравилоКонвертации.ПоляПоиска.Добавить("Владелец,НомерСчета");
КонецПроцедуры
//  Справочник_Договоры_Получение
Процедура ДобавитьПКО_Справочник_Договоры_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_Договоры_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.ДоговорыКонтрагентов;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.Договоры";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_Договоры_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаВзаиморасчетов",     "ВалютаВзаиморасчетов", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "ВидДоговора",              "ВидДоговора", , "Перечисление_ВидыДоговоров_Получение");
	ДобавитьПКС(СвойстваШапки, "Владелец",                 "Контрагент", , "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваШапки, "Дата",                     "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",              "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Наименование",             "Наименование");
	ДобавитьПКС(СвойстваШапки, "Номер",                    "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",              "Организация", , "Справочник_Организации");
	ДобавитьПКС(СвойстваШапки, "РасчетыВУсловныхЕдиницах", "РасчетыВУсловныхЕдиницах");
	ДобавитьПКС(СвойстваШапки, "СрокДействия",             "СрокДействия");
	ДобавитьПКС(СвойстваШапки, "ТипЦен",                   "ТипЦен", , "Справочник_ТипыЦенНоменклатуры");
	ДобавитьПКС(СвойстваШапки, "УчетАгентскогоНДС",        "УчетАгентскогоНДС");
	ДобавитьПКС(СвойстваШапки, "ВедениеВзаиморасчетов",    "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("ВалютаВзаиморасчетов,ВидДоговора,Владелец,Наименование,Организация");
КонецПроцедуры

Процедура ПКО_Справочник_Договоры_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом;
КонецПроцедуры
//  Справочник_ЕдиницыИзмеренияИзСтруктуры
Процедура ДобавитьПКО_Справочник_ЕдиницыИзмеренияИзСтруктуры(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_ЕдиницыИзмеренияИзСтруктуры";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.ЕдиницыИзмерения;
	ПравилоКонвертации.ОбъектФормата                = "";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_ЕдиницыИзмеренияИзСтруктуры_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ВариантИдентификации         = "ПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Наименование",            "Наименование");
	ДобавитьПКС(СвойстваШапки, "Владелец",                "", 1);
	ДобавитьПКС(СвойстваШапки, "ЕдиницаПоКлассификатору", "", 1);
	ДобавитьПКС(СвойстваШапки, "Коэффициент",             "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Владелец,Наименование");
КонецПроцедуры

Процедура ПКО_Справочник_ЕдиницыИзмеренияИзСтруктуры_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.Коэффициент = 1;
	Если ДанныеXDTO.Свойство("КлючевыеСвойства") Тогда
		СвойстваЕИ = ДанныеXDTO.КлючевыеСвойства;
	Иначе
		СвойстваЕИ = ДанныеXDTO;
	КонецЕсли;
	ВладелецЕИ = Неопределено;
	НаименованиеЕИ = Неопределено;
	КодЕИ = Неопределено;
	СвойстваЕИ.Свойство("Номенклатура", ВладелецЕИ);
	СвойстваЕИ.Свойство("Наименование", НаименованиеЕИ);
	СвойстваЕИ.Свойство("Код", КодЕИ);
	ПолученныеДанные.Владелец = ВладелецЕИ;
	Если ЗначениеЗаполнено(НаименованиеЕИ) Тогда
		ПолученныеДанные.ЕдиницаПоКЛассификатору = Справочники.КлассификаторЕдиницИзмерения.НайтиПоНаименованию(НаименованиеЕИ);
	КонецЕсли;
	Если НЕ ЗНачениеЗаполнено(ПолученныеДанные.ЕдиницаПоКлассификатору) И ЗначениеЗаполнено(КодЕИ) Тогда
		ПолученныеДанные.ЕдиницаПоКЛассификатору = Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду(КодЕИ);
	КонецЕсли;
КонецПроцедуры
//  Справочник_Номенклатура_Получение
Процедура ДобавитьПКО_Справочник_Номенклатура_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_Номенклатура_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.Номенклатура;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.Номенклатура";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_Номенклатура_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_Номенклатура_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "АлкогольнаяПродукция",          "АлкогольнаяПродукция");
	ДобавитьПКС(СвойстваШапки, "Артикул",                       "Артикул");
	ДобавитьПКС(СвойстваШапки, "БазоваяЕдиницаИзмерения",       "ЕдиницаИзмерения", , "Справочник_КЕИ");
	ДобавитьПКС(СвойстваШапки, "ИмпортнаяАлкогольнаяПродукция", "ИмпортнаяАлкогольнаяПродукция");
	ДобавитьПКС(СвойстваШапки, "Код",                           "КодВПрограмме");
	ДобавитьПКС(СвойстваШапки, "Комментарий",                   "Описание");
	ДобавитьПКС(СвойстваШапки, "Наименование",                  "Наименование");
	ДобавитьПКС(СвойстваШапки, "НаименованиеПолное",            "НаименованиеПолное");
	ДобавитьПКС(СвойстваШапки, "Родитель",                      "Группа", , "Справочник_НоменклатураГруппа");
	ДобавитьПКС(СвойстваШапки, "СтавкаНДС",                     "СтавкаНДС", , "Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваШапки, "ВидНоменклатуры",               "", 1);
	ДобавитьПКС(СвойстваШапки, "Услуга",                        "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
КонецПроцедуры

Процедура ПКО_Справочник_Номенклатура_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ДанныеXDTO.Свойство("ТипНоменклатуры") Тогда
	
		Если ДанныеXDTO.ТипНоменклатуры.Значение = "Услуга"
			Или ДанныеXDTO.ТипНоменклатуры.Значение = "Работа" Тогда
			ПолученныеДанные.Услуга = Истина;
			ПолученныеДанные.ВидНоменклатуры = Справочники.ВидыНоменклатуры.НайтиПоНаименованию("Услуга");
		ИначеЕсли ДанныеXDTO.ТипНоменклатуры.Значение = "МногооборотнаяТара" Тогда
			ПолученныеДанные.Услуга = Ложь;
			ПолученныеДанные.ВидНоменклатуры = Справочники.ВидыНоменклатуры.НайтиПоНаименованию("Тара");
			Если НЕ ЗначениеЗаполнено(ПолученныеДанные.ВидНоменклатуры) Тогда
				ПолученныеДанные.ВидНоменклатуры = Справочники.ВидыНоменклатуры.НайтиПоНаименованию("Товар");
			КонецЕсли;
		Иначе
			ПолученныеДанные.Услуга = Ложь;
			ПолученныеДанные.ВидНоменклатуры = Справочники.ВидыНоменклатуры.НайтиПоНаименованию("Товар");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Справочник_Номенклатура_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если ДанныеИБ = Неопределено Тогда
		ЕИПоКлассификатору = ПолученныеДанные.БазоваяЕдиницаИзмерения;
		СпрСсылка = ПолученныеДанные.ПолучитьСсылкуНового();
		ДанныеДляЗаписиВИБ = ПолученныеДанные;
	Иначе
		ЕИПоКлассификатору = ДанныеИБ.БазоваяЕдиницаИзмерения;
		СпрСсылка = ДанныеИБ.Ссылка;
		ДанныеДляЗаписиВИБ = ДанныеИБ;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ДанныеДляЗаписиВИБ.ЕдиницаХраненияОстатков)
		И ЗначениеЗаполнено(ЕИПоКлассификатору) Тогда
		ИмяЕИ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЕИПоКлассификатору, "Наименование");
		ЕдХранения = Справочники.ЕдиницыИзмерения.НайтиПоНаименованию(ИмяЕИ,,,СпрСсылка);
		Если НЕ ЗначениеЗаполнено(ЕдХранения) Тогда
			НоваяЕИ = Справочники.ЕдиницыИзмерения.СоздатьЭлемент();
			НоваяЕИ.Наименование = ИмяЕИ;
			НоваяЕИ.Владелец = СпрСсылка;
			НоваяЕИ.КОэффициент = 1;
			НоваяЕИ.ЕдиницаПоКлассификатору = ЕИПоКлассификатору;
			НоваяЕИ.УстановитьНовыйКод();
			НоваяЕИ.ОбменДанными.Загрузка = Истина;
			НоваяЕИ.Записать();
			ЕдХранения = НоваяЕИ.Ссылка;	
		КонецЕсли;
		ДанныеДляЗаписиВИБ.ЕдиницаХраненияОстатков = ЕдХранения;
	КонецЕсли;
КонецПроцедуры
//  Справочник_СпецификацииНоменклатуры_Получение
Процедура ДобавитьПКО_Справочник_СпецификацииНоменклатуры_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_СпецификацииНоменклатуры_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.СпецификацииНоменклатуры;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.СпецификацииНоменклатуры";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_СпецификацииНоменклатуры_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Код",             "КодВПрограмме");
	ДобавитьПКС(СвойстваШапки, "Комментарий",     "Описание");
	ДобавитьПКС(СвойстваШапки, "Наименование",    "Наименование");
	ДобавитьПКС(СвойстваШапки, "Активная",        "", 1);
	ДобавитьПКС(СвойстваШапки, "ВидСпецификации", "", 1);
	ДобавитьПКС(СвойстваШапки, "Состояние",       "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ВыходныеИзделия",       "");
	ДобавитьПКС(СвойстваТЧ, "ЕдиницаИзмерения",           "", 1,"Справочник_ЕдиницыИзмеренияИзСтруктуры");
	ДобавитьПКС(СвойстваТЧ, "Количество",                 "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",               "", 1,"Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "ХарактеристикаНоменклатуры", "", 1,"Справочник_ХарактеристикиИзСтруктуры_Получение");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ИсходныеКомплектующие", "");
	ДобавитьПКС(СвойстваТЧ, "ЕдиницаИзмерения",           "", 1,"Справочник_ЕдиницыИзмеренияИзСтруктуры");
	ДобавитьПКС(СвойстваТЧ, "Количество",                 "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",               "", 1,"Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "ХарактеристикаНоменклатуры", "", 1,"Справочник_ХарактеристикиИзСтруктуры_Получение");

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование,ЭтоГруппа");
КонецПроцедуры

Процедура ПКО_Справочник_СпецификацииНоменклатуры_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.Активная = Истина;
	ПолученныеДанные.ВидСпецификации = Перечисления.ВидыСпецификаций.Сборочная;
	ПолученныеДанные.Состояние = Перечисления.СостоянияОбъектов.Утвержден;
	
	ПравилаЗаполнения = Новый Соответствие;
	ПравилаЗаполнения.Вставить("Номенклатура",            "Номенклатура");
	ПравилаЗаполнения.Вставить("Количество",              "Количество");
	
	МассивСтрокКомплектующие = Новый Массив;
	
	Если ДанныеXDTO.Свойство("Товары")
		И ЗначениеЗаполнено(ДанныеXDTO.Товары) Тогда
		
		Для Каждого Строка Из ДанныеXDTO.Товары Цикл
			
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			
			// Единица изменения в виде структуры
			Если ЗначениеЗаполнено(Строка.ЕдиницаИзмерения) И ТипЗнч(Строка.ЕдиницаИзмерения) = Тип("Структура") Тогда
				СтруктураДанныхСтроки.Вставить("ЕдиницаИзмерения", ПодготовитьСтруктуруДанныхСПодчинением(Строка.ЕдиницаИзмерения, Строка.Номенклатура));
			КонецЕсли;
			// Характеристика в виде структуры
			Если ЗначениеЗаполнено(Строка.Характеристика) И ТипЗнч(Строка.Характеристика) = Тип("Структура") Тогда
				СтруктураДанныхСтроки.Вставить("ХарактеристкаНоменклатуры", ПодготовитьСтруктуруДанныхСПодчинением(Строка.Характеристика, Строка.Номенклатура));
			КонецЕсли;
	
	
			МассивСтрокКомплектующие.Добавить(СтруктураДанныхСтроки);
		
		КонецЦикла;
		
	КонецЕсли;
	ПолученныеДанные.ДополнительныеСвойства.Вставить("ИсходныеКомплектующие", МассивСтрокКомплектующие);
	
	МассивСтрокВыходные = Новый Массив;
	СтруктураДанныхСтроки = Новый Структура("Номенклатура, Количество", ДанныеXDTO.Номенклатура, ДанныеXDTO.Количество);
	Если ДанныеXDTO.Свойство("Характеристика") Тогда
		СтруктураДанныхСтроки.Вставить("ХарактеристикаНоменклатуры", ПодготовитьСтруктуруДанныхСПодчинением(ДанныеXDTO.Характеристика, ДанныеXDTO.Номенклатура));
	КонецЕсли;
	Если ДанныеXDTO.Свойство("ЕдиницаИзмерения") И ТипЗнч(ДанныеXDTO.ЕдиницаИзмерения) = Тип("Структура") Тогда
		СтруктураДанныхСтроки.Вставить("ЕдиницаИзмерения", ПодготовитьСтруктуруДанныхСПодчинением(ДанныеXDTO.ЕдиницаИзмерения, ДанныеXDTO.Номенклатура));
	КонецЕсли;
	МассивСтрокВыходные.Добавить(СтруктураДанныхСтроки);
	ПолученныеДанные.ДополнительныеСвойства.Вставить("ВыходныеИзделия", МассивСтрокВыходные);
КонецПроцедуры
//  Справочник_СтатьиЗатрат_Получение
Процедура ДобавитьПКО_Справочник_СтатьиЗатрат_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_СтатьиЗатрат_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.СтатьиЗатрат;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.СтатьиРасходов";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Код",          "КодВПрограмме");
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
КонецПроцедуры
//  Справочник_ФизическиеЛица_Получение
Процедура ДобавитьПКО_Справочник_ФизическиеЛица_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_ФизическиеЛица_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.ФизическиеЛица;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.ФизическиеЛица";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_ФизическиеЛица_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_ФизическиеЛица_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ДатаРождения",      "ДатаРождения");
	ДобавитьПКС(СвойстваШапки, "ИНН",               "ИНН");
	ДобавитьПКС(СвойстваШапки, "Код",               "КодВПрограмме");
	ДобавитьПКС(СвойстваШапки, "МестоРождения",     "МестоРождения");
	ДобавитьПКС(СвойстваШапки, "Наименование",      "ФИО");
	ДобавитьПКС(СвойстваШапки, "Пол",               "Пол", , "Перечисление_ПолФизлиц");
	ДобавитьПКС(СвойстваШапки, "Родитель",          "Группа", , "Справочник_ФизическиеЛицаГруппа");
	ДобавитьПКС(СвойстваШапки, "СтраховойНомерПФР", "СтраховойНомерПФР");

	ПравилоКонвертации.ПоляПоиска.Добавить("ДатаРождения,Наименование");
	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
КонецПроцедуры

Процедура ПКО_Справочник_ФизическиеЛица_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ДанныеXDTO.Свойство("ДанныеФИО") И ДанныеXDTO.ДанныеФИО.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ПодробныеДанныеФИО", ДанныеXDTO.ДанныеФИО);
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Справочник_ФизическиеЛица_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ФизЛицоСсылка = ?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка);
	ЗагрузитьПодробныеДанныеФИО(ПолученныеДанные, ФизЛицоСсылка);
КонецПроцедуры
//  Справочник_ФизлицаВКонтрагенты_Получение
Процедура ДобавитьПКО_Справочник_ФизлицаВКонтрагенты_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_ФизлицаВКонтрагенты_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.Контрагенты;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.ФизическиеЛица";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_ФизлицаВКонтрагенты_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ИНН",          "ИНН");
	ДобавитьПКС(СвойстваШапки, "Наименование", "ФИО");
	ДобавитьПКС(СвойстваШапки, "ЮрФизЛицо",    "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
КонецПроцедуры

Процедура ПКО_Справочник_ФизлицаВКонтрагенты_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо;
КонецПроцедуры
//  Справочник_ХарактеристикиИзСтруктуры_Получение
Процедура ДобавитьПКО_Справочник_ХарактеристикиИзСтруктуры_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_ХарактеристикиИзСтруктуры_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.ХарактеристикиНоменклатуры;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.ХарактеристикиНоменклатуры";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_ХарактеристикиИзСтруктуры_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_ХарактеристикиИзСтруктуры_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "ПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");
	ДобавитьПКС(СвойстваШапки, "Владелец",     "", 1, "Справочник_Номенклатура_Получение");

	ПравилоКонвертации.ПоляПоиска.Добавить("Владелец,Наименование");
КонецПроцедуры

Процедура ПКО_Справочник_ХарактеристикиИзСтруктуры_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ДанныеXDTO.Свойство("КлючевыеСвойства") Тогда
		СвойстваХарактеристики = ДанныеXDTO.КлючевыеСвойства;
	Иначе
		СвойстваХарактеристики = ДанныеXDTO;
	КонецЕсли;
	ПолученныеДанные.ДополнительныеСвойства.Вставить("Владелец", СвойстваХарактеристики.Номенклатура);
КонецПроцедуры

Процедура ПКО_Справочник_ХарактеристикиИзСтруктуры_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ПолученныеДанные.Активная = Истина;
КонецПроцедуры
//  ОтправкаИПолучение
//  Справочник_Банки
Процедура ДобавитьПКО_Справочник_Банки(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_Банки";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.Банки;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.Банки";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Адрес",        "Адрес");
	ДобавитьПКС(СвойстваШапки, "Город",        "Город");
	ДобавитьПКС(СвойстваШапки, "Код",          "БИК");
	ДобавитьПКС(СвойстваШапки, "КоррСчет",     "КоррСчет");
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");
	ДобавитьПКС(СвойстваШапки, "Телефоны",     "Телефоны");

	ПравилоКонвертации.ПоляПоиска.Добавить("Код");
КонецПроцедуры
//  Справочник_БанковскиеСчета
Процедура ДобавитьПКО_Справочник_БанковскиеСчета(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_БанковскиеСчета";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.БанковскиеСчета;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.БанковскиеСчета";
	ПравилоКонвертации.ПриОтправкеДанных            = "ПКО_Справочник_БанковскиеСчета_ПриОтправкеДанных";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_БанковскиеСчета_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Банк",                  "Банк", , "Справочник_Банки");
	ДобавитьПКС(СвойстваШапки, "БанкДляРасчетов",       "БанкДляРасчетов", , "Справочник_Банки");
	ДобавитьПКС(СвойстваШапки, "ВалютаДенежныхСредств", "ВалютаДенежныхСредств", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "ДатаЗакрытия",          "ДатаЗакрытия");
	ДобавитьПКС(СвойстваШапки, "ДатаОткрытия",          "ДатаОткрытия");
	ДобавитьПКС(СвойстваШапки, "МесяцПрописью",         "ВыводитьМесяцПрописью");
	ДобавитьПКС(СвойстваШапки, "Наименование",          "Наименование");
	ДобавитьПКС(СвойстваШапки, "НомерИДатаРазрешения",  "НомерИДатаРазрешения");
	ДобавитьПКС(СвойстваШапки, "НомерСчета",            "НомерСчета");
	ДобавитьПКС(СвойстваШапки, "СуммаБезКопеек",        "ВыводитьСуммуБезКопеек");
	ДобавитьПКС(СвойстваШапки, "ТекстКорреспондента",   "ТекстКорреспондента");
	ДобавитьПКС(СвойстваШапки, "ТекстНазначения",       "ТекстНазначения");
	ДобавитьПКС(СвойстваШапки, "",                      "ВидСчета", 1);
	ДобавитьПКС(СвойстваШапки, "",                      "Владелец", 1);
	ДобавитьПКС(СвойстваШапки, "Владелец",              "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Владелец,НомерСчета");
КонецПроцедуры

Процедура ПКО_Справочник_БанковскиеСчета_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если ТипЗнч(ДанныеИБ.Владелец) = Тип("СправочникСсылка.Контрагенты") Тогда
		ИмяПКО = "Справочник_Контрагенты";
	Иначе
		ИмяПКО = "Справочник_Организации";
	КонецЕсли;
	ДанныеXDTO.КлючевыеСвойства.Вставить("Владелец", Новый Структура("Значение, ИмяПКО", ДанныеИБ.Владелец, ИмяПКО));
	ВидСчетаДанныеИБ = НРег(СокрЛП(ДанныеИБ.ВидСчета));
	ВидСчетаСтрокой = "";
	Если Найти(ВидСчетаДанныеИБ, "расчет") > 0 Тогда
		ВидСчетаСтрокой = "Расчетный";
	ИначеЕсли Найти(ВидСчетаДанныеИБ, "депозит") > 0 Тогда
		ВидСчетаСтрокой = "Депозитный";
	ИначеЕсли Найти(ВидСчетаДанныеИБ, "ссуд") > 0 Тогда
		ВидСчетаСтрокой = "Ссудный";
	ИначеЕсли Найти(ВидСчетаДанныеИБ, "иной") > 0 Тогда
		ВидСчетаСтрокой = "Иной";
	ИначеЕсли Найти(ВидСчетаДанныеИБ, "аккредит") > 0 Тогда
		ВидСчетаСтрокой = "Аккредитивы";
	ИначеЕсли Найти(ВидСчетаДанныеИБ, "чеков") > 0 Тогда
		ВидСчетаСтрокой = "ЧековыеКнижки";
	Иначе
		ВидСчетаСтрокой = "Расчетный";
	КонецЕсли;
	ДанныеXDTO.Вставить("ВидСчета", ВидСчетаСтрокой);
КонецПроцедуры

Процедура ПКО_Справочник_БанковскиеСчета_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Владелец = Неопределено;
	Если ДанныеXDTO.Свойство("КлючевыеСвойства")
		И ДанныеXDTO.КлючевыеСвойства.Свойство("Владелец") Тогда
		Владелец = ДанныеXDTO.КлючевыеСвойства.Владелец;
	ИначеЕсли ДанныеXDTO.Свойство("Владелец") Тогда
		Владелец = ДанныеXDTO.Владелец;
	КонецЕсли;
	Если Владелец <> Неопределено Тогда
		ТипВладельца = Владелец.ТипЗначения;
		Если Найти(ТипВладельца, "Контрагент") > 0 Тогда
			ИмяПКОВладелец = "Справочник_Контрагенты";
		Иначе
			ИмяПКОВладелец = "Справочник_Организации";
		КонецЕсли;
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Владелец", Новый Структура("Значение, ИмяПКО", Владелец, ИмяПКОВладелец));
	КонецЕсли;
КонецПроцедуры
//  Справочник_Валюты
Процедура ДобавитьПКО_Справочник_Валюты(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_Валюты";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.Валюты;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.Валюты";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Код",                       "Код");
	ДобавитьПКС(СвойстваШапки, "Наименование",              "Наименование");
	ДобавитьПКС(СвойстваШапки, "НаименованиеПолное",        "НаименованиеПолное");
	ДобавитьПКС(СвойстваШапки, "ПараметрыПрописиНаРусском", "ПараметрыПрописиНаРусском");

	ПравилоКонвертации.ПоляПоиска.Добавить("Код,Наименование");
	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
КонецПроцедуры
//  Справочник_КЕИ
Процедура ДобавитьПКО_Справочник_КЕИ(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_КЕИ";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.КлассификаторЕдиницИзмерения;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.ЕдиницыИзмерения";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Код",                "Код");
	ДобавитьПКС(СвойстваШапки, "Наименование",       "Наименование");
	ДобавитьПКС(СвойстваШапки, "НаименованиеПолное", "НаименованиеПолное");

	ПравилоКонвертации.ПоляПоиска.Добавить("Код,Наименование");
	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
КонецПроцедуры
//  Справочник_Контрагенты
Процедура ДобавитьПКО_Справочник_Контрагенты(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_Контрагенты";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.Контрагенты;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.Контрагенты";
	ПравилоКонвертации.ПриОтправкеДанных            = "ПКО_Справочник_Контрагенты_ПриОтправкеДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_Контрагенты";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ГоловнойКонтрагент",        "ГоловнойКонтрагент", , "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваШапки, "ИНН",                       "ИНН");
	ДобавитьПКС(СвойстваШапки, "КодПоОКПО",                 "ОКПО");
	ДобавитьПКС(СвойстваШапки, "КПП",                       "КПП");
	ДобавитьПКС(СвойстваШапки, "Наименование",              "Наименование");
	ДобавитьПКС(СвойстваШапки, "НаименованиеПолное",        "НаименованиеПолное");
	ДобавитьПКС(СвойстваШапки, "ОбособленноеПодразделение", "ОбособленноеПодразделение");
	ДобавитьПКС(СвойстваШапки, "ОсновнойБанковскийСчет",    "ОсновнойБанковскийСчет", , "Справочник_БанковскиеСчета");
	ДобавитьПКС(СвойстваШапки, "Родитель",                  "Группа", , "Справочник_КонтрагентыГруппа");
	ДобавитьПКС(СвойстваШапки, "ЮрФизЛицо",                 "ЮридическоеФизическоеЛицо", , "Перечисление_ЮрФизЛицо");
	ДобавитьПКС(СвойстваШапки, "",                          "ОсновнойДоговор", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "КонтактнаяИнформация");
	ДобавитьПКС(СвойстваТЧ, "", "ВидКонтактнойИнформации", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЗначенияПолей", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НаименованиеКонтактнойИнформации", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("ИНН,Наименование,ЭтоГруппа");
	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование,ЭтоГруппа");
КонецПроцедуры

Процедура ПКО_Справочник_Контрагенты_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если НЕ ЗначениеЗаполнено(ДанныеИБ.ЮрФизЛицо) Тогда
		Если СтекВыгрузки.Количество() > 0 Тогда
			ДанныеXDTO.КлючевыеСвойства.Вставить("ЮридическоеФизическоеЛицо", "ЮридическоеЛицо");
		Иначе
			ДанныеXDTO.Вставить("ЮридическоеФизическоеЛицо", "ЮридическоеЛицо");
		КонецЕсли;
	КонецЕсли;
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	ПодготовитьДанныеКонтактнаяИнформация(ДанныеИБ, ДанныеXDTO);
КонецПроцедуры
//  Справочник_КонтрагентыГруппа
Процедура ДобавитьПКО_Справочник_КонтрагентыГруппа(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_КонтрагентыГруппа";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.Контрагенты;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.КонтрагентыГруппа";
	ПравилоКонвертации.ПравилоДляГруппыСправочника  = Истина;
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");
	ДобавитьПКС(СвойстваШапки, "Родитель",     "Группа", , "Справочник_КонтрагентыГруппа");

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование,ЭтоГруппа");
КонецПроцедуры
//  Справочник_НоменклатураГруппа
Процедура ДобавитьПКО_Справочник_НоменклатураГруппа(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_НоменклатураГруппа";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.Номенклатура;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.НоменклатураГруппа";
	ПравилоКонвертации.ПравилоДляГруппыСправочника  = Истина;
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Код",          "КодВПрограмме");
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");
	ДобавитьПКС(СвойстваШапки, "Родитель",     "Группа", , "Справочник_НоменклатураГруппа");

КонецПроцедуры
//  Справочник_Организации
Процедура ДобавитьПКО_Справочник_Организации(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_Организации";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.Организации;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.Организации";
	ПравилоКонвертации.ПриОтправкеДанных            = "ПКО_Справочник_Организации_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ИНН",                                           "ИНН");
	ДобавитьПКС(СвойстваШапки, "КодПоОКАТО",                                    "ОКАТО");
	ДобавитьПКС(СвойстваШапки, "КодПоОКПО",                                     "ОКПО");
	ДобавитьПКС(СвойстваШапки, "КПП",                                           "КПП");
	ДобавитьПКС(СвойстваШапки, "Наименование",                                  "Наименование");
	ДобавитьПКС(СвойстваШапки, "НаименованиеПлательщикаПриПеречисленииНалогов", "НаименованиеПлательщикаПриПеречисленииНалогов");
	ДобавитьПКС(СвойстваШапки, "ОГРН",                                          "ОГРН");
	ДобавитьПКС(СвойстваШапки, "Префикс",                                       "Префикс");
	ДобавитьПКС(СвойстваШапки, "СвидетельствоДатаВыдачи",                       "СвидетельствоДатаВыдачи");
	ДобавитьПКС(СвойстваШапки, "СвидетельствоСерияНомер",                       "СвидетельствоСерияНомер");
	ДобавитьПКС(СвойстваШапки, "ЮрФизЛицо",                                     "ЮридическоеФизическоеЛицо", , "Перечисление_ЮрФизЛицо");
	ДобавитьПКС(СвойстваШапки, "",                                              "НаименованиеСокращенное", 1);
	ДобавитьПКС(СвойстваШапки, "НаименованиеПолное",                            "НаименованиеПолное", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "КонтактнаяИнформация");
	ДобавитьПКС(СвойстваТЧ, "", "ВидКонтактнойИнформации", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЗначенияПолей", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НаименованиеКонтактнойИнформации", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
КонецПроцедуры

Процедура ПКО_Справочник_Организации_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если НЕ ЗначениеЗаполнено(ДанныеИБ.НаименованиеПолное) Тогда
		Если СтекВыгрузки.Количество() = 1 Тогда
			ДанныеXDTO.Вставить("НаименованиеПолное", ДанныеИБ.Наименование);
		Иначе
			ДанныеXDTO.КлючевыеСвойства.Вставить("НаименованиеПолное", ДанныеИБ.Наименование);
		КонецЕсли;
	КонецЕсли;
	
	ДанныеXDTO.Вставить("НаименованиеСокращенное", ДанныеИБ.Наименование);
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ПодготовитьДанныеКонтактнаяИнформация(ДанныеИБ, ДанныеXDTO);
КонецПроцедуры
//  Справочник_Подразделения
Процедура ДобавитьПКО_Справочник_Подразделения(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_Подразделения";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.Подразделения;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.Подразделения";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");
	ДобавитьПКС(СвойстваШапки, "Родитель",     "ВышестоящееПодразделение", , "Справочник_Подразделения");

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
КонецПроцедуры
//  Справочник_Пользователи
Процедура ДобавитьПКО_Справочник_Пользователи(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_Пользователи";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.Пользователи;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.Пользователи";
	ПравилоКонвертации.ПриОтправкеДанных            = "ПКО_Справочник_Пользователи_ПриОтправкеДанных";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_Пользователи_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");
	ДобавитьПКС(СвойстваШапки, "",             "ФизическоеЛицо", 1, "Справочник_ФизическиеЛица_Отправка");
	ДобавитьПКС(СвойстваШапки, "ФизЛицо",      "", 1, "Справочник_ФизическиеЛица_Получение");

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
КонецПроцедуры

Процедура ПКО_Справочник_Пользователи_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.Вставить("ФизическоеЛицо", ДанныеИБ.ФизЛицо);
КонецПроцедуры

Процедура ПКО_Справочник_Пользователи_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ДанныеXDTO.Свойство("ФизическоеЛицо") Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ФизЛицо", ДанныеXDTO.ФизическоеЛицо);
	КонецЕсли;
КонецПроцедуры
//  Справочник_Склады
Процедура ДобавитьПКО_Справочник_Склады(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_Склады";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.Склады;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.Склады";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВидСклада",               "ТипСклада", , "Перечисление_ТипыСкладов");
	ДобавитьПКС(СвойстваШапки, "Наименование",            "Наименование");
	ДобавитьПКС(СвойстваШапки, "Родитель",                "Группа", , "Справочник_СкладыГруппа");
	ДобавитьПКС(СвойстваШапки, "ТипЦенРозничнойТорговли", "ТипЦенРозничнойТорговли", , "Справочник_ТипыЦенНоменклатуры");

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
КонецПроцедуры
//  Справочник_СкладыГруппа
Процедура ДобавитьПКО_Справочник_СкладыГруппа(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_СкладыГруппа";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.Склады;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.СкладыГруппа";
	ПравилоКонвертации.ПравилоДляГруппыСправочника  = Истина;
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");
	ДобавитьПКС(СвойстваШапки, "Родитель",     "Группа", , "Справочник_СкладыГруппа");

КонецПроцедуры
//  Справочник_СпецификацииНоменклатурыГруппа
Процедура ДобавитьПКО_Справочник_СпецификацииНоменклатурыГруппа(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_СпецификацииНоменклатурыГруппа";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.СпецификацииНоменклатуры;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.СпецификацииНоменклатурыГруппа";
	ПравилоКонвертации.ПравилоДляГруппыСправочника  = Истина;
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Код",          "КодВПрограмме");
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");
	ДобавитьПКС(СвойстваШапки, "Родитель",     "Группа", , "Справочник_СпецификацииНоменклатурыГруппа");

	ПравилоКонвертации.ПоляПоиска.Добавить("Код,Наименование");
	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
КонецПроцедуры
//  Справочник_СтатьиДДС
Процедура ДобавитьПКО_Справочник_СтатьиДДС(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_СтатьиДДС";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.СтатьиДвиженияДенежныхСредств;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.СтатьиДДС";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Код",          "КодВПрограмме");
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");
	ДобавитьПКС(СвойстваШапки, "Родитель",     "Группа", , "Справочник_СтатьиДДСГруппа");

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
КонецПроцедуры
//  Справочник_СтатьиДДСГруппа
Процедура ДобавитьПКО_Справочник_СтатьиДДСГруппа(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_СтатьиДДСГруппа";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.СтатьиДвиженияДенежныхСредств;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.СтатьиДДСГруппа";
	ПравилоКонвертации.ПравилоДляГруппыСправочника  = Истина;
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Код",          "КодВПрограмме");
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");
	ДобавитьПКС(СвойстваШапки, "Родитель",     "Группа", , "Справочник_СтатьиДДСГруппа");

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
КонецПроцедуры
//  Справочник_СтраныМира
Процедура ДобавитьПКО_Справочник_СтраныМира(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_СтраныМира";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.КлассификаторСтранМира;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.СтраныМира";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Код",                "Код");
	ДобавитьПКС(СвойстваШапки, "КодАльфа2",          "КодАльфа2");
	ДобавитьПКС(СвойстваШапки, "Наименование",       "Наименование");
	ДобавитьПКС(СвойстваШапки, "НаименованиеПолное", "НаименованиеПолное");

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
КонецПроцедуры
//  Справочник_ТипыЦенНоменклатуры
Процедура ДобавитьПКО_Справочник_ТипыЦенНоменклатуры(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_ТипыЦенНоменклатуры";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.ТипыЦенНоменклатуры;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.ТипыЦен";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаЦены",               "ВалютаЦены", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Наименование",             "Наименование");
	ДобавитьПКС(СвойстваШапки, "ОкруглятьВБольшуюСторону", "ОкруглятьВБольшуюСторону");
	ДобавитьПКС(СвойстваШапки, "ПроцентСкидкиНаценки",     "ТочностьОкругления");
	ДобавитьПКС(СвойстваШапки, "ЦенаВключаетНДС",          "ЦенаВключаетНДС");

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование,ВалютаЦены");
КонецПроцедуры
//  Справочник_ФизическиеЛицаГруппа
Процедура ДобавитьПКО_Справочник_ФизическиеЛицаГруппа(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_ФизическиеЛицаГруппа";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.ФизическиеЛица;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.ФизическиеЛицаГруппа";
	ПравилоКонвертации.ПравилоДляГруппыСправочника  = Истина;
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Код",          "КодВПрограмме");
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");
	ДобавитьПКС(СвойстваШапки, "Родитель",     "Группа", , "Справочник_ФизическиеЛицаГруппа");

КонецПроцедуры

//  ПКПД
// Заполняет таблицу правил конвертации предопределенных данных.
//
// Параметры:
//  НаправлениеОбмена - строка ("Отправка" либо "Получение").
//  ПравилаКонвертации - таблица значений, в которую будут добавлены правила. 
Процедура ЗаполнитьПравилаКонвертацииПредопределенныхДанных(НаправлениеОбмена, ПравилаКонвертации) Экспорт
	Если НаправлениеОбмена = "Отправка" Тогда
		// Перечисление_ВидыДоговоров.
		ПравилоКонвертации           = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД   = "Перечисление_ВидыДоговоров";
		ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ВидыДоговоровКонтрагентов;
		ПравилоКонвертации.ТипXDTO   = "ВидыДоговоров";
	
		ЗначенияДляОтправки = Новый Соответствие;
		ЗначенияДляОтправки.Вставить(Перечисления.ВидыДоговоровКонтрагентов.Прочее, "Прочее");
		ЗначенияДляОтправки.Вставить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером, "СКомиссионером");
		ЗначенияДляОтправки.Вставить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентом, "СКомитентом");
		ЗначенияДляОтправки.Вставить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем, "СПокупателем");
		ЗначенияДляОтправки.Вставить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком, "СПоставщиком");
		ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	
		// Перечисление_СпособыПоступленияАктивов.
		ПравилоКонвертации           = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД   = "Перечисление_СпособыПоступленияАктивов";
		ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.СпособыПоступленияАктивов;
		ПравилоКонвертации.ТипXDTO   = "СпособыПоступленияАктивов";
	
		ЗначенияДляОтправки = Новый Соответствие;
		ЗначенияДляОтправки.Вставить(Перечисления.СпособыПоступленияАктивов.БезвозмездноеПоступление, "БезвозмездноеПоступление");
		ЗначенияДляОтправки.Вставить(Перечисления.СпособыПоступленияАктивов.ВкладВСовместнуюДеятельность, "ВкладВСовместнуюДеятельность");
		ЗначенияДляОтправки.Вставить(Перечисления.СпособыПоступленияАктивов.ВкладВУставныйКапитал, "ВкладВУставныйКапитал");
		ЗначенияДляОтправки.Вставить(Перечисления.СпособыПоступленияАктивов.ВОбменНаДругоеИмущество, "ВОбменНаДругоеИмущество");
		ЗначенияДляОтправки.Вставить(Перечисления.СпособыПоступленияАктивов.ПоДоговоруАренды, "ПоДоговоруАренды");
		ЗначенияДляОтправки.Вставить(Перечисления.СпособыПоступленияАктивов.ПоступлениеВДоверительноеУправление, "ПоступлениеВДоверительноеУправление");
		ЗначенияДляОтправки.Вставить(Перечисления.СпособыПоступленияАктивов.ПриобретениеЗаПлату, "ПриобретениеЗаПлату");
		ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	КонецЕсли;
	Если НаправлениеОбмена = "Получение" Тогда
		// Перечисление_ВидыДоговоров_Получение.
		ПравилоКонвертации           = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД   = "Перечисление_ВидыДоговоров_Получение";
		ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ВидыДоговоровКонтрагентов;
		ПравилоКонвертации.ТипXDTO   = "ВидыДоговоров";
	
		ЗначенияДляПолучения = Новый Соответствие;
		ЗначенияДляПолучения.Вставить("Прочее", Перечисления.ВидыДоговоровКонтрагентов.Прочее);
		ЗначенияДляПолучения.Вставить("СКомиссионером", Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
		ЗначенияДляПолучения.Вставить("СКомиссионеромНаЗакупку", Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
		ЗначенияДляПолучения.Вставить("СКомитентом", Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);
		ЗначенияДляПолучения.Вставить("СКомитентомНаЗакупку", Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);
		ЗначенияДляПолучения.Вставить("СПокупателем", Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
		ЗначенияДляПолучения.Вставить("СПоставщиком", Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
		ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;
	КонецЕсли;

	// Перечисление_АмортизационныеГруппы.
	ПравилоКонвертации           = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД   = "Перечисление_АмортизационныеГруппы";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.АмортизационныеГруппы;
	ПравилоКонвертации.ТипXDTO   = "АмортизационныеГруппы";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.АмортизационныеГруппы.ВосьмаяГруппа, "Восьмая");
	ЗначенияДляОтправки.Вставить(Перечисления.АмортизационныеГруппы.ВтораяГруппа, "Вторая");
	ЗначенияДляОтправки.Вставить(Перечисления.АмортизационныеГруппы.ДевятаяГруппа, "Девятая");
	ЗначенияДляОтправки.Вставить(Перечисления.АмортизационныеГруппы.ДесятаяГруппа, "Десятая");
	ЗначенияДляОтправки.Вставить(Перечисления.АмортизационныеГруппы.ОтдельнаяГруппа, "Отдельная");
	ЗначенияДляОтправки.Вставить(Перечисления.АмортизационныеГруппы.ПерваяГруппа, "Первая");
	ЗначенияДляОтправки.Вставить(Перечисления.АмортизационныеГруппы.ПятаяГруппа, "Пятая");
	ЗначенияДляОтправки.Вставить(Перечисления.АмортизационныеГруппы.СедьмаяГруппа, "Седьмая");
	ЗначенияДляОтправки.Вставить(Перечисления.АмортизационныеГруппы.ТретьяГруппа, "Третья");
	ЗначенияДляОтправки.Вставить(Перечисления.АмортизационныеГруппы.ЧетвертаяГруппа, "Четвертая");
	ЗначенияДляОтправки.Вставить(Перечисления.АмортизационныеГруппы.ШестаяГруппа, "Шестая");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("Восьмая", Перечисления.АмортизационныеГруппы.ВосьмаяГруппа);
	ЗначенияДляПолучения.Вставить("Вторая", Перечисления.АмортизационныеГруппы.ВтораяГруппа);
	ЗначенияДляПолучения.Вставить("Девятая", Перечисления.АмортизационныеГруппы.ДевятаяГруппа);
	ЗначенияДляПолучения.Вставить("Десятая", Перечисления.АмортизационныеГруппы.ДесятаяГруппа);
	ЗначенияДляПолучения.Вставить("Отдельная", Перечисления.АмортизационныеГруппы.ОтдельнаяГруппа);
	ЗначенияДляПолучения.Вставить("Первая", Перечисления.АмортизационныеГруппы.ПерваяГруппа);
	ЗначенияДляПолучения.Вставить("Пятая", Перечисления.АмортизационныеГруппы.ПятаяГруппа);
	ЗначенияДляПолучения.Вставить("Седьмая", Перечисления.АмортизационныеГруппы.СедьмаяГруппа);
	ЗначенияДляПолучения.Вставить("Третья", Перечисления.АмортизационныеГруппы.ТретьяГруппа);
	ЗначенияДляПолучения.Вставить("Четвертая", Перечисления.АмортизационныеГруппы.ЧетвертаяГруппа);
	ЗначенияДляПолучения.Вставить("Шестая", Перечисления.АмортизационныеГруппы.ШестаяГруппа);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// Перечисление_ВидСчетаФактурыВыставленного.
	ПравилоКонвертации           = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД   = "Перечисление_ВидСчетаФактурыВыставленного";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ВидСчетаФактурыВыставленного;
	ПравилоКонвертации.ТипXDTO   = "ВидыСчетаФактуры";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ВидСчетаФактурыВыставленного.Корректировочный, "Корректировочный");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидСчетаФактурыВыставленного.НаАванс, "НаАванс");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитента, "НаАвансКомитента");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидСчетаФактурыВыставленного.НалоговыйАгент, "НалоговыйАгент");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию, "НаРеализацию");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидСчетаФактурыВыставленного.НаСуммовуюРазницу, "СуммовыеРазницы");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("Корректировочный", Перечисления.ВидСчетаФактурыВыставленного.Корректировочный);
	ЗначенияДляПолучения.Вставить("НаАванс", Перечисления.ВидСчетаФактурыВыставленного.НаАванс);
	ЗначенияДляПолучения.Вставить("НаАвансКомитента", Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитента);
	ЗначенияДляПолучения.Вставить("НалоговыйАгент", Перечисления.ВидСчетаФактурыВыставленного.НалоговыйАгент);
	ЗначенияДляПолучения.Вставить("НаРеализацию", Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию);
	ЗначенияДляПолучения.Вставить("СуммовыеРазницы", Перечисления.ВидСчетаФактурыВыставленного.НаСуммовуюРазницу);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// Перечисление_ВидСчетаФактурыПолученного_Отправка.
	ПравилоКонвертации           = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД   = "Перечисление_ВидСчетаФактурыПолученного_Отправка";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ВидСчетаФактурыПолученного;
	ПравилоКонвертации.ТипXDTO   = "ВидыСчетаФактуры";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ВидСчетаФактурыПолученного.Корректировочный, "Корректировочный");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидСчетаФактурыПолученного.НаАванс, "НаАванс");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидСчетаФактурыПолученного.НаПоступление, "НаПоступление");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("Корректировочный", Перечисления.ВидСчетаФактурыПолученного.Корректировочный);
	ЗначенияДляПолучения.Вставить("НаАванс", Перечисления.ВидСчетаФактурыПолученного.НаАванс);
	ЗначенияДляПолучения.Вставить("НаПоступление", Перечисления.ВидСчетаФактурыПолученного.НаПоступление);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// Перечисление_ВидыКомплектации.
	ПравилоКонвертации           = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД   = "Перечисление_ВидыКомплектации";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ВидыКомплектации;
	ПравилоКонвертации.ТипXDTO   = "ВидыОперацийСборкаТоваров";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыКомплектации.Разборка, "Разборка");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыКомплектации.Сборка, "Сборка");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("Разборка", Перечисления.ВидыКомплектации.Разборка);
	ЗначенияДляПолучения.Вставить("Сборка", Перечисления.ВидыКомплектации.Сборка);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// Перечисление_ВидыОбъектовУчетаНМА.
	ПравилоКонвертации           = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД   = "Перечисление_ВидыОбъектовУчетаНМА";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ВидыОбъектовУчетаНМА;
	ПравилоКонвертации.ТипXDTO   = "ВидыОбъектовУчетаНМА";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыОбъектовУчетаНМА.НематериальныйАктив, "НематериальныйАктив");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыОбъектовУчетаНМА.РасходыНаНИОКР, "РасходыНаНИОКР");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("НематериальныйАктив", Перечисления.ВидыОбъектовУчетаНМА.НематериальныйАктив);
	ЗначенияДляПолучения.Вставить("РасходыНаНИОКР", Перечисления.ВидыОбъектовУчетаНМА.РасходыНаНИОКР);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// Перечисление_ВидыОперацийИсправленияПостРеал.
	ПравилоКонвертации           = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД   = "Перечисление_ВидыОперацийИсправленияПостРеал";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ВидыОперацийИсправленияПоступленияРеализации;
	ПравилоКонвертации.ТипXDTO   = "ВидыОперацийИсправленияПоступленияРеализации";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки, "ИсправлениеОшибки");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение, "СогласованноеИзменение");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("ИсправлениеОшибки", Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки);
	ЗначенияДляПолучения.Вставить("СогласованноеИзменение", Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// Перечисление_ВидыОперацийКорректировкаДолга.
	ПравилоКонвертации           = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД   = "Перечисление_ВидыОперацийКорректировкаДолга";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ВидыОперацийКорректировкаДолга;
	ПравилоКонвертации.ТипXDTO   = "ВидыОперацийКорректировкаДолга";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыОперацийКорректировкаДолга.ПереносЗадолженности, "ПереносЗадолженности");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета, "ПроведениеВзаимозачета");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыОперацийКорректировкаДолга.СписаниеЗадолженности, "СписаниеЗадолженности");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("ПереносЗадолженности", Перечисления.ВидыОперацийКорректировкаДолга.ПереносЗадолженности);
	ЗначенияДляПолучения.Вставить("ПроведениеВзаимозачета", Перечисления.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета);
	ЗначенияДляПолучения.Вставить("СписаниеЗадолженности", Перечисления.ВидыОперацийКорректировкаДолга.СписаниеЗадолженности);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// Перечисление_ВидыОперацийПоПлатежнойКарте.
	ПравилоКонвертации           = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД   = "Перечисление_ВидыОперацийПоПлатежнойКарте";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ВидыОперацийОплатаОтПокупателяПлатежнойКартой;
	ПравилоКонвертации.ТипXDTO   = "ВидыОперацийПоПлатежнойКарте";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыОперацийОплатаОтПокупателяПлатежнойКартой.ВозвратДенежныхСредствПокупателю, "ВозвратОплатыКлиентуНаПлатежнуюКарту");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыОперацийОплатаОтПокупателяПлатежнойКартой.ОплатаПокупателя, "ОплатаОтКлиентаПлатежнойКартой");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("ВозвратОплатыКлиентуНаПлатежнуюКарту", Перечисления.ВидыОперацийОплатаОтПокупателяПлатежнойКартой.ВозвратДенежныхСредствПокупателю);
	ЗначенияДляПолучения.Вставить("ОплатаОтКлиентаПлатежнойКартой", Перечисления.ВидыОперацийОплатаОтПокупателяПлатежнойКартой.ОплатаПокупателя);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// Перечисление_ГруппыОС.
	ПравилоКонвертации           = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД   = "Перечисление_ГруппыОС";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ГруппыОС;
	ПравилоКонвертации.ТипXDTO   = "ГруппыОС";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ГруппыОС.ДругиеВидыОсновныхСредств, "ДругиеВидыОсновныхСредств");
	ЗначенияДляОтправки.Вставить(Перечисления.ГруппыОС.Здания, "Здания");
	ЗначенияДляОтправки.Вставить(Перечисления.ГруппыОС.ЗемельныеУчастки, "ЗемельныеУчастки");
	ЗначенияДляОтправки.Вставить(Перечисления.ГруппыОС.КапитальныеВложенияВАрендованноеИмущество, "КапитальныеВложенияВАрендованноеИмущество");
	ЗначенияДляОтправки.Вставить(Перечисления.ГруппыОС.МашиныИОборудование, "МашиныИОборудование");
	ЗначенияДляОтправки.Вставить(Перечисления.ГруппыОС.МноголетниеНасаждения, "МноголетниеНасаждения");
	ЗначенияДляОтправки.Вставить(Перечисления.ГруппыОС.ОбъектыПриродопользования, "ОбъектыПриродопользования");
	ЗначенияДляОтправки.Вставить(Перечисления.ГруппыОС.ОфисноеОборудование, "ОфисноеОборудование");
	ЗначенияДляОтправки.Вставить(Перечисления.ГруппыОС.ПродуктивныйСкот, "ПродуктивныйСкот");
	ЗначенияДляОтправки.Вставить(Перечисления.ГруппыОС.ПроизводственныйИХозяйственныйИнвентарь, "ПроизводственныйИХозяйственныйИнвентарь");
	ЗначенияДляОтправки.Вставить(Перечисления.ГруппыОС.ПрочееИмуществоТребующееГосударственнойРегистрации, "ПрочееИмуществоТребующееГосударственнойРегистрации");
	ЗначенияДляОтправки.Вставить(Перечисления.ГруппыОС.РабочийСкот, "РабочийСкот");
	ЗначенияДляОтправки.Вставить(Перечисления.ГруппыОС.Сооружения, "Сооружения");
	ЗначенияДляОтправки.Вставить(Перечисления.ГруппыОС.ТранспортныеСредства, "ТранспортныеСредства");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("ДругиеВидыОсновныхСредств", Перечисления.ГруппыОС.ДругиеВидыОсновныхСредств);
	ЗначенияДляПолучения.Вставить("Здания", Перечисления.ГруппыОС.Здания);
	ЗначенияДляПолучения.Вставить("ЗемельныеУчастки", Перечисления.ГруппыОС.ЗемельныеУчастки);
	ЗначенияДляПолучения.Вставить("КапитальныеВложенияВАрендованноеИмущество", Перечисления.ГруппыОС.КапитальныеВложенияВАрендованноеИмущество);
	ЗначенияДляПолучения.Вставить("МашиныИОборудование", Перечисления.ГруппыОС.МашиныИОборудование);
	ЗначенияДляПолучения.Вставить("МноголетниеНасаждения", Перечисления.ГруппыОС.МноголетниеНасаждения);
	ЗначенияДляПолучения.Вставить("ОбъектыПриродопользования", Перечисления.ГруппыОС.ОбъектыПриродопользования);
	ЗначенияДляПолучения.Вставить("ОфисноеОборудование", Перечисления.ГруппыОС.ОфисноеОборудование);
	ЗначенияДляПолучения.Вставить("ПродуктивныйСкот", Перечисления.ГруппыОС.ПродуктивныйСкот);
	ЗначенияДляПолучения.Вставить("ПроизводственныйИХозяйственныйИнвентарь", Перечисления.ГруппыОС.ПроизводственныйИХозяйственныйИнвентарь);
	ЗначенияДляПолучения.Вставить("ПрочееИмуществоТребующееГосударственнойРегистрации", Перечисления.ГруппыОС.ПрочееИмуществоТребующееГосударственнойРегистрации);
	ЗначенияДляПолучения.Вставить("РабочийСкот", Перечисления.ГруппыОС.РабочийСкот);
	ЗначенияДляПолучения.Вставить("Сооружения", Перечисления.ГруппыОС.Сооружения);
	ЗначенияДляПолучения.Вставить("ТранспортныеСредства", Перечисления.ГруппыОС.ТранспортныеСредства);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// Перечисление_ПолФизлиц.
	ПравилоКонвертации           = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД   = "Перечисление_ПолФизлиц";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ПолФизическихЛиц;
	ПравилоКонвертации.ТипXDTO   = "Пол";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ПолФизическихЛиц.Женский, "Женский");
	ЗначенияДляОтправки.Вставить(Перечисления.ПолФизическихЛиц.Мужской, "Мужской");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("Женский", Перечисления.ПолФизическихЛиц.Женский);
	ЗначенияДляПолучения.Вставить("Мужской", Перечисления.ПолФизическихЛиц.Мужской);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// Перечисление_СпособыНачисленияАмортизацииНМАБУ.
	ПравилоКонвертации           = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД   = "Перечисление_СпособыНачисленияАмортизацииНМАБУ";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.СпособыНачисленияАмортизацииНМА;
	ПравилоКонвертации.ТипXDTO   = "СпособыНачисленияАмортизацииНМАБУ";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.СпособыНачисленияАмортизацииНМА.Линейный, "Линейный");
	ЗначенияДляОтправки.Вставить(Перечисления.СпособыНачисленияАмортизацииНМА.ПропорциональноОбъемуПродукции, "ПропорциональноОбъемуПродукции");
	ЗначенияДляОтправки.Вставить(Перечисления.СпособыНачисленияАмортизацииНМА.УменьшаемогоОстатка, "УменьшаемогоОстатка");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("Линейный", Перечисления.СпособыНачисленияАмортизацииНМА.Линейный);
	ЗначенияДляПолучения.Вставить("ПропорциональноОбъемуПродукции", Перечисления.СпособыНачисленияАмортизацииНМА.ПропорциональноОбъемуПродукции);
	ЗначенияДляПолучения.Вставить("УменьшаемогоОстатка", Перечисления.СпособыНачисленияАмортизацииНМА.УменьшаемогоОстатка);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// Перечисление_СпособыНачисленияАмортизацииНМАНУ.
	ПравилоКонвертации           = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД   = "Перечисление_СпособыНачисленияАмортизацииНМАНУ";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.МетодыНачисленияАмортизации;
	ПравилоКонвертации.ТипXDTO   = "СпособыНачисленияАмортизацииНМАНУ";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.МетодыНачисленияАмортизации.Линейный, "Линейный");
	ЗначенияДляОтправки.Вставить(Перечисления.МетодыНачисленияАмортизации.Нелинейный, "Нелинейный");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("Линейный", Перечисления.МетодыНачисленияАмортизации.Линейный);
	ЗначенияДляПолучения.Вставить("Нелинейный", Перечисления.МетодыНачисленияАмортизации.Нелинейный);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// Перечисление_СпособыНачисленияАмортизацииОС.
	ПравилоКонвертации           = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД   = "Перечисление_СпособыНачисленияАмортизацииОС";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.СпособыНачисленияАмортизацииОС;
	ПравилоКонвертации.ТипXDTO   = "СпособыНачисленияАмортизацииОС";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.СпособыНачисленияАмортизацииОС.Линейный, "Линейный");
	ЗначенияДляОтправки.Вставить(Перечисления.СпособыНачисленияАмортизацииОС.ПоЕНАОФ, "ПоЕНАОФ");
	ЗначенияДляОтправки.Вставить(Перечисления.СпособыНачисленияАмортизацииОС.ПоЕНАОФНа1000кмПробега, "ПоЕНАОФНа1000кмПробега");
	ЗначенияДляОтправки.Вставить(Перечисления.СпособыНачисленияАмортизацииОС.ПоСуммеЧиселЛетИспользования, "ПоСуммеЧиселЛетИспользования");
	ЗначенияДляОтправки.Вставить(Перечисления.СпособыНачисленияАмортизацииОС.ПропорциональноОбъемуПродукции, "ПропорциональноОбъемуПродукции");
	ЗначенияДляОтправки.Вставить(Перечисления.СпособыНачисленияАмортизацииОС.УменьшаемогоОстатка, "УменьшаемогоОстатка");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("Линейный", Перечисления.СпособыНачисленияАмортизацииОС.Линейный);
	ЗначенияДляПолучения.Вставить("ПоЕНАОФ", Перечисления.СпособыНачисленияАмортизацииОС.ПоЕНАОФ);
	ЗначенияДляПолучения.Вставить("ПоЕНАОФНа1000кмПробега", Перечисления.СпособыНачисленияАмортизацииОС.ПоЕНАОФНа1000кмПробега);
	ЗначенияДляПолучения.Вставить("ПоСуммеЧиселЛетИспользования", Перечисления.СпособыНачисленияАмортизацииОС.ПоСуммеЧиселЛетИспользования);
	ЗначенияДляПолучения.Вставить("ПропорциональноОбъемуПродукции", Перечисления.СпособыНачисленияАмортизацииОС.ПропорциональноОбъемуПродукции);
	ЗначенияДляПолучения.Вставить("УменьшаемогоОстатка", Перечисления.СпособыНачисленияАмортизацииОС.УменьшаемогоОстатка);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// Перечисление_СпособыРасчетаКомВознагр.
	ПравилоКонвертации           = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД   = "Перечисление_СпособыРасчетаКомВознагр";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.СпособыРасчетаКомиссионногоВознаграждения;
	ПравилоКонвертации.ТипXDTO   = "СпособыРасчетаКомиссионногоВознаграждения";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.СпособыРасчетаКомиссионногоВознаграждения.НеРассчитывается, "НеРассчитывается");
	ЗначенияДляОтправки.Вставить(Перечисления.СпособыРасчетаКомиссионногоВознаграждения.ПроцентОтПрибыли, "ПроцентОтРазницыСуммПродажиИПоступления");
	ЗначенияДляОтправки.Вставить(Перечисления.СпособыРасчетаКомиссионногоВознаграждения.ПроцентОтСуммыПродажи, "ПроцентОтСуммыПродажи");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("НеРассчитывается", Перечисления.СпособыРасчетаКомиссионногоВознаграждения.НеРассчитывается);
	ЗначенияДляПолучения.Вставить("ПроцентОтРазницыСуммПродажиИПоступления", Перечисления.СпособыРасчетаКомиссионногоВознаграждения.ПроцентОтПрибыли);
	ЗначенияДляПолучения.Вставить("ПроцентОтСуммыПродажи", Перечисления.СпособыРасчетаКомиссионногоВознаграждения.ПроцентОтСуммыПродажи);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// Перечисление_СтавкиНДС.
	ПравилоКонвертации           = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД   = "Перечисление_СтавкиНДС";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.СтавкиНДС;
	ПравилоКонвертации.ТипXDTO   = "СтавкиНДС";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.СтавкиНДС.БезНДС, "БезНДС");
	ЗначенияДляОтправки.Вставить(Перечисления.СтавкиНДС.НДС0, "НДС0");
	ЗначенияДляОтправки.Вставить(Перечисления.СтавкиНДС.НДС10, "НДС10");
	ЗначенияДляОтправки.Вставить(Перечисления.СтавкиНДС.НДС10_110, "НДС10_110");
	ЗначенияДляОтправки.Вставить(Перечисления.СтавкиНДС.НДС18, "НДС18");
	ЗначенияДляОтправки.Вставить(Перечисления.СтавкиНДС.НДС18_118, "НДС18_118");
	ЗначенияДляОтправки.Вставить(Перечисления.СтавкиНДС.НДС20, "НДС20");
	ЗначенияДляОтправки.Вставить(Перечисления.СтавкиНДС.НДС20_120, "НДС20_120");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("БезНДС", Перечисления.СтавкиНДС.БезНДС);
	ЗначенияДляПолучения.Вставить("НДС0", Перечисления.СтавкиНДС.НДС0);
	ЗначенияДляПолучения.Вставить("НДС10", Перечисления.СтавкиНДС.НДС10);
	ЗначенияДляПолучения.Вставить("НДС10_110", Перечисления.СтавкиНДС.НДС10_110);
	ЗначенияДляПолучения.Вставить("НДС18", Перечисления.СтавкиНДС.НДС18);
	ЗначенияДляПолучения.Вставить("НДС18_118", Перечисления.СтавкиНДС.НДС18_118);
	ЗначенияДляПолучения.Вставить("НДС20", Перечисления.СтавкиНДС.НДС20);
	ЗначенияДляПолучения.Вставить("НДС20_120", Перечисления.СтавкиНДС.НДС20_120);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// Перечисление_ТипыСкладов.
	ПравилоКонвертации           = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД   = "Перечисление_ТипыСкладов";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ВидыСкладов;
	ПравилоКонвертации.ТипXDTO   = "ТипыСкладов";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыСкладов.НТТ, "НеавтоматизированнаяТорговаяТочка");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыСкладов.Оптовый, "Оптовый");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыСкладов.Розничный, "Розничный");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("НеавтоматизированнаяТорговаяТочка", Перечисления.ВидыСкладов.НТТ);
	ЗначенияДляПолучения.Вставить("Оптовый", Перечисления.ВидыСкладов.Оптовый);
	ЗначенияДляПолучения.Вставить("Розничный", Перечисления.ВидыСкладов.Розничный);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// Перечисление_ЮрФизЛицо.
	ПравилоКонвертации           = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД   = "Перечисление_ЮрФизЛицо";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ЮрФизЛицо;
	ПравилоКонвертации.ТипXDTO   = "ЮридическоеФизическоеЛицо";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ЮрФизЛицо.ФизЛицо, "ФизическоеЛицо");
	ЗначенияДляОтправки.Вставить(Перечисления.ЮрФизЛицо.ЮрЛицо, "ЮридическоеЛицо");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("ФизическоеЛицо", Перечисления.ЮрФизЛицо.ФизЛицо);
	ЗначенияДляПолучения.Вставить("ЮридическоеЛицо", Перечисления.ЮрФизЛицо.ЮрЛицо);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// ПорядокВключенияСтоимостиОСВСоставРасходовНУ.
	ПравилоКонвертации           = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД   = "ПорядокВключенияСтоимостиОСВСоставРасходовНУ";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ;
	ПравилоКонвертации.ТипXDTO   = "ПорядокВключенияСтоимостиОСВСоставРасходовНУ";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.ВключениеВРасходыПриПринятииКУчету, "ВключениеВРасходыПриПринятииКУчету");
	ЗначенияДляОтправки.Вставить(Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.НачислениеАмортизации, "НачислениеАмортизации");
	ЗначенияДляОтправки.Вставить(Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.СтоимостьНеВключаетсяВРасходы, "СтоимостьНеВключаетсяВРасходы");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("ВключениеВРасходыПриПринятииКУчету", Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.ВключениеВРасходыПриПринятииКУчету);
	ЗначенияДляПолучения.Вставить("НачислениеАмортизации", Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.НачислениеАмортизации);
	ЗначенияДляПолучения.Вставить("СтоимостьНеВключаетсяВРасходы", Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.СтоимостьНеВключаетсяВРасходы);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

КонецПроцедуры

//  Алгоритмы


Функция ДанныеКоллекцииВВидеСтруктуры(Источник, ПравилаЗаполнения)
	Результат = Новый Структура;
	
	Для Каждого ПравилоЗаполнения Из ПравилаЗаполнения Цикл
	
		СтруктураДляПереносаЗначения = Новый Структура(ПравилоЗаполнения.Ключ, Неопределено);
		ЗаполнитьЗначенияСвойств(СтруктураДляПереносаЗначения, Источник);
		
		Значение = СтруктураДляПереносаЗначения[ПравилоЗаполнения.Ключ];
		Если Значение <> Неопределено Тогда
			Результат.Вставить(ПравилоЗаполнения.Значение, Значение);
		КонецЕсли;
	
	КонецЦикла;
	
	Возврат Результат;
КонецФункции
Функция ДобавитьСимволВНомер(Номер, Символ)
	// Длина номера 11 символов, последние 6 цифровые
	ПятыйСимвол = Сред(Номер,4,1);
	Если ПятыйСимвол <> Символ Тогда
		НовыйНомер = Лев(Номер,4) + Символ + Сред(Номер,6);
		Возврат НовыйНомер;
	КонецЕсли;
	Возврат Номер;
КонецФункции
Процедура ЗагрузитьПодробныеДанныеФИО(ПолученныеДанные, ФизЛицоСсылка)
	Если ПолученныеДанные.ДополнительныеСвойства.Свойство("ПодробныеДанныеФИО") Тогда	
		
		НаборЗаписейФИО = РегистрыСведений.ФИОФизЛиц.СоздатьНаборЗаписей();
		НаборЗаписейФИО.Отбор.ФизЛицо.Установить(ФизЛицоСсылка);
		Для Каждого СтрокаФИО Из ПолученныеДанные.ДополнительныеСвойства.ПодробныеДанныеФИО Цикл
			НовЗапись = НаборЗаписейФИО.Добавить();
			ЗаполнитьЗначенияСвойств(НовЗапись, СтрокаФИО);
			НовЗапись.ФизЛицо = ФизЛицоСсылка;
			НовЗапись.Период = СтрокаФИО.НачалоПериода;
		КонецЦикла;
		НаборЗаписейФИО.ОбменДанными.Загрузка = Истина;
		НаборЗаписейФИО.Записать();
	КонецЕсли;
КонецПроцедуры
Процедура ЗагрузитьСуммыДолга(ПолученныеДанные, ТЧXDTO, ВидЗадолженности)
	МассивСтрокСуммыДолга = Неопределено;
	ПолученныеДанные.ДополнительныеСвойства.Свойство("СуммыДолга", МассивСтрокСуммыДолга);
	Если НЕ ЗначениеЗаполнено(МассивСтрокСуммыДолга) Тогда
		МассивСтрокСуммыДолга = Новый Массив;
	КонецЕсли;
	ПравилаЗаполнения = Новый Соответствие;
	ПравилаЗаполнения.Вставить("Договор", "ДоговорКонтрагента");
	ПравилаЗаполнения.Вставить("СуммаВзаиморасчетов","Сумма");
	ПравилаЗаполнения.Вставить("КурсВзаиморасчетов","КурсВзаиморасчетов");
	ПравилаЗаполнения.Вставить("КратностьВзаиморасчетов","КратностьВзаиморасчетов");
	
	Для Каждого Строка Из ТЧXDTO Цикл
		СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
		СтруктураДанныхСтроки.Вставить("ВидЗадолженности", ВидЗадолженности);
		Если ЗначениеЗаполнено(Строка.СчетУчетаРасчетовСКонтрагентом) Тогда
			СтруктураДанныхСтроки.Вставить("СчетУчетаРасчетов", ПланыСчетов.Хозрасчетный.НайтиПоКоду(Строка.СчетУчетаРасчетовСКонтрагентом));
		КонецЕсли;
		Если ЗначениеЗаполнено(Строка.СчетУчетаРасчетовПоАвансам) Тогда
			СтруктураДанныхСтроки.Вставить("СчетУчетаАвансов", ПланыСчетов.Хозрасчетный.НайтиПоКоду(Строка.СчетУчетаРасчетовПоАвансам));
		КонецЕсли;
		МассивСтрокСуммыДолга.Добавить(СтруктураДанныхСтроки);
	КонецЦикла;
	Если МассивСтрокСуммыДолга.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("СуммыДолга", МассивСтрокСуммыДолга);
	КонецЕсли;
КонецПроцедуры
Процедура ЗаполнениеОстатковДолговАвансов(ПараметрыКонвертации)
	ДатаОстатков = ПараметрыКонвертации.ДатаОстатков;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	КурсыВалют.Курс,
	|	КурсыВалют.Кратность,
	|	КурсыВалют.Валюта
	|	ПОМЕСТИТЬ КурсыВалют
	|ИЗ                         
	|	РегистрСведений.КурсыВалют.СрезПоследних(&ДатаОстатковТипДата, ) КАК КурсыВалют
	|	;
	|
	|ВЫБРАТЬ
	|	Остатки.Контрагент КАК Контрагент,
	|	Остатки.ДоговорКонтрагента КАК Договор,
	|	Остатки.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	Остатки.Организация КАК Организация,
	|	Остатки.СуммаВзаиморасчетовОстаток КАК Сумма,
	|	Остатки.ДоговорКонтрагента.ВидДоговора КАК ВидДоговора,
	|	ЕстьNULL(КурсыВалют.Курс, 1) КАК КурсВзаиморасчетов,
	|	ЕстьNULL(КурсыВалют.Кратность, 1) КАК КратностьВзаиморасчетов,
	|	ВЫБОР КОГДА Остатки.ДоговорКонтрагента.ВалютаВзаиморасчетов = &ВалютаРегл Тогда
	|		Остатки.СуммаВзаиморасчетовОстаток
	|	ИНАЧЕ
	|		ВЫРАЗИТЬ(ЕстьNULL(КурсыВалют.Курс, 1) * Остатки.СуммаВзаиморасчетовОстаток / ЕстьNULL(КурсыВалют.Кратность, 1) КАК Число(15,2))
	|	КОНЕЦ 									КАК СуммаРегл
	|Поместить ТабВзаиморасчеты
	|ИЗ РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(&ДатаОстатков) КАК Остатки
	|ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалют
	|ПО КурсыВалют.Валюта = Остатки.ДоговорКонтрагента.ВалютаВзаиморасчетов
	|ГДЕ Остатки.СуммаВзаиморасчетовОстаток <> 0
	|;
	|// 1. Поставщики и комитенты авансы
	|ВЫБРАТЬ
	|	Контрагент,
	|	Договор,
	|	Договор.РасчетыВУсловныхЕдиницах КАК РасчетыВУсловныхЕдиницах,
	|	ВалютаВзаиморасчетов,
	|	КурсВзаиморасчетов,
	|	КратностьВзаиморасчетов,
	|	Организация,
	|	Сумма КАК Сумма,
	|	СуммаРегл
	|ИЗ ТабВзаиморасчеты
	|ГДЕ (ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком) ИЛИ 
	|	ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СКомитентом))
	|	И Сумма > 0
	|;
	|// 2. Поставщики и комитенты долги
	|ВЫБРАТЬ
	|	Контрагент,
	|	Договор,
	|	Договор.РасчетыВУсловныхЕдиницах КАК РасчетыВУсловныхЕдиницах,
	|	ВалютаВзаиморасчетов,
	|	КурсВзаиморасчетов,
	|	КратностьВзаиморасчетов,
	|	Организация,
	|	(-1) * Сумма КАК Сумма,
	|	(-1) * СуммаРегл КАК СуммаРегл
	|ИЗ ТабВзаиморасчеты
	|ГДЕ (ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком) ИЛИ 
	|	ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СКомитентом) ИЛИ
	|	// прочее в - приписываем к поставщикам
	|		ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.Прочее))
	|	И Сумма < 0
	|;
	|
	|// 3. Покупатели и комиссионеры авансы
	|ВЫБРАТЬ
	|	Контрагент,
	|	Договор,
	|	Договор.РасчетыВУсловныхЕдиницах КАК РасчетыВУсловныхЕдиницах,
	|	ВалютаВзаиморасчетов,
	|	КурсВзаиморасчетов,
	|	КратностьВзаиморасчетов,
	|	Организация,
	|	(-1) * Сумма КАК Сумма,
	|	(-1) * СуммаРегл КАК СуммаРегл
	|ИЗ ТабВзаиморасчеты
	|ГДЕ (ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПокупателем) ИЛИ 
	|	ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СКомиссионером))
	|	И Сумма < 0
	|;
	|
	|// 4. Покупатели и комиссионеры долги 
	|ВЫБРАТЬ
	|	Контрагент,
	|	Договор,
	|	Договор.РасчетыВУсловныхЕдиницах КАК РасчетыВУсловныхЕдиницах,
	|	ВалютаВзаиморасчетов,
	|	КурсВзаиморасчетов,
	|	КратностьВзаиморасчетов,
	|	Организация,
	|	Сумма КАК Сумма,
	|	СуммаРегл КАК СуммаРегл
	|ИЗ ТабВзаиморасчеты
	|ГДЕ (ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПокупателем) ИЛИ 
	|	ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СКомиссионером) ИЛИ
	|	// прочее в + приписываем к покупателям 
	|	ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.Прочее))
	|	И Сумма > 0
	|;";
	Запрос.УстановитьПараметр("ДатаОстатков", Новый Граница(ДатаОстатков, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ДатаОстатковТипДата", ДатаОстатков);
	Запрос.УстановитьПараметр("ВалютаРегл",   Константы.ВалютаРегламентированногоУчета.Получить());
	
	Результаты = Запрос.ВыполнитьПакет();
	СтруктураПараметров = Новый Структура;
	
	// порядок в пакете следующий: АвансыПоставщики,ДолгиПоставщики,АвансыПокупатели,ДолгиПокупатели
	КоличествоТаблиц = Результаты.Количество();
	
	СтруктураПараметров.Вставить("АвансыПоставщики", Результаты[КоличествоТаблиц-4].Выгрузить());
	СтруктураПараметров.Вставить("ДолгиПоставщики", Результаты[КоличествоТаблиц-3].Выгрузить());
	СтруктураПараметров.Вставить("АвансыКлиенты", Результаты[КоличествоТаблиц-2].Выгрузить());
	СтруктураПараметров.Вставить("ДолгиКлиенты", Результаты[КоличествоТаблиц-1].Выгрузить());
	ПараметрыКонвертации.Вставить("ТаблицаДолгиАвансы", СтруктураПараметров);
КонецПроцедуры
Процедура ЗаполнитьКолонкиТабличнойЧасти(Объект, ИмяТЧ, Реквизиты)
	Для Каждого СтрокаТЧ Из Объект[ИмяТЧ] Цикл
		Если Найти(Реквизиты, "Качество") > 0 И НЕ ЗначениеЗаполнено(СтрокаТЧ.Качество) Тогда
			СтрокаТЧ.Качество = Справочники.Качество.Новый;
		КонецЕсли;
		Если Найти(Реквизиты, "СтатусПартии") > 0 И НЕ ЗначениеЗаполнено(СтрокаТЧ.СтатусПартии) Тогда
			СтрокаТЧ.СтатусПартии = Перечисления.СтатусыПартийТоваров.Купленный;
		КонецЕсли;
		Если Найти(Реквизиты, "ЕдиницаИзмерения") > 0 И НЕ ЗначениеЗаполнено(СтрокаТЧ.ЕдиницаИзмерения) 
			И ЗначениеЗаполнено(СтрокаТЧ.Номенклатура) Тогда
			ЕИ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТЧ.Номенклатура, "ЕдиницаХраненияОстатков");
			СтрокаТЧ.ЕдиницаИзмерения = ЕИ;
		КонецЕсли; 
		Если Найти(Реквизиты, "Коэффициент") > 0 И НЕ ЗначениеЗаполнено(СтрокаТЧ.Коэффициент) Тогда
			КоэфЕИ = 0; 
			Если ЗначениеЗаполнено(СтрокаТЧ.ЕдиницаИзмерения) Тогда
				КоэфЕИ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТЧ.ЕдиницаИзмерения, "Коэффициент");
			КонецЕсли;
			СтрокаТЧ.Коэффициент = ?(ЗначениеЗаполнено(КоэфЕИ),КоэфЕИ,1);
		КонецЕсли;
		Если Найти(Реквизиты, "СпособСписанияОстаткаТоваров") > 0 И НЕ ЗначениеЗаполнено(СтрокаТЧ.СпособСписанияОстаткаТоваров) Тогда
			СтрокаТЧ.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.СоСклада;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры
Процедура ЗаполнитьМассивВыборкиДолгиАвансы(МассивВыборки, ПараметрыКонвертации, ИмяТаблицы)
	// "ДолгиКлиенты,АвансыКлиенты,ДолгиПоставщики,АвансыПоставщики"
	
	ДатаОстатков = ПараметрыКонвертации.ДатаОстатков;
	
	ТаблицаОстатков = ПараметрыКонвертации.ТаблицаДолгиАвансы[ИмяТаблицы];
	
	ТекущаяОрганизация = Неопределено;
	ДанныеИБ = Неопределено;
	
	Для Каждого Строка Из ТаблицаОстатков Цикл
		Если ТекущаяОрганизация = Неопределено Или Строка.Организация <> ТекущаяОрганизация Тогда
			ТекущаяОрганизация = Строка.Организация;
			
			Если ДанныеИБ <> Неопределено И ДанныеИБ.Расчеты.Количество()>0 Тогда
				МассивВыборки.Добавить(ДанныеИБ);
			КонецЕсли;
					
			ДанныеИБ = Новый Структура("Дата, Организация, Расчеты");
			ДанныеИБ.Дата = ДатаОстатков;
			ДанныеИБ.Организация = Строка.Организация;
			
			ДанныеИБ.Расчеты = Новый ТаблицаЗначений;
			Колонки = ДанныеИБ.Расчеты.Колонки;
			Колонки.Добавить("Контрагент");
			Колонки.Добавить("ВалютаВзаиморасчетов");
			Колонки.Добавить("СуммаРегл");
			Колонки.Добавить("Сумма");
			Колонки.Добавить("Договор");
			Колонки.Добавить("КурсВзаиморасчетов");
			Колонки.Добавить("КратностьВзаиморасчетов");
			Колонки.Добавить("РасчетыВУсловныхЕдиницах");
		КонецЕсли;
		
		Если Строка.Сумма <= 0 Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ДанныеИБ.Расчеты.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		
		Если НоваяСтрока.СуммаРегл = 0 Или Не ЗначениеЗаполнено(НоваяСтрока.СуммаРегл) Тогда
			НоваяСтрока.СуммаРегл = НоваяСтрока.Сумма;
		КонецЕсли;		
		
	КонецЦикла;
	
	Если ДанныеИБ <> Неопределено И ДанныеИБ.Расчеты.Количество()>0 Тогда
		МассивВыборки.Добавить(ДанныеИБ);
	КонецЕсли;
КонецПроцедуры
Процедура ЗаполнитьМассивВыборкиТоварыПереданные(МассивВыборки, ПараметрыКонвертации, ТипДанных)
	ДатаОстатков = ПараметрыКонвертации.ДатаОстатков;
	
	ТаблицаДанныхЭталон = Новый ТаблицаЗначений;
	КолонкиТаблицы = ТаблицаДанныхЭталон.Колонки;
	КолонкиТаблицы.Добавить("Номенклатура");
	КолонкиТаблицы.Добавить("Характеристика");
	КолонкиТаблицы.Добавить("Количество");
	КолонкиТаблицы.Добавить("КоличествоУпаковок");
	КолонкиТаблицы.Добавить("СуммаБезНДС");
	КолонкиТаблицы.Добавить("ЕдиницаИзмерения");
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Таб.Номенклатура КАК Номенклатура,
	|	Таб.ХарактеристикаНоменклатуры КАК Характеристика,
	|	Таб.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаИзмерения,
	|	Таб.Организация КАК Организация,
	|	Таб.Контрагент КАК Контрагент,
	|	Таб.КоличествоОстаток КАК Количество,
	|	Таб.КоличествоОстаток КАК КоличествоУпаковок,
	|	Таб.СуммаВзаиморасчетовОстаток КАК СуммаБезНДС
	|ИЗ РегистрНакопления.ТоварыПереданные.Остатки(&ДатаОстатков,СтатусПередачи = &СтатусПередачи) КАК Таб
	|ГДЕ Таб.КоличествоОстаток > 0
	|ИТОГИ ПО
	|	Таб.Организация,
	|	Таб.Контрагент";
	Запрос.УстановитьПараметр("ДатаОстатков", Новый Граница(ДатаОстатков, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("СтатусПередачи", ?(ТипДанных = "Товары", Перечисления.СтатусыПолученияПередачиТоваров.НаКомиссию, Перечисления.СтатусыПолученияПередачиТоваров.ВозвратнаяТара));
	
	МассивВыборки = Новый Массив;
		
	ВыборкаОрганизации = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаОрганизации.Следующий() Цикл
		ВыборкаКонтрагенты = ВыборкаОрганизации.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаКонтрагенты.Следующий() Цикл
			ДанныеИБ = Новый Структура("Дата, Организация, Контрагент, " + ТипДанных);
			ДанныеИБ.Дата = ДатаОстатков;
			ДанныеИБ.Организация = ВыборкаОрганизации.Организация;
			ДанныеИБ.Контрагент = ВыборкаКонтрагенты.Контрагент;
			ТаблицаДанных = ТаблицаДанныхЭталон.Скопировать();
			Выборка = ВыборкаКонтрагенты.Выбрать();
			Пока Выборка.Следующий() Цикл
				НоваяСтрокаДанных = ТаблицаДанных.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаДанных, Выборка);
			КонецЦикла;
			ДанныеИБ[ТипДанных] = ТаблицаДанных;
			МассивВыборки.Добавить(ДанныеИБ);
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры
Процедура ЗаполнитьМассивВыборкиТоварыПолученные(МассивВыборки, ПараметрыКонвертации, ТипДанных)
	ДатаОстатков = ПараметрыКонвертации.ДатаОстатков;
	
	ТаблицаДанныхЭталон = Новый ТаблицаЗначений;
	КолонкиТаблицы = ТаблицаДанныхЭталон.Колонки;
	КолонкиТаблицы.Добавить("Номенклатура");
	КолонкиТаблицы.Добавить("Характеристика");
	КолонкиТаблицы.Добавить("Количество");
	КолонкиТаблицы.Добавить("КоличествоУпаковок");
	КолонкиТаблицы.Добавить("СуммаБезНДС");
	КолонкиТаблицы.Добавить("ЕдиницаИзмерения");
	
	ТаблицаСвод = ТаблицаДанныхЭталон.Скопировать();
	ТаблицаСвод.Колонки.Добавить("Организация");
	ТаблицаСвод.Колонки.Добавить("Склад");
	ТаблицаСвод.Колонки.Добавить("Контрагент");
	ТаблицаСвод.Колонки.Добавить("Договор");
	
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаОстатков", Новый Граница(ДатаОстатков, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("СтатусПередачи", ?(ТипДанных = "Товары", Перечисления.СтатусыПолученияПередачиТоваров.НаКомиссию, Перечисления.СтатусыПолученияПередачиТоваров.ВозвратнаяТара));
	
	Если Константы.ИспользоватьРасширеннуюАналитикуУчетаНоменклатурыИЗатрат.Получить() = Истина
		И Константы.ДатаНачалаИспользованияРасширеннойАналитикиУчетаНоменклатурыИЗатрат.Получить() <= ДатаОстатков Тогда
		Запрос.Текст = "ВЫБРАТЬ
		|	ТоварыПолученные.Организация КАК Организация,
		|	ТоварыПолученные.Контрагент КАК Контрагент,
		|	ТоварыПолученные.ДоговорКонтрагента КАК Договор,
		|	РегАналитикаУчетаЗатрат.Затрата КАК Номенклатура,
		|	РегАналитикаУчетаЗатрат.Затрата.ЕдиницаХраненияОстатков КАК ЕдиницаИзмерения,
		|	РегАналитикаУчетаЗатрат.ХарактеристикаЗатраты КАК Характеристика,
		|	РегАналитикаВидаУчета.Склад КАК Склад,
		|	Минимум(УчетЗатрат.КоличествоОстаток) КАК КоличествоПартии,
		|	Минимум(УчетЗатрат.СтоимостьОстаток) КАК СуммаПартии,
		|	Сумма(ТоварыПолученные.СуммаВзаиморасчетовОстаток) КАК СуммаПолученная,
		|	Сумма(ТоварыПолученные.КоличествоОстаток) КАК КоличествоПолученное
		|ИЗ
		|	РегистрНакопления.УчетЗатрат.Остатки(&ДатаОстатков, ) КАК УчетЗатрат
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаВидаУчета КАК РегАналитикаВидаУчета
		|		ПО УчетЗатрат.АналитикаВидаУчета = РегАналитикаВидаУчета.Ссылка
		|			И (РегАналитикаВидаУчета.РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчета.МПЗ))
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПартий КАК РегАналитикаУчетаПартий
		|		ПО УчетЗатрат.АналитикаУчетаПартий = РегАналитикаУчетаПартий.Ссылка
		|			И РегАналитикаУчетаПартий.СтатусПартии = &СтатусПередачи
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаЗатрат КАК РегАналитикаУчетаЗатрат
		|		ПО УчетЗатрат.АналитикаУчетаЗатрат = РегАналитикаУчетаЗатрат.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыПолученные.Остатки(&ДатаОстатков,СтатусПолучения = &СтатусПередачи) КАК ТоварыПолученные
		|		ПО  ТоварыПолученные.Номенклатура = РегАналитикаУчетаЗатрат.Затрата
		|			И ТоварыПолученные.ХарактеристикаНоменклатуры = РегАналитикаУчетаЗатрат.ХарактеристикаЗатраты
		|ГДЕ УчетЗатрат.КоличествоОстаток > 0 И ТоварыПолученные.КоличествоОстаток > 0
		|СГРУППИРОВАТЬ ПО
		|	РегАналитикаВидаУчета.Склад,
		|	РегАналитикаУчетаЗатрат.Затрата ,
		|	РегАналитикаУчетаЗатрат.ХарактеристикаЗатраты ,
		|	ТоварыПолученные.Организация,
		|	ТоварыПолученные.Контрагент,
		|	ТоварыПолученные.ДоговорКонтрагента
		|ИТОГИ ПО
		|	ТоварыПолученные.Организация,
		|	ТоварыПолученные.Контрагент,
		|	ТоварыПолученные.ДоговорКонтрагента,
		|	РегАналитикаУчетаЗатрат.Затрата,
		|	РегАналитикаУчетаЗатрат.ХарактеристикаЗатраты
		|";
	Иначе
		Запрос.Текст = "ВЫБРАТЬ
		|	ТоварыПолученные.Организация КАК Организация,
		|	ТоварыПолученные.Контрагент КАК Контрагент,
		|	ТоварыПолученные.ДоговорКонтрагента КАК Договор,
		|	Партии.Номенклатура КАК Номенклатура,
		|	Партии.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаИзмерения,
		|	Партии.ХарактеристикаНоменклатуры КАК Характеристика,
		|	Партии.Склад КАК Склад,
		|	Минимум(Партии.КоличествоОстаток) КАК КоличествоПартии,
		|	Минимум(Партии.СтоимостьОстаток) КАК СуммаПартии,
		|	Сумма(ТоварыПолученные.СуммаВзаиморасчетовОстаток) КАК СуммаПолученная,
		|	Сумма(ТоварыПолученные.КоличествоОстаток) КАК КоличествоПолученное
		|ИЗ
		|	РегистрНакопления.ПартииТоваровНаСкладах.Остатки(&ДатаОстатков, 
		|				СтатусПартии = &СтатусПередачи
		|														) КАК Партии
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыПолученные.Остатки(&ДатаОстатков,СтатусПолучения = &СтатусПередачи) КАК ТоварыПолученные
		|		ПО  ТоварыПолученные.Номенклатура = Партии.Номенклатура
		|			И ТоварыПолученные.ХарактеристикаНоменклатуры = Партии.ХарактеристикаНоменклатуры
		|ГДЕ Партии.КоличествоОстаток > 0 И ТоварыПолученные.КоличествоОстаток > 0
		|СГРУППИРОВАТЬ ПО
		|	ТоварыПолученные.Организация,
		|	ТоварыПолученные.Контрагент,
		|	ТоварыПолученные.ДоговорКонтрагента,
		|	Партии.Номенклатура,
		|	Партии.ХарактеристикаНоменклатуры,
		|	Партии.Склад
		|ИТОГИ ПО
		|	ТоварыПолученные.Организация,
		|	ТоварыПолученные.Контрагент,
		|	ТоварыПолученные.ДоговорКонтрагента,
		|	Партии.Номенклатура,
		|	Партии.ХарактеристикаНоменклатуры
		|";
	КонецЕсли;
	ВыборкаОрганизация = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаОрганизация.Следующий() Цикл
		ВыборкаКонтрагент = ВыборкаОрганизация.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаКонтрагент.Следующий() Цикл
			ВыборкаДоговор = ВыборкаКонтрагент.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаДоговор.Следующий() Цикл
				ВыборкаНоменклатура = ВыборкаДоговор.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока ВыборкаНоменклатура.Следующий() Цикл
					ВыборкаХарактеристика = ВыборкаНоменклатура.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
						Пока ВыборкаХарактеристика.Следующий() Цикл
							КоличествоКРаспределению = ВыборкаХарактеристика.КоличествоПолученное;
							ЦенаТовара = ВыборкаХарактеристика.СуммаПолученная / ВыборкаХарактеристика.КоличествоПолученное;
							Выборка = ВыборкаХарактеристика.Выбрать();
							Пока Выборка.Следующий() Цикл
								Если КоличествоКРаспределению = 0 Тогда 
									Прервать;
								ИначеЕсли НЕ ЗначениеЗаполнено(Выборка.Склад) Тогда
									Продолжить;
								КонецЕсли;
								СтрокаСвод = ТаблицаСвод.Добавить();
								ЗаполнитьЗначенияСвойств(СтрокаСвод, Выборка);
								Если КоличествоКРаспределению <= Выборка.КоличествоПартии Тогда
									СтрокаСвод.Количество = КоличествоКРаспределению;
									КоличествоКРаспределению = 0;
								Иначе
									СтрокаСвод.Количество = Выборка.КоличествоПартии;
									КоличествоКРаспределению = КоличествоКРаспределению - СтрокаСвод.Количество;
								КонецЕсли;
								СтрокаСвод.СуммаБезНДС = Окр(СтрокаСвод.Количество * ЦенаТовара, 2);
							КонецЦикла;
							// Если не вся партия распределилась по организации.
							Если КоличествоКРаспределению > 0 Тогда
								// добавляем к последней строке.
								СтрокаСвод.Количество = СтрокаСвод.Количество + КоличествоКРаспределению;
								СтрокаСвод.СуммаБезНДС = СтрокаСвод.СуммаБезНДС + Окр(КоличествоКРаспределению * ЦенаТовара, 2);
							КонецЕсли;
					КонецЦикла; //Пока ВыборкаХарактеристика.Следующий() Цикл
				КонецЦикла; //Пока ВыборкаНоменклатура.Следующий() Цикл
			КонецЦикла;  //Пока ВыборкаДоговор.Следующий() Цикл
		КонецЦикла; //Пока ВыборкаКонтрагент.Следующий() Цикл
	КонецЦикла;  //Пока ВыборкаОрганизация.Следующий() Цикл
	
	НуженДоговор = Истина;
	Если ТипДанных = "Тара" Тогда
		// разрез Договор не нужен
		НуженДоговор = Ложь;
		ТаблицаСвод.Свернуть("Организация, Контрагент, Склад, Номенклатура, ЕдиницаИзмерения, Характеристика", "Количество, СуммаБезНДС");
		ТаблицаСвод.Сортировать("Организация, Контрагент, Склад, Номенклатура, Характеристика");
	Иначе
		ТаблицаСвод.Сортировать("Организация, Контрагент, Договор, Склад, Номенклатура, Характеристика");
	КонецЕсли;
	
	МассивВыборки = Новый Массив;
	
	ТекущаяОрганизация = Неопределено;
	ТекущийСклад = Неопределено;
	ТекущийКонтрагент = Неопределено;
	ТекущийДоговор = Неопределено;
	
	ДанныеИБ = Неопределено;
	
	Для Каждого Строка Из ТаблицаСвод Цикл
		Если ТекущаяОрганизация = Неопределено Или Строка.Организация <> ТекущаяОрганизация
			Или ТекущийСклад <> Строка.Склад 
			Или ТекущийКонтрагент <> Строка.Контрагент
			Или (НуженДоговор И ТекущийДоговор <> Строка.Договор) Тогда
			ТекущаяОрганизация = Строка.Организация;
			ТекущийСклад = Строка.Склад;
			ТекущийКонтрагент = Строка.Контрагент;
			Если НуженДоговор Тогда
				ТекущийДоговор = Строка.Договор;
			КонецЕсли;
			
			Если ДанныеИБ <> Неопределено И ДанныеИБ[ТипДанных].Количество()>0 Тогда
				МассивВыборки.Добавить(ДанныеИБ);
			КонецЕсли;
			ДанныеИБ = Новый Структура("Дата, Организация, Контрагент, Склад, " + ТипДанных);
			
			Если НуженДоговор Тогда
				ДанныеИБ.Вставить("Договор", Строка.Договор);
			КонецЕсли;
			ДанныеИБ.Дата = ДатаОстатков;
			ДанныеИБ.Организация = Строка.Организация;
			ДанныеИБ.Склад = Строка.Склад;
			ДанныеИБ.Контрагент = Строка.Контрагент;
			
			ДанныеИБ[ТипДанных] = ТаблицаДанныхЭталон.Скопировать();
		КонецЕсли;
		
		НоваяСтрока = ДанныеИБ[ТипДанных].Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		НоваяСтрока.КоличествоУпаковок = НоваяСтрока.Количество;	
	КонецЦикла;
	
	Если ДанныеИБ <> Неопределено И ДанныеИБ[ТипДанных].Количество()>0 Тогда
		МассивВыборки.Добавить(ДанныеИБ);
	КонецЕсли;
КонецПроцедуры
Процедура ЗаполнитьПризнакиОтраженияВУчетах(Объект)
	Если Объект.ОтражатьВУправленческомУчете И Объект.ОтражатьВБухгалтерскомУчете И Объект.ОтражатьВНалоговомУчете Тогда
		Возврат;
	КонецЕсли;
	Объект.ОтражатьВУправленческомУчете = Истина;
	ОтражатьВРУ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Организация, "ОтражатьВРегламентированномУчете");
	Объект.ОтражатьВБухгалтерскомУчете = ОтражатьВРУ;
	Объект.ОтражатьВНалоговомУчете = ОтражатьВРУ;
КонецПроцедуры
Процедура ЗаполнитьПризнакиОтраженияВУчетахБДС(Объект)
	Если Объект.ОтраженоВОперУчете И Объект.ОтражатьВБухгалтерскомУчете И Объект.ОтражатьВНалоговомУчете Тогда
		Возврат;
	КонецЕсли;
	Объект.ОтраженоВОперУчете = Истина;
	ОтражатьВРУ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Организация, "ОтражатьВРегламентированномУчете");
	Объект.ОтражатьВБухгалтерскомУчете = ОтражатьВРУ;
	Объект.ОтражатьВНалоговомУчете = ОтражатьВРУ;
КонецПроцедуры
Процедура ЗаполнитьСБДСПриПолучении(ДанныеXDTO, ПолученныеДанные)
	ПолученныеДанные.Оплачено = Истина;
	ПолученныеДанные.Проведен = Истина;
	ДатаВхДок = "";
	НомерВхДок = "";
	ДанныеXDTO.Свойство("ДатаВходящегоДокумента", ДатаВхДок);
	ДанныеXDTO.Свойство("НомерВходящегоДокумента", НомерВхДок);
	Если ЗначениеЗаполнено(ДатаВхДок) И ЗначениеЗаполнено(НомерВхДок) Тогда
		ПолученныеДанные.Номер = НомерВхДок;
		ПолученныеДанные.Дата = ДатаВхДок;
	КонецЕсли;
	ОчередностьПлатежа = "";
	ДанныеXDTO.Свойство("Очередность", ОчередностьПлатежа);
	// Очередность из строки в число.
	Если ЗначениеЗаполнено(ОчередностьПлатежа) И СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ОчередностьПлатежа) Тогда
		ПолученныеДанные.ОчередностьПлатежа = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ОчередностьПлатежа);
	Иначе
		ПолученныеДанные.ОчередностьПлатежа = 0;
	КонецЕсли;
КонецПроцедуры
Функция ОпределитьИмяПКОПоДаннымXDTO(ДанныеXDTO)
	Если НЕ ЗначениеЗаполнено(ДанныеXDTO) Тогда
		Возврат "";
	КонецЕсли;
	ИмяПКО = "";
	ТипЗначенияСвойства = ДанныеXDTO.ТипЗначения;
	Если Найти(ТипЗначенияСвойства, "ПоступлениеТоваровУслуг")>0 Тогда
		ИмяПКО = "Документ_ПоступлениеТоваровУслуг_Получение";
	ИначеЕсли Найти(ТипЗначенияСвойства, "ВозвратТоваровОтПокупателя")>0 Тогда
		ИмяПКО = "Документ_ВозвратТоваровОтПокупателя_Получение";
	ИначеЕсли Найти(ТипЗначенияСвойства, "РеализацияТоваровУслуг")>0 Тогда
		ИмяПКО = "Документ_РеализацияТоваровУслуг_Получение";
	ИначеЕсли Найти(ТипЗначенияСвойства, "ОтчетКомиссионера")>0 Тогда
		ИмяПКО = "Документ_ОтчетКомиссионера_Получение";
	ИначеЕсли Найти(ТипЗначенияСвойства, "СчетФактураПолученный")>0 Тогда
		ИмяПКО = "Документ_СчетФактураПолученный_Получение";
	ИначеЕсли Найти(ТипЗначенияСвойства, "ВозвратТоваровПоставщику")>0 Тогда
		ИмяПКО = "Документ_ВозвратТоваровПоставщику_Получение";
	ИначеЕсли Найти(ТипЗначенияСвойства, "КорректировкаПоступления")>0 Тогда
		ИмяПКО = "Документ_КорректировкаПоступленияТоваров_Получение";
	ИначеЕсли Найти(ТипЗначенияСвойства, "ТаможеннаяДекларация")>0 Тогда
		ИмяПКО = "Документ_ТаможеннаяДекларация_Получение";
	ИначеЕсли Найти(ТипЗначенияСвойства, "АвансовыйОтчет")>0 Тогда
		ИмяПКО = "Документ_АвансовыйОтчет_Получение";
	ИначеЕсли Найти(ТипЗначенияСвойства, "КорректировкаДолга")>0 Тогда
		ИмяПКО = "Документ_КорректировкаДолга_Получение";
	ИначеЕсли Найти(ТипЗначенияСвойства, "КорректировкаРеализации")>0 Тогда
		ИмяПКО = "Документ_КорректировкаРеализацииТоваров_Получение";
	ИначеЕсли Найти(ТипЗначенияСвойства, "ОтчетКомитенту")>0 Тогда
		ИмяПКО = "Документ_ОтчетКомитенту_Получение";
	ИначеЕсли Найти(ТипЗначенияСвойства, "ТаможеннаяДекларация")>0 Тогда
		ИмяПКО = "Документ_ГТДИмпорт_Получение";
	ИначеЕсли Найти(ТипЗначенияСвойства, "ОтчетОРозничныхПродажах")>0 Тогда
		ИмяПКО = "Документ_ОтчетОРозничныхПродажах_Получение";
	КонецЕсли;
	Возврат ИмяПКО;
КонецФункции
Функция ОпределитьИмяПКОПоСсылкеНаДокумент(ДокументСсылка)
	ИмяПКО = "";
	Если НЕ ЗначениеЗаполнено(ДокументСсылка) Тогда
		Возврат ИмяПКО;
	КонецЕсли;
	ТипДокумента = ТипЗнч(ДокументСсылка);
	Если ТипДокумента = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
		ИмяПКО = "Документ_ПоступлениеТоваровУслуг_Отправка";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ПоступлениеТоваровУслугВНТТ") Тогда
		ИмяПКО = "Документ_ПоступлениеТоваровУслугВНТТ_Отправка";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.АвансовыйОтчет") Тогда
		ИмяПКО = "Документ_АвансовыйОтчет_Отправка";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ВозвратТоваровПоставщикуИзНТТ") Тогда
		ИмяПКО = "Документ_ВозвратТоваровПоставщикуИзНТТ_Отправка";  
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
		ИмяПКО = "Документ_ВозвратТоваровПоставщику_Отправка";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ПоступлениеДопРасходов") Тогда
		ИмяПКО = "Документ_ПоступлениеДопРасходов_Отправка";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.КорректировкаПоступления") Тогда
		ИмяПКО = "Документ_КорректировкаПоступления_Отправка";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ГТДИмпорт") Тогда
		ИмяПКО = "Документ_ГТДИмпорт_Отправка";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		ИмяПКО = "Документ_РеализацияТоваровУслуг_Отправка";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.РеализацияОтгруженныхТоваров") Тогда
		ИмяПКО = "Документ_РеализацияОтгруженныхТоваров_Отправка"; 
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
		ИмяПКО = "Документ_СчетФактураВыданный_Отправка"; 
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда
		ИмяПКО = "Документ_РКОРасчетыСКонтрагентами_Отправка";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") Тогда
	    ИмяПКО = "Документ_ПКОРасчетыСКонтрагентами_Отправка";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ОплатаОтПокупателяПлатежнойКартой") Тогда
	    ИмяПКО = "Документ_ОперацияПоПлатежнойКарте_Отправка";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.АккредитивПереданный") Тогда
		ИмяПКО = "Документ_АккрПередРасчетыСКонтрагентами_Отправка";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.АккредитивПолученный") Тогда
		ИмяПКО = "Документ_АккрПолучРасчетыСКонтрагентами_Отправка";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ИнкассовоеПоручениеПереданное") Тогда
		ИмяПКО = "Документ_ИнкассПередРасчетыСКонтрагентами_Отправка";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ИнкассовоеПоручениеПолученное") Тогда
		ИмяПКО = "Документ_ИнкассПолучРасчетыСКонтрагентами_Отправка";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ПлатежноеПоручениеВходящее") Тогда
		ИмяПКО = "Документ_ПлатПорВхРасчетыСКонтрагентами_Отправка";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ПлатежноеПоручениеИсходящее") Тогда
		ИмяПКО = "Документ_ПлатПорИсхРасчетыСКонтрагентами_Отправка";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ПлатежныйОрдерСписаниеДенежныхСредств") Тогда
		ИмяПКО = "Документ_ПлОрдерСписРасчетыСКонтрагентами_Отправка";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ПлатежныйОрдерПоступлениеДенежныхСредств") Тогда
		ИмяПКО = "Документ_ПлОрПостРасчетыСКонтрагентами_Отправка";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ПлатежноеТребованиеВыставленное") Тогда
		ИмяПКО = "Документ_ПлТребВыстРасчетыСКонтрагентами_Отправка";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ПлатежноеТребованиеПолученное") Тогда
		ИмяПКО = "Документ_ПлТребПолучРасчетыСКонтрагентами_Отправка";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.СписаниеТоваров") Тогда
		ИмяПКО = "Документ_СписаниеТоваров_Отправка";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ТребованиеНакладная") Тогда
		ИмяПКО = "Документ_ТребованиеНакладная_Отправка";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.УстановкаЦенНоменклатуры") Тогда
		ИмяПКО = "Документ_УстановкаЦенНоменклатуры_Отправка";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.КомплектацияНоменклатуры") Тогда
		ИмяПКО = "Документ_КомплектацияНоменклатуры_Отправка";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ОприходованиеТоваров") Тогда
		ИмяПКО = "Документ_ОприходованиеТоваров_Отправка";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ОтчетОРозничныхПродажах") Тогда
		ИмяПКО = "Документ_ОтчетОРозничныхПродажах_Отправка";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда
		ИмяПКО = "Документ_ПеремещениеТоваров_Отправка";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") Тогда
		ИмяПКО = "Документ_ОтчетКомиссионера_Отправка";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ОтчетКомитентуОПродажах") Тогда
		ИмяПКО = "Документ_ОтчетКомитенту_Отправка";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.РеализацияУслугПоПереработке") Тогда
		ИмяПКО = "Документ_ОтчетДавальцу_Отправка"; 
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ПолучениеУслугПоПереработке") Тогда
		ИмяПКО = "Документ_ОтчетПереработчика_Отправка"; 
	
	КонецЕсли;
	Возврат ИмяПКО;
КонецФункции
Процедура ОпределитьТипыЗапасовПриОтправке(ДанныеИБ, ТабТовары, ВидДвижения = "")
	Если ТабТовары.Колонки.Найти("ТипЗапасов") = Неопределено Тогда
		ТабТовары.Колонки.Добавить("ТипЗапасов");
	КонецЕсли;
	ЕстьСумма = (ТабТовары.Колонки.Найти("Сумма") <> Неопределено);
	ЕстьСуммаНДС = (ТабТовары.Колонки.Найти("СуммаНДС") <> Неопределено);
	ЕстьСуммаВРознице = (ТабТовары.Колонки.Найти("СуммаВРознице") <> Неопределено);
	// Вычисление типов запасов по данным регистров партий.
	Запрос = Новый Запрос;
	Если Константы.ИспользоватьРасширеннуюАналитикуУчетаНоменклатурыИЗатрат.Получить() = Истина
		И Константы.ДатаНачалаИспользованияРасширеннойАналитикиУчетаНоменклатурыИЗатрат.Получить() <= ДанныеИБ.Дата Тогда
		Запрос.Текст = "ВЫБРАТЬ
		|РегАналитикаУчетаЗатрат.Затрата КАК Номеклатура,
		|РегАналитикаУчетаЗатрат.ХарактеристикаЗатраты КАК Характеристика,
		|РегАналитикаУчетаПартий.СтатусПартии КАК СтатусПартии,
		|УчетЗатрат.Количество КАК Количество
		|ИЗ РегистрНакопления.УчетЗатрат КАК УчетЗатрат
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПартий КАК РегАналитикаУчетаПартий
		|ПО УчетЗатрат.АналитикаУчетаПартий = РегАналитикаУчетаПартий.Ссылка
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаЗатрат КАК РегАналитикаУчетаЗатрат
		|ПО УчетЗатрат.АналитикаУчетаЗатрат = РегАналитикаУчетаЗатрат.Ссылка
		|ГДЕ УчетЗатрат.Регистратор = &Регистратор 
		|И (&ЛюбойВидДвижения ИЛИ УчетЗатрат.ВидДвижения = &ВидДвиженияРегистра)
		|И (РегАналитикаУчетаПартий.СтатусПартии = ЗНАЧЕНИЕ(Перечисление.СтатусыПартийТоваров.ВПереработку)
		|	ИЛИ РегАналитикаУчетаПартий.СтатусПартии = ЗНАЧЕНИЕ(Перечисление.СтатусыПартийТоваров.НаКомиссию))"
	Иначе
		Запрос.Текст = "ВЫБРАТЬ
		|ТабПартии.Номенклатура КАК Номенклатура,
		|ТабПартии.ХарактеристикаНоменклатуры КАК Характеристика,
		|ТабПартии.СтатусПартии КАК СтатусПартии,
		|ТабПартии.КОличество КАК Количество
		|ИЗ РегистрНакопления.ПартииТоваровНаСкладах КАК ТабПартии
		|ГДЕ ТабПартии.Регистратор = &Регистратор
		|И (&ЛюбойВидДвижения ИЛИ ТабПартии.ВидДвижения = &ВидДвиженияРегистра)
		|И (ТабПартии.СтатусПартии = ЗНАЧЕНИЕ(Перечисление.СтатусыПартийТоваров.ВПереработку)
		|	ИЛИ ТабПартии.СтатусПартии = ЗНАЧЕНИЕ(Перечисление.СтатусыПартийТоваров.НаКомиссию))";
	КонецЕсли;
	Запрос.УстановитьПараметр("Регистратор", ДанныеИБ.Ссылка);
	Если ВидДвижения = "" Тогда
		Запрос.УстановитьПараметр("ЛюбойВидДвижения", Истина);
		// не принципиально что.
		Запрос.УстановитьПараметр("ВидДвиженияРегистра", ВидДвиженияНакопления.Приход);
	Иначе
		Запрос.УстановитьПараметр("ЛюбойВидДвижения", Ложь);
		Запрос.УстановитьПараметр("ВидДвиженияРегистра", ?(ВидДвижения = "+", ВидДвиженияНакопления.Приход, ВидДвиженияНакопления.Расход));
	КонецЕсли;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.СтатусПартии = Перечисления.СтатусыПартийТоваров.НаКомиссию Тогда
			ТипЗапасов = "КомиссионныеТовары";
		Иначе
			ТипЗапасов = "ДавальческиеСырьеИМатериалы";
		КонецЕсли;
		КоличествоКРаспределению = Выборка.Количество;
		Для Каждого СтрТовары Из ТабТовары Цикл
			Если КоличествоКРаспределению = 0 Тогда
				Прервать;
			КонецЕсли;
			Если СтрТовары.Номенклатура <> Выборка.Номенклатура
				Или СтрТовары.Характеристика <> Выборка.Характеристика
				Или ЗначениеЗаполнено(СтрТовары.ТипЗапасов) Тогда
				Продолжить;
			КонецЕсли;
			Если СтрТовары.Количество <= КоличествоКРаспределению Тогда
				СтрТовары.ТипЗапасов = ТипЗапасов;
				КоличествоКРаспределению = КоличествоКРаспределению - СтрТовары.Количество; 
			Иначе
				// строка делится на две, вторая с пустым типом запасов.
				СтрТовары.ТипЗапасов = ТипЗапасов;
				КоэффициентПересчетаСумм = КоличествоКРаспределению / СтрТовары.Количество;
				СтрТовары.Количество = КоличествоКРаспределению;
				СтрТовары.КоличествоУпаковок = ?(СтрТовары.Коэффициент = 0, СтрТовары.Количество, Окр(СтрТовары.Количество / СтрТовары.Коэффициент,3)); 
				ДубльТовары = ТабТовары.Добавить();
				ДубльТовары.ЗаполнитьЗначенияСвойств(СтрТовары);
				ДубльТовары.Количество = СтрТовары.Количество - КоличествоКРаспределению;
				ДубльТовары.КоличествоУпаковок = ?(ДубльТовары.Коэффициент = 0, ДубльТовары.Количество, Окр(ДубльТовары.Количество / ДубльТовары.Коэффициент,3));
				ДубльТовары.ТипЗапасов = "";
				КоличествоКРаспределению = 0;
				Если ЕстьСумма Тогда
					СуммаПересчет = Окр(СтрТовары.Сумма * КоэффициентПересчетаСумм, 2);
					СуммаОстаток = СтрТовары.Сумма - СуммаПересчет;
					СтрТовары.Сумма = СуммаПересчет;
					ДубльТовары.Сумма = СуммаОстаток;
				КонецЕсли;
				Если ЕстьСуммаНДС Тогда
					СуммаНДСПересчет = Окр(СтрТовары.СуммаНДС * КоэффициентПересчетаСумм, 2);
					СуммаНДСОстаток = СтрТовары.СуммаНДС - СуммаНДСПересчет;
					СтрТовары.СуммаНДС = СуммаНДСПересчет;
					ДубльТовары.СуммаНДС = СуммаНДСОстаток;
				КонецЕсли;
				Если ЕстьСуммаВРознице Тогда
					СуммаВРозницеПересчет = Окр(СтрТовары.СуммаВРознице * КоэффициентПересчетаСумм, 2);
					СуммаВРозницеОстаток = СтрТовары.СуммаВРознице - СуммаВРозницеПересчет;
					СтрТовары.СуммаВРознице = СуммаВРозницеПересчет;
					ДубльТовары.СуммаВРознице = СуммаВРозницеОстаток;
				КонецЕсли; 
			КонецЕсли;
		КонецЦикла;	
	КонецЦикла;                                                                                                                       
	// Для незаполненных типов запасов применяются собственные товары.
	Для Каждого СтрТовары Из ТабТовары Цикл
		Если НЕ ЗначениеЗаполнено(СтрТовары.ТипЗапасов) Тогда
			СтрТовары.ТипЗапасов = "СобственныеТовары";
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры
Процедура ОтложеннаяОбработка_АвансовыйОтчет(Объект)
	ЗаполнитьКолонкиТабличнойЧасти(Объект, "Товары", "Коэффициент");
	Для Каждого СтрокаТабличнойЧасти Из Объект.ОплатаПоставщикам Цикл
		Если ЗНачениеЗаполнено(СтрокаТабличнойЧасти.СчетУчетаРасчетовСКонтрагентом) И ЗначениеЗаполнено(СтрокаТабличнойЧасти.СчетУчетаРасчетовПоАвансам) Тогда
			Продолжить;
		КонецЕсли;
		СчетаУчета = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(Объект.Организация, СтрокаТабличнойЧасти.Контрагент, СтрокаТабличнойЧасти.ДоговорКонтрагента);
	
		СтрокаТабличнойЧасти.СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетов;
		СтрокаТабличнойЧасти.СчетУчетаРасчетовПоАвансам		= СчетаУчета.СчетАвансов;
	КонецЦикла;
КонецПроцедуры
Процедура ОтложеннаяОбработка_ВозвратПередТоваров(Объект)
	ЗаполнитьКолонкиТабличнойЧасти(Объект, "Товары", "Коэффициент, Качество");
КонецПроцедуры
Процедура ОтложеннаяОбработка_Возвраты(Объект)
	ЗаполнитьКолонкиТабличнойЧасти(Объект, "Товары", "Коэффициент, Качество");
	ОтложеннаяОбработка_ЗаполнениеСчетовРасчетовСКонтр(Объект);
КонецПроцедуры
Процедура ОтложеннаяОбработка_ВыпускПродукции(Объект)
	Объект.ПодразделениеОрганизации = РаботаСДиалогамиСервер.ПодразделениеОрганизации(Объект.Подразделение, Объект.Организация);
	ЗаполнитьКолонкиТабличнойЧасти(Объект, "Продукция", "Качество, Коэффициент");
	Если Объект.ОтражатьВБухгалтерскомУчете Тогда
		Для Каждого Строка Из Объект.Продукция Цикл
			Если ЗначениеЗаполнено(Строка.СчетУчетаБУ) Тогда
				Продолжить;
			КонецЕсли;
			СчетаУчетаВДокументах.ЗаполнитьСчетаУчетаТабличнойЧасти("Продукция", Строка, Объект, Истина, Истина, , , Истина);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры
Процедура ОтложеннаяОбработка_ГТДИмпорт(Объект)
	Если НЕ ЗначениеЗаполнено(Объект.СчетУчетаРасчетовСКонтрагентом) Тогда
		СчетаУчета = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(Объект.Организация, Объект.Контрагент, Объект.ДоговорКонтрагента);
	
		Объект.СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетов;
	КонецЕсли;
КонецПроцедуры
Процедура ОтложеннаяОбработка_ЗаполнениеСчетовРасчетовСКонтр(Объект)
	СчетаУчета = Неопределено;
	Если НЕ ЗначениеЗаполнено(Объект.СчетУчетаРасчетовСКонтрагентом) Или НЕ ЗначениеЗаполнено(Объект.СчетУчетаРасчетовПоАвансам) Тогда
		СчетаУчета = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(Объект.Организация, Объект.Контрагент, Объект.ДоговорКонтрагента);
		Если НЕ ЗначениеЗаполнено(Объект.СчетУчетаРасчетовСКонтрагентом) Тогда
			Объект.СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетов;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Объект.СчетУчетаРасчетовПоАвансам) Тогда
			Объект.СчетУчетаРасчетовПоАвансам = СчетаУчета.СчетАвансов;
		КонецЕсли;
	КонецЕсли;
	Если ТипЗнч(Объект) = Тип("ДокументОбъект.ВозвратТоваровПоставщику") И НЕ ЗначениеЗаполнено(Объект.СчетУчетаРасчетовПоПретензиям) Тогда
		Если СчетаУчета = Неопределено Тогда
			СчетаУчета = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(Объект.Организация, Объект.Контрагент, Объект.ДоговорКонтрагента);
		КонецЕсли;
		РасчетыВУЕ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ДоговорКонтрагента, "РасчетыВУсловныхЕдиницах");
		Если РасчетыВУЕ = Истина Тогда
			Объект.СчетУчетаРасчетовПоПретензиям = ПланыСчетов.Хозрасчетный.РасчетыПоПретензиямУЕ;
		ИначеЕсли Объект.СчетУчетаРасчетовСКонтрагентом.Валютный тогда
			Объект.СчетУчетаРасчетовПоПретензиям = ПланыСчетов.Хозрасчетный.РасчетыПоПретензиямВал;
		Иначе
			Объект.СчетУчетаРасчетовПоПретензиям = ПланыСчетов.Хозрасчетный.РасчетыПоПретензиям;
		КонецЕсли; 
	КонецЕсли;
КонецПроцедуры
Процедура ОтложеннаяОбработка_ЗаполнитьКассуВКассовомОрдере(Объект)
	Если НЕ ЗначениеЗаполнено(Объект.Касса) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		|	Ссылка
		|ИЗ Справочник.Кассы
		|ГДЕ Владелец = &Организация И ВалютаДенежныхСредств = &Валюта";
		Запрос.УстановитьПараметр("Организация", Объект.Организация);
		Запрос.УстановитьПараметр("Валюта", Объект.ВалютаДокумента);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Объект.Касса = Выборка.Ссылка;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
Процедура ОтложеннаяОбработка_Контрагенты(Объект, КомпонентыОбмена, ОбъектМодифицирован)
	// флаги Покупатель, Поставщик
	Если Объект.Поставщик И Объект.Покупатель Тогда
		Возврат;
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ 
	|ВЫБОР КОГДА ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком)
	|	ИЛИ ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СКомитентом) Тогда
	|	Истина
	|ИНАЧЕ Ложь КОНЕЦ КАК Поставщик,
	|ВЫБОР КОГДА ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПокупателем)
	|	ИЛИ ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СКомиссионером) Тогда
	|	Истина
	|ИНАЧЕ Ложь КОНЕЦ КАК Покупатель
	|ИЗ Справочник.ДоговорыКонтрагентов
	|ГДЕ Владелец = &Контрагент 
	|	И ВидДоговора <> ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.Прочее)";
	Запрос.УстановитьПараметр("Контрагент", Объект.Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.Поставщик И НЕ Объект.Поставщик Тогда
			Объект.Поставщик = Истина;
		КонецЕсли;
		Если Выборка.Покупатель И НЕ Объект.Покупатель Тогда
			Объект.Покупатель = Истина;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры
Процедура ОтложеннаяОбработка_КоррДолга(Объект)
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	Для Каждого СтрокаТЧ Из Объект.СуммыДолга Цикл
		ВалютаДоговора = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТЧ.ДоговорКонтрагента, "ВалютаВзаиморасчетов");
		СтрокаТЧ.СуммаРегл = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТЧ.Сумма,
						             ВалютаДоговора,ВалютаРегламентированногоУчета,
						             СтрокаТЧ.КурсВзаиморасчетов, 1, 
						             СтрокаТЧ.КратностьВзаиморасчетов, 1);
		СтрокаТЧ.СуммаНУ = СтрокаТЧ.СуммаРегл;
		Если ЗначениеЗаполнено(СтрокаТЧ.СчетУчетаАвансов) И ЗначениеЗаполнено(СтрокаТЧ.СчетУчетаРасчетов) Тогда
			Продолжить;
		КонецЕсли;
		Если Объект.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета
			И СтрокаТЧ.ВидЗадолженности = Перечисления.ВидыЗадолженности.Кредиторская Тогда
			ТекКонтрагент = Объект.КонтрагентКредитор;
		Иначе
			ТекКонтрагент = Объект.КонтрагентДебитор;
		КонецЕсли;
		СчетаУчета = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(Объект.Организация, ТекКонтрагент, СтрокаТЧ.ДоговорКонтрагента);
		
		Если СтрокаТЧ.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком Тогда
			СтрокаТЧ.СчетУчетаРасчетов = СчетаУчета.СчетРасчетов;
			СтрокаТЧ.СчетУчетаАвансов  = СчетаУчета.СчетАвансов;
		ИначеЕсли СтрокаТЧ.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем 
			ИЛИ СтрокаТЧ.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
			СтрокаТЧ.СчетУчетаРасчетов = СчетаУчета.СчетРасчетовПокупателя;
			СтрокаТЧ.СчетУчетаАвансов  = СчетаУчета.СчетАвансовПокупателя;
		ИначеЕсли СтрокаТЧ.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
			СтрокаТЧ.СчетУчетаРасчетов = СчетаУчета.СчетРасчетовСКомитентом;
			СтрокаТЧ.СчетУчетаАвансов  = СчетаУчета.СчетАвансов;
		Иначе //.Прочее
			СтрокаТЧ.СчетУчетаРасчетов = СчетаУчета.СчетРасчетовПокупателя;
			СтрокаТЧ.СчетУчетаАвансов  = СчетаУчета.СчетАвансовПокупателя;
		КонецЕсли;
	КонецЦикла;
	Если Объект.СуммыДолга.Количество() = 1 Тогда
		Объект.ДоговорКонтрагента = Объект.СуммыДолга[0].ДоговорКонтрагента;
	КонецЕсли;
КонецПроцедуры
Процедура ОтложеннаяОбработка_КорректировкаПоступления(Объект)
	ЗаполнитьКолонкиТабличнойЧасти(Объект, "Товары", "Коэффициент, ЕдиницаИзмерения");
	ОтложеннаяОбработка_ЗаполнениеСчетовРасчетовСКонтр(Объект);
	
	КурсИКратность = МодульВалютногоУчета.ПолучитьКурсВалюты(Объект.ВалютаДокумента, Объект.Дата);
	Объект.КурсВзаиморасчетов = КурсИКратность.Курс;
	Объект.КратностьВзаиморасчетов = КурсИКратность.Кратность;
	
	
	Для Каждого СтрокаУслуги Из Объект.Услуги Цикл
		Если ЗначениеЗаполнено(СтрокаУслуги.Номенклатура) И НЕ ЗначениеЗаполнено(СтрокаУслуги.Содержание) Тогда
			СтрокаУслуги.Содержание = СтрокаУслуги.Номенклатура.Наименование;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(СтрокаУслуги.Подразделение)
			Или ЗначениеЗаполнено(СтрокаУслуги.ПодразделениеОрганизации) Тогда
			Продолжить;
		КонецЕсли;
		СтрокаУслуги.ПодразделениеОрганизации = РаботаСДиалогамиСервер.ПодразделениеОрганизации(СтрокаУслуги.Подразделение, Объект.Организация);
	КонецЦикла;
КонецПроцедуры
Процедура ОтложеннаяОбработка_КорректировкаРеализации(Объект)
	ЗаполнитьКолонкиТабличнойЧасти(Объект, "Товары", "Коэффициент, ЕдиницаИзмерения, Качество, СпособСписанияОстаткаТоваров");
	ОтложеннаяОбработка_ЗаполнениеСчетовРасчетовСКонтр(Объект);
	
	КурсИКратность = МодульВалютногоУчета.ПолучитьКурсВалюты(Объект.ВалютаДокумента, Объект.Дата);
	Объект.КурсВзаиморасчетов = КурсИКратность.Курс;
	Объект.КратностьВзаиморасчетов = КурсИКратность.Кратность;
	
	
	Для Каждого СтрокаУслуги Из Объект.Услуги Цикл
		Если ЗначениеЗаполнено(СтрокаУслуги.Номенклатура) И НЕ ЗначениеЗаполнено(СтрокаУслуги.Содержание) Тогда
			СтрокаУслуги.Содержание = СтрокаУслуги.Номенклатура.Наименование;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры
Процедура ОтложеннаяОбработка_ОперацияПоПлатежнойКарте(Объект)
	Если ЗначениеЗаполнено(Объект.ДоговорЭквайринга) Тогда
		Возврат;
	КонецЕсли;
	
	// Заполнение договора эквайринга и связанных данных.
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	Ссылка,
	|	ВидОплаты,
	|	ПроцентТорговойУступки,
	|	Ссылка.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов
	|ИЗ Справочник.ДоговорыЭквайринга.ТарифыЗаРасчетноеОбслуживание
	|ГДЕ Ссылка.Эквайрер = &Эквайрер
	|	И Ссылка.ДоговорВзаиморасчетов.Организация = &Организация
	|	И Ссылка.ДоговорВзаиморасчетов.ВалютаВзаиморасчетов = &Валюта
	|	И НЕ Ссылка.ПометкаУдаления";
	Запрос.УстановитьПараметр("Эквайрер", Объект.Эквайрер);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("Валюта", Объект.ВалютаДокумента);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Объект.ДоговорЭквайринга = Выборка.Ссылка;
		Объект.ВидОплаты = Выборка.ВидОплаты;
		Объект.ПроцентТорговойУступки = Выборка.ПроцентТорговойУступки;
		Объект.СуммаТорговойУступки = Объект.СуммаДокумента * Выборка.ПроцентТорговойУступки / 100;
		Объект.ДоговорВзаиморасчетовЭквайрера = Выборка.ДоговорВзаиморасчетов;
		Если НЕ ЗначениеЗаполнено(Объект.СчетУчетаРасчетовСЭквайрером) Тогда
			СчетаУчета = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(Объект.Организация, Объект.Эквайрер, Выборка.ДоговорВзаиморасчетов);
	
			Объект.СчетУчетаРасчетовСЭквайрером = СчетаУчета.СчетРасчетов;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
Процедура ОтложеннаяОбработка_ОприходованиеТоваров(Объект)
	ЗаполнитьКолонкиТабличнойЧасти(Объект, "Товары", "Качество, Коэффициент, СтатусПартии");
	Если НЕ ЗначениеЗаполнено(Объект.КоррСчет) Тогда
		Объект.КоррСчет = ПланыСчетов.Хозрасчетный.ПрочиеДоходы;
	КонецЕсли;
КонецПроцедуры
Процедура ОтложеннаяОбработка_ОтчетДавальцу(Объект)
	ЗаполнитьКолонкиТабличнойЧасти(Объект, "ИспользованныеМатериалы", "Коэффициент");
	ОтложеннаяОбработка_ЗаполнениеСчетовРасчетовСКонтр(Объект);
КонецПроцедуры
Процедура ОтложеннаяОбработка_ОтчетКомиссионера(Объект)
	ЗаполнитьКолонкиТабличнойЧасти(Объект, "Товары", "Коэффициент");
	Если ЗначениеЗаполнено(Объект.Подразделение) Тогда
		Объект.ПодразделениеОрганизации = РаботаСДиалогамиСервер.ПодразделениеОрганизации(Объект.Подразделение, Объект.Организация);
	КонецЕсли;
	СчетаУчета = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(Объект.Организация, Объект.Контрагент, Объект.ДоговорКонтрагента);
	Если НЕ ЗначениеЗаполнено(Объект.СчетУчетаРасчетовСКонтрагентом) Тогда
		Объект.СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетов;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Объект.СчетУчетаРасчетовПоАвансамВыданным) Тогда
		Объект.СчетУчетаРасчетовПоАвансамВыданным = СчетаУчета.СчетАвансов;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Объект.СчетУчетаРасчетовПоАвансамПолученным) Тогда
		Объект.СчетУчетаРасчетовПоАвансамПолученным = СчетаУчета.СчетАвансов;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Объект.СчетУчетаРасчетовЗаПосредническиеУслуги) Тогда
		Объект.СчетУчетаРасчетовЗаПосредническиеУслуги = СчетаУчета.СчетРасчетов;
	КонецЕсли;
	
	Для Каждого СтрПокупатели Из Объект.Покупатели Цикл
		Если ЗначениеЗаполнено(СтрПокупатели.СчетФактура) И НЕ ЗначениеЗаполнено(СтрПокупатели.ДатаСФ) Тогда
			СтрПокупатели.ДатаСФ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрПокупатели.СчетФактура,"Дата");
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры
Процедура ОтложеннаяОбработка_ОтчетКомитенту(Объект)
	ЗаполнитьКолонкиТабличнойЧасти(Объект, "Товары", "Коэффициент");
	ОтложеннаяОбработка_ЗаполнениеСчетовРасчетовСКонтр(Объект);
КонецПроцедуры
Процедура ОтложеннаяОбработка_ОтчетОРП(Объект)
	ЗаполнитьКолонкиТабличнойЧасти(Объект, "Товары", "Коэффициент");
КонецПроцедуры
Процедура ОтложеннаяОбработка_ОтчетПереработчика(Объект)
	ЗаполнитьКолонкиТабличнойЧасти(Объект, "Товары", "Коэффициент");
	ЗаполнитьКолонкиТабличнойЧасти(Объект, "ИспользованныеМатериалы", "Коэффициент");
	Если ЗначениеЗаполнено(Объект.Подразделение) И НЕ ЗначениеЗаполнено(Объект.ПодразделениеОрганизации) Тогда
		Объект.ПодразделениеОрганизации = РаботаСДиалогамиСервер.ПодразделениеОрганизации(Объект.Подразделение, Объект.Организация);
	КонецЕсли;
	ОтложеннаяОбработка_ЗаполнениеСчетовРасчетовСКонтр(Объект);
КонецПроцедуры
Процедура ОтложеннаяОбработка_ПередачаВПроизводство(Объект)
	Если НЕ ЗначениеЗаполнено(Объект.ПодразделениеОрганизации) И ЗначениеЗаполнено(Объект.Подразделение) Тогда
		Объект.ПодразделениеОрганизации = РаботаСДиалогамиСервер.ПодразделениеОрганизации(Объект.Подразделение, Объект.Организация);
	КонецЕсли;
	ЗаполнитьКолонкиТабличнойЧасти(Объект, "Материалы", "Качество, Коэффициент");
	Если Объект.ОтражатьВБухгалтерскомУчете Тогда
		Для Каждого Строка Из Объект.Материалы Цикл
			Если НЕ (ЗначениеЗаполнено(Строка.Счет) И ЗначениеЗаполнено(Строка.СчетЗатрат)) Тогда
				СчетаУчетаВДокументах.ЗаполнитьСчетаУчетаТабличнойЧасти("Материалы", Строка, Объект, Истина, Объект.ОтражатьВНалоговомУчете, Истина, , Истина);
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(Строка.СтатьяЗатрат) Тогда
				Строка.СтатьяЗатрат = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Строка.Номенклатура, "СтатьяЗатрат");
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры
Процедура ОтложеннаяОбработка_ПередачаДавальцуИПереработчику(Объект)
	ЗаполнитьКолонкиТабличнойЧасти(Объект, "Товары", "Качество, Коэффициент");
КонецПроцедуры
Процедура ОтложеннаяОбработка_ПеремещениеТоваров(Объект)
	ЗаполнитьКолонкиТабличнойЧасти(Объект, "Товары", "Качество, Коэффициент");
КонецПроцедуры
Процедура ОтложеннаяОбработка_ПоступлениеДопРасходов(Объект)
	ЗаполнитьКолонкиТабличнойЧасти(Объект, "Товары", "Коэффициент, ЕдиницаИзмерения");
	ОтложеннаяОбработка_ЗаполнениеСчетовРасчетовСКонтр(Объект);
КонецПроцедуры
Процедура ОтложеннаяОбработка_ПоступлениеОтДавальца(Объект)
	ЗаполнитьКолонкиТабличнойЧасти(Объект, "Товары", "Коэффициент");
	ОтложеннаяОбработка_ЗаполнениеСчетовРасчетовСКонтр(Объект);
КонецПроцедуры
Процедура ОтложеннаяОбработка_ПоступлениеОтПереработчика(Объект)
	ЗаполнитьКолонкиТабличнойЧасти(Объект, "Продукция", "Коэффициент, Качество");
	Если НЕ ЗначениеЗаполнено(Объект.ПодразделениеОрганизации) И ЗначениеЗаполнено(Объект.Подразделение) Тогда
		Объект.ПодразделениеОрганизации = РаботаСДиалогамиСервер.ПодразделениеОрганизации(Объект.Подразделение, Объект.Организация);
	КонецЕсли;
	Для Каждого Строка Из Объект.Продукция Цикл
		Если НЕ ЗначениеЗаполнено(Строка.Счет) Или НЕ ЗначениеЗаполнено(Строка.СчетЗатрат) Тогда
			СчетаУчетаВДокументах.ЗаполнитьСчетаУчетаТабличнойЧасти("Продукция", Строка, Объект, Истина, Истина,Истина,Истина, Истина);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры
Процедура ОтложеннаяОбработка_ПоступлениеТоваровУслуг(Объект)
	ЗаполнитьКолонкиТабличнойЧасти(Объект, "Товары", "Коэффициент");
	ОтложеннаяОбработка_ЗаполнениеСчетовРасчетовСКонтр(Объект);
	Для Каждого СтрокаУслуги Из Объект.Услуги Цикл
		Если ЗначениеЗаполнено(СтрокаУслуги.Номенклатура) И НЕ ЗначениеЗаполнено(СтрокаУслуги.Содержание) Тогда
			СтрокаУслуги.Содержание = СтрокаУслуги.Номенклатура.Наименование;
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаУслуги.ПодразделениеОрганизации) Или НЕ ЗначениеЗаполнено(СтрокаУслуги.Подразделение) Тогда
			Продолжить;
		КонецЕсли;
		СтрокаУслуги.ПодразделениеОрганизации = РаботаСДиалогамиСервер.ПодразделениеОрганизации(СтрокаУслуги.Подразделение, Объект.Организация);
	КонецЦикла;
КонецПроцедуры
Процедура ОтложеннаяОбработка_РеализацияТоваровУслуг(Объект)
	ЗаполнитьКолонкиТабличнойЧасти(Объект, "Товары", "Коэффициент, Качество, СпособСписанияОстаткаТоваров");
	ОтложеннаяОбработка_ЗаполнениеСчетовРасчетовСКонтр(Объект);
	Для Каждого СтрокаУслуги Из Объект.Услуги Цикл
		Если ЗначениеЗаполнено(СтрокаУслуги.Номенклатура) И НЕ ЗначениеЗаполнено(СтрокаУслуги.Содержание) Тогда
			СтрокаУслуги.Содержание = СтрокаУслуги.Номенклатура.Наименование;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры
Процедура ОтложеннаяОбработка_РКОККМ(Объект)
	ОтложеннаяОбработка_ЗаполнитьКассуВКассовомОрдере(Объект);
	Если НЕ ЗначениеЗаполнено(Объект.КассаККМ)
		Или НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		|	Ссылка
		|ИЗ Справочник.КассыККМ
		|ГДЕ Владелец = &Организация";
		Запрос.УстановитьПараметр("Организация", Объект.Организация);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Объект.КассаККМ = Выборка.Ссылка;
			Объект.Контрагент = Выборка.Ссылка;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
Процедура ОтложеннаяОбработка_СборкаТоваров(Объект)
	ЗаполнитьКолонкиТабличнойЧасти(Объект, "Комплектующие", "Коэффициент, СтатусПартии, СпособСписанияОстаткаТоваров");
	Если Объект.Коэффициент = 0 Тогда
		Если ЗначениеЗаполнено(Объект.ЕдиницаИзмерения) Тогда
			Объект.Коэффициент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ЕдиницаИзмерения, "Коэффициент");
		Иначе
			Объект.Коэффициент = 1;
		КонецЕсли;
	КонецЕсли;
	Если Объект.ОтражатьВБухгалтерскомУчете Тогда
		Если НЕ ЗначениеЗаполнено(Объект.СчетУчетаБУ) Тогда
			СчетаУчетаВДокументах.ЗаполнитьСчетаУчетаШапки(Объект, Истина, Истина,,,"Номенклатура",Истина);
		КонецЕсли;
		Для Каждого Строка Из Объект.Комплектующие Цикл
			Если ЗначениеЗаполнено(Строка.СчетУчетаБУ) Тогда
				Продолжить;
			КонецЕсли;
			СчетаУчетаВДокументах.ЗаполнитьСчетаУчетаТабличнойЧасти("Комплектующие", Строка, Объект, Истина, Истина,,,Истина);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры
Процедура ОтложеннаяОбработка_СписаниеТоваров(Объект)
	ЗаполнитьКолонкиТабличнойЧасти(Объект, "Товары", "Качество, Коэффициент");
КонецПроцедуры
Процедура ОтложеннаяОбработка_СчетФактура(Объект)
	Если НЕ ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		Для Каждого Стр Из Объект.ДокументыОснования Цикл
			Попытка
				ДоговорКонтрагента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Стр.ДокументОснование, "ДоговорКонтрагента");
				Прервать;
			Исключение
			КонецПопытки;
		КонецЦикла;
		Объект.ДоговорКонтрагента = ДоговорКонтрагента;
	КонецЕсли;
КонецПроцедуры
Процедура ОтложеннаяОбработка_УстановкаЦенНоменклатуры(Объект)
	Если Объект.ТипыЦен.Количество() > 0 Тогда
		ДанныеЦены = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.ТипыЦен[0].ТипЦен, "ВалютаЦены, СпособРасчетаЦены");
		Если ЗначениеЗаполнено(ДанныеЦены) Тогда
			Для Каждого СтрокаТовары Из Объект.Товары Цикл
				СтрокаТовары.Валюта = ДанныеЦены.ВалютаЦены;
				СтрокаТовары.СпособРасчетаЦены = ДанныеЦены.СпособРасчетаЦены;
				СтрокаТовары.ЕдиницаИзмерения = СтрокаТовары.Номенклатура.ЕдиницаХраненияОстатков;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
Процедура ПодготовитьДанныеКонвертацияВалюты(ДанныеИБ, ДанныеXDTO, ИмяДокумента)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|РП.Ссылка.КурсНаДатуПриобретенияРеализацииВалюты КАК КурсЦБНаДатуКонвертации,
	|РП.ДоговорКонтрагента КАК Договор,
	|РП.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаКонвертации,
	|РП.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах КАК РасчетыВУсловныхЕдиницах,
	|РП.КурсВзаиморасчетов КАК КурсКонвертации,
	|РП.КратностьВзаиморасчетов КАК КратностьКонвертации,
	|РП.СуммаВзаиморасчетов КАК СуммаВал,
	|РП.СуммаПлатежа КАК Сумма,
	|РП.СтатьяДвиженияДенежныхСредств КАК СтатьяДДС
	|ИЗ Документ." + ИмяДокумента + ".РасшифровкаПлатежа КАК РП
	|ГДЕ РП.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	ТабРасшифровка = Запрос.Выполнить().Выгрузить();
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", ТабРасшифровка);
КонецПроцедуры
Процедура ПодготовитьДанныеКонтактнаяИнформация(ДанныеИБ, ДанныеXDTO)
	Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	КонтактнаяИнформация.Тип КАК Тип,
		|	КонтактнаяИнформация.Вид КАК Вид,
		|	КонтактнаяИнформация.Представление КАК Представление,
		|	КонтактнаяИнформация.Поле1 КАК Поле1,
		|	КонтактнаяИнформация.Поле2 КАК Поле2,
		|	КонтактнаяИнформация.Поле3 КАК Поле3,
		|	КонтактнаяИнформация.Поле4 КАК Поле4,
		|	КонтактнаяИнформация.Поле5 КАК Поле5,
		|	КонтактнаяИнформация.Поле6 КАК Поле6,
		|	КонтактнаяИнформация.Поле7 КАК Поле7,
		|	КонтактнаяИнформация.Поле8 КАК Поле8,
		|	КонтактнаяИнформация.Поле9 КАК Поле9,
		|	КонтактнаяИнформация.ТипДома КАК ТипДома,
		|	КонтактнаяИнформация.ТипКорпуса КАК ТипКорпуса,
		|	КонтактнаяИнформация.ТипКвартиры КАК ТипКвартиры
		|ИЗ
		|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
		|ГДЕ
		|	КонтактнаяИнформация.Объект = &Объект
		|	И НЕ КонтактнаяИнформация.Вид В (
		|	ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.АдресДоставкиКонтрагента),
		|	ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.КонтактнТелефонКандидата)
		|)
		|");
	Запрос.УстановитьПараметр("Объект", ДанныеИБ.Ссылка);
	РезультатЗапроса = Запрос.Выполнить();
	ТабКонтактнаяИнформация = Новый ТаблицаЗначений;
	ТабКонтактнаяИнформация.Колонки.Добавить("ЗначенияПолей");
	ТабКонтактнаяИнформация.Колонки.Добавить("ВидКонтактнойИнформации");
	ТабКонтактнаяИнформация.Колонки.Добавить("НаименованиеКонтактнойИнформации");
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если НЕ ЗначениеЗаполнено(Выборка.Вид) Тогда
			Продолжить;
		КонецЕсли;
		Если ТипЗнч(Выборка.Вид) = Тип("СправочникСсылка.ВидыКонтактнойИнформации") Тогда
			СвойстваВидаКИ = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Выборка.Вид, "Наименование, Предопределенный");
		
			Если Выборка.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
				Если ЗначениеЗаполнено(Выборка.ТипДома) Тогда
					ТипДома = НРег(Выборка.ТипДома.Метаданные().ЗначенияПеречисления[Перечисления.ТипыДомов.Индекс(Выборка.ТипДома)].Имя);
				Иначе
					ТипДома = "д. ";
				КонецЕсли;
				
				Если ЗначениеЗаполнено(Выборка.ТипКорпуса) Тогда
					ТипКорпуса = НРег(Выборка.ТипКорпуса.Метаданные().ЗначенияПеречисления[Перечисления.ТипыКорпусов.Индекс(Выборка.ТипКорпуса)].Имя);
				Иначе
					ТипКорпуса = "корп. ";
				КонецЕсли;
				
				Если ЗначениеЗаполнено(Выборка.ТипКвартиры) Тогда
					ТипКвартиры = ?(Выборка.ТипКвартиры = Перечисления.ТипыКвартир.Квартира,
						"кв.", НРег(Выборка.ТипКвартиры.Метаданные().ЗначенияПеречисления[Перечисления.ТипыКвартир.Индекс(Выборка.ТипКвартиры)].Имя));
				Иначе
					ТипКвартиры = "кв. ";
				КонецЕсли;				
				ЗначенияПолей = ?(ЗначениеЗаполнено(Выборка.Поле1), Выборка.Поле1 + ", ", "")  // Индекс
				   + ?(ЗначениеЗаполнено(Выборка.Поле2), Выборка.Поле2 + ", ", "")             // Регион
				   + ?(ЗначениеЗаполнено(Выборка.Поле3), Выборка.Поле3 + ", ", "")             // Район
				   + ?(ЗначениеЗаполнено(Выборка.Поле4), Выборка.Поле4 + " г, ", "")          // Город
				   + ?(ЗначениеЗаполнено(Выборка.Поле5), Выборка.Поле5 + ", ", "")            // Населенный пункт
				   + ?(ЗначениеЗаполнено(Выборка.Поле6), Выборка.Поле6 + ", ", "")            // улица
				   + ?(ЗначениеЗаполнено(Выборка.Поле7), 
				   					ТипДома + Выборка.Поле7 + ", ", 
				   					"")            // дом
				   + ?(ЗначениеЗаполнено(Выборка.Поле8), 
				   					ТипКорпуса + Выборка.Поле8 + ", ", 
				   					"")            // корпус
				   + ?(ЗначениеЗаполнено(Выборка.Поле9), 
				   					ТипКвартиры + Выборка.Поле9 , 
				   					"");             // квартира
				  Если Прав(ЗначенияПолей,2) = ", " Тогда
				  	ЗначенияПолей = Лев(ЗначенияПолей, СтрДлина(ЗначенияПолей)-2);
				  КонецЕсли;
				
			ИначеЕсли Выборка.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
				ЗначенияПолей = ?(ЗначениеЗаполнено(Выборка.Поле1), Выборка.Поле1, "")   // код страны
				   + ?(ЗначениеЗаполнено(Выборка.Поле2), "("     + Выборка.Поле2 + ")", "") // код города
				   + ?(ЗначениеЗаполнено(Выборка.Поле3), Выборка.Поле3, "")
				   + ?(ЗначениеЗаполнено(Выборка.Поле4), " доб. "    + Выборка.Поле4, "");
		
			Иначе
				ЗначенияПолей = Выборка.Представление;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(ЗначенияПолей) Тогда
				Продолжить;
			КонецЕсли;
			СтрокаТЗКИ = ТабКонтактнаяИнформация.Добавить();
			СтрокаТЗКИ.ЗначенияПолей = ЗначенияПолей;
			ВидКИ = "";
			Если Выборка.Вид = Справочники.ВидыКонтактнойИнформации.EmailОрганизации
				Или Выборка.Вид = Справочники.ВидыКонтактнойИнформации.EmailФизЛица
				Или Выборка.Вид = Справочники.ВидыКонтактнойИнформации.АдресЭлектроннойПочтыКонтрагентаДляОбменаДокументами Тогда
				ВидКИ = "АдресЭлектроннойПочты";
			ИначеЕсли Выборка.Вид = Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента
				Или Выборка.Вид = Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации
				Или Выборка.Вид = Справочники.ВидыКонтактнойИнформации.ЮрАдресФизЛица Тогда
				ВидКИ = "ЮридическийАдрес";
			ИначеЕсли Выборка.Вид = Справочники.ВидыКонтактнойИнформации.АдресДоставкиКонтрагента
				Или Выборка.Вид = Справочники.ВидыКонтактнойИнформации.АдресОрганизацииПочтовый
				Или Выборка.Вид = Справочники.ВидыКонтактнойИнформации.ИнформАдресФизЛица Тогда
				ВидКИ = "ПочтовыйАдрес";
			ИначеЕсли Выборка.Вид = Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента
				Или Выборка.Вид = Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации
				Или Выборка.Вид = Справочники.ВидыКонтактнойИнформации.ФактАдресФизЛица Тогда
				ВидКИ = "ФактическийАдрес";
			ИначеЕсли Выборка.Вид = Справочники.ВидыКонтактнойИнформации.ФаксКонтрагента
				Или Выборка.Вид = Справочники.ВидыКонтактнойИнформации.ФаксОрганизации Тогда
				ВидКИ = "Факс";
			ИначеЕсли Выборка.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента
				Или Выборка.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации
				Или Выборка.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонСлужебный Тогда
				ВидКИ = "Телефон";
			ИначеЕсли Выборка.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонФизЛица Тогда
				ВидКИ = "ТелефонДомашний";
			КонецЕсли;
			Если ЗначениеЗаполнено(ВидКИ) Тогда
				СтрокаТЗКИ.ВидКонтактнойИнформации = ВидКИ;
			Иначе
				// Получение наименования значения перечисления.
				ИндексТипаКИ = Перечисления.ТипыКонтактнойИнформации.Индекс(Выборка.Тип);
				ИмяТипаКИ = Метаданные.Перечисления.ТипыКонтактнойИнформации.ЗначенияПеречисления[ИндексТипаКИ].Имя;
		
				СтрокаТЗКИ.ВидКонтактнойИнформации = "ПользовательскаяКИ"+ИмяТипаКИ;
			КонецЕсли;
			СтрокаТЗКИ.НаименованиеКонтактнойИнформации = СвойстваВидаКИ.Наименование;
		Иначе
			Если НЕ ЗначениеЗаполнено(ЗначенияПолей) Тогда
				Продолжить;
			КонецЕсли;
			// Строковый вид КИ.
			СтрокаТЗКИ = ТабКонтактнаяИнформация.Добавить();
			СтрокаТЗКИ.ЗначенияПолей = Выборка.Представление;
			ИндексТипаКИ = Перечисления.ТипыКонтактнойИнформации.Индекс(Выборка.Тип);
			ИмяТипаКИ = Метаданные.Перечисления.ТипыКонтактнойИнформации.ЗначенияПеречисления[ИндексТипаКИ].Имя;
		
			СтрокаТЗКИ.ВидКонтактнойИнформации = "ПользовательскаяКИ"+ИмяТипаКИ;
			СтрокаТЗКИ.НаименованиеКонтактнойИнформации = СокрЛП(Выборка.Вид);
		КонецЕсли; 
	КонецЦикла;
	
	ДанныеXDTO.Вставить("КонтактнаяИнформация", ТабКонтактнаяИнформация);
КонецПроцедуры
Процедура ПодготовитьДанныеРасчетыСКонтрагентами(ДанныеИБ, ДанныеXDTO, ИмяДокумента)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|РП.ДоговорКонтрагента КАК Договор,
	|РП.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|РП.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах КАК РасчетыВУсловныхЕдиницах,
	|РП.КурсВзаиморасчетов КАК КурсВзаиморасчетов,
	|РП.КратностьВзаиморасчетов КАК КратностьВзаиморасчетов,
	|РП.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
	|РП.СуммаПлатежа КАК Сумма,
	|РП.СтавкаНДС КАК СтавкаНДС,
	|РП.СуммаНДС КАК СуммаНДС,
	|РП.СтатьяДвиженияДенежныхСредств КАК СтатьяДДС
	|ИЗ Документ." + ИмяДокумента + ".РасшифровкаПлатежа КАК РП
	|ГДЕ РП.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", Запрос.Выполнить().Выгрузить());
КонецПроцедуры
Функция ПодготовитьСтруктуруДанныхСПодчинением(ДанныеСтруктура, Номенклатура)
	Результат = Новый Структура("Номенклатура", Номенклатура);
	Для Каждого КлючИЗначение Из ДанныеСтруктура Цикл
		Результат.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	Возврат Результат;
КонецФункции
Процедура ПроверитьОбрезатьНазначениеПлатежа(ДанныеИБ, ДанныеXDTO)
	Если СтрДлина(ДанныеИБ.НазначениеПлатежа) > 250 Тогда
		ДанныеXDTO.Вставить("НазначениеПлатежа", Лев(ДанныеИБ.НазначениеПлатежа, 250));
	КонецЕсли;
КонецПроцедуры
Процедура РеализацияТоваровУслугВыгрузитьТабличныеЧасти(ДанныеИБ, ДанныеXDTO)
	ЗапросТовары = Новый Запрос;
	ЗапросТовары.Текст = "ВЫБРАТЬ
	|	ТабТовары.Номенклатура КАК Номенклатура,
	|	ТабТовары.ХарактеристикаНоменклатуры КАК Характеристика,
	|	ТабТовары.Количество * ТабТовары.Коэффициент КАК Количество,
	|	ТабТовары.Коэффициент КАК Коэффициент,
	|	ТабТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ТабТовары.Количество КАК КоличествоУпаковок,
	|	ТабТовары.Цена КАК Цена,
	|	ТабТовары.Сумма КАК Сумма,
	|	ТабТовары.СуммаНДС КАК СуммаНДС,
	|	ТабТовары.СтавкаНДС КАК СтавкаНДС,
	|	ВЫРАЗИТЬ("""" КАК Строка(30)) КАК ТипЗапасов
	|ИЗ Документ.РеализацияТоваровУслуг.Товары КАК ТабТовары
	|ГДЕ ТабТовары.Ссылка = &Ссылка
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ
	|	ТабТара.Номенклатура КАК Номенклатура,
	|	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка),
	|	ТабТара.Количество КАК Количество,
	|	1 КАК Коэффициент,
	|	ТабТара.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаИзмерения,
	|	ТабТара.Количество КАК КоличествоУпаковок,
	|	0 КАК Цена,
	|	0 КАК Сумма,
	|	0 КАК СуммаНДС,
	|	null КАК СтавкаНДС, 
	|	""ВозвратнаяТара"" КАК ТипЗапасов
	|ИЗ Документ.РеализацияТоваровУслуг.ВозвратнаяТара КАК ТабТара
	|ГДЕ ТабТара.Ссылка = &Ссылка
	|";
	ЗапросТовары.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	ТабТовары = ЗапросТовары.Выполнить().Выгрузить();
	ОпределитьТипыЗапасовПриОтправке(ДанныеИБ, ТабТовары);
	ДанныеXDTO.Вставить("Товары", ТабТовары);
	
	ЗапросУслуги = Новый Запрос;
	ЗапросУслуги.Текст = "ВЫБРАТЬ
	|	ТЧ.Номенклатура КАК Номенклатура,
	|	ТЧ.Содержание КАК Содержание,
	|	ТЧ.Количество КАК Количество,
	|	ТЧ.Цена КАК Цена,
	|	ТЧ.Сумма КАК Сумма,
	|	ТЧ.СуммаНДС КАК СуммаНДС,
	|	ТЧ.СтавкаНДС КАК СтавкаНДС
	|ИЗ Документ.РеализацияТоваровУслуг.Услуги КАК ТЧ
	|ГДЕ ТЧ.Ссылка = &Ссылка";
	ЗапросУслуги.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	ДанныеXDTO.Вставить("Услуги", ЗапросУслуги.Выполнить().Выгрузить());
КонецПроцедуры
Функция ЭтоПБДСКонвертацияВалюты(ДанныеИБ)
	ВидОперации = ДанныеИБ.ВидОперации;
	Если ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПриобретениеИностраннойВалюты
		Или ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПоступленияОтПродажиИностраннойВалюты Тогда
		Возврат Истина;
	КонецЕсли;
	Возврат Ложь;
КонецФункции
Функция ЭтоПБДСПлатКарты(ДанныеИБ)
	ВидОперации = ДанныеИБ.ВидОперации;
	Если ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПоступлениеОплатыПоПлатежнымКартам Тогда
		Возврат Истина;
	КонецЕсли;
	Возврат Ложь;
КонецФункции
Функция ЭтоПБДСПрочее(ДанныеИБ)
	ВидОперации = ДанныеИБ.ВидОперации;
	СтатьяЗатрат = ДанныеИБ.СтатьяЗатрат;
	Если ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочееПоступлениеБезналичныхДенежныхСредств
		И НЕ ЗначениеЗаполнено(СтатьяЗатрат) Тогда
		Возврат Истина;
	КонецЕсли;
	Возврат Ложь;
КонецФункции
Функция ЭтоПБДСПрочиеДоходы(ДанныеИБ)
	ВидОперации = ДанныеИБ.ВидОперации;
	СтатьяЗатрат = ДанныеИБ.СтатьяЗатрат;
	Если ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочееПоступлениеБезналичныхДенежныхСредств
		И ЗначениеЗаполнено(СтатьяЗатрат) Тогда
		Возврат Истина;
	КонецЕсли;
	Возврат Ложь;
КонецФункции
Функция ЭтоПБДСРасчетыСКонтрагентами(ДанныеИБ, ВидРасчетов = "")
	ВидОперации = ДанныеИБ.ВидОперации;
	Если ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаПокупателя Тогда
		ВидРасчетов = "СПокупателем";
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратДенежныхСредствПоставщиком Тогда
		ВидРасчетов = "СПоставщиком";
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.РасчетыПоКредитамИЗаймам
		Или ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПоступлениеОплатыПоБанковскимКредитам Тогда
		ВидРасчетов = "КредитыИЗаймы";
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочиеРасчетыСКонтрагентами  Тогда
		ВидРасчетов = "Прочее";
	Иначе
		Возврат Ложь;
	КонецЕсли;
	Возврат Истина;
КонецФункции
Функция ЭтоСБДСБюджет(ДанныеИБ)
	ВидОперации = ДанныеИБ.ВидОперации;
	Если ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПеречислениеНалога
		Или ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеНалога Тогда
		Возврат Истина;
	КонецЕсли;
	Возврат Ложь;
КонецФункции
Функция ЭтоСБДСВнутреннееПеремещение(ДанныеИБ)
	ВидОперации = ДанныеИБ.ВидОперации;
	Если ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПереводНаДругойСчет
		Или ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПереводНаДругойСчет Тогда
		Возврат Истина;
	КонецЕсли;
	Возврат Ложь;
КонецФункции
Функция ЭтоСБДСПеречислениеЗП(ДанныеИБ)
	ВидОперации = ДанныеИБ.ВидОперации;
	Если ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПеречислениеЗП
		Или ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеЗП Тогда
		Возврат Истина;
	КонецЕсли;
	Возврат Ложь;
КонецФункции
Функция ЭтоСБДСПрочее(ДанныеИБ)
	ВидОперации = ДанныеИБ.ВидОперации;
	Если ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПрочееСписаниеБезналичныхДенежныхСредств
		Или ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПрочееСписаниеБезналичныхДенежныхСредств Тогда
		Возврат Истина;
	КонецЕсли;
	Возврат Ложь;
КонецФункции
Функция ЭтоСБДСРасчетыСКонтрагентами(ДанныеИБ, ВидРасчетов = "")
	ВидОперации = ДанныеИБ.ВидОперации;
	Если ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ВозвратДенежныхСредствПокупателю
		Или ВидОперации = Перечисления.ВидыОперацийППИсходящее.ВозвратДенежныхСредствПокупателю Тогда
		ВидРасчетов = "СПокупателем";
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ОплатаПоставщику
		Или ВидОперации = Перечисления.ВидыОперацийППИсходящее.ОплатаПоставщику Тогда
		ВидРасчетов = "СПоставщиком";
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.РасчетыПоКредитамИЗаймам
		Или ВидОперации = Перечисления.ВидыОперацийППИсходящее.РасчетыПоКредитамИЗаймамСКонтрагентами Тогда
		ВидРасчетов = "КредитыИЗаймы";
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПрочиеРасчетыСКонтрагентами
		Или ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПрочиеРасчетыСКонтрагентами  Тогда
		ВидРасчетов = "Прочее";
	Иначе
		Возврат Ложь;
	КонецЕсли;
	Возврат Истина;
КонецФункции
Функция ЭтоСБДСРасчетыССотрудниками(ДанныеИБ)
	ВидОперации = ДанныеИБ.ВидОперации;
	Если ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеДенежныхСредствПодотчетнику 
		Или ВидОперации = Перечисления.ВидыОперацийППИсходящее.РасчетыПоКредитамИЗаймамСРаботниками Тогда
		Возврат Истина;
	КонецЕсли;
	Возврат Ложь;
КонецФункции

//  Параметры
// Заполняет параметры конвертации.
//
// Параметры:
//  ПараметрыКонвертации - структура, в которую добавляются параметры конвертации.
Процедура ЗаполнитьПараметрыКонвертации(ПараметрыКонвертации) Экспорт
	ПараметрыКонвертации.Вставить("ДатаОстатков");
	ПараметрыКонвертации.Вставить("ТаблицаДолгиАвансы");
	ПараметрыКонвертации.Вставить("ДатаОкончанияПериодаВыгрузкиДокументов");
КонецПроцедуры

//  ОбщегоНазначения
// Процедура-обертка, выполняет запуск указанной в параметрах процедуры модуля менеджера обмена через формат.
//
// Параметры:
//  ИмяПроцедуры - строка.
//  СтруктураПараметров - структура, содержащая передаваемые параметры.
Процедура ВыполнитьПроцедуруМодуляМенеджера(ИмяПроцедуры, Параметры) Экспорт
	Если ИмяПроцедуры = "ПОД_Документ_АккрПеред_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_АккрПеред_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_АккрПолуч_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_АккрПолуч_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ВозвратТоваровПоставщику_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_ВозвратТоваровПоставщику_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ИнкассоПеред_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_ИнкассоПеред_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ИнкассоПолуч_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_ИнкассоПолуч_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ПередачаТоваров_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_ПередачаТоваров_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ПлатОрдерПоступление_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_ПлатОрдерПоступление_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ПлатОрдерСписание_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_ПлатОрдерСписание_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ПлатПорВх_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_ПлатПорВх_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ПлатПорИсх_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_ПлатПорИсх_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ПлатТребВыст_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_ПлатТребВыст_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ПлТребПолуч_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_ПлТребПолуч_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ПоступлениеТоваровУслуг_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_ПоступлениеТоваровУслуг_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ПриходныйКассовыйОрдер_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_ПриходныйКассовыйОрдер_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_РасходныйКассовыйОрдер_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_РасходныйКассовыйОрдер_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_Контрагенты_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_Контрагенты_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_Номенклатура_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_Номенклатура_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_Склады_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_Склады_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_СпецификацииНоменклатуры_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_СпецификацииНоменклатуры_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_СтатьиДДС_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_СтатьиДДС_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_ФизическиеЛица_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_ФизическиеЛица_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ОперацияПоПлатежнойКарте_Получение_ПриОбработке" Тогда 
		ПОД_Документ_ОперацияПоПлатежнойКарте_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ПоступлениеТоваровУслуг_Получение_ПриОбработке" Тогда 
		ПОД_Документ_ПоступлениеТоваровУслуг_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_БанковскиеСчета_Получение_ПриОбработке" Тогда 
		ПОД_Справочник_БанковскиеСчета_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_АвансовыйОтчет_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_АвансовыйОтчет_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_АккрПередПрочее_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_АккрПередПрочее_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_АккрПередРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_АккрПередРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_АккрПолучПрочее_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_АккрПолучПрочее_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_АккрПолучРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_АккрПолучРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ВозвратСырьяДавальцу_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ВозвратСырьяДавальцу_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ВозвратСырьяОтПереработчика_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ВозвратСырьяОтПереработчика_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ВозвратТоваровОтПокупателя_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ВозвратТоваровОтПокупателя_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ВозвратТоваровПоставщику_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ВозвратТоваровПоставщику_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ВозвратТоваровПоставщикуИзНТТ_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ВозвратТоваровПоставщикуИзНТТ_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ВыпускПродукции_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ВыпускПродукции_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ГТДИмпорт_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ГТДИмпорт_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ИнкассоПередПрочее_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ИнкассоПередПрочее_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ИнкассоПолучПрочее_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ИнкассоПолучПрочее_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ИнкассПередРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ИнкассПередРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ИнкассПолучРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ИнкассПолучРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_КомплектацияНоменклатуры_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_КомплектацияНоменклатуры_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_КорректировкаДолга_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_КорректировкаДолга_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_КорректировкаПоступленияТоваров_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_КорректировкаПоступленияТоваров_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_КорректировкаРеализацииТоваров_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_КорректировкаРеализацииТоваров_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОперацияПоПлатежнойКарте_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ОперацияПоПлатежнойКарте_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОприходованиеТоваров_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ОприходованиеТоваров_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОтчетДавальцу_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ОтчетДавальцу_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОтчетКомиссионера_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ОтчетКомиссионера_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОтчетКомитенту_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ОтчетКомитенту_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОтчетОРозничныхПродажах_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ОтчетОРозничныхПродажах_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОтчетПереработчика_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ОтчетПереработчика_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОтчетПроизводстваЗаСмену_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ОтчетПроизводстваЗаСмену_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПередачаДавальцу_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПередачаДавальцу_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПередачаПереработчику_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПередачаПереработчику_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПеремещениеТоваров_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПеремещениеТоваров_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОПолучениеНаличныхВБанке_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПКОПолучениеНаличныхВБанке_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОПрочееПоступление_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПКОПрочееПоступление_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПКОРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОРасчетыССотрудниками_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПКОРасчетыССотрудниками_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПлатОрдерСписаниеСотрудники_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПлатОрдерСписаниеСотрудники_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПлатПорВхПлатКарты_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПлатПорВхПлатКарты_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПлатПорВхПрочее_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПлатПорВхПрочее_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПлатПорВхРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПлатПорВхРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПлатПорИсхНалоги_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПлатПорИсхНалоги_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПлатПорИсхПереводНаДрСчет_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПлатПорИсхПереводНаДрСчет_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПлатПорИсхПеречислениеЗП_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПлатПорИсхПеречислениеЗП_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПлатПорИсхПрочее_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПлатПорИсхПрочее_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПлатПорИсхРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПлатПорИсхРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПлатПорИсхСотрудники_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПлатПорИсхСотрудники_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПлОрдерСписПереводНаДрСчет_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПлОрдерСписПереводНаДрСчет_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПлОрдерСписПеречислениеЗП_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПлОрдерСписПеречислениеЗП_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПлОрдерСписПрочее_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПлОрдерСписПрочее_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПлОрдерСписРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПлОрдерСписРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПлОрПостКонвертацияВалюты_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПлОрПостКонвертацияВалюты_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПлОрПостПлатКарты_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПлОрПостПлатКарты_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПлОрПостПрочее_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПлОрПостПрочее_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПлОрПостРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПлОрПостРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПлТребВыстПрочее_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПлТребВыстПрочее_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПлТребВыстРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПлТребВыстРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПлТребПолучПрочее_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПлТребПолучПрочее_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПлТребПолучРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПлТребПолучРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПоступлениеДопРасходов_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПоступлениеДопРасходов_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПоступлениеОтПереработчика_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПоступлениеОтПереработчика_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПоступлениеСырьяОтДавальца_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПоступлениеСырьяОтДавальца_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПоступлениеТоваровУслуг_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПоступлениеТоваровУслуг_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПоступлениеТоваровУслугВНТТ_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПоступлениеТоваровУслугВНТТ_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РеализацияОтгруженныхТоваров_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_РеализацияОтгруженныхТоваров_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РеализацияТоваровУслуг_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_РеализацияТоваровУслуг_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОВыплатаЗарплаты_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_РКОВыплатаЗарплаты_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОНаБанковскийСчет_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_РКОНаБанковскийСчет_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_РКОРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОРасчетыССотрудниками_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_РКОРасчетыССотрудниками_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СписаниеТоваров_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_СписаниеТоваров_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СчетФактураВыданный_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_СчетФактураВыданный_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СчетФактураПолученный_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_СчетФактураПолученный_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ТребованиеНакладная_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ТребованиеНакладная_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_УстановкаЦенНоменклатуры_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_УстановкаЦенНоменклатуры_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Договоры_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_Договоры_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ЕдиницыИзмерения_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_ЕдиницыИзмерения_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Номенклатура_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_Номенклатура_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_СпецификацииНоменклатуры_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_СпецификацииНоменклатуры_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ФизическиеЛица_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_ФизическиеЛица_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ХарактеристикиНоменклатуры_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_ХарактеристикиНоменклатуры_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_АвансовыйОтчет_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_АвансовыйОтчет_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_АвансовыйОтчет_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_АвансовыйОтчет_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ВозвратТоваровОтПокупателя_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ВозвратТоваровОтПокупателя_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ВозвратТоваровОтПокупателя_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ВозвратТоваровОтПокупателя_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ВозвратТоваровПоставщику_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ВозвратТоваровПоставщику_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ВозвратТоваровПоставщику_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ВозвратТоваровПоставщику_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ВыпускПродукции_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ВыпускПродукции_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ВыпускПродукции_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ВыпускПродукции_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ГТДИмпорт_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ГТДИмпорт_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ГТДИмпорт_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ГТДИмпорт_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_КорректировкаДолга_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_КорректировкаДолга_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_КорректировкаДолга_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_КорректировкаДолга_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_КорректировкаПоступленияТоваров_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_КорректировкаПоступленияТоваров_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_КорректировкаПоступленияТоваров_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_КорректировкаПоступленияТоваров_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_КорректировкаРеализацииТоваров_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_КорректировкаРеализацииТоваров_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_КорректировкаРеализацииТоваров_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_КорректировкаРеализацииТоваров_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОперацияПоПлатежнойКарте_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ОперацияПоПлатежнойКарте_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОперацияПоПлатежнойКарте_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ОперацияПоПлатежнойКарте_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОприходованиеТоваров_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ОприходованиеТоваров_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОприходованиеТоваров_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ОприходованиеТоваров_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОтчетКомиссионера_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ОтчетКомиссионера_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОтчетКомиссионера_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ОтчетКомиссионера_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОтчетКомитенту_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ОтчетКомитенту_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОтчетКомитенту_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ОтчетКомитенту_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОтчетОРозничныхПродажах_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ОтчетОРозничныхПродажах_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОтчетОРозничныхПродажах_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ОтчетОРозничныхПродажах_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПБДСПоПлатежнымКартам_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПБДСПоПлатежнымКартам_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПБДСПоПлатежнымКартам_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ПБДСПоПлатежнымКартам_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПБДСПрочееПоступление_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПБДСПрочееПоступление_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПБДСПрочееПоступление_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ПБДСПрочееПоступление_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПБДСПрочиеДоходы_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПБДСПрочиеДоходы_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПБДСПрочиеДоходы_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ПБДСПрочиеДоходы_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПБДСРасчетыСКонтрагентами_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПБДСРасчетыСКонтрагентами_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПБДСРасчетыСКонтрагентами_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ПБДСРасчетыСКонтрагентами_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПередачаМатериаловВПроизводство_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПередачаМатериаловВПроизводство_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПередачаМатериаловВПроизводство_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ПередачаМатериаловВПроизводство_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПеремещениеТоваров_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПеремещениеТоваров_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПеремещениеТоваров_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ПеремещениеТоваров_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОПолучениеНаличныхВБанке_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПКОПолучениеНаличныхВБанке_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОПолучениеНаличныхВБанке_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ПКОПолучениеНаличныхВБанке_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОПрочееПоступление_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПКОПрочееПоступление_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОПрочееПоступление_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ПКОПрочееПоступление_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОРасчетыСКонтрагентами_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПКОРасчетыСКонтрагентами_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОРасчетыСКонтрагентами_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ПКОРасчетыСКонтрагентами_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОРасчетыССотрудниками_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПКОРасчетыССотрудниками_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОРасчетыССотрудниками_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ПКОРасчетыССотрудниками_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОРозничнаяВыручка_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПКОРозничнаяВыручка_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОРозничнаяВыручка_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ПКОРозничнаяВыручка_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПоступлениеДопРасходов_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПоступлениеДопРасходов_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПоступлениеДопРасходов_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ПоступлениеДопРасходов_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПоступлениеТоваровУслуг_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПоступлениеТоваровУслуг_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПоступлениеТоваровУслуг_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ПоступлениеТоваровУслуг_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РеализацияТоваровУслуг_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_РеализацияТоваровУслуг_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РеализацияТоваровУслуг_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_РеализацияТоваровУслуг_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОВыдачаВКассуККМ_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_РКОВыдачаВКассуККМ_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОВыдачаВКассуККМ_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_РКОВыдачаВКассуККМ_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОВыплатаЗарплаты_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_РКОВыплатаЗарплаты_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОВыплатаЗарплаты_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_РКОВыплатаЗарплаты_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОНаБанковскийСчет_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_РКОНаБанковскийСчет_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОНаБанковскийСчет_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_РКОНаБанковскийСчет_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОПрочаяВыдача_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_РКОПрочаяВыдача_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОПрочаяВыдача_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_РКОПрочаяВыдача_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОРасчетыСКонтрагентами_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_РКОРасчетыСКонтрагентами_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОРасчетыСКонтрагентами_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_РКОРасчетыСКонтрагентами_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОРасчетыССотрудниками_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_РКОРасчетыССотрудниками_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОРасчетыССотрудниками_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_РКОРасчетыССотрудниками_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСПереводНаДругойСчет_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_СБДСПереводНаДругойСчет_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСПереводНаДругойСчет_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_СБДСПереводНаДругойСчет_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСПеречислениеЗаработнойПлаты_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_СБДСПеречислениеЗаработнойПлаты_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСПеречислениеЗаработнойПлаты_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_СБДСПеречислениеЗаработнойПлаты_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСПлатежиВБюджет_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_СБДСПлатежиВБюджет_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСПлатежиВБюджет_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_СБДСПлатежиВБюджет_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСПрочееСписание_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_СБДСПрочееСписание_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСПрочееСписание_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_СБДСПрочееСписание_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСПрочиеРасходы_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_СБДСПрочиеРасходы_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСПрочиеРасходы_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_СБДСПрочиеРасходы_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСРасчетыСКонтрагентами_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_СБДСРасчетыСКонтрагентами_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСРасчетыСКонтрагентами_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_СБДСРасчетыСКонтрагентами_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСРасчетыССотрудниками_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_СБДСРасчетыССотрудниками_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСРасчетыССотрудниками_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_СБДСРасчетыССотрудниками_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СборкаТоваров_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_СборкаТоваров_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СборкаТоваров_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_СборкаТоваров_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СписаниеТоваров_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_СписаниеТоваров_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СписаниеТоваров_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_СписаниеТоваров_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СчетФактураВыданный_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_СчетФактураВыданный_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СчетФактураПолученный_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_СчетФактураПолученный_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_УстановкаЦенНоменклатуры_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_УстановкаЦенНоменклатуры_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Договоры_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_Договоры_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ЕдиницыИзмеренияИзСтруктуры_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_ЕдиницыИзмеренияИзСтруктуры_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Номенклатура_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_Номенклатура_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Номенклатура_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_Номенклатура_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_СпецификацииНоменклатуры_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_СпецификацииНоменклатуры_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ФизическиеЛица_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_ФизическиеЛица_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ФизическиеЛица_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_ФизическиеЛица_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ФизлицаВКонтрагенты_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_ФизлицаВКонтрагенты_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ХарактеристикиИзСтруктуры_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_ХарактеристикиИзСтруктуры_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ХарактеристикиИзСтруктуры_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_ХарактеристикиИзСтруктуры_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_БанковскиеСчета_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_БанковскиеСчета_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_БанковскиеСчета_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_БанковскиеСчета_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Контрагенты_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_Контрагенты_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Организации_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_Организации_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Пользователи_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_Пользователи_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Пользователи_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_Пользователи_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_АвансовыйОтчет" Тогда 
		ОтложеннаяОбработка_АвансовыйОтчет(
			Параметры.Объект);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_Возвраты" Тогда 
		ОтложеннаяОбработка_Возвраты(
			Параметры.Объект);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_ВыпускПродукции" Тогда 
		ОтложеннаяОбработка_ВыпускПродукции(
			Параметры.Объект);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_ГТДИмпорт" Тогда 
		ОтложеннаяОбработка_ГТДИмпорт(
			Параметры.Объект);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_ЗаполнитьКассуВКассовомОрдере" Тогда 
		ОтложеннаяОбработка_ЗаполнитьКассуВКассовомОрдере(
			Параметры.Объект);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_Контрагенты" Тогда 
		ОтложеннаяОбработка_Контрагенты(
			Параметры.Объект, Параметры.КомпонентыОбмена, Параметры.ОбъектМодифицирован);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_КоррДолга" Тогда 
		ОтложеннаяОбработка_КоррДолга(
			Параметры.Объект);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_КорректировкаПоступления" Тогда 
		ОтложеннаяОбработка_КорректировкаПоступления(
			Параметры.Объект);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_КорректировкаРеализации" Тогда 
		ОтложеннаяОбработка_КорректировкаРеализации(
			Параметры.Объект);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_ОперацияПоПлатежнойКарте" Тогда 
		ОтложеннаяОбработка_ОперацияПоПлатежнойКарте(
			Параметры.Объект);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_ОприходованиеТоваров" Тогда 
		ОтложеннаяОбработка_ОприходованиеТоваров(
			Параметры.Объект);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_ОтчетКомиссионера" Тогда 
		ОтложеннаяОбработка_ОтчетКомиссионера(
			Параметры.Объект);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_ОтчетКомитенту" Тогда 
		ОтложеннаяОбработка_ОтчетКомитенту(
			Параметры.Объект);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_ОтчетОРП" Тогда 
		ОтложеннаяОбработка_ОтчетОРП(
			Параметры.Объект);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_ПередачаВПроизводство" Тогда 
		ОтложеннаяОбработка_ПередачаВПроизводство(
			Параметры.Объект);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_ПеремещениеТоваров" Тогда 
		ОтложеннаяОбработка_ПеремещениеТоваров(
			Параметры.Объект);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_ПоступлениеДопРасходов" Тогда 
		ОтложеннаяОбработка_ПоступлениеДопРасходов(
			Параметры.Объект);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_ПоступлениеОтПереработчика" Тогда 
		ОтложеннаяОбработка_ПоступлениеОтПереработчика(
			Параметры.Объект);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_ПоступлениеТоваровУслуг" Тогда 
		ОтложеннаяОбработка_ПоступлениеТоваровУслуг(
			Параметры.Объект);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_РеализацияТоваровУслуг" Тогда 
		ОтложеннаяОбработка_РеализацияТоваровУслуг(
			Параметры.Объект);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_РКОККМ" Тогда 
		ОтложеннаяОбработка_РКОККМ(
			Параметры.Объект);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_СборкаТоваров" Тогда 
		ОтложеннаяОбработка_СборкаТоваров(
			Параметры.Объект);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_СписаниеТоваров" Тогда 
		ОтложеннаяОбработка_СписаниеТоваров(
			Параметры.Объект);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_СчетФактура" Тогда 
		ОтложеннаяОбработка_СчетФактура(
			Параметры.Объект);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_УстановкаЦенНоменклатуры" Тогда 
		ОтложеннаяОбработка_УстановкаЦенНоменклатуры(
			Параметры.Объект);
	КонецЕсли;
КонецПроцедуры
// Процедура-обертка, выполняет запуск указанной в параметрах функции модуля менеджера обмена через формат.
//
// Параметры:
//  ИмяФункции - строка.
//  СтруктураПараметров - структура, содержащая передаваемые параметры.
Функция ВыполнитьФункциюМодуляМенеджера(ИмяФункции, Параметры) Экспорт
	Если ИмяФункции = "ПОД_Документ_АвансовыйОтчет_Отправка_ВыборкаДанных" Тогда 
		Возврат ПОД_Документ_АвансовыйОтчет_Отправка_ВыборкаДанных(
			Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяФункции = "ПОД_Документ_АккрПеред_Отправка_ВыборкаДанных" Тогда 
		Возврат ПОД_Документ_АккрПеред_Отправка_ВыборкаДанных(
			Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяФункции = "ПОД_Документ_АккрПолуч_Отправка_ВыборкаДанных" Тогда 
		Возврат ПОД_Документ_АккрПолуч_Отправка_ВыборкаДанных(
			Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяФункции = "ПОД_Документ_ВозвратСырьяОтПереработчика_Отправка_ВыборкаДанных" Тогда 
		Возврат ПОД_Документ_ВозвратСырьяОтПереработчика_Отправка_ВыборкаДанных(
			Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяФункции = "ПОД_Документ_ВозвратТоваровОтПокупателя_Отправка_ВыборкаДанных" Тогда 
		Возврат ПОД_Документ_ВозвратТоваровОтПокупателя_Отправка_ВыборкаДанных(
			Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяФункции = "ПОД_Документ_ВозвратТоваровПоставщику_Отправка_ВыборкаДанных" Тогда 
		Возврат ПОД_Документ_ВозвратТоваровПоставщику_Отправка_ВыборкаДанных(
			Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяФункции = "ПОД_Документ_ВозвратТоваровПоставщикуИзНТТ_Отправка_ВыборкаДанных" Тогда 
		Возврат ПОД_Документ_ВозвратТоваровПоставщикуИзНТТ_Отправка_ВыборкаДанных(
			Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяФункции = "ПОД_Документ_ВыпускПродукции_Отправка_ВыборкаДанных" Тогда 
		Возврат ПОД_Документ_ВыпускПродукции_Отправка_ВыборкаДанных(
			Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяФункции = "ПОД_Документ_ГТДИмпорт_Отправка_ВыборкаДанных" Тогда 
		Возврат ПОД_Документ_ГТДИмпорт_Отправка_ВыборкаДанных(
			Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяФункции = "ПОД_Документ_ИнкассоПеред_Отправка_ВыборкаДанных" Тогда 
		Возврат ПОД_Документ_ИнкассоПеред_Отправка_ВыборкаДанных(
			Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяФункции = "ПОД_Документ_ИнкассоПолуч_Отправка_ВыборкаДанных" Тогда 
		Возврат ПОД_Документ_ИнкассоПолуч_Отправка_ВыборкаДанных(
			Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяФункции = "ПОД_Документ_КомплектацияНоменклатуры_Отправка_ВыборкаДанных" Тогда 
		Возврат ПОД_Документ_КомплектацияНоменклатуры_Отправка_ВыборкаДанных(
			Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяФункции = "ПОД_Документ_КорректировкаДолга_Отправка_ВыборкаДанных" Тогда 
		Возврат ПОД_Документ_КорректировкаДолга_Отправка_ВыборкаДанных(
			Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяФункции = "ПОД_Документ_КорректировкаПоступленияТоваров_Отправка_ВыборкаДанных" Тогда 
		Возврат ПОД_Документ_КорректировкаПоступленияТоваров_Отправка_ВыборкаДанных(
			Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяФункции = "ПОД_Документ_КорректировкаРеализацииТоваров_Отправка_ВыборкаДанных" Тогда 
		Возврат ПОД_Документ_КорректировкаРеализацииТоваров_Отправка_ВыборкаДанных(
			Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяФункции = "ПОД_Документ_ОперацияПоПлатежнойКарте_Отправка_ВыборкаДанных" Тогда 
		Возврат ПОД_Документ_ОперацияПоПлатежнойКарте_Отправка_ВыборкаДанных(
			Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяФункции = "ПОД_Документ_ОприходованиеТоваров_Отправка_ВыборкаДанных" Тогда 
		Возврат ПОД_Документ_ОприходованиеТоваров_Отправка_ВыборкаДанных(
			Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяФункции = "ПОД_Документ_ОтчетДавальцу_Отправка_ВыборкаДанных" Тогда 
		Возврат ПОД_Документ_ОтчетДавальцу_Отправка_ВыборкаДанных(
			Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяФункции = "ПОД_Документ_ОтчетКомиссионера_Отправка_ВыборкаДанных" Тогда 
		Возврат ПОД_Документ_ОтчетКомиссионера_Отправка_ВыборкаДанных(
			Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяФункции = "ПОД_Документ_ОтчетКомитенту_Отправка_ВыборкаДанных" Тогда 
		Возврат ПОД_Документ_ОтчетКомитенту_Отправка_ВыборкаДанных(
			Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяФункции = "ПОД_Документ_ОтчетОРозничныхПродажах_Отправка_ВыборкаДанных" Тогда 
		Возврат ПОД_Документ_ОтчетОРозничныхПродажах_Отправка_ВыборкаДанных(
			Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяФункции = "ПОД_Документ_ОтчетПереработчика_Отправка_ВыборкаДанных" Тогда 
		Возврат ПОД_Документ_ОтчетПереработчика_Отправка_ВыборкаДанных(
			Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяФункции = "ПОД_Документ_ОтчетПроизводстваЗаСмену_Отправка_ВыборкаДанных" Тогда 
		Возврат ПОД_Документ_ОтчетПроизводстваЗаСмену_Отправка_ВыборкаДанных(
			Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяФункции = "ПОД_Документ_ПередачаТоваров_Отправка_ВыборкаДанных" Тогда 
		Возврат ПОД_Документ_ПередачаТоваров_Отправка_ВыборкаДанных(
			Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяФункции = "ПОД_Документ_ПеремещениеТоваров_Отправка_ВыборкаДанных" Тогда 
		Возврат ПОД_Документ_ПеремещениеТоваров_Отправка_ВыборкаДанных(
			Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяФункции = "ПОД_Документ_ПлатОрдерПоступление_Отправка_ВыборкаДанных" Тогда 
		Возврат ПОД_Документ_ПлатОрдерПоступление_Отправка_ВыборкаДанных(
			Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяФункции = "ПОД_Документ_ПлатОрдерСписание_Отправка_ВыборкаДанных" Тогда 
		Возврат ПОД_Документ_ПлатОрдерСписание_Отправка_ВыборкаДанных(
			Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяФункции = "ПОД_Документ_ПлатПорВх_Отправка_ВыборкаДанных" Тогда 
		Возврат ПОД_Документ_ПлатПорВх_Отправка_ВыборкаДанных(
			Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяФункции = "ПОД_Документ_ПлатПорИсх_Отправка_ВыборкаДанных" Тогда 
		Возврат ПОД_Документ_ПлатПорИсх_Отправка_ВыборкаДанных(
			Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяФункции = "ПОД_Документ_ПлатТребВыст_Отправка_ВыборкаДанных" Тогда 
		Возврат ПОД_Документ_ПлатТребВыст_Отправка_ВыборкаДанных(
			Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяФункции = "ПОД_Документ_ПлТребПолуч_Отправка_ВыборкаДанных" Тогда 
		Возврат ПОД_Документ_ПлТребПолуч_Отправка_ВыборкаДанных(
			Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяФункции = "ПОД_Документ_ПоступлениеДопРасходов_Отправка_ВыборкаДанных" Тогда 
		Возврат ПОД_Документ_ПоступлениеДопРасходов_Отправка_ВыборкаДанных(
			Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяФункции = "ПОД_Документ_ПоступлениеОтПереработчика_Отправка_ВыборкаДанных" Тогда 
		Возврат ПОД_Документ_ПоступлениеОтПереработчика_Отправка_ВыборкаДанных(
			Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяФункции = "ПОД_Документ_ПоступлениеТоваровУслуг_Отправка_ВыборкаДанных" Тогда 
		Возврат ПОД_Документ_ПоступлениеТоваровУслуг_Отправка_ВыборкаДанных(
			Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяФункции = "ПОД_Документ_ПоступлениеТоваровУслугВНТТ_Отправка_ВыборкаДанных" Тогда 
		Возврат ПОД_Документ_ПоступлениеТоваровУслугВНТТ_Отправка_ВыборкаДанных(
			Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяФункции = "ПОД_Документ_ПриходныйКассовыйОрдер_Отправка_ВыборкаДанных" Тогда 
		Возврат ПОД_Документ_ПриходныйКассовыйОрдер_Отправка_ВыборкаДанных(
			Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяФункции = "ПОД_Документ_РасходныйКассовыйОрдер_Отправка_ВыборкаДанных" Тогда 
		Возврат ПОД_Документ_РасходныйКассовыйОрдер_Отправка_ВыборкаДанных(
			Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяФункции = "ПОД_Документ_РеализацияОтгруженныхТоваров_Отправка_ВыборкаДанных" Тогда 
		Возврат ПОД_Документ_РеализацияОтгруженныхТоваров_Отправка_ВыборкаДанных(
			Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяФункции = "ПОД_Документ_РеализацияТоваровУслуг_Отправка_ВыборкаДанных" Тогда 
		Возврат ПОД_Документ_РеализацияТоваровУслуг_Отправка_ВыборкаДанных(
			Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяФункции = "ПОД_Документ_СписаниеТоваров_Отправка_ВыборкаДанных" Тогда 
		Возврат ПОД_Документ_СписаниеТоваров_Отправка_ВыборкаДанных(
			Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяФункции = "ПОД_Документ_СчетФактураВыданный_Отправка_ВыборкаДанных" Тогда 
		Возврат ПОД_Документ_СчетФактураВыданный_Отправка_ВыборкаДанных(
			Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяФункции = "ПОД_Документ_СчетФактураПолученный_Отправка_ВыборкаДанных" Тогда 
		Возврат ПОД_Документ_СчетФактураПолученный_Отправка_ВыборкаДанных(
			Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяФункции = "ПОД_Документ_ТребованиеНакладная_Отправка_ВыборкаДанных" Тогда 
		Возврат ПОД_Документ_ТребованиеНакладная_Отправка_ВыборкаДанных(
			Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяФункции = "ПОД_Документ_УстановкаЦенНоменклатуры_Отправка_ВыборкаДанных" Тогда 
		Возврат ПОД_Документ_УстановкаЦенНоменклатуры_Отправка_ВыборкаДанных(
			Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяФункции = "ПОД_Справочник_Банки_Отправка_ВыборкаДанных" Тогда 
		Возврат ПОД_Справочник_Банки_Отправка_ВыборкаДанных(
			Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяФункции = "ПОД_Справочник_Договоры_Отправка_ВыборкаДанных" Тогда 
		Возврат ПОД_Справочник_Договоры_Отправка_ВыборкаДанных(
			Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяФункции = "ПОД_Справочник_Номенклатура_Отправка_ВыборкаДанных" Тогда 
		Возврат ПОД_Справочник_Номенклатура_Отправка_ВыборкаДанных(
			Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяФункции = "ПОД_Справочник_Пользователи_Отправка_ВыборкаДанных" Тогда 
		Возврат ПОД_Справочник_Пользователи_Отправка_ВыборкаДанных(
			Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяФункции = "ПОД_Справочник_СпецификацииНоменклатуры_Отправка_ВыборкаДанных" Тогда 
		Возврат ПОД_Справочник_СпецификацииНоменклатуры_Отправка_ВыборкаДанных(
			Параметры.КомпонентыОбмена);
	КонецЕсли;
КонецФункции

