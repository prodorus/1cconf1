////////////////////////////////////////////////////////////////////////////////
// Внутренние процедуры и функции подсистемы "Базовая функциональность".
//

// Неинтерактивное обновление данных ИБ при смене версии библиотеки
// Обязательная "точка входа" обновления ИБ в библиотеке.
//
Процедура ВыполнитьОбновлениеИнформационнойБазы() Экспорт
	
	ОбновлениеИнформационнойБазы.ВыполнитьИтерациюОбновления("СтандартныеПодсистемы", 
		ВерсияБиблиотеки(), СтандартныеПодсистемыПереопределяемый.ОбработчикиОбновленияСтандартныхПодсистем());
	
КонецПроцедуры

// Возвращает номер версии Библиотеки стандартных подсистем.
//
Функция ВерсияБиблиотеки() Экспорт
	
	Возврат "1.2.4.1";
	
КонецФункции

// Заполняет структуру параметров, необходимых для работы клиентского кода
// данной подсистемы. 
//
// Параметры:
//   Параметры   - Структура - структура параметров.
//
Процедура ДобавитьПараметрыРаботыКлиента(Параметры) Экспорт
	
	Параметры.Вставить("ИнформационнаяБазаЗаблокированаДляОбновления", 
		ОбновлениеИнформационнойБазы.ПроверитьНевозможностьОбновленияИнформационнойБазы());
	Параметры.Вставить("НеобходимоОбновлениеИнформационнойБазы", 
		ОбновлениеИнформационнойБазы.НеобходимоОбновлениеИнформационнойБазы());
	Параметры.Вставить("АвторизованныйПользователь", ПользователиСервер.АвторизованныйПользователь());
	Параметры.Вставить("ЭтоБазоваяВерсияКонфигурации", СтандартныеПодсистемыПереопределяемый.ЭтоБазоваяВерсияКонфигурации());
	
	Параметры.Вставить("ЗаголовокПриложения", СокрЛП(Константы.ЗаголовокСистемы.Получить()));
	Параметры.Вставить("ИмяКонфигурации", Метаданные.Имя);
	Параметры.Вставить("СинонимКонфигурации", Метаданные.Синоним);
	Параметры.Вставить("ВерсияКонфигурации", Метаданные.Версия);
	Параметры.Вставить("ПодробнаяИнформация", Метаданные.ПодробнаяИнформация);
	Параметры.Вставить("ИнформационнаяБазаФайловая", ОбщегоНазначения.ИнформационнаяБазаФайловая());
	Параметры.Вставить("ЗапрашиватьПодтверждениеПриЗавершенииПрограммы", ЗапрашиватьПодтверждениеПриЗавершенииПрограммы());
	Параметры.Вставить("ТекущийПользователь", ОбщегоНазначения.ТекущийПользователь());
	Параметры.Вставить("КодОсновногоЯзыка", Метаданные.ОсновнойЯзык.КодЯзыка);
		
	// Параметры для внешних подключений пользователей
	Параметры.Вставить("ИнформацияОПользователе", ПолучитьИнформациюОПользователе());
	Параметры.Вставить("ИмяCOMСоединителя", ОбщегоНазначения.ИмяCOMСоединителя());
	
КонецПроцедуры

Функция ПолучитьИнформациюОПользователе()
	ТекущийПользователь = ПользователиИнформационнойБазы.ТекущийПользователь();
	Возврат Новый Структура("Имя, ПолноеИмя, ПарольУстановлен, АутентификацияСтандартная, АутентификацияОС",
		ТекущийПользователь.Имя, ТекущийПользователь.ПолноеИмя, ТекущийПользователь.ПарольУстановлен,
		ТекущийПользователь.АутентификацияСтандартная, ТекущийПользователь.АутентификацияОС);
КонецФункции

// Обработчики обновления базовой функциональности
Процедура ЗарегистрироватьОбработчикиОбновления(Обработчики) Экспорт
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Функции поддержки инициализации параметров сеанса
//

// Инициализация параметров сенаса.
// Параметры
//  ИменаПараметровСеанса - массив, неопределено - 
//                         в массиве имена параметров сеанса для инициализации
//
//  Возвращает массив имен установленных параметров сеанса
//
Функция УстановкаПараметровСеанса(ИменаПараметровСеанса) Экспорт
	
	Перем ТекстСообщения;
	
	// Параметры сеанса, инициализация которых требует обращения к одним и тем же данным
	// следует инициализировать сразу группой. Для того, чтобы избежать их повторной инициализации,
	// имена уже установленных параметров сеанса сохраняются в массиве УстановленныеПараметры
	УстановленныеПараметры = Новый Массив;
	
	Если ИменаПараметровСеанса = Неопределено Тогда
		ПараметрыСеанса.ПараметрыКлиентаНаСервере = Новый ФиксированноеСоответствие(Новый Соответствие);
		
		// Начальное выполнение на сервере перед запуском программы.
		//ПередЗапускомПрограммы();
		Возврат УстановленныеПараметры;
		
	ИначеЕсли ИменаПараметровСеанса.Найти("ПараметрыКлиентаНаСервере") <> Неопределено Тогда
		
		ПараметрыСеанса.ПараметрыКлиентаНаСервере = Новый ФиксированноеСоответствие(Новый Соответствие);
		УстановленныеПараметры.Добавить("ПараметрыКлиентаНаСервере");
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.ОбменДанными") Тогда
		МодульОбменДаннымиСервер = ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ОбменДаннымиСервер");
		Обработчики = Новый Соответствие;
		МодульОбменДаннымиСервер.ПриДобавленииОбработчиковУстановкиПараметровСеанса(Обработчики);
		ВыполнитьОбработчикиУстановкиПараметровСеанса(ИменаПараметровСеанса, Обработчики, УстановленныеПараметры);
	КонецЕсли;

	Обработчики = СтандартныеПодсистемыПереопределяемый.ОбработчикиИнициализацииПараметровСеансаСтандартныхПодсистем();
	ОбработчикиСобственные = ОбщегоНазначенияЗКПереопределяемый.ОбработчикиИнициализацииПараметровСеанса();
	
	Для Каждого Запись Из ОбработчикиСобственные Цикл
		Обработчики.Вставить(Запись.Ключ, Запись.Значение);
	КонецЦикла;
	
	// массив с ключами параметров сеанса
	// задаются начальным словом в имени параметра сеанса и символом "*"
	ПараметрыСеансаКлючи = Новый Массив;
	
	Для Каждого Запись Из Обработчики Цикл
		Если Найти(Запись.Ключ, "*") > 0 Тогда
			КлючПараметра = СокрЛП(Запись.Ключ);
			ПараметрыСеансаКлючи.Добавить(Лев(КлючПараметра, СтрДлина(КлючПараметра)-1));
		КонецЕсли;
	КонецЦикла;
	
	Для каждого ИмяПараметра Из ИменаПараметровСеанса Цикл
		Если УстановленныеПараметры.Найти(ИмяПараметра) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Обработчик = Обработчики.Получить(ИмяПараметра);
		Если Обработчик <> Неопределено Тогда
			Если Не ОбщегоНазначения.ПроверитьИмяЭкспортнойПроцедуры(Обработчик, ТекстСообщения) Тогда
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;
			
			Выполнить Обработчик + "(ИмяПараметра, УстановленныеПараметры)";
			Продолжить;
		КонецЕсли;
		Для Каждого ИмяКлючаПараметра Из ПараметрыСеансаКлючи Цикл
			Если Лев(ИмяПараметра, СтрДлина(ИмяКлючаПараметра)) = ИмяКлючаПараметра Тогда
				Обработчик = Обработчики.Получить(ИмяКлючаПараметра+"*");
				Если Не ОбщегоНазначения.ПроверитьИмяЭкспортнойПроцедуры(Обработчик, ТекстСообщения) Тогда
					ВызватьИсключение ТекстСообщения;
				КонецЕсли;
				Выполнить Обработчик + "(ИмяПараметра, УстановленныеПараметры)";
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат УстановленныеПараметры;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Подтверждение завершения работы программы

// Прочитать настройку подтверждения завершения работы программы
// для текущего пользователя.
// 
// Возвращаемое значение:
//   Булево   - значение настройки.
// 
Функция ЗапрашиватьПодтверждениеПриЗавершенииПрограммы() Экспорт
	
	Результат = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ОбщиеНастройкиПользователя", "ЗапрашиватьПодтверждениеПриЗавершенииПрограммы");
	Если Результат = Неопределено Тогда
		Результат = Истина;
		СтандартныеПодсистемыВызовСервера.СохранитьНастройкуПодтвержденияПриЗавершенииПрограммы(Результат);
	КонецЕсли;
	Возврат Результат;
	
КонецФункции

// Возвращает серверный общий модуль по имени.
Функция СерверныйОбщийМодуль(Имя) Экспорт
	
	Если Метаданные.ОбщиеМодули.Найти(Имя) <> Неопределено Тогда
		Модуль = Вычислить(Имя);
	Иначе
		Модуль = Неопределено;
	КонецЕсли;
	
	Если ТипЗнч(Модуль) <> Тип("ОбщийМодуль") Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Общий модуль ""%1"" не найден.'"), Имя);
	КонецЕсли;
	
	Возврат Модуль;
	
КонецФункции

// Возвращает признак, является ли конфигурация базовой.
//
// Возвращаемое значение:
//   Булево   - Истина, если конфигурация - базовая.
//
Функция ЭтоБазоваяВерсияКонфигурации() Экспорт
	
	Возврат Найти(ВРег(Метаданные.Имя), "БАЗОВАЯ") > 0;
	
КонецФункции

// Заполняет структуру параметров, необходимых для работы клиентского кода
// данной подсистемы при запуске конфигурации, т.е. в обработчиках событий
// - ПередНачаломРаботыСистемы,
// - ПриНачалеРаботыСистемы
//
// Важно: при запуске недопустимо использовать команды сброса кэша
// повторно используемых модулей, иначе запуск может привести
// к непредсказуемым ошибкам и лишним серверным вызовам
//
// Параметры:
//   Параметры   - Структура - структура параметров.
//
// Возвращаемое значение:
//   Булево   - Ложь, если дальнейшее заполнение параметров необходимо прервать.
//
Функция ДобавитьПараметрыРаботыКлиентаПриЗапуске(Параметры) Экспорт
	
	// Обязательные параметры для продолжения работы.
	
	Параметры.Вставить("РазделениеВключено", ОбщегоНазначенияПовтИсп.РазделениеВключено());
	
	Параметры.Вставить("ДоступноИспользованиеРазделенныхДанных",
		ОбщегоНазначенияПовтИсп.ДоступноИспользованиеРазделенныхДанных());
	
	
	Параметры.Вставить("ИменаПодсистем", СтандартныеПодсистемыПовтИсп.ИменаПодсистем());
	
	// Проверка продолжения работы.
	Параметры.Вставить("ИнформационнаяБазаЗаблокированаДляОбновления",
		ОбновлениеИнформационнойБазы.ИнформационнаяБазаЗаблокированаДляОбновления(, Истина));
	
	Если ЗначениеЗаполнено(Параметры.ИнформационнаяБазаЗаблокированаДляОбновления) Тогда
		// Работа будет завершена.
		Возврат Ложь;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса") Тогда
		Если Параметры.РазделениеВключено И Параметры.ДоступноИспользованиеРазделенныхДанных И Параметры.ПервыйЗапросПараметров Тогда
			МодульРаботаВМоделиСервиса = ОбщегоНазначенияКлиентСервер.ОбщийМодуль("РаботаВМоделиСервиса");
			МодульРаботаВМоделиСервиса.ПриПроверкеБлокировкиОбластиДанныхПриЗапуске();
		КонецЕсли;
	КонецЕсли;
	
	// Проверка запуска с пустым списком пользователей.
	Параметры.Вставить("ОшибкаЗапускаСПустымСпискомПользователей",
		ПользователиСервер.ПроверитьВозможностьЗапускаСПустымСпискомПользователейИБ(Истина));
	
	Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.ОбменДанными") Тогда
		МодульОбменДаннымиПовтИсп = ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ОбменДаннымиПовтИсп");
		Если МодульОбменДаннымиПовтИсп.ЭтоАвтономноеРабочееМесто() Тогда
			// Для автономного рабочего места проверка выполняется после загрузки данных.
			Параметры.ОшибкаЗапускаСПустымСпискомПользователей = "";
		КонецЕсли;
	КонецЕсли;

	Если ЗначениеЗаполнено(Параметры.ОшибкаЗапускаСПустымСпискомПользователей) Тогда
		// Будет предложено создать администратора или завершить работу.
		Возврат Ложь;
	КонецЕсли;
	
	Если Параметры.ПервыйЗапросПараметров
	   И ОбщегоНазначения.ЭтоПодчиненныйУзелРИБ()
	   И ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.ОбменДанными") Тогда
		
		МодульОбменДаннымиВызовСервера = ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ОбменДаннымиВызовСервера");
		Если МодульОбменДаннымиВызовСервера.ПовторитьЗагрузкуСообщенияОбменаДаннымиПередЗапуском() Тогда
			Параметры.Вставить("ПовторитьЗагрузкуСообщенияОбменаДаннымиПередЗапуском");
		КонецЕсли;
	КонецЕсли;
	
	// Проверка необходимости предварительного обновления параметров работы программы.
	Если НеобходимоОбновлениеПараметровРаботыПрограммы() Тогда
		Параметры.Вставить("НеобходимоОбновлениеПараметровРаботыПрограммы", Истина);
	Иначе
		Параметры.Вставить("НеобходимоОбновлениеПараметровРаботыПрограммы", Ложь);
		Если Параметры.ПервыйЗапросПараметров Тогда
			ПодтвердитьОбновлениеПараметраРаботыПрограммы("*", "");
		КонецЕсли;
	КонецЕсли;
	
	Если Параметры.ПервыйЗапросПараметров Тогда
		Если Параметры.НеобходимоОбновлениеПараметровРаботыПрограммы
		 ИЛИ Параметры.Свойство("ПовторитьЗагрузкуСообщенияОбменаДаннымиПередЗапуском") Тогда
		
			// Будет выполнено предварительная загрузка или обновление.
			Параметры.Вставить("ИнформационнаяБазаФайловая", ОбщегоНазначения.ИнформационнаяБазаФайловая());
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	// Обязательные параметры для всех режимов работы.
	Параметры.Вставить("ОбработчикиКлиентскихСобытий", СтандартныеПодсистемыПовтИсп.ПараметрыПрограммныхСобытий(
		).ОбработчикиСобытий.НаКлиенте);
	
	Параметры.Вставить("ПервыйЗапускИнформационнойБазы",
		ОбновлениеИнформационнойБазы.ПервыйЗапускИнформационнойБазы());
	
	Параметры.Вставить("ПодробнаяИнформация", Метаданные.ПодробнаяИнформация);
	
	Параметры.Вставить("НеобходимоОбновлениеНеразделенныхДанныхИнформационнойБазы",
		ОбновлениеИнформационнойБазы.НеобходимоОбновлениеНеразделенныхДанныхИнформационнойБазы());
	
	Параметры.Вставить("ЗагрузитьСообщениеОбменаДанными", Ложь);
	
	// При входе неразделенным пользователем в неразделенный сеанс ошибки авторизации нет.
	Параметры.Вставить("ОшибкаАвторизации", "");
	
	Если Параметры.РазделениеВключено И Не Параметры.ДоступноИспользованиеРазделенныхДанных Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Параметры для работы в локальном режиме или
	// в сеансе с установленными значениями разделителей в модели сервиса.
	
	Параметры.Вставить("НеобходимоОбновлениеИнформационнойБазы",
		ОбновлениеИнформационнойБазы.НеобходимоОбновлениеИнформационнойБазы());
	
	Если Не Параметры.РазделениеВключено
		И ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.ОбменДанными") Тогда
		
		МодульОбменДаннымиСервер = ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ОбменДаннымиСервер");
		Параметры.Вставить("ЗагрузитьСообщениеОбменаДанными", МодульОбменДаннымиСервер.ЗагрузитьСообщениеОбменаДанными());
	КонецЕсли;
	
	Параметры.Вставить("ЭтоРазделеннаяКонфигурация", ОбщегоНазначенияПовтИсп.ЭтоРазделеннаяКонфигурация());
	Параметры.Вставить("ЕстьДоступДляОбновленияВерсииПлатформы", ПравоДоступа("Администрирование", Метаданные));
	
	ОбщиеПараметры = ОбщегоНазначения.ОбщиеПараметрыБазовойФункциональности();
	Параметры.Вставить("МинимальноНеобходимаяВерсияПлатформы", ОбщиеПараметры.МинимальноНеобходимаяВерсияПлатформы);
	Параметры.Вставить("РаботаВПрограммеЗапрещена",            ОбщиеПараметры.РаботаВПрограммеЗапрещена);
	
	Параметры.Вставить("ОшибкаАвторизации", "");
	Если Параметры.ОшибкаАвторизации <> "" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры.ИнформационнаяБазаЗаблокированаДляОбновления) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ДобавитьОбщиеПараметрыРаботыКлиента(Параметры);
	
	Возврат Истина;
	
КонецФункции

// Только для внутреннего использования.
Функция НеобходимоОбновлениеПараметровРаботыПрограммы(ВыполнитьЗагрузку = Истина) Экспорт
	
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		// Обновление в модели сервиса.
		Если НЕ ОбщегоНазначенияПовтИсп.ДоступноИспользованиеРазделенныхДанных()
			И ОбновлениеИнформационнойБазы.НеобходимоОбновлениеНеразделенныхДанныхИнформационнойБазы() Тогда
			
			Возврат Истина;
		КонецЕсли;
	Иначе
		// Обновление в локальном режиме.
		Если ОбновлениеИнформационнойБазы.НеобходимоОбновлениеИнформационнойБазы() Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.ОбменДанными") Тогда
		МодульОбменДаннымиСервер = ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ОбменДаннымиСервер");
		
		Если МодульОбменДаннымиСервер.НастройкаПодчиненногоУзлаРИБ() Тогда
			ВыполнитьЗагрузку = Ложь;
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Попытка
		ПользователиСлужебныйПовтИсп.Параметры();
	Исключение
		ВыполнитьЗагрузку = Ложь;
		Возврат Истина;
	КонецПопытки;
		
	Возврат Ложь;
	
КонецФункции

// Регистрирует завершение обновления параметров работы программы
// для возможности использования в сеансе их обновления.
//
Процедура ПодтвердитьОбновлениеПараметраРаботыПрограммы(ИмяКонстанты, ИмяПараметра) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПараметрыКлиентаНаСервере = Новый Соответствие;
	Для каждого КлючИЗначение Из ПараметрыСеанса.ПараметрыКлиентаНаСервере Цикл
		ПараметрыКлиентаНаСервере.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	
	ВсеОбновленныеПараметры = ПараметрыКлиентаНаСервере.Получить("ВсеОбновленныеПараметрыРаботыПрограммы");
	Если ВсеОбновленныеПараметры = Неопределено Тогда
		ВсеОбновленныеПараметры = Новый Соответствие;
		ОбновленныеПараметры = Новый Соответствие;
	Иначе
		Соответствие = Новый Соответствие;
		Для каждого КлючИЗначение Из ВсеОбновленныеПараметры Цикл
			Соответствие.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
		КонецЦикла;
		ВсеОбновленныеПараметры = Соответствие;
		
		ОбновленныеПараметры = ВсеОбновленныеПараметры.Получить(ИмяКонстанты);
		Если ОбновленныеПараметры = Неопределено Тогда
			ОбновленныеПараметры = Новый Соответствие;
		Иначе
			Соответствие = Новый Соответствие;
			Для каждого КлючИЗначение Из ОбновленныеПараметры Цикл
				Соответствие.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
			КонецЦикла;
			ОбновленныеПараметры = Соответствие;
		КонецЕсли;
	КонецЕсли;
	ОбновленныеПараметры.Вставить(ИмяПараметра, Истина);
	ВсеОбновленныеПараметры.Вставить(ИмяКонстанты, Новый ФиксированноеСоответствие(ОбновленныеПараметры));
	
	ПараметрыКлиентаНаСервере.Вставить("ВсеОбновленныеПараметрыРаботыПрограммы",
		Новый ФиксированноеСоответствие(ВсеОбновленныеПараметры));
	
	ПараметрыСеанса.ПараметрыКлиентаНаСервере = Новый ФиксированноеСоответствие(ПараметрыКлиентаНаСервере);
	
КонецПроцедуры

// Заполняет структуру параметров, необходимых для работы клиентского кода
// при запуске конфигурации и в дальнейшем во время работы с ней. 
//
// Параметры:
//   Параметры   - Структура - структура параметров.
//
Процедура ДобавитьОбщиеПараметрыРаботыКлиента(Параметры) 
	
	Если Не Параметры.РазделениеВключено Или Параметры.ДоступноИспользованиеРазделенныхДанных Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		Параметры.Вставить("АвторизованныйПользователь", ПользователиСервер.АвторизованныйПользователь());
		Параметры.Вставить("ПредставлениеПользователя", Строка(Параметры.АвторизованныйПользователь));
		Параметры.Вставить("ЗаголовокПриложения", СокрЛП(Константы.ЗаголовокСистемы.Получить()));
		УстановитьПривилегированныйРежим(Ложь);
		
	КонецЕсли;
	
	Параметры.Вставить("ЭтоГлавныйУзел", НЕ ОбщегоНазначения.ЭтоПодчиненныйУзелРИБ());
	Параметры.Вставить("ИнформационнаяБазаФайловая", ОбщегоНазначения.ИнформационнаяБазаФайловая());
	
	Параметры.Вставить("ИнформационнаяБазаФайловаяБезМенеджераФоновыхЗаданий",
		ОбщегоНазначения.ИнформационнаяБазаФайловая()
		И НЕ ОбщегоНазначенияКлиентСервер.ЭтоПлатформа83БезРежимаСовместимости());
	
	Параметры.Вставить("ТребуетсяОбновлениеКонфигурацииУзлаРИБ",
		ОбщегоНазначения.ТребуетсяОбновлениеКонфигурацииПодчиненногоУзлаРИБ());
	
	Параметры.Вставить("ЭтоБазоваяВерсияКонфигурации", ЭтоБазоваяВерсияКонфигурации());
	
КонецПроцедуры

// Возвращает параметры работы программы для использования (фиксированные данные),
// которые являются, например, кэшем.
//
// Параметры:
//  ИмяКонстанты - Строка - имя константы (имя группы параметров работы программы).
//
Функция ПараметрыРаботыПрограммы(ИмяКонстанты) Экспорт
	
	Возврат СтандартныеПодсистемыПовтИсп.ПараметрыРаботыПрограммы(ИмяКонстанты);
	
КонецФункции

// Проверяет параметры работы программы для использования (фиксированные данные),
// которые являются, например, кэшем.
//
// Параметры:
//  ИмяКонстанты    - Строка - имя константы (имя группы параметров работы программы).
//  ИменаПараметров - Строка - список имен параметров, которые должны быть в константе.
//                    Требуется при получении обновленных данных через модуль повторного использования
//                    для блокировки получения, если не все параметры группы (константы) обновлены.
//                    Не требуется при получении данных с целью обновления.
//
Процедура ПроверитьОбновлениеПараметровРаботыПрограммы(ИмяКонстанты, ИменаПараметров = "") Экспорт
	
	Если ИменаПараметров <> "" Тогда
		ТребуетсяОбновление = Ложь;
		
		Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
			ТребуетсяОбновление =
				ОбновлениеИнформационнойБазы.НеобходимоОбновлениеНеразделенныхДанныхИнформационнойБазы();
		Иначе
			ТребуетсяОбновление =
				ОбновлениеИнформационнойБазы.НеобходимоОбновлениеИнформационнойБазы();
		КонецЕсли;
		
		Если ТребуетсяОбновление Тогда
			
			УстановитьПривилегированныйРежим(Истина);
			ВсеОбновленныеПараметры = ПараметрыСеанса.ПараметрыКлиентаНаСервере.Получить(
				"ВсеОбновленныеПараметрыРаботыПрограммы");
			УстановитьПривилегированныйРежим(Ложь);
			
			Если ВсеОбновленныеПараметры <> Неопределено Тогда
				Если ВсеОбновленныеПараметры.Получить("*") <> Неопределено Тогда
					ТребуетсяОбновление = Ложь;
				Иначе
					ОбновленныеПараметры = ВсеОбновленныеПараметры.Получить(ИмяКонстанты);
					Если ОбновленныеПараметры <> Неопределено Тогда
						ТребуетсяОбновление = Ложь;
						ТребуемыеПараметры = Новый Структура(ИменаПараметров);
						Для каждого КлючИЗначение Из ТребуемыеПараметры Цикл
							Если ОбновленныеПараметры.Получить(КлючИЗначение.Ключ) = Неопределено Тогда
								ТребуетсяОбновление = Истина;
								Прервать;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ТребуетсяОбновление Тогда
			ВызватьИсключение
				НСтр("ru = 'Вход в программу временно невозможен в связи с обновлением на новую версию.'");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает уточнения при возникновении проблем с параметрами работы программы.
Функция УточнениеОшибкиПараметровРаботыПрограммыДляРазработчика() Экспорт
	
	Возврат Символы.ПС + Символы.ПС +
		НСтр("ru = 'Для разработчика: возможно требуется обновить вспомогательные данные,
		           |которые влияют на работу программы. Для выполнения обновления можно:
		           |- воспользоваться внешней обработкой
		           |  ""Инструменты разработчика: Обновление вспомогательных данных"",
		           |- либо запустить программу с параметром командной строки 1С:Предприятия 8
		           |  ""/С ЗапуститьОбновлениеИнформационнойБазы"",
		           |- либо увеличить номер версии конфигурации, чтобы при очередном запуске
		           |  выполнились процедуры обновления данных информационной базы.'");
	
КонецФункции

// Процедура является обработчиком одноименного события, возникающего при обмене данными в распределенной информационной базе.
//
// Параметры:
// см. описание обработчика события ПриОтправкеДанныхПодчиненному() в синтаксис-помощнике.
// 
Процедура ПриОтправкеДанныхПодчиненному(ЭлементДанных, ОтправкаЭлемента, Знач СозданиеНачальногоОбраза, Знач Получатель = Неопределено) Экспорт
	
	ИгнорироватьОтправкуОбъектовНачальногоОбраза(ЭлементДанных, ОтправкаЭлемента, СозданиеНачальногоОбраза);
	
	Если ОтправкаЭлемента = ОтправкаЭлементаДанных.Игнорировать Тогда
		Возврат;
	КонецЕсли;
	
	// Отправка идентификаторов объектов метаданных выполняется в другой секции сообщения обмена.
	ИгнорироватьОтправкуИдентификаторовОбъектовМетаданных(ЭлементДанных, ОтправкаЭлемента, СозданиеНачальногоОбраза);
	
	Если ОтправкаЭлемента = ОтправкаЭлементаДанных.Игнорировать Тогда
		Возврат;
	КонецЕсли;
	
	// Вставка кода от подсистемы обмена данными должна быть первой.
	Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.ОбменДанными") Тогда
		МодульОбменДаннымиСобытия = ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ОбменДаннымиСобытия");
		МодульОбменДаннымиСобытия.ПриОтправкеДанныхКорреспонденту(ЭлементДанных, ОтправкаЭлемента, СозданиеНачальногоОбраза, Получатель, Ложь);
		
		Если ОтправкаЭлемента = ОтправкаЭлементаДанных.Игнорировать Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ОбработчикиСобытия = ОбщегоНазначения.ОбработчикиСлужебногоСобытия(
		"СтандартныеПодсистемы.БазоваяФункциональность\ПриОтправкеДанныхПодчиненному");
	
	Для каждого Обработчик Из ОбработчикиСобытия Цикл
		Обработчик.Модуль.ПриОтправкеДанныхПодчиненному(
			ЭлементДанных, ОтправкаЭлемента, СозданиеНачальногоОбраза, Получатель);
		Если ОтправкаЭлемента = ОтправкаЭлементаДанных.Игнорировать Тогда
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
	// Вставка кода от подсистемы обмена данными в модели сервиса должна быть последней.
	Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса.ОбменДаннымиВМоделиСервиса") Тогда
		МодульОбменДаннымиВМоделиСервиса = ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ОбменДаннымиВМоделиСервиса");
		МодульОбменДаннымиВМоделиСервиса.ПриОтправкеДанныхПодчиненному(ЭлементДанных, ОтправкаЭлемента, СозданиеНачальногоОбраза, Получатель);
		
		Если ОтправкаЭлемента = ОтправкаЭлементаДанных.Игнорировать Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура является обработчиком одноименного события, возникающего при обмене данными в распределенной информационной базе.
//
// Параметры:
// см. описание обработчика события ПриОтправкеДанныхГлавному() в синтаксис-помощнике.
// 
Процедура ПриОтправкеДанныхГлавному(ЭлементДанных, ОтправкаЭлемента, Знач Получатель = Неопределено) Экспорт
	
	ИгнорироватьОтправкуОбъектовНачальногоОбраза(ЭлементДанных, ОтправкаЭлемента);
	
	Если ОтправкаЭлемента = ОтправкаЭлементаДанных.Игнорировать Тогда
		Возврат;
	КонецЕсли;
	
	// Отправка идентификаторов объектов метаданных выполняется в другой секции сообщения обмена.
	ИгнорироватьОтправкуИдентификаторовОбъектовМетаданных(ЭлементДанных, ОтправкаЭлемента);
	
	Если ОтправкаЭлемента = ОтправкаЭлементаДанных.Игнорировать Тогда
		Возврат;
	КонецЕсли;
	
	// Вставка кода от подсистемы обмена данными должна быть первой.
	// При отправке данных главному обработчик не вызываем,
	// т.к. ограничение миграции "снизу-вверх" в РИБ по умолчанию не предусмотрено.
	
	ОбработчикиСобытия = ОбщегоНазначения.ОбработчикиСлужебногоСобытия(
		"СтандартныеПодсистемы.БазоваяФункциональность\ПриОтправкеДанныхГлавному");
	
	Для каждого Обработчик Из ОбработчикиСобытия Цикл
		Обработчик.Модуль.ПриОтправкеДанныхГлавному(ЭлементДанных, ОтправкаЭлемента, Получатель);
		Если ОтправкаЭлемента = ОтправкаЭлементаДанных.Игнорировать Тогда
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Процедура является обработчиком одноименного события, возникающего при обмене данными в распределенной информационной базе.
//
// Параметры:
// см. описание обработчика события ПриПолученииДанныхОтПодчиненного() в синтаксис-помощнике.
// 
Процедура ПриПолученииДанныхОтПодчиненного(ЭлементДанных, ПолучениеЭлемента, ОтправкаНазад, Знач Отправитель = Неопределено) Экспорт
	
	ИгнорироватьПолучениеОбъектовНачальногоОбраза(ЭлементДанных, ПолучениеЭлемента);
	
	Если ПолучениеЭлемента = ПолучениеЭлементаДанных.Игнорировать Тогда
		Возврат;
	КонецЕсли;
	
	ОбработчикиСобытия = ОбщегоНазначения.ОбработчикиСлужебногоСобытия(
		"СтандартныеПодсистемы.БазоваяФункциональность\ПриПолученииДанныхОтПодчиненного");
	
	Для каждого Обработчик Из ОбработчикиСобытия Цикл
		Обработчик.Модуль.ПриПолученииДанныхОтПодчиненного(
			ЭлементДанных, ПолучениеЭлемента, ОтправкаНазад, Отправитель);
		Если ПолучениеЭлемента = ПолучениеЭлементаДанных.Игнорировать Тогда
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
	// Вставка кода от подсистемы обмена данными должна быть последней.
	Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.ОбменДанными") Тогда
		МодульОбменДаннымиСобытия = ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ОбменДаннымиСобытия");
		МодульОбменДаннымиСобытия.ПриПолученииДанныхОтПодчиненногоВКонце(ЭлементДанных, ПолучениеЭлемента, Отправитель);
	КонецЕсли;
	
КонецПроцедуры

// Процедура является обработчиком одноименного события, возникающего при обмене данными в распределенной информационной базе.
//
// Параметры:
// см. описание обработчика события ПриПолученииДанныхОтГлавного() в синтаксис-помощнике.
// 
Процедура ПриПолученииДанныхОтГлавного(ЭлементДанных, ПолучениеЭлемента, ОтправкаНазад, Знач Отправитель = Неопределено) Экспорт
	
	ИгнорироватьПолучениеОбъектовНачальногоОбраза(ЭлементДанных, ПолучениеЭлемента);
	
	Если ПолучениеЭлемента = ПолучениеЭлементаДанных.Игнорировать Тогда
		Возврат;
	КонецЕсли;
	
	// Вставка кода от подсистемы обмена данными должна быть первой.
	Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.ОбменДанными") Тогда
		МодульОбменДаннымиСобытия = ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ОбменДаннымиСобытия");
		МодульОбменДаннымиСобытия.ПриПолученииДанныхОтГлавногоВНачале(ЭлементДанных, ПолучениеЭлемента, ОтправкаНазад, Отправитель);
		
		Если ПолучениеЭлемента = ПолучениеЭлементаДанных.Игнорировать Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	ОбработчикиСобытия = ОбщегоНазначения.ОбработчикиСлужебногоСобытия(
		"СтандартныеПодсистемы.БазоваяФункциональность\ПриПолученииДанныхОтГлавного");
	
	Для каждого Обработчик Из ОбработчикиСобытия Цикл
		Обработчик.Модуль.ПриПолученииДанныхОтГлавного(
			ЭлементДанных, ПолучениеЭлемента, ОтправкаНазад, Отправитель);
		Если ПолучениеЭлемента = ПолучениеЭлементаДанных.Игнорировать Тогда
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
	// Вставка кода от подсистемы обмена данными должна быть последней.
	Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.ОбменДанными")
		И Не СозданиеНачальногоОбраза(ЭлементДанных) Тогда
		
		МодульОбменДаннымиСобытия = ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ОбменДаннымиСобытия");
		МодульОбменДаннымиСобытия.ПриПолученииДанныхОтГлавногоВКонце(ЭлементДанных, ПолучениеЭлемента, Отправитель);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ИгнорироватьОтправкуОбъектовНачальногоОбраза(ЭлементДанных, ОтправкаЭлемента, Знач СозданиеНачальногоОбраза = Ложь)
	
	Если Не СозданиеНачальногоОбраза
		И ЭтоОбъектНачальногоОбразаУзлаРИБ(ОбъектМетаданных(ЭлементДанных))
		И Не ЭтоПредопределенныйЭлемент(ЭлементДанных) Тогда
		
		ОтправкаЭлемента = ОтправкаЭлементаДанных.Игнорировать;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ИгнорироватьОтправкуИдентификаторовОбъектовМетаданных(ЭлементДанных, ОтправкаЭлемента, Знач СозданиеНачальногоОбраза = Ложь)
	
КонецПроцедуры

Функция ИгнорироватьПолучениеОбъектовНачальногоОбраза(ЭлементДанных, ПолучениеЭлемента)
	
	Если Не СозданиеНачальногоОбраза(ЭлементДанных)
		И ЭтоОбъектНачальногоОбразаУзлаРИБ(ОбъектМетаданных(ЭлементДанных)) Тогда
		
		ПолучениеЭлемента = ПолучениеЭлементаДанных.Игнорировать;
		
	КонецЕсли;
	
КонецФункции

Функция СозданиеНачальногоОбраза(Знач ЭлементДанных)
	
	Возврат ?(ТипЗнч(ЭлементДанных) = Тип("УдалениеОбъекта"), Ложь, ЭлементДанных.ДополнительныеСвойства.Свойство("СозданиеНачальногоОбраза"));
	
КонецФункции

Функция ЭтоПредопределенныйЭлемент(ЭлементДанных)
	
	ЭтоПредопределенный = Ложь;
	ИмяБазовогоТипа = ОбщегоНазначения.ИмяБазовогоТипаПоОбъектуМетаданных(ЭлементДанных.Метаданные());
	
	Если ИмяБазовогоТипа = ОбщегоНазначения.ИмяТипаСправочники()
		ИЛИ ИмяБазовогоТипа = ОбщегоНазначения.ИмяТипаПланыВидовХарактеристик()
		ИЛИ ИмяБазовогоТипа = ОбщегоНазначения.ИмяТипаПланыСчетов()
		ИЛИ ИмяБазовогоТипа = ОбщегоНазначения.ИмяТипаПланыВидовРасчета() Тогда
		
		Если ЭлементДанных.Предопределенный Тогда
			
			ЭтоПредопределенный = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ЭтоПредопределенный;
	
КонецФункции

// Определяет, является ли переданный объект, объектом начального образа подчиненного узла РИБ.
//
// Параметры:
//  Объект – ОбъектМетаданных. Объект метаданных, который необходимо проверить.
// 
//  Возвращаемое значение:
// Тип: Булево.
// Истина – объект используется в РИБ только в момент создания начального образа подчиненного узла;
// Ложь – в противном случае.
// 
Функция ЭтоОбъектНачальногоОбразаУзлаРИБ(Знач Объект) Экспорт
	
	Возврат СтандартныеПодсистемыПовтИсп.ОбъектыНачальногоОбраза(
		).Получить(Объект.ПолноеИмя()) <> Неопределено;
	
КонецФункции

Функция ОбъектМетаданных(Знач ЭлементДанных)
	
	Возврат ?(ТипЗнч(ЭлементДанных) = Тип("УдалениеОбъекта"), ЭлементДанных.Ссылка.Метаданные(), ЭлементДанных.Метаданные());
	
КонецФункции

// Возвращает соответствие имен событий массивам их обработчиков.
// 
// Возвращаемое значение:
//  Структура со свойствами:
//    НаКлиенте - Соответствие (см. ниже)
//    НаСервере - Соответствие (см. ниже)
//
//  Соответствие, где
//   Ключ     - Строка - полное имя события,
//   Значение - Массив структур со свойствами:
//               Версия - Строка - версия обработчика (пустая, если не была указана),
//               Модуль - имя модуля в котором размещен обработчик.
//
Функция ОбработчикиСобытий() Экспорт
	
	ОписанияПодсистем = СтандартныеПодсистемыПовтИсп.ОписанияПодсистем();
	
	// Определение всех доступных событий программы.
	КлиентскиеСобытия = Новый Массив;
	СерверныеСобытия  = Новый Массив;
	КлиентскиеСлужебныеСобытия = Новый Массив;
	СерверныеСлужебныеСобытия  = Новый Массив;
	
	Для каждого Подсистема Из ОписанияПодсистем.Порядок Цикл
		Описание = ОписанияПодсистем.ПоИменам[Подсистема];
		
		Если НЕ Описание.ДобавлятьСобытия
		   И НЕ Описание.ДобавлятьСлужебныеСобытия Тогда
			
			Продолжить;
		КонецЕсли;
		
		Модуль = ОбщегоНазначенияКлиентСервер.ОбщийМодуль(
			Описание.ОсновнойСерверныйМодуль);
		
		Если Описание.Имя = "СтандартныеПодсистемы" Тогда
			Модуль = СтандартныеПодсистемыСервер;
		КонецЕсли;
		
		Если Описание.ДобавлятьСобытия Тогда
			Модуль.ПриДобавленииСобытий(КлиентскиеСобытия, СерверныеСобытия);
		КонецЕсли;
		
		Если Описание.ДобавлятьСлужебныеСобытия Тогда
			Модуль.ПриДобавленииСлужебныхСобытий(КлиентскиеСлужебныеСобытия, СерверныеСлужебныеСобытия);
		КонецЕсли;
	КонецЦикла;
	
	ПроверкаУникальностиИменСобытий(КлиентскиеСобытия);
	ПроверкаУникальностиИменСобытий(СерверныеСобытия);
	ПроверкаУникальностиИменСобытий(КлиентскиеСлужебныеСобытия);
	ПроверкаУникальностиИменСобытий(СерверныеСлужебныеСобытия);
	
	// Подготовка новых массивов для добавления обработчиков.
	ОбработчикиКлиентскихСобытийПоПодсистемам = Новый Соответствие;
	ОбработчикиСерверныхСобытийПоПодсистемам  = Новый Соответствие;
	ОбработчикиКлиентскихСлужебныхСобытийПоПодсистемам = Новый Соответствие;
	ОбработчикиСерверныхСлужебныхСобытийПоПодсистемам  = Новый Соответствие;
	
	ОбязательныеКлиентскиеСобытия = Новый Соответствие;
	ОбязательныеСерверныеСобытия  = Новый Соответствие;
	ОбязательныеКлиентскиеСлужебныеСобытия = Новый Соответствие;
	ОбязательныеСерверныеСлужебныеСобытия  = Новый Соответствие;
	
	Для каждого Подсистема Из ОписанияПодсистем.Порядок Цикл
		
		ОбработчикиКлиентскихСобытийПоПодсистемам.Вставить(Подсистема,
			ШаблонОбработчиковСобытий(КлиентскиеСобытия, ОбязательныеКлиентскиеСобытия));
		
		ОбработчикиСерверныхСобытийПоПодсистемам.Вставить(Подсистема,
			ШаблонОбработчиковСобытий(СерверныеСобытия, ОбязательныеСерверныеСобытия));
		
		ОбработчикиКлиентскихСлужебныхСобытийПоПодсистемам.Вставить(Подсистема,
			ШаблонОбработчиковСобытий(КлиентскиеСлужебныеСобытия, ОбязательныеКлиентскиеСлужебныеСобытия));
		
		ОбработчикиСерверныхСлужебныхСобытийПоПодсистемам.Вставить(Подсистема,
			ШаблонОбработчиковСобытий(СерверныеСлужебныеСобытия, ОбязательныеСерверныеСлужебныеСобытия));
		
	КонецЦикла;
	
	// Добавление всех обработчиков для требуемых событий программы.
	Для каждого Подсистема Из ОписанияПодсистем.Порядок Цикл
		Описание = ОписанияПодсистем.ПоИменам[Подсистема];
		
		Если НЕ Описание.ДобавлятьОбработчикиСобытий
		   И НЕ Описание.ДобавлятьОбработчикиСлужебныхСобытий Тогда
			
			Продолжить;
		КонецЕсли;
		
		Модуль = ОбщегоНазначенияКлиентСервер.ОбщийМодуль(
			Описание.ОсновнойСерверныйМодуль);
		
		Если Описание.Имя = "СтандартныеПодсистемы" Тогда
			Модуль = СтандартныеПодсистемыСервер;
		КонецЕсли;
		
		Если Описание.ДобавлятьОбработчикиСобытий Тогда
			Модуль.ПриДобавленииОбработчиковСобытий(
				ОбработчикиКлиентскихСобытийПоПодсистемам[Подсистема],
				ОбработчикиСерверныхСобытийПоПодсистемам[Подсистема]);
		КонецЕсли;
		
		Если Описание.ДобавлятьОбработчикиСлужебныхСобытий Тогда
			Модуль.ПриДобавленииОбработчиковСлужебныхСобытий(
				ОбработчикиКлиентскихСлужебныхСобытийПоПодсистемам[Подсистема],
				ОбработчикиСерверныхСлужебныхСобытийПоПодсистемам[Подсистема]);
		КонецЕсли;
	КонецЦикла;
	
	// Проверка обязательных событий.
	ОбязательныеСобытияБезОбработчиков = Новый Массив;
	
	ДобавитьОбязательныеСобытияБезОбработчиков(ОбязательныеСобытияБезОбработчиков,
		ОбязательныеКлиентскиеСобытия, ОбработчикиКлиентскихСобытийПоПодсистемам);
	
	ДобавитьОбязательныеСобытияБезОбработчиков(ОбязательныеСобытияБезОбработчиков,
		ОбязательныеСерверныеСобытия, ОбработчикиСерверныхСобытийПоПодсистемам);
	
	ДобавитьОбязательныеСобытияБезОбработчиков(ОбязательныеСобытияБезОбработчиков,
		ОбязательныеКлиентскиеСлужебныеСобытия, ОбработчикиКлиентскихСлужебныхСобытийПоПодсистемам);
	
	ДобавитьОбязательныеСобытияБезОбработчиков(ОбязательныеСобытияБезОбработчиков,
		ОбязательныеСерверныеСлужебныеСобытия, ОбработчикиСерверныхСлужебныхСобытийПоПодсистемам);
	
	Если ОбязательныеСобытияБезОбработчиков.Количество() > 0 Тогда
		ИмяСобытия  = НСтр("ru = 'Обработчики событий'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		
		Комментарий = НСтр("ru = 'Для следующих обязательных событий не определены обработчики:'")
			+ Символы.ПС + СтроковыеФункцииКлиентСервер.ПолучитьСтрокуИзМассиваПодстрок(ОбязательныеСобытияБезОбработчиков, Символы.ПС);
		
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,, Комментарий);
		ВызватьИсключение НСтр("ru = 'Для обязательных событий не определены обработчики.
		                             |Подробности см. в журнале регистрации.'");
	КонецЕсли;
	
	// Форматирование описаний обработчиков событий программы.
	ВсеОбработчикиСобытий = Новый Структура;
	ВсеОбработчикиСобытий.Вставить("НаКлиенте", Новый Структура);
	ВсеОбработчикиСобытий.Вставить("НаСервере", Новый Структура);
	
	ВсеОбработчикиСобытий.НаКлиенте.Вставить("ОбработчикиСобытий", СтандартноеОписаниеОбработчиковСобытий(
		ОписанияПодсистем, ОбработчикиКлиентскихСобытийПоПодсистемам));
	
	ВсеОбработчикиСобытий.НаСервере.Вставить("ОбработчикиСобытий", СтандартноеОписаниеОбработчиковСобытий(
		ОписанияПодсистем, ОбработчикиСерверныхСобытийПоПодсистемам));
	
	ВсеОбработчикиСобытий.НаКлиенте.Вставить("ОбработчикиСлужебныхСобытий", СтандартноеОписаниеОбработчиковСобытий(
		ОписанияПодсистем, ОбработчикиКлиентскихСлужебныхСобытийПоПодсистемам));
	
	ВсеОбработчикиСобытий.НаСервере.Вставить("ОбработчикиСлужебныхСобытий", СтандартноеОписаниеОбработчиковСобытий(
		ОписанияПодсистем, ОбработчикиСерверныхСлужебныхСобытийПоПодсистемам));
	
	Возврат Новый ФиксированнаяСтруктура(ВсеОбработчикиСобытий);
	
КонецФункции

// Устанавливает вспомогательные данные для работы программы, хранимые в неразделенных константах.
//
// Параметры:
//  ИмяКонстанты      - Строка - имя неразделенной константы, в которой сохраняется значение параметра.
//  ИмяПараметра      - Строка - имя параметра, который нужно установить (без приставки ИзмененияПараметра).
//  ЗначениеПараметра - фиксированные данные, которые устанавливаются в качестве значения параметра.
//  ТолькоПроверка    - 
//
Процедура УстановитьПараметрРаботыПрограммы(ИмяКонстанты, ИмяПараметра, ЗначениеПараметра) Экспорт
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("Константа." + ИмяКонстанты);
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	
	НачатьТранзакцию();
	Попытка
		Блокировка.Заблокировать();
		
		Параметры = Константы[ИмяКонстанты].Получить().Получить();
		Если ТипЗнч(Параметры) <> Тип("Структура") Тогда
			Параметры = Новый Структура;
		КонецЕсли;
		
		Параметры.Вставить(ИмяПараметра, ЗначениеПараметра);
		
		МенеджерЗначения = Константы[ИмяКонстанты].СоздатьМенеджерЗначения();
		МенеджерЗначения.ОбменДанными.Загрузка = Истина;
		МенеджерЗначения.ОбменДанными.Получатели.Автозаполнение = Ложь;
		МенеджерЗначения.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов");
		МенеджерЗначения.Значение = Новый ХранилищеЗначения(Параметры);
		МенеджерЗначения.Записать();
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	ОбновитьПовторноИспользуемыеЗначения();
	
КонецПроцедуры

Процедура ПроверкаУникальностиИменСобытий(События)
	
	ВсеСобытия    = Новый Соответствие;
	
	Для каждого Событие Из События Цикл
		
		Если ВсеСобытия.Получить(Событие) = Неопределено Тогда
			ВсеСобытия.Вставить(Событие, Истина);
		Иначе
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ошибка при подготовке списка событий.
				           |
				           |Событие ""%1""
				           |уже добавлено.'"),
				Событие);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ШаблонОбработчиковСобытий(События, ОбязательныеСобытия)
	
	ОбработчикиСобытий  = Новый Соответствие;
	
	Для каждого Событие Из События Цикл
		
		Если ТипЗнч(Событие) = Тип("Строка") Тогда // Имя события в виде строки.
			ОбработчикиСобытий.Вставить(Событие, Новый Массив);
			
		Иначе// Описание события в виде структуры - см. ОбщегоНазначения.НовоеСобытие().
			ОбработчикиСобытий.Вставить(Событие.Имя, Новый Массив);
			Если Событие.Обязательное Тогда
				Если ОбязательныеСобытия.Получить(Событие.Имя) = Неопределено Тогда
					ОбязательныеСобытия.Вставить(Событие.Имя, Истина);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ОбработчикиСобытий;
	
КонецФункции

Процедура ДобавитьОбязательныеСобытияБезОбработчиков(ОбязательныеСобытияБезОбработчиков,
                                                     ОбязательныеСобытия,
                                                     ОбработчикиСобытийПоПодсистемам)
	
	Для каждого ОбязательноеСобытие Из ОбязательныеСобытия Цикл
		
		ОбработчикНайден = Ложь;
		Для каждого ОбработчикиСобытийПодсистемы Из ОбработчикиСобытийПоПодсистемам Цикл
			
			Если ОбработчикиСобытийПодсистемы.Значение.Получить(ОбязательноеСобытие.Ключ).Количество() <> 0 Тогда
				ОбработчикНайден = Истина;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если Не ОбработчикНайден Тогда
			ОбязательныеСобытияБезОбработчиков.Добавить(ОбязательноеСобытие.Ключ);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция СтандартноеОписаниеОбработчиковСобытий(ОписанияПодсистем, ОбработчикиСобытийПоПодсистемам)
	
	ОбработчикиСобытий  = Новый Соответствие;
	МодулиОбработчиков  = Новый Соответствие;
	СобытияОбработчиков = Новый Соответствие;
	
	Для каждого Подсистема Из ОписанияПодсистем.Порядок Цикл
		ОбработчикиСобытийПодсистемы = ОбработчикиСобытийПоПодсистемам[Подсистема];
		
		Для каждого КлючИЗначение Из ОбработчикиСобытийПодсистемы Цикл
			Событие              = КлючИЗначение.Ключ;
			ОписанияОбработчиков = КлючИЗначение.Значение;
			
			Обработчики = ОбработчикиСобытий[Событие];
			Если Обработчики = Неопределено Тогда
				Обработчики = Новый Массив;
				ОбработчикиСобытий.Вставить(Событие, Обработчики);
				МодулиОбработчиков.Вставить(Событие, Новый Соответствие);
			КонецЕсли;
			
			Для каждого ОписаниеОбработчика Из ОписанияОбработчиков Цикл
				Если ТипЗнч(ОписаниеОбработчика) = Тип("Структура") Тогда
					Обработчик = ОписаниеОбработчика;
				Иначе
					Обработчик = Новый Структура;
					Обработчик.Вставить("Модуль", ОписаниеОбработчика);
				КонецЕсли;
				Если НЕ Обработчик.Свойство("Версия") Тогда
					Обработчик.Вставить("Версия", "");
				КонецЕсли;
				Обработчик.Вставить("Подсистема", Подсистема);
				
				// Проверка полного имени модуля процедуры обработчика события.
				Если ТипЗнч(Обработчик.Модуль) <> Тип("Строка")
				 ИЛИ НЕ ЗначениеЗаполнено(Обработчик.Модуль) Тогда
					
					ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Ошибка при подготовке обработчиков события
						           |""%1"".
						           |
						           |Ошибка в имени модуля ""%2"".'"),
						Событие,
						Обработчик.Модуль);
				КонецЕсли;
				
				// Проверка, что один и тот же модуль указан для события только раз.
				Если МодулиОбработчиков[Событие].Получить(Обработчик.Модуль) = Неопределено Тогда
					МодулиОбработчиков[Событие].Вставить(Обработчик.Модуль, Истина);
				Иначе
					ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Ошибка при подготовке обработчиков события
						           |""%1"".
						           |
						           |Модуль ""%2"" уже добавлен.'"),
						Событие,
						Обработчик.Модуль);
				КонецЕсли;
				Обработчики.Добавить(Новый ФиксированнаяСтруктура(Обработчик));
				
				// Проверка, что один и тот же обработчик указан для событий только один раз.
				ИмяПроцедуры = Сред(Событие, Найти(Событие, "\") + 1);
				ИмяОбработчика = Обработчик.Модуль + "." + ИмяПроцедуры;
				
				Если СобытияОбработчиков[ИмяОбработчика] = Неопределено Тогда
					СобытияОбработчиков.Вставить(ИмяОбработчика, Событие);
				Иначе
					ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Ошибка при подготовке обработчиков события
						           |""%1"".
						           |
						           |Обработчик ""%2"" уже добавлен для события
						           |""%3"".'"),
						Событие,
						ИмяОбработчика,
						СобытияОбработчиков[ИмяОбработчика]);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	// Фиксация массивов обработчиков.
	Для каждого КлючИЗначение Из ОбработчикиСобытий Цикл
		ОбработчикиСобытий[КлючИЗначение.Ключ] = Новый ФиксированныйМассив(КлючИЗначение.Значение);
	КонецЦикла;
	
	Возврат Новый ФиксированноеСоответствие(ОбработчикиСобытий);
	
КонецФункции

// Выполняет проверку состава плана обмена на наличие обязательных объектов метаданных
// и объектов-исключений из состава плана обмена.
//
// Параметры:
//  ИмяПланаОбмена – Строка, ПланОбменаСсылка. Имя плана обмена или ссылка на узел плана обмена,
//  для которого необходимо выполнить проверку.
//
Процедура ПроверитьСоставПланаОбмена(Знач ИмяПланаОбмена) Экспорт
	
	Если ТипЗнч(ИмяПланаОбмена) <> Тип("Строка") Тогда
		ИмяПланаОбмена = ИмяПланаОбмена.Метаданные().Имя;
	КонецЕсли;
	
	РаспределеннаяИнформационнаяБаза = Метаданные.ПланыОбмена[ИмяПланаОбмена].РаспределеннаяИнформационнаяБаза;
	СоставПланаОбмена = Метаданные.ПланыОбмена[ИмяПланаОбмена].Состав;
	
	ВключитьВСостав = Новый Массив;
	ИсключитьИзСостава = Новый Массив;
	ОтключитьАвторегистрацию = Новый Массив;
	
	// Получаем список обязательных объектов и объектов-исключений
	ОбязательныеОбъекты = Новый Массив;
	ОбъектыИсключения = Новый Массив;
	ОбъектыНачальногоОбраза = Новый Массив;
	
	// Получаем обязательные объекты
	ОбработчикиСобытия = ОбщегоНазначения.ОбработчикиСлужебногоСобытия(
		"СтандартныеПодсистемы.БазоваяФункциональность\ПриПолученииОбязательныхОбъектовПланаОбмена");
	Для Каждого Обработчик Из ОбработчикиСобытия Цикл
		
		ПризнакРаспределеннаяИнформационнаяБаза = РаспределеннаяИнформационнаяБаза;
		
		Обработчик.Модуль.ПриПолученииОбязательныхОбъектовПланаОбмена(ОбязательныеОбъекты, ПризнакРаспределеннаяИнформационнаяБаза);
	КонецЦикла;
	
	// Получаем объекты-исключения
	ОбработчикиСобытия = ОбщегоНазначения.ОбработчикиСлужебногоСобытия(
		"СтандартныеПодсистемы.БазоваяФункциональность\ПриПолученииОбъектовИсключенийПланаОбмена");
	Для Каждого Обработчик Из ОбработчикиСобытия Цикл
		
		ПризнакРаспределеннаяИнформационнаяБаза = РаспределеннаяИнформационнаяБаза;
		
		Обработчик.Модуль.ПриПолученииОбъектовИсключенийПланаОбмена(ОбъектыИсключения, ПризнакРаспределеннаяИнформационнаяБаза);
	КонецЦикла;
	
	Если ПризнакРаспределеннаяИнформационнаяБаза Тогда
		
		// Получаем объекты начального образа
		ОбработчикиСобытия = ОбщегоНазначения.ОбработчикиСлужебногоСобытия(
			"СтандартныеПодсистемы.БазоваяФункциональность\ПриПолученииОбъектовНачальногоОбразаПланаОбмена");
		Для Каждого Обработчик Из ОбработчикиСобытия Цикл
			
			Обработчик.Модуль.ПриПолученииОбъектовНачальногоОбразаПланаОбмена(ОбъектыНачальногоОбраза);
			
		КонецЦикла;
		
		Для Каждого Объект Из ОбъектыНачальногоОбраза Цикл
			
			ОбязательныеОбъекты.Добавить(Объект);
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Проверяем список обязательных объектов для состава плана обмена
	Для Каждого Объект Из ОбязательныеОбъекты Цикл
		
		Если СоставПланаОбмена.Найти(Объект) = Неопределено Тогда
			
			ВключитьВСостав.Добавить(Объект);
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Проверяем список объектов-исключений из состава плана обмена
	Для Каждого Объект Из ОбъектыИсключения Цикл
		
		Если СоставПланаОбмена.Найти(Объект) <> Неопределено Тогда
			
			ИсключитьИзСостава.Добавить(Объект);
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Проверяем признак авторегистрации
	// Авторегистрация должна быть отключена у всех объектов начального образа
	Для Каждого ЭлементСостава Из СоставПланаОбмена Цикл
		
		Если ОбъектыНачальногоОбраза.Найти(ЭлементСостава.Метаданные) <> Неопределено
			И ЭлементСостава.АвтоРегистрация <> АвтоРегистрацияИзменений.Запретить Тогда
			
			ОтключитьАвторегистрацию.Добавить(ЭлементСостава.Метаданные);
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Формируем и выводим текст исключения при необходимости
	Если ВключитьВСостав.Количество() <> 0
		ИЛИ ИсключитьИзСостава.Количество() <> 0
		ИЛИ ОтключитьАвторегистрацию.Количество() <> 0 Тогда
		
		Если ВключитьВСостав.Количество() <> 0 Тогда
			
			ОписаниеИсключения1 = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'В состав плана обмена %1 должны входить следующие объекты метаданных: %2'"),
				ИмяПланаОбмена,
				СтроковыеФункцииКлиентСервер.ПолучитьСтрокуИзМассиваПодстрок(ПредставлениеОбъектовМетаданных(ВключитьВСостав), ", "));
			
		КонецЕсли;
		
		Если ИсключитьИзСостава.Количество() <> 0 Тогда
			
			ОписаниеИсключения2 = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'В состав плана обмена %1 НЕ должны входить следующие объекты метаданных: %2'"),
				ИмяПланаОбмена,
				СтроковыеФункцииКлиентСервер.ПолучитьСтрокуИзМассиваПодстрок(ПредставлениеОбъектовМетаданных(ИсключитьИзСостава), ", "));
			
		КонецЕсли;
		
		Если ОтключитьАвторегистрацию.Количество() <> 0 Тогда
			
			ОписаниеИсключения3 = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'В составе плана обмена %1 не должно быть объектов с установленным признаком авторегистрации.
				|Требуется запретить авторегистрацию для следующих объектов метаданных: %2'"),
				ИмяПланаОбмена,
				СтроковыеФункцииКлиентСервер.ПолучитьСтрокуИзМассиваПодстрок(ПредставлениеОбъектовМетаданных(ОтключитьАвторегистрацию), ", "));
			
		КонецЕсли;
		
		ОписаниеИсключения = "[ОписаниеИсключения1]
		|
		|[ОписаниеИсключения2]
		|
		|[ОписаниеИсключения3]
		|";
		
		ОписаниеИсключения = СтрЗаменить(ОписаниеИсключения, "[ОписаниеИсключения1]", ОписаниеИсключения1);
		ОписаниеИсключения = СтрЗаменить(ОписаниеИсключения, "[ОписаниеИсключения2]", ОписаниеИсключения2);
		ОписаниеИсключения = СтрЗаменить(ОписаниеИсключения, "[ОписаниеИсключения3]", ОписаниеИсключения3);
		
		ВызватьИсключение СокрЛП(ОписаниеИсключения);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПредставлениеОбъектовМетаданных(Объекты)
	
	Результат = Новый Массив;
	
	Для Каждого Объект Из Объекты Цикл
		
		Результат.Добавить(Объект.ПолноеИмя());
		
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

// Только для внутреннего использования.
Процедура ЗагрузитьОбновитьПараметрыРаботыПрограммы(ОшибкаУстановкиМонопольногоРежима = Неопределено) Экспорт
	
	ВыполнитьЗагрузку = Истина;
	
	Если НЕ НеобходимоОбновлениеПараметровРаботыПрограммы(ВыполнитьЗагрузку) Тогда
		Возврат;
	КонецЕсли;
	
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено()
	   И ОбщегоНазначенияПовтИсп.ДоступноИспользованиеРазделенныхДанных() Тогда
		ВызватьИсключение
			НСтр("ru = 'Обновление параметров работы программы не может
			           |быть выполнено в разделенном режиме модели сервиса.'");
	КонецЕсли;
	
	Если СтандартныеПодсистемыПовтИсп.ОтключитьСправочникИдентификаторыОбъектовМетаданных() Тогда
		ВыполнитьЗагрузку = Ложь;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	СнятьМонопольныйРежим = Ложь;
	Попытка
		Если ВыполнитьЗагрузку
		   И ОбщегоНазначения.ЭтоПодчиненныйУзелРИБ() Тогда
			// Есть РИБ-обмен данными и обновление в подчиненном узле ИБ.
			
			// Предварительное обновление кэша служебных событий.
			Константы.ПараметрыСлужебныхСобытий.СоздатьМенеджерЗначения().Обновить();
			
			СтандартнаяОбработка = Истина;
			ОбщегоНазначенияПереопределяемый.ПередЗагрузкойИдентификаторовОбъектовМетаданныхВПодчиненномРИБУзле(
				СтандартнаяОбработка);
			
			Если СтандартнаяОбработка = Истина
			   И ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.ОбменДанными") Тогда
				
				Если НЕ МонопольныйРежим() Тогда
					Попытка
						УстановитьМонопольныйРежим(Истина);
						СнятьМонопольныйРежим = Истина;
					Исключение
						Если ОшибкаУстановкиМонопольногоРежима <> Неопределено Тогда
							ОшибкаУстановкиМонопольногоРежима =
								НСтр("ru = 'Невозможно выполнить обновление информационной базы:
								           |- Невозможно установить монопольный режим
								           |- Версия конфигурации не предусматривает обновление без установки монопольного режима.'");
						КонецЕсли;
						ВызватьИсключение ОшибкаУстановкиМонопольногоРежима;
					КонецПопытки;
				КонецЕсли;
				
				// Загрузка идентификаторов объектов метаданных из главного узла.
				МодульОбменДаннымиСервер = ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ОбменДаннымиСервер");
				МодульОбменДаннымиСервер.ПередПроверкойИдентификаторовОбъектовМетаданныхВПодчиненномУзлеРИБ();
			КонецЕсли;
			
			// Проверка загрузки идентификаторов объектов метаданных из главного узла.
			СписокКритичныхИзменений = "";
			Попытка
				Справочники.ИдентификаторыОбъектовМетаданных.ВыполнитьОбновлениеДанных(, , Истина, , , СписокКритичныхИзменений);
			Исключение
				Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.ОбменДанными") Тогда
					// Сброс кэша сообщения обмена.
					МодульОбменДаннымиСервер.ПриОшибкеПроверкиИдентификаторовОбъектовМетаданныхВПодчиненномУзлеРИБ();
				КонецЕсли;
				
				ВызватьИсключение;
			КонецПопытки;
			
			Если ЗначениеЗаполнено(СписокКритичныхИзменений) Тогда
				
				ЗаписьЖурналаРегистрации(
					НСтр("ru = 'Идентификаторы объектов метаданных.Требуется загрузить критичные изменения'",
						ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
					УровеньЖурналаРегистрации.Ошибка,
					,
					,
					СписокКритичныхИзменений);
				
				Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.ОбменДанными") Тогда
					// Сброс кэша сообщения обмена, вызов исключения с пояснением дальнейших действий.
					МодульОбменДаннымиСервер.ПриОшибкеПроверкиИдентификаторовОбъектовМетаданныхВПодчиненномУзлеРИБ(Истина);
				КонецЕсли;
				
				ТекстОшибки =
					НСтр("ru = 'Из главного узла не загружены изменения справочника ""Идентификаторы объектов метаданных"":
					           |при проверке обнаружено, что требуется загрузить критичные изменения (см. подробности в журнале
					           |регистрации в событии ""Идентификаторы объектов метаданных.Требуется загрузить критичные изменения"").'");
				
				ВызватьИсключение ТекстОшибки;
			КонецЕсли;
		КонецЕсли;
		
		// Нет РИБ-обмена данными
		// или обновление в главном узле ИБ
		// или обновление при первом запуске подчиненного узла
		// или обновление после загрузки справочника "Идентификаторы объектов метаданных" из главного узла.
		ОбновитьВсеПараметрыРаботыПрограммы( , , ОшибкаУстановкиМонопольногоРежима);
	Исключение
		Если СнятьМонопольныйРежим Тогда
			УстановитьМонопольныйРежим(Ложь);
		КонецЕсли;
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Обновляет кэши свойств метаданных, позволяющие ускорить
// открытие сеанса, а также обновление ИБ, особенно в модели сервиса.
// Их обновление происходит до обновления ИБ.
//
// Для использования в других библиотеках.
//
Процедура ОбновитьВсеПараметрыРаботыПрограммы(НайтиИзменения = Ложь,
                                              ЕстьИзменения = Неопределено,
                                              ОшибкаУстановкиМонопольногоРежима = Неопределено) Экспорт
	
	ЕстьИзменения  = Ложь;
	ТолькоПроверка = Ложь;
	СнятьМонопольныйРежим = Ложь;
	
	Если НайтиИзменения Тогда
		ТолькоПроверка = Истина;
		
	ИначеЕсли НЕ МонопольныйРежим() Тогда
		Попытка
			УстановитьМонопольныйРежим(Истина);
			СнятьМонопольныйРежим = Истина;
		Исключение
			СнятьМонопольныйРежим = Ложь;
			ТолькоПроверка = Истина;
		КонецПопытки;
	КонецЕсли;
	
	БезИзменений = Новый Структура;
	Попытка
		ПроверитьОбновитьВсеПараметрыРаботыПрограммы(ЕстьИзменения, ТолькоПроверка, БезИзменений);
	Исключение
		Если СнятьМонопольныйРежим Тогда
			УстановитьМонопольныйРежим(Ложь);
		КонецЕсли;
		ВызватьИсключение;
	КонецПопытки;
	
	Если СнятьМонопольныйРежим Тогда
		УстановитьМонопольныйРежим(Ложь);
	КонецЕсли;
	
	Если НЕ НайтиИзменения И ТолькоПроверка Тогда
		Если ЕстьИзменения Тогда
			Попытка
				УстановитьМонопольныйРежим(Истина);
			Исключение
				ТекстОшибки =
					НСтр("ru = 'Невозможно выполнить обновление информационной базы:
					           |- Невозможно установить монопольный режим
					           |- Версия конфигурации не предусматривает обновление без установки монопольного режима.'");
				
				Если ОшибкаУстановкиМонопольногоРежима = Неопределено Тогда
					ВызватьИсключение ТекстОшибки;
				Иначе
					ОшибкаУстановкиМонопольногоРежима = ТекстОшибки;
					Возврат;
				КонецЕсли;
			КонецПопытки;
			Попытка
				ОбновитьВсеПараметрыРаботыПрограммы(ЕстьИзменения, Ложь);
			Исключение
				УстановитьМонопольныйРежим(Ложь);
				ВызватьИсключение;
			КонецПопытки;
			УстановитьМонопольныйРежим(Ложь);
		Иначе
			// Монопольный режим не требуется.
			ПроверитьОбновитьВсеПараметрыРаботыПрограммы(ЕстьИзменения, Ложь, БезИзменений);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьОбновитьВсеПараметрыРаботыПрограммы(ЕстьИзменения, ТолькоПроверка, БезИзменений = Неопределено)
	
	Если ТипЗнч(БезИзменений) <> Тип("Структура") Тогда
		БезИзменений = Новый Структура;
	КонецЕсли;
	
	// СтандартныеПодсистемы.БазоваяФункциональность
	Если НЕ БезИзменений.Свойство("БазоваяФункциональностьСлужебныеСобытия") Тогда
		ЕстьТекущиеИзменения = Ложь;
		Константы.ПараметрыСлужебныхСобытий.СоздатьМенеджерЗначения().Обновить(ЕстьТекущиеИзменения, ТолькоПроверка);
		Если ЕстьТекущиеИзменения Тогда
			ЕстьИзменения = Истина;
		Иначе
			БезИзменений.Вставить("БазоваяФункциональностьСлужебныеСобытия");
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ СтандартныеПодсистемыПовтИсп.ОтключитьСправочникИдентификаторыОбъектовМетаданных() Тогда
		Если ТолькоПроверка И НЕ ЕстьИзменения Тогда
			// Проверка только критичных изменений: добавление, удаление или переименование объектов метаданных.
			Справочники.ИдентификаторыОбъектовМетаданных.ВыполнитьОбновлениеДанных(, ЕстьИзменения, ТолькоПроверка, ЕстьИзменения, ЕстьИзменения);
		ИначеЕсли НЕ ТолькоПроверка Тогда
			Справочники.ИдентификаторыОбъектовМетаданных.ВыполнитьОбновлениеДанных(ЕстьИзменения);
		КонецЕсли;
	КонецЕсли;
	// Конец СтандартныеПодсистемы.БазоваяФункциональность
	
	// СтандартныеПодсистемы.Пользователи
	Если НЕ БезИзменений.Свойство("ПользователиПараметрыРаботы")
	   И НЕ (ТолькоПроверка И ЕстьИзменения) Тогда
		
		ЕстьТекущиеИзменения = Ложь;
		ПользователиСервер.ОбновитьПараметрыРаботыПользователей(ЕстьТекущиеИзменения, ТолькоПроверка);
		Если ЕстьТекущиеИзменения Тогда
			ЕстьИзменения = Истина;
		Иначе
			БезИзменений.Вставить("ПользователиПараметрыРаботы");
		КонецЕсли;
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Пользователи
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступомСлужебный = ОбщегоНазначенияКлиентСервер.ОбщийМодуль("УправлениеДоступомСлужебный");
		
		Если НЕ БезИзменений.Свойство("УправлениеДоступомПараметрыОграниченияДоступа")
		   И НЕ (ТолькоПроверка И ЕстьИзменения) Тогда
			
			ЕстьТекущиеИзменения = Ложь;
			МодульУправлениеДоступомСлужебный.ОбновитьПараметрыОграниченияДоступа(ЕстьТекущиеИзменения, ТолькоПроверка);
			Если ЕстьТекущиеИзменения Тогда
				ЕстьИзменения = Истина;
			Иначе
				БезИзменений.Вставить("УправлениеДоступомПараметрыОграниченияДоступа");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

// Доопределяет события, к которым можно будет добавить обработчики
// через процедуру ПриДобавленииОбработчиковСлужебныхСобытий.
//
// Параметры:
//  КлиентскиеСобытия – Массив, где значения типа Строка - полное имя события.
//  СерверныеСобытия  – Массив, где значения типа Строка - полное имя события.
//
// Для упрощения поддержки, рекомендуется делать вызов такой же
// процедуры в общем модуле библиотеки.
//
// Пример использования в общем модуле библиотеки:
//
//	// Переопределяет стандартное предупреждение открытием произвольной формы активных пользователей.
//	//
//	// Параметры:
//	//  ИмяФормы - Строка (возвращаемое значение).
//	//
//	// Синтаксис:
//	// Процедура ПриОткрытииФормыАктивныхПользователей(ИмяФормы) Экспорт
//	//
//	СерверныеСобытия.Добавить(
//		"СтандартныеПодсистемы.БазоваяФункциональность\ПриОпределенииФормыАктивныхПользователей");
//
// Комментарий можно копировать при создании нового обработчика.
// Раздел "Синтаксис:" используется для создания новой процедуры обработчика.
//
Процедура ПриДобавленииСлужебныхСобытий(КлиентскиеСобытия, СерверныеСобытия) Экспорт
	
	// СЕРВЕРНЫЕ СОБЫТИЯ.
	
	// СтандартныеПодсистемы.БазоваяФункциональность
	ПриДобавленииСлужебныхСобытийБазовойФункциональности(КлиентскиеСобытия, СерверныеСобытия);
	// Конец СтандартныеПодсистемы.БазоваяФункциональность
	
	// СтандартныеПодсистемы.БизнесПроцессыИЗадачи
	Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.БизнесПроцессыИЗадачи") Тогда
		МодульБизнесПроцессыИЗадачиСервер = ОбщегоНазначенияКлиентСервер.ОбщийМодуль("БизнесПроцессыИЗадачиСервер");
		МодульБизнесПроцессыИЗадачиСервер.ПриДобавленииСлужебныхСобытий(КлиентскиеСобытия, СерверныеСобытия);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.БизнесПроцессыИЗадачи
	
	// СтандартныеПодсистемы.КалендарныеГрафики
	Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.КалендарныеГрафики") Тогда
		МодульКалендарныеГрафики = ОбщегоНазначенияКлиентСервер.ОбщийМодуль("КалендарныеГрафики");
		МодульКалендарныеГрафики.ПриДобавленииСлужебныхСобытий(КлиентскиеСобытия, СерверныеСобытия);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.КалендарныеГрафики
	
	// СтандартныеПодсистемы.НапоминанияПользователя
	Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.НапоминанияПользователя") Тогда
		МодульНапоминанияПользователяСлужебный = ОбщегоНазначенияКлиентСервер.ОбщийМодуль("НапоминанияПользователяСлужебный");
		МодульНапоминанияПользователяСлужебный.ПриДобавленииСлужебныхСобытий(КлиентскиеСобытия, СерверныеСобытия);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.НапоминанияПользователя
	
	// СтандартныеПодсистемы.ОбменДанными
	Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.ОбменДанными") Тогда
		МодульОбменДаннымиСервер = ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ОбменДаннымиСервер");
		МодульОбменДаннымиСервер.ПриДобавленииСлужебныхСобытий(КлиентскиеСобытия, СерверныеСобытия);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ОбменДанными
	
	// СтандартныеПодсистемы.ОбновлениеВерсииИБ
	ОбновлениеИнформационнойБазы.ПриДобавленииСлужебныхСобытий(КлиентскиеСобытия, СерверныеСобытия);
	// Конец СтандартныеПодсистемы.ОбновлениеВерсииИБ
	
	// СтандартныеПодсистемы.Пользователи
	//ПользователиСлужебный.ПриДобавленииСлужебныхСобытий(КлиентскиеСобытия, СерверныеСобытия);
	// Конец СтандартныеПодсистемы.Пользователи
	
	// СтандартныеПодсистемы.ПрисоединенныеФайлы
	Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.ПрисоединенныеФайлы") Тогда
		//МодульПрисоединенныеФайлыСлужебный = ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ПрисоединенныеФайлыСлужебный");
		//МодульПрисоединенныеФайлыСлужебный.ПриДобавленииСлужебныхСобытий(КлиентскиеСобытия, СерверныеСобытия);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПрисоединенныеФайлы
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса
	Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса") Тогда
		МодульРаботаВМоделиСервиса = ОбщегоНазначенияКлиентСервер.ОбщийМодуль("РаботаВМоделиСервиса");
		МодульРаботаВМоделиСервиса.ПриДобавленииСлужебныхСобытий(КлиентскиеСобытия, СерверныеСобытия);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса.ВыгрузкаЗагрузкаДанных
	Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса.ВыгрузкаЗагрузкаДанных") Тогда
		МодульВыгрузкаЗагрузкаДанных = ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ВыгрузкаЗагрузкаДанных");
		МодульВыгрузкаЗагрузкаДанных.ПриДобавленииСлужебныхСобытий(КлиентскиеСобытия, СерверныеСобытия);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.ВыгрузкаЗагрузкаДанных
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса.ОбменСообщениями
	Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса.ОбменСообщениями") Тогда
		МодульОбменСообщениями = ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ОбменСообщениями");
		МодульОбменСообщениями.ПриДобавленииСлужебныхСобытий(КлиентскиеСобытия, СерверныеСобытия);
		МодульИнтерфейсыСообщенийВМоделиСервиса = ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ИнтерфейсыСообщенийВМоделиСервиса");
		МодульИнтерфейсыСообщенийВМоделиСервиса.ПриДобавленииСлужебныхСобытий(КлиентскиеСобытия, СерверныеСобытия);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.ОбменСообщениями
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса.ОчередьЗаданий
	Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса.ОчередьЗаданий") Тогда
		МодульОчередьЗаданийСлужебный = ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ОчередьЗаданийСлужебный");
		МодульОчередьЗаданийСлужебный.ПриДобавленииСлужебныхСобытий(КлиентскиеСобытия, СерверныеСобытия);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.ОчередьЗаданий
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса.ПоставляемыеДанные
	Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса.ПоставляемыеДанные") Тогда
		МодульПоставляемыеДанные = ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ПоставляемыеДанные");
		МодульПоставляемыеДанные.ПриДобавленииСлужебныхСобытий(КлиентскиеСобытия, СерверныеСобытия);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.ПоставляемыеДанные
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступомСлужебный = ОбщегоНазначенияКлиентСервер.ОбщийМодуль("УправлениеДоступомСлужебный");
		МодульУправлениеДоступомСлужебный.ПриДобавленииСлужебныхСобытий(КлиентскиеСобытия, СерверныеСобытия);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ФайловыеФункции
	Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.ФайловыеФункции") Тогда
		//МодульФайловыеФункцииСлужебный = ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ФайловыеФункцииСлужебный");
		//МодульФайловыеФункцииСлужебный.ПриДобавленииСлужебныхСобытий(КлиентскиеСобытия, СерверныеСобытия);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ФайловыеФункции
	
КонецПроцедуры

// Объявляет служебные события подсистемы БазоваяФункциональность:
//
// Клиентские события:
//   ПередНачаломРаботыСистемы,
//   ПриНачалеРаботыСистемы,
//   ПриОбработкеПараметровЗапуска,
//   ПередЗавершениемРаботыСистемы,
//   ПриПолученииСпискаПредупрежденийЗавершенияРаботы,
//   ПриОпределенииФормыАктивныхПользователей.
//
// Серверные события:
//   ПриДобавленииОбработчиковУстановкиПараметровСеанса,
//   ПриДобавленииИсключенийПоискаСсылок,
//   ПриОпределенииПредставленияПредмета,
//   ПриДобавленииПереименованийОбъектовМетаданных,
//   ПриДобавленииПараметровРаботыКлиентаПриЗапуске,
//   ПриДобавленииПараметровРаботыКлиента,
//   ПриДобавленииПараметровРаботыКлиентаПриЗавершении,
//   ПриВключенииРазделенияПоОбластямДанных,
//   ПриОтправкеДанныхПодчиненному,
//   ПриОтправкеДанныхГлавному,
//   ПриПолученииДанныхОтПодчиненного,
//   ПриПолученииДанныхОтГлавного,
//   ПослеПолученияДанныхОтПодчиненного,
//   ПослеПолученияДанныхОтГлавного,
//   ПослеОтправкиДанныхГлавному,
//   ПослеОтправкиДанныхПодчиненному,
//   ПриОпределенииПоддерживаемыхВерсийПрограммныхИнтерфейсов.
//
Процедура ПриДобавленииСлужебныхСобытийБазовойФункциональности(КлиентскиеСобытия, СерверныеСобытия) Экспорт
	
	// КЛИЕНТСКИЕ СОБЫТИЯ.
	
	// Вызывается перед интерактивным началом работы пользователя с областью данных.
	// Соответствует событию ПередНачаломРаботыСистемы модулей приложения.
	//
	// Параметры:
	//  Отказ - Булево - отказ в от начала работы. Если параметр установить
	//          Истина, тогда начало работы с областью данных будет прервано.
	//
	// Синтаксис:
	// Процедура ПередНачаломРаботыСистемы(Отказ) Экспорт
	//
	// (То же, что ОбщегоНазначенияКлиентПереопределяемый.ПередНачаломРаботыСистемы).
	КлиентскиеСобытия.Добавить(
		"СтандартныеПодсистемы.БазоваяФункциональность\ПередНачаломРаботыСистемы");
	
	// Вызывается при интерактивном начале работы пользователя с областью данных.
	// Соответствует событию ПриНачалеРаботыСистемы модулей приложения.
	//
	// Синтаксис:
	// Процедура ПриНачалеРаботыСистемы() Экспорт
	//
	// (То же, что ОбщегоНазначенияКлиентПереопределяемый.ПриНачалеРаботыСистемы).
	КлиентскиеСобытия.Добавить(
		"СтандартныеПодсистемы.БазоваяФункциональность\ПриНачалеРаботыСистемы");
	
	// Вызывается при интерактивном начале работы пользователя с областью данных.
	//
	// Параметры:
	//  ПервыйПараметр   - Строка - первое значение параметра запуска,
	//                     до первого символа ";" в верхнем регистре.
	//  ПараметрыЗапуска – Массив – массив строк разделенных символом ";" в параметре запуска,
	//                     переданным в конфигурацию с помощью ключа командной строки /C.
	//  Отказ            - Булево (возвращаемое значение), если установить Истина,
	//                     обработка события ПриНачалеРаботыСистемы будет прервана.
	//
	// Синтаксис:
	// Процедура ПриОбработкеПараметровЗапуска(ПервыйПараметр, ПараметрыЗапуска, Отказ) Экспорт
	//
	// (То же, что ОбщегоНазначенияКлиентПереопределяемый.ОбработатьПараметрыЗапуска).
	КлиентскиеСобытия.Добавить(
		"СтандартныеПодсистемы.БазоваяФункциональность\ПриОбработкеПараметровЗапуска");
	
	// Вызывается перед интерактивным завершением работы пользователя с областью данных.
	// Соответствует событию ПередЗавершениемРаботыСистемы модулей приложения.
	//
	// Параметры:
	//  Отказ - Булево - отказ в от начала работы. Если параметр установить
	//          Истина, тогда начало работы с областью данных будет прервано.
	//
	// Синтаксис:
	// Процедура ПередЗавершениемРаботыСистемы(Отказ) Экспорт
	//
	// (То же, что ОбщегоНазначенияКлиентПереопределяемый.ПередЗавершениемРаботыСистемы).
	КлиентскиеСобытия.Добавить(
		"СтандартныеПодсистемы.БазоваяФункциональность\ПередЗавершениемРаботыСистемы");
	
	// Доопределяет список предупреждений пользователю перед завершением работы системы.
	//
	// Параметры:
	//  Предупреждения - Массив, в который можно добавить элементы типа Структура с полями:
	//    ТекстФлажка      - Строка - текст флажка.
	//    ПоясняющийТекст  - Строка - текст, выводимый в форме сверху
	//                       управляющего элемента (флажок или гиперссылка).
	//    ТекстГиперссылки - Строка - текст гиперссылки.
	//    ДействиеПриУстановленномФлажке - Структура с полями:
	//      Форма          - путь к открываемой форме.
	//      ПараметрыФормы - произвольная структура параметров формы Форма. 
	//    ДействиеПриНажатииГиперссылки - Структура с полями:
	//      Форма          - Строка    - путь к форме, которая должна открываться по нажатию на гиперссылку.
	//      ПараметрыФормы - Структура - произвольная структура параметров для вышеописанной формы.
	//      ПрикладнаяФормаПредупреждения - Строка - путь к форме, которая должна открываться сразу
	//                                      вместо универсальной формы в случае, когда в списке 
	//                                      предупреждений оказывается только одно данное предупреждение.
	//      ПараметрыПрикладнойФормыПредупреждения - Структура - произвольная структура
	//                                               параметров для вышеописанной формы.
	// Синтаксис:
	// Процедура ПриПолученииСпискаПредупрежденийЗавершенияРаботы(Предупреждения) Экспорт
	//
	КлиентскиеСобытия.Добавить(
		"СтандартныеПодсистемы.БазоваяФункциональность\ПриПолученииСпискаПредупрежденийЗавершенияРаботы");
	
	// Переопределяет стандартное предупреждение открытием произвольной формы активных пользователей.
	//
	// Параметры:
	//  ИмяФормы - Строка (возвращаемое значение).
	//
	// Синтаксис:
	// Процедура ПриОткрытииФормыАктивныхПользователей(ИмяФормы) Экспорт
	//
	КлиентскиеСобытия.Добавить(
		"СтандартныеПодсистемы.БазоваяФункциональность\ПриОпределенииФормыАктивныхПользователей");
	
	// СЕРВЕРНЫЕ СОБЫТИЯ.
	
	// Доопределяет обработчики установки параметров сеанса.
	//
	// Параметры:
	//  Обработчики - Соответствие, где
	//                Ключ     - Строка - <ИмяПараметраСеанса> или <НачалоИмениПараметраСеанса*>.
	//                Значение - Строка - полное имя обработчика.
	//
	//  Примечание. Символ '*'используется в конце имени параметра сеанса и обозначает,
	//              что один обработчик будет вызван для инициализации всех параметров сеанса
	//              с именем, начинающимся на слово НачалоИмениПараметраСеанса
	//
	// Для задания обработчиков параметров сеанса следует использовать шаблон:
	// Обработчики.Вставить("<ИмяПараметраСеанса>|<НачалоИмениПараметраСеанса*>", "Обработчик");
	//
	// Синтаксис:
	// Процедура ПриДобавленииОбработчиковУстановкиПараметровСеанса(Обработчики) Экспорт
	//
	// (То же, что ОбщегоНазначенияПереопределяемый.ОбработчикиИнициализацииПараметровСеанса).
	СерверныеСобытия.Добавить(
		"СтандартныеПодсистемы.БазоваяФункциональность\ПриДобавленииОбработчиковУстановкиПараметровСеанса");
	
	// Доопределяет список объектов метаданных, содержимое которых не должно учитывается в бизнес-логике приложения.
	//
	// Описание:
	//   Для документа "Реализация товаров и услуг" настроены подсистемы "Версионирование объектов" и "Свойства".
	//   При этом документ может быть указан в других объектах метаданных - документах или регистрах.
	//   Часть ссылок имеют значение для бизнес-логики (например движения по регистрам) и должны выводиться пользователю.
	//   Другая часть ссылок - "техногенные" ссылки на документ из данных подсистем "Версионирование объектов" и "Свойства",
	//     должны скрываться от пользователя при поиске ссылок на объект. 
	//     Например, в обработке удаления помеченных или в подсистеме запрета редактирования ключевых реквизитов.
	//   Список таких "техногенных" объектов нужно перечислить в этой функции.
	//
	// Важно:
	//   Для избежания появления пустых "битых" ссылок рекомендуется предусмотреть процедуру очистки указанных объектов метаданных.
	//   Для измерений регистров сведений - с помощью установки флажка "Ведущее",
	//     тогда запись регистра сведений будет удалена вместе с удалением ссылки, указанной в измерении.
	//   Для других реквизитов указанных объектов - с помощью подписки на событие ПередУдалением всех типов объектов метаданных,
	//     которые могут быть записаны в реквизиты указанных объектов метаданных.
	//     В обработчике необходимо найти "техногенные" объекты, в реквизитах которых указана ссылка удаляемого объекта,
	//     и выбрать как именно очищать ссылку: очищать значение реквизита, удалять строку таблицы или удалять весь объект.
	//
	// Параметры:
	//   Исключения (Массив) из
	//       |- (ОбъектМетаданных) Объект метаданных или его реквизит, например:
	//              Массив.Добавить(Метаданные.РегистрыСведений.ВерсииОбъектов);
	//              Массив.Добавить(Метаданные.РегистрыСведений.ВерсииОбъектов.Реквизиты.АвторВерсии);
	//       |- (Строка) Полное имя объекта метаданных, например:
	//              Массив.Добавить("РегистрСведений.ВерсииОбъектов");
	//
	// Синтаксис:
	// Процедура ПриДобавленииИсключенийПоискаСсылок(Исключения) Экспорт
	//
	// (То же, что ОбщегоНазначенияПереопределяемый.ПолучитьИсключенияПоискаСсылок).
	СерверныеСобытия.Добавить(
		"СтандартныеПодсистемы.БазоваяФункциональность\ПриДобавленииИсключенийПоискаСсылок");
	
	// Переопределяет текстовое описание предмета.
	//
	// Параметры:
	//  СсылкаНаПредмет – ЛюбаяСсылка – объект ссылочного типа.
	//  Представление   - Строка (возвращаемое значение) - произвольное текстовое описание.
	//
	// Синтаксис:
	// Процедура ПриОпределенииПредставленияПредмета(СсылкаНаПредмет, Представление) Экспорт
	//
	// (То же, что ОбщегоНазначенияПереопределяемый.УстановитьПредставлениеПредмета).
	СерверныеСобытия.Добавить(
		"СтандартныеПодсистемы.БазоваяФункциональность\ПриОпределенииПредставленияПредмета");
	
	
	// Доопределяет переименования тех объектов метаданных, которые невозможно
	// автоматически найти по типу, но ссылки на которые требуется сохранять
	// в базе данных (например: подсистемы, роли).
	//
	// Подробнее см. комментарий к процедуре ОбщегоНазначения.ДобавитьПереименование().
	//
	// Синтаксис:
	// Процедура ПриДобавленииПереименованийОбъектовМетаданных(Итог) Экспорт
	//
	// (То же, что ОбщегоНазначенияПереопределяемый.ЗаполнитьТаблицуПереименованияОбъектовМетаданных).
	СерверныеСобытия.Добавить(
		"СтандартныеПодсистемы.БазоваяФункциональность\ПриДобавленииПереименованийОбъектовМетаданных");
	
	// Доопределяет структуру параметров, необходимых для работы клиентского кода
	// при запуске конфигурации, т.е. в обработчиках событий
	// - ПередНачаломРаботыСистемы,
	// - ПриНачалеРаботыСистемы.
	//
	// Важно: при запуске недопустимо использовать команды сброса кэша
	// повторно используемых модулей, иначе запуск может привести
	// к непредсказуемым ошибкам или лишним серверным вызовам.
	//
	// Параметры:
	//   Параметры - Структура, в которую можно вставить параметры работы клиента при запуске.
	//                 Ключ     - имя параметра,
	//                 Значение - значение параметра.
	//
	// Пример использования:
	//   Параметры.Вставить(<ИмяПараметра>, <Код получения значения параметра>);
	//
	// Синтаксис:
	// Процедура ПриДобавленииПараметровРаботыКлиентаПриЗапуске(Параметры) Экспорт
	//
	// (То же, что ОбщегоНазначенияПереопределяемый.ПараметрыРаботыКлиентаПриЗапуске).
	СерверныеСобытия.Добавить(
		"СтандартныеПодсистемы.БазоваяФункциональность\ПриДобавленииПараметровРаботыКлиентаПриЗапуске");
	
	// Доопределяет структуру параметров, необходимых для работы клиентского кода
	// конфигурации.
	//
	// Параметры:
	//   Параметры - Структура, в которую можно вставить параметры работы клиента при запуске.
	//                 Ключ     - имя параметра,
	//                 Значение - значение параметра.
	//
	// Пример использования:
	//   Параметры.Вставить(<ИмяПараметра>, <Код получения значения параметра>);
	//
	// Синтаксис:
	// Процедура ПриДобавленииПараметровРаботыКлиента(Параметры) Экспорт
	//
	// (То же, что ОбщегоНазначенияПереопределяемый.ПараметрыРаботыКлиента).
	СерверныеСобытия.Добавить(
		"СтандартныеПодсистемы.БазоваяФункциональность\ПриДобавленииПараметровРаботыКлиента");
	
	// Доопределяет структуру параметров, необходимых для работы клиентского кода
	// конфигурации при завершении, т.е. в обработчиках:
	// - ПередЗавершениемРаботыСистемы,
	// - ПриЗавершенииРаботыСистемы.
	//
	// Параметры:
	//   Параметры - Структура, в которую можно вставить параметры работы клиента при запуске.
	//                 Ключ     - имя параметра,
	//                 Значение - значение параметра.
	//
	// Пример использования:
	//   Параметры.Вставить(<ИмяПараметра>, <Код получения значения параметра>);
	//
	// Синтаксис:
	// Процедура ПриДобавленииПараметровРаботыКлиентаПриЗавершении(Параметры) Экспорт
	//
	// (То же, что ОбщегоНазначенияПереопределяемый.ПараметрыРаботыКлиентаПриЗавершении).
	СерверныеСобытия.Добавить(
		"СтандартныеПодсистемы.БазоваяФункциональность\ПриДобавленииПараметровРаботыКлиентаПриЗавершении");
	
	// Вызывается при включении разделения данных по областям данных.
	//
	СерверныеСобытия.Добавить(
		"СтандартныеПодсистемы.БазоваяФункциональность\ПриВключенииРазделенияПоОбластямДанных");
	
	// Процедура является обработчиком одноименного события, возникающего при обмене данными в распределенной информационной базе.
	//
	// Параметры:
	// см. описание обработчика события ПриОтправкеДанныхПодчиненному() в синтаксис-помощнике.
	//
	// Синтаксис:
	// Процедура ПриОтправкеДанныхПодчиненному(ЭлементДанных, ОтправкаЭлемента, СозданиеНачальногоОбраза, Получатель) Экспорт
	//
	СерверныеСобытия.Добавить("СтандартныеПодсистемы.БазоваяФункциональность\ПриОтправкеДанныхПодчиненному");
	
	// Процедура является обработчиком одноименного события, возникающего при обмене данными в распределенной информационной базе.
	//
	// Параметры:
	// см. описание обработчика события ПриОтправкеДанныхГлавному() в синтаксис-помощнике.
	//
	// Синтаксис:
	// Процедура ПриОтправкеДанныхГлавному(ЭлементДанных, ОтправкаЭлемента, Получатель) Экспорт
	//
	СерверныеСобытия.Добавить("СтандартныеПодсистемы.БазоваяФункциональность\ПриОтправкеДанныхГлавному");
	
	// Процедура является обработчиком одноименного события, возникающего при обмене данными в распределенной информационной базе.
	//
	// Параметры:
	// см. описание обработчика события ПриПолученииДанныхОтПодчиненного() в синтаксис-помощнике.
	//
	// Синтаксис:
	// Процедура ПриПолученииДанныхОтПодчиненного(ЭлементДанных, ПолучениеЭлемента, ОтправкаНазад, Отправитель) Экспорт
	//
	СерверныеСобытия.Добавить("СтандартныеПодсистемы.БазоваяФункциональность\ПриПолученииДанныхОтПодчиненного");
	
	// Процедура является обработчиком одноименного события, возникающего при обмене данными в распределенной информационной базе.
	//
	// Параметры:
	// см. описание обработчика события ПриПолученииДанныхОтГлавного() в синтаксис-помощнике.
	// 
	// Синтаксис:
	// Процедура ПриПолученииДанныхОтГлавного(ЭлементДанных, ПолучениеЭлемента, ОтправкаНазад, Отправитель) Экспорт
	//
	СерверныеСобытия.Добавить("СтандартныеПодсистемы.БазоваяФункциональность\ПриПолученииДанныхОтГлавного");
	
	// Процедура-обработчик события после получения данных в главном узле от подчиненного узла распределенной ИБ.
	// Вызывается в момент завершения чтения сообщения обмена, когда все данные из сообщения обмена успешно прочитаны и записаны в ИБ.
	// 
	//  Параметры:
	// Отправитель – ПланОбменаОбъект. Объект узла плана обмена, от которого получены данные.
	// Отказ – Булево. Флаг отказа. Если установить данному параметру значение Истина,
	// то сообщение будет считаться не принятым. Также произойдет отмена транзакции загрузки данных,
	// если все данные были загружены в одной транзакции или отмена последней транзакции загрузки данных,
	// если данные были загружены порциями.
	//
	// Синтаксис:
	// Процедура ПослеПолученияДанныхОтПодчиненного(Источник = Неопределено, ЭлементДанных, ПолучениеЭлемента, ОтправкаНазад) Экспорт
	//
	СерверныеСобытия.Добавить("СтандартныеПодсистемы.БазоваяФункциональность\ПослеПолученияДанныхОтПодчиненного");
	
	// Процедура-обработчик события после получения данных в подчиненном узле от главного узла распределенной ИБ.
	// Вызывается в момент завершения чтения сообщения обмена, когда все данные из сообщения обмена успешно прочитаны и записаны в ИБ.
	// 
	//  Параметры:
	// Отправитель – ПланОбменаОбъект. Объект узла плана обмена, от которого получены данные.
	// Отказ – Булево. Флаг отказа. Если установить данному параметру значение Истина,
	// то сообщение будет считаться не принятым. Также произойдет отмена транзакции загрузки данных,
	// если все данные были загружены в одной транзакции или отмена последней транзакции загрузки данных,
	// если данные были загружены порциями.
	//
	// Синтаксис:
	// Процедура ПослеПолученияДанныхОтГлавного(Отправитель, Отказ) Экспорт
	//
	СерверныеСобытия.Добавить("СтандартныеПодсистемы.БазоваяФункциональность\ПослеПолученияДанныхОтГлавного");
	
	// Процедура-обработчик события после отправки данных из подчиненного узла в главный узел распределенной ИБ.
	// Вызывается в момент завершения записи сообщения обмена, когда все зарегистрированные изменения данных успешно выгружены в сообщение обмена.
	// 
	//  Параметры:
	// Получатель – ПланОбменаОбъект. Объект узла плана обмена, для которого формируется сообщение обмена.
	// Отказ – Булево. Флаг отказа. Если установить данному параметру значение Истина,
	// то сообщение не будет считаться сформированным и отправленным.
	//
	// Синтаксис:
	// Процедура ПослеОтправкиДанныхГлавному(Получатель, Отказ) Экспорт
	//
	СерверныеСобытия.Добавить("СтандартныеПодсистемы.БазоваяФункциональность\ПослеОтправкиДанныхГлавному");
	
	// Процедура-обработчик события после отправки данных из главного узла в подчиненный узел распределенной ИБ.
	// Вызывается в момент завершения записи сообщения обмена, когда все зарегистрированные изменения данных успешно выгружены в сообщение обмена.
	// 
	//  Параметры:
	// Получатель – ПланОбменаОбъект. Объект узла плана обмена, для которого формируется сообщение обмена.
	// Отказ – Булево. Флаг отказа. Если установить данному параметру значение Истина,
	// то сообщение не будет считаться сформированным и отправленным.
	//
	// Синтаксис:
	// Процедура ПослеОтправкиДанныхПодчиненному(Получатель, Отказ) Экспорт
	//
	СерверныеСобытия.Добавить("СтандартныеПодсистемы.БазоваяФункциональность\ПослеОтправкиДанныхПодчиненному");
	
	// Заполняет структуру массивами поддерживаемых версий всех подлежащих версионированию подсистем,
	// используя в качестве ключей названия подсистем.
	// Обеспечивает функциональность Web-сервиса InterfaceVersion.
	// При внедрении надо поменять тело процедуры так, чтобы она возвращала актуальные наборы версий (см. пример.ниже).
	//
	// Параметры:
	// СтруктураПоддерживаемыхВерсий - Структура: 
	//  - Ключи = Названия подсистем. 
	//  - Значения = Массивы названий поддерживаемых версий.
	//
	// Пример реализации:
	//
	//  // СервисПередачиФайлов
	//  МассивВерсий = Новый Массив;
	//  МассивВерсий.Добавить("1.0.1.1");
	//  МассивВерсий.Добавить("1.0.2.1");
	//  СтруктураПоддерживаемыхВерсий.Вставить("СервисПередачиФайлов", МассивВерсий);
	//  // Конец СервисПередачиФайлов
	//
	// Синтаксис:
	// Процедура ПриОпределенииПоддерживаемыхВерсийПрограммныхИнтерфейсов(Знач СтруктураПоддерживаемыхВерсий) Экспорт
	//
	СерверныеСобытия.Добавить("СтандартныеПодсистемы.БазоваяФункциональность\ПриОпределенииПоддерживаемыхВерсийПрограммныхИнтерфейсов");
	
	// Заполняет структуру параметров, необходимых для работы клиентского кода
	// при завершении работы конфигурации, т.е. в обработчиках:
	// - ПередЗавершениемРаботыСистемы,
	// - ПриЗавершенииРаботыСистемы
	//
	// Параметры:
	//   Параметры   - Структура - структура параметров.
	//
	// Синтаксис:
	// Процедура ПриДобавленииПараметровРаботыКлиентскойЛогикиСтандартныхПодсистемПриЗавершении(Параметры) Экспорт
	//
	СерверныеСобытия.Добавить("СтандартныеПодсистемы.БазоваяФункциональность\ПриДобавленииПараметровРаботыКлиентскойЛогикиСтандартныхПодсистемПриЗавершении");
	
	// Заполняет структуру параметров, необходимых для работы клиентского кода
	// при запуске конфигурации, т.е. в обработчиках событий
	// - ПередНачаломРаботыСистемы,
	// - ПриНачалеРаботыСистемы
	//
	// Важно: при запуске недопустимо использовать команды сброса кэша
	// повторно используемых модулей, иначе запуск может привести
	// к непредсказуемым ошибкам и лишним серверным вызовам
	//
	// Параметры:
	//   Параметры   - Структура - структура параметров.
	//
	// Возвращаемое значение:
	//   Булево   - Ложь, если дальнейшее заполнение параметров необходимо прервать.
	//
	// Синтаксис:
	// Процедура ПриДобавленииПараметровРаботыКлиентскойЛогикиСтандартныхПодсистемПриЗапуске(Параметры) Экспорт
	//
	СерверныеСобытия.Добавить("СтандартныеПодсистемы.БазоваяФункциональность\ПриДобавленииПараметровРаботыКлиентскойЛогикиСтандартныхПодсистемПриЗапуске");
	
	// Заполняет структуру параметров, необходимых для работы клиентского кода
	// конфигурации.
	//
	// Параметры:
	//   Параметры   - Структура - структура параметров.
	//
	// Синтаксис:
	// Процедура ПриДобавленииПараметровРаботыКлиентскойЛогикиСтандартныхПодсистем(Параметры) Экспорт
	//
	СерверныеСобытия.Добавить("СтандартныеПодсистемы.БазоваяФункциональность\ПриДобавленииПараметровРаботыКлиентскойЛогикиСтандартныхПодсистем");
	
	// Используется для получения объектов метаданных обязательных для плана обмена.
	// Если подсистема имеет объекты метаданных обязательные для включения в состав плана обмена,
	// то в параметр <Объект> необходимо добавить эти объекты метаданных.
	//
	// Параметры:
	// Объекты – Массив. Массив объектов метаданных конфигурации, которые необходимо включить в состав плана обмена.
	// РаспределеннаяИнформационнаяБаза (только чтение) – Булево. Признак получения объектов для плана обмена РИБ.
	// Истина – требуется получить список объектов плана обмена РИБ;
	// Ложь – требуется получить список для плана обмена НЕ РИБ.
	//
	СерверныеСобытия.Добавить("СтандартныеПодсистемы.БазоваяФункциональность\ПриПолученииОбязательныхОбъектовПланаОбмена");
	
	// Используется для получения объектов метаданных, которые не следует включать в состав плана обмена.
	// Если подсистема имеет объекты метаданных, которые не следует включать в состав плана обмена,
	// то в параметр <Объект> необходимо добавить эти объекты метаданных.
	//
	// Параметры:
	// Объекты – Массив. Массив объектов метаданных конфигурации, которые не следует включать в состав плана обмена.
	// РаспределеннаяИнформационнаяБаза (только чтение) – Булево. Признак получения объектов для плана обмена РИБ.
	// Истина – требуется получить список объектов-исключений плана обмена РИБ;
	// Ложь – требуется получить список для плана обмена НЕ РИБ.
	//
	СерверныеСобытия.Добавить("СтандартныеПодсистемы.БазоваяФункциональность\ПриПолученииОбъектовИсключенийПланаОбмена");
	
	// Используется для получения объектов метаданных, которые должны входить в состав плана обмена
	// и НЕ должны входить в состав подписок на события регистрации изменений для этого плана обмена.
	// Эти объекты метаданных используются только в момент создания начального образа подчиненного узла
	// и не мигрируют в процессе обмена.
	// Если подсистема имеет объекты метаданных, которые участвуют только в создании начального образа подчиненного узла,
	// то в параметр <Объект> необходимо добавить эти объекты метаданных.
	//
	// Параметры:
	// Объекты – Массив. Массив объектов метаданных конфигурации.
	//
	СерверныеСобытия.Добавить("СтандартныеПодсистемы.БазоваяФункциональность\ПриПолученииОбъектовНачальногоОбразаПланаОбмена");
	
КонецПроцедуры

// Доопределяет обработчики служебных событий, объявленных
// через процедуру ПриДобавленииСлужебныхСобытий.
//
// Параметры:
//  КлиентскиеОбработчики – Соответствие, где
//                            Ключ     – Строка - полное имя события,
//                            Значение – Массив - массив имен клиентских общих модулей обработчиков.
//
//  СерверныеОбработчики  – Соответствие, где
//                            Ключ     – Строка - полное имя события,
//                            Значение – Массив - массив имен серверных общих модулей обработчиков.
//
// Для упрощения поддержки, рекомендуется делать вызов такой же
// процедуры в общем модуле библиотеки.
//
// Пример использования в общем модуле библиотеки:
//
//	СерверныеОбработчики[
//		"СтандартныеПодсистемы.БазоваяФункциональность\ПриОпределенииФормыАктивныхПользователей"
//			].Добавить(СоединенияИБ);
//
Процедура ПриДобавленииОбработчиковСлужебныхСобытий(КлиентскиеОбработчики, СерверныеОбработчики) Экспорт
	
	// СЕРВЕРНЫЕ ОБРАБОТЧИКИ.
	
	// СтандартныеПодсистемы.БазоваяФункциональность
	ПриДобавленииОбработчиковСлужебныхСобытийБазовойФункциональности(КлиентскиеОбработчики, СерверныеОбработчики);
	// Конец СтандартныеПодсистемы.БазоваяФункциональность
	
	// СтандартныеПодсистемы.ОбменДанными
	Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.ОбменДанными") Тогда
		МодульОбменДаннымиСервер = ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ОбменДаннымиСервер");
		МодульОбменДаннымиСервер.ПриДобавленииОбработчиковСлужебныхСобытий(КлиентскиеОбработчики, СерверныеОбработчики);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ОбменДанными
	
КонецПроцедуры

// Доопределяет обработчики подсистемы БазоваяФункциональность.
Процедура ПриДобавленииОбработчиковСлужебныхСобытийБазовойФункциональности(КлиентскиеОбработчики, СерверныеОбработчики) Экспорт
	
	// СЕРВЕРНЫЕ ОБРАБОТЧИКИ.
	
	СерверныеОбработчики[
		"СтандартныеПодсистемы.БазоваяФункциональность\ПриДобавленииПараметровРаботыКлиентскойЛогикиСтандартныхПодсистем"].Добавить(
		"СтандартныеПодсистемыСервер");
	
	СерверныеОбработчики["СтандартныеПодсистемы.ОбновлениеВерсииИБ\ПриДобавленииОбработчиковОбновления"].Добавить(
		"СтандартныеПодсистемыСервер");
	
	Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса") Тогда
		СерверныеОбработчики[
			"СтандартныеПодсистемы.РаботаВМоделиСервиса.ВыгрузкаЗагрузкаДанных\ПриОпределенииОбъектовМетаданныхИсключаемыхИзВыгрузкиЗагрузки"].Добавить(
				"СтандартныеПодсистемыСервер");
	КонецЕсли;
	
	СерверныеОбработчики["СтандартныеПодсистемы.БазоваяФункциональность\ПриПолученииОбязательныхОбъектовПланаОбмена"].Добавить(
		"СтандартныеПодсистемыСервер");
	
	СерверныеОбработчики["СтандартныеПодсистемы.БазоваяФункциональность\ПриПолученииОбъектовИсключенийПланаОбмена"].Добавить(
		"СтандартныеПодсистемыСервер");
	
	СерверныеОбработчики["СтандартныеПодсистемы.БазоваяФункциональность\ПриПолученииОбъектовНачальногоОбразаПланаОбмена"].Добавить(
		"СтандартныеПодсистемыСервер");
	
	СерверныеОбработчики["СтандартныеПодсистемы.БазоваяФункциональность\ПриДобавленииПереименованийОбъектовМетаданных"].Добавить(
		"СтандартныеПодсистемыСервер");
	
КонецПроцедуры

// Используется для получения объектов метаданных обязательных для плана обмена.
// Если подсистема имеет объекты метаданных обязательные для включения в состав плана обмена,
// то в параметр <Объект> необходимо добавить эти объекты метаданных.
//
// Параметры:
// Объекты – Массив. Массив объектов метаданных конфигурации, которые необходимо включить в состав плана обмена.
// РаспределеннаяИнформационнаяБаза (только чтение) – Булево. Признак получения объектов для плана обмена РИБ.
// Истина – требуется получить список объектов плана обмена РИБ;
// Ложь – требуется получить список для плана обмена НЕ РИБ.
//
Процедура ПриПолученииОбязательныхОбъектовПланаОбмена(Объекты, Знач РаспределеннаяИнформационнаяБаза) Экспорт
	
	Если РаспределеннаяИнформационнаяБаза Тогда
		
		//Объекты.Добавить(Метаданные.Справочники.ИдентификаторыОбъектовМетаданных);
		
	КонецЕсли;
	
КонецПроцедуры

// Используется для получения объектов метаданных, которые не следует включать в состав плана обмена.
// Если подсистема имеет объекты метаданных, которые не следует включать в состав плана обмена,
// то в параметр <Объект> необходимо добавить эти объекты метаданных.
//
// Параметры:
// Объекты – Массив. Массив объектов метаданных конфигурации, которые не следует включать в состав плана обмена.
// РаспределеннаяИнформационнаяБаза (только чтение) – Булево. Признак получения объектов для плана обмена РИБ.
// Истина – требуется получить список объектов-исключений плана обмена РИБ;
// Ложь – требуется получить список для плана обмена НЕ РИБ.
//
Процедура ПриПолученииОбъектовИсключенийПланаОбмена(Объекты, Знач РаспределеннаяИнформационнаяБаза) Экспорт
	
	Если РаспределеннаяИнформационнаяБаза Тогда
		
		Объекты.Добавить(Метаданные.Константы.ЗаголовокСистемы);
		
	КонецЕсли;
	
КонецПроцедуры

// Используется для получения объектов метаданных, которые должны входить в состав плана обмена
// и НЕ должны входить в состав подписок на события регистрации изменений для этого плана обмена.
// Эти объекты метаданных используются только в момент создания начального образа подчиненного узла
// и не мигрируют в процессе обмена.
// Если подсистема имеет объекты метаданных, которые участвуют только в создании начального образа подчиненного узла,
// то в параметр <Объект> необходимо добавить эти объекты метаданных.
//
// Параметры:
// Объекты – Массив. Массив объектов метаданных конфигурации.
//
Процедура ПриПолученииОбъектовНачальногоОбразаПланаОбмена(Объекты) Экспорт
	
	
КонецПроцедуры

Процедура ВыполнитьОбработчикиУстановкиПараметровСеанса(ИменаПараметровСеанса, Обработчики, УстановленныеПараметры)
	
	Перем ТекстСообщения;
	
	// массив с ключами параметров сеанса
	// задаются начальным словом в имени параметра сеанса и символом "*"
	ПараметрыСеансаКлючи = Новый Массив;
	
	Для Каждого Запись Из Обработчики Цикл
		Если Найти(Запись.Ключ, "*") > 0 Тогда
			КлючПараметра = СокрЛП(Запись.Ключ);
			ПараметрыСеансаКлючи.Добавить(Лев(КлючПараметра, СтрДлина(КлючПараметра)-1));
		КонецЕсли;
	КонецЦикла;
	
	Для каждого ИмяПараметра Из ИменаПараметровСеанса Цикл
		Если УстановленныеПараметры.Найти(ИмяПараметра) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Обработчик = Обработчики.Получить(ИмяПараметра);
		Если Обработчик <> Неопределено Тогда
			Если Не ОбщегоНазначения.ПроверитьИмяЭкспортнойПроцедуры(Обработчик, ТекстСообщения) Тогда
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;
			
			Выполнить Обработчик + "(ИмяПараметра, УстановленныеПараметры)";
			Продолжить;
		КонецЕсли;
		Для Каждого ИмяКлючаПараметра Из ПараметрыСеансаКлючи Цикл
			Если Лев(ИмяПараметра, СтрДлина(ИмяКлючаПараметра)) = ИмяКлючаПараметра Тогда
				Обработчик = Обработчики.Получить(ИмяКлючаПараметра+"*");
				Если Не ОбщегоНазначения.ПроверитьИмяЭкспортнойПроцедуры(Обработчик, ТекстСообщения) Тогда
					ВызватьИсключение ТекстСообщения;
				КонецЕсли;
				Выполнить Обработчик + "(ИмяПараметра, УстановленныеПараметры)";
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

// Возвращает фиксированное соответствие, содержащее некоторые параметры клиента:
//  ПараметрЗапуска                    - Строка,
//  СтрокаСоединенияИнформационнойБазы - Строка - строка соединения, полученная на клиенте.
//
// Возвращает пустое фиксированное соответствие, если ТекущийРежимЗапуска() = Неопределено.
//
Функция ПараметрыКлиентаНаСервере() Экспорт
	
	Если ТекущийРежимЗапуска() = Неопределено Тогда
		Возврат Новый ФиксированноеСоответствие(Новый Соответствие);
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	ПараметрыКлиента = ПараметрыСеанса.ПараметрыКлиентаНаСервере;
	УстановитьПривилегированныйРежим(Ложь);
	
	Если ПараметрыКлиента.Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru = 'Не заполнены параметры клиента на сервере.'");
	КонецЕсли;
	
	Возврат ПараметрыКлиента;
	
КонецФункции

// Добавляет новый каталог временных файлов.
//   Используется в связке с ОчиститьКаталогВременныхФайлов.
//
// Параметры:
//   Расширение - Строка - Расширение каталога.
//       В качестве расширения полезно указывать аббревиатуру подсистемы, чтобы было понятно "кто за собой не убрал".
//       Рекомендуется указывать на английском языке, чтобы исключить ошибки ОС.
//
// Возвращаемое значение:
//   Строка - Полный путь к каталогу с последним слешем.
//
Функция СоздатьКаталогВременныхФайлов(Расширение) Экспорт
	ПутьККаталогу = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ПолучитьИмяВременногоФайла(Расширение));
	СоздатьКаталог(ПутьККаталогу);
	Возврат ПутьККаталогу;
КонецФункции

// Заглушка для библиотеки ЕГАИС
Процедура УстановитьУсловноеОформлениеПоляДата(Форма, Список, Поле) Экспорт
КонецПроцедуры
