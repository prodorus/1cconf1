// Функция возвращает курс ставку НДС
//
// Параметры:
//  Валюта - СправочникСсылка.Валюты, валюта, по которой необходимо получить курс
//  ДатаКурса - Дата, календарная дата, на которую необходимо получить курс валюты
//
// Возвращаемое значение:
//	Курс переданной валюты на переданную дату, 1 в случае отсутствия значения.
//
Функция ПолучитьСтавкуНДС(СтавкаНДС) Экспорт

	Если СтавкаНДС = Перечисления.СтавкиНДС.НДС20 ИЛИ СтавкаНДС = Перечисления.СтавкиНДС.НДС20_120 Тогда
		Возврат 20;

	ИначеЕсли СтавкаНДС = Перечисления.СтавкиНДС.НДС10 ИЛИ СтавкаНДС = Перечисления.СтавкиНДС.НДС10_110 Тогда
		Возврат 10;

	ИначеЕсли СтавкаНДС = Перечисления.СтавкиНДС.НДС18 ИЛИ СтавкаНДС = Перечисления.СтавкиНДС.НДС18_118 Тогда
		Возврат 18;

	КонецЕсли;

	Возврат 0;

КонецФункции // ПолучитьСтавкуНДС()

// Функция возвращает общую ставку НДС, которая действует на переданный период
//
// Параметры:
//  Период - дата на которую нужно получить актуальную ставку
//
// Возвращаемое значение:
//  ПеречислениеСсылка.СтавкиНДС - Актуальная ставка НДС
//
Функция ОбщаяСтавкаНДС(Период) Экспорт
	
	Если Период < '20190101' Тогда
		Возврат Перечисления.СтавкиНДС.НДС18;
	Иначе
		Возврат Перечисления.СтавкиНДС.НДС20;
	КонецЕсли;
	
КонецФункции

// Функция возвращает общую расчетную ставку НДС, которая действует на переданный период
//
// Параметры:
//  Период - дата на которую нужно получить актуальную ставку
//
// Возвращаемое значение:
//  ПеречислениеСсылка.СтавкиНДС - Актуальная ставка НДС
//
Функция ОбщаяРасчетнаяСтавкаНДС(Период) Экспорт
	
	Если Период < '20190101' Тогда
		Возврат Перечисления.СтавкиНДС.НДС18_118;
	Иначе
		Возврат Перечисления.СтавкиНДС.НДС20_120;
	КонецЕсли;
	
КонецФункции

Функция СтавкаНДСИсчисляетсяНалоговымАгентом(Период) Экспорт
	
	Возврат ОбщаяРасчетнаяСтавкаНДС(Период);
	
КонецФункции

//Функция определения вида ценности по группе критериев
//
Функция ОпределитьВидЦенности(Объект, СчетУчета, ЭтоДопРасходы = Ложь, ЭтоТаможенныйНДС = Ложь, ЭтоАгентскийНДС = Ложь, ВидАгентскогоДоговора = "", ЭтоУслуга = Неопределено, СтруктураШапкиДокумента = Неопределено, СпособСтроительства = Неопределено, ВидыЦенностейПоСчетамУчета = Неопределено) Экспорт

	ВидЦенности = Перечисления.ВидыЦенностей.ПустаяСсылка();

	ДатаДокумента = ?(СтруктураШапкиДокумента = Неопределено, '00010101', СтруктураШапкиДокумента.Дата);
	Если ЭтоТаможенныйНДС Тогда
		Если ВидыЦенностейПоСчетамУчета = Неопределено Тогда
			ВидыЦенностейПоСчетамУчета = Новый Соответствие;
		КонецЕсли;
		СчетаУчетаЦенностей = ВидыЦенностейПоСчетамУчета["ОС"];
		Если СчетаУчетаЦенностей = Неопределено Тогда
			СчетаУчетаЦенностей = ОпределитьСчетаУчетаЦенностей("ОС", ДатаДокумента);
			ВидыЦенностейПоСчетамУчета.Вставить("ОС", СчетаУчетаЦенностей);
		КонецЕсли;
		Для Каждого СчетУчетаЦенности Из СчетаУчетаЦенностей Цикл
			ВидыЦенностейПоСчетамУчета.Вставить(СчетУчетаЦенности.Значение, Перечисления.ВидыЦенностей.ТаможенныеПлатежиОС);
		КонецЦикла;
		Если СтруктураШапкиДокумента.Дата >= '20060101' 
			И Не СчетаУчетаЦенностей.НайтиПоЗначению(СчетУчета) = Неопределено Тогда
			ВидЦенности = Перечисления.ВидыЦенностей.ТаможенныеПлатежиОС;
		Иначе
			ВидЦенности = Перечисления.ВидыЦенностей.ТаможенныеПлатежи;
		КонецЕсли;
		
	ИначеЕсли ЭтоАгентскийНДС Тогда
		// Это агентский НДС - для него применяется специальный вид ценности
		Если ВидАгентскогоДоговора = Перечисления.ВидыАгентскихДоговоров.Аренда Тогда
			ВидЦенности = Перечисления.ВидыЦенностей.НалоговыйАгентАренда;
		ИначеЕсли ВидАгентскогоДоговора = Перечисления.ВидыАгентскихДоговоров.РеализацияИмущества Тогда
			ВидЦенности = Перечисления.ВидыЦенностей.НалоговыйАгентРеализацияИмущества;
		Иначе
			ВидЦенности = Перечисления.ВидыЦенностей.НалоговыйАгентИностранцы;
		КонецЕсли;
		
	ИначеЕсли Не ЗначениеЗаполнено(СчетУчета) Тогда
		ВидЦенности = Перечисления.ВидыЦенностей.ПрочиеРаботыИУслуги;

	ИначеЕсли ЭтоДопРасходы Тогда
		// Это всегда услуги
		Если СчетУчета.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.СтроительствоОбъектовОсновныхСредств) тогда
			ВидЦенности = Перечисления.ВидыЦенностей.СМРПодрядные;
		Иначе
			ВидЦенности = Перечисления.ВидыЦенностей.ПрочиеРаботыИУслуги;
		КонецЕслИ;

	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.Номенклатура") тогда	
		ВидЦенности = ?(ВидыЦенностейПоСчетамУчета = Неопределено, Неопределено, ВидыЦенностейПоСчетамУчета[СчетУчета]);
		Если ВидЦенности = Неопределено Тогда
			Если ВидыЦенностейПоСчетамУчета = Неопределено Тогда
				ВидыЦенностейПоСчетамУчета = Новый Соответствие;
			КонецЕсли;
			СчетаУчетаЦенностей = ВидыЦенностейПоСчетамУчета["Материалы"];
			Если СчетаУчетаЦенностей = Неопределено Тогда
				СчетаУчетаЦенностей = ОпределитьСчетаУчетаЦенностей("Материалы");
				ВидыЦенностейПоСчетамУчета.Вставить("Материалы", СчетаУчетаЦенностей);
			КонецЕсли;
			Для Каждого СчетУчетаЦенности Из СчетаУчетаЦенностей Цикл
				ВидыЦенностейПоСчетамУчета.Вставить(СчетУчетаЦенности.Значение, Перечисления.ВидыЦенностей.Материалы);
			КонецЦикла;
			Если СчетаУчетаЦенностей.НайтиПоЗначению(СчетУчета) <> Неопределено тогда
				ВидЦенности = Перечисления.ВидыЦенностей.Материалы;
			Иначе
				СчетаУчетаЦенностей = ВидыЦенностейПоСчетамУчета["ОС"];
				Если СчетаУчетаЦенностей = Неопределено Тогда
					СчетаУчетаЦенностей = ОпределитьСчетаУчетаЦенностей("ОС", ДатаДокумента);
					ВидыЦенностейПоСчетамУчета.Вставить("ОС", СчетаУчетаЦенностей);
				КонецЕсли;
				Для Каждого СчетУчетаЦенности Из СчетаУчетаЦенностей Цикл
					ВидыЦенностейПоСчетамУчета.Вставить(СчетУчетаЦенности.Значение, Перечисления.ВидыЦенностей.ОС);
				КонецЦикла;
				Если СчетаУчетаЦенностей.НайтиПоЗначению(СчетУчета) <> Неопределено тогда
					ВидЦенности = Перечисления.ВидыЦенностей.ОС;
				Иначе
					СчетаУчетаЦенностей = ВидыЦенностейПоСчетамУчета["Оборудование"];
					Если СчетаУчетаЦенностей = Неопределено Тогда
						СчетаУчетаЦенностей = ОпределитьСчетаУчетаЦенностей("Оборудование", ДатаДокумента);
						ВидыЦенностейПоСчетамУчета.Вставить("Оборудование", СчетаУчетаЦенностей);
					КонецЕсли;
					Для Каждого СчетУчетаЦенности Из СчетаУчетаЦенностей Цикл
						ВидыЦенностейПоСчетамУчета.Вставить(СчетУчетаЦенности.Значение, Перечисления.ВидыЦенностей.ОС);
					КонецЦикла;
					Если СчетаУчетаЦенностей.НайтиПоЗначению(СчетУчета) <> Неопределено тогда
						ВидЦенности = Перечисления.ВидыЦенностей.ОС;
					Иначе
						СчетаУчетаЦенностей = ВидыЦенностейПоСчетамУчета["НМА"];
						Если СчетаУчетаЦенностей = Неопределено Тогда
							СчетаУчетаЦенностей = ОпределитьСчетаУчетаЦенностей("НМА");
							ВидыЦенностейПоСчетамУчета.Вставить("НМА", СчетаУчетаЦенностей);
						КонецЕсли;
						Для Каждого СчетУчетаЦенности Из СчетаУчетаЦенностей Цикл
							ВидыЦенностейПоСчетамУчета.Вставить(СчетУчетаЦенности.Значение, Перечисления.ВидыЦенностей.НМА);
						КонецЦикла;
						Если СчетаУчетаЦенностей.НайтиПоЗначению(СчетУчета) <> Неопределено тогда
							ВидЦенности = Перечисления.ВидыЦенностей.НМА;
						Иначе
							Если ЭтоУслуга = Неопределено Или ЭтоУслуга = Null Тогда
								ЭтоУслуга = Объект.Услуга;
							КонецЕсли;
							Если ЭтоУслуга Тогда
								ВидЦенности = Перечисления.ВидыЦенностей.ПрочиеРаботыИУслуги;
							Иначе
								ВидЦенности = Перечисления.ВидыЦенностей.Товары;
							КонецЕсли; 
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
			
	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.НематериальныеАктивы") тогда	
		ВидЦенности = Перечисления.ВидыЦенностей.НМА;

	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.ОсновныеСредства") тогда	
		ВидЦенности = Перечисления.ВидыЦенностей.ОС;

	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.ОбъектыСтроительства") тогда	
		ВидЦенности = Перечисления.ВидыЦенностей.ОбъектыНезавершенногоСтроительства;

	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.СтатьиЗатрат") тогда	
		Если ВидыЦенностейПоСчетамУчета = Неопределено Тогда
			ВидыЦенностейПоСчетамУчета = Новый Соответствие;
		КонецЕсли;
		СчетаУчетаЦенностей = ВидыЦенностейПоСчетамУчета["ОбъектыСтроительства"];
		Если СчетаУчетаЦенностей = Неопределено Тогда
			СчетаУчетаЦенностей = ОпределитьСчетаУчетаЦенностей("ОбъектыСтроительства");
			ВидыЦенностейПоСчетамУчета.Вставить("ОбъектыСтроительства", СчетаУчетаЦенностей);
		КонецЕсли;
		Если СчетаУчетаЦенностей.НайтиПоЗначению(СчетУчета) <> Неопределено тогда
			Если СпособСтроительства = Перечисления.СпособыСтроительства.Хозспособ Тогда
				//Такая ситуация возникает при приобретении услуг, включаемых в затраты по строительству 
				// не от строительной организации (не от подрядчика) (например, это услуги по охране объекта строительства).
				// Необходимо учитывать данные услуги как "Прочие работы и услуги".
				ВидЦенности = Перечисления.ВидыЦенностей.ПрочиеРаботыИУслуги;
			Иначе	
				ВидЦенности = Перечисления.ВидыЦенностей.СМРПодрядные;
			КонецЕсли; 
			
		ИначеЕсли ЗначениеЗаполнено(Объект) Тогда
			Если Объект.ВидРасходовНУ = Перечисления.ВидыРасходовНУ.КомандировочныеРасходы Тогда
				ВидЦенности = Перечисления.ВидыЦенностей.КомандировочныеРасходы;
			ИначеЕсли Объект.ВидРасходовНУ = Перечисления.ВидыРасходовНУ.ПредставительскиеРасходы Тогда
				ВидЦенности = Перечисления.ВидыЦенностей.ПредставительскиеРасходы;
			Иначе
				ВидЦенности = Перечисления.ВидыЦенностей.ПрочиеРаботыИУслуги;
			КонецЕсли;
		Иначе
			ВидЦенности = Перечисления.ВидыЦенностей.ПрочиеРаботыИУслуги;
		КонецЕсли;
		Если ВидыЦенностейПоСчетамУчета = Неопределено Тогда
			ВидыЦенностейПоСчетамУчета = Новый Соответствие;
		КонецЕсли;
		Для Каждого СчетУчетаЦенности Из СчетаУчетаЦенностей Цикл
			  ВидыЦенностейПоСчетамУчета.Вставить(СчетУчетаЦенности, ВидЦенности);
		КонецЦикла;
		
	Иначе	
		ВидЦенности = Перечисления.ВидыЦенностей.ПрочиеРаботыИУслуги;
		
	КонецЕсли;

	Возврат ВидЦенности;

КонецФункции // ОпределитьВидЦенности()

// Функция определяет объект учета (ценность) в строке табличной части.
// Сама табличная часть задается в параметре ТаблицаЗначений. В результате 
// анализа этой табличной части определяется из какой именно колонки нужно 
// взять объект учета.
Функция ОпределитьЦенностьИзСтрокиТабличнойЧасти(СтрокаТаблицы, ТаблицаЗначений)

	Ценность = "";

	Если ТаблицаЗначений.Колонки.Найти("Номенклатура") <> Неопределено Тогда
		Ценность = СтрокаТаблицы.Номенклатура;

	ИначеЕсли ТаблицаЗначений.Колонки.Найти("ОбъектСтроительства") <> Неопределено Тогда
		Ценность = СтрокаТаблицы.ОбъектСтроительства;

	ИначеЕсли ТаблицаЗначений.Колонки.Найти("НематериальныйАктив") <> Неопределено Тогда
		Ценность = СтрокаТаблицы.НематериальныйАктив;

	КонецЕсли;

	Возврат Ценность;

КонецФункции // ОпределитьЦенностьИзСтрокиТабличнойЧасти()

// Функция определяет вид ценнности по переданным в нее субконто счета учета.
// 
Функция ПолучитьЦенностьПоСубконто(Субконто1, Субконто2, Субконто3)

	ВидЦенности = Неопределено;

	МассивСубконто = Новый Массив;
	МассивСубконто.Добавить(Субконто1);
	МассивСубконто.Добавить(Субконто2);
	МассивСубконто.Добавить(Субконто3);

	Для каждого Субконто Из МассивСубконто Цикл

		Если ТипЗнч(Субконто) = Тип("СправочникСсылка.Номенклатура") Тогда
			ВидЦенности = Субконто;

		ИначеЕсли ТипЗнч(Субконто) = Тип("СправочникСсылка.ОсновныеСредства") Тогда
			ВидЦенности = Субконто;

		ИначеЕсли ТипЗнч(Субконто) = Тип("СправочникСсылка.НематериальныеАктивы") Тогда
			ВидЦенности = Субконто;

		ИначеЕсли ТипЗнч(Субконто) = Тип("СправочникСсылка.РасходыБудущихПериодов") Тогда
			ВидЦенности = Субконто;

		ИначеЕсли ТипЗнч(Субконто) = Тип("СправочникСсылка.СтатьиЗатрат") Тогда
			ВидЦенности = Субконто;
			
		ИначеЕсли ТипЗнч(Субконто) = Тип("СправочникСсылка.ПрочиеДоходыИРасходы") Тогда
			ВидЦенности = Субконто;
			
		КонецЕсли; 

		// Если вид ценности определен, то прекращаем поиск
		Если ВидЦенности <> Неопределено Тогда
			Прервать;
		КонецЕсли;

	КонецЦикла;

	Возврат ВидЦенности;

КонецФункции // ПолучитьЦенностьПоСубконто()

// Функция производит поиск счета-фактуры (полученного или выданного), у которого в качестве документа-основания указана
// переданная ссылка.
//
// Параметры:
//  ДокументСсылка  - ссылка на документ, для которого надо найти подчиненный документ,
//  ВидСчетаФактуры - строка, вид документа, по умолчанию "СчетФактураВыданный"
//  Отбор 			- структура с именами и значениями реквизитов СФ для дополнительного отбора
//	
// Возвращаемое значение:
//  Если нашли, то возвращаем ссылку, не нашли - Неопределено
//
Функция НайтиПодчиненныйСчетФактуру(Знач ДокументСсылка, ВидДокумента = "СчетФактураВыданный", Отбор = Неопределено, ИсключитьИзВыборкиСФ = Неопределено, МетаданныеОснования = Неопределено) Экспорт

	Если не ЗначениеЗаполнено(ДокументСсылка) Тогда
		Возврат Неопределено;
	Иначе
		
		Если МетаданныеОснования = Неопределено Тогда
			МетаданныеОснования = ДокументСсылка.Метаданные();
		КонецЕсли; 
		
		Если МетаданныеОснования.Реквизиты.Найти("ИспользоватьДокументРасчетовКакСчетФактуру") <> Неопределено
			И МетаданныеОснования.Реквизиты.Найти("РасчетныйДокумент") <> Неопределено 
			И ДокументСсылка.ИспользоватьДокументРасчетовКакСчетФактуру Тогда
			Если Не ЗначениеЗаполнено(ДокументСсылка.РасчетныйДокумент) Тогда
				Возврат Неопределено;
			Иначе
				Если ТипЗнч(ДокументСсылка.РасчетныйДокумент) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") 
					И Не ДокументСсылка.РасчетныйДокумент.ПокупателемВыставляетсяСчетФактураНаВозврат Тогда
					ДокументСсылка = ДокументСсылка.РасчетныйДокумент.Сделка;
					Если Не ЗначениеЗаполнено(ДокументСсылка) Тогда
						Возврат Неопределено;
					КонецЕсли;
					МетаданныеОснования = ДокументСсылка.Метаданные();					
				Иначе
					ДокументСсылка = ДокументСсылка.РасчетныйДокумент;
					МетаданныеОснования = ДокументСсылка.Метаданные();
				КонецЕсли;
			КонецЕсли; 
		КонецЕсли;
		
	КонецЕсли;
	
	НайденныйДокумент = Неопределено;

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);

	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СФ.Ссылка
	|ПОМЕСТИТЬ ВрмТбл
	|ИЗ
	|	Документ.СчетФактураВыданный.ДокументыОснования КАК СФ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный.Авансы КАК Авансы
	|		ПО СФ.Ссылка = Авансы.Ссылка
	|ГДЕ
	|	СФ.ДокументОснование = &ДокументСсылка";
	
	Если не ВидДокумента = "СчетФактураВыданный" Тогда
		Запрос.Текст = СтрЗаменитЬ(Запрос.Текст,"СчетФактураВыданный",ВидДокумента);
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(ИсключитьИзВыборкиСФ) Тогда
		Запрос.УстановитьПараметр("ИсключитьИзВыборкиСФ", ИсключитьИзВыборкиСФ);
		Если ТипЗнч(ИсключитьИзВыборкиСФ) = Тип("Массив") Тогда
			Запрос.Текст = Запрос.Текст + "
				|	И НЕ СФ.Ссылка В (&ИсключитьИзВыборкиСФ)
				|";
		Иначе
			Запрос.Текст = Запрос.Текст + "
				|	И НЕ СФ.Ссылка = &ИсключитьИзВыборкиСФ
				|";
		КонецЕсли;
	КонецЕсли; 
	Если не Отбор = Неопределено Тогда
		Для каждого ЭлементОтбора Из Отбор Цикл
			Если ТипЗнч(ЭлементОтбора.Значение) = Тип("Булево") Тогда
			
				Запрос.Текст = Запрос.Текст + "
					|	И "+?(ЭлементОтбора.Значение," "," НЕ ")+" СФ.Ссылка."+ЭлементОтбора.Ключ;
			ИначеЕсли ЭлементОтбора.Ключ = "СтавкиНДС" Тогда
			
				Запрос.УстановитьПараметр(ЭлементОтбора.Ключ, ЭлементОтбора.Значение);
				Запрос.Текст = Запрос.Текст + "
					|	И Авансы.СтавкаНДС В (&"+ЭлементОтбора.Ключ+")";
			ИначеЕсли ЭлементОтбора.Ключ = "СчетНаОплату" 
						И ВидДокумента = "СчетФактураВыданный" Тогда
			
				Запрос.УстановитьПараметр(ЭлементОтбора.Ключ, ЭлементОтбора.Значение);
				Запрос.Текст = Запрос.Текст + "
					|	И Авансы.СчетНаОплату В (&"+ЭлементОтбора.Ключ+")";
			Иначе
				
				Запрос.УстановитьПараметр(ЭлементОтбора.Ключ, ЭлементОтбора.Значение);
				
				Если ТипЗнч(ЭлементОтбора.Значение) = Тип("Массив") 
					ИЛИ ТипЗнч(ЭлементОтбора.Значение) = Тип("СписокЗначений") Тогда
					Запрос.Текст = Запрос.Текст + "
					|	И СФ.Ссылка."+ЭлементОтбора.Ключ + " В (&"+ЭлементОтбора.Ключ + ")";
				Иначе
					Запрос.Текст = Запрос.Текст + "
					|	И СФ.Ссылка."+ЭлементОтбора.Ключ +" = &"+ЭлементОтбора.Ключ;
				КонецЕсли;
				
			КонецЕсли; 
		КонецЦикла; 
	КонецЕсли; 
	
	Запрос.Текст = Запрос.Текст + ";";
	
	Запрос.Текст = Запрос.Текст + "
	|ВЫБРАТЬ Ссылка
	| ИЗ ВрмТбл
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка.ПометкаУдаления,
	|	Ссылка.Проведен УБЫВ,
	|	Ссылка.Дата";
	
	ВыборкаИзЗапроса = Запрос.Выполнить().Выбрать();

	Если ВыборкаИзЗапроса.Следующий() Тогда
		НайденныйДокумент = ВыборкаИзЗапроса.Ссылка;
	КонецЕсли;

	Возврат НайденныйДокумент;

КонецФункции // НайтиПодчиненныйСчетФактуру()

Функция ПолучитьРеквизитыСчетаФактурыВыданного(ДокументОснование) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Параметры.Вставить("ДокументОснование", ДокументОснование);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СчетФактураВыданный.Ссылка КАК СчетФактура,
	|	СчетФактураВыданный.ПометкаУдаления КАК ПометкаУдаления,
	|	СчетФактураВыданный.Проведен КАК Проведен,
	|	ВЫБОР
	|		КОГДА СчетФактураВыданный.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.Корректировочный)
	|				И СчетФактураВыданный.Исправление
	|			ТОГДА СчетФактураВыданный.НомерИсправляемогоКорректировочногоДокумента
	|		КОГДА СчетФактураВыданный.Исправление
	|			ТОГДА СчетФактураВыданный.НомерИсходногоДокумента
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК НомерСчетаФактуры,
	|	ВЫБОР
	|		КОГДА СчетФактураВыданный.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.Корректировочный)
	|				И СчетФактураВыданный.Исправление
	|			ТОГДА СчетФактураВыданный.ДатаИсправляемогоКорректировочногоДокумента
	|		КОГДА СчетФактураВыданный.Исправление
	|			ТОГДА СчетФактураВыданный.ДатаИсходногоДокумента
	|		ИНАЧЕ СчетФактураВыданный.Дата
	|	КОНЕЦ КАК ДатаСчетаФактуры,
	|	СчетФактураВыданный.Исправление,
	|	ВЫБОР
	|		КОГДА СчетФактураВыданный.Исправление
	|			ТОГДА СчетФактураВыданный.НомерИсправления
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК НомерИсправления,
	|	ВЫБОР
	|		КОГДА СчетФактураВыданный.Исправление
	|			ТОГДА СчетФактураВыданный.Дата
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|	КОНЕЦ КАК ДатаИсправления,
	|	ВЫБОР
	|		КОГДА СчетФактураВыданный.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.Корректировочный)
	|			ТОГДА СчетФактураВыданныйДокументыОснования.НомерИсходногоДокумента
	|		ИНАЧЕ СчетФактураВыданный.НомерИсходногоДокумента
	|	КОНЕЦ КАК НомерИсходногоДокумента,
	|	ВЫБОР
	|		КОГДА СчетФактураВыданный.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.Корректировочный)
	|			ТОГДА СчетФактураВыданныйДокументыОснования.ДатаИсходногоДокумента
	|		ИНАЧЕ СчетФактураВыданный.ДатаИсходногоДокумента
	|	КОНЕЦ КАК ДатаИсходногоДокумента,
	|	ВЫБОР
	|		КОГДА СчетФактураВыданный.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.Корректировочный)
	|			ТОГДА СчетФактураВыданныйДокументыОснования.УчитыватьИсправлениеИсходногоДокумента
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК УчитыватьИсправлениеИсходногоДокумента,
	|	ВЫБОР
	|		КОГДА СчетФактураВыданный.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.Корректировочный)
	|			ТОГДА СчетФактураВыданныйДокументыОснования.НомерИсправленияИсходногоДокумента
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК НомерИсправленияИсходногоДокумента,
	|	ВЫБОР
	|		КОГДА СчетФактураВыданный.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.Корректировочный)
	|			ТОГДА СчетФактураВыданныйДокументыОснования.ДатаИсправленияИсходногоДокумента
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|	КОНЕЦ КАК ДатаИсправленияИсходногоДокумента
	|ИЗ
	|	Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураВыданныйДокументыОснования
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный КАК СчетФактураВыданный
	|		ПО СчетФактураВыданныйДокументыОснования.Ссылка = СчетФактураВыданный.Ссылка
	|ГДЕ
	|	(СчетФактураВыданныйДокументыОснования.ДокументОснование = &ДокументОснование
	|			ИЛИ СчетФактураВыданныйДокументыОснования.Ссылка = &ДокументОснование)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПометкаУдаления,
	|	Проведен УБЫВ,
	|	СчетФактураВыданный.Дата";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		РеквизитыСчетаФактуры = Новый Структура("СчетФактура, ПометкаУдаления, Проведен, НомерСчетаФактуры, ДатаСчетаФактуры, 
			|Исправление, НомерИсправления, ДатаИсправления, НомерИсходногоДокумента, ДатаИсходногоДокумента,
			|УчитыватьИсправлениеИсходногоДокумента, НомерИсправленияИсходногоДокумента, ДатаИсправленияИсходногоДокумента");
		ЗаполнитьЗначенияСвойств(РеквизитыСчетаФактуры, Выборка);
		Если РеквизитыСчетаФактуры.НомерСчетаФактуры = НЕОПРЕДЕЛЕНО Тогда
			РеквизитыСчетаФактуры.НомерСчетаФактуры = ОбщегоНазначения.ПолучитьНомерНаПечать(РеквизитыСчетаФактуры.СчетФактура); 
		КонецЕсли;
		Возврат РеквизитыСчетаФактуры;
	Иначе
		Возврат Неопределено;
	КонецЕсли;

КонецФункции

Функция ПолучитьРеквизитыСчетаФактурыПолученного(ДокументОснование) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Параметры.Вставить("ДокументОснование", ДокументОснование.Ссылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СчетФактураПолученный.Ссылка КАК СчетФактура,
	|	СчетФактураПолученный.НомерВходящегоДокумента КАК НомерСчетаФактуры,
	|	СчетФактураПолученный.ДатаВходящегоДокумента КАК ДатаСчетаФактуры,
	|	СчетФактураПолученный.Исправление,
	|	ВЫБОР
	|		КОГДА СчетФактураПолученный.Исправление
	|			ТОГДА СчетФактураПолученный.НомерИсправления
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК НомерИсправления,
	|	ВЫБОР
	|		КОГДА СчетФактураПолученный.Исправление
	|			ТОГДА СчетФактураПолученный.ДатаИсправления
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|	КОНЕЦ КАК ДатаИсправления,
	|	ВЫБОР
	|		КОГДА СчетФактураПолученный.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыПолученного.Корректировочный)
	|			ТОГДА СчетФактураПолученныйДокументыОснования.НомерИсходногоДокумента
	|		ИНАЧЕ СчетФактураПолученный.НомерИсходногоДокумента
	|	КОНЕЦ КАК НомерИсходногоДокумента,
	|	ВЫБОР
	|		КОГДА СчетФактураПолученный.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыПолученного.Корректировочный)
	|			ТОГДА СчетФактураПолученныйДокументыОснования.ДатаИсходногоДокумента
	|		ИНАЧЕ СчетФактураПолученный.ДатаИсходногоДокумента
	|	КОНЕЦ КАК ДатаИсходногоДокумента,
	|	ВЫБОР
	|		КОГДА СчетФактураПолученный.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыПолученного.Корректировочный)
	|			ТОГДА СчетФактураПолученныйДокументыОснования.УчитыватьИсправлениеИсходногоДокумента
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК УчитыватьИсправлениеИсходногоДокумента,
	|	ВЫБОР
	|		КОГДА СчетФактураПолученный.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыПолученного.Корректировочный)
	|			ТОГДА СчетФактураПолученныйДокументыОснования.НомерИсправленияИсходногоДокумента
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК НомерИсправленияИсходногоДокумента,
	|	ВЫБОР
	|		КОГДА СчетФактураПолученный.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыПолученного.Корректировочный)
	|			ТОГДА СчетФактураПолученныйДокументыОснования.ДатаИсправленияИсходногоДокумента
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|	КОНЕЦ КАК ДатаИсправленияИсходногоДокумента
	|ИЗ
	|	Документ.СчетФактураПолученный.ДокументыОснования КАК СчетФактураПолученныйДокументыОснования
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СчетФактураПолученный КАК СчетФактураПолученный
	|		ПО СчетФактураПолученныйДокументыОснования.Ссылка = СчетФактураПолученный.Ссылка
	|ГДЕ
	|	(СчетФактураПолученныйДокументыОснования.ДокументОснование = &ДокументОснование
	|			ИЛИ СчетФактураПолученныйДокументыОснования.Ссылка = &ДокументОснование)
	|
	|УПОРЯДОЧИТЬ ПО
	|	СчетФактураПолученный.ПометкаУдаления,
	|	СчетФактураПолученный.Проведен УБЫВ,
	|	СчетФактураПолученный.Дата";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		РеквизитыСчетаФактуры = Новый Структура("СчетФактура, НомерСчетаФактуры, ДатаСчетаФактуры, 
			|Исправление, НомерИсправления, ДатаИсправления, НомерИсходногоДокумента, ДатаИсходногоДокумента,
			|УчитыватьИсправлениеИсходногоДокумента, НомерИсправленияИсходногоДокумента, ДатаИсправленияИсходногоДокумента");
		ЗаполнитьЗначенияСвойств(РеквизитыСчетаФактуры, Выборка);
		Возврат РеквизитыСчетаФактуры;
	Иначе
		Возврат Неопределено;
	КонецЕсли;

КонецФункции

// Процедура арифметически распределяет заданную сумму
// по столбцу таблицы значений пропрционально колонке базы распределения
// при этом размерность таблицы и базы распределения должны совпадать.
// Как правило база распределения - просто одна из колонок таблицы
Процедура РаспределитьСуммуПоСтолбцу(МассивБазыРаспределения, РаспределяемаяСумма, ТаблицаРезультата, ИдКолонкиРезультата) Экспорт

	// Определяем сумму базы
	СуммаБазы = 0;

	Для Индекс = 0 По МассивБазыРаспределения.Количество() - 1 Цикл
		СуммаБазы = СуммаБазы + МассивБазыРаспределения[Индекс];
	КонецЦикла;

	Если СуммаБазы > 0 Тогда
		// Выполняем распределение
		УчтеноБазыРаспределения = 0;
		УжеРаспределено = 0;

		Для Индекс = 0 По МассивБазыРаспределения.Количество() - 1 Цикл

			// Рассчитываем шаг распределения
			ШагРаспределения = Окр(РаспределяемаяСумма * (УчтеноБазыРаспределения + МассивБазыРаспределения[Индекс])/СуммаБазы, 2) - УжеРаспределено;

			// Записываем результат
			ТаблицаРезультата[Индекс][ИдКолонкиРезультата] = ШагРаспределения;

			// Учитываем полученный результат для вычисления последующих шагов распределения
			УчтеноБазыРаспределения = УчтеноБазыРаспределения + МассивБазыРаспределения[Индекс];
			УжеРаспределено         = УжеРаспределено + ШагРаспределения;

		КонецЦикла;

	КонецЕсли;

КонецПроцедуры // РаспределитьСуммуПоСтолбцу()

// Процедура подготовки таблицы значений для целей формирования движений
// по подсистеме НДС. Доопределяет дополнительные колонки "ВидЦенности" и "Ценность"
// в таблице значений, переданной в качестве параметра

Процедура ОпределениеДополнительныхПараметровТаблицыПартийДляПодсистемыУчетаНДС(СтруктураШапкиДокумента, ТаблицаЗначений) Экспорт

	ВидыЦенностейПоСчетамУчета = Неопределено;
	
	ЕстьКолонкаУслуга 				= ТаблицаЗначений.Колонки.Найти("Услуга") <> Неопределено;
	ЕстьКолонкаСчетУчетаБУ 			= ТаблицаЗначений.Колонки.Найти("СчетУчетаБУ") <> Неопределено;
	ЕстьКолонкаСчетУчета 			= ТаблицаЗначений.Колонки.Найти("СчетУчета") <> Неопределено;
	ЕстьКолонкаСчетЗатрат 			= ТаблицаЗначений.Колонки.Найти("СчетЗатрат") <> Неопределено;
	ЕстьКолонкаСубконто1 			= ТаблицаЗначений.Колонки.Найти("Субконто1") <> Неопределено;
	ЕстьКолонкаНоменклатура 		= ТаблицаЗначений.Колонки.Найти("Номенклатура") <> Неопределено;
	ЕстьКолонкаОсновноеСредство 	= ТаблицаЗначений.Колонки.Найти("ОсновноеСредство") <> Неопределено;
	ЕстьКолонкаНематериальныйАктив 	= ТаблицаЗначений.Колонки.Найти("НематериальныйАктив") <> Неопределено;
	ЕстьСпособСтроительства 		= ТаблицаЗначений.Колонки.Найти("СпособСтроительства") <> Неопределено;
	ЕстьСчетУчетаНДС 				= ТаблицаЗначений.Колонки.Найти("СчетУчетаНДС") <> Неопределено;
	
	Для Каждого СтрокаТаблицы Из ТаблицаЗначений Цикл

		СчетУчетаЦенности = "";
        СпособСтроительства = ?(ЕстьСпособСтроительства, СтрокаТаблицы.СпособСтроительства, Неопределено);

		Если ЕстьКолонкаСчетУчетаБУ Тогда
			СчетУчетаЦенности = СтрокаТаблицы.СчетУчетаБУ;
			Ценность          = ОпределитьЦенностьИзСтрокиТабличнойЧасти(СтрокаТаблицы, ТаблицаЗначений);

		ИначеЕсли ЕстьКолонкаСчетЗатрат И ЕстьКолонкаСубконто1 Тогда
			СчетУчетаЦенности = СтрокаТаблицы.СчетЗатрат;
			Ценность          = ПолучитьЦенностьПоСубконто(СтрокаТаблицы.Субконто1, СтрокаТаблицы.Субконто2, СтрокаТаблицы.Субконто3);
			
			Если Не ЕстьСпособСтроительства Тогда
				// Особая обработка для затрат на строительство если способ строительства не указан явно в таблице
				Если ТипЗнч(Ценность) = Тип("СправочникСсылка.СтатьиЗатрат") Тогда
					Для НомерСубконто =1 По 3 Цикл
						Если ТипЗнч(СтрокаТаблицы["Субконто"+НомерСубконто]) = Тип("ПеречислениеСсылка.СпособыСтроительства")  Тогда
							СпособСтроительства = СтрокаТаблицы["Субконто"+НомерСубконто];
							Прервать;
						КонецЕсли; 
					КонецЦикла; 
				КонецЕсли; 
			КонецЕсли;

		ИначеЕсли ЕстьКолонкаСчетУчета Тогда
			СчетУчетаЦенности = СтрокаТаблицы.СчетУчета;
			Ценность          = ОпределитьЦенностьИзСтрокиТабличнойЧасти(СтрокаТаблицы, ТаблицаЗначений);
			
		ИначеЕсли ЕстьКолонкаНоменклатура Тогда
			СчетУчетаЦенности = "нет";
			Ценность          = ОпределитьЦенностьИзСтрокиТабличнойЧасти(СтрокаТаблицы, ТаблицаЗначений);
			
		ИначеЕсли ЕстьКолонкаОсновноеСредство Тогда
			СчетУчетаЦенности = "нет";
			Ценность          = СтрокаТаблицы.ОсновноеСредство;

		ИначеЕсли ЕстьКолонкаНематериальныйАктив Тогда
			СчетУчетаЦенности = "нет";
			Ценность          = СтрокаТаблицы.НематериальныйАктив;
			
		КонецЕсли;

		ЭтоДопРасходы         = (СтруктураШапкиДокумента.ВидДокумента = "ПоступлениеДопРасходов");
		ЭтоТаможенныйНДС	  = (СтруктураШапкиДокумента.ВидДокумента = "ГТДИмпорт");
		УчетАгентскогоНДС     = Ложь;
		ВидАгентскогоДоговора = "";

		Если СтруктураШапкиДокумента.Свойство("УчетАгентскогоНДС") и ЗначениеЗаполнено(СтруктураШапкиДокумента.УчетАгентскогоНДС) тогда
			УчетАгентскогоНДС = СтруктураШапкиДокумента.УчетАгентскогоНДС;
		КонецЕсли;
		Если СтруктураШапкиДокумента.Свойство("ВидАгентскогоДоговора") тогда
			ВидАгентскогоДоговора = СтруктураШапкиДокумента.ВидАгентскогоДоговора;
		КонецЕсли;
		
		СтрокаТаблицы.ВидЦенности       = ОпределитьВидЦенности(Ценность, СчетУчетаЦенности, ЭтоДопРасходы, ЭтоТаможенныйНДС, УчетАгентскогоНДС, ВидАгентскогоДоговора, ?(ЕстьКолонкаУслуга, СтрокаТаблицы.Услуга, Неопределено), СтруктураШапкиДокумента, СпособСтроительства, ВидыЦенностейПоСчетамУчета);
		СтрокаТаблицы.СчетУчетаЦенности = СчетУчетаЦенности;
		СтрокаТаблицы.Ценность          = Ценность;
		
		Если ЕстьСчетУчетаНДС Тогда
			Если Не ЗначениеЗаполнено(СтрокаТаблицы.СчетУчетаНДС) Тогда
				Если СтруктураШапкиДокумента.Свойство("СчетУчетаНДС") Тогда
					СтрокаТаблицы.СчетУчетаНДС = СтруктураШапкиДокумента.СчетУчетаНДС;
	            Иначе
					СтрокаТаблицы.СчетУчетаНДС = ОпределитьСчетУчетаНДС(СтрокаТаблицы.ВидЦенности);
				КонецЕсли;
			КонецЕсли;
        КонецЕсли;
			
	КонецЦикла

КонецПроцедуры // ОпределениеДополнительныхПараметровТаблицыПартийДляПодсистемыУчетаНДС()

// Выполняет общие для всех документов действия связанные с пометкой на удаление
// счета-фактуры при удалении документа, являющегося основание данного счета-фактуры.
//
// Параметры:
//  ДокументОбъект  - объект документа, 
//  ВидСчетаФактуры - строка, вид счета-фактуры, по умолчанию "СчетФактураВыданный"
//
Процедура УстановкаПометкиНаУдалениеУСчетаФактуры(ДокументОбъект, ВидСчетаФактуры = "СчетФактураВыданный", ПометкаНаУдаление = Истина) Экспорт

	// Произошло изменение пометки на удаление
	//Попытаемся найти счет-фактуру
	СчетФактура = НайтиПодчиненныйСчетФактуру(ДокументОбъект.Ссылка, ВидСчетаФактуры);

	//Если потерпели неудачу, то необходимо ввести новый документ 
	Если ЗначениеЗаполнено(СчетФактура) И СчетФактура.ПометкаУдаления <> ПометкаНаУдаление Тогда

		// Есть счет-фактура, нужно установить для него пометку удаления
		СчетФактураОбъект = СчетФактура.ПолучитьОбъект();
		СчетФактураОбъект.УстановитьПометкуУдаления(ПометкаНаУдаление);
		Если ПометкаНаУдаление Тогда
			ОбщегоНазначения.Сообщение("Документ <" + СчетФактураОбъект + "> помечен на удаление.")
		Иначе
			ОбщегоНазначения.Сообщение("У документа <" + СчетФактураОбъект + "> снята пометка на удаление.")
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // СинхронизацияПометкиНаУдалениеУСчетаФактуры()

// Выполняет общие для всех документов действия связанные с проведением
// счета-фактуры при проведении или отмене проведения документа, являющегося основание данного счета-фактуры.
//
// Параметры:
//  ДокументОбъект  - объект документа, 
//  ВидСчетаФактуры - строка, вид счета-фактуры, по умолчанию "СчетФактураВыданный"
//
Процедура СинхронизацияПроведенияУСчетаФактуры(ДокументОбъект, ВидСчетаФактуры = "СчетФактураВыданный", Отказ = Неопределено) Экспорт

	СчетФактура = НайтиПодчиненныйСчетФактуру(ДокументОбъект.Ссылка, ВидСчетаФактуры);

	//Если потерпели неудачу, то необходимо ввести новый документ 
	Если ЗначениеЗаполнено(СчетФактура)
		И СчетФактура <> ДокументОбъект.Ссылка 
		И (ТипЗнч(СчетФактура) = Тип("ДокументСсылка.СчетФактураПолученный") ИЛИ ТипЗнч(СчетФактура) = Тип("ДокументСсылка.СчетФактураВыданный")) Тогда
		
		Если ДокументОбъект.Проведен И НЕ СчетФактура.Проведен Тогда
			// Есть счет-фактура не проведен, нужно провести (счет-фактура не проведен
			Если НЕ СчетФактура.ПометкаУдаления Тогда
				Попытка
					СчетФактураОбъект = СчетФактура.ПолучитьОбъект();
					СчетФактураОбъект.Записать(РежимЗаписиДокумента.Проведение);
				Исключение
					ОбщегоНазначения.СообщитьОбОшибке("Не удалось провести документ <" + СчетФактураОбъект + ">", Отказ, , СтатусСообщения.Важное);
				КонецПопытки;
			КонецЕсли;
		ИначеЕсли НЕ ДокументОбъект.Проведен И СчетФактура.Проведен Тогда
			// Есть счет-фактура проведен, нужно отменить проведение
			Если НЕ СчетФактура.ПометкаУдаления Тогда
				Попытка
					СчетФактураОбъект = СчетФактура.ПолучитьОбъект();
					СчетФактураОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
				Исключение
					ОбщегоНазначения.СообщитьОбОшибке("Не удалось отменить проведение документа <" + СчетФактураОбъект + ">", Отказ, , СтатусСообщения.Важное);
				КонецПопытки;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры // СинхронизацияПроведенияУСчетаФактуры()

// Для переданного в качестве параметра счета-факутры выданного, получает для него
// ключевые сведения: Контрагент, Договор, Сумма и др., которые содержатся в 
// документе основнии.
//
// Параметры:
//  СчетФактура  - счет-фактура для которого нужно определить параметры
//  Результат - структура в которой возвращаются значения параметров
//
Процедура ПолучитьПараметрыСчетаФактуры(СчетФактура, мВалютаРегламентированногоУчета, Результат) Экспорт

	Результат = Новый Структура("Организация, Контрагент, Договор, 
		|СуммаДокумента, СуммаДокументаКомиссия, ВалютаДокумента, СуммаНДСДокумента, СуммаНДСДокументаКомиссия, СчетФактураБезНДС, НомерСчетаФактурыПродавца,
		|СуммаУвеличение, СуммаУвеличениеКомиссия, СуммаУменьшение, СуммаУменьшениеКомиссия, СуммаНДСУвеличение, 
		|СуммаНДСУвеличениеКомиссия, СуммаНДСУменьшение, СуммаНДСУменьшениеКомиссия, БланкСтрогойОтчетности, РеквизитыОснований, ИдентификаторГосКонтракта");
		
	Результат.СуммаДокумента 		= 0;
	Результат.СуммаНДСДокумента		= 0;
	Результат.СуммаУвеличение 		= 0;
	Результат.СуммаНДСУвеличение 	= 0;
	Результат.СуммаУменьшение 		= 0;
	Результат.СуммаНДСУменьшение 	= 0;
	
	Результат.СуммаДокументаКомиссия 		= 0;
	Результат.СуммаНДСДокументаКомиссия 	= 0;
	Результат.СуммаУвеличениеКомиссия 		= 0;
	Результат.СуммаНДСУвеличениеКомиссия	= 0;
	Результат.СуммаУменьшениеКомиссия 		= 0;
	Результат.СуммаНДСУменьшениеКомиссия 	= 0;
	Результат.СчетФактураБезНДС 	= 0;
	
	РеквизитыОснований = Новый ТаблицаЗначений;
	РеквизитыОснований.Колонки.Добавить("ДокументОснование");
	РеквизитыОснований.Колонки.Добавить("НомерИсходногоДокумента", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(30)));
	РеквизитыОснований.Колонки.Добавить("ДатаИсходногоДокумента", Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	РеквизитыОснований.Колонки.Добавить("УчитыватьИсправлениеИсходногоДокумента", Новый ОписаниеТипов("Булево"));
	РеквизитыОснований.Колонки.Добавить("НомерИсправленияИсходногоДокумента", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0)));
	РеквизитыОснований.Колонки.Добавить("ДатаИсправленияИсходногоДокумента", Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	РеквизитыОснований.Колонки.Добавить("СуммаУвеличение", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(14, 2)));
	РеквизитыОснований.Колонки.Добавить("СуммаУменьшение", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(14, 2)));
	РеквизитыОснований.Колонки.Добавить("СуммаНДСУвеличение", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(14, 2)));
	РеквизитыОснований.Колонки.Добавить("СуммаНДСУменьшение", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(14, 2)));
	Результат.РеквизитыОснований = РеквизитыОснований;
	
	Если ТипЗнч(СчетФактура)= Тип("ДокументСсылка.СчетФактураПолученный")
		ИЛИ ТипЗнч(СчетФактура)= Тип("ДокументСсылка.СчетФактураВыданный") Тогда
		Ссылка = СчетФактура;
	Иначе
		Ссылка = СчетФактура.Ссылка;
	КонецЕсли; 
	
	ЭтоПолученныйСФ = Ложь;
	Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
		ЭтоПолученныйСФ = Истина;
		Если СчетФактура.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.НаАванс 
			И СчетФактура.ДокументыОснования.Количество() > 0
			И ТипЗнч(СчетФактура.ДокументыОснования[0].ДокументОснование) = Тип("ДокументСсылка.КорректировкаДолга") Тогда
			// Реквизиты заново не определяются, получаются из счета-фактуры
			Результат.Вставить("Организация"	, СчетФактура.Организация);
			Результат.Вставить("Контрагент"		, СчетФактура.Контрагент);
			Результат.Вставить("Договор"		, СчетФактура.ДоговорКонтрагента);
			Результат.Вставить("ВалютаДокумента", СчетФактура.ВалютаДокумента);
			Результат.Вставить("СуммаДокумента"	, СчетФактура.СуммаДокумента);
			Возврат;
		КонецЕсли;			
	ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.СчетФактураВыданный") 
		И (СчетФактура.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАванс 
		ИЛИ СчетФактура.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаСуммовуюРазницу) Тогда
		// Реквизиты заново не определяются, получаются из счета-фактуры
		Результат.Вставить("Организация"	, СчетФактура.Организация);
		Результат.Вставить("Контрагент"		, СчетФактура.Контрагент);
		Результат.Вставить("Договор"		, СчетФактура.ДоговорКонтрагента);
		Результат.Вставить("ВалютаДокумента", СчетФактура.ВалютаДокумента);
		Результат.Вставить("СуммаДокумента"	, СчетФактура.СуммаДокумента);
		Возврат;
	КонецЕслИ;
	
	ДокументыОснования = ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(СчетФактура.ДокументыОснования.ВыгрузитьКолонку("ДокументОснование"), Истина);
	
	ТипыОснований = Новый Соответствие();
	Для каждого Основание Из ДокументыОснования Цикл
		Если не ЗначениеЗаполнено(Основание) Тогда
			Продолжить;			
		КонецЕсли; 

		МассивДокументов = ТипыОснований[ТипЗнч(Основание)];
		
		Если МассивДокументов = Неопределено Тогда
			МассивДокументов = новый Массив();
			ТипыОснований.Вставить(ТипЗнч(Основание),МассивДокументов);
		КонецЕсли; 
		
		МассивДокументов.Добавить(Основание);
	КонецЦикла; 
	
	Если ТипыОснований.Количество() = 0 Тогда
		// ТЧ оснований не заполнена, параметры определить нельзя
		Возврат;
	КонецЕсли;
	
	Корректировка = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", Ссылка);
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета", мВалютаРегламентированногоУчета);
	
	Для каждого ТипОснования Из ТипыОснований Цикл
		ТипДокументаОснования	= ТипОснования.Ключ;
		ДокументыОснования		= ТипОснования.Значение;
	    ТекстЗапроса = "";
		
		Если ТипДокументаОснования = Тип("ДокументСсылка.КорректировкаРеализации") 
			ИЛИ ТипДокументаОснования = Тип("ДокументСсылка.КорректировкаПоступления") Тогда
			Корректировка = Истина;
		КонецЕсли;
		
		Если ТипДокументаОснования = Тип("ДокументСсылка.ВводНачальныхОстатковНДС") Тогда
			// Для данного документа применяется специфический запрос для расчета параметров счета-фактуры
			Запрос.УстановитьПараметр("ДокументОснованиеВНО", ДокументыОснования);

			ТекстЗапроса = 
			"ВЫБРАТЬ
			|	ВводНачальныхОстатковНДСДанныеПоСФ.Ссылка.Организация КАК Организация,
			|	ВводНачальныхОстатковНДСДанныеПоСФ.Контрагент,
			|	ВводНачальныхОстатковНДСДанныеПоСФ.ДоговорКонтрагента КАК Договор,
			|	"""" КАК ИдентификаторГосКонтракта,
			|	СУММА(ВводНачальныхОстатковНДСДанныеПоСФ.СуммаБезНДС + ВводНачальныхОстатковНДСДанныеПоСФ.НДС) КАК СуммаДокумента,
			|	&ВалютаРегламентированногоУчета КАК ВалютаДокумента
			|ИЗ
			|	Документ.ВводНачальныхОстатковНДС.ДанныеПоСФ КАК ВводНачальныхОстатковНДСДанныеПоСФ
			|ГДЕ
			|	ВводНачальныхОстатковНДСДанныеПоСФ.Ссылка В(&ДокументОснованиеВНО)
			|	И ВводНачальныхОстатковНДСДанныеПоСФ.СчетФактура = &ТекущийДокумент
			|
			|СГРУППИРОВАТЬ ПО
			|	ВводНачальныхОстатковНДСДанныеПоСФ.Контрагент,
			|	ВводНачальныхОстатковНДСДанныеПоСФ.ДоговорКонтрагента,
			|	ВводНачальныхОстатковНДСДанныеПоСФ.Ссылка.Организация";
		
		ИначеЕсли ТипДокументаОснования = Тип("ДокументСсылка.АвансовыйОтчет") Тогда
			// Для данного документа применяется специфический запрос для расчета параметров счета-фактуры
			Запрос.УстановитьПараметр("ДокументОснованиеАО", ДокументыОснования);
			ТекстЗапроса = 
			"ВЫБРАТЬ
			|	АвансовыйОтчетПрочее.Ссылка.Организация КАК Организация,
			|	АвансовыйОтчетПрочее.Поставщик КАК Контрагент,
			|	НЕОПРЕДЕЛЕНО КАК Договор,
			|	"""" КАК ИдентификаторГосКонтракта,
			|	СУММА(ВЫБОР
			|			КОГДА АвансовыйОтчетПрочее.Ссылка.СуммаВключаетНДС
			|				ТОГДА АвансовыйОтчетПрочее.Сумма
			|			ИНАЧЕ АвансовыйОтчетПрочее.Сумма + АвансовыйОтчетПрочее.СуммаНДС
			|		КОНЕЦ) КАК СуммаДокумента,
			|	АвансовыйОтчетПрочее.Ссылка.ВалютаДокумента КАК ВалютаДокумента,
			|	СУММА(АвансовыйОтчетПрочее.СуммаНДС) КАК СуммаНДСДокумента,
			|	СУММА(0) КАК СуммаДокументаКомиссия,
			|	СУММА(0) КАК СуммаНДСДокументаКомиссия,
			|	ВЫБОР
			|		КОГДА АвансовыйОтчетПрочее.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
			|			ТОГДА 0
			|		ИНАЧЕ 1
			|	КОНЕЦ КАК ЕстьНДС,
			|	АвансовыйОтчетПрочее.БланкСтрогойОтчетности КАК БланкСтрогойОтчетности
			|ИЗ
			|	Документ.АвансовыйОтчет.Прочее КАК АвансовыйОтчетПрочее
			|ГДЕ
			|	АвансовыйОтчетПрочее.Ссылка В(&ДокументОснованиеАО)
			|	И АвансовыйОтчетПрочее.ПредъявленСФ
			|	И АвансовыйОтчетПрочее.СчетФактура = &ТекущийДокумент
			|
			|СГРУППИРОВАТЬ ПО
			|	АвансовыйОтчетПрочее.Поставщик,
			|	АвансовыйОтчетПрочее.Ссылка.ВалютаДокумента,
			|	АвансовыйОтчетПрочее.Ссылка.Организация,
			|	ВЫБОР
			|		КОГДА АвансовыйОтчетПрочее.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
			|			ТОГДА 0
			|		ИНАЧЕ 1
			|	КОНЕЦ,
			|	АвансовыйОтчетПрочее.БланкСтрогойОтчетности
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	АвансовыйОтчетТовары.Ссылка.Организация,
			|	АвансовыйОтчетТовары.Поставщик,
			|	НЕОПРЕДЕЛЕНО,
			|	"""",
			|	СУММА(ВЫБОР
			|			КОГДА АвансовыйОтчетТовары.Ссылка.СуммаВключаетНДС
			|				ТОГДА АвансовыйОтчетТовары.Сумма
			|			ИНАЧЕ АвансовыйОтчетТовары.Сумма + АвансовыйОтчетТовары.СуммаНДС
			|		КОНЕЦ),
			|	АвансовыйОтчетТовары.Ссылка.ВалютаДокумента,
			|	СУММА(АвансовыйОтчетТовары.СуммаНДС),
			|	0,
			|	0,
			|	ВЫБОР
			|		КОГДА АвансовыйОтчетТовары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
			|			ТОГДА 0
			|		ИНАЧЕ 1
			|	КОНЕЦ,
			|	ЛОЖЬ
			|ИЗ
			|	Документ.АвансовыйОтчет.Товары КАК АвансовыйОтчетТовары
			|ГДЕ
			|	АвансовыйОтчетТовары.Ссылка В(&ДокументОснованиеАО)
			|	И АвансовыйОтчетТовары.СчетФактура = &ТекущийДокумент
			|	И АвансовыйОтчетТовары.ПредъявленСФ
			|
			|СГРУППИРОВАТЬ ПО
			|	АвансовыйОтчетТовары.Поставщик,
			|	АвансовыйОтчетТовары.Ссылка.ВалютаДокумента,
			|	АвансовыйОтчетТовары.Ссылка.Организация,
			|	ВЫБОР
			|		КОГДА АвансовыйОтчетТовары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
			|			ТОГДА 0
			|		ИНАЧЕ 1
			|	КОНЕЦ";
		
		ИначеЕсли ТипДокументаОснования = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах")
			И ТипЗнч(Ссылка) <> Тип("ДокументСсылка.СчетФактураПолученный") Тогда
			
			// Для данного документа применяется специфический запрос для расчета параметров счета-фактуры
			ИспользуетсяРАУЗ = глЗначениеПеременной("ИспользоватьРасширеннуюАналитикуУчетаНоменклатурыИЗатрат")
				И (глЗначениеПеременной("ДатаНачалаИспользованияРасширеннойАналитикиУчетаНоменклатурыИЗатрат") <= ДокументыОснования[0].Дата);
			Запрос.УстановитьПараметр("ИспользуетсяРАУЗ", ИспользуетсяРАУЗ);
			Запрос.УстановитьПараметр("ДокументыОснования", ДокументыОснования);
			ТекстЗапроса =
			"ВЫБРАТЬ
			|	СУММА(ПартииТоваровПереданныеБухгалтерскийУчет.Количество) КАК Количество,
			|	ПартииТоваровПереданныеБухгалтерскийУчет.НомерСтрокиСписанныхТоваров КАК НомерСтроки,
			|	ПартииТоваровПереданныеБухгалтерскийУчет.Регистратор
			|ПОМЕСТИТЬ РеализованныеТоварыКомитента
			|ИЗ
			|	РегистрНакопления.ПартииТоваровПереданныеБухгалтерскийУчет КАК ПартииТоваровПереданныеБухгалтерскийУчет
			|ГДЕ
			|	ПартииТоваровПереданныеБухгалтерскийУчет.СчетУчета = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ТоварыПереданныеНаКомиссию)
			|	И ПартииТоваровПереданныеБухгалтерскийУчет.Активность
			|	И ПартииТоваровПереданныеБухгалтерскийУчет.Регистратор В(&ДокументыОснования)
			|	И НЕ &ИспользуетсяРАУЗ
			|
			|СГРУППИРОВАТЬ ПО
			|	ПартииТоваровПереданныеБухгалтерскийУчет.НомерСтрокиСписанныхТоваров,
			|	ПартииТоваровПереданныеБухгалтерскийУчет.Регистратор
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ОтчетКомиссионераОПродажах.Ссылка КАК Ссылка,
			|	ОтчетКомиссионераОПродажах.Ссылка.Организация КАК Организация,
			|	ОтчетКомиссионераОПродажах.Ссылка.ВалютаДокумента КАК ВалютаДокумента,
			|	ОтчетКомиссионераОПродажах.Ссылка.СуммаВключаетНДС КАК СуммаВключаетНДС
			|ПОМЕСТИТЬ ВТ_ОтчетКомиссионераОПродажах
			|ИЗ
			|	Документ.ОтчетКомиссионераОПродажах.Покупатели КАК ОтчетКомиссионераОПродажах
			|ГДЕ
			|	ОтчетКомиссионераОПродажах.Ссылка В(&ДокументыОснования)
			|	И ОтчетКомиссионераОПродажах.ВыставленСФ
			|	И ОтчетКомиссионераОПродажах.СчетФактура = &ТекущийДокумент
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Ссылка
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ОтчетКомиссионераОПродажахТовары.КлючСтроки КАК КлючСтроки,
			|	СУММА(ОтчетКомиссионераОПродажахТовары.Сумма) КАК Сумма,
			|	СУММА(ОтчетКомиссионераОПродажахТовары.СуммаНДС) КАК СуммаНДС,
			|	СУММА(ВЫБОР
			|			КОГДА ОтчетКомиссионераОПродажахТовары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
			|				ТОГДА 0
			|			ИНАЧЕ 1
			|		КОНЕЦ) КАК ЕстьНДС,
			|	СУММА(ВЫБОР
			|			КОГДА &ИспользуетсяРАУЗ
			|					И ОтчетКомиссионераОПродажахТовары.ПринадлежностьНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ПринадлежностьНоменклатуры.Принятый)
			|				ТОГДА ОтчетКомиссионераОПродажахТовары.Сумма + ВЫБОР
			|						КОГДА ОтчетКомиссионераОПродажахТовары.Ссылка.СуммаВключаетНДС
			|							ТОГДА 0
			|						ИНАЧЕ ОтчетКомиссионераОПродажахТовары.СуммаНДС
			|					КОНЕЦ
			|			КОГДА НЕ &ИспользуетсяРАУЗ
			|				ТОГДА ВЫБОР
			|						КОГДА РеализованныеТоварыКомитента.Количество ЕСТЬ NULL 
			|							ТОГДА 0
			|						КОГДА ОтчетКомиссионераОПродажахТовары.Количество = РеализованныеТоварыКомитента.Количество
			|							ТОГДА ОтчетКомиссионераОПродажахТовары.Сумма + ВЫБОР
			|									КОГДА ОтчетКомиссионераОПродажахТовары.Ссылка.СуммаВключаетНДС
			|										ТОГДА 0
			|									ИНАЧЕ ОтчетКомиссионераОПродажахТовары.СуммаНДС
			|								КОНЕЦ
			|						ИНАЧЕ (ОтчетКомиссионераОПродажахТовары.Сумма + ВЫБОР
			|								КОГДА ОтчетКомиссионераОПродажахТовары.Ссылка.СуммаВключаетНДС
			|									ТОГДА 0
			|								ИНАЧЕ ОтчетКомиссионераОПродажахТовары.СуммаНДС
			|							КОНЕЦ) / ОтчетКомиссионераОПродажахТовары.Количество * РеализованныеТоварыКомитента.Количество
			|					КОНЕЦ
			|			ИНАЧЕ 0
			|		КОНЕЦ) КАК СуммаДокументаКомиссия,
			|	СУММА(ВЫБОР
			|			КОГДА &ИспользуетсяРАУЗ
			|					И ОтчетКомиссионераОПродажахТовары.ПринадлежностьНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ПринадлежностьНоменклатуры.Принятый)
			|				ТОГДА ОтчетКомиссионераОПродажахТовары.СуммаНДС
			|			КОГДА НЕ &ИспользуетсяРАУЗ
			|				ТОГДА ВЫБОР
			|						КОГДА РеализованныеТоварыКомитента.Количество ЕСТЬ NULL 
			|							ТОГДА 0
			|						КОГДА ОтчетКомиссионераОПродажахТовары.Количество = РеализованныеТоварыКомитента.Количество
			|							ТОГДА ОтчетКомиссионераОПродажахТовары.СуммаНДС
			|						ИНАЧЕ РеализованныеТоварыКомитента.Количество * (ОтчетКомиссионераОПродажахТовары.СуммаНДС / ОтчетКомиссионераОПродажахТовары.Количество)
			|					КОНЕЦ
			|			ИНАЧЕ 0
			|		КОНЕЦ) КАК СуммаНДСДокументаКомиссия
			|ПОМЕСТИТЬ ВТ_Суммы
			|ИЗ
			|	ВТ_ОтчетКомиссионераОПродажах КАК ВТ_ОтчетКомиссионераОПродажах
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОтчетКомиссионераОПродажах.Товары КАК ОтчетКомиссионераОПродажахТовары
			|			ЛЕВОЕ СОЕДИНЕНИЕ РеализованныеТоварыКомитента КАК РеализованныеТоварыКомитента
			|			ПО ОтчетКомиссионераОПродажахТовары.Ссылка = РеализованныеТоварыКомитента.Регистратор
			|				И ОтчетКомиссионераОПродажахТовары.НомерСтроки = РеализованныеТоварыКомитента.НомерСтроки
			|		ПО ВТ_ОтчетКомиссионераОПродажах.Ссылка = ОтчетКомиссионераОПродажахТовары.Ссылка
			|
			|СГРУППИРОВАТЬ ПО
			|	ОтчетКомиссионераОПродажахТовары.КлючСтроки
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	КлючСтроки
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВТ_ОтчетКомиссионераОПродажах.Организация КАК Организация,
			|	ОтчетКомиссионераОПродажахПокупатели.Покупатель КАК Контрагент,
			|	ОтчетКомиссионераОПродажахПокупатели.ДатаСФ КАК Дата,
			|	ВЫБОР
			|		КОГДА ОтчетКомиссионераОПродажахПокупатели.Покупатель = ОтчетКомиссионераОПродажахПокупатели.Ссылка.Контрагент
			|			ТОГДА НЕОПРЕДЕЛЕНО
			|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
			|	КОНЕЦ КАК Договор,
			|	"""" КАК ИдентификаторГосКонтракта,
			|	СУММА(ВТ_Суммы.Сумма + ВЫБОР
			|			КОГДА ВТ_ОтчетКомиссионераОПродажах.СуммаВключаетНДС
			|				ТОГДА 0
			|			ИНАЧЕ ВТ_Суммы.СуммаНДС
			|		КОНЕЦ) КАК СуммаДокумента,
			|	СУММА(ВТ_Суммы.СуммаНДС) КАК СуммаНДСДокумента,
			|	ВТ_ОтчетКомиссионераОПродажах.ВалютаДокумента КАК ВалютаДокумента,
			|	СУММА(ВТ_Суммы.ЕстьНДС) КАК ЕстьНДС,
			|	ЛОЖЬ КАК БланкСтрогойОтчетности,
			|	СУММА(ВТ_Суммы.СуммаДокументаКомиссия) КАК СуммаДокументаКомиссия,
			|	СУММА(ВТ_Суммы.СуммаНДСДокументаКомиссия) КАК СуммаНДСДокументаКомиссия
			|ИЗ
			|	Документ.ОтчетКомиссионераОПродажах.Покупатели КАК ОтчетКомиссионераОПродажахПокупатели
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ОтчетКомиссионераОПродажах КАК ВТ_ОтчетКомиссионераОПродажах
			|		ПО ОтчетКомиссионераОПродажахПокупатели.Ссылка = ВТ_ОтчетКомиссионераОПродажах.Ссылка
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Суммы КАК ВТ_Суммы
			|		ПО ОтчетКомиссионераОПродажахПокупатели.КлючСтроки = ВТ_Суммы.КлючСтроки
			|ГДЕ
			|	ОтчетКомиссионераОПродажахПокупатели.СчетФактура = &ТекущийДокумент
			|
			|СГРУППИРОВАТЬ ПО
			|	ВТ_ОтчетКомиссионераОПродажах.ВалютаДокумента,
			|	ОтчетКомиссионераОПродажахПокупатели.Покупатель,
			|	ВТ_ОтчетКомиссионераОПродажах.Организация,
			|	ВЫБОР
			|		КОГДА ОтчетКомиссионераОПродажахПокупатели.Покупатель = ОтчетКомиссионераОПродажахПокупатели.Ссылка.Контрагент
			|			ТОГДА НЕОПРЕДЕЛЕНО
			|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
			|	КОНЕЦ,
			|	ОтчетКомиссионераОПродажахПокупатели.ДатаСФ";
			
		ИначеЕсли ТипДокументаОснования = Тип("ДокументСсылка.КорректировкаПоступления") Тогда
			
			Запрос.УстановитьПараметр("ДокументОснование_КорректировкаПоступления", ДокументыОснования);
			Запрос.УстановитьПараметр("КорректировочныйСчетФактура", СчетФактура.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.Корректировочный);
			
			ТекстЗапроса = 
			"ВЫБРАТЬ
			|	КорректировкаПоступленияТовары.Ссылка КАК Документ,
			|	КорректировкаПоступленияТовары.Ссылка.Организация КАК Организация,
			|	КорректировкаПоступленияТовары.Ссылка.Контрагент КАК Контрагент,
			|	КорректировкаПоступленияТовары.Ссылка.ДоговорКонтрагента КАК Договор,
			|	ВЫБОР
			|		КОГДА НЕ &КорректировочныйСчетФактура
			|			ТОГДА 0
			|		ИНАЧЕ ВЫБОР
			|				КОГДА КорректировкаПоступленияТовары.Ссылка.СуммаВключаетНДС
			|					ТОГДА ВЫБОР
			|							КОГДА КорректировкаПоступленияТовары.Сумма - КорректировкаПоступленияТовары.СуммаДоИзменения > 0
			|								ТОГДА КорректировкаПоступленияТовары.Сумма - КорректировкаПоступленияТовары.СуммаДоИзменения
			|							ИНАЧЕ 0
			|						КОНЕЦ
			|				ИНАЧЕ ВЫБОР
			|						КОГДА КорректировкаПоступленияТовары.Сумма + КорректировкаПоступленияТовары.СуммаНДС - (КорректировкаПоступленияТовары.СуммаДоИзменения + КорректировкаПоступленияТовары.СуммаНДСДоИзменения) > 0
			|							ТОГДА КорректировкаПоступленияТовары.Сумма + КорректировкаПоступленияТовары.СуммаНДС - (КорректировкаПоступленияТовары.СуммаДоИзменения + КорректировкаПоступленияТовары.СуммаНДСДоИзменения)
			|						ИНАЧЕ 0
			|					КОНЕЦ
			|			КОНЕЦ
			|	КОНЕЦ КАК СуммаУвеличение,
			|	ВЫБОР
			|		КОГДА НЕ &КорректировочныйСчетФактура
			|			ТОГДА 0
			|		ИНАЧЕ ВЫБОР
			|				КОГДА КорректировкаПоступленияТовары.Ссылка.СуммаВключаетНДС
			|					ТОГДА ВЫБОР
			|							КОГДА КорректировкаПоступленияТовары.Сумма - КорректировкаПоступленияТовары.СуммаДоИзменения < 0
			|								ТОГДА КорректировкаПоступленияТовары.СуммаДоИзменения - КорректировкаПоступленияТовары.Сумма
			|							ИНАЧЕ 0
			|						КОНЕЦ
			|				ИНАЧЕ ВЫБОР
			|						КОГДА КорректировкаПоступленияТовары.Сумма + КорректировкаПоступленияТовары.СуммаНДС - (КорректировкаПоступленияТовары.СуммаДоИзменения + КорректировкаПоступленияТовары.СуммаНДСДоИзменения) < 0
			|							ТОГДА КорректировкаПоступленияТовары.СуммаДоИзменения + КорректировкаПоступленияТовары.СуммаНДСДоИзменения - (КорректировкаПоступленияТовары.Сумма + КорректировкаПоступленияТовары.СуммаНДС)
			|						ИНАЧЕ 0
			|					КОНЕЦ
			|			КОНЕЦ
			|	КОНЕЦ КАК СуммаУменьшение,
			|	КорректировкаПоступленияТовары.Ссылка.ВалютаДокумента КАК ВалютаДокумента,
			|	ВЫБОР
			|		КОГДА НЕ &КорректировочныйСчетФактура
			|			ТОГДА 0
			|		ИНАЧЕ ВЫБОР
			|				КОГДА КорректировкаПоступленияТовары.СуммаНДС - КорректировкаПоступленияТовары.СуммаНДСДоИзменения > 0
			|					ТОГДА КорректировкаПоступленияТовары.СуммаНДС - КорректировкаПоступленияТовары.СуммаНДСДоИзменения
			|				ИНАЧЕ 0
			|			КОНЕЦ
			|	КОНЕЦ КАК СуммаНДСУвеличение,
			|	ВЫБОР
			|		КОГДА НЕ &КорректировочныйСчетФактура
			|			ТОГДА 0
			|		ИНАЧЕ ВЫБОР
			|				КОГДА КорректировкаПоступленияТовары.СуммаНДС - КорректировкаПоступленияТовары.СуммаНДСДоИзменения < 0
			|					ТОГДА КорректировкаПоступленияТовары.СуммаНДСДоИзменения - КорректировкаПоступленияТовары.СуммаНДС
			|				ИНАЧЕ 0
			|			КОНЕЦ
			|	КОНЕЦ КАК СуммаНДСУменьшение,
			|	ВЫБОР
			|		КОГДА НЕ &КорректировочныйСчетФактура
			|			ТОГДА ВЫБОР
			|					КОГДА КорректировкаПоступленияТовары.Ссылка.СуммаВключаетНДС
			|						ТОГДА КорректировкаПоступленияТовары.Сумма
			|					ИНАЧЕ КорректировкаПоступленияТовары.Сумма + КорректировкаПоступленияТовары.СуммаНДС
			|				КОНЕЦ
			|		ИНАЧЕ ВЫБОР
			|				КОГДА КорректировкаПоступленияТовары.Ссылка.СуммаВключаетНДС
			|					ТОГДА КорректировкаПоступленияТовары.Сумма - КорректировкаПоступленияТовары.СуммаДоИзменения
			|				ИНАЧЕ КорректировкаПоступленияТовары.Сумма + КорректировкаПоступленияТовары.СуммаНДС - (КорректировкаПоступленияТовары.СуммаДоИзменения + КорректировкаПоступленияТовары.СуммаНДСДоИзменения)
			|			КОНЕЦ
			|	КОНЕЦ КАК СуммаДокумента,
			|	ВЫБОР
			|		КОГДА НЕ &КорректировочныйСчетФактура
			|			ТОГДА КорректировкаПоступленияТовары.СуммаНДС
			|		ИНАЧЕ КорректировкаПоступленияТовары.СуммаНДС - КорректировкаПоступленияТовары.СуммаНДСДоИзменения
			|	КОНЕЦ КАК СуммаНДСДокумента,
			|	ВЫБОР
			|		КОГДА КорректировкаПоступленияТовары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
			|			ТОГДА 0
			|		ИНАЧЕ 1
			|	КОНЕЦ КАК ЕстьНДС,
			|	ЛОЖЬ КАК БланкСтрогойОтчетности
			|ПОМЕСТИТЬ КорректировкаПоступления
			|ИЗ
			|	Документ.КорректировкаПоступления.Товары КАК КорректировкаПоступленияТовары
			|ГДЕ
			|	КорректировкаПоступленияТовары.Ссылка В(&ДокументОснование_КорректировкаПоступления)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	КорректировкаПоступленияУслуги.Ссылка,
			|	КорректировкаПоступленияУслуги.Ссылка.Организация,
			|	КорректировкаПоступленияУслуги.Ссылка.Контрагент,
			|	КорректировкаПоступленияУслуги.Ссылка.ДоговорКонтрагента,
			|	ВЫБОР
			|		КОГДА НЕ &КорректировочныйСчетФактура
			|			ТОГДА 0
			|		ИНАЧЕ ВЫБОР
			|				КОГДА КорректировкаПоступленияУслуги.Ссылка.СуммаВключаетНДС
			|					ТОГДА ВЫБОР
			|							КОГДА КорректировкаПоступленияУслуги.Сумма - КорректировкаПоступленияУслуги.СуммаДоИзменения > 0
			|								ТОГДА КорректировкаПоступленияУслуги.Сумма - КорректировкаПоступленияУслуги.СуммаДоИзменения
			|							ИНАЧЕ 0
			|						КОНЕЦ
			|				ИНАЧЕ ВЫБОР
			|						КОГДА КорректировкаПоступленияУслуги.Сумма + КорректировкаПоступленияУслуги.СуммаНДС - (КорректировкаПоступленияУслуги.СуммаДоИзменения + КорректировкаПоступленияУслуги.СуммаНДСДоИзменения) > 0
			|							ТОГДА КорректировкаПоступленияУслуги.Сумма + КорректировкаПоступленияУслуги.СуммаНДС - (КорректировкаПоступленияУслуги.СуммаДоИзменения + КорректировкаПоступленияУслуги.СуммаНДСДоИзменения)
			|						ИНАЧЕ 0
			|					КОНЕЦ
			|			КОНЕЦ
			|	КОНЕЦ,
			|	ВЫБОР
			|		КОГДА НЕ &КорректировочныйСчетФактура
			|			ТОГДА 0
			|		ИНАЧЕ ВЫБОР
			|				КОГДА КорректировкаПоступленияУслуги.Ссылка.СуммаВключаетНДС
			|					ТОГДА ВЫБОР
			|							КОГДА КорректировкаПоступленияУслуги.Сумма - КорректировкаПоступленияУслуги.СуммаДоИзменения < 0
			|								ТОГДА КорректировкаПоступленияУслуги.СуммаДоИзменения - КорректировкаПоступленияУслуги.Сумма
			|							ИНАЧЕ 0
			|						КОНЕЦ
			|				ИНАЧЕ ВЫБОР
			|						КОГДА КорректировкаПоступленияУслуги.Сумма + КорректировкаПоступленияУслуги.СуммаНДС - (КорректировкаПоступленияУслуги.СуммаДоИзменения + КорректировкаПоступленияУслуги.СуммаНДСДоИзменения) < 0
			|							ТОГДА КорректировкаПоступленияУслуги.СуммаДоИзменения + КорректировкаПоступленияУслуги.СуммаНДСДоИзменения - (КорректировкаПоступленияУслуги.Сумма + КорректировкаПоступленияУслуги.СуммаНДС)
			|						ИНАЧЕ 0
			|					КОНЕЦ
			|			КОНЕЦ
			|	КОНЕЦ,
			|	КорректировкаПоступленияУслуги.Ссылка.ВалютаДокумента,
			|	ВЫБОР
			|		КОГДА НЕ &КорректировочныйСчетФактура
			|			ТОГДА 0
			|		ИНАЧЕ ВЫБОР
			|				КОГДА КорректировкаПоступленияУслуги.СуммаНДС - КорректировкаПоступленияУслуги.СуммаНДСДоИзменения > 0
			|					ТОГДА КорректировкаПоступленияУслуги.СуммаНДС - КорректировкаПоступленияУслуги.СуммаНДСДоИзменения
			|				ИНАЧЕ 0
			|			КОНЕЦ
			|	КОНЕЦ,
			|	ВЫБОР
			|		КОГДА НЕ &КорректировочныйСчетФактура
			|			ТОГДА 0
			|		ИНАЧЕ ВЫБОР
			|				КОГДА КорректировкаПоступленияУслуги.СуммаНДС - КорректировкаПоступленияУслуги.СуммаНДСДоИзменения < 0
			|					ТОГДА КорректировкаПоступленияУслуги.СуммаНДСДоИзменения - КорректировкаПоступленияУслуги.СуммаНДС
			|				ИНАЧЕ 0
			|			КОНЕЦ
			|	КОНЕЦ,
			|	ВЫБОР
			|		КОГДА НЕ &КорректировочныйСчетФактура
			|			ТОГДА ВЫБОР
			|					КОГДА КорректировкаПоступленияУслуги.Ссылка.СуммаВключаетНДС
			|						ТОГДА КорректировкаПоступленияУслуги.Сумма
			|					ИНАЧЕ КорректировкаПоступленияУслуги.Сумма + КорректировкаПоступленияУслуги.СуммаНДС
			|				КОНЕЦ
			|		ИНАЧЕ ВЫБОР
			|				КОГДА КорректировкаПоступленияУслуги.Ссылка.СуммаВключаетНДС
			|					ТОГДА КорректировкаПоступленияУслуги.Сумма - КорректировкаПоступленияУслуги.СуммаДоИзменения
			|				ИНАЧЕ КорректировкаПоступленияУслуги.Сумма + КорректировкаПоступленияУслуги.СуммаНДС - (КорректировкаПоступленияУслуги.СуммаДоИзменения + КорректировкаПоступленияУслуги.СуммаНДСДоИзменения)
			|			КОНЕЦ
			|	КОНЕЦ,
			|	ВЫБОР
			|		КОГДА НЕ &КорректировочныйСчетФактура
			|			ТОГДА КорректировкаПоступленияУслуги.СуммаНДС
			|		ИНАЧЕ КорректировкаПоступленияУслуги.СуммаНДС - КорректировкаПоступленияУслуги.СуммаНДСДоИзменения
			|	КОНЕЦ,
			|	ВЫБОР
			|		КОГДА КорректировкаПоступленияУслуги.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
			|			ТОГДА 0
			|		ИНАЧЕ 1
			|	КОНЕЦ,
			|	ЛОЖЬ
			|ИЗ
			|	Документ.КорректировкаПоступления.Услуги КАК КорректировкаПоступленияУслуги
			|ГДЕ
			|	КорректировкаПоступленияУслуги.Ссылка В(&ДокументОснование_КорректировкаПоступления)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	КорректировкаПоступления.Документ,
			|	КорректировкаПоступления.Организация,
			|	КорректировкаПоступления.Контрагент,
			|	КорректировкаПоступления.Договор,
			|	"""" КАК ИдентификаторГосКонтракта,
			|	КорректировкаПоступления.ВалютаДокумента,
			|	СУММА(КорректировкаПоступления.СуммаУвеличение) КАК СуммаУвеличение,
			|	СУММА(КорректировкаПоступления.СуммаУменьшение) КАК СуммаУменьшение,
			|	СУММА(КорректировкаПоступления.СуммаНДСУвеличение) КАК СуммаНДСУвеличение,
			|	СУММА(КорректировкаПоступления.СуммаНДСУменьшение) КАК СуммаНДСУменьшение,
			|	СУММА(КорректировкаПоступления.СуммаДокумента) КАК СуммаДокумента,
			|	СУММА(КорректировкаПоступления.СуммаНДСДокумента) КАК СуммаНДСДокумента,
			|	СУММА(КорректировкаПоступления.ЕстьНДС) КАК ЕстьНДС
			|ИЗ
			|	КорректировкаПоступления КАК КорректировкаПоступления
			|
			|СГРУППИРОВАТЬ ПО
			|	КорректировкаПоступления.Организация,
			|	КорректировкаПоступления.Контрагент,
			|	КорректировкаПоступления.Договор,
			|	КорректировкаПоступления.Документ,
			|	КорректировкаПоступления.ВалютаДокумента
			|ИТОГИ
			|	СУММА(СуммаУвеличение),
			|	СУММА(СуммаУменьшение),
			|	СУММА(СуммаНДСУвеличение),
			|	СУММА(СуммаНДСУменьшение),
			|	СУММА(СуммаДокумента),
			|	СУММА(СуммаНДСДокумента),
			|	СУММА(ЕстьНДС)
			|ПО
			|	ОБЩИЕ";
			
			Если СчетФактура.Исправление Тогда
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ДоИзменения", "ДоКорректировки");
			КонецЕсли;
			
		ИначеЕсли ТипДокументаОснования = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
			
			Запрос.УстановитьПараметр("ДокументОснование_КорректировкаРеализации", ДокументыОснования);
			Запрос.УстановитьПараметр("КорректировочныйСчетФактура", СчетФактура.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный);
			
			ТекстЗапроса = 
			"ВЫБРАТЬ
			|	КорректировкаРеализацииТовары.Ссылка КАК Документ,
			|	КорректировкаРеализацииТовары.Ссылка.Организация КАК Организация,
			|	КорректировкаРеализацииТовары.Ссылка.Контрагент КАК Контрагент,
			|	КорректировкаРеализацииТовары.Ссылка.ДоговорКонтрагента КАК Договор,
			|	КорректировкаРеализацииТовары.Ссылка.ВалютаДокумента КАК ВалютаДокумента,
			|	ВЫБОР
			|		КОГДА НЕ &КорректировочныйСчетФактура
			|			ТОГДА 0
			|		ИНАЧЕ ВЫБОР
			|				КОГДА КорректировкаРеализацииТовары.Ссылка.СуммаВключаетНДС
			|					ТОГДА ВЫБОР
			|							КОГДА КорректировкаРеализацииТовары.Сумма - КорректировкаРеализацииТовары.СуммаДоИзменения > 0
			|								ТОГДА КорректировкаРеализацииТовары.Сумма - КорректировкаРеализацииТовары.СуммаДоИзменения
			|							ИНАЧЕ 0
			|						КОНЕЦ
			|				ИНАЧЕ ВЫБОР
			|						КОГДА КорректировкаРеализацииТовары.Сумма + КорректировкаРеализацииТовары.СуммаНДС - (КорректировкаРеализацииТовары.СуммаДоИзменения + КорректировкаРеализацииТовары.СуммаНДСДоИзменения) > 0
			|							ТОГДА КорректировкаРеализацииТовары.Сумма + КорректировкаРеализацииТовары.СуммаНДС - (КорректировкаРеализацииТовары.СуммаДоИзменения + КорректировкаРеализацииТовары.СуммаНДСДоИзменения)
			|						ИНАЧЕ 0
			|					КОНЕЦ
			|			КОНЕЦ
			|	КОНЕЦ КАК СуммаУвеличение,
			|	ВЫБОР
			|		КОГДА НЕ &КорректировочныйСчетФактура
			|			ТОГДА 0
			|		ИНАЧЕ ВЫБОР
			|				КОГДА КорректировкаРеализацииТовары.Ссылка.СуммаВключаетНДС
			|					ТОГДА ВЫБОР
			|							КОГДА КорректировкаРеализацииТовары.Сумма - КорректировкаРеализацииТовары.СуммаДоИзменения < 0
			|								ТОГДА КорректировкаРеализацииТовары.СуммаДоИзменения - КорректировкаРеализацииТовары.Сумма
			|							ИНАЧЕ 0
			|						КОНЕЦ
			|				ИНАЧЕ ВЫБОР
			|						КОГДА КорректировкаРеализацииТовары.Сумма + КорректировкаРеализацииТовары.СуммаНДС - (КорректировкаРеализацииТовары.СуммаДоИзменения + КорректировкаРеализацииТовары.СуммаНДСДоИзменения) < 0
			|							ТОГДА КорректировкаРеализацииТовары.СуммаДоИзменения + КорректировкаРеализацииТовары.СуммаНДСДоИзменения - (КорректировкаРеализацииТовары.Сумма + КорректировкаРеализацииТовары.СуммаНДС)
			|						ИНАЧЕ 0
			|					КОНЕЦ
			|			КОНЕЦ
			|	КОНЕЦ КАК СуммаУменьшение,
			|	ВЫБОР
			|		КОГДА НЕ &КорректировочныйСчетФактура
			|			ТОГДА 0
			|		ИНАЧЕ ВЫБОР
			|				КОГДА КорректировкаРеализацииТовары.СуммаНДС - КорректировкаРеализацииТовары.СуммаНДСДоИзменения > 0
			|					ТОГДА КорректировкаРеализацииТовары.СуммаНДС - КорректировкаРеализацииТовары.СуммаНДСДоИзменения
			|				ИНАЧЕ 0
			|			КОНЕЦ
			|	КОНЕЦ КАК СуммаНДСУвеличение,
			|	ВЫБОР
			|		КОГДА НЕ &КорректировочныйСчетФактура
			|			ТОГДА 0
			|		ИНАЧЕ ВЫБОР
			|				КОГДА КорректировкаРеализацииТовары.СуммаНДС - КорректировкаРеализацииТовары.СуммаНДСДоИзменения < 0
			|					ТОГДА КорректировкаРеализацииТовары.СуммаНДСДоИзменения - КорректировкаРеализацииТовары.СуммаНДС
			|				ИНАЧЕ 0
			|			КОНЕЦ
			|	КОНЕЦ КАК СуммаНДСУменьшение,
			|	ВЫБОР
			|		КОГДА НЕ &КорректировочныйСчетФактура
			|			ТОГДА ВЫБОР
			|					КОГДА КорректировкаРеализацииТовары.Ссылка.СуммаВключаетНДС
			|						ТОГДА КорректировкаРеализацииТовары.Сумма
			|					ИНАЧЕ КорректировкаРеализацииТовары.Сумма + КорректировкаРеализацииТовары.СуммаНДС
			|				КОНЕЦ
			|		ИНАЧЕ ВЫБОР
			|				КОГДА КорректировкаРеализацииТовары.Ссылка.СуммаВключаетНДС
			|					ТОГДА КорректировкаРеализацииТовары.Сумма - КорректировкаРеализацииТовары.СуммаДоИзменения
			|				ИНАЧЕ КорректировкаРеализацииТовары.Сумма + КорректировкаРеализацииТовары.СуммаНДС - (КорректировкаРеализацииТовары.СуммаДоИзменения + КорректировкаРеализацииТовары.СуммаНДСДоИзменения)
			|			КОНЕЦ
			|	КОНЕЦ КАК СуммаДокумента,
			|	ВЫБОР
			|		КОГДА НЕ &КорректировочныйСчетФактура
			|			ТОГДА КорректировкаРеализацииТовары.СуммаНДС
			|		ИНАЧЕ КорректировкаРеализацииТовары.СуммаНДС - КорректировкаРеализацииТовары.СуммаНДСДоИзменения
			|	КОНЕЦ КАК СуммаНДСДокумента,
			|	ВЫБОР
			|		КОГДА КорректировкаРеализацииТовары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
			|			ТОГДА 0
			|		ИНАЧЕ 1
			|	КОНЕЦ КАК ЕстьНДС,
			|	ЛОЖЬ КАК БланкСтрогойОтчетности
			|ПОМЕСТИТЬ КорректировкаРеализации
			|ИЗ
			|	Документ.КорректировкаРеализации.Товары КАК КорректировкаРеализацииТовары
			|ГДЕ
			|	КорректировкаРеализацииТовары.Ссылка В(&ДокументОснование_КорректировкаРеализации)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	КорректировкаРеализацииУслуги.Ссылка,
			|	КорректировкаРеализацииУслуги.Ссылка.Организация,
			|	КорректировкаРеализацииУслуги.Ссылка.Контрагент,
			|	КорректировкаРеализацииУслуги.Ссылка.ДоговорКонтрагента,
			|	КорректировкаРеализацииУслуги.Ссылка.ВалютаДокумента,
			|	ВЫБОР
			|		КОГДА НЕ &КорректировочныйСчетФактура
			|			ТОГДА 0
			|		ИНАЧЕ ВЫБОР
			|				КОГДА КорректировкаРеализацииУслуги.Ссылка.СуммаВключаетНДС
			|					ТОГДА ВЫБОР
			|							КОГДА КорректировкаРеализацииУслуги.Сумма - КорректировкаРеализацииУслуги.СуммаДоИзменения > 0
			|								ТОГДА КорректировкаРеализацииУслуги.Сумма - КорректировкаРеализацииУслуги.СуммаДоИзменения
			|							ИНАЧЕ 0
			|						КОНЕЦ
			|				ИНАЧЕ ВЫБОР
			|						КОГДА КорректировкаРеализацииУслуги.Сумма + КорректировкаРеализацииУслуги.СуммаНДС - (КорректировкаРеализацииУслуги.СуммаДоИзменения + КорректировкаРеализацииУслуги.СуммаНДСДоИзменения) > 0
			|							ТОГДА КорректировкаРеализацииУслуги.Сумма + КорректировкаРеализацииУслуги.СуммаНДС - (КорректировкаРеализацииУслуги.СуммаДоИзменения + КорректировкаРеализацииУслуги.СуммаНДСДоИзменения)
			|						ИНАЧЕ 0
			|					КОНЕЦ
			|			КОНЕЦ
			|	КОНЕЦ,
			|	ВЫБОР
			|		КОГДА НЕ &КорректировочныйСчетФактура
			|			ТОГДА 0
			|		ИНАЧЕ ВЫБОР
			|				КОГДА КорректировкаРеализацииУслуги.Ссылка.СуммаВключаетНДС
			|					ТОГДА ВЫБОР
			|							КОГДА КорректировкаРеализацииУслуги.Сумма - КорректировкаРеализацииУслуги.СуммаДоИзменения < 0
			|								ТОГДА КорректировкаРеализацииУслуги.СуммаДоИзменения - КорректировкаРеализацииУслуги.Сумма
			|							ИНАЧЕ 0
			|						КОНЕЦ
			|				ИНАЧЕ ВЫБОР
			|						КОГДА КорректировкаРеализацииУслуги.Сумма + КорректировкаРеализацииУслуги.СуммаНДС - (КорректировкаРеализацииУслуги.СуммаДоИзменения + КорректировкаРеализацииУслуги.СуммаНДСДоИзменения) < 0
			|							ТОГДА КорректировкаРеализацииУслуги.СуммаДоИзменения + КорректировкаРеализацииУслуги.СуммаНДСДоИзменения - (КорректировкаРеализацииУслуги.Сумма + КорректировкаРеализацииУслуги.СуммаНДС)
			|						ИНАЧЕ 0
			|					КОНЕЦ
			|			КОНЕЦ
			|	КОНЕЦ,
			|	ВЫБОР
			|		КОГДА НЕ &КорректировочныйСчетФактура
			|			ТОГДА 0
			|		ИНАЧЕ ВЫБОР
			|				КОГДА КорректировкаРеализацииУслуги.СуммаНДС - КорректировкаРеализацииУслуги.СуммаНДСДоИзменения > 0
			|					ТОГДА КорректировкаРеализацииУслуги.СуммаНДС - КорректировкаРеализацииУслуги.СуммаНДСДоИзменения
			|				ИНАЧЕ 0
			|			КОНЕЦ
			|	КОНЕЦ,
			|	ВЫБОР
			|		КОГДА НЕ &КорректировочныйСчетФактура
			|			ТОГДА 0
			|		ИНАЧЕ ВЫБОР
			|				КОГДА КорректировкаРеализацииУслуги.СуммаНДС - КорректировкаРеализацииУслуги.СуммаНДСДоИзменения < 0
			|					ТОГДА КорректировкаРеализацииУслуги.СуммаНДСДоИзменения - КорректировкаРеализацииУслуги.СуммаНДС
			|				ИНАЧЕ 0
			|			КОНЕЦ
			|	КОНЕЦ,
			|	ВЫБОР
			|		КОГДА НЕ &КорректировочныйСчетФактура
			|			ТОГДА ВЫБОР
			|					КОГДА КорректировкаРеализацииУслуги.Ссылка.СуммаВключаетНДС
			|						ТОГДА КорректировкаРеализацииУслуги.Сумма
			|					ИНАЧЕ КорректировкаРеализацииУслуги.Сумма + КорректировкаРеализацииУслуги.СуммаНДС
			|				КОНЕЦ
			|		ИНАЧЕ ВЫБОР
			|				КОГДА КорректировкаРеализацииУслуги.Ссылка.СуммаВключаетНДС
			|					ТОГДА КорректировкаРеализацииУслуги.Сумма - КорректировкаРеализацииУслуги.СуммаДоИзменения
			|				ИНАЧЕ КорректировкаРеализацииУслуги.Сумма + КорректировкаРеализацииУслуги.СуммаНДС - (КорректировкаРеализацииУслуги.СуммаДоИзменения + КорректировкаРеализацииУслуги.СуммаНДСДоИзменения)
			|			КОНЕЦ
			|	КОНЕЦ,
			|	ВЫБОР
			|		КОГДА НЕ &КорректировочныйСчетФактура
			|			ТОГДА КорректировкаРеализацииУслуги.СуммаНДС
			|		ИНАЧЕ КорректировкаРеализацииУслуги.СуммаНДС - КорректировкаРеализацииУслуги.СуммаНДСДоИзменения
			|	КОНЕЦ,
			|	ВЫБОР
			|		КОГДА КорректировкаРеализацииУслуги.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
			|			ТОГДА 0
			|		ИНАЧЕ 1
			|	КОНЕЦ,
			|	ЛОЖЬ
			|ИЗ
			|	Документ.КорректировкаРеализации.Услуги КАК КорректировкаРеализацииУслуги
			|ГДЕ
			|	КорректировкаРеализацииУслуги.Ссылка В(&ДокументОснование_КорректировкаРеализации)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	КорректировкаРеализации.Документ,
			|	КорректировкаРеализации.Организация,
			|	КорректировкаРеализации.Контрагент,
			|	КорректировкаРеализации.Договор,
			|	ЕСТЬNULL(ГосКонтракты.ГосударственныйКонтрактКод, """") КАК ИдентификаторГосКонтракта,
			|	КорректировкаРеализации.ВалютаДокумента,
			|	СУММА(КорректировкаРеализации.СуммаУвеличение) КАК СуммаУвеличение,
			|	СУММА(КорректировкаРеализации.СуммаУменьшение) КАК СуммаУменьшение,
			|	СУММА(КорректировкаРеализации.СуммаНДСУвеличение) КАК СуммаНДСУвеличение,
			|	СУММА(КорректировкаРеализации.СуммаНДСУменьшение) КАК СуммаНДСУменьшение,
			|	СУММА(КорректировкаРеализации.СуммаДокумента) КАК СуммаДокумента,
			|	СУММА(КорректировкаРеализации.СуммаНДСДокумента) КАК СуммаНДСДокумента,
			|	СУММА(КорректировкаРеализации.ЕстьНДС) КАК ЕстьНДС
			|ИЗ
			|	КорректировкаРеализации КАК КорректировкаРеализации
			|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ ПЕРВЫЕ 1
			|			КорректировкаРеализации.Ссылка КАК Ссылка,
			|			КонтрактыСЗаказчиками.ГосударственныйКонтракт.Код КАК ГосударственныйКонтрактКод
			|		ИЗ
			|			Документ.КорректировкаРеализации КАК КорректировкаРеализации
			|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КонтрактыСЗаказчиками КАК КонтрактыСЗаказчиками
			|				ПО КорректировкаРеализации.ДоговорКонтрагента = КонтрактыСЗаказчиками.Договор
			|		ГДЕ
			|			КорректировкаРеализации.Ссылка В(&ДокументОснование_КорректировкаРеализации)
			|			И КонтрактыСЗаказчиками.ГосударственныйКонтракт <> ЗНАЧЕНИЕ(Справочник.ГосударственныеКонтракты.ПустаяСсылка)) КАК ГосКонтракты
			|		ПО КорректировкаРеализации.Документ = Госконтракты.Ссылка
			|
			|СГРУППИРОВАТЬ ПО
			|	КорректировкаРеализации.Организация,
			|	КорректировкаРеализации.Контрагент,
			|	КорректировкаРеализации.Договор,
			|	КорректировкаРеализации.Документ,
			|	КорректировкаРеализации.ВалютаДокумента,
			|	ЕСТЬNULL(ГосКонтракты.ГосударственныйКонтрактКод, """")
			|ИТОГИ
			|	СУММА(СуммаУвеличение),
			|	СУММА(СуммаУменьшение),
			|	СУММА(СуммаНДСУвеличение),
			|	СУММА(СуммаНДСУменьшение),
			|	СУММА(СуммаДокумента),
			|	СУММА(СуммаНДСДокумента),
			|	СУММА(ЕстьНДС)
			|ПО
			|	ОБЩИЕ";
			
			Если СчетФактура.Исправление Тогда
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ДоИзменения", "ДоКорректировки");
			КонецЕсли;

		ИначеЕсли ТипДокументаОснования = Тип("ДокументСсылка.НачислениеНДСпоСМРхозспособом") тогда 
			
			Запрос.УстановитьПараметр("ДокументОснование_НачислениеНДСпоСМРхозспособом", ДокументыОснования);
		
			ТекстЗапроса = 
			"ВЫБРАТЬ
			|	НачислениеНДСпоСМРхозспособом.Ссылка.Организация,
			|	НЕОПРЕДЕЛЕНО КАК Контрагент,
			|	НЕОПРЕДЕЛЕНО КАК Договор,
			|	"""" КАК ИдентификаторГосКонтракта,
			|	СУММА(НачислениеНДСпоСМРхозспособом.СуммаБезНДС + НачислениеНДСпоСМРхозспособом.НДС) КАК СуммаДокумента,
			|	&ВалютаРегламентированногоУчета КАК ВалютаДокумента,
			|	СУММА(НачислениеНДСпоСМРхозспособом.НДС) КАК СуммаНДСДокумента,
			|	СУММА(0) КАК СуммаДокументаКомиссия,
			|	СУММА(0) КАК СуммаНДСДокументаКомиссия,
			|	1 КАК ЕстьНДС,
			|	ЛОЖЬ КАК БланкСтрогойОтчетности
			|ИЗ
			|	Документ.НачислениеНДСпоСМРхозспособом.СМРхозспособом КАК НачислениеНДСпоСМРхозспособом
			|ГДЕ
			|	НачислениеНДСпоСМРхозспособом.Ссылка В(&ДокументОснование_НачислениеНДСпоСМРхозспособом)
			|
			|СГРУППИРОВАТЬ ПО
			|	НачислениеНДСпоСМРхозспособом.Ссылка.Организация";
			
		ИначеЕсли ТипДокументаОснования = Тип("ДокументСсылка.ПринятиеКУчетуОС") Тогда
			
			Запрос.УстановитьПараметр("ДокументОснование_ПринятиеКУчетуОС", ДокументыОснования);
		
			ТекстЗапроса = 
			"ВЫБРАТЬ
			|	НДСНачисленныйОбороты.Организация КАК Организация,
			|	НЕОПРЕДЕЛЕНО КАК Контрагент,
			|	НЕОПРЕДЕЛЕНО КАК Договор,
			|	"""" КАК ИдентификаторГосКонтракта,
			|	НДСНачисленныйОбороты.СуммаБезНДСПриход + НДСНачисленныйОбороты.НДСПриход КАК СуммаДокумента,
			|	&ВалютаРегламентированногоУчета КАК ВалютаДокумента,
			|	НДСНачисленныйОбороты.НДСПриход КАК СуммаНДСДокумента,
			|	0 КАК СуммаДокументаКомиссия,
			|	0 КАК СуммаНДСДокументаКомиссия,
			|	1 КАК ЕстьНДС,
			|	ЛОЖЬ КАК БланкСтрогойОтчетности
			|ИЗ
			|	РегистрНакопления.НДСНачисленный.Обороты(
			|			,
			|			,
			|			Период,
			|			СчетФактура ССЫЛКА Документ.ПринятиеКУчетуОС
			|				И СчетФактура В (&ДокументОснование_ПринятиеКУчетуОС)) КАК НДСНачисленныйОбороты";

		ИначеЕсли ТипДокументаОснования = Тип("ДокументСсылка.МодернизацияОС") Тогда
			
			Запрос.УстановитьПараметр("ДокументОснование_МодернизацияОС", ДокументыОснования);
		
			ТекстЗапроса = 
			"ВЫБРАТЬ
			|	НДСНачисленныйОбороты.Организация КАК Организация,
			|	НЕОПРЕДЕЛЕНО КАК Контрагент,
			|	НЕОПРЕДЕЛЕНО КАК Договор,
			|	"""" КАК ИдентификаторГосКонтракта,
			|	НДСНачисленныйОбороты.СуммаБезНДСПриход + НДСНачисленныйОбороты.НДСПриход КАК СуммаДокумента,
			|	&ВалютаРегламентированногоУчета КАК ВалютаДокумента,
			|	НДСНачисленныйОбороты.НДСПриход КАК СуммаНДСДокумента,
			|	0 КАК СуммаДокументаКомиссия,
			|	0 КАК СуммаНДСДокументаКомиссия,
			|	1 КАК ЕстьНДС,
			|	ЛОЖЬ КАК БланкСтрогойОтчетности
			|ИЗ
			|	РегистрНакопления.НДСНачисленный.Обороты(
			|			,
			|			,
			|			Период,
			|			СчетФактура ССЫЛКА Документ.МодернизацияОС
			|				И СчетФактура В (&ДокументОснование_МодернизацияОС)) КАК НДСНачисленныйОбороты";
		ИначеЕсли ТипДокументаОснования = Тип("ДокументСсылка.РеализацияОтгруженныхТоваров") Тогда
			
			Запрос.УстановитьПараметр("ДокументОснование_РеализацияОтгруженныхТоваров", ДокументыОснования);
		
			ТекстЗапроса = 
			"ВЫБРАТЬ
			|	РеализацияОтгруженныхТоваров.Ссылка,
			|	РеализацияОтгруженныхТоваров.Организация,
			|	РеализацияОтгруженныхТоваров.Контрагент,
			|	РеализацияОтгруженныхТоваров.ДоговорКонтрагента КАК Договор,
			|	РеализацияОтгруженныхТоваров.СуммаДокумента КАК СуммаДокумента,
			|	РеализацияОтгруженныхТоваров.ДокументОтгрузки.ВалютаДокумента КАК ВалютаДокумента,
			|	РеализацияОтгруженныхТоваров.ДокументОтгрузки КАК ДокументОтгрузки
			|ПОМЕСТИТЬ ВТ_РеализацияОтгруженныхТоваров
			|ИЗ
			|	Документ.РеализацияОтгруженныхТоваров КАК РеализацияОтгруженныхТоваров
			|ГДЕ
			|	РеализацияОтгруженныхТоваров.Ссылка В(&ДокументОснование_РеализацияОтгруженныхТоваров)
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	ДокументОтгрузки
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	РеализацияТоваровУслугТовары.Ссылка КАК Ссылка,
			|	СУММА(РеализацияТоваровУслугТовары.Сумма) КАК СуммаДокумента,
			|	СУММА(РеализацияТоваровУслугТовары.СуммаНДС) КАК СуммаНДСДокумента,
			|	СУММА(ВЫБОР
			|			КОГДА РеализацияТоваровУслугТовары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
			|				ТОГДА 0
			|			ИНАЧЕ 1
			|		КОНЕЦ) КАК ЕстьНДС
			|ПОМЕСТИТЬ ВТ_Суммы
			|ИЗ
			|	ВТ_РеализацияОтгруженныхТоваров КАК ВТ_РеализацияОтгруженныхТоваров
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
			|		ПО ВТ_РеализацияОтгруженныхТоваров.ДокументОтгрузки = РеализацияТоваровУслугТовары.Ссылка
			|
			|СГРУППИРОВАТЬ ПО
			|	РеализацияТоваровУслугТовары.Ссылка
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ПередачаОСОС.Ссылка,
			|	СУММА(ПередачаОСОС.Сумма),
			|	СУММА(ПередачаОСОС.СуммаНДС),
			|	СУММА(ВЫБОР
			|			КОГДА ПередачаОСОС.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
			|				ТОГДА 0
			|			ИНАЧЕ 1
			|		КОНЕЦ)
			|ИЗ
			|	ВТ_РеализацияОтгруженныхТоваров КАК ВТ_РеализацияОтгруженныхТоваров
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПередачаОС.ОС КАК ПередачаОСОС
			|		ПО ВТ_РеализацияОтгруженныхТоваров.ДокументОтгрузки = ПередачаОСОС.Ссылка
			|
			|СГРУППИРОВАТЬ ПО
			|	ПередачаОСОС.Ссылка
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВТ_РеализацияОтгруженныхТоваров.Организация,
			|	ВТ_РеализацияОтгруженныхТоваров.Контрагент,
			|	ВТ_РеализацияОтгруженныхТоваров.Договор,
			|	ЕСТЬNULL(ГосКонтракты.ГосударственныйКонтрактКод, """") КАК ИдентификаторГосКонтракта,
			|	ВТ_РеализацияОтгруженныхТоваров.ВалютаДокумента,
			|	ЛОЖЬ КАК БланкСтрогойОтчетности,
			|	СУММА(ВТ_Суммы.СуммаДокумента) КАК СуммаДокумента,
			|	СУММА(ВТ_Суммы.СуммаНДСДокумента) КАК СуммаНДСДокумента,
			|	СУММА(0) КАК СуммаДокументаКомиссия,
			|	СУММА(0) КАК СуммаНДСДокументаКомиссия,
			|	СУММА(ВТ_Суммы.ЕстьНДС) КАК ЕстьНДС
			|ИЗ
			|	ВТ_РеализацияОтгруженныхТоваров КАК ВТ_РеализацияОтгруженныхТоваров
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Суммы КАК ВТ_Суммы
			|		ПО ВТ_РеализацияОтгруженныхТоваров.ДокументОтгрузки = ВТ_Суммы.Ссылка
			|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ ПЕРВЫЕ 1
			|			РеализацияОтгруженныхТоваров.Ссылка КАК Ссылка,
			|			КонтрактыСЗаказчиками.ГосударственныйКонтракт.Код КАК ГосударственныйКонтрактКод
			|		ИЗ
			|			ВТ_РеализацияОтгруженныхТоваров КАК РеализацияОтгруженныхТоваров
			|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КонтрактыСЗаказчиками КАК КонтрактыСЗаказчиками
			|				ПО РеализацияОтгруженныхТоваров.Договор = КонтрактыСЗаказчиками.Договор
			|		ГДЕ
			|			КонтрактыСЗаказчиками.ГосударственныйКонтракт <> ЗНАЧЕНИЕ(Справочник.ГосударственныеКонтракты.ПустаяСсылка)) КАК ГосКонтракты
			|		ПО ВТ_РеализацияОтгруженныхТоваров.Ссылка = ГосКонтракты.Ссылка
			|
			|СГРУППИРОВАТЬ ПО
			|	ВТ_РеализацияОтгруженныхТоваров.Организация,
			|	ВТ_РеализацияОтгруженныхТоваров.Контрагент,
			|	ВТ_РеализацияОтгруженныхТоваров.Договор,
			|	ВТ_РеализацияОтгруженныхТоваров.ВалютаДокумента,
			|	ЕСТЬNULL(ГосКонтракты.ГосударственныйКонтрактКод, """")";
		
		ИначеЕсли ТипДокументаОснования = Тип("ДокументСсылка.ПоступлениеДопРасходов") Тогда
			
			Запрос.УстановитьПараметр("ДокументОснование_ПоступлениеДопРасходов", ДокументыОснования);
				
			ТекстЗапроса = 
			"ВЫБРАТЬ
			|	Таблица.Ссылка.Организация КАК Организация,
			|	Таблица.Ссылка.Контрагент КАК Контрагент,
			|	Таблица.Ссылка.ДоговорКонтрагента КАК Договор,
			|	"""" КАК ИдентификаторГосКонтракта,
			|	СУММА(Таблица.Сумма + ВЫБОР
			|			КОГДА Таблица.Ссылка.СуммаВключаетНДС
			|				ТОГДА 0
			|			ИНАЧЕ Таблица.СуммаНДС
			|		КОНЕЦ) КАК СуммаДокумента,
			|	Таблица.Ссылка.ВалютаДокумента КАК ВалютаДокумента,
			|	СУММА(Таблица.СуммаНДС) КАК СуммаНДСДокумента,
			|	СУММА(0) КАК СуммаДокументаКомиссия,
			|	СУММА(0) КАК СуммаНДСДокументаКомиссия,
			|	СУММА(ВЫБОР
			|			КОГДА Таблица.Ссылка.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
			|				ТОГДА 0
			|			ИНАЧЕ 1
			|		КОНЕЦ) КАК ЕстьНДС,
			|	ЛОЖЬ КАК БланкСтрогойОтчетности
			|ИЗ
			|	Документ.ПоступлениеДопРасходов.Товары КАК Таблица
			|ГДЕ
			|	Таблица.Ссылка В(&ДокументОснование_ПоступлениеДопРасходов)
			|
			|СГРУППИРОВАТЬ ПО
			|	Таблица.Ссылка,
			|	Таблица.Ссылка.Организация,
			|	Таблица.Ссылка.Контрагент,
			|	Таблица.Ссылка.ДоговорКонтрагента,
			|	Таблица.Ссылка.ВалютаДокумента
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	Таблица.Ссылка.Организация,
			|	Таблица.Ссылка.Контрагент,
			|	Таблица.Ссылка.ДоговорКонтрагента,
			|	"""",
			|	СУММА(Таблица.Сумма + ВЫБОР
			|			КОГДА Таблица.Ссылка.СуммаВключаетНДС
			|				ТОГДА 0
			|			ИНАЧЕ Таблица.СуммаНДС
			|		КОНЕЦ),
			|	Таблица.Ссылка.ВалютаДокумента,
			|	СУММА(Таблица.СуммаНДС),
			|	0,
			|	0,
			|	СУММА(ВЫБОР
			|			КОГДА Таблица.Ссылка.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
			|				ТОГДА 0
			|			ИНАЧЕ 1
			|		КОНЕЦ),
			|	ЛОЖЬ
			|ИЗ
			|	Документ.ПоступлениеДопРасходов.Оборудование КАК Таблица
			|ГДЕ
			|	Таблица.Ссылка В(&ДокументОснование_ПоступлениеДопРасходов)
			|
			|СГРУППИРОВАТЬ ПО
			|	Таблица.Ссылка,
			|	Таблица.Ссылка.Организация,
			|	Таблица.Ссылка.Контрагент,
			|	Таблица.Ссылка.ДоговорКонтрагента,
			|	Таблица.Ссылка.ВалютаДокумента
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ПоступлениеДопРасходов.Организация,
			|	ПоступлениеДопРасходов.Контрагент,
			|	ПоступлениеДопРасходов.ДоговорКонтрагента,
			|	"""",
			|	СУММА(ПоступлениеДопРасходов.Сумма + ВЫБОР
			|			КОГДА ПоступлениеДопРасходов.СуммаВключаетНДС
			|				ТОГДА 0
			|			ИНАЧЕ ПоступлениеДопРасходов.СуммаНДС
			|		КОНЕЦ),
			|	ПоступлениеДопРасходов.ВалютаДокумента,
			|	СУММА(ПоступлениеДопРасходов.СуммаНДС),
			|	0,
			|	0,
			|	СУММА(ВЫБОР
			|			КОГДА ПоступлениеДопРасходов.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
			|				ТОГДА 0
			|			ИНАЧЕ 1
			|		КОНЕЦ),
			|	ЛОЖЬ
			|ИЗ
			|	Документ.ПоступлениеДопРасходов КАК ПоступлениеДопРасходов
			|ГДЕ
			|	ПоступлениеДопРасходов.Ссылка В(&ДокументОснование_ПоступлениеДопРасходов)
			|
			|СГРУППИРОВАТЬ ПО
			|	ПоступлениеДопРасходов.Организация,
			|	ПоступлениеДопРасходов.Контрагент,
			|	ПоступлениеДопРасходов.ДоговорКонтрагента,
			|	ПоступлениеДопРасходов.ВалютаДокумента";
				
		ИначеЕсли ТипДокументаОснования = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда 
			
			ИспользуетсяРАУЗ = глЗначениеПеременной("ИспользоватьРасширеннуюАналитикуУчетаНоменклатурыИЗатрат")
				И (глЗначениеПеременной("ДатаНачалаИспользованияРасширеннойАналитикиУчетаНоменклатурыИЗатрат") <= ДокументыОснования[0].Дата);
			Запрос.УстановитьПараметр("ДокументОснование_РеализацияТоваровУслуг", ДокументыОснования);
			Запрос.УстановитьПараметр("ИспользуетсяРАУЗ", ИспользуетсяРАУЗ);
			
			ТекстЗапроса = 
			"ВЫБРАТЬ
			|	СУММА(ПартииТоваровНаСкладахБухгалтерскийУчет.Количество) КАК Количество,
			|	ПартииТоваровНаСкладахБухгалтерскийУчет.НомерСтрокиСписанныхТоваров КАК НомерСтроки,
			|	ПартииТоваровНаСкладахБухгалтерскийУчет.Регистратор
			|ПОМЕСТИТЬ РеализованныеТоварыКомитента
			|ИЗ
			|	РегистрНакопления.ПартииТоваровНаСкладахБухгалтерскийУчет КАК ПартииТоваровНаСкладахБухгалтерскийУчет
			|ГДЕ
			|	ПартииТоваровНаСкладахБухгалтерскийУчет.СчетУчета = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ТоварыНаСкладе)
			|	И ПартииТоваровНаСкладахБухгалтерскийУчет.Активность
			|	И ПартииТоваровНаСкладахБухгалтерскийУчет.Регистратор В(&ДокументОснование_РеализацияТоваровУслуг)
			|	И НЕ &ИспользуетсяРАУЗ
			|
			|СГРУППИРОВАТЬ ПО
			|	ПартииТоваровНаСкладахБухгалтерскийУчет.НомерСтрокиСписанныхТоваров,
			|	ПартииТоваровНаСкладахБухгалтерскийУчет.Регистратор
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	РеализацияТоваровУслугТовары.Ссылка.Организация,
			|	РеализацияТоваровУслугТовары.Ссылка.Контрагент,
			|	РеализацияТоваровУслугТовары.Ссылка.ДоговорКонтрагента КАК Договор,
			|	ЕСТЬNULL(ГосКонтракты.ГосударственныйКонтрактКод, """") КАК ИдентификаторГосКонтракта,
			|	СУММА(РеализацияТоваровУслугТовары.Сумма + ВЫБОР
			|			КОГДА РеализацияТоваровУслугТовары.Ссылка.СуммаВключаетНДС
			|				ТОГДА 0
			|			ИНАЧЕ РеализацияТоваровУслугТовары.СуммаНДС
			|		КОНЕЦ) КАК СуммаДокумента,
			|	РеализацияТоваровУслугТовары.Ссылка.ВалютаДокумента,
			|	СУММА(РеализацияТоваровУслугТовары.СуммаНДС) КАК СуммаНДСДокумента,
			|	СУММА(ВЫБОР
			|			КОГДА &ИспользуетсяРАУЗ
			|					И РеализацияТоваровУслугТовары.ПринадлежностьНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ПринадлежностьНоменклатуры.Принятый)
			|				ТОГДА РеализацияТоваровУслугТовары.Сумма + ВЫБОР
			|						КОГДА РеализацияТоваровУслугТовары.Ссылка.СуммаВключаетНДС
			|							ТОГДА 0
			|						ИНАЧЕ РеализацияТоваровУслугТовары.СуммаНДС
			|					КОНЕЦ
			|			КОГДА НЕ &ИспользуетсяРАУЗ
			|				ТОГДА ВЫБОР
			|						КОГДА РеализованныеТоварыКомитента.Количество ЕСТЬ NULL 
			|							ТОГДА 0
			|						КОГДА РеализацияТоваровУслугТовары.Количество = РеализованныеТоварыКомитента.Количество
			|							ТОГДА РеализацияТоваровУслугТовары.Сумма + ВЫБОР
			|									КОГДА РеализацияТоваровУслугТовары.Ссылка.СуммаВключаетНДС
			|										ТОГДА 0
			|									ИНАЧЕ РеализацияТоваровУслугТовары.СуммаНДС
			|								КОНЕЦ
			|						ИНАЧЕ (РеализацияТоваровУслугТовары.Сумма + ВЫБОР
			|								КОГДА РеализацияТоваровУслугТовары.Ссылка.СуммаВключаетНДС
			|									ТОГДА 0
			|								ИНАЧЕ РеализацияТоваровУслугТовары.СуммаНДС
			|							КОНЕЦ) / РеализацияТоваровУслугТовары.Количество * РеализованныеТоварыКомитента.Количество
			|					КОНЕЦ
			|			ИНАЧЕ 0
			|		КОНЕЦ) КАК СуммаДокументаКомиссия,
			|	СУММА(ВЫБОР
			|			КОГДА &ИспользуетсяРАУЗ
			|					И РеализацияТоваровУслугТовары.ПринадлежностьНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ПринадлежностьНоменклатуры.Принятый)
			|				ТОГДА РеализацияТоваровУслугТовары.СуммаНДС
			|			КОГДА НЕ &ИспользуетсяРАУЗ
			|				ТОГДА ВЫБОР
			|						КОГДА РеализованныеТоварыКомитента.Количество ЕСТЬ NULL 
			|							ТОГДА 0
			|						КОГДА РеализацияТоваровУслугТовары.Количество = РеализованныеТоварыКомитента.Количество
			|							ТОГДА РеализацияТоваровУслугТовары.СуммаНДС
			|						ИНАЧЕ РеализованныеТоварыКомитента.Количество * (РеализацияТоваровУслугТовары.СуммаНДС / РеализацияТоваровУслугТовары.Количество)
			|					КОНЕЦ
			|			ИНАЧЕ 0
			|		КОНЕЦ) КАК СуммаНДСДокументаКомиссия,
			|	СУММА(ВЫБОР
			|			КОГДА РеализацияТоваровУслугТовары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
			|				ТОГДА 0
			|			ИНАЧЕ 1
			|		КОНЕЦ) КАК ЕстьНДС,
			|	ЛОЖЬ КАК БланкСтрогойОтчетности
			|ИЗ
			|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
			|		ЛЕВОЕ СОЕДИНЕНИЕ РеализованныеТоварыКомитента КАК РеализованныеТоварыКомитента
			|		ПО РеализацияТоваровУслугТовары.Ссылка = РеализованныеТоварыКомитента.Регистратор
			|			И РеализацияТоваровУслугТовары.НомерСтроки = РеализованныеТоварыКомитента.НомерСтроки
			|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ ПЕРВЫЕ 1
			|			РеализацияТоваровУслуг.Ссылка КАК Ссылка,
			|			КонтрактыСЗаказчиками.ГосударственныйКонтракт.Код КАК ГосударственныйКонтрактКод
			|		ИЗ
			|			Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
			|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КонтрактыСЗаказчиками КАК КонтрактыСЗаказчиками
			|				ПО РеализацияТоваровУслуг.ДоговорКонтрагента = КонтрактыСЗаказчиками.Договор
			|		ГДЕ
			|			РеализацияТоваровУслуг.Ссылка В(&ДокументОснование_РеализацияТоваровУслуг)
			|			И КонтрактыСЗаказчиками.ГосударственныйКонтракт <> ЗНАЧЕНИЕ(Справочник.ГосударственныеКонтракты.ПустаяСсылка)) КАК ГосКонтракты
			|		ПО РеализацияТоваровУслугТовары.Ссылка = ГосКонтракты.Ссылка
			|ГДЕ
			|	РеализацияТоваровУслугТовары.Ссылка В(&ДокументОснование_РеализацияТоваровУслуг)
			|
			|СГРУППИРОВАТЬ ПО
			|	РеализацияТоваровУслугТовары.Ссылка.Организация,
			|	РеализацияТоваровУслугТовары.Ссылка.Контрагент,
			|	РеализацияТоваровУслугТовары.Ссылка.ДоговорКонтрагента,
			|	РеализацияТоваровУслугТовары.Ссылка.ВалютаДокумента,
			|	ЕСТЬNULL(ГосКонтракты.ГосударственныйКонтрактКод, """")
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	РеализацияТоваровУслугУслуги.Ссылка.Организация,
			|	РеализацияТоваровУслугУслуги.Ссылка.Контрагент,
			|	РеализацияТоваровУслугУслуги.Ссылка.ДоговорКонтрагента,
			|	ЕСТЬNULL(ГосКонтракты.ГосударственныйКонтрактКод, """"),
			|	СУММА(РеализацияТоваровУслугУслуги.Сумма + ВЫБОР
			|			КОГДА РеализацияТоваровУслугУслуги.Ссылка.СуммаВключаетНДС
			|				ТОГДА 0
			|			ИНАЧЕ РеализацияТоваровУслугУслуги.СуммаНДС
			|		КОНЕЦ),
			|	РеализацияТоваровУслугУслуги.Ссылка.ВалютаДокумента,
			|	СУММА(РеализацияТоваровУслугУслуги.СуммаНДС),
			|	СУММА(0),
			|	СУММА(0),
			|	СУММА(ВЫБОР
			|			КОГДА РеализацияТоваровУслугУслуги.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
			|				ТОГДА 0
			|			ИНАЧЕ 1
			|		КОНЕЦ),
			|	ЛОЖЬ
			|ИЗ
			|	Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслугУслуги
			|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ ПЕРВЫЕ 1
			|			РеализацияТоваровУслуг.Ссылка КАК Ссылка,
			|			КонтрактыСЗаказчиками.ГосударственныйКонтракт.Код КАК ГосударственныйКонтрактКод
			|		ИЗ
			|			Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
			|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КонтрактыСЗаказчиками КАК КонтрактыСЗаказчиками
			|				ПО РеализацияТоваровУслуг.ДоговорКонтрагента = КонтрактыСЗаказчиками.Договор
			|		ГДЕ
			|			РеализацияТоваровУслуг.Ссылка В(&ДокументОснование_РеализацияТоваровУслуг)
			|			И КонтрактыСЗаказчиками.ГосударственныйКонтракт <> ЗНАЧЕНИЕ(Справочник.ГосударственныеКонтракты.ПустаяСсылка)) КАК ГосКонтракты
			|		ПО РеализацияТоваровУслугУслуги.Ссылка = ГосКонтракты.Ссылка
			|ГДЕ
			|	РеализацияТоваровУслугУслуги.Ссылка В(&ДокументОснование_РеализацияТоваровУслуг)
			|
			|СГРУППИРОВАТЬ ПО
			|	РеализацияТоваровУслугУслуги.Ссылка.Контрагент,
			|	РеализацияТоваровУслугУслуги.Ссылка.Организация,
			|	РеализацияТоваровУслугУслуги.Ссылка.ДоговорКонтрагента,
			|	РеализацияТоваровУслугУслуги.Ссылка.ВалютаДокумента,
			|	ЕСТЬNULL(ГосКонтракты.ГосударственныйКонтрактКод, """")";
			
		Иначе
			
			ТекстЗапроса = ПолучитьТекстЗапросаОпределенияПараметровСФ(ДокументыОснования, ЭтоПолученныйСФ, Запрос.Параметры);
			
		КонецЕсли;
				
		Если НЕ ПустаяСтрока(ТекстЗапроса) Тогда
			Если НЕ ПустаяСтрока(Запрос.Текст) Тогда
				Запрос.Текст = Запрос.Текст + Символы.ПС + Символы.ПС + "ОБЪЕДИНИТЬ ВСЕ" + Символы.ПС + Символы.ПС;
			КонецЕсли;
			
			Запрос.Текст = Запрос.Текст + ТекстЗапроса;
		КонецЕсли;
 		
	КонецЦикла;
	
	Если ПустаяСтрока(Запрос.Текст) Тогда
		Возврат;
	Иначе
		
		РезультатЗапроса = ОбщегоНазначенияСервер.ВыполнитьЗапросВПривилегированномРежиме(Запрос.Текст, Запрос.Параметры);
		
		Если РезультатЗапроса.Пустой() Тогда
			Возврат;
		КонецЕсли;
		
		Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		ПерваяСтрока      = Истина;
		РазныеОрганизации = Ложь;
		РазныеКонтрагенты = Ложь;
		РазныеДоговоры    = Ложь;
		РазныеВалюты      = Ложь;
		Пока Выборка.Следующий() Цикл
			
			ЭтоКорректировочный = Ложь;
			
			Если Корректировка Тогда
				
				Если ЭтоПолученныйСФ Тогда
					ЭтоКорректировочный = СчетФактура.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.Корректировочный;
				Иначе
					ЭтоКорректировочный = СчетФактура.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный;						
				КонецЕсли;
				
				Результат.СуммаУвеличение		= Результат.СуммаУвеличение + Выборка.СуммаУвеличение;
				Результат.СуммаУменьшение		= Результат.СуммаУменьшение + Выборка.СуммаУменьшение;
				Результат.СуммаНДСУвеличение	= Результат.СуммаНДСУвеличение + Выборка.СуммаНДСУвеличение;
				Результат.СуммаНДСУменьшение	= Результат.СуммаНДСУменьшение + Выборка.СуммаНДСУменьшение;
				Результат.СуммаДокумента 		= Результат.СуммаДокумента + Выборка.СуммаДокумента;
				Результат.СуммаНДСДокумента 	= Результат.СуммаНДСДокумента + Выборка.СуммаНДСДокумента;
				
				ВыборкаДокументы = Выборка.Выбрать();
				Пока ВыборкаДокументы.Следующий() Цикл
					
					Если ПерваяСтрока Тогда
						СтрокаРеквизитов = "Организация,Контрагент,ВалютаДокумента,Договор,ИдентификаторГосКонтракта";
						ЗаполнитьЗначенияСвойств(Результат, ВыборкаДокументы, СтрокаРеквизитов);
						Результат.СчетФактураБезНДС = ВыборкаДокументы.ЕстьНДС = 0;
						ПерваяСтрока = Ложь;
					КонецЕсли;
					
					РазныеОрганизации	= РазныеОрганизации ИЛИ Результат.Организация <> ВыборкаДокументы.Организация;
					РазныеКонтрагенты	= РазныеКонтрагенты ИЛИ Результат.Контрагент <> ВыборкаДокументы.Контрагент;
					РазныеВалюты		= РазныеВалюты ИЛИ Результат.ВалютаДокумента <> ВыборкаДокументы.ВалютаДокумента;
					РазныеДоговоры		= ?(ЭтоПолученныйСФ, Ложь, РазныеДоговоры ИЛИ Результат.Договор <> ВыборкаДокументы.Договор);
					
					Если Результат.СчетФактураБезНДС Тогда
						Результат.СчетФактураБезНДС = ВыборкаДокументы.ЕстьНДС = 0;
					КонецЕсли;
					
					Если ЭтоКорректировочный Тогда
						
						СтрокаСРеквизитами = РеквизитыОснований.Добавить();
						
						СтрокаСРеквизитами.ДокументОснование 	= ВыборкаДокументы.Документ;
						СтрокаСРеквизитами.СуммаУвеличение 		= ВыборкаДокументы.СуммаУвеличение;
						СтрокаСРеквизитами.СуммаУменьшение 		= ВыборкаДокументы.СуммаУменьшение;
						СтрокаСРеквизитами.СуммаНДСУвеличение	= ВыборкаДокументы.СуммаНДСУвеличение;
						СтрокаСРеквизитами.СуммаНДСУменьшение 	= ВыборкаДокументы.СуммаНДСУменьшение;
						
						Если ЭтоПолученныйСФ Тогда
							
							ДокументПоступления = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ВыборкаДокументы.Документ, "ДокументПоступления");	
							
							Если СчетФактура.Исправление Тогда 
								ИсходныйДокументПоступления = УчетНДС.ПолучитьИсправляемыйДокументПоступления(ВыборкаДокументы.Документ);
								Если ТипЗнч(ИсходныйДокументПоступления) = Тип("ДокументСсылка.КорректировкаПоступления") Тогда
									ИсходныйДокументПоступления = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ИсходныйДокументПоступления, "ДокументПоступления");
								КонецЕсли; 
							Иначе
								ИсходныйДокументПоступления = ДокументПоступления;
							КонецЕсли;
							
							РеквизитыИсходногоСчетаФактуры = ПолучитьРеквизитыСчетаФактурыПолученного(ИсходныйДокументПоступления);
							
							Если РеквизитыИсходногоСчетаФактуры <> Неопределено Тогда 
								
								СтрокаСРеквизитами.НомерИсходногоДокумента 				  = РеквизитыИсходногоСчетаФактуры.НомерСчетаФактуры;
								СтрокаСРеквизитами.ДатаИсходногоДокумента  				  = РеквизитыИсходногоСчетаФактуры.ДатаСчетаФактуры;
								СтрокаСРеквизитами.УчитыватьИсправлениеИсходногоДокумента = РеквизитыИсходногоСчетаФактуры.Исправление;
								СтрокаСРеквизитами.НомерИсправленияИсходногоДокумента     = РеквизитыИсходногоСчетаФактуры.НомерИсправления;
								СтрокаСРеквизитами.ДатаИсправленияИсходногоДокумента      = РеквизитыИсходногоСчетаФактуры.ДатаИсправления;
								
							КонецЕсли;
							
						Иначе
							
							ДокументРеализации = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ВыборкаДокументы.Документ, "ДокументРеализации");	
							
							Если СчетФактура.Исправление Тогда 
								ИсходныйДокументРеализации = УчетНДС.ПолучитьИсправляемыйДокументРеализации(ВыборкаДокументы.Документ);
								Если ТипЗнч(ИсходныйДокументРеализации) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
									ИсходныйДокументРеализации = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ИсходныйДокументРеализации, "ДокументРеализации");
								КонецЕсли; 
							Иначе
								ИсходныйДокументРеализации = ДокументРеализации;	
							КонецЕсли;
							
							РеквизитыИсходногоСчетаФактуры = ПолучитьРеквизитыСчетаФактурыВыданного(ИсходныйДокументРеализации);
							
							Если РеквизитыИсходногоСчетаФактуры <> Неопределено Тогда 
								
								СтрокаСРеквизитами.НомерИсходногоДокумента = РеквизитыИсходногоСчетаФактуры.НомерСчетаФактуры;
								СтрокаСРеквизитами.ДатаИсходногоДокумента  = РеквизитыИсходногоСчетаФактуры.ДатаСчетаФактуры;
								СтрокаСРеквизитами.УчитыватьИсправлениеИсходногоДокумента = РеквизитыИсходногоСчетаФактуры.Исправление;
								СтрокаСРеквизитами.НомерИсправленияИсходногоДокумента     = РеквизитыИсходногоСчетаФактуры.НомерИсправления;
								СтрокаСРеквизитами.ДатаИсправленияИсходногоДокумента      = РеквизитыИсходногоСчетаФактуры.ДатаИсправления;
								
							КонецЕсли;
 					
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЦикла;
				
			Иначе
				
				Если ПерваяСтрока Тогда
					ПерваяСтрока = Ложь;
					ЗаполнитьЗначенияСвойств(Результат, Выборка);
					Результат.СчетФактураБезНДС = Выборка.ЕстьНДС = 0;
				Иначе
					РазныеОрганизации = РазныеОрганизации ИЛИ Результат.Организация <> Выборка.Организация;
					РазныеКонтрагенты = РазныеКонтрагенты ИЛИ Результат.Контрагент <> Выборка.Контрагент;
					РазныеВалюты      = РазныеВалюты ИЛИ Результат.ВалютаДокумента <> Выборка.ВалютаДокумента;
					РазныеДоговоры    = ?(ЭтоПолученныйСФ, Ложь, РазныеДоговоры ИЛИ Результат.Договор <> Выборка.Договор);
					
					Результат.СуммаДокумента = 	Результат.СуммаДокумента + Выборка.СуммаДокумента;
					Результат.СуммаНДСДокумента = Результат.СуммаНДСДокумента + Выборка.СуммаНДСДокумента;
					
					Результат.СуммаДокументаКомиссия 	= Результат.СуммаДокументаКомиссия + Выборка.СуммаДокументаКомиссия;
					Результат.СуммаНДСДокументаКомиссия = Результат.СуммаНДСДокументаКомиссия + Выборка.СуммаНДСДокументаКомиссия;
					
					Если ТипДокументаОснования = Тип("ДокументСсылка.КорректировкаРеализации") 
						ИЛИ ТипДокументаОснования = Тип("ДокументСсылка.КорректировкаПоступления") Тогда
						
						Результат.СуммаУвеличение    = Результат.СуммаУвеличение    + Выборка.СуммаУвеличение;
						Результат.СуммаУменьшение    = Результат.СуммаУменьшение + Выборка.СуммаУменьшение;
						Результат.СуммаНДСУвеличение = Результат.СуммаНДСУвеличение    + Выборка.СуммаНДСУвеличение;
						Результат.СуммаНДСУменьшение = Результат.СуммаНДСУменьшение + Выборка.СуммаНДСУменьшение;
					Иначе
						Результат.СуммаУвеличение 	 = 0;
						Результат.СуммаУменьшение 	 = 0;					
						Результат.СуммаНДСУвеличение = 0;
						Результат.СуммаНДСУменьшение = 0;					
					КонецЕсли;
					
					Если Результат.СчетФактураБезНДС Тогда
						Результат.СчетФактураБезНДС = Выборка.ЕстьНДС = 0;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если Ссылка.СводныйКомиссионный Тогда
			РазныеКонтрагенты = Ложь;
			Результат.Контрагент = Неопределено;
		КонецЕсли;
		
		Если РазныеОрганизации ИЛИ РазныеКонтрагенты ИЛИ РазныеВалюты Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Реквизиты документов, на основании которых зарегистрирован счет-фактура, не совпадают:"+
				?(РазныеОрганизации,Символы.ПС+" - не совпадает организация","")+
				?(РазныеКонтрагенты,Символы.ПС+" - не совпадает контрагент","")+
				?(РазныеДоговоры,Символы.ПС+" - не совпадает договор","")+
				?(РазныеВалюты,Символы.ПС+" - не совпадает валюта документа","")+
				Символы.ПС+"Необходимо изменить параметры документов-оснований или зарегистрировать по документам с расхождениями отдельные счета-фактуры.", Ложь, Строка(СчетФактура), СтатусСообщения.Внимание); 
			Если РазныеОрганизации Тогда
				 Результат.Организация = Неопределено;
			КонецЕсли; 				
			Если РазныеКонтрагенты Тогда
				 Результат.Контрагент = Неопределено;
			КонецЕсли; 				
			Если РазныеВалюты Тогда
				 Результат.ВалютаДокумента = Неопределено;
			КонецЕсли; 				
			Если РазныеДоговоры Тогда
				 Результат.Договор = Неопределено;
			КонецЕсли;
		КонецЕсли; 
	КонецЕсли;

КонецПроцедуры // ПолучитьПараметрыСчетаФактуры()

Функция ПолучитьТекстЗапросаОпределенияПараметровСФ(ДокументыОснования, ЭтоПолученныйСФ, ПараметрыЗапроса, ИмяВременнойТаблицы = "") Экспорт
	
	ИгнорироватьТЧ = Новый Массив;
	ИгнорироватьТЧ.Добавить("ВозвратнаяТара");
	ИгнорироватьТЧ.Добавить("ВыданныеАвансы");
	ИгнорироватьТЧ.Добавить("ДенежныеСредства");
	ИгнорироватьТЧ.Добавить("ПрочиеЗатраты");
	ИгнорироватьТЧ.Добавить("РаспределениеПрочихЗатрат");
	ИгнорироватьТЧ.Добавить("ИспользованныеМатериалы");
	
	МетаданныеДокумента = ДокументыОснования[0].Метаданные();
	ТипДокументаОснования = ТипЗнч(ДокументыОснования[0]);
	
	ИмяОбъекта = МетаданныеДокумента.Имя;
	ПараметрыЗапроса.Вставить("ДокументОснование_" + ИмяОбъекта, ДокументыОснования);
	
	ПостфиксСумм = "";
	Множитель = 1;
	ИмяРеквизитаСтавкаНДС = "СтавкаНДС";
	
	Если ТипДокументаОснования = Тип("ДокументСсылка.ОтчетКомитентуОПродажах")
		ИЛИ ТипДокументаОснования = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") И ЭтоПолученныйСФ Тогда
			
		ПостфиксСумм = "Вознаграждения";
		ИмяРеквизитаСтавкаНДС = "Ссылка.СтавкаНДСВознаграждения";
	ИначеЕсли ТипДокументаОснования = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") И НЕ ЭтоПолученныйСФ
		ИЛИ ТипДокументаОснования = Тип("ДокументСсылка.ВозвратТоваровПоставщику") И ЭтоПолученныйСФ Тогда
			
		Множитель = - 1;
		
	КонецЕсли;	
	
	ПараметрыЗапроса.Вставить("Множитель_" + ИмяОбъекта, Множитель);
	
	ТекстЗапроса = "";
	
	ТекстСекцииПоместить = "";
	
	Для каждого МетаданныеТЧ Из МетаданныеДокумента.ТабличныеЧасти Цикл
		Если ИгнорироватьТЧ.Найти(МетаданныеТЧ.Имя) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если МетаданныеТЧ.Реквизиты.Найти("Сумма") = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если МетаданныеТЧ.Реквизиты.Найти("СуммаНДС" + ПостфиксСумм) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ЕстьСуммаВключаетНДС = МетаданныеДокумента.Реквизиты.Найти("СуммаВключаетНДС") <> Неопределено;
		
		Если ПустаяСтрока(ТекстЗапроса) Тогда
			Если НЕ ПустаяСтрока(ИмяВременнойТаблицы) Тогда
				ТекстСекцииПоместить = "
				|ПОМЕСТИТЬ
				|	" + ИмяВременнойТаблицы + "
				|";
			КонецЕсли;
		Иначе
			ТекстЗапроса = ТекстЗапроса + Символы.ПС + Символы.ПС + "ОБЪЕДИНИТЬ ВСЕ" + Символы.ПС + Символы.ПС;
			ТекстСекцииПоместить = "";
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + 
		"ВЫБРАТЬ
		|	Таблица.Ссылка.Организация КАК Организация,
		|	Таблица.Ссылка.Контрагент КАК Контрагент,
		|	Таблица.Ссылка.ДоговорКонтрагента КАК Договор,
		|	ЕСТЬNULL(ГосКонтракты.ГосударственныйКонтрактКод, """") КАК ИдентификаторГосКонтракта,
		|	СУММА(Таблица.Сумма" + ПостфиксСумм + ?(ЕстьСуммаВключаетНДС, " + ВЫБОР
		|			КОГДА Таблица.Ссылка.СуммаВключаетНДС
		|				ТОГДА 0
		|			ИНАЧЕ Таблица.СуммаНДС" + ПостфиксСумм + "
		|		КОНЕЦ", "") + ") * &Множитель_" + ИмяОбъекта + " КАК СуммаДокумента,
		|	Таблица.Ссылка.ВалютаДокумента КАК ВалютаДокумента,
		|	СУММА(Таблица.СуммаНДС" + ПостфиксСумм + ") * &Множитель_" + ИмяОбъекта + " КАК СуммаНДСДокумента,
		|	0 КАК СуммаДокументаКомиссия, 
		|	0 КАК СуммаНДСДокументаКомиссия,
		|	СУММА(ВЫБОР
		|			КОГДА Таблица." + ИмяРеквизитаСтавкаНДС + " = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
		|				ТОГДА 0
		|			ИНАЧЕ 1
		|		КОНЕЦ) КАК ЕстьНДС,
		|	ЛОЖЬ КАК БланкСтрогойОтчетности" +  ТекстСекцииПоместить + "
		|ИЗ
		|	Документ." + МетаданныеДокумента.Имя + "." + МетаданныеТЧ.Имя + " КАК Таблица
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ ПЕРВЫЕ 1
		|			Таблица.Ссылка КАК Ссылка,
		|			КонтрактыСЗаказчиками.ГосударственныйКонтракт.Код КАК ГосударственныйКонтрактКод
		|		ИЗ
		|			Документ." + МетаданныеДокумента.Имя + " КАК Таблица
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КонтрактыСЗаказчиками КАК КонтрактыСЗаказчиками
		|				ПО Таблица.ДоговорКонтрагента = КонтрактыСЗаказчиками.Договор
		|		ГДЕ
		|			Таблица.Ссылка В (&ДокументОснование_" + ИмяОбъекта + ")
		|			И КонтрактыСЗаказчиками.ГосударственныйКонтракт <> ЗНАЧЕНИЕ(Справочник.ГосударственныеКонтракты.ПустаяСсылка)) КАК ГосКонтракты
		|		ПО Таблица.Ссылка = Госконтракты.Ссылка
		|ГДЕ
		|	Таблица.Ссылка В (&ДокументОснование_" + ИмяОбъекта + ")
		|
		|СГРУППИРОВАТЬ ПО
		|	Таблица.Ссылка,
		|	Таблица.Ссылка.Организация,
		|	Таблица.Ссылка.Контрагент,
		|	Таблица.Ссылка.ДоговорКонтрагента,
		|	ЕСТЬNULL(ГосКонтракты.ГосударственныйКонтрактКод, """"),
		|	Таблица.Ссылка.ВалютаДокумента";
	КонецЦикла;
	
	Если НЕ ЗначениеЗаполнено(ТекстЗапроса) Тогда // в документе не оказалось табличных частей
		
		Если МетаданныеДокумента.Реквизиты.Найти("СуммаНДС") <> Неопределено Тогда
			
			ТекстЗапроса = 
			"ВЫБРАТЬ
			|	ДокОснование.Организация КАК Организация,
			|	ДокОснование.Контрагент КАК Контрагент,
			|	ДокОснование.ДоговорКонтрагента КАК Договор,
			|	ЕСТЬNULL(ГосКонтракты.ГосударственныйКонтрактКод, """") КАК ИдентификаторГосКонтракта,
			|	СУММА(ДокОснование.Сумма + ВЫБОР
			|			КОГДА ДокОснование.Ссылка.СуммаВключаетНДС
			|				ТОГДА 0
			|			ИНАЧЕ ДокОснование.СуммаНДС
			|		КОНЕЦ) КАК СуммаДокумента,
			|	&ВалютаРегламентированногоУчета КАК ВалютаДокумента,
			|	ДокОснование.СуммаНДС КАК СуммаНДСДокумента,
			|	0 КАК СуммаДокументаКомиссия,
			|	0 КАК СуммаНДСДокументаКомиссия,
			|	ВЫБОР
			|		КОГДА ДокОснование.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
			|			ТОГДА 0
			|		ИНАЧЕ 1
			|	КОНЕЦ КАК ЕстьНДС,
			|	ЛОЖЬ КАК БланкСтрогойОтчетности
			|ИЗ
			|	Документ." + МетаданныеДокумента.Имя + " КАК ДокОснование
			|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ ПЕРВЫЕ 1
			|			ДокОснование.Ссылка КАК Ссылка,
			|			КонтрактыСЗаказчиками.ГосударственныйКонтракт.Код КАК ГосударственныйКонтрактКод
			|		ИЗ
			|			Документ." + МетаданныеДокумента.Имя + " КАК ДокОснование
			|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КонтрактыСЗаказчиками КАК КонтрактыСЗаказчиками
			|				ПО ДокОснование.ДоговорКонтрагента = КонтрактыСЗаказчиками.Договор
			|		ГДЕ
			|			ДокОснование.Ссылка В (&ДокументОснование_" + ИмяОбъекта + ")
			|			И КонтрактыСЗаказчиками.ГосударственныйКонтракт <> ЗНАЧЕНИЕ(Справочник.ГосударственныеКонтракты.ПустаяСсылка)) КАК ГосКонтракты
			|		ПО ДокОснование.Ссылка = Госконтракты.Ссылка
			|ГДЕ
			|	ДокОснование.Ссылка В (&ДокументОснование_" + МетаданныеДокумента.Имя + ")
			|
			|СГРУППИРОВАТЬ ПО
			|	ДокОснование.Ссылка,
			|	ДокОснование.ДоговорКонтрагента,
			|	ЕСТЬNULL(ГосКонтракты.ГосударственныйКонтрактКод, """"),
			|	ДокОснование.СуммаНДС,
			|	ДокОснование.Организация,
			|	ДокОснование.Контрагент,
			|	ВЫБОР
			|		КОГДА ДокОснование.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
			|			ТОГДА 0
			|		ИНАЧЕ 1
			|	КОНЕЦ";
			
			
		Иначе
			
			Если (ТипДокументаОснования = Тип("ДокументСсылка.ОтчетКомитентуОПродажах"))
				или ((ТипДокументаОснования = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах")) И ЭтоПолученныйСФ) Тогда
				ИдРеквСумма = "СуммаВознаграждения";
			ИначеЕсли (ТипДокументаОснования = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") И не ЭтоПолученныйСФ) тогда
				ИдРеквСумма = "СуммаДокумента*(-1)";
			ИначеЕсли (ТипДокументаОснования = Тип("ДокументСсылка.ВозвратТоваровПоставщику") И ЭтоПолученныйСФ) тогда
				ИдРеквСумма = "СуммаДокумента*(-1)";
			Иначе
				ИдРеквСумма = "СуммаДокумента";
			КонецЕсли;
			
			ИмяОбъекта = МетаданныеДокумента.Имя;
			
			ТекстЗапроса = "ВЫБРАТЬ
			|	" + ИмяОбъекта + ".Организация,
			|	" + ИмяОбъекта + ".Контрагент,
			|	" + ИмяОбъекта + ".ДоговорКонтрагента как Договор,
			|	"""" КАК ИдентификаторГосКонтракта,
			|	" + ИмяОбъекта + "." + ИдРеквСумма + " Как СуммаДокумента,
			|	" + ИмяОбъекта + ".ВалютаДокумента Как ВалютаДокумента,
			|	0 Как СуммаНДСДокумента,
			|	0 Как СуммаДокументаКомиссия,
			|	0 Как СуммаНДСДокументаКомиссия,
			|	1 Как ЕстьНДС,
			|	ЛОЖЬ КАК БланкСтрогойОтчетности
			|ИЗ
			|	Документ." + ИмяОбъекта + " КАК " + ИмяОбъекта + "
			
			|ГДЕ
			|	" + ИмяОбъекта + ".Ссылка в (&ДокументОснование_"+ИмяОбъекта+")";
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Процедура проверяет соответствие реквизитов счета-фактуры и документа-основания.
// В случае несоответствия реквизиты счета-фактуры перезаполняются и выдается сообщение пользователю.
//
// Параметры:
//		- ДокОбъект - документ-основание
//		- Сообщать  - флаг, если истина, то выводить сообщение пользователю, по умолчанию = Истина
//
// Возврат:
//		- Истина, если различий не найдено, Ложь в противном случае
//
Функция ПроверитьСоответствиеРеквизитовСчетаФактуры(ДокОбъект, ВидДокумента = "СчетФактураВыданный", Сообщать = Истина, НайденныйСФ = Неопределено) Экспорт
	
	Если ТипЗнч(ДокОбъект.Ссылка) = Тип("ДокументСсылка.АвансовыйОтчет") Тогда 
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Таб.СчетФактура КАК СчетФактура
		|ИЗ
		|	Документ.АвансовыйОтчет.Товары КАК Таб
		|ГДЕ
		|	Таб.Ссылка = &Ссылка
		|	И Таб.ПредъявленСФ
		|	И Таб.СчетФактура <> ЗНАЧЕНИЕ(Документ.СчетФактураПолученный.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Таб.СчетФактура
		|ИЗ
		|	Документ.АвансовыйОтчет.Прочее КАК Таб
		|ГДЕ
		|	Таб.Ссылка = &Ссылка
		|	И Таб.ПредъявленСФ
		|	И Таб.СчетФактура <> ЗНАЧЕНИЕ(Документ.СчетФактураПолученный.ПустаяСсылка)";
		Запрос.УстановитьПараметр("Ссылка", ДокОбъект.Ссылка);
		СчетаФактуры = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("СчетФактура");
		
		Если СчетаФактуры.Количество() = 0 Тогда
			Возврат Истина;
		КонецЕсли;
	Иначе
		
		СчетаФактуры = Новый Массив;
		Если НайденныйСФ = Неопределено Тогда
			СчетФактура = НайтиПодчиненныйСчетФактуру( ДокОбъект.Ссылка, ВидДокумента);
			НайденныйСФ = СчетФактура;
		Иначе
			СчетФактура = НайденныйСФ;
		КонецЕсли;
		
		Если СчетФактура = Неопределено Тогда
			Возврат Истина;
		КонецЕсли;
		
		СчетаФактуры.Добавить(СчетФактура);
		
	КонецЕсли;
	
	Для каждого СчетФактура Из СчетаФактуры Цикл
		
		Если НЕ ЗначениеЗаполнено(СчетФактура) Тогда
			Продолжить;
		КонецЕсли;
		
		Если СчетФактура.ПометкаУдаления Тогда
			
			ОбщегоНазначения.СообщитьОбОшибке(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Документ ""%1"" помечен на удаление. Реквизиты документа автоматически не перезаполнены'"),
					СчетФактура),
					Ложь,
					"",
					СтатусСообщения.Внимание);
					
			Продолжить;
			
		КонецЕсли;
		
		СчетФактураОбъект = СчетФактура.ПолучитьОбъект();		
		
		Попытка
			СчетФактураОбъект.Заблокировать();
			Если СчетФактураОбъект.ПроверитьЗаполнение() Тогда				
				
				СчетФактураОбъект.ДополнительныеСвойства.Вставить("СообщитьОбИзмененииРеквизитов", Истина);			
				Если ПолучитьВерсиюПостановления(СчетФактураОбъект.Дата) = 2 Тогда
					Если ДокОбъект.Проведен Тогда
						Если СчетФактура.Проведен 
							ИЛИ ТипЗнч(ДокОбъект.Ссылка) = Тип("ДокументСсылка.АвансовыйОтчет") Тогда
							СчетФактураОбъект.Записать(РежимЗаписиДокумента.Проведение);
						Иначе	
							СчетФактураОбъект.Записать();
						КонецЕсли;
					Иначе
						Если СчетФактура.Проведен Тогда
							СчетФактураОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
						Иначе	
							СчетФактураОбъект.Записать();
						КонецЕсли;
					КонецЕсли;
				Иначе
					СчетФактураОбъект.Записать();
				КонецЕсли;
			
			Иначе
				ОбщегоНазначения.СообщитьОбОшибке(
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='Реквизиты документа ""%1"" автоматически не перезаполнены и могут быть неактуальными'"),
						СчетФактура),
					Ложь,
					"",
					СтатусСообщения.Внимание);
			КонецЕсли;
		Исключение
			ОбщегоНазначения.СообщитьОбОшибке(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Реквизиты документа ""%1"" автоматически не перезаполнены и могут быть неактуальными'"),
					СчетФактура),
				Ложь,
				"",
				СтатусСообщения.Внимание);
			Продолжить;
		КонецПопытки;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

// Процедура вызывается по кнопке "Рассчитать" из формы диалога документа.
// Выполняется расчет объемов реализации в текущем периоде по данным
// регистра НДСНачисленный в разрезе различных ставок НДС.
//
Процедура РассчитатьВыручкуДляНДС(Организация, НачалоПериода, КонецПериода, 
		ВыручкаЕНВД, ВыручкаБезНДС, ВыручкаНДС0, ВыручкаНДС, ВыручкаНДС0ТоварыНесырьевые) Экспорт

	ВыручкаЕНВД   = 0;
	ВыручкаБезНДС = 0;
	ВыручкаНДС0   = 0;
	ВыручкаНДС    = 0;
	ВыручкаНДС0ТоварыНесырьевые = 0;

	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоДня(НачалоПериода));
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(КонецКвартала(НачалоПериода)));
	
	ВидыНачисленияРеализация = Новый СписокЗначений;
	ВидыНачисленияРеализация.Добавить(Перечисления.НДСВидНачисления.РеализацияСНДС);
	ВидыНачисленияРеализация.Добавить(Перечисления.НДСВидНачисления.РеализацияБезНДС);
	ВидыНачисленияРеализация.Добавить(Перечисления.НДСВидНачисления.Реализация0);
	ВидыНачисленияРеализация.Добавить(Перечисления.НДСВидНачисления.РеализацияЕНВД);
	
	СобытияРеализация = Новый Массив;
	СобытияРеализация.Добавить(Перечисления.СобытияПоНДСПродажи.Реализация);
	СобытияРеализация.Добавить(Перечисления.СобытияПоНДСПродажи.НалогИсчисляетПокупатель);
	
	Запрос.УстановитьПараметр("ВидыНачисленияРеализация", ВидыНачисленияРеализация);
	Запрос.УстановитьПараметр("Событие",                  СобытияРеализация);
	Запрос.УстановитьПараметр("СтавкаБезНДС",             Перечисления.СтавкиНДС.БезНДС);
	Запрос.УстановитьПараметр("Ставка0",                  Перечисления.СтавкиНДС.НДС0);
	Запрос.УстановитьПараметр("СчетаВыручкиЕНВД",         ОпределитьСчетаВыручкиЕНВД());
	Запрос.УстановитьПараметр("СостояниеРеализация0",     Перечисления.НДССостоянияРеализация0.ОжидаетсяПодтверждение);
	Запрос.УстановитьПараметр("ТоварыНесырьевые",         Перечисления.ВидыЦенностей.ТоварыНесырьевые);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НДСЗаписиКнигиПродаж.СчетФактура КАК СчетФактура
	|ПОМЕСТИТЬ СчетаФактурыИсключения
	|ИЗ
	|	РегистрНакопления.НДСЗаписиКнигиПродаж КАК НДСЗаписиКнигиПродаж
	|ГДЕ
	|	НДСЗаписиКнигиПродаж.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И НДСЗаписиКнигиПродаж.Организация = &Организация
	|	И НДСЗаписиКнигиПродаж.Активность
	|	И (НДСЗаписиКнигиПродаж.СуммаБезНДС <> 0
	|			ИЛИ НДСЗаписиКнигиПродаж.НДС <> 0)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетФактура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НДСРеализация0.СчетФактура КАК СчетФактура
	|ПОМЕСТИТЬ СчетаФактурыИсключенияПоСтавке0
	|ИЗ
	|	РегистрНакопления.НДСРеализация0 КАК НДСРеализация0
	|ГДЕ
	|	НДСРеализация0.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И НДСРеализация0.Организация = &Организация
	|	И НДСРеализация0.Активность
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетФактура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ХозрасчетныйОбороты.Регистратор КАК СчетФактура
	|ПОМЕСТИТЬ СчетаФактурыИсключенияЕНВД
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(&НачалоПериода, &КонецПериода, Регистратор, Счет В (&СчетаВыручкиЕНВД), , Организация = &Организация, , ) КАК ХозрасчетныйОбороты
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетФактура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот КАК ВыручкаНДС,
	|	0 КАК ВыручкаБезНДС,
	|	0 КАК ВыручкаЕНВД,
	|	0 КАК ВыручкаНДС0,
	|	0 КАК ВыручкаНДС0ТоварыНесырьевые
	|ИЗ
	|	РегистрНакопления.НДСЗаписиКнигиПродаж.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			,
	|			Организация = &Организация
	|				И СтавкаНДС <> &Ставка0
	|				И СтавкаНДС <> &СтавкаБезНДС
	|				И Событие В (&Событие)
	|				И ВидЦенности <> ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.АвансыПолученные)) КАК НДСЗаписиКнигиПродажОбороты
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	0,
	|	НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот,
	|	0,
	|	0,
	|	0
	|ИЗ
	|	РегистрНакопления.НДСЗаписиКнигиПродаж.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			,
	|			Организация = &Организация
	|				И СтавкаНДС = &СтавкаБезНДС
	|				И Событие В (&Событие)) КАК НДСЗаписиКнигиПродажОбороты
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	0,
	|	0,
	|	ХозрасчетныйОбороты.СуммаОборотКт,
	|	0,
	|	0
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(&НачалоПериода, &КонецПериода, , Счет В (&СчетаВыручкиЕНВД), , Организация = &Организация, , ) КАК ХозрасчетныйОбороты
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	0,
	|	0,
	|	0,
	|	ВЫБОР
	|		КОГДА &НачалоПериода < ДАТАВРЕМЯ(2016, 7, 1)
	|			ТОГДА НДСРеализация0Обороты.СуммаБезНДСПриход
	|		ИНАЧЕ ВЫБОР
	|				КОГДА НДСРеализация0Обороты.ВидЦенности = &ТоварыНесырьевые
	|					ТОГДА 0
	|				ИНАЧЕ НДСРеализация0Обороты.СуммаБезНДСПриход
	|			КОНЕЦ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА &НачалоПериода < ДАТАВРЕМЯ(2016, 7, 1)
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА НДСРеализация0Обороты.ВидЦенности = &ТоварыНесырьевые
	|					ТОГДА НДСРеализация0Обороты.СуммаБезНДСПриход
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|	КОНЕЦ
	|ИЗ
	|	РегистрНакопления.НДСРеализация0.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			,
	|			Организация = &Организация
	|				И Состояние = &СостояниеРеализация0) КАК НДСРеализация0Обороты
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НДСНачисленныйОбороты.СуммаБезНДСПриход,
	|	0,
	|	0,
	|	0,
	|	0
	|ИЗ
	|	РегистрНакопления.НДСНачисленный.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			,
	|			Организация = &Организация
	|				И (СчетФактура.Дата МЕЖДУ &НачалоПериода И &КонецПериода)
	|				И ВидНачисления = ЗНАЧЕНИЕ(Перечисление.НДСВидНачисления.РеализацияСНДС)
	|				И НЕ СчетФактура В
	|						(ВЫБРАТЬ
	|							СчетаФактурыИсключения.СчетФактура
	|						ИЗ
	|							СчетаФактурыИсключения)) КАК НДСНачисленныйОбороты
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	0,
	|	НДСНачисленныйОбороты.СуммаБезНДСПриход,
	|	0,
	|	0,
	|	0
	|ИЗ
	|	РегистрНакопления.НДСНачисленный.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			,
	|			Организация = &Организация
	|				И (СчетФактура.Дата МЕЖДУ &НачалоПериода И &КонецПериода)
	|				И ВидНачисления = ЗНАЧЕНИЕ(Перечисление.НДСВидНачисления.РеализацияБезНДС)
	|				И НЕ СчетФактура В
	|						(ВЫБРАТЬ
	|							СчетаФактурыИсключения.СчетФактура
	|						ИЗ
	|							СчетаФактурыИсключения)) КАК НДСНачисленныйОбороты
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	0,
	|	0,
	|	НДСНачисленныйОбороты.СуммаБезНДСПриход,
	|	0,
	|	0
	|ИЗ
	|	РегистрНакопления.НДСНачисленный.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			,
	|			Организация = &Организация
	|				И (СчетФактура.Дата МЕЖДУ &НачалоПериода И &КонецПериода)
	|				И ВидНачисления = ЗНАЧЕНИЕ(Перечисление.НДСВидНачисления.РеализацияЕНВД)
	|				И НЕ СчетФактура В
	|						(ВЫБРАТЬ
	|							СчетаФактурыИсключенияЕНВД.СчетФактура
	|						ИЗ
	|							СчетаФактурыИсключенияЕНВД)) КАК НДСНачисленныйОбороты
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	0,
	|	0,
	|	0,
	|	ВЫБОР
	|		КОГДА &НачалоПериода < ДАТАВРЕМЯ(2016, 7, 1)
	|			ТОГДА НДСНачисленныйОбороты.СуммаБезНДСПриход
	|		ИНАЧЕ ВЫБОР
	|				КОГДА НДСНачисленныйОбороты.ВидЦенности = &ТоварыНесырьевые
	|					ТОГДА 0
	|				ИНАЧЕ НДСНачисленныйОбороты.СуммаБезНДСПриход
	|			КОНЕЦ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА &НачалоПериода < ДАТАВРЕМЯ(2016, 7, 1)
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА НДСНачисленныйОбороты.ВидЦенности = &ТоварыНесырьевые
	|					ТОГДА НДСНачисленныйОбороты.СуммаБезНДСПриход
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|	КОНЕЦ
	|ИЗ
	|	РегистрНакопления.НДСНачисленный.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			,
	|			Организация = &Организация
	|				И (СчетФактура.Дата МЕЖДУ &НачалоПериода И &КонецПериода)
	|				И ВидНачисления = ЗНАЧЕНИЕ(Перечисление.НДСВидНачисления.Реализация0)
	|				И НЕ СчетФактура В
	|						(ВЫБРАТЬ
	|							СчетаФактурыИсключенияПоСтавке0.СчетФактура
	|						ИЗ
	|							СчетаФактурыИсключенияПоСтавке0)) КАК НДСНачисленныйОбороты";
		
	ТаблицаРезультата = Запрос.Выполнить().Выгрузить();
	
	Если ТаблицаРезультата.Количество() <> 0 Тогда
		ВыручкаНДС0ТоварыНесырьевые = ТаблицаРезультата.Итог("ВыручкаНДС0ТоварыНесырьевые");
		ВыручкаНДС = ТаблицаРезультата.Итог("ВыручкаНДС")
			+ ТаблицаРезультата.Итог("ВыручкаНДС0ТоварыНесырьевые");
		ВыручкаБезНДС = ТаблицаРезультата.Итог("ВыручкаБезНДС");
		ВыручкаЕНВД = ТаблицаРезультата.Итог("ВыручкаЕНВД");
		ВыручкаНДС0 = ТаблицаРезультата.Итог("ВыручкаНДС0");
	КонецЕсли;
	
КонецПроцедуры // РассчитатьВыручкуДляНДС()

// Функция определяет наличие счетов-фактур, полученных по документам,
// которые могут являться основаниями для ввода счетов-фактур полученных.
//
// Применяется для контроля за наличием в ИБ информации о наличии счетов-
// фактур.
// 
// Параметры:
//  НачПериода       - Дата - Начальная дата выборки (включительно, с 00:00:00)
//  КонПериода       - Дата - Конечная дата выборки (включительно, по 23:59:59)
//  Организация      - Справочник.Ссылка - Организация, по которой
//                     осуществляется отбор. Необязательный параметр. Если не
//                     задан, отбор осуществляется по всем организациям.
//  Фильтр           - Документ.Ссылка, Массив - Документ или список документов, 
//                     по которым осуществляется отбор. Необязательный параметр. 
//                     Если не задан, отбор осуществляется по всем документам, 
//                     которые могут являться основаниями для ввода счетов-фактур 
//                     полученных.
//  ВсеКромеФильтра  - Булево - Признак отбора документов, не входящих в Фильтр. 
//                     Необязательный параметр. Значение по умолчаню - Ложь.
//                     Если не задан, отбираются документы, заданные в Фильтре.
//  НаличиеСчетаФактуры - Булево - Признак отбора документов:
//                        Истина - Отбирать документы, по которым существуют
//                        счета-фактуры.
//                        Ложь - Отбирать документы, по которым счета-фактуры
//                        отсутствуют.
//                        Необязательный параметр. Если не задан, осуществляется
//                        отбор всех документов.
// СчетФактураПроведен - Булево - Признак отбора счетов-фактур:
//                        Истина - Отбирать проведенные счета-фактуры
//                        Ложь - Отбирать непроведенные счета-фактуры
//                        Необязательный параметр. Если не задан, осуществляется
//                        отбор всех счетов-фактур.
// ФильтроватьКорректировкуРеализации - Булево - Признак отбора счетов-фактур
//                        Истина - Отбирать все счета-фактуры, кроме тех, у которых основание "Корректировка реализации"
//                        Ложь   - Отбирать все счета-фактуры, в т.ч. и те, у которых основание "Корректировка реализации"
//                        Необязательный параметр. Если не задан, осуществляется
//                        отбор всех счетов-фактур.
//
// Возвращаемое значение:
//  ТаблицаЗначений - Таблица значений - Состав колонок:
//                    Документ - Документ.Ссылка - Документ, по которому
//                               производился поиск счета-фактуры полученного
//                    СчетФактура - Документ.Ссылка - Ссылка на счет-
//                                  фактуру полученный, либо Неопределено
//
Функция ОпределитьНаличиеСчетовФактурПолученных(
		НачПериода = Неопределено,
		КонПериода = Неопределено,
		Организация,
		Фильтр = Неопределено,
		ВсеКромеФильтра = Ложь,
		НаличиеСчетаФактуры = Неопределено,
		СчетФактураПроведен = Неопределено,
		ДатаСФНеБолее = Неопределено,
		ФильтроватьКорректировкуРеализации = Ложь) Экспорт

	Запрос = Новый Запрос();
	
	Запрос.УстановитьПараметр("НачПериода",              НачПериода);
	Запрос.УстановитьПараметр("КонПериода",              ?(НЕ ЗначениеЗаполнено(КонПериода),'00010101',КонецДня(КонПериода)));
	Запрос.УстановитьПараметр("ДатаСФНеБолее",           ?(НЕ ЗначениеЗаполнено(ДатаСФНеБолее),Неопределено,КонецДня(ДатаСФНеБолее)));
	Запрос.УстановитьПараметр("Организация",             Организация);
	Запрос.УстановитьПараметр("Фильтр",                  Фильтр);
	Запрос.УстановитьПараметр("НачалоНалоговогоПериода", НачалоКвартала(КонПериода));
	
	// Дополняем условие запроса отбором по периоду
	Если (ЗначениеЗаполнено(НачПериода)) И (ЗначениеЗаполнено(КонПериода)) Тогда
		Условие_Основание = "
					|	ВЫБОР
					|		КОГДА СчетФактура ССЫЛКА Документ.СчетФактураПолученный ТОГДА
					|			СчетФактура.ДатаВходящегоДокумента МЕЖДУ &НачПериода И &КонПериода
					|		ИНАЧЕ СчетФактура.Дата МЕЖДУ &НачПериода И &КонПериода
					|	КОНЕЦ
					|";
	ИначеЕсли (ЗначениеЗаполнено(НачПериода)) И (НЕ ЗначениеЗаполнено(КонПериода)) Тогда
		Условие_Основание = "
					|	ВЫБОР
					|		КОГДА СчетФактура ССЫЛКА Документ.СчетФактураПолученный ТОГДА
					|			СчетФактура.ДатаВходящегоДокумента >= &НачПериода
					|		ИНАЧЕ СчетФактура.Дата >= &НачПериода
					|	КОНЕЦ
					|";
	ИначеЕсли (НЕ ЗначениеЗаполнено(НачПериода)) И (ЗначениеЗаполнено(ДатаСФНеБолее)) Тогда
		Условие_Основание = "
					|	ВЫБОР
					|		КОГДА СчетФактура ССЫЛКА Документ.СчетФактураПолученный ТОГДА
					|			СчетФактура.ДатаВходящегоДокумента <= &ДатаСФНеБолее
					|		ИНАЧЕ СчетФактура.Дата <= &ДатаСФНеБолее
					|	КОНЕЦ
					|";
	Иначе
		Условие_Основание = "";
	КонецЕсли;
	
	// Дополняем условие запроса отбором по организации
	Условие_Основание = Условие_Основание 
	               + ?(НЕ ЗначениеЗаполнено(Организация), "", ?(НЕ ЗначениеЗаполнено(Условие_Основание), "", " И ") + "Организация = &Организация ");
	
	// Дополняем условие запроса отбором по документу-основанию или списку документов-оснований
	Условие_Основание = Условие_Основание
	               + ?(НЕ ЗначениеЗаполнено(Фильтр), "", ?(НЕ ЗначениеЗаполнено(Условие_Основание), "", " И ") + "СчетФактура " + ?(ВсеКромеФильтра, " НЕ ", "") + " В (&Фильтр) ");
	
	// Дополняем условие запроса отбором по признаку наличия/отсутствия счета-фактуры
	УсловиеЗапроса = ?(НаличиеСчетаФактуры = Неопределено, "", ?(НЕ ЗначениеЗаполнено(УсловиеЗапроса), "", " И ") + ?(НаличиеСчетаФактуры, "НЕ (", "(") + "
					|	ВЫБОР
					|		КОГДА НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.СчетФактураВыданный
					|			ИЛИ НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.ГТДИмпорт
					|			ИЛИ НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.ОтчетОРозничныхПродажах
					|			ТОГДА НДСПредъявленныйОбороты.СчетФактура
					|		КОГДА НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.ОтчетКомиссионераОПродажах
					|			ТОГДА СчетФактураПолученный.Ссылка
					|		ИНАЧЕ ЕСТЬNULL(СчетФактураПолученный.Ссылка, СчетФактураВыданный.Ссылка)
					|	КОНЕЦ ЕСТЬ NULL) ");
	// Дополняем условие запроса отбором по признаку проведения счета-фактуры
	УсловиеЗапроса = УсловиеЗапроса
	               + ?(СчетФактураПроведен = Неопределено, "", ?(НЕ ЗначениеЗаполнено(УсловиеЗапроса), "", " И ") + "
					|	ВЫБОР
					|		КОГДА НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.СчетФактураВыданный
					|			ТОГДА СчетФактураВыданный.Проведен
					|		КОГДА НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.ГТДИмпорт
					|			ТОГДА ВЫРАЗИТЬ(НДСПредъявленныйОбороты.СчетФактура КАК Документ.ГТДИмпорт).Проведен
					|		КОГДА НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.ОтчетОРозничныхПродажах
					|			ТОГДА ВЫРАЗИТЬ(НДСПредъявленныйОбороты.СчетФактура КАК Документ.ОтчетОРозничныхПродажах).Проведен
					|		КОГДА НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.ОтчетКомиссионераОПродажах
					|			ТОГДА СчетФактураПолученный.Проведен
					|		ИНАЧЕ ЕСТЬNULL(СчетФактураПолученный.Проведен, СчетФактураВыданный.Проведен)
					|	КОНЕЦ = " + ?(СчетФактураПроведен, "ИСТИНА", "ЛОЖЬ") + " ");
				   
	// Дополняем условие запроса отбором по дате СФ	
	УсловиеЗапроса = УсловиеЗапроса
	               + ?(НЕ ЗначениеЗаполнено(ДатаСФНеБолее), "", ?(НЕ ЗначениеЗаполнено(УсловиеЗапроса), "", " И ") + "
					|	ВЫБОР
					|		КОГДА НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.СчетФактураВыданный
					|			ТОГДА ЕСТЬNULL(СчетФактураВыданный.Дата, ДАТАВРЕМЯ(1, 1, 1)) <= &КонПериода
					|		КОГДА НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.ГТДИмпорт
					|			ТОГДА ВЫРАЗИТЬ(НДСПредъявленныйОбороты.СчетФактура КАК Документ.ГТДИмпорт).Дата <= &КонПериода
					|		КОГДА НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.ОтчетОРозничныхПродажах
					|			ТОГДА ВЫРАЗИТЬ(НДСПредъявленныйОбороты.СчетФактура КАК Документ.ОтчетОРозничныхПродажах).Дата <= &КонПериода
					|		КОГДА НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.ОтчетКомиссионераОПродажах ТОГДА 
					|			ВЫБОР 
					|				КОГДА ЕСТЬNULL(НДСПредъявленныйОбороты.СчетФактура.Дата, ДАТАВРЕМЯ(1, 1, 1)) >= &НачалоНалоговогоПериода
					|					ТОГДА СчетФактураПолученный.Дата <= &ДатаСФНеБолее
					|				ИНАЧЕ СчетФактураПолученный.Дата <= &КонПериода
					|			КОНЕЦ
					|		КОГДА НЕ СчетФактураПолученный.Дата ЕСТЬ NULL ТОГДА 
					|			ВЫБОР 
					|				КОГДА ЕСТЬNULL(НДСПредъявленныйОбороты.СчетФактура.Дата, ДАТАВРЕМЯ(1, 1, 1)) >= &НачалоНалоговогоПериода
					|					ТОГДА СчетФактураПолученный.Дата <= &ДатаСФНеБолее
					|				ИНАЧЕ СчетФактураПолученный.Дата <= &КонПериода
					|			КОНЕЦ
					|		ИНАЧЕ ЕСТЬNULL(СчетФактураВыданный.Дата, ДАТАВРЕМЯ(1, 1, 1)) <= &КонПериода 
					|	КОНЕЦ ");
	
	// Дополняем условие запроса отбором по признаку наличия/отсутствия счета-фактуры
	УсловиеЗапроса = УсловиеЗапроса + ?(НЕ ЗначениеЗаполнено(УсловиеЗапроса), "", " И ") + "
					|	ВЫБОР
					|		КОГДА " + ?(ФильтроватьКорректировкуРеализации, "НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.КорректировкаРеализации
					|			ИЛИ ", "") + "НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.ПоступлениеТоваровУслуг
					|			И НДСПредъявленныйОбороты.ДоговорКонтрагента.УчетАгентскогоНДС
					|			И НДСПредъявленныйОбороты.ДоговорКонтрагента.НалоговыйАгентПоОплате
					|			ТОГДА ЛОЖЬ
					|		ИНАЧЕ ИСТИНА
					|	КОНЕЦ";
	
	// Дополняем условие запроса ключевым словом "ГДЕ"
	УсловиеЗапроса = ?(НЕ ЗначениеЗаполнено(УсловиеЗапроса), "", "ГДЕ " + УсловиеЗапроса);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СчетФактураПолученный.Ссылка,
	|	СчетФактураПолученный.Дата,
	|	СчетФактураПолученный.Проведен,
	|	СчетФактураПолученный.Ссылка КАК ДокументОснование,
	|	ВЫБОР
	|		КОГДА СчетФактураПолученный.БланкСтрогойОтчетности
	|			ТОГДА ""23""
	|		ИНАЧЕ СчетФактураПолученный.КодВидаОперации
	|	КОНЕЦ КАК КодВидаОперации
	|
	|ПОМЕСТИТЬ ВТ_СчетФактурыПолученные
	|ИЗ
	|	Документ.СчетФактураПолученный КАК СчетФактураПолученный
	|	
	|" + ?(ЗначениеЗаполнено(Организация), "ГДЕ Организация = &Организация", "") + "
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СчетФактураПолученный.Ссылка,
	|	СчетФактураПолученный.Ссылка.Дата КАК Дата,
	|	СчетФактураПолученный.Ссылка.Проведен КАК Проведен,
	|	СчетФактураПолученный.ДокументОснование КАК ДокументОснование,
	|	СчетФактураПолученный.Ссылка.КодВидаОперации
	|ИЗ
	|	Документ.СчетФактураПолученный.ДокументыОснования КАК СчетФактураПолученный
	|
	|" + ?(ЗначениеЗаполнено(Организация), "ГДЕ Ссылка.Организация = &Организация", "") + "
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВозвратТоваровОтПокупателя.Ссылка,
	|	ВозвратТоваровОтПокупателя.Дата,
	|	ВозвратТоваровОтПокупателя.Проведен,
	|	ВозвратТоваровОтПокупателя.Ссылка,
	|	""""
	|ИЗ
	|	Документ.ВозвратТоваровОтПокупателя КАК ВозвратТоваровОтПокупателя
	|ГДЕ
	|	ВозвратТоваровОтПокупателя.НомерРасходногоКассовогоОрдера <> """"
	|	И ВозвратТоваровОтПокупателя.ДатаРасходногоКассовогоОрдера <> ДАТАВРЕМЯ(1, 1, 1)
	|" + ?(ЗначениеЗаполнено(Организация), "И ВозвратТоваровОтПокупателя.Организация = &Организация", "") + "
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ГТДИмпорт.Ссылка,
	|	ГТДИмпорт.Дата,
	|	ГТДИмпорт.Проведен,
	|	ГТДИмпорт.Ссылка,
	|	""20""
	|ИЗ
	|	Документ.ГТДИмпорт КАК ГТДИмпорт
	|" + ?(ЗначениеЗаполнено(Организация), "ГДЕ Ссылка.Организация = &Организация", "") + "
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДокументОснование
	|;
	|
	|ВЫБРАТЬ
	|	СчетФактураВыданный.Ссылка,
	|	СчетФактураВыданный.Дата,
	|	СчетФактураВыданный.Проведен,
	|	СчетФактураВыданный.Ссылка КАК ДокументОснование,
	|	СчетФактураВыданный.КодВидаОперации КАК КодВидаОперации
	|
	|ПОМЕСТИТЬ ВТ_СчетФактураВыданный
	|ИЗ
	|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
	|ГДЕ
	|	СчетФактураВыданный.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.НаРеализацию)
	|	" + ?(ЗначениеЗаполнено(Организация), "И Организация = &Организация", "") + "
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СчетФактураВыданный.Ссылка,
	|	СчетФактураВыданный.Ссылка.Дата КАК Дата,
	|	СчетФактураВыданный.Ссылка.Проведен КАК Проведен,
	|	СчетФактураВыданный.ДокументОснование,
	|	СчетФактураВыданный.Ссылка.КодВидаОперации КАК КодВидаОперации
	|ИЗ
	|	Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураВыданный
	|ГДЕ
	|	СчетФактураВыданный.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.НаРеализацию)
	|	" + ?(ЗначениеЗаполнено(Организация), "И Ссылка.Организация = &Организация", "") + "
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДокументОснование
	|;
	|
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НДСПредъявленныйОбороты.СчетФактура,
	|	НДСПредъявленныйОбороты.ДоговорКонтрагента
	|
	|ПОМЕСТИТЬ ВТ_НДСПредъявленныйОбороты
	|ИЗ
	|	РегистрНакопления.НДСПредъявленный.Обороты(, , Период, 
	|				Организация = &Организация //ДляЗамены
	|		) КАК НДСПредъявленныйОбороты
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетФактура
	|;
	|
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЕСТЬNULL((ЕСТЬNULL(СчетФактураПолученный.КодВидаОперации, СчетФактураВыданный.КодВидаОперации)), """") КАК КодВидаОперации,
	|	ЕСТЬNULL(НДСПредъявленныйОбороты.СчетФактура, НЕОПРЕДЕЛЕНО) КАК Документ,
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.СчетФактураПолученный
	|				ТОГДА СчетФактураПолученный.ДокументОснование
	|			КОГДА НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.СчетФактураВыданный
	|				ТОГДА СчетФактураВыданный.ДокументОснование
	|			ИНАЧЕ НДСПредъявленныйОбороты.СчетФактура
	|		КОНЕЦ, НЕОПРЕДЕЛЕНО) КАК ДокументОснование,
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.СчетФактураВыданный
	|					ИЛИ НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.ГТДИмпорт
	|					ИЛИ НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.ОтчетОРозничныхПродажах
	|				ТОГДА НДСПредъявленныйОбороты.СчетФактура
	|			КОГДА НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.ОтчетКомиссионераОПродажах
	|				ТОГДА СчетФактураПолученный.Ссылка
	|			ИНАЧЕ ЕСТЬNULL(СчетФактураПолученный.Ссылка, СчетФактураВыданный.Ссылка)
	|		КОНЕЦ, НЕОПРЕДЕЛЕНО) КАК СчетФактура,
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.СчетФактураВыданный
	|				ТОГДА СчетФактураВыданный.Проведен
	|			КОГДА НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.ГТДИмпорт
	|				ТОГДА ВЫРАЗИТЬ(НДСПредъявленныйОбороты.СчетФактура КАК Документ.ГТДИмпорт).Проведен
	|			КОГДА НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.ОтчетОРозничныхПродажах
	|				ТОГДА ВЫРАЗИТЬ(НДСПредъявленныйОбороты.СчетФактура КАК Документ.ОтчетОРозничныхПродажах).Проведен
	|			КОГДА НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.ОтчетКомиссионераОПродажах
	|				ТОГДА СчетФактураПолученный.Ссылка.Проведен
	|			ИНАЧЕ ЕСТЬNULL(СчетФактураПолученный.Проведен, СчетФактураВыданный.Проведен)
	|		КОНЕЦ, НЕОПРЕДЕЛЕНО) КАК СчетФактураПроведен,
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.СчетФактураВыданный
	|				ТОГДА СчетФактураВыданный.Дата
	|			КОГДА НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.ГТДИмпорт
	|				ТОГДА ВЫРАЗИТЬ(НДСПредъявленныйОбороты.СчетФактура КАК Документ.ГТДИмпорт).Дата
	|			КОГДА НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.ОтчетОРозничныхПродажах
	|				ТОГДА ВЫРАЗИТЬ(НДСПредъявленныйОбороты.СчетФактура КАК Документ.ОтчетОРозничныхПродажах).Дата
	|			КОГДА НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.ОтчетКомиссионераОПродажах
	|				ТОГДА СчетФактураПолученный.Дата
	|			ИНАЧЕ ЕСТЬNULL(СчетФактураПолученный.Дата, СчетФактураВыданный.Дата)
	|		КОНЕЦ, НЕОПРЕДЕЛЕНО) КАК СчетФактураДата
	|ИЗ
	|	ВТ_НДСПредъявленныйОбороты КАК НДСПредъявленныйОбороты
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СчетФактурыПолученные КАК СчетФактураПолученный
	|		ПО НДСПредъявленныйОбороты.СчетФактура = СчетФактураПолученный.ДокументОснование
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СчетФактураВыданный КАК СчетФактураВыданный
	|		ПО НДСПредъявленныйОбороты.СчетФактура = СчетФактураВыданный.ДокументОснование
	|";
	
	Запрос.Текст =  Запрос.Текст + УсловиеЗапроса;
	Запрос.Текст = СтрЗаменить(Запрос.Текст,"Организация = &Организация //ДляЗамены",Условие_Основание);
	
	Если ЗначениеЗаполнено(КонПериода) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,", Период","&КонПериода, Период");
	КонецЕсли; 
	Запрос.Текст = Запрос.Текст + "
									|УПОРЯДОЧИТЬ ПО
									|	СчетФактураДата";
	
	ТаблицаДокументов = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаДокументов;
	                                        	
КонецФункции // ОпределитьНаличиеСчетовФактурПолученных()

Функция ПроводитьПоРазделуУчетаНДС(ДатаДокумента) Экспорт
	
	//ДатаНачалаУчетаНДС = Константы.ДатаНачалаАвтоматическогоОтраженияВУчетеНДС.Получить();
	
	//Возврат ДатаНачалаУчетаНДС < ДатаДокумента;
	
	Возврат Истина;
	
КонецФункции

Функция РасчетНДСвРубляхПоСтавкеДокумента(ДатаДокумента) Экспорт
	
	ДатаРасчетаПоСтавкеНДС = Константы.ДатаНачалаПересчетаСуммыНДСвРубляхПоДокументамВИностраннойВалютеПоСтавкеНДС.Получить();
	
	Возврат ?(ЗначениеЗаполнено(ДатаРасчетаПоСтавкеНДС), ДатаРасчетаПоСтавкеНДС<= ДатаДокумента,Ложь);
	
КонецФункции

// Определяет дату начала налогового периода для НДС по учетной политике
Функция ПолучитьНачалоПериодаПоУчетнойПолитике(Организация, Дата, Отказ = Ложь, УчетнаяПолитикаНУ = Неопределено) Экспорт
	
	Если УчетнаяПолитикаНУ = неопределено Тогда
		УчетнаяПолитикаНУ = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(Дата, Организация);
		Если НЕ ЗначениеЗаполнено(УчетнаяПолитикаНУ) Тогда
			Отказ = Истина;
		КонецЕсли;
	ИначеЕсли НЕ УчетнаяПолитикаНУ.Свойство("НДСНалоговыйПериод") тогда
		 Отказ = Истина;
	КонецЕсли; 
	
	Если Отказ Тогда
		Возврат ?(Дата >= '20080101', НачалоКвартала(Дата), НачалоМесяца(Дата));
	КонецЕсли;
	
	Если УчетнаяПолитикаНУ.НДСНалоговыйПериод = Перечисления.Периодичность.Квартал Тогда
		Результат = НачалоКвартала(Дата);
	Иначе
		Результат = НачалоМесяца(Дата);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Определяет дату окончания налогового периода для НДС по учетной политике
Функция ПолучитьКонецПериодаПоУчетнойПолитике(Организация, Дата, Отказ = Ложь, УчетнаяПолитикаНУ = Неопределено) Экспорт
	
	Если УчетнаяПолитикаНУ = неопределено Тогда
		УчетнаяПолитикаНУ = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(Дата, Организация);
		Если НЕ ЗначениеЗаполнено(УчетнаяПолитикаНУ) Тогда
			Отказ = Истина;
		КонецЕсли;	
	ИначеЕсли не УчетнаяПолитикаНУ.Свойство("НДСНалоговыйПериод") тогда
		 Отказ = Истина;
	КонецЕсли; 
	
	Если Отказ Тогда
		Возврат ?(Дата >= '20080101', КонецКвартала(Дата), КонецМесяца(Дата));
	КонецЕсли;
	
	Если УчетнаяПолитикаНУ.НДСНалоговыйПериод = Перечисления.Периодичность.Квартал Тогда
		Результат = КонецКвартала(Дата);
	Иначе
		Результат = КонецМесяца(Дата);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ДляСчетаФактурыНеТребуетсяКонтрагент(СчетФактура) Экспорт
	
	Возврат ТипЗнч(СчетФактура) = Тип("ДокументСсылка.ОтчетОРозничныхПродажах")
			Или ТипЗнч(СчетФактура) = Тип("ДокументСсылка.ПриходныйКассовыйОрдер")
			Или ТипЗнч(СчетФактура) = Тип("ДокументСсылка.НачислениеНДСпоСМРхозспособом");
			
КонецФункции

/////////////////////
// СЛУЖЕБНЫЕ ФУНКЦИИ

//Преименование колонок таблицы значений по данным соответствия
Процедура ПереименованиеКолонок(ТаблицаЗначений, СоответствиеНазваний, Обратное = Ложь, СообщатьОбОшибке = Истина) Экспорт
	
	Колонки = ТаблицаЗначений.Колонки;
	
	Для каждого Колонка Из СоответствиеНазваний Цикл
		Если Обратное Тогда
			СтароеНазвание = Колонка.Значение;
			НовоеНазвание =  Колонка.Ключ;
		Иначе
			СтароеНазвание = Колонка.Ключ;
			НовоеНазвание =  Колонка.Значение;
		КонецЕсли;
		Если Колонки.Найти(СтароеНазвание) = неопределено тогда
			Если СообщатьОбОшибке Тогда
			    ОбщегоНазначения.СообщитьОбОшибке("При переименовании колонок таблицы не обнаружена колонка с именем """+СтароеНазвание+"""! Переименование колонки не произведено.");
			КонецЕсли; 
		ИначеЕсли не Колонки.Найти(НовоеНазвание) = неопределено тогда
			Если СообщатьОбОшибке Тогда
			    ОбщегоНазначения.СообщитьОбОшибке("При переименовании колонок таблицы обнаружена колонка с именем """+НовоеНазвание+""", переименование существующей колонки """+СтароеНазвание+""" невозможно! Переименование колонки не произведено.");
			КонецЕсли; 
		Иначе
			Колонки[СтароеНазвание].Имя = НовоеНазвание;
		КонецЕсли;
	КонецЦикла; 
	

КонецПроцедуры

Функция ВидыЦенностейНалоговыйАгент() Экспорт
	
	ВидыЦенностей_НА = Новый СписокЗначений;
	ВидыЦенностей_НА.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентАренда);
	ВидыЦенностей_НА.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентИностранцы);
	ВидыЦенностей_НА.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентРеализацияИмущества);
	
	Возврат ВидыЦенностей_НА;
	
КонецФункции

//////////////////////////////////////////////////////////////////////////
//Преобразование промежуточных таблиц для НДС

// Преобразует таблицу значений в дерево значений, группируя значения по колонкам, формирование итога по строкам
Функция ТаблицуЗначенийВДеревоСГруппировкой(ТаблицаРезультатов, знач ГруппировочныеКолонки= "",знач КолонкиИтогов = "") Экспорт
	
	ДеревоРезультатов  = Новый ДеревоЗначений();
	Для каждого Колонка из ТаблицаРезультатов.Колонки Цикл
		ДеревоРезультатов.Колонки.Добавить(Колонка.Имя,Колонка.ТипЗначения,Колонка.Заголовок,Колонка.Ширина);
	КонецЦикла; 
	
	Если ПустаяСтрока(ГруппировочныеКолонки) Тогда
		Для каждого СтрокаТаблицы Из ТаблицаРезультатов Цикл
			СтрокаДерева = ДеревоРезультатов.Строки.Добавить();

			ЗаполнитьЗначенияСвойств(СтрокаДерева, СтрокаТаблицы);

		КонецЦикла; 
		
		Возврат ДеревоРезультатов;
	КонецЕсли;
	
	ТаблицаГруппировок = ТаблицаРезультатов.Скопировать();
	ТаблицаГруппировок.Свернуть(ГруппировочныеКолонки,КолонкиИтогов);

	Для каждого СтрокаТаблицы Из ТаблицаГруппировок Цикл
		СтрокаДерева = ДеревоРезультатов.Строки.Добавить();
		
		ЗаполнитьЗначенияСвойств(СтрокаДерева, СтрокаТаблицы);
		
	КонецЦикла; 
	
	ЗначенияОтбора = Новый Структура(ГруппировочныеКолонки);
	Для каждого СтрокаДерева из  ДеревоРезультатов.Строки Цикл
		//Формирование структуры отбора
		Для каждого ПараметрОтбора Из ЗначенияОтбора Цикл
			ЗначенияОтбора.Вставить(ПараметрОтбора.Ключ, СтрокаДерева[ПараметрОтбора.Ключ]);
		КонецЦикла; 
		
		//Поиск и заполнение подчиненными колонками
		МассивПодчиненныйхСтрок = ТаблицаРезультатов.НайтиСтроки(ЗначенияОтбора);
		Для каждого СтрокаТаблицы Из МассивПодчиненныйхСтрок Цикл
			ПодчиненнаяСтрокаДерева = СтрокаДерева.Строки.Добавить();
			
			ЗаполнитьЗначенияСвойств(ПодчиненнаяСтрокаДерева, СтрокаТаблицы);
			
		КонецЦикла; 
	КонецЦикла;
		
	Возврат ДеревоРезультатов;
КонецФункции

//////////////////////////////////////////////////////////////////////////
//  ОПЕРАТИВНЫЕ ДВИЖЕНИЯ РЕГИСТРОВ ПОДСИСТЕМЫ НДС

// Функция возвращает массив счетов учета выручки по деятельности,
// относящейся к ЕНВД.
// 
Функция ОпределитьСчетаВыручкиЕНВД()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Счета90_01", 
		БухгалтерскийУчет.СчетаВИерархии(ПланыСчетов.Хозрасчетный.Выручка));
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СчетаДоходовИРасходовЕНВД.Счет КАК Счет
	|ИЗ
	|	РегистрСведений.СчетаУчетаПоДеятельностиЕНВД КАК СчетаДоходовИРасходовЕНВД
	|ГДЕ
	|	СчетаДоходовИРасходовЕНВД.Счет В(&Счета90_01)";
	
	ТаблицаСчетов = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаСчетов.ВыгрузитьКолонку("Счет");
	
КонецФункции

// Формирует список счетов учета косвенных расходов
Функция ОпределитьСчетаУчетаКосвенныхРасходов() Экспорт

	ПланСчетовБУ = ПланыСчетов.Хозрасчетный;
	
	СчетаУчетаЗатрат = Новый СписокЗначений();
	СчетаУчетаЗатрат.Добавить(ПланСчетовБУ.ОсновноеПроизводство);
	СчетаУчетаЗатрат.Добавить(ПланСчетовБУ.ОсновноеПроизводствоНеОблагаемоеЕНВД);
	
	СчетаУчетаЗатрат.Добавить(ПланСчетовБУ.ВспомогательныеПроизводства);
	СчетаУчетаЗатрат.Добавить(ПланСчетовБУ.ВспомогательныеПроизводстваНеОблагаемоеЕНВД);
	
	СчетаУчетаЗатрат.Добавить(ПланСчетовБУ.ОбщепроизводственныеРасходы);
	СчетаУчетаЗатрат.Добавить(ПланСчетовБУ.ОбщепроизводственныеРасходыНеОблагаемыеЕНВД);
	СчетаУчетаЗатрат.Добавить(ПланСчетовБУ.ОбщепроизводственныеРасходыРаспределяемые);
	
	СчетаУчетаЗатрат.Добавить(ПланСчетовБУ.ОбщехозяйственныеРасходы);
	СчетаУчетаЗатрат.Добавить(ПланСчетовБУ.ОбщехозяйственныеРасходыНеОблагаемыеЕНВД);
	СчетаУчетаЗатрат.Добавить(ПланСчетовБУ.ОбщехозяйственныеРасходыРаспределяемые);
	
	СчетаУчетаЗатрат.Добавить(ПланСчетовБУ.ИздержкиОбращения);
	СчетаУчетаЗатрат.Добавить(ПланСчетовБУ.ИздержкиОбращенияНеОблагаемыеЕНВД);
	СчетаУчетаЗатрат.Добавить(ПланСчетовБУ.ИздержкиОбращенияРаспределяемые);
	
	СчетаУчетаЗатрат.Добавить(ПланСчетовБУ.КоммерческиеРасходы);
	СчетаУчетаЗатрат.Добавить(ПланСчетовБУ.КоммерческиеРасходыНеОблагаемыеЕНВД);
	СчетаУчетаЗатрат.Добавить(ПланСчетовБУ.КоммерческиеРасходыРаспределяемые);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Хозрасчетный.Ссылка
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.СчетаУчетаПоДеятельностиЕНВД КАК СчетаУчетаПоДеятельностиЕНВД
	|	ПО
	|		Хозрасчетный.Ссылка = СчетаУчетаПоДеятельностиЕНВД.Счет
	|	
	|ГДЕ
	|	Хозрасчетный.Ссылка В ИЕРАРХИИ(&СписокСчетов)
	|	И Не Хозрасчетный.ЗапретитьИспользоватьВПроводках
	|	И (СчетаУчетаПоДеятельностиЕНВД.Счет ЕСТЬ NULL 
	|	   ИЛИ СчетаУчетаПоДеятельностиЕНВД.ПодлежитРаспределению)
	|";
	
	Запрос.УстановитьПараметр("СписокСчетов",СчетаУчетаЗатрат);
	
	СчетаУчетаЗатрат.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
	Возврат СчетаУчетаЗатрат;

КонецФункции

// Формирует список счетов учета ценностей
// ОС - основных средств
// НМА - нематериальных активов
// ВНА - внеоборотных активов
// ОбъектыСтроительства - объектов строительства
// Материалы - материалов
//
Функция ОпределитьСчетаУчетаЦенностей(ОбъектыУчета = "", ДатаОбъекта = '00010101')

	ПланСчетовБУ = ПланыСчетов.Хозрасчетный;
	
	СчетаУчетаЗатрат = Новый СписокЗначений();
	Если ОбъектыУчета = "Оборудование" Или ОбъектыУчета = "ВНА" Тогда
		Если ДатаОбъекта >= '20060101' Тогда
			СчетаУчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ОборудованиеКУстановке);
		Иначе 
			Возврат СчетаУчетаЗатрат;
		КонецЕсли;
	КонецЕсли;
	Если ОбъектыУчета = "ОС" Или ОбъектыУчета = "ВНА" Тогда
		Если ДатаОбъекта < '20060101' Тогда
			СчетаУчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ОборудованиеКУстановке);
		КонецЕсли;
		СчетаУчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ПриобретениеОбъектовОсновныхСредств);
	КонецЕсли; 
	Если ОбъектыУчета = "НМА" Или ОбъектыУчета = "ВНА" Тогда
		СчетаУчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ПриобретениеНематериальныхАктивов);
	КонецЕсли;  
	Если ОбъектыУчета = "ОбъектыСтроительства" Или ОбъектыУчета = "ВНА" Тогда
		СчетаУчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.СтроительствоОбъектовОсновныхСредств);
	КонецЕсли;
	Если ОбъектыУчета = "Материалы" Тогда
		СчетаУчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.Материалы);
	КонецЕсли;  
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Хозрасчетный.Ссылка
		|ИЗ
		|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
		|ГДЕ
		|	Хозрасчетный.Ссылка В ИЕРАРХИИ(&СписокСчетов)
		|	И Хозрасчетный.ЗапретитьИспользоватьВПроводках = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("СписокСчетов",СчетаУчетаЗатрат);
	
	СчетаУчетаЗатрат.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
	Возврат СчетаУчетаЗатрат;

КонецФункции

Функция ВидыЦенностиНалоговыйАгентПоступление() Экспорт
	
	ВидыЦенностей = Новый Массив;
	ВидыЦенностей.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентАренда);
	ВидыЦенностей.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентРеализацияИмущества);
	ВидыЦенностей.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентИностранцы);
	
	Возврат ВидыЦенностей;
	
КонецФункции

Функция НалоговыйАгентЗаСчетСобственныхСредств(ВидЦенностиВидДоговора) Экспорт
	
	Если ТипЗнч(ВидЦенностиВидДоговора) = Тип("ПеречислениеСсылка.ВидыЦенностей") Тогда
		Если ВидЦенностиВидДоговора = Перечисления.ВидыЦенностей.НалоговыйАгентИностранцы Тогда
			Возврат Истина;
		Иначе
			Возврат Ложь;
		КонецЕсли;
	Иначе
		Если ВидЦенностиВидДоговора = Перечисления.ВидыАгентскихДоговоров.Нерезидент Тогда
			Возврат Истина;
		Иначе
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
КонецФункции

Функция ОпределитьПартииСписанияПоРегиструНДСПартии(СтруктураШапкиДокумента, ТаблицаВыручки,Отказ, Заголовок, ЭтоВозврат = Ложь, ЭтоВозвратОтПокупателя = Ложь, СтруктураПараметров, ЭтоКорректировкаРеализации = Ложь) Экспорт
	
	ВидДокумента = "";
	СтруктураШапкиДокумента.Свойство("ВидДокумента", ВидДокумента);
	ВестиСуммовойУчетПоСкладамБУ = УправлениеЗапасамиПартионныйУчет.ВедетсяСуммовойУчетПоСкладам(ПланыСчетов.Хозрасчетный.Товары);
	
	ДополнитьСтруктуруШапкиДокументаДляНДС(СтруктураШапкиДокумента, Истина);
	
	ПартионныйУчетБУ = ((СтруктураШапкиДокумента.БухгалтерскийУчетСпособОценкиМПЗ = Перечисления.СпособыОценки.ФИФО 
					Или СтруктураШапкиДокумента.БухгалтерскийУчетСпособОценкиМПЗ = Перечисления.СпособыОценки.ЛИФО)
					И (Не УправлениеЗапасами.ИспользуетсяРасширеннаяАналитикаУчета(СтруктураШапкиДокумента.Дата)));
	
	ТаблицаСписанияНДСПоСтрокам = РегистрыНакопления.НДСПартииТоваров.СоздатьНаборЗаписей().Выгрузить();
	ТаблицаСписанияНДСПоСтрокам.Колонки.Добавить("ДействияНДСПокупки_ВключитьВСтоимость", Новый ОписаниеТипов("Булево"));
	ТаблицаСписанияНДСПоСтрокам.Колонки.Добавить("ДействияНДСПокупки_ИсключитьИзСтоимости", Новый ОписаниеТипов("Булево"));
	ТаблицаСписанияНДСПоСтрокам.Колонки.Добавить("ДействияНДСПокупки_ПредположениеСтавки0", Новый ОписаниеТипов("Булево"));
	ТаблицаСписанияНДСПоСтрокам.Колонки.Добавить("БлокироватьДоПодтвержденияСтавки0", Новый ОписаниеТипов("Булево"));
	
	Если СтруктураШапкиДокумента.СложныйУчетНДС 
		И Не СтруктураШапкиДокумента.ПартионныйУчетНДСвРазрезеСерийИХарактеристик
		Тогда
		
		ТаблицаСписанияНДСПоСтрокам.Колонки.Добавить("СерияНоменклатуры_Базовая");
		ТаблицаСписанияНДСПоСтрокам.Колонки.Добавить("ХарактеристикаНоменклатуры_Базовая");
		
		ТаблицаВыручки.Колонки.Добавить("СерияНоменклатуры_Базовая");
		ТаблицаВыручки.ЗагрузитьКолонку(ТаблицаВыручки.ВыгрузитьКолонку("СерияНоменклатуры"), "СерияНоменклатуры_Базовая");
		ТаблицаВыручки.Колонки.Добавить("ХарактеристикаНоменклатуры_Базовая");
		ТаблицаВыручки.ЗагрузитьКолонку(ТаблицаВыручки.ВыгрузитьКолонку("ХарактеристикаНоменклатуры"), "ХарактеристикаНоменклатуры_Базовая");
		
	КонецЕсли;
	
	Если ЭтоВозврат 
		И Не ЭтоВозвратОтПокупателя Тогда
		ТаблицаСписанияНДСПоСтрокам.Колонки.Добавить("ПартияСовпадаетСУказаннымДокументомДляВозврата", Новый ОписаниеТипов("Булево"));
	КонецЕсли; 
	
	Для Каждого Колонка Из ТаблицаВыручки.Колонки Цикл
		Если ТаблицаСписанияНДСПоСтрокам.Колонки.Найти(Колонка.Имя) = Неопределено Тогда
			ТаблицаСписанияНДСПоСтрокам.Колонки.Добавить(Колонка.Имя, Колонка.ТипЗначения); 
		КонецЕсли; 
	КонецЦикла;
		
	ТаблицаВыручки.Колонки.Добавить("НДСВСтоимостиТоваров", Новый ОписаниеТипов("ПеречислениеСсылка.ДействиеНДСВСтоимостиТоваров"));
	Если СтруктураШапкиДокумента.Свойство("НДСВСтоимостиТоваров") Тогда
		ТаблицаВыручки.ЗаполнитьЗначения(СтруктураШапкиДокумента.НДСВСтоимостиТоваров, "НДСВСтоимостиТоваров")	
	КонецЕсли; 
	
	ЕстьСтавкаНДС = ТаблицаВыручки.Колонки.Найти("СтавкаНДС") <> Неопределено И Не СтруктураШапкиДокумента.Свойство("НДСВСтоимостиТоваров");
	ЕстьСкладВТЧ = ТаблицаВыручки.Колонки.Найти("Склад") <> Неопределено;
	
	//////////////////////////////////////////////////////////////////////////////////
	// Определяем партии к списанию по регистру по ключевым наборам реквизитов.
	ТаблицаВыручки.Колонки.Добавить("СписыватьПоПартиямНДС", Новый ОписаниеТипов("Булево"));
	ВыданоСообщениеБезНДС = Ложь;
	ВыданоСообщение0 = Ложь;
	
	Для каждого СтрокаСписания Из ТаблицаВыручки Цикл
		
		Если СтруктураШапкиДокумента.ОрганизацияПрименяетУСН Тогда
			// Не ведется партионный учет если организация применяет УСН
			СтрокаСписания.СписыватьПоПартиямНДС = Ложь;
			
		ИначеЕсли НЕ ЗначениеЗаполнено(СтрокаСписания.СчетУчетаБУ) Тогда
			// Не указан счет учета ТМЦ, такое возможно только для услуг.
			СтрокаСписания.СписыватьПоПартиямНДС = Ложь;
			
		ИначеЕсли СтрокаСписания.СчетУчетаБУ.Забалансовый Тогда
			// Для товаров, учтываемых на забалансовых счетах учет НДС не ведется.
			СтрокаСписания.СписыватьПоПартиямНДС = Ложь;
			
		ИначеЕсли НЕ ЗначениеЗаполнено(СтрокаСписания.Количество) Тогда
			// Строки с пустым количеством игнорируем
			СтрокаСписания.СписыватьПоПартиямНДС = Ложь;
			
		ИначеЕсли СтруктураШапкиДокумента.СложныйУчетНДС Тогда
			//Все партии приобретенных ТМЦ учтены в регистре, все надо списывать.
			СтрокаСписания.СписыватьПоПартиямНДС = Истина;
			
		ИначеЕсли ОпределитьСчетаУчетаОСиНМА("ОС").НайтиПоЗначению(СтрокаСписания.СчетУчетаБУ) <> Неопределено Тогда
			// Оставляем строки только по ОС. По ним партионный учет ведется всегда!
			СтрокаСписания.СписыватьПоПартиямНДС = Истина;
			
		ИначеЕсли ПрименяетсяОсвобождениеОтУплатыНДС(СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.Дата)	Тогда
			
			СтрокаСписания.СписыватьПоПартиямНДС = Ложь;
			
		Иначе 
			
			Если ЕстьСтавкаНДС Тогда
				
				Если СтрокаСписания.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС 
					И Не ВыданоСообщениеБезНДС Тогда
					
					ОбщегоНазначения.СообщитьОбОшибке("При реализации без НДС, НДС по приобретенным ценностям необходимо включать в стоимость реализуемой партии товаров (ст. 170 НК РФ).
					|Для автоматического контроля включения НДС в стоимость в учетной политике по налоговому учету необходимо установить флаг ""Наличие операций без НДС или с НДС 0%""
					|и выполнить все связанные с этим действия!", ВыданоСообщениеБезНДС , Заголовок, СтатусСообщения.Информация);
					
				ИначеЕсли СтрокаСписания.СтавкаНДС = Перечисления.СтавкиНДС.НДС0 
					И Не ВыданоСообщение0 Тогда
					
					ОбщегоНазначения.СообщитьОбОшибке("При реализации с НДС 0%, вычет НДС по приобретенным ценностям возможен только после подтверждения ставки НДС 0% (п.3 ст. 172 НК РФ).
					|До этого момента вычет должен быть заблокирован.
					|Для автоматической блокировки вычета НДС в учетной политике по налоговому учету необходимо установить флаг ""Наличие операций без НДС или с НДС 0%""
					|и выполнить все связанные с этим действия!", ВыданоСообщение0, Заголовок, СтатусСообщения.Информация);
					
				КонецЕсли;
				
			ИначеЕсли СтрокаСписания.НДСВСтоимостиТоваров = Перечисления.ДействиеНДСВСтоимостиТоваров.ВключитьВСтоимость
				Или СтрокаСписания.НДСВСтоимостиТоваров = Перечисления.ДействиеНДСВСтоимостиТоваров.ИсключитьИзСтоимости 
				И Не ВыданоСообщениеБезНДС Тогда
				
				Если ВидДокумента = "СписаниеТоваров" тогда
					ОбщегоНазначения.СообщитьОбОшибке("При списании ТМЦ в результате инвентаризации на счет 94 <Недостачи и потери от порчи ценностей>,
					|НДС по приобретенным ценностям необходимо включать в стоимость списываемой партии товаров.
					|Для автоматического контроля включения НДС в стоимость в учетной политике по налоговому учету необходимо установить флаг ""Наличие операций без НДС или с НДС 0%""
					|и выполнить все связанные с этим действия!", ВыданоСообщениеБезНДС, Заголовок, СтатусСообщения.Информация);
				Иначе
					ОбщегоНазначения.СообщитьОбОшибке("Для автоматического контроля включения НДС в стоимость (исключения из стоимости) в учетной политике по налоговому учету необходимо установить флаг ""Наличие операций без НДС или с НДС 0%""
					|и выполнить все связанные с этим действия!",ВыданоСообщениеБезНДС , Заголовок, СтатусСообщения.Информация);
				КонецЕсли; 
				
			КонецЕсли;
			
			СтрокаСписания.СписыватьПоПартиямНДС = Ложь;
			
		КонецЕсли;
		
		Если СтрокаСписания.СписыватьПоПартиямНДС 
			И ЕстьСтавкаНДС Тогда
			
			Если ЭтоВозврат Тогда 
				СтрокаСписания.НДСВСтоимостиТоваров = Перечисления.ДействиеНДСВСтоимостиТоваров.НеИзменять;	 
			ИначеЕсли СтрокаСписания.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
				СтрокаСписания.НДСВСтоимостиТоваров = Перечисления.ДействиеНДСВСтоимостиТоваров.ВключитьВСтоимость;
			ИначеЕсли ЗначениеЗаполнено(СтрокаСписания.СтавкаНДС) Тогда
				СтрокаСписания.НДСВСтоимостиТоваров = Перечисления.ДействиеНДСВСтоимостиТоваров.ИсключитьИзСтоимости;
			КонецЕсли; 
			
		КонецЕсли;
		
		Если ЕстьСкладВТЧ тогда
			Если Не ЗначениеЗаполнено(СтрокаСписания.Склад)  Тогда
				СтрокаСписания.Склад = Справочники.Склады.ПустаяСсылка();
			КонецЕсли; 
		КонецЕсли;
		
	КонецЦикла; 

	КолвоЭлементовКоллекции = ТаблицаВыручки.Количество(); 
	
	Для ОбратныйИндекс = 1 По КолвоЭлементовКоллекции Цикл 
		ЭлементКоллекции = ТаблицаВыручки[КолвоЭлементовКоллекции - ОбратныйИндекс]; 
		Если Не ЭлементКоллекции.СписыватьПоПартиямНДС Тогда 
			ТаблицаВыручки.Удалить(ЭлементКоллекции); 
		КонецЕсли; 
		
	КонецЦикла;
	
	Если ТаблицаВыручки.Количество() = 0 Тогда
		//Возвращаем пустую таблицу списаний. Все прошло удачно, но движения по партиям не требуются.
		Возврат ТаблицаСписанияНДСПоСтрокам;
	КонецЕсли; 

	Если ТаблицаВыручки.Колонки.Найти("Склад") = Неопределено Тогда
	    ТаблицаВыручки.Колонки.Добавить("Склад", Новый ОписаниеТипов("СправочникСсылка.Склады"));
	КонецЕсли;
	Если ТаблицаВыручки.Колонки.Найти("КоличествоПоступление") = Неопределено Тогда
	    ТаблицаВыручки.Колонки.Добавить("КоличествоПоступление", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
		ТаблицаВыручки.ЗаполнитьЗначения(0, "КоличествоПоступление");		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Если Не ЭтоВозвратОтПокупателя Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	НДСПартииТоваровОстатки.Склад КАК Склад,
		|	НДСПартииТоваровОстатки.СчетУчета КАК СчетУчета,
		|	НДСПартииТоваровОстатки.Номенклатура КАК Номенклатура,
		|	НДСПартииТоваровОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	НДСПартииТоваровОстатки.СерияНоменклатуры КАК СерияНоменклатуры,
		|	НДСПартииТоваровОстатки.Партия.Дата КАК ДатаПартии,
		|	НДСПартииТоваровОстатки.Партия КАК Партия,
		|	НДСПартииТоваровОстатки.Заказ КАК Заказ,
		|	НДСПартииТоваровОстатки.СчетФактура.Дата КАК ДатаСФ,
		|	НДСПартииТоваровОстатки.СчетФактура КАК СчетФактура,
		|	НДСПартииТоваровОстатки.НДСВключенВСтоимость,
		|	НДСПартииТоваровОстатки.КоличествоОстаток,
		|	НДСПартииТоваровОстатки.СтоимостьОстаток,
		|	НДСПартииТоваровОстатки.НДСОстаток,
		|	ВЫБОР
		|		КОГДА НДСПартииТоваровОстатки.КоличествоОстаток > 0
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЕстьКоличество,
		|	НДСПартииТоваровОстатки.ВидЦенности,
		|	НДСПартииТоваровОстатки.СчетУчетаНДС,
		|	НДСПартииТоваровОстатки.СтавкаНДС,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(НДСПартииТоваровОстатки.СчетФактура.Дата, ДАТАВРЕМЯ(1, 1, 1)) < ДАТАВРЕМЯ(2016, 7, 1)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЕСТЬNULL(СвойстваНоменклатуры.СырьевойТовар, ЛОЖЬ)
		|	КОНЕЦ КАК БлокироватьДоПодтвержденияСтавки0
		|ИЗ
		|	РегистрНакопления.НДСПартииТоваров.Остатки(
		|			&МоментСписания,
		|			Организация = &Организация
		|				И СчетУчета В (&СписокСчетовУчета)
		|				И Номенклатура В (&СписокНоменклатуры)
		|				И Склад В (&СписокСкладов)) КАК НДСПартииТоваровОстатки
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторТНВЭД КАК СвойстваНоменклатуры
		|			ПО СправочникНоменклатура.КодТНВЭД = СвойстваНоменклатуры.Ссылка
		|		ПО НДСПартииТоваровОстатки.Номенклатура = СправочникНоменклатура.Ссылка
		|ГДЕ
		|	НЕ НДСПартииТоваровОстатки.СтоимостьОстаток < 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаПартии,
		|	ДатаСФ";
		
		СписокСкладов = Новый Массив;
		
		Если СтруктураШапкиДокумента.ВидДокумента = "ВозвратТоваровОтПокупателя" 
			И СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
			// Не производится отбор по складу. При передаче на комиссию в партионном учете склад не указывается.
		ИначеЕсли ВестиСуммовойУчетПоСкладамБУ Тогда
			СписокСкладов = ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(ТаблицаВыручки.ВыгрузитьКолонку("Склад"));
		КонецЕсли; 
		
		СписокСкладов.Добавить(Справочники.Склады.ПустаяСсылка());
		
		Запрос.УстановитьПараметр("СписокСкладов", СписокСкладов);
												
		Если ПартионныйУчетБУ Тогда 	
			Запрос.УстановитьПараметр("ОтборПоПартиямБУ", ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(ТаблицаВыручки.ВыгрузитьКолонку("Партия")));
			Запрос.Текст = СтрЗаменить(Запрос.Текст,"Номенклатура В (&СписокНоменклатуры)","Номенклатура В (&СписокНоменклатуры) " +символы.ПС+
													"И Партия В (&ОтборПоПартиямБУ)");
		КонецЕсли;

	Иначе // ЭтоВозвратОтПокупателя
		
		СписокДокументовРеализации = ТаблицаВыручки.ВыгрузитьКолонку("ДокументПартии");
		// Возврат может осуществляться как с указанием документа реализации, так и с указанием документа поступления
		// Необходимо разделить возвраты на две группы
		СписокДокументовПартии	   = ТаблицаВыручки.ВыгрузитьКолонку("Партия");
		
		Для ИндексЭлемента = 0 По СписокДокументовРеализации.Количество() - 1 Цикл
			Если СписокДокументовРеализации[ИндексЭлемента] = СписокДокументовПартии[ИндексЭлемента] Тогда
				 СписокДокументовРеализации[ИндексЭлемента] = Неопределено;
			Иначе
				 СписокДокументовПартии[ИндексЭлемента] = Неопределено;
			КонецЕсли; 
		КонецЦикла; 
		
		СписокДокументовРеализации	= ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(СписокДокументовРеализации, Истина);
		СписокДокументовПартии 		= ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(СписокДокументовПартии, Истина);
		
		Если ТипЗнч(СтруктураПараметров) = Тип("Структура") 
			И СтруктураПараметров.Свойство("ДеревоРасходныхОрдеров") Тогда
			
			// Дополним список документов реализации расходными ордерами, которые могли отразить непосредственное списание партии
			КоличествоДокументовРеализации = СписокДокументовРеализации.Количество();
			Для ИндексЭлемента = 0 по КоличествоДокументовРеализации - 1 Цикл
				
				ДокументРеализации = СписокДокументовРеализации[ИндексЭлемента];
				СтрокаРегистратора = СтруктураПараметров.ДеревоРасходныхОрдеров.Строки.Найти(ДокументРеализации, "Регистратор");
				
				Если Не СтрокаРегистратора = Неопределено 
					И СтрокаРегистратора.Строки.Количество() <> 0 Тогда
					
					МассивОрдеров = ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(СтрокаРегистратора.Строки.ВыгрузитьКолонку("РасходныйОрдерНаТовары"));
					Для Каждого Ордер Из МассивОрдеров Цикл
						СписокДокументовРеализации.Добавить(Ордер);
					КонецЦикла; 
					
				КонецЕсли; 
				
			КонецЦикла;
			
		КонецЕсли; 
		
		Если СписокДокументовРеализации.Количество() = 0 
			И СписокДокументовПартии.Количество() = 0 Тогда
			//Возвращаем пустую таблицу списаний. Все прошло удачно, но движения по партиям не требуются.
			Возврат ТаблицаСписанияНДСПоСтрокам;
		КонецЕсли; 
		
		Запрос.УстановитьПараметр("ВидДвиженияРасход", ВидДвиженияНакопления.Расход);
		Запрос.УстановитьПараметр("СписокДокументовРеализации", СписокДокументовРеализации);
		
		Если СписокДокументовРеализации.Количество()>0 Тогда
		
			ТекстЗапросаПоДокументамРеализации = 
			"ВЫБРАТЬ
			|	НДСПартииТоваров.Склад КАК Склад,
			|	НДСПартииТоваров.СчетУчета КАК СчетУчета,
			|	НДСПартииТоваров.Номенклатура КАК Номенклатура,
			|	НДСПартииТоваров.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
			|	НДСПартииТоваров.СерияНоменклатуры КАК СерияНоменклатуры,
			|	НДСПартииТоваров.Партия.Дата КАК ДатаПартии,
			|	НДСПартииТоваров.Партия КАК Партия,
			|	НДСПартииТоваров.Заказ КАК Заказ,
			|	НДСПартииТоваров.СчетФактура.Дата КАК ДатаСФ,
			|	НДСПартииТоваров.СчетФактура КАК СчетФактура,
			|	НДСПартииТоваров.НДСВключенВСтоимость,
			|	НДСПартииТоваров.Количество КАК КоличествоОстаток,
			|	НДСПартииТоваров.Стоимость КАК СтоимостьОстаток,
			|	ВЫБОР
			|		КОГДА НДСПартииТоваров.Количество > 0
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК ЕстьКоличество,
			|	НДСПартииТоваров.ВидЦенности,
			|	НДСПартииТоваров.СчетУчетаНДС,
			|	НДСПартииТоваров.СтавкаНДС,
			|	НДСПартииТоваров.НДС КАК НДСОстаток,
			|	ВЫБОР
			|		КОГДА ЕСТЬNULL(НДСПартииТоваров.СчетФактура.Дата, ДАТАВРЕМЯ(1, 1, 1)) < ДАТАВРЕМЯ(2016, 7, 1)
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЕСТЬNULL(СвойстваНоменклатуры.СырьевойТовар, ЛОЖЬ)
			|	КОНЕЦ КАК БлокироватьДоПодтвержденияСтавки0
			|ИЗ
			|	РегистрНакопления.НДСПартииТоваров КАК НДСПартииТоваров
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
			|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторТНВЭД КАК СвойстваНоменклатуры
			|			ПО СправочникНоменклатура.КодТНВЭД = СвойстваНоменклатуры.Ссылка
			|		ПО НДСПартииТоваров.Номенклатура = СправочникНоменклатура.Ссылка
			|ГДЕ
			|	НДСПартииТоваров.Регистратор В(&СписокДокументовРеализации)
			|	И НДСПартииТоваров.Номенклатура В(&СписокНоменклатуры)
			|	И НДСПартииТоваров.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)";
			Если ПартионныйУчетБУ Тогда 	
				Запрос.УстановитьПараметр("ОтборПоПартиямБУ", ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(ТаблицаВыручки.ВыгрузитьКолонку("Партия")));
				Запрос.Текст = СтрЗаменить(Запрос.Текст,"Номенклатура В (&СписокНоменклатуры)","Номенклатура В (&СписокНоменклатуры) " +символы.ПС+
														"И Партия В (&ОтборПоПартиямБУ)");
			КонецЕсли;
			
		Иначе
			ТекстЗапросаПоДокументамРеализации = "";
		КонецЕсли; 
		
		Если СписокДокументовПартии.Количество()>0 Тогда
			Запрос.УстановитьПараметр("СписокДокументовПартии", СписокДокументовПартии);
			ТекстЗапросаПоДокументамПоступления =
			"ВЫБРАТЬ
			|	НДСПартииТоваров.Склад КАК Склад,
			|	НДСПартииТоваров.СчетУчета КАК СчетУчета,
			|	НДСПартииТоваров.Номенклатура КАК Номенклатура,
			|	НДСПартииТоваров.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
			|	НДСПартииТоваров.СерияНоменклатуры КАК СерияНоменклатуры,
			|	НДСПартииТоваров.Партия.Дата КАК ДатаПартии,
			|	НДСПартииТоваров.Партия КАК Партия,
			|	НДСПартииТоваров.Заказ КАК Заказ,
			|	НДСПартииТоваров.СчетФактура.Дата КАК ДатаСФ,
			|	НДСПартииТоваров.СчетФактура КАК СчетФактура,
			|	НДСПартииТоваров.НДСВключенВСтоимость,
			|	НДСПартииТоваров.КоличествоРасход КАК КоличествоОстаток,
			|	НДСПартииТоваров.СтоимостьРасход КАК СтоимостьОстаток,
			|	ВЫБОР
			|		КОГДА НДСПартииТоваров.КоличествоРасход > 0
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК ЕстьКоличество,
			|	НДСПартииТоваров.ВидЦенности,
			|	НДСПартииТоваров.СчетУчетаНДС,
			|	НДСПартииТоваров.СтавкаНДС,
			|	НДСПартииТоваров.НДСРасход КАК НДСОстаток,
			|	ВЫБОР
			|		КОГДА ЕСТЬNULL(НДСПартииТоваров.СчетФактура.Дата, ДАТАВРЕМЯ(1, 1, 1)) < ДАТАВРЕМЯ(2016, 7, 1)
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЕСТЬNULL(СвойстваНоменклатуры.СырьевойТовар, ЛОЖЬ)
			|	КОНЕЦ КАК БлокироватьДоПодтвержденияСтавки0
			|ИЗ
			|	РегистрНакопления.НДСПартииТоваров.Обороты(
			|		,
			|		&МоментСписания,
			|		Регистратор,
			|		Организация = &Организация
			|			И Номенклатура В (&СписокНоменклатуры)
			|			И Партия В (&СписокДокументовПартии)) КАК НДСПартииТоваров
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
			|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторТНВЭД КАК СвойстваНоменклатуры
			|			ПО СправочникНоменклатура.КодТНВЭД = СвойстваНоменклатуры.Ссылка
			|		ПО НДСПартииТоваров.Номенклатура = СправочникНоменклатура.Ссылка
			|ГДЕ
			|	(НЕ НДСПартииТоваров.Регистратор В (&СписокДокументовРеализации))
			|	И (НДСПартииТоваров.Регистратор ССЫЛКА Документ.РеализацияТоваровУслуг
			|			ИЛИ НДСПартииТоваров.Регистратор ССЫЛКА Документ.ОтчетОРозничныхПродажах)";
		КонецЕсли; 
		
		Запрос.Текст = ТекстЗапросаПоДокументамРеализации 
					+?(ПустаяСтрока(ТекстЗапросаПоДокументамРеализации) или ПустаяСтрока(ТекстЗапросаПоДокументамПоступления),""," Объединить Все ") 
					+ ТекстЗапросаПоДокументамПоступления 
					+"
					|УПОРЯДОЧИТЬ ПО
					|	ДатаПартии УБЫВ,
					|	ДатаСФ УБЫВ";
	КонецЕсли; 
				
	МоментСписания = Новый Граница(СтруктураШапкиДокумента.Ссылка.МоментВремени(), ВидГраницы.Исключая);
	Если СтруктураШапкиДокумента.Свойство("ВидПередачи") И СтруктураПараметров.Свойство("Регистратор") 
		И СтруктураШапкиДокумента.ВидПередачи = Перечисления.ВидыПередачиТоваров.ПоОрдеру  Тогда
		МоментВремениСписания = Новый МоментВремени(СтруктураШапкиДокумента.Ссылка.Дата, СтруктураПараметров.Регистратор); 
		МоментСписания 	   	  = Новый Граница(МоментВремениСписания, ВидГраницы.Исключая);  
	КонецЕсли;

	Запрос.УстановитьПараметр("МоментСписания", 		МоментСписания);
	Запрос.УстановитьПараметр("Организация", 			СтруктураШапкидокумента.Организация);
	
	Запрос.УстановитьПараметр("СписокСчетовУчета", 		ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(ТаблицаВыручки.выгрузитьКолонку("СчетУчетаБУ")));
	Запрос.УстановитьПараметр("СписокНоменклатуры", 	ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(ТаблицаВыручки.выгрузитьКолонку("Номенклатура")));
	
	ТаблицаПартий = Запрос.Выполнить().Выгрузить();
	
	СортироватьПоУказанномуДокументуПриВозврате = ЭтоВозврат и не ЭтоВозвратОтПокупателя;

	Если СортироватьПоУказанномуДокументуПриВозврате Тогда
		ТаблицаПартий.Колонки.Добавить("ПартияСовпадаетСУказаннымДокументомДляВозврата", новый описаниеТипов("Булево"));
	КонецЕсли; 
	
	ОбособленныйУчетТоваровПоЗаказамПокупателейВСтроке = ТаблицаВыручки.Колонки.Найти("ОбособленныйУчетТоваровПоЗаказамПокупателей") <> Неопределено;
	ЕстьКолонка_ЗаказПартии =  ТаблицаВыручки.Колонки.Найти("ЗаказПартии") <> Неопределено;
	
	ТаблицаВыручки.Колонки.Добавить("НДСЭтоЕНВД", Новый ОписаниеТипов("Булево"));
	ЕстьКолонкаСчетДоходовБУ = ТаблицаВыручки.Колонки.Найти("СчетДоходовБУ") <> Неопределено;
	ЕстьСчетДоходовБУ 		 = СтруктураШапкиДокумента.Свойство("СчетДоходовБУ");
		
	Для каждого СтрокаКСписанию Из ТаблицаВыручки Цикл
		
		Если (СтрокаКСписанию.НДСВСтоимостиТоваров = Перечисления.ДействиеНДСВСтоимостиТоваров.ВключитьВСтоимость) И ЕстьКолонкаСчетДоходовБУ Тогда
			СтрокаКСписанию.НДСЭтоЕНВД = НалоговыйУчетУСН.ОтноситсяКДеятельностиЕНВД(СтрокаКСписанию.СчетДоходовБУ);
		ИначеЕсли (СтрокаКСписанию.НДСВСтоимостиТоваров = Перечисления.ДействиеНДСВСтоимостиТоваров.ВключитьВСтоимость) И ЕстьСчетДоходовБУ Тогда
			СтрокаКСписанию.НДСЭтоЕНВД = НалоговыйУчетУСН.ОтноситсяКДеятельностиЕНВД(СтруктураШапкиДокумента.СчетДоходовБУ);
		Иначе
			СтрокаКСписанию.НДСЭтоЕНВД = Ложь;
		КонецЕсли;
				
		//Установим отбор таблицы запроса
		Если ЭтоВозвратОтПокупателя Тогда
			Отбор = Новый Структура("Номенклатура, ЕстьКоличество", СтрокаКСписанию.Номенклатура, Истина);
		Иначе
			Отбор = Новый Структура("СчетУчета, Номенклатура, ЕстьКоличество", СтрокаКСписанию.СчетУчетаБУ, СтрокаКСписанию.Номенклатура, Истина);
		КонецЕсли; 
		
		Если СтруктураШапкиДокумента.ВидДокумента = "ВозвратТоваровОтПокупателя" и СтруктураШапкиДокумента.ВидДоговора = перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
			// Не производится отбор по складу. При передаче на комиссию в партионном учете склад не указывается.
		ИначеЕсли УправлениеЗапасамиПартионныйУчет.ВедетсяСуммовойУчетПоСкладам(СтрокаКСписанию.СчетУчетаБУ) и Не ЭтоВозвратОтПокупателя Тогда
			Отбор.Вставить("Склад", СтрокаКСписанию.Склад);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаКСписанию.Партия) Тогда
			Отбор.Вставить("Партия", СтрокаКСписанию.Партия);
		КонецЕсли;
		
		Если ЭтоВозвратОтПокупателя тогда
			// Заказ не анализируется
		ИначеЕсли не ЕстьКолонка_ЗаказПартии тогда
			Отбор.Вставить("Заказ", Документы.ЗаказПокупателя.ПустаяСсылка());
		ИначеЕсли НЕ ЗначениеЗаполнено(СтрокаКСписанию.ЗаказПартии) тогда
			Отбор.Вставить("Заказ", Документы.ЗаказПокупателя.ПустаяСсылка());
		ИначеЕсли не ТипЗнч(СтрокаКСписанию.ЗаказПартии) = Тип("ДокументСсылка.ЗаказПокупателя") тогда 
			Отбор.Вставить("Заказ", Документы.ЗаказПокупателя.ПустаяСсылка());
		ИначеЕсли ОбособленныйУчетТоваровПоЗаказамПокупателейВСтроке И ?(СтрокаКСписанию.ОбособленныйУчетТоваровПоЗаказамПокупателей = Неопределено, Ложь, СтрокаКСписанию.ОбособленныйУчетТоваровПоЗаказамПокупателей) Тогда 
			Отбор.Вставить("Заказ", СтрокаКСписанию.ЗаказПартии);
		ИначеЕсли СтрокаКСписанию.ЗаказПартии.ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.Переработка Тогда
			Отбор.Вставить("Заказ", СтрокаКСписанию.ЗаказПартии);
		Иначе 
			Отбор.Вставить("Заказ", Документы.ЗаказПокупателя.ПустаяСсылка());
		КонецЕсли; 
		
		Если СтруктураШапкиДокумента.ПартионныйУчетНДСвРазрезеСерийИХарактеристик Тогда
			Отбор.Вставить("ХарактеристикаНоменклатуры", ?(СтрокаКСписанию.ХарактеристикаНоменклатуры = Неопределено, Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка(), СтрокаКСписанию.ХарактеристикаНоменклатуры));
			Если СтрокаКСписанию.Номенклатура.ВестиПартионныйУчетПоСериям И ВидДокумента <> "ОтчетКомиссионераОПродажах" Тогда //товары у комиссонера не учитываются по сериям
				Отбор.Вставить("СерияНоменклатуры", ?(СтрокаКСписанию.СерияНоменклатуры = Неопределено, Справочники.СерииНоменклатуры.ПустаяСсылка(), СтрокаКСписанию.СерияНоменклатуры));
			КонецЕсли;
		КонецЕсли;
		
		ОтборТаблицыПартийПоКлючу = ТаблицаПартий.НайтиСтроки(Отбор);
		СписатьПоКлючу = СтрокаКСписанию.Количество;
		
		// Найденные строки перенесем в таблицу значений, которую нужно отсортировать в соответствии со стратегией списания
		ТаблицаОстатки  = Новый ТаблицаЗначений;
		// Добавим колонку с индексом
		ТаблицаОстатки.Колонки.Добавить("ИндексНайденнойСтроки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
		
		Для Каждого Кол Из ТаблицаПартий.Колонки Цикл
			ТаблицаОстатки.Колонки.Добавить(Кол.Имя, Кол.ТипЗначения);
		КонецЦикла;
		Индекс = 0;
		Для Каждого СтрокаТЧ Из ОтборТаблицыПартийПоКлючу Цикл
			НоваяСтрока = ТаблицаОстатки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТЧ); 
			НоваяСтрока.ИндексНайденнойСтроки = Индекс;
			Если СортироватьПоУказанномуДокументуПриВозврате Тогда
				НоваяСтрока.ПартияСовпадаетСУказаннымДокументомДляВозврата = ( ЗначениеЗаполнено(СтрокаКСписанию.ДокументПартии) и НоваяСтрока.Партия = СтрокаКСписанию.ДокументПартии);
			КонецЕсли; 
			
			Индекс = Индекс + 1;
		КонецЦикла;
		
		НаправлениеСортировкиДляНДС = ?(СтрокаКСписанию.НДСВСтоимостиТоваров = Перечисления.ДействиеНДСВСтоимостиТоваров.ВключитьВСтоимость, "Убыв", "Возр");
		НаправлениеСортировкиПартий = ?(ЭтоВозврат,"убыв","Возр");
		ТаблицаОстатки.Сортировать(?(СортироватьПоУказанномуДокументуПриВозврате,"ПартияСовпадаетСУказаннымДокументомДляВозврата Убыв, ","")+"ДатаПартии "+НаправлениеСортировкиПартий+", Партия "+НаправлениеСортировкиПартий+", ДатаСФ "+НаправлениеСортировкиПартий+", СчетФактура "+НаправлениеСортировкиПартий+", НДСВключенВСтоимость "+НаправлениеСортировкиДляНДС);
		
		ТаблицаСписанияПоСтроке = Новый ТаблицаЗначений;
		ТаблицаСписанияПоСтроке.Колонки.Добавить("Партия");
		ТаблицаСписанияПоСтроке.Колонки.Добавить("Заказ", Новый ОписаниеТипов("ДокументСсылка.ЗаказПокупателя"));
		ТаблицаСписанияПоСтроке.Колонки.Добавить("ДействияНДСПокупки_ВключитьВСтоимость");
		ТаблицаСписанияПоСтроке.Колонки.Добавить("ДействияНДСПокупки_ИсключитьИзСтоимости");
		ТаблицаСписанияПоСтроке.Колонки.Добавить("ДействияНДСПокупки_ПредположениеСтавки0");
		ТаблицаСписанияПоСтроке.Колонки.Добавить("НДСВключенВСтоимость");
		ТаблицаСписанияПоСтроке.Колонки.Добавить("ВидЦенности");
		ТаблицаСписанияПоСтроке.Колонки.Добавить("СчетУчетаНДС");
		ТаблицаСписанияПоСтроке.Колонки.Добавить("СтавкаНДС");
		ТаблицаСписанияПоСтроке.Колонки.Добавить("СчетФактура");
		ТаблицаСписанияПоСтроке.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
		ТаблицаСписанияПоСтроке.Колонки.Добавить("КоличествоПоступление", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
		ТаблицаСписанияПоСтроке.Колонки.Добавить("Стоимость", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
		ТаблицаСписанияПоСтроке.Колонки.Добавить("НДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
		ТаблицаСписанияПоСтроке.Колонки.Добавить("Склад");
		ТаблицаСписанияПоСтроке.Колонки.Добавить("СерияНоменклатуры");
		ТаблицаСписанияПоСтроке.Колонки.Добавить("ХарактеристикаНоменклатуры");
		ТаблицаСписанияПоСтроке.Колонки.Добавить("БлокироватьДоПодтвержденияСтавки0", Новый ОписаниеТипов("Булево"));
		
		Если ЭтоВозврат и не ЭтоВозвратОтПокупателя Тогда
			ТаблицаСписанияПоСтроке.Колонки.Добавить("ПартияСовпадаетСУказаннымДокументомДляВозврата", Новый описаниеТипов("Булево"));
		КонецЕсли; 
		
		Для каждого СтрокаТаблицыПартийНДС Из ТаблицаОстатки Цикл
			
			Если НЕ СтрокаТаблицыПартийНДС.ЕстьКоличество Тогда
				Продолжить;
			КонецЕсли;
			Если СтрокаТаблицыПартийНДС.КоличествоОстаток=0 Тогда
				Продолжить;
			КонецЕсли; 
			
			СтрокаТаблицыСписания 						= ТаблицаСписанияПоСтроке.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицыСписания,СтрокаТаблицыПартийНДС);
			
			СтрокаТаблицыСписания.Количество 			= Мин(СписатьПоКлючу, СтрокаТаблицыПартийНДС.КоличествоОстаток);
			СтрокаТаблицыСписания.Стоимость 			= ?(СтрокаТаблицыПартийНДС.КоличествоОстаток = 0, 0, СтрокаТаблицыПартийНДС.СтоимостьОстаток * СтрокаТаблицыСписания.Количество / СтрокаТаблицыПартийНДС.КоличествоОстаток) ;
			СтрокаТаблицыСписания.НДС 					= ?(СтрокаТаблицыПартийНДС.КоличествоОстаток = 0, 0, СтрокаТаблицыПартийНДС.НДСОстаток * СтрокаТаблицыСписания.Количество / СтрокаТаблицыПартийНДС.КоличествоОстаток) ;
			СтрокаТаблицыСписания.КоличествоПоступление	= ?(СтрокаКСписанию.Количество = 0, 0, СтрокаКСписанию.КоличествоПоступление * СтрокаТаблицыСписания.Количество / СтрокаКСписанию.Количество) ;
			
			Если ЭтоВозвратОтПокупателя и не УправлениеЗапасамиПартионныйУчет.ВедетсяСуммовойУчетПоСкладам(СтрокаКСписанию.СчетУчетаБУ) Тогда
			    СтрокаТаблицыСписания.Склад = Справочники.Склады.ПустаяСсылка();
			//Иначе
			//	СтрокаТаблицыСписания.Склад					= СтрокаТаблицыПартийНДС.Склад;	
			КонецЕсли; 
			Если Не СтруктураШапкиДокумента.ПартионныйУчетНДСвРазрезеСерийИХарактеристик Тогда
				СтрокаТаблицыСписания.ХарактеристикаНоменклатуры = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
				СтрокаТаблицыСписания.СерияНоменклатуры = Справочники.СерииНоменклатуры.ПустаяСсылка();
			ИначеЕсли Не СтрокаТаблицыПартийНДС.Номенклатура.ВестиПартионныйУчетПоСериям Тогда
				СтрокаТаблицыСписания.СерияНоменклатуры = Справочники.СерииНоменклатуры.ПустаяСсылка();
			КонецЕсли;
			
			Если (СтрокаКСписанию.НДСВСтоимостиТоваров = Перечисления.ДействиеНДСВСтоимостиТоваров.ВключитьВСтоимость) И (НЕ СтрокаТаблицыПартийНДС.НДСВключенВСтоимость) И
				(СтрокаТаблицыПартийНДС.СтавкаНДС <> Перечисления.СтавкиНДС.БезНДС Или СтрокаКСписанию.НДСЭтоЕНВД) Тогда
				СтрокаТаблицыСписания.ДействияНДСПокупки_ВключитьВСтоимость = Истина;
				СтрокаТаблицыСписания.ДействияНДСПокупки_ИсключитьИзСтоимости = Ложь;
			ИначеЕсли (СтрокаКСписанию.НДСВСтоимостиТоваров = Перечисления.ДействиеНДСВСтоимостиТоваров.ИсключитьИзСтоимости) И (СтрокаТаблицыПартийНДС.НДСВключенВСтоимость) Тогда
				СтрокаТаблицыСписания.ДействияНДСПокупки_ВключитьВСтоимость = Ложь;
				СтрокаТаблицыСписания.ДействияНДСПокупки_ИсключитьИзСтоимости = Истина;
			Иначе
				СтрокаТаблицыСписания.ДействияНДСПокупки_ВключитьВСтоимость = Ложь;
				СтрокаТаблицыСписания.ДействияНДСПокупки_ИсключитьИзСтоимости = Ложь;
			КонецЕсли;
			
			СтрокаТаблицыСписания.ДействияНДСПокупки_ПредположениеСтавки0 = Ложь;
			
			Если ЕстьСтавкаНДС  и не ЭтоВозврат Тогда
				Если СтрокаКСписанию.СтавкаНДС = Перечисления.СтавкиНДС.НДС0 Тогда
					СтрокаТаблицыСписания.ДействияНДСПокупки_ПредположениеСтавки0 = Истина;
				КонецЕсли;
			КонецЕсли;
						
			СписатьПоКлючу = СписатьПоКлючу - СтрокаТаблицыСписания.Количество;
			
			СтрокаТаблицыПартийНДС.КоличествоОстаток = СтрокаТаблицыПартийНДС.КоличествоОстаток - СтрокаТаблицыСписания.Количество;
			СтрокаТаблицыПартийНДС.СтоимостьОстаток = СтрокаТаблицыПартийНДС.СтоимостьОстаток - СтрокаТаблицыСписания.Стоимость;
			СтрокаТаблицыПартийНДС.НДСОстаток = СтрокаТаблицыПартийНДС.НДСОстаток - СтрокаТаблицыСписания.НДС;
			
			Если СписатьПоКлючу<=0 Тогда
				прервать;
			КонецЕсли; 
			
		КонецЦикла;
		
		//Распределение доп. расходов
		ПартииКСписнию = ТаблицаСписанияПоСтроке.Скопировать();
		ПартииКСписнию.Свернуть("Партия", "Количество, Стоимость");
		
		Для Каждого Партия Из ПартииКСписнию Цикл
			//Установим отбор таблицы запроса
			Если ЭтоВозвратОтПокупателя Тогда
				Отбор = Новый Структура("Номенклатура, Партия", СтрокаКСписанию.Номенклатура, Партия.Партия);
            Иначе
				Отбор = Новый Структура("СчетУчета, Номенклатура, Партия", СтрокаКСписанию.СчетУчетаБУ, СтрокаКСписанию.Номенклатура, Партия.Партия);
			КонецЕсли;
			
			Если СтруктураШапкиДокумента.ВидДокумента = "ВозвратТоваровОтПокупателя" и СтруктураШапкиДокумента.ВидДоговора = перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
				// Не производится отбор по складу. При передаче на комиссию в партионном учете склад не указывается.
			ИначеЕсли УправлениеЗапасамиПартионныйУчет.ВедетсяСуммовойУчетПоСкладам(СтрокаКСписанию.СчетУчетаБУ) Тогда
				Отбор.Вставить("Склад", СтрокаКСписанию.Склад);
			КонецЕсли;
		
			Если ЭтоВозвратОтПокупателя тогда
				// Заказ не анализируется
			ИначеЕсли не ЕстьКолонка_ЗаказПартии тогда
				Отбор.Вставить("Заказ", Документы.ЗаказПокупателя.ПустаяСсылка());
			ИначеЕсли НЕ ЗначениеЗаполнено(СтрокаКСписанию.ЗаказПартии) тогда
				Отбор.Вставить("Заказ", Документы.ЗаказПокупателя.ПустаяСсылка());
			ИначеЕсли не ТипЗнч(СтрокаКСписанию.ЗаказПартии) = Тип("ДокументСсылка.ЗаказПокупателя") тогда 
				Отбор.Вставить("Заказ", Документы.ЗаказПокупателя.ПустаяСсылка());
			ИначеЕсли ОбособленныйУчетТоваровПоЗаказамПокупателейВСтроке И ?(СтрокаКСписанию.ОбособленныйУчетТоваровПоЗаказамПокупателей = Неопределено, Ложь, СтрокаКСписанию.ОбособленныйУчетТоваровПоЗаказамПокупателей) Тогда 
				Отбор.Вставить("Заказ", СтрокаКСписанию.ЗаказПартии);
			ИначеЕсли СтрокаКСписанию.ЗаказПартии.ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.Переработка Тогда
				Отбор.Вставить("Заказ", СтрокаКСписанию.ЗаказПартии);
			Иначе 
				Отбор.Вставить("Заказ", Документы.ЗаказПокупателя.ПустаяСсылка());
			КонецЕсли; 
			
			Если СтруктураШапкиДокумента.ПартионныйУчетНДСвРазрезеСерийИХарактеристик Тогда
				Отбор.Вставить("ХарактеристикаНоменклатуры", ?(СтрокаКСписанию.ХарактеристикаНоменклатуры = Неопределено, Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка(), СтрокаКСписанию.ХарактеристикаНоменклатуры));
				Если СтрокаКСписанию.Номенклатура.ВестиПартионныйУчетПоСериям И ВидДокумента <> "ОтчетКомиссионераОПродажах" Тогда //товары у комиссонера не учитываются по сериям
					Отбор.Вставить("СерияНоменклатуры", ?(СтрокаКСписанию.СерияНоменклатуры = Неопределено, Справочники.СерииНоменклатуры.ПустаяСсылка(), СтрокаКСписанию.СерияНоменклатуры));
				КонецЕсли;
			КонецЕсли;

			ОтборДляДопРасходов = ТаблицаПартий.НайтиСтроки(Отбор);
			
			//Определим коэффициент доп. расходов
			СуммаПоПартии = 0;
			Для Каждого СтрокаПартии Из ОтборДляДопРасходов Цикл
				Если СтрокаПартии.ЕстьКоличество Тогда
					СуммаПоПартии = СуммаПоПартии + СтрокаПартии.СтоимостьОстаток;
				ИначеЕсли СортироватьПоУказанномуДокументуПриВозврате Тогда
					СтрокаПартии.ПартияСовпадаетСУказаннымДокументомДляВозврата = ( ЗначениеЗаполнено(СтрокаКСписанию.ДокументПартии) и СтрокаПартии.Партия = СтрокаКСписанию.ДокументПартии);
				КонецЕсли;
			КонецЦикла;
			
			// Если в партии нулевая сумма, то списание доп. расходов производим пропорционально количеству.
			Если СуммаПоПартии = 0 Тогда
				КоличествоПоПартии = 0;
				Для Каждого СтрокаПартии Из ОтборДляДопРасходов Цикл
					Если СтрокаПартии.ЕстьКоличество Тогда
						КоличествоПоПартии = КоличествоПоПартии + СтрокаПартии.КоличествоОстаток;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			//Проверим наличие доп расходов
			Если СуммаПоПартии = 0 И КоличествоПоПартии = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Если СуммаПоПартии <> 0 Тогда
				К = Партия.Стоимость / СуммаПоПартии;
			Иначе
				К = Партия.Количество / КоличествоПоПартии;
			КонецЕсли;
			
			//Спишем доп. расходы
			Для Каждого СтрокаПартии Из ОтборДляДопРасходов Цикл
				
				Если СтрокаПартии.ЕстьКоличество ИЛИ Окр(СтрокаПартии.СтоимостьОстаток*К,2,1) = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				СтрокаТаблицыСписания = ТаблицаСписанияПоСтроке.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицыСписания, СтрокаПартии);
				
				СтрокаТаблицыСписания.Стоимость = СтрокаПартии.СтоимостьОстаток * К;
				СтрокаТаблицыСписания.НДС = СтрокаПартии.НДСОстаток * К;
					
				Если ЭтоВозвратОтПокупателя и не УправлениеЗапасамиПартионныйУчет.ВедетсяСуммовойУчетПоСкладам(СтрокаКСписанию.СчетУчетаБУ) Тогда
				    СтрокаТаблицыСписания.Склад = Справочники.Склады.ПустаяСсылка();
				//Иначе
				//	СтрокаТаблицыСписания.Склад					= СтрокаПартии.Склад;	
				КонецЕсли; 
				Если Не СтруктураШапкиДокумента.ПартионныйУчетНДСвРазрезеСерийИХарактеристик Тогда
					СтрокаТаблицыСписания.ХарактеристикаНоменклатуры = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
					СтрокаТаблицыСписания.СерияНоменклатуры = Справочники.СерииНоменклатуры.ПустаяСсылка();
				ИначеЕсли Не СтрокаТаблицыПартийНДС.Номенклатура.ВестиПартионныйУчетПоСериям Тогда
					СтрокаТаблицыСписания.СерияНоменклатуры = Справочники.СерииНоменклатуры.ПустаяСсылка();
				КонецЕсли;
				
			
				Если (СтрокаКСписанию.НДСВСтоимостиТоваров = Перечисления.ДействиеНДСВСтоимостиТоваров.ВключитьВСтоимость) И (НЕ СтрокаПартии.НДСВключенВСтоимость) 
					И (СтрокаПартии.СтавкаНДС <> Перечисления.СтавкиНДС.БезНДС Или СтрокаКСписанию.НДСЭтоЕНВД) Тогда
					СтрокаТаблицыСписания.ДействияНДСПокупки_ВключитьВСтоимость = Истина;
					СтрокаТаблицыСписания.ДействияНДСПокупки_ИсключитьИзСтоимости = Ложь;
				ИначеЕсли (СтрокаКСписанию.НДСВСтоимостиТоваров = Перечисления.ДействиеНДСВСтоимостиТоваров.ИсключитьИзСтоимости) И (СтрокаПартии.НДСВключенВСтоимость) Тогда
					СтрокаТаблицыСписания.ДействияНДСПокупки_ВключитьВСтоимость = Ложь;
					СтрокаТаблицыСписания.ДействияНДСПокупки_ИсключитьИзСтоимости = Истина;
				Иначе
					СтрокаТаблицыСписания.ДействияНДСПокупки_ВключитьВСтоимость = Ложь;
					СтрокаТаблицыСписания.ДействияНДСПокупки_ИсключитьИзСтоимости = Ложь;
				КонецЕсли;
				
				СтрокаТаблицыСписания.ДействияНДСПокупки_ПредположениеСтавки0 = Ложь;
				
				Если ЕстьСтавкаНДС и не ЭтоВозврат Тогда
					Если СтрокаКСписанию.СтавкаНДС = Перечисления.СтавкиНДС.НДС0 Тогда
						СтрокаТаблицыСписания.ДействияНДСПокупки_ПредположениеСтавки0 = Истина;
					КонецЕсли;
				КонецЕсли;
			    				
				СтрокаПартии.СтоимостьОстаток = СтрокаПартии.СтоимостьОстаток - СтрокаТаблицыСписания.Стоимость;
				СтрокаПартии.НДСОстаток = СтрокаПартии.НДСОстаток - СтрокаТаблицыСписания.НДС;
				
			КонецЦикла;
			
		КонецЦикла;
		
		//Перенесем данные в итоговую таблицу движений
		Для Каждого СтрокаСписания ИЗ ТаблицаСписанияПоСтроке Цикл
			
			СтрокаТаблицыСписанияНДС = ТаблицаСписанияНДСПоСтрокам.Добавить();
			
			Для Каждого Кол Из ТаблицаСписанияНДСПоСтрокам.Колонки Цикл
				Если НЕ ТаблицаСписанияПоСтроке.Колонки.Найти(Кол.Имя) = Неопределено Тогда
					СтрокаТаблицыСписанияНДС[Кол.Имя] = СтрокаСписания[Кол.Имя];
				ИначеЕсли НЕ ТаблицаВыручки.Колонки.Найти(Кол.Имя) = Неопределено Тогда 
					СтрокаТаблицыСписанияНДС[Кол.Имя] = СтрокаКСписанию[Кол.Имя];
				КонецЕсли;
			КонецЦикла;
			СтрокаТаблицыСписанияНДС["СчетУчета"] = СтрокаТаблицыСписанияНДС["СчетУчетаБУ"];
		КонецЦикла;
		
		// Таблицу значений перенесем в найденные строки
		Для Каждого СтрокаТЧ Из ТаблицаОстатки Цикл
			ЗаполнитьЗначенияСвойств(ОтборТаблицыПартийПоКлючу[СтрокаТЧ.ИндексНайденнойСтроки],СтрокаТЧ);
		КонецЦикла;
		
		Если СписатьПоКлючу > 0 И СтруктураШапкиДокумента.СложныйУчетНДС тогда
			ТекстСообщения = "Для целей учета НДС не списано " + Формат(СписатьПоКлючу, "ЧЦ=15; ЧДЦ=3") + " товара " + СтрокаКСписанию.Номенклатура;
			Если СтруктураШапкиДокумента.ПартионныйУчетНДСвРазрезеСерийИХарактеристик Тогда 
				Если ЗначениеЗаполнено(СтрокаКСписанию.ХарактеристикаНоменклатуры) Тогда
					ТекстСообщения = ТекстСообщения + ", х-ка: " + СтрокаКСписанию.ХарактеристикаНоменклатуры;
				КонецЕсли;
				Если СтрокаКСписанию.Номенклатура.ВестиПартионныйУчетПоСериям И ЗначениеЗаполнено(СтрокаКСписанию.СерияНоменклатуры) Тогда
					ТекстСообщения = ТекстСообщения + ", серия: " + СтрокаКСписанию.СерияНоменклатуры;
				КонецЕсли;
			КонецЕсли;
			ТекстСообщения = ТекстСообщения + ", счет учета " + СтрокаКСписанию.СчетУчетаБУ +?(НЕ ЗначениеЗаполнено(СтрокаКСписанию.Склад),"",", склад "+строка(СтрокаКСписанию.Склад))+?(НЕ ЗначениеЗаполнено(СтрокаКСписанию.Партия),""," (партия <"+строка(СтрокаКСписанию.Партия)+">)");
			Если ВидДокумента = "ПоступлениеИзПереработки" Тогда
				ТекстСообщения = ТекстСообщения + Символы.ПС + "Возможно, для изготовления продукции использовались полуфабрикаты или продукция собственного производства";
			КонецЕсли;
			ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, ,Заголовок);
		КонецЕсли;
		
	КонецЦикла;
	
	ТаблицаСписанияНДСПоСтрокам.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация,"Организация"); 
	Если ТаблицаСписанияНДСПоСтрокам.Колонки.Найти("QuieryId") = Неопределено Тогда
		ТаблицаСписанияНДСПоСтрокам.Колонки.Добавить("QuieryId");
	КонецЕсли; 
	
	Если ЭтоВозвратОтПокупателя Тогда
		ТаблицаСписанияНДСПоСтрокам.ЗаполнитьЗначения(Неопределено,"Заказ"); 
	КонецЕсли; 
	
	СтруктураПараметров.Вставить("СоответствиеКодовОперацийСтрокамНДСПартий", Новый Соответствие);
	QuieryId = 0;
	
	Для каждого СтрокаСписания Из ТаблицаСписанияНДСПоСтрокам Цикл
		QuieryId = QuieryId + 1;
		СтрокаСписания.QuieryId = QuieryId;
		
		Если ЭтоКорректировкаРеализации Тогда
			Продолжить;	
		КонецЕсли;
		
		// Для ускорения поиска добавим строку в соответствие
		МассивСтрокПоКоду = СтруктураПараметров.СоответствиеКодовОперацийСтрокамНДСПартий[СтрокаСписания.КодОперацииПартииТоваров];
		Если МассивСтрокПоКоду = Неопределено Тогда
			СтруктураПараметров.СоответствиеКодовОперацийСтрокамНДСПартий.Вставить(СтрокаСписания.КодОперацииПартииТоваров, Новый Массив);
			МассивСтрокПоКоду = СтруктураПараметров.СоответствиеКодовОперацийСтрокамНДСПартий[СтрокаСписания.КодОперацииПартииТоваров];
		КонецЕсли;
		МассивСтрокПоКоду.Добавить(СтрокаСписания);
		
	КонецЦикла;
	
	Возврат ТаблицаСписанияНДСПоСтрокам;
	
КонецФункции

//Определяет применяется ли упрощенный учет НДС
//
Функция ПолучитьУПУпрощенныйУчетНДС(Организация, Знач Дата, УчетнаяПолитика = Неопределено) Экспорт

	Возврат Ложь;
	//Если Не ЗначениеЗаполнено(Организация) Тогда
	//	Возврат Ложь;
	//КонецЕсли;
	//
	//Если Не ЗначениеЗаполнено(Дата) Тогда
	//	Дата = ТекущаяДата();
	//КонецЕсли;

	//Если УчетнаяПолитика <> Неопределено
	//	и УчетнаяПолитика.Количество() > 0
	//	И УчетнаяПолитика.Организация = Организация
	//	И УчетнаяПолитика.Период = НачалоМесяца(Дата)
	//	И УчетнаяПолитика.Свойство("УпрощенныйУчетНДС") Тогда
	//	Возврат УчетнаяПолитика.УпрощенныйУчетНДС;
	//КонецЕсли;
	//
	//ОшибкаВПолучении = Ложь;
	//УчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(Дата, ОшибкаВПолучении, Организация,,Ложь);
	//	
	//Возврат ?(ОшибкаВПолучении, Ложь, УчетнаяПолитика.УпрощенныйУчетНДС);

КонецФункции

Функция ПолучитьУППорядокРегистрацииСчетовФактурНаАванс(Организация, Знач Дата, УчетнаяПолитика = Неопределено) Экспорт

	Если Не ЗначениеЗаполнено(Организация) Тогда
		Возврат Перечисления.ПорядокРегистрацииСчетовФактурНаАванс.НаВсеАвансы;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Дата) Тогда
		Дата = ТекущаяДата();
	КонецЕсли;

	Если УчетнаяПолитика <> Неопределено
		и УчетнаяПолитика.Количество() > 0
		И УчетнаяПолитика.Организация = Организация
		И УчетнаяПолитика.Период = НачалоМесяца(Дата)
		И УчетнаяПолитика.Свойство("ПорядокРегистрацииСчетовФактурНаАванс") Тогда
		Возврат УчетнаяПолитика.ПорядокРегистрацииСчетовФактурНаАванс;
	КонецЕсли;
	
	ОшибкаВПолучении = Ложь;
	УчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(Дата, ОшибкаВПолучении, Организация, "Нал" ,Ложь);
		
	Возврат ?(ОшибкаВПолучении, Перечисления.ПорядокРегистрацииСчетовФактурНаАванс.НаВсеАвансы, УчетнаяПолитика.ПорядокРегистрацииСчетовФактурНаАванс);

КонецФункции

//Определяет налоговый период по НДС
//
Функция ПолучитьУПНДСНалоговыйПериод(Организация, Знач Дата, УчетнаяПолитика = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(Дата) Тогда
		Дата = ТекущаяДата();
	КонецЕсли;

	Если Не ЗначениеЗаполнено(Организация) Тогда
		Возврат ?(Дата < '20080101', Перечисления.Периодичность.Месяц, Перечисления.Периодичность.Квартал);
	КонецЕсли;
	
	Если УчетнаяПолитика <> Неопределено
		и УчетнаяПолитика.Количество() > 0
		И УчетнаяПолитика.Организация = Организация
		И УчетнаяПолитика.Период = НачалоМесяца(Дата)
		И УчетнаяПолитика.Свойство("НДСНалоговыйПериод") Тогда
		Возврат УчетнаяПолитика.НДСНалоговыйПериод;
	КонецЕсли;
	
	УчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(Дата, Организация, Ложь);
		
	Возврат ?(НЕ ЗначениеЗаполнено(УчетнаяПолитика), 
				?(Дата < '20080101', Перечисления.Периодичность.Месяц, Перечисления.Периодичность.Квартал),
				УчетнаяПолитика.НДСНалоговыйПериод);

КонецФункции

//////////////////////////////////////////////////////////////////////////
// ПОЛУЧЕНИЕ ДАННЫХ ПО ДОКУМЕНТАМ

// Параметр ДляКнигиПродаж устанавливается в случае, когда для документа могут быть получены данные как 
// для книги покупок, так и для книги продаж
Функция ПолучитьТаблицуДокументаНДС(ДокументСсылка, Ошибка = Ложь, ДляКнигиПродаж = Ложь) Экспорт
	
	ТипОснования = ТипЗнч(ДокументСсылка);
	
	// По ссылке нужно получить объект
	Если Документы.ТипВсеСсылки().СодержитТип(ТипОснования)	Тогда
		ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
	Иначе
		ТипОснования = ТипЗнч(ДокументСсылка.Ссылка);
		ДокументОбъект = ДокументСсылка;
	КонецЕсли;
	Попытка
		Если ТипОснования = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
			Возврат ПолучитьТаблицуПоступлениеТоваровУслуг(ДокументОбъект, Ошибка);
		ИначеЕсли ТипОснования = Тип("ДокументСсылка.ПоступлениеТоваровУслугВНТТ") Тогда
			Возврат ПолучитьТаблицуПоступлениеТоваровУслугВНТТ(ДокументОбъект, Ошибка);
		ИначеЕсли ТипОснования = Тип("ДокументСсылка.ГТДИмпорт") Тогда
			Возврат ПолучитьТаблицуГТДИмпорт(ДокументОбъект, Ошибка);
		ИначеЕсли ТипОснования = Тип("ДокументСсылка.ОтражениеПоступленияТоваровИУслугНДС") Тогда
			Возврат ПолучитьТаблицуОтражениеПоступленияТоваровИУслугНДС(ДокументОбъект, Ошибка);
		ИначеЕсли ТипОснования = Тип("ДокументСсылка.ПоступлениеДопРасходов") Тогда
			Возврат ПолучитьТаблицуПоступлениеДопРасходов(ДокументОбъект, Ошибка);
		ИначеЕсли ТипОснования = Тип("ДокументСсылка.ПоступлениеНМА") Тогда
			Возврат ПолучитьТаблицуПоступлениеНМА(ДокументОбъект, Ошибка);
		//ИначеЕсли ТипОснования = Тип("ДокументСсылка.ПоступлениеИзПереработки") Тогда
		//	Возврат ПолучитьТаблицуПоступлениеИзПереработки(ДокументОбъект, Ошибка);
		ИначеЕсли ТипОснования = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
			Возврат ПолучитьТаблицуСчетФактураПолученный(ДокументОбъект, Ошибка);
		ИначеЕсли ТипОснования = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") Тогда
			Возврат ПолучитьТаблицуОтчетКомиссионераОПродажах(ДокументОбъект, Ошибка, ДляКнигиПродаж);
		ИначеЕсли ТипОснования = Тип("ДокументСсылка.НачислениеНДСпоСМРхозспособом") Тогда
			Возврат ПолучитьТаблицуНачислениеНДСпоСМРхозспособом(ДокументОбъект, Ошибка, ДляКнигиПродаж);
		ИначеЕсли ТипОснования = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
			Возврат ПолучитьТаблицуРеализацияТоваровУслуг(ДокументОбъект, Ошибка);
		ИначеЕсли ТипОснования = Тип("ДокументСсылка.ОтчетОРозничныхПродажах") Тогда
			Возврат ПолучитьТаблицуОтчетОРозничныхПродажах(ДокументОбъект, Ошибка);
		ИначеЕсли ТипОснования = Тип("ДокументСсылка.РеализацияОтгруженныхТоваров") Тогда
			Возврат ПолучитьТаблицуРеализацияОтгруженныхТоваров(ДокументОбъект, Ошибка);
		ИначеЕсли ТипОснования = Тип("ДокументСсылка.АктОбОказанииПроизводственныхУслуг") Тогда
			Возврат ПолучитьТаблицуАктОбОказанииПроизводственныхУслуг(ДокументОбъект, Ошибка);
		ИначеЕсли ТипОснования = Тип("ДокументСсылка.ПередачаОС") Тогда
			Возврат ПолучитьТаблицуПередачаОС(ДокументОбъект, Ошибка);
		ИначеЕсли ТипОснования = Тип("ДокументСсылка.ПередачаНМА") Тогда
			Возврат ПолучитьТаблицуПередачаНМА(ДокументОбъект, Ошибка);
		ИначеЕсли ТипОснования = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
			Возврат ПолучитьТаблицуСчетФактураВыданный(ДокументОбъект, Ошибка);
		ИначеЕсли ТипОснования = Тип("ДокументСсылка.ОтражениеРеализацииТоваровИУслугНДС") Тогда
			Возврат ПолучитьТаблицуОтражениеРеализацииТоваровИУслугНДС(ДокументОбъект, Ошибка);
		ИначеЕсли ТипОснования = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда
			Возврат ПолучитьТаблицуВозвратТоваровОтПокупателя(ДокументОбъект, Ошибка);
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	Исключение
		Возврат Неопределено;	
	КонецПопытки;
	
КонецФункции

Функция ПолучитьТаблицуПоступлениеТоваровУслуг(ДокументОбъект, Ошибка)
	
	Перем СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоОборудованию, ТаблицаПоУслугам, ТаблицаПоОбъектамСтроительства;
	
	ДокументОбъект.ПодготовитьСтруктуруШапкиДокумента("", СтруктураШапкиДокумента);
	
	ДокументОбъект.ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугам, ТаблицаПоОборудованию, ТаблицаПоОбъектамСтроительства, Неопределено);
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоОборудованию, ТаблицаПоТоварам);
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоУслугам, ТаблицаПоТоварам);
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоОбъектамСтроительства, ТаблицаПоТоварам);
	
	Возврат ТаблицаПоТоварам;
	
КонецФункции

Функция ПолучитьТаблицуГТДИмпорт(ДокументОбъект, Ошибка)
	
	Перем СтруктураШапкиДокумента, СтруктураШапкиДокументаВалюта, СтруктураШапкиДокументаРубли, ТаблицаПоТоварамВалюта, ТаблицаПоТоварамРубли;
	
	ДокументОбъект.ПодготовитьСтруктуруШапкиДокумента("", СтруктураШапкиДокумента, СтруктураШапкиДокументаВалюта, СтруктураШапкиДокументаРубли);
	ДокументОбъект.ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, СтруктураШапкиДокументаВалюта, СтруктураШапкиДокументаРубли, ТаблицаПоТоварамВалюта, ТаблицаПоТоварамРубли);
	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварамВалюта, ТаблицаПоТоварамРубли);
	ТаблицаПоТоварамРубли.Колонки.Удалить("НДСВал");
	
	Возврат ТаблицаПоТоварамРубли.Скопировать(Новый Структура("Содержание", "НДС"));
	
КонецФункции

Функция ПолучитьТаблицуПоступлениеДопРасходов(ДокументОбъект, Ошибка)
	
	Перем СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоОборудованию;
	
	ДокументОбъект.ПодготовитьСтруктуруШапкиДокумента("", СтруктураШапкиДокумента, Неопределено);
	
	ДокументОбъект.ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоОборудованию);
	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоОборудованию, ТаблицаПоТоварам);
	
	Возврат ТаблицаПоТоварам;
	
КонецФункции

Функция ПолучитьТаблицуПоступлениеНМА(ДокументОбъект, Ошибка)
	
	Перем СтруктураШапкиДокумента, ТаблицаПоНМА;
	
	ДокументОбъект.ПодготовитьСтруктуруШапкиДокумента("", СтруктураШапкиДокумента);
	
	ДокументОбъект.ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоНМА);
	
	Возврат ТаблицаПоНМА;
	
КонецФункции

Функция ПолучитьТаблицуСчетФактураПолученный(ДокументОбъект, Ошибка)
	
	Перем СтруктураШапкиДокумента, ТаблицаПоДокументамОснованиям;
	
	ДокументОбъект.ПодготовитьСтруктуруШапкиДокумента("", СтруктураШапкиДокумента, Неопределено);
	
	ДокументОбъект.ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоДокументамОснованиям, Истина);
	
	ТаблицаПоВсемДокументам = Неопределено;
	Для Каждого СтрокаТаблицы Из ТаблицаПоДокументамОснованиям Цикл
		Если ТаблицаПоВсемДокументам = Неопределено Тогда
			ТаблицаПоВсемДокументам = СтрокаТаблицы.ТаблицаДанных;
		Иначе
			ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(СтрокаТаблицы.ТаблицаДанных, ТаблицаПоВсемДокументам);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТаблицаПоВсемДокументам;
	
КонецФункции

Функция ПолучитьТаблицуОтчетКомиссионераОПродажах(ДокументОбъект, Ошибка, ДляКнигиПродаж = Ложь)
	
	Перем СтруктураШапкиДокумента, ТаблицаПоДокументу;
	
	ДокументОбъект.ПодготовитьСтруктуруШапкиДокумента("", СтруктураШапкиДокумента, Неопределено);
	
	Если ДляКнигиПродаж Тогда
		ДокументОбъект.ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоДокументу, Неопределено, Неопределено);
	Иначе
		ДокументОбъект.ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, Неопределено, ТаблицаПоДокументу, Неопределено);
	КонецЕсли;
	
	Возврат ТаблицаПоДокументу;
	
КонецФункции

Функция ПолучитьТаблицуНачислениеНДСпоСМРхозспособом(ДокументОбъект, Ошибка, ДляКнигиПродаж = Ложь)
	
	Перем СтруктураШапкиДокумента, ТаблицаПоСМРхозспособом;
	
	ДокументОбъект.ПодготовитьСтруктуруШапкиДокумента("", СтруктураШапкиДокумента, Неопределено);
	
	ДокументОбъект.ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоСМРхозспособом);
	
	Возврат ТаблицаПоСМРхозспособом;
	
КонецФункции

Функция ПолучитьТаблицуРеализацияТоваровУслуг(ДокументОбъект, Ошибка)
	
	Перем СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугам;
	
	ДокументОбъект.ПодготовитьСтруктуруШапкиДокумента("", СтруктураШапкиДокумента);
	
	ДокументОбъект.ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугам, Неопределено);
	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоУслугам, ТаблицаПоТоварам);
	
	Возврат ТаблицаПоТоварам;
	
КонецФункции

Функция ПолучитьТаблицуОтчетОРозничныхПродажах(ДокументОбъект, Ошибка)
	
	Перем СтруктураШапкиДокумента, ТаблицаПоТоварам;
	
	ДокументОбъект.ПодготовитьСтруктуруШапкиДокумента("", СтруктураШапкиДокумента, Ошибка);
	
	ДокументОбъект.ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам);
	
	Возврат ТаблицаПоТоварам;
	
КонецФункции

Функция ПолучитьТаблицуРеализацияОтгруженныхТоваров(ДокументОбъект, Ошибка)
	
	Перем СтруктураШапкиДокумента, ТаблицаПоТоварам;
	
	ДокументОбъект.ПодготовитьСтруктуруШапкиДокумента("", СтруктураШапкиДокумента, Ошибка);
	
	ДокументОбъект.ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам);
	
	Возврат ТаблицаПоТоварам;
	
КонецФункции

Функция ПолучитьТаблицуАктОбОказанииПроизводственныхУслуг(ДокументОбъект, Ошибка)
	
	Перем СтруктураШапкиДокумента, ТаблицаПоУслугам;
	
	ДокументОбъект.ПодготовитьСтруктуруШапкиДокумента("", СтруктураШапкиДокумента, Ошибка);
	
	ДокументОбъект.ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоУслугам);
	
	Возврат ТаблицаПоУслугам;
	
КонецФункции

Функция ПолучитьТаблицуПередачаОС(ДокументОбъект, Ошибка)
	
	Перем СтруктураШапкиДокумента, ТаблицаПоТоварам;
	
	ДокументОбъект.ПодготовитьСтруктуруШапкиДокумента("", СтруктураШапкиДокумента, Ошибка);
	
	ДокументОбъект.ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам);
	
	ТаблицаПоТоварам.Колонки.ОсновноеСредство.Имя = "Номенклатура";
	
	Возврат ТаблицаПоТоварам;
	
КонецФункции

Функция ПолучитьТаблицуПередачаНМА(ДокументОбъект, Ошибка)
	
	Перем СтруктураШапкиДокумента, ТаблицаПоТоварам;
	
	ДокументОбъект.ПодготовитьСтруктуруШапкиДокумента("", СтруктураШапкиДокумента);
	
	ДокументОбъект.ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам);
	
	ТаблицаПоТоварам.Колонки.НематериальныйАктив.Имя = "Номенклатура";
	
	Возврат ТаблицаПоТоварам;
	
КонецФункции

Функция ПолучитьТаблицуСчетФактураВыданный(ДокументОбъект, Ошибка)
	
	Перем ТаблицаПоДокументамОснованиям, ТаблицаПоДокументуОснования;
	
	Если ДокументОбъект.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию Тогда
	
		Для Каждого СтрокаТаблицы Из ДокументОбъект.ДокументыОснования Цикл
			Если ЗначениеЗаполнено(СтрокаТаблицы.ДокументОснование) Тогда
				ДокументОснованиеОбъект = СтрокаТаблицы.ДокументОснование.ПолучитьОбъект();
				ТаблицаПоДокументуОснования = ПолучитьТаблицуДокументаНДС(ДокументОснованиеОбъект, Ошибка);
				Если ТаблицаПоДокументуОснования <> Неопределено Тогда
					Если ТаблицаПоДокументамОснованиям = Неопределено Тогда
						ТаблицаПоДокументамОснованиям = ТаблицаПоДокументуОснования.Скопировать();
					Иначе	
						ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоДокументуОснования, ТаблицаПоДокументамОснованиям);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
			
		Возврат ТаблицаПоДокументамОснованиям;
		
	КонецЕсли;
	
	ТаблицаДокумента = Новый ТаблицаЗначений;
	ТаблицаДокумента.Колонки.Добавить("ВидЦенности");
	ТаблицаДокумента.Колонки.Добавить("СчетФактура");
	ТаблицаДокумента.Колонки.Добавить("Сумма");
	ТаблицаДокумента.Колонки.Добавить("СтавкаНДС");
	ТаблицаДокумента.Колонки.Добавить("НДС");
	ТаблицаДокумента.Колонки.Добавить("СчетУчетаНДС");
	ТаблицаДокумента.Колонки.Добавить("Событие");
	
	НоваяСтрока = ТаблицаДокумента.Добавить();
	НоваяСтрока.ВидЦенности = ?(ДокументОбъект.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАванс, Перечисления.ВидыЦенностей.АвансыПолученные,
																										Перечисления.ВидыЦенностей.СуммыСвязанныеСРасчетамиПоОплате);
	НоваяСтрока.СчетФактура = ДокументОбъект.ДокументОснование;
	НоваяСтрока.Сумма = ДокументОбъект.Сумма;
	НоваяСтрока.СтавкаНДС = ДокументОбъект.СтавкаНДС;
	НоваяСтрока.НДС = ДокументОбъект.СуммаНДС;	
	НоваяСтрока.СчетУчетаНДС = ПланыСчетов.Хозрасчетный.НДСпоАвансамИПредоплатам;	
	НоваяСтрока.Событие = Перечисления.СобытияПоНДСПокупки.ПредъявленНДСКВычету;
	
	Возврат ТаблицаДокумента;
	
КонецФункции

Функция ПолучитьТаблицуВозвратТоваровОтПокупателя(ДокументОбъект, Ошибка)
	
	Перем СтруктураШапкиДокумента, ТаблицаПоТоварам;
	
	ДокументОбъект.ПодготовитьСтруктуруШапкиДокумента("", СтруктураШапкиДокумента);
	
	ДокументОбъект.ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам);
	
	Возврат ТаблицаПоТоварам;
	
КонецФункции

//	Возвращает КПП контрагента, укзанного в реквизите ИмяРеквизитаОтправителяПолучателя,
//	в том случае, если контрагент является подразделением контрагента документа
//
//	ИмяРеквизитаОтправителяПолучателя <Строка>	- "Грузоотправитель" или "Грузополучатель",
//												в зависимости от типа документа
//
Функция ПолучитьКПППодразделенияКонтрагента(ДокументСсылка, ИмяРеквизитаОтправителяПолучателя) Экспорт
	Перем КПП;
	
	КПП	= "";
	Если НЕ ЗначениеЗаполнено(ДокументСсылка) Тогда
		Возврат КПП;
	КонецЕсли;
	
	МетаданныеДокумента	= ДокументСсылка.Метаданные();
	Если МетаданныеДокумента.Реквизиты.Найти("Контрагент") = Неопределено 
		ИЛИ МетаданныеДокумента.Реквизиты.Найти(ИмяРеквизитаОтправителяПолучателя) = Неопределено Тогда
		// В документе нет Грузоотправителя/Грузополучателя
		Возврат КПП;
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Контрагент,
	|	РеализацияТоваровУслуг.Грузополучатель,
	|	ЕСТЬNULL(РеализацияТоваровУслуг.Грузополучатель.КПП, """") КАК КПП
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ДокументСсылка
	|	И РеализацияТоваровУслуг.Грузополучатель <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|	И РеализацияТоваровУслуг.Грузополучатель <> РеализацияТоваровУслуг.Контрагент
	|	И РеализацияТоваровУслуг.Грузополучатель.ГоловнойКонтрагент = РеализацияТоваровУслуг.Контрагент
	|	И РеализацияТоваровУслуг.Грузополучатель.ОбособленноеПодразделение";
	
	ТекстЗапроса	= СтрЗаменить(ТекстЗапроса, "РеализацияТоваровУслуг", МетаданныеДокумента.Имя);
	ТекстЗапроса	= СтрЗаменить(ТекстЗапроса, "Грузополучатель", ИмяРеквизитаОтправителяПолучателя);
	
	Запрос = Новый Запрос;
	Запрос.Текст	= ТекстЗапроса;
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);

	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		КПП	= Выборка.КПП;
	КонецЕсли;
	
	Возврат КПП;
	
КонецФункции

// Рассчитываем сумму НДС документа
//
// Параметры: 
//  ДокументОбъект    - объект документа, сумму которого надо рассчитать
//  ИмяТабличнойЧасти - строка, имя табличной части, сумму которой надо рассчитать.
//                      Если она не заполнена, считаем по всем табличным частям, в которых есть "Сумма"
//
// Возвращаемое значение:
//  НДС документа
//
Функция ПолучитьНДСДокумента(ДокументОбъект, ИмяТабличнойЧасти = Неопределено) Экспорт

	МетаданныеДокумента = ДокументОбъект.Метаданные();

	СуммаНДС = 0;
	Если ИмяТабличнойЧасти <> Неопределено Тогда
		СуммаНДС = СуммаНДС + ДокументОбъект[ИмяТабличнойЧасти].Итог("СуммаНДС");
	Иначе
		Для каждого ТЧОбъекта Из ДокументОбъект.Метаданные().ТабличныеЧасти Цикл
			Если МетаданныеДокумента.ТабличныеЧасти[ТЧОбъекта.Имя].Реквизиты.Найти("СуммаНДС") <> Неопределено Тогда
				СуммаНДС = СуммаНДС + ДокументОбъект[ТЧОбъекта.Имя].Итог("СуммаНДС");
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Возврат СуммаНДС;

КонецФункции // ПолучитьСуммуДокументаСНДС()

// Рассчитываем сумму документа со всеми налогами
//
// Параметры: 
//  ДокументОбъект    - объект документа, сумму которого надо рассчитать
//  ИмяТабличнойЧасти - строка, имя табличной части, сумму которой надо рассчитать.
//                      Если она не заполнена, считаем по всем табличным частям, в которых есть "Сумма"
//  НеУчитыватьТару   - булево, если Истина и ИмяТабличнойЧасти неопределено, то в расчете сумм тару не учитываем
//
// Возвращаемое значение:
//  Сумма документа со всеми налогами.
//
Функция ПолучитьСуммуДокументаСНДС(ДокументОбъект, ИмяТабличнойЧасти = Неопределено, НеУчитыватьТару = Истина) Экспорт

	МетаданныеДокумента = ДокументОбъект.Метаданные();

	СуммаДокумента = 0;
	Если ИмяТабличнойЧасти <> Неопределено Тогда
		СуммаДокумента = СуммаДокумента + ДокументОбъект[ИмяТабличнойЧасти].Итог("Сумма");
		Если МетаданныеДокумента.Реквизиты.Найти("УчитыватьНДС") <> Неопределено 
			И МетаданныеДокумента.Реквизиты.Найти("СуммаВключаетНДС") <> Неопределено
			И МетаданныеДокумента.ТабличныеЧасти[ИмяТабличнойЧасти].Реквизиты.Найти("СуммаНДС") <> Неопределено
		  	И ДокументОбъект.УчитыватьНДС
		   	И Не ДокументОбъект.СуммаВключаетНДС Тогда
			СуммаДокумента = СуммаДокумента + ДокументОбъект[ИмяТабличнойЧасти].Итог("СуммаНДС");
		КонецЕсли; 
	Иначе
		Для Каждого ТЧОбъекта Из ДокументОбъект.Метаданные().ТабличныеЧасти Цикл
			Если НеУчитыватьТару и ТЧОбъекта.Имя = "ВозвратнаяТара" Тогда
				Продолжить;
			КонецЕсли;
			Если ТЧОбъекта.Имя = "ВыданныеАвансы" Тогда
				Продолжить;
			КонецЕсли;
			Если ТЧОбъекта.Имя = "ДенежныеСредства" Тогда
				Продолжить;
			КонецЕсли;
			Если ТЧОбъекта.Имя = "ОплатаПлатежнымиКартами" Тогда
				Продолжить;
			КонецЕсли;
			Если ТЧОбъекта.Имя = "ОплатаБанковскимиКредитами" Тогда
				Продолжить;
			КонецЕсли;
			Если ТЧОбъекта.Имя = "ПродажиПоДисконтнымКартам" Тогда
				Продолжить;
			КонецЕсли;
			Если МетаданныеДокумента.ТабличныеЧасти[ТЧОбъекта.Имя].Реквизиты.Найти("Сумма") <> Неопределено Тогда
				СуммаДокумента = СуммаДокумента + ДокументОбъект[ТЧОбъекта.Имя].Итог("Сумма");
				Если МетаданныеДокумента.Реквизиты.Найти("УчитыватьНДС") <> Неопределено
				   И МетаданныеДокумента.Реквизиты.Найти("СуммаВключаетНДС") <> Неопределено
				   И МетаданныеДокумента.ТабличныеЧасти[ТЧОбъекта.Имя].Реквизиты.Найти("СуммаНДС") <> Неопределено
				   И ДокументОбъект.УчитыватьНДС
				   И Не ДокументОбъект.СуммаВключаетНДС Тогда
					СуммаДокумента = СуммаДокумента + ДокументОбъект[ТЧОбъекта.Имя].Итог("СуммаНДС");
				КонецЕсли; 
			КонецЕсли;
		КонецЦикла;
		Если МетаданныеДокумента.Реквизиты.Найти("Сумма") <> Неопределено Тогда
			СуммаДокумента = СуммаДокумента + ДокументОбъект.Сумма;
			Если МетаданныеДокумента.Реквизиты.Найти("УчитыватьНДС") <> Неопределено
			   И МетаданныеДокумента.Реквизиты.Найти("СуммаВключаетНДС") <> Неопределено
			   И МетаданныеДокумента.Реквизиты.Найти("СуммаНДС") <> Неопределено
			   И ДокументОбъект.УчитыватьНДС
			   И Не ДокументОбъект.СуммаВключаетНДС Тогда
				СуммаДокумента = СуммаДокумента + ДокументОбъект.СуммаНДС;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Возврат СуммаДокумента;

КонецФункции // ПолучитьСуммуДокументаСНДС()

Функция ПолучитьСуммыДокументаСНДСПоСтавкам(ДокументОбъект, ИмяТабличнойЧасти = Неопределено, НеУчитыватьТару = Истина) Экспорт

	СуммыПоСтавкам = Новый Соответствие;
	Для Каждого СтавкаНДС Из Перечисления.СтавкиНДС Цикл
		СуммыПоСтавкам.Вставить(СтавкаНДС, 0);
	КонецЦикла;
	СуммыПоСтавкам.Вставить(Перечисления.СтавкиНДС.ПустаяСсылка(), 0);

	МетаданныеДокумента = ДокументОбъект.Метаданные();
	
	СуммаВключаетНДС = (МетаданныеДокумента.Реквизиты.Найти("УчитыватьНДС") <> Неопределено
		И МетаданныеДокумента.Реквизиты.Найти("СуммаВключаетНДС") <> Неопределено
		И ДокументОбъект.УчитыватьНДС И ДокументОбъект.СуммаВключаетНДС);
	
	Если ИмяТабличнойЧасти <> Неопределено Тогда
		Если МетаданныеДокумента.ТабличныеЧасти[ИмяТабличнойЧасти].Реквизиты.Найти("Сумма") <> Неопределено
			И МетаданныеДокумента.ТабличныеЧасти[ИмяТабличнойЧасти].Реквизиты.Найти("СтавкаНДС") <> Неопределено Тогда
			РассчитатьИтогиПоСтавкам(СуммыПоСтавкам, ДокументОбъект[ИмяТабличнойЧасти], "Сумма");
			Если Не СуммаВключаетНДС
				И МетаданныеДокумента.ТабличныеЧасти[ИмяТабличнойЧасти].Реквизиты.Найти("СуммаНДС") <> Неопределено Тогда
				РассчитатьИтогиПоСтавкам(СуммыПоСтавкам, ДокументОбъект[ИмяТабличнойЧасти], "СуммаНДС");
			КонецЕсли;
		КонецЕсли;
	Иначе
		СписокИсключений = "ВыданныеАвансы,ДенежныеСредства,ОплатаПлатежнымиКартами,ОплатаБанковскимиКредитами,ПродажиПоДисконтнымКартам";
		Если НеУчитыватьТару Тогда
			СписокИсключений = СписокИсключений + ",ВозвратнаяТара";
		КонецЕсли;
		Для Каждого ТЧОбъекта Из ДокументОбъект.Метаданные().ТабличныеЧасти Цикл
			Если Найти(СписокИсключений, ТЧОбъекта.Имя) > 0 Тогда
				Продолжить;
			КонецЕсли;
			Если МетаданныеДокумента.ТабличныеЧасти[ТЧОбъекта.Имя].Реквизиты.Найти("Сумма") <> Неопределено
				И МетаданныеДокумента.ТабличныеЧасти[ТЧОбъекта.Имя].Реквизиты.Найти("СтавкаНДС") <> Неопределено Тогда
				РассчитатьИтогиПоСтавкам(СуммыПоСтавкам, ДокументОбъект[ТЧОбъекта.Имя], "Сумма");
				Если Не СуммаВключаетНДС
				   И МетаданныеДокумента.ТабличныеЧасти[ТЧОбъекта.Имя].Реквизиты.Найти("СуммаНДС") <> Неопределено Тогда
					РассчитатьИтогиПоСтавкам(СуммыПоСтавкам, ДокументОбъект[ТЧОбъекта.Имя], "СуммаНДС");
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Возврат СуммыПоСтавкам;

КонецФункции // ПолучитьСуммуДокументаСНДС()

Процедура РассчитатьИтогиПоСтавкам(СуммыПоСтавкам, ТЧ, ИмяКолонки)
	СтруктураОтбора = Новый Структура("СтавкаНДС");
	Для Каждого Ставка Из СуммыПоСтавкам Цикл
		СтруктураОтбора.СтавкаНДС = Ставка.Ключ;
		МассивСтрокПоСтавке = ТЧ.НайтиСтроки(СтруктураОтбора);
		СтрокиПоСтавке = ТЧ.Выгрузить(МассивСтрокПоСтавке, ИмяКолонки);
		СуммаПоСтавке = Ставка.Значение + СтрокиПоСтавке.Итог(ИмяКолонки);
		СуммыПоСтавкам.Вставить(Ставка.Ключ, СуммаПоСтавке);
	КонецЦикла
КонецПроцедуры

// Рассчитывает сумму НДС исходя из суммы и флагов налогообложения
//
// Параметры: 
//  Сумма            - число, сумма от которой надо рассчитывать налоги, 
//  УчитыватьНДС     - булево, признак учета НДС в сумме, 
//  СуммаВключаетНДС - булево, признак включения НДС в сумму ("внутри" или "сверху"),
//  СтавкаНДС        - число , процентная ставка НДС,
//
// Возвращаемое значение:
//  Число, полученная сумма НДС
//
Функция РассчитатьСуммуНДС(Сумма, УчитыватьНДС, СуммаВключаетНДС, СтавкаНДС) Экспорт

	Если (УчитыватьНДС) И (СуммаВключаетНДС) Тогда
		СуммаБезНДС = 100 * Сумма / (100 + СтавкаНДС);
		СуммаНДС = Сумма - СуммаБезНДС;
	Иначе
		СуммаБезНДС = Сумма;
	КонецЕсли;

	Если УчитыватьНДС Тогда 
		Если НЕ СуммаВключаетНДС Тогда
			СуммаНДС = СуммаБезНДС * СтавкаНДС / 100;
		КонецЕсли;
	Иначе
		СуммаНДС = 0;
	КонецЕсли;

	Возврат СуммаНДС;

КонецФункции // РассчитатьСуммуНДС()

// Получает версию постановления в зависимости от переданной даты
//
Функция ПолучитьВерсиюПостановления(Дата) Экспорт
	
	НачалоПримененияИсправленныхСчетовФактур = Константы.НачалоПримененияИсправленныхСчетовФактур.Получить();
	
	Если ЗначениеЗаполнено(НачалоПримененияИсправленныхСчетовФактур)
		И Дата >= НачалоПримененияИсправленныхСчетовФактур Тогда
		Возврат 2; // Дата начала применения исправленных счетов-фактур задана и меньше или равна переданной даты
	Иначе
		Возврат 1; // Дата начала применения исправленных счетов-фактур не задана или задана, но больше, чем переданная дата 
	КонецЕсли;	
		
КонецФункции		

// Возвращает версию постановления Правительства РФ от 26.12.2011 г. № 1137
//
// Параметры
//  Период  -  тип дата, в данном параметре передается
//             дата на которую необходимо определить версию постановления
// Возвращаемое значение:
//  Число   -  версия постановления,
//              1 - исходная версия постановления Правительства РФ от 26.12.2011 г. № 1137
//              2 - постановление Правительства РФ от 26.12.2011 г. № 1137 в редакции постановления № 952
//              3 - постановление Правительства РФ от 26.12.2011 г. № 1137 в редакции постановления № 735
//              4 - постановление Правительства РФ от 26.12.2011 г. № 1137 в редакции постановления № 981
//
Функция ВерсияПостановленияНДС1137(Период) Экспорт
	
	Если Период >= '20171001' Тогда      // Постановление № 981 вступает в силу с 1 октября 2017 года.
		Возврат 4;
	ИначеЕсли Период >= '20141001' Тогда // Постановление № 735 вступает в силу с 1 октября 2014 года.
		Возврат 3;
	ИначеЕсли Период >= '20131106' Тогда // Постановление № 952 вступает в силу с 6 ноября 2013 года.
		Возврат 2;
	Иначе
		Возврат 1;                       // Исходная версия Постановления Правительства РФ от 26.12.2011 г. № 1137.
	КонецЕсли;
	
КонецФункции

// Функция находит и возвращает документ, являющийся отправной точкой исправлений (либо ПТУ либо корректировку ПТУ)
// либо первоначальный документ ПТУ при передаче истины в параметр Исходный
Функция ПолучитьИсправляемыйДокументПоступления(ДокПоступления, Исходный = Ложь) Экспорт
	
	Если ЗначениеЗаполнено(ДокПоступления) 
		И ТипЗнч(ДокПоступления) = Тип("ДокументСсылка.КорректировкаПоступления")
		И (ДокПоступления.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки ИЛИ Исходный) Тогда
		
		Возврат ПолучитьИсправляемыйДокументПоступления(ДокПоступления.ДокументПоступления, Исходный);
		
	Иначе
		Возврат ДокПоступления;
	КонецЕсли;	
	
КонецФункции	

// Функция находит и возвращает документ, являющийся отправной точкой исправлений (либо РТУ либо корректировку РТУ)
// либо первоначальный документ РТУ при передаче истины в параметр Исходный
Функция ПолучитьИсправляемыйДокументРеализации(ДокРеализации, Исходный = Ложь) Экспорт
	
	Если ЗначениеЗаполнено(ДокРеализации) 
		И ТипЗнч(ДокРеализации) = Тип("ДокументСсылка.КорректировкаРеализации")
		И (ДокРеализации.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки ИЛИ Исходный) Тогда
		
		Возврат ПолучитьИсправляемыйДокументРеализации(ДокРеализации.ДокументРеализации, Исходный);
		
	Иначе
		Возврат ДокРеализации;
	КонецЕсли;	
	
КонецФункции

// Формирует список кодов видов операций, актуальный на переданную дату
//
// Параметры
//   ЧастьЖурнала         - Перечисления.ЧастиЖурналаУчетаСчетовФактур - список различается для полученных и выставленных счетов-фактур
//   СписокКодовОпераций  - СписокЗначений - список выбора элемента формы, в который помещается формируемый список кодов видов операций
//   Дата                 - Дата - дата, на которую требуется получить список кодов видов операций
Процедура ЗаполнитьСписокКодовВидовОпераций(ЧастьЖурнала, СписокКодовОпераций, Период) Экспорт
	
	СписокКодовОпераций.Очистить();
	ВерсияКодовВидовОпераций = ВерсияКодовВидовОпераций(Период);
	
	Если ВерсияКодовВидовОпераций = 1 Тогда
		Если ЧастьЖурнала = Перечисления.ЧастиЖурналаУчетаСчетовФактур.ПолученныеСчетаФактуры Тогда
			СписокКодовОпераций.Добавить("01", "01 - Получение товаров, работ, услуг");
			СписокКодовОпераций.Добавить("02", "02 - Авансы выданные");
			СписокКодовОпераций.Добавить("03", "03 - Возврат от покупателя");
			СписокКодовОпераций.Добавить("04", "04 - Товары, работы, услуги комитента");
			СписокКодовОпераций.Добавить("05", "05 - Авансы за товары, работы, услуги комитента");
			СписокКодовОпераций.Добавить("10", "10 - Безвозмездное получение товаров, работ, услуг");
			СписокКодовОпераций.Добавить("11", "11 - Полученные товары, права, п.3,4,5.1 ст. 154, пп.1-4 ст. 155 НК");
			СписокКодовОпераций.Добавить("12", "12 - Авансы выданные за товары, права, п.3,4,5.1 ст. 154, пп.1-4 ст. 155 НК");
			СписокКодовОпераций.Добавить("13", "13 - Капитальное строительство, модернизация (реконструкция) объектов недвижимости");
			СписокКодовОпераций.Добавить("99", "99 - Вычет НДС по налоговым накладным");
		ИначеЕсли ЧастьЖурнала = Перечисления.ЧастиЖурналаУчетаСчетовФактур.ВыставленныеСчетаФактуры Тогда
			СписокКодовОпераций.Добавить("01", "01 - Реализованные товары, работы, услуги");
			СписокКодовОпераций.Добавить("02", "02 - Авансы полученные");
			СписокКодовОпераций.Добавить("03", "03 - Возврат поставщику");
			СписокКодовОпераций.Добавить("04", "04 - Товары, работы, услуги комитента");
			СписокКодовОпераций.Добавить("05", "05 - Авансы за товары, работы, услуги комитента");
			СписокКодовОпераций.Добавить("06", "06 - Налоговый агент, ст. 161 НК");
			СписокКодовОпераций.Добавить("07", "07 - Списание за счет прибыли, пп.2 п.1 ст. 146 НК");
			СписокКодовОпераций.Добавить("08", "08 - Строительно-монтажные работы, пп.3 п.1 ст. 146 НК");
			СписокКодовОпераций.Добавить("09", "09 - Суммы, связанные с расчетами по оплате, ст. 162 НК");
			СписокКодовОпераций.Добавить("10", "10 - Безвозмездная передача товаров, работ, услуг");
			СписокКодовОпераций.Добавить("11", "11 - Реализованные товары, права, п.3,4,5.1 ст. 154, пп.1-4 ст. 155 НК");
			СписокКодовОпераций.Добавить("12", "12 - Авансы полученные за товары, права, п.3,4,5.1 ст. 154, пп.1-4 ст. 155 НК");
			СписокКодовОпераций.Добавить("13", "13 - Капитальное строительство, модернизация (реконструкция) объектов недвижимости");
		КонецЕсли;
	ИначеЕсли ВерсияКодовВидовОпераций = 2 Тогда
		Если ЧастьЖурнала = Перечисления.ЧастиЖурналаУчетаСчетовФактур.ПолученныеСчетаФактуры Тогда
			СписокКодовОпераций.Добавить("01", "01 - Получение товаров, работ, услуг");
			СписокКодовОпераций.Добавить("02", "02 - Авансы выданные");
			СписокКодовОпераций.Добавить("03", "03 - Возврат от покупателя");
			СписокКодовОпераций.Добавить("04", "04 - Товары, работы, услуги комитента");
			СписокКодовОпераций.Добавить("05", "05 - Авансы за товары, работы, услуги комитента");
			СписокКодовОпераций.Добавить("10", "10 - Безвозмездное получение товаров, работ, услуг");
			СписокКодовОпераций.Добавить("11", "11 - Полученные товары, права, п.3,4,5.1 ст. 154, пп.1-4 ст. 155 НК");
			СписокКодовОпераций.Добавить("12", "12 - Авансы выданные за товары, права, п.3,4,5.1 ст. 154, пп.1-4 ст. 155 НК");
			СписокКодовОпераций.Добавить("13", "13 - Капитальное строительство, модернизация (реконструкция) объектов недвижимости");
			СписокКодовОпераций.Добавить("16", "16 - Возврат от покупателя-неплательщика НДС");
			СписокКодовОпераций.Добавить("17", "17 - Возврат от покупателя-физического лица");
			СписокКодовОпераций.Добавить("18", "18 - Изменение стоимости полученных товаров (работ, услуг) в сторону уменьшения");
			СписокКодовОпераций.Добавить("19", "19 - Ввоз товаров из Евразийского экономического союза");
			СписокКодовОпераций.Добавить("20", "20 - Ввоз импортных товаров на территорию РФ");
			СписокКодовОпераций.Добавить("22", "22 - Возврат, зачет авансовых платежей, п.5 ст. 171, п.6 ст. 172 НК");
			СписокКодовОпераций.Добавить("23", "23 - Командировочные расходы по бланку строгой отчетности, п.7 ст. 171 НК");
			СписокКодовОпераций.Добавить("24", "24 - Подтверждение ставки 0% после истечения 180 дней");
			СписокКодовОпераций.Добавить("25", "25 - Подтверждение ставки 0% по ранее восстановленному НДС");
			СписокКодовОпераций.Добавить("27", "27 - Сводный комиссионный счет-фактура, п.3.1 ст. 169 НК");
			СписокКодовОпераций.Добавить("28", "28 - Сводный комиссионный счет-фактура на аванс, п.3.1 ст. 169 НК");
			СписокКодовОпераций.Добавить("99", "99 - Вычет НДС по налоговым накладным");
		ИначеЕсли ЧастьЖурнала = Перечисления.ЧастиЖурналаУчетаСчетовФактур.ВыставленныеСчетаФактуры Тогда
			СписокКодовОпераций.Добавить("01", "01 - Реализованные товары, работы, услуги");
			СписокКодовОпераций.Добавить("02", "02 - Авансы полученные");
			СписокКодовОпераций.Добавить("03", "03 - Возврат поставщику");
			СписокКодовОпераций.Добавить("04", "04 - Товары, работы, услуги комитента");
			СписокКодовОпераций.Добавить("05", "05 - Авансы за товары, работы, услуги комитента");
			СписокКодовОпераций.Добавить("06", "06 - Налоговый агент, ст. 161 НК");
			СписокКодовОпераций.Добавить("07", "07 - Списание за счет прибыли, пп.2 п.1 ст. 146 НК");
			СписокКодовОпераций.Добавить("08", "08 - Строительно-монтажные работы, пп.3 п.1 ст. 146 НК");
			СписокКодовОпераций.Добавить("09", "09 - Суммы, связанные с расчетами по оплате, ст. 162 НК");
			СписокКодовОпераций.Добавить("10", "10 - Безвозмездная передача товаров, работ, услуг");
			СписокКодовОпераций.Добавить("11", "11 - Реализованные товары, права, п.3,4,5.1 ст. 154, пп.1-4 ст. 155 НК");
			СписокКодовОпераций.Добавить("12", "12 - Авансы полученные за товары, права, п.3,4,5.1 ст. 154, пп.1-4 ст. 155 НК");
			СписокКодовОпераций.Добавить("13", "13 - Капитальное строительство, модернизация (реконструкция) объектов недвижимости");
			СписокКодовОпераций.Добавить("16", "16 - Возврат от покупателя-неплательщика НДС");
			СписокКодовОпераций.Добавить("18", "18 - Изменение стоимости отгруженных товаров (работ, услуг) в сторону уменьшения");
			СписокКодовОпераций.Добавить("21", "21 - Восстановление НДС, п.8 ст. 145, п.3 ст. 170, ст. 171.1 НК, а также при операциях, облагаемых по ставке 0%");
			СписокКодовОпераций.Добавить("26", "26 - Счета-фактуры не составляются по письменному согласию сторон");
			СписокКодовОпераций.Добавить("27", "27 - Сводный комиссионный счет-фактура, п.3.1 ст. 169 НК");
			СписокКодовОпераций.Добавить("28", "28 - Сводный комиссионный счет-фактура на аванс, п.3.1 ст. 169 НК");
		КонецЕсли;
	ИначеЕсли ВерсияКодовВидовОпераций = 3 Тогда
		Если ЧастьЖурнала = Перечисления.ЧастиЖурналаУчетаСчетовФактур.ПолученныеСчетаФактуры Тогда
			СписокКодовОпераций.Добавить("01", "01 - Получение товаров, работ, услуг");
			СписокКодовОпераций.Добавить("02", "02 - Авансы выданные");
			СписокКодовОпераций.Добавить("10", "10 - Безвозмездное получение товаров, работ, услуг");
			СписокКодовОпераций.Добавить("13", "13 - Капитальное строительство, модернизация (реконструкция) объектов недвижимости");
			СписокКодовОпераций.Добавить("15", "15 - Совместное приобретение товаров, работ, услуг для собственных нужд и для комитента");
			СписокКодовОпераций.Добавить("16", "16 - Возврат от покупателя-неплательщика НДС");
			СписокКодовОпераций.Добавить("17", "17 - Возврат от покупателя-физического лица");
			СписокКодовОпераций.Добавить("18", "18 - Изменение стоимости полученных товаров (работ, услуг) в сторону уменьшения");
			СписокКодовОпераций.Добавить("19", "19 - Ввоз товаров из Евразийского экономического союза");
			СписокКодовОпераций.Добавить("20", "20 - Ввоз импортных товаров на территорию РФ");
			СписокКодовОпераций.Добавить("22", "22 - Возврат, зачет авансовых платежей, п.5 ст. 171, п.6 ст. 172 НК");
			СписокКодовОпераций.Добавить("23", "23 - Командировочные расходы по бланку строгой отчетности, п.7 ст. 171 НК");
			СписокКодовОпераций.Добавить("24", "24 - Подтверждение ставки 0% после истечения 180 дней");
			СписокКодовОпераций.Добавить("25", "25 - Вычет НДС при подтверждении ставки 0% по ранее восстановленному НДС, а также п.7 ст.172 НК");
			СписокКодовОпераций.Добавить("27", "27 - Сводный комиссионный счет-фактура, п.3.1 ст. 169 НК");
			СписокКодовОпераций.Добавить("28", "28 - Сводный комиссионный счет-фактура на аванс, п.3.1 ст. 169 НК");
			СписокКодовОпераций.Добавить("32", "32 - Вычет НДС в ОЭЗ Калининградской обл., п.14 ст. 171 НК");
		ИначеЕсли ЧастьЖурнала = Перечисления.ЧастиЖурналаУчетаСчетовФактур.ВыставленныеСчетаФактуры Тогда
			СписокКодовОпераций.Добавить("01", "01 - Реализация товаров, работ, услуг и операции, приравненные к ней");
			СписокКодовОпераций.Добавить("02", "02 - Авансы полученные");
			СписокКодовОпераций.Добавить("06", "06 - Налоговый агент, ст. 161 НК");
			СписокКодовОпераций.Добавить("10", "10 - Безвозмездная передача товаров, работ, услуг");
			СписокКодовОпераций.Добавить("13", "13 - Капитальное строительство, модернизация (реконструкция) объектов недвижимости");
			СписокКодовОпераций.Добавить("14", "14 - Реализация прав, пп.1-4 ст. 155 НК");
			СписокКодовОпераций.Добавить("15", "15 - Совместная реализация собственных и комиссионных товаров, работ, услуг");
			СписокКодовОпераций.Добавить("16", "16 - Возврат от покупателя-неплательщика НДС");
			СписокКодовОпераций.Добавить("18", "18 - Изменение стоимости отгруженных товаров (работ, услуг) в сторону уменьшения");
			СписокКодовОпераций.Добавить("21", "21 - Восстановление НДС, п.8 ст. 145, п.3 ст. 170, ст. 171.1 НК, а также при операциях, облагаемых по ставке 0%");
			СписокКодовОпераций.Добавить("26", "26 - Реализация товаров, работ, услуг неплательщикам НДС, получение авансов");
			СписокКодовОпераций.Добавить("27", "27 - Сводный комиссионный счет-фактура, п.3.1 ст. 169 НК");
			СписокКодовОпераций.Добавить("28", "28 - Сводный комиссионный счет-фактура на аванс, п.3.1 ст. 169 НК");
			СписокКодовОпераций.Добавить("29", "29 - Корректировка по п.6 ст. 105.3 НК");
			СписокКодовОпераций.Добавить("30", "30 - Отгрузка товаров в ОЭЗ Калининградской обл., абз.1 пп.1.1 п.1 ст. 151 НК");
			СписокКодовОпераций.Добавить("31", "31 - Уплата НДС в ОЭЗ Калининградской обл., абз.2 пп.1.1 п.1 ст. 151 НК");
		КонецЕсли;
     ИначеЕсли ВерсияКодовВидовОпераций = 4 Тогда
		Если ЧастьЖурнала = Перечисления.ЧастиЖурналаУчетаСчетовФактур.ПолученныеСчетаФактуры Тогда
			
			СписокКодовОпераций.Добавить("01", НСтр("ru = '01 - Получение товаров, работ, услуг'"));
			СписокКодовОпераций.Добавить("02", НСтр("ru = '02 - Авансы выданные'"));
			СписокКодовОпераций.Добавить("13", НСтр("ru = '13 - Капитальное строительство, модернизация (реконструкция) объектов недвижимости'"));
			СписокКодовОпераций.Добавить("15", НСтр("ru = '15 - Совместное приобретение товаров, работ, услуг для собственных нужд и для комитента'"));
			СписокКодовОпераций.Добавить("16", НСтр("ru = '16 - Возврат от покупателя-неплательщика НДС'"));
			СписокКодовОпераций.Добавить("17", НСтр("ru = '17 - Возврат от покупателя-физического лица'"));
			СписокКодовОпераций.Добавить("18", НСтр("ru = '18 - Изменение стоимости полученных товаров (работ, услуг) в сторону уменьшения'"));
			СписокКодовОпераций.Добавить("19", НСтр("ru = '19 - Ввоз товаров из Евразийского экономического союза'"));
			СписокКодовОпераций.Добавить("20", НСтр("ru = '20 - Ввоз импортных товаров на территорию РФ'"));
			СписокКодовОпераций.Добавить("22", НСтр("ru = '22 - Возврат, зачет авансовых платежей, п.5 ст. 171, п.6 ст. 172 НК'"));
			СписокКодовОпераций.Добавить("23", НСтр("ru = '23 - Командировочные расходы по бланку строгой отчетности, п.7 ст. 171 НК'"));
			СписокКодовОпераций.Добавить("24", НСтр("ru = '24 - Подтверждение ставки 0% после истечения 180 дней'"));
			СписокКодовОпераций.Добавить("25", НСтр("ru = '25 - Вычет НДС при подтверждении ставки 0% по ранее восстановленному НДС, а также п.7 ст.172 НК'"));
			СписокКодовОпераций.Добавить("27", НСтр("ru = '27 - Сводный комиссионный счет-фактура, п.3.1 ст. 169 НК'"));
			СписокКодовОпераций.Добавить("28", НСтр("ru = '28 - Сводный комиссионный счет-фактура на аванс, п.3.1 ст. 169 НК'"));
			СписокКодовОпераций.Добавить("32", НСтр("ru = '32 - Вычет НДС в ОЭЗ Калининградской обл., п.14 ст. 171 НК'"));
			// Коды, введенные в действие с 1 января 2018 года.
			СписокКодовОпераций.Добавить("36", НСтр("ru = '36 - Вычет НДС при реализации гражданину иностранного государства, п.4.1 ст. 171 НК'"));
			СписокКодовОпераций.Добавить("41", НСтр("ru = '41 - Авансы выданные за товары п.8 ст. 161 НК'"));
			СписокКодовОпераций.Добавить("42", НСтр("ru = '42 - Получение товаров п.8 ст. 161 НК'"));
			СписокКодовОпераций.Добавить("43", НСтр("ru = '43 - Возврат, зачет авансовых платежей за товары п.8 ст. 161 НК'"));
			СписокКодовОпераций.Добавить("44", НСтр("ru = '44 - Изменение стоимости полученных товаров п.8 ст. 161 НК в сторону уменьшения'"));
			
		ИначеЕсли ЧастьЖурнала = Перечисления.ЧастиЖурналаУчетаСчетовФактур.ВыставленныеСчетаФактуры Тогда
			
			СписокКодовОпераций.Добавить("01", НСтр("ru = '01 - Реализация товаров, работ, услуг и операции, приравненные к ней'"));
			СписокКодовОпераций.Добавить("02", НСтр("ru = '02 - Авансы полученные'"));
			СписокКодовОпераций.Добавить("06", НСтр("ru = '06 - Налоговый агент, ст. 161 НК'"));
			СписокКодовОпераций.Добавить("10", НСтр("ru = '10 - Безвозмездная передача товаров, работ, услуг'"));
			СписокКодовОпераций.Добавить("13", НСтр("ru = '13 - Капитальное строительство, модернизация (реконструкция) объектов недвижимости'"));
			СписокКодовОпераций.Добавить("14", НСтр("ru = '14 - Реализация прав, пп.1-4 ст. 155 НК'"));
			СписокКодовОпераций.Добавить("15", НСтр("ru = '15 - Совместная реализация собственных и комиссионных товаров, работ, услуг'"));
			СписокКодовОпераций.Добавить("16", НСтр("ru = '16 - Возврат от покупателя-неплательщика НДС'"));
			СписокКодовОпераций.Добавить("18", НСтр("ru = '18 - Изменение стоимости отгруженных товаров (работ, услуг) в сторону уменьшения'"));
			СписокКодовОпераций.Добавить("21", НСтр("ru = '21 - Восстановление НДС, п.8 ст. 145, п.3 ст. 170, ст. 171.1 НК, а также при операциях, облагаемых по ставке 0%'"));
			СписокКодовОпераций.Добавить("26", НСтр("ru = '26 - Реализация товаров, работ, услуг неплательщикам НДС, получение авансов'"));
			СписокКодовОпераций.Добавить("27", НСтр("ru = '27 - Сводный комиссионный счет-фактура, п.3.1 ст. 169 НК'"));
			СписокКодовОпераций.Добавить("28", НСтр("ru = '28 - Сводный комиссионный счет-фактура на аванс, п.3.1 ст. 169 НК'"));
			СписокКодовОпераций.Добавить("29", НСтр("ru = '29 - Корректировка по п.6 ст. 105.3 НК'"));
			СписокКодовОпераций.Добавить("30", НСтр("ru = '30 - Отгрузка товаров в ОЭЗ Калининградской обл., абз.1 пп.1.1 п.1 ст. 151 НК'"));
			СписокКодовОпераций.Добавить("31", НСтр("ru = '31 - Уплата НДС в ОЭЗ Калининградской обл., абз.2 пп.1.1 п.1 ст. 151 НК'"));
			
			// Коды, введенные в действие с 1 января 2018 года.
			СписокКодовОпераций.Добавить("33", НСтр("ru = '33 - Авансы полученные за товары п.8 ст. 161 НК'"));
			СписокКодовОпераций.Добавить("34", НСтр("ru = '34 - Реализация товаров п.8 ст. 161 НК'"));
			СписокКодовОпераций.Добавить("35", НСтр("ru = '35 - Оформление документа для компенсации НДС гражданину иностранного государства'"));
			СписокКодовОпераций.Добавить("37", НСтр("ru = '37 - Реализация сырьевых товаров на экспорт по ставке 18%, п.7 ст.164 НК'"));
			СписокКодовОпераций.Добавить("38", НСтр("ru = '38 - Реализация несырьевых товаров на экспорт по ставке 18%, п.7 ст.164 НК'"));
			СписокКодовОпераций.Добавить("39", НСтр("ru = '39 - Реализация несырьевых товаров на экспорт по ставке 10%, п.7 ст.164 НК'"));
			СписокКодовОпераций.Добавить("40", НСтр("ru = '40 - Реализация работ (услуг) в отношении экспортируемых товаров по ставке 18%, пп.2.1-2.5,2.7 и 2.8 п.1, п.7 ст.164 НК'"));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Преобразует переданный код вида операции в актуальный на переданную версию кодов
// Параметры:
//   КодВидаОперации - Строка - код операции, который необходимо преобразовать в актуальный
//   ВерсияКодовВидовОпераций - Число - номер версии кодов см. УчетНДСКлиентСервер.ВерсияКодовВидовОпераций
// Возвращаемое значение:
//  Строка - код операции
Функция АктуальныйКодВидаОперации(КодВидаОперации, ВерсияКодовВидовОпераций) Экспорт
	
	Если ВерсияКодовВидовОпераций < 3 Тогда
		Возврат КодВидаОперации;
	КонецЕсли;
	
	Если КодВидаОперации = "03"
	 ИЛИ КодВидаОперации = "04"
	 ИЛИ КодВидаОперации = "07"
	 ИЛИ КодВидаОперации = "08"
	 ИЛИ КодВидаОперации = "09"
	 ИЛИ КодВидаОперации = "11" Тогда
		Возврат "01";
	ИначеЕсли КодВидаОперации = "05"
		ИЛИ КодВидаОперации = "02;05"
		ИЛИ КодВидаОперации = "05;02"
		ИЛИ КодВидаОперации = "12" Тогда
		Возврат "02";
	ИначеЕсли КодВидаОперации = "01;04"
		ИЛИ КодВидаОперации = "04;01" Тогда
		Возврат "15";
	Иначе
		Возврат КодВидаОперации;
	КонецЕсли;

КонецФункции

// Определяет версию перечня кодов видов операций для отчетности по НДС на переданную дату.
//
// Параметры:
//   Период - Дата - дата, на которую требуется определить версию перечня видов операций.
// Возвращаемое значение:
//  Число - номер версии кодов видов операций:
//          1 - перечень, утвержденный приказом ФНС 14.02.2012 N ММВ-7-3/83@;
//          2 - перечень, утвержденный письмом ФНС от 22.01.2015 N ГД-4-3/794@;
//          3 - перечень, утвержденный приказом ФНС от 14.03.2016 N ММВ-7-3/136@;
//          4 - дополнительные коды по письмам ФНС от 09.01.2018 N СД-4-3/10@, от 16.01.2018 N СД-4-3/532@ и N СД-4-3/480@.
Функция ВерсияКодовВидовОпераций(Период) Экспорт
	
	Если Период >= '20180101' Тогда
		// С 1 января 2018 года используются дополнительные коды, рекомендованные в письмах ФНС:
		// N СД-4-3/10@ от 09.01.2018;
		// N СД-4-3/532@ от 16.01.2018;
		// N СД-4-3/480@ от 16.01.2018.
		Возврат 4;
	ИначеЕсли Период >= '20160701' Тогда
		// С 1 июля 2016 года действует перечень, 
		// утвержденный приказом ФНС от 14.03.2016 N ММВ-7-3/136@.
		Возврат 3;
	ИначеЕсли Период >= '20150101' Тогда
		// С 1 января 2015 года действует перечень,
		// утвержденный письмом ФНС от 22.01.2015 N ГД-4-3/794@.
		Возврат 2;
	Иначе
		// До 1 января 2015 года действует перечень,
		// утвержденный приказом ФНС 14.02.2012 N ММВ-7-3/83@.
		Возврат 1;
	КонецЕсли;
	
КонецФункции

// Определяет наличие соглашения с контрагентом, на электронный обмен документами
//
Функция НаличиеСоглашенияОбменаЭД(СсылкаНаВладельца) Экспорт
	
	Если НЕ ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьЗначениеФункциональнойОпции("ИспользоватьОбменЭД")
		ИЛИ НЕ ЗначениеЗаполнено(СсылкаНаВладельца) Тогда
		Возврат Ложь;
	КонецЕсли;	
	
	ПараметрыЭД = Новый Структура("ВидЭд,НаправлениеЭД,Организация,Контрагент");
	
	ЗаполнитьЗначенияСвойств(ПараметрыЭД, СсылкаНаВладельца);
	
	ПараметрыЭД.ВидЭД         = Перечисления.ВидыЭД.СчетФактура;
	ПараметрыЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий;
	
	Возврат ЭлектронныеДокументыСлужебныйВызовСервера.ЕстьДействующееСоглашение(ПараметрыЭД);
	
КонецФункции

// Возвращает порядок корректировки НДС (по проекту Федерального Закона N 79859-6)
//
// Параметры
// 	Дата  	- 	тип дата, в данном параметре передается
//            	дата на которую необходимо определить порядок корректировки НДФЛ
// Возвращаемое значение:
//  Число   - 	версия постановления, 
//				1 - корректировка НДС выполняется по периоду отгрузки 
//              2 - корректировка НДС выполняется по периоду соглашения об изменении условий договора
//
Функция ПолучитьПорядокКорректировкиНДС(Дата) Экспорт 

	НачалоПримененияПравила = '20130701';
	
	Если Дата >= НачалоПримененияПравила Тогда
		Возврат 1;
	Иначе
		Возврат 2;
	КонецЕсли;

КонецФункции

// Возвращает порядок округления НДС (Федеральный Закон N 248-ФЗ)
//
// Параметры
// 	Дата  	- 	тип дата, в данном параметре передается
//            	дата на которую необходимо определить порядок округления НДС
// Возвращаемое значение:
//  Булево - 	признак применения
//				1 	- сумма НДС исчисляется с копейками
//				2 	- сумма НДС исчисляется в полных рублях
//
Функция ПолучитьПорядокОкругленияНДС(Дата) Экспорт

	НачалоПримененияОкругления = '20140101';
	
	Если Дата < НачалоПримененияОкругления Тогда
		Возврат 1;
	Иначе
		Возврат 2;
	КонецЕсли;

КонецФункции // ПолучитьПорядокОкругленияНДС()

Функция МассивПустыхИсправленныхСчетовФактур() Экспорт

	МассивДокументовИсправлений = Новый Массив;
	
	МассивТипов = Метаданные.РегистрыНакопления.НДСЗаписиКнигиПокупок.Измерения.ИсправленныйСчетФактура.Тип.Типы();
	Для Каждого ТипДокумента Из МассивТипов Цикл
		МетаданныеДокумента = Метаданные.НайтиПоТипу(ТипДокумента);
		Если МетаданныеДокумента <> Неопределено Тогда
			ИмяДокумента = МетаданныеДокумента.Имя;
			МассивДокументовИсправлений.Добавить(Документы[ИмяДокумента].ПустаяСсылка());
		КонецЕсли;
	КонецЦикла;
	
	МассивДокументовИсправлений.Добавить(Неопределено);

	Возврат МассивДокументовИсправлений;

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ФОРМИРОВАНИЕ КНИГ И ЖУРНАЛОВ

// Формирование электронных отчетов по НДС

Функция ПолучитьКодПоСКНП(Период, Реорганизация = Ложь) Экспорт 
	
	Мес = Цел((Месяц(Период)-1)/3);
	
	Если Реорганизация Тогда
		Если Мес = 0 Тогда
			Возврат "51";
		ИначеЕсли Мес = 1 Тогда 
			Возврат "54";
		ИначеЕсли Мес = 2 Тогда 
			Возврат "55";
		ИначеЕсли Мес = 3 Тогда 
			Возврат "56";
		КонецЕсли;
	Иначе
		Если Мес = 0 Тогда
			Возврат "21";
		ИначеЕсли Мес = 1 Тогда 
			Возврат "22";
		ИначеЕсли Мес = 2 Тогда 
			Возврат "23";
		ИначеЕсли Мес = 3 Тогда 
			Возврат "24";
		КонецЕсли;	
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Процедура СформироватьДокументыОтчетности(СтруктураПараметров, Отказ = Ложь) Экспорт
	
	Если НЕ ЗначениеЗаполнено(СтруктураПараметров.Организация) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указана организация.");
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтруктураПараметров.НалоговыйПериод) Тогда 
		ОбщегоНазначения.СообщитьОбОшибке("Не указан период составления документов.");
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров.Вставить("ФорматПоПостановлению735", СтруктураПараметров.НалоговыйПериод >= '20141001');
	
	СписокДокументов = ПолучитьСписокДокументовОтчетности(СтруктураПараметров);
		
	Для каждого СтрокаСписка Из СписокДокументов Цикл
		СоздатьЗаполнитьДокумент(СтрокаСписка, СтруктураПараметров, Отказ);
	КонецЦикла;

КонецПроцедуры

Процедура СоздатьЗаполнитьДокумент(СтрокаСписка, СтруктураПараметров, Отказ)

	Если НЕ ЗначениеЗаполнено(СтрокаСписка.Документ) Тогда
		
		ДокументОбъект	= Документы[СтрокаСписка.Имя].СоздатьДокумент();
		
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ДокументОбъект, глЗначениеПеременной("глТекущийПользователь"));
		ДокументОбъект.Организация		= СтруктураПараметров.Организация;
		ДокументОбъект.Дата				= СтрокаСписка.Дата;
		ДокументОбъект.НалоговыйПериод	= СтрокаСписка.НалоговыйПериод;
		ДокументОбъект.ПериодПоСКНП 	= УчетНДС.ПолучитьКодПоСКНП(СтрокаСписка.НалоговыйПериод);
		
		ДокументОбъект.УстановитьВремя(РежимАвтоВремя.Последним);
		
	Иначе
		ДокументОбъект	= СтрокаСписка.Документ.ПолучитьОбъект();
		ДокументОбъект.Дата				= СтрокаСписка.Дата;
		ДокументОбъект.НалоговыйПериод	= СтрокаСписка.НалоговыйПериод;
		ДокументОбъект.ПериодПоСКНП 	= УчетНДС.ПолучитьКодПоСКНП(СтрокаСписка.НалоговыйПериод);
	КонецЕсли;
	
	ДокументОбъект.ЗаполнитьДокумент();
	
	ЭтоНовый = ДокументОбъект.ЭтоНовый();
	
	Попытка
	
		Если НЕ ЭтоНовый
			И (СтрокаСписка.Тип = Тип("ДокументСсылка.ДопЛистКнигиПокупокДляПередачиВЭлектронномВиде")
				ИЛИ СтрокаСписка.Тип = Тип("ДокументСсылка.ДопЛистКнигиПродажДляПередачиВЭлектронномВиде"))
			И ДокументОбъект.ТабличнаяЧасть.Количество() = 0 
			И НЕ СтруктураПараметров.ФорматПоПостановлению735 Тогда
			
			ДокументОбъект.ПометкаУдаления = Истина;
			ДокументОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			
		Иначе
			
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
				
		КонецЕсли;
			
	Исключение
		
		ОбщегоНазначения.СообщитьОбОшибке(?(ЭтоНовый, "Не создан документ ", "Не перезаполнен документ ") + ДокументОбъект.Метаданные().Синоним
			+ ": " + ОписаниеОшибки());
			
		Отказ = Истина;	
		
	КонецПопытки;

КонецПроцедуры

Функция ПолучитьСписокДокументовОтчетности(СтруктураПараметров)
	
	Перем ФормироватьКнигуПокупок, ФормироватьКнигуПродаж;
	Перем ФормироватьЖурналУчетаСчетовФактур;
	Перем ФормироватьДопЛистыКнигиПокупок, ФормироватьДопЛистыКнигиПродаж;
	Перем СписокДокументов;
	
	Если НЕ СтруктураПараметров.Свойство("ФормироватьКнигуПокупок", ФормироватьКнигуПокупок) Тогда
		ФормироватьКнигуПокупок = Ложь;
	КонецЕсли;
	Если НЕ СтруктураПараметров.Свойство("ФормироватьКнигуПродаж", ФормироватьКнигуПродаж) Тогда
		ФормироватьКнигуПродаж = Ложь;
	КонецЕсли;
	Если НЕ СтруктураПараметров.Свойство("ФормироватьЖурналУчетаСчетовФактур", ФормироватьЖурналУчетаСчетовФактур) Тогда
		ФормироватьЖурналУчетаСчетовФактур = Ложь;
	КонецЕсли;
	Если НЕ СтруктураПараметров.Свойство("ФормироватьДопЛистыКнигиПокупок", ФормироватьДопЛистыКнигиПокупок) Тогда
		ФормироватьДопЛистыКнигиПокупок = Ложь;
	КонецЕсли;
	Если НЕ СтруктураПараметров.Свойство("ФормироватьДопЛистыКнигиПродаж", ФормироватьДопЛистыКнигиПродаж) Тогда
		ФормироватьДопЛистыКнигиПродаж = Ложь;
	КонецЕсли;
	
	СписокДокументов	= Новый ТаблицаЗначений;
	СписокДокументов.Колонки.Добавить("Имя",				ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100));
	СписокДокументов.Колонки.Добавить("Тип",				Новый ОписаниеТипов("Тип"));
	СписокДокументов.Колонки.Добавить("Документ",			Документы.ТипВсеСсылки());
	СписокДокументов.Колонки.Добавить("Дата",				ОбщегоНазначения.ПолучитьОписаниеТиповДаты(ЧастиДаты.ДатаВремя));
	СписокДокументов.Колонки.Добавить("Номер",				ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(30));
	СписокДокументов.Колонки.Добавить("НалоговыйПериод",	ОбщегоНазначения.ПолучитьОписаниеТиповДаты(ЧастиДаты.Дата));
	СписокДокументов.Колонки.Добавить("СтатусЭД",			Новый ОписаниеТипов("ПеречислениеСсылка.СтатусыЭД"));
	
	Если НЕ ЗначениеЗаполнено(СтруктураПараметров.Организация) Тогда
		Возврат СписокДокументов;
	КонецЕсли;
	
	НачалоПериода	= НачалоКвартала(СтруктураПараметров.НалоговыйПериод);
	КонецПериода	= КонецКвартала(СтруктураПараметров.НалоговыйПериод);
	
	НачалоПримененияПостановления1137 = '20120401';
	НачалоПримененияПостановления735  = '20141001';
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",	СтруктураПараметров.Организация);
	Запрос.УстановитьПараметр("НачалоПериода",	НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",	КонецПериода);
	Запрос.УстановитьПараметр("НачалоПримененияПостановления1137",  НачалоПримененияПостановления1137);
	Запрос.УстановитьПараметр("НачалоПримененияПостановления735",   НачалоПримененияПостановления735);
	Запрос.УстановитьПараметр("ФормироватьКнигуПокупок",			ФормироватьКнигуПокупок);
	Запрос.УстановитьПараметр("ФормироватьКнигуПродаж",				ФормироватьКнигуПродаж);
	Запрос.УстановитьПараметр("ФормироватьЖурналУчетаСчетовФактур",	ФормироватьЖурналУчетаСчетовФактур);
	Запрос.УстановитьПараметр("ФормироватьДопЛистыКнигиПокупок",	ФормироватьДопЛистыКнигиПокупок);
	Запрос.УстановитьПараметр("ФормироватьДопЛистыКнигиПродаж",		ФормироватьДопЛистыКнигиПродаж);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НАЧАЛОПЕРИОДА(НДСЗаписиКнигиПокупок.Период, ДЕНЬ) КАК День,
	|	НАЧАЛОПЕРИОДА(НДСЗаписиКнигиПокупок.КорректируемыйПериод, КВАРТАЛ) КАК НалоговыйПериод
	|ПОМЕСТИТЬ ВТ_НДСЗаписиКнигиПокупокДо735
	|ИЗ
	|	РегистрНакопления.НДСЗаписиКнигиПокупок КАК НДСЗаписиКнигиПокупок
	|ГДЕ
	|	&ФормироватьДопЛистыКнигиПокупок
	|	И НДСЗаписиКнигиПокупок.Организация = &Организация
	|	И НДСЗаписиКнигиПокупок.ЗаписьДополнительногоЛиста
	|	И НДСЗаписиКнигиПокупок.КорректируемыйПериод < &НачалоПримененияПостановления735
	|	И НДСЗаписиКнигиПокупок.КорректируемыйПериод >= &НачалоПримененияПостановления1137
	|	И НДСЗаписиКнигиПокупок.КорректируемыйПериод МЕЖДУ &НачалоПериода И &КонецПериода
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	День,
	|	НалоговыйПериод
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	&КонецПериода КАК День,
	|	НАЧАЛОПЕРИОДА(НДСЗаписиКнигиПокупок.КорректируемыйПериод, КВАРТАЛ) КАК НалоговыйПериод
	|ПОМЕСТИТЬ ВТ_НДСЗаписиКнигиПокупок735
	|ИЗ
	|	РегистрНакопления.НДСЗаписиКнигиПокупок КАК НДСЗаписиКнигиПокупок
	|ГДЕ
	|	&ФормироватьДопЛистыКнигиПокупок
	|	И НДСЗаписиКнигиПокупок.Организация = &Организация
	|	И НДСЗаписиКнигиПокупок.ЗаписьДополнительногоЛиста
	|	И НДСЗаписиКнигиПокупок.КорректируемыйПериод >= &НачалоПримененияПостановления735
	|	И НДСЗаписиКнигиПокупок.КорректируемыйПериод МЕЖДУ &НачалоПериода И &КонецПериода
	|
	|СГРУППИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(НДСЗаписиКнигиПокупок.КорректируемыйПериод, КВАРТАЛ)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	День,
	|	НалоговыйПериод
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НАЧАЛОПЕРИОДА(НДСЗаписиКнигиПродаж.Период, ДЕНЬ) КАК День,
	|	НАЧАЛОПЕРИОДА(НДСЗаписиКнигиПродаж.КорректируемыйПериод, КВАРТАЛ) КАК НалоговыйПериод
	|ПОМЕСТИТЬ ВТ_НДСЗаписиКнигиПродажДо735
	|ИЗ
	|	РегистрНакопления.НДСЗаписиКнигиПродаж КАК НДСЗаписиКнигиПродаж
	|ГДЕ
	|	&ФормироватьДопЛистыКнигиПродаж
	|	И НДСЗаписиКнигиПродаж.Организация = &Организация
	|	И НДСЗаписиКнигиПродаж.ЗаписьДополнительногоЛиста
	|	И НДСЗаписиКнигиПродаж.КорректируемыйПериод < &НачалоПримененияПостановления735
	|	И НДСЗаписиКнигиПродаж.КорректируемыйПериод >= &НачалоПримененияПостановления1137
	|	И НДСЗаписиКнигиПродаж.КорректируемыйПериод МЕЖДУ &НачалоПериода И &КонецПериода
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	День,
	|	НалоговыйПериод
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	&КонецПериода КАК День,
	|	НАЧАЛОПЕРИОДА(НДСЗаписиКнигиПродаж.КорректируемыйПериод, КВАРТАЛ) КАК НалоговыйПериод
	|ПОМЕСТИТЬ ВТ_НДСЗаписиКнигиПродаж735
	|ИЗ
	|	РегистрНакопления.НДСЗаписиКнигиПродаж КАК НДСЗаписиКнигиПродаж
	|ГДЕ
	|	&ФормироватьДопЛистыКнигиПродаж
	|	И НДСЗаписиКнигиПродаж.Организация = &Организация
	|	И НДСЗаписиКнигиПродаж.ЗаписьДополнительногоЛиста
	|	И НДСЗаписиКнигиПродаж.КорректируемыйПериод >= &НачалоПримененияПостановления735
	|	И НДСЗаписиКнигиПродаж.КорректируемыйПериод МЕЖДУ &НачалоПериода И &КонецПериода
	|
	|СГРУППИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(НДСЗаписиКнигиПродаж.КорректируемыйПериод, КВАРТАЛ)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	День,
	|	НалоговыйПериод
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДополнительныйЛистКнигиПокупок.Ссылка,
	|	ДополнительныйЛистКнигиПокупок.Дата,
	|	НАЧАЛОПЕРИОДА(ДополнительныйЛистКнигиПокупок.Дата, ДЕНЬ) КАК День,
	|	ДополнительныйЛистКнигиПокупок.НалоговыйПериод
	|ПОМЕСТИТЬ ВТ_ДополнительныеЛистыКнигиПокупокДо735
	|ИЗ
	|	Документ.ДопЛистКнигиПокупокДляПередачиВЭлектронномВиде КАК ДополнительныйЛистКнигиПокупок
	|ГДЕ
	|	&ФормироватьДопЛистыКнигиПокупок
	|	И ДополнительныйЛистКнигиПокупок.Организация = &Организация
	|	И НЕ ДополнительныйЛистКнигиПокупок.ПометкаУдаления
	|	И ДополнительныйЛистКнигиПокупок.НалоговыйПериод = &НачалоПериода
	|	И ДополнительныйЛистКнигиПокупок.НалоговыйПериод < &НачалоПримененияПостановления735
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	День,
	|	ДополнительныйЛистКнигиПокупок.НалоговыйПериод
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДополнительныйЛистКнигиПокупок.Ссылка,
	|	ДополнительныйЛистКнигиПокупок.Дата,
	|	&КонецПериода КАК День,
	|	ДополнительныйЛистКнигиПокупок.НалоговыйПериод
	|ПОМЕСТИТЬ ВТ_ДополнительныеЛистыКнигиПокупок735
	|ИЗ
	|	Документ.ДопЛистКнигиПокупокДляПередачиВЭлектронномВиде КАК ДополнительныйЛистКнигиПокупок
	|ГДЕ
	|	&ФормироватьДопЛистыКнигиПокупок
	|	И ДополнительныйЛистКнигиПокупок.Организация = &Организация
	|	И НЕ ДополнительныйЛистКнигиПокупок.ПометкаУдаления
	|	И ДополнительныйЛистКнигиПокупок.НалоговыйПериод = &НачалоПериода
	|	И ДополнительныйЛистКнигиПокупок.НалоговыйПериод >= &НачалоПримененияПостановления735
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	День,
	|	ДополнительныйЛистКнигиПокупок.НалоговыйПериод
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДополнительныйЛистКнигиПродаж.Ссылка,
	|	ДополнительныйЛистКнигиПродаж.Дата,
	|	НАЧАЛОПЕРИОДА(ДополнительныйЛистКнигиПродаж.Дата, ДЕНЬ) КАК День,
	|	ДополнительныйЛистКнигиПродаж.НалоговыйПериод
	|ПОМЕСТИТЬ ВТ_ДополнительныеЛистыКнигиПродажДо735
	|ИЗ
	|	Документ.ДопЛистКнигиПродажДляПередачиВЭлектронномВиде КАК ДополнительныйЛистКнигиПродаж
	|ГДЕ
	|	&ФормироватьДопЛистыКнигиПродаж
	|	И ДополнительныйЛистКнигиПродаж.Организация = &Организация
	|	И НЕ ДополнительныйЛистКнигиПродаж.ПометкаУдаления
	|	И ДополнительныйЛистКнигиПродаж.НалоговыйПериод = &НачалоПериода
	|	И ДополнительныйЛистКнигиПродаж.НалоговыйПериод < &НачалоПримененияПостановления735
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	День,
	|	ДополнительныйЛистКнигиПродаж.НалоговыйПериод
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДополнительныйЛистКнигиПродаж.Ссылка,
	|	ДополнительныйЛистКнигиПродаж.Дата,
	|	&КонецПериода КАК День,
	|	ДополнительныйЛистКнигиПродаж.НалоговыйПериод
	|ПОМЕСТИТЬ ВТ_ДополнительныеЛистыКнигиПродаж735
	|ИЗ
	|	Документ.ДопЛистКнигиПродажДляПередачиВЭлектронномВиде КАК ДополнительныйЛистКнигиПродаж
	|ГДЕ
	|	&ФормироватьДопЛистыКнигиПродаж
	|	И ДополнительныйЛистКнигиПродаж.Организация = &Организация
	|	И НЕ ДополнительныйЛистКнигиПродаж.ПометкаУдаления
	|	И ДополнительныйЛистКнигиПродаж.НалоговыйПериод = &НачалоПериода
	|	И ДополнительныйЛистКнигиПродаж.НалоговыйПериод >= &НачалоПримененияПостановления735
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	День,
	|	ДополнительныйЛистКнигиПродаж.НалоговыйПериод
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	""КнигаПокупокДляПередачиВЭлектронномВиде"" КАК Имя,
	|	ТИП(Документ.КнигаПокупокДляПередачиВЭлектронномВиде) КАК Тип,
	|	КнигаПокупок.Ссылка КАК Документ,
	|	КнигаПокупок.Дата КАК Дата,
	|	КнигаПокупок.НалоговыйПериод КАК НалоговыйПериод,
	|	ЗНАЧЕНИЕ(Перечисление.СтатусыЭД.Сформирован) КАК СтатусЭД
	|ИЗ
	|	Документ.КнигаПокупокДляПередачиВЭлектронномВиде КАК КнигаПокупок
	|ГДЕ
	|	&ФормироватьКнигуПокупок
	|	И КнигаПокупок.Организация = &Организация
	|	И КнигаПокупок.НалоговыйПериод = &НачалоПериода
	|	И НЕ КнигаПокупок.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""КнигаПродажДляПередачиВЭлектронномВиде"",
	|	ТИП(Документ.КнигаПродажДляПередачиВЭлектронномВиде),
	|	КнигаПродаж.Ссылка,
	|	КнигаПродаж.Дата,
	|	КнигаПродаж.НалоговыйПериод,
	|	ЗНАЧЕНИЕ(Перечисление.СтатусыЭД.Сформирован)
	|ИЗ
	|	Документ.КнигаПродажДляПередачиВЭлектронномВиде КАК КнигаПродаж
	|ГДЕ
	|	&ФормироватьКнигуПродаж
	|	И КнигаПродаж.Организация = &Организация
	|	И КнигаПродаж.НалоговыйПериод = &НачалоПериода
	|	И НЕ КнигаПродаж.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""ЖурналУчетаСчетовФактурДляПередачиВЭлектронномВиде"",
	|	ТИП(Документ.ЖурналУчетаСчетовФактурДляПередачиВЭлектронномВиде),
	|	ЖурналУчетаСчетовФактур.Ссылка,
	|	ЖурналУчетаСчетовФактур.Дата,
	|	ЖурналУчетаСчетовФактур.НалоговыйПериод,
	|	ЗНАЧЕНИЕ(Перечисление.СтатусыЭД.Сформирован)
	|ИЗ
	|	Документ.ЖурналУчетаСчетовФактурДляПередачиВЭлектронномВиде КАК ЖурналУчетаСчетовФактур
	|ГДЕ
	|	&ФормироватьЖурналУчетаСчетовФактур
	|	И ЖурналУчетаСчетовФактур.Организация = &Организация
	|	И ЖурналУчетаСчетовФактур.НалоговыйПериод = &НачалоПериода
	|	И НЕ ЖурналУчетаСчетовФактур.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""ДопЛистКнигиПокупокДляПередачиВЭлектронномВиде"",
	|	ТИП(Документ.ДопЛистКнигиПокупокДляПередачиВЭлектронномВиде),
	|	ВТ_ДополнительныеЛистыКнигиПокупокДо735.Ссылка,
	|	ВЫБОР
	|		КОГДА ВТ_ДополнительныеЛистыКнигиПокупокДо735.Ссылка ЕСТЬ NULL 
	|			ТОГДА ВТ_НДСЗаписиКнигиПокупокДо735.День
	|		ИНАЧЕ ВТ_ДополнительныеЛистыКнигиПокупокДо735.Дата
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ВТ_ДополнительныеЛистыКнигиПокупокДо735.Ссылка ЕСТЬ NULL 
	|			ТОГДА ВТ_НДСЗаписиКнигиПокупокДо735.НалоговыйПериод
	|		ИНАЧЕ ВТ_ДополнительныеЛистыКнигиПокупокДо735.НалоговыйПериод
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ВТ_ДополнительныеЛистыКнигиПокупокДо735.Ссылка ЕСТЬ NULL 
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СтатусыЭД.Сформирован)
	|	КОНЕЦ
	|ИЗ
	|	ВТ_НДСЗаписиКнигиПокупокДо735 КАК ВТ_НДСЗаписиКнигиПокупокДо735
	|		ПОЛНОЕ СОЕДИНЕНИЕ ВТ_ДополнительныеЛистыКнигиПокупокДо735 КАК ВТ_ДополнительныеЛистыКнигиПокупокДо735
	|		ПО ВТ_НДСЗаписиКнигиПокупокДо735.День = ВТ_ДополнительныеЛистыКнигиПокупокДо735.День
	|			И ВТ_НДСЗаписиКнигиПокупокДо735.НалоговыйПериод = ВТ_ДополнительныеЛистыКнигиПокупокДо735.НалоговыйПериод
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""ДопЛистКнигиПокупокДляПередачиВЭлектронномВиде"",
	|	ТИП(Документ.ДопЛистКнигиПокупокДляПередачиВЭлектронномВиде),
	|	ВТ_ДополнительныеЛистыКнигиПокупок735.Ссылка,
	|	ВЫБОР
	|		КОГДА ВТ_ДополнительныеЛистыКнигиПокупок735.Ссылка ЕСТЬ NULL 
	|			ТОГДА ВТ_НДСЗаписиКнигиПокупок735.День
	|		ИНАЧЕ ВТ_ДополнительныеЛистыКнигиПокупок735.Дата
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ВТ_ДополнительныеЛистыКнигиПокупок735.Ссылка ЕСТЬ NULL 
	|			ТОГДА ВТ_НДСЗаписиКнигиПокупок735.НалоговыйПериод
	|		ИНАЧЕ ВТ_ДополнительныеЛистыКнигиПокупок735.НалоговыйПериод
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ВТ_ДополнительныеЛистыКнигиПокупок735.Ссылка ЕСТЬ NULL 
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СтатусыЭД.Сформирован)
	|	КОНЕЦ
	|ИЗ
	|	ВТ_НДСЗаписиКнигиПокупок735 КАК ВТ_НДСЗаписиКнигиПокупок735
	|		ПОЛНОЕ СОЕДИНЕНИЕ ВТ_ДополнительныеЛистыКнигиПокупок735 КАК ВТ_ДополнительныеЛистыКнигиПокупок735
	|		ПО ВТ_НДСЗаписиКнигиПокупок735.НалоговыйПериод = ВТ_ДополнительныеЛистыКнигиПокупок735.НалоговыйПериод
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""ДопЛистКнигиПродажДляПередачиВЭлектронномВиде"",
	|	ТИП(Документ.ДопЛистКнигиПродажДляПередачиВЭлектронномВиде),
	|	ВТ_ДополнительныеЛистыКнигиПродажДо735.Ссылка,
	|	ВЫБОР
	|		КОГДА ВТ_ДополнительныеЛистыКнигиПродажДо735.Ссылка ЕСТЬ NULL 
	|			ТОГДА ВТ_НДСЗаписиКнигиПродажДо735.День
	|		ИНАЧЕ ВТ_ДополнительныеЛистыКнигиПродажДо735.Дата
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ВТ_ДополнительныеЛистыКнигиПродажДо735.Ссылка ЕСТЬ NULL 
	|			ТОГДА ВТ_НДСЗаписиКнигиПродажДо735.НалоговыйПериод
	|		ИНАЧЕ ВТ_ДополнительныеЛистыКнигиПродажДо735.НалоговыйПериод
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ВТ_ДополнительныеЛистыКнигиПродажДо735.Ссылка ЕСТЬ NULL 
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СтатусыЭД.Сформирован)
	|	КОНЕЦ
	|ИЗ
	|	ВТ_НДСЗаписиКнигиПродажДо735 КАК ВТ_НДСЗаписиКнигиПродажДо735
	|		ПОЛНОЕ СОЕДИНЕНИЕ ВТ_ДополнительныеЛистыКнигиПродажДо735 КАК ВТ_ДополнительныеЛистыКнигиПродажДо735
	|		ПО ВТ_НДСЗаписиКнигиПродажДо735.День = ВТ_ДополнительныеЛистыКнигиПродажДо735.День
	|			И ВТ_НДСЗаписиКнигиПродажДо735.НалоговыйПериод = ВТ_ДополнительныеЛистыКнигиПродажДо735.НалоговыйПериод
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""ДопЛистКнигиПродажДляПередачиВЭлектронномВиде"",
	|	ТИП(Документ.ДопЛистКнигиПродажДляПередачиВЭлектронномВиде),
	|	ВТ_ДополнительныеЛистыКнигиПродаж735.Ссылка,
	|	ВЫБОР
	|		КОГДА ВТ_ДополнительныеЛистыКнигиПродаж735.Ссылка ЕСТЬ NULL 
	|			ТОГДА ВТ_НДСЗаписиКнигиПродаж735.День
	|		ИНАЧЕ ВТ_ДополнительныеЛистыКнигиПродаж735.Дата
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ВТ_ДополнительныеЛистыКнигиПродаж735.Ссылка ЕСТЬ NULL 
	|			ТОГДА ВТ_НДСЗаписиКнигиПродаж735.НалоговыйПериод
	|		ИНАЧЕ ВТ_ДополнительныеЛистыКнигиПродаж735.НалоговыйПериод
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ВТ_ДополнительныеЛистыКнигиПродаж735.Ссылка ЕСТЬ NULL 
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СтатусыЭД.Сформирован)
	|	КОНЕЦ
	|ИЗ
	|	ВТ_НДСЗаписиКнигиПродаж735 КАК ВТ_НДСЗаписиКнигиПродаж735
	|		ПОЛНОЕ СОЕДИНЕНИЕ ВТ_ДополнительныеЛистыКнигиПродаж735 КАК ВТ_ДополнительныеЛистыКнигиПродаж735
	|		ПО ВТ_НДСЗаписиКнигиПродаж735.НалоговыйПериод = ВТ_ДополнительныеЛистыКнигиПродаж735.НалоговыйПериод";
	
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		СписокДокументов = Результат.Выгрузить();
	КонецЕсли;
	
	СписокДокументов.Индексы.Добавить("Тип");
	
	Если ФормироватьКнигуПокупок
		И СписокДокументов.Найти(Тип("ДокументСсылка.КнигаПокупокДляПередачиВЭлектронномВиде"), "Тип") = Неопределено Тогда
		НоваяСтрока	= СписокДокументов.Вставить(0);
		НоваяСтрока.Имя				= "КнигаПокупокДляПередачиВЭлектронномВиде";
		НоваяСтрока.Тип				= Тип("ДокументСсылка.КнигаПокупокДляПередачиВЭлектронномВиде");
		НоваяСтрока.Дата			= КонецПериода;
		НоваяСтрока.НалоговыйПериод	= НачалоПериода;
	КонецЕсли;
	
	Если ФормироватьКнигуПродаж
		И СписокДокументов.Найти(Тип("ДокументСсылка.КнигаПродажДляПередачиВЭлектронномВиде"), "Тип") = Неопределено Тогда
		НоваяСтрока	= СписокДокументов.Вставить(1);
		НоваяСтрока.Имя				= "КнигаПродажДляПередачиВЭлектронномВиде";
		НоваяСтрока.Тип				= Тип("ДокументСсылка.КнигаПродажДляПередачиВЭлектронномВиде");
		НоваяСтрока.Дата			= КонецПериода;
		НоваяСтрока.НалоговыйПериод	= НачалоПериода;
	КонецЕсли;
	
	Если ФормироватьЖурналУчетаСчетовФактур
		И СписокДокументов.Найти(Тип("ДокументСсылка.ЖурналУчетаСчетовФактурДляПередачиВЭлектронномВиде"), "Тип") = Неопределено Тогда
		НоваяСтрока	= СписокДокументов.Вставить(2);
		НоваяСтрока.Имя				= "ЖурналУчетаСчетовФактурДляПередачиВЭлектронномВиде";
		НоваяСтрока.Тип				= Тип("ДокументСсылка.ЖурналУчетаСчетовФактурДляПередачиВЭлектронномВиде");
		НоваяСтрока.Дата			= КонецПериода;
		НоваяСтрока.НалоговыйПериод	= НачалоПериода;
	КонецЕсли;
	
	Возврат	СписокДокументов;

КонецФункции

																						// Функция собирает данные по документу основанию ОтчетаКомитенту и 
// возвращает типизированную структуру с данными
// 
Функция СобратьДанныеПоОтчетКомитентуОПродажах(ДокОснование, Ссылка)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокОснование);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Организация,
	|	Организация   КАК Поставщик,
	|	Подразделение КАК Подразделение,
	|	Контрагент    КАК Покупатель,
	|	СуммаДокумента          КАК Сумма,
	|	СтавкаНДСВознаграждения КАК СтавкаНДС,
	|	ВЫБОР
	|		КОГДА СтавкаНДСВознаграждения = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК ЕстьНДС,
	|	ВалютаДокумента         				  КАК Валюта,
	|	УслугаПоВознаграждению 					  КАК Товар,
	|	УслугаПоВознаграждению.НаименованиеПолное КАК ТоварНаименование,
	|	УслугаПоВознаграждению.Код 				  КАК ТоварКод,
	|	УслугаПоВознаграждению.Артикул 			  КАК ТоварАртикул,
	|	Товары.(
	|		СУММА(СуммаВознаграждения) КАК Сумма
	|	)
	|ИЗ
	|	Документ.ОтчетКомитентуОПродажах КАК ОтчетКомитентуОПродажах
	|
	|ГДЕ
	|	ОтчетКомитентуОПродажах.Ссылка = &ДокументОснование";
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	ВыборкаСтрокТовары = Шапка.Товары.Выбрать();
	
	ДанныеДляПечати = Новый Структура();
	ДанныеДляПечати.Вставить("Организация",      	Шапка.Организация);
	ДанныеДляПечати.Вставить("Номер",            	Ссылка.Номер);
	ДанныеДляПечати.Вставить("Дата",             	Ссылка.Дата);
	ДанныеДляПечати.Вставить("НомерПРД",         	Ссылка.НомерПлатежноРасчетногоДокумента);
	ДанныеДляПечати.Вставить("ДатаПРД",          	Ссылка.ДатаПлатежноРасчетногоДокумента);
	ДанныеДляПечати.Вставить("Поставщик",        	Шапка.Поставщик);
	ДанныеДляПечати.Вставить("Грузоотправитель", 	);
	ДанныеДляПечати.Вставить("Подразделение",    	Шапка.Подразделение);
	ДанныеДляПечати.Вставить("Покупатель",       	Шапка.Покупатель);
	ДанныеДляПечати.Вставить("Грузополучатель",  	);
	ДанныеДляПечати.Вставить("Сумма",            	Шапка.Сумма);
	ДанныеДляПечати.Вставить("Валюта",           	Шапка.Валюта);
	ДанныеДляПечати.Вставить("УчитыватьНДС",     	Истина);
	ДанныеДляПечати.Вставить("СчетФактураБезНДС", 	(Шапка.ЕстьНДС = 0));
	
	Руководители = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизаций(Шапка.Организация, Ссылка.Дата,);
	ДанныеДляПечати.Вставить(?(РегламентированнаяОтчетность.ЭтоПБОЮЛ(Шапка.Поставщик), "ФИОПБОЮЛ", "ФИОРуководителя"), Руководители.Руководитель);
	ДанныеДляПечати.Вставить("ФИОГлавногоБухгалтера", Руководители.ГлавныйБухгалтер);

	Товары = СоздатьТаблицуДляЗаполнениеТабличнойЧастиДанныхПечати();

	Если ВыборкаСтрокТовары.Следующий() Тогда
		Строчка = Товары.Добавить();
		Строчка.Товар                  = ?(НЕ ЗначениеЗаполнено(Шапка.Товар), "Комиссионное вознаграждение", Шапка.Товар);
		Строчка.ТоварНаименование      = ?(НЕ ЗначениеЗаполнено(Шапка.Товар), "Комиссионное вознаграждение", Шапка.ТоварНаименование);
		Строчка.ТоварКод               = ?(НЕ ЗначениеЗаполнено(Шапка.Товар), "", Шапка.ТоварКод);
		Строчка.ТоварАртикул           = ?(НЕ ЗначениеЗаполнено(Шапка.Товар), "", Шапка.ТоварАртикул);
		Строчка.СтранаПроисхождения    = "";
		Строчка.СтранаПроисхожденияКод = "";
		Строчка.ПредставлениеСтраны    = "";
		Строчка.НомерГТД               = "";
		Строчка.ПредставлениеГТД       = "";
		Строчка.РегистрационныйНомерТД = "";
		Строчка.Количество             = 0;
		Строчка.ЕдиницаИзмерения       = "";
		Строчка.ЕдиницаИзмеренияКод    = "";
		Строчка.СтавкаНДС              = Шапка.СтавкаНДС;
		СуммаДляПечати                 = ?(ВыборкаСтрокТовары.Сумма = Null, 0, ВыборкаСтрокТовары.Сумма);
		Строчка.СуммаВключаетНДС       = Истина;
		Строчка.СуммаНДС               = УчетНДС.РассчитатьСуммуНДС(СуммаДляПечати, Истина, Истина, УчетНДС.ПолучитьСтавкуНДС(Шапка.СтавкаНДС));
		Строчка.Сумма                  = СуммаДляПечати;
		Строчка.Цена                   = СуммаДляПечати;
	КонецЕсли;

	ДанныеДляПечати.Вставить("ТабличнаяЧасть", Товары);
	
	// Параметры для универсального передаточного документа: ФИО и должность того, кто передал товар/сдал услуги, результаты работ, права
	ДанныеДляПечати.Вставить("ФИОКладовщика",       Руководители.Руководитель);
	ДанныеДляПечати.Вставить("ДолжностьКладовщика", Руководители.РуководительДолжность);

	Возврат ДанныеДляПечати;

КонецФункции // СобратьДанныеПоОтчетКомитентуОПродажах()

// Функция собирает данные по документу основанию ОтчетаКомисиионера и 
// возвращает типизированную структуру с данными
// 
Функция СобратьДанныеПоОтчетКомиссионераОПродажах(ДокОснование, Ссылка)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("ДокументОснование", ДокОснование);
 	Запрос.УстановитьПараметр("ПустойКонтрагент", Справочники.Контрагенты.ПустаяСсылка());

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОтчетКомиссионераОПродажахПокупатели.КлючСтроки КАК КлючСтроки,
	|	ОтчетКомиссионераОПродажахПокупатели.Покупатель КАК Покупатель
	|ПОМЕСТИТЬ ВТДанныеОПокупателях
	|ИЗ
	|	Документ.ОтчетКомиссионераОПродажах.Покупатели КАК ОтчетКомиссионераОПродажахПокупатели
	|ГДЕ
	|	ОтчетКомиссионераОПродажахПокупатели.Ссылка = &ДокументОснование
	|	И ОтчетКомиссионераОПродажахПокупатели.СчетФактура = &Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	КлючСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтчетКомиссионераОПродажах.Организация,
	|	ОтчетКомиссионераОПродажах.Организация КАК Поставщик,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ОтчетКомиссионераОПродажах.Грузоотправитель, &ПустойКонтрагент) = &ПустойКонтрагент
	|			ТОГДА ""он же""
	|		ИНАЧЕ ОтчетКомиссионераОПродажах.Грузоотправитель
	|	КОНЕЦ КАК Грузоотправитель,
	|	ВТДанныеОПокупателях.Покупатель КАК Покупатель,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ОтчетКомиссионераОПродажах.Грузополучатель, &ПустойКонтрагент) = &ПустойКонтрагент
	|			ТОГДА ВТДанныеОПокупателях.Покупатель
	|		ИНАЧЕ ОтчетКомиссионераОПродажах.Грузополучатель
	|	КОНЕЦ КАК Грузополучатель,
	|	ОтчетКомиссионераОПродажах.Подразделение КАК Подразделение,
	|	ОтчетКомиссионераОПродажах.ВалютаДокумента КАК Валюта,
	|	ОтчетКомиссионераОПродажах.УчитыватьНДС,
	|	ОтчетКомиссионераОПродажах.СуммаВключаетНДС
	|ИЗ
	|	Документ.ОтчетКомиссионераОПродажах КАК ОтчетКомиссионераОПродажах
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеОПокупателях КАК ВТДанныеОПокупателях
	|		ПО (ИСТИНА)
	|ГДЕ
	|	ОтчетКомиссионераОПродажах.Ссылка = &ДокументОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеОПокупателях.Покупатель КАК Контрагент,
	|	ОтчетКомиссионераОПродажахТовары.Номенклатура КАК Товар,
	|	ВЫРАЗИТЬ(ОтчетКомиссионераОПродажахТовары.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК ТоварНаименование,
	|	ВЫБОР
	|		КОГДА ОтчетКомиссионераОПродажахТовары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС0)
	|			ТОГДА ОтчетКомиссионераОПродажахТовары.КодТНВЭД
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.КлассификаторТНВЭД.ПустаяСсылка)
	|	КОНЕЦ КАК ТоварКодТНВЭД,
	|	ОтчетКомиссионераОПродажахТовары.Номенклатура.Код КАК ТоварКод,
	|	ОтчетКомиссионераОПродажахТовары.Номенклатура.Артикул КАК ТоварАртикул,
	|	ОтчетКомиссионераОПродажахТовары.СерияНоменклатуры.СтранаПроисхождения КАК СтранаПроисхождения,
	|	ОтчетКомиссионераОПродажахТовары.СерияНоменклатуры.СтранаПроисхождения.НаименованиеПолное КАК ПредставлениеСтраны,
	|	ОтчетКомиссионераОПродажахТовары.СерияНоменклатуры.НомерГТД КАК НомерГТД,
	|	ОтчетКомиссионераОПродажахТовары.СерияНоменклатуры.НомерГТД.Представление КАК ПредставлениеГТД,
	|	ОтчетКомиссионераОПродажахТовары.СерияНоменклатуры.НомерГТД.РегистрационныйНомер КАК РегистрационныйНомерТД,
	|	ОтчетКомиссионераОПродажахТовары.ЕдиницаИзмерения,
	|	ОтчетКомиссионераОПродажахТовары.Цена,
	|	ОтчетКомиссионераОПродажахТовары.Количество,
	|	ОтчетКомиссионераОПродажахТовары.Сумма,
	|	ОтчетКомиссионераОПродажахТовары.СтавкаНДС,
	|	ВЫБОР
	|		КОГДА ОтчетКомиссионераОПродажахТовары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК ЕстьНДС,
	|	ОтчетКомиссионераОПродажахТовары.СуммаНДС,
	|	ОтчетКомиссионераОПродажахТовары.ХарактеристикаНоменклатуры КАК Характеристика,
	|	ОтчетКомиссионераОПродажахТовары.СерияНоменклатуры КАК Серия,
	|	ОтчетКомиссионераОПродажахТовары.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код КАК ЕдиницаИзмеренияКод,
	|	ОтчетКомиссионераОПродажахТовары.СерияНоменклатуры.СтранаПроисхождения.Код КАК СтранаПроисхожденияКод,
	|	ОтчетКомиссионераОПродажахТовары.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	ВТДанныеОПокупателях КАК ДанныеОПокупателях
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОтчетКомиссионераОПродажах.Товары КАК ОтчетКомиссионераОПродажахТовары
	|		ПО ДанныеОПокупателях.КлючСтроки = ОтчетКомиссионераОПродажахТовары.КлючСтроки
	|ГДЕ
	|	ОтчетКомиссионераОПродажахТовары.Ссылка = &ДокументОснование
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Результат = Запрос.ВыполнитьПакет();
	ТаблицаШапка = Результат[1].Выгрузить();
	Шапка = ТаблицаШапка[0];
	Если Ссылка.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию Тогда
		ВыборкаСтрокТовары = Результат[2].Выбрать();
	КонецЕсли;
	
	ДанныеДляПечати = Новый Структура();
	ДанныеДляПечати.Вставить("Организация",      Шапка.Организация);
	ДанныеДляПечати.Вставить("Номер",            Ссылка.Номер);
	ДанныеДляПечати.Вставить("Дата",             Ссылка.Дата);
	ДанныеДляПечати.Вставить("НомерПРД",         Ссылка.НомерПлатежноРасчетногоДокумента);
	ДанныеДляПечати.Вставить("ДатаПРД",          Ссылка.ДатаПлатежноРасчетногоДокумента);
	ДанныеДляПечати.Вставить("Поставщик",        Шапка.Поставщик);
	ДанныеДляПечати.Вставить("Грузоотправитель", Шапка.Грузоотправитель);
	ДанныеДляПечати.Вставить("Покупатель",       Шапка.Покупатель);
	ДанныеДляПечати.Вставить("Грузополучатель",  Шапка.Грузополучатель);
	ДанныеДляПечати.Вставить("Подразделение",    Шапка.Подразделение);
	ДанныеДляПечати.Вставить("Валюта",           Шапка.Валюта);
	ДанныеДляПечати.Вставить("УчитыватьНДС",     Шапка.УчитыватьНДС);
	
	Если ТаблицаШапка.Количество() = 1 Тогда
		ДанныеДляПечати.Вставить("Покупатель",      Шапка.Покупатель);
		ДанныеДляПечати.Вставить("Грузополучатель", Шапка.Грузополучатель);
	Иначе
		ДанныеДляПечати.Вставить("Покупатель",      ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(
			ТаблицаШапка.ВыгрузитьКолонку("Покупатель")));
		ДанныеДляПечати.Вставить("Грузополучатель", ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(
			ТаблицаШапка.ВыгрузитьКолонку("Грузополучатель")));
	КонецЕсли;
	
	Руководители = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизаций(Шапка.Организация, Ссылка.Дата,);
	ДанныеДляПечати.Вставить(?(РегламентированнаяОтчетность.ЭтоПБОЮЛ(Шапка.Поставщик), "ФИОПБОЮЛ", "ФИОРуководителя"), Руководители.Руководитель);
	ДанныеДляПечати.Вставить("ФИОГлавногоБухгалтера", Руководители.ГлавныйБухгалтер);

	Товары = СоздатьТаблицуДляЗаполнениеТабличнойЧастиДанныхПечати();
	
	СчетФактураБезНДС = (ВыборкаСтрокТовары.Количество() > 0);

	Пока ВыборкаСтрокТовары.Следующий() Цикл
		
		СчетФактураБезНДС = СчетФактураБезНДС И (ВыборкаСтрокТовары.ЕстьНДС = 0);
		
		Строчка = Товары.Добавить();
		ЗаполнитьЗначенияСвойств(Строчка, ВыборкаСтрокТовары);
		Строчка.ТоварНаименование      = СокрЛП(ВыборкаСтрокТовары.ТоварНаименование) + ПредставлениеСерий(ВыборкаСтрокТовары);
		Строчка.ПредставлениеСтраны    = ?(НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.ПредставлениеСтраны), ВыборкаСтрокТовары.СтранаПроисхождения, ВыборкаСтрокТовары.ПредставлениеСтраны);
		Строчка.СуммаВключаетНДС       = Шапка.СуммаВключаетНДС;
		
	КонецЦикла;

	ДанныеДляПечати.Вставить("ТабличнаяЧасть",    Товары);
	ДанныеДляПечати.Вставить("СчетФактураБезНДС", СчетФактураБезНДС);

	Возврат ДанныеДляПечати;

КонецФункции // СобратьДанныеПоОтчетКомиссионераОПродажах()

// Функция собирает данные по документу основанию реализации и возвращает типизированную 
// структуру с данными
// 
Функция СобратьДанныеПоРеализацияТоваровУслуг(ДокОснование, Ссылка)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокОснование);
	Запрос.УстановитьПараметр("ПустойКонтрагент",  Справочники.Контрагенты.ПустаяСсылка());

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Дата КАК ДатаДокумента,
	|	РеализацияТоваровУслуг.Организация,
	|	РеализацияТоваровУслуг.Организация КАК Поставщик,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(РеализацияТоваровУслуг.Грузоотправитель, &ПустойКонтрагент) = &ПустойКонтрагент
	|			ТОГДА ""он же""
	|		ИНАЧЕ РеализацияТоваровУслуг.Грузоотправитель
	|	КОНЕЦ КАК Грузоотправитель,
	|	РеализацияТоваровУслуг.Подразделение КАК Подразделение,
	|	РеализацияТоваровУслуг.Контрагент КАК Покупатель,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(РеализацияТоваровУслуг.Грузополучатель, &ПустойКонтрагент) = &ПустойКонтрагент
	|			ТОГДА РеализацияТоваровУслуг.Контрагент
	|		ИНАЧЕ РеализацияТоваровУслуг.Грузополучатель
	|	КОНЕЦ КАК Грузополучатель,
	|	РеализацияТоваровУслуг.СуммаДокумента КАК Сумма,
	|	РеализацияТоваровУслуг.ВалютаДокумента КАК Валюта,
	|	РеализацияТоваровУслуг.УчитыватьНДС КАК УчитыватьНДС,
	|	РеализацияТоваровУслуг.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	РеализацияТоваровУслуг.АдресДоставки КАК АдресДоставки,
	|	РеализацияТоваровУслуг.ОтпускРазрешил КАК ОтпускРазрешил,
	|	РеализацияТоваровУслуг.ОтпускПроизвел КАК ОтпускПроизвел,
	|	РеализацияТоваровУслуг.ЗаРуководителяПоПриказу КАК ЗаРуководителяПоПриказу
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ДокументОснование";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокОснование);
	Запрос.УстановитьПараметр("ПустаяЕдиница", Справочники.ЕдиницыИзмерения.ПустаяСсылка());
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РеализацияТоваровУслугТовары.Номенклатура КАК Товар,
	|	ВЫРАЗИТЬ(РеализацияТоваровУслугТовары.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК ТоварНаименование,
	|	ВЫБОР
	|		КОГДА РеализацияТоваровУслугТовары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС0)
	|			ТОГДА РеализацияТоваровУслугТовары.КодТНВЭД
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.КлассификаторТНВЭД.ПустаяСсылка)
	|	КОНЕЦ КАК ТоварКодТНВЭД,
	|	РеализацияТоваровУслугТовары.Номенклатура.Код КАК ТоварКод,
	|	РеализацияТоваровУслугТовары.Номенклатура.Артикул КАК ТоварАртикул,
	|	РеализацияТоваровУслугТовары.СерияНоменклатуры.СтранаПроисхождения КАК СтранаПроисхождения,
	|	РеализацияТоваровУслугТовары.СерияНоменклатуры.СтранаПроисхождения.Наименование КАК ПредставлениеСтраны,
	|	РеализацияТоваровУслугТовары.СерияНоменклатуры.СтранаПроисхождения.Код КАК СтранаПроисхожденияКод,
	|	РеализацияТоваровУслугТовары.СерияНоменклатуры.НомерГТД КАК НомерГТД,
	|	РеализацияТоваровУслугТовары.СерияНоменклатуры.НомерГТД.Представление КАК ПредставлениеГТД,
	|	РеализацияТоваровУслугТовары.СерияНоменклатуры.НомерГТД.РегистрационныйНомер КАК РегистрационныйНомерТД,
	|	РеализацияТоваровУслугТовары.ЕдиницаИзмерения.Представление КАК ЕдиницаИзмерения,
	|	РеализацияТоваровУслугТовары.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код КАК ЕдиницаИзмеренияКод,
	|	РеализацияТоваровУслугТовары.Количество КАК Количество,
	|	ВЫБОР
	|		КОГДА РеализацияТоваровУслугТовары.ПроцентАвтоматическихСкидок <> 0
	|				ИЛИ РеализацияТоваровУслугТовары.ПроцентСкидкиНаценки <> 0
	|			ТОГДА 0
	|		ИНАЧЕ РеализацияТоваровУслугТовары.Цена
	|	КОНЕЦ КАК Цена,
	|	РеализацияТоваровУслугТовары.СтавкаНДС КАК СтавкаНДС,
	|	РеализацияТоваровУслугТовары.СуммаНДС КАК СуммаНДС,
	|	РеализацияТоваровУслугТовары.Сумма КАК Сумма,
	|	РеализацияТоваровУслугТовары.ХарактеристикаНоменклатуры КАК Характеристика,
	|	РеализацияТоваровУслугТовары.СерияНоменклатуры КАК Серия,
	|	РеализацияТоваровУслугТовары.НомерСтроки КАК НомерСтроки,
	|	ВЫБОР
	|		КОГДА РеализацияТоваровУслугТовары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК ЕстьНДС,
	|	1 КАК НомерТЧ
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	|ГДЕ
	|	РеализацияТоваровУслугТовары.Ссылка = &ДокументОснование
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РеализацияТоваровУслугУслуги.Номенклатура,
	|	ВЫРАЗИТЬ(РеализацияТоваровУслугУслуги.Содержание КАК СТРОКА(1000)),
	|	"""",
	|	РеализацияТоваровУслугУслуги.Номенклатура.Код КАК ТоварКод,
	|	РеализацияТоваровУслугУслуги.Номенклатура.Артикул КАК ТоварАртикул,
	|	"""",
	|	"""",
	|	NULL,
	|	NULL,
	|	"""",
	|	"""",
	|	РеализацияТоваровУслугУслуги.Номенклатура.ЕдиницаХраненияОстатков.Представление,
	|	РеализацияТоваровУслугУслуги.Номенклатура.ЕдиницаХраненияОстатков.ЕдиницаПоКлассификатору.Код,
	|	ВЫБОР
	|		КОГДА РеализацияТоваровУслугУслуги.Номенклатура.ЕдиницаХраненияОстатков = &ПустаяЕдиница
	|			ТОГДА 0
	|		ИНАЧЕ РеализацияТоваровУслугУслуги.Количество
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА РеализацияТоваровУслугУслуги.ПроцентАвтоматическихСкидок <> 0
	|			ТОГДА 0
	|		ИНАЧЕ РеализацияТоваровУслугУслуги.Цена
	|	КОНЕЦ,
	|	РеализацияТоваровУслугУслуги.СтавкаНДС,
	|	РеализацияТоваровУслугУслуги.СуммаНДС,
	|	РеализацияТоваровУслугУслуги.Сумма,
	|	NULL,
	|	NULL,
	|	РеализацияТоваровУслугУслуги.НомерСтроки,
	|	ВЫБОР
	|		КОГДА РеализацияТоваровУслугУслуги.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК ЕстьНДС,
	|	2
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслугУслуги
	|ГДЕ
	|	РеализацияТоваровУслугУслуги.Ссылка = &ДокументОснование
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерТЧ,
	|	НомерСтроки";
	
	ВыборкаСтрокТовары = Запрос.Выполнить().Выбрать();

	ДанныеДляПечати = Новый Структура();
	ДанныеДляПечати.Вставить("Организация",      Шапка.Организация);
	ДанныеДляПечати.Вставить("Номер",            Ссылка.Номер);
	ДанныеДляПечати.Вставить("Дата",             Ссылка.Дата);
	ДанныеДляПечати.Вставить("НомерПРД",         Ссылка.НомерПлатежноРасчетногоДокумента);
	ДанныеДляПечати.Вставить("ДатаПРД",          Ссылка.ДатаПлатежноРасчетногоДокумента);
	ДанныеДляПечати.Вставить("Поставщик",        Шапка.Поставщик);
	ДанныеДляПечати.Вставить("Грузоотправитель", Шапка.Грузоотправитель);
	ДанныеДляПечати.Вставить("Подразделение",    Шапка.Подразделение);
	ДанныеДляПечати.Вставить("Покупатель",       Шапка.Покупатель);
	ДанныеДляПечати.Вставить("Грузополучатель",  Шапка.Грузополучатель);
	ДанныеДляПечати.Вставить("Сумма",            Шапка.Сумма);
	ДанныеДляПечати.Вставить("Валюта",           Шапка.Валюта);
	ДанныеДляПечати.Вставить("УчитыватьНДС",     Шапка.УчитыватьНДС);
	ДанныеДляПечати.Вставить("АдресДоставки",	 УправлениеКонтактнойИнформацией.ПолучитьПредставлениеАдресаПоСтрока(Шапка.АдресДоставки));

	Руководители = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизаций(Шапка.Организация, Ссылка.Дата,);
	ДанныеДляПечати.Вставить(?(РегламентированнаяОтчетность.ЭтоПБОЮЛ(Шапка.Поставщик), "ФИОПБОЮЛ", "ФИОРуководителя"), Руководители.Руководитель);
	ДанныеДляПечати.Вставить("ФИОГлавногоБухгалтера", Руководители.ГлавныйБухгалтер);

	Товары = СоздатьТаблицуДляЗаполнениеТабличнойЧастиДанныхПечати();
	
	ЕстьТовары 		  = Ложь;
	ЕстьУслуги 		  = Ложь;
	СчетФактураБезНДС = (ВыборкаСтрокТовары.Количество() > 0);
	
	Пока ВыборкаСтрокТовары.Следующий() Цикл
		
		ЕстьТовары = ЕстьТовары ИЛИ (ВыборкаСтрокТовары.НомерТЧ = 1);
		ЕстьУслуги = ЕстьУслуги ИЛИ (ВыборкаСтрокТовары.НомерТЧ = 2);
		СчетФактураБезНДС = СчетФактураБезНДС И (ВыборкаСтрокТовары.ЕстьНДС = 0); 
		
		Строчка = Товары.Добавить();
		ЗаполнитьЗначенияСвойств(Строчка, ВыборкаСтрокТовары);
		Строчка.ТоварНаименование = СокрЛП(ВыборкаСтрокТовары.ТоварНаименование) + ПредставлениеСерий(ВыборкаСтрокТовары);
		Строчка.СуммаВключаетНДС  = Шапка.СуммаВключаетНДС;
		Строчка.СтавкаНДС         = ?(Шапка.УчитыватьНДС, ВыборкаСтрокТовары.СтавкаНДС, Перечисления.СтавкиНДС.БезНДС);
		
	КонецЦикла;

	ДанныеДляПечати.Вставить("ТабличнаяЧасть", 		Товары);
	ДанныеДляПечати.Вставить("СчетФактураБезНДС", 	СчетФактураБезНДС);
	
	// Параметры для универсального передаточного документа: ФИО и должность того, кто передал товар/сдал услуги, результаты работ, права
	Если ЕстьТовары И ЗначениеЗаполнено(Шапка.ОтпускПроизвел) Тогда
		ДанныеДляПечати.Вставить("КладовщикДляУПД", 				Шапка.ОтпускПроизвел);
		ДанныеДляПечати.Вставить("ДатаДокументаДляУПД", 			Шапка.ДатаДокумента);
		ДанныеДляПечати.Вставить("ЗаКладовщикаПоПриказуДляУПД", 	Неопределено)
	ИначеЕсли ЕстьУслуги Тогда
		Если ЗначениеЗаполнено(Шапка.ОтпускРазрешил) Тогда
			ДанныеДляПечати.Вставить("КладовщикДляУПД", 			Шапка.ОтпускРазрешил);
			ДанныеДляПечати.Вставить("ДатаДокументаДляУПД", 		Шапка.ДатаДокумента);
			ДанныеДляПечати.Вставить("ЗаКладовщикаПоПриказуДляУПД", Шапка.ЗаРуководителяПоПриказу)
		Иначе	
			ДанныеДляПечати.Вставить("ФИОКладовщика", 				Руководители.Руководитель);
			ДанныеДляПечати.Вставить("ДолжностьКладовщика", 		Руководители.РуководительДолжность);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ДанныеДляПечати;

КонецФункции // СобратьДанныеПоРеализацияТоваровУслуг()

Функция СобратьДанныеПоАкту(ДокОснование, Ссылка)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокОснование);

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	АктОбОказанииПроизводственныхУслуг.Дата КАК ДатаДокумента,
	|	АктОбОказанииПроизводственныхУслуг.Организация,
	|	АктОбОказанииПроизводственныхУслуг.Организация КАК Поставщик,
	|	АктОбОказанииПроизводственныхУслуг.Подразделение КАК Подразделение,
	|	АктОбОказанииПроизводственныхУслуг.Контрагент КАК Покупатель,
	|	АктОбОказанииПроизводственныхУслуг.СуммаДокумента КАК Сумма,
	|	АктОбОказанииПроизводственныхУслуг.ВалютаДокумента КАК Валюта,
	|	АктОбОказанииПроизводственныхУслуг.УчитыватьНДС КАК УчитыватьНДС,
	|	АктОбОказанииПроизводственныхУслуг.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	АктОбОказанииПроизводственныхУслуг.Исполнитель КАК Исполнитель,
	|	АктОбОказанииПроизводственныхУслуг.ИсполнительПоПриказу КАК ИсполнительПоПриказу
	|ИЗ
	|	Документ.АктОбОказанииПроизводственныхУслуг КАК АктОбОказанииПроизводственныхУслуг
	|ГДЕ
	|	АктОбОказанииПроизводственныхУслуг.Ссылка = &ДокументОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АктОбОказанииПроизводственныхУслуг.Ссылка,
	|	АктОбОказанииПроизводственныхУслуг.НомерСтроки КАК НомерСтроки,
	|	АктОбОказанииПроизводственныхУслуг.Количество,
	|	АктОбОказанииПроизводственныхУслуг.Номенклатура КАК Товар,
	|	АктОбОказанииПроизводственныхУслуг.ВесовойКоэффициент,
	|	ВЫБОР
	|		КОГДА АктОбОказанииПроизводственныхУслуг.ПроцентСкидкиНаценки <> 0
	|			ТОГДА 0
	|		ИНАЧЕ АктОбОказанииПроизводственныхУслуг.Цена
	|	КОНЕЦ КАК Цена,
	|	АктОбОказанииПроизводственныхУслуг.Сумма,
	|	АктОбОказанииПроизводственныхУслуг.СтавкаНДС,
	|	ВЫБОР
	|		КОГДА АктОбОказанииПроизводственныхУслуг.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК ЕстьНДС,
	|	АктОбОказанииПроизводственныхУслуг.СуммаНДС,
	|	АктОбОказанииПроизводственныхУслуг.ЕдиницаИзмерения,
	|	АктОбОказанииПроизводственныхУслуг.Коэффициент,
	|	АктОбОказанииПроизводственныхУслуг.НоменклатурнаяГруппа,
	|	&СтрокаВыборкиПоляСодержания,
	|	АктОбОказанииПроизводственныхУслуг.Номенклатура.ЕдиницаХраненияОстатков.Представление КАК ЕдиницаИзмерения,
	|	АктОбОказанииПроизводственныхУслуг.Номенклатура.ЕдиницаХраненияОстатков.ЕдиницаПоКлассификатору.Код КАК ЕдиницаИзмеренияКод,
	|	АктОбОказанииПроизводственныхУслуг.Номенклатура.Код КАК ТоварКод,
	|	АктОбОказанииПроизводственныхУслуг.Номенклатура.Артикул КАК ТоварАртикул,
	|	"""" КАК СтранаПроисхождения,
	|	"""" КАК СтранаПроисхожденияКод,
	|	"""" КАК ПредставлениеСтраны
	|ИЗ
	|	Документ.АктОбОказанииПроизводственныхУслуг.Услуги КАК АктОбОказанииПроизводственныхУслуг
	|ГДЕ
	|	АктОбОказанииПроизводственныхУслуг.Ссылка = &ДокументОснование
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";

	СтрокаВыборкиПоляСодержания = ОбработкаТабличныхЧастей.ПолучитьЧастьЗапросаДляВыбораСодержания("", "ТоварНаименование");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&СтрокаВыборкиПоляСодержания,", СтрокаВыборкиПоляСодержания + ",");
	Запрос.Текст = ТекстЗапроса;
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	Шапка = РезультатыЗапроса[0].Выбрать();
	Шапка.Следующий();
	ВыборкаСтрокТовары = РезультатыЗапроса[1].Выбрать();

	ДанныеДляПечати = Новый Структура();
	ДанныеДляПечати.Вставить("Организация",      Шапка.Организация);
	ДанныеДляПечати.Вставить("Номер",            Ссылка.Номер);
	ДанныеДляПечати.Вставить("Дата",             Ссылка.Дата);
	ДанныеДляПечати.Вставить("НомерПРД",         Ссылка.НомерПлатежноРасчетногоДокумента);
	ДанныеДляПечати.Вставить("ДатаПРД",          Ссылка.ДатаПлатежноРасчетногоДокумента);
	ДанныеДляПечати.Вставить("Поставщик",        Шапка.Поставщик);
	ДанныеДляПечати.Вставить("Грузоотправитель", );
	ДанныеДляПечати.Вставить("Подразделение",    Шапка.Подразделение);
	ДанныеДляПечати.Вставить("Покупатель",       Шапка.Покупатель);
	ДанныеДляПечати.Вставить("Грузополучатель",  );
	ДанныеДляПечати.Вставить("Сумма",            Шапка.Сумма);
	ДанныеДляПечати.Вставить("Валюта",           Шапка.Валюта);
	ДанныеДляПечати.Вставить("УчитыватьНДС",     Шапка.УчитыватьНДС);

	Руководители = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизаций(Шапка.Организация, Ссылка.Дата);
	ДанныеДляПечати.Вставить(?(РегламентированнаяОтчетность.ЭтоПБОЮЛ(Шапка.Поставщик), "ФИОПБОЮЛ", "ФИОРуководителя"), Руководители.Руководитель);
	ДанныеДляПечати.Вставить("ФИОГлавногоБухгалтера", Руководители.ГлавныйБухгалтер);

	Товары = СоздатьТаблицуДляЗаполнениеТабличнойЧастиДанныхПечати();
	
	СчетФактураБезНДС = (ВыборкаСтрокТовары.Количество() > 0);

	Пока ВыборкаСтрокТовары.Следующий() Цикл
		
		СчетФактураБезНДС = СчетФактураБезНДС И (ВыборкаСтрокТовары.ЕстьНДС = 0); 
		
		Строчка = Товары.Добавить();
		ЗаполнитьЗначенияСвойств(Строчка, ВыборкаСтрокТовары);
		Строчка.СуммаВключаетНДС = Шапка.СуммаВключаетНДС;
		
	КонецЦикла;

	ДанныеДляПечати.Вставить("ТабличнаяЧасть", 		Товары);
	ДанныеДляПечати.Вставить("СчетФактураБезНДС",	СчетФактураБезНДС);
	
	// Параметры для универсального передаточного документа: ФИО и должность того, кто передал товар/сдал услуги, результаты работ, права
	Если ЗначениеЗаполнено(Шапка.Исполнитель) Тогда
		ДанныеДляПечати.Вставить("КладовщикДляУПД", 				Шапка.Исполнитель);
		ДанныеДляПечати.Вставить("ДатаДокументаДляУПД", 			Шапка.ДатаДокумента);
		ДанныеДляПечати.Вставить("ЗаКладовщикаПоПриказуДляУПД", 	Шапка.ИсполнительПоПриказу)
	КонецЕсли;
	
	Возврат ДанныеДляПечати;

КонецФункции

// Функция собирает данные по документу основанию ПередачаОС и возвращает типизированную 
// структуру с данными
// 
Функция СобратьДанныеПоПередачеОС(ДокОснование, Ссылка)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокОснование);
    Запрос.УстановитьПараметр("ПустойКонтрагент", Справочники.Контрагенты.ПустаяСсылка());
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Организация,
	|	Организация КАК Поставщик,
	|	ВЫБОР 
	|		КОГДА ЕСТЬNULL(Грузоотправитель, &ПустойКонтрагент) = &ПустойКонтрагент
	|			ТОГДА ""он же"" 
	|		ИНАЧЕ Грузоотправитель
	|	КОНЕЦ КАК Грузоотправитель,
	|	Подразделение КАК Подразделение,
	|	Контрагент  КАК Покупатель,
	|	ВЫБОР 
	|		КОГДА ЕСТЬNULL(Грузополучатель, &ПустойКонтрагент) = &ПустойКонтрагент
	|			ТОГДА Контрагент 
	|		ИНАЧЕ Грузополучатель 
	|	КОНЕЦ КАК Грузополучатель,
	|	СуммаДокумента   КАК Сумма,
	|	ВалютаДокумента  КАК Валюта,
	|	УчитыватьНДС     КАК УчитыватьНДС,
	|	СуммаВключаетНДС КАК СуммаВключаетНДС
	|ИЗ
	|	Документ.ПередачаОС КАК ПередачаОС
	|
	|ГДЕ
	|	ПередачаОС.Ссылка = &ДокументОснование";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокОснование);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаОС.ОсновноеСредство КАК Товар,
	|	ВЫРАЗИТЬ(ТаблицаОС.ОсновноеСредство.НаименованиеПолное КАК СТРОКА(1000)) КАК ТоварНаименование,
	|	ТаблицаОС.ОсновноеСредство.Код КАК ТоварКод,
	|	"""" КАК ТоварАртикул,
	|	ТаблицаОС.СтавкаНДС КАК СтавкаНДС,
	|	ВЫБОР
	|		КОГДА ТаблицаОС.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК ЕстьНДС,
	|	ТаблицаОС.СуммаНДС КАК СуммаНДС,
	|	ТаблицаОС.Сумма КАК Сумма,
	|	ТаблицаОС.НомерСтроки КАК НомерСтроки,
	|	ВЫБОР
	|		КОГДА ТаблицаОС.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС0)
	|			ТОГДА ТаблицаОС.КодТНВЭД
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.КлассификаторТНВЭД.ПустаяСсылка)
	|	КОНЕЦ КАК ТоварКодТНВЭД
	|ИЗ
	|	Документ.ПередачаОС.ОС КАК ТаблицаОС
	|ГДЕ
	|	ТаблицаОС.Ссылка = &ДокументОснование
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";    	
	
	ВыборкаСтрокТовары = Запрос.Выполнить().Выбрать();

	ДанныеДляПечати = Новый Структура();
	ДанныеДляПечати.Вставить("Организация",      Шапка.Организация);
	ДанныеДляПечати.Вставить("Номер",            Ссылка.Номер);
	ДанныеДляПечати.Вставить("Дата",             Ссылка.Дата);
	ДанныеДляПечати.Вставить("НомерПРД",         Ссылка.НомерПлатежноРасчетногоДокумента);
	ДанныеДляПечати.Вставить("ДатаПРД",          Ссылка.ДатаПлатежноРасчетногоДокумента);
	ДанныеДляПечати.Вставить("Поставщик",        Шапка.Поставщик);
	ДанныеДляПечати.Вставить("Грузоотправитель", Шапка.Грузоотправитель);
	ДанныеДляПечати.Вставить("Подразделение",    Шапка.Подразделение);
	ДанныеДляПечати.Вставить("Покупатель",       Шапка.Покупатель);
	ДанныеДляПечати.Вставить("Грузополучатель",  Шапка.Грузополучатель);
	ДанныеДляПечати.Вставить("Сумма",            Шапка.Сумма);
	ДанныеДляПечати.Вставить("Валюта",           Шапка.Валюта);
	ДанныеДляПечати.Вставить("УчитыватьНДС",     Шапка.УчитыватьНДС);

	Руководители = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизаций(Шапка.Организация, Ссылка.Дата,);
	ДанныеДляПечати.Вставить(?(РегламентированнаяОтчетность.ЭтоПБОЮЛ(Шапка.Поставщик), "ФИОПБОЮЛ", "ФИОРуководителя"), Руководители.Руководитель);
	ДанныеДляПечати.Вставить("ФИОГлавногоБухгалтера", Руководители.ГлавныйБухгалтер);

	Товары = СоздатьТаблицуДляЗаполнениеТабличнойЧастиДанныхПечати();
	
	СчетФактураБезНДС 	= (ВыборкаСтрокТовары.Количество() > 0);
                                                        
	Пока ВыборкаСтрокТовары.Следующий() Цикл
		
		СчетФактураБезНДС = СчетФактураБезНДС И (ВыборкаСтрокТовары.ЕстьНДС = 0); 
		
		Строчка = Товары.Добавить();
		ЗаполнитьЗначенияСвойств(Строчка, ВыборкаСтрокТовары);
		Строчка.Количество          = 1;
		Строчка.СуммаВключаетНДС	= Шапка.СуммаВключаетНДС;
		Строчка.Цена                = ВыборкаСтрокТовары.Сумма;
		
	КонецЦикла;

	ДанныеДляПечати.Вставить("ТабличнаяЧасть", 		Товары);
	ДанныеДляПечати.Вставить("СчетФактураБезНДС", 	СчетФактураБезНДС); 

	Возврат ДанныеДляПечати;

КонецФункции // СобратьДанныеПоПередачеОС()

// Функция собирает данные по документу основанию ПередачаНМАОрганизаций и возвращает типизированную 
// структуру с данными
// 
Функция СобратьДанныеПоПередачеНМАОрганизаций(ДокОснование, Ссылка)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокОснование);

	Запрос.Текст = "ВЫБРАТЬ
	               |	ПередачаНМА.Организация,
	               |	ПередачаНМА.Организация КАК Поставщик,
	               |	ПередачаНМА.Контрагент КАК Покупатель,
	               |	ПередачаНМА.СуммаДокумента КАК СуммаДокумента,
	               |	ПередачаНМА.ВалютаДокумента КАК Валюта,
	               |	ПередачаНМА.УчитыватьНДС КАК УчитыватьНДС,
				   |	ПередачаНМА.СуммаВключаетНДС КАК СуммаВключаетНДС,
				   |	ПередачаНМА.НематериальныйАктив КАК Товар,
				   |	ВЫРАЗИТЬ(ПередачаНМА.НематериальныйАктив.НаименованиеПолное КАК СТРОКА(1000)) КАК ТоварНаименование,
				   |	ПередачаНМА.НематериальныйАктив.Код КАК ТоварКод,
				   |	ПередачаНМА.СтавкаНДС КАК СтавкаНДС,
				   |	ВЫБОР
				   |		КОГДА ПередачаНМА.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
				   |			ТОГДА 0
				   |		ИНАЧЕ 1
				   |	КОНЕЦ КАК ЕстьНДС,
				   |	ПередачаНМА.СуммаНДС КАК СуммаНДС,
				   |	ПередачаНМА.Сумма КАК Сумма
				   |ИЗ
				   |	Документ.ПередачаНМА КАК ПередачаНМА
				   |ГДЕ
				   |	ПередачаНМА.Ссылка = &ДокументОснование";
				   
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	
	ДанныеДляПечати = Новый Структура();
	ДанныеДляПечати.Вставить("Организация",      	Шапка.Организация);
	ДанныеДляПечати.Вставить("Номер",            	Ссылка.Номер);
	ДанныеДляПечати.Вставить("Дата",             	Ссылка.Дата);
	ДанныеДляПечати.Вставить("НомерПРД",         	Ссылка.НомерПлатежноРасчетногоДокумента);
	ДанныеДляПечати.Вставить("ДатаПРД",          	Ссылка.ДатаПлатежноРасчетногоДокумента);
	ДанныеДляПечати.Вставить("Поставщик",        	Шапка.Поставщик);
	ДанныеДляПечати.Вставить("Грузоотправитель", 	Неопределено);
	ДанныеДляПечати.Вставить("Подразделение",    	"");
	ДанныеДляПечати.Вставить("Покупатель",       	Шапка.Покупатель);
	ДанныеДляПечати.Вставить("Грузополучатель",  	Неопределено);
	ДанныеДляПечати.Вставить("Сумма",            	Шапка.СуммаДокумента);
	ДанныеДляПечати.Вставить("Валюта",           	Шапка.Валюта);
	ДанныеДляПечати.Вставить("УчитыватьНДС",     	Шапка.УчитыватьНДС);
	ДанныеДляПечати.Вставить("СчетФактураБезНДС", 	(Шапка.ЕстьНДС = 0)); 

	Руководители = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизаций(Шапка.Организация, Ссылка.Дата,);
	ДанныеДляПечати.Вставить(?(РегламентированнаяОтчетность.ЭтоПБОЮЛ(Шапка.Поставщик), "ФИОПБОЮЛ", "ФИОРуководителя"), Руководители.Руководитель);
	ДанныеДляПечати.Вставить("ФИОГлавногоБухгалтера", Руководители.ГлавныйБухгалтер);

	Товары = СоздатьТаблицуДляЗаполнениеТабличнойЧастиДанныхПечати();

	Строчка = Товары.Добавить();
	Строчка.Товар                  = Шапка.Товар;
	Строчка.ТоварНаименование      = Шапка.ТоварНаименование;
	Строчка.ТоварКод               = Шапка.ТоварКод;
	Строчка.ТоварАртикул           = "";
	Строчка.СтранаПроисхождения    = "";
	Строчка.ПредставлениеСтраны    = "";
	Строчка.НомерГТД               = "";
	Строчка.ПредставлениеГТД       = "";
	Строчка.РегистрационныйНомерТД = "";
	Строчка.Количество             = 1;
	Строчка.ЕдиницаИзмерения       = "";
	Строчка.СуммаВключаетНДС       = Шапка.СуммаВключаетНДС;
	Строчка.Цена                   = Шапка.Сумма;
	Строчка.Сумма                  = Шапка.Сумма;
	Строчка.СуммаНДС               = Шапка.СуммаНДС;
	Строчка.СтавкаНДС              = Шапка.СтавкаНДС;

	ДанныеДляПечати.Вставить("ТабличнаяЧасть", Товары);

	Возврат ДанныеДляПечати;

КонецФункции // СобратьДанныеПоПередачеОС()

// Функция собирает данные по документу основанию реализации и возвращает типизированную 
// структуру с данными
// 
Функция СобратьДанныеПоРеализацияУслугПоПереработке(ДокОснование, Ссылка)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокОснование);

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РеализацияУслугПоПереработке.Дата КАК ДатаДокумента,
	|	РеализацияУслугПоПереработке.Организация,
	|	РеализацияУслугПоПереработке.Организация КАК Поставщик,
	|	РеализацияУслугПоПереработке.Подразделение КАК Подразделение,
	|	РеализацияУслугПоПереработке.Контрагент КАК Покупатель,
	|	РеализацияУслугПоПереработке.СуммаДокумента КАК Сумма,
	|	РеализацияУслугПоПереработке.ВалютаДокумента КАК Валюта,
	|	РеализацияУслугПоПереработке.УчитыватьНДС КАК УчитыватьНДС,
	|	РеализацияУслугПоПереработке.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	РеализацияУслугПоПереработке.Исполнитель КАК Исполнитель,
	|	РеализацияУслугПоПереработке.ИсполнительПоПриказу КАК ИсполнительПоПриказу
	|ИЗ
	|	Документ.РеализацияУслугПоПереработке КАК РеализацияУслугПоПереработке
	|ГДЕ
	|	РеализацияУслугПоПереработке.Ссылка = &ДокументОснование";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокОснование);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РеализацияУслугПоПереработке.Номенклатура КАК Товар,
	|	ВЫРАЗИТЬ(РеализацияУслугПоПереработке.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК ТоварНаименование,
	|	РеализацияУслугПоПереработке.Номенклатура.Код КАК ТоварКод,
	|	РеализацияУслугПоПереработке.Номенклатура.Артикул КАК ТоварАртикул,
	|	NULL КАК СтранаПроисхождения,
	|	"""" КАК СтранаПроисхожденияКод,
	|	"""" КАК ПредставлениеСтраны,
	|	РеализацияУслугПоПереработке.ЕдиницаИзмерения.Представление КАК ЕдиницаИзмерения,
	|	РеализацияУслугПоПереработке.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код КАК ЕдиницаИзмеренияКод,
	|	NULL КАК НомерГТД,
	|	NULL КАК ПредставлениеГТД,
	|	РеализацияУслугПоПереработке.Количество КАК Количество,
	|	ВЫБОР
	|		КОГДА РеализацияУслугПоПереработке.ПроцентСкидкиНаценки <> 0
	|			ТОГДА 0
	|		ИНАЧЕ РеализацияУслугПоПереработке.Цена
	|	КОНЕЦ КАК Цена,
	|	РеализацияУслугПоПереработке.СтавкаНДС КАК СтавкаНДС,
	|	ВЫБОР
	|		КОГДА РеализацияУслугПоПереработке.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК ЕстьНДС,
	|	РеализацияУслугПоПереработке.СуммаНДС КАК СуммаНДС,
	|	РеализацияУслугПоПереработке.Сумма КАК Сумма,
	|	РеализацияУслугПоПереработке.ХарактеристикаНоменклатуры КАК Характеристика,
	|	РеализацияУслугПоПереработке.СерияНоменклатуры КАК Серия,
	|	РеализацияУслугПоПереработке.НомерСтроки КАК НомерСтроки,
	|	1 КАК НомерТЧ
	|ИЗ
	|	Документ.РеализацияУслугПоПереработке.Продукция КАК РеализацияУслугПоПереработке
	|ГДЕ
	|	РеализацияУслугПоПереработке.Ссылка = &ДокументОснование
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РеализацияУслугПоПереработке.Номенклатура,
	|	ВЫРАЗИТЬ(РеализацияУслугПоПереработке.Содержание КАК СТРОКА(1000)),
	|	РеализацияУслугПоПереработке.Номенклатура.Код,
	|	РеализацияУслугПоПереработке.Номенклатура.Артикул,
	|	NULL,
	|	"""",
	|	"""",
	|	РеализацияУслугПоПереработке.Номенклатура.ЕдиницаХраненияОстатков.Представление,
	|	РеализацияУслугПоПереработке.Номенклатура.ЕдиницаХраненияОстатков.ЕдиницаПоКлассификатору.Код,
	|	NULL,
	|	"""",
	|	РеализацияУслугПоПереработке.Количество,
	|	РеализацияУслугПоПереработке.Цена,
	|	РеализацияУслугПоПереработке.СтавкаНДС,
	|	ВЫБОР
	|		КОГДА РеализацияУслугПоПереработке.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ,
	|	РеализацияУслугПоПереработке.СуммаНДС,
	|	РеализацияУслугПоПереработке.Сумма,
	|	NULL,
	|	NULL,
	|	РеализацияУслугПоПереработке.НомерСтроки,
	|	2
	|ИЗ
	|	Документ.РеализацияУслугПоПереработке.Услуги КАК РеализацияУслугПоПереработке
	|ГДЕ
	|	РеализацияУслугПоПереработке.Ссылка = &ДокументОснование
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерТЧ,
	|	НомерСтроки";
	
	
	ВыборкаСтрокТовары = Запрос.Выполнить().Выбрать();

	ДанныеДляПечати = Новый Структура();
	ДанныеДляПечати.Вставить("Организация",      Шапка.Организация);
	ДанныеДляПечати.Вставить("Номер",            Ссылка.Номер);
	ДанныеДляПечати.Вставить("Дата",             Ссылка.Дата);
	ДанныеДляПечати.Вставить("НомерПРД",         Ссылка.НомерПлатежноРасчетногоДокумента);
	ДанныеДляПечати.Вставить("ДатаПРД",          Ссылка.ДатаПлатежноРасчетногоДокумента);
	ДанныеДляПечати.Вставить("Поставщик",        Шапка.Поставщик);
	ДанныеДляПечати.Вставить("Грузоотправитель", );
	ДанныеДляПечати.Вставить("Подразделение",    Шапка.Подразделение);
	ДанныеДляПечати.Вставить("Покупатель",       Шапка.Покупатель);
	ДанныеДляПечати.Вставить("Грузополучатель",  );
	ДанныеДляПечати.Вставить("Сумма",            Шапка.Сумма);
	ДанныеДляПечати.Вставить("Валюта",           Шапка.Валюта);
	ДанныеДляПечати.Вставить("УчитыватьНДС",     Шапка.УчитыватьНДС);

	Руководители = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизаций(Шапка.Организация, Ссылка.Дата,);
	ДанныеДляПечати.Вставить(?(РегламентированнаяОтчетность.ЭтоПБОЮЛ(Шапка.Поставщик), "ФИОПБОЮЛ", "ФИОРуководителя"), Руководители.Руководитель);
	ДанныеДляПечати.Вставить("ФИОГлавногоБухгалтера", Руководители.ГлавныйБухгалтер);

	Товары = СоздатьТаблицуДляЗаполнениеТабличнойЧастиДанныхПечати();
	
	СчетФактураБезНДС = (ВыборкаСтрокТовары.Количество() > 0);

	Пока ВыборкаСтрокТовары.Следующий() Цикл
		
		СчетФактураБезНДС = СчетФактураБезНДС И (ВыборкаСтрокТовары.ЕстьНДС = 0); 
		
		Строчка = Товары.Добавить();
		ЗаполнитьЗначенияСвойств(Строчка, ВыборкаСтрокТовары);
		Строчка.ТоварНаименование = СокрЛП(ВыборкаСтрокТовары.ТоварНаименование) + ПредставлениеСерий(ВыборкаСтрокТовары);
		Строчка.СуммаВключаетНДС  = Шапка.СуммаВключаетНДС;
		
	КонецЦикла;

	ДанныеДляПечати.Вставить("ТабличнаяЧасть", 		Товары);
	ДанныеДляПечати.Вставить("СчетФактураБезНДС", 	СчетФактураБезНДС);
	
	// Параметры для универсального передаточного документа: ФИО и должность того, кто передал товар/сдал услуги, результаты работ, права
	Если ЗначениеЗаполнено(Шапка.Исполнитель) Тогда
		ДанныеДляПечати.Вставить("КладовщикДляУПД", 				Шапка.Исполнитель);
		ДанныеДляПечати.Вставить("ДатаДокументаДляУПД", 			Шапка.ДатаДокумента);
		ДанныеДляПечати.Вставить("ЗаКладовщикаПоПриказуДляУПД", 	Шапка.ИсполнительПоПриказу)
	КонецЕсли;
	
	Возврат ДанныеДляПечати;

КонецФункции // СобратьДанныеПоРеализацияУслугПоПереработке()

// Функция собирает данные по документу основанию НачислениеНДСпоСМРхозспособом и возвращает типизированную 
// структуру с данными
// 
Функция СобратьДанныеПоНачислениеНДСпоСМРхозспособом(ДокОснование, Ссылка)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокОснование);
	Запрос.УстановитьПараметр("ВидСвязиОрг", Перечисления.ВидыСобственныхКонтрагентов.Организация);

	Запрос.Текст = "
	|ВЫБРАТЬ
	|	НачислениеНДСпоСМРхозспособом.Организация,
	|	НачислениеНДСпоСМРхозспособом.Организация              	КАК Поставщик,
	|	СобственныеКонтрагенты.Контрагент	   		КАК Покупатель,
	|	Константы.ВалютаРегламентированногоУчета	КАК ВалютаДокумента,
	|	ИСТИНА                                   	КАК УчитыватьНДС,
	|	ЛОЖЬ                                      	КАК СуммаВключаетНДС
	|ИЗ
	|	Документ.НачислениеНДСпоСМРхозспособом КАК НачислениеНДСпоСМРхозспособом
	|		ЛЕВОЕ СОЕДИНЕНИЕ 
	|			РегистрСведений.СобственныеКонтрагенты КАК СобственныеКонтрагенты
	|		ПО 
	|			НачислениеНДСпоСМРхозспособом.Организация = СобственныеКонтрагенты.Объект
	|			И СобственныеКонтрагенты.ВидСвязи = &ВидСвязиОрг,
	|	Константы КАК Константы
	|ГДЕ
	|	НачислениеНДСпоСМРхозспособом.Ссылка = &ДокументОснование";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НачислениеНДСпоСМРхозспособомСМРхозспособом.ОбъектСтроительства КАК Товар,
	|	ВЫРАЗИТЬ(НачислениеНДСпоСМРхозспособомСМРхозспособом.ОбъектСтроительства.Наименование КАК СТРОКА(1000)) КАК ТоварНаименование,
	|	НачислениеНДСпоСМРхозспособомСМРхозспособом.СуммаБезНДС КАК Сумма,
	|	НачислениеНДСпоСМРхозспособомСМРхозспособом.СтавкаНДС,
	|	НачислениеНДСпоСМРхозспособомСМРхозспособом.НДС КАК СуммаНДС,
	|	НачислениеНДСпоСМРхозспособомСМРхозспособом.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	Документ.НачислениеНДСпоСМРхозспособом.СМРхозспособом КАК НачислениеНДСпоСМРхозспособомСМРхозспособом
	|ГДЕ
	|	НачислениеНДСпоСМРхозспособомСМРхозспособом.Ссылка = &ДокументОснование
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	РезультатЗапросаТовары = Запрос.Выполнить();

	ДанныеДляПечати = Новый Структура();
	ДанныеДляПечати.Вставить("Организация",      Шапка.Организация);
	ДанныеДляПечати.Вставить("Номер",            Ссылка.Номер);
	ДанныеДляПечати.Вставить("Дата",             Ссылка.Дата);
	ДанныеДляПечати.Вставить("НомерПРД",         "");
	ДанныеДляПечати.Вставить("ДатаПРД",          "");
	ДанныеДляПечати.Вставить("Поставщик",        Шапка.Поставщик);
	ДанныеДляПечати.Вставить("Грузоотправитель", );
	ДанныеДляПечати.Вставить("Подразделение",    "");
	ДанныеДляПечати.Вставить("Покупатель",       ?(НЕ ЗначениеЗаполнено(Шапка.Покупатель), Шапка.Организация, Шапка.Покупатель));
	ДанныеДляПечати.Вставить("Грузополучатель",  );
	ДанныеДляПечати.Вставить("Валюта",           Шапка.ВалютаДокумента);
	ДанныеДляПечати.Вставить("УчитыватьНДС",     Шапка.УчитыватьНДС);

	Руководители = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизаций(Шапка.Организация, Ссылка.Дата,);
	ДанныеДляПечати.Вставить(?(РегламентированнаяОтчетность.ЭтоПБОЮЛ(Шапка.Поставщик), "ФИОПБОЮЛ", "ФИОРуководителя"), Руководители.Руководитель);
	ДанныеДляПечати.Вставить("ФИОГлавногоБухгалтера", Руководители.ГлавныйБухгалтер);

	Товары = СоздатьТаблицуДляЗаполнениеТабличнойЧастиДанныхПечати();

	ВыборкаСтрокТовары = РезультатЗапросаТовары.Выбрать();
	
	Если ВыборкаСтрокТовары.Количество() = 0 Тогда
		ДанныеДляПечати.Вставить("ТабличнаяЧасть", Товары);
		Возврат ДанныеДляПечати;
	КонецЕсли;
	
	Пока ВыборкаСтрокТовары.Следующий() Цикл
		Строчка = Товары.Добавить();
		ЗаполнитьЗначенияСвойств(Строчка, ВыборкаСтрокТовары);
		Строчка.ТоварНаименование   = "Строительно-монтажные работы для собственного потребления: " + ВыборкаСтрокТовары.ТоварНаименование;
		Строчка.СуммаВключаетНДС	= Шапка.СуммаВключаетНДС;
	КонецЦикла;

	ДанныеДляПечати.Вставить("ТабличнаяЧасть", Товары);

	Возврат ДанныеДляПечати;

КонецФункции // СобратьДанныеПоМодернизацияОС()

Функция СобратьДанныеСФнаАвансИСуммовуюРазницу(Ссылка)
	
	Если Не (Ссылка.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАванс
		или Ссылка.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитента
		или Ссылка.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаСуммовуюРазницу) 
		Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	мНадписьПредоплата = ?(Ссылка.Дата >= '20060101', "Предварительная оплата", "Авансовый платеж");
	НадписьНаименование = ?(Ссылка.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАванс
							ИЛИ Ссылка.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитента, мНадписьПредоплата, "Суммы, связанные с расчетами по оплате (ст. 162 НК РФ)");
	
	Запрос = Новый Запрос;
 	Запрос.УстановитьПараметр("Ссылка", Ссылка);
 	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета", Константы.ВалютаРегламентированногоУчета.Получить());
	НаАванс = Ссылка.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАванс;
	Запрос.УстановитьПараметр("НаАванс", НаАванс);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	СчетФактураВыданный.Организация,
	|	ВЫБОР
	|		КОГДА СчетФактураВыданный.Исправление
	|			ТОГДА СчетФактураВыданный.НомерИсходногоДокумента
	|		ИНАЧЕ СчетФактураВыданный.Номер
	|	КОНЕЦ КАК Номер,
	|	ВЫБОР
	|		КОГДА СчетФактураВыданный.Исправление
	|			ТОГДА СчетФактураВыданный.ДатаИсходногоДокумента
	|		ИНАЧЕ СчетФактураВыданный.Дата
	|	КОНЕЦ КАК Дата,
	|	СчетФактураВыданный.Организация КАК Поставщик,
	|	ВЫБОР
	|		КОГДА &НаАванс
	|			ТОГДА ЕСТЬNULL(СчетФактураСводныйАвансы.Контрагент, СчетФактураВыданный.Контрагент)
	|		ИНАЧЕ СчетФактураВыданный.Контрагент
	|	КОНЕЦ КАК Покупатель,
	|	&ВалютаРегламентированногоУчета КАК Валюта,
	|	ЕСТЬNULL(СчетФактураСводныйАвансы.Сумма, СчетФактураВыданный.Сумма) КАК Сумма,
	|	ЕСТЬNULL(СчетФактураСводныйАвансы.СуммаНДС, СчетФактураВыданный.СуммаНДС) КАК СуммаНДС,
	|	ЕСТЬNULL(СчетФактураСводныйАвансы.СтавкаНДС, СчетФактураВыданный.СтавкаНДС) КАК СтавкаНДС
	|ИЗ
	|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный.Авансы КАК СчетФактураСводныйАвансы
	|		ПО СчетФактураВыданный.Ссылка = СчетФактураСводныйАвансы.Ссылка
	|			И (СчетФактураВыданный.СводныйКомиссионный)
	|			И (&НаАванс)
	|ГДЕ
	|	СчетФактураВыданный.Ссылка = &Ссылка";
	
	ТаблицаШапка = Запрос.Выполнить().Выгрузить();
	Шапка        = ТаблицаШапка[0];
	
	Если НаАванс И ТаблицаШапка.Количество() > 1 Тогда
		Поставщик = Шапка.Поставщик;
		Покупатель = ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(ТаблицаШапка.ВыгрузитьКолонку("Покупатель"));
	Иначе
		Поставщик = Шапка.Поставщик;
		Покупатель = Шапка.Покупатель;
	КонецЕсли;

	ДанныеДляПечати = Новый Структура();
	ДанныеДляПечати.Вставить("Организация",      Шапка.Организация);
	ДанныеДляПечати.Вставить("Номер",            Шапка.Номер);
	ДанныеДляПечати.Вставить("Дата",             Шапка.Дата);
	ДанныеДляПечати.Вставить("Поставщик",        Поставщик);
	ДанныеДляПечати.Вставить("Грузоотправитель", );
	ДанныеДляПечати.Вставить("Покупатель",       Покупатель);
	ДанныеДляПечати.Вставить("Грузополучатель",  );
	ДанныеДляПечати.Вставить("Сумма",            Шапка.Сумма);
	ДанныеДляПечати.Вставить("Валюта",           Шапка.Валюта);
	ДанныеДляПечати.Вставить("УчитыватьНДС",     Истина);
	ДанныеДляПечати.Вставить("СуммаВключаетНДС", Истина);

	Руководители = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизаций(Шапка.Организация, Ссылка.Дата,);
	ДанныеДляПечати.Вставить(?(РегламентированнаяОтчетность.ЭтоПБОЮЛ(Шапка.Поставщик), "ФИОПБОЮЛ", "ФИОРуководителя"), Руководители.Руководитель);
	ДанныеДляПечати.Вставить("ФИОГлавногоБухгалтера", Руководители.ГлавныйБухгалтер);
	
	Товары = СоздатьТаблицуДляЗаполнениеТабличнойЧастиДанныхПечати();
	
	Если Ссылка.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАванс
		ИЛИ Ссылка.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитента Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СчетФактураВыданныйАвансы.Контрагент КАК Контрагент,
		|	СчетФактураВыданныйАвансы.Номенклатура КАК Товар,
		|	ВЫРАЗИТЬ(СчетФактураВыданныйАвансы.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК ТоварНаименование,
		|	ВЫРАЗИТЬ(СчетФактураВыданныйАвансы.Содержание КАК СТРОКА(1000)) КАК Содержание,
		|	СУММА(СчетФактураВыданныйАвансы.Сумма) КАК Сумма,
		|	СУММА(СчетФактураВыданныйАвансы.СуммаНДС) КАК СуммаНДС,
		|	СчетФактураВыданныйАвансы.СтавкаНДС,
		|	МИНИМУМ(СчетФактураВыданныйАвансы.НомерСтроки) КАК НомерСтроки
		|ИЗ
		|	Документ.СчетФактураВыданный.Авансы КАК СчетФактураВыданныйАвансы
		|ГДЕ
		|	СчетФактураВыданныйАвансы.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	СчетФактураВыданныйАвансы.Контрагент,
		|	СчетФактураВыданныйАвансы.СтавкаНДС,
		|	СчетФактураВыданныйАвансы.Номенклатура,
		|	ВЫРАЗИТЬ(СчетФактураВыданныйАвансы.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)),
		|	ВЫРАЗИТЬ(СчетФактураВыданныйАвансы.Содержание КАК СТРОКА(1000))
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
		
		ТаблицаПоАвансам = Запрос.Выполнить().Выгрузить();
				
		СоответствиеСтавок = Новый Соответствие();
		СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС10, Перечисления.СтавкиНДС.НДС10_110);
		СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС18, Перечисления.СтавкиНДС.НДС18_118);
		СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС20, Перечисления.СтавкиНДС.НДС20_120);
		СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.БезНДС, Перечисления.СтавкиНДС.БезНДС);
		СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.ПустаяСсылка(), Перечисления.СтавкиНДС.БезНДС);
		
		Для Каждого СтрокаТаблицы Из ТаблицаПоАвансам Цикл
		
			Строчка = Товары.Добавить();
			Строчка.Контрагент = СтрокаТаблицы.Контрагент;
			Строчка.Товар                  = ?(ЗначениеЗаполнено(СтрокаТаблицы.Товар), СтрокаТаблицы.Товар, НадписьНаименование);
			Строчка.ТоварНаименование      = ?(ЗначениеЗаполнено(СокрЛП(СтрокаТаблицы.Содержание)), СокрЛП(СтрокаТаблицы.Содержание), 
											?(ЗначениеЗаполнено(СтрокаТаблицы.Товар), СокрЛП(СтрокаТаблицы.ТоварНаименование), НадписьНаименование));
			Строчка.СтранаПроисхождения    = "";
			Строчка.ПредставлениеСтраны    = "";
			Строчка.НомерГТД               = "";
			Строчка.ПредставлениеГТД       = "";
			Строчка.РегистрационныйНомерТД = "";
			Строчка.Количество             = 0;
			Строчка.ЕдиницаИзмерения       = "";
			Строчка.СуммаВключаетНДС       = Истина;
			Строчка.СтавкаНДС              = СтрокаТаблицы.СтавкаНДС;
			Строчка.СуммаНДС               = СтрокаТаблицы.СуммаНДС;
			Строчка.Сумма                  = СтрокаТаблицы.Сумма;
		
		КонецЦикла;
		
	Иначе

		Строчка = Товары.Добавить();
		Строчка.Товар                  = НадписьНаименование;
		Строчка.ТоварНаименование      = НадписьНаименование;
		Строчка.СтранаПроисхождения    = "";
		Строчка.ПредставлениеСтраны    = "";
		Строчка.НомерГТД               = "";
		Строчка.ПредставлениеГТД       = "";
		Строчка.РегистрационныйНомерТД = "";
		Строчка.Количество             = 0;
		Строчка.ЕдиницаИзмерения       = "";
		Строчка.СуммаВключаетНДС       = Истина;

		Строчка.СтавкаНДС = Шапка.СтавкаНДС;
		Строчка.СуммаНДС  = Шапка.СуммаНДС;
		Строчка.Сумма     = Шапка.Сумма;

	КонецЕсли;
	
	ДанныеДляПечати.Вставить("ТабличнаяЧасть", Товары);
	ДанныеДляПечати.Вставить("ТолькоУслуги",   Истина);

	Возврат ДанныеДляПечати;

КонецФункции // СобратьДанныеПоСВП()

// Функция возвращает пустую таблицу значений под
// табличную часть документа основания.
// 
Функция СоздатьТаблицуДляЗаполнениеТабличнойЧастиДанныхПечати() Экспорт 

	Товары = Новый ТаблицаЗначений();

	Товары.Колонки.Добавить("Контрагент");
	Товары.Колонки.Добавить("Товар");
	Товары.Колонки.Добавить("Характеристика");
	Товары.Колонки.Добавить("ТоварНаименование");
	Товары.Колонки.Добавить("ТоварКодТНВЭД");
	Товары.Колонки.Добавить("ТоварКод");
	Товары.Колонки.Добавить("ТоварАртикул");
	Товары.Колонки.Добавить("СтранаПроисхождения");
	Товары.Колонки.Добавить("СтранаПроисхожденияКод");
	Товары.Колонки.Добавить("ПредставлениеСтраны");
	Товары.Колонки.Добавить("НомерГТД");
	Товары.Колонки.Добавить("ПредставлениеГТД");
	Товары.Колонки.Добавить("РегистрационныйНомерТД");
	Товары.Колонки.Добавить("Количество");
	Товары.Колонки.Добавить("ЕдиницаИзмерения");
	Товары.Колонки.Добавить("ЕдиницаИзмеренияКод");
	Товары.Колонки.Добавить("СуммаВключаетНДС");
	Товары.Колонки.Добавить("Цена");
	Товары.Колонки.Добавить("СтавкаНДС");
	Товары.Колонки.Добавить("СуммаНДС");
	Товары.Колонки.Добавить("Сумма");
	Товары.Колонки.Добавить("НомерСтроки");
	
	Возврат Товары;

КонецФункции

Процедура ВывестиСчетФактуруВТабличныйДокумент(ТабДокумент, Макет, ДанныеДляПечати) Экспорт

	Дата                    = ДанныеДляПечати.Дата;
	ЭтоПечатьУПД            = ДанныеДляПечати.Свойство("СтатусУПД");
	ВерсияПостановления1137 = ВерсияПостановленияНДС1137(Дата);
		
	БезПереходаПраваСобственности = Ложь;
	Если ЭтоПечатьУПД И (ДанныеДляПечати.СтатусУПД = 2) Тогда
		Если ДанныеДляПечати.Свойство("ПередачаНаРеализациюПоКомиссии") 
			И ДанныеДляПечати.ПередачаНаРеализациюПоКомиссии Тогда
			БезПереходаПраваСобственности = Истина;
		КонецЕсли;
		
		Если ДанныеДляПечати.Свойство("ДокументОснование") 
			И ТипЗнч(ДанныеДляПечати.ДокументОснование) = Тип("ДокументСсылка.ПередачаТоваров") Тогда
			БезПереходаПраваСобственности = Истина;
		КонецЕсли;
	КонецЕсли;
		
	Если ТипЗнч(ДанныеДляПечати.Поставщик) = Тип("Массив") Тогда
		СведенияОПоставщике = Новый Массив;
		Для каждого Поставщик Из ДанныеДляПечати.Поставщик Цикл
			СведенияОПоставщике.Добавить(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Поставщик, Дата));
		КонецЦикла;
	Иначе
		СведенияОПоставщике  = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ДанныеДляПечати.Поставщик, Дата);
	КонецЕсли;
	
	НужныСведенияОПодразделенииПокупателя = ДанныеДляПечати.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию
		ИЛИ ДанныеДляПечати.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАванс;
	
	Если ТипЗнч(ДанныеДляПечати.Покупатель) = Тип("Массив") Тогда
		СведенияОПокупателе = Новый Массив;
		СведенияОПодразделенииПокупателя = Новый Массив;
		Для каждого Покупатель Из ДанныеДляПечати.Покупатель Цикл
			Если НужныСведенияОПодразделенииПокупателя Тогда
				РеквизитыПокупателя = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(Покупатель, "ГоловнойКонтрагент, ОбособленноеПодразделение");
				Если РеквизитыПокупателя.ОбособленноеПодразделение И ЗначениеЗаполнено(РеквизитыПокупателя.ГоловнойКонтрагент) Тогда
					СведенияОПокупателе.Добавить(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(РеквизитыПокупателя.ГоловнойКонтрагент, Дата));
					СведенияОПодразделенииПокупателя.Добавить(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ДанныеДляПечати.Покупатель, Дата));
				Иначе
					СведенияОПокупателе.Добавить(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Покупатель, Дата));
					СведенияОПодразделенииПокупателя.Добавить(Неопределено);
				КонецЕсли;
			Иначе
				СведенияОПокупателе.Добавить(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Покупатель, Дата));
				СведенияОПодразделенииПокупателя.Добавить(Неопределено);
			КонецЕсли;
		КонецЦикла;
	Иначе
		Если НужныСведенияОПодразделенииПокупателя
			И ТипЗнч(ДанныеДляПечати.Покупатель) = Тип("СправочникСсылка.Контрагенты") И ЗначениеЗаполнено(ДанныеДляПечати.Покупатель) Тогда
			РеквизитыПокупателя = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(ДанныеДляПечати.Покупатель, "ГоловнойКонтрагент, ОбособленноеПодразделение");
			Если РеквизитыПокупателя.ОбособленноеПодразделение И ЗначениеЗаполнено(РеквизитыПокупателя.ГоловнойКонтрагент) Тогда
				СведенияОПокупателе = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(РеквизитыПокупателя.ГоловнойКонтрагент, Дата);
				СведенияОПодразделенииПокупателя = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ДанныеДляПечати.Покупатель, Дата);
			Иначе
				СведенияОПокупателе = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ДанныеДляПечати.Покупатель, Дата);
				СведенияОПодразделенииПокупателя = Неопределено;
			КонецЕсли;
		Иначе
			СведенияОПокупателе = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ДанныеДляПечати.Покупатель, Дата);
			СведенияОПодразделенииПокупателя = Неопределено;
		КонецЕсли;

	КонецЕсли;
	
	// Выводим шапку
	ВедетсяУчетНДСПоФЗ56 = ВедетсяУчетНДСПоФЗ56(Дата);
	Если НЕ ЭтоПечатьУПД Тогда
		Если ВерсияПостановления1137 < 4 Тогда
			Если ВедетсяУчетНДСПоФЗ56 Тогда 
				ОбластьМакета = Макет.ПолучитьОбласть("ШапкаИнформация1137_625");
			Иначе
				ОбластьМакета = Макет.ПолучитьОбласть("ШапкаИнформация1137");
			КонецЕсли;
			ТабДокумент.Вывести(ОбластьМакета);
		КонецЕсли;
		
		ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	Иначе
		Если ВерсияПостановления1137 < 4 Тогда
			Если ВедетсяУчетНДСПоФЗ56 Тогда 
				ОбластьМакета = Макет.ПолучитьОбласть("Шапка625");
			Иначе
				ОбластьМакета = Макет.ПолучитьОбласть("Шапка1137");
			КонецЕсли;
		Иначе
			ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
		КонецЕсли;
	КонецЕсли;
	
	ОбластьМакета.Параметры.Заполнить(ДанныеДляПечати);
	
	Если ЭтоПечатьУПД Тогда
		Если ДанныеДляПечати.Исправление Тогда
			ОбластьМакета.Параметры.НомерИсправления = Строка(ДанныеДляПечати.НомерИсправления);
			ОбластьМакета.Параметры.ДатаИсправления  = Формат(ДанныеДляПечати.ДатаСчетаФактуры, "ДФ='дд ММММ гггг'") + " г.";
		Иначе
			ОбластьМакета.Параметры.НомерИсправления = "--";
			ОбластьМакета.Параметры.ДатаИсправления  = "--";
		КонецЕсли;
	Иначе
		
		Если ДанныеДляПечати.Исправление Тогда
			ОбластьМакета.Параметры.НомерИсправления = "Исправление № " + Строка(ДанныеДляПечати.НомерИсправления) 
				+ " от " + Формат(ДанныеДляПечати.ДатаСчетаФактуры, "ДФ='дд ММММ гггг'") + " г.";
		Иначе 	
			ОбластьМакета.Параметры.НомерИсправления = "Исправление № -- от --";
		КонецЕсли;
	КонецЕсли;
	
	Если БезПереходаПраваСобственности Тогда
		
		ОбластьМакета.Параметры.ПредставлениеПоставщика = "--";
		ОбластьМакета.Параметры.АдресПоставщика 		= "--";
		ОбластьМакета.Параметры.ИННпоставщика 			= "--";
		
	Иначе
	
		ЗаголовокПоставщика      = ?(ЭтоПечатьУПД, "", "Продавец: ");
		ЗаголовокАдресПоставщика = ?(ЭтоПечатьУПД, "", "Адрес: ");
		ЗаголовокИННпоставщика   = ?(ЭтоПечатьУПД, "", "ИНН/КПП продавца: ");
		
		КПППодразделения = "";
		
		ИндексПодразделения = 0;
		Если НЕ (ЭтоПечатьУПД И ДанныеДляПечати.СтатусУПД = 2) Тогда
			// В УПД в статусе 2 не выводится индекс обособленного подразделения
			Если ЗначениеЗаполнено(ДанныеДляПечати.Организация.ГоловнаяОрганизация) Тогда
				ИндексПодразделения = ДанныеДляПечати.Организация.ЦифровойИндексОбособленногоПодразделения;
			КонецЕсли;
		КонецЕсли;
		Если ИндексПодразделения <> 0 Тогда
			ДанныеДляПечати.Номер = ДанныеДляПечати.Номер + "/" + ИндексПодразделения;
		КонецЕсли;
		
		Если ТипЗнч(СведенияОПоставщике) = Тип("Массив")  Тогда
			
			ТекстПоставщика      = "";
			ТекстАдресПоставщика = "";
			ТекстИННПоставщика   = "";
			Если ТипЗнч(ДанныеДляПечати.КПП) = Тип("Массив") 
				И ДанныеДляПечати.КПП.Количество() = СведенияОПоставщике.Количество() тогда
				СведенияОКПП = ДанныеДляПечати.КПП;
			Иначе
				СведенияОКПП = Неопределено;
			КонецЕсли;
			
			Для Индекс = 0 По СведенияОПоставщике.ВГраница() Цикл
				
				ДанныеПоставщика = СведенияОПоставщике[Индекс];
			
				ТекстПоставщика = ТекстПоставщика + ?(ПустаяСтрока(ТекстПоставщика), "", ";")
					+ ФормированиеПечатныхФорм.ОписаниеОрганизации(ДанныеПоставщика, "ПолноеНаименование,");
				ТекстАдресПоставщика = ТекстАдресПоставщика + ?(ПустаяСтрока(ТекстАдресПоставщика), "", ";")
					+ ФормированиеПечатныхФорм.ОписаниеОрганизации(ДанныеПоставщика, "ЮридическийАдрес,");
				КПП = ?(СведенияОКПП <> Неопределено И СведенияОКПП[Индекс] <> Неопределено, 
					СведенияОКПП[Индекс],
					ФормированиеПечатныхФорм.ОписаниеОрганизации(ДанныеПоставщика, "КПП,", Ложь));
				ТекстИННПоставщика = ТекстИННПоставщика + ?(ПустаяСтрока(ТекстИННПоставщика), "", ";")
					+ ФормированиеПечатныхФорм.ОписаниеОрганизации(ДанныеПоставщика, "ИНН,", Ложь) 
					+ ?(ЗначениеЗаполнено(КПП), "/" + КПП, "");
			
			КонецЦикла;
			
		Иначе
			
			ТекстПоставщика = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,");
			ТекстАдресПоставщика = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ЮридическийАдрес,");
			
			Если ДанныеДляПечати.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НалоговыйАгент
				И ДанныеДляПечати.ДоговорКонтрагента.ВидАгентскогоДоговора = Перечисления.ВидыАгентскихДоговоров.Нерезидент Тогда
				ТекстИННПоставщика = "--";
			Иначе
				Если ДанныеДляПечати.Свойство("КПП") Тогда
					КПП = ДанныеДляПечати.КПП; 
				ИначеЕсли ЗначениеЗаполнено(КПППодразделения) Тогда
					КПП = КПППодразделения;
				Иначе
					КПП = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "КПП,", Ложь);
				КонецЕсли;	
				ТекстИННПоставщика = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ИНН,", Ложь) 
					+ ?(ЗначениеЗаполнено(КПП), "/" + КПП, "");
			КонецЕсли;
			
		КонецЕсли;
		
		ОбластьМакета.Параметры.ПредставлениеПоставщика = ЗаголовокПоставщика + ТекстПоставщика;
		ОбластьМакета.Параметры.АдресПоставщика         = ЗаголовокАдресПоставщика + ТекстАдресПоставщика;
		ОбластьМакета.Параметры.ИННпоставщика           = ЗаголовокИННпоставщика + ТекстИННпоставщика;
			
	КонецЕсли;
	
	Если ЭтоПечатьУПД Тогда
		НомерНаПечатьСтрокой 	= ОбщегоНазначения.ПолучитьНомерНаПечать(ДанныеДляПечати);
		ДатаНаПечатьСтрокой 	= Формат(Дата, "ДФ='дд ММММ гггг'") + " г.";
		ОбластьМакета.Параметры.Номер = НомерНаПечатьСтрокой;
		ОбластьМакета.Параметры.Дата  =	ДатаНаПечатьСтрокой;
		ЗаголовокДляПечати = "Универсальный передаточный документ № " + НомерНаПечатьСтрокой + " от " +  ДатаНаПечатьСтрокой;
	Иначе
		Если ДанныеДляПечати.Исправление Тогда
			ЗаголовокДляПечати = "Счет-фактура № " + ДанныеДляПечати.Номер + " от " + Формат(Дата, "ДФ='дд ММММ гггг'");
		Иначе
			ЗаголовокДляПечати = ОбщегоНазначения.СформироватьЗаголовокДокумента(ДанныеДляПечати, "Счет-фактура") + " г.";
		КонецЕсли;
		ОбластьМакета.Параметры.Номер = ЗаголовокДляПечати;
	КонецЕсли;
	
	ТолькоУслуги = Истина;
	Для каждого СтрокаТовар Из ДанныеДляПечати.ТабличнаяЧасть Цикл
		Если (ТипЗнч(СтрокаТовар.Товар) = Тип("СправочникСсылка.Номенклатура") И НЕ СтрокаТовар.Товар.Услуга)
			ИЛИ ТипЗнч(СтрокаТовар.Товар) = Тип("СправочникСсылка.ОсновныеСредства") Тогда
			ТолькоУслуги = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ДанныеДляПечати.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАванс
		ИЛИ ДанныеДляПечати.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитента Тогда
			
		ОбластьМакета.Параметры.ПредставлениеГрузоотправителя = ?(ЭтоПечатьУПД, "", "Грузоотправитель и его адрес: ") + "--";
		ОбластьМакета.Параметры.ПредставлениеГрузополучателя  = ?(ЭтоПечатьУПД, "", "Грузополучатель и его адрес: ") + "--";
		
	Иначе
		
		Если ТолькоУслуги Тогда
			ОбластьМакета.Параметры.ПредставлениеГрузоотправителя = ?(ЭтоПечатьУПД, "", "Грузоотправитель и его адрес: ") + "--";
			ОбластьМакета.Параметры.ПредставлениеГрузополучателя  = ?(ЭтоПечатьУПД, "", "Грузополучатель и его адрес: ") + "--";
		Иначе
			Если ТипЗнч(ДанныеДляПечати.Грузоотправитель) = Тип("Массив")  Тогда
				СведенияОГрузоотправителе = Новый Массив;
				Для каждого Грузоотправитель Из ДанныеДляПечати.Грузоотправитель Цикл
					СведенияОГрузоотправителе.Добавить(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Грузоотправитель, Дата));
				КонецЦикла;
			Иначе
				СведенияОГрузоотправителе = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(
				?(БезПереходаПраваСобственности, ДанныеДляПечати.Поставщик, 
				?(ДанныеДляПечати.Грузоотправитель = "он же", Неопределено, ДанныеДляПечати.Грузоотправитель)), Дата);
			КонецЕсли;
			
			ЗаголовокГрузоотправителя = ?(ЭтоПечатьУПД, "", "Грузоотправитель и его адрес: ");
				
			Если ТипЗнч(СведенияОГрузоотправителе) = Тип("Массив") Тогда
				ТекстГрузоотправителя = "";
				Для каждого ДанныеГрузоотправителя Из СведенияОГрузоотправителе Цикл
					ТекстГрузоотправителя = ТекстГрузоотправителя + ?(ПустаяСтрока(ТекстГрузоотправителя), "", ";")
					+ ФормированиеПечатныхФорм.ОписаниеОрганизации(ДанныеГрузоотправителя, 
					"ПолноеНаименование, ФактическийАдрес,");
				КонецЦикла;
			Иначе
				ТекстГрузоотправителя = ?(НЕ ЗначениеЗаполнено(СведенияОГрузоотправителе), 
					"--", 
					?(ДанныеДляПечати.Грузоотправитель = "он же", "он же", 
						ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГрузоотправителе,  
						"ПолноеНаименование, ФактическийАдрес,")));
			КонецЕсли;
			
			ОбластьМакета.Параметры.ПредставлениеГрузоотправителя = ЗаголовокГрузоотправителя + ТекстГрузоотправителя;
			
			Если ТипЗнч(ДанныеДляПечати.Грузополучатель) = Тип("Массив")  Тогда
				СведенияОГрузополучателе = Новый Массив;
				Для каждого Грузополучатель Из ДанныеДляПечати.Грузополучатель Цикл
					СведенияОГрузополучателе.Добавить(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Грузополучатель, Дата));
				КонецЦикла;
				
			Иначе
				СведенияОГрузополучателе  = ?(БезПереходаПраваСобственности, СведенияОПокупателе, 
					УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ДанныеДляПечати.Грузополучатель, Дата));
			КонецЕсли;
		
			ЗаголовокГрузополучателя = ?(ЭтоПечатьУПД, "", "Грузополучатель и его адрес: ");
			Если ТипЗнч(СведенияОГрузополучателе) = Тип("Массив") Тогда
				ТекстГрузополучателя = "";
				Для каждого ДанныеГрузополучателя Из СведенияОГрузополучателе Цикл
					ТекстГрузополучателя = ТекстГрузополучателя + ?(ПустаяСтрока(ТекстГрузополучателя), "", ";")
						+ ФормированиеПечатныхФорм.ОписаниеОрганизации(ДанныеГрузополучателя, 
							"ПолноеНаименование, ФактическийАдрес,");
				КонецЦикла;
			Иначе
				Если ДанныеДляПечати.Свойство("АдресДоставки") 
					И НЕ ПустаяСтрока(ДанныеДляПечати.АдресДоставки) Тогда
					ТекстГрузополучателя = ?(НЕ ЗначениеЗаполнено(ДанныеДляПечати.Грузополучатель), 
						ДанныеДляПечати.АдресДоставки,
						ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГрузополучателе, 
							"ПолноеНаименование") + ", " + ДанныеДляПечати.АдресДоставки);
				Иначе
					ТекстГрузополучателя = ?(НЕ ЗначениеЗаполнено(ДанныеДляПечати.Грузополучатель), 
						"--",
						ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГрузополучателе, 
							"ПолноеНаименование, ФактическийАдрес,"));
				КонецЕсли;
			КонецЕсли;
			ОбластьМакета.Параметры.ПредставлениеГрузополучателя = ЗаголовокГрузополучателя + ТекстГрузополучателя;
				
		КонецЕсли;
	
	КонецЕсли;

	СтрокаПоДокументу = "";
	Если ДанныеДляПечати.Свойство("ТаблицаДатОплат") Тогда
		Для каждого ПараметрыДокументаОплаты Из ДанныеДляПечати.ТаблицаДатОплат Цикл
			
			Если НЕ ЗначениеЗаполнено(ПараметрыДокументаОплаты.НомерПлатежноРасчетногоДокумента)
				И НЕ ЗначениеЗаполнено(ПараметрыДокументаОплаты.ДатаПлатежноРасчетногоДокумента) Тогда
				Продолжить;
			КонецЕсли;
			СтрокаПоДокументу = СтрокаПоДокументу
				+ ?(ПустаяСтрока(СтрокаПоДокументу), ?(ЭтоПечатьУПД, "", "К платежно-расчетному документу № "),", ")
				+ ПараметрыДокументаОплаты.НомерПлатежноРасчетногоДокумента 
				+ " от " + Формат(ПараметрыДокументаОплаты.ДатаПлатежноРасчетногоДокумента, "ДФ=dd.MM.yyyy") + " г.";
			
		КонецЦикла; 
	КонецЕсли;
	Если ПустаяСтрока(СтрокаПоДокументу) Тогда
		Если ДанныеДляПечати.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАванс
			ИЛИ ДанныеДляПечати.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитента Тогда
			СтрокаПоДокументу = ?(ЭтоПечатьУПД, "", "К платежно-расчетному документу № ") + "-- от --";
		Иначе
			СтрокаПоДокументу = ?(ЭтоПечатьУПД, "", "К платежно-расчетному документу № ") + "   от";
		КонецЕсли; 
	КонецЕсли; 
	Если ЭтоПечатьУПД И ДанныеДляПечати.СтатусУПД = 2 Тогда
		// В УПД в статусе 2 ставятся прочерки показатели, установленные в качестве обязательных исключительно для счета-фактуры: 
		// - «К платежно-расчетному документу» (строка 7); 
		СтрокаПоДокументу = "--";
	КонецЕсли;
	ОбластьМакета.Параметры.ПоДокументу = СтрокаПоДокументу;
	
	Если БезПереходаПраваСобственности Тогда
		
		ОбластьМакета.Параметры.ПредставлениеПокупателя = "--";
		ОбластьМакета.Параметры.АдресПокупателя 		= "--";
		ОбластьМакета.Параметры.ИННПокупателя 			= "--";
		
	Иначе
		
		ЗаголовокПокупателя      = ?(ЭтоПечатьУПД, "", "Покупатель: ");
		ЗаголовокАдресПокупателя = ?(ЭтоПечатьУПД, "", "Адрес: ");
		ЗаголовокИННПокупателя   = ?(ЭтоПечатьУПД, "", "ИНН/КПП покупателя: ");
		
		Если ТипЗнч(СведенияОПокупателе) = Тип("Массив") Тогда
			
			ТекстПокупателя      = "";
			ТекстАдресПокупателя = "";
			ТекстИННПокупателя   = "";
			
			Для Индекс = 0 По СведенияОПокупателе.ВГраница() Цикл
				
				ДанныеОПокупателе = СведенияОПокупателе[Индекс];
				ДанныеОПодразделенииПокупателя = СведенияОПодразделенииПокупателя[Индекс];
			
				ТекстПокупателя = ТекстПокупателя + ?(ПустаяСтрока(ТекстПокупателя), "", ";")
					+ ФормированиеПечатныхФорм.ОписаниеОрганизации(ДанныеОПокупателе, "ПолноеНаименование,");
				ТекстАдресПокупателя = ТекстАдресПокупателя + ?(ПустаяСтрока(ТекстАдресПокупателя), "", ";")
					+ ФормированиеПечатныхФорм.ОписаниеОрганизации(ДанныеОПокупателе, "ЮридическийАдрес,");
				Если ДанныеОПодразделенииПокупателя <> Неопределено Тогда
					КПП = ФормированиеПечатныхФорм.ОписаниеОрганизации(ДанныеОПодразделенииПокупателя, "КПП,", Ложь);
				Иначе
					КПП = ФормированиеПечатныхФорм.ОписаниеОрганизации(ДанныеОПокупателе, "КПП,", Ложь);
				КонецЕсли;
				ТекстИННПокупателя = ТекстИННПокупателя + ?(ПустаяСтрока(ТекстИННПокупателя), "", ";")
					+ ФормированиеПечатныхФорм.ОписаниеОрганизации(ДанныеОПокупателе, "ИНН,", Ложь) 
					+ ?(ЗначениеЗаполнено(КПП), "/" + КПП, "");
				
			КонецЦикла;
		
		Иначе
		
			ТекстПокупателя = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование,");
			ТекстАдресПокупателя = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ЮридическийАдрес,");
				
			Если ДанныеДляПечати.Свойство("КППКонтрагента") И ЗначениеЗаполнено(ДанныеДляПечати.КППКонтрагента) Тогда
				КПП = ДанныеДляПечати.КППКонтрагента;
			ИначеЕсли СведенияОПодразделенииПокупателя <> Неопределено Тогда
				КПП = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПодразделенииПокупателя, "КПП,", Ложь);
			Иначе
				КПП = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "КПП,", Ложь);
			КонецЕсли;
			ТекстИННПокупателя = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ИНН,", Ложь)
				+ ?(ЗначениеЗаполнено(КПП), "/" + КПП, "");
		
		КонецЕсли;
			
		ОбластьМакета.Параметры.ПредставлениеПокупателя = ЗаголовокПокупателя + ТекстПокупателя;
		ОбластьМакета.Параметры.АдресПокупателя         = ЗаголовокАдресПокупателя + ТекстАдресПокупателя;
		ОбластьМакета.Параметры.ИННПокупателя           = ЗаголовокИННПокупателя + ТекстИННПокупателя;
		
	КонецЕсли;
		
	ОбластьМакета.Параметры.Валюта = ?(ЭтоПечатьУПД, "", "Валюта: наименование, код ")
		+ ?(ЗначениеЗаполнено(ДанныеДляПечати.Валюта), 
			ДанныеДляПечати.Валюта.НаименованиеПолное + ", " + ДанныеДляПечати.Валюта.Код, "");		
			
	ТабДокумент.Вывести(ОбластьМакета);
	
	Если ВедетсяУчетНДСПоФЗ56 Тогда 
		ОбластьМакета = Макет.ПолучитьОбласть("ИдентификаторГосКонтракта");
		Если ЭтоПечатьУПД Тогда 
			ОбластьМакета.Параметры.ИдентификаторГосКонтракта = ДанныеДляПечати.ИдентификаторГосКонтракта;
		Иначе
			Если ВерсияПостановления1137 < 4 Тогда
				ШаблонЗаголовкаГосконтракт = НСтр("ru = 'Идентификатор государственного контракта, договора (соглашения): %1'");
			Иначе
				ШаблонЗаголовкаГосконтракт = НСтр("ru = 'Идентификатор государственного контракта, договора (соглашения) (при наличии): %1'");
			КонецЕсли;
			ОбластьМакета.Параметры.ИдентификаторГосКонтракта = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонЗаголовкаГосконтракт, ДанныеДляПечати.ИдентификаторГосКонтракта);
		КонецЕсли;
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЕсли;
	
	Если НЕ ЭтоПечатьУПД Тогда
		Если ТипЗнч(ДанныеДляПечати.Ссылка) = Тип("ДокументСсылка.СчетФактураВыданный")
			И ТипЗнч(ДанныеДляПечати.Покупатель) = Тип("СправочникСсылка.Контрагенты") 
			И (ТипЗнч(ДанныеДляПечати.Поставщик) = Тип("СправочникСсылка.Контрагенты")
			ИЛИ ТипЗнч(ДанныеДляПечати.Поставщик) = Тип("Массив")) Тогда
			
			ВывестиРеквизитыКомиссионера(ДанныеДляПечати.Организация, ДанныеДляПечати.Поставщик, ДанныеДляПечати.Покупатель, Дата, Макет, ТабДокумент);
						
		КонецЕсли;
	КонецЕсли;
	
	// Выводим заголовок таблицы
	ОбластьМакетаЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
	ОбластьМакетаЗаголовокТаблицы.Параметры.Заполнить(ДанныеДляПечати);
	ТабДокумент.Вывести(ОбластьМакетаЗаголовокТаблицы);
	
	// Дополнительная подготовка данных для вывода в табличную часть
	ВыборкаСтрокТовары = ДанныеДляПечати.ТабличнаяЧасть;
	ВыборкаСтрокТовары.Колонки.Добавить("СуммаБезНДС");
	ВыборкаСтрокТовары.Колонки.Добавить("СуммаСНДС");
	
	Если ЭтоПечатьУПД Тогда
		ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
		Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
			ВыводитьКоды 	= Истина;
			КолонкаТоварКод = "ТоварАртикул";
		ИначеЕсли ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
			ВыводитьКоды 	= Истина;
			КолонкаТоварКод = "ТоварКод";
		Иначе
			ВыводитьКоды 	= Ложь;
			КолонкаТоварКод	= "";
		КонецЕсли;
	Иначе
		ВыводитьКоды 	= Ложь;
		КолонкаТоварКод	= "";
	КонецЕсли;

	Для Каждого Строчка Из ВыборкаСтрокТовары Цикл
		
		Строчка.СуммаСНДС = Строчка.Сумма + ?(Строчка.СуммаВключаетНДС, 0, Строчка.СуммаНДС);
		Строчка.СуммаБезНДС = Строчка.СуммаСНДС - Строчка.СуммаНДС;
		
		Если ДанныеДляПечати.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию И 
			(Строчка.СтавкаНДС = Перечисления.СтавкиНДС.НДС20_120
		 	ИЛИ Строчка.СтавкаНДС = Перечисления.СтавкиНДС.НДС18_118
		 	ИЛИ Строчка.СтавкаНДС = Перечисления.СтавкиНДС.НДС10_110) Тогда
			Если (НЕ Строчка.СуммаВключаетНДС) ИЛИ Строчка.Цена = 0 Тогда
				Строчка.Цена = Окр(Строчка.СуммаСНДС / Строчка.Количество, 2);
			КонецЕсли;
		Иначе
			Если Строчка.СуммаВключаетНДС Тогда
				Строчка.Цена = 0;
			КонецЕсли;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Строчка.ЕдиницаИзмерения) Тогда
			Строчка.Количество = 0;
			Строчка.Цена = 0;
		ИначеЕсли Строчка.Количество = 0 Тогда
			Строчка.Цена = 0;
		ИначеЕсли Строчка.Цена = 0 Тогда
			Строчка.Цена = Окр(Строчка.СуммаБезНДС / Строчка.Количество, 2);
		КонецЕсли;
		
		Строчка.ТоварКод = ?(ВыводитьКоды, Строчка[КолонкаТоварКод], "");
		
		Если ДанныеДляПечати.Дата >= '20160701' И ВерсияПостановления1137 < 4
			И Строчка.СтавкаНДС = Перечисления.СтавкиНДС.НДС0
			И ЗначениеЗаполнено(Строчка.ТоварКодТНВЭД) Тогда
			// Дополняем наименование товара информацией о коде ТН ВЭД
			Строчка.ТоварНаименование = Строчка.ТоварНаименование + ", код ТН ВЭД " + СокрЛП(Строчка.ТоварКодТНВЭД);
		КонецЕсли;
		
	КонецЦикла;
	
	КолонкиДляСвертки = ?(ВыборкаСтрокТовары.Колонки.Найти("Контрагент") <> Неопределено, "Контрагент,", "")
		+ "Товар, ТоварНаименование, ТоварКод, ТоварКодТНВЭД, ЕдиницаИзмерения, ЕдиницаИзмеренияКод, Цена, СтавкаНДС,"
		+ "НомерГТД, ПредставлениеГТД,РегистрационныйНомерТД, СтранаПроисхождения, СтранаПроисхожденияКод, ПредставлениеСтраны";
	ВыборкаСтрокТовары.Свернуть(КолонкиДляСвертки, "Количество, Сумма, СуммаНДС, СуммаСНДС, СуммаБезНДС, НомерСтроки");
	
	// Выводим строки таблицы
	ОбластьМакета       = Макет.ПолучитьОбласть("Строка");
	ОбластьМакетаПодвал = Макет.ПолучитьОбласть("Подвал");
	ОбластьМакетаИтого  = Макет.ПолучитьОбласть("Итого");
	Если ЭтоПечатьУПД Тогда
		ОбластьМакетаПодвалНакладной = Макет.ПолучитьОбласть("ПодвалНакладной");
	Иначе
		ОбластьМакетаПодвалНакладной = Новый ТабличныйДокумент;
	КонецЕсли;
	КоличествоСтраниц = 1;
	
	НомерСтроки     = 0;
	КоличествоСтрок = ВыборкаСтрокТовары.Количество();
	
	Если ДанныеДляПечати.Дата >= Константы.ДатаНачалаОперацийСТоварамиОблагаемымиНДСУПокупателя.Получить()
		И ДанныеДляПечати.ДоговорКонтрагента.РеализацияТоваровОблагаемыхНДСУПокупателя Тогда
		РеализацияТоваровОблагаемыхНДСУПокупателя = Истина;
	Иначе
		РеализацияТоваровОблагаемыхНДСУПокупателя = Ложь;
	КонецЕсли;
	
	Для Каждого Строчка Из ВыборкаСтрокТовары Цикл
		
		НомерСтроки = НомерСтроки + 1;
		Строчка.НомерСтроки = НомерСтроки;
		
		Если ВерсияПостановления1137 >= 4 Тогда
			Если ЗначениеЗаполнено(Строчка.РегистрационныйНомерТД) Тогда
				Строчка.ПредставлениеГТД = Строчка.РегистрационныйНомерТД;
			Иначе
				Строчка.ПредставлениеГТД = "";
				Строчка.СтранаПроисхождения = "";
			КонецЕсли;
		КонецЕсли;
		
		ОбластьМакета.Параметры.Заполнить(Строчка);

		Если НЕ ЗначениеЗаполнено(Строчка.ТоварНаименование) Тогда
			ОбластьМакета.Параметры.ТоварНаименование = Строчка.Товар;
		КонецЕсли;
		
		ОбластьМакета.Параметры.ТоварНаименование = СокрЛП(ОбластьМакета.Параметры.ТоварНаименование);
		
		Если ВерсияПостановления1137 >= 4 Тогда
			Если НЕ ЗначениеЗаполнено(ОбластьМакета.Параметры.ТоварКодТНВЭД)
				ИЛИ Строчка.СтавкаНДС <> Перечисления.СтавкиНДС.НДС0 Тогда
				ОбластьМакета.Параметры.ТоварКодТНВЭД = "--";
			КонецЕсли;
		КонецЕсли;
		
		Если ДанныеДляПечати.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию Тогда
			ОбластьМакета.Параметры.Стоимость = Строчка.СуммаБезНДС;
			ОбластьМакета.Параметры.Цена      = Строчка.Цена;
		ИначеЕсли РеализацияТоваровОблагаемыхНДСУПокупателя Тогда
			// Счет-фактура на аванс.
			ОбластьМакета.Параметры.Стоимость = Строчка.СуммаСНДС;
		Иначе
			Если ДанныеДляПечати.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НалоговыйАгент 
				ИЛИ ДанныеДляПечати.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаСуммовуюРазницу Тогда
				ОбластьМакета.Параметры.Стоимость = Строчка.СуммаБезНДС;
			Иначе
				ОбластьМакета.Параметры.Стоимость = 0;
			КонецЕсли;
			ОбластьМакета.Параметры.Количество = 0;
			ОбластьМакета.Параметры.Цена       = 0;
		КонецЕсли;
		
		Если РеализацияТоваровОблагаемыхНДСУПокупателя Тогда
			ОбластьМакета.Параметры.СтавкаНДС  = "НДС исчисляется налоговым агентом";
			ОбластьМакета.Параметры.СуммаНДС   = "--";
			ОбластьМакета.Параметры.Всего      = "--";
		Иначе
			ОбластьМакета.Параметры.Всего      = Строчка.СуммаСНДС;
			ОбластьМакета.Параметры.СтавкаНДС  = Строчка.СтавкаНДС;
		КонецЕсли;
		
		
		Если Строчка.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
			ОбластьМакета.Параметры.СтавкаНДС = "без НДС";
			ОбластьМакета.Параметры.СуммаНДС  = "без НДС";
		КонецЕсли;
		
		Если ДанныеДляПечати.ВидСчетаФактуры <> Перечисления.ВидСчетаФактурыВыставленного.НаАванс 
			И ДанныеДляПечати.ВидСчетаФактуры <> Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитента Тогда
			ОбластьМакета.Параметры.Акциз = "без акциза";
		КонецЕсли;	
		
		Если Строка(Строчка.ПредставлениеСтраны) = "Россия" 
			ИЛИ Строка(Строчка.ПредставлениеСтраны) = "Российская Федерация"
			ИЛИ Строчка.СтранаПроисхождения = Справочники.КлассификаторСтранМира.РОССИЯ Тогда			
			ОбластьМакета.Параметры.ПредставлениеСтраны    = "--";
			ОбластьМакета.Параметры.СтранаПроисхожденияКод = "--";
			ОбластьМакета.Параметры.ПредставлениеГТД       = "--";
		Иначе
			Если ЗначениеЗаполнено(Строчка.СтранаПроисхождения) Тогда
				ОбластьМакета.Параметры.ПредставлениеСтраны  = СокрЛП(Строчка.СтранаПроисхождения.Наименование);
			Иначе
				ОбластьМакета.Параметры.СтранаПроисхожденияКод = "--";
				ОбластьМакета.Параметры.ПредставлениеСтраны    = "--";
				ОбластьМакета.Параметры.ПредставлениеГТД       = "--";
			КонецЕсли;
		КонецЕсли; 
	
		// Проставляем прочерки в незаполненные графы в соответствии с Постановлением
		Если ДанныеДляПечати.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАванс
			ИЛИ ДанныеДляПечати.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитента Тогда
			
			ОбластьМакета.Параметры.ЕдиницаИзмерения    = "--";
			ОбластьМакета.Параметры.ЕдиницаИзмеренияКод = "--";
			
			ОбластьМакета.Параметры.Количество = "--";
			ОбластьМакета.Параметры.Цена       = "--";
			
			Если НЕ РеализацияТоваровОблагаемыхНДСУПокупателя Тогда
				ОбластьМакета.Параметры.Стоимость  = "--";
			КонецЕсли;
			
			ОбластьМакета.Параметры.Акциз                  = "--";
			ОбластьМакета.Параметры.СтранаПроисхожденияКод = "--";
			ОбластьМакета.Параметры.ПредставлениеСтраны    = "--";
			ОбластьМакета.Параметры.ПредставлениеГТД       = "--";
			
		Иначе
			
			Если НЕ ЗначениеЗаполнено(ОбластьМакета.Параметры.ЕдиницаИзмерения) Тогда
				ОбластьМакета.Параметры.ЕдиницаИзмерения    = "--";
				ОбластьМакета.Параметры.ЕдиницаИзмеренияКод = "--";
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(ОбластьМакета.Параметры.ЕдиницаИзмеренияКод) Тогда
				ОбластьМакета.Параметры.ЕдиницаИзмеренияКод = "--";
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(ОбластьМакета.Параметры.Количество) Тогда
				ОбластьМакета.Параметры.Количество = "--";
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(ОбластьМакета.Параметры.Цена) Тогда
				ОбластьМакета.Параметры.Цена = "--";
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЭтоПечатьУПД И ДанныеДляПечати.СтатусУПД = 2 Тогда
			
			// Ставим прочерки в графах, которые установленные в качестве обязательных исключительно для счета-фактуры
			//- «В том числе сумма акциза» (графа 6); 
			//- «Налоговая ставка» (графа 7);
			//- «Цифровой код страны происхождения товара» (графа 10);
			//- «Краткое наименование страны происхождения товара» (графа 10а);
			//- «Номер таможенной декларации» (графа 11). 
			
			ОбластьМакета.Параметры.Акциз 		= "--";
			ОбластьМакета.Параметры.СтавкаНДС 	= "--";
			ОбластьМакета.Параметры.СуммаНДС 	= ?(Строчка.СуммаНДС <> 0 , Строчка.СуммаНДС, "--");
			ОбластьМакета.Параметры.СтранаПроисхожденияКод 	= "--";
			ОбластьМакета.Параметры.ПредставлениеСтраны 	= "--";
			ОбластьМакета.Параметры.ПредставлениеГТД 		= "--";
			
		КонецЕсли;
		
		// Проверим возможность вывода табличного документа
		СтрокаСПодвалом = Новый Массив;
		СтрокаСПодвалом.Добавить(ОбластьМакета);
		Если НомерСтроки = КоличествоСтрок Тогда
			// Если последняя строка, то должен поместится итог и подвал
			СтрокаСПодвалом.Добавить(ОбластьМакетаИтого);
			СтрокаСПодвалом.Добавить(ОбластьМакетаПодвал);
			Если ЭтоПечатьУПД Тогда
				СтрокаСПодвалом.Добавить(ОбластьМакетаПодвалНакладной);
			КонецЕсли;
		КонецЕсли;
		
		#Если Сервер ИЛИ ВнешнееСоединение Тогда
			РезультатПроверкиВывода = ФормированиеПечатныхФормСервер.ПроверитьВыводТабличногоДокумента(ТабДокумент, СтрокаСПодвалом);
		#ИначеЕсли ТолстыйКлиентОбычноеПриложение Тогда	
			РезультатПроверкиВывода = ФормированиеПечатныхФорм.ПроверитьВыводТабличногоДокумента(ТабДокумент, СтрокаСПодвалом);
		#КонецЕсли
						
		Если НЕ РезультатПроверкиВывода Тогда
			
			Если КоличествоСтрок > 0 Тогда
				// Вывод разделителя и заголовка таблицы на новой странице
				ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				ТабДокумент.Вывести(ОбластьМакетаЗаголовокТаблицы);
				КоличествоСтраниц = КоличествоСтраниц + 1;
			КонецЕсли;
			
		КонецЕсли;
		
		ТабДокумент.Вывести(ОбластьМакета);

	КонецЦикла;
	
	КоличествоЛистов = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Документ составлен на%1%2 %3'"), Символы.ПС, КоличествоСтраниц,
		ОбщегоНазначения.ФормаМножественногоЧисла(
			НСтр("ru = 'листе'"), НСтр("ru = 'листах'"), НСтр("ru = 'листах'"), КоличествоСтраниц));
	ДанныеДляПечати.Вставить("КоличествоЛистов", КоличествоЛистов);

	Если КоличествоСтрок > 0 Тогда
		ТабДокумент.Область(ТабДокумент.ВысотаТаблицы,,ТабДокумент.ВысотаТаблицы,).ВместеСоСледующим = Истина;
	КонецЕсли; 
		
	// Выводим строку "Всего к оплате"
	Если ДанныеДляПечати.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАванс
	ИЛИ ДанныеДляПечати.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитента Тогда
		Если РеализацияТоваровОблагаемыхНДСУПокупателя Тогда
			ОбластьМакетаИтого.Параметры.ИтогоСтоимость = ВыборкаСтрокТовары.Итог("СуммаСНДС");
		Иначе
			ОбластьМакетаИтого.Параметры.ИтогоСтоимость = "--";
		КонецЕсли;
	Иначе
		ОбластьМакетаИтого.Параметры.ИтогоСтоимость = ВыборкаСтрокТовары.Итог("СуммаБезНДС");
	КонецЕсли;
	
	ИтогоСуммаНДС = ВыборкаСтрокТовары.Итог("СуммаНДС");
	Если ЭтоПечатьУПД И ДанныеДляПечати.СтатусУПД = 2 Тогда
		ОбластьМакетаИтого.Параметры.ИтогоСуммаНДС = ?(ИтогоСуммаНДС <> 0, ИтогоСуммаНДС, "--");
	ИначеЕсли ДанныеДляПечати.СчетФактураБезНДС Тогда
		ОбластьМакетаИтого.Параметры.ИтогоСуммаНДС = "без НДС";
	Иначе
		ОбластьМакетаИтого.Параметры.ИтогоСуммаНДС = ИтогоСуммаНДС;
	КонецЕсли;
	ОбластьМакетаИтого.Параметры.ИтогоВсего = ВыборкаСтрокТовары.Итог("СуммаСНДС");
	
	Если РеализацияТоваровОблагаемыхНДСУПокупателя Тогда
		ОбластьМакетаИтого.Параметры.ИтогоСуммаНДС = "--";
		ОбластьМакетаИтого.Параметры.ИтогоВсего = "--";
	КонецЕсли;
	
	ТабДокумент.Вывести(ОбластьМакетаИтого);
	
	// Выводим подвал
	ОбластьМакетаПодвал.Параметры.Заполнить(ДанныеДляПечати);
							
	Если ДанныеДляПечати.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НалоговыйАгент Тогда
		ОбластьМакетаПодвал.Параметры.Свидетельство = ОписаниеОрганизации(
			СведенияОПокупателе, "Свидетельство,");
	ИначеЕсли ТипЗнч(СведенияОПоставщике) <> Тип("Массив") Тогда
		ОбластьМакетаПодвал.Параметры.Свидетельство = ОписаниеОрганизации(
			СведенияОПоставщике, "Свидетельство,");
	КонецЕсли;
	
	ТабДокумент.Вывести(ОбластьМакетаПодвал);
 	
	// Устанавливаем параметры печати и колонтитулы
	ТабДокумент.ВерхнийКолонтитул.Выводить          = Истина;
	ТабДокумент.ВерхнийКолонтитул.НачальнаяСтраница = 2;
	ТабДокумент.ВерхнийКолонтитул.ВертикальноеПоложение = ВертикальноеПоложение.Низ;
	ТабДокумент.ВерхнийКолонтитул.ТекстСлева   = ЗаголовокДляПечати;
	ТабДокумент.ВерхнийКолонтитул.ТекстСправа  = "Лист [&НомерСтраницы]";
	
КонецПроцедуры

// Процедура пересчитывает ДанныеДляПечати.ТабличнаяЧасть в рубли для договоров в у.е.
// Вызывается из процедуры «Печать»
Процедура ПерезаполнитьСуммыПоУЕвРублях(ДанныеДляПечати, ТекущееОснование, Ссылка)
	
	Если ТипЗнч(Ссылка) = Тип("Структура") Тогда
     	СтруктураШапкиДокумента = Новый Структура("Организация, Контрагент, ДоговорКонтрагента");
		ЗаполнитьЗначенияСвойств(СтруктураШапкиДокумента, Ссылка);
	Иначе
		СтруктураШапкиДокумента = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(Ссылка, "Организация, Контрагент, ДоговорКонтрагента");
	КонецЕсли;
	
	СуммаВзаиморасчетов = УчетНДСФормированиеДвижений.ПолучитьСуммуВзаиморасчетов(Ссылка, ТекущееОснование, СтруктураШапкиДокумента);
	
	РасчетСуммыНДСПоСтавке = РасчетНДСвРубляхПоСтавкеДокумента(ДанныеДляПечати.Дата);
	
	СтрокиСчетаФактуры = ДанныеДляПечати.ТабличнаяЧасть;
	СтрокиСчетаФактуры.Колонки.Добавить("СуммаБезНДС");
	МассивРаспределения = Новый Массив;
	Для Каждого СтрокаСчетаФактуры Из СтрокиСчетаФактуры Цикл
		СуммаСНДС = СтрокаСчетаФактуры.Сумма + ?(СтрокаСчетаФактуры.СуммаВключаетНДС, 0, СтрокаСчетаФактуры.СуммаНДС);
		СуммаБезНДС = СуммаСНДС - СтрокаСчетаФактуры.СуммаНДС;

		МассивРаспределения.Добавить(СуммаСНДС);
		СтрокаСчетаФактуры.СуммаБезНДС = СуммаБезНДС;
		
	КонецЦикла;
	
	СтрокиСчетаФактуры.Колонки.Добавить("СуммаРублевая");
	РаспределитьСуммуПоСтолбцу(МассивРаспределения, СуммаВзаиморасчетов, СтрокиСчетаФактуры, "СуммаРублевая");
	
	Для Каждого СтрокаСчетаФактуры Из СтрокиСчетаФактуры Цикл
		Если РасчетСуммыНДСПоСтавке Тогда
			//Выделение суммы НДС, Расчет суммы без НДС
			ЗначениеСтавкиНДС = ПолучитьСтавкуНДС(СтрокаСчетаФактуры.СтавкаНДС);
			
			СтрокаСчетаФактуры.СуммаНДС = ?(ЗначениеСтавкиНДС = 0, 0, Окр(СтрокаСчетаФактуры.СуммаРублевая * ЗначениеСтавкиНДС/(100+ЗначениеСтавкиНДС),2));
			СтрокаСчетаФактуры.Сумма = СтрокаСчетаФактуры.СуммаРублевая - СтрокаСчетаФактуры.СуммаНДС;
			
		Иначе
			МассивРаспределения.Очистить();
			МассивРаспределения.Добавить(СтрокаСчетаФактуры.СуммаБезНДС);
			МассивРаспределения.Добавить(СтрокаСчетаФактуры.СуммаНДС);
			МассивРаспределенныхСумм = ОбщегоНазначения.РаспределитьПропорционально(СтрокаСчетаФактуры.СуммаРублевая, МассивРаспределения);
			Если МассивРаспределенныхСумм <> Неопределено Тогда
				СтрокаСчетаФактуры.Сумма = МассивРаспределенныхСумм[0];
				СтрокаСчетаФактуры.СуммаНДС = МассивРаспределенныхСумм[1];
			КонецЕсли;
		КонецЕсли;
		
		Если СтрокаСчетаФактуры.СуммаВключаетНДС Тогда
			СтрокаСчетаФактуры.Сумма = СтрокаСчетаФактуры.Сумма+СтрокаСчетаФактуры.СуммаНДС;
		КонецЕсли;

	КонецЦикла;
	СтрокиСчетаФактуры.Колонки.Удалить(СтрокиСчетаФактуры.Колонки.СуммаБезНДС);
	СтрокиСчетаФактуры.ЗаполнитьЗначения(0, "Цена");
	
КонецПроцедуры

Процедура ВывестиПодвалУниверсальногоПередаточногоДокументаВТабличныйДокумент(ТабДокумент, Макет, ДанныеДляПечати) Экспорт
	
	СведенияОПоставщике = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ДанныеДляПечати.Поставщик, ДанныеДляПечати.Дата);
		
	КПП = ОписаниеОрганизации(СведенияОПоставщике, "КПП,", Ложь);
	Если ЗначениеЗаполнено(КПП) Тогда
		КПП 	 = "/" + КПП;
	КонецЕсли;
	ИННпоставщика = ОписаниеОрганизации(СведенияОПоставщике, "ИНН,", Ложь);
	ИННпоставщика = ?(ПустаяСтрока(ИННпоставщика), "", "ИНН") + ?(ПустаяСтрока(ИННпоставщика) ИЛИ ПустаяСтрока(КПП), " ", "/КПП ")
 		+ ИННпоставщика + КПП;
	
	СведенияОПокупателе   = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ДанныеДляПечати.Покупатель, ДанныеДляПечати.Дата);
	СведенияОПодразделенииПокупателя = Неопределено;
	Если ДанныеДляПечати.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию Тогда
		
		Если ТипЗнч(ДанныеДляПечати.Покупатель) = Тип("СправочникСсылка.Контрагенты") И ЗначениеЗаполнено(ДанныеДляПечати.Покупатель) Тогда
			РеквизитыПокупателя = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(ДанныеДляПечати.Покупатель, "ГоловнойКонтрагент, ОбособленноеПодразделение");
			Если РеквизитыПокупателя.ОбособленноеПодразделение И ЗначениеЗаполнено(РеквизитыПокупателя.ГоловнойКонтрагент) Тогда
				СведенияОПокупателе = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(РеквизитыПокупателя.ГоловнойКонтрагент, ДанныеДляПечати.Дата);
				СведенияОПодразделенииПокупателя = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ДанныеДляПечати.Покупатель, ДанныеДляПечати.Дата);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ДанныеДляПечати.Свойство("КППКонтрагента") И ЗначениеЗаполнено(ДанныеДляПечати.КППКонтрагента) Тогда
		КПП = ДанныеДляПечати.КППКонтрагента;
	ИначеЕсли СведенияОПодразделенииПокупателя <> Неопределено Тогда
		КПП = ОписаниеОрганизации(СведенияОПодразделенииПокупателя, "КПП,", Ложь);
	Иначе
		КПП = ОписаниеОрганизации(СведенияОПокупателе, "КПП,", Ложь);
	КонецЕсли;	
	
	ИННПокупателя = ОписаниеОрганизации(СведенияОПокупателе, "ИНН,", Ложь);
	ИННПокупателя = ?(ПустаяСтрока(ИННПокупателя), "", "ИНН") + ?(ПустаяСтрока(ИННПокупателя) ИЛИ ПустаяСтрока(КПП), " " , "/КПП ")
		+ ИННПокупателя + ?(ПустаяСтрока(КПП), "" , "/") + КПП;
		
	Если ЗначениеЗаполнено(ДанныеДляПечати.ДатаОтгрузкиПередачи) Тогда
		
		ШаблонДатыОтгрузкиПередачи = Формат(ДанныеДляПечати.ДатаОтгрузкиПередачи, "ДФ='« дд » %1 ММММ %2 гггг  %3'");
		
		ДлинаДаты = 32;
		ДобавитьСимволовСлева  = Окр((ДлинаДаты - СтрДлина(ШаблонДатыОтгрузкиПередачи))/2, 0);
		ДобавитьСимволовСправа = ДлинаДаты - СтрДлина(ШаблонДатыОтгрузкиПередачи) - ДобавитьСимволовСлева;
		
		ДатаОтгрузкиПередачи = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонДатыОтгрузкиПередачи, 
			СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов(" ", ДобавитьСимволовСлева),
			СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов(" ", ДобавитьСимволовСправа),
			"года");
	Иначе
		ДатаОтгрузкиПередачи = "«      »                    20     года";
	КонецЕсли;
	
	ОбластьМакета = Макет.ПолучитьОбласть("ПодвалНакладной");
	ОбластьМакета.Параметры.Заполнить(ДанныеДляПечати);
	ОбластьМакета.Параметры.ДатаОтгрузкиПередачи = ДатаОтгрузкиПередачи;
	ОбластьМакета.Параметры.ПредставлениеОрганизации = ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,")
		+ ?(ПустаяСтрока(ИННпоставщика), "" , ", ") + ИННпоставщика;
	ОбластьМакета.Параметры.ПредставлениеКонтрагента = ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование,")
		+ ?(ПустаяСтрока(ИННПокупателя), "" , ", ") + ИННПокупателя;
	
	ТабДокумент.Вывести(ОбластьМакета);

КонецПроцедуры    

Функция ПодготовитьДанныеДляПечатиУниверсальногоПередаточногоДокумента(ДанныеДокумента)
	
	ДанныеДляПечати = Неопределено;
	УчетнаяПолитика = Неопределено;
	
	ДанныеСчетаФактуры = Новый Структура;
	ДанныеСчетаФактуры.Вставить("Номер", 			  ДанныеДокумента.Номер);
	ДанныеСчетаФактуры.Вставить("Дата", 			  ДанныеДокумента.Дата);
	ДанныеСчетаФактуры.Вставить("Организация", 		  ДанныеДокумента.Организация);
	ДанныеСчетаФактуры.Вставить("Контрагент", 		  ДанныеДокумента.Контрагент);
	ДанныеСчетаФактуры.Вставить("ДоговорКонтрагента", ДанныеДокумента.ДоговорКонтрагента);
	ДанныеСчетаФактуры.Вставить("ВидСчетаФактуры", 	  Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию);
	ДанныеСчетаФактуры.Вставить("Руководитель", 	  ДанныеДокумента.Руководитель);
	ДанныеСчетаФактуры.Вставить("ГлавныйБухгалтер",   ДанныеДокумента.ГлавныйБухгалтер);
	ДанныеСчетаФактуры.Вставить("ДоговорКонтрагента", ДанныеДокумента.ДоговорКонтрагента);
	
	ДанныеСчетаФактуры.Вставить("НомерИсходногоДокумента", 			ДанныеДокумента.Номер);
	ДанныеСчетаФактуры.Вставить("ДатаИсходногоДокумента", 			ДанныеДокумента.Дата);  
	ДанныеСчетаФактуры.Вставить("НомерПлатежноРасчетногоДокумента", "");
	ДанныеСчетаФактуры.Вставить("ДатаПлатежноРасчетногоДокумента", 	"");

	ДанныеДляПечати = СобратьДанныеДляПечатиСчетФактурыВыданногоПоДокументу(ДанныеДокумента.ДокументСсылка, ДанныеСчетаФактуры, УчетнаяПолитика);
	Если ТипЗнч(ДанныеДляПечати) = Тип("Соответствие") Тогда
		Возврат Неопределено;
	ИначеЕсли ДанныеДляПечати = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДанныеДляПечати.Вставить("ДатаСчетаФактуры",		ДанныеСчетаФактуры.Дата);
	ДанныеДляПечати.Вставить("ВидСчетаФактуры", 		ДанныеСчетаФактуры.ВидСчетаФактуры);
	ДанныеДляПечати.Вставить("Исправление", 	 		Ложь);
	ДанныеДляПечати.Вставить("НомерИсправления", 		"");
	ДанныеДляПечати.Вставить("ДоговорКонтрагента", 		ДанныеСчетаФактуры.ДоговорКонтрагента);
	ДанныеДляПечати.Вставить("ИдентификаторГосКонтракта", "");
	ДанныеДляПечати.Вставить("КППКонтрагента", 	 		"");
	ДанныеДляПечати.Вставить("ВидАгентскогоДоговора",   
		ОбщегоНазначения.ПолучитьЗначениеРеквизита(ДанныеДокумента.ДоговорКонтрагента, "ВидАгентскогоДоговора"));
	Если НЕ ДанныеДляПечати.Свойство("СчетФактураБезНДС") Тогда
		ДанныеДляПечати.Вставить("СчетФактураБезНДС", 	Ложь);
	КонецЕсли;
	Если ДанныеДокумента.Свойство("ПередачаНаРеализациюПоКомиссии") И ДанныеДокумента.ПередачаНаРеализациюПоКомиссии Тогда
		ДанныеДляПечати.Вставить("ПередачаНаРеализациюПоКомиссии", ДанныеДокумента.ПередачаНаРеализациюПоКомиссии);
		Если ДанныеДляПечати.Грузоотправитель = "он же" Тогда
			ДанныеДляПечати.Грузоотправитель = ДанныеДляПечати.Поставщик;
		КонецЕсли;
	КонецЕсли;

	Основание = Строка(ДанныеДокумента.ДоговорКонтрагента); 
	Если ДанныеДокумента.Свойство("Доверенность") И ЗначениеЗаполнено(ДанныеДокумента.Доверенность) Тогда
		ДанныеДляПечати.Вставить("Основание", Основание + ?(ПустаяСтрока(Основание), "", "; ") + ДанныеДокумента.Доверенность);
	Иначе
		ДанныеДляПечати.Вставить("Основание", Основание);	
	КонецЕсли;
	
	СформироватьФИОКладовщикаДляПечатиУниверсальногоПередаточногоДокумента(ДанныеДляПечати);
	
	// Дата совершения факта хозяйственной жизни. Не может быть ранее даты составления УПД.
	Если ДанныеДокумента.Свойство("ДатаОтгрузкиПередачи") Тогда
		ДанныеДляПечати.Вставить("ДатаОтгрузкиПередачи", ДанныеДокумента.ДатаОтгрузкиПередачи);
	Иначе
		ДанныеДляПечати.Вставить("ДатаОтгрузкиПередачи", ДанныеДокумента.Дата);
	КонецЕсли;
	
	ДанныеДляПечати.Вставить("СтатусУПД", 			 2);
	
	Возврат ДанныеДляПечати;
	
КонецФункции

Функция ПечатьУниверсальногоПередаточногоДокумента(ДанныеДокумента, СчетФактураТребуется, ТабДокумент = Неопределено, СтруктураОтбораСчетаФактуры = Неопределено) Экспорт
	
	Если ДанныеДокумента.Дата < '20130101' Тогда
		ТекстСообщения = НСтр("ru = 'Применение формы универсального передаточного документа возможно только с 01 января 2013 года!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат Неопределено;
	КонецЕсли;

	Если СтруктураОтбораСчетаФактуры = Неопределено Тогда
		СчетФактура = НайтиПодчиненныйСчетФактуру(ДанныеДокумента.ДокументСсылка, "СчетФактураВыданный");
	Иначе
		СчетФактура = НайтиПодчиненныйСчетФактуру(ДанныеДокумента.ДокументСсылка, "СчетФактураВыданный", СтруктураОтбораСчетаФактуры);
	КонецЕсли;
	
	Если ТабДокумент = Неопределено Тогда
		ТабДокумент = Новый ТабличныйДокумент;
		// Устанавливаем параметры печати и колонтитулы
		ТабДокумент.ОриентацияСтраницы 	= ОриентацияСтраницы.Ландшафт;
		ТабДокумент.ПолеСверху 			= 12;
		ТабДокумент.ПолеСлева  			= 0;
		ТабДокумент.ПолеСнизу  			= 0;
		ТабДокумент.ПолеСправа 			= 0;
		ТабДокумент.АвтоМасштаб 		= Истина;
		
		Если ДанныеДокумента.Дата < '20171001' Тогда
			ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_УниверсальныйПередаточныйДокумент";
		Иначе
			ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_УниверсальныйПередаточныйДокумент981";
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СчетФактура) ИЛИ СчетФактураТребуется Тогда
		
		// УПД печатается из документа счет-фактура
		Если НЕ ЗначениеЗаполнено(СчетФактура) Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'По документу ""%1"" не выписан счет-фактура или он помечен на удаление!'"), ДанныеДокумента.ДокументСсылка);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Возврат Неопределено;
		КонецЕсли;
		
		РеквизитыСФ = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(СчетФактура, "Дата, ВидСчетаФактуры, Исправление,НомерИсправления,
			|СчетФактураБезНДС, КППКонтрагента, ИдентификаторГосКонтракта");
		ДанныеДокумента.Вставить("Ссылка", 					СчетФактура); 
		ДанныеДокумента.Вставить("Дата", 					РеквизитыСФ.Дата);
		ДанныеДокумента.Вставить("ВидСчетаФактуры", 		РеквизитыСФ.ВидСчетаФактуры);
		ДанныеДокумента.Вставить("Исправление", 	 		РеквизитыСФ.Исправление);
		ДанныеДокумента.Вставить("НомерИсправления", 		РеквизитыСФ.НомерИсправления);
		ДанныеДокумента.Вставить("СчетФактураБезНДС", 		РеквизитыСФ.СчетФактураБезНДС);
		ДанныеДокумента.Вставить("КППКонтрагента", 	 		РеквизитыСФ.КППКонтрагента);
		ДанныеДокумента.Вставить("ИдентификаторГосКонтракта", РеквизитыСФ.ИдентификаторГосКонтракта);
		
		ДанныеДляПечати = Документы.СчетФактураВыданный.ПодготовитьДанныеДляПечатиУниверсальногоПередаточногоДокумента(ДанныеДокумента);
		Если ДанныеДляПечати = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Если ДанныеДокумента.Свойство("ДатаОтгрузкиПередачи") Тогда
			ДанныеДляПечати.Вставить("ДатаОтгрузкиПередачи", ДанныеДокумента.ДатаОтгрузкиПередачи);
		КонецЕсли;
		
		Документы.СчетФактураВыданный.ПечатьУниверсальногоПередаточногоДокумента(ДанныеДляПечати, ТабДокумент);

		Возврат ТабДокумент;
		
	КонецЕсли;
	
	// УПД печатается по статусу 2
	ДанныеДляПечати = ПодготовитьДанныеДляПечатиУниверсальногоПередаточногоДокумента(ДанныеДокумента);
	Если ДанныеДляПечати = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ДанныеДляПечати.Дата < '20171001' Тогда
		Макет = ПолучитьОбщийМакет("УниверсальныйПередаточныйДокумент");
	Иначе
		Макет = ПолучитьОбщийМакет("УниверсальныйПередаточныйДокумент981");
	КонецЕсли;

	ВывестиСчетФактуруВТабличныйДокумент(ТабДокумент, Макет, ДанныеДляПечати);

	ВывестиПодвалУниверсальногоПередаточногоДокументаВТабличныйДокумент(ТабДокумент, Макет, ДанныеДляПечати);
	
	Возврат ТабДокумент;
	
КонецФункции

// Возвращает признак применения Федерального Закона 134-ФЗ
//
// Параметры
// 	Дата  	- 	тип дата, в данном параметре передается
//            	дата на которую необходимо определить признак применения 134-ФЗ
// Возвращаемое значение:
//  Булево - 	признак применения
//				Истина 	- ФЗ-134 применяется
//				Ложь 	- ФЗ-134 не применяется
//
Функция ВедетсяУчетНДСПоФЗ134(Дата) Экспорт

	НачалоПримененияФЗ134 = '20140101';
	
	Если Дата < НачалоПримененияФЗ134 Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;

КонецФункции // ВедетсяУчетНДСПоФЗ134()

Функция ВедетсяУчетНДСПоФЗ81(Дата) Экспорт

	НачалоПримененияФЗ81 = '20140701';
	
	Если Дата < НачалоПримененияФЗ81 Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;

КонецФункции // ВедетсяУчетНДСПоФЗ81()

// Возвращает признак применения Федерального Закона 56-ФЗ
//
// Параметры
// Дата - тип дата, в данном параметре передается
//        дата на которую необходимо определить признак применения 56-ФЗ
// Возвращаемое значение:
//  Булево - признак применения
//           Истина - ФЗ-56 применяется
//           Ложь   - ФЗ-56 не применяется
//
Функция ВедетсяУчетНДСПоФЗ56(Дата) Экспорт
	
	НачалоПримененияФЗ56 = '20170701';
	
	Если Дата < НачалоПримененияФЗ56 Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции // ВедетсяУчетНДСПоФЗ56()

// Возвращает признак применения Федерального Закона от 27.11.2017 №335-ФЗ,
// который возлагает исчисление НДС на покупателя товаров, перечисленных в п.8 ст. 161:
// - лом и отходы черных и цветных металлов,
// - алюминий вторичный и его сплавы,
// - сырые шкуры животных.
// Параметры
// Дата - тип дата, в данном параметре передается
//        дата на которую необходимо определить признак применения 335-ФЗ
// Возвращаемое значение:
//  Булево - признак применения
//           Истина - ФЗ применяется
//           Ложь   - ФЗ не применяется
Функция ВедетсяУчетНДСПоФЗ335(Дата) Экспорт
	
	НачалоПримененияФЗ335 = '20180101';
	
	Если Дата < НачалоПримененияФЗ335 Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

// Возвращает признак применения постановления Правительства от 19.01.2019 г. № 15
// в котором утверждена форма книги продаж с добавлением граф по ставке 20%
// и отменена обязанность по выставлению покупателем счета-фактуры при возврате товаров, принятых на учет.
// Дата вступления в силу постановления 01.04.2019.
// Однако постановление можно применять с 1 января 2019 года,
// т.к. в соответствии с НК РФ ставка 20% применяется именно с этого момента.
Функция ПрименяетсяПостановление15(Период) Экспорт
	
	Возврат Период >= '20190101';
	
КонецФункции

Функция РеализацияТоваровОблагаемыхНДСУПокупателя(Дата, Договор) Экспорт
	
	Если ЗначениеЗаполнено(Дата) И ЗначениеЗаполнено(Договор) Тогда
		ПокупательНалоговыйАгентПоНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			Договор, "РеализацияТоваровОблагаемыхНДСУПокупателя");
		ВедетсяУчетНДСПоФЗ335 = ВедетсяУчетНДСПоФЗ335(Дата);
		
		Возврат ПокупательНалоговыйАгентПоНДС И ВедетсяУчетНДСПоФЗ335;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция СобратьДанныеДляПечатиКорректировочногоСчетаФактуры(ТекущееОснование, Ссылка) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ДокументОснование", ТекущееОснование);
	Запрос.УстановитьПараметр("ПустойКонтрагент", Справочники.Контрагенты.ПустаяСсылка());
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КорректировкаРеализации.Организация,
	|	КорректировкаРеализации.Организация КАК Поставщик,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(КорректировкаРеализации.Грузоотправитель, &ПустойКонтрагент) = &ПустойКонтрагент
	|			ТОГДА ""он же""
	|		ИНАЧЕ КорректировкаРеализации.Грузоотправитель
	|	КОНЕЦ КАК Грузоотправитель,
	|	КорректировкаРеализации.Контрагент КАК Покупатель,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(КорректировкаРеализации.Грузополучатель, &ПустойКонтрагент) = &ПустойКонтрагент
	|			ТОГДА КорректировкаРеализации.Контрагент
	|		ИНАЧЕ КорректировкаРеализации.Грузополучатель
	|	КОНЕЦ КАК Грузополучатель,
	|	КорректировкаРеализации.СуммаДокумента КАК Сумма,
	|	КорректировкаРеализации.ВалютаДокумента КАК Валюта,
	|	КорректировкаРеализации.УчитыватьНДС КАК УчитыватьНДС,
	|	КорректировкаРеализации.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	КорректировкаРеализации.АдресДоставки КАК АдресДоставки,
	|	КорректировкаРеализации.Подразделение КАК Подразделение,
	|	КорректировкаРеализации.ДоговорКонтрагента.ВидАгентскогоДоговора КАК ВидАгентскогоДоговора
	|ПОМЕСТИТЬ ВТИсходныйДокумент
	|ИЗ
	|	Документ.КорректировкаРеализации КАК КорректировкаРеализации
	|ГДЕ
	|	КорректировкаРеализации.Ссылка = &ДокументОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТИсходныйДокумент.Организация,
	|	ВТИсходныйДокумент.Покупатель,
	|	ВТИсходныйДокумент.Грузополучатель,
	|	ВТИсходныйДокумент.Поставщик,
	|	ВТИсходныйДокумент.Грузоотправитель,
	|	ВТИсходныйДокумент.Сумма,
	|	ВТИсходныйДокумент.Валюта,
	|	ВТИсходныйДокумент.УчитыватьНДС,
	|	ВТИсходныйДокумент.СуммаВключаетНДС,
	|	ВТИсходныйДокумент.Подразделение,
	|	ВТИсходныйДокумент.ВидАгентскогоДоговора
	|ИЗ
	|	ВТИсходныйДокумент КАК ВТИсходныйДокумент";
	
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	
	Поставщик = Шапка.Поставщик;
	Если ЗначениеЗаполнено(Поставщик.ГоловнаяОрганизация) Тогда 
		Поставщик = Поставщик.ГоловнаяОрганизация;
	КонецЕсли;
	
	Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
		
		ДанныеДокумента = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(Ссылка, "Дата,Исправление,ВидСчетаФактуры,НомерИсправления,СчетФактураБезНДС,КППКонтрагента,ВидСчетаФактуры,
																			|НомерИсправляемогоКорректировочногоДокумента,ДатаИсправляемогоКорректировочногоДокумента, ИдентификаторГосКонтракта");
		ДанныеДокумента.Вставить("Номер",ОбщегоНазначения.ПолучитьНомерНаПечать(Ссылка));
		
	Иначе
		
		ДанныеДокумента = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(Ссылка, "Дата,Организация,Контрагент,ДоговорКонтрагента");
		
		ДанныеДокумента.Вставить("Номер",                            ОбщегоНазначения.ПолучитьНомерНаПечать(Ссылка));
		ДанныеДокумента.Вставить("ВидСчетаФактуры",                  Перечисления.ВидСчетаФактурыВыставленного.Корректировочный);
		ДанныеДокумента.Вставить("Исправление",                      Ложь);
		ДанныеДокумента.Вставить("НомерИсправления",                 "");
		ДанныеДокумента.Вставить("НомерИсправляемогоКорректировочногоДокумента", "");
		ДанныеДокумента.Вставить("ДатаИсправляемогоКорректировочногоДокумента",  '00010101');
		ДанныеДокумента.Вставить("Продавец",                         ДанныеДокумента.Контрагент);
		ДанныеДокумента.Вставить("КППКонтрагента",                   "");
		ДанныеДокумента.Вставить("СчетФактураБезНДС",                Ложь);
		ДанныеДокумента.Вставить("ИдентификаторГосКонтракта",        "");
	КонецЕсли;
		
	ДанныеДляПечати = Новый Структура();

	ДанныеДляПечати.Вставить("Организация",       	Шапка.Организация);
	ДанныеДляПечати.Вставить("Поставщик",         	Поставщик);
	ДанныеДляПечати.Вставить("Валюта",			  	Шапка.Валюта);
	ДанныеДляПечати.Вставить("Покупатель",        	Шапка.Покупатель);
	ДанныеДляПечати.Вставить("СуммаВключаетНДС",  	Шапка.СуммаВключаетНДС);
	ДанныеДляПечати.Вставить("Подразделение",     	Шапка.Подразделение);
	ДанныеДляПечати.Вставить("ВидАгентскогоДоговора",Шапка.ВидАгентскогоДоговора);	
	ДанныеДляПечати.Вставить("ВидСчетаФактуры",		ДанныеДокумента.ВидСчетаФактуры);
	ДанныеДляПечати.Вставить("Ссылка",         		Ссылка);
	ДанныеДляПечати.Вставить("Номер",               ?(ДанныеДокумента.Исправление, ДанныеДокумента.НомерИсправляемогоКорректировочногоДокумента, ДанныеДокумента.Номер));
	ДанныеДляПечати.Вставить("Дата",                ?(ДанныеДокумента.Исправление, ДанныеДокумента.ДатаИсправляемогоКорректировочногоДокумента, ДанныеДокумента.Дата));
	ДанныеДляПечати.Вставить("НомерИсправления",    ?(ДанныеДокумента.Исправление, ДанныеДокумента.НомерИсправления, "--"));
	ДанныеДляПечати.Вставить("ДатаИсправления",     ?(ДанныеДокумента.Исправление, ДанныеДокумента.Дата, '00010101'));
	ДанныеДляПечати.Вставить("ДатаСчетаФактуры",    ДанныеДокумента.Дата);
	ДанныеДляПечати.Вставить("СчетФактураБезНДС",   ДанныеДокумента.СчетФактураБезНДС);
	ДанныеДляПечати.Вставить("КППКонтрагента",      ДанныеДокумента.КППКонтрагента);
	ДанныеДляПечати.Вставить("ВидСчетаФактуры",     ДанныеДокумента.ВидСчетаФактуры);
	ДанныеДляПечати.Вставить("ИдентификаторГосКонтракта", ДанныеДокумента.ИдентификаторГосКонтракта);
	
	Руководители = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизаций(Шапка.Организация, ДанныеДокумента.Дата);
	
	ДанныеДляПечати.Вставить(?(РегламентированнаяОтчетность.ЭтоПБОЮЛ(Шапка.Организация), "ФИОПБОЮЛ", "ФИОРуководителя"), Руководители.Руководитель);
	ДанныеДляПечати.Вставить("ФИОГлавногоБухгалтера", Руководители.ГлавныйБухгалтер);
			
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КорректировкаРеализацииТовары.Ссылка,
	|	КорректировкаРеализацииТовары.НомерСтроки КАК НомерСтроки,
	|	КорректировкаРеализацииТовары.Номенклатура,
	|	ЕСТЬNULL(КорректировкаРеализацииТовары.Номенклатура.Код, """") КАК ТоварКод,
	|	ЕСТЬNULL(КорректировкаРеализацииТовары.Номенклатура.Артикул, """") КАК ТоварАртикул,
	|	ВЫРАЗИТЬ(КорректировкаРеализацииТовары.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК НаименованиеТовара,
	|	ВЫБОР
	|		КОГДА КорректировкаРеализацииТовары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС0)
	|			ТОГДА КорректировкаРеализацииТовары.КодТНВЭД
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.КлассификаторТНВЭД.ПустаяСсылка)
	|	КОНЕЦ КАК ТоварКодТНВЭД,
	|	ВЫБОР
	|		КОГДА КорректировкаРеализацииТовары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС0)
	|			ТОГДА ВЫБОР
	|					КОГДА КорректировкаРеализацииТовары.КодТНВЭДДоИзменения = ЗНАЧЕНИЕ(Справочник.КлассификаторТНВЭД.ПустаяСсылка)
	|						ТОГДА КорректировкаРеализацииТовары.КодТНВЭД
	|					ИНАЧЕ КорректировкаРеализацииТовары.КодТНВЭДДоИзменения
	|				КОНЕЦ
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.КлассификаторТНВЭД.ПустаяСсылка)
	|	КОНЕЦ КАК ТоварКодТНВЭДДоИзменения,
	|	КорректировкаРеализацииТовары.СерияНоменклатуры КАК Серия,
	|	КорректировкаРеализацииТовары.ХарактеристикаНоменклатуры КАК Характеристика,
	|	КорректировкаРеализацииТовары.ЕдиницаИзмерения КАК НаименованиеЕдиницыИзмерения,
	|	КорректировкаРеализацииТовары.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код КАК ЕдиницаИзмеренияКод,
	|	КорректировкаРеализацииТовары.СтавкаНДС,
	|	КорректировкаРеализацииТовары.СтавкаНДС КАК СтавкаНДСПослеИзменения,
	|	ИсходныйДокумент.СуммаВключаетНДС,
	|	КорректировкаРеализацииТовары.СуммаНДС КАК СуммаНДСПослеИзменения,
	|	КорректировкаРеализацииТовары.СуммаНДСДоИзменения,
	|	КорректировкаРеализацииТовары.Количество КАК КоличествоПослеИзменения,
	|	КорректировкаРеализацииТовары.КоличествоДоИзменения,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА КорректировкаРеализацииТовары.Количество = 0
	|				ТОГДА 0
	|			ИНАЧЕ ВЫБОР
	|					КОГДА ИсходныйДокумент.СуммаВключаетНДС
	|						ТОГДА (КорректировкаРеализацииТовары.Сумма - КорректировкаРеализацииТовары.СуммаНДС) / КорректировкаРеализацииТовары.Количество
	|					ИНАЧЕ КорректировкаРеализацииТовары.Сумма / КорректировкаРеализацииТовары.Количество
	|				КОНЕЦ
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК ЦенаПослеИзменения,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА КорректировкаРеализацииТовары.КоличествоДоИзменения = 0
	|				ТОГДА 0
	|			ИНАЧЕ ВЫБОР
	|					КОГДА ИсходныйДокумент.СуммаВключаетНДС
	|						ТОГДА (КорректировкаРеализацииТовары.СуммаДоИзменения - КорректировкаРеализацииТовары.СуммаНДСДоИзменения) / КорректировкаРеализацииТовары.КоличествоДоИзменения
	|					ИНАЧЕ КорректировкаРеализацииТовары.ЦенаДоИзменения
	|				КОНЕЦ
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК ЦенаДоИзменения,
	|	ВЫБОР
	|		КОГДА ИсходныйДокумент.СуммаВключаетНДС
	|			ТОГДА КорректировкаРеализацииТовары.Сумма - КорректировкаРеализацииТовары.СуммаНДС
	|		ИНАЧЕ КорректировкаРеализацииТовары.Сумма
	|	КОНЕЦ КАК СтоимостьБезНДСПослеИзменения,
	|	ВЫБОР
	|		КОГДА ИсходныйДокумент.СуммаВключаетНДС
	|			ТОГДА КорректировкаРеализацииТовары.СуммаДоИзменения - КорректировкаРеализацииТовары.СуммаНДСДоИзменения
	|		ИНАЧЕ КорректировкаРеализацииТовары.СуммаДоИзменения
	|	КОНЕЦ КАК СтоимостьБезНДСДоИзменения,
	|	ВЫБОР
	|		КОГДА ИсходныйДокумент.СуммаВключаетНДС
	|			ТОГДА КорректировкаРеализацииТовары.Сумма
	|		ИНАЧЕ КорректировкаРеализацииТовары.Сумма + КорректировкаРеализацииТовары.СуммаНДС
	|	КОНЕЦ КАК СтоимостьСНДСПослеИзменения,
	|	ВЫБОР
	|		КОГДА ИсходныйДокумент.СуммаВключаетНДС
	|			ТОГДА КорректировкаРеализацииТовары.СуммаДоИзменения
	|		ИНАЧЕ КорректировкаРеализацииТовары.СуммаДоИзменения + КорректировкаРеализацииТовары.СуммаНДСДоИзменения
	|	КОНЕЦ КАК СтоимостьСНДСДоИзменения,
	|	ВЫБОР
	|		КОГДА КорректировкаРеализацииТовары.СуммаНДСДоИзменения - КорректировкаРеализацииТовары.СуммаНДС > 0
	|			ТОГДА КорректировкаРеализацииТовары.СуммаНДСДоИзменения - КорректировкаРеализацииТовары.СуммаНДС
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК РазницаНДСУменьшение,
	|	ВЫБОР
	|		КОГДА КорректировкаРеализацииТовары.СуммаНДСДоИзменения - КорректировкаРеализацииТовары.СуммаНДС < 0
	|			ТОГДА (КорректировкаРеализацииТовары.СуммаНДСДоИзменения - КорректировкаРеализацииТовары.СуммаНДС) * -1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК РазницаНДСУвеличение,
	|	ВЫБОР
	|		КОГДА ИсходныйДокумент.СуммаВключаетНДС
	|			ТОГДА ВЫБОР
	|					КОГДА КорректировкаРеализацииТовары.СуммаДоИзменения - КорректировкаРеализацииТовары.СуммаНДСДоИзменения - (КорректировкаРеализацииТовары.Сумма - КорректировкаРеализацииТовары.СуммаНДС) > 0
	|						ТОГДА КорректировкаРеализацииТовары.СуммаДоИзменения - КорректировкаРеализацииТовары.СуммаНДСДоИзменения - (КорректировкаРеализацииТовары.Сумма - КорректировкаРеализацииТовары.СуммаНДС)
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА КорректировкаРеализацииТовары.СуммаДоИзменения - КорректировкаРеализацииТовары.Сумма > 0
	|					ТОГДА КорректировкаРеализацииТовары.СуммаДоИзменения - КорректировкаРеализацииТовары.Сумма
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|	КОНЕЦ КАК РазницаБезНДСУменьшение,
	|	ВЫБОР
	|		КОГДА ИсходныйДокумент.СуммаВключаетНДС
	|			ТОГДА ВЫБОР
	|					КОГДА КорректировкаРеализацииТовары.СуммаДоИзменения - КорректировкаРеализацииТовары.СуммаНДСДоИзменения - (КорректировкаРеализацииТовары.Сумма - КорректировкаРеализацииТовары.СуммаНДС) < 0
	|						ТОГДА (КорректировкаРеализацииТовары.СуммаДоИзменения - КорректировкаРеализацииТовары.СуммаНДСДоИзменения - (КорректировкаРеализацииТовары.Сумма - КорректировкаРеализацииТовары.СуммаНДС)) * -1
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА КорректировкаРеализацииТовары.СуммаДоИзменения - КорректировкаРеализацииТовары.Сумма < 0
	|					ТОГДА (КорректировкаРеализацииТовары.СуммаДоИзменения - КорректировкаРеализацииТовары.Сумма) * -1
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|	КОНЕЦ КАК РазницаБезНДСУвеличение,
	|	ВЫБОР
	|		КОГДА ИсходныйДокумент.СуммаВключаетНДС
	|			ТОГДА ВЫБОР
	|					КОГДА КорректировкаРеализацииТовары.СуммаДоИзменения - КорректировкаРеализацииТовары.Сумма > 0
	|						ТОГДА КорректировкаРеализацииТовары.СуммаДоИзменения - КорректировкаРеализацииТовары.Сумма
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА КорректировкаРеализацииТовары.СуммаДоИзменения + КорректировкаРеализацииТовары.СуммаНДСДоИзменения - (КорректировкаРеализацииТовары.Сумма + КорректировкаРеализацииТовары.СуммаНДС) > 0
	|					ТОГДА КорректировкаРеализацииТовары.СуммаДоИзменения + КорректировкаРеализацииТовары.СуммаНДСДоИзменения - (КорректировкаРеализацииТовары.Сумма + КорректировкаРеализацииТовары.СуммаНДС)
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|	КОНЕЦ КАК РазницаСНДСУменьшение,
	|	ВЫБОР
	|		КОГДА ИсходныйДокумент.СуммаВключаетНДС
	|			ТОГДА ВЫБОР
	|					КОГДА КорректировкаРеализацииТовары.СуммаДоИзменения - КорректировкаРеализацииТовары.Сумма < 0
	|						ТОГДА (КорректировкаРеализацииТовары.СуммаДоИзменения - КорректировкаРеализацииТовары.Сумма) * -1
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА КорректировкаРеализацииТовары.СуммаДоИзменения + КорректировкаРеализацииТовары.СуммаНДСДоИзменения - (КорректировкаРеализацииТовары.Сумма + КорректировкаРеализацииТовары.СуммаНДС) < 0
	|					ТОГДА (КорректировкаРеализацииТовары.СуммаДоИзменения + КорректировкаРеализацииТовары.СуммаНДСДоИзменения - (КорректировкаРеализацииТовары.Сумма + КорректировкаРеализацииТовары.СуммаНДС)) * -1
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|	КОНЕЦ КАК РазницаСНДСУвеличение,
	|	1 КАК НомерТЧ
	|ИЗ
	|	Документ.КорректировкаРеализации.Товары КАК КорректировкаРеализацииТовары,
	|	ВТИсходныйДокумент КАК ИсходныйДокумент
	|ГДЕ
	|	КорректировкаРеализацииТовары.Ссылка = &ДокументОснование
	|	И (КорректировкаРеализацииТовары.Количество <> КорректировкаРеализацииТовары.КоличествоДоИзменения
	|			ИЛИ КорректировкаРеализацииТовары.Сумма <> КорректировкаРеализацииТовары.СуммаДоИзменения
	|			ИЛИ КорректировкаРеализацииТовары.СуммаНДС <> КорректировкаРеализацииТовары.СуммаНДСДоИзменения
	|			ИЛИ КорректировкаРеализацииТовары.Цена <> КорректировкаРеализацииТовары.ЦенаДоИзменения)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КорректировкаРеализацииУслуги.Ссылка,
	|	КорректировкаРеализацииУслуги.НомерСтроки,
	|	КорректировкаРеализацииУслуги.Номенклатура,
	|	ЕСТЬNULL(КорректировкаРеализацииУслуги.Номенклатура.Код, """"),
	|	ЕСТЬNULL(КорректировкаРеализацииУслуги.Номенклатура.Артикул, """"),
	|	ВЫРАЗИТЬ(КорректировкаРеализацииУслуги.Содержание КАК СТРОКА(1000)),
	|	"""",
	|	"""",
	|	NULL,
	|	NULL,
	|	КорректировкаРеализацииУслуги.Номенклатура.ЕдиницаХраненияОстатков,
	|	КорректировкаРеализацииУслуги.Номенклатура.ЕдиницаХраненияОстатков.ЕдиницаПоКлассификатору.Код,
	|	КорректировкаРеализацииУслуги.СтавкаНДС,
	|	КорректировкаРеализацииУслуги.СтавкаНДС,
	|	ИсходныйДокумент.СуммаВключаетНДС,
	|	КорректировкаРеализацииУслуги.СуммаНДС,
	|	КорректировкаРеализацииУслуги.СуммаНДСДоИзменения,
	|	КорректировкаРеализацииУслуги.Количество,
	|	КорректировкаРеализацииУслуги.КоличествоДоИзменения,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА КорректировкаРеализацииУслуги.Количество = 0
	|				ТОГДА 0
	|			ИНАЧЕ ВЫБОР
	|					КОГДА ИсходныйДокумент.СуммаВключаетНДС
	|						ТОГДА (КорректировкаРеализацииУслуги.Сумма - КорректировкаРеализацииУслуги.СуммаНДС) / КорректировкаРеализацииУслуги.Количество
	|					ИНАЧЕ КорректировкаРеализацииУслуги.Сумма / КорректировкаРеализацииУслуги.Количество
	|				КОНЕЦ
	|		КОНЕЦ КАК ЧИСЛО(15, 2)),
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА КорректировкаРеализацииУслуги.КоличествоДоИзменения = 0
	|				ТОГДА 0
	|			ИНАЧЕ ВЫБОР
	|					КОГДА ИсходныйДокумент.СуммаВключаетНДС
	|						ТОГДА (КорректировкаРеализацииУслуги.СуммаДоИзменения - КорректировкаРеализацииУслуги.СуммаНДСДоИзменения) / КорректировкаРеализацииУслуги.КоличествоДоИзменения
	|					ИНАЧЕ КорректировкаРеализацииУслуги.СуммаДоИзменения / КорректировкаРеализацииУслуги.КоличествоДоИзменения
	|				КОНЕЦ
	|		КОНЕЦ КАК ЧИСЛО(15, 2)),
	|	ВЫБОР
	|		КОГДА ИсходныйДокумент.СуммаВключаетНДС
	|			ТОГДА КорректировкаРеализацииУслуги.Сумма - КорректировкаРеализацииУслуги.СуммаНДС
	|		ИНАЧЕ КорректировкаРеализацииУслуги.Сумма
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ИсходныйДокумент.СуммаВключаетНДС
	|			ТОГДА КорректировкаРеализацииУслуги.СуммаДоИзменения - КорректировкаРеализацииУслуги.СуммаНДСДоИзменения
	|		ИНАЧЕ КорректировкаРеализацииУслуги.СуммаДоИзменения
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ИсходныйДокумент.СуммаВключаетНДС
	|			ТОГДА КорректировкаРеализацииУслуги.Сумма
	|		ИНАЧЕ КорректировкаРеализацииУслуги.Сумма + КорректировкаРеализацииУслуги.СуммаНДС
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ИсходныйДокумент.СуммаВключаетНДС
	|			ТОГДА КорректировкаРеализацииУслуги.СуммаДоИзменения
	|		ИНАЧЕ КорректировкаРеализацииУслуги.СуммаДоИзменения + КорректировкаРеализацииУслуги.СуммаНДСДоИзменения
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА КорректировкаРеализацииУслуги.СуммаНДСДоИзменения - КорректировкаРеализацииУслуги.СуммаНДС > 0
	|			ТОГДА КорректировкаРеализацииУслуги.СуммаНДСДоИзменения - КорректировкаРеализацииУслуги.СуммаНДС
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА КорректировкаРеализацииУслуги.СуммаНДСДоИзменения - КорректировкаРеализацииУслуги.СуммаНДС < 0
	|			ТОГДА (КорректировкаРеализацииУслуги.СуммаНДСДоИзменения - КорректировкаРеализацииУслуги.СуммаНДС) * -1
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ИсходныйДокумент.СуммаВключаетНДС
	|			ТОГДА ВЫБОР
	|					КОГДА КорректировкаРеализацииУслуги.СуммаДоИзменения - КорректировкаРеализацииУслуги.СуммаНДСДоИзменения - (КорректировкаРеализацииУслуги.Сумма - КорректировкаРеализацииУслуги.СуммаНДС) > 0
	|						ТОГДА КорректировкаРеализацииУслуги.СуммаДоИзменения - КорректировкаРеализацииУслуги.СуммаНДСДоИзменения - (КорректировкаРеализацииУслуги.Сумма - КорректировкаРеализацииУслуги.СуммаНДС)
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА КорректировкаРеализацииУслуги.СуммаДоИзменения - КорректировкаРеализацииУслуги.Сумма > 0
	|					ТОГДА КорректировкаРеализацииУслуги.СуммаДоИзменения - КорректировкаРеализацииУслуги.Сумма
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ИсходныйДокумент.СуммаВключаетНДС
	|			ТОГДА ВЫБОР
	|					КОГДА КорректировкаРеализацииУслуги.СуммаДоИзменения - КорректировкаРеализацииУслуги.СуммаНДСДоИзменения - (КорректировкаРеализацииУслуги.Сумма - КорректировкаРеализацииУслуги.СуммаНДС) < 0
	|						ТОГДА (КорректировкаРеализацииУслуги.СуммаДоИзменения - КорректировкаРеализацииУслуги.СуммаНДСДоИзменения - (КорректировкаРеализацииУслуги.Сумма - КорректировкаРеализацииУслуги.СуммаНДС)) * -1
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА КорректировкаРеализацииУслуги.СуммаДоИзменения - КорректировкаРеализацииУслуги.Сумма < 0
	|					ТОГДА (КорректировкаРеализацииУслуги.СуммаДоИзменения - КорректировкаРеализацииУслуги.Сумма) * -1
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ИсходныйДокумент.СуммаВключаетНДС
	|			ТОГДА ВЫБОР
	|					КОГДА КорректировкаРеализацииУслуги.СуммаДоИзменения - КорректировкаРеализацииУслуги.Сумма > 0
	|						ТОГДА КорректировкаРеализацииУслуги.СуммаДоИзменения - КорректировкаРеализацииУслуги.Сумма
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА КорректировкаРеализацииУслуги.СуммаДоИзменения + КорректировкаРеализацииУслуги.СуммаНДСДоИзменения - (КорректировкаРеализацииУслуги.Сумма + КорректировкаРеализацииУслуги.СуммаНДС) > 0
	|					ТОГДА КорректировкаРеализацииУслуги.СуммаДоИзменения + КорректировкаРеализацииУслуги.СуммаНДСДоИзменения - (КорректировкаРеализацииУслуги.Сумма + КорректировкаРеализацииУслуги.СуммаНДС)
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ИсходныйДокумент.СуммаВключаетНДС
	|			ТОГДА ВЫБОР
	|					КОГДА КорректировкаРеализацииУслуги.СуммаДоИзменения - КорректировкаРеализацииУслуги.Сумма < 0
	|						ТОГДА (КорректировкаРеализацииУслуги.СуммаДоИзменения - КорректировкаРеализацииУслуги.Сумма) * -1
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА КорректировкаРеализацииУслуги.СуммаДоИзменения + КорректировкаРеализацииУслуги.СуммаНДСДоИзменения - (КорректировкаРеализацииУслуги.Сумма + КорректировкаРеализацииУслуги.СуммаНДС) < 0
	|					ТОГДА (КорректировкаРеализацииУслуги.СуммаДоИзменения + КорректировкаРеализацииУслуги.СуммаНДСДоИзменения - (КорректировкаРеализацииУслуги.Сумма + КорректировкаРеализацииУслуги.СуммаНДС)) * -1
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|	КОНЕЦ,
	|	2
	|ИЗ
	|	Документ.КорректировкаРеализации.Услуги КАК КорректировкаРеализацииУслуги,
	|	ВТИсходныйДокумент КАК ИсходныйДокумент
	|ГДЕ
	|	КорректировкаРеализацииУслуги.Ссылка = &ДокументОснование
	|	И (КорректировкаРеализацииУслуги.Количество <> КорректировкаРеализацииУслуги.КоличествоДоИзменения
	|			ИЛИ КорректировкаРеализацииУслуги.Сумма <> КорректировкаРеализацииУслуги.СуммаДоИзменения
	|			ИЛИ КорректировкаРеализацииУслуги.СуммаНДС <> КорректировкаРеализацииУслуги.СуммаНДСДоИзменения
	|			ИЛИ КорректировкаРеализацииУслуги.Цена <> КорректировкаРеализацииУслуги.ЦенаДоИзменения)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерТЧ,
	|	НомерСтроки";
	
	Если ДанныеДокумента.Исправление Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ДоИзменения", "ДоКорректировки");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "КодТНВЭДДоКорректировки", "КодТНВЭДДоИзменения");
	КонецЕсли;
	
	ТаблицаРезультата = Запрос.Выполнить().Выгрузить();
	Для Каждого Колонка Из ТаблицаРезультата.Колонки Цикл
		Колонка.Имя = СтрЗаменить(Колонка.Имя, "ДоКорректировки", "ДоИзменения");
	КонецЦикла;
	
	Для каждого Строчка Из ТаблицаРезультата Цикл
		Строчка.НаименованиеТовара = СокрЛП(Строчка.НаименованиеТовара) + ПредставлениеСерий(Строчка);
	КонецЦикла;
	
	ДанныеДляПечати.Вставить("ТабличнаяЧасть", ТаблицаРезультата); 
	
	Возврат ДанныеДляПечати;

КонецФункции

Функция СобратьДанныеДляПечатиКорректировочногоСчетаФактурыНаАванс(СчетФактура)
	
	ДанныеСчетаФактуры = Новый Структура();
	ДанныеСчетаФактуры.Вставить("Ссылка", 							СчетФактура.Ссылка);
	ДанныеСчетаФактуры.Вставить("Номер",  							ОбщегоНазначения.ПолучитьНомерНаПечать(СчетФактура));
	ДанныеСчетаФактуры.Вставить("Дата",   							СчетФактура.Дата);
	ДанныеСчетаФактуры.Вставить("Организация",   					СчетФактура.Организация);
	ДанныеСчетаФактуры.Вставить("Контрагент",   					СчетФактура.Контрагент);
	ДанныеСчетаФактуры.Вставить("ДоговорКонтрагента",               СчетФактура.ДоговорКонтрагента);
	ДанныеСчетаФактуры.Вставить("ВидСчетаФактуры",                  СчетФактура.ВидСчетаФактуры);
	ДанныеСчетаФактуры.Вставить("Исправление",                      СчетФактура.Исправление);
	ДанныеСчетаФактуры.Вставить("НомерИсправления",                 СчетФактура.НомерИсправления);
	ДанныеСчетаФактуры.Вставить("НомерИсправляемогоКорректировочногоДокумента", СчетФактура.НомерИсправляемогоКорректировочногоДокумента);
	ДанныеСчетаФактуры.Вставить("ДатаИсправляемогоКорректировочногоДокумента",  СчетФактура.ДатаИсправляемогоКорректировочногоДокумента);
	ДанныеСчетаФактуры.Вставить("Продавец",                         СчетФактура.Контрагент);
	ДанныеСчетаФактуры.Вставить("КППКонтрагента",                   СчетФактура.КППКонтрагента);
	ДанныеСчетаФактуры.Вставить("СчетФактураБезНДС",                СчетФактура.СчетФактураБезНДС);
	ДанныеСчетаФактуры.Вставить("ДатаСчетаФактуры",                 СчетФактура.Дата);
	ДанныеСчетаФактуры.Вставить("ИдентификаторГосКонтракта",        СчетФактура.ИдентификаторГосКонтракта);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", СчетФактура);
	Запрос.УстановитьПараметр("ПустойКонтрагент", Справочники.Контрагенты.ПустаяСсылка());
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СчетФактураВыданный.Организация,
	|	СчетФактураВыданный.Организация КАК Поставщик,
	|	СчетФактураВыданный.ДоговорКонтрагента.ВидДоговора КАК ВидДоговора,
	|	СчетФактураВыданный.ДоговорКонтрагента.ВидАгентскогоДоговора КАК ВидАгентскогоДоговора,
	|	СчетФактураВыданный.Контрагент КАК Покупатель,
	|	СчетФактураВыданный.СуммаДокумента КАК Сумма,
	|	СчетФактураВыданный.ВалютаДокумента КАК Валюта,
	|	ИСТИНА КАК УчитыватьНДС,
	|	ИСТИНА КАК СуммаВключаетНДС,
	|	"""" КАК АдресДоставки,
	|	СчетФактураВыданный.Руководитель КАК ОтветственныйЗаОформление,
	|	"""" КАК СопроводительныеДокументы
	|ПОМЕСТИТЬ ВТИсходныйДокумент
	|ИЗ
	|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
	|ГДЕ
	|	СчетФактураВыданный.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТИсходныйДокумент.Организация,
	|	ВТИсходныйДокумент.Покупатель,
	|	ВТИсходныйДокумент.Поставщик,
	|	ВТИсходныйДокумент.ВидДоговора,
	|	ВТИсходныйДокумент.ВидАгентскогоДоговора,
	|	ВТИсходныйДокумент.Сумма,
	|	ВТИсходныйДокумент.Валюта,
	|	ВТИсходныйДокумент.УчитыватьНДС,
	|	ВТИсходныйДокумент.СуммаВключаетНДС,
	|	ВТИсходныйДокумент.ОтветственныйЗаОформление,
	|	ВТИсходныйДокумент.СопроводительныеДокументы
	|ИЗ
	|	ВТИсходныйДокумент КАК ВТИсходныйДокумент";
	
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	
	ДанныеДляПечати = Новый Структура();
	
	ДанныеДляПечати.Вставить("Ссылка",                    ДанныеСчетаФактуры.Ссылка);
	ДанныеДляПечати.Вставить("Организация",               Шапка.Организация);
	ДанныеДляПечати.Вставить("Номер",                     ?(ДанныеСчетаФактуры.Исправление, ДанныеСчетаФактуры.НомерИсправляемогоКорректировочногоДокумента, ДанныеСчетаФактуры.Номер));
	ДанныеДляПечати.Вставить("Дата",                      ?(ДанныеСчетаФактуры.Исправление, ДанныеСчетаФактуры.ДатаИсправляемогоКорректировочногоДокумента, ДанныеСчетаФактуры.Дата));
	ДанныеДляПечати.Вставить("НомерИсправления",          ?(ДанныеСчетаФактуры.Исправление, ДанныеСчетаФактуры.НомерИсправления, "--"));
	ДанныеДляПечати.Вставить("ДатаИсправления",           ?(ДанныеСчетаФактуры.Исправление, ДанныеСчетаФактуры.Дата, '00010101'));
	ДанныеДляПечати.Вставить("Поставщик",                 Шапка.Поставщик);
	ДанныеДляПечати.Вставить("КППКонтрагента",            ДанныеСчетаФактуры.КППКонтрагента);
	ДанныеДляПечати.Вставить("ВидСчетаФактуры",           ДанныеСчетаФактуры.ВидСчетаФактуры);
	ДанныеДляПечати.Вставить("ВидАгентскогоДоговора",     Шапка.ВидАгентскогоДоговора);
	ДанныеДляПечати.Вставить("Валюта",                    Шапка.Валюта);
	ДанныеДляПечати.Вставить("Покупатель",                Шапка.Покупатель);
	ДанныеДляПечати.Вставить("СуммаВключаетНДС",          Шапка.СуммаВключаетНДС);
	ДанныеДляПечати.Вставить("ДатаСчетаФактуры",          ДанныеСчетаФактуры.Дата);
	ДанныеДляПечати.Вставить("СчетФактураБезНДС",         ДанныеСчетаФактуры.СчетФактураБезНДС);
	ДанныеДляПечати.Вставить("ИныеСведения",              Шапка.СопроводительныеДокументы);
	ДанныеДляПечати.Вставить("ИдентификаторГосКонтракта", ДанныеСчетаФактуры.ИдентификаторГосКонтракта);
	
	Руководители = ОбщегоНазначения.ОтветственныеЛица(Шапка.Организация, ДанныеСчетаФактуры.Дата);
	
	ОтветственныйЗаОформление = ?(
		ЗначениеЗаполнено(Шапка.ОтветственныйЗаОформление),
		Шапка.ОтветственныйЗаОформление, 
		Руководители.Руководитель);
	ДанныеОтветственного = ОбщегоНазначения.ДанныеФизЛица(
		Шапка.Организация,
		ОтветственныйЗаОформление,
		ДанныеСчетаФактуры.Дата);
	ДанныеДляПечати.Вставить("ФИООтветственного", ДанныеОтветственного.Представление);
	
	ДанныеДляПечати.Вставить(?(РегламентированнаяОтчетность.ЭтоПБОЮЛ(Шапка.Организация), "ФИОПБОЮЛ", "ФИОРуководителя"), Руководители.РуководительПредставление);
	ДанныеДляПечати.Вставить("ФИОГлавногоБухгалтера", Руководители.ГлавныйБухгалтерПредставление);
		
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Авансы.НомерСтроки КАК НомерСтроки,
	|	Авансы.Номенклатура КАК Номенклатура,
	|	Авансы.Номенклатура.Код КАК ТоварКод,
	|	Авансы.Номенклатура.Артикул КАК ТоварАртикул,
	|	Авансы.Содержание КАК НаименованиеТовара,
	|	НЕОПРЕДЕЛЕНО КАК НаименованиеЕдиницыИзмерения,
	|	НЕОПРЕДЕЛЕНО КАК ЕдиницаИзмеренияКод,
	|	НЕОПРЕДЕЛЕНО КАК Серия,
	|	НЕОПРЕДЕЛЕНО КАК Характеристика,
	|	Авансы.СтавкаНДСДоКорректировки КАК СтавкаНДС,
	|	Авансы.СтавкаНДС КАК СтавкаНДСПослеИзменения,
	|	Авансы.СуммаНДС КАК СуммаНДСПослеИзменения,
	|	Авансы.СуммаНДСДоКорректировки КАК СуммаНДСДоИзменения,
	|	0 КАК КоличествоДоИзменения,
	|	0 КАК КоличествоПослеИзменения,
	|	0 КАК ЦенаДоИзменения,
	|	0 КАК ЦенаПослеИзменения,
	|	0 КАК СтоимостьБезНДСДоИзменения,
	|	0 КАК СтоимостьБезНДСПослеИзменения,
	|	Авансы.Сумма КАК СтоимостьСНДСПослеИзменения,
	|	Авансы.СуммаДоКорректировки КАК СтоимостьСНДСДоИзменения,
	|	0 КАК РазницаБезНДСУменьшение,
	|	0 КАК РазницаБезНДСУвеличение,
	|	0 КАК РазницаНДСУменьшение,
	|	Авансы.СуммаНДС - Авансы.СуммаНДСДоКорректировки КАК РазницаНДСУвеличение,
	|	0 КАК РазницаСНДСУменьшение,
	|	Авансы.Сумма - Авансы.СуммаДоКорректировки КАК РазницаСНДСУвеличение,
	|	ИСТИНА КАК СуммаВключаетНДС,
	|	Авансы.Ссылка КАК Ссылка,
	|	"""" КАК ТоварКодТНВЭД,
	|	"""" КАК ТоварКодТНВЭДДоИзменения
	|ИЗ
	|	Документ.СчетФактураВыданный.Авансы КАК Авансы
	|ГДЕ
	|	Авансы.Ссылка = &Ссылка";
	
	ТаблицаРезультата = Запрос.Выполнить().Выгрузить();
	
	ДанныеДляПечати.Вставить("ТабличнаяЧасть", ТаблицаРезультата); 
	
	Возврат ДанныеДляПечати;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПЕЧАТЬ И ПОДГОТОВКА ДАННЫХ ДЛЯ ПЕЧАТИ

Процедура ВывестиРеквизитыКомиссионера(Организация, Поставщик, Покупатель, Дата, Макет, ТабДокумент)
	
	Если ТипЗнч(Поставщик) = Тип("СправочникСсылка.Контрагенты")
		И (ТипЗнч(Покупатель) = Тип("СправочникСсылка.Контрагенты")
		ИЛИ ТипЗнч(Поставщик) = Тип("Массив")) Тогда
		
		ОбластьМакета = Макет.ПолучитьОбласть("РеквизитыКомиссионера");
		
		СведенияОКомиссионере = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Организация, Дата);
		
		НаименованиеКомиссионера = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОКомиссионере, "ПолноеНаименование,");
		ЮридическийАдресКомиссионера = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОКомиссионере, "ЮридическийАдрес,");
		ИННКомиссионера = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОКомиссионере, "ИНН,", Ложь);
		КППКомиссионера = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОКомиссионере, "КПП,", Ложь);
		
		ОбластьМакета.Параметры.ПредставлениеКомиссионера = "Составлен комиссионером (агентом): " + НаименованиеКомиссионера 
			+ ", " + ЮридическийАдресКомиссионера 
			+ ", ИНН/КПП: " + ИННКомиссионера 
			+ ?(ЗначениеЗаполнено(КППКомиссионера), "/" + КППКомиссионера, "");
		
		ТабДокумент.Вывести(ОбластьМакета);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВывестиКорректировочныйСчетФактуруВТабличныйДокумент(ТабДокумент, Макет, ДанныеДляПечати) Экспорт
	
	Дата = ДанныеДляПечати.Дата;
	ЭтоПечатьУКД = ДанныеДляПечати.Свойство("СтатусУКД");
	
	СведенияОбПокупателе = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ДанныеДляПечати.Покупатель, Дата);
	СведенияОПоставщике  = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ДанныеДляПечати.Поставщик, Дата);
	
	СведенияОбПодразделенииПокупателя = Неопределено;
	Если ТипЗнч(ДанныеДляПечати.Покупатель) = Тип("СправочникСсылка.Контрагенты") И ЗначениеЗаполнено(ДанныеДляПечати.Покупатель) Тогда
		РеквизитыПокупателя = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(ДанныеДляПечати.Покупатель, "ГоловнойКонтрагент, ОбособленноеПодразделение");
		Если РеквизитыПокупателя.ОбособленноеПодразделение И ЗначениеЗаполнено(РеквизитыПокупателя.ГоловнойКонтрагент) Тогда
			СведенияОбПокупателе = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(РеквизитыПокупателя.ГоловнойКонтрагент, Дата);
			СведенияОбПодразделенииПокупателя = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ДанныеДляПечати.Покупатель, Дата);
		КонецЕсли;
	КонецЕсли;
	
	// Выводим шапку
	ВедетсяУчетНДСПоФЗ56 = ВедетсяУчетНДСПоФЗ56(Дата);
	ВерсияПостановления1137 = ВерсияПостановленияНДС1137(Дата);
	
	Если НЕ ЭтоПечатьУКД Тогда
		Если УчетНДС.ВерсияПостановленияНДС1137(Дата) > 1 Тогда 
			Если Дата < '20171001' Тогда
				Если ВедетсяУчетНДСПоФЗ56 Тогда 
					ОбластьМакета = Макет.ПолучитьОбласть("ШапкаИнформация1137_625");
				Иначе
					ОбластьМакета = Макет.ПолучитьОбласть("ШапкаИнформация1137");
				КонецЕсли;
				ТабДокумент.Вывести(ОбластьМакета);
			КонецЕсли;

		КонецЕсли;
	Иначе
		Если ВедетсяУчетНДСПоФЗ56 
			И ВерсияПостановления1137 < 4 Тогда 
			ОбластьЗаголовка = Макет.ПолучитьОбласть("ЗаголовокДокумента625");
		Иначе
			ОбластьЗаголовка = Макет.ПолучитьОбласть("ЗаголовокДокумента");
		КонецЕсли;
	КонецЕсли;
	
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ОбластьМакета.Параметры.Заполнить(ДанныеДляПечати);
	
	ИндексПодразделения = 0;
	
	Если НЕ (ДанныеДляПечати.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НалоговыйАгент
		И ДанныеДляПечати.ВидАгентскогоДоговора = Перечисления.ВидыАгентскихДоговоров.Нерезидент) Тогда
		
		КПП = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "КПП,", Ложь);
		ИндексПодразделения = 0;
		Если ЗначениеЗаполнено(ДанныеДляПечати.Организация.ГоловнаяОрганизация) Тогда
			ИндексПодразделения = ДанныеДляПечати.Организация.ЦифровойИндексОбособленногоПодразделения;
		КонецЕсли;
		Если ИндексПодразделения <> 0 Тогда
			ДанныеДляПечати.Номер = ДанныеДляПечати.Номер + "/" + ИндексПодразделения;
		КонецЕсли;		
		
		Если ЗначениеЗаполнено(КПП) Тогда
			КПП = "/" + КПП;
		КонецЕсли;
		
		ОбластьМакета.Параметры.ИННКПППродавца = ?(ЭтоПечатьУКД, "", "ИНН/КПП продавца: ")
		+ ОписаниеОрганизации(СведенияОПоставщике, "ИНН,", Ложь) + КПП;
		
		Если ЗначениеЗаполнено(КПП) Тогда
			КПП = "/" + КПП;
		КонецЕсли;
		ОбластьМакета.Параметры.ИННКПППродавца = ""
		+ ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ИНН,", Ложь) + КПП;
		
	Иначе
		ОбластьМакета.Параметры.ИННКПППродавца = "--"
	КонецЕсли;
	
	Если ЭтоПечатьУКД Тогда
		ОбластьЗаголовка.Параметры.Номер = ДанныеДляПечати.Номер + ?(ИндексПодразделения <> 0, "/" + ИндексПодразделения, "");
		ОбластьЗаголовка.Параметры.Дата  = Формат(ДанныеДляПечати.Дата, "ДЛФ=ДД; ДП=--");
		ОбластьЗаголовка.Параметры.НомерИсправленияКорректировочного = ДанныеДляПечати.НомерИсправления;
		ОбластьЗаголовка.Параметры.ДатаИсправленияКорректировочного = Формат(ДанныеДляПечати.ДатаИсправления, "ДЛФ=ДД; ДП=--");
		
		ТабДокумент.Вывести(ОбластьЗаголовка);
	КонецЕсли;
	
	РеквизитыОснований = "";
	
	Если ДанныеДляПечати.КорректируемыеСчетаФактуры.Количество() > 1 Тогда
		Для Каждого ОснованиеСчетаФактуры Из ДанныеДляПечати.КорректируемыеСчетаФактуры Цикл
			РеквизитыОснований = РеквизитыОснований + ?(РеквизитыОснований = "", "", ", ")
			+ "№ " + ОснованиеСчетаФактуры.НомерСчетаФактуры 
			+ ?(ИндексПодразделения <> 0, "/" + ИндексПодразделения, "")
			+ " от " + Формат(ОснованиеСчетаФактуры.ДатаСчетаФактуры, "ДЛФ=ДД; ДП=--")
			+ ", с учетом исправления № "
			+ ОснованиеСчетаФактуры.НомерИсправления 
			+ " от " + Формат(ОснованиеСчетаФактуры.ДатаИсправления, "ДЛФ=ДД; ДП=--");
		КонецЦикла;
	КонецЕсли;
	
	Если ЭтоПечатьУКД Тогда
		Если ДанныеДляПечати.КорректируемыеСчетаФактуры.Количество() > 1 Тогда
			ОбластьОснований = Макет.ПолучитьОбласть("ОбластьОснований");
			ОбластьОснований.Параметры.РеквизитыОснований = РеквизитыОснований;
		ИначеЕсли ДанныеДляПечати.КорректируемыеСчетаФактуры.Количество() = 1 Тогда
			ОбластьОснований = Макет.ПолучитьОбласть("ОбластьОснования");
			
			Основание = ДанныеДляПечати.КорректируемыеСчетаФактуры[0];
			ОбластьОснований.Параметры.НомерОснования            = Основание.НомерСчетаФактуры 
			+ ?(ИндексПодразделения <> 0, "/" + ИндексПодразделения, "");
			ОбластьОснований.Параметры.ДатаОсновнания            = Формат(Основание.ДатаСчетаФактуры, "ДЛФ=ДД; ДП=--");
			ОбластьОснований.Параметры.НомерИсправленияОснования = Основание.НомерИсправления;
			ОбластьОснований.Параметры.ДатаИсправленияОснования  = Формат(Основание.ДатаИсправления, "ДЛФ=ДД; ДП=--");
		Иначе
			ОбластьОснований = Макет.ПолучитьОбласть("ОбластьОснования");
			
			ОбластьОснований.Параметры.НомерОснования            = "--";
			ОбластьОснований.Параметры.ДатаОсновнания            = "--";
			ОбластьОснований.Параметры.НомерИсправленияОснования = "--";
			ОбластьОснований.Параметры.ДатаИсправленияОснования  = "--";
		КонецЕсли;
		
		ТабДокумент.Вывести(ОбластьОснований);
	Иначе
		ОбластьМакета.Параметры.РеквизитыОснований = РеквизитыОснований;
	КонецЕсли;
	
	ОбластьМакета.Параметры.НаименованиеПродавца = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике,  "ПолноеНаименование,");
	ОбластьМакета.Параметры.АдресПродавца = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике,  "ЮридическийАдрес,");
	ОбластьМакета.Параметры.НаименованиеПокупателя = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбПокупателе, "ПолноеНаименование,");
	ОбластьМакета.Параметры.АдресПокупателя = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбПокупателе, "ЮридическийАдрес,");

	Если ЗначениеЗаполнено(ДанныеДляПечати.КППКонтрагента) Тогда
		КПП = ДанныеДляПечати.КППКонтрагента;
	ИначеЕсли СведенияОбПодразделенииПокупателя <> Неопределено Тогда
		КПП = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбПодразделенииПокупателя, "КПП,", Ложь);
	Иначе
		КПП = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбПокупателе, "КПП,", Ложь);
	КонецЕсли;		
		
	Если ЗначениеЗаполнено(КПП) Тогда
		КПП = "/" + КПП;
	КонецЕсли;
	
	ОбластьМакета.Параметры.ИННКПППокупателя = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбПокупателе, "ИНН,", Ложь) + КПП;
	
	Если ЭтоПечатьУКД Тогда
		СтрокаВалюта = "";
	Иначе
		СтрокаВалюта = "Валюта: наименование, код ";
	КонецЕсли;
	ОбластьМакета.Параметры.Валюта = СтрокаВалюта + ?(ЗначениеЗаполнено(ДанныеДляПечати.Валюта), 
			ДанныеДляПечати.Валюта.НаименованиеПолное + ", " + ДанныеДляПечати.Валюта.Код, "");
	
	ТабДокумент.Вывести(ОбластьМакета);
	
	Если ВедетсяУчетНДСПоФЗ56 Тогда 
		ОбластьМакета = Макет.ПолучитьОбласть("ИдентификаторГосКонтракта");
		Если ЭтоПечатьУКД Тогда 
			ОбластьМакета.Параметры.ИдентификаторГосКонтракта = ДанныеДляПечати.ИдентификаторГосКонтракта;
		Иначе
			Если ВерсияПостановления1137 < 4 Тогда
				ШаблонЗаголовкаГосконтракт = НСтр("ru = 'Идентификатор государственного контракта, договора (соглашения): %1'");
			Иначе
				ШаблонЗаголовкаГосконтракт = НСтр("ru = 'Идентификатор государственного контракта, договора (соглашения) (при наличии): %1'");
			КонецЕсли;
			ОбластьМакета.Параметры.ИдентификаторГосКонтракта = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонЗаголовкаГосконтракт, ДанныеДляПечати.ИдентификаторГосКонтракта);
		КонецЕсли;
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЕсли;
	
	ОбластьМакетаЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
	ТабДокумент.Вывести(ОбластьМакетаЗаголовокТаблицы);

	ОбластьМакета = Макет.ПолучитьОбласть("Строка");
	
	ВыборкаТабличнойЧасти = ДанныеДляПечати.ТабличнаяЧасть;
	
	КоличествоСтраниц = 1;
	НомерСтроки = 0;
	КоличествоСтрок = ВыборкаТабличнойЧасти.Количество();
	
	ИтогРазницаБезНДСУменьшение = 0;
	ИтогРазницаБезНДСУвеличение = 0;
	ИтогРазницаСНДСУменьшение   = 0;
	ИтогРазницаСНДСУвеличение   = 0;
	ИтогРазницаНДСУменьшение    = 0;
	ИтогРазницаНДСУвеличение    = 0;
				
	Для Каждого СтрокаТабличнойЧасти ИЗ ВыборкаТабличнойЧасти Цикл
		
		НомерСтроки = НомерСтроки + 1;
		СтрокаТабличнойЧасти.НомерСтроки = НомерСтроки;
		
		// Порядок определения показателей при расчетной ставке НДС
		Если (СтрокаТабличнойЧасти.СтавкаНДС = Перечисления.СтавкиНДС.НДС20_120
			ИЛИ СтрокаТабличнойЧасти.СтавкаНДС = Перечисления.СтавкиНДС.НДС18_118
			ИЛИ СтрокаТабличнойЧасти.СтавкаНДС = Перечисления.СтавкиНДС.НДС10_110) Тогда
			
			СтрокаТабличнойЧасти.СтоимостьБезНДСДоИзменения = СтрокаТабличнойЧасти.СтоимостьСНДСДоИзменения;
			СтрокаТабличнойЧасти.СтоимостьБезНДСПослеИзменения = СтрокаТабличнойЧасти.СтоимостьСНДСПослеИзменения;
			
			СтрокаТабличнойЧасти.ЦенаДоИзменения = 0;
			СтрокаТабличнойЧасти.ЦенаПослеИзменения = 0;
						
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.НаименованиеЕдиницыИзмерения) Тогда
			СтрокаТабличнойЧасти.КоличествоДоИзменения    = 0;
			СтрокаТабличнойЧасти.КоличествоПослеИзменения = 0;
			СтрокаТабличнойЧасти.ЦенаДоИзменения          = 0;
			СтрокаТабличнойЧасти.ЦенаПослеИзменения       = 0;
		Иначе
			Если СтрокаТабличнойЧасти.КоличествоДоИзменения = 0 Тогда
				СтрокаТабличнойЧасти.ЦенаДоИзменения = 0;
			ИначеЕсли СтрокаТабличнойЧасти.ЦенаДоИзменения = 0 Тогда
				СтрокаТабличнойЧасти.ЦенаДоИзменения = Окр(СтрокаТабличнойЧасти.СтоимостьБезНДСДоИзменения / СтрокаТабличнойЧасти.КоличествоДоИзменения, 2);
			КонецЕсли;
			Если СтрокаТабличнойЧасти.КоличествоПослеИзменения = 0 Тогда
				СтрокаТабличнойЧасти.ЦенаПослеИзменения = 0;
			ИначеЕсли СтрокаТабличнойЧасти.ЦенаПослеИзменения = 0 Тогда
				СтрокаТабличнойЧасти.ЦенаПослеИзменения = Окр(СтрокаТабличнойЧасти.СтоимостьБезНДСПослеИзменения / СтрокаТабличнойЧасти.КоличествоПослеИзменения, 2);
			КонецЕсли;
			Если СтрокаТабличнойЧасти.КоличествоДоИзменения = 0 
				И СтрокаТабличнойЧасти.КоличествоПослеИзменения = 0 Тогда
				СтрокаТабличнойЧасти.НаименованиеЕдиницыИзмерения = "";
			КонецЕсли;
		КонецЕсли;
		
		ОбластьМакета.Параметры.Заполнить(СтрокаТабличнойЧасти);
		Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.НаименованиеТовара) Тогда
			ОбластьМакета.Параметры.НаименованиеНоменклатуры = СтрокаТабличнойЧасти.НаименованиеТовара;
		Иначе
			ОбластьМакета.Параметры.НаименованиеНоменклатуры = СтрокаТабличнойЧасти.Номенклатура;
		КонецЕсли;
				
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.НаименованиеЕдиницыИзмерения) Тогда
			ОбластьМакета.Параметры.ЕдиницаИзмеренияКод = "--";
			ОбластьМакета.Параметры.НаименованиеЕдиницыИзмерения = "--";
		КонецЕсли;	
		
		Если НЕ ЗначениеЗаполнено(ОбластьМакета.Параметры.КоличествоДоИзменения) Тогда
			ОбластьМакета.Параметры.КоличествоДоИзменения = "--";
		КонецЕсли;	
		
		Если ВерсияПостановления1137 = 4 Тогда
			Если НЕ ЗначениеЗаполнено(ОбластьМакета.Параметры.ТоварКодТНВЭД)
				ИЛИ СтрокаТабличнойЧасти.СтавкаНДС <> Перечисления.СтавкиНДС.НДС0 Тогда
				ОбластьМакета.Параметры.ТоварКодТНВЭД = "--";
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьМакета.Параметры.ТоварКодТНВЭДДоИзменения)
				ИЛИ СтрокаТабличнойЧасти.СтавкаНДС <> Перечисления.СтавкиНДС.НДС0 Тогда
				ОбластьМакета.Параметры.ТоварКодТНВЭДДоИзменения = "--";
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьМакета.Параметры.КоличествоПослеИзменения) Тогда
			ОбластьМакета.Параметры.КоличествоПослеИзменения = "--";
		КонецЕсли;	
		       		
		Если НЕ ЗначениеЗаполнено(ОбластьМакета.Параметры.ЦенаДоИзменения) Тогда
			ОбластьМакета.Параметры.ЦенаДоИзменения = "--";
		КонецЕсли;	
		
		Если НЕ ЗначениеЗаполнено(ОбластьМакета.Параметры.ЦенаПослеИзменения) Тогда
			ОбластьМакета.Параметры.ЦенаПослеИзменения = "--";
		КонецЕсли;	
		
		Если ДанныеДляПечати.Дата >= Константы.ДатаНачалаОперацийСТоварамиОблагаемымиНДСУПокупателя.Получить()
			И ДанныеДляПечати.Ссылка.ДоговорКонтрагента.РеализацияТоваровОблагаемыхНДСУПокупателя Тогда
			РеализацияТоваровОблагаемыхНДСУПокупателя = Истина;
		Иначе
			РеализацияТоваровОблагаемыхНДСУПокупателя = Ложь;
		КонецЕсли;
		
		Если СтрокаТабличнойЧасти.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
			ОбластьМакета.Параметры.СтавкаНДС = "без НДС";
			ОбластьМакета.Параметры.СуммаНДСДоИзменения = "без НДС";
			ОбластьМакета.Параметры.СуммаНДСПослеИзменения = "без НДС";
			ОбластьМакета.Параметры.РазницаНДСУвеличение = "--";
			ОбластьМакета.Параметры.РазницаНДСУменьшение = "--";
		ИначеЕсли РеализацияТоваровОблагаемыхНДСУПокупателя Тогда
			ОбластьМакета.Параметры.СтавкаНДС = "НДС исчисляется налоговым агентом";
			ОбластьМакета.Параметры.СуммаНДСДоИзменения = "--";
			ОбластьМакета.Параметры.СуммаНДСПослеИзменения = "--";
			ОбластьМакета.Параметры.РазницаНДСУвеличение = "--";
			ОбластьМакета.Параметры.РазницаНДСУменьшение = "--";
			ОбластьМакета.Параметры.СтоимостьСНДСДоИзменения = "--";
			ОбластьМакета.Параметры.СтоимостьСНДСПослеИзменения = "--";
			ОбластьМакета.Параметры.РазницаСНДСУвеличение = "--";
			ОбластьМакета.Параметры.РазницаСНДСУменьшение = "--";
		КонецЕсли;
		
		Если ЭтоПечатьУКД Тогда
			
			Если ДанныеДляПечати.СтатусУКД = 2 Тогда
				ОбластьМакета.Параметры.СтавкаНДС 	= "--";
				ОбластьМакета.Параметры.Акциз 		= "--";
				ОбластьМакета.Параметры.СуммаНДСДоИзменения = "--";
				ОбластьМакета.Параметры.СуммаНДСПослеИзменения = "--";
				ОбластьМакета.Параметры.РазницаНДСУвеличение = "--";
				ОбластьМакета.Параметры.РазницаНДСУменьшение = "--";
			ИначеЕсли ВерсияПостановления1137 >= 4 Тогда
				ОбластьМакета.Параметры.Акциз = "без
					|акциза";
			Иначе
				ОбластьМакета.Параметры.Акциз = "без акциза";
			КонецЕсли;
				
		КонецЕсли;
		
		Попытка
			ПроверитьВыводКорректировочногоСчетаФактурыНаСтраницу(
						ТабДокумент, ОбластьМакета, (НомерСтроки = КоличествоСтрок), Макет, КоличествоСтраниц, ДанныеДляПечати.Номер, Дата, ЭтоПечатьУКД);
			ТабДокумент.Вывести(ОбластьМакета);
		Исключение
			ТабДокумент.Вывести(ОбластьМакета);
		КонецПопытки;
		
		ИтогРазницаБезНДСУменьшение = ИтогРазницаБезНДСУменьшение + СтрокаТабличнойЧасти.РазницаБезНДСУменьшение;
		ИтогРазницаБезНДСУвеличение = ИтогРазницаБезНДСУвеличение + СтрокаТабличнойЧасти.РазницаБезНДСУвеличение;
		ИтогРазницаСНДСУменьшение   = ИтогРазницаСНДСУменьшение   + СтрокаТабличнойЧасти.РазницаСНДСУменьшение;
		ИтогРазницаСНДСУвеличение   = ИтогРазницаСНДСУвеличение   + СтрокаТабличнойЧасти.РазницаСНДСУвеличение;
		ИтогРазницаНДСУменьшение    = ИтогРазницаНДСУменьшение    + СтрокаТабличнойЧасти.РазницаНДСУменьшение;
		ИтогРазницаНДСУвеличение    = ИтогРазницаНДСУвеличение    + СтрокаТабличнойЧасти.РазницаНДСУвеличение;
	
	КонецЦикла;
	
	КоличествоЛистов = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Документ составлен на%1%2 %3'"), Символы.ПС, КоличествоСтраниц,
		ОбщегоНазначения.ФормаМножественногоЧисла(
			НСтр("ru = 'листе'"), НСтр("ru = 'листах'"), НСтр("ru = 'листах'"), КоличествоСтраниц));
	ДанныеДляПечати.Вставить("КоличествоЛистов", КоличествоЛистов);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Итого");
	
	ОбластьМакета.Параметры.РазницаБезНДСУменьшение = ИтогРазницаБезНДСУменьшение;
	ОбластьМакета.Параметры.РазницаБезНДСУвеличение = ИтогРазницаБезНДСУвеличение;
	ОбластьМакета.Параметры.РазницаСНДСУменьшение   = ИтогРазницаСНДСУменьшение;
	ОбластьМакета.Параметры.РазницаСНДСУвеличение   = ИтогРазницаСНДСУвеличение;
	
	Если РеализацияТоваровОблагаемыхНДСУПокупателя Тогда
		ОбластьМакета.Параметры.РазницаНДСУменьшение  = "--";
		ОбластьМакета.Параметры.РазницаНДСУвеличение  = "--";
		ОбластьМакета.Параметры.РазницаСНДСУменьшение = "--";
		ОбластьМакета.Параметры.РазницаСНДСУвеличение = "--";
	ИначеЕсли ЭтоПечатьУКД И ДанныеДляПечати.СтатусУКД = 2 Тогда
		ОбластьМакета.Параметры.РазницаНДСУменьшение = "--";
		ОбластьМакета.Параметры.РазницаНДСУвеличение = "--";
	Иначе
		ОбластьМакета.Параметры.РазницаНДСУменьшение    = ?(ДанныеДляПечати.СчетФактураБезНДС, "без НДС", ИтогРазницаНДСУменьшение);
		ОбластьМакета.Параметры.РазницаНДСУвеличение    = ?(ДанныеДляПечати.СчетФактураБезНДС, "без НДС", ИтогРазницаНДСУвеличение);
	КонецЕсли;
	
	ТабДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
	ОбластьМакета.Параметры.Заполнить(ДанныеДляПечати);	
	ОбластьМакета.Параметры.Свидетельство = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "Свидетельство,");
	ТабДокумент.Вывести(ОбластьМакета);
	
	Если НЕ ЭтоПечатьУКД Тогда
		ВывестиРеквизитыКомиссионера(ДанныеДляПечати.Организация, ДанныеДляПечати.Поставщик, ДанныеДляПечати.Покупатель, Дата, Макет, ТабДокумент);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьВыводКорректировочногоСчетаФактурыНаСтраницу(ТабДокумент, ОбластьТекСтроки, ЭтоПоследняяСтрока, Макет, НомерЛиста, НомерСчетаФактуры, ДатаСчетаФактуры, ЭтоУниверсальныйКорректировочныйДокумент = Ложь)
	
	// Проверим возможность вывода табличного документа
	СтрокаСПодвалом = Новый Массив;
	СтрокаСПодвалом.Добавить(ОбластьТекСтроки);
	
	Если ЭтоПоследняяСтрока Тогда
		// Если последняя строка, то должен поместиться еще итог
		СтрокаСПодвалом.Добавить(Макет.ПолучитьОбласть("Подвал"));
		СтрокаСПодвалом.Добавить(Макет.ПолучитьОбласть("Итого"));
		Если ЭтоУниверсальныйКорректировочныйДокумент Тогда
			СтрокаСПодвалом.Добавить(Макет.ПолучитьОбласть("ПодвалНакладной"));
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ТабДокумент.ПроверитьВывод(СтрокаСПодвалом) Тогда
		// Вывод разделителя и заголовка таблицы на новой странице
		
		НомерЛиста = НомерЛиста + 1;
		
		ОбластьНумерацияЛистов = Макет.ПолучитьОбласть("НумерацияЛистов");
		ОбластьНумерацияЛистов.Параметры.Номер = НомерСчетаФактуры;
		ОбластьНумерацияЛистов.Параметры.Дата = Формат(ДатаСчетаФактуры, "ДЛФ=ДД");
		ОбластьНумерацияЛистов.Параметры.НомерЛиста = НомерЛиста;
		
		ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		
		ТабДокумент.Вывести(ОбластьНумерацияЛистов);
		ТабДокумент.Вывести(Макет.ПолучитьОбласть("ЗаголовокТаблицы"));
	КонецЕсли;
	
КонецПроцедуры

Процедура ВывестиПодвалУниверсальногоКорректировочногоДокументаВТабличныйДокумент(ТабДокумент, Макет, ДанныеДляПечати) Экспорт

	// При комиссии по закупке (позиция комиссионера) УКД составляет комиссионер,
	// выводим его как составителя документа.
	Если ТипЗнч(ДанныеДляПечати.Ссылка) = Тип("ДокументСсылка.СчетФактураВыданный")
		И ТипЗнч(ДанныеДляПечати.Поставщик) = Тип("СправочникСсылка.Контрагенты")
		И ТипЗнч(ДанныеДляПечати.Покупатель) = Тип("СправочникСсылка.Контрагенты") Тогда

		СведенияОПоставщике = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ДанныеДляПечати.Организация, ДанныеДляПечати.Дата);
	Иначе
		СведенияОПоставщике = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ДанныеДляПечати.Поставщик, ДанныеДляПечати.Дата);
	КонецЕсли;

	СведенияОбОрганизации = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ДанныеДляПечати.Организация, ДанныеДляПечати.Дата);
	
	ИННпоставщика = "";
	ВидАгентскогоДоговора = ДанныеДляПечати.ВидАгентскогоДоговора;
	Если НЕ (ДанныеДляПечати.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НалоговыйАгент
		И ВидАгентскогоДоговора = Перечисления.ВидыАгентскихДоговоров.Нерезидент) Тогда
		
		КПП = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "КПП,", Ложь);
		Если ЗначениеЗаполнено(ДанныеДляПечати.Организация.ГоловнаяОрганизация) Тогда
			КПП = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации, "КПП,", Ложь);
		КонецЕсли;
		Если ЗначениеЗаполнено(КПП) Тогда
			КПП = "/" + КПП;
		КонецЕсли;
		ИННпоставщика = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ИНН,", Ложь);
		ИННпоставщика = ?(ПустаяСтрока(ИННпоставщика), "", "ИНН") + ?(ПустаяСтрока(ИННпоставщика) ИЛИ ПустаяСтрока(КПП), " ", "/КПП ")
			+ ИННпоставщика + КПП;
		
	КонецЕсли;
	
	СведенияОПокупателе = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ДанныеДляПечати.Покупатель, ДанныеДляПечати.Дата);
	
	СведенияОПодразделенииПокупателя = Неопределено;
	Если ДанныеДляПечати.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию Тогда
		
		Если ТипЗнч(ДанныеДляПечати.Покупатель) = Тип("СправочникСсылка.Контрагенты") И ЗначениеЗаполнено(ДанныеДляПечати.Покупатель) Тогда
			РеквизитыПокупателя = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(ДанныеДляПечати.Покупатель, "ГоловнойКонтрагент, ОбособленноеПодразделение");
			Если РеквизитыПокупателя.ОбособленноеПодразделение И ЗначениеЗаполнено(РеквизитыПокупателя.ГоловнойКонтрагент) Тогда
				СведенияОПокупателе = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(РеквизитыПокупателя.ГоловнойКонтрагент, ДанныеДляПечати.Дата);
				СведенияОПодразделенииПокупателя = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ДанныеДляПечати.Покупатель, ДанныеДляПечати.Дата);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ДанныеДляПечати.Свойство("КППКонтрагента") И ЗначениеЗаполнено(ДанныеДляПечати.КППКонтрагента) Тогда
		КПП = ДанныеДляПечати.КППКонтрагента;
	ИначеЕсли СведенияОПодразделенииПокупателя <> Неопределено Тогда
		КПП = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПодразделенииПокупателя, "КПП,", Ложь);
	Иначе
		КПП = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "КПП,", Ложь);
	КонецЕсли;	
	
	ИННПокупателя = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ИНН,", Ложь);
	ИННПокупателя = ?(ПустаяСтрока(ИННПокупателя), "", "ИНН") + ?(ПустаяСтрока(ИННПокупателя) ИЛИ ПустаяСтрока(КПП), " " , "/КПП ")
		+ ИННПокупателя	+ ?(ПустаяСтрока(КПП), "" , "/") + КПП;
		
	ОбластьМакета = Макет.ПолучитьОбласть("ПодвалНакладной");
	ОбластьМакета.Параметры.Заполнить(ДанныеДляПечати);
	ОбластьМакета.Параметры.ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,")
		+ ?(ПустаяСтрока(ИННпоставщика), "" , ", ") + ИННпоставщика;
	ОбластьМакета.Параметры.ПредставлениеКонтрагента = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование,")
		+ ?(ПустаяСтрока(ИННПокупателя), "" , ", ") + ИННПокупателя;
	
	ТабДокумент.Вывести(ОбластьМакета);
	
КонецПроцедуры

Функция ПечатьУниверсальногоКорректировочногоДокумента(ДанныеДокумента, СчетФактураТребуется, СтруктураОтбораСчетаФактуры = Неопределено) Экспорт
	
	Если ДанныеДокумента.Дата < '20130101' Тогда
		ТекстСообщения = "Применение формы универсального корректировочного документа возможно только с 01 января 2013 года!";
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат Неопределено;
	КонецЕсли;
	
	ТабДокумент = Новый ТабличныйДокумент;
	
	Если СтруктураОтбораСчетаФактуры = Неопределено Тогда
		СчетФактура = НайтиПодчиненныйСчетФактуру(ДанныеДокумента.Ссылка, "СчетФактураВыданный");
	Иначе
		СчетФактура = НайтиПодчиненныйСчетФактуру(ДанныеДокумента.Ссылка, "СчетФактураВыданный", СтруктураОтбораСчетаФактуры);
	КонецЕсли;
		
	// УКД печатается из документа счет-фактура
	Если ЗначениеЗаполнено(СчетФактура) ИЛИ СчетФактураТребуется Тогда
		
		Если НЕ ЗначениеЗаполнено(СчетФактура) Тогда
			ТекстСообщения = "По документу %1 не выписан счет-фактура";
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ТекстСообщения, ДанныеДокумента.Ссылка);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Возврат Неопределено;
		КонецЕсли;
		
		СчетФактураМенеджер = Документы.СчетФактураВыданный;
		
		ДанныеДляПечати = СчетФактураМенеджер.ПодготовитьДанныеДляПечатиУниверсальногоКорректировочногоДокумента(СчетФактура);
		Если ДанныеДляПечати = Неопределено Тогда
			Возврат ТабДокумент;
		КонецЕсли;
		
		Возврат СчетФактураМенеджер.ПечатьУниверсальногоКорректировочногоДокумента(ДанныеДляПечати);
		
	КонецЕсли;
	
	// УКД печатается по статусу 2
	ДанныеДляПечати = ПодготовитьДанныеДляПечатиУниверсальногоКорректировочногоДокумента(ДанныеДокумента);
	Если ДанныеДляПечати = Неопределено Тогда
		Возврат ТабДокумент;
	КонецЕсли;
	
	Таблица = ДанныеДляПечати.ТабличнаяЧасть;
	
	СуммаУменьшения = Таблица.Итог("РазницаБезНДСУменьшение") + Таблица.Итог("РазницаСНДСУменьшение") + Таблица.Итог("РазницаНДСУменьшение");
	СуммаУвеличения = Таблица.Итог("РазницаБезНДСУвеличение") + Таблица.Итог("РазницаСНДСУвеличение") + Таблица.Итог("РазницаНДСУвеличение");
	
	Если СуммаУменьшения = 0 И СуммаУвеличения = 0 Тогда
		ТекстСообщения = "Печать универсального корректировочного документа без изменения суммовых показателей не возможна!";
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат Неопределено;
	КонецЕсли;
	
	// Устанавливаем параметры печати и колонтитулы
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ТабДокумент.ПолеСверху = 12;
	ТабДокумент.ПолеСлева  = 0;
	ТабДокумент.ПолеСнизу  = 0;
	ТабДокумент.ПолеСправа = 0;
	ТабДокумент.АвтоМасштаб = Истина;
	
	Если ДанныеДляПечати.Дата < '20171001' Тогда
		ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_УниверсальныйКорректировочныйДокумент";
		Макет = ПолучитьОбщийМакет("УниверсальныйКорректировочныйДокумент");
	Иначе
		ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_УниверсальныйКорректировочныйДокумент981";
		Макет = ПолучитьОбщийМакет("УниверсальныйКорректировочныйДокумент981");
	КонецЕсли;
	
	УчетНДС.ВывестиКорректировочныйСчетФактуруВТабличныйДокумент(ТабДокумент, Макет, ДанныеДляПечати);
	УчетНДС.ВывестиПодвалУниверсальногоКорректировочногоДокументаВТабличныйДокумент(ТабДокумент, Макет, ДанныеДляПечати);
	
	Возврат ТабДокумент;
	
КонецФункции

Функция ПодготовитьДанныеДляПечатиУниверсальногоКорректировочногоДокумента(ДанныеДокумента) Экспорт
	
	// сбор данных для печати счета фактуры
	ДанныеДляПечати = СобратьДанныеДляПечатиКорректировочногоСчетаФактуры(ДанныеДокумента.Ссылка, ДанныеДокумента.Ссылка);
	Если ДанныеДляПечати = Неопределено или ТипЗнч(ДанныеДляПечати) = Тип("Соответствие") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// заполнение данных ФИОРуководителя и ФИОГлавногоБухгалтера из документа
	Если ДанныеДокумента.Свойство("Руководитель") И ЗначениеЗаполнено(ДанныеДокумента.Руководитель) 
		И ДанныеДляПечати.Свойство("ФИОРуководителя") Тогда 
		ДанныеДляПечати.ФИОРуководителя = ОбщегоНазначения.ФамилияИнициалыФизЛица(ДанныеДокумента.Руководитель);
	КонецЕсли;
	Если ДанныеДокумента.Свойство("ГлавныйБухгалтер") И ЗначениеЗаполнено(ДанныеДокумента.ГлавныйБухгалтер) 
		И ДанныеДляПечати.Свойство("ФИОГлавногоБухгалтера") Тогда
		ДанныеДляПечати.ФИОГлавногоБухгалтера = ОбщегоНазначения.ФамилияИнициалыФизЛица(ДанныеДокумента.ГлавныйБухгалтер);
	КонецЕсли;
	
	ДанныеДляПечати.ТабличнаяЧасть.ЗаполнитьЗначения(ДанныеДляПечати.СуммаВключаетНДС, "СуммаВключаетНДС");
	
	КорректируемыеСчетаФактуры = Новый ТаблицаЗначений;
	КорректируемыеСчетаФактуры.Колонки.Добавить("НомерСчетаФактуры");
	КорректируемыеСчетаФактуры.Колонки.Добавить("ДатаСчетаФактуры");
	КорректируемыеСчетаФактуры.Колонки.Добавить("УчитыватьИсправлениеИсходногоДокумента");
	КорректируемыеСчетаФактуры.Колонки.Добавить("НомерИсправления");
	КорректируемыеСчетаФактуры.Колонки.Добавить("ДатаИсправления");
	ДанныеДляПечати.Вставить("КорректируемыеСчетаФактуры", КорректируемыеСчетаФактуры);
	
	ДанныеДляПечати.Вставить("КППКонтрагента",  	ДанныеДокумента.КППКонтрагента);
	
	// заполнение колонок код и артикул
	ДополнительнаяКолонкаПечатныхФормДокументов = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДополнительнаяКолонкаПечатныхФормДокументов = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.НеВыводить Тогда
		ДанныеДляПечати.ТабличнаяЧасть.ЗаполнитьЗначения("", "ТоварКод");
		ДанныеДляПечати.ТабличнаяЧасть.Колонки.Удалить("ТоварАртикул");
	ИначеЕсли ДополнительнаяКолонкаПечатныхФормДокументов = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ДанныеДляПечати.ТабличнаяЧасть.Колонки.Удалить("ТоварКод");
		ДанныеДляПечати.ТабличнаяЧасть.Колонки.ТоварАртикул.Имя = "ТоварКод";
	Иначе
		ДанныеДляПечати.ТабличнаяЧасть.Колонки.Удалить("ТоварАртикул");
	КонецЕсли;
	
	ИсправляемыйДокументРеализации = УчетНДС.ПолучитьИсправляемыйДокументРеализации(ДанныеДокумента.Ссылка, Истина);
	РеквизитыПередаточныхДокументов = ОбщегоНазначения.СформироватьЗаголовокДокумента(ИсправляемыйДокументРеализации, "Универсальный передаточный документ");
	
	ДанныеДляПечати.Вставить("РеквизитыПередаточныхДокументов", РеквизитыПередаточныхДокументов);
	
	ДанныеДляПечати.Вставить("СтатусУКД", 				2);
	ДанныеДляПечати.Вставить("Основание", 				Строка(ДанныеДокумента.ДоговорКонтрагента));
	
	Возврат ДанныеДляПечати;
	
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// ФОРМИРОВАНИЕ КНИГ И ЖУРНАЛОВ

// Книга покупок, дополнительные листы книги покупок

Процедура ВывестиШапкуДопЛиста(ТабличныйДокумент, Макет, СтруктураПараметров, НомерДополнительногоЛиста) Экспорт
	
	ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	
	Организация = СтруктураПараметров.Организация;
	
	Если СтруктураПараметров.ЗаполнениеДокумента
		ИЛИ СтруктураПараметров.СформироватьОтчетПоСтандартнойФорме Тогда
		Секция = Макет.ПолучитьОбласть("ШапкаИнформация");
		ТабличныйДокумент.Вывести(Секция);
	КонецЕсли;
	
	Секция = Макет.ПолучитьОбласть("Шапка");
	Секция.Параметры.УстановленныйОтбор = "";
	Секция.Параметры.Период = ПредставлениеПериода(
		СтруктураПараметров.НалоговыйПериод, КонецДня(СтруктураПараметров.КонецНалоговогоПериода), "ФП = Истина");
	
	Если СтруктураПараметров.ДополнительныеЛистыЗаТекущийПериод Тогда
		Секция.Параметры.НомерЛиста = НомерДополнительногоЛиста;	
	КонецЕсли;
		
	СведенияОбОрганизации = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Организация, КонецДня(СтруктураПараметров.КонецНалоговогоПериода));
	НазваниеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование");
	
	Секция.Параметры.НазваниеОрганизации = НазваниеОрганизации;
	Секция.Параметры.ИННКППОрганизации = "" + Организация.ИНН + ?(НЕ ЗначениеЗаполнено(Организация.КПП), "", ("/" + Организация.КПП));
	Секция.Параметры.ДатаСоставления = Формат(СтруктураПараметров.ДатаОформления, "ДФ=dd.MM.yyyy");
	
	Если НЕ СтруктураПараметров.ЗаполнениеДокумента 
		И НЕ СтруктураПараметров.СформироватьОтчетПоСтандартнойФорме
		И СтруктураПараметров.ОтбиратьПоКонтрагенту Тогда
		Секция.Параметры.УстановленныйОтбор = НСтр("ru='Отбор: Контрагент '") 
			+ ?(ОбщегоНазначения.ОбъектЯвляетсяГруппой(СтруктураПараметров.КонтрагентДляОтбора), НСтр("ru='в группе '"), "= ") 
			+ СтруктураПараметров.КонтрагентДляОтбора;
	КонецЕсли;
	
	ТабличныйДокумент.Вывести(Секция);
	
КонецПроцедуры

// Определяет соответствие выбранного в отчете периода налоговому.
// Параметры:
//  Организация   - СправочникСсылка.Организация - организация, для которой определяется налоговый период,
//  НачалоПериода - Дата - начало периода отчета,
//  КонецПериода  - Дата - конец периода отчета.
//
// Возвращаемое значение:
//  Булево - Истина - период соответствует налоговому, можно формировать отчет по стандартной форме (с шапкой и подписями)
//           Ложь   - период не соответствует налоговому, отчет формируется без шапки и подписей.
Функция ПериодОтчетаСоответствуетНалоговому(Организация, НачалоПериода, КонецПериода) Экспорт
	
	БлижайшийНалоговыйПериод = РегламентированнаяОтчетность.БлижайшийНалоговыйПериод(
		Организация,
		КонецПериода,
		Перечисления.ВариантыРасширенногоПервогоНалоговогоПериода.РегистрацияВПоследние10ДнейКвартала,
		Перечисления.Периодичность.Квартал);
		
	Возврат БлижайшийНалоговыйПериод.Начало = НачалоПериода
	      И БлижайшийНалоговыйПериод.Конец = КонецДня(КонецПериода);
	
КонецФункции

// Определяет, находятся ли переданные даты внутри одного налогового периода по НДС.
// Параметры:
//  Организация   - СправочникСсылка.Организация - организация.
//  НачалоПериода - Дата - начало периода отчета.
//  КонецПериода  - Дата - конец периода отчета.
//
// Возвращаемое значение:
//  Булево - Истина - переданные даты находятся внутри одного налогового периода,
//           Ложь   - даты расположены в разных налоговых периодах.
Функция ДатыРасположеныВнутриОдногоНалоговогоПериода(Организация, НачалоПериода, КонецПериода) Экспорт
	
	БлижайшийНалоговыйПериод = РегламентированнаяОтчетность.БлижайшийНалоговыйПериод(
		Организация,
		КонецПериода,
		Перечисления.ВариантыРасширенногоПервогоНалоговогоПериода.РегистрацияВПоследние10ДнейКвартала,
		Перечисления.Периодичность.Квартал);
		
	Если КонецДня(КонецКвартала(КонецПериода)) < БлижайшийНалоговыйПериод.Конец Тогда
		// Учет еще не ведется, необходимо просто проверить, что даты находятся в одном квартале.
		Возврат НачалоКвартала(НачалоПериода) = НачалоКвартала(НачалоПериода);
	КонецЕсли;
		
	Возврат БлижайшийНалоговыйПериод.Начало <= НачалоПериода
	        И КонецДня(КонецПериода) <= БлижайшийНалоговыйПериод.Конец;
	
КонецФункции

// Возвращает структуру реквизитов счета-фактуры для вывода в табличные документы книги покупок и книги продаж.
// Параметры:
// ЗаписьКниги - строка выборки, содержащая регистрационную запись книги покупок или продаж.
// Возвращаемое значение:
// ПредставлениеСчетаФактуры - структура см. функцию НовыйПредставлениеСчетаФактуры()
Функция ОпределитьДатуИНомерСчетаФактуры(ЗаписьКниги, СтруктураПараметров) Экспорт
	
	ПрефиксыРИБиОрганизации = СтруктураПараметров.ПрефиксыРИБиОрганизации;
	
	ПредставлениеСчетаФактуры = НовыйПредставлениеСчетаФактуры();
	
	Если НЕ ЗначениеЗаполнено(ЗаписьКниги.СчетФактура) Тогда
		Возврат ПредставлениеСчетаФактуры;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗаписьКниги.ДатаСчетаФактуры) И ЗначениеЗаполнено(ЗаписьКниги.НомерСчетаФактуры) Тогда
		
		Если ЗаписьКниги.ОбрабатыватьНомерДокумента Тогда
			НомерСФ = ОбщегоНазначения.ПолучитьНомерНаПечать(
				Новый Структура("Дата, Номер, Организация",
					ЗаписьКниги.ДатаСчетаФактуры, ЗаписьКниги.НомерСчетаФактуры, СтруктураПараметров.Организация), 
				ПрефиксыРИБиОрганизации);
		Иначе
			НомерСФ = СокрЛП(ЗаписьКниги.НомерСчетаФактуры);
		КонецЕсли;
		ДатаСФ = Формат(ЗаписьКниги.ДатаСчетаФактуры, "ДФ=dd.MM.yyyy");
		
		Если ТипЗнч(ЗаписьКниги.СчетФактура) = Тип("ДокументСсылка.ГТДИмпорт") Тогда
	
			ПредставлениеСчетаФактуры.Дата          = ДатаСФ;
			ПредставлениеСчетаФактуры.Номер         = НомерСФ;
			ПредставлениеСчетаФактуры.НомерДата     = НомерСФ;
			ПредставлениеСчетаФактуры.ДатаНомер     = НомерСФ;
			ПредставлениеСчетаФактуры.Представление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1 № %2 от %3'"),
				НСтр("ru='Таможенная декларация'"), НомерСФ, ДатаСФ);
			ПредставлениеСчетаФактуры.НомерОтДата   = НомерСФ;
			Возврат ПредставлениеСчетаФактуры;
			
		Иначе
			
			Если ЗначениеЗаполнено(ЗаписьКниги.СчетФактураДокумент) Тогда
				Если ТипЗнч(ЗаписьКниги.СчетФактураДокумент) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
					Представление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1 № %2 от %3'"),
						НСтр("ru='Счет-фактура выданный'"),
						НомерСФ,
						ДатаСФ);
				ИначеЕсли ТипЗнч(ЗаписьКниги.СчетФактураДокумент) = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
					Представление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1 № %2 от %3'"),
						НСтр("ru='Счет-фактура полученный'"),
						НомерСФ,
						ДатаСФ);
				Иначе
					ИмяДокумента = ЗаписьКниги.СчетФактураДокумент.Метаданные().Синоним;
					Представление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1 № %2 от %3'"),
						ИмяДокумента,
						НомерСФ,
						ДатаСФ);
				КонецЕсли;
			Иначе
				ИмяДокумента = ЗаписьКниги.СчетФактура.Метаданные().Синоним;
				Представление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1 № %2 от %3'"),
					ИмяДокумента,
					НомерСФ,
					ДатаСФ);
			КонецЕсли;
		КонецЕсли;

	ИначеЕсли ЗаписьКниги.СводныйКорректировочный Тогда
		// Если для сводного корректировочного счета-фактуры не указаны номер и дата,
		// значит он регистрируется по постановлению № 981 без указания данных граф в книгах.
		Возврат ПредставлениеИсправленногоКорректировочногоСчетаФактуры(ПредставлениеСчетаФактуры, ЗаписьКниги, СтруктураПараметров, ПрефиксыРИБиОрганизации);
	Иначе
		
		Если ТипЗнч(ЗаписьКниги.СчетФактура) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
			РеквизитыОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЗаписьКниги.СчетФактура, "Дата,Номер");
			ДатаСФ  = Формат(РеквизитыОснования.Дата, "ДФ=dd.MM.yyyy");
			НомерСФ = ОбщегоНазначения.ПолучитьНомерНаПечать(
				Новый Структура("Дата, Номер, Организация",
					РеквизитыОснования.Дата, РеквизитыОснования.Номер, СтруктураПараметров.Организация), 
				ПрефиксыРИБиОрганизации);
			Представление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1 № %2 от %3'"),
				НСтр("ru='Счет-фактура выданный'"),
				НомерСФ,
				ДатаСФ);
		ИначеЕсли ТипЗнч(ЗаписьКниги.СчетФактураДокумент) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
			РеквизитыСчетаФактуры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЗаписьКниги.СчетФактураДокумент, "Дата,Номер");
			ДатаСФ  = Формат(РеквизитыСчетаФактуры.Дата, "ДФ=dd.MM.yyyy");
			НомерСФ = ОбщегоНазначения.ПолучитьНомерНаПечать(
				Новый Структура("Дата, Номер, Организация",
					РеквизитыСчетаФактуры.Дата, РеквизитыСчетаФактуры.Номер, СтруктураПараметров.Организация), 
				ПрефиксыРИБиОрганизации);
			Представление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1 № %2 от %3'"),
				НСтр("ru='Счет-фактура выданный'"),
				НомерСФ,
				ДатаСФ);
		ИначеЕсли ТипЗнч(ЗаписьКниги.СчетФактура) = Тип("ДокументСсылка.ГТДИмпорт") Тогда
			
			ДатаГТД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗаписьКниги.СчетФактураДокумент, "Дата");
			
			ПредставлениеСчетаФактуры.Дата          = ДатаГТД;
			ПредставлениеСчетаФактуры.Номер         = ЗаписьКниги.НомерСчетаФактуры;
			ПредставлениеСчетаФактуры.НомерДата     = ЗаписьКниги.НомерСчетаФактуры;
			ПредставлениеСчетаФактуры.ДатаНомер     = ЗаписьКниги.НомерСчетаФактуры;
			ПредставлениеСчетаФактуры.Представление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1 № %2 от %3'"),
				НСтр("ru='Таможенная декларация'"), ЗаписьКниги.НомерСчетаФактуры, Формат(ДатаГТД, "ДФ=dd.MM.yyyy"));
			ПредставлениеСчетаФактуры.НомерОтДата   = ЗаписьКниги.НомерСчетаФактуры;
			Возврат ПредставлениеСчетаФактуры;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СокрЛП(НомерСФ)) Тогда
		ПредставлениеСчетаФактуры.ДатаНомер   = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1;%2'"), ДатаСФ, НомерСФ);
		ПредставлениеСчетаФактуры.НомерДата   = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1;%2'"), НомерСФ, ДатаСФ);
		ПредставлениеСчетаФактуры.НомерОтДата = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1 от %2'"), НомерСФ, ДатаСФ);
	КонецЕсли;
	
	ПредставлениеСчетаФактуры.Номер         = СокрЛП(НомерСФ);
	ПредставлениеСчетаФактуры.Дата          = ДатаСФ;
	ПредставлениеСчетаФактуры.Представление = Представление;
	
	Возврат ПредставлениеИсправленногоКорректировочногоСчетаФактуры(ПредставлениеСчетаФактуры, ЗаписьКниги, СтруктураПараметров, ПрефиксыРИБиОрганизации);

КонецФункции

Функция НовыйПредставлениеСчетаФактуры()
	
	Результат = Новый Структура;
	
	Результат.Вставить("ДатаНомер"    , "");
	Результат.Вставить("НомерДата"    , "");
	Результат.Вставить("НомерОтДата"  , "");
	Результат.Вставить("Дата"         , "");
	Результат.Вставить("Номер"        , "");
	Результат.Вставить("Представление", "");
	
	Результат.Вставить("НомерДатаКорректировочный"  , "");
	Результат.Вставить("НомерОтДатаКорректировочный", "");
	Результат.Вставить("ДатаКорректировочный"       , "");
	Результат.Вставить("НомерКорректировочный"      , "");
	
	Результат.Вставить("НомерДатаИсправленный"  , "");
	Результат.Вставить("НомерОтДатаИсправленный", "");
	Результат.Вставить("ДатаИсправленный"       , "");
	Результат.Вставить("НомерИсправленный"      , "");
	
	Результат.Вставить("НомерДатаИсправленныйКорректировочный"  , "");
	Результат.Вставить("НомерОтДатаИсправленныйКорректировочный", "");
	Результат.Вставить("ДатаИсправленныйКорректировочный"       , "");
	Результат.Вставить("НомерИсправленныйКорректировочный"      , "");
	
	Возврат Результат;
	
КонецФункции

Функция ПредставлениеИсправленногоКорректировочногоСчетаФактуры(ПредставлениеСчетаФактуры, ЗаписьКниги, СтруктураПараметров, ПрефиксыРИБиОрганизации)
	
	Если ЗначениеЗаполнено(СокрЛП(ЗаписьКниги.НомерКорректировки)) Тогда
		Если ЗаписьКниги.ОбрабатыватьНомерДокумента Тогда
			НомерКорректировочный = ОбщегоНазначения.ПолучитьНомерНаПечать(
				Новый Структура("Дата, Номер, Организация",
				ЗаписьКниги.ДатаКорректировки, ЗаписьКниги.НомерКорректировки, СтруктураПараметров.Организация),
				ПрефиксыРИБиОрганизации);
		Иначе
			НомерКорректировочный = СокрЛП(ЗаписьКниги.НомерКорректировки);
		КонецЕсли;
		
		ПредставлениеСчетаФактуры.НомерКорректировочный = НомерКорректировочный;
		ПредставлениеСчетаФактуры.ДатаКорректировочный = Формат(ЗаписьКниги.ДатаКорректировки, "ДФ=dd.MM.yyyy");
		ПредставлениеСчетаФактуры.НомерДатаКорректировочный = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1;%2'"), 
			ПредставлениеСчетаФактуры.НомерКорректировочный, ПредставлениеСчетаФактуры.ДатаКорректировочный);
		ПредставлениеСчетаФактуры.НомерОтДатаКорректировочный = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1 от %2'"), 
			ПредставлениеСчетаФактуры.НомерКорректировочный, ПредставлениеСчетаФактуры.ДатаКорректировочный);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СокрЛП(ЗаписьКниги.НомерИсправления)) Тогда
		ПредставлениеСчетаФактуры.НомерИсправленный = СокрЛП(ЗаписьКниги.НомерИсправления);
		ПредставлениеСчетаФактуры.ДатаИсправленный = Формат(ЗаписьКниги.ДатаИсправления, "ДФ=dd.MM.yyyy");
		ПредставлениеСчетаФактуры.НомерДатаИсправленный = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1;%2'"), 
			ПредставлениеСчетаФактуры.НомерИсправленный, ПредставлениеСчетаФактуры.ДатаИсправленный);
		ПредставлениеСчетаФактуры.НомерОтДатаИсправленный = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1 от %2'"), 
			ПредставлениеСчетаФактуры.НомерИсправленный, ПредставлениеСчетаФактуры.ДатаИсправленный);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СокрЛП(ЗаписьКниги.НомерИсправленияКорректировки)) Тогда
		ПредставлениеСчетаФактуры.НомерИсправленныйКорректировочный = СокрЛП(ЗаписьКниги.НомерИсправленияКорректировки);
		ПредставлениеСчетаФактуры.ДатаИсправленныйКорректировочный = 
			Формат(ЗаписьКниги.ДатаИсправленияКорректировки, "ДФ=dd.MM.yyyy");
		ПредставлениеСчетаФактуры.НомерДатаИсправленныйКорректировочный = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1;%2'"),
			ПредставлениеСчетаФактуры.НомерИсправленныйКорректировочный, 
			ПредставлениеСчетаФактуры.ДатаИсправленныйКорректировочный);
		ПредставлениеСчетаФактуры.НомерОтДатаИсправленныйКорректировочный = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1 от %2'"),
			ПредставлениеСчетаФактуры.НомерИсправленныйКорректировочный, 
			ПредставлениеСчетаФактуры.ДатаИсправленныйКорректировочный);
	КонецЕсли;

	Возврат ПредставлениеСчетаФактуры;
	
КонецФункции

Функция РазделительПакетаЗапросов() Экспорт
	
	Возврат "
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|";
		
КонецФункции

Функция ПолучитьСтруктуруРеквизитовКонтрагента(ИНН, КПП, Знач КонтрагентНаименование = "") Экспорт
	
	СтруктураРеквизитовКонтрагента = Новый Структура();
	
	Если СтрДлина(СокрЛП(ИНН)) > 10 Тогда
		СтруктураРеквизитовКонтрагента.Вставить("ИННФЛ", ИНН);
		КонтрагентНаименование = СокрЛП(КонтрагентНаименование);
		Если ЗначениеЗаполнено(КонтрагентНаименование) Тогда 
			Если ВРег(Лев(КонтрагентНаименование, 3))  = "ИП " Тогда 
				КонтрагентНаименование = Сред(КонтрагентНаименование, 4)
			ИначеЕсли ВРег(Прав(КонтрагентНаименование, 3))  = " ИП" Тогда 
				КонтрагентНаименование = Лев(КонтрагентНаименование, СтрДлина(КонтрагентНаименование) - 3);
			КонецЕсли;
			ФИО = ОбщегоНазначенияЗК.РазложитьСтрокуВМассивПодстрок(КонтрагентНаименование, " ");
			КоличествоПодстрок = ФИО.Количество();
			
			СтруктураРеквизитовКонтрагента.Вставить("Фамилия", ?(КоличествоПодстрок > 0,ФИО[0],""));
			СтруктураРеквизитовКонтрагента.Вставить("Имя", ?(КоличествоПодстрок > 1,ФИО[1],""));
			СтруктураРеквизитовКонтрагента.Вставить("Отчество",?(КоличествоПодстрок > 2,ФИО[2],""));
	
		КонецЕсли;	
	Иначе
		СтруктураРеквизитовКонтрагента.Вставить("ИННЮЛ", ИНН);
		СтруктураРеквизитовКонтрагента.Вставить("КПП", КПП);
		Если  ЗначениеЗаполнено(КонтрагентНаименование) Тогда 
			СтруктураРеквизитовКонтрагента.Вставить("НаимОрг", КонтрагентНаименование);
		КонецЕсли;	
	КонецЕсли;
	
	Возврат СтруктураРеквизитовКонтрагента;

КонецФункции

Функция НоваяСтрокаИтоговКнигиПокупок() Экспорт

	Результат = Новый Структура();
	Результат.Вставить("ВсегоПокупок", 		0);
	Результат.Вставить("НДС",				0);
	Результат.Вставить("СуммаБезНДС18", 	0);
	Результат.Вставить("НДС18",				0);
	Результат.Вставить("СуммаБезНДС10", 	0);
	Результат.Вставить("НДС10", 			0);
	Результат.Вставить("НДС0", 				0);
	Результат.Вставить("СуммаСовсемБезНДС",	0);
	
	Возврат Результат;

КонецФункции

Функция НоваяСтрокаИтоговКнигиПродаж() Экспорт

	Результат = Новый Структура();
	Результат.Вставить("ВсегоПродаж", 		0);
	Результат.Вставить("СуммаБезНДС18", 	0);
	Результат.Вставить("НДС18", 			0);
	Результат.Вставить("СуммаБезНДС10", 	0);
	Результат.Вставить("НДС10", 			0);
	Результат.Вставить("НДС0", 				0);
	Результат.Вставить("СуммаСовсемБезНДС",	0);
	
	Возврат Результат;

КонецФункции

Функция ПрименяетсяОсвобождениеОтУплатыНДС(Организация, Период) Экспорт

	УчетнаяПолитикаНУ = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(Период, Организация);
	
	Если ЗначениеЗаполнено(УчетнаяПолитикаНУ) Тогда
		Возврат УчетнаяПолитикаНУ.ПрименяетсяОсвобождениеОтУплатыНДС;
	Иначе
		Возврат Ложь;
	КонецЕсли;

КонецФункции

// Получает признак применения постановления Правительства РФ от 24.10.2013 г. № 952
Функция ПрименяетсяПостановление952(Дата) Экспорт

	Возврат Дата >= '20131106'; // Постановление вступает в силу с 6 ноября 2013 года

КонецФункции

Процедура СнятиеРезерваНДСПартииПоЗаказамПокупателя(ТаблицаПартий,СтруктураПараметров)
		
	Для Каждого СтрокаПартии Из ТаблицаПартий Цикл
		
		// Количество по строке больше 0
		Если СтрокаПартии.Количество = 0 Тогда
			Продолжить;
		КонецЕсли; 
		
		// Добавим новую строку
		Движение = УправлениеЗапасамиПартионныйУчет.ДобавитьДвижениеВСтруктуруПараметров("НДСПартииТоваров", СтруктураПараметров);
		
		// Свойства
		Движение.Период 				= СтруктураПараметров.Период;
		Движение.Регистратор 			= СтруктураПараметров.Регистратор;
		Движение.Активность 			= Истина;
		Движение.ВидДвижения 			= ВидДвиженияНакопления.Расход;
		
		ЗаполнитьЗначенияСвойств(Движение,СтрокаПартии);
		
		Строка = Движение;
		
		// Добавим новую строку
		Движение = УправлениеЗапасамиПартионныйУчет.ДобавитьДвижениеВСтруктуруПараметров("НДСПартииТоваров", СтруктураПараметров);
		ЗаполнитьЗначенияСвойств(Движение,Строка);
		Движение.Заказ  				= Неопределено;
		Движение.ВидДвижения 			= ВидДвиженияНакопления.Приход;
		
	КонецЦикла;
	
КонецПроцедуры

/////////////////////////////////////////////////////////////////////////////////////
// ОТРАЖЕНИЕ ДВИЖЕНИЙ ПО РЕГИСТРУ НДС ПО ПАРТИЯМ ЗАПАСОВ, ПАРТИОННЫЙ УЧЕТ ДЛЯ НДС

// Доподняет структуру шапки документа параметрами ПартионныйУчетНДСвРазрезеСкладов и
// ПартионныйУчетНДСвРазрезеСерийИХарактеристик
//
Процедура ДополнитьПараметрамиПартионногоУчетаНДС(СтруктураШапкиДокумента, УчетнаяПолитика = Неопределено)
	
	Если УчетнаяПолитика = Неопределено Тогда
		УчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(СтруктураШапкиДокумента.Дата, СтруктураШапкиДокумента.Организация);
	КонецЕсли;
	
	Если Не СтруктураШапкиДокумента.Свойство("ПартионныйУчетНДСвРазрезеСкладов") Тогда
		Если УчетнаяПолитика <> Ложь 
			И ЗначениеЗаполнено(УчетнаяПолитика) 
			И УчетнаяПолитика.Свойство("ПартионныйУчетНДСвРазрезеСкладов") Тогда
			СтруктураШапкиДокумента.Вставить("ПартионныйУчетНДСвРазрезеСкладов", УчетнаяПолитика.ПартионныйУчетНДСвРазрезеСкладов);
		Иначе
			СтруктураШапкиДокумента.Вставить("ПартионныйУчетНДСвРазрезеСкладов", Ложь);
		КонецЕсли;
	КонецЕсли;
	Если Не СтруктураШапкиДокумента.Свойство("ПартионныйУчетНДСвРазрезеСерийИХарактеристик") Тогда
		Если УчетнаяПолитика <> Ложь 
			И ЗначениеЗаполнено(УчетнаяПолитика) 
			И УчетнаяПолитика.Свойство("ПартионныйУчетНДСвРазрезеСерийИХарактеристик") Тогда
			СтруктураШапкиДокумента.Вставить("ПартионныйУчетНДСвРазрезеСерийИХарактеристик", УчетнаяПолитика.ПартионныйУчетНДСвРазрезеСерийИХарактеристик);
		Иначе
			СтруктураШапкиДокумента.Вставить("ПартионныйУчетНДСвРазрезеСерийИХарактеристик", Ложь);
		КонецЕсли;
	КонецЕсли;
	Если Не СтруктураШапкиДокумента.Свойство("БухгалтерскийУчетСпособОценкиМПЗ") Тогда
		Если УчетнаяПолитика <> Ложь 
			И ЗначениеЗаполнено(УчетнаяПолитика) 
			И УчетнаяПолитика.Свойство("БухгалтерскийУчетСпособОценкиМПЗ") Тогда
			СтруктураШапкиДокумента.Вставить("БухгалтерскийУчетСпособОценкиМПЗ", УчетнаяПолитика.ПартионныйУчетНДСвРазрезеСерийИХарактеристик);
		Иначе
			СтруктураШапкиДокумента.Вставить("БухгалтерскийУчетСпособОценкиМПЗ", Перечисления.СпособыОценки.ПоСредней);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьДвиженияПоНДС(СтруктураПараметров, ТаблицаСписания, МассивНоменклатуры, Организация = Неопределено)
	
	Отказ = Ложь;
	
	СтруктураШапкиДокумента = ПолучитьСтруктуруШапкиДокументаПоСсылке(СтруктураПараметров.Регистратор);
		
	Если Не СтруктураШапкиДокумента.УчитыватьНДС тогда
		Возврат;
	КонецЕсли;
	
	Если Организация <> Неопределено тогда
		СтруктураШапкиДокумента.Вставить("Организация",Организация);
	КонецЕсли;
	
	Если ТипЗнч(СтруктураПараметров.Регистратор)= Тип("ДокументСсылка.РасходныйОрдерНаТовары") тогда
		
		ТаблицаСписания = УправлениеЗапасамиПартионныйУчет.ПолучитьТаблицуСтрокДокументов(СтруктураШапкиДокумента.Ссылка);
		УправлениеЗапасамиПартионныйУчет.ПодготовитьТаблицуСписания(СтруктураПараметров, ТаблицаСписания, Ложь, Истина, Истина);
		
	ИначеЕсли ТипЗнч(СтруктураПараметров.Регистратор)= Тип("ДокументСсылка.ПриходныйОрдерНаТовары") тогда
		
		ТаблицаСписания = УправлениеЗапасамиПартионныйУчет.ПолучитьТаблицуСписанияРасходнымОрдером(ТаблицаСписания[0], СтруктураПараметров);
		
		Если ТаблицаСписания = Неопределено Тогда
			Возврат;
		КонецЕсли; 
		
	КонецЕсли;

	СтруктураПолейУчетнойПолитикиНУ = Новый Структура("СложныйУчетНДС,НачислятьНДСПоОтгрузке");
	ОбщегоНазначения.ДополнитьПоложениямиУчетнойПолитики(СтруктураШапкиДокумента, СтруктураШапкиДокумента.Дата, Отказ, СтруктураШапкиДокумента.Организация, "Нал", СтруктураПолейУчетнойПолитикиНУ);
	
	// Если не указаны параметры учетной политики - движения по НДС не выполняем
	Если Отказ тогда
		Возврат;
	КонецЕсли;
		
	//Если сложный учет НДС не ведется - затрем параметры сложного учета ндс
	Если НЕ СтруктураШапкиДокумента.СложныйУчетНДС тогда 
		СтруктураШапкиДокумента.Вставить("НДСвСтоимостиТоваров",Перечисления.ДействиеНДСВСтоимостиТоваров.НеИзменять);
	КонецЕсли;
	
	ЭтоВозврат = СтруктураШапкиДокумента.ВидДокумента = "ВозвратТоваровПоставщику" 
				   или СтруктураШапкиДокумента.ВидДокумента = "ВозвратТоваровПоставщикуИзНТТ";
				   
	ЭтоВозвратОтПокупателя = СтруктураШапкиДокумента.ВидДокумента = "ВозвратТоваровОтПокупателя";
	
	Если глЗначениеПеременной("ИспользоватьРасширеннуюАналитикуУчетаНоменклатурыИЗатрат") 
	  И (глЗначениеПеременной("ДатаНачалаИспользованияРасширеннойАналитикиУчетаНоменклатурыИЗатрат") <= СтруктураПараметров.Период) Тогда
		ТаблицаПартий = ПолучитьТаблицуПартийПоДокументу(СтруктураПараметров, ТаблицаСписания);
	Иначе
		ТаблицаПартий = ПолучитьТаблицуПартийДляСписанияНДС(СтруктураПараметров);
	КонецЕсли;	
	
	Если ТаблицаПартий.Количество()= 0 тогда
		Возврат;
	КонецЕсли;
	
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(СтруктураШапкиДокумента.Ссылка);
	
	// Если вызов из партионного учета и проводиться не Закрытие заказов покупателя
	Если СтруктураПараметров.Свойство("ТаблицаСписанныхПартий") И Организация = Неопределено Тогда
		
		Если ЭтоВозврат тогда
			ДвиженияВозвратаТоваровПоставщикуПоРегистрамПодсистемыНДС(СтруктураШапкиДокумента, СтруктураПараметров, ТаблицаПартий, ТаблицаСписания, Отказ, Заголовок);
			Возврат;
		КонецЕсли;
		
		Если ТипЗнч(СтруктураПараметров.Регистратор)= Тип("ДокументСсылка.РасходныйОрдерНаТовары") тогда
			//При списании по ордеру таблица списанных партий не наследует суммовые реквизиты реализаци, необходимые для начисления НДС
			//В начале текущей процедуры недостающие данные были загружены в ТаблицаСписания
			РаспределеннаяТаблицаСписания = РаспределитьПартииПоТаблицеСписания(ТаблицаПартий, ТаблицаСписания, СтруктураШапкиДокумента, СтруктураПараметров);
		Иначе
			РаспределеннаяТаблицаСписания = ПреобразоватьТаблицуСписанныхПартийДляНДС(СтруктураПараметров);
		КонецЕсли;
		
		Если ЭтоВозвратОтПокупателя тогда
		    УчетНДСФормированиеДвижений.ДвиженияВозвратаТоваровОтПокупателяПоРегистрамПодсистемыНДС(СтруктураШапкиДокумента, СтруктураПараметров, РаспределеннаяТаблицаСписания, Отказ, Заголовок);
			Возврат;
		КонецЕсли;	
	Иначе	
	
		// Особые случаи списания партий НДС
		Если ЭтоВозврат тогда
		
			ДвиженияВозвратаТоваровПоставщикуПоРегистрамПодсистемыНДС(СтруктураШапкиДокумента, СтруктураПараметров, ТаблицаПартий, ТаблицаСписания, Отказ, Заголовок);
			Возврат;
		ИначеЕсли ЭтоВозвратОтПокупателя тогда
			
			ЗапросРасходныхОрдеров = Новый Запрос;
			ЗапросРасходныхОрдеров.Текст = 
			"ВЫБРАТЬ Подзапрос.Регистратор 		КАК Регистратор,
			|Подзапрос.РасходныйОрдерНаТовары 	КАК РасходныйОрдерНаТовары
			|ИЗ(
			|	ВЫБРАТЬ 
			|   	ПартииТоваровНаСкладах.ДокументДвижения КАК Регистратор,
			|		ВЫБОР
			|			КОГДА ПартииТоваровНаСкладах.Регистратор ССЫЛКА Документ.РасходныйОрдерНаТовары
			|				ТОГДА ПартииТоваровНаСкладах.Регистратор
			|			ИНАЧЕ НЕОПРЕДЕЛЕНО
			|		КОНЕЦ КАК РасходныйОрдерНаТовары
			|   ИЗ
			|     РегистрНакопления.ПартииТоваровНаСкладахБухгалтерскийУчет КАК ПартииТоваровНаСкладах
			|   ГДЕ 
			|	ПартииТоваровНаСкладах.ВидДвижения = &ВидДвиженияРасход
			|	И ПартииТоваровНаСкладах.КодОперации В(&КодыСписание)
            |   И ПартииТоваровНаСкладах.ДокументДвижения В (&МассивРегистраторов)
			|   И ПартииТоваровНаСкладах.Период < &Период
			|	ОБЪЕДИНИТЬ ВСЕ
			|	ВЫБРАТЬ
			|		ПартииТоваровНаСкладах.Регистратор КАК Регистратор,
			|		ВЫБОР
			|			КОГДА ПартииТоваровНаСкладах.Регистратор ССЫЛКА Документ.РасходныйОрдерНаТовары
			|				ТОГДА ПартииТоваровНаСкладах.Регистратор
			|			ИНАЧЕ НЕОПРЕДЕЛЕНО
			|		КОНЕЦ КАК РасходныйОрдерНаТовары
            |   ИЗ
			|     РегистрНакопления.ПартииТоваровНаСкладахБухгалтерскийУчет КАК ПартииТоваровНаСкладах
			|   ГДЕ 
			|	ПартииТоваровНаСкладах.ВидДвижения = &ВидДвиженияРасход
			|	И ПартииТоваровНаСкладах.КодОперации В(&КодыСписание)
            |   И ПартииТоваровНаСкладах.Регистратор В (&МассивРегистраторов)
			|   И ПартииТоваровНаСкладах.Период < &Период
			|) КАК Подзапрос
			|СГРУППИРОВАТЬ ПО
			|Подзапрос.Регистратор,
			|Подзапрос.РасходныйОрдерНаТовары
			|ИТОГИ ПО Регистратор";
			
			МассивРеализация = Новый Массив;
			КодыОпераций = Перечисления.КодыОперацийПартииТоваров;
			МассивРеализация.Добавить(КодыОпераций.ПередачаТарыКонтрагенту);
			МассивРеализация.Добавить(КодыОпераций.Реализация);
			МассивРеализация.Добавить(КодыОпераций.РеализацияКомиссия);
			МассивРеализация.Добавить(КодыОпераций.РеализацияРозница);
			
			ЗапросРасходныхОрдеров.УстановитьПараметр("КодыСписание",МассивРеализация);
			
			МассивРегистраторов = ТаблицаСписания.ВыгрузитьКолонку("ДокументПередачи");
			ЗапросРасходныхОрдеров.УстановитьПараметр("МассивРегистраторов",МассивРегистраторов);
			// Возврат не может быть раньше реализации
			ЗапросРасходныхОрдеров.УстановитьПараметр("Период",СтруктураПараметров.Период);
			ЗапросРасходныхОрдеров.УстановитьПараметр("ВидДвиженияРасход",ВидДвиженияНакопления.Расход);
			
			ДеревоРасходныхОрдеров = ЗапросРасходныхОрдеров.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
			СтруктураПараметров.Вставить("ДеревоРасходныхОрдеров",ДеревоРасходныхОрдеров);
			
			РаспределеннаяТаблицаСписания = РаспределитьПартииПоТаблицеСписания(ТаблицаПартий, ТаблицаСписания, СтруктураШапкиДокумента, СтруктураПараметров);
			УчетНДСФормированиеДвижений.ДвиженияВозвратаТоваровОтПокупателяПоРегистрамПодсистемыНДС(СтруктураШапкиДокумента, СтруктураПараметров, РаспределеннаяТаблицаСписания, Отказ, Заголовок);
			Возврат;
		// Закрытие заказов покупателя
		ИначеЕсли Организация <> Неопределено тогда
			МассивСчетов = ТаблицаПартий.ВыгрузитьКолонку(ТаблицаПартий.Колонки.СчетУчета);
			ТаблицаПартий.Колонки.Добавить("СчетУчетаБУ");
			ТаблицаПартий.ЗагрузитьКолонку(МассивСчетов,ТаблицаПартий.Колонки.СчетУчетаБУ);
			
			ТаблицаПартий.Колонки.Добавить("Партия");
			МассивПартий = ТаблицаПартий.ВыгрузитьКолонку(ТаблицаПартий.Колонки.ДокументОприходования);
			ТаблицаПартий.ЗагрузитьКолонку(МассивПартий,ТаблицаПартий.Колонки.Партия);
			
			ТаблицаПартий.Колонки.Добавить("ЗаказПартии");
			МассивЗаказов = ТаблицаПартий.ВыгрузитьКолонку(ТаблицаПартий.Колонки.Заказ);
			ТаблицаПартий.ЗагрузитьКолонку(МассивЗаказов,ТаблицаПартий.Колонки.ЗаказПартии);
			
			ТаблицаПартий.Колонки.Добавить("ОбособленныйУчетТоваровПоЗаказамПокупателей");
			Для Каждого ТекСтрокаПартии Из ТаблицаПартий Цикл
				Если (ЗначениеЗаполнено(ТекСтрокаПартии.ЗаказПартии)) И (ТипЗНЧ(ТекСтрокаПартии.ЗаказПартии) = Тип("ДокументСсылка.ЗаказПокупателя")) Тогда 
					ТекСтрокаПартии.ОбособленныйУчетТоваровПоЗаказамПокупателей = ТекСтрокаПартии.ЗаказПартии.ДоговорКонтрагента.ОбособленныйУчетТоваровПоЗаказамПокупателей;
				КонецЕсли;
			КонецЦикла;	
			
			ТаблицаПартий.Колонки.КодОперации.Имя = "КодОперацииПартииТоваров";
			ТаблицаНДСПартииСписания = ОпределитьПартииСписанияПоРегиструНДСПартии(СтруктураШапкиДокумента, ТаблицаПартий,Отказ, Заголовок, ЭтоВозврат, ЭтоВозвратОтПокупателя,СтруктураПараметров);
			СнятиеРезерваНДСПартииПоЗаказамПокупателя(ТаблицаНДСПартииСписания, СтруктураПараметров);
			Возврат;
		КонецЕсли;
		РаспределеннаяТаблицаСписания = РаспределитьПартииПоТаблицеСписания(ТаблицаПартий, ТаблицаСписания, СтруктураШапкиДокумента, СтруктураПараметров);
	КонецЕсли; 
	
	Для каждого СтрокаРаспределеннойТаблицы из РаспределеннаяТаблицаСписания Цикл
		ОтражатьНДСКомитента = СтруктураШапкиДокумента.Дата >= '20060101000000' И (СтрокаРаспределеннойТаблицы.Комиссионный 
							   И СтрокаРаспределеннойТаблицы.УчетАгентскогоНДС);
		Если ОтражатьНДСКомитента Тогда 
			СтрокаРаспределеннойТаблицы.ВидЦенности = Перечисления.ВидыЦенностей.НалоговыйАгентКомитент;
		КонецЕсли;
	КонецЦикла;
	
	ВыполнитьДвиженияНДСНалоговогоАгентаКомиссионер(СтруктураШапкиДокумента, РаспределеннаяТаблицаСписания, СтруктураПараметров);
	
	ВыполнитьДвиженияПоРегиструНДСНачисленныйОтражениеРеализации(СтруктураШапкиДокумента, РаспределеннаяТаблицаСписания, СтруктураПараметров, Отказ);
	
	СчетаУчетаОС = ОпределитьСчетаУчетаОСиНМА("ОС");
	
	Если СтруктураШапкиДокумента.СложныйУчетНДС Тогда
		
		// Получим таблицу НДС партий
		ТаблицаНДСПартииСписания = ОпределитьПартииСписанияПоРегиструНДСПартии(СтруктураШапкиДокумента, РаспределеннаяТаблицаСписания,Отказ, Заголовок, ЭтоВозврат, ЭтоВозвратОтПокупателя, СтруктураПараметров);
		
		Если ТаблицаНДСПартииСписания.Количество() = 0 Тогда
			//Партии не найдены или отражение в партионном учете НДС не производится.
			//Дальнейшая обработка не требуется
			Возврат;
		КонецЕсли;
		
		ВыполнитьДвиженияСписанияНДС(СтруктураШапкиДокумента, ТаблицаНДСПартииСписания, СтруктураПараметров, Заголовок);
		
		МассивОрганизаций = ТаблицаНДСПартииСписания.ВыгрузитьКолонку("Организация");
		
		МассивОрганизаций = ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(МассивОрганизаций,Истина,Истина);
		
		МассивПартий = ТаблицаНДСПартииСписания.ВыгрузитьКолонку("Партия");
		МассивПартий = ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(МассивПартий);
		
		СтруктураПараметров.Вставить("НоменклатурныеГруппыДляРеализацииБезНДСиНДС0", ПолучитьНоменклатурныеГруппыДляРеализацииБезНДСиНДС0(СтруктураПараметров.Период, МассивОрганизаций, СтруктураПараметров));
		
		ВыполнитьДвиженияНДСНезавершенноеПроизводство(СтруктураШапкиДокумента, СтруктураПараметров, ТаблицаНДСПартииСписания, Отказ);
		
		ВыполнитьДвиженияПоОтражениюПредположенияСтавки0(СтруктураШапкиДокумента, ТаблицаНДСПартииСписания, СтруктураПараметров, Заголовок);
		
		ВыполнитьДвиженияПоступленияПоРегиструНДСПартииТоваров(СтруктураШапкиДокумента, СтруктураПараметров, ТаблицаНДСПартииСписания, Отказ);

		ВыполнитьДвиженияПоступленияПоРегиструНДСПартииТоваровКомплектацияВыпуск(СтруктураШапкиДокумента, СтруктураПараметров, ТаблицаНДСПартииСписания, Отказ);
		
		ВыполнитьДвиженияПоРегиструНДСКосвенныеРасходы_СписаниеМатериаловНаКосвенныеРасходы(СтруктураШапкиДокумента, ТаблицаНДСПартииСписания, СтруктураПараметров, Отказ);	
		
		ВыполнитьДвиженияПоРегистрамНДССписаниеРасходовпоВНА(СтруктураШапкиДокумента, ТаблицаНДСПартииСписания, СтруктураПараметров, Отказ);
		
	КонецЕсли;
		
КонецПроцедуры//СформироватьДвиженияПоНДС

// Процедура - вход для движений по НДС
// Параметры 
// СтруктураПараметров - структура, хранящая основные параметры модуля УправлениеЗапасамиПартионныйУчет 
// ТаблицаСписания - 	 таблица значений содержащая информацию о том что и в каком количестве нужно списывать,
// 						 обычно получается из регистра "СписанныеТовары"
Процедура ВыполнитьДвиженияПоНДС(СтруктураПараметров, ТаблицаСписания) Экспорт
	
	МассивНоменклатуры = ТаблицаСписания.ВыгрузитьКолонку("Номенклатура");
	
	МассивНоменклатуры = ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(МассивНоменклатуры);
	
	Если ТипЗнч(СтруктураПараметров.Регистратор)= Тип("ДокументСсылка.ЗакрытиеЗаказовПокупателей") тогда
		МассивОрганизаций = ТаблицаСписания.ВыгрузитьКолонку(ТаблицаСписания.Колонки.Организация);
		МассивОрганизаций = ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(МассивОрганизаций,Истина,Истина);
		Для каждого Организация из МассивОрганизаций цикл
			СформироватьДвиженияПоНДС(СтруктураПараметров, ТаблицаСписания, МассивНоменклатуры, Организация);
		КонецЦикла;
	Иначе
		СформироватьДвиженияПоНДС(СтруктураПараметров, ТаблицаСписания, МассивНоменклатуры);
	КонецЕсли;
	
КонецПроцедуры//ВыполнитьДвиженияПоНДС

Процедура ЗагрузитьВТаблицуЗначенийСписанныеПартии(СтруктураПараметров, ИмяНабораДвижений, ИмяТаблицыПриемника)
	Перем НаборДвижений;
	
	Если НЕ СтруктураПараметров.Свойство(ИмяНабораДвижений, НаборДвижений) Тогда
		Возврат;
	КонецЕсли;
	
	НаборДвижений.Прочитать();
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	// Заполним значения в совпадающих колонках.
	Для Каждого СтрокаТаблицыИсточника Из ТаблицаДвижений Цикл
		Если СтрокаТаблицыИсточника.СписаниеПартий Тогда
			СтрокаТаблицыПриемника = СтруктураПараметров[ИмяТаблицыПриемника].Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицыПриемника, СтрокаТаблицыИсточника);
        КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ЗагрузитьВТаблицуЗначенийСписанныеПартии()

// Добавляет в таблицу списанных товаров, данные по комиссии
//
// Параметры:
//  ОтчетКомиссионера       - документ-ссылка Отчет комиссионера о продажах.
//  ТаблицаСписанныхТоваров - выходная таблица значений, куда добавляются строки.
//
Процедура ДополнитьСписанныеТоварыДаннымиПоКомиссии(ОтчетКомиссионера, ТаблицаСписанныхТоваров) Экспорт
	
	Если ТипЗнч(ОтчетКомиссионера) <> Тип("ДокументСсылка.ОтчетКомиссионераОПродажах")
		ИЛИ ТипЗнч(ТаблицаСписанныхТоваров) <> Тип("ТаблицаЗначений")
		ИЛИ ТаблицаСписанныхТоваров.Колонки.Найти("ВыставленСФ") <> Неопределено
		ИЛИ ТаблицаСписанныхТоваров.Колонки.Найти("НомерСтроки") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекстСписанныеТовары = "";
	Для каждого Колонка Из ТаблицаСписанныхТоваров.Колонки Цикл
		Если Колонка.Имя = "МоментВремени" Тогда
			Продолжить;
		КонецЕсли;
		
		ТекстСписанныеТовары = ТекстСписанныеТовары + ",
		|	СписанныеТовары." + Колонка.Имя + " КАК " + Колонка.Имя;
	КонецЦикла;
	
	ТаблицаСписанныхТоваров.Колонки.Добавить("СчетФактура", Новый ОписаниеТипов("ДокументСсылка.СчетФактураВыданный"));
	ТаблицаСписанныхТоваров.Колонки.Добавить("Покупатель",  Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	ТаблицаСписанныхТоваров.Колонки.Добавить("ДатаСФ",      Новый ОписаниеТипов("Дата"));
	ТаблицаСписанныхТоваров.Колонки.Добавить("ВыставленСФ", Новый ОписаниеТипов("Булево"));
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ" + Сред(ТекстСписанныеТовары, 2) + "
	|ПОМЕСТИТЬ ВТ_СписанныеТовары
	|ИЗ
	|	&ТаблицаСписанныхТоваров КАК СписанныеТовары
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтчетКомиссионераОПродажахТовары.КлючСтроки КАК КлючСтроки" + ТекстСписанныеТовары + "
	|ПОМЕСТИТЬ ВТ_КлючСтроки
	|ИЗ
	|	Документ.ОтчетКомиссионераОПродажах.Товары КАК ОтчетКомиссионераОПродажахТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СписанныеТовары КАК СписанныеТовары
	|		ПО ОтчетКомиссионераОПродажахТовары.НомерСтроки = СписанныеТовары.НомерСтроки
	|ГДЕ
	|	ОтчетКомиссионераОПродажахТовары.Ссылка = &Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	КлючСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтчетКомиссионераОПродажахПокупатели.Покупатель КАК Покупатель,
	|	ОтчетКомиссионераОПродажахПокупатели.ДатаСФ КАК ДатаСФ,
	|	ОтчетКомиссионераОПродажахПокупатели.ВыставленСФ КАК ВыставленСФ,
	|	ОтчетКомиссионераОПродажахПокупатели.СчетФактура КАК СчетФактура" + СтрЗаменить(ТекстСписанныеТовары, "СписанныеТовары.", "ВТ_КлючСтроки.") + "
	|ИЗ
	|	Документ.ОтчетКомиссионераОПродажах.Покупатели КАК ОтчетКомиссионераОПродажахПокупатели
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_КлючСтроки КАК ВТ_КлючСтроки
	|		ПО ОтчетКомиссионераОПродажахПокупатели.КлючСтроки = ВТ_КлючСтроки.КлючСтроки
	|ГДЕ
	|	ОтчетКомиссионераОПродажахПокупатели.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка",                  ОтчетКомиссионера);
	Запрос.УстановитьПараметр("ТаблицаСписанныхТоваров", ТаблицаСписанныхТоваров);
	Выборка = Запрос.Выполнить().Выбрать();
	
	ТаблицаСписанныхТоваров.Очистить();
	Пока Выборка.Следующий() Цикл
		СтрокаТаблицы = ТаблицаСписанныхТоваров.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Выборка);
	КонецЦикла;
	
КонецПроцедуры

Процедура ВыполнитьДвиженияПоРегиструНДСКосвенныеРасходы_СписаниеМатериаловНаКосвенныеРасходы(СтруктураШапкиДокумента, ТаблицаНДСПартииСписания, СтруктураПараметров, Отказ);	
	
	/////////////////////////////////////////////////////////////////////////////////
	// НДС по переданным ТМЦ на объект строительства
	
	ДанныеДляОбработки = ТаблицаНДСПартииСписания.СкопироватьКолонки();
	
	ИспользоватьРА = УправлениеЗапасами.ИспользуетсяРасширеннаяАналитикаУчета(СтруктураШапкиДокумента.Дата);
	
	Для Каждого Строка из ТаблицаНДСПартииСписания Цикл
		
		ХарактерЗатрат = УправлениеЗатратами.ПолучитьХарактерЗатратПоСчетуЗатрат(Строка.КорСчетБУ, Строка.СтатьяЗатрат);
		Если ХарактерЗатрат = Перечисления.ХарактерЗатрат.ОбщехозяйственныеРасходы 
		   Или ХарактерЗатрат = Перечисления.ХарактерЗатрат.ОбщепроизводственныеРасходы
		   Или ХарактерЗатрат = Перечисления.ХарактерЗатрат.КоммерческиеРасходы
		   Или ХарактерЗатрат = Перечисления.ХарактерЗатрат.ИздержкиОбращения
		   Или ХарактерЗатрат = Перечисления.ХарактерЗатрат.БракВПроизводстве
		   Или (ИспользоватьРА И ХарактерЗатрат = Перечисления.ХарактерЗатрат.ПроизводственныеРасходы)
		   Тогда
		   
				НоваяСтрока = ДанныеДляОбработки.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		КонецЕсли;

	КонецЦикла;
	
	СформироватьДвиженияПоРегиструНДСКосвенныеРасходы_СписаниеМатериаловНаКосвенныеРасходы(СтруктураШапкиДокумента, ДанныеДляОбработки, СтруктураПараметров, Отказ);

КонецПроцедуры

// НДС по партиям - отразить поступление на склад-получатель
//
Процедура ВыполнитьДвиженияПоступленияПоРегиструНДСПартииТоваров(СтруктураШапкиДокумента, СтруктураПараметров, ТаблицаНДСПартииСписания, Отказ)
	
	Если ТаблицаНДСПартииСписания.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Строка = "ВозвратОтКомиссионера, ВозвратОтПереработчика, ВозвратОтПокупателя, ВыпускПоОперацииСтоимость, ВыпускПродукцииФиксНаСклад,
			 |Комплектация, КорректировкаСерийИХарактеристик, ПередачаВПереработку, ПередачаНаКомиссию, ПеремещениеМеждуСкладами,
			 |РезервированиеПодЗаказ, СнятиеРезерваПодЗаказ, ВключениеАктиваВСоставМПЗ";
	ДанныеДляОбработки = ОтобратьСтрокиПартийПоКодамОпераций(Строка, ТаблицаНДСПартииСписания, СтруктураПараметров);
	
	ВыполнятьПоступление = Ложь;

	Если СтруктураШапкиДокумента.ВидДокумента = "РеализацияТоваровУслуг" тогда
		Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером 
			И СтруктураШапкиДокумента.СложныйУчетНДС
			Тогда
			ВыполнятьПоступление = Истина;
		КонецЕсли;
	Иначе
		ВыполнятьПоступление = Истина;
	КонецЕсли;
	
	Если ВыполнятьПоступление тогда
		ТаблицаДвиженийПартии = СтруктураПараметров.ТаблицаДвиженийНДСПартииТоваров.СкопироватьКолонки();
		
		КолНДСПартииТоваров = СтруктураПараметров.ТаблицаДвиженийНДСПартииТоваров.Количество();
		
		Если ДанныеДляОбработки.Колонки.Найти("ЗаказСписания") <> Неопределено Тогда
			ДанныеДляОбработки.Колонки.ЗаказСписания.Имя = "ЗаказПокупателя";
		КонецЕсли;
		
		ЕстьХарактеристикаНоменклатурыНовая = ДанныеДляОбработки.Колонки.Найти("ХарактеристикаНоменклатурыНовая") <> Неопределено;
		ЕстьСерияНоменклатурыНовая = ДанныеДляОбработки.Колонки.Найти("СерияНоменклатурыНовая") <> Неопределено;
		ЕстьНоменклатураНовая = ДанныеДляОбработки.Колонки.Найти("НоменклатураНовая") <> Неопределено;
		ЕстьДокументОприходованияНовый = ДанныеДляОбработки.Колонки.Найти("ДокументОприходованияНовый") <> Неопределено;
		ЕстьЗаказПокупателя = ДанныеДляОбработки.Колонки.Найти("ЗаказПокупателя") <> Неопределено;
		
		Для Каждого СтрокаТаблицы ИЗ ДанныеДляОбработки Цикл
			// Для того, чтобы правильно отразить поступление партий НДС нужно изменить таблицу ТаблицаНДСПартииСписания
			Если ЗначениеЗаполнено(СтрокаТаблицы.СкладПолучатель) тогда
				СтрокаТаблицы.Склад = СтрокаТаблицы.СкладПолучатель;
			КонецЕсли;
			Если ЕстьХарактеристикаНоменклатурыНовая И (ЗначениеЗаполнено(СтрокаТаблицы.ХарактеристикаНоменклатурыНовая) 
				Или СтрокаТаблицы.ИзменитьХарактеристику) тогда
				СтрокаТаблицы.ХарактеристикаНоменклатуры = СтрокаТаблицы.ХарактеристикаНоменклатурыНовая;
			КонецЕсли;
			Если ЕстьСерияНоменклатурыНовая И (ЗначениеЗаполнено(СтрокаТаблицы.СерияНоменклатурыНовая) 
				или СтрокаТаблицы.ИзменитьСерию) тогда
				СтрокаТаблицы.СерияНоменклатуры = СтрокаТаблицы.СерияНоменклатурыНовая;
			КонецЕсли;
			Если ЕстьНоменклатураНовая И ЗначениеЗаполнено(СтрокаТаблицы.НоменклатураНовая) тогда
				СтрокаТаблицы.Номенклатура = СтрокаТаблицы.НоменклатураНовая;
			КонецЕсли;
			Если ЕстьДокументОприходованияНовый И ЗначениеЗаполнено(СтрокаТаблицы.ДокументОприходованияНовый) Тогда
				СтрокаТаблицы.Партия = СтрокаТаблицы.ДокументОприходованияНовый;
			КонецЕсли; 
			
			// Утановка признака ОбособленныйУчетТоваровПоЗаказамПокупателей для движений поступления при резервировании товаров
			Если СтруктураПараметров.Свойство("СоответствиеКодовОперацийСтрокамНДСПартий") 
				и (
				СтруктураПараметров.СоответствиеКодовОперацийСтрокамНДСПартий[Перечисления.КодыОперацийПартииТоваров.РезервированиеПодЗаказ] <> Неопределено 
				или СтруктураПараметров.СоответствиеКодовОперацийСтрокамНДСПартий[Перечисления.КодыОперацийПартииТоваров.Комплектация] <> Неопределено
				)
				Тогда
				СоответствиеЗаказов = Новый Соответствие();
				Если СтрокаТаблицы.КодОперацииПартииТоваров = Перечисления.КодыОперацийПартииТоваров.РезервированиеПодЗаказ
					или СтрокаТаблицы.КодОперацииПартииТоваров = Перечисления.КодыОперацийПартииТоваров.Комплектация
					тогда
					Если Не ЕстьЗаказПокупателя Или Не ЗначениеЗаполнено(СтрокаТаблицы.ЗаказПокупателя) Тогда
						//Это снятие резерва
						СтрокаТаблицы.ОбособленныйУчетТоваровПоЗаказамПокупателей = Ложь;
					Иначе	
						ОбособленныйУчетТоваровПоЗаказамПокупателей = СоответствиеЗаказов[СтрокаТаблицы.ЗаказПокупателя];
					
						Если ОбособленныйУчетТоваровПоЗаказамПокупателей = Неопределено Тогда
								
							СтруктураЗаказа = Новый Структура("ДоговорКонтрагента");
							УправлениеЗапасамиПартионныйУчет.ПолучитьРеквизитыОбъекта(СтрокаТаблицы.ЗаказПокупателя, СтруктураЗаказа);
								
							СтруктураДоговора = Новый Структура("ОбособленныйУчетТоваровПоЗаказамПокупателей");
							УправлениеЗапасамиПартионныйУчет.ПолучитьРеквизитыОбъекта(СтруктураЗаказа.ДоговорКонтрагента, СтруктураДоговора);
								
							СтрокаТаблицы.ОбособленныйУчетТоваровПоЗаказамПокупателей = СтруктураДоговора.ОбособленныйУчетТоваровПоЗаказамПокупателей;
								
						Иначе
							СтрокаТаблицы.ОбособленныйУчетТоваровПоЗаказамПокупателей = ОбособленныйУчетТоваровПоЗаказамПокупателей;
						КонецЕсли;
					КонецЕсли;	
				КонецЕсли; 
			КонецЕсли;
		КонецЦикла;
		
		// Добавим колонки для обработки заказа покупателя.
		Если ТаблицаДвиженийПартии.Колонки.Найти("ОбособленныйУчетТоваровПоЗаказамПокупателей")= Неопределено Тогда
			ТаблицаДвиженийПартии.Колонки.Добавить("ОбособленныйУчетТоваровПоЗаказамПокупателей");
			ТаблицаДвиженийПартии.ЗаполнитьЗначения(Ложь,"ОбособленныйУчетТоваровПоЗаказамПокупателей");
		КонецЕсли;
			
		Если ТаблицаДвиженийПартии.Колонки.Найти("ЗаказПокупателя")= Неопределено Тогда
			ТаблицаДвиженийПартии.Колонки.Добавить("ЗаказПокупателя");
			ТаблицаДвиженийПартии.ЗаполнитьЗначения(Неопределено,"ЗаказПокупателя");
		КонецЕсли;
		
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ДанныеДляОбработки, ТаблицаДвиженийПартии);
		
		ТаблицаДвиженийПартии.Колонки.Добавить("Услуга", Новый ОписаниеТипов("Булево"));
		Для К = 0 По ТаблицаДвиженийПартии.Количество() - 1 Цикл
			СтрокаТаблицы = ТаблицаДвиженийПартии[К];
			Если Не СтрокаТаблицы.КодОперацииПартииТоваров = Перечисления.КодыОперацийПартииТоваров.РезервированиеПодЗаказ Тогда
				СтрокаТаблицы.СчетУчета = ДанныеДляОбработки[К].КорСчетСписанияБУ;
			КонецЕсли;
			СтрокаТаблицы.Услуга = Ложь;
		КонецЦикла;
		ТаблицаДвиженийПартии.Колонки.СчетУчета.Имя = "СчетУчетаЦенности";
		
		Если СтруктураШапкиДокумента.ВидДокумента = "ПринятиеКУчетуОС" тогда
			
			КолСтрок = ТаблицаДвиженийПартии.Количество();
			Для ОбратныйИндекс = 1 По КолСтрок Цикл 
				Строка = ТаблицаДвиженийПартии[КолСтрок - ОбратныйИндекс]; 
				Если Строка.Количество = 0 Тогда 
					ТаблицаДвиженийПартии.Удалить(Строка); 
				КонецЕсли;
			КонецЦикла;
			
			ТаблицаДвиженийПартии.ЗаполнитьЗначения(СтруктураПараметров.Регистратор,"Партия");
			ТаблицаДвиженийПартии.ЗаполнитьЗначения(0,"Стоимость");
			ТаблицаДвиженийПартии.ЗаполнитьЗначения(0,"НДС");
		КонецЕсли;
		
		УчетНДСФормированиеДвижений.СформироватьДвиженияПоступленияПоРегиструНДСПартииТоваров(СтруктураШапкиДокумента, ТаблицаДвиженийПартии, СтруктураПараметров.ТаблицаДвиженийНДСПартииТоваров, Отказ);

		// Устанавливаем флаги модификации
		СтруктураПараметров.ИзмененыДвиженияНДСПартииТоваров = СтруктураПараметров.ИзмененыДвиженияНДСПартииТоваров 
									ИЛИ (КолНДСПартииТоваров <> СтруктураПараметров.ТаблицаДвиженийНДСПартииТоваров.Количество());
	КонецЕсли;
	
КонецПроцедуры//ВыполнитьДвиженияПоступленияПоРегиструНДСПартииТоваров

Процедура ВыполнитьДвиженияПоРегиструНДСНачисленныйОтражениеРеализации(СтруктураШапкиДокумента, РаспределеннаяТаблицаСписания, СтруктураПараметров, Отказ)
	
	СтрокаКодовОпераций = "Реализация, РеализацияКомиссия, РеализацияРозница";
	
	ДанныеДляОбработки = ОтобратьСтрокиПостроителемЗапроса(СтрокаКодовОпераций, РаспределеннаяТаблицаСписания);
	
	Если ДанныеДляОбработки = Неопределено тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.УчитыватьНДС Тогда
				
		УчетНДСФормированиеДвижений.СформироватьДвиженияПоРегиструНДСНачисленный_ОтражениеРеализации(СтруктураШапкиДокумента, ДанныеДляОбработки, СтруктураПараметров, Отказ, СчетОтнесенияНДС(СтруктураШапкиДокумента));
 
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьДвиженияПоОтражениюПредположенияСтавки0(СтруктураШапкиДокумента, ТаблицаНДСПартииСписания, СтруктураПараметров, Заголовок)
	
	СтрокаКодовОпераций = "Реализация, РеализацияКомиссия, РеализацияРозница";
	
	Если СтруктураШапкиДокумента.ВидДокумента = "РеализацияТоваровУслуг" 
		И СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ОтгрузкаБезПереходаПраваСобственности  Тогда
		
		СтрокаКодовОпераций = СтрокаКодовОпераций + ", ПередачаНаКомиссию";
	КонецЕсли;
	
	ДанныеДляОбработки = ОтобратьСтрокиПартийПоКодамОпераций(СтрокаКодовОпераций, ТаблицаНДСПартииСписания, СтруктураПараметров);
	
	Если Не ДанныеДляОбработки = Неопределено тогда
		КолНДСПредъявленныйРеализация0 = СтруктураПараметров.ТаблицаДвиженийНДСПредъявленныйРеализация0.Количество();
		КолНДСХозрасчетный  = СтруктураПараметров.ДвиженияХозрасчетный.Количество();
		
		ОтразитьПредположениеСтавки0(СтруктураШапкиДокумента, ДанныеДляОбработки, СтруктураПараметров, Заголовок);
		
		СтруктураПараметров.ИзмененыДвиженияНДСПредъявленныйРеализация0  = СтруктураПараметров.ИзмененыДвиженияНДСПредъявленныйРеализация0 
						ИЛИ (КолНДСПредъявленныйРеализация0 <> СтруктураПараметров.ТаблицаДвиженийНДСПредъявленныйРеализация0.Количество());
		
		СтруктураПараметров.ИзмененыДвиженияХозрасчетный = СтруктураПараметров.ИзмененыДвиженияХозрасчетный
								ИЛИ (КолНДСХозрасчетный <> СтруктураПараметров.ДвиженияХозрасчетный.Количество());
		
	КонецЕсли;
	
КонецПроцедуры

// Выполняет списание НДС и включение в стоимость - исключение НДС из стоимости
//
Процедура ВыполнитьДвиженияСписанияНДС(СтруктураШапкиДокумента, ТаблицаНДСПартииСписания, СтруктураПараметров, Заголовок)
	
	КодыОпераций = Перечисления.КодыОперацийПартииТоваров;
	
	// НДС в стоимости товаров - отработка включения и исключения НДС из стоимости.
	// Включение НДС в стоимость может происходить только для строк с перечисленными ниже кодами операций
	СтрокаКодовОпераций = "Комплектация, ПередачаНаКомиссию, ПеремещениеМеждуСкладами, Реализация, ВключениеАктиваВСоставМПЗ,
						  |РеализацияРозница, РеализацияКомиссия, СписаниеНаБрак, СписаниеНаВложенияВоВнеоборотныеАктивы,
						  |СписаниеНаЗатраты, СписаниеНаСтроительствоОбъектовОС, СписаниеПартийВПроизводствоОперативно,
						  |СписаниеПартийПереданныхВПроизводство, СписаниеПоИнвентаризации";

	ДанныеДляОбработки = ОтобратьСтрокиПартийПоКодамОпераций(СтрокаКодовОпераций, ТаблицаНДСПартииСписания, СтруктураПараметров);
	
	КолНДСПартииТоваров = СтруктураПараметров.ТаблицаДвиженийНДСПартииТоваров.Количество();
	КолНДСВключенныйВСтоимость = СтруктураПараметров.ТаблицаДвиженийНДСВключенныйВСтоимость.Количество();
	КолНДСПредъявленный = СтруктураПараметров.ТаблицаДвиженийНДСПредъявленный.Количество();
	КолНДСХозрасчетный  = СтруктураПараметров.ДвиженияХозрасчетный.Количество();
	
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
		КолНДСНалоговый  = СтруктураПараметров.ДвиженияНалоговый.Количество();
	КонецЕсли;
	
	Если ДанныеДляОбработки.Количество() > 0 Тогда
			
		ТаблицаДвиженийПартии = СтруктураПараметров.ТаблицаДвиженийНДСПартииТоваров;
			
		// очистим предыдущие движения 
		Если НЕ СтруктураПараметров.Свойство("ТолькоДвиженияНДС") Тогда
			Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
				ДвиженияРегистра = РегистрыБухгалтерии.Налоговый.СоздатьНаборЗаписей();
				ДвиженияРегистра.Очистить();
				ДвиженияРегистра.Отбор.Регистратор.Установить(СтруктураПараметров.Регистратор);
				ДвиженияРегистра.Прочитать();
				Инд=0;
				Пока Инд < ДвиженияРегистра.Количество() Цикл
					Если ДвиженияРегистра[Инд].СписаниеПартийНДС Тогда
						ДвиженияРегистра.Удалить(Инд);
					Иначе
						Инд=Инд+1;
					КонецЕсли;
				КонецЦикла;
				ДвиженияРегистра.Записать(Истина);
			КонецЕсли;
		КонецЕсли;
			
		// Включение НДС в стоимость
		УчетНДСФормированиеДвижений.ОтразитьВключениеИсключениеНДСВСтоимость(СтруктураШапкиДокумента, ДанныеДляОбработки, ТаблицаДвиженийПартии, Истина, СтруктураПараметров, Заголовок);
		// Исключение НДС из стоимости
		УчетНДСФормированиеДвижений.ОтразитьВключениеИсключениеНДСВСтоимость(СтруктураШапкиДокумента, ДанныеДляОбработки, ТаблицаДвиженийПартии, Ложь, СтруктураПараметров, Заголовок);
			
		Если ТаблицаДвиженийПартии.Количество() > 0 Тогда
			ТаблицаДвиженийПартии.ЗаполнитьЗначения(ВидДвиженияНакопления.Приход,"ВидДвижения");
		КонецЕсли;
			
	Иначе
		
		// партии у которых не произошло включение - исключение НДС из стоимости
		СтрокаКодовОпераций = "КорректировкаСерийИхарактеристик, РезервированиеПодЗаказ, СнятиеРезерваПодЗаказ,
							  |ВозвратОтКомиссионера, ВозвратОтПереработчика,
							  |ВыпускПоОперацииСтоимость, ВыпускПродукцииФиксНаСклад, ПередачаВПереработку,
							  |ПередачаМатериаловВЭксплуатацию, ПередачаОборудованияВМонтаж, ПринятиеКУчетуОС, ПринятиеКУчетуОССоСписаниемНаЗатраты";

		ДанныеДляОбработки = ОтобратьСтрокиПартийПоКодамОпераций(СтрокаКодовОпераций, ТаблицаНДСПартииСписания, СтруктураПараметров);
		
	КонецЕсли;
	
	ТаблицаНДСПартииСписания = ДанныеДляОбработки;
	
	СтруктураПараметров.Вставить("СоответствиеКодовОперацийСтрокамНДСПартий", Новый Соответствие);
	
	// НДС по партиям - отразить непосредственое списание.
	КолСтрокНДС = ТаблицаНДСПартииСписания.Количество();
	
	СтрокаПоступленияКомплектации = Неопределено;
	
	ЕстьХарактеристикаНоменклатурыНовая = ТаблицаНДСПартииСписания.Колонки.Найти("ХарактеристикаНоменклатурыНовая") <> Неопределено;
	ЕстьСерияНоменклатурыНовая 			= ТаблицаНДСПартииСписания.Колонки.Найти("СерияНоменклатурыНовая") <> Неопределено;
	ЕстьНоменклатураНовая 				= ТаблицаНДСПартииСписания.Колонки.Найти("НоменклатураНовая") <> Неопределено;
	ЕстьДокументОприходованияНовый 		= ДанныеДляОбработки.Колонки.Найти("ДокументОприходованияНовый") <> Неопределено;
		
	Для ИндексТекСтроки = 0 По КолСтрокНДС-1 Цикл
		
		СтрокаТаблицыНДСПартииСписания = ТаблицаНДСПартииСписания[ИндексТекСтроки];
		
		// Для ускорения поиска добавим строку в соответствие
		Если СтруктураПараметров.Свойство("СоответствиеКодовОперацийСтрокамНДСПартий") Тогда
			МассивСтрокПоКоду = СтруктураПараметров.СоответствиеКодовОперацийСтрокамНДСПартий[СтрокаТаблицыНДСПартииСписания.КодОперацииПартииТоваров];
			Если МассивСтрокПоКоду = Неопределено Тогда
				СтруктураПараметров.СоответствиеКодовОперацийСтрокамНДСПартий.Вставить(СтрокаТаблицыНДСПартииСписания.КодОперацииПартииТоваров, Новый Массив);
				МассивСтрокПоКоду = СтруктураПараметров.СоответствиеКодовОперацийСтрокамНДСПартий[СтрокаТаблицыНДСПартииСписания.КодОперацииПартииТоваров];
			КонецЕсли;
			МассивСтрокПоКоду.Добавить(СтрокаТаблицыНДСПартииСписания);
		КонецЕсли;
		
		Движение = УправлениеЗапасамиПартионныйУчет.ДобавитьДвижениеВСтруктуруПараметров("НДСПартииТоваров", СтруктураПараметров);
		ЗаполнитьЗначенияСвойств(Движение,СтрокаТаблицыНДСПартииСписания);
		Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
		
		// Если это комплектация - поступление партий НДС выполняется особым способом
		Если СтрокаТаблицыНДСПартииСписания.КодОперацииПартииТоваров = КодыОпераций.Комплектация Тогда
			
			// Для того, чтобы правильно отразить поступление партий НДС нужно изменить таблицу ТаблицаНДСПартииСписания
			Если ЗначениеЗаполнено(СтрокаТаблицыНДСПартииСписания.СкладПолучатель) Тогда
				СтрокаТаблицыНДСПартииСписания.Склад = СтрокаТаблицыНДСПартииСписания.СкладПолучатель;
			КонецЕсли;
			Если ЕстьХарактеристикаНоменклатурыНовая И (ЗначениеЗаполнено(СтрокаТаблицыНДСПартииСписания.ХарактеристикаНоменклатурыНовая) 
				ИЛИ СтрокаТаблицыНДСПартииСписания.ИзменитьХарактеристику) Тогда
				СтрокаТаблицыНДСПартииСписания.ХарактеристикаНоменклатуры = СтрокаТаблицыНДСПартииСписания.ХарактеристикаНоменклатурыНовая;
			КонецЕсли;
			Если ЕстьСерияНоменклатурыНовая И (ЗначениеЗаполнено(СтрокаТаблицыНДСПартииСписания.СерияНоменклатурыНовая) 
				ИЛИ СтрокаТаблицыНДСПартииСписания.ИзменитьСерию) Тогда
				СтрокаТаблицыНДСПартииСписания.СерияНоменклатуры = СтрокаТаблицыНДСПартииСписания.СерияНоменклатурыНовая;
			КонецЕсли;
			Если ЕстьНоменклатураНовая И ЗначениеЗаполнено(СтрокаТаблицыНДСПартииСписания.НоменклатураНовая) Тогда
				СтрокаТаблицыНДСПартииСписания.Номенклатура = СтрокаТаблицыНДСПартииСписания.НоменклатураНовая;
			КонецЕсли;
			Если ЕстьДокументОприходованияНовый И ЗначениеЗаполнено(СтрокаТаблицыНДСПартииСписания.ДокументОприходованияНовый) Тогда
				СтрокаТаблицыНДСПартииСписания.Партия = СтрокаТаблицыНДСПартииСписания.ДокументОприходованияНовый;
			КонецЕсли;
			
			Если ТипЗнч(СтруктураШапкиДокумента.Ссылка) = Тип("ДокументСсылка.КомплектацияНоменклатуры")
				И СтруктураШапкиДокумента.ВидКомплектации = Перечисления.ВидыКомплектации.Разборка 
				И СтрокаТаблицыНДСПартииСписания.Количество <> 0 Тогда
					//Строка поступления для каждой комплектующей своя
			    	СтрокаПоступленияКомплектации = Неопределено;
			КонецЕсли; 
			
			Если СтрокаПоступленияКомплектации = Неопределено Тогда
				
				СтрокаПоступленияКомплектации = ТаблицаНДСПартииСписания.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаПоступленияКомплектации,СтрокаТаблицыНДСПартииСписания);
				СтрокаПоступленияКомплектации.НДС = 0;
				СтрокаПоступленияКомплектации.Стоимость = 0;
				
				Если ТипЗнч(СтруктураШапкиДокумента.Ссылка) = Тип("ДокументСсылка.КомплектацияНоменклатуры")
				 И СтруктураШапкиДокумента.ВидКомплектации = Перечисления.ВидыКомплектации.Сборка Тогда
					
					КоэффициентХраненияОстатков = СтруктураШапкиДокумента.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент;
					СтрокаПоступленияКомплектации.Количество =
						Окр(СтруктураШапкиДокумента.Количество * СтруктураШапкиДокумента.Коэффициент / КоэффициентХраненияОстатков, 3);
					
				ИначеЕсли СтрокаТаблицыНДСПартииСписания.Количество <> 0 Тогда
					
						СтрокаПоступленияКомплектации.Количество = СтрокаТаблицыНДСПартииСписания.КоличествоПоступление;
					
				КонецЕсли;
					
				СтрокаПоступленияКомплектации.СчетФактура = Неопределено;
				СтрокаПоступленияКомплектации.ВидЦенности = Перечисления.ВидыЦенностей.Товары;
				СтрокаПоступленияКомплектации.СтавкаНДС   = Перечисления.СтавкиНДС.БезНДС;
				
				// Для ускорения поиска добавим строку в соответствие
				Если СтруктураПараметров.Свойство("СоответствиеКодовОперацийСтрокамНДСПартий") Тогда
					МассивСтрокПоКоду = СтруктураПараметров.СоответствиеКодовОперацийСтрокамНДСПартий[СтрокаПоступленияКомплектации.КодОперацииПартииТоваров];
					Если МассивСтрокПоКоду = Неопределено Тогда
						СтруктураПараметров.СоответствиеКодовОперацийСтрокамНДСПартий.Вставить(СтрокаПоступленияКомплектации.КодОперацииПартииТоваров, Новый Массив);
						МассивСтрокПоКоду = СтруктураПараметров.СоответствиеКодовОперацийСтрокамНДСПартий[СтрокаПоступленияКомплектации.КодОперацииПартииТоваров];
					КонецЕсли;
					МассивСтрокПоКоду.Добавить(СтрокаПоступленияКомплектации);
				КонецЕсли;
			ИначеЕсли ТипЗнч(СтруктураШапкиДокумента.Ссылка) = Тип("ДокументСсылка.КомплектацияНоменклатуры")
				И СтруктураШапкиДокумента.ВидКомплектации = Перечисления.ВидыКомплектации.Сборка Тогда
				//Строка с полным количеством поступления уже создна. Дополнение количества не требуется 
			Иначе
				Если СтрокаТаблицыНДСПартииСписания.Количество <> 0 Тогда
					СтрокаПоступленияКомплектации.Количество = СтрокаПоступленияКомплектации.Количество + 
															   СтрокаТаблицыНДСПартииСписания.КоличествоПоступление;
				КонецЕсли;
			КонецЕсли;
			
			СтрокаТаблицыНДСПартииСписания.Количество = 0;
			
		КонецЕсли;//Если СтрокаТаблицыНДСПартииСписания.КодОперацииПартииТоваров = КодыОпераций.Комплектация Тогда 

	КонецЦикла;//	Для каждого СтрокаТаблицыНДСПартииСписания из ТаблицаНДСПартииСписания цикл

	СтруктураПараметров.ИзмененыДвиженияНДСПартииТоваров = СтруктураПараметров.ИзмененыДвиженияНДСПартииТоваров 
								ИЛИ (КолНДСПартииТоваров <> СтруктураПараметров.ТаблицаДвиженийНДСПартииТоваров.Количество());
										
	СтруктураПараметров.ИзмененыДвиженияНДСВключенныйВСтоимость = СтруктураПараметров.ИзмененыДвиженияНДСВключенныйВСтоимость
								ИЛИ (КолНДСВключенныйВСтоимость <> СтруктураПараметров.ТаблицаДвиженийНДСВключенныйВСтоимость.Количество());
										
	СтруктураПараметров.ИзмененыДвиженияНДСПредъявленный = СтруктураПараметров.ИзмененыДвиженияНДСПредъявленный
								ИЛИ (КолНДСПредъявленный <> СтруктураПараметров.ТаблицаДвиженийНДСПредъявленный.Количество());
										
	СтруктураПараметров.ИзмененыДвиженияХозрасчетный = СтруктураПараметров.ИзмененыДвиженияХозрасчетный
								ИЛИ (КолНДСХозрасчетный <> СтруктураПараметров.ДвиженияХозрасчетный.Количество());
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
		СтруктураПараметров.ИзмененыДвиженияНалоговый = СтруктураПараметров.ИзмененыДвиженияНалоговый
								ИЛИ (КолНДСНалоговый <> СтруктураПараметров.ДвиженияНалоговый.Количество());
	КонецЕсли;

КонецПроцедуры //ВыполнитьДвиженияСписанияНДС

Функция ПолучитьТаблицуПоступлениеТоваровУслугВНТТ(ДокументОбъект, Ошибка)
	
	Перем СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугам;
	
	ДокументОбъект.ПодготовитьСтруктуруШапкиДокумента("", СтруктураШапкиДокумента);
	
	ДокументОбъект.ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугам, Неопределено);
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоУслугам, ТаблицаПоТоварам);
	
	Возврат ТаблицаПоТоварам;
	
КонецФункции

Функция ПолучитьТаблицуОтражениеПоступленияТоваровИУслугНДС(ДокументОбъект, Ошибка)
	
	Перем СтруктураШапкиДокумента, ТаблицаПоТоварам;
	
	ДокументОбъект.ПодготовитьСтруктуруШапкиДокумента("", СтруктураШапкиДокумента, Неопределено);
	
	ДокументОбъект.ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам, Неопределено);
	
	Возврат ТаблицаПоТоварам;
	
КонецФункции

Функция ПолучитьТаблицуОтражениеРеализацииТоваровИУслугНДС(ДокументОбъект, Ошибка)
	
	Перем СтруктураШапкиДокумента, ТаблицаПоТоварам;
	
	ДокументОбъект.ПодготовитьСтруктуруШапкиДокумента("", СтруктураШапкиДокумента, Ошибка);
	
	ДокументОбъект.ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам, Неопределено);
	
	Возврат ТаблицаПоТоварам;
	
КонецФункции

Функция РаспределитьПартииПоТаблицеСписания(ТаблицаПартий, ТаблицаСписания, СтруктураШапкиДокумента, СтруктураПараметров)
	
	ВидыЦенностейПоСчетамУчета = Неопределено;
	
	СоответствиеЗаказов = Новый Соответствие;
	
	КопияТаблицыСписания = ТаблицаСписания.Скопировать();
	
	КопияТаблицыСписания.Колонки.Удалить(КопияТаблицыСписания.Колонки.Подразделение);
	
	РаспределеннаяТаблица = КопияТаблицыСписания.СкопироватьКолонки();
	
	// Дополнительные колонки, используемые подсистемой НДС
	СтрокаНазванийКолонок = "Ценность, СчетУчетаЦенности, ВидЦенности, ДоговорПоставщика, Комиссионный, Партия,
							|КорСчетСписанияБУ, КорСчетСписанияНУ,
							|КорСубконтоСписанияНУ1, КорСубконтоСписанияНУ2, КорСубконтоСписанияНУ3,
							|КорСубконтоСписанияБУ1, КорСубконтоСписанияБУ2, КорСубконтоСписанияБУ3,
							|НДС, СуммаБезНДС,
							|ДокументОприходования,
							|НомерКорСтроки, ПостояннаяРазница, ВременнаяРазница,
							|ДоговорКомиссии, СчетРасчетовСКомитентом, ОбособленныйУчетТоваровПоЗаказамПокупателей,
							|Подразделение";

	// Ключ - название колонки
	// Значение - описание типа для добавляемой колонки
	СтруктураКолонокРаспределеннойТаблицы = Новый Структура(СтрокаНазванийКолонок);
	СтруктураКолонокРаспределеннойТаблицы.Вставить("УчетАгентскогоНДС", Новый описаниеТипов("Булево"));
	
	Для Каждого Элемент из СтруктураКолонокРаспределеннойТаблицы цикл
		Если РаспределеннаяТаблица.Колонки.Найти(Элемент.Ключ) = Неопределено тогда
			Если Элемент.Значение = Неопределено Тогда
				РаспределеннаяТаблица.Колонки.Добавить(Элемент.Ключ);
			Иначе
				РаспределеннаяТаблица.Колонки.Добавить(Элемент.Ключ,Элемент.Значение);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	КодыОпераций = Перечисления.КодыОперацийПартииТоваров;
	
	Для каждого СтрокаТаблицыСписания из КопияТаблицыСписания цикл
		
		Если Не СтрокаТаблицыСписания.ОтражатьВБухгалтерскомУчете тогда
			Продолжить;
		КонецЕсли;
		
		РегистрУчета = "НаСкладах";
		
		МассивСтрокПартий = УправлениеЗапасамиПартионныйУчет.ОтобратьСтрокиПартий(ТаблицаПартий, СтрокаТаблицыСписания, РегистрУчета);
		Для Каждого СтрокаПартии из МассивСтрокПартий цикл
		
			Если СтрокаПартии.ВидДвижения = ВидДвиженияНакопления.Приход 
			   И  Не СтрокаПартии.КодОперации = КодыОпераций.ВозвратОтПокупателя тогда
				Продолжить;
			КонецЕсли;
			
			//// НДС по таре не учитывается
			Если СтрокаТаблицыСписания.КодОперацииПартииТоваров = КодыОпераций.ПередачаТарыКонтрагенту 
			   Или СтрокаТаблицыСписания.ВидТабличнойЧасти = Перечисления.ВидыТабличныхЧастей.Тара
				тогда
				Продолжить;
			КонецЕсли;
			
			Если СтрокаПартии.Количество <= 0 тогда 
				Продолжить;
			КонецЕсли;
			
			Если СтрокаТаблицыСписания.Количество <= 0 тогда
				Продолжить;
			КонецЕсли;
			
			Если НЕ УправлениеЗапасамиПартионныйУчет.ПроверитьПартиюНаСкладеБух(СтрокаПартии, СтрокаТаблицыСписания, СтруктураПараметров) тогда
				Продолжить;
			КонецЕсли;
			
			
			Если СтрокаТаблицыСписания.Количество > СтрокаПартии.Количество тогда
				КоэффСписания = СтрокаПартии.Количество/СтрокаТаблицыСписания.Количество;
				КоличествоСписать = СтрокаПартии.Количество;
			Иначе
				КоэффСписания = 1;
				КоличествоСписать = СтрокаТаблицыСписания.Количество;
			КонецЕсли;
			
			СтрокаРаспределеннойТаблицы = РаспределеннаяТаблица.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаРаспределеннойТаблицы, СтрокаТаблицыСписания);
			
			СтрокаРаспределеннойТаблицы.НДС   = Окр(СтрокаТаблицыСписания.СуммаНДС * КоэффСписания,2,1);
			
			СуммаЗадолженностиБУ = Окр(СтрокаТаблицыСписания.СуммаЗадолженностиБУ * КоэффСписания,2,1);
			СтрокаРаспределеннойТаблицы.СуммаБезНДС = СуммаЗадолженностиБУ - СтрокаРаспределеннойТаблицы.НДС;
			СтрокаТаблицыСписания.СуммаЗадолженностиБУ = СтрокаТаблицыСписания.СуммаЗадолженностиБУ - СуммаЗадолженностиБУ;
			
			СтрокаРаспределеннойТаблицы.КорВалютнаяСуммаЗадолженностиБУ = Окр(СтрокаТаблицыСписания.КорВалютнаяСуммаЗадолженностиБУ* КоэффСписания,2,1);
			СтрокаРаспределеннойТаблицы.КорВалютнаяСуммаНДСЗадолженностиБУ = Окр(СтрокаТаблицыСписания.КорВалютнаяСуммаНДСЗадолженностиБУ* КоэффСписания,2,1);
			
			СтрокаТаблицыСписания.КорВалютнаяСуммаЗадолженностиБУ = СтрокаТаблицыСписания.КорВалютнаяСуммаЗадолженностиБУ - СтрокаРаспределеннойТаблицы.КорВалютнаяСуммаЗадолженностиБУ;
			СтрокаТаблицыСписания.КорВалютнаяСуммаНДСЗадолженностиБУ = СтрокаТаблицыСписания.КорВалютнаяСуммаНДСЗадолженностиБУ- СтрокаРаспределеннойТаблицы.КорВалютнаяСуммаНДСЗадолженностиБУ;
			
			СтрокаТаблицыСписания.СуммаНДС = СтрокаТаблицыСписания.СуммаНДС - СтрокаРаспределеннойТаблицы.НДС;
			СтрокаТаблицыСписания.Количество = СтрокаТаблицыСписания.Количество - КоличествоСписать;
				
			СтрокаРаспределеннойТаблицы.Количество = КоличествоСписать;
			СтрокаРаспределеннойТаблицы.КоличествоПоступление = Окр(СтрокаТаблицыСписания.КоличествоПоступление * КоэффСписания,3,1);
			СтрокаРаспределеннойТаблицы.Партия = СтрокаПартии.ДокументОприходования;
			СтрокаРаспределеннойТаблицы.ДокументОприходования = СтрокаПартии.ДокументОприходования;
			СтрокаРаспределеннойТаблицы.КодОперацииПартииТоваров = СтрокаПартии.КодОперации;
			
			Если СтрокаПартии.КодОперации = Перечисления.КодыОперацийПартииТоваров.ВозвратОтПокупателя тогда
				СтрокаРаспределеннойТаблицы.СкладПолучатель = СтрокаРаспределеннойТаблицы.Склад;
			КонецЕсли;
			
			СтрокаПартии.Количество = СтрокаПартии.Количество - КоличествоСписать;
			СтрокаТаблицыСписания.КоличествоПоступление = СтрокаТаблицыСписания.КоличествоПоступление - СтрокаРаспределеннойТаблицы.КоличествоПоступление;
			
			СтрокаРаспределеннойТаблицы.Ценность = СтрокаРаспределеннойТаблицы.Номенклатура;
			СтрокаРаспределеннойТаблицы.СчетУчетаЦенности = СтрокаПартии.СчетУчета;
			СтрокаРаспределеннойТаблицы.СчетУчетаБУ		  = СтрокаПартии.СчетУчета;
			
			СтрокаРаспределеннойТаблицы.КорСубконтоСписанияБУ1 = СтрокаРаспределеннойТаблицы.КорСубконтоБУ1;
			СтрокаРаспределеннойТаблицы.КорСубконтоСписанияБУ2 = СтрокаРаспределеннойТаблицы.КорСубконтоБУ2;
			СтрокаРаспределеннойТаблицы.КорСубконтоСписанияБУ3 = СтрокаРаспределеннойТаблицы.КорСубконтоБУ3;
			
			КорСубконто1 = СтрокаРаспределеннойТаблицы.КорСубконтоБУ1;
			КорСубконто2 = СтрокаРаспределеннойТаблицы.КорСубконтоБУ2;
			КорСубконто3 = СтрокаРаспределеннойТаблицы.КорСубконтоБУ3;
			
			Если ЗначениеЗаполнено(СтрокаРаспределеннойТаблицы.КорСубконтоНУ1) тогда
				КорСубконто1 = СтрокаРаспределеннойТаблицы.КорСубконтоНУ1;
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаРаспределеннойТаблицы.КорСубконтоНУ2) тогда
				КорСубконто2 = СтрокаРаспределеннойТаблицы.КорСубконтоНУ2;
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаРаспределеннойТаблицы.КорСубконтоНУ3) тогда
				КорСубконто3 = СтрокаРаспределеннойТаблицы.КорСубконтоНУ3;
			КонецЕсли;
			
			СтрокаРаспределеннойТаблицы.КорСубконтоСписанияНУ1 = КорСубконто1;
			СтрокаРаспределеннойТаблицы.КорСубконтоСписанияНУ2 = КорСубконто2;
			СтрокаРаспределеннойТаблицы.КорСубконтоСписанияНУ3 = КорСубконто3;
			
			СтрокаРаспределеннойТаблицы.КорСчетСписанияБУ = СтрокаРаспределеннойТаблицы.КорСчетБУ;
			Если НЕ ЗначениеЗаполнено(СтрокаРаспределеннойТаблицы.КорСчетСписанияБУ) тогда
				СтрокаРаспределеннойТаблицы.КорСчетСписанияБУ = СтрокаРаспределеннойТаблицы.СчетУчетаБУ;
			КонецЕсли;
			
			СтрокаРаспределеннойТаблицы.КорСчетСписанияНУ = СтрокаРаспределеннойТаблицы.КорСчетНУ;
			
			// Серия в документе может отличаться от серии в партии
			// Например заказ покупателя с пустой серией может списывать партии с непустой серией
			СтрокаРаспределеннойТаблицы.СерияНоменклатуры = СтрокаПартии.СерияНоменклатуры;
			
			СтрокаРаспределеннойТаблицы.Комиссионный  = УправлениеЗапасамиПартионныйУчет.КомиссионныйТовар(СтрокаРаспределеннойТаблицы.СчетУчетаБУ);
			
			Если СтрокаРаспределеннойТаблицы.КодОперацииПартииТоваров = КодыОпераций.Комплектация или
			   СтрокаРаспределеннойТаблицы.КодОперацииПартииТоваров = КодыОпераций.ПеремещениеМеждуСкладами или
			   СтрокаРаспределеннойТаблицы.КодОперацииПартииТоваров = КодыОпераций.Реализация или
			   СтрокаРаспределеннойТаблицы.КодОперацииПартииТоваров = КодыОпераций.РеализацияКомиссия или
			   СтрокаРаспределеннойТаблицы.КодОперацииПартииТоваров = КодыОпераций.РеализацияРозница или
			   СтрокаРаспределеннойТаблицы.КодОперацииПартииТоваров = КодыОпераций.РезервированиеПодЗаказ или
			   СтрокаРаспределеннойТаблицы.КодОперацииПартииТоваров = КодыОпераций.ПередачаНаКомиссию или
			   СтрокаРаспределеннойТаблицы.КодОперацииПартииТоваров = КодыОпераций.ВозвратОтКомиссионера или
			   СтрокаРаспределеннойТаблицы.КодОперацииПартииТоваров = КодыОпераций.ВозвратОтПокупателя или
			   СтрокаРаспределеннойТаблицы.КодОперацииПартииТоваров = КодыОпераций.ПереоценкаПринятыхНаКомиссию или
			   СтрокаРаспределеннойТаблицы.КодОперацииПартииТоваров = КодыОпераций.КорректировкаСерийИХарактеристик
			   
			   тогда
				Если СтрокаРаспределеннойТаблицы.Комиссионный тогда
					СтруктураРеквизитовДокумента = Новый Структура("Контрагент,ДоговорКонтрагента");
					Если ЗначениеЗаполнено(СтрокаПартии.ДокументОприходования) Тогда
					
						УправлениеЗапасамиПартионныйУчет.ПолучитьРеквизитыОбъекта(СтрокаПартии.ДокументОприходования, СтруктураРеквизитовДокумента);
						СтрокаРаспределеннойТаблицы.ДоговорКомиссии = СтруктураРеквизитовДокумента.ДоговорКонтрагента;
						СтруктураРеквизитовДоговора = Новый Структура("УчетАгентскогоНДС");
						УправлениеЗапасамиПартионныйУчет.ПолучитьРеквизитыОбъекта(СтруктураРеквизитовДокумента.ДоговорКонтрагента, СтруктураРеквизитовДоговора);

						СтрокаРаспределеннойТаблицы.УчетАгентскогоНДС = СтруктураРеквизитовДоговора.УчетАгентскогоНДС;
						СчетаРасчетов = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(СтрокаПартии.Организация, СтруктураРеквизитовДокумента.Контрагент, 
																			СтруктураРеквизитовДокумента.ДоговорКонтрагента);
																			
						СтрокаРаспределеннойТаблицы.СчетРасчетовСКомитентом = СчетаРасчетов.СчетРасчетовСКомитентом;
					Иначе
						СтрокаРаспределеннойТаблицы.УчетАгентскогоНДС = Ложь;
						СтрокаРаспределеннойТаблицы.Комиссионный = Ложь;
					КонецЕсли; 
					
				КонецЕсли;
			КонецЕсли;
			
			СтрокаРаспределеннойТаблицы.ВидЦенности = ОпределитьВидЦенности(СтрокаРаспределеннойТаблицы.Номенклатура, СтрокаРаспределеннойТаблицы.СчетУчетаБУ,,,,,,СтруктураШапкиДокумента,,ВидыЦенностейПоСчетамУчета);
			
			Если СтрокаПартии.Заказ <> Документы.ЗаказПокупателя.ПустаяСсылка() тогда
				ОбособленныйУчетТоваровПоЗаказамПокупателей = СоответствиеЗаказов[СтрокаПартии.Заказ];
				
				Если ОбособленныйУчетТоваровПоЗаказамПокупателей = Неопределено Тогда
					
					СтруктураЗаказа = Новый Структура("ДоговорКонтрагента");
					УправлениеЗапасамиПартионныйУчет.ПолучитьРеквизитыОбъекта(СтрокаПартии.Заказ, СтруктураЗаказа);
					
					СтруктураДоговора = Новый Структура("ОбособленныйУчетТоваровПоЗаказамПокупателей");
					УправлениеЗапасамиПартионныйУчет.ПолучитьРеквизитыОбъекта(СтруктураЗаказа.ДоговорКонтрагента, СтруктураДоговора);
					
					СтрокаРаспределеннойТаблицы.ОбособленныйУчетТоваровПоЗаказамПокупателей = СтруктураДоговора.ОбособленныйУчетТоваровПоЗаказамПокупателей;
					СоответствиеЗаказов.Вставить(СтрокаПартии.Заказ, СтруктураДоговора.ОбособленныйУчетТоваровПоЗаказамПокупателей);
					
				Иначе
					СтрокаРаспределеннойТаблицы.ОбособленныйУчетТоваровПоЗаказамПокупателей = ОбособленныйУчетТоваровПоЗаказамПокупателей;
				КонецЕсли;
			Иначе
				СтрокаРаспределеннойТаблицы.ОбособленныйУчетТоваровПоЗаказамПокупателей = Ложь;
			КонецЕсли;
			
			// В НДС Подразделение = ПодразделениеОрганизации
			СтрокаРаспределеннойТаблицы.Подразделение = СтрокаРаспределеннойТаблицы.ПодразделениеОрганизации;
			
		КонецЦикла;
	КонецЦикла;
	
	Возврат РаспределеннаяТаблица;
	
КонецФункции//РаспределитьПартииПоТаблицеСписания

// Функция возвращает значение реквизита произвольного объекта ссылочного типа
// Предназначена для получения реквизитов недоступных пользователю объектов
Функция ПолучитьРеквизитОбъекта(Ссылка, ИмяРеквизита)
	
	ОбъектМетаданные = Ссылка.Метаданные();
	ИмяТаблицы = ОбъектМетаданные.ПолноеИмя();
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ " + ИмяРеквизита + " КАК " + ИмяРеквизита + " ИЗ " + ИмяТаблицы + "
	|ГДЕ Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка[ИмяРеквизита];
	Иначе
		РеквизитМетаданные = ОбъектМетаданные.Реквизиты.Найти(ИмяРеквизита);
		Возврат РеквизитМетаданные.Тип.ПривестиЗначение();
	КонецЕсли;
		
КонецФункции //ПолучитьРеквизитОбъекта()

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ФУНКЦИИ ДЛЯ СОВМЕСТИМОСТИ С БП

Функция ПолучитьСтруктуруШапкиДокументаПоСсылке(Знач Ссылка) Экспорт

	Перем СтруктураКорректировкиЗаказа;
	Перем СтруктураКорректировкиОрдера;
	
	МетаданныеДокумента = Ссылка.Метаданные();

	Если МетаданныеДокумента.Имя = "РасходныйОрдерНаТовары" Тогда

		СтруктураКорректировкиОрдера = Новый Структура("ДокументПередачи, Дата");
		УправлениеЗапасамиПартионныйУчет.ПолучитьРеквизитыОбъекта(Ссылка,СтруктураКорректировкиОрдера);
		МетаданныеДокумента = СтруктураКорректировкиОрдера.ДокументПередачи.Метаданные();
		Ссылка = СтруктураКорректировкиОрдера.ДокументПередачи;
		
	ИначеЕсли МетаданныеДокумента.Имя = "ПриходныйОрдерНаТовары" Тогда

		СтруктураКорректировкиОрдера = Новый Структура("ДокументПеремещения, Дата");
		УправлениеЗапасамиПартионныйУчет.ПолучитьРеквизитыОбъекта(Ссылка,СтруктураКорректировкиОрдера);
		МетаданныеДокумента = СтруктураКорректировкиОрдера.ДокументПеремещения.Метаданные();
		Ссылка = СтруктураКорректировкиОрдера.ДокументПеремещения;
		
	ИначеЕсли МетаданныеДокумента.Имя = "КорректировкаЗаказаПокупателя" 
		ИЛИ МетаданныеДокумента.Имя = "ИзменениеЗаказаПокупателя" Тогда
		
		СтруктураКорректировкиЗаказа = Новый Структура("ЗаказПокупателя, Ссылка, Дата, Номер");
		УправлениеЗапасамиПартионныйУчет.ПолучитьРеквизитыОбъекта(Ссылка,СтруктураКорректировкиЗаказа);
		МетаданныеДокумента = СтруктураКорректировкиЗаказа.ЗаказПокупателя.Метаданные();
		Ссылка = СтруктураКорректировкиЗаказа.ЗаказПокупателя;

	КонецЕсли;

	СтруктураШапкиДокумента = Новый Структура;

	СтруктураШапкиДокумента.Вставить("Ссылка");
	СтруктураШапкиДокумента.Вставить("Дата");
	СтруктураШапкиДокумента.Вставить("Номер");

	Для каждого Реквизит из МетаданныеДокумента.Реквизиты Цикл
		СтруктураШапкиДокумента.Вставить(Реквизит.Имя);
	КонецЦикла;

	УправлениеЗапасамиПартионныйУчет.ПолучитьРеквизитыОбъекта(Ссылка, СтруктураШапкиДокумента);
	
	Если МетаданныеДокумента.Имя = "ОтчетКомиссионераОПродажах" Тогда
		СтруктураРеквизитовПокупатели = Новый Структура("Покупатели");
		РезультатЗапросаПокупатели = ПолучитьРеквизитОбъекта(Ссылка, "Покупатели");
		Если НЕ РезультатЗапросаПокупатели.Пустой() Тогда
			ТЧПокупатели = РезультатЗапросаПокупатели.Выгрузить();
			СтруктураШапкиДокумента.Вставить("КомиссияПоПокупателям", НЕ(ТЧПокупатели.Количество() = 1 И ТЧПокупатели[0].Покупатель = СтруктураШапкиДокумента.Контрагент));
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтруктураКорректировкиЗаказа <> Неопределено тогда
		
		СтруктураШапкиДокумента.Вставить("Ссылка" , СтруктураКорректировкиЗаказа.Ссылка);
		СтруктураШапкиДокумента.Вставить("Дата"   , СтруктураКорректировкиЗаказа.Дата);
		СтруктураШапкиДокумента.Вставить("Номер"  , СтруктураКорректировкиЗаказа.Номер);
		
	ИначеЕсли СтруктураКорректировкиОрдера <> Неопределено тогда

		СтруктураШапкиДокумента.Вставить("Дата"   , СтруктураКорректировкиОрдера.Дата);
		
	КонецЕсли;

	Если СтруктураШапкиДокумента.Свойство("ДоговорКонтрагента") тогда

		СтруктураДоговора = Новый Структура ("ВидДоговора,
											 |УчетАгентскогоНДС, ВалютаВзаиморасчетов, РасчетыВУсловныхЕдиницах");

		УправлениеЗапасамиПартионныйУчет.ПолучитьРеквизитыОбъекта(СтруктураШапкиДокумента.ДоговорКонтрагента, СтруктураДоговора);
		СтруктураШапкиДокумента.Вставить("ВидДоговора", СтруктураДоговора.ВидДоговора);
		СтруктураШапкиДокумента.Вставить("УчетАгентскогоНДС", СтруктураДоговора.УчетАгентскогоНДС);
		СтруктураШапкиДокумента.Вставить("ВалютаВзаиморасчетов", СтруктураДоговора.ВалютаВзаиморасчетов);
		СтруктураШапкиДокумента.Вставить("РасчетыВУсловныхЕдиницах", СтруктураДоговора.РасчетыВУсловныхЕдиницах);
		
	Иначе

		СтруктураШапкиДокумента.Вставить("ВидДоговора", Неопределено);

	КонецЕсли;

	
	Если НЕ СтруктураШапкиДокумента.Свойство("УчитыватьНДС") Тогда

		СтруктураШапкиДокумента.Вставить("УчитыватьНДС", Истина);

	КонецЕсли;

	
	Если НЕ СтруктураШапкиДокумента.Свойство("НДСВключенВСтоимость") Тогда

		СтруктураШапкиДокумента.Вставить("НДСВключенВСтоимость", Истина);

	КонецЕсли;

	Если НЕ СтруктураШапкиДокумента.Свойство("ОтражатьВНалоговомУчетеУСН") Тогда

		СтруктураШапкиДокумента.Вставить("ОтражатьВНалоговомУчетеУСН", Ложь);

	КонецЕсли;

	ВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");
	СтруктураШапкиДокумента.Вставить("ВалютаРегламентированногоУчета", ВалютаРегламентированногоУчета);	
	СтруктураШапкиДокумента.Вставить("ВидДокумента",  МетаданныеДокумента.Имя);
	
	СтруктураШапкиДокумента.Вставить("ОрганизацияПрименяетУСН", ?(СтруктураШапкиДокумента.Свойство("Организация"), НалоговыйУчетУСН.ПрименениеУСН(СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.Дата),Ложь));
	
	Если СтруктураШапкиДокумента.Свойство("ОтражатьВНалоговомУчете") И СтруктураШапкиДокумента.Свойство("Организация") Тогда

		Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда

			Если СтруктураШапкиДокумента.ОрганизацияПрименяетУСН Тогда

				Если НалоговыйУчетУСН.ПрименениеУСНДоходы(СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.Дата) Тогда
					СтруктураШапкиДокумента.Вставить("ОтражатьВНалоговомУчетеУСНДоходы", Истина);
					СтруктураШапкиДокумента.Вставить("ОтражатьВНалоговомУчетеУСН", Ложь);
				Иначе
					СтруктураШапкиДокумента.Вставить("ОтражатьВНалоговомУчетеУСНДоходы", Ложь);
					СтруктураШапкиДокумента.Вставить("ОтражатьВНалоговомУчетеУСН", Истина);
				КонецЕсли;

				СтруктураШапкиДокумента.Вставить("ОтражатьВНалоговомУчете",    Ложь);

			Иначе
				СтруктураШапкиДокумента.Вставить("ОтражатьВНалоговомУчетеУСН", Ложь);
				СтруктураШапкиДокумента.Вставить("ОтражатьВНалоговомУчетеУСНДоходы", Ложь);

			КонецЕсли;

		Иначе
			СтруктураШапкиДокумента.Вставить("ОтражатьВНалоговомУчетеУСН", Ложь);
			СтруктураШапкиДокумента.Вставить("ОтражатьВНалоговомУчетеУСНДоходы", Ложь);

		КонецЕсли;
	
	КонецЕсли;
	
	ВидПоступления = Неопределено;
	Если СтруктураШапкиДокумента.Свойство("ВидПоступления",ВидПоступления) тогда
		Если ВидПоступления = Перечисления.ВидыПоступленияТоваров.ПоОрдеру тогда
			СтруктураСклада = Новый Структура("СкладОрдер");
			УправлениеЗапасамиПартионныйУчет.ПолучитьРеквизитыОбъекта(Ссылка,СтруктураСклада);
			
			СтруктураСкладаОрдера = Новый Структура("Склад");
			УправлениеЗапасамиПартионныйУчет.ПолучитьРеквизитыОбъекта(СтруктураСклада.СкладОрдер,СтруктураСкладаОрдера);
			
			СтруктураШапкиДокумента.Вставить("СкладПриходногоОрдера",СтруктураСкладаОрдера.Склад);
		КонецЕсли;
	КонецЕсли;
	СтруктураШапкиДокумента.Вставить("ОтгрузкаБезПереходаПраваСобственности", Ложь);
	ВидОперации = неопределено;
	Если СтруктураШапкиДокумента.Свойство("ВидОперации",ВидОперации) тогда
		Если ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ОтгрузкаБезПереходаПраваСобственности Тогда
			СтруктураШапкиДокумента.Вставить("ОтгрузкаБезПереходаПраваСобственности", истина);
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтруктураШапкиДокумента;
	
КонецФункции
 
Функция ОтобратьСтрокиПартийПоКодамОпераций(СтрокаКодовОпераций, ТаблицаПартийНДС, СтруктураПараметров)
	
	Перем СоответствиеКодовОперацийСтрокамНДСПартий;
	
	Результат = Новый ТаблицаЗначений;
		
	Для каждого Колонка ИЗ ТаблицаПартийНДС.Колонки Цикл
			
		Результат.Колонки.Добавить(Колонка.Имя,Колонка.ТипЗначения);
			
	КонецЦикла;
	
	Если СтруктураПараметров.Свойство("СоответствиеКодовОперацийСтрокамНДСПартий",СоответствиеКодовОперацийСтрокамНДСПартий) тогда

		СтруктураКодовОпераций = Новый Структура(СтрокаКодовОпераций);
			
		Для каждого Элемент из СтруктураКодовОпераций Цикл
			МассивСтрокПоКодуОперации = СоответствиеКодовОперацийСтрокамНДСПартий[Перечисления.КодыОперацийПартииТоваров[Элемент.Ключ]];
			Если МассивСтрокПоКодуОперации <> Неопределено Тогда
				Для Каждого СтрокаТаблицы ИЗ МассивСтрокПоКодуОперации Цикл
					НоваяСтрока = Результат.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Возврат Результат;
	КонецЕсли;
		
	Возврат Результат;
	
КонецФункции //ОтобратьСтрокиПоКодамОпераций

Функция ОтобратьСтрокиПостроителемЗапроса(СтрокаКодовОпераций, ТаблицаЗначений)
	
	СтруктураКодовОпераций = Новый Структура(СтрокаКодовОпераций);
	
	ВидСравненияКодаОперации = ВидСравнения.ВСписке;
		
	СписокОтбора = Новый СписокЗначений;
	Для каждого Элемент из СтруктураКодовОпераций Цикл
		СписокОтбора.Добавить(Перечисления.КодыОперацийПартииТоваров[Элемент.Ключ]);
	КонецЦикла;
	
	ПостроительТаблицаПартийНДС = Новый ПостроительЗапроса();
	ПостроительТаблицаПартийНДС.ИсточникДанных = Новый ОписаниеИсточникаДанных(ТаблицаЗначений);
	Отбор = ПостроительТаблицаПартийНДС.Отбор;
	ЭлементОтбора = Отбор.Добавить("КодОперацииПартииТоваров");
	ЭлементОтбора.ВидСравнения = ВидСравненияКодаОперации;
	ЭлементОтбора.Значение = СписокОтбора;
	ЭлементОтбора.Использование = Истина;
		
	ПостроительТаблицаПартийНДС.Выполнить();
		
	Если ПостроительТаблицаПартийНДС.Результат.Пустой() тогда
		Возврат Неопределено;
	КонецЕсли;
		
	Возврат ПостроительТаблицаПартийНДС.Результат.Выгрузить();
	
КонецФункции //ОтобратьСтрокиПостроителемЗапроса

Функция ПолучитьТаблицуПартийДляСписанияНДС(СтруктураПараметров)
	
	// Партии могут списываться из регистров ПартииТоваровНаСкладахБухгалтерскийУчет и ПартииТоваровПереданныеБухгалтерскийУчет
	// Отберем из соответствующих таблиц партии с видом движения "расход"
	
	КодыОпераций = Перечисления.КодыОперацийПартииТоваров;
	
	ТаблицаПартий = СтруктураПараметров.ТаблицаДвиженийПартииТоваровНаСкладахБух.СкопироватьКолонки();
	ТаблицаПартий.Колонки.Добавить("РегистрУчета");
	Для каждого СтрокаПартииНаСкладах из СтруктураПараметров.ТаблицаДвиженийПартииТоваровНаСкладахБух Цикл
		Если СтрокаПартииНаСкладах.ВидДвижения = ВидДвиженияНакопления.Расход 
		   ИЛИ (СтрокаПартииНаСкладах.ВидДвижения = ВидДвиженияНакопления.Приход 
		   И   СтрокаПартииНаСкладах.КодОперации = КодыОпераций.ВозвратОтПокупателя) тогда
			CтрокаПартии = ТаблицаПартий.Добавить();
			ЗаполнитьЗначенияСвойств(CтрокаПартии,СтрокаПартииНаСкладах);
			Если СтрокаПартииНаСкладах.КодОперации = КодыОпераций.ВозвратОтПокупателяТекущийМесяц тогда
				// Возврат текущего месяца учитывается как сторно реализации
				CтрокаПартии.Количество = - CтрокаПартии.Количество;
				CтрокаПартии.Стоимость  = - CтрокаПартии.Стоимость;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Для каждого СтрокаПартииПереданные из СтруктураПараметров.ТаблицаДвиженийПартииТоваровПереданныеБух Цикл
		Если СтрокаПартииПереданные.ВидДвижения = ВидДвиженияНакопления.Расход тогда
			CтрокаПартии = ТаблицаПартий.Добавить();
			ЗаполнитьЗначенияСвойств(CтрокаПартии,СтрокаПартииПереданные);
		КонецЕсли;
	КонецЦикла;
	Возврат ТаблицаПартий;
	
КонецФункции

// Функция определяет счет учета НДС по виду ценности
Функция ОпределитьСчетУчетаНДС(ВидЦенности)
	
	Если Не ЗначениеЗаполнено(ВидЦенности) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ВидЦенности = Перечисления.ВидыЦенностей.Материалы
		Или ВидЦенности = Перечисления.ВидыЦенностей.Товары
		Или ВидЦенности = Перечисления.ВидыЦенностей.ТоварыНесырьевые Тогда
		Возврат ПланыСчетов.Хозрасчетный.НДСпоПриобретеннымМПЗ;
	ИначеЕсли ВидЦенности = Перечисления.ВидыЦенностей.ПрочиеРаботыИУслуги Тогда
		Возврат ПланыСчетов.Хозрасчетный.НДСпоПриобретеннымУслугам;
	ИначеЕсли ВидЦенности = Перечисления.ВидыЦенностей.Оборудование 
		Или ВидЦенности = Перечисления.ВидыЦенностей.ОС Тогда
		Возврат ПланыСчетов.Хозрасчетный.НДСприПриобретенииОсновныхСредств;
	ИначеЕсли ВидЦенности = Перечисления.ВидыЦенностей.ТаможенныеПлатежи
		Или ВидЦенности = Перечисления.ВидыЦенностей.ТаможенныеПлатежиОС Тогда
		Возврат ПланыСчетов.Хозрасчетный.НДСуплачиваемыйТаможеннымОрганам;
	ИначеЕсли ВидЦенности = Перечисления.ВидыЦенностей.НМА Тогда
		Возврат ПланыСчетов.Хозрасчетный.НДСпоПриобретеннымНематериальнымАктивам;
	ИначеЕсли ВидЦенности = Перечисления.ВидыЦенностей.ОбъектыНезавершенногоСтроительства Тогда
		Возврат ПланыСчетов.Хозрасчетный.НДСприСтроительствеОсновныхСредств;
	Иначе
		Возврат ПланыСчетов.Хозрасчетный.НДСпоПриобретеннымУслугам;
	КонецЕсли;
	
КонецФункции

// Выполняет общие для всех документов действия связанные с пометкой на удаление
// счета-фактуры при удалении документа, являющегося основание данного счета-фактуры.
//
// Параметры:
//  ДокументОбъект  - объект документа, 
//  ВидСчетаФактуры - строка, вид счета-фактуры, по умолчанию "СчетФактураВыданный"
//
Функция СинхронизацияПометкиНаУдалениеУСчетаФактуры(ДокументОбъект, ВидСчетаФактуры = "СчетФактураВыданный", Отказ = Ложь) Экспорт
	
	Если ДокументОбъект.ЭтоНовый() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ Док.ПометкаУдаления
	                |	ИЗ 
	                |   	Документ." + ДокументОбъект.Метаданные().Имя + " КАК Док
	                |   ГДЕ Док.Ссылка = &ДокументСсылка";

	Запрос.УстановитьПараметр("ДокументСсылка" , ДокументОбъект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Результат = РезультатЗапроса.Выгрузить();
	
	Если ДокументОбъект.ПометкаУдаления <> ?(Результат.Количество() > 0, Результат[0].ПометкаУдаления,ложь) Тогда

		// Произошло изменение пометки на удаление
		// Попытаемся найти счет-фактуру
		СтруктураОтбора = Новый Структура("ПометкаУдаления", Не ДокументОбъект.ПометкаУдаления);
		СчетФактура = НайтиПодчиненныйСчетФактуру(ДокументОбъект.Ссылка, ВидСчетаФактуры, СтруктураОтбора, ДокументОбъект.Ссылка);

		//Если потерпели неудачу, то необходимо ввести новый документ 
		Если ЗначениеЗаполнено(СчетФактура) И Не СчетФактура = ДокументОбъект.Ссылка Тогда
			Попытка
				// Есть счет-фактура, нужно установить для него пометку удаления
				СчетФактураОбъект = СчетФактура.ПолучитьОбъект();
				Если ДокументОбъект.ПометкаУдаления Тогда
					// Если в счете-фаткуре несколько оснований, счет-фактура не помечается на удаление,
					// а очищается ссылка на текущее основание.
					МетаданныеДокумента = СчетФактураОбъект.Метаданные();
					
					Если МетаданныеДокумента.ТабличныеЧасти.Найти("ДокументыОснования") <> Неопределено
						И СчетФактураОбъект.ДокументыОснования.Количество() > СчетФактураОбъект.ДокументыОснования.НайтиСтроки(Новый Структура("ДокументОснование",ДокументОбъект.Ссылка)).Количество() Тогда
						СтрокиКУдалению = СчетФактураОбъект.ДокументыОснования.НайтиСтроки(Новый Структура("ДокументОснование",ДокументОбъект.Ссылка));
						Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
							СчетФактураОбъект.ДокументыОснования.Удалить(СтрокаКУдалению);
						КонецЦикла;
						СчетФактураОбъект.ДокументОснование = СчетФактураОбъект.ДокументыОснования[0].ДокументОснование;
						СчетФактураОбъект.Записать();
						ОбщегоНазначения.Сообщение("Из документа «" + СчетФактура + "» удалена ссылка на «"+ДокументОбъект+"».");
						Возврат СчетФактура;
					КонецЕсли; 
				КонецЕсли; 
				
				СчетФактураОбъект.УстановитьПометкуУдаления(ДокументОбъект.ПометкаУдаления);
				Если ДокументОбъект.ПометкаУдаления Тогда
					ОбщегоНазначения.Сообщение("Документ «" + СчетФактура + "» помечен на удаление.")
				Иначе
					ОбщегоНазначения.Сообщение("У документа «" + СчетФактура + "» снята пометка на удаление.")
				КонецЕсли;
				Возврат СчетФактура;
			Исключение
				Отказ = Истина;
				Возврат Неопределено;
			КонецПопытки;
				
		КонецЕсли;

	КонецЕсли;

КонецФункции // СинхронизацияПометкиНаУдалениеУСчетаФактуры()

Функция ДляСчетаФактурыНеТребуетсяОплата(СчетФактура) Экспорт
	
	Возврат ТипЗнч(СчетФактура) = Тип("ДокументСсылка.ВозвратТоваровПоставщику")
		Или ТипЗнч(СчетФактура) = Тип("ДокументСсылка.ВозвратТоваровПоставщикуИзНТТ") 
		Или ТипЗнч(СчетФактура) = Тип("ДокументСсылка.ОтражениеРеализацииТоваровИУслугНДС")
		Или Не Метаданные.РегистрыНакопления.РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.Измерения.Документ.Тип.СодержитТип(ТипЗнч(СчетФактура));
		
КонецФункции

Функция ПроводитьДокументДляЦелейНДС(СтруктураШапкиДокумента) Экспорт
	
	ВедетсяУчетНДСПоФЗ134 = СтруктураШапкиДокумента.Свойство("ВедетсяУчетНДСПоФЗ134") 
		И СтруктураШапкиДокумента.ВедетсяУчетНДСПоФЗ134
		И СтруктураШапкиДокумента.Свойство("Ссылка")
		И (		ТипЗнч(СтруктураШапкиДокумента.Ссылка) = Тип("ДокументСсылка.АктОбОказанииПроизводственныхУслуг")
			ИЛИ ТипЗнч(СтруктураШапкиДокумента.Ссылка) = Тип("ДокументСсылка.ОтчетКомитентуОПродажах")
			ИЛИ ТипЗнч(СтруктураШапкиДокумента.Ссылка) = Тип("ДокументСсылка.ОтчетОРозничныхПродажах")
			ИЛИ ТипЗнч(СтруктураШапкиДокумента.Ссылка) = Тип("ДокументСсылка.ПередачаНМА")
			ИЛИ ТипЗнч(СтруктураШапкиДокумента.Ссылка) = Тип("ДокументСсылка.ПередачаОС")
			ИЛИ ТипЗнч(СтруктураШапкиДокумента.Ссылка) = Тип("ДокументСсылка.РеализацияТоваровУслуг")
			ИЛИ ТипЗнч(СтруктураШапкиДокумента.Ссылка) = Тип("ДокументСсылка.РеализацияУслугПоПереработке"));
	
	Если (СтруктураШапкиДокумента.Свойство("ОрганизацияПрименяетУСН")
		И СтруктураШапкиДокумента.ОрганизацияПрименяетУСН)
		И НЕ ВедетсяУчетНДСПоФЗ134 Тогда
		Возврат Ложь;
	ИначеЕсли СтруктураШапкиДокумента.Свойство("ОтражатьВБухгалтерскомУчете")
		И Не СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		Возврат Ложь;
	ИначеЕсли СтруктураШапкиДокумента.Свойство("УчитыватьНДС") 
		И Не СтруктураШапкиДокумента.УчитыватьНДС Тогда
		Возврат Ложь
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

Процедура ДополнитьСтруктуруШапкиДокументаДляНДС(СтруктураШапкиДокумента, ДополнитьПараметрамиПартионногоУчета = Ложь) Экспорт
	
	УчетнаяПолитика = Неопределено;
	
	Если Не СтруктураШапкиДокумента.Свойство("ОрганизацияПрименяетУСН") 
		Или Не СтруктураШапкиДокумента.Свойство("СложныйУчетНДС") Тогда
		
		УчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(СтруктураШапкиДокумента.Дата, СтруктураШапкиДокумента.Организация);
		
		Если Не СтруктураШапкиДокумента.Свойство("ОрганизацияПрименяетУСН") Тогда
			СтруктураШапкиДокумента.Вставить("ОрганизацияПрименяетУСН", ?(Не ЗначениеЗаполнено(УчетнаяПолитика), 
																		Ложь, УчетнаяПолитика.СистемаНалогообложения = Перечисления.СистемыНалогообложения.Упрощенная));
		КонецЕсли;
	
		Если Не СтруктураШапкиДокумента.Свойство("СложныйУчетНДС") Тогда
			СтруктураШапкиДокумента.Вставить("СложныйУчетНДС", ?(Не ЗначениеЗаполнено(УчетнаяПолитика), 
																Ложь, УчетнаяПолитика.СложныйУчетНДС));
		КонецЕсли;
		
	КонецЕсли;	
	
	Если Не СтруктураШапкиДокумента.Свойство("ИспользуетсяРасширеннаяАналитикаУчета") Тогда
		СтруктураШапкиДокумента.Вставить("ИспользуетсяРасширеннаяАналитикаУчета", УправлениеЗапасами.ИспользуетсяРасширеннаяАналитикаУчета(СтруктураШапкиДокумента.Дата));
	КонецЕсли;
	
	Если ДополнитьПараметрамиПартионногоУчета Тогда
		ДополнитьПараметрамиПартионногоУчетаНДС(СтруктураШапкиДокумента, УчетнаяПолитика)	
	КонецЕсли;
	
КонецПроцедуры

Функция ЕстьСложныйУчетНДСПоНоменклатурнойГруппе(Организация, Дата, НоменклатурнаяГруппа) Экспорт
	
	Отбор = Новый Структура("Организация, НоменклатурнаяГруппа", Организация, НоменклатурнаяГруппа);
	ДанныеПоНоменклатурнойГруппе = РегистрыСведений.НоменклатурныеГруппыДляРеализацииБезНДСиНДС0.ПолучитьПоследнее(Дата, Отбор);
	Возврат ДанныеПоНоменклатурнойГруппе.СложныйУчетНДС;
	
КонецФункции

Функция СчетОтнесенияНДС(СтруктураШапкиДокумента) Экспорт
	
	Если СтруктураШапкиДокумента.ВидДокумента = "ОтчетОРозничныхПродажах" Тогда 
		Возврат ПланыСчетов.Хозрасчетный.НДС;
	ИначеЕсли СтруктураШапкиДокумента.Дата < '20060101'
		И СтруктураШапкиДокумента.Свойство("МоментОпределенияНалоговойБазыНДС") 
		И СтруктураШапкиДокумента.МоментОпределенияНалоговойБазыНДС = Перечисления.МоментыОпределенияНалоговойБазыНДС.ПоОплате Тогда
		Возврат ПланыСчетов.Хозрасчетный.РасчетыПоНДСотложенномуДляУплатыВБюджет;
	ИначеЕсли СтруктураШапкиДокумента.Свойство("ОтгрузкаБезПереходаПравСобственности")
		И СтруктураШапкиДокумента.ОтгрузкаБезПереходаПравСобственности Тогда
		Возврат ПланыСчетов.Хозрасчетный.НДСНачисленныйПоОтгрузке;
	Иначе
		Возврат ПланыСчетов.Хозрасчетный.НДС;
	КонецЕсли;

КонецФункции

// Формирует список счетов учета производственных расходов.
//
Функция ОпределитьСчетаУчетаПроизводственныхРасходов() Экспорт

	ПланСчетовБУ = ПланыСчетов.Хозрасчетный;
	
	СчетаУчетаЗатрат = Новый СписокЗначений();
	СчетаУчетаЗатрат.Добавить(ПланСчетовБУ.ОсновноеПроизводство);
	СчетаУчетаЗатрат.Добавить(ПланСчетовБУ.ВспомогательныеПроизводства);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Хозрасчетный.Ссылка
	               |ИЗ
	               |	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	               |ГДЕ
	               |	Хозрасчетный.Ссылка В ИЕРАРХИИ(&СписокСчетов)";
	
	Запрос.УстановитьПараметр("СписокСчетов",СчетаУчетаЗатрат);
	
	СчетаУчетаЗатрат.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
	Возврат СчетаУчетаЗатрат;

КонецФункции // ОпределитьСчетаУчетаПроизводственныхРасходов()
 
// Формирует список счетов ОС, НМА и объектов строительства
Функция ОпределитьСчетаУчетаОСиНМА(ОбъектыУчета = "", ДатаОбъекта = '00010101') Экспорт

	ПланСчетовБУ = ПланыСчетов.Хозрасчетный;
	
	СчетаУчетаЗатрат = Новый СписокЗначений();
	
	Если ОбъектыУчета = "Оборудование" 
		Или Не ЗначениеЗаполнено(ОбъектыУчета) Тогда
		Если ДатаОбъекта >= '20060101' Тогда
			СчетаУчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ОборудованиеКУстановке);
		Иначе 
			Возврат СчетаУчетаЗатрат;
		КонецЕсли;
	КонецЕсли;
	
	Если ОбъектыУчета = "ОС" 
		Или Не ЗначениеЗаполнено(ОбъектыУчета) Тогда
		Если ДатаОбъекта < '20060101' Тогда
			СчетаУчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ОборудованиеКУстановке);
		КонецЕсли;
		СчетаУчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ПриобретениеОбъектовОсновныхСредств);
	КонецЕсли; 
	
	Если ОбъектыУчета ="НМА" 
		Или Не ЗначениеЗаполнено(ОбъектыУчета) Тогда
		СчетаУчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ПриобретениеНематериальныхАктивов);
	КонецЕсли;  
	
	Если Не ЗначениеЗаполнено(ОбъектыУчета) тогда
		СчетаУчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.СтроительствоОбъектовОсновныхСредств);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Хозрасчетный.Ссылка
		|ИЗ
		|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
		|ГДЕ
		|	Хозрасчетный.Ссылка В ИЕРАРХИИ(&СписокСчетов)
		|	И Хозрасчетный.ЗапретитьИспользоватьВПроводках = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("СписокСчетов",СчетаУчетаЗатрат);
	
	СчетаУчетаЗатрат.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
	Возврат СчетаУчетаЗатрат;

КонецФункции

// Процедура вызывается из модулей документов списания
Процедура СформироватьДвиженияПоРегиструНДСКосвенныеРасходы_СписаниеМатериаловНаКосвенныеРасходы(СтруктураШапкиДокумента, ТаблицаДвиженийПартий, Движения, Отказ)

	УчетнаяПолитикаНУ = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(СтруктураШапкиДокумента.Дата, СтруктураШапкиДокумента.Организация);
    Если НЕ ЗначениеЗаполнено(УчетнаяПолитикаНУ) Тогда
		Отказ = Истина;
	КонецЕсли; 
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если (УчетнаяПолитикаНУ.СистемаНалогообложения = Перечисления.СистемыНалогообложения.Упрощенная) тогда
		// Движения по этому документу делать не нужно
		Возврат;
	КонецЕсли;
	
	Если УчетнаяПолитикаНУ.СложныйУчетНДС Тогда 
		
		СчетаУчетаКосвенныхРасходов = ОпределитьСчетаУчетаКосвенныхРасходов();
		
		ТаблицаДвижений_НДСКосвенныеРасходы	= Движения.ТаблицаДвиженийНДСКосвенныеРасходы;
		
		Для Каждого СтрокаДок Из ТаблицаДвиженийПартий Цикл
			
			Если НЕ ЗначениеЗаполнено(СтрокаДок.СчетФактура) Тогда
				// Обрабатываем только записи с заполненными счетами-фактурами
				Продолжить;
			КонецЕсли;
			
			Если СтрокаДок.СуммаБезНДС = 0 и СтрокаДок.НДС = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Если (СтруктураШапкиДокумента.ВидДокумента = "КомплектацияНоменклатуры") 
			  И ((СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКомплектацияНоменклатуры.ВыпускПродукции)
			  ИЛИ (СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКомплектацияНоменклатуры.ПоступлениеОтПереработчика)) Тогда
				Если СтруктураШапкиДокумента.ВидКомплектации = Перечисления.ВидыКомплектации.Сборка Тогда
					СтатьяЗатрат = СтрокаДок.СтатьяЗатрат;
				Иначе
					СтатьяЗатрат = СтруктураШапкиДокумента.СтатьяЗатрат;
				КонецЕсли;
			Иначе	
				Если Не СтруктураШапкиДокумента.Свойство("СтатьяЗатрат") Тогда
					Если ТаблицаДвиженийПартий.Колонки.Найти("СтатьяЗатрат") <> Неопределено Тогда
						СтатьяЗатрат = СтрокаДок.СтатьяЗатрат;
					Иначе
						ВидыСубконтоСчетаЗатрат = СтруктураШапкиДокумента.СчетЗатрат.ВидыСубконто;
						Для НомерСубконто = 1 По ВидыСубконтоСчетаЗатрат.Количество() Цикл
							Если Не (СтрокаДок["КорСубконтоСписанияБУ" + НомерСубконто] = Неопределено)
								И ТипЗнч(СтрокаДок["КорСубконтоСписанияБУ" + НомерСубконто]) = Тип("СправочникСсылка.СтатьиЗатрат") Тогда
								СтатьяЗатрат = СтрокаДок["КорСубконтоСписанияБУ" + НомерСубконто];
								Прервать;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
				Иначе
					СтатьяЗатрат = СтруктураШапкиДокумента.СтатьяЗатрат;
				КонецЕсли; 
			КонецЕсли;	
			// Если счет учета не соответствует счету учета косвенных расходов, то движения делать не нужно
			Если Не (СчетаУчетаКосвенныхРасходов.НайтиПоЗначению(СтрокаДок.КорСчетБУ) = Неопределено) Тогда
				Если ЗначениеЗаполнено(СтатьяЗатрат)
					Тогда // Необходимо включить запись в состав косвенных расходов для последующего распределения
					
					СтрокаДвиженияКР = ТаблицаДвижений_НДСКосвенныеРасходы.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаДвиженияКР,СтрокаДок); 
					
					СтрокаДвиженияКР.ОтражатьВНалоговомУчете = СтруктураШапкиДокумента.ОтражатьВНалоговомУчете;
					СтрокаДвиженияКР.Организация	= СтруктураШапкиДокумента.Организация;
					СтрокаДвиженияКР.СтатьяЗатрат 	= СтатьяЗатрат;
					СтрокаДвиженияКР.Заказ 			= СтрокаДок.ЗаказСписания;
					СтрокаДвиженияКР.СчетЗатрат 	= СтрокаДок.КорСчетСписанияБУ;
					
					СтрокаДвиженияКР.Затрата               = СтрокаДок.Номенклатура;
					СтрокаДвиженияКР.ХарактеристикаЗатраты = СтрокаДок.ХарактеристикаНоменклатуры;
					СтрокаДвиженияКР.СерияЗатраты          = СтрокаДок.СерияНоменклатуры;
					
					ВидыСубконтоСчетаЗатрат = СтрокаДок.КорСчетСписанияБУ.ВидыСубконто;
					Для НомерСубконто = 1 По ВидыСубконтоСчетаЗатрат.Количество() Цикл
						Если не (СтрокаДок["КорСубконтоСписанияБУ" + НомерСубконто] = Неопределено) тогда
							СтрокаДвиженияКР["Субконто"+НомерСубконто] = СтрокаДок["КорСубконтоСписанияБУ"+НомерСубконто];
						КонецЕсли; 
					КонецЦикла;
					
					
					Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
						СтрокаДвиженияКР.СчетЗатратНУ = СтрокаДок.КорСчетСписанияНУ;
						
						ВидыСубконтоСчетаЗатрат = СтрокаДок.КорСчетСписанияНУ.ВидыСубконто;
						Для НомерСубконто = 1 По ВидыСубконтоСчетаЗатрат.Количество() Цикл
							Если Не (СтрокаДок["КорСубконтоСписанияБУ" + НомерСубконто] = Неопределено) тогда
								СтрокаДвиженияКР["СубконтоНУ"+НомерСубконто] = СтрокаДок["КорСубконтоСписанияБУ"+НомерСубконто];
							КонецЕсли; 
						КонецЦикла;
					КонецЕсли;
					
					СтрокаДвиженияКР.СуммаБезНДС = СтрокаДок.Стоимость - СтрокаДок.НДС;
					СтрокаДвиженияКР.НДС         = СтрокаДок.НДС;
					
				КонецЕсли; 
			КонецЕсли;
		КонецЦикла;
		
		Если ТаблицаДвижений_НДСКосвенныеРасходы.Количество() > 0 тогда
			ТаблицаДвижений_НДСКосвенныеРасходы.ЗаполнитьЗначения(Движения.Период,"Период");
			Движения.Вставить("ИзмененыДвиженияНДСКосвенныеРасходы", Истина);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // СформироватьДвиженияПоРегиструНДСКосвенныеРасходы_СписаниеМатериаловНаКосвенныеРасходы()

Процедура РаспределитьРасходыПоВНАнаСпособыОтраженияРасходовПоАмортизации(СтруктураШапкиДокумента, СтруктураПараметров, ДанныеДляОбработки, Отказ)
	
	Если не СтруктураШапкиДокумента.Свойство("ОрганизацияПрименяетУСН") 
		или не СтруктураШапкиДокумента.Свойство("СложныйУчетНДС")
		Тогда
		УчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(СтруктураШапкиДокумента.Дата, СтруктураШапкиДокумента.Организация);
		СтруктураШапкиДокумента.Вставить("ОрганизацияПрименяетУСН",(ЗначениеЗаполнено(УчетнаяПолитика) И (УчетнаяПолитика.СистемаНалогообложения = Перечисления.СистемыНалогообложения.Упрощенная)));
		СтруктураШапкиДокумента.Вставить("СложныйУчетНДС",(ЗначениеЗаполнено(УчетнаяПолитика) И УчетнаяПолитика.СложныйУчетНДС));
	КонецЕсли; 
	
	Если СтруктураШапкиДокумента.ОрганизацияПрименяетУСН тогда
		// Движения по этому документу делать не нужно
		Возврат;
	КонецЕсли;

	Если не СтруктураШапкиДокумента.СложныйУчетНДС Тогда
		// Движения по этому документу делать не нужно
		Возврат;
	КонецЕсли;
	
	ЕстьКолонкаСпособОтраженияРасходов = не ДанныеДляОбработки.Колонки.Найти("СпособОтраженияРасходов") = Неопределено;
	ЕстьКолонкаНазначениеИспользования = не ДанныеДляОбработки.Колонки.Найти("НазначениеИспользования") = Неопределено;
	
	Если не (ЕстьКолонкаСпособОтраженияРасходов ИЛИ ЕстьКолонкаНазначениеИспользования) Тогда
		// Отсутствует базис распределения
		Возврат;
	КонецЕсли;
	
	// Отражение списанных партий в составе косвенных расходов
	ТаблицаНДСПартииСписания = ДанныеДляОбработки.СкопироватьКолонки();
	
	БазисРаспределенияПоСпособуОтражения = Новый Соответствие;
	СчетаУчетаКосвенныхРасходов = ОпределитьСчетаУчетаКосвенныхРасходов();
	СчетаУчетаПроизводственныхРасходов = ОпределитьСчетаУчетаПроизводственныхРасходов();
	СтрокиКУдалению = Новый Массив();
	
	ТаблицаНДСПартииСписания.Колонки.Добавить("ТаблицаРаспределенияРасходов");

	Для каждого СтрокаСписания Из ДанныеДляОбработки Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаСписания.СчетФактура) тогда
			Продолжить;
		ИначеЕсли ?(ЕстьКолонкаСпособОтраженияРасходов, Не ЗначениеЗаполнено(СтрокаСписания.СпособОтраженияРасходов),
			Не ЗначениеЗаполнено(СтрокаСписания.НазначениеИспользования))
			тогда
			Продолжить;
		ИначеЕсли СтрокаСписания.Стоимость = 0 и СтрокаСписания.НДС = 0 тогда
			Продолжить;
		КонецЕсли;
		
		СпособОтражения = ?(ЕстьКолонкаСпособОтраженияРасходов, СтрокаСписания.СпособОтраженияРасходов,
										СтрокаСписания.НазначениеИспользования.СпособОтраженияРасходов);
		
		Если БазисРаспределенияПоСпособуОтражения[СпособОтражения] = Неопределено тогда 
			БазисСпособаОтражения = СпособОтражения.Способы.Выгрузить();
			БазисСпособаОтражения.Колонки.Добавить("ОтражатьВСоставеКР", Новый ОписаниеТипов("Булево"));
			БазисСпособаОтражения.Колонки.Добавить("ОтражатьВСоставеПР", Новый ОписаниеТипов("Булево"));
			
			Для каждого СтрокаСпособаОтражения Из БазисСпособаОтражения Цикл
				Если СтрокаСпособаОтражения.Коэффициент = 0 тогда
					Продолжить;
				ИначеЕсли (СчетаУчетаКосвенныхРасходов.НайтиПоЗначению(СтрокаСпособаОтражения.СчетЗатрат) = Неопределено) Тогда
					Продолжить;
				Иначе
					
					НоменклатурнаяГруппа = Неопределено;
					СложныйУчетНДСПоНоменклатурнойГруппе = Ложь;
					Если СчетаУчетаПроизводственныхРасходов.НайтиПоЗначению(СтрокаСпособаОтражения.СчетЗатрат) <> Неопределено Тогда
						НоменклатурнаяГруппа = СтрокаСпособаОтражения.НоменклатурнаяГруппа;
						СложныйУчетНДСПоНоменклатурнойГруппе = ЭтоНоменклатурнаяГруппаДляРеализацииБезНДСиНДС0(СтруктураШапкиДокумента.Организация, НоменклатурнаяГруппа, СтруктураПараметров);
					КонецЕсли;
					
					Если ЗначениеЗаполнено(СтрокаСпособаОтражения.СтатьяЗатрат) 
					   И (СчетаУчетаПроизводственныхРасходов.НайтиПоЗначению(СтрокаСпособаОтражения.СчетЗатрат) = Неопределено
						  ИЛИ СчетаУчетаПроизводственныхРасходов.НайтиПоЗначению(СтрокаСпособаОтражения.СчетЗатрат) <> Неопределено
							  И НЕ ЗначениеЗаполнено(НоменклатурнаяГруппа)) Тогда
			 			// Движения по регистру НДС косвенные расходы
						СтрокаСпособаОтражения.ОтражатьВСоставеКР = Истина;
					ИначеЕсли ЗначениеЗаполнено(СтрокаСпособаОтражения.СтатьяЗатрат) 
						И (СчетаУчетаПроизводственныхРасходов.НайтиПоЗначению(СтрокаСпособаОтражения.СчетЗатрат) <> Неопределено)
						И СложныйУчетНДСПоНоменклатурнойГруппе Тогда
			 			// Движения по регистру НДС незавершенное производство
						СтрокаСпособаОтражения.ОтражатьВСоставеПР = Истина;
					КонецЕсли;

				КонецЕсли; 
			КонецЦикла; 
			
			Если БазисСпособаОтражения.Найти(Истина,"ОтражатьВСоставеКР") = Неопределено Тогда
				БазисРаспределенияПоСпособуОтражения.Вставить(СпособОтражения, Ложь);
			Иначе
				БазисРаспределенияПоСпособуОтражения.Вставить(СпособОтражения, БазисСпособаОтражения);
			КонецЕсли; 
		
		КонецЕсли;
		
		Если БазисРаспределенияПоСпособуОтражения[СпособОтражения] = Ложь тогда
			//Строка не отражается в составе КР
			Продолжить;
		Иначе
			СтрокаКРаспределению = ТаблицаНДСПартииСписания.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаКРаспределению, СтрокаСписания);
			СтрокаКРаспределению.ТаблицаРаспределенияРасходов = БазисРаспределенияПоСпособуОтражения[СпособОтражения].Скопировать();
		КонецЕсли;
	КонецЦикла;
	
	Если ТаблицаНДСПартииСписания.Количество()=0 Тогда
		// Дальнейшая отработка не требуется
		Возврат;
	КонецЕсли;
	
	/////////////////////////////////////////////////////////////////////////////////
	// Подготовка таблицы списания по партиям товаров по данным партионного учета НДС
	СписокРаспределяемыхКолонок = Новый Структура("Стоимость, НДС","Коэффициент","Коэффициент");
	СписокИсключаемыхКолонок = новый Структура("QuieryId,Активность"+
										",ДействияНДСПокупки_ВключитьВСтоимость,ДействияНДСПокупки_ИсключитьИзСтоимости,ДействияНДСПокупки_ПредположениеСтавки0"+
										",ДоговорКонтрагента,ДоговорПоставщика,ДокументОприходования,Количество,Комиссионный"+
										",МоментВремени,Период,Регистратор,СодержаниеПроводки,СписанныеПартииВР,СписанныеПартииПР,СписыватьПоУказаннойСтоимости,СпособОтраженияРасходов,СпособПогашенияСтоимости,Ссылка"+
										",НомерСтроки,Партия, ВидДвижения, СуммаБезНДС");
										

	Для каждого КолонкаРаспределения Из БазисСпособаОтражения.Колонки Цикл
		Если не ТаблицаНДСПартииСписания.Колонки.Найти(КолонкаРаспределения.Имя) = Неопределено Тогда
			ТаблицаНДСПартииСписания.Колонки.Удалить(ТаблицаНДСПартииСписания.Колонки.Найти(КолонкаРаспределения.Имя));
		КонецЕсли; 
	КонецЦикла; 
		
	ТаблицаРасходовКРаспределению = ОбщегоНазначения.РазвернутьПоВложеннойТаблице(ТаблицаНДСПартииСписания, "ТаблицаРаспределенияРасходов",СписокРаспределяемыхКолонок, СписокИсключаемыхКолонок);
	ТаблицаРасходовКРаспределению.Колонки.Удалить(ТаблицаРасходовКРаспределению.Колонки.Подразделение);
	ТаблицаРасходовКРаспределению.Колонки.ПодразделениеОрганизации.Имя = "Подразделение";
	
	Если ТаблицаРасходовКРаспределению.Колонки.Найти("СуммаБезНДС") = Неопределено Тогда
		ТаблицаРасходовКРаспределению.Колонки.Добавить("СуммаБезНДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	КонецЕсли; 
	СтрокиКосвенныхРасходов = ТаблицаРасходовКРаспределению.НайтиСтроки(Новый Структура("ОтражатьВСоставеКР", Истина));
	ТаблицаКосвенныхРасходов = РегистрыНакопления.НДСКосвенныеРасходы.СоздатьНаборЗаписей().ВыгрузитьКолонки();
	Для каждого СтрокаКосвенныхРасходов Из СтрокиКосвенныхРасходов Цикл
		СтрокаКосвенныхРасходов.СуммаБезНДС = СтрокаКосвенныхРасходов.Стоимость - СтрокаКосвенныхРасходов.НДС;
		ЗаполнитьЗначенияСвойств(ТаблицаКосвенныхРасходов.Добавить(),СтрокаКосвенныхРасходов);
	КонецЦикла; 

	Если ТаблицаКосвенныхРасходов.Количество()>0 Тогда
		СформироватьДвиженияНДСКосвенныеРасходы(СтруктураШапкиДокумента, СтруктураПараметров, ТаблицаКосвенныхРасходов, Отказ,СчетаУчетаКосвенныхРасходов,СчетаУчетаПроизводственныхРасходов);
	КонецЕсли;
	
	СтрокиПроизводственныхРасходов = ТаблицаРасходовКРаспределению.НайтиСтроки(Новый Структура("ОтражатьВСоставеПР", Истина));
	ТаблицаПроизводственныхРасходов = ТаблицаРасходовКРаспределению.СкопироватьКолонки();
	
	Для каждого СтрокаПроизводственныхРасходов Из СтрокиПроизводственныхРасходов Цикл
		СтрокаПроизводственныхРасходов.СуммаБезНДС = СтрокаПроизводственныхРасходов.Стоимость - СтрокаПроизводственныхРасходов.НДС;
		ЗаполнитьЗначенияСвойств(ТаблицаПроизводственныхРасходов.Добавить(),СтрокаПроизводственныхРасходов);
	КонецЦикла; 

	Если ТаблицаПроизводственныхРасходов.Количество()>0 Тогда
		СформироватьДвиженияНДСНезавершенноеПроизводство(СтруктураШапкиДокумента, СтруктураПараметров, ТаблицаПроизводственныхРасходов, Отказ);
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьДвиженияНДСКосвенныеРасходы(СтруктураШапкиДокумента, СтруктураПараметров, ДанныеДляОбработки, Отказ,СчетаУчетаКосвенныхРасходов = Неопределено,СчетаУчетаПроизводственныхРасходов = Неопределено)
	
	Если ДанныеДляОбработки.Колонки.Найти("СтатьяЗатрат") = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	Если не ЗначениеЗаполнено(СчетаУчетаКосвенныхРасходов) Тогда
		СчетаУчетаКосвенныхРасходов				= ОпределитьСчетаУчетаКосвенныхРасходов();
	КонецЕсли; 
	Если не ЗначениеЗаполнено(СчетаУчетаПроизводственныхРасходов) Тогда
		СчетаУчетаПроизводственныхРасходов		= ОпределитьСчетаУчетаПроизводственныхРасходов();
	КонецЕсли; 
	
	ЕстьКолонкаНоменклатурнаяГруппа = не ДанныеДляОбработки.Колонки.Найти("НоменклатурнаяГруппа") = Неопределено;
	
	Для каждого СтрокаДокумента из ДанныеДляОбработки Цикл

		Если ЗначениеЗаполнено(СтрокаДокумента.СтатьяЗатрат) 
		   И (СчетаУчетаПроизводственныхРасходов.НайтиПоЗначению(СтрокаДокумента.СчетЗатрат) = Неопределено
			  ИЛИ СчетаУчетаПроизводственныхРасходов.НайтиПоЗначению(СтрокаДокумента.СчетЗатрат) <> Неопределено
				  И НЕ ?(ЕстьКолонкаНоменклатурнаяГруппа, ЗначениеЗаполнено(СтрокаДокумента.НоменклатурнаяГруппа), Ложь)) Тогда
			
			Движение = УправлениеЗапасамиПартионныйУчет.ДобавитьДвижениеВСтруктуруПараметров("НДСКосвенныеРасходы", СтруктураПараметров);
			
			ЗаполнитьЗначенияСвойств(Движение,СтрокаДокумента);
			
			Движение.Активность            = Истина;
			Движение.ВидДвижения           = ВидДвиженияНакопления.Приход;
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры//СформироватьДвиженияНДСКосвенныеРасходы()

//////////////////////////////////////////////////////////////////////////
// НДС РЕАЛИЗАЦИИ

// Начисляет НДС при реализации по бухгалтерскому учету
//
// Параметры:
//	Нет.
//
Процедура НачислитьНДСРеализации(НДС, СтрокаДокумента, СтруктураПараметров) Экспорт
	
	// При нулевом НДС проводки не формируем.
	Если НДС=0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(СтруктураПараметров) = Тип("Структура") тогда
		ТаблицаДвижений_Хозрасчетный		= СтруктураПараметров.ДвиженияХозрасчетный;
	Иначе
		ТаблицаДвижений_Хозрасчетный		= СтруктураПараметров.Хозрасчетный;
	КонецЕсли;
	
	ВтораяПроводка = ТаблицаДвижений_Хозрасчетный.Добавить();
	ВтораяПроводка.Период        = СтруктураПараметров.Период;
	ВтораяПроводка.Регистратор   = СтруктураПараметров.Регистратор;
	ВтораяПроводка.Активность    = Истина;
	ВтораяПроводка.Содержание = "Реализация";
	ВтораяПроводка.Организация   = СтрокаДокумента.Организация;
	
	// Счет расходов по НДС - могут быть бва варианта субсчет 91 и субсчет 90
	Если БухгалтерскийУчет.ЭтоСубсчет(СтрокаДокумента.КорСчетБУ, ПланыСчетов.Хозрасчетный.ПрочиеДоходыИРасходы) тогда
		ВтораяПроводка.СчетДт = СтрокаДокумента.КорСчетБУ;
		Если ТипЗнч(СтрокаДокумента.КорСубконтоБУ2) = Тип("СправочникСсылка.ПрочиеДоходыИРасходы") Тогда
			БухгалтерскийУчет.УстановитьСубконто(ВтораяПроводка.СчетДт, ВтораяПроводка.СубконтоДт, 1, СтрокаДокумента.КорСубконтоБУ2);
		КонецЕсли;
	Иначе
		ВтораяПроводка.СчетДт = ПланыСчетов.Хозрасчетный.Продажи_НДС;
	КонецЕсли;
	
	Если ТипЗнч(СтрокаДокумента.КорСубконтоБУ2) = Тип("СправочникСсылка.НоменклатурныеГруппы") Тогда
		БухгалтерскийУчет.УстановитьСубконто(ВтораяПроводка.СчетДт, ВтораяПроводка.СубконтоДт, 1, СтрокаДокумента.КорСубконтоБУ2);
	КонецЕсли;
	
	БухгалтерскийУчет.УстановитьСубконто(ВтораяПроводка.СчетДт, ВтораяПроводка.СубконтоДт, 2, СтрокаДокумента.СтавкаНДС);
	
	МоментыОпределенияНалоговойБазыНДС = УправлениеЗапасамиПартионныйУчет.ПолучитьПараметрУчетнойПолитикиПартионногоУчета("МоментОпределенияНалоговойБазыНДС", "Бух", СтруктураПараметров);			
	
	// Отчет о розничных продажах должен формировать проводку по отнесению НДС на счет 68 непосредственно,
	// вне зависимости от момента определения налоговой базы для НДС, указанного в учетной политике, так 
	// как при реализации в розницу выручка, отраженная в отчете о розничных продажах сразу считается оплаченной
	Если СтрокаДокумента.КодОперацииПартииТоваров = Перечисления.КодыОперацийПартииТоваров.РеализацияРозница
	   ИЛИ МоментыОпределенияНалоговойБазыНДС = Перечисления.МоментыОпределенияНалоговойБазыНДС.ПоОтгрузке
	   Тогда
			ВтораяПроводка.СчетКт = ПланыСчетов.Хозрасчетный.НДС;
			ВтораяПроводка.СубконтоКт.ВидыПлатежейВГосБюджет = Перечисления.ВидыПлатежейВГосБюджет.Налог;
	Иначе
			ВтораяПроводка.СчетКт = ПланыСчетов.Хозрасчетный.РасчетыПоНДСотложенномуДляУплатыВБюджет;
			ВтораяПроводка.СубконтоКт.Контрагенты = СтрокаДокумента.КорСубконтоЗадолженностиБУ1;
			ВтораяПроводка.СубконтоКт.СФВыданные  = СтруктураПараметров.Регистратор;
	КонецЕсли;
	
	ВтораяПроводка.Сумма = НДС;
	
КонецПроцедуры // НачислитьНДСРеализации()

////////////////////////////////////////////////////////////////////////////////////////////////////
//  ОТРАЖЕНИЕ Предположения ставки 0% при реализации

Процедура ОтразитьПредположениеСтавки0(СтруктураШапкиДокумента, ТаблицаСписания, СтруктураПараметров, Заголовок) Экспорт

	Если ТипЗнч(СтруктураШапкиДокумента.Ссылка) = Тип("ДокументСсылка.РеализацияОтгруженныхТоваров")
		И СтруктураШапкиДокумента.НачислятьНДСПоОтгрузке Тогда
		Возврат;
	КонецЕсли;
	
	Построитель_ТаблицаСписания = Новый ПостроительЗапроса();
	ОписаниеИсточника_ТаблицаСписания = Новый ОписаниеИсточникаДанных(ТаблицаСписания);
	Построитель_ТаблицаСписания.ИсточникДанных = ОписаниеИсточника_ТаблицаСписания;
	Отбор = Построитель_ТаблицаСписания.Отбор;
	
	Отбор.Добавить("ДействияНДСПокупки_ПредположениеСтавки0");
	Отбор["ДействияНДСПокупки_ПредположениеСтавки0"].Значение = Истина;
	Отбор["ДействияНДСПокупки_ПредположениеСтавки0"].Использование = Истина;
	
	Отбор.Добавить("БлокироватьДоПодтвержденияСтавки0");
	Отбор["БлокироватьДоПодтвержденияСтавки0"].Значение = Истина;
	Отбор["БлокироватьДоПодтвержденияСтавки0"].Использование = Истина;
	
	Построитель_ТаблицаСписания.Выполнить();
	ДанныеДляОбработки = Построитель_ТаблицаСписания.Результат.Выгрузить();
	
	Если ДанныеДляОбработки.Колонки.Найти("СуммаБезНДС") = Неопределено Тогда
		ДанныеДляОбработки.Колонки.Добавить("СуммаБезНДС",Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	КонецЕсли; 
	
	Если ДанныеДляОбработки.Количество()>0 Тогда
		СтрокиКУдалению = новый Массив();
		Для каждого СтрокаТаблицы Из ДанныеДляОбработки Цикл
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.СчетФактура) Тогда
				СтрокиКУдалению.Добавить(СтрокаТаблицы);
			КонецЕсли; 
		КонецЦикла; 
		Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
			ДанныеДляОбработки.Удалить(СтрокаКУдалению);
		КонецЦикла; 
	КонецЕсли;
	
	Если ДанныеДляОбработки.Количество() = 0 Тогда
		//Отражение предположения 0% по данному набору не требуется
		Возврат;
	КонецЕсли; 
	
	Для каждого СтрокаОбрабатываемая  Из ДанныеДляОбработки Цикл
		СтрокаОбрабатываемая.СуммаБезНДС = СтрокаОбрабатываемая.Стоимость - СтрокаОбрабатываемая.НДС;
	КонецЦикла; 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",  СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("СчетаФактуры",       ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(ДанныеДляОбработки.ВыгрузитьКолонку("СчетФактура")));
	Запрос.УстановитьПараметр("ПустойКонтрагент",   Справочники.Контрагенты.ПустаяСсылка());
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НДСПредъявленныйОбороты.Поставщик,
	|	НДСПредъявленныйОбороты.СчетФактура
	|ИЗ
	|	РегистрНакопления.НДСПредъявленный.Обороты(
	|		,
	|		,
	|		,
	|		Организация = &Организация
	|		    И СчетФактура В (&СчетаФактуры)) КАК НДСПредъявленныйОбороты
	|ГДЕ
	|	НДСПредъявленныйОбороты.Поставщик <> &ПустойКонтрагент";
	
	КонтрагентПоСчетуФактуре = Запрос.Выполнить().Выгрузить();
	ДанныеДляОбработки.Колонки.Добавить("Поставщик");
	Для каждого СтрокаОбрабатываемая  Из ДанныеДляОбработки Цикл
		СтрокаКонтрагента = КонтрагентПоСчетуФактуре.Найти(СтрокаОбрабатываемая.СчетФактура,"СчетФактура");
		Если не СтрокаКонтрагента = Неопределено Тогда
		    СтрокаОбрабатываемая.Поставщик = СтрокаКонтрагента.Поставщик;
		КонецЕсли; 
	КонецЦикла;
	
	ДанныеДляОбработки.Колонки.Добавить("Событие");
	ДанныеДляОбработки.ЗаполнитьЗначения(Перечисления.СобытияПоНДСПокупки.ПредполагаетсяСтавка0,"Событие");
	
	Если ДанныеДляОбработки.Колонки.Найти("ДокументОтгрузки") = неопределено Тогда
	 	ДанныеДляОбработки.Колонки.Добавить("ДокументОтгрузки");
	КонецЕсли; 
	
	ДанныеДляОбработки.ЗаполнитьЗначения(СтруктураШапкиДокумента.Ссылка,"ДокументОтгрузки");

	Если ДанныеДляОбработки.Колонки.Найти("ВидДвижения") = неопределено Тогда
	 	ДанныеДляОбработки.Колонки.Добавить("ВидДвижения");
	КонецЕсли; 
	
	ДанныеДляОбработки.ЗаполнитьЗначения(ВидДвиженияНакопления.Приход,"ВидДвижения");
	
	// Отразить в регистре НДСПредъявленныйРеализация0
	
	Если ДанныеДляОбработки.Колонки.Найти("Состояние") = неопределено Тогда
	 	ДанныеДляОбработки.Колонки.Добавить("Состояние");
	КонецЕсли;
	ДанныеДляОбработки.ЗаполнитьЗначения(Перечисления.НДССостоянияРеализация0.ОжидаетсяПодтверждение,"Состояние");
	
	Для каждого СтрокаСписания Из ДанныеДляОбработки Цикл
		Если СтруктураШапкиДокумента.ВидДокумента = "ВозвратТоваровОтПокупателя" Тогда
			Если ЗначениеЗаполнено(СтрокаСписания.ДокументПередачи) Тогда
				СтрокаСписания.ДокументОтгрузки = СтрокаСписания.ДокументПередачи;
			КонецЕсли; 
		КонецЕсли; 
		Движение = УправлениеЗапасамиПартионныйУчет.ДобавитьДвижениеВСтруктуруПараметров("НДСПредъявленныйРеализация0",СтруктураПараметров);
		ЗаполнитьЗначенияСвойств(Движение,СтрокаСписания);
	КонецЦикла; //Для каждого СтрокаСписания Из ДанныеДляОбработки Цикл
	
	////////////////////////////////////////////////////////
	// Движения по НДС партии и по регистру бухгалтерии

	Для каждого СтрокаСписания Из ДанныеДляОбработки Цикл
		СформироватьПроводкиПоПредположениюСтавки0(СтруктураШапкиДокумента, СтрокаСписания, СтруктураПараметров.ДвиженияХозрасчетный, Заголовок);
	КонецЦикла; //Для каждого СтрокаСписания Из ДанныеДляОбработки Цикл
	// Движения по НДС партии и по регистру бухгалтерии
	////////////////////////////////////////////////////////
	
КонецПроцедуры // ОтразитьПредположениеСтавки0()

Процедура СформироватьПроводкиПоПредположениюСтавки0(СтруктураШапкиДокумента,СтрокаДвижения, НаборДвиженийХозрасчетный,Заголовок)
	Если НЕ ЗначениеЗаполнено(СтрокаДвижения.НДС) тогда
		//Формирование проводки не требуется
		Возврат;
	ИначеЕсли (НЕ ЗначениеЗаполнено(СтрокаДвижения.СчетУчетаНДС))
	 Тогда
		// Недостаточно данных для формирования проводки по данной строке
		ОбщегоНазначения.СообщитьОбОшибке("Не хватает данных для формирования проводки по отнесению НДС на счет учета НДС по товарам реализованным по ставке 0% (экспорт).",, Заголовок,СтатусСообщения.Внимание);
		Возврат;
	КонецЕсли;

	// отразим факт включения НДС в стоимость соотвествующей проводкой 
	СтрокаДвиженияПроводка = НаборДвиженийХозрасчетный.Добавить();
	
	// проводка, отражающая включение НДС в стоимость
	СтрокаДвиженияПроводка.СчетДт = ПланыСчетов.Хозрасчетный.НДСПоТоварамРеализованнымПоСтавке0; 
	БухгалтерскийУчет.УстановитьСубконто(СтрокаДвиженияПроводка.СчетДт, СтрокаДвиженияПроводка.СубконтоДт, "Контрагенты", СтрокаДвижения.Поставщик);
	БухгалтерскийУчет.УстановитьСубконто(СтрокаДвиженияПроводка.СчетДт, СтрокаДвиженияПроводка.СубконтоДт, "СФПолученные", СтрокаДвижения.СчетФактура);
	БухгалтерскийУчет.УстановитьСубконто(СтрокаДвиженияПроводка.СчетДт, СтрокаДвиженияПроводка.СубконтоДт, "ДокументыРеализации", СтрокаДвижения.ДокументОтгрузки);

	СтрокаДвиженияПроводка.СчетКт = СтрокаДвижения.СчетУчетаНДС; // 19.хх
	БухгалтерскийУчет.УстановитьСубконто(СтрокаДвиженияПроводка.СчетКт, СтрокаДвиженияПроводка.СубконтоКт, "Контрагенты", СтрокаДвижения.Поставщик);
	БухгалтерскийУчет.УстановитьСубконто(СтрокаДвиженияПроводка.СчетКт, СтрокаДвиженияПроводка.СубконтоКт, "СФПолученные", СтрокаДвижения.СчетФактура);

	СтрокаДвиженияПроводка.Содержание = "В связи с применением НДС 0% по реализации";
	СтрокаДвиженияПроводка.Сумма        = СтрокаДвижения.НДС;

	СтрокаДвиженияПроводка.Период       = СтруктураШапкиДокумента.Дата;
	СтрокаДвиженияПроводка.Организация  = СтрокаДвижения.Организация;
	СтрокаДвиженияПроводка.НомерЖурнала = "НДС";
	СтрокаДвиженияПроводка.НДСПродукции = Истина;
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////
//  ДВИЖЕНИЯ ПО НДС ПРИ ИСПОЛЕНИИ КОМИССИОНЕРОМ ОБЯЗАННОСТЕЙ НАЛОГОВОГО АГЕНТА

Процедура ОтразитьНДСНалоговогоАгентаКомиссионер(СтруктураШапкиДокумента, ТаблицаВыручки, Движения)
	
	Если СтруктураШапкиДокумента.УчитыватьНДС Тогда
		Для Каждого СтрокаТаблицы Из ТаблицаВыручки Цикл
			ОтражатьНДСКомитента = СтруктураШапкиДокумента.Дата >= '20060101000000' И СтрокаТаблицы.Комиссионный И СтрокаТаблицы.ДоговорКомиссии.УчетАгентскогоНДС;
			Если ОтражатьНДСКомитента Тогда
				
				// Нужно дополнительно сформировать проводку по начислению НДС налогового агента
				Если ТипЗнч(Движения) = Тип("Структура") тогда
					Проводка = Движения.ДвиженияХозрасчетный.Добавить();
				Иначе	
					Проводка = Движения.Хозрасчетный.Добавить();
				КонецЕсли;

				Проводка.Период 		= СтруктураШапкиДокумента.Дата;
				Проводка.Организация	= СтруктураШапкиДокумента.Организация;
				Проводка.Содержание 	= "Начислен НДС в качестве налогового агента";

				Проводка.СчетДт			= СтрокаТаблицы.СчетРасчетовСКомитентом;
				Если ТаблицаВыручки.Колонки.Найти("Комитент") <> Неопределено Тогда
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Контрагенты", СтрокаТаблицы.Комитент);
				Иначе
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Контрагенты", СтрокаТаблицы.ДоговорКомиссии.Владелец);
				КонецЕсли;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Договоры", СтрокаТаблицы.ДоговорКомиссии);
				
				Проводка.СчетКт			= ПланыСчетов.Хозрасчетный.НДС;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"ВидыПлатежейВГосБюджет", Перечисления.ВидыПлатежейВГосБюджет.Налог);
									
				Проводка.Сумма			= СтрокаТаблицы.НДС;
				
				Если СтрокаТаблицы.СчетРасчетовСКомитентом.Валютный Тогда
					ВалютаРасчетовСКомитентом = СтрокаТаблицы.ДоговорКомиссии.ВалютаВзаиморасчетов;
					Проводка.ВалютаДт        = ВалютаРасчетовСКомитентом;
					Если ВалютаРасчетовСКомитентом = СтруктураШапкиДокумента.ВалютаВзаиморасчетов Тогда
						Проводка.ВалютнаяСуммаДт = СтрокаТаблицы.КорВалютнаяСуммаНДСЗадолженностиБУ;
					Иначе
						ВалютаРасчетовСКомитентом_КурсКратность = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаРасчетовСКомитентом, СтруктураШапкиДокумента.Дата);
						Проводка.ВалютнаяСуммаДт = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.НДС,
																			СтруктураШапкиДокумента.ВалютаРегламентированногоУчета,
																			ВалютаРасчетовСКомитентом,
																			1,ВалютаРасчетовСКомитентом_КурсКратность.Курс, 
																			1,ВалютаРасчетовСКомитентом_КурсКратность.Кратность);
					КонецЕсли; 
				КонецЕсли;
									
				
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////
// НДС ПРОИЗВОДСТВА

Процедура СформироватьДвиженияНДСНезавершенноеПроизводство(СтруктураШапкиДокумента, СтруктураПараметров, ДанныеДляОбработки, Отказ)
	
	Если Не УправлениеЗапасами.ИспользуетсяРасширеннаяАналитикаУчета(СтруктураШапкиДокумента.Дата) Тогда
	
		ТаблицаНДСКосвенныеРасходы = ДанныеДляОбработки.СкопироватьКолонки();
	
		Для каждого СтрокаДокумента из ДанныеДляОбработки Цикл

			Если ЭтоНоменклатурнаяГруппаДляРеализацииБезНДСиНДС0(СтрокаДокумента.Организация, СтрокаДокумента.НоменклатурнаяГруппа, СтруктураПараметров) Тогда
				
				Движение = УправлениеЗапасамиПартионныйУчет.ДобавитьДвижениеВСтруктуруПараметров("НДСНезавершенноеПроизводство", СтруктураПараметров);
				
				ЗаполнитьЗначенияСвойств(Движение,СтрокаДокумента);
				
				Движение.Активность            = Истина;
				Движение.ВидДвижения           = ВидДвиженияНакопления.Приход;
				Движение.СчетУчета             = СтрокаДокумента.КорСчетБУ;
				Движение.Затрата               = СтрокаДокумента.Номенклатура;
				Движение.ХарактеристикаЗатраты = СтрокаДокумента.ХарактеристикаНоменклатуры;
				Движение.КодОперации           = Перечисления.КодыОперацийНезавершенноеПроизводство.СписаниеПартийВПроизводствоОперативно;
				
				СтруктураРеквизитов = Новый Структура("ВестиУчетПоСериямВНЗП");
				УправлениеЗапасамиПартионныйУчет.ПолучитьРеквизитыОбъекта(СтрокаДокумента.Номенклатура, СтруктураРеквизитов);
		
				Если СтруктураРеквизитов.ВестиУчетПоСериямВНЗП Тогда
					Движение.СерияЗатраты = СтрокаДокумента.СерияНоменклатуры;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(СтрокаДокумента.ЗаказСписания) Тогда
					Движение.Заказ = СтрокаДокумента.ЗаказСписания;
				ИначеЕсли ЗначениеЗаполнено(СтрокаДокумента.Заказ) Тогда
					Движение.Заказ = СтрокаДокумента.Заказ;
				Иначе
					Движение.Заказ = Неопределено;
				КонецЕсли;
			ИначеЕсли НЕ ЗначениеЗаполнено(СтрокаДокумента.НоменклатурнаяГруппа) тогда
				НоваяСтрока = ТаблицаНДСКосвенныеРасходы.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаДокумента);
			КонецЕсли;

		КонецЦикла;
		
	Иначе
		
		ТаблицаНДСКосвенныеРасходы = ДанныеДляОбработки.Скопировать();

	КонецЕсли;
	
	Если ТаблицаНДСКосвенныеРасходы.Количество() > 0 тогда
		// Списываем на косвенные расходы
		СформироватьДвиженияПоРегиструНДСКосвенныеРасходы_СписаниеМатериаловНаКосвенныеРасходы(СтруктураШапкиДокумента, ТаблицаНДСКосвенныеРасходы, СтруктураПараметров, Отказ);	
	КонецЕсли;

КонецПроцедуры//СформироватьДвиженияНДСНезавершенноеПроизводство()

// Возвращает признак принадлежности номенклатурной группы к реализации по ставке 0% и без НДС
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	
//
Функция ЭтоНоменклатурнаяГруппаДляРеализацииБезНДСиНДС0(Организация, НоменклатурнаяГруппа, СтруктураПараметров) Экспорт
	
	Возврат СтруктураПараметров.НоменклатурныеГруппыДляРеализацииБезНДСиНДС0.НайтиСтроки(Новый Структура("НоменклатурнаяГруппа, Организация", НоменклатурнаяГруппа, Организация)).Количество()>0;
	
КонецФункции // ЭтоНоменклатурнаяГруппаДляРеализацииБезНДСиНДС0(СтрокаДокумента.НоменклатурнаяГруппа, СтруктураПараметров)

// Возвращает номенклатурные группы для реализации по ставке 0% и без НДС 
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	ТаблицаЗначений
//
Функция ПолучитьНоменклатурныеГруппыДляРеализацииБезНДСиНДС0(ДатаКон, МассивОрганизаций, СтруктураПараметров) Экспорт
	
	Инд=0;
	Если ТипЗнч(МассивОрганизаций) = Тип("Массив") Тогда
		Пока Инд<МассивОрганизаций.Количество() Цикл
			Если УправлениеЗапасамиПартионныйУчет.ПолучитьПараметрУчетнойПолитикиПартионногоУчета("СложныйУчетНДС", "Нал", СтруктураПараметров)=Ложь Тогда
				МассивОрганизаций.Удалить(Инд);
			Иначе
				Инд=Инд+1;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	НоменклатурныеГруппыДляРеализацииБезНДСиНДС0СрезПоследних.Организация,
	|	НоменклатурныеГруппыДляРеализацииБезНДСиНДС0СрезПоследних.НоменклатурнаяГруппа
	|ИЗ
	|	РегистрСведений.НоменклатурныеГруппыДляРеализацииБезНДСиНДС0.СрезПоследних(&ДатаКон, Организация В (&МассивОрганизаций)) КАК НоменклатурныеГруппыДляРеализацииБезНДСиНДС0СрезПоследних
	|
	|ГДЕ
	|	(НоменклатурныеГруппыДляРеализацииБезНДСиНДС0СрезПоследних.СложныйУчетНДС = ИСТИНА)");
	
	Запрос.УстановитьПараметр("ДатаКон", ДатаКон);
	Запрос.УстановитьПараметр("МассивОрганизаций", МассивОрганизаций);
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // ПолучитьНоменклатурныеГруппыДляРеализацииБезНДСиНДС0()

//////////////////////////////////////////////////////////////////////////
// ВОЗВРАТ ТОВАРОВ ПОСТАВЩИКУ

Процедура ДвиженияВозвратаТоваровПоставщикуПоРегистрамПодсистемыНДС(СтруктураШапкиДокумента, СтруктураПараметров, ТаблицаПартий, ТаблицаВозвратов, Отказ, Заголовок)

	Если не СтруктураШапкиДокумента.УчитыватьНДС Тогда
		Возврат;
	ИначеЕсли СтруктураШапкиДокумента.ОрганизацияПрименяетУСН
		И НЕ (СтруктураШапкиДокумента.Свойство("ВедетсяУчетНДСПоФЗ134") И СтруктураШапкиДокумента.ВедетсяУчетНДСПоФЗ134) Тогда
		// Движения по этому документу делать не нужно
		Возврат;
	ИначеЕсли ТаблицаВозвратов.Количество()=0 Тогда
		// Возврат товаров не осуществлялся
		Возврат;
	ИначеЕсли СтруктураШапкиДокумента.Свойство("ВидОперации") и СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.ИзПереработки Тогда
		// Это не наши ценности (были даны в переработку), следовательно НДС по ним учитывать не нужно
		Возврат;
	ИначеЕсли СтруктураШапкиДокумента.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
		// Это не наши ценности (договор комиссии), следовательно НДС по ним отражать не нужно
		Возврат;
	КонецЕсли;
	
	СчетНДС = ПланыСчетов.Хозрасчетный.НДС;
	
	
	ТаблицаПоПартиямБУ = РаспределитьПартииПоТаблицеСписания(ТаблицаПартий, ТаблицаВозвратов, СтруктураШапкиДокумента, СтруктураПараметров);
	
	ТаблицаПоПартиямБУ.Колонки.Добавить("НомерСтрокиТаблицыПоПартиямБУ", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10,0)));
	
	НомерСтроки = 0;
	Для каждого СтрокаПартииБУ Из ТаблицаПоПартиямБУ Цикл
		НомерСтроки = НомерСтроки +1;
		СтрокаПартииБУ.НомерСтрокиТаблицыПоПартиямБУ = НомерСтроки;
	КонецЦикла; 
	
	//////////////////////////////////////////////////////////////////////////
	// Попытка списания товаров по партионному учету НДС
		
	/////////////////////////////////////////////////////////////////////////////////
	
	//При учете "По средней" или если партионный учет по БУ не ведется - партия может быть незаполнена.
	Если ТаблицаПоПартиямБУ.Колонки.Найти("Партия") = Неопределено Тогда
		ТаблицаПоПартиямБУ.Колонки.Добавить("Партия");
	КонецЕсли; 
	
	ТаблицаНДСПартииСписания = ОпределитьПартииСписанияПоРегиструНДСПартии(СтруктураШапкиДокумента, ТаблицаПоПартиямБУ.Скопировать(), Отказ, Заголовок, Истина, Ложь, СтруктураПараметров);
	// Подготовка таблицы списания по партиям товаров по данным партионного учета НДС
	/////////////////////////////////////////////////////////////////////////////////

	/////////////////////////////////////////////////////////////////////////////////
	// НДС по партиям - отразить непосредственое списание.
	Если не ТаблицаНДСПартииСписания.Количество() = 0 Тогда
		//Партии найдены (хотя бы частично). Отразим в партионном учете НДС.
		ТаблицаДвиженийПартии = СтруктураПараметров.ТаблицаДвиженийНДСПартииТоваров;
		СтруктураПараметров.Вставить("ИзмененыДвиженияНДСПартииТоваров", Истина);
		
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаНДСПартииСписания, ТаблицаДвиженийПартии);
		ТаблицаДвиженийПартии.ЗаполнитьЗначения(СтруктураПараметров.Период,"Период");
		
		// Делаем не расход, а сторно прихода по регистру.
		Для каждого СтрокаПартии Из ТаблицаДвиженийПартии Цикл
			СтрокаПартии.Стоимость	= - СтрокаПартии.Стоимость;
			СтрокаПартии.НДС		= - СтрокаПартии.НДС;
			СтрокаПартии.Количество	= - СтрокаПартии.Количество;
		КонецЦикла; 
		
	КонецЕсли; 
	// НДС по партиям - отразить непосредственое списание.
	///////////////////////////
	СуммаНДСПоСтрокам = ОбщегоНазначения.СформироватьТаблицуЗначений(ТаблицаПоПартиямБУ,Новый структура("НомерСтрокиТаблицыПоПартиямБУ, НДС,СуммаБезНДС"));
	
	ТаблицаПроводокПоНДС = Новый ТаблицаЗначений();
	ТаблицаПроводокПоНДС.Колонки.Добавить("НомерСтрокиДокумента", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10,0)));
	ТаблицаПроводокПоНДС.Колонки.Добавить("НомерСтрокиТаблицыПоПартиямБУ", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10,0)));
	ТаблицаПроводокПоНДС.Колонки.Добавить("СчетФактура");
	ТаблицаПроводокПоНДС.Колонки.Добавить("Поставщик", Новый ОписаниеТИпов("СправочникСсылка.Контрагенты"));
	ТаблицаПроводокПоНДС.Колонки.Добавить("СчетУчетаНДС");
	ТаблицаПроводокПоНДС.Колонки.Добавить("НДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаПроводокПоНДС.Колонки.Добавить("НДСВал", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	// Попытка списания товаров по партионному учету НДС
	//////////////////////////////////////////////////////////////////////////
	
	СокращеннаяТаблицаСФВозвратов = ТаблицаНДСПартииСписания.Скопировать();
	СокращеннаяТаблицаСФВозвратов.Свернуть("НомерСтрокиДокумента, НомерСтрокиТаблицыПоПартиямБУ, СчетФактура,Номенклатура,ВидЦенности, СтавкаНДС, НДСВключенВСтоимость,СчетУчетаНДС, ДокументПартии, ПартияСовпадаетСУказаннымДокументомДляВозврата","Количество,Стоимость, НДС,КорВалютнаяСуммаНДСЗадолженностиБУ");
	СокращеннаяТаблицаСФВозвратов.Колонки.Добавить("СуммаБезНДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	
	// Определение поставщика по счету-фактуре
	Если СокращеннаяТаблицаСФВозвратов.Количество()>0 Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Организация",  СтруктураШапкиДокумента.Организация);
		Запрос.УстановитьПараметр("СчетаФактуры",       ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(СокращеннаяТаблицаСФВозвратов.ВыгрузитьКолонку("СчетФактура"),Истина));
		Запрос.УстановитьПараметр("ПустойКонтрагент",   Справочники.Контрагенты.ПустаяСсылка());
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	НДСПредъявленныйОбороты.Поставщик,
		|	НДСПредъявленныйОбороты.СчетФактура
		|ИЗ
		|	РегистрНакопления.НДСПредъявленный.Обороты(
		|		,
		|		,
		|		,
		|		Организация = &Организация
		|		    И СчетФактура В (&СчетаФактуры)) КАК НДСПредъявленныйОбороты
		|ГДЕ
		|	НДСПредъявленныйОбороты.Поставщик <> &ПустойКонтрагент";
		
		КонтрагентПоСчетуФактуре = Запрос.Выполнить().Выгрузить();
		СокращеннаяТаблицаСФВозвратов.Колонки.Добавить("Поставщик", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
		
		Для каждого СтрокаОбрабатываемая  Из СокращеннаяТаблицаСФВозвратов Цикл
			СтрокаОбрабатываемая.СуммаБезНДС = СтрокаОбрабатываемая.Стоимость - СтрокаОбрабатываемая.НДС;
			
			СтрокаКонтрагента = КонтрагентПоСчетуФактуре.Найти(СтрокаОбрабатываемая.СчетФактура,"СчетФактура");
			Если не СтрокаКонтрагента = Неопределено Тогда
			    СтрокаОбрабатываемая.Поставщик = СтрокаКонтрагента.Поставщик;
			КонецЕсли; 
		КонецЦикла;
	КонецЕсли; 
	
	ОтразитьВКнигеПродаж =  (СтруктураШапкиДокумента.Дата>='20060530');

	Если ОтразитьВКнигеПродаж Тогда
		Если Не СтруктураШапкиДокумента.ПоставщикуВыставляетсяСчетФактураНаВозврат Тогда
			ВидНачисления = Перечисления.НДСВидНачисления.НДСВосстановлен;
		Иначе
			ВидНачисления = Перечисления.НДСВидНачисления.РеализацияСНДС;
		КонецЕсли;
	КонецЕсли;
	
	Для каждого СтрокаВозврата Из ТаблицаПоПартиямБУ Цикл
		
		Если ОтразитьВКнигеПродаж И СтруктураШапкиДокумента.ПоставщикуВыставляетсяСчетФактураНаВозврат Тогда
			Если СтрокаВозврата.СтавкаНДС = Перечисления.СтавкиНДС.НДС0 Тогда
				ВидНачисления = Перечисления.НДСВидНачисления.Реализация0;
			ИначеЕсли СтрокаВозврата.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
				ВидНачисления = Перечисления.НДСВидНачисления.РеализацияБезНДС;
			КонецЕсли;
		КонецЕсли;
		
		УказанДокументВозврата = ЗначениеЗаполнено(СтрокаВозврата.ДокументПартии) И Не СтруктураШапкиДокумента.ПоставщикуВыставляетсяСчетФактураНаВозврат;
		
		ОтработанНДСпоСтроке = СуммаНДСПоСтрокам.Найти(СтрокаВозврата.НомерСтрокиТаблицыПоПартиямБУ,"НомерСтрокиТаблицыПоПартиямБУ");
		
		СтрокиПартийВозврата = СокращеннаяТаблицаСФВозвратов.НайтиСтроки(Новый Структура("НомерСтрокиТаблицыПоПартиямБУ",СтрокаВозврата.НомерСтрокиТаблицыПоПартиямБУ));
		
		Если ОтразитьВКнигеПродаж Тогда
		    Если СтруктураШапкиДокумента.НДСВключенВСтоимость И СтруктураШапкиДокумента.ПоставщикуВыставляетсяСчетФактураНаВозврат Тогда
			    // НДС был включен в стоимость а не отражен в книге покупок.
				// Формирование записи в книге продаж не требуется, так как НДС в книге покупок не отражался)
			Иначе
				//Отработка по регистру НДС начисленный возврата поставщику

				СтрокаДвижения = УправлениеЗапасамиПартионныйУчет.ДобавитьДвижениеВСтруктуруПараметров("НДСНачисленный", СтруктураПараметров);
				СтрокаДвижения.Период 		= СтруктураПараметров.Период;
				СтрокаДвижения.Организация	= СтруктураШапкиДокумента.Организация;
				СтрокаДвижения.СчетФактура	= ?(УказанДокументВозврата, СтрокаВозврата.ДокументПартии, СтруктураШапкиДокумента.Ссылка);
				СтрокаДвижения.ВидЦенности	= СтрокаВозврата.ВидЦенности;
				СтрокаДвижения.СтавкаНДС	= СтрокаВозврата.СтавкаНДС;
				СтрокаДвижения.СчетУчетаНДС	= СтрокаВозврата.СчетУчетаНДС;
				СтрокаДвижения.Покупатель	= СтруктураШапкиДокумента.Контрагент;
				СтрокаДвижения.ВидНачисления = ВидНачисления;
				
				СтрокаДвижения.СуммаБезНДС	= СтрокаВозврата.СуммаБезНДС;
				СтрокаДвижения.НДС			= СтрокаВозврата.НДС;
				СтрокаДвижения.Событие		= ?(Не СтруктураШапкиДокумента.ПоставщикуВыставляетсяСчетФактураНаВозврат, 
				                                Перечисления.СобытияПоНДСПродажи.ВосстановлениеНДС,
												Перечисления.СобытияПоНДСПродажи.НДСНачисленКУплате);
				СтрокаДвижения.ВидДвижения	= ВидДвиженияНакопления.Приход;
				// Если возврат отражается как начисления, проводки формируются по таблице начисления
				Если СтруктураШапкиДокумента.ПоставщикуВыставляетсяСчетФактураНаВозврат Тогда
					ПроводкаНДСПоСтроке = ТаблицаПроводокПоНДС.Добавить();
					ЗаполнитьЗначенияСвойств(ПроводкаНДСПоСтроке, СтрокаВозврата);
					ПроводкаНДСПоСтроке.НДС 		= СтрокаВозврата.НДС;
					ПроводкаНДСПоСтроке.НДСВал 		= СтрокаВозврата.КорВалютнаяСуммаНДСЗадолженностиБУ;
				КонецЕсли;
					
			КонецЕсли; 
		ИначеЕсли ?(УказанДокументВозврата,Истина, не СтруктураШапкиДокумента.НДСВключенВСтоимость) Тогда
		// Сторнирование поступления НДС по регистру "НДС предъявленный"
			СтрокаДвижения = УправлениеЗапасамиПартионныйУчет.ДобавитьДвижениеВСтруктуруПараметров("НДСПредъявленный", СтруктураПараметров);
		
			СтрокаДвижения.Период 		= СтруктураПараметров.Период;
			СтрокаДвижения.Организация	= СтруктураШапкиДокумента.Организация;
			СтрокаДвижения.СчетФактура	= ?(УказанДокументВозврата, СтрокаВозврата.ДокументПартии, СтруктураШапкиДокумента.Ссылка);
			СтрокаДвижения.ВидЦенности	= СтрокаВозврата.ВидЦенности;
			СтрокаДвижения.СтавкаНДС	= СтрокаВозврата.СтавкаНДС;
			СтрокаДвижения.СчетУчетаНДС	= СтрокаВозврата.СчетУчетаНДС;
			СтрокаДвижения.Поставщик	= СтруктураШапкиДокумента.Контрагент;
				
			СтрокаДвижения.СуммаБезНДС	= (-1)* СтрокаВозврата.СуммаБезНДС;
			СтрокаДвижения.НДС			= (-1)* СтрокаВозврата.НДС;
			СтрокаДвижения.Событие		= Перечисления.СобытияПоНДСПокупки.ПредъявленНДСПоставщиком;
			СтрокаДвижения.ВидДвижения	= ВидДвиженияНакопления.Приход;
		
		КонецЕсли; 
		
	    Если Не СтруктураШапкиДокумента.ПоставщикуВыставляетсяСчетФактураНаВозврат Тогда
			Для каждого СтрокаПартииВозврата Из СтрокиПартийВозврата Цикл
				
				Если СтрокаПартииВозврата.ПартияСовпадаетСУказаннымДокументомДляВозврата Тогда
					Если не СтрокаПартииВозврата.Количество = 0 тогда
						// По партиеобразующему движению
						Если СтрокаПартииВозврата.НДСвключенВСтоимость Тогда
							Если ОтразитьВКнигеПродаж Тогда
								Если не СтруктураШапкиДокумента.НДСВключенВСтоимость Тогда
									//Отмена отражение возврата поставщику в регистре "НДС начисленный"
									//по строке списаной партии
									СтрокаДвижения = УправлениеЗапасамиПартионныйУчет.ДобавитьДвижениеВСтруктуруПараметров("НДСНачисленный", СтруктураПараметров);
									СтрокаДвижения.Период 		= СтруктураПараметров.Период;
									СтрокаДвижения.Организация	= СтруктураШапкиДокумента.Организация;
									СтрокаДвижения.СчетФактура	= ?(УказанДокументВозврата, СтрокаВозврата.ДокументПартии, СтруктураШапкиДокумента.Ссылка);
									СтрокаДвижения.ВидЦенности	= СтрокаВозврата.ВидЦенности;
									СтрокаДвижения.СтавкаНДС	= СтрокаВозврата.СтавкаНДС;
									СтрокаДвижения.СчетУчетаНДС	= СтрокаВозврата.СчетУчетаНДС;
									СтрокаДвижения.Покупатель	= СтруктураШапкиДокумента.Контрагент;
									СтрокаДвижения.ВидНачисления = Перечисления.НДСВидНачисления.НДСВосстановлен;
										
									СтрокаДвижения.СуммаБезНДС	= (-1)* СтрокаПартииВозврата.СуммаБезНДС;
									СтрокаДвижения.НДС			= (-1)* СтрокаПартииВозврата.НДС;
									СтрокаДвижения.Событие		= Перечисления.СобытияПоНДСПродажи.ВосстановлениеНДС;
									СтрокаДвижения.ВидДвижения	= ВидДвиженияНакопления.Приход;
								 КонецЕсли;
								
							Иначе
								// Сторно расхода по регистру "НДС предъявленный", произведенного при включении НДС в стоимость
								СтрокаДвижения = УправлениеЗапасамиПартионныйУчет.ДобавитьДвижениеВСтруктуруПараметров("НДСПредъявленный", СтруктураПараметров);
								СтрокаДвижения.Период 		= СтруктураПараметров.Период;
								СтрокаДвижения.Организация	= СтруктураШапкиДокумента.Организация;
								СтрокаДвижения.СчетФактура	= СтрокаПартииВозврата.СчетФактура;
								СтрокаДвижения.ВидЦенности	= СтрокаПартииВозврата.ВидЦенности;
								СтрокаДвижения.СтавкаНДС	= СтрокаПартииВозврата.СтавкаНДС;
								СтрокаДвижения.СчетУчетаНДС	= СтрокаПартииВозврата.СчетУчетаНДС;
								СтрокаДвижения.Поставщик	= СтруктураШапкиДокумента.Контрагент;
								
								СтрокаДвижения.СуммаБезНДС	= (-1)* СтрокаПартииВозврата.СуммаБезНДС;
								СтрокаДвижения.НДС			= (-1)* СтрокаПартииВозврата.НДС;
								СтрокаДвижения.Событие		= Перечисления.СобытияПоНДСПокупки.НДСВключенВСтоимость;
								СтрокаДвижения.ВидДвижения	= ВидДвиженияНакопления.Расход;
							
								// Сторнирование записи по регистру "НДС включенный в стоимость" записи, введенной ранее
								СтрокаДвижения = УправлениеЗапасамиПартионныйУчет.ДобавитьДвижениеВСтруктуруПараметров("НДСВключенныйВСтоимость", СтруктураПараметров);
								СтрокаДвижения.Период 		= СтруктураПараметров.Период;
								СтрокаДвижения.Организация	= СтруктураШапкиДокумента.Организация;
								СтрокаДвижения.СчетФактура	= СтрокаПартииВозврата.СчетФактура;
								СтрокаДвижения.ВидЦенности	= СтрокаПартииВозврата.ВидЦенности;
								СтрокаДвижения.СтавкаНДС	= СтрокаПартииВозврата.СтавкаНДС;
								СтрокаДвижения.СчетУчетаНДС	= СтрокаПартииВозврата.СчетУчетаНДС;
								СтрокаДвижения.Поставщик	= СтруктураШапкиДокумента.Контрагент;
								
								СтрокаДвижения.СуммаБезНДС	= (-1)* СтрокаПартииВозврата.СуммаБезНДС;
								СтрокаДвижения.НДС			= (-1)* СтрокаПартииВозврата.НДС;
							КонецЕсли;
								
							// Формирование проводки по НДС не требуется, был включен в стоимость ранее
							ОтработанНДСпоСтроке.НДС = ОтработанНДСпоСтроке.НДС - СтрокаПартииВозврата.НДС;
							ОтработанНДСпоСтроке.СуммаБезНДС = ОтработанНДСпоСтроке.СуммаБезНДС - СтрокаПартииВозврата.СуммаБезНДС;
							
						Иначе
							// Формирование проводки требуется, НДС считаем отработанным
							ОтработанНДСпоСтроке.НДС = ОтработанНДСпоСтроке.НДС - СтрокаПартииВозврата.НДС;
							ОтработанНДСпоСтроке.СуммаБезНДС = ОтработанНДСпоСтроке.СуммаБезНДС - СтрокаПартииВозврата.СуммаБезНДС;
							
							ПроводкаНДСПоСтроке = ТаблицаПроводокПоНДС.Добавить();
							ЗаполнитьЗначенияСвойств(ПроводкаНДСПоСтроке, СтрокаПартииВозврата);
							ПроводкаНДСПоСтроке.Поставщик 	= СтруктураШапкиДокумента.Контрагент;
							
							Если ОтразитьВКнигеПродаж и СтруктураШапкиДокумента.НДСВключенВСтоимость Тогда
								//Отражение возврата поставщику в регистре "НДС начисленный"
								//Не отражался ранее так как предполагалось, что НДС включен в стоимость 
								// (не отражен в книге покупок) и не требует отражения в книге продаж
								СтрокаДвижения = УправлениеЗапасамиПартионныйУчет.ДобавитьДвижениеВСтруктуруПараметров("НДСНачисленный", СтруктураПараметров);
								СтрокаДвижения.Период 		= СтруктураПараметров.Период;
								СтрокаДвижения.Организация	= СтруктураШапкиДокумента.Организация;
								СтрокаДвижения.СчетФактура	= ?(УказанДокументВозврата, СтрокаВозврата.ДокументПартии, СтруктураШапкиДокумента.Ссылка);
								СтрокаДвижения.ВидЦенности	= СтрокаВозврата.ВидЦенности;
								СтрокаДвижения.СтавкаНДС	= СтрокаВозврата.СтавкаНДС;
								СтрокаДвижения.СчетУчетаНДС	= СтрокаВозврата.СчетУчетаНДС;
								СтрокаДвижения.Покупатель	= СтруктураШапкиДокумента.Контрагент;
								СтрокаДвижения.ВидНачисления = Перечисления.НДСВидНачисления.НДСВосстановлен;
										
								СтрокаДвижения.СуммаБезНДС	= СтрокаПартииВозврата.СуммаБезНДС;
								СтрокаДвижения.НДС			= СтрокаПартииВозврата.НДС;
								СтрокаДвижения.Событие		= Перечисления.СобытияПоНДСПродажи.ВосстановлениеНДС;
								СтрокаДвижения.ВидДвижения	= ВидДвиженияНакопления.Приход;
							 КонецЕсли;
							
						КонецЕсли;
					Иначе 
						// По доп. расходам
						Если не СтрокаПартииВозврата.НДСвключенВСтоимость Тогда
							// Если по доп. расходам не производилось включение НДС в стоимость ранее, необходимо сделать это сейчас,
							// так как ценности не используются и не будут использоваться в дальнейшем для деятельности с НДС.
							
							Если Не ОтразитьВКнигеПродаж Тогда
								// Расход по регистру "НДС предъявленный" (включении НДС в стоимость)
								СтрокаДвижения = УправлениеЗапасамиПартионныйУчет.ДобавитьДвижениеВСтруктуруПараметров("НДСПредъявленный", СтруктураПараметров);
								СтрокаДвижения.Период 		= СтруктураПараметров.Период;
								СтрокаДвижения.Организация	= СтруктураШапкиДокумента.Организация;
								СтрокаДвижения.СчетФактура	= СтрокаПартииВозврата.СчетФактура;
								СтрокаДвижения.ВидЦенности	= СтрокаПартииВозврата.ВидЦенности;
								СтрокаДвижения.СтавкаНДС	= СтрокаПартииВозврата.СтавкаНДС;
								СтрокаДвижения.СчетУчетаНДС	= СтрокаПартииВозврата.СчетУчетаНДС;
								СтрокаДвижения.Поставщик	= СтрокаПартииВозврата.Поставщик;
								
								СтрокаДвижения.СуммаБезНДС	= СтрокаПартииВозврата.СуммаБезНДС;
								СтрокаДвижения.НДС			= СтрокаПартииВозврата.НДС;
								СтрокаДвижения.Событие		= Перечисления.СобытияПоНДСПокупки.НДСВключенВСтоимость;
								СтрокаДвижения.ВидДвижения	= ВидДвиженияНакопления.Расход;
							
								ПроводкаНДСПоСтроке = ТаблицаПроводокПоНДС.Добавить();
								ЗаполнитьЗначенияСвойств(ПроводкаНДСПоСтроке, СтрокаПартииВозврата);
								
								// Формирование записи по регистру "НДС включенный в стоимость"
								СтрокаДвижения = УправлениеЗапасамиПартионныйУчет.ДобавитьДвижениеВСтруктуруПараметров("НДСВключенныйВСтоимость", СтруктураПараметров);
								СтрокаДвижения.Период 		= СтруктураПараметров.Период;
								СтрокаДвижения.Организация	= СтруктураШапкиДокумента.Организация;
								СтрокаДвижения.СчетФактура	= СтрокаПартииВозврата.СчетФактура;
								СтрокаДвижения.ВидЦенности	= СтрокаПартииВозврата.ВидЦенности;
								СтрокаДвижения.СтавкаНДС	= СтрокаПартииВозврата.СтавкаНДС;
								СтрокаДвижения.СчетУчетаНДС	= СтрокаПартииВозврата.СчетУчетаНДС;
								СтрокаДвижения.Поставщик	= СтрокаПартииВозврата.Поставщик;
								
								СтрокаДвижения.СуммаБезНДС	= СтрокаПартииВозврата.СуммаБезНДС;
								СтрокаДвижения.НДС			= СтрокаПартииВозврата.НДС;
							КонецЕсли;

						КонецЕсли;
					КонецЕсли;
				иначе //не Если СтрокаПартииВозврата.ПартияСовпадаетСУказаннымДокументомДляВозврата
					
					// Спсываем другую партию. Включение в стоимость по флагу документа "НДС включен в стоимость"
					Если не СтрокаПартииВозврата.НДСвключенВСтоимость = СтруктураШапкиДокумента.НДСвключенВСтоимость Тогда
						ЗнакОперации = ?(СтруктураШапкиДокумента.НДСвключенВСтоимость,1,-1);// 1 включение; -1 исключение
						
						// Движение по регистру "НДС предъявленный"
						Если Не ОтразитьВКнигеПродаж Тогда
							СтрокаДвижения = УправлениеЗапасамиПартионныйУчет.ДобавитьДвижениеВСтруктуруПараметров("НДСПредъявленный", СтруктураПараметров);
							СтрокаДвижения.Период 		= СтруктураПараметров.Период;
							СтрокаДвижения.Организация	= СтруктураШапкиДокумента.Организация;
							СтрокаДвижения.СчетФактура	= СтрокаПартииВозврата.СчетФактура;
							СтрокаДвижения.ВидЦенности	= СтрокаПартииВозврата.ВидЦенности;
							СтрокаДвижения.СтавкаНДС	= СтрокаПартииВозврата.СтавкаНДС;
							СтрокаДвижения.СчетУчетаНДС	= СтрокаПартииВозврата.СчетУчетаНДС;
							СтрокаДвижения.Поставщик	= СтрокаПартииВозврата.Поставщик;
							
							СтрокаДвижения.Событие		= Перечисления.СобытияПоНДСПокупки.НДСВключенВСтоимость;
							
							СтрокаДвижения.СуммаБезНДС	= ЗнакОперации * СтрокаПартииВозврата.СуммаБезНДС;
							СтрокаДвижения.НДС			= ЗнакОперации * СтрокаПартииВозврата.НДС;
							
							СтрокаДвижения.ВидДвижения	= ВидДвиженияНакопления.Расход;
							
							ПроводкаНДСПоСтроке = ТаблицаПроводокПоНДС.Добавить();
							ЗаполнитьЗначенияСвойств(ПроводкаНДСПоСтроке, СтрокаПартииВозврата);
							Если не ЗнакОперации = 1 Тогда
								ПроводкаНДСПоСтроке.НДС 		= ЗнакОперации * СтрокаПартииВозврата.НДС;
							КонецЕсли; 
							
						
							// Формирование записи по регистру "НДС включенный в стоимость"
							СтрокаДвижения = УправлениеЗапасамиПартионныйУчет.ДобавитьДвижениеВСтруктуруПараметров("НДСВключенныйВСтоимость", СтруктураПараметров);
							СтрокаДвижения.Период 		= СтруктураПараметров.Период;
							СтрокаДвижения.Организация	= СтруктураШапкиДокумента.Организация;
							СтрокаДвижения.СчетФактура	= СтрокаПартииВозврата.СчетФактура;
							СтрокаДвижения.ВидЦенности	= СтрокаПартииВозврата.ВидЦенности;
							СтрокаДвижения.СтавкаНДС	= СтрокаПартииВозврата.СтавкаНДС;
							СтрокаДвижения.СчетУчетаНДС	= СтрокаПартииВозврата.СчетУчетаНДС;
							СтрокаДвижения.Поставщик	= СтрокаПартииВозврата.Поставщик;
								
							СтрокаДвижения.СуммаБезНДС	= ЗнакОперации * СтрокаПартииВозврата.СуммаБезНДС;
							СтрокаДвижения.НДС			= ЗнакОперации * СтрокаПартииВозврата.НДС;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла; 
			
			Если не ОтработанНДСпоСтроке.НДС =0 или не ОтработанНДСпоСтроке.СуммаБезНДС = 0 тогда
				// Не вся сумма НДС по строке отработана
				Если УказанДокументВозврата Тогда
					Если СтруктураШапкиДокумента.НДСвключенВСтоимость Тогда
						// Необходимо отменить включение НДС в стоимость по указанному документу
						// Формирование проводки не требуется
						ЗнакОперации = -1;// 1 включение; -1 исключение
						
						Если Не ОтразитьВКнигеПродаж Тогда
							// Движение по регистру "НДС предъявленный"
							СтрокаДвижения = УправлениеЗапасамиПартионныйУчет.ДобавитьДвижениеВСтруктуруПараметров("НДСПредъявленный", СтруктураПараметров);
							СтрокаДвижения.Период 		= СтруктураПараметров.Период;
							СтрокаДвижения.Организация	= СтруктураШапкиДокумента.Организация;
							СтрокаДвижения.СчетФактура	= СтрокаВозврата.ДокументПартии;
							СтрокаДвижения.ВидЦенности	= СтрокаВозврата.ВидЦенности;
							СтрокаДвижения.СтавкаНДС	= СтрокаВозврата.СтавкаНДС;
							СтрокаДвижения.СчетУчетаНДС	= СтрокаВозврата.СчетУчетаНДС;
							СтрокаДвижения.Поставщик	= СтруктураШапкиДокумента.Контрагент;
							
							СтрокаДвижения.Событие		= Перечисления.СобытияПоНДСПокупки.НДСВключенВСтоимость;
							
							СтрокаДвижения.СуммаБезНДС	= ЗнакОперации * ОтработанНДСпоСтроке.СуммаБезНДС;
							СтрокаДвижения.НДС			= ЗнакОперации * ОтработанНДСпоСтроке.НДС;
							
							СтрокаДвижения.ВидДвижения	= ВидДвиженияНакопления.Расход;
							
							// Формирование записи по регистру "НДС включенный в стоимость"
							СтрокаДвижения = УправлениеЗапасамиПартионныйУчет.ДобавитьДвижениеВСтруктуруПараметров("НДСВключенныйВСтоимость", СтруктураПараметров);
							СтрокаДвижения.Период 		= СтруктураПараметров.Период;
							СтрокаДвижения.Организация	= СтруктураШапкиДокумента.Организация;
							СтрокаДвижения.СчетФактура	= СтрокаВозврата.ДокументПартии;
							СтрокаДвижения.ВидЦенности	= СтрокаВозврата.ВидЦенности;
							СтрокаДвижения.СтавкаНДС	= СтрокаВозврата.СтавкаНДС;
							СтрокаДвижения.СчетУчетаНДС	= СтрокаВозврата.СчетУчетаНДС;
							СтрокаДвижения.Поставщик	= СтруктураШапкиДокумента.Контрагент;
								
							СтрокаДвижения.СуммаБезНДС	= ЗнакОперации * ОтработанНДСпоСтроке.СуммаБезНДС;
							СтрокаДвижения.НДС			= ЗнакОперации * ОтработанНДСпоСтроке.НДС;
						КонецЕсли;
					Иначе
						Если не ОтработанНДСпоСтроке.НДС = 0 Тогда
							// Требуется проводка по отнесению НДС на счет расчетов по претензиям
							ПроводкаНДСПоСтроке = ТаблицаПроводокПоНДС.Добавить();
							ЗаполнитьЗначенияСвойств(ПроводкаНДСПоСтроке, СтрокаВозврата);
							
							ПроводкаНДСПоСтроке.СчетФактура	= СтрокаВозврата.ДокументПартии;
							ПроводкаНДСПоСтроке.Поставщик 	= СтруктураШапкиДокумента.Контрагент;
							ПроводкаНДСПоСтроке.НДС 		= ОтработанНДСпоСтроке.НДС;
						КонецЕсли; 
					КонецЕсли; 
				Иначе //не Если УказанДокументВозврата Тогда
					Если СтруктураШапкиДокумента.НДСвключенВСтоимость Тогда
						// НДС был включен в стоимость, но формирование сторнирующих записей по регситрам не требуется,
						// так как не был документ для списания, а по возврату записей в регистре НДС включенный в стоимость нет
						// Формирование проводки не требуется
					Иначе
						Если не ОтработанНДСпоСтроке.НДС = 0 Тогда
							// Требуется проводка по отнесению НДС на счет расчетов по претензиям
							ПроводкаНДСПоСтроке = ТаблицаПроводокПоНДС.Добавить();
							ЗаполнитьЗначенияСвойств(ПроводкаНДСПоСтроке, СтрокаВозврата);
							
							ПроводкаНДСПоСтроке.СчетФактура	= СтруктураШапкиДокумента.Ссылка;
							ПроводкаНДСПоСтроке.Поставщик 	= СтруктураШапкиДокумента.Контрагент;
							ПроводкаНДСПоСтроке.НДС 		= ОтработанНДСпоСтроке.НДС;
						КонецЕсли; 
					КонецЕсли; 
				КонецЕсли; 
			КонецЕсли; 
			
			// Сторнируем начисление агентского НДС.
			Если СтруктураШапкиДокумента.УчетАгентскогоНДС Тогда
				 
				СтрокаДвижений_НДСНачисленный = УправлениеЗапасамиПартионныйУчет.ДобавитьДвижениеВСтруктуруПараметров("НДСНачисленный", СтруктураПараметров);
				
				СтрокаДвижений_НДСНачисленный.Период 		= СтруктураПараметров.Период;
				СтрокаДвижений_НДСНачисленный.Организация	= СтруктураШапкиДокумента.Организация;
				СтрокаДвижений_НДСНачисленный.Покупатель	= СтруктураШапкиДокумента.Контрагент;
				СтрокаДвижений_НДСНачисленный.СчетФактура	= ?(УказанДокументВозврата, СтрокаВозврата.ДокументПартии, СтруктураШапкиДокумента.Ссылка);
				СтрокаДвижений_НДСНачисленный.ВидЦенности	= СтрокаВозврата.ВидЦенности;
				СтрокаДвижений_НДСНачисленный.СтавкаНДС		= СтрокаВозврата.СтавкаНДС;
				СтрокаДвижений_НДСНачисленный.ВидНачисления = Перечисления.НДСВидНачисления.НДСНачисленКУплате;
				
				СтрокаДвижений_НДСНачисленный.СуммаБезНДС	= (-1)* СтрокаВозврата.СуммаБезНДС;
				СтрокаДвижений_НДСНачисленный.НДС			= (-1)* СтрокаВозврата.НДС;
				
				СтрокаДвижений_НДСНачисленный.Событие 		= Перечисления.СобытияПоНДСПродажи.НДСНачисленКУплате;
				СтрокаДвижений_НДСНачисленный.ДатаСобытия 	= СтруктураШапкиДокумента.Дата;
				
				СтрокаДвижений_НДСНачисленный.ВидДвижения	= ВидДвиженияНакопления.Приход;
				
				СтрокаДвижений_НДСНачисленный.СчетУчетаНДС	= СчетНДС;
				
				// Формирование проводки по сторнированию начисления НДС при исп. обязанностей налогового агента
				Проводка =  СтруктураПараметров.ДвиженияХозрасчетный.Добавить();
				
				Проводка.Период = СтруктураПараметров.Период;
				Проводка.Организация = СтруктураШапкиДокумента.Организация;
				Проводка.Сумма = СтрокаВозврата.НДС;
				Проводка.СписаниеПартий = Истина;
				Проводка.НДСПродукции = Истина;
				Проводка.Содержание = "Сторнирован НДС, начисленный в качестве налогового агента";
				
				Проводка.СчетДт = СчетНДС;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ВидыПлатежейВГосБюджет", Перечисления.ВидыПлатежейВГосБюджет.Налог);

				Проводка.СчетКт = СтруктураШапкиДокумента.СчетУчетаРасчетовПоПретензиям;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Договоры", 	СтруктураШапкиДокумента.ДоговорКонтрагента);
					
				Если Проводка.СчетКт.Валютный Тогда
					Если не СтруктураШапкиДокумента.Свойство("ВалютаВзаиморасчетов") Тогда
						СтруктураШапкиДокумента.Вставить("ВалютаВзаиморасчетов",СтруктураШапкиДокумента.ДоговорКонтрагента.ВалютаВзаиморасчетов);
					КонецЕсли; 
					
					Проводка.ВалютаКт = СтруктураШапкиДокумента.ВалютаВзаиморасчетов;
					Проводка.ВалютнаяСуммаКт = СтрокаВозврата.КорВалютнаяСуммаНДСЗадолженностиБУ;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла; 
	
	Если ОтразитьВКнигеПродаж и СтруктураПараметров.ТаблицаДвиженийНДСНачисленный.Количество()>1 Тогда
		ТаблицаДвижений_НДСНачисленный = СтруктураПараметров.ТаблицаДвиженийНДСНачисленный;
		// Сворачивание записей регистра "НДС Начисленный"
		СуммовыеКолонки = "СуммаБезНДС, НДС";
		ГруппировочныеКолонки = "";
		Для каждого Колонка Из ТаблицаДвижений_НДСНачисленный.Колонки Цикл
			Если Колонка.Имя = "СуммаБезНДС" или Колонка.Имя = "НДС" Тогда
				Продолжить;
			Иначе
				ГруппировочныеКолонки = ГруппировочныеКолонки + Колонка.Имя+ ",";
			КонецЕсли; 
		КонецЦикла;
		ГруппировочныеКолонки = Лев(ГруппировочныеКолонки, СтрДлина(ГруппировочныеКолонки)-1);
			
		ТаблицаДвижений_НДСНачисленный.Свернуть(ГруппировочныеКолонки,СуммовыеКолонки); 
			
		// Удаление записей с пустыми суммами
		СтрокиКУдалению =  ТаблицаДвижений_НДСНачисленный.НайтиСтроки(Новый Структура("СуммаБезНДС, НДС",0,0));
		Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
			ТаблицаДвижений_НДСНачисленный.Удалить(СтрокаКУдалению);
		КонецЦикла; 
	КонецЕсли; 

	//Формирование проводок по отнесению НДС на счет расчетов по претензиям
	НомерСтрокиТаблицыПоПартиямБУ = 0;
	Коэффициент = 0;
	
	Если Не СтруктураШапкиДокумента.ПоставщикуВыставляетсяСчетФактураНаВозврат Тогда
		ТаблицаПроводокПоНДС.Свернуть("НомерСтрокиДокумента, НомерСтрокиТаблицыПоПартиямБУ, Поставщик, СчетФактура, СчетУчетаНДС","НДС, НДСВал");
	Иначе
		ТаблицаПроводокПоНДС.Свернуть("НомерСтрокиДокумента","НДС, НДСВал");
	КонецЕсли;
	
	Для каждого СтрокаТЧ Из ТаблицаПроводокПоНДС Цикл
	    Если СтрокаТЧ.НДС =0 Тогда
			Продолжить;
		КонецЕсли; 
		Проводка =  СтруктураПараметров.ДвиженияХозрасчетный.Добавить();

		Проводка.Период = СтруктураПараметров.Период;
		Проводка.Организация = СтруктураШапкиДокумента.Организация;
		Проводка.Содержание = "Возврат поставщику";
		Проводка.СписаниеПартий = Истина;
		Проводка.НДСПродукции = Истина;
		Проводка.Сумма = СтрокаТЧ.НДС;

		Проводка.СчетДт = СтруктураШапкиДокумента.СчетУчетаРасчетовПоПретензиям;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Контрагенты", СтруктураШапкиДокумента.Контрагент);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Договоры", СтруктураШапкиДокумента.ДоговорКонтрагента);
			
		Если Не СтруктураШапкиДокумента.ПоставщикуВыставляетсяСчетФактураНаВозврат Тогда

			Если Проводка.СчетДт.Валютный Тогда
				Если не СтруктураШапкиДокумента.Свойство("ВалютаВзаиморасчетов") Тогда
					СтруктураШапкиДокумента.Вставить("ВалютаВзаиморасчетов",СтруктураШапкиДокумента.ДоговорКонтрагента.ВалютаВзаиморасчетов);
				КонецЕсли; 
				Проводка.ВалютаДт = СтруктураШапкиДокумента.ВалютаВзаиморасчетов;
				Если СтруктураШапкиДокумента.ВалютаВзаиморасчетов = СтруктураШапкиДокумента.ВалютаРегламентированногоУчета Тогда
					Проводка.ВалютнаяСуммаДт = Проводка.Сумма;
				Иначе
					Если не НомерСтрокиТаблицыПоПартиямБУ = СтрокаТЧ.НомерСтрокиТаблицыПоПартиямБУ Тогда
						НомерСтрокиТаблицыПоПартиямБУ = СтрокаТЧ.НомерСтрокиТаблицыПоПартиямБУ;
						СтрокаТаблицыПоПартиямБУ = ТаблицаПоПартиямБУ.Найти(НомерСтрокиТаблицыПоПартиямБУ,"НомерСтрокиТаблицыПоПартиямБУ");
						Если не СтрокаТаблицыПоПартиямБУ.НДС = 0 Тогда
							Коэффициент = ?(СтрокаТаблицыПоПартиямБУ.КорВалютнаяСуммаНДСЗадолженностиБУ =0,1,СтрокаТаблицыПоПартиямБУ.КорВалютнаяСуммаНДСЗадолженностиБУ/СтрокаТаблицыПоПартиямБУ.НДС);
						Иначе
							Коэффициент = ?(СтрокаТаблицыПоПартиямБУ.КорВалютнаяСуммаЗадолженностиБУ =0 или СтрокаТаблицыПоПартиямБУ.СуммаЗадолженностиБУ = 0,1,СтрокаТаблицыПоПартиямБУ.КорВалютнаяСуммаЗадолженностиБУ/СтрокаТаблицыПоПартиямБУ.СуммаЗадолженностиБУ);
						КонецЕсли; 
					КонецЕсли; 
					Проводка.ВалютнаяСуммаДт = Окр(Проводка.Сумма*Коэффициент,2);
				КонецЕсли; 
				
				СтрокаТЧ.НДСВал = Проводка.ВалютнаяСуммаДт;
			КонецЕсли;
				
			Проводка.СчетКт = СтрокаТЧ.СчетУчетаНДС;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Контрагенты",     СтрокаТЧ.Поставщик);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"СФПолученные",    СтрокаТЧ.СчетФактура);
			
		Иначе
			Если Проводка.СчетДт.Валютный Тогда
				Если не СтруктураШапкиДокумента.Свойство("ВалютаВзаиморасчетов") Тогда
					СтруктураШапкиДокумента.Вставить("ВалютаВзаиморасчетов",СтруктураШапкиДокумента.ДоговорКонтрагента.ВалютаВзаиморасчетов);
				КонецЕсли;
				
				Проводка.ВалютаДт = СтруктураШапкиДокумента.ВалютаВзаиморасчетов;
				Если СтруктураШапкиДокумента.ВалютаВзаиморасчетов = СтруктураШапкиДокумента.ВалютаРегламентированногоУчета Тогда
					Проводка.ВалютнаяСуммаДт = Проводка.Сумма;
				Иначе
					Проводка.ВалютнаяСуммаДт = СтрокаТЧ.НДСВал;
				КонецЕсли; 
			КонецЕсли;
			
			Проводка.СчетКт = ПланыСчетов.Хозрасчетный.НДС;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ВидыПлатежейВГосБюджет", Перечисления.ВидыПлатежейВГосБюджет.Налог);
		КонецЕсли;
	
	КонецЦикла;
	
	ВозвратНДС = ТаблицаПроводокПоНДС.Итог("НДС");
	ВозвратНДСВал = ТаблицаПроводокПоНДС.Итог("НДСВал");
	
	СтруктураПараметров.Вставить("ВозвратНДС",   ВозвратНДС);
	СтруктураПараметров.Вставить("ВозвратНДСВал",ВозвратНДСВал);
	
	Если СтруктураШапкиДокумента.УчетАгентскогоНДС И Не СтруктураШапкиДокумента.ПоставщикуВыставляетсяСчетФактураНаВозврат Тогда
		ПроводкаНДСПоСтроке = ТаблицаПроводокПоНДС.Добавить();
		//ПроводкаНДСПоСтроке.НомерСтрокиТаблицыПоПартиямБУ = СтрокаВозврата.НомерСтрокиТаблицыПоПартиямБУ;
		//ПроводкаНДСПоСтроке.СчетФактура	= СтрокаВозврата.ДокументПартии;
		//ПроводкаНДСПоСтроке.Поставщик 	= СтруктураШапкиДокумента.Контрагент;
		ПроводкаНДСПоСтроке.НДС 		= (-1) * ТаблицаПоПартиямБУ.Итог("НДС");
		
		Если СтруктураШапкиДокумента.СчетУчетаРасчетовПоПретензиям.Валютный Тогда
			ПроводкаНДСПоСтроке.НДСВал 		= (-1) * ТаблицаПоПартиямБУ.Итог("КорВалютнаяСуммаНДСЗадолженностиБУ");
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ДвиженияПоРегистрамПодсистемыНДС()

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ, ФОРМИРУЮЩИЕ СТРУКТУРУ ДАННЫХ ДЛЯ ПЕРЕДАЧИ В УЧЕТ НДС

Процедура ОпределитьСоставКолонокТаблицаСписанныхПартийНДС(СтруктураПараметров, СписокИспользуемыхОпераций, СтруктураКолонок, СписаниеОС = Ложь) Экспорт
	
	КодыОпераций = СтруктураПараметров.КодыОпераций;
	//**************************************************
	// Возможно получение информации из шапки документа
	СтруктураКолонок.Вставить("Организация");
	СтруктураКолонок.Вставить("ДоговорКонтрагента");
	СтруктураКолонок.Вставить("ОтражатьВБухгалтерскомУчете");
	СтруктураКолонок.Вставить("ОтражатьВНалоговомУчете");
	// Возможно получение информации из шапки документа
	//**************************************************
	
	СтруктураКолонок.Вставить("Движение"); // Часть информации о проведении получается из параметров движения списанной партии
	СтруктураКолонок.Вставить("НомерСтрокиДокумента"); 
	//СтруктураКолонок.Вставить("СчетУчета");
	СтруктураКолонок.Вставить("Номенклатура");
	СтруктураКолонок.Вставить("ВидЦенности");// ? Вид ценности, определенный в документе для начисления
	СтруктураКолонок.Вставить("Склад");
	СтруктураКолонок.Вставить("Количество", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
	СтруктураКолонок.Вставить("Стоимость", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	СтруктураКолонок.Вставить("КорСчетБУ");
	СтруктураКолонок.Вставить("СчетДоходовБУ");
	
	СтруктураКолонок.Вставить("СуммаЗадолженностиБУ");
	СтруктураКолонок.Вставить("КорВалютнаяСуммаНДСЗадолженностиБУ");// Возврат поставщику, НА Комитент
	СтруктураКолонок.Вставить("СуммаНДС");
	СтруктураКолонок.Вставить("СтавкаНДС");
	
	СтруктураКолонок.Вставить("СтатьяЗатрат"); 
	
	// Для парт.учета и ОС (если не ведется сложный учет НДС)
	СтруктураКолонок.Вставить("СтатьяЗатратНДС");
	СтруктураКолонок.Вставить("НазначениеИспользования"); // Для передачи материалов в экспл.
	СтруктураКолонок.Вставить("СчетРасходовБУ"); // Возврат от покупателя
	СтруктураКолонок.Вставить("НоменклатурнаяГруппа");
	СтруктураКолонок.Вставить("ПодразделениеОрганизации");
	СтруктураКолонок.Вставить("НомерКорСтроки");
	
	
	СтруктураКолонок.Вставить("ВидТабличнойЧасти");// Для анализа отражения в НДС
	СтруктураКолонок.Вставить("КодОперацииПартииТоваров");// Для анализа отражения в НДС
	
	СтруктураКолонок.Вставить("ДокументОприходования");
	
	// Колонки по набору условий
	
	//***************************************************
	// Возврат поставщику
	Если НЕ СписокИспользуемыхОпераций.НайтиПоЗначению(КодыОпераций.ВозвратПоставщику) = НЕОПРЕДЕЛЕНО Тогда
	
		//СтруктураКолонок.Вставить("НомерСтроки"); // Возврат поставщику = НомерСтрокиТаблицыПоПартиямБУ
		СтруктураКолонок.Вставить("КорВалютнаяСуммаЗадолженностиБУ");
		СтруктураКолонок.Вставить("СчетУчетаНДС");
		//СтруктураКолонок.Вставить("ДокументПартии");
		СтруктураКолонок.Вставить("КорСчетЗадолженностиБУ");
		СтруктураКолонок.Вставить("КорСубконтоЗадолженностиБУ1");
		СтруктураКолонок.Вставить("КорСубконтоЗадолженностиБУ2");
		СтруктураКолонок.Вставить("КорСубконтоЗадолженностиБУ3");
		
	КонецЕсли;
	// Возврат поставщику
	//***************************************************
	
	
	//***************************************************
	// Возврат от пукумателя
	Если НЕ СписокИспользуемыхОпераций.НайтиПоЗначению(КодыОпераций.ВозвратОтПокупателя) = НЕОПРЕДЕЛЕНО Тогда
		СтруктураКолонок.Вставить("СубконтоБУ");
		СтруктураКолонок.Вставить("КорСубконтоБУ2");
	КонецЕсли;	
	// Возврат от пукумателя
	//***************************************************
	
	//***************************************************
	// Сложный учет НДС
	СтруктураКолонок.Вставить("Партия");
	СтруктураКолонок.Вставить("ДокументПартии");
	СтруктураКолонок.Вставить("ДокументПередачи");
	СтруктураКолонок.Вставить("ВестиПартионныйУчетПоСериям"); // Для парт.учета и ОС (если не ведется сложный учет НДС)
	СтруктураКолонок.Вставить("СерияНоменклатуры"); // Для парт.учета и ОС (если не ведется сложный учет НДС)
	СтруктураКолонок.Вставить("ХарактеристикаНоменклатуры"); // Для парт.учета и ОС (если не ведется сложный учет НДС)
	СтруктураКолонок.Вставить("ЗаказПартии"); // Для парт.учета и ОС (если не ведется сложный учет НДС)
	СтруктураКолонок.Вставить("ОбъектСтроительства"); // Для передачи оборудования в монтаж
	
	Если СтруктураПараметров.ТипЗначенияРегистратора = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") Тогда
		СтруктураКолонок.Вставить("СчетФактура");
		СтруктураКолонок.Вставить("Покупатель");
		СтруктураКолонок.Вставить("ДатаСФ");
		СтруктураКолонок.Вставить("ВыставленСФ");
	КонецЕсли;
	
	Если УправлениеЗапасамиПартионныйУчет.ПолучитьПараметрУчетнойПолитикиПартионногоУчета("СложныйУчетНДС", "Нал", СтруктураПараметров) = истина 
	  Или (Не СписокИспользуемыхОпераций.НайтиПоЗначению(КодыОпераций.ПринятиеКУчетуОС) = Неопределено) 
	  Или СписаниеОС
	  Тогда
		
		//СтруктураКолонок.Вставить("ОбособленныйУчетТоваровПоЗаказамПокупателей"); // Для парт.учета 
		
		//***************************************************
		// Включение НДС в стоимость/Исключение из стоимости, косвенные расходы и производство
		СтруктураКолонок.Вставить("ЗаказСписания"); // Для парт.учета
		
		//СтруктураКолонок.Вставить("КорСчетБУ");
		СтруктураКолонок.Вставить("КорСубконтоБУ1");
		СтруктураКолонок.Вставить("КорСубконтоБУ2");
		СтруктураКолонок.Вставить("КорСубконтоБУ3");
		
		СтруктураКолонок.Вставить("СчетУчетаНУ");
		СтруктураКолонок.Вставить("КорСчетНУ");
		СтруктураКолонок.Вставить("КорСубконтоНУ1");
		СтруктураКолонок.Вставить("КорСубконтоНУ2");
		СтруктураКолонок.Вставить("КорСубконтоНУ3");
		СтруктураКолонок.Вставить("ПостояннаяРазница");
		СтруктураКолонок.Вставить("ВременнаяРазница");
		
		// Включение НДС в стоимость/Исключение из стоимости, косвенные расходы и производство
		//***************************************************
		
		//*****************************
		// Для последующего поступления
		Если НЕ СписокИспользуемыхОпераций.НайтиПоЗначению(КодыОпераций.ВозвратОтКомиссионера) = неопределено
			ИЛИ НЕ СписокИспользуемыхОпераций.НайтиПоЗначению(КодыОпераций.ВозвратОтПереработчика) = неопределено
			ИЛИ НЕ СписокИспользуемыхОпераций.НайтиПоЗначению(КодыОпераций.ВозвратОтПокупателя) = неопределено
			ИЛИ НЕ СписокИспользуемыхОпераций.НайтиПоЗначению(КодыОпераций.ВыпускПоОперацииСтоимость) = неопределено
			ИЛИ НЕ СписокИспользуемыхОпераций.НайтиПоЗначению(КодыОпераций.ВыпускПродукцииФиксНаСклад) = неопределено
			ИЛИ НЕ СписокИспользуемыхОпераций.НайтиПоЗначению(КодыОпераций.Комплектация) = неопределено
			ИЛИ НЕ СписокИспользуемыхОпераций.НайтиПоЗначению(КодыОпераций.КорректировкаСерийИХарактеристик) = неопределено
			ИЛИ НЕ СписокИспользуемыхОпераций.НайтиПоЗначению(КодыОпераций.ПередачаВПереработку) = неопределено
			ИЛИ НЕ СписокИспользуемыхОпераций.НайтиПоЗначению(КодыОпераций.ПередачаНаКомиссию) = неопределено
			ИЛИ НЕ СписокИспользуемыхОпераций.НайтиПоЗначению(КодыОпераций.ПеремещениеМеждуСкладами) = неопределено
			ИЛИ НЕ СписокИспользуемыхОпераций.НайтиПоЗначению(КодыОпераций.РезервированиеПодЗаказ) = неопределено
			ИЛИ НЕ СписокИспользуемыхОпераций.НайтиПоЗначению(КодыОпераций.СнятиеРезерваПодЗаказ) = неопределено
			ИЛИ НЕ СписокИспользуемыхОпераций.НайтиПоЗначению(КодыОпераций.ВключениеАктиваВСоставМПЗ) = неопределено
			ИЛИ НЕ СписокИспользуемыхОпераций.НайтиПоЗначению(КодыОпераций.СписаниеПоОрдеру) = неопределено
			Тогда
			////СтруктураКолонок.Вставить("ОбособленныйУчетТоваровПоЗаказамПокупателейПоступление"); // Для парт.учета . Поступление
			СтруктураКолонок.Вставить("ИзменитьСклад");// Для парт.учета . Поступление
			СтруктураКолонок.Вставить("СкладПолучатель");// Для парт.учета . Поступление
			СтруктураКолонок.Вставить("КоличествоПоступление");// Для парт.учета . Поступление
			СтруктураКолонок.Вставить("СтоимостьПоступление");// Для парт.учета . Поступление
			СтруктураКолонок.Вставить("НоменклатураНовая");// Для парт.учета . Поступление
			СтруктураКолонок.Вставить("ИзменитьСерию");// Для парт.учета . Поступление
			СтруктураКолонок.Вставить("ИзменитьХарактеристику");// Для парт.учета . Поступление
			СтруктураКолонок.Вставить("СерияНоменклатурыНовая"); // Для парт.учета . Поступление
			СтруктураКолонок.Вставить("ХарактеристикаНоменклатурыНовая"); // Для парт.учета . Поступление
			СтруктураКолонок.Вставить("ДокументОприходованияНовый");
			СтруктураКолонок.Вставить("Качество");// Включение НДС в стоимость/Исключение из стоимости . Поступление
			СтруктураКолонок.Вставить("КачествоНовое");// Включение НДС в стоимость/Исключение из стоимости . Поступление

		КонецЕсли; 
		// Для последующего поступления
		//*****************************
	КонецЕсли; 
	// Сложный учет НДС
	//***************************************************
	
КонецПроцедуры

Функция ПолучитьТаблицуПартийПоДокументу(СтруктураПараметров, ТаблицаСписания)
	
	// Партии могут списываться из регистров ПартииТоваровНаСкладахБухгалтерскийУчет и ПартииТоваровПереданныеБухгалтерскийУчет
	// Отберем из соответствующих таблиц партии с видом движения "расход"
	
	КодыОпераций = Перечисления.КодыОперацийПартииТоваров;
	
	ТаблицаПартий = СтруктураПараметров.ТаблицаДвиженийПартииТоваровНаСкладахБух.СкопироватьКолонки();
	ТаблицаПартий.Колонки.Добавить("РегистрУчета");
	Для каждого СтрокаПартииНаСкладах из ТаблицаСписания Цикл
		CтрокаПартии = ТаблицаПартий.Добавить();
		ЗаполнитьЗначенияСвойств(CтрокаПартии,СтрокаПартииНаСкладах);
		
		CтрокаПартии.ВидДвижения = ВидДвиженияНакопления.Расход;
		
		CтрокаПартии.КодОперации = СтрокаПартииНаСкладах.КодОперацииПартииТоваров;
		CтрокаПартии.СчетУчета =  СтрокаПартииНаСкладах.СчетУчетаБУ;
		
		CтрокаПартии.КорСубконто1 =  СтрокаПартииНаСкладах.КорСубконтоБУ1;
		CтрокаПартии.КорСубконто2 =  СтрокаПартииНаСкладах.КорСубконтоБУ2;
		CтрокаПартии.КорСубконто3 =  СтрокаПартииНаСкладах.КорСубконтоБУ3;
	КонецЦикла;
	
	Возврат ТаблицаПартий;
	
КонецФункции

Функция ПреобразоватьТаблицуСписанныхПартийДляНДС(СтруктураПараметров)
	
	Перем ВидыЦенностейПоСчетамУчета;
	
	СоответствиеЗаказов = Новый Соответствие;
	
	КодыОпераций = Перечисления.КодыОперацийПартииТоваров;
	
	СписокИспользуемыхОпераций = Новый СписокЗначений;
	СписокИспользуемыхОпераций.ЗагрузитьЗначения(ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(СтруктураПараметров.ТаблицаСписанныхПартий.ВыгрузитьКолонку("КодОперацииПартииТоваров"),Истина, Истина));
	
	ЕстьСложныйУчетНДС = (УправлениеЗапасамиПартионныйУчет.ПолучитьПараметрУчетнойПолитикиПартионногоУчета("СложныйУчетНДС", "Нал", СтруктураПараметров) = Истина);
		
	СписаниеОС = Ложь;
	Если Не ЕстьСложныйУчетНДС Тогда
		Для Каждого СтрокаСписания Из СтруктураПараметров.ТаблицаСписанныхПартий Цикл
			Если СтрокаСписания.СчетУчетаБУ = ПланыСчетов.Хозрасчетный.ОборудованиеКУстановке
			Или СтрокаСписания.СчетУчетаБУ.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ОборудованиеКУстановке)
			Или СтрокаСписания.СчетУчетаБУ = ПланыСчетов.Хозрасчетный.ПриобретениеОбъектовОсновныхСредств
			Или СтрокаСписания.СчетУчетаБУ.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ПриобретениеОбъектовОсновныхСредств) Тогда
				СписаниеОС = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Определение состава колонок 
	БазоваяСтруктураКолонок = Новый Структура;
	ОпределитьСоставКолонокТаблицаСписанныхПартийНДС(СтруктураПараметров, СписокИспользуемыхОпераций, БазоваяСтруктураКолонок, СписаниеОС);
	
	ЕстьВозвратПоставщику	= (НЕ СписокИспользуемыхОпераций.НайтиПоЗначению(КодыОпераций.ВозвратПоставщику) = Неопределено);
	
	ЕстьПоступлениеПоРезультатамСписания = (ЕстьСложныйУчетНДС Или СписаниеОС) И
	(НЕ СписокИспользуемыхОпераций.НайтиПоЗначению(КодыОпераций.ВозвратОтКомиссионера) = неопределено
	ИЛИ НЕ СписокИспользуемыхОпераций.НайтиПоЗначению(КодыОпераций.ВозвратОтПереработчика) = неопределено
	ИЛИ НЕ СписокИспользуемыхОпераций.НайтиПоЗначению(КодыОпераций.ВозвратОтПокупателя) = неопределено
	ИЛИ НЕ СписокИспользуемыхОпераций.НайтиПоЗначению(КодыОпераций.ВыпускПоОперацииСтоимость) = неопределено
	ИЛИ НЕ СписокИспользуемыхОпераций.НайтиПоЗначению(КодыОпераций.ВыпускПродукцииФиксНаСклад) = неопределено
	ИЛИ НЕ СписокИспользуемыхОпераций.НайтиПоЗначению(КодыОпераций.Комплектация) = неопределено
	ИЛИ НЕ СписокИспользуемыхОпераций.НайтиПоЗначению(КодыОпераций.КорректировкаСерийИХарактеристик) = неопределено
	ИЛИ НЕ СписокИспользуемыхОпераций.НайтиПоЗначению(КодыОпераций.ПередачаВПереработку) = неопределено
	ИЛИ НЕ СписокИспользуемыхОпераций.НайтиПоЗначению(КодыОпераций.ПередачаНаКомиссию) = неопределено
	ИЛИ НЕ СписокИспользуемыхОпераций.НайтиПоЗначению(КодыОпераций.ПеремещениеМеждуСкладами) = неопределено
	ИЛИ НЕ СписокИспользуемыхОпераций.НайтиПоЗначению(КодыОпераций.РезервированиеПодЗаказ) = неопределено
	ИЛИ НЕ СписокИспользуемыхОпераций.НайтиПоЗначению(КодыОпераций.СнятиеРезерваПодЗаказ) = неопределено
	ИЛИ НЕ СписокИспользуемыхОпераций.НайтиПоЗначению(КодыОпераций.ВключениеАктиваВСоставМПЗ) = неопределено);
	
	
	РаспределеннаяТаблица = СтруктураПараметров.ТаблицаСписанныхПартий.Скопировать(,ОбщегоНазначения.ВыгрузитьСтруктуруВСтроку(БазоваяСтруктураКолонок));
	
	Если ЕстьСложныйУчетНДС Тогда
		РаспределеннаяТаблица.Колонки.КорСубконтоБУ1.Имя = "КорСубконтоСписанияБУ1";
		РаспределеннаяТаблица.Колонки.КорСубконтоБУ2.Имя = "КорСубконтоСписанияБУ2";
		РаспределеннаяТаблица.Колонки.КорСубконтоБУ3.Имя = "КорСубконтоСписанияБУ3";
		
		РаспределеннаяТаблица.Колонки.КорСубконтоНУ1.Имя = "КорСубконтоСписанияНУ1";
		РаспределеннаяТаблица.Колонки.КорСубконтоНУ2.Имя = "КорСубконтоСписанияНУ2";
		РаспределеннаяТаблица.Колонки.КорСубконтоНУ3.Имя = "КорСубконтоСписанияНУ3";
		
	ИначеЕсли НЕ СписокИспользуемыхОпераций.НайтиПоЗначению(КодыОпераций.ВозвратОтПокупателя) = неопределено Тогда
		РаспределеннаяТаблица.Колонки.КорСубконтоБУ2.Имя = "КорСубконтоСписанияБУ2";
	КонецЕсли;
	
	РаспределеннаяТаблица.Колонки.СуммаНДС.Имя = "НДС";
	РаспределеннаяТаблица.Колонки.СуммаЗадолженностиБУ.Имя = "СуммаБезНДС";
	
	// Ключ - название колонки
	// Значение - описание типа для добавляемой колонки
	СтруктураКолонокРаспределеннойТаблицы = Новый Структура();
	СтруктураКолонокРаспределеннойТаблицы.Вставить("СчетУчетаБУ", Новый описаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	СтруктураКолонокРаспределеннойТаблицы.Вставить("СчетУчетаНУ", Новый описаниеТипов("ПланСчетовСсылка.Налоговый"));
	СтруктураКолонокРаспределеннойТаблицы.Вставить("КорСчетСписанияБУ", Новый описаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	СтруктураКолонокРаспределеннойТаблицы.Вставить("КорСчетСписанияНУ", Новый описаниеТипов("ПланСчетовСсылка.Налоговый"));
	СтруктураКолонокРаспределеннойТаблицы.Вставить("СчетУчетаЦенности", Новый описаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	СтруктураКолонокРаспределеннойТаблицы.Вставить("ПринятыеСчетУчетаБУ", Новый описаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	СтруктураКолонокРаспределеннойТаблицы.Вставить("ПринятыеСчетУчетаНУ", Новый описаниеТипов("ПланСчетовСсылка.Налоговый"));
	СтруктураКолонокРаспределеннойТаблицы.Вставить("Ценность");
	
	СтруктураКолонокРаспределеннойТаблицы.Вставить("Комиссионный", Новый описаниеТипов("Булево"));
	СтруктураКолонокРаспределеннойТаблицы.Вставить("УчетАгентскогоНДС", Новый описаниеТипов("Булево"));
	СтруктураКолонокРаспределеннойТаблицы.Вставить("ДоговорКомиссии", Новый описаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));
	СтруктураКолонокРаспределеннойТаблицы.Вставить("СчетРасчетовСКомитентом", Новый описаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	
	СтруктураКолонокРаспределеннойТаблицы.Вставить("ВидЦенности", Новый описаниеТипов("ПеречислениеСсылка.ВидыЦенностей"));
	
	СтруктураКолонокРаспределеннойТаблицы.Вставить("Партия", РаспределеннаяТаблица.Колонки.ДокументОприходования.ТипЗначения);
	СтруктураКолонокРаспределеннойТаблицы.Вставить("ОбособленныйУчетТоваровПоЗаказамПокупателей", Новый описаниеТипов("Булево"));
	СтруктураКолонокРаспределеннойТаблицы.Вставить("Подразделение",Новый описаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	
	СтруктураКолонокРаспределеннойТаблицы.Вставить("КоличествоПоступление", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
	
	Для Каждого Элемент из СтруктураКолонокРаспределеннойТаблицы цикл
		Если РаспределеннаяТаблица.Колонки.Найти(Элемент.Ключ) = Неопределено тогда
			Если Элемент.Значение = Неопределено Тогда
				РаспределеннаяТаблица.Колонки.Добавить(Элемент.Ключ);
			Иначе
				РаспределеннаяТаблица.Колонки.Добавить(Элемент.Ключ,Элемент.Значение);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	РаспределеннаяТаблица.ЗагрузитьКолонку(РаспределеннаяТаблица.ВыгрузитьКолонку("ДокументОприходования"),"Партия");
	РаспределеннаяТаблица.ЗагрузитьКолонку(РаспределеннаяТаблица.ВыгрузитьКолонку("КорСчетБУ"),"КорСчетСписанияБУ");
	РаспределеннаяТаблица.ЗагрузитьКолонку(РаспределеннаяТаблица.ВыгрузитьКолонку("Номенклатура"),"Ценность");
	Если ЕстьСложныйУчетНДС Тогда
		РаспределеннаяТаблица.ЗагрузитьКолонку(РаспределеннаяТаблица.ВыгрузитьКолонку("ПодразделениеОрганизации"),"Подразделение");
		РаспределеннаяТаблица.ЗагрузитьКолонку(РаспределеннаяТаблица.ВыгрузитьКолонку("КорСчетНУ"),"КорСчетСписанияНУ");
	КонецЕсли;
	
	СтруктураПоискаНУ = Новый Структура("НомерСтрокиДокумента, ДокументОприходования, ОтражатьВНалоговомУчете", , , Истина);
	СтрокаПартии = Новый Структура("ВидДвижения, Количество, КоличествоПоступление, СчетУчета, СерияНоменклатуры, Заказ, ДокументОприходования, КодОперации, Организация", , 0, 0);
	
	МассивСтрокКУдалению = Новый Массив();
	Для каждого СтрокаТаблицыСписания из РаспределеннаяТаблица цикл
		
		Если Не СтрокаТаблицыСписания.ОтражатьВБухгалтерскомУчете тогда
			МассивСтрокКУдалению.Добавить(СтрокаТаблицыСписания);
			Продолжить;
		КонецЕсли;
		
		РегистрУчета = "НаСкладах";
		
		ЗаполнитьЗначенияСвойств(СтрокаПартии, СтрокаТаблицыСписания.Движение);
		
		Если СтрокаПартии.ВидДвижения = ВидДвиженияНакопления.Приход 
			И  Не СтрокаТаблицыСписания.КодОперацииПартииТоваров = КодыОпераций.ВозвратОтПокупателя тогда
			МассивСтрокКУдалению.Добавить(СтрокаТаблицыСписания);
			//ТаблицаСписанныхПартий, ошибочная ситуация: ВидДвижения = ВидДвиженияНакопления.Приход
			Продолжить;
		КонецЕсли;
		
		Если СтрокаПартии.ВидДвижения = ВидДвиженияНакопления.Расход 
  		  И  СтрокаТаблицыСписания.КодОперацииПартииТоваров = КодыОпераций.ВозвратОтПокупателя тогда
			// Возврат текущего месяца учитывается как сторно реализации
			СтрокаПартии.Количество = - СтрокаПартии.Количество;
		КонецЕсли;		
		
		// НДС по таре не учитывается
		Если СтрокаТаблицыСписания.КодОперацииПартииТоваров = КодыОпераций.ПередачаТарыКонтрагенту 
		   Или СтрокаТаблицыСписания.ВидТабличнойЧасти = Перечисления.ВидыТабличныхЧастей.Тара
			тогда
			МассивСтрокКУдалению.Добавить(СтрокаТаблицыСписания);
			Продолжить;
		КонецЕсли;
		
		Если СтрокаТаблицыСписания.Количество <= 0 тогда
			МассивСтрокКУдалению.Добавить(СтрокаТаблицыСписания);
			//ТаблицаСписанныхПартий, ошибочная ситуация: СтрокаТаблицыСписания.Количество <= 0
			Продолжить;
		КонецЕсли;
		
		Если СтрокаТаблицыСписания.Количество > СтрокаПартии.Количество тогда
			КоэффСписания = СтрокаПартии.Количество/СтрокаТаблицыСписания.Количество;
		Иначе
			КоэффСписания = 1;
		КонецЕсли;
		
		СтрокаРаспределеннойТаблицы = СтрокаТаблицыСписания;
		
		СтрокаРаспределеннойТаблицы.СчетУчетаЦенности = СтрокаПартии.СчетУчета;
		СтрокаРаспределеннойТаблицы.СчетУчетаБУ		  = СтрокаПартии.СчетУчета;
		СтрокаРаспределеннойТаблицы.ВидЦенности	= ОпределитьВидЦенности(СтрокаРаспределеннойТаблицы.Номенклатура,СтрокаРаспределеннойТаблицы.СчетУчетаБУ,,,,,,,,ВидыЦенностейПоСчетамУчета);
		
		СтрокаРаспределеннойТаблицы.НДС = Окр(СтрокаТаблицыСписания.НДС * КоэффСписания,2,1);
		СтрокаРаспределеннойТаблицы.СуммаБезНДС = Окр(СтрокаТаблицыСписания.СуммаБезНДС * КоэффСписания,2,1) - СтрокаРаспределеннойТаблицы.НДС;
		
		// Возврат поставщику, НА Комитент
		СтрокаРаспределеннойТаблицы.КорВалютнаяСуммаНДСЗадолженностиБУ = Окр(СтрокаТаблицыСписания.КорВалютнаяСуммаНДСЗадолженностиБУ* КоэффСписания,2,1);
		//***************************************************
		// Возврат поставщику
		Если ЕстьВозвратПоставщику Тогда
			СтрокаРаспределеннойТаблицы.КорВалютнаяСуммаЗадолженностиБУ = Окр(СтрокаТаблицыСписания.КорВалютнаяСуммаЗадолженностиБУ* КоэффСписания,2,1);
		КонецЕсли;	
		// Возврат поставщику
		//***************************************************
		
		//***************************************************
		// Сложный учет НДС
		Если ЕстьСложныйУчетНДС Тогда
			// Серия в документе может отличаться от серии в партии
			// Например заказ покупателя с пустой серией может списывать партии с непустой серией
			СтрокаРаспределеннойТаблицы.СерияНоменклатуры = СтрокаПартии.СерияНоменклатуры;
			
			//***************************************************
			// Включение НДС в стоимость/Исключение из стоимости, косвенные расходы и производство
			Если не ЗначениеЗаполнено(СтрокаРаспределеннойТаблицы.КорСубконтоСписанияНУ1) тогда
				СтрокаРаспределеннойТаблицы.КорСубконтоСписанияНУ1 = СтрокаРаспределеннойТаблицы.КорСубконтоСписанияБУ1;
			КонецЕсли;
			Если не ЗначениеЗаполнено(СтрокаРаспределеннойТаблицы.КорСубконтоСписанияНУ2) тогда
				СтрокаРаспределеннойТаблицы.КорСубконтоСписанияНУ2 = СтрокаРаспределеннойТаблицы.КорСубконтоСписанияБУ2;
			КонецЕсли;
			Если не ЗначениеЗаполнено(СтрокаРаспределеннойТаблицы.КорСубконтоСписанияНУ2) тогда
				СтрокаРаспределеннойТаблицы.КорСубконтоСписанияНУ2 = СтрокаРаспределеннойТаблицы.КорСубконтоСписанияБУ2;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(СтрокаРаспределеннойТаблицы.КорСчетСписанияБУ) тогда
				СтрокаРаспределеннойТаблицы.КорСчетСписанияБУ = СтрокаРаспределеннойТаблицы.СчетУчетаБУ;
			КонецЕсли;
			
			Если СтрокаПартии.Заказ <> Документы.ЗаказПокупателя.ПустаяСсылка() тогда
				ОбособленныйУчетТоваровПоЗаказамПокупателей = СоответствиеЗаказов[СтрокаПартии.Заказ];
				
				Если ОбособленныйУчетТоваровПоЗаказамПокупателей = Неопределено Тогда
					
					СтруктураЗаказа = Новый Структура("ДоговорКонтрагента");
					УправлениеЗапасамиПартионныйУчет.ПолучитьРеквизитыОбъекта(СтрокаПартии.Заказ, СтруктураЗаказа);
					
					СтруктураДоговора = Новый Структура("ОбособленныйУчетТоваровПоЗаказамПокупателей");
					УправлениеЗапасамиПартионныйУчет.ПолучитьРеквизитыОбъекта(СтруктураЗаказа.ДоговорКонтрагента, СтруктураДоговора);
					
					СтрокаРаспределеннойТаблицы.ОбособленныйУчетТоваровПоЗаказамПокупателей = СтруктураДоговора.ОбособленныйУчетТоваровПоЗаказамПокупателей;
					СоответствиеЗаказов.Вставить(СтрокаПартии.Заказ, СтруктураДоговора.ОбособленныйУчетТоваровПоЗаказамПокупателей);
					
				Иначе
					СтрокаРаспределеннойТаблицы.ОбособленныйУчетТоваровПоЗаказамПокупателей = ОбособленныйУчетТоваровПоЗаказамПокупателей;
				КонецЕсли;
			Иначе
				СтрокаРаспределеннойТаблицы.ОбособленныйУчетТоваровПоЗаказамПокупателей = Ложь;
			КонецЕсли;
			// Включение НДС в стоимость/Исключение из стоимости
			//***************************************************
			
			//*****************************
			// Для последующего поступления
			Если ЕстьПоступлениеПоРезультатамСписания Тогда
				Если СтрокаТаблицыСписания.КодОперацииПартииТоваров = Перечисления.КодыОперацийПартииТоваров.ВозвратОтПокупателя тогда
					СтрокаРаспределеннойТаблицы.СкладПолучатель = СтрокаРаспределеннойТаблицы.Склад;
				КонецЕсли;
			КонецЕсли; 
			// Для последующего поступления
			//*****************************
		КонецЕсли; 
		// Сложный учет НДС
		//***************************************************
		
		СтрокаРаспределеннойТаблицы.Количество = СтрокаПартии.Количество;
		СтрокаРаспределеннойТаблицы.КоличествоПоступление = СтрокаПартии.КоличествоПоступление;
		
		СтрокаРаспределеннойТаблицы.Комиссионный  = УправлениеЗапасамиПартионныйУчет.КомиссионныйТовар(СтрокаРаспределеннойТаблицы.СчетУчетаБУ);
		
		Если СтрокаРаспределеннойТаблицы.КодОперацииПартииТоваров = КодыОпераций.Реализация
			ИЛИ СтрокаРаспределеннойТаблицы.КодОперацииПартииТоваров = КодыОпераций.РеализацияКомиссия
			ИЛИ СтрокаРаспределеннойТаблицы.КодОперацииПартииТоваров = КодыОпераций.РеализацияРозница
			ИЛИ СтрокаРаспределеннойТаблицы.КодОперацииПартииТоваров = КодыОпераций.ВозвратОтПокупателя
			Тогда
			
			Если СтрокаРаспределеннойТаблицы.Комиссионный тогда
				СтруктураРеквизитовДокумента = Новый Структура("Контрагент,ДоговорКонтрагента");
				Если ЗначениеЗаполнено(СтрокаПартии.ДокументОприходования) Тогда
					
					УправлениеЗапасамиПартионныйУчет.ПолучитьРеквизитыОбъекта(СтрокаПартии.ДокументОприходования, СтруктураРеквизитовДокумента);
					СтрокаРаспределеннойТаблицы.ДоговорКомиссии = СтруктураРеквизитовДокумента.ДоговорКонтрагента;
					СтруктураРеквизитовДоговора = Новый Структура("УчетАгентскогоНДС");
					УправлениеЗапасамиПартионныйУчет.ПолучитьРеквизитыОбъекта(СтруктураРеквизитовДокумента.ДоговорКонтрагента, СтруктураРеквизитовДоговора);
					
					СтрокаРаспределеннойТаблицы.УчетАгентскогоНДС = СтруктураРеквизитовДоговора.УчетАгентскогоНДС;
					СчетаРасчетов = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(СтрокаТаблицыСписания.Организация, СтруктураРеквизитовДокумента.Контрагент, 
					СтруктураРеквизитовДокумента.ДоговорКонтрагента);
					
					СтрокаРаспределеннойТаблицы.СчетРасчетовСКомитентом = СчетаРасчетов.СчетРасчетовСКомитентом;
				Иначе
					СтрокаРаспределеннойТаблицы.УчетАгентскогоНДС = Ложь;
					СтрокаРаспределеннойТаблицы.Комиссионный = Ложь;
				КонецЕсли; 
				
			КонецЕсли;
		КонецЕсли;
		
		//Поиск соответствующей строки списания, отражаемой в налоговом учете
		Если Не СтрокаТаблицыСписания.ОтражатьВНалоговомУчете Тогда
			СтруктураПоискаНУ.НомерСтрокиДокумента = СтрокаТаблицыСписания.НомерСтрокиДокумента;
			СтруктураПоискаНУ.ДокументОприходования = СтрокаТаблицыСписания.ДокументОприходования;
			Если РаспределеннаяТаблица.НайтиСтроки(СтруктураПоискаНУ).Количество() <> 0 Тогда
				СтрокаРаспределеннойТаблицы.ОтражатьВНалоговомУчете = Истина;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	Для каждого СтрокаКУдалению Из МассивСтрокКУдалению Цикл
		РаспределеннаяТаблица.Удалить(СтрокаКУдалению);
	КонецЦикла;
	
	Возврат РаспределеннаяТаблица;
	
КонецФункции // ()

// Процедура используется для проведения документов по регистрам подсистемы НДС
// Вызывается из обработки "Проведение документов по регистрам НДС" и из 
// документа "Расчет НДС по продукции"
Процедура ДвижениеНДСпоТаблицеДокументов(ТаблицаДокументов,ФормироватьПроводки = Истина) Экспорт
	
	Для Каждого Строка из ТаблицаДокументов Цикл
		
		ТаблицаСписания = УправлениеЗапасамиПартионныйУчет.ПолучитьТаблицуСтрокДокументов(Строка.Регистратор);
		ДополнитьСписанныеТоварыДаннымиПоКомиссии(Строка.Регистратор, ТаблицаСписания);
		Если ТаблицаСписания.Количество()>0 Тогда
			
			#Если Клиент Тогда
				Состояние("Проведение по НДС документа " + ТаблицаСписания[0].Регистратор);
			#КонецЕсли
			
			СтруктураПараметров = Новый Структура;
			
			// Приведение таблицы списания к требуемому виду
			УправлениеЗапасамиПартионныйУчет.ПодготовитьТаблицуСписания(СтруктураПараметров,ТаблицаСписания, Ложь, Истина, Истина);
			
			МоментКон = Новый МоментВремени(ТаблицаСписания[0].Период, ТаблицаСписания[0].Регистратор);
			
			СтруктураПараметров.Вставить("УчетнаяПолитика", УправлениеЗапасамиПартионныйУчет.ПолучитьУчетнуюПолитику(МоментКон,,,,,ТаблицаСписания[0].Организация));
			
			СтруктураПараметров.Вставить("ТолькоДвиженияНДС");
			
			Организация = ТаблицаСписания[0].Организация;
			
			СтруктураПараметров.Вставить("ЕстьСтрокиОтражатьВБухгалтерскомУчете", 	ТаблицаСписания.Найти(Истина, "ОтражатьВБухгалтерскомУчете")<>Неопределено);
			СтруктураПараметров.Вставить("ЕстьСтрокиОтражатьВНалоговомУчете", 		Ложь);
			СтруктураПараметров.Вставить("ТолькоВключениеНДСВСтоимостьНУ", 			Истина);
			СтруктураПараметров.Вставить("ЕстьСтрокиОтражатьВУправленческомУчете", 	Ложь);
			СтруктураПараметров.Вставить("ЕстьСтрокиОтражатьВМеждународномУчете", 	Ложь);
			
			// Движения - наборы записей по регистрам
			УправлениеЗапасамиПартионныйУчет.СоздатьНаборыЗаписей(СтруктураПараметров, ТаблицаСписания, ТаблицаСписания[0].Регистратор);
			
			// Подготовка наборов записей
			УправлениеЗапасамиПартионныйУчет.ПодготовитьНаборыЗаписей(СтруктураПараметров, ТаблицаСписания, ТаблицаСписания[0].Период, ТаблицаСписания[0].Регистратор, Истина, Ложь);
			
			//Сохраним партионные регистры БУ
			ЗагрузитьВТаблицуЗначенийСписанныеПартии(СтруктураПараметров, "ДвиженияПартииТоваровНаСкладахБух", 			"ТаблицаДвиженийПартииТоваровНаСкладахБух");
			ЗагрузитьВТаблицуЗначенийСписанныеПартии(СтруктураПараметров, "ДвиженияПартииТоваровПереданныеБух", 		"ТаблицаДвиженийПартииТоваровПереданныеБух");
			ЗагрузитьВТаблицуЗначенийСписанныеПартии(СтруктураПараметров, "ДвиженияПартииМатериаловВЭксплуатацииБух", 	"ТаблицаДвиженийПартииМатериаловВЭксплуатацииБух");
			
			ЗагрузитьВТаблицуЗначенийСписанныеПартии(СтруктураПараметров, "ДвиженияНезавершенноеПроизводствоБух", 		"ТаблицаДвиженийНезавершенноеПроизводствоБух");
			ЗагрузитьВТаблицуЗначенийСписанныеПартии(СтруктураПараметров, "ДвиженияБракВПроизводствеБух", 				"ТаблицаДвиженийБракВПроизводствеБух");
			ЗагрузитьВТаблицуЗначенийСписанныеПартии(СтруктураПараметров, "ДвиженияЗатратыБух", 						"ТаблицаДвиженийЗатратыБух");
			
			СтруктураПараметров.ИзмененыДвиженияСтоимостьОСБух = Ложь;
			
			ВыполнитьДвиженияПоНДС(СтруктураПараметров, ТаблицаСписания);
			
			Если НЕ ФормироватьПроводки Тогда
				СтруктураПараметров.Вставить("ИзмененыДвиженияХозрасчетный", Ложь);
				СтруктураПараметров.Вставить("ИзмененыДвиженияНалоговый", 	 Ложь);
			КонецЕсли;
			
			УправлениеЗапасамиПартионныйУчет.ЗаписатьДвиженияДокумента(СтруктураПараметров, ТаблицаСписания, Истина);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБОЛОЧКИ ДЛЯ ВЫЗОВА СООТВЕТСТВУЮЩИХ ПРОЦЕДУР И ФУНКЦИЙ ИЗ МОДУЛЯ УЧЕТ НДС

//
//
Процедура ВыполнитьДвиженияНДСНалоговогоАгентаКомиссионер(СтруктураШапкиДокумента, РаспределеннаяТаблицаСписания, СтруктураПараметров)

	Строка = "Комплектация,Реализация,РеализацияКомиссия,РеализацияРозница";
	
	ДанныеДляОбработки = ОтобратьСтрокиПостроителемЗапроса(Строка, РаспределеннаяТаблицаСписания);
	
	Если ДанныеДляОбработки = Неопределено тогда
		Возврат;
	КонецЕсли;
	
	ОтразитьНДСНалоговогоАгентаКомиссионер(СтруктураШапкиДокумента, ДанныеДляОбработки, СтруктураПараметров);

КонецПроцедуры

Процедура ВыполнитьДвиженияПоступленияПоРегиструНДСПартииТоваровКомплектацияВыпуск(СтруктураШапкиДокумента, СтруктураПараметров, ТаблицаНДСПартииСписания, Отказ)
	
	Если Не СтруктураШапкиДокумента.ВидДокумента = "КомплектацияНоменклатуры" 
		Или Не (СтруктураШапкиДокумента.Свойство("ВидОперации") 
				И СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКомплектацияНоменклатуры.ВыпускПродукции) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТаблицаНДСПартииСписания.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаДвиженийПартии = СтруктураПараметров.ТаблицаДвиженийНДСПартииТоваров.СкопироватьКолонки();
		
	КолНДСПартииТоваров = СтруктураПараметров.ТаблицаДвиженийНДСПартииТоваров.Количество();
	
	ЕстьСерияНоменклатурыНовая = ТаблицаНДСПартииСписания.Колонки.Найти("СерияНоменклатурыНовая") <> Неопределено;
	
	Для Каждого СтрокаВыборки Из ТаблицаНДСПартииСписания Цикл
	
		НоваяСтрока = ТаблицаДвиженийПартии.Добавить();
		НоваяСтрока.Активность = Истина;
		НоваяСтрока.ВидДвижения = ВидДвиженияНакопления.Приход;
		НоваяСтрока.Период = СтруктураШапкиДокумента.Дата;
		
		НоваяСтрока.Организация = СтруктураШапкиДокумента.Организация;
		НоваяСтрока.СчетУчета = СтрокаВыборки.СчетУчета;
		
		НоваяСтрока.Номенклатура = СтрокаВыборки.Номенклатура;
		НоваяСтрока.ХарактеристикаНоменклатуры = СтрокаВыборки.ХарактеристикаНоменклатуры;
		
		Если СтруктураШапкиДокумента.ПартионныйУчетНДСвРазрезеСерийИХарактеристик
		   И СтрокаВыборки.ВестиПартионныйУчетПоСериям
		   И ЕстьСерияНоменклатурыНовая
		Тогда
			НоваяСтрока.СерияНоменклатуры = СтрокаВыборки.СерияНоменклатурыНовая;
		Иначе
			НоваяСтрока.СерияНоменклатуры = Неопределено;
		КонецЕсли;
		
		НоваяСтрока.Партия = СтрокаВыборки.Регистратор;
		
		НоваяСтрока.Заказ = Неопределено;
		
		НоваяСтрока.Склад = СтрокаВыборки.СкладПолучатель;
		
		НоваяСтрока.Количество = СтрокаВыборки.Количество;
		НоваяСтрока.Стоимость = 0;
		
		НоваяСтрока.СписаниеПартий = Истина;
		
	КонецЦикла;	
	
	// Добавим колонки для обработки заказа покупателя.
	ТаблицаДвиженийПартии.Колонки.Добавить("ОбособленныйУчетТоваровПоЗаказамПокупателей");
	ТаблицаДвиженийПартии.ЗаполнитьЗначения(Ложь,"ОбособленныйУчетТоваровПоЗаказамПокупателей");
			
	ТаблицаДвиженийПартии.Колонки.Добавить("ЗаказПокупателя");
	ТаблицаДвиженийПартии.ЗаполнитьЗначения(Неопределено,"ЗаказПокупателя");
	
	ТаблицаДвиженийПартии.Колонки.СчетУчета.Имя = "СчетУчетаЦенности";
		
	УчетНДСФормированиеДвижений.СформироватьДвиженияПоступленияПоРегиструНДСПартииТоваров(СтруктураШапкиДокумента, ТаблицаДвиженийПартии, СтруктураПараметров.ТаблицаДвиженийНДСПартииТоваров, Отказ);

	// Устанавливаем флаги модификации
	СтруктураПараметров.ИзмененыДвиженияНДСПартииТоваров = СтруктураПараметров.ИзмененыДвиженияНДСПартииТоваров 
								ИЛИ (КолНДСПартииТоваров <> СтруктураПараметров.ТаблицаДвиженийНДСПартииТоваров.Количество());
									
КонецПроцедуры//ВыполнитьДвиженияПоступленияПоРегиструНДСПартииТоваров

Процедура ВыполнитьДвиженияНДСНезавершенноеПроизводство(СтруктураШапкиДокумента, СтруктураПараметров, ТаблицаНДСПартииСписания, Отказ)
	
	Если ?(СтруктураШапкиДокумента.Свойство("СложныйУчетНДС"),НЕ СтруктураШапкиДокумента.СложныйУчетНДС,
		НЕ (УправлениеЗапасамиПартионныйУчет.ПолучитьПараметрУчетнойПолитикиПартионногоУчета("СложныйУчетНДС", "Нал", СтруктураПараметров) = Истина))
		Тогда
		
		Возврат;
	КонецЕсли; 
	
	Если УправлениеЗапасами.ИспользуетсяРасширеннаяАналитикаУчета(СтруктураШапкиДокумента.Дата) Тогда
		Возврат;//При использовании расширенной аналитики движения по регистру НДСНезавершенноеПроизводство не формируются
	КонецЕсли;	
	
	ДанныеДляОбработки = Новый ТаблицаЗначений;
	
	ИспользоватьРА = УправлениеЗапасами.ИспользуетсяРасширеннаяАналитикаУчета(СтруктураШапкиДокумента.Дата);
	
	Для каждого Колонка ИЗ ТаблицаНДСПартииСписания.Колонки Цикл
			
		ДанныеДляОбработки.Колонки.Добавить(Колонка.Имя,Колонка.ТипЗначения);
			
	КонецЦикла;
	
		Для Каждого Строка из ТаблицаНДСПартииСписания Цикл
			
			ХарактерЗатрат = УправлениеЗатратами.ПолучитьХарактерЗатратПоСчетуЗатрат(Строка.КорСчетБУ, Строка.СтатьяЗатрат);
			Если ХарактерЗатрат = Перечисления.ХарактерЗатрат.ПроизводственныеРасходы Тогда
					НоваяСтрока = ДанныеДляОбработки.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока,Строка);
			КонецЕсли;

		КонецЦикла;
	
	// Получили движения, для которых может произойти списание на незавершенное производство
	СформироватьДвиженияНДСНезавершенноеПроизводство(СтруктураШапкиДокумента, СтруктураПараметров, ДанныеДляОбработки, Отказ);

КонецПроцедуры//ВыполнитьДвиженияНДСНезавершенноеПроизводство

Процедура ВыполнитьДвиженияПоРегистрамНДССписаниеРасходовпоВНА(СтруктураШапкиДокумента, РаспределеннаяТаблицаСписания, СтруктураПараметров, Отказ)
	
	СтрокаКодовОпераций = "ПередачаМатериаловВЭксплуатацию";//, ПринятиеКУчетуОС, ПринятиеКУчетуОССоСписаниемНаЗатраты";
	
	ДанныеДляОбработки = ОтобратьСтрокиПостроителемЗапроса(СтрокаКодовОпераций, РаспределеннаяТаблицаСписания);
	
	Если ДанныеДляОбработки = Неопределено тогда
		Возврат;
	КонецЕсли;
	
	Если не СтруктураШапкиДокумента.УчитыватьНДС Тогда
		Возврат;
	КонецЕслИ;
		
	РаспределитьРасходыПоВНАнаСпособыОтраженияРасходовПоАмортизации(СтруктураШапкиДокумента, СтруктураПараметров, ДанныеДляОбработки, Отказ);
	
КонецПроцедуры

// Определяет дату документов из колонки таблицы значений с именем, переданным в параметре КолонкаДокумента
// и записывает ее в колонку с именем, переданным в параметре КолонкаСДатой.
// Колонки с такими именами должны существовать.
//
Процедура ЗаполнитьДатуДокументовВТаблице(Таблица, КолонкаДокумента, КолонкаСДатой) Экспорт

	КэшПоТипам = Новый Соответствие;

	Для каждого СтрокаТаблицы Из Таблица Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы[КолонкаДокумента]) тогда 
			Продолжить;
		КонецЕсли;
		
		ТипТекущегоДокумента = ТипЗнч(СтрокаТаблицы[КолонкаДокумента]);
		МассивТипа = КэшПоТипам[ТипТекущегоДокумента];
		Если МассивТипа = Неопределено Тогда
			МассивТипа = Новый Массив;
			КэшПоТипам.Вставить(ТипТекущегоДокумента, МассивТипа);
		КонецЕсли;
		МассивТипа.Добавить(СтрокаТаблицы[КолонкаДокумента]);
	КонецЦикла;
	
	Если КэшПоТипам.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;

	Для каждого КлючИЗначение Из КэшПоТипам Цикл
		ИмяМетаданных = Метаданные.НайтиПоТипу(КлючИЗначение.Ключ).Имя;

		Запрос.Текст = Запрос.Текст 
		+ ?(Запрос.Текст = "", "",
		" 
		|ОБЪЕДИНИТЬ ВСЕ")
		+ "
		|	ВЫБРАТЬ
		|		Док.Ссылка КАК Ссылка,
		|		Док.Дата КАК Дата
		|	ИЗ Документ." + ИмяМетаданных + " КАК Док
		|	ГДЕ Док.Ссылка В (&ДокументыТипа_" + ИмяМетаданных + ")";
		ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(КлючИЗначение.Значение);
		Запрос.УстановитьПараметр("ДокументыТипа_" + ИмяМетаданных, КлючИЗначение.Значение);
		
	КонецЦикла;
	
    Таблица.Индексы.Добавить(КолонкаДокумента);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить(КолонкаДокумента, Выборка.Ссылка);
		НайденныеСтроки = Таблица.НайтиСтроки(ПараметрыОтбора);
		Для каждого Строка Из НайденныеСтроки Цикл
			Строка[КолонкаСДатой] = Выборка.Дата;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции обновления ИБ

// Документы виды КорректировочныйСчетФактура... более не используется
// производится замена их на документы КорректировкаПоступления/КорректировкаРеализации
// с регистрацией счетов-фактур
//
Процедура ОбработатьКорректировочныеСчетаФактуры() Экспорт
	
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
		
	СчетДоходов              = ПланыСчетов.Хозрасчетный.ВыручкаНеОблагаемаяЕНВД;
	СчетРасходов             = ПланыСчетов.Хозрасчетный.СебестоимостьПродажНеОблагаемаяЕНВД;
	
	// Обработка корректировочных счетов-фактур выданных
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УдалитьКорректировочныйСчетФактураВыданный.Ссылка,
	|	УдалитьКорректировочныйСчетФактураВыданный.СчетФактура КАК ДокументРеализации,
	|	УдалитьКорректировочныйСчетФактураВыданный.Номер КАК НомерСчетаФактуры,
	|	УдалитьКорректировочныйСчетФактураВыданный.Дата КАК Дата,
	|	УдалитьКорректировочныйСчетФактураВыданный.Организация КАК Организация,
	|	УдалитьКорректировочныйСчетФактураВыданный.Контрагент КАК Контрагент,
	|	УдалитьКорректировочныйСчетФактураВыданный.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	УдалитьКорректировочныйСчетФактураВыданный.ВалютаДокумента КАК ВалютаДокумента,
	|	УдалитьКорректировочныйСчетФактураВыданный.СчетФактура.Номер КАК НомерИсходногоДокумента,
	|	УдалитьКорректировочныйСчетФактураВыданный.СчетФактура.Дата КАК ДатаИсходногоДокумента,
	|	УдалитьКорректировочныйСчетФактураВыданный.ТоварыИУслуги.(
	|		Номенклатура КАК Номенклатура,
	|		КоличествоДоИзменения КАК КоличествоДоИзменения,
	|		КоличествоПослеИзменения КАК Количество,
	|		ЦенаДоИзменения КАК ЦенаДоИзменения,
	|		ЦенаПослеИзменения КАК Цена,
	|		СтоимостьБезНДСДоИзменения КАК СуммаДоИзменения,
	|		СтоимостьБезНДСПослеИзменения КАК Сумма,
	|		СтавкаНДС КАК СтавкаНДС,
	|		СуммаНДСДоИзменения КАК СуммаНДСДоИзменения,
	|		СуммаНДСПослеИзменения КАК СуммаНДС,
	|		ЕСТЬNULL(УдалитьКорректировочныйСчетФактураВыданный.ТоварыИУслуги.Номенклатура.Услуга, ЛОЖЬ) КАК Услуга,
	|		НаименованиеНоменклатуры КАК Содержание,
	|		ВидЦенности КАК ВидЦенности
	|	)
	|ИЗ
	|	Документ.УдалитьКорректировочныйСчетФактураВыданный КАК УдалитьКорректировочныйСчетФактураВыданный
	|ГДЕ
	|	УдалитьКорректировочныйСчетФактураВыданный.Проведен";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НовыйДокументКорректировки = Документы.КорректировкаРеализации.СоздатьДокумент();
		НовыйДокументКорректировки.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение;
		
		ЗаполнитьЗначенияСвойств(НовыйДокументКорректировки, Выборка);		
		
		ВыборкаТоварыИУслуги = Выборка.ТоварыИУслуги.Выбрать();
		Пока ВыборкаТоварыИУслуги.Следующий() Цикл
			
			Если ВыборкаТоварыИУслуги.Услуга Тогда
				НоваяСтрока = НовыйДокументКорректировки.Услуги.Добавить();	
			Иначе
				НоваяСтрока = НовыйДокументКорректировки.Товары.Добавить();
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаТоварыИУслуги);
			
			Если НЕ ВыборкаТоварыИУслуги.Услуга Тогда
				СчетУчетаНДС = "";
				ПолучитьСчетУчетаПоВидуЦенности(НоваяСтрока.СчетУчетаБУ, СчетУчетаНДС, ВыборкаТоварыИУслуги.ВидЦенности, Выборка.ДоговорКонтрагента, ВалютаРегламентированногоУчета);
			КонецЕсли;			
			
			НоваяСтрока.СчетРасходовБУ             = СчетРасходов;
			НоваяСтрока.СчетДоходовБУ              = СчетДоходов;			
			
		КонецЦикла;
		
		НовыйДокументКорректировки.КорректироватьБУиНУ = Ложь;
		НовыйДокументКорректировки.Комментарий         = "## Создан на основании: " + Выборка.Ссылка + " ##";
		
	    Попытка
    	    НовыйДокументКорректировки.Записать(РежимЗаписиДокумента.Проведение);
			Выборка.Ссылка.ПолучитьОбъект().УстановитьПометкуУдаления(Истина);
			
			// Создаем счет-фактуру		
			СчетФактура = Документы.СчетФактураВыданный.СоздатьДокумент();			
			СчетФактура.Заполнить(НовыйДокументКорректировки.Ссылка); 
			СчетФактура.ОпределениеПараметровСчетаФактуры();
			СчетФактура.Контрагент                  = Выборка.Контрагент;
			СчетФактура.ДоговорКонтрагента          = Выборка.ДоговорКонтрагента;
			СчетФактура.Номер                       = Выборка.НомерСчетаФактуры;
			СчетФактура.Дата                        = Выборка.Дата;
			СчетФактура.ВидСчетаФактуры				= Перечисления.ВидСчетаФактурыВыставленного.Корректировочный;
			СчетФактура.НомерИсходногоДокумента     = Выборка.НомерИсходногоДокумента;
			СчетФактура.ДатаИсходногоДокумента      = Выборка.ДатаИсходногоДокумента;
			СчетФактура.Комментарий                 = "## Создан на основании: " + Выборка.Ссылка + " ##";
			
			СчетФактура.ДатаНомерДокументовОплаты.Добавить();
						
			Попытка
				СчетФактура.Записать(РежимЗаписиДокумента.Проведение);				
			Исключение
				ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки());
			КонецПопытки;
			
		Исключение
			ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки());
		КонецПопытки;
		
	КонецЦикла;	
	
	// Обработка корректировочных счетов-фактур полученных
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УдалитьКорректировочныйСчетФактураПолученный.Ссылка,
	|	УдалитьКорректировочныйСчетФактураПолученный.Дата КАК Дата,
	|	УдалитьКорректировочныйСчетФактураПолученный.Организация КАК Организация,
	|	УдалитьКорректировочныйСчетФактураПолученный.Контрагент КАК Контрагент,
	|	УдалитьКорректировочныйСчетФактураПолученный.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	УдалитьКорректировочныйСчетФактураПолученный.СчетФактура КАК ДокументПоступления,
	|	УдалитьКорректировочныйСчетФактураПолученный.НомерВходящегоДокумента КАК НомерВходящегоДокумента,
	|	УдалитьКорректировочныйСчетФактураПолученный.ДатаВходящегоДокумента КАК ДатаВходящегоДокумента,
	|	УдалитьКорректировочныйСчетФактураПолученный.ВалютаДокумента КАК ВалютаДокумента,
	|	УдалитьКорректировочныйСчетФактураПолученный.СчетФактура.ДатаВходящегоДокумента КАК ДатаИсходногоДокумента,
	|	УдалитьКорректировочныйСчетФактураПолученный.СчетФактура.НомерВходящегоДокумента КАК НомерИсходногоДокумента,
	|	УдалитьКорректировочныйСчетФактураПолученный.ВосстановлениеНДС.(
	|		СтавкаНДС КАК СтавкаНДС,
	|		СуммаНДС КАК СуммаНДС,
	|		УдалитьКорректировочныйСчетФактураПолученный.ВосстановлениеНДС.Сумма - УдалитьКорректировочныйСчетФактураПолученный.ВосстановлениеНДС.СуммаНДС КАК Сумма,
	|		ВидЦенности КАК ВидЦенности
	|	),
	|	УдалитьКорректировочныйСчетФактураПолученный.ВычетНДС.(
	|		СтавкаНДС КАК СтавкаНДС,
	|		СуммаНДС КАК СуммаНДС,
	|		УдалитьКорректировочныйСчетФактураПолученный.ВычетНДС.Сумма - УдалитьКорректировочныйСчетФактураПолученный.ВычетНДС.СуммаНДС КАК Сумма,
	|		ВидЦенности КАК ВидЦенности
	|	)
	|ИЗ
	|	Документ.УдалитьКорректировочныйСчетФактураПолученный КАК УдалитьКорректировочныйСчетФактураПолученный
	|ГДЕ
	|	УдалитьКорректировочныйСчетФактураПолученный.Проведен";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НовыйДокументКорректировки = Документы.КорректировкаПоступления.СоздатьДокумент();
		НовыйДокументКорректировки.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение;
		НовыйДокументКорректировки.ВосстановитьНДС = Истина;
		НовыйДокументКорректировки.УчитыватьНДС    = Истина;
		
		ЗаполнитьЗначенияСвойств(НовыйДокументКорректировки, Выборка);		
		
		ВыборкаВосстановлениеНДС = Выборка.ВосстановлениеНДС.Выбрать();
		Пока ВыборкаВосстановлениеНДС.Следующий() Цикл			
			Если ВыборкаВосстановлениеНДС.ВидЦенности = Перечисления.ВидыЦенностей.ПрочиеРаботыИУслуги Тогда
				НоваяСтрока = НовыйДокументКорректировки.Услуги.Добавить();			
				НоваяСтрока.СтавкаНДС           = ВыборкаВосстановлениеНДС.СтавкаНДС;
				НоваяСтрока.СуммаДоИзменения    = ВыборкаВосстановлениеНДС.Сумма;
				НоваяСтрока.СуммаНДСДоИзменения = ВыборкаВосстановлениеНДС.СуммаНДС;
				НоваяСтрока.ЕстьВДокументеПоступления = Истина;			
				ПолучитьСчетУчетаПоВидуЦенности(НоваяСтрока.СчетЗатрат, НоваяСтрока.СчетУчетаНДС, ВыборкаВосстановлениеНДС.ВидЦенности, Выборка.ДоговорКонтрагента, ВалютаРегламентированногоУчета);
			Иначе
				НоваяСтрока = НовыйДокументКорректировки.Товары.Добавить();			
				НоваяСтрока.СтавкаНДС           = ВыборкаВосстановлениеНДС.СтавкаНДС;
				НоваяСтрока.СуммаДоИзменения    = ВыборкаВосстановлениеНДС.Сумма;
				НоваяСтрока.СуммаНДСДоИзменения = ВыборкаВосстановлениеНДС.СуммаНДС;
				НоваяСтрока.ЕстьВДокументеПоступления = Истина;			
				ПолучитьСчетУчетаПоВидуЦенности(НоваяСтрока.СчетУчетаБУ, НоваяСтрока.СчетУчетаНДС, ВыборкаВосстановлениеНДС.ВидЦенности, Выборка.ДоговорКонтрагента, ВалютаРегламентированногоУчета);
			КонецЕсли;
		КонецЦикла;
		
		ВыборкаВычетНДС = Выборка.ВычетНДС.Выбрать();
		Пока ВыборкаВычетНДС.Следующий() Цикл			
			Если ВыборкаВычетНДС.ВидЦенности = Перечисления.ВидыЦенностей.ПрочиеРаботыИУслуги Тогда
				НоваяСтрока = НовыйДокументКорректировки.Услуги.Добавить();			
				НоваяСтрока.СтавкаНДС = ВыборкаВычетНДС.СтавкаНДС;
				НоваяСтрока.Сумма     = ВыборкаВычетНДС.Сумма;
				НоваяСтрока.СуммаНДС  = ВыборкаВычетНДС.СуммаНДС;
				НоваяСтрока.ЕстьВДокументеПоступления = Истина;
				ПолучитьСчетУчетаПоВидуЦенности(НоваяСтрока.СчетЗатрат, НоваяСтрока.СчетУчетаНДС, ВыборкаВычетНДС.ВидЦенности, Выборка.ДоговорКонтрагента, ВалютаРегламентированногоУчета);
			Иначе
				НоваяСтрока = НовыйДокументКорректировки.Товары.Добавить();			
				НоваяСтрока.СтавкаНДС = ВыборкаВычетНДС.СтавкаНДС;
				НоваяСтрока.Сумма     = ВыборкаВычетНДС.Сумма;
				НоваяСтрока.СуммаНДС  = ВыборкаВычетНДС.СуммаНДС;
				НоваяСтрока.ЕстьВДокументеПоступления = Истина;
				ПолучитьСчетУчетаПоВидуЦенности(НоваяСтрока.СчетУчетаБУ, НоваяСтрока.СчетУчетаНДС, ВыборкаВычетНДС.ВидЦенности, Выборка.ДоговорКонтрагента, ВалютаРегламентированногоУчета);
			КонецЕсли;
		КонецЦикла;
		
		НовыйДокументКорректировки.корректироватьБУиНУ = Ложь;
		НовыйДокументКорректировки.Комментарий         = "## Создан на основании: " + Выборка.Ссылка + " ##";
		
	    Попытка
    	    НовыйДокументКорректировки.Записать(РежимЗаписиДокумента.Проведение);
			Выборка.Ссылка.ПолучитьОбъект().УстановитьПометкуУдаления(Истина);
			
			// Создаем счет-фактуру		
			СчетФактура = Документы.СчетФактураПолученный.СоздатьДокумент();			
			СчетФактура.Заполнить(НовыйДокументКорректировки.Ссылка);
			СчетФактура.ОпределениеПараметровСчетаФактуры();
			СчетФактура.Контрагент                  = Выборка.Контрагент;
			СчетФактура.ДоговорКонтрагента          = Выборка.ДоговорКонтрагента;
			СчетФактура.НомерВходящегоДокумента     = Выборка.НомерВходящегоДокумента;
			СчетФактура.ДатаВходящегоДокумента      = Выборка.ДатаВходящегоДокумента;
			СчетФактура.Дата                        = Выборка.Дата;
			СчетФактура.ВидСчетаФактуры             = Перечисления.ВидСчетаФактурыПолученного.Корректировочный;
			СчетФактура.НомерИсходногоДокумента     = Выборка.НомерИсходногоДокумента;
			СчетФактура.ДатаИсходногоДокумента      = Выборка.ДатаИсходногоДокумента;
			СчетФактура.Комментарий                 = "## Создан на основании: " + Выборка.Ссылка + " ##";
			
			Попытка
				СчетФактура.Записать(РежимЗаписиДокумента.Проведение);				
			Исключение
				ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки());
			КонецПопытки;
			
		Исключение
			ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки());
		КонецПопытки;
		
	КонецЦикла;	
	
КонецПроцедуры

Процедура ПолучитьСчетУчетаПоВидуЦенности(СчетУчета, СчетУчетаНДС, ВидЦенности, ДоговорКонтрагента, ВалютаРегламентированногоУчета)
		
	Если ВидЦенности = Перечисления.ВидыЦенностей.АвансыВыданные Тогда
		ИмяСчета = "РасчетыПоАвансамВыданным";
		Если ДоговорКонтрагента.ВалютаВзаиморасчетов <> ВалютаРегламентированногоУчета 
			И ДоговорКонтрагента.РасчетыВУсловныхЕдиницах Тогда
			ИмяСчета = ИмяСчета + "УЕ";
		ИначеЕсли ДоговорКонтрагента.ВалютаВзаиморасчетов <> ВалютаРегламентированногоУчета 
			И НЕ ДоговорКонтрагента.РасчетыВУсловныхЕдиницах Тогда
			ИмяСчета = ИмяСчета + "Вал";
		КонецЕсли;
		СчетУчета    =  ПланыСчетов.Хозрасчетный[ИмяСчета];
	  	СчетУчетаНДС = 	ПланыСчетов.Хозрасчетный.НДСпоАвансамИПредоплатамВыданным;
		
	ИначеЕсли ВидЦенности = Перечисления.ВидыЦенностей.АвансыПолученные Тогда
		ИмяСчета = "РасчетыПоАвансамПолученным";
		Если ДоговорКонтрагента.ВалютаВзаиморасчетов <> ВалютаРегламентированногоУчета 
			И ДоговорКонтрагента.РасчетыВУсловныхЕдиницах Тогда
			ИмяСчета = ИмяСчета + "УЕ";
		ИначеЕсли ДоговорКонтрагента.ВалютаВзаиморасчетов <> ВалютаРегламентированногоУчета 
			И НЕ ДоговорКонтрагента.РасчетыВУсловныхЕдиницах Тогда
			ИмяСчета = ИмяСчета + "Вал";
		КонецЕсли;
		СчетУчета    =  ПланыСчетов.Хозрасчетный[ИмяСчета];
	  	СчетУчетаНДС = 	ПланыСчетов.Хозрасчетный.НДСпоАвансамИПредоплатам;
		
	ИначеЕсли ВидЦенности = Перечисления.ВидыЦенностей.АвансыПолученные0 Тогда
		ИмяСчета = "РасчетыПоАвансамПолученным";
		Если ДоговорКонтрагента.ВалютаВзаиморасчетов <> ВалютаРегламентированногоУчета 
			И ДоговорКонтрагента.РасчетыВУсловныхЕдиницах Тогда
			ИмяСчета = ИмяСчета + "УЕ";
		ИначеЕсли ДоговорКонтрагента.ВалютаВзаиморасчетов <> ВалютаРегламентированногоУчета 
			И НЕ ДоговорКонтрагента.РасчетыВУсловныхЕдиницах Тогда
			ИмяСчета = ИмяСчета + "Вал";
		КонецЕсли;
		СчетУчета    =  ПланыСчетов.Хозрасчетный[ИмяСчета];
	  	СчетУчетаНДС = 	ПланыСчетов.Хозрасчетный.НДСпоАвансамИПредоплатам;
		
	ИначеЕсли ВидЦенности = Перечисления.ВидыЦенностей.ВнутреннееПотребление Тогда
		СчетУчета    =  ПланыСчетов.Хозрасчетный.ОбщехозяйственныеРасходы;
	  	СчетУчетаНДС = 	ПланыСчетов.Хозрасчетный.НДСпоПриобретеннымМПЗ;
		
	ИначеЕсли ВидЦенности = Перечисления.ВидыЦенностей.Возврат Тогда
		ИмяСчета = "РасчетыПоПретензиям";
		Если ДоговорКонтрагента.ВалютаВзаиморасчетов <> ВалютаРегламентированногоУчета 
			И ДоговорКонтрагента.РасчетыВУсловныхЕдиницах Тогда
			ИмяСчета = ИмяСчета + "УЕ";
		ИначеЕсли ДоговорКонтрагента.ВалютаВзаиморасчетов <> ВалютаРегламентированногоУчета 
			И НЕ ДоговорКонтрагента.РасчетыВУсловныхЕдиницах Тогда
			ИмяСчета = ИмяСчета + "Вал";
		КонецЕсли;
		СчетУчета    =  ПланыСчетов.Хозрасчетный[ИмяСчета];
	  	СчетУчетаНДС = 	ПланыСчетов.Хозрасчетный.НДСпоПриобретеннымМПЗ;
		
	ИначеЕсли ВидЦенности = Перечисления.ВидыЦенностей.ИмуществоСУчетомНДС Тогда
		СчетУчета    =  ПланыСчетов.Хозрасчетный.СтроительствоОбъектовОсновныхСредств;
	  	СчетУчетаНДС = 	ПланыСчетов.Хозрасчетный.НДСпоПриобретеннымМПЗ;
		
	ИначеЕсли ВидЦенности = Перечисления.ВидыЦенностей.КомандировочныеРасходы Тогда
		СчетУчета    =  ПланыСчетов.Хозрасчетный.ОбщехозяйственныеРасходы;
	  	СчетУчетаНДС = 	ПланыСчетов.Хозрасчетный.НДСпоПриобретеннымУслугам;
		
	ИначеЕсли ВидЦенности = Перечисления.ВидыЦенностей.Материалы Тогда
		СчетУчета    =  ПланыСчетов.Хозрасчетный.СырьеИМатериалы;
	  	СчетУчетаНДС = 	ПланыСчетов.Хозрасчетный.НДСпоПриобретеннымМПЗ;
		
	ИначеЕсли ВидЦенности = Перечисления.ВидыЦенностей.НалоговыйАгентАренда Тогда
		СчетУчета    =  ПланыСчетов.Хозрасчетный.ОбщехозяйственныеРасходы;
	  	СчетУчетаНДС = 	ПланыСчетов.Хозрасчетный.РасчетыНДСНалоговогоАгента;
		
	ИначеЕсли ВидЦенности = Перечисления.ВидыЦенностей.НалоговыйАгентРеализацияИмущества Тогда
		СчетУчета    =  ПланыСчетов.Хозрасчетный.ОбщехозяйственныеРасходы;
	  	СчетУчетаНДС = 	ПланыСчетов.Хозрасчетный.РасчетыНДСНалоговогоАгента;
		
	ИначеЕсли ВидЦенности = Перечисления.ВидыЦенностей.НалоговыйАгентИностранцы Тогда
		СчетУчета    =  ПланыСчетов.Хозрасчетный.ОбщехозяйственныеРасходы;
	  	СчетУчетаНДС = 	ПланыСчетов.Хозрасчетный.РасчетыНДСНалоговогоАгента;
		
	ИначеЕсли ВидЦенности = Перечисления.ВидыЦенностей.НалоговыйАгентКомитент Тогда
		СчетУчета    =  ПланыСчетов.Хозрасчетный.ОбщехозяйственныеРасходы;
	  	СчетУчетаНДС = 	ПланыСчетов.Хозрасчетный.РасчетыНДСНалоговогоАгента;
		
	ИначеЕсли ВидЦенности = Перечисления.ВидыЦенностей.НМА Тогда
		СчетУчета    =  ПланыСчетов.Хозрасчетный.ПриобретениеНематериальныхАктивов;
	  	СчетУчетаНДС = 	ПланыСчетов.Хозрасчетный.НДСпоПриобретеннымНематериальнымАктивам;
		
	ИначеЕсли ВидЦенности = Перечисления.ВидыЦенностей.Оборудование Тогда
		СчетУчета    =  ПланыСчетов.Хозрасчетный.ПриобретениеОбъектовОсновныхСредств;
	  	СчетУчетаНДС = 	ПланыСчетов.Хозрасчетный.НДСприПриобретенииОсновныхСредств;

	ИначеЕсли ВидЦенности = Перечисления.ВидыЦенностей.ОбъектыНезавершенногоСтроительства Тогда
		СчетУчета    =  ПланыСчетов.Хозрасчетный.СтроительствоОбъектовОсновныхСредств;
	  	СчетУчетаНДС = 	ПланыСчетов.Хозрасчетный.НДСприСтроительствеОсновныхСредств;
		
	ИначеЕсли ВидЦенности = Перечисления.ВидыЦенностей.ОС Тогда
		СчетУчета    =  ПланыСчетов.Хозрасчетный.ПриобретениеОбъектовОсновныхСредств;
	  	СчетУчетаНДС = 	ПланыСчетов.Хозрасчетный.НДСприПриобретенииОсновныхСредств;
		
	ИначеЕсли ВидЦенности = Перечисления.ВидыЦенностей.ПосредническиеУслуги Тогда
		СчетУчета    =  ПланыСчетов.Хозрасчетный.ОбщехозяйственныеРасходы;
	  	СчетУчетаНДС = 	ПланыСчетов.Хозрасчетный.НДСпоПриобретеннымУслугам;
		
	ИначеЕсли ВидЦенности = Перечисления.ВидыЦенностей.ПредставительскиеРасходы Тогда
		СчетУчета    =  ПланыСчетов.Хозрасчетный.ОбщехозяйственныеРасходы;
	  	СчетУчетаНДС = 	ПланыСчетов.Хозрасчетный.НДСпоПриобретеннымУслугам;
		
	ИначеЕсли ВидЦенности = Перечисления.ВидыЦенностей.ПрочиеРаботыИУслуги Тогда
		СчетУчета    =  ПланыСчетов.Хозрасчетный.ОбщехозяйственныеРасходы;
	  	СчетУчетаНДС = 	ПланыСчетов.Хозрасчетный.НДСпоПриобретеннымУслугам;
		
	ИначеЕсли ВидЦенности = Перечисления.ВидыЦенностей.СМРПодрядные Тогда
		СчетУчета    =  ПланыСчетов.Хозрасчетный.СтроительствоОбъектовОсновныхСредств;
	  	СчетУчетаНДС = 	ПланыСчетов.Хозрасчетный.НДСпоПриобретеннымУслугам;
		
	ИначеЕсли ВидЦенности = Перечисления.ВидыЦенностей.СМРСобственнымиСилами Тогда
		СчетУчета    =  ПланыСчетов.Хозрасчетный.СтроительствоОбъектовОсновныхСредств;
	  	СчетУчетаНДС = 	ПланыСчетов.Хозрасчетный.НДСпоПриобретеннымУслугам;
		
	ИначеЕсли ВидЦенности = Перечисления.ВидыЦенностей.СуммыСвязанныеСРасчетамиПоОплате Тогда
		СчетУчета    =  ПланыСчетов.Хозрасчетный.ОбщехозяйственныеРасходы;
	  	СчетУчетаНДС = 	ПланыСчетов.Хозрасчетный.РасчетыПоНДСотложенномуДляУплатыВБюджет;
		
	ИначеЕсли ВидЦенности = Перечисления.ВидыЦенностей.ТаможенныеПлатежи Тогда
		СчетУчета    =  ПланыСчетов.Хозрасчетный.ОбщехозяйственныеРасходы;
	  	СчетУчетаНДС = 	ПланыСчетов.Хозрасчетный.НДСуплачиваемыйТаможеннымОрганам;
		
	ИначеЕсли ВидЦенности = Перечисления.ВидыЦенностей.ТаможенныеПлатежиОС Тогда
		СчетУчета    =  ПланыСчетов.Хозрасчетный.ПриобретениеОбъектовОсновныхСредств;
	  	СчетУчетаНДС = 	ПланыСчетов.Хозрасчетный.НДСуплачиваемыйТаможеннымОрганам;
		
	ИначеЕсли ВидЦенности = Перечисления.ВидыЦенностей.Товары Тогда
		СчетУчета    =  ПланыСчетов.Хозрасчетный.ТоварыНаСкладах;
	  	СчетУчетаНДС = 	ПланыСчетов.Хозрасчетный.НДСпоПриобретеннымМПЗ;
		
	ИначеЕсли ВидЦенности = Перечисления.ВидыЦенностей.ТоварыУслугиКомитентов Тогда
		СчетУчета    =  ПланыСчетов.Хозрасчетный.ТоварыНаСкладе;
	  	СчетУчетаНДС = 	ПланыСчетов.Хозрасчетный.НДСпоПриобретеннымМПЗ;
	Иначе
		СчетУчета    =  ПланыСчетов.Хозрасчетный.ОбщехозяйственныеРасходы;
	  	СчетУчетаНДС = 	ПланыСчетов.Хозрасчетный.НДСпоПриобретеннымУслугам;
	КонецЕсли;
		
КонецПроцедуры

// У счетов-фактур полученных добавлен реквизит ВидСчетаФактуры
// 
Процедура УстановитьВидСчетаФактурыПолученного() Экспорт
	
	#Если Клиент Тогда
	//Обновление документов "Счет-фактура полученный" установка вида счета-фактуры
	Состояние("Выполняется обновление документов ""Счет-фактура полученный""");
	#КонецЕсли
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СчетФактураПолученный.Ссылка
	|ИЗ
	|	Документ.СчетФактураПолученный КАК СчетФактураПолученный
	|ГДЕ
	|	СчетФактураПолученный.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыПолученного.ПустаяСсылка)";
	
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			СчетФактура = Выборка.Ссылка.ПолучитьОбъект();
						
			Если СчетФактура.УдалитьНаАванс Тогда
				СчетФактура.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.НаАванс;
			Иначе
				СчетФактура.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.НаПоступление;
			КонецЕсли;
			
			Попытка
				СчетФактура.ОбменДанными.Загрузка = Истина;
				СчетФактура.Записать(РежимЗаписиДокумента.Запись);
			Исключение
				ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки());
			КонецПопытки;
			
		КонецЦикла;
		
	КонецЕсли;
	
	#Если Клиент Тогда
		Состояние("");
	#КонецЕсли

	
КонецПроцедуры

// Процедура производит установку даты применения Постановления 1137 в значение 01.04.2012
//
Процедура УстановитьДатуПримененияПостановления1137() Экспорт 
	
	НачалоПримененияИсправленныхСчетовФактур = Константы.НачалоПримененияИсправленныхСчетовФактур.Получить();
	
	Если НЕ ЗначениеЗаполнено(НачалоПримененияИсправленныхСчетовФактур)
		ИЛИ НачалоПримененияИсправленныхСчетовФактур > '20120401' Тогда
		
		Константы.НачалоПримененияИсправленныхСчетовФактур.Установить('20120401');
		
	КонецЕсли;
		
КонецПроцедуры

// В документ добавлена новая т.ч. Покупатели, в неё необходимо добавить одну строку.
// В колонку Покупатель пишем контрагента-комиссионера из шапки
//
Процедура ЗаполнитьТЧПокупателиОтчетКомиссионераОПродажах() Экспорт
	
	#Если Клиент Тогда
	//Обновление документов "Отчет комиссионера о продажах", добавление строки в табличную часть Покупатели
	Состояние("Выполняется обновление документов ""Отчет комиссионера о продажах""");
	#КонецЕсли
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОтчетКомиссионераОПродажах.Ссылка КАК Ссылка,
	|	ОтчетКомиссионераОПродажах.Контрагент
	|ПОМЕСТИТЬ ВТ_ОтчетыКомиссионера
	|ИЗ
	|	Документ.ОтчетКомиссионераОПродажах КАК ОтчетКомиссионераОПродажах
	|
	|СГРУППИРОВАТЬ ПО
	|	ОтчетКомиссионераОПродажах.Ссылка,
	|	ОтчетКомиссионераОПродажах.Контрагент
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(ОтчетКомиссионераОПродажах.Покупатели.НомерСтроки) = 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ОтчетыКомиссионера.Ссылка КАК ОтчетКомиссионера,
	|	СчетФактураВыданный.Ссылка КАК Ссылка,
	|	СчетФактураВыданный.Дата КАК Дата,
	|	ВЫБОР
	|		КОГДА СчетФактураВыданный.Проведен
	|			ТОГДА 2
	|		КОГДА СчетФактураВыданный.ПометкаУдаления
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК Приоритет
	|ПОМЕСТИТЬ ВТ_СчетФактуры
	|ИЗ
	|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ОтчетыКомиссионера КАК ВТ_ОтчетыКомиссионера
	|		ПО СчетФактураВыданный.ДокументОснование = ВТ_ОтчетыКомиссионера.Ссылка
	|			И (СчетФактураВыданный.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.НаРеализацию))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОтчетКомиссионера,
	|	Приоритет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_СчетФактуры.ОтчетКомиссионера КАК ОтчетКомиссионера,
	|	МАКСИМУМ(ВТ_СчетФактуры.Приоритет) КАК Приоритет
	|ПОМЕСТИТЬ ВТ_Приоритет
	|ИЗ
	|	ВТ_СчетФактуры КАК ВТ_СчетФактуры
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_СчетФактуры.ОтчетКомиссионера
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОтчетКомиссионера,
	|	Приоритет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ОтчетыКомиссионера.Ссылка КАК Ссылка,
	|	ВТ_ОтчетыКомиссионера.Контрагент КАК Покупатель,
	|	ВЫБОР
	|		КОГДА ВТ_СчетФактуры.Ссылка ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ВыставленСФ,
	|	ВТ_СчетФактуры.Дата КАК ДатаСФ,
	|	ВТ_СчетФактуры.Ссылка КАК СчетФактура
	|ИЗ
	|	ВТ_ОтчетыКомиссионера КАК ВТ_ОтчетыКомиссионера
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Приоритет КАК ВТ_Приоритет
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СчетФактуры КАК ВТ_СчетФактуры
	|			ПО ВТ_Приоритет.ОтчетКомиссионера = ВТ_СчетФактуры.ОтчетКомиссионера
	|				И ВТ_Приоритет.Приоритет = ВТ_СчетФактуры.Приоритет
	|		ПО ВТ_ОтчетыКомиссионера.Ссылка = ВТ_Приоритет.ОтчетКомиссионера";
	
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			ОтчетКомиссионера = Выборка.Ссылка.ПолучитьОбъект();
			СтрокаТЧ = ОтчетКомиссионера.Покупатели.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТЧ, Выборка);
						
			Попытка
				ОтчетКомиссионера.ОбменДанными.Загрузка = Истина;
				ОтчетКомиссионера.Записать(РежимЗаписиДокумента.Запись);
			Исключение
				ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки());
			КонецПопытки;
		КонецЦикла;
	КонецЕсли;
	
	#Если Клиент Тогда
		Состояние("");
	#КонецЕсли
	
КонецПроцедуры

// Процедура формирует формирует движения счетов фактру выаднных по РН НДСЗаписиКнигиПродаж
// 
//
// Параметры:
//  нет
//
Процедура СформироватьДвиженияСчетовФактурПоДокументамОплаты() Экспорт
	
	Если НЕ глЗначениеПеременной("ИспользоватьРасширеннуюАналитикуУчетаНоменклатурыИЗатрат")
		И НЕ глЗначениеПеременной("ПараметрыПартионногоУчета").СписыватьПартииПриПроведенииДокументовБух Тогда
		Возврат;
	КонецЕсли;
	
	#Если Клиент Тогда
	Состояние("Выполняется обновление документов ""Счет-фактура выданный""");
	#КонецЕсли	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СчетФактураВыданныйДатаНомерДокументовОплаты.Ссылка
	|ИЗ
	|	Документ.СчетФактураВыданный.ДатаНомерДокументовОплаты КАК СчетФактураВыданныйДатаНомерДокументовОплаты
	|ГДЕ
	|	СчетФактураВыданныйДатаНомерДокументовОплаты.ДатаПлатежноРасчетногоДокумента <> ДАТАВРЕМЯ(1, 1, 1)
	|	И СчетФактураВыданныйДатаНомерДокументовОплаты.Ссылка.Проведен
	|	И СчетФактураВыданныйДатаНомерДокументовОплаты.Ссылка.Дата >= ДАТАВРЕМЯ(2014, 10, 1)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		УчетНДСФормированиеДвижений.СформироватьДвиженияНДСНомераДокументовОплаты(Выборка.Ссылка, Неопределено);
		
	КонецЦикла;
	
	#Если Клиент Тогда
		Состояние("");
	#КонецЕсли	
	
КонецПроцедуры

Процедура СобратьДанныеДляПечатиСчетФактурыВыданного(Ссылка, ДанныеДляПечати, УчетнаяПолитика) Экспорт
	
	Если Ссылка.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный
	 ИЛИ Ссылка.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.КорректировочныйНаАванс Тогда
		Корректировочный = Истина;
	Иначе
		Корректировочный = Ложь;
	КонецЕсли;
	
	Если Ссылка.СформированПриВводеНачальныхОстатковНДС Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрДокОснования Из Ссылка.ДокументыОснования Цикл
		// Получить экземпляр документа на печать
		
		Если НЕ ЗначениеЗаполнено(СтрДокОснования.ДокументОснование) Тогда
			Продолжить;
		КонецЕсли;
		
		ЭкземплярДанныхДляПечати = СобратьДанныеДляПечатиСчетФактурыВыданногоПоДокументу(СтрДокОснования.ДокументОснование, Ссылка, УчетнаяПолитика);
		
		// Заполнение данных для печати
		Если ДанныеДляПечати = Неопределено Тогда
			ДанныеДляПечати = ЭкземплярДанныхДляПечати;
		Иначе
			
			Для каждого СтрДанных Из ЭкземплярДанныхДляПечати Цикл
				
				Если СтрДанных.Ключ = "ТабличнаяЧасть" Тогда
					СтараяТабЧасть = ДанныеДляПечати.ТабличнаяЧасть;
					НоваяТабЧасть  = СтрДанных.Значение;
					
					Для каждого НоваяСтрокаТабЧасти Из НоваяТабЧасть Цикл
						СтрокаТабЧасти = СтараяТабЧасть.Добавить();
						Для каждого ТекКол Из НоваяТабЧасть.Колонки Цикл
							Если СтараяТабЧасть.Колонки.Найти(ТекКол.Имя) <> Неопределено Тогда
								СтрокаТабЧасти[ТекКол.Имя] = НоваяСтрокаТабЧасти[ТекКол.Имя];
							КонецЕсли;
						КонецЦикла;
					КонецЦикла;
					
				ИначеЕсли НЕ ДанныеДляПечати.Свойство(СтрДанных.Ключ) Тогда
					// Если данный параметр для печати шапки документа еще не  определен - то определяем его
					ДанныеДляПечати.Вставить(СтрДанных.Ключ, СтрДанных.Значение);
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;

	КонецЦикла;	
		
	Если ТипЗнч(ДанныеДляПечати) = Тип("Соответствие") Тогда
		Возврат;
	ИначеЕсли ДанныеДляПечати = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ Корректировочный Тогда
	
		ТаблицаДатОплат = Ссылка.ДатаНомерДокументовОплаты.Выгрузить();
		ТаблицаДатОплат.Свернуть("ДатаПлатежноРасчетногоДокумента, НомерПлатежноРасчетногоДокумента");
		СтрокиКУдалению = Новый Массив();
		Для Каждого СтрокаОплат Из ТаблицаДатОплат Цикл
			Если Не ЗначениеЗаполнено(СтрокаОплат.ДатаПлатежноРасчетногоДокумента) 
				И ПустаяСтрока(СтрокаОплат.НомерПлатежноРасчетногоДокумента) Тогда
				СтрокиКУдалению.Добавить(СтрокаОплат);
			КонецЕсли; 
		КонецЦикла; 
		Для Каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
			ТаблицаДатОплат.Удалить(СтрокаКУдалению);
		КонецЦикла; 
		
		ДанныеДляПечати.Вставить("ТаблицаДатОплат", ТаблицаДатОплат);
		
	КонецЕсли;
	
	Если Корректировочный И ДанныеДляПечати <> Неопределено Тогда
		
		КолонкиГруппировок = ""
		+"Номенклатура,"
		+"ТоварКодТНВЭД,"
		+"ТоварКодТНВЭДДоИзменения,"
		+"НаименованиеТовара,"
		+"Серия,"
		+"Характеристика,"
		+"НаименованиеЕдиницыИзмерения,"
		+"ЕдиницаИзмеренияКод,"
		+"ЦенаДоИзменения,"	
		+"ЦенаПослеИзменения,"
		+"СтавкаНДС,"
		+"СтавкаНДСПослеИзменения";
		
		КолонкиСуммирования = ""
		+"СуммаНДСДоИзменения,"
		+"СуммаНДСПослеИзменения,"
		+"СтоимостьСНДСДоИзменения,"
		+"СтоимостьСНДСПослеИзменения,"
		+"РазницаБезНДСУвеличение,"
		+"РазницаБезНДСУменьшение,"
		+"РазницаНДСУвеличение,"
		+"РазницаНДСУменьшение,"
		+"РазницаСНДСУвеличение,"
		+"РазницаСНДСУменьшение,"
		+"СтоимостьБезНДСДоИзменения,"
		+"СтоимостьБезНДСПослеИзменения,"
		+"КоличествоДоИзменения,"
		+"КоличествоПослеИзменения";
		
		ДанныеДляПечати.ТабличнаяЧасть.Свернуть(КолонкиГруппировок, КолонкиСуммирования);
		
	КонецЕсли; 	

КонецПроцедуры

Функция СобратьДанныеДляПечатиСчетФактурыВыданногоПоДокументу(ДокументОснование, Ссылка, УчетнаяПолитика)
	
	мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	Корректировочный = Ссылка.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный;
	
	ЭкземплярДанныхДляПечати = Неопределено;
	ТипОснования = ТипЗнч(ДокументОснование);
	
	Если Ссылка.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАванс
		ИЛИ Ссылка.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитента
		ИЛИ Ссылка.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаСуммовуюРазницу Тогда
		ЭкземплярДанныхДляПечати = СобратьДанныеСФнаАвансиСуммовуюРазницу(Ссылка);
	ИначеЕсли Ссылка.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.КорректировочныйНаАванс Тогда
		ЭкземплярДанныхДляПечати = СобратьДанныеДляПечатиКорректировочногоСчетаФактурыНаАванс(Ссылка);
	ИначеЕсли Ссылка.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НалоговыйАгент Тогда
		ЭкземплярДанныхДляПечати = СобратьДанныеСФНалоговогоАгента(Ссылка);
	ИначеЕсли ТипОснования      = Тип("ДокументСсылка.ОтчетКомитентуОПродажах") Тогда
		ЭкземплярДанныхДляПечати = СобратьДанныеПоОтчетКомитентуОПродажах(ДокументОснование, Ссылка);
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		ЭкземплярДанныхДляПечати = СобратьДанныеПоРеализацияТоваровУслуг(ДокументОснование, Ссылка);
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
		ЭкземплярДанныхДляПечати = СобратьДанныеПоВозвратуТоваровПоставщику(ДокументОснование, Ссылка);
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ВозвратТоваровПоставщикуИзНТТ") Тогда
		ЭкземплярДанныхДляПечати = СобратьДанныеПоВозвратуТоваровПоставщикуИзНТТ(ДокументОснование, Ссылка);
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.РеализацияУслугПоПереработке") Тогда
		ЭкземплярДанныхДляПечати = СобратьДанныеПоРеализацияУслугПоПереработке(ДокументОснование, Ссылка);
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") Тогда
		ЭкземплярДанныхДляПечати = СобратьДанныеПоОтчетКомиссионераОПродажах(ДокументОснование, Ссылка);
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.АктОбОказанииПроизводственныхУслуг") Тогда
		ЭкземплярДанныхДляПечати = СобратьДанныеПоАкту(ДокументОснование, Ссылка);
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ПередачаОС") Тогда
		ЭкземплярДанныхДляПечати = СобратьДанныеПоПередачеОС(ДокументОснование, Ссылка);
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.НачислениеНДСпоСМРхозспособом") Тогда
		ЭкземплярДанныхДляПечати = СобратьДанныеПоНачислениеНДСпоСМРхозспособом(ДокументОснование, Ссылка);
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ПередачаНМА") Тогда
		ЭкземплярДанныхДляПечати = СобратьДанныеПоПередачеНМАОрганизаций(ДокументОснование, Ссылка);
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ОтражениеРеализацииТоваровИУслугНДС") Тогда
		ЭкземплярДанныхДляПечати = СобратьДанныеПоОтражениюРеализацииТоваровИУслуг(ДокументОснование, Ссылка);
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.РеализацияОтгруженныхТоваров") 
		И ТипЗнч(ДокументОснование.ДокументОтгрузки) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		ЭкземплярДанныхДляПечати = СобратьДанныеПоРеализацияТоваровУслуг(ДокументОснование.ДокументОтгрузки, Ссылка);
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.РеализацияОтгруженныхТоваров") 
		И ТипЗнч(ДокументОснование.ДокументОтгрузки) = Тип("ДокументСсылка.ПередачаОС") Тогда
		ЭкземплярДанныхДляПечати = СобратьДанныеПоПередачеОС(ДокументОснование.ДокументОтгрузки, Ссылка);
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
		Если Корректировочный Тогда
			ЭкземплярДанныхДляПечати = СобратьДанныеДляПечатиКорректировочногоСчетаФактуры(ДокументОснование, Ссылка);
		Иначе
			ЭкземплярДанныхДляПечати = СобратьДанныеДляПечатиИсправленияСчетаФактуры(ДокументОснование, Ссылка);
		КонецЕсли;
	КонецЕсли;
	
	Если ЭкземплярДанныхДляПечати = Неопределено Тогда
		Возврат ЭкземплярДанныхДляПечати;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Ссылка.Руководитель) Тогда
		Если ЭкземплярДанныхДляПечати.Свойство("ФИОРуководителя") Тогда 
			ЭкземплярДанныхДляПечати.ФИОРуководителя = ОбщегоНазначения.ФамилияИнициалыФизЛица(Ссылка.Руководитель, , , , Ссылка.Дата);
		ИначеЕсли ЭкземплярДанныхДляПечати.Свойство("ФИОПБОЮЛ") Тогда
			ЭкземплярДанныхДляПечати.ФИОПБОЮЛ = ОбщегоНазначения.ФамилияИнициалыФизЛица(Ссылка.Руководитель, , , , Ссылка.Дата);
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Ссылка.ГлавныйБухгалтер) И ЭкземплярДанныхДляПечати.Свойство("ФИОГлавногоБухгалтера") Тогда
		ЭкземплярДанныхДляПечати.ФИОГлавногоБухгалтера = ОбщегоНазначения.ФамилияИнициалыФизЛица(Ссылка.ГлавныйБухгалтер);
	КонецЕсли;
	
	// Пересчет из уе в рубли
	Если Ссылка.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию
		И Ссылка.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах 
		И Не ЭкземплярДанныхДляПечати.Валюта = мВалютаРегламентированногоУчета Тогда
		
		ВерсияПостановления = УчетНДС.ПолучитьВерсиюПостановления(Ссылка.Дата);
		Если ВерсияПостановления = 2 Тогда
			ФормироватьСчетФактуруПоУЕвРублях = Истина;
		Иначе
			Если УчетнаяПолитика = Неопределено тогда
				УчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(Ссылка.Дата, Ссылка.Организация);
			КонецЕсли;
			ФормироватьСчетФактуруПоУЕвРублях = ЗначениеЗаполнено(УчетнаяПолитика) 
			И УчетнаяПолитика.Свойство("ФормироватьСчетФактуруПоУЕвРублях")
			И УчетнаяПолитика.ФормироватьСчетФактуруПоУЕвРублях;
		КонецЕсли;
		
		Если ФормироватьСчетФактуруПоУЕвРублях Тогда
			ПерезаполнитьСуммыПоУЕвРублях(ЭкземплярДанныхДляПечати, ДокументОснование, Ссылка);
			ЭкземплярДанныхДляПечати.Валюта = мВалютаРегламентированногоУчета;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ЭкземплярДанныхДляПечати; 
	
КонецФункции

// Функция собирает данные по документу основанию реализации и возвращает типизированную 
// структуру с данными
// 
Функция СобратьДанныеПоВозвратуТоваровПоставщику(ДокОснование, Ссылка)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", 	ДокОснование);
	Запрос.УстановитьПараметр("ПустойКонтрагент",  	Справочники.Контрагенты.ПустаяСсылка());
	РеквизитыДокОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокОснование, "Дата, Склад");
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", РеквизитыДокОснования.Склад);
	Запрос.УстановитьПараметр("ДатаСреза", 			РеквизитыДокОснования.Дата);

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВозвратТоваровПоставщику.Дата КАК ДатаДокумента,
	|	ВозвратТоваровПоставщику.Организация,
	|	ВозвратТоваровПоставщику.Организация КАК Поставщик,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВозвратТоваровПоставщику.Грузоотправитель, &ПустойКонтрагент) = &ПустойКонтрагент
	|			ТОГДА ""он же""
	|		ИНАЧЕ ВозвратТоваровПоставщику.Грузоотправитель
	|	КОНЕЦ КАК Грузоотправитель,
	|	ВозвратТоваровПоставщику.Подразделение КАК Подразделение,
	|	ВозвратТоваровПоставщику.Контрагент КАК Покупатель,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВозвратТоваровПоставщику.Грузополучатель, &ПустойКонтрагент) = &ПустойКонтрагент
	|			ТОГДА ВозвратТоваровПоставщику.Контрагент
	|		ИНАЧЕ ВозвратТоваровПоставщику.Грузополучатель
	|	КОНЕЦ КАК Грузополучатель,
	|	ВозвратТоваровПоставщику.СуммаДокумента КАК Сумма,
	|	ВозвратТоваровПоставщику.ВалютаДокумента КАК Валюта,
	|	ВозвратТоваровПоставщику.УчитыватьНДС КАК УчитыватьНДС,
	|	ВозвратТоваровПоставщику.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	ЕСТЬNULL(ОтветственныеЛица.ФизическоеЛицо, НЕОПРЕДЕЛЕНО) КАК ОтветственноеЛицо
	|ИЗ
	|	Документ.ВозвратТоваровПоставщику КАК ВозвратТоваровПоставщику
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛица.СрезПоследних(&ДатаСреза, СтруктурнаяЕдиница = &СтруктурнаяЕдиница) КАК ОтветственныеЛица
	|		ПО ВозвратТоваровПоставщику.Склад = ОтветственныеЛица.СтруктурнаяЕдиница
	|ГДЕ
	|	ВозвратТоваровПоставщику.Ссылка = &ДокументОснование";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокОснование);
	Запрос.УстановитьПараметр("ПустаяЕдиница", Справочники.ЕдиницыИзмерения.ПустаяСсылка());
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВозвратТоваровПоставщикуТовары.Номенклатура КАК Товар,
	|	ВЫРАЗИТЬ(ВозвратТоваровПоставщикуТовары.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК ТоварНаименование,
	|	ВЫБОР
	|		КОГДА ВозвратТоваровПоставщикуТовары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС0)
	|			ТОГДА ВозвратТоваровПоставщикуТовары.КодТНВЭД
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.КлассификаторТНВЭД.ПустаяСсылка)
	|	КОНЕЦ КАК ТоварКодТНВЭД,
	|	ВозвратТоваровПоставщикуТовары.Номенклатура.Код КАК ТоварКод,
	|	ВозвратТоваровПоставщикуТовары.Номенклатура.Артикул КАК ТоварАртикул,
	|	ВозвратТоваровПоставщикуТовары.СерияНоменклатуры.СтранаПроисхождения КАК СтранаПроисхождения,
	|	ВозвратТоваровПоставщикуТовары.СерияНоменклатуры.СтранаПроисхождения.Код КАК СтранаПроисхожденияКод,
	|	ВозвратТоваровПоставщикуТовары.СерияНоменклатуры.СтранаПроисхождения.Наименование КАК ПредставлениеСтраны,
	|	ВозвратТоваровПоставщикуТовары.СерияНоменклатуры.НомерГТД КАК НомерГТД,
	|	ВозвратТоваровПоставщикуТовары.СерияНоменклатуры.НомерГТД.Представление КАК ПредставлениеГТД,
	|	ВозвратТоваровПоставщикуТовары.СерияНоменклатуры.НомерГТД.РегистрационныйНомер КАК РегистрационныйНомерТД,
	|	ВозвратТоваровПоставщикуТовары.ЕдиницаИзмерения.Представление КАК ЕдиницаИзмерения,
	|	ВозвратТоваровПоставщикуТовары.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код КАК ЕдиницаИзмеренияКод,
	|	ВозвратТоваровПоставщикуТовары.Количество КАК Количество,
	|	ВозвратТоваровПоставщикуТовары.Цена КАК Цена,
	|	ВозвратТоваровПоставщикуТовары.СтавкаНДС КАК СтавкаНДС,
	|	ВозвратТоваровПоставщикуТовары.СуммаНДС КАК СуммаНДС,
	|	ВозвратТоваровПоставщикуТовары.Сумма КАК Сумма,
	|	ВозвратТоваровПоставщикуТовары.ХарактеристикаНоменклатуры КАК Характеристика,
	|	ВозвратТоваровПоставщикуТовары.СерияНоменклатуры КАК Серия,
	|	ВозвратТоваровПоставщикуТовары.НомерСтроки КАК НомерСтроки,
	|	ВЫБОР
	|		КОГДА ВозвратТоваровПоставщикуТовары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК ЕстьНДС,
	|	1 КАК НомерТЧ
	|ИЗ
	|	Документ.ВозвратТоваровПоставщику.Товары КАК ВозвратТоваровПоставщикуТовары
	|ГДЕ
	|	ВозвратТоваровПоставщикуТовары.Ссылка = &ДокументОснование
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВозвратТоваровПоставщикуОборудование.Номенклатура,
	|	ВЫРАЗИТЬ(ВозвратТоваровПоставщикуОборудование.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)),
	|	ВозвратТоваровПоставщикуОборудование.Номенклатура.КодТНВЭД.Код КАК ТоварКодТНВЭД,
	|	ВозвратТоваровПоставщикуОборудование.Номенклатура.Код КАК ТоварКод,
	|	ВозвратТоваровПоставщикуОборудование.Номенклатура.Артикул КАК ТоварАртикул,
	|	ВозвратТоваровПоставщикуОборудование.СерияНоменклатуры.СтранаПроисхождения,
	|	ВозвратТоваровПоставщикуОборудование.СерияНоменклатуры.СтранаПроисхождения.Код,
	|	ВозвратТоваровПоставщикуОборудование.СерияНоменклатуры.СтранаПроисхождения.Наименование,
	|	ВозвратТоваровПоставщикуОборудование.СерияНоменклатуры.НомерГТД,
	|	ВозвратТоваровПоставщикуОборудование.СерияНоменклатуры.НомерГТД.Представление,
	|	ВозвратТоваровПоставщикуОборудование.СерияНоменклатуры.НомерГТД.РегистрационныйНомер,
	|	ВозвратТоваровПоставщикуОборудование.ЕдиницаИзмерения.Представление,
	|	ВозвратТоваровПоставщикуОборудование.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код,
	|	ВозвратТоваровПоставщикуОборудование.Количество,
	|	ВозвратТоваровПоставщикуОборудование.Цена,
	|	ВозвратТоваровПоставщикуОборудование.СтавкаНДС,
	|	ВозвратТоваровПоставщикуОборудование.СуммаНДС,
	|	ВозвратТоваровПоставщикуОборудование.Сумма,
	|	ВозвратТоваровПоставщикуОборудование.ХарактеристикаНоменклатуры,
	|	ВозвратТоваровПоставщикуОборудование.СерияНоменклатуры,
	|	ВозвратТоваровПоставщикуОборудование.НомерСтроки,
	|	ВЫБОР
	|		КОГДА ВозвратТоваровПоставщикуОборудование.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК ЕстьНДС,
	|	2
	|ИЗ
	|	Документ.ВозвратТоваровПоставщику.Оборудование КАК ВозвратТоваровПоставщикуОборудование
	|ГДЕ
	|	ВозвратТоваровПоставщикуОборудование.Ссылка = &ДокументОснование
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерТЧ,
	|	НомерСтроки";
	
	
	ВыборкаСтрокТовары = Запрос.Выполнить().Выбрать();

	ДанныеДляПечати = Новый Структура();
	ДанныеДляПечати.Вставить("Организация",      Шапка.Организация);
	ДанныеДляПечати.Вставить("Номер",            Ссылка.Номер);
	ДанныеДляПечати.Вставить("Дата",             Ссылка.Дата);
	ДанныеДляПечати.Вставить("НомерПРД",         Ссылка.НомерПлатежноРасчетногоДокумента);
	ДанныеДляПечати.Вставить("ДатаПРД",          Ссылка.ДатаПлатежноРасчетногоДокумента);
	ДанныеДляПечати.Вставить("Поставщик",        Шапка.Поставщик);
	ДанныеДляПечати.Вставить("Грузоотправитель", Шапка.Грузоотправитель);
	ДанныеДляПечати.Вставить("Подразделение",    Шапка.Подразделение);
	ДанныеДляПечати.Вставить("Покупатель",       Шапка.Покупатель);
	ДанныеДляПечати.Вставить("Грузополучатель",  Шапка.Грузополучатель);
	ДанныеДляПечати.Вставить("Сумма",            Шапка.Сумма);
	ДанныеДляПечати.Вставить("Валюта",           Шапка.Валюта);
	ДанныеДляПечати.Вставить("УчитыватьНДС",     Шапка.УчитыватьНДС);

	Руководители = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизаций(Шапка.Организация, Ссылка.Дата,);
	ДанныеДляПечати.Вставить(?(РегламентированнаяОтчетность.ЭтоПБОЮЛ(Шапка.Поставщик), "ФИОПБОЮЛ", "ФИОРуководителя"), Руководители.Руководитель);
	ДанныеДляПечати.Вставить("ФИОГлавногоБухгалтера", Руководители.ГлавныйБухгалтер);

	Товары = СоздатьТаблицуДляЗаполнениеТабличнойЧастиДанныхПечати();
	
	СчетФактураБезНДС = (ВыборкаСтрокТовары.Количество() > 0);

	Пока ВыборкаСтрокТовары.Следующий() Цикл
		
		СчетФактураБезНДС = СчетФактураБезНДС И (ВыборкаСтрокТовары.ЕстьНДС = 0); 
		
		Строчка = Товары.Добавить();
		ЗаполнитьЗначенияСвойств(Строчка, ВыборкаСтрокТовары);
		Строчка.ТоварНаименование = СокрЛП(ВыборкаСтрокТовары.ТоварНаименование) + ПредставлениеСерий(ВыборкаСтрокТовары);
		Строчка.СуммаВключаетНДС  = Шапка.СуммаВключаетНДС;
		Строчка.СтавкаНДС         = ?(Шапка.УчитыватьНДС, ВыборкаСтрокТовары.СтавкаНДС, Перечисления.СтавкиНДС.БезНДС);
		
	КонецЦикла;

	ДанныеДляПечати.Вставить("ТабличнаяЧасть", 		Товары);
	ДанныеДляПечати.Вставить("СчетФактураБезНДС", 	СчетФактураБезНДС);

	// Параметры для универсального передаточного документа: ФИО и должность того, кто передал товар/сдал услуги, результаты работ, права
	Если ЗначениеЗаполнено(Шапка.ОтветственноеЛицо) Тогда
		ДанныеДляПечати.Вставить("КладовщикДляУПД", 				Шапка.ОтветственноеЛицо);
		ДанныеДляПечати.Вставить("ДатаДокументаДляУПД", 			Шапка.ДатаДокумента);
		ДанныеДляПечати.Вставить("ЗаКладовщикаПоПриказуДляУПД", 	Неопределено)
	КонецЕсли;
 	
	Возврат ДанныеДляПечати;

КонецФункции // СобратьДанныеПоВозвратуТоваровПоставщику()

// Функция собирает данные по документу основанию реализации и возвращает типизированную 
// структуру с данными
// 
Функция СобратьДанныеПоВозвратуТоваровПоставщикуИзНТТ(ДокОснование, Ссылка)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокОснование);
	Запрос.УстановитьПараметр("ПустойКонтрагент",  Справочники.Контрагенты.ПустаяСсылка());
	РеквизитыДокОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокОснование, "Дата, Склад");
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", РеквизитыДокОснования.Склад);
	Запрос.УстановитьПараметр("ДатаСреза", 			РеквизитыДокОснования.Дата);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВозвратТоваровПоставщику.Дата КАК ДатаДокумента,
	|	ВозвратТоваровПоставщику.Организация,
	|	ВозвратТоваровПоставщику.Организация КАК Поставщик,
	|	""он же"" КАК Грузоотправитель,
	|	ВозвратТоваровПоставщику.Подразделение КАК Подразделение,
	|	ВозвратТоваровПоставщику.Контрагент КАК Покупатель,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВозвратТоваровПоставщику.Грузополучатель, &ПустойКонтрагент) = &ПустойКонтрагент
	|			ТОГДА ВозвратТоваровПоставщику.Контрагент
	|		ИНАЧЕ ВозвратТоваровПоставщику.Грузополучатель
	|	КОНЕЦ КАК Грузополучатель,
	|	ВозвратТоваровПоставщику.СуммаДокумента КАК Сумма,
	|	ВозвратТоваровПоставщику.ВалютаДокумента КАК Валюта,
	|	ВозвратТоваровПоставщику.УчитыватьНДС КАК УчитыватьНДС,
	|	ВозвратТоваровПоставщику.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	ЕСТЬNULL(ОтветственныеЛица.ФизическоеЛицо, НЕОПРЕДЕЛЕНО) КАК ОтветственноеЛицо
	|ИЗ
	|	Документ.ВозвратТоваровПоставщикуИзНТТ КАК ВозвратТоваровПоставщику
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛица.СрезПоследних(&ДатаСреза, СтруктурнаяЕдиница = &СтруктурнаяЕдиница) КАК ОтветственныеЛица
	|		ПО ВозвратТоваровПоставщику.Склад = ОтветственныеЛица.СтруктурнаяЕдиница
	|ГДЕ
	|	ВозвратТоваровПоставщику.Ссылка = &ДокументОснование";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокОснование);
	Запрос.УстановитьПараметр("ПустаяЕдиница", Справочники.ЕдиницыИзмерения.ПустаяСсылка());
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВозвратТоваровПоставщикуТовары.Номенклатура КАК Товар,
	|	ВЫРАЗИТЬ(ВозвратТоваровПоставщикуТовары.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК ТоварНаименование,
	|	ВозвратТоваровПоставщикуТовары.Номенклатура.Код КАК ТоварКод,
	|	ВозвратТоваровПоставщикуТовары.Номенклатура.Артикул КАК ТоварАртикул,
	|	ВозвратТоваровПоставщикуТовары.СерияНоменклатуры.СтранаПроисхождения КАК СтранаПроисхождения,
	|	ВозвратТоваровПоставщикуТовары.СерияНоменклатуры.СтранаПроисхождения.Код КАК СтранаПроисхожденияКод,
	|	ВозвратТоваровПоставщикуТовары.СерияНоменклатуры.СтранаПроисхождения.Наименование КАК ПредставлениеСтраны,
	|	ВозвратТоваровПоставщикуТовары.СерияНоменклатуры.НомерГТД КАК НомерГТД,
	|	ВозвратТоваровПоставщикуТовары.СерияНоменклатуры.НомерГТД.Представление КАК ПредставлениеГТД,
	|	ВозвратТоваровПоставщикуТовары.СерияНоменклатуры.НомерГТД.РегистрационныйНомер КАК РегистрационныйНомерТД,
	|	ВозвратТоваровПоставщикуТовары.ЕдиницаИзмерения.Представление КАК ЕдиницаИзмерения,
	|	ВозвратТоваровПоставщикуТовары.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код КАК ЕдиницаИзмеренияКод,
	|	ВозвратТоваровПоставщикуТовары.Количество КАК Количество,
	|	ВозвратТоваровПоставщикуТовары.Цена КАК Цена,
	|	ВозвратТоваровПоставщикуТовары.СтавкаНДС КАК СтавкаНДС,
	|	ВозвратТоваровПоставщикуТовары.СуммаНДС КАК СуммаНДС,
	|	ВозвратТоваровПоставщикуТовары.Сумма КАК Сумма,
	|	ВозвратТоваровПоставщикуТовары.ХарактеристикаНоменклатуры КАК Характеристика,
	|	ВозвратТоваровПоставщикуТовары.СерияНоменклатуры КАК Серия,
	|	ВЫБОР
	|		КОГДА ВозвратТоваровПоставщикуТовары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК ЕстьНДС,
	|	ВозвратТоваровПоставщикуТовары.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	Документ.ВозвратТоваровПоставщикуИзНТТ.Товары КАК ВозвратТоваровПоставщикуТовары
	|ГДЕ
	|	ВозвратТоваровПоставщикуТовары.Ссылка = &ДокументОснование
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	
	ВыборкаСтрокТовары = Запрос.Выполнить().Выбрать();

	ДанныеДляПечати = Новый Структура();
	ДанныеДляПечати.Вставить("Организация",      Шапка.Организация);
	ДанныеДляПечати.Вставить("Номер",            Ссылка.Номер);
	ДанныеДляПечати.Вставить("Дата",             Ссылка.Дата);
	ДанныеДляПечати.Вставить("НомерПРД",         Ссылка.НомерПлатежноРасчетногоДокумента);
	ДанныеДляПечати.Вставить("ДатаПРД",          Ссылка.ДатаПлатежноРасчетногоДокумента);
	ДанныеДляПечати.Вставить("Поставщик",        Шапка.Поставщик);
	ДанныеДляПечати.Вставить("Грузоотправитель", Шапка.Грузоотправитель);
	ДанныеДляПечати.Вставить("Подразделение",    Шапка.Подразделение);
	ДанныеДляПечати.Вставить("Покупатель",       Шапка.Покупатель);
	ДанныеДляПечати.Вставить("Грузополучатель",  Шапка.Грузополучатель);
	ДанныеДляПечати.Вставить("Сумма",            Шапка.Сумма);
	ДанныеДляПечати.Вставить("Валюта",           Шапка.Валюта);
	ДанныеДляПечати.Вставить("УчитыватьНДС",     Шапка.УчитыватьНДС);

	Руководители = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизаций(Шапка.Организация, Ссылка.Дата,);
	ДанныеДляПечати.Вставить(?(РегламентированнаяОтчетность.ЭтоПБОЮЛ(Шапка.Поставщик), "ФИОПБОЮЛ", "ФИОРуководителя"), Руководители.Руководитель);
	ДанныеДляПечати.Вставить("ФИОГлавногоБухгалтера", Руководители.ГлавныйБухгалтер);

	Товары = СоздатьТаблицуДляЗаполнениеТабличнойЧастиДанныхПечати();
	
	СчетФактураБезНДС = (ВыборкаСтрокТовары.Количество() > 0);

	Пока ВыборкаСтрокТовары.Следующий() Цикл
		
		СчетФактураБезНДС = СчетФактураБезНДС И (ВыборкаСтрокТовары.ЕстьНДС = 0); 
		
		Строчка = Товары.Добавить();
		ЗаполнитьЗначенияСвойств(Строчка, ВыборкаСтрокТовары);
		Строчка.ТоварНаименование = СокрЛП(ВыборкаСтрокТовары.ТоварНаименование) + ПредставлениеСерий(ВыборкаСтрокТовары);
		Строчка.СуммаВключаетНДС  = Шапка.СуммаВключаетНДС;
		Строчка.СтавкаНДС         = ?(Шапка.УчитыватьНДС, ВыборкаСтрокТовары.СтавкаНДС, Перечисления.СтавкиНДС.БезНДС);
		
	КонецЦикла;

	ДанныеДляПечати.Вставить("ТабличнаяЧасть", 	  Товары);
	ДанныеДляПечати.Вставить("СчетФактураБезНДС", СчетФактураБезНДС);
	
	// Параметры для универсального передаточного документа: ФИО и должность того, кто передал товар/сдал услуги, результаты работ, права
	Если ЗначениеЗаполнено(Шапка.ОтветственноеЛицо) Тогда
		ДанныеДляПечати.Вставить("КладовщикДляУПД", 				Шапка.ОтветственноеЛицо);
		ДанныеДляПечати.Вставить("ДатаДокументаДляУПД", 			Шапка.ДатаДокумента);
		ДанныеДляПечати.Вставить("ЗаКладовщикаПоПриказуДляУПД", 	Неопределено)
	КонецЕсли;

	Возврат ДанныеДляПечати;

КонецФункции // СобратьДанныеПоВозвратуТоваровПоставщикуИзНТТ()

// Функция собирает данные по документу основанию ОтражениеРеализацииТоваровИУслуг возвращает типизированную 
// структуру с данными
// 
Функция СобратьДанныеПоОтражениюРеализацииТоваровИУслуг(ДокОснование, Ссылка)


	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокОснование);
	Запрос.УстановитьПараметр("ПустойКонтрагент", Справочники.Контрагенты.ПустаяСсылка());

	Запрос.Текст = "ВЫБРАТЬ
	|	Организация,
	|	Организация   КАК Поставщик,
	|	ВЫБОР 
	|		КОГДА ЕСТЬNULL(Грузоотправитель, &ПустойКонтрагент) = &ПустойКонтрагент
	|			ТОГДА ""он же"" 
	|		ИНАЧЕ Грузоотправитель
	|	КОНЕЦ КАК Грузоотправитель,
	|	Контрагент    КАК Покупатель,
	|	ВЫБОР 
	|		КОГДА ЕСТЬNULL(Грузополучатель, &ПустойКонтрагент) = &ПустойКонтрагент
	|			ТОГДА Контрагент 
	|		ИНАЧЕ Грузополучатель 
	|	КОНЕЦ КАК Грузополучатель,
	|	СуммаДокумента	 КАК Сумма,
	|	""""			 КАК Валюта,
	|	Истина			 КАК УчитыватьНДС,
	|	СуммаВключаетНДС КАК СуммаВключаетНДС
	|ИЗ
	|	Документ.ОтражениеРеализацииТоваровИУслугНДС КАК ОтражениеРеализацииТоваровИУслугНДС
	|
	|ГДЕ
	|	ОтражениеРеализацииТоваровИУслугНДС.Ссылка = &ДокументОснование";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	
	Запрос.УстановитьПараметр("ДокументОснование", ДокОснование);
	Запрос.УстановитьПараметр("ПустаяСтранаПроисхождения", Справочники.КлассификаторСтранМира.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустойНомерГТД", Справочники.НомераГТД.ПустаяСсылка());
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОтражениеРеализацииТоваровИУслугНДСТоварыИУслуги.Номенклатура КАК Товар,
	|	ВЫРАЗИТЬ(ОтражениеРеализацииТоваровИУслугНДСТоварыИУслуги.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК ТоварНаименование,
	|	ОтражениеРеализацииТоваровИУслугНДСТоварыИУслуги.Номенклатура.КодТНВЭД.Код КАК ТоварКодТНВЭД,
	|	ЕСТЬNULL(ОтражениеРеализацииТоваровИУслугНДСТоварыИУслуги.СерияНоменклатуры.СтранаПроисхождения, &ПустаяСтранаПроисхождения) КАК СтранаПроисхождения,
	|	ЕСТЬNULL(ОтражениеРеализацииТоваровИУслугНДСТоварыИУслуги.СерияНоменклатуры.СтранаПроисхождения.Код, """") КАК СтранаПроисхожденияКод,
	|	ЕСТЬNULL(ОтражениеРеализацииТоваровИУслугНДСТоварыИУслуги.СерияНоменклатуры.СтранаПроисхождения.Наименование, """") КАК ПредставлениеСтраны,
	|	ЕСТЬNULL(ОтражениеРеализацииТоваровИУслугНДСТоварыИУслуги.СерияНоменклатуры.НомерГТД, &ПустойНомерГТД) КАК НомерГТД,
	|	ЕСТЬNULL(ОтражениеРеализацииТоваровИУслугНДСТоварыИУслуги.СерияНоменклатуры.НомерГТД.Представление, """") КАК ПредставлениеГТД,
	|	ЕСТЬNULL(ОтражениеРеализацииТоваровИУслугНДСТоварыИУслуги.СерияНоменклатуры.НомерГТД.РегистрационныйНомер, """") КАК РегистрационныйНомерТД,
	|	ОтражениеРеализацииТоваровИУслугНДСТоварыИУслуги.Количество,
	|	ОтражениеРеализацииТоваровИУслугНДСТоварыИУслуги.Номенклатура.БазоваяЕдиницаИзмерения.Представление КАК ЕдиницаИзмерения,
	|	ОтражениеРеализацииТоваровИУслугНДСТоварыИУслуги.Номенклатура.БазоваяЕдиницаИзмерения.Код КАК ЕдиницаИзмеренияКод,
	|	ОтражениеРеализацииТоваровИУслугНДСТоварыИУслуги.Цена,
	|	ОтражениеРеализацииТоваровИУслугНДСТоварыИУслуги.СтавкаНДС,
	|	ОтражениеРеализацииТоваровИУслугНДСТоварыИУслуги.СуммаНДС,
	|	ОтражениеРеализацииТоваровИУслугНДСТоварыИУслуги.Сумма,
	|	ОтражениеРеализацииТоваровИУслугНДСТоварыИУслуги.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	Документ.ОтражениеРеализацииТоваровИУслугНДС.ТоварыИУслуги КАК ОтражениеРеализацииТоваровИУслугНДСТоварыИУслуги
	|ГДЕ
	|	ОтражениеРеализацииТоваровИУслугНДСТоварыИУслуги.Ссылка = &ДокументОснование
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
						
	ВыборкаСтрокТовары = Запрос.Выполнить().Выбрать();

	ДанныеДляПечати = Новый Структура();
	ДанныеДляПечати.Вставить("Организация",      Шапка.Организация);
	ДанныеДляПечати.Вставить("Номер",            Ссылка.Номер);
	ДанныеДляПечати.Вставить("Дата",             Ссылка.Дата);
	ДанныеДляПечати.Вставить("НомерПРД",         Ссылка.НомерПлатежноРасчетногоДокумента);
	ДанныеДляПечати.Вставить("ДатаПРД",          Ссылка.ДатаПлатежноРасчетногоДокумента);
	ДанныеДляПечати.Вставить("Поставщик",        Шапка.Поставщик);
	ДанныеДляПечати.Вставить("Грузоотправитель", Шапка.Грузоотправитель);
	ДанныеДляПечати.Вставить("Покупатель",       Шапка.Покупатель);
	ДанныеДляПечати.Вставить("Грузополучатель",  Шапка.Грузополучатель);
	ДанныеДляПечати.Вставить("Сумма",            0);
	ДанныеДляПечати.Вставить("Валюта",           Константы.ВалютаРегламентированногоУчета.Получить());
	ДанныеДляПечати.Вставить("УчитыватьНДС",     Истина);

	Руководители = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизаций(Шапка.Организация, Ссылка.Дата,);
	ДанныеДляПечати.Вставить(?(РегламентированнаяОтчетность.ЭтоПБОЮЛ(Шапка.Поставщик), "ФИОПБОЮЛ", "ФИОРуководителя"), Руководители.Руководитель);
	ДанныеДляПечати.Вставить("ФИОГлавногоБухгалтера", Руководители.ГлавныйБухгалтер);

	Товары = СоздатьТаблицуДляЗаполнениеТабличнойЧастиДанныхПечати();

	Пока ВыборкаСтрокТовары.Следующий() Цикл

		Строчка = Товары.Добавить();
		ЗаполнитьЗначенияСвойств(Строчка, ВыборкаСтрокТовары);
		Строчка.СуммаВключаетНДС = Шапка.СуммаВключаетНДС;

	КонецЦикла;

	ДанныеДляПечати.Вставить("ТабличнаяЧасть", Товары);

	Возврат ДанныеДляПечати;

КонецФункции // СобратьДанныеПоОтражениюРеализацииТоваровИУслуг()

Функция СобратьДанныеСФНалоговогоАгента(Ссылка)
	
	Если Не Ссылка.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НалоговыйАгент Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	Запрос = Новый Запрос;
 	Запрос.УстановитьПараметр("Ссылка", Ссылка);
 	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета", Константы.ВалютаРегламентированногоУчета.Получить());

	Запрос.Текст =
	"ВЫБРАТЬ
	|	СчетФактураВыданный.Организация,
	|	ВЫБОР
	|		КОГДА СчетФактураВыданный.Исправление
	|			ТОГДА СчетФактураВыданный.НомерИсходногоДокумента
	|		ИНАЧЕ СчетФактураВыданный.Номер
	|	КОНЕЦ КАК Номер,
	|	ВЫБОР
	|		КОГДА СчетФактураВыданный.Исправление
	|			ТОГДА СчетФактураВыданный.ДатаИсходногоДокумента
	|		ИНАЧЕ СчетФактураВыданный.Дата
	|	КОНЕЦ КАК Дата,
	|	СчетФактураВыданный.Организация КАК Покупатель,
	|	СчетФактураВыданный.Контрагент КАК Поставщик,
	|	СчетФактураВыданный.ДоговорКонтрагента.ВидАгентскогоДоговора КАК ВидАгентскогоДоговора,
	|	&ВалютаРегламентированногоУчета КАК Валюта,
	|	СчетФактураВыданный.Сумма КАК Сумма,
	|	СчетФактураВыданный.СуммаНДС КАК СуммаНДС,
	|	СчетФактураВыданный.СтавкаНДС КАК СтавкаНДС
	|ИЗ
	|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
	|ГДЕ
	|	СчетФактураВыданный.Ссылка = &Ссылка";
	
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

				   
	ДанныеДляПечати = Новый Структура();
	ДанныеДляПечати.Вставить("Организация",      Шапка.Организация);
	ДанныеДляПечати.Вставить("Номер",            Шапка.Номер);
	ДанныеДляПечати.Вставить("Дата",             Шапка.Дата);
	ДанныеДляПечати.Вставить("Поставщик",        Шапка.Поставщик);
	ДанныеДляПечати.Вставить("Грузоотправитель", );
	ДанныеДляПечати.Вставить("Покупатель",       Шапка.Покупатель);
	ДанныеДляПечати.Вставить("Грузополучатель",  );
	ДанныеДляПечати.Вставить("Сумма",            Шапка.Сумма);
	ДанныеДляПечати.Вставить("Валюта",           Шапка.Валюта);
	ДанныеДляПечати.Вставить("УчитыватьНДС",     Истина);
	ДанныеДляПечати.Вставить("СуммаВключаетНДС", Истина);

	Руководители = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизаций(Шапка.Организация, Ссылка.Дата);
	ДанныеДляПечати.Вставить(?(РегламентированнаяОтчетность.ЭтоПБОЮЛ(Шапка.Организация), "ФИОПБОЮЛ", "ФИОРуководителя"), Руководители.Руководитель);
	ДанныеДляПечати.Вставить("ФИОГлавногоБухгалтера", Руководители.ГлавныйБухгалтер);
	
	Товары = СоздатьТаблицуДляЗаполнениеТабличнойЧастиДанныхПечати();
	
	Если Ссылка.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НалоговыйАгент Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СчетФактураВыданныйАвансы.Номенклатура КАК Товар,
		|	ВЫРАЗИТЬ(СчетФактураВыданныйАвансы.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК ТоварНаименование,
		|	СчетФактураВыданныйАвансы.Номенклатура.Код КАК ТоварКод,
		|	СчетФактураВыданныйАвансы.Номенклатура.Артикул КАК ТоварАртикул,
		|	ВЫРАЗИТЬ(СчетФактураВыданныйАвансы.Содержание КАК СТРОКА(1000)) КАК Содержание,
		|	СУММА(СчетФактураВыданныйАвансы.Сумма) КАК Сумма,
		|	СУММА(СчетФактураВыданныйАвансы.СуммаНДС) КАК СуммаНДС,
		|	СчетФактураВыданныйАвансы.СтавкаНДС,
		|	МИНИМУМ(СчетФактураВыданныйАвансы.НомерСтроки) КАК НомерСтроки
		|ИЗ
		|	Документ.СчетФактураВыданный.Авансы КАК СчетФактураВыданныйАвансы
		|ГДЕ
		|	СчетФактураВыданныйАвансы.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	СчетФактураВыданныйАвансы.СтавкаНДС,
		|	СчетФактураВыданныйАвансы.Номенклатура,
		|	ВЫРАЗИТЬ(СчетФактураВыданныйАвансы.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)),
		|	ВЫРАЗИТЬ(СчетФактураВыданныйАвансы.Содержание КАК СТРОКА(1000)),
		|	СчетФактураВыданныйАвансы.Номенклатура.Код,
		|	СчетФактураВыданныйАвансы.Номенклатура.Артикул
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
		
		ТаблицаПоАвансам = Запрос.Выполнить().Выгрузить();
				
		СоответствиеСтавок = Новый Соответствие();
		СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС10, Перечисления.СтавкиНДС.НДС10_110);
		СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС18, Перечисления.СтавкиНДС.НДС18_118);
		СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС20, Перечисления.СтавкиНДС.НДС20_120);
		СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.БезНДС, Перечисления.СтавкиНДС.БезНДС);
		СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.ПустаяСсылка(), Перечисления.СтавкиНДС.БезНДС);
		
		Для Каждого СтрокаТаблицы Из ТаблицаПоАвансам Цикл
			
			Строчка = Товары.Добавить();
			Строчка.Товар                  = ?(ЗначениеЗаполнено(СтрокаТаблицы.Товар), СтрокаТаблицы.Товар, Шапка.ВидАгентскогоДоговора);
			Строчка.ТоварНаименование      = ?(ЗначениеЗаполнено(СокрЛП(СтрокаТаблицы.Содержание)), СокрЛП(СтрокаТаблицы.Содержание), 
											?(ЗначениеЗаполнено(СтрокаТаблицы.Товар), СокрЛП(СтрокаТаблицы.ТоварНаименование), Шапка.ВидАгентскогоДоговора));
			Строчка.ТоварКод               = СтрокаТаблицы.ТоварКод;
			Строчка.ТоварАртикул           = СтрокаТаблицы.ТоварАртикул;
			Строчка.СтранаПроисхождения    = "";
			Строчка.ПредставлениеСтраны    = "";
			Строчка.НомерГТД               = "";
			Строчка.ПредставлениеГТД       = "";
			Строчка.РегистрационныйНомерТД = "";
			Строчка.Количество             = 0;
			Строчка.ЕдиницаИзмерения       = "";
			Строчка.СтавкаНДС              = СтрокаТаблицы.СтавкаНДС;
			Строчка.СуммаНДС               = СтрокаТаблицы.СуммаНДС;
			Строчка.Сумма                  = СтрокаТаблицы.Сумма;
			Строчка.СуммаВключаетНДС       = Истина;
			
		КонецЦикла;
		
	Иначе

		Строчка = Товары.Добавить();
		Строчка.Товар                  = Шапка.ВидАгентскогоДоговора;
		Строчка.ТоварНаименование      = Шапка.ВидАгентскогоДоговора;
		Строчка.ТоварКод               = "";
		Строчка.ТоварАртикул           = "";
		Строчка.СтранаПроисхождения    = "";
		Строчка.ПредставлениеСтраны    = "";
		Строчка.НомерГТД               = "";
		Строчка.ПредставлениеГТД       = "";
		Строчка.РегистрационныйНомерТД = "";
		Строчка.Количество             = 0;
		Строчка.ЕдиницаИзмерения       = "";
		Строчка.СтавкаНДС              = Шапка.СтавкаНДС;
		Строчка.СуммаНДС               = Шапка.СуммаНДС;
		Строчка.Сумма                  = Шапка.Сумма;
 		Строчка.СуммаВключаетНДС       = Истина;

	КонецЕсли;
	
	ДанныеДляПечати.Вставить("ТабличнаяЧасть", Товары);
	ДанныеДляПечати.Вставить("ТолькоУслуги",   Истина);

	Возврат ДанныеДляПечати;

КонецФункции // СобратьДанныеПоСВП()

Функция СобратьДанныеДляПечатиИсправленияСчетаФактуры(ТекущееОснование, Ссылка)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ТекущееОснование);
	Запрос.УстановитьПараметр("ПустойКонтрагент", Справочники.Контрагенты.ПустаяСсылка());
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КорректировкаРеализации.Организация,
	|	КорректировкаРеализации.Организация КАК Поставщик,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(КорректировкаРеализации.Грузоотправитель, &ПустойКонтрагент) = &ПустойКонтрагент
	|			ТОГДА ""он же""
	|		ИНАЧЕ КорректировкаРеализации.Грузоотправитель
	|	КОНЕЦ КАК Грузоотправитель,
	|	КорректировкаРеализации.Контрагент КАК Покупатель,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(КорректировкаРеализации.Грузополучатель, &ПустойКонтрагент) = &ПустойКонтрагент
	|			ТОГДА КорректировкаРеализации.Контрагент
	|		ИНАЧЕ КорректировкаРеализации.Грузополучатель
	|	КОНЕЦ КАК Грузополучатель,
	|	КорректировкаРеализации.СуммаДокумента КАК Сумма,
	|	КорректировкаРеализации.ВалютаДокумента КАК Валюта,
	|	КорректировкаРеализации.УчитыватьНДС КАК УчитыватьНДС,
	|	КорректировкаРеализации.СуммаВключаетНДС КАК СуммаВключаетНДС,		
	|	КорректировкаРеализации.АдресДоставки КАК АдресДоставки,
	|	КорректировкаРеализации.ДокументРеализации КАК ДокументРеализации
	|ИЗ
	|	Документ.КорректировкаРеализации КАК КорректировкаРеализации
	|ГДЕ
	|	КорректировкаРеализации.Ссылка = &ДокументОснование";

	ЗапросПоТоварам = Новый Запрос();
	ЗапросПоТоварам.УстановитьПараметр("ДокументОснование", ТекущееОснование);
	ЗапросПоТоварам.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаПоТоварам.НомерСтроки КАК НомерСтроки,
	|	ТаблицаПоТоварам.Номенклатура КАК Товар,
	|	ТаблицаПоТоварам.СерияНоменклатуры.СтранаПроисхождения КАК СтранаПроисхождения,
	|	ТаблицаПоТоварам.СерияНоменклатуры.НомерГТД КАК НомерГТД,
	|	ТаблицаПоТоварам.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	СУММА(ТаблицаПоТоварам.Количество) КАК Количество,
	|	ТаблицаПоТоварам.Цена КАК Цена,
	|	ТаблицаПоТоварам.Сумма КАК Сумма,
	|	ТаблицаПоТоварам.СуммаНДС КАК СуммаНДС,
	|	ТаблицаПоТоварам.СтавкаНДС КАК СтавкаНДС,
	|	ТаблицаПоТоварам.СерияНоменклатуры КАК Серия,
	|	ТаблицаПоТоварам.ХарактеристикаНоменклатуры КАК Характеристика,
	|	ТаблицаПоТоварам.КодТНВЭД КАК КодТНВЭД
	|ПОМЕСТИТЬ ТаблицаТовары
	|ИЗ
	|	Документ.КорректировкаРеализации.Товары КАК ТаблицаПоТоварам
	|ГДЕ
	|	ТаблицаПоТоварам.Ссылка = &ДокументОснование
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаПоТоварам.ЕдиницаИзмерения,
	|	ТаблицаПоТоварам.Номенклатура,
	|	ТаблицаПоТоварам.СтавкаНДС,
	|	ТаблицаПоТоварам.СерияНоменклатуры,
	|	ТаблицаПоТоварам.ХарактеристикаНоменклатуры,
	|	ТаблицаПоТоварам.НомерСтроки,
	|	ТаблицаПоТоварам.СерияНоменклатуры.СтранаПроисхождения,
	|	ТаблицаПоТоварам.СерияНоменклатуры.НомерГТД,
	|	ТаблицаПоТоварам.Цена,
	|	ТаблицаПоТоварам.Сумма,
	|	ТаблицаПоТоварам.СуммаНДС,
	|	ТаблицаПоТоварам.КодТНВЭД
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТовары.НомерСтроки КАК НомерСтроки,
	|	ТаблицаТовары.Товар,
	|	ВЫРАЗИТЬ(ТаблицаТовары.Товар.НаименованиеПолное КАК СТРОКА(1000)) КАК ТоварНаименование,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС0)
	|			ТОГДА ТаблицаТовары.КодТНВЭД
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.КлассификаторТНВЭД.ПустаяСсылка)
	|	КОНЕЦ КАК ТоварКодТНВЭД,
	|	ТаблицаТовары.Товар.Код КАК ТоварКод,
	|	ТаблицаТовары.Товар.Артикул КАК ТоварАртикул,
	|	ТаблицаТовары.СтранаПроисхождения,
	|	ТаблицаТовары.СтранаПроисхождения.Код КАК СтранаПроисхожденияКод,
	|	ТаблицаТовары.СтранаПроисхождения.Наименование КАК ПредставлениеСтраны,
	|	ТаблицаТовары.НомерГТД,
	|	ТаблицаТовары.НомерГТД.Представление КАК ПредставлениеГТД,
	|	ТаблицаТовары.НомерГТД.РегистрационныйНомер КАК РегистрационныйНомерТД,
	|	ТаблицаТовары.ЕдиницаИзмерения.Представление КАК ЕдиницаИзмерения,
	|	ТаблицаТовары.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код КАК ЕдиницаИзмеренияКод,
	|	ТаблицаТовары.Количество,
	|	ТаблицаТовары.Цена,
	|	ТаблицаТовары.Сумма,
	|	ТаблицаТовары.СуммаНДС,
	|	ТаблицаТовары.СтавкаНДС,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК ЕстьНДС,
	|	ТаблицаТовары.Серия,
	|	ТаблицаТовары.Характеристика,
	|	""Товары"" КАК ВидПоступления
	|ИЗ
	|	ТаблицаТовары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Сумма <> 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаПоУслугам.НомерСтроки,
	|	ТаблицаПоУслугам.Номенклатура,
	|	ВЫРАЗИТЬ(ТаблицаПоУслугам.Содержание КАК СТРОКА(1000)),
	|	"""",
	|	ТаблицаПоУслугам.Номенклатура.Код,
	|	ТаблицаПоУслугам.Номенклатура.Артикул,
	|	""Россия"",
	|	NULL,
	|	""Россия"",
	|	"""",
	|	"""",
	|	"""",
	|	ТаблицаПоУслугам.Номенклатура.ЕдиницаХраненияОстатков,
	|	ТаблицаПоУслугам.Номенклатура.ЕдиницаХраненияОстатков.ЕдиницаПоКлассификатору.Код,
	|	ТаблицаПоУслугам.Количество,
	|	ТаблицаПоУслугам.Цена,
	|	ТаблицаПоУслугам.Сумма,
	|	ТаблицаПоУслугам.СуммаНДС,
	|	ТаблицаПоУслугам.СтавкаНДС,
	|	ВЫБОР
	|		КОГДА ТаблицаПоУслугам.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ,
	|	NULL,
	|	NULL,
	|	""Услуги""
	|ИЗ
	|	Документ.КорректировкаРеализации.Услуги КАК ТаблицаПоУслугам
	|ГДЕ
	|	ТаблицаПоУслугам.Ссылка = &ДокументОснование
	|	И ТаблицаПоУслугам.Сумма <> 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВидПоступления,
	|	НомерСтроки";

	Шапка = Запрос.Выполнить().Выбрать();
	ВыборкаСтрокТовары = ЗапросПоТоварам.Выполнить().Выбрать();
    	
	Шапка.Следующий();
	
	ДанныеДляПечати = Новый Структура();
	
	Поставщик = Шапка.Поставщик;
	Грузоотправитель = Шапка.Грузоотправитель;
	Если ЗначениеЗаполнено(Поставщик.ГоловнаяОрганизация) Тогда 
		Грузоотправитель = Поставщик;
		Поставщик = Поставщик.ГоловнаяОрганизация;
	КонецЕсли;
	
	Если ТипЗнч(Ссылка) = Тип("Структура") Тогда
		РеквизитыСФ = Ссылка;
	Иначе
		РеквизитыСФ = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(Ссылка, "Дата, Организация, НомерИсходногоДокумента, ДатаИсходногоДокумента");
	КонецЕсли;
    	
	ДанныеДляПечати.Вставить("Организация",      Шапка.Организация);
	ДанныеДляПечати.Вставить("Номер",            РеквизитыСФ.НомерИсходногоДокумента);
	ДанныеДляПечати.Вставить("Дата",             РеквизитыСФ.ДатаИсходногоДокумента);
	ДанныеДляПечати.Вставить("Поставщик",        Поставщик);
	ДанныеДляПечати.Вставить("Грузоотправитель", Грузоотправитель);
	ДанныеДляПечати.Вставить("Покупатель",       Шапка.Покупатель);
	ДанныеДляПечати.Вставить("Грузополучатель",  Шапка.Грузополучатель);
	ДанныеДляПечати.Вставить("Сумма",            Шапка.Сумма);
	ДанныеДляПечати.Вставить("Валюта",           Шапка.Валюта);
	ДанныеДляПечати.Вставить("УчитыватьНДС",     Шапка.УчитыватьНДС);
	ДанныеДляПечати.Вставить("СуммаВключаетНДС", Шапка.СуммаВключаетНДС);
	
	Руководители = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизаций(Шапка.Организация, РеквизитыСФ.Дата);
	ДанныеДляПечати.Вставить(?(РегламентированнаяОтчетность.ЭтоПБОЮЛ(Шапка.Организация), "ФИОПБОЮЛ", "ФИОРуководителя"), Руководители.Руководитель);
	ДанныеДляПечати.Вставить("ФИОГлавногоБухгалтера", Руководители.ГлавныйБухгалтер);

	Товары = СоздатьТаблицуДляЗаполнениеТабличнойЧастиДанныхПечати();

	ЕстьТовары 		  = Ложь;
	ЕстьУслуги		  = Ложь;
	СчетФактураБезНДС = (ВыборкаСтрокТовары.Количество() > 0);
	
	Пока ВыборкаСтрокТовары.Следующий() Цикл

		ЕстьТовары = ЕстьТовары ИЛИ (ВыборкаСтрокТовары.ВидПоступления = "Товары");
		ЕстьУслуги = ЕстьУслуги ИЛИ (ВыборкаСтрокТовары.ВидПоступления = "Услуги");
		СчетФактураБезНДС = СчетФактураБезНДС И (ВыборкаСтрокТовары.ЕстьНДС = 0); 
		
		Строчка = Товары.Добавить();
		ЗаполнитьЗначенияСвойств(Строчка, ВыборкаСтрокТовары);
		Строчка.ТоварНаименование = СокрЛП(ВыборкаСтрокТовары.ТоварНаименование) + ПредставлениеСерий(ВыборкаСтрокТовары);
		Строчка.СуммаВключаетНДС  = Шапка.СуммаВключаетНДС;

	КонецЦикла;

	Если НЕ ЕстьТовары Тогда
		ДанныеДляПечати.Грузоотправитель = "";
		ДанныеДляПечати.Грузополучатель = "";		
	КонецЕсли;
	
	ДанныеДляПечати.Вставить("ТабличнаяЧасть", 		Товары);
	ДанныеДляПечати.Вставить("СчетФактураБезНДС", 	СчетФактураБезНДС);
	
	// Параметры для универсального передаточного документа: ФИО и должность того, кто передал товар/сдал услуги, результаты работ, права
	ТипДокументаРеализации = ТипЗнч(Шапка.ДокументРеализации);
	Если ТипДокументаРеализации = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		РеквизитыШапки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Шапка.ДокументРеализации, "ОтпускПроизвел, ОтпускРазрешил, ЗаРуководителяПоПриказу");
		Если ЕстьТовары И ЗначениеЗаполнено(РеквизитыШапки.ОтпускПроизвел) Тогда
			ДанныеДляПечати.Вставить("КладовщикДляУПД", 				РеквизитыШапки.ОтпускПроизвел);
			ДанныеДляПечати.Вставить("ДатаДокументаДляУПД", 			РеквизитыСФ.Дата);
			ДанныеДляПечати.Вставить("ЗаКладовщикаПоПриказуДляУПД", 	Неопределено)
		ИначеЕсли ЕстьУслуги Тогда
			Если ЗначениеЗаполнено(РеквизитыШапки.ОтпускРазрешил) Тогда
				ДанныеДляПечати.Вставить("КладовщикДляУПД", 			РеквизитыШапки.ОтпускРазрешил);
				ДанныеДляПечати.Вставить("ДатаДокументаДляУПД", 		РеквизитыСФ.Дата);
				ДанныеДляПечати.Вставить("ЗаКладовщикаПоПриказуДляУПД", РеквизитыШапки.ЗаРуководителяПоПриказу)
			Иначе	
				ДанныеДляПечати.Вставить("ФИОКладовщика", 				Руководители.Руководитель);
				ДанныеДляПечати.Вставить("ДолжностьКладовщика", 		Руководители.РуководительДолжность);
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ТипДокументаРеализации = Тип("ДокументСсылка.АктОбОказанииПроизводственныхУслуг")
		ИЛИ ТипДокументаРеализации = Тип("ДокументСсылка.РеализацияУслугПоПереработке") Тогда
		РеквизитыШапки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Шапка.ДокументРеализации, "Исполнитель, ИсполнительПоПриказу");
		Если ЗначениеЗаполнено(РеквизитыШапки.Исполнитель) Тогда
			ДанныеДляПечати.Вставить("КладовщикДляУПД", 				РеквизитыШапки.Исполнитель);
			ДанныеДляПечати.Вставить("ДатаДокументаДляУПД", 			РеквизитыСФ.Дата);
			ДанныеДляПечати.Вставить("ЗаКладовщикаПоПриказуДляУПД", 	РеквизитыШапки.ИсполнительПоПриказу)
		КонецЕсли;
	КонецЕсли;

	Возврат ДанныеДляПечати;
		
КонецФункции	

// Процедура формирует параметры для печати универсального передаточного документа: 
// ФИО и должность того, кто передал товар/сдал услуги, результаты работ, права
Процедура СформироватьФИОКладовщикаДляПечатиУниверсальногоПередаточногоДокумента(ДанныеДляПечати) Экспорт
	
	// Если в данных печати уже заполнены ФИО и должность кладовщика - ничего формировать не нужно
	Если ДанныеДляПечати.Свойство("ФИОКладовщика") И ЗначениеЗаполнено(ДанныеДляПечати.ФИОКладовщика) Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ДанныеДляПечати.Свойство("КладовщикДляУПД") ИЛИ НЕ ДанныеДляПечати.Свойство("ДатаДокументаДляУПД")
		ИЛИ НЕ ДанныеДляПечати.Свойство("ЗаКладовщикаПоПриказуДляУПД") ИЛИ НЕ ДанныеДляПечати.Свойство("Организация") Тогда
		ДанныеДляПечати.Вставить("ФИОКладовщика", 		"");
		ДанныеДляПечати.Вставить("ДолжностьКладовщика", "");
	 	Возврат;
	КонецЕсли;

	Если ЗначениеЗаполнено(ДанныеДляПечати.КладовщикДляУПД) Тогда
		#Если Сервер ИЛИ ВнешнееСоединение Тогда
			ФамилияИмяОтчествоФизЛица = ФормированиеПечатныхФормСервер.ФамилияИмяОтчество(ДанныеДляПечати.КладовщикДляУПД, ДанныеДляПечати.ДатаДокументаДляУПД);
		#ИначеЕсли ТолстыйКлиентОбычноеПриложение Тогда	
			ФамилияИмяОтчествоФизЛица = ФормированиеПечатныхФорм.ФамилияИмяОтчество(ДанныеДляПечати.КладовщикДляУПД, ДанныеДляПечати.ДатаДокументаДляУПД);
		#КонецЕсли
		ФамилияИмяОтчествоКладовщика  = ФамилияИмяОтчествоФизЛица.Фамилия + " " + ФамилияИмяОтчествоФизЛица.Имя + " " + ФамилияИмяОтчествоФизЛица.Отчество;
		ФИОКладовщика         		  = ОбщегоНазначения.ФамилияИнициалыФизЛица(ФамилияИмяОтчествоКладовщика);
		ФИОКладовщика = ФИОКладовщика  + ?(ЗначениеЗаполнено(ДанныеДляПечати.ЗаКладовщикаПоПриказуДляУПД), " " + ДанныеДляПечати.ЗаКладовщикаПоПриказуДляУПД, "");
		
		ПодразделениеДолжностьФизЛица = ПолныеПрава.СведенияОСотруднике(ДанныеДляПечати.КладовщикДляУПД, ДанныеДляПечати.ДатаДокументаДляУПД, ДанныеДляПечати.Организация);
		ДолжностьКладовщика       	  = ПодразделениеДолжностьФизЛица.Должность;
	Иначе
		ФИОКладовщика		          = "";
		ДолжностьКладовщика 		  = "";
	КонецЕсли;
	
	ДанныеДляПечати.Вставить("ФИОКладовщика", 		ФИОКладовщика);
	ДанныеДляПечати.Вставить("ДолжностьКладовщика", ДолжностьКладовщика);
	
КонецПроцедуры

Функция ОписаниеОрганизации(СписокСведений, Список = "", СПрефиксом = Истина)
	
	#Если Сервер ИЛИ ВнешнееСоединение Тогда
		Возврат ФормированиеПечатныхФормСервер.ОписаниеОрганизации(СписокСведений, Список, СПрефиксом);
	#ИначеЕсли ТолстыйКлиентОбычноеПриложение Тогда	
		Возврат ФормированиеПечатныхФорм.ОписаниеОрганизации(СписокСведений, Список, СПрефиксом);		
	#КонецЕсли
	
КонецФункции

Функция ПредставлениеСерий(Выборка)
	
	#Если Сервер ИЛИ ВнешнееСоединение Тогда
		Возврат ФормированиеПечатныхФормСервер.ПредставлениеСерий(Выборка);
	#ИначеЕсли ТолстыйКлиентОбычноеПриложение Тогда	
		Возврат ФормированиеПечатныхФорм.ПредставлениеСерий(Выборка);		
	#КонецЕсли
	
КонецФункции	
