// ИНТЕРФЕЙСНАЯ ЧАСТЬ ПЕРЕОПРЕДЕЛЯЕМОГО МОДУЛЯ

// Возвращает список процедур-обработчиков обновления ИБ для всех поддерживаемых версий ИБ.
//
// Пример добавления процедуры-обработчика в список:
//    Обработчик = Обработчики.Добавить();
//    Обработчик.Версия = "1.0.0.0";
//    Обработчик.Процедура = "ОбновлениеИБ.ПерейтиНаВерсию_1_0_0_0";
//
// Вызывается перед началом обновления данных ИБ.
//
Функция ОбработчикиОбновления() Экспорт
	
	Обработчики = ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления();
	
	// Библиотеки УПП и ЗУП
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия    	= "*";
	Обработчик.Процедура 	= "БиблиотекаОбновленияИнформационнойБазы.ВыполнитьОбновлениеИнформационнойБазы";
	
	// Библиотека обмена ЭД
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия    	= "*";
	Обработчик.Процедура 	= "ОбновлениеИнформационнойБазыЭД.ВыполнитьОбновлениеИнформационнойБазы";
	
	// Библиотека ЕГАИС
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия    	= "*";
	Обработчик.Процедура 	= "ОбновлениеИнформационнойБазыЕГАИС.ВыполнитьОбновлениеИнформационнойБазы";

	// При создании новой базы
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия    	= "1.3.1.1";
	Обработчик.Процедура    = "Справочники.СпособыРаспределенияЗатратНаВыпуск.ЗаполнитьСпособыРаспределенияПоУмолчанию";
	
	// Версия 1.3.23
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       = "1.3.23.1";
	Обработчик.Процедура    = "Справочники.СпособыРаспределенияЗатратНаВыпуск.ЗаполнитьСпособыРаспределенияПоУмолчанию";
	Обработчик.Опциональный = Истина; //Вызывается явно при заполнении новой базы

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       = "1.3.23.1";
	Обработчик.Процедура    = "Справочники.СпособыРаспределенияЗатратНаВыпуск.ЗаполнитьЗначенияРеквизитовПоУмолчанию";
	Обработчик.Опциональный = Истина; // В новой базе не требуется, вызывается для способов распределения, добавленных пользователями
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       = "1.3.23.1";
	Обработчик.Процедура    = "БиблиотекаОбновленияИнформационнойБазыПереопределяемый.УстановитьКонстантуНастройкиСпособовРаспределенияЗатрат";
	Обработчик.Опциональный = Истина; // В новой базе не требуется - по умолчанию будут использоваться новые способы распределения
	
	// Версия 1.3.24.1
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       = "1.3.24.1";
	Обработчик.Процедура    = "Справочники.СпособыРаспределенияЗатратНаВыпуск.ЗаполнитьСпособыРаспределенияПоУмолчанию";
	Обработчик.Опциональный = Истина; // В новой базе не требуется - вызывается явно при заполнении новой базы
	
	// Версия 1.3.24.2
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       = "1.3.24.2";
	Обработчик.Процедура    = "БиблиотекаОбновленияИнформационнойБазыПереопределяемый.ИзменитьНастройкуВыгрузкиСебестоимостиВРозницу";
	Обработчик.Опциональный = Истина; // В новой базе не требуется
	
	// Версия 1.3.25.1
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       = "1.3.25.1";
	Обработчик.Процедура    = "Справочники.СпособыРаспределенияЗатратНаВыпуск.ЗаполнитьСпособыРаспределенияПоУмолчанию";
	Обработчик.Опциональный = Истина; // В новой базе не требуется - вызывается явно при заполнении новой базы
	
	// Версия 1.3.28.1
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       = "1.3.28.1";
	Обработчик.Процедура    = "Справочники.СпособыРаспределенияЗатратНаВыпуск.ЗаполнитьСпособыРаспределенияПоУмолчанию";
	Обработчик.Опциональный = Истина; // В новой базе не требуется - вызывается явно при заполнении новой базы
	
	// Версия 1.3.29.1
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       = "1.3.29.1";
	Обработчик.Процедура    = "Справочники.СпособыРаспределенияЗатратНаВыпуск.ОбновитьСпособМатериальныеЗатраты";
	Обработчик.Опциональный = Истина;
	
	// Версия 1.3.32.1
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       = "1.3.32.1";
	Обработчик.Процедура    = "БиблиотекаОбновленияИнформационнойБазыПереопределяемый.ЗаполнениеКППКонтрагентаЖурналаУчетаСчетовФактур";
	Обработчик.Опциональный = Истина;
	
	// Версия 1.3.32.1
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       = "1.3.32.1";
	Обработчик.Процедура    = "Справочники.СпособыРаспределенияЗатратНаВыпуск.ЗаполнитьСпособыРаспределенияПоУмолчанию";
	Обработчик.Опциональный = Истина; // В новой базе не требуется - вызывается явно при заполнении новой базы
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       = "1.3.36.1";
	Обработчик.Процедура    = "БиблиотекаОбновленияИнформационнойБазыПереопределяемый.УстановитьПорядокПризнанияДопРасходов";
	Обработчик.Опциональный = Истина;
	
	// Версия 1.3.52.1
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       = "1.3.52.1";
	Обработчик.Процедура    = "БиблиотекаОбновленияИнформационнойБазыПереопределяемый.ЗагрузитьРегионы";
	Обработчик.Опциональный = Истина;
	
	// Версия 1.3.58.1
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       = "1.3.58.1";
	Обработчик.Процедура    = "УчетНДС.СформироватьДвиженияСчетовФактурПоДокументамОплаты";
	Обработчик.Опциональный = Истина;
	
	// Версия 1.3.62.1
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       = "1.3.62.1";
	Обработчик.Процедура    = "Документы.СчетФактураВыданный.УстановитьКодВидаОперацииСводныйКомиссионный";
	Обработчик.Опциональный = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       = "1.3.62.1";
	Обработчик.Процедура    = "Документы.СчетФактураПолученный.УстановитьКодВидаОперацииСводныйКомиссионный";
	Обработчик.Опциональный = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       = "1.3.62.1";
	Обработчик.Процедура    = "Документы.ФормированиеЗаписейКнигиПокупок.УстановитьКодВидаОперации";
	Обработчик.Опциональный = Истина;
	
	// Версия 1.3.62.2
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       = "1.3.62.2";
	Обработчик.Процедура    = "Документы.ЗаписьЖурналаУчетаСчетовФактур.УстановитьСводныйКомиссионный";
	Обработчик.Опциональный = Истина;
	
	// Версия 1.3.64.1
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       = "1.3.64.1";
	Обработчик.Процедура    = "БиблиотекаОбновленияИнформационнойБазыПереопределяемый.УстановитьПредельноеКоличествоЗаписейВРазделеДекларацииПоНДС";
	Обработчик.Опциональный = Истина;

	// Версия 1.3.70.1
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       = "1.3.70.1";
	Обработчик.Процедура    = "Документы.ЗаявкаНаРасходованиеСредств.ЗаполнитьКонтракты";
	Обработчик.Опциональный = Истина;

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       = "1.3.70.1";
	Обработчик.Процедура    = "Документы.ПлатежноеПоручениеВходящее.ПровестиПоРегиструДвиженияДСпоГосконтрактам";
	Обработчик.Опциональный = Истина;

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       = "1.3.70.1";
	Обработчик.Процедура    = "Документы.ПлатежноеПоручениеИсходящее.ПровестиПоРегиструДвиженияДСпоГосконтрактам";
	Обработчик.Опциональный = Истина;

	// Версия 1.3.71.2
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       = "1.3.71.2";
	Обработчик.Процедура    = "ИнтеграцияЕГАИСПереопределяемый.УстановитьЗначениеДатаНачалаРегистрацииРозничныхПродажВЕГАИС";
	Обработчик.Опциональный = Ложь;

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       = "1.3.71.2";
	Обработчик.Процедура    = "ИнтеграцияЕГАИСПереопределяемый.УстановитьЗначениеДатаНачалаПримененияПриказа164";
	Обработчик.Опциональный = Ложь;

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       = "1.3.71.2";
	Обработчик.Процедура    = "ИнтеграцияЕГАИСПереопределяемый.ЗаполнитьРеквизитыАП";
	Обработчик.Опциональный = Истина;
	
	// Версия 1.3.72.2
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       = "1.3.72.2";
	Обработчик.Процедура    = "ОбновлениеИнформационнойБазыЕГАИС.УстановитьПризнакВыгрузкиПродажНемаркируемойПродукции";
	Обработчик.Опциональный = Истина;

	// Версия 1.3.74.1
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       = "1.3.74.1";
	Обработчик.Процедура    = "Справочники.ВидыДокументов.ЗаполнитьПредопределенныеЭлементы";
	Обработчик.Опциональный = Истина;

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       = "1.3.74.1";
	Обработчик.Процедура    = "Справочники.ТипыПлатежейФЗ275.ЗаполнитьПредопределенныеЭлементы";
	Обработчик.Опциональный = Истина;

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       = "1.3.74.1";
	Обработчик.Процедура    = "Справочники.ГосударственныеКонтракты.ЗаполнитьСпособОпределенияПоставщика";
	Обработчик.Опциональный = Истина;

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       = "1.3.74.1";
	Обработчик.Процедура    = "Справочники.ГосударственныеКонтракты.ЗаполнитьДатуЗаключения";
	Обработчик.Опциональный = Истина;

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       = "1.3.74.1";
	Обработчик.Процедура    = "Справочники.КонтрактыИсполнителей.ЗаполнитьСпособОпределенияПоставщика";
	Обработчик.Опциональный = Истина;

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       = "1.3.74.1";
	Обработчик.Процедура    = "Справочники.КонтрактыИсполнителей.ЗаполнитьСпособРаспределения";
	Обработчик.Опциональный = Истина;

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       = "1.3.74.1";
	Обработчик.Процедура    = "Справочники.КонтрактыИсполнителей.ЗаполнитьГосКонтрактВПодтверждающихДокументах";
	Обработчик.Опциональный = Истина;

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       = "1.3.74.1";
	Обработчик.Процедура    = "Справочники.КонтрактыСЗаказчиками.ОбработатьПрибыльИВозмещение";
	Обработчик.Опциональный = Истина;

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       = "1.3.74.1";
	Обработчик.Процедура    = "Справочники.СтатьиКалькуляции.ЗаполнитьПредопределенноеОписаниеСтатьи";
	Обработчик.Опциональный = Истина;

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       = "1.3.74.1";
	Обработчик.Процедура    = "Справочники.СпособыОпределенияПоставщиков.ЗаполнитьПредопределенныеЭлементы";
	Обработчик.Опциональный = Истина;

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       = "1.3.74.1";
	Обработчик.Процедура    = "Справочники.ТоварыРаботыУслугиСТарифнымРегулированием.ЗаполнитьРеквизитыПоставляемыхДанных";
	Обработчик.Опциональный = Истина;

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       = "1.3.74.1";
	Обработчик.Процедура    = "Документы.ЗаявкаНаРасходованиеСредств.ЗаполнитьИдентификаторПлатежа";
	Обработчик.Опциональный = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       = "1.3.78.2";
	Обработчик.Процедура    = "Документы.СчетФактураВыданный.УстановитьКодВидаОперацииНаУменьшение";
	Обработчик.Опциональный = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       = "1.3.78.2";
	Обработчик.Процедура    = "Документы.СчетФактураПолученный.УстановитьКодВидаОперацииНаУменьшение";
	Обработчик.Опциональный = Истина;

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       = "1.3.79.1";
	Обработчик.Процедура    = "БиблиотекаОбновленияИнформационнойБазыПереопределяемый.УстановитьКонстантуВыгружатьПродажиНемаркируемойПродукцииВЕГАИС";
	Обработчик.Опциональный = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       = "1.3.85.3";
	Обработчик.Процедура    = "РегистрыСведений.СтавкиНалогаНаПрибыль.ЗаполнитьСтавкиНалогаНаПрибыльС2017По2020Годы";
	Обработчик.Опциональный = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       = "1.3.90.3";
	Обработчик.Процедура    = "БиблиотекаОбновленияИнформационнойБазыПереопределяемый.ВыполнитьПроверкуПлатежныхРеквизитов";
	Обработчик.Опциональный = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       = "1.3.98.1";
	Обработчик.Процедура    = "РегистрыСведений.СтавкиНалогаНаИмущество.ОбновитьЗаписиСтавкаНалогаДвижимогоИмуществаС2018";
	Обработчик.Опциональный = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       = "1.3.117.1";
	Обработчик.Процедура    = "БиблиотекаОбновленияИнформационнойБазы.ИсправитьНекорректныеСостоянияОтправок2НДФЛ_2";
	Обработчик.Опциональный = Истина;
	
	Возврат Обработчики;
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ ДАННЫХ, НАКОПЛЕННЫХ В ИНФОРМАЦИОННОЙ БАЗЕ ("ОПЦИОНАЛЬНЫЕ")

Процедура УстановитьКонстантуНастройкиСпособовРаспределенияЗатрат() Экспорт
	
	Константы.ИспользоватьГибкуюНастройкуСпособовРаспределенияЗатрат.Установить(Истина);
	
КонецПроцедуры

Процедура УстановитьКонстантуВыгружатьПродажиНемаркируемойПродукцииВЕГАИС() Экспорт
	
	Константы.ВыгружатьПродажиНемаркируемойПродукцииВЕГАИС.Установить(Ложь);
	
КонецПроцедуры

Процедура УстановитьПредельноеКоличествоЗаписейВРазделеДекларацииПоНДС() Экспорт

	Константы.ПредельноеКоличествоЗаписейВРазделеДекларацииПоНДС.Установить(10000);

КонецПроцедуры

Процедура ИзменитьНастройкуВыгрузкиСебестоимостиВРозницу() Экспорт
	
	ВыборкаУзлов = ПланыОбмена.ОбменУправлениеПредприятиемРозничнаяТорговля.Выбрать();
	
	Пока ВыборкаУзлов.Следующий() Цикл
		
		УзелОбмена = ВыборкаУзлов.ПолучитьОбъект();
		
		Если УзелОбмена.УдалитьВыгружатьСебестоимость Тогда
			УзелОбмена.СпособВыгрузкиСебестоимости = Перечисления.СпособыВыгрузкиСебестоимостиВРозничнуюТорговлю.ВыгружатьСебестоимостьРегл;
		Иначе
			УзелОбмена.СпособВыгрузкиСебестоимости = Перечисления.СпособыВыгрузкиСебестоимостиВРозничнуюТорговлю.НеВыгружать;
		КонецЕсли;
		
		УзелОбмена.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

// В регистр сведений "ЖурналУчетаСчетовФактур" добавлен новый ресурс КППКонтрагента 
//
Процедура ЗаполнениеКППКонтрагентаЖурналаУчетаСчетовФактур() Экспорт
	
	Запрос	= Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЖурналУчетаСчетовФактур.Регистратор,
	|	ЖурналУчетаСчетовФактур.Контрагент.КПП КАК КППКонтрагента
	|ИЗ
	|	РегистрСведений.ЖурналУчетаСчетовФактур КАК ЖурналУчетаСчетовФактур
	|ГДЕ
	|	ЖурналУчетаСчетовФактур.КППКонтрагента = """"
	|	И ЖурналУчетаСчетовФактур.Контрагент.КПП <> """"";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НаборЗаписей = РегистрыСведений.ЖурналУчетаСчетовФактур.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
		НаборЗаписей.Прочитать();
		
		Для Каждого Запись Из НаборЗаписей Цикл
			Запись.КППКонтрагента	= Выборка.КППКонтрагента;
		КонецЦикла;
		
		Попытка
			НаборЗаписей.Записать(Истина);
		Исключение
			ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки());
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

//Устанавливает значение ПорядокПризнанияДопРасходов в записях учетной политики
//
Процедура УстановитьПорядокПризнанияДопРасходов() Экспорт
	
	НаборЗаписей = РегистрыСведений.УчетнаяПолитикаОрганизаций.СоздатьНаборЗаписей();
	НаборЗаписей.Прочитать();

	Для каждого Запись Из НаборЗаписей Цикл
		
		Если НЕ ЗначениеЗаполнено(Запись.ПорядокПризнанияДопРасходов) Тогда
			Запись.ПорядокПризнанияДопРасходов = Перечисления.ПорядокПризнанияДопРасходов.ВключатьВСтоимость;
		КонецЕсли;
				
	КонецЦикла;
	
	Попытка
		НаборЗаписей.Записать();
	Исключение
		ТекстСообщения	= НСтр("ru = 'Не выполнено обновление записей регистра сведений ""Учетная политика""'");
		ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
КонецПроцедуры

// Процедура загружает регионы из внутренних таблиц.
//
// Параметры:
//  нет
//
Процедура ЗагрузитьРегионы() Экспорт

	АдресныеСведения = РегистрыСведений.АдресныйКлассификатор.СоздатьНаборЗаписей();
	КлассификаторАдресов = РегистрыСведений.АдресныйКлассификатор.ПолучитьМакет("ТаблицаРегионов");
	
	ВсегоЗаписей = КлассификаторАдресов.ВысотаТаблицы - 1;

	Для Сч = 2 По КлассификаторАдресов.ВысотаТаблицы Цикл

		ЗаписьАдреса = РегистрыСведений.АдресныйКлассификатор.СоздатьМенеджерЗаписи();
		
		ЗаписьАдреса.Код = Число(КлассификаторАдресов.Область(Сч, 1, Сч, 1).Текст);
		КодРегиона = Цел(ЗаписьАдреса.Код / УправлениеКонтактнойИнформацией.МаскаРегиона());
		
		ЗаписьАдреса.Наименование = СокрЛП(КлассификаторАдресов.Область(Сч, 2, Сч, 2).Текст);
		ЗаписьАдреса.Сокращение   = СокрЛП(КлассификаторАдресов.Область(Сч, 3, Сч, 3).Текст);
		ЗаписьАдреса.Индекс       = СокрЛП(КлассификаторАдресов.Область(Сч, 4, Сч, 4).Текст);
		ЗаписьАдреса.ТипАдресногоЭлемента = 1;
		
		ЗаписьАдреса.КодРегионаВКоде           = КодРегиона;
		ЗаписьАдреса.КодРайонаВКоде            = Цел(ЗаписьАдреса.Код / УправлениеКонтактнойИнформацией.МаскаРайона()) % 1000;
		ЗаписьАдреса.КодГородаВКоде            = Цел(ЗаписьАдреса.Код / УправлениеКонтактнойИнформацией.МаскаГорода()) % 1000;
		ЗаписьАдреса.КодНаселенногоПунктаВКоде = Цел(ЗаписьАдреса.Код / УправлениеКонтактнойИнформацией.МаскаНасПункта()) % 1000;
		ЗаписьАдреса.КодУлицыВКоде             = Цел(ЗаписьАдреса.Код / УправлениеКонтактнойИнформацией.МаскаУлицы())% 10000;
		
		ЗаписьАдреса.Записать(Истина);
		
	КонецЦикла;
	
КонецПроцедуры

// С 06.02.2017 г. изменились реквизиты банка получателя, на которые надо перечислять налоги
// в г. Москва и Московской области.
// Процедура выводит предупреждение при использовании неактуальных платежных реквизитов
//
Процедура ВыполнитьПроверкуПлатежныхРеквизитов() Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	
	"ВЫБРАТЬ
	|	Организации.Ссылка КАК Организация
	|ИЗ
	|	Справочник.Организации КАК Организации";
	
	ВсеОрганизации = Запрос.Выполнить().Выгрузить();
	
	ОрганизацииРегиона = Новый ТаблицаЗначений;
	ОрганизацииРегиона.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ОрганизацииРегиона.Колонки.Добавить("Регион", Новый ОписаниеТипов("Строка"));
	
	Для Каждого ТекОрганизация Из ВсеОрганизации Цикл
		СведенияОбОрганизации = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ТекОрганизация.Организация, ТекущаяДата());
		СтрокаАдрес           = СведенияОбОрганизации.ЮридическийАдрес;
		МассивАдрес           = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(СтрокаАдрес);
		ЭлементовВМассиве     = МассивАдрес.Количество();
		
		Если ЭлементовВМассиве >= 2 Тогда
			Регион1 = СокрЛП(МассивАдрес[0]);// если в адресе нет индекса
			Регион2 = СокрЛП(МассивАдрес[1]);
			
			Если Найти(Регион1, "Москва") > 0 ИЛИ Найти(Регион2, "Москва") > 0 Тогда
				Стр             = ОрганизацииРегиона.Добавить();
				Стр.Организация = ТекОрганизация.Организация;
				Стр.Регион      = "Москва";
			КонецЕсли;
			
			Если Найти(Регион1, "Московская") > 0 ИЛИ Найти(Регион2, "Московская") > 0 Тогда
				Стр             = ОрганизацииРегиона.Добавить();
				Стр.Организация = ТекОрганизация.Организация;
				Стр.Регион      = "МО";
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	СписокОрганизаций = ОрганизацииРегиона.ВыгрузитьКолонку("Организация");
	
	Если СписокОрганизаций.Количество() > 0 Тогда
		СтарыйНомерСчетаМосква = "40101810800000010041";
		СтарыйНомерСчетаМО     = "40101810600000010102";
		СтарыйБИК              = "044583001";
		
		НовыйНомерСчетаМосква  = "40101810045250010041";
		НовыйНомерСчетаМО      = "40101810845250010102";
		НовыйБИК               = "044525000";
		НовоеНаименованиеБанка = "ГУ БАНКА РОССИИ ПО ЦФО";
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ПлатежноеПоручение.Организация КАК Организация,
		|	ПлатежноеПоручение.СчетКонтрагента.Банк КАК БанкПлательщика,
		|	ПлатежноеПоручение.СчетКонтрагента.Банк.Наименование КАК НаименованиеБанка
		|ИЗ
		|	Документ.ПлатежноеПоручениеИсходящее КАК ПлатежноеПоручение
		|ГДЕ
		|	ПлатежноеПоручение.Дата МЕЖДУ &ДатаНачало И &ДатаОкончание
		|	И ПлатежноеПоручение.ПеречислениеВБюджет = ИСТИНА
		|	И ПлатежноеПоручение.Оплачено
		|	И ПлатежноеПоручение.ПометкаУдаления = ЛОЖЬ
		|	И ПлатежноеПоручение.Организация В(&СписокОрганизаций)
		|	И (ПлатежноеПоручение.СчетКонтрагента.НомерСчета = &НовыйНомерСчетаМосква
		|			ИЛИ ПлатежноеПоручение.СчетКонтрагента.НомерСчета = &НовыйНомерСчетаМО)
		|	И ПлатежноеПоручение.СчетКонтрагента.Банк.Код = &НовыйБИК";
		
		ЗапросПоНовымРеквизитам = Новый Запрос(ТекстЗапроса);
		ЗапросПоНовымРеквизитам.УстановитьПараметр("ДатаНачало",             НачалоДня('2017-02-06'));
		ЗапросПоНовымРеквизитам.УстановитьПараметр("ДатаОкончание",          КонецДня(ТекущаяДата()));
		ЗапросПоНовымРеквизитам.УстановитьПараметр("СписокОрганизаций",      СписокОрганизаций);
		ЗапросПоНовымРеквизитам.УстановитьПараметр("НовыйНомерСчетаМосква",  НовыйНомерСчетаМосква);
		ЗапросПоНовымРеквизитам.УстановитьПараметр("НовыйНомерСчетаМО",      НовыйНомерСчетаМО);
		ЗапросПоНовымРеквизитам.УстановитьПараметр("НовыйБИК",               НовыйБИК);
		
		// Организации, которые платят по новым реквизитам
		ПравильныеОрганизации = ЗапросПоНовымРеквизитам.Выполнить().Выгрузить();
		
		// Проверка соответствия существующего наименования банка новому наименованию.
		// При несоответствии старое наименование меняется на новое
		Если ПравильныеОрганизации.Количество() > 0 Тогда
			Если ПравильныеОрганизации[0].НаименованиеБанка <> НовоеНаименованиеБанка Тогда
				СтароеНаименование = ПравильныеОрганизации[0].БанкПлательщика.Наименование;
				СпрБанкиСсылка = Справочники.Банки.НайтиПоНаименованию(СтароеНаименование, Истина);
				
				Если СпрБанкиСсылка <> Неопределено Тогда
					СпрБанкиОбъект = СпрБанкиСсылка.ПолучитьОбъект();
					СпрБанкиОбъект.Наименование = НовоеНаименованиеБанка;
					СпрБанкиОбъект.Записать();
					
					ОбщегоНазначения.СообщитьОбОшибке("Старое наименование банка """ + СтароеНаименование + """ изменено на новое """ + НовоеНаименованиеБанка + """",,, СтатусСообщения.Внимание);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ПравильныеОрганизации.Организация КАК Организация
		|ПОМЕСТИТЬ ВТ_ПравильныеОрганизации
		|ИЗ
		|	&ПравильныеОрганизации КАК ПравильныеОрганизации
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПлатежноеПоручение.Организация КАК Организация,
		|	ПлатежноеПоручение.Контрагент КАК Контрагент,
		|	ПлатежноеПоручение.Ссылка КАК ПлатежныйДокумент,
		|	ПлатежноеПоручение.Ссылка.Дата КАК ДатаПлатежногоДокумента
		|ИЗ
		|	Документ.ПлатежноеПоручениеИсходящее КАК ПлатежноеПоручение
		|ГДЕ
		|	ПлатежноеПоручение.Дата МЕЖДУ &ДатаНачало И &ДатаОкончание
		|	И ПлатежноеПоручение.ПеречислениеВБюджет = ИСТИНА
		|	И ПлатежноеПоручение.Оплачено
		|	И ПлатежноеПоручение.ПометкаУдаления = ЛОЖЬ
		|	И ПлатежноеПоручение.Организация В(&СписокОрганизаций)
		|	И (ПлатежноеПоручение.СчетКонтрагента.НомерСчета = &СтарыйНомерСчетаМосква
		|			ИЛИ ПлатежноеПоручение.СчетКонтрагента.НомерСчета = &СтарыйНомерСчетаМО)
		|	И ПлатежноеПоручение.СчетКонтрагента.Банк.Код = &СтарыйБИК
		|	И НЕ ПлатежноеПоручение.Организация В
		|				(ВЫБРАТЬ
		|					ВТ_ПравильныеОрганизации.Организация
		|				ИЗ
		|					ВТ_ПравильныеОрганизации)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Организация";
		
		ЗапросПоСтарымРеквизитам = Новый Запрос(ТекстЗапроса);
		
		ЗапросПоСтарымРеквизитам.УстановитьПараметр("ДатаНачало",             НачалоДня('2016-01-01'));
		ЗапросПоСтарымРеквизитам.УстановитьПараметр("ДатаОкончание",          КонецДня(ТекущаяДата()));
		ЗапросПоСтарымРеквизитам.УстановитьПараметр("СписокОрганизаций",      СписокОрганизаций);
		ЗапросПоСтарымРеквизитам.УстановитьПараметр("СтарыйНомерСчетаМосква", СтарыйНомерСчетаМосква);
		ЗапросПоСтарымРеквизитам.УстановитьПараметр("СтарыйНомерСчетаМО",     СтарыйНомерСчетаМО);
		ЗапросПоСтарымРеквизитам.УстановитьПараметр("СтарыйБИК",              СтарыйБИК);
		ЗапросПоСтарымРеквизитам.УстановитьПараметр("ПравильныеОрганизации",  ПравильныеОрганизации);
		
		ПлатежкиСоСтарымиРеквизитами = ЗапросПоСтарымРеквизитам.Выполнить().Выгрузить();
		
		Если ПлатежкиСоСтарымиРеквизитами.Количество() > 0 Тогда
			ПлатежкиСоСтарымиРеквизитамиМосква = ПлатежкиСоСтарымиРеквизитами.Скопировать();
			ПлатежкиСоСтарымиРеквизитамиМО     = ПлатежкиСоСтарымиРеквизитами.Скопировать();
			
			ПлатежкиСоСтарымиРеквизитамиМосква.Очистить();
			ПлатежкиСоСтарымиРеквизитамиМО.Очистить();
			
			ВыводитьПлатежныеДокументыМосква = Ложь;
			ВыводитьПлатежныеДокументыМО     = Ложь;
			ДатаОтбора = '2017-02-06';
			
			Для Каждого Платежка Из ПлатежкиСоСтарымиРеквизитами Цикл
				СчетПолучателя = Платежка.ПлатежныйДокумент.СчетКонтрагента;
				
				Если СчетПолучателя.Банк.Код = СтарыйБИК Тогда
					Если СчетПолучателя.НомерСчета = СтарыйНомерСчетаМосква Тогда
						Стр = ПлатежкиСоСтарымиРеквизитамиМосква.Добавить();
						ЗаполнитьЗначенияСвойств(Стр, Платежка);
						
						Если Платежка.ДатаПлатежногоДокумента >= ДатаОтбора И НЕ ВыводитьПлатежныеДокументыМосква Тогда
							ВыводитьПлатежныеДокументыМосква = Истина;
						КонецЕсли;
					ИначеЕсли СчетПолучателя.НомерСчета = СтарыйНомерСчетаМО Тогда
						Стр = ПлатежкиСоСтарымиРеквизитамиМО.Добавить();
						ЗаполнитьЗначенияСвойств(Стр, Платежка);
						
						Если Платежка.ДатаПлатежногоДокумента >= ДатаОтбора И НЕ ВыводитьПлатежныеДокументыМО Тогда
							ВыводитьПлатежныеДокументыМО = Истина;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			Если ПлатежкиСоСтарымиРеквизитамиМосква.Количество() = 0
				И ПлатежкиСоСтарымиРеквизитамиМО.Количество() = 0 Тогда
				Возврат;
			КонецЕсли;
			
			ТабДокумент = Новый ТабличныйДокумент;
			
			ТабДокумент.ОтображатьСетку = Ложь;
			ТабДокумент.ОтображатьЗаголовки = Ложь;
			ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
			ТабДокумент.АвтоМасштаб = Истина;
			ТабДокумент.ТолькоПросмотр = Истина;
			
			Макет = Обработки.ОбновлениеИнформационнойБазы.ПолучитьМакет("ПредупреждениеОСменеРеквизитов");
			
			ОбластьШапка                 = Макет.ПолучитьОбласть("Шапка");
			ОбластьШапкаВыводаДокументов = Макет.ПолучитьОбласть("ШапкаВыводаДокументов");
			ОбластьОрганизация           = Макет.ПолучитьОбласть("Организация");
			ОбластьПлатежка              = Макет.ПолучитьОбласть("Платежка");
			ТабДокумент.Вывести(ОбластьШапка);
			
			
			ОрганизацииСоСтарымиРеквизитамиМосква = ПлатежкиСоСтарымиРеквизитамиМосква.Скопировать();
			ОрганизацииСоСтарымиРеквизитамиМосква.Свернуть("Организация");
			
			ОрганизацииСоСтарымиРеквизитамиМО = ПлатежкиСоСтарымиРеквизитамиМО.Скопировать();
			ОрганизацииСоСтарымиРеквизитамиМО.Свернуть("Организация");
			
			Если ПлатежкиСоСтарымиРеквизитамиМосква.Количество() > 0 Тогда
				ОбластьРеквизитыМосква = Макет.ПолучитьОбласть("РеквизитыМосква");
				ТабДокумент.Вывести(ОбластьРеквизитыМосква);
				
				Если ВыводитьПлатежныеДокументыМосква Тогда
					ТабДокумент.Вывести(ОбластьШапкаВыводаДокументов);
					
					Если ОрганизацииСоСтарымиРеквизитамиМосква.Количество() > 0 Тогда
						Для Каждого ТекОрганизация Из ОрганизацииСоСтарымиРеквизитамиМосква Цикл
							Отбор = Новый Структура;
							Отбор.Вставить("Организация", ТекОрганизация.Организация);
							Строки = ПлатежкиСоСтарымиРеквизитамиМосква.НайтиСтроки(Отбор);
							
							Счетчик = 0;
							
							Для Каждого Стр Из Строки Цикл
								Если Стр.ПлатежныйДокумент.Дата >= ДатаОтбора Тогда
									Если Счетчик = 0 Тогда
										ОбластьОрганизация.Параметры.СтрОрганизация = ТекОрганизация.Организация;
										ТабДокумент.Вывести(ОбластьОрганизация);
										
										ТабДокумент.НачатьГруппуСтрок("Организация");
									КонецЕсли;
									
									ОбластьПлатежка.Параметры.СтрПлатежка          = Стр.ПлатежныйДокумент;
									ОбластьПлатежка.Параметры.РасшифровкаДокумента = Стр.ПлатежныйДокумент;
									ТабДокумент.Вывести(ОбластьПлатежка);
									
									Счетчик = Счетчик + 1;
								КонецЕсли;
							КонецЦикла;
							
							Если Счетчик > 0 Тогда
								ТабДокумент.ЗакончитьГруппуСтрок();
							КонецЕсли;
						КонецЦикла
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Если ПлатежкиСоСтарымиРеквизитамиМО.Количество() > 0 Тогда
				ОбластьРеквизитыМО = Макет.ПолучитьОбласть("РеквизитыМО");
				ТабДокумент.Вывести(ОбластьРеквизитыМО);
				
				Если ВыводитьПлатежныеДокументыМО Тогда
					ТабДокумент.Вывести(ОбластьШапкаВыводаДокументов);
					
					Если ОрганизацииСоСтарымиРеквизитамиМО.Количество() > 0 Тогда
						Для Каждого ТекОрганизация Из ОрганизацииСоСтарымиРеквизитамиМО Цикл
							Отбор = Новый Структура;
							Отбор.Вставить("Организация", ТекОрганизация.Организация);
							Строки = ПлатежкиСоСтарымиРеквизитамиМО.НайтиСтроки(Отбор);
							
							Счетчик = 0;
							
							Для Каждого Стр Из Строки Цикл
								Если Стр.ПлатежныйДокумент.Дата >= ДатаОтбора Тогда
									Если Счетчик = 0 Тогда
										ОбластьОрганизация.Параметры.СтрОрганизация = ТекОрганизация.Организация;
										ТабДокумент.Вывести(ОбластьОрганизация);
										
										ТабДокумент.НачатьГруппуСтрок("Организация");
									КонецЕсли;
									
									ОбластьПлатежка.Параметры.СтрПлатежка          = Стр.ПлатежныйДокумент;
									ОбластьПлатежка.Параметры.РасшифровкаДокумента = Стр.ПлатежныйДокумент;
									ТабДокумент.Вывести(ОбластьПлатежка);
									
									Счетчик = Счетчик + 1;
								КонецЕсли;
							КонецЦикла;
							
							Если Счетчик > 0 Тогда
								ТабДокумент.ЗакончитьГруппуСтрок();
							КонецЕсли;
						КонецЦикла
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			ТабДокумент.Показать("Предупреждение о смене платежных реквизитов");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры
