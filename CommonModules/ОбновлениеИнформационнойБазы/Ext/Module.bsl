////////////////////////////////////////////////////////////////////////////////
// ОБНОВЛЕНИЕ ДАННЫХ ИНФОРМАЦИОННОЙ БАЗЫ ПРИ СМЕНЕ ВЕРСИИ КОНФИГУРАЦИИ

// Проверить необходимость обновления информационной базы при смене версии конфигурации.
//
Функция НеобходимоОбновлениеИнформационнойБазы() Экспорт
	
	Возврат НеобходимоВыполнитьОбновление(Метаданные.Версия, ВерсияИБ(Метаданные.Имя));
	
КонецФункции

// Проверить права текущего пользователя на выполнение обновления информационной базы.
//
Функция ЕстьПраваНаОбновлениеИнформационнойБазы()
	
	Возврат ПравоДоступа("МонопольныйРежим", Метаданные) И РольДоступна("ПолныеПрава");
	
КонецФункции	

Функция ПроверитьНевозможностьОбновленияИнформационнойБазы() Экспорт
	
	Возврат НеобходимоОбновлениеИнформационнойБазы() И НЕ ЕстьПраваНаОбновлениеИнформационнойБазы();
	
КонецФункции	

// Выполнить неинтерактивное обновление данных ИБ.
//
// Результат:
//      Неопределено - обновление не выполнялось (не требуется)
//      Строка       - номер версии данных до обновления
//
Функция ВыполнитьОбновлениеИнформационнойБазы() Экспорт

	ВерсияМетаданных = Метаданные.Версия;
	ВерсияДанных = ВерсияИБ(Метаданные.Имя);
	Если ПустаяСтрока(ВерсияМетаданных) Тогда
		 ВерсияМетаданных = "0.0.0.0";
	КонецЕсли;
	 
	Если НЕ НеобходимоВыполнитьОбновление(ВерсияМетаданных, ВерсияДанных) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Изменился номер версии конфигурации: с ""%1"" на ""%2"". Будет выполнено обновление информационной базы.'"),
		ВерсияДанных, ВерсияМетаданных);
	ЗаписатьИнформацию(Сообщение);
	
	// Проверка наличия прав для обновления информационной базы.
	Если НЕ ЕстьПраваНаОбновлениеИнформационнойБазы() Тогда
		Сообщение = НСтр("ru = 'Недостаточно прав для выполнения обновления. Обратитесь к системному администратору.'");
		ЗаписатьОшибку(Сообщение);
		ВызватьИсключение Сообщение;
	КонецЕсли;
	
	// Установка монопольного режима для обновления информационной базы.
	Попытка
		УстановитьМонопольныйРежим(Истина);
	Исключение
		Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Невозможно выполнить обновление информационной базы, так как к ней подключены другие сеансы.
				 |Обратитесь к системному администратору.
				 |
				 |Подробности ошибки:
				 |%1'"), КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ЗаписатьОшибку(Сообщение);
		
		ВызватьИсключение Сообщение;
	КонецПопытки;
	
	// Если для пользователей с полными правами применяется дата запрета изменения данных,
	// то отключим этот признак на время выполнения обновления
	ВосстановитьДатуЗапрета = ИзменитьПрименениеДатыЗапретаДляПолныхПрав(Ложь);
	
	Ошибка = Ложь;
	Попытка
		СписокОбработчиковОбновления = ОбновлениеИнформационнойБазыПереопределяемый.ОбработчикиОбновления();
		
		// Также всегда вызываются процедуры обновления данных библиотеки стандартных подсистем
		//
		Обработчик = СписокОбработчиковОбновления.Добавить();
		Обработчик.Версия = "*";
		Обработчик.Процедура = "СтандартныеПодсистемыСервер.ВыполнитьОбновлениеИнформационнойБазы";
		
		ВыполненныеОбработчики = ВыполнитьИтерациюОбновления(Метаданные.Имя, Метаданные.Версия,
			СписокОбработчиковОбновления);
	Исключение
		Ошибка = Истина;
		Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Обновление информационной базы на версию ""%1"" завершилось с ошибками: 
				|%2'"), ВерсияМетаданных, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЗаписатьОшибку(Сообщение);
	КонецПопытки;
	
	// Восстановим применение даты запрета изменения данных для пользователей с полными правами
	Если ВосстановитьДатуЗапрета Тогда
		ИзменитьПрименениеДатыЗапретаДляПолныхПрав(Истина);
	КонецЕсли; 
	
	// Отключение монопольного режима.
	УстановитьМонопольныйРежим(Ложь);
	
	Если Ошибка Тогда
		ВызватьИсключение Сообщение;
	КонецЕсли;
	
	Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Обновление информационной базы на версию ""%1"" выполнено успешно.'"), ВерсияМетаданных);
	ЗаписатьИнформацию(Сообщение);
	
	ОбновлениеИнформационнойБазыПереопределяемый.ПослеОбновления(
		ВерсияДанных, 
		ВерсияМетаданных, 
		ВыполненныеОбработчики, 
		Истина);
		
	Возврат ВерсияДанных;

КонецФункции

// Выполнить обработчики обновления из списка ОбработчикиОбновления 
// для библиотеки ИдентификаторБиблиотеки до версии ВерсияМетаданныхИБ.
//
// Параметры
//  ИдентификаторБиблиотеки  – Строка – имя конфигурации или идентификатор библиотеки.
//  ВерсияМетаданныхИБ       – Строка – версия метаданных, до которой необходимо
//                                      выполнить обновление.
//  ОбработчикиОбновления    – Соответствие – список обработчиков обновления.
//
// Возвращаемое значение:
//   ДеревоЗначений   – выполненные обработчики обновления.
//
Функция ВыполнитьИтерациюОбновления(Знач ИдентификаторБиблиотеки, Знач ВерсияМетаданныхИБ, 
	Знач ОбработчикиОбновления) Экспорт
	
	ТекущаяВерсияИБ = ВерсияИБ(ИдентификаторБиблиотеки);
	Если ПустаяСтрока(ТекущаяВерсияИБ) Тогда
		 ТекущаяВерсияИБ = "0.0.0.0";
	КонецЕсли;
	НоваяВерсияИБ = ТекущаяВерсияИБ;
	ВерсияМетаданных = ВерсияМетаданныхИБ;
	Если ПустаяСтрока(ВерсияМетаданных) Тогда
		 ВерсияМетаданных = "0.0.0.0";
	КонецЕсли;
	
	ВыполняемыеОбработчики = ОбработчикиОбновленияВИнтервале(ОбработчикиОбновления, ТекущаяВерсияИБ, ВерсияМетаданных);
	Для Каждого Версия Из ВыполняемыеОбработчики.Строки Цикл
		
		Если Версия.Версия = "*" Тогда
			Сообщение = НСтр("ru = 'Выполняются обязательные процедуры обновления информационной базы.'");
		Иначе
			НоваяВерсияИБ = Версия.Версия;
			
			Если ИдентификаторБиблиотеки = Метаданные.Имя Тогда 
				Сообщение = НСтр("ru = 'Выполняется обновление информационной базы с версии %1 на версию %2.'");
			Иначе
				Сообщение = НСтр("ru = 'Выполняется обновление информационной базы родительской конфигурации %3 с версии %1 на версию %2.'");
			КонецЕсли;
			
			Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Сообщение,
							 ТекущаяВерсияИБ, НоваяВерсияИБ, ИдентификаторБиблиотеки);
			
		КонецЕсли;
		
		ЗаписатьИнформацию(Сообщение);
		
		Для Каждого Обработчик Из Версия.Строки Цикл
			ОбщегоНазначения.ВыполнитьБезопасно(Обработчик.Процедура);
		КонецЦикла;
		
		Если Версия.Версия = "*" Тогда
			Сообщение = НСтр("ru = 'Выполнены обязательные процедуры обновления информационной базы.'");
		Иначе
			// Установка номера версии информационной базы
			УстановитьВерсиюИБ(ИдентификаторБиблиотеки, НоваяВерсияИБ);
			
			Если ИдентификаторБиблиотеки = Метаданные.Имя Тогда 
				Сообщение = НСтр("ru = 'Выполнено обновление информационной базы с версии %1 на версию %2.'");
			Иначе
				Сообщение = НСтр("ru = 'Выполнено обновление информационной базы родительской конфигурации %3 с версии %1 на версию %2.'");
			КонецЕсли;
			
			Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Сообщение,
			  ТекущаяВерсияИБ, НоваяВерсияИБ, ИдентификаторБиблиотеки);
			
			ТекущаяВерсияИБ = НоваяВерсияИБ;
			
		КонецЕсли;
		ЗаписатьИнформацию(Сообщение);
		
	КонецЦикла;
	
	// Установка номера версии информационной базы
	Если ВерсияИБ(ИдентификаторБиблиотеки) <> ВерсияМетаданныхИБ Тогда
		УстановитьВерсиюИБ(ИдентификаторБиблиотеки, ВерсияМетаданныхИБ);
	КонецЕсли;
	
	Возврат ВыполняемыеОбработчики;
	
КонецФункции

Функция НоваяТаблицаОбработчиковОбновления() Экспорт
	
	Обработчики = Новый ТаблицаЗначений;
	Обработчики.Колонки.Добавить("НачальноеЗаполнение", Новый ОписаниеТипов("Булево"));
	Обработчики.Колонки.Добавить("Версия", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(0)));
	Обработчики.Колонки.Добавить("Процедура", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(0)));
	Обработчики.Колонки.Добавить("Опциональный");
	Обработчики.Колонки.Добавить("Приоритет", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(2)));
	Обработчики.Колонки.Добавить("ОбщиеДанные", Новый ОписаниеТипов("Булево"));
	Обработчики.Колонки.Добавить("УправлениеОбработчиками", Новый ОписаниеТипов("Булево"));
	Обработчики.Колонки.Добавить("ВыполнятьВГруппеОбязательных", Новый ОписаниеТипов("Булево"));
	Обработчики.Колонки.Добавить("МонопольныйРежим");
	Возврат Обработчики;
	
КонецФункции

// Получить версию конфигурации или родительской конфигурации (библиотеки),
// которая хранится в информационной базе.
//
// Параметры
//  ИдентификаторБиблиотеки  – Строка – имя конфигурации или идентификатор библиотеки.
//
// Возвращаемое значение:
//   Строка   – версия.
//
// Пример использования:
//   ВерсияКонфигурацииИБ = ВерсияИБ(Метаданные.Имя);
//
Функция ВерсияИБ(Знач ИдентификаторБиблиотеки) Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ВерсииПодсистем.Версия КАК Версия
		|ИЗ
		|	РегистрСведений.ВерсииПодсистем КАК ВерсииПодсистем
		|ГДЕ
		|	ВерсииПодсистем.ИмяПодсистемы = &ИмяПодсистемы");
	Запрос.Параметры.Вставить("ИмяПодсистемы", ИдентификаторБиблиотеки);
	ТаблицаЗначений = Запрос.Выполнить().Выгрузить();
	Результат = "";
	Если ТаблицаЗначений.Количество() > 0 Тогда
		Результат = СокрЛП(ТаблицаЗначений[0].Версия);
	КонецЕсли;
	Возврат ?(ПустаяСтрока(Результат), "0.0.0.0", Результат);
	
КонецФункции

// Возвращает Истина если запуск информационной базы
// выполняется первый раз, иначе возвращает Ложь
//
Функция ПервыйЗапуск() Экспорт
	
	Возврат ПервыйЗапускИнформационнойБазы();
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Функция НеобходимоВыполнитьОбновление(Знач ВерсияМетаданных, Знач ВерсияДанных) 
	
	Возврат НЕ ПустаяСтрока(ВерсияМетаданных) И ВерсияДанных <> ВерсияМетаданных;
	
КонецФункции

Процедура УстановитьВерсиюИБ(Знач ИдентификаторБиблиотеки, Знач НомерВерсии) Экспорт
	
	НаборЗаписей = РегистрыСведений.ВерсииПодсистем.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ИмяПодсистемы.Установить(ИдентификаторБиблиотеки);
	
	НоваяЗапись = НаборЗаписей.Добавить();
	
	НоваяЗапись.ИмяПодсистемы = ИдентификаторБиблиотеки;
	НоваяЗапись.Версия = НомерВерсии;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

Функция ОбработчикиОбновленияВИнтервале(Знач ВсеОбработчики, Знач ВерсияОт, Знач ВерсияДо)
	
	ПостроительЗапроса = Новый ПостроительЗапроса();
	Источник = Новый ОписаниеИсточникаДанных(ВсеОбработчики);
	Источник.Колонки.Версия.Измерение = Истина;
	ПостроительЗапроса.ИсточникДанных = Источник;
	ПостроительЗапроса.Измерения.Добавить("Версия");
	ПостроительЗапроса.Выполнить();
	ВыборкаИтоги = ПостроительЗапроса.Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ВыполняемыеОбработчики = Новый ДеревоЗначений();
	ВыполняемыеОбработчики.Колонки.Добавить("Версия");
	ВыполняемыеОбработчики.Колонки.Добавить("Процедура");
	Пока ВыборкаИтоги.Следующий() Цикл
		
		Если ВыборкаИтоги.Версия <> "*" И 
			НЕ (СтроковыеФункцииКлиентСервер.СравнитьВерсии(ВыборкаИтоги.Версия, ВерсияОт) > 0 
				И СтроковыеФункцииКлиентСервер.СравнитьВерсии(ВыборкаИтоги.Версия, ВерсияДо) <= 0) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаВерсии = Неопределено;
		Выборка = ВыборкаИтоги.Выбрать(ОбходРезультатаЗапроса.Прямой);
		Пока Выборка.Следующий() Цикл
			Если Выборка.Процедура = Null Тогда
				Продолжить;
			КонецЕсли;
			Если Выборка.Опциональный = Истина И ВерсияОт = "0.0.0.0" Тогда
				Продолжить;
			КонецЕсли;
			Если СтрокаВерсии = Неопределено Тогда
				СтрокаВерсии = ВыполняемыеОбработчики.Строки.Добавить();
				СтрокаВерсии.Версия = ВыборкаИтоги.Версия;
			КонецЕсли;
			Обработчик = СтрокаВерсии.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(Обработчик, Выборка, "Версия, Процедура");
		КонецЦикла;
		
	КонецЦикла;
	
	// упорядочить обработчики по возрастанию версий
	УпорядочитьСписокВерсий(ВыполняемыеОбработчики.Строки);
	
	Возврат ВыполняемыеОбработчики;
	
КонецФункции

// Сортирует коллекцию с данными о версиях по возрастанию версий
//
// Параметры:
//  СтрокиВерсий - Таблица значений или коллекция строк дерева значений.
//                 Таблица (дерево) должна содержать колонку "Версия", по возрастанию версий в которой 
//                 она будет упорядочена.
Процедура УпорядочитьСписокВерсий(СтрокиВерсий) Экспорт
	// упорядочить обработчики по возрастанию версий
	КоличествоСтрок = СтрокиВерсий.Количество();
	Для Инд1 = 2 По КоличествоСтрок Цикл
		Для Инд2 = 0 По КоличествоСтрок - Инд1 Цикл
			
			Если СтрокиВерсий[Инд2].Версия = "*" Тогда
				Результат = -1;
			ИначеЕсли СтрокиВерсий[Инд2+1].Версия = "*" Тогда
				Результат = 1;
			Иначе
				Результат = СтроковыеФункцииКлиентСервер.СравнитьВерсии(СтрокиВерсий[Инд2].Версия, СтрокиВерсий[Инд2+1].Версия);
			КонецЕсли;	
			
			Если Результат > 0  Тогда 
				СтрокиВерсий.Сдвинуть(Инд2, 1);
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

// Для отключения даты запрета редактирования
//
Функция ИзменитьПрименениеДатыЗапретаДляПолныхПрав(ИспользоватьДатуЗапрета)

	// Если режим не используется, то ничего не требуется делать
	Если НЕ ИспользоватьДатуЗапрета
		И НЕ Константы.ПрименятьДатуЗапретаДляПолныхПрав.Получить() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Константы.ПрименятьДатуЗапретаДляПолныхПрав.Установить(ИспользоватьДатуЗапрета);
	ПолныеПрава.УстановитьПараметрГраницыЗапретаИзмененияДанных();
	
	Возврат Истина;
	
КонецФункции

// Записывает изменения в переданном объекте.
//
// Параметры:
//  Данные - объект, который необходимо записать.
//  РегистрироватьНаУзлахПлановОбмена - Булево - включает регистрацию на узлах планов обмена при записи объекта.
//  ВключитьБизнесЛогику              - Булево - включает бизнес-логику при записи объекта.
//
Процедура ЗаписатьДанные(Знач Данные, Знач РегистрироватьНаУзлахПлановОбмена = Ложь, Знач ВключитьБизнесЛогику = Ложь) Экспорт
	
	Данные.ОбменДанными.Загрузка = Не ВключитьБизнесЛогику;
	Если Не РегистрироватьНаУзлахПлановОбмена Тогда
		Данные.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов");
		Данные.ОбменДанными.Получатели.АвтоЗаполнение = Ложь;
	КонецЕсли;
	
	Данные.Записать();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОТОКОЛИРОВАНИЕ ХОДА ОБНОВЛЕНИЯ

Функция СобытиеЖурналаРегистрации() Экспорт
	
	Возврат НСтр("ru = 'Обновление информационной базы'");
	
КонецФункции	

Процедура ЗаписатьИнформацию(Знач Текст)
	
	ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Информация,,, Текст);
	
КонецПроцедуры

Процедура ЗаписатьОшибку(Знач Текст) 
	
	ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,,, Текст);
	
КонецПроцедуры

// Возвращает Истина, если выполняется обновление ИБ
Функция ВыполняетсяОбновлениеИнформационнойБазы() Экспорт
	
	Возврат НеобходимоОбновлениеИнформационнойБазы() И ЕстьПраваНаОбновлениеИнформационнойБазы();
	
КонецФункции

// Возвращает текст причины блокировки, если требуется обновление ИБ и у текущего пользователя
// для этого недостаточно прав, иначе возвращает пустую строку.
//
// Параметры:
//  УчитыватьПривилегированныйРежим - Булево. Начальное значение Истина. Если указать Ложь,
//                                    то при проверке полноправности текущего пользователя
//                                    наличие привилегированного режиме не будет учитываться.
//  
//  ПриЗапускеКлиентскогоПриложения - Булево. Начальное значение Ложь. Если указать Истина,
//                                    тогда в случае, если выполнен запуск с пустым списком
//                                    пользователей, то возвращается пустая строка, вместо
//                                    сообщения о недостатке прав (когда есть недостаток), 
//                                    т.к. проверка на запуск с пустым списком пользователей
//                                    при недостатке прав проверяется позднее и отдельно,
//                                    в результате чего происходит добавление пользователя ИБ
//                                    администратор с ролями АдминистраторСистемы и ПолныеПрава.
// 
// Возвращаемое значение:
//  Строка. Если база не заблокирована, тогда пустая строка, иначе сообщение о причине блокировки.
// 
Функция ИнформационнаяБазаЗаблокированаДляОбновления(УчитыватьПривилегированныйРежим = Истина, Знач ПриЗапускеКлиентскогоПриложения = Ложь) Экспорт
	
	Сообщение = "";
	
	ТекущийПользовательИБ = ПользователиИнформационнойБазы.ТекущийПользователь();
	
	Если УчитыватьПривилегированныйРежим Тогда
		ЕстьПравоАдминистрирование = ПравоДоступа("Администрирование", Метаданные);
	Иначе
		ЕстьПравоАдминистрирование = ПравоДоступа("Администрирование", Метаданные, ТекущийПользовательИБ);
	КонецЕсли;
	
	СообщениеАдминистраторуСистемы =
		НСтр("ru = 'Вход в программу временно невозможен в связи с обновлением версии конфигурации.
		           |Для завершения обновления конфигурации требуются административные права
		           |(роли ""Администратор системы"" и ""Полные права"").'");
	
	УстановитьПривилегированныйРежим(Истина);
	РазделениеВключено = ОбщегоНазначенияПовтИсп.РазделениеВключено();
	ДоступноИспользованиеРазделенныхДанных = ОбщегоНазначенияПовтИсп.ДоступноИспользованиеРазделенныхДанных();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если НЕ РазделениеВключено
		ИЛИ ДоступноИспользованиеРазделенныхДанных Тогда
		
		Если НеобходимоОбновлениеИнформационнойБазы()
		   И НЕ ЕстьПраваНаОбновлениеИнформационнойБазы() Тогда
			
			Если ПривилегированныйРежим()
			   И НЕ УчитыватьПривилегированныйРежим Тогда
				Возврат ""; // Возможно, использован параметр запуска UsePrivilegedMode.
			КонецЕсли;
			
			Если ЕстьПравоАдминистрирование Тогда
				Сообщение = СообщениеАдминистраторуСистемы;
			Иначе
				// Сообщение пользователю локального режима.
				Сообщение =
					НСтр("ru = 'Вход в программу временно невозможен в связи с обновлением версии конфигурации.
					           |Обратитесь к администратору за подробностями.'");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Сообщение;
	
КонецФункции

// Получает сведения об обновлении информационной базы.
//
Функция СведенияОбОбновленииИнформационнойБазы() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() И Не ОбщегоНазначенияПовтИсп.ДоступноИспользованиеРазделенныхДанных() Тогда
		Возврат НовыеСведенияОбОбновлении(Истина);
	КонецЕсли;
	
	Возврат Константы.СведенияОбОбновленииИБ.Получить().Получить();
	
КонецФункции

// Только для внутреннего использования
//
Функция НовыеСведенияОбОбновлении(НачальноеЗаполнениеДанных)
	
	СведенияОбОбновлении = Новый Структура;
	
	Если Не ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.ПроверкаЛегальностиПолученияОбновления")
		Или СтандартныеПодсистемыСервер.ЭтоБазоваяВерсияКонфигурации() Тогда
		ЛегальностьПолученияОбновленияПодтверждена = Истина;
	Иначе
		ЛегальностьПолученияОбновленияПодтверждена = НачальноеЗаполнениеДанных;
	КонецЕсли;
	
	СведенияОбОбновлении.Вставить("ВремяНачалаОбновления");
	СведенияОбОбновлении.Вставить("ВремяОкончанияОбновления");
	СведенияОбОбновлении.Вставить("ПродолжительностьОбновления");
	СведенияОбОбновлении.Вставить("ВремяНачалаОтложенногоОбновления");
	СведенияОбОбновлении.Вставить("ВремяОкончаниеОтложенногоОбновления");
	СведенияОбОбновлении.Вставить("НомерСеанса");
	СведенияОбОбновлении.Вставить("ОтложенноеОбновлениеЗавершеноУспешно");
	СведенияОбОбновлении.Вставить("ЛегальностьПолученияОбновленияПодтверждена", ЛегальностьПолученияОбновленияПодтверждена);
	СведенияОбОбновлении.Вставить("ДеревоОбработчиков");
	
	Возврат СведенияОбОбновлении;
	
КонецФункции

// Проверить необходимость обновления неразделенных данных информационной базы
// при смене версии конфигурации.
//
Функция НеобходимоОбновлениеНеразделенныхДанныхИнформационнойБазы() Экспорт
	
	Возврат Ложь;
	
КонецФункции

// Возвращает Истина если запуск информационной базы 
// выполняется первый раз, иначе возвращает Ложь.
//
Функция ПервыйЗапускИнформационнойБазы() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	1
	|ИЗ
	|	РегистрСведений.ВерсииПодсистем";
	Результат = Запрос.Выполнить().Пустой();
		
	Возврат Результат;
		
КонецФункции

Процедура СнятьБлокировкуФайловойБазы() Экспорт
	
КонецПроцедуры

// Объявляет события подсистемы ОбновлениеВерсииИБ:
//
// Серверные события:
//   ПриДобавленииОбработчиковОбновления,
//   ПередОбновлениемИнформационнойБазы,
//   ПослеОбновленияИнформационнойБазы.
//
// См. описание этой же процедуры в модуле СтандартныеПодсистемыСервер.
Процедура ПриДобавленииСлужебныхСобытий(КлиентскиеСобытия, СерверныеСобытия) Экспорт
	
	// СЕРВЕРНЫЕ СОБЫТИЯ.
	
	// Добавляет процедуры-обработчики обновления, необходимые данной подсистеме.
	//
	// Параметры:
	//  Обработчики - ТаблицаЗначений - см. описание функции НоваяТаблицаОбработчиковОбновления
	//                                  общего модуля ОбновлениеИнформационнойБазы.
	//
	// Синтаксис:
	// Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	//
	// Для использования в других библиотеках.
	//
	// (Аналог функции ОбновлениеИнформационнойБазыПереопределяемый.ОбработчикиОбновления).
	СерверныеСобытия.Добавить(
		"СтандартныеПодсистемы.ОбновлениеВерсииИБ\ПриДобавленииОбработчиковОбновления");
	
	// Вызывается перед обработчиками обновления данных ИБ.
	//
	// Синтаксис:
	// Процедура ПередОбновлениемИнформационнойБазы() Экспорт
	//
	// (То же, что ОбновлениеИнформационнойБазыПереопределяемый.ПередОбновлениемИнформационнойБазы).
	//
	СерверныеСобытия.Добавить("СтандартныеПодсистемы.ОбновлениеВерсииИБ\ПередОбновлениемИнформационнойБазы");
	
	// Вызывается после завершения монопольного обновления версии ИБ
	// 
	// Параметры:
	//   ПредыдущаяВерсия       - Строка - версия подсистемы до обновления. "0.0.0.0" для "пустой" ИБ.
	//   ТекущаяВерсия          - Строка - версия подсистемы после обновления.
	//   ВыполненныеОбработчики - ДеревоЗначений - список выполненных процедур-обработчиков обновления
	//                                             подсистемы, сгруппированных по номеру версии.
	//                            Процедура обхода выполненных обработчиков:
	//
	//	Для Каждого Версия Из ВыполненныеОбработчики.Строки Цикл
	//		
	//		Если Версия.Версия = "*" Тогда
	//			// Обработчик, который может выполнятся при каждой смене версии.
	//		Иначе
	//			// Обработчик, который выполняется для определенной версии.
	//		КонецЕсли;
	//		
	//		Для Каждого Обработчик Из Версия.Строки Цикл
	//			...
	//		КонецЦикла;
	//		
	//	КонецЦикла;
	//
	//   ВыводитьОписаниеОбновлений - Булево (возвращаемое значение)- если установить Истина,
	//                                тогда выводить форму с описанием обновлений.
	//   МонопольныйРежим           - Булево - признак выполнения обновления в монопольном режиме.
	//                                Истина - обновление выполнялось в монопольном режиме.
	//
	// Синтаксис:
	// Процедура ПослеОбновленияИнформационнойБазы(Знач ПредыдущаяВерсия, Знач ТекущаяВерсия,
	// 		Знач ВыполненныеОбработчики, ВыводитьОписаниеОбновлений, МонопольныйРежим) Экспорт
	//
	// (То же, что ОбновлениеИнформационнойБазыПереопределяемый.ПослеОбновленияИнформационнойБазы).
	//
	СерверныеСобытия.Добавить("СтандартныеПодсистемы.ОбновлениеВерсииИБ\ПослеОбновленияИнформационнойБазы");
	
КонецПроцедуры

// См. описание этой же процедуры в модуле СтандартныеПодсистемыСервер.
Процедура ПриДобавленииОбработчиковСлужебныхСобытий(КлиентскиеОбработчики, СерверныеОбработчики) Экспорт
	
	// КЛИЕНТСКИЕ ОБРАБОТЧИКИ.
	
	КлиентскиеОбработчики["СтандартныеПодсистемы.БазоваяФункциональность\ПриНачалеРаботыСистемы"].Добавить(
		"ОбновлениеИнформационнойБазыКлиент");
	
	// СЕРВЕРНЫЕ ОБРАБОТЧИКИ.
	
	СерверныеОбработчики["СтандартныеПодсистемы.ОбновлениеВерсииИБ\ПриДобавленииОбработчиковОбновления"].Добавить(
		"ОбновлениеИнформационнойБазы");
	
	СерверныеОбработчики["СтандартныеПодсистемы.БазоваяФункциональность\ПриОтправкеДанныхПодчиненному"].Добавить(
		"ОбновлениеИнформационнойБазы");
	
	СерверныеОбработчики["СтандартныеПодсистемы.БазоваяФункциональность\ПриОтправкеДанныхГлавному"].Добавить(
		"ОбновлениеИнформационнойБазы");
	
	СерверныеОбработчики["СтандартныеПодсистемы.БазоваяФункциональность\ПриДобавленииПараметровРаботыКлиентскойЛогикиСтандартныхПодсистемПриЗапуске"].Добавить(
		"ОбновлениеИнформационнойБазы");
	
	СерверныеОбработчики["СтандартныеПодсистемы.БазоваяФункциональность\ПриПолученииОбязательныхОбъектовПланаОбмена"].Добавить(
		"ОбновлениеИнформационнойБазы");
	
	СерверныеОбработчики["СтандартныеПодсистемы.БазоваяФункциональность\ПриПолученииОбъектовНачальногоОбразаПланаОбмена"].Добавить(
		"ОбновлениеИнформационнойБазы");
	
	СерверныеОбработчики["СтандартныеПодсистемы.БазоваяФункциональность\ПриДобавленииПараметровРаботыКлиентаПриЗапуске"].Добавить(
		"ОбновлениеИнформационнойБазы");
	
	СерверныеОбработчики["СтандартныеПодсистемы.БазоваяФункциональность\ПриДобавленииОбработчиковУстановкиПараметровСеанса"].Добавить(
		"ОбновлениеИнформационнойБазы");
	
	Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса.ОчередьЗаданий") Тогда
		СерверныеОбработчики[
			"СтандартныеПодсистемы.РаботаВМоделиСервиса.ОчередьЗаданий\ПриПолученииСпискаШаблонов"].Добавить(
				"ОбновлениеИнформационнойБазы");
	КонецЕсли;
	
	СерверныеОбработчики["СтандартныеПодсистемы.БазоваяФункциональность\ПриПолученииОбъектовИсключенийПланаОбмена"].Добавить(
		"ОбновлениеИнформационнойБазы");
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////////////////////////////
//  ЕГАИС v3
//  Процедуры из новых версий БСП
///////////////////////////////////////////////////////////////////////////////////////////////////////

// Возвращает порцию регистраторов, по которым нужно переформировать движения.
//  Данные берутся из зарегистрированных в очереди, учитываются заблокированные более приоритетными очередями данные.
//  Блокировка по другим очередям делается по документу и по регистру.
//  Регистраторы в выборке упорядочены по дате регистратора по убыванию, если передано полное имя документа.
//  Если полное имя документа не передано - упорядочивание происходит по периоду регистра:
//				- берется максимальная дата по каждому регистратору
//				- если по регистратору нет записей - он в топе.
// Параметры:
//  Очередь					 - Число - очередь, к которой отнесен обработчик и в которой зарегистрированы данные, которые он будет обрабатывать.
//  ПолноеИмяДокумента		 - Строка - имя документа, движения по которому нужно переформировать. Если движения формируются не по данным
//									документа, то нужно передать Неопределено - тогда не будет проверяться блокировка таблицы документа.
//									Например, Документ.ПриходныйОрдерНаТовары
//  ПолноеИмяРегистра		 - Строка	 - имя регистра, движения по которому нужно переформировать.
//  	Например, РегистрНакопления.ТоварыНаСкладах
//  ДополнительныеПараметры	 - Структура - см. ОбновлениеИнформационнойБазы.ДополнительныеПараметрыВыборкиДанныхДляОбработки.
// 
// Возвращаемое значение:
//  ВыборкаИзРезультатаЗапроса - выборка регистраторов, которые нужно обработать, поля выборки:
//  * Регистратор - ДокументСсылка.
//  * Период - Дата - дата документа, если передано полное имя документа, максимальный период по регистратору,
//						если полное имя документа не передано.
//  * Проведен - Булево, Неопределено - значение реквизита Проведен документа, если передано полное имя документа,
//										Неопределено - если имя документа не передано.
//
Функция ВыбратьРегистраторыРегистраДляОбработки(Очередь, ПолноеИмяДокумента, ПолноеИмяРегистра, ДополнительныеПараметры = Неопределено) Экспорт
	Возврат Неопределено;
КонецФункции

// Возвращает порцию ссылок, по которым нужно произвести обработку.
//  Данные берутся из зарегистрированных в очереди, учитываются заблокированные более приоритетными очередями данные.
//	Ссылки на документы возвращаются упорядоченными по убыванию по дате.
//
// Параметры:
//  Очередь				 - Число - очередь, к которой отнесен обработчик и в которой зарегистрированы данные, которые он будет
//									обрабатывать.
//  ПолноеИмяОбъекта	 - Строка	 - имя объекта, который нужно обработать. Например, Документ.ПриходныйОрдерНаТовары.
//  ДополнительныеПараметры	 - Структура - см. ОбновлениеИнформационнойБазы.ДополнительныеПараметрыВыборкиДанныхДляОбработки.
// 
// Возвращаемое значение:
//  ВыборкаИзРезультатаЗапроса - выборка ссылок, которые нужно обработать, поля выборки:
//  * Ссылка - ЛюбаяСсылка.
//
Функция ВыбратьСсылкиДляОбработки(Очередь, ПолноеИмяОбъекта, ДополнительныеПараметры = Неопределено) Экспорт
	Возврат Неопределено;
КонецФункции


// Записывает изменения в переданном объекте ссылочного типа.
// Для использования в обработчиках обновления.
//
// Параметры:
//   Объект                            - Произвольный - записываемый объект ссылочного типа. Например, СправочникОбъект.
//   РегистрироватьНаУзлахПлановОбмена - Булево       - включает регистрацию на узлах планов обмена при записи объекта.
//   ВключитьБизнесЛогику              - Булево       - включает бизнес-логику при записи объекта.
//   ДокументРежимЗаписи              - ДокументРежимЗаписи - имеет смысл только для данных типа ДокументОбъект - режим
//                                                            записи документа.
//											Если параметр не передан, то документ записывается в режиме "Запись".
//
Процедура ЗаписатьОбъект(Знач Объект, Знач РегистрироватьНаУзлахПлановОбмена = Неопределено, 
	Знач ВключитьБизнесЛогику = Ложь, ДокументРежимЗаписи = Неопределено) Экспорт
	
	Объект.ДополнительныеСвойства.Вставить("РегистрироватьНаУзлахПлановОбменаПриОбновленииИБ", РегистрироватьНаУзлахПлановОбмена);
	Объект.ОбменДанными.Загрузка = Не ВключитьБизнесЛогику;
	
	Если РегистрироватьНаУзлахПлановОбмена = Неопределено
		Или Не РегистрироватьНаУзлахПлановОбмена
		И Не Объект.ЭтоНовый() Тогда
		Объект.ОбменДанными.Получатели.АвтоЗаполнение = Ложь;
	КонецЕсли;
	
	Если ДокументРежимЗаписи <> Неопределено Тогда
		Если ТипЗнч(ДокументРежимЗаписи) <> Тип("РежимЗаписиДокумента") Тогда
			ТекстИсключения = НСтр("ru = 'Неправильный тип параметра ДокументРежимЗаписи'");
			ВызватьИсключение ТекстИсключения;
		КонецЕсли;
		Объект.ОбменДанными.Загрузка = Объект.ОбменДанными.Загрузка
			И Не ДокументРежимЗаписи = РежимЗаписиДокумента.Проведение
			И Не ДокументРежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения;
		Объект.Записать(ДокументРежимЗаписи);
	Иначе
		Объект.Записать();
	КонецЕсли;
	
	ОтметитьВыполнениеОбработки(Объект);
	
КонецПроцедуры

// Записывает изменения в переданном наборе записей.
// Для использования в обработчиках обновления.
//
// Параметры:
//   НаборЗаписей                      - РегистрСведенийНаборЗаписей,
//                                       РегистрНакопленияНаборЗаписей,
//                                       РегистрБухгалтерииНаборЗаписей,
//                                       РегистрРасчетаНаборЗаписей - набор записей, который необходимо записать.
//   Замещать                          - Булево       - Определяет режим замещения существующей записи в соответствии с
//       текущими установками отбора. Истина - перед записью существующие записи будут удалены. Ложь - записи будут
//       дописаны к уже существующим в информационной базе записям.
//   РегистрироватьНаУзлахПлановОбмена - Булево       - включает регистрацию на узлах планов обмена при записи объекта.
//   ВключитьБизнесЛогику              - Булево       - включает бизнес-логику при записи объекта.
//
Процедура ЗаписатьНаборЗаписей(Знач НаборЗаписей, Замещать = Истина, Знач РегистрироватьНаУзлахПлановОбмена = Неопределено,
	Знач ВключитьБизнесЛогику = Ложь) Экспорт
	
	НаборЗаписей.ДополнительныеСвойства.Вставить("РегистрироватьНаУзлахПлановОбменаПриОбновленииИБ", РегистрироватьНаУзлахПлановОбмена);
	НаборЗаписей.ОбменДанными.Загрузка = Не ВключитьБизнесЛогику;
	
	Если РегистрироватьНаУзлахПлановОбмена = Неопределено 
		Или Не РегистрироватьНаУзлахПлановОбмена Тогда
		НаборЗаписей.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов");
		НаборЗаписей.ОбменДанными.Получатели.АвтоЗаполнение = Ложь;
	КонецЕсли;
	
	НаборЗаписей.Записать(Замещать);
	
	ОтметитьВыполнениеОбработки(НаборЗаписей);
	
КонецПроцедуры

// Удаляет переданный объект.
// Для использования в обработчиках обновления.
//
// Параметры:
//  Данные                            - Произвольный - объект, который необходимо удалить.
//  РегистрироватьНаУзлахПлановОбмена - Булево       - включает регистрацию на узлах планов обмена при записи объекта.
//  ВключитьБизнесЛогику              - Булево       - включает бизнес-логику при записи объекта.
//
Процедура УдалитьДанные(Знач Данные, Знач РегистрироватьНаУзлахПлановОбмена = Неопределено, 
	Знач ВключитьБизнесЛогику = Ложь) Экспорт
	
	Данные.ДополнительныеСвойства.Вставить("РегистрироватьНаУзлахПлановОбменаПриОбновленииИБ", РегистрироватьНаУзлахПлановОбмена);
	
	Данные.ОбменДанными.Загрузка = Не ВключитьБизнесЛогику;
	Если РегистрироватьНаУзлахПлановОбмена = Неопределено 
		Или Не РегистрироватьНаУзлахПлановОбмена Тогда
		Данные.ОбменДанными.Получатели.АвтоЗаполнение = Ложь;
	КонецЕсли;
	
	Данные.Удалить();
	
КонецПроцедуры

// Возвращает пустую таблицу приоритетов выполнения между отложенными обработчиками,
// изменяющими или читающими одни и те же данные. Для использования в описании обработчиков обновления.
//
// Возвращаемое значение:
//  ТаблицаЗначений - с колонками:
//    * Порядок       - Строка - порядок выполнения текущего обработчика относительно других.
//                               Допустимые варианты - "До", "После", "Любой".
//    * Идентификатор - УникальныйИдентификатор - идентификатор процедуры, с которой настраивается взаимосвязь.
//    * Процедура     - Строка - полное имя процедуры, с которой настраивается взаимосвязь.
//
// Пример:
//  Приоритет = ПриоритетыВыполненияОбработчика().Добавить();
//  Приоритет.Порядок = "До";
//  Приоритет.Процедура = "Документ.ЗаказПокупателя.ОбновитьДанныеДляПереходаНаНовуюВерсию";
//
Функция ПриоритетыВыполненияОбработчика() Экспорт
	
	Приоритеты = Новый ТаблицаЗначений;
	Приоритеты.Колонки.Добавить("Порядок", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(0)));
	Приоритеты.Колонки.Добавить("Идентификатор");
	Приоритеты.Колонки.Добавить("Процедура", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(0)));
	
	Возврат Приоритеты;
	
КонецФункции

// Отмечает, что переданные данные обновлены.
//
// Параметры:
//  Данные					 - Ссылка, Массив, НаборДанных - данные, по которым нужно зарегистрировать изменения.
//							 - ТаблицаЗначений - значения измерений независимого регистра сведений. Требования:
//													- все измерения регистра должны входить в основной отбор
//													- в таблице должны быть только колонки, соответствующие по именам измерениям регистра,
//														по которым ранее регистрировалась необходимость обработки
//													- запись наборов в процессе обновления должна проходить с тем же отбором,
//														что и регистрация необходимости обработки
//													- в ДополнительныеПараметры нужно передать соответствующий признак и полное имя регистра.
//  ДополнительныеПараметры	 - Структура - см. ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки.
//  Очередь					 - Число, Неопределено - очередь обработки, в которой выполняется текущий обработчик. По умолчанию очередь передавать
//													не нужно, т.к. она будет взята из параметров сеанса, в котором запущен обработчик обновления.
//
Процедура ОтметитьВыполнениеОбработки(Данные, ДополнительныеПараметры = Неопределено, Очередь = Неопределено) Экспорт
	//Заголовок без реализации
КонецПроцедуры

// Дополнительные параметры выборки данных для обработки.
// 
// Возвращаемое значение:
//  Структура - поля структуры:
//     * ВыбиратьПорциями - Булево - выбирать данные для обработки порциями.
//                              Если выбираются документы, то в порция определяется с учетом упорядочивания по убыванию
//                              по дате документа. Если выбираются регистраторы регистра, то в порция определяется с
//                              учетом упорядочивания по убыванию по дате регистратора , если передано полное имя
//                              документа. Если полное имя документа не передано - упорядочивание происходит по периоду регистра:
//                                      - берется максимальная дата по каждому регистратору
//                                      - если по регистратору нет записей - он в топе.
//     * ИмяВременнойТаблицы - Строка - параметр актуален для методов, создающих временные таблицы. Если имя не задано
//                                      (поведение по умолчанию), то временная таблица будет создана с именем, указанным
//                                      в описании каждого метода.
//     * ДополнительныеИсточникиДанных - Соответствие - параметр актуален для методов, выбирающих регистраторы и ссылки
//                                                      для обработки. В ключах соответствия лежат пути к реквизитам
//                                                      шапки документа или реквизитам табличных частей,
//                                                      которые участвуют в соединениях с другими таблицами (в т.ч.
//                                                      неявных соединениях при обращении "через точку"). Процедуры
//                                                      проверяют блокировку данных этих таблиц обработчиками меньших
//                                                      очередей. Формат имен <ИмяРеквизита> или <ИмяТабличной>.<ИмяРеквизитаТабличнойЧасти>.
//     * ПоляУпорядочивания  - Массив - имена полей независимого регистра сведений, используется для упорядочивания
//                                      результата запроса.
//
Функция ДополнительныеПараметрыВыборкиДанныхДляОбработки() Экспорт
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ВыбиратьПорциями", Истина);
	ДополнительныеПараметры.Вставить("ИмяВременнойТаблицы", "");
	ДополнительныеПараметры.Вставить("ДополнительныеИсточникиДанных", Новый Соответствие);
	ДополнительныеПараметры.Вставить("ПоляУпорядочивания", Новый Массив);
	
	Возврат ДополнительныеПараметры;
	
КонецФункции

// Создает временную таблицу заблокированных данных.
// Имя таблицы: ВТЗаблокированы<ИмяОбъекта>, например ВТЗаблокированоНоменклатура.
//  Колонки таблицы
//      для объектов ссылочного типа:
//          * Ссылка
//      для регистров, подчиненных регистратору
//          * Регистратор
//      для регистров с непосредственной записью
//          * колонки, соответствующие измерениям регистра.
//
// Параметры:
//  Очередь                 - Число, Неопределено - очередь обработки, в которой выполняется текущий обработчик.
//                             Если передано Неопределенно, то проверяется во всех очередях.
//  ПолноеИмяОбъекта        - Строка - полное имя объекта, для которого выполняется проверка,
//                             например, Справочник.Номенклатура.
//  МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - менеджер, в котором будет создана временная таблица.
//  ДополнительныеПараметры - Структура - см. ОбновлениеИнформационнойБазы.ДополнительныеПараметрыВыборкиДанныхДляОбработки,
//                             параметр ВыбиратьПорциями игнорируется, заблокированные данные всегда помещаются в
//                             таблицу целиком.
//
// Возвращаемое значение:
//  Структура - структура со свойствами:
//     * ЕстьЗаписиВоВременнойТаблице - Булево - в создаваемой таблице есть хотя бы одна запись.
//     * ИмяВременнойТаблицы          - Строка - имя созданной временной таблицы.
//
Функция СоздатьВременнуюТаблицуЗаблокированныхДляЧтенияИИзмененияДанных(Очередь, ПолноеИмяОбъекта, МенеджерВременныхТаблиц, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ДополнительныеПараметры = Неопределено Тогда
		ДополнительныеПараметры = ДополнительныеПараметрыВыборкиДанныхДляОбработки();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	МетаданныеОбъекта = Метаданные.НайтиПоПолномуИмени(ПолноеИмяОбъекта);
	
	Если ОбщегоНазначения.ЭтоОбъектСсылочногоТипа(МетаданныеОбъекта) Тогда
			ТекстЗапроса =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	&ПустоеЗначение КАК Ссылка
			|ПОМЕСТИТЬ #ИмяВременнойТаблицы
			|ГДЕ
			|	ЛОЖЬ";
			                                           
			Запрос.УстановитьПараметр("ПустоеЗначение", МетаданныеОбъекта.СтандартныеРеквизиты.Ссылка.Тип.ПривестиЗначение()); 
	ИначеЕсли ОбщегоНазначения.ЭтоРегистрСведений(МетаданныеОбъекта)
		И МетаданныеОбъекта.РежимЗаписи = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.Независимый Тогда
			ТекстЗапроса =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	&ТекстВыборкиИзмерений
			|ПОМЕСТИТЬ #ИмяВременнойТаблицы
			|ГДЕ
			|	ЛОЖЬ";
			ТекстВыборкиИзмерений = "";
			Для Каждого Измерение Из МетаданныеОбъекта.Измерения Цикл
				Если Не Измерение.ОсновнойОтбор Тогда
					Продолжить;
				КонецЕсли;
				
				ТекстВыборкиИзмерений = ТекстВыборкиИзмерений + "
				|	&ПустоеЗначениеИзмерения"+ Измерение.Имя + " КАК " + Измерение.Имя + ",";
				Запрос.УстановитьПараметр("ПустоеЗначениеИзмерения"+ Измерение.Имя, Измерение.Тип.ПривестиЗначение()); 
			КонецЦикла;
		
		ПризнакНепериодический = Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический;
		Если МетаданныеОбъекта.ПериодичностьРегистраСведений <> ПризнакНепериодический
			И МетаданныеОбъекта.ОсновнойОтборПоПериоду Тогда
			ТекстВыборкиИзмерений = ТекстВыборкиИзмерений + "
				|	ТаблицаИзменений.Период КАК Период,";
		КонецЕсли;
		
		Если ПустаяСтрока(ТекстВыборкиИзмерений) Тогда
			ТекстВыборкиИзмерений = "*";
		Иначе
			ТекстВыборкиИзмерений = Лев(ТекстВыборкиИзмерений, СтрДлина(ТекстВыборкиИзмерений) - 1);
		КонецЕсли;
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстВыборкиИзмерений", ТекстВыборкиИзмерений);
		
	ИначеЕсли ОбщегоНазначения.ЭтоРегистр(МетаданныеОбъекта) Тогда
		
			ТекстЗапроса =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	&ПустоеЗначение КАК Регистратор
			|ПОМЕСТИТЬ #ИмяВременнойТаблицы
			|ГДЕ
			|	ЛОЖЬ";
			
			Запрос.УстановитьПараметр("ПустоеЗначение", МетаданныеОбъекта.СтандартныеРеквизиты.Регистратор.Тип.ПривестиЗначение()); 
			
	Иначе
		ТекстИсключения = НСтр("ru = 'Для этого типа метаданных не поддерживается проверка в функции ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуЗаблокированныхДляЧтенияИИзмененияДанных.'");
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	ИмяОбъекта = СтрРазделить(ПолноеИмяОбъекта, ".")[1];
	
	Если ПустаяСтрока(ДополнительныеПараметры.ИмяВременнойТаблицы) Тогда
		ИмяВременнойТаблицы =  "ВТЗаблокировано"+ИмяОбъекта;
	Иначе
		ИмяВременнойТаблицы = ДополнительныеПараметры.ИмяВременнойТаблицы;
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ИмяВременнойТаблицы", ИмяВременнойТаблицы);
	
	Запрос.Текст = ТекстЗапроса;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Результат = Новый Структура("ЕстьЗаписиВоВременнойТаблице,ИмяВременнойТаблицы", Ложь, "");
	Результат.ИмяВременнойТаблицы = ИмяВременнойТаблицы;
	Результат.ЕстьЗаписиВоВременнойТаблице = РезультатЗапроса.Выгрузить()[0].Количество <> 0;
			
	Возврат Результат;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции для проверки доступности объекта при выполнении отложенного обновления (Отложенное обновление не используется).
// Заголовки с поведением по умолчанию

// Вызывает исключение или блокирует форму от редактирования, если
// имеются незавершенные отложенные обработчики обновления,
// которые в данный момент обрабатывают переданный объект Данные.
//
// При вызове из отложенного обработчика обновления (случай проверки в программном интерфейсе)
// проверка не выполняется, если не указан параметр ИмяОтложенногоОбработчика, так как
// предполагается, что порядок обновления уже учтен при построении очередей.
//
// Параметры:
//  Данные - ЛюбаяСсылка, НаборЗаписей, Объект, ДанныеФормыСтруктура, Строка - ссылка на объект, сам объект,
//           набор записей или полное имя объекта метаданных, обработку которого необходимо проверить.
//  Форма  - УправляемаяФорма - если объект не обработан, то у переданной формы
//           будет установлено свойство ТолькоПросмотр. Если форма не была
//           передана, то будет вызвано исключение.
//
//  ИмяОтложенногоОбработчика - Строка - если заполнено, тогда при вызове из другого отложенного обработчика
//           проверяется, что указанный отложенный обработчик имеет номер очереди меньше, чем текущий.
//           Если это не так, тогда вызывается исключение о недопустимости использования
//           программного интерфейса указанного в параметре ИмяПроцедурыПрограммногоИнтерфейса.
//
//  ИмяПроцедурыПрограммногоИнтерфейса - Строка - имя процедуры программного интерфейса,
//           которое выводится в тексте исключения, вызываемого при проверке номера очереди
//           отложенного обработчика обновления, указанного в параметре ИмяОтложенногоОбработчика.
//
//  Пример:
//   Блокировка формы объекта в обработчике ПриСозданииНаСервере модуля формы:
//   ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
//
//   Блокировка записи объекта в обработчике ПередЗаписью модуля объекта (набора записей):
//   ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(ЭтотОбъект);
//
//   Проверить, что обновлен конкретный объект и вызвать исключение о недопустимости вызова
//   процедуры ЭлектроннаяПодпись.ОбновитьПодпись, если он еще не обработан указанным обработчиком
//   Справочник.ЭлектронныеПодписи.ОбработатьДанныеДляПереходаНаНовуюВерсию:
//
//   ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(ПодписанныйОбъект,,
//      "Справочник.ЭлектронныеПодписи.ОбработатьДанныеДляПереходаНаНовуюВерсию",
//      "ЭлектроннаяПодпись.ОбновитьПодпись");
//
//   Проверить, что обновлены все объекты требуемого типа:
//   ВсеЗаказыОбработаны = ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан("Документ.ЗаказПокупателя"); 
//
Процедура ПроверитьОбъектОбработан(Данные, Форма = Неопределено, ИмяОтложенногоОбработчика = "", ИмяПроцедурыПрограммногоИнтерфейса = "") Экспорт
	
	Возврат;
	
КонецПроцедуры

// Проверяет, имеются ли отложенные обработчики обновления,
// которые в данный момент обрабатывают переданный объект Данные.
//
// Параметры:
//  Данные - ЛюбаяСсылка, НаборЗаписей, Объект, ДанныеФормыСтруктура, Строка - ссылка на объект, сам объект, 
//           набор записей или полное имя объекта метаданных, блокировку которого необходимо проверить.
//
// Возвращаемое значение:
//   Структура - с полями:
//     * Обработан       - Булево - признак того, что переданный объект обработан.
//     * ТекстИсключения - Строка - текст исключения, если объект еще не обработан,
//                         содержит список незавершенных обработчиков.
//
// Пример:
//   Проверить, что обновлены все объекты требуемого типа:
//   ВсеЗаказыОбработаны = ОбновлениеИнформационнойБазы.ОбъектОбработан("Документ.ЗаказПокупателя"); 
//
Функция ОбъектОбработан(Данные) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Обработан", Истина);
	Результат.Вставить("ТекстИсключения", "");
	Результат.Вставить("НевыполненныеОбработчикиСтрокой", "");
	
	Возврат Результат;
	
КонецФункции

// Отмечает, что переданные данные необходимо обновить.
// Важно: не рекомендуется передавать в параметр Данные сразу все данные, которые
// необходимо зарегистрировать к обработке, т.к. большие коллекции типа Массив
// или ТаблицаЗначений могут занять существенный объем памяти сервера и привести
// к сильному снижению производительности системы. Рекомендуется получать и передавать
// данные небольшими порциями, например, по 1000 объектов.
//
// Параметры:
//  ОсновныеПараметры - Структура - см. ОбновлениеИнформационнойБазы.ОсновныеПараметрыОтметкиКОбработке.
//  Данные            - Ссылка, Массив, НаборЗаписей - данные, по которым нужно зарегистрировать изменения.
//                    - ТаблицаЗначений - значения измерений независимого регистра сведений. Требования:
//                        - нет измерений с именем "Узел".
//                        - все измерения регистра должны входить в основной отбор
//                        - в таблице должны быть только колонки, соответствующие по именам измерениям регистра,
//                          по которым нужно регистрировать необходимость обработки
//                        - запись наборов в процессе обновления должна проходить с тем же отбором,
//                          что и регистрация необходимости обработки
//                        - в ДополнительныеПараметры нужно передать соответствующий признак и полное имя регистра.
//  ДополнительныеПараметры - Структура - см. ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки.
// 
Процедура ОтметитьКОбработке(ОсновныеПараметры, Данные, ДополнительныеПараметры = Неопределено) Экспорт
КонецПроцедуры

// Проверяет, есть ли еще необработанные данные.
//
// Параметры:
//  Очередь    - Число        - очередь, к которой отнесен обработчик и в которой зарегистрированы данные,
//                              которые он будет обрабатывать.
//             - Неопределено - проверяется, завершена ли обработка в целом;
//             - Массив       - проверяется есть данные для обработки в списке очередей.
//  ПолноеИмяМетаданныеОбъекта- Строка, ОбъектМетаданных - полное имя обрабатываемого объекта или 
//                              его метаданные. Например, "Документ.ПриходныйОрдерНаТовары"
//                            - Массив - массив полных имен объектов или объектов метаданных,
//                              в массиве не должно быть независимых регистров сведений.
//  Отбор - ЛюбаяСсылка, Структура, Неопределено, Массив - отбор данных для проверки.
//                              Если передано Неопределено - проверяется по всему типу объекта,
//                              Если объект - регистр, подчиненный регистратору, то в отборе - ссылка
//                                 на регистратор или массив ссылок.
//                              Если объект ссылочного типа, то в отборе - или ссылка, или массив ссылок.
//                              Если объект - независимый регистр сведений, то в отборе - структура со значениями измерений.
//                              Ключ структуры - имя измерения, значение - значение отбора (можно передать массив значений).
//
// Возвращаемое значение:
//  Булево - Истина, если еще не все данные обработаны.
//
Функция ЕстьДанныеДляОбработки(Очередь, ПолноеИмяМетаданныеОбъекта, Отбор = Неопределено) Экспорт
	Возврат Ложь; 
КонецФункции

Процедура УдалитьОтложенныйОбработчикИзОчереди(ИмяОбработчика) Экспорт
КонецПроцедуры
