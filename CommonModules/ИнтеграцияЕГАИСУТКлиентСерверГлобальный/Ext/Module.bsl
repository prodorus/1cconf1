/////////////////////////////////////////////////////////////////////////////////////////
//
//  Функции обратной совместимости для эмуляции новых возможностей платформы
//  Удалить лишние при необходимости
//
/////////////////////////////////////////////////////////////////////////////////////////

Функция СтрНайти(Строка,
	ПодстрокаПоиска,
	НаправлениеПоиска = Неопределено,
	НачальнаяПозиция = 1,
	НомерВхождения = 1) Экспорт
	
	Если НаправлениеПоиска = "СКонца" Тогда
		ВызватьИсключение НСтр("ru = 'Требуется доработать функцию ""СтрНайти"" в общем модуле ""ИнтеграцияЕГАИСКлиентСерверГлобальный"":
								|Не поддерживается поиск с конца'");
	КонецЕсли;
	
	Если ПодстрокаПоиска = "" Тогда
		Возврат 1;
	КонецЕсли;
	
	Если НачальнаяПозиция > 1 Тогда
		Возврат НачальнаяПозиция - 1 + СтрНайти(Сред(Строка, НачальнаяПозиция), ПодстрокаПоиска, НаправлениеПоиска,,НомерВхождения);
	КонецЕсли;
	
	Если НомерВхождения > 1 Тогда
		Вхождение1 = Найти(Строка, ПодстрокаПоиска);
		Если Вхождение1 > 0 Тогда
			Возврат Вхождение1 + СтрНайти(Сред(Строка,Вхождение1 +1),ПодстрокаПоиска,НаправлениеПоиска,,НомерВхождения - 1);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Найти(Строка, ПодстрокаПоиска);
	
КонецФункции

Функция СтрНачинаетсяС(Строка, ПодстрокаПоиска) Экспорт
	
	Возврат (Найти(Строка, ПодстрокаПоиска)=1);
	
КонецФункции

Функция СтрСоединить(МассивСтрок, Разделитель = "") Экспорт
	
	Возврат СтроковыеФункцииКлиентСервер.ПолучитьСтрокуИзМассиваПодстрок(МассивСтрок, Разделитель);
	
КонецФункции

Функция СтрРазделить(Строка, Разделитель, ВключатьПустые = Ложь) Экспорт

	Возврат СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Строка, Разделитель, ВключатьПустые);

КонецФункции // СтрРазделить()

#Если ТонкийКлиентУправляемоеПриложение Тогда
Функция СтрШаблон(Знач СтрокаПодстановки,
	Параметр1, Параметр2 = Неопределено, Параметр3 = Неопределено,
	Параметр4 = Неопределено, Параметр5 = Неопределено, Параметр6 = Неопределено,
	Параметр7 = Неопределено, Параметр8 = Неопределено, Параметр9 = Неопределено) Экспорт
	
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаПодстановки,
		Параметр1, Параметр2, Параметр3, Параметр4, Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
	
КонецФункции
#КонецЕсли

Функция ФорматированнаяСтрока(Содержимое,
	Шрифт = Неопределено,
	ЦветТекста = Неопределено,
	ЦветФона = Неопределено, 
	Ссылка = Неопределено) Экспорт

	Описание = ИнтеграцияЕГАИСУТКлиентСервер.ОписаниеФорматированнойСтроки();
	Описание.Заголовок  = Содержимое;
	Описание.Шрифт      = Шрифт;
	Описание.ЦветТекста = ЦветТекста;
	Описание.ЦветФона   = ЦветФона;
	Описание.Ссылка     = Ссылка;
	
	Возврат Описание;

КонецФункции // ФорматированнаяСтрока()

// Возвращает хеш сжатой через Zip строки по алоритму указанному в параметре ХешФункция.
//
// Параметры
//  ХешФункция - Строка - Варианты типов хеш-функции, принимает значения SHA256 и SHA1.
//  Данные     - Строка - Текстовые данные в кодировке UTF8.
//
// Возвращаемое значение:
//  ДвоичныеДанные   - значение типа ДвоичныеДанные.
//
Функция ХешированиеДанныхЕГАИС(ХешФункция, Знач Данные) Экспорт
	
	#Если ТолстыйКлиентОбычноеПриложение Тогда
	СжатыйТекст = XMLСтрока(Новый ХранилищеЗначения(Данные, Новый СжатиеДанных(9)));
	
	Результат = "";
	Если ВРег(ХешФункция) = "SHA256" Или ВРег(ХешФункция) = "SHA1" Тогда
		Результат = SHA(СжатыйТекст, ХешФункция);
	КонецЕсли;
	
	Возврат Base64Значение(Результат);
	#Иначе
		Возврат Неопределено;
	#КонецЕсли
	
КонецФункции // ХешированиеДанных()

////////////////////////////////////////////////////////////////////////////////
// ХЕШИРОВАНИЕ SHA
//

Функция МассивКубическихКорней(ХешФункция)
	
	МассивКубическихКорней = Новый Массив;
	Если ВРег(ХешФункция) = "SHA1" Тогда
		МассивКубическихКорней.Добавить(1518500249);
		МассивКубическихКорней.Добавить(1859775393);
		МассивКубическихКорней.Добавить(2400959708);
		МассивКубическихКорней.Добавить(3395469782);
	Иначе
		МассивКубическихКорней.Добавить(1116352408);
		МассивКубическихКорней.Добавить(1899447441);
		МассивКубическихКорней.Добавить(3049323471);
		МассивКубическихКорней.Добавить(3921009573);
		МассивКубическихКорней.Добавить(961987163);
		МассивКубическихКорней.Добавить(1508970993);
		МассивКубическихКорней.Добавить(2453635748);
		МассивКубическихКорней.Добавить(2870763221);
		МассивКубическихКорней.Добавить(3624381080);
		МассивКубическихКорней.Добавить(310598401);
		МассивКубическихКорней.Добавить(607225278);
		МассивКубическихКорней.Добавить(1426881987);
		МассивКубическихКорней.Добавить(1925078388);
		МассивКубическихКорней.Добавить(2162078206);
		МассивКубическихКорней.Добавить(2614888103);
		МассивКубическихКорней.Добавить(3248222580);
		МассивКубическихКорней.Добавить(3835390401);
		МассивКубическихКорней.Добавить(4022224774);
		МассивКубическихКорней.Добавить(264347078);
		МассивКубическихКорней.Добавить(604807628);
		МассивКубическихКорней.Добавить(770255983);
		МассивКубическихКорней.Добавить(1249150122);
		МассивКубическихКорней.Добавить(1555081692);
		МассивКубическихКорней.Добавить(1996064986);
		МассивКубическихКорней.Добавить(2554220882);
		МассивКубическихКорней.Добавить(2821834349);
		МассивКубическихКорней.Добавить(2952996808);
		МассивКубическихКорней.Добавить(3210313671);
		МассивКубическихКорней.Добавить(3336571891);
		МассивКубическихКорней.Добавить(3584528711);
		МассивКубическихКорней.Добавить(113926993);
		МассивКубическихКорней.Добавить(338241895);
		МассивКубическихКорней.Добавить(666307205);
		МассивКубическихКорней.Добавить(773529912);
		МассивКубическихКорней.Добавить(1294757372);
		МассивКубическихКорней.Добавить(1396182291);
		МассивКубическихКорней.Добавить(1695183700);
		МассивКубическихКорней.Добавить(1986661051);
		МассивКубическихКорней.Добавить(2177026350);
		МассивКубическихКорней.Добавить(2456956037);
		МассивКубическихКорней.Добавить(2730485921);
		МассивКубическихКорней.Добавить(2820302411);
		МассивКубическихКорней.Добавить(3259730800);
		МассивКубическихКорней.Добавить(3345764771);
		МассивКубическихКорней.Добавить(3516065817);
		МассивКубическихКорней.Добавить(3600352804);
		МассивКубическихКорней.Добавить(4094571909);
		МассивКубическихКорней.Добавить(275423344);
		МассивКубическихКорней.Добавить(430227734);
		МассивКубическихКорней.Добавить(506948616);
		МассивКубическихКорней.Добавить(659060556);
		МассивКубическихКорней.Добавить(883997877);
		МассивКубическихКорней.Добавить(958139571);
		МассивКубическихКорней.Добавить(1322822218);
		МассивКубическихКорней.Добавить(1537002063);
		МассивКубическихКорней.Добавить(1747873779);
		МассивКубическихКорней.Добавить(1955562222);
		МассивКубическихКорней.Добавить(2024104815);
		МассивКубическихКорней.Добавить(2227730452);
		МассивКубическихКорней.Добавить(2361852424);
		МассивКубическихКорней.Добавить(2428436474);
		МассивКубическихКорней.Добавить(2756734187);
		МассивКубическихКорней.Добавить(3204031479);
		МассивКубическихКорней.Добавить(3329325298);
		
	КонецЕсли;
	
	Возврат МассивКубическихКорней;
	
КонецФункции // МассивКубическихКорней()

Функция МассивКвадратныхКорней(ХешФункция)
	
	МассивКвадратныхКорней = Новый Массив;
	Если ВРег(ХешФункция) = "SHA1" Тогда
		МассивКвадратныхКорней.Добавить(1732584193);
		МассивКвадратныхКорней.Добавить(4023233417);
		МассивКвадратныхКорней.Добавить(2562383102);
		МассивКвадратныхКорней.Добавить(271733878);
		МассивКвадратныхКорней.Добавить(3285377520);
	Иначе
		МассивКвадратныхКорней.Добавить(1779033703);
		МассивКвадратныхКорней.Добавить(3144134277);
		МассивКвадратныхКорней.Добавить(1013904242);
		МассивКвадратныхКорней.Добавить(2773480762);
		МассивКвадратныхКорней.Добавить(1359893119);
		МассивКвадратныхКорней.Добавить(2600822924);
		МассивКвадратныхКорней.Добавить(528734635);
		МассивКвадратныхКорней.Добавить(1541459225);
	КонецЕсли;
	
	Возврат МассивКвадратныхКорней;
	
КонецФункции // МассивКвадратныхКорней()

Функция SHA(Данные, ХешФункция)
	
	МассивБитовыхОпераций = МассивБитовыхОпераций256();
	// Таблица констант первые 32 бита дробных частей квадратных корней первых восьми простых чисел [от 2 до 19].
	КвадратныеКорни = МассивКвадратныхКорней(ХешФункция);
	
	// Таблица констант (первые 32 бита дробных частей кубических корней первых 64 простых чисел [от 2 до 311]).
	КубическиеКорни = МассивКубическихКорней(ХешФункция);
	
	Если ВРег(ХешФункция) = "SHA1" Тогда
		МассивСлов  = Новый Массив(80);
	Иначе
		МассивСлов  = Новый Массив(64);
	КонецЕсли;
	
	ДлинаДанных = 0;
	Временная   = 0;
	
	Для Счетчик = 1 По СтрДлина(Данные) Цикл
		
		КодСимвола = КодСимвола(Данные, Счетчик);
		
		КоличествоБит = 0;
		Если КодСимвола < 128 Тогда
			ТекущийКодСимвола = КодСимвола;
		Иначе
			// Отдельная обработка для символов с кодом больше 127.
			КоличествоБит = Цел((Log(КодСимвола)/Log(2)-6)/5)+1;
			
			СтаршиеБиты = 128;
			Для СчетчикБит = 1 По КоличествоБит Цикл
				СтаршиеБиты = СтаршиеБиты + Pow(2, 7 - СчетчикБит);
			КонецЦикла;
			
			Степень = Pow(64, КоличествоБит);
			
			ТекущийКодСимвола = Цел(КодСимвола/Степень) + СтаршиеБиты;
			КодСимвола =КодСимвола%Степень;
		КонецЕсли;
		
		Для СчетчикБит = 0 По КоличествоБит Цикл
			
			Временная = Временная + Pow(256, 3 - ДлинаДанных%4)*ТекущийКодСимвола;
			ДлинаДанных = ДлинаДанных + 1;
			
			Если ДлинаДанных%4 = 0 Тогда
				
				// Длина сообщения кратна 4 - записываем временное слово.
				МассивСлов[Цел((ДлинаДанных-1)%64/4)] = Временная;
				Временная = 0;
				Если ДлинаДанных%64 = 0 Тогда
					
					// Длина сообщения достигла 512 бит - выполняем раунд
					Если ВРег(ХешФункция) = "SHA1" Тогда
						РаундSHA1(МассивСлов, КвадратныеКорни, КубическиеКорни, МассивБитовыхОпераций);
					Иначе
						РаундSHA256(МассивСлов, КвадратныеКорни, КубическиеКорни, МассивБитовыхОпераций);
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
			
			Если СчетчикБит = КоличествоБит Тогда
				Прервать;
			КонецЕсли;
			
			Степень = Pow(64, КоличествоБит - СчетчикБит - 1);
			ТекущийКодСимвола = Цел(КодСимвола/Степень) + 128;
			КодСимвола = КодСимвола%Степень;
		КонецЦикла;
		
	КонецЦикла;
	
	// Добавление бита 1 к полученному сообщению и дополнение сообщения нулевыми битами до длины 448 бит.
	Временная = Временная + Pow(256, 3 - ДлинаДанных%4)*128;
	МассивСлов[Цел(ДлинаДанных%64 / 4)] = Временная;
	Для Счетчик = Цел(ДлинаДанных%64 / 4)+1 По 15 Цикл
		МассивСлов[Счетчик] = 0;
	КонецЦикла;
	
	Если ДлинаДанных%64 > 55 Тогда
		
		// Если не осталось места на запись длины сообщения, то выполняем раунд заново с обновление массива слов.
		Если ВРег(ХешФункция) = "SHA1" Тогда
			РаундSHA1(МассивСлов, КвадратныеКорни, КубическиеКорни,МассивБитовыхОпераций);
		Иначе
			РаундSHA256(МассивСлов, КвадратныеКорни, КубическиеКорни,МассивБитовыхОпераций);
		КонецЕсли;
		
		Для Счетчик = 0 По 14 Цикл
			МассивСлов[Счетчик] = 0;
		КонецЦикла;
		
	КонецЕсли;
	
	// В последних 64 битах хранится длина сообщения.
	МассивСлов[14] = Цел(ДлинаДанных * 8 / Pow(2,32));
	МассивСлов[15] = ДлинаДанных * 8%Pow(2,32);
	
	Если ВРег(ХешФункция) = "SHA1" Тогда
		РаундSHA1(МассивСлов, КвадратныеКорни, КубическиеКорни,МассивБитовыхОпераций);
	Иначе
		РаундSHA256(МассивСлов, КвадратныеКорни, КубическиеКорни,МассивБитовыхОпераций);
	КонецЕсли;
	
	Хекс="0123456789ABCDEF";
	
	Если ВРег(ХешФункция) = "SHA1" Тогда
		РазмерКвадратныхКорней = 5;
	Иначе
		РазмерКвадратныхКорней = 8;
	КонецЕсли;
	
	Временная = Новый Массив(РазмерКвадратныхКорней);
	
	Для Счетчик = 0 По РазмерКвадратныхКорней - 1 Цикл 
		Временная[Счетчик] = "";
	КонецЦикла;
	
	Для СчетчикБит = 1 По 8 Цикл 
		Для СчетчикКорней = 0 По РазмерКвадратныхКорней - 1 Цикл
			Временная[СчетчикКорней]=Сред(Хекс, КвадратныеКорни[СчетчикКорней]%16+1, 1) + Временная[СчетчикКорней];
			КвадратныеКорни[СчетчикКорней] = Цел(КвадратныеКорни[СчетчикКорней]/16);
		КонецЦикла;
	КонецЦикла;
	
	Результат = "";
	Для Счетчик = 0 По РазмерКвадратныхКорней - 1 Цикл
		Результат = Результат + Временная[Счетчик];
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции // SHA()

////////////////////////////////////////////////////////////////////////////////
// ХЕШИРОВАНИЕ SHA256

Процедура РаундSHA256(МассивСлов, КвадратныеКорни, КубическиеКорни, М)
	
	// Генерация дополнительных 48 слов.
	Для Счетчик = 16 По 63 Цикл
		с0 = БитовыйXOR(БитовыйXOR(БитовыйROTR(МассивСлов[Счетчик-15], 7, М), БитовыйROTR(МассивСлов[Счетчик-15], 18, М),М), БитовыйSHR(МассивСлов[Счетчик-15], 3),М);
		с1 = БитовыйXOR(БитовыйXOR(БитовыйROTR(МассивСлов[Счетчик-2], 17, М), БитовыйROTR(МассивСлов[Счетчик-2], 19, М),М), БитовыйSHR(МассивСлов[Счетчик-2], 10),М);
		МассивСлов[Счетчик] = (МассивСлов[Счетчик-16] + с0 + МассивСлов[Счетчик-7] + с1)%Pow(2, 32);
	КонецЦикла;
	
	// Инициализация вспомогательных переменных.
	a = КвадратныеКорни[0];
	b = КвадратныеКорни[1];
	c = КвадратныеКорни[2];
	d = КвадратныеКорни[3];
	e = КвадратныеКорни[4];
	f = КвадратныеКорни[5];
	g = КвадратныеКорни[6];
	h = КвадратныеКорни[7];
	
	// Основной цикл.
	Для Счетчик = 0 По 63 Цикл
		Σ0 = БитовыйXOR(БитовыйXOR(БитовыйROTR(a, 2, М), БитовыйROTR(a, 13, М), М), БитовыйROTR(a, 22, М), М);
		Ma = БитовыйXOR(БитовыйXOR(БитовыйAND(a, b, М), БитовыйAND(a, c, М),М), БитовыйAND(b, c, М), М);
		t2 = (Σ0 + Ma)%Pow(2,32);
		Σ1 = БитовыйXOR(БитовыйXOR(БитовыйROTR(e, 6, М), БитовыйROTR(e, 11, М), М), БитовыйROTR(e, 25, М), М);
		Ch = БитовыйXOR(БитовыйAND(e, f, М), БитовыйAND(БитовыйNot(e), g, М), М);
		t1 = (h + Σ1 + Ch + КубическиеКорни[Счетчик] + МассивСлов[Счетчик])%Pow(2,32);
		
		h = g;
		g = f;
		f = e;
		e = (d + t1)%Pow(2, 32);
		d = c;
		c = b;
		b = a;
		a = (t1 + t2)%Pow(2, 32);
	КонецЦикла;
	
	// Добавление полученных значения к ранее вычисленному результату.
	КвадратныеКорни[0] = (КвадратныеКорни[0] + a)%Pow(2,32);
	КвадратныеКорни[1] = (КвадратныеКорни[1] + b)%Pow(2,32);
	КвадратныеКорни[2] = (КвадратныеКорни[2] + c)%Pow(2,32);
	КвадратныеКорни[3] = (КвадратныеКорни[3] + d)%Pow(2,32);
	КвадратныеКорни[4] = (КвадратныеКорни[4] + e)%Pow(2,32);
	КвадратныеКорни[5] = (КвадратныеКорни[5] + f)%Pow(2,32);
	КвадратныеКорни[6] = (КвадратныеКорни[6] + g)%Pow(2,32);
	КвадратныеКорни[7] = (КвадратныеКорни[7] + h)%Pow(2,32);
	
КонецПроцедуры // РаундSHA256()

////////////////////////////////////////////////////////////////////////////////
// ХЕШИРОВАНИЕ SHA1

Функция НелинейнаяОперация1(Знач Параметр1, Знач Параметр2, Знач Параметр3)
	
	Временная = 0;
	Для Счетчик = 1 По 32 Цикл 
		
		Степень = Pow(2, 32-Счетчик);
		Временная = Временная +
			Степень*?((Параметр1 >= Степень) <> ((Параметр2 >= Степень) И ((Параметр3 >= Степень) <> (Параметр1 >= Степень))), 1, 0);
		Параметр1 = ?(Параметр1 < Степень, Параметр1, Параметр1 - Степень);
		Параметр2 = ?(Параметр2 < Степень, Параметр2, Параметр2 - Степень);
		Параметр3 = ?(Параметр3 < Степень, Параметр3, Параметр3-Степень);
		
	КонецЦикла;
	
	Возврат Временная;
	
КонецФункции // НелинейнаяОперация1()

Функция НелинейнаяОперация2(Знач Параметр1, Знач Параметр2, Знач Параметр3)
	
	Временная = 0;
	Для Счетчик = 1 По 32 Цикл
		
		Степень = Pow(2, 32-Счетчик);
		Временная = Временная +
			Степень*?((Параметр1 < Степень) = (Параметр2 < Степень) = (Параметр3 < Степень), 0, 1);
		Параметр1 = ?(Параметр1 < Степень, Параметр1, Параметр1 - Степень);
		Параметр2 = ?(Параметр2 < Степень, Параметр2, Параметр2 - Степень);
		Параметр3 = ?(Параметр3 < Степень, Параметр3, Параметр3 - Степень);
		
	КонецЦикла;
	
	Возврат Временная;
	
КонецФункции // НелинейнаяОперация2()

Функция НелинейнаяОперация3(Знач Параметр1,Знач Параметр2,Знач Параметр3)
	
	Временная=0;
	Для Счетчик=1 По 32 Цикл
		
		Степень = Pow(2, 32-Счетчик);
		Временная = Временная + Степень*
			?(((Параметр1 >= Степень) И (Параметр2 >= Степень)) 
				Или ((Параметр3 >= Степень) И ((Параметр1 >= Степень) Или (Параметр2 >= Степень))),
			1,
			0);
		Параметр1 = ?(Параметр1 < Степень, Параметр1, Параметр1 - Степень);
		Параметр2 = ?(Параметр2 < Степень, Параметр2, Параметр2 - Степень);
		Параметр3 = ?(Параметр3 < Степень, Параметр3, Параметр3 - Степень);
		
	КонецЦикла;
	
	Возврат Временная;
	
КонецФункции // НелинейнаяОперация3()

Процедура РаундSHA1(МассивСлов, КвадратныеКорни, КубическиеКорни, МассивБитовыхОпераций)
	
	// Генерация дополнительных 48 слов.
	Для Счетчик = 16 По 79 Цикл
		МассивСлов[Счетчик] = БитовыйLR(БитовыйXOR(БитовыйXOR(БитовыйXOR(МассивСлов[Счетчик-3], МассивСлов[Счетчик-8],МассивБитовыхОпераций), МассивСлов[Счетчик-14],МассивБитовыхОпераций), МассивСлов[Счетчик-16],МассивБитовыхОпераций), 1);
	КонецЦикла;
	
	// Инициализация вспомогательных переменных.
	a = КвадратныеКорни[0];
	b = КвадратныеКорни[1];
	c = КвадратныеКорни[2];
	d = КвадратныеКорни[3];
	e = КвадратныеКорни[4];
	
	// Основной цикл.
	Для Счетчик = 0 По 79 Цикл
		T=(БитовыйLR(a, 5)+?(Счетчик<20,НелинейнаяОперация1(D,B,C),?(Счетчик>39 И Счетчик<60,НелинейнаяОперация3(B,C,D),НелинейнаяОперация2(B,C,D)))+E+КубическиеКорни[Цел(Счетчик/20)]+МассивСлов[Счетчик])%Pow(2,32);
		E=D;
		D=C;
		C=БитовыйLR(B, 30);
		B=A;
		A=T;
	КонецЦикла;
	
	// Добавление полученных значения к ранее вычисленному результату.
	КвадратныеКорни[0] = (КвадратныеКорни[0] + a)%Pow(2,32);
	КвадратныеКорни[1] = (КвадратныеКорни[1] + b)%Pow(2,32);
	КвадратныеКорни[2] = (КвадратныеКорни[2] + c)%Pow(2,32);
	КвадратныеКорни[3] = (КвадратныеКорни[3] + d)%Pow(2,32);
	КвадратныеКорни[4] = (КвадратныеКорни[4] + e)%Pow(2,32);
	
КонецПроцедуры // РаундSHA1()

////////////////////////////////////////////////////////////////////////////////
// БИТОВЫЕ ОПЕРАЦИИ


// Функция - Битовый XOR
//
// Параметры:
//  Параметр1				 - Число - 4 байта
//  Параметр2				 - Число - 4 байта
//  МассивБитовыхОпераций	 - Массив - используемый кэш операций
// 
// Возвращаемое значение:
//   - битовый XOR, 4 байта
//
Функция БитовыйXOR(Знач Параметр1, Знач Параметр2, МассивБитовыхОпераций)
	
	Временная = МассивБитовыхОпераций[65536+256*(Параметр1%256)+(Параметр2%256)];
	Параметр1 = Цел(Параметр1/256); Параметр2 = Цел(Параметр2/256);
	Временная = Временная + МассивБитовыхОпераций[65536+256*(Параметр1%256)+(Параметр2%256)] * 256;
	Параметр1 = Цел(Параметр1/256); Параметр2 = Цел(Параметр2/256);
	Временная = Временная + МассивБитовыхОпераций[65536+256*(Параметр1%256)+(Параметр2%256)] * 65536;
	Параметр1 = Цел(Параметр1/256); Параметр2 = Цел(Параметр2/256);
	Возврат Временная + МассивБитовыхОпераций[65536+256*(Параметр1%256)+(Параметр2%256)] * 16777216;
	
КонецФункции // БитовыйXOВременная()

// Функция - Битовый NOT
//
// Параметры:
//  Параметр1	 - Число - 4 байта
// 
// Возвращаемое значение:
//   - битовый NOT, 4 байта
//
Функция БитовыйNOT(Знач Параметр1)
	
	Возврат 4294967295-Параметр1;
	
КонецФункции // БитовыйNOT()

Функция БитовыйLR(Знач Параметр1, Сдвиг)
	
	Возврат Цел(Параметр1 / Pow(2, 32 - Сдвиг)) + Pow(2, Сдвиг) * (Параметр1 % Pow(2, 32 - Сдвиг));
	
КонецФункции // БитовыйLR

// Функция - Битовый ROTR
//
// Параметры:
//  Параметр1				 - Число - 4 байта
//  Сдвиг					 - Число - [1..31]
//  МассивБитовыхОпераций	 - Массив - используемый кэш операций
// 
// Возвращаемое значение:
//   - битовый ROTR, 4 байта
//
Функция БитовыйROTR(Знач Параметр1, Сдвиг, МассивБитовыхОпераций)
	
	Возврат МассивБитовыхОпераций[131104-Сдвиг] * (Параметр1%МассивБитовыхОпераций[131072+Сдвиг]) + Цел(Параметр1/МассивБитовыхОпераций[131072+Сдвиг]);
	
КонецФункции // БитовыйROTR()

// Функция - Битовый SHR
//
// Параметры:
//  Параметр1	 - Число - 4 байта
//  Сдвиг		 - Число - [1..31]
// 
// Возвращаемое значение:
//   - битовый SHR, 4 байта
//
Функция БитовыйSHR(Знач Параметр1, Сдвиг)
	
	Возврат Цел(Параметр1/Pow(2,Сдвиг));
	
КонецФункции // БитовыйSHR()

// Функция - Битовый AND
//
// Параметры:
//  Параметр1				 - Число - 4 байта
//  Параметр2				 - Число - 4 байта
//  МассивБитовыхОпераций	 - Массив - используемый кэш операций
// 
// Возвращаемое значение:
//   - битовый AND, 4 байта
//
Функция БитовыйAND(Знач Параметр1, Знач Параметр2, МассивБитовыхОпераций)
	
	Временная = МассивБитовыхОпераций[256*(Параметр1%256)+(Параметр2%256)];
	Параметр1 = Цел(Параметр1/256); Параметр2 = Цел(Параметр2/256);
	Временная = Временная + МассивБитовыхОпераций[256*(Параметр1%256)+(Параметр2%256)] * 256;
	Параметр1 = Цел(Параметр1/256); Параметр2 = Цел(Параметр2/256);
	Временная = Временная + МассивБитовыхОпераций[256*(Параметр1%256)+(Параметр2%256)] * 65536;
	Параметр1 = Цел(Параметр1/256); Параметр2 = Цел(Параметр2/256);
	Возврат Временная + МассивБитовыхОпераций[256*(Параметр1%256)+(Параметр2%256)] * 16777216;
	
КонецФункции // БитовыйAND()

// Функция - Массив битовых операций256
// 
// Возвращаемое значение:
//  Массив - закешированный результат битовых операций AND (0-65535), XOR (65536-131071) над 1байтными переменными и степени двойки (131072-131104)
//
Функция МассивБитовыхОпераций256()
	Возврат ИнтеграцияЕГАИСУТКлиентСерверПовтИсп.МассивБитовыхОпераций256();
КонецФункции
