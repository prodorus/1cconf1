
//#Область ПрограммныйИнтерфейс

//#Область МенюОтчеты

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов.
//
Процедура ДобавитьКомандуСтруктураПодчиненности(КомандыОтчетов) Экспорт
	
	
	Возврат;
	
КонецПроцедуры

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов.
//
Процедура ДобавитьКомандуДвиженияДокумента(КомандыОтчетов) Экспорт
	
	Возврат;
	
КонецПроцедуры

//#КонецОбласти

//#Область СерииНоменклатуры

// Имена реквизитов, от значений которых зависят параметры указания серий.
//
// Параметры:
//	ТипОбъекта - ОбъектМетаданных - Тип объекта коллекции объектов метаданных.
//
// Возвращаемое значение:
//	Строка - Имена реквизитов, перечисленные через запятую.
//
Функция ИменаРеквизитовДляЗаполненияПараметровУказанияСерий(ТипОбъекта) Экспорт
	
	Если ТипОбъекта = Метаданные.Документы.ТТНВходящаяЕГАИС Тогда
		ИменаРеквизитов = "Дата,ДокументОснование,ВидОперации,ТорговыйОбъект";
		
	Иначе
		ИменаРеквизитов = "";
	КонецЕсли;
	
	Возврат ИменаРеквизитов;
	
КонецФункции

// Возвращает параметры указания серий для товаров, указанных в объекте.
//
// Параметры:
//	ТипОбъекта	- ОбъектМетаданных	- Тип объекта коллекции объектов метаданных.
//	Объект		- Структура			- Структура значений реквизитов объекта, необходимых для заполнения параметров указания серий.
//
// Возвращаемое значение:
//	Структура - Состав полей определен в функции НоменклатураКлиентСервер.ПараметрыУказанияСерий.
//
Функция ПараметрыУказанияСерий(ТипОбъекта, Объект) Экспорт
	
	Если ТипОбъекта = Метаданные.Документы.ТТНИсходящаяЕГАИС Тогда
		
		Возврат ИнтеграцияЕГАИСУТ.ПараметрыУказанияСерийТТНИсходящаяЕГАИС(Объект);
		
	ИначеЕсли ТипОбъекта = Метаданные.Документы.ТТНВходящаяЕГАИС Тогда
		
		Возврат ИнтеграцияЕГАИСУТ.ПараметрыУказанияСерийТТНВходящаяЕГАИС(Объект);
		
	ИначеЕсли ТипОбъекта = Метаданные.Документы.ЧекЕГАИС Тогда
		
		Возврат ИнтеграцияЕГАИСУТ.ПараметрыУказанияСерийЧекЕГАИС(Объект);

	ИначеЕсли ТипОбъекта = Метаданные.Документы.ЧекЕГАИСВозврат Тогда
		
		Возврат ИнтеграцияЕГАИСУТ.ПараметрыУказанияСерийЧекЕГАИСВозврат(Объект);
		
	ИначеЕсли ТипОбъекта = Метаданные.Документы.АктПостановкиНаБалансЕГАИС Тогда
		
		Возврат ИнтеграцияЕГАИСУТ.ПараметрыУказанияСерийАктПостановкиНаБалансЕГАИС(Объект);
		
	ИначеЕсли ТипОбъекта = Метаданные.Документы.АктСписанияЕГАИС Тогда
		
		Возврат ИнтеграцияЕГАИСУТ.ПараметрыУказанияСерийАктСписанияЕГАИС(Объект);
		
	ИначеЕсли ТипОбъекта = Метаданные.Документы.ПередачаВРегистр2ЕГАИС Тогда
		
		Возврат ИнтеграцияЕГАИСУТ.ПараметрыУказанияСерийПередачаВРегистр2ЕГАИС(Объект);
		
	ИначеЕсли ТипОбъекта = Метаданные.Документы.ВозвратИзРегистра2ЕГАИС Тогда
		
		Возврат ИнтеграцияЕГАИСУТ.ПараметрыУказанияСерийВозвратИзРегистра2ЕГАИС(Объект);
		
	ИначеЕсли ТипОбъекта = Метаданные.Обработки.СопоставлениеКлассификаторовЕГАИС Тогда
		
		Возврат ИнтеграцияЕГАИСУТ.ПараметрыУказанияСерийСопоставлениеКлассификаторовЕГАИС(Объект);
		
	ИначеЕсли ТипОбъекта = Метаданные.Справочники.ШтрихкодыУпаковокТоваров Тогда
		
		Возврат ИнтеграцияЕГАИСУТ.ПараметрыУказанияСерийШтрихкодыУпаковокТоваров(Объект);
		
	ИначеЕсли ТипОбъекта = Метаданные.РегистрыСведений.СоответствиеНоменклатурыЕГАИС Тогда
		
		Возврат ИнтеграцияЕГАИСУТ.ПараметрыУказанияСерийСоответствиеНоменклатурыЕГАИС(Объект);
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Возвращает параметры указания серий для товаров, указанных в объекте.
//
// Параметры:
//	Объект			 - Объект, ДанныеФормыСтруктура	- Объект, для формы которого нужно сформировать параметры 
//														указания серий.
//	МенеджерОбъекта	 - Менеджер						- Менеджер объекта, для формы которого нужно сформировать параметры указания серий.
//
// Возвращаемое значение:
//	Структура - параметры, уточняющие особенности указания серий в каждом объекте, состав полей определен в функции 
//				НоменклатураКлиентСервер.ПараметрыУказанияСерий.
//
Функция ПараметрыУказанияСерийФормыОбъекта(Объект, МенеджерОбъекта) Экспорт
	
	Возврат НоменклатураСервер.ПараметрыУказанияСерий(Объект, МенеджерОбъекта);
	
КонецФункции
           
// Извлекает из временного хранилища серии, указанные в форме редактирования серий, помещает эти строки в ТЧ "Серии" объекта,
//	перерасчитывает статусы указания серий строках товарной табличной части.
//
// Параметры:
//	Объект						- ДанныеФормыСтуктура	- Основной реквизит формы объекта,
//	ПараметрыУказанияСерий		- Структура				- Состав полей определен в функции 
//															НоменклатураКлиентСервер.ПараметрыУказанияСерий.
//	ПараметрыФормыУказанияСерий	- Структура				- Состав полей определен в функции 
//															НоменклатураСервер.ПараметрыФормыУказанияСерий.
//	КэшированныеЗначения		- Структура				- Сохраненные значения параметров, используемых при обработке строки таблицы.
//
Процедура ОбработатьУказаниеСерий(Объект, ПараметрыУказанияСерий, ПараметрыФормыУказанияСерий, КэшированныеЗначения) Экспорт
	
	НоменклатураСервер.ОбработатьУказаниеСерий(Объект, ПараметрыУказанияСерий, ПараметрыФормыУказанияСерий, ,
		КэшированныеЗначения);
	
	Возврат;
	
КонецПроцедуры

// Процедура заполняет статусы указания серий в строках товарной табличной части.
//
// Параметры:
//	Объект					- ДанныеФормыСтуктура	- Основной реквизит формы объекта.
//	ПараметрыУказанияСерий	- Структура				- Состав полей определен в функции 
//														НоменклатураКлиентСервер.ПараметрыУказанияСерий.
//
Процедура ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий) Экспорт
	
	//++ НЕ ГИСМ
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
	//-- НЕ ГИСМ
	
	Возврат;
	
КонецПроцедуры

// Процедура пересчитывает статусы указания серий в строках товаров, если это необходимо, переподчиняет строки серий 
// другим строкам таблицы.
//
// Параметры:
//	Объект						- ДанныеФормыСтуктура	- Основной реквизит формы объекта.
//	ПараметрыУказанияСерий		- Структура				- Состав полей определен в функции 
//															НоменклатураКлиентСервер.ПараметрыУказанияСерий.
//	ТекущаяСтрокаИдентификатор	- Число					- Идентификатор текущей строки товаров в форме объекта.
//	КэшированныеЗначения		- Структура				- Сохраненные значения параметров, используемых при обработке строки таблицы.
//
Процедура ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(Объект,
																		ПараметрыУказанияСерий,
																		ТекущаяСтрокаИдентификатор,
																		КэшированныеЗначения) Экспорт
																		
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(Объект, ПараметрыУказанияСерий,
		ТекущаяСтрокаИдентификатор, КэшированныеЗначения);
		
	Возврат;
	
КонецПроцедуры

// Возвращает текст запроса заполнения статусов указания серий для товаров, указанных в документе.
//
// Параметры:
//	ТипОбъекта				- ОбъектМетаданных: Документ	- Тип документа коллекции объектов метаданных.
//	ПараметрыУказанияСерий	- Структура						- Состав полей определен в функции 
//																НоменклатураКлиентСервер.ПараметрыУказанияСерий.
//
// Возвращаемое значение:
//	Строка - Текст запроса заполнения статусов указания серий для товаров, указанных в объекте.
//
Функция ТекстЗапросаЗаполненияСтатусовУказанияСерий(ТипОбъекта, ПараметрыУказанияСерий) Экспорт
	
	ТекстЗапроса = "";
	
	Если ТипОбъекта = Метаданные.Справочники.ШтрихкодыУпаковокТоваров Тогда
		
		ТекстЗапроса = ИнтеграцияЕГАИСУТ.ТекстЗапросаЗаполненияСтатусовУказанияСерийШтрихкодыУпаковокТоваров(ПараметрыУказанияСерий);
		
	ИначеЕсли ТипОбъекта = Метаданные.РегистрыСведений.СоответствиеНоменклатурыЕГАИС Тогда
		
		ТекстЗапроса = ИнтеграцияЕГАИСУТ.ТекстЗапросаЗаполненияСтатусовУказанияСерийСоответствиеНоменклатурыЕГАИС(ПараметрыУказанияСерий);
		
	ИначеЕсли ТипОбъекта = Метаданные.Документы.ТТНВходящаяЕГАИС Тогда
		
		ТекстЗапроса = ИнтеграцияЕГАИСУТ.ТекстЗапросаЗаполненияСтатусовУказанияСерийТТНВходящаяЕГАИС(ПараметрыУказанияСерий);
		
	ИначеЕсли ТипОбъекта = Метаданные.Документы.ТТНИсходящаяЕГАИС
		ИЛИ  ТипОбъекта = Метаданные.Документы.ЧекЕГАИС
		ИЛИ ТипОбъекта = Метаданные.Документы.ЧекЕГАИСВозврат
		ИЛИ ТипОбъекта = Метаданные.Документы.АктПостановкиНаБалансЕГАИС
		ИЛИ ТипОбъекта = Метаданные.Документы.АктСписанияЕГАИС
		ИЛИ ТипОбъекта = Метаданные.Документы.ПередачаВРегистр2ЕГАИС
		ИЛИ ТипОбъекта = Метаданные.Документы.ВозвратИзРегистра2ЕГАИС
		ИЛИ ТипОбъекта = Метаданные.Обработки.СопоставлениеКлассификаторовЕГАИС Тогда
		
		ТекстЗапроса = ИнтеграцияЕГАИСУТ.ТекстЗапросаЗаполненияСтатусовУказанияСерий(ПараметрыУказанияСерий);
		
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Функция определяет, какую форму для указания серий нужно открыть (регистрации или подбора),
// подготавливает параметры (в т.ч. помещает нужные данные во временное хранилище) для ее открытия и возвращает их.
//
// Параметры:
//	Объект						- ДанныеФормыСтуктура	- Основной реквизит формы объекта.
//	ПараметрыУказанияСерий		- Структура				- Состав полей определен в функции 
//															НоменклатураКлиентСервер.ПараметрыУказанияСерий.
//	ТекущиеДанныеИдентификатор	- Число					- Идентификатор текущей строки товаров в форме объекта.
//	ЭтаФорма					- УправляемаяФорма		- Форма, из которой инициировано указание серий.
//
// Возвращаемое значение:
//	Структура - Параметры формы указания серий, состав которых определен в функции 
//				НоменклатураСервер.ПараметрыФормыУказанияСерий.
//
Функция ПараметрыФормыУказанияСерий(Объект, ПараметрыУказанияСерий, ТекущиеДанныеИдентификатор, ЭтаФорма) Экспорт
	
	Возврат НоменклатураСервер.ПараметрыФормыУказанияСерий(Объект, ПараметрыУказанияСерий, ТекущиеДанныеИдентификатор,
		ЭтаФорма);
	
	Возврат Неопределено;
	
КонецФункции

//#КонецОбласти

// Устанавливает параметры выбора номенклатуры.
//
// Параметры:
//  Форма - УправляемаяФорма - форма, в которой нужно установить параметры выбора,
//  ИмяПоляВвода - Строка - имя поля ввода номенклатуры.
//
Процедура УстановитьПараметрыВыбораНоменклатуры(Форма, ИмяПоляВвода = "ТоварыНоменклатура") Экспорт
	
	//++ НЕ ГОСИС
	ПараметрыВыбора = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(Форма.Элементы[ИмяПоляВвода].ПараметрыВыбора);
	
	ПараметрыВыбора.Добавить(Новый ПараметрВыбора("Отбор.АлкогольнаяПродукцияВоВскрытойТаре", Ложь));
	ПараметрыВыбора.Добавить(Новый ПараметрВыбора("Отбор.АлкогольнаяПродукция",               Истина));
	ПараметрыВыбора.Добавить(Новый ПараметрВыбора("Отбор.ТипНоменклатуры",                    Перечисления.ТипыНоменклатуры.Товар));
	
	Форма.Элементы[ИмяПоляВвода].ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбора);
	//-- НЕ ГОСИС
	
	Возврат;
	
КонецПроцедуры

// Устанавливает связь элемента формы с полем ввода номенклатуры.
//
// Параметры:
//	Форма					- УправляемаяФорма	- Форма, в которой нужно установить связь.
//	ИмяПоляВвода			- Строка			- Имя поля, связываемого с номенклатурой.
//	ПутьКДаннымНоменклатуры	- Строка			- Путь к текущей номенклатуре в форме.
//
Процедура УстановитьСвязиПараметровВыбораСНоменклатурой(Форма,
														ИмяПоляВвода,
														ПутьКДаннымНоменклатуры = "Элементы.Товары.ТекущиеДанные.Номенклатура") Экспорт
	
	
	СвязиПараметровВыбора = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(Форма.Элементы[ИмяПоляВвода].СвязиПараметровВыбора);
	СвязиПараметровВыбора.Добавить(Новый СвязьПараметраВыбора("Номенклатура", ПутьКДаннымНоменклатуры));
	
	Форма.Элементы[ИмяПоляВвода].СвязиПараметровВыбора = Новый ФиксированныйМассив(СвязиПараметровВыбора);
	
КонецПроцедуры

// Устанавливает условное оформление для поля "Единица измерения".
//
// Параметры:
//  Форма - УправляемаяФорма - форма, в которой нужно установить условное оформление,
//  ИмяПоляВводаЕдиницИзмерения - Строка - имя элемента формы "Единица измерения",
//  ПутьКПолюОтбора - Строка - полный путь к реквизиту "Упаковка".
//
Процедура УстановитьУсловноеОформлениеЕдиницИзмерения(Форма,
	                                                  ИмяПоляВводаЕдиницИзмерения = "ТоварыНоменклатураЕдиницаИзмерения",
	                                                  ПутьКПолюОтбора = "Объект.Товары.Упаковка") Экспорт
	
	
	УсловноеОформление = Форма.УсловноеОформление;
	ЭлементыФормы = Форма.Элементы;
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ЭлементыФормы[ИмяПоляВводаЕдиницИзмерения].Имя);

	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКПолюОтбора);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	
КонецПроцедуры

// Устанавливает условное оформление для поля "Характеристика".
//
// Параметры:
//  Форма - УправляемаяФорма - форма, в которой нужно установить условное оформление,
//  ИмяПоляВводаХарактеристики - Строка - имя элемента формы "Характеристика",
//  ПутьКПолюОтбора - Строка - полный путь к реквизиту "Характеристики используются".
//
Процедура УстановитьУсловноеОформлениеХарактеристикНоменклатуры(Форма,
	                                                            ИмяПоляВводаХарактеристики = "ТоварыХарактеристика",
	                                                            ПутьКПолюОтбора = "Объект.Товары.ХарактеристикиИспользуются") Экспорт
	
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользованиеХарактеристикНоменклатуры") Тогда
		Возврат;
	КонецЕсли;
																
	УсловноеОформление = Форма.УсловноеОформление;
	ЭлементыФормы = Форма.Элементы;
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ЭлементыФормы[ИмяПоляВводаХарактеристики].Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКПолюОтбора);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<характеристики не используются>'"));
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
КонецПроцедуры

// Устанавливает условное оформление для поля "Серия".
//
// Параметры:
//	Форма - УправляемаяФорма - Форма, в которой нужно установить условное оформление,
//
Процедура УстановитьУсловноеОформлениеСерийНоменклатуры(Форма,
														ИмяПоляВводаСерии = "ТоварыСерия",
														ПутьКПолюОтбораСтатусУказанияСерий = "Объект.Товары.СтатусУказанияСерий",
														ПутьКПолюОтбораТипНоменклатуры = "Объект.Товары.ТипНоменклатуры") Экспорт
	
	НоменклатураСервер.УстановитьУсловноеОформлениеСерийНоменклатуры(Форма, ИмяПоляВводаСерии);
КонецПроцедуры

// Заполняет в табличной части служебные реквизиты, например: признак использования характеристик номенклатуры, артикул.
//
// Параметры:
//  Форма - УправляемаяФорма - Форма.
//  ТабличнаяЧасть - ДанныеФормыКоллекция, ТаблицаЗначений - таблица для заполнения.
//
Процедура ЗаполнитьСлужебныеРеквизитыВКоллекции(Форма, ТабличнаяЧасть) Экспорт
	
	ПараметрыЗаполненияРеквизитов = Новый Структура;
	Если ИнтеграцияЕГАИСКлиентСервер.ЕстьРеквизитОбъекта(Форма, "Объект")
		И ИнтеграцияЕГАИСКлиентСервер.ЕстьРеквизитОбъекта(Форма.Объект, "Ссылка") Тогда
		ПараметрыЗаполненияРеквизитов.Вставить(
			"ЗаполнитьПризнакАртикул",
			Новый Структура("Номенклатура", "Артикул"));
	КонецЕсли;
		
	ПараметрыЗаполненияРеквизитов.Вставить(
		"ЗаполнитьПризнакХарактеристикиИспользуются",
		Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
	
	ПараметрыЗаполненияРеквизитов.Вставить(
		"ЗаполнитьПризнакЕдиницаИзмерения",
		Новый Структура("Номенклатура", "ЕдиницаИзмерения"));
		
	//
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		ТабличнаяЧасть, ПараметрыЗаполненияРеквизитов);
	
КонецПроцедуры

// Проверяет заполнение характеристик в таблице значений.
//
// Параметры:
//  ТаблицаТоваров - ТаблицаЗначений - таблица для проверки с колонками: Номенклатура, Характеристика.
//  Отказ - Булево - Истина - характеристики заполнены в требуемых строках, в противном случае - Ложь.
//
Процедура ПроверитьЗаполнениеХарактеристикВТаблицеЗначений(ТаблицаТоваров, Отказ) Экспорт
	
	
КонецПроцедуры

// В функции требуется определить признак использования характеристик для номенклатуры.
//
// Параметры:
//	Номенклатура - ОпределяемыйТип.Номенклатура - Ссылка на элемент номенклатуры.
//
// Возвращаемое значение:
//	Булево - Признак использования характеристик.
//
Функция ПризнакИспользованияХарактеристик(Номенклатура) Экспорт
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользованиеХарактеристикНоменклатуры") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Номенклатура.ВестиУчетПоХарактеристикам;
	
КонецФункции

// В функции требуется определить признак использования характеристик.
//
// Возвращаемое значение:
//	Булево - Признак использования характеристик.
//
Функция ХарактеристикиИспользуются() Экспорт
	
	Возврат ПолучитьФункциональнуюОпцию("ИспользованиеСерийНоменклатуры");
	
КонецФункции

// В функции требуется определить признак использования серий для номенклатуры.
//
// Параметры:
//  Номенклатура - ОпределяемыйТип.Номенклатура - ссылка на элемент номенклатуры.
//
// Возвращаемое значение:
//   Булево - признак использования серий.
//
Функция ПризнакИспользованияСерий(Номенклатура) Экспорт
	
	Возврат ПолучитьФункциональнуюОпцию("ИспользованиеХарактеристикНоменклатуры");
	
КонецФункции

// В функции требуется определить признак использования упаковок для номенклатуры.
//
// Параметры:
//  Номенклатура - ОпределяемыйТип.Номенклатура - ссылка на элемент номенклатуры.
//
// Возвращаемое значение:
//   Булево - признак использования упаковок.
//
Функция ПризнакИспользованияУпаковок(Номенклатура) Экспорт
	
	Возврат Ложь;
	
КонецФункции

// В функции нужно реализовать получение и возврат базовой единицы измерения номенклатуры.
//
// Параметры:
//  Номенклатура - ОпределяемыйТип.Номенклатура - ссылка на элемент номенклатуры.
//
// Возвращаемое значение:
//   ОпределяемыйТип.Упаковка - базовая единица измерения.
//
Функция БазоваяЕдиницаИзмеренияНоменклатуры(Номенклатура) Экспорт
	
	Возврат Номенклатура.БазоваяЕдиницаИзмерения;
	
КонецФункции

// В процедуре нужно реализовать заполнение структуры данными из информационной базы.
//
// Параметры:
//  Организация - ОпределяемыйТип.ОрганизацияКонтрагентЕГАИС - ссылка на собственную организацию или контрагента,
//  Сведения - Структура - структура с реквизитами организации, которые требуется заполнить,
//  ДатаСведений - Дата - дата, на которую требуется получить информацию.
//
Процедура ЗаполнитьСведенияОбОрганизации(Организация, Сведения, ДатаСведений = Неопределено) Экспорт
	
	
КонецПроцедуры

// Возвращает строковое представление руководителя организации.
//
// Параметры:
//  Организация - ОпределяемыйТип.ОрганизацияКонтрагентЕГАИС - ссылка на собственную организацию или контрагента,
//  ДатаСведений - Дата - дата, на которую требуется получить информацию.
//
// Возвращаемое значение:
//  Структура - данные руководителя:
//   * Руководитель - Строка - ФИО руководителя,
//   * Должность - Строка - должность руководителя.
//
Функция ДанныеРуководителяОрганизации(Организация, ДатаСведений = Неопределено) Экспорт
	
	Результат = Новый Структура("Руководитель, Должность", "", "");
	
	
	Возврат Результат;
	
КонецФункции

//#КонецОбласти
