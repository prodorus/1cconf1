////////////////////////////////////////////////////////////////////////////////
// СТАРЫЕ АЛГОРИТМЫ

////////////////////////////////////////////////////////////////////////////////
// КОРРЕКТИРОВКА СУММ СПИСАНИЙ, ВЫПОЛНЕННЫХ В ТЕЧЕНИЕ МЕСЯЦА (ТОЛЬКО СУММОВЫЕ ДВИЖЕНИЯ)

// Процедура вызывается из документа КорректировкаСтоимостиСписания и выполняет корректировку порциями по 100 элементов
//
// Параметры:
//	ДатаНач - дата начала корректировки,
//	ДатаКон - дата окончания корректировки,
//	МассивВидовУчета - массив видов учета, по которым нужно выполнять корректировку,
//	Ссылка - ссылка на документ КорректировкаСтоимостиСписания,
//	Организация - организация, по которой выполняется корректировка.
//
Процедура ВыполнитьКорректировкуСтоимостиСписанияНаСервере(ДатаНач, ДатаКон, МассивВидовУчета, Ссылка, Организация) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ДатаНач", ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон", ДатаКон);

	
	Для Каждого Элемент из МассивВидовУчета Цикл
		
		НазваниеРегистраНаСкладах  = "ПартииТоваровНаСкладах"+Элемент;
		НазваниеРегистраПереданные = "ПартииТоваровПереданные"+Элемент;
		текНоменклатура 		   = Неопределено;
		текДокументОприходования   = Неопределено;
		
		НомерПорции = 0;
		
		Пока Истина Цикл
			НомерПорции = НомерПорции + 1;
			
			Запрос.УстановитьПараметр("ВидДвижения", ВидДвиженияНакопления.Расход);
			Запрос.УстановитьПараметр("Номенклатура", текНоменклатура);
			Запрос.УстановитьПараметр("ДокументОприходования", текДокументОприходования);
			
			Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 100
					|	Подзапрос.Номенклатура КАК Номенклатура,
					|	Подзапрос.ДокументОприходования КАК ДокументОприходования
					|ИЗ
					|	(ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 100
					|		ПодзапросНаСкладах.Номенклатура КАК Номенклатура,
					|		ПодзапросНаСкладах.ДокументОприходования КАК ДокументОприходования
					|	ИЗ
					|		(ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 100
					|			НаСкладах.Номенклатура КАК Номенклатура,
					|			НаСкладах.ДокументОприходования КАК ДокументОприходования
					|		ИЗ
					|			РегистрНакопления.ПартииТоваровНаСкладах КАК НаСкладах
					|		ГДЕ
					|			НаСкладах.Период МЕЖДУ &ДатаНач И &ДатаКон
					|			И (НаСкладах.Номенклатура > &Номенклатура
					|					ИЛИ НаСкладах.Номенклатура = &Номенклатура
					|						И НаСкладах.ДокументОприходования > &ДокументОприходования)
					|			И ((НаСкладах.ВидДвижения = &ВидДвижения) ИЛИ (НаСкладах.ДокументОприходования ССЫЛКА Документ.КомплектацияНоменклатуры))
					|		
					|		УПОРЯДОЧИТЬ ПО
					|			Номенклатура,
					|			ДокументОприходования) КАК ПодзапросНаСкладах
					|	
					|	ОБЪЕДИНИТЬ ВСЕ
					|	
					|	ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 100
					|		ПодзапросПереданные.Номенклатура,
					|		ПодзапросПереданные.ДокументОприходования
					|	ИЗ
					|		(ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 100
					|			Переданные.Номенклатура КАК Номенклатура,
					|			Переданные.ДокументОприходования КАК ДокументОприходования
					|		ИЗ
					|			РегистрНакопления.ПартииТоваровПереданные КАК Переданные
					|		ГДЕ
					|			Переданные.Период МЕЖДУ &ДатаНач И &ДатаКон
					|			И (Переданные.Номенклатура > &Номенклатура
					|					ИЛИ Переданные.Номенклатура = &Номенклатура
					|						И Переданные.ДокументОприходования > &ДокументОприходования)
					|			И ((Переданные.ВидДвижения = &ВидДвижения) ИЛИ (Переданные.ДокументОприходования ССЫЛКА Документ.КомплектацияНоменклатуры))
					|		
					|		УПОРЯДОЧИТЬ ПО
					|			Номенклатура,
					|			ДокументОприходования) КАК ПодзапросПереданные) КАК Подзапрос
					|
					|УПОРЯДОЧИТЬ ПО
					|	Номенклатура,
					|	ДокументОприходования";
			
			Если НазваниеРегистраНаСкладах <> "ПартииТоваровНаСкладах" тогда
				
				Текст = СтрЗаменить(Текст, "ПартииТоваровНаСкладах",НазваниеРегистраНаСкладах);
				Текст = СтрЗаменить(Текст, "ПартииТоваровПереданные",НазваниеРегистраПереданные);
				
			КонецЕсли;

			Запрос.Текст = Текст;
			Таблица = Запрос.Выполнить().Выгрузить();
			
			КоличествоСтрок = Таблица.Количество();
			// Если строки кончились, прерываем цикл
			Если КоличествоСтрок = 0 Тогда
				Прервать;
			КонецЕсли;
			
			текНоменклатура = Таблица[КоличествоСтрок-1].Номенклатура;
			текДокументОприходования = Таблица[КоличествоСтрок-1].ДокументОприходования;
			
			Если Элемент = "" тогда
				ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВУправленческомУчете;
			КонецЕсли;
			
			Если Элемент = "БухгалтерскийУчет" тогда
				ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВБухгалтерскомУчете;
			КонецЕсли;
			
			Если Элемент = "НалоговыйУчет" тогда
				ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВНалоговомУчете;
			КонецЕсли;
			
			Если Элемент = "МеждународныйУчет" тогда
				ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВМеждународномУчете;
			КонецЕсли;
			
			// Корректировка списания по-средней
			КорректировкаСтоимости.КорректировкаСписания(ДатаНач, ДатаКон, Таблица, Ссылка,
				Организация,
				ВидОтраженияВУчете,
				Ложь,
				Неопределено,
				Истина);
			
		КонецЦикла;
		
	КонецЦикла;	
	
КонецПроцедуры	

// Функция-оболочка, вызывающая корректировку списания. Вызывается из документов:
// ПогашениеСтоимости, РасчетСебестоимостиВыпуска, КорректировкаСтоимостиСписанияТоваров
//
// Параметры:
//	ВидОтраженияВУчете - ПеречислениеСсылка.ВидыОтраженияВУчете - Вид отаржения в учете
//
Процедура КорректировкаСписания(ДатаНач, ДатаКон, ТаблицаТоваров, РегламентныйДокумент,
								Организация, 
								ВидОтраженияВУчете,
								НеСписыватьНаПостоянныеЗатраты = Ложь, ДопПараметры = Неопределено, ПоследнийПередел = Ложь,
								ВстречныйВыпуск = Ложь) Экспорт
	
	//Признак того, что в параметр ДопПараметры передана структура и ее необходимо вернуть из процедуры
	
	флТребуетсяВозвратДопПараметров = истина;
	Если ТипЗнч(ДопПараметры) <> Тип("Структура") Тогда
		флТребуетсяВозвратДопПараметров = Ложь;
		ДопПараметры = Новый Структура;
	КонецЕсли;

	Если ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВУправленческомУчете Тогда
		СпособВеденияПартионногоУчетаПоОрганизации = УправлениеЗапасами.ПолучитьСпособВеденияПартионногоУчетаПоОрганизации(Организация, ДатаКон);
		ДопПараметры.Вставить("Организация", УправлениеЗапасами.ПолучитьОрганизациюВСоответствииСоСпособомВеденияПартионногоУчетаПоОрганизациям(Организация,СпособВеденияПартионногоУчетаПоОрганизации));
	Иначе
		ДопПараметры.Вставить("Организация", Организация);
	КонецЕсли;	
	
	ДопПараметры.Вставить("НеСписыватьНаПостоянныеЗатраты", НеСписыватьНаПостоянныеЗатраты);
	
	
	// Приведение структуры доп.параметров к виду структуры параметров из основного алгоритма списания партий
	//
	ДопПараметры.Вставить("ОтражатьВУправленческомУчете" , (ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВУправленческомУчете));
	ДопПараметры.Вставить("ОтражатьВБухгалтерскомУчете"  , (ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВБухгалтерскомУчете));
	ДопПараметры.Вставить("ОтражатьВНалоговомУчете"      , (ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВНалоговомУчете));
	ДопПараметры.Вставить("ОтражатьВМеждународномУчете"  , (ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВМеждународномУчете));
	
	ДопПараметры.Вставить("ЕстьСтрокиОтражатьВУправленческомУчете" , (ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВУправленческомУчете));
	ДопПараметры.Вставить("ЕстьСтрокиОтражатьВБухгалтерскомУчете"  , (ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВБухгалтерскомУчете));
	ДопПараметры.Вставить("ЕстьСтрокиОтражатьВНалоговомУчете"      , (ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВНалоговомУчете));
	ДопПараметры.Вставить("ЕстьСтрокиОтражатьВМеждународномУчете"  , (ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВМеждународномУчете));
	
	ДопПараметры.Вставить("КэшПоВидамСубконто", Новый Соответствие);
	
	Если НЕ ДопПараметры.Свойство("КодыОпераций") тогда
		ДопПараметры.Вставить("КодыОпераций", Перечисления.КодыОперацийПартииТоваров);
	КонецЕсли;
	
	Если НЕ РегламентныйДокумент = Неопределено тогда
		ДопПараметры.Вставить("ТипЗначенияРегистратора", ТипЗнч(РегламентныйДокумент));
	КонецЕсли;
	
	ДопПараметры.Вставить("ВстречныйВыпуск",ВстречныйВыпуск);
	
	СкорректироватьСписание(ДатаНач, ДатаКон, ТаблицаТоваров, РегламентныйДокумент, ДопПараметры);
	
	// Корректировка стоимости реализации комплектов продукции должна выполняться только после последнего передела,
	// когда известна себестоимость всей продукции
	// Получим список номенклатуры появившейся в результате комплектации
	// Это упрощенный способ, имеющий свои ограничения
	// Так можно рассчитать только себестоимость реализации комплектов, скомплектованных одним документом "комплектация"
	// Более сложные схемы с многоуровневыми комплектациями - разукомплектациями и передачами комплектов в производство
	// обслуживаются только специализированными производственными документами
	
	Если ПоследнийПередел тогда
		
		ТаблицаКомплектов = ПолучитьТаблицуПартийПоКодуОперации(ДатаНач,ДатаКон,ДопПараметры,Перечисления.КодыОперацийПартииТоваров.Комплектация,ВидДвиженияНакопления.Приход);
		// Если комплектов нет - корректировать нечего
		Если ТаблицаКомплектов <> Неопределено тогда
			ДопПараметры.Вставить("КорректироватьКомплектыПродукции");
			СкорректироватьСписание(ДатаНач, ДатаКон, ТаблицаКомплектов, РегламентныйДокумент, ДопПараметры);
		КонецЕсли;
		
		// Если возврат от покупателя текущего месяца осуществляется по документу поступления - стоимость соответствующего состояния
		// может быть уменьшена документом списания и стоимость возврата может не соотвествовать стоимости реализации
		// Поэтому корректировка стоимости возвратов от покупателя текущего месяца должна выполняться последней
		ТаблицаВозвратов = ПолучитьТаблицуПартийПоКодуОперации(ДатаНач,ДатаКон,ДопПараметры,Перечисления.КодыОперацийПартииТоваров.ВозвратОтПокупателяТекущийМесяц,ВидДвиженияНакопления.Расход);
		Если ТаблицаВозвратов <> Неопределено тогда
			ДопПараметры.Вставить("КорректироватьСтоимостьВозвратовТекущегоМесяца");
			СкорректироватьСписание(ДатаНач, ДатаКон, ТаблицаВозвратов, РегламентныйДокумент, ДопПараметры);
		КонецЕсли;
		
	КонецЕсли;
	
	Если  флТребуетсяВозвратДопПараметров Тогда
		// Последних переделов может быть несколько 
		Если ДопПараметры.Свойство("КорректироватьКомплектыПродукции") тогда
			ДопПараметры.Удалить("КорректироватьКомплектыПродукции");
		КонецЕсли;
		
		Если ДопПараметры.Свойство("КорректироватьСтоимостьВозвратовТекущегоМесяца") тогда
			ДопПараметры.Удалить("КорректироватьСтоимостьВозвратовТекущегоМесяца");
		КонецЕсли;
	Иначе
		//необходимо для того, чтобы предотвратить возврат из процедуры мутабельных значений.
		//Если в ДопПараметры не надо ничего возвращать, то переменную необходимо удалить
		ДопПараметры = неопределено;
	КонецЕсли;
КонецПроцедуры // КорректировкаСписания

// Возвращает таблицу партий по переданному коду операции
//
// Параметры:
//	ДатаНач 		- дата начала периода, за который получаются данные, 
//	ДатаКон 		- дата окончания периода, 
//	ДопПараметры 	- структура, содержащая параметры для установки отборов, 
//	КодОперации 	- код операции, по которому производиться отбор партий,
//	ВидДвижения 	- вид движения, по которому производиться отбор партий.
//	
//	Возвращает таблицу партий
Функция ПолучитьТаблицуПартийПоКодуОперации(ДатаНач, ДатаКон,ДопПараметры,КодОперации,ВидДвижения)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
				   |	НаСкладах.Номенклатура КАК Номенклатура,
				   |	НаСкладах.ДокументОприходования КАК ДокументОприходования
				   |ИЗ
				   |	РегистрНакопления.ПартииТоваровНаСкладах КАК НаСкладах
				   |ГДЕ
				   |	НаСкладах.Период МЕЖДУ &ДатаНач И &ДатаКон
				   |	И НаСкладах.ВидДвижения = &ВидДвижения
				   |	И НаСкладах.КодОперации = &КодОперации";
	
	Запрос.УстановитьПараметр("КодОперации", КодОперации);
	Запрос.УстановитьПараметр("ВидДвижения", ВидДвижения);
	Запрос.УстановитьПараметр("ДатаНач", ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон", ДатаКон);
	
	Если ДопПараметры.ОтражатьВБухгалтерскомУчете тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"ПартииТоваровНаСкладах", "ПартииТоваровНаСкладахБухгалтерскийУчет");	
	ИначеЕсли ДопПараметры.ОтражатьВНалоговомУчете тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"ПартииТоваровНаСкладах", "ПартииТоваровНаСкладахНалоговыйУчет");	
	ИначеЕсли ДопПараметры.ОтражатьВМеждународномУчете тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"ПартииТоваровНаСкладах", "ПартииТоваровНаСкладахМеждународныйУчет");	
	ИначеЕсли Не ДопПараметры.ОтражатьВУправленческомУчете тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
	|	И НаСкладах.Организация = &Организация";
	Запрос.УстановитьПараметр("Организация", ДопПараметры.Организация);		
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() тогда 
		Возврат Неопределено;
	Иначе
		Возврат РезультатЗапроса.Выгрузить();
	КонецЕсли;
	
КонецФункции	

////////////////////////////////////////////////////////////////////////////////
// Процедуры списания по-средней, не зависящие от структуры данных конфигурации

Функция ПолучитьСтруктруТаблицыСписанныхПартийСпецодежды(Учет)
	ТаблицаСписанныхПартий = УправлениеЗатратами.СформироватьТаблицуЗатрат();
	ТаблицаСписанныхПартий.Колонки.Добавить("Стоимость", Новый ОписаниеТипов("Число"), Новый КвалификаторыЧисла(15,2));
	ТаблицаСписанныхПартий.Колонки.Добавить("КодОперацииПартииТоваров", Новый ОписаниеТипов("ПеречислениеСсылка.КодыОперацийПартииТоваров"));
	
	ТаблицаСписанныхПартий.Колонки.Добавить("ОтражатьВУправленческомУчете", Новый ОписаниеТипов("Булево"));
	ТаблицаСписанныхПартий.Колонки.Добавить("ОтражатьВБухгалтерскомУчете", Новый ОписаниеТипов("Булево"));
	ТаблицаСписанныхПартий.Колонки.Добавить("ОтражатьВНалоговомУчете", Новый ОписаниеТипов("Булево"));
	ТаблицаСписанныхПартий.Колонки.Добавить("ОтражатьВМеждународномУчете", Новый ОписаниеТипов("Булево"));
	
	ТаблицаСписанныхПартий.Колонки.Добавить("ФизЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ТаблицаСписанныхПартий.Колонки.Добавить("ДокументПередачи", Новый ОписаниеТипов("ДокументСсылка.ПередачаМатериаловВЭксплуатацию"));
	ТаблицаСписанныхПартий.Колонки.Добавить("НазначениеИспользования", Новый ОписаниеТипов("СправочникСсылка.НазначенияИспользования"));
	ТаблицаСписанныхПартий.Колонки.Добавить("Склад", Новый ОписаниеТипов("СправочникСсылка.Склады"));
	
	Если Учет = "Бух" ИЛИ Учет = "Нал" Тогда
		ТаблицаСписанныхПартий.Колонки.Добавить("КорСчетБУ", Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
		ТаблицаСписанныхПартий.Колонки.Добавить("КорСубконтоБУ1");
		ТаблицаСписанныхПартий.Колонки.Добавить("КорСубконтоБУ2");
		ТаблицаСписанныхПартий.Колонки.Добавить("КорСубконтоБУ3");
		
		Если Учет = "Нал" Тогда
			ТаблицаСписанныхПартий.Колонки.Добавить("КорСчетНУ", Новый ОписаниеТипов("ПланСчетовСсылка.Налоговый"));
			ТаблицаСписанныхПартий.Колонки.Добавить("КорСубконтоНУ1");
			ТаблицаСписанныхПартий.Колонки.Добавить("КорСубконтоНУ2");
			ТаблицаСписанныхПартий.Колонки.Добавить("КорСубконтоНУ3");			
		КонецЕсли;	
	КонецЕсли;	
	Возврат ТаблицаСписанныхПартий;
КонецФункции	

// СписаниеПоСредней
//
// Параметры:
//	ТаблицаТоваров - содержит товары, списание которых необходимо усреднить. 
//	Каждая колонка соответствует одному из постоянных параметров товара, не изменяемых в ходе перемещений. 
//	По остальным параметрам выполняется усреднение
//
Процедура РассчитатьСписаниеПоСредней(ТаблицаТоваров, ДатаНач, ДатаКон, СтруктураДопПараметров)
	
	// Основное допущение данного метода - игнорирование замкнутой цепочки перемещений между состояниями ("холостого хода"):
	// считаем, что если товар в ходе перемещений снова попал в исходное состояние, то он как бы не перемещался, 
	// это движение можно исключить из общего оборота, а стоимость движения принять равной 0. Цепочки перемещений 
	// таким образом размыкаются, что позволяет рассчитать стоимости движений, начиная от конца цепочки.
	
	// Получим все состояния для товара, которые он принимал за период в виде таблицы
	//	---------------------------------------------------------------------------------------------------------------------------------
	// |Состояние 1 (Источник) |Состояние 2 (Приемник)| Перемещаемое количество| Стоимость (нужна для упрощения последующей корректировки)
	
	// Последовательно обходя состояния, выделим контуры (пути, начала и концы которых совпадают)
	// В каждом контуре найдем количество, которое совершило перемещение по замкнутому кругу ("холостой ход"), 
	// и уменьшим каждое движение из контура на данное количество.
	// Будем выбирать другие состояния для получения всех контуров и применим к ним то же правило.
	
	// После нахождения контуров в графах перемещений и сокращения "холостого хода" получаем совокупность разомкнутых 
	// путей перехода товара между состояниями (остовные деревья). Внутри каждой такой цепочки выполняем расчет.
	// Важно:  в общем случае результат сокращения зависит от последовательности обхода контуров, поэтому
	// для повторяемости результата она должна подчиняться какому-либо правилу (например, чтобы сводные перемещения
	// упорядочивались по возрастанию даты первого перемещения)
	
	// Получим таблицу перемещений, содержащую суммарные перемещения между состояниями
	
	// Получаемая таблица должна содержать колонку "Количество", "Стоимость" и колонки, описывающие старое и новое состояние,
	// причем имена колонок нового состояния заканчиваются на ПрефиксПараметровНовогоСостояния
	ПрефиксПараметровНовогоСостояния="_НовоеСостояние";
	
	Таб = ПолучитьТаблицуПеремещений(ТаблицаТоваров, ДатаНач, ДатаКон, ПрефиксПараметровНовогоСостояния, СтруктураДопПараметров);
	
	СтруктураДопПараметров.Вставить("ТаблицаСписанныхПартийСпецодежды", ПолучитьСтруктруТаблицыСписанныхПартийСпецодежды(СтруктураДопПараметров.Учет));
	
	//1. Приведем переданную таблицу перемещений к требуемому виду:
	// Таблица имеет колонки Источник, Приемник, Количество
	// строка таблицы соответствует перемещению из состояния 1 в состояние 2, перемещения не повторяются.
	
	// Количество колонок без ПрефиксПараметровНовогоСостояния должно быть равно количеству колонок с ПрефиксПараметровНовогоСостояния
	// Сформируем также структуру, которая содержит параметры состояния товара
	СтруктураСостояния = Новый Структура;
	
	МассивСумм = Неопределено;
	СтруктураДопПараметров.Свойство("МассивСумм", МассивСумм);
	
	Если ТипЗнч(МассивСумм) <> Тип("Массив") Тогда
		МассивСумм = Новый Массив;
		МассивСумм.Добавить("Стоимость");
	КонецЕсли;
	
	
	// То же самое, но в соответствии - для удобства поиска
	СоотвСумм = Новый Соответствие;
	
	Для Каждого ЭлементСумм Из МассивСумм Цикл
		СоотвСумм.Вставить(ЭлементСумм, ЭлементСумм);
	КонецЦикла;
	
	Инд=0;
	Пока Инд< Таб.Колонки.Количество() Цикл
		
		Колонка = Таб.Колонки[Инд];
		
		// Имя колонки не совпадает с количеством и колонками стоимости
		Если ВРег(Колонка.Имя) <> ВРег("Количество") Тогда
			
			// Это колонка суммы
			Если СоотвСумм[Колонка.Имя] <> Неопределено Тогда
				Инд = Инд+1;
				Продолжить;
			КонецЕсли;
			
			// Колонки, оканчивающиеся на ПрефиксПараметровНовогоСостояния - правые (новое состояние), им должны соответствовать такие же левые, оканчивающиеся на ПрефиксПараметровНовогоСостояния
			Если Прав(Колонка.Имя, СтрДлина(ПрефиксПараметровНовогоСостояния)) = ПрефиксПараметровНовогоСостояния  Тогда
				ИмяСоответствующейКолонки=Лев(Колонка.Имя, СтрДлина(Колонка.Имя)-СтрДлина(ПрефиксПараметровНовогоСостояния));
				Если Таб.Колонки.Найти(ИмяСоответствующейКолонки)=Неопределено Тогда
					Таб.Колонки.Добавить(ИмяСоответствующейКолонки, Колонка.ТипЗначения)
				КонецЕсли;
				// И наоборот, колонки, не оканчивающиеся на ПрефиксПараметровНовогоСостояния - левые (новое состояние), им должны соответствовать такие же правые, оканчивающиеся на ПрефиксПараметровНовогоСостояния
			Иначе
				ИмяСоответствующейКолонки=Колонка.Имя+ПрефиксПараметровНовогоСостояния;
				Если Таб.Колонки.Найти(ИмяСоответствующейКолонки)=Неопределено Тогда
					Таб.Колонки.Добавить(ИмяСоответствующейКолонки, Колонка.ТипЗначения)
				КонецЕсли;
				
				СтруктураСостояния.Вставить(Колонка.Имя);
			КонецЕсли;
		КонецЕсли;
		
		Инд=Инд+1;
	КонецЦикла;
	
	// В таблице перемещений заменим параметры состояний индексами состояний, сами параметры будут храниться в СоотвПараметровСостояний
	
	Таб.Колонки.Добавить("Источник", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(9,0)));
	Таб.Колонки.Добавить("Приемник", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(9,0)));
	
	СоотвПараметровСостояний = Новый Соответствие;
	
	Для Каждого Строка Из Таб Цикл // поиск выплняется полным перебором
		
		// Состояния-источники
		// Найдем состояние в соответсвии				
		НайденоСостояние=Ложь;
		Для Каждого ЭлементСостояние Из СоотвПараметровСостояний Цикл
			
			НайденоСостояние=Истина;
			Для Каждого Элемент Из СтруктураСостояния Цикл
				
				Если Элемент.Ключ = "ВременнаяРазница" или Элемент.Ключ = "ПостояннаяРазница" тогда
					Продолжить;
				КонецЕсли;
				Если НЕ (ЭлементСостояние.Значение[Элемент.Ключ] = Строка[Элемент.Ключ]) Тогда
					
					НайденоСостояние = Ложь; // состояния различны
					
					Прервать; // дальше можно не проверять
				КонецЕсли;
			КонецЦикла;
			
			Если НайденоСостояние Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если НайденоСостояние Тогда
			ИндексСостояния = ЭлементСостояние.Ключ;
		Иначе
			// Переносим в соответствие
			СтрСост = Новый Структура;
			Для Каждого Элемент Из СтруктураСостояния Цикл
				Если Элемент.Ключ = "ВременнаяРазница" или Элемент.Ключ = "ПостояннаяРазница" тогда
					Продолжить;
				КонецЕсли;
				СтрСост.Вставить(Элемент.Ключ, Строка[Элемент.Ключ]);
			КонецЦикла;
			
			ИндексСостояния = СоотвПараметровСостояний.Количество();
			СоотвПараметровСостояний.Вставить(ИндексСостояния, СтрСост);
		КонецЕсли;
		
		// Оставим в таблице ссылку на состояние
		Строка.Источник = ИндексСостояния;
		
		
		// То же самое для состояний-приемников
		// Найдем состояние в соответсвии				
		НайденоСостояние=Ложь;
		Для Каждого ЭлементСостояние Из СоотвПараметровСостояний Цикл
			
			НайденоСостояние=Истина;
			Для Каждого Элемент Из СтруктураСостояния Цикл
				
				Если Элемент.Ключ = "ВременнаяРазница" или Элемент.Ключ = "ПостояннаяРазница" тогда
					Продолжить;
				КонецЕсли;
				
				Если НЕ (ЭлементСостояние.Значение[Элемент.Ключ] = Строка[Элемент.Ключ+ПрефиксПараметровНовогоСостояния]) Тогда
					
					НайденоСостояние = Ложь; // состояния различны
					
					Прервать; // дальше можно не проверять
				КонецЕсли;
			КонецЦикла;
			
			Если НайденоСостояние Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если НайденоСостояние Тогда
			ИндексСостояния = ЭлементСостояние.Ключ;
		Иначе
			// Переносим в соответствие
			СтрСост = Новый Структура;
			Для Каждого Элемент Из СтруктураСостояния Цикл
				СтрСост.Вставить(Элемент.Ключ, Строка[Элемент.Ключ+ПрефиксПараметровНовогоСостояния]);
			КонецЦикла;
			
			ИндексСостояния = СоотвПараметровСостояний.Количество();
			СоотвПараметровСостояний.Вставить(ИндексСостояния, СтрСост);
		КонецЕсли;
		
		// Оставим в таблице ссылку на состояние
		Строка.Приемник = ИндексСостояния;
		
	КонецЦикла;
	
	// "Свернем" встречные перемещения: вместо двух перемещений типа 1->2 и 2->1 оставим одно 
	// с количеством |Кол12 - Кол21| в направлении большего перемещения.
	
	// Проведем следующее преобразование: повернем пары так, чтобы количество перемещения стало положительным
	Для Каждого Строка Из Таб Цикл
		
		Если Строка.Количество<0 Тогда
			Буф=Строка.Приемник;
			Строка.Приемник = Строка.Источник;
			Строка.Источник = Буф;
			Строка.Количество = - Строка.Количество;
			Для Каждого КолСумма Из МассивСумм Цикл
				Строка[КолСумма] = - Строка[КолСумма];
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	// "Свертка" встречных перемещений
	Инд=0;
	КолВо = Таб.Количество();
	
	Пока Инд<КолВо Цикл
		
		Инд2 = Инд+1;
		Пока Инд2<КолВо Цикл
			
			Строка2 = Таб[Инд2];
			Строка  = Таб[Инд];
			
			// Если найдено соответствующее встречное перемещение
			Если Строка.Источник = Строка2.Приемник
				И Строка.Приемник = Строка2.Источник Тогда
				
				Если Строка.Количество>Строка2.Количество Тогда
					УменьшитьНаКоличество = Строка2.Количество;
				Иначе
					УменьшитьНаКоличество = Строка.Количество;
				КонецЕсли;
				
				Строка.Количество  = Строка.Количество  - УменьшитьНаКоличество;
				Строка2.Количество = Строка2.Количество - УменьшитьНаКоличество;
				
				Для Каждого КолСумма Из МассивСумм Цикл
					
					Если Строка.Количество>Строка2.Количество Тогда
						УменьшитьНаСтоимость = Строка2[КолСумма];
					Иначе
						УменьшитьНаСтоимость = Строка[КолСумма];
					КонецЕсли;
					
					// То же самое - со стоимостью
					Строка[КолСумма]  = Строка[КолСумма]  - УменьшитьНаСтоимость;
					Строка2[КолСумма] = Строка2[КолСумма]  - УменьшитьНаСтоимость;
				КонецЦикла;
				
				// На этом обход можно прервать: быть не более одной пары встречных перемещений
				Прервать;
				
			Иначе
				Инд2 = Инд2+1;
			КонецЕсли;
			
		КонецЦикла; 
		
		Инд = Инд+1;
		
	КонецЦикла; 
	
	// Удалим обнулившиеся строки
	// Удаляем только строки со всеми нулевыми суммами и нулевым количеством
	
	КолВо = Таб.Количество();
	Инд=0;
	Пока Инд<КолВо Цикл
		
		Строка  = Таб[Инд];
		
		НеНужноУдалять = Строка.Количество<>0;
		
		Если Не НеНужноУдалять Тогда
		
			Для Каждого КолСумма Из МассивСумм Цикл
						
				НеНужноУдалять = НеНужноУдалять Или Строка[КолСумма]<>0;
				
			КонецЦикла;
		
		КонецЕсли;
		
		Если Не НеНужноУдалять Тогда
			Таб.Удалить(Строка);
			
			КолВо = КолВо-1;
		Иначе
			Инд=Инд+1;
		КонецЕсли;
		
	КонецЦикла;
	
	// Получили таблицу перемещений в требуемом формате
	ТаблицаПеремещений = Таб;	
	
	// Таблица перемещений содержит несколько несвязанных частей, относящихся к отдельным партиям - строкам таблицы ТаблицаТоваров
	
	// Обработка перемещений: разрыв контуров
	// Получим наборы смежных вершин для каждой вершины
	// Соотв СмежныеВершины Вершина, СмежныеВершины
	
	Источники = Новый Соответствие;
	Приемники = Новый Соответствие;
	МассивНачалДеревьев = Новый Массив;
	
	Для Каждого Строка Из ТаблицаПеремещений Цикл
		
		ПараметрыИсточника = Источники[Строка.Источник];
		Если ПараметрыИсточника = Неопределено Тогда
			СмежныеВершины= Новый Соответствие;
			ПараметрыИсточника = Новый Структура("Пройден, СмежныеВершины", Ложь, СмежныеВершины);
		КонецЕсли;
		
		ПараметрыИсточника.СмежныеВершины.Вставить(Строка.Приемник, ТаблицаПеремещений.Индекс(Строка)); // во вложенной структуре храним смежную вершину и номер строки перемещения
		
		Источники.Вставить(Строка.Источник, ПараметрыИсточника);
		
	КонецЦикла;
	
	// Чтобы рассчитать перемещения, заменим каждый связный граф перемещений его остовным деревом
	// Для этого обойдем их все, найдем и разорвем все контуры по предложенному выше правилу.
	Для Каждого Элемент Из Источники Цикл
		Если НЕ Элемент.Значение.Пройден Тогда // если от вершины еще не строился контур, обрабатываем
			
			//ПройденныеВершины = Новый Соответствие;
			//НомерВершины = Элемент.Ключ;
			//ПройденныеВершины.Вставить(НомерВершины, -1);
			
			ПройденныеВершины = Новый ТаблицаЗначений;
			ПройденныеВершины.Колонки.Добавить("Ключ");
			ПройденныеВершины.Колонки.Добавить("Значение");
			
			НоваяСтрока = ПройденныеВершины.Добавить();
			НоваяСтрока.Ключ = Элемент.Ключ;
			НоваяСтрока.Значение = -1;
			
			НомерВершины = Элемент.Ключ;
			
			РазорватьКонтуры(НомерВершины, Источники, ПройденныеВершины, ТаблицаПеремещений);
		КонецЕсли;
	КонецЦикла;
	
	// После этого таблица содержит незамкнутую последовательность перемещений. 
	// Стоимость перемещений с количеством = 0 в таблице тоже должна быть приведена к 0.
	СтСумм = Новый Структура; // структура сумм
	
	Для Каждого Строка Из ТаблицаПеремещений Цикл
		
		Если Строка.Количество=0 Тогда
			
			Для Каждого КолСумма Из МассивСумм Цикл
				СтСумм.Вставить(КолСумма, -Строка[КолСумма]);
			КонецЦикла;
			
			ДобавитьЗаписиПоПеремещению(СоотвПараметровСостояний[Строка.Источник], СоотвПараметровСостояний[Строка.Приемник], СтСумм, СтруктураДопПараметров)
			
		Иначе
			
			Приемники.Вставить(Строка.Приемник, Строка.Приемник);
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Теперь нужно выделить отдельные деревья, определить среднюю стоимость для каждого дерева, 
	// и начиная с самого начала каждого дерева последовательно рассчитать стоимость для каждого состояния/перемещения
	
	// Найдем начало каждого дерева - его нет в приемниках
	Для каждого Строка Из ТаблицаПеремещений Цикл
		
		// Анализируем только ненулевые дуги
		Если Строка.Количество<>0 Тогда
			
			// Если источника нет среди приемников, значит это начало дерева
			Если Приемники[Строка.Источник]=Неопределено Тогда
				
				ВершинаНайдена = Ложь; // признак того, что вершина уже есть в массиве
				Для Каждого НачалоДерева Из МассивНачалДеревьев Цикл
					
					// Такая вершина уже имеется в списке начал
					Если Строка.Источник = НачалоДерева Тогда
						ВершинаНайдена = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				Если НЕ ВершинаНайдена Тогда
					МассивНачалДеревьев.Добавить(Строка.Источник);
				КонецЕсли;
			
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// На данном этапе нужна информация о начальном состоянии и внешнем поступлении в каждую вершину
	
	// Будем использовать список вершин, для каждой из которых указаны смежные вершины - приемники и 
	Вершины = Новый Соответствие; // здесь нам понадобится общее количество источников, приемники
	Для Каждого Строка Из ТаблицаПеремещений Цикл
		
		Если Строка.Количество=0 Тогда
			Продолжить;
		КонецЕсли;
		
		// Обработаем источник
		ПодчСтруктура = Вершины[Строка.Источник];
		Если ПодчСтруктура=Неопределено Тогда
			ПодчСтруктура = Новый Структура("КоличествоИсточников, Приемники, КоличествоРассчитанныхВходов", 0, Новый Соответствие, 0);
		КонецЕсли;
		
		СтСумм = Новый Структура; // структура сумм
		Для Каждого КолСумма Из МассивСумм Цикл
			СтСумм.Вставить(КолСумма, Строка[КолСумма]);
		КонецЦикла;
		
		ПодчСтруктура.Приемники.Вставить(Строка.Приемник, Новый Структура("Количество, СтруктураСумм", Строка.Количество, СтСумм)); // Вместе с вершиной-приемником запоминаем количество перемещения
		
		Вершины.Вставить(Строка.Источник, ПодчСтруктура);
		
		// Обработаем приемник
		ПодчСтруктура = Вершины[Строка.Приемник];
		Если ПодчСтруктура=Неопределено Тогда
			ПодчСтруктура = Новый Структура("КоличествоИсточников, Приемники, КоличествоРассчитанныхВходов", 1, Новый Соответствие, 0);
		Иначе
			ПодчСтруктура.КоличествоИсточников = ПодчСтруктура.КоличествоИсточников+1;
		КонецЕсли;
		
		Вершины.Вставить(Строка.Приемник, ПодчСтруктура);
	КонецЦикла;
	
	// В структуру Вершины нужно добавить данные о начальном остатке и внешнем поступлении для каждого из состояний,
	// Можно также добавить состояний, не участвовавших в перемещениях, тогда для них тоже будет рассчитано внешнее списание
	МассивДобавленныеВершины = Новый Массив;
	ДобавитьНачальныйОстатокИВнешнееПоступление(ТаблицаТоваров, Вершины, СоотвПараметровСостояний, ДатаНач, ДатаКон, СтруктураДопПараметров, МассивДобавленныеВершины);
	
	// Добавдленные состояния возвращаются специальным массивом, который добавляется к началам деревьев
	Для Каждого Элемент Из МассивДобавленныеВершины Цикл
		МассивНачалДеревьев.Добавить(Элемент)
	КонецЦикла;
	
	// Теперь будем обходить деревья с начала, и рассчитывать состояния и переходы между ними
	Для Каждого НачалоДерева Из МассивНачалДеревьев Цикл
		РассчитатьПуть(НачалоДерева, Вершины, СоотвПараметровСостояний, СтруктураДопПараметров);
	КонецЦикла;
	
	// Сформируем движения по спецодежде
	ПроцедурыПогашенияСтоимости.ПогашениеСтоимостиПриПередачеВЭксплуатацию(СтруктураДопПараметров, СтруктураДопПараметров.ТаблицаСписанныхПартийСпецодежды);
	
КонецПроцедуры // СписаниеПоСредней()

// Находит контуры и разрывает их, сокращая на минимальное количество
//
// Параметры:
//	Нет.
//
Процедура РазорватьКонтуры(НомерИсхВершины, Источники, ПройденныеВершины, ТаблицаПеремещений)
	
	Приемники = Источники[НомерИсхВершины].СмежныеВершины;
	
	Для Каждого ЭлементВершина Из Приемники Цикл
		
		НомерВершины=ЭлементВершина.Ключ;
		ИндСтрокиПеремещения=ЭлементВершина.Значение;
		
		// Найдем каждую вершину-приемник в списке источников
		ПараметрыИсточника = Источники[НомерВершины];
		Если ПараметрыИсточника = Неопределено Тогда
			Продолжить; // это висячая вершина (степени 1)
		КонецЕсли;
		СмежныеВершины = ПараметрыИсточника.СмежныеВершины;
		
		// Неплохо бы запоминать уже пройденные контуры, чтобы не разбирать уже разобранные
		// Контур нужно идентифицировать последовательностью входящих в него вершин.
		
		// Проверим на замыкание
		Если ПройденныеВершины.Найти(НомерВершины,"Ключ")<> Неопределено тогда
		//Если ПройденныеВершины[НомерВершины]<>Неопределено Тогда
			
			// Контур найден: можно сокращать на мин. количество перемещения
			
			// Найдем дугу контура с мин. количеством
			
			// Начнем с текущей
			СтрокаЗамыкающая=ТаблицаПеремещений[ИндСтрокиПеремещения];
			МинКоличество=СтрокаЗамыкающая.Количество;
			ИндСтрокиСМинКоличеством = ИндСтрокиПеремещения;
			
			Инд=0;
			НачалсяКонтур = Ложь; // флаг начала контура
			Для Каждого Элемент Из ПройденныеВершины Цикл
				
				// Найдем начало контура
				НачалсяКонтур = НачалсяКонтур ИЛИ (Элемент.Ключ = НомерВершины);
				
				Если НачалсяКонтур Тогда
					Если Инд>0 Тогда // в первом элементе нет ссылки на строку
						Строка=ТаблицаПеремещений[Элемент.Значение];
						Если Строка.Количество < МинКоличество Тогда 
							МинКоличество = Строка.Количество;
							ИндСтрокиСМинКоличеством = Элемент.Значение;
						КонецЕсли;
					КонецЕсли;
					Инд=Инд+1;
				КонецЕсли;
			КонецЦикла;
			
			// Вычтем найденное минимальное количество из всех дуг контура
			
			// ... из замыкающей дуги
			СтрокаЗамыкающая.Количество = СтрокаЗамыкающая.Количество - МинКоличество;
			
			// ... из всех пройденных дуг
			Инд=0;
			НачалсяКонтур = Ложь; // флаг начала контура
			Для Каждого Элемент Из ПройденныеВершины Цикл
				
				// Найдем начало контура
				НачалсяКонтур = НачалсяКонтур ИЛИ (Элемент.Ключ = НомерВершины);
				
				Если НачалсяКонтур Тогда
					Если Инд>0 Тогда // в первом элементе нет ссылки на строку
						Строка=ТаблицаПеремещений[Элемент.Значение];
						Строка.Количество = Строка.Количество - МинКоличество;
					КонецЕсли;
					Инд=Инд+1;
				КонецЕсли;
				
			КонецЦикла;
			
			// Если контур разорван, для повторяющейся вершины процедуру не запускаем, пеерходим к следующему приемнику
			Продолжить;
			
		КонецЕсли;
		
		// Сделаем копию ПройденныеВершины и добавим пройденную вершину
//		КопияПройденныеВершины=Новый Соответствие;
		КопияПройденныеВершины =ПройденныеВершины.Скопировать();
		//Для Каждого Элемент Из ПройденныеВершины Цикл
		//	КопияПройденныеВершины.Вставить(Элемент.Ключ, Элемент.Значение);
		//КонецЦикла;
		
		НоваяСтрока = КопияПройденныеВершины.Добавить();
		НоваяСтрока.Ключ = НомерВершины;
		НоваяСтрока.Значение = ИндСтрокиПеремещения;
		
		//КопияПройденныеВершины.Вставить(НомерВершины, ИндСтрокиПеремещения);
		
		РазорватьКонтуры(НомерВершины, Источники, КопияПройденныеВершины, ТаблицаПеремещений);
		
		// Отметим, что от вершины уже строился контур, чтобы не вызывать аналогичную процедуру повторно
		Источники[НомерВершины].Пройден = Истина;
		
	КонецЦикла;
	
КонецПроцедуры // РазорватьКонтуры()

// Рассчитывает отрезки пути в состояния, в которые есть переход из данной вершины
//
// Параметры:
//	Источник - номер состояния-источника.
//	Состояния - соответствие, содержащее состояния, приемники и т.д.
//	СоотвПараметровСостояний - соответствие, содержащее параметры состояния, как они представлены в БД (измерения, счета, субконто и т.д.)
//
Процедура РассчитатьПуть(Источник, Состояния, СоотвПараметровСостояний, СтруктураДопПараметров)
	
	// Состояние в начале:
	// ............
	// ............
	
	// Расчет состояния.
	// Стоимость в состоянии складывается из:
	// Начального остатка + Внешнего прихода (определяется сразу)
	// Прихода из других состояний (входящих стрелок - оперделяется сложением стрелок)
	
	// Приход из других состояний определяем по таблице перемещений
	
	// Расчет перемещения в другие состояния
	// В каждом состоянии-приемнике КоличествоРассчитанныхВходов = КоличествоРассчитанныхВходов+1
	
	СостояниеИсточник=Состояния[Источник];
	
	СтКорректировка = Новый Структура; // структура корректировок
	СтСуммы = Новый Структура; // структура сумм в сстоянии
		
	// Состояние можно использовать в расчете, если рассчитаны все входящие стрелки
	Если СостояниеИсточник.КоличествоИсточников=СостояниеИсточник.КоличествоРассчитанныхВходов Тогда
		
		СоотвПриемники=СостояниеИсточник.Приемники; // соответствие  - примники
		
		// Рассчитаем перемещения между состояниями
		Для Каждого ЭлементПриемник Из СоотвПриемники Цикл
			
			Приемник = ЭлементПриемник.Ключ;
			Количество = ЭлементПриемник.Значение.Количество;
			
			Состояние = Состояния[Приемник];
			
			// Заполним структуру корректировки сумм
			Для Каждого ЭлементСумма Из ЭлементПриемник.Значение.СтруктураСумм Цикл
				
				Если СостояниеИсточник.Количество > Количество Тогда
					СтКорректировка.Вставить(ЭлементСумма.Ключ, Окр(СостояниеИсточник.СтруктураСумм[ЭлементСумма.Ключ]*Количество /СостояниеИсточник.Количество, 2));
				Иначе
					СтКорректировка.Вставить(ЭлементСумма.Ключ, СостояниеИсточник.СтруктураСумм[ЭлементСумма.Ключ]);
				КонецЕсли;
				
				// Суммы в новом состоянии
				СтСуммы.Вставить(ЭлементСумма.Ключ, СтКорректировка[ЭлементСумма.Ключ]);
				
				// Корректировка равна разности между правильным движением и уже выполненным движением
				СтКорректировка[ЭлементСумма.Ключ] = СтКорректировка[ЭлементСумма.Ключ] - ЭлементСумма.Значение;
				
			КонецЦикла;
			
			// Теперь можно сформировать записи по перемещению между состояниями
			// Передаем разницу между первоначальным движением и рассчитанным
			ДобавитьЗаписиПоПеремещению(СоотвПараметровСостояний[Источник], СоотвПараметровСостояний[Приемник], СтКорректировка, СтруктураДопПараметров);
			
			// Поступление в состояние
			Состояние.Количество = Состояние.Количество + Количество;
			СостояниеИсточник.Количество = СостояниеИсточник.Количество - Количество;
			
			// Поступление в состояние: добавим суммы
			Для Каждого ЭлементСумма Из СтСуммы Цикл
				
				Состояние.СтруктураСумм[ЭлементСумма.Ключ]         = Состояние.СтруктураСумм[ЭлементСумма.Ключ]         + ЭлементСумма.Значение;
				СостояниеИсточник.СтруктураСумм[ЭлементСумма.Ключ] = СостояниеИсточник.СтруктураСумм[ЭлементСумма.Ключ] - ЭлементСумма.Значение;
				
			КонецЦикла;
			
			Состояние.КоличествоРассчитанныхВходов = Состояние.КоличествоРассчитанныхВходов+1;
			
			// Расчет пути из этой точки
			РассчитатьПуть(Приемник, Состояния, СоотвПараметровСостояний, СтруктураДопПараметров);
			
		КонецЦикла;
		
		// Остаток в состоянии после перемещений: суммы
		СтОстаток = Новый Структура;
		Для Каждого ЭлементСумма Из СостояниеИсточник.СтруктураСумм Цикл
			СтОстаток.Вставить(ЭлементСумма.Ключ, ЭлементСумма.Значение);
		КонецЦикла;
		
		// Теперь можем рассчитать внешние выходы:
		// сформируем записи по внешнему списанию из состояния Источник
		ДобавитьЗаписиПоВнешнемуСписанию(СоотвПараметровСостояний[Источник], СостояниеИсточник.Количество, СтОстаток, СтруктураДопПараметров);
		
		// Все выходы из данного состояния рассчитаны.
		
	КонецЕсли;
	
КонецПроцедуры // РассчитатьПуть()

////////////////////////////////////////////////////////////////////////////////
// Процедуры списания по-средней, зависящие от структуры данных конфигурации


Функция ПолучитьМассивИсключаемыхСчетов()
	МассивСчетов = Новый Массив();
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ТараПодТоваромИПорожняя);
	МассивСчетов.Добавить(ПланыСчетов.Налоговый.ТараПодТоваромИПорожняя);
	МассивСчетов.Добавить(ПланыСчетов.Международный.Тара);
	
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ТоварыНаСкладе);
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ТоварыПереданныеНаКомиссию);
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ПереданныеОбъектыНедвижимости);
	
	МассивСчетов.Добавить(ПланыСчетов.Налоговый.ТоварыНаСкладе);
	МассивСчетов.Добавить(ПланыСчетов.Налоговый.ТоварыПереданныеНаКомиссию);
	МассивСчетов.Добавить(ПланыСчетов.Налоговый.ПереданныеОбъектыНедвижимости);
	
	Возврат МассивСчетов;
КонецФункции	

Функция ПолучитьМассивИсключаемыхСтатусовПартий()
	МассивСтатусовПартий = Новый Массив();
	
	МассивСтатусовПартий.Добавить(Перечисления.СтатусыПартийТоваров.НаКомиссию);
	МассивСтатусовПартий.Добавить(Перечисления.СтатусыПартийТоваров.ВозвратнаяТара);
	
	Возврат МассивСтатусовПартий;
КонецФункции	

Процедура ДобавитьВЗапросОтборПоКодуОперации(ЗапросНачОстПлюсПриход)
	ЗапросНачОстПлюсПриход.Текст = СтрЗаменить(ЗапросНачОстПлюсПриход.Текст,"Номенклатура В (&МассивНоменклатуры)","Номенклатура В (&МассивНоменклатуры) И (НЕ СтатусПартии В (&ИсключаемыеСтатусыПартий))");
	ЗапросНачОстПлюсПриход.УстановитьПараметр("ИсключаемыеСтатусыПартий",ПолучитьМассивИсключаемыхСтатусовПартий());
КонецПроцедуры	

Процедура ДобавитьВЗапросОтборПоСчету(ЗапросНачОстПлюсПриход)
	ЗапросНачОстПлюсПриход.Текст = СтрЗаменить(ЗапросНачОстПлюсПриход.Текст,"Номенклатура В (&МассивНоменклатуры)","Номенклатура В (&МассивНоменклатуры) И (НЕ СчетУчета В (&СписокИсключаемыхСчетовУчета))");
	ЗапросНачОстПлюсПриход.УстановитьПараметр("СписокИсключаемыхСчетовУчета",ПолучитьМассивИсключаемыхСчетов());
КонецПроцедуры	

Функция ДобавитьОтборПоВидуУчета(ИмяТаблицы,Учет)
	Если Учет = "Упр" Тогда
		Возврат "И " + ИмяТаблицы + ".ОтражатьВУправленческомУчете";
	ИначеЕсли Учет = "Бух" Тогда	
		Возврат "И " + ИмяТаблицы + ".ОтражатьВБухгалтерскомУчете";
	ИначеЕсли Учет = "Нал" Тогда	
		Возврат "И " + ИмяТаблицы + ".ОтражатьВНалоговомУчете";
	ИначеЕсли Учет = "Меж" Тогда	
		Возврат "И " + ИмяТаблицы + ".ОтражатьВМеждународномУчете";		
	Иначе
		Возврат "";
	КонецЕсли;
КонецФункции	

// Возвращает таблицу перемещений товаров между состояниями
// Зависит от конкретной структуры данных конфигурации
//
// Параметры:
//	Нет.
//
Функция ПолучитьТаблицуПеремещений(ТаблицаТоваров, ДатаНач, ДатаКон, ПрефиксПараметровНовогоСостояния, СтруктураДопПараметров)
	
	Таб = Новый ТаблицаЗначений;
	
	// Если таблица товаров не задана, перемещений нет
	Если ТаблицаТоваров.Количество()=0 Тогда
		Возврат Таб;
	КонецЕсли;
	
	// Из структуры доп параметров добудем дополнительные параметры
	Учет = СтруктураДопПараметров.Учет;
	
	//Состояния в УПП:
	// Номенклатура
	// ХарактеристикаНоменклатуры
	// СерияНоменклатуры
	// СтатусПартии (у)
	// СчетУчета (б)
	// Организация (б)
	// ДокументОприходования
	// Качество
	// Склад
	// Заказ
	
	// Перемещения между состояниями в УПП записываются в регистры ПартииТоваровНаСкладах и ПартииТоваровПереданные
	СтруктураИзмерений=Новый Структура;
	
	ИмяРегистра = СтруктураДопПараметров.ИмяРегистраСклад;
	СтруктураИзмерений.Вставить(ИмяРегистра, Новый Массив);
	Для Каждого Изм Из Метаданные.РегистрыНакопления[ИмяРегистра].Измерения Цикл
		СтруктураИзмерений[ИмяРегистра].Добавить(Изм.Имя);
	КонецЦикла;
	
	ИмяРегистра = СтруктураДопПараметров.ИмяРегистраПереданные;
	СтруктураИзмерений.Вставить(ИмяРегистра, Новый Массив);
	Для Каждого Изм Из Метаданные.РегистрыНакопления[ИмяРегистра].Измерения Цикл
		СтруктураИзмерений[ИмяРегистра].Добавить(Изм.Имя);
	КонецЦикла;
	
	Если СтруктураДопПараметров.Свойство("ИмяРегистраВЭксплуатации") Тогда
		ИмяРегистра = СтруктураДопПараметров.ИмяРегистраВЭксплуатации;
		СтруктураИзмерений.Вставить(ИмяРегистра, Новый Массив);
		Для Каждого Изм Из Метаданные.РегистрыНакопления[ИмяРегистра].Измерения Цикл
			СтруктураИзмерений[ИмяРегистра].Добавить(Изм.Имя);
		КонецЦикла;
	КонецЕсли;
	
	КодыОперацийПеремещенияСклад = Новый Массив;
	КодыОперацийПеремещенияСклад.Добавить(Перечисления.КодыОперацийПартииТоваров.ПеремещениеМеждуСкладами);
	КодыОперацийПеремещенияСклад.Добавить(Перечисления.КодыОперацийПартииТоваров.КорректировкаСерийИХарактеристик);
	КодыОперацийПеремещенияСклад.Добавить(Перечисления.КодыОперацийПартииТоваров.КорректировкаКачества);
	КодыОперацийПеремещенияСклад.Добавить(Перечисления.КодыОперацийПартииТоваров.РезервированиеПодЗаказ);
	КодыОперацийПеремещенияСклад.Добавить(Перечисления.КодыОперацийПартииТоваров.СнятиеРезерваПодЗаказ);
	
	КодыОперацийПередача = Новый Массив;
	КодыОперацийПередача.Добавить(Перечисления.КодыОперацийПартииТоваров.ПередачаНаКомиссию);
	КодыОперацийПередача.Добавить(Перечисления.КодыОперацийПартииТоваров.ПередачаТарыКонтрагенту);
	КодыОперацийПередача.Добавить(Перечисления.КодыОперацийПартииТоваров.ПередачаВПереработку);
	
	КодыОперацийВозвратПереданных = Новый Массив;
	КодыОперацийВозвратПереданных.Добавить(Перечисления.КодыОперацийПартииТоваров.ВозвратОтКомиссионера);
	КодыОперацийВозвратПереданных.Добавить(Перечисления.КодыОперацийПартииТоваров.ВозвратТарыОтКонтрагента);
	КодыОперацийВозвратПереданных.Добавить(Перечисления.КодыОперацийПартииТоваров.ВозвратОтПереработчика);
	
	КодыОперацийПеремещенияВЭксплуатации = Новый Массив;
	КодыОперацийПеремещенияВЭксплуатации.Добавить(Перечисления.КодыОперацийПартииМатериаловВЭксплуатации.ПеремещениеВЭксплуатации);
	
	КодыОперацийПередачаВЭксплуатацию = Новый Массив;
	КодыОперацийПередачаВЭксплуатацию.Добавить(Перечисления.КодыОперацийПартииТоваров.ПередачаМатериаловВЭксплуатацию);
	
	КодыОперацийВозвратИзЭксплуатации = Новый Массив;
	//Возврат обслуживается производственным учетом
	//КодыОперацийВозвратИзЭксплуатации.Добавить(Перечисления.КодыОперацийПартииМатериаловВЭксплуатации.ВозвратИзЭксплуатации);
	
	КодыОперацийПустойМассив = Новый Массив;
		
	СтруктураВсехИзмерений= Новый Структура; // содержит все измерения
	
	Для Каждого Элемент Из СтруктураИзмерений Цикл
		Для Каждого Измерение Из Элемент.Значение Цикл
			
			// Вставляем сразу два поля - источник и приемник
			СтруктураВсехИзмерений.Вставить(Измерение);
			СтруктураВсехИзмерений.Вставить(Измерение+ПрефиксПараметровНовогоСостояния);
			
		КонецЦикла;
	КонецЦикла;
	// В соответствии с метаданными регистров генерируется текст запроса
	ПараметрыОтбораТоваров=Новый Массив;
	
	Запрос = Новый Запрос;
	
	// Для налогового учета процедура может быть использована для расчета постоянных и временных разниц
	ДопРесурсы = "";
	Если Учет = "Нал" Тогда
		
		ДопРесурсы = ", Источник.ПостояннаяРазница КАК ПостояннаяРазница, Источник.ВременнаяРазница КАК ВременнаяРазница";
		ДопАгрегРесурсы = ", СУММА(ПостояннаяРазница) КАК ПостояннаяРазница, СУММА(ВременнаяРазница) КАК ВременнаяРазница";
	КонецЕсли;
	
	// Заполним структуры измерений в соответствии с метаданными регистров:
	// Если в учете перемешений товаров могут участвовать n регистров, запрос будет состоять
	// из объединения n запросов, в каждом из которых используются n+1 таблица регистра 
	// (таблица i-го регистра, соединеная с таблицами всех регистров)
	ТекстОбщий="";
	Сч=1;
	Инд=0;
	Для Каждого Элемент Из СтруктураИзмерений Цикл
		
		Для Каждого ПодчЭлемент Из СтруктураИзмерений Цикл
			
			Текст="";
			
			// Условия отбора по ТаблицаТоваров
			ТекстОтборТоваров="";
			
			// Занулим значения измерений
			Для Каждого ЭлементИзмерение Из СтруктураВсехИзмерений Цикл
				СтруктураВсехИзмерений[ЭлементИзмерение.Ключ] = "NULL";
			КонецЦикла;
			
			// Откуда
			Для Каждого Измерение Из Элемент.Значение Цикл
				СтруктураВсехИзмерений[Измерение]="Источник."+Измерение;
				
				// Заполним отбор - только по тем полям, которые совпадают
				Если ТаблицаТоваров.Колонки.Найти(Измерение) <> Неопределено Тогда
					
					Если Измерение = "СчетУчета" Тогда
						
						Продолжить;
						
					КонецЕсли; 
					
					ПараметрыОтбораТоваров.Добавить(Измерение);
					
					ТекстОтборТоваров=ТекстОтборТоваров+" И Источник."+ Измерение+" В (&Массив"+Измерение+")";
					
					Запрос.УстановитьПараметр("Массив"+Измерение, ТаблицаТоваров.ВыгрузитьКолонку(Измерение));
					
				КонецЕсли;
			КонецЦикла;
			
			// Если таблица такая, что все ее колонки не совпадают с измерениями, то ничего не выбираем
			Если ТекстОтборТоваров="" Тогда
				Возврат Таб;
			КонецЕсли;
			
			// Куда - через соединения
			ТекстСоединения="";
			Для Каждого Измерение Из ПодчЭлемент.Значение Цикл
				СтруктураВсехИзмерений[Измерение+ПрефиксПараметровНовогоСостояния]="Приемник."+Измерение;
			КонецЦикла;;
			
			Для каждого ЭлементИзмерение Из СтруктураВсехИзмерений Цикл
				Текст=Текст+", " + Символы.ПС + Символы.Таб + ЭлементИзмерение.Значение + " КАК " + ЭлементИзмерение.Ключ;
			КонецЦикла;
			
			// Если  таблицы - одинаковые, нужно вставить условие на неравенство полей
			// Добавим условие на неравенство текущего и нового состояния
			ТекстУсловияНаНеравенствоПолей = "";
			
			Если Элемент.Ключ = ПодчЭлемент.Ключ Тогда
				Для Каждого ИмяПоля Из ПодчЭлемент.Значение Цикл
					
					ТекстУсловияНаНеравенствоПолей=ТекстУсловияНаНеравенствоПолей+
					Символы.ПС + "ИЛИ Источник." + ИмяПоля + " <> Приемник." + ИмяПоля;
				КонецЦикла;
				
				ТекстУсловияНаНеравенствоПолей = "И ( " + Сред(ТекстУсловияНаНеравенствоПолей, 5) + " )";
			КонецЕсли;
			
			Текст="
			|ОБЪЕДИНИТЬ ВСЕ 
			|ВЫБРАТЬ "+Сред(Текст+", Источник.Количество КАК Количество, Источник.Стоимость КАК Стоимость, Источник.Период КАК Период" + ДопРесурсы, 2) + "
			|	ИЗ РегистрНакопления."+Элемент.Ключ+" КАК Источник
			|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления."+ ПодчЭлемент.Ключ +" КАК Приемник
			|	ПО Источник.Регистратор = Приемник.Регистратор
			|	И Источник.НомерКорСтроки = Приемник.НомерСтроки 
			|	И Источник.КодОперации В (&КодыОпераций"+Инд+")" + "
			|ГДЕ
			|	Источник.Период МЕЖДУ &ДатаНач И &ДатаКон И
			|	Источник.ВидДвижения = &ВидДвиженияРасход 
			|" + ТекстУсловияНаНеравенствоПолей + ТекстОтборТоваров; // Количество при перемещении обязательно должно совпадать
			
			Если Учет = "Бух" ИЛИ Учет = "Нал" ИЛИ Учет = "Меж" Тогда
				Текст = Текст  + "
				|	И (НЕ Источник.СчетУчета В (&СписокИсключаемыхСчетовУчета))
				|	И Источник.Организация = &Организация";
			ИначеЕсли Учет = "Упр"  И Элемент.Ключ <> СтруктураДопПараметров.ИмяРегистраВЭксплуатации Тогда
				Текст = Текст  + "
				|	И (НЕ Источник.СтатусПартии В (&ИсключаемыеСтатусыПартий))";
			КонецЕсли;	
			
			ТекстОбщий = ТекстОбщий+Текст;
			
			Инд=Инд+1;
		КонецЦикла;
	КонецЦикла;
	
	ТекстПоля = "";
	Для каждого ЭлементИзмерение Из СтруктураВсехИзмерений Цикл
		ТекстПоля=ТекстПоля + ", 
		|	"+ЭлементИзмерение.Ключ;
	КонецЦикла;
	
	
	
	ТекстПоляРесурсы = ", СУММА(Количество) КАК Количество, СУММА(Стоимость) КАК Стоимость" + ДопАгрегРесурсы;
	ТекстЗапроса = "ВЫБРАТЬ "+Сред(ТекстПоля+ТекстПоляРесурсы, 2)+" ИЗ(" + Сред(ТекстОбщий, 16) + ") КАК Подзапрос
	//|" + ТекстУсловияНаНеравенствоПолей +"
	|СГРУППИРОВАТЬ ПО "+ Сред(ТекстПоля, 2)+"
	|УПОРЯДОЧИТЬ ПО МИНИМУМ(Подзапрос.Период) "; // Перемещения будут следовать в порядке дат первых движений
	
	
	Запрос.Текст = ТекстЗапроса;
	
	//Запрос.УстановитьПараметр("КодыОпераций0", КодыОперацийПеремещенияСклад);
	//Запрос.УстановитьПараметр("КодыОпераций1", КодыОперацийПередача);
	//Запрос.УстановитьПараметр("КодыОпераций2", КодыОперацийВозвратПереданных);
	//Запрос.УстановитьПараметр("КодыОпераций3", КодыОперацийПеремещенияПереданные);
	
	Запрос.УстановитьПараметр("КодыОпераций0", КодыОперацийПеремещенияСклад); 
	Запрос.УстановитьПараметр("КодыОпераций1", КодыОперацийПередача);
	Запрос.УстановитьПараметр("КодыОпераций2", КодыОперацийПередачаВЭксплуатацию);
	Запрос.УстановитьПараметр("КодыОпераций3", КодыОперацийВозвратПереданных);
	Запрос.УстановитьПараметр("КодыОпераций4", КодыОперацийПустойМассив);//Перемещение внутри товаров переданных на комиссию
	Запрос.УстановитьПараметр("КодыОпераций5", КодыОперацийПустойМассив);//Перемещение из переданных на комиссию в эксплуатацию
	Запрос.УстановитьПараметр("КодыОпераций6", КодыОперацийВозвратИзЭксплуатации);
	Запрос.УстановитьПараметр("КодыОпераций7", КодыОперацийПустойМассив);//Перемещение из эксплуатации на комиссию
	Запрос.УстановитьПараметр("КодыОпераций8", КодыОперацийПеремещенияВЭксплуатации);
	
	Запрос.УстановитьПараметр("ВидДвиженияРасход", ВидДвиженияНакопления.Расход);
	Запрос.УстановитьПараметр("ДатаНач", ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон", ДатаКон);
	Запрос.УстановитьПараметр("Организация", СтруктураДопПараметров.Организация);
	Запрос.УстановитьПараметр("СписокИсключаемыхСчетовУчета", ПолучитьМассивИсключаемыхСчетов());
	Запрос.УстановитьПараметр("ИсключаемыеСтатусыПартий",ПолучитьМассивИсключаемыхСтатусовПартий());
	
	Таб=Запрос.Выполнить().Выгрузить();
	
	// Удалим из таблицы строки, не соответствующие таблице товаров (если в ней есть несколько строк, то в запросе могут быть 
	// другие комбинации значений в разных колонках)
	СтруктураОтбора = Новый Структура;
	Если ТаблицаТоваров.Количество()>1 Тогда
		Инд=0;
		Пока Инд < Таб.Количество() Цикл;
			Строка = Таб[Инд];
			
			Для каждого Параметр Из ПараметрыОтбораТоваров Цикл
				СтруктураОтбора.Вставить(Параметр, Строка[Параметр]);
			КонецЦикла;
			
			Если ТаблицаТоваров.НайтиСтроки(СтруктураОтбора).Количество()=0 Тогда
				Таб.Удалить(Строка);
			Иначе
				Инд=Инд+1;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Таб;
	
КонецФункции // ПолучитьТаблицуПеремещений()

// Добавляет данные о начальном остатке и внешнем поступлении в состояниях
//
// Параметры:
//	Нет.
//
Процедура ДобавитьНачальныйОстатокИВнешнееПоступление(ТаблицаТоваров, Состояния, СоотвПараметровСостояний, ДатаНач, ДатаКон, СтруктураДопПараметров, МассивДобавляемыхВершин)
	
	// Из структуры доп параметров получим дополнительные параметры
	
	// Запросом получим данные об остатках в состояниях на начало периода
	КодыОпераций = Перечисления.КодыОперацийПартииТоваров;
	
	МассивНоменклатуры  = Неопределено;
	
	ТабПартий = Неопределено;
	
	МассивСумм = Неопределено; // список суммовых ресурсов, списываемых пропорционально количеству
	СтруктураДопПараметров.Свойство("МассивСумм", МассивСумм);
	
	Если ТипЗнч(МассивСумм) <> Тип("Массив") Тогда
		МассивСумм = Новый Массив;
		МассивСумм.Добавить("Стоимость");
	КонецЕсли;
	
	ЗапросНачОстПлюсПриход = Новый Запрос;
	ЗапросНачОстПлюсПриход.УстановитьПараметр("ВидДвиженияПриход", ВидДвиженияНакопления.Приход);
	ЗапросНачОстПлюсПриход.УстановитьПараметр("ВидДвиженияРасход", ВидДвиженияНакопления.Расход);
	ЗапросНачОстПлюсПриход.УстановитьПараметр("ДатаНач", ДатаНач);
	ЗапросНачОстПлюсПриход.УстановитьПараметр("ДатаКон", ДатаКон);
	
	// Массив для отбора товаров в запросе
	ИндСостояния=0;
	
	// Добавим номенклатуру из общего списка
	МассивНоменклатуры = ТаблицаТоваров.ВыгрузитьКолонку("Номенклатура");

	МассивНоменклатуры = ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(МассивНоменклатуры);
	
	// Из структуры доп параметров добудем дополнительные параметры
	Учет = СтруктураДопПараметров.Учет;
	
	ИмяРегистра = СтруктураДопПараметров.ИмяРегистраСклад;
	
	ИмяРегистраПеред = СтруктураДопПараметров.ИмяРегистраПереданные;
	
	// Товары на складах
	Если Учет = "Упр" Тогда
		
		ЗаполнитьЗапросНачОстПлюсПриходУпр(ЗапросНачОстПлюсПриход);
		ДобавитьВЗапросОтборПоКодуОперации(ЗапросНачОстПлюсПриход);
		
	ИначеЕсли Учет = "Бух" Тогда
		
		ЗаполнитьЗапросНачОстПлюсПриходБух(ЗапросНачОстПлюсПриход);
		ДобавитьВЗапросОтборПоСчету(ЗапросНачОстПлюсПриход);
		
	ИначеЕсли Учет = "Нал" Тогда
		
		ЗаполнитьЗапросНачОстПлюсПриходНал(ЗапросНачОстПлюсПриход);
		ДобавитьВЗапросОтборПоСчету(ЗапросНачОстПлюсПриход);
		
	ИначеЕсли Учет = "Меж" Тогда
		
		ЗаполнитьЗапросНачОстПлюсПриходМеж(ЗапросНачОстПлюсПриход);
		ДобавитьВЗапросОтборПоСчету(ЗапросНачОстПлюсПриход);
		
	КонецЕсли;
	
	ЗапросНачОстПлюсПриход.УстановитьПараметр("МассивНоменклатуры", МассивНоменклатуры);
	
	// Коды операций выбираемых в запросе движений (внешнего поступления)
	СписокКодов = Новый Массив;
	СписокКодов.Добавить(КодыОпераций.Поступление);
	СписокКодов.Добавить(КодыОпераций.ПоступлениеВПереработку);
	СписокКодов.Добавить(КодыОпераций.ВозвратМатериаловИзПроизводстваФикс);
	СписокКодов.Добавить(КодыОпераций.ВозвратМатериаловИзПроизводстваРасч);
	СписокКодов.Добавить(КодыОпераций.ВозвратОтПокупателя);
	СписокКодов.Добавить(КодыОпераций.ВозвратПродукцииИзПроизводстваФикс);
	СписокКодов.Добавить(КодыОпераций.ВыпускПродукцииФиксНаСклад);
	СписокКодов.Добавить(КодыОпераций.ПоступлениеДопРасходов);
	СписокКодов.Добавить(КодыОпераций.ПоступлениеОборудования);
	СписокКодов.Добавить(КодыОпераций.ВыпускПоОперацииСтоимость);
	СписокКодов.Добавить(КодыОпераций.ВозвратТарыОтКонтрагента);
	СписокКодов.Добавить(КодыОпераций.ВозвратМатериаловИзЭксплуатации);
	СписокКодов.Добавить(КодыОпераций.Оприходование);
	СписокКодов.Добавить(КодыОпераций.ВключениеАктиваВСоставМПЗ);
	СписокКодов.Добавить(КодыОпераций.ВключениеНДСВСтоимость);
	
	
	Если СтруктураДопПараметров.Свойство("КорректироватьКомплектыПродукции") тогда
		СписокКодов.Добавить(КодыОпераций.Комплектация);
	КонецЕсли;
	
	// Добавляем коды исключаемого расхода:
	
	// Вычитаем списание по возврату поставщику: оно не должно корректироваться
	СписокКодов.Добавить(КодыОпераций.ВозвратПоставщику);
	
	Если СтруктураДопПараметров.ВстречныйВыпуск Тогда
	
		// вычитаем встречный выпуск
		ЗапросНачОстПлюсПриход.Текст = СтрЗаменить(ЗапросНачОстПлюсПриход.Текст, "ПартииПриход.КодОперации В(&СписокКодов)",
			"(ПартииПриход.КодОперации В(&СписокКодов)
			|ИЛИ ( 1 В
			|	(ВЫБРАТЬ Первые 1
			|		1
			|	ИЗ
			|		РегистрСведений.КорректировкаВстречногоВыпускаПродукции КАК КорректировкаВстречногоВыпускаПродукции
			|	ГДЕ
			|		ПартииПриход.НомерСтрокиСписанныхТоваров = КорректировкаВстречногоВыпускаПродукции.НомерСтрокиСписанныхТоваров
			|		И ПартииПриход.Регистратор = КорректировкаВстречногоВыпускаПродукции.Документ			
			|		" + ДобавитьОтборПоВидуУчета("КорректировкаВстречногоВыпускаПродукции",Учет) + "
			|	Объединить
			|
			|	ВЫБРАТЬ Первые 1
			|		1
			|	ИЗ
			|		РегистрСведений.КорректировкаВстречногоВыпускаПродукции КАК КорректировкаВстречногоВыпускаПродукции
			|	ГДЕ
			|		ПартииПриход.НомерСтрокиСписанныхТоваров = КорректировкаВстречногоВыпускаПродукции.НомерСтрокиСписанныхТоваров
			|		И КорректировкаВстречногоВыпускаПродукции.ОтражатьВУправленческомУчете
			|		И ПартииПриход.ДокументДвижения = КорректировкаВстречногоВыпускаПродукции.Документ
			|		И ПартииПриход.Период = &Период
			//|		И ПартииПриход.КодОперации = &СписаниеПартийВПроизводствоОперативно
			//|		" + ДобавитьОтборПоВидуУчета("КорректировкаВстречногоВыпускаПродукции",Учет) + "
			|
			|)))");
		// В одной секунде может быть записано несколько документов "Расчет себестоимости"
		// Запись в регистр "КорректировкаВстречногоВыпускаПродукции" сделает только один документ
		Если Учет = "Бух" Тогда
			ЗапросНачОстПлюсПриход.Текст = СтрЗаменить(ЗапросНачОстПлюсПриход.Текст, 
										   "КорректировкаВстречногоВыпускаПродукции.ОтражатьВУправленческомУчете",
										   "КорректировкаВстречногоВыпускаПродукции.ОтражатьВБухгалтерскомУчете");
		ИначеЕсли Учет = "Нал" Тогда
			ЗапросНачОстПлюсПриход.Текст = СтрЗаменить(ЗапросНачОстПлюсПриход.Текст, 
										   "КорректировкаВстречногоВыпускаПродукции.ОтражатьВУправленческомУчете",
										   "КорректировкаВстречногоВыпускаПродукции.ОтражатьВНалоговомУчете");
		ИначеЕсли Учет = "Меж" Тогда
			ЗапросНачОстПлюсПриход.Текст = СтрЗаменить(ЗапросНачОстПлюсПриход.Текст, 
										   "КорректировкаВстречногоВыпускаПродукции.ОтражатьВУправленческомУчете",
										   "КорректировкаВстречногоВыпускаПродукции.ОтражатьВМеждународномУчете");
		КонецЕсли;
			
		ЗапросНачОстПлюсПриход.УстановитьПараметр("СписаниеПартийВПроизводствоОперативно",КодыОпераций.СписаниеПартийВПроизводствоОперативно);
		ЗапросНачОстПлюсПриход.УстановитьПараметр("Период",СтруктураДопПараметров.Период);
		
	КонецЕсли;
	
	ЗапросНачОстПлюсПриход.УстановитьПараметр("СписокКодов", СписокКодов);
	
	ТабПартий = ЗапросНачОстПлюсПриход.Выполнить().Выгрузить();
	ТабПартий.Колонки.Добавить("Найдена", Новый ОписаниеТипов("Булево"));
	
	Для Каждого Состояние Из Состояния Цикл
		
		// Это параметры (значения измерений, счетов, субконто и т.д.), которые имеет состояние
		ПараметрыСостояния = СоотвПараметровСостояний[Состояние.Ключ];
		
		Количество=0;
		СтруктураСумм = Новый Структура; // структура, хранящая суммы
		
		// Заполнение сумм
		Для Каждого ЭлементСумма Из МассивСумм Цикл
			СтруктураСумм.Вставить(ЭлементСумма, 0);
		КонецЦикла;
		
		// Тут должны определяться КолНачОст + КолПриход (внеш), СумНачОст + СумПриход(внеш) по данным из базы
		Парам=Новый Структура;
		Для Каждого Колонка Из ТабПартий.Колонки Цикл
			Если ПараметрыСостояния.Свойство(Колонка.Имя) Тогда
				
				// Не используем постоянные и временные разницы
				Если Колонка.Имя = "ПостояннаяРазница" 
					 ИЛИ Колонка.Имя = "ВременнаяРазница" тогда
					
					Продолжить;
				КонецЕсли;
				
				Парам.Вставить(Колонка.Имя, ПараметрыСостояния[Колонка.Имя]);
				
			КонецЕсли;
		КонецЦикла;
		
		// Не используем колонки со значениями ресурсов в состоянии (например, Стоимость)
		Для Каждого ЭлементСумма Из МассивСумм Цикл
			Если Парам.Свойство(ЭлементСумма) Тогда
				Парам.Удалить(ЭлементСумма);
			КонецЕсли;
		КонецЦикла;
		
		НайдСтроки=ТабПартий.НайтиСтроки(Парам);

		Для Каждого СтрокаПартии Из НайдСтроки Цикл
			Количество = Количество + СтрокаПартии.Количество;
			
			// Заполнение сумм
			Для Каждого ЭлементСумма Из МассивСумм Цикл
				СтруктураСумм.Вставить(ЭлементСумма, СтруктураСумм[ЭлементСумма] + СтрокаПартии[ЭлементСумма]);
			КонецЦикла;
			
			СтрокаПартии.Найдена = Истина;
		КонецЦикла;
		
		Состояние.Значение.Вставить("Количество", Количество);
		
		Состояние.Значение.Вставить("СтруктураСумм", СтруктураСумм);
	КонецЦикла;
	
	// Теперь добавим состояния не участвующие в перемещениях (обособленные вершины) - тем, 
	//по которым не было перемещений, чтобы по ним внешнее списание рассчиталось той же процедурой, что и для перемещений
	ИндСостояния = СоотвПараметровСостояний.Количество();
	Для Каждого СтрокаТаблицы Из ТабПартий Цикл
		Если НЕ СтрокаТаблицы.Найдена Тогда
			
			СтруктураСумм = Новый Структура; // структура, хранящая суммы
			
			Количество = СтрокаТаблицы.Количество;
			
			// Заполнение сумм
			Для Каждого ЭлементСумма Из МассивСумм Цикл
				СтруктураСумм.Вставить(ЭлементСумма, СтрокаТаблицы[ЭлементСумма]);
			КонецЦикла;
					   
			ИндСостояния=ИндСостояния+1;
			
			// Добавим состояние со всеми необходимыми параметрами
			Состояния.Вставить(ИндСостояния, 
			Новый Структура("КоличествоИсточников, КоличествоРассчитанныхВходов, Приемники, Количество, СтруктураСумм", 0, 0, Новый Соответствие, Количество, СтруктураСумм));
			
			Если Учет = "Упр" Тогда
				
				СоотвПараметровСостояний.Вставить(ИндСостояния, 
				Новый Структура("Номенклатура, ХарактеристикаНоменклатуры, СерияНоменклатуры, ДокументОприходования, СтатусПартии, Склад, Заказ, ДоговорКонтрагента, ДокументПередачи, СтатусПередачи, Качество, Организация, Подразделение, ФизЛицо, НазначениеИспользования", 
				СтрокаТаблицы.Номенклатура, 
				СтрокаТаблицы.ХарактеристикаНоменклатуры, 
				СтрокаТаблицы.СерияНоменклатуры, 
				СтрокаТаблицы.ДокументОприходования,
				СтрокаТаблицы.СтатусПартии,
				СтрокаТаблицы.Склад,
				СтрокаТаблицы.Заказ,
				СтрокаТаблицы.ДоговорКонтрагента,
				СтрокаТаблицы.ДокументПередачи,
				СтрокаТаблицы.СтатусПередачи,
				СтрокаТаблицы.Качество,
				СтрокаТаблицы.Организация,
				СтрокаТаблицы.Подразделение,
				СтрокаТаблицы.ФизЛицо,
				СтрокаТаблицы.НазначениеИспользования));
				
			ИначеЕсли Учет = "Меж" Тогда	
				
				//В международном учете стоимость спецодежды не корректируется
				
				СоотвПараметровСостояний.Вставить(ИндСостояния, 
				Новый Структура("Номенклатура, ХарактеристикаНоменклатуры, СерияНоменклатуры, ДокументОприходования, СчетУчета, Организация, Склад, Заказ, ДоговорКонтрагента, ДокументПередачи, Качество", 
				СтрокаТаблицы.Номенклатура, 
				СтрокаТаблицы.ХарактеристикаНоменклатуры, 
				СтрокаТаблицы.СерияНоменклатуры, 
				СтрокаТаблицы.ДокументОприходования,
				СтрокаТаблицы.СчетУчета,
				СтрокаТаблицы.Организация,
				СтрокаТаблицы.Склад,
				СтрокаТаблицы.Заказ,
				СтрокаТаблицы.ДоговорКонтрагента,
				СтрокаТаблицы.ДокументПередачи,
				СтрокаТаблицы.Качество));
				
			Иначе
				//Если 
				//Учет = "Бух" 
				//ИЛИ 
				//Учет = "Нал" 
				//ИЛИ 
				//Учет = "Меж" 
				//Тогда
				
				СоотвПараметровСостояний.Вставить(ИндСостояния, 
				Новый Структура("Номенклатура, ХарактеристикаНоменклатуры, СерияНоменклатуры, ДокументОприходования, СчетУчета, Организация, Склад, Заказ, ДоговорКонтрагента, ДокументПередачи, Качество, Подразделение, ФизЛицо, НазначениеИспользования", 
				СтрокаТаблицы.Номенклатура, 
				СтрокаТаблицы.ХарактеристикаНоменклатуры, 
				СтрокаТаблицы.СерияНоменклатуры, 
				СтрокаТаблицы.ДокументОприходования,
				СтрокаТаблицы.СчетУчета,
				СтрокаТаблицы.Организация,
				СтрокаТаблицы.Склад,
				СтрокаТаблицы.Заказ,
				СтрокаТаблицы.ДоговорКонтрагента,
				СтрокаТаблицы.ДокументПередачи,
				СтрокаТаблицы.Качество,
				СтрокаТаблицы.Подразделение,
				СтрокаТаблицы.ФизЛицо,
				СтрокаТаблицы.НазначениеИспользования));
			КонецЕсли;
			
			МассивДобавляемыхВершин.Добавить(ИндСостояния);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ДобавитьНачальныйОстатокИВнешнееПоступление()

// Заполняет текст запроса, выбирающего остаток и поступление по упр учету
//
// Параметры:
//	Нет.
//
Процедура ЗаполнитьЗапросНачОстПлюсПриходУпр(ЗапросНачОстПлюсПриход)
	
	Текст = 
	// Партии на складах
	"ВЫБРАТЬ
	|	ОстПлюсПрих.Номенклатура,
	|	ОстПлюсПрих.ХарактеристикаНоменклатуры,
	|	ОстПлюсПрих.СерияНоменклатуры,
	|	ОстПлюсПрих.ДокументОприходования,
	|	ОстПлюсПрих.Склад,
	|	ОстПлюсПрих.Заказ,
	|	ОстПлюсПрих.Качество,
	|	NULL КАК ДоговорКонтрагента,
	|	NULL КАК ДокументПередачи,
	|	ОстПлюсПрих.СтатусПартии,
	|	NULL КАК СтатусПередачи,
	|	СУММА(ОстПлюсПрих.Количество) КАК Количество,
	|	СУММА(ОстПлюсПрих.Стоимость) КАК Стоимость,
	|	ОстПлюсПрих.Организация,
	|	NULL КАК Подразделение,
	|	NULL КАК ФизЛицо,
	|	NULL КАК НазначениеИспользования
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПартииОстатки.Номенклатура КАК Номенклатура,
	|		ПартииОстатки.Склад КАК Склад,
	|		ПартииОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|		ПартииОстатки.СерияНоменклатуры КАК СерияНоменклатуры,
	|		ПартииОстатки.ДокументОприходования КАК ДокументОприходования,
	|		ПартииОстатки.Заказ КАК Заказ,
	|		ПартииОстатки.Качество КАК Качество,
	|		ПартииОстатки.СтатусПартии КАК СтатусПартии,
	|		ПартииОстатки.КоличествоОстаток КАК Количество,
	|		ПартииОстатки.СтоимостьОстаток КАК Стоимость,
	|		ПартииОстатки.Организация КАК Организация
	|	ИЗ
	|		РегистрНакопления.ПартииТоваровНаСкладах.Остатки(&ДатаНач, Номенклатура В (&МассивНоменклатуры)) КАК ПартииОстатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ПартииПриход.Номенклатура,
	|		ПартииПриход.Склад,
	|		ПартииПриход.ХарактеристикаНоменклатуры,
	|		ПартииПриход.СерияНоменклатуры,
	|		ПартииПриход.ДокументОприходования,
	|		ПартииПриход.Заказ,
	|		ПартииПриход.Качество,
	|		ПартииПриход.СтатусПартии,
	|		ВЫБОР
	|			КОГДА ПартииПриход.ВидДвижения = &ВидДвиженияПриход
	|				ТОГДА ПартииПриход.Количество
	|			КОГДА ПартииПриход.ВидДвижения = &ВидДвиженияРасход
	|				ТОГДА -ПартииПриход.Количество
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА ПартииПриход.ВидДвижения = &ВидДвиженияПриход
	|				ТОГДА ПартииПриход.Стоимость
	|			КОГДА ПартииПриход.ВидДвижения = &ВидДвиженияРасход
	|				ТОГДА -ПартииПриход.Стоимость
	|		КОНЕЦ,
	|		ПартииПриход.Организация
	|	ИЗ
	|		РегистрНакопления.ПартииТоваровНаСкладах КАК ПартииПриход
	|	ГДЕ
	|		ПартииПриход.Номенклатура В(&МассивНоменклатуры)
	|		И ПартииПриход.Период МЕЖДУ &ДатаНач И &ДатаКон
	|		И ПартииПриход.КодОперации В(&СписокКодов)
	|		И ПартииПриход.Активность = ИСТИНА) КАК ОстПлюсПрих
	|
	|СГРУППИРОВАТЬ ПО
	|	ОстПлюсПрих.Номенклатура,
	|	ОстПлюсПрих.Склад,
	|	ОстПлюсПрих.ХарактеристикаНоменклатуры,
	|	ОстПлюсПрих.СерияНоменклатуры,
	|	ОстПлюсПрих.ДокументОприходования,
	|	ОстПлюсПрих.Заказ,
	|	ОстПлюсПрих.Качество,
	|	ОстПлюсПрих.СтатусПартии,
	|	ОстПлюсПрих.Организация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОстПлюсПрих.Номенклатура,
	|	ОстПлюсПрих.ХарактеристикаНоменклатуры,
	|	NULL,
	|	ОстПлюсПрих.ДокументОприходования,
	|	NULL,
	|	NULL,
	|	NULL,
	|	ОстПлюсПрих.ДоговорКонтрагента,
	|	ОстПлюсПрих.ДокументПередачи,
	|	ОстПлюсПрих.СтатусПартии,
	|	ОстПлюсПрих.СтатусПередачи,
	|	СУММА(ОстПлюсПрих.Количество),
	|	СУММА(ОстПлюсПрих.Стоимость),
	|	ОстПлюсПрих.Организация,
	|	NULL КАК Подразделение,
	|	NULL КАК ФизЛицо,
	|	NULL КАК НазначениеИспользования
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПартииПередОстатки.Номенклатура КАК Номенклатура,
	|		ПартииПередОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|		ПартииПередОстатки.ДокументОприходования КАК ДокументОприходования,
	|		ПартииПередОстатки.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|		ПартииПередОстатки.ДокументПередачи КАК ДокументПередачи,
	|		ПартииПередОстатки.КоличествоОстаток КАК Количество,
	|		ПартииПередОстатки.СтоимостьОстаток КАК Стоимость,
	|		ПартииПередОстатки.СтатусПартии КАК СтатусПартии,
	|		ПартииПередОстатки.СтатусПередачи КАК СтатусПередачи,
	|		ПартииПередОстатки.Организация КАК Организация
	|	ИЗ
	|		РегистрНакопления.ПартииТоваровПереданные.Остатки(&ДатаНач, Номенклатура В (&МассивНоменклатуры)) КАК ПартииПередОстатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ПартииПередПриход.Номенклатура,
	|		ПартииПередПриход.ХарактеристикаНоменклатуры,
	|		ПартииПередПриход.ДокументОприходования,
	|		ПартииПередПриход.ДоговорКонтрагента,
	|		ПартииПередПриход.ДокументПередачи,
	|		ВЫБОР
	|			КОГДА ПартииПередПриход.ВидДвижения = &ВидДвиженияПриход
	|				ТОГДА ПартииПередПриход.Количество
	|			КОГДА ПартииПередПриход.ВидДвижения = &ВидДвиженияРасход
	|				ТОГДА -ПартииПередПриход.Количество
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА ПартииПередПриход.ВидДвижения = &ВидДвиженияПриход
	|				ТОГДА ПартииПередПриход.Стоимость
	|			КОГДА ПартииПередПриход.ВидДвижения = &ВидДвиженияРасход
	|				ТОГДА -ПартииПередПриход.Стоимость
	|		КОНЕЦ,
	|		ПартииПередПриход.СтатусПартии,
	|		ПартииПередПриход.СтатусПередачи,
	|		ПартииПередПриход.Организация
	|	ИЗ
	|		РегистрНакопления.ПартииТоваровПереданные КАК ПартииПередПриход
	|	ГДЕ
	|		ПартииПередПриход.Номенклатура В(&МассивНоменклатуры)
	|		И ПартииПередПриход.Период МЕЖДУ &ДатаНач И &ДатаКон
	|		И ПартииПередПриход.КодОперации В(&СписокКодов)
	|		И ПартииПередПриход.Активность = ИСТИНА) КАК ОстПлюсПрих
	|СГРУППИРОВАТЬ ПО
	|	ОстПлюсПрих.Номенклатура,
	|	ОстПлюсПрих.ДокументОприходования,
	|	ОстПлюсПрих.ХарактеристикаНоменклатуры,
	|	ОстПлюсПрих.ДоговорКонтрагента,
	|	ОстПлюсПрих.ДокументПередачи,
	|	ОстПлюсПрих.СтатусПартии,
	|	ОстПлюсПрих.СтатусПередачи,
	|	ОстПлюсПрих.Организация	
	//Партии материалов в эксплуатации
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОстПлюсПрих.Номенклатура,
	|	ОстПлюсПрих.ХарактеристикаНоменклатуры,
	|	ОстПлюсПрих.СерияНоменклатуры,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	ОстПлюсПрих.ДокументПередачи,
	|	NULL,
	|	NULL,
	|	СУММА(ОстПлюсПрих.Количество),
	|	СУММА(ОстПлюсПрих.Стоимость),
	|	NULL,
	|	ОстПлюсПрих.Подразделение,
	|	ОстПлюсПрих.ФизЛицо,
	|	ОстПлюсПрих.НазначениеИспользования
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПартииВЭксплуатацииОстатки.Номенклатура КАК Номенклатура,
	|		ПартииВЭксплуатацииОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|		ПартииВЭксплуатацииОстатки.СерияНоменклатуры КАК СерияНоменклатуры,
	|		ПартииВЭксплуатацииОстатки.ДокументПередачи КАК ДокументПередачи,
	|		ПартииВЭксплуатацииОстатки.ФизЛицо КАК ФизЛицо,
	|		ПартииВЭксплуатацииОстатки.КоличествоОстаток КАК Количество,
	|		ПартииВЭксплуатацииОстатки.СтоимостьОстаток КАК Стоимость,
	|		ПартииВЭксплуатацииОстатки.НазначениеИспользования КАК НазначениеИспользования,
	|		ПартииВЭксплуатацииОстатки.Подразделение КАК Подразделение
	|	ИЗ
	|		РегистрНакопления.ПартииМатериаловВЭксплуатации.Остатки(&ДатаНач, Номенклатура в (&МассивНоменклатуры)) КАК ПартииВЭксплуатацииОстатки
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ПартииВЭксплуатацииПриход.Номенклатура,
	|		ПартииВЭксплуатацииПриход.ХарактеристикаНоменклатуры,
	|		ПартииВЭксплуатацииПриход.СерияНоменклатуры,
	|		ПартииВЭксплуатацииПриход.ДокументПередачи,
	|		ПартииВЭксплуатацииПриход.ФизЛицо,
	|		ВЫБОР
	|			КОГДА ПартииВЭксплуатацииПриход.ВидДвижения = &ВидДвиженияПриход
	|				ТОГДА ПартииВЭксплуатацииПриход.Количество
	|			КОГДА ПартииВЭксплуатацииПриход.ВидДвижения = &ВидДвиженияРасход
	|				ТОГДА -ПартииВЭксплуатацииПриход.Количество
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА ПартииВЭксплуатацииПриход.ВидДвижения = &ВидДвиженияПриход
	|				ТОГДА ПартииВЭксплуатацииПриход.Стоимость
	|			КОГДА ПартииВЭксплуатацииПриход.ВидДвижения = &ВидДвиженияРасход
	|				ТОГДА -ПартииВЭксплуатацииПриход.Стоимость
	|		КОНЕЦ,
	|		ПартииВЭксплуатацииПриход.НазначениеИспользования,
	|		ПартииВЭксплуатацииПриход.Подразделение
	|	ИЗ
	|		РегистрНакопления.ПартииМатериаловВЭксплуатации КАК ПартииВЭксплуатацииПриход
	|	ГДЕ
	|		ПартииВЭксплуатацииПриход.Номенклатура В(&МассивНоменклатуры)
	|		И ПартииВЭксплуатацииПриход.Период МЕЖДУ &ДатаНач И &ДатаКон
	|		И ПартииВЭксплуатацииПриход.КодОперации В(&СписокКодов)
	|		И ПартииВЭксплуатацииПриход.Активность = ИСТИНА) КАК ОстПлюсПрих
	|
	|СГРУППИРОВАТЬ ПО
	|	ОстПлюсПрих.Номенклатура,
	|	ОстПлюсПрих.ХарактеристикаНоменклатуры,
	|	ОстПлюсПрих.СерияНоменклатуры,
	|	ОстПлюсПрих.ДокументПередачи,
	|	ОстПлюсПрих.Подразделение,
	|	ОстПлюсПрих.ФизЛицо,
	|	ОстПлюсПрих.НазначениеИспользования";
	
	ЗапросНачОстПлюсПриход.Текст = Текст;
	
КонецПроцедуры // ЗаполнитьЗапросНачОстПлюсПриходУпр()

// Заполняет текст запроса, выбирающего остаток и поступление по бух учету
//
// Параметры:
//	ЗапросНачОстПлюсПриход - Запрос
//
Процедура ЗаполнитьЗапросНачОстПлюсПриходБух(ЗапросНачОстПлюсПриход)
	
	Текст = 
	// Партии на складах
	"ВЫБРАТЬ
	|	ОстПлюсПрих.Номенклатура,
	|	ОстПлюсПрих.ХарактеристикаНоменклатуры,
	|	ОстПлюсПрих.СерияНоменклатуры,
	|	ОстПлюсПрих.ДокументОприходования,
	|	ОстПлюсПрих.Склад,
	|	ОстПлюсПрих.Заказ,
	|	ОстПлюсПрих.Качество,
	|	NULL КАК ДоговорКонтрагента,
	|	NULL КАК ДокументПередачи,
	|	СУММА(ОстПлюсПрих.Количество) КАК Количество,
	|	СУММА(ОстПлюсПрих.Стоимость) КАК Стоимость,
	|	ОстПлюсПрих.СчетУчета,
	|	ОстПлюсПрих.Организация,
	|	NULL КАК Подразделение,
	|	NULL КАК ФизЛицо,
	|	NULL КАК НазначениеИспользования
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПартииОстатки.Номенклатура КАК Номенклатура,
	|		ПартииОстатки.Склад КАК Склад,
	|		ПартииОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|		ПартииОстатки.СерияНоменклатуры КАК СерияНоменклатуры,
	|		ПартииОстатки.ДокументОприходования КАК ДокументОприходования,
	|		ПартииОстатки.Заказ КАК Заказ,
	|		ПартииОстатки.Качество КАК Качество,
	|		ПартииОстатки.КоличествоОстаток КАК Количество,
	|		ПартииОстатки.СтоимостьОстаток КАК Стоимость,
	|		ПартииОстатки.СчетУчета КАК СчетУчета,
	|		ПартииОстатки.Организация КАК Организация
	|	ИЗ
	|		РегистрНакопления.ПартииТоваровНаСкладахБухгалтерскийУчет.Остатки(&ДатаНач, Номенклатура В (&МассивНоменклатуры)) КАК ПартииОстатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ПартииПриход.Номенклатура,
	|		ПартииПриход.Склад,
	|		ПартииПриход.ХарактеристикаНоменклатуры,
	|		ПартииПриход.СерияНоменклатуры,
	|		ПартииПриход.ДокументОприходования,
	|		ПартииПриход.Заказ,
	|		ПартииПриход.Качество,
	|		ВЫБОР
	|			КОГДА ПартииПриход.ВидДвижения = &ВидДвиженияПриход
	|				ТОГДА ПартииПриход.Количество
	|			КОГДА ПартииПриход.ВидДвижения = &ВидДвиженияРасход
	|				ТОГДА -ПартииПриход.Количество
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА ПартииПриход.ВидДвижения = &ВидДвиженияПриход
	|				ТОГДА ПартииПриход.Стоимость
	|			КОГДА ПартииПриход.ВидДвижения = &ВидДвиженияРасход
	|				ТОГДА -ПартииПриход.Стоимость
	|		КОНЕЦ,
	|		ПартииПриход.СчетУчета,
	|		ПартииПриход.Организация
	|	ИЗ
	|		РегистрНакопления.ПартииТоваровНаСкладахБухгалтерскийУчет КАК ПартииПриход
	|	ГДЕ
	|		ПартииПриход.Номенклатура В(&МассивНоменклатуры)
	|		И ПартииПриход.Период МЕЖДУ &ДатаНач И &ДатаКон
	|		И ПартииПриход.КодОперации В(&СписокКодов)
	|		И ПартииПриход.Активность = ИСТИНА) КАК ОстПлюсПрих
	|
	|СГРУППИРОВАТЬ ПО
	|	ОстПлюсПрих.Номенклатура,
	|	ОстПлюсПрих.Склад,
	|	ОстПлюсПрих.ХарактеристикаНоменклатуры,
	|	ОстПлюсПрих.СерияНоменклатуры,
	|	ОстПлюсПрих.ДокументОприходования,
	|	ОстПлюсПрих.Заказ,
	|	ОстПлюсПрих.Качество,
	|	ОстПлюсПрих.СчетУчета,
	|	ОстПлюсПрих.Организация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОстПлюсПрих.Номенклатура,
	|	ОстПлюсПрих.ХарактеристикаНоменклатуры,
	|	NULL,
	|	ОстПлюсПрих.ДокументОприходования,
	|	NULL,
	|	NULL,
	|	NULL,
	|	ОстПлюсПрих.ДоговорКонтрагента,
	|	ОстПлюсПрих.ДокументПередачи,
	|	СУММА(ОстПлюсПрих.Количество),
	|	СУММА(ОстПлюсПрих.Стоимость),
	|	ОстПлюсПрих.СчетУчета,
	|	ОстПлюсПрих.Организация,
	|	NULL КАК Подразделение,
	|	NULL КАК ФизЛицо,
	|	NULL КАК НазначениеИспользования
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПартииПередОстатки.Номенклатура КАК Номенклатура,
	|		ПартииПередОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|		ПартииПередОстатки.ДокументОприходования КАК ДокументОприходования,
	|		ПартииПередОстатки.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|		ПартииПередОстатки.ДокументПередачи КАК ДокументПередачи,
	|		ПартииПередОстатки.КоличествоОстаток КАК Количество,
	|		ПартииПередОстатки.СтоимостьОстаток КАК Стоимость,
	|		ПартииПередОстатки.СчетУчета КАК СчетУчета,
	|		ПартииПередОстатки.Организация КАК Организация
	|	ИЗ
	|		РегистрНакопления.ПартииТоваровПереданныеБухгалтерскийУчет.Остатки(&ДатаНач, Номенклатура В (&МассивНоменклатуры)) КАК ПартииПередОстатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ПартииПередПриход.Номенклатура,
	|		ПартииПередПриход.ХарактеристикаНоменклатуры,
	|		ПартииПередПриход.ДокументОприходования,
	|		ПартииПередПриход.ДоговорКонтрагента,
	|		ПартииПередПриход.ДокументПередачи,
	|		ВЫБОР
	|			КОГДА ПартииПередПриход.ВидДвижения = &ВидДвиженияПриход
	|				ТОГДА ПартииПередПриход.Количество
	|			КОГДА ПартииПередПриход.ВидДвижения = &ВидДвиженияРасход
	|				ТОГДА -ПартииПередПриход.Количество
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА ПартииПередПриход.ВидДвижения = &ВидДвиженияПриход
	|				ТОГДА ПартииПередПриход.Стоимость
	|			КОГДА ПартииПередПриход.ВидДвижения = &ВидДвиженияРасход
	|				ТОГДА -ПартииПередПриход.Стоимость
	|		КОНЕЦ,
	|		ПартииПередПриход.СчетУчета,
	|		ПартииПередПриход.Организация
	|	ИЗ
	|		РегистрНакопления.ПартииТоваровПереданныеБухгалтерскийУчет КАК ПартииПередПриход
	|	ГДЕ
	|		ПартииПередПриход.Номенклатура В(&МассивНоменклатуры)
	|		И ПартииПередПриход.Период МЕЖДУ &ДатаНач И &ДатаКон
	|		И ПартииПередПриход.КодОперации В(&СписокКодов)
	|		И ПартииПередПриход.Активность = ИСТИНА) КАК ОстПлюсПрих
	|СГРУППИРОВАТЬ ПО
	|	ОстПлюсПрих.Номенклатура,
	|	ОстПлюсПрих.ХарактеристикаНоменклатуры,
	|	ОстПлюсПрих.ДокументОприходования,
	|	ОстПлюсПрих.ДокументПередачи,
	|	ОстПлюсПрих.ДоговорКонтрагента,
	|	ОстПлюсПрих.СчетУчета,
	|	ОстПлюсПрих.Организация
	|
	//Партии материалов в эксплуатации
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ
	|	ОстПлюсПрих.Номенклатура,
	|	ОстПлюсПрих.ХарактеристикаНоменклатуры,
	|	ОстПлюсПрих.СерияНоменклатуры,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL КАК ДоговорКонтрагента,
	|	ОстПлюсПрих.ДокументПередачи КАК ДокументПередачи,
	|	СУММА(ОстПлюсПрих.Количество) КАК Количество,
	|	СУММА(ОстПлюсПрих.Стоимость) КАК Стоимость,
	|	ОстПлюсПрих.СчетУчета,
	|	ОстПлюсПрих.Организация,
	|	ОстПлюсПрих.Подразделение КАК Подразделение,
	|	ОстПлюсПрих.ФизЛицо КАК ФизЛицо,
	|	ОстПлюсПрих.НазначениеИспользования КАК НазначениеИспользования
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПартииОстатки.Номенклатура КАК Номенклатура,
	|		ПартииОстатки.Подразделение КАК Подразделение,
	|		ПартииОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|		ПартииОстатки.СерияНоменклатуры КАК СерияНоменклатуры,
	|		ПартииОстатки.ДокументПередачи КАК ДокументПередачи,
	|		ПартииОстатки.ФизЛицо КАК ФизЛицо,
	|		ПартииОстатки.НазначениеИспользования КАК НазначениеИспользования,
	|		ПартииОстатки.КоличествоОстаток КАК Количество,
	|		ПартииОстатки.СтоимостьОстаток КАК Стоимость,
	|		ПартииОстатки.СчетУчета КАК СчетУчета,
	|		ПартииОстатки.Организация КАК Организация
	|	ИЗ
	|		РегистрНакопления.ПартииМатериаловВЭксплуатацииБухгалтерскийУчет.Остатки(&ДатаНач, Номенклатура В (&МассивНоменклатуры)) КАК ПартииОстатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ПартииПриход.Номенклатура,
	|		ПартииПриход.Подразделение,
	|		ПартииПриход.ХарактеристикаНоменклатуры,
	|		ПартииПриход.СерияНоменклатуры,
	|		ПартииПриход.ДокументПередачи,
	|		ПартииПриход.ФизЛицо,
	|		ПартииПриход.НазначениеИспользования,
	|		ВЫБОР
	|			КОГДА ПартииПриход.ВидДвижения = &ВидДвиженияПриход
	|				ТОГДА ПартииПриход.Количество
	|			КОГДА ПартииПриход.ВидДвижения = &ВидДвиженияРасход
	|				ТОГДА -ПартииПриход.Количество
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА ПартииПриход.ВидДвижения = &ВидДвиженияПриход
	|				ТОГДА ПартииПриход.Стоимость
	|			КОГДА ПартииПриход.ВидДвижения = &ВидДвиженияРасход
	|				ТОГДА -ПартииПриход.Стоимость
	|		КОНЕЦ,
	|		ПартииПриход.СчетУчета,
	|		ПартииПриход.Организация
	|	ИЗ
	|		РегистрНакопления.ПартииМатериаловВЭксплуатацииБухгалтерскийУчет КАК ПартииПриход
	|	ГДЕ
	|		ПартииПриход.Номенклатура В(&МассивНоменклатуры)
	|		И ПартииПриход.Период МЕЖДУ &ДатаНач И &ДатаКон
	|		И ПартииПриход.КодОперации В(&СписокКодов)
	|		И ПартииПриход.Активность = ИСТИНА) КАК ОстПлюсПрих
	|
	|СГРУППИРОВАТЬ ПО
	|	ОстПлюсПрих.Номенклатура,
	|	ОстПлюсПрих.ДокументПередачи,
	|	ОстПлюсПрих.ХарактеристикаНоменклатуры,
	|	ОстПлюсПрих.СерияНоменклатуры,
	|	ОстПлюсПрих.Подразделение,
	|	ОстПлюсПрих.ФизЛицо,
	|	ОстПлюсПрих.НазначениеИспользования,
	|	ОстПлюсПрих.СчетУчета,
	|	ОстПлюсПрих.Организация";
	
	ЗапросНачОстПлюсПриход.Текст = Текст;
	
КонецПроцедуры // ЗаполнитьЗапросНачОстПлюсПриходБух()

// Заполняет текст запроса, выбирающего остаток и поступление по упр учету
//
// Параметры:
//	Нет.
//
Процедура ЗаполнитьЗапросНачОстПлюсПриходНал(ЗапросНачОстПлюсПриход)
	
	Текст = 
	// Партии на складах
	"ВЫБРАТЬ
	|	ОстПлюсПрих.Номенклатура,
	|	ОстПлюсПрих.ХарактеристикаНоменклатуры,
	|	ОстПлюсПрих.СерияНоменклатуры,
	|	ОстПлюсПрих.ДокументОприходования,
	|	ОстПлюсПрих.Склад,
	|	ОстПлюсПрих.Заказ,
	|	ОстПлюсПрих.Качество,
	|	NULL КАК ДоговорКонтрагента,
	|	NULL КАК ДокументПередачи,
	|	ОстПлюсПрих.СчетУчета,
	|	ОстПлюсПрих.Организация,
	|	СУММА(ОстПлюсПрих.Количество) КАК Количество,
	|	СУММА(ОстПлюсПрих.Стоимость) КАК Стоимость,
	|	СУММА(ОстПлюсПрих.ПостояннаяРазница) КАК ПостояннаяРазница,
	|	СУММА(ОстПлюсПрих.ВременнаяРазница) КАК ВременнаяРазница,
	|	NULL КАК Подразделение,
	|	NULL КАК ФизЛицо,
	|	NULL КАК НазначениеИспользования
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПартииОстатки.Номенклатура КАК Номенклатура,
	|		ПартииОстатки.Склад КАК Склад,
	|		ПартииОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|		ПартииОстатки.СерияНоменклатуры КАК СерияНоменклатуры,
	|		ПартииОстатки.ДокументОприходования КАК ДокументОприходования,
	|		ПартииОстатки.Заказ КАК Заказ,
	|		ПартииОстатки.Качество КАК Качество,
	|		ПартииОстатки.КоличествоОстаток КАК Количество,
	|		ПартииОстатки.СтоимостьОстаток КАК Стоимость,
	|		ПартииОстатки.СчетУчета КАК СчетУчета,
	|		ПартииОстатки.Организация КАК Организация,
	|		ПартииОстатки.ПостояннаяРазницаОстаток КАК ПостояннаяРазница,
	|		ПартииОстатки.ВременнаяРазницаОстаток КАК ВременнаяРазница
	|	ИЗ
	|		РегистрНакопления.ПартииТоваровНаСкладахНалоговыйУчет.Остатки(&ДатаНач, Номенклатура В (&МассивНоменклатуры)) КАК ПартииОстатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ПартииПриход.Номенклатура,
	|		ПартииПриход.Склад,
	|		ПартииПриход.ХарактеристикаНоменклатуры,
	|		ПартииПриход.СерияНоменклатуры,
	|		ПартииПриход.ДокументОприходования,
	|		ПартииПриход.Заказ,
	|		ПартииПриход.Качество,
	|		ВЫБОР
	|			КОГДА ПартииПриход.ВидДвижения = &ВидДвиженияПриход
	|				ТОГДА ПартииПриход.Количество
	|			КОГДА ПартииПриход.ВидДвижения = &ВидДвиженияРасход
	|				ТОГДА -ПартииПриход.Количество
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА ПартииПриход.ВидДвижения = &ВидДвиженияПриход
	|				ТОГДА ПартииПриход.Стоимость
	|			КОГДА ПартииПриход.ВидДвижения = &ВидДвиженияРасход
	|				ТОГДА -ПартииПриход.Стоимость
	|		КОНЕЦ,
	|		ПартииПриход.СчетУчета,
	|		ПартииПриход.Организация,
	|		ВЫБОР
	|			КОГДА ПартииПриход.ВидДвижения = &ВидДвиженияПриход
	|				ТОГДА ПартииПриход.ПостояннаяРазница
	|			КОГДА ПартииПриход.ВидДвижения = &ВидДвиженияРасход
	|				ТОГДА -ПартииПриход.ПостояннаяРазница
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА ПартииПриход.ВидДвижения = &ВидДвиженияПриход
	|				ТОГДА ПартииПриход.ВременнаяРазница
	|			КОГДА ПартииПриход.ВидДвижения = &ВидДвиженияРасход
	|				ТОГДА -ПартииПриход.ВременнаяРазница
	|		КОНЕЦ
	|	ИЗ
	|		РегистрНакопления.ПартииТоваровНаСкладахНалоговыйУчет КАК ПартииПриход
	|	ГДЕ
	|		ПартииПриход.Номенклатура В(&МассивНоменклатуры)
	|		И ПартииПриход.Период МЕЖДУ &ДатаНач И &ДатаКон
	|		И ПартииПриход.КодОперации В(&СписокКодов)
	|		И ПартииПриход.Активность = ИСТИНА) КАК ОстПлюсПрих
	|
	|СГРУППИРОВАТЬ ПО
	|	ОстПлюсПрих.Номенклатура,
	|	ОстПлюсПрих.Склад,
	|	ОстПлюсПрих.ХарактеристикаНоменклатуры,
	|	ОстПлюсПрих.СерияНоменклатуры,
	|	ОстПлюсПрих.ДокументОприходования,
	|	ОстПлюсПрих.Заказ,
	|	ОстПлюсПрих.Качество,
	|	ОстПлюсПрих.СчетУчета,
	|	ОстПлюсПрих.Организация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОстПлюсПрих.Номенклатура,
	|	ОстПлюсПрих.ХарактеристикаНоменклатуры,
	|	NULL,
	|	ОстПлюсПрих.ДокументОприходования,
	|	NULL,
	|	NULL,
	|	NULL,
	|	ОстПлюсПрих.ДоговорКонтрагента,
	|	ОстПлюсПрих.ДокументПередачи,
	|	ОстПлюсПрих.СчетУчета,
	|	ОстПлюсПрих.Организация,
	|	СУММА(ОстПлюсПрих.Количество),
	|	СУММА(ОстПлюсПрих.Стоимость),
	|	СУММА(ОстПлюсПрих.ПостояннаяРазница),
	|	СУММА(ОстПлюсПрих.ВременнаяРазница),
	|	NULL КАК Подразделение,
	|	NULL КАК ФизЛицо,
	|	NULL КАК НазначениеИспользования
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПартииПередОстатки.Номенклатура КАК Номенклатура,
	|		ПартииПередОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|		ПартииПередОстатки.ДокументОприходования КАК ДокументОприходования,
	|		ПартииПередОстатки.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|		ПартииПередОстатки.ДокументПередачи КАК ДокументПередачи,
	|		ПартииПередОстатки.КоличествоОстаток КАК Количество,
	|		ПартииПередОстатки.СтоимостьОстаток КАК Стоимость,
	|		ПартииПередОстатки.СчетУчета КАК СчетУчета,
	|		ПартииПередОстатки.Организация КАК Организация,
	|		ПартииПередОстатки.ПостояннаяРазницаОстаток КАК ПостояннаяРазница,
	|		ПартииПередОстатки.ВременнаяРазницаОстаток КАК ВременнаяРазница
	|	ИЗ
	|		РегистрНакопления.ПартииТоваровПереданныеНалоговыйУчет.Остатки(&ДатаНач, Номенклатура В (&МассивНоменклатуры)) КАК ПартииПередОстатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ПартииПередПриход.Номенклатура,
	|		ПартииПередПриход.ХарактеристикаНоменклатуры,
	|		ПартииПередПриход.ДокументОприходования,
	|		ПартииПередПриход.ДоговорКонтрагента,
	|		ПартииПередПриход.ДокументПередачи,
	|		ВЫБОР
	|			КОГДА ПартииПередПриход.ВидДвижения = &ВидДвиженияПриход
	|				ТОГДА ПартииПередПриход.Количество
	|			КОГДА ПартииПередПриход.ВидДвижения = &ВидДвиженияРасход
	|				ТОГДА -ПартииПередПриход.Количество
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА ПартииПередПриход.ВидДвижения = &ВидДвиженияПриход
	|				ТОГДА ПартииПередПриход.Стоимость
	|			КОГДА ПартииПередПриход.ВидДвижения = &ВидДвиженияРасход
	|				ТОГДА -ПартииПередПриход.Стоимость
	|		КОНЕЦ,
	|		ПартииПередПриход.СчетУчета,
	|		ПартииПередПриход.Организация,
	|		ВЫБОР
	|			КОГДА ПартииПередПриход.ВидДвижения = &ВидДвиженияПриход
	|				ТОГДА ПартииПередПриход.ПостояннаяРазница
	|			КОГДА ПартииПередПриход.ВидДвижения = &ВидДвиженияРасход
	|				ТОГДА -ПартииПередПриход.ПостояннаяРазница
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА ПартииПередПриход.ВидДвижения = &ВидДвиженияПриход
	|				ТОГДА ПартииПередПриход.ВременнаяРазница
	|			КОГДА ПартииПередПриход.ВидДвижения = &ВидДвиженияРасход
	|				ТОГДА -ПартииПередПриход.ВременнаяРазница
	|		КОНЕЦ
	|	ИЗ
	|		РегистрНакопления.ПартииТоваровПереданныеНалоговыйУчет КАК ПартииПередПриход
	|	ГДЕ
	|		ПартииПередПриход.Номенклатура В(&МассивНоменклатуры)
	|		И ПартииПередПриход.Период МЕЖДУ &ДатаНач И &ДатаКон
	|		И ПартииПередПриход.КодОперации В(&СписокКодов)
	|		И ПартииПередПриход.Активность = ИСТИНА) КАК ОстПлюсПрих
	|
	|СГРУППИРОВАТЬ ПО
	|	ОстПлюсПрих.Номенклатура,
	|	ОстПлюсПрих.ХарактеристикаНоменклатуры,
	|	ОстПлюсПрих.ДокументОприходования,
	|	ОстПлюсПрих.ДокументПередачи,
	|	ОстПлюсПрих.ДоговорКонтрагента,
	|	ОстПлюсПрих.СчетУчета,
	|	ОстПлюсПрих.Организация
//Партии материалов в эксплуатации	
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОстПлюсПрих.Номенклатура,
	|	ОстПлюсПрих.ХарактеристикаНоменклатуры,
	|	ОстПлюсПрих.СерияНоменклатуры,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL КАК ДоговорКонтрагента,
	|	ОстПлюсПрих.ДокументПередачи КАК ДокументПередачи,
	|	ОстПлюсПрих.СчетУчета,
	|	ОстПлюсПрих.Организация,
	|	СУММА(ОстПлюсПрих.Количество) КАК Количество,
	|	СУММА(ОстПлюсПрих.Стоимость) КАК Стоимость,
	|	СУММА(ОстПлюсПрих.ПостояннаяРазница) КАК ПостояннаяРазница,
	|	СУММА(ОстПлюсПрих.ВременнаяРазница) КАК ВременнаяРазница,
	|	ОстПлюсПрих.Подразделение КАК Подразделение,
	|	ОстПлюсПрих.ФизЛицо КАК ФизЛицо,
	|	ОстПлюсПрих.НазначениеИспользования КАК НазначениеИспользования
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПартииОстатки.Номенклатура КАК Номенклатура,
	|		ПартииОстатки.Подразделение КАК Подразделение,
	|		ПартииОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|		ПартииОстатки.СерияНоменклатуры КАК СерияНоменклатуры,
	|		ПартииОстатки.ДокументПередачи КАК ДокументПередачи,
	|		ПартииОстатки.ФизЛицо КАК ФизЛицо,
	|		ПартииОстатки.НазначениеИспользования КАК НазначениеИспользования,
	|		ПартииОстатки.КоличествоОстаток КАК Количество,
	|		ПартииОстатки.СтоимостьОстаток КАК Стоимость,
	|		ПартииОстатки.СчетУчета КАК СчетУчета,
	|		ПартииОстатки.Организация КАК Организация,
	|		ПартииОстатки.ПостояннаяРазницаОстаток КАК ПостояннаяРазница,
	|		ПартииОстатки.ВременнаяРазницаОстаток КАК ВременнаяРазница
	|	ИЗ
	|		РегистрНакопления.ПартииМатериаловВЭксплуатацииНалоговыйУчет.Остатки(&ДатаНач, Номенклатура В (&МассивНоменклатуры)) КАК ПартииОстатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ПартииПриход.Номенклатура,
	|		ПартииПриход.Подразделение КАК Подразделение,	
	|		ПартииПриход.ХарактеристикаНоменклатуры,
	|		ПартииПриход.СерияНоменклатуры,
	|		ПартииПриход.ДокументПередачи,
	|		ПартииПриход.ФизЛицо,
	|		ПартииПриход.НазначениеИспользования,
	|		ВЫБОР
	|			КОГДА ПартииПриход.ВидДвижения = &ВидДвиженияПриход
	|				ТОГДА ПартииПриход.Количество
	|			КОГДА ПартииПриход.ВидДвижения = &ВидДвиженияРасход
	|				ТОГДА -ПартииПриход.Количество
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА ПартииПриход.ВидДвижения = &ВидДвиженияПриход
	|				ТОГДА ПартииПриход.Стоимость
	|			КОГДА ПартииПриход.ВидДвижения = &ВидДвиженияРасход
	|				ТОГДА -ПартииПриход.Стоимость
	|		КОНЕЦ,
	|		ПартииПриход.СчетУчета,
	|		ПартииПриход.Организация,
	|		ВЫБОР
	|			КОГДА ПартииПриход.ВидДвижения = &ВидДвиженияПриход
	|				ТОГДА ПартииПриход.ПостояннаяРазница
	|			КОГДА ПартииПриход.ВидДвижения = &ВидДвиженияРасход
	|				ТОГДА -ПартииПриход.ПостояннаяРазница
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА ПартииПриход.ВидДвижения = &ВидДвиженияПриход
	|				ТОГДА ПартииПриход.ВременнаяРазница
	|			КОГДА ПартииПриход.ВидДвижения = &ВидДвиженияРасход
	|				ТОГДА -ПартииПриход.ВременнаяРазница
	|		КОНЕЦ
	|	ИЗ
	|		РегистрНакопления.ПартииМатериаловВЭксплуатацииНалоговыйУчет КАК ПартииПриход
	|	ГДЕ
	|		ПартииПриход.Номенклатура В(&МассивНоменклатуры)
	|		И ПартииПриход.Период МЕЖДУ &ДатаНач И &ДатаКон
	|		И ПартииПриход.КодОперации В(&СписокКодов)
	|		И ПартииПриход.Активность = ИСТИНА) КАК ОстПлюсПрих
	|
	|СГРУППИРОВАТЬ ПО
	|	ОстПлюсПрих.Номенклатура,
	|	ОстПлюсПрих.Подразделение,
	|	ОстПлюсПрих.ХарактеристикаНоменклатуры,
	|	ОстПлюсПрих.СерияНоменклатуры,
	|	ОстПлюсПрих.ДокументПередачи,
	|	ОстПлюсПрих.ФизЛицо,
	|	ОстПлюсПрих.НазначениеИспользования,
	|	ОстПлюсПрих.СчетУчета,
	|	ОстПлюсПрих.Организация";
	
	ЗапросНачОстПлюсПриход.Текст = Текст;
	
КонецПроцедуры // ЗаполнитьЗапросНачОстПлюсПриходУпр()

// Заполняет текст запроса, выбирающего остаток и поступление по упр учету
//
// Параметры:
//	Нет.
//
Процедура ЗаполнитьЗапросНачОстПлюсПриходМеж(ЗапросНачОстПлюсПриход)
	
	Текст = 
	// Партии на складах
	"ВЫБРАТЬ
	|	ОстПлюсПрих.Номенклатура,
	|	ОстПлюсПрих.ХарактеристикаНоменклатуры,
	|	ОстПлюсПрих.СерияНоменклатуры,
	|	ОстПлюсПрих.ДокументОприходования,
	|	ОстПлюсПрих.Склад,
	|	ОстПлюсПрих.Заказ,
	|	ОстПлюсПрих.Качество,
	|	NULL КАК ДоговорКонтрагента,
	|	NULL КАК ДокументПередачи,
	|	ОстПлюсПрих.СчетУчета,
	|	ОстПлюсПрих.Организация,
	|	СУММА(ОстПлюсПрих.Количество) КАК Количество,
	|	СУММА(ОстПлюсПрих.Стоимость) КАК Стоимость
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПартииОстатки.Номенклатура КАК Номенклатура,
	|		ПартииОстатки.Склад КАК Склад,
	|		ПартииОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|		ПартииОстатки.СерияНоменклатуры КАК СерияНоменклатуры,
	|		ПартииОстатки.ДокументОприходования КАК ДокументОприходования,
	|		ПартииОстатки.Заказ КАК Заказ,
	|		ПартииОстатки.Качество КАК Качество,
	|		ПартииОстатки.КоличествоОстаток КАК Количество,
	|		ПартииОстатки.СтоимостьОстаток КАК Стоимость,
	|		ПартииОстатки.СчетУчета КАК СчетУчета,
	|		ПартииОстатки.Организация КАК Организация
	|	ИЗ
	|		РегистрНакопления.ПартииТоваровНаСкладахМеждународныйУчет.Остатки(&ДатаНач, Номенклатура В (&МассивНоменклатуры)) КАК ПартииОстатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ПартииПриход.Номенклатура,
	|		ПартииПриход.Склад,
	|		ПартииПриход.ХарактеристикаНоменклатуры,
	|		ПартииПриход.СерияНоменклатуры,
	|		ПартииПриход.ДокументОприходования,
	|		ПартииПриход.Заказ,
	|		ПартииПриход.Качество,
	|		ВЫБОР
	|			КОГДА ПартииПриход.ВидДвижения = &ВидДвиженияПриход
	|				ТОГДА ПартииПриход.Количество
	|			КОГДА ПартииПриход.ВидДвижения = &ВидДвиженияРасход
	|				ТОГДА -ПартииПриход.Количество
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА ПартииПриход.ВидДвижения = &ВидДвиженияПриход
	|				ТОГДА ПартииПриход.Стоимость
	|			КОГДА ПартииПриход.ВидДвижения = &ВидДвиженияРасход
	|				ТОГДА -ПартииПриход.Стоимость
	|		КОНЕЦ,
	|		ПартииПриход.СчетУчета,
	|		ПартииПриход.Организация
	|	ИЗ
	|		РегистрНакопления.ПартииТоваровНаСкладахМеждународныйУчет КАК ПартииПриход
	|	ГДЕ
	|		ПартииПриход.Номенклатура В(&МассивНоменклатуры)
	|		И ПартииПриход.Период МЕЖДУ &ДатаНач И &ДатаКон
	|		И ПартииПриход.КодОперации В(&СписокКодов)
	|		И ПартииПриход.Активность = ИСТИНА) КАК ОстПлюсПрих
	|
	|СГРУППИРОВАТЬ ПО
	|	ОстПлюсПрих.Номенклатура,
	|	ОстПлюсПрих.Склад,
	|	ОстПлюсПрих.ХарактеристикаНоменклатуры,
	|	ОстПлюсПрих.СерияНоменклатуры,
	|	ОстПлюсПрих.ДокументОприходования,
	|	ОстПлюсПрих.Заказ,
	|	ОстПлюсПрих.Качество,
	|	ОстПлюсПрих.СчетУчета,
	|	ОстПлюсПрих.Организация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОстПлюсПрих.Номенклатура,
	|	ОстПлюсПрих.ХарактеристикаНоменклатуры,
	|	NULL,
	|	ОстПлюсПрих.ДокументОприходования,
	|	NULL,
	|	NULL,
	|	NULL,
	|	ОстПлюсПрих.ДоговорКонтрагента,
	|	ОстПлюсПрих.ДокументПередачи,
	|	ОстПлюсПрих.СчетУчета,
	|	ОстПлюсПрих.Организация,
	|	СУММА(ОстПлюсПрих.Количество),
	|	СУММА(ОстПлюсПрих.Стоимость)
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПартииПередОстатки.Номенклатура КАК Номенклатура,
	|		ПартииПередОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|		ПартииПередОстатки.ДокументОприходования КАК ДокументОприходования,
	|		ПартииПередОстатки.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|		ПартииПередОстатки.ДокументПередачи КАК ДокументПередачи,
	|		ПартииПередОстатки.КоличествоОстаток КАК Количество,
	|		ПартииПередОстатки.СтоимостьОстаток КАК Стоимость,
	|		ПартииПередОстатки.СчетУчета КАК СчетУчета,
	|		ПартииПередОстатки.Организация КАК Организация
	|	ИЗ
	|		РегистрНакопления.ПартииТоваровПереданныеМеждународныйУчет.Остатки(&ДатаНач, Номенклатура В (&МассивНоменклатуры)) КАК ПартииПередОстатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ПартииПередПриход.Номенклатура,
	|		ПартииПередПриход.ХарактеристикаНоменклатуры,
	|		ПартииПередПриход.ДокументОприходования,
	|		ПартииПередПриход.ДоговорКонтрагента,
	|		ПартииПередПриход.ДокументПередачи,
	|		ВЫБОР
	|			КОГДА ПартииПередПриход.ВидДвижения = &ВидДвиженияПриход
	|				ТОГДА ПартииПередПриход.Количество
	|			КОГДА ПартииПередПриход.ВидДвижения = &ВидДвиженияРасход
	|				ТОГДА -ПартииПередПриход.Количество
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА ПартииПередПриход.ВидДвижения = &ВидДвиженияПриход
	|				ТОГДА ПартииПередПриход.Стоимость
	|			КОГДА ПартииПередПриход.ВидДвижения = &ВидДвиженияРасход
	|				ТОГДА -ПартииПередПриход.Стоимость
	|		КОНЕЦ,
	|		ПартииПередПриход.СчетУчета,
	|		ПартииПередПриход.Организация
	|	ИЗ
	|		РегистрНакопления.ПартииТоваровПереданныеМеждународныйУчет КАК ПартииПередПриход
	|	ГДЕ
	|		ПартииПередПриход.Номенклатура В(&МассивНоменклатуры)
	|		И ПартииПередПриход.Период МЕЖДУ &ДатаНач И &ДатаКон
	|		И ПартииПередПриход.КодОперации В(&СписокКодов)
	|		И ПартииПередПриход.Активность = ИСТИНА) КАК ОстПлюсПрих
	|
	|СГРУППИРОВАТЬ ПО
	|	ОстПлюсПрих.Номенклатура,
	|	ОстПлюсПрих.ХарактеристикаНоменклатуры,
	|	ОстПлюсПрих.ДокументОприходования,
	|	ОстПлюсПрих.ДокументПередачи,
	|	ОстПлюсПрих.ДоговорКонтрагента,
	|	ОстПлюсПрих.СчетУчета,
	|	ОстПлюсПрих.Организация";
	
	ЗапросНачОстПлюсПриход.Текст = Текст;
	
КонецПроцедуры // ЗаполнитьЗапросНачОстПлюсПриходУпр()

// Добавляет в базу данных записи по перемещению в другое состояние
//
// Параметры:
//	Нет.
//
Процедура ДобавитьЗаписиПоПеремещению(ПараметрыСостоянияИсточника, ПараметрыСостоянияПриемника, СтСтоимость, СтруктураДопПараметров)
	
	// Выполним движение по сторнированию перемещения
	
	// Если корректировать нечего, движений не добавляем
	ВыполнятьДвижения = Ложь;
	Для Каждого ЭлСтоимость Из СтСтоимость	Цикл
		Если ЭлСтоимость.Значение<>0 Тогда
			ВыполнятьДвижения=Истина; Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ ВыполнятьДвижения Тогда
		Возврат;
	КонецЕсли;
	
	// Из структуры доп параметров добудем дополнительные параметры
	Учет            = СтруктураДопПараметров.Учет;
	
	// По параметрам источника и приемника определим вид партий
	Договор = Неопределено;
	ПараметрыСостоянияИсточника.Свойство("ДоговорКонтрагента", Договор);
	Подразделение = Неопределено;
	ПараметрыСостоянияИсточника.Свойство("Подразделение", Подразделение);
	Если ЗначениеЗаполнено(Договор) Тогда
		Источник =  "Переданные";
	ИначеЕсли ЗначениеЗаполнено(Подразделение) Тогда
		Источник =  "ВЭксплуатации";
	Иначе
		Источник =  "НаСкладах";
	КонецЕсли;
	
	Договор = Неопределено;
	ПараметрыСостоянияПриемника.Свойство("ДоговорКонтрагента", Договор);
	Подразделение = Неопределено;
	ПараметрыСостоянияПриемника.Свойство("Подразделение", Подразделение);
	Если ЗначениеЗаполнено(Договор) Тогда
		Приемник =  "Переданные";
	ИначеЕсли ЗначениеЗаполнено(Подразделение) Тогда
		Приемник =  "ВЭксплуатации";
	Иначе
		Приемник =  "НаСкладах";
	КонецЕсли;
	
	Если Источник =  "НаСкладах" Тогда
		ИмяРег="ПартииТоваровНаСкладах";
	ИначеЕсли Источник =  "ВЭксплуатации" Тогда
		ИмяРег="ПартииМатериаловВЭксплуатации";
	Иначе
		ИмяРег="ПартииТоваровПереданные";
	КонецЕсли;
	
	
	СтрокаДокумента= Новый Структура;
		
	// Эти параметры добавляются на всякий случай, т.к. они используются процедурой заполнения субконто по счету
	СтрокаДокумента.Вставить("НоменклатураНовая", Неопределено);
	СтрокаДокумента.Вставить("ПодразделениеОрганизации", Неопределено);
	СтрокаДокумента.Вставить("СтатьяЗатрат", Неопределено);
	СтрокаДокумента.Вставить("НоменклатурнаяГруппа", Неопределено);
	СтрокаДокумента.Вставить("Склад", Неопределено);
	СтрокаДокумента.Вставить("СкладПолучатель", Неопределено);
	СтрокаДокумента.Вставить("ДоговорКонтрагента", Неопределено);
	СтрокаДокумента.Вставить("ИзменитьСерию", Ложь);
	СтрокаДокумента.Вставить("ИзменитьХарактеристику", Ложь);
	СтрокаДокумента.Вставить("ИзменитьСклад", Ложь);
	
	СтрокаДокумента.Вставить("ВидТабличнойЧасти");
	
	// Трансляция параметров состояния-источника в формат регистра СписанныеТовары
	СтрокаДокумента.Вставить("Номенклатура", ПараметрыСостоянияИсточника.Номенклатура);
	
	СтруктураРеквизитов = Новый Структура("ВестиПартионныйУчетПоСериям");
	УправлениеЗапасамиПартионныйУчет.ПолучитьРеквизитыОбъекта(ПараметрыСостоянияИсточника.Номенклатура, СтруктураРеквизитов);
	
	СтрокаДокумента.Вставить("ВестиПартионныйУчетПоСериям", СтруктураРеквизитов.ВестиПартионныйУчетПоСериям);
	
	СтрокаДокумента.Вставить("ХарактеристикаНоменклатуры", ПараметрыСостоянияИсточника.ХарактеристикаНоменклатуры);
	
	Если Источник =  "НаСкладах" Тогда
		СтрокаДокумента.Вставить("Склад", ПараметрыСостоянияИсточника.Склад);
		СтрокаДокумента.Вставить("СерияНоменклатуры", ПараметрыСостоянияИсточника.СерияНоменклатуры);
		СтрокаДокумента.Вставить("Качество", ПараметрыСостоянияИсточника.Качество);
		Если Учет = "Упр" Тогда
			СтрокаДокумента.Вставить("СтатусПартии", ПараметрыСостоянияИсточника.СтатусПартии);
		КонецЕсли;
	ИначеЕсли Источник =  "ВЭксплуатации" Тогда	
		СтрокаДокумента.Вставить("Подразделение", ПараметрыСостоянияИсточника.Подразделение);
		СтрокаДокумента.Вставить("СерияНоменклатуры", ПараметрыСостоянияИсточника.СерияНоменклатуры);
		СтрокаДокумента.Вставить("ДокументПередачи", ПараметрыСостоянияИсточника.ДокументПередачи);
		СтрокаДокумента.Вставить("ФизЛицо", ПараметрыСостоянияИсточника.ФизЛицо);
		СтрокаДокумента.Вставить("НазначениеИспользования", ПараметрыСостоянияИсточника.НазначениеИспользования);
	Иначе
		СтрокаДокумента.Вставить("ДоговорКонтрагента", ПараметрыСостоянияИсточника.ДоговорКонтрагента);
		СтрокаДокумента.Вставить("ДокументПередачи", ПараметрыСостоянияИсточника.ДокументПередачи);
		СтрокаДокумента.Вставить("СерияНоменклатуры", Неопределено);
		Если Учет = "Упр" Тогда
			СтрокаДокумента.Вставить("СтатусПередачи", ПараметрыСостоянияИсточника.СтатусПередачи);
			СтрокаДокумента.Вставить("СтатусПартии", ПараметрыСостоянияИсточника.СтатусПартии);
		КонецЕсли;
	КонецЕсли;
	
	СтрокаДокумента.Вставить("Заказ", ПараметрыСостоянияИсточника.Заказ);
	СтрокаДокумента.Вставить("ДокументОприходования", ПараметрыСостоянияИсточника.ДокументОприходования);
	СтрокаДокумента.Вставить("ДокументОприходованияНовый", ПараметрыСостоянияПриемника.ДокументОприходования);
	СтрокаДокумента.Вставить("Организация", ПараметрыСостоянияИсточника.Организация);
	
	Если Учет = "Бух" Тогда
		СтрокаДокумента.Вставить("СчетУчетаБУ", ПараметрыСостоянияИсточника.СчетУчета);
		
		СтрокаДокумента.Вставить("КорСубконтоБУ1", Неопределено);
		СтрокаДокумента.Вставить("КорСубконтоБУ2", Неопределено);
		СтрокаДокумента.Вставить("КорСубконтоБУ3", Неопределено);
		
		СтрокаДокумента.Вставить("ПринятыеСчетУчетаБУ", Неопределено);
		
	ИначеЕсли Учет = "Нал" Тогда
		СтрокаДокумента.Вставить("СчетУчетаНУ", ПараметрыСостоянияИсточника.СчетУчета);
		
		СтрокаДокумента.Вставить("КорСубконтоНУ1", Неопределено);
		СтрокаДокумента.Вставить("КорСубконтоНУ2", Неопределено);
		СтрокаДокумента.Вставить("КорСубконтоНУ3", Неопределено);
		
		СтрокаДокумента.Вставить("КорСубконтоБУ1", Неопределено);
		СтрокаДокумента.Вставить("КорСубконтоБУ2", Неопределено);
		СтрокаДокумента.Вставить("КорСубконтоБУ3", Неопределено);
		
		СтрокаДокумента.Вставить("ПринятыеСчетУчетаНУ", Неопределено);
		
	ИначеЕсли Учет = "Меж" Тогда
		СтрокаДокумента.Вставить("СчетУчетаМУ", ПараметрыСостоянияИсточника.СчетУчета);
		
		СтрокаДокумента.Вставить("КорСубконтоМУ1", Неопределено);
		СтрокаДокумента.Вставить("КорСубконтоМУ2", Неопределено);
		СтрокаДокумента.Вставить("КорСубконтоМУ3", Неопределено);
		
		СтрокаДокумента.Вставить("ПринятыеСчетУчетаМУ", Неопределено);
		
	КонецЕсли;
	
	// Трансляция параметров состояния-приемника в формат регистра СписанныеТовары
	СтрокаДокумента.Вставить("НоменклатураНовая", ПараметрыСостоянияПриемника.Номенклатура);
	СтрокаДокумента.Вставить("ХарактеристикаНоменклатурыНовая", ПараметрыСостоянияПриемника.ХарактеристикаНоменклатуры);
	СтрокаДокумента.Вставить("СерияНоменклатурыНовая", ПараметрыСостоянияПриемника.СерияНоменклатуры);
	
	СтрокаДокумента.Вставить("ЗаказСписания", ПараметрыСостоянияПриемника.Заказ);
	
	Если Учет="Бух" Тогда
		СтрокаДокумента.Вставить("КорСчетБУ", ПараметрыСостоянияПриемника.СчетУчета);
		СтрокаДокумента.Вставить("ПринятыеКорСчетБУ", ПараметрыСостоянияПриемника.СчетУчета);
		СтрокаДокумента.Вставить("Организация", ПараметрыСостоянияПриемника.Организация);
	ИначеЕсли Учет="Нал" Тогда
		СтрокаДокумента.Вставить("КорСчетНУ", ПараметрыСостоянияПриемника.СчетУчета);
		СтрокаДокумента.Вставить("Организация", ПараметрыСостоянияПриемника.Организация);
	ИначеЕсли Учет="Меж" Тогда
		СтрокаДокумента.Вставить("КорСчетМУ", ПараметрыСостоянияПриемника.СчетУчета);
		СтрокаДокумента.Вставить("Организация", ПараметрыСостоянияПриемника.Организация);
	КонецЕсли;
	
	Если Приемник = "Переданные" Тогда
		СтрокаДокумента.Вставить("ДоговорКонтрагента", ПараметрыСостоянияПриемника.ДоговорКонтрагента);
		СтрокаДокумента.Вставить("ДокументПередачи", ПараметрыСостоянияПриемника.ДокументПередачи);
		Если Учет = "Упр" Тогда
			СтрокаДокумента.Вставить("СтатусПартии", ПараметрыСостоянияПриемника.СтатусПартии);
			СтрокаДокумента.Вставить("СтатусПередачи", ПараметрыСостоянияПриемника.СтатусПередачи);
		КонецЕсли;
	ИначеЕсли Приемник =  "ВЭксплуатации" Тогда	
		СтрокаДокумента.Вставить("Подразделение", ПараметрыСостоянияПриемника.Подразделение);
		СтрокаДокумента.Вставить("ПодразделениеОрганизации", ПараметрыСостоянияПриемника.Подразделение);
		СтрокаДокумента.Вставить("СерияНоменклатуры", ПараметрыСостоянияПриемника.СерияНоменклатуры);
		СтрокаДокумента.Вставить("ДокументПередачи", ПараметрыСостоянияПриемника.ДокументПередачи);
		СтрокаДокумента.Вставить("ФизЛицо", ПараметрыСостоянияПриемника.ФизЛицо);
		СтрокаДокумента.Вставить("НазначениеИспользования", ПараметрыСостоянияПриемника.НазначениеИспользования);		
	ИначеЕсли Приемник="НаСкладах" Тогда
		СтрокаДокумента.Вставить("КачествоНовое", ПараметрыСостоянияПриемника.Качество);
		СтрокаДокумента.Вставить("СкладПолучатель", ПараметрыСостоянияПриемника.Склад);
		Если Учет = "Упр" Тогда
			СтрокаДокумента.Вставить("СтатусПартии", ПараметрыСостоянияПриемника.СтатусПартии);
		КонецЕсли;
	КонецЕсли;
	
	СтрокаДокумента.Вставить("ОтражатьВУправленческомУчете", Истина);
	СтрокаДокумента.Вставить("КоличествоПоступление", 0);

	СтрокаДокумента.Вставить("ОтражатьВУправленческомУчете", Ложь);
	СтрокаДокумента.Вставить("ОтражатьВБухгалтерскомУчете", Ложь);
	СтрокаДокумента.Вставить("ОтражатьВНалоговомУчете", Ложь);
	СтрокаДокумента.Вставить("ОтражатьВМеждународномУчете", Ложь);
	
	Если Учет = "Упр" Тогда
		СтрокаДокумента.Вставить("ОтражатьВУправленческомУчете", Истина);
	ИначеЕсли Учет = "Бух" Тогда
		СтрокаДокумента.Вставить("ОтражатьВБухгалтерскомУчете", Истина);
	ИначеЕсли Учет = "Нал" Тогда
		СтрокаДокумента.Вставить("ОтражатьВНалоговомУчете", Истина);
	ИначеЕсли Учет = "Меж" Тогда
		СтрокаДокумента.Вставить("ОтражатьВМеждународномУчете", Истина);
	КонецЕсли;
	
	Движение              = УправлениеЗапасамиПартионныйУчет.ДобавитьДвижениеВСтруктуруПараметров(ИмяРег+Учет, СтруктураДопПараметров);
	Движение.Период       = СтруктураДопПараметров.Период;
	Движение.ВидДвижения  = ВидДвиженияНакопления.Расход;
	
	Движение.Номенклатура = ПараметрыСостоянияИсточника.Номенклатура;
	
	Движение.ХарактеристикаНоменклатуры = ПараметрыСостоянияИсточника.ХарактеристикаНоменклатуры;
	
	Если Источник =  "НаСкладах" Тогда
		Движение.Склад      = ПараметрыСостоянияИсточника.Склад;
		Движение.Заказ      = ПараметрыСостоянияИсточника.Заказ;
		Движение.СерияНоменклатуры = ПараметрыСостоянияИсточника.СерияНоменклатуры;
		Движение.Качество = ПараметрыСостоянияИсточника.Качество;
		Если Учет = "Упр" Тогда
			Движение.СтатусПартии = ПараметрыСостоянияИсточника.СтатусПартии;
		КонецЕсли;
		Движение.ДокументОприходования = ПараметрыСостоянияИсточника.ДокументОприходования;
		Движение.Организация = ПараметрыСостоянияИсточника.Организация;
	ИначеЕсли Источник =  "Переданные" Тогда
		Движение.ДоговорКонтрагента      = ПараметрыСостоянияИсточника.ДоговорКонтрагента;
		Движение.ДокументПередачи = ПараметрыСостоянияИсточника.ДокументПередачи;
		Если Учет = "Упр" Тогда
			Движение.СтатусПередачи = ПараметрыСостоянияИсточника.СтатусПередачи;
			Движение.СтатусПартии = ПараметрыСостоянияИсточника.СтатусПартии;
		КонецЕсли;
		Движение.ДокументОприходования = ПараметрыСостоянияИсточника.ДокументОприходования;
		Движение.Организация = ПараметрыСостоянияИсточника.Организация;
	ИначеЕсли Источник =  "ВЭксплуатации" Тогда
		Движение.ДокументПередачи = ПараметрыСостоянияИсточника.ДокументПередачи;
		Движение.ФизЛицо = ПараметрыСостоянияИсточника.ФизЛицо;
		Движение.НазначениеИспользования = ПараметрыСостоянияИсточника.НазначениеИспользования;
	КонецЕсли;
	
	Если Учет = "Бух" Тогда
		Движение.СчетУчета = ПараметрыСостоянияИсточника.СчетУчета;
	ИначеЕсли Учет = "Нал" Тогда
		Движение.СчетУчета = ПараметрыСостоянияИсточника.СчетУчета;
	ИначеЕсли Учет = "Меж" Тогда
		Движение.СчетУчета = ПараметрыСостоянияИсточника.СчетУчета;
	КонецЕсли;
	
	Движение.Количество   = 0;
	
	// Суммы из структуры
	Для Каждого ЭлСтоимость Из СтСтоимость	Цикл
		Движение[ЭлСтоимость.Ключ]  = ЭлСтоимость.Значение;
	КонецЦикла;
	
	// Коды операций
	СтрокаДокумента.Вставить("КодОперацииПартииТоваров", Перечисления.КодыОперацийПартииТоваров.ПеремещениеМеждуСкладами); // по умолчанию
	Если Источник = "НаСкладах" И Приемник = "Переданные" Тогда
		СтрокаДокумента.Вставить("КодОперацииПартииТоваров", Перечисления.КодыОперацийПартииТоваров.ПередачаНаКомиссию);
	ИначеЕсли Источник = "Переданные" И Приемник = "НаСкладах" Тогда
		СтрокаДокумента.Вставить("КодОперацииПартииТоваров", Перечисления.КодыОперацийПартииТоваров.ВозвратОтКомиссионера);
	ИначеЕсли Источник = "НаСкладах" И Приемник = "ВЭксплуатации" Тогда
		СтрокаДокумента.Вставить("КодОперацииПартииТоваров", Перечисления.КодыОперацийПартииТоваров.ПередачаМатериаловВЭксплуатацию);
	КонецЕсли;
	Движение.КодОперации = СтрокаДокумента.КодОперацииПартииТоваров;
	
	Если НЕ Источник =  "ВЭксплуатации" Тогда
		
		СпособВеденияПартионногоУчетаПоОрганизации = УправлениеЗапасами.ПолучитьСпособВеденияПартионногоУчетаПоОрганизации(Движение.Организация, Движение.Период);
		СтруктураДопПараметров.Вставить("ОрганизацияУпр", УправлениеЗапасами.ПолучитьОрганизациюВСоответствииСоСпособомВеденияПартионногоУчетаПоОрганизациям(Движение.Организация,СпособВеденияПартионногоУчетаПоОрганизации));
		
		ВыполнитьКорДвижение(Источник, СтрокаДокумента, СтруктураДопПараметров, Движение);
		
	Иначе
		
		СтруктураДопПараметров.Вставить("ОрганизацияУпр",Справочники.Организации.ПустаяСсылка());
		
	КонецЕсли;	

	
	Если Приемник =  "ВЭксплуатации" Тогда
		//Вызов специальной процедуры производственного учета для формирования движений
		НоваяСтрока = СтруктураДопПараметров.ТаблицаСписанныхПартийСпецодежды.Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаДокумента);
		
		Если Учет = "Упр" Тогда
			НоваяСтрока.ОтражатьВУправленческомУчете = Истина;
		ИначеЕсли Учет = "Бух" Тогда
			НоваяСтрока.ОтражатьВБухгалтерскомУчете = Истина;
		ИначеЕсли Учет = "Нал" Тогда
			НоваяСтрока.ОтражатьВНалоговомУчете = Истина;
		ИначеЕсли Учет = "Меж" Тогда
			НоваяСтрока.ОтражатьВМеждународномУчете = Истина;
		КонецЕсли;
		
		НоваяСтрока.Стоимость = СтСтоимость.Стоимость;
		Если Учет = "Нал" Тогда
			НоваяСтрока.ПостояннаяРазница = СтСтоимость.ПостояннаяРазница;
			НоваяСтрока.ВременнаяРазница = СтСтоимость.ВременнаяРазница;
		КонецЕсли;
		
		НоваяСтрока.Количество = 0;
		НоваяСтрока.КодОперацииПартииТоваров = Перечисления.КодыОперацийПартииТоваров.ПередачаМатериаловВЭксплуатацию;
	КонецЕсли;
	
КонецПроцедуры // ДобавитьЗаписиПоПеремещению()

Процедура ВыполнитьКорДвижение(РегистрУчета, СтрокаДокумента, СтруктураПараметров, Движение)
	
	СтруктураПараметров.Вставить("ФормироватьПроводкиПоСписаниюТМЦ",Истина);
	СтруктураПараметров.Вставить("СписыватьПартииНДС",Истина);
	
	НаправлениеСписания = УправлениеЗапасамиПартионныйУчет.ПолучитьНаправлениеСписанияПоКодуОперации(СтрокаДокумента.КодОперацииПартииТоваров, СтрокаДокумента.СтатьяЗатрат);
	УправлениеЗапасамиПартионныйУчет.ВыполнитьКорДвижениеУпр(РегистрУчета, НаправлениеСписания , СтрокаДокумента, СтруктураПараметров, Движение);
	
	Если СтрокаДокумента.ОтражатьВБухгалтерскомУчете Тогда
		ИмяПланСчетов = "Хозрасчетный";
		СчетЗатрат = СтрокаДокумента.КорСчетБУ;
	ИначеЕсли СтрокаДокумента.ОтражатьВНалоговомУчете Тогда
		СчетЗатрат = СтрокаДокумента.КорСчетНУ;
		ИмяПланСчетов = "Налоговый";
	КонецЕсли;
	
	НаправлениеСписания = УправлениеЗапасамиПартионныйУчет.ПолучитьНаправлениеСписанияПоКодуОперации(СтрокаДокумента.КодОперацииПартииТоваров, СтрокаДокумента.СтатьяЗатрат, СчетЗатрат, ИмяПланСчетов);
	
	УправлениеЗапасамиПартионныйУчет.ВыполнитьКорДвижениеРегл(РегистрУчета, НаправлениеСписания, СтрокаДокумента, СтруктураПараметров, Движение);
	Если СтрокаДокумента.ОтражатьВБухгалтерскомУчете ИЛИ СтрокаДокумента.ОтражатьВНалоговомУчете Тогда 
		// Формирование проводок по бух учету
		УправлениеЗапасамиПартионныйУчетФормированиеПроводокРегл.СписаниеНаСчет(РегистрУчета, СтрокаДокумента, СтруктураПараметров, Движение,,НаправлениеСписания);
	КонецЕсли;	
	
	НаправлениеСписания = УправлениеЗапасамиПартионныйУчет.ПолучитьНаправлениеСписанияПоКодуОперации(СтрокаДокумента.КодОперацииПартииТоваров, СтрокаДокумента.СтатьяЗатрат);
	УправлениеЗапасамиПартионныйУчет.ВыполнитьКорДвижениеМеж(РегистрУчета, НаправлениеСписания, СтрокаДокумента, СтруктураПараметров, Движение);
	Если СтрокаДокумента.ОтражатьВМеждународномУчете Тогда 
		// Формирование проводок по бух учету
		УправлениеЗапасамиПартионныйУчетФормированиеПроводокМежд.СписаниеНаСчетМеж(РегистрУчета, СтрокаДокумента, СтруктураПараметров, Движение,НаправлениеСписания);
	КонецЕсли;	
	
	// Сюда можно добавить вызов процедур для выполнения движений по другим учетам
	
КонецПроцедуры // ВыполнитьКорДвижение()


// Здесь формируются все записи по внешнему списанию из состояния ПараметрыСостоянияИсточника
//
// Параметры:
//	Нет.
//
Процедура ДобавитьЗаписиПоВнешнемуСписанию(ПараметрыСостоянияИсточника, Количество, СтСтоимость, СтруктураДопПараметров)
	
	// Если в состоянии ничего не осталось, ничего не делать
	Если Количество=0 Тогда
		Возврат;
	КонецЕсли;
	
	// Из структуры доп параметров добудем дополнительные параметры
	Учет            = СтруктураДопПараметров.Учет;
	
	// По параметрам источника и приемника определим вид партий
	Договор = Неопределено;
	ПараметрыСостоянияИсточника.Свойство("ДоговорКонтрагента", Договор);
	Подразделение = Неопределено;
	ПараметрыСостоянияИсточника.Свойство("Подразделение", Подразделение);
	Если ЗначениеЗаполнено(Договор) Тогда
		Источник =  "Переданные";
		ИмяРег = "ПартииТоваровПереданные";
	ИначеЕсли ЗначениеЗаполнено(Подразделение) Тогда
		Источник =  "ВЭксплуатации";
		ИмяРег = "ПартииМатериаловВЭксплуатации";
	Иначе
		Источник =  "НаСкладах";
		ИмяРег = "ПартииТоваровНаСкладах";
	КонецЕсли;
	
	Ст= Новый Структура;
	
	// Трансляция параметров состояния-источника в формат регистра СписанныеТовары
	Ст.Вставить("Номенклатура", ПараметрыСостоянияИсточника.Номенклатура);
	Ст.Вставить("ХарактеристикаНоменклатуры", ПараметрыСостоянияИсточника.ХарактеристикаНоменклатуры);
	
	Если Источник =  "НаСкладах" Тогда
		Ст.Вставить("Склад", ПараметрыСостоянияИсточника.Склад);
		Ст.Вставить("СерияНоменклатуры", ПараметрыСостоянияИсточника.СерияНоменклатуры);
		Ст.Вставить("Качество", ПараметрыСостоянияИсточника.Качество);
		Если Учет = "Упр" Тогда
			Ст.Вставить("СтатусПартии", ПараметрыСостоянияИсточника.СтатусПартии);
		КонецЕсли;
	ИначеЕсли Источник =  "ВЭксплуатации" Тогда	
		Если Учет = "Упр" Тогда
			Ст.Вставить("Подразделение", ПараметрыСостоянияИсточника.Подразделение);
		Иначе
			Ст.Вставить("ПодразделениеОрганизации", ПараметрыСостоянияИсточника.Подразделение);
		КонецЕсли;	
		Ст.Вставить("СерияНоменклатуры", ПараметрыСостоянияИсточника.СерияНоменклатуры);
		Ст.Вставить("ДокументПередачи", ПараметрыСостоянияИсточника.ДокументПередачи);
		Ст.Вставить("ФизЛицо", ПараметрыСостоянияИсточника.ФизЛицо);
		Ст.Вставить("НазначениеИспользования", ПараметрыСостоянияИсточника.НазначениеИспользования);
	Иначе
		Ст.Вставить("ДоговорКонтрагента", ПараметрыСостоянияИсточника.ДоговорКонтрагента);
		Ст.Вставить("ДокументПередачи", ПараметрыСостоянияИсточника.ДокументПередачи);
		Если Учет = "Упр" Тогда
			Ст.Вставить("СтатусПередачи", ПараметрыСостоянияИсточника.СтатусПередачи);
			Ст.Вставить("СтатусПартии", ПараметрыСостоянияИсточника.СтатусПартии);
		КонецЕсли;
	КонецЕсли;
	
	Ст.Вставить("ДокументОприходования", ПараметрыСостоянияИсточника.ДокументОприходования);
	Ст.Вставить("Заказ", ПараметрыСостоянияИсточника.Заказ);
	Ст.Вставить("Организация", ПараметрыСостоянияИсточника.Организация);
	
	Если Учет = "Бух" Тогда
		Ст.Вставить("СчетУчетаБУ", ПараметрыСостоянияИсточника.СчетУчета);
	ИначеЕсли Учет = "Нал" Тогда
		Ст.Вставить("СчетУчетаНУ", ПараметрыСостоянияИсточника.СчетУчета);
	ИначеЕсли Учет = "Меж" Тогда
		Ст.Вставить("СчетУчетаМУ", ПараметрыСостоянияИсточника.СчетУчета);
	КонецЕсли;
	
	// Найдем уже выполненные движения по списанию из этого состояния
	ВыпДвижения = СтруктураДопПараметров.ТаблицаВыполненныхДвижений.НайтиСтроки(Ст);
	
	Для Каждого ВыпДвижение Из ВыпДвижения Цикл
		
		Если Количество=0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если ВыпДвижение.Количество<Количество Тогда
			КоэффСписания = ВыпДвижение.Количество/Количество;
		Иначе
			КоэффСписания = 1;
		КонецЕсли;
		
		ВыполнятьДвижения = Ложь;	// Если корректировать нечего, движений не добавляем

		СтСредней = Новый Структура; // структура разницы между 
		Для Каждого ЭлСтоимость Из СтСтоимость Цикл
			
			СуммаПоСредней = Окр(СтСтоимость[ЭлСтоимость.Ключ]*КоэффСписания, 2);
			
			СтСредней.Вставить(ЭлСтоимость.Ключ, СуммаПоСредней);
			
			СтСтоимость[ЭлСтоимость.Ключ] = СтСтоимость[ЭлСтоимость.Ключ] - СтСредней[ЭлСтоимость.Ключ]; // уменьшение стоимости в состоянии-источнике
			
			Если СуммаПоСредней - ВыпДвижение[ЭлСтоимость.Ключ]<>0 Тогда  // корректировка на разницу между списание по-средней и фактическим
				ВыполнятьДвижения = Истина;
			КонецЕсли;
			
		КонецЦикла;
		
		Количество = Количество - ВыпДвижение.Количество;
		
		Если НЕ ВыполнятьДвижения Тогда
			Продолжить;
		КонецЕсли;
		
		Если Источник =  "ВЭксплуатации" Тогда
			//Вызов специальной процедуры производственного учета для формирования движений
			СтруктраСумм = Новый Структура();
			// Перенос корректировки сумм в движение
			Для Каждого ЭлСтоимость Из СтСтоимость Цикл
				СтруктраСумм.Вставить(ЭлСтоимость.Ключ, СтСредней[ЭлСтоимость.Ключ] - ВыпДвижение[ЭлСтоимость.Ключ]); // корректировка на разницу между списанием по-средней и фактическим
			КонецЦикла;
			//СформироватьДвиженияСписанияПоМатериаламВЭксплуатации(ПараметрыСостоянияИсточника,ВыпДвижение.КодОперацииПартииТоваров,СтруктраСумм, СтруктураДопПараметров);
		Иначе
		
			Движение              = УправлениеЗапасамиПартионныйУчет.ДобавитьДвижениеВСтруктуруПараметров(ИмяРег+Учет, СтруктураДопПараметров);
			Движение.Период       = СтруктураДопПараметров.Период;
			Движение.ВидДвижения  = ВидДвиженияНакопления.Расход;
			
			Движение.Номенклатура = ПараметрыСостоянияИсточника.Номенклатура;
			Движение.ХарактеристикаНоменклатуры = ПараметрыСостоянияИсточника.ХарактеристикаНоменклатуры;
			
			Если Источник =  "НаСкладах" Тогда
				Движение.Склад      = ПараметрыСостоянияИсточника.Склад;
				Движение.Заказ      = ПараметрыСостоянияИсточника.Заказ;
				Движение.СерияНоменклатуры = ПараметрыСостоянияИсточника.СерияНоменклатуры;
				Движение.Качество = ПараметрыСостоянияИсточника.Качество;
				Если Учет = "Упр" Тогда
					Движение.СтатусПартии = ПараметрыСостоянияИсточника.СтатусПартии;
				КонецЕсли;
				
			Иначе
				Движение.ДоговорКонтрагента      = ПараметрыСостоянияИсточника.ДоговорКонтрагента;
				Движение.ДокументПередачи = ПараметрыСостоянияИсточника.ДокументПередачи;
				Если Учет = "Упр" Тогда
					Движение.СтатусПередачи = ПараметрыСостоянияИсточника.СтатусПередачи;
					Движение.СтатусПартии = ПараметрыСостоянияИсточника.СтатусПартии;
				КонецЕсли;
			КонецЕсли;
			
			Движение.ДокументОприходования = ПараметрыСостоянияИсточника.ДокументОприходования;
			Движение.Организация = ПараметрыСостоянияИсточника.Организация;
			
			Если Учет = "Упр" Тогда
				Движение.СтатусПартии = ПараметрыСостоянияИсточника.СтатусПартии;
			ИначеЕсли Учет = "Бух" Тогда
				Движение.СчетУчета = ПараметрыСостоянияИсточника.СчетУчета;
			ИначеЕсли Учет = "Нал" Тогда
				Движение.СчетУчета = ПараметрыСостоянияИсточника.СчетУчета;
			ИначеЕсли Учет = "Меж" Тогда
				Движение.СчетУчета = ПараметрыСостоянияИсточника.СчетУчета;
				
			КонецЕсли;
			
			Движение.Количество   = 0;
			
			// Перенос корректировки сумм в движение
			Для Каждого ЭлСтоимость Из СтСтоимость Цикл
				Движение[ЭлСтоимость.Ключ]    = СтСредней[ЭлСтоимость.Ключ] - ВыпДвижение[ЭлСтоимость.Ключ]; // корректировка на разницу между списанием по-средней и фактическим
			КонецЦикла;
			
			Движение.КодОперации = ВыпДвижение.КодОперацииПартииТоваров;
			
			// При внешнем списании оставляем ссылку на исходное движение
			Движение.ДокументДвиженияПериод = ВыпДвижение.Период;
			Движение.ДокументДвижения = ВыпДвижение.Регистратор;
			Движение.НомерСтрокиСписанныхТоваров = ВыпДвижение.НомерСтрокиСписанныхТоваров;
			
			СпособВеденияПартионногоУчетаПоОрганизации = УправлениеЗапасами.ПолучитьСпособВеденияПартионногоУчетаПоОрганизации(Движение.Организация, Движение.Период);
			СтруктураДопПараметров.Вставить("ОрганизацияУпр", УправлениеЗапасами.ПолучитьОрганизациюВСоответствииСоСпособомВеденияПартионногоУчетаПоОрганизациям(Движение.Организация,СпособВеденияПартионногоУчетаПоОрганизации));
			
			Если НЕ ВыпДвижение.СерияНоменклтатурыНЗП = Неопределено Тогда
				ВыпДвижение.СерияНоменклатуры = ВыпДвижение.СерияНоменклтатурыНЗП;
			КонецЕсли;
			
			ВыполнитьКорДвижение(Источник, ВыпДвижение, СтруктураДопПараметров, Движение);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ДобавитьЗаписиПоВнешнемуСписанию()

// Процедура вызова корректировки списания
//
Процедура СкорректироватьСписание(ДатаНач, ДатаКон, ТаблицаТоваров, РегламентныйДокумент, СтруктураПараметров)
	
	Перем НеСписыватьНаПостоянныеЗатраты;
	
	ДопПараметры = Новый Структура;
	
	// Перенесем ключи и значения из исходной структуры
	Для Каждого Элемент Из СтруктураПараметров Цикл
		ДопПараметры.Вставить(Элемент.Ключ, Элемент.Значение);
	КонецЦикла;
		
	// Приведение к нужному виду
	ДопПараметры.Свойство("НеСписыватьНаПостоянныеЗатраты", НеСписыватьНаПостоянныеЗатраты);
	Если НеСписыватьНаПостоянныеЗатраты = Истина Тогда
		ДопПараметры.Вставить("НеСписыватьНаПостоянныеЗатраты", Истина);
	Иначе
		ДопПараметры.Вставить("НеСписыватьНаПостоянныеЗатраты", Ложь);
	КонецЕсли;
	
	КодыОпераций = Перечисления.КодыОперацийПартииТоваров;
	
	// Сформируем запрос для получения фактических движений 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНач", ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон", ДатаКон);
	Запрос.УстановитьПараметр("ВидДвиженияРасход", ВидДвиженияНакопления.Расход);
	
	МассивНоменклатуры = ТаблицаТоваров.ВыгрузитьКолонку("Номенклатура");
		
	МассивДокументовОприходования = ТаблицаТоваров.ВыгрузитьКолонку("ДокументОприходования");
	
	МассивНоменклатуры = ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(МассивНоменклатуры);
	
	Запрос.УстановитьПараметр("МассивНоменклатуры", МассивНоменклатуры);
	Запрос.УстановитьПараметр("МассивДокументовОприходования", МассивДокументовОприходования);
	
	// Формирование запроса по списанию
	
	// Коды операции, применяются во всех учетах
	
	МассивСписаниеВНЗП = Новый Массив;
	МассивСписаниеВНЗП.Добавить(КодыОпераций.СписаниеПартийВПроизводствоОперативно);
	
	Запрос.УстановитьПараметр("КодыСписаниеВНЗП", МассивСписаниеВНЗП);
	
	Запрос.УстановитьПараметр("СписаниеПартийПереданныхВПроизводство", КодыОпераций.СписаниеПартийПереданныхВПроизводство);
	
	МассивСписаниеНаСебестоимость = Новый Массив;
	МассивСписаниеНаСебестоимость.Добавить(КодыОпераций.Реализация);
	МассивСписаниеНаСебестоимость.Добавить(КодыОпераций.РеализацияКомиссия);
	МассивСписаниеНаСебестоимость.Добавить(КодыОпераций.РеализацияРозница);
	Запрос.УстановитьПараметр("КодыСписаниеНаСебестоимость", МассивСписаниеНаСебестоимость);
	
	Запрос.УстановитьПараметр("КодыСписаниеНаЗатраты", КодыОпераций.СписаниеНаЗатраты);
	
	Запрос.УстановитьПараметр("КодыСписаниеНаБрак", КодыОпераций.СписаниеНаБрак);
	
	МассивЗатратыОС = Новый Массив;
	МассивЗатратыОС.Добавить(КодыОпераций.СписаниеНаСтроительствоОбъектовОС);
	МассивЗатратыОС.Добавить(КодыОпераций.СписаниеНаВложенияВоВнеоборотныеАктивы);
	
	Запрос.УстановитьПараметр("КодыСтроительствоОбъектовОС", МассивЗатратыОС);
	Запрос.УстановитьПараметр("КодКомплектация", КодыОпераций.Комплектация);
	
	// Все коды внешних списаний
	МассивВнешСписание = Новый Массив;
	
	Если СтруктураПараметров.Свойство("КорректироватьСтоимостьВозвратовТекущегоМесяца") тогда
		// Возврат текущего месяца корректируется как реализация
		МассивВнешСписание.Добавить(КодыОпераций.ВозвратОтПокупателяТекущийМесяц);
	Иначе
		МассивВнешСписание.Добавить(КодыОпераций.Комплектация);
		МассивВнешСписание.Добавить(КодыОпераций.ПередачаТарыКонтрагенту);
		МассивВнешСписание.Добавить(КодыОпераций.Реализация);
		МассивВнешСписание.Добавить(КодыОпераций.РеализацияКомиссия);
		МассивВнешСписание.Добавить(КодыОпераций.РеализацияРозница);

		МассивВнешСписание.Добавить(КодыОпераций.СписаниеПоИнвентаризации);
		МассивВнешСписание.Добавить(КодыОпераций.СписаниеПоОрдеру);
		МассивВнешСписание.Добавить(КодыОпераций.СписаниеПартийВПроизводствоОперативно);

		МассивВнешСписание.Добавить(КодыОпераций.СписаниеНаСтроительствоОбъектовОС);
		МассивВнешСписание.Добавить(КодыОпераций.СписаниеНаВложенияВоВнеоборотныеАктивы);
		МассивВнешСписание.Добавить(КодыОпераций.СписаниеПартийПереданныхВПроизводство);
		//МассивВнешСписание.Добавить(КодыОпераций.ПередачаМатериаловВЭксплуатацию);
		МассивВнешСписание.Добавить(КодыОпераций.СписаниеНаБрак);
		МассивВнешСписание.Добавить(КодыОпераций.СписаниеНаЗатраты);
		
		МассивВнешСписание.Добавить(Перечисления.КодыОперацийПартииМатериаловВЭксплуатации.СписаниеИзЭксплуатации);
		//МассивВнешСписание.Добавить(Перечисления.КодыОперацийПартииМатериаловВЭксплуатации.ПогашениеСтоимости);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("КодыСписание", МассивВнешСписание);
	
	Запрос.УстановитьПараметр("КодПередачаМатериалов", КодыОпераций.ПередачаМатериаловВЭксплуатацию);

	ДопПараметры.Вставить("УчетнаяПолитика", 
			УправлениеЗапасамиПартионныйУчет.ПолучитьУчетнуюПолитику(ДатаКон, 
					ДопПараметры.ОтражатьВУправленческомУчете, 
					ДопПараметры.ОтражатьВБухгалтерскомУчете,
					ДопПараметры.ОтражатьВНалоговомУчете,
					ДопПараметры.ОтражатьВМеждународномУчете,
					СтруктураПараметров.Организация));
	Если ДопПараметры.УчетнаяПолитика = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	СкорректироватьСписаниеУпр(Запрос, МассивНоменклатуры, ДатаНач, ДатаКон, ТаблицаТоваров, РегламентныйДокумент, ДопПараметры);
	
	СкорректироватьСписаниеРегл(Запрос, МассивНоменклатуры, ДатаНач, ДатаКон, ТаблицаТоваров, РегламентныйДокумент, ДопПараметры);
	
	СкорректироватьСписаниеМеж(Запрос, МассивНоменклатуры, ДатаНач, ДатаКон, ТаблицаТоваров, РегламентныйДокумент, ДопПараметры);
	
	// Возврат выполненных движений для расчета себестоимости
	Если ТипЗнч(СтруктураПараметров) = Тип("Структура") Тогда
		Если СтруктураПараметров.Свойство("ВернутьДвижения") Тогда
			Для Каждого Регистр Из СтруктураПараметров.ВернутьДвижения Цикл
				
				// В структуре СтруктураПараметров.ВернутьДвижения ключами заданы имена таблиц движений
				Если ДопПараметры.Свойство(Регистр.Ключ) Тогда
					
					ТаблицаДвижений = ДопПараметры[Регистр.Ключ].Скопировать();
					
					// Сворачивание движений
					Если Регистр.Ключ = "ТаблицаДвиженийНезавершенноеПроизводствоБух" Тогда
						ОбщегоНазначения.СвернутьТаблицуДвиженийРегистраНакопления("НезавершенноеПроизводствоБухгалтерскийУчет", ТаблицаДвижений, Истина);
					ИначеЕсли Регистр.Ключ = "ТаблицаДвиженийНезавершенноеПроизводствоУпр" Тогда
						ОбщегоНазначения.СвернутьТаблицуДвиженийРегистраНакопления("НезавершенноеПроизводство",                  ТаблицаДвижений, Истина);
					ИначеЕсли Регистр.Ключ = "ТаблицаДвиженийНезавершенноеПроизводствоНал" Тогда
						ОбщегоНазначения.СвернутьТаблицуДвиженийРегистраНакопления("НезавершенноеПроизводствоНалоговыйУчет",     ТаблицаДвижений, Истина);
					ИначеЕсли Регистр.Ключ = "ТаблицаДвиженийНезавершенноеПроизводствоМеж" Тогда
						ОбщегоНазначения.СвернутьТаблицуДвиженийРегистраНакопления("НезавершенноеПроизводствоМеждународныйУчет", ТаблицаДвижений, Истина);
					КонецЕсли;
					
					СтруктураПараметров.ВернутьДвижения.Вставить(Регистр.Ключ, ТаблицаДвижений);
					
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры//СкорректироватьСписание()

// Приведение таблицы корректировки списания к требуемому виду
//
Процедура ПодготовитьТаблицуКорректировкиСписания(ТаблицаРезультатаЗапроса)
	
	ДобавляемыеПоля = "ОтражатьВУправленческомУчете,ОтражатьВБухгалтерскомУчете,ОтражатьВНалоговомУчете,
					  |ОтражатьВМеждународномУчете,НоменклатураНовая,КоличествоПоступление,СкладПолучатель,
					  |ИзменитьХарактеристику,ИзменитьСерию,ИзменитьСклад,КачествоНовое,СтатусПартииНовый,
					  |ВедениеУчетаПоПроектам, ЗаказПартии";
	СтруктураДобавляемыхПолей = Новый Структура(ДобавляемыеПоля,"Булево","Булево","Булево","Булево",,"Число",,"Булево","Булево","Булево",,,"Булево");
	
	Для Каждого Поле Из СтруктураДобавляемыхПолей цикл 
		Если ТаблицаРезультатаЗапроса.Колонки.Найти(Поле.Ключ) = Неопределено Тогда
			Если НЕ ЗначениеЗаполнено(Поле.Значение) тогда
				ТипПоля = Неопределено;
			Иначе
				ТипПоля = Новый ОписаниеТипов(Поле.Значение);
			КонецЕсли;
			ТаблицаРезультатаЗапроса.Колонки.Добавить(Поле.Ключ, ТипПоля);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ПодготовитьТаблицуКорректировкиСписания()

// Корректировка списания по упр учету
//
// Параметры:
//	Нет.
//
Процедура СкорректироватьСписаниеУпр(Запрос, МассивНоменклатуры, ДатаНач, ДатаКон, ТаблицаТоваров, РегламентныйДокумент, ДопПараметры)
	
	Перем ПериодЗаписей;
	
	Если ДопПараметры.ОтражатьВУправленческомУчете Тогда
		
		ЗаполнитьЗапросПоСписаниюУпр(Запрос, МассивНоменклатуры, ДопПараметры);
		
		// Таблица по списанию
		ТаблицаРезультатаЗапроса = Запрос.Выполнить().Выгрузить();
		
		Если ТаблицаРезультатаЗапроса.Количество()=0 Тогда
			// Пустая строка для создния требуемых наборов записей, когда есть перемещения без списания
			ТаблицаРезультатаЗапроса.Добавить();
		КонецЕсли;
		
		ПодготовитьТаблицуКорректировкиСписания(ТаблицаРезультатаЗапроса);
		ТаблицаРезультатаЗапроса.ЗаполнитьЗначения(Истина, "ОтражатьВУправленческомУчете");
		
		// Структура общих параметров
		СтруктураПараметров = ДопПараметры;
		
		// Признак учета, используемый в общих процедурах
		СтруктураПараметров.Вставить("Учет", "Упр");
		СтруктураПараметров.Вставить("ИмяРегистраСклад",      "ПартииТоваровНаСкладах");
		СтруктураПараметров.Вставить("ИмяРегистраПереданные", "ПартииТоваровПереданные");
		СтруктураПараметров.Вставить("ИмяРегистраВЭксплуатации", "ПартииМатериаловВЭксплуатации");
		
		
		СтруктураПараметров.Вставить("ТаблицаВыполненныхДвижений", ТаблицаРезультатаЗапроса);
		СтруктураПараметров.Вставить("ТаблицаТоваров", ТаблицаТоваров);
		
		СтруктураПараметров.Вставить("РегламентныйДокумент", РегламентныйДокумент);
		
		// Движения - наборы записей по регистрам
		УправлениеЗапасамиПартионныйУчет.СоздатьНаборыЗаписей(СтруктураПараметров, ТаблицаРезультатаЗапроса, РегламентныйДокумент);
		
		Если НЕ ДопПараметры.Свойство("Период", ПериодЗаписей) Тогда
			
			Если РегламентныйДокумент.Метаданные().Реквизиты.Найти("ПериодРегистрации") <> Неопределено Тогда
				ПериодЗаписей = КонецМесяца(РегламентныйДокумент.ПериодРегистрации);
			Иначе
				ПериодЗаписей = РегламентныйДокумент.Дата;
			КонецЕсли;
			
		КонецЕсли;
		
		УправлениеЗапасамиПартионныйУчет.ПодготовитьНаборыЗаписей(СтруктураПараметров, ТаблицаРезультатаЗапроса, ПериодЗаписей, РегламентныйДокумент, Ложь);
		
		// Вызов процедуры расчета по средней
		РассчитатьСписаниеПоСредней(ТаблицаТоваров, ДатаНач, ДатаКон, СтруктураПараметров);
		
		УправлениеЗапасамиПартионныйУчет.ЗаписатьДвиженияДокумента(СтруктураПараметров, ТаблицаРезультатаЗапроса, Ложь);
	КонецЕсли;
	
КонецПроцедуры // СкорректироватьСписаниеУпр()

// Корректировка списания по бух и нал учету
//
// Параметры:
//	Нет.
//
Процедура СкорректироватьСписаниеРегл(Запрос, МассивНоменклатуры, ДатаНач, ДатаКон, ТаблицаТоваров, РегламентныйДокумент, ДопПараметры)
	
	Перем ПериодЗаписей;
	
	// Бух
	Если ДопПараметры.ОтражатьВБухгалтерскомУчете Тогда
		
		ЗаполнитьЗапросПоСписаниюБух(Запрос, МассивНоменклатуры, ДопПараметры);
		
		// Таблица по списанию
		ТаблицаРезультатаЗапроса = Запрос.Выполнить().Выгрузить();
		
		Если ТаблицаРезультатаЗапроса.Количество()=0 Тогда
			// Пустая строка для создния требуемых наборов записей, когда есть перемещения без списания
			ТаблицаРезультатаЗапроса.Добавить();
		КонецЕсли;
		
		ПодготовитьТаблицуКорректировкиСписания(ТаблицаРезультатаЗапроса);
		
		ТаблицаРезультатаЗапроса.ЗаполнитьЗначения(Истина, "ОтражатьВБухгалтерскомУчете");
		ТаблицаРезультатаЗапроса.Колонки.Добавить("ПринятыеКорСчетБУ"); // колонка используется только для приведения к стандартному виду
		ТаблицаРезультатаЗапроса.Колонки.Добавить("ПринятыеСчетУчетаБУ"); // колонка используется только для приведения к стандартному виду
		
		// Структура общих параметров
		СтруктураПараметров = ДопПараметры;
		
		// Признак учета, используемый в общих процедурах
		СтруктураПараметров.Вставить("Учет", "Бух");
		СтруктураПараметров.Вставить("ИмяРегистраСклад",      "ПартииТоваровНаСкладахБухгалтерскийУчет");
		СтруктураПараметров.Вставить("ИмяРегистраПереданные", "ПартииТоваровПереданныеБухгалтерскийУчет");
		СтруктураПараметров.Вставить("ИмяРегистраВЭксплуатации", "ПартииМатериаловВЭксплуатацииБухгалтерскийУчет");
		
		СтруктураПараметров.Вставить("ТаблицаВыполненныхДвижений", ТаблицаРезультатаЗапроса);
		СтруктураПараметров.Вставить("ТаблицаТоваров", ТаблицаТоваров);
		
		СтруктураПараметров.Вставить("РегламентныйДокумент", РегламентныйДокумент);
		
		// Движения - наборы записей по регистрам
		УправлениеЗапасамиПартионныйУчет.СоздатьНаборыЗаписей(СтруктураПараметров, ТаблицаРезультатаЗапроса, РегламентныйДокумент);
		
		Если НЕ ДопПараметры.Свойство("Период", ПериодЗаписей) Тогда
			
			Если РегламентныйДокумент.Метаданные().Реквизиты.Найти("ПериодРегистрации") <> Неопределено Тогда
				ПериодЗаписей = КонецМесяца(РегламентныйДокумент.ПериодРегистрации);
			Иначе
				ПериодЗаписей = РегламентныйДокумент.Дата;
			КонецЕсли;
			
		КонецЕсли;
		
		УправлениеЗапасамиПартионныйУчет.ПодготовитьНаборыЗаписей(СтруктураПараметров, ТаблицаРезультатаЗапроса, ПериодЗаписей, РегламентныйДокумент, Ложь);
		
		// Вызов процедуры расчета по средней
		РассчитатьСписаниеПоСредней(ТаблицаТоваров, ДатаНач, ДатаКон, СтруктураПараметров);
		
		УправлениеЗапасамиПартионныйУчет.ЗаписатьДвиженияДокумента(СтруктураПараметров, ТаблицаРезультатаЗапроса, Ложь);
	КонецЕсли;
	
	// Нал
	Если ДопПараметры.ОтражатьВНалоговомУчете Тогда
		
		ЗаполнитьЗапросПоСписаниюНал(Запрос, МассивНоменклатуры, ДопПараметры);
		
		// Таблица по списанию
		ТаблицаРезультатаЗапроса = Запрос.Выполнить().Выгрузить();
		
		Если ТаблицаРезультатаЗапроса.Количество()=0 Тогда
			// Пустая строка для создния требуемых наборов записей, когда есть перемещения без списания
			ТаблицаРезультатаЗапроса.Добавить();
		КонецЕсли;
		
		ПодготовитьТаблицуКорректировкиСписания(ТаблицаРезультатаЗапроса);
		ТаблицаРезультатаЗапроса.ЗаполнитьЗначения(Истина, "ОтражатьВНалоговомУчете");
		ТаблицаРезультатаЗапроса.Колонки.Добавить("ПринятыеСчетУчетаНУ"); // колонка используется только для приведения к стандартному виду
		
		// Структура общих параметров
		СтруктураПараметров = ДопПараметры;
		
		// Признак учета, используемый в общих процедурах
		СтруктураПараметров.Вставить("Учет", "Нал");
		СтруктураПараметров.Вставить("ИмяРегистраСклад",      "ПартииТоваровНаСкладахНалоговыйУчет");
		СтруктураПараметров.Вставить("ИмяРегистраПереданные", "ПартииТоваровПереданныеНалоговыйУчет");
		СтруктураПараметров.Вставить("ИмяРегистраВЭксплуатации", "ПартииМатериаловВЭксплуатацииНалоговыйУчет");
		
		СтруктураПараметров.Вставить("УчетнаяПолитика", 
				УправлениеЗапасамиПартионныйУчет.ПолучитьУчетнуюПолитику(ДатаКон, 
						СтруктураПараметров.ОтражатьВУправленческомУчете, 
						СтруктураПараметров.ОтражатьВБухгалтерскомУчете,
						СтруктураПараметров.ОтражатьВНалоговомУчете,
						СтруктураПараметров.ОтражатьВМеждународномУчете,
						СтруктураПараметров.Организация));
		Если СтруктураПараметров.УчетнаяПолитика = Неопределено Тогда
			Возврат;
		КонецЕсли;	
		
		СтруктураПараметров.Вставить("ТаблицаВыполненныхДвижений", ТаблицаРезультатаЗапроса);
		СтруктураПараметров.Вставить("ТаблицаТоваров", ТаблицаТоваров);
		
		СтруктураПараметров.Вставить("РегламентныйДокумент", РегламентныйДокумент);
		
		МассивСумм = Новый Массив;
		МассивСумм.Добавить("Стоимость");
		МассивСумм.Добавить("ПостояннаяРазница");
		МассивСумм.Добавить("ВременнаяРазница");
		СтруктураПараметров.Вставить("МассивСумм", МассивСумм);
		
		// Движения - наборы записей по регистрам
		УправлениеЗапасамиПартионныйУчет.СоздатьНаборыЗаписей(СтруктураПараметров, ТаблицаРезультатаЗапроса, РегламентныйДокумент);
		
		Если НЕ ДопПараметры.Свойство("Период", ПериодЗаписей) Тогда
			
			Если РегламентныйДокумент.Метаданные().Реквизиты.Найти("ПериодРегистрации") <> Неопределено Тогда
				ПериодЗаписей = КонецМесяца(РегламентныйДокумент.ПериодРегистрации);
			Иначе
				ПериодЗаписей = РегламентныйДокумент.Дата;
			КонецЕсли;
			
		КонецЕсли;
		
		УправлениеЗапасамиПартионныйУчет.ПодготовитьНаборыЗаписей(СтруктураПараметров, ТаблицаРезультатаЗапроса, ПериодЗаписей, РегламентныйДокумент, Ложь);
		
		// Вызов процедуры расчета по средней
		РассчитатьСписаниеПоСредней(ТаблицаТоваров, ДатаНач, ДатаКон, СтруктураПараметров);
		
		УправлениеЗапасамиПартионныйУчет.ЗаписатьДвиженияДокумента(СтруктураПараметров, ТаблицаРезультатаЗапроса, Ложь);
	КонецЕсли;
	
КонецПроцедуры // СкорректироватьСписаниеРегл()

// Корректировка списания по меж учету
//
// Параметры:
//	Нет.
//
Процедура СкорректироватьСписаниеМеж(Запрос, МассивНоменклатуры, ДатаНач, ДатаКон, ТаблицаТоваров, РегламентныйДокумент, ДопПараметры)
	
	Перем ПериодЗаписей;
	
	Если ДопПараметры.ОтражатьВМеждународномУчете Тогда
		
		ЗаполнитьЗапросПоСписаниюМеж(Запрос, МассивНоменклатуры, ДопПараметры);
		
		// Таблица по списанию
		ТаблицаРезультатаЗапроса = Запрос.Выполнить().Выгрузить();
		
		Если ТаблицаРезультатаЗапроса.Количество()=0 Тогда
			// Пустая строка для создния требуемых наборов записей, когда есть перемещения без списания
			ТаблицаРезультатаЗапроса.Добавить();
		КонецЕсли;
		
		ПодготовитьТаблицуКорректировкиСписания(ТаблицаРезультатаЗапроса);

		ТаблицаРезультатаЗапроса.ЗаполнитьЗначения(Истина, "ОтражатьВМеждународномУчете");
		
		// Структура общих параметров
		СтруктураПараметров = ДопПараметры;
		
		// Признак учета, используемый в общих процедурах
		СтруктураПараметров.Вставить("Учет", "Меж");
		СтруктураПараметров.Вставить("ИмяРегистраСклад",      "ПартииТоваровНаСкладахМеждународныйУчет");
		СтруктураПараметров.Вставить("ИмяРегистраПереданные", "ПартииТоваровПереданныеМеждународныйУчет");
		
		СтруктураПараметров.Вставить("ТаблицаВыполненныхДвижений", ТаблицаРезультатаЗапроса);
		
		СтруктураПараметров.Вставить("РегламентныйДокумент", РегламентныйДокумент);
		СтруктураПараметров.Вставить("ТаблицаТоваров", ТаблицаТоваров);
		
		// Движения - наборы записей по регистрам
		УправлениеЗапасамиПартионныйУчет.СоздатьНаборыЗаписей(СтруктураПараметров, ТаблицаРезультатаЗапроса, РегламентныйДокумент);
		
		Если НЕ ДопПараметры.Свойство("Период", ПериодЗаписей) Тогда
			
			Если РегламентныйДокумент.Метаданные().Реквизиты.Найти("ПериодРегистрации") <> Неопределено Тогда
				ПериодЗаписей = КонецМесяца(РегламентныйДокумент.ПериодРегистрации);
			Иначе
				ПериодЗаписей = РегламентныйДокумент.Дата;
			КонецЕсли;
			
		КонецЕсли;
		
		УправлениеЗапасамиПартионныйУчет.ПодготовитьНаборыЗаписей(СтруктураПараметров, ТаблицаРезультатаЗапроса, ПериодЗаписей, РегламентныйДокумент, Ложь);
		
		// Вызов процедуры расчета по средней
		РассчитатьСписаниеПоСредней(ТаблицаТоваров, ДатаНач, ДатаКон, СтруктураПараметров);
		
		УправлениеЗапасамиПартионныйУчет.ЗаписатьДвиженияДокумента(СтруктураПараметров, ТаблицаРезультатаЗапроса, Ложь);
	КонецЕсли;
	
	
КонецПроцедуры // СкорректироватьСписаниеМеж()

// Запрос по списанию: Упр учет
//
// Параметры:
//	Нет.
//
Процедура ЗаполнитьЗапросПоСписаниюУпр(Запрос, МассивНоменклатуры, ДопПараметры)
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	""НаСкладах"" КАК СписаноИз,
	|	Источник.Организация КАК Организация,
	|	Источник.Номенклатура,
	|	Источник.Склад,
	|	Источник.ХарактеристикаНоменклатуры,
	|	Источник.СерияНоменклатуры,
	|	Источник.ДокументОприходования,
	|	Источник.СтатусПартии,
	|	Источник.Заказ,
	|	СУММА(Источник.Количество) КАК Количество,
	|	СУММА(Источник.Стоимость) КАК Стоимость,
	|	0 КАК СтоимостьПоступление,
	|	NULL КАК СтатусПередачи,
	//|	NULL КАК ДокументПередачи,
	|	МатериалыВЭксплуатации.ДокументПередачи КАК ДокументПередачи,
	|	NULL КАК ДоговорКонтрагента,
	|	ВЫБОР
	|		КОГДА (НЕ Себестоимость.ЗаказПокупателя ЕСТЬ NULL )
	|			ТОГДА Себестоимость.ЗаказПокупателя
	|		КОГДА (НЕ НЗП.Заказ ЕСТЬ NULL )
	|			ТОГДА НЗП.Заказ
	|		КОГДА (НЕ Затраты.Заказ ЕСТЬ NULL )
	|			ТОГДА Затраты.Заказ
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ЗаказСписания,
	|	Источник.КодОперации КАК КодОперацииПартииТоваров,
	|	ВЫБОР
	|		КОГДА Источник.ДокументДвижения <> НЕОПРЕДЕЛЕНО
	|			ТОГДА Источник.ДокументДвижения
	|		ИНАЧЕ Источник.Регистратор
	|	КОНЕЦ КАК Регистратор,
	|	ВЫБОР
	|		КОГДА Источник.ДокументДвижения <> НЕОПРЕДЕЛЕНО
	|			ТОГДА Источник.ДокументДвиженияПериод
	|		ИНАЧЕ Источник.Период
	|	КОНЕЦ КАК Период,
	|	Источник.Качество,
	|	ВЫБОР
	|		КОГДА (НЕ Затраты.СтатьяЗатрат ЕСТЬ NULL )
	|			ТОГДА Затраты.СтатьяЗатрат
	|		КОГДА (НЕ НЗП.СтатьяЗатрат ЕСТЬ NULL )
	|			ТОГДА НЗП.СтатьяЗатрат
	|		КОГДА (НЕ БракВПроизводстве.СтатьяЗатрат ЕСТЬ NULL )
	|			ТОГДА БракВПроизводстве.СтатьяЗатрат
	|		КОГДА (НЕ ЗатратыНаСтроительствоОС.СтатьяЗатрат ЕСТЬ NULL )
	|			ТОГДА ЗатратыНаСтроительствоОС.СтатьяЗатрат
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК СтатьяЗатрат,
	|	ВЫБОР
	|		КОГДА (НЕ Себестоимость.Подразделение ЕСТЬ NULL )
	|			ТОГДА Себестоимость.Подразделение
	|		КОГДА (НЕ Затраты.Подразделение ЕСТЬ NULL )
	|			ТОГДА Затраты.Подразделение
	|		КОГДА (НЕ НЗП.Подразделение ЕСТЬ NULL )
	|			ТОГДА НЗП.Подразделение
	|		КОГДА (НЕ БракВПроизводстве.Подразделение ЕСТЬ NULL )
	|			ТОГДА БракВПроизводстве.Подразделение
	|		КОГДА (НЕ МатериалыВЭксплуатации.Подразделение ЕСТЬ NULL )
	|			ТОГДА МатериалыВЭксплуатации.Подразделение
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК Подразделение,
	|	ВЫБОР
	|		КОГДА (НЕ НЗП.НоменклатурнаяГруппа ЕСТЬ NULL )
	|			ТОГДА НЗП.НоменклатурнаяГруппа
	|		КОГДА (НЕ Затраты.НоменклатурнаяГруппа ЕСТЬ NULL )
	|			ТОГДА Затраты.НоменклатурнаяГруппа
	|		КОГДА (НЕ БракВПроизводстве.НоменклатурнаяГруппа ЕСТЬ NULL )
	|			ТОГДА БракВПроизводстве.НоменклатурнаяГруппа
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК НоменклатурнаяГруппа,
	|	БракВПроизводстве.Продукция,
	|	ЗатратыНаСтроительствоОС.ОбъектСтроительства,
	|	ВЫБОР
	|		КОГДА (НЕ БракВПроизводстве.ХарактеристикаПродукции ЕСТЬ NULL )
	|			ТОГДА БракВПроизводстве.ХарактеристикаПродукции
	|		КОГДА (НЕ ИсточникДляКомплектации.ХарактеристикаНоменклатуры ЕСТЬ NULL )
	|			ТОГДА ИсточникДляКомплектации.ХарактеристикаНоменклатуры
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ХарактеристикаНоменклатурыНовая,
	|	ВЫБОР
	|		КОГДА (НЕ БракВПроизводстве.СерияПродукции ЕСТЬ NULL )
	|			ТОГДА БракВПроизводстве.СерияПродукции
	|		КОГДА (НЕ ИсточникДляКомплектации.СерияНоменклатуры ЕСТЬ NULL )
	|			ТОГДА ИсточникДляКомплектации.СерияНоменклатуры
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК СерияНоменклатурыНовая,
	|	ВЫБОР
	|		КОГДА (НЕ ИсточникДляКомплектации.Номенклатура ЕСТЬ NULL )
	|			ТОГДА ИсточникДляКомплектации.Номенклатура
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК НоменклатураНовая,
	|	ВЫБОР
	|		КОГДА (НЕ ИсточникДляКомплектации.ДокументОприходования ЕСТЬ NULL )
	|			ТОГДА ИсточникДляКомплектации.ДокументОприходования
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ДокументОприходованияНовый,
	|	ИсточникДляКомплектации.СтатусПартии КАК СтатусПартииНовый,
	|	Источник.Номенклатура.ВестиПартионныйУчетПоСериям КАК ВестиПартионныйУчетПоСериям,
	|	ВЫБОР
	|		КОГДА (НЕ Затраты.Проект ЕСТЬ NULL )
	|			ТОГДА Затраты.Проект
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК Проект,
	|	ВЫБОР
	|		КОГДА Себестоимость.Номенклатура <> Источник.Номенклатура
	|			ТОГДА Себестоимость.Номенклатура
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК НоменклатураКомплекта,
	|	ВЫБОР
	|		КОГДА Себестоимость.ХарактеристикаНоменклатуры <> Источник.ХарактеристикаНоменклатуры
	|			ТОГДА Себестоимость.ХарактеристикаНоменклатуры
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ХарактеристикаКомплекта,	
	|	СУММА(ВЫБОР
	|		КОГДА Себестоимость.Номенклатура <> Источник.Номенклатура
	|			ТОГДА Себестоимость.Количество
	|		ИНАЧЕ 0
	|	КОНЕЦ) КАК КоличествоКомплекта,	
	|	ЕСТЬNULL(МатериалыВЭксплуатации.ФизЛицо, НЕОПРЕДЕЛЕНО) КАК ФизЛицо,
	|	ЕСТЬNULL(МатериалыВЭксплуатации.НазначениеИспользования, НЕОПРЕДЕЛЕНО) КАК НазначениеИспользования,
	|	ЕСТЬNULL(НЗП.СерияЗатраты, НЕОПРЕДЕЛЕНО) КАК СерияНоменклтатурыНЗП,
	|	Источник.НомерСтрокиСписанныхТоваров КАК НомерСтрокиСписанныхТоваров
	|ИЗ
	|	РегистрНакопления.ПартииТоваровНаСкладах КАК Источник
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.Затраты КАК Затраты
	|		ПО Источник.Регистратор = Затраты.Регистратор
	|			И Источник.НомерКорСтроки = Затраты.НомерСтроки
	|			И (Источник.КодОперации В (&КодыСписаниеНаЗатраты))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПродажиСебестоимость КАК Себестоимость
	|		ПО Источник.Регистратор = Себестоимость.Регистратор
	|			И Источник.НомерКорСтроки = Себестоимость.НомерСтроки
	|			И (Источник.КодОперации В (&КодыСписаниеНаСебестоимость))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.НезавершенноеПроизводство КАК НЗП
	|		ПО Источник.Регистратор = НЗП.Регистратор
	|			И Источник.НомерКорСтроки = НЗП.НомерСтроки
	|			И (Источник.КодОперации В (&КодыСписаниеВНЗП))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.БракВПроизводстве КАК БракВПроизводстве
	|		ПО Источник.Регистратор = БракВПроизводстве.Регистратор
	|			И Источник.НомерКорСтроки = БракВПроизводстве.НомерСтроки
	|			И (Источник.КодОперации В (&КодыСписаниеНаБрак))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗатратыНаСтроительствоОбъектовОсновныхСредств КАК ЗатратыНаСтроительствоОС
	|		ПО Источник.Регистратор = ЗатратыНаСтроительствоОС.Регистратор
	|			И Источник.НомерКорСтроки = ЗатратыНаСтроительствоОС.НомерСтроки
	|			И (Источник.КодОперации В (&КодыСтроительствоОбъектовОС))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПартииТоваровНаСкладах КАК ИсточникДляКомплектации
	|		ПО Источник.Регистратор = ИсточникДляКомплектации.Регистратор
	|			И Источник.НомерКорСтроки = ИсточникДляКомплектации.НомерСтроки
	|			И (Источник.КодОперации В (&КодКомплектация))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПартииМатериаловВЭксплуатации КАК МатериалыВЭксплуатации
	|		ПО Источник.Регистратор = МатериалыВЭксплуатации.Регистратор
	|			И (Источник.КодОперации В (&КодПередачаМатериалов))
	|			И Источник.НомерКорСтроки = МатериалыВЭксплуатации.НомерСтроки
	|ГДЕ
	|//ГДЕ
	|	Источник.Период МЕЖДУ &ДатаНач И &ДатаКон
	|	И Источник.ВидДвижения = &ВидДвиженияРасход
	|	И Источник.КодОперации В(&КодыСписание)
	|
	|СГРУППИРОВАТЬ ПО
	|	Источник.Организация,
	|	Источник.Номенклатура,
	|	Источник.Склад,
	|	Источник.ХарактеристикаНоменклатуры,
	|	Источник.СерияНоменклатуры,
	|	Источник.ДокументОприходования,
	|	МатериалыВЭксплуатации.ДокументПередачи,
	|	Источник.СтатусПартии,
	|	Источник.Заказ,
	|	Источник.КодОперации,
	|	Источник.Качество,
	|	БракВПроизводстве.Продукция,
	|	ЗатратыНаСтроительствоОС.ОбъектСтроительства,
	|	ВЫБОР
	|		КОГДА Источник.ДокументДвижения <> НЕОПРЕДЕЛЕНО
	|			ТОГДА Источник.ДокументДвижения
	|		ИНАЧЕ Источник.Регистратор
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА Источник.ДокументДвижения <> НЕОПРЕДЕЛЕНО
	|			ТОГДА Источник.ДокументДвиженияПериод
	|		ИНАЧЕ Источник.Период
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА (НЕ Себестоимость.Подразделение ЕСТЬ NULL )
	|			ТОГДА Себестоимость.Подразделение
	|		КОГДА (НЕ Затраты.Подразделение ЕСТЬ NULL )
	|			ТОГДА Затраты.Подразделение
	|		КОГДА (НЕ НЗП.Подразделение ЕСТЬ NULL )
	|			ТОГДА НЗП.Подразделение
	|		КОГДА (НЕ БракВПроизводстве.Подразделение ЕСТЬ NULL )
	|			ТОГДА БракВПроизводстве.Подразделение
	|		КОГДА (НЕ МатериалыВЭксплуатации.Подразделение ЕСТЬ NULL )
	|			ТОГДА МатериалыВЭксплуатации.Подразделение
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА (НЕ НЗП.НоменклатурнаяГруппа ЕСТЬ NULL )
	|			ТОГДА НЗП.НоменклатурнаяГруппа
	|		КОГДА (НЕ Затраты.НоменклатурнаяГруппа ЕСТЬ NULL )
	|			ТОГДА Затраты.НоменклатурнаяГруппа
	|		КОГДА (НЕ БракВПроизводстве.НоменклатурнаяГруппа ЕСТЬ NULL )
	|			ТОГДА БракВПроизводстве.НоменклатурнаяГруппа
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА (НЕ Себестоимость.ЗаказПокупателя ЕСТЬ NULL )
	|			ТОГДА Себестоимость.ЗаказПокупателя
	|		КОГДА (НЕ НЗП.Заказ ЕСТЬ NULL )
	|			ТОГДА НЗП.Заказ
	|		КОГДА (НЕ Затраты.Заказ ЕСТЬ NULL )
	|			ТОГДА Затраты.Заказ
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА (НЕ Затраты.СтатьяЗатрат ЕСТЬ NULL )
	|			ТОГДА Затраты.СтатьяЗатрат
	|		КОГДА (НЕ НЗП.СтатьяЗатрат ЕСТЬ NULL )
	|			ТОГДА НЗП.СтатьяЗатрат
	|		КОГДА (НЕ БракВПроизводстве.СтатьяЗатрат ЕСТЬ NULL )
	|			ТОГДА БракВПроизводстве.СтатьяЗатрат
	|		КОГДА (НЕ ЗатратыНаСтроительствоОС.СтатьяЗатрат ЕСТЬ NULL )
	|			ТОГДА ЗатратыНаСтроительствоОС.СтатьяЗатрат
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА (НЕ БракВПроизводстве.ХарактеристикаПродукции ЕСТЬ NULL )
	|			ТОГДА БракВПроизводстве.ХарактеристикаПродукции
	|		КОГДА (НЕ ИсточникДляКомплектации.ХарактеристикаНоменклатуры ЕСТЬ NULL )
	|			ТОГДА ИсточникДляКомплектации.ХарактеристикаНоменклатуры
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА (НЕ БракВПроизводстве.СерияПродукции ЕСТЬ NULL )
	|			ТОГДА БракВПроизводстве.СерияПродукции
	|		КОГДА (НЕ ИсточникДляКомплектации.СерияНоменклатуры ЕСТЬ NULL )
	|			ТОГДА ИсточникДляКомплектации.СерияНоменклатуры
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА (НЕ ИсточникДляКомплектации.Номенклатура ЕСТЬ NULL )
	|			ТОГДА ИсточникДляКомплектации.Номенклатура
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА (НЕ ИсточникДляКомплектации.ДокументОприходования ЕСТЬ NULL )
	|			ТОГДА ИсточникДляКомплектации.ДокументОприходования
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ИсточникДляКомплектации.СтатусПартии,
	|	Источник.Номенклатура.ВестиПартионныйУчетПоСериям,
	|	ВЫБОР
	|		КОГДА (НЕ Затраты.Проект ЕСТЬ NULL )
	|			ТОГДА Затраты.Проект
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА Себестоимость.Номенклатура <> Источник.Номенклатура
	|			ТОГДА Себестоимость.Номенклатура
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА Себестоимость.ХарактеристикаНоменклатуры <> Источник.ХарактеристикаНоменклатуры
	|			ТОГДА Себестоимость.ХарактеристикаНоменклатуры
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,	
	|	ЕСТЬNULL(МатериалыВЭксплуатации.ФизЛицо, НЕОПРЕДЕЛЕНО),
	|	ЕСТЬNULL(МатериалыВЭксплуатации.НазначениеИспользования, НЕОПРЕДЕЛЕНО),
	|	ЕСТЬNULL(НЗП.СерияЗатраты, НЕОПРЕДЕЛЕНО),
	|	Источник.НомерСтрокиСписанныхТоваров
	|
	|ИМЕЮЩИЕ
	|	СУММА(Источник.Количество) <> 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""Переданные"",
	|	Источник.Организация,
	|	Источник.Номенклатура,
	|	NULL,
	|	Источник.ХарактеристикаНоменклатуры,
	|	NULL,
	|	Источник.ДокументОприходования,
	|	Источник.СтатусПартии,
	|	NULL,
	|	СУММА(Источник.Количество),
	|	СУММА(Источник.Стоимость),
	|	0,
	|	Источник.СтатусПередачи,
	|	Источник.ДокументПередачи,
	|	Источник.ДоговорКонтрагента,
	|	ВЫБОР
	|		КОГДА (НЕ Себестоимость.ЗаказПокупателя ЕСТЬ NULL )
	|			ТОГДА Себестоимость.ЗаказПокупателя
	|		КОГДА (НЕ НЗП.Заказ ЕСТЬ NULL )
	|			ТОГДА НЗП.Заказ
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	Источник.КодОперации,
	|	ВЫБОР
	|		КОГДА Источник.ДокументДвижения <> НЕОПРЕДЕЛЕНО
	|			ТОГДА Источник.ДокументДвижения
	|		ИНАЧЕ Источник.Регистратор
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА Источник.ДокументДвижения <> НЕОПРЕДЕЛЕНО
	|			ТОГДА Источник.ДокументДвиженияПериод
	|		ИНАЧЕ Источник.Период
	|	КОНЕЦ,
	|	NULL,
	|	ВЫБОР
	|		КОГДА (НЕ НЗП.СтатьяЗатрат ЕСТЬ NULL )
	|			ТОГДА НЗП.СтатьяЗатрат
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА (НЕ Себестоимость.Подразделение ЕСТЬ NULL )
	|			ТОГДА Себестоимость.Подразделение
	|		КОГДА (НЕ НЗП.Подразделение ЕСТЬ NULL )
	|			ТОГДА НЗП.Подразделение
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА (НЕ НЗП.НоменклатурнаяГруппа ЕСТЬ NULL )
	|			ТОГДА НЗП.НоменклатурнаяГруппа
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	Источник.Номенклатура.ВестиПартионныйУчетПоСериям,
	|	NULL,
	|	NULL,
	|	NULL,
	|	0,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL
	|ИЗ
	|	РегистрНакопления.ПартииТоваровПереданные КАК Источник
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПродажиСебестоимость КАК Себестоимость
	|		ПО Источник.Регистратор = Себестоимость.Регистратор
	|			И Источник.НомерКорСтроки = Себестоимость.НомерСтроки
	|			И (Источник.КодОперации В (&КодыСписаниеНаСебестоимость))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.НезавершенноеПроизводство КАК НЗП
	|		ПО Источник.Регистратор = НЗП.Регистратор
	|			И Источник.НомерКорСтроки = НЗП.НомерСтроки
	|			И (Источник.КодОперации В (&СписаниеПартийПереданныхВПроизводство))
	|ГДЕ
	|//ГДЕ
	|	Источник.Период МЕЖДУ &ДатаНач И &ДатаКон
	|	И Источник.ВидДвижения = &ВидДвиженияРасход
	|	И Источник.КодОперации В(&КодыСписание)
	|
	|СГРУППИРОВАТЬ ПО
	|	Источник.Организация,
	|	Источник.Номенклатура,
	|	Источник.ХарактеристикаНоменклатуры,
	|	Источник.ДокументОприходования,
	|	Источник.СтатусПартии,
	|	Источник.СтатусПередачи,
	|	Источник.ДокументПередачи,
	|	Источник.ДоговорКонтрагента,
	|	Источник.КодОперации,
	|	ВЫБОР
	|		КОГДА Источник.ДокументДвижения <> НЕОПРЕДЕЛЕНО
	|			ТОГДА Источник.ДокументДвижения
	|		ИНАЧЕ Источник.Регистратор
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА Источник.ДокументДвижения <> НЕОПРЕДЕЛЕНО
	|			ТОГДА Источник.ДокументДвиженияПериод
	|		ИНАЧЕ Источник.Период
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА (НЕ Себестоимость.Подразделение ЕСТЬ NULL )
	|			ТОГДА Себестоимость.Подразделение
	|		КОГДА (НЕ НЗП.Подразделение ЕСТЬ NULL )
	|			ТОГДА НЗП.Подразделение
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА (НЕ НЗП.СтатьяЗатрат ЕСТЬ NULL )
	|			ТОГДА НЗП.СтатьяЗатрат
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА (НЕ НЗП.НоменклатурнаяГруппа ЕСТЬ NULL )
	|			ТОГДА НЗП.НоменклатурнаяГруппа
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА (НЕ Себестоимость.ЗаказПокупателя ЕСТЬ NULL )
	|			ТОГДА Себестоимость.ЗаказПокупателя
	|		КОГДА (НЕ НЗП.Заказ ЕСТЬ NULL )
	|			ТОГДА НЗП.Заказ
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	Источник.Номенклатура.ВестиПартионныйУчетПоСериям
	|
	|ИМЕЮЩИЕ
	|	СУММА(Источник.Количество) <> 0
	|
	//Партии материалов в эксплуатации
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""ВЭксплуатации"",
	|	NULL,
	|	Источник.Номенклатура,
	|	NULL,
	|	Источник.ХарактеристикаНоменклатуры,
	|	Источник.СерияНоменклатуры,
	|	NULL,
	|	NULL,
	|	NULL,
	|	СУММА(Источник.Количество),
	|	СУММА(Источник.Стоимость),
	|	0,
	|	NULL,
	|	Источник.ДокументПередачи,
	|	NULL,
	|	NULL,
	|	Источник.КодОперации,
	|	ВЫБОР
	|		КОГДА Источник.ДокументДвижения <> НЕОПРЕДЕЛЕНО
	|			ТОГДА Источник.ДокументДвижения
	|		ИНАЧЕ Источник.Регистратор
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА Источник.ДокументДвижения <> НЕОПРЕДЕЛЕНО
	|			ТОГДА Источник.ДокументДвиженияПериод
	|		ИНАЧЕ Источник.Период
	|	КОНЕЦ,
	|	NULL,
	|	NULL,
	|	Источник.Подразделение,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	Источник.Номенклатура.ВестиПартионныйУчетПоСериям,
	|	NULL,
	|	NULL,
	|	NULL,
	|	0,
	|	Источник.ФизЛицо,
	|	Источник.НазначениеИспользования,
	|	NULL,
	|	NULL
	|ИЗ
	|	РегистрНакопления.ПартииМатериаловВЭксплуатации КАК Источник
	|ГДЕ
	|	Источник.Период МЕЖДУ &ДатаНач И &ДатаКон
	|	И Источник.ВидДвижения = &ВидДвиженияРасход
	|	И Источник.КодОперации В(&КодыСписание)
	|
	|СГРУППИРОВАТЬ ПО
	|	Источник.Номенклатура,
	|	Источник.ХарактеристикаНоменклатуры,
	|	Источник.СерияНоменклатуры,
	|	Источник.ДокументПередачи,
	|	Источник.КодОперации,
	|	ВЫБОР
	|		КОГДА Источник.ДокументДвижения <> НЕОПРЕДЕЛЕНО
	|			ТОГДА Источник.ДокументДвижения
	|		ИНАЧЕ Источник.Регистратор
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА Источник.ДокументДвижения <> НЕОПРЕДЕЛЕНО
	|			ТОГДА Источник.ДокументДвиженияПериод
	|		ИНАЧЕ Источник.Период
	|	КОНЕЦ,
	|	Источник.Подразделение,
	|	Источник.Номенклатура.ВестиПартионныйУчетПоСериям,
	|	Источник.ФизЛицо,
	|	Источник.НазначениеИспользования
	|
	|ИМЕЮЩИЕ
	|	СУММА(Источник.Количество) <> 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период,
	|	Регистратор";

	//Добавим дополнительный отбор по коду операции
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "//ГДЕ", "//ГДЕ 
	|	(НЕ Источник.СтатусПартии В (&ИсключаемыеСтатусыПартий)) И ");
	Запрос.УстановитьПараметр("ИсключаемыеСтатусыПартий",ПолучитьМассивИсключаемыхСтатусовПартий());
		
	// Добавим дополнительный отбор по номенклатуре
	Если МассивНоменклатуры <> Неопределено Тогда
		
		ТекстОграничениеНаПартии = "";
		СпособОценкиМПЗ = ВРег(Строка(УправлениеЗапасамиПартионныйУчет.ПолучитьПараметрУчетнойПолитикиПартионногоУчета("СпособОценкиМПЗ", "Упр", ДопПараметры)));
		Если СпособОценкиМПЗ = "ФИФО" 
			ИЛИ СпособОценкиМПЗ = "ЛИФО" Тогда
			
			ТекстОграничениеНаПартии = " И Источник.ДокументОприходования В (&МассивДокументовОприходования) ";
			
		КонецЕсли;
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//ГДЕ", "//ГДЕ 
		|	Источник.Номенклатура В (&МассивНоменклатуры)
		|	" + ТекстОграничениеНаПартии + " И ");
		
	КонецЕсли;
	
	// Встречный выпуск
	Если ДопПараметры.ВстречныйВыпуск Тогда
		
		КодыОпераций = Перечисления.КодыОперацийПартииТоваров;
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//ГДЕ",
			" //ГДЕ 
			|НЕ ( 1 В
			|	(ВЫБРАТЬ Первые 1
			|		1
			|	ИЗ
			|		РегистрСведений.КорректировкаВстречногоВыпускаПродукции КАК КорректировкаВстречногоВыпускаПродукции
			|	ГДЕ
			|		Источник.НомерСтрокиСписанныхТоваров = КорректировкаВстречногоВыпускаПродукции.НомерСтрокиСписанныхТоваров
			|		" + ДобавитьОтборПоВидуУчета("КорректировкаВстречногоВыпускаПродукции","Упр") + "
			|		И Источник.Регистратор = КорректировкаВстречногоВыпускаПродукции.Документ))
			| И");
		Запрос.УстановитьПараметр("СписаниеПартийВПроизводствоОперативно",КодыОпераций.СписаниеПартийВПроизводствоОперативно);
		
	КонецЕсли;

КонецПроцедуры // ЗаполнитьЗапросПоСписанию()


// Запрос по списанию: Бух учет
//
// Параметры:
//	Нет.
//
Процедура ЗаполнитьЗапросПоСписаниюБух(Запрос, МассивНоменклатуры, ДопПараметры)
	
	Организация = ДопПараметры.Организация;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	""НаСкладах"" КАК СписаноИз,
	|	Источник.Организация КАК Организация,
	|	Источник.Номенклатура,
	|	Источник.Склад,
	|	Источник.ХарактеристикаНоменклатуры,
	|	Источник.СерияНоменклатуры,
	|	Источник.ДокументОприходования,
	|	Источник.Заказ,
	|	СУММА(Источник.Количество) КАК Количество,
	|	СУММА(Источник.Стоимость) КАК Стоимость,
	|	0 КАК СтоимостьПоступление,
	|	МатериалыВЭксплуатации.ДокументПередачи КАК ДокументПередачи,
	|	NULL КАК ДоговорКонтрагента,
	|	Источник.КодОперации КАК КодОперацииПартииТоваров,
	|	Источник.Качество,
	|	БракВПроизводстве.Продукция,
	|	Источник.СчетУчета КАК СчетУчетаБУ,
	|	Источник.КорСчет КАК КорСчетБУ,
	|	Источник.КорСубконто1 КАК КорСубконтоБУ1,
	|	Источник.КорСубконто2 КАК КорСубконтоБУ2,
	|	Источник.КорСубконто3 КАК КорСубконтоБУ3,
	|	ВЫБОР
	|		КОГДА (НЕ Затраты.СтатьяЗатрат ЕСТЬ NULL )
	|			ТОГДА Затраты.СтатьяЗатрат
	|		КОГДА (НЕ НЗП.СтатьяЗатрат ЕСТЬ NULL )
	|			ТОГДА НЗП.СтатьяЗатрат
	|		КОГДА (НЕ БракВПроизводстве.СтатьяЗатрат ЕСТЬ NULL )
	|			ТОГДА БракВПроизводстве.СтатьяЗатрат
	|		КОГДА (НЕ СписанныеТовары.СтатьяЗатрат ЕСТЬ NULL )
	|			ТОГДА СписанныеТовары.СтатьяЗатрат
	|		КОГДА (НЕ СписанныеТоварыПоДокументуДвижения.СтатьяЗатрат ЕСТЬ NULL )
	|			ТОГДА СписанныеТоварыПоДокументуДвижения.СтатьяЗатрат
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК СтатьяЗатрат,
	|	ВЫБОР
	|		КОГДА (НЕ Затраты.Подразделение ЕСТЬ NULL )
	|			ТОГДА Затраты.Подразделение
	|		КОГДА (НЕ НЗП.Подразделение ЕСТЬ NULL )
	|			ТОГДА НЗП.Подразделение
	|		КОГДА (НЕ БракВПроизводстве.Подразделение ЕСТЬ NULL )
	|			ТОГДА БракВПроизводстве.Подразделение
	|		КОГДА (НЕ МатериалыВЭксплуатации.Подразделение ЕСТЬ NULL )
	|			ТОГДА МатериалыВЭксплуатации.Подразделение
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ПодразделениеОрганизации,
	|	ВЫБОР
	|		КОГДА (НЕ НЗП.НоменклатурнаяГруппа ЕСТЬ NULL )
	|			ТОГДА НЗП.НоменклатурнаяГруппа
	|		КОГДА (НЕ Затраты.НоменклатурнаяГруппа ЕСТЬ NULL )
	|			ТОГДА Затраты.НоменклатурнаяГруппа
	|		КОГДА (НЕ БракВПроизводстве.НоменклатурнаяГруппа ЕСТЬ NULL )
	|			ТОГДА БракВПроизводстве.НоменклатурнаяГруппа
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК НоменклатурнаяГруппа,
	|	ВЫБОР
	|		КОГДА (НЕ НЗП.Заказ ЕСТЬ NULL )
	|			ТОГДА НЗП.Заказ
	|		КОГДА (НЕ Затраты.Заказ ЕСТЬ NULL )
	|			ТОГДА Затраты.Заказ
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ЗаказСписания,
	|	ВЫБОР
	|		КОГДА Источник.ДокументДвижения <> НЕОПРЕДЕЛЕНО
	|			ТОГДА Источник.ДокументДвижения
	|		ИНАЧЕ Источник.Регистратор
	|	КОНЕЦ КАК Регистратор,
	|	ВЫБОР
	|		КОГДА Источник.ДокументДвижения <> НЕОПРЕДЕЛЕНО
	|			ТОГДА Источник.ДокументДвиженияПериод
	|		ИНАЧЕ Источник.Период
	|	КОНЕЦ КАК Период,
	|	ВЫБОР
	|		КОГДА (НЕ БракВПроизводстве.ХарактеристикаПродукции ЕСТЬ NULL )
	|			ТОГДА БракВПроизводстве.ХарактеристикаПродукции
	|		КОГДА (НЕ ИсточникДляКомплектации.ХарактеристикаНоменклатуры ЕСТЬ NULL )
	|			ТОГДА ИсточникДляКомплектации.ХарактеристикаНоменклатуры
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ХарактеристикаНоменклатурыНовая,
	|	ВЫБОР
	|		КОГДА (НЕ БракВПроизводстве.СерияПродукции ЕСТЬ NULL )
	|			ТОГДА БракВПроизводстве.СерияПродукции
	|		КОГДА (НЕ ИсточникДляКомплектации.СерияНоменклатуры ЕСТЬ NULL )
	|			ТОГДА ИсточникДляКомплектации.СерияНоменклатуры
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК СерияНоменклатурыНовая,
	|	ВЫБОР
	|		КОГДА (НЕ ИсточникДляКомплектации.Номенклатура ЕСТЬ NULL )
	|			ТОГДА ИсточникДляКомплектации.Номенклатура
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК НоменклатураНовая,
	|	ВЫБОР
	|		КОГДА (НЕ ИсточникДляКомплектации.ДокументОприходования ЕСТЬ NULL )
	|			ТОГДА ИсточникДляКомплектации.ДокументОприходования
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ДокументОприходованияНовый,
	|	Источник.Номенклатура.ВестиПартионныйУчетПоСериям КАК ВестиПартионныйУчетПоСериям,
	|	ЕСТЬNULL(МатериалыВЭксплуатации.ФизЛицо, НЕОПРЕДЕЛЕНО) КАК ФизЛицо,
	|	ЕСТЬNULL(МатериалыВЭксплуатации.НазначениеИспользования, НЕОПРЕДЕЛЕНО) КАК НазначениеИспользования,
	|	ЕСТЬNULL(НЗП.СерияЗатраты, НЕОПРЕДЕЛЕНО) КАК СерияНоменклтатурыНЗП,
	|	Источник.НомерСтрокиСписанныхТоваров КАК НомерСтрокиСписанныхТоваров
	|ИЗ
	|	РегистрНакопления.ПартииТоваровНаСкладахБухгалтерскийУчет КАК Источник
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗатратыБухгалтерскийУчет КАК Затраты
	|		ПО Источник.Регистратор = Затраты.Регистратор
	|			И Источник.НомерКорСтроки = Затраты.НомерСтроки
	|			И Источник.КорСчет = Затраты.СчетУчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.НезавершенноеПроизводствоБухгалтерскийУчет КАК НЗП
	|		ПО Источник.Регистратор = НЗП.Регистратор
	|			И Источник.НомерКорСтроки = НЗП.НомерСтроки
	|			И Источник.КорСчет = НЗП.СчетУчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.БракВПроизводствеБухгалтерскийУчет КАК БракВПроизводстве
	|		ПО Источник.Регистратор = БракВПроизводстве.Регистратор
	|			И Источник.НомерКорСтроки = БракВПроизводстве.НомерСтроки
	|			И Источник.КорСчет = БракВПроизводстве.СчетУчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПартииТоваровНаСкладахБухгалтерскийУчет КАК ИсточникДляКомплектации
	|		ПО Источник.Регистратор = ИсточникДляКомплектации.Регистратор
	|			И Источник.НомерКорСтроки = ИсточникДляКомплектации.НомерСтроки
	|			И (Источник.КодОперации В (&КодКомплектация))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПартииМатериаловВЭксплуатацииБухгалтерскийУчет КАК МатериалыВЭксплуатации
	|		ПО Источник.Регистратор = МатериалыВЭксплуатации.Регистратор
	|			И Источник.НомерКорСтроки = МатериалыВЭксплуатации.НомерСтроки
	|			И (Источник.КодОперации В (&КодПередачаМатериалов))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СписанныеТовары КАК СписанныеТовары
	|		ПО Источник.Регистратор = СписанныеТовары.Регистратор
	|			И Источник.НомерСтрокиСписанныхТоваров = СписанныеТовары.НомерСтроки
	|			И Источник.Регистратор ССЫЛКА Документ.ТребованиеНакладная
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СписанныеТовары КАК СписанныеТоварыПоДокументуДвижения
	|		ПО Источник.ДокументДвижения = СписанныеТоварыПоДокументуДвижения.Регистратор
	|			И Источник.НомерСтрокиСписанныхТоваров = СписанныеТоварыПоДокументуДвижения.НомерСтроки
	|			И Источник.ДокументДвижения ССЫЛКА Документ.ТребованиеНакладная
	|ГДЕ
	|//ГДЕ
	|	Источник.Период МЕЖДУ &ДатаНач И &ДатаКон
	|	И Источник.ВидДвижения = &ВидДвиженияРасход
	|	И Источник.КодОперации В(&КодыСписание)
	|
	|СГРУППИРОВАТЬ ПО
	|	Источник.Номенклатура,
	|	Источник.Склад,
	|	Источник.ХарактеристикаНоменклатуры,
	|	Источник.СерияНоменклатуры,
	|	Источник.ДокументОприходования,
	|	МатериалыВЭксплуатации.ДокументПередачи,
	|	Источник.Заказ,
	|	Источник.КодОперации,
	|	Источник.Качество,
	|	БракВПроизводстве.Продукция,
	|	Источник.Организация,
	|	Источник.СчетУчета,
	|	Источник.КорСчет,
	|	Источник.КорСубконто1,
	|	Источник.КорСубконто2,
	|	Источник.КорСубконто3,
	|	ВЫБОР
	|		КОГДА (НЕ Затраты.СтатьяЗатрат ЕСТЬ NULL )
	|			ТОГДА Затраты.СтатьяЗатрат
	|		КОГДА (НЕ НЗП.СтатьяЗатрат ЕСТЬ NULL )
	|			ТОГДА НЗП.СтатьяЗатрат
	|		КОГДА (НЕ БракВПроизводстве.СтатьяЗатрат ЕСТЬ NULL )
	|			ТОГДА БракВПроизводстве.СтатьяЗатрат
	|		КОГДА (НЕ СписанныеТовары.СтатьяЗатрат ЕСТЬ NULL )
	|			ТОГДА СписанныеТовары.СтатьяЗатрат
	|		КОГДА (НЕ СписанныеТоварыПоДокументуДвижения.СтатьяЗатрат ЕСТЬ NULL )
	|			ТОГДА СписанныеТоварыПоДокументуДвижения.СтатьяЗатрат
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА (НЕ НЗП.Заказ ЕСТЬ NULL )
	|			ТОГДА НЗП.Заказ
	|		КОГДА (НЕ Затраты.Заказ ЕСТЬ NULL )
	|			ТОГДА Затраты.Заказ
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА Источник.ДокументДвижения <> НЕОПРЕДЕЛЕНО
	|			ТОГДА Источник.ДокументДвижения
	|		ИНАЧЕ Источник.Регистратор
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА Источник.ДокументДвижения <> НЕОПРЕДЕЛЕНО
	|			ТОГДА Источник.ДокументДвиженияПериод
	|		ИНАЧЕ Источник.Период
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА (НЕ БракВПроизводстве.ХарактеристикаПродукции ЕСТЬ NULL )
	|			ТОГДА БракВПроизводстве.ХарактеристикаПродукции
	|		КОГДА (НЕ ИсточникДляКомплектации.ХарактеристикаНоменклатуры ЕСТЬ NULL )
	|			ТОГДА ИсточникДляКомплектации.ХарактеристикаНоменклатуры
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА (НЕ БракВПроизводстве.СерияПродукции ЕСТЬ NULL )
	|			ТОГДА БракВПроизводстве.СерияПродукции
	|		КОГДА (НЕ ИсточникДляКомплектации.СерияНоменклатуры ЕСТЬ NULL )
	|			ТОГДА ИсточникДляКомплектации.СерияНоменклатуры
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА (НЕ ИсточникДляКомплектации.Номенклатура ЕСТЬ NULL )
	|			ТОГДА ИсточникДляКомплектации.Номенклатура
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА (НЕ ИсточникДляКомплектации.ДокументОприходования ЕСТЬ NULL )
	|			ТОГДА ИсточникДляКомплектации.ДокументОприходования
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА (НЕ Затраты.Подразделение ЕСТЬ NULL )
	|			ТОГДА Затраты.Подразделение
	|		КОГДА (НЕ НЗП.Подразделение ЕСТЬ NULL )
	|			ТОГДА НЗП.Подразделение
	|		КОГДА (НЕ БракВПроизводстве.Подразделение ЕСТЬ NULL )
	|			ТОГДА БракВПроизводстве.Подразделение
	|		КОГДА (НЕ МатериалыВЭксплуатации.Подразделение ЕСТЬ NULL )
	|			ТОГДА МатериалыВЭксплуатации.Подразделение
    |		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА (НЕ НЗП.НоменклатурнаяГруппа ЕСТЬ NULL )
	|			ТОГДА НЗП.НоменклатурнаяГруппа
	|		КОГДА (НЕ Затраты.НоменклатурнаяГруппа ЕСТЬ NULL )
	|			ТОГДА Затраты.НоменклатурнаяГруппа
	|		КОГДА (НЕ БракВПроизводстве.НоменклатурнаяГруппа ЕСТЬ NULL )
	|			ТОГДА БракВПроизводстве.НоменклатурнаяГруппа
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	Источник.Номенклатура.ВестиПартионныйУчетПоСериям,
	|	ЕСТЬNULL(МатериалыВЭксплуатации.ФизЛицо, НЕОПРЕДЕЛЕНО),
	|	ЕСТЬNULL(МатериалыВЭксплуатации.НазначениеИспользования, НЕОПРЕДЕЛЕНО),
	|	ЕСТЬNULL(НЗП.СерияЗатраты, НЕОПРЕДЕЛЕНО),
	|	Источник.НомерСтрокиСписанныхТоваров
	|
	|ИМЕЮЩИЕ
	|	СУММА(Источник.Количество) <> 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""Переданные"",
	|	Источник.Организация,
	|	Источник.Номенклатура,
	|	NULL,
	|	Источник.ХарактеристикаНоменклатуры,
	|	NULL,
	|	Источник.ДокументОприходования,
	|	NULL,
	|	СУММА(Источник.Количество),
	|	СУММА(Источник.Стоимость),
	|	0,
	|	Источник.ДокументПередачи,
	|	Источник.ДоговорКонтрагента,
	|	Источник.КодОперации,
	|	NULL,
	|	NULL,
	|	Источник.СчетУчета,
	|	Источник.КорСчет,
	|	Источник.КорСубконто1,
	|	Источник.КорСубконто2,
	|	Источник.КорСубконто3,
	|	ВЫБОР
	|		КОГДА (НЕ НЗП.СтатьяЗатрат ЕСТЬ NULL )
	|			ТОГДА НЗП.СтатьяЗатрат
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА (НЕ НЗП.Подразделение ЕСТЬ NULL )
	|			ТОГДА НЗП.Подразделение
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА (НЕ НЗП.НоменклатурнаяГруппа ЕСТЬ NULL )
	|			ТОГДА НЗП.НоменклатурнаяГруппа
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА (НЕ НЗП.Заказ ЕСТЬ NULL )
	|			ТОГДА НЗП.Заказ
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА Источник.ДокументДвижения <> НЕОПРЕДЕЛЕНО
	|			ТОГДА Источник.ДокументДвижения
	|		ИНАЧЕ Источник.Регистратор
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА Источник.ДокументДвижения <> НЕОПРЕДЕЛЕНО
	|			ТОГДА Источник.ДокументДвиженияПериод
	|		ИНАЧЕ Источник.Период
	|	КОНЕЦ,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	Источник.Номенклатура.ВестиПартионныйУчетПоСериям,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL
	|ИЗ
	|	РегистрНакопления.ПартииТоваровПереданныеБухгалтерскийУчет КАК Источник
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.НезавершенноеПроизводствоБухгалтерскийУчет КАК НЗП
	|		ПО Источник.Регистратор = НЗП.Регистратор
	|			И Источник.НомерКорСтроки = НЗП.НомерСтроки
	|			И Источник.КорСчет = НЗП.СчетУчета
	|ГДЕ
	|//ГДЕ
	|	Источник.Период МЕЖДУ &ДатаНач И &ДатаКон
	|	И Источник.ВидДвижения = &ВидДвиженияРасход
	|	И Источник.КодОперации В(&КодыСписание)
	|
	|СГРУППИРОВАТЬ ПО
	|	Источник.Номенклатура,
	|	Источник.ХарактеристикаНоменклатуры,
	|	Источник.ДокументОприходования,
	|	Источник.ДокументПередачи,
	|	Источник.ДоговорКонтрагента,
	|	Источник.КодОперации,
	|	Источник.СчетУчета,
	|	Источник.Организация,
	|	Источник.КорСчет,
	|	Источник.КорСубконто1,
	|	Источник.КорСубконто2,
	|	Источник.КорСубконто3,
	|	ВЫБОР
	|		КОГДА Источник.ДокументДвижения <> НЕОПРЕДЕЛЕНО
	|			ТОГДА Источник.ДокументДвижения
	|		ИНАЧЕ Источник.Регистратор
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА Источник.ДокументДвижения <> НЕОПРЕДЕЛЕНО
	|			ТОГДА Источник.ДокументДвиженияПериод
	|		ИНАЧЕ Источник.Период
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА (НЕ НЗП.СтатьяЗатрат ЕСТЬ NULL )
	|			ТОГДА НЗП.СтатьяЗатрат
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА (НЕ НЗП.Подразделение ЕСТЬ NULL )
	|			ТОГДА НЗП.Подразделение
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА (НЕ НЗП.НоменклатурнаяГруппа ЕСТЬ NULL )
	|			ТОГДА НЗП.НоменклатурнаяГруппа
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА (НЕ НЗП.Заказ ЕСТЬ NULL )
	|			ТОГДА НЗП.Заказ
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	Источник.Номенклатура.ВестиПартионныйУчетПоСериям
//Партии материалов в эксплуатации
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""ВЭксплуатации"",
	|	Источник.Организация,
	|	Источник.Номенклатура,
	|	NULL,
	|	Источник.ХарактеристикаНоменклатуры,
	|	Источник.СерияНоменклатуры,
	|	NULL,
	|	NULL,
	|	СУММА(Источник.Количество),
	|	СУММА(Источник.Стоимость),
	|	0,
	|	Источник.ДокументПередачи,
	|	NULL,
	|	Источник.КодОперации,
	|	NULL,
	|	NULL,
	|	Источник.СчетУчета,
	|	СписанныеТовары.КорСчетБУ,
	|	СписанныеТовары.КорСубконтоБУ1,
	|	СписанныеТовары.КорСубконтоБУ2,
	|	СписанныеТовары.КорСубконтоБУ3,
	|	NULL,
	|	Источник.Подразделение,
	|	NULL,
	|	NULL,
	|	ВЫБОР
	|		КОГДА Источник.ДокументДвижения <> НЕОПРЕДЕЛЕНО
	|			ТОГДА Источник.ДокументДвижения
	|		ИНАЧЕ Источник.Регистратор
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА Источник.ДокументДвижения <> НЕОПРЕДЕЛЕНО
	|			ТОГДА Источник.ДокументДвиженияПериод
	|		ИНАЧЕ Источник.Период
	|	КОНЕЦ,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	Источник.Номенклатура.ВестиПартионныйУчетПоСериям,
	|	Источник.ФизЛицо,
	|	Источник.НазначениеИспользования,
	|	NULL,
	|	NULL
	|ИЗ
	|	РегистрНакопления.ПартииМатериаловВЭксплуатацииБухгалтерскийУчет КАК Источник
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СписанныеТовары КАК СписанныеТовары
	|		ПО Источник.Регистратор = СписанныеТовары.Регистратор
	|			И Источник.НомерСтрокиСписанныхТоваров = СписанныеТовары.НомерСтроки
	|ГДЕ
	|	Источник.Период МЕЖДУ &ДатаНач И &ДатаКон
	|	И Источник.ВидДвижения = &ВидДвиженияРасход
	|	И Источник.КодОперации В(&КодыСписание)
	|
	|СГРУППИРОВАТЬ ПО
	|	Источник.Номенклатура,
	|	Источник.ХарактеристикаНоменклатуры,
	|	Источник.СерияНоменклатуры,
	|	Источник.ДокументПередачи,
	|	Источник.КодОперации,
	|	Источник.СчетУчета,
	|	Источник.Организация,
	|	СписанныеТовары.КорСчетБУ,
	|	СписанныеТовары.КорСубконтоБУ1,
	|	СписанныеТовары.КорСубконтоБУ2,
	|	СписанныеТовары.КорСубконтоБУ3,
	|	ВЫБОР
	|		КОГДА Источник.ДокументДвижения <> НЕОПРЕДЕЛЕНО
	|			ТОГДА Источник.ДокументДвижения
	|		ИНАЧЕ Источник.Регистратор
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА Источник.ДокументДвижения <> НЕОПРЕДЕЛЕНО
	|			ТОГДА Источник.ДокументДвиженияПериод
	|		ИНАЧЕ Источник.Период
	|	КОНЕЦ,
	|	Источник.Подразделение,
	|	Источник.ФизЛицо,
	|	Источник.НазначениеИспользования,
	|	Источник.Номенклатура.ВестиПартионныйУчетПоСериям
	|
	|ИМЕЮЩИЕ
	|	СУММА(Источник.Количество) <> 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период,
	|	Регистратор";
	
	//Добавим дополнительный отбор по счету
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "//ГДЕ", "//ГДЕ
	|	(НЕ Источник.СчетУчета В (&СписокИсключаемыхСчетовУчета)) И ");
	
	Запрос.УстановитьПараметр("СписокИсключаемыхСчетовУчета",ПолучитьМассивИсключаемыхСчетов());
	
	// Если задана организация, отбор по организации 
	Если ЗначениеЗаполнено(Организация) Тогда
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//ГДЕ", "//ГДЕ 
		|	Источник.Организация = &Организация И ");
		
		Запрос.УстановитьПараметр("Организация", Организация);
		
	КонецЕсли;
	
	// Добавим дополнительный отбор по номенклатуре
	Если МассивНоменклатуры <> Неопределено Тогда
		
		ТекстОграничениеНаПартии = "";
		Если ЗначениеЗаполнено(Организация) Тогда
			СпособОценкиМПЗ = ВРег(Строка(УправлениеЗапасамиПартионныйУчет.ПолучитьПараметрУчетнойПолитикиПартионногоУчета("СпособОценкиМПЗ", "Бух", ДопПараметры)));
			Если СпособОценкиМПЗ = "ФИФО" 
				ИЛИ СпособОценкиМПЗ = "ЛИФО" Тогда
				
				ТекстОграничениеНаПартии = " И Источник.ДокументОприходования В (&МассивДокументовОприходования) ";
				
			КонецЕсли;
		КонецЕсли;
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//ГДЕ", "//ГДЕ 
		|	Источник.Номенклатура В (&МассивНоменклатуры)
		|	" + ТекстОграничениеНаПартии + " И ");
		
	КонецЕсли;
	
	// Встречный выпуск
	Если ДопПараметры.ВстречныйВыпуск Тогда
		КодыОпераций = Перечисления.КодыОперацийПартииТоваров;
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//ГДЕ",
			" //ГДЕ 
			|	НЕ ( 1 В
			|	(ВЫБРАТЬ Первые 1
			|		1
			|	ИЗ
			|		РегистрСведений.КорректировкаВстречногоВыпускаПродукции КАК КорректировкаВстречногоВыпускаПродукции
			|	ГДЕ
			|		Источник.НомерСтрокиСписанныхТоваров = КорректировкаВстречногоВыпускаПродукции.НомерСтрокиСписанныхТоваров
			|		" + ДобавитьОтборПоВидуУчета("КорректировкаВстречногоВыпускаПродукции","Бух") + "
			|		И Источник.Регистратор = КорректировкаВстречногоВыпускаПродукции.Документ))
			| И");
		Запрос.УстановитьПараметр("СписаниеПартийВПроизводствоОперативно",КодыОпераций.СписаниеПартийВПроизводствоОперативно);
	КонецЕсли;
	
КонецПроцедуры // ЗапросПоСписаниюБух()

// Запрос по списанию: Нал учет 
//
// Параметры:
//	Нет.
//
Процедура ЗаполнитьЗапросПоСписаниюНал(Запрос, МассивНоменклатуры, ДопПараметры)
	
	Организация = ДопПараметры.Организация;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	""НаСкладах"" КАК СписаноИз,
	|	Источник.Организация КАК Организация,
	|	Источник.Номенклатура,
	|	Источник.Склад,
	|	Источник.ХарактеристикаНоменклатуры,
	|	Источник.СерияНоменклатуры,
	|	Источник.ДокументОприходования,
	|	Источник.Заказ,
	|	СУММА(Источник.Количество) КАК Количество,
	|	СУММА(Источник.Стоимость) КАК Стоимость,
	|	0 КАК СтоимостьПоступление,
	|	МатериалыВЭксплуатации.ДокументПередачи КАК ДокументПередачи,
	|	NULL КАК ДоговорКонтрагента,
	|	Источник.КодОперации КАК КодОперацииПартииТоваров,
	|	Источник.Качество,
	|	БракВПроизводстве.Продукция,
	|	Источник.СчетУчета КАК СчетУчетаНУ,
	|	Источник.КорСчет КАК КорСчетНУ,
	|	Источник.КорСубконто1 КАК КорСубконтоБУ1,
	|	Источник.КорСубконто2 КАК КорСубконтоБУ2,
	|	Источник.КорСубконто3 КАК КорСубконтоБУ3,
	|	Источник.КорСубконто1 КАК КорСубконтоНУ1,
	|	Источник.КорСубконто2 КАК КорСубконтоНУ2,
	|	Источник.КорСубконто3 КАК КорСубконтоНУ3,
	|	СУММА(Источник.ПостояннаяРазница) КАК ПостояннаяРазница,
	|	СУММА(Источник.ВременнаяРазница) КАК ВременнаяРазница,
	|	ВЫБОР
	|		КОГДА (НЕ Затраты.СтатьяЗатрат ЕСТЬ NULL )
	|			ТОГДА Затраты.СтатьяЗатрат
	|		КОГДА (НЕ НЗП.СтатьяЗатрат ЕСТЬ NULL )
	|			ТОГДА НЗП.СтатьяЗатрат
	|		КОГДА (НЕ БракВПроизводстве.СтатьяЗатрат ЕСТЬ NULL )
	|			ТОГДА БракВПроизводстве.СтатьяЗатрат
	|		КОГДА (НЕ СписанныеТовары.СтатьяЗатрат ЕСТЬ NULL )
	|			ТОГДА СписанныеТовары.СтатьяЗатрат
	|		КОГДА (НЕ СписанныеТоварыПоДокументуДвижения.СтатьяЗатрат ЕСТЬ NULL )
	|			ТОГДА СписанныеТоварыПоДокументуДвижения.СтатьяЗатрат
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК СтатьяЗатрат,
	|	ВЫБОР
	|		КОГДА (НЕ Затраты.Подразделение ЕСТЬ NULL )
	|			ТОГДА Затраты.Подразделение
	|		КОГДА (НЕ НЗП.Подразделение ЕСТЬ NULL )
	|			ТОГДА НЗП.Подразделение
	|		КОГДА (НЕ БракВПроизводстве.Подразделение ЕСТЬ NULL )
	|			ТОГДА БракВПроизводстве.Подразделение
	|		КОГДА (НЕ МатериалыВЭксплуатации.Подразделение ЕСТЬ NULL )
	|			ТОГДА МатериалыВЭксплуатации.Подразделение	
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ПодразделениеОрганизации,
	|	ВЫБОР
	|		КОГДА (НЕ НЗП.НоменклатурнаяГруппа ЕСТЬ NULL )
	|			ТОГДА НЗП.НоменклатурнаяГруппа
	|		КОГДА (НЕ Затраты.НоменклатурнаяГруппа ЕСТЬ NULL )
	|			ТОГДА Затраты.НоменклатурнаяГруппа
	|		КОГДА (НЕ БракВПроизводстве.НоменклатурнаяГруппа ЕСТЬ NULL )
	|			ТОГДА БракВПроизводстве.НоменклатурнаяГруппа
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК НоменклатурнаяГруппа,
	|	ВЫБОР
	|		КОГДА (НЕ НЗП.Заказ ЕСТЬ NULL )
	|			ТОГДА НЗП.Заказ
	|		КОГДА (НЕ Затраты.Заказ ЕСТЬ NULL )
	|			ТОГДА Затраты.Заказ
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ЗаказСписания,
	|	ВЫБОР
	|		КОГДА Источник.ДокументДвижения <> НЕОПРЕДЕЛЕНО
	|			ТОГДА Источник.ДокументДвижения
	|		ИНАЧЕ Источник.Регистратор
	|	КОНЕЦ КАК Регистратор,
	|	ВЫБОР
	|		КОГДА Источник.ДокументДвижения <> НЕОПРЕДЕЛЕНО
	|			ТОГДА Источник.ДокументДвиженияПериод
	|		ИНАЧЕ Источник.Период
	|	КОНЕЦ КАК Период,
	|	ВЫБОР
	|		КОГДА (НЕ БракВПроизводстве.ХарактеристикаПродукции ЕСТЬ NULL )
	|			ТОГДА БракВПроизводстве.ХарактеристикаПродукции
	|		КОГДА (НЕ ИсточникДляКомплектации.ХарактеристикаНоменклатуры ЕСТЬ NULL )
	|			ТОГДА ИсточникДляКомплектации.ХарактеристикаНоменклатуры
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ХарактеристикаНоменклатурыНовая,
	|	ВЫБОР
	|		КОГДА (НЕ БракВПроизводстве.СерияПродукции ЕСТЬ NULL )
	|			ТОГДА БракВПроизводстве.СерияПродукции
	|		КОГДА (НЕ ИсточникДляКомплектации.СерияНоменклатуры ЕСТЬ NULL )
	|			ТОГДА ИсточникДляКомплектации.СерияНоменклатуры
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК СерияНоменклатурыНовая,
	|	ВЫБОР
	|		КОГДА (НЕ ИсточникДляКомплектации.Номенклатура ЕСТЬ NULL )
	|			ТОГДА ИсточникДляКомплектации.Номенклатура
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК НоменклатураНовая,
	|	ВЫБОР
	|		КОГДА (НЕ ИсточникДляКомплектации.ДокументОприходования ЕСТЬ NULL )
	|			ТОГДА ИсточникДляКомплектации.ДокументОприходования
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ДокументОприходованияНовый,
	|	Источник.Номенклатура.ВестиПартионныйУчетПоСериям КАК ВестиПартионныйУчетПоСериям,
	|	ЕСТЬNULL(МатериалыВЭксплуатации.ФизЛицо, НЕОПРЕДЕЛЕНО) КАК ФизЛицо,
	|	ЕСТЬNULL(МатериалыВЭксплуатации.НазначениеИспользования, НЕОПРЕДЕЛЕНО) КАК НазначениеИспользования,
	|	ЕСТЬNULL(НЗП.СерияЗатраты, НЕОПРЕДЕЛЕНО) КАК СерияНоменклтатурыНЗП,
	|	Источник.НомерСтрокиСписанныхТоваров КАК НомерСтрокиСписанныхТоваров
	|ИЗ
	|	РегистрНакопления.ПартииТоваровНаСкладахНалоговыйУчет КАК Источник
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗатратыНалоговыйУчет КАК Затраты
	|		ПО Источник.Регистратор = Затраты.Регистратор
	|			И Источник.НомерКорСтроки = Затраты.НомерСтроки
	|			И Источник.КорСчет = Затраты.СчетУчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.НезавершенноеПроизводствоНалоговыйУчет КАК НЗП
	|		ПО Источник.Регистратор = НЗП.Регистратор
	|			И Источник.НомерКорСтроки = НЗП.НомерСтроки
	|			И Источник.КорСчет = НЗП.СчетУчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.БракВПроизводствеНалоговыйУчет КАК БракВПроизводстве
	|		ПО Источник.Регистратор = БракВПроизводстве.Регистратор
	|			И Источник.НомерКорСтроки = БракВПроизводстве.НомерСтроки
	|			И Источник.КорСчет = БракВПроизводстве.СчетУчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПартииТоваровНаСкладахНалоговыйУчет КАК ИсточникДляКомплектации
	|		ПО Источник.Регистратор = ИсточникДляКомплектации.Регистратор
	|			И Источник.НомерКорСтроки = ИсточникДляКомплектации.НомерСтроки
	|			И (Источник.КодОперации В (&КодКомплектация))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПартииМатериаловВЭксплуатацииНалоговыйУчет КАК МатериалыВЭксплуатации
	|		ПО Источник.Регистратор = МатериалыВЭксплуатации.Регистратор
	|			И (Источник.КодОперации В (&КодПередачаМатериалов))
	|			И Источник.НомерКорСтроки = МатериалыВЭксплуатации.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СписанныеТовары КАК СписанныеТовары
	|		ПО Источник.Регистратор = СписанныеТовары.Регистратор
	|			И Источник.НомерСтрокиСписанныхТоваров = СписанныеТовары.НомерСтроки
	|			И Источник.Регистратор ССЫЛКА Документ.ТребованиеНакладная
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СписанныеТовары КАК СписанныеТоварыПоДокументуДвижения
	|		ПО Источник.ДокументДвижения = СписанныеТоварыПоДокументуДвижения.Регистратор
	|			И Источник.НомерСтрокиСписанныхТоваров = СписанныеТоварыПоДокументуДвижения.НомерСтроки
	|			И Источник.ДокументДвижения ССЫЛКА Документ.ТребованиеНакладная
	|ГДЕ
	|//ГДЕ
	|	Источник.Период МЕЖДУ &ДатаНач И &ДатаКон
	|	И Источник.ВидДвижения = &ВидДвиженияРасход
	|	И Источник.КодОперации В(&КодыСписание)
	|
	|СГРУППИРОВАТЬ ПО
	|	Источник.Номенклатура,
	|	Источник.Склад,
	|	Источник.ХарактеристикаНоменклатуры,
	|	Источник.СерияНоменклатуры,
	|	Источник.ДокументОприходования,
	|	МатериалыВЭксплуатации.ДокументПередачи,
	|	Источник.Заказ,
	|	Источник.КодОперации,
	|	Источник.Качество,
	|	БракВПроизводстве.Продукция,
	|	Источник.Организация,
	|	Источник.СчетУчета,
	|	Источник.КорСчет,
	|	Источник.КорСубконто1,
	|	Источник.КорСубконто2,
	|	Источник.КорСубконто3,
	|	ВЫБОР
	|		КОГДА (НЕ Затраты.СтатьяЗатрат ЕСТЬ NULL )
	|			ТОГДА Затраты.СтатьяЗатрат
	|		КОГДА (НЕ НЗП.СтатьяЗатрат ЕСТЬ NULL )
	|			ТОГДА НЗП.СтатьяЗатрат
	|		КОГДА (НЕ БракВПроизводстве.СтатьяЗатрат ЕСТЬ NULL )
	|			ТОГДА БракВПроизводстве.СтатьяЗатрат
	|		КОГДА (НЕ СписанныеТовары.СтатьяЗатрат ЕСТЬ NULL )
	|			ТОГДА СписанныеТовары.СтатьяЗатрат
	|		КОГДА (НЕ СписанныеТоварыПоДокументуДвижения.СтатьяЗатрат ЕСТЬ NULL )
	|			ТОГДА СписанныеТоварыПоДокументуДвижения.СтатьяЗатрат
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА (НЕ Затраты.Подразделение ЕСТЬ NULL )
	|			ТОГДА Затраты.Подразделение
	|		КОГДА (НЕ НЗП.Подразделение ЕСТЬ NULL )
	|			ТОГДА НЗП.Подразделение
	|		КОГДА (НЕ БракВПроизводстве.Подразделение ЕСТЬ NULL )
	|			ТОГДА БракВПроизводстве.Подразделение
	|		КОГДА (НЕ МатериалыВЭксплуатации.Подразделение ЕСТЬ NULL )
	|			ТОГДА МатериалыВЭксплуатации.Подразделение	
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА (НЕ НЗП.НоменклатурнаяГруппа ЕСТЬ NULL )
	|			ТОГДА НЗП.НоменклатурнаяГруппа
	|		КОГДА (НЕ Затраты.НоменклатурнаяГруппа ЕСТЬ NULL )
	|			ТОГДА Затраты.НоменклатурнаяГруппа
	|		КОГДА (НЕ БракВПроизводстве.НоменклатурнаяГруппа ЕСТЬ NULL )
	|			ТОГДА БракВПроизводстве.НоменклатурнаяГруппа
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА (НЕ НЗП.Заказ ЕСТЬ NULL )
	|			ТОГДА НЗП.Заказ
	|		КОГДА (НЕ Затраты.Заказ ЕСТЬ NULL )
	|			ТОГДА Затраты.Заказ
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА Источник.ДокументДвижения <> НЕОПРЕДЕЛЕНО
	|			ТОГДА Источник.ДокументДвижения
	|		ИНАЧЕ Источник.Регистратор
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА Источник.ДокументДвижения <> НЕОПРЕДЕЛЕНО
	|			ТОГДА Источник.ДокументДвиженияПериод
	|		ИНАЧЕ Источник.Период
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА (НЕ БракВПроизводстве.ХарактеристикаПродукции ЕСТЬ NULL )
	|			ТОГДА БракВПроизводстве.ХарактеристикаПродукции
	|		КОГДА (НЕ ИсточникДляКомплектации.ХарактеристикаНоменклатуры ЕСТЬ NULL )
	|			ТОГДА ИсточникДляКомплектации.ХарактеристикаНоменклатуры
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА (НЕ БракВПроизводстве.СерияПродукции ЕСТЬ NULL )
	|			ТОГДА БракВПроизводстве.СерияПродукции
	|		КОГДА (НЕ ИсточникДляКомплектации.СерияНоменклатуры ЕСТЬ NULL )
	|			ТОГДА ИсточникДляКомплектации.СерияНоменклатуры
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА (НЕ ИсточникДляКомплектации.Номенклатура ЕСТЬ NULL )
	|			ТОГДА ИсточникДляКомплектации.Номенклатура
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА (НЕ ИсточникДляКомплектации.ДокументОприходования ЕСТЬ NULL )
	|			ТОГДА ИсточникДляКомплектации.ДокументОприходования
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	Источник.Номенклатура.ВестиПартионныйУчетПоСериям,
	|	ЕСТЬNULL(МатериалыВЭксплуатации.ФизЛицо, НЕОПРЕДЕЛЕНО),
	|	ЕСТЬNULL(МатериалыВЭксплуатации.НазначениеИспользования, НЕОПРЕДЕЛЕНО),
	|	ЕСТЬNULL(НЗП.СерияЗатраты, НЕОПРЕДЕЛЕНО),
	|	Источник.НомерСтрокиСписанныхТоваров,
	|	Источник.КорСубконто1,
	|	Источник.КорСубконто2,
	|	Источник.КорСубконто3
	|
	|ИМЕЮЩИЕ
	|	СУММА(Источник.Количество) <> 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""Переданные"",
	|	Источник.Организация,
	|	Источник.Номенклатура,
	|	NULL,
	|	Источник.ХарактеристикаНоменклатуры,
	|	NULL,
	|	Источник.ДокументОприходования,
	|	NULL,
	|	СУММА(Источник.Количество),
	|	СУММА(Источник.Стоимость),
	|	0,
	|	Источник.ДокументПередачи,
	|	Источник.ДоговорКонтрагента,
	|	Источник.КодОперации,
	|	NULL,
	|	NULL,
	|	Источник.СчетУчета,
	|	Источник.КорСчет,
	|	Источник.КорСубконто1,
	|	Источник.КорСубконто2,
	|	Источник.КорСубконто3,
	|	Источник.КорСубконто1,
	|	Источник.КорСубконто2,
	|	Источник.КорСубконто3,
	|	СУММА(Источник.ПостояннаяРазница),
	|	СУММА(Источник.ВременнаяРазница),
	|	ВЫБОР
	|		КОГДА (НЕ НЗП.СтатьяЗатрат ЕСТЬ NULL )
	|			ТОГДА НЗП.СтатьяЗатрат
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА (НЕ НЗП.Подразделение ЕСТЬ NULL )
	|			ТОГДА НЗП.Подразделение
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА (НЕ НЗП.НоменклатурнаяГруппа ЕСТЬ NULL )
	|			ТОГДА НЗП.НоменклатурнаяГруппа
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА (НЕ НЗП.Заказ ЕСТЬ NULL )
	|			ТОГДА НЗП.Заказ
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА Источник.ДокументДвижения <> НЕОПРЕДЕЛЕНО
	|			ТОГДА Источник.ДокументДвижения
	|		ИНАЧЕ Источник.Регистратор
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА Источник.ДокументДвижения <> НЕОПРЕДЕЛЕНО
	|			ТОГДА Источник.ДокументДвиженияПериод
	|		ИНАЧЕ Источник.Период
	|	КОНЕЦ,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	Источник.Номенклатура.ВестиПартионныйУчетПоСериям,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL
	|ИЗ
	|	РегистрНакопления.ПартииТоваровПереданныеНалоговыйУчет КАК Источник
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.НезавершенноеПроизводствоНалоговыйУчет КАК НЗП
	|		ПО Источник.Регистратор = НЗП.Регистратор
	|			И Источник.НомерКорСтроки = НЗП.НомерСтроки
	|			И Источник.КорСчет = НЗП.СчетУчета
	|ГДЕ
	|//ГДЕ
	|	Источник.Период МЕЖДУ &ДатаНач И &ДатаКон
	|	И Источник.ВидДвижения = &ВидДвиженияРасход
	|	И Источник.КодОперации В(&КодыСписание)
	|
	|СГРУППИРОВАТЬ ПО
	|	Источник.Номенклатура,
	|	Источник.ХарактеристикаНоменклатуры,
	|	Источник.ДокументОприходования,
	|	Источник.ДокументПередачи,
	|	Источник.ДоговорКонтрагента,
	|	Источник.КодОперации,
	|	Источник.СчетУчета,
	|	Источник.Организация,
	|	Источник.КорСчет,
	|	Источник.КорСубконто1,
	|	Источник.КорСубконто2,
	|	Источник.КорСубконто3,
	|	ВЫБОР
	|		КОГДА Источник.ДокументДвижения <> НЕОПРЕДЕЛЕНО
	|			ТОГДА Источник.ДокументДвижения
	|		ИНАЧЕ Источник.Регистратор
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА Источник.ДокументДвижения <> НЕОПРЕДЕЛЕНО
	|			ТОГДА Источник.ДокументДвиженияПериод
	|		ИНАЧЕ Источник.Период
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА (НЕ НЗП.СтатьяЗатрат ЕСТЬ NULL )
	|			ТОГДА НЗП.СтатьяЗатрат
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА (НЕ НЗП.Подразделение ЕСТЬ NULL )
	|			ТОГДА НЗП.Подразделение
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА (НЕ НЗП.НоменклатурнаяГруппа ЕСТЬ NULL )
	|			ТОГДА НЗП.НоменклатурнаяГруппа
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА (НЕ НЗП.Заказ ЕСТЬ NULL )
	|			ТОГДА НЗП.Заказ
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	Источник.Номенклатура.ВестиПартионныйУчетПоСериям,
	|	Источник.КорСубконто1,
	|	Источник.КорСубконто2,
	|	Источник.КорСубконто3
	|
	|ИМЕЮЩИЕ
	|	СУММА(Источник.Количество) <> 0
	|
//Партии материалов в эксплуатации	
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""ВЭксплуатации"" КАК СписаноИз,
	|	Источник.Организация КАК Организация,
	|	Источник.Номенклатура,
	|	NULL,
	|	Источник.ХарактеристикаНоменклатуры,
	|	Источник.СерияНоменклатуры,
	|	NULL,
	|	NULL,
	|	СУММА(Источник.Количество) КАК Количество,
	|	СУММА(Источник.Стоимость) КАК Стоимость,
	|	0 КАК СтоимостьПоступление,
	|	Источник.ДокументПередачи КАК ДокументПередачи,
	|	NULL КАК ДоговорКонтрагента,
	|	Источник.КодОперации КАК КодОперацииПартииТоваров,
	|	NULL,
	|	NULL,
	|	Источник.СчетУчета КАК СчетУчетаНУ,
	|	СписанныеТовары.КорСчетНУ КАК КорСчетНУ,
	|	СписанныеТовары.КорСубконтоБУ1 КАК КорСубконтоБУ1,
	|	СписанныеТовары.КорСубконтоБУ2 КАК КорСубконтоБУ2,
	|	СписанныеТовары.КорСубконтоБУ3 КАК КорСубконтоБУ3,
	|	СписанныеТовары.КорСубконтоНУ1 КАК КорСубконтоНУ1,
	|	СписанныеТовары.КорСубконтоНУ2 КАК КорСубконтоНУ2,
	|	СписанныеТовары.КорСубконтоНУ3 КАК КорСубконтоНУ3,
	|	СУММА(Источник.ПостояннаяРазница) КАК ПостояннаяРазница,
	|	СУММА(Источник.ВременнаяРазница) КАК ВременнаяРазница,
	|	NULL,
	|	Источник.Подразделение КАК ПодразделениеОрганизации,
	|	NULL КАК НоменклатурнаяГруппа,
	|	NULL КАК ЗаказСписания,
	|	ВЫБОР
	|		КОГДА Источник.ДокументДвижения <> НЕОПРЕДЕЛЕНО
	|			ТОГДА Источник.ДокументДвижения
	|		ИНАЧЕ Источник.Регистратор
	|	КОНЕЦ КАК Регистратор,
	|	ВЫБОР
	|		КОГДА Источник.ДокументДвижения <> НЕОПРЕДЕЛЕНО
	|			ТОГДА Источник.ДокументДвиженияПериод
	|		ИНАЧЕ Источник.Период
	|	КОНЕЦ КАК Период,
	|	NULL КАК ХарактеристикаНоменклатурыНовая,
	|	NULL КАК СерияНоменклатурыНовая,
	|	NULL КАК НоменклатураНовая,
	|	NULL КАК ДокументОприходованияНовый,
	|	Источник.Номенклатура.ВестиПартионныйУчетПоСериям КАК ВестиПартионныйУчетПоСериям,
	|	Источник.ФизЛицо КАК ФизЛицо,
	|	Источник.НазначениеИспользования КАК НазначениеИспользования,
	|	НЕОПРЕДЕЛЕНО КАК СерияНоменклтатурыНЗП,
	|	Источник.НомерСтрокиСписанныхТоваров КАК НомерСтрокиСписанныхТоваров
	|ИЗ
	|	РегистрНакопления.ПартииМатериаловВЭксплуатацииНалоговыйУчет КАК Источник
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СписанныеТовары КАК СписанныеТовары
	|		ПО Источник.Регистратор = СписанныеТовары.Регистратор
	|			И Источник.НомерСтрокиСписанныхТоваров = СписанныеТовары.НомерСтроки
	|ГДЕ
	|	Источник.Период МЕЖДУ &ДатаНач И &ДатаКон
	|	И Источник.ВидДвижения = &ВидДвиженияРасход
	|	И Источник.КодОперации В(&КодыСписание)
	|
	|СГРУППИРОВАТЬ ПО
	|	Источник.Номенклатура,
	|	Источник.ХарактеристикаНоменклатуры,
	|	Источник.СерияНоменклатуры,
	|	Источник.ДокументПередачи,
	|	Источник.КодОперации,
	|	Источник.Организация,
	|	Источник.СчетУчета,
	|	СписанныеТовары.КорСчетНУ,
	|	СписанныеТовары.КорСубконтоБУ1,
	|	СписанныеТовары.КорСубконтоБУ2,
	|	СписанныеТовары.КорСубконтоБУ3,
	|	Источник.Подразделение,
	|	ВЫБОР
	|		КОГДА Источник.ДокументДвижения <> НЕОПРЕДЕЛЕНО
	|			ТОГДА Источник.ДокументДвижения
	|		ИНАЧЕ Источник.Регистратор
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА Источник.ДокументДвижения <> НЕОПРЕДЕЛЕНО
	|			ТОГДА Источник.ДокументДвиженияПериод
	|		ИНАЧЕ Источник.Период
	|	КОНЕЦ,
	|	Источник.Номенклатура.ВестиПартионныйУчетПоСериям,
	|	Источник.ФизЛицо,
	|	Источник.НазначениеИспользования,
	|	Источник.НомерСтрокиСписанныхТоваров,
	|	СписанныеТовары.КорСубконтоНУ1,
	|	СписанныеТовары.КорСубконтоНУ2,
	|	СписанныеТовары.КорСубконтоНУ3
	|
	|ИМЕЮЩИЕ
	|	СУММА(Источник.Количество) <> 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период,
	|	Регистратор";
	
	//Добавим дополнительный отбор по счету
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "//ГДЕ", "//ГДЕ 
	|	(НЕ Источник.СчетУчета В (&СписокИсключаемыхСчетовУчета)) И ");
	
	Запрос.УстановитьПараметр("СписокИсключаемыхСчетовУчета",ПолучитьМассивИсключаемыхСчетов());
	
	// Если задана организация, отбор по организации 
	Если ЗначениеЗаполнено(Организация) Тогда
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//ГДЕ", "//ГДЕ
		|	Источник.Организация = &Организация И ");
		
		Запрос.УстановитьПараметр("Организация", Организация);
		
	КонецЕсли;
	
	// Добавим дополнительный отбор по номенклатуре
	Если МассивНоменклатуры <> Неопределено Тогда
		
		ТекстОграничениеНаПартии = "";
		Если ЗначениеЗаполнено(Организация) Тогда
			СпособОценкиМПЗ = ВРег(Строка(УправлениеЗапасамиПартионныйУчет.ПолучитьПараметрУчетнойПолитикиПартионногоУчета("СпособОценкиМПЗ", "Нал", ДопПараметры)));
			Если СпособОценкиМПЗ = "ФИФО" 
				ИЛИ СпособОценкиМПЗ = "ЛИФО" Тогда
				
				ТекстОграничениеНаПартии = " И Источник.ДокументОприходования В (&МассивДокументовОприходования) ";
				
			КонецЕсли;
		КонецЕсли;
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//ГДЕ", "//ГДЕ 
		|	Источник.Номенклатура В (&МассивНоменклатуры)
		|	" + ТекстОграничениеНаПартии + " И ");
		
	КонецЕсли;
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "//ГДЕ", "//ГДЕ 
	|	Источник.Номенклатура В (&МассивНоменклатуры)
	|	" + ТекстОграничениеНаПартии + " И ");
	
	// Встречный выпуск
	Если ДопПараметры.ВстречныйВыпуск Тогда
		КодыОпераций = Перечисления.КодыОперацийПартииТоваров;
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//ГДЕ",
			" //ГДЕ
			|	НЕ ( 1 В
			|	(ВЫБРАТЬ Первые 1
			|		1
			|	ИЗ
			|		РегистрСведений.КорректировкаВстречногоВыпускаПродукции КАК КорректировкаВстречногоВыпускаПродукции
			|	ГДЕ
			|		Источник.НомерСтрокиСписанныхТоваров = КорректировкаВстречногоВыпускаПродукции.НомерСтрокиСписанныхТоваров
			|		" + ДобавитьОтборПоВидуУчета("КорректировкаВстречногоВыпускаПродукции","Нал") + "
			|		И Источник.Регистратор = КорректировкаВстречногоВыпускаПродукции.Документ))
			| И");
		Запрос.УстановитьПараметр("СписаниеПартийВПроизводствоОперативно",КодыОпераций.СписаниеПартийВПроизводствоОперативно);
		
	КонецЕсли;

КонецПроцедуры // ЗаполнитьЗапросПоСписаниюНал()

// Запрос по списанию: Меж
//
// Параметры:
//	Нет.
//
Процедура ЗаполнитьЗапросПоСписаниюМеж(Запрос, МассивНоменклатуры, ДопПараметры)
	
	Организация = ДопПараметры.Организация;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	""НаСкладах"" КАК СписаноИз,
	|	Источник.Организация КАК Организация,
	|	Источник.Номенклатура,
	|	Источник.Склад,
	|	Источник.ХарактеристикаНоменклатуры,
	|	Источник.СерияНоменклатуры,
	|	Источник.ДокументОприходования,
	|	Источник.Заказ,
	|	СУММА(Источник.Количество) КАК Количество,
	|	СУММА(Источник.Стоимость) КАК Стоимость,
	|	0 КАК СтоимостьПоступление,
	|	NULL КАК ДокументПередачи,
	|	NULL КАК ДоговорКонтрагента,
	|	Источник.КодОперации КАК КодОперацииПартииТоваров,
	|	Источник.Качество,
	|	БракВПроизводстве.Продукция,
	|	Источник.СчетУчета КАК СчетУчетаМУ,
	|	Источник.КорСчет КАК КорСчетМУ,
	|	Источник.КорСубконто1 КАК КорСубконтоМУ1,
	|	Источник.КорСубконто2 КАК КорСубконтоМУ2,
	|	Источник.КорСубконто3 КАК КорСубконтоМУ3,
	|	ВЫБОР
	|		КОГДА (НЕ Затраты.СтатьяЗатрат ЕСТЬ NULL )
	|			ТОГДА Затраты.СтатьяЗатрат
	|		КОГДА (НЕ НЗП.СтатьяЗатрат ЕСТЬ NULL )
	|			ТОГДА НЗП.СтатьяЗатрат
	|		КОГДА (НЕ БракВПроизводстве.СтатьяЗатрат ЕСТЬ NULL )
	|			ТОГДА БракВПроизводстве.СтатьяЗатрат
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК СтатьяЗатрат,
	|	ВЫБОР
	|		КОГДА (НЕ Затраты.Подразделение ЕСТЬ NULL )
	|			ТОГДА Затраты.Подразделение
	|		КОГДА (НЕ НЗП.Подразделение ЕСТЬ NULL )
	|			ТОГДА НЗП.Подразделение
	|		КОГДА (НЕ БракВПроизводстве.Подразделение ЕСТЬ NULL )
	|			ТОГДА БракВПроизводстве.Подразделение
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ПодразделениеОрганизации,
	|	ВЫБОР
	|		КОГДА (НЕ НЗП.НоменклатурнаяГруппа ЕСТЬ NULL )
	|			ТОГДА НЗП.НоменклатурнаяГруппа
	|		КОГДА (НЕ Затраты.НоменклатурнаяГруппа ЕСТЬ NULL )
	|			ТОГДА Затраты.НоменклатурнаяГруппа
	|		КОГДА (НЕ БракВПроизводстве.НоменклатурнаяГруппа ЕСТЬ NULL )
	|			ТОГДА БракВПроизводстве.НоменклатурнаяГруппа
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК НоменклатурнаяГруппа,
	|	ВЫБОР
	|		КОГДА (НЕ НЗП.Заказ ЕСТЬ NULL )
	|			ТОГДА НЗП.Заказ
	|		КОГДА (НЕ Затраты.Заказ ЕСТЬ NULL )
	|			ТОГДА Затраты.Заказ
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ЗаказСписания,
	|	ВЫБОР
	|		КОГДА Источник.ДокументДвижения <> НЕОПРЕДЕЛЕНО
	|			ТОГДА Источник.ДокументДвижения
	|		ИНАЧЕ Источник.Регистратор
	|	КОНЕЦ КАК Регистратор,
	|	ВЫБОР
	|		КОГДА Источник.ДокументДвижения <> НЕОПРЕДЕЛЕНО
	|			ТОГДА Источник.ДокументДвиженияПериод
	|		ИНАЧЕ Источник.Период
	|	КОНЕЦ КАК Период,
	|	БракВПроизводстве.ХарактеристикаПродукции КАК ХарактеристикаНоменклатурыНовая,
	|	БракВПроизводстве.СерияПродукции КАК СерияНоменклатурыНовая,
	|	Источник.Номенклатура.ВестиПартионныйУчетПоСериям КАК ВестиПартионныйУчетПоСериям,
	|	НЕОПРЕДЕЛЕНО КАК ФизЛицо,
	|	НЕОПРЕДЕЛЕНО КАК НазначениеИспользования,
	|	ЕСТЬNULL(НЗП.СерияЗатраты, НЕОПРЕДЕЛЕНО) КАК СерияНоменклтатурыНЗП,
	|	Источник.НомерСтрокиСписанныхТоваров КАК НомерСтрокиСписанныхТоваров
	|ИЗ
	|	РегистрНакопления.ПартииТоваровНаСкладахМеждународныйУчет КАК Источник
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗатратыМеждународныйУчет КАК Затраты
	|		ПО Источник.Регистратор = Затраты.Регистратор
	|			И Источник.НомерКорСтроки = Затраты.НомерСтроки
	|			И Источник.КорСчет = Затраты.СчетУчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.НезавершенноеПроизводствоМеждународныйУчет КАК НЗП
	|		ПО Источник.Регистратор = НЗП.Регистратор
	|			И Источник.НомерКорСтроки = НЗП.НомерСтроки
	|			И Источник.КорСчет = НЗП.СчетУчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.БракВПроизводствеМеждународныйУчет КАК БракВПроизводстве
	|		ПО Источник.Регистратор = БракВПроизводстве.Регистратор
	|			И Источник.НомерКорСтроки = БракВПроизводстве.НомерСтроки
	|			И Источник.КорСчет = БракВПроизводстве.СчетУчета
	|ГДЕ
	|	Источник.Период МЕЖДУ &ДатаНач И &ДатаКон
	|	И Источник.ВидДвижения = &ВидДвиженияРасход
	|	И Источник.КодОперации В(&КодыСписание)
	|
	|СГРУППИРОВАТЬ ПО
	|	Источник.Номенклатура,
	|	Источник.Склад,
	|	Источник.ХарактеристикаНоменклатуры,
	|	Источник.СерияНоменклатуры,
	|	Источник.ДокументОприходования,
	|	Источник.Заказ,
	|	Источник.КодОперации,
	|	Источник.Качество,
	|	БракВПроизводстве.Продукция,
	|	Источник.Организация,
	|	Источник.СчетУчета,
	|	Источник.КорСчет,
	|	Источник.КорСубконто1,
	|	Источник.КорСубконто2,
	|	Источник.КорСубконто3,
	|	ВЫБОР
	|		КОГДА (НЕ Затраты.СтатьяЗатрат ЕСТЬ NULL )
	|			ТОГДА Затраты.СтатьяЗатрат
	|		КОГДА (НЕ НЗП.СтатьяЗатрат ЕСТЬ NULL )
	|			ТОГДА НЗП.СтатьяЗатрат
	|		КОГДА (НЕ БракВПроизводстве.СтатьяЗатрат ЕСТЬ NULL )
	|			ТОГДА БракВПроизводстве.СтатьяЗатрат
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА (НЕ Затраты.Подразделение ЕСТЬ NULL )
	|			ТОГДА Затраты.Подразделение
	|		КОГДА (НЕ НЗП.Подразделение ЕСТЬ NULL )
	|			ТОГДА НЗП.Подразделение
	|		КОГДА (НЕ БракВПроизводстве.Подразделение ЕСТЬ NULL )
	|			ТОГДА БракВПроизводстве.Подразделение
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА (НЕ НЗП.НоменклатурнаяГруппа ЕСТЬ NULL )
	|			ТОГДА НЗП.НоменклатурнаяГруппа
	|		КОГДА (НЕ Затраты.НоменклатурнаяГруппа ЕСТЬ NULL )
	|			ТОГДА Затраты.НоменклатурнаяГруппа
	|		КОГДА (НЕ БракВПроизводстве.НоменклатурнаяГруппа ЕСТЬ NULL )
	|			ТОГДА БракВПроизводстве.НоменклатурнаяГруппа
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА (НЕ НЗП.Заказ ЕСТЬ NULL )
	|			ТОГДА НЗП.Заказ
	|		КОГДА (НЕ Затраты.Заказ ЕСТЬ NULL )
	|			ТОГДА Затраты.Заказ
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА Источник.ДокументДвижения <> НЕОПРЕДЕЛЕНО
	|			ТОГДА Источник.ДокументДвижения
	|		ИНАЧЕ Источник.Регистратор
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА Источник.ДокументДвижения <> НЕОПРЕДЕЛЕНО
	|			ТОГДА Источник.ДокументДвиженияПериод
	|		ИНАЧЕ Источник.Период
	|	КОНЕЦ,
	|	БракВПроизводстве.ХарактеристикаПродукции,
	|	БракВПроизводстве.СерияПродукции,
	|	Источник.Номенклатура.ВестиПартионныйУчетПоСериям,
	|	ЕСТЬNULL(НЗП.СерияЗатраты, НЕОПРЕДЕЛЕНО),
	|	Источник.НомерСтрокиСписанныхТоваров
	|
	|ИМЕЮЩИЕ
	|	СУММА(Источник.Количество) <> 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""Переданные"",
	|	Источник.Организация,
	|	Источник.Номенклатура,
	|	NULL,
	|	Источник.ХарактеристикаНоменклатуры,
	|	NULL,
	|	Источник.ДокументОприходования,
	|	NULL,
	|	СУММА(Источник.Количество),
	|	СУММА(Источник.Стоимость),
	|	0,
	|	Источник.ДокументПередачи,
	|	Источник.ДоговорКонтрагента,
	|	Источник.КодОперации,
	|	NULL,
	|	NULL,
	|	Источник.СчетУчета,
	|	Источник.КорСчет,
	|	Источник.КорСубконто1,
	|	Источник.КорСубконто2,
	|	Источник.КорСубконто3,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	ВЫБОР
	|		КОГДА Источник.ДокументДвижения <> НЕОПРЕДЕЛЕНО
	|			ТОГДА Источник.ДокументДвижения
	|		ИНАЧЕ Источник.Регистратор
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА Источник.ДокументДвижения <> НЕОПРЕДЕЛЕНО
	|			ТОГДА Источник.ДокументДвиженияПериод
	|		ИНАЧЕ Источник.Период
	|	КОНЕЦ,
	|	NULL,
	|	NULL,
	|	Источник.Номенклатура.ВестиПартионныйУчетПоСериям,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL
	|ИЗ
	|	РегистрНакопления.ПартииТоваровПереданныеМеждународныйУчет КАК Источник
	|ГДЕ
	|	Источник.Период МЕЖДУ &ДатаНач И &ДатаКон
	|	И Источник.ВидДвижения = &ВидДвиженияРасход
	|	И Источник.КодОперации В(&КодыСписание)
	|
	|СГРУППИРОВАТЬ ПО
	|	Источник.Номенклатура,
	|	Источник.ХарактеристикаНоменклатуры,
	|	Источник.ДокументОприходования,
	|	Источник.ДокументПередачи,
	|	Источник.ДоговорКонтрагента,
	|	Источник.КодОперации,
	|	Источник.СчетУчета,
	|	Источник.Организация,
	|	Источник.КорСчет,
	|	Источник.КорСубконто1,
	|	Источник.КорСубконто2,
	|	Источник.КорСубконто3,
	|	ВЫБОР
	|		КОГДА Источник.ДокументДвижения <> НЕОПРЕДЕЛЕНО
	|			ТОГДА Источник.ДокументДвижения
	|		ИНАЧЕ Источник.Регистратор
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА Источник.ДокументДвижения <> НЕОПРЕДЕЛЕНО
	|			ТОГДА Источник.ДокументДвиженияПериод
	|		ИНАЧЕ Источник.Период
	|	КОНЕЦ,
	|	Источник.Номенклатура.ВестиПартионныйУчетПоСериям
	|
	|ИМЕЮЩИЕ
	|	СУММА(Источник.Количество) <> 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период,
	|	Регистратор";
	
	//Добавим дополнительный отбор по счету
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ГДЕ", "ГДЕ (НЕ Источник.СчетУчета В (&СписокИсключаемыхСчетовУчета)) И ");
	Запрос.УстановитьПараметр("СписокИсключаемыхСчетовУчета",ПолучитьМассивИсключаемыхСчетов());	
	
	// Если задана организация, отбор по организации 
	Если ЗначениеЗаполнено(Организация) Тогда
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ГДЕ", "ГДЕ Источник.Организация = &Организация И ");
		
		Запрос.УстановитьПараметр("Организация", Организация);
		
	КонецЕсли;
	
	// Добавим дополнительный отбор по номенклатуре
	Если МассивНоменклатуры <> Неопределено Тогда
		
		ТекстОграничениеНаПартии = "";
		Если ЗначениеЗаполнено(Организация) Тогда
			СпособОценкиМПЗ = ВРег(Строка(УправлениеЗапасамиПартионныйУчет.ПолучитьПараметрУчетнойПолитикиПартионногоУчета("СпособОценкиМПЗ", "Меж", ДопПараметры)));
			Если СпособОценкиМПЗ = "ФИФО" 
				ИЛИ СпособОценкиМПЗ = "ЛИФО" Тогда
				
				ТекстОграничениеНаПартии = " И Источник.ДокументОприходования В (&МассивДокументовОприходования) ";
				
			КонецЕсли;
		КонецЕсли;
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ГДЕ", "ГДЕ Источник.Номенклатура В (&МассивНоменклатуры)
		|	" + ТекстОграничениеНаПартии + " И ");
		
	КонецЕсли;
	
	// Встречный выпуск
	Если ДопПараметры.ВстречныйВыпуск Тогда
		КодыОпераций = Перечисления.КодыОперацийПартииТоваров;
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ГДЕ",
			" ГДЕ НЕ ( 1 В
			|	(ВЫБРАТЬ Первые 1
			|		1
			|	ИЗ
			|		РегистрСведений.КорректировкаВстречногоВыпускаПродукции КАК КорректировкаВстречногоВыпускаПродукции
			|	ГДЕ
			|		Источник.НомерСтрокиСписанныхТоваров = КорректировкаВстречногоВыпускаПродукции.НомерСтрокиСписанныхТоваров
			|		" + ДобавитьОтборПоВидуУчета("КорректировкаВстречногоВыпускаПродукции","Меж") + "
			|		И Источник.Регистратор = КорректировкаВстречногоВыпускаПродукции.Документ))
			| И");
		Запрос.УстановитьПараметр("СписаниеПартийВПроизводствоОперативно",КодыОпераций.СписаниеПартийВПроизводствоОперативно);
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьЗапросПоСписаниюМеж()

