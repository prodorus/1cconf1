#Если Клиент Тогда

Перем мСерверИсточник;

// Функция пытается создать HTTP соединение используя параметры
// Прокси-сервера, вводимые пользователем
//
// Параметры
//  СерверИсточник - Строка, адрес источника получения данных из сети
//
// Возвращаемое значение:
//   HTTPСоединение
//
Функция СоздатьСоединениеЧерезПрокси(ОписаниеОшибкиСоединения = "")

	Перем HTTP;
	Перем ПроксиСервер;
	
	// Восстановим сохраненные значения
	Восстановлено_ЗапомнитьИмяИПароль = ВосстановитьЗначение("ЗапомнитьИмяИПарольПрокси");
	Если ТипЗнч(Восстановлено_ЗапомнитьИмяИПароль) = Тип("Булево") Тогда
		ЗапомнитьИмяИПароль = Восстановлено_ЗапомнитьИмяИПароль;
	КонецЕсли; 
	Восстановлено_ИмяПользователя     = ВосстановитьЗначение("ИмяПользователяПрокси");
	Если ТипЗнч(Восстановлено_ИмяПользователя) = Тип("Строка") Тогда
		ИмяПользователя = Восстановлено_ИмяПользователя;
	КонецЕсли; 
	Восстановлено_ПарольПользователя  = ВосстановитьЗначение("ПарольПользователяПрокси");
	Если ТипЗнч(Восстановлено_ПарольПользователя) = Тип("Строка") Тогда
		ПарольПользователя = Восстановлено_ПарольПользователя;
	КонецЕсли; 
	
	Если ЗапомнитьИмяИПароль ИЛИ ЗначениеЗаполнено(ИмяПользователя) Тогда
		ПроксиСервер = Новый ИнтернетПрокси();
		ПроксиСервер.Пользователь = ИмяПользователя;
		ПроксиСервер.Пароль       = ПарольПользователя;
		Попытка
			HTTP = Новый HTTPСоединение(СерверИсточник,,,, ПроксиСервер);
			HTTP.Получить(СтрокаПараметраПолучения, ИмяВходящегоФайла);
		Исключение
			HTTP = Неопределено;
		КонецПопытки;
	КонецЕсли;
	
	Если ТипЗнч(HTTP) <> Тип("HTTPСоединение") Тогда
	
		ФормаАвторизацииПрокси = ЭтотОбъект.ПолучитьФорму("ФормаПараметрыПрокси");
		ФормаАвторизацииПрокси.ПризнакОткрытияФормыИзЯзыка = Истина;
		Если ЗапомнитьИмяИПароль = Истина ИЛИ ЗначениеЗаполнено(ИмяПользователя) Тогда
			Если ТипЗнч(ЗапомнитьИмяИПароль) = Тип("Булево") Тогда
				ФормаАвторизацииПрокси.ЗапомнитьИмяИПароль = ЗапомнитьИмяИПароль;
			КонецЕсли;
			Если ТипЗнч(ИмяПользователя) = Тип("Строка") Тогда
				ФормаАвторизацииПрокси.ИмяПользователя = ИмяПользователя;
			КонецЕсли;
			Если ТипЗнч(ПарольПользователя) = Тип("Строка") Тогда
				ФормаАвторизацииПрокси.ПарольПользователя = ПарольПользователя;
			КонецЕсли;
		КонецЕсли;
		
		Если ПустаяСтрока(ОписаниеОшибкиСоединения) Тогда
			ФормаАвторизацииПрокси.ОписаниеОшибкиСоединения = "Не удалось установить соединение с сервером, причина не установлена";
		Иначе
			ФормаАвторизацииПрокси.ОписаниеОшибкиСоединения = "Не удалось установить соединение с сервером по причине: " + ОписаниеОшибкиСоединения;
		КонецЕсли;
		
		HTTP = ФормаАвторизацииПрокси.ОткрытьМодально();
		
	КонецЕсли;

	Возврат HTTP;
	
КонецФункции

Функция ПолучитьПараметрыСервера(ПерваяПопытка = Ложь, ЗаголовокДляАвторизации = "", СообщениеДляАвторизации = "")

	Результат = Истина;

	мПараметрыСервера = Новый Массив;

	// Восстановим сохраненные значения
	Восстановлено_КодДоступаНаСервер     = ВосстановитьЗначение("КодДоступаНаСервер");
	Если ТипЗнч(Восстановлено_КодДоступаНаСервер) = Тип("Строка") И Не ПустаяСтрока(Восстановлено_КодДоступаНаСервер) Тогда
		КодДоступаНаСервер = Восстановлено_КодДоступаНаСервер;
	КонецЕсли;

	Восстановлено_ПарольДоступаНаСервер  = ВосстановитьЗначение("ПарольДоступаНаСервер");
	Если ТипЗнч(Восстановлено_ПарольДоступаНаСервер) = Тип("Строка") Тогда
		ПарольДоступаНаСервер = Восстановлено_ПарольДоступаНаСервер;
	КонецЕсли;

	Восстановлено_ЗапомнитьКодИПароль = ВосстановитьЗначение("ЗапомнитьКодИПароль");
	Если ТипЗнч(Восстановлено_ЗапомнитьКодИПароль) = Тип("Булево") Тогда
		ЗапомнитьКодИПароль = Восстановлено_ЗапомнитьКодИПароль;
	КонецЕсли;

	// Если это не первая попытка получить данные, значит сохранненые данные неверны и 
	// требуется перезапросить их у пользователя
	Если Не ПерваяПопытка Тогда
		ФормаПараметрыДоступаНаСервер = ЭтотОбъект.ПолучитьФорму("ФормаПараметрыДоступаНаСервер");
		ФормаПараметрыДоступаНаСервер.ПризнакОткрытияФормыИзЯзыка = Истина;

		Если ЗапомнитьКодИПароль = Истина Или ЗначениеЗаполнено(КодДоступаНаСервер) Тогда
			Если ТипЗнч(КодДоступаНаСервер) = Тип("Строка") Тогда
				ФормаПараметрыДоступаНаСервер.КодДоступаНаСервер = КодДоступаНаСервер;
			КонецЕсли;
			Если ТипЗнч(ПарольДоступаНаСервер) = Тип("Строка") Тогда
				ФормаПараметрыДоступаНаСервер.ПарольДоступаНаСервер = ПарольДоступаНаСервер;
			КонецЕсли;
			Если ТипЗнч(ЗапомнитьКодИПароль) = Тип("Булево") Тогда
				ФормаПараметрыДоступаНаСервер.ЗапомнитьКодИПароль = ЗапомнитьКодИПароль;
			КонецЕсли;
		КонецЕсли;

		ФормаПараметрыДоступаНаСервер.ЭлементыФормы.Найти("НадписьУкажитеПараметры").Заголовок =
		  ?(ПустаяСтрока(СообщениеДляАвторизации),
		    "Укажите логин/код и пароль для доступа к серверу """ + мСерверИсточник + """",
		    СообщениеДляАвторизации);

		Если Не ПустаяСтрока(ЗаголовокДляАвторизации) Тогда
			ФормаПараметрыДоступаНаСервер.ЭлементыФормы.Найти("НадписьЗаголовок").Заголовок = ЗаголовокДляАвторизации;
		КонецЕсли;

		Ответ = ФормаПараметрыДоступаНаСервер.ОткрытьМодально();
		Результат = (Ответ = КодВозвратаДиалога.ОК);
	КонецЕсли;

	Возврат Результат;

КонецФункции

Функция ПолучитьПараметрыПрокси(ПерваяПопытка = Ложь)
	
	Результат = Истина;
	
	мПараметрыСервера = Новый Массив;
	
	// Восстановим сохраненные значения
	Восстановлено_ИмяПользователя     = ВосстановитьЗначение("ИмяПользователя");
	Если ТипЗнч(Восстановлено_ИмяПользователя) = Тип("Строка") И Не ПустаяСтрока(Восстановлено_ИмяПользователя) Тогда
		ИмяПользователя = Восстановлено_ИмяПользователя;
	КонецЕсли;
	
	Восстановлено_ПарольПользователя  = ВосстановитьЗначение("ПарольПользователя");
	Если ТипЗнч(Восстановлено_ПарольПользователя) = Тип("Строка") Тогда
		ПарольПользователя = Восстановлено_ПарольПользователя;
	КонецЕсли;
	
	Восстановлено_АдресПроксиСервера  = ВосстановитьЗначение("АдресПроксиСервера");
	Если ТипЗнч(Восстановлено_АдресПроксиСервера) = Тип("Строка") Тогда
		АдресПроксиСервера = Восстановлено_АдресПроксиСервера;
	КонецЕсли;
	
	Восстановлено_ПортПроксиСервера   = ВосстановитьЗначение("ПортПроксиСервера");
	Если ТипЗнч(Восстановлено_ПортПроксиСервера) = Тип("Число") Тогда
		ПортПроксиСервера = Восстановлено_ПортПроксиСервера;
	КонецЕсли;
	
	Восстановлено_ЗапомнитьПараметрыПроксиСервера = ВосстановитьЗначение("ЗапомнитьИмяИПароль");
	Если ТипЗнч(Восстановлено_ЗапомнитьПараметрыПроксиСервера) = Тип("Булево") Тогда
		ЗапомнитьПараметрыПроксиСервера = Восстановлено_ЗапомнитьПараметрыПроксиСервера;
	КонецЕсли;
	
	// Если это первая попытка получить данные, значит сохранненые данные неверны и 
	// требуется перезапросить их у пользователя
	Если Не ПерваяПопытка Тогда
		ФормаПараметрыПрокси = ЭтотОбъект.ПолучитьФорму("ФормаПараметрыПрокси");
		ФормаПараметрыПрокси.ПризнакОткрытияФормыИзЯзыка = Истина;
		
		Если ЗапомнитьПараметрыПроксиСервера
		 Или ЗначениеЗаполнено(ИмяПользователя)
		 Или ЗначениеЗаполнено(АдресПроксиСервера) Тогда
		
			ФормаПараметрыПрокси.ИмяПользователя	= ИмяПользователя;
			ФормаПараметрыПрокси.ПарольПользователя = ПарольПользователя;
			ФормаПараметрыПрокси.АдресПроксиСервера = АдресПроксиСервера;
			ФормаПараметрыПрокси.ПортПроксиСервера	= ПортПроксиСервера;
			ФормаПараметрыПрокси.ЗапомнитьПараметрыПроксиСервера = ЗапомнитьПараметрыПроксиСервера;
			
		КонецЕсли;
		
		Ответ = ФормаПараметрыПрокси.ОткрытьМодально();
		Результат = (Ответ = КодВозвратаДиалога.ОК);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Функция получает файлы с сервера с указанными параметрами и сохраняет на диск
//
// Параметры:
//  HTTP - HTTPСоединение, если приходится использовать данную функцию в цикле, то тут передается
//         переменная с созданным в предыдущей итерации цикла HTTPСоединением
// СерверИсточникПараметр - Строка, сервер, с которого необходимо получить файлы
// СтрокаПараметраПолученияПараметр - Строка, адрес ресурса на сервере.
// ИмяВходящегоФайлаПараметр - Имя файла, в который помещаются данные полученного ресурса.
//
// Возвращаемое значение:
//  Булево - Успешно получены файлы или нет.
//
Функция ЗапроситьФайлыССервера(СерверИсточникПараметр, СтрокаПараметраПолученияПараметр, ИмяВходящегоФайлаПараметр,
                               HTTP = Неопределено, НеобходимаАвторизация = Ложь, 
                               ЛогинПрокси = "", ПарольПрокси = "", ЛогинСервера = "", ПарольСервера = "",
                               ЗаголовокДляАвторизации = "", СообщениеДляАвторизации = "", СообщениеОбОшибке = "", ВариантЗагрузки = 1) Экспорт

	Результат = Истина;
	ПроксиСервер = Неопределено;
	мСерверИсточник = СерверИсточникПараметр;

	СтрокаПараметраПолучения = СтрокаПараметраПолученияПараметр;
	ИмяВходящегоФайла        = ИмяВходящегоФайлаПараметр;

	ПерваяПопыткаПрокси   = Истина;
	ПерваяПопыткаСервера  = Истина;
	ПерваяПопыткаПолучить = Не (HTTP = Неопределено);

	Если ВариантЗагрузки <> 0 Тогда
		Если ТипЗнч(HTTP) <> Тип("HTTPСоединение") Тогда
			Если НеобходимаАвторизация И ПолучитьПараметрыСервера(ПерваяПопыткаСервера, ЗаголовокДляАвторизации, СообщениеДляАвторизации) Тогда
				Если ПустаяСтрока(КодДоступаНаСервер) Тогда
					КодДоступаНаСервер = ЛогинСервера;
				Иначе
					ЛогинСервера = КодДоступаНаСервер;
				КонецЕсли;
				Если ПустаяСтрока(ПарольДоступаНаСервер) Тогда
					ПарольДоступаНаСервер = ПарольСервера;
				Иначе
					ПарольСервера = ПарольДоступаНаСервер;
				КонецЕсли;

				HTTP = Новый HTTPСоединение(мСерверИсточник, , КодДоступаНаСервер, ПарольДоступаНаСервер);
			Иначе
				HTTP = Новый HTTPСоединение(мСерверИсточник);
			КонецЕсли;
		КонецЕсли;
	Иначе
		Попытка
			Возврат СоздатьЗащищенноеСоединение(мСерверИсточник, СтрокаПараметраПолучения, ИмяВходящегоФайла);
		Исключение
			// Сформировать сообщение причины ошибки, удалить служебную часть сообщения
			ОписаниеОшибкиСоединения = ОбщегоНазначения.СформироватьТекстСообщения(ОписаниеОшибки());
			Поз = Найти(ОписаниеОшибкиСоединения, ":");
			ОписаниеОшибкиСоединения = ?(Поз > 0, Прав(ОписаниеОшибкиСоединения, СтрДлина(ОписаниеОшибкиСоединения) - Поз), ОписаниеОшибкиСоединения);
		
			// Удалить имя запрашиваемого файла
			ОписаниеОшибкиСоединения = СтрЗаменить(ОписаниеОшибкиСоединения, СтрокаПараметраПолученияПараметр, "");
			ОписаниеОшибкиСоединения = СтрЗаменить(ОписаниеОшибкиСоединения, "'", "");
		
			// Скорее всего соединяемся через прокси
			HTTP = СоздатьСоединениеЧерезПрокси(ОписаниеОшибкиСоединения);
		
			Если ТипЗнч(HTTP) <> Тип("HTTPСоединение") Тогда
				Сообщить("Соединение с сервером не установлено.");
				Возврат Ложь;
			Иначе
				Возврат Истина;
			КонецЕсли;
		КонецПопытки;
	КонецЕсли;

	Пока Истина Цикл
		Попытка
			HTTP.Получить(СтрокаПараметраПолучения, ИмяВходящегоФайла);
			Результат = Истина;
			Прервать;
		Исключение
			
			ОписаниеОшибкиСоединения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		КонецПопытки;

		Если (Найти(ОписаниеОшибкиСоединения, "407") <> 0
		   И (Найти(НРег(ОписаниеОшибкиСоединения), "authentication") <> 0
		 Или  Найти(НРег(ОписаниеОшибкиСоединения), "аутентификация") <> 0))
		 ИЛИ Найти(ОписаниеОшибкиСоединения, "Couldn't connect to server") Тогда
			Если Не ПустаяСтрока(ИмяПользователя) Тогда
				Сообщить("Ошибка при получении файла, возможно указаны неверные параметры прокси-сервера", СтатусСообщения.Важное);
			КонецЕсли;
			
			Если ПолучитьПараметрыПрокси(ПерваяПопыткаПрокси) Тогда
				ПерваяПопыткаПрокси = Ложь;
				
				Если ПустаяСтрока(ИмяПользователя) Тогда
					ИмяПользователя = ЛогинПрокси;
				Иначе
					ЛогинПрокси = ИмяПользователя;
				КонецЕсли;
				
				Если ПустаяСтрока(ПарольПользователя) Тогда
					ПарольПользователя = ПарольПрокси;
				Иначе
					ПарольПрокси = ПарольПользователя;
				КонецЕсли;

				ПроксиСервер = Новый ИнтернетПрокси;
				ПроксиСервер.Пользователь = ИмяПользователя;
				ПроксиСервер.Пароль       = ПарольПользователя;
				ПроксиСервер.Установить("http", АдресПроксиСервера, ПортПроксиСервера);

				Если НеобходимаАвторизация И ПолучитьПараметрыСервера(ПерваяПопыткаСервера, ЗаголовокДляАвторизации, СообщениеДляАвторизации) Тогда
					Если ПустаяСтрока(КодДоступаНаСервер) Тогда
						КодДоступаНаСервер = ЛогинСервера;
					Иначе
						ЛогинСервера = КодДоступаНаСервер;
					КонецЕсли;
					Если ПустаяСтрока(ПарольДоступаНаСервер) Тогда
						ПарольДоступаНаСервер = ПарольСервера;
					Иначе
						ПарольСервера = ПарольДоступаНаСервер;
					КонецЕсли;

					HTTP = Новый HTTPСоединение(мСерверИсточник, , КодДоступаНаСервер, ПарольДоступаНаСервер, ПроксиСервер);
				Иначе
					HTTP = Новый HTTPСоединение(мСерверИсточник, , , , ПроксиСервер);
				КонецЕсли;
			Иначе
				HTTP = Неопределено;
				СообщениеОбОшибке = "";
				Результат = Ложь;
				Прервать;
			КонецЕсли;
		ИначеЕсли Найти(НРег(ОписаниеОшибкиСоединения), "ошибка аутентификации при доступе к ресурсу") <> 0 Тогда
			Если Не ПустаяСтрока(КодДоступаНаСервер) Тогда
				Сообщить("Ошибка! Указаны неверные логин/код или пароль доступа на сервер", СтатусСообщения.Важное);
			КонецЕсли;

			Если ПолучитьПараметрыСервера(ПерваяПопыткаСервера, ЗаголовокДляАвторизации, СообщениеДляАвторизации) Тогда
				ПерваяПопыткаСервера = Ложь;

				Если ПустаяСтрока(КодДоступаНаСервер) Тогда
					КодДоступаНаСервер = ЛогинСервера;
				Иначе
					ЛогинСервера = КодДоступаНаСервер;
				КонецЕсли;
				Если ПустаяСтрока(ПарольДоступаНаСервер) Тогда
					ПарольДоступаНаСервер = ПарольСервера;
				Иначе
					ПарольСервера = ПарольДоступаНаСервер;
				КонецЕсли;

				Если ТипЗнч(ПроксиСервер) <> Тип("ИнтернетПрокси") Тогда
					HTTP = Новый HTTPСоединение(мСерверИсточник, , КодДоступаНаСервер, ПарольДоступаНаСервер);
				Иначе
					HTTP = Новый HTTPСоединение(мСерверИсточник, , КодДоступаНаСервер, ПарольДоступаНаСервер, ПроксиСервер);
				КонецЕсли;
			Иначе
				HTTP = Неопределено;
				СообщениеОбОшибке = "";
				Результат = Ложь;
				Прервать;
			КонецЕсли;
		Иначе
			HTTP = Неопределено;

			Если ПерваяПопыткаПолучить Тогда
				Если НеобходимаАвторизация И ПолучитьПараметрыСервера(ПерваяПопыткаСервера, ЗаголовокДляАвторизации, СообщениеДляАвторизации) Тогда
					Если ПустаяСтрока(КодДоступаНаСервер) Тогда
						КодДоступаНаСервер = ЛогинСервера;
					Иначе
						ЛогинСервера = КодДоступаНаСервер;
					КонецЕсли;
					Если ПустаяСтрока(ПарольДоступаНаСервер) Тогда
						ПарольДоступаНаСервер = ПарольСервера;
					Иначе
						ПарольСервера = ПарольДоступаНаСервер;
					КонецЕсли;

					HTTP = Новый HTTPСоединение(мСерверИсточник, , КодДоступаНаСервер, ПарольДоступаНаСервер);
				Иначе
					HTTP = Новый HTTPСоединение(мСерверИсточник);
				КонецЕсли;

				ПерваяПопыткаПолучить = Ложь;
			Иначе
				СообщениеОбОшибке = ОписаниеОшибкиСоединения;
				Результат = Ложь;
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Возврат Результат;

КонецФункции

Функция РазмерФайлаHTTP(СоединениеHTTP, Знач ПутьНаСервере, Знач Заголовки = Неопределено)
	
	ЗапросHTTP = Новый HTTPЗапрос(ПутьНаСервере, Заголовки);
	Попытка
		ПолученныеЗаголовки = СоединениеHTTP.ПолучитьЗаголовки(ЗапросHTTP);// HEAD
	Исключение
		Возврат 0;
	КонецПопытки;
	РазмерСтрокой = ПолученныеЗаголовки.Заголовки["Content-Length"];
	
	ТипЧисло = Новый ОписаниеТипов("Число");
	РазмерФайла = ТипЧисло.ПривестиЗначение(РазмерСтрокой);
	
	Возврат РазмерФайла;
	
КонецФункции

Функция ТаймаутПоРазмеруФайла(Размер)
	
	БайтВМегабайте = 1048576;
	
	Если Размер > БайтВМегабайте Тогда
		КоличествоСекунд = Окр(Размер / БайтВМегабайте * 128);
		Возврат ?(КоличествоСекунд > 43200, 43200, КоличествоСекунд);
	КонецЕсли;
	
	Возврат 128;
	
КонецФункции

Функция ПараметрыАутентификацииИнтернетПоддержки() Экспорт
	
	Результат = Новый Структура("Логин, Пароль");
	
	Если Метаданные.Константы.Найти("ФайлОбработкиИнтернетПоддержкиПользователей") <> Неопределено Тогда
		МодульИнтернетПоддержки = ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ИнтернетПоддержкаПользователейВызовСервера");
		МодульИнтернетПоддержки.ЗагрузкаЛогинаИПароляИзПараметровИнтернетПоддержкиПользователей(Результат.Логин, Результат.Пароль);
	Иначе
		Результат.Логин = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("АутентификацияНаПользовательскомСайте", "КодПользователя", "");
		Результат.Пароль = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("АутентификацияНаПользовательскомСайте", "Пароль", "");
	КонецЕсли;
	
	Если Результат.Логин = "" ИЛИ Результат.Логин = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция СоздатьЗащищенноеСоединение(СерверИсточник, СтрокаПараметраПолучения, ИмяВходящегоФайла)
	
	URL = СерверИсточник + СтрокаПараметраПолучения;
	СтруктураURI = ОбновлениеКонфигурацииКлиент.СтруктураURI(URL);
	
	Сервер        = СтруктураURI.Хост;
	ПутьНаСервере = СтруктураURI.ПутьНаСервере;
	
	НастройкиСоединения = ПараметрыАутентификацииИнтернетПоддержки();
	
	Если НастройкиСоединения = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ИмяПользователя              = НастройкиСоединения.Логин;
	ПарольПользователя           = НастройкиСоединения.Пароль;
	ЗащищенноеСоединение         = Новый ЗащищенноеСоединениеOpenSSL();
	Таймаут                      = -1;
	Прокси                       = Неопределено;
	ИспользоватьАутентификациюОС = Ложь;
	Порт                         = СтруктураURI.Порт;
	Заголовки                    = Новый Соответствие;
	
	Если Таймаут = -1 Тогда
		Соединение = Новый HTTPСоединение(
		Сервер,
		Порт,
		ИмяПользователя,
		ПарольПользователя,
		Прокси,
		7,
		ЗащищенноеСоединение//,
		//ИспользоватьАутентификациюОС
		);
		
		РазмерФайла = РазмерФайлаHTTP(Соединение, ПутьНаСервере, Заголовки);
		Таймаут     = ТаймаутПоРазмеруФайла(РазмерФайла);
		Порт        = Соединение.Порт;
	КонецЕсли;
	
	Соединение = Новый HTTPСоединение(
		Сервер,
		Порт,
		ИмяПользователя,
		ПарольПользователя,
		Прокси,
		Таймаут,
		ЗащищенноеСоединение//,
		//ИспользоватьАутентификациюОС
		);
	
	ЗапросHTTP = Новый HTTPЗапрос(ПутьНаСервере, Заголовки);
	ЗапросHTTP.Заголовки.Вставить("Accept-Charset", "UTF-8");
	ЗапросHTTP.Заголовки.Вставить("X-1C-Request-UID", Строка(Новый УникальныйИдентификатор));
	Соединение.Получить(ЗапросHTTP, ИмяВходящегоФайла);
	
	Возврат Истина;
	
КонецФункции

мСерверИсточник = "";

#КонецЕсли