
&НаКлиенте
Перем ТекущаяСтрокаЗаявка;

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Объект.ДнейПланирования = 3;
	Объект.ПланироватьСДаты = КонецДня(ТекущаяДата()) + 1;
	кДекорации = 0;
	мДекорации = Новый Соответствие;
	
	РежимФильтра = 0;
	Элементы.РезультатыРаспределенияВсеСчета.Пометка = Истина;
	
	АдресДанныхВХранилище = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	
	Если Параметры.Свойство("Заявка", РаспределяемаяЗаявка) Тогда
		Элементы.Организация.Видимость = Ложь;
		Элементы.Заявка.Видимость = Истина;
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
									ЗаявкиКРаспределению, "Заявка", РаспределяемаяЗаявка, , , Истина);
		Элементы.ЗаявкиКРаспределению.Обновить();
		Элементы.ЗаявкиКРаспределению.ТекущаяСтрока = РаспределяемаяЗаявка;
		Элементы.ЗаявкиКРаспределению.Видимость = Ложь;
		Элементы.ОстаткиПоСчетамЗапланировать.Видимость = Истина;
		Элементы.ОстаткиПоСчетамТекущуюЗаявку.Видимость = Истина;
		Элементы.ОстаткиПоСчетамСформироватьПлатежныеПоручения.Видимость = Истина;
		Элементы.ОстаткиПоСчетамОчиститьДанныеРаспределения.Отображение = ОтображениеКнопки.Текст;
	КонецЕсли;
	
	Если Параметры.Свойство("Распределение") Тогда
		
		Элементы.ОстаткиПоСчетамЗапланировать.КнопкаПоУмолчанию = Истина;
		Заголовок = НСтр("ru = 'Распределение заявки по счетам'");
		АвтоЗаголовок = Ложь;
		РежимФильтра = 1;
		
	ИначеЕсли Параметры.Свойство("ФормированиеПлатежныхДокументов") Тогда
		
		Элементы.ОстаткиПоСчетамСформироватьПлатежныеПоручения.КнопкаПоУмолчанию = Истина;
		Заголовок = НСтр("ru = 'Для формирования платежных поручений заявку нужно распределить по счетам'");
		АвтоЗаголовок = Ложь;
		РежимФильтра = 1;
		
	КонецЕсли;
	
	Если РежимФильтра = 1 Тогда
		Элементы.РезультатыРаспределенияВсеСчета.Пометка = Ложь;
		Элементы.РезультатыРаспределенияВсеСКоторыхМожноПлатить.Пометка = Истина;
	КонецЕсли;

	ОбновитьДанные(Ложь);
	
	Если ЗначениеЗаполнено(РаспределяемаяЗаявка) Тогда
		СтруктураДанныхРаспределяемойЗаявки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РаспределяемаяЗаявка, "СтатьяКалькуляции, Сумма");
		СтруктураДанныхРаспределяемойЗаявки.Вставить("Заявка", РаспределяемаяЗаявка);
		ЗаявкиКРаспределениюПриАктивизацииСтрокиНаСервере(СтруктураДанныхРаспределяемойЗаявки);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Если ЗначениеЗаполнено(РаспределяемаяЗаявка) Тогда
		Организация = Неопределено;
	КонецЕсли;

	ОбновитьДанные(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ЗаписанаЗаявкаНаРасходованиеДенежныхСредств"
		ИЛИ ИмяСобытия = "ЗаписанКонтрактСЗаказчиком"
		ИЛИ ИмяСобытия = "ЗаписанКонтрактИсполнителя"
		ИЛИ ИмяСобытия = "СформированыПлатежныеПорученияПоЗаявкам" Тогда
		
		Если ИмяСобытия = "СформированыПлатежныеПорученияПоЗаявкам" И ЗначениеЗаполнено(РаспределяемаяЗаявка) Тогда
			Закрыть();
		Иначе
			СтруктураДанных = СтруктураДанныхОбновленияСтрокиЗаявки();
			ОбработкаОповещенияНаСервере(СтруктураДанных);
			Для Каждого СтрокаОстатков из ОстаткиПоСчетам.ПолучитьЭлементы() Цикл
				Элементы.ОстаткиПоСчетам.Развернуть(СтрокаОстатков.ПолучитьИдентификатор(), Истина);
			КонецЦикла;
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "ВыполнитьРаспределение" Тогда
		ВыполнитьРаспределение(Параметр, Источник);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОбщегоНазначения275КлиентСервер.ПроверитьИспользованиеПодсистемы(Отказ);
	
	Для Каждого СтрокаОстатков из ОстаткиПоСчетам.ПолучитьЭлементы() Цикл
		Элементы.ОстаткиПоСчетам.Развернуть(СтрокаОстатков.ПолучитьИдентификатор(), Истина);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	Если ЗначениеЗаполнено(РаспределяемаяЗаявка) Тогда
		Оповестить("ВыполненоРаспределениеЗаявкиПоСчетам", РаспределяемаяЗаявка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПланироватьСДатыПриИзменении(Элемент)
	
	ПланироватьСДатыПриИзмененииНаСервере(СтруктураДанныхОбновленияСтрокиЗаявки());
	Для Каждого СтрокаОстатков из ОстаткиПоСчетам.ПолучитьЭлементы() Цикл
		Элементы.ОстаткиПоСчетам.Развернуть(СтрокаОстатков.ПолучитьИдентификатор(), Истина);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДнейПланированияПриИзменении(Элемент)
	
	ОтключитьОбработчикОжидания("ПриИзмененииКоличестваДнейПланирования");
	ПодключитьОбработчикОжидания("ПриИзмененииКоличестваДнейПланирования", 0.3, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияПодписьНажатие(Элемент)
	
	мДекорации = ПолучитьИзВременногоХранилища(АдресСсылки);
	ЗначениеСсылки = мДекорации.Получить(Элемент.Имя);
	НавигационнаяСсылка = ПоместитьВоВременноеХранилище(ЗначениеСсылки, УникальныйИдентификатор);
	ПараметрыФормы = Новый Структура("СсылкаНаПараметры", НавигационнаяСсылка);
	ОткрытьФорму("Обработка.РаспределениеЗаявокПоСчетам.Форма.ФормаКалендаря", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОстаткиПоСчетамВыбор(Элемент, ИндексВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Не Элементы[Элементы.ОстаткиПоСчетам.ТекущийЭлемент.Имя].ТолькоПросмотр Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если Элементы.ОстаткиПоСчетам.ТекущийЭлемент.Имя = "РезультатыРаспределенияОстатокНаСчете"
		ИЛИ Элементы.ОстаткиПоСчетам.ТекущийЭлемент.Имя = "РезультатыРаспределенияДоступноеПоступление" Тогда
		
		ТекущиеДанные = Элементы.ОстаткиПоСчетам.ТекущиеДанные;
		ПараметрыФормы = Новый Структура("СсылкаНаПараметры", 
			ПоместитьВоВременноеХранилище(ПараметрыФормыКалендаря(ТекущиеДанные.Счет, РаспределяемаяЗаявка, 
																Объект.ПланироватьСДаты, Объект.ДнейПланирования)));
		ОткрытьФормуМодально("Обработка.РаспределениеЗаявокПоСчетам.Форма.ФормаКалендаря", 
			ПараметрыФормы);
		
		Возврат;
	КонецЕсли;
	
	СписокВыбора = Новый СписокЗначений;
	
	ВыбраннаяСтрока = ОстаткиПоСчетам.НайтиПоИдентификатору(ИндексВыбраннаяСтрока);
	
	Если ЗначениеЗаполнено(ВыбраннаяСтрока.Счет) Тогда
		СписокВыбора.Добавить("Расстановка", "Расстановка заявок по дням");
		СписокВыбора.Добавить(ВыбраннаяСтрока.Счет, "Открыть банковский счет");
	КонецЕсли;
	Если ЗначениеЗаполнено(ВыбраннаяСтрока.Контракт) Тогда
		СписокВыбора.Добавить(ВыбраннаяСтрока.Контракт, "Открыть контракт");
	КонецЕсли;
	
	Если СписокВыбора.Количество() = 1 Тогда
		ОткрытьЗначение(СписокВыбора[0].Значение);
	Иначе
		ВыбранноеЗначение = ВыбратьИзСписка(СписокВыбора, Элемент);
		ВыборЗначенияДляОткрытия(ВыбранноеЗначение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаявкиКРаспределениюПриАктивизацииСтроки(Элемент)
	
	СтруктураДанных = СтруктураДанныхОбновленияСтрокиЗаявки();
	Если ТекущаяСтрокаЗаявка <> СтруктураДанных.Заявка Тогда
		ПодключитьОбработчикОжидания("ЗаявкиКРаспределениюПриАктивизацииСтрокиОбработчик", 0.1, Истина);
		ТекущаяСтрокаЗаявка = СтруктураДанных.Заявка;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОстаткиПоСчетамПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	Если Строка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = ОстаткиПоСчетам.НайтиПоИдентификатору(Строка);

	Если ТекущиеДанные.ПолучитьРодителя() <> Неопределено Тогда
		ТекущиеДанные = ТекущиеДанные.ПолучитьРодителя();
	КонецЕсли;
	Доступно = ТекущиеДанные.ОстатокНаСчете + ТекущиеДанные.ДоступныеПоступления;
	Если Доступно Тогда
		СтандартнаяОбработка = Ложь;
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Перемещение;
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ОстаткиПоСчетамПеретаскиваниеСервер(Заявки, ИндексСтроки, СтруктураДанныхОбновленияСтроки)
	
	ТекущиеДанные = ОстаткиПоСчетам.НайтиПоИдентификатору(ИндексСтроки);
	
	Счет = ТекущиеДанные.Счет;
	Контракт = ТекущиеДанные.Контракт;
	
	Доступно = ДоступноПоСтроке(ИндексСтроки);
	
	Данные = ПолучитьИзВременногоХранилища(АдресДанныхВХранилище);
	РаспределениеЗаявок = Данные.РаспределениеЗаявок;
	
	Для Каждого Заявка из Заявки Цикл
		
		ЗаявкаОбъект = Заявка.ПолучитьОбъект();
		СтруктураДанных = Новый Структура("Заявка, СтатьяКалькуляции, Сумма", ЗаявкаОбъект.Ссылка, ЗаявкаОбъект.СтатьяКалькуляции, ЗаявкаОбъект.СуммаДокумента);
		ВывестиДанныеПоТекущейСтрокеЗаявки(Данные, СтруктураДанных);
		Если Не ТекущиеДанные.ПодходящийСчет Тогда
			Продолжить;
		КонецЕсли;
		
		Остаток = ЗаявкаОбъект.СуммаДокумента - ЗаявкаОбъект.РазмещениеЗаявки.Итог("СуммаПлатежа");
		Остаток = Макс(Остаток, 0);
		Остаток = Мин(Остаток, Доступно);
		
		Если Не Остаток Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаписатьДанныеПланированияВЗаявкуОбъект(Данные, ЗаявкаОбъект, Контракт, Счет, Остаток);
		
		Доступно = Доступно - Остаток;
		
		Если Не Доступно Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Элементы.ЗаявкиКРаспределению.Обновить();
	ВывестиДанныеПоТекущейСтрокеЗаявки(Данные, СтруктураДанныхОбновленияСтроки);
	ПоместитьВоВременноеХранилище(Данные, АдресДанныхВХранилище);
	
	Если ТекущиеДанные.ПолучитьРодителя() <> Неопределено Тогда
		ТекущиеДанные = ТекущиеДанные.ПолучитьРодителя();
	КонецЕсли;
	УстановитьСуммыОстатковВСтроке(ТекущиеДанные, Данные);
	
КонецПроцедуры

&НаКлиенте
Процедура ОстаткиПоСчетамПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	Если Строка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если ОстаткиПоСчетам.НайтиПоИдентификатору(Строка).ПодходящийСчет = Ложь Тогда
		Предупреждение(НСтр("ru = 'Заявка не может быть оплачена с выбранного счета в соответствии с ФЗ-275'"));
		Возврат;
	КонецЕсли;
	
	ОстаткиПоСчетамПеретаскиваниеСервер(ПараметрыПеретаскивания.Значение, Строка, СтруктураДанныхОбновленияСтрокиЗаявки());
	
КонецПроцедуры

&НаКлиенте
Процедура ОстаткиПоСчетамПроцентОтнесенияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ОстаткиПоСчетам.ТекущиеДанные;
	
	СуммаДоОбработки = ОстаткиПоСчетамПроцентОтнесенияПриИзмененииНаСервере(СтруктураДанныхОбновленияСтрокиЗаявки());
	
	Если СуммаДоОбработки > ТекущиеДанные.ВЗаявке Тогда
		Предупреждение(НСтр("ru = 'Сумма платежа не может быть больше чем остатки по счету и больше суммы заявки'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОстаткиПоСчетамВЗаявкеПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ОстаткиПоСчетам.ТекущиеДанные;
	СуммаДоОбработки = ТекущиеДанные.ВЗаявке;
	
	ОбновитьЗаявкуПриИзменении(СтруктураДанныхОбновленияСтрокиЗаявки());
	УстановитьТекущуюСтрокуПослеОбновления();
	
	Если СуммаДоОбработки > ТекущиеДанные.ВЗаявке Тогда
		Предупреждение(НСтр("ru = 'Сумма платежа не может быть больше чем остатки по счету и больше суммы заявки'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РаспределитьЗаявки(Команда)
	
	Результат = ОткрытьФормуМодально("Обработка.РаспределениеЗаявокПоСчетам.Форма.ФормаНастройкиРаспределения", , );
		
	Если Не Результат = Неопределено Тогда
		ВыполнитьРаспределение(Результат, Новый Структура("ОтборЗаявок", Ложь));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РаспределитьТекущуюЗаявку(Команда)
	
	Результат = ОткрытьФормуМодально("Обработка.РаспределениеЗаявокПоСчетам.Форма.ФормаНастройкиРаспределения", , );
		
	Если Не Результат = Неопределено Тогда
		ВыполнитьРаспределение(Результат, Новый Структура("ОтборЗаявок", Истина));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	
	ОбновитьДанные(Истина, СтруктураДанныхОбновленияСтрокиЗаявки());
	Для Каждого СтрокаОстатков из ОстаткиПоСчетам.ПолучитьЭлементы() Цикл
		Элементы.ОстаткиПоСчетам.Развернуть(СтрокаОстатков.ПолучитьИдентификатор(), Истина);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ТолькоПодходящиеПоСтатье(Команда)
	
	РежимФильтра = 2;
	УстановитьФильтрНаСервере(СтруктураДанныхОбновленияСтрокиЗаявки());
	Для Каждого СтрокаОстатков из ОстаткиПоСчетам.ПолучитьЭлементы() Цикл
		Элементы.ОстаткиПоСчетам.Развернуть(СтрокаОстатков.ПолучитьИдентификатор(), Истина);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВсеСКоторыхМожноПлатить(Команда)
	
	РежимФильтра = 1;
	УстановитьФильтрНаСервере(СтруктураДанныхОбновленияСтрокиЗаявки());
	Для Каждого СтрокаОстатков из ОстаткиПоСчетам.ПолучитьЭлементы() Цикл
		Элементы.ОстаткиПоСчетам.Развернуть(СтрокаОстатков.ПолучитьИдентификатор(), Истина);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВсеСчета(Команда)
	
	РежимФильтра = 0;
	УстановитьФильтрНаСервере(СтруктураДанныхОбновленияСтрокиЗаявки());
	Для Каждого СтрокаОстатков из ОстаткиПоСчетам.ПолучитьЭлементы() Цикл
		Элементы.ОстаткиПоСчетам.Развернуть(СтрокаОстатков.ПолучитьИдентификатор(), Истина);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьДанныеПланирования(Команда)
	
	Массив = Новый Массив;
	Для Каждого ВыделеннаяСтрока из Элементы.ЗаявкиКРаспределению.ВыделенныеСтроки Цикл
		Массив.Добавить(ВыделеннаяСтрока);
	КонецЦикла;
	
	Если Массив.Количество() Тогда
		ОчиститьДанныеПланированияНаСервере(Массив);
		УстановитьТекущуюСтрокуПослеОбновления();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Запланировать(Команда)
	
	Массив = Новый Массив;
	Для Каждого ВыделеннаяСтрока из Элементы.ЗаявкиКРаспределению.ВыделенныеСтроки Цикл
		Массив.Добавить(ВыделеннаяСтрока);
	КонецЦикла;
	
	Если Массив.Количество() Тогда
		ОстаткиПоСчетамПеретаскиваниеСервер(Массив, Элементы.ОстаткиПоСчетам.ТекущаяСтрока, СтруктураДанныхОбновленияСтрокиЗаявки());
		УстановитьТекущуюСтрокуПослеОбновления();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьВверх(Команда)
	
	ПереместитьНаСервере(-1);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьВниз(Команда)
	
	ПереместитьНаСервере(1);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьРаспределение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыбора <> Неопределено Тогда
		АдресРезультатаРаспределения = "";
		ВыполнитьРаспределениеСервер(РезультатВыбора, ДополнительныеПараметры);
		ОбновитьДанные(Истина, СтруктураДанныхОбновленияСтрокиЗаявки());
		Для Каждого СтрокаОстатков из ОстаткиПоСчетам.ПолучитьЭлементы() Цикл
			Элементы.ОстаткиПоСчетам.Развернуть(СтрокаОстатков.ПолучитьИдентификатор(), Истина);
		КонецЦикла;
		Если ЗначениеЗаполнено(АдресРезультатаРаспределения) Тогда
			ОткрытьФормуМодально("Обработка.РаспределениеЗаявокПоСчетам.Форма.ОтчетОРезультатахРаспределения", 
				Новый Структура("Адрес", АдресРезультатаРаспределения));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьРаспределениеСервер(РезультатВыбора, ДополнительныеПараметры)
	
	ПараметрыРасчета = Новый Структура;
	
	Запрос = Новый Запрос();
	Запрос.Текст = ЗаявкиКРаспределению.ТекстЗапроса;
	Для Каждого ПараметрСписка Из ЗаявкиКРаспределению.Параметры.Элементы Цикл
		Запрос.Параметры.Вставить(Строка(ПараметрСписка.Параметр), ПараметрСписка.Значение);
	КонецЦикла;
	Если ДополнительныеПараметры.Свойство("ОтборЗаявок") И ДополнительныеПараметры.ОтборЗаявок Тогда
		Запрос.Текст = Запрос.Текст + "
			|	И Документ.Ссылка В (&МассивЗаявок)";
		Запрос.Параметры.Вставить("МассивЗаявок", Элементы.ЗаявкиКРаспределению.ВыделенныеСтроки);
	КонецЕсли;

	ЗначениеПараметра = Запрос.Выполнить().Выгрузить();
	Если ЗначениеПараметра.Количество() = 0 Тогда
		ОбщегоНазначения.СообщитьИнформациюПользователю("Отсутствуют заявки к распределению");
		Возврат;
	КонецЕсли;
	ПараметрыРасчета.Вставить("Результат", ПоместитьВоВременноеХранилище(ЗначениеПараметра, УникальныйИдентификатор));
	
	ЗаполнитьЗначенияСвойств(РезультатВыбора, Объект, "ПланироватьСДаты, ДнейПланирования");
	
	РезультатРаспределения = Казначейство275Сервер.РаспределитьЗаявкиПоСчетамИДням(АдресДанныхВХранилище, РезультатВыбора, 
																					ПараметрыРасчета, ДополнительныеПараметры);
																					
	Если Казначейство275Сервер.НужноПоказыватьРезультатРаспределения(РезультатРаспределения, РезультатВыбора) Тогда
		АдресРезультатаРаспределения = ПоместитьВоВременноеХранилище(РезультатРаспределения, УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПрочитатьДанные()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗаявкиНаРасходованиеДенежныхСредствОстатки.ЗаявкаНаРасходование КАК ЗаявкаНаРасходованиеДенежныхСредств,
		|	ЗаявкиНаРасходованиеДенежныхСредствОстатки.СуммаОстаток КАК Сумма
		|ПОМЕСТИТЬ ОстаткиЗаявок
		|ИЗ
		|	РегистрНакопления.ЗаявкиНаРасходованиеСредств.Остатки(
		|			,
		|			(&Организация = &ПустаяСсылка
		|				ИЛИ ЗаявкаНаРасходование.Организация = &Организация)
		|				И (&Заявка = &ПустаяЗаявка
		|					ИЛИ ЗаявкаНаРасходование = &Заявка)) КАК ЗаявкиНаРасходованиеДенежныхСредствОстатки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДенежныеСредстваОстатки.БанковскийСчетКасса КАК БанковскийСчет,
		|	ДенежныеСредстваОстатки.СуммаОстаток КАК Сумма
		|ПОМЕСТИТЬ ОстаткиДС
		|ИЗ
		|	РегистрНакопления.ДенежныеСредства.Остатки(
		|			,
		|			&Организация = &ПустаяСсылка
		|				ИЛИ БанковскийСчетКасса.Владелец = &Организация) КАК ДенежныеСредстваОстатки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КонтрактыСЗаказчиками.Ссылка,
		|	КонтрактыСЗаказчиками.БанковскийСчет,
		|	КонтрактыСЗаказчиками.ДатаНачала
		|ПОМЕСТИТЬ Контракты
		|ИЗ
		|	Справочник.КонтрактыСЗаказчиками КАК КонтрактыСЗаказчиками
		|ГДЕ
		|	(КонтрактыСЗаказчиками.Состояние <> &СостояниеЗавершен
		|			ИЛИ КонтрактыСЗаказчиками.БанковскийСчет В
		|				(ВЫБРАТЬ
		|					ОстаткиДС.БанковскийСчет
		|				ИЗ
		|					ОстаткиДС))
		|	И (&Организация = &ПустаяСсылка
		|			ИЛИ КонтрактыСЗаказчиками.Владелец = &Организация)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПРЕДСТАВЛЕНИЕ(Контракты.Ссылка) КАК КонтрактСЗаказчикомПредставление,
		|	Контракты.Ссылка КАК КонтрактСЗаказчиком,
		|	Контракты.БанковскийСчет
		|ИЗ
		|	Контракты КАК Контракты
		|
		|УПОРЯДОЧИТЬ ПО
		|	Контракты.ДатаНачала
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	БанковскиеСчетаОрганизаций.Представление КАК БанковскийСчетПредставление,
		|	БанковскиеСчетаОрганизаций.Ссылка КАК БанковскийСчет,
		|	ЕСТЬNULL(ДенежныеСредстваОстатки.Сумма, 0) КАК ОстатокНаСчете,
		|	ЕСТЬNULL(ВложенныйЗапрос.Индекс, 999999999) КАК Индекс,
		|	НЕ &ТекстЗапросаПоляОтдельныйБанковскийСчетОрганизации КАК СобственныйСчет
		|ИЗ
		|	Справочник.БанковскиеСчета КАК БанковскиеСчетаОрганизаций
		|		ЛЕВОЕ СОЕДИНЕНИЕ ОстаткиДС КАК ДенежныеСредстваОстатки
		|		ПО (ДенежныеСредстваОстатки.БанковскийСчет = БанковскиеСчетаОрганизаций.Ссылка)
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ПорядокСледованияСчетовВУправленииФинансами.БанковскийСчет КАК БанковскийСчет,
		|			ПорядокСледованияСчетовВУправленииФинансами.Индекс КАК Индекс
		|		ИЗ
		|			(ВЫБРАТЬ ПЕРВЫЕ 1
		|				СохраненныеРежимыФильтра.РежимФильтра КАК РежимФильтра
		|			ИЗ
		|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|					1 КАК Порядок,
		|					ПорядокСледованияСчетовВУправленииФинансами.РежимФильтра КАК РежимФильтра
		|				ИЗ
		|					РегистрСведений.ПорядокСледованияСчетовВУправленииФинансами КАК ПорядокСледованияСчетовВУправленииФинансами
		|				ГДЕ
		|					ПорядокСледованияСчетовВУправленииФинансами.Пользователь = &Пользователь
		|					И ПорядокСледованияСчетовВУправленииФинансами.РежимФильтра = &РежимФильтра
		|				
		|				ОБЪЕДИНИТЬ ВСЕ
		|				
		|				ВЫБРАТЬ
		|					2,
		|					ПорядокСледованияСчетовВУправленииФинансами.РежимФильтра
		|				ИЗ
		|					РегистрСведений.ПорядокСледованияСчетовВУправленииФинансами КАК ПорядокСледованияСчетовВУправленииФинансами
		|				ГДЕ
		|					ПорядокСледованияСчетовВУправленииФинансами.Пользователь = &Пользователь) КАК СохраненныеРежимыФильтра
		|			
		|			УПОРЯДОЧИТЬ ПО
		|				СохраненныеРежимыФильтра.Порядок) КАК СохраненныйРежимФильтра
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокСледованияСчетовВУправленииФинансами КАК ПорядокСледованияСчетовВУправленииФинансами
		|				ПО СохраненныйРежимФильтра.РежимФильтра = ПорядокСледованияСчетовВУправленииФинансами.РежимФильтра
		|		ГДЕ
		|			ПорядокСледованияСчетовВУправленииФинансами.Пользователь = &Пользователь) КАК ВложенныйЗапрос
		|		ПО БанковскиеСчетаОрганизаций.Ссылка = ВложенныйЗапрос.БанковскийСчет
		|ГДЕ
		|	(НЕ БанковскиеСчетаОрганизаций.ПометкаУдаления
		|			ИЛИ ЕСТЬNULL(ДенежныеСредстваОстатки.Сумма, 0) <> 0)
		|	И ТИПЗНАЧЕНИЯ(БанковскиеСчетаОрганизаций.Владелец) = ТИП(Справочник.Организации)
		|	И (&Организация = &ПустаяСсылка
		|			ИЛИ БанковскиеСчетаОрганизаций.Владелец = &Организация)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Индекс,
		|	БанковскийСчет
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ОстаткиЗаявок.ЗаявкаНаРасходованиеДенежныхСредств КАК Заявка,
		|	ЗаявкаНаРасходованиеДенежныхСредствФинансирование.МестоРазмещения КАК БанковскийСчет,
		|	НЕ &ТекстЗапросаПоляЗаявкаОтдельныйБанковскийСчет КАК СобственныйСчет,
		|	ПРЕДСТАВЛЕНИЕ(ЗаявкаНаРасходованиеДенежныхСредствФинансирование.МестоРазмещения) КАК БанковскийСчетПредставление,
		|	ЗаявкаНаРасходованиеДенежныхСредствФинансирование.КонтрактСЗаказчиком,
		|	ВЫБОР
		|		КОГДА ЗаявкаНаРасходованиеДенежныхСредствФинансирование.ДатаПлатежа < &ПланироватьСДаты
		|			ТОГДА &ПланироватьСДаты
		|		ИНАЧЕ ЗаявкаНаРасходованиеДенежныхСредствФинансирование.ДатаПлатежа
		|	КОНЕЦ КАК ДатаПлатежа,
		|	ЗаявкаНаРасходованиеДенежныхСредствФинансирование.СуммаПлатежа КАК Распределено
		|ИЗ
		|	ОстаткиЗаявок КАК ОстаткиЗаявок
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаРасходованиеСредств.РазмещениеЗаявки КАК ЗаявкаНаРасходованиеДенежныхСредствФинансирование
		|		ПО ОстаткиЗаявок.ЗаявкаНаРасходованиеДенежныхСредств = ЗаявкаНаРасходованиеДенежныхСредствФинансирование.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ОстаткиЗаявок.ЗаявкаНаРасходованиеДенежныхСредств,
		|	ЗаявкаНаРасходованиеДенежныхСредствКонтракты.КонтрактСЗаказчиком,
		|	ЗаявкаНаРасходованиеДенежныхСредствКонтракты.КонтрактСЗаказчиком.БанковскийСчет КАК БанковскийСчет,
		|	ЗаявкаНаРасходованиеДенежныхСредствКонтракты.Сумма
		|ПОМЕСТИТЬ КонтрактыСЗаказчикамиЗаявок
		|ИЗ
		|	ОстаткиЗаявок КАК ОстаткиЗаявок
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаРасходованиеСредств.Контракты КАК ЗаявкаНаРасходованиеДенежныхСредствКонтракты
		|		ПО ОстаткиЗаявок.ЗаявкаНаРасходованиеДенежныхСредств = ЗаявкаНаРасходованиеДенежныхСредствКонтракты.Ссылка
		|ГДЕ
		|	ОстаткиЗаявок.ЗаявкаНаРасходованиеДенежныхСредств.КонтрактИсполнителя.КонтрактСУчастникомГОЗ = ИСТИНА
		|	И ОстаткиЗаявок.ЗаявкаНаРасходованиеДенежныхСредств.ПлатежПоФЗ275
		|	И НЕ ЗаявкаНаРасходованиеДенежныхСредствКонтракты.Ссылка ЕСТЬ NULL 
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ОстаткиЗаявок.ЗаявкаНаРасходованиеДенежныхСредств,
		|	КонтрактыИсполнителей.КонтрактСЗаказчиком,
		|	НЕОПРЕДЕЛЕНО,
		|	0
		|ИЗ
		|	ОстаткиЗаявок КАК ОстаткиЗаявок
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КонтрактыИсполнителей.НомераКонтрактов КАК КонтрактыИсполнителей
		|		ПО ОстаткиЗаявок.ЗаявкаНаРасходованиеДенежныхСредств.КонтрактИсполнителя = КонтрактыИсполнителей.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаРасходованиеСредств.Контракты КАК ЗаявкаНаРасходованиеДенежныхСредствКонтракты
		|		ПО ОстаткиЗаявок.ЗаявкаНаРасходованиеДенежныхСредств = ЗаявкаНаРасходованиеДенежныхСредствКонтракты.Ссылка
		|ГДЕ
		|	ОстаткиЗаявок.ЗаявкаНаРасходованиеДенежныхСредств.КонтрактИсполнителя.КонтрактСУчастникомГОЗ = ИСТИНА
		|	И ОстаткиЗаявок.ЗаявкаНаРасходованиеДенежныхСредств.ПлатежПоФЗ275
		|	И ЗаявкаНаРасходованиеДенежныхСредствКонтракты.Ссылка ЕСТЬ NULL 
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ОстаткиЗаявок.ЗаявкаНаРасходованиеДенежныхСредств,
		|	ЗНАЧЕНИЕ(Справочник.КонтрактыСЗаказчиками.ПустаяСсылка),
		|	НЕОПРЕДЕЛЕНО,
		|	0
		|ИЗ
		|	ОстаткиЗаявок КАК ОстаткиЗаявок
		|ГДЕ
		|	ЕСТЬNULL(ОстаткиЗаявок.ЗаявкаНаРасходованиеДенежныхСредств.КонтрактИсполнителя.КонтрактСУчастникомГОЗ, ЛОЖЬ) = ЛОЖЬ
		|	И ОстаткиЗаявок.ЗаявкаНаРасходованиеДенежныхСредств.ПлатежПоФЗ275
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КонтрактыСЗаказчикамиЗаявок.ЗаявкаНаРасходованиеДенежныхСредств КАК Заявка,
		|	КонтрактыСЗаказчикамиЗаявок.КонтрактСЗаказчиком КАК КонтрактСЗаказчиком,
		|	КонтрактыСЗаказчикамиЗаявок.БанковскийСчет,
		|	КонтрактыСЗаказчикамиЗаявок.Сумма
		|ИЗ
		|	КонтрактыСЗаказчикамиЗаявок КАК КонтрактыСЗаказчикамиЗаявок
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ОстаткиЗаявок.ЗаявкаНаРасходованиеДенежныхСредств КАК Заявка,
		|	БанковскиеСчетаОрганизаций.Ссылка КАК БанковскийСчет,
		|	НЕ &ТекстЗапросаПоляОтдельныйБанковскийСчетОрганизации КАК СобственныйСчет
		|ИЗ
		|	ОстаткиЗаявок КАК ОстаткиЗаявок
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.БанковскиеСчета КАК БанковскиеСчетаОрганизаций
		|		ПО ОстаткиЗаявок.ЗаявкаНаРасходованиеДенежныхСредств.Организация = БанковскиеСчетаОрганизаций.Владелец
		|ГДЕ
		|	НЕ &ТекстЗапросаОтдельныйБанковскийСчетОрганизации
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	КонтрактыСЗаказчикамиЗаявок.ЗаявкаНаРасходованиеДенежныхСредств,
		|	БанковскиеСчетаОрганизаций.Ссылка,
		|	НЕ &ТекстЗапросаПоляОтдельныйБанковскийСчетОрганизации
		|ИЗ
		|	КонтрактыСЗаказчикамиЗаявок КАК КонтрактыСЗаказчикамиЗаявок
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.БанковскиеСчета КАК БанковскиеСчетаОрганизаций
		|		ПО (&ТекстЗапросаОтдельныйБанковскийСчетОрганизации)
		|ГДЕ
		|	КонтрактыСЗаказчикамиЗаявок.КонтрактСЗаказчиком = ЗНАЧЕНИЕ(Справочник.КонтрактыСЗаказчиками.ПустаяСсылка)
		|	И ТИПЗНАЧЕНИЯ(БанковскиеСчетаОрганизаций.Владелец) = ТИП(Справочник.Организации)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	КонтрактыСЗаказчикамиЗаявок.ЗаявкаНаРасходованиеДенежныхСредств,
		|	КонтрактыСЗаказчиками.БанковскийСчет,
		|	НЕ &ТекстЗапросаПоляКонтрактОтдельныйБанковскийСчет
		|ИЗ
		|	КонтрактыСЗаказчикамиЗаявок КАК КонтрактыСЗаказчикамиЗаявок
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КонтрактыИсполнителей.НомераКонтрактов КАК КонтрактыИсполнителей
		|		ПО КонтрактыСЗаказчикамиЗаявок.ЗаявкаНаРасходованиеДенежныхСредств.КонтрактИсполнителя = КонтрактыИсполнителей.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КонтрактыСЗаказчиками КАК КонтрактыСЗаказчиками
		|		ПО (КонтрактыИсполнителей.КонтрактСЗаказчиком = КонтрактыСЗаказчиками.Ссылка)
		|ГДЕ
		|	НЕ КонтрактыСЗаказчикамиЗаявок.КонтрактСЗаказчиком = ЗНАЧЕНИЕ(Справочник.КонтрактыСЗаказчиками.ПустаяСсылка)" ;
		
		
	Запрос.Текст = СтрЗаменить(
		Запрос.Текст, 
		"&ТекстЗапросаОтдельныйБанковскийСчетОрганизации", 
		Контроли275Сервер.ТекстЗапросаПроверкиОтдельногоСчета("БанковскиеСчетаОрганизаций"));
		
	Запрос.Текст = СтрЗаменить(
		Запрос.Текст, 
		"&ТекстЗапросаПоляОтдельныйБанковскийСчетОрганизации", 
		Контроли275Сервер.ТекстЗапросаПоляОтдельногоСчета("БанковскиеСчетаОрганизаций"));
		
	Запрос.Текст = СтрЗаменить(
		Запрос.Текст, 
		"&ТекстЗапросаПоляЗаявкаОтдельныйБанковскийСчет", 
		Контроли275Сервер.ТекстЗапросаПоляОтдельногоСчета("ЗаявкаНаРасходованиеДенежныхСредствФинансирование.МестоРазмещения"));
		
	Запрос.Текст = СтрЗаменить(
		Запрос.Текст, 
		"&ТекстЗапросаПоляКонтрактОтдельныйБанковскийСчет", 
		Контроли275Сервер.ТекстЗапросаПоляОтдельногоСчета("КонтрактыСЗаказчиками.БанковскийСчет"));

	Запрос.УстановитьПараметр("ПланироватьСДаты", Объект.ПланироватьСДаты);
	Запрос.УстановитьПараметр("Пользователь", Пользователи.АвторизованныйПользователь());
	Запрос.УстановитьПараметр("РежимФильтра", РежимФильтра);
	Запрос.УстановитьПараметр("СостояниеЗавершен", Перечисления.СостоянияКонтрактов.Завершен);
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ПустаяСсылка", Справочники.Организации.ПустаяСсылка());
	
	Запрос.УстановитьПараметр("Заявка", РаспределяемаяЗаявка);
	Запрос.УстановитьПараметр("ПустаяЗаявка", Документы.ЗаявкаНаРасходованиеСредств.ПустаяСсылка());

	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	СоответствиеКонтрактовИСчетов 	= МассивРезультатов[3].Выгрузить();
	ОстаткиДС 						= МассивРезультатов[4].Выгрузить();
	РаспределениеЗаявок 			= МассивРезультатов[5].Выгрузить();
	ДоступныеКонтрактыПоЗаявкам		= МассивРезультатов[7].Выгрузить();
	ДоступныеСчетаПоЗаявкам			= МассивРезультатов[8].Выгрузить();
	
	ПланируемыеДоходы = Обработки.РаспределениеЗаявокПоСчетам.ПланируемыеДоходы(Объект.ПланироватьСДаты,
													НачалоДня(Объект.ПланироватьСДаты + 86400 * (Объект.ДнейПланирования - 1)), Организация);
													
	ОстаткиПоСтатьямКалькуляции = ИсточникиДанных275Сервер.ОстаткиЛимитовПоКонтрактам();
	
	ОстаткиДС.Индексы.Добавить("БанковскийСчет");
	ОстаткиДС.Индексы.Добавить("СобственныйСчет");
	
	РаспределениеЗаявок.Индексы.Добавить("БанковскийСчет");
	РаспределениеЗаявок.Индексы.Добавить("БанковскийСчет, ДатаПлатежа");
	РаспределениеЗаявок.Индексы.Добавить("Заявка");
	
	СоответствиеКонтрактовИСчетов.Индексы.Добавить("БанковскийСчет");
	
	ДоступныеСчетаПоЗаявкам.Индексы.Добавить("Заявка, СобственныйСчет");
	ДоступныеСчетаПоЗаявкам.Индексы.Добавить("Заявка, БанковскийСчет");
	
	СтруктураРезультат = Новый Структура();
	СтруктураРезультат.Вставить("СоответствиеКонтрактовИСчетов", 	СоответствиеКонтрактовИСчетов);
	СтруктураРезультат.Вставить("ОстаткиДС", 						ОстаткиДС);
	СтруктураРезультат.Вставить("РаспределениеЗаявок", 				РаспределениеЗаявок);
	СтруктураРезультат.Вставить("ОстаткиПоСтатьямКалькуляции", 		ОстаткиПоСтатьямКалькуляции);
	СтруктураРезультат.Вставить("ПланируемыеДоходы", 				ПланируемыеДоходы);
	СтруктураРезультат.Вставить("ДоступныеСчетаПоЗаявкам", 			ДоступныеСчетаПоЗаявкам);
	СтруктураРезультат.Вставить("ДоступныеКонтрактыПоЗаявкам", 		ДоступныеКонтрактыПоЗаявкам);
	
	Возврат СтруктураРезультат;
	
КонецФункции

&НаСервере
Функция НайтиСтрокуКонтракта(СтрокаСчета, Контракт, НаименованиеКонтракта, Добавлять = Истина)
	
	ПодчиненныеСтроки = СтрокаСчета.ПолучитьЭлементы();
	Для Каждого СтрокаКонтракта из ПодчиненныеСтроки Цикл
		Если СтрокаКонтракта.Контракт = Контракт Тогда
			Возврат СтрокаКонтракта;
		КонецЕсли;
	КонецЦикла;
	
	Если Не Добавлять Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НоваяСтрока = ПодчиненныеСтроки.Добавить();
	НоваяСтрока.Контракт = Контракт;
	НоваяСтрока.СчетКонтракт = НаименованиеКонтракта;
	
	Возврат НоваяСтрока;
	
КонецФункции

&НаСервере
Процедура ВывестиОбщиеДанные(Данные)
	
	ОстаткиДС = Данные.ОстаткиДС;
	ПланируемыеДоходы = Данные.ПланируемыеДоходы;
	СоответствиеКонтрактовИСчетов = Данные.СоответствиеКонтрактовИСчетов;
	
	ЭлементыОстатков = ОстаткиПоСчетам.ПолучитьЭлементы();
	ЭлементыОстатков.Очистить();
	
	Для Каждого СтрокаСчета из ОстаткиДС Цикл
		
		НоваяСтрока = ЭлементыОстатков.Добавить();
		НоваяСтрока.Счет = СтрокаСчета.БанковскийСчет;
		НоваяСтрока.СчетКонтракт = СтрокаСчета.БанковскийСчетПредставление;
		
		КонтрактыПоСчету = СоответствиеКонтрактовИСчетов.НайтиСтроки(Новый Структура("БанковскийСчет", НоваяСтрока.Счет));
		Для Каждого Контракт из КонтрактыПоСчету Цикл
			СтрокаКонтракта = НайтиСтрокуКонтракта(НоваяСтрока, Контракт.КонтрактСЗаказчиком, Контракт.КонтрактСЗаказчикомПредставление);
			СтрокаКонтракта.Счет = НоваяСтрока.Счет;
		КонецЦикла;
		
		ПланируемыеПоступления = ПланируемыеДоходы.Скопировать(Новый Структура("БанковскийСчет", СтрокаСчета.БанковскийСчет));
		ПланируемыеПоступления.Свернуть("КонтрактСЗаказчиком, КонтрактСЗаказчикомПредставление", "ДоходПлан");
		ИтогоПоступлений = 0;
		Для Каждого ПланируемоеПоступление из ПланируемыеПоступления Цикл
			СтрокаКонтракта = НайтиСтрокуКонтракта(НоваяСтрока, 
										ПланируемоеПоступление.КонтрактСЗаказчиком, ПланируемоеПоступление.КонтрактСЗаказчикомПредставление);
			СтрокаКонтракта.Счет = НоваяСтрока.Счет;
			СтрокаКонтракта.ДоступныеПоступления = ПланируемоеПоступление.ДоходПлан;
		КонецЦикла;
		
		ЭлементыКонтракты = НоваяСтрока.ПолучитьЭлементы();
		Если ЭлементыКонтракты.Количество() = 1 Тогда
			ПодчиненнаяСтрока = ЭлементыКонтракты[0];
			НоваяСтрока.СчетКонтракт = НоваяСтрока.СчетКонтракт + "; " + ПодчиненнаяСтрока.СчетКонтракт;
			НоваяСтрока.Контракт = ПодчиненнаяСтрока.Контракт;
			ЭлементыКонтракты.Удалить(ПодчиненнаяСтрока);
		КонецЕсли;
		
		УстановитьСуммыОстатковВСтроке(НоваяСтрока, Данные);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСуммыОстатковВСтроке(СтрокаОстатков, Данные)
	
	РезультатРасчета = Казначейство275Сервер.РассчитатьОстаткиДляСтроки(СтрокаОстатков.Счет, Объект, Данные);
	СтрокаОстатков.ОстатокНаСчете = РезультатРасчета.ОстатокНаСчете;
	СтрокаОстатков.ДоступныеПоступления = РезультатРасчета.ДоступныеПоступления;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиДанныеПоТекущейСтрокеЗаявки(Данные, ТекущиеДанные)
	
	РаспределениеЗаявок = Данные.РаспределениеЗаявок;
	ОстаткиПоСтатьямКалькуляции = Данные.ОстаткиПоСтатьямКалькуляции;
	
	ДоступныеСчетаПоЗаявкам = Данные.ДоступныеСчетаПоЗаявкам;
	ДоступныеКонтрактыПоЗаявкам = Данные.ДоступныеКонтрактыПоЗаявкам;
	
	Заявка = ТекущиеДанные.Заявка;
	
	ДоступныеСчетаПоЗаявкам = ДоступныеСчетаПоЗаявкам.Скопировать(Новый Структура("Заявка", Заявка));
	ДоступныеКонтрактыПоЗаявкам = ДоступныеКонтрактыПоЗаявкам.Скопировать(Новый Структура("Заявка", Заявка));
	
	СтатьяКалькуляции = ТекущиеДанные.СтатьяКалькуляции;
	
	НайденныеСтроки = РаспределениеЗаявок.НайтиСтроки(Новый Структура("Заявка", Заявка));
	ЭлементыСчетаКонтракты = ОстаткиПоСчетам.ПолучитьЭлементы();
	
	Для Каждого СтрокаСчет из ЭлементыСчетаКонтракты Цикл
		СтрокаСчет.ОстатокПоСтатье = 0;
		СтрокаСчет.ВЗаявке = 0;
		СтрокаСчет.ПроцентОтнесения = 0;
		СтрокаСчет.ПодходящийСчет = Ложь;
		СтрокаСчет.ПодходящийЛимит = Ложь;
		Для Каждого Строка из СтрокаСчет.ПолучитьЭлементы() Цикл
			Строка.ПодходящийСчет = Ложь;
			Строка.ПодходящийЛимит = Ложь;
			Строка.ВЗаявке = 0;
			Строка.ПроцентОтнесения = 0;
		КонецЦикла;
	КонецЦикла;
	
	Для Каждого НайденнаяСтрока из НайденныеСтроки Цикл
		
		Для Каждого СтрокаСчет из ЭлементыСчетаКонтракты Цикл
			Если СтрокаСчет.Счет = НайденнаяСтрока.БанковскийСчет Тогда
				СтрокаСчет.ВЗаявке = СтрокаСчет.ВЗаявке + НайденнаяСтрока.Распределено;
				СтрокаСчет.ПроцентОтнесения = ?(ТекущиеДанные.Сумма, 100 * СтрокаСчет.ВЗаявке / ТекущиеДанные.Сумма, 0);
				СтрокаКонтракта = НайтиСтрокуКонтракта(СтрокаСчет, НайденнаяСтрока.КонтрактСЗаказчиком, "", Ложь);
				Если СтрокаКонтракта <> Неопределено Тогда
					СтрокаКонтракта.ВЗаявке = СтрокаКонтракта.ВЗаявке + НайденнаяСтрока.Распределено;
					СтрокаКонтракта.ПроцентОтнесения = ?(ТекущиеДанные.Сумма, 100 * СтрокаКонтракта.ВЗаявке / ТекущиеДанные.Сумма, 0);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	НайденныеСтроки = ОстаткиПоСтатьямКалькуляции.НайтиСтроки(Новый Структура("СтатьяКалькуляции", СтатьяКалькуляции));
	Для Каждого НайденнаяСтрока из НайденныеСтроки Цикл
		
		Для Каждого СтрокаСчет из ЭлементыСчетаКонтракты Цикл
			Если ЗначениеЗаполнено(СтрокаСчет.Контракт)
				И СтрокаСчет.Контракт = НайденнаяСтрока.КонтрактСЗаказчиком Тогда
				СтрокаСчет.ОстатокПоСтатье = НайденнаяСтрока.ДоступныйОстаток;
				ФлагДоступностиКонтракта = ДоступныеКонтрактыПоЗаявкам.Найти(СтрокаСчет.Контракт, "КонтрактСЗаказчиком") <> Неопределено
								ИЛИ ДоступныеКонтрактыПоЗаявкам.Найти(Справочники.КонтрактыСЗаказчиками.ПустаяСсылка(), "КонтрактСЗаказчиком") <> Неопределено;
				СтрокаСчет.ПодходящийЛимит = СтрокаСчет.ОстатокПоСтатье И ФлагДоступностиКонтракта <> Неопределено;
			Иначе
				СтрокаКонтракта = НайтиСтрокуКонтракта(СтрокаСчет, НайденнаяСтрока.КонтрактСЗаказчиком, "", Ложь);
				Если СтрокаКонтракта <> Неопределено Тогда
					СтрокаКонтракта.ОстатокПоСтатье = НайденнаяСтрока.ДоступныйОстаток;
					ФлагДоступностиКонтракта = ДоступныеКонтрактыПоЗаявкам.Найти(СтрокаКонтракта.Контракт, "КонтрактСЗаказчиком") <> Неопределено
						ИЛИ ДоступныеКонтрактыПоЗаявкам.Найти(Справочники.КонтрактыСЗаказчиками.ПустаяСсылка(), "КонтрактСЗаказчиком") <> Неопределено;
					СтрокаКонтракта.ПодходящийЛимит = СтрокаКонтракта.ОстатокПоСтатье И ФлагДоступностиКонтракта <> Неопределено;
					СтрокаСчет.ОстатокПоСтатье = СтрокаСчет.ОстатокПоСтатье + НайденнаяСтрока.ДоступныйОстаток;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	//Расстановка флагов для фильтров
	
	Для Каждого СтрокаСчет из ЭлементыСчетаКонтракты Цикл
		СчетДоступен = ДоступныеСчетаПоЗаявкам.Найти(СтрокаСчет.Счет, "БанковскийСчет") <> Неопределено;
		СтрокаСчет.ПодходящийСчет = СчетДоступен;
		Для Каждого СтрокаКонтракта из СтрокаСчет.ПолучитьЭлементы() Цикл
			СтрокаКонтракта.ПодходящийСчет = СтрокаСчет.ПодходящийСчет;
			Если СтрокаКонтракта.ПодходящийЛимит Тогда
				СтрокаСчет.ПодходящийЛимит = Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	//Установка заголовка оплат
	
	РаспределениеЗаявок = Данные.РаспределениеЗаявок;
	НайденныеСтроки = РаспределениеЗаявок.НайтиСтроки(Новый Структура("Заявка", ТекущиеДанные.Заявка));
	
	Для Сч = 1 По кДекорации Цикл
		НоваяДекорация = Элементы.Найти("НоваяДекорация"+Строка(Сч));
		Если НоваяДекорация <> Неопределено Тогда
			Элементы.Удалить(НоваяДекорация);
		КонецЕсли;
	КонецЦикла;
	кДекорации = 0;
	мДекорации = Новый Соответствие;
	
	Если Не НайденныеСтроки.Количество() Тогда
		Элементы.ДекорацияПодписьОплата.Заголовок = НСтр("ru = 'Оплаты по заявке не запланированы'");
		Элементы.ДекорацияПодписьОплата.Гиперссылка = Ложь;
	Иначе
		Элементы.ДекорацияПодписьОплата.Заголовок = НСтр("ru = 'Заявка будет оплачена: '");
		Сч = 1;
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			
			ФСП = МассивФорматированнаяСтрокаПлатежа(НайденнаяСтрока);
			
			НД = Элементы.Добавить("НоваяДекорация"+Строка(Сч), Тип("ДекорацияФормы"), Элементы.ГруппаДекорации);
			НД.Заголовок = ФСП[0];
			Сч = Сч + 1;
			
			НД.Гиперссылка = Истина;
			НД.УстановитьДействие("Нажатие", "ДекорацияПодписьНажатие");
			
			ЗначениеСсылки = ПараметрыФормыКалендаря(НайденнаяСтрока.БанковскийСчет, НайденнаяСтрока.Заявка, Объект.ПланироватьСДаты, Объект.ДнейПланирования);
			мДекорации.Вставить(НД.Имя, ЗначениеСсылки);
			АдресСсылки = ПоместитьВоВременноеХранилище(мДекорации, УникальныйИдентификатор);

			НД = Элементы.Добавить("НоваяДекорация"+Строка(Сч), Тип("ДекорацияФормы"), Элементы.ГруппаДекорации);
			НД.Заголовок = ФСП[1];
			Сч = Сч + 1;
			
		КонецЦикла;
		кДекорации = Сч;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанные(ОбновлятьДанныеПоЗаявке, СтруктураДанных = Неопределено)
	
	Данные = ПрочитатьДанные();
	ПоместитьВоВременноеХранилище(Данные, АдресДанныхВХранилище);
	ВывестиОбщиеДанные(Данные);
	Если ОбновлятьДанныеПоЗаявке Тогда
		ВывестиДанныеПоТекущейСтрокеЗаявки(Данные, СтруктураДанных);
		Если РежимФильтра Тогда
			УбратьЭлементыНепроходящиеФильтр();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаявкиКРаспределениюПриАктивизацииСтрокиНаСервере(СтруктураДанных)
	
	Данные = ПолучитьИзВременногоХранилища(АдресДанныхВХранилище);
	Если РежимФильтра Тогда
		ВывестиОбщиеДанные(Данные);
	КонецЕсли;
	ВывестиДанныеПоТекущейСтрокеЗаявки(Данные, СтруктураДанных);
	Если РежимФильтра Тогда
		УбратьЭлементыНепроходящиеФильтр();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаявкиКРаспределениюПриАктивизацииСтрокиОбработчик()
	
	ЗаявкиКРаспределениюПриАктивизацииСтрокиНаСервере(СтруктураДанныхОбновленияСтрокиЗаявки());
	Если РежимФильтра Тогда
		Для Каждого СтрокаОстатков из ОстаткиПоСчетам.ПолучитьЭлементы() Цикл
			Элементы.ОстаткиПоСчетам.Развернуть(СтрокаОстатков.ПолучитьИдентификатор(), Истина);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборЗначенияДляОткрытия(Значение, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Значение <> Неопределено Тогда
		Если Значение.Значение = "Расстановка" Тогда
			ТекущиеДанные = Элементы.ОстаткиПоСчетам.ТекущиеДанные;
			ПараметрыФормы = Новый Структура("СсылкаНаПараметры", 
				ПоместитьВоВременноеХранилище(ПараметрыФормыКалендаря(ТекущиеДанные.Счет, , Объект.ПланироватьСДаты, Объект.ДнейПланирования)));
			ОткрытьФормуМодально("Обработка.РаспределениеЗаявокПоСчетам.Форма.ФормаКалендаря", 
				ПараметрыФормы, );
		Иначе
			ОткрытьЗначение(Значение.Значение);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаОповещенияНаСервере(СтруктураДанных)
	
	Элементы.ЗаявкиКРаспределению.Обновить();
	ОбновитьДанные(Истина, СтруктураДанных);
	
КонецПроцедуры

&НаСервере
Процедура ПланироватьСДатыПриИзмененииНаСервере(СтруктураДанных)
	
	ОбновитьДанные(Истина, СтруктураДанных);
	
КонецПроцедуры

&НаСервере
Процедура ДнейПланированияПриИзмененииНаСервере(СтруктураДанных)
	
	ОбновитьДанные(Истина, СтруктураДанных);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииКоличестваДнейПланирования()
	
	ДнейПланированияПриИзмененииНаСервере(СтруктураДанныхОбновленияСтрокиЗаявки());
	Для Каждого СтрокаОстатков из ОстаткиПоСчетам.ПолучитьЭлементы() Цикл
		Элементы.ОстаткиПоСчетам.Развернуть(СтрокаОстатков.ПолучитьИдентификатор(), Истина);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ОстаткиПоСчетамПроцентОтнесенияПриИзмененииНаСервере(СтруктураДанных)
	
	ТекущиеДанные = ОстаткиПоСчетам.НайтиПоИдентификатору(Элементы.ОстаткиПоСчетам.ТекущаяСтрока);
	СуммаЗаявки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтруктураДанных.Заявка, "СуммаДокумента");
	СуммаНаЗаявку = СуммаЗаявки * ТекущиеДанные.ПроцентОтнесения / 100;
	ТекущиеДанные.ВЗаявке = СуммаНаЗаявку;
	
	СуммаДоОбработки = СуммаНаЗаявку;
	
	ОбновитьЗаявкуПриИзменении(СтруктураДанных);
	
	Возврат СуммаДоОбработки;
	
КонецФункции

&НаСервере
Процедура УстановитьФильтрНаСервере(СтруктураДанных)
	
	Элементы.РезультатыРаспределенияТолькоПодходящиеПоСтатье.Пометка = Ложь;
	Элементы.РезультатыРаспределенияВсеСКоторыхМожноПлатить.Пометка = Ложь;
	Элементы.РезультатыРаспределенияВсеСчета.Пометка = Ложь;
	
	Если РежимФильтра = 0 Тогда
		Элементы.РезультатыРаспределенияВсеСчета.Пометка = Истина;
	ИначеЕсли РежимФильтра = 1 Тогда
		Элементы.РезультатыРаспределенияВсеСКоторыхМожноПлатить.Пометка = Истина;
	ИначеЕсли РежимФильтра = 2 Тогда
		Элементы.РезультатыРаспределенияТолькоПодходящиеПоСтатье.Пометка = Истина;
	КонецЕсли;
	
	Данные = ПолучитьИзВременногоХранилища(АдресДанныхВХранилище);
	ВывестиОбщиеДанные(Данные);
	ВывестиДанныеПоТекущейСтрокеЗаявки(Данные, СтруктураДанных);
	Если РежимФильтра Тогда
		УбратьЭлементыНепроходящиеФильтр();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьДанныеПланированияНаСервере(Массив)
	
	Данные = ПолучитьИзВременногоХранилища(АдресДанныхВХранилище);
	
	Для Каждого Заявка из Массив Цикл
		
		ЗаявкаОбъект = Заявка.ПолучитьОбъект();
		ЗаявкаОбъект.РазмещениеЗаявки.Очистить();
		ЗаявкаОбъект.Записать();
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Заявка", ЗаявкаОбъект.Ссылка);
		
		НайденныеСтроки = Данные.РаспределениеЗаявок.НайтиСтроки(СтруктураПоиска);
		Для Каждого НайденнаяСтрока из НайденныеСтроки Цикл
			Данные.РаспределениеЗаявок.Удалить(НайденнаяСтрока);
		КонецЦикла;
		
	КонецЦикла;
	
	ТекущаяЗаявка = Элементы.ЗаявкиКРаспределению.ТекущаяСтрока;
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ТекущаяЗаявка, "СтатьяКалькуляции, СуммаДокумента");
	СтруктураДанных = Новый Структура("Заявка, СтатьяКалькуляции, Сумма", 
				ТекущаяЗаявка, Реквизиты.СтатьяКалькуляции, Реквизиты.СуммаДокумента);

	Элементы.ЗаявкиКРаспределению.Обновить();
	ВывестиДанныеПоТекущейСтрокеЗаявки(Данные, СтруктураДанных);

	Для Каждого СтрокаОстатков из ОстаткиПоСчетам.ПолучитьЭлементы() Цикл
		УстановитьСуммыОстатковВСтроке(СтрокаОстатков, Данные);
	КонецЦикла;
	ПоместитьВоВременноеХранилище(Данные, АдресДанныхВХранилище);
	
КонецПроцедуры

&НаСервере
Процедура ПереместитьНаСервере(Направление)
	
	ЭлементыСчета = ОстаткиПоСчетам.ПолучитьЭлементы();
	ТекущаяСтрока = ОстаткиПоСчетам.НайтиПоИдентификатору(Элементы.ОстаткиПоСчетам.ТекущаяСтрока);
	Если ТекущаяСтрока.ПолучитьРодителя() <> Неопределено Тогда
		ТекущаяСтрока = ТекущаяСтрока.ПолучитьРодителя();
	КонецЕсли;
	
	Индекс = ЭлементыСчета.Индекс(ТекущаяСтрока);
	НовыйИндекс = Индекс + Направление;
	НовыйИндекс = Макс(НовыйИндекс, 0);
	НовыйИндекс = Мин(НовыйИндекс, ЭлементыСчета.Количество() - 1);
	Если НовыйИндекс <> Индекс Тогда
		ЭлементыСчета.Сдвинуть(Индекс, Направление);
	КонецЕсли;
	
	Пользователь = Пользователи.АвторизованныйПользователь();
	Набор = РегистрыСведений.ПорядокСледованияСчетовВУправленииФинансами.СоздатьНаборЗаписей();
	Набор.Отбор.Пользователь.Установить(Пользователь);
	Набор.Отбор.РежимФильтра.Установить(РежимФильтра);
	
	Для Каждого ЭлементСчет из ЭлементыСчета Цикл
		НоваяСтрока = Набор.Добавить();
		НоваяСтрока.Пользователь = Пользователь;
		НоваяСтрока.РежимФильтра = РежимФильтра;
		НоваяСтрока.БанковскийСчет = ЭлементСчет.Счет;
		НоваяСтрока.Индекс = ЭлементыСчета.Индекс(ЭлементСчет);
	КонецЦикла;
	
	Набор.Записать(Истина);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыФормыКалендаря(БанковскийСчет, Заявка, ПланироватьСДаты, ДнейПланирования)
	
	ЗначениеСсылки = Новый Структура("Заявка, БанковскийСчет", Заявка, БанковскийСчет);
	ЗначениеСсылки.Вставить("ПланироватьСДаты", ПланироватьСДаты);
	ЗначениеСсылки.Вставить("ДнейПланирования", ДнейПланирования);
	
	Возврат ЗначениеСсылки;
	
КонецФункции

&НаСервере
Функция МассивФорматированнаяСтрокаПлатежа(СтрокаОплаты)
	
	Массив = Новый Массив;
	
	Текст = НСтр("ru = '%1 со счета %2'");
	Текст = СтрШаблон(Текст, Формат(СтрокаОплаты.ДатаПлатежа, "ДФ=dd.MM.yy"), СтрокаОплаты.БанковскийСчетПредставление);
	Массив.Добавить(Текст);
	Массив.Добавить(СтрШаблон(НСтр("ru = ' на сумму %1'"), Формат(СтрокаОплаты.Распределено, "ЧДЦ=2")));
	
	Возврат Массив;
	
КонецФункции

&НаКлиенте
Функция СтруктураДанныхОбновленияСтрокиЗаявки()
	
	Если ЗначениеЗаполнено(РаспределяемаяЗаявка) Тогда
		Возврат СтруктураДанныхРаспределяемойЗаявки;
	КонецЕсли;

	ТекущиеДанные = Элементы.ЗаявкиКРаспределению.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		СтруктураДанных = Новый Структура("Заявка, СтатьяКалькуляции, Сумма", 
									Неопределено, Неопределено, Неопределено);
	Иначе
		СтруктураДанных = Новый Структура("Заявка, СтатьяКалькуляции, Сумма", 
						ТекущиеДанные.Заявка, ТекущиеДанные.СтатьяКалькуляции, ТекущиеДанные.Сумма);
	КонецЕсли;
	
	Возврат СтруктураДанных;
	
КонецФункции

&НаСервере
Процедура ЗаписатьДанныеПланированияВЗаявкуОбъект(Данные, ЗаявкаОбъект, Контракт, Счет, Сумма)
	
	РаспределениеЗаявок = Данные.РаспределениеЗаявок;
	
	НоваяСтрока = ЗаявкаОбъект.РазмещениеЗаявки.Добавить();
	НоваяСтрока.КонтрактСЗаказчиком = Контракт;
	НоваяСтрока.МестоРазмещения = Счет;
	НоваяСтрока.СуммаПлатежа = Сумма;
	НоваяСтрока.ДатаПлатежа = Казначейство275Сервер.ПодобратьДатуПлатежаПоСчету(Данные, Объект, Счет, Сумма);
	
	ЗаявкаОбъект.Записать();
	
	СтрокаРаспределения = РаспределениеЗаявок.Добавить();
	СтрокаРаспределения.Заявка 				= ЗаявкаОбъект.Ссылка;
	СтрокаРаспределения.БанковскийСчет 		= НоваяСтрока.МестоРазмещения;
	СтрокаРаспределения.БанковскийСчетПредставление = Строка(НоваяСтрока.МестоРазмещения);
	СтрокаРаспределения.Распределено 		= НоваяСтрока.СуммаПлатежа;
	СтрокаРаспределения.КонтрактСЗаказчиком = НоваяСтрока.КонтрактСЗаказчиком;
	СтрокаРаспределения.ДатаПлатежа 		= НоваяСтрока.ДатаПлатежа;
	
	//СтруктураПоиска = Новый Структура("КонтрактСЗаказчиком, БанковскийСчет", Контракт, Счет);
	//
	//СтрокаЛимитов = Данные.ОстаткиПоСтатьямЛимитов.НайтиСтроки(СтруктураПоиска);
	//Если СтрокаЛимитов.Количество() Тогда
	//	СтрокаЛимитов[0].СуммаФактВЗаявках = СтрокаЛимитов[0].СуммаФактВЗаявках + Сумма;
	//	СтрокаЛимитов[0].ДоступныйОстаток = СтрокаЛимитов[0].ДоступныйОстаток - Сумма;
	//КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ДоступноПоСтроке(ИД)
	
	Итоги = ОстаткиПоСчетам.НайтиПоИдентификатору(ИД);
	Если Итоги.ПолучитьРодителя() <> Неопределено Тогда
		Итоги = Итоги.ПолучитьРодителя();
	КонецЕсли;
	
	Доступно = Итоги.ОстатокНаСчете + Итоги.ДоступныеПоступления;
	
	Возврат Доступно;
	
КонецФункции

&НаСервере
Процедура ОбновитьЗаявкуПриИзменении(СтруктураДанных)
	
	ТекущиеДанные = ОстаткиПоСчетам.НайтиПоИдентификатору(Элементы.ОстаткиПоСчетам.ТекущаяСтрока);
	
	ЗаявкаОбъект = СтруктураДанных.Заявка.ПолучитьОбъект();
	Доступно = ДоступноПоСтроке(Элементы.ОстаткиПоСчетам.ТекущаяСтрока);
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("МестоРазмещения", ТекущиеДанные.Счет);
	Если ЗначениеЗаполнено(ТекущиеДанные.Контракт) Тогда
		СтруктураПоиска.Вставить("КонтрактСЗаказчиком", ТекущиеДанные.Контракт);
		СтруктураПоискаЛимитов = Новый Структура;
		СтруктураПоискаЛимитов.Вставить("СтатьяКалькуляции", ЗаявкаОбъект.СтатьяКалькуляции);
		СтруктураПоискаЛимитов.Вставить("КонтрактСЗаказчиком", ТекущиеДанные.Контракт);
	КонецЕсли;
	
	НайденныеСтроки = ЗаявкаОбъект.РазмещениеЗаявки.НайтиСтроки(СтруктураПоиска);
	ВосстанавливаемаяСумма = Казначейство275Сервер.ИтогПоСтрокам(НайденныеСтроки, "СуммаПлатежа");
	
	Нужно = Мин(Доступно + ВосстанавливаемаяСумма, 
		ЗаявкаОбъект.СуммаДокумента - ЗаявкаОбъект.РазмещениеЗаявки.Итог("СуммаПлатежа") + ВосстанавливаемаяСумма);
	Нужно = Макс(Нужно, 0);
	
	Если Нужно < ТекущиеДанные.ВЗаявке Тогда
		ТекущиеДанные.ВЗаявке = Нужно;
		ТекущиеДанные.ПроцентОтнесения = ?(ЗаявкаОбъект.СуммаДокумента, 100 * ТекущиеДанные.ВЗаявке / ЗаявкаОбъект.СуммаДокумента, 0);
	КонецЕсли;
	
	СтрокиУдаления = ЗаявкаОбъект.РазмещениеЗаявки.НайтиСтроки(СтруктураПоиска);
	Данные = ПолучитьИзВременногоХранилища(АдресДанныхВХранилище);
	//Если СтруктураПоискаЛимитов <> Неопределено Тогда
	//	УдаляемаяСумма = Казначейство275Сервер.ИтогПоСтрокам(СтрокиУдаления, "СуммаПлатежа");
	//	НайденныеСтроки = Данные.ОстаткиПоСтатьямЛимитов.НайтиСтроки(СтруктураПоискаЛимитов);
	//	Если НайденныеСтроки.Количество() Тогда
	//		НайденныеСтроки[0].СуммаФактВЗаявках = НайденныеСтроки[0].СуммаФактВЗаявках - УдаляемаяСумма;
	//		НайденныеСтроки[0].ДоступныйОстаток =  НайденныеСтроки[0].ДоступныйОстаток + УдаляемаяСумма;
	//	КонецЕсли;
	//КонецЕсли;
	
	СтруктураПоиска.Вставить("Заявка", ЗаявкаОбъект.Ссылка);
	
	Для Каждого СтрокаУдаления из СтрокиУдаления Цикл
		ЗаявкаОбъект.РазмещениеЗаявки.Удалить(СтрокаУдаления);
	КонецЦикла;
	СтруктураПоиска.Вставить("БанковскийСчет", СтруктураПоиска.МестоРазмещения);
	СтруктураПоиска.Удалить("МестоРазмещения");
	НайденныеСтроки = Данные.РаспределениеЗаявок.НайтиСтроки(СтруктураПоиска);
	Для Каждого НайденнаяСтрока из НайденныеСтроки Цикл
		Данные.РаспределениеЗаявок.Удалить(НайденнаяСтрока);
	КонецЦикла;
	
	Если ТекущиеДанные.ВЗаявке Тогда
		ЗаписатьДанныеПланированияВЗаявкуОбъект(Данные, ЗаявкаОбъект, 
						ТекущиеДанные.Контракт, ТекущиеДанные.Счет, ТекущиеДанные.ВЗаявке);
	Иначе
		ЗаявкаОбъект.Записать();
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Данные, АдресДанныхВХранилище);
	
	Элементы.ЗаявкиКРаспределению.Обновить();
	ВывестиДанныеПоТекущейСтрокеЗаявки(Данные, СтруктураДанных);
	Если ТекущиеДанные.ПолучитьРодителя() <> Неопределено Тогда
		СтрокаОстатков = ТекущиеДанные.ПолучитьРодителя();
	Иначе
		СтрокаОстатков = ТекущиеДанные;
	КонецЕсли;
	УстановитьСуммыОстатковВСтроке(СтрокаОстатков, Данные);
	
КонецПроцедуры

&НаСервере
Процедура УбратьЭлементыНепроходящиеФильтр()
	
	СчетаКУдалению = Новый Массив;
	ЭлементыСчета = ОстаткиПоСчетам.ПолучитьЭлементы();
	Для Каждого СтрокаСчета Из ЭлементыСчета Цикл
		Если РежимФильтра = 1 Тогда
			СтрокаПодходит = СтрокаСчета.ПодходящийСчет;
		ИначеЕсли РежимФильтра = 2 Тогда
			СтрокаПодходит = СтрокаСчета.ПодходящийСчет И СтрокаСчета.ПодходящийЛимит;
		КонецЕсли;
		Если Не СтрокаПодходит Тогда
			СчетаКУдалению.Добавить(СтрокаСчета);
			Продолжить;
		КонецЕсли;
		Если РежимФильтра = 2 Тогда
			КонтрактыКУдалению = Новый Массив;
			ЭлементыКонтракты = СтрокаСчета.ПолучитьЭлементы();
			Для Каждого СтрокаКонтракт из ЭлементыКонтракты Цикл
				Если Не СтрокаКонтракт.ПодходящийЛимит Тогда
					КонтрактыКУдалению.Добавить(СтрокаКонтракт);
				КонецЕсли;
			КонецЦикла;
			Для Каждого СтрокаКонтракта из КонтрактыКУдалению Цикл
				ЭлементыКонтракты.Удалить(СтрокаКонтракта);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаСчета из СчетаКУдалению Цикл
		ЭлементыСчета.Удалить(СтрокаСчета);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция УстановитьТекущуюСтрокуПослеОбновления()
	
	Если ЗначениеЗаполнено(РаспределяемаяЗаявка) Тогда
		Элементы.ЗаявкиКРаспределению.ТекущаяСтрока = РаспределяемаяЗаявка;
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция МассивЗаявокПоДаннымХранилища(АдресДанныхВХранилище)
	
	РаспределениеЗаявок = ПолучитьИзВременногоХранилища(АдресДанныхВХранилище).РаспределениеЗаявок;
	Заявки = РаспределениеЗаявок.ВыгрузитьКолонку("Заявка");
	Заявки = ОбщегоНазначенияКлиентСервер.СвернутьМассив(Заявки);
	
	Возврат Заявки;
	
КонецФункции

&НаКлиенте
Процедура ВыгрузитьПлатежныеПоручения(Команда)
	
	ОткрытьФорму("Обработка.КлиентБанк.Форма");
	
КонецПроцедуры

&НаСервере
Функция ПроверитьВозможностьФормированияПлатежныхПоручений()
	
	Возврат Неопределено;
	
КонецФункции

&НаКлиенте
Процедура СформироватьПлатежныеПоручения(Команда)
	
	ЕстьПроблемы = ПроверитьВозможностьФормированияПлатежныхПоручений();
	Если ЕстьПроблемы = Неопределено Тогда
		СформироватьПлатежныеПорученияЗавершение(Истина, Неопределено);
	Иначе
		Результат = 
		ОткрытьФормуМодально("Обработка.РаспределениеЗаявокПоСчетам.Форма.ФормаПереформированияПлатежныхПоручений",
			Новый Структура("АдресПроблем", ЕстьПроблемы), ЭтаФорма);
		СформироватьПлатежныеПорученияЗавершение(Результат, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьПлатежныеПорученияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		
		Заявки = МассивЗаявокПоДаннымХранилища(АдресДанныхВХранилище);

		Платежки = ИсточникиДанных275Сервер.НайтиПодчиненныеПП(Заявки);
		Если Платежки.Количество() > 0 Тогда
			Ответ = Вопрос("Существующие платежные поручения по заявкам будут удалены?", РежимДиалогаВопрос.ДаНетОтмена,
			60, КодВозвратаДиалога.Да, , КодВозвратаДиалога.Отмена);
			Если Ответ = КодВозвратаДиалога.Отмена Тогда
				Возврат;
			ИначеЕсли Ответ = КодВозвратаДиалога.Нет Тогда
				Платежки.Очистить();
			КонецЕсли;
		КонецЕсли;

		СформироватьПлатежныеПорученияНаСервере(Результат, Заявки, Платежки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	ОбновитьДанные(Ложь);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		ЗаявкиКРаспределению, "Организация", Организация, , , ЗначениеЗаполнено(Организация));
	Элементы.ЗаявкиКРаспределению.Обновить();
	
КонецПроцедуры

&НаСервере
Процедура СформироватьПлатежныеПорученияНаСервере(МассивПропускаемых = Неопределено, Заявки, Платежки)

	Всего = 0;
	Для Каждого Заявка из Заявки Цикл
		Если ТипЗнч(МассивПропускаемых) = Тип("Массив")
			И МассивПропускаемых.Найти(Заявка) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ПлатежкиПоЗаявке = Платежки.Получить(Заявка);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Обрабатывается "+Строка(Заявка));
		Создано = ИсточникиДанных275Сервер.СформироватьПП(Заявка, ПлатежкиПоЗаявке);
		Всего = Всего + Создано;
	КонецЦикла;
	
	//ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Сформировано " + Всего + " поручений");
	
	Элементы.ЗаявкиКРаспределению.Обновить();
	
КонецПроцедуры
