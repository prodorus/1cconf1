
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	СсылкаНаПараметры = "";
	Если Параметры.Свойство("СсылкаНаПараметры", СсылкаНаПараметры) Тогда
		СсылкаНаПараметры = ПолучитьИзВременногоХранилища(СсылкаНаПараметры);
		Поиск = СсылкаНаПараметры.Заявка;
		БанковскийСчет = СсылкаНаПараметры.БанковскийСчет;
		Объект.ПланироватьСДаты = СсылкаНаПараметры.ПланироватьСДаты;
		Объект.ДнейПланирования = СсылкаНаПараметры.ДнейПланирования;
	КонецЕсли;
	
	ОбновитьДанные();
	УправлениеФормой();
	
КонецПроцедуры

&НаСервере
Функция ПолучитьДанные()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ШапкаДокумента.Номер,
	|	ШапкаДокумента.Дата,
	|	ПРЕДСТАВЛЕНИЕ(ШапкаДокумента.Контрагент) КАК КонтрагентПредставление,
	|	СтрокиДокумента.СуммаПлатежа КАК Сумма,
	|	ВЫБОР
	|		КОГДА СтрокиДокумента.ДатаПлатежа < &ПланироватьСДаты
	|			ТОГДА &ПланироватьСДаты
	|		ИНАЧЕ СтрокиДокумента.ДатаПлатежа
	|	КОНЕЦ КАК ДатаПлатежа,
	|	ПРЕДСТАВЛЕНИЕ(СтрокиДокумента.КонтрактСЗаказчиком) КАК КонтрактСЗаказчикомПредставление,
	|	ШапкаДокумента.НазначениеПлатежа,
	|	ШапкаДокумента.Ссылка
	|ИЗ
	|	Документ.ЗаявкаНаРасходованиеСредств.РазмещениеЗаявки КАК СтрокиДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаРасходованиеСредств КАК ШапкаДокумента
	|		ПО СтрокиДокумента.Ссылка = ШапкаДокумента.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаявкиНаРасходованиеСредств.Остатки КАК Остатки
	|		ПО СтрокиДокумента.Ссылка = Остатки.ЗаявкаНаРасходование
	|ГДЕ
	|	ШапкаДокумента.Проведен
	|	И СтрокиДокумента.МестоРазмещения = &БанковскийСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДенежныеСредстваОстатки.СуммаОстаток
	|ИЗ
	|	РегистрНакопления.ДенежныеСредства.Остатки(&ПланироватьСДаты, БанковскийСчетКасса = &БанковскийСчет) КАК ДенежныеСредстваОстатки";
	
	Запрос.УстановитьПараметр("БанковскийСчет", БанковскийСчет);
	Запрос.УстановитьПараметр("ПланироватьСДаты", Объект.ПланироватьСДаты);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	РаспределениеЗаявок = МассивРезультатов[0].Выгрузить();
	ОстатокНаСчете = МассивРезультатов[1].Выгрузить().Итог("СуммаОстаток");
	
	ПланируемыеДоходы = Обработки.РаспределениеЗаявокПоСчетам.ПланируемыеДоходы(Объект.ПланироватьСДаты, 
										Объект.ПланироватьСДаты + 86400 * (Объект.ДнейПланирования - 1), , БанковскийСчет);
	
	Возврат Новый Структура("РаспределениеЗаявок, ОстатокНаСчете, ПланируемыеДоходы", 
							РаспределениеЗаявок, ОстатокНаСчете, ПланируемыеДоходы);
	
КонецФункции

&НаСервере
Процедура УстановитьОтборПоПоиску()
	
	ТаблицаКалендарьДС = РеквизитФормыВЗначение("КалендарьДС");
	ДобавленоКолонок = (ТаблицаКалендарьДС.Колонки.Количество() - 6) / 2;
	
	КУдалению = Новый Массив;
	Для Каждого ЭлементУО из УсловноеОформление.Элементы Цикл
		Если ЭлементУО.Представление = "Поиск заявки" Тогда
			КУдалению.Добавить(ЭлементУО);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ЭлементКУдалению из КУдалению Цикл
		УсловноеОформление.Элементы.Удалить(ЭлементКУдалению);
	КонецЦикла;
	
	Если ЗначениеЗаполнено(Поиск) Тогда
		Для Сч = 1 По ДобавленоКолонок Цикл
			НовыйЭлементОформления = УсловноеОформление.Элементы.Добавить();
			НовыйЭлементОформления.Оформление.УстановитьЗначениеПараметра("Шрифт", WindowsШрифты.ШрифтДиалоговИМеню);
			Отбор = НовыйЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("КалендарьДС.Колонка_" + Сч);
			Отбор.ПравоеЗначение = Поиск;
			Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			Отбор.Использование = Истина;
			Поля = НовыйЭлементОформления.Поля.Элементы.Добавить();
			Поля.Поле = Новый ПолеКомпоновкиДанных("КолонкаПредставление_" + Сч);
			НовыйЭлементОформления.Использование = Истина;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьДанныеКалендаря(ДанныеКалендаря)
	
	УдаляемыеРеквизиты = Новый Массив;
	МассивПредопределенных = Новый Массив;
	МассивПредопределенных.Добавить("Дата");
	МассивПредопределенных.Добавить("Остаток");
	МассивПредопределенных.Добавить("Поступление");
	МассивПредопределенных.Добавить("Списание");
	МассивПредопределенных.Добавить("ЕстьКомментарий");
	МассивПредопределенных.Добавить("ГруппаПоступление");
	МассивПредопределенных.Добавить("Комментарии");
	
	Для Каждого Реквизит из ПолучитьРеквизиты("КалендарьДС") Цикл 
		Если МассивПредопределенных.Найти(Реквизит.Имя) = Неопределено Тогда
			УдаляемыеРеквизиты.Добавить(Реквизит.Путь + "." + Реквизит.Имя);
			Если Найти(Реквизит.Имя, "Представление") Тогда
				Элементы.Удалить(Элементы[Реквизит.Имя]);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ИзменитьРеквизиты(,УдаляемыеРеквизиты);
	
	ТекущийОстаток = ДанныеКалендаря.ОстатокНаСчете;
	РаспределениеЗаявок = ДанныеКалендаря.РаспределениеЗаявок;
	ПланируемыеДоходы = ДанныеКалендаря.ПланируемыеДоходы;
	
	КалендарьДС.Очистить();
	
	ТаблицаКалендарьДС = РеквизитФормыВЗначение("КалендарьДС");
	
	Рабочая_Дата = Объект.ПланироватьСДаты;
	ДатаОкончания = Объект.ПланироватьСДаты + 86400 * Объект.ДнейПланирования;
	Пока Рабочая_Дата < ДатаОкончания Цикл
		
		НоваяСтрока = ТаблицаКалендарьДС.Добавить();
		НоваяСтрока.Дата = Рабочая_Дата;
		НоваяСтрока.Остаток = ТекущийОстаток;
		
		СтрокиДохода = ПланируемыеДоходы.НайтиСтроки(Новый Структура("Дата", Рабочая_Дата));
		СтрокиРасхода = РаспределениеЗаявок.НайтиСтроки(Новый Структура("ДатаПлатежа", Рабочая_Дата));
		
		Доход = 0;
		
		МассивКомментариев = Новый Массив;
		Для Каждого СтрокаДохода из СтрокиДохода Цикл
			Доход = Доход + СтрокаДохода.ДоходПлан;
			НоваяСтрока.ЕстьКомментарий = НоваяСтрока.ЕстьКомментарий ИЛИ ЗначениеЗаполнено(СтрокаДохода.Комментарий);
			Если ЗначениеЗаполнено(СтрокаДохода.Комментарий) Тогда
				МассивКомментариев.Добавить(СтрокаДохода.Комментарий);
				МассивКомментариев.Добавить(" (");
				МассивКомментариев.Добавить(СтрокаДохода.КонтрактСЗаказчикомПредставление);
				МассивКомментариев.Добавить(")");
				МассивКомментариев.Добавить(Символы.ПС);
			КонецЕсли;
		КонецЦикла;
		
		НоваяСтрока.Комментарии = СтроковыеФункцииКлиентСервер.ПолучитьСтрокуИзМассиваПодстрок(МассивКомментариев, "");
		
		НоваяСтрока.Поступление = Доход;
		Расход = Казначейство275Сервер.ИтогПоСтрокам(СтрокиРасхода, "Сумма");
		
		НоваяСтрока.Списание = Расход;
		
		ТекущийОстаток = ТекущийОстаток + Доход - Расход;
		
		Уровень = 1;
		Для Каждого СтрокаРасхода из СтрокиРасхода Цикл
			Если 2 * Уровень > ТаблицаКалендарьДС.Колонки.Количество() - 6 Тогда
				ТаблицаКалендарьДС.Колонки.Добавить("КолонкаПредставление_" + Уровень);
				ТаблицаКалендарьДС.Колонки.Добавить("Колонка_" + Уровень);
			КонецЕсли;
			НоваяСтрока["КолонкаПредставление_" + Уровень] = Строка(СтрокаРасхода.Сумма) + " №" + 
				СтрокаРасхода.Номер + " от " + СтрокаРасхода.Дата + Символы.ПС + СтрокаРасхода.КонтрагентПредставление + " " + 
				СтрокаРасхода.КонтрактСЗаказчикомПредставление + Символы.ПС + СтрокаРасхода.НазначениеПлатежа;
			НоваяСтрока["Колонка_" + Уровень] = СтрокаРасхода.Ссылка;
			Уровень = Уровень + 1;
		КонецЦикла;
		
		Рабочая_Дата = Рабочая_Дата + 86400;
		
	КонецЦикла;
	
	ДобавленоКолонок = (ТаблицаКалендарьДС.Колонки.Количество() - 6) / 2;
	
	ДобавляемыеРеквизиты = Новый Массив;
	Для Сч = 1 по ДобавленоКолонок Цикл
		
		РеквизитФормы = Новый РеквизитФормы("КолонкаПредставление_" + Сч, Новый ОписаниеТипов("Строка"), "КалендарьДС", "");
		ДобавляемыеРеквизиты.Добавить(РеквизитФормы);
		РеквизитФормы = Новый РеквизитФормы("Колонка_" + Сч, 
								Новый ОписаниеТипов("ДокументСсылка.ЗаявкаНаРасходованиеСредств"), "КалендарьДС", "");
		ДобавляемыеРеквизиты.Добавить(РеквизитФормы);
		
	КонецЦикла;
	
	ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
	ЗначениеВРеквизитФормы(ТаблицаКалендарьДС, "КалендарьДС");
	
	Для Сч = 1 по ДобавленоКолонок Цикл
		
		НоваяКолонка = Элементы.Добавить("КолонкаПредставление_" + Сч, 
						Тип("ПолеФормы"), Элементы.КалендарьДС);
		НоваяКолонка.Вид = ВидПоляФормы.ПолеВвода;
		НоваяКолонка.ПутьКДанным = "КалендарьДС.КолонкаПредставление_" + Сч;
		НоваяКолонка.Ширина = 15;
		НоваяКолонка.ТолькоПросмотр = Истина;
		НоваяКолонка.АвтоВысотаЯчейки = Истина;
		НоваяКолонка.Высота = 4;
		НоваяКолонка.Заголовок = " ";
		
	КонецЦикла;
	
	Элементы.Поступление.ТекстПодвала = Формат(КалендарьДС.Итог("Поступление"), "ЧДЦ=2");
	Элементы.Списание.ТекстПодвала = Формат(КалендарьДС.Итог("Списание"), "ЧДЦ=2");
	
	УстановитьОтборПоПоиску();
	ПоискНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанные()
	
	ДанныеКалендаря = ПолучитьДанные();
	ОтобразитьДанныеКалендаря(ДанныеКалендаря);
	
КонецПроцедуры

&НаКлиенте
Функция ТекущаяЗаявка()
	
	ИмяКолонки = Элементы.КалендарьДС.ТекущийЭлемент.Имя;
	Если Найти(ИмяКолонки, "КолонкаПредставление_") Тогда
		Возврат Элементы.КалендарьДС.ТекущиеДанные[СтрЗаменить(ИмяКолонки, "Представление", "")]
	КонецЕсли;
	
	Возврат Неопределено;

КонецФункции

&НаКлиенте
Процедура КалендарьДСВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Элементы.КалендарьДС.ТекущийЭлемент.Имя = "Поступление" Тогда
		ПараметрыКомментариев = Новый Структура("Комментарии", Элементы.КалендарьДС.ТекущиеДанные.Комментарии);
		Если ЗначениеЗаполнено(ПараметрыКомментариев.Комментарии) Тогда
			ОткрытьФормуМодально("Обработка.РаспределениеЗаявокПоСчетам.Форма.ПросмотрКомментариевКПоступлениям", ПараметрыКомментариев);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Заявка = ТекущаяЗаявка();
	Если Заявка <> Неопределено Тогда
		СтандартнаяОбработка = Ложь;
		ОткрытьЗначение(Заявка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КалендарьДСПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	Если ЗначениеЗаполнено(ПеретаскиваемаяЗаявка) Тогда
		СтандартнаяОбработка = Ложь;
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Перемещение;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КалендарьДСНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	Заявка = ТекущаяЗаявка();
	Если Заявка <> Неопределено Тогда
		ПеретаскиваемаяЗаявка = Заявка;
		ДатаНачалаПератскивания = Элементы.КалендарьДС.ТекущиеДанные.Дата;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗначенияПолейНаСервере(ПеретаскиваемаяЗаявка, Строка)
	
	ЗаявкаОбъект = ПеретаскиваемаяЗаявка.ПолучитьОбъект();
	НайденныеСтроки = ЗаявкаОбъект.Финансирование.НайтиСтроки(Новый Структура("БанковскийСчет, ДатаПлатежа", БанковскийСчет, ДатаНачалаПератскивания));
	Если ДатаНачалаПератскивания = Объект.ПланироватьСДаты Тогда
		Для Каждого СтрокаФинансирование из ЗаявкаОбъект.Финансирование Цикл
			Если СтрокаФинансирование.ДатаПлатежа < Объект.ПланироватьСДаты Тогда
				НайденныеСтроки.Добавить(СтрокаФинансирование);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	НоваяДатаПлатежа = КалендарьДС.НайтиПоИдентификатору(Строка).Дата;
	Для Каждого НайденнаяСтрока из НайденныеСтроки Цикл
		НайденнаяСтрока.ДатаПлатежа = НоваяДатаПлатежа;
	КонецЦикла;
	ЗаявкаОбъект.Записать();
	
	НужноОбновлять = Истина;
	
	ОбновитьДанные();
	
	ТаблицаКалендарьДС = РеквизитФормыВЗначение("КалендарьДС");
	НайденнаяСтрока = ТаблицаКалендарьДС.Найти(ЗаявкаОбъект.Ссылка);
	Если НайденнаяСтрока <> Неопределено Тогда
		Элементы.КалендарьДС.ТекущаяСтрока = КалендарьДС[ТаблицаКалендарьДС.Индекс(НайденнаяСтрока)].ПолучитьИдентификатор();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КалендарьДСПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	Если ЗначениеЗаполнено(ПеретаскиваемаяЗаявка)
		И Элементы.КалендарьДС.ТекущиеДанные <> Неопределено Тогда
		УстановитьЗначенияПолейНаСервере(ПеретаскиваемаяЗаявка, Строка);
	КонецЕсли;
	ПеретаскиваемаяЗаявка = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если НужноОбновлять Тогда
		Оповестить("ЗаписанаЗаявкаНаРасходованиеДенежныхСредств");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	
	ОбновитьДанные();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПриИзменении(Элемент)
	
	ПоискПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПоискПриИзмененииНаСервере()
	
	УправлениеФормой();
	УстановитьОтборПоПоиску();
	ПоискНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПоискНаСервере(Направление = 1)
	
	Если Не КалендарьДС.Количество() Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока = Элементы.КалендарьДС.ТекущаяСтрока;
	Если ТекущаяСтрока = Неопределено Тогда
		ТекущаяСтрока = КалендарьДС[0];
	Иначе
		ТекущаяСтрока = КалендарьДС.НайтиПоИдентификатору(ТекущаяСтрока);
	КонецЕсли;
	Индекс = КалендарьДС.Индекс(ТекущаяСтрока);
	
	ДобавленоКолонок = (КалендарьДС.Выгрузить(Новый Массив).Колонки.Количество() - 6) / 2;
	
	СледующаяСтрока = Неопределено;
	
	ЗаявкаНайдена = Ложь;
	
	Пока СледующаяСтрока <> ТекущаяСтрока Цикл
		
		Индекс = Индекс + Направление;
		Если Индекс >= КалендарьДС.Количество() Тогда
			Индекс = 0;
		ИначеЕсли Индекс < 0 Тогда
			Индекс = КалендарьДС.Количество() - 1;
		КонецЕсли;
		
		СледующаяСтрока = КалендарьДС[Индекс];
		Для Сч = 1 по ДобавленоКолонок Цикл
			Если СледующаяСтрока["Колонка_" + Сч] = Поиск Тогда
				ЗаявкаНайдена = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ЗаявкаНайдена Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не ЗаявкаНайдена Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.КалендарьДС.ТекущаяСтрока = КалендарьДС[Индекс].ПолучитьИдентификатор();
	Элементы.КалендарьДС.ТекущийЭлемент = Элементы["КолонкаПредставление_" + Сч];
	
КонецПроцедуры

&НаКлиенте
Процедура Следующий(Команда)
	
	ПоискНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура Предыдущий(Команда)
	
	ПоискНаСервере(-1);
	
КонецПроцедуры

&НаКлиенте
Процедура ПланироватьСДатыПриИзменении(Элемент)
	
	ОбновитьДанные();
	
КонецПроцедуры

&НаКлиенте
Процедура ДнейПланированияПриИзменении(Элемент)
	
	ОтключитьОбработчикОжидания("ПриИзмененииКоличестваДнейПланирования");
	ПодключитьОбработчикОжидания("ПриИзмененииКоличестваДнейПланирования", 0.3, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииКоличестваДнейПланирования()
	
	ОбновитьДанные();
	
КонецПроцедуры

&НаСервере
Процедура УправлениеФормой()
	
	ДоступныКнопкиПоиска = ЗначениеЗаполнено(Поиск);
	Элементы.Следующий.Доступность = ДоступныКнопкиПоиска;
	Элементы.Предыдущий.Доступность = ДоступныКнопкиПоиска;
	
КонецПроцедуры
