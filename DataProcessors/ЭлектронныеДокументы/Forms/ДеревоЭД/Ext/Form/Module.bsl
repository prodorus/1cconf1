////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

&НаСервере
Процедура ЗаполнитьСписокИдентификаторовСтрокДерева()
	
	СписокИдентификаторов.Очистить();
	Для Каждого ЭлементДерева Из ДеревоПодчиненныеЭД.ПолучитьЭлементы() Цикл
		Если ЭлементДерева.АктуальныйЭД И НЕ ЭлементДерева.СтатусЭД = Перечисления.СтатусыЭД.Отклонен Тогда
			СписокИдентификаторов.Добавить(ЭлементДерева.ПолучитьИдентификатор());
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьСтроки()
	
	Если СписокИдентификаторов.Количество()=0 Тогда
		ЗаполнитьСписокИдентификаторовСтрокДерева();
	КонецЕсли;
	
	Для Каждого Строка Из СписокИдентификаторов Цикл
		Элементы.ДеревоПодчиненныеЭД.ТекущаяСтрока = Строка.Значение;
		Элементы.ДеревоПодчиненныеЭД.Развернуть(Элементы.ДеревоПодчиненныеЭД.ТекущаяСтрока, Истина);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДеревоЭД()

	УстановитьПривилегированныйРежим(Истина);
	
	НастройкиОбмена = ЭлектронныеДокументыСлужебный.ОпределитьНастройкиОбменаЭДПоИсточнику(ОбъектСсылка, Ложь);
	СформироватьДеревьяЭД();

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИндексИД(ДеревоЭД, Ссылка)
	
	Для Каждого ЭлементДерева Из ДеревоЭД.ПолучитьЭлементы() Цикл
		
		Если ЭлементДерева.Ссылка = Ссылка Тогда
			ИндексИД = ЭлементДерева.ПолучитьИдентификатор();
		КонецЕсли;
		
		Если ЭлементДерева.ПолучитьЭлементы().Количество() > 0 Тогда
			 ЗаполнитьИндексИД(ЭлементДерева, Ссылка);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Проверяет является ли переданный тип ЭД типом извещения о получении
//
// Параметры:
//  ТипЭлементаВерсииЭД	 - ПеречислениеСсылка.ТипыЭлементовВерсииЭД - тип ЭД для проверки.
// 
// Возвращаемое значение:
//  Булево - результат проверки
//
Функция ЭтоИзвещениеОПолучении(ТипЭлементаВерсииЭД) Экспорт 
	
	Возврат ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИОП
			ИЛИ ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИППДОИПЭСФ
			ИЛИ ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИППДОЭСФ
			ИЛИ ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИППДПЭСФ
			ИЛИ ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИПУУЭСФ
			ИЛИ ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИПЭСФ
			ИЛИ ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИППДОИПУПДУКД;
	
КонецФункции

// Проверяет является ли переданный тип ЭД типом подтверждения получения.
//
// Параметры:
//  ТипЭлементаВерсииЭД	 - ПеречислениеСсылка.ТипыЭлементовВерсииЭД - тип ЭД для проверки.
// 
// Возвращаемое значение:
//  Булево - результат проверки
//
Функция ЭтоПодтверждение(ТипЭлементаВерсииЭД) Экспорт 
	
	Возврат ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДО
			ИЛИ ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДОИПЭСФ
			ИЛИ ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДОЭСФ
			ИЛИ ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДП
			ИЛИ ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДПЭСФ
			ИЛИ ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДОИПУПДУКД;
			
КонецФункции

// Проверяет является ли переданный тип ЭД типом уведомления об уточнении.
//
// Параметры:
//  ТипЭлементаВерсииЭД	 - ПеречислениеСсылка.ТипыЭлементовВерсииЭД - тип ЭД для проверки.
// 
// Возвращаемое значение:
//  Булево - результат проверки
//
Функция ЭтоУведомлениеОбУточнении(ТипЭлементаВерсииЭД) Экспорт 
	
	Возврат ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.УОУ
			ИЛИ ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.УУЭСФ;
			
КонецФункции

// Определение представления электронного документа.
//
// Параметры:
//  ВидЭД - Перечисление.ВидЭД - вид электронного документа.
//  СтруктураПараметров - Структура - НомерВладельца, ДатаВладельца, ВерсияЭД.
//
// Возвращаемое значение:
//  Строка - текстовое представление электронного документа.
//
Функция ОпределитьПредставлениеЭД(ВидЭД, СтруктураПараметров) Экспорт
	
	ТекстВидЭД  = "";
	ТекстНомера = "";
	ТекстДаты   = "";
	ТекстВерсии = "";
	ЗначениеСвойства = Неопределено;
	
	Если СтруктураПараметров.Свойство("НомерВладельца", ЗначениеСвойства) И ЗначениеЗаполнено(ЗначениеСвойства) Тогда
		ТекстНомера = " № " + ЗначениеСвойства;
		
	КонецЕсли;
	Если СтруктураПараметров.Свойство("ДатаВладельца", ЗначениеСвойства) И ЗначениеЗаполнено(ЗначениеСвойства) Тогда
		ТекстДаты = " от " + Формат(ЗначениеСвойства, "ДЛФ=D");
	КонецЕсли;
	
	Если ВидЭД <> Перечисления.ВидыЭД.СчетФактура И ВидЭД <> Перечисления.ВидыЭД.ИзвещениеОПолучении
		И ВидЭД <> Перечисления.ВидыЭД.Подтверждение И ВидЭД <> Перечисления.ВидыЭД.УведомлениеОбУточнении
		И СтруктураПараметров.Свойство("ВерсияЭД", ЗначениеСвойства) И ЗначениеЗаполнено(ЗначениеСвойства) Тогда
		
		ШаблонТекстаВерсии = НСтр("ru = '(версия %1)'");
		ТекстВерсии = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонТекстаВерсии, ЗначениеСвойства);
		
	КонецЕсли;
	
	ТипЭД = "";
	Если СтруктураПараметров.Свойство("ТипЭД", ТипЭД)
		И ТипЭД <> Перечисления.ТипыЭлементовВерсииЭД.СЧФДОПУПД
		И ТипЭД <> Перечисления.ТипыЭлементовВерсииЭД.СЧФУПД
		И ТипЭД <> Перечисления.ТипыЭлементовВерсииЭД.ДОПУПД
		И ТипЭД <> Перечисления.ТипыЭлементовВерсииЭД.КСЧФДИСУКД
		И ТипЭД <> Перечисления.ТипыЭлементовВерсииЭД.КСЧФУКД
		И ТипЭД <> Перечисления.ТипыЭлементовВерсииЭД.ДИСУКД
		И ТипЭД <> Перечисления.ТипыЭлементовВерсииЭД.ПервичныйЭД
		И ТипЭД <> Перечисления.ТипыЭлементовВерсииЭД.ДОП
		И ТипЭД <> Перечисления.ТипыЭлементовВерсииЭД.ЭСФ Тогда
		
		Если ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.ИнформацияПокупателяУПД
			ИЛИ ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.ИнформацияПокупателяУКД Тогда
			ТекстВидЭД = НСтр("ru = 'Информация покупателя'");
		ИначеЕсли ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.ТОРГ12Покупатель Тогда
			ТекстВидЭД = Строка(ТипЭД);
		ИначеЕсли ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.СоглашениеОбИзмененииСтоимостиПолучатель Тогда
			ТекстВидЭД = Строка(ТипЭД);
		ИначеЕсли ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.АктЗаказчик Тогда
			ТекстВидЭД = Строка(ТипЭД);
		ИначеЕсли ЭтоИзвещениеОПолучении(ТипЭД) Тогда
			ТекстВидЭД = НСтр("ru = 'Извещение о получении'");
		ИначеЕсли ЭтоПодтверждение(ТипЭД) Тогда
			ТекстВидЭД = НСтр("ru = 'Подтверждение'");
			
			Если ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДПЭСФ
				ИЛИ ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДП Тогда
				ТекстВидЭД = ТекстВидЭД + " " + НСтр("ru = 'даты получения'");
			Иначе
				ТекстВидЭД = ТекстВидЭД + " " + НСтр("ru = 'даты отправки'");
			КонецЕсли;
			
		ИначеЕсли ЭтоУведомлениеОбУточнении(ТипЭД) Тогда
			ТекстВидЭД = НСтр("ru = 'Уведомление об уточнении'");
		ИначеЕсли ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.ПОА Тогда
			ТекстВидЭД = НСтр("ru = 'Предложение об аннулировании'");
		КонецЕсли;
	Иначе
		
		Если ВидЭД = Перечисления.ВидыЭД.СчетФактура Тогда
			ТекстВидЭД = НСтр("ru = 'Счет-фактура'");
			Если ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.СЧФДОПУПД Тогда
				ТекстВидЭД = НСтр("ru = 'Информация продавца'");
			КонецЕсли;
		ИначеЕсли ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура Тогда
			ТекстВидЭД = НСтр("ru = 'Корректировочный счет-фактура'");
			Если ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.КСЧФДИСУКД Тогда
				ТекстВидЭД = НСтр("ru = 'Информация продавца'");
			КонецЕсли;
			
		ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ТОРГ12 Тогда
			ТекстВидЭД = НСтр("ru = 'Товарная накладная (ТОРГ-12)'");
		ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец Тогда
			ТекстВидЭД = Строка(ВидЭД);
			Если ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.ДОПУПД Тогда
				ТекстВидЭД = НСтр("ru = 'Информация продавца'");
			КонецЕсли;
		ИначеЕсли ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель Тогда
			ТекстВидЭД = Строка(ВидЭД);
			Если ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.ДИСУКД Тогда
				ТекстВидЭД = НСтр("ru = 'Информация продавца'");
			КонецЕсли;
		ИначеЕсли ВидЭД = Перечисления.ВидыЭД.АктВыполненныхРабот Тогда
			ТекстВидЭД = НСтр("ru = 'Акт'");
		ИначеЕсли ВидЭД = Перечисления.ВидыЭД.АктНаПередачуПрав Тогда
			ТекстВидЭД = НСтр("ru = 'Акт на передачу прав'");
			Если ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.ДОПУПД Тогда
				ТекстВидЭД = НСтр("ru = 'Информация продавца'");
			КонецЕсли;
		ИначеЕсли ВидЭД = Перечисления.ВидыЭД.АктИсполнитель ИЛИ ВидЭД = Перечисления.ВидыЭД.АктЗаказчик Тогда
			ТекстВидЭД = Строка(ВидЭД);
			Если ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.ДОПУПД Тогда
				ТекстВидЭД = НСтр("ru = 'Информация продавца'");
			КонецЕсли;
		ИначеЕсли ВидЭД = Перечисления.ВидыЭД.СчетНаОплату Тогда
			ТекстВидЭД = НСтр("ru = 'Счет'");
		ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ЗаказТовара Тогда
			ТекстВидЭД = НСтр("ru = 'Заказ товара'");
		ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ОтветНаЗаказ Тогда
			ТекстВидЭД = НСтр("ru = 'Ответ на заказ'");
		ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ПрайсЛист Тогда
			ТекстВидЭД = НСтр("ru = 'Прайс-лист'");
		ИначеЕсли ВидЭД = Перечисления.ВидыЭД.КаталогТоваров Тогда
			ТекстВидЭД = НСтр("ru = 'Каталог товаров'");
		ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ОтчетОПродажахКомиссионногоТовара Тогда
			ТекстВидЭД = НСтр("ru = 'Отчет о продажах комиссионного товара'");
		ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ОтчетОСписанииКомиссионногоТовара Тогда
			ТекстВидЭД = НСтр("ru = 'Отчет о списании комиссионного товара'");
		ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ПередачаТоваровМеждуОрганизациями Тогда
			ТекстВидЭД = НСтр("ru = 'Передача товаров'");
		ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ВозвратТоваровМеждуОрганизациями Тогда
			ТекстВидЭД = НСтр("ru = 'Возврат товаров'");
		ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ПроизвольныйЭД Тогда
			ТекстВидЭД = НСтр("ru = 'Произвольный документ'");
		КонецЕсли;
	КонецЕсли;
	
	ПредставлениеЭД = ТекстВидЭД + ТекстНомера + ТекстДаты + ТекстВерсии;
	
	Возврат ПредставлениеЭД;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДанныеВПустыхСтроках(ДеревоОбъект)
	
	СтруктураПараметров = Новый Структура;
	Для Каждого Строка Из ДеревоОбъект.Строки Цикл
		Если НЕ ЗначениеЗаполнено(Строка.Ссылка) Тогда
			СтруктураПараметров.Вставить("ТипЭД", Строка.ТипЭД);
			Строка.Представление = ЭлектронныеДокументыСлужебный.ОпределитьПредставлениеЭД(Строка.ВидЭД, СтруктураПараметров);
			Строка.СтатусЭД = Перечисления.СтатусыЭД[?(Строка.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий, "НеСформирован", "НеПолучен")];
		КонецЕсли;
		Если Строка.Строки.Количество() > 0 Тогда
			ЗаполнитьДанныеВПустыхСтроках(Строка);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьДеревьяЭД()

	ДеревоПодчиненныеЭД.ПолучитьЭлементы().Очистить();
	
	ЭтоПроизвольныйЭД = Ложь; 
	
	Если ТипЗнч(ОбъектСсылка) = Тип("ДокументСсылка.ЭлектронныйДокументВходящий")
		ИЛИ ТипЗнч(ОбъектСсылка) = Тип("ДокументСсылка.ЭлектронныйДокументИсходящий") Тогда
		
		
		ЭтоПроизвольныйЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектСсылка,"ВидЭД") = Перечисления.ВидыЭД.ПроизвольныйЭД;
		
		Если ЭтоПроизвольныйЭД Тогда
			СоответствиеВладельцевИЭД = Новый Соответствие;
			СоответствиеВладельцевИЭД.Вставить(ОбъектСсылка,ОбъектСсылка);
		Иначе
			МассивСсылокНаЭД = Новый Массив;
			МассивСсылокНаЭД.Добавить(ОбъектСсылка);
			СоответствиеВладельцевИЭД = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьСоответствиеВладельцевИЭД(,МассивСсылокНаЭД);
			Если НЕ ЗначениеЗаполнено(СоответствиеВладельцевИЭД) Тогда
				СоответствиеВладельцевИЭД.Вставить(ОбъектСсылка,ОбъектСсылка);
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		МассивСсылок = Новый Массив;
		МассивСсылок.Добавить(ОбъектСсылка);
		
		СоответствиеВладельцевИЭД = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьСоответствиеВладельцевИЭД(МассивСсылок);
		
		// В случае, если у владельца нет актуального электронного документа, соответствие будет пустое.
		// Добавим в него сам документ, чтобы получить все остальные электронные по нему.
		Если Не ЗначениеЗаполнено(СоответствиеВладельцевИЭД) Тогда
			СоответствиеВладельцевИЭД = Новый Соответствие;
			СоответствиеВладельцевИЭД.Вставить(ОбъектСсылка);
		КонецЕсли;
	КонецЕсли;
	
	ДеревоОбъект = РеквизитФормыВЗначение("ДеревоПодчиненныеЭД");
	
	ЭлектронныеДокументыСлужебный.СформироватьДеревьяЭД(ДеревоОбъект, СоответствиеВладельцевИЭД, НастройкиОбмена, Не ЭтоПроизвольныйЭД);
	
	ЗначениеВРеквизитФормы(ДеревоОбъект, "ДеревоПодчиненныеЭД");
	
	ЗаполнитьСписокИдентификаторовСтрокДерева();
	ЗаполнитьИндексИД(ДеревоПодчиненныеЭД, ИсходныйДокумент);

КонецПроцедуры

&НаСервере
Процедура ОбработатьДерево(ДеревоОбъект)
	
	Для Каждого Строка Из ДеревоОбъект.Строки Цикл
		
		Если НЕ ЗначениеЗаполнено(Строка.Ссылка) Тогда
			
			Если (НЕ ЗначениеЗаполнено(Строка.Родитель) ИЛИ ЗначениеЗаполнено(Строка.Родитель.Ссылка))
				И Строка.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий
				И Строка.ВидЭД <> Перечисления.ВидыЭД.ТОРГ12Покупатель
				И Строка.ВидЭД <> Перечисления.ВидыЭД.АктЗаказчик
				И Строка.ВидЭД <> Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель
				И Строка.ТипЭД <> Перечисления.ТипыЭлементовВерсииЭД.ИнформацияПокупателяУПД
				И Строка.ТипЭД <> Перечисления.ТипыЭлементовВерсииЭД.ИнформацияПокупателяУКД Тогда
				
				Строка.ОжидаемоеДействие = Перечисления.ОжидаемоеДействиеЭД.Сформировать;
				
				Если ЗначениеЗаполнено(Строка.Родитель) Тогда
					Если ЗначениеЗаполнено(Строка.Родитель.Ссылка) Тогда
						
						Если ЭлектронныеДокументыСлужебныйВызовСервера.ДОЗакрытПринудительно(Строка.Родитель.Ссылка.ВладелецФайла) Тогда
							Строка.ОжидаемоеДействие = Перечисления.ОжидаемоеДействиеЭД.ПустаяСсылка();
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
		Иначе
			Если НЕ ОбщегоНазначения.ПолучитьЗначениеРеквизита(Строка.Ссылка, "ПометкаУдаления") Тогда
				Строка.ОжидаемоеДействие = ПолучитьОжидаемоеДействиеПоТекущемуСтатусу(Строка);
			КонецЕсли;
		КонецЕсли;
		
		Строка.ОжидаемоеДействиеКонтрагента = ПолучитьОжидаемоеДействиеКонтрагента(Строка);
		Строка.СтрокаДоступна = ?(ЗначениеЗаполнено(Строка.ОжидаемоеДействие), Истина, Ложь);
		Строка.Представление = СтрЗаменить(Строка.Представление, "_", " ");
		
		Если Строка.Строки.Количество() > 0 Тогда
			ОбработатьДерево(Строка);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьОжидаемоеДействиеПоТекущемуСтатусу(Строка)
	
	ВозвращаемоеЗначение = Перечисления.ОжидаемоеДействиеЭД.ПустаяСсылка();
	
	СтатусЭД = ЭлектронныеДокументыСлужебный.ОпределитьСостояниеВерсииПоСтатусуЭД(Строка.Ссылка);
	Если СтатусЭД = Перечисления.СостоянияВерсийЭД.ОбменЗавершен
		Или СтатусЭД = Перечисления.СостоянияВерсийЭД.ОбменЗавершенСИсправлением
		Или СтатусЭД = Перечисления.СостоянияВерсийЭД.ОжидаетсяИзвещениеОПолучении  Тогда
		
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	СвойстваЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Строка.Ссылка, "ВладелецФайла, НаправлениеЭД");
	ДОЗакрыт = ЭлектронныеДокументыСлужебныйВызовСервера.ДОЗакрытПринудительно(СвойстваЭД.ВладелецФайла);

	Если ДОЗакрыт Тогда
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	ТекущийСтатусЭД = Строка.СтатусЭД;
	ЭтоСлужебныйЭД = (Строка.ВидЭД = Перечисления.ВидыЭД.ИзвещениеОПолучении
		ИЛИ Строка.ВидЭД = Перечисления.ВидыЭД.Подтверждение
		ИЛИ Строка.ВидЭД = Перечисления.ВидыЭД.УведомлениеОбУточнении);
	
	Если ТекущийСтатусЭД = Перечисления.СтатусыЭД.ОшибкаПередачи Тогда
		
	ИначеЕсли ТекущийСтатусЭД = Перечисления.СтатусыЭД.Отклонен
		ИЛИ ТекущийСтатусЭД = Перечисления.СтатусыЭД.ОтклоненПолучателем Тогда
		
	ИначеЕсли ТекущийСтатусЭД = Перечисления.СтатусыЭД.Утвержден
		И ЭлектронныеДокументыСлужебный.ЭтоТитулФНС(Строка.Ссылка)
		И СвойстваЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
		
		Возврат ВозвращаемоеЗначение;
		
	ИначеЕсли Строка.ВидЭД = Перечисления.ВидыЭД.ПредложениеОбАннулировании
		И ТекущийСтатусЭД = Перечисления.СтатусыЭД.Получен Тогда
		
		Владелец = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Строка.Ссылка, "ЭлектронныйДокументВладелец");
		СтатусВладельца = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Владелец, "СтатусЭД");
		Если СтатусВладельца = Перечисления.СтатусыЭД.ПолученоПредложениеОбАннулировании Тогда
			ВозвращаемоеЗначение = Перечисления.ОжидаемоеДействиеЭД.Принять;
		КонецЕсли;
		
	Иначе
		НастройкиОбменаДляСтатусов = ЭлектронныеДокументыСлужебный.НастройкиОбменаЭД(Строка.Ссылка);
		МассивСтатусовЭД = ЭлектронныеДокументыСлужебный.ВернутьМассивСтатусовЭД(НастройкиОбменаДляСтатусов);
		
		Если МассивСтатусовЭД.Количество() > 0 Тогда
			ИндексТекСтатуса = МассивСтатусовЭД.Найти(ТекущийСтатусЭД);
			Если ИндексТекСтатуса <> Неопределено Тогда
				
				Если ИндексТекСтатуса + 1 < МассивСтатусовЭД.Количество() Тогда
					СледующийСтатус = МассивСтатусовЭД[ИндексТекСтатуса + 1];
					
					Если ТекущийСтатусЭД = Перечисления.СтатусыЭД.Сформирован
						ИЛИ ТекущийСтатусЭД = Перечисления.СтатусыЭД.Получен Тогда
						
						ВозвращаемоеЗначение = Перечисления.ОжидаемоеДействиеЭД.Утвердить;
						Если НЕ (НЕ ЭлектронныеДокументыСлужебный.НемедленнаяОтправкаЭД()
								ИЛИ ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьЗначениеФункциональнойОпции("ИспользоватьЭлектронныеЦифровыеПодписи")) Тогда
								
							ВозвращаемоеЗначение = Перечисления.ОжидаемоеДействиеЭД.УтвердитьОтправить;
						КонецЕсли;
						
					ИначеЕсли ТекущийСтатусЭД = Перечисления.СтатусыЭД.Утвержден Тогда
						Если СледующийСтатус = Перечисления.СтатусыЭД.Подписан Тогда
							
							ВозвращаемоеЗначение = Перечисления.ОжидаемоеДействиеЭД.Подписать;
							Если ЭлектронныеДокументыСлужебный.НемедленнаяОтправкаЭД() Тогда
								ВозвращаемоеЗначение = Перечисления.ОжидаемоеДействиеЭД.ПодписатьОтправить;
							КонецЕсли;
						ИначеЕсли СледующийСтатус = Перечисления.СтатусыЭД.ПодготовленКОтправке Тогда
							
							ВозвращаемоеЗначение = Перечисления.ОжидаемоеДействиеЭД.Отправить;
						КонецЕсли;
					ИначеЕсли ТекущийСтатусЭД = Перечисления.СтатусыЭД.ПодготовленКОтправке Тогда
						
						Если СледующийСтатус = Перечисления.СтатусыЭД.Доставлен Тогда
							ВозвращаемоеЗначение = Перечисления.ОжидаемоеДействиеЭД.ПустаяСсылка();
						Иначе
							ВозвращаемоеЗначение = Перечисления.ОжидаемоеДействиеЭД.Отправить;
						КонецЕсли;
						
					ИначеЕсли ТекущийСтатусЭД = Перечисления.СтатусыЭД.ПодготовленоПодтверждение
						И СледующийСтатус = Перечисления.СтатусыЭД.ОтправленоПодтверждение Тогда
						ВозвращаемоеЗначение = Перечисления.ОжидаемоеДействиеЭД.Отправить;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

&НаСервере
Функция ПолучитьОжидаемоеДействиеКонтрагента(Строка)
	
	ВозвращаемоеЗначение = "";
	
	ВерсияСтатусуЭД = ЭлектронныеДокументыСлужебный.ОпределитьСостояниеВерсииПоСтатусуЭД(Строка.Ссылка);
	Если ВерсияСтатусуЭД = Перечисления.СостоянияВерсийЭД.ОбменЗавершен
		Или ВерсияСтатусуЭД = Перечисления.СостоянияВерсийЭД.ОбменЗавершенСИсправлением
		Или ВерсияСтатусуЭД = Перечисления.СостоянияВерсийЭД.ИзвещениеНаПодписи
		Или ВерсияСтатусуЭД = Перечисления.СостоянияВерсийЭД.ОжидаетсяОтправкаИзвещения Тогда
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	Если Строка.ВидЭД = Перечисления.ВидыЭД.ИзвещениеОПолучении
		ИЛИ Строка.ВидЭД = Перечисления.ВидыЭД.Подтверждение
		ИЛИ Строка.ВидЭД = Перечисления.ВидыЭД.УведомлениеОбУточнении Тогда
		
		Если Строка.ВидЭД = Перечисления.ВидыЭД.Подтверждение И НЕ ЗначениеЗаполнено(Строка.Ссылка)
			И ЗначениеЗаполнено(Строка.Родитель.Ссылка)
			И (Строка.Родитель.СтатусЭД = Перечисления.СтатусыЭД.ПереданОператору
			ИЛИ Строка.Родитель.СтатусЭД = Перечисления.СтатусыЭД.Отправлен
			ИЛИ Строка.Родитель.СтатусЭД = Перечисления.СтатусыЭД.Получен
			ИЛИ Строка.Родитель.СтатусЭД = Перечисления.СтатусыЭД.Доставлен) Тогда
			
			ВозвращаемоеЗначение = Нстр("ru = 'Подтверждения оператора ЭДО'");
		ИначеЕсли (Строка.ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.ИПУУЭСФ
				ИЛИ Строка.ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.ИПЭСФ)
				И Строка.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий
				И ЗначениеЗаполнено(Строка.Родитель.Ссылка) И (Строка.Родитель.СтатусЭД = Перечисления.СтатусыЭД.Отправлен
					ИЛИ Строка.Родитель.СтатусЭД = Перечисления.СтатусыЭД.ПереданОператору
					ИЛИ Строка.Родитель.СтатусЭД = Перечисления.СтатусыЭД.Доставлен)
				И НЕ ЗначениеЗаполнено(Строка.Ссылка) Тогда
			
			ВозвращаемоеЗначение = Нстр("ru = 'Извещения о получении'");
		КонецЕсли;
		
	Иначе
		Если Строка.СтатусЭД = Перечисления.СтатусыЭД.ПереданОператору Тогда
			
			ВозвращаемоеЗначение = Нстр("ru = 'Подтверждения отправки'");
			
			// Изменения в поведении дерева для версии регламента 20.
			Если Строка.Ссылка.ВерсияРегламентаЭДО = Перечисления.ВерсииРегламентаОбмена1С.Версия20
				И (Строка.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель
				ИЛИ Строка.ВидЭД = Перечисления.ВидыЭД.АктЗаказчик
				ИЛИ Строка.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель
				ИЛИ Строка.ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.ИнформацияПокупателяУПД
				ИЛИ Строка.ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.ИнформацияПокупателяУКД) Тогда
				
				ВозвращаемоеЗначение = "";
			КонецЕсли;
			
			Если Строка.ВидЭД = Перечисления.ВидыЭД.ПредложениеОбАннулировании Тогда
				ВозвращаемоеЗначение = "";
			КонецЕсли;
			
		ИначеЕсли Строка.СтатусЭД = Перечисления.СтатусыЭД.Отправлен Тогда
			
			ВозвращаемоеЗначение = Нстр("ru = 'Подтверждения о доставке'");
		КонецЕсли;
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

//Инициирует вывод в дерево и отображает его по окончанию формирования.
&НаКлиенте
Процедура ВывестиДеревоЭД()

	ОбновитьДеревоЭД();
	РазвернутьСтроки();

КонецПроцедуры

&НаСервере
Функция МассивПакетовКОтправке(СсылкаЭД)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПакетЭДЭлектронныеДокументы.Ссылка
	|ИЗ
	|	Документ.ПакетЭД.ЭлектронныеДокументы КАК ПакетЭДЭлектронныеДокументы
	|ГДЕ
	|	ПакетЭДЭлектронныеДокументы.ОбъектВладелец = &ОбъектВладелец
	|	И ПакетЭДЭлектронныеДокументы.Ссылка.СтатусПакета = ЗНАЧЕНИЕ(Перечисление.СтатусыПакетовЭД.ПодготовленКОтправке)
	|	И НЕ ПакетЭДЭлектронныеДокументы.Ссылка.ПометкаУдаления
	|	И ПакетЭДЭлектронныеДокументы.ЭлектронныйДокумент = &ЭлектронныйДокумент
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПакетЭДЭлектронныеДокументы.Ссылка.МоментВремени УБЫВ";
	Запрос.УстановитьПараметр("ОбъектВладелец", СсылкаЭД.ВладелецФайла);
	Запрос.УстановитьПараметр("ЭлектронныйДокумент", СсылкаЭД);

	Результат = Запрос.Выполнить();

	Если Результат.Пустой() Тогда
		МассивЭД = Новый Массив;
		МассивЭД.Добавить(СсылкаЭД);
		МассивСтруктурПакетовЭД = ЭлектронныеДокументыСлужебный.СоздатьДокументыПакетовЭД(МассивЭД, Истина);
	Иначе
		МассивСтруктурПакетовЭД = Новый Массив;
		МассивСтруктурПакетовЭД.Добавить(Новый Структура("ПЭД", Результат.Выгрузить().ВыгрузитьКолонку("Ссылка")[0]));
	КонецЕсли;
	
	Возврат МассивСтруктурПакетовЭД;
	
КонецФункции

&НаКлиенте
Процедура ДеревоПодчиненныеЭДВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	
	Если Элемент.ТекущиеДанные <> Неопределено Тогда
		Если Поле.Имя = "ДеревоПодчиненныеЭДОжидаемоеДействие" И Элемент.ТекущиеДанные.СтрокаДоступна Тогда
			СтандартнаяОбработка = Ложь;
			ВыполняемоеДействие = Элемент.ТекущиеДанные.ОжидаемоеДействие;
			Если ВыполняемоеДействие = ПредопределенноеЗначение("Перечисление.ОжидаемоеДействиеЭД.Сформировать") Тогда
				
				Если Элемент.ТекущиеДанные.ВидЭД = ПредопределенноеЗначение("Перечисление.ВидыЭД.ИзвещениеОПолучении")
					И Элемент.ТекущиеДанные.ПолучитьРодителя() <> Неопределено
					И ЗначениеЗаполнено(Элемент.ТекущиеДанные.ПолучитьРодителя().Ссылка) Тогда
					
					МассивЭДДляИзвещений = Новый Массив;
					МассивЭДДляИзвещений.Добавить(Элемент.ТекущиеДанные.ПолучитьРодителя().Ссылка);
					ЭлектронныеДокументыКлиентСервер.СформироватьПодписатьИОтправитьСлужебныеЭД(МассивЭДДляИзвещений,
						Элемент.ТекущиеДанные.ВидЭД)
					
				ИначеЕсли (Элемент.ТекущиеДанные.ТипЭД = ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.ПервичныйЭД")
					ИЛИ Элемент.ТекущиеДанные.ТипЭД = ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.ЭСФ")
					ИЛИ Элемент.ТекущиеДанные.ТипЭД = ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.ДОП")
					ИЛИ Элемент.ТекущиеДанные.ТипЭД = ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.СЧФДОПУПД")
					ИЛИ Элемент.ТекущиеДанные.ТипЭД = ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.СЧФУПД")
					ИЛИ Элемент.ТекущиеДанные.ТипЭД = ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.ДОПУПД")
					ИЛИ Элемент.ТекущиеДанные.ТипЭД = ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.КСЧФДИСУКД")
					ИЛИ Элемент.ТекущиеДанные.ТипЭД = ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.ДИСУКД")
					ИЛИ Элемент.ТекущиеДанные.ТипЭД = ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.КСЧФУКД"))
					И НЕ ЗначениеЗаполнено(Элемент.ТекущиеДанные.Ссылка)
					И Элемент.ТекущиеДанные.НаправлениеЭД = ПредопределенноеЗначение("Перечисление.НаправленияЭД.Исходящий") Тогда
					
					ЭлектронныеДокументыКлиент.СформироватьНовыйЭД(ОбъектСсылка, Ложь);
				КонецЕсли;
				
			ИначеЕсли ВыполняемоеДействие = ПредопределенноеЗначение("Перечисление.ОжидаемоеДействиеЭД.Утвердить")
				  ИЛИ ВыполняемоеДействие = ПредопределенноеЗначение("Перечисление.ОжидаемоеДействиеЭД.УтвердитьОтправить") Тогда
				
				Если ЭлектронныеДокументыСлужебныйВызовСервера.ЕстьПравоОбработкиЭД() Тогда
					ЭлектронныеДокументыСлужебныйКлиент.УтвердитьЭД(ОбъектСсылка, Элемент.ТекущиеДанные.Ссылка, Истина);
				КонецЕсли;
				
			ИначеЕсли ВыполняемоеДействие = ПредопределенноеЗначение("Перечисление.ОжидаемоеДействиеЭД.Подписать")
				ИЛИ ВыполняемоеДействие = ПредопределенноеЗначение("Перечисление.ОжидаемоеДействиеЭД.ПодписатьОтправить") Тогда
				
				ЭлектронныеДокументыКлиент.СформироватьПодписатьОтправитьЭД(ОбъектСсылка, Элемент.ТекущиеДанные.Ссылка);
				
			ИначеЕсли ВыполняемоеДействие = ПредопределенноеЗначение("Перечисление.ОжидаемоеДействиеЭД.Отправить") Тогда
				
				МассивСтруктурПакетовЭД = МассивПакетовКОтправке(Элемент.ТекущиеДанные.Ссылка);
				Если МассивСтруктурПакетовЭД.Количество() > 0 Тогда
					
					МассивПЭД = Новый Массив;
					МассивПЭД.Добавить(МассивСтруктурПакетовЭД[0].ПЭД);
					
					ЭлектронныеДокументыСлужебныйКлиент.ОтправитьМассивПакетовЭД(МассивПЭД);
				КонецЕсли;
			ИначеЕсли ВыполняемоеДействие = ПредопределенноеЗначение("Перечисление.ОжидаемоеДействиеЭД.Принять") Тогда
				ЭлектронныеДокументыСлужебныйКлиент.ОбработатьПредложениеОбАннулировании(Элемент.ТекущиеДанные.ПолучитьРодителя().Ссылка);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Элементы.ДеревоПодчиненныеЭД.ТекущаяСтрока) Тогда 
				Элементы.ДеревоПодчиненныеЭД.Развернуть(Элементы.ДеревоПодчиненныеЭД.ТекущаяСтрока, Истина);
			КонецЕсли;
			
		Иначе
			ЭлектронныеДокументыСлужебныйКлиент.ОткрытьЭДДляПросмотра(Элемент.ТекущиеДанные.Ссылка,, ЭтаФорма);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПодчиненныеЭДПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	Если Элемент.ТекущийЭлемент <> Неопределено Тогда
		
		Если Элемент.ТекущийЭлемент.Имя = "ДеревоПодчиненныеЭДПредставление" Тогда
			
			Если Элемент.ТекущиеДанные <> Неопределено
				И ТипЗнч(Элемент.ТекущиеДанные.Ссылка) = Тип("СправочникСсылка.ЭДПрисоединенныеФайлы")
				И ЗначениеЗаполнено(Элемент.ТекущиеДанные.Ссылка) Тогда
				
				ЭлектронныеДокументыСлужебныйКлиент.ОткрытьЭДДляПросмотра(Элемент.ТекущиеДанные.Ссылка,, ЭтаФорма);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьТекущуюСтроку()
	
	Элементы.ДеревоПодчиненныеЭД.ТекущаяСтрока = ИндексИД;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИндексТекущейСтроки(ТекущаяСсылка)
	
	ЗаполнитьИндексИД(ДеревоПодчиненныеЭД, ТекущаяСсылка);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНД ФОРМЫ

&НаКлиенте
Процедура Обновить(Команда)
	
	Если Элементы.ДеревоПодчиненныеЭД.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСсылка = Элементы.ДеревоПодчиненныеЭД.ТекущиеДанные.Ссылка;
	
	ВывестиДеревоЭД();
	
	ОбновитьИндексТекущейСтроки(ТекущаяСсылка);
	УстановитьТекущуюСтроку();
	
КонецПроцедуры

&НаКлиенте
Процедура ЖурналСобытий(Команда)
	
	Если Элементы.ДеревоПодчиненныеЭД.ТекущиеДанные <> Неопределено Тогда
		
		ПараметрыФормы = Новый Структура;
		
		Отбор = Новый Структура;
		Отбор.Вставить("ПрисоединенныйФайл", Элементы.ДеревоПодчиненныеЭД.ТекущиеДанные.Ссылка);
		
		ПараметрыФормы.Вставить("Отбор", Отбор);
		ПараметрыФормы.Вставить("РежимОткрытияОкна", РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		ОткрытьФормуМодально("РегистрСведений.ЖурналСобытийЭД.ФормаСписка", ПараметрыФормы, ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Параметры.Свойство("ИсходныйДокумент", ИсходныйДокумент);
	
	Параметры.Свойство("ОбъектОтбора", ОбъектСсылка);
	
	Если ЗначениеЗаполнено(ОбъектСсылка) Тогда
		Заголовок = НСтр("ru = 'Электронные документы:'") + " " + ОбъектСсылка;
		ОбновитьДеревоЭД();
	КонецЕсли;
	
	Элементы.ЖурналСобытий.Доступность = Пользователи.ЭтоПолноправныйПользователь();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновитьСостояниеЭД" Тогда
		ВывестиДеревоЭД();
	ИначеЕсли ИмяСобытия = "ОбновитьПозиционироватьСтрокуДереваЭД" И ЗначениеЗаполнено(Параметр) Тогда
		// Обновление текущей строки при повторной открытии формы
		ИсходныйДокумент = Параметр;
		ВывестиДеревоЭД();
		УстановитьТекущуюСтроку();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	РазвернутьСтроки();
	
	Если ЗначениеЗаполнено(ИсходныйДокумент) Тогда
		УстановитьТекущуюСтроку();
	КонецЕсли;
	
КонецПроцедуры
