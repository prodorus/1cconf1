#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

// Служебные процедуры и функции

Функция ТекстЗапросаФормированияТаблицыДанныеРегистров(ВариантПолучениеДанныхИзРегистров, СкладИлиПодразделение = Неопределено) Экспорт
	
	// Используется в СертификатыНоменклатуры.ФормаПодбораОбластиДействияСерия
		
	Если ВариантПолучениеДанныхИзРегистров = "ЗаказНакладнаяСерииИзОстатка" Тогда
		// В накладной (или заказе) могут быть указаны любые незарезервированные серии
		// Из остатков серий нужно вычесть резервы серий.
			
		ТекстЗапроса = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ДанныеРегистров.Серия КАК Серия,
			|	СУММА(ДанныеРегистров.СвободныйОстаток) КАК СвободныйОстаток
			|ПОМЕСТИТЬ ДанныеРегистровДляЗапроса
			|ИЗ
			|	(ВЫБРАТЬ
			|		ТоварыНаСкладахОстатки.СерияНоменклатуры КАК Серия,
			|		ТоварыНаСкладахОстатки.КоличествоОстаток КАК СвободныйОстаток
			|	ИЗ
			|		РегистрНакопления.ТоварыНаСкладах.Остатки(
			|				,
			|				Номенклатура = &Номенклатура
			|					И ХарактеристикаНоменклатуры = &Характеристика
			|					И Склад = &Склад) КАК ТоварыНаСкладахОстатки) КАК ДанныеРегистров
			|
			|СГРУППИРОВАТЬ ПО
			|	ДанныеРегистров.Серия";
		
	КонецЕсли;
	
	ЕстьПравоНаЧтениеДвиженийСерий = ПравоДоступа("Чтение",Метаданные.РегистрыНакопления.ДвиженияСерийТоваров);

	Если ВариантПолучениеДанныхИзРегистров = "ВсеСерииНоменклатуры" Тогда
		Если ЕстьПравоНаЧтениеДвиженийСерий Тогда
			ТекстЗапроса = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	ДвиженияСерийТоваров.Серия,
			|	0 КАК СвободныйОстаток
			|ПОМЕСТИТЬ ДанныеРегистров
			|ИЗ
			|	РегистрНакопления.ДвиженияСерийТоваров КАК ДвиженияСерийТоваров
			|ГДЕ
			|	ДвиженияСерийТоваров.Номенклатура = &Номенклатура
			|	И ДвиженияСерийТоваров.Характеристика = &Характеристика";
		Иначе
			ТекстЗапроса = 
			"ВЫБРАТЬ
			|	ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка) КАК Серия,
			|	0 КАК СвободныйОстаток
			|ПОМЕСТИТЬ ДанныеРегистров
			|ГДЕ
			|	ЛОЖЬ";
		КонецЕсли;
	Иначе
		
		ЧастиЗапроса = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ТекстЗапроса, "РегистрНакопления.");
		ЧастиЗапроса.Удалить(0);
		ПроверенныеРегистры = Новый Соответствие;
		Для Каждого ЧастьЗапроса Из ЧастиЗапроса Цикл
			ИмяРегистра = СтрРазделить(ЧастьЗапроса, "."+" "+Символы.ПС+Символы.НПП)[0];
			Если ПроверенныеРегистры[ИмяРегистра] = Неопределено Тогда
				ПроверенныеРегистры.Вставить(ИмяРегистра);
				Если Не ПравоДоступа("Чтение",Метаданные.РегистрыНакопления[ИмяРегистра]) Тогда
					ТекстЗапроса = 
					"ВЫБРАТЬ
					|	ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка) КАК Серия,
					|	0 КАК СвободныйОстаток
					|ПОМЕСТИТЬ ДанныеРегистровДляЗапроса
					|ГДЕ
					|	ЛОЖЬ";
					
					Прервать;
					
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	
		ТекстЗапроса = ТекстЗапроса + "
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|";
		
		Если ЕстьПравоНаЧтениеДвиженийСерий Тогда
			
			ТекстЗапроса = ТекстЗапроса + 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	ДвиженияСерийТоваров.Серия
			|ПОМЕСТИТЬ ВсеСерии
			|ИЗ
			|	РегистрНакопления.ДвиженияСерийТоваров КАК ДвиженияСерийТоваров
			|ГДЕ
			|	ДвиженияСерийТоваров.Номенклатура = &Номенклатура
			|	И ДвиженияСерийТоваров.Характеристика = &Характеристика
			|	И &ВсеСерии
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВложенныйЗапрос.Серия КАК Серия,
			|	СУММА(ВложенныйЗапрос.СвободныйОстаток) КАК СвободныйОстаток
			|ПОМЕСТИТЬ ДанныеРегистров
			|ИЗ
			|	(ВЫБРАТЬ
			|		ДвиженияСерийТоваров.Серия КАК Серия,
			|		0 КАК СвободныйОстаток
			|	ИЗ
			|		ВсеСерии КАК ДвиженияСерийТоваров
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		ДанныеРегистровДляЗапроса.Серия,
			|		ДанныеРегистровДляЗапроса.СвободныйОстаток
			|	ИЗ
			|		ДанныеРегистровДляЗапроса КАК ДанныеРегистровДляЗапроса) КАК ВложенныйЗапрос
			|
			|СГРУППИРОВАТЬ ПО
			|	ВложенныйЗапрос.Серия";
		Иначе
			ТекстЗапроса = ТекстЗапроса + 
			"ВЫБРАТЬ
			|	ДанныеРегистровДляЗапроса.Серия,
			|	ДанныеРегистровДляЗапроса.СвободныйОстаток
			|ПОМЕСТИТЬ ДанныеРегистров
			|ИЗ
			|	ДанныеРегистровДляЗапроса КАК ДанныеРегистровДляЗапроса";
		КонецЕсли;
	КонецЕсли;
		
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ВариантПолучениеДанныхИзРегистровПоПараметрамФормы() Экспорт
	
	ВариантПолучениеДанныхИзРегистров = "ВсеСерииНоменклатуры";
	
	Возврат ВариантПолучениеДанныхИзРегистров;
	
КонецФункции

Функция ЗаголовкиПоВариантуПолучениеДанныхИзРегистров(ВариантПолучениеДанныхИзРегистров) Экспорт
	
	ЗаголовокКнопки = "";
	ЗаголовокСвободногоОстатка = "";

	Результат = Новый Структура;
	Результат.Вставить("ЗаголовокКнопки", ЗаголовокКнопки);
	Результат.Вставить("ЗаголовокСвободногоОстатка", ЗаголовокСвободногоОстатка);
	
	Возврат Результат;
	
КонецФункции

// Раскладывает переданный массив считанных штрихкодов по типам штрихкодов
//
// Параметры:
//  Штрихкоды	 - Массив - массив структур, который передается БПО от оборудования, см. ШтрихкодированиеНоменклатурыКлиент.СтруктураДанныхШтрихкода.
//								
// Возвращаемое значение:
//  Структура - структура: 
//       *БезТипа - Массив - штрихкоды, тип которых не определен, элементы - структуры, см. ШтрихкодированиеНоменклатурыКлиент.СтруктураДанныхШтрихкода 
//		 *АкцизныеМарки - Массив
Функция СтруктураПоТипамШтрихкодов(Штрихкоды) Экспорт   // ***
	
	Результат = Новый Структура();
	Результат.Вставить("БезТипа", Новый Массив);
	Результат.Вставить("АкцизныеМарки", Новый Массив);
	
	ПроверятьАкцизныеМарки = ПолучитьФункциональнуюОпцию("ВестиСведенияДляДекларацийПоАлкогольнойПродукции"); 
	
	Для Каждого СтрМас Из Штрихкоды Цикл
		
		Если ПроверятьАкцизныеМарки
			И АкцизныеМаркиВызовСервера.ЭтоШтрихкодАкцизнойМарки(СтрМас.Штрихкод) Тогда
			Результат.АкцизныеМарки.Добавить(СтрМас);
		Иначе
			Результат.БезТипа.Добавить(СтрМас);
		КонецЕсли;	
		
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

Функция ВладелецСвойствСерий(Номенклатура) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПустаяСерия = Справочники.СерииНоменклатуры.СоздатьЭлемент();
	ПустаяСерия.Владелец  = Номенклатура;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ПустаяСерия;
	
КонецФункции

// Конец области служебных процедур и функций

#КонецЕсли
