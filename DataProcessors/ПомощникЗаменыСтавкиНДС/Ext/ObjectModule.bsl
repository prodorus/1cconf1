#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЙ ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Возвращает строку для вставки между текстами объединяемых запросов
// Параметры:
//	ТолькоУникальные - Булево - признак того, что необходимо выбирать только уникальные записи при объединении
//		значение по умолчанию - ЛОЖЬ.
// 
// Возвращаемое значение:
//  Строка 
//
Функция РазделительЗапросовВОбъединении(ТолькоУникальные = Ложь) Экспорт
	
	Если ТолькоУникальные Тогда
		Возврат "
		|
		|ОБЪЕДИНИТЬ
		|
		|";
	Иначе
		Возврат "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|";
	КонецЕсли;
	
КонецФункции

Функция ТекстЗапроса(ТипыИзменяемыхОбъектов, ОграничитьВыборку = Ложь) Экспорт
	
	ОбъектыМетаданных = Новый Массив;
	Для Каждого ИмяОбъекта Из СтрРазделить(ТипыИзменяемыхОбъектов, ",", Ложь) Цикл
		ОбъектыМетаданных.Добавить(Метаданные.НайтиПоПолномуИмени(ИмяОбъекта));
	КонецЦикла;
	
	СтруктураОбъектов = ОбщиеРеквизитыОбъектов(ТипыИзменяемыхОбъектов);
	
	Результат = Новый Массив;
	ПсевдонимТаблицы = "ПсевдонимЗаданнойТаблицы";
	Для Каждого ОбъектМетаданных Из ОбъектыМетаданных Цикл
		
		Выбор = Новый Массив;
		
		Для Каждого ИмяРеквизита Из СтруктураОбъектов.Реквизиты Цикл
			Если ИмяРеквизита <> "СтавкаНДС" Тогда
				Выбор.Добавить(ПсевдонимТаблицы + "." + ИмяРеквизита + " КАК " + ИмяРеквизита);
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого ТабличнаяЧасть Из СтруктураОбъектов.ТабличныеЧасти Цикл
			ИмяТабличнойЧасти = ТабличнаяЧасть.Ключ;
			РеквизитыТабличнойЧасти = ТабличнаяЧасть.Значение;
			
			Выбор.Добавить(ПсевдонимТаблицы + "." + ИмяТабличнойЧасти + ".(" + Символы.ПС
				+ СтрСоединить(РеквизитыТабличнойЧасти, "," + Символы.ПС) + Символы.ПС + ")");
		КонецЦикла;
		
		ШаблонЗапроса =
			"ВЫБРАТЬ %1
			|	%2
			|ИЗ
			|	%3 КАК %4
			|ГДЕ
			|	%4.СтавкаНДС В(
			|		ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18),
			|		ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18_118))";
			
		Результат.Добавить(СтрШаблон(ШаблонЗапроса, ?(ОграничитьВыборку, "ПЕРВЫЕ 1001 ", ""),
			СтрСоединить(Выбор, "," + Символы.ПС), ОбъектМетаданных.ПолноеИмя(), ПсевдонимТаблицы));
	КонецЦикла;
	
	Возврат СтрСоединить(Результат, РазделительЗапросовВОбъединении());
	
КонецФункции

Функция СхемаКомпоновкиДанных(ТекстЗапроса) Экспорт
	СхемаКомпоновкиДанных = Новый СхемаКомпоновкиДанных;
	
	ИсточникДанных = СхемаКомпоновкиДанных.ИсточникиДанных.Добавить();
	ИсточникДанных.Имя = "ИсточникДанных1";
	ИсточникДанных.ТипИсточникаДанных = "local";
	
	НаборДанных = СхемаКомпоновкиДанных.НаборыДанных.Добавить(Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"));
	НаборДанных.ИсточникДанных = "ИсточникДанных1";
	НаборДанных.АвтоЗаполнениеДоступныхПолей = Истина;
	НаборДанных.Запрос = ТекстЗапроса;
	НаборДанных.Имя = "НаборДанных1";
	
	Возврат СхемаКомпоновкиДанных;
КонецФункции

// Возвращает значение ставки НДС по умолчанию.
//
// Параметры:
//  Дата - Дата - дата на которую необходимо получить ставку НДС по умолчанию,
//               если дата пустая, то будет получена ставка НДС на текущую дату
//  РасчетнаяСтавка - Булево - указывает необходимость получения расчетной ставки НДС X/(100 + X).
//
// Возвращаемое значение:
//  ПеречислениеСсылка.СтавкиНДС - значение ставки НДС.
//
Функция СтавкаНДСПоУмолчанию(Дата = Неопределено, РасчетнаяСтавка = Ложь) Экспорт
	
	ДатаПолучения = ?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДатаСеанса());
	
	Если ДатаПолучения >= '20190101' Тогда
		Возврат ?(РасчетнаяСтавка, Перечисления.СтавкиНДС.НДС20_120, Перечисления.СтавкиНДС.НДС20);
	Иначе
		Возврат ?(РасчетнаяСтавка, Перечисления.СтавкиНДС.НДС18_118, Перечисления.СтавкиНДС.НДС18);
	КонецЕсли;
	
КонецФункции

// Заменяет переданную ставку НДС на актуальную на указанную дату.
//
// Параметры:
//  СтавкаНДС - ПеречислениеСсылка.СтавкиНДС - значение ставки НДС, которое необходимо скорректировать
//  Дата - Дата - дата на которую необходимо получить актуальную ставку НДС.
//
// Возвращаемое значение:
//  Булево - Истина, если значение ставки НДС было заменено.
//
Функция СкорректироватьСтавкуНДС(СтавкаНДС, Дата) Экспорт
	
	Если СтавкаНДС = Перечисления.СтавкиНДС.НДС18 Или СтавкаНДС = Перечисления.СтавкиНДС.НДС18_118
		Или СтавкаНДС = Перечисления.СтавкиНДС.НДС20 Или СтавкаНДС = Перечисления.СтавкиНДС.НДС20_120 Тогда
		СтавкаНДСПоУмолчанию = СтавкаНДСПоУмолчанию(Дата, СтавкаНДС = Перечисления.СтавкиНДС.НДС18_118
			Или СтавкаНДС = Перечисления.СтавкиНДС.НДС20_120);
		Если СтавкаНДС <> СтавкаНДСПоУмолчанию Тогда
			СтавкаНДС = СтавкаНДСПоУмолчанию;
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Процедура ИзменитьОбъекты(Параметры, АдресРезультата) Экспорт
	
	ОбрабатываемыеОбъекты = Параметры.ОбрабатываемыеОбъекты.Получить();
	
	РезультатИзменения = Новый Структура("ЕстьОшибки, СостояниеОбработки");
	РезультатИзменения.ЕстьОшибки = Ложь;
	РезультатИзменения.СостояниеОбработки = Новый Соответствие;
	
	Если ОбрабатываемыеОбъекты.Количество() = 0 Тогда
		ПоместитьВоВременноеХранилище(РезультатИзменения, АдресРезультата);
		Возврат;
	КонецЕсли;
	
	ОстанавливатьИзменениеПриОшибке = Параметры.ОстанавливатьИзменениеПриОшибке;
	Если ОстанавливатьИзменениеПриОшибке = Неопределено Тогда
		ОстанавливатьИзменениеПриОшибке = Параметры.ПрерыватьПриОшибке;
	КонецЕсли;
	
	ЗаписатьОшибку = Истина;
	Ссылка = Неопределено;
	
	Если Параметры.ИзменятьВТранзакции Тогда
		НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	КонецЕсли;
	
	Попытка
		Если Параметры.ИзменятьВТранзакции Тогда
			Для Каждого Ссылка Из ОбрабатываемыеОбъекты Цикл
				ЗаблокироватьСсылки(Ссылка);
			КонецЦикла;
		КонецЕсли;
		
		Для Каждого Ссылка Из ОбрабатываемыеОбъекты Цикл
			
			ЗаписатьОшибку = Истина;
			НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
			Попытка
				
				Если Не Параметры.ИзменятьВТранзакции Тогда
					ЗаблокироватьСсылки(Ссылка);
				КонецЕсли;
			
				ИзменяемыйОбъект = Ссылка.ПолучитьОбъект();
				
				СкорректироватьСтавкуНДС(ИзменяемыйОбъект.СтавкаНДС, '20190101');
				
				ИзменяемыйОбъект.Записать();
				
				СостояниеИзменения = Новый Структура;
				СостояниеИзменения.Вставить("КодОшибки", "");
				СостояниеИзменения.Вставить("СообщениеОбОшибке", "");
				РезультатИзменения.СостояниеОбработки.Вставить(Ссылка, СостояниеИзменения);
				
				РазблокироватьДанныеДляРедактирования(Ссылка);
				ЗафиксироватьТранзакцию();
				
			Исключение
				
				ОтменитьТранзакцию();
				Если Параметры.ИзменятьВТранзакции Тогда
					РазблокироватьДанныеДляРедактирования(Ссылка);
				КонецЕсли;
				
				КраткоеПредставлениеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
				ЗаполнитьРезультатИзменения(РезультатИзменения, Ссылка, КраткоеПредставлениеОшибки);
				Если ОстанавливатьИзменениеПриОшибке Или Параметры.ИзменятьВТранзакции Тогда
					ЗаписатьОшибку = Ложь;
					ВызватьИсключение;
				КонецЕсли;
				
				Продолжить;
			КонецПопытки;
			
		КонецЦикла;
		
		Если Параметры.ИзменятьВТранзакции Тогда
			ЗафиксироватьТранзакцию();
		КонецЕсли;
		
	Исключение
		
		Если Параметры.ИзменятьВТранзакции Тогда
			ОтменитьТранзакцию();
			Для Каждого Ссылка Из ОбрабатываемыеОбъекты Цикл
				РазблокироватьДанныеДляРедактирования(Ссылка);
			КонецЦикла;
		КонецЕсли;
		
		Если ЗаписатьОшибку Тогда
			КраткоеПредставлениеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗаполнитьРезультатИзменения(РезультатИзменения, Ссылка, КраткоеПредставлениеОшибки);
		КонецЕсли;
		
	КонецПопытки;
	
	ПоместитьВоВременноеХранилище(РезультатИзменения, АдресРезультата);
	
КонецПроцедуры

// СЛУЖЕБНЫЙ ПРОГРАММНЫЙ ИНТЕРФЕЙС
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Функция ОбщиеРеквизитыОбъектов(ТипыОбъектов) Экспорт
	
	ОбъектыМетаданных = Новый Массив;
	Для Каждого ИмяОбъекта Из СтрРазделить(ТипыОбъектов, ",", Ложь) Цикл
		ОбъектыМетаданных.Добавить(Метаданные.НайтиПоПолномуИмени(ИмяОбъекта));
	КонецЦикла;
	
	Результат = Новый Структура;
	Результат.Вставить("Реквизиты", Новый Массив);
	Результат.Вставить("ТабличныеЧасти", Новый Структура);
	
	ОбщийСписокРеквизитов = СписокЭлементов(ОбъектыМетаданных[0].Реквизиты, Ложь);
	Для Индекс = 1 По ОбъектыМетаданных.Количество() - 1 Цикл
		ОбщийСписокРеквизитов = ПересечениеРеквизитов(ОбщийСписокРеквизитов, ОбъектыМетаданных[Индекс].Реквизиты);
	КонецЦикла;
	
	СтандартныеРеквизиты = ОбъектыМетаданных[0].СтандартныеРеквизиты;
	Для Индекс = 1 По ОбъектыМетаданных.Количество() - 1 Цикл
		СтандартныеРеквизиты = ПересечениеРеквизитов(СтандартныеРеквизиты, ОбъектыМетаданных[Индекс].СтандартныеРеквизиты);
	КонецЦикла;
	Для Каждого Реквизит Из СтандартныеРеквизиты Цикл
		ОбщийСписокРеквизитов.Добавить(Реквизит);
	КонецЦикла;
	
	Результат.Реквизиты = СписокЭлементов(ОбщийСписокРеквизитов);
	
	ТабличныеЧасти = СписокЭлементов(ОбъектыМетаданных[0].ТабличныеЧасти);
	Для Индекс = 1 По ОбъектыМетаданных.Количество() - 1 Цикл
		ТабличныеЧасти = ПересечениеМножеств(ТабличныеЧасти, СписокЭлементов(ОбъектыМетаданных[Индекс].ТабличныеЧасти));
	КонецЦикла;
	
	Для Каждого ИмяТабличнойЧасти Из ТабличныеЧасти Цикл
		РеквизитыТабличнойЧасти = СписокЭлементов(ОбъектыМетаданных[0].ТабличныеЧасти[ИмяТабличнойЧасти].Реквизиты, Ложь);
		Для Индекс = 1 По ОбъектыМетаданных.Количество() - 1 Цикл
			РеквизитыТабличнойЧасти = ПересечениеРеквизитов(РеквизитыТабличнойЧасти, ОбъектыМетаданных[Индекс].ТабличныеЧасти[ИмяТабличнойЧасти].Реквизиты);
		КонецЦикла;
		Если РеквизитыТабличнойЧасти.Количество() > 0 Тогда
			Результат.ТабличныеЧасти.Вставить(ИмяТабличнойЧасти, СписокЭлементов(РеквизитыТабличнойЧасти));
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция СписокЭлементов(Коллекция, ТолькоИмена = Истина)
	Результат = Новый Массив;
	Для Каждого Элемент Из Коллекция Цикл
		Если ТолькоИмена Тогда
			Результат.Добавить(Элемент.Имя);
		Иначе
			Результат.Добавить(Элемент);
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;
КонецФункции

Функция ПересечениеРеквизитов(КоллекцияРеквизитов1, КоллекцияРеквизитов2)
	
	Результат = Новый Массив;
	
	Для Каждого Реквизит2 Из КоллекцияРеквизитов2 Цикл
		Для Каждого Реквизит1 Из КоллекцияРеквизитов1 Цикл
			Если Реквизит1.Имя = Реквизит2.Имя 
				И (Реквизит1.Тип = Реквизит2.Тип Или Реквизит1.Имя = "Ссылка") Тогда
				Результат.Добавить(Реквизит1);
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ПересечениеМножеств(Множество1, Множество2)
	
	Результат = Новый Массив;
	
	Для Каждого Элемент Из Множество2 Цикл
		Индекс = Множество1.Найти(Элемент);
		Если Индекс <> Неопределено Тогда
			Результат.Добавить(Элемент);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаблокироватьСсылки(Ссылки)
	
	Если ТипЗнч(Ссылки) <> Тип("Массив") Тогда
		МассивСсылок = Новый Массив(1);
		МассивСсылок[0] = Ссылки;
	Иначе
		МассивСсылок = Ссылки;
	КонецЕсли;
	
	Блокировка = Новый БлокировкаДанных;
	Для каждого Ссылка Из МассивСсылок Цикл
		ЗаблокироватьДанныеДляРедактирования(Ссылка);
		ЭлементБлокировки = Блокировка.Добавить(ОбщегоНазначения.ВидОбъектаПоСсылке(Ссылка) + "." + Ссылка.Метаданные().Имя);
		ЭлементБлокировки.УстановитьЗначение("Ссылка", Ссылка);
	КонецЦикла;
	
	Блокировка.Заблокировать();
	
КонецПроцедуры

Процедура ЗаполнитьРезультатИзменения(Результат, Ссылка, СообщениеОбОшибке)
	
	СостояниеИзменения = Новый Структура;
	СостояниеИзменения.Вставить("КодОшибки", "Ошибка");
	СостояниеИзменения.Вставить("СообщениеОбОшибке", СообщениеОбОшибке);
	
	Результат.СостояниеОбработки.Вставить(Ссылка, СостояниеИзменения);
	Результат.ЕстьОшибки = Истина;
	
КонецПроцедуры

// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
////////////////////////////////////////////////////////////////////////////////

#КонецЕсли