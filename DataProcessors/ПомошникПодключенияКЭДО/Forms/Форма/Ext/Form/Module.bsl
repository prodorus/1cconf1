
//Область ОбработчикиСобытийФормы
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.НадписьПояснение <> "" Тогда
		Элементы.НадписьПояснение.Заголовок = Параметры.НадписьПояснение;
	КонецЕсли;
	
	ИБФайловая = ОбщегоНазначения.ИнформационнаяБазаФайловая();
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	ПроверяемыеРеквизиты.Очистить();
	
	Если Элементы.Главная.ТекущаяСтраница = Элементы.Регистрация Тогда
		
		ПроверяемыеРеквизиты.Добавить("Имя");
		ПроверяемыеРеквизиты.Добавить("Телефон");
		ПроверяемыеРеквизиты.Добавить("Почта");
		
	ИначеЕсли Элементы.Главная.ТекущаяСтраница = Элементы.Авторизация Тогда
		
		ПроверяемыеРеквизиты.Добавить("Логин");
		ПроверяемыеРеквизиты.Добавить("Пароль");
		
	КонецЕсли;
	
КонецПроцедуры

//КонецОбласти

//Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПочтаПриИзменении(Элемент)
	
	ПроверкаПочтыНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура Декорация2Нажатие(Элемент)
	ОбщегоНазначенияКлиент.ОткрытьНавигационнуюСсылку("https://1cbn.ru/agreement/");
КонецПроцедуры

//КонецОбласти

//Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Авторизация(Команда)
	
	Элементы.Главная.ТекущаяСтраница          = Элементы.Авторизация;
	Элементы.КнопкиУправления.ТекущаяСтраница = Элементы.КнопкиАвторизация;
	
	Если ПустаяСтрока(Логин) Тогда
		Логин = Почта;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НазадНаРегистрацию(Команда)
	
	Элементы.Главная.ТекущаяСтраница          = Элементы.Регистрация;
	Элементы.КнопкиУправления.ТекущаяСтраница = Элементы.КнопкиРегистрация;
	
КонецПроцедуры

&НаКлиенте
Процедура Зарегистрироваться(Команда)
	
	ОчиститьСообщения();
	
	Если ПроверитьЗаполнение() Тогда
		Если НЕ Согласен Тогда
			
			Сообщить("Для продолжения работы помошника необходимо принять договор оферты");
			Возврат;
			
		КонецЕсли;
		
		Элементы.Главная.ТекущаяСтраница          = Элементы.ВыполняетсяПодключение;
		Элементы.КнопкиУправления.ТекущаяСтраница = Элементы.КнопкиПусто;
		
		ПараметрыОткрытия = Новый Структура();
		ПараметрыОткрытия.Вставить("Почта", Почта);
		ПараметрыОткрытия.Вставить("Имя", Имя);
		ПараметрыОткрытия.Вставить("Телефон", Телефон);
		
		Если ИБФайловая Тогда
			
			Адрес = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
			ПомошникПодключенияККлиентуЭДО.ВыполнитьРегистрациюВСервисе(ПараметрыОткрытия, Адрес);
			Данные = ПолучитьИзВременногоХранилища(Адрес);
			
			РегистрацияЗавершена(Данные);
			
		Иначе
			
			РезультатВыполнения = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
						УникальныйИдентификатор,
						"ПомошникПодключенияККлиентуЭДО.ВыполнитьРегистрациюВСервисе", 
						ПараметрыОткрытия,
						НСтр("ru = 'Регистрация в Клиенте ЭДО'"));
			
			Адрес                     = РезультатВыполнения.АдресХранилища;
			УникальныйИдентификаторФЗ = РезультатВыполнения.ИдентификаторЗадания;
			
			ОжиданиеРегистрацииАбанента();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьРаботу(Команда)
	
	ОчиститьСообщения();
	
	Если ПроверитьЗаполнение() Тогда
		
		Элементы.Главная.ТекущаяСтраница          = Элементы.ВыполняетсяПодключение;
		Элементы.КнопкиУправления.ТекущаяСтраница = Элементы.КнопкиПусто;
		
		ПараметрыОткрытия = Новый Структура();
		ПараметрыОткрытия.Вставить("Логин", Логин);
		ПараметрыОткрытия.Вставить("Пароль", Пароль);
		
		Если ИБФайловая Тогда
			
			Адрес = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
			ПомошникПодключенияККлиентуЭДО.ПолучитьДанныеПриложенияВСвервисе(ПараметрыОткрытия, Адрес);
			Данные = ПолучитьИзВременногоХранилища(Адрес);
			
			ПриложениеВСервисеГотово(Данные);
			
		Иначе
			
			РезультатВыполнения = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
						УникальныйИдентификатор,
						"ПомошникПодключенияККлиентуЭДО.ПолучитьДанныеПриложенияВСвервисе",
						ПараметрыОткрытия,
						НСтр("ru = 'Авторизация в Клиенте ЭДО'"));
			
			Адрес                     = РезультатВыполнения.АдресХранилища;
			УникальныйИдентификаторФЗ = РезультатВыполнения.ИдентификаторЗадания;
			
			ОжиданиеПриложенияВСервисе();
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Пропустить(Команда)
	
	Отказ = Ложь;
	
	Элементы.Главная.ТекущаяСтраница = Элементы.ВыполняетсяПодключение;
	Элементы.КнопкиУправления.ТекущаяСтраница = Элементы.КнопкиПусто;
	
	НастроитьНовыйОбменДаннымиНаСервереЧерезВебСервис(Отказ);
	
	Если Отказ Тогда
		
		Элементы.Главная.ТекущаяСтраница = Элементы.ОшибкаНачальногоЗаполнения;
		Элементы.КнопкиУправления.ТекущаяСтраница = Элементы.КнопкиНазадРегистрация;
		
		Возврат;
	КонецЕсли;
	
	Элементы.Главная.ТекущаяСтраница = Элементы.Готово;
	Элементы.КнопкиУправления.ТекущаяСтраница = Элементы.КнопкиЗакрыть;
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКлиентЭДО(Команда)
	ОбщегоНазначенияКлиент.ОткрытьНавигационнуюСсылку(АдресПриложения + "/?N=""" + Логин + """");
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройкиСозданногоУзла(Команда)
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Ключ", ОбъектПомощник.УзелИнформационнойБазы);
	
	ОткрытьФорму("ПланОбмена.СинхронизацияДанныхЧерезУниверсальныйФормат.ФормаОбъекта", ПараметрыОткрытия);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьНачальноеЗаполнение(Команда)
	
	Отказ = Ложь;
	
	Элементы.Главная.ТекущаяСтраница          = Элементы.ВыполняетсяПодключение;
	Элементы.КнопкиУправления.ТекущаяСтраница = Элементы.КнопкиПусто;
	
	НастроитьНовыйОбменДаннымиНаСервереЧерезВебСервис(Отказ);
	
	Элементы.Главная.ТекущаяСтраница          = Элементы.ОжиданиеНачальногоЗаполнения;
	Элементы.КнопкиУправления.ТекущаяСтраница = Элементы.КнопкиОтмена;
	
	ПараметрыОткрытия = Новый Структура();
	ПараметрыОткрытия.Вставить("Узел", ОбъектПомощник.УзелИнформационнойБазы);
	ПараметрыОткрытия.Вставить("Пароль", Пароль);
	
	Если ИБФайловая Тогда
			
			Адрес = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
			ПомошникПодключенияККлиентуЭДО.ВыполнитьОбменДаннымиНаСервере(ПараметрыОткрытия, Адрес);
			Данные = ПолучитьИзВременногоХранилища(Адрес);
			
			ПервоночальногоЗаполнениеЗавершено(Данные);
			
		Иначе
			
			РезультатВыполнения = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
						УникальныйИдентификатор,
						"ПомошникПодключенияККлиентуЭДО.ВыполнитьОбменДаннымиНаСервере",
						ПараметрыОткрытия,
						НСтр("ru = 'Обмен данными с Клиент ЭДО'"));
			
			Адрес                     = РезультатВыполнения.АдресХранилища;
			УникальныйИдентификаторФЗ = РезультатВыполнения.ИдентификаторЗадания;
			
			ОжиданиеОкончанияПервоночальногоЗаполнения();
			
		КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НазадКНачальномуЗаполнению(Команда)
	
	Элементы.Главная.ТекущаяСтраница          = Элементы.НачальноеЗаполнение;
	Элементы.КнопкиУправления.ТекущаяСтраница = Элементы.КнопкиНачальноеЗаполнение;
	
КонецПроцедуры

&НаКлиенте
Процедура ВосстановитьПароль(Команда)
	ОбщегоНазначенияКлиент.ОткрытьНавигационнуюСсылку("https://1cfresh.com/recover");
КонецПроцедуры

//КонецОбласти

//Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ОжиданиеРегистрацииАбанента()
	
	Если ПроверитьФЗНаСервере(УникальныйИдентификаторФЗ) Тогда
		
		ПодключитьОбработчикОжидания("ОжиданиеРегистрацииАбанента", 2, Истина);
		Возврат;
		
	КонецЕсли;
	
	Данные = ПолучитьИзВременногоХранилища(Адрес);
	
	РегистрацияЗавершена(Данные);
	
КонецПроцедуры // ОжиданиеРегистрацииАбанента()

&НаКлиенте
Процедура РегистрацияЗавершена(Данные)
	
	Если ТипЗнч(Данные) = Тип("Структура") Тогда
		Если Данные.response = "10202" Тогда
			
			Элементы.Главная.ТекущаяСтраница          = Элементы.РегистрацияВыполнена;
			Элементы.КнопкиУправления.ТекущаяСтраница = Элементы.КнопкиРегистрацияЗавершена;
			
		Иначе
			
			Элементы.Главная.ТекущаяСтраница          = Элементы.ОшибкаРегистрации;
			Элементы.КнопкиУправления.ТекущаяСтраница = Элементы.КнопкиНазадРегистрация;
			ОписаниеОшибкиПодключения                 = Данные.message;
			
		КонецЕсли;
		
	Иначе
		
			Элементы.Главная.ТекущаяСтраница          = Элементы.ОшибкаРегистрации;
			Элементы.КнопкиУправления.ТекущаяСтраница = Элементы.КнопкиНазадРегистрация;
			ОписаниеОшибкиПодключения                 = Данные;
			
	КонецЕсли;
	
КонецПроцедуры // РегистрацияЗавершена()

&НаСервереБезКонтекста
Функция ПроверитьФЗНаСервере(УникальныйИдентификаторФЗ)

	ФЗ = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(УникальныйИдентификаторФЗ);
	
	Если ФЗ.Состояние = СостояниеФоновогоЗадания.Активно Тогда
		
		Возврат Истина;
		
	ИначеЕсли ФЗ.Состояние = СостояниеФоновогоЗадания.ЗавершеноАварийно Тогда
		
		Сообщить(фз.ИнформацияОбОшибке);
		
	КонецЕсли;
	
	Возврат Ложь;

КонецФункции // ПроверитьФЗНаСервере()

&НаСервереБезКонтекста
Функция ЗарегистрироватьсяНаСервере(ПараметрыОткрытия)
	
	ФЗ = ФоновыеЗадания.Выполнить("ПомошникПодключенияККлиентуЭДО.ВыполнитьРегистрациюВСервисе", ПараметрыОткрытия);
	
	Возврат ФЗ.УникальныйИдентификатор;
	
КонецФункции // ЗарегистрироватьсяНаСервере()

&НаСервере
Процедура ПроверкаПочтыНаСервере()

	Если НЕ ПустаяСтрока(Почта) Тогда
		
		Данные = Новый Структура;
		Данные.Вставить("login", Почта);
		
		Ответ = ПомошникПодключенияККлиентуЭДО.ОтправитьPOST("/check_user", Данные);
		
		Если Ответ.КодСостояния = 200 Тогда
			
			Строка = Ответ.ПолучитьТелоКакСтроку();
			Данные = ПомошникПодключенияККлиентуЭДО.ЗаполнитьСтруктуруИзОтветаJSON(Строка);
			
			Элементы.СтатусПочтовогоЯщика.Видимость = Истина;
			
			Если Данные.response = "10404" Тогда
				
				Элементы.СтатусПочтовогоЯщика.Картинка = БиблиотекаКартинок.ЗеленаяГалка;
				Элементы.СтатусПочтовогоЯщика.Подсказка = "Имя доступно к регистрации";
				
			Иначе
				
				Элементы.СтатусПочтовогоЯщика.Картинка = БиблиотекаКартинок.КритическаяОшибка;
				Элементы.СтатусПочтовогоЯщика.Подсказка = "Имя уже занято";
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		Элементы.СтатусПочтовогоЯщика.Подсказка = "Не заполнено поле 'Почта'";
		Элементы.СтатусПочтовогоЯщика.Видимость = Ложь;
		
	КонецЕсли;


КонецПроцедуры // проверка()

&НаКлиенте
Процедура ПриложениеВСервисеГотово(Данные)

		Если Данные.response = "10201" Тогда
			
			АдресПриложения = Данные.url;
			
			НастроитьПомощникСозданияОбменаДанными();
			
		Иначе
			
			Элементы.Главная.ТекущаяСтраница = Элементы.ОшибкаПодключения;
			Элементы.КнопкиУправления.ТекущаяСтраница = Элементы.КнопкиНазад;
			ОписаниеОшибкиПодключения = Данные.message;
			
		КонецЕсли;

КонецПроцедуры // ПриложениеВСервисеГотово()

&НаКлиенте
Процедура ОжиданиеПриложенияВСервисе()
	
	Если ПроверитьФЗНаСервере(УникальныйИдентификаторФЗ) Тогда
		
		ПодключитьОбработчикОжидания("ОжиданиеПриложенияВСервисе", 2, Истина);
		Возврат;
		
	КонецЕсли;
	
	Данные = ПолучитьИзВременногоХранилища(Адрес);
	
	ПриложениеВСервисеГотово(Данные);
	
КонецПроцедуры // ОжиданиеРегистрацииАбанента()

&НаКлиенте
Процедура НастроитьПомощникСозданияОбменаДанными()
	
	ОбъектПомощник.ИмяПланаОбмена = "СинхронизацияДанныхЧерезУниверсальныйФормат";
	ОбъектПомощник.WSURLВебСервиса = АдресПриложения;
	ОбъектПомощник.WSИмяПользователя = Логин;
	ОбъектПомощник.WSПароль = Пароль;
	
	Отказ = Ложь;
	ПроверитьПодключениеWSНаСервере(Отказ);
	
	Если Отказ Тогда
		
		Элементы.Главная.ТекущаяСтраница = Элементы.ОшибкаПодключения;
		Элементы.КнопкиУправления.ТекущаяСтраница = Элементы.КнопкиНазад;
		ОписаниеОшибкиПодключения = "Не верный пароль пользователя";
		
		Возврат;
	КонецЕсли;
	
	ПолучитьФормуНастройкиУзлов();
КонецПроцедуры // НастроитьПомощникСозданияОбменаДанными()

&НаСервере
Процедура ПроверитьПодключениеWSНаСервере(Отказ)
	
	ПараметрыПодключения = ОбменДаннымиСервер.СтруктураПараметровWS();
	
	ЗаполнитьЗначенияСвойств(ПараметрыПодключения, ОбъектПомощник);
	
	WSПрокси = ОбменДаннымиСервер.ПолучитьWSПрокси(ПараметрыПодключения);
	
	Если WSПрокси = Неопределено Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ВерсииКорреспондента = ОбменДаннымиПовтИсп.ВерсииКорреспондента(ПараметрыПодключения);
	
	ОбъектПомощник.ВерсияКорреспондента_2_0_1_6 = (ВерсииКорреспондента.Найти("2.0.1.6") <> Неопределено);
	ОбъектПомощник.ВерсияКорреспондента_2_1_1_7 = (ВерсииКорреспондента.Найти("2.1.1.7") <> Неопределено);
	
	Если ОбъектПомощник.ВерсияКорреспондента_2_1_1_7 Тогда
		
		WSПрокси = ОбменДаннымиСервер.ПолучитьWSПрокси_2_1_1_7(ПараметрыПодключения);
		
		Если WSПрокси = Неопределено Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
	ИначеЕсли ОбъектПомощник.ВерсияКорреспондента_2_0_1_6 Тогда
		
		WSПрокси = ОбменДаннымиСервер.ПолучитьWSПрокси_2_0_1_6(ПараметрыПодключения);
		
		Если WSПрокси = Неопределено Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОбъектПомощник.ВерсияКорреспондента_2_1_1_7 Тогда
		
		ПараметрыПриемника = СериализаторXDTO.ПрочитатьXDTO(WSПрокси.GetIBParameters(ОбъектПомощник.ИмяПланаОбмена, "", ""));
		
	ИначеЕсли ОбъектПомощник.ВерсияКорреспондента_2_0_1_6 Тогда
		
		ПараметрыПриемника = СериализаторXDTO.ПрочитатьXDTO(WSПрокси.GetIBParameters(ОбъектПомощник.ИмяПланаОбмена, "", ""));
		
	Иначе
		
		ПараметрыПриемника = ЗначениеИзСтрокиВнутр(WSПрокси.GetIBParameters(ОбъектПомощник.ИмяПланаОбмена, "", ""));
		
	КонецЕсли;
	
	ВерсияКонфигурацииКорреспондента = Неопределено;
	ПараметрыПриемника.Свойство("ВерсияКонфигурации", ВерсияКонфигурацииКорреспондента);
	
	Если Не ПараметрыПриемника.ПланОбменаСуществует Тогда
		
		Сообщение = НСтр("ru = 'Другая программа не предназначена для синхронизации с текущей.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Сообщение,,,, Отказ);
		Возврат;
		
	КонецЕсли;
	
	ОбъектПомощник.КодУзлаКорреспондента = ПараметрыПриемника.КодЭтогоУзла;
	
	ОбъектПомощник.ПрефиксИнформационнойБазыПриемника = ПараметрыПриемника.ПрефиксИнформационнойБазы;
	ОбъектПомощник.ПрефиксИнформационнойБазыПриемникаУстановлен = ЗначениеЗаполнено(ОбъектПомощник.ПрефиксИнформационнойБазыПриемника);
	
	Если Не ОбъектПомощник.ПрефиксИнформационнойБазыПриемникаУстановлен Тогда
		ОбъектПомощник.ПрефиксИнформационнойБазыПриемника = ПараметрыПриемника.ПрефиксИнформационнойБазыПоУмолчанию;
	КонецЕсли;
	
	// Проверка на существование обмена с базой-корреспондентом
	ПроверитьНаличиеСуществующегоОбменаДаннымиСВторойБазой(Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектПомощник.НаименованиеВторойБазы = ПараметрыПриемника.НаименованиеИнформационнойБазы;
	ЗаданоНаименованиеВторойБазы = Не ПустаяСтрока(ОбъектПомощник.НаименованиеВторойБазы);
	
	Если Не ЗаданоНаименованиеВторойБазы Тогда
		
		ОбъектПомощник.НаименованиеВторойБазы = ПараметрыПриемника.НаименованиеИнформационнойБазыПоУмолчанию;
		
	КонецЕсли;
	
	НастройкаОтборовНаУзле    = ОбменДаннымиСервер.НастройкаОтборовНаУзле(ОбъектПомощник.ИмяПланаОбмена, ВерсияКонфигурацииКорреспондента, "");
	
	ЗначенияПоУмолчаниюНаУзле = ОбменДаннымиСервер.ЗначенияПоУмолчаниюНаУзле(ОбъектПомощник.ИмяПланаОбмена, ВерсияКонфигурацииКорреспондента, "");
	
	ОбменДаннымиСервер.ОбщиеДанныеУзлов(ОбъектПомощник.ИмяПланаОбмена, ВерсияКонфигурацииКорреспондента, "");
	
	ЗначенияПоУмолчаниюНаУзлеБазыКорреспондента = ОбменДаннымиСервер.ЗначенияПоУмолчаниюНаУзлеБазыКорреспондента(ОбъектПомощник.ИмяПланаОбмена, ВерсияКонфигурацииКорреспондента, "");
	
	ПредусмотреныЗначенияПоУмолчаниюНаУзлеБазыКорреспондента = ЗначенияПоУмолчаниюНаУзлеБазыКорреспондента.Количество() > 0;
	
	ОписаниеЗначенийПоУмолчаниюБазыКорреспондента = ОбменДаннымиСервер.ОписаниеЗначенийПоУмолчаниюБазыКорреспондента(ОбъектПомощник.ИмяПланаОбмена, ЗначенияПоУмолчаниюНаУзлеБазыКорреспондента, ВерсияКонфигурацииКорреспондента);
	
	НастройкиПараметровУчетаКорреспондентаПоясняющаяНадпись = ОбменДаннымиСервер.ПояснениеДляНастройкиПараметровУчетаБазыКорреспондента(ОбъектПомощник.ИмяПланаОбмена, ВерсияКонфигурацииКорреспондента);
	
	ОбъектПомощник.НаименованиеЭтойБазы = ОбменДаннымиСервер.НаименованиеПредопределенногоУзлаПланаОбмена(ОбъектПомощник.ИмяПланаОбмена);
КонецПроцедуры

&НаСервере
Процедура ПроверитьНаличиеСуществующегоОбменаДаннымиСВторойБазой(Отказ)
	
	КодУзла = ?(ПустаяСтрока(ОбъектПомощник.КодУзлаКорреспондента),
					ОбменДаннымиСервер.КодУзлаПланаОбменаСтрокой(ОбъектПомощник.ПрефиксИнформационнойБазыПриемника),
					ОбъектПомощник.КодУзлаКорреспондента);
	
	Если Не ПустаяСтрока(КодУзла)
		И Не ПланыОбмена[ОбъектПомощник.ИмяПланаОбмена].НайтиПоКоду(КодУзла).Пустая() Тогда
		
		Сообщение = НСтр("ru = 'Синхронизация данных уже настроена в системе. Используйте существующую синхронизацию.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Сообщение,,,, Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьФормуНастройкиУзлов()
	
		ПараметрыПодключения = ОбменДаннымиСервер.СтруктураПараметровWS();
		ЗаполнитьЗначенияСвойств(ПараметрыПодключения, ОбъектПомощник);
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ВерсияКорреспондента", ВерсияКонфигурацииКорреспондента);
		ПараметрыФормы.Вставить("ПараметрыПодключения", ПараметрыПодключения);
		ПараметрыФормы.Вставить("Настройки", КонтекстФормыНастройкиУзлов);
		ПараметрыФормы.Вставить("ПолучитьЗначенияПоУмолчанию");
		
		ИмяФормыНастройки = "ПланОбмена.[ИмяПланаОбмена].Форма.[ФормаНастройкиУзлов]";
		ИмяФормыНастройки = СтрЗаменить(ИмяФормыНастройки, "[ИмяПланаОбмена]", ОбъектПомощник.ИмяПланаОбмена);
		ИмяФормыНастройки = СтрЗаменить(ИмяФормыНастройки, "[ФормаНастройкиУзлов]", "ФормаНастройкиУзлов");
		
		ФормаНастройки = ПолучитьФорму(ИмяФормыНастройки, ПараметрыФормы, ЭтаФорма);
		
		КонтекстФормыНастройкиУзлов    = ФормаНастройки.Контекст;
		ОписаниеНастроекВыгрузкиДанных = ФормаНастройки.ОписаниеКонтекста;
		
		Элементы.Главная.ТекущаяСтраница = Элементы.НачальноеЗаполнение;
		Элементы.КнопкиУправления.ТекущаяСтраница = Элементы.КнопкиНачальноеЗаполнение;
		
КонецПроцедуры // ПолучитьФормуНастройкиУзлов()

&НаКлиенте
Процедура ИзменитьПравилаНачальногоЗаполнения(Команда)
	
	ПараметрыПодключения = ОбменДаннымиСервер.СтруктураПараметровWS();
	ЗаполнитьЗначенияСвойств(ПараметрыПодключения, ОбъектПомощник);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВерсияКорреспондента", ВерсияКонфигурацииКорреспондента);
	ПараметрыФормы.Вставить("ПараметрыПодключения", ПараметрыПодключения);
	ПараметрыФормы.Вставить("Настройки", КонтекстФормыНастройкиУзлов);
	
	ИмяФормыНастройки = "ПланОбмена.[ИмяПланаОбмена].Форма.[ФормаНастройкиУзлов]";
	ИмяФормыНастройки = СтрЗаменить(ИмяФормыНастройки, "[ИмяПланаОбмена]", ОбъектПомощник.ИмяПланаОбмена);
	ИмяФормыНастройки = СтрЗаменить(ИмяФормыНастройки, "[ФормаНастройкиУзлов]", "ФормаНастройкиУзлов");
	
	ФормаНастройки = ОткрытьФормуМодально(ИмяФормыНастройки, ПараметрыФормы, ЭтаФорма);
	
	Если ФормаНастройки <> Неопределено Тогда
		
		КонтекстФормыНастройкиУзлов    = ФормаНастройки;
		ОписаниеНастроекВыгрузкиДанных = ФормаНастройки.ОписаниеКонтекста;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьНовыйОбменДаннымиНаСервереЧерезВебСервис(Отказ)
	
	ЗначенияПоУмолчаниюНаУзле = ОбменДаннымиСервер.ЗначенияПоУмолчаниюНаУзле(ОбъектПомощник.ИмяПланаОбмена, ВерсияКонфигурацииКорреспондента, "");
	ЗначенияПоУмолчаниюНаУзлеБазыКорреспондента = ОбменДаннымиСервер.ЗначенияПоУмолчаниюНаУзлеБазыКорреспондента(ОбъектПомощник.ИмяПланаОбмена, ВерсияКонфигурацииКорреспондента, "");
	
	ОбработкаОбъект = РеквизитФормыВЗначение("ОбъектПомощник");
	
	КонтекстФормыНастройкиУзлов.Вставить("ЗначенияПоУмолчаниюНаУзле", ЗначенияПоУмолчаниюНаУзле);
	КонтекстФормыНастройкиУзлов.Вставить("ЗначенияПоУмолчаниюНаУзлеБазыКорреспондента", ЗначенияПоУмолчаниюНаУзлеБазыКорреспондента);
	
	ОбработкаОбъект.ВыполнитьДействияПоНастройкеНовогоОбменаДаннымиЧерезВебСервисВДвухБазах(Отказ,
																		КонтекстФормыНастройкиУзлов,
																		Ложь,
																		"");
	
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "ОбъектПомощник");
	
КонецПроцедуры

&НаКлиенте
Процедура ОжиданиеОкончанияПервоночальногоЗаполнения()
	
	Если ПроверитьФЗНаСервере(УникальныйИдентификаторФЗ) Тогда
		ПодключитьОбработчикОжидания("ОжиданиеОкончанияПервоночальногоЗаполнения", 2, Истина);
		Возврат;
	КонецЕсли;
	
	Данные = ПолучитьИзВременногоХранилища(Адрес);
	
	ПервоночальногоЗаполнениеЗавершено(Данные);
	
КонецПроцедуры // ОжиданиеРегистрацииАбанента()

&НаКлиенте
Процедура ПервоночальногоЗаполнениеЗавершено(Отказ)

	Если Отказ Тогда
		
		Элементы.Главная.ТекущаяСтраница = Элементы.Готово;
		Элементы.КнопкиУправления.ТекущаяСтраница = Элементы.КнопкиЗакрыть;
		
	Иначе
		
	Элементы.Главная.ТекущаяСтраница = Элементы.Готово;
	Элементы.КнопкиУправления.ТекущаяСтраница = Элементы.КнопкиЗакрыть;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СогласенПриИзменении(Элемент)
	Элементы.Зарегистрироваться.Доступность = Истина;
КонецПроцедуры

//КонецОбласти
