
&НаКлиенте
Перем СписокРазделовДляРасчетаКоличества;

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЕстьПравоОбработкиЭД        = ЭлектронныеДокументыСлужебныйВызовСервера.ЕстьПравоОбработкиЭД(Ложь);
	ИспользоватьОзнакомлениеСЭД = Константы.ИспользоватьОзнакомлениеСЭлектроннымиДокументами.Получить();
	
	ИспользоватьЭП = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьЗначениеФункциональнойОпции(
		"ИспользоватьЭлектронныеЦифровыеПодписи");
	
	ИнициализироватьДерево();
	
	Если НЕ ЭлектронныеДокументыСлужебный.НемедленнаяОтправкаЭД() Тогда
		
		// Входящие.
		Элементы.ВходящиеУтвердитьПодписатьИОтправить.Заголовок = НСтр("ru='Утвердить и подписать'");
		Команды.УтвердитьПодписатьИОтправить.Подсказка = НСтр("ru='Утвердить подписать и подготовить к отправке
			|выделенные электронные документы'");
		
		// Входящие.Подписать.
		Элементы.ВходящиеПодписать.Заголовок = НСтр("ru='Подписать'");
		Команды.Подписать.Подсказка = НСтр("ru='Подписать и подготовить к отправке
			|выделенные электронные документы'");
		
		// Исходящие.
		Элементы.ИсходящиеСформироватьПодписатьИОтправить.Заголовок = НСтр("ru='Подписать'");
		
		// Исходящие.Создать.
		Элементы.СформироватьПодписатьИОтправить.Заголовок = НСтр("ru='Создать и подписать'");
		Команды.СформироватьПодписатьИОтправить.Подсказка = НСтр("ru='Создать, подписать и подготовить к отправке
			|выделенные электронные документы'");
		
		// Исходящие.Подписать.
		Элементы.ПодписатьИсхПодписать.Заголовок = НСтр("ru='Подписать'");
		
		Если Не ИспользоватьЭП Тогда
			
			// Входящие.
			Элементы.ВходящиеУтвердитьПодписатьИОтправить.Заголовок = НСтр("ru='Утвердить'");
			Команды.УтвердитьПодписатьИОтправить.Подсказка = НСтр("ru='Утвердить и подготовить к отправке
				|выделенные электронные документы'");
			
			// Исходящие. Создать.
			Элементы.ИсходящиеСформироватьПодписатьИОтправить.Заголовок = НСтр("ru='Создать'");
			
		КонецЕсли;
		
	КонецЕсли;

	Элементы.Страницы.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	
	СформироватьТаблицуБыстрогоОтбора();
	
	Отборы = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(ИмяФормы, "Отборы", Новый ТаблицаЗначений);
	Для Каждого ЭлементОтбора Из Отборы Цикл
		Для Каждого ЭлементКоллекции Из БыстрыеОтборы Цикл
			Если ЭлементОтбора.Параметр = ЭлементКоллекции.Параметр Тогда
				ЗаполнитьЗначенияСвойств(ЭлементКоллекции, ЭлементОтбора);
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	УстановленыБыстрыеОтборы = Ложь;
	Для Каждого Строка Из БыстрыеОтборы Цикл
		Если ЗначениеЗаполнено(Строка.Значение) Тогда
			УстановленыБыстрыеОтборы = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Элементы.СброситьОтбор.Доступность   = УстановленыБыстрыеОтборы;
	Элементы.БыстрыеОтборы.Видимость     = УстановленыБыстрыеОтборы;
	Элементы.ЗаголовокОтбора.Заголовок   = ЗаголовокБыстрыхОтборов(УстановленыБыстрыеОтборы);
	
	// закешируем запросы динамических списков
	ЗапросыДинамическихСписков = Новый Структура;
	ЗапросыДинамическихСписков.Вставить(Элементы.Входящие.Имя,    Входящие.ТекстЗапроса);
	ЗапросыДинамическихСписков.Вставить(Элементы.Исходящие.Имя,   Исходящие.ТекстЗапроса);
	ЗапросыДинамическихСписков.Вставить(Элементы.Создать.Имя,     Создать.ТекстЗапроса);
	ЗапросыДинамическихСписков.Вставить(Элементы.ПакетыЭД.Имя,    ПакетыЭД.ТекстЗапроса);
	ЗапросыДинамическихСписков.Вставить(Элементы.Завершено.Имя,   Завершено.ТекстЗапроса);
	ЗапросыДинамическихСписков.Вставить(Элементы.Приглашения.Имя, Приглашения.ТекстЗапроса);
	АдресЗапросовДинамическихСписков = ПоместитьВоВременноеХранилище(ЗапросыДинамическихСписков, ЭтаФорма.УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	Если ИмяСобытия = "ОбновитьСостояниеЭД" Тогда
		ОбновитьДанныеДереваНаКлиенте();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ИмяТекущейСтраницы = Элементы.Страницы.ТекущаяСтраница.Имя;
	ЭлектронныеДокументыСлужебныйКлиент.ЗаполнитьДанныеСлужбыПоддержки(ТелефонСлужбыПоддержки, АдресЭлектроннойПочтыСлужбыПоддержки);
	ОбновитьДанныеДерева();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	СохранитьОтборы(ИмяФормы, "Отборы", БыстрыеОтборы);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаголовокОтбораНажатие(Элемент)
	
	ПоказатьБыстрыйПоиск = Не ПоказатьБыстрыйПоиск;
	ПоказатьСкрытьБыстрыйПоиск();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ Входящие

&НаКлиенте
Процедура ВходящиеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЭлектронныеДокументыСлужебныйКлиент.ОткрытьЭДДляПросмотра(Элемент.ТекущиеДанные.Ссылка);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ Создать

&НаКлиенте
Процедура СоздатьВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОткрытьЗначение(Элемент.ТекущиеДанные.Ссылка);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ Исходящие

&НаКлиенте
Процедура ИсходящиеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЭлектронныеДокументыСлужебныйКлиент.ОткрытьЭДДляПросмотра(Элемент.ТекущиеДанные.Ссылка);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ Завершено

&НаКлиенте
Процедура ЗавершеноВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЭлектронныеДокументыСлужебныйКлиент.ОткрытьЭДДляПросмотра(Элемент.ТекущиеДанные.Ссылка);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ БыстрыеОтборы

&НаКлиенте
Процедура БыстрыеОтборыЗначениеПриИзменении(Элемент)
	
	Если Элемент.Родитель.ТекущиеДанные.Тип = "Число" Тогда
		ВведеноЧисло = Истина;
	КонецЕсли;
	
	ПриИзмененииОтбора();
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыеОтборыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если Элемент.ТекущиеДанные.Значение = Неопределено Тогда
		Элемент.ТекущиеДанные.Значение = 0;
	Иначе
		ВведеноЧисло = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыеОтборыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НЕ ВведеноЧисло И Элемент.ТекущиеДанные.Тип = "Число" Тогда
		Элемент.ТекущиеДанные.Значение = Неопределено;
	КонецЕсли;
	
	ВведеноЧисло = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыеОтборыЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Элементы.БыстрыеОтборы.ТекущиеДанные.Параметр = "ВидЭД" Тогда
		ДанныеВыбора = СписокАктуальныхВидовЭД();
		СтандартнаяОбработка = Ложь;
	КонецЕсли
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ ДеревоДействий

&НаКлиенте
Процедура ДеревоДействийПриАктивизацииСтроки(Элемент)
	
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	ТекущийРаздел = Элемент.ТекущиеДанные.Значение;
	ИмяСписка     = ИмяДинамическогоСписка(ТекущийРаздел);
	
	Если ТекущийРаздел = "Сформировать" Тогда
		ОбновитьДанныеДереваНаКлиенте();
	КонецЕсли;
	
	// установим отбор на динамический список
	ОбновитьДинамическиеСписки();
	
	// сменим страницу командной панели
	НоваяСтр = Элементы["СтраницаКоманднойПанели"+ТекущийРаздел];
	Если Элементы.СтраницыКоманднойПанели.ТекущаяСтраница <> НоваяСтр Тогда
		Элементы.СтраницыКоманднойПанели.ТекущаяСтраница = НоваяСтр
	КонецЕсли;
	
	// сменим доступность некоторых элементов
	УстановитьДоступностьЭлементов();
	
	// сменим страницу панели динамических списков
	ИмяТекущейСтраницы = СтрЗаменить(Элементы.Страницы.ТекущаяСтраница.Имя, "Страница", "");
	ИмяНовойСтраницы   = ИмяСписка;
	Если ИмяТекущейСтраницы <> ИмяНовойСтраницы Тогда
		Элементы.Страницы.ТекущаяСтраница = Элементы["Страница" + ИмяНовойСтраницы];
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыеОтборыЗначениеОчистка(Элемент, СтандартнаяОбработка)
	
	НазваниеСправочникаКонтрагенты = ИмяПрикладногоСправочника("Контрагенты");
	Если Не ЗначениеЗаполнено(НазваниеСправочникаКонтрагенты) Тогда
		НазваниеСправочникаКонтрагенты = "Контрагенты";
	КонецЕсли;
	
	НазваниеСправочникаОрганизации = ИмяПрикладногоСправочника("Организации");
	Если Не ЗначениеЗаполнено(НазваниеСправочникаОрганизации) Тогда
		НазваниеСправочникаОрганизации = "Организации";
	КонецЕсли;
	
	Строка = Элементы.БыстрыеОтборы.ТекущиеДанные;
	Если Строка.Тип = "Строка" Тогда
		Строка.Значение = "";
	ИначеЕсли Строка.Тип = "Дата" Тогда
		Строка.Значение = Дата(1, 1, 1);
	ИначеЕсли Строка.Тип = "Число" Тогда
		Строка.Значение = Неопределено;
	ИначеЕсли Строка.Тип = "ПеречислениеСсылка.ВидыЭД" Тогда
		Строка.Значение = ПредопределенноеЗначение("Перечисление.ВидыЭД.ПустаяСсылка");
	ИначеЕсли Строка.Тип = "СправочникСсылка."+ НазваниеСправочникаКонтрагенты Тогда
		Строка.Значение = ПредопределенноеЗначение("Справочник."+ НазваниеСправочникаКонтрагенты +".ПустаяСсылка");
	ИначеЕсли Строка.Тип = "СправочникСсылка." + НазваниеСправочникаОрганизации Тогда
		Строка.Значение = ПредопределенноеЗначение("Справочник." + НазваниеСправочникаОрганизации + ".ПустаяСсылка");
	ИначеЕсли Строка.Тип = "СправочникСсылка.Пользователи" Тогда
		Строка.Значение = ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка");
	ИначеЕсли Строка.Тип = "ПеречислениеСсылка.НаправленияЭД" Тогда
		Строка.Значение = ПредопределенноеЗначение("Перечисление.НаправленияЭД.ПустаяСсылка");
	КонецЕсли;
	Элементы.БыстрыеОтборы.ЗакончитьРедактированиеСтроки(Ложь);
	
	ПриИзмененииОтбора();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ Приглашения

&НаКлиенте
Процедура ПриглашенияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("НастройкаЭДО", ВыбраннаяСтрока);
	ПараметрыФормы.Вставить("ФормаОткрытаИзНастройкиЭДО", Ложь);
	ОткрытьФорму("Справочник.СоглашенияОбИспользованииЭД.Форма.ФормаПриглашения", ПараметрыФормы);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ ПакетыЭД

&НаКлиенте
Процедура ПакетыЭДВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьЗначение(Элемент.ТекущиеДанные.Ссылка);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура Обновить(Команда)
	
	ОбновитьДанныеДереваНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьИПолучитьЭД(Команда)
	
	ЭлектронныеДокументыСлужебныйКлиент.ОтправитьПолучитьЭлектронныеДокументы();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусОтмененНеотправленныеПакеты(Команда)
	
	УстановитьСтатусОтменен(МассивВыбранныхСсылок());
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусОтмененНераспакованныеПакеты(Команда)
	
	УстановитьСтатусОтменен(МассивВыбранныхСсылок());
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусОтмененНеизвестныеПакеты(Команда)
	
	УстановитьСтатусОтменен(Элементы[ИмяДинамическогоСписка(ТекущийРаздел)].ВыделенныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура Распаковать(Команда)
	
	ЭлектронныеДокументыСлужебныйКлиент.РаспаковатьМассивПакетовЭД(МассивВыбранныхСсылок());
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьПодписатьИОтправить(Команда)
	
	ЭлектронныеДокументыСлужебныйКлиент.ОбработатьЭД(МассивВыбранныхСсылок(), "СформироватьУтвердитьПодписатьОтправить");
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьЭД(Команда)
	
	ЭлектронныеДокументыСлужебныйКлиент.ОбработатьЭД(МассивВыбранныхСсылок(), "СформироватьПоказать");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьПринудительно(Команда)
	
	МассивСсылок = МассивСсылокНаВладельцевЭД(МассивВыбранныхСсылок());
	ЭлектронныеДокументыКлиент.ЗакрытьПринудительноЭДО(МассивСсылок);
	
КонецПроцедуры

&НаКлиенте
Процедура УтвердитьЭД(Команда)
	
	ЭлектронныеДокументыСлужебныйКлиент.ОбработатьЭД(МассивВыбранныхСсылок(), "УтвердитьОтправить");
	Оповестить("ОбновитьСостояниеЭД");
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПодписать(Команда)
	
	МассивСсылок = МассивВыбранныхСсылок();
	ПодписатьИОтправить(МассивСсылок);
	
КонецПроцедуры

&НаКлиенте
Процедура УтвердитьПодписатьИОтправить(Команда)
	
	ПодписатьИОтправить(МассивВыбранныхСсылок());
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПакеты(Команда)
	
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		Если НЕ ЭлектронныеДокументыПереопределяемый.ЕстьПравоОбработкиЭД() Тогда
			ЭлектронныеДокументыСлужебныйКлиент.СообщитьПользователюОНарушенииПравДоступа();
			Возврат;
		КонецЕсли;
		Если НЕ ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьЗначениеФункциональнойОпции("ИспользоватьОбменЭД") Тогда
			ТекстСообщения = ЭлектронныеДокументыСлужебныйВызовСервера.ТекстСообщенияОНеобходимостиНастройкиСистемы(
																										"РаботаСЭД");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Возврат;
		КонецЕсли;
	#КонецЕсли
	
	СоотвСоглашенийИСтруктурСертификатов = ЭлектронныеДокументыСлужебныйКлиент.СоотвСоглашенийИСтруктурСертификатовДляАвторизации();
	
	КоличествоОтправленных = ЭлектронныеДокументыСлужебныйВызовСервера.ОтправкаПакетовЭД(
													МассивВыбранныхСсылок(),
													СоотвСоглашенийИСтруктурСертификатов);

	ШаблонОповещения = НСтр("ru = 'Отправлено пакетов: (%1).'");
	ТекстОповещения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОповещения, КоличествоОтправленных);
	
	Оповестить("ОбновитьСостояниеЭД");
		
	ЗаголовокОповещения = НСтр("ru = 'Отправка электронных документов'");
	ПоказатьОповещениеПользователя(ЗаголовокОповещения, , ТекстОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура СброситьОтбор(Команда)
	
	НазваниеСправочникаКонтрагенты = ИмяПрикладногоСправочника("Контрагенты");
	Если Не ЗначениеЗаполнено(НазваниеСправочникаКонтрагенты) Тогда
		НазваниеСправочникаКонтрагенты = "Контрагенты";
	КонецЕсли;

	Для Каждого Строка Из БыстрыеОтборы Цикл
		Если Строка.Тип = "Строка" Тогда
			Строка.Значение = "";
		ИначеЕсли Строка.Тип = "Дата" Тогда
			Строка.Значение = Дата(1,1,1);
		ИначеЕсли Строка.Тип = "Число" Тогда
			Строка.Значение = Неопределено;
		ИначеЕсли Строка.Тип = "ПеречислениеСсылка.ВидыЭД" Тогда
			Строка.Значение = ПредопределенноеЗначение("Перечисление.ВидыЭД.ПустаяСсылка");
		ИначеЕсли Строка.Тип = "СправочникСсылка." + НазваниеСправочникаКонтрагенты Тогда
			Строка.Значение = ПредопределенноеЗначение("Справочник." + НазваниеСправочникаКонтрагенты + ".ПустаяСсылка");
		ИначеЕсли Строка.Тип = "СправочникСсылка.Организации" Тогда
			Строка.Значение = ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка");
		ИначеЕсли Строка.Тип = "СправочникСсылка.Пользователи" Тогда
			Строка.Значение = ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка");
		ИначеЕсли Строка.Тип = "ПеречислениеСсылка.НаправленияЭД" Тогда
			Строка.Значение = ПредопределенноеЗначение("Перечисление.НаправленияЭД.ПустаяСсылка");
		КонецЕсли;
	КонецЦикла;
	
	ОбновитьДанныеДереваНаКлиенте();
	УстановитьДоступностьКомандыСбросаОтбора(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПриглашения(Команда)
	
	ОчиститьСообщения();
	
	МассивНастроекЭДО = Элементы[ИмяДинамическогоСписка(ТекущийРаздел)].ВыделенныеСтроки;
	МассивПрофилейНастроекЭДО = ПрофилиНастроекЭДО(МассивНастроекЭДО);
	
	Если Не ЗначениеЗаполнено(МассивПрофилейНастроекЭДО) Тогда
		Возврат;
	КонецЕсли;
	
	СоответствиеПрофилейНастроекЭДОМаркерам = ЭлектронныеДокументыСлужебныйКлиент.СоотвСоглашенийИСтруктурСертификатовДляАвторизации(
		МассивПрофилейНастроекЭДО);
	Если ЗначениеЗаполнено(СоответствиеПрофилейНастроекЭДОМаркерам) Тогда
		ТекстЗаголовка = НСтр("ru = 'Отправка приглашений получателям'");
		
		ОтправленоПриглашений = 0;
		ОтправитьПриглашенияСервер(ОтправленоПриглашений, СоответствиеПрофилейНастроекЭДОМаркерам);
		
		ШаблонСообщения = НСтр("ru = 'Отправлено приглашений: %1'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ОтправленоПриглашений);
		
		ПоказатьОповещениеПользователя(ТекстЗаголовка, , ТекстСообщения);
		
		ОбновитьДанныеДереваНаКлиенте();
		ОбновитьДинамическиеСписки();
	Иначе
		ТекстОшибки = НСтр("ru = 'При отправке приглашений возникли ошибки.
			|Необходимо выполнить тест настроек ЭДО с указанными контрагентами.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПринятьПриглашения(Команда)
	
	ОчиститьСообщения();
	
	МассивНастроекЭДО = Элементы[ИмяДинамическогоСписка(ТекущийРаздел)].ВыделенныеСтроки;
	МассивПрофилейНастроекЭДО = ПрофилиНастроекЭДО(МассивНастроекЭДО);
	
	Если Не ЗначениеЗаполнено(МассивПрофилейНастроекЭДО) Тогда
		Возврат;
	КонецЕсли;
	
	СоответствиеПрофилейНастроекЭДОМаркерам = ЭлектронныеДокументыСлужебныйКлиент.СоотвСоглашенийИСтруктурСертификатовДляАвторизации(
		МассивПрофилейНастроекЭДО);
	Если ЗначениеЗаполнено(СоответствиеПрофилейНастроекЭДОМаркерам) Тогда
		ТекстЗаголовка = НСтр("ru = 'Принимаются приглашения'");
		
		КоличествоПринятыхПриглашений = 0;
		ПринятьОтклонитьКонтактЧерезОператораЭДОНаСервере(КоличествоПринятыхПриглашений, СоответствиеПрофилейНастроекЭДОМаркерам, Истина);
		
		ШаблонСообщения = НСтр("ru = 'Принято приглашений: %1'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, КоличествоПринятыхПриглашений);
		
		ПоказатьОповещениеПользователя(ТекстЗаголовка, , ТекстСообщения);
		
		ОбновитьДанныеДереваНаКлиенте();
		ОбновитьДинамическиеСписки();
	Иначе
		ТекстОшибки = НСтр("ru = 'При принятии приглашений возникли ошибки.
			|Необходимо выполнить тест настроек ЭДО с указанными контрагентами.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтклонитьПриглашения(Команда)
	
	ОчиститьСообщения();
	
	МассивНастроекЭДО = Элементы[ИмяДинамическогоСписка(ТекущийРаздел)].ВыделенныеСтроки;
	МассивПрофилейНастроекЭДО = ПрофилиНастроекЭДО(МассивНастроекЭДО);
	
	Если Не ЗначениеЗаполнено(МассивПрофилейНастроекЭДО) Тогда
		Возврат;
	КонецЕсли;
	
	СоответствиеПрофилейНастроекЭДОМаркерам = ЭлектронныеДокументыСлужебныйКлиент.СоотвСоглашенийИСтруктурСертификатовДляАвторизации(
		МассивПрофилейНастроекЭДО);
	Если ЗначениеЗаполнено(СоответствиеПрофилейНастроекЭДОМаркерам) Тогда
		ТекстЗаголовка = НСтр("ru = 'Отклоняются приглашения'");
		
		КоличествоОтклоненныхПриглашений = 0;
		ПринятьОтклонитьКонтактЧерезОператораЭДОНаСервере(КоличествоОтклоненныхПриглашений, СоответствиеПрофилейНастроекЭДОМаркерам, Ложь);
		
		ШаблонСообщения = НСтр("ru = 'Отклонено приглашений: %1'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, КоличествоОтклоненныхПриглашений);
		
		ПоказатьОповещениеПользователя(ТекстЗаголовка, , ТекстСообщения);
		
		ОбновитьДанныеДереваНаКлиенте();
		ОбновитьДинамическиеСписки();
	Иначе
		ТекстОшибки = НСтр("ru = 'При отклонении приглашений возникли ошибки.
			|Необходимо выполнить тест настроек ЭДО с указанными контрагентами.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройкиЭДО(Команда)
	ЭлектронныеДокументыКлиент.ОткрытьФормуНастроекЭДОСКонтрагентами();
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьАрхивЭДО(Команда)
	ОткрытьФорму("Обработка.ЭлектронныеДокументы.Форма.АрхивЭлектронныхДокументов");
КонецПроцедуры

&НаКлиенте
Процедура Аннулировать(Команда)
	
	ОбработатьПредложениеОбАннулировании(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтклонитьАннулирование(Команда)
	
	ОбработатьПредложениеОбАннулировании(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСсылкуНаСтатьюПо1СБухфон(Команда)
	ЭлектронныеДокументыСлужебныйКлиент.ОткрытьИнструкциюПо1СБухфон();
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВАрхив(Команда)
	
	ОтправитьВАрхивНаСервере(МассивВыбранныхСсылок());
	Оповестить("ОбновитьСостояниеЭД");
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПроизвольныйДокумент(Команда)
	
	ОткрытьФорму("Документ.ЭлектронныйДокументИсходящий.Форма.ФормаПросмотраЭД",, ЭтаФорма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервереБезКонтекста
Процедура ОтправитьВАрхивНаСервере(ЭДСсылки)
	
	УстановитьПривилегированныйРежим(Истина);
	Для Каждого ЭДСсылка Из ЭДСсылки Цикл
		ЭДОбъект = ЭДСсылка.ПолучитьОбъект();
		ЭДОбъект.ОбменДанными.Загрузка = Истина;
		ЭДОбъект.НаОзнакомлении = Ложь;
		ЭДОбъект.Записать();
	КонецЦикла;
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьПредложениеОбАннулировании(ОтклонитьАннулирование)
	
	МассивСсылок = МассивВыбранныхСсылок();
	Для Каждого ЭД Из МассивСсылок Цикл
		ЭлектронныеДокументыСлужебныйКлиент.ОбработатьПредложениеОбАннулировании(ЭД, ОтклонитьАннулирование);
	КонецЦикла;
	Если МассивСсылок.Количество() > 0 Тогда
		ОбновитьДанныеДереваНаКлиенте();
		ОбновитьДинамическиеСписки();
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция МассивСсылокНаВладельцевЭД(Знач МассивЭД)
	
	МассивСсылок = Новый Массив;
	Для Каждого Запись Из МассивЭД Цикл
		Если ТипЗнч(Запись) = Тип("СправочникСсылка.ЭДПрисоединенныеФайлы") Тогда
			МассивСсылок.Добавить(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Запись, "ВладелецФайла"));
		Иначе
			МассивСсылок.Добавить(Запись.Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивСсылок;

КонецФункции

// ОТБОРЫ

&НаКлиенте
Процедура ПриИзмененииОтбора()
	
	УстановитьДоступностьКомандыСбросаОтбора(Ложь);
	
	Для Каждого Строка ИЗ БыстрыеОтборы Цикл
		Если ЗначениеЗаполнено(Строка.Значение) ИЛИ ТипЗнч(Строка.Значение) = Тип("Число") Тогда
			УстановитьДоступностьКомандыСбросаОтбора(Истина);
			Прервать;
		КонецЕсли
	КонецЦикла;
	
	ОбновитьДанныеДереваНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКомандыСбросаОтбора(Доступность)
	
	Элементы.СброситьОтбор.Доступность = Доступность;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СохранитьОтборы(Знач ИмяФормы, Знач Ключ, Знач Значение)
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(ИмяФормы, Ключ, Значение.Выгрузить());
КонецПроцедуры

&НаКлиенте
Процедура УстановитьБыстрыеОтборыДинамическихСписковНаКлиенте(ТаблицаБыстрыхОтборов)
	
	ИмяСписка = ИмяДинамическогоСписка(ТекущийРаздел);
	УстановитьБыстрыйОтбор(ИмяСписка, ЭтаФорма[ИмяСписка].Отбор, ТаблицаБыстрыхОтборов);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьБыстрыйОтбор(ИмяСписка, ОбъектОтбор, ТаблицаБыстрыхОтборов)
	
	// Динамические списки и их поля, по которым можно установить отбор
	// если ограничение не указано, значит ограничений нет
	СоответствиеПолей = Новый Структура;
	//                        ("ИмяСписка",   "Поля.На.Которые.Можно.Установить.Отбор");
	СоответствиеПолей.Вставить("ПакетыЭД",    "Организация.Контрагент.Дата");
	СоответствиеПолей.Вставить("Приглашения", "Организация.Контрагент");
	
	ПоляДляОтбора = Неопределено;
	СоответствиеПолей.Свойство(ИмяСписка, ПоляДляОтбора);

	МассивИндексов = Новый Массив;
	МассивИндексов.Добавить(0); // Организация
	МассивИндексов.Добавить(1); // Контрагент
	МассивИндексов.Добавить(6); // ВидЭД
	МассивИндексов.Добавить(8); // Ответственный
	
	Для Каждого Индекс Из МассивИндексов Цикл
		Если ЗначениеЗаполнено(ТаблицаБыстрыхОтборов[Индекс].Значение) Тогда
			Если ПоляДляОтбора = Неопределено Или Найти(ПоляДляОтбора, ТаблицаБыстрыхОтборов[Индекс].Параметр) Тогда
				ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
					ОбъектОтбор,
					ТаблицаБыстрыхОтборов[Индекс].Параметр,
					ТаблицаБыстрыхОтборов[Индекс].Значение);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ПоляДляОтбора = Неопределено Или Найти(ПоляДляОтбора, ТаблицаБыстрыхОтборов[2].Параметр) Тогда
		
		ДатаС  = ТаблицаБыстрыхОтборов[2].Значение;
		ДатаПО = ТаблицаБыстрыхОтборов[3].Значение;
		
		Если ЗначениеЗаполнено(ДатаС) Тогда
			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
				ОбъектОтбор,
				"Дата",
				ВидСравненияКомпоновкиДанных.БольшеИлиРавно,
				ДатаС);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДатаПО) Тогда
			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
				ОбъектОтбор,
				"Дата",
				ВидСравненияКомпоновкиДанных.МеньшеИлиРавно,
				ДатаПО);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПоляДляОтбора = Неопределено Или Найти(ПоляДляОтбора, ТаблицаБыстрыхОтборов[4].Параметр) Тогда
		
		СуммаС  = ТаблицаБыстрыхОтборов[4].Значение;
		СуммаПО = ТаблицаБыстрыхОтборов[5].Значение;
		
		Если ЗначениеЗаполнено(СуммаС) Тогда
			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
				ОбъектОтбор,
				"СуммаДокумента",
				ВидСравненияКомпоновкиДанных.БольшеИлиРавно,
				СуммаС);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СуммаПО) Тогда
			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
				ОбъектОтбор,
				"СуммаДокумента",
				ВидСравненияКомпоновкиДанных.МеньшеИлиРавно,
				СуммаПО);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПоляДляОтбора = Неопределено Или Найти(ПоляДляОтбора, ТаблицаБыстрыхОтборов[7].Параметр) Тогда
		
		// дополнительная информация
		ДопИнформация = ТаблицаБыстрыхОтборов[7].Значение;
		Если ЗначениеЗаполнено(ДопИнформация) Тогда
			
			ГруппаИли = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
				ОбъектОтбор.Элементы,
				"Доп. информация",
				ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИЛИ);
			
			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
				ГруппаИли,
				"ДополнительнаяИнформация",
				ВидСравненияКомпоновкиДанных.Содержит,
				ДопИнформация);
			
			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
				ГруппаИли,
				"ПричинаОтклонения",
				ВидСравненияКомпоновкиДанных.Содержит,
				ДопИнформация);
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СписокСостоянийЭДВРаботе()
	
	МассивВозврата = Новый Массив;
	МассивВозврата.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияВерсийЭД.ИзвещениеНаПодписи"));
	МассивВозврата.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияВерсийЭД.НаПодписи"));
	МассивВозврата.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияВерсийЭД.НаУтверждении"));
	МассивВозврата.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияВерсийЭД.НеПолучен"));
	МассивВозврата.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияВерсийЭД.ОжидаетсяИзвещение"));
	МассивВозврата.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияВерсийЭД.ОжидаетсяИзвещениеОПолучении"));
	МассивВозврата.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияВерсийЭД.ОжидаетсяИсполнение"));
	МассивВозврата.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияВерсийЭД.ОжидаетсяКорректировка"));
	МассивВозврата.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияВерсийЭД.ОжидаетсяОтправка"));
	МассивВозврата.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияВерсийЭД.ОжидаетсяОтправкаИзвещения"));
	МассивВозврата.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияВерсийЭД.ОжидаетсяОтправкаПолучателю"));
	МассивВозврата.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияВерсийЭД.ОжидаетсяПередачаОператору"));
	МассивВозврата.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияВерсийЭД.ОжидаетсяПодтверждение"));
	МассивВозврата.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияВерсийЭД.ОжидаетсяПодтверждениеОператора"));
	МассивВозврата.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияВерсийЭД.ОшибкаПередачи"));
	МассивВозврата.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияВерсийЭД.ПлатежИсполнен"));
	МассивВозврата.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияВерсийЭД.ТребуетсяАннулировать"));
	МассивВозврата.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияВерсийЭД.ТребуетсяУточнитьДокумент"));
	МассивВозврата.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияВерсийЭД.ТребуетсяПодтверждение"));
	МассивВозврата.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияВерсийЭД.СформированУПД"));
	МассивВозврата.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияВерсийЭД.СформированУКД"));
	МассивВозврата.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияВерсийЭД.ПолученУПД"));
	МассивВозврата.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияВерсийЭД.ПолученУКД"));
	
	Возврат МассивВозврата
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтборПоРазделу(РазделДерева, ОбъектОтбора)
	
	ОбъектОтбора.Элементы.Очистить();
	
	// отборы по разделам Входящие, Исходящие
	Если Найти("ВходящиеИсходящие", РазделДерева) Тогда
		
		// общий отбор только по основным (не служебным) ЭД
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
			ОбъектОтбора,
			"ТипЭлементаВерсииЭД",
			ЭлектронныеДокументыКлиентСервер.ОсновныеТипыЭД(),
			ВидСравненияКомпоновкиДанных.ВСписке);
			
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
			ОбъектОтбора,
			"СостояниеЭДО",
			СписокСостоянийЭДВРаботе(),
			ВидСравненияКомпоновкиДанных.ВСписке);
			
	КонецЕсли;
	
	Если Найти("ПодписатьИсх", РазделДерева) Тогда
		
		// Группа: Вариант1 ИЛИ Вариант2
		
		ГруппаИЛИ = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
			ОбъектОтбора.Элементы, Неопределено, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
			
		ГруппаВариант1 = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
			ГруппаИЛИ, Неопределено, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
			
		ГруппаВариант2 = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
			ГруппаИЛИ, Неопределено, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
		
		// Вариант 1.
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
			ГруппаВариант1,
			"ТипЭлементаВерсииЭД",
			ЭлектронныеДокументыКлиентСервер.ОсновныеТипыЭД(),
			ВидСравненияКомпоновкиДанных.ВСписке);
			
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
			ГруппаВариант1,
			"СостояниеЭДО",
			ПредопределенноеЗначение("Перечисление.СостоянияВерсийЭД.НаПодписи"),
			ВидСравненияКомпоновкиДанных.Равно);
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
			ГруппаВариант1,
			"НаПодпись",
			Истина,
			ВидСравненияКомпоновкиДанных.Равно);
		
		// Вариант 2.
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
			ГруппаВариант2,
			"СостояниеЭДО",
			ПредопределенноеЗначение("Перечисление.СостоянияВерсийЭД.ЗакрытПринудительно"),
			ВидСравненияКомпоновкиДанных.НеРавно);
		
		Значение = Новый Массив;
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.ИППДОИПУПДУКД"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.ИППДОИПЭСФ"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.ИППДОЭСФ"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.ИППДПЭСФ"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.ИПУУЭСФ"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.ИОП"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.ИПЭСФ"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.УОУ"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.УУЭСФ"));
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
			ГруппаВариант2,
			"ТипЭлементаВерсииЭД",
			Значение,
			ВидСравненияКомпоновкиДанных.ВСписке);
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
			ГруппаВариант2,
			"СтатусЭД",
			ПредопределенноеЗначение("Перечисление.СтатусыЭД.Утвержден"),
			ВидСравненияКомпоновкиДанных.Равно);
		
	КонецЕсли;
	
	Если Найти("ИсправитьИсх", РазделДерева) Тогда
		
		// общий отбор только по основным (не служебным) ЭД
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
			ОбъектОтбора,
			"ТипЭлементаВерсииЭД",
			ЭлектронныеДокументыКлиентСервер.ОсновныеТипыЭД(),
			ВидСравненияКомпоновкиДанных.ВСписке);
	
		СписокСостоянийЭДО = Новый Массив;
		СписокСостоянийЭДО.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияВерсийЭД.ОшибкаПередачи"));
		СписокСостоянийЭДО.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияВерсийЭД.ТребуетсяУточнитьДокумент"));
	
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
			ОбъектОтбора,
			"СостояниеЭДО",
			СписокСостоянийЭДО,
			ВидСравненияКомпоновкиДанных.ВСписке);
		
	КонецЕсли;
	
	Если Найти("АннулироватьИсх", РазделДерева) Тогда
		
		// общий отбор только по основным (не служебным) ЭД
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
			ОбъектОтбора,
			"ТипЭлементаВерсииЭД",
			ЭлектронныеДокументыКлиентСервер.ОсновныеТипыЭД(),
			ВидСравненияКомпоновкиДанных.ВСписке);
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
			ОбъектОтбора,
			"СостояниеЭДО",
			ПредопределенноеЗначение("Перечисление.СостоянияВерсийЭД.ТребуетсяАннулировать"),
			ВидСравненияКомпоновкиДанных.ВСписке);
		
	КонецЕсли;
	
	Если Найти("НаКонтролеИсх", РазделДерева) Тогда
		
		// общий отбор только по основным (не служебным) ЭД
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
			ОбъектОтбора,
			"ТипЭлементаВерсииЭД",
			ЭлектронныеДокументыКлиентСервер.ОсновныеТипыЭД(),
			ВидСравненияКомпоновкиДанных.ВСписке);
		
		СписокСостоянийЭДО = Новый Массив;
		СписокСостоянийЭДО.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияВерсийЭД.ОжидаетсяАннулирование"));
		СписокСостоянийЭДО.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияВерсийЭД.ОжидаетсяИзвещениеОПолучении"));
		СписокСостоянийЭДО.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияВерсийЭД.ОжидаетсяКорректировка"));
		СписокСостоянийЭДО.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияВерсийЭД.ОжидаетсяОтправка"));
		СписокСостоянийЭДО.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияВерсийЭД.ОжидаетсяОтправкаИзвещения"));
		СписокСостоянийЭДО.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияВерсийЭД.ОжидаетсяОтправкаПолучателю"));
		СписокСостоянийЭДО.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияВерсийЭД.ОжидаетсяПередачаОператору"));
		СписокСостоянийЭДО.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияВерсийЭД.ОжидаетсяПодтверждение"));
		СписокСостоянийЭДО.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияВерсийЭД.ОжидаетсяПодтверждениеОператора"));
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
			ОбъектОтбора,
			"СостояниеЭДО",
			СписокСостоянийЭДО,
			ВидСравненияКомпоновкиДанных.ВСписке);
		
	КонецЕсли;
	
	Если РазделДерева = "Обработать" Тогда
		
		// общий отбор только по основным (не служебным) ЭД
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
			ОбъектОтбора,
			"ТипЭлементаВерсииЭД",
			ЭлектронныеДокументыКлиентСервер.ОсновныеТипыЭД(),
			ВидСравненияКомпоновкиДанных.ВСписке);
		
		СписокСостоянийЭДО = Новый Массив;
		СписокСостоянийЭДО.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияВерсийЭД.Отклонен"));
		СписокСостоянийЭДО.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияВерсийЭД.Аннулирован"));
		СписокСостоянийЭДО.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияВерсийЭД.ОжидаетсяАннулирование"));
		СписокСостоянийЭДО.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияВерсийЭД.НеСформирован"));
		СписокСостоянийЭДО.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияВерсийЭД.ЗакрытПринудительно"));
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
			ОбъектОтбора,
			"СостояниеЭДО",
			СписокСостоянийЭДО,
			ВидСравненияКомпоновкиДанных.НеВСписке);
		
		АктуальныеВидыЭД = АктуальныеВидыЭД();
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
			ОбъектОтбора,
			"ВидЭД",
			АктуальныеВидыЭД,
			ВидСравненияКомпоновкиДанных.ВСписке);
			
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ОбъектОтбора, "ЕстьОснование", Ложь);
		
	КонецЕсли;
	
	Если РазделДерева = "Утвердить" Тогда
		
		// общий отбор только по основным (не служебным) ЭД
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
			ОбъектОтбора,
			"ТипЭлементаВерсииЭД",
			ЭлектронныеДокументыКлиентСервер.ОсновныеТипыЭД(),
			ВидСравненияКомпоновкиДанных.ВСписке);
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
			ОбъектОтбора, 
			"СостояниеЭДО", 
			ПредопределенноеЗначение("Перечисление.СостоянияВерсийЭД.НаУтверждении"));
		
	КонецЕсли;
	
	Если РазделДерева = "Сформировать" Тогда
		// в запросе уже установлены необходимые условия статично
		ОбъектОтбора.Элементы.Очистить();
	КонецЕсли;
	
	// отборы по пакетам ЭД
	Если Найти("ОтправитьРаспаковать", РазделДерева) Тогда
		
		ОбъектОтбора.Элементы.Очистить();
		
		СтатусыПакета = Новый Массив;
		
		Если РазделДерева = "Отправить" Тогда
			Направление = ПредопределенноеЗначение("Перечисление.НаправленияЭД.Исходящий");
			СтатусыПакета.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыПакетовЭД.ПодготовленКОтправке"));
		Иначе
			Направление = ПредопределенноеЗначение("Перечисление.НаправленияЭД.Входящий");
			СтатусыПакета.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыПакетовЭД.Неизвестный"));
			СтатусыПакета.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыПакетовЭД.КРаспаковке"));
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
			ОбъектОтбора,
			"Направление",
			Направление);
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
			ОбъектОтбора,
			"СтатусПакета",
			СтатусыПакета,
			ВидСравненияКомпоновкиДанных.ВСписке);
		
	КонецЕсли;
	
	// отбор по разделу Завершено
	Если РазделДерева = "Завершено" Тогда
		// в запросе уже установлены необходимые условия статично
		ОбъектОтбора.Элементы.Очистить();
	КонецЕсли;
	
	// отборы по пришлашениям
	Если Найти("ПриглашенияТребуетсяПригласитьЖдемСогласия", РазделДерева) Тогда
		
		ОбъектОтбора.Элементы.Очистить();
		
		СтатусыПодключения = Новый Массив;
		
		Если РазделДерева = "Приглашения" Тогда
			
			СтатусыПодключения.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыУчастниковОбменаЭД.ТребуетсяПригласить"));
			СтатусыПодключения.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыУчастниковОбменаЭД.ОжидаемСогласия"));
			СтатусыПодключения.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыУчастниковОбменаЭД.ТребуетсяСогласие"));
			СтатусыПодключения.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыУчастниковОбменаЭД.Ошибка"));
			
		ИначеЕсли РазделДерева = "ТребуетсяПригласить" Тогда
			
			СтатусыПодключения.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыУчастниковОбменаЭД.ТребуетсяПригласить"));
			СтатусыПодключения.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыУчастниковОбменаЭД.Ошибка"));
			
		ИначеЕсли РазделДерева = "ЖдемСогласия" Тогда
			
			СтатусыПодключения.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыУчастниковОбменаЭД.ОжидаемСогласия"));
			
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
			ОбъектОтбора,
			"СтатусПодключения",
			СтатусыПодключения,
			ВидСравненияКомпоновкиДанных.ВСписке);
		
	КонецЕсли;
		
	Если РазделДерева = "ТребуетсяСогласие" Тогда
		ОбъектОтбора.Элементы.Очистить();
		
		// Группа: Вариант1 ИЛИ Вариант2
		
		ГруппаИЛИ = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
			ОбъектОтбора.Элементы, Неопределено, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
		ГруппаВариант1 = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
			ГруппаИЛИ, Неопределено, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
		ГруппаВариант2 = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
			ГруппаИЛИ, Неопределено, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
		
		// Вариант 1
		
		Значение = Новый Массив;
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыУчастниковОбменаЭД.ТребуетсяСогласие"));
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаВариант1,
			"СтатусПодключения", Значение, ВидСравненияКомпоновкиДанных.ВСписке,, Истина);
		
		// Вариант 2
		
		Значение = ПредопределенноеЗначение("Перечисление.СтатусыУчастниковОбменаЭД.Присоединен");
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаВариант2,
			"СтатусПодключения", Значение, ВидСравненияКомпоновкиДанных.Равно,, Истина);
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаВариант2,
			"Контрагент",, ВидСравненияКомпоновкиДанных.НеЗаполнено,, Истина);		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДинамическиеСписки()
	
	Если Элементы.ДеревоДействий.ТекущиеДанные = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	ИмяСписка = ИмяДинамическогоСписка(ТекущийРаздел);
	
	// установим отборы динамического списка
	УстановитьОтборПоРазделу(ТекущийРаздел, ЭтаФорма[ИмяСписка].Отбор);
	
	// установим быстрые отборы
	УстановитьБыстрыеОтборыДинамическихСписковНаКлиенте(БыстрыеОтборы);
	
КонецПроцедуры

// ПОДСЧЕТ КОЛИЧЕСТВА В ДЕРЕВЕ

&НаКлиенте
Функция ИменаРазделовРекурсивно(СтрокаДерева = Неопределено, ИменаРазделов = Неопределено)
	
	Если СтрокаДерева = Неопределено Тогда
		СтрокаДерева = ДеревоДействий.ПолучитьЭлементы();
	КонецЕсли;
	
	Если ИменаРазделов = Неопределено Тогда
		ИменаРазделов = Новый Массив;
	КонецЕсли;
	
	Для Каждого Строка Из СтрокаДерева Цикл
		Если Не Найти("ВходящиеИсходящиеПриглашения", Строка.Значение) Тогда
			ИменаРазделов.Добавить(Строка.Значение)
		КонецЕсли;
		ЭлементыСтроки = Строка.ПолучитьЭлементы();
		Если ЭлементыСтроки.Количество() Тогда
			ИменаРазделовРекурсивно(ЭлементыСтроки, ИменаРазделов);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ИменаРазделов
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗапросКоличестваЭлементов(СтруктураПараметров, ВключатьВыстрыеОтборы = Ложь)
	
	// создадим схему компоновки данных
	СКД = Новый СхемаКомпоновкиДанных;
	
	ИсточникДанных = СКД.ИсточникиДанных.Добавить();
	ИсточникДанных.Имя                = "ИсточникДанных1";
	ИсточникДанных.ТипИсточникаДанных = "local";
	
	НаборДанных = СКД.НаборыДанных.Добавить(Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"));
	НаборДанных.Имя            = "НаборДанных1";
	НаборДанных.ИсточникДанных = "ИсточникДанных1";
	НаборДанных.АвтоЗаполнениеДоступныхПолей = Истина;
	
	// создадим настройки компоновки данных
	Настройки = Новый НастройкиКомпоновкиДанных;
	
	ДетальныеЗаписи = Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	ВыбранноеПоле = ДетальныеЗаписи.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	ВыбранноеПоле.Поле = Новый ПолеКомпоновкиДанных("Счетчик");
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	ТекстЗапроса      = "";
	ПараметрыЗапроса = Новый Структура;
	
	// получим запросы динамических списков
	ЗапросыДинамическихСписков = ПолучитьИзВременногоХранилища(СтруктураПараметров.АдресЗапросовДинамическихСписков);
	
	Для Каждого Раздел Из СтруктураПараметров.ИменаРазделов Цикл
		
		ЗаголовокПакета = "// ("+Раздел+") ////////////////////////////////////"+Символы.ПС+Символы.ПС;
		ИмяСписка = ИмяДинамическогоСписка(Раздел);
		
		// получим запрос динамического списка
		СКД.НаборыДанных[0].Запрос = ЗапросыДинамическихСписков[ИмяСписка];
		
		// установим отборы
		УстановитьОтборПоРазделу(Раздел, Настройки.Отбор);
		Если ВключатьВыстрыеОтборы Тогда
			УстановитьБыстрыйОтбор(ИмяСписка, Настройки.Отбор, СтруктураПараметров.БыстрыеОтборы);
		КонецЕсли;
		
		// скомпонуем запрос
		Макет = КомпоновщикМакета.Выполнить(СКД, Настройки);
		ТекстЗапросаБуфер = Макет.НаборыДанных[0].Запрос;
		
		// получим параметры запроса и переименуем их в соответствии с разделом
		// у каждого пакета запроса должны быть параметры с уникальными именами
		ТекстЗапросаБуфер = СтрЗаменить(ТекстЗапросаБуфер, "&П", "&П"+Раздел);
		Для Каждого Параметр Из Макет.ЗначенияПараметров Цикл
			ПараметрыЗапроса.Вставить(СтрЗаменить(Параметр.Имя, "П", "П"+Раздел), Параметр.Значение)
		КонецЦикла;
		
		ТекстЗапроса = ТекстЗапроса
			+ ЗаголовокПакета
			+ ТекстЗапросаБуфер
			+ ";"
			+ Символы.ПС
			+ Символы.ПС;
		
	КонецЦикла;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВЫБРАТЬ РАЗРЕШЕННЫЕ", "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1000");
	
	Возврат Новый Структура("ТекстЗапроса, ПараметрыЗапроса", ТекстЗапроса, ПараметрыЗапроса);
	
КонецФункции

&НаСервереБезКонтекста
Функция ДанныеСчетчиков(СтруктураПараметров)
	
	КоличествоОбщее  = Новый Массив;
	КоличествоФильтр = Новый Массив;
	
	// расчет общего количества элементов в списках
	
	Запрос = Новый Запрос;
	
	СтруктураЗапроса = ЗапросКоличестваЭлементов(СтруктураПараметров);
	Запрос.Текст = СтруктураЗапроса.ТекстЗапроса;
	Для Каждого Параметр Из СтруктураЗапроса.ПараметрыЗапроса Цикл
		Запрос.УстановитьПараметр(Параметр.Ключ, Параметр.Значение);
	КонецЦикла;
	
	Результаты = Запрос.ВыполнитьПакет();
	Для Каждого Результат Из Результаты Цикл
		Выборка = Результат.Выбрать();
		Если Выборка.Следующий() И Выборка.Счетчик <> Null Тогда
			КоличествоОбщее.Добавить(Выборка.Количество())
		Иначе
			КоличествоОбщее.Добавить(0)
		КонецЕсли;
	КонецЦикла;
	
	// расчет количества элементов, которые попали в быстрый отбор
	
	Если СтруктураПараметров.ЕстьБыстрыеОтборы Тогда
		
		СтруктураЗапроса = ЗапросКоличестваЭлементов(СтруктураПараметров, СтруктураПараметров.ЕстьБыстрыеОтборы);
		Запрос = Новый Запрос(СтруктураЗапроса.ТекстЗапроса);
		Для Каждого Параметр Из СтруктураЗапроса.ПараметрыЗапроса Цикл
			Запрос.УстановитьПараметр(Параметр.Ключ, Параметр.Значение);
		КонецЦикла;
		
		Результаты = Запрос.ВыполнитьПакет();
		Для Каждого Результат Из Результаты Цикл
			Выборка = Результат.Выбрать();
			Если Выборка.Следующий() И Выборка.Счетчик <> Null Тогда
				КоличествоФильтр.Добавить(Выборка.Количество())
			Иначе
				КоличествоФильтр.Добавить(0)
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		КоличествоФильтр = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(КоличествоОбщее);
	КонецЕсли;
	
	Возврат Новый Структура("КоличествоОбщее, КоличествоФильтр", КоличествоОбщее, КоличествоФильтр)
	
КонецФункции

&НаСервереБезКонтекста
Функция КоличествоПоРазделу(Счетчики, Индекс)
	
	Массив = Новый Массив;
	Массив.Добавить(Счетчики.КоличествоОбщее[Индекс]);
	Массив.Добавить(Счетчики.КоличествоФильтр[Индекс]);
	
	Возврат Массив;
	
КонецФункции

&НаСервереБезКонтекста
Функция ДанныеДереваДействий(СтруктураПараметров)
	
	Счетчики = ДанныеСчетчиков(СтруктураПараметров);
	
	СтруктураПредставлений = Новый Структура;
	
	М = 0;
	
	ЗаполнитьПредставлениеРаздела(СтруктураПредставлений, "Обработать",         НСтр("ru = 'Отразить в учете'"),     КоличествоПоРазделу(Счетчики, 0));
	ЗаполнитьПредставлениеРаздела(СтруктураПредставлений, "Утвердить",          НСтр("ru = 'Утвердить'"),            КоличествоПоРазделу(Счетчики, 1));
	
	Если СтруктураПараметров.ИспользоватьЭП Тогда
		ЗаполнитьПредставлениеРаздела(СтруктураПредставлений, "Подписать",      НСтр("ru = 'Подписать'"),            КоличествоПоРазделу(Счетчики, 2));
	Иначе
		М = М - 1
	КонецЕсли;
	
	ЗаполнитьПредставлениеРаздела(СтруктураПредставлений, "Исправить",          НСтр("ru = 'Исправить'"),            КоличествоПоРазделу(Счетчики, 3+М));
	ЗаполнитьПредставлениеРаздела(СтруктураПредставлений, "Аннулировать",       НСтр("ru = 'Аннулировать'"),         КоличествоПоРазделу(Счетчики, 4+М));
	ЗаполнитьПредставлениеРаздела(СтруктураПредставлений, "НаКонтроле",         НСтр("ru = 'На контроле'"),          КоличествоПоРазделу(Счетчики, 5+М));
	ЗаполнитьПредставлениеРаздела(СтруктураПредставлений, "Сформировать",       НСтр("ru = 'Создать'"),              КоличествоПоРазделу(Счетчики, 6+М));
	
	Если СтруктураПараметров.ИспользоватьЭП Тогда
		ЗаполнитьПредставлениеРаздела(СтруктураПредставлений, "ПодписатьИсх",   НСтр("ru = 'Подписать'"),            КоличествоПоРазделу(Счетчики, 7+М));
	Иначе
		М = М - 1;
	КонецЕсли;
	
	ЗаполнитьПредставлениеРаздела(СтруктураПредставлений, "ИсправитьИсх",       НСтр("ru = 'Исправить'"),            КоличествоПоРазделу(Счетчики, 8+М));
	ЗаполнитьПредставлениеРаздела(СтруктураПредставлений, "АннулироватьИсх",    НСтр("ru = 'Аннулировать'"),         КоличествоПоРазделу(Счетчики, 9+М));
	ЗаполнитьПредставлениеРаздела(СтруктураПредставлений, "НаКонтролеИсх",      НСтр("ru = 'На контроле'"),          КоличествоПоРазделу(Счетчики, 10+М));
	
	Если СтруктураПараметров.ИспользоватьОзнакомлениеСЭД Тогда
		ЗаполнитьПредставлениеРаздела(СтруктураПредставлений, "Завершено",      НСтр("ru = 'Ознакомиться'"),         КоличествоПоРазделу(Счетчики, 11+М));
	Иначе
		М = М - 1;
	КонецЕсли;
	
	ЗаполнитьПредставлениеРаздела(СтруктураПредставлений, "Отправить",          НСтр("ru = 'Отправить'"),            КоличествоПоРазделу(Счетчики, 12+М));
	ЗаполнитьПредставлениеРаздела(СтруктураПредставлений, "Распаковать",        НСтр("ru = 'Распаковать'"),          КоличествоПоРазделу(Счетчики, 13+М));
	ЗаполнитьПредставлениеРаздела(СтруктураПредставлений, "ТребуетсяПригласить",НСтр("ru = 'Требуется пригласить'"), КоличествоПоРазделу(Счетчики, 14+М));
	ЗаполнитьПредставлениеРаздела(СтруктураПредставлений, "ЖдемСогласия",       НСтр("ru = 'Ждем согласия'"),        КоличествоПоРазделу(Счетчики, 15+М));
	ЗаполнитьПредставлениеРаздела(СтруктураПредставлений, "ТребуетсяСогласие",  НСтр("ru = 'Требуется согласие'"),   КоличествоПоРазделу(Счетчики, 16+М));
	
	Возврат СтруктураПредставлений;

КонецФункции

&НаСервереБезКонтекста
Процедура ЗаполнитьПредставлениеРаздела(СтруктураПредставлений, ИмяРаздела, ПредставлениеРаздела, ДанныеОКоличестве)
	
	КоличествоОбщее  = ДанныеОКоличестве[0];
	КоличествоФильтр = ДанныеОКоличестве[1];
	
	Если КоличествоОбщее + КоличествоФильтр Тогда
		
		КоличествоОбщееПредставление =  ?(КоличествоОбщее  < 1000, Строка(КоличествоОбщее),  "999+");
		КоличествоФильтрПредставление = ?(КоличествоФильтр < 1000, Строка(КоличествоФильтр), "999+");
		
		Если КоличествоОбщееПредставление = КоличествоФильтрПредставление Тогда
			ПредставлениеРаздела = ПредставлениеРаздела + " (" + КоличествоОбщееПредставление + ")"
		Иначе
			ПредставлениеРаздела = ПредставлениеРаздела + " (" + КоличествоФильтрПредставление + "/" + КоличествоОбщееПредставление + ")"
		КонецЕсли;
		
	КонецЕсли;
	
	СтруктураПредставлений.Вставить(ИмяРаздела, ПредставлениеРаздела);
	
КонецПроцедуры

// удалить
&НаСервереБезКонтекста
Процедура ПредставлениеСтрокРекурсивно(Дерево, Значение, Представление, Количество)
	
	Для Каждого Строка Из Дерево.Строки Цикл
		
		Если Строка.Строки.Количество() > 0 Тогда
			ПредставлениеСтрокРекурсивно(Строка, Значение, Представление, Количество);
		КонецЕсли;
		
		Если Строка.Значение = Значение Тогда
			
			КоличествоОбщее  = Количество[0];
			КоличествоФильтр = Количество[1];
			
			Если КоличествоОбщее + КоличествоФильтр Тогда
				
				КоличествоОбщееПредставление =  ?(КоличествоОбщее  < 1000, Строка(КоличествоОбщее),  "999+");
				КоличествоФильтрПредставление = ?(КоличествоФильтр < 1000, Строка(КоличествоФильтр), "999+");
				
				Если КоличествоОбщееПредставление = КоличествоФильтрПредставление Тогда
					НовоеПредставление = Представление + " (" + КоличествоОбщееПредставление + ")"
				Иначе
					НовоеПредставление = Представление + " (" + КоличествоФильтрПредставление + "/" + КоличествоОбщееПредставление + ")"
				КонецЕсли;
				
				Строка.Представление = НовоеПредставление;
				
			Иначе
				
				Строка.Представление = Представление;
				
			КонецЕсли;
			
			Строка.ОбновитьСписок = Макс(Строка.ОбновитьСписок, Не Строка.Представление = НовоеПредставление);
			Строка.ТребуетсяОбработка = КоличествоОбщее > 0;
			
			Возврат;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьСтатусПакетов(Знач МассивЭД, Знач СтатусПакета, КоличествоИзмененных)
	
	КоличествоИзмененных = 0;
	Для Каждого СтрокаТаблицы Из МассивЭД Цикл
		Попытка
			Пакет = СтрокаТаблицы.Ссылка.ПолучитьОбъект();
			Пакет.СтатусПакета = СтатусПакета;
			Пакет.Записать();
			КоличествоИзмененных = КоличествоИзмененных + 1;
		Исключение
			ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			ТекстОшибки    = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ТекстОперации  = НСтр("ru = 'изменение статуса пакетов ЭД'");
			ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(ТекстОперации,
				ТекстОшибки, ТекстСообщения);
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьТаблицуБыстрогоОтбора()
	
	БыстрыеОтборы.Очистить();
	
	НазваниеСправочникаКонтрагенты = ЭлектронныеДокументыПовтИсп.ПолучитьИмяПрикладногоСправочника("Контрагенты");
	Если Не ЗначениеЗаполнено(НазваниеСправочникаКонтрагенты) Тогда
		НазваниеСправочникаКонтрагенты = "Контрагенты";
	КонецЕсли;
	
	НазваниеСправочникаОрганизации = ЭлектронныеДокументыПовтИсп.ПолучитьИмяПрикладногоСправочника("Организации");
	Если Не ЗначениеЗаполнено(НазваниеСправочникаОрганизации) Тогда
		НазваниеСправочникаОрганизации = "Организации";
	КонецЕсли;
	
	НоваяСтрока = БыстрыеОтборы.Добавить();
	НоваяСтрока.Параметр = "Организация";
	НоваяСтрока.ПредставлениеПараметра = НСтр("ru = 'Организация:'");
	НоваяСтрока.Тип = "СправочникСсылка."+ НазваниеСправочникаОрганизации;
	НоваяСтрока.Значение = ЭлектронныеДокументыПовтИсп.ПолучитьПустуюСсылку("Организации");
	
	НоваяСтрока = БыстрыеОтборы.Добавить();
	НоваяСтрока.Параметр = "Контрагент";
	НоваяСтрока.ПредставлениеПараметра = НСтр("ru = 'Контрагент:'");
	НоваяСтрока.Тип = "СправочникСсылка."+ НазваниеСправочникаКонтрагенты;
	НоваяСтрока.Значение = ЭлектронныеДокументыПовтИсп.ПолучитьПустуюСсылку("Контрагенты");
	
	НоваяСтрока = БыстрыеОтборы.Добавить();
	НоваяСтрока.Параметр = "Дата_С";
	НоваяСтрока.ПредставлениеПараметра = НСтр("ru = 'Дата с:'");
	НоваяСтрока.Тип = "Дата";
	НоваяСтрока.Значение = Дата(1,1,1);
	
	НоваяСтрока = БыстрыеОтборы.Добавить();
	НоваяСтрока.Параметр = "Дата_По";
	НоваяСтрока.ПредставлениеПараметра = НСтр("ru = 'Дата по:'");
	НоваяСтрока.Тип = "Дата";
	НоваяСтрока.Значение = Дата(1,1,1);
	
	НоваяСтрока = БыстрыеОтборы.Добавить();
	НоваяСтрока.Параметр = "Сумма_С";
	НоваяСтрока.ПредставлениеПараметра = НСтр("ru = 'Сумма с:'");
	НоваяСтрока.Тип = "Число";
	НоваяСтрока.Значение = Неопределено;
	
	НоваяСтрока = БыстрыеОтборы.Добавить();
	НоваяСтрока.Параметр = "Сумма_По";
	НоваяСтрока.ПредставлениеПараметра = НСтр("ru = 'Сумма по:'");
	НоваяСтрока.Тип = "Число";
	НоваяСтрока.Значение = Неопределено;
	
	НоваяСтрока = БыстрыеОтборы.Добавить();
	НоваяСтрока.Параметр = "ВидЭД";
	НоваяСтрока.ПредставлениеПараметра = НСтр("ru = 'Вид документа:'");
	НоваяСтрока.Тип = "ПеречислениеСсылка.ВидыЭД";
	НоваяСтрока.Значение = Перечисления.ВидыЭД.ПустаяСсылка();
	
	НоваяСтрока = БыстрыеОтборы.Добавить();
	НоваяСтрока.Параметр = "ДополнительнаяИнформация";
	НоваяСтрока.ПредставлениеПараметра = НСтр("ru = 'Доп. информация:'");
	НоваяСтрока.Тип = "Строка";
	НоваяСтрока.Значение = "";
	
	НоваяСтрока = БыстрыеОтборы.Добавить();
	НоваяСтрока.Параметр = "Ответственный";
	НоваяСтрока.ПредставлениеПараметра = НСтр("ru = 'Ответственный:'");
	НоваяСтрока.Тип = "СправочникСсылка.Пользователи";
	НоваяСтрока.Значение = Пользователи.АвторизованныйПользователь();
	
КонецПроцедуры

// ДЕРЕВО ДЕЙСТВИЙ

&НаСервере
Процедура ИнициализироватьДерево()

	Дерево = РеквизитФормыВЗначение("ДеревоДействий");
	
	// входящие
	СтрокаВходящие = Дерево.Строки.Добавить();
	СтрокаВходящие.Значение = "Входящие";
	СтрокаВходящие.Представление = "Входящие";
	
	НовЗапись = СтрокаВходящие.Строки.Добавить();
	НовЗапись.Значение = "Обработать";
	
	НовЗапись = СтрокаВходящие.Строки.Добавить();
	НовЗапись.Значение = "Утвердить";
	
	Если ИспользоватьЭП Тогда
		НовЗапись = СтрокаВходящие.Строки.Добавить();
		НовЗапись.Значение = "Подписать";
	КонецЕсли;
	
	НовЗапись = СтрокаВходящие.Строки.Добавить();
	НовЗапись.Значение = "Исправить";
	
	НовЗапись = СтрокаВходящие.Строки.Добавить();
	НовЗапись.Значение = "Аннулировать";
	
	НовЗапись = СтрокаВходящие.Строки.Добавить();
	НовЗапись.Значение = "НаКонтроле";

	// исходящие
	СтрокаИсходящие = Дерево.Строки.Добавить();
	СтрокаИсходящие.Значение = "Исходящие";
	СтрокаИсходящие.Представление = "Исходящие";
	
	НовЗапись = СтрокаИсходящие.Строки.Добавить();
	НовЗапись.Значение = "Сформировать";
	
	Если ИспользоватьЭП Тогда
		НовЗапись = СтрокаИсходящие.Строки.Добавить();
		НовЗапись.Значение = "ПодписатьИсх";
	КонецЕсли;
	
	НовЗапись = СтрокаИсходящие.Строки.Добавить();
	НовЗапись.Значение = "ИсправитьИсх";
	
	НовЗапись = СтрокаИсходящие.Строки.Добавить();
	НовЗапись.Значение = "АннулироватьИсх";
	
	НовЗапись = СтрокаИсходящие.Строки.Добавить();
	НовЗапись.Значение = "НаКонтролеИсх";
	
	// раздел завершенных документов
	Если ИспользоватьОзнакомлениеСЭД Тогда
		НовЗапись = Дерево.Строки.Добавить();
		НовЗапись.Значение = "Завершено";
	КонецЕсли;
	
	// пакеты ЭД
	НовЗапись = Дерево.Строки.Добавить();
	НовЗапись.Значение = "Отправить";
	
	НовЗапись = Дерево.Строки.Добавить();
	НовЗапись.Значение = "Распаковать";
	
	// приглашения
	СтрокаПриглашения = Дерево.Строки.Добавить();
	СтрокаПриглашения.Значение = "Приглашения";
	СтрокаПриглашения.Представление = "Приглашения";
	
	НовЗапись = СтрокаПриглашения.Строки.Добавить();
	НовЗапись.Значение = "ТребуетсяПригласить";
	
	НовЗапись = СтрокаПриглашения.Строки.Добавить();
	НовЗапись.Значение = "ЖдемСогласия";
	
	НовЗапись = СтрокаПриглашения.Строки.Добавить();
	НовЗапись.Значение = "ТребуетсяСогласие";
	
	ЗначениеВРеквизитФормы(Дерево, "ДеревоДействий");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеДерева()
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("АдресЗапросовДинамическихСписков", АдресЗапросовДинамическихСписков);
	СтруктураПараметров.Вставить("БыстрыеОтборы",                    БыстрыеОтборы);
	СтруктураПараметров.Вставить("ИменаРазделов",                    ИменаРазделовРекурсивно());
	СтруктураПараметров.Вставить("ЕстьБыстрыеОтборы",                Элементы.СброситьОтбор.Доступность);
	СтруктураПараметров.Вставить("ИспользоватьЭП",                   ИспользоватьЭП);
	СтруктураПараметров.Вставить("ИспользоватьОзнакомлениеСЭД",      ИспользоватьОзнакомлениеСЭД);
	
	ДанныеДерева = ДанныеДереваДействий(СтруктураПараметров);
	
	Дерево = ДеревоДействий.ПолучитьЭлементы();
	ЗаполнитьПредставленияДереваРекурсивно(ДанныеДерева, Дерево);
	
	Для Каждого КорневойУровень Из Дерево Цикл
		ДочерниеЭлементы = КорневойУровень.ПолучитьЭлементы();
		ТребуетсяОбработка = Ложь;
		Для Каждого ДочернийЭлемент Из ДочерниеЭлементы Цикл
			Если Найти(ДочернийЭлемент.Представление, "(") Тогда
				ТребуетсяОбработка = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		КорневойУровень.ТребуетсяОбработка = ТребуетсяОбработка;
	КонецЦикла;
	
	ОбновитьДинамическиеСписки();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПредставленияДереваРекурсивно(ПредставленияДерева, КоллекцияДерева = Неопределено)
	
	Для Каждого ЭлементКоллекции Из КоллекцияДерева Цикл
		
		ДочерниеЭлементы = ЭлементКоллекции.ПолучитьЭлементы();
		Если ДочерниеЭлементы.Количество() Тогда
			ЗаполнитьПредставленияДереваРекурсивно(ПредставленияДерева, ДочерниеЭлементы)
		КонецЕсли;
		
		Если ПредставленияДерева.Свойство(ЭлементКоллекции.Значение) Тогда
			ЭлементКоллекции.Представление = ПредставленияДерева[ЭлементКоллекции.Значение]
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// удалить
&НаСервере
Процедура ЗаполнитьСтрокиРекурсивно(Приемник, Знач Источник);
	
	НовСтрокаКоллекции = Приемник.Добавить();
	ЗаполнитьЗначенияСвойств(НовСтрокаКоллекции, Источник);
	Если Источник.Строки.Количество() > 0 Тогда
		Для Каждого Строка ИЗ Источник.Строки Цикл
			ЗаполнитьСтрокиРекурсивно(НовСтрокаКоллекции.ПолучитьЭлементы(), Строка);
		КонецЦикла
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеДереваНаКлиенте()
	
	Если Элементы.ДеревоДействий.ТекущиеДанные = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	ТекущаяСтрока = Элементы.ДеревоДействий.ТекущиеДанные.Значение;
	ОбновитьДанныеДерева();
	
	ЭлементыДерева = ДеревоДействий.ПолучитьЭлементы();
	Для Каждого Элемент ИЗ ЭлементыДерева Цикл
		Если Элемент.Значение = ТекущаяСтрока Тогда
			Элементы.ДеревоДействий.ТекущаяСтрока = Элемент.ПолучитьИдентификатор();
		КонецЕсли;
		Если Элемент.Значение = "Входящие" Или Элемент.Значение = "Исходящие" Тогда
			Элементы.ДеревоДействий.Развернуть(Элемент.ПолучитьИдентификатор());
		КонецЕсли;
		Если ВРег(Элемент.Значение) = ВРег("Приглашения") Тогда
			Элементы.ДеревоДействий.Развернуть(Элемент.ПолучитьИдентификатор());
		КонецЕсли;
		ПодчиненныеЭлементыСтроки = Элемент.ПолучитьЭлементы();
		Если ПодчиненныеЭлементыСтроки.Количество() > 0 Тогда
			Для Каждого ПодчиненныйЭлемент ИЗ ПодчиненныеЭлементыСтроки Цикл
				Если ПодчиненныйЭлемент.Значение = ТекущаяСтрока Тогда
					Элементы.ДеревоДействий.ТекущаяСтрока = ПодчиненныйЭлемент.ПолучитьИдентификатор();
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// ПРОЧЕЕ

&НаКлиенте
Процедура УстановитьДоступностьЭлементов()
	
	Элементы.ЗакрытьПринудительно.Доступность =
		Не Найти("Завершено.Отправить.Распаковать.Приглашения.ТребуетсяПригласить.ЖдемСогласия.ТребуетсяСогласие", ТекущийРаздел);
		
	Элементы.УстановитьОтветственного.Доступность =
		Не Найти("Сформировать.Завершено.Отправить.Распаковать.Приглашения.ТребуетсяПригласить.ЖдемСогласия.ТребуетсяСогласие", ТекущийРаздел);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ИмяДинамическогоСписка(Ключ)
	
	Структура = Новый Структура;
	
	Структура.Вставить("Обработать",   "Входящие");
	Структура.Вставить("Утвердить",    "Входящие");
	Структура.Вставить("Подписать",    "Входящие");
	Структура.Вставить("Исправить",    "Входящие");
	Структура.Вставить("Аннулировать", "Входящие");
	Структура.Вставить("НаКонтроле",   "Входящие");
	
	Структура.Вставить("Сформировать",    "Создать");
	Структура.Вставить("ПодписатьИсх",    "Исходящие");
	Структура.Вставить("ИсправитьИсх",    "Исходящие");
	Структура.Вставить("АннулироватьИсх", "Исходящие");
	Структура.Вставить("НаКонтролеИсх",   "Исходящие");
	
	Структура.Вставить("Отправить",   "ПакетыЭД");
	Структура.Вставить("Распаковать", "ПакетыЭД");
	
	Структура.Вставить("ТребуетсяПригласить", "Приглашения");
	Структура.Вставить("ЖдемСогласия",        "Приглашения");
	Структура.Вставить("ТребуетсяСогласие",   "Приглашения");
	
	Имя = Неопределено;
	Если Структура.Свойство(Ключ, Имя) Тогда
		Возврат Имя
	Иначе
		Возврат Ключ
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура УстановитьСтатусОтменен(МассивЭД)
	
	Количество = 0;
	УстановитьСтатусПакетов(
		МассивЭД,
		ПредопределенноеЗначение("Перечисление.СтатусыПакетовЭД.Отменен"),
		Количество);
	ТекстОповещения = НСтр("ru = 'Изменен статус пакетов на ""Отменен"": (%1)'");
	ТекстОповещения = СтрЗаменить(ТекстОповещения, "%1", Количество);
	ПоказатьОповещениеПользователя(НСтр("ru = 'Обмен электронными документами'"), , ТекстОповещения);
	ОбновитьДанныеДереваНаКлиенте();
	ОбновитьДинамическиеСписки();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтветственного(МассивЭД)
	
	ЭлектронныеДокументыСлужебныйКлиент.ИзменитьОтветственного(МассивЭД);
	ОбновитьДинамическиеСписки();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СписокАктуальныхВидовЭД()
	
	МассивАктуальныхЭД = ЭлектронныеДокументыПовтИсп.ПолучитьАктуальныеВидыЭД();
	ИспользуетсяОбменСБанком = ПолучитьФункциональнуюОпцию("ИспользоватьОбменЭДСБанками");
	Если НЕ ИспользуетсяОбменСБанком Тогда
		МассивИсключенияЭД = Новый Массив();
		МассивИсключенияЭД.Добавить(Перечисления.ВидыЭД.ВыпискаБанка);
		МассивИсключенияЭД.Добавить(Перечисления.ВидыЭД.ЗапросВыписки);
		МассивИсключенияЭД.Добавить(Перечисления.ВидыЭД.ПлатежноеПоручение);
		МассивАктуальныхЭД = ОбщегоНазначенияКлиентСервер.СократитьМассив(МассивАктуальныхЭД, МассивИсключенияЭД);
	КонецЕсли;
	СписокВозврата = Новый СписокЗначений;
	СписокВозврата.ЗагрузитьЗначения(МассивАктуальныхЭД);
	Возврат СписокВозврата;
	
КонецФункции

&НаСервереБезКонтекста
Функция АктуальныеВидыЭД()
	
	ВидыЭД = ЭлектронныеДокументыПовтИсп.ПолучитьАктуальныеВидыЭД();
	
	ИндексПЭД = ВидыЭД.Найти(Перечисления.ВидыЭД.ПроизвольныйЭД);
	Если ИндексПЭД <> Неопределено Тогда
		ВидыЭД.Удалить(ИндексПЭД);
	КонецЕсли;
	
	Возврат ВидыЭД;
	
КонецФункции

&НаСервереБезКонтекста
Функция ИмяПрикладногоСправочника(Название)
	
	Возврат ЭлектронныеДокументыПовтИсп.ПолучитьИмяПрикладногоСправочника(Название);
	
КонецФункции

&НаКлиенте
Функция МассивВыбранныхСсылок()
	
	МассивСсылок  = Новый Массив;
	ЭлементСписок = Элементы[ИмяДинамическогоСписка(ТекущийРаздел)];
	
	ИдентификаторыСтрок = ЭлементСписок.ВыделенныеСтроки;
	Если ИдентификаторыСтрок.Количество() И ИдентификаторыСтрок[0] <> 0 Тогда
		Для Каждого ИДСтрока Из ИдентификаторыСтрок Цикл
			МассивСсылок.Добавить(ЭлементСписок.ДанныеСтроки(ИДСтрока).Ссылка)
		КонецЦикла;
	КонецЕсли;
	
	Возврат МассивСсылок
	
КонецФункции

&НаКлиенте
Процедура ПодписатьИОтправить(ПараметрКоманды)
	
	МассивСсылок = ЭлектронныеДокументыСлужебныйКлиент.ПолучитьМассивПараметров(ПараметрКоманды);
	Если ЗначениеЗаполнено(МассивСсылок) Тогда
		ЭлектронныеДокументыКлиент.СформироватьПодписатьОтправитьЭД(Неопределено, МассивСсылок);
		ОбновитьДанныеДереваНаКлиенте();
		ОбновитьДинамическиеСписки();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОтправитьПриглашенияСервер(ОтправленоПриглашений, СоответствиеПрофилейНастроекЭДОМаркерам)
	
	// Готовим таблицу с реквизитами контрагентов
	ТаблицаПриглашений = Новый ТаблицаЗначений;
	ТаблицаПриглашений.Колонки.Добавить("ПрофильНастроекЭДО");
	ТаблицаПриглашений.Колонки.Добавить("НастройкаЭДО");
	ТаблицаПриглашений.Колонки.Добавить("Получатель");
	ТаблицаПриглашений.Колонки.Добавить("Идентификатор");
	ТаблицаПриглашений.Колонки.Добавить("Наименование");
	ТаблицаПриглашений.Колонки.Добавить("НаименованиеДляСообщенияПользователю");
	ТаблицаПриглашений.Колонки.Добавить("ИНН");
	ТаблицаПриглашений.Колонки.Добавить("КПП");
	ТаблицаПриглашений.Колонки.Добавить("АдресЭП");
	ТаблицаПриглашений.Колонки.Добавить("ТекстПриглашения");
	ТаблицаПриглашений.Колонки.Добавить("ВнешнийКод");
	
	ИмяРеквизитаИННКонтрагента = ЭлектронныеДокументыПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("ИННКонтрагента");
	ИмяРеквизитаКППКонтрагента = ЭлектронныеДокументыПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("КППКонтрагента");
	ИмяРеквизитаНаименованиеКонтрагента = ЭлектронныеДокументыПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("НаименованиеКонтрагента");
	ИмяРеквизитаВнешнийКодКонтрагента = ЭлектронныеДокументыПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("ВнешнийКодКонтрагента");
	ИмяРеквизитаНаименованиеКонтрагентаДляСообщенияПользователю = ЭлектронныеДокументыПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("НаименованиеКонтрагентаДляСообщенияПользователю");
	
	Для каждого НастройкаЭДО Из Элементы.Приглашения.ВыделенныеСтроки Цикл
		
		СтруктураПараметровНастройкиЭДО = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(НастройкаЭДО,
			"ИдентификаторКонтрагента, ЭлектроннаяПочтаДляПриглашения, Контрагент, ТекстПриглашения, ПрофильНастроекЭДО");
			
		СпособОбменаЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтруктураПараметровНастройкиЭДО.ПрофильНастроекЭДО, "СпособОбменаЭД");
		
		Если СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском
			И Не ЗначениеЗаполнено(СтруктураПараметровНастройкиЭДО.ЭлектроннаяПочтаДляПриглашения) Тогда
			
			ШаблонСообщения = НСтр("ru = 'Для отправки приглашения к обмену ЭД для получателя %1
										|необходимо заполнить электронную почту.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
				СтруктураПараметровНастройкиЭДО.Контрагент);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
			Продолжить;
		КонецЕсли;
		
		СтруктураПараметровКонтрагента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтруктураПараметровНастройкиЭДО.Контрагент,
			ИмяРеквизитаИННКонтрагента + ", " + ИмяРеквизитаКППКонтрагента + ", " + ИмяРеквизитаНаименованиеКонтрагента + ", "
			+ ИмяРеквизитаВнешнийКодКонтрагента + ", " + ИмяРеквизитаНаименованиеКонтрагентаДляСообщенияПользователю);
	
		Если Не ЗначениеЗаполнено(СтруктураПараметровКонтрагента[ИмяРеквизитаИННКонтрагента]) Тогда
			ШаблонСообщения = НСтр("ru = 'Для отправки приглашения к обмену ЭД для получателя %1
										|необходимо заполнить ИНН.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
				СтруктураПараметровНастройкиЭДО.Контрагент);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ТаблицаПриглашений.Добавить();
		НоваяСтрока.ПрофильНастроекЭДО = СтруктураПараметровНастройкиЭДО.ПрофильНастроекЭДО;
		НоваяСтрока.НастройкаЭДО       = НастройкаЭДО;
		НоваяСтрока.Получатель         = СтруктураПараметровНастройкиЭДО.Контрагент;
		НоваяСтрока.Идентификатор      = СтруктураПараметровНастройкиЭДО.ИдентификаторКонтрагента;
		НоваяСтрока.ТекстПриглашения   = СтруктураПараметровНастройкиЭДО.ТекстПриглашения;
		НоваяСтрока.АдресЭП            = СтруктураПараметровНастройкиЭДО.ЭлектроннаяПочтаДляПриглашения;
		
		НоваяСтрока.Наименование       = СтруктураПараметровКонтрагента[ИмяРеквизитаНаименованиеКонтрагента];
		НоваяСтрока.НаименованиеДляСообщенияПользователю = СтруктураПараметровКонтрагента[ИмяРеквизитаНаименованиеКонтрагентаДляСообщенияПользователю];
		НоваяСтрока.ИНН                = СтруктураПараметровКонтрагента[ИмяРеквизитаИННКонтрагента];
		НоваяСтрока.КПП                = СтруктураПараметровКонтрагента[ИмяРеквизитаКППКонтрагента];
		НоваяСтрока.ВнешнийКод         = СтруктураПараметровКонтрагента[ИмяРеквизитаВнешнийКодКонтрагента];
		
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(ТаблицаПриглашений) Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого КлючИЗначение Из СоответствиеПрофилейНастроекЭДОМаркерам Цикл
		ПрофильНастроекЭДО = КлючИЗначение.Ключ;
		СтруктураСертификата = КлючИЗначение.Значение;
		
		Маркер = "";
		Если ТипЗнч(СтруктураСертификата) = Тип("Структура") Тогда
			СтруктураСертификата.Свойство("МаркерРасшифрованный", Маркер);
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Маркер) Тогда
			Продолжить;
		КонецЕсли;
		
		ОтборПриглашений = Новый Структура;
		ОтборПриглашений.Вставить("ПрофильНастроекЭДО", ПрофильНастроекЭДО);
		
		ТаблицаПриглашенийДляОтправки = ТаблицаПриглашений.Скопировать(ОтборПриглашений);
		
		ДопПараметры = Новый Структура;
		ИмяФайла = ЭлектронныеДокументыВнутренний.ИсходящийЗапросПриглашенияОператораЭДО(ТаблицаПриглашенийДляОтправки, ДопПараметры);
		Если Не ЗначениеЗаполнено(ИмяФайла) Тогда
			Возврат;
		КонецЕсли;
		
		ПутьДляПриглашений = ЭлектронныеДокументыСлужебный.РабочийКаталог("invite", Новый УникальныйИдентификатор);
		ИмяФайлаПриглашения = ПутьДляПриглашений + "SendContacts.xml";
		КопироватьФайл(ИмяФайла, ИмяФайлаПриглашения);
		РезультатОтправки = ЭлектронныеДокументыВнутренний.ОтправитьЧерезОператораЭДО(
			Маркер,
			ПутьДляПриглашений,
			"SendContacts",
			ПрофильНастроекЭДО);
			
		УдалитьФайлы(ПутьДляПриглашений);
		
		Если РезультатОтправки <> 0 Тогда
			
			Для каждого СтрокаТаблицы Из ТаблицаПриглашений Цикл
				ИскомаяНастройкаЭДО = НастройкаЭДО.ПолучитьОбъект();
				ИскомаяНастройкаЭДО.СтатусПодключения = Перечисления.СтатусыУчастниковОбменаЭД.ОжидаемСогласия;
				ИскомаяНастройкаЭДО.СостояниеСоглашения = Перечисления.СостоянияСоглашенийЭД.ОжидаетсяСогласование;
				ИскомаяНастройкаЭДО.ОписаниеОшибки = "";
				ИскомаяНастройкаЭДО.Записать();
			КонецЦикла;
			ОтправленоПриглашений = ТаблицаПриглашений.Количество();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПринятьОтклонитьКонтактЧерезОператораЭДОНаСервере(КоличествоПринятыхПриглашений, СоответствиеПрофилейНастроекЭДОМаркерам, ПриглашениеПринято)
	
	Для каждого НастройкаЭДО Из Элементы.Приглашения.ВыделенныеСтроки Цикл
		
		СтруктураСертификата = СоответствиеПрофилейНастроекЭДОМаркерам.Получить(НастройкаЭДО.ПрофильНастроекЭДО);
		
		Маркер = "";
		Если ТипЗнч(СтруктураСертификата) = Тип("Структура") Тогда
			СтруктураСертификата.Свойство("МаркерРасшифрованный", Маркер);
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Маркер) Тогда
			Продолжить;
		КонецЕсли;
		
		Результат = Ложь;
		
		ИскомаяНастройкаЭДО = НастройкаЭДО.ПолучитьОбъект();
		Если ПриглашениеПринято Тогда
			Если Не ЭлектронныеДокументыСлужебный.ПроверитьЗаполнениеНастройкиЭДО(ИскомаяНастройкаЭДО) Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
		Если ИскомаяНастройкаЭДО.НастройкаЭДОУникальна() Тогда
			Результат = ЭлектронныеДокументыВнутренний.ПринятьОтклонитьКонтактЧерезОператораЭДО(
				НастройкаЭДО.ИдентификаторКонтрагента, ПриглашениеПринято, Маркер, НастройкаЭДО.ПрофильНастроекЭДО);
		КонецЕсли;
		Если Результат Тогда
			Если ПриглашениеПринято Тогда
				ИскомаяНастройкаЭДО.СтатусПодключения = Перечисления.СтатусыУчастниковОбменаЭД.Присоединен;
				ИскомаяНастройкаЭДО.СостояниеСоглашения = Перечисления.СостоянияСоглашенийЭД.ПроверкаТехническойСовместимости;
			Иначе
				ИскомаяНастройкаЭДО.СтатусПодключения = Перечисления.СтатусыУчастниковОбменаЭД.Отсоединен;
				ИскомаяНастройкаЭДО.СостояниеСоглашения = Перечисления.СостоянияСоглашенийЭД.Закрыто;
			КонецЕсли;
			ИскомаяНастройкаЭДО.Записать();
			
			КоличествоПринятыхПриглашений = КоличествоПринятыхПриглашений + 1;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПрофилиНастроекЭДО(Знач МассивНастроекЭДО)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СоглашенияОбИспользованииЭД.ПрофильНастроекЭДО
	|ИЗ
	|	Справочник.СоглашенияОбИспользованииЭД КАК СоглашенияОбИспользованииЭД
	|ГДЕ
	|	СоглашенияОбИспользованииЭД.Ссылка В(&МассивНастроекЭДО)";
	
	Запрос.УстановитьПараметр("МассивНастроекЭДО", МассивНастроекЭДО);
	Таблица = Запрос.Выполнить().Выгрузить();
	
	Возврат Таблица.ВыгрузитьКолонку("ПрофильНастроекЭДО");
	
КонецФункции

&НаКлиенте
Процедура Перенаправить(Команда)
	
	УстановитьОтветственного(МассивВыбранныхСсылок());
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЗаголовокБыстрыхОтборов(Показывать)
	
	Заголовок = Нстр("ru='Быстрый поиск'")  + " ";
	Показать  = "(" + Нстр("ru='показать'") + ")";
	Скрыть    = "(" + Нстр("ru='скрыть'")   + ")";
	
	Возврат Заголовок + ?(Показывать, Скрыть, Показать);
	
КонецФункции

&НаКлиенте
Процедура ПоказатьСкрытьБыстрыйПоиск()
	
	Элементы.ЗаголовокОтбора.Заголовок = ЗаголовокБыстрыхОтборов(ПоказатьБыстрыйПоиск);
	Элементы.БыстрыеОтборы.Видимость   = ПоказатьБыстрыйПоиск;
	
КонецПроцедуры


