&НаКлиенте
Перем КэшированныеЗначения;

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	Если ЭтоАдресВременногоХранилища(Параметры.НеСопоставленныеТовары) Тогда
		Товары.Загрузить(ПолучитьИзВременногоХранилища(Параметры.НеСопоставленныеТовары));
		ЗаполнитьСлужебныеРеквизиты();
	Иначе
		ВызватьИсключение НСтр("ru='Обработка предназначена только для контекстного открытия из форм конфигурации.'");
	КонецЕсли;
	
	Если Не ПравоДоступа("Изменение", Метаданные.Справочники.КлассификаторАлкогольнойПродукцииЕГАИС) Тогда
		ТолькоПросмотр = Истина;
		Элементы.ЗаписатьИЗакрыть.Доступность = Ложь;
		Элементы.ДекорацияНедостаточноПравНаИзменениеКлассификаторов.Видимость = Истина;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСлужебныеРеквизиты()
	
	Запрос = Новый Запрос();
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	Товары.Номенклатура КАК Номенклатура
	|ПОМЕСТИТЬ
	|	Товары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|ВЫБРАТь
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	Товары.Номенклатура.Крепость КАК Крепость 
	|ИЗ
	|	Товары КАК Товары
	|;
	|";
	
	Запрос.УстановитьПараметр("Товары", Товары.Выгрузить(,"НомерСтроки, Номенклатура"));
	Выборка = Запрос.Выполнить().Выбрать();
	
	Для Каждого ТекСтрока Из Товары Цикл
		
		Выборка.Сбросить();
		СтруктураПоиска = Новый Структура("НомерСтроки", ТекСтрока.НомерСтроки);
		Если Выборка.НайтиСледующий(СтруктураПоиска) Тогда
			ТекСтрока.Крепость = Выборка.Крепость;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка) 
	
	Если НЕ ПринудительноЗакрытьФорму И Модифицированность Тогда
		
		Отказ = Истина;
		
		СписокКнопок = Новый СписокЗначений;
		СписокКнопок.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Сохранить'"));
		СписокКнопок.Добавить(КодВозвратаДиалога.Нет, НСтр("ru = 'Не сохранять'"));
		СписокКнопок.Добавить(КодВозвратаДиалога.Отмена, НСтр("ru = 'Отмена'"));
		
		ПередЗакрытиемВопросЗавершение(Вопрос(
			НСтр("ru = 'Введенные данные не сохранены, сохранить?'"),
			СписокКнопок), );
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемВопросЗавершение(ОтветНаВопрос, ДополнительныеПараметры) Экспорт
	
	Если ОтветНаВопрос = КодВозвратаДиалога.Да Тогда
		
		Если ПроверитьЗаполнение() Тогда
			
			Отказ = Ложь;
			Если ПроверитьЗаполнение() Тогда
				ПроверитьЗаписатьДанные(Отказ);
				Если Не Отказ Тогда
					ПринудительноЗакрытьФорму = Истина;
					Закрыть();
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
	ИначеЕсли ОтветНаВопрос = КодВозвратаДиалога.Нет Тогда
		
		ПринудительноЗакрытьФорму = Истина;
		
		Закрыть();
		
	КонецЕсли;
	
КонецПроцедуры

// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ 

&НаКлиенте
Процедура ТоварыПриАктивизацииЯчейки(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	Если Элемент.ТекущийЭлемент.Имя = "ТоварыНоменклатураЕГАИС" И ТекущаяСтрока <> Неопределено Тогда 
		
		ЗаполнитьСпискиВыбораНоменклатурыЕГАИС(ТекущаяСтрока);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Элемент.ТекущийЭлемент.Имя = "ТоварыНоменклатура" Тогда
		
		ПараметрыФормы = Новый Структура("Ключ", Элементы.Товары.ТекущиеДанные.Номенклатура);
		ОткрытьФорму("Справочник.Номенклатура.Форма.ФормаЭлемента", ПараметрыФормы);
		
	КонецЕсли;
	
КонецПроцедуры

// ОБРАБОТЧИКИ СОБЫТИЙ 
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД 

&НаКлиенте
Процедура Отмена(Команда)
	
	ПринудительноЗакрытьФорму = Истина;
	Закрыть(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	Если ПроверитьЗаполнение() Тогда
		
		Отказ = Ложь;
		ПроверитьЗаписатьДанные(Отказ);
		
		Если Не Отказ Тогда
			ПринудительноЗакрытьФорму = Истина;
			Закрыть(Истина);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Записать(Команда)
	
	Если ПроверитьЗаполнение() Тогда
		ПроверитьЗаписатьДанные();
	КонецЕсли;
	
КонецПроцедуры

// ОБРАБОТЧИКИ КОМАНД 
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Устанавливаем условное оформление для характеристик номенклатуры
//
// Параметры:
// 		Форма - Форма - Содержит данную форму 
// 		ИмяПоляВводаХарактеристики - Строка - Наименование элемента формы, содержащего характеристики номенклатуры,
//											   если оно отличается от "ТоварыХарактеристика"
// 		ПутьКПолюОтбора - Строка - Полный путь к реквизиту "характеристики используются",
//									если он отличается от "Объект.Товары.ХарактеристикиИспользуются"
// 
Процедура УстановитьУсловноеОформлениеХарактеристикНоменклатуры(Форма,
	                                                            ИмяПоляВводаХарактеристики = "ТоварыХарактеристика",
																ПутьКПолюОтбора = "Объект.Товары.ХарактеристикиИспользуются") Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользованиеХарактеристикНоменклатуры") Тогда
		Возврат;
	КонецЕсли;
																
	УсловноеОформление = Форма.УсловноеОформление;
	ЭлементыФормы = Форма.Элементы;
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ЭлементыФормы[ИмяПоляВводаХарактеристики].Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКПолюОтбора);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<характеристики не используются>'"));
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();

	//

	УстановитьУсловноеОформлениеХарактеристикНоменклатуры(ЭтаФорма, , "Товары.ХарактеристикиИспользуются");

	//Номенклатура
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыНоменклатура.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Товары.Номенклатура");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Черный);
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыНоменклатура.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Товары.Номенклатура");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаПроблемаЕГАИС);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не сопоставлено>'"));
	
	//
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыЕдиницаИзмерения.Имя);
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Товары.Упаковка");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСпискиВыбораНоменклатурыЕГАИС(ТекущаяСтрока)
	
	СписокВыбораНоменклатура = Элементы.ТоварыНоменклатура.СписокВыбора;
	СписокВыбораНоменклатура.Очистить();
	
	ТекущаяНоменклатураЕГАИС = ТекущаяСтрока.НоменклатураЕГАИС;
	НайденныеСтроки = НоменклатураДляВыбора.НайтиСтроки(Новый Структура("НоменклатураЕГАИС", ТекущаяНоменклатураЕГАИС));
	Для Каждого ТекСтрока Из НайденныеСтроки Цикл
		СписокВыбораНоменклатура.Добавить(ТекСтрока.Номенклатура);
	КонецЦикла;
		
КонецПроцедуры

&НаСервере
Процедура ЗаписатьПродукцию(Строка, Отказ)
	
	НоменклатураЕГАИС = Строка.НоменклатураЕГАИС.ПолучитьОбъект();
	НоменклатураЕГАИС.Номенклатура = Строка.Номенклатура;
	НоменклатураЕГАИС.Характеристика = Строка.Характеристика;
	
	НоменклатураЕГАИС.Упаковки.Очистить();
	НоваяУпаковка = НоменклатураЕГАИС.Упаковки.Добавить();

	Если Не ЗначениеЗаполнено(Строка.Упаковка) Тогда
		НоваяУпаковка.Упаковка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Строка.Номенклатура,"БазоваяЕдиницаИзмерения");
	Иначе
		НоваяУпаковка.Упаковка = Строка.Упаковка;
	КонецЕсли;
		
	Попытка 
		НоменклатураЕГАИС.Записать();
	Исключение
		ТекстОшибки = НСтр("ru = 'Не удалось сопоставить номенклатуру %1'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%1", НоменклатураЕГАИС.Наименование);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки + Символы.ПС + ОписаниеОшибки(),);
				
		Отказ = Истина;
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Функция ПроверитьЗаписатьДанные(Отказ = Ложь)
	
	ЕстьНесопоставленные = Ложь;
	
	Для Каждого Товар Из Товары Цикл
		
		Если ЗначениеЗаполнено(Товар.НоменклатураЕГАИС)Тогда
			ЗаписатьПродукцию(Товар, Отказ);
		Иначе
			ЕстьНесопоставленные = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ЕстьНесопоставленные;
	
КонецФункции

// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
///////////////////////////////////////////////////////////////////////////////
