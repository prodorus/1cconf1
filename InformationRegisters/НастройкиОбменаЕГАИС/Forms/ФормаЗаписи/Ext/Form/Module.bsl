
//Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ПравоДобавленияКлассификатораОрганизаций = ПравоДоступа("Добавление", Метаданные.Справочники.КлассификаторОрганизацийЕГАИС);
	
	Если Не Записано Тогда
		ЗагружатьВходящиеДокументы = Запись.ЗагружатьВходящиеДокументы;
		ПриСозданииЧтенииНаСервере();
	КонецЕсли;
	
	Элементы.ГруппаПодсказка.Видимость = НЕ ОбщегоНазначения.РазделениеВключено();
	Элементы.ПолучитьКодФСРАР.Видимость = ПравоДоступа("Изменение", Метаданные.РегистрыСведений.НастройкиОбменаЕГАИС);
	
	СобытияФормЕГАИСПереопределяемый.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если Не Записано
		И Не ЗначениеЗаполнено(Запись.РабочееМесто) Тогда
		МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента();
		Запись.РабочееМесто = МенеджерОборудованияВызовСервера.ПолучитьРабочееМестоКлиента();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Запись.АдресУТМ)
		И ЗначениеЗаполнено(Запись.ПортУТМ)
		И ЗначениеЗаполнено(Запись.ИдентификаторФСРАР) Тогда
		
		ПодключитьОбработчикОжидания("ПроверитьПодключениеКУТМ", 3, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_КлассификаторОрганизацийЕГАИС" Тогда
		
		ЗаполнитьДанные();
		
	КонецЕсли;
	
	СобытияФормЕГАИСКлиентПереопределяемый.ОбработкаОповещения(ЭтаФорма, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	Записано = Истина;
	
	Запись.РабочееМесто   = ТекущийОбъект.РабочееМесто;
	РабочееМестоКеш       = ТекущийОбъект.РабочееМесто;
	ИдентификаторФСРАРКеш = ТекущийОбъект.ИдентификаторФСРАР;
	
	ОбменНаСервере             = ТекущийОбъект.ОбменНаСервере;
	ЗагружатьВходящиеДокументы = ТекущийОбъект.ЗагружатьВходящиеДокументы;
	
	Если Не ОбменНаСервере Тогда
		ОбменПоРасписанию = ТекущийОбъект.ОбменНаКлиентеПоРасписанию;
		РасписаниеОбмена  = ТекущийОбъект.ОбменНаКлиентеРасписание.Получить();
	Иначе
		ОбменПоРасписанию = Ложь;
		РасписаниеОбмена  = Неопределено;
	КонецЕсли;
	
	ПриСозданииЧтенииНаСервере();
	
	СобытияФормЕГАИСПереопределяемый.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	ПараметрыЗаписи = Неопределено;
	СобытияФормЕГАИСКлиентПереопределяемый.ПередЗаписью(ЭтаФорма, Отказ, ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ТекущийОбъект.ОбменНаСервере             = ОбменНаСервере;
	ТекущийОбъект.ЗагружатьВходящиеДокументы = ЗагружатьВходящиеДокументы;
	
	Если Не ОбменНаСервере Тогда
		ТекущийОбъект.ОбменНаКлиентеПоРасписанию = ОбменПоРасписанию;
		ТекущийОбъект.ОбменНаКлиентеРасписание   = Новый ХранилищеЗначения(РасписаниеОбмена);
	Иначе
		ТекущийОбъект.ОбменНаКлиентеПоРасписанию = Ложь;
		ТекущийОбъект.ОбменНаКлиентеРасписание   = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	РабочееМестоКеш       = Запись.РабочееМесто;
	ИдентификаторФСРАРКеш = Запись.ИдентификаторФСРАР;
	Записано              = Истина;
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("ИдентификаторФСРАР", Запись.ИдентификаторФСРАР);
	
	Оповестить("Запись_ПараметрыПодключенияЕГАИС", ПараметрыОповещения, ЭтаФорма);
	
	ИнтеграцияЕГАИСКлиент.ПодключитьОбработчикВыполненияОбменаНаКлиентеПоРасписанию();
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	ТребуетсяПроверкаНаДубли = (РабочееМестоКеш <> Запись.РабочееМесто)
	                           Или (ИдентификаторФСРАРКеш <> Запись.ИдентификаторФСРАР)
	                           Или Не Записано;
	
	Если ТребуетсяПроверкаНаДубли Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	1 КАК Поле1
		|ИЗ
		|	РегистрСведений.НастройкиОбменаЕГАИС КАК НастройкиОбменаЕГАИС
		|ГДЕ
		|	НастройкиОбменаЕГАИС.ИдентификаторФСРАР = &ИдентификаторФСРАР
		|	И НастройкиОбменаЕГАИС.РабочееМесто = &РабочееМесто");
		
		Запрос.УстановитьПараметр("ИдентификаторФСРАР", Запись.ИдентификаторФСРАР);
		Запрос.УстановитьПараметр("РабочееМесто",       Запись.РабочееМесто);
		
		Если НЕ Запрос.Выполнить().Пустой() Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтрШаблон(
					НСтр("ru = 'Настройка обмена для организации с кодом ФСРАР %1 уже существует'"),
					Запись.ИдентификаторФСРАР),,
				"Запись.ИдентификаторФСРАР",,
				Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	Если ПринудительноЗакрытьФорму Тогда
		Возврат;
	КонецЕсли;
	
	Если ПодключениеНастроеноКорректно
		И УказанПравильныйКодФСРАР
		И ТребуетсяЗапроситьДанныеОрганизацииЕГАИС
		И ПравоДобавленияКлассификатораОрганизаций Тогда
		
		Отказ = Истина;
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да,     НСтр("ru='Запросить данные'"));
		Кнопки.Добавить(КодВозвратаДиалога.Нет,    НСтр("ru='Закрыть форму'"));
		Кнопки.Добавить(КодВозвратаДиалога.Отмена, НСтр("ru='Отмена'"));
		
		ПоказатьВопросЕГАИС(
			ОписаниеОповещенияЕГАИС("ОбработатьОтветНаВопросОЗапросеДанныхОрганизацииЕГАИСПередЗаписью", ЭтаФорма),
			СтрШаблон(
				НСтр("ru='Перед выполнением обмена данными с ЕГАИС рекомендуется
				         |запросить данные организации с кодом ФСРАР %1.'"),
				Запись.ИдентификаторФСРАР),
			Кнопки,,
			КодВозвратаДиалога.Да);
		
	КонецЕсли;
	
КонецПроцедуры

//КонецОбласти

//Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ИдентификаторФСРАРПриИзменении(Элемент)
	
	ИдентификаторФСРАРПриИзмененииНаСервере();
	ПодключитьОбработчикОжидания("ПроверитьПодключениеКУТМ", 1, Истина);
	
КонецПроцедуры

&НаСервере
Процедура ИдентификаторФСРАРПриИзмененииНаСервере()
	
	ЗаполнитьДанные();
	
	ПодключениеНастроеноКорректно = Ложь;
	УказанПравильныйКодФСРАР = Ложь;
	ОбновитьТекстСопоставления();
	Элементы.СтраницыПроверкаПодключения.ТекущаяСтраница = Элементы.СтраницыПроверкаПодключения.ПодчиненныеЭлементы.ВыполняетсяПроверкаПодключенияКУТМ;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбменНаСервереПриИзменении(Элемент)
	
	ПриИзмененииВариантаПодключения();
	
	Если ОбменНаСервере = 1 Тогда
		
		Если ОбменНаКлиентеРасписаниеКеш <> РасписаниеОбмена
			И РасписаниеОбмена <> Неопределено Тогда
			
			ОбменНаКлиентеПоРасписаниюКеш = ОбменПоРасписанию;
			ОбменНаКлиентеРасписаниеКеш   = РасписаниеОбмена;
			
		КонецЕсли;
		
		ПрочитатьРасписаниеОбменаНаСервере();
		
	Иначе
		
		Если ОбменНаКлиентеРасписаниеКеш <> Неопределено Тогда
			
			ОбменПоРасписанию = ОбменНаКлиентеПоРасписаниюКеш;
			РасписаниеОбмена  = ОбменНаКлиентеРасписаниеКеш;
			
			ОбменНаКлиентеПоРасписаниюКеш = Неопределено;
			ОбменНаКлиентеРасписаниеКеш =   Неопределено;
			
		КонецЕсли;
		
		ИзменитьРасписаниеОбменаНаКлиенте(ЭтаФорма, РасписаниеОбмена);
		
	КонецЕсли;
	
	ПодключениеНастроеноКорректно = Ложь;
	УказанПравильныйКодФСРАР = Ложь;
	ОбновитьТекстСопоставления();
	Элементы.СтраницыПроверкаПодключения.ТекущаяСтраница = Элементы.СтраницыПроверкаПодключения.ПодчиненныеЭлементы.ВыполняетсяПроверкаПодключенияКУТМ;
	ПодключитьОбработчикОжидания("ПроверитьПодключениеКУТМ", 1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура АдресУТМПриИзменении(Элемент)
	
	АдресУТМПриИзмененииНаСервере();
	ПодключитьОбработчикОжидания("ПроверитьПодключениеКУТМ", 1, Истина);
	
КонецПроцедуры

&НаСервере
Процедура АдресУТМПриИзмененииНаСервере()
	
	ПодключениеНастроеноКорректно = Ложь;
	УказанПравильныйКодФСРАР = Ложь;
	ОбновитьТекстСопоставления();
	Элементы.СтраницыПроверкаПодключения.ТекущаяСтраница = Элементы.СтраницыПроверкаПодключения.ПодчиненныеЭлементы.ВыполняетсяПроверкаПодключенияКУТМ;
	
КонецПроцедуры

&НаКлиенте
Процедура ПортУТМПриИзменении(Элемент)
	
	ПортУТМПриИзмененииНаСервере();
	ПодключитьОбработчикОжидания("ПроверитьПодключениеКУТМ", 1, Истина);
	
КонецПроцедуры

&НаСервере
Процедура ПортУТМПриИзмененииНаСервере()
	
	ПодключениеНастроеноКорректно = Ложь;
	УказанПравильныйКодФСРАР = Ложь;
	ОбновитьТекстСопоставления();
	Элементы.СтраницыПроверкаПодключения.ТекущаяСтраница = Элементы.СтраницыПроверкаПодключения.ПодчиненныеЭлементы.ВыполняетсяПроверкаПодключенияКУТМ;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаймаутПриИзменении(Элемент)
	
	ТаймаутПриИзмененииНаСервере();
	ПодключитьОбработчикОжидания("ПроверитьПодключениеКУТМ", 1, Истина);
	
КонецПроцедуры

&НаСервере
Процедура ТаймаутПриИзмененииНаСервере()
	
	ПодключениеНастроеноКорректно = Ложь;
	УказанПравильныйКодФСРАР = Ложь;
	ОбновитьТекстСопоставления();
	Элементы.СтраницыПроверкаПодключения.ТекущаяСтраница = Элементы.СтраницыПроверкаПодключения.ПодчиненныеЭлементы.ВыполняетсяПроверкаПодключенияКУТМ;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбменПоРасписаниюПриИзменении(Элемент)
	
	Если ОбменНаСервере = 1 Тогда
		
		ИзменитьРасписаниеОбменаНаСервере();
		
	Иначе
		
		ИзменитьРасписаниеОбменаНаКлиенте(ЭтаФорма, РасписаниеОбмена);
		
	КонецЕсли;
	
КонецПроцедуры

//КонецОбласти

//Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормЕГАИСКлиентПереопределяемый.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьКодФСРАР(Команда)
	
	ОчиститьСообщения();
	
	Если ПустаяСтрока(Запись.АдресУТМ) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru='Не указан IP-адрес (или доменное имя) компьютера с установленной службой УТМ.'"),,
			"АдресУТМ",
			"Запись");
		Возврат;
	КонецЕсли;
	
	Если Запись.ПортУТМ = 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru='Не указан порт доступа к УТМ.'"),,
			"ПортУТМ",
			"Запись");
		Возврат;
	КонецЕсли;
	
	ПолучитьКодФСРАРИзУТМ(
		ОписаниеОповещенияЕГАИС("ПолучениеКодаФСРАР_Завершение", ЭтаФорма),
		Запись.Таймаут);
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьРасписание(Команда)
	
	ОписаниеОповещения = ОписаниеОповещенияЕГАИС("ИзменитьРасписаниеОбмена", ЭтаФорма);
	
	ОткрытьНастройкуРасписанияОбмена(ОписаниеОповещения, РасписаниеОбмена);
	
КонецПроцедуры

//КонецОбласти

//Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьДанные()
	
	Если ЗначениеЗаполнено(СокрЛП(Запись.ИдентификаторФСРАР)) Тогда
		ДанныеСопоставления = ИнтеграцияЕГАИСПереопределяемый.ДанныеСопоставленияОрганизацииЕГАИС(СокрЛП(Запись.ИдентификаторФСРАР));
	Иначе
		ДанныеСопоставления = Неопределено;
	КонецЕсли;
	
	ТребуетсяЗапроситьДанныеОрганизацииЕГАИС = Истина;
	ОрганизацияЕГАИС = Справочники.КлассификаторОрганизацийЕГАИС.ПустаяСсылка();
	
	Если ДанныеСопоставления <> Неопределено И ЗначениеЗаполнено(ДанныеСопоставления.ОрганизацияЕГАИС) Тогда
		
		ОрганизацияКонтрагент = ДанныеСопоставления.Организация;
		ТорговыйОбъект        = ДанныеСопоставления.ТорговыйОбъект;
		ОрганизацияЕГАИС      = ДанныеСопоставления.ОрганизацияЕГАИС;
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ЕГАИСПрисоединенныеФайлы.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ЕГАИСПрисоединенныеФайлы КАК ЕГАИСПрисоединенныеФайлы
		|ГДЕ
		|	ЕГАИСПрисоединенныеФайлы.Операция = ЗНАЧЕНИЕ(Перечисление.ВидыДокументовЕГАИС.ЗапросДанныхОрганизации)
		|	И ЕГАИСПрисоединенныеФайлы.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыЗапросовЕГАИС.Исходящий)
		|	И ЕГАИСПрисоединенныеФайлы.ВладелецФайла = &ВладелецФайла
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЕГАИСПрисоединенныеФайлы.ДатаМодификацииУниверсальная УБЫВ");
		
		Запрос.УстановитьПараметр("ВладелецФайла", ОрганизацияЕГАИС);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ТекстСообщенияXML = ИнтеграцияЕГАИС.ТекстСообщенияXMLИзПротокола(Выборка.Ссылка);
			Если СтрНайти(ТекстСообщенияXML, СокрЛП(Запись.ИдентификаторФСРАР)) > 0 Тогда
				ТребуетсяЗапроситьДанныеОрганизацииЕГАИС = Ложь;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	ОбновитьТекстСопоставления();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьТекстСопоставления()
	
	МассивСтрок = Новый Массив;
	
	Если ЗначениеЗаполнено(ОрганизацияЕГАИС) Тогда
		
		МассивСтрок.Добавить(
			ФорматированнаяСтрока(
				НСтр("ru = 'Организация ЕГАИС:'")));
		
		МассивСтрок.Добавить(" ");
		
		Если ЗначениеЗаполнено(ОрганизацияЕГАИС) Тогда
			ПредставлениеОрганизацииЕГАИС = Строка(ОрганизацияЕГАИС);
			Если ПредставлениеОрганизацииЕГАИС = "<>" Тогда
				ПредставлениеОрганизацииЕГАИС = НСтр("ru = '<Новая организация>'");
			КонецЕсли;
		Иначе
			ПредставлениеОрганизацииЕГАИС = НСтр("ru = '<не загружена из ЕГАИС>'");
		КонецЕсли;
		
		МассивСтрок.Добавить(
			ФорматированнаяСтрока(
				ПредставлениеОрганизацииЕГАИС,
				Новый Шрифт(,,,,Истина),
				?(ЗначениеЗаполнено(ОрганизацияЕГАИС),
					ЦветаСтиляКлиент.ЦветГиперссылкиГИСМ,
					ЦветаСтиляКлиент.ЦветТекстаПроблемаЕГАИС),,
				"КомандаОткрытьОрганизациюЕГАИС"));
		
		МассивСтрок.Добавить(Символы.ПС);
		
		МассивСтрок.Добавить(
			ФорматированнаяСтрока(
				НСтр("ru = 'Организация:'")));
		
		МассивСтрок.Добавить(" ");
		
		Если Не ЗначениеЗаполнено(ОрганизацияКонтрагент) Тогда
			
			МассивСтрок.Добавить(
				ФорматированнаяСтрока(
					НСтр("ru = '<не сопоставлено>'"),
					Новый Шрифт(,,,,Истина),
					ЦветаСтиляКлиент.ЦветТекстаПроблемаЕГАИС,,
					"КомандаОткрытьОрганизациюЕГАИС"));
			
		Иначе
			
			МассивСтрок.Добавить(
				ФорматированнаяСтрока(
					Строка(ОрганизацияКонтрагент),
					Новый Шрифт(,,,,Истина),
					ЦветаСтиляКлиент.ЦветГиперссылкиГИСМ,,
					"КомандаОткрытьОрганизацию"));
			
		КонецЕсли;
		
		МассивСтрок.Добавить(Символы.ПС);
		
		МассивСтрок.Добавить(
			ФорматированнаяСтрока(
				НСтр("ru = 'Торговый объект:'")));
		
		МассивСтрок.Добавить(" ");
		
		Если Не ЗначениеЗаполнено(ТорговыйОбъект) Тогда
			
			МассивСтрок.Добавить(
				ФорматированнаяСтрока(
					НСтр("ru = '<не сопоставлено>'"),
					Новый Шрифт(,,,,Истина),
					ЦветаСтиляКлиент.ЦветТекстаПроблемаЕГАИС,,
					"КомандаОткрытьОрганизациюЕГАИС"));
			
		Иначе
			
			МассивСтрок.Добавить(
				ФорматированнаяСтрока(
					Строка(ТорговыйОбъект),
					Новый Шрифт(,,,,Истина),
					ЦветаСтиляКлиент.ЦветГиперссылкиГИСМ,,
					"КомандаОткрытьТорговыйОбъект"));
			
		КонецЕсли;
		
	ИначеЕсли ЗначениеЗаполнено(СокрЛП(Запись.ИдентификаторФСРАР))
		И Не ПодключениеНастроеноКорректно Тогда
		
		МассивСтрок.Добавить(
			ФорматированнаяСтрока(
				НСтр("ru = 'Организация ЕГАИС не найдена по коду ФСРАР
				            |в классификаторе организаций.'"),,
				ЦветаСтиляКлиент.ЦветТекстаПроблемаЕГАИС));
		
	ИначеЕсли ЗначениеЗаполнено(СокрЛП(Запись.ИдентификаторФСРАР))
		И ПодключениеНастроеноКорректно Тогда
		
		Если УказанПравильныйКодФСРАР Тогда
			
			МассивСтрок.Добавить(
				ФорматированнаяСтрока(
					НСтр("ru = 'Организация ЕГАИС не найдена по коду ФСРАР
					            |в классификаторе организаций.'"),,
					ЦветаСтиляКлиент.ЦветТекстаПроблемаЕГАИС));
			
			МассивСтрок.Добавить(" ");
			
			Если ПравоДобавленияКлассификатораОрганизаций Тогда
			
				МассивСтрок.Добавить(
					ФорматированнаяСтрока(
						НСтр("ru = 'Запросить из ЕГАИС'"),
						Новый Шрифт(,,,,Истина),
						ЦветаСтиляКлиент.ЦветГиперссылкиГИСМ,,
						"КомандаЗапроситьОрганизациюЕГАИС"));
					
			КонецЕсли;
			
		Иначе
			
			МассивСтрок.Добавить(
				ФорматированнаяСтрока(
					НСтр("ru = 'Неверный код ФСРАР.'"),,
					ЦветаСтиляКлиент.ЦветТекстаПроблемаЕГАИС));
			
			МассивСтрок.Добавить(" ");
			
			МассивСтрок.Добавить(
				ФорматированнаяСтрока(
					СтрШаблон(
						НСтр("ru = 'Использовать код %1'"),
						КодФСРАРИзУТМ),
					Новый Шрифт(,,,,Истина),
					ЦветаСтиляКлиент.ЦветГиперссылкиГИСМ,,
					"КомандаЗапроситьКодФСРАР"));
			
		КонецЕсли;
		
	Иначе
		
		МассивСтрок.Добавить(
			ФорматированнаяСтрока(
				НСтр("ru = 'Не заполнен код ФСРАР'"),,
				ЦветаСтиляКлиент.ЦветТекстаПроблемаЕГАИС));
			
		Если ПодключениеНастроеноКорректно
			И ТолькоПросмотр Тогда
			
			МассивСтрок.Добавить(" ");
			
			МассивСтрок.Добавить(
				ФорматированнаяСтрока(
					НСтр("ru = 'Запросить код ФСРАР из УТМ'"),
					Новый Шрифт(,,,,Истина),
					ЦветаСтиляКлиент.ЦветГиперссылкиГИСМ,,
					"КомандаЗапроситьКодФСРАР"));
		КонецЕсли;
		
	КонецЕсли;
	
	ТекстСопоставление = Новый ФиксированныйМассив(МассивСтрок);
	
	ИнтеграцияЕГАИСУТ.СформироватьФорматированнуюСтроку(ЭтаФорма,
		ТекстСопоставление,
		"ГруппаТекстСопоставление",
		"ТекстСопоставлениеОбработкаНавигационнойСсылки");
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииВариантаПодключения()
	
	МассивСтрок = Новый Массив;
	
	Если ОбменНаСервере = 0 Тогда
		МассивСтрок.Добавить(ФорматированнаяСтрока(
			НСтр("ru = 'Подключение к УТМ будет осуществляться с компьютера пользователя'")));
	ИначеЕсли ОбменНаСервере = 1 Тогда
		МассивСтрок.Добавить(ФорматированнаяСтрока(
			НСтр("ru = 'Подключение к УТМ будет осуществляться с компьютера, на котором установлен сервер 1С:Предприятия'")));
	КонецЕсли;
	
	Подсказка = Новый ФиксированныйМассив(МассивСтрок);
	
	ИнтеграцияЕГАИСУТ.СформироватьФорматированнуюСтроку(ЭтаФорма,
		Подсказка,
		"ГруппаПодсказка",
		"");
	
КонецПроцедуры

&НаКлиенте
Процедура РабочееМестоОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		СтандартнаяОбработка = Ложь;
		МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента();
		Запись.РабочееМесто = МенеджерОборудованияВызовСервера.ПолучитьРабочееМестоКлиента();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстСопоставлениеОбработкаНавигационнойСсылки(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	НавигационнаяСсылкаФорматированнойСтроки = ИнтеграцияЕГАИСУТКлиентСервер.НавигационнаяСсылкаСтроки(Элемент, ТекстСопоставление);
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "КомандаОткрытьОрганизацию" Тогда
		
		ПоказатьЗначениеЕГАИС(, ОрганизацияКонтрагент);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "КомандаОткрытьТорговыйОбъект" Тогда
		
		ПоказатьЗначениеЕГАИС(, ТорговыйОбъект);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "КомандаОткрытьОрганизациюЕГАИС" Тогда
		
		ПоказатьЗначениеЕГАИС(, ОрганизацияЕГАИС);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "КомандаЗапроситьОрганизациюЕГАИС" Тогда
		
		Если Модифицированность Тогда
			
			Кнопки = Новый СписокЗначений;
			Кнопки.Добавить(КодВозвратаДиалога.Да,     НСтр("ru='Записать и продолжить'"));
			Кнопки.Добавить(КодВозвратаДиалога.Отмена, НСтр("ru='Отмена'"));
			
			ПоказатьВопросЕГАИС(
				ОписаниеОповещенияЕГАИС("ОбработатьОтветНаВопросОЗаписиНастроекПередЗапросомОрганизацииЕГАИС", ЭтаФорма),
				НСтр("ru='Перед запросом данных организации ЕГАИС
				         |по коду ФСРАР текущая настройка обмена должна быть записана.'"),
				Кнопки,,
				КодВозвратаДиалога.Да);
			
		Иначе
			
			Если Не ЗначениеЗаполнено(ОрганизацияЕГАИС)
				И Не ЗаписатьНастройкуОбмена(Ложь) Тогда
				Возврат;
			КонецЕсли;
			
			НачатьФормированиеЗапросаНаЗагрузкуОрганизации();
			
		КонецЕсли;
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "КомандаЗапроситьКодФСРАР" Тогда
		
		ПолучитьКодФСРАР(Неопределено);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОтветНаВопросОЗаписиНастроекПередЗапросомОрганизацииЕГАИС(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗаписатьНастройкуОбмена() Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("ИдентификаторФСРАР", Запись.ИдентификаторФСРАР);
	
	Оповестить("Запись_ПараметрыПодключенияЕГАИС", ПараметрыОповещения, ЭтаФорма);
	
	Прочитать();
	
	НачатьФормированиеЗапросаНаЗагрузкуОрганизации();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОтветНаВопросОЗапросеДанныхОрганизацииЕГАИСПередЗаписью(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		ПринудительноЗакрытьФорму = Истина;
		Закрыть();
		Возврат;
	КонецЕсли;
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗаписатьНастройкуОбмена() Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("ИдентификаторФСРАР", Запись.ИдентификаторФСРАР);
	
	Оповестить("Запись_ПараметрыПодключенияЕГАИС", ПараметрыОповещения, ЭтаФорма);
	
	Прочитать();
	
	НачатьФормированиеЗапросаНаЗагрузкуОрганизации(
		ОписаниеОповещенияЕГАИС("ПослеЗакрытияФормыЗапросаДанныхОрганизацииПередЗаписью", ЭтаФорма));
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияФормыЗапросаДанныхОрганизацииПередЗаписью(Результат, ДополнительныеПараметры) Экспорт
	
	ЗаполнитьДанные();
	
	Если ПодключениеНастроеноКорректно
		И УказанПравильныйКодФСРАР
		И Не ТребуетсяЗапроситьДанныеОрганизацииЕГАИС Тогда
		
		Закрыть();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьФормированиеЗапросаНаЗагрузкуОрганизации(ОповещениеПриЗакрытии = Неопределено)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Операция",          ПредопределенноеЗначение("Перечисление.ВидыДокументовЕГАИС.ЗапросДанныхОрганизации"));
	ПараметрыФормы.Вставить("ИмяПараметра",      "СИО");
	ПараметрыФормы.Вставить("ЗначениеПараметра", Запись.ИдентификаторФСРАР);
	
	ПараметрыФормы.Вставить("ОрганизацияЕГАИС",              ОрганизацияЕГАИС);
	Если ЗначениеЗаполнено(ОрганизацияЕГАИС)
		И Строка(ОрганизацияЕГАИС) <> "<>" Тогда
		ПараметрыФормы.Вставить("ОрганизацияЕГАИСПредставление", ОрганизацияЕГАИС);
	Иначе
		ПараметрыФормы.Вставить("ОрганизацияЕГАИСПредставление", НСтр("ru = '<Новая организация>'"));
	КонецЕсли;
	
	ОткрытьФормуЕГАИС(
		"ОбщаяФорма.ФормированиеИсходящегоЗапросаЕГАИС",
		ПараметрыФормы,
		ЭтаФорма,,,,
		ОповещениеПриЗакрытии,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучениеКодаФСРАР_Завершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат.КодФСРАР <> Неопределено Тогда
		
		Запись.ИдентификаторФСРАР = Результат.КодФСРАР;
		Модифицированность = Истина;
		ЗаполнитьДанные();
		
		ПодключениеНастроеноКорректно = Ложь;
		УказанПравильныйКодФСРАР = Ложь;
		ОбновитьТекстСопоставления();
		Элементы.СтраницыПроверкаПодключения.ТекущаяСтраница = Элементы.СтраницыПроверкаПодключения.ПодчиненныеЭлементы.ВыполняетсяПроверкаПодключенияКУТМ;
		ПодключитьОбработчикОжидания("ПроверитьПодключениеКУТМ", 1, Истина);
		
	Иначе
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтрШаблон(
				НСтр("ru = 'Внутренняя ошибка получения кода ФСРАР. Обратитесь к администратору.
				           |%1.'"),
				Результат.ТекстОшибки));
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииЧтенииНаСервере()
	
	ЦветаСтиляКлиент = Новый Структура;
	ЦветаСтиляКлиент.Вставить("ЦветГиперссылкиГИСМ",     ЦветаСтиля.ЦветГиперссылкиГИСМ);
	ЦветаСтиляКлиент.Вставить("ЦветТекстаПроблемаЕГАИС", ЦветаСтиля.ЦветТекстаПроблемаЕГАИС);
	
	ЗаполнитьДанные();
	
	ПриИзмененииВариантаПодключения();
	
	Если ОбменНаСервере Тогда
		
		ПрочитатьРасписаниеОбменаНаСервере();
		
	Иначе
		
		ИзменитьРасписаниеОбменаНаКлиенте(ЭтаФорма, РасписаниеОбмена);
		
	КонецЕсли;
	
	Элементы.ГруппаРасписание.ТолькоПросмотр = ТолькоПросмотр;
	
	Если ЗначениеЗаполнено(Запись.АдресУТМ)
		И ЗначениеЗаполнено(Запись.ПортУТМ)
		И ЗначениеЗаполнено(Запись.ИдентификаторФСРАР) Тогда
		
		ПодключениеНастроеноКорректно = Ложь;
		УказанПравильныйКодФСРАР = Ложь;
		ОбновитьТекстСопоставления();
		Элементы.СтраницыПроверкаПодключения.ТекущаяСтраница = Элементы.СтраницыПроверкаПодключения.ПодчиненныеЭлементы.ВыполняетсяПроверкаПодключенияКУТМ;
		
	Иначе
		
		Элементы.СтраницыПроверкаПодключения.ТекущаяСтраница = Элементы.СтраницыПроверкаПодключения.ПодчиненныеЭлементы.ПроверкаНеПодключенияНеВыполнялась;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьРасписаниеОбменаНаСервере()
	
	ЗаданиеОбмена = РегламентныеЗадания.НайтиПредопределенное("ОбработкаОтветовЕГАИС");
	
	РасписаниеОбмена  = ЗаданиеОбмена.Расписание;
	ОбменПоРасписанию = ЗаданиеОбмена.Использование;
	
	Элементы.ОбработкаОтветовЕГАИС.Доступность = ОбменПоРасписанию;
	УстановитьТекстНадписиРегламентнойНастройки(ЗаданиеОбмена, Элементы.ОбработкаОтветовЕГАИС);
	
КонецПроцедуры

&НаСервере
Функция ЗаписатьНастройкуОбмена(ЗаписыватьНастройкуОбмена = Истина)
	
	НачатьТранзакцию();
	Попытка
		
		СоздатьЭлементКлассификатораОрганизацийЕГАИС();
		
		Если ЗаписыватьНастройкуОбмена Тогда
			Результат = Записать();
			Если Не Результат Тогда
				ОтменитьТранзакцию();
			КонецЕсли;
		Иначе
			Результат = Истина;
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		
		ЗаписьЖурналаРегистрации(НСтр("ru = 'ЕГАИС'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			Возврат Ложь;
		
	КонецПопытки;
	
	ЗаполнитьДанные();
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура СоздатьЭлементКлассификатораОрганизацийЕГАИС()
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КлассификаторОрганизацийЕГАИС.Ссылка КАК ОрганизацияЕГАИС
	|ИЗ
	|	Справочник.КлассификаторОрганизацийЕГАИС КАК КлассификаторОрганизацийЕГАИС
	|ГДЕ
	|	КлассификаторОрганизацийЕГАИС.Код = &КодВФСРАР");
	Запрос.УстановитьПараметр("КодВФСРАР", Запись.ИдентификаторФСРАР);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ОрганизацияОбъект = Справочники.КлассификаторОрганизацийЕГАИС.СоздатьЭлемент();
	ОрганизацияОбъект.Код = Запись.ИдентификаторФСРАР;
	ОрганизацияОбъект.ФорматОбмена = ИнтеграцияЕГАИСКлиентСервер.ФорматОбмена();
	ОрганизацияОбъект.СоответствуетОрганизации = Истина;
	ОрганизацияОбъект.Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройкуРасписанияОбмена(ОписаниеОповещения, РасписаниеРегламентногоЗадания)
	
	Если РасписаниеРегламентногоЗадания = Неопределено Тогда
		РасписаниеРегламентногоЗадания = Новый РасписаниеРегламентногоЗадания;
	КонецЕсли;
	
	Диалог = Новый ДиалогРасписанияРегламентногоЗадания(РасписаниеРегламентногоЗадания);
	Если Диалог.ОткрытьМодально() Тогда 
		ВыполнитьОбработкуОповещенияЕГАИС(ОписаниеОповещения, РасписаниеРегламентногоЗадания);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьРасписаниеОбмена(РасписаниеЗадания, ДополнительныеПараметры) Экспорт
	
	Если РасписаниеЗадания = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РасписаниеОбмена = РасписаниеЗадания;
	
	Если ОбменНаСервере = 1 Тогда
		
		ИзменитьРасписаниеОбменаНаСервере();
		
	Иначе
		
		ИзменитьРасписаниеОбменаНаКлиенте(ЭтаФорма, РасписаниеОбмена);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьРасписаниеОбменаНаКлиенте(Форма, НовоеРасписание)
	
	Если НовоеРасписание = Неопределено Тогда
		
		ТекстРасписания = НСтр("ru = '<Расписание не задано>'");
		
	Иначе
		
		Если Форма.ОбменПоРасписанию Тогда
			ТекстРасписания = СтрШаблон(НСтр("ru = 'Расписание: %1'"), Строка(НовоеРасписание));
		Иначе
			ТекстРасписания = СтрШаблон(НСтр("ru = 'Расписание (НЕ АКТИВНО): %1'"), Строка(НовоеРасписание));
		КонецЕсли;
		
	КонецЕсли;
	
	Форма.Элементы.ОбработкаОтветовЕГАИС.Доступность = Форма.ОбменПоРасписанию;
	Форма.Элементы.ОбработкаОтветовЕГАИС.Заголовок = ТекстРасписания;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьРасписаниеОбменаНаСервере()
	
	ИзменитьИспользованиеЗадания("ОбработкаОтветовЕГАИС", ОбменПоРасписанию);
	ИзменитьРасписаниеЗадания("ОбработкаОтветовЕГАИС", РасписаниеОбмена);
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьИспользованиеЗадания(ИмяЗадания, Использование)
	
	РегЗадание = РегламентныеЗадания.НайтиПредопределенное(ИмяЗадания);
	
	РегЗадание.Использование = Использование;
	РегЗадание.Записать();
	
	РегЗадание = РегламентныеЗадания.НайтиПредопределенное(ИмяЗадания);
	
	Элемент = Элементы[ИмяЗадания];
	УстановитьТекстНадписиРегламентнойНастройки(РегЗадание, Элемент);
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьРасписаниеЗадания(ИмяЗадания, РасписаниеРегламентногоЗадания)
	
	РегЗадание = РегламентныеЗадания.НайтиПредопределенное(ИмяЗадания);

	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("Расписание", РасписаниеРегламентногоЗадания);
	РегЗадание.Расписание = РасписаниеРегламентногоЗадания;
	РегЗадание.Записать();
	
	РегЗадание = РегламентныеЗадания.НайтиПредопределенное(ИмяЗадания);
	
	Элемент = Элементы[ИмяЗадания];
	УстановитьТекстНадписиРегламентнойНастройки(РегЗадание, Элемент);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьТекстНадписиРегламентнойНастройки(Задание, Элемент)
	
	Перем ТекстРасписания;
	
	ПолучитьТекстЗаголовкаИРасписанияРегламентнойНастройки(Задание, ТекстРасписания, ОбменПоРасписанию);
	Элемент.Заголовок   = ТекстРасписания;
	Элемент.Доступность = ОбменПоРасписанию;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьТекстЗаголовкаИРасписанияРегламентнойНастройки(Задание, ТекстРасписания, РасписаниеАктивно) Экспорт
	
	РасписаниеАктивно = Ложь;
	
	Если Задание = Неопределено Тогда
		
		ТекстРасписания = НСтр("ru = '<Расписание не задано>'");
		
	Иначе
		
		Если Задание.Использование Тогда
			РасписаниеАктивно = Истина;
			ТекстРасписания = СтрШаблон(НСтр("ru = 'Расписание: %1'"), Строка(Задание.Расписание));
		Иначе
			ТекстРасписания = СтрШаблон(НСтр("ru = 'Расписание (НЕ АКТИВНО): %1'"), Строка(Задание.Расписание));
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция КодФСРАРИзУТМНаСервере(НастройкаОбмена)
	
	Возврат ИнтеграцияЕГАИСКлиентСервер.КодФСРАР(НастройкаОбмена);
	
КонецФункции

&НаКлиенте
Функция КодФСРАРИзУТМНаКлиенте(НастройкаОбмена)
	
	Возврат ИнтеграцияЕГАИСКлиентСервер.КодФСРАР(НастройкаОбмена);
	
КонецФункции

&НаКлиенте
Процедура ПолучитьКодФСРАРИзУТМ(ОписаниеОповещения, Таймаут)
	
	ОчиститьСообщения();
	
	НастройкаОбмена = ИнтеграцияЕГАИСКлиентСервер.НоваяНастройкаОбменаЕГАИС();
	ЗаполнитьЗначенияСвойств(НастройкаОбмена,Запись);
	НастройкаОбмена.Таймаут = Таймаут;
	НастройкаОбмена.ПолучитьДвоичныеДанные = Истина;
	
	Если ОбменНаСервере = 1 Тогда
		Результат = КодФСРАРИзУТМНаСервере(НастройкаОбмена);
	Иначе
		Результат = КодФСРАРИзУТМНаКлиенте(НастройкаОбмена);
	КонецЕсли;
	
	ВыполнитьОбработкуОповещенияЕГАИС(ОписаниеОповещения, Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПодключениеКУТМ()
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОтображатьСообщенияОбОшибках", Ложь);
	
	ПолучитьКодФСРАРИзУТМ(
		ОписаниеОповещенияЕГАИС("ПослеПроверкиПодключенияКУТМ", ЭтаФорма, ДополнительныеПараметры), 1);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПроверкиПодключенияКУТМ(РезультатПроверки, ДополнительныеПараметры = Неопределено) Экспорт
	
	КодФСРАРИзУТМ = РезультатПроверки.КодФСРАР;
	
	Если ЗначениеЗаполнено(КодФСРАРИзУТМ)
		И КодФСРАРИзУТМ = Запись.ИдентификаторФСРАР Тогда
		
		ПодключениеНастроеноКорректно = Истина;
		УказанПравильныйКодФСРАР      = Истина;
		
		Элементы.СтраницыПроверкаПодключения.ТекущаяСтраница = Элементы.СтраницыПроверкаПодключения.ПодчиненныеЭлементы.ПроверкаПодключенияКорректно;
		
	ИначеЕсли КодФСРАРИзУТМ = "WebClient" Тогда
		
		ПодключениеНастроеноКорректно = Истина;
		УказанПравильныйКодФСРАР      = Истина;
		
		Элементы.СтраницыПроверкаПодключения.ТекущаяСтраница = Элементы.СтраницыПроверкаПодключения.ПодчиненныеЭлементы.ПроверкаПодключенияНедоступна;
		
	ИначеЕсли ЗначениеЗаполнено(КодФСРАРИзУТМ) Тогда
		
		ПодключениеНастроеноКорректно = Истина;
		УказанПравильныйКодФСРАР      = Ложь;
		
		Элементы.СтраницыПроверкаПодключения.ТекущаяСтраница = Элементы.СтраницыПроверкаПодключения.ПодчиненныеЭлементы.ПереданНеверныйКодФСРАР;
		
		Если ДополнительныеПараметры.ОтображатьСообщенияОбОшибках Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатПроверки.ТекстОшибки);
		КонецЕсли;
		
	Иначе
		
		Если ДополнительныеПараметры.ОтображатьСообщенияОбОшибках Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатПроверки.ТекстОшибки);
		КонецЕсли;
		
		Элементы.СтраницыПроверкаПодключения.ТекущаяСтраница = Элементы.СтраницыПроверкаПодключения.ПодчиненныеЭлементы.НетСвязиСУТМ;
		
	КонецЕсли;
	
	ОбновитьТекстСопоставления();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеОткрытияWebИнтерфейсаУТМ(Результат, ДополнительныеПараметры) Экспорт
	Возврат;
КонецПроцедуры

&НаКлиенте
Процедура ГруппаВыполняетсяПроверкаПодключенияКУТМНадписьОбработкаНавигационнойСсылки(Элемент, СтандартнаяОбработка)
	
	НавигационнаяСсылкаФорматированнойСтроки = "";
	ОбработатьНавигационнуюСсылку(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаНетСвязиСУТМНадписьОбработкаНавигационнойСсылки(Элемент, СтандартнаяОбработка)
	
	НавигационнаяСсылкаФорматированнойСтроки = "Повторить";
	ОбработатьНавигационнуюСсылку(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаПодключениеНастроеноКорректноНадписьОбработкаНавигационнойСсылки(Элемент, СтандартнаяОбработка)
	
	НавигационнаяСсылкаФорматированнойСтроки = "ОткрытьWebИнтерфейсУТМ";
	ОбработатьНавигационнуюСсылку(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаГруппаПроверкаНеПодключенияНеВыполняласьНадписьОбработкаНавигационнойСсылки(Элемент, СтандартнаяОбработка)
	
	НавигационнаяСсылкаФорматированнойСтроки = "ПроверитьПодключениеКУТМ";
	ОбработатьНавигационнуюСсылку(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьНавигационнуюСсылку(Знач НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОтображатьСообщенияОбОшибках", Истина);
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ПроверитьПодключениеКУТМ" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ПолучитьКодФСРАРИзУТМ(
			ОписаниеОповещенияЕГАИС("ПослеПроверкиПодключенияКУТМ", ЭтаФорма, ДополнительныеПараметры), Запись.Таймаут)
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ОткрытьWebИнтерфейсУТМ" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ОбщегоНазначенияКлиент.ОткрытьНавигационнуюСсылку(
			"http://" + Запись.АдресУТМ + ":" + Формат(Запись.ПортУТМ, "ЧГ=0") + "/",
			ОписаниеОповещенияЕГАИС("ПослеОткрытияWebИнтерфейсаУТМ", ЭтаФорма));
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "Повторить" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ПолучитьКодФСРАРИзУТМ(
			ОписаниеОповещенияЕГАИС("ПослеПроверкиПодключенияКУТМ", ЭтаФорма, ДополнительныеПараметры), Запись.Таймаут);
		
	КонецЕсли;

КонецПроцедуры

//КонецОбласти