
&НаКлиенте
Перем СоответствиеВидовИТипов;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("РежимОткрытияОкна") Тогда
		ЭтаФорма.РежимОткрытияОкна = Параметры.РежимОткрытияОкна;
	КонецЕсли;
	
	СоответствиеВидовИТипов = Новый Соответствие;
	
	Если Параметры.Ключ.Пустая() Тогда
		УстановитьМодифицированностьФормы = Истина;
		
		Объект.СостояниеСоглашения = Перечисления.СостоянияСоглашенийЭД.ОжидаетсяСогласование;
		Объект.ВерсияФорматаПакета = Перечисления.ВерсииФорматаПакетаЭД.Версия30;
		
		Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
			Объект.Наименование = Строка(Объект.Контрагент);
		КонецЕсли;
		
		Если Параметры.Свойство("Организация") Тогда
			Объект.Организация = Параметры.Организация;
		КонецЕсли;
		
		// Заполним по умолчанию профиль настроек ЭДО.
		Если Не ЗначениеЗаполнено(Объект.ПрофильНастроекЭДО) Тогда
			УстановитьЗначенияПоУмолчанию();
		КонецЕсли;
		
		// При создании из профиля настроек ЭДО, он передается в настройку.
		Если ЗначениеЗаполнено(Объект.ПрофильНастроекЭДО) Тогда
			ПрофильНастроекЭДОПриИзмененииНаСервере();
		КонецЕсли;
		
		ЗаполнитьПоШаблонуНаСервере("Автоматически", СоответствиеВидовИТипов);
		
		ПодготовитьФорму();
	Иначе
		ЗаполнитьСоответствиеВидовИТипов(СоответствиеВидовИТипов);
	КонецЕсли;
	
	АдресСоответствияВидовИТипов  = ПоместитьВоВременноеХранилище(СоответствиеВидовИТипов,УникальныйИдентификатор);
	
	ЭлектронныеДокументыСлужебный.УстановитьУсловноеОформлениеФорматов(ЭтаФорма);
	
	ОбновитьСтатусПодключения();
	
	СкрытьПодменюЭДО();
	
	ЗаполнитьПредставлениеНастроек(Объект);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// Если объект - является соглашением-Интеркампани, то ничего
	// не выполняем на сервере и при переходе процедуру при открытии, откроем нужную форму.
	Если Объект.ЭтоИнтеркампани ИЛИ Объект.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезВебРесурсБанка Тогда
		Возврат;
	КонецЕсли;
	
	РеквизитыКонтрагента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 ИНН: %2 КПП: %3'"), 
		Объект.НаименованиеКонтрагента, Объект.ИННКонтрагента, Объект.КППКонтрагента);
	
	ПодготовитьФорму();
	ЗаполнитьПредставлениеНастроек(Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// При заполнении настройки ЭДО на сервере взведем модифицированность вручную.
	Если УстановитьМодифицированностьФормы Тогда
		ЭтаФорма.Модифицированность = истина;
	КонецЕсли;
	
	#Если ВебКлиент Тогда
		Элементы.КаталогВходящихДокументов.КнопкаВыбора = Ложь;
		Элементы.КаталогИсходящихДокументов.КнопкаВыбора = Ложь;
	#КонецЕсли
	
	Если ЭтоАдресВременногоХранилища(АдресСоответствияВидовИТипов) Тогда
		СоответствиеВидовИТипов = ПолучитьИзВременногоХранилища(АдресСоответствияВидовИТипов);
	КонецЕсли;
	
	ВывестиПредставленияТиповДокументов();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновитьСостояниеЭД" Тогда
		Прочитать();
		
		ОбновитьСтатусПодключения();
		ЭтаФорма.ОбновитьОтображениеДанных();
		ВывестиПредставленияТиповДокументов();
		
	ИначеЕсли ВРег(ИмяСобытия) = ВРег("ОбновитьИсходящиеЭД") Тогда
		
		Если Объект.РасширенныйРежимНастройкиСоглашения Тогда
			Возврат;
		КонецЕсли;
		
		Если Не Объект.ПрофильНастроекЭДО = Параметр Тогда
			Возврат;
		КонецЕсли;
		
		ОпределитьИспользованиеКаталога(Истина);
		
	ИначеЕсли ВРег(ИмяСобытия) = ВРег("Запись_НаборКонстант")
		И ВРег(Источник) = ВРег("ИспользоватьЭлектронныеПодписи") Тогда
		
		ЗаполнитьПредставлениеНастроек(Объект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	ИспользованиеИдентификатораКонтрагентаУникально(Отказ);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Для каждого ДанныеСтроки Из Объект.СертификатыПодписейКонтрагента Цикл
		Если НЕ ПустаяСтрока(ДанныеСтроки.АдресФайлаВХранилище) Тогда
			ДвоичныеДанные = ПолучитьИзВременногоХранилища(ДанныеСтроки.АдресФайлаВХранилище);
			ХранилищеЗначения = Новый ХранилищеЗначения(ДвоичныеДанные);
			ТекущийОбъект.СертификатыПодписейКонтрагента[ДанныеСтроки.НомерСтроки - 1].Сертификат = ХранилищеЗначения;
		КонецЕсли;
	КонецЦикла; 
	
	// Помещение нового сертификата шифрования из временного хранилища
	Если Не ПустаяСтрока(АдресСертификатаКонтрагентаДляШифрования) И НЕ ПустаяСтрока(ПредставлениеСертификатаКонтрагентаДляШифрования) Тогда
		ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресСертификатаКонтрагентаДляШифрования);
		ХранилищеЗначения = Новый ХранилищеЗначения(ДвоичныеДанные);
		ТекущийОбъект.СертификатКонтрагентаДляШифрования = ХранилищеЗначения;
	ИначеЕсли ПустаяСтрока(ПредставлениеСертификатаКонтрагентаДляШифрования) Тогда
		ТекущийОбъект.СертификатКонтрагентаДляШифрования = Новый ХранилищеЗначения(Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если ЭтаФорма.ЧерезКаталог ИЛИ ЭтаФорма.ЧерезЭлектроннуюПочту ИЛИ ЭтаФорма.ЧерезFTP Тогда
	
		Если (ЗначениеЗаполнено(Объект.СертификатОрганизацииДляРасшифровки) И Не ЗначениеЗаполнено(ПредставлениеСертификатаКонтрагентаДляШифрования))
			ИЛИ (Не ЗначениеЗаполнено(Объект.СертификатОрганизацииДляРасшифровки) И ЗначениеЗаполнено(ПредставлениеСертификатаКонтрагентаДляШифрования)) Тогда
			
			ТекстСообщения = НСтр("ru='Для корректной работы шифрования необходимо
									|одновременно указывать сертификаты шифрования для организации и контрагента.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , , , Отказ);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ПОЛЕЙ ФОРМЫ

&НаКлиенте
Процедура СостояниеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = ДопустимыеСостоянияСоглашенияДляВыбора();
	
КонецПроцедуры

&НаКлиенте
Процедура СостояниеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ВыбранноеЗначение = ПредопределенноеЗначение("Перечисление.СостоянияСоглашенийЭД.Закрыто")
		ИЛИ ВыбранноеЗначение = ПредопределенноеЗначение("Перечисление.СостоянияСоглашенийЭД.ОжидаетсяСогласование") Тогда
		
		Если ЧерезОператораЭДО Тогда
			СтандартнаяОбработка = Ложь;
			
			КодВозврата = Вопрос(НСтр("ru = 'При отмене действия соглашения необходимо отклонить приглашение.
											|Отклонить?'"), РежимДиалогаВопрос.ДаНет);
			Если КодВозврата = КодВозвратаДиалога.Да Тогда
				
				ПараметрыФормы = Новый Структура;
				ПараметрыФормы.Вставить("НастройкаЭДО",     Объект.Ссылка);
				ПараметрыФормы.Вставить("ФормаОткрытаИзНастройкиЭДО", Истина);
				ПараметрыФормы.Вставить("Отклонить",                  Истина);
				
				ОткрытьФорму("Справочник.СоглашенияОбИспользованииЭД.Форма.ФормаПриглашения", ПараметрыФормы);
			КонецЕсли;
		Иначе
			Объект.СтатусПодключения = ПредопределенноеЗначение("Перечисление.СтатусыУчастниковОбменаЭД.Отсоединен");
		КонецЕсли;
	Иначе
		Объект.СтатусПодключения = ПредопределенноеЗначение("Перечисление.СтатусыУчастниковОбменаЭД.Присоединен");
	КонецЕсли;

	ОбновитьСтатусПодключения(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияОтправительПриИзменении(Элемент)
	
	ОбновитьПризнакИспользованияДляОтправки();
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	МенятьИдентификаторКонтрагента = Истина;
	
	Если ЗначениеЗаполнено(Объект.ИдентификаторКонтрагента) Тогда
		ТекстВопроса = НСтр("ru = 'Идентификатор получателя заполнен, при изменении контрагента он будет изменен.
			|Изменить идентификатор получателя?'");
		
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет);
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			МенятьИдентификаторКонтрагента = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	КонтрагентПриИзмененииНаСервере(МенятьИдентификаторКонтрагента);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрофильНастроекЭДОПриИзменении(Элемент)
	
	КодВозврата = Вопрос(НСтр("ru = 'Будет сброшено значение в поле ""Идентификатор получателя"" на форме настройки ЭДО.
									|Продолжить?'"), РежимДиалогаВопрос.ДаНет);
	Если КодВозврата = КодВозвратаДиалога.Да Тогда
		ПрофильНастроекЭДОПриИзмененииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаПриИзменении(Элемент)
	
	Объект.Наименование = Строка(Объект.Контрагент) + ?(ЗначениеЗаполнено(Объект.ДоговорКонтрагента),
		", " + Строка(Объект.ДоговорКонтрагента), "");
		
	ОбновитьПризнакИспользованияДляОтправки();
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Не ОсновнаяНастройкаСуществует() Тогда
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

// Настройки обмена через оператора

&НаКлиенте
Процедура ИдентификаторКонтрагентаПриИзменении(Элемент)
	
	Объект.ИдентификаторКонтрагента = СокрЛП(Объект.ИдентификаторКонтрагента);
	ОпределитьИспользуемыеСпособыОбменаЭД(Неопределено, Объект.ИдентификаторКонтрагента);
	
КонецПроцедуры

// Настройки прямого обмена

&НаКлиенте
Процедура КаталогВходящихДокументовПриИзменении(Элемент)
	
	ОбновитьВходящийКаталога(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КаталогВходящихДокументовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбработатьВыборКаталога(Элемент.ТекстРедактирования, Объект.КаталогВходящихДокументов);
	
КонецПроцедуры

&НаКлиенте
Процедура КаталогИсходящихДокументовПриИзменении(Элемент)
	
	ОбновитьИсходящийКаталог(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КаталогИсходящихДокументовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбработатьВыборКаталога(Элемент.ТекстРедактирования, Объект.КаталогИсходящихДокументов);
	
КонецПроцедуры

&НаКлиенте
Процедура ШифроватьДанныеПакетаЭДПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.СертификатОрганизацииДляРасшифровки)
		ИЛИ ЗначениеЗаполнено(ЭтаФорма.ПредставлениеСертификатаКонтрагентаДляШифрования) Тогда
		
		КодВозврата = Вопрос(НСтр("ru = 'Настройки шифрования будут очищены. Продолжить?'"), РежимДиалогаВопрос.ДаНет);
		Если КодВозврата = КодВозвратаДиалога.Да Тогда
			Объект.СертификатОрганизацииДляРасшифровки = ПредопределенноеЗначение("Справочник.СертификатыЭЦП.ПустаяСсылка");
			ПоместитьВХранилищеСертификат();
		Иначе
			Объект.ШифроватьДанныеПакетаЭД = Не Объект.ШифроватьДанныеПакетаЭД;
		КонецЕсли;
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверятьСертификатыПодписейПриИзменении(Элемент)
	
	Если Объект.СертификатыПодписейКонтрагента.Количество() <> 0 Тогда
		
		КодВозврата = Вопрос(НСтр("ru = 'Настройки проверка сертификатов подписи контрагентов будут очищены. Продолжить?'"),
			РежимДиалогаВопрос.ДаНет);
		Если КодВозврата = КодВозвратаДиалога.Да Тогда
			Объект.СертификатыПодписейКонтрагента.Очистить();
		Иначе
			Объект.ПроверятьСертификатыПодписей = Не Объект.ПроверятьСертификатыПодписей;
		КонецЕсли;
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СертификатКонтрагентаДляШифрованияПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(Элемент.ТекстРедактирования) Тогда
		ПоместитьВХранилищеСертификат();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СертификатКонтрагентаДляШифрованияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	АдресВХранилище = Неопределено;
	Если ПоместитьФайл(АдресВХранилище, "", , Истина, УникальныйИдентификатор) Тогда
		ПоместитьВХранилищеСертификат(АдресВХранилище);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользуетсяДляОтправкиПриИзменении(Элемент)
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ОтправитьПриглашение(Команда)
	
	Если Модифицированность Тогда
		КодВозврата = Вопрос(НСтр("ru = 'В текущую настройку ЭДО внесены изменения.
										|Записать?'"), РежимДиалогаВопрос.ДаНет);
		Если КодВозврата = КодВозвратаДиалога.Да Тогда
			Записать();
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("НастройкаЭДО",               Объект.Ссылка);
	ПараметрыФормы.Вставить("ФормаОткрытаИзНастройкиЭДО", Истина);
	
	ОткрытьФорму("Справочник.СоглашенияОбИспользованииЭД.Форма.ФормаПриглашения", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ПринятьПриглашение(Команда)
	
	Если Модифицированность Тогда
		КодВозврата = Вопрос(НСтр("ru = 'В текущую настройку ЭДО внесены изменения.
										|Записать?'"), РежимДиалогаВопрос.ДаНет);
		Если КодВозврата = КодВозвратаДиалога.Да Тогда
			Записать();
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("НастройкаЭДО",     Объект.Ссылка);
	ПараметрыФормы.Вставить("ФормаОткрытаИзНастройкиЭДО", Истина);
	ПараметрыФормы.Вставить("Принять",                    Истина);
	
	ОткрытьФорму("Справочник.СоглашенияОбИспользованииЭД.Форма.ФормаПриглашения", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтклонитьПриглашение(Команда)
	
	Если Модифицированность Тогда
		КодВозврата = Вопрос(НСтр("ru = 'В текущую настройку ЭДО внесены изменения.
										|Записать?'"), РежимДиалогаВопрос.ДаНет);
		Если КодВозврата = КодВозвратаДиалога.Да Тогда
			Записать();
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("НастройкаЭДО",     Объект.Ссылка);
	ПараметрыФормы.Вставить("ФормаОткрытаИзНастройкиЭДО", Истина);
	ПараметрыФормы.Вставить("Отклонить",                  Истина);
	
	ОткрытьФорму("Справочник.СоглашенияОбИспользованииЭД.Форма.ФормаПриглашения", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ТестНастроек(Команда)
	
	ОчиститьСообщения();
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	Если Модифицированность Тогда
		ТекстВопроса = НСтр("ru = 'В текущую настройку ЭДО внесены изменения. Продолжить выполнение теста?'");
		СписокКнопок = Новый СписокЗначений();
		СписокКнопок.Добавить("Выполнить", НСтр("ru = 'Сохранить и выполнить тест'"));
		СписокКнопок.Добавить("Отменить", НСтр("ru = 'Отменить тест.'"));
		Ответ = Вопрос(ТекстВопроса, СписокКнопок, , "Выполнить", НСтр("ru = 'Тест настроек'"));
		Если Ответ = "Отменить" Тогда
			Возврат;
		Иначе
			Записать();
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЭлектронныеДокументыСлужебныйВызовСервера.ПроверитьСоответствиеОрганизаций(Объект.Ссылка) Тогда
		ТекстСообщения = НСтр("ru = 'Различаются организации в профиле, настройке ЭДО, сертификате. Тест не выполнен.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;	
	
	Если ЧерезОператораЭДО Тогда
		
		// Блок проверки связи с оператором.
		Состояние(НСтр("ru = 'Тест настроек.'"),
			,
			НСтр("ru = 'Выполняется тестирование связи с оператором. Подождите...'"));
		
		ЗавершитьТесты = Ложь;
		
		// Блок проверки версии платформы.
		СистемнаяИнформация = Новый СистемнаяИнформация;
		
		РезультатТеста = НСтр("ru = 'Пройден успешно.'");
		Если ОбщегоНазначенияКлиентСервер.СравнитьВерсии(СистемнаяИнформация.ВерсияПриложения, "8.2.17.0") < 0 Тогда
			РезультатТеста = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьСообщениеОбОшибке("106");
			ЗавершитьТесты = Истина;
		КонецЕсли;
		ШаблонСообщения = НСтр("ru = 'Тест. Проверка версии платформы 1С.
									|%1'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, РезультатТеста);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
		// Критичная ошибка - дальше тесты не проводим.
		Если ЗавершитьТесты Тогда
			Возврат;
		КонецЕсли;
		
		Отбор = Новый Структура;
		Отбор.Вставить("СпособОбменаЭД", ПредопределенноеЗначение("Перечисление.СпособыОбменаЭД.ЧерезОператораЭДОТакском"));
		СтрокиТаблицыИсходящихДокументов = Объект.ИсходящиеДокументы.НайтиСтроки(Отбор);
		Если ЗначениеЗаполнено(СтрокиТаблицыИсходящихДокументов) Тогда
			
			ПараметрыПрофиляНастроекЭДО = ПараметрыПрофиляНастроекЭДО(СтрокиТаблицыИсходящихДокументов[0].ПрофильНастроекЭДО);
			ПроверитьСертификаты(ПараметрыПрофиляНастроекЭДО);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Тест. Проверка связи с сервисом Такском.'"));
			Если ПараметрыПрофиляНастроекЭДО.СертификатыПодписейОрганизации.Количество() = 0 Тогда
				ТекстСообщения = НСтр("ru = 'Сертификаты для проверки связи отсутствуют или по ним выявлены ошибки.
				|Тест отменен.'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				Возврат;
			КонецЕсли;
			
			СертификатыПрофиля = ПараметрыПрофиляНастроекЭДО.СертификатыПодписейОрганизации;
			НаКлиенте = Ложь;
			НаСервере = Ложь;
			Если ЭлектронныеДокументыСлужебныйВызовСервера.ВыполнятьАвторизациюНаСервере() Тогда
				СертификатыДляВыбора = ОтобратьСертификатыСервера(СертификатыПрофиля);
				НаСервере = Истина;
			Иначе
				СертификатыДляВыбора = ОтобратьСертификатыКлиента(СертификатыПрофиля);
				НаКлиенте = Истина;
			КонецЕсли;
			
			Для Каждого Элемент Из СертификатыДляВыбора Цикл
				Сертификат = Элемент.Ключ;
				ПараметрыСертификата = Элемент.Значение;
				ПараметрыСертификата.Вставить("СпособОбменаЭД", СтрокиТаблицыИсходящихДокументов[0].СпособОбменаЭД);
				ПараметрыСертификата.Вставить("ИдентификаторОрганизации", СтрокиТаблицыИсходящихДокументов[0].ИдентификаторОрганизации);
				
				Если НаКлиенте Тогда
					
					Если ЭлектронныеДокументыСлужебныйКлиент.ТестСвязиСОператоромЭДО(ПараметрыСертификата, Ложь) Тогда
						РезультатТеста = НСтр("ru = 'Пройден успешно.'");
						Прервать;
					КонецЕсли;
				Иначе
					Если ЭлектронныеДокументыСлужебныйВызовСервера.ТестСвязиСОператоромЭДО(ПараметрыСертификата, Ложь) Тогда
						РезультатТеста = НСтр("ru = 'Пройден успешно.'");
						Прервать;
					КонецЕсли;
				КонецЕсли;
				РезультатТеста = НСтр("ru = 'Не пройден.'");
			КонецЦикла;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатТеста);
		КонецЕсли;
		
		Отбор = Новый Структура;
		Отбор.Вставить("СпособОбменаЭД", ПредопределенноеЗначение("Перечисление.СпособыОбменаЭД.ЧерезСервис1СЭДО"));
		СтрокиТаблицыИсходящихДокументов = Объект.ИсходящиеДокументы.НайтиСтроки(Отбор);
		Если ЗначениеЗаполнено(СтрокиТаблицыИсходящихДокументов) Тогда
			
			ПараметрыПрофиляНастроекЭДО = ПараметрыПрофиляНастроекЭДО(СтрокиТаблицыИсходящихДокументов[0].ПрофильНастроекЭДО);
			ПроверитьСертификаты(ПараметрыПрофиляНастроекЭДО);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Тест. Проверка связи с сервисом 1С ЭДО.'"));
			Если ПараметрыПрофиляНастроекЭДО.СертификатыПодписейОрганизации.Количество() = 0 Тогда
				ТекстСообщения = НСтр("ru = 'Сертификаты для проверки связи отсутствуют или по ним выявлены ошибки.
				|Тест отменен.'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				Возврат;
			КонецЕсли;
			
			ПараметрыАутентификации = ЭлектронныеДокументыСлужебныйКлиент.АутентификацияНаСайте();
			Если ПараметрыАутентификации = Неопределено Тогда
				Возврат;
			КонецЕсли;
			
			СертификатыПрофиля = ПараметрыПрофиляНастроекЭДО.СертификатыПодписейОрганизации;
			НаКлиенте = Ложь;
			НаСервере = Ложь;
			Если ЭлектронныеДокументыСлужебныйВызовСервера.ВыполнятьАвторизациюНаСервере() Тогда
				СертификатыДляВыбора = ОтобратьСертификатыСервера(СертификатыПрофиля);
				НаСервере = Истина;
			Иначе
				СертификатыДляВыбора = ОтобратьСертификатыКлиента(СертификатыПрофиля);
				НаКлиенте = Истина;
			КонецЕсли;
			
			Для Каждого Элемент Из СертификатыДляВыбора Цикл
				Сертификат = Элемент.Ключ;
				ПараметрыСертификата = Элемент.Значение;
				
				СтруктураПараметровЗапросаМаркера = ПараметрыСертификата;
				СтруктураПараметровЗапросаМаркера.Вставить("СпособОбменаЭД",           СтрокиТаблицыИсходящихДокументов[0].СпособОбменаЭД);
				СтруктураПараметровЗапросаМаркера.Вставить("ИдентификаторОрганизации", СтрокиТаблицыИсходящихДокументов[0].ИдентификаторОрганизации);
				
				Если НаКлиенте Тогда
					
					Если ЭлектронныеДокументыСлужебныйКлиент.ТестСвязиСОператоромЭДО(СтруктураПараметровЗапросаМаркера, Ложь, ПараметрыАутентификации) Тогда
						РезультатТеста = НСтр("ru = 'Пройден успешно.'");
						Прервать;
					КонецЕсли;
				Иначе
					Если ЭлектронныеДокументыСлужебныйВызовСервера.ТестСвязиСОператоромЭДО(СтруктураПараметровЗапросаМаркера, Ложь, ПараметрыАутентификации) Тогда
						РезультатТеста = НСтр("ru = 'Пройден успешно.'");
						Прервать;
					КонецЕсли;
				КонецЕсли;
				РезультатТеста = НСтр("ru = 'Не пройден.'");
			КонецЦикла;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатТеста);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЧерезЭлектроннуюПочту Тогда
		Отбор = Новый Структура;
		Отбор.Вставить("СпособОбменаЭД", ПредопределенноеЗначение("Перечисление.СпособыОбменаЭД.ЧерезЭлектроннуюПочту"));
		СтрокаТаблицыИсходящихДокументов = Объект.ИсходящиеДокументы.НайтиСтроки(Отбор);

		Состояние(НСтр("ru = 'Тест настроек.'"),
			,
			НСтр("ru = 'Выполняется тестирование обмена ЭД через электронную почту. Подождите...'"));
		
		ПараметрыПрофиляНастроекЭДО = ПараметрыПрофиляНастроекЭДО(СтрокаТаблицыИсходящихДокументов[0].ПрофильНастроекЭДО);
		ПроверитьСертификаты(ПараметрыПрофиляНастроекЭДО);
		
		РаботаСПочтовымиСообщениямиКлиент.ПроверитьУчетнуюЗапись(ПараметрыПрофиляНастроекЭДО.РесурсВходящихДокументов);
		
	КонецЕсли;
	
	Если ЧерезКаталог Тогда
		Отбор = Новый Структура;
		Отбор.Вставить("СпособОбменаЭД", ПредопределенноеЗначение("Перечисление.СпособыОбменаЭД.ЧерезКаталог"));
		СтрокаТаблицыИсходящихДокументов = Объект.ИсходящиеДокументы.НайтиСтроки(Отбор);
		Состояние(НСтр("ru = 'Тест настроек.'"),
		,
		НСтр("ru = 'Выполняется тестирование обмена ЭД через каталог. Подождите...'"));
		
		ПараметрыПрофиляНастроекЭДО = ПараметрыПрофиляНастроекЭДО(СтрокаТаблицыИсходящихДокументов[0].ПрофильНастроекЭДО);
		ПроверитьСертификаты(ПараметрыПрофиляНастроекЭДО);
		
		ПутьКРодительскомуКаталогуПрофильНастроекЭДО = ПараметрыПрофиляНастроекЭДО.РесурсВходящихДокументов;
		
		ТестСвязиПрямогоОбменаНаСервере(
			ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(ПутьКРодительскомуКаталогуПрофильНастроекЭДО,
			Объект.КаталогВходящихДокументов),
			ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(ПутьКРодительскомуКаталогуПрофильНастроекЭДО,
			Объект.КаталогИсходящихДокументов));
	КонецЕсли;
	
	Если ЧерезFTP Тогда
		Отбор = Новый Структура;
		Отбор.Вставить("СпособОбменаЭД", ПредопределенноеЗначение("Перечисление.СпособыОбменаЭД.ЧерезFTP"));
		СтрокаТаблицыИсходящихДокументов = Объект.ИсходящиеДокументы.НайтиСтроки(Отбор);
		
		Состояние(НСтр("ru = 'Тест настроек.'"),
			,
			НСтр("ru = 'Выполняется тестирование обмена ЭД через FTP. Подождите...'"));
			
		ПараметрыПрофиляНастроекЭДО = ПараметрыПрофиляНастроекЭДО(СтрокаТаблицыИсходящихДокументов[0].ПрофильНастроекЭДО);
		ПроверитьСертификаты(ПараметрыПрофиляНастроекЭДО);
		
		ПутьКРодительскомуКаталогуПрофильНастроекЭДО = ПараметрыПрофиляНастроекЭДО.РесурсВходящихДокументов;
		
		ТестСвязиОбменаЧерезFTPНаСервере(СтрокаТаблицыИсходящихДокументов[0].ПрофильНастроекЭДО,
			ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(ПутьКРодительскомуКаталогуПрофильНастроекЭДО,
			Объект.КаталогВходящихДокументовFTP),
			ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(ПутьКРодительскомуКаталогуПрофильНастроекЭДО,
			Объект.КаталогИсходящихДокументовFTP));
	КонецЕсли;
	
	Если ЧерезКаталог ИЛИ ЧерезЭлектроннуюПочту ИЛИ ЧерезFTP Тогда
		ПроверитьШифрование();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВключитьРасширенныйРежимНастройкиСоглашения(Команда)
	
	Если Объект.РасширенныйРежимНастройкиСоглашения Тогда
		КодВозврата = Вопрос(НСтр("ru = 'Изменения раcширенного режима будут очищены.
										|Продолжить?'"), РежимДиалогаВопрос.ДаНет);
		Если КодВозврата = КодВозвратаДиалога.Да Тогда
			ВключитьРасширенныйРежимНастройкиСоглашенияНаСервере();
			Объект.РасширенныйРежимНастройкиСоглашения = Не Объект.РасширенныйРежимНастройкиСоглашения;
		КонецЕсли;
	Иначе
		Объект.РасширенныйРежимНастройкиСоглашения = Не Объект.РасширенныйРежимНастройкиСоглашения;
		
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма, Истина);
	
КонецПроцедуры

&НаСервере
Процедура ВключитьРасширенныйРежимНастройкиСоглашенияНаСервере()
	
	ПараметрыПрофиляНастроек = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.ПрофильНастроекЭДО,
		"ИсходящиеДокументы, ИспользоватьУПД, ИспользоватьУКД");
	
	Объект.ИспользоватьУПД = ПараметрыПрофиляНастроек.ИспользоватьУПД;
	Объект.ИспользоватьУКД = ПараметрыПрофиляНастроек.ИспользоватьУКД;
	
	// Загружаем ТЧ из профиля настроек ЭДО.
	Объект.ИсходящиеДокументы.Очистить();
	Если ЗначениеЗаполнено(ПараметрыПрофиляНастроек.ИсходящиеДокументы) Тогда
		Объект.ИсходящиеДокументы.Загрузить(ПараметрыПрофиляНастроек.ИсходящиеДокументы.Выгрузить());
		Объект.ИсходящиеДокументы.Сортировать("Приоритет");
	КонецЕсли;
	
	Если ЭлектронныеДокументыСлужебныйВызовСервера.ЭтоПрямойОбмен(Объект.СпособОбменаЭД) Тогда
		УстановитьИдентификатор("Контрагенты", Объект.Контрагент, Объект.ИдентификаторКонтрагента);
	КонецЕсли;
	
	ОпределитьИспользуемыеСпособыОбменаЭД(Объект.ПрофильНастроекЭДО, Объект.ИдентификаторКонтрагента);
	
	ЗаполнитьПредставлениеНастроек(Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиПредставленияТиповДокументов()
	
	Для Каждого СтрокаВидаЭД Из Объект.ВходящиеДокументы Цикл
		СписокВыбора = СоответствиеВидовИТипов.Получить(СтрокаВидаЭД.ВходящийДокумент);
		ЭлементСписка = СписокВыбора.НайтиПоЗначению(СтрокаВидаЭД.СпособОбработки);
		Если ЭлементСписка <> Неопределено Тогда
			СтрокаВидаЭД.ПредставлениеСпособаОбработки = ЭлементСписка.Представление;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоШаблону(Команда)
	
	ЗаполнитьПоШаблонуНаСервере(Сред(Команда.Имя,10), СоответствиеВидовИТипов);
	ВывестиПредставленияТиповДокументов();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоШаблонуНаСервере(Знач ИмяШаблона, СоответствиеВидовИТипов)

	Объект.ВходящиеДокументы.Загрузить(ЭлектронныеДокументыСлужебный.ТаблицаПредопределенногоПрофиля(ИмяШаблона));
	ЗаполнитьСоответствиеВидовИТипов(СоответствиеВидовИТипов);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСоответствиеВидовИТипов(СоответствиеВидовИТипов)

	СоответствиеВидовИТипов.Очистить();
	Для Каждого СтрокаВидаЭД Из Объект.ВходящиеДокументы Цикл
		СписокВыбора = ЭлектронныеДокументыСлужебный.СписокОперацийВидаЭД(СтрокаВидаЭД.ВходящийДокумент, Истина,
			НСтр("ru = 'Автоматически'") + " - ");
		СоответствиеВидовИТипов.Вставить(СтрокаВидаЭД.ВходящийДокумент, СписокВыбора);
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ПОЛЕЙ ТАБЛИЦЫ Исходящие Документы

&НаКлиенте
Процедура ИсходящиеДокументыПередНачаломИзменения(Элемент, Отказ)
	
	ОчиститьСообщения();
	
	Если Не Объект.РасширенныйРежимНастройкиСоглашения Тогда
		ТекстСообщения = НСтр("ru = 'Изменение табличной части ""Электронные документы"" возможно:
		|""групповое"" - в Профиле настроек ЭДО;
		|""индивидуальное"" - в расширенном режиме настроек.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , , , Отказ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсходящиеДокументыПриИзменении(Элемент)
	
	ОчиститьСообщения();
	
	Если Элемент.ТекущийЭлемент.Имя = "ИсходящиеДокументыФормировать" Тогда
		ЗначениеЭлемента = Элемент.ТекущиеДанные.Формировать;
		Если Не ЗначениеЭлемента Тогда
			Элемент.ТекущиеДанные.ИспользоватьЭЦП = ЗначениеЭлемента;
		КонецЕсли;
	КонецЕсли;
	
	Если Элемент.ТекущиеДанные.ИспользоватьЭЦП И НЕ Элемент.ТекущиеДанные.Формировать Тогда
		Если Элемент.ТекущийЭлемент.Имя = "ИсходящиеДокументыИспользоватьЭЦП" Тогда
			Элемент.ТекущиеДанные.Формировать = Истина;
		Иначе
			Элемент.ТекущиеДанные.ИспользоватьЭЦП = Ложь;
		КонецЕсли;
	КонецЕсли;
	Если Элемент.ТекущиеДанные.ИсходящийДокумент = ПредопределенноеЗначение("Перечисление.ВидыЭД.ПроизвольныйЭД")
		ИЛИ Не ЭлектронныеДокументыСлужебныйВызовСервера.ЭтоПрямойОбмен(Элемент.ТекущиеДанные.СпособОбменаЭД) Тогда
		
		Если Элемент.ТекущийЭлемент.Имя = "ИсходящиеДокументыИспользоватьЭЦП" И НЕ Элемент.ТекущиеДанные.ИспользоватьЭЦП Тогда
			ШаблонСообщения = НСтр("ru='Отправка документа %1 возможна только с использованием электронной подписи.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
				Элемент.ТекущиеДанные.ИсходящийДокумент);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
		Элемент.ТекущиеДанные.ИспользоватьЭЦП = Элемент.ТекущиеДанные.Формировать;
	ИначеЕсли Элемент.ТекущиеДанные.ИсходящийДокумент = ПредопределенноеЗначение("Перечисление.ВидыЭД.КаталогТоваров") Тогда
		
		ИспользуетсяКаталогВСоглашении = Элемент.ТекущиеДанные.Формировать;
	КонецЕсли;
	
	Если (Элемент.ТекущиеДанные.ИсходящийДокумент = ПредопределенноеЗначение("Перечисление.ВидыЭД.СчетФактура")
		ИЛИ Элемент.ТекущиеДанные.ИсходящийДокумент = ПредопределенноеЗначение("Перечисление.ВидыЭД.КорректировочныйСчетФактура"))
		И ЭлектронныеДокументыСлужебныйВызовСервера.ЭтоПрямойОбмен(Элемент.ТекущиеДанные.СпособОбменаЭД) Тогда
		
		Элемент.ТекущиеДанные.Формировать = Ложь;
		Элемент.ТекущиеДанные.ИспользоватьЭЦП = Ложь;
		
		ШаблонСообщения = НСтр("ru='Отправка документа %1 возможна только через оператора ЭДО.'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			Элемент.ТекущиеДанные.ИсходящийДокумент);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	Если (Элемент.ТекущиеДанные.ИсходящийДокумент = ПредопределенноеЗначение("Перечисление.ВидыЭД.АктНаПередачуПрав")
		ИЛИ Элемент.ТекущиеДанные.ИсходящийДокумент = ПредопределенноеЗначение("Перечисление.ВидыЭД.АктИсполнитель")
		ИЛИ Элемент.ТекущиеДанные.ИсходящийДокумент = ПредопределенноеЗначение("Перечисление.ВидыЭД.ТОРГ12Продавец"))
		И Объект.ИспользоватьУПД Тогда
		
		Элемент.ТекущиеДанные.Формировать = Ложь;
		
		ШаблонСообщения = НСтр("ru='Данные документ %1 передаются в составе счет-фактуры(универсального передаточного документа).'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			Элемент.ТекущиеДанные.ИсходящийДокумент);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	Если Элемент.ТекущиеДанные.ИсходящийДокумент = ПредопределенноеЗначение("Перечисление.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель")
		И Объект.ИспользоватьУКД Тогда
		
		Элемент.ТекущиеДанные.Формировать = Ложь;
		
		ШаблонСообщения = НСтр("ru='Данные документ %1 передаются в составе корректировочного счет-фактуры(универсального корректировочного документа).'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			Элемент.ТекущиеДанные.ИсходящийДокумент);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	Если Элемент.ТекущиеДанные.ИсходящийДокумент = ПредопределенноеЗначение("Перечисление.ВидыЭД.СчетФактура")
		И Не ЭлектронныеДокументыСлужебныйВызовСервера.ЭтоПрямойОбмен(Объект.СпособОбменаЭД) Тогда
		
		Если Элемент.ТекущиеДанные.ВерсияФормата = "ФНС 5.01 (УПД:Счет-фактура и первичный документ)"
			ИЛИ Элемент.ТекущиеДанные.ВерсияФормата = "ФНС 2019 (УПД:Счет-фактура и первичный документ)" Тогда
			Объект.ИспользоватьУПД = Истина;
			ИзменитьФлагУПДУКД();
		КонецЕсли;
	КонецЕсли;
	Если Элемент.ТекущиеДанные.ИсходящийДокумент = ПредопределенноеЗначение("Перечисление.ВидыЭД.КорректировочныйСчетФактура")
		И Не ЭлектронныеДокументыСлужебныйВызовСервера.ЭтоПрямойОбмен(Объект.СпособОбменаЭД) Тогда
		
		Если Элемент.ТекущиеДанные.ВерсияФормата = "ФНС 5.01 (УКД:Корректировочный счет-фактура и первичный документ)" Тогда
			Объект.ИспользоватьУКД = Истина;
			ИзменитьФлагУПДУКД();
		КонецЕсли;
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсходящиеДокументыВерсияФорматаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СписокВыбора = Элемент.СписокВыбора;
	СписокВыбора.Очистить();
	
	ИсходящийДокумент = Элементы.ИсходящиеДокументы.ТекущиеДанные.ИсходящийДокумент;
	СписокДоступныхВерсий = ЭлектронныеДокументыСлужебныйКлиент.ДоступныеВерсииФорматаПоПараметрамЭД(ИсходящийДокумент,
			Объект.СпособОбменаЭД, Объект.ИспользоватьУПД, Объект.ИспользоватьУКД);
			
	Для Каждого ЭлементСписка Из СписокДоступныхВерсий Цикл
		СписокВыбора.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсходящиеДокументыВерсияФорматаПриИзменении(Элемент)
	
	// Изменение представления регламента ЭДО при изменении формата документа Акт об оказании услуг.
	
	ТекущиеДанные = Элементы.ИсходящиеДокументы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИзменитьРегламентЭДОАкта(ТекущиеДанные.ПолучитьИдентификатор());

КонецПроцедуры

&НаКлиенте
Процедура ИсходящиеДокументыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "ИсходящиеДокументыРегламентЭДО" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ДанныеСтроки = Элемент.ТекущиеДанные;
		
		Если ДанныеСтроки = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Если Не ДанныеСтроки.Формировать Тогда
			Возврат;
		КонецЕсли;
		
		СвойстваФормы = ЭлектронныеДокументыСлужебныйКлиент.СвойстваДокументооборотаЭД();
		ЗаполнитьЗначенияСвойств(СвойстваФормы, ДанныеСтроки);
		СвойстваФормы.Вставить("ИспользоватьУПД", Объект.ИспользоватьУПД);
		
		НастройкиРегламентаЭДО = ЭлектронныеДокументыСлужебныйКлиент.НастройкиРегламентаЭДО(ДанныеСтроки.ИсходящийДокумент, ДанныеСтроки.ВерсияФормата, ДанныеСтроки.СпособОбменаЭД);
		
		СвойстваФормы.Вставить("НастройкиРегламентаЭДО", НастройкиРегламентаЭДО);
		СвойстваФормы.Вставить("Организация", Объект.Организация);
		
		ВариантОкна = ВариантОткрытияОкна.ОтдельноеОкно;
		
		НастройкаРегламента = ОткрытьФормуМодально("Справочник.СоглашенияОбИспользованииЭД.Форма.НастройкаРегламентаЭДО"
			,СвойстваФормы
			,Элемент);
			
		Если НастройкаРегламента = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ОбработатьИзменениеПрофиля = Ложь;
		Если Не ДанныеСтроки.ПрофильНастроекЭДО = НастройкаРегламента.ПрофильНастроекЭДО Тогда
			ОбработатьИзменениеПрофиля = Истина;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ДанныеСтроки, НастройкаРегламента);
		
		ЗаполнитьПредставлениеРегламентаЭДО(ДанныеСтроки);
		
		Модифицированность = Макс(Модифицированность, НастройкаРегламента.Модифицированность); 
		
		Если ОбработатьИзменениеПрофиля Тогда
			ИсходящиеДокументыПрофильНастроекЭДОПриИзмененииНаСервере(ДанныеСтроки.ПолучитьИдентификатор());
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьУКДПриИзменении(Элемент)
	
	ИзменитьФлагУПДУКД();
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьУПДПриИзменении(Элемент)
	
	ИзменитьФлагУПДУКД();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ПОЛЕЙ ТАБЛИЦЫ Входящие Документы

&НаКлиенте
Процедура ВходящиеДокументыПредставлениеСпособаОбработкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекСтрока = Элементы.ВходящиеДокументы.ТекущиеДанные;
	
	Если ТекСтрока <> Неопределено Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ВыбранныйЭлемент = ВыбратьИзСписка(
			СоответствиеВидовИТипов.Получить(ТекСтрока.ВходящийДокумент),
			Элементы.ВходящиеДокументыПредставлениеСпособаОбработки);
			
		Если ТипЗнч(ВыбранныйЭлемент) = Тип("ЭлементСпискаЗначений") Тогда
			ТекСтрока.СпособОбработки               = ВыбранныйЭлемент.Значение;
			ТекСтрока.ПредставлениеСпособаОбработки = ВыбранныйЭлемент.Представление;
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ПОЛЕЙ ТАБЛИЦЫ СЕРТИФИКАТЫ ПОДПИСЕЙ КОНТРАГЕНТА

&НаКлиенте
Процедура СертификатыПодписейКонтрагентаПредставлениеСертификатаКонтрагентаПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(Элемент.ТекстРедактирования) Тогда
		ВыбраннаяСтрока = Элементы.СертификатыПодписейКонтрагента.ТекущиеДанные;
		ДобавитьДанныеПоТабЧасти(ВыбраннаяСтрока);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СертификатыПодписейКонтрагентаПредставлениеСертификатаКонтрагентаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	// Для обновления предствления сертификата на форме
	АдресВХранилище = Неопределено;
	Если ПоместитьФайл(АдресВХранилище, "", , Истина, УникальныйИдентификатор) Тогда
		ВыбраннаяСтрока = Элементы.СертификатыПодписейКонтрагента.ТекущиеДанные;
		ДобавитьДанныеПоТабЧасти(ВыбраннаяСтрока, АдресВХранилище);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СертификатыПодписейКонтрагентаПредставлениеСертификатаКонтрагентаОчистка(Элемент, СтандартнаяОбработка)
	
	ВыбраннаяСтрока = Элементы.СертификатыПодписейКонтрагента.ТекущиеДанные;
	ДобавитьДанныеПоТабЧасти(ВыбраннаяСтрока);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

&НаСервере
Процедура ПодготовитьФорму()
	
	ОпределитьИспользуемыеСпособыОбменаЭД();
	
	Если ЧерезКаталог ИЛИ ЧерезЭлектроннуюПочту ИЛИ ЧерезFTP Тогда
		
		Если ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьЗначениеФункциональнойОпции(
			"ИспользоватьЭлектронныеЦифровыеПодписи") Тогда
			
			Если Объект.ШифроватьДанныеПакетаЭД Тогда
				
				ДокументОбъект = РеквизитФормыВЗначение("Объект");
				ДвоичныеДанныеСертификата  = ДокументОбъект.СертификатКонтрагентаДляШифрования.Получить();
				Если ДвоичныеДанныеСертификата <> Неопределено Тогда
					СертификатКриптографии = Новый СертификатКриптографии(ДвоичныеДанныеСертификата);
					ПредставлениеСертификата = ЭлектроннаяЦифроваяПодписьКлиентСервер.ПолучитьПредставлениеПользователя(
						СертификатКриптографии.Субъект);
					ПредставлениеСертификатаКонтрагентаДляШифрования = ПредставлениеСертификата;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ИмяПрикладногоСправочника = ЭлектронныеДокументыПовтИсп.ПолучитьИмяПрикладногоСправочника("Контрагенты");
		Объект.Контрагент = ЭлектронныеДокументыПовтИсп.ПолучитьПустуюСсылку(ИмяПрикладногоСправочника);
	КонецЕсли;

	ИспользуетсяДополнительнаяАналитикаПартнеры = ЭлектронныеДокументыПовтИсп.ИспользуетсяДополнительнаяАналитикаКонтрагентовСправочникПартнеры();
	Если ИспользуетсяДополнительнаяАналитикаПартнеры И ЗначениеЗаполнено(Объект.Контрагент) Тогда
		
		ИмяРеквизитаПартнераКонтрагента = ЭлектронныеДокументыПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("ПартнерКонтрагента");
		Партнер = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Контрагент, ИмяРеквизитаПартнераКонтрагента);
	КонецЕсли;
	
	ОпределитьИспользованиеКаталога();
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма, ЗаполнитьРегламентЭДО = Ложь)
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	Элементы.Партнер.Видимость = Ложь;
	Если Форма.ИспользуетсяДополнительнаяАналитикаПартнеры
		И ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьЗначениеФункциональнойОпции(
		"ИспользоватьПартнеровИКонтрагентов") Тогда
		Элементы.Партнер.Видимость = Истина;
	КонецЕсли;
	
	Если Не Форма.КоманднаяПанель.ПодчиненныеЭлементы.ФормаЭД.ПодчиненныеЭлементы.Найти(
			"ФормаОбработкаЭлектронныеДокументыПереотправитьЭД") = Неопределено Тогда
		Форма.КоманднаяПанель.ПодчиненныеЭлементы.ФормаЭД.ПодчиненныеЭлементы.ФормаОбработкаЭлектронныеДокументыПереотправитьЭД.Видимость = Форма.ИспользуетсяКаталогВПрограмме;
		Форма.КоманднаяПанель.ПодчиненныеЭлементы.ФормаЭД.ПодчиненныеЭлементы.ФормаОбработкаЭлектронныеДокументыПереотправитьЭД.Доступность = Форма.ИспользуетсяКаталогВСоглашении;
	КонецЕсли;
	
	Если Форма.ЧерезКаталог Тогда
		
		ОбновитьПутиКаталоговОбмена(Форма);
		
	КонецЕсли;
	
	Элементы.ОтправитьПриглашение.Видимость = Форма.ЧерезОператораЭДО
		И (Объект.СтатусПодключения = ПредопределенноеЗначение("Перечисление.СтатусыУчастниковОбменаЭД.ТребуетсяПригласить")
		ИЛИ Объект.СтатусПодключения = ПредопределенноеЗначение("Перечисление.СтатусыУчастниковОбменаЭД.Отсоединен")
		ИЛИ Объект.СтатусПодключения = ПредопределенноеЗначение("Перечисление.СтатусыУчастниковОбменаЭД.Ошибка"));
	Элементы.ПринятьПриглашение.Видимость                                = Форма.ЧерезОператораЭДО
		И Объект.СтатусПодключения = ПредопределенноеЗначение("Перечисление.СтатусыУчастниковОбменаЭД.ТребуетсяСогласие");
	Элементы.ОтклонитьПриглашение.Видимость                              = Форма.ЧерезОператораЭДО
		И Объект.СтатусПодключения = ПредопределенноеЗначение("Перечисление.СтатусыУчастниковОбменаЭД.ТребуетсяСогласие");
	
	// Прямой обмен
	Элементы.ГруппаНастройкиПрямогоОбменаЧерезКаталог.Видимость          = Форма.ЧерезКаталог;
	Элементы.ГруппаНастройкиПрямогоОбменаЧерезЭлектроннуюПочту.Видимость = Форма.ЧерезЭлектроннуюПочту;
	Элементы.ГруппаНастройкиПрямогоОбменаЧерезFTP.Видимость              = Форма.ЧерезFTP;
	Элементы.ГруппаНастройкиПрямогоОбмена.Видимость                      = Форма.ЧерезКаталог ИЛИ Форма.ЧерезЭлектроннуюПочту ИЛИ Форма.ЧерезFTP;
	Элементы.ГруппаНастройкиПрямогоОбменаШифрование.Видимость            = Форма.ЧерезКаталог ИЛИ Форма.ЧерезЭлектроннуюПочту ИЛИ Форма.ЧерезFTP;
	Элементы.ГруппаНастройкиПрямогоОбменаДоверенныеСертификаты.Видимость = Форма.ЧерезКаталог ИЛИ Форма.ЧерезЭлектроннуюПочту ИЛИ Форма.ЧерезFTP;
	
	// РасширенныйРежимНастройкиСоглашения
	Элементы.ФормаВключитьРасширенныйРежимНастройкиСоглашения.Заголовок = НСтр("ru = 'Включить расширенный режим настроек ЭДО'");
	Если Объект.РасширенныйРежимНастройкиСоглашения Тогда
		Элементы.ФормаВключитьРасширенныйРежимНастройкиСоглашения.Заголовок = НСтр("ru = 'Выключить расширенный режим настроек ЭДО'");
	КонецЕсли;
	
	Элементы.ПрофильНастроекЭДО.Видимость                         = Не Объект.РасширенныйРежимНастройкиСоглашения;
	Элементы.ИдентификаторОрганизации.Видимость                   = Не Объект.РасширенныйРежимНастройкиСоглашения;
	Элементы.ИдентификаторКонтрагента.Видимость                   = Не Объект.РасширенныйРежимНастройкиСоглашения;
	
	Элементы.ДекорацияСтатусПодключения.Ширина = ?(Объект.РасширенныйРежимНастройкиСоглашения, 14, 17);
	
	Элементы.ИсходящиеДокументыРегламентЭДО.Видимость = Объект.РасширенныйРежимНастройкиСоглашения;
	
	// Использование ЭЦП
	Элементы.ГруппаНастройкиПрямогоОбменаШифрование.Видимость = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьЗначениеФункциональнойОпции(
		"ИспользоватьЭлектронныеЦифровыеПодписи");
	
	Элементы.ГруппаШифрованиеДанныхПакетаЭД.Видимость                          = Объект.ШифроватьДанныеПакетаЭД;
	Элементы.ГруппаНастройкиПрямогоОбменаДоверенныеСертификатыСписок.Видимость = Объект.ПроверятьСертификатыПодписей;
	
	// Доступные состояния соглашения.
	Элементы.Состояние.Доступность = Не Форма.ЧерезОператораЭДО
		ИЛИ Объект.СтатусПодключения = ПредопределенноеЗначение("Перечисление.СтатусыУчастниковОбменаЭД.Присоединен");
		
	УстановитьВидимостьДоступностьОтправкиКомандыОтправкиКаталога(Форма);
		
	Если ЗаполнитьРегламентЭДО Тогда
		ЗаполнитьПредставлениеНастроек(Объект);
	КонецЕсли;
	
	// Использование УПД и УКД
	Элементы.ИспользоватьУПД.Видимость = Объект.РасширенныйРежимНастройкиСоглашения
		И НЕ (Форма.ЧерезКаталог ИЛИ Форма.ЧерезЭлектроннуюПочту ИЛИ Форма.ЧерезFTP);
	Элементы.ИспользоватьУКД.Видимость = Объект.РасширенныйРежимНастройкиСоглашения
		И НЕ (Форма.ЧерезКаталог ИЛИ Форма.ЧерезЭлектроннуюПочту ИЛИ Форма.ЧерезFTP);
	
	Элементы.РеквизитыКонтрагента.Видимость = ЗначениеЗаполнено(Объект.НаименованиеКонтрагента) И Не ЗначениеЗаполнено(Объект.Контрагент);
	
	Элементы.СтраницаИсходящиеЭлектронныеДокументы.Видимость = Объект.ИспользуетсяДляОтправки;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьПутиКаталоговОбмена(Форма)
	
	ОбновитьВходящийКаталога(Форма);
	ОбновитьИсходящийКаталог(Форма);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьВходящийКаталога(Форма)

	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	ШаблонЗаголовка = НСтр("ru = 'Полный путь: %1'");
	
	КаталогВходящихДокументов = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(
			Форма.ПутьКРодительскомуКаталогуПрофильНастроекЭДО, Объект.КаталогВходящихДокументов);
		
	Элементы.ПояснениеКаталогаВходящихДокументов.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ШаблонЗаголовка, КаталогВходящихДокументов);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьИсходящийКаталог(Форма)
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	ШаблонЗаголовка = НСтр("ru = 'Полный путь: %1'");
	
	КаталогИсходящихДокументов = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(
			Форма.ПутьКРодительскомуКаталогуПрофильНастроекЭДО, Объект.КаталогИсходящихДокументов);
			
	Элементы.ПояснениеКаталогаИсходящихДокументов.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ШаблонЗаголовка, КаталогИсходящихДокументов);
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьФлагУПДУКД()
	
	Для каждого Строка Из Объект.ИсходящиеДокументы Цикл
		
		Если Строка.ИсходящийДокумент = Перечисления.ВидыЭД.АктИсполнитель Тогда
			Строка.Формировать = Не Объект.ИспользоватьУПД;
		КонецЕсли;
		
		Если Строка.ИсходящийДокумент = Перечисления.ВидыЭД.ТОРГ12Продавец Тогда
			Строка.Формировать = Не Объект.ИспользоватьУПД;
		КонецЕсли;
		
		Если Строка.ИсходящийДокумент = Перечисления.ВидыЭД.АктНаПередачуПрав Тогда
			Строка.Формировать = Не Объект.ИспользоватьУПД;
		КонецЕсли;
		
		Если Строка.ИсходящийДокумент = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель Тогда
			Строка.Формировать = Не Объект.ИспользоватьУКД;
		КонецЕсли;
		
		Если Строка.ИсходящийДокумент = Перечисления.ВидыЭД.СчетФактура Тогда
			
			Если Объект.ИспользоватьУПД Тогда
				ВерсияФормата = "ФНС 5.01 (УПД:Счет-фактура и первичный документ)";
				Строка.ТребуетсяОтветнаяПодпись = Истина;
			Иначе
				ВерсияФормата = ЭлектронныеДокументыСлужебный.АктуальнаяВерсияФорматаЭД(Строка.ИсходящийДокумент);
				Строка.ТребуетсяОтветнаяПодпись = Ложь;
			КонецЕсли;
			Строка.ВерсияФормата = ВерсияФормата;
			ЗаполнитьПредставлениеРегламентаЭДО(Строка);
		КонецЕсли;
		
		Если Строка.ИсходящийДокумент = Перечисления.ВидыЭД.КорректировочныйСчетФактура Тогда
			
			Если Объект.ИспользоватьУКД Тогда
				ВерсияФормата = "ФНС 5.01 (УКД:Корректировочный счет-фактура и первичный документ)";
				Строка.ТребуетсяОтветнаяПодпись = Истина;
			Иначе
				ВерсияФормата = ЭлектронныеДокументыСлужебный.АктуальнаяВерсияФорматаЭД(Строка.ИсходящийДокумент);
				Строка.ТребуетсяОтветнаяПодпись = Ложь;
			КонецЕсли;
			Строка.ВерсияФормата = ВерсияФормата;
			
			ЗаполнитьПредставлениеРегламентаЭДО(Строка);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗначенияПоУмолчанию()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПрофилиНастроекЭДО.Ссылка
	|ИЗ
	|	Справочник.ПрофилиНастроекЭДО КАК ПрофилиНастроекЭДО
	|ГДЕ
	|	&Организация";
	
	ТекстЗапросаОрганиазция = "ИСТИНА";
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ТекстЗапросаОрганиазция = "ПрофилиНастроекЭДО.Организация = &Организация";
		Запрос.УстановитьПараметр("Организация", Объект.Организация);
	КонецЕсли;
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Организация", ТекстЗапросаОрганиазция);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество() = 1 Тогда
		Выборка.Следующий();
		Объект.ПрофильНастроекЭДО = Выборка.Ссылка;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура КонтрагентПриИзмененииНаСервере(МенятьИдентификаторКонтрагента = Истина)
	
	Объект.Наименование = Строка(Объект.Контрагент) + ?(ЗначениеЗаполнено(Объект.ДоговорКонтрагента),
		", " + Строка(Объект.ДоговорКонтрагента), "");
		
	Если Не ЭлектронныеДокументыСлужебныйВызовСервера.ЭтоПрямойОбмен(Объект.СпособОбменаЭД) Тогда
		Если МенятьИдентификаторКонтрагента Тогда
			Объект.ИдентификаторКонтрагента = "";
			Объект.СтатусПодключения   = Перечисления.СтатусыУчастниковОбменаЭД.ТребуетсяПригласить;
			Объект.СостояниеСоглашения = Перечисления.СостоянияСоглашенийЭД.ОжидаетсяСогласование;
			ЭлектронныеДокументыВнутренний.ОбновитьДатуИзмененияСтатуса(Объект);
		КонецЕсли;
	ИначеЕсли МенятьИдентификаторКонтрагента Тогда
		УстановитьИдентификатор("Контрагенты", Объект.Контрагент, Объект.ИдентификаторКонтрагента);
	КонецЕсли;
	ОпределитьИспользуемыеСпособыОбменаЭД(Неопределено, Объект.ИдентификаторКонтрагента);
	
	Если ИспользуетсяДополнительнаяАналитикаПартнеры И ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ИмяРеквизитаПартнераКонтрагента = ЭлектронныеДокументыПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("ПартнерКонтрагента");
		Партнер = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Контрагент, ИмяРеквизитаПартнераКонтрагента);
	КонецЕсли;
	
	ОбновитьПризнакИспользованияДляОтправки();
	
КонецПроцедуры

&НаСервере
Процедура ПрофильНастроекЭДОПриИзмененииНаСервере()
		
	ПараметрыПрофиляНастроек = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.ПрофильНастроекЭДО,
		"Организация, ИдентификаторОрганизации, СпособОбменаЭД, ШаблонТекстаПриглашений, ИсходящиеДокументы, ИспользоватьУПД, ИспользоватьУКД");
		
	Объект.Организация                 = ПараметрыПрофиляНастроек.Организация;
	Объект.СпособОбменаЭД              = ПараметрыПрофиляНастроек.СпособОбменаЭД;
	Объект.ИдентификаторОрганизации    = ПараметрыПрофиляНастроек.ИдентификаторОрганизации;
	
	// Загружаем ТЧ из профиля настроек ЭДО.
	Объект.ИсходящиеДокументы.Очистить();
	Если ЗначениеЗаполнено(ПараметрыПрофиляНастроек.ИсходящиеДокументы) Тогда
		Объект.ИсходящиеДокументы.Загрузить(ПараметрыПрофиляНастроек.ИсходящиеДокументы.Выгрузить());
		Объект.ИсходящиеДокументы.Сортировать("Приоритет");
	КонецЕсли;
	
	Объект.ИспользоватьУПД             = ПараметрыПрофиляНастроек.ИспользоватьУПД;
	Объект.ИспользоватьУКД             = ПараметрыПрофиляНастроек.ИспользоватьУКД;
	
	Объект.СтатусПодключения = Перечисления.СтатусыУчастниковОбменаЭД.Присоединен;
	Если Не ЭлектронныеДокументыСлужебныйВызовСервера.ЭтоПрямойОбмен(ПараметрыПрофиляНастроек.СпособОбменаЭД) Тогда
		Объект.ИдентификаторКонтрагента = "";
		Объект.ТекстПриглашения    = ПараметрыПрофиляНастроек.ШаблонТекстаПриглашений;
		Объект.СтатусПодключения   = Перечисления.СтатусыУчастниковОбменаЭД.ТребуетсяПригласить;
		Объект.СостояниеСоглашения = Перечисления.СостоянияСоглашенийЭД.ОжидаетсяСогласование;
	Иначе
		Объект.СостояниеСоглашения = Перечисления.СостоянияСоглашенийЭД.ПроверкаТехническойСовместимости;
		УстановитьИдентификатор("Контрагенты", Объект.Контрагент, Объект.ИдентификаторКонтрагента);
	КонецЕсли;
	
	ЭлектронныеДокументыВнутренний.ОбновитьДатуИзмененияСтатуса(Объект);
	
	ОпределитьИспользуемыеСпособыОбменаЭД(Объект.ПрофильНастроекЭДО, Объект.ИдентификаторКонтрагента);
	
	ОбновитьСтатусПодключения();
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ИсходящиеДокументыПрофильНастроекЭДОПриИзмененииНаСервере(ВыбранноеЗначение)
	
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСтроки = Объект.ИсходящиеДокументы.НайтиПоИдентификатору(ВыбранноеЗначение);
	
	ПараметрыПрофиляНастроек = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеСтроки.ПрофильНастроекЭДО,
		"ИдентификаторОрганизации, СпособОбменаЭД, ШаблонТекстаПриглашений");
		
	ДанныеСтроки.ИдентификаторОрганизации = ПараметрыПрофиляНастроек.ИдентификаторОрганизации;
	ДанныеСтроки.СпособОбменаЭД           = ПараметрыПрофиляНастроек.СпособОбменаЭД;
	ДанныеСтроки.ИдентификаторКонтрагента = "";
	
	Если ПараметрыПрофиляНастроек.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском Тогда
		Если ЧерезОператораЭДО Тогда
			
			Отбор = Новый Структура;
			Отбор.Вставить("СпособОбменаЭД", Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском);
			НайденныеСтроки = Объект.ИсходящиеДокументы.НайтиСтроки(Отбор);
			Для каждого Строка Из НайденныеСтроки Цикл
				
				Если ЗначениеЗаполнено(Строка.ИдентификаторКонтрагента) Тогда
					ДанныеСтроки.ИдентификаторКонтрагента = Строка.ИдентификаторКонтрагента;
				КонецЕсли;
			КонецЦикла;
		Иначе
			Объект.ТекстПриглашения    = ПараметрыПрофиляНастроек.ШаблонТекстаПриглашений;
			Объект.СтатусПодключения   = Перечисления.СтатусыУчастниковОбменаЭД.ТребуетсяПригласить;
			Объект.СостояниеСоглашения = Перечисления.СостоянияСоглашенийЭД.ОжидаетсяСогласование;
			ЭлектронныеДокументыВнутренний.ОбновитьДатуИзмененияСтатуса(Объект);
		КонецЕсли;
	ИначеЕсли ПараметрыПрофиляНастроек.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезСервис1СЭДО Тогда
		Если ЧерезОператораЭДО Тогда
			
			Отбор = Новый Структура;
			Отбор.Вставить("СпособОбменаЭД", Перечисления.СпособыОбменаЭД.ЧерезСервис1СЭДО);
			НайденныеСтроки = Объект.ИсходящиеДокументы.НайтиСтроки(Отбор);
			Для каждого Строка Из НайденныеСтроки Цикл
				
				Если ЗначениеЗаполнено(Строка.ИдентификаторКонтрагента) Тогда
					ДанныеСтроки.ИдентификаторКонтрагента = Строка.ИдентификаторКонтрагента;
				КонецЕсли;
			КонецЦикла;
		Иначе
			Объект.ТекстПриглашения    = ПараметрыПрофиляНастроек.ШаблонТекстаПриглашений;
			Объект.СтатусПодключения   = Перечисления.СтатусыУчастниковОбменаЭД.ТребуетсяПригласить;
			Объект.СостояниеСоглашения = Перечисления.СостоянияСоглашенийЭД.ОжидаетсяСогласование;
			ЭлектронныеДокументыВнутренний.ОбновитьДатуИзмененияСтатуса(Объект);
		КонецЕсли;
	Иначе
		УстановитьИдентификатор("Контрагенты", Объект.Контрагент, ДанныеСтроки.ИдентификаторКонтрагента);
	КонецЕсли;
	
	ОпределитьИспользуемыеСпособыОбменаЭД();
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ОпределитьИспользуемыеСпособыОбменаЭД(ПрофильНастроекЭДО = Неопределено, ИдентификаторКонтрагента = Неопределено)
	
	ЧерезОператораЭДО     = Ложь;
	ЧерезКаталог          = Ложь;
	ЧерезЭлектроннуюПочту = Ложь;
	ЧерезFTP              = Ложь;
	
	// При измении Профиля настроек ЭДО в шапке Настроек.
	Если ПрофильНастроекЭДО <> Неопределено Тогда
		ПараметрыПрофиляНастроек = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПрофильНастроекЭДО,
			"Организация, ИдентификаторОрганизации, СпособОбменаЭД");
	КонецЕсли;
	
	// Получим электронную почту контрагента для дальнейшего использования.
	ЭлектроннаяПочтаКонтрагента = ЭлектронныеДокументыПереопределяемый.АдресЭлектроннойПочтыКонтрагента(Объект.Контрагент);
	
	Для каждого СтрокаТаблицы Из Объект.ИсходящиеДокументы Цикл
		
		Если ПрофильНастроекЭДО <> Неопределено Тогда
			СтрокаТаблицы.ПрофильНастроекЭДО       = ПрофильНастроекЭДО;
			СтрокаТаблицы.СпособОбменаЭД           = ПараметрыПрофиляНастроек.СпособОбменаЭД;
			СтрокаТаблицы.ИдентификаторОрганизации = ПараметрыПрофиляНастроек.ИдентификаторОрганизации;
		КонецЕсли;
			
		Если ИдентификаторКонтрагента <> Неопределено Тогда
			СтрокаТаблицы.ИдентификаторКонтрагента = ИдентификаторКонтрагента;
		КонецЕсли;
		
		Если СтрокаТаблицы.СпособОбменаЭД = ПредопределенноеЗначение("Перечисление.СпособыОбменаЭД.ЧерезОператораЭДОТакском")
			ИЛИ СтрокаТаблицы.СпособОбменаЭД = ПредопределенноеЗначение("Перечисление.СпособыОбменаЭД.ЧерезСервис1СЭДО")Тогда
			ЧерезОператораЭДО = Истина;
			
			Если Не ЗначениеЗаполнено(Объект.ЭлектроннаяПочтаДляПриглашения) Тогда
				Объект.ЭлектроннаяПочтаДляПриглашения = ЭлектроннаяПочтаКонтрагента;
			КонецЕсли;
		КонецЕсли;
		Если СтрокаТаблицы.СпособОбменаЭД = ПредопределенноеЗначение("Перечисление.СпособыОбменаЭД.ЧерезЭлектроннуюПочту") Тогда
			ЧерезЭлектроннуюПочту = Истина;
			
			Если Не ЗначениеЗаполнено(Объект.ЭлектроннаяПочтаКонтрагента) Тогда
				Объект.ЭлектроннаяПочтаКонтрагента = ЭлектроннаяПочтаКонтрагента;
			КонецЕсли;
		КонецЕсли;
		
		Если СтрокаТаблицы.СпособОбменаЭД = ПредопределенноеЗначение("Перечисление.СпособыОбменаЭД.ЧерезКаталог") Тогда
			ЧерезКаталог = Истина;
			
			ПутьКРодительскомуКаталогуПрофильНастроекЭДО = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
				СтрокаТаблицы.ПрофильНастроекЭДО, "РесурсВходящихДокументов");
			
			Если ЗначениеЗаполнено(Объект.Контрагент) И ЗначениеЗаполнено(Объект.Организация) Тогда
				ШаблонНаименование = НСтр("ru = '%1_%2'");
				ИмяРеквизитаНаименованиеКонтрагента = ЭлектронныеДокументыПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении(
				"НаименованиеКонтрагента");
				НаименованиеКонтрагента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Контрагент, ИмяРеквизитаНаименованиеКонтрагента);
				
				ИмяРеквизитаНаименованиеОрганизации = ЭлектронныеДокументыПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении(
				"НаименованиеОрганизации");
				НаименованиеОрганизации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Организация, ИмяРеквизитаНаименованиеОрганизации);
				Если Не ЗначениеЗаполнено(Объект.КаталогВходящихДокументов) Тогда
					Объект.КаталогВходящихДокументов = СтрЗаменить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ШаблонНаименование,
					ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(НаименованиеКонтрагента, ""),
					ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(НаименованиеОрганизации, ""))," ", "");
				КонецЕсли;
				
				Если Не ЗначениеЗаполнено(Объект.КаталогИсходящихДокументов) Тогда
					Объект.КаталогИсходящихДокументов = СтрЗаменить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ШаблонНаименование,
					ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(НаименованиеОрганизации, ""),
					ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(НаименованиеКонтрагента, ""))," ", "");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если СтрокаТаблицы.СпособОбменаЭД = ПредопределенноеЗначение("Перечисление.СпособыОбменаЭД.ЧерезFTP") Тогда
			ЧерезFTP = Истина;
			
			ПутьКРодительскомуКаталогуПрофильНастроекЭДО = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
				СтрокаТаблицы.ПрофильНастроекЭДО, "РесурсВходящихДокументов");
			
			Если ЗначениеЗаполнено(Объект.Контрагент) И ЗначениеЗаполнено(Объект.Организация) Тогда
				ШаблонНаименование = НСтр("ru = '%1_%2'");
				ИмяРеквизитаНаименованиеКонтрагента = ЭлектронныеДокументыПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении(
				"НаименованиеКонтрагента");
				НаименованиеКонтрагента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Контрагент, ИмяРеквизитаНаименованиеКонтрагента);
				
				ИмяРеквизитаНаименованиеОрганизации = ЭлектронныеДокументыПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении(
				"НаименованиеОрганизации");
				НаименованиеОрганизации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Организация, ИмяРеквизитаНаименованиеОрганизации);
				
				Если Не ЗначениеЗаполнено(Объект.КаталогВходящихДокументовFTP) Тогда
					Объект.КаталогВходящихДокументовFTP = СтрЗаменить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ШаблонНаименование,
					ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(НаименованиеКонтрагента, ""),
					ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(НаименованиеОрганизации, ""))," ", "");
				КонецЕсли;
				
				Если Не ЗначениеЗаполнено(Объект.КаталогИсходящихДокументовFTP) Тогда
					Объект.КаталогИсходящихДокументовFTP = СтрЗаменить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ШаблонНаименование,
					ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(НаименованиеОрганизации, ""),
					ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(НаименованиеКонтрагента, ""))," ", "");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если СтрокаТаблицы.ИсходящийДокумент = Перечисления.ВидыЭД.КаталогТоваров Тогда
		
			ИспользуетсяКаталогВПрограмме = Истина;
			Если СтрокаТаблицы.Формировать Тогда
				ИспользуетсяКаталогВСоглашении = Истина;
			КонецЕсли;
		КонецЕсли;

	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборКаталога(ПутьККаталогу, КаталогДокументов)
	
	ДиалогКаталога = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогКаталога.Заголовок = НСтр("ru = 'Укажите каталог для обмена ЭД'");
	
	КаталогОбмена = ПутьКРодительскомуКаталогуПрофильНастроекЭДО;
	Если ЗначениеЗаполнено(ПутьККаталогу) Тогда
		ПутьОбмена = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(ПутьКРодительскомуКаталогуПрофильНастроекЭДО,
			ПутьККаталогу);
		
		КаталогНаДиске  = Новый Файл(ПутьОбмена);
		Если КаталогНаДиске.Существует() Тогда
			КаталогОбмена = ПутьОбмена;
		КонецЕсли;
	КонецЕсли;
	ДиалогКаталога.Каталог = КаталогОбмена;
	
	Если ДиалогКаталога.Выбрать() Тогда
		СтруктураФайла = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ДиалогКаталога.Каталог, Истина);
		КаталогДокументов = СтруктураФайла.Имя;
	КонецЕсли;
	
	ОбновитьПутиКаталоговОбмена(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьДанныеПоТабЧасти(ДанныеСтроки, АдресВХранилище = Неопределено)
	
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Отпечаток = "";
	ДвоичныеДанные = Неопределено;
	ПредставлениеСертификата = "";
	
	Если АдресВХранилище <> Неопределено Тогда
		ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресВХранилище);
		Попытка
			СертификатКриптографии = Новый СертификатКриптографии(ДвоичныеДанные);
		Исключение
			ТекстСообщения = НСтр("ru = 'Файл сертификата должен быть в формате DER X.509, операция прервана.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Возврат;
		КонецПопытки;
		
		Отпечаток = Base64Строка(СертификатКриптографии.Отпечаток);
		ПредставлениеСертификата = ЭлектроннаяЦифроваяПодписьКлиентСервер.ПолучитьПредставлениеПользователя(
			СертификатКриптографии.Субъект);
	КонецЕсли;
	
	ДанныеСтроки.Отпечаток  = Отпечаток;
	ДанныеСтроки.ПредставлениеСертификатаКонтрагента = ПредставлениеСертификата;
	
	ДанныеСтроки.АдресФайлаВХранилище = АдресВХранилище;
	
КонецПроцедуры

&НаСервере
Процедура ПоместитьВХранилищеСертификат(АдресВХранилище = Неопределено)
	
	ПредставлениеСертификата = "";
	
	Если АдресВХранилище <> Неопределено Тогда
		ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресВХранилище);
		
		Попытка
			СертификатКриптографии = Новый СертификатКриптографии(ДвоичныеДанные);
		Исключение
			ТекстСообщения = НСтр("ru = 'Файл сертификата должен быть в формате DER X.509, операция прервана.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Возврат;
		КонецПопытки;
		
		ПредставлениеСертификата = ЭлектроннаяЦифроваяПодписьКлиентСервер.ПолучитьПредставлениеПользователя(
			СертификатКриптографии.Субъект);
		
	КонецЕсли;
	ПредставлениеСертификатаКонтрагентаДляШифрования = ПредставлениеСертификата;
	
	АдресСертификатаКонтрагентаДляШифрования = АдресВХранилище;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьИдентификатор(ИмяСправочника, СсылкаНаИсточникИдентификатора, ИскомыйИдентификатор)
	
	Если ИмяСправочника = "Контрагенты" Тогда
		ИмяРеквизитаИННКонтрагента = ЭлектронныеДокументыПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("ИННКонтрагента");
		ИмяРеквизитаКППКонтрагента = ЭлектронныеДокументыПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("КППКонтрагента");
		
		ПараметрыКонтрагента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаИсточникИдентификатора,
			ИмяРеквизитаИННКонтрагента + ", " + ИмяРеквизитаКППКонтрагента);
		
		СтрокаЗаполнения = Строка(ПараметрыКонтрагента[ИмяРеквизитаИННКонтрагента])
			+ "_" + Строка(ПараметрыКонтрагента[ИмяРеквизитаКППКонтрагента]);
		Если Прав(СтрокаЗаполнения, 1) = "_" Тогда
			СтрокаЗаполнения = СтрЗаменить(СтрокаЗаполнения, "_", "");
		КонецЕсли;
		ИскомыйИдентификатор = СокрЛП(СтрокаЗаполнения);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИспользованиеИдентификатораКонтрагентаУникально(Отказ)
	
	// Проверка на уникальное использование настройки ЭДО по реквизитам: ИдентификаторКонтрагента.
	Отбор = Новый Структура;
	Отбор.Вставить("Формировать", Истина);
	Таблица = Объект.ИсходящиеДокументы.Выгрузить(Отбор);
	
	МассивИдКонтрагентов = Таблица.ВыгрузитьКолонку("ИдентификаторКонтрагента");
	
	ЗапросПоИД = Новый Запрос;
	ЗапросПоИД.УстановитьПараметр("ТекущаяНастройка",     Объект.Ссылка);
	ЗапросПоИД.УстановитьПараметр("Организация",          Объект.Организация);
	ЗапросПоИД.УстановитьПараметр("ПрофильНастроекЭДО",   Объект.ПрофильНастроекЭДО);
	ЗапросПоИД.УстановитьПараметр("Контрагент",           Объект.Контрагент);
	ЗапросПоИД.УстановитьПараметр("МассивИдКонтрагентов", МассивИдКонтрагентов);
	ЗапросПоИД.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НастройкиЭДОИсходящиеДокументы.Ссылка.Контрагент КАК Контрагент,
	|	НастройкиЭДОИсходящиеДокументы.Ссылка.Организация КАК Организация,
	|	НастройкиЭДОИсходящиеДокументы.ИдентификаторКонтрагента КАК ИдентификаторКонтрагента
	|ИЗ
	|	Справочник.СоглашенияОбИспользованииЭД.ИсходящиеДокументы КАК НастройкиЭДОИсходящиеДокументы
	|ГДЕ
	|	НЕ НастройкиЭДОИсходящиеДокументы.Ссылка.ПометкаУдаления
	|	И НастройкиЭДОИсходящиеДокументы.Ссылка <> &ТекущаяНастройка
	|	И НастройкиЭДОИсходящиеДокументы.Ссылка.Организация = &Организация
	|	И НастройкиЭДОИсходящиеДокументы.Ссылка.ПрофильНастроекЭДО = &ПрофильНастроекЭДО
	|	И НастройкиЭДОИсходящиеДокументы.Ссылка.Контрагент = &Контрагент
	|	И НастройкиЭДОИсходящиеДокументы.Формировать
	|	И НастройкиЭДОИсходящиеДокументы.ИдентификаторКонтрагента В(&МассивИдКонтрагентов)
	|
	|СГРУППИРОВАТЬ ПО
	|	НастройкиЭДОИсходящиеДокументы.Ссылка.Контрагент,
	|	НастройкиЭДОИсходящиеДокументы.Ссылка.Организация,
	|	НастройкиЭДОИсходящиеДокументы.ИдентификаторКонтрагента";
	
	Результат = ЗапросПоИД.Выполнить();
	Если Не Результат.Пустой() Тогда
		
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			ШаблонСообщения = НСтр("ru = 'Идентификатор контрагента ""%1""
			|уже используется в настройке ЭДО между контрагентом %2 и организацией %3'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Выборка.ИдентификаторКонтрагента,
			Выборка.Контрагент, Выборка.Организация);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , , , Отказ);
		КонецЦикла;
	КонецЕсли;
	
Конецпроцедуры

&НаСервере
Процедура ОбновитьСтатусПодключения(ОбновитьДатуИзмененияСтатуса = Ложь)
	
	Если ОбновитьДатуИзмененияСтатуса Тогда
		ЭлектронныеДокументыВнутренний.ОбновитьДатуИзмененияСтатуса(Объект);
	КонецЕсли;
	
	СтатусПодключения = "" + Объект.СтатусПодключения;
	Если ЗначениеЗаполнено(Объект.ДатаИзмененияСтатуса) Тогда
		СтатусПодключения = СтатусПодключения + " "+"("+ Формат(Объект.ДатаИзмененияСтатуса ,"ДФ=dd.MM.yyyy")+")";
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СкрытьПодменюЭДО()
	
	ВидыЭД = Новый Массив;
	ЭлектронныеДокументыПереопределяемый.ПолучитьАктуальныеВидыЭД(ВидыЭД);
	Если ВидыЭД.Найти(Перечисления.ВидыЭД.КаталогТоваров) = Неопределено Тогда
		ПодменюЭДО = Элементы.ФормаКоманднаяПанель.ПодчиненныеЭлементы.Найти("ФормаЭД");
		Если Не ПодменюЭДО = Неопределено Тогда
			ПодменюЭДО.Видимость = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста 
Процедура ЗаполнитьПредставлениеНастроек(Объект)
	
	Если Не Объект.РасширенныйРежимНастройкиСоглашения Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ТекСтрока Из Объект.ИсходящиеДокументы Цикл
		
		ЗаполнитьПредставлениеРегламентаЭДО(ТекСтрока);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста 
Процедура ЗаполнитьПредставлениеРегламентаЭДО(ТекСтрока)
	
	ИспользоватьЭЦП = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьЗначениеФункциональнойОпции(
			"ИспользоватьЭлектронныеЦифровыеПодписи");
	
	Если ТекСтрока.ИспользоватьЭЦП И ИспользоватьЭЦП Тогда
		Подпись = НСтр("ru = 'подпись'");
	Иначе
		Подпись = НСтр("ru = 'без подписи'");
	КонецЕсли;
	
	ОтветнаяПодпись = "";
	Если ТекСтрока.ТребуетсяОтветнаяПодпись И ИспользоватьЭЦП Тогда
		ОтветнаяПодпись = НСтр("ru = 'ответная подпись'");
	КонецЕсли;
	
	ИзвещениеОПолучении = "";
	Если ТекСтрока.ТребуетсяИзвещениеОПолучении Тогда
		ИзвещениеОПолучении = НСтр("ru = 'извещение о получении'");
	КонецЕсли;
	
	ШаблонТекста = "%1%2%3%4";
	Профиль = Строка(ТекСтрока.ПрофильНастроекЭДО);
	Подпись = "," + " " + Подпись;
	ИзвещениеОПолучении = ?(Не ИзвещениеОПолучении = "",","+ " " + ИзвещениеОПолучении, "");
	ОтветнаяПодпись = ?(Не ОтветнаяПодпись = "",","+ " " + ОтветнаяПодпись, "");
	
	РегламентЭДО = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонТекста,
		Профиль, Подпись, ИзвещениеОПолучении, ОтветнаяПодпись);
		
	ТекСтрока.РегламентЭДО = РегламентЭДО;
	
КонецПроцедуры

&НаСервере
Процедура ОпределитьИспользованиеКаталога(ОбновитьДоступностьВидимостьКоманды = Ложь)
	
	АктуальныеЭД = ЭлектронныеДокументыПовтИсп.ПолучитьАктуальныеВидыЭД();
	Если Не АктуальныеЭД.Найти(Перечисления.ВидыЭД.КаталогТоваров) = Неопределено Тогда
		
		ИспользуетсяКаталогВПрограмме = Истина;
		ПараметрыОтбора = Новый Структура("ИсходящийДокумент, Формировать", Перечисления.ВидыЭД.КаталогТоваров, Истина);
		Если Объект.ИсходящиеДокументы.НайтиСтроки(ПараметрыОтбора).Количество() > 0 Тогда
			ИспользуетсяКаталогВСоглашении = Истина;
		Иначе
			ИспользуетсяКаталогВСоглашении = Ложь;
		КонецЕсли;
	Иначе
		ИспользуетсяКаталогВПрограмме = Ложь;
	КонецЕсли;
	
	Если ОбновитьДоступностьВидимостьКоманды Тогда
		 УстановитьВидимостьДоступностьОтправкиКомандыОтправкиКаталога(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьДоступностьОтправкиКомандыОтправкиКаталога(Форма)
		
	Если Не Форма.КоманднаяПанель.ПодчиненныеЭлементы.ФормаЭД.ПодчиненныеЭлементы.Найти(
			"ФормаСправочникСоглашенияОбИспользованииЭДОтправитьКаталогПоСоглашению") = Неопределено Тогда
		Форма.КоманднаяПанель.ПодчиненныеЭлементы.ФормаЭД.ПодчиненныеЭлементы.ФормаСправочникСоглашенияОбИспользованииЭДОтправитьКаталогПоСоглашению.Видимость = Форма.ИспользуетсяКаталогВПрограмме;
		Форма.КоманднаяПанель.ПодчиненныеЭлементы.ФормаЭД.ПодчиненныеЭлементы.ФормаСправочникСоглашенияОбИспользованииЭДОтправитьКаталогПоСоглашению.Доступность = Форма.ИспользуетсяКаталогВСоглашении;
	КонецЕсли;
	
КонецПроцедуры

// Тестирование настроек ЭДО

&НаСервере
Функция ПараметрыПрофиляНастроекЭДО(ПрофильНастроекЭДО)
	
	ПараметрыПрофиляНастроекЭДО = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПрофильНастроекЭДО,
		"РесурсВходящихДокументов, СертификатыПодписейОрганизации");
	ВыборкаСертификатов = ПараметрыПрофиляНастроекЭДО.СертификатыПодписейОрганизации.Выбрать();
	СоотвСертификатовИИхСтруктур = Новый Соответствие;
	Если ВыборкаСертификатов.Количество() > 0 Тогда
		Пока ВыборкаСертификатов.Следующий() Цикл
			Если ВыборкаСертификатов.Сертификат.ОграничитьДоступКСертификату
				И ВыборкаСертификатов.Сертификат.СписокПользователей.Найти(ПараметрыСеанса.ТекущийПользователь, "Пользователь") = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Сертификат = ВыборкаСертификатов.Сертификат;
			ПараметрыСертификата = ЭлектронныеДокументыСлужебныйВызовСервера.РеквизитыСертификата(Сертификат);
			ПараметрыСертификата.Вставить("СертификатПодписи", Сертификат);
			СоотвСертификатовИИхСтруктур.Вставить(Сертификат, ПараметрыСертификата);
		КонецЦикла;
	КонецЕсли;
	ПараметрыПрофиляНастроекЭДО.Вставить("СертификатыПодписейОрганизации", СоотвСертификатовИИхСтруктур);
	
	Возврат ПараметрыПрофиляНастроекЭДО;
	
КонецФункции

&НаСервере
Процедура ТестСвязиПрямогоОбменаНаСервере(КаталогВходящихДокументов, КаталогИсходящихДокументов)
	
	// Блок проверки доступа к каталогам.
	ШаблонСообщения = НСтр("ru = 'Тест. Проверка доступа к каталогам обмена.
		|%1'");
	Попытка
		Если ЭлектронныеДокументыСлужебныйВызовСервера.ПроверитьДоступностьКаталогаДляПрямогоОбмена(КаталогВходящихДокументов)
			И ЭлектронныеДокументыСлужебныйВызовСервера.ПроверитьДоступностьКаталогаДляПрямогоОбмена(КаталогИсходящихДокументов) Тогда
			РезультатТеста = НСтр("ru = 'Пройден успешно.'");
		Иначе
			РезультатТеста = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьСообщениеОбОшибке("107");
		КонецЕсли;
	Исключение
		ШаблонРезультата = НСтр("ru = '%1
		|%2'");
		ТекстОшибки = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьСообщениеОбОшибке("107");
		РезультатТеста = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонРезультата, ТекстОшибки,
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, РезультатТеста);
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	
КонецПроцедуры

&НаСервере
Процедура ТестСвязиОбменаЧерезFTPНаСервере(ПрофильНастроекЭДО, КаталогВходящихДокументов, КаталогИсходящихДокументов)
	
	ЭлектронныеДокументыСлужебный.ТестСвязиОбменаЧерезFTP(ПрофильНастроекЭДО, КаталогВходящихДокументов, КаталогИсходящихДокументов);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьСертификаты(ПараметрыПрофиляНастроекЭДО)
	
	// Блок проверки сертификатов.
	ШаблонСообщения = НСтр("ru = 'Тестирование сертификата: %1.'");
	
	СертификатыПрофиля = ПараметрыПрофиляНастроекЭДО.СертификатыПодписейОрганизации;
	
	НаКлиенте = Ложь;
	НаСервере = Ложь;
	Если ЭлектронныеДокументыСлужебныйВызовСервера.ВыполнятьКриптооперацииНаСервере() Тогда
		СертификатыДляВыбора = ОтобратьСертификатыСервера(СертификатыПрофиля);
		НаСервере = Истина;
	Иначе
		СертификатыДляВыбора = ОтобратьСертификатыКлиента(СертификатыПрофиля);
		НаКлиенте = Истина;
	КонецЕсли;
	
	КонтекстПроверки = Новый Структура;
	КонтекстПроверки.Вставить("НаКлиенте", НаКлиенте);
	КонтекстПроверки.Вставить("НаСервере", НаСервере);
	
	Для Каждого Элемент Из СертификатыДляВыбора Цикл
		Сертификат = Элемент.Ключ;
		ПараметрыСертификата = Элемент.Значение;
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Сертификат);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
		ЕстьОшибки = Ложь;
		ЭлектронныеДокументыСлужебныйКлиент.ТестНастроекСертификата(Сертификат, ПараметрыСертификата, КонтекстПроверки, , ЕстьОшибки);
		
		Если Не ПараметрыСертификата.ПарольПолучен Тогда
			ТекстСообщения = НСтр("ru = 'Тестирование отменено.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Продолжить;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьШифрование()
	
	СертификатЭП = Объект.СертификатОрганизацииДляРасшифровки;
	Если ЗначениеЗаполнено(СертификатЭП) Тогда
		Состояние(НСтр("ru = 'Тест настроек.'"),
			,
			НСтр("ru = 'Выполняется проверка шифрования. Подождите...'"));
		
		ПараметрыСертификата = ЭлектронныеДокументыСлужебныйВызовСервера.РеквизитыСертификата(СертификатЭП);
		
		// Для дальнейших операций необходим пароль сертификата.
		Соответствие = Новый Соответствие;
		Соответствие.Вставить(СертификатЭП, ПараметрыСертификата);
		ВидОперации = НСтр("ru = 'Тестовая проверка шифрования'");
		Если ЭлектронныеДокументыСлужебныйКлиент.ПарольКСертификатуПолучен(Соответствие, ВидОперации)
			И Соответствие.Количество() > 0 Тогда
			Для Каждого СертификатПараметры Из Соответствие Цикл
				ПараметрыСертификата = СертификатПараметры.Значение;
				Если ЭлектронныеДокументыСлужебныйВызовСервера.ВыполнятьКриптооперацииНаСервере() Тогда
					ПроверитьШифрованиеНаСервере(ПараметрыСертификата);
				Иначе
					ПроверитьШифрованиеНаКлиенте(ПараметрыСертификата);
				КонецЕсли;
				Прервать;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьШифрованиеНаКлиенте(ПараметрыСертификата)
	
	ШаблонСообщения = НСтр("ru = '%1
								 |%2'");
				
	// Блок проверки установленных криптосредств на компьютере.
	ОписаниеТеста = НСтр("ru = 'Тест. Проверка средства криптографии на компьютере.'");
	Попытка
		МенеджерКриптографии = ЭлектроннаяЦифроваяПодписьКлиент.ПолучитьМенеджерКриптографии();
		МенеджерКриптографии.ПарольДоступаКЗакрытомуКлючу = ПараметрыСертификата.ПарольПользователя;
		РезультатТеста = НСтр("ru = 'Пройден успешно.'");
	Исключение
		ТекстОшибки = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьСообщениеОбОшибке("100");
		ШаблонРезультата = НСтр("ru = '%1.
									 |%2'");
		РезультатТеста = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
															ШаблонРезультата,
															ТекстОшибки,
															КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		МенеджерКриптографии = Неопределено;
	КонецПопытки;
	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
														ШаблонСообщения,
														ОписаниеТеста,
														РезультатТеста);
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	
	// Критичная ошибка - дальше тесты не проводим.
	Если МенеджерКриптографии = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Блок проверки шифрования/расшифрования.
	ОтпечатокСертификатаПодписи = ПараметрыСертификата.Отпечаток;
	Сертификат = ЭлектроннаяЦифроваяПодписьКлиент.ПолучитьСертификатПоОтпечатку(ОтпечатокСертификатаПодписи);
	
	// Критичная ошибка - дальше тесты не проводим(платформа падает).
	Если Сертификат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеТеста = НСтр("ru = 'Тест. Проверка операций шифрования/расшифровки.'");
	ОтпечатокДвоичныеДанные = Base64Значение(ОтпечатокСертификатаПодписи);
	ДвоичныеДанные = МенеджерКриптографии.Зашифровать(ОтпечатокДвоичныеДанные, Сертификат);
	Попытка
		РасшифрованныеДвоичныеДанные = МенеджерКриптографии.Расшифровать(ДвоичныеДанные);
		РезультатТеста = НСтр("ru = 'Пройден успешно.'");
	Исключение
		РезультатТеста = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьСообщениеОбОшибке("103");
	КонецПопытки;
	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							ШаблонСообщения,
							ОписаниеТеста,
							РезультатТеста);
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);

КонецПроцедуры

&НаСервере
Процедура ПроверитьШифрованиеНаСервере(ПараметрыСертификата)
	
	ШаблонСообщения = НСтр("ru = '%1
								 |%2'");
				
	// Блок проверки установленных криптосредств на компьютере.
	ОписаниеТеста = НСтр("ru = 'Тест. Проверка средства криптографии на сервере.'");
	Попытка
		МенеджерКриптографии = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьМенеджерКриптографии();
		РезультатТеста = НСтр("ru = 'Пройден успешно.'");
	Исключение
		ТекстОшибки = ЭлектронныеДокументыПовтИсп.ПолучитьСообщениеОбОшибке("110");
		ШаблонРезультата = НСтр("ru = '%1.
									 |%2'");
		РезультатТеста = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
															ШаблонРезультата,
															ТекстОшибки,
															КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		МенеджерКриптографии = Неопределено;
	КонецПопытки;
	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
														ШаблонСообщения,
														ОписаниеТеста,
														РезультатТеста);
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	
	// Критичная ошибка - дальше тесты не проводим.
	Если МенеджерКриптографии = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Блок проверки шифрования/расшифрования.
	ОтпечатокСертификатаПодписи = ПараметрыСертификата.Отпечаток;
	Сертификат = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьСертификатПоОтпечатку(ОтпечатокСертификатаПодписи);
	
	// Критичная ошибка - дальше тесты не проводим(платформа падает).
	Если Сертификат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеТеста = НСтр("ru = 'Тест. Проверка операций шифрования/расшифровки.'");
	ОтпечатокДвоичныеДанные = Base64Значение(ОтпечатокСертификатаПодписи);
	ДвоичныеДанные = МенеджерКриптографии.Зашифровать(ОтпечатокДвоичныеДанные, Сертификат);
	Попытка
		РасшифрованныеДвоичныеДанные = МенеджерКриптографии.Расшифровать(ДвоичныеДанные);
		РезультатТеста = НСтр("ru = 'Пройден успешно.'");
	Исключение
		РезультатТеста = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьСообщениеОбОшибке("113");
	КонецПопытки;
	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							ШаблонСообщения,
							ОписаниеТеста,
							РезультатТеста);
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ВывестиПредставленияТиповДокументов();
	ЗаполнитьПредставлениеНастроек(Объект);
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьРегламентЭДОАкта(Идентификатор)
	
	// Установка флагов "Подписывать, Извещения, Ответная подпись"
	// и обновление заголовка гиперссылки.
	
	СтрокаДляРедактирования = Объект.ИсходящиеДокументы.НайтиПоИдентификатору(Идентификатор);
	Если Не СтрокаДляРедактирования.ИсходящийДокумент = Перечисления.ВидыЭД.АктИсполнитель Тогда
		Возврат;
	КонецЕсли;
	
	Если ВРег(СтрокаДляРедактирования.ВерсияФормата) = ВРег(НСтр("ru = 'ФНС 5.01 (С 2016Г.)'")) Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаДляРедактирования.ТребуетсяОтветнаяПодпись = Истина;
	СтрокаДляРедактирования.ТребуетсяИзвещениеОПолучении = Истина;
	
	ЗаполнитьПредставлениеРегламентаЭДО(СтрокаДляРедактирования);
	
КонецПроцедуры

&НаСервере
Функция ОсновнаяНастройкаСуществует()
	
	НастройкаСуществует = Истина;
	
	// Проверка на наличие основной настройки.
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НастройкиЭДО.Ссылка КАК Настройка,
	|	НастройкиЭДО.Контрагент КАК Контрагент,
	|	НастройкиЭДО.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	НастройкиЭДО.Организация КАК Организация
	|ИЗ
	|	Справочник.СоглашенияОбИспользованииЭД КАК НастройкиЭДО
	|ГДЕ
	|	НЕ НастройкиЭДО.ПометкаУдаления
	|	И НастройкиЭДО.Организация = &Организация
	|	И НастройкиЭДО.Контрагент = &Контрагент
	|	И НастройкиЭДО.ДоговорКонтрагента = &ДоговорКонтрагента
	|	И НастройкиЭДО.СтатусПодключения = Значение(Перечисление.СтатусыУчастниковОбменаЭД.Присоединен)
	|	И НастройкиЭДО.Ссылка <> &ТекущаяНастройка";
	Запрос.УстановитьПараметр("ТекущаяНастройка",   Объект.Ссылка);
	Запрос.УстановитьПараметр("Организация",        Объект.Организация);
	Запрос.УстановитьПараметр("Контрагент",         Объект.Контрагент);
	Запрос.УстановитьПараметр("ДоговорКонтрагента", ЭлектронныеДокументыПовтИсп.ПолучитьПустуюСсылку("ДоговорыКонтрагентов"));
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		НастройкаСуществует = Ложь;
		
		ШаблонСообщения = НСтр("ru = 'Поле ""Договор контрагента"", заполняется только в случае использования нескольких идентификаторов для одного контрагента.
									|В информационной базе должна быть создана Настройка ЭДО без договора со статусом подключения ""Присоединен""
									|между контрагентом %1 и организацией %2'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Объект.Контрагент,
			Объект.Организация);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	Возврат НастройкаСуществует;
	
КонецФункции

&НаСервереБезКонтекста
Функция ДопустимыеСостоянияСоглашенияДляВыбора()
	
	СписокСостояний = Новый СписокЗначений;
	СписокСостояний.Добавить(Перечисления.СостоянияСоглашенийЭД.Действует);
	СписокСостояний.Добавить(Перечисления.СостоянияСоглашенийЭД.Закрыто);
	СписокСостояний.Добавить(Перечисления.СостоянияСоглашенийЭД.ПроверкаТехническойСовместимости);
	СписокСостояний.Добавить(Перечисления.СостоянияСоглашенийЭД.НаЮридическомСогласовании);
	
	Возврат СписокСостояний;
	
КонецФункции

&НаСервере
Функция ОтобратьСертификатыСервера(Знач СертификатыПрофиля)
	
	СертификатыСервера = Новый Соответствие;
	
	Для Каждого СертификатПрофиля Из СертификатыПрофиля Цикл
		СертификатХранилища = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьСертификатПоОтпечатку(СертификатПрофиля.Значение.Отпечаток);
		Если СертификатХранилища <> Неопределено Тогда
			СертификатыСервера.Вставить(СертификатПрофиля.Ключ, СертификатПрофиля.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СертификатыСервера;
	
КонецФункции

&НаКлиенте
Функция ОтобратьСертификатыКлиента(Знач СертификатыПрофиля)
	
	СертификатыКлиента = Новый Соответствие;
	
	Для Каждого СертификатПрофиля Из СертификатыПрофиля Цикл
		СертификатХранилища = ЭлектроннаяЦифроваяПодписьКлиент.ПолучитьСертификатПоОтпечатку(СертификатПрофиля.Значение.Отпечаток);
		Если СертификатХранилища <> Неопределено Тогда
			СертификатыКлиента.Вставить(СертификатПрофиля.Ключ, СертификатПрофиля.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СертификатыКлиента;
	
КонецФункции

&НаСервере
Процедура ОбновитьПризнакИспользованияДляОтправки()
	
	НастройкаОбъект = РеквизитФормыВЗначение("Объект");
	Объект.ИспользуетсяДляОтправки = Не НастройкаОбъект.ЕстьНастройкаДляОтправки();
	
	Элементы.СтраницаИсходящиеЭлектронныеДокументы.Видимость = Объект.ИспользуетсяДляОтправки;
	
КонецПроцедуры


