
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("ОбъектПодстановки") Тогда
		ЗначениеВРеквизитФормы(Параметры.ОбъектПодстановки, "Объект");
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
									ЭтапыИсполнения, "Владелец", Объект.Ссылка);
	
	КонтрактСУчастникомГОЗ = Объект.КонтрактСУчастникомГОЗ;
	Если Не КонтрактСУчастникомГОЗ Тогда
		Если Объект.ПлатежиПо275ФЗ Тогда
			КонтрактСУчастникомГОЗ = 2;
		Иначе
			КонтрактСУчастникомГОЗ = 0;
		КонецЕсли;
	КонецЕсли;
	
	УправлениеЭлементамиФормы();
	
	РассчитатьИтогПоЭтапам();
	
	Элементы.СтраницаКомментарий.Картинка = ОбщегоНазначенияКлиентСервер.КартинкаКомментария(Объект.Комментарий);
	
	УстановитьУсловноеОформление();
	
	ТекущийПользователь = Пользователи.АвторизованныйПользователь();
	
	КоличествоДопСоглашенийНаМоментОткрытия = КоличествоДопСоглашений();
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	РасставитьФлагиКонтракта(ТекущийОбъект);
	
	КоличествоДопСоглашений = КоличествоДопСоглашений();
	Если КоличествоДопСоглашенийНаМоментОткрытия < КоличествоДопСоглашений Тогда
		ТекущийОбъект.ДатаДобавленияПоследнегоДопСоглашения = ТекущаяУниверсальнаяДата();
		
		КоличествоДопСоглашенийНаМоментОткрытия = КоличествоДопСоглашений;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
									ЭтапыИсполнения, "Владелец", Объект.Ссылка);
	
	Элементы.СтраницаКомментарий.Картинка = ОбщегоНазначенияКлиентСервер.КартинкаКомментария(Объект.Комментарий);
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыИсполненияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если Объект.Ссылка.Пустая() Тогда
		Предупреждение(НСтр("ru = 'Сначала запишите элемент'"));
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрактСУчастникомГОЗПриИзменении(Элемент)
	
	КонтрактСУчастникомГОЗПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура КонтрактСУчастникомГОЗПриИзмененииНаСервере()
	
	РасставитьФлагиКонтракта(Объект);
	
	ПеречислениеМенеджер = Перечисления.РаспределениеЗаявокПоБанковскимСчетам;
	Если Объект.КонтрактСУчастникомГОЗ Тогда
		Если Объект.РаспределениеОплатПоБанковскимСчетам <> ПеречислениеМенеджер.ПоУказаннымКонтрактам Тогда
			Объект.РаспределениеОплатПоБанковскимСчетам = ПеречислениеМенеджер.ПоУказаннымКонтрактам;
			РаспределениеОплатПоБанковскимСчетамПриИзмененииНаСервере();
		КонецЕсли;
	Иначе
		Если Объект.РаспределениеОплатПоБанковскимСчетам <> ПеречислениеМенеджер.ПоВсемКонтрактам Тогда
			Объект.РаспределениеОплатПоБанковскимСчетам = ПеречислениеМенеджер.ПоВсемКонтрактам;
			РаспределениеОплатПоБанковскимСчетамПриИзмененииНаСервере();
		КонецЕсли;
	КонецЕсли;
	
	Если Не Объект.КонтрактСУчастникомГОЗ Тогда
		Объект.ГосударственныйКонтракт = Неопределено;
	КонецЕсли;
	
	// Для разных типов контрактов, разные допустимые значения типа платежа
	Объект.ТипПлатежаФЗ275 = Неопределено;

	ЗаполнитьБанковскийСчет();
	УправлениеЭлементамиФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодтверждающиеДокументыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Элемент.ТекущиеДанные.Файл = ВыбранноеЗначение;
	
КонецПроцедуры

&НаСервере
Процедура УправлениеЭлементамиФормы()
	
	Элементы.ГруппаГосударственныйКонтракт.Видимость = Объект.КонтрактСУчастникомГОЗ;
	Элементы.ПодтверждающиеДокументыГосударственныйКонтракт.Видимость = Не Объект.КонтрактСУчастникомГОЗ И Объект.ПлатежиПо275ФЗ;
	Элементы.СтраницаНомераГК.Видимость = КонтрактСУчастникомГОЗ;
	
	Элементы.ГруппаСведенияДляПлатежей.Видимость = КонтрактСУчастникомГОЗ;
	Элементы.ПодтверждающиеДокументы.Видимость = КонтрактСУчастникомГОЗ;
	
	Элементы.ПроцентОплатыЗаСчетСобственныхСредств.Доступность = КонтрактСУчастникомГОЗ = 2;
	Элементы.РаспределениеОплатПоБанковскимСчетам.Доступность = Не Объект.КонтрактСУчастникомГОЗ;
	Элементы.НомераКонтрактов.Доступность = Объект.РаспределениеОплатПоБанковскимСчетам = Перечисления.РаспределениеЗаявокПоБанковскимСчетам.ПоУказаннымКонтрактам;
	
	ПараметрыВыбораКонтрактов = Новый Массив;
	ПараметрОрганизация = Новый СвязьПараметраВыбора("Отбор.Владелец", "Объект.Организация");
	ПараметрыВыбораКонтрактов.Добавить(ПараметрОрганизация);
	Если Объект.КонтрактСУчастникомГОЗ Тогда
		ПараметрГосКонтракт = Новый СвязьПараметраВыбора("Отбор.ГосударственныйКонтракт", "Объект.ГосударственныйКонтракт");
		ПараметрыВыбораКонтрактов.Добавить(ПараметрГосКонтракт);
	КонецЕсли;
	
	Элементы.НомераГККонтрактСЗаказчиком.СвязиПараметровВыбора = Новый ФиксированныйМассив(ПараметрыВыбораКонтрактов);
	
	ОбщегоНазначения275Сервер.УстановитьПараметрыВыбораТипаПлатежа275ФЗ(Элементы.ТипПлатежаФЗ275, Объект);
	
	ИностранныйИсполнитель = Объект.Владелец.НеЯвляетсяРезидентом;
	Элементы.ЕстьВУтвержденномПеречнеИностранныхИсполнителейГОЗ.Видимость = ИностранныйИсполнитель;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("ЗаписанКонтрактИсполнителя", ВладелецФормы);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьБанковскийСчет()
	
	Если Не КонтрактСУчастникомГОЗ Тогда
		Объект.БанковскийСчетКонтрагента = Объект.Владелец.ОсновнойБанковскийСчет;
	Иначе
		Объект.БанковскийСчетКонтрагента = Справочники.БанковскиеСчета.ПолучитьБанковскийСчетГосКонтрактаПоУмолчанию(
			Объект.Владелец, Объект.ГосударственныйКонтракт);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВладелецПриИзменении(Элемент)
	ВладелецПриИзмененииСервер();
КонецПроцедуры

&НаСервере 
Процедура ВладелецПриИзмененииСервер()
	
	ЗаполнитьБанковскийСчет();
	УправлениеЭлементамиФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ГосударственныйКонтрактПриИзменении(Элемент)
	
	ГосударственныйКонтрактПриИзмененииСервер();
	
КонецПроцедуры

&НаСервере
Процедура ГосударственныйКонтрактПриИзмененииСервер()
	ЗаполнитьБанковскийСчет();
	
	ЗаполнитьГосударственныйКонтрактПодтверждающихДокументов();
	
	Объект.СпособОпределенияПоставщика = Объект.ГосударственныйКонтракт.СпособОпределенияПоставщика;
КонецПроцедуры

&НаСервере 
Процедура ЗаполнитьГосударственныйКонтрактПодтверждающихДокументов()
	Для Каждого СтрокаПодтверждающихДокументов Из Объект.ПодтверждающиеДокументы Цикл
		Если Объект.ГосударственныйКонтракт <> СтрокаПодтверждающихДокументов.ГосударственныйКонтракт Тогда
			СтрокаПодтверждающихДокументов.ГосударственныйКонтракт = Объект.ГосударственныйКонтракт;
			СтрокаПодтверждающихДокументов.Файл = Неопределено;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПодтверждающиеДокументы(Команда)
	
	ЗаполнитьПодтверждающиеДокументыСервер();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПодтверждающиеДокументыСервер()
	
	Справочники.КонтрактыИсполнителей.ЗаполнитьПодтверждающиеДокументы(Объект);
	
КонецПроцедуры

&НаСервере
Процедура РасставитьФлагиКонтракта(ОбъектРасстановки)
	
	Если КонтрактСУчастникомГОЗ = 1 Тогда
		ОбъектРасстановки.КонтрактСУчастникомГОЗ = Истина;
		ОбъектРасстановки.ПлатежиПо275ФЗ = Истина;
	ИначеЕсли КонтрактСУчастникомГОЗ = 2 Тогда
		ОбъектРасстановки.КонтрактСУчастникомГОЗ = Ложь;
		ОбъектРасстановки.ПлатежиПо275ФЗ = Истина;
	Иначе
		ОбъектРасстановки.КонтрактСУчастникомГОЗ = Ложь;
		ОбъектРасстановки.ПлатежиПо275ФЗ = Ложь;
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОбщегоНазначения275КлиентСервер.ПроверитьИспользованиеПодсистемы(Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ДоговорОбработкаВыбораНаСервере(ВыбранноеЗначение, СтандартнаяОбработка);
КонецПроцедуры

&НаСервере
Процедура ДоговорОбработкаВыбораНаСервере(ВыбранноеЗначение, СтандартнаяОбработка)
	Отказ = Ложь;
	ВидДоговораСПоставщиком = ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком");
	ОбщегоНазначения275КлиентСервер.ПроверитьДоговор(Объект.Ссылка, ВыбранноеЗначение, ВидДоговораСПоставщиком, "исполнителем", Отказ);
	СтандартнаяОбработка = Не Отказ;
	
	ОбъектБД = ДанныеФормыВЗначение(Объект, Тип("СправочникОбъект.КонтрактыИсполнителей"));
	Если Не Отказ И ОбъектБД.ЭтоНовый() Тогда
		ОбъектБД.Заполнить(ВыбранноеЗначение);
		ЗначениеВДанныеФормы(ОбъектБД, Объект);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура РассчитатьИтогПоЭтапам()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СУММА(ЭтапыКонтрактов.СуммаОплаты) КАК СуммаОплаты
		|ИЗ
		|	Справочник.ЭтапыКонтрактов КАК ЭтапыКонтрактов
		|ГДЕ
		|	ЭтапыКонтрактов.Владелец = &Владелец
		|	И НЕ ЭтапыКонтрактов.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Владелец", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	ИтогоПоЭтапам = 0;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ИтогоПоЭтапам = ВыборкаДетальныеЗаписи.СуммаОплаты;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();
	
	ВидыПодтверждающиеИсполнениеКонтракта = Новый СписокЗначений;
	ВидыПодтверждающиеИсполнениеКонтракта.ЗагрузитьЗначения(Справочники.ВидыДокументов.ВидыПодтверждающиеИсполнениеКонтракта());

	// Текст незаполненного этапа - "<Для всех платежей>"

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПодтверждающиеДокументыЭтап.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ПодтверждающиеДокументы.Этап");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru= '<Для всех платежей>'"));

	// Текст незаполненного файла - "<Указывается в заявке>"

	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПодтверждающиеДокументыФайл.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ПодтверждающиеДокументы.Файл");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru= '<Указывается в заявке>'"));
	
	// Текст незаполненного номера - "<Указывается в заявке>"

	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПодтверждающиеДокументыНомер.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ПодтверждающиеДокументы.Номер");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru= '<Указывается в заявке>'"));
	
	// Текст незаполненного номера - "<Указывается в заявке>"

	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПодтверждающиеДокументыДата.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ПодтверждающиеДокументы.Дата");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru= '<Указывается в заявке>'"));
	
	// Блокировка выбора подтверждающего документа, если не указан гос. контракт
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПодтверждающиеДокументыФайл.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ПодтверждающиеДокументы.ГосударственныйКонтракт");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Gray);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru= '<Укажите гос. контракт>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
КонецПроцедуры

&НаСервере 
Функция КоличествоДопСоглашений()
	Отбор = Новый Структура("ВидДокумента", Справочники.ВидыДокументов.ДополнительноеСоглашение);
	НайденныеСтроки = Объект.ПодтверждающиеДокументы.НайтиСтроки(Отбор);
	
	Возврат НайденныеСтроки.Количество();
КонецФункции

&НаКлиенте
Процедура НомераКонтрактовПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если Объект.НомераКонтрактов.Количество() = 1 Тогда
		Объект.НомераКонтрактов[0].Процент = 100;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодтверждающиеДокументыВидДокументаПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ПодтверждающиеДокументы.ТекущиеДанные;
	
	Если ТекущиеДанные.ВидДокумента = ПредопределенноеЗначение("Справочник.ВидыДокументов.Контракт") Тогда
		ТекущиеДанные.Номер = Объект.Номер;
		ТекущиеДанные.Дата = Объект.Дата;
		ТекущиеДанные.Сумма = Объект.СуммаКонтракта;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПодтверждающиеДокументыПриИзменении(Элемент)
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если Не ТекущиеДанные = Неопределено И Объект.КонтрактСУчастникомГОЗ Тогда
		ТекущиеДанные.ГосударственныйКонтракт = Объект.ГосударственныйКонтракт;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПодтверждающиеДокументыЭтапПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ПодтверждающиеДокументы.ТекущиеДанные;
	ТекущиеДанныеСтруктура = Новый Структура("Этап, Дата, Сумма", ТекущиеДанные.Этап, ТекущиеДанные.Дата, ТекущиеДанные.Сумма);
	
	ПодтверждающиеДокументыЭтапПриИзмененииНаСервере(ТекущиеДанныеСтруктура);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ТекущиеДанныеСтруктура);
КонецПроцедуры

&НаСервере
Процедура ПодтверждающиеДокументыЭтапПриИзмененииНаСервере(ТекущиеДанные)
	РеквизитыЭтапа = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ТекущиеДанные.Этап, "Дата, СуммаОплаты");
	
	ТекущиеДанные.Дата = РеквизитыЭтапа.Дата;
	ТекущиеДанные.Сумма = РеквизитыЭтапа.СуммаОплаты;
КонецПроцедуры

&НаСервере
Процедура ПроверитьДобавитьВидыДокументов(НовыйОбъект)
	
	МассивДобавляемыхФайлов = Новый Массив;
	
	ТипЭтапа = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НовыйОбъект, "ТипЭтапа");
	Если ТипЭтапа = Перечисления.ТипыЭтаповКонтрактов.Аванс Тогда
		МассивДобавляемыхФайлов.Добавить(Справочники.ВидыДокументов.Счет);
	ИначеЕсли ТипЭтапа = Перечисления.ТипыЭтаповКонтрактов.Оплата Тогда
		МассивДобавляемыхФайлов.Добавить(Справочники.ВидыДокументов.ТранспортнаяНакладная);
		МассивДобавляемыхФайлов.Добавить(Справочники.ВидыДокументов.СчетФактура);
	КонецЕсли;
	
	Для Каждого Элемент из МассивДобавляемыхФайлов Цикл
		СтруктураПоиска = Новый Структура("Этап, ВидДокумента", НовыйОбъект, Элемент);
		Если Объект.ПодтверждающиеДокументы.НайтиСтроки(СтруктураПоиска).Количество() Тогда
			Продолжить;
		КонецЕсли;
		НоваяСтрока = Объект.ПодтверждающиеДокументы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураПоиска);
		Если Объект.КонтрактСУчастникомГОЗ Тогда
			НоваяСтрока.ГосударственныйКонтракт = Объект.ГосударственныйКонтракт;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РаспределениеОплатПоБанковскимСчетамПриИзменении(Элемент)
	
	РаспределениеОплатПоБанковскимСчетамПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура РаспределениеОплатПоБанковскимСчетамПриИзмененииНаСервере()
	
	Если Объект.РаспределениеОплатПоБанковскимСчетам =
		Перечисления.РаспределениеЗаявокПоБанковскимСчетам.ПоВсемКонтрактам Тогда
		
		Объект.НомераКонтрактов.Очистить();
		
	Иначе
		
		Если Объект.КонтрактСУчастникомГОЗ Тогда
			
			Объект.ПроцентОплатыЗаСчетСобственныхСредств = 0;
			
		КонецЕсли;
		
	КонецЕсли;
	
	УправлениеЭлементамиФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыИсполненияОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	
	ПроверитьДобавитьВидыДокументов(НовыйОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьБанковскийСчет(Команда)
	
	Отказ = Ложь;
	
	Если Не ЗначениеЗаполнено(Объект.Владелец) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не указан исполнитель'"), , , , Отказ);
	КонецЕсли;
	
	Если Объект.КонтрактСУчастникомГОЗ И 
		Не ЗначениеЗаполнено(Объект.ГосударственныйКонтракт) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не указан государственный контракт'"), , , , Отказ);
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыСоздания = Новый Структура;
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("Владелец", Объект.Владелец);
	Если Объект.КонтрактСУчастникомГОЗ Тогда
		ПараметрыЗаполнения.Вставить("ГосударственныйКонтракт", Объект.ГосударственныйКонтракт);
		ПараметрыЗаполнения.Вставить("ОтдельныйСчетГОЗ", Истина);
	КонецЕсли;
	ПараметрыСоздания.Вставить("ЗначенияЗаполнения", ПараметрыЗаполнения);
	
	ОткрытьФорму("Справочник.БанковскиеСчета.Форма.ФормаЭлемента", 
			ПараметрыСоздания, Элементы.БанковскийСчетКонтрагента);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтчетПаспортКонтракта(Команда)
	ПФ = Новый Структура("Ссылка", Объект.Ссылка);
	ОткрытьФорму("Отчет.ПаспортКонтракта.Форма.Форма", ПФ, ЭтаФорма);
КонецПроцедуры
