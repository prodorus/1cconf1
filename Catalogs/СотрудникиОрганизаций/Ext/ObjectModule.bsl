////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем ПолучитьКадровыеДанныеФизлица Экспорт;

///////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Формирует запрос по документу
//
// Возвращаемое значение:
//  Результат запроса
//
Функция СформироватьЗапросДляПечатиТрудовогоДоговора() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("СправочникСсылка", Ссылка);
	Запрос.УстановитьПараметр("Физлицо", Физлицо);
	Запрос.УстановитьПараметр("Организация", ОбособленноеПодразделение);
	Запрос.УстановитьПараметр("ДатаДокумента",	 ДатаДоговора);
	
	// Выберем (если есть доступ) ответственное физлицо
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицо КАК Физлицо,
	|	ОтветственныеЛицаОрганизацийСрезПоследних.Должность,
	|	ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицо.Наименование КАК НаименованиеФизлица,
	|	ФизическиеЛица.Комментарий
	|ПОМЕСТИТЬ ВТОтветственноеЛицо
	|ИЗ
	|	РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(
	|			&ДатаДокумента,
	|			ОтветственноеЛицо = ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.Руководитель)
	|				И СтруктурнаяЕдиница = &Организация) КАК ОтветственныеЛицаОрганизацийСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
	|		ПО ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицо = ФизическиеЛица.Ссылка";
	Запрос.Выполнить();
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОтветственноеЛицоОрганизации.Должность КАК ДолжностьРуководителя,
	|	ТрудовойДоговор.НомерДоговора КАК НомерДок,
	|	ТрудовойДоговор.ДатаДоговора КАК ДатаДок,
	|	ТрудовойДоговор.Организация.НаименованиеПолное КАК ПолноеНазваниеОрганизации,
	|	ЕСТЬNULL(ФИООтветственныхЛиц.Фамилия + "" "" + ФИООтветственныхЛиц.Имя + "" "" + ФИООтветственныхЛиц.Отчество, ОтветственноеЛицоОрганизации.НаименованиеФизлица) КАК ФИОРуководителя,
	|	ЕСТЬNULL(ФИОФизЛиц.Фамилия + "" "" + ФИОФизЛиц.Имя + "" "" + ФИОФизЛиц.Отчество, ТрудовойДоговор.Физлицо.Наименование) КАК ФИОРаботника,
	|	ТрудовойДоговор.ДатаОкончания КАК ДатаУвольнения,
	|	ТрудовойДоговор.ДатаНачала КАК ДатаПриема,
	|	ТрудовойДоговор.Должность.Наименование КАК Должность,
	|	ТрудовойДоговор.ЗанимаемыхСтавок,
	|	ТрудовойДоговор.ИспытательныйСрок,
	|	ТрудовойДоговор.ПодразделениеОрганизации.Наименование КАК Подразделение,
	|	ВЫБОР
	|		КОГДА ТрудовойДоговор.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы)
	|			ТОГДА ""основной работе""
	|		ИНАЧЕ ""совместительству""
	|	КОНЕЦ КАК ВидЗанятости,
	|	ПаспортныеДанныеФизЛицСрезПоследних.ДокументСерия,
	|	ПаспортныеДанныеФизЛицСрезПоследних.ДокументНомер,
	|	ПаспортныеДанныеФизЛицСрезПоследних.ДокументДатаВыдачи,
	|	ВЫРАЗИТЬ(ПаспортныеДанныеФизЛицСрезПоследних.ДокументКемВыдан КАК СТРОКА(300)) КАК ДокументКемВыдан,
	|	АдресРегистрации.Представление КАК АдресРегистрации,
	|	ТелефонДомашний.Представление КАК Телефоны,
	|	КонтактнаяИнформация.Представление КАК АдресОрганизации,
	|	ТелефонОрганизации.Представление КАК ТелефоныОрганизации,
	|	ТрудовойДоговор.Организация.Наименование КАК НазваниеОрганизации,
	|	ТрудовойДоговор.Организация.ИНН + ""/"" + ТрудовойДоговор.Организация.КПП КАК ИНН,
	|	ТрудовойДоговор.ГрафикРаботы.ВидГрафика КАК ВидГрафика,
	|	ТрудовойДоговор.ГрафикРаботы.ДлительностьРабочейНедели КАК ДлительностьРабочейНедели,
	|	ТрудовойДоговор.ВидРасчета,
	|	ТрудовойДоговор.ТарифнаяСтавка,
	|	ТрудовойДоговор.ВалютаТарифнойСтавки.Наименование КАК ВалютаТарифнойСтавки,
	|	ТрудовойДоговор.ПерсональныеНадбавки.(
	|		Ссылка,
	|		НомерСтроки,
	|		Надбавка КАК Надбавка,
	|		Показатель1
	|	)
	|ИЗ
	|	Справочник.СотрудникиОрганизаций КАК ТрудовойДоговор
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОтветственноеЛицо КАК ОтветственноеЛицоОрганизации
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(
	|				&ДатаДокумента,
	|				Физлицо В
	|					(ВЫБРАТЬ
	|						Ответственные.Физлицо
	|					ИЗ
	|						ВТОтветственноеЛицо КАК Ответственные)) КАК ФИООтветственныхЛиц
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&ДатаДокумента, Физлицо = &Физлицо) КАК ФИОФизЛиц
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПаспортныеДанныеФизЛиц.СрезПоследних(&ДатаДокумента, Физлицо = &Физлицо) КАК ПаспортныеДанныеФизЛицСрезПоследних
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК АдресРегистрации
	|		ПО ТрудовойДоговор.Физлицо = АдресРегистрации.Объект
	|			И (АдресРегистрации.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ЮрАдресФизЛица))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК ТелефонДомашний
	|		ПО ТрудовойДоговор.Физлицо = ТелефонДомашний.Объект
	|			И (ТелефонДомашний.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонФизЛица))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|		ПО ТрудовойДоговор.Организация = КонтактнаяИнформация.Объект
	|			И (КонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ЮрАдресОрганизации))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК ТелефонОрганизации
	|		ПО ТрудовойДоговор.Организация = ТелефонОрганизации.Объект
	|			И (ТелефонОрганизации.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонОрганизации))
	|ГДЕ
	|	ТрудовойДоговор.Ссылка = &СправочникСсылка";
	
	Возврат Запрос.Выполнить();
	
КонецФункции // СформироватьЗапросДляПечати()

// Функция формирует уникальный номер трудового договора
// уникальность в пределах года
// 
Функция ПолучитьНомерТрудовогоДоговора() Экспорт
	
	Возврат Справочники.СотрудникиОрганизаций.ПолучитьНомерТрудовогоДоговора(Организация, ВидДоговора, ДатаДоговора, НомерДоговора);
	
КонецФункции // ПолучитьНомерТрудовогоДоговора()

Процедура ПроверитьНомерТрудовогоДоговора(НачальнаяДатаДокумента) Экспорт
	
	Справочники.СотрудникиОрганизаций.ПроверитьНомерТрудовогоДоговора(Организация, ВидДоговора, НачальнаяДатаДокумента, ДатаДоговора, НомерДоговора);
	
КонецПроцедуры // ПроверитьНомерТрудовогоДоговора() 

// Функция формирует очередной табельный номер сотрудника
// уникальность в пределах организации и вида договора
// Возвращаемое значение:
//   Строка   – табельный номер
//
Функция ПолучитьОчереднойТабельныйНомер() Экспорт
	
	Если Не ЗначениеЗаполнено(ВидДоговора) Тогда
		Возврат "";
	КонецЕсли;
	
	Префикс = "";
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("парамОрганизация",Организация);
	парамВидДоговора = Новый Массив;
	
	СотрудникиОрганизацийПереопределяемый.ЗаполнитьПараметрыВидовДоговоров(парамВидДоговора, ВидДоговора, Префикс);
	
	Запрос.УстановитьПараметр("парамВидДоговора",парамВидДоговора);
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	МАКСИМУМ(СотрудникиОрганизаций.Код) КАК Код
	|ИЗ
	|	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
	|ГДЕ
	|	СотрудникиОрганизаций.Организация = &парамОрганизация
	|	И СотрудникиОрганизаций.ВидДоговора В(&парамВидДоговора)
	|	И СотрудникиОрганизаций.Ссылка <> &Ссылка";
	
	Запрос.Текст = ТекстЗапроса;
	РезультатаЗапроса = Запрос.Выполнить();
	Если РезультатаЗапроса.Пустой() Тогда
		Возврат ?(ЗначениеЗаполнено(Префикс), Префикс + "000000001", "0000000001");
	Иначе
		СтрокаРезультата = РезультатаЗапроса.Выгрузить()[0];
		Если НЕ ЗначениеЗаполнено(СтрокаРезультата.Код) Тогда
			Возврат ?(ЗначениеЗаполнено(Префикс), Префикс + "000000001", "0000000001");
		Иначе
			Возврат ПроцедурыУправленияПерсоналом.ПолучитьСледующийНомер(СокрП(СтрокаРезультата.Код));
		КонецЕсли;
	КонецЕсли;
	
КонецФункции // ПолучитьОчереднойТабельныйНомер()

#Если ТолстыйКлиентОбычноеПриложение Тогда

Функция Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт
	
	Если ИмяМакета = "ТрудовойДоговор" Или ИмяМакета = "ТрудовойДоговорДистанционный" Тогда
		
		ТабДокумент = Новый ТабличныйДокумент;
		ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ТрудовойДоговор_Печать";
		
		// получаем данные для печати
		Выборка = СформироватьЗапросДляПечатиТрудовогоДоговора().Выбрать();
		
		// получаем макет
		Макет = ПолучитьМакет(?(ИмяМакета = "ТрудовойДоговор","ТрудовойДоговор","ТрудовойДоговорПриДистанционнойРаботе"));
		
		// выводим данные 
		Если Выборка.Следующий() Тогда
			Макет.Параметры.Заполнить(Выборка);
			Макет.Параметры.ИспытательныйСрокСтрокой = ?(НЕ ЗначениеЗаполнено(Выборка.ИспытательныйСрок),"             месяцев", "" + Выборка.ИспытательныйСрок + " месяца(ев)" );
			Если ИмяМакета = "ТрудовойДоговор" Тогда
				Макет.Параметры.РежимРаботы = "" + Выборка.ВидГрафика + "; " + Выборка.ДлительностьРабочейНедели + " - часовая рабочая неделя";
			КонецЕсли;
			Макет.Параметры.ФормаОплаты = "Форма оплаты: " + Выборка.ВидРасчета + "; Оклад (тариф) = " + Выборка.ТарифнаяСтавка + " ("+Выборка.ВалютаТарифнойСтавки+")";  
			Макет.Параметры.ПолноеНазваниеОрганизации = СокрЛП(Макет.Параметры.ПолноеНазваниеОрганизации);
			Макет.Параметры.ДокументКемВыдан = СокрЛП(Макет.Параметры.ДокументКемВыдан);
			
			ВыборкаПерсональныхНадбавок = Выборка.ПерсональныеНадбавки.Выбрать();
			Если ВыборкаПерсональныхНадбавок.Количество()>0 Тогда
				СтрокаНадбавки = "Персональные надбавки: ";
				Пока ВыборкаПерсональныхНадбавок.Следующий() Цикл
					СтрокаНадбавки = СтрокаНадбавки + ВыборкаПерсональныхНадбавок.Надбавка + "- " + ВыборкаПерсональныхНадбавок.Показатель1 + "; ";
				КонецЦикла;
				Макет.Параметры.Надбавки = СтрокаНадбавки;
			КонецЕсли;
		КонецЕсли;
		
		// выводим готовый документ
		ТабДокумент.Вывести(Макет);
		
		Возврат УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ?(ИмяМакета = "ТрудовойДоговор","Трудовой договор","Трудовой договор при дистанционной работе"));
		
	КонецЕсли;
		
	Возврат СотрудникиОрганизацийПереопределяемый.Печать(ИмяМакета, КоличествоЭкземпляров, НаПринтер, ЭтотОбъект);
	
КонецФункции

#КонецЕсли

// Возвращает доступные варианты печати 
//
// Вовращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	СтруктураПечатныхФорм = СотрудникиОрганизацийПереопределяемый.ПолучитьСтруктуруПечатныхФорм(ЭтотОбъект);
	
	Возврат СтруктураПечатныхФорм;
	
КонецФункции // ПолучитьСтруктуруПечатныхФорм()

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "Копирование" объекта
Процедура ПриКопировании(ОбъектКопирования)
	
	Если Не ЭтоГруппа Тогда
		Физлицо = Справочники.ФизическиеЛица.ПустаяСсылка();
		Наименование = "";
		Если ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.ТрудовойДоговор Тогда
			НомерДоговора = ПолучитьНомерТрудовогоДоговора();	
		КонецЕсли;
	КонецЕсли;
	
	
КонецПроцедуры

// Процедура - обработчик события "Заполнение" объекта
Процедура ОбработкаЗаполнения(Основание)
	
	ТипОснования = ТипЗнч(Основание);
	
	Если ТипОснования = Тип("СправочникСсылка.ФизическиеЛица") 
		И НЕ Основание.ЭтоГруппа Тогда
		Физлицо = Основание;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ПередЗаписью" объекта
//
//Процедура ПередЗаписью(Отказ)
//	
Процедура ПередЗаписью(Отказ)
	
	Если ПолучитьКадровыеДанныеФизлица Тогда
		СотрудникиОрганизацийПереопределяемый.МодульОбъектаПередЗаписьюДополнительно(ЭтотОбъект, Отказ);
	КонецЕсли;
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЭтоГруппа И Физлицо.Пустая() Тогда
		ОбщегоНазначенияЗК.СообщитьОбОшибке("Для сотрудника не задано физическое лицо!", Отказ);
	КонецЕсли;
	
	Если Не ЭтоГруппа И ОбособленноеПодразделение.Пустая() Тогда
		ОбособленноеПодразделение = Организация
	КонецЕсли;
	
	Если Не ЭтоГруппа И НЕ ЗначениеЗаполнено(ДатаПриемаНаРаботу) и ТекущееОбособленноеПодразделение <> ОбособленноеПодразделение Тогда
		ТекущееОбособленноеПодразделение = ОбособленноеПодразделение;
	КонецЕсли;
	
КонецПроцедуры // ПередЗаписью()

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

ПолучитьКадровыеДанныеФизлица = Истина;
