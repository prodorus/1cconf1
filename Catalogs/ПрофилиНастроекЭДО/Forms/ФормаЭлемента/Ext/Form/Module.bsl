
&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

&НаКлиенте
Перем ФормаДлительнойОперации;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФорму();
	КонецЕсли;
	
	// Управление уведомлениями о событиях 1С-ЭДО.
	Если Объект.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезСервис1СЭДО Тогда
		УведомлятьОСобытиях = ЭлектронныеДокументыСлужебный.УведомленияПодключены(Объект.ИдентификаторОрганизации);
		УстановитьНастройкуУведомлений();
	КонецЕсли;
	
	ЭлектронныеДокументыСлужебный.УстановитьУсловноеОформлениеФорматов(ЭтаФорма);
	
	ЗаполнитьПредставлениеНастроек(Объект);

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПодготовитьФорму();
	ЗаполнитьПредставлениеНастроек(Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	#Если ВебКлиент Тогда
		Элементы.КаталогВходящихДокументов.КнопкаВыбора = Ложь;
	#Иначе
		Если Объект.СпособОбменаЭД <> ПредопределенноеЗначение("Перечисление.СпособыОбменаЭД.ЧерезОператораЭДОТакском")
			ИЛИ Не ЭлектронныеДокументыСлужебныйКлиент.ПроверитьИспользованиеИнтернетПоддержкаПользователей() Тогда
			
			Элементы.НадписьЛичныйКабинетУчастникаОбменаЭД.Видимость = Ложь;
		КонецЕсли;
	#КонецЕсли

КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если СинхронизироватьСертификаты1СЭДО Тогда
		КодВозврата = Вопрос(НСтр("ru = 'Необходимо зарегистрировать сертификаты в сервисе 1С-ЭДО.
										|Это займет несколько минут. Продолжить?'"), РежимДиалогаВопрос.ДаНет);
		
		Отказ = Истина;
		Если КодВозврата = КодВозвратаДиалога.Нет Тогда
			Возврат;
		Иначе
			ЗарегистрироватьСертификаты1СЭДО(ДобавляемыйСертификат);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если КонтролироватьСодержимоеНастроекЭД Тогда
		ТекущийОбъект.ИзменитьДанныеВСвязанныхНастройкахЭДО(ТекущийОбъект, Отказ);
	КонецЕсли;
	
	Если ТекущийОбъект.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезFTP Тогда
		ТекущийОбъект.РесурсВходящихДокументов  = FTPКаталогВходящихДокументов;
	ИначеЕсли ТекущийОбъект.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезКаталог Тогда
		ТекущийОбъект.РесурсВходящихДокументов  = КаталогВходящихДокументов;
	ИначеЕсли ТекущийОбъект.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезЭлектроннуюПочту Тогда
		ТекущийОбъект.РесурсВходящихДокументов  = ЭлектроннаяПочтаОрганизации;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ПометитьНеДействующиеСертификатыВСписке();
	Оповестить("ОбновитьСостояниеЭД");
	
	Если КонтролироватьСодержимоеНастроекЭД Тогда
		Оповестить("ОбновитьИсходящиеЭД", Объект.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если ОтсутствуютПодчиненныеНастройкиЭДО() И НЕ Объект.ПометкаУдаления Тогда
		КодВозврата = Вопрос(НСтр("ru = 'Подключить контрагента к обмену электронными документами?'"),
			РежимДиалогаВопрос.ДаНет);
		
		Если КодВозврата = КодВозвратаДиалога.Да Тогда
			
			Отказ = Истина;
			
			ПараметрыФормыВыбора = Новый Структура;
			ПараметрыФормыВыбора.Вставить("РежимВыбора",        Истина);
			ПараметрыФормыВыбора.Вставить("ЗакрыватьПриВыборе", Истина);
			ПараметрыФормыВыбора.Вставить("МножественныйВыбор", ложь);
			
			Контрагент = ОткрытьФормуМодально("Справочник.Контрагенты.ФормаВыбора", ПараметрыФормыВыбора, ЭтаФорма);
			
			Если ЗначениеЗаполнено(Контрагент) Тогда
			
				ПараметрыФормы = Новый Структура;
				ЗначенияЗаполнения = Новый Структура;
				ЗначенияЗаполнения.Вставить("Контрагент",         Контрагент);
				ЗначенияЗаполнения.Вставить("ПрофильНастроекЭДО", Объект.Ссылка);
				
				ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
				ОткрытьФорму("Справочник.СоглашенияОбИспользованииЭД.Форма.ФормаЭлемента", ПараметрыФормы, ЭтаФорма);
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		ТипВыбЗначения = ТипЗнч(ВыбранноеЗначение);
		Если ТипВыбЗначения = Тип("СправочникСсылка.СертификатыЭЦП") Тогда
			
			// Сначала нужно проверить, что выбранный сертификат уже не содержится в списке
			МассивСтрок = Объект.СертификатыПодписейОрганизации.НайтиСтроки(Новый Структура("Сертификат", ВыбранноеЗначение));
			Если МассивСтрок.Количество() > 0 Тогда
				ТекстПредупреждения = НСтр("ru = 'Выбранный сертификат уже зарегистрирован в профиле настроек ЭДО'");
				Предупреждение(ТекстПредупреждения, 30);
				Возврат;
			КонецЕсли;
			
			Если ЭлектронныеДокументыСлужебныйКлиент.ПроверитьИспользованиеИнтернетПоддержкаПользователей()
				И Объект.СпособОбменаЭД = ПредопределенноеЗначение("Перечисление.СпособыОбменаЭД.ЧерезОператораЭДОТакском") Тогда
				
				ДобавляемыйСертификат = ВыбранноеЗначение;
				ЗарегистрироватьСертификатТакском(ДобавляемыйСертификат);
				// Добавление сертификата срабатывает в обработчике оповещения
			ИначеЕсли Объект.СпособОбменаЭД = ПредопределенноеЗначение("Перечисление.СпособыОбменаЭД.ЧерезСервис1СЭДО") Тогда
				
				ДобавляемыйСертификат = ВыбранноеЗначение;
				
				Если Не СинхронизироватьСертификаты1СЭДО Тогда
					СинхронизироватьСертификаты1СЭДО = Истина;
				КонецЕсли;
				ДобавитьСертификатПодписиВСписок(ДобавляемыйСертификат);
			Иначе
				ДобавитьСертификатПодписиВСписок(ВыбранноеЗначение);
				Элементы.СертификатыПодписейОрганизации.Обновить();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОповещениеОПолученииУникальногоИдентификатораУчастникаОбменаЭД" Тогда
		
		Если ЗначениеЗаполнено(Источник) И Источник <> ЭтаФорма.УникальныйИдентификатор Тогда
			Возврат;
		КонецЕсли;
		
		ДанныеИзменены = Ложь;
		ИдОрганизации = СокрЛП(Параметр);
		Если СокрЛП(Объект.ИдентификаторОрганизации) <> ИдОрганизации Тогда
			ДанныеИзменены = Истина;
			Объект.ИдентификаторОрганизации = ИдОрганизации;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДобавляемыйСертификат) Тогда
			ДанныеИзменены = Истина;
			ДобавитьСертификатПодписиВСписок(ДобавляемыйСертификат);
			Элементы.СертификатыПодписейОрганизации.Обновить();
			ДобавляемыйСертификат = Неопределено;
		КонецЕсли;
		
		ЭтаФорма.Модифицированность = ДанныеИзменены;
	КонецЕсли;
	
	Если ИмяСобытия = "ОповещениеОбУспешномИзмененииДанныхУчастникаОбменаЭД" Тогда
		
		СинхронизироватьСертификаты1СЭДО = Ложь;
		Записать();
	КонецЕсли;
	
	УстановитьВидимостьЭлементов(Истина);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ПОЛЕЙ ФОРМЫ

&НаКлиенте
Процедура СпособОбменаЭДПриИзменении(Элемент)
	
	УстановитьВидимостьЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура КаталогВходящихДокументовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	КаталогОбмена(КаталогВходящихДокументов);
КонецПроцедуры

&НаКлиенте
Процедура НадписьЛичныйКабинетУчастникаОбменаЭДНажатие(Элемент)
	
	// Если соглашение содержит более одного сертификата, то считается,
	// что все сертификаты были зарегистрированы у оператора ЭДО ранее
	// Обращение в личный кабинет выполняется по текущему или по первому сертификату
	
	Если Объект.СертификатыПодписейОрганизации.Количество() = 0 Тогда
		ТекстПредупреждения = НСтр("ru = 'Для входа в личный кабинет должен быть зарегистрирован хотя бы один сертификат'");
		Предупреждение(ТекстПредупреждения, 30);
		Возврат;
	КонецЕсли;
	
	Если Модифицированность Тогда
		ТекстВопроса = НСтр("ru = 'Выполнить действие можно только в записанном профиле настроек ЭДО.
			|Записать?'");
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			Записать();
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Массив = Новый Массив;
	Массив.Добавить(Объект.Ссылка);
	Соответствие = ЭлектронныеДокументыСлужебныйКлиент.СоотвСоглашенийИСтруктурСертификатовДляАвторизации(Массив);
	
	СертификатПодписи  = Неопределено;
	ПарольПользователя = Неопределено;
	Если Соответствие.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru='Нет доступных сертификатов, среди зарегистрированных по данному профилю настроек ЭДО.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,
														  ,
														  "СертификатыПодписейОрганизации",
														  "Объект.СертификатыПодписейОрганизации",
														  );
	Иначе
		Для Каждого ЭлементСтруктуры Из Соответствие Цикл
			СтруктураСертификата = ЭлементСтруктуры.Значение;
			Если ТипЗнч(СтруктураСертификата) = Тип("Структура") Тогда
				СтруктураСертификата.Свойство("СертификатПодписи", СертификатПодписи);
				СтруктураСертификата.Свойство("ПарольПользователя", ПарольПользователя);
			КонецЕсли;
			Прервать;
		КонецЦикла;
	КонецЕсли;
	Если ЗначениеЗаполнено(СертификатПодписи) Тогда
		ЭлектронныеДокументыКлиентПереопределяемый.СтартоватьМеханизмРаботыСОператоромЭДО(СертификатПодписи,
																						  Объект.Организация,
																						  "taxcomPrivat",
																						  Объект.ИдентификаторОрганизации,
																						  ПарольПользователя,
																						  УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстПриглашенийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	МногоСтрочныйТекст = Элементы.ТекстПриглашений.ТекстРедактирования;
	
	ТекстВведен = ВвестиСтроку(МногоСтрочныйТекст, Заголовок, 255, Истина);
	
	Если Не ТекстВведен Тогда
		Возврат;
	КонецЕсли;
	
	Объект.ШаблонТекстаПриглашений = МногоСтрочныйТекст;
	
	Если Не Модифицированность Тогда
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНД ФОРМЫ

&НаСервере
Функция ОтобратьСертификатыСервера(Знач СертификатыПрофиля)
	
	СертификатыСервера = Новый Соответствие;
	
	Для Каждого СертификатПрофиля Из СертификатыПрофиля Цикл
		СертификатХранилища = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьСертификатПоОтпечатку(СертификатПрофиля.Значение.Отпечаток);
		Если СертификатХранилища <> Неопределено Тогда
			СертификатыСервера.Вставить(СертификатПрофиля.Ключ, СертификатПрофиля.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СертификатыСервера;
	
КонецФункции

&НаКлиенте
Функция ОтобратьСертификатыКлиента(Знач СертификатыПрофиля)
	
	СертификатыКлиента = Новый Соответствие;
	
	Для Каждого СертификатПрофиля Из СертификатыПрофиля Цикл
		СертификатХранилища = ЭлектроннаяЦифроваяПодписьКлиент.ПолучитьСертификатПоОтпечатку(СертификатПрофиля.Значение.Отпечаток);
		Если СертификатХранилища <> Неопределено Тогда
			СертификатыКлиента.Вставить(СертификатПрофиля.Ключ, СертификатПрофиля.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СертификатыКлиента;
	
КонецФункции

&НаКлиенте
Процедура ТестПрофиляНастроек(Команда)
	
	ОчиститьСообщения();
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	Если Модифицированность Тогда
		ТекстВопроса = НСтр("ru = 'В текущий профиль настроек ЭДО внесены изменения. Продолжить выполнение теста?'");
		СписокКнопок = Новый СписокЗначений();
		СписокКнопок.Добавить("Выполнить", НСтр("ru = 'Сохранить и выполнить тест'"));
		СписокКнопок.Добавить("Отменить", НСтр("ru = 'Отменить тест.'"));
		Ответ = Вопрос(ТекстВопроса, СписокКнопок, , "Выполнить", НСтр("ru = 'Тест настроек профиля'"));

		Если Ответ = "Отменить" Тогда
			Возврат;
		Иначе
			Записать();
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЭлектронныеДокументыСлужебныйВызовСервера.ПроверитьСоответствиеОрганизаций(Объект.Ссылка) Тогда
		ТекстСообщения = НСтр("ru = 'Различаются организации в профиле, настройке ЭДО, сертификате. Тест не выполнен.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;	
	
	Если Объект.СпособОбменаЭД = ПредопределенноеЗначение("Перечисление.СпособыОбменаЭД.ЧерезОператораЭДОТакском")
		ИЛИ Объект.СпособОбменаЭД = ПредопределенноеЗначение("Перечисление.СпособыОбменаЭД.ЧерезСервис1СЭДО") Тогда
		
		// Блок проверки связи с оператором.
		Состояние(НСтр("ru = 'Тест настроек.'"),
		,
		НСтр("ru = 'Выполняется тестирование связи с оператором. Подождите...'"));
		
		ЗавершитьТесты = Ложь;
		
		// Блок проверки версии платформы.
		СистемнаяИнформация = Новый СистемнаяИнформация;
		
		РезультатТеста = НСтр("ru = 'Пройден успешно.'");
		Если ОбщегоНазначенияКлиентСервер.СравнитьВерсии(СистемнаяИнформация.ВерсияПриложения, "8.2.17.0") < 0 Тогда
			РезультатТеста = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьСообщениеОбОшибке("106");
			ЗавершитьТесты = Истина;
		КонецЕсли;
		ШаблонСообщения = НСтр("ru = 'Тест. Проверка версии платформы 1С.
		|%1'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, РезультатТеста);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
		// Критичная ошибка - дальше тесты не проводим.
		Если ЗавершитьТесты Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	ПараметрыАутентификации = Неопределено;
	Если Объект.СпособОбменаЭД = ПредопределенноеЗначение("Перечисление.СпособыОбменаЭД.ЧерезСервис1СЭДО") Тогда
		ПараметрыАутентификации = ЭлектронныеДокументыСлужебныйКлиент.АутентификацияНаСайте();
		Если ПараметрыАутентификации = Неопределено Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	// Блок проверки сертификатов.
	ШаблонСообщения = НСтр("ru = 'Тестирование сертификата: %1.'");
	
	СертификатыПрофиля = Новый Соответствие;
	Для Каждого Строка Из Объект.СертификатыПодписейОрганизации Цикл
		СертификатыПрофиля.Вставить(Строка.Сертификат, ЭлектронныеДокументыСлужебныйВызовСервера.РеквизитыСертификата(Строка.Сертификат));
	КонецЦикла;
	
	НаКлиенте = Ложь;
	НаСервере = Ложь;
	Если ЭлектронныеДокументыСлужебныйВызовСервера.ВыполнятьКриптооперацииНаСервере() Тогда
		СертификатыДляВыбора = ОтобратьСертификатыСервера(СертификатыПрофиля);
		НаСервере = Истина;
	Иначе
		СертификатыДляВыбора = ОтобратьСертификатыКлиента(СертификатыПрофиля);
		НаКлиенте = Истина;
	КонецЕсли;
	
	КонтекстПроверки = Новый Структура;
	КонтекстПроверки.Вставить("НаКлиенте", НаКлиенте);
	КонтекстПроверки.Вставить("НаСервере", НаСервере);
	
	Если Не СертификатыДляВыбора.Количество() Тогда
		Если КонтекстПроверки.НаКлиенте Тогда
			ТекстСообщения = НСтр("ru='На клиенте не обнаружено сертификатов для проверки.'");
		Иначе
			ТекстСообщения = НСтр("ru='На сервере не обнаружено сертификатов для проверки.'");
		КонецЕсли;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	Если ЭлектронныеДокументыСлужебныйКлиент.ПарольКСертификатуПолучен(СертификатыДляВыбора, НСтр("ru = 'Тестирование сертификата.'")) Тогда
		
		Для Каждого СтрокаСертификата Из СертификатыДляВыбора Цикл
			Сертификат           = СтрокаСертификата.Ключ;
			ПараметрыСертификата = СтрокаСертификата.Значение;
		КонецЦикла;
		
		ПараметрыСертификата.Вставить("СертификатПодписи", Сертификат);
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Сертификат);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
		ЕстьОшибки = Ложь;
		ЭлектронныеДокументыСлужебныйКлиент.ТестНастроекСертификата(Сертификат, ПараметрыСертификата, КонтекстПроверки, , ЕстьОшибки);
		
		Если Не ПараметрыСертификата.ПарольПолучен Или ЕстьОшибки Тогда
			ТекстСообщения = НСтр("ru = 'Тестирование отменено.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Возврат
		КонецЕсли;
		
		Если Объект.СпособОбменаЭД = ПредопределенноеЗначение("Перечисление.СпособыОбменаЭД.ЧерезОператораЭДОТакском")
			ИЛИ Объект.СпособОбменаЭД = ПредопределенноеЗначение("Перечисление.СпособыОбменаЭД.ЧерезСервис1СЭДО") Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Тест. Проверка связи с сервисом оператора.'"));
			
			РезультатТеста = НСтр("ru = 'Не пройден.'");
			
			Если ЭлектронныеДокументыСлужебныйВызовСервера.ВыполнятьАвторизациюНаСервере() Тогда
				СертификатыДляВыбора = ОтобратьСертификатыСервера(СертификатыПрофиля);
				ТекстСообщения = НСтр("ru = 'Не обнаружено сертификатов для авторизации на сервере.'");
			Иначе
				СертификатыДляВыбора = ОтобратьСертификатыКлиента(СертификатыПрофиля);
				ТекстСообщения = НСтр("ru = 'Не обнаружено сертификатов для авторизации на клиенте.'");
			КонецЕсли;
			
			Если СертификатыДляВыбора.Количество() Тогда
				
				Если ЭлектронныеДокументыСлужебныйКлиент.ПарольКСертификатуПолучен(СертификатыДляВыбора, НСтр("ru = 'Авторизация в сервисе оператора ЭДО.'")) Тогда
					
					Для Каждого Сертификат Из СертификатыДляВыбора Цикл
						ПараметрыСертификата = Сертификат.Значение;
						ПараметрыСертификата.Вставить("СертификатПодписи", Сертификат.Ключ);
					КонецЦикла;
					
					ПараметрыСертификата.Вставить("СпособОбменаЭД",           Объект.СпособОбменаЭД);
					ПараметрыСертификата.Вставить("ИдентификаторОрганизации", Объект.ИдентификаторОрганизации);
					
					Если ЭлектронныеДокументыСлужебныйВызовСервера.ВыполнятьАвторизациюНаСервере() Тогда
						Если ЭлектронныеДокументыСлужебныйВызовСервера.ТестСвязиСОператоромЭДО(ПараметрыСертификата, Ложь, ПараметрыАутентификации) Тогда
							РезультатТеста = НСтр("ru = 'Пройден успешно.'");
						КонецЕсли;
					Иначе
						Если ЭлектронныеДокументыСлужебныйКлиент.ТестСвязиСОператоромЭДО(ПараметрыСертификата, Ложь, ПараметрыАутентификации) Тогда
							РезультатТеста = НСтр("ru = 'Пройден успешно.'");
						КонецЕсли;
					КонецЕсли;
					
				КонецЕсли;
				
			Иначе
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатТеста);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Объект.СпособОбменаЭД = ПредопределенноеЗначение("Перечисление.СпособыОбменаЭД.ЧерезЭлектроннуюПочту") Тогда
		Состояние(НСтр("ru = 'Тест настроек.'"),
			,
			НСтр("ru = 'Выполняется тестирование обмена ЭД через электронную почту. Подождите...'"));
			
		УчетнаяЗапись = Объект.РесурсВходящихДокументов;
		
		Если ЭлектроннаяПочтаВызовСервера.ПарольЗадан(УчетнаяЗапись) Тогда
			РаботаСПочтовымиСообщениямиКлиент.ПроверитьВозможностьОтправкиИПолученияЭлектроннойПочты(УчетнаяЗапись, Неопределено);
		Иначе
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("УчетнаяЗапись", УчетнаяЗапись);
			ПараметрыФормы.Вставить("ПроверитьВозможностьОтправкиИПолучения", Истина);
			ОткрытьФорму("ОбщаяФорма.ПодтверждениеПароляУчетнойЗаписи", ПараметрыФормы);
		КонецЕсли;
	КонецЕсли;
	
	Если Объект.СпособОбменаЭД = ПредопределенноеЗначение("Перечисление.СпособыОбменаЭД.ЧерезКаталог") Тогда
		Состояние(НСтр("ru = 'Тест настроек.'"),
			,
			НСтр("ru = 'Выполняется тестирование обмена ЭД через каталог. Подождите...'"));
		
		ПутьКРодительскомуКаталогуПрофильНастроекЭДО = Объект.РесурсВходящихДокументов;
		
		// Блок проверки доступа к каталогам.
		ШаблонСообщения = НСтр("ru = 'Тест. Проверка доступа к общему каталогу для обмена ЭД.
		|%1'");
		Попытка
			Если ЭлектронныеДокументыСлужебныйВызовСервера.ПроверитьДоступностьКаталогаДляПрямогоОбмена(
				ПутьКРодительскомуКаталогуПрофильНастроекЭДО) Тогда
				
				РезультатТеста = НСтр("ru = 'Пройден успешно.'");
			Иначе
				РезультатТеста = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьСообщениеОбОшибке("107");
			КонецЕсли;
		Исключение
			ШаблонРезультата = НСтр("ru = '%1
			|%2'");
			ТекстОшибки = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьСообщениеОбОшибке("107");
			РезультатТеста = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонРезультата, ТекстОшибки,
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, РезультатТеста);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	Если Объект.СпособОбменаЭД = ПредопределенноеЗначение("Перечисление.СпособыОбменаЭД.ЧерезFTP") Тогда
		Состояние(НСтр("ru = 'Тест настроек.'"),,
			НСтр("ru = 'Выполняется тестирование обмена ЭД через FTP. Подождите...'"));
		
		// Блок проверки доступа к каталогам.
		ШаблонСообщения = НСтр("ru = 'Тест. Проверка доступа к серверу FTP для обмена ЭД.
		|%1'");
		Попытка
			ПараметрыСоединения = Новый Структура;
			ПараметрыСоединения.Вставить("FTPКаталогВходящихДокументов", FTPКаталогВходящихДокументов);
			ПараметрыСоединения.Вставить("АдресСервераFTP", Объект.АдресСервера);
			ПараметрыСоединения.Вставить("ПортFTP", Объект.Порт);
			ПараметрыСоединения.Вставить("ПользовательFTP", Объект.Логин);
			ПараметрыСоединения.Вставить("ПарольFTP", Объект.Пароль);
			ПараметрыСоединения.Вставить("ПассивноеСоединениеFTP", Объект.ПассивноеСоединение);
			
			Если ЭлектронныеДокументыСлужебныйВызовСервера.ПроверитьДоступностьКаталогаFTP(ПараметрыСоединения) Тогда
				РезультатТеста = НСтр("ru = 'Пройден успешно.'");
			Иначе
				РезультатТеста = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьСообщениеОбОшибке("107");
			КонецЕсли;
		Исключение
			ШаблонРезультата = НСтр("ru = '%1
			|%2'");
			ТекстОшибки = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьСообщениеОбОшибке("107");
			РезультатТеста = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонРезультата, ТекстОшибки,
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, РезультатТеста);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСертификат(Команда)
	
	Если Не ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьЗначениеФункциональнойОпции(
		"ИспользоватьЭлектронныеЦифровыеПодписи") Тогда
		
		ТекстСообщения = ЭлектронныеДокументыСлужебныйВызовСервера.ТекстСообщенияОНеобходимостиНастройкиСистемы("ПодписаниеЭД");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ОткрытьФормуВыбораСертификатаЭП();
	
КонецПроцедуры

&НаКлиенте
Процедура НачальнаяДатаЗапросаДанныхУОператора(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ПрофильНастроекЭДО", Объект.Ссылка);
	ПараметрыФормы.Вставить("РежимОткрытияОкна", РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	ОткрытьФорму("РегистрСведений.СостоянияОбменовЭДЧерезОператоровЭДО.Форма.ФормаРедактирования",
		ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаУведомленийВыполнить(Команда)
	
	СертификатыПрофиля = Новый Соответствие;
	
	Для Каждого Строка Из Объект.СертификатыПодписейОрганизации Цикл
		
		Сертификат = Строка.Сертификат;
		
		Если ИстекСрокДействияСертификата(Сертификат) Тогда
			Продолжить;
		КонецЕсли;
		
		ПараметрыСертификата = ЭлектронныеДокументыСлужебныйВызовСервера.РеквизитыСертификата(Сертификат);
		
		СертификатыПрофиля.Вставить(Сертификат, ПараметрыСертификата);
		
	КонецЦикла;
	
	Если СертификатыПрофиля.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	
	СвойстваПрофиля = Новый Структура;
	СвойстваПрофиля.Вставить("ИдентификаторОрганизации", Объект.ИдентификаторОрганизации);
	СвойстваПрофиля.Вставить("СпособОбменаЭД", Объект.СпособОбменаЭД);
	
	СвойстваУведомлений = Неопределено;
	ЭлектронныеДокументыСлужебныйКлиент.ЗаполнитьСвойстваУведомленийЭДО(СвойстваУведомлений, СертификатыПрофиля,
		СвойстваПрофиля);
	
	Если СвойстваУведомлений = Неопределено Тогда
		
		ТекстСообщения = НСтр("ru = 'Ошибка получения данных от сервиса ЭДО. Выполнение операции прервано.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
		Возврат;
	КонецЕсли;
	
	СвойстваУведомлений.Вставить("ИдентификаторОрганизации", Объект.ИдентификаторОрганизации);
	СвойстваУведомлений.Вставить("ПрофильНастроек", Объект.Ссылка);
	
	ПараметрыУведомлений = ОткрытьФормуМодально("Справочник.ПрофилиНастроекЭДО.Форма.НастройкаУведомленийЭДО", СвойстваУведомлений, Объект);
	
	Если ПараметрыУведомлений = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаписатьПрофиль = Ложь;
	ОбновитьНастройкуУведомлений = Ложь;
	Если Не ПараметрыУведомлений.ЭлектроннаяПочта = Объект.ЭлектроннаяПочтаДляУведомлений Тогда
		
		Объект.ЭлектроннаяПочтаДляУведомлений = ПараметрыУведомлений.ЭлектроннаяПочта;
		ЗаписатьПрофиль = Истина;
		ОбновитьНастройкуУведомлений = Истина;
	КонецЕсли;
	
	Если Не ПараметрыУведомлений.УведомлятьОСобытиях = УведомлятьОСобытиях Тогда
		УведомлятьОСобытиях = ПараметрыУведомлений.УведомлятьОСобытиях;
		ОбновитьНастройкуУведомлений = Истина;
	КонецЕсли;
	
	Если ЗаписатьПрофиль Тогда
		Записать();
	КонецЕсли;
	
	Если ОбновитьНастройкуУведомлений Тогда
		УстановитьНастройкуУведомлений();
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ПОЛЕЙ ТАБЛИЦЫ Сертификаты подписей организации

&НаКлиенте
Процедура СертификатыПодписейОрганизацииПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	ОткрытьФорму("Справочник.СертификатыЭЦП.ФормаОбъекта", Новый Структура("Ключ", Элемент.ТекущиеДанные.Сертификат));
	
КонецПроцедуры

&НаКлиенте
Процедура СертификатыПодписейОрганизацииВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФорму("Справочник.СертификатыЭЦП.ФормаОбъекта", Новый Структура("Ключ", Элемент.ТекущиеДанные.Сертификат));
	
КонецПроцедуры

&НаКлиенте
Процедура СертификатыПодписейОрганизацииПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ПОЛЕЙ ТАБЛИЦЫ Исходящие Документы

&НаКлиенте
Процедура ИсходящиеДокументыПередНачаломИзменения(Элемент, Отказ)
	
	Если Не КонтролироватьСодержимоеНастроекЭД Тогда
		КодВозврата = Вопрос(НСтр("ru = 'Изменения ""Профиля настроек ЭДО"" будут применены для связанных ""Настроек ЭДО"" с отключенным расширенным режимом.
										|Продолжить?'"), РежимДиалогаВопрос.ДаНет);
		
		Если КодВозврата = КодВозвратаДиалога.Да Тогда
			КонтролироватьСодержимоеНастроекЭД = Истина;
		Иначе
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсходящиеДокументыПриИзменении(Элемент)
	
	ОчиститьСообщения();
	
	Если Элемент.ТекущийЭлемент.Имя = "ИсходящиеДокументыФормировать" Тогда
		ЗначениеЭлемента = Элемент.ТекущиеДанные.Формировать;
		Если Не ЗначениеЭлемента Тогда
			Элемент.ТекущиеДанные.ИспользоватьЭЦП = ЗначениеЭлемента;
		КонецЕсли;
	КонецЕсли;
	
	Если Элемент.ТекущиеДанные.ИспользоватьЭЦП И НЕ Элемент.ТекущиеДанные.Формировать Тогда
		Если Элемент.ТекущийЭлемент.Имя = "ИсходящиеДокументыИспользоватьЭЦП" Тогда
			Элемент.ТекущиеДанные.Формировать = Истина;
		Иначе
			Элемент.ТекущиеДанные.ИспользоватьЭЦП = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если Элемент.ТекущиеДанные.ИсходящийДокумент = ПредопределенноеЗначение("Перечисление.ВидыЭД.ПроизвольныйЭД")
		ИЛИ НЕ ЭлектронныеДокументыСлужебныйВызовСервера.ЭтоПрямойОбмен(Объект.СпособОбменаЭД) Тогда
		
		Если Элемент.ТекущийЭлемент.Имя = "ИсходящиеДокументыИспользоватьЭЦП" И НЕ Элемент.ТекущиеДанные.ИспользоватьЭЦП Тогда
			ШаблонСообщения = НСтр("ru='Отправка документа %1 возможна только с использованием электронной подписи.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
				Элемент.ТекущиеДанные.ИсходящийДокумент);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
		Элемент.ТекущиеДанные.ИспользоватьЭЦП = Элемент.ТекущиеДанные.Формировать;
		Если Не Элемент.ТекущиеДанные.Формировать Тогда 
			Элемент.ТекущиеДанные.ТребуетсяОтветнаяПодпись = Элемент.ТекущиеДанные.Формировать;
		КонецЕсли;
	КонецЕсли;
	
	Если (Элемент.ТекущиеДанные.ИсходящийДокумент = ПредопределенноеЗначение("Перечисление.ВидыЭД.СчетФактура")
		ИЛИ Элемент.ТекущиеДанные.ИсходящийДокумент = ПредопределенноеЗначение("Перечисление.ВидыЭД.КорректировочныйСчетФактура"))
		И ЭлектронныеДокументыСлужебныйВызовСервера.ЭтоПрямойОбмен(Объект.СпособОбменаЭД) Тогда
		
		Элемент.ТекущиеДанные.Формировать = Ложь;
		Элемент.ТекущиеДанные.ИспользоватьЭЦП = Ложь;
		
		ШаблонСообщения = НСтр("ru='Отправка документа %1 возможна только через оператора ЭДО.'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			Элемент.ТекущиеДанные.ИсходящийДокумент);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	Если (Элемент.ТекущиеДанные.ИсходящийДокумент = ПредопределенноеЗначение("Перечисление.ВидыЭД.АктНаПередачуПрав")
		ИЛИ Элемент.ТекущиеДанные.ИсходящийДокумент = ПредопределенноеЗначение("Перечисление.ВидыЭД.АктИсполнитель")
		ИЛИ Элемент.ТекущиеДанные.ИсходящийДокумент = ПредопределенноеЗначение("Перечисление.ВидыЭД.ТОРГ12Продавец"))
		И Объект.ИспользоватьУПД Тогда
		
		Элемент.ТекущиеДанные.Формировать = Ложь;
		
		ШаблонСообщения = НСтр("ru='Данные документа %1 передаются в составе счет-фактуры(универсального передаточного документа).'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			Элемент.ТекущиеДанные.ИсходящийДокумент);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	Если Элемент.ТекущиеДанные.ИсходящийДокумент = ПредопределенноеЗначение("Перечисление.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель")
		И Объект.ИспользоватьУКД Тогда
		
		Элемент.ТекущиеДанные.Формировать = Ложь;
		
		ШаблонСообщения = НСтр("ru='Данные документа %1 передаются в составе корректировочного счет-фактуры(универсального корректировочного документа).'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			Элемент.ТекущиеДанные.ИсходящийДокумент);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;

	
	Если Элемент.ТекущиеДанные.ИсходящийДокумент = ПредопределенноеЗначение("Перечисление.ВидыЭД.СчетФактура")
		И Не ЭлектронныеДокументыСлужебныйВызовСервера.ЭтоПрямойОбмен(Объект.СпособОбменаЭД) Тогда
		
		Если Элемент.ТекущиеДанные.ВерсияФормата = "ФНС 5.01 (УПД:Счет-фактура и первичный документ)"
			ИЛИ Элемент.ТекущиеДанные.ВерсияФормата = "ФНС 2019 (УПД:Счет-фактура и первичный документ)" Тогда
			Объект.ИспользоватьУПД = Истина;
			ИзменитьФлагУПДУКД();
		КонецЕсли;
	КонецЕсли;
	Если Элемент.ТекущиеДанные.ИсходящийДокумент = ПредопределенноеЗначение("Перечисление.ВидыЭД.КорректировочныйСчетФактура")
		И Не ЭлектронныеДокументыСлужебныйВызовСервера.ЭтоПрямойОбмен(Объект.СпособОбменаЭД) Тогда
		
		Если Элемент.ТекущиеДанные.ВерсияФормата = "ФНС 5.01 (УКД:Корректировочный счет-фактура и первичный документ)" Тогда
			Объект.ИспользоватьУКД = Истина;
			ИзменитьФлагУПДУКД();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсходящиеДокументыВерсияФорматаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СписокВыбора = Элемент.СписокВыбора;
	СписокВыбора.Очистить();
	
	ИсходящийДокумент = Элементы.ИсходящиеДокументы.ТекущиеДанные.ИсходящийДокумент;
	СписокДоступныхВерсий = ЭлектронныеДокументыСлужебныйКлиент.ДоступныеВерсииФорматаПоПараметрамЭД(ИсходящийДокумент,
			Объект.СпособОбменаЭД, Объект.ИспользоватьУПД, Объект.ИспользоватьУКД);
			
	Для Каждого ЭлементСписка Из СписокДоступныхВерсий Цикл
		СписокВыбора.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсходящиеДокументыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "ИсходящиеДокументыРегламентЭДО" Тогда
	
		Если Не КонтролироватьСодержимоеНастроекЭД Тогда
			
			СтандартнаяОбработка = Ложь;
			
			КодВозврата = Вопрос(НСтр("ru = 'Изменения ""Профиля настроек ЭДО"" будут применены для связанных ""Настроек ЭДО"" с отключенным расширенным режимом.
			|Продолжить?'"), РежимДиалогаВопрос.ДаНет);
			
			Если КодВозврата = КодВозвратаДиалога.Да Тогда
				КонтролироватьСодержимоеНастроекЭД = Истина;
				ВыполнитьНастройкуРегламентаЭДО()
			Иначе
				Отказ = Истина;
			КонецЕсли;
		Иначе
			
			ВыполнитьНастройкуРегламентаЭДО();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсходящиеДокументыВерсияФорматаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ИсходящиеДокументы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИзменитьРегламентЭДО(ТекущиеДанные.ПолучитьИдентификатор());

КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьУКДПриИзменении(Элемент)
	
	Если Не КонтролироватьСодержимоеНастроекЭД Тогда
		КодВозврата = Вопрос(НСтр("ru = 'Изменения ""Профиля настроек ЭДО"" будут применены для связанных ""Настроек ЭДО"" с отключенным расширенным режимом.
										|Продолжить?'"), РежимДиалогаВопрос.ДаНет);
		
		Если КодВозврата = КодВозвратаДиалога.Да Тогда
			КонтролироватьСодержимоеНастроекЭД = Истина;
			ИзменитьФлагУПДУКД();
		Иначе
			Объект.ИспользоватьУКД = Не Объект.ИспользоватьУКД;
		КонецЕсли;
	Иначе
		ИзменитьФлагУПДУКД();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьУПДПриИзменении(Элемент)
	
	Если Не КонтролироватьСодержимоеНастроекЭД Тогда
		КодВозврата = Вопрос(НСтр("ru = 'Изменения ""Профиля настроек ЭДО"" будут применены для связанных ""Настроек ЭДО"" с отключенным расширенным режимом.
										|Продолжить?'"), РежимДиалогаВопрос.ДаНет);
		
		Если КодВозврата = КодВозвратаДиалога.Да Тогда
			КонтролироватьСодержимоеНастроекЭД = Истина;
			ИзменитьФлагУПДУКД();
		Иначе
			Объект.ИспользоватьУПД = Не Объект.ИспользоватьУПД;
		КонецЕсли;
	Иначе
		ИзменитьФлагУПДУКД();
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

&НаСервере
Процедура ПодготовитьФорму()
	
	Если Объект.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезFTP Тогда
		FTPКаталогВходящихДокументов = Объект.РесурсВходящихДокументов;
	ИначеЕсли Объект.СпособОбменаЭД  = Перечисления.СпособыОбменаЭД.ЧерезКаталог Тогда
		КаталогВходящихДокументов    = Объект.РесурсВходящихДокументов;
	ИначеЕсли Объект.СпособОбменаЭД  = Перечисления.СпособыОбменаЭД.ЧерезЭлектроннуюПочту Тогда
		ЭлектроннаяПочтаОрганизации  = Объект.РесурсВходящихДокументов;
	ИначеЕсли Объект.СпособОбменаЭД  = Перечисления.СпособыОбменаЭД.ЧерезСервис1СЭДО Тогда
	КонецЕсли;
	
	ПометитьНеДействующиеСертификатыВСписке();
	
	УстановитьВидимостьЭлементов();
	
КонецПроцедуры

&НаСервере
Функция ОтсутствуютПодчиненныеНастройкиЭДО()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка
	|ИЗ
	|	Справочник.СоглашенияОбИспользованииЭД.ИсходящиеДокументы КАК СоглашенияОбИспользованииЭДИсходящиеДокументы
	|ГДЕ
	|	СоглашенияОбИспользованииЭДИсходящиеДокументы.СпособОбменаЭД = &СпособОбменаЭД
	|	И СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.Организация = &Организация
	|	И НЕ СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("СпособОбменаЭД", Объект.СпособОбменаЭД);
	Запрос.УстановитьПараметр("Организация",    Объект.Организация);
	
	Возврат Запрос.Выполнить().Пустой();

КонецФункции

&НаСервере
Процедура УстановитьВидимостьЭлементов(ОбновитьРегламентЭДО = Ложь)
	
	Элементы.ГруппаОбменЧерезОператораИнформация.Видимость = Не ЭлектронныеДокументыСлужебныйВызовСервера.ЭтоПрямойОбмен(Объект.СпособОбменаЭД);
	Элементы.ГруппаУПДУКД.Видимость                        = Не ЭлектронныеДокументыСлужебныйВызовСервера.ЭтоПрямойОбмен(Объект.СпособОбменаЭД);
	Элементы.ТекстПриглашений.Видимость                    = Не ЭлектронныеДокументыСлужебныйВызовСервера.ЭтоПрямойОбмен(Объект.СпособОбменаЭД);
	
	Элементы.ГруппаПрямойОбменЧерезЭлектроннуюПочтуИнформация.Видимость = Объект.СпособОбменаЭД = ПредопределенноеЗначение("Перечисление.СпособыОбменаЭД.ЧерезЭлектроннуюПочту");
	Элементы.ГруппаПрямойОбменЧерезКаталогИнформация.Видимость = Объект.СпособОбменаЭД = ПредопределенноеЗначение("Перечисление.СпособыОбменаЭД.ЧерезКаталог");
	Элементы.ГруппаПрямойОбменЧерезFTPИнформация.Видимость = Объект.СпособОбменаЭД = ПредопределенноеЗначение("Перечисление.СпособыОбменаЭД.ЧерезFTP");
	
	Элементы.НачальнаяДатаЗапросаДанныхУОператора.Видимость = Не ЭлектронныеДокументыСлужебныйВызовСервера.ЭтоПрямойОбмен(Объект.СпособОбменаЭД);
	
	ВидимостьУведомления = (Объект.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезСервис1СЭДО);
	Элементы.ГруппаУведомления.Видимость = ВидимостьУведомления;
	
	Если ОбновитьРегламентЭДО Тогда
		ЗаполнитьПредставлениеНастроек(Объект);
	КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ЗарегистрироватьСертификатТакском(СертификатЭП)
	
	// Проводим тест настроек сертификата подписи с подавлением вывода успешных результатов.
	ОчиститьСообщения();
	
	Отказ = Ложь;
	Если Не ЗначениеЗаполнено(СертификатЭП) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
											ЭлектронныеДокументыКлиентСервер.ПолучитьТекстСообщения("Поле", "Заполнение", "Сертификат"),
											Объект.Ссылка,
											"СертификатыПодписейОрганизации",
											,
											Отказ);
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
											ЭлектронныеДокументыКлиентСервер.ПолучитьТекстСообщения("Поле", "Заполнение", "Организация"),
											Объект.Ссылка,
											"Организация",
											,
											Отказ);
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнятьКриптооперацииНаСервере = Ложь;
	ВыполнятьАвторизациюНаСервере = Ложь;
	ЭлектронныеДокументыСлужебныйВызовСервера.ИнициализироватьПеременные(ВыполнятьКриптооперацииНаСервере, ВыполнятьАвторизациюНаСервере);
	
	НаКлиенте = НЕ (ВыполнятьКриптооперацииНаСервере И ВыполнятьАвторизациюНаСервере);
	НаСервере = ВыполнятьКриптооперацииНаСервере ИЛИ ВыполнятьАвторизациюНаСервере;
	
	ПарольПользователя = Неопределено;
	ПараметрыСертификата = ЭлектронныеДокументыСлужебныйВызовСервера.РеквизитыСертификата(СертификатЭП);
	
	КонтекстПроверки = Новый Структура;
	КонтекстПроверки.Вставить("НаКлиенте", НаКлиенте);
	КонтекстПроверки.Вставить("НаСервере", НаСервере);
	
	ЭлектронныеДокументыСлужебныйКлиент.ТестНастроекСертификата(СертификатЭП,
																ПараметрыСертификата,
																КонтекстПроверки,
																Истина,
																Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЭлектронныеДокументыКлиентПереопределяемый.СтартоватьМеханизмРаботыСОператоромЭДО(СертификатЭП,
																					  Объект.Организация,
																					  "taxcomGetID",
																					  Объект.ИдентификаторОрганизации,
																					  ПараметрыСертификата.ПарольПользователя,
																					  ЭтаФорма.УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗарегистрироватьСертификаты1СЭДО(СертификатЭП)
	
	// Проводим тест настроек сертификата подписи с подавлением вывода успешных результатов.
	ОчиститьСообщения();
	
	Отказ = Ложь;
	Если Не ЗначениеЗаполнено(СертификатЭП) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
											ЭлектронныеДокументыКлиентСервер.ПолучитьТекстСообщения("Поле", "Заполнение", "Сертификат"),
											Объект.Ссылка,
											"СертификатыПодписейОрганизации",
											,
											Отказ);
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
											ЭлектронныеДокументыКлиентСервер.ПолучитьТекстСообщения("Поле", "Заполнение", "Организация"),
											Объект.Ссылка,
											"Организация",
											,
											Отказ);
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	ЗаполнитьРеквизитыОрганизацииДляРегистрационногоПакета();
	
	// Подготовка данных и открытие формы для ввода адреса
	ВыбратьАдрес(Ложь);
	
	// Обновим данные по оператору ЭДО
	ПолучитьАктуальныеДанныеОператораЭДО();
	
	ПараметрыАутентификации = ЭлектронныеДокументыСлужебныйКлиент.АутентификацияНаСайте();
	Если ПараметрыАутентификации = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнятьКриптооперацииНаСервере = Ложь;
	ВыполнятьАвторизациюНаСервере = Ложь;
	ЭлектронныеДокументыСлужебныйВызовСервера.ИнициализироватьПеременные(ВыполнятьКриптооперацииНаСервере, ВыполнятьАвторизациюНаСервере);
	
	НаКлиенте = НЕ (ВыполнятьКриптооперацииНаСервере И ВыполнятьАвторизациюНаСервере);
	НаСервере = ВыполнятьКриптооперацииНаСервере ИЛИ ВыполнятьАвторизациюНаСервере;
	
	ПарольПользователя = Неопределено;
	ПараметрыСертификата = ЭлектронныеДокументыСлужебныйВызовСервера.РеквизитыСертификата(СертификатЭП);
	
	КонтекстПроверки = Новый Структура;
	КонтекстПроверки.Вставить("НаКлиенте", НаКлиенте);
	КонтекстПроверки.Вставить("НаСервере", НаСервере);
	
	ЭлектронныеДокументыСлужебныйКлиент.ТестНастроекСертификата(СертификатЭП,
																ПараметрыСертификата,
																КонтекстПроверки,
																Истина,
																Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ТекПарольПользователя = Неопределено;
	
	Соответствие = Новый Соответствие;
	Соответствие.Вставить(ДобавляемыйСертификат, ПараметрыСертификата);
	ВидОперации = НСтр("ru = 'Подписание регистрационного пакета'");
	Если ЭлектронныеДокументыСлужебныйКлиент.ПарольКСертификатуПолучен(Соответствие, ВидОперации)
		И Соответствие.Количество() > 0 Тогда
		Для Каждого КлючИЗначение Из Соответствие Цикл
			ПараметрыСертификата = КлючИЗначение.Значение;
			Прервать;
		КонецЦикла;
	Иначе
		Возврат;
	КонецЕсли;
	ТекПарольПользователя = ПараметрыСертификата.ПарольПользователя;
	
	ЕстьОшибки = Ложь;
	Если ЭлектронныеДокументыСлужебныйВызовСервера.ВыполнятьАвторизациюНаСервере() Тогда
		ПодготовитьДанныеДляРегистрационногоПакета1СЭДОНаСервере(ТекПарольПользователя, ПараметрыАутентификации, ЕстьОшибки);
	Иначе
		ПодготовитьДанныеДляРегистрационногоПакета1СЭДОНаКлиенте(ТекПарольПользователя, ПараметрыАутентификации, ЕстьОшибки);
	КонецЕсли;
	
	Если Не ЕстьОшибки Тогда
		// Запустим обработчик ожидания резальтата регистрации органиазации у оператора.
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗаданияДляЭД", ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);
		ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтаФорма, УникальныйИдентификаторЗаявки1СЭДО);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыОрганизацииДляРегистрационногоПакета()
	
	ДанныеОрганизации = Новый Структура;
	ЭлектронныеДокументыПереопределяемый.ЗаполнитьРегистрационныеДанныеОрганизации(Объект.Организация, ДанныеОрганизации);
	
	Если ДанныеОрганизации.Свойство("КодИМНС") Тогда
		Объект.КодНалоговогоОргана = ДанныеОрганизации.КодИМНС;
	КонецЕсли;
	Если ДанныеОрганизации.Свойство("Индекс") Тогда
		Объект.Индекс = ДанныеОрганизации.Индекс;
	КонецЕсли;
	Если ДанныеОрганизации.Свойство("Регион") Тогда
		Объект.Регион = ДанныеОрганизации.Регион;
	КонецЕсли;
	Если ДанныеОрганизации.Свойство("КодРегиона") Тогда
		Объект.КодРегиона = ДанныеОрганизации.КодРегиона;
	КонецЕсли;
	Если ДанныеОрганизации.Свойство("Район") Тогда
		Объект.Район = ДанныеОрганизации.Район;
	КонецЕсли;
	Если ДанныеОрганизации.Свойство("Город") Тогда
		Объект.Город = ДанныеОрганизации.Город;
	КонецЕсли;
	Если ДанныеОрганизации.Свойство("НаселенныйПункт") Тогда
		Объект.НаселенныйПункт = ДанныеОрганизации.НаселенныйПункт;
	КонецЕсли;
	Если ДанныеОрганизации.Свойство("Улица") Тогда
		Объект.Улица = ДанныеОрганизации.Улица;
	КонецЕсли;
	Если ДанныеОрганизации.Свойство("Дом") Тогда
		Объект.Дом = ДанныеОрганизации.Дом;
	КонецЕсли;
	Если ДанныеОрганизации.Свойство("Корпус") Тогда
		Объект.Корпус = ДанныеОрганизации.Корпус;
	КонецЕсли;
	Если ДанныеОрганизации.Свойство("Квартира") Тогда
		Объект.Квартира = ДанныеОрганизации.Квартира;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСертификатПодписиВСписок(СертификатЭЦП)
	
	Строка = Объект.СертификатыПодписейОрганизации.Добавить();
	Строка.Сертификат = СертификатЭЦП;
	Модифицированность = Истина;
	ПометитьНеДействующиеСертификатыВСписке();
	
КонецПроцедуры

&НаСервере
Процедура ПометитьНеДействующиеСертификатыВСписке()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СертификатыКлючейЭлектроннойПодписиИШифрования.Ссылка,
	|	ВЫБОР
	|		КОГДА НЕ СертификатыКлючейЭлектроннойПодписиИШифрования.ПометкаУдаления
	|				И НЕ СертификатыКлючейЭлектроннойПодписиИШифрования.Отозван
	|				И СертификатыКлючейЭлектроннойПодписиИШифрования.ДатаОкончания >= &ТекущаяДата
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Действует
	|ИЗ
	|	Справочник.СертификатыЭЦП КАК СертификатыКлючейЭлектроннойПодписиИШифрования
	|ГДЕ
	|	СертификатыКлючейЭлектроннойПодписиИШифрования.Ссылка В(&СписокСертификатов)";
	
	Запрос.УстановитьПараметр("СписокСертификатов", Объект.СертификатыПодписейОрганизации.Выгрузить().ВыгрузитьКолонку("Сертификат"));
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	ТаблицаРезультата = Запрос.Выполнить().Выгрузить();
	
	Для Каждого Строка Из Объект.СертификатыПодписейОрганизации Цикл
		СтрокиРезультата = ТаблицаРезультата.НайтиСтроки(Новый Структура("Ссылка", Строка.Сертификат));
		Если СтрокиРезультата.Количество() = 1 Тогда
			Строка.Действует = СтрокиРезультата[0].Действует;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура КаталогОбмена(ПутьККаталогу)
	
	ДиалогКаталога = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогКаталога.Заголовок = НСтр("ru = 'Выберите сетевой каталог для обмена'");
	ДиалогКаталога.Каталог   = ПутьККаталогу;
	Если ДиалогКаталога.Выбрать() Тогда
		ПутьККаталогу = ДиалогКаталога.Каталог;
		ЭлектронныеДокументыСлужебныйКлиент.ПроверитьДоступностьКаталогаДляПрямогоОбмена(ПутьККаталогу);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораСертификатаЭП()
	
	Если Объект.ПометкаУдаления Тогда
		ТекстСообщения = НСтр("ru='Для выполнения действия необходимо снять пометку удаления.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	// Обработчик библиотеки ИПП
	Если ЭлектронныеДокументыСлужебныйКлиент.ПроверитьИспользованиеИнтернетПоддержкаПользователей() Тогда
		
		Если ПустаяСтрока(Объект.ИдентификаторОрганизации)
			И Объект.СертификатыПодписейОрганизации.Количество() > 0 Тогда
			// Эта операция запрещена. Так как в соглашении уже имеется хотя бы один
			// сертификат, но еще не получен идентификатор
			ТекстПредупреждения = НСтр("ru = 'Перед добавлением новых сертификатов в профиль настроек ЭДО
				|необходимо получить идентификатор участника обмена ЭДО'");
			Предупреждение(ТекстПредупреждения, 30);
			Возврат;
			
			// Иначе
			// Остались случаи, когда добавляется первый сертификат
			// и когда добавляемый сертификат нужно зарегистрировать в 1С-Такском
			// оба этих случая отрабатываются в обработчике события формы ОбработкаВыбора 
			
		КонецЕсли;
	КонецЕсли;
	// Конец обработчика библиотеки ИПП
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СписокИсключения", СписокСертификатовИсключения());
	ПараметрыФормы.Вставить("Организация", Объект.Организация);
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Истина);
	ОткрытьФорму("Справочник.СертификатыЭЦП.ФормаВыбора", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Функция СписокСертификатовИсключения()
	
	МассивИсключения = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	СертификатыЭЦП.Ссылка
		|ИЗ
		|	Справочник.СертификатыЭЦП КАК СертификатыЭЦП
		|ГДЕ
		|	СертификатыЭЦП.Организация = &Организация
		|	И (СертификатыЭЦП.ПометкаУдаления
		|			ИЛИ СертификатыЭЦП.Отозван)";
		
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Результат = Запрос.Выполнить().Выгрузить();
	
	Если Результат.Количество() > 0 Тогда
		МассивИсключения = Результат.ВыгрузитьКолонку("Ссылка");
	КонецЕсли;
	ТЗ = Объект.СертификатыПодписейОрганизации.Выгрузить(, "Сертификат");
	МассивСертификатов = ТЗ.ВыгрузитьКолонку("Сертификат");
	Для Каждого Элемент Из МассивСертификатов Цикл
		МассивИсключения.Добавить(Элемент);
	КонецЦикла;
	
	Возврат МассивИсключения;
	
КонецФункции

&НаСервере
Процедура УстановитьНастройкуУведомлений()
		
	Если УведомлятьОСобытиях Тогда
		ЗаголовокШаблон = НСтр("ru ='Email для уведомлений: %1'");
	Иначе
		ЗаголовокШаблон = НСтр("ru ='Уведомления не подключены'");
	КонецЕсли;

	Если ЗначениеЗаполнено(Объект.ЭлектроннаяПочтаДляУведомлений) Тогда
		АдресУведомлений = Объект.ЭлектроннаяПочтаДляУведомлений;
	ИначеЕсли УведомлятьОСобытиях Тогда
		АдресУведомлений = НСтр("ru = '<не указан>'");
	КонецЕсли;
	
	ЗаголовокПочты = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ЗаголовокШаблон, АдресУведомлений);
	
	Элементы.НастройкаУведомлений.Заголовок = ЗаголовокПочты;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////

// Методы работы с сервисом 1СЭДО

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗаданияДляЭД()
	
	Отказ = Ложь;
	
	Если ФормаДлительнойОперации.Открыта() Тогда
		МассивИдентификаторов = ОбменССерверомПолучитьОтветЭДО(УникальныйИдентификаторЗаявки1СЭДО, Отказ);
		Если ЗначениеЗаполнено(МассивИдентификаторов) Тогда
			Оповестить("ОповещениеОбУспешномИзмененииДанныхУчастникаОбменаЭД");
			ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
		Иначе
			Если Не Отказ Тогда
				ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
				ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗаданияДляЭД",
				ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОбменССерверомПолучитьОтветЭДО(ИдентификаторЗапросаНаРегистрацию, Отказ)
	
	МассивИдентификаторов = Новый Массив;
	
	ИмяФайлаОтвета = ЭлектронныеДокументыСлужебный.ПолучитьФайлОтветаОтСервераЭДО("GetInfo", ИдентификаторЗапросаНаРегистрацию, Отказ);
	Если ИмяФайлаОтвета <> Неопределено Тогда
		ДанныеФайла = ЭлектронныеДокументыСлужебный.ПрочитатьТекстИзФайла(ИмяФайлаОтвета, , Истина);
		ПолучитьИдентификаторАбонента(ДанныеФайла, МассивИдентификаторов);
	КонецЕсли;
	
	Возврат МассивИдентификаторов;

КонецФункции

&НаСервереБезКонтекста
Процедура ПолучитьИдентификаторАбонента(ДанныеФайла, МассивИдентификаторов)
	
	Если Не ПустаяСтрока(ДанныеФайла) Тогда
		
		ДеревоXML = ЭлектронныеДокументыСлужебный.ЗагрузитьСтрокуXMLВДеревоЗначений(ДанныеФайла);
		Если ДеревоXML <> Неопределено Тогда
			
			УзелАбоненты = ДеревоXML.Строки.Найти("Abonents", "Имя");
			
			Если УзелАбоненты <> Неопределено Тогда
				Для каждого УзелАбонент Из УзелАбоненты.Строки Цикл
					УзелИдентификаторАбонента = УзелАбонент.Строки.Найти("Identifier", "Имя");
					Если УзелИдентификаторАбонента <> Неопределено Тогда
						МассивИдентификаторов.Добавить(УзелИдентификаторАбонента.Значение);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Методы создания и отправки рег. пакета 1СЭДО

&НаКлиенте
Процедура ПодготовитьДанныеДляРегистрационногоПакета1СЭДОНаКлиенте(ТекущийПароль, ПараметрыАутентификации, ЕстьОшибки)
	
	Попытка
		МенеджерКриптографии = ЭлектроннаяЦифроваяПодписьКлиент.ПолучитьМенеджерКриптографии();
		МенеджерКриптографии.ПарольДоступаКЗакрытомуКлючу = ТекущийПароль;
	Исключение
		ТекстСообщения = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьСообщениеОбОшибке("100");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
		ЕстьОшибки = Истина;
		Возврат;
	КонецПопытки;
	
	// Подготовим пользовательский сертификат
	ПараметрыСертификата = ЭлектронныеДокументыСлужебныйВызовСервера.РеквизитыСертификата(ДобавляемыйСертификат);
	
	ДвоичныеДанныеОтпечатка = Base64Значение(ПараметрыСертификата.Отпечаток);
	ХранилищеСертификатов = МенеджерКриптографии.ПолучитьХранилищеСертификатов(ТипХранилищаСертификатовКриптографии.ПерсональныеСертификаты);
	Сертификат = ХранилищеСертификатов.НайтиПоОтпечатку(ДвоичныеДанныеОтпечатка);
	
	// Подготовим данные для оператора ЭДО
	РеквизитыПакета = Новый Структура;
	ДвоичныеДанныеДляОператораЭДО = Неопределено;
	ДвоичныеДанныеСоглашенияНаПодключениеЭДО = Неопределено;
	
	ПодготовитьДанныеПоРегистрационнойИнформации(РеквизитыПакета, ДвоичныеДанныеДляОператораЭДО, ДвоичныеДанныеСоглашенияНаПодключениеЭДО);
	Если Не ЗначениеЗаполнено(ДвоичныеДанныеДляОператораЭДО) ИЛИ Не ЗначениеЗаполнено(ДвоичныеДанныеСоглашенияНаПодключениеЭДО) Тогда
		
		ЕстьОшибки = Истина;
		Возврат;
	КонецЕсли;
	
	Попытка
		ПодписанныеДвоичныеДанныеДляОператораЭДО = МенеджерКриптографии.Подписать(ДвоичныеДанныеДляОператораЭДО, Сертификат);
		ПодписанныеДвоичныеДанныеСоглашенияНаПодключениеЭДО = МенеджерКриптографии.Подписать(ДвоичныеДанныеСоглашенияНаПодключениеЭДО, Сертификат);
	Исключение
		ШаблонРезультата = НСтр("ru = '%1
		|%2'");
		ТекстОшибки = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьСообщениеОбОшибке("104");
		РезультатТеста = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонРезультата, ТекстОшибки,
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатТеста);
		
		ЕстьОшибки = Истина;
		Возврат;
	КонецПопытки;
	
	// Подготовим сертификат оператора ЭДО для шифрования информации
	Если Не ЗначениеЗаполнено(ОператорЭДОСертификат) Тогда
		
		ТекстСообщения = НСтр("ru = 'Ошибка получения сертификата оператора ЭДО.
									|Нобходимо повторить операцию добавления сертификата.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		ЕстьОшибки = Истина;
		Возврат;
	КонецЕсли;

	ТекстСертификата = ОператорЭДОСертификат;
	Если Найти(ТекстСертификата, "-----BEGIN CERTIFICATE-----") > 0 Тогда
		ТекстСертификата = СтрЗаменить(ТекстСертификата, "-----BEGIN CERTIFICATE-----", "");
		ТекстСертификата = СтрЗаменить(ТекстСертификата, "-----END CERTIFICATE-----", "");
	КонецЕсли;
	ДвоичныеДанныеСертификатаОператораЭДО = Base64Значение(ТекстСертификата);
	
	Попытка
		СертификатОператораЭДО = Новый СертификатКриптографии(ДвоичныеДанныеСертификатаОператораЭДО);
		ЗашифрованныеДвоичныеДанныеОператораЭДО = МенеджерКриптографии.Зашифровать(ДвоичныеДанныеДляОператораЭДО, СертификатОператораЭДО);
	Исключение
		ШаблонРезультата = НСтр("ru = '%1
		|%2'");
		ТекстОшибки = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьСообщениеОбОшибке("103");
		РезультатТеста = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонРезультата, ТекстОшибки,
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатТеста);
		
		ЕстьОшибки = Истина;
		Возврат;
	КонецПопытки;
	
	СформироватьИОтправитьРегистрационныйПакет1СЭДО(РеквизитыПакета, ЗашифрованныеДвоичныеДанныеОператораЭДО, ПодписанныеДвоичныеДанныеДляОператораЭДО,
		ДвоичныеДанныеСоглашенияНаПодключениеЭДО, ПодписанныеДвоичныеДанныеСоглашенияНаПодключениеЭДО, ПараметрыАутентификации, ЕстьОшибки);
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьДанныеДляРегистрационногоПакета1СЭДОНаСервере(ТекущийПароль, ПараметрыАутентификации, ЕстьОшибки)
	
	Попытка
		МенеджерКриптографии = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьМенеджерКриптографии();
		МенеджерКриптографии.ПарольДоступаКЗакрытомуКлючу = ТекущийПароль;
	Исключение
		ТекстСообщения = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьСообщениеОбОшибке("100");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
		ЕстьОшибки = Истина;
		Возврат;
	КонецПопытки;
	
	// Подготовим пользовательский сертификат
	ПараметрыСертификата = ЭлектронныеДокументыСлужебныйВызовСервера.РеквизитыСертификата(ДобавляемыйСертификат);
	
	ДвоичныеДанныеОтпечатка = Base64Значение(ПараметрыСертификата.Отпечаток);
	ХранилищеСертификатов = МенеджерКриптографии.ПолучитьХранилищеСертификатов(ТипХранилищаСертификатовКриптографии.ПерсональныеСертификаты);
	Сертификат = ХранилищеСертификатов.НайтиПоОтпечатку(ДвоичныеДанныеОтпечатка);
	
	ДатаНачалаДействияСертификата = Сертификат.ДатаНачала;
	
	// Подготовим данные для оператора ЭДО
	РеквизитыПакета = Новый Структура;
	ДвоичныеДанныеДляОператораЭДО = Неопределено;
	ДвоичныеДанныеСоглашенияНаПодключениеЭДО = Неопределено;
	
	ПодготовитьДанныеПоРегистрационнойИнформации(РеквизитыПакета, ДвоичныеДанныеДляОператораЭДО, ДвоичныеДанныеСоглашенияНаПодключениеЭДО);
	Если Не ЗначениеЗаполнено(ДвоичныеДанныеДляОператораЭДО) ИЛИ Не ЗначениеЗаполнено(ДвоичныеДанныеСоглашенияНаПодключениеЭДО) Тогда
		
		ЕстьОшибки = Истина;
		Возврат;
	КонецЕсли;
	
	Попытка
		ПодписанныеДвоичныеДанныеДляОператораЭДО = МенеджерКриптографии.Подписать(ДвоичныеДанныеДляОператораЭДО, Сертификат);
		ПодписанныеДвоичныеДанныеСоглашенияНаПодключениеЭДО = МенеджерКриптографии.Подписать(ДвоичныеДанныеСоглашенияНаПодключениеЭДО, Сертификат);
	Исключение
		ШаблонРезультата = НСтр("ru = '%1
		|%2'");
		ТекстОшибки = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьСообщениеОбОшибке("104");
		РезультатТеста = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонРезультата, ТекстОшибки,
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатТеста);
		
		ЕстьОшибки = Истина;
		Возврат;
	КонецПопытки;
	
	// Подготовим сертификат оператора ЭДО для шифрования информации
	Если Не ЗначениеЗаполнено(ОператорЭДОСертификат) Тогда
		
		ТекстСообщения = НСтр("ru = 'Ошибка получения сертификата оператора ЭДО.
									|Нобходимо повторить операцию добавления сертификата.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		ЕстьОшибки = Истина;
		Возврат;
	КонецЕсли;

	ТекстСертификата = ОператорЭДОСертификат;
	Если Найти(ТекстСертификата, "-----BEGIN CERTIFICATE-----") > 0 Тогда
		ТекстСертификата = СтрЗаменить(ТекстСертификата, "-----BEGIN CERTIFICATE-----", "");
		ТекстСертификата = СтрЗаменить(ТекстСертификата, "-----END CERTIFICATE-----", "");
	КонецЕсли;
	ДвоичныеДанныеСертификатаОператораЭДО = Base64Значение(ТекстСертификата);
	
	Попытка
		СертификатОператораЭДО = Новый СертификатКриптографии(ДвоичныеДанныеСертификатаОператораЭДО);
		ЗашифрованныеДвоичныеДанныеОператораЭДО = МенеджерКриптографии.Зашифровать(ДвоичныеДанныеДляОператораЭДО, СертификатОператораЭДО);
	Исключение
		ШаблонРезультата = НСтр("ru = '%1
		|%2'");
		ТекстОшибки = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьСообщениеОбОшибке("103");
		РезультатТеста = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонРезультата, ТекстОшибки,
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатТеста);
		
		ЕстьОшибки = Истина;
		Возврат;
	КонецПопытки;
	
	СформироватьИОтправитьРегистрационныйПакет1СЭДО(РеквизитыПакета, ЗашифрованныеДвоичныеДанныеОператораЭДО, ПодписанныеДвоичныеДанныеДляОператораЭДО,
		ДвоичныеДанныеСоглашенияНаПодключениеЭДО, ПодписанныеДвоичныеДанныеСоглашенияНаПодключениеЭДО, ПараметрыАутентификации, ЕстьОшибки);
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьДанныеПоРегистрационнойИнформации(РеквизитыПакета, ДвоичныеДанныеДляОператораЭДО, ДвоичныеДанныеСоглашенияНаПодключениеЭДО)
	
	// Подготовим данные для 1СЭДО
	УникальныйИдентификаторЗаявки1СЭДО = ЭлектронныеДокументыСлужебный.СгенерироватьUUID();
	
	ИмяРеквизитаИННОрганизации = ЭлектронныеДокументыПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("ИННОрганизации");
	ИмяРеквизитаКППОрганизации = ЭлектронныеДокументыПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("КППОрганизации");
	ИмяРеквизитаОГРНОрганизации = ЭлектронныеДокументыПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("ОГРНОрганизации");
	ИмяРеквизитаНаименованиеОрганизации = ЭлектронныеДокументыПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("НаименованиеОрганизации");
	
	ПараметрыОрганиазции = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Организация,
		ИмяРеквизитаИННОрганизации + ", " + ИмяРеквизитаКППОрганизации + ", " + ИмяРеквизитаНаименованиеОрганизации + ", "
		+ ИмяРеквизитаОГРНОрганизации);
	
	// Подготовим данные для оператора ЭДО
	ДеревоРегистрационнойИнформации = ОбщегоНазначенияЭД.ДеревоДокумента("РегистрационнаяИнформация");
	
	// Служебные данные
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "ИдФайл",   "registration_" + УникальныйИдентификаторЗаявки1СЭДО);
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "ВерсПрог", "1С:Предприятие 8");
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "ВерсФорм", "5.02");
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "КНД",      "1115109");
	
	// Данные по налоговому органу
	Если Не ЗначениеЗаполнено(Объект.КодНалоговогоОргана) И ЗначениеЗаполнено(ПараметрыОрганиазции[ИмяРеквизитаКППОрганизации]) Тогда
		Объект.КодНалоговогоОргана = Лев(ПараметрыОрганиазции[ИмяРеквизитаКППОрганизации], 4);
	КонецЕсли;
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "КодНО", Объект.КодНалоговогоОргана);
	
	// Данные по оператору ЭДО
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "ОперЭДО.НаимОрг",   Объект.ОператорЭДО);
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "ОперЭДО.ИдОперЭДО", Объект.ОператорЭДОИд);
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "ОперЭДО.ИННЮЛ",     Объект.ОператорЭДОИНН);
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "ОперЭДО.КПП",       Объект.ОператорЭДОКПП);
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "ОперЭДО.ОГРН",      Объект.ОператорЭДООГРН);
	
	// Данные по абоненту
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "УчастЭДО.ТипЗаявления", "2");
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "УчастЭДО.ИдУчастЭДО", Объект.ИдентификаторОрганизации);
	
	СертификатыПользователя = Новый ТаблицаЗначений;
	СертификатыПользователя.Колонки.Добавить("ДатаНачСертиф");
	СертификатыПользователя.Колонки.Добавить("ДатаКонСертиф");
	СертификатыПользователя.Колонки.Добавить("ОтпСертиф");
	СертификатыПользователя.Колонки.Добавить("Сертификат");
	СертификатыПользователя.Колонки.Добавить("Фамилия");
	СертификатыПользователя.Колонки.Добавить("Имя");
	СертификатыПользователя.Колонки.Добавить("Отчество");
	
	ДатаСеанса = ТекущаяДатаСеанса();
	
	// Добавим текущие сертификаты
	МассивСертификатов = Новый Массив;
	Для каждого СтрокаТаблицы Из Объект.СертификатыПодписейОрганизации Цикл
		ПараметрыСертификата = ЭлектронныеДокументыСлужебныйВызовСервера.РеквизитыСертификата(СтрокаТаблицы.Сертификат);
		
		Если ДатаСеанса > НачалоДня(ПараметрыСертификата.ДатаОкончания) Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = СертификатыПользователя.Добавить();
		НоваяСтрока.ДатаКонСертиф = ПараметрыСертификата.ДатаОкончания;
		
		Отпечаток = НРег(СТРЗаменить(Строка(Base64Значение(ПараметрыСертификата.Отпечаток))," ",""));
		НоваяСтрока.ОтпСертиф = Отпечаток;
		//МассивОтпечатков.Добавить(Отпечаток);
		
		// Подготовим пользовательский сертификат
		ДвоичныеДанныеСертификата = ПараметрыСертификата.ДвоичныеДанныеСертификата;
		
		СертификатТекст = Base64Строка(ДвоичныеДанныеСертификата);
		НоваяСтрока.Сертификат = "-----BEGIN CERTIFICATE-----" + символы.пс
								+ СертификатТекст + символы.пс
								+ "-----END CERTIFICATE-----";
		
		НоваяСтрока.Фамилия  = СтроковыеФункцииКлиентСервер.ЗаменитьОдниСимволыДругими("_", ПараметрыСертификата.Фамилия, " ");
		НоваяСтрока.Имя      = СтроковыеФункцииКлиентСервер.ЗаменитьОдниСимволыДругими("_", ПараметрыСертификата.Имя, " ");
		НоваяСтрока.Отчество = СтроковыеФункцииКлиентСервер.ЗаменитьОдниСимволыДругими("_", ПараметрыСертификата.Отчество, " ");
		
		Сертификат = Новый СертификатКриптографии(ДвоичныеДанныеСертификата);
		НоваяСтрока.ДатаНачСертиф = Сертификат.ДатаНачала;
		
		Если МассивСертификатов.Найти(СертификатТекст) = Неопределено Тогда
			МассивСертификатов.Добавить(СертификатТекст);
		КонецЕсли;
		
	КонецЦикла;
	
	// Добавим новый сертификат
	ПараметрыСертификата = ЭлектронныеДокументыСлужебныйВызовСервера.РеквизитыСертификата(ДобавляемыйСертификат);
	
	НоваяСтрока = СертификатыПользователя.Добавить();
	НоваяСтрока.ДатаКонСертиф = ПараметрыСертификата.ДатаОкончания;
	
	Отпечаток = НРег(СТРЗаменить(Строка(Base64Значение(ПараметрыСертификата.Отпечаток))," ",""));
	НоваяСтрока.ОтпСертиф = Отпечаток;
	
	// Подготовим пользовательский сертификат
	ДвоичныеДанныеСертификата = ПараметрыСертификата.ДвоичныеДанныеСертификата;
	
	СертификатТекст = Base64Строка(ДвоичныеДанныеСертификата);
	НоваяСтрока.Сертификат = "-----BEGIN CERTIFICATE-----" + символы.пс
							+ СертификатТекст + символы.пс
							+ "-----END CERTIFICATE-----";
	
	Если МассивСертификатов.Найти(СертификатТекст) = Неопределено Тогда
		МассивСертификатов.Добавить(СертификатТекст);
	КонецЕсли;

	
	НоваяСтрока.Фамилия  = СтроковыеФункцииКлиентСервер.ЗаменитьОдниСимволыДругими("_", ПараметрыСертификата.Фамилия, " ");
	НоваяСтрока.Имя      = СтроковыеФункцииКлиентСервер.ЗаменитьОдниСимволыДругими("_", ПараметрыСертификата.Имя, " ");
	НоваяСтрока.Отчество = СтроковыеФункцииКлиентСервер.ЗаменитьОдниСимволыДругими("_", ПараметрыСертификата.Отчество, " ");

	Сертификат = Новый СертификатКриптографии(ДвоичныеДанныеСертификата);
	НоваяСтрока.ДатаНачСертиф = Сертификат.ДатаНачала;
	
	ОбщегоНазначенияЭД.ЗагрузитьТаблицуВДерево(ДеревоРегистрационнойИнформации, СертификатыПользователя, "УчастЭДО.СертифДолжн");

	Если Не ЭлектронныеДокументыПереопределяемый.ЭтоФизЛицо(Объект.Организация) Тогда
		
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "УчастЭДО.ТипУчастника.ЮЛ.НаимОрг", ПараметрыОрганиазции[ИмяРеквизитаНаименованиеОрганизации]);
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "УчастЭДО.ТипУчастника.ЮЛ.ИННЮЛ",   ПараметрыОрганиазции[ИмяРеквизитаИННОрганизации]);
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "УчастЭДО.ТипУчастника.ЮЛ.КПП",     ПараметрыОрганиазции[ИмяРеквизитаКППОрганизации]);
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "УчастЭДО.ТипУчастника.ЮЛ.ОГРН",    ПараметрыОрганиазции[ИмяРеквизитаОГРНОрганизации]);
		
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "УчастЭДО.ТипУчастника.ЮЛ.ДатаПодклЭДО", ТекущаяДатаСеанса());
		
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "УчастЭДО.ТипУчастника.ЮЛ.АдрРФ.Индекс",     Объект.Индекс);
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "УчастЭДО.ТипУчастника.ЮЛ.АдрРФ.КодРегион",  Объект.КодРегиона);
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "УчастЭДО.ТипУчастника.ЮЛ.АдрРФ.Район",      Объект.Район);
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "УчастЭДО.ТипУчастника.ЮЛ.АдрРФ.Город",      Объект.Город);
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "УчастЭДО.ТипУчастника.ЮЛ.АдрРФ.НаселПункт", Объект.НаселенныйПункт);
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "УчастЭДО.ТипУчастника.ЮЛ.АдрРФ.Улица",      Объект.Улица);
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "УчастЭДО.ТипУчастника.ЮЛ.АдрРФ.Дом",        Объект.Дом);
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "УчастЭДО.ТипУчастника.ЮЛ.АдрРФ.Корпус",     Объект.Корпус);
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "УчастЭДО.ТипУчастника.ЮЛ.АдрРФ.Кварт",      Объект.Квартира);
		
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "УчастЭДО.ТипУчастника.ЮЛ.ФИООтв.Фамилия",  ПараметрыСертификата.Фамилия);
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "УчастЭДО.ТипУчастника.ЮЛ.ФИООтв.Имя",      ПараметрыСертификата.Имя);
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "УчастЭДО.ТипУчастника.ЮЛ.ФИООтв.Отчество", ПараметрыСертификата.Отчество);
	Иначе
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "УчастЭДО.ТипУчастника.ИП.ИННФЛ",  ПараметрыОрганиазции[ИмяРеквизитаИННОрганизации]);
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "УчастЭДО.ТипУчастника.ИП.ОГРНИП", ПараметрыОрганиазции[ИмяРеквизитаОГРНОрганизации]);
		
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "УчастЭДО.ТипУчастника.ИП.ДатаПодклЭДО", ТекущаяДатаСеанса());
		
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "УчастЭДО.ТипУчастника.ИП.АдрРФ.Индекс",     Объект.Индекс);
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "УчастЭДО.ТипУчастника.ИП.АдрРФ.КодРегион",  Объект.КодРегиона);
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "УчастЭДО.ТипУчастника.ИП.АдрРФ.Район",      Объект.Район);
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "УчастЭДО.ТипУчастника.ИП.АдрРФ.Город",      Объект.Город);
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "УчастЭДО.ТипУчастника.ИП.АдрРФ.НаселПункт", Объект.НаселенныйПункт);
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "УчастЭДО.ТипУчастника.ИП.АдрРФ.Улица",      Объект.Улица);
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "УчастЭДО.ТипУчастника.ИП.АдрРФ.Дом",        Объект.Дом);
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "УчастЭДО.ТипУчастника.ИП.АдрРФ.Корпус",     Объект.Корпус);
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "УчастЭДО.ТипУчастника.ИП.АдрРФ.Кварт",      Объект.Квартира);
		
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "УчастЭДО.ТипУчастника.ИП.ФИО.Фамилия",  ПараметрыСертификата.Фамилия);
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "УчастЭДО.ТипУчастника.ИП.ФИО.Имя",      ПараметрыСертификата.Имя);
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "УчастЭДО.ТипУчастника.ИП.ФИО.Отчество", ПараметрыСертификата.Отчество);
	КонецЕсли;
	
	РеквизитыПакета.Вставить("УникальныйИдентификаторЗаявки1СЭДО", УникальныйИдентификаторЗаявки1СЭДО);
	РеквизитыПакета.Вставить("НаименованиеОрганизации", ПараметрыОрганиазции[ИмяРеквизитаНаименованиеОрганизации]);
	РеквизитыПакета.Вставить("ИННОрганизации",   ПараметрыОрганиазции[ИмяРеквизитаИННОрганизации]);
	РеквизитыПакета.Вставить("КППОрганизации",   ПараметрыОрганиазции[ИмяРеквизитаКППОрганизации]);
	РеквизитыПакета.Вставить("ОГРНОрганизации",  ПараметрыОрганиазции[ИмяРеквизитаОГРНОрганизации]);
	РеквизитыПакета.Вставить("ИдентификаторОрганизации", Объект.ИдентификаторОрганизации);
	РеквизитыПакета.Вставить("ОператорЭДО",      Объект.ОператорЭДО);
	РеквизитыПакета.Вставить("ОператорЭДОИд",    Объект.ОператорЭДОИд);
	РеквизитыПакета.Вставить("Сертификат",       МассивСертификатов);
	РеквизитыПакета.Вставить("ЭлектроннаяПочта", Объект.ЭлектроннаяПочтаДляУведомлений);
	РеквизитыПакета.Вставить("Фамилия",          ПараметрыСертификата.Фамилия);
	РеквизитыПакета.Вставить("Имя",              ПараметрыСертификата.Имя);
	РеквизитыПакета.Вставить("Отчество",         ПараметрыСертификата.Отчество);
	
	//Данные по подписанту
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "Подписант.Должность",    ПараметрыСертификата.ДолжностьПоСертификату);
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "Подписант.ФИО.Фамилия",  ПараметрыСертификата.Фамилия);
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "Подписант.ФИО.Имя",      ПараметрыСертификата.Имя);
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "Подписант.ФИО.Отчество", ПараметрыСертификата.Отчество);
	
	ДвоичныеДанныеДляОператораЭДО = ЭлектронныеДокументыВнутренний.РегистрационныеДанныеДляОператораЭДО(ДеревоРегистрационнойИнформации);
	
	// Подготовим данные для соглашения с оператором ЭДО
	ИмяВременногоФайлаСоглашениеЭДО = ЭлектронныеДокументыСлужебный.ТекущееИмяВременногоФайла("xml");
	
	// LicenseCard
	СоглашениеЭДО = Новый ЗаписьXML;
	СоглашениеЭДО.ОткрытьФайл(ИмяВременногоФайлаСоглашениеЭДО, "windows-1251");
	СоглашениеЭДО.ЗаписатьОбъявлениеXML();
	
	СоглашениеЭДО.ЗаписатьНачалоЭлемента("LicenseCard");
		СоглашениеЭДО.ЗаписатьНачалоЭлемента("info");
			СоглашениеЭДО.ЗаписатьАтрибут("EDOAgreed", XMLСтрока(Истина));
		СоглашениеЭДО.ЗаписатьКонецЭлемента(); // info
	СоглашениеЭДО.ЗаписатьКонецЭлемента(); // LicenseCard
	
	СоглашениеЭДО.Закрыть();
	
	ДвоичныеДанныеСоглашенияНаПодключениеЭДО = Новый ДвоичныеДанные(ИмяВременногоФайлаСоглашениеЭДО);
	УдалитьФайлы(ИмяВременногоФайлаСоглашениеЭДО);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьИОтправитьРегистрационныйПакет1СЭДО(РеквизитыПакета, ЗашифрованныеДвоичныеДанныеОператораЭДО, ПодписанныеДвоичныеДанныеДляОператораЭДО,
		ДвоичныеДанныеСоглашенияНаПодключениеЭДО, ПодписанныеДвоичныеДанныеСоглашенияНаПодключениеЭДО, ПараметрыАутентификации, ЕстьОшибки)
	
	ИмяФайлаПакетаДля1СЭДО = ЭлектронныеДокументыСлужебный.РегистрационныйПакетДляОператораЭДО(РеквизитыПакета,
		ЗашифрованныеДвоичныеДанныеОператораЭДО, ПодписанныеДвоичныеДанныеДляОператораЭДО,
		ДвоичныеДанныеСоглашенияНаПодключениеЭДО, ПодписанныеДвоичныеДанныеСоглашенияНаПодключениеЭДО);
	
	ЭлектронныеДокументыСлужебный.ОтправитьРегистрационныйПакет1СЭДО(ИмяФайлаПакетаДля1СЭДО, ПараметрыАутентификации, ЕстьОшибки);
	
КонецПроцедуры

// Открывает форму выбора адреса в модальном режиме и возвращает
// реквизиты адреса в виде структуры с соответствующими полями
//
// Параметры:
// - ТолькоДляПросмотра (Булево): Истина - открыть форму выбора адреса только для просмотра
//
// Возвращаемое значение: Структура с полями - реквизитыми адреса;
//						  Неопределено, если на форме адреса при закрытии не была нажата кнопка "ОК"
// 
&НаКлиенте
Процедура ВыбратьАдрес(ТолькоДляПросмотра = Ложь)
	
	ПараметрыФормы = Новый Структура("ТолькоПросмотр", ТолькоДляПросмотра);
	
	ПараметрыФормы.Вставить("Индекс"             , Объект.Индекс);
	ПараметрыФормы.Вставить("Регион"             , Объект.Регион);
	ПараметрыФормы.Вставить("Район"              , Объект.Район);
	ПараметрыФормы.Вставить("Город"              , Объект.Город);
	ПараметрыФормы.Вставить("НасПункт"           , Объект.НаселенныйПункт);
	ПараметрыФормы.Вставить("Улица"              , Объект.Улица);
	ПараметрыФормы.Вставить("Дом"                , Объект.Дом);
	ПараметрыФормы.Вставить("Корпус"             , Объект.Корпус);
	ПараметрыФормы.Вставить("Квартира"           , Объект.Квартира);
	ПараметрыФормы.Вставить("КодРегиона"         , Объект.КодРегиона);
	ПараметрыФормы.Вставить("КодНалоговогоОргана", Объект.КодНалоговогоОргана);
	
	ПараметрыАдреса = ОткрытьФормуМодально("ОбщаяФорма.АдресУчастникаОбменаЭД", ПараметрыФормы);

	Если ТипЗнч(ПараметрыАдреса) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	// Если адрес изменен, то применение изменений
	Объект.Индекс              = ПараметрыАдреса.Индекс;
	Объект.Регион              = ПараметрыАдреса.Регион;
	Объект.Район               = ПараметрыАдреса.Район;
	Объект.Город               = ПараметрыАдреса.Город;
	Объект.НаселенныйПункт     = ПараметрыАдреса.НаселенныйПункт;
	Объект.Улица               = ПараметрыАдреса.Улица;
	Объект.Дом                 = ПараметрыАдреса.Дом;
	Объект.Корпус              = ПараметрыАдреса.Корпус;
	Объект.Квартира            = ПараметрыАдреса.Квартира;
	Объект.КодРегиона          = ПараметрыАдреса.КодРегиона;
	Объект.КодНалоговогоОргана = ПараметрыАдреса.КодНалоговогоОргана;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьАктуальныеДанныеОператораЭДО()
	
	ИмяФайлаОтвета = ЭлектронныеДокументыСлужебный.ПолучитьФайлОтветаОтСервераЭДО("GetOperators");
	Если ИмяФайлаОтвета <> Неопределено Тогда
		ДанныеФайла = ЭлектронныеДокументыСлужебный.ПрочитатьТекстИзФайла(ИмяФайлаОтвета, , Истина);
		
		ДеревоXML = ЭлектронныеДокументыСлужебный.ЗагрузитьСтрокуXMLВДеревоЗначений(ДанныеФайла);
		Если ДеревоXML <> Неопределено Тогда
			
			УзелОператорыЭДО = ДеревоXML.Строки.Найти("Operators", "Имя");
			Если УзелОператорыЭДО <> Неопределено Тогда
				Для Каждого УзелОператорЭДО Из УзелОператорыЭДО.Строки Цикл
					
					УзелОператорЭДОИд = УзелОператорЭДО.Строки.Найти("ИдОперЭДО", "Имя");
					Если ВРег(УзелОператорЭДОИд.Значение) = ВРег(Лев(Объект.ИдентификаторОрганизации, 3)) Тогда
						
						УзелОператорЭДОНаимОрг = УзелОператорЭДО.Строки.Найти("НаимОрг", "Имя");
						Объект.ОператорЭДО = УзелОператорЭДОНаимОрг.Значение;
						
						УзелОператорЭДОИд = УзелОператорЭДО.Строки.Найти("ИдОперЭДО", "Имя");
						Объект.ОператорЭДОИд = УзелОператорЭДОИд.Значение;
						
						УзелОператорЭДОИНН = УзелОператорЭДО.Строки.Найти("ИННЮЛ", "Имя");
						Объект.ОператорЭДОИНН = УзелОператорЭДОИНН.Значение;
						
						УзелОператорЭДОКПП = УзелОператорЭДО.Строки.Найти("КПП", "Имя");
						Объект.ОператорЭДОКПП = УзелОператорЭДОКПП.Значение;
						
						УзелОператорЭДООГРН = УзелОператорЭДО.Строки.Найти("ОГРН", "Имя");
						Если УзелОператорЭДООГРН <> Неопределено Тогда
							Объект.ОператорЭДООГРН = УзелОператорЭДООГРН.Значение;
						КонецЕсли;
						
						УзелОператорЭДОСертификат = УзелОператорЭДО.Строки.Найти("Сертификат", "Имя");
						Если УзелОператорЭДОСертификат <> Неопределено Тогда
							ОператорЭДОСертификат = УзелОператорЭДОСертификат.Значение;
						КонецЕсли;
						
						Прервать;
					КонецЕсли;
					
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Функция ИстекСрокДействияСертификата(Сертификат)
	
	СрокДейстияЗакончился = Ложь;
	
	РеквизитыСертификата = ЭлектронныеДокументыСлужебныйВызовСервера.РеквизитыСертификата(Сертификат);
	РазностьДат = РеквизитыСертификата.ДатаОкончания - ОбщегоНазначенияКлиент.ДатаСеанса();
	
	Если НЕ РеквизитыСертификата.ОповещенОСрокеДействия И РазностьДат > 0 И РазностьДат < 60*60*24*31 Тогда
		
		Операция = НСтр("ru = 'Проверка срока действия сертификата'");
		ТекстОшибки = НСтр("ru = 'Заканчивается срок действия сертификата'")+ " " + Сертификат
					+ Символы.ПС + НСтр("ru = 'Необходимо получить новый'");
					
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(Операция, ТекстОшибки, ТекстОшибки);

	ИначеЕсли РазностьДат <= 0 Тогда
		
		Операция = НСтр("ru = 'Проверка срока действия сертификата'");
		ТекстОшибки = НСтр("ru = 'Закончился срок действия сертификата'")+ " " + Сертификат
					+ Символы.ПС + НСтр("ru = 'Необходимо получить новый'");
		
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(Операция, ТекстОшибки, ТекстОшибки);
		
		СрокДейстияЗакончился = Истина;
		
	КонецЕсли;
	
	Возврат СрокДейстияЗакончился;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста 
Процедура ЗаполнитьПредставлениеНастроек(Объект)
	
	Для Каждого ТекСтрока Из Объект.ИсходящиеДокументы Цикл
		
		ЗаполнитьПредставлениеРегламентаЭДО(ТекСтрока);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста 
Процедура ЗаполнитьПредставлениеРегламентаЭДО(ТекСтрока)

	ИспользоватьЭЦП = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьЗначениеФункциональнойОпции(
			"ИспользоватьЭлектронныеЦифровыеПодписи");
	
	Если ТекСтрока.ИспользоватьЭЦП И ИспользоватьЭЦП Тогда
		Подпись = НСтр("ru = 'Подпись'");
	Иначе
		Подпись = НСтр("ru = 'Без подписи'");
	КонецЕсли;
	
	ИзвещениеОПолучении = "";
	Если ТекСтрока.ТребуетсяИзвещениеОПолучении Тогда
		ИзвещениеОПолучении = НСтр("ru = 'извещение о получении'");
	КонецЕсли;
	
	ОтветнаяПодпись = "";
	Если ТекСтрока.ТребуетсяОтветнаяПодпись И ИспользоватьЭЦП Тогда
		ОтветнаяПодпись = НСтр("ru = 'ответная подпись'");
	КонецЕсли;
	
	ШаблонТекста = "%1%2%3";
	ИзвещениеОПолучении = ?(Не ИзвещениеОПолучении = "",","+ " " + ИзвещениеОПолучении, "");
	ОтветнаяПодпись = ?(Не ОтветнаяПодпись = "",","+ " " + ОтветнаяПодпись, "");
	
	РегламентЭДО = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонТекста,
		Подпись, ИзвещениеОПолучении, ОтветнаяПодпись);
	
	ТекСтрока.РегламентЭДО = РегламентЭДО;

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьНастройкуРегламентаЭДО()
	  
	Элемент = Элементы.ИсходящиеДокументы;
	ДанныеСтроки = Элемент.ТекущиеДанные;
	
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ДанныеСтроки.Формировать Тогда
		Возврат;
	КонецЕсли;
	
	СвойстваФормы = ЭлектронныеДокументыСлужебныйКлиент.СвойстваДокументооборотаЭД();
	ЗаполнитьЗначенияСвойств(СвойстваФормы, ДанныеСтроки);
	СвойстваФормы.Вставить("ИспользоватьУПД", Объект.ИспользоватьУПД);
	
	НастройкиРегламентаЭДО = ЭлектронныеДокументыСлужебныйКлиент.НастройкиРегламентаЭДО(ДанныеСтроки.ИсходящийДокумент, ДанныеСтроки.ВерсияФормата, Объект.СпособОбменаЭД);
	СвойстваФормы.Вставить("НастройкиРегламентаЭДО", НастройкиРегламентаЭДО);
	
	ОтрытиеОкна = ВариантОткрытияОкна.ОтдельноеОкно;
	
	НастройкаРегламента = ОткрытьФормуМодально("Справочник.ПрофилиНастроекЭДО.Форма.НастройкаРегламентаЭДО"
		,СвойстваФормы
		,Элемент);
	
	Если НастройкаРегламента = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ДанныеСтроки, НастройкаРегламента);
	
	ЗаполнитьПредставлениеРегламентаЭДО(ДанныеСтроки);
	
	Модифицированность = Макс(Модифицированность, НастройкаРегламента.Модифицированность); 

КонецПроцедуры

&НаСервере
Процедура ИзменитьРегламентЭДО(Идентификатор)
	
	// Установка флагов "Подписывать, Извещения, Ответная подпись"
	// и обновление заголовка гиперссылки.
	
	СтрокаДляРедактирования = Объект.ИсходящиеДокументы.НайтиПоИдентификатору(Идентификатор);
	Если СтрокаДляРедактирования.ИсходящийДокумент = Перечисления.ВидыЭД.АктИсполнитель Тогда
	
		Если ВРег(СтрокаДляРедактирования.ВерсияФормата) = ВРег(НСтр("ru = 'ФНС 5.01 (С 2016Г.)'"))
			Или ВРег(СтрокаДляРедактирования.ВерсияФормата) = ВРег(НСтр("ru = 'ФНС 5.01 (УПД:Первичный документ)'"))
			ИЛИ ВРег(СтрокаДляРедактирования.ВерсияФормата) = ВРег(НСтр("ru = 'ФНС 2019 (УПД:Первичный документ)'")) Тогда
			Возврат;
		КонецЕсли;
		
		СтрокаДляРедактирования.ТребуетсяОтветнаяПодпись = Истина;
		СтрокаДляРедактирования.ТребуетсяИзвещениеОПолучении = Истина;
		
		ЗаполнитьПредставлениеРегламентаЭДО(СтрокаДляРедактирования);
		
	ИначеЕсли СтрокаДляРедактирования.ИсходящийДокумент = Перечисления.ВидыЭД.АктНаПередачуПрав Тогда
	
		Если ВРег(СтрокаДляРедактирования.ВерсияФормата) = ВРег(НСтр("ru = 'ФНС 5.01 (С 2016Г.)'")) Тогда
			Возврат;
		КонецЕсли;
		
		СтрокаДляРедактирования.ТребуетсяОтветнаяПодпись = Истина;
		СтрокаДляРедактирования.ТребуетсяИзвещениеОПолучении = Истина;
		
		ЗаполнитьПредставлениеРегламентаЭДО(СтрокаДляРедактирования);

		
	ИначеЕсли СтрокаДляРедактирования.ИсходящийДокумент = Перечисления.ВидыЭД.СчетФактура Тогда
		
		Если Не (ВРег(СтрокаДляРедактирования.ВерсияФормата) = ВРег(НСтр("ru = 'ФНС 5.01 (УПД:Счет-фактура и первичный документ)'"))
			ИЛИ ВРег(СтрокаДляРедактирования.ВерсияФормата) = ВРег(НСтр("ru = 'ФНС 2019 (УПД:Счет-фактура и первичный документ)'"))) Тогда
			СтрокаДляРедактирования.ТребуетсяОтветнаяПодпись = Ложь;
			ЗаполнитьПредставлениеРегламентаЭДО(СтрокаДляРедактирования);
		КонецЕсли;
		
	ИначеЕсли СтрокаДляРедактирования.ИсходящийДокумент = Перечисления.ВидыЭД.КорректировочныйСчетФактура Тогда
		
		Если Не ВРег(СтрокаДляРедактирования.ВерсияФормата) = ВРег(НСтр("ru = 'ФНС 5.01 (УКД:Корректировочный счет-фактура и первичный документ)'")) Тогда
			СтрокаДляРедактирования.ТребуетсяОтветнаяПодпись = Ложь;
			ЗаполнитьПредставлениеРегламентаЭДО(СтрокаДляРедактирования);
		КонецЕсли;
		
	ИначеЕсли СтрокаДляРедактирования.ИсходящийДокумент = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель Тогда
		
		Если Не ВРег(СтрокаДляРедактирования.ВерсияФормата) = ВРег(НСтр("ru = 'ФНС 5.01 (УКД:Первичный документ)'")) Тогда
			СтрокаДляРедактирования.ТребуетсяОтветнаяПодпись = Истина;
			ЗаполнитьПредставлениеРегламентаЭДО(СтрокаДляРедактирования);
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьФлагУПДУКД()
	
	Для каждого Строка Из Объект.ИсходящиеДокументы Цикл
		
		Если Строка.ИсходящийДокумент = Перечисления.ВидыЭД.АктИсполнитель Тогда
			Строка.Формировать = Не Объект.ИспользоватьУПД;
		КонецЕсли;
		
		Если Строка.ИсходящийДокумент = Перечисления.ВидыЭД.ТОРГ12Продавец Тогда
			Строка.Формировать = Не Объект.ИспользоватьУПД;
		КонецЕсли;
		
		Если Строка.ИсходящийДокумент = Перечисления.ВидыЭД.АктНаПередачуПрав Тогда
			Строка.Формировать = Не Объект.ИспользоватьУПД;
		КонецЕсли;
		
		Если Строка.ИсходящийДокумент = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель Тогда
			Строка.Формировать = Не Объект.ИспользоватьУКД;
		КонецЕсли;
		
		Если Строка.ИсходящийДокумент = Перечисления.ВидыЭД.СчетФактура Тогда
			
			ВерсияФормата = Строка.ВерсияФормата;
			Если Объект.ИспользоватьУПД Тогда
				Если Строка.ВерсияФормата <> "ФНС 2019 (УПД:Счет-фактура и первичный документ)" Тогда
					ВерсияФормата = "ФНС 5.01 (УПД:Счет-фактура и первичный документ)";
				КонецЕсли;
				Строка.ТребуетсяОтветнаяПодпись = Истина;
			Иначе
				ВерсияФормата = ЭлектронныеДокументыСлужебный.АктуальнаяВерсияФорматаЭД(Строка.ИсходящийДокумент);
				Строка.ТребуетсяОтветнаяПодпись = Ложь;
			КонецЕсли;
			Строка.ВерсияФормата = ВерсияФормата;
			ЗаполнитьПредставлениеРегламентаЭДО(Строка);
		КонецЕсли;
		
		Если Строка.ИсходящийДокумент = Перечисления.ВидыЭД.КорректировочныйСчетФактура Тогда
			
			Если Объект.ИспользоватьУКД Тогда
				ВерсияФормата = "ФНС 5.01 (УКД:Корректировочный счет-фактура и первичный документ)";
				Строка.ТребуетсяОтветнаяПодпись = Истина;
			Иначе
				ВерсияФормата = ЭлектронныеДокументыСлужебный.АктуальнаяВерсияФорматаЭД(Строка.ИсходящийДокумент);
				Строка.ТребуетсяОтветнаяПодпись = Ложь;
			КонецЕсли;
			Строка.ВерсияФормата = ВерсияФормата;
			
			ЗаполнитьПредставлениеРегламентаЭДО(Строка);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры
