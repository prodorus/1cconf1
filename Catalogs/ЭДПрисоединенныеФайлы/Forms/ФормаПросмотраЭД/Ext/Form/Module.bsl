////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Параметры.Ключ.Пустая() Тогда
		ОбъектСправочника = Параметры.Ключ.ПолучитьОбъект();
		ЗначениеВРеквизитФормы(ОбъектСправочника, "Объект");
	КонецЕсли;
	
	Если Параметры.Свойство("СсылкаНаМассивСертификатов") Тогда
		СсылкаНаМассивСертификатов = Параметры.СсылкаНаМассивСертификатов;
	КонецЕсли;
	
	СпособОбменаЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.СоглашениеЭД, "СпособОбменаЭД");
	
	ИнициализацияДанныхНаСервере(Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ЭтаФорма.КлючУникальности = Объект.Ссылка;
	
	Если НЕ Отказ И ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Если ЭтоАдресВременногоХранилища(АдресФайлаВХранилище) Тогда
			#Если ВебКлиент Тогда
				ПутьКФайлуПросмотра = АдресФайлаВХранилище;
			#Иначе
				ПутьКФайлуПросмотра = ПолучитьИмяВременногоФайла(РасширениеФайла);
				ДДФайла = ПолучитьИзВременногоХранилища(АдресФайлаВХранилище);
				ДДФайла.Записать(ПутьКФайлуПросмотра);
			#КонецЕсли
			Если Найти("HTML PDF DOCX XLSX", ВРег(РасширениеФайла)) > 0 Тогда
				Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.СтраницаДругойФормат;
				Элементы.СтраницаТабличныйДокумент.Видимость = Ложь;
			Иначе
				#Если НЕ ВебКлиент Тогда
					ЗапуститьПриложение(ПутьКФайлуПросмотра);
				#КонецЕсли
				Отказ = Истина;
				Возврат;
			КонецЕсли;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(СсылкаНаМассивСертификатов) Тогда
			УстановитьВидимостьДоступностьНаКлиенте();
		КонецЕсли;
	Иначе
		Отказ = Истина;
	КонецЕсли;
	
	Если Объект.ВидЭД = ПредопределенноеЗначение("Перечисление.ВидыЭД.ДопДанные") Тогда
		СохранитьЭДНаДиск(Неопределено);
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновитьСостояниеЭД" Тогда
		Если Не ЗначениеЗаполнено(СсылкаНаМассивСертификатов) Тогда
			Попытка
				Если ЭлектронныеДокументыСлужебныйВызовСервера.ВыполнятьКриптооперацииНаСервере() Тогда
					МассивСтруктурСертификатов = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьМассивСтруктурСертификатов(Истина);
				Иначе
					МассивСтруктурСертификатов = ЭлектроннаяЦифроваяПодписьКлиент.ПолучитьМассивСтруктурСертификатов(Истина);
				КонецЕсли;
				СсылкаНаМассивСертификатов = ПоместитьВоВременноеХранилище(МассивСтруктурСертификатов, УникальныйИдентификатор);
			Исключение
			КонецПопытки;
		КонецЕсли;
		ВыполнитьОбработкуОповещенияНаСервере();
		ОбновитьОтображениеДанных();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Если Не Настройки.Получить("ОтключитьВыводДопДанных") = Неопределено Тогда
		ОтключитьВыводДопДанных = Настройки.Получить("ОтключитьВыводДопДанных");
	КонецЕсли;
	
	Если Не Настройки.Получить("ОтключитьВыводКопияВерна") = Неопределено Тогда
		ОтключитьВыводКопияВерна = Настройки.Получить("ОтключитьВыводКопияВерна");
	КонецЕсли;

	ПриИзмененииНастроекОтображенияДополнительнойИнформации();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ТекстДокументИБНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьЗначение(Объект.ВладелецФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура ПричиныОтклоненияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ОткрытьЗначение(Элемент.ТекущиеДанные.ПричинаОтклонения);
	
КонецПроцедуры

&НаКлиенте
Процедура КвитанцияНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ТипЗнч(Квитанция) = Тип("СправочникСсылка.ЭДПрисоединенныеФайлы") Тогда
		ПараметрыФормы = Новый Структура("Ключ", Квитанция);
		ОткрытьФорму("Справочник.ЭДПрисоединенныеФайлы.Форма.ФормаПросмотраЭД", ПараметрыФормы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектДополнительнаяИнформацияПриИзменении(Элемент)
	
	ИзменитьТекстСопроводительнойЗаписки(Объект.ДополнительнаяИнформация);
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстПредупрежденияНажатие(Элемент)
	Если ЗначениеЗаполнено(АдресПереходаПоПредупреждению) Тогда
		ЗапуститьПриложение(АдресПереходаПоПредупреждению);
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ ЭЛЕКТРОННЫЕ ЦИФРОВЫЕ ПОДПИСИ

&НаКлиенте
Процедура ЭЦППриАктивизацииСтроки(Элемент)
	
	Если Элементы.ЭЦП.ТекущиеДанные <> Неопределено Тогда
		Элементы.ДоверятьСертификату.Доступность = Элементы.ЭЦП.ТекущиеДанные.ОтсутствуетВСписке;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЭЦПВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДобавитьСертификатВДоверенные(Элемент.ТекущиеДанные);
	Если Элемент.ТекущиеДанные <> Неопределено И НЕ Элемент.ТекущиеДанные.ОтсутствуетВСписке
			И НЕ ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.ОбменЧерезДопОбработку") Тогда
		ПоказатьСертификат(Элемент.ТекущиеДанные.НомерСтроки, Элемент.ТекущиеДанные.Отпечаток);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ПерезаполнитьДокумент(Команда)
	
	ЭлектронныеДокументыКлиент.ПерезаполнитьДокумент(Объект.ВладелецФайла, ЭтаФорма, , Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура Отклонить(Команда)
	
	ОтклонитьАннулироватьЭД(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьДокумент(Команда)
	
	Модифицированность = Ложь;
	ТекстПредупреждения = НСтр("ru = 'Внимание! Не рекомендуется выбирать документ отражения в учете вручную. Продолжить?'");
	Ответ = Вопрос(ТекстПредупреждения, РежимДиалогаВопрос.ДаНет, ,КодВозвратаДиалога.Нет);
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ВыбЗнач = Объект.ВладелецФайла;
	ОписаниеТипов = Новый ОписаниеТипов();
	
	Если ВвестиЗначение(ВыбЗнач, "Укажите документ отражения в учете") Тогда
		ПерепривязатьЭлектронныйДокумент(ВыбЗнач);
		Оповестить("ОбновитьСостояниеЭД");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьЭДНаДиск(Команда)
	
	Если ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.СбербанкОнлайн") Тогда
		СохранитьБанковскиеДокументыСбербанка(Объект.Ссылка);
		Возврат;
	КонецЕсли;
	
	ПрисоединенныйФайл = Объект.Ссылка;
	
	ДанныеФайла = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьДанныеФайла(ПрисоединенныйФайл, УникальныйИдентификатор);
	ПолноеИмяФайла = ДанныеФайла.ИмяФайла;
	
	ДанныеФайлаДляСохранения = Новый Структура;

	ДанныеФайлаДляСохранения.Вставить("Расширение", ДанныеФайла.Расширение);
	ДанныеФайлаДляСохранения.Вставить("ПолноеНаименование", ДанныеФайла.Наименование);
	ДанныеФайлаДляСохранения.Вставить("АдресХранилища", ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
	
	ЭлектронныеДокументыКлиент.СохранитьКак(ДанныеФайлаДляСохранения);
	
	Если ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.АльфаБанкОнлайн")
			И Объект.ВидЭД = ПредопределенноеЗначение("Перечисление.ВидыЭД.ВыпискаБанка") Тогда
		СсылкаНаХранилище = "";
		ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьДанныеВыписки(ПрисоединенныйФайл, СсылкаНаХранилище);
		Если ЗначениеЗаполнено(СсылкаНаХранилище) Тогда
			ДанныеФайлаДляСохранения = Новый Структура;
			ДанныеФайлаДляСохранения.Вставить("Расширение", "txt");
			ДанныеФайлаДляСохранения.Вставить("ПолноеНаименование", ДанныеФайла.Наименование);
			ДанныеФайлаДляСохранения.Вставить("АдресХранилища", СсылкаНаХранилище);
			ЭлектронныеДокументыКлиент.СохранитьКак(ДанныеФайлаДляСохранения);
		КонецЕсли;
	КонецЕсли;
	
	Если ДанныеФайла.ПодписанЭЦП Тогда
		
		Настройка = ЭлектроннаяЦифроваяПодписьКлиент.ПолучитьПерсональныеНастройкиРаботыСЭЦП().ДействияПриСохраненииСЭЦП;
		Если Настройка = "Спрашивать" Тогда
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("Объект",                  ПрисоединенныйФайл);
			ПараметрыФормы.Вставить("УникальныйИдентификатор", УникальныйИдентификатор);
			
			МассивСтруктурПодписей = ОткрытьФормуМодально("ОбщаяФорма.ВыборПодписей", ПараметрыФормы);
			
		ИначеЕсли Настройка = "СохранятьВсеПодписи" Тогда
			МассивСтруктурПодписей = ПрисоединенныеФайлыСлужебныйВызовСервера.ПолучитьВсеПодписи(ПрисоединенныйФайл,
				УникальныйИдентификатор);
		КонецЕсли;
		
		Если ТипЗнч(МассивСтруктурПодписей) = Тип("Массив") И МассивСтруктурПодписей.Количество() > 0 Тогда
			Индекс = 0;
			Для Каждого СтруктураПодписи Из МассивСтруктурПодписей Цикл
				Индекс = Индекс + 1;
				ИмяФайлаПодписи = СтруктураПодписи.ИмяФайлаПодписи;
				Если НЕ ЗначениеЗаполнено(ИмяФайлаПодписи) Тогда
					ИмяФайлаПодписи = ДанныеФайла.Наименование + "_" + Индекс + ".p7s";
				КонецЕсли;
				// Сохраним Файл из БД на диск

				ДанныеФайлаДляСохранения = Новый Структура;
				ДанныеФайлаДляСохранения.Вставить("Расширение", "");
				ДанныеФайлаДляСохранения.Вставить("ПолноеНаименование", ИмяФайлаПодписи);
				ДанныеФайлаДляСохранения.Вставить("АдресХранилища", СтруктураПодписи.АдресПодписи);
				
				ЭлектронныеДокументыКлиент.СохранитьКак(ДанныеФайлаДляСохранения);
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.ОбменЧерезДопОбработку")
			И Объект.ВидЭД = ПредопределенноеЗначение("Перечисление.ВидыЭД.ПлатежноеПоручение") Тогда
		ДанныеФайла = ДанныеСлужебногоЭДБанка(ПрисоединенныйФайл, УникальныйИдентификатор);
		Если НЕ ДанныеФайла = Неопределено Тогда
			ДанныеФайлаДляСохранения = Новый Структура;
			ДанныеФайлаДляСохранения.Вставить("Расширение",         "txt");
			ДанныеФайлаДляСохранения.Вставить("ПолноеНаименование", ДанныеФайла.Наименование);
			ДанныеФайлаДляСохранения.Вставить("АдресХранилища",     ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
			ЭлектронныеДокументыКлиент.СохранитьКак(ДанныеФайлаДляСохранения);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДоверятьЭтомуСертификату(Команда)
	
	ДобавитьСертификатВДоверенные(Элементы.ЭЦП.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКЖурналуСобытийЭД(Команда)
	
	ПараметрыФормы = Новый Структура;
	
	Отбор = Новый Структура;
	Отбор.Вставить("ПрисоединенныйФайл", Объект.Ссылка);
	
	ПараметрыФормы.Вставить("Отбор", Отбор);
	ПараметрыФормы.Вставить("РежимОткрытияОкна", РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	ОткрытьФорму("РегистрСведений.ЖурналСобытийЭД.ФормаСписка", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСертификат(Команда)
	
	Если Элементы.ЭЦП.ТекущиеДанные <> Неопределено Тогда
		ПоказатьСертификат(Элементы.ЭЦП.ТекущиеДанные.НомерСтроки, Элементы.ЭЦП.ТекущиеДанные.Отпечаток);
	Иначе
		ОчиститьСообщения();
		ТекстОшибки = НСтр("ru = 'Выберите сертификат в списке установленных подписей.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПодписи(Команда)
	
	ОчиститьСообщения();
	
	Если ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.СбербанкОнлайн")
		И (Объект.ВидЭД = ПредопределенноеЗначение("Перечисление.ВидыЭД.ПлатежноеПоручение")
			ИЛИ Объект.ВидЭД = ПредопределенноеЗначение("Перечисление.ВидыЭД.ЗапросВыписки")
			ИЛИ Объект.ВидЭД = ПредопределенноеЗначение("Перечисление.ВидыЭД.ВыпискаБанка")) Тогда
		#Если ВебКлиент Тогда
			ТекстСообщения = НСтр("ru = 'Невозможна проверка подписей из WEB-браузера'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		#Иначе
			ЭлектронныеДокументыСлужебныйКлиент.ОпределитьСтатусыПодписейСбербанка(Объект.Ссылка);
		#КонецЕсли
	ИначеЕсли ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.ОбменЧерезДопОбработку") Тогда
		ВнешнийПодключаемыйМодуль = ЭлектронныеДокументыСлужебныйКлиент.ВнешнийПодключаемыйМодуль(Объект.СоглашениеЭД);
		Если ВнешнийПодключаемыйМодуль = Неопределено Тогда
			Возврат;
		КонецЕсли;
		ЭлектронныеДокументыСлужебныйКлиент.ОпределитьСтатусыПодписейЧерезДопОбработку(Объект.Ссылка,
			ВнешнийПодключаемыйМодуль);
	Иначе
		ВторойТитул = ВторойТитулДокумента(Объект.Ссылка);
		Если ЭлектронныеДокументыСлужебныйВызовСервера.ВыполнятьКриптооперацииНаСервере() Тогда
			Если ЗначениеЗаполнено(ВторойТитул) Тогда
				ЭлектронныеДокументыСлужебныйВызовСервера.ОпределитьСтатусыПодписей(ВторойТитул, Истина);
			КонецЕсли;
			ЭлектронныеДокументыСлужебныйВызовСервера.ОпределитьСтатусыПодписей(Объект.Ссылка, Истина);
		Иначе
			Если ЗначениеЗаполнено(ВторойТитул) Тогда
				ЭлектронныеДокументыСлужебныйКлиент.ОпределитьСтатусыПодписей(ВторойТитул);
			КонецЕсли;
			ЭлектронныеДокументыСлужебныйКлиент.ОпределитьСтатусыПодписей(Объект.Ссылка);
		КонецЕсли;
	КонецЕсли;
	
	ОбновитьОтображениеДанных();
	ТекущаяСтрока = Элементы.ЭЦП.ТекущиеДанные;
	ЗаполнитьТаблицуЭЦП();
	Если ТекущаяСтрока <> Неопределено Тогда
		Элементы.ЭЦП.ТекущаяСтрока = ЭЦП[ТекущаяСтрока.НомерСтроки-1].ПолучитьИдентификатор();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПодтверждениеЭД(Команда)
	
	ЭлектронныеДокументыСлужебныйКлиент.ОтправитьПодтверждениеЭД(Объект.ВладелецФайла, Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура УтвердитьЭД(Команда)
	
	НовыйЭД = Неопределено;
	ЭлектронныеДокументыСлужебныйКлиент.УтвердитьЭД(Объект.ВладелецФайла, Объект.Ссылка, , НовыйЭД);
	
	Если Не ЗначениеЗаполнено(НовыйЭД) Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Ложь;
	ОткрытьФорму("Справочник.ЭДПрисоединенныеФайлы.Форма.ФормаПросмотраЭД", Новый Структура("Ключ", НовыйЭД),
		ВладелецФормы, Объект.Ссылка, Окно);
	ПеречитатьДанныеФормы(НовыйЭД, Отказ);
	ПриОткрытии(Отказ);
	ОбновитьОтображениеДанных();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьЭД(Команда)
	
	ОчиститьСообщения();
	ЭлектронныеДокументыКлиент.СформироватьПодписатьОтправитьЭД(Объект.ВладелецФайла, Объект.Ссылка);
	ВыполнитьПросмотрЭДИзБДСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПовторно(Команда)
	
	ЭлектронныеДокументыКлиент.ОтправитьПовторноЭД(Объект.ВладелецФайла, Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодписатьЭД(Команда)
	
	ОчиститьСообщения();
	ЭлектронныеДокументыКлиент.СформироватьПодписатьОтправитьЭД(Объект.ВладелецФайла, Объект.Ссылка);
	ВыполнитьПросмотрЭДИзБДСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодтвердитьПлатеж(Команда)
	
	ОчиститьСообщения();
	ДоступныеСертификаты = ЭлектронныеДокументыСлужебныйВызовСервера.ДоступныеСертификаты(Объект.СоглашениеЭД);
	ВнешнийПодключаемыйМодуль = ЭлектронныеДокументыСлужебныйКлиент.ВнешнийПодключаемыйМодуль(Объект.СоглашениеЭД);
	ПарольУстановленРанее = Ложь;
	МассивСертификатов = Новый Массив;
	
	Для Каждого Элемент ИЗ ДоступныеСертификаты Цикл
		Если ЭлектронныеДокументыСлужебныйКлиент.УстановленПарольСертификата(ВнешнийПодключаемыйМодуль, Элемент.Значение.ФайлСертификата) Тогда
			ПарольУстановленРанее = Истина;
			ВыбранныйСертификат = Элемент.Ключ;
			СертификатXML = Элемент.Значение.ФайлСертификата;
			Прервать;
		КонецЕсли;
		МассивСертификатов.Добавить(Элемент.Ключ);
	КонецЦикла;
	
	Если Не ПарольУстановленРанее Тогда
		ВидОперации = НСтр("ru = 'Авторизация на ресурсе банка'");
		Если ЭлектронныеДокументыСлужебныйКлиент.ПарольКСертификатуПолучен(ДоступныеСертификаты, ВидОперации)
			И ДоступныеСертификаты.Количество() > 0 Тогда
			Для Каждого КлючИЗначение Из ДоступныеСертификаты Цикл
				ПараметрыСертификата = КлючИЗначение.Значение;
				ПарольПользователя = ПараметрыСертификата.ПарольПользователя;
				ВыбранныйСертификат = КлючИЗначение.Ключ;
				СертификатXML = ПараметрыСертификата.ФайлСертификата;
				Прервать;
			КонецЦикла;
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
		
	ДанныеСертификата = ЭлектронныеДокументыСлужебныйКлиент.ДанныеСертификатаЧерезДопОбработку(ВнешнийПодключаемыйМодуль,
	                                                                                           СертификатXML);

	Если ДанныеСертификата = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ПинКодУстановлен = ЭлектронныеДокументыСлужебныйКлиент.УстановитьПинКодЕслиТребуется(
	                                            ВнешнийПодключаемыйМодуль,
	                                            ДанныеСертификата.ИдентификаторХранилища);
	
	Если Не ПинКодУстановлен Тогда
		Возврат;
	КонецЕсли;

	Если НЕ ПарольУстановленРанее Тогда
		ПарольУстановлен = ЭлектронныеДокументыСлужебныйКлиент.УстановитьПарольСертификатаЧерезДополнительнуюОбработку(
		                                                                                            ВнешнийПодключаемыйМодуль,
		                                                                                            СертификатXML,
		                                                                                            ПарольПользователя);
		Если НЕ ПарольУстановлен Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;

	СоединениеУстановлено = ЭлектронныеДокументыСлужебныйКлиент.УстановитьСоединениеЧерезДопОбработку(
	                                                                                    Объект.СоглашениеЭД,
	                                                                                    ВнешнийПодключаемыйМодуль,
	                                                                                    СертификатXML);
	Если Не СоединениеУстановлено Тогда
		Возврат;
	КонецЕсли;
		
	ВнешниеИдентификаторы = Новый Массив;
	ВнешниеИдентификаторы.Добавить(УникальныйИДВнешний(Объект.Ссылка));
	ПараметрыЗапроса = Новый Структура("ИдентификаторыДокументов", ВнешниеИдентификаторы);
	
	Попытка
		Результат = ВнешнийПодключаемыйМодуль.ОтправитьЗапрос(СертификатXML, 4, ПараметрыЗапроса);
	Исключение
		ШаблонОшибки = НСтр("ru = 'Ошибка инициализации сессии подтверждения.
							|Код ошибки: %1
							|%2'");
		ДеталиОшибки = ВнешнийПодключаемыйМодуль.ДеталиОшибки();
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
															ШаблонОшибки,
															ДеталиОшибки.Код,
															ДеталиОшибки.Сообщение);
		Операция = НСтр("ru = 'Инициализация сессии подтверждения'");
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(
							Операция, ПодробноеПредставлениеОшибки, ТекстСообщения, 1);
		Возврат;
	КонецПопытки;
	
	Сессия = Результат.Сессия;
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Сертификат",          СертификатXML);
	ПараметрыФормы.Вставить("Сессия",              Сессия);
	ПараметрыФормы.Вставить("ЭлектронныйДокумент", Объект.Ссылка);
	
	Пароль = ОткрытьФормуМодально(
					"Обработка.ОбменЭлектроннымиДокументамиСБанком.Форма.ПодтверждениеПлатежныхПорученийПоSMS",
					ПараметрыФормы);
	Если Пароль = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЗапроса = Новый Структура("Способ, Пароль, Сессия");
	ПараметрыЗапроса.Способ = "SMS";
	ПараметрыЗапроса.Пароль = Пароль;
	ПараметрыЗапроса.Сессия = Сессия;
		
	Попытка
		Результат = ВнешнийПодключаемыйМодуль.ОтправитьЗапрос(СертификатXML, 5, ПараметрыЗапроса);
	Исключение
		ШаблонОшибки = НСтр("ru = 'Ошибка подтверждения платежного поручения.
								|Код ошибки: %1
								|%2'");
		ДеталиОшибки = ВнешнийПодключаемыйМодуль.ДеталиОшибки();
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
															ШаблонОшибки,
															ДеталиОшибки.Код,
															ДеталиОшибки.Сообщение);
		Операция = НСтр("ru = 'Подтверждение платежного поручения'");
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(
							Операция, ПодробноеПредставлениеОшибки, ТекстСообщения, 1);
		Возврат;
	КонецПопытки;
	
	Если Результат.Количество() = 0 Тогда
		ПоказатьОповещениеПользователя(НСтр("ru = 'Нет данных для подтверждения'"));
	КонецЕсли;
	
	Если Не ПустаяСтрока(Результат[0].ТекстОшибки) Тогда
		ТекстСообщения = НСтр("ru = 'Ошибка при подтверждении платежного поручения:'")+ " " + Результат[0].ТекстОшибки;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	УстановитьСтатусДоставлен(Объект.Ссылка);
	
	Оповестить("ОбновитьСостояниеЭД");
	
	ПоказатьОповещениеПользователя(НСтр("ru = 'Документ подтвержден'"));
	
КонецПроцедуры

&НаКлиенте
Процедура АннулироватьЭД(Команда)
	
	ОтклонитьАннулироватьЭД();
	
КонецПроцедуры

&НаКлиенте
Процедура ПринятьАннулирование(Команда)
	
	ОтклонитьАннулирование = Ложь;
	ОбработатьПредложениеОбАннулировании(ОтклонитьАннулирование);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтклонитьАннулирование(Команда)
	
	ОтклонитьАннулирование = Истина;
	ОбработатьПредложениеОбАннулировании(ОтклонитьАннулирование);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьКомментарий(Команда)
	
	СтруктураПараметров = Новый Структура("Описание", Комментарий);
	ИзменитьЗначенияРеквизитовНаСервере(Объект.Ссылка, СтруктураПараметров);
	Комментарий = "";
	Оповестить("ОбновитьСостояниеЭД");
	
КонецПроцедуры

&НаКлиенте
Процедура Перенаправить(Команда)
	
	ОбработатьПеренаправлениеЭД();
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьЗаписку(Команда)
	
	Если ЗначениеЗаполнено(Объект.ДополнительнаяИнформация) Тогда
		СтруктураПараметров = Новый Структура("ДополнительнаяИнформация", "");
		ИзменитьЗначенияРеквизитовНаСервере(Объект.Ссылка, СтруктураПараметров);
		Оповестить("ОбновитьСостояниеЭД");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьДополнительнуюИнформацию(Команда)
	
	ОтключитьВыводДопДанных = Не ОтключитьВыводДопДанных;
	ОбновитьВидимостьДополнительнойИнформации();
	ОбновитьОтображениеДанных();
	Элементы.КомандаОтображатьДополнительнуюИнформацию.Пометка = Не ОтключитьВыводДопДанных;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьОбластьКопияВерна(Команда)
	
	ОтключитьВыводКопияВерна = Не ОтключитьВыводКопияВерна;
	ОбновитьВидимостьДополнительнойИнформации();
	ОбновитьОтображениеДанных();
	Элементы.КомандаОтображатьКопияВерна.Пометка = Не ОтключитьВыводКопияВерна;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗавершить(Команда)
	
	ВводСтрокиЗаголовок = НСтр("ru = 'Укажите причины завершения документооброта'");
	ПричинаЗакрытия = "";
	Если ВвестиСтроку(ПричинаЗакрытия, ВводСтрокиЗаголовок, , Истина) Тогда
		ЗавершитьЭДОСервере(ПричинаЗакрытия);
		Оповестить("ОбновитьСостояниеЭД");
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
Процедура ИнициализацияДанныхНаСервере(Отказ = Ложь)
	
	ПрограммаБанка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.СоглашениеЭД, "ПрограммаБанка");
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		СтатусОтклонен = (Объект.Ссылка.СтатусЭД = Перечисления.СтатусыЭД.Отклонен
					ИЛИ Объект.Ссылка.СтатусЭД = Перечисления.СтатусыЭД.ОтклоненПолучателем
					ИЛИ Объект.Ссылка.СтатусЭД = Перечисления.СтатусыЭД.ОтклоненБанком
					ИЛИ Объект.Ссылка.СтатусЭД = Перечисления.СтатусыЭД.ОшибкаПередачи
					ИЛИ Объект.Ссылка.СтатусЭД = Перечисления.СтатусыЭД.ОтказанАБС
					ИЛИ Объект.Ссылка.СтатусЭД = Перечисления.СтатусыЭД.ЭЦПНеВерна
					ИЛИ Объект.Ссылка.СтатусЭД = Перечисления.СтатусыЭД.ОшибкаРеквизитов);
					
		ТребуетсяПодпись = НеобходимоПодписать();
		ОбновитьСтатусЭД();
		Заголовок = ЭлектронныеДокументыСлужебный.ПолучитьПредставлениеЭД(Объект.Ссылка);
		ЗаполнитьТаблицуЭЦП();
		
		Если НЕ Отказ Тогда
			ВыполнитьПросмотрЭДИзБДСервер(Отказ);
		КонецЕсли;
	КонецЕсли;
	
	ПерезаполнитьКомментарии();
	
	ИзменитьВидимостьДоступность();
	
КонецПроцедуры

&НаСервере
Процедура ПеречитатьДанныеФормы(ЭлектронныйДокумент, Отказ)
	
	ЗначениеВРеквизитФормы(ЭлектронныйДокумент.ПолучитьОбъект(), "Объект");
	ИнициализацияДанныхНаСервере(Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьТекстСопроводительнойЗаписки(ТекстЗаписки)
	
	СтруктураПараметров = Новый Структура("ДополнительнаяИнформация", ТекстЗаписки);
	ИзменитьЗначенияРеквизитовНаСервере(Объект.Ссылка, СтруктураПараметров);
	ЭтаФорма.Модифицированность = Ложь;
		
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ИзменитьЗначенияРеквизитовНаСервере(Знач Ссылка, Знач СтруктураПараметров)
	
	Если СтруктураПараметров.Свойство("Описание") И ЗначениеЗаполнено(Ссылка.Ответственный) Тогда
		СтруктураПараметров.Вставить("Ответственный", Ссылка.Ответственный);
	КонецЕсли;
	ЭлектронныеДокументыСлужебный.ИзменитьПоСсылкеПрисоединенныйФайл(Ссылка, СтруктураПараметров, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьПеренаправлениеЭД()
	
	МассивЭД = Новый Массив;
	МассивЭД.Добавить(Объект.Ссылка);
	ЭлектронныеДокументыСлужебныйКлиент.ИзменитьОтветственного(МассивЭД);
	
КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьКомментарии()
	
	ВсеКомментарии = "";
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЖурналСобытийЭД.Пользователь.Представление КАК Пользователь,
	|	ЖурналСобытийЭД.Дата КАК Дата,
	|	ЖурналСобытийЭД.СтатусЭД,
	|	ЖурналСобытийЭД.Ответственный.Представление КАК Ответственный,
	|	ЖурналСобытийЭД.Комментарий
	|ИЗ
	|	РегистрСведений.ЖурналСобытийЭД КАК ЖурналСобытийЭД
	|ГДЕ
	|	ЖурналСобытийЭД.ПрисоединенныйФайл = &Ссылка
	|	И ЖурналСобытийЭД.Комментарий <> &ПустаяСтрока
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата";
		
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Запрос.УстановитьПараметр("ПустаяСтрока", "");
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	ШаблонКомментария = НСтр("ru = '%1, %2 (статус - %3, ответственный - %4):
		|%5'");
	ПредыдущийКоммент = "";
	ПервыйКоммент = Истина;
	Массив = Новый Массив;
	Пока Выборка.Следующий() Цикл
		ТекущийКоммент = СокрЛП(Выборка.Комментарий);
		Если ПредыдущийКоммент = ТекущийКоммент Тогда
			Продолжить;
		КонецЕсли;
		ПредыдущийКоммент = ТекущийКоммент;
		СтрокаКомментария = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонКомментария,
				Выборка.Дата, Выборка.Пользователь, Выборка.СтатусЭД, Выборка.Ответственный, ТекущийКоммент);
		Массив.Добавить(СтрокаКомментария);
		ПервыйКоммент = Ложь;
	КонецЦикла;
	Если Массив.Количество() > 0 Тогда
		ПервыйКоммент = Истина;
		Для Сч = -Массив.Количество() + 1 По 0 Цикл
			СтрокаКомментария = Массив[-Сч];
			ВсеКомментарии = ВсеКомментарии
				+ СтрокаКомментария
				+ ?(ПервыйКоммент, Символы.ПС + "------------------------------------", "")
				+ Символы.ПС
				+ Символы.ПС;
			ПервыйКоммент = Ложь;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция УникальныйИДВнешний(ЭД)
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭД, "УникальныйИДВнешний");
	
КонецФункции

&НаСервереБезКонтекста
Процедура УстановитьСтатусДоставлен(ЭД)
	
	СтруктураЭД = Новый Структура("СтатусЭД", Перечисления.СтатусыЭД.Доставлен);
	ЭлектронныеДокументыСлужебный.ИзменитьПоСсылкеПрисоединенныйФайл(ЭД, СтруктураЭД, Ложь);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция МассивФайловСбербанка(ЭД)
	
	МассивВозврата = Новый Массив;
	
	СтруктураДайджест = Новый Структура;
	ОсноваИмениФайла = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(ЭД.Наименование);
	
	СтрокаBase64 = ЭлектронныеДокументыСлужебныйВызовСервера.ПодписанныеДанныеBase64(ЭД);
	ИмяФайлаДанных = "doc_" + ОсноваИмениФайла + ".txt";
	ДвоичныеДанные = Base64Значение(СтрокаBase64);
	СсылкаНаДайджест =  ПоместитьВоВременноеХранилище(ДвоичныеДанные);
	СтруктураДайджест = Новый Структура("СсылкаНаФайл, ИмяФайла", СсылкаНаДайджест, ИмяФайлаДанных);
	МассивВозврата.Добавить(СтруктураДайджест);
	
	Для Каждого ЭЦП из ЭД.ЭлектронныеЦифровыеПодписи Цикл
		ДвоичныеДанныеЭЦП = ЭЦП.Подпись.Получить();
		ИмяФайлаДанных = "sign_" + ОсноваИмениФайла+ "_" + ЭЦП.НомерСтроки + ".txt";
		СсылкаНаПодпись = ПоместитьВоВременноеХранилище(ДвоичныеДанныеЭЦП);
		МассивВозврата.Добавить(Новый Структура("СсылкаНаФайл, ИмяФайла", СсылкаНаПодпись, ИмяФайлаДанных));
				
		ДвоичныеДанныеСертификата = ЭЦП.Сертификат.Получить();
		ИмяФайлаДанных = "cert_" + ОсноваИмениФайла + "_" + ЭЦП.НомерСтроки + ".cer";
		СсылкаНаСертификат = ПоместитьВоВременноеХранилище(ДвоичныеДанныеСертификата);
		МассивВозврата.Добавить(Новый Структура("СсылкаНаФайл, ИмяФайла", СсылкаНаСертификат, ИмяФайлаДанных));
	КонецЦикла;

	ДанныеФайла = ЭлектронныеДокументыСлужебный.ПолучитьДанныеФайла(ЭД);
	ИмяФайлаДанных = ОсноваИмениФайла + ".xml";
	СтруктураФайла = Новый Структура("СсылкаНаФайл, ИмяФайла", ДанныеФайла.СсылкаНаДвоичныеДанныеФайла, ИмяФайлаДанных);
	МассивВозврата.Добавить(СтруктураФайла);
	
	Возврат МассивВозврата;
	
КонецФункции

&НаСервере
Процедура ИзменитьВидимостьДоступность()
	
	Если ЗначениеЗаполнено(СсылкаНаМассивСертификатов) Тогда
		МассивСтруктурСертификатов = ПолучитьИзВременногоХранилища(СсылкаНаМассивСертификатов);
	Иначе
		МассивСтруктурСертификатов = Неопределено;
	КонецЕсли;
	
	ЭтоОбменЧерезДопОбработку = Объект.ВидЭД = Перечисления.ВидыЭД.ПлатежноеПоручение
								И ПрограммаБанка = Перечисления.ПрограммыБанка.ОбменЧерезДопОбработку;

	ЕстьВозможностьПодписания = ТребуетсяПодпись()
								И (ЗначениеЗаполнено(МассивСтруктурСертификатов)
								  ИЛИ ПрограммаБанка = Перечисления.ПрограммыБанка.ОбменЧерезДопОбработку
								  ИЛИ ПрограммаБанка = Перечисления.ПрограммыБанка.СбербанкОнлайн)
								И ДоступныДляПодписиСертификаты(МассивСтруктурСертификатов);
	
	Если ЗначениеЗаполнено(Объект.ЭлектронныйДокументВладелец) Тогда
		СсылкаНаЭД = Объект.ЭлектронныйДокументВладелец;
	Иначе
		СсылкаНаЭД = Объект.Ссылка;
	КонецЕсли;
	МожноОтклонитьЭтотЭД = ЭлектронныеДокументыСлужебныйВызовСервера.МожноОтклонитьЭтотЭД(СсылкаНаЭД);
	МожноАннулироватьЭтотЭД = ЭлектронныеДокументыСлужебныйВызовСервера.МожноАннулироватьЭтотЭД(СсылкаНаЭД);
	
	Если НЕ Объект.ВидЭД = Перечисления.ВидыЭД.ВыпискаБанка И НЕ Элементы.Найти("КомандаПрочитать") = Неопределено Тогда
		Элементы.КомандаПрочитать.Видимость = Ложь;
	КонецЕсли;
	
	ДОЗакрыт		= ЭлектронныеДокументыСлужебныйВызовСервера.ДОЗакрытПринудительно(Объект.ВладелецФайла);
	СтатусОтклонен	= ЭлектронныеДокументыСлужебныйВызовСервера.ЭДОтклонен(Объект.СтатусЭД);
	ЭтоСлужебный	= ЭлектронныеДокументыСлужебныйВызовСервера.ЭтоСлужебныйДокумент(Объект.Ссылка);
	
	ЭДТитулПродавца = ЭлектронныеДокументыСлужебный.ЭтоТитулФНС(Объект.Ссылка);
		
	ЭДСчетФактура = ЭлектронныеДокументыСлужебныйВызовСервера.ЭтоСчетФактура(Объект.Ссылка);
	ДОСФЗавершен	= ЭДСчетФактура 
		И ЭлектронныеДокументыСлужебныйВызовСервера.ДОСФЗавершен(Объект.Ссылка, Объект.НаправлениеЭД);
		
	СостоянияЭДОЗавершен = Новый Массив;
	СостоянияЭДОЗавершен.Добавить(Перечисления.СостоянияВерсийЭД.ОбменЗавершен);
	СостоянияЭДОЗавершен.Добавить(Перечисления.СостоянияВерсийЭД.ОбменЗавершенСИсправлением);
	
	ДОЗавершен = ЭлектронныеДокументыСлужебныйВызовСервера.ПроверитьСостояниеЭДО(Объект.ВладелецФайла, СостоянияЭДОЗавершен);

	ИспользуетсяКриптография = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.СоглашениеЭД, "ИспользуетсяКриптография");
	Если (НЕ ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьЗначениеФункциональнойОпции("ИспользоватьЭлектронныеЦифровыеПодписи")
		ИЛИ (НЕ ИспользуетсяКриптография = Истина
		И СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезВебРесурсБанка))
		И ЭлектронныеДокументыСлужебный.НемедленнаяОтправкаЭД() Тогда
		Элементы.КомандаУтвердить.Заголовок = НСтр("ru = 'Утвердить и отправить'");
	КонецЕсли;
	
	Если Объект.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
		Если ПараметрыВыводаПредупреждения = Неопределено Тогда
			ПараметрыВыводаПредупреждения = ЭлектронныеДокументыСлужебный.ПараметрыВыводаПредупреждения(Объект.Ссылка);
		КонецЕсли;

		Если ПараметрыВыводаПредупреждения.Выводить Тогда
			Элементы.ГруппаПредупреждение.Видимость = Истина;
			Элементы.ТекстПредупреждения.Заголовок = ПараметрыВыводаПредупреждения.ТекстПредупреждения;
			АдресПереходаПоПредупреждению = ПараметрыВыводаПредупреждения.Гиперссылка;
			
			Элементы.ТекстПредупреждения.Гиперссылка = ЗначениеЗаполнено(АдресПереходаПоПредупреждению);
		Иначе
			Элементы.ГруппаПредупреждение.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;	
	
	Если ЭлектронныеДокументыСлужебный.НемедленнаяОтправкаЭД() Тогда
		КомандаПодписиОтправки = Элементы.КомандаПодписатьОтправить;
	Иначе
		КомандаПодписиОтправки = Элементы.КомандаПодписать;
	КонецЕсли;
	
	Если Объект.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
		
		КомандаПодписиОтправки.Видимость = Ложь;
		
		Если Объект.ВидЭД = Перечисления.ВидыЭД.ИзвещениеОПолучении
			ИЛИ Объект.ВидЭД = Перечисления.ВидыЭД.Подтверждение
			ИЛИ Объект.ВидЭД = Перечисления.ВидыЭД.УведомлениеОбУточнении
			ИЛИ Объект.ВидЭД = Перечисления.ВидыЭД.ПредложениеОбАннулировании
			ИЛИ Объект.ВидЭД = Перечисления.ВидыЭД.ВыпискаБанка
			ИЛИ Объект.ВидЭД = Перечисления.ВидыЭД.Квитанция
			ИЛИ Объект.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель
			ИЛИ Объект.ВидЭД = Перечисления.ВидыЭД.АктЗаказчик
			ИЛИ Объект.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель
			
			ИЛИ Объект.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИнформацияПокупателяУПД
			ИЛИ Объект.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИнформацияПокупателяУКД Тогда
			Элементы.КомандаПерезаполнитьДокументУчета.Видимость = Ложь;
		ИначеЕсли Объект.ВидЭД = Перечисления.ВидыЭД.КаталогТоваров Тогда
			Элементы.КомандаПерезаполнитьДокументУчета.Заголовок = НСтр("ru = 'Сопоставить номенклатуру'");
			Элементы.КомандаВыбратьДокумент.Видимость = Ложь;
		КонецЕсли;
		
		ЭтоПолученныйКаталогТоваров = Объект.ВидЭД = Перечисления.ВидыЭД.КаталогТоваров
										И Объект.СтатусЭД = Перечисления.СтатусыЭД.Получен;
		Элементы.КомандаПерезаполнитьДокументУчета.Доступность = НЕ СтатусОтклонен И НЕ(ЭтоПолученныйКаталогТоваров);
		
		ОбменЧерезТакском = ОбменЧерезОператора();

		ВерсияФорматаПакета = ЭлектронныеДокументыСлужебный.ВерсияПакетаЭД(Объект.Ссылка);
		ЭтоСчетВерсии30 = (Объект.ВидЭД = Перечисления.ВидыЭД.СчетНаОплату)
			И (ОбменЧерезТакском
				ИЛИ (ВерсияФорматаПакета = Перечисления.ВерсииФорматаПакетаЭД.Версия30 И Не ОбменЧерезТакском));
		
		Элементы.КомандаУтвердить.Видимость =  Не ЕстьВозможностьПодписания ИЛИ ЭДСчетФактура ИЛИ ЭтоСчетВерсии30;
		
		Элементы.КомандаУтвердить.Доступность = Не ДОЗакрыт
			И (Объект.СтатусЭД = Перечисления.СтатусыЭД.Получен
			И НЕ(Объект.ВидЭД = Перечисления.ВидыЭД.ИзвещениеОПолучении
				ИЛИ Объект.ВидЭД = Перечисления.ВидыЭД.Подтверждение
				ИЛИ Объект.ВидЭД = Перечисления.ВидыЭД.ПредложениеОбАннулировании
				ИЛИ Объект.ВидЭД = Перечисления.ВидыЭД.УведомлениеОбУточнении));
			
		КомандаПодписиОтправки.Видимость   = (ЕстьВозможностьПодписания
					ИЛИ Объект.СтатусЭД = Перечисления.СтатусыЭД.Подписан)
				И ТребуетсяПодпись
				И НЕ ЭДСчетФактура
				И Не ЭтоСчетВерсии30;
			
		КомандаПодписиОтправки.Доступность = НЕ СтатусОтклонен И Не ДОЗакрыт И ОтраженВУчете
				И (Объект.СтатусЭД = Перечисления.СтатусыЭД.Получен
					ИЛИ Объект.СтатусЭД = Перечисления.СтатусыЭД.Утвержден
					ИЛИ Объект.СтатусЭД = Перечисления.СтатусыЭД.Подписан)
				И Не ВторойТитулПодписан();
			
		Если ЭлектронныеДокументыСлужебный.ЭтоТитулФНС(Объект.Ссылка) Тогда
			
			КомандаПодписиОтправки.Видимость   = ЕстьВозможностьПодписания И ТребуетсяПодпись;
			КомандаПодписиОтправки.Доступность = НЕ СтатусОтклонен И Не ДОЗакрыт И ОтраженВУчете 
				И (Объект.СтатусЭД = Перечисления.СтатусыЭД.Получен ИЛИ Объект.СтатусЭД = Перечисления.СтатусыЭД.Утвержден)
				И Не ВторойТитулПодписан();
			
		КонецЕсли;
				
		// Для входящего с.ф. кнопка отклонение имеет свое название и картинку
		Если Объект.Ссылка.ВидЭД = Перечисления.ВидыЭД.СчетФактура
			Или Объект.Ссылка.ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура Тогда
			Элементы.КомандаОтклонить.Заголовок = НСтр("ru = 'Запросить уточнение по электронному документу'");
			Элементы.КомандаОтклонить.Картинка = БиблиотекаКартинок.ПользовательБезНеобходимыхСвойств;
		КонецЕсли;
		
		Если Объект.ВидЭД = Перечисления.ВидыЭД.ВыпискаБанка Тогда
			Элементы.КомандаВыбратьДокумент.Видимость = Ложь;
		КонецЕсли
		
	ИначеЕсли Объект.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий Тогда
		
		Элементы.КомандаОтправитьПодтверждение.Видимость     = Ложь;
		Элементы.КомандаВыбратьДокумент.Видимость            = Ложь;
		Элементы.КомандаПерезаполнитьДокументУчета.Видимость = Ложь;
		
		Если Объект.ВидЭД = Перечисления.ВидыЭД.ПлатежноеПоручение Тогда
			КоличествоНеустановленныхПодписей =  ПолучитьКоличествоНеустановленныхПодписей();
			ЕстьОшибкаПередачи = (Объект.СтатусЭД = Перечисления.СтатусыЭД.ОшибкаПередачи);
			Если ПрограммаБанка = Перечисления.ПрограммыБанка.СбербанкОнлайн Тогда
				Элементы.КомандаПодписатьОтправить.Видимость = Ложь;
				Элементы.КомандаПодписать.Видимость = КоличествоНеустановленныхПодписей > 0 И ЕстьВозможностьПодписания;
				Элементы.КомандаОтправитьПовторно.Видимость = Ложь;
			Иначе
				Элементы.КомандаПодписатьОтправить.Видимость = (КоличествоНеустановленныхПодписей = 1) И ЕстьВозможностьПодписания;
				Элементы.КомандаПодписать.Видимость   = КоличествоНеустановленныхПодписей > 1 И ЕстьВозможностьПодписания;
				Элементы.КомандаОтправитьПовторно.Видимость = ЕстьОшибкаПередачи;
			КонецЕсли;
		Иначе
			
			КомандаПодписиОтправки.Видимость   = (ЕстьВозможностьПодписания ИЛИ Объект.СтатусЭД = Перечисления.СтатусыЭД.Подписан) И ТребуетсяПодпись;
			КомандаПодписиОтправки.Доступность = НЕ СтатусОтклонен И Не ДОЗакрыт
				И (ОтраженВУчете ИЛИ Объект.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель
					ИЛИ Объект.ВидЭД = Перечисления.ВидыЭД.АктЗаказчик
					ИЛИ Объект.ВидЭД = Перечисления.ВидыЭД.АктНаПередачуПрав
					ИЛИ Объект.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель
					ИЛИ Объект.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИнформацияПокупателяУПД
					ИЛИ Объект.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИнформацияПокупателяУКД
					ИЛИ Объект.ВидЭД = Перечисления.ВидыЭД.ПредложениеОбАннулировании
					ИЛИ Объект.ВидЭД = Перечисления.ВидыЭД.ИзвещениеОПолучении)
				И (Объект.СтатусЭД = Перечисления.СтатусыЭД.Сформирован ИЛИ Объект.СтатусЭД = Перечисления.СтатусыЭД.Утвержден ИЛИ Объект.СтатусЭД = Перечисления.СтатусыЭД.Подписан);
			
			Если ЭлектронныеДокументыСлужебныйВызовСервера.ЭтоПрямойОбмен(Объект.ПрофильНастроекЭДО.СпособОбменаЭД) Тогда
				Элементы.КомандаОтправитьПовторно.Видимость = Истина;
				Элементы.КомандаОтправитьПовторно.Доступность = НЕ СтатусОтклонен
					И ОтраженВУчете
					ИЛИ (Объект.ВидЭД = Перечисления.ВидыЭД.ИзвещениеОПолучении
						ИЛИ Объект.ВидЭД = Перечисления.ВидыЭД.Подтверждение
						ИЛИ Объект.ВидЭД = Перечисления.ВидыЭД.ПредложениеОбАннулировании
						ИЛИ Объект.ВидЭД = Перечисления.ВидыЭД.УведомлениеОбУточнении);
			КонецЕсли;
			
			ЗапискаДоступна = (НЕ ЭтоСлужебный
				И (Объект.СтатусЭД = Перечисления.СтатусыЭД.Сформирован
					ИЛИ Объект.СтатусЭД = Перечисления.СтатусыЭД.Утвержден
					ИЛИ Объект.СтатусЭД = Перечисления.СтатусыЭД.Подписан
					ИЛИ Объект.СтатусЭД = Перечисления.СтатусыЭД.ПодготовленКОтправке));
			Элементы.ОбъектДополнительнаяИнформация.ТолькоПросмотр = НЕ ЗапискаДоступна;
			Элементы.ОчиститьЗаписку.Доступность = ЗапискаДоступна;
		КонецЕсли;
		
		// КомандаУтвердитьЭД видимость и доступность:
		Элементы.КомандаУтвердить.Видимость   = НЕ (ЕстьВозможностьПодписания И ТребуетсяПодпись);
		Элементы.КомандаУтвердить.Доступность = Не ДОЗакрыт И (Объект.СтатусЭД = Перечисления.СтатусыЭД.Сформирован);
		
	ИначеЕсли Объект.НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани Тогда
		
		Элементы.КомандаОтправитьПодтверждение.Видимость = Ложь;
		Элементы.КомандаВыбратьДокумент.Видимость          = Ложь;
		
		Элементы.КомандаПодписать.Видимость     = ЕстьВозможностьПодписания;
		Элементы.КомандаПодписать.Доступность   = (ЕстьВозможностьПодписания
			И НЕ СтатусОтклонен И Объект.СтатусЭД <> Перечисления.СтатусыЭД.ПолностьюПодписан);
		
		Элементы.КомандаУтвердить.Видимость   = НЕ ЕстьВозможностьПодписания;
		Элементы.КомандаУтвердить.Доступность = (Объект.СтатусЭД = Перечисления.СтатусыЭД.Сформирован);
		
		Элементы.ДополнительныеКоманды.Видимость = Ложь;
		
		ОтключитьВыводДопДанных = Истина;
		Элементы.КомандаОтображатьДополнительнуюИнформацию.Видимость = Ложь;
		
	КонецЕсли;
	
	Элементы.КомандаАннулировать.Доступность = МожноАннулироватьЭтотЭД;
	Элементы.КомандаОтклонить.Доступность = (НЕ (СтатусОтклонен ИЛИ ЭтоСлужебный ИЛИ ДОЗакрыт) И МожноОтклонитьЭтотЭД)
		И Не ЕстьОтправленноеУведомление();
	Элементы.ГруппаКомандАннулирование.Видимость = Ложь;
	Элементы.ГруппаСтраницыПодвала.ТекущаяСтраница = Элементы.ГруппаСтатусовИСостояния;
	Элементы.КомандаАннулировать.Видимость = СпособОбменаЭД <> Перечисления.СпособыОбменаЭД.ЧерезВебРесурсБанка;
	Элементы.ОткрытьСертификат.Видимость = СпособОбменаЭД <> Перечисления.СпособыОбменаЭД.ЧерезВебРесурсБанка
		ИЛИ СертификатыВФорматеX508();
	Элементы.ДоверятьСертификату.Видимость = СпособОбменаЭД <> Перечисления.СпособыОбменаЭД.ЧерезВебРесурсБанка;
	
	Элементы.КомандаЗавершить.Видимость = ЭДСчетФактура;         
	Элементы.КомандаЗавершить.Доступность = Не ДОСФЗавершен
		И (Объект.СтатусЭД = Перечисления.СтатусыЭД.Отправлен
			Или Объект.СтатусЭД = Перечисления.СтатусыЭД.Доставлен);
	
	ЭтоБанковскийЭД = ЭлектронныеДокументыСлужебный.ЭтоБанковскийЭД(Объект.ВидЭД);
	Элементы.ГруппаСтатусовИОтклонения.Видимость = ЭтоБанковскийЭД
	;
	
	Если ЭтоБанковскийЭД Тогда
		Элементы.ТестСостояниеЭД.Видимость = Ложь;
		Элементы.ТекстСтатусЭД.Видимость = Истина;
		Элементы.СостояниеЭД.Видимость = Истина;
	Иначе
		Элементы.ТестСостояниеЭД.Видимость = Истина;
		Элементы.ТекстСтатусЭД.Видимость = Ложь;
		Элементы.СостояниеЭД.Видимость = Ложь;
	КонецЕсли;
	
	Если СтатусОтклонен Тогда
		Элементы.ГруппаСтатусовИОтклонения.Видимость = Истина;
		
		ПричиныОтклонения.Очистить();
		НовСтрока = ПричиныОтклонения.Добавить();
		НовСтрока.ПричинаОтклонения = Объект.Ссылка.ПричинаОтклонения;
		Элементы.ГруппаСтраницыПодвала.ТекущаяСтраница = Элементы.ГруппаСтраницыПодвала.ПодчиненныеЭлементы.ГруппаСтраницаОтклонение;
		
		Если Объект.СтатусЭД = Перечисления.СтатусыЭД.ОшибкаПередачи Тогда
			Элементы.ПричиныОтклоненияПричинаОтклонения.Заголовок = НСтр("ru = 'Ошибка обмена'");
			НовСтрока.ПричинаОтклонения = Объект.ПричинаОтклонения;
		КонецЕсли;
		
		Если Объект.ВидЭД = Перечисления.ВидыЭД.ПлатежноеПоручение
			И ПрограммаБанка = Перечисления.ПрограммыБанка.СбербанкОнлайн Тогда
			Элементы.ГруппаСтраницыПодвала.ТекущаяСтраница = Элементы.ГруппаКвитанция;
			Квитанция = ЭлектронныеДокументыВнутренний.ПодчиненныйДокумент(Объект.Ссылка, Перечисления.ВидыЭД.Квитанция);
		КонецЕсли;
	ИначеЕсли ЭДОАннулированИлиВПроцессе() Тогда
		Элементы.ГруппаСтатусовИОтклонения.Видимость = Истина;
		
		ПричиныОтклонения.Очистить();
		НовСтрока = ПричиныОтклонения.Добавить();
		НовСтрока.ПричинаОтклонения = СсылкаНаЭД.ПричинаОтклонения;
		
		Элементы.ГруппаСтраницыПодвала.ТекущаяСтраница = Элементы.ГруппаСтраницыПодвала.ПодчиненныеЭлементы.ГруппаСтраницаОтклонение;
		Элементы.ПричиныОтклоненияПричинаОтклонения.Заголовок = НСтр("ru = 'Причина аннулирования'");
		Элементы.КомандаОтклонить.Доступность = Ложь;
		
		СвойстваВладельцаЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.ЭлектронныйДокументВладелец, "СтатусЭД, ТребуетсяПодтверждение");
		
		Если Объект.СтатусЭД = Перечисления.СтатусыЭД.ПолученоПредложениеОбАннулировании
			ИЛИ (Объект.ВидЭД = Перечисления.ВидыЭД.ПредложениеОбАннулировании И Объект.СтатусЭД = Перечисления.СтатусыЭД.Получен
				 И СвойстваВладельцаЭД.ТребуетсяПодтверждение)
			ИЛИ (СвойстваВладельцаЭД.СтатусЭД = Перечисления.СтатусыЭД.ПолученоПредложениеОбАннулировании) Тогда
			
			Элементы.ГруппаКомандАннулирование.Видимость = Истина;
			Элементы.КомандаОтправитьПодтверждение.Видимость = Ложь;
			Элементы.КомандаПодписатьОтправить.Видимость = Ложь;
			Элементы.КомандаОтклонить.Видимость = Ложь;
			Элементы.КомандаАннулировать.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ РазрешеноОтклонитьЭД() Тогда
		Элементы.КомандаОтклонить.Видимость = Ложь;
	КонецЕсли;
	
	// Команда ОтправитьНаПодпись:
	Элементы.КомандаПеренаправить.Видимость = НЕ ЭтоСлужебный;
	//
	
	Элементы.СтраницаКомментарии.Картинка = ОбщегоНазначения.ПолучитьКартинкуКомментария(ВсеКомментарии);
	Элементы.СтраницаСопроводительнаяЗаписка.Картинка = ОбщегоНазначения.ПолучитьКартинкуКомментария(Объект.ДополнительнаяИнформация);
	
	Элементы.КомандаПодтвердитьПлатеж.Видимость = ПрограммаБанка = Перечисления.ПрограммыБанка.ОбменЧерезДопОбработку
													И Объект.Ссылка.СтатусЭД = Перечисления.СтатусыЭД.Отправлен;
	
КонецПроцедуры

&НаСервере
Функция РазрешеноОтклонитьЭД()
	
	Если Объект.ВидЭД = Перечисления.ВидыЭД.ПлатежноеПоручение Тогда
		Если Объект.СтатусЭД = перечисления.СтатусыЭД.Сформирован 
			ИЛИ Объект.СтатусЭД = перечисления.СтатусыЭД.Подписан
			ИЛИ Объект.СтатусЭД = перечисления.СтатусыЭД.Сформирован
			ИЛИ Объект.СтатусЭД = перечисления.СтатусыЭД.Утвержден
			ИЛИ Объект.СтатусЭД = перечисления.СтатусыЭД.ЧастичноПодписан Тогда
				Возврат Истина;
		Иначе
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура ОбновитьСтатусЭД()
		
	СтатусЭД = Объект.СтатусЭД;
	ДатаИзмененияСтатусаЭД = Объект.ДатаИзмененияСтатусаЭД;
	
	ТекстСтатусЭД = "" +  СтатусЭД + ", " + Формат(ДатаИзмененияСтатусаЭД, "ДЛФ=");
	ТекстСостояния = ЭлектронныеДокументыКлиентСервер.ПолучитьТекстСостоянияЭД(Объект.ВладелецФайла);
	ТекстДокументИБ = Строка(Объект.ВладелецФайла);
	
	ЗапросПоОтражению = Новый Запрос;
	ЗапросПоОтражению.УстановитьПараметр("СсылкаНаОбъект", Объект.ВладелецФайла);
	
	ЗапросПоОтражению.Текст =
	"ВЫБРАТЬ
	|	СостоянияЭД.СсылкаНаОбъект,
	|	СостоянияЭД.ЭлектронныйДокумент
	|ИЗ
	|	РегистрСведений.СостоянияЭД КАК СостоянияЭД
	|ГДЕ
	|	СостоянияЭД.СсылкаНаОбъект = &СсылкаНаОбъект";
	
	Выборка = ЗапросПоОтражению.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ВерсияЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Выборка.ЭлектронныйДокумент, "ДатаФормированияЭДОтправителем");
		ОтраженВУчете = (Объект.Ссылка = Выборка.ЭлектронныйДокумент);
	КонецЕсли;
	
	// Если обмен через ЭДО, то статусы не отображаем
	Если Не ЭлектронныеДокументыСлужебный.ЭтоБанковскийЭД(Объект.ВидЭД) Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаСтатусов = ПолучитьТаблицуСтатусовЭД(Объект.Ссылка);
	Если ЗначениеЗаполнено(ТаблицаСтатусов) Тогда
		ЗначениеВРеквизитФормы(ТаблицаСтатусов, "ТаблицаСостояний");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуЭЦП()
	
	ТаблицаВременная = РеквизитФормыВЗначение("ЭЦП");
	ТаблицаВременная.Очистить();
	
	СвойстваЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Ссылка, "СоглашениеЭД,ВидЭД,ЭлектронныеЦифровыеПодписи");
	СоглашениеЭД = СвойстваЭД.СоглашениеЭД;
	
	ПроверятьСертификатыПодписей = Ложь;
	Если ЗначениеЗаполнено(СоглашениеЭД) Тогда
		ПроверятьСертификатыПодписей = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СоглашениеЭД, "ПроверятьСертификатыПодписей");
	КонецЕсли;
	
	
	Если НЕ ЗначениеЗаполнено(СоглашениеЭД)
		ИЛИ НЕ ПроверятьСертификатыПодписей Тогда
		
		ВидЭД = СвойстваЭД.ВидЭД;
		
		Если ЭлектронныеДокументыСлужебный.ЭтоТитулФНС(Объект.Ссылка) Тогда
			ЭлПодписи = ЭлектронныеПодписиДвухТитулов();
		Иначе
			ЭлПодписи = СвойстваЭД.ЭлектронныеЦифровыеПодписи.Выгрузить();
		КонецЕсли;
		
		Для Каждого ТекСтрока Из ЭлПодписи Цикл
			НоваяСтрока = ТаблицаВременная.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
			ЗаполнитьСтатусПодписи(НоваяСтрока, ТекСтрока);
			НоваяСтрока.НомерСтроки = ТаблицаВременная.Количество();
		КонецЦикла;
		
		ЗначениеВРеквизитФормы(ТаблицаВременная, "ЭЦП");
		
	Иначе
		
		МассивОтпечатковОжидаемыхСертификатов = ПолучитьОтпечаткиОжидаемыхСертификатов(Объект.Ссылка.СоглашениеЭД);
		
		ТаблицаВременная = РеквизитФормыВЗначение("ЭЦП");
		ТаблицаВременная.Очистить();
		
		Если ЭлектронныеДокументыСлужебный.ЭтоТитулФНС(Объект.Ссылка) Тогда
			ЭлПодписи = ЭлектронныеПодписиДвухТитулов();
		Иначе
			ЭлПодписи = СвойстваЭД.ЭлектронныеЦифровыеПодписи.Выгрузить();
		КонецЕсли;
		
		Для Каждого ТекСтрока Из ЭлПодписи Цикл
			НоваяСтрока = ТаблицаВременная.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
			Если МассивОтпечатковОжидаемыхСертификатов.Найти(ТекСтрока.Отпечаток) = Неопределено Тогда
				НоваяСтрока.ОтсутствуетВСписке = Истина;
				НоваяСтрока.ВыводКартинки = 1;
			Иначе
				НоваяСтрока.ВыводКартинки = 0;
			КонецЕсли;
			ЗаполнитьСтатусПодписи(НоваяСтрока, ТекСтрока);
		КонецЦикла;
		ЗначениеВРеквизитФормы(ТаблицаВременная, "ЭЦП");
		
	КонецЕсли;
	
	Если ЭлектронныеДокументыСлужебный.ЭтоБанковскийЭД(Объект.ВидЭД) Тогда
		ШаблонЗаголовка = Нстр("ru = 'Подписи %1и статусы'");
	Иначе
		ШаблонЗаголовка = Нстр("ru = 'Подписи %1'");
	КонецЕсли;
	
	Элементы.СтраницаПодписиИСтатусы.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ШаблонЗаголовка, 
		?(ТаблицаВременная.Количество() = 0, "", "(" + ТаблицаВременная.Количество() + ") "));
		
	Если ЭЦП.НайтиСтроки(Новый Структура("ПодписьВерна", Ложь)).Количество() = 0 Тогда
		Элементы.СтраницаПодписиИСтатусы.Картинка = Новый Картинка;
	Иначе
		Элементы.СтраницаПодписиИСтатусы.Картинка = БиблиотекаКартинок.Предупреждение;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьОтпечаткиОжидаемыхСертификатов(ТекущееСоглашение)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СертификатыЭЦП.Отпечаток КАК Отпечаток
	|ИЗ
	|	Справочник.СертификатыЭЦП КАК СертификатыЭЦП
	|ГДЕ
	|	СертификатыЭЦП.Организация = &Организация
	|	И СертификатыЭЦП.Отозван = ЛОЖЬ
	|	И СертификатыЭЦП.ПометкаУдаления = ЛОЖЬ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СоглашенияОбИспользованииЭДСертификатыПодписейКонтрагента.Отпечаток
	|ИЗ
	|	Справочник.СоглашенияОбИспользованииЭД.СертификатыПодписейКонтрагента КАК СоглашенияОбИспользованииЭДСертификатыПодписейКонтрагента
	|ГДЕ
	|	СоглашенияОбИспользованииЭДСертификатыПодписейКонтрагента.Ссылка = &СоглашениеОбИспользованииЭД";
	Запрос.УстановитьПараметр("Организация", ТекущееСоглашение.Организация);
	Запрос.УстановитьПараметр("СоглашениеОбИспользованииЭД", ТекущееСоглашение);
	
	МассивОтпечатков = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Отпечаток");
	
	Возврат МассивОтпечатков;
	
КонецФункции

&НаСервере
Функция ЭлектронныеПодписиДвухТитулов()
	
	ЭПРезультат = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Ссылка, "ЭлектронныеЦифровыеПодписи");
	ЭП = ЭПРезультат.Выгрузить();
	
	ВторойТитул = ВторойТитулДокумента(Объект.Ссылка);
	
	Если ЗначениеЗаполнено(ВторойТитул) Тогда
		
		ЭПВторогоТитулаРезультат = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВторойТитул, "ЭлектронныеЦифровыеПодписи");
		ЭПВторогоТитула = ЭПВторогоТитулаРезультат.Выгрузить();
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ЭПВторогоТитула, ЭП);
		
	КонецЕсли;
	
	Возврат ЭП;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСтатусПодписи(НоваяСтрока, ТекСтрока)
	
	Если ЗначениеЗаполнено(ТекСтрока.ДатаПроверкиПодписи) Тогда
		НоваяСтрока.ПодписьВернаПредставление = ?(ТекСтрока.ПодписьВерна, НСтр("ru = 'Верна'"), НСтр("ru = 'Неверна'"))
			+" (" + ТекСтрока.ДатаПроверкиПодписи + ")";
	Иначе
		НоваяСтрока.ПодписьВернаПредставление = НСтр("ru = 'Не проверена'");
	КонецЕсли
	
КонецПроцедуры

&НаСервере
Функция НеобходимоПодписать()
	
	ФлагПодписи = Ложь;
	// Ответ на заказ никогда не подписывает покупатель или документ отклонен.
	Если НЕ СтатусОтклонен Тогда
		
		Если Не ЭлектронныеДокументыСлужебныйВызовСервера.ЭтоПрямойОбмен(Объект.Ссылка.ПрофильНастроекЭДО.СпособОбменаЭД) Тогда
			ФлагПодписи = Истина;
		Иначе
			
			УстановитьПривилегированныйРежим(Истина);
			
			Если Объект.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
				ФлагПодписи = Объект.ПодписанЭЦП;
			ИначеЕсли Объект.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий
				ИЛИ Объект.НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани Тогда
				
				Если Объект.ВидЭД = Перечисления.ВидыЭД.ИзвещениеОПолучении Тогда
					
					ФлагПодписи = Объект.ЭлектронныйДокументВладелец.ПодписанЭЦП;
					
				Иначе
					
					Запрос = Новый Запрос;
					Запрос.Текст =
					"ВЫБРАТЬ
					|	СоглашенияОбИспользованииЭДИсходящиеДокументы.ИспользоватьЭЦП
					|ИЗ
					|	Справочник.СоглашенияОбИспользованииЭД.ИсходящиеДокументы КАК СоглашенияОбИспользованииЭДИсходящиеДокументы
					|ГДЕ
					|	ВЫБОР
					|			КОГДА &ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.Торг12Покупатель)
					|				ТОГДА СоглашенияОбИспользованииЭДИсходящиеДокументы.ИсходящийДокумент = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.Торг12Продавец)
					|			КОГДА &ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель)
					|				ТОГДА СоглашенияОбИспользованииЭДИсходящиеДокументы.ИсходящийДокумент = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель)
					|			КОГДА &ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.АктЗаказчик)
					|				ТОГДА СоглашенияОбИспользованииЭДИсходящиеДокументы.ИсходящийДокумент = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.АктИсполнитель)
					|			ИНАЧЕ СоглашенияОбИспользованииЭДИсходящиеДокументы.ИсходящийДокумент = &ВидЭД
					|		КОНЕЦ
					|	И (&НаправлениеЭД = ЗНАЧЕНИЕ(Перечисление.НаправленияЭД.Исходящий)
					|			ИЛИ &НаправлениеЭД = ЗНАЧЕНИЕ(Перечисление.НаправленияЭД.Интеркампани))
					|	И СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка = &Ссылка";
					Запрос.УстановитьПараметр("Ссылка",        Объект.СоглашениеЭД);
					Запрос.УстановитьПараметр("ВидЭД",         Объект.ВидЭД);
					Запрос.УстановитьПараметр("НаправлениеЭД", Объект.НаправлениеЭД);
					
					Результат = Запрос.Выполнить().Выбрать();
					Результат.Следующий();
					
					ФлагПодписи = Результат.ИспользоватьЭЦП;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ФлагПодписи;
	
КонецФункции

&НаСервере
Функция ДоступныДляПодписиСертификаты(МассивСтруктурСертификатов)
	
	ЗапросПоСертификатам = Новый Запрос;
	ЗапросПоСертификатам.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	СертификатыЭЦПВидыДокументов.Ссылка
	|ИЗ
	|	Справочник.СертификатыЭЦП.ВидыДокументов КАК СертификатыЭЦПВидыДокументов
	|ГДЕ
	|	НЕ СертификатыЭЦПВидыДокументов.Ссылка.Отозван
	|	И (СертификатыЭЦПВидыДокументов.Ссылка.СписокПользователей.Пользователь = &ТекущийПользователь
	|		ИЛИ НЕ СертификатыЭЦПВидыДокументов.Ссылка.ОграничитьДоступКСертификату)
	|	И НЕ СертификатыЭЦПВидыДокументов.Ссылка.ПометкаУдаления
	|	И СертификатыЭЦПВидыДокументов.ВидДокумента = &ВидДокумента
	|	И СертификатыЭЦПВидыДокументов.ИспользоватьДляПодписи
	|	И СертификатыЭЦПВидыДокументов.Ссылка.Организация = &Организация
	|	И %1";
	
	Если Объект.ВидЭД = Перечисления.ВидыЭД.ПлатежноеПоручение
			И (ПрограммаБанка = Перечисления.ПрограммыБанка.СбербанкОнлайн
				ИЛИ ПрограммаБанка = Перечисления.ПрограммыБанка.ОбменЧерезДопОбработку) Тогда

		МассивСертификатовНеобходимыхПодписей = Объект.СоглашениеЭД.СертификатыПодписейОрганизации.ВыгрузитьКолонку(
																										"Сертификат");
		ДопУсловие = " СертификатыЭЦПВидыДокументов.Ссылка В(&МассивСертификатовНеобходимыхПодписей)";
		ЗапросПоСертификатам.УстановитьПараметр("МассивСертификатовНеобходимыхПодписей",
												МассивСертификатовНеобходимыхПодписей);
	Иначе
		МассивОтпечатков = Новый Массив;
		Если Не МассивСтруктурСертификатов = Неопределено Тогда
			Для Каждого ЭлементСтруктуры Из МассивСтруктурСертификатов Цикл
				МассивОтпечатков.Добавить(ЭлементСтруктуры.Отпечаток);
			КонецЦикла;
		КонецЕсли;
		ЗапросПоСертификатам.УстановитьПараметр("МассивОтпечатков", МассивОтпечатков);
		ДопУсловие = " СертификатыЭЦПВидыДокументов.Ссылка.Отпечаток В(&МассивОтпечатков)";
	КонецЕсли;
	
	ЗапросПоСертификатам.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
																	ЗапросПоСертификатам.Текст,
																	ДопУсловие);
	
	ЗапросПоСертификатам.УстановитьПараметр("ТекущийПользователь", Пользователи.АвторизованныйПользователь());
	ЗапросПоСертификатам.УстановитьПараметр("ВидДокумента",        Объект.ВидЭД);
	ЗапросПоСертификатам.УстановитьПараметр("Организация",         Объект.Организация);

	ИспользуютсяЭП = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьЗначениеФункциональнойОпции(
																	"ИспользоватьЭлектронныеЦифровыеПодписи")
						ИЛИ ПрограммаБанка = Перечисления.ПрограммыБанка.ОбменЧерезДопОбработку
						ИЛИ ПрограммаБанка = Перечисления.ПрограммыБанка.СбербанкОнлайн;
						
	ЕстьПравоПодписи = ЭлектронныеДокументыПереопределяемый.ЕстьПравоПодписанияЭД();
	
	ВозвращаемыйПараметр = ИспользуютсяЭП И НЕ ЗапросПоСертификатам.Выполнить().Пустой() И ТребуетсяПодпись и ЕстьПравоПодписи;
		
	Возврат ВозвращаемыйПараметр;
	
КонецФункции

&НаСервере
Функция ТребуетсяПодпись()
	
	СвойстваЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Ссылка, "НаправлениеЭД, ТребуетсяПодтверждение");
	
	Если СвойстваЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
		ТребуетсяПодпись = СвойстваЭД.ТребуетсяПодтверждение;
	Иначе
		ТребуетсяПодпись = Истина;
	КонецЕсли;
	
	Возврат ТребуетсяПодпись;
	
КонецФункции

&НаКлиенте
Процедура УстановитьВидимостьДоступностьНаКлиенте()

	Попытка
		Если ЭлектронныеДокументыСлужебныйВызовСервера.ВыполнятьКриптооперацииНаСервере() Тогда
			МассивСтруктурСертификатов = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьМассивСтруктурСертификатов(Истина);
		Иначе
			МассивСтруктурСертификатов = ЭлектроннаяЦифроваяПодписьКлиент.ПолучитьМассивСтруктурСертификатов(Истина);
		КонецЕсли;
	Исключение
		МассивСтруктурСертификатов = Новый Массив;
	КонецПопытки;
	СсылкаНаМассивСертификатов = ПоместитьВоВременноеХранилище(МассивСтруктурСертификатов, УникальныйИдентификатор);
	ИзменитьВидимостьДоступность();
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьПросмотрЭДИзБДСервер(Отказ = Ложь)
	
	СтруктураПодписей = Новый Структура();
	СтруктураПодписей.Вставить("Подписи", ЭЦП.Выгрузить(, "КомуВыданСертификат, НомерСтроки, ДатаПодписи, Сертификат"));
	
	ПараметрыПросмотра = Новый Структура;
	ПараметрыПросмотра.Вставить("УникальныйИдентификатор", УникальныйИдентификатор);
	ПараметрыПросмотра.Вставить("СтруктураПодписей", СтруктураПодписей);
	ПараметрыПросмотра.Вставить("СкрыватьКопияВерна", ОтключитьВыводКопияВерна);
	ПараметрыПросмотра.Вставить("СкрыватьДопДанные", ОтключитьВыводДопДанных);
	
	ДанныеЭД = ЭлектронныеДокументыВнутренний.ФайлДанныхЭД(Объект.Ссылка, ПараметрыПросмотра);
	Если ДанныеЭД = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если ТипЗнч(ДанныеЭД) = Тип("ТабличныйДокумент") Тогда
		ТабличныйДокументФормы = ДанныеЭД;
		ИсходныйТабличныйДокумент = ДанныеЭД;
		ОпределитьНаличиеДопДанныхСкрытьФлаг();
		Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.СтраницаТабличныйДокумент;
		Элементы.СтраницаДругойФормат.Видимость = Ложь;
		Элементы.СтраницаТабличныйДокумент.Видимость = Истина;
		
		Элементы.КомандаОтображатьДополнительнуюИнформацию.Пометка = Не ОтключитьВыводДопДанных;
		Элементы.КомандаОтображатьКопияВерна.Пометка = Не ОтключитьВыводКопияВерна;
		
	Иначе
		Элементы.СтраницаДругойФормат.Видимость = Истина;
		Элементы.СтраницаТабличныйДокумент.Видимость = Ложь;
		
		Если ТипЗнч(ДанныеЭД) = Тип("Строка") Тогда
			АдресФайлаВХранилище = ДанныеЭД;
		Иначе
			Отказ = Истина;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьОбработкуОповещенияНаСервере()
	
	ЗначениеВРеквизитФормы(Объект.Ссылка.ПолучитьОбъект(), "Объект");
	ЗаполнитьТаблицуЭЦП();
	ОбновитьСтатусЭД();
	ПерезаполнитьКомментарии();
	ИзменитьВидимостьДоступность();
	
КонецПроцедуры

&НаСервере
Процедура ПерепривязатьЭлектронныйДокумент(ВыбранноеЗначение)
	
	ЭлектронныйДокумент = РеквизитФормыВЗначение("Объект");
	СтарыйВладелец = ЭлектронныйДокумент.ВладелецФайла;
	ЭлектронныйДокумент.ВладелецФайла = ВыбранноеЗначение;
	Если Не ЗначениеЗаполнено(ЭлектронныйДокумент.Автор) Тогда
		ЭлектронныйДокумент.Автор = Пользователи.АвторизованныйПользователь();
	КонецЕсли;
	ЭлектронныйДокумент.Записать();
	
	ОбновитьСостояниеЭДВладельцев(ЭлектронныйДокумент.Ссылка, СтарыйВладелец, ВыбранноеЗначение);
	ЗначениеВРеквизитФормы(ЭлектронныйДокумент, "Объект");
	
	ТекстДокументИБ = Строка(Объект.ВладелецФайла.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСостояниеЭДВладельцев(ЭД, СтарыйВладелец, НовыйВладелец)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СостоянияЭД.СсылкаНаОбъект
	|ИЗ
	|	РегистрСведений.СостоянияЭД КАК СостоянияЭД
	|ГДЕ
	|	СостоянияЭД.ЭлектронныйДокумент = &ЭлектронныйДокумент
	|	И СостоянияЭД.СсылкаНаОбъект = &СсылкаНаСтарыйДокумент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	СостоянияЭД.СсылкаНаОбъект
	|ИЗ
	|	РегистрСведений.СостоянияЭД КАК СостоянияЭД
	|ГДЕ
	|	(НЕ СостоянияЭД.ЭлектронныйДокумент = ЗНАЧЕНИЕ(Справочник.ЭДПрисоединенныеФайлы.ПустаяСсылка))
	|	И СостоянияЭД.СсылкаНаОбъект = &СсылкаНаНовыйДокумент";
	
	Запрос.УстановитьПараметр("ЭлектронныйДокумент", ЭД);
	Запрос.УстановитьПараметр("СсылкаНаСтарыйДокумент", СтарыйВладелец);
	Запрос.УстановитьПараметр("СсылкаНаНовыйДокумент", НовыйВладелец);
	
	Выборка = Запрос.ВыполнитьПакет();
	
	ЭлектронныеДокументыСлужебныйВызовСервера.УстановитьНовуюВерсиюЭД(СтарыйВладелец, Неопределено);
	
	Результат2 = Выборка[1].Выбрать();
	Если НЕ Результат2.Следующий() Тогда
		ЭлектронныеДокументыСлужебныйВызовСервера.УстановитьНовуюВерсиюЭД(НовыйВладелец, ЭД);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСтатус(КартаСтатусовЭД, Статус, Значение = Ложь)
	
	НовСтрока = КартаСтатусовЭД.Добавить();
	НовСтрока.Статус = Статус;
	НовСтрока.Пройден = Значение;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКартуСтатусовЭД(КартаСтатусовЭД, ЭД)
	
	ПараметрыЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЭД.Ссылка,
		"ВидЭД, НаправлениеЭД, ВерсияРегламентаЭДО, Организация, Контрагент, СоглашениеЭД, ПрофильНастроекЭДО, ПодписанЭЦП");
	
	НастройкиСтатусов = Новый ТаблицаЗначений;
	НастройкиСтатусов.Колонки.Добавить("СпособОбмена");
	НастройкиСтатусов.Колонки.Добавить("Направление");
	НастройкиСтатусов.Колонки.Добавить("ВидЭД");
	НастройкиСтатусов.Колонки.Добавить("ИспользоватьПодпись");
	НастройкиСтатусов.Колонки.Добавить("ИспользоватьКвитанции");
	НастройкиСтатусов.Колонки.Добавить("ИспользуетсяНесколькоПодписей");
	НастройкиСтатусов.Колонки.Добавить("ВерсияРегламентаЭДО");
	НастройкиСтатусов.Колонки.Добавить("ПрограммаБанка");
	НастройкиСтатусов.Колонки.Добавить("ВерсияФорматаПакета");
	
	ИспользуетсяЭЦП = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьЗначениеФункциональнойОпции(
															"ИспользоватьЭлектронныеЦифровыеПодписи");
	
	Если ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ИзвещениеОПолучении
		ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.Подтверждение
		ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ПлатежноеПоручение
		ИЛИ ((ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель
			ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец
			ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.АктИсполнитель
			ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.АктЗаказчик
			ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель
			ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель)
			И ПараметрыЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий)
		ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ПредложениеОбАннулировании
		ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.УведомлениеОбУточнении Тогда
		
		РеквизитыСоглашения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПараметрыЭД.СоглашениеЭД,
			"СпособОбменаЭД, ПрограммаБанка, ИспользуетсяКриптография");
		РеквизитыПрофиляНастроекЭДО = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПараметрыЭД.ПрофильНастроекЭДО,
			"СпособОбменаЭД");
		
		НоваяСтрока = НастройкиСтатусов.Добавить();
		Если РеквизитыСоглашения.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезВебРесурсБанка Тогда
			НоваяСтрока.СпособОбмена        = РеквизитыСоглашения.СпособОбменаЭД;
		Иначе
			НоваяСтрока.СпособОбмена        = РеквизитыПрофиляНастроекЭДО.СпособОбменаЭД;
		КонецЕсли;
		НоваяСтрока.Направление         = ПараметрыЭД.НаправлениеЭД;
		НоваяСтрока.ВидЭД               = ПараметрыЭД.ВидЭД;
		НоваяСтрока.ИспользоватьПодпись = ИспользуетсяЭЦП
				ИЛИ ?(РеквизитыСоглашения.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезВебРесурсБанка,
				      РеквизитыСоглашения.ИспользуетсяКриптография,
				      Ложь);
		НоваяСтрока.ИспользоватьКвитанции = Ложь;
		НоваяСтрока.ИспользуетсяНесколькоПодписей = ПараметрыЭД.СоглашениеЭД.СертификатыПодписейОрганизации.Количество() > 1;
		НоваяСтрока.ВерсияРегламентаЭДО   = ПараметрыЭД.ВерсияРегламентаЭДО;
		НоваяСтрока.ПрограммаБанка        = РеквизитыСоглашения.ПрограммаБанка;
	Иначе
		
		Если ПараметрыЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
			
			РеквизитыСоглашения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПараметрыЭД.СоглашениеЭД, "ПрограммаБанка");
			СпособОбмена = СпособОбменаЭД(ЭД, ПараметрыЭД.СоглашениеЭД);

			НоваяСтрока = НастройкиСтатусов.Добавить();
			НоваяСтрока.СпособОбмена        = СпособОбмена;
			НоваяСтрока.Направление         = ПараметрыЭД.НаправлениеЭД;
			НоваяСтрока.ВидЭД               = ПараметрыЭД.ВидЭД;
			НоваяСтрока.ИспользоватьПодпись = ТребуетсяПодпись;
			
			ВерсияПакетаЭД = ЭлектронныеДокументыСлужебный.ВерсияПакетаЭД(ЭД);
			НоваяСтрока.ВерсияФорматаПакета = ВерсияПакетаЭД;
			
			Если ВерсияПакетаЭД = Перечисления.ВерсииФорматаПакетаЭД.Версия30 Тогда
				ИспользоватьКвитанции = Ложь;
			Иначе
				ИспользоватьКвитанции = Истина;
			КонецЕсли;
			НоваяСтрока.ИспользоватьКвитанции = ИспользоватьКвитанции;
			
			НоваяСтрока.ИспользуетсяНесколькоПодписей = ПараметрыЭД.СоглашениеЭД.СертификатыПодписейОрганизации.Количество() > 1;
			НоваяСтрока.ВерсияРегламентаЭДО   = ПараметрыЭД.ВерсияРегламентаЭДО;
			НоваяСтрока.ПрограммаБанка        = РеквизитыСоглашения.ПрограммаБанка;
			
		Иначе
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("ВидЭД",           ПараметрыЭД.ВидЭД);
			Запрос.УстановитьПараметр("НаправлениеЭД",   ПараметрыЭД.НаправлениеЭД);
			Запрос.УстановитьПараметр("Контрагент",      ПараметрыЭД.Контрагент);
			Запрос.УстановитьПараметр("Организация",     ПараметрыЭД.Организация);
			Запрос.УстановитьПараметр("ИспользуетсяЭЦП", ИспользуетсяЭЦП);
			Запрос.Текст =
			"ВЫБРАТЬ
			|	ВЫБОР
			|		КОГДА &ИспользуетсяЭЦП
			|			ТОГДА Соглашение.ИспользоватьПодпись
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК ИспользоватьПодпись,
			|	Соглашение.ИспользоватьКвитанции,
			|	Соглашение.ВидЭД,
			|	Соглашение.Направление,
			|	Соглашение.СпособОбмена,
			|	Соглашение.ВерсияФорматаПакета,
			|	Соглашение.ПрограммаБанка
			|ИЗ
			|	
			|	(ВЫБРАТЬ
			|		СоглашенияОбИспользованииЭДИсходящиеДокументы.ИспользоватьЭЦП КАК ИспользоватьПодпись,
			|		Истина КАК ИспользоватьКвитанции,
			|		ВЫБОР
			|			КОГДА &НаправлениеЭД = ЗНАЧЕНИЕ(Перечисление.НаправленияЭД.Интеркампани)
			|				ТОГДА ЗНАЧЕНИЕ(Перечисление.НаправленияЭД.Интеркампани)
			|			ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.НаправленияЭД.Исходящий)
			|		КОНЕЦ КАК Направление,
			|		СоглашенияОбИспользованииЭДИсходящиеДокументы.ИсходящийДокумент КАК ВидЭД,
			|		СоглашенияОбИспользованииЭДИсходящиеДокументы.СпособОбменаЭД КАК СпособОбмена,
			|		0 КАК Приоритет,
			|		СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.ВерсияФорматаПакета КАК ВерсияФорматаПакета,
			|		СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.ПрограммаБанка КАК ПрограммаБанка
			|	ИЗ
			|		Справочник.СоглашенияОбИспользованииЭД.ИсходящиеДокументы КАК СоглашенияОбИспользованииЭДИсходящиеДокументы
			|	ГДЕ
			|		СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.Организация = &Организация
			|		И СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.Контрагент = &Контрагент
			|		И СоглашенияОбИспользованииЭДИсходящиеДокументы.ИсходящийДокумент = &ВидЭД
			|		И СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.СтатусПодключения = ЗНАЧЕНИЕ(Перечисление.СтатусыУчастниковОбменаЭД.Присоединен)
			|		И СоглашенияОбИспользованииЭДИсходящиеДокументы.Формировать
			|		И Не СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.ПометкаУдаления
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		СоглашенияОбИспользованииЭДИсходящиеДокументы.ИспользоватьЭЦП,
			|		Истина КАК ИспользоватьКвитанции,
			|		ВЫБОР
			|			КОГДА &НаправлениеЭД = ЗНАЧЕНИЕ(Перечисление.НаправленияЭД.Интеркампани)
			|				ТОГДА ЗНАЧЕНИЕ(Перечисление.НаправленияЭД.Интеркампани)
			|			ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.НаправленияЭД.Входящий)
			|		КОНЕЦ КАК Направление,
			|		&ВидЭД КАК ВидЭД,
			|		СоглашенияОбИспользованииЭДИсходящиеДокументы.СпособОбменаЭД КАК СпособОбмена,
			|		0 КАК Приоритет,
			|		NULL,
			|		NULL
			|	ИЗ
			|		Справочник.СоглашенияОбИспользованииЭД.ИсходящиеДокументы КАК СоглашенияОбИспользованииЭДИсходящиеДокументы
			|	ГДЕ
			|		СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.Организация = &Организация
			|		И СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.Контрагент = &Контрагент
			|		И СоглашенияОбИспользованииЭДИсходящиеДокументы.ИсходящийДокумент = &ВидЭД
			|		И СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.СтатусПодключения = ЗНАЧЕНИЕ(Перечисление.СтатусыУчастниковОбменаЭД.Присоединен)
			|		И СоглашенияОбИспользованииЭДИсходящиеДокументы.Формировать
			|		И Не СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.ПометкаУдаления) КАК Соглашение";
			
			Результат = Запрос.Выполнить().Выбрать();
			
			Если Результат.Следующий() Тогда
				НоваяСтрока = НастройкиСтатусов.Добавить();
				НоваяСтрока.СпособОбмена          = Результат.СпособОбмена;
				НоваяСтрока.Направление           = Результат.Направление;
				НоваяСтрока.ВидЭД                 = Результат.ВидЭД;
				НоваяСтрока.ИспользоватьПодпись   = Результат.ИспользоватьПодпись;
				НоваяСтрока.ИспользоватьКвитанции = Результат.ИспользоватьКвитанции;
				
				НоваяСтрока.ВерсияРегламентаЭДО   = ПараметрыЭД.ВерсияРегламентаЭДО;
				НоваяСтрока.ПрограммаБанка        = Результат.ПрограммаБанка;
				НоваяСтрока.ВерсияФорматаПакета   = Результат.ВерсияФорматаПакета;
				
			КонецЕсли;
			
		КонецЕсли;

	КонецЕсли;
	
	Если НастройкиСтатусов.Количество() > 0 Тогда
		УстановитьСтатусы(КартаСтатусовЭД, НастройкиСтатусов[0]);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УстановитьСтатусы(КартаСтатусовЭД, НастройкиСтатусов)
	
	СтруктураНастроек = Новый Структура("ВерсияРегламентаЭДО, ВерсияФорматаПакета, ВидЭД, ИспользоватьКвитанции, ИспользоватьПодпись, ИспользуетсяНесколькоПодписей, Направление, ПрограммаБанка, СпособОбмена");
	ЗаполнитьЗначенияСвойств(СтруктураНастроек, НастройкиСтатусов);
	
	МассивСтатусов = ЭлектронныеДокументыСлужебный.ВернутьМассивСтатусовЭД(СтруктураНастроек);
	Для Каждого Элемент Из МассивСтатусов Цикл
		ДобавитьСтатус(КартаСтатусовЭД, Элемент);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьТаблицуСтатусовЭД(ЭД)
	
	КартаСтатусовЭД = Новый ТаблицаЗначений;
	КартаСтатусовЭД.Колонки.Добавить("Статус");
	КартаСтатусовЭД.Колонки.Добавить("Пройден");
	
	Если ЭД.СтатусЭД = Перечисления.СтатусыЭД.Отклонен ИЛИ ЭД.СтатусЭД = Перечисления.СтатусыЭД.ОтклоненПолучателем Тогда
		
		Если ЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
		
			Стр = КартаСтатусовЭД.Добавить();
			Стр.Статус = Перечисления.СтатусыЭД.Получен;
			
			Стр = КартаСтатусовЭД.Добавить();
			Стр.Статус = Перечисления.СтатусыЭД.Отклонен;
		Иначе
			
			Стр = КартаСтатусовЭД.Добавить();
			Стр.Статус = Перечисления.СтатусыЭД.Сформирован;
			
			Стр = КартаСтатусовЭД.Добавить();
			Стр.Статус = ЭД.СтатусЭД;
		КонецЕсли;
		
		КартаСтатусовЭД.ЗаполнитьЗначения(Истина, "Пройден");
		
	Иначе
		
		ЗаполнитьКартуСтатусовЭД(КартаСтатусовЭД, ЭД);
		ПризнакПройден = Истина;
		Для Каждого ТекСтрока Из КартаСтатусовЭД Цикл 
			ТекСтрока.Пройден = ПризнакПройден;
			Если ТекСтрока.Статус = Перечисления.СтатусыЭД.Утвержден
				И (ЭД.СтатусЭД = Перечисления.СтатусыЭД.Отклонен ИЛИ ЭД.СтатусЭД = Перечисления.СтатусыЭД.ОтклоненПолучателем) Тогда
				ТекСтрока.Статус = Перечисления.СтатусыЭД.Отклонен;
				Прервать;
			КонецЕсли;
			Если ЭД.СтатусЭД = ТекСтрока.Статус Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат КартаСтатусовЭД;
	
КонецФункции

&НаКлиенте
Процедура ПоказатьСертификат(НомерСтроки, Отпечаток)
	
	АдресДанныхСертификата = АдресДанныхСертификата(НомерСтроки);
	СтруктураСертификата = ЭлектронныеДокументыСлужебныйВызовСервера.СвойстваСертификата(АдресДанныхСертификата);
	
	Если СтруктураСертификата <> Неопределено Тогда
		
		ПараметрыФормы = Новый Структура("СтруктураСертификата, Отпечаток, АдресСертификата",
			СтруктураСертификата, Отпечаток, АдресДанныхСертификата);
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("СтруктураСертификата", СтруктураСертификата);
		ПараметрыФормы.Вставить("Отпечаток",            Отпечаток);
		ПараметрыФормы.Вставить("АдресСертификата",     АдресДанныхСертификата);
			
		ОткрытьФорму("ОбщаяФорма.СертификатЭЦП", ПараметрыФормы);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция АдресДанныхСертификата(НомерСтроки)
	
	ДвоичныеДанныеСертификата = ЭЦП[НомерСтроки-1].Сертификат.Получить();
	СсылкаНаХранилищеДанныхСертификата = ПоместитьВоВременноеХранилище(ДвоичныеДанныеСертификата, УникальныйИдентификатор);
	
	Возврат СсылкаНаХранилищеДанныхСертификата;
	
КонецФункции

&НаСервере
Процедура ДобавитьСертификатПодписиВСоглашение(Отпечаток, СертификатДобавлен)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка.СоглашениеЭД) Тогда
		Возврат ;
	КонецЕсли;
	
	ОбъектЭД = РеквизитФормыВЗначение("Объект");
	НайденнаяСтрока = ОбъектЭД.ЭлектронныеЦифровыеПодписи.Найти(Отпечаток, "Отпечаток");
	Если НЕ НайденнаяСтрока = Неопределено Тогда
		СоглашениеОбъект = Объект.Ссылка.СоглашениеЭД.ПолучитьОбъект();
		
		НоваяСтрока = СоглашениеОбъект.СертификатыПодписейКонтрагента.Добавить();
		НоваяСтрока.Сертификат = НайденнаяСтрока.Сертификат;
		НоваяСтрока.Отпечаток  = Отпечаток;
		СоглашениеОбъект.Записать();
		
		СертификатДобавлен = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСертификатВДоверенные(ДанныеПодписи)
	
	Если ДанныеПодписи <> Неопределено И ДанныеПодписи.ОтсутствуетВСписке Тогда 
		Текст = НСтр("ru = 'Добавить сертификат %1 в список ожидаемых сертификатов контрагента?'");
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, ДанныеПодписи.КомуВыданСертификат);
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			ПоказатьСертификат(Элементы.ЭЦП.ТекущиеДанные.НомерСтроки,Элементы.ЭЦП.ТекущиеДанные.Отпечаток);
			Возврат;
		КонецЕсли;
		
		// Добавим сертификат в Соглашение.
		СертификатДобавлен = Ложь;
		ДобавитьСертификатПодписиВСоглашение(ДанныеПодписи.Отпечаток, СертификатДобавлен);
		Если НЕ СертификатДобавлен Тогда 
			ТекстСообщения = НСтр("ru = 'Ошибка добавления сертификата подписи в список ожидаемых сертификатов!'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Иначе
			ЗаполнитьТаблицуЭЦП();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьКоличествоНеустановленныхПодписей()
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ЭДПрисоединенныеФайлыЭлектронныеЦифровыеПодписи.Отпечаток
	               |ПОМЕСТИТЬ УстановленныеПодписи
	               |ИЗ
	               |	Справочник.ЭДПрисоединенныеФайлы.ЭлектронныеЦифровыеПодписи КАК ЭДПрисоединенныеФайлыЭлектронныеЦифровыеПодписи
	               |ГДЕ
	               |	ЭДПрисоединенныеФайлыЭлектронныеЦифровыеПодписи.Ссылка = &СсылкаНаЭД
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СоглашенияОбИспользованииЭДСертификатыПодписейОрганизации.Сертификат) КАК КоличествоНеобходимыхПодписей
	               |ИЗ
	               |	Справочник.СоглашенияОбИспользованииЭД.СертификатыПодписейОрганизации КАК СоглашенияОбИспользованииЭДСертификатыПодписейОрганизации
	               |ГДЕ
	               |	НЕ СоглашенияОбИспользованииЭДСертификатыПодписейОрганизации.Сертификат.Отпечаток В
	               |				(ВЫБРАТЬ
	               |					УстановленныеПодписи.Отпечаток
	               |				ИЗ
	               |					УстановленныеПодписи КАК УстановленныеПодписи)
	               |	И СоглашенияОбИспользованииЭДСертификатыПодписейОрганизации.Ссылка = &СоглашениеЭД";
	Запрос.УстановитьПараметр("СсылкаНаЭД", Объект.Ссылка);
	Запрос.УстановитьПараметр("СоглашениеЭД", Объект.Ссылка.СоглашениеЭД);
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	РезультатЗапроса.Следующий();
	
	Возврат РезультатЗапроса.КоличествоНеобходимыхПодписей;
	
КонецФункции

Процедура СкрытьОбластьТабличногоДокумента(ТабличныйДокумент, ИменаОбластей, Знач ТипСмещения = Неопределено) Экспорт
	
	Если ТипСмещения = Неопределено Тогда
		ТипСмещения = ТипСмещенияТабличногоДокумента.ПоГоризонтали;
	КонецЕсли;
	
	Если ТипЗнч(ИменаОбластей) <> Тип("Массив") Тогда
		Области = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(ИменаОбластей, ",");
	КонецЕсли;
	
	Для каждого ИмяОбласти Из Области Цикл
		
		ЕстьОбластьДД = ТабличныйДокумент.Области.Найти(СокрЛП(ИмяОбласти));
		
		Если ЕстьОбластьДД <> Неопределено Тогда
			ОбластьШапки = ТабличныйДокумент.Области.Найти("Шапка");
			ОбластьТаблицы = ТабличныйДокумент.Область(ИмяОбласти);
			
			Верх = ?(ОбластьТаблицы.Лево = 0 И ОбластьТаблицы.Право = 0 ИЛИ ОбластьШапки = Неопределено,
				ОбластьТаблицы.Верх, ОбластьШапки.Низ + 1);
				
			Если ТипСмещения = ТипСмещенияТабличногоДокумента.ПоГоризонтали Тогда
				УдаляемаяОбласть = ТабличныйДокумент.Область(Верх, ОбластьТаблицы.Лево,
					ТабличныйДокумент.ВысотаТаблицы, ОбластьТаблицы.Право);
			ИначеЕсли ТипСмещения = ТипСмещенияТабличногоДокумента.БезСмещения Тогда 
				УдаляемаяОбласть = ТабличныйДокумент.Область(Верх, ОбластьТаблицы.Лево,
					ОбластьТаблицы.Низ, ОбластьТаблицы.Право);
				Если ИмяОбласти = "ИдентификаторДокумента" Тогда
					ТипСмещения = ТипСмещенияТабличногоДокумента.ПоГоризонтали;	
				КонецЕсли;
			Иначе
				Низ = ТабличныйДокумент.ВысотаТаблицы;
				УдаляемаяОбласть = ТабличныйДокумент.Область(Верх, , Низ,);
			КонецЕсли; 
				
			ТабличныйДокумент.УдалитьОбласть(УдаляемаяОбласть, ТипСмещения);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьВидимостьДополнительнойИнформации()
	
	ИнициализацияДанныхНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ОпределитьНаличиеДопДанныхСкрытьФлаг()
	
	СсылкаНаЭД = Объект.Ссылка;
	
	Если СсылкаНаЭД.ВидЭД = Перечисления.ВидыЭД.АктЗаказчик 
		ИЛИ СсылкаНаЭД.ВидЭД = Перечисления.ВидыЭД.АктИсполнитель
		ИЛИ СсылкаНаЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель
		ИЛИ СсылкаНаЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец
		ИЛИ СсылкаНаЭД.ВидЭД = Перечисления.ВидыЭД.СчетФактура
		ИЛИ СсылкаНаЭД.ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура
		ИЛИ СсылкаНаЭД.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель
		ИЛИ СсылкаНаЭД.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель
		ИЛИ СсылкаНаЭД.ВидЭД = Перечисления.ВидыЭД.АктНаПередачуПрав
		
		ИЛИ СсылкаНаЭД.ВидЭД = Перечисления.ВидыЭД.ЗаказТовара
		ИЛИ СсылкаНаЭД.ВидЭД = Перечисления.ВидыЭД.ОтветНаЗаказ
		ИЛИ СсылкаНаЭД.ВидЭД = Перечисления.ВидыЭД.СчетНаОплату
		ИЛИ СсылкаНаЭД.ВидЭД = Перечисления.ВидыЭД.ПрайсЛист
		ИЛИ СсылкаНаЭД.ВидЭД = Перечисления.ВидыЭД.КаталогТоваров
		ИЛИ СсылкаНаЭД.ВидЭД = Перечисления.ВидыЭД.ОтчетОПродажахКомиссионногоТовара
		ИЛИ СсылкаНаЭД.ВидЭД = Перечисления.ВидыЭД.ОтчетОСписанииКомиссионногоТовара
		
		Тогда
		
		ЕстьДопДанные = Истина;
	Иначе
		
		ЕстьДопДанные = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьБанковскиеДокументыСбербанка(ЭД)
	
	КоличествоВыгруженныхДокументов = 0;
	
	МассивФайловСбербанка = МассивФайловСбербанка(ЭД);
	
	Для Каждого Элемент Из МассивФайловСбербанка Цикл
		ДанныеФайлаДляСохранения = Новый Структура;
		ДанныеФайлаДляСохранения.Вставить("Расширение", "");
		ДанныеФайлаДляСохранения.Вставить("ПолноеНаименование", Элемент.ИмяФайла);
		ДанныеФайлаДляСохранения.Вставить("АдресХранилища", Элемент.СсылкаНаФайл);
		
		ЭлектронныеДокументыКлиент.СохранитьКак(ДанныеФайлаДляСохранения);
		КоличествоВыгруженныхДокументов = КоличествоВыгруженныхДокументов + 1;
	КонецЦикла;
	
	ТекстОповещения = Нстр ("ru = 'Выгружено файлов: (" + КоличествоВыгруженныхДокументов + ")'");
	ПоказатьОповещениеПользователя(ТекстОповещения);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДанныеСлужебногоЭДБанка(Знач ЭД, Знач УникальныйИдентификатор)

	ДанныеФайла = Неопределено;
	СлужебныйЭДБанка = ЭлектронныеДокументыСлужебный.СлужебныйЭДБанка(ЭД);
	Если ЗначениеЗаполнено(СлужебныйЭДБанка) Тогда
		ДанныеФайла = ЭлектронныеДокументыСлужебный.ПолучитьДанныеФайла(СлужебныйЭДБанка, УникальныйИдентификатор);
	КонецЕсли;
	Возврат ДанныеФайла;
	
КонецФункции

&НаСервере
Функция СпособОбменаЭД(ЭД, СоглашениеЭД)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СоглашенияОбИспользованииЭДИсходящиеДокументы.СпособОбменаЭД КАК СпособОбменаЭД
	|ИЗ
	|	Справочник.СоглашенияОбИспользованииЭД.ИсходящиеДокументы КАК СоглашенияОбИспользованииЭДИсходящиеДокументы
	|ГДЕ
	|	СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка = &Ссылка
	|	И СоглашенияОбИспользованииЭДИсходящиеДокументы.ИсходящийДокумент = &ИсходящийДокумент";
	
	Запрос.УстановитьПараметр("Ссылка", СоглашениеЭД);
	Запрос.УстановитьПараметр("ИсходящийДокумент", ЭД.ВидЭД);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.СпособОбменаЭД;
	
КонецФункции

&НаСервере
Функция ЭДОАннулированИлиВПроцессе()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК Аннулирован
	|ИЗ
	|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЭДПрисоединенныеФайлы КАК ЭДВладелецЭД
	|		ПО ЭДПрисоединенныеФайлы.ЭлектронныйДокументВладелец = ЭДВладелецЭД.Ссылка
	|ГДЕ
	|	ЭДПрисоединенныеФайлы.Ссылка = &ЭД
	|	И ВЫБОР
	|			КОГДА ЭДВладелецЭД.Ссылка ЕСТЬ NULL 
	|				ТОГДА ЭДПрисоединенныеФайлы.СтатусЭД В (&СписокСтатусовСАннулированием)
	|			ИНАЧЕ ЭДВладелецЭД.СтатусЭД В (&СписокСтатусовСАннулированием)
	|		КОНЕЦ";
		
	МассивСостояний = Новый Массив;
	МассивСостояний.Добавить(Перечисления.СтатусыЭД.Аннулирован);
	МассивСостояний.Добавить(Перечисления.СтатусыЭД.ОтправленоПредложениеОбАннулировании);
	МассивСостояний.Добавить(Перечисления.СтатусыЭД.СформированоПредложениеОбАннулировании);
	МассивСостояний.Добавить(Перечисления.СтатусыЭД.ПолученоПредложениеОбАннулировании);
	Запрос.УстановитьПараметр("СписокСтатусовСАннулированием", МассивСостояний);
	Запрос.УстановитьПараметр("ЭД", Объект.Ссылка);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		ВозвращаемоеЗначение = Ложь;
	Иначе
		ВозвращаемоеЗначение = Истина;
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьПредложениеОбАннулировании(ОтклонитьАннулирование)
	
	Если ЗначениеЗаполнено(Объект.ЭлектронныйДокументВладелец) Тогда
		СсылкаНаЭД = Объект.ЭлектронныйДокументВладелец;
	Иначе
		СсылкаНаЭД = Объект.Ссылка;
	КонецЕсли;
	ЭлектронныеДокументыСлужебныйКлиент.ОбработатьПредложениеОбАннулировании(СсылкаНаЭД, ОтклонитьАннулирование);
	Если ЗначениеЗаполнено(СсылкаНаМассивСертификатов) Тогда
		ИзменитьВидимостьДоступность();
	Иначе
		УстановитьВидимостьДоступностьНаКлиенте();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтклонитьАннулироватьЭД(Отклонить = Ложь)
	
	Если ЗначениеЗаполнено(Объект.ЭлектронныйДокументВладелец) Тогда
		СсылкаНаЭД = Объект.ЭлектронныйДокументВладелец;
	Иначе
		СсылкаНаЭД = Объект.Ссылка;
	КонецЕсли;
	ПараметрыЭД = Новый Структура("Организация, Отклонить", Объект.Организация, Отклонить);
	Если ЭлектронныеДокументыСлужебныйКлиент.ОбработатьОтклонениеАннулированиеЭД(СсылкаНаЭД, ПараметрыЭД) Тогда
		Если ЗначениеЗаполнено(СсылкаНаМассивСертификатов) Тогда
			ИзменитьВидимостьДоступность();
		Иначе
			УстановитьВидимостьДоступностьНаКлиенте();
		КонецЕсли;
		Оповестить("ОбновитьСостояниеЭД");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗавершитьЭДОСервере(Результат)
	
	ВладелецЭД = Объект.ВладелецФайла;
	ИзменяемыеДокументы = Новый Массив;
	ИзменяемыеДокументы.Добавить(ВладелецЭД);
	
	ПараметрыЭД = Новый Структура;
	
	Если Объект.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
		СтатусЭД = Перечисления.СтатусыЭД.Утвержден;
	Иначе
		СтатусЭД = Перечисления.СтатусыЭД.Доставлен;
	КонецЕсли;
	
		
	ПараметрыЭД.Вставить("СтатусЭД", СтатусЭД);
	ПараметрыЭД.Вставить("Описание", Результат);
	ЭлектронныеДокументыСлужебный.ИзменитьПоСсылкеПрисоединенныйФайл(Объект.Ссылка, ПараметрыЭД, Ложь);
	
	НовоеСостояние = Перечисления.СостоянияВерсийЭД.ОбменЗавершен;
	ЭлектронныеДокументыСлужебный.ИзменитьСостояниеЭД(ИзменяемыеДокументы, НовоеСостояние);
	
КонецПроцедуры

&НаСервере
функция ЕстьОтправленноеУведомление()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	""1"" КАК Поле1
	|ИЗ
	|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	|ГДЕ
	|	ЭДПрисоединенныеФайлы.ВидЭД = &ВидЭД
	|	И ЭДПрисоединенныеФайлы.ЭлектронныйДокументВладелец = &ЭлектронныйДокументВладелец
	|	И ЭДПрисоединенныеФайлы.СтатусЭД = &СтатусЭД";
	Запрос.УстановитьПараметр("ЭлектронныйДокументВладелец", Объект.Ссылка);
	Запрос.УстановитьПараметр("ВидЭД", Перечисления.ВидыЭД.УведомлениеОбУточнении);
	Запрос.УстановитьПараметр("СтатусЭД", Перечисления.СтатусыЭД.Отправлен);
	
	Результат = Запрос.Выполнить();
	ЕстьУведомление = Истина;
	Если Результат.Пустой() Тогда
		ЕстьУведомление = Ложь;
	КонецЕсли;
	
	Возврат ЕстьУведомление;
	
КонецФункции

&НаСервере
Функция ВторойТитулПодписан()
	
	Результат = Ложь;
	ФайлВторогоТитула = ЭлектронныеДокументыСлужебный.ВторойТитулДокумента(Объект.Ссылка);
	Если ФайлВторогоТитула = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	Статус = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ФайлВторогоТитула, "СтатусЭД");
	Если Статус = Перечисления.СтатусыЭД.Подписан
		Или Статус = Перечисления.СтатусыЭД.ПодготовленКОтправке
		Или Статус = Перечисления.СтатусыЭД.Отправлен
		Или Статус = Перечисления.СтатусыЭД.ПереданОператору
		Или Статус = Перечисления.СтатусыЭД.Доставлен Тогда
		Результат = Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ВторойТитулДокумента(ПервыйТитул)
	
	Возврат ЭлектронныеДокументыСлужебный.ВторойТитулДокумента(ПервыйТитул);
	
КонецФункции

&НаСервере
Функция ОбменЧерезОператора()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СоглашенияОбИспользованииЭДИсходящиеДокументы.СпособОбменаЭД КАК СпособОбменаЭД
	|ИЗ
	|	Справочник.СоглашенияОбИспользованииЭД.ИсходящиеДокументы КАК СоглашенияОбИспользованииЭДИсходящиеДокументы
	|ГДЕ
	|	СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка = &Ссылка
	|	И СоглашенияОбИспользованииЭДИсходящиеДокументы.ИсходящийДокумент = &ИсходящийДокумент";
	Запрос.УстановитьПараметр("Ссылка", Объект.СоглашениеЭД);
	Запрос.УстановитьПараметр("ИсходящийДокумент", Объект.ВидЭД);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	Если Не ЭлектронныеДокументыСлужебныйВызовСервера.ЭтоПрямойОбмен(Выборка.СпособОбменаЭД) Тогда
		Возврат Истина
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
	
КонецФункции

&НаСервере
Функция СертификатыВФорматеX508()
	
	Если НЕ ПрограммаБанка = Перечисления.ПрограммыБанка.ОбменЧерезДопОбработку
		ИЛИ НЕ ЭЦП.Количество() Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Процедура ТабличныйДокументОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СтрокаЭП = ЭЦП.Получить(Расшифровка - 1);
	
	ДобавитьСертификатВДоверенные(СтрокаЭП);
	
	Если СтрокаЭП <> Неопределено И НЕ СтрокаЭП.ОтсутствуетВСписке
			И НЕ ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.ОбменЧерезДопОбработку") Тогда
		ПоказатьСертификат(СтрокаЭП.НомерСтроки, СтрокаЭП.Отпечаток);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииНастроекОтображенияДополнительнойИнформации()
	
	Элементы.КомандаОтображатьДополнительнуюИнформацию.Пометка = Не ОтключитьВыводДопДанных;
	Элементы.КомандаОтображатьКопияВерна.Пометка = Не ОтключитьВыводКопияВерна;
	
	ОбновитьВидимостьДополнительнойИнформации();
	
КонецПроцедуры

