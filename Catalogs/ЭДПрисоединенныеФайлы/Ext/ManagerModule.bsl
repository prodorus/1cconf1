#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр)
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПечататьКарточкуЭД = УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "КарточкаЭД");
	Если ПечататьКарточкуЭД Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"КарточкаЭД",
			НСтр("ru = 'Карточка электронного документа'"),
			ПечатьКарточкиЭД(МассивОбъектов, ОбъектыПечати, "КарточкаЭД"),
			,
			"Справочник.ЭДПрисоединенныеФайлы.ПФ_MXL_КарточкаЭД");
	КонецЕсли;
	
	ПечататьЭД = УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ЭД");
	Если ПечататьЭД Тогда
		ТабДок = ПечатьЭД(МассивОбъектов, ОбъектыПечати, ПараметрыПечати);
		СинонимМакета = НСтр("ru = 'Электронный документ'");
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ЭД", СинонимМакета, ТабДок);
		Если ТипЗнч(ТабДок) = Тип("Строка") Тогда
			УдалитьФайлы(ТабДок);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Функция ПечатьЭД(СсылкаНаЭД, ОбъектыПечати, ПараметрыПечати)
	
	ТабДок = ПечатнаяФормаЭД(СсылкаНаЭД,,, ПараметрыПечати);
	
	Возврат ТабДок;
	
КонецФункции

Функция ПечатьКарточкиЭД(МассивОбъектов, ОбъектыПечати, ИмяМакета ="КарточкаЭД")
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЭДПрисоединенныеФайлы.Ссылка КАК Ссылка,
	|	ЭДПрисоединенныеФайлы.НаименованиеФайла КАК НаименованиеФайла,
	|	ЭДПрисоединенныеФайлы.ОтправительЭД КАК Отправитель,
	|	ЭДПрисоединенныеФайлы.ПолучательЭД КАК Получатель,
	|	ЭДПрисоединенныеФайлы.НомерЭД КАК Идентификатор,
	|	ЭДПрисоединенныеФайлы.ДополнительнаяИнформация КАК СопроводительнаяЗаписка,
	|	ЭДПрисоединенныеФайлы.Расширение КАК Расширение,
	|	ЭДПрисоединенныеФайлы.НаправлениеЭД КАК НаправлениеЭД,
	|	ЭДПрисоединенныеФайлы.ВладелецФайла КАК ВладелецФайла,
	|	ЭДПрисоединенныеФайлы.ТипЭлементаВерсииЭД КАК ТипЭлементаВерсииЭД
	|ПОМЕСТИТЬ втЭД
	|ИЗ
	|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	|ГДЕ
	|	ЭДПрисоединенныеФайлы.Ссылка В(&МассивОбъектов)
	|	И НЕ ЭДПрисоединенныеФайлы.ТипЭлементаВерсииЭД В (&СлужебныеЭД)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЭлектронныйДокументВходящий.Ссылка КАК Ссылка,
	|	ЭлектронныйДокументВходящий.ВидЭД КАК ВидЭД,
	|	ПРЕДСТАВЛЕНИЕ(ЭлектронныйДокументВходящий.ВидЭД) КАК ВидЭДПредставление,
	|	ПРЕДСТАВЛЕНИЕ(ЭлектронныйДокументВходящий.ТипДокумента) КАК ТипДокументаПредставление,
	|	ЭлектронныйДокументВходящий.Организация КАК Организация,
	|	ЭлектронныйДокументВходящий.Контрагент КАК Контрагент,
	|	ЭлектронныйДокументВходящий.ПрофильНастроекЭДО КАК ПрофильНастроекЭДО,
	|	ЭлектронныйДокументВходящий.Дата КАК Дата,
	|	ЭлектронныйДокументВходящий.Номер КАК Номер,
	|	ЭлектронныйДокументВходящий.ТребуетсяПодтверждение КАК ТребуетсяПодтверждение
	|ПОМЕСТИТЬ втДокументы
	|ИЗ
	|	Документ.ЭлектронныйДокументВходящий КАК ЭлектронныйДокументВходящий
	|ГДЕ
	|	ЭлектронныйДокументВходящий.Ссылка В
	|			(ВЫБРАТЬ
	|				втЭД.ВладелецФайла
	|			ИЗ
	|				втЭД КАК втЭД)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЭлектронныйДокументИсходящий.Ссылка,
	|	ЭлектронныйДокументИсходящий.ВидЭД,
	|	ПРЕДСТАВЛЕНИЕ(ЭлектронныйДокументИсходящий.ВидЭД),
	|	ПРЕДСТАВЛЕНИЕ(ЭлектронныйДокументИсходящий.ТипДокумента),
	|	ЭлектронныйДокументИсходящий.Организация,
	|	ЭлектронныйДокументИсходящий.Контрагент,
	|	ЭлектронныйДокументИсходящий.ПрофильНастроекЭДО,
	|	ЭлектронныйДокументИсходящий.Дата,
	|	ЭлектронныйДокументИсходящий.Номер,
	|	ЭлектронныйДокументИсходящий.ТребуетсяПодтверждение
	|ИЗ
	|	Документ.ЭлектронныйДокументИсходящий КАК ЭлектронныйДокументИсходящий
	|ГДЕ
	|	ЭлектронныйДокументИсходящий.Ссылка В
	|			(ВЫБРАТЬ
	|				втЭД.ВладелецФайла
	|			ИЗ
	|				втЭД КАК втЭД)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДокументы.ВидЭД КАК ВидЭДСсылка,
	|	втДокументы.ВидЭДПредставление КАК ВидДокумента,
	|	втДокументы.ТипДокументаПредставление КАК ТипДокумента,
	|	втДокументы.Контрагент КАК Контрагент,
	|	втДокументы.Организация КАК Организация,
	|	втДокументы.ПрофильНастроекЭДО КАК ПрофильНастроекЭДО,
	|	втЭД.Ссылка КАК Ссылка,
	|	втЭД.НаименованиеФайла КАК НаименованиеФайла,
	|	втЭД.Отправитель КАК Отправитель,
	|	втЭД.Получатель КАК Получатель,
	|	втДокументы.Дата КАК ДатаЭД,
	|	втДокументы.Номер КАК НомерЭД,
	|	втЭД.СопроводительнаяЗаписка КАК СопроводительнаяЗаписка,
	|	втЭД.Расширение КАК Расширение,
	|	втЭД.НаправлениеЭД КАК НаправлениеЭД,
	|	втЭД.ВладелецФайла КАК ВладелецФайла,
	|	втЭД.Идентификатор КАК Идентификатор,
	|	втДокументы.ТребуетсяПодтверждение КАК ТребуетсяПодтверждение,
	|	втЭД.ТипЭлементаВерсииЭД КАК ТипЭлементаВерсииЭД
	|ПОМЕСТИТЬ втЭДО
	|ИЗ
	|	втЭД КАК втЭД
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втДокументы КАК втДокументы
	|		ПО втЭД.ВладелецФайла = втДокументы.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЭДПрисоединенныеФайлыЭлектронныеЦифровыеПодписи.Отпечаток,
	|	ЭДПрисоединенныеФайлыЭлектронныеЦифровыеПодписи.ПодписьВерна КАК ПодписьВерна,
	|	ЭДПрисоединенныеФайлыЭлектронныеЦифровыеПодписи.ДатаПроверкиПодписи,
	|	ЭДПрисоединенныеФайлыЭлектронныеЦифровыеПодписи.КомуВыданСертификат,
	|	ЭДПрисоединенныеФайлыЭлектронныеЦифровыеПодписи.Ссылка,
	|	ЭДПрисоединенныеФайлыЭлектронныеЦифровыеПодписи.Сертификат
	|ПОМЕСТИТЬ ВтОтпечатки
	|ИЗ
	|	Справочник.ЭДПрисоединенныеФайлы.ЭлектронныеЦифровыеПодписи КАК ЭДПрисоединенныеФайлыЭлектронныеЦифровыеПодписи
	|ГДЕ
	|	ЭДПрисоединенныеФайлыЭлектронныеЦифровыеПодписи.Ссылка В
	|			(ВЫБРАТЬ
	|				втЭД.Ссылка
	|			ИЗ
	|				втЭД)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЭДПрисоединенныеФайлыЭлектронныеЦифровыеПодписи.Отпечаток,
	|	ЭДПрисоединенныеФайлыЭлектронныеЦифровыеПодписи.ПодписьВерна,
	|	ЭДПрисоединенныеФайлыЭлектронныеЦифровыеПодписи.ДатаПроверкиПодписи,
	|	ЭДПрисоединенныеФайлыЭлектронныеЦифровыеПодписи.КомуВыданСертификат,
	|	ЭДПрисоединенныеФайлыЭлектронныеЦифровыеПодписи.Ссылка.ЭлектронныйДокументВладелец,
	|	ЭДПрисоединенныеФайлыЭлектронныеЦифровыеПодписи.Сертификат
	|ИЗ
	|	Справочник.ЭДПрисоединенныеФайлы.ЭлектронныеЦифровыеПодписи КАК ЭДПрисоединенныеФайлыЭлектронныеЦифровыеПодписи
	|ГДЕ
	|	ЭДПрисоединенныеФайлыЭлектронныеЦифровыеПодписи.Ссылка.ЭлектронныйДокументВладелец В
	|			(ВЫБРАТЬ
	|				втЭД.Ссылка
	|			ИЗ
	|				втЭД)
	|	И ЭДПрисоединенныеФайлыЭлектронныеЦифровыеПодписи.Ссылка.ТипЭлементаВерсииЭД В(&ТитулыПокупателя)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СоглашенияОбИспользованииЭДИсходящиеДокументы.ИспользоватьЭЦП КАК ТребуетсяПодпись,
	|	СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.Организация КАК ПодписьОрганизации,
	|	СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.Контрагент КАК ПодписьКонтрагента,
	|	втЭДО.Ссылка КАК Ссылка,
	|	втЭДО.ВидЭДСсылка КАК ВидЭДСсылка,
	|	втЭДО.НаправлениеЭД КАК НаправлениеЭД,
	|	ЛОЖЬ КАК ПроизвольныйЭД,
	|	втЭДО.ТребуетсяПодтверждение КАК ТребуетсяПодтверждение
	|ИЗ
	|	втЭДО КАК втЭДО
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СоглашенияОбИспользованииЭД.ИсходящиеДокументы КАК СоглашенияОбИспользованииЭДИсходящиеДокументы
	|		ПО втЭДО.ПрофильНастроекЭДО = СоглашенияОбИспользованииЭДИсходящиеДокументы.ПрофильНастроекЭДО
	|ГДЕ
	|	СоглашенияОбИспользованииЭДИсходящиеДокументы.ИсходящийДокумент В
	|			(ВЫБРАТЬ
	|				втЭДО.ВидЭДСсылка
	|			ИЗ
	|				втЭДО)
	|	И СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.Организация В
	|			(ВЫБРАТЬ
	|				втЭДО.Организация
	|			ИЗ
	|				втЭДО)
	|	И СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.Контрагент В
	|			(ВЫБРАТЬ
	|				втЭДО.Контрагент
	|			ИЗ
	|				втЭДО)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЭДО.НаименованиеФайла КАК НаименованиеФайла,
	|	втЭДО.Отправитель КАК Отправитель,
	|	втЭДО.Получатель КАК Получатель,
	|	втЭДО.ВидДокумента КАК ВидДокумента,
	|	втЭДО.ВидЭДСсылка КАК ВидЭДСсылка,
	|	втЭДО.ТипДокумента КАК ТипДокумента,
	|	втЭДО.Идентификатор КАК Идентификатор,
	|	втЭДО.НомерЭД КАК НомерЭД,
	|	втЭДО.ДатаЭД КАК ДатаЭД,
	|	втЭДО.СопроводительнаяЗаписка КАК СопроводительнаяЗаписка,
	|	втЭДО.Расширение КАК Расширение,
	|	втЭДО.Контрагент КАК Контрагент,
	|	втЭДО.Организация КАК Организация,
	|	втЭДО.НаправлениеЭД КАК НаправлениеЭД,
	|	втЭДО.Ссылка КАК Ссылка,
	|	втЭДО.ТипЭлементаВерсииЭД КАК ТипЭлементаВерсииЭД
	|ИЗ
	|	втЭДО КАК втЭДО
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтОтпечатки.ПодписьВерна КАК ПодписьВерна,
	|	ВтОтпечатки.ДатаПроверкиПодписи КАК ДатаПроверкиПодписи,
	|	ВтОтпечатки.КомуВыданСертификат КАК КомуВыданСертификат,
	|	ВтОтпечатки.Ссылка КАК Ссылка
	|ИЗ
	|	ВтОтпечатки КАК ВтОтпечатки";
	
	Запрос.УстановитьПараметр("МассивОбъектов",   МассивОбъектов);
	Запрос.УстановитьПараметр("ТитулыПокупателя", ТипыЭлементаВерсииЭДТитулаПокупателя());
	
	СлужебныеЭД = Новый Массив;
	СлужебныеЭД.Добавить(Перечисления.ВидыЭД.ИзвещениеОПолучении);
	СлужебныеЭД.Добавить(Перечисления.ВидыЭД.УведомлениеОбУточнении);
	
	Запрос.УстановитьПараметр("СлужебныеЭД", СлужебныеЭД);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	МассивДанныхПечати = Новый Массив;
	
	ЗаполнитьДанныеПечатнойФормы(МассивРезультатов, МассивДанныхПечати);
	
	Макет = УправлениеПечатью.ПолучитьМакет("Справочник.ЭДПрисоединенныеФайлы.ПФ_MXL_КарточкаЭД");
	ТабДок = Новый ТабличныйДокумент;
	
	Для каждого ДанныеПечатнойФормы Из МассивДанныхПечати Цикл
		
		Если ТабДок.ВысотаТаблицы > 0 Тогда
			ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		НомерСтрокиНачало = ТабДок.ВысотаТаблицы + 1;
		
		ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
		ОбластьШапка.Параметры.Заполнить(ДанныеПечатнойФормы);
		ТабДок.Вывести(ОбластьШапка);
		
		Если ДанныеПечатнойФормы.Свойство("НомерЭД") Тогда
			ОбластьПроизвольныйЭД = Макет.ПолучитьОбласть("ПроизвольныйЭД");
			ОбластьПроизвольныйЭД.Параметры.Заполнить(ДанныеПечатнойФормы);
			ТабДок.Вывести(ОбластьПроизвольныйЭД);
		КонецЕсли;
		
		Если ДанныеПечатнойФормы.Свойство("СопроводительнаяЗаписка") Тогда
			ОбластьСопроводительнаяЗаписка = Макет.ПолучитьОбласть("СопроводительнаяЗаписка");
			ОбластьСопроводительнаяЗаписка.Параметры.Заполнить(ДанныеПечатнойФормы);
			ТабДок.Вывести(ОбластьСопроводительнаяЗаписка);
		КонецЕсли;
		
		Если ДанныеПечатнойФормы.Свойство("Подписи") Тогда
			
			ОбластьСопроводительнаяЗаписка = Макет.ПолучитьОбласть("ТребуемыеПодписи");
			ОбластьСопроводительнаяЗаписка.Параметры.Заполнить(ДанныеПечатнойФормы.Подписи);
			ТабДок.Вывести(ОбластьСопроводительнаяЗаписка);
			
		КонецЕсли;
		
		Если ДанныеПечатнойФормы.Свойство("Сертификаты") Тогда
			
			ОбластьСертификаты = Макет.ПолучитьОбласть("Сертификаты");
			ТабДок.Вывести(ОбластьСертификаты);
			
			ОбластьСертификатыСтрока = Макет.ПолучитьОбласть("СертификатыСтрока");
			Для Каждого ТекСтрока Из ДанныеПечатнойФормы.Сертификаты Цикл
				ОбластьСертификатыСтрока.Параметры.Заполнить(ТекСтрока);
				ТабДок.Вывести(ОбластьСертификатыСтрока);
			КонецЦикла;
			
		КонецЕсли;
		
		ОбластьПодпись = Макет.ПолучитьОбласть("Подпись");
		ОбластьПодпись.Параметры.Заполнить(ДанныеПечатнойФормы);
		ТабДок.Вывести(ОбластьПодпись);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДок, НомерСтрокиНачало, ОбъектыПечати, ДанныеПечатнойФормы.Ссылка);
		
	КонецЦикла;
	
	Возврат ТабДок;
	
КонецФункции

Процедура ЗаполнитьДанныеПечатнойФормы(МассивРезультатовЗапроса, МассивДанныхПечати)
	
	НеобходимыеПодписи = МассивРезультатовЗапроса[4].Выгрузить();
	ДанныеЭД = МассивРезультатовЗапроса[5].Выгрузить();
	СертификатыЭД = МассивРезультатовЗапроса[6].Выгрузить();
	
	МассивЭД = Новый Массив;
	
	ОбщегоНазначения.ЗаполнитьМассивУникальнымиЗначениями(МассивЭД, ДанныеЭД.ВыгрузитьКолонку("Ссылка"));
	
	Для Каждого ЭлементМассива Из МассивЭД Цикл
		
		Отбор = Новый Структура;
		Отбор.Вставить("Ссылка", ЭлементМассива);
		
		МассивСтрокЭД = ДанныеЭД.НайтиСтроки(Отбор);
		СтрокаДанныхЭД = МассивСтрокЭД[0];
		
		ДанныеПечатнойФормы = Новый Структура;
		ДанныеПечатнойФормы.Вставить("Ссылка", ЭлементМассива);
		
		ИмяФайла = СтрокаДанныхЭД.НаименованиеФайла +"." + СтрокаДанныхЭД.Расширение;
		ДанныеПечатнойФормы.Вставить("ИмяФайла", ИмяФайла);
		
		Если СтрокаДанныхЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий Тогда
			Отправитель = ПредставлениеЮрФизЛицо(СтрокаДанныхЭД.Организация);
			Получатель = ПредставлениеЮрФизЛицо(СтрокаДанныхЭД.Контрагент);
			
		Иначе
			Отправитель = ПредставлениеЮрФизЛицо(СтрокаДанныхЭД.Контрагент);
			Получатель = ПредставлениеЮрФизЛицо(СтрокаДанныхЭД.Организация);
			
		КонецЕсли;
		
		ДанныеПечатнойФормы.Вставить("Отправитель", Отправитель);
		ДанныеПечатнойФормы.Вставить("Получатель", Получатель);
		
		ОписаниеДокумента = Новый Структура;
		ОписаниеДокумента.Вставить("ИмяДокумента", СокрЛП(СтрокаДанныхЭД.ВидДокумента + " " + СтрокаДанныхЭД.ТипДокумента)); 
		Если СтрокаДанныхЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.СЧФДОПУПД Тогда
			ТипДокументаШаблон = НСтр("ru = '[ИмяДокумента] и передаточный документ'");
		Иначе
			ТипДокументаШаблон = НСтр("ru = '[ИмяДокумента]'");
		КонецЕсли;
		ТипДокумента = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ТипДокументаШаблон, ОписаниеДокумента);	
		ДанныеПечатнойФормы.Вставить("ТипДокумента", ТипДокумента);
		
		Если ЭлектронныеДокументыСлужебный.ЭтоФНС(СтрокаДанныхЭД.ВидЭДСсылка)Тогда
			Идентификатор = СтрокаДанныхЭД.НаименованиеФайла;
		Иначе
			Идентификатор = СтрокаДанныхЭД.Идентификатор;
		КонецЕсли;
		ДанныеПечатнойФормы.Вставить("Идентификатор", Идентификатор );
		
		Если ЗначениеЗаполнено(СтрокаДанныхЭД.НомерЭД) Тогда
			
			ДанныеПечатнойФормы.Вставить("НомерЭД", СтрокаДанныхЭД.НомерЭД);
			ДанныеПечатнойФормы.Вставить("ДатаЭД", СтрокаДанныхЭД.ДатаЭД);
			
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаДанныхЭД.СопроводительнаяЗаписка) Тогда
			ДанныеПечатнойФормы.Вставить("СопроводительнаяЗаписка", СтрокаДанныхЭД.СопроводительнаяЗаписка);
		КонецЕсли;
		
		ДанныеПечатнойФормы.Вставить("ТекущаяДата", Формат(ТекущаяДатаСеанса(), "ДЛФ=D"));
		
		// заполняем требуемые подписи
		МассивНеобходимыеПодписи = НеобходимыеПодписи.НайтиСтроки(Отбор);
		ТребуемыеПодписи = Неопределено;
		
		ЗаполнитьТребуемыеПодписи(ТребуемыеПодписи, МассивНеобходимыеПодписи);
		Если ЗначениеЗаполнено(ТребуемыеПодписи) Тогда
			ДанныеПечатнойФормы.Вставить("Подписи", ТребуемыеПодписи);
		КонецЕсли;
		
		// заполняем таблицу серфтикатов ЭД
		
		МассивСертификатовЭД = СертификатыЭД.НайтиСтроки(Отбор);
		
		ТаблицаСертификатов = Новый ТаблицаЗначений;
		ИнициализацияТаблицыСертификатов(ТаблицаСертификатов);

		Для Каждого СтрокаМассива Из МассивСертификатовЭД Цикл
			
			НоваяСтрока = ТаблицаСертификатов.Добавить();
			НоваяСтрока.КомуВыдан = СтрокаМассива.КомуВыданСертификат;
			НоваяСтрока.Сертификат = СтрокаМассива.КомуВыданСертификат;
			НоваяСтрока.Статус = СтатусПодписи(СтрокаМассива);
		КонецЦикла;

		ДанныеПечатнойФормы.Вставить("Сертификаты", ТаблицаСертификатов);
		
		МассивДанныхПечати.Добавить(ДанныеПечатнойФормы);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьТребуемыеПодписи(ТребуемыеПодписи, МассивНеобходимыеПодписи)
	
	Если МассивНеобходимыеПодписи.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТребуемыеПодписи = Новый Структура;
	ТребуемыеПодписи.Вставить("ПредставлениеОтправителя");
	ТребуемыеПодписи.Вставить("ПредставлениеПолучателя");
	
	Для Каждого СтрокаМассива Из МассивНеобходимыеПодписи Цикл
		
		ЗаполнитьПредставлениеПодписантов(СтрокаМассива, ТребуемыеПодписи);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьПредставлениеПодписантов(СтрокаМассива, ТребуемыеПодписи)
	
	Если СтрокаМассива.ПроизвольныйЭД Тогда
		
		Если СтрокаМассива.ТребуетсяПодпись Тогда
			
			Если СтрокаМассива.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий Тогда
				ТребуемыеПодписи.ПредставлениеОтправителя = ПредставлениеЮрФизЛицо(СтрокаМассива.ПодписьОрганизации);
				ТребуемыеПодписи.ПредставлениеПолучателя = ПредставлениеЮрФизЛицо(СтрокаМассива.ПодписьКонтрагента);
				
			Иначе
				ТребуемыеПодписи.ПредставлениеОтправителя = ПредставлениеЮрФизЛицо(СтрокаМассива.ПодписьКонтрагента);
				ТребуемыеПодписи.ПредставлениеПолучателя = ПредставлениеЮрФизЛицо(СтрокаМассива.ПодписьОрганизации);
				
			КонецЕсли;
		Иначе
			
			Если СтрокаМассива.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий Тогда
				
				ТребуемыеПодписи.ПредставлениеОтправителя = ПредставлениеЮрФизЛицо(СтрокаМассива.ПодписьОрганизации);
				ТребуемыеПодписи.ПредставлениеПолучателя = НСтр("ru = 'Не требуется'");
				
			Иначе
				ТребуемыеПодписи.ПредставлениеОтправителя = ПредставлениеЮрФизЛицо(СтрокаМассива.ПодписьКонтрагента);
				ТребуемыеПодписи.ПредставлениеПолучателя = НСтр("ru = 'Не требуется'");
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		Если СтрокаМассива.ТребуетсяПодпись Тогда
			
			Если СтрокаМассива.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий Тогда
				
				ТребуемыеПодписи.ПредставлениеОтправителя = ПредставлениеЮрФизЛицо(СтрокаМассива.ПодписьОрганизации);
				ТребуемыеПодписи.ПредставлениеПолучателя = ?(СтрокаМассива.ТребуетсяПодтверждение, 
					ПредставлениеЮрФизЛицо(СтрокаМассива.ПодписьКонтрагента), НСтр("ru = 'Не требуется'"));
				
			Иначе
				
				ТребуемыеПодписи.ПредставлениеОтправителя = ПредставлениеЮрФизЛицо(СтрокаМассива.ПодписьКонтрагента);
				ТребуемыеПодписи.ПредставлениеПолучателя = ?(СтрокаМассива.ТребуетсяПодтверждение,
					ПредставлениеЮрФизЛицо(СтрокаМассива.ПодписьОрганизации), НСтр("ru = 'Не требуется'"));
				
			КонецЕсли;
			
		Иначе
			ТребуемыеПодписи.ПредставлениеОтправителя = НСтр("ru = 'Не требуется'");
			ТребуемыеПодписи.ПредставлениеПолучателя = НСтр("ru = 'Не требуется'");
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПредставлениеЮрФизЛицо(ЮрФизЛицо)
	
	ДанныеЮрФизЛицо = ЭлектронныеДокументыПереопределяемый.ПолучитьДанныеЮрФизЛица(ЮрФизЛицо);
	ПредставлениеЮрФизЛицо = ЭлектронныеДокументыПереопределяемый.ОписаниеОрганизации(ДанныеЮрФизЛицо,"ПолноеНаименование,ИНН,КПП");
	
	Возврат ПредставлениеЮрФизЛицо;
	
КонецФункции

Функция СтатусПодписи(ВыборкаЭД)
	
	Если ВыборкаЭД.ПодписьВерна Тогда
		СтатусПодписи = "Верна ("+Формат(ВыборкаЭД.ДатаПроверкиПодписи,"ДЛФ=DT") + ")";
	Иначе
		СтатусПодписи = "Неверна ( "+Формат(ВыборкаЭД.ДатаПроверкиПодписи,"ДЛФ=DT") + ")";
	КонецЕсли;
	
	Возврат СтатусПодписи;
	
КонецФункции

Процедура ИнициализацияТаблицыСертификатов(ТаблицаСертификатов)
	
	ТаблицаСертификатов.Колонки.Добавить("КомуВыдан");
	ТаблицаСертификатов.Колонки.Добавить("Сертификат");
	ТаблицаСертификатов.Колонки.Добавить("Статус");
	
КонецПроцедуры

Функция ПечатнаяФормаЭД(СсылкаНаЭД, ИмяФайлаПодчиненногоЭД = Неопределено, Идентификатор = Неопределено, ПараметрыПечати = Неопределено)
	
	ПараметрыПросмотра = Новый Структура;
	ПараметрыПросмотра.Вставить("ПечатьЭД", Истина);
	Если ПараметрыПечати <> Неопределено Тогда
		Для Каждого КлючИЗначение Из ПараметрыПечати Цикл
			ПараметрыПросмотра.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Подписи = ЭлектронныеДокументыСлужебный.ПодписиЭлектронногоДокумента(СсылкаНаЭД);
	ПараметрыПросмотра.Вставить("СтруктураПодписей", Подписи);
	
	ТабДок = ЭлектронныеДокументыВнутренний.ФайлДанныхЭД(СсылкаНаЭД, ПараметрыПросмотра);
	
	ОбъектыПечати = Новый СписокЗначений;
	УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДок, 1, ОбъектыПечати, СсылкаНаЭД);
	
	Возврат ТабДок;
	
КонецФункции

Функция ТипыЭлементаВерсииЭДТитулаПокупателя() 

	ТитулыПокупателя = Новый Массив;
	
	ТитулыПокупателя.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ИнформацияПокупателяУПД);
	ТитулыПокупателя.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ИнформацияПокупателяУКД);
	ТитулыПокупателя.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ДОП);
	ТитулыПокупателя.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ПервичныйЭД);
	ТитулыПокупателя.Добавить(Перечисления.ТипыЭлементовВерсииЭД.АктЗаказчик);
	ТитулыПокупателя.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ТОРГ12Покупатель);
	
	Возврат ТитулыПокупателя;

КонецФункции

// Обработчик обновления БЭД 1.1.13.3
// Заполняет дату окончания действия сертификата
//
Процедура ЗаполнитьНаименованиеФайла() Экспорт
	
	ЭлементСсылка = Справочники.ЭДПрисоединенныеФайлы.Выбрать();
	
	Пока ЭлементСсылка.Следующий() Цикл
		
		Попытка
			ЭлементОбъект = ЭлементСсылка.ПолучитьОбъект();
			Если ЭлементОбъект.ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура Тогда
				СтрокаУИД = ЭлементОбъект.УникальныйИД;
				Наименование = ЭлементОбъект.Наименование;
				ПозицияУИД = Найти(Наименование, "_" + Лев(СтрокаУИД, 35));
				Если ПозицияУИД > 0 Тогда
					ЭлементОбъект.НаименованиеФайла = Лев(Наименование, ПозицияУИД) + СтрокаУИД;
				КонецЕсли;
			Иначе
				ЭлементОбъект.НаименованиеФайла = ЭлементОбъект.Наименование;
			КонецЕсли;
			ЭлементОбъект.Записать();
		Исключение
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

// Обработчик обновления БЭД 1.1.22.11
Процедура ЗаполнитьСвойстваЭД() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЭДПрисоединенныеФайлы.Ссылка КАК ЭД,
	|	ЭДПрисоединенныеФайлы.ВидЭД КАК ВидЭД,
	|	ЭДПрисоединенныеФайлы.ВладелецФайла КАК ВладелецЭД
	|ИЗ
	|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияЭД КАК СостоянияЭД
	|		ПО (СостоянияЭД.СсылкаНаОбъект = ЭДПрисоединенныеФайлы.ВладелецФайла)
	|ГДЕ
	|	ЭДПрисоединенныеФайлы.ТипЭлементаВерсииЭД = &ТипЭлементаВерсииЭД
	|	И ЭДПрисоединенныеФайлы.ВидЭД В (&ВидыЭД)
	|	И НЕ СостоянияЭД.СостояниеВерсииЭД В (&СостоянияЗавершен)";
	Запрос.УстановитьПараметр("ТипЭлементаВерсииЭД", Перечисления.ТипыЭлементовВерсииЭД.ПервичныйЭД);
	
	СостоянияЗавершен = Новый Массив;
	СостоянияЗавершен.Добавить(Перечисления.СостоянияВерсийЭД.ОбменЗавершен);
	СостоянияЗавершен.Добавить(Перечисления.СостоянияВерсийЭД.ОбменЗавершенСИсправлением);
	СостоянияЗавершен.Добавить(Перечисления.СостоянияВерсийЭД.Отклонен);
	СостоянияЗавершен.Добавить(Перечисления.СостоянияВерсийЭД.ЗакрытПринудительно);
	Запрос.УстановитьПараметр("СостоянияЗавершен", СостоянияЗавершен);
	
	ВидыЭД = Новый Массив;
	ВидыЭД.Добавить(Перечисления.ВидыЭД.ТОРГ12Продавец);
	ВидыЭД.Добавить(Перечисления.ВидыЭД.АктИсполнитель);
	ВидыЭД.Добавить(Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель);
	ВидыЭД.Добавить(Перечисления.ВидыЭД.ЗаказТовара);
	ВидыЭД.Добавить(Перечисления.ВидыЭД.ОтветНаЗаказ);
	ВидыЭД.Добавить(Перечисления.ВидыЭД.ПроизвольныйЭД);
	ВидыЭД.Добавить(Перечисления.ВидыЭД.ОтчетОПродажахКомиссионногоТовара);
	ВидыЭД.Добавить(Перечисления.ВидыЭД.ОтчетОСписанииКомиссионногоТовара);
	ВидыЭД.Добавить(Перечисления.ВидыЭД.КаталогТоваров);
	
	Запрос.УстановитьПараметр("ВидыЭД", ВидыЭД);
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ЭДОбъект = Выборка.ЭД.ПолучитьОбъект();
		ЭДОбъект.ТребуетсяИзвещение = Истина;
		ЭДОбъект.ТребуетсяПодтверждение = Истина;
		
		Если Выборка.ВидЭД = Перечисления.ВидыЭД.ПроизвольныйЭД Тогда
			
			ЭДОбъект.ТребуетсяПодтверждение = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Выборка.ВладелецЭД, "ТребуетсяПодтверждение");
			
		КонецЕсли;
		
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(ЭДОбъект);
		
	КонецЦикла;
	
КонецПроцедуры

// Обработчик обновления БЭД 1.1.22.11
Процедура УстановитьСостоянияОбменЗавершен() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЭДПрисоединенныеФайлы.ВладелецФайла КАК ВладелецФайла
	|ИЗ
	|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЭДПрисоединенныеФайлы КАК ЭДОтветные
	|		ПО ЭДПрисоединенныеФайлы.Ссылка = ЭДОтветные.ЭлектронныйДокументВладелец
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияЭД КАК СостоянияЭД
	|		ПО ЭДПрисоединенныеФайлы.ВладелецФайла = СостоянияЭД.СсылкаНаОбъект
	|ГДЕ
	|	ЭДПрисоединенныеФайлы.ВидЭД В(&ТитулыЭД)
	|	И НЕ СостоянияЭД.СостояниеВерсииЭД В (&СостоянияЗавершен)
	|	И ЭДОтветные.ТипЭлементаВерсииЭД В (ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ПервичныйЭД), ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ДОП))
	|	И ЭДОтветные.СтатусЭД В (ЗНАЧЕНИЕ(Перечисление.СтатусыЭД.ПереданОператору), ЗНАЧЕНИЕ(Перечисление.СтатусыЭД.Получен))
	|	И НЕ ЭДПрисоединенныеФайлы.ВладелецФайла.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЭДПрисоединенныеФайлы.ВладелецФайла
	|ИЗ
	|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЭДПрисоединенныеФайлы КАК ЭДОтветные
	|		ПО ЭДПрисоединенныеФайлы.Ссылка = ЭДОтветные.ЭлектронныйДокументВладелец
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияЭД КАК СостоянияЭД
	|		ПО ЭДПрисоединенныеФайлы.ВладелецФайла = СостоянияЭД.СсылкаНаОбъект
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЭДПрисоединенныеФайлы.ЭлектронныеЦифровыеПодписи КАК ЭДПрисоединенныеФайлыЭлектронныеЦифровыеПодписи
	|		ПО ЭДПрисоединенныеФайлы.Ссылка = ЭДПрисоединенныеФайлыЭлектронныеЦифровыеПодписи.Ссылка
	|ГДЕ
	|	ЭДПрисоединенныеФайлы.ВидЭД В(&НеТитулыЭД)
	|	И НЕ СостоянияЭД.СостояниеВерсииЭД В (&СостоянияЗавершен)
	|	И ЭДОтветные.ТипЭлементаВерсииЭД В (ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ИОП))
	|	И ЭДПрисоединенныеФайлыЭлектронныеЦифровыеПодписи.НомерСтроки >= 2
	|	И НЕ ЭДПрисоединенныеФайлы.ВладелецФайла.ПометкаУдаления";
	
	НеТитулы = Новый Массив;
	НеТитулы.Добавить(Перечисления.ВидыЭД.АктНаПередачуПрав);
	НеТитулы.Добавить(Перечисления.ВидыЭД.ЗаказТовара);
	НеТитулы.Добавить(Перечисления.ВидыЭД.ОтветНаЗаказ);
	НеТитулы.Добавить(Перечисления.ВидыЭД.КаталогТоваров);
	НеТитулы.Добавить(Перечисления.ВидыЭД.ОтчетОПродажахКомиссионногоТовара);
	НеТитулы.Добавить(Перечисления.ВидыЭД.ОтчетОСписанииКомиссионногоТовара);
	НеТитулы.Добавить(Перечисления.ВидыЭД.ПрайсЛист);
	НеТитулы.Добавить(Перечисления.ВидыЭД.ПроизвольныйЭД);
	
	Запрос.УстановитьПараметр("НеТитулыЭД", НеТитулы);
	
	Титулы = Новый Массив;
	Титулы.Добавить(Перечисления.ВидыЭД.АктИсполнитель);
	Титулы.Добавить(Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель);
	Титулы.Добавить(Перечисления.ВидыЭД.ТОРГ12Продавец);
	
	Запрос.УстановитьПараметр("ТитулыЭД", Титулы);
	
	СостоянияЗавершен = Новый Массив;
	СостоянияЗавершен.Добавить(Перечисления.СостоянияВерсийЭД.ОбменЗавершен);
	СостоянияЗавершен.Добавить(Перечисления.СостоянияВерсийЭД.ОбменЗавершенСИсправлением);
	СостоянияЗавершен.Добавить(Перечисления.СостоянияВерсийЭД.Отклонен);
	СостоянияЗавершен.Добавить(Перечисления.СостоянияВерсийЭД.ЗакрытПринудительно);
	СостоянияЗавершен.Добавить(Перечисления.СостоянияВерсийЭД.Аннулирован);
	Запрос.УстановитьПараметр("СостоянияЗавершен", СостоянияЗавершен);

	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НаборЗаписей = РегистрыСведений.СостоянияЭД.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.СсылкаНаОбъект.Установить(Выборка.ВладелецФайла);
		НаборЗаписей.Прочитать();
		
		Запись = НаборЗаписей[0];
		Запись.СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.ОбменЗавершен;
		
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);
		
	КонецЦикла;
	
	
КонецПроцедуры

Функция ПолучитьВыборкуЭД(УникальныйИД, ВладелецФайла);
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	|	ЭДПрисоединенныеФайлы.Ссылка
	|ИЗ
	|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	|ГДЕ
	|	ЭДПрисоединенныеФайлы.УникальныйИД = &УникальныйИД
	|	И ЭДПрисоединенныеФайлы.УдалитьВладелецФайла = &ВладелецФайла";
	
	Запрос.УстановитьПараметр("УникальныйИД",УникальныйИД);
	Запрос.УстановитьПараметр("ВладелецФайла",ВладелецФайла);
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

// Обработчик обновления БЭД 1.1.25.0.
// Создает входящие и исходящие электронные документы и привязывает к ним существующие в базе присоединенные файлы.
//
// Параметры:
//  Параметры - Структура - параметры обработчика обновления.
//
Процедура ПеревестиНаНовуюАрхитектуруЭДО() Экспорт 
	
	
	ТипыЭлементовВерсийЭД = Новый Массив;
	ТипыЭлементовВерсийЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ПервичныйЭД);
	ТипыЭлементовВерсийЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ЭСФ);
	ТипыЭлементовВерсийЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.СЧФУПД);
	ТипыЭлементовВерсийЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ДОП);
	ТипыЭлементовВерсийЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ДОПУПД);
	ТипыЭлементовВерсийЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.СЧФДОПУПД);
	ТипыЭлементовВерсийЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.КСЧФДИСУКД);
	ТипыЭлементовВерсийЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ДИСУКД);
	ТипыЭлементовВерсийЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.КСЧФУКД);
	
	ВидыИсключаемыхЭД = Новый Массив;
	ВидыИсключаемыхЭД.Добавить(Перечисления.ВидыЭД.ТОРГ12Покупатель);
	ВидыИсключаемыхЭД.Добавить(Перечисления.ВидыЭД.АктЗаказчик);
	ВидыИсключаемыхЭД.Добавить(Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель);
	ВидыИсключаемыхЭД.Добавить(Перечисления.ВидыЭД.ПроизвольныйЭД);
	ВидыИсключаемыхЭД.Добавить(Перечисления.ВидыЭД.ПустаяСсылка());
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЭДПрисоединенныеФайлы.ВерсияРегламентаЭДО КАК ВерсияРегламентаЭДО,
	|	ЭДПрисоединенныеФайлы.ВидЭД КАК ВидЭД,
	|	ЭДПрисоединенныеФайлы.ДатаДокументаОтправителя КАК ДатаДокументаОтправителя,
	|	ЭДПрисоединенныеФайлы.Контрагент КАК Контрагент,
	|	ЭДПрисоединенныеФайлы.НомерВерсииЭД КАК НомерВерсииЭД,
	|	ЭДПрисоединенныеФайлы.НомерДокументаОтправителя КАК НомерДокументаОтправителя,
	|	ЭДПрисоединенныеФайлы.ТипЭлементаВерсииЭД КАК ТипЭлементаВерсииЭД,
	|	ЭДПрисоединенныеФайлы.Организация КАК Организация,
	|	ЭДПрисоединенныеФайлы.Ответственный КАК Ответственный,
	|	ЭДПрисоединенныеФайлы.ПричинаОтклонения КАК ПричинаОтклонения,
	|	ЭДПрисоединенныеФайлы.ПрофильНастроекЭДО КАК ПрофильНастроекЭДО,
	|	ЭДПрисоединенныеФайлы.СоглашениеЭД КАК НастройкаЭДО,
	|	ЭДПрисоединенныеФайлы.СуммаДокумента КАК СуммаДокумента,
	|	ЭДПрисоединенныеФайлы.УникальныйИД КАК УникальныйИД,
	|	ЭДПрисоединенныеФайлы.Ссылка КАК Ссылка,
	|	ЭДПрисоединенныеФайлы.УдалитьВладелецФайла КАК ВладелецФайла,
	|	ЭДПрисоединенныеФайлы.НаправлениеЭД КАК НаправлениеЭД,
	|	ЭДПрисоединенныеФайлы.НомерЭД КАК НомерЭД,
	|	ЭДПрисоединенныеФайлы.ДатаСоздания КАК ДатаСоздания,
	|	ЕСТЬNULL(СостоянияЭД.СостояниеВерсииЭД, НЕОПРЕДЕЛЕНО) КАК СостояниеВерсииЭД,
	|	ЕСТЬNULL(СостоянияЭД.Комментарий, """") КАК Комментарий,
	|	ЭДПрисоединенныеФайлы.ПометкаУдаления,
	|	ЭДПрисоединенныеФайлы.ИдентификаторыОснованийВладельцаФайла.(
	|		ИдентификаторДокументаОснования,
	|		ИдентификаторЭДДокументаОснования
	|	) КАК Основания,
	|	ЕСТЬNULL(СоглашенияОбИспользованииЭДИсходящиеДокументы.ИспользоватьЭЦП, ЛОЖЬ) КАК ИспользоватьЭЦП
	|ИЗ
	|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияЭД КАК СостоянияЭД
	|		ПО (СостоянияЭД.ЭлектронныйДокумент = ЭДПрисоединенныеФайлы.Ссылка)
	|			И (СостоянияЭД.СсылкаНаОбъект = ЭДПрисоединенныеФайлы.УдалитьВладелецФайла)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияОбИспользованииЭД.ИсходящиеДокументы КАК СоглашенияОбИспользованииЭДИсходящиеДокументы
	|		ПО ЭДПрисоединенныеФайлы.ВидЭД = СоглашенияОбИспользованииЭДИсходящиеДокументы.ИсходящийДокумент
	|			И ЭДПрисоединенныеФайлы.СоглашениеЭД = СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка
	|ГДЕ
	|	ЭДПрисоединенныеФайлы.ТипЭлементаВерсииЭД В(&ТипыЭлементовВерсийЭД)
	|	И НЕ ЭДПрисоединенныеФайлы.ВладелецФайла ССЫЛКА Документ.ЭлектронныйДокументВходящий
	|	И НЕ ЭДПрисоединенныеФайлы.ВладелецФайла ССЫЛКА Документ.ЭлектронныйДокументИсходящий
	|	И НЕ ЭДПрисоединенныеФайлы.ВидЭД В (&ВидыИсключаемыхЭД)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаСоздания УБЫВ";
	
	Запрос.УстановитьПараметр("ТипыЭлементовВерсийЭД", ТипыЭлементовВерсийЭД);
	Запрос.УстановитьПараметр("ВидыИсключаемыхЭД",     ВидыИсключаемыхЭД);
	
	Результат = Запрос.Выполнить();
	
	Пока НЕ Результат.Пустой() Цикл
		
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			НачатьТранзакцию();
			
			Попытка
				
				Блокировка = Новый БлокировкаДанных;
				ЭлементБлокировки = Блокировка.Добавить("Справочник.ЭДПрисоединенныеФайлы");
				ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
				ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
				Блокировка.Заблокировать();
				
				Если Выборка.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
					ДокументОбъект = Документы.ЭлектронныйДокументВходящий.СоздатьДокумент();
					НоваяСтрока = ДокументОбъект.ДокументыОснования.Добавить();
					НоваяСтрока.ДокументОснование = Выборка.ВладелецФайла;
					Если ЗначениеЗаполнено(Выборка.ВладелецФайла) Тогда
						НоваяСтрока.СпособОбработки = Выборка.ВладелецФайла.Метаданные().Имя;
					КонецЕсли;
				Иначе
					ДокументОбъект = Документы.ЭлектронныйДокументИсходящий.СоздатьДокумент();
					НоваяСтрока = ДокументОбъект.ДокументыОснования.Добавить();
					НоваяСтрока.ДокументОснование = Выборка.ВладелецФайла;
				КонецЕсли;
				
				ВыборкаОснований = Выборка.Основания.Выбрать();
				
				Пока ВыборкаОснований.Следующий() Цикл
					НоваяСтрока = ДокументОбъект.ИдентификаторыОснованийВладельцаФайла.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока,ВыборкаОснований);
				КонецЦикла;
				
				ТребуетсяИзвещение = Истина;
				
				Если (Выборка.ВидЭД = Перечисления.ВидыЭД.СчетФактура Или Выборка.ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура) 
					И 
					Не (Выборка.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.КСЧФДИСУКД 
						Или Выборка.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.КСЧФУКД
						Или Выборка.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.СЧФДОПУПД
						Или Выборка.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.СЧФДОПУПД) Тогда
					ТребуетсяПодтверждение = Ложь;
				Иначе
					Если Выборка.ИспользоватьЭЦП Тогда
						ТребуетсяПодтверждение = Истина;
						Если Выборка.ВидЭД = Перечисления.ВидыЭД.СчетНаОплату Тогда
							ТребуетсяПодтверждение = Ложь;
						КонецЕсли;
					Иначе
						ТребуетсяПодтверждение = Ложь;
					КонецЕсли;
				КонецЕсли;
				
				ДокументОбъект.ТребуетсяИзвещение = ТребуетсяИзвещение;
				ДокументОбъект.ТребуетсяПодтверждение = ТребуетсяПодтверждение;
				ДокументОбъект.Дата = Выборка.ДатаСоздания;
				ЗаполнитьЗначенияСвойств(ДокументОбъект,Выборка);
				ДокументОбъект.УстановитьНовыйНомер();
				
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДокументОбъект);
				
				// запишем поле "ВладелецФайла"
				СправочникОбъект = Выборка.Ссылка.ПолучитьОбъект();
				СправочникОбъект.ВладелецФайла = ДокументОбъект.Ссылка;
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(СправочникОбъект);
				
				// Определим "Состояние" и "Комментарий".
				СостояниеВерсииЭД = Выборка.СостояниеВерсииЭД;
				Комментарий       = Выборка.Комментарий;
				Если Не ЗначениеЗаполнено(СостояниеВерсииЭД) Тогда
					
					// В регистре состояний в поле "ЭлектронныйДокумент" указан вторичный титул.
					// Получим информацию через владельца.
					
					Набор = РегистрыСведений.СостоянияЭД.СоздатьНаборЗаписей();
					Набор.Отбор.СсылкаНаОбъект.Установить(Выборка.ВладелецФайла);
					Набор.Прочитать();
					
					Если Набор.Количество() Тогда
						СостояниеВерсииЭД = Набор[0].СостояниеВерсииЭД;
						Комментарий       = Набор[0].Комментарий;
					КонецЕсли;
					
				КонецЕсли;
				
				// Запишем поле "СостояниеЭДО"
				Если СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.Аннулирован
					ИЛИ СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.ЗакрытПринудительно 
					ИЛИ СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.ОбменЗавершен
					ИЛИ СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.ОбменЗавершенСИсправлением
					ИЛИ СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.Отклонен
					ИЛИ СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.ОшибкаПередачи Тогда
					
					ДокументОбъект.СостояниеЭДО = СостояниеВерсииЭД;
					Если ПустаяСтрока(ДокументОбъект.ПричинаОтклонения) И НЕ ПустаяСтрока(Комментарий) Тогда
						ДокументОбъект.ПричинаОтклонения = Комментарий;
					КонецЕсли;
				Иначе
					ДокументОбъект.СостояниеЭДО = ЭлектронныеДокументыСлужебный.ОпределитьСостояниеВерсииПоСтатусуЭД(Выборка.Ссылка);
					Если Не ЗначениеЗаполнено(ДокументОбъект.СостояниеЭДО) Тогда
						ДокументОбъект.СостояниеЭДО = СостояниеВерсииЭД
					КонецЕсли;
				КонецЕсли;
				
				// обработка подчиненных ЭД по цепочке
				ВыборкаЭД = ПолучитьВыборкуЭД(Выборка.УникальныйИД, Выборка.ВладелецФайла);
				ВторойТитул = Неопределено;
				Пока ВыборкаЭД.Следующий() Цикл
					
					СправочникОбъектПодчиненный = ВыборкаЭД.Ссылка.ПолучитьОбъект();
					СправочникОбъектПодчиненный.ВладелецФайла = ДокументОбъект.Ссылка;
					
					Если СправочникОбъектПодчиненный.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель Тогда
						СправочникОбъектПодчиненный.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ТОРГ12Покупатель;
						ВторойТитул = ВыборкаЭД.Ссылка;
					ИначеЕсли СправочникОбъектПодчиненный.ВидЭД = Перечисления.ВидыЭД.АктЗаказчик Тогда
						СправочникОбъектПодчиненный.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.АктЗаказчик;
						ВторойТитул = ВыборкаЭД.Ссылка;
					ИначеЕсли СправочникОбъектПодчиненный.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель Тогда
						СправочникОбъектПодчиненный.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.СоглашениеОбИзмененииСтоимостиПолучатель;
						ВторойТитул = ВыборкаЭД.Ссылка;
					КонецЕсли;
					
					// Заполним значение флага "НаПодпись".
					// только после того как записаны поля "ВладелецФайла" и "СостояниеЭДО"
					ЭлектронныеДокументыСлужебный.АктуализироватьФлагНаПодпись(СправочникОбъектПодчиненный);
					ОбновлениеИнформационнойБазы.ЗаписатьДанные(СправочникОбъектПодчиненный);
					
				КонецЦикла;
				
				// Заполним значение флага "ЕстьОснование".
				Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ЭлектронныйДокументВходящий") Тогда
					ДокументОбъект.ЕстьОснование = ДокументОбъект.ДокументыОснования.Количество();
				КонецЕсли;
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДокументОбъект);
				
				// Заполним значение флага "НаПодпись".
				// только после того как записаны поля "СправочникОбъект.ВладелецФайла" и "ДокументОбъект.СостояниеЭДО"
				СправочникОбъект = Выборка.Ссылка.ПолучитьОбъект();
				ЭлектронныеДокументыСлужебный.АктуализироватьФлагНаПодпись(СправочникОбъект);
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(СправочникОбъект);
				
				НаборЗаписей = РегистрыСведений.СостоянияЭД.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.СсылкаНаОбъект.Установить(Выборка.ВладелецФайла,Истина);
				НаборЗаписей.Прочитать();
				Если НаборЗаписей.Количество() > 0 Тогда
					Если (НаборЗаписей[0].ЭлектронныйДокумент = Выборка.Ссылка 
						ИЛИ НаборЗаписей[0].ЭлектронныйДокумент = ВторойТитул)Тогда
						
						НаборЗаписей[0].ЭлектронныйДокумент = ДокументОбъект.Ссылка;
						НаборЗаписей.Записать();
					Иначе
						ДокументОбъект.ПометкаУдаления = Истина;
						ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДокументОбъект);
					КонецЕсли;
				КонецЕсли;
				
				НаборЗаписей = РегистрыСведений.НаличиеПрисоединенныхФайлов.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.ОбъектСФайлами.Установить(Выборка.ВладелецФайла);
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);
				
				ЗафиксироватьТранзакцию();
				
			Исключение
				
				ОтменитьТранзакцию();
				Операция = НСтр("ru = 'Обновление подсистемы обмена с контрагентами'");
				ПодробныйТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьОшибку(Операция, ПодробныйТекстОшибки);
				ВызватьИсключение;
				
			КонецПопытки;
			
		КонецЦикла;
		
		Результат = Запрос.Выполнить();
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПерезаполнитьДокументыОснования() Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Таблица.Ссылка,
	|	Таблица.ДокументОснование
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаОснований.Ссылка КАК Ссылка,
	|		ПрисоединенныеФайлы.УдалитьВладелецФайла КАК ДокументОснование
	|	ИЗ
	|		Документ.ЭлектронныйДокументВходящий.ДокументыОснования КАК ТаблицаОснований
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЭДПрисоединенныеФайлы КАК ПрисоединенныеФайлы
	|		ПО ТаблицаОснований.Ссылка = ПрисоединенныеФайлы.ВладелецФайла
	|	ГДЕ
	|		ТаблицаОснований.ДокументОснование = НЕОПРЕДЕЛЕНО
	|		И ПрисоединенныеФайлы.УдалитьВладелецФайла <> НЕОПРЕДЕЛЕНО
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТаблицаОснований.Ссылка КАК Ссылка,
	|		ПрисоединенныеФайлы.УдалитьВладелецФайла КАК ДокументОснование
	|	ИЗ
	|		Документ.ЭлектронныйДокументИсходящий.ДокументыОснования КАК ТаблицаОснований
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЭДПрисоединенныеФайлы КАК ПрисоединенныеФайлы
	|		ПО ТаблицаОснований.Ссылка = ПрисоединенныеФайлы.ВладелецФайла
	|	ГДЕ
	|		ТаблицаОснований.ДокументОснование = НЕОПРЕДЕЛЕНО
	|		И ПрисоединенныеФайлы.УдалитьВладелецФайла <> НЕОПРЕДЕЛЕНО
	|	
	|	) КАК Таблица
	|
	|ИТОГИ ПО
	|	Ссылка
	|");
	
	Результат = Запрос.Выполнить();
	ВыборкаПоДокументам = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоДокументам.Следующий() Цикл
		
		НачатьТранзакцию();
		Попытка
			Блокировка = Новый БлокировкаДанных;
			Если ТипЗнч(ВыборкаПоДокументам.Ссылка) = Тип("ДокументСсылка.ЭлектронныйДокументВходящий") Тогда
				ЭлементБлокировки = Блокировка.Добавить("Документ.ЭлектронныйДокументВходящий");
			ИначеЕсли ТипЗнч(ВыборкаПоДокументам.Ссылка) = Тип("ДокументСсылка.ЭлектронныйДокументИсходящий") Тогда
				ЭлементБлокировки = Блокировка.Добавить("Документ.ЭлектронныйДокументИсходящий");
			Иначе
				ВызватьИсключение НСтр("ru = 'Не инициализированный документ для обработчика!'");
			КонецЕсли;
			ЭлементБлокировки.УстановитьЗначение("Ссылка", ВыборкаПоДокументам.Ссылка);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			Блокировка.Заблокировать();
			
			ЭлектронныйДокумент = ВыборкаПоДокументам.Ссылка.ПолучитьОбъект();
			ЭлектронныйДокумент.ДокументыОснования.Очистить();
			
			Выборка = ВыборкаПоДокументам.Выбрать();
			Пока Выборка.Следующий() Цикл
				НоваяСтрока = ЭлектронныйДокумент.ДокументыОснования.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			КонецЦикла;
			
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ЭлектронныйДокумент);
				
			ЗафиксироватьТранзакцию();
				
		Исключение
			ОтменитьТранзакцию();
			Операция = НСтр("ru = 'Обновление подсистемы обмена с контрагентами'");
			ПодробныйТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьОшибку(Операция, ПодробныйТекстОшибки);
			ВызватьИсключение;
		КонецПопытки;
			
	КонецЦикла;
	
КонецПроцедуры

// Обработчик обновления 1.1.25.21
// для исправления ошибки 00-00153713.
Процедура ЗаполнитьТипЭлементаВерсииЭД() Экспорт
	
	ВидЭДТипЭлементаВерсииЭД = Новый Соответствие;
	
	ВидЭДТипЭлементаВерсииЭД.Вставить(
		Перечисления.ВидыЭД.АктЗаказчик,
		Перечисления.ТипыЭлементовВерсииЭД.АктЗаказчик);
	
	ВидЭДТипЭлементаВерсииЭД.Вставить(
		Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель,
		Перечисления.ТипыЭлементовВерсииЭД.СоглашениеОбИзмененииСтоимостиПолучатель);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ 
	|	ЭДПрисоединенныеФайлы.Ссылка
	|ИЗ
	|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	|ГДЕ
	|	ЭДПрисоединенныеФайлы.ВидЭД В (
	|		ЗНАЧЕНИЕ(Перечисление.ВидыЭД.АктЗаказчик),
	|		ЗНАЧЕНИЕ(Перечисление.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель))
	|	И НЕ ЭДПрисоединенныеФайлы.ТипЭлементаВерсииЭД В (
	|		ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.АктЗаказчик),
	|		ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.СоглашениеОбИзмененииСтоимостиПолучатель))");
	
	Результат = Запрос.Выполнить();
	
	Пока Не Результат.Пустой() Цикл
		
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			ПрисоединенныйФайлОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ПрисоединенныйФайлОбъект.ТипЭлементаВерсииЭД = ВидЭДТипЭлементаВерсииЭД[ПрисоединенныйФайлОбъект.ВидЭД];
			
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ПрисоединенныйФайлОбъект);
			
		КонецЦикла;
		
		Результат = Запрос.Выполнить();
		
	КонецЦикла;
	
КонецПроцедуры
     
// Обработчик обновления 1.1.25.23
Процедура СкорректироватьЗаписиСостоянияУПД() Экспорт
	
	// Исправление ошибки обработчика обновления 00-00154135.
	// Для учетных документов, по которым создан электронный документ 
	// УПД (ФНС 5.01 Счет-фактура и Первичный документ) остались ошибки:
	//
	// 1) Некорректные записи в регистре сведений "СостоянияЭД"
	// (В поле "ЭлектронныйДокумент" указан СправочникСсылка.ЭДПрисоединенныеФайлы).
	//
	// 2) Для "Документ.ЭлектронныйДокументВходящий" и "Документ.ЭлектронныйДокументИсходящий"
	// в табличную часть "ДокументыОснования" не перешел первичный документ (только счет-фактура).
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ 
	|	СостоянияЭД1.СсылкаНаОбъект КАК УчетныйДокумент,
	|	СостоянияЭД1.ЭлектронныйДокумент КАК ПрисоединенныйФайл,
	|	СостоянияЭД1.ЭлектронныйДокумент.УдалитьВладелецФайла КАК ВладелецФайла,
	|	СостоянияЭД2.ЭлектронныйДокумент КАК НовыйЭлектронныйДокумент
	|ИЗ
	|	РегистрСведений.СостоянияЭД КАК СостоянияЭД1
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияЭД КАК СостоянияЭД2
	|		ПО СостоянияЭД1.ЭлектронныйДокумент.УдалитьВладелецФайла = СостоянияЭД2.СсылкаНаОбъект
	|ГДЕ
	|	СостоянияЭД1.ЭлектронныйДокумент ССЫЛКА Справочник.ЭДПрисоединенныеФайлы
	|	И СостоянияЭД1.ЭлектронныйДокумент.ВидЭД <> ЗНАЧЕНИЕ(Перечисление.ВидыЭД.ПроизвольныйЭД)
	|	И (СостоянияЭД2.ЭлектронныйДокумент ССЫЛКА Документ.ЭлектронныйДокументВходящий
	|			ИЛИ СостоянияЭД2.ЭлектронныйДокумент ССЫЛКА Документ.ЭлектронныйДокументИсходящий)");
	
	Результат = Запрос.Выполнить();
	
	Пока Не Результат.Пустой() Цикл
		
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			НачатьТранзакцию();
			
			Попытка
				
				// 1) Изменяем в записи РС "СостоянияЭД" поле "ЭлектронныйДокумент".
				НаборЗаписей = РегистрыСведений.СостоянияЭД.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.СсылкаНаобъект.Установить(Выборка.УчетныйДокумент);
				НаборЗаписей.Прочитать();
				НаборЗаписей[0].ЭлектронныйДокумент = Выборка.НовыйЭлектронныйДокумент;
				
				НаборЗаписей.Записать();
				
				// 2) Добавляем первичный документ в основания электронного документа.
				ЭДОбъект = Выборка.НовыйЭлектронныйДокумент.ПОлучитьОбъект();
				Если ЭДОбъект.ДокументыОснования.Найти(Выборка.УчетныйДокумент, "ДокументОснование") = Неопределено Тогда
					Строка = ЭДОбъект.ДокументыОснования.Добавить();
					Строка.ДокументОснование = Выборка.УчетныйДокумент;
					Если ТипЗнч(ЭДОбъект) = Тип("ДокументОбъект.ЭлектронныйДокументВходящий") Тогда
						Строка.СпособОбработки   = Выборка.УчетныйДокумент.Метаданные().Имя;
					КонецЕсли;
				КонецЕсли;
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(ЭДОбъект);
				
				ЗафиксироватьТранзакцию();
				
			Исключение
				
				ОтменитьТранзакцию();
				Операция = НСтр("ru = 'Обновление подсистемы обмена с контрагентами'");
				ПодробныйТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьОшибку(Операция, ПодробныйТекстОшибки);
				ВызватьИсключение;
				
			КонецПопытки;
			
		КонецЦикла;
		
		Результат = Запрос.Выполнить();
		
	КонецЦикла;
	
КонецПроцедуры

// Обработчик обновления 1.1.25.25
Процедура ПеревестиНаНовуюАрхитектуруЭДО_1_1_25_25( ) Экспорт
	
	// Повторим выполнение основного обработчика перехода на новую архитектуру для 
	// электронных документов с типом элемента версии ЭД "КСЧФУКД"
	
	Если Метаданные.Документы.Найти("УдалитьЭлектронныйДокументВходящий") <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПеревестиНаНовуюАрхитектуруЭДО( );
	
КонецПроцедуры

// Обработчик обновления 1.1.25.29
Процедура СкорректироватьЗаписиСостоянияЭД() Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ 
	|	СостоянияЭД.СсылкаНаОбъект КАК УчетныйДокумент,
	|	СостоянияЭД.ЭлектронныйДокумент.ВладелецФайла КАК ВладелецФайла
	|ИЗ
	|	РегистрСведений.СостоянияЭД КАК СостоянияЭД
	|ГДЕ
	|	СостоянияЭД.ЭлектронныйДокумент ССЫЛКА Справочник.ЭДПрисоединенныеФайлы
	|	И СостоянияЭД.ЭлектронныйДокумент.ВидЭД <> Значение(Перечисление.ВидыЭД.ПроизвольныйЭД)
	|	И (СостоянияЭД.ЭлектронныйДокумент.ВладелецФайла Ссылка Документ.ЭлектронныйДокументВходящий
	|		ИЛИ СостоянияЭД.ЭлектронныйДокумент.ВладелецФайла Ссылка Документ.ЭлектронныйДокументИсходящий)");
	
	Результат = Запрос.Выполнить();
	
	Пока Не Результат.Пустой() Цикл
		
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			// Изменяем в записи РС "СостоянияЭД" поле "ЭлектронныйДокумент".
			НаборЗаписей = РегистрыСведений.СостоянияЭД.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.СсылкаНаобъект.Установить(Выборка.УчетныйДокумент);
			НаборЗаписей.Прочитать();
			НаборЗаписей[0].ЭлектронныйДокумент = Выборка.ВладелецФайла;
			
			НаборЗаписей.Записать();
			
		КонецЦикла;
		
		Результат = Запрос.Выполнить();
		
	КонецЦикла;
	
КонецПроцедуры

// Обработчик обновления 1.1.25.58
Процедура СинхронизироватьСостояниеЭДО() Экспорт
	
	// В старых версиях БЭД, в регистре сведений "СостоянияЭД", в поле "ЭлектронныйДокумент"
	// мог находиться вторичный титул (ответная подпись). Из-за этого основной обработчик перевода на новую архитектуру
	// не присоединял данные регистра по таким документам и определял их состояние не правильно.
	// Состояние ЭДО синхронизируется по первому учетному документу (основанию),
	// на случай если их несколько, и они имеют разное состояние.
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВходящийОснования.Ссылка,
	|	СостоянияЭД.СостояниеВерсииЭД
	|ИЗ
	|	Документ.ЭлектронныйДокументВходящий.ДокументыОснования КАК ВходящийОснования
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияЭД КАК СостоянияЭД
	|		ПО ВходящийОснования.ДокументОснование = СостоянияЭД.СсылкаНаОбъект
	|			И (ВходящийОснования.НомерСтроки = 1)
	|ГДЕ
	|	ВходящийОснования.Ссылка.СостояниеЭДО <> СостоянияЭД.СостояниеВерсииЭД");
	
	Результат = Запрос.Выполнить();
	
	Пока Не Результат.Пустой() Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			Выборка = Результат.Выбрать();
			Пока Выборка.Следующий() Цикл
				
				ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
				ДокументОбъект.СостояниеЭДО = Выборка.СостояниеВерсииЭД;
				
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДокументОбъект);
				
			КонецЦикла;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			Операция = "Синхронизация состояния ЭДО для электронных документов и регистра состояний";
			ПодробныйТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьОшибку(Операция, ПодробныйТекстОшибки);
			
			ВызватьИсключение;
			
		КонецПопытки;
		
		Результат = Запрос.Выполнить();
		
	КонецЦикла;
	
КонецПроцедуры

#КонецЕсли