// Хранит таблицу значений - состав показателей отчета.
Перем мТаблицаСоставПоказателей Экспорт;

// Хранит структуру - состав показателей отчета,
// значение которых автоматически заполняется по учетным данным.
Перем мСтруктураВариантыЗаполнения Экспорт;

// Хранит структуру многостраничных разделов.
Перем мСтруктураМногостраничныхРазделов Экспорт;

// Хранит дерево значений - структуру листов отчета.
Перем мДеревоСтраницОтчета Экспорт;

// Хранит признак выбора печатных листов.
Перем мЕстьВыбранные Экспорт;

// Хранит имя выбранной формы отчета
Перем мВыбраннаяФорма Экспорт;

// Хранит признак скопированной формы.
Перем мСкопированаФорма Экспорт;

// Хранит ссылку на документ, хранящий данные отчета
Перем мСохраненныйДок Экспорт;

// Следующие переменные хранят границы
// периода построения отчета
Перем мДатаНачалаПериодаОтчета Экспорт;
Перем мДатаКонцаПериодаОтчета  Экспорт;

Перем мПолноеИмяФайлаВнешнейОбработки Экспорт;

Перем мЗаписьЗапрещена Экспорт;

Перем мИнтервалАвтосохранения Экспорт;

Перем мРезультатПоиска Экспорт;// таблица с результатами поиска
Перем мСчетчикиСтраницПриПоиске Экспорт;// таблица со счетчиками номеров листов при поиске
Перем мТаблицаФормОтчета Экспорт;

Перем мЗаписываетсяНовыйДокумент Экспорт;
Перем мВариант Экспорт;

Перем мГруппаОрганизаций Экспорт;

Перем мФормыИФорматы Экспорт;
Перем мВерсияОтчета Экспорт;

Перем мПечатьБезШтрихкодаРазрешена Экспорт;

Перем мСчет Экспорт; // Список счетов ИБ по условным кодам

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Заполняет соответствие номеров счетов и их ссылок для плана счетов Хозрасчетный
//
// Параметры
//  СоответствиеСчетов - Неопределено, переменная в которую будет внесено соответствие
//
Процедура ЗаполнитьСоответствиеСчетов(СоответствиеСчетов, ЭтоБалансДляУПП_КА, ЭтоБалансДляАУ) Экспорт
	
	Если СоответствиеСчетов <> Неопределено Тогда
		// соответствие уже заполнено
		Возврат;
	КонецЕсли;
	
	СоответствиеСчетов = Новый Соответствие;
	
	Если РегламентированнаяОтчетность.ИДКонфигурации() = "БП" И РегламентированнаяОтчетность.РедакцияКонфигурации() = "1.6" Тогда
		Возврат;
	КонецЕсли;
	
	ПС = ПланыСчетов["Хозрасчетный"];
	
	СоответствиеСчетов.Вставить("01", ПС.ОсновныеСредства);
	СоответствиеСчетов.Вставить("01.01", ПС.ОСвОрганизации);
	СоответствиеСчетов.Вставить("01.08", ПС.ОСБезГосРегистрации);
	СоответствиеСчетов.Вставить("01.09", ПС.ВыбытиеОС);
	
	СоответствиеСчетов.Вставить("02", ПС.АмортизацияОсновныхСредств);
	СоответствиеСчетов.Вставить("02.01", ПС.АмортизацияОС_01);
	СоответствиеСчетов.Вставить("02.02", ПС.АмортизацияОС_03);
	
	СоответствиеСчетов.Вставить("03", ПС.ДоходныеВложенияВ_МЦ);
	СоответствиеСчетов.Вставить("03.01", ПС.МЦвОрганизации);
	СоответствиеСчетов.Вставить("03.02", ПС.МЦ_ПредоставленныеВоВременноеВладение);
	СоответствиеСчетов.Вставить("03.03", ПС.МЦ_ПредоставленныеВоВременноеПользование);
	СоответствиеСчетов.Вставить("03.04", ПС.ПрочиеДоходныеВложения);
	СоответствиеСчетов.Вставить("03.09", ПС.ВыбытиеМЦ);
	
	СоответствиеСчетов.Вставить("04", ПС.НематериальныеАктивы);
	СоответствиеСчетов.Вставить("04.01", ПС.НематериальныеАктивыОрганизации);
	СоответствиеСчетов.Вставить("04.02", ПС.РасходыНаНИОКР);
	СоответствиеСчетов.Вставить("05", ПС.АмортизацияНематериальныхАктивов);
	СоответствиеСчетов.Вставить("07", ПС.ОборудованиеКУстановке);
	
	СоответствиеСчетов.Вставить("08", ПС.ВложенияВоВнеоборотныеАктивы);
	СоответствиеСчетов.Вставить("08.01", ПС.ПриобретениеЗемельныхУчастков);
	СоответствиеСчетов.Вставить("08.02", ПС.ПриобретениеОбъектовПриродопользования);
	СоответствиеСчетов.Вставить("08.03", ПС.СтроительствоОбъектовОсновныхСредств);
	СоответствиеСчетов.Вставить("08.04", ПС.ПриобретениеОбъектовОсновныхСредств);
	СоответствиеСчетов.Вставить("08.05", ПС.ПриобретениеНематериальныхАктивов);
	СоответствиеСчетов.Вставить("08.06", ПС.ПереводМолоднякаЖивотныхВОсновноеСтадо);
	СоответствиеСчетов.Вставить("08.07", ПС.ПриобретениеВзрослыхЖивотных);
	СоответствиеСчетов.Вставить("08.08", ПС.ВыполнениеНИОКР);
	СоответствиеСчетов.Вставить("08.11", ПС.НематериальныеПоисковыеАктивы);
	СоответствиеСчетов.Вставить("08.12", ПС.МатериальныеПоисковыеАктивы);
	
	СоответствиеСчетов.Вставить("09", ПС.ОтложенныеНалоговыеАктивы);
	СоответствиеСчетов.Вставить("10", ПС.Материалы);
	СоответствиеСчетов.Вставить("11", ПС.ЖивотныеНаВыращиванииИОткорме);
	
	СоответствиеСчетов.Вставить("14", ПС.РезервыПодСнижениеСтоимостиМЦ);
	СоответствиеСчетов.Вставить("14.01", ПС.РезервыПодСнижениеСтоимостиМатериалов);
	СоответствиеСчетов.Вставить("14.02", ПС.РезервыПодСнижениеСтоимостиТоваров);
	СоответствиеСчетов.Вставить("14.03", ПС.РезервыПодСнижениеСтоимостиГотовойПродукции);
	СоответствиеСчетов.Вставить("14.04", ПС.РезервыПодСнижениеСтоимостиНезавершенногоПроизводства);
	
	СоответствиеСчетов.Вставить("15", ПС.ЗаготовлениеИПриобретениеМЦ);
	СоответствиеСчетов.Вставить("15.01", ПС.ЗаготовлениеИПриобретениеМатериалов);
	СоответствиеСчетов.Вставить("15.02", ПС.ПриобретениеТоваров);
	
	СоответствиеСчетов.Вставить("16", ПС.ОтклонениеВСтоимостиМЦ);
	СоответствиеСчетов.Вставить("16.01", ПС.ОтклонениеВСтоимостиМатериалов);
	СоответствиеСчетов.Вставить("16.02", ПС.ОтклонениеВСтоимостиТоваров);
	
	СоответствиеСчетов.Вставить("19", ПС.НДСпоПриобретеннымЦенностям);
	СоответствиеСчетов.Вставить("19.01", ПС.НДСприПриобретенииОсновныхСредств);
	СоответствиеСчетов.Вставить("19.02", ПС.НДСпоПриобретеннымНематериальнымАктивам);
	СоответствиеСчетов.Вставить("19.03", ПС.НДСпоПриобретеннымМПЗ);
	СоответствиеСчетов.Вставить("19.04", ПС.НДСпоПриобретеннымУслугам);
	СоответствиеСчетов.Вставить("19.05", ПС.НДСуплачиваемыйТаможеннымОрганам);
	СоответствиеСчетов.Вставить("19.06", ПС.АкцизыПоОплаченнымМатериальнымЦенностям);
	СоответствиеСчетов.Вставить("19.07", ПС.НДСПоТоварамРеализованнымПоСтавке0);
	СоответствиеСчетов.Вставить("19.08", ПС.НДСприСтроительствеОсновныхСредств);
	
	СоответствиеСчетов.Вставить("20", ПС.ОсновноеПроизводство_);
	СоответствиеСчетов.Вставить("20.01", ПС.ОсновноеПроизводство);
	СоответствиеСчетов.Вставить("20.02", ПС.ПроизводствоИзДавальческогоСырья);
	
	СоответствиеСчетов.Вставить("21", ПС.Полуфабрикаты);
	СоответствиеСчетов.Вставить("23", ПС.ВспомогательныеПроизводства);
	СоответствиеСчетов.Вставить("25", ПС.ОбщепроизводственныеРасходы);
	СоответствиеСчетов.Вставить("26", ПС.ОбщехозяйственныеРасходы);
	СоответствиеСчетов.Вставить("28", ПС.БракВПроизводстве);
	СоответствиеСчетов.Вставить("29", ПС.ОбслуживающиеПроизводства);
	
	СоответствиеСчетов.Вставить("41", ПС.Товары);
	СоответствиеСчетов.Вставить("41.01", ПС.ТоварыНаСкладах);
	СоответствиеСчетов.Вставить("41.02", ПС.ТоварыВРозничнойТорговле);
	СоответствиеСчетов.Вставить("41.03", ПС.ТараПодТоваромИПорожняя);
	СоответствиеСчетов.Вставить("41.04", ПС.ПокупныеИзделия);
	Если НЕ ЭтоБалансДляУПП_КА Тогда
		СоответствиеСчетов.Вставить("41.11", ПС.ТоварыВРозничнойТорговлеВПродажныхЦенахАТТ);
		СоответствиеСчетов.Вставить("41.12", ПС.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ);
	КонецЕсли;
	
	СоответствиеСчетов.Вставить("42", ПС.ТорговаяНаценка);
	Если НЕ ЭтоБалансДляУПП_КА Тогда
		СоответствиеСчетов.Вставить("42.01", ПС.ТорговаяНаценкаАТТ);
		СоответствиеСчетов.Вставить("42.02", ПС.ТорговаяНаценкаНТТ);
	КонецЕсли;
	
	СоответствиеСчетов.Вставить("43", ПС.ГотоваяПродукция);
	СоответствиеСчетов.Вставить("44", ПС.РасходыНаПродажу);
	
	СоответствиеСчетов.Вставить("45", ПС.ТоварыОтгруженные);
	СоответствиеСчетов.Вставить("45.01", ПС.ПокупныеТоварыОтгруженные);
	СоответствиеСчетов.Вставить("45.02", ПС.ГотоваяПродукцияОтгруженная);
	СоответствиеСчетов.Вставить("45.03", ПС.ПрочиеТоварыОтгруженные);
	
	СоответствиеСчетов.Вставить("46", ПС.ВыполненныеЭтапыПоНезавершеннымРаботам);
	
	СоответствиеСчетов.Вставить("50", ПС.Касса);
	СоответствиеСчетов.Вставить("50.01", ПС.КассаОрганизации);
	СоответствиеСчетов.Вставить("50.02", ПС.ОперационнаяКасса);
	СоответствиеСчетов.Вставить("50.03", ПС.ДенежныеДокументы);
	Если НЕ ЭтоБалансДляУПП_КА Тогда
		СоответствиеСчетов.Вставить("50.04", ПС.КассаПлатежногоАгента);
	Иначе
		СоответствиеСчетов.Вставить("50.04", ПС.ПустаяСсылка()); // счет отсутсвует
	КонецЕсли;
	СоответствиеСчетов.Вставить("50.21", ПС.КассаОрганизацииВал);
	СоответствиеСчетов.Вставить("50.23", ПС.ДенежныеДокументыВал);
	
	СоответствиеСчетов.Вставить("51", ПС.РасчетныеСчета);
	СоответствиеСчетов.Вставить("51.02", ПС.ОперационнаяКасса);
	СоответствиеСчетов.Вставить("51.21", ПС.КассаОрганизацииВал);
	
	СоответствиеСчетов.Вставить("52", ПС.ВалютныеСчета);
	
	СоответствиеСчетов.Вставить("55", ПС.СпециальныеСчета);
	СоответствиеСчетов.Вставить("55.01", ПС.Аккредитивы);
	СоответствиеСчетов.Вставить("55.02", ПС.ЧековыеКнижки);
	СоответствиеСчетов.Вставить("55.03", ПС.ДепозитныеСчета);
	СоответствиеСчетов.Вставить("55.04", ПС.ПрочиеСпециальныеСчета);
	СоответствиеСчетов.Вставить("55.21", ПС.АккредитивыВал);
	СоответствиеСчетов.Вставить("55.23", ПС.ДепозитныеСчетаВал);
	СоответствиеСчетов.Вставить("55.24", ПС.ПрочиеСпециальныеСчетаВал);
	
	СоответствиеСчетов.Вставить("57", ПС.ПереводыВПути_);
	СоответствиеСчетов.Вставить("57.01", ПС.ПереводыВПути);
	СоответствиеСчетов.Вставить("57.21", ПС.ПереводыВПутиВал);
	
	Если ЭтоБалансДляУПП_КА Тогда
		СоответствиеСчетов.Вставить("57.02", ПС.ПокупкаИностраннойВалюты); // 57.11
		СоответствиеСчетов.Вставить("57.22", ПС.ПродажаИностраннойВалюты); // 57.22
		СоответствиеСчетов.Вставить("57.03", ПС.ПустаяСсылка()); // счет отсутсвует
	Иначе
		СоответствиеСчетов.Вставить("57.02", ПС.ПриобретениеИностраннойВалюты);
		СоответствиеСчетов.Вставить("57.22", ПС.РеализацияИностраннойВалюты);
		СоответствиеСчетов.Вставить("57.03", ПС.ПродажиПоПлатежнымКартам);
	КонецЕсли;
	
	СоответствиеСчетов.Вставить("58.01.1", ПС.Паи);
	СоответствиеСчетов.Вставить("58.01.2", ПС.Акции);
	СоответствиеСчетов.Вставить("58.02", ПС.ДолговыеЦенныеБумаги);
	СоответствиеСчетов.Вставить("58.03", ПС.ПредоставленныеЗаймы);
	СоответствиеСчетов.Вставить("58.04", ПС.ВкладыПоДоговоруПростогоТоварищества);
	СоответствиеСчетов.Вставить("58.05", ПС.ПриобретенныеПрава);
	СоответствиеСчетов.Вставить("59", ПС.РезервыПодОбесценениеФинансовыхВложений);
	
	СоответствиеСчетов.Вставить("60.01", ПС.РасчетыСПоставщиками);
	СоответствиеСчетов.Вставить("60.02", ПС.РасчетыПоАвансамВыданным);
	СоответствиеСчетов.Вставить("60.03", ПС.ВекселяВыданные);
	СоответствиеСчетов.Вставить("60.21", ПС.РасчетыСПоставщикамиВал);
	СоответствиеСчетов.Вставить("60.22", ПС.РасчетыПоАвансамВыданнымВал);
	СоответствиеСчетов.Вставить("60.31", ПС.РасчетыСПоставщикамиУЕ);
	СоответствиеСчетов.Вставить("60.32", ПС.РасчетыПоАвансамВыданнымУЕ);
	
	СоответствиеСчетов.Вставить("62.01", ПС.РасчетыСПокупателями);
	СоответствиеСчетов.Вставить("62.02", ПС.РасчетыПоАвансамПолученным);
	СоответствиеСчетов.Вставить("62.03", ПС.ВекселяПолученные);
	СоответствиеСчетов.Вставить("62.21", ПС.РасчетыСПокупателямиВал);
	СоответствиеСчетов.Вставить("62.22", ПС.РасчетыПоАвансамПолученнымВал);
	СоответствиеСчетов.Вставить("62.31", ПС.РасчетыСПокупателямиУЕ);
	СоответствиеСчетов.Вставить("62.32", ПС.РасчетыПоАвансамПолученнымУЕ);
	
	СоответствиеСчетов.Вставить("63", ПС.РезервыПоСомнительнымДолгам);
	
	СоответствиеСчетов.Вставить("66", ПС.РасчетыПоКраткосрочнымКредитамИЗаймам);
	СоответствиеСчетов.Вставить("66.01", ПС.КраткосрочныеКредиты);
	СоответствиеСчетов.Вставить("66.02", ПС.ПроцентыПоКраткосрочнымКредитам);
	СоответствиеСчетов.Вставить("66.03", ПС.КраткосрочныеЗаймы);
	СоответствиеСчетов.Вставить("66.04", ПС.ПроцентыПоКраткосрочнымЗаймам);
	СоответствиеСчетов.Вставить("66.21", ПС.КраткосрочныеКредитыВал);
	СоответствиеСчетов.Вставить("66.22", ПС.ПроцентыПоКраткосрочнымКредитамВал);
	СоответствиеСчетов.Вставить("66.23", ПС.КраткосрочныеЗаймыВал);
	СоответствиеСчетов.Вставить("66.24", ПС.ПроцентыПоКраткосрочнымЗаймамВал);
	
	СоответствиеСчетов.Вставить("67", ПС.РасчетыПоДолгосрочнымКредитамИЗаймам);
	СоответствиеСчетов.Вставить("67.01", ПС.ДолгосрочныеКредиты);
	СоответствиеСчетов.Вставить("67.02", ПС.ПроцентыПоДолгосрочнымКредитам);
	СоответствиеСчетов.Вставить("67.03", ПС.ДолгосрочныеЗаймы);
	СоответствиеСчетов.Вставить("67.04", ПС.ПроцентыПоДолгосрочнымЗаймам);
	СоответствиеСчетов.Вставить("67.21", ПС.ДолгосрочныеКредитыВал);
	СоответствиеСчетов.Вставить("67.22", ПС.ПроцентыПоДолгосрочнымКредитамВал);
	СоответствиеСчетов.Вставить("67.23", ПС.ДолгосрочныеЗаймыВал);
	СоответствиеСчетов.Вставить("67.24", ПС.ПроцентыПоДолгосрочнымЗаймамВал);
	
	СоответствиеСчетов.Вставить("68", ПС.РасчетыПоНалогам);
	СоответствиеСчетов.Вставить("68.01", ПС.НДФЛ);
	СоответствиеСчетов.Вставить("68.02", ПС.НДС);
	СоответствиеСчетов.Вставить("68.03", ПС.Акцизы);
	СоответствиеСчетов.Вставить("68.04", ПС.НалогНаПрибыль);
	СоответствиеСчетов.Вставить("68.04.1", ПС.РасчетыСБюджетом);
	СоответствиеСчетов.Вставить("68.04.2", ПС.РасчетНалогаНаПрибыль);
	СоответствиеСчетов.Вставить("68.07", ПС.ТранспортныйНалог);
	СоответствиеСчетов.Вставить("68.08", ПС.НалогНаИмущество);
	СоответствиеСчетов.Вставить("68.09", ПС.НалогНаРекламу);
	СоответствиеСчетов.Вставить("68.10", ПС.ПрочиеНалогиИСборы);
	СоответствиеСчетов.Вставить("68.11", ПС.ЕНВД);
	СоответствиеСчетов.Вставить("68.12", ПС.ЕНприУСН);
	СоответствиеСчетов.Вставить("68.13", ПС.ТорговыйСбор);
	СоответствиеСчетов.Вставить("68.22", ПС.НДСпоЭкспортуКВозмещению);
	СоответствиеСчетов.Вставить("68.32", ПС.НДСНалоговогоАгента);
	
	СоответствиеСчетов.Вставить("69", ПС.РасчетыПоСоциальномуСтрахованию);
	СоответствиеСчетов.Вставить("69.01", ПС.ФСС);
	
	СоответствиеСчетов.Вставить("69.02", ПС.ПФР);
	СоответствиеСчетов.Вставить("69.02.1", ПС.ПФР_страх);
	СоответствиеСчетов.Вставить("69.02.2", ПС.ПФР_нак);
	СоответствиеСчетов.Вставить("69.02.3", ПС.ПФР_доп);
	СоответствиеСчетов.Вставить("69.02.4", ПС.ПФР_доп_шахтеры);
	СоответствиеСчетов.Вставить("69.02.5", ПС.ПФР_доп_ВредныеУсловияТруда);
	СоответствиеСчетов.Вставить("69.02.6", ПС.ПФР_доп_ТяжелыеУсловияТруда);
	СоответствиеСчетов.Вставить("69.02.7", ПС.ПФР_ОПС);
	
	СоответствиеСчетов.Вставить("69.03", ПС.ФОМС);
	СоответствиеСчетов.Вставить("69.03.1", ПС.ФФОМС);
	СоответствиеСчетов.Вставить("69.03.2", ПС.ТФОМС);
	СоответствиеСчетов.Вставить("69.04", ПС.ЕСН_ФБ);
	
	СоответствиеСчетов.Вставить("69.05", ПС.ПФР_ДОБР);
	СоответствиеСчетов.Вставить("69.05.1", ПС.ПФР_ДОБР_орг);
	СоответствиеСчетов.Вставить("69.05.2", ПС.ПФР_ДОБР_сотр);
	
	СоответствиеСчетов.Вставить("69.06.1", ПС.ПФР_Страх_СтраховойГод);
	СоответствиеСчетов.Вставить("69.06.2", ПС.ПФР_Нак_СтраховойГод);
	СоответствиеСчетов.Вставить("69.06.3", ПС.ФОМС_СтраховойГод);
	СоответствиеСчетов.Вставить("69.06.4", ПС.ФСС_СтраховойГод);
	СоответствиеСчетов.Вставить("69.06.5", ПС.ПФР_ОПС_ИП);
	
	СоответствиеСчетов.Вставить("69.11", ПС.ФСС_НСиПЗ);
	СоответствиеСчетов.Вставить("69.12", ПС.ФСС_ДобровольныеВзносы);
	СоответствиеСчетов.Вставить("69.13", ПС.ФСС_СПЕЦ);
	СоответствиеСчетов.Вставить("69.13.1", ПС.ФСС_СПЕЦ_ЕНВД);
	СоответствиеСчетов.Вставить("69.13.2", ПС.ФСС_СПЕЦ_УСН);
	
	СоответствиеСчетов.Вставить("70", ПС.РасчетыСПерсоналомПоОплатеТруда);
	СоответствиеСчетов.Вставить("71", ПС.РасчетыСПодотчетнымиЛицами_);
	СоответствиеСчетов.Вставить("71.01", ПС.РасчетыСПодотчетнымиЛицами);
	СоответствиеСчетов.Вставить("71.21", ПС.РасчетыСПодотчетнымиЛицамиВал);
	
	СоответствиеСчетов.Вставить("73", ПС.РасчетыСПерсоналомПоПрочимОперациям);
	СоответствиеСчетов.Вставить("73.01", ПС.РасчетыПоПредоставленнымЗаймам);
	СоответствиеСчетов.Вставить("73.02", ПС.РасчетыПоВозмещениюМатериальногоУщерба);
	СоответствиеСчетов.Вставить("73.03", ПС.РасчетыПоПрочимОперациям);
	
	СоответствиеСчетов.Вставить("75.01", ПС.РасчетыПоВкладамВУставныйКапитал);
	СоответствиеСчетов.Вставить("75.02", ПС.РасчетыПоВыплатеДоходов);
	
	СоответствиеСчетов.Вставить("76", ПС.РасчетыСРазнымиДебиторамиИКредиторами);
	
	СоответствиеСчетов.Вставить("76.01", ПС.РасчетыПоИмущественномуЛичномуИДобровольномуСтрахованию);
	СоответствиеСчетов.Вставить("76.01.1", ПС.РасчетыПоИмущественномуИЛичномуСтрахованию);
	СоответствиеСчетов.Вставить("76.01.2", ПС.ПлатежиПоДобровольномуСтрахованиюРаботников);
	СоответствиеСчетов.Вставить("76.01.9", ПС.ПлатежиПоПрочимВидамСтрахования);
	
	СоответствиеСчетов.Вставить("76.02", ПС.РасчетыПоПретензиям);
	СоответствиеСчетов.Вставить("76.03", ПС.РасчетыПоПричитающимсяДивидендам);
	СоответствиеСчетов.Вставить("76.04", ПС.РасчетыПоДепонированнымСуммам);
	СоответствиеСчетов.Вставить("76.05", ПС.РасчетыСПрочимиПоставщикамиИПодрядчиками);
	СоответствиеСчетов.Вставить("76.06", ПС.РасчетыСПрочимиПокупателямиИЗаказчиками);
	СоответствиеСчетов.Вставить("76.09", ПС.ПрочиеРасчетыСРазнымиДебиторамиИКредиторами);
	СоответствиеСчетов.Вставить("76.21", ПС.РасчетыПоИмущественномуИЛичномуСтрахованиюВал);
	СоответствиеСчетов.Вставить("76.22", ПС.РасчетыПоПретензиямВал);
	СоответствиеСчетов.Вставить("76.25", ПС.РасчетыСПрочимиПоставщикамиИПодрядчикамиВал);
	СоответствиеСчетов.Вставить("76.26", ПС.РасчетыСПрочимиПокупателямиИЗаказчикамиВал);
	СоответствиеСчетов.Вставить("76.29", ПС.ПрочиеРасчетыСРазнымиДебиторамиИКредиторамиВал);
	СоответствиеСчетов.Вставить("76.32", ПС.РасчетыПоПретензиямУЕ);
	СоответствиеСчетов.Вставить("76.35", ПС.РасчетыСПрочимиПоставщикамиИПодрядчикамиУЕ);
	СоответствиеСчетов.Вставить("76.36", ПС.РасчетыСПрочимиПокупателямиИЗаказчикамиУЕ);
	СоответствиеСчетов.Вставить("76.39", ПС.ПрочиеРасчетыСРазнымиДебиторамиИКредиторамиУЕ);
	СоответствиеСчетов.Вставить("76.41", ПС.РасчетыПоИсполнительнымДокументамРаботников);
	
	СоответствиеСчетов.Вставить("76.АВ", ПС.НДСпоАвансамИПредоплатам);
	СоответствиеСчетов.Вставить("76.ВА", ПС.НДСпоАвансамИПредоплатамВыданным);
	
	СоответствиеСчетов.Вставить("76.К", ПС.КорректировкаРасчетовПрошлогоПериода);
	
	СоответствиеСчетов.Вставить("76.Н", ПС.РасчетыПоНДСотложенномуДляУплатыВБюджет);
	СоответствиеСчетов.Вставить("76.НА", ПС.РасчетыНДСНалоговогоАгента);
	СоответствиеСчетов.Вставить("76.ОТ", ПС.НДСНачисленныйПоОтгрузке);
	
	СоответствиеСчетов.Вставить("77", ПС.ОтложенныеНалоговыеОбязательства);
	СоответствиеСчетов.Вставить("79", ПС.ВнутрихозяйственныеРасчеты);
	
	СоответствиеСчетов.Вставить("80", ПС.УставныйКапитал);
	СоответствиеСчетов.Вставить("81", ПС.СобственныеАкции);
	СоответствиеСчетов.Вставить("82", ПС.РезервныйКапитал);
	СоответствиеСчетов.Вставить("82.01", ПС.РезервыОбразованныеВСоответствииСЗаконодательством);
	СоответствиеСчетов.Вставить("82.02", ПС.РезервыОбразованныеВСоответствииСУчредительнымиДокументами);
	
	СоответствиеСчетов.Вставить("83", ПС.ДобавочныйКапитал);
	
	СоответствиеСчетов.Вставить("83.01", ПС.ПриростСтоимостиПоПереоценке);
	СоответствиеСчетов.Вставить("83.01.1", ПС.ПриростСтоимостиИмуществаПоПереоценке);
	СоответствиеСчетов.Вставить("83.01.2", ПС.ПриростСтоимостиНМАПоПереоценке);
	СоответствиеСчетов.Вставить("83.01.3", ПС.ПриростСтоимостиПрочихВнеоборотныхАктивоПоПереоценке);
	
	СоответствиеСчетов.Вставить("84", ПС.НераспределеннаяПрибыль);
	СоответствиеСчетов.Вставить("84.01", ПС.ПрибыльПодлежащаяРаспределению);
	СоответствиеСчетов.Вставить("84.02", ПС.УбытокПодлежащийПокрытию);
	
	СоответствиеСчетов.Вставить("86", ПС.ЦелевоеФинансирование);
	
	СоответствиеСчетов.Вставить("90",    ПС.Продажи);
	СоответствиеСчетов.Вставить("90.01", ПС.Выручка);
	СоответствиеСчетов.Вставить("90.02", ПС.СебестоимостьПродаж);
	СоответствиеСчетов.Вставить("90.03", ПС.Продажи_НДС);
	СоответствиеСчетов.Вставить("90.04", ПС.Продажи_Акцизы);
	СоответствиеСчетов.Вставить("90.05", ПС.Продажи_ЭкспортныеПошлины);
	СоответствиеСчетов.Вставить("90.08", ПС.Продажи_УправленческиеРасходы);
	СоответствиеСчетов.Вставить("90.07", ПС.Продажи_РасходыНаПродажу);
	
	Если ЭтоБалансДляУПП_КА Тогда
		СоответствиеСчетов.Вставить("90.01.1", ПС.ВыручкаНеОблагаемаяЕНВД);
		СоответствиеСчетов.Вставить("90.01.2", ПС.ВыручкаОблагаемаяЕНВД);
		СоответствиеСчетов.Вставить("90.02.1", ПС.СебестоимостьПродажНеОблагаемаяЕНВД);
		СоответствиеСчетов.Вставить("90.02.2", ПС.СебестоимостьПродажОблагаемаяЕНВД);
		СоответствиеСчетов.Вставить("90.07.1", ПС.Продажи_РасходыНаПродажуНеОблагаемыеЕНВД);
		СоответствиеСчетов.Вставить("90.07.2", ПС.Продажи_РасходыНаПродажуОблагаемыеЕНВД);
		СоответствиеСчетов.Вставить("90.08.1", ПС.Продажи_УправленческиеРасходыНеОблагаемыеЕНВД);
		СоответствиеСчетов.Вставить("90.08.2", ПС.Продажи_УправленческиеРасходыОблагаемыеЕНВД);
	Иначе
		СоответствиеСчетов.Вставить("90.01.1", ПС.ВыручкаНеЕНВД);
		СоответствиеСчетов.Вставить("90.01.2", ПС.ВыручкаЕНВД);
		СоответствиеСчетов.Вставить("90.02.1", ПС.СебестоимостьПродажНеЕНВД);
		СоответствиеСчетов.Вставить("90.02.2", ПС.СебестоимостьПродажЕНВД);
		СоответствиеСчетов.Вставить("90.07.1", ПС.Продажи_РасходыНаПродажуНеЕНВД);
		СоответствиеСчетов.Вставить("90.07.2", ПС.Продажи_РасходыНаПродажуЕНВД);
		СоответствиеСчетов.Вставить("90.08.1", ПС.Продажи_УправленческиеРасходыНеЕНВД);
		СоответствиеСчетов.Вставить("90.08.2", ПС.Продажи_УправленческиеРасходыЕНВД);
	КонецЕсли;
	
	СоответствиеСчетов.Вставить("91", ПС.ПрочиеДоходыИРасходы);
	СоответствиеСчетов.Вставить("91.01", ПС.ПрочиеДоходы);
	СоответствиеСчетов.Вставить("91.02", ПС.ПрочиеРасходы);
	
	СоответствиеСчетов.Вставить("99", ПС.ПрибылиИУбытки);
	СоответствиеСчетов.Вставить("99.01", ПС.ПрибылиИУбыткиБезНалогаНаПрибыль);
	
	СоответствиеСчетов.Вставить("99.02", ПС.ПрибылиИУбытки_НалогНаПрибыль);
	СоответствиеСчетов.Вставить("99.02.3", ПС.ПостоянноеНалоговоеОбязательство);
	СоответствиеСчетов.Вставить("99.02.4", ПС.ПрибылиИУбыткиОтПересчетаОНА_ОНО);
	
	Если ЭтоБалансДляУПП_КА Тогда
		СоответствиеСчетов.Вставить("99.01.1", ПС.ПрибылиИУбыткиНеОблагаемыеЕНВД);
		СоответствиеСчетов.Вставить("99.01.2", ПС.ПрибылиИУбыткиОблагаемыеЕНВД);
	Иначе
		СоответствиеСчетов.Вставить("99.01.1", ПС.ПрибылиИУбыткиНеЕНВД);
		СоответствиеСчетов.Вставить("99.01.2", ПС.ПрибылиИУбыткиЕНВД);
	КонецЕсли;
	СоответствиеСчетов.Вставить("99.09", ПС.ПрочиеПрибылиИУбытки);
	
	СоответствиеСчетов.Вставить("94", ПС.НедостачиИПотериОтПорчиЦенностей);
	
	СоответствиеСчетов.Вставить("96", ПС.РезервыПредстоящихРасходов);
	
	СоответствиеСчетов.Вставить("97", ПС.РасходыБудущихПериодов);
	СоответствиеСчетов.Вставить("98", ПС.ДоходыБудущихПериодов);
	СоответствиеСчетов.Вставить("98.01", ПС.ДоходыПолученныеВСчетБудущихПериодов);
	СоответствиеСчетов.Вставить("98.02", ПС.БезвозмездныеПоступления);
	СоответствиеСчетов.Вставить("98.03", ПС.ПредстоящиеПоступленияПоНедостачамВыявленнымЗаПрошлыеГоды);
	СоответствиеСчетов.Вставить("98.04", ПС.РазницаМеждуСуммойПодлежащейВзысканиюСВиновныхЛицИБалансовойСтоимостьюПоНедостачамЦенностей);
	
	Если ЭтоБалансДляАУ Тогда
		СоответствиеСчетов.Вставить("01.11", ПС.ОСвРамкахЦелевогоФинансирования);
		СоответствиеСчетов.Вставить("08.14", ПС.ПриобретениеОСВРамкахЦелевогоФинансирования);
		СоответствиеСчетов.Вставить("76.51", ПС.РасчетыПоЦелевомуФинансированию);
		СоответствиеСчетов.Вставить("76.52", ПС.РасчетыПоЦелевомуФинансированиюВал);
	КонецЕсли;
	
	СоответствиеСчетов.Вставить("001", ПС.АрендованныеОсновныеСредства);
	СоответствиеСчетов.Вставить("008", ПС.ОбеспеченияОбязательствПолученные);
	СоответствиеСчетов.Вставить("009", ПС.ОбеспеченияОбязательствВыданные);
	СоответствиеСчетов.Вставить("011", ПС.ОсновныеСредстваСданныеВАренду);
	
КонецПроцедуры

Функция Счет(КодСчета) Экспорт
	
	НайденныйСчет = мСчет[КодСчета];
	
	Если НайденныйСчет = Неопределено Тогда
		ВызватьИсключение "Ошибка. Не определен счет " + КодСчета + " в соответствии счетов";
	КонецЕсли;
	
	Возврат НайденныйСчет;
	
КонецФункции

Функция СчетаВИерархии(СчетГруппа) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СчетГруппа", СчетГруппа);
	Запрос.Текст = "ВЫБРАТЬ
	               |	Хозрасчетный.Ссылка КАК Счет
	               |ИЗ
	               |	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	               |ГДЕ
	               |	Хозрасчетный.Ссылка В ИЕРАРХИИ(&СчетГруппа)";
	Субсчета = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Счет");
	
	Возврат Субсчета;
	
КонецФункции

Функция МассивСчетовВИерархииИзСписка(Знач СписокСчетов, ИмяСпискаСчетов = Неопределено) Экспорт
	
	МассивСчетов = МассивСчетовИзСписка(СписокСчетов, ИмяСпискаСчетов);
	МассивСчетов = СформироватьМассивСубсчетов(МассивСчетов);
	
	Возврат МассивСчетов;
	
КонецФункции

Функция МассивСчетовИзСписка(Знач СписокСчетов, ИмяСпискаСчетов = Неопределено) Экспорт
	
	МассивСчетов = Новый Массив;
	
	Разделитель = ",";
	
	Если ТипЗнч(СписокСчетов) = Тип("Структура") Тогда
		ЭлементСтруктуры = Неопределено;
		Если Не СписокСчетов.Свойство(ИмяСпискаСчетов, ЭлементСтруктуры) Тогда
			ЭлементСтруктуры = "";
		КонецЕсли;
		СписокСчетов = ЭлементСтруктуры;
	КонецЕсли;
	
	Пока НЕ ПустаяСтрока(СписокСчетов) Цикл
		ПозицияРазделителя = Найти(СписокСчетов, Разделитель);
		Если ПозицияРазделителя > 0 Тогда
			КодСчета = СокрЛП(Лев(СписокСчетов, ПозицияРазделителя - 1));
			СписокСчетов = Сред(СписокСчетов, ПозицияРазделителя + 1);
		Иначе
			КодСчета = СокрЛП(СписокСчетов);
			СписокСчетов = "";
		КонецЕсли;
		Если Не ПустаяСтрока(КодСчета) Тогда
			МассивСчетов.Добавить(Счет(КодСчета));
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивСчетов;
	
КонецФункции

Функция СформироватьМассивСубсчетов(МассивСчетов) Экспорт
	
	МассивСубсчетов = Новый Массив;
	
	Для Каждого СчетВерхнегоУровня Из МассивСчетов Цикл
		Субсчета = СчетаВИерархии(СчетВерхнегоУровня);
		ДополнитьМассив(МассивСубсчетов, Субсчета);
	КонецЦикла;
	
	Возврат МассивСубсчетов;
	
КонецФункции

Процедура ДополнитьМассив(МассивПриемник, МассивИсточник, ТолькоУникальныеЗначения = Ложь) Экспорт
	
	УникальныеЗначения = Новый Соответствие;
	
	Если ТолькоУникальныеЗначения Тогда
		Для Каждого Значение Из МассивПриемник Цикл
			УникальныеЗначения.Вставить(Значение, Истина);
		КонецЦикла;
	КонецЕсли;
	
	Для каждого Значение Из МассивИсточник Цикл
		Если ТолькоУникальныеЗначения И УникальныеЗначения[Значение] <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		МассивПриемник.Добавить(Значение);
		УникальныеЗначения.Вставить(Значение, Истина);
	КонецЦикла;
	
КонецПроцедуры

Функция Обороты91ПоВПДР(ПараметрыИтогов) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВидыПрочихДоходовИРасходов.Ссылка КАК ВПДР
	               |ПОМЕСТИТЬ ВТ_ВПДР
	               |ИЗ
	               |	Перечисление.ВидыПрочихДоходовИРасходов КАК ВидыПрочихДоходовИРасходов
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ВПДР
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ОбъединениеДанных.ВПДР КАК ВПДР,
	               |	СУММА(ОбъединениеДанных.КО_91_01) КАК КО_91_01,
	               |	СУММА(ОбъединениеДанных.ДО_91_02) КАК ДО_91_02,
	               |	СУММА(ОбъединениеДанных.ДО_91_02__68_02) КАК ДО_91_02__68_02,
	               |	СУММА(ОбъединениеДанных.ДО_91_02__76_ОТ) КАК ДО_91_02__76_ОТ
	               |ПОМЕСТИТЬ ВТ_ОборотыПоСчетам
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		ВЫБОР
	               |			КОГДА ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.ПрочиеДоходыИРасходы).ВидПрочихДоходовИРасходов ЕСТЬ NULL 
	               |					ИЛИ ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.ПрочиеДоходыИРасходы).ВидПрочихДоходовИРасходов = ЗНАЧЕНИЕ(Перечисление.ВидыПрочихДоходовИРасходов.ПустаяСсылка)
	               |				ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПрочихДоходовИРасходов.ПрочиеВнереализационныеДоходыРасходы)
	               |			ИНАЧЕ ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.ПрочиеДоходыИРасходы).ВидПрочихДоходовИРасходов
	               |		КОНЕЦ КАК ВПДР,
	               |		ХозрасчетныйОбороты.СуммаОборотКт КАК КО_91_01,
	               |		0 КАК ДО_91_02,
	               |		0 КАК ДО_91_02__68_02,
	               |		0 КАК ДО_91_02__76_ОТ
	               |	ИЗ
	               |		РегистрБухгалтерии.Хозрасчетный.Обороты(&НачПериода, &КонПериода, Период, Счет В (&Счет91_01), &СубконтроПрочихДоходовИРасходов, Организация = &Организация, , ) КАК ХозрасчетныйОбороты
	               |	
	               |	ОБЪЕДИНИТЬ ВСЕ
	               |	
	               |	ВЫБРАТЬ
	               |		ВЫБОР
	               |			КОГДА ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.ПрочиеДоходыИРасходы).ВидПрочихДоходовИРасходов ЕСТЬ NULL 
	               |					ИЛИ ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.ПрочиеДоходыИРасходы).ВидПрочихДоходовИРасходов = ЗНАЧЕНИЕ(Перечисление.ВидыПрочихДоходовИРасходов.ПустаяСсылка)
	               |				ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПрочихДоходовИРасходов.ПрочиеВнереализационныеДоходыРасходы)
	               |			ИНАЧЕ ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.ПрочиеДоходыИРасходы).ВидПрочихДоходовИРасходов
	               |		КОНЕЦ,
	               |		0,
	               |		ХозрасчетныйОбороты.СуммаОборотДт,
	               |		0,
	               |		0
	               |	ИЗ
	               |		РегистрБухгалтерии.Хозрасчетный.Обороты(&НачПериода, &КонПериода, Период, Счет В (&Счет91_02), &СубконтроПрочихДоходовИРасходов, Организация = &Организация, , ) КАК ХозрасчетныйОбороты
	               |	
	               |	ОБЪЕДИНИТЬ ВСЕ
	               |	
	               |	ВЫБРАТЬ
	               |		ВЫБОР
	               |			КОГДА ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.ПрочиеДоходыИРасходы).ВидПрочихДоходовИРасходов ЕСТЬ NULL 
	               |					ИЛИ ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.ПрочиеДоходыИРасходы).ВидПрочихДоходовИРасходов = ЗНАЧЕНИЕ(Перечисление.ВидыПрочихДоходовИРасходов.ПустаяСсылка)
	               |				ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПрочихДоходовИРасходов.ПрочиеВнереализационныеДоходыРасходы)
	               |			ИНАЧЕ ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.ПрочиеДоходыИРасходы).ВидПрочихДоходовИРасходов
	               |		КОНЕЦ,
	               |		0,
	               |		0,
	               |		ХозрасчетныйОбороты.СуммаОборотДт,
	               |		0
	               |	ИЗ
	               |		РегистрБухгалтерии.Хозрасчетный.Обороты(&НачПериода, &КонПериода, Период, Счет В (&Счет91_02), &СубконтроПрочихДоходовИРасходов, Организация = &Организация, КорСчет В (&Счет68_02), ) КАК ХозрасчетныйОбороты
	               |	
	               |	ОБЪЕДИНИТЬ ВСЕ
	               |	
	               |	ВЫБРАТЬ
	               |		ВЫБОР
	               |			КОГДА ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.ПрочиеДоходыИРасходы).ВидПрочихДоходовИРасходов ЕСТЬ NULL 
	               |					ИЛИ ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.ПрочиеДоходыИРасходы).ВидПрочихДоходовИРасходов = ЗНАЧЕНИЕ(Перечисление.ВидыПрочихДоходовИРасходов.ПустаяСсылка)
	               |				ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПрочихДоходовИРасходов.ПрочиеВнереализационныеДоходыРасходы)
	               |			ИНАЧЕ ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.ПрочиеДоходыИРасходы).ВидПрочихДоходовИРасходов
	               |		КОНЕЦ,
	               |		0,
	               |		0,
	               |		0,
	               |		ХозрасчетныйОбороты.СуммаОборотДт
	               |	ИЗ
	               |		РегистрБухгалтерии.Хозрасчетный.Обороты(&НачПериода, &КонПериода, Период, Счет В (&Счет91_02), &СубконтроПрочихДоходовИРасходов, Организация = &Организация, КорСчет В (&Счет76_ОТ), ) КАК ХозрасчетныйОбороты) КАК ОбъединениеДанных
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ОбъединениеДанных.ВПДР
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ВПДР
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_ВПДР.ВПДР КАК ВПДР,
	               |	ЕСТЬNULL(ВТ_ОборотыПоСчетам.КО_91_01, 0) КАК КО_91_01,
	               |	ЕСТЬNULL(ВТ_ОборотыПоСчетам.ДО_91_02, 0) КАК ДО_91_02,
	               |	ЕСТЬNULL(ВТ_ОборотыПоСчетам.ДО_91_02__68_02, 0) КАК ДО_91_02__68_02,
	               |	ЕСТЬNULL(ВТ_ОборотыПоСчетам.ДО_91_02__76_ОТ, 0) КАК ДО_91_02__76_ОТ
	               |ИЗ
	               |	ВТ_ВПДР КАК ВТ_ВПДР
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ОборотыПоСчетам КАК ВТ_ОборотыПоСчетам
	               |		ПО ВТ_ВПДР.ВПДР = ВТ_ОборотыПоСчетам.ВПДР";
	
	НачалоПериода = ПараметрыИтогов.НачалоПериода;
	КонецПериода  = ПараметрыИтогов.КонецПериода;
	
	Запрос.УстановитьПараметр("НачПериода",  НачалоПериода);
	Запрос.УстановитьПараметр("КонПериода",  КонецПериода);
	Запрос.УстановитьПараметр("Организация", ПараметрыИтогов.Организация);
	Запрос.УстановитьПараметр("Счет91_01",   СчетаВИерархии(Счет("91.01")));
	Запрос.УстановитьПараметр("Счет91_02",   СчетаВИерархии(Счет("91.02")));
	Запрос.УстановитьПараметр("Счет68_02",   СчетаВИерархии(Счет("68.02")));
	Запрос.УстановитьПараметр("Счет76_ОТ",   СчетаВИерархии(Счет("76.ОТ")));
	Запрос.УстановитьПараметр("СубконтроПрочихДоходовИРасходов", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы);
	
	КО_91_01_ВПДР = Новый Структура;
	ДО_91_02_ВПДР = Новый Структура;
	ДО_91_02__68_02_ВПДР = Новый Структура;
	ДО_91_02__76_ОТ_ВПДР = Новый Структура;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ИмяВидаПДР = ОбщегоНазначения.ИмяЗначенияПеречисления(Выборка.ВПДР);
		КО_91_01_ВПДР.Вставить(ИмяВидаПДР, Выборка.КО_91_01);
		ДО_91_02_ВПДР.Вставить(ИмяВидаПДР, Выборка.ДО_91_02);
		ДО_91_02__68_02_ВПДР.Вставить(ИмяВидаПДР, Выборка.ДО_91_02__68_02);
		ДО_91_02__76_ОТ_ВПДР.Вставить(ИмяВидаПДР, Выборка.ДО_91_02__76_ОТ);
	КонецЦикла;
	
	Результат = Новый Структура;
	Результат.Вставить("КО_91_01_ВПДР", КО_91_01_ВПДР);
	Результат.Вставить("ДО_91_02_ВПДР", ДО_91_02_ВПДР);
	Результат.Вставить("ДО_91_02__68_02_ВПДР", ДО_91_02__68_02_ВПДР);
	Результат.Вставить("ДО_91_02__76_ОТ_ВПДР", ДО_91_02__76_ОТ_ВПДР);
	
	Возврат Результат;
	
КонецФункции

Функция Обороты91ПоПереоценке(ПараметрыИтогов) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	СуммированиеДанных.Счет КАК Счет,
	               |	СУММА(СуммированиеДанных.СуммаОборотДт1) КАК СуммаОборотДт1,
	               |	СУММА(СуммированиеДанных.СуммаОборотКт1) КАК СуммаОборотКт1,
	               |	СУММА(СуммированиеДанных.СуммаОборотДт2) КАК СуммаОборотДт2,
	               |	СУММА(СуммированиеДанных.СуммаОборотКт2) КАК СуммаОборотКт2
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		ХозрасчетныйОбороты.Счет КАК Счет,
	               |		ХозрасчетныйОбороты.СуммаОборотДт КАК СуммаОборотДт1,
	               |		ХозрасчетныйОбороты.СуммаОборотКт КАК СуммаОборотКт1,
	               |		0 КАК СуммаОборотДт2,
	               |		0 КАК СуммаОборотКт2
	               |	ИЗ
	               |		РегистрБухгалтерии.Хозрасчетный.Обороты(&НачПериода, &КонПериода, ПЕРИОД, Счет В (&Счета), &ВидСубконто, Организация = &Организация, КорСчет В (&КорСчета1), ) КАК ХозрасчетныйОбороты
	               |	ГДЕ
	               |		ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.ПрочиеДоходыИРасходы).ВидПрочихДоходовИРасходов = &ВидПрочихДоходовИРасходов
	               |	
	               |	ОБЪЕДИНИТЬ ВСЕ
	               |	
	               |	ВЫБРАТЬ
	               |		ХозрасчетныйОбороты.Счет,
	               |		0,
	               |		0,
	               |		ХозрасчетныйОбороты.СуммаОборотДт,
	               |		ХозрасчетныйОбороты.СуммаОборотКт
	               |	ИЗ
	               |		РегистрБухгалтерии.Хозрасчетный.Обороты(&НачПериода, &КонПериода, ПЕРИОД, Счет В (&Счета), &ВидСубконто, Организация = &Организация, КорСчет В (&КорСчета2), ) КАК ХозрасчетныйОбороты
	               |	ГДЕ
	               |		ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.ПрочиеДоходыИРасходы).ВидПрочихДоходовИРасходов = &ВидПрочихДоходовИРасходов) КАК СуммированиеДанных
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	СуммированиеДанных.Счет";
	
	НачалоПериода = ПараметрыИтогов.НачалоПериода;
	КонецПериода  = ПараметрыИтогов.КонецПериода;
	
	Счета = Новый Массив();
	Счета.Добавить(Счет("91.01"));
	Счета.Добавить(Счет("91.02"));
	Счета = СформироватьМассивСубсчетов(Счета);
	
	КорСчета1 = Новый Массив();
	КорСчета1.Добавить(Счет("01"));
	КорСчета1.Добавить(Счет("03"));
	КорСчета1.Добавить(Счет("04"));
	КорСчета1 = СформироватьМассивСубсчетов(КорСчета1);
	
	КорСчета2 = Новый Массив();
	КорСчета2.Добавить(Счет("02"));
	КорСчета2.Добавить(Счет("05"));
	КорСчета2 = СформироватьМассивСубсчетов(КорСчета2);
	
	Запрос.УстановитьПараметр("НачПериода",  НачалоПериода);
	Запрос.УстановитьПараметр("КонПериода",  КонецПериода);
	Запрос.УстановитьПараметр("Организация", ПараметрыИтогов.Организация);
	Запрос.УстановитьПараметр("Счета",       Счета);
	Запрос.УстановитьПараметр("КорСчета1",   КорСчета1);
	Запрос.УстановитьПараметр("КорСчета2",   КорСчета2);
	Запрос.УстановитьПараметр("ВидСубконто", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы);
	Запрос.УстановитьПараметр("ВидПрочихДоходовИРасходов", Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов);
	
	КО_91_01__010304_ПереоценкаВнеоборотныхАктивов = 0;
	КО_91_01__0205_ПереоценкаВнеоборотныхАктивов   = 0;
	ДО_91_02__010304_ПереоценкаВнеоборотныхАктивов = 0;
	ДО_91_02__0205_ПереоценкаВнеоборотныхАктивов   = 0;
	
	Счет_91_01 = СчетаВИерархии(Счет("91.01"));
	Счет_91_02 = СчетаВИерархии(Счет("91.02"));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Счет_91_01.Найти(Выборка.Счет) <> Неопределено Тогда
			КО_91_01__010304_ПереоценкаВнеоборотныхАктивов = КО_91_01__010304_ПереоценкаВнеоборотныхАктивов + Выборка.СуммаОборотКт1;
			КО_91_01__0205_ПереоценкаВнеоборотныхАктивов   = КО_91_01__0205_ПереоценкаВнеоборотныхАктивов + Выборка.СуммаОборотКт2;
		ИначеЕсли Счет_91_02.Найти(Выборка.Счет) <> Неопределено Тогда
			ДО_91_02__010304_ПереоценкаВнеоборотныхАктивов = ДО_91_02__010304_ПереоценкаВнеоборотныхАктивов + Выборка.СуммаОборотДт1;
			ДО_91_02__0205_ПереоценкаВнеоборотныхАктивов   = ДО_91_02__0205_ПереоценкаВнеоборотныхАктивов + Выборка.СуммаОборотДт2;
		КонецЕсли;
	КонецЦикла;
	
	Результат = Новый Структура;
	Результат.Вставить("КО_91_01__010304_ПереоценкаВнеоборотныхАктивов", КО_91_01__010304_ПереоценкаВнеоборотныхАктивов);
	Результат.Вставить("КО_91_01__0205_ПереоценкаВнеоборотныхАктивов",   КО_91_01__0205_ПереоценкаВнеоборотныхАктивов);
	Результат.Вставить("ДО_91_02__010304_ПереоценкаВнеоборотныхАктивов", ДО_91_02__010304_ПереоценкаВнеоборотныхАктивов);
	Результат.Вставить("ДО_91_02__0205_ПереоценкаВнеоборотныхАктивов",   ДО_91_02__0205_ПереоценкаВнеоборотныхАктивов);
	
	Возврат Результат;
	
КонецФункции

Функция Обороты91ПоПереоценкеВнеоборотныхАктивов(ПараметрыИтогов) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	Хозрасчетный.Ссылка КАК Счет,
	               |	Хозрасчетный.Ссылка КАК Счет2,
	               |	ВЫБОР
	               |		КОГДА НЕ Хозрасчетный.Родитель.Родитель.Ссылка ЕСТЬ NULL 
	               |			ТОГДА Хозрасчетный.Родитель.Ссылка
	               |		ИНАЧЕ Хозрасчетный.Ссылка
	               |	КОНЕЦ КАК Счет1,
	               |	ВЫБОР
	               |		КОГДА Хозрасчетный.Родитель.Ссылка ЕСТЬ NULL 
	               |			ТОГДА Хозрасчетный.Ссылка
	               |		ИНАЧЕ ВЫБОР
	               |				КОГДА Хозрасчетный.Родитель.Родитель.Ссылка ЕСТЬ NULL 
	               |					ТОГДА Хозрасчетный.Родитель.Ссылка
	               |				ИНАЧЕ Хозрасчетный.Родитель.Родитель.Ссылка
	               |			КОНЕЦ
	               |	КОНЕЦ КАК Счет0
	               |ПОМЕСТИТЬ ВТ_ИерархияСчетов
	               |ИЗ
	               |	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Счет
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ОбъединениеДанных.Счет КАК Счет,
	               |	ВТ_ИерархияСчетовДт.Счет2 КАК Счет2,
	               |	ВТ_ИерархияСчетовДт.Счет1 КАК Счет1,
	               |	ВТ_ИерархияСчетовДт.Счет0 КАК Счет0,
	               |	ОбъединениеДанных.КорСчет КАК КорСчет,
	               |	ВТ_ИерархияСчетовКт.Счет2 КАК КорСчет2,
	               |	ВТ_ИерархияСчетовКт.Счет1 КАК КорСчет1,
	               |	ВТ_ИерархияСчетовКт.Счет0 КАК КорСчет0,
	               |	СУММА(ОбъединениеДанных.СуммаКорОборотДт) КАК СуммаКорОборотДт
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		ХозрасчетныйОборотыДтКт.СчетДт КАК Счет,
	               |		ХозрасчетныйОборотыДтКт.СчетКт КАК КорСчет,
	               |		ХозрасчетныйОборотыДтКт.СуммаОборот КАК СуммаКорОборотДт
	               |	ИЗ
	               |		РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(&НачалоПериода, &КонецПериода, Период, СчетДт В (&Счет), &ВидСубконто, , , Организация = &Организация) КАК ХозрасчетныйОборотыДтКт
	               |	ГДЕ
	               |		ВЫРАЗИТЬ(ХозрасчетныйОборотыДтКт.СубконтоДт1 КАК Справочник.ПрочиеДоходыИРасходы).ВидПрочихДоходовИРасходов = &ЗначениеСубконто
	               |	
	               |	ОБЪЕДИНИТЬ ВСЕ
	               |	
	               |	ВЫБРАТЬ
	               |		ХозрасчетныйОборотыДтКт.СчетДт,
	               |		ХозрасчетныйОборотыДтКт.СчетКт,
	               |		ХозрасчетныйОборотыДтКт.СуммаОборот
	               |	ИЗ
	               |		РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(&НачалоПериода, &КонецПериода, Период, , , СчетКт В (&Счет), &ВидСубконто, Организация = &Организация) КАК ХозрасчетныйОборотыДтКт
	               |	ГДЕ
	               |		ВЫРАЗИТЬ(ХозрасчетныйОборотыДтКт.СубконтоКт1 КАК Справочник.ПрочиеДоходыИРасходы).ВидПрочихДоходовИРасходов = &ЗначениеСубконто) КАК ОбъединениеДанных
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ИерархияСчетов КАК ВТ_ИерархияСчетовДт
	               |		ПО ОбъединениеДанных.Счет = ВТ_ИерархияСчетовДт.Счет
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ИерархияСчетов КАК ВТ_ИерархияСчетовКт
	               |		ПО ОбъединениеДанных.КорСчет = ВТ_ИерархияСчетовКт.Счет
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ОбъединениеДанных.Счет,
	               |	ВТ_ИерархияСчетовДт.Счет2,
	               |	ВТ_ИерархияСчетовДт.Счет1,
	               |	ВТ_ИерархияСчетовДт.Счет0,
	               |	ОбъединениеДанных.КорСчет,
	               |	ВТ_ИерархияСчетовКт.Счет2,
	               |	ВТ_ИерархияСчетовКт.Счет1,
	               |	ВТ_ИерархияСчетовКт.Счет0";
	
	Запрос.УстановитьПараметр("Организация",   ПараметрыИтогов.Организация);
	Запрос.УстановитьПараметр("НачалоПериода", ПараметрыИтогов.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",  ПараметрыИтогов.КонецПериода);
	
	Запрос.УстановитьПараметр("Счет", СчетаВИерархии(Счет("91")));
	Запрос.УстановитьПараметр("ВидСубконто", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы);
	Запрос.УстановитьПараметр("ЗначениеСубконто", Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов);
	
	ИтоговаяТаблица = Запрос.Выполнить().Выгрузить();
	
	ИтоговаяТаблица.Индексы.Добавить("Счет0, КорСчет0");
	ИтоговаяТаблица.Индексы.Добавить("Счет0, КорСчет1");
	ИтоговаяТаблица.Индексы.Добавить("Счет0, КорСчет2");
	
	ИтоговаяТаблица.Индексы.Добавить("Счет1, КорСчет0");
	ИтоговаяТаблица.Индексы.Добавить("Счет1, КорСчет1");
	ИтоговаяТаблица.Индексы.Добавить("Счет1, КорСчет2");
	
	ИтоговаяТаблица.Индексы.Добавить("Счет2, КорСчет0");
	ИтоговаяТаблица.Индексы.Добавить("Счет2, КорСчет1");
	ИтоговаяТаблица.Индексы.Добавить("Счет2, КорСчет2");
	
	Возврат ИтоговаяТаблица;
	
КонецФункции

Функция Обороты91ПоКурсовымРазницамВУЕ(ПараметрыИтогов) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ХозрасчетныйОбороты.Счет КАК Счет,
	               |	СУММА(ХозрасчетныйОбороты.СуммаОборотДт) КАК ДО,
	               |	СУММА(ХозрасчетныйОбороты.СуммаОборотКт) КАК КО
	               |ИЗ
	               |	РегистрБухгалтерии.Хозрасчетный.Обороты(&НачалоПериода, &КонецПериода, , Счет В (&Счета), &ВидСубконтоПрочиеДоходыИРасходы, Организация = &Организация, КорСчет В (&КорреспондирующиеСчета), &ВидСубконтоКонтрагентыДоговоры) КАК ХозрасчетныйОбороты
	               |ГДЕ
	               |	ВЫРАЗИТЬ(ХозрасчетныйОбороты.КорСубконто2 КАК Справочник.ДоговорыКонтрагентов).РасчетыВУсловныхЕдиницах
	               |	И ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.ПрочиеДоходыИРасходы).ВидПрочихДоходовИРасходов = ЗНАЧЕНИЕ(Перечисление.ВидыПрочихДоходовИРасходов.КурсовыеРазницы)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ХозрасчетныйОбороты.Счет";
	
	Счета = Новый Массив();
	Счета.Добавить(Счет("91.01"));
	Счета.Добавить(Счет("91.02"));
	Счета = СформироватьМассивСубсчетов(Счета);
	
	КорреспондирующиеСчета = Новый Массив;
	КорреспондирующиеСчета.Добавить(Счет("60.01"));
	КорреспондирующиеСчета.Добавить(Счет("60.01"));
	КорреспондирующиеСчета.Добавить(Счет("60.02"));
	КорреспондирующиеСчета.Добавить(Счет("60.21"));
	КорреспондирующиеСчета.Добавить(Счет("60.22"));
	КорреспондирующиеСчета.Добавить(Счет("60.31"));
	КорреспондирующиеСчета.Добавить(Счет("60.32"));
	КорреспондирующиеСчета.Добавить(Счет("62.01"));
	КорреспондирующиеСчета.Добавить(Счет("62.02"));
	КорреспондирующиеСчета.Добавить(Счет("62.21"));
	КорреспондирующиеСчета.Добавить(Счет("62.22"));
	КорреспондирующиеСчета.Добавить(Счет("62.31"));
	КорреспондирующиеСчета.Добавить(Счет("62.32"));
	КорреспондирующиеСчета.Добавить(Счет("63"));
	КорреспондирующиеСчета.Добавить(Счет("68.32"));
	КорреспондирующиеСчета.Добавить(Счет("76.02"));
	КорреспондирующиеСчета.Добавить(Счет("76.05"));
	КорреспондирующиеСчета.Добавить(Счет("76.06"));
	КорреспондирующиеСчета.Добавить(Счет("76.09"));
	КорреспондирующиеСчета.Добавить(Счет("76.22"));
	КорреспондирующиеСчета.Добавить(Счет("76.25"));
	КорреспондирующиеСчета.Добавить(Счет("76.26"));
	КорреспондирующиеСчета.Добавить(Счет("76.29"));
	КорреспондирующиеСчета.Добавить(Счет("76.32"));
	КорреспондирующиеСчета.Добавить(Счет("76.35"));
	КорреспондирующиеСчета.Добавить(Счет("76.36"));
	КорреспондирующиеСчета.Добавить(Счет("76.39"));
	КорреспондирующиеСчета.Добавить(Счет("76.К"));
	КорреспондирующиеСчета = СформироватьМассивСубсчетов(КорреспондирующиеСчета);
	
	ВидСубконтоКонтрагентыДоговоры = Новый Массив;
	ВидСубконтоКонтрагентыДоговоры.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	ВидСубконтоКонтрагентыДоговоры.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	
	ВидСубконтоПрочиеДоходыИРасходы = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы;
	
	Запрос.УстановитьПараметр("НачалоПериода", ПараметрыИтогов.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",  ПараметрыИтогов.КонецПериода);
	Запрос.УстановитьПараметр("Организация",   ПараметрыИтогов.Организация);
	
	Запрос.УстановитьПараметр("Счета", Счета);
	Запрос.УстановитьПараметр("КорреспондирующиеСчета", КорреспондирующиеСчета);
	
	Запрос.УстановитьПараметр("ВидСубконтоПрочиеДоходыИРасходы", ВидСубконтоПрочиеДоходыИРасходы);
	Запрос.УстановитьПараметр("ВидСубконтоКонтрагентыДоговоры",  ВидСубконтоКонтрагентыДоговоры);
	
	КО_91_01__ВУЕ = 0;
	ДО_91_02__ВУЕ = 0;
	
	Счет_91_01 = СчетаВИерархии(Счет("91.01"));
	Счет_91_02 = СчетаВИерархии(Счет("91.02"));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Счет_91_01.Найти(Выборка.Счет) <> Неопределено Тогда
			КО_91_01__ВУЕ = КО_91_01__ВУЕ + Выборка.КО;
		ИначеЕсли Счет_91_02.Найти(Выборка.Счет) <> Неопределено Тогда
			ДО_91_02__ВУЕ = ДО_91_02__ВУЕ + Выборка.ДО;
		КонецЕсли;
	КонецЦикла;
	
	Результат = Новый Структура;
	Результат.Вставить("КО_91_01__ВУЕ", КО_91_01__ВУЕ);
	Результат.Вставить("ДО_91_02__ВУЕ", ДО_91_02__ВУЕ);
	
	Возврат Результат;
	
КонецФункции

#Если ТолстыйКлиентОбычноеПриложение Тогда

Процедура УведомитьИП() Экспорт
	
	ТекстПредупреждения = "Отчет не может быть выгружен.
		|Выгрузить этот отчет могут только организации.
		|Для индивидуальных предпринимателей выгрузка не предусмотрена форматом ФНС.
		|Это связано с тем, что индивидуальные предприниматели не обязаны сдавать бухгалтерскую отчетность (пп. 5 п. 1 ст. 23 НК РФ)";
	
	Предупреждение(ТекстПредупреждения);
	
КонецПроцедуры

#КонецЕсли

Функция ОписаниеПериода(ДатаНачалаПериода, ДатаКонцаПериода) Экспорт
	
	Если НачалоМесяца(ДатаНачалаПериода) = НачалоМесяца(ДатаКонцаПериода) Тогда
		// Период в пределах месяца.
		СтрокаОписанияПериода = Формат(ДатаНачалаПериода, "ДФ='ММММ гггг'") + " г." ;
	ИначеЕсли НачалоГода(ДатаНачалаПериода) = НачалоГода(ДатаКонцаПериода) Тогда
		// Период в пределах года.
		СтрокаОписанияПериода = Формат(ДатаНачалаПериода, "ДФ='ММММ'") + " - " + Формат(ДатаКонцаПериода, "ДФ='ММММ гггг'") + " г." ;
	Иначе
		// Период, покрывающий более 1 года.
		СтрокаОписанияПериода = Формат(ДатаНачалаПериода, "ДФ='ММММ гггг'") + " - " + Формат(ДатаКонцаПериода, "ДФ='ММММ гггг'") + " г." ;
	КонецЕсли;
	
	Возврат СтрокаОписанияПериода;
	
КонецФункции

Процедура ЗаполнитьОбласть(ПолеТабличногоДокумента, ИмяОбласти, ЗначениеЗаполнения) Экспорт
	
	ЗаполняемаяОбласть = ПолеТабличногоДокумента.Области.Найти(ИмяОбласти);
	
	Если ЗаполняемаяОбласть <> Неопределено Тогда
		Если ЗаполняемаяОбласть.СодержитЗначение = Истина Тогда // возможны 3 состояния
			ЗаполняемаяОбласть.Значение = ЗначениеЗаполнения;
		Иначе
			ЗаполняемаяОбласть.Текст = ЗначениеЗаполнения;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ОпределитьФормуВДеревеФормИФорматов(ДеревоФормИФорматов, Код, ДатаПриказа = '00010101', НомерПриказа = "", ИмяОбъекта = "",
			ДатаНачалаДействия = '00010101', ДатаОкончанияДействия = '00010101', Описание = "")
	
	НовСтр = ДеревоФормИФорматов.Строки.Добавить();
	НовСтр.Код = СокрЛП(Код);
	НовСтр.ДатаПриказа = ДатаПриказа;
	НовСтр.НомерПриказа = СокрЛП(НомерПриказа);
	НовСтр.ДатаНачалаДействия = ДатаНачалаДействия;
	НовСтр.ДатаОкончанияДействия = ДатаОкончанияДействия;
	НовСтр.ИмяОбъекта = СокрЛП(ИмяОбъекта);
	НовСтр.Описание = СокрЛП(Описание);
	Возврат НовСтр;
	
КонецФункции

Функция ОпределитьФорматВДеревеФормИФорматов(Форма, Версия, ДатаПриказа = '00010101', НомерПриказа = "",
	                                         ДатаНачалаДействия = Неопределено, ДатаОкончанияДействия = Неопределено, ИмяОбъекта = "", Описание = "")
	
	НовСтр = Форма.Строки.Добавить();
	НовСтр.Код = СокрЛП(Версия);
	НовСтр.ДатаПриказа = ДатаПриказа;
	НовСтр.НомерПриказа = СокрЛП(НомерПриказа);
	НовСтр.ДатаНачалаДействия = ?(ДатаНачалаДействия = Неопределено, Форма.ДатаНачалаДействия, ДатаНачалаДействия);
	НовСтр.ДатаОкончанияДействия = ?(ДатаОкончанияДействия = Неопределено, Форма.ДатаОкончанияДействия, ДатаОкончанияДействия);
	НовСтр.ИмяОбъекта = СокрЛП(ИмяОбъекта);
	НовСтр.Описание = СокрЛП(Описание);
	Возврат НовСтр;
	
КонецФункции

Функция СтрокаЧГ0(ИсходноеЧисло) Экспорт // враппер
	
	Возврат РегламентированнаяОтчетность.СтрокаЧГ0(ИсходноеЧисло);
	
КонецФункции

мФормыИФорматы = РегламентированнаяОтчетность.НовоеДеревоФормИФорматов();

Форма20110101 = ОпределитьФормуВДеревеФормИФорматов(мФормыИФорматы, "710001", '2010-07-02', "66н", "ФормаОтчета2011Кв1");
ОпределитьФорматВДеревеФормИФорматов(Форма20110101, "5.01");

Форма20110901 = ОпределитьФормуВДеревеФормИФорматов(мФормыИФорматы, "710001", '2010-07-02', "66н", "ФормаОтчета2011Кв3");
ОпределитьФорматВДеревеФормИФорматов(Форма20110901, "5.01");

Форма20111201 = ОпределитьФормуВДеревеФормИФорматов(мФормыИФорматы, "710099", '2011-10-05', "124н", "ФормаОтчета2011Кв4", '0001-01-01', '2010-12-31');
ОпределитьФорматВДеревеФормИФорматов(Форма20111201, "5.02");

Форма20120101 = ОпределитьФормуВДеревеФормИФорматов(мФормыИФорматы, "710099", '2011-10-05', "124н", "ФормаОтчета2011Кв4", '2011-01-01', '2014-12-31');
ОпределитьФорматВДеревеФормИФорматов(Форма20120101, "5.03");
ОпределитьФорматВДеревеФормИФорматов(Форма20120101, "5.04");

ФормаОтчета2011Кв4_3 = ОпределитьФормуВДеревеФормИФорматов(мФормыИФорматы, "710099", '2015-04-06', "57н", "ФормаОтчета2011Кв4", '2015-01-01', '2015-12-31');
ОпределитьФорматВДеревеФормИФорматов(ФормаОтчета2011Кв4_3, "5.06");
ОпределитьФорматВДеревеФормИФорматов(ФормаОтчета2011Кв4_3, "5.07");

Форма20160101 = ОпределитьФормуВДеревеФормИФорматов(мФормыИФорматы, "710099", '2015-04-06', "57н", "ФормаОтчета2011Кв4", '2016-01-01', '2017-12-31');
ОпределитьФорматВДеревеФормИФорматов(Форма20160101, "5.07");

Форма20180101 = ОпределитьФормуВДеревеФормИФорматов(мФормыИФорматы, "710099", '2018-03-06', "41н", "ФормаОтчета2011Кв4", '2018-01-01', );
ОпределитьФорматВДеревеФормИФорматов(Форма20180101, "5.07");

мГруппаОрганизаций = Новый СписокЗначений;

ОписаниеТиповСтрока254 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(254);
ОписаниеТиповСтрока15  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(15);

МассивТипов = Новый Массив;
МассивТипов.Добавить(Тип("Дата"));
ОписаниеТиповДата = Новый ОписаниеТипов(МассивТипов, , Новый КвалификаторыДаты(ЧастиДаты.Дата));

мТаблицаСоставПоказателей = Новый ТаблицаЗначений;
мТаблицаСоставПоказателей.Колонки.Добавить("ИмяПоляТаблДокумента", ОписаниеТиповСтрока15);
мТаблицаСоставПоказателей.Колонки.Добавить("КодПоказателяПоСоставу", ОписаниеТиповСтрока15);
мТаблицаСоставПоказателей.Колонки.Добавить("КодПоказателяПоФорме", ОписаниеТиповСтрока15);
мТаблицаСоставПоказателей.Колонки.Добавить("ПризнМногострочности", ОписаниеТиповСтрока15);
мТаблицаСоставПоказателей.Колонки.Добавить("ТипДанныхПоказателя", ОписаниеТиповСтрока15);

мСтруктураВариантыЗаполнения = Новый Структура;

мТаблицаФормОтчета = Новый ТаблицаЗначений;
мТаблицаФормОтчета.Колонки.Добавить("ФормаОтчета", ОписаниеТиповСтрока254);
мТаблицаФормОтчета.Колонки.Добавить("ОписаниеОтчета", ОписаниеТиповСтрока254, "Утверждена",  20);
мТаблицаФормОтчета.Колонки.Добавить("ДатаНачалоДействия", ОписаниеТиповДата, "Действует с", 5);
мТаблицаФормОтчета.Колонки.Добавить("ДатаКонецДействия", ОписаниеТиповДата, "         по", 5);

НоваяФорма = мТаблицаФормОтчета.Добавить();
НоваяФорма.ФормаОтчета        = "ФормаОтчета2011Кв1";
НоваяФорма.ОписаниеОтчета     = "Утверждена приказом Минфина России от 02.07.2010 г. №66н";
НоваяФорма.ДатаНачалоДействия = '2011-01-01';
НоваяФорма.ДатаКонецДействия  = '2011-08-31';

НоваяФорма = мТаблицаФормОтчета.Добавить();
НоваяФорма.ФормаОтчета        = "ФормаОтчета2011Кв3";
НоваяФорма.ОписаниеОтчета     = "Утверждена приказом Минфина России от 02.07.2010 г. №66н";
НоваяФорма.ДатаНачалоДействия = '2011-09-01';
НоваяФорма.ДатаКонецДействия  = '2011-11-30';

НоваяФорма = мТаблицаФормОтчета.Добавить();
НоваяФорма.ФормаОтчета        = "ФормаОтчета2011Кв4";
НоваяФорма.ОписаниеОтчета     = "Утверждена приказом Минфина России от 02.07.2010 г. №66н, в ред. приказа Минфина России от 05.10.2011 № 124н";
НоваяФорма.ДатаНачалоДействия = '2011-12-01';
НоваяФорма.ДатаКонецДействия  = '2014-12-31';

НоваяФорма = мТаблицаФормОтчета.Добавить();
НоваяФорма.ФормаОтчета        = "ФормаОтчета2011Кв4";
НоваяФорма.ОписаниеОтчета     = "Утверждена приказом Минфина России от 02.07.2010 г. №66н, в ред. приказа Минфина России от 06.04.2015 № 57н";
НоваяФорма.ДатаНачалоДействия = '2015-01-01';
НоваяФорма.ДатаКонецДействия  = '2017-12-31';

НоваяФорма = мТаблицаФормОтчета.Добавить();
НоваяФорма.ФормаОтчета        = "ФормаОтчета2011Кв4";
НоваяФорма.ОписаниеОтчета     = "Утверждена приказом Минфина России от 02.07.2010 г. №66н, в ред. приказа Минфина России от 06.03.2018 № 41н.";
НоваяФорма.ДатаНачалоДействия = '2018-01-01';
НоваяФорма.ДатаКонецДействия  = ОбщегоНазначения.ПустоеЗначениеТипа(Тип("Дата"));
