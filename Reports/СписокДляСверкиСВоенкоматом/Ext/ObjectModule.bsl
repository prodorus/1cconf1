Перем СохраненнаяНастройка Экспорт;        // Текущий вариант отчета

Перем ТаблицаВариантовОтчета Экспорт;      // Таблица вариантов доступных текущему пользователю

#Если ТолстыйКлиентОбычноеПриложение Тогда

Процедура СформироватьОтчет(ДокументРезультат = Неопределено, ДанныеРасшифровки = Неопределено, ВыводВФормуОтчета = Истина) Экспорт
	
	ЗначениеПанелипользователя = ТиповыеОтчеты.ПолучитьЗначенияНастроекПанелиПользователяОбъекта(ЭтотОбъект);
	НастрокаПоУмолчанию        = КомпоновщикНастроек.ПолучитьНастройки();
	ТиповыеОтчеты.ПолучитьПримененуюНастройку(ЭтотОбъект);
	
	ЗначениеПараметра = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Период"));
	
	Если ЗначениеПараметра <> Неопределено тогда
		Если Дата(ЗначениеПараметра.Значение) <> '00010101' тогда
			ДатаАктуальности = Дата(ЗначениеПараметра.Значение);
		Иначе
			ДатаАктуальности           = ОбщегоНазначенияЗК.ПолучитьРабочуюДату();
			ЗначениеПараметра.Значение = ОбщегоНазначенияЗК.ПолучитьРабочуюДату();
		КонецЕсли;
		ЗначениеПараметра.Использование = Истина;
	Иначе
		ДатаАктуальности = ОбщегоНазначенияЗК.ПолучитьРабочуюДату();
	КонецЕсли;
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, КомпоновщикНастроек.Настройки, , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, , , Истина);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	
	ДеревоДанных = Новый ДеревоЗначений;
	
	ПроцессорВывода.УстановитьОбъект(ДеревоДанных);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	СформироватьМакет(ДеревоДанных, ДокументРезультат, ДатаАктуальности);
	
	КомпоновщикНастроек.ЗагрузитьНастройки(НастрокаПоУмолчанию);
	
КонецПроцедуры

Процедура СформироватьМакет(ДеревоДанных, ДокументРезультат, ДатаАктуальности)
	
	Отчет2017 = Ложь;
	Если ДатаАктуальности < '20170801' Тогда
		Макет = ПолучитьМакет("СверкаСВоенкоматом");
	Иначе
		Макет = ПолучитьМакет("СверкаСВоенкоматом2017");
		Отчет2017 = Истина;
	КонецЕсли;
	
	СоставСемьи = Новый ТаблицаЗначений;
	СоставСемьи.Колонки.Добавить("ФизЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	Если Отчет2017 Тогда
		ФизЛицаОтчета = Новый Массив;
		Для Каждого ДанныеОрганизации Из ДеревоДанных.Строки Цикл 
			Для Каждого ДанныеПоВоенкомату Из ДанныеОрганизации.Строки Цикл 
				Для Каждого ФизЛицо Из ДанныеПоВоенкомату.Строки.ВыгрузитьКолонку("ФизЛицо") Цикл
					ФизЛицаОтчета.Добавить(ФизЛицо);
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ФизическиеЛицаСоставСемьи.Ссылка КАК ФизЛицо,
		|	ФизическиеЛицаСоставСемьи.СтепеньРодства,
		|	ФизическиеЛицаСоставСемьи.Имя
		|ИЗ
		|	Справочник.ФизическиеЛица.СоставСемьи КАК ФизическиеЛицаСоставСемьи
		|ГДЕ
		|	ФизическиеЛицаСоставСемьи.Ссылка В(&ФизЛица)");
		Запрос.УстановитьПараметр("ФизЛица", ФизЛицаОтчета);
		СоставСемьи = Запрос.Выполнить().Выгрузить();
		СоставСемьи.Индексы.Добавить("ФизЛицо");
	КонецЕсли;
	
	Заголовок 	  = Макет.ПолучитьОбласть("Заголовок");
	Шапка 		  = Макет.ПолучитьОбласть("Шапка");
	СтрокаТаблицы = Макет.ПолучитьОбласть("СтрокаТаблицы");
	Подвал 		  = Макет.ПолучитьОбласть("Подвал");
	
	ВыводимыеОбласти = Новый Массив;
	ВыводимыеОбласти.Добавить(СтрокаТаблицы);
	ВыводимыеОбласти.Добавить(Подвал);
	
	ДокументРезультат.Очистить();
	
	
	Для Каждого ДанныеОрганизации Из ДеревоДанных.Строки Цикл 
		
		ПараметрыЗаголовка = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеОрганизации.Организация, "НаименованиеПолное");
		ПараметрыЗаголовка.Вставить("ДатаАктуальности", ДатаАктуальности);
		ПараметрыЗаголовка.Вставить("ФактАдресОрганизации", УправлениеКонтактнойИнформацией.ПолучитьАдресИзКонтактнойИнформации(ДанныеОрганизации.Организация, "Фактический"));
		
		Если Не ЗначениеЗаполнено(ПараметрыЗаголовка.ФактАдресОрганизации) Тогда
			ПараметрыЗаголовка.Вставить("ФактАдресОрганизации", УправлениеКонтактнойИнформацией.ПолучитьАдресИзКонтактнойИнформации(ДанныеОрганизации.Организация, "Юридический"));
		КонецЕсли;
		
		Для Каждого ДанныеПоВоенкомату Из ДанныеОрганизации.Строки Цикл 
			
			ПараметрыЗаголовка.Вставить("Военкомат", ДанныеПоВоенкомату.Военкомат);
				
			ЗаполнитьЗначенияСвойств(Заголовок.Параметры, ПараметрыЗаголовка);
			
			ДокументРезультат.Вывести(Заголовок);
			ДокументРезультат.Вывести(Шапка);
			
			КоличествоСтрок = ДанныеПоВоенкомату.Строки.Количество();
			
			Для Каждого ТекСтрока Из ДанныеПоВоенкомату.Строки Цикл 
				
				Если ТекСтрока.СистемныеПоляНомерПоПорядкуВГруппировке < КоличествоСтрок 
					И Не ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ДокументРезультат, СтрокаТаблицы) Тогда
					ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
				ИначеЕсли ТекСтрока.СистемныеПоляНомерПоПорядкуВГруппировке = КоличествоСтрок
					И Не ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ДокументРезультат, ВыводимыеОбласти) Тогда
					ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
				КонецЕсли;
				
				ЗаполнитьЗначенияСвойств(СтрокаТаблицы.Параметры, ТекСтрока);
				Если Отчет2017 Тогда
					Если Отчет2017 Тогда
						Если ЗначениеЗаполнено(ТекСтрока.МестоРождения) Тогда
							СтрокаТаблицы.Параметры.ДатаРождения = Формат(ТекСтрока.ДатаРождения, "ДЛФ=D") + Символы.ПС + ПредставлениеМестаРождения(ТекСтрока.МестоРождения);
						КонецЕсли;
						
						СоставСемьиФизлица = СоставСемьи.НайтиСтроки(Новый Структура("ФизЛицо", ТекСтрока.ФизЛицо));
						Для Каждого Родственник Из СоставСемьиФизлица Цикл
							Если ЗначениеЗаполнено(ТекСтрока.СемейноеПоложение) Тогда
								СтрокаТаблицы.Параметры.СемейноеПоложение = "" + СтрокаТаблицы.Параметры.СемейноеПоложение + ", " + Символы.ПС;
							КонецЕсли;
							СтрокаТаблицы.Параметры.СемейноеПоложение = "" + СтрокаТаблицы.Параметры.СемейноеПоложение 
											+ Родственник.СтепеньРодства 
											+ " " 
											+ Родственник.Имя;
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;
				ДокументРезультат.Вывести(СтрокаТаблицы);
				
			КонецЦикла;
		
			ОтветственныеЛица = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизаций(ДанныеОрганизации.Организация, ДатаАктуальности);
			ЗаполнитьЗначенияСвойств(Подвал.Параметры, ОтветственныеЛица);
			
			ДокументРезультат.Вывести(Подвал);
			ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
			
		КонецЦикла;
		
	КонецЦикла;
		
КонецПроцедуры

Процедура СохранитьНастройку() Экспорт

	СтруктураНастроек = ТиповыеОтчеты.ПолучитьСтруктуруПараметровТиповогоОтчета(ЭтотОбъект);
	СохранениеНастроек.СохранитьНастройкуОбъекта(СохраненнаяНастройка, СтруктураНастроек);
	
КонецПроцедуры

Процедура ПрименитьНастройку() Экспорт
	
	Схема = ТиповыеОтчеты.ПолучитьСхемуКомпоновкиОбъекта(ЭтотОбъект);

	// Считываение структуры настроек отчета
 	Если Не СохраненнаяНастройка.Пустая() Тогда
		
		СтруктураНастроек = СохраненнаяНастройка.ХранилищеНастроек.Получить();
		Если Не СтруктураНастроек = Неопределено Тогда
			КомпоновщикНастроек.ЗагрузитьНастройки(СтруктураНастроек.НастройкиКомпоновщика);
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, СтруктураНастроек);
		Иначе
			КомпоновщикНастроек.ЗагрузитьНастройки(Схема.НастройкиПоУмолчанию);
		КонецЕсли;
		
	Иначе
		КомпоновщикНастроек.ЗагрузитьНастройки(Схема.НастройкиПоУмолчанию);
	КонецЕсли;

КонецПроцедуры

Функция ПолучитьПараметрыИсполненияОтчета() Экспорт
	
	СтруктураНастроек = Новый Структура();
	Возврат СтруктураНастроек;
	
КонецФункции

Функция ПредставлениеМестаРождения(Знач СтрокаМестоРождения)
	
	СтруктураМестоРождения = РегламентированнаяОтчетность.РазложитьМестоРождения(СтрокаМестоРождения, Ложь);
	
	Если СтруктураМестоРождения.Особое = 1 Тогда
		
		Представление = "особое" +
		?(НЕ ЗначениеЗаполнено(СтруктураМестоРождения.НаселенныйПункт), "", "  " + СокрЛП(СтруктураМестоРождения.НаселенныйПункт))
		+?(НЕ ЗначениеЗаполнено(СтруктураМестоРождения.Район), "", "  " + СокрЛП(СтруктураМестоРождения.Район))
		+?(НЕ ЗначениеЗаполнено(СтруктураМестоРождения.Область), "", "  " + СокрЛП(СтруктураМестоРождения.Область))
		+?(НЕ ЗначениеЗаполнено(СтруктураМестоРождения.Страна), "", "  " + СокрЛП(СтруктураМестоРождения.Страна));
		
	Иначе
		
		Представление	= "" + ?(НЕ ЗначениеЗаполнено(СтруктураМестоРождения.НаселенныйПункт), "", СокрЛП(СтруктураМестоРождения.НаселенныйПункт))
		+?(НЕ ЗначениеЗаполнено(СтруктураМестоРождения.Район), "", ", " + СокрЛП(СтруктураМестоРождения.Район))
		+?(НЕ ЗначениеЗаполнено(СтруктураМестоРождения.Область), "", ", " + СокрЛП(СтруктураМестоРождения.Область))
		+?(НЕ ЗначениеЗаполнено(СтруктураМестоРождения.Страна), "", ", " + СокрЛП(СтруктураМестоРождения.Страна));
		
		Если Лев(Представление, 1) = "," Тогда
			Представление = Сред(Представление, 2);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Представление;
КонецФункции

Если СохраненнаяНастройка = Неопределено Тогда
	СохраненнаяНастройка =  Справочники.СохраненныеНастройки.ПустаяСсылка();
КонецЕсли;

Если КомпоновщикНастроек = Неопределено Тогда
	КомпоновщикНастроек =  Новый КомпоновщикНастроекКомпоновкиДанных;
КонецЕсли;

#КонецЕсли
