Перем мТаблицаСоставПоказателей Экспорт; // Состав показателей отчета

// Состав показателей отчета, значение которых автоматически заполняется по учетным данным.
Перем мСтруктураВариантыЗаполнения Экспорт;

Перем мСтруктураМногостраничныхРазделов Экспорт;

Перем мДеревоСтраницОтчета Экспорт; // Структура листов отчета

Перем мЕстьВыбранные Экспорт; // Признак выбора печатных листов

Перем мВыбраннаяФорма Экспорт; // Имя выбранной формы отчета

Перем мСкопированаФорма Экспорт; // Признак скопированной формы

Перем мСохраненныйДок Экспорт; // Документ, хранящий данные отчета

// Границы периода построения отчета.
Перем мДатаНачалаПериодаОтчета Экспорт;
Перем мДатаКонцаПериодаОтчета  Экспорт;

Перем мПолноеИмяФайлаВнешнейОбработки Экспорт;

Перем мЗаписьЗапрещена Экспорт;

Перем мИнтервалАвтосохранения Экспорт;

Перем мРезультатПоиска Экспорт;// Таблица с результатами поиска
Перем мСчетчикиСтраницПриПоиске Экспорт;// Таблица со счетчиками номеров листов при поиске
Перем мТаблицаФормОтчета Экспорт;

Перем мЗаписываетсяНовыйДокумент Экспорт;
Перем мВариант Экспорт;

Перем мГруппаОрганизаций Экспорт;

Перем мФормыИФорматы Экспорт;
Перем мВерсияОтчета Экспорт;

Перем мПечатьБезШтрихкодаРазрешена Экспорт;

Перем СчетаИБ Экспорт; // Список счетов ИБ по условным кодам

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Функция ОписаниеПериода(ДатаНачалаПериода, ДатаКонцаПериода) Экспорт
	
	Если НачалоМесяца(ДатаНачалаПериода) = НачалоМесяца(ДатаКонцаПериода) Тогда
		// Период в пределах месяца.
		СтрокаОписанияПериода = Формат(ДатаНачалаПериода, "ДФ='ММММ гггг'") + " г." ;
	ИначеЕсли НачалоГода(ДатаНачалаПериода) = НачалоГода(ДатаКонцаПериода) Тогда
		// Период в пределах года.
		СтрокаОписанияПериода = Формат(ДатаНачалаПериода, "ДФ='ММММ'") + " - " + Формат(ДатаКонцаПериода, "ДФ='ММММ гггг'") + " г." ;
	Иначе
		// Период, покрывающий более 1 года.
		СтрокаОписанияПериода = Формат(ДатаНачалаПериода, "ДФ='ММММ гггг'") + " - " + Формат(ДатаКонцаПериода, "ДФ='ММММ гггг'") + " г." ;
	КонецЕсли;
	
	Возврат СтрокаОписанияПериода;
	
КонецФункции

Функция Счет(КодСчета) Экспорт
	
	НайденныйСчет = СчетаИБ[КодСчета];
	
	Если НайденныйСчет = Неопределено Тогда
		ВызватьИсключение "Ошибка. Не определен счет " + КодСчета + " в соответствии счетов";
	КонецЕсли;
	
	Возврат НайденныйСчет;
	
КонецФункции

Функция СчетаВИерархии(СчетГруппа) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СчетГруппа", СчетГруппа);
	Запрос.Текст = "ВЫБРАТЬ
	               |	Хозрасчетный.Ссылка КАК Счет
	               |ИЗ
	               |	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	               |ГДЕ
	               |	Хозрасчетный.Ссылка В ИЕРАРХИИ(&СчетГруппа)";
	Субсчета = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Счет");
	
	Возврат Субсчета;
	
КонецФункции

Функция СформироватьМассивСубсчетов(МассивСчетов) Экспорт
	
	МассивСубсчетов = Новый Массив;
	
	Для Каждого СчетВерхнегоУровня Из МассивСчетов Цикл
		Субсчета = СчетаВИерархии(СчетВерхнегоУровня);
		ДополнитьМассив(МассивСубсчетов, Субсчета);
	КонецЦикла;
	
	Возврат МассивСубсчетов;
	
КонецФункции

Процедура ДополнитьМассив(МассивПриемник, МассивИсточник, ТолькоУникальныеЗначения = Ложь) Экспорт
	
	УникальныеЗначения = Новый Соответствие;
	
	Если ТолькоУникальныеЗначения Тогда
		Для Каждого Значение Из МассивПриемник Цикл
			УникальныеЗначения.Вставить(Значение, Истина);
		КонецЦикла;
	КонецЕсли;
	
	Для каждого Значение Из МассивИсточник Цикл
		Если ТолькоУникальныеЗначения И УникальныеЗначения[Значение] <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		МассивПриемник.Добавить(Значение);
		УникальныеЗначения.Вставить(Значение, Истина);
	КонецЦикла;
	
КонецПроцедуры

Функция Обороты91ПоВПДР(ПараметрыИтогов) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВидыПрочихДоходовИРасходов.Ссылка КАК ВПДР
	               |ПОМЕСТИТЬ ВТ_ВПДР
	               |ИЗ
	               |	Перечисление.ВидыПрочихДоходовИРасходов КАК ВидыПрочихДоходовИРасходов
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ВПДР
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ОбъединениеДанных.ВПДР КАК ВПДР,
	               |	СУММА(ОбъединениеДанных.КО_91_01) КАК КО_91_01,
	               |	СУММА(ОбъединениеДанных.ДО_91_02) КАК ДО_91_02,
	               |	СУММА(ОбъединениеДанных.ДО_91_02__68_02) КАК ДО_91_02__68_02,
	               |	СУММА(ОбъединениеДанных.ДО_91_02__76_ОТ) КАК ДО_91_02__76_ОТ
	               |ПОМЕСТИТЬ ВТ_ОборотыПоСчетам
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		ВЫБОР
	               |			КОГДА ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.ПрочиеДоходыИРасходы).ВидПрочихДоходовИРасходов ЕСТЬ NULL 
	               |					ИЛИ ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.ПрочиеДоходыИРасходы).ВидПрочихДоходовИРасходов = ЗНАЧЕНИЕ(Перечисление.ВидыПрочихДоходовИРасходов.ПустаяСсылка)
	               |				ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПрочихДоходовИРасходов.ПрочиеВнереализационныеДоходыРасходы)
	               |			ИНАЧЕ ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.ПрочиеДоходыИРасходы).ВидПрочихДоходовИРасходов
	               |		КОНЕЦ КАК ВПДР,
	               |		ХозрасчетныйОбороты.СуммаОборотКт КАК КО_91_01,
	               |		0 КАК ДО_91_02,
	               |		0 КАК ДО_91_02__68_02,
	               |		0 КАК ДО_91_02__76_ОТ
	               |	ИЗ
	               |		РегистрБухгалтерии.Хозрасчетный.Обороты(&НачПериода, &КонПериода, Период, Счет В (&Счет91_01), &СубконтроПрочихДоходовИРасходов, Организация = &Организация, , ) КАК ХозрасчетныйОбороты
	               |	
	               |	ОБЪЕДИНИТЬ ВСЕ
	               |	
	               |	ВЫБРАТЬ
	               |		ВЫБОР
	               |			КОГДА ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.ПрочиеДоходыИРасходы).ВидПрочихДоходовИРасходов ЕСТЬ NULL 
	               |					ИЛИ ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.ПрочиеДоходыИРасходы).ВидПрочихДоходовИРасходов = ЗНАЧЕНИЕ(Перечисление.ВидыПрочихДоходовИРасходов.ПустаяСсылка)
	               |				ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПрочихДоходовИРасходов.ПрочиеВнереализационныеДоходыРасходы)
	               |			ИНАЧЕ ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.ПрочиеДоходыИРасходы).ВидПрочихДоходовИРасходов
	               |		КОНЕЦ,
	               |		0,
	               |		ХозрасчетныйОбороты.СуммаОборотДт,
	               |		0,
	               |		0
	               |	ИЗ
	               |		РегистрБухгалтерии.Хозрасчетный.Обороты(&НачПериода, &КонПериода, Период, Счет В (&Счет91_02), &СубконтроПрочихДоходовИРасходов, Организация = &Организация, , ) КАК ХозрасчетныйОбороты
	               |	
	               |	ОБЪЕДИНИТЬ ВСЕ
	               |	
	               |	ВЫБРАТЬ
	               |		ВЫБОР
	               |			КОГДА ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.ПрочиеДоходыИРасходы).ВидПрочихДоходовИРасходов ЕСТЬ NULL 
	               |					ИЛИ ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.ПрочиеДоходыИРасходы).ВидПрочихДоходовИРасходов = ЗНАЧЕНИЕ(Перечисление.ВидыПрочихДоходовИРасходов.ПустаяСсылка)
	               |				ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПрочихДоходовИРасходов.ПрочиеВнереализационныеДоходыРасходы)
	               |			ИНАЧЕ ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.ПрочиеДоходыИРасходы).ВидПрочихДоходовИРасходов
	               |		КОНЕЦ,
	               |		0,
	               |		0,
	               |		ХозрасчетныйОбороты.СуммаОборотДт,
	               |		0
	               |	ИЗ
	               |		РегистрБухгалтерии.Хозрасчетный.Обороты(&НачПериода, &КонПериода, Период, Счет В (&Счет91_02), &СубконтроПрочихДоходовИРасходов, Организация = &Организация, КорСчет В (&Счет68_02), ) КАК ХозрасчетныйОбороты
	               |	
	               |	ОБЪЕДИНИТЬ ВСЕ
	               |	
	               |	ВЫБРАТЬ
	               |		ВЫБОР
	               |			КОГДА ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.ПрочиеДоходыИРасходы).ВидПрочихДоходовИРасходов ЕСТЬ NULL 
	               |					ИЛИ ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.ПрочиеДоходыИРасходы).ВидПрочихДоходовИРасходов = ЗНАЧЕНИЕ(Перечисление.ВидыПрочихДоходовИРасходов.ПустаяСсылка)
	               |				ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПрочихДоходовИРасходов.ПрочиеВнереализационныеДоходыРасходы)
	               |			ИНАЧЕ ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.ПрочиеДоходыИРасходы).ВидПрочихДоходовИРасходов
	               |		КОНЕЦ,
	               |		0,
	               |		0,
	               |		0,
	               |		ХозрасчетныйОбороты.СуммаОборотДт
	               |	ИЗ
	               |		РегистрБухгалтерии.Хозрасчетный.Обороты(&НачПериода, &КонПериода, Период, Счет В (&Счет91_02), &СубконтроПрочихДоходовИРасходов, Организация = &Организация, КорСчет В (&Счет76_ОТ), ) КАК ХозрасчетныйОбороты) КАК ОбъединениеДанных
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ОбъединениеДанных.ВПДР
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ВПДР
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_ВПДР.ВПДР КАК ВПДР,
	               |	ЕСТЬNULL(ВТ_ОборотыПоСчетам.КО_91_01, 0) КАК КО_91_01,
	               |	ЕСТЬNULL(ВТ_ОборотыПоСчетам.ДО_91_02, 0) КАК ДО_91_02,
	               |	ЕСТЬNULL(ВТ_ОборотыПоСчетам.ДО_91_02__68_02, 0) КАК ДО_91_02__68_02,
	               |	ЕСТЬNULL(ВТ_ОборотыПоСчетам.ДО_91_02__76_ОТ, 0) КАК ДО_91_02__76_ОТ
	               |ИЗ
	               |	ВТ_ВПДР КАК ВТ_ВПДР
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ОборотыПоСчетам КАК ВТ_ОборотыПоСчетам
	               |		ПО ВТ_ВПДР.ВПДР = ВТ_ОборотыПоСчетам.ВПДР";
	
	НачалоПериода = ПараметрыИтогов.НачалоПериода;
	КонецПериода  = ПараметрыИтогов.КонецПериода;
	
	Запрос.УстановитьПараметр("НачПериода",  НачалоПериода);
	Запрос.УстановитьПараметр("КонПериода",  КонецПериода);
	Запрос.УстановитьПараметр("Организация", ПараметрыИтогов.Организация);
	Запрос.УстановитьПараметр("Счет91_01",   СчетаВИерархии(Счет("91.01")));
	Запрос.УстановитьПараметр("Счет91_02",   СчетаВИерархии(Счет("91.02")));
	Запрос.УстановитьПараметр("Счет68_02",   СчетаВИерархии(Счет("68.02")));
	Запрос.УстановитьПараметр("Счет76_ОТ",   СчетаВИерархии(Счет("76.ОТ")));
	Запрос.УстановитьПараметр("СубконтроПрочихДоходовИРасходов", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы);
	
	КО_91_01_ВПДР = Новый Структура;
	ДО_91_02_ВПДР = Новый Структура;
	ДО_91_02__68_02_ВПДР = Новый Структура;
	ДО_91_02__76_ОТ_ВПДР = Новый Структура;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ИмяВидаПДР = ОбщегоНазначения.ИмяЗначенияПеречисления(Выборка.ВПДР);
		КО_91_01_ВПДР.Вставить(ИмяВидаПДР, Выборка.КО_91_01);
		ДО_91_02_ВПДР.Вставить(ИмяВидаПДР, Выборка.ДО_91_02);
		ДО_91_02__68_02_ВПДР.Вставить(ИмяВидаПДР, Выборка.ДО_91_02__68_02);
		ДО_91_02__76_ОТ_ВПДР.Вставить(ИмяВидаПДР, Выборка.ДО_91_02__76_ОТ);
	КонецЦикла;
	
	Результат = Новый Структура;
	Результат.Вставить("КО_91_01_ВПДР", КО_91_01_ВПДР);
	Результат.Вставить("ДО_91_02_ВПДР", ДО_91_02_ВПДР);
	Результат.Вставить("ДО_91_02__68_02_ВПДР", ДО_91_02__68_02_ВПДР);
	Результат.Вставить("ДО_91_02__76_ОТ_ВПДР", ДО_91_02__76_ОТ_ВПДР);
	
	Возврат Результат;
	
КонецФункции

Функция Обороты91ПоПереоценке(ПараметрыИтогов) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	СуммированиеДанных.Счет КАК Счет,
	               |	СУММА(СуммированиеДанных.СуммаОборотДт1) КАК СуммаОборотДт1,
	               |	СУММА(СуммированиеДанных.СуммаОборотКт1) КАК СуммаОборотКт1,
	               |	СУММА(СуммированиеДанных.СуммаОборотДт2) КАК СуммаОборотДт2,
	               |	СУММА(СуммированиеДанных.СуммаОборотКт2) КАК СуммаОборотКт2
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		ХозрасчетныйОбороты.Счет КАК Счет,
	               |		ХозрасчетныйОбороты.СуммаОборотДт КАК СуммаОборотДт1,
	               |		ХозрасчетныйОбороты.СуммаОборотКт КАК СуммаОборотКт1,
	               |		0 КАК СуммаОборотДт2,
	               |		0 КАК СуммаОборотКт2
	               |	ИЗ
	               |		РегистрБухгалтерии.Хозрасчетный.Обороты(&НачПериода, &КонПериода, ПЕРИОД, Счет В (&Счета), &ВидСубконто, Организация = &Организация, КорСчет В (&КорСчета1), ) КАК ХозрасчетныйОбороты
	               |	ГДЕ
	               |		ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.ПрочиеДоходыИРасходы).ВидПрочихДоходовИРасходов = &ВидПрочихДоходовИРасходов
	               |	
	               |	ОБЪЕДИНИТЬ ВСЕ
	               |	
	               |	ВЫБРАТЬ
	               |		ХозрасчетныйОбороты.Счет,
	               |		0,
	               |		0,
	               |		ХозрасчетныйОбороты.СуммаОборотДт,
	               |		ХозрасчетныйОбороты.СуммаОборотКт
	               |	ИЗ
	               |		РегистрБухгалтерии.Хозрасчетный.Обороты(&НачПериода, &КонПериода, ПЕРИОД, Счет В (&Счета), &ВидСубконто, Организация = &Организация, КорСчет В (&КорСчета2), ) КАК ХозрасчетныйОбороты
	               |	ГДЕ
	               |		ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.ПрочиеДоходыИРасходы).ВидПрочихДоходовИРасходов = &ВидПрочихДоходовИРасходов) КАК СуммированиеДанных
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	СуммированиеДанных.Счет";
	
	НачалоПериода = ПараметрыИтогов.НачалоПериода;
	КонецПериода  = ПараметрыИтогов.КонецПериода;
	
	Счета = Новый Массив();
	Счета.Добавить(Счет("91.01"));
	Счета.Добавить(Счет("91.02"));
	Счета = СформироватьМассивСубсчетов(Счета);
	
	КорСчета1 = Новый Массив();
	КорСчета1.Добавить(Счет("01"));
	КорСчета1.Добавить(Счет("03"));
	КорСчета1.Добавить(Счет("04"));
	КорСчета1 = СформироватьМассивСубсчетов(КорСчета1);
	
	КорСчета2 = Новый Массив();
	КорСчета2.Добавить(Счет("02"));
	КорСчета2.Добавить(Счет("05"));
	КорСчета2 = СформироватьМассивСубсчетов(КорСчета2);
	
	Запрос.УстановитьПараметр("НачПериода",  НачалоПериода);
	Запрос.УстановитьПараметр("КонПериода",  КонецПериода);
	Запрос.УстановитьПараметр("Организация", ПараметрыИтогов.Организация);
	Запрос.УстановитьПараметр("Счета",       Счета);
	Запрос.УстановитьПараметр("КорСчета1",   КорСчета1);
	Запрос.УстановитьПараметр("КорСчета2",   КорСчета2);
	Запрос.УстановитьПараметр("ВидСубконто", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы);
	Запрос.УстановитьПараметр("ВидПрочихДоходовИРасходов", Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов);
	
	КО_91_01__010304_ПереоценкаВнеоборотныхАктивов = 0;
	КО_91_01__0205_ПереоценкаВнеоборотныхАктивов   = 0;
	ДО_91_02__010304_ПереоценкаВнеоборотныхАктивов = 0;
	ДО_91_02__0205_ПереоценкаВнеоборотныхАктивов   = 0;
	
	Счет_91_01 = СчетаВИерархии(Счет("91.01"));
	Счет_91_02 = СчетаВИерархии(Счет("91.02"));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Счет_91_01.Найти(Выборка.Счет) <> Неопределено Тогда
			КО_91_01__010304_ПереоценкаВнеоборотныхАктивов = КО_91_01__010304_ПереоценкаВнеоборотныхАктивов + Выборка.СуммаОборотКт1;
			КО_91_01__0205_ПереоценкаВнеоборотныхАктивов   = КО_91_01__0205_ПереоценкаВнеоборотныхАктивов + Выборка.СуммаОборотКт2;
		ИначеЕсли Счет_91_02.Найти(Выборка.Счет) <> Неопределено Тогда
			ДО_91_02__010304_ПереоценкаВнеоборотныхАктивов = ДО_91_02__010304_ПереоценкаВнеоборотныхАктивов + Выборка.СуммаОборотДт1;
			ДО_91_02__0205_ПереоценкаВнеоборотныхАктивов   = ДО_91_02__0205_ПереоценкаВнеоборотныхАктивов + Выборка.СуммаОборотДт2;
		КонецЕсли;
	КонецЦикла;
	
	Результат = Новый Структура;
	Результат.Вставить("КО_91_01__010304_ПереоценкаВнеоборотныхАктивов", КО_91_01__010304_ПереоценкаВнеоборотныхАктивов);
	Результат.Вставить("КО_91_01__0205_ПереоценкаВнеоборотныхАктивов",   КО_91_01__0205_ПереоценкаВнеоборотныхАктивов);
	Результат.Вставить("ДО_91_02__010304_ПереоценкаВнеоборотныхАктивов", ДО_91_02__010304_ПереоценкаВнеоборотныхАктивов);
	Результат.Вставить("ДО_91_02__0205_ПереоценкаВнеоборотныхАктивов",   ДО_91_02__0205_ПереоценкаВнеоборотныхАктивов);
	
	Возврат Результат;
	
КонецФункции

Функция ОпределитьФормуВДеревеФормИФорматов(ДеревоФормИФорматов, Код, ДатаПриказа = '00010101', НомерПриказа = "", ИмяОбъекта = "",
			ДатаНачалаДействия = '00010101', ДатаОкончанияДействия = '00010101', Описание = "")
	
	НовСтр = ДеревоФормИФорматов.Строки.Добавить();
	НовСтр.Код = СокрЛП(Код);
	НовСтр.ДатаПриказа = ДатаПриказа;
	НовСтр.НомерПриказа = СокрЛП(НомерПриказа);
	НовСтр.ДатаНачалаДействия = ДатаНачалаДействия;
	НовСтр.ДатаОкончанияДействия = ДатаОкончанияДействия;
	НовСтр.ИмяОбъекта = СокрЛП(ИмяОбъекта);
	НовСтр.Описание = СокрЛП(Описание);
	Возврат НовСтр;
	
КонецФункции

Функция ОпределитьФорматВДеревеФормИФорматов(Форма, Версия, ДатаПриказа = '00010101', НомерПриказа = "",
	                                         ДатаНачалаДействия = Неопределено, ДатаОкончанияДействия = Неопределено, ИмяОбъекта = "", Описание = "")
	
	НовСтр = Форма.Строки.Добавить();
	НовСтр.Код = СокрЛП(Версия);
	НовСтр.ДатаПриказа = ДатаПриказа;
	НовСтр.НомерПриказа = СокрЛП(НомерПриказа);
	НовСтр.ДатаНачалаДействия = ?(ДатаНачалаДействия = Неопределено, Форма.ДатаНачалаДействия, ДатаНачалаДействия);
	НовСтр.ДатаОкончанияДействия = ?(ДатаОкончанияДействия = Неопределено, Форма.ДатаОкончанияДействия, ДатаОкончанияДействия);
	НовСтр.ИмяОбъекта = СокрЛП(ИмяОбъекта);
	НовСтр.Описание = СокрЛП(Описание);
	Возврат НовСтр;
	
КонецФункции

Функция СтрокаЧГ0(ИсходноеЧисло) Экспорт // враппер
	
	Возврат РегламентированнаяОтчетность.СтрокаЧГ0(ИсходноеЧисло);
	
КонецФункции

мФормыИФорматы = РегламентированнаяОтчетность.НовоеДеревоФормИФорматов();

ФормаОтчета2012Кв4 = ОпределитьФормуВДеревеФормИФорматов(мФормыИФорматы, "710098", '2012-08-17', "113н", "ФормаОтчета2012Кв4");
ОпределитьФорматВДеревеФормИФорматов(ФормаОтчета2012Кв4, "5.01");

ФормаОтчета2012Кв4_2 = ОпределитьФормуВДеревеФормИФорматов(мФормыИФорматы, "710098", '2012-08-17', "113н", "ФормаОтчета2012Кв4_2");
ОпределитьФорматВДеревеФормИФорматов(ФормаОтчета2012Кв4_2, "5.01");
ОпределитьФорматВДеревеФормИФорматов(ФормаОтчета2012Кв4_2, "5.02");

ФормаОтчета2015Кв4 = ОпределитьФормуВДеревеФормИФорматов(мФормыИФорматы, "710096", '2015-04-06', "57н", "ФормаОтчета2015Кв4", '2015-01-01', '2017-12-31');
ОпределитьФорматВДеревеФормИФорматов(ФормаОтчета2015Кв4, "5.01");
ОпределитьФорматВДеревеФормИФорматов(ФормаОтчета2015Кв4, "5.02");

Форма20180101 = ОпределитьФормуВДеревеФормИФорматов(мФормыИФорматы, "710096", '2018-03-06', "41н", "ФормаОтчета2015Кв4", '2018-01-01', );
ОпределитьФорматВДеревеФормИФорматов(Форма20180101, "5.02");

мГруппаОрганизаций = Новый СписокЗначений;

мТаблицаСоставПоказателей = РегламентированнаяОтчетность.СозданиеТаблицыСоставаПоказателей();
мСтруктураВариантыЗаполнения = Новый Структура;
мТаблицаФормОтчета = РегламентированнаяОтчетность.СозданиеТаблицыФормОтчета();

НоваяФорма = мТаблицаФормОтчета.Добавить();
НоваяФорма.ФормаОтчета        = "ФормаОтчета2012Кв4";
НоваяФорма.ОписаниеОтчета     = "Утверждена приказом Минфина России от 17.08.2012 № 113н";
НоваяФорма.ДатаНачалоДействия = '2012-01-01';
НоваяФорма.ДатаКонецДействия  = '2012-01-01';

НоваяФорма = мТаблицаФормОтчета.Добавить();
НоваяФорма.ФормаОтчета        = "ФормаОтчета2012Кв4_2";
НоваяФорма.ОписаниеОтчета     = "Утверждена приказом Минфина России от 17.08.2012 № 113н";
НоваяФорма.ДатаНачалоДействия = '2012-01-01';
НоваяФорма.ДатаКонецДействия  = '2014-12-31';

НоваяФорма = мТаблицаФормОтчета.Добавить();
НоваяФорма.ФормаОтчета        = "ФормаОтчета2015Кв4";
НоваяФорма.ОписаниеОтчета     = "Утверждена приказом Минфина России от 17.08.2012 № 113н (в ред. приказа Минфина России от 06.04.2015 № 57н)";
НоваяФорма.ДатаНачалоДействия = '2015-01-01';
НоваяФорма.ДатаКонецДействия  = '2017-12-31';

НоваяФорма = мТаблицаФормОтчета.Добавить();
НоваяФорма.ФормаОтчета        = "ФормаОтчета2015Кв4";
НоваяФорма.ОписаниеОтчета     = "Утверждена приказом Минфина России от 17.08.2012 № 113н (в ред. приказа Минфина России от 06.03.2018 № 41н).";
НоваяФорма.ДатаНачалоДействия = '2018-01-01';
НоваяФорма.ДатаКонецДействия  = ОбщегоНазначения.ПустоеЗначениеТипа(Тип("Дата"));
