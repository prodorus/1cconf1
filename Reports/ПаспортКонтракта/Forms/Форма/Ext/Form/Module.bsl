
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Отчет.Контракт = Параметры.Ссылка;
	
	Заголовок = НСтр("ru= 'Паспорт контракта'") + " " + """" + Отчет.Контракт + """";
	
	ОбновитьНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	ОбновитьНаСервере();
КонецПроцедуры

&НаСервере
Процедура ОбновитьНаСервере()
	Результат.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = ИсточникиДанных275Сервер.ТекстЗапросаПаспортКонтракта();
	Запрос.УстановитьПараметр("Контракт", Отчет.Контракт);
	ДанныеОКонтракте = Запрос.ВыполнитьПакет();
	
	Макет = Отчеты.ПаспортКонтракта.ПолучитьМакет("ПечатнаяФорма");
	ОбластьОтступ = Макет.ПолучитьОбласть("Секция_Отступ");
	
	ЭтоКонтрактСЗаказчиком = ТипЗнч(Отчет.Контракт) = Тип("СправочникСсылка.КонтрактыСЗаказчиками");
	
	// Получение данных для заполнения секций
	ОсновнаяИнформация					= ДанныеОКонтракте[7].Выгрузить()[0];
	КонтактнаяИнформация				= ДанныеОКонтракте[1].Выгрузить();
	КонтактнаяИнформацияОтветственного	= ДанныеОКонтракте[2].Выгрузить();
	БанковскиеСчетаЗаказчика			= ДанныеОКонтракте[3].Выгрузить();
	БанковскиеСчетаИсполнителя			= ДанныеОКонтракте[4].Выгрузить();
	ГрафикПлатежей						= ДанныеОКонтракте[5].Выгрузить();
	Если ЭтоКонтрактСЗаказчиком Тогда
		СтоимостныеХарактеристики		= ДанныеОКонтракте[6].Выгрузить()[0];
	КонецЕсли;
	
	// Параметры формирования печатной формы
	ТребуетсяТипПлатежа275ФЗ = Ложь; // Включается при расширении электронного формата паспорта контракта
	ТребуетсяПериодДействия = ТипЗнч(Отчет.Контракт) = Тип("СправочникСсылка.КонтрактыСЗаказчиками");
	
	ТребуетсяИННКППЗаказчика = Не ОсновнаяИнформация.ЗаказчикИностранный;
	ТребуетсяСтранаЗаказчика = ОсновнаяИнформация.ЗаказчикИностранный;
	ТребуетсяРегНомерЗаказчика = ОсновнаяИнформация.ЗаказчикИностранный;
	ТребуетсяДатаРегистрацииЗаказчика = ОсновнаяИнформация.ЗаказчикИностранный;
	ТребуютсяБанковскиеСчетаЗаказчика = ТипЗнч(Отчет.Контракт) = Тип("СправочникСсылка.КонтрактыИсполнителей");
	ЗаказчикКонтрагент = ТипЗнч(ОсновнаяИнформация.КонтрактЗаказчик) = Тип("СправочникСсылка.Контрагенты");
	
	ТребуетсяИННКППИсполнителя = Не ОсновнаяИнформация.ИсполнительИностранный;
	ТребуетсяСтранаИсполнителя = ОсновнаяИнформация.ИсполнительИностранный;
	ТребуетсяРегНомерИсполнителя = ОсновнаяИнформация.ИсполнительИностранный;
	ТребуетсяДатаРегистрацииИсполнителя = ОсновнаяИнформация.ИсполнительИностранный;
	ИсполнительКонтрагент = ТипЗнч(ОсновнаяИнформация.КонтрактИсполнитель) = Тип("СправочникСсылка.Контрагенты");
	
	//#Область Заголовок
		ОбластьЗаголовок = Макет.ПолучитьОбласть("Секция_Заголовок");
		ЗаполнитьЗначенияСвойств(ОбластьЗаголовок.Параметры, ОсновнаяИнформация);
		
		// Уточнение или форматирование информации
		ОбластьЗаголовок.Параметры["КонтрактДата"] = Формат(ОсновнаяИнформация["КонтрактДата"], "ДФ=dd.MM.yyyy");
		
		Результат.Вывести(ОбластьЗаголовок);
	//#КонецОбласти 
	
	//#Область ГосударственныйКонтракт
	Если ОсновнаяИнформация["КонтрактСУчастникомГОЗ"] Тогда
		Результат.Вывести(ОбластьОтступ);
		
		ОбластьГК = Макет.ПолучитьОбласть("Секция_ГК");
		ЗаполнитьЗначенияСвойств(ОбластьГК.Параметры, ОсновнаяИнформация);
		
		// Скрытие неиспользуемых секций
		Если Не ЗначениеЗаполнено(ОсновнаяИнформация["ГКПредмет"]) Тогда
			ОбластьГК.УдалитьОбласть(ОбластьГК.Области["Секция_ГКПредмет"], ТипСмещенияТабличногоДокумента.ПоВертикали);
		КонецЕсли;
		
		// Уточнение или форматирование информации
		ОбластьГК.Параметры["ГКПериодДействия"] = ПериодДействияГК(ОсновнаяИнформация);
		
		Результат.Вывести(ОбластьГК);
	КонецЕсли;
	//#КонецОбласти 
	
	//#Область ОсновнаяИнформация
		Результат.Вывести(ОбластьОтступ);
		
		ОбластьКонтракт = Макет.ПолучитьОбласть("Секция_Контракт");
		ЗаполнитьЗначенияСвойств(ОбластьКонтракт.Параметры, ОсновнаяИнформация);
		
		// Скрытие неиспользуемых секций
		Если Не ТребуетсяПериодДействия Тогда
			ОбластьКонтракт.УдалитьОбласть(ОбластьКонтракт.Области["Секция_КонтрактПериодДействия"], ТипСмещенияТабличногоДокумента.ПоВертикали);
		КонецЕсли;
		Если Не ТребуетсяТипПлатежа275ФЗ Тогда
			ОбластьКонтракт.УдалитьОбласть(ОбластьКонтракт.Области["Секция_КонтрактТипПлатежаФЗ275"], ТипСмещенияТабличногоДокумента.ПоВертикали);
		КонецЕсли;
		
		// Уточнение или форматирование информации
		Если ОсновнаяИнформация["КонтрактСУчастникомГОЗ"] Тогда
			ОбластьКонтракт.Параметры["КонтрактВидКонтракта"] = НСтр("ru= 'Контракт с участником кооперации ГОЗ'");
		Иначе
			ОбластьКонтракт.Параметры["КонтрактВидКонтракта"] = НСтр("ru= 'Прочий контракт'");
		КонецЕсли;
		Если ТребуетсяПериодДействия Тогда
			ОбластьКонтракт.Параметры["КонтрактПериодДействия"] = ПериодДействия(ОсновнаяИнформация);
		КонецЕсли;
		ОбластьКонтракт.Параметры["КонтрактОтветственныйКонтакты"]	= ОтветственныйИКонтакты(ОсновнаяИнформация, КонтактнаяИнформацияОтветственного);
		
		Результат.Вывести(ОбластьКонтракт);
	//#КонецОбласти 
	
	//#Область Заказчик
		Результат.Вывести(ОбластьОтступ);
		
		ОбластьЗаказчик = Макет.ПолучитьОбласть("Секция_Заказчик");
		ЗаполнитьЗначенияСвойств(ОбластьЗаказчик.Параметры, ОсновнаяИнформация);
		
		// Скрытие неиспользуемых секций
		Если Не ТребуетсяСтранаЗаказчика Тогда
			ОбластьЗаказчик.УдалитьОбласть(ОбластьЗаказчик.Области["Секция_ЗаказчикСтранаРегистрации"], ТипСмещенияТабличногоДокумента.ПоВертикали);
		КонецЕсли;
		Если Не ТребуетсяИННКППЗаказчика Тогда
			ОбластьЗаказчик.УдалитьОбласть(ОбластьЗаказчик.Области["Секция_ЗаказчикИННКПП"], ТипСмещенияТабличногоДокумента.ПоВертикали);
		КонецЕсли;
		Если Не ТребуетсяРегНомерЗаказчика Тогда
			ОбластьЗаказчик.УдалитьОбласть(ОбластьЗаказчик.Области["Секция_ЗаказчикРегистрационныйНомер"], ТипСмещенияТабличногоДокумента.ПоВертикали);
		КонецЕсли;
		Если Не ТребуетсяДатаРегистрацииЗаказчика Тогда
			ОбластьЗаказчик.УдалитьОбласть(ОбластьЗаказчик.Области["Секция_ЗаказчикДатаРегистрации"], ТипСмещенияТабличногоДокумента.ПоВертикали);
		КонецЕсли;
		Если Не ТребуютсяБанковскиеСчетаЗаказчика Тогда
			ОбластьЗаказчик.УдалитьОбласть(ОбластьЗаказчик.Области["Секция_ЗаказчикБанковскиеСчета"], ТипСмещенияТабличногоДокумента.ПоВертикали);
		КонецЕсли;
		
		// Уточнение или форматирование информации
		Если ТребуетсяИННКППЗаказчика Тогда
			ОбластьЗаказчик.Параметры["ЗаказчикИННКПП"] = ИННКПП(ОсновнаяИнформация, "Заказчик");
		КонецЕсли;
		ОбластьЗаказчик.Параметры["ЗаказчикЮрАдрес"] = КонтактнаяИнформацияПоВиду(ОсновнаяИнформация, КонтактнаяИнформация, 
			?(ЗаказчикКонтрагент, Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента, Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации),
			"Заказчик");
		
		ОбластьЗаказчик.Параметры["ЗаказчикТелефон"] = КонтактнаяИнформацияПоВиду(ОсновнаяИнформация, КонтактнаяИнформация, 
			?(ЗаказчикКонтрагент, Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента, Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации),
			"Заказчик");
			
		Если ТребуютсяБанковскиеСчетаЗаказчика Тогда
			ОбластьЗаказчик.Параметры["ЗаказчикБанковскиеСчета"] = БанковскиеСчета(ОсновнаяИнформация, БанковскиеСчетаЗаказчика, "Заказчик");
		КонецЕсли;
		
		Результат.Вывести(ОбластьЗаказчик);
	//#КонецОбласти 
	
	//#Область Исполнитель
		Результат.Вывести(ОбластьОтступ);
		
		ОбластьИсполнитель = Макет.ПолучитьОбласть("Секция_Исполнитель");
		ЗаполнитьЗначенияСвойств(ОбластьИсполнитель.Параметры, ОсновнаяИнформация);
		
		// Скрытие неиспользуемых секций
		Если Не ТребуетсяСтранаИсполнителя Тогда
			ОбластьИсполнитель.УдалитьОбласть(ОбластьИсполнитель.Области["Секция_ИсполнительСтранаРегистрации"], ТипСмещенияТабличногоДокумента.ПоВертикали);
		КонецЕсли;
		Если Не ТребуетсяИННКППИсполнителя Тогда
			ОбластьИсполнитель.УдалитьОбласть(ОбластьИсполнитель.Области["Секция_ИсполнительИННКПП"], ТипСмещенияТабличногоДокумента.ПоВертикали);
		КонецЕсли;
		Если Не ТребуетсяРегНомерИсполнителя Тогда
			ОбластьИсполнитель.УдалитьОбласть(ОбластьИсполнитель.Области["Секция_ИсполнительРегистрационныйНомер"], ТипСмещенияТабличногоДокумента.ПоВертикали);
		КонецЕсли;
		Если Не ТребуетсяДатаРегистрацииИсполнителя Тогда
			ОбластьИсполнитель.УдалитьОбласть(ОбластьИсполнитель.Области["Секция_ИсполнительДатаРегистрации"], ТипСмещенияТабличногоДокумента.ПоВертикали);
		КонецЕсли;
		
		// Уточнение или форматирование информации
		Если ТребуетсяИННКППИсполнителя Тогда
			ОбластьИсполнитель.Параметры["ИсполнительИННКПП"] = ИННКПП(ОсновнаяИнформация, "Исполнитель");
		КонецЕсли;
		ОбластьИсполнитель.Параметры["ИсполнительЮрАдрес"] = КонтактнаяИнформацияПоВиду(ОсновнаяИнформация, КонтактнаяИнформация, 
			?(ИсполнительКонтрагент, Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента, Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации),
			"Исполнитель");
		
		ОбластьИсполнитель.Параметры["ИсполнительТелефон"] = КонтактнаяИнформацияПоВиду(ОсновнаяИнформация, КонтактнаяИнформация, 
			?(ИсполнительКонтрагент, Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента, Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации),
			"Исполнитель");
		
		ОбластьИсполнитель.Параметры["ИсполнительБанковскиеСчета"] = БанковскиеСчета(ОсновнаяИнформация, БанковскиеСчетаИсполнителя, "Исполнитель");
		
		Результат.Вывести(ОбластьИсполнитель);
	//#КонецОбласти 
	
	//#Область ГрафикПлатежей
		Результат.Вывести(ОбластьОтступ);
		
		ОбластьГрафикПлатежейШапка = Макет.ПолучитьОбласть("Секция_ГрафикПлатежей_Шапка");
		Результат.Вывести(ОбластьГрафикПлатежейШапка);
		
		ОбластьГрафикПлатежейСтрока = Макет.ПолучитьОбласть("Секция_ГрафикПлатежей_Строка");
		Для Каждого СтрокаГрафика Из ГрафикПлатежей Цикл 
			ЗаполнитьЗначенияСвойств(ОбластьГрафикПлатежейСтрока.Параметры, СтрокаГрафика);
			
			// Уточнение или форматирование информации
			ОбластьГрафикПлатежейСтрока.Параметры["ГрафикНазначениеПлатежа"] = НазначениеПлатежа(ОсновнаяИнформация, СтрокаГрафика);
			
			Результат.Вывести(ОбластьГрафикПлатежейСтрока);
		КонецЦикла;
		
		ОбластьГрафикПлатежейИтог = Макет.ПолучитьОбласть("Секция_ГрафикПлатежей_Итог");
		ОбластьГрафикПлатежейИтог.Параметры["ГрафикСуммаВсего"] = ГрафикПлатежей.Итог("ГрафикСумма");
		Результат.Вывести(ОбластьГрафикПлатежейИтог);
	//#КонецОбласти 
	
	//#Область СтоимостныеХарактеристики
		Результат.Вывести(ОбластьОтступ);
		
		ОбластьСтоимость = Макет.ПолучитьОбласть("Секция_СтоимостныеХарактеристикиКонтракта");
		ЗаполнитьЗначенияСвойств(ОбластьСтоимость.Параметры, ОсновнаяИнформация, "КонтрактСуммаКонтракта, КонтрактПрибыль");
		Если ЭтоКонтрактСЗаказчиком Тогда
			ЗаполнитьЗначенияСвойств(ОбластьСтоимость.Параметры, СтоимостныеХарактеристики, "КонтрактСуммаЗатрат, КонтрактСтоимостьЗапасовЗаСчетСобственныхСредств");
		КонецЕсли;
		
		// Скрытие неиспользуемых секций
		Если Не ЭтоКонтрактСЗаказчиком Тогда
			ОбластьСтоимость.УдалитьОбласть(ОбластьСтоимость.Области["Секция_КонтрактСуммаЗатрат"], ТипСмещенияТабличногоДокумента.ПоВертикали);
			ОбластьСтоимость.УдалитьОбласть(ОбластьСтоимость.Области["Секция_КонтрактСтоимостьЗапасовЗаСчетСобственныхСредств"], ТипСмещенияТабличногоДокумента.ПоВертикали);
			ОбластьСтоимость.УдалитьОбласть(ОбластьСтоимость.Области["Секция_КонтрактПрибыль"], ТипСмещенияТабличногоДокумента.ПоВертикали);
		КонецЕсли;
		
		Результат.Вывести(ОбластьСтоимость);
	//#КонецОбласти 
	
	// Параметры печати
	Результат.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	Результат.АвтоМасштаб = Истина;
	
	// Поля
	Результат.ПолеСверху = 5;
	Результат.ПолеСнизу = 10;
	Результат.ПолеСлева = 5;
	Результат.ПолеСправа = 5;
	
	Результат.РазмерКолонтитулаСверху = 5;
	Результат.РазмерКолонтитулаСнизу = 5;
	
	// Колонтитулы
	Результат.НижнийКолонтитул.Выводить = Истина;
	Результат.НижнийКолонтитул.ТекстСправа = НСтр("ru= 'Страница [&НомерСтраницы] из [&СтраницВсего]'");
	
	// Прочие параметры
	Результат.Защита = Истина;
	Результат.ОтображатьЗаголовки = Ложь;
	Результат.ОтображатьСетку = Ложь;
	Результат.КлючПараметровПечати = "ПечатнаяФормаПаспортКонтракта";
	Результат.ИспользуемоеИмяФайла = НСтр("ru= 'Паспорт контракта'") + " " + Отчет.Контракт;
КонецПроцедуры

&НаСервереБезКонтекста 
Функция ОтветственныйИКонтакты(ОсновнаяИнформация, КонтактнаяИнформацияОтветственного)
	СтрокаОтветственныйИКонтакты = "";
	СтрокаКонтактов = "";
	
	СтрокаОтветственныйИКонтакты = СтрокаОтветственныйИКонтакты + ОсновнаяИнформация["КонтрактОтветственный"];
		
	Отбор = Новый Структура("Ответственный", ОсновнаяИнформация["КонтрактОтветственный"]);
	НайденныеСтроки = КонтактнаяИнформацияОтветственного.НайтиСтроки(Отбор);
	
	Если НайденныеСтроки.Количество() > 0 Тогда
		МассивСтрок = Новый Массив;
		
		Отбор = Новый Структура("ОтветственныйТипКонтактнойИнформации", Перечисления.ТипыКонтактнойИнформации.Телефон);
		НайденныеСтроки  = КонтактнаяИнформацияОтветственного.НайтиСтроки(Отбор);
		Если НайденныеСтроки.Количество() > 0 Тогда
			МассивСтрок.Добавить(НайденныеСтроки[0]["ОтветственныйПредставлениеКонтактнойИнформации"]);
		КонецЕсли;
		
		Отбор = Новый Структура("ОтветственныйТипКонтактнойИнформации", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
		НайденныеСтроки  = КонтактнаяИнформацияОтветственного.НайтиСтроки(Отбор);
		Если НайденныеСтроки.Количество() > 0 Тогда
			МассивСтрок.Добавить(НайденныеСтроки[0]["ОтветственныйПредставлениеКонтактнойИнформации"]);
		КонецЕсли;
		
		СтрокаКонтактов = СтроковыеФункцииКлиентСервер.ПолучитьСтрокуИзМассиваПодстрок(МассивСтрок, ", ");
		
		СтрокаОтветственныйИКонтакты = СтрокаОтветственныйИКонтакты 
			+ ?(ЗначениеЗаполнено(СтрокаКонтактов), " " + "(" + СтрокаКонтактов + ")", "");
	КонецЕсли;
	
	Возврат СтрокаОтветственныйИКонтакты;
КонецФункции

&НаСервереБезКонтекста 
Функция ПериодДействияГК(ОсновнаяИнформация)
	СтрокаПериодДействия = "";
	СтрокаГодНачала = "";
	СтрокаГодОкончания = "";
	
	МассивСтрок = Новый Массив;
	
	СтрокаГодНачала = ?(ЗначениеЗаполнено(ОсновнаяИнформация["ГКГодЗаключения"]), НСтр("ru= 'с'") + " " + Формат(ОсновнаяИнформация["ГКГодЗаключения"], "ЧГ=0"), "");
	Если ЗначениеЗаполнено(СтрокаГодНачала) Тогда
		МассивСтрок.Добавить(СтрокаГодНачала);
	КонецЕсли;
	
	СтрокаГодОкончания = ?(ЗначениеЗаполнено(ОсновнаяИнформация["ГКГодОкончания"]), НСтр("ru= 'по'") + " " + Формат(ОсновнаяИнформация["ГКГодОкончания"], "ЧГ=0"), "");
	Если ЗначениеЗаполнено(СтрокаГодОкончания) Тогда
		МассивСтрок.Добавить(СтрокаГодОкончания);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаГодНачала)
		И ЗначениеЗаполнено(СтрокаГодОкончания) Тогда 
		МассивСтрок.Добавить(НСтр("ru= 'гг.'"));
	ИначеЕсли ЗначениеЗаполнено(СтрокаГодНачала)
		Или ЗначениеЗаполнено(СтрокаГодОкончания) Тогда 
		МассивСтрок.Добавить(НСтр("ru= 'г.'"));
	КонецЕсли;
	
	СтрокаПериодДействия = СтроковыеФункцииКлиентСервер.ПолучитьСтрокуИзМассиваПодстрок(МассивСтрок, " ");
	
	Возврат СтрокаПериодДействия;
КонецФункции

&НаСервереБезКонтекста 
Функция ПериодДействия(ОсновнаяИнформация)
	СтрокаПериодДействия = "";
	СтрокаДатаНачала = "";
	СтрокаДатаОкончания = "";
	
	МассивСтрок = Новый Массив;
	
	СтрокаДатаНачала = ?(ЗначениеЗаполнено(ОсновнаяИнформация["КонтрактДатаНачала"]), НСтр("ru= 'с'") + " " + Формат(ОсновнаяИнформация["КонтрактДатаНачала"], "ДФ=dd.MM.yyyy"), "");
	Если ЗначениеЗаполнено(СтрокаДатаНачала) Тогда
		МассивСтрок.Добавить(СтрокаДатаНачала);
	КонецЕсли;
	
	СтрокаДатаОкончания = ?(ЗначениеЗаполнено(ОсновнаяИнформация["КонтрактДатаОкончания"]), НСтр("ru= 'по'") + " " + Формат(ОсновнаяИнформация["КонтрактДатаОкончания"], "ДФ=dd.MM.yyyy"), "");
	Если ЗначениеЗаполнено(СтрокаДатаОкончания) Тогда
		МассивСтрок.Добавить(СтрокаДатаОкончания);
	КонецЕсли;
	
	СтрокаПериодДействия = СтроковыеФункцииКлиентСервер.ПолучитьСтрокуИзМассиваПодстрок(МассивСтрок, " ");
	
	Возврат СтрокаПериодДействия;
КонецФункции

&НаСервереБезКонтекста 
Функция ИННКПП(ОсновнаяИнформация, ЗаказчикИсполнитель)
	СтрокаИННКПП = "";
	
	МассивСтрок = Новый Массив;
	
	Если ЗначениеЗаполнено(ОсновнаяИнформация[ЗаказчикИсполнитель + "ИНН"]) Тогда
		МассивСтрок.Добавить(НСтр("ru= 'ИНН'") + ": " + ОсновнаяИнформация[ЗаказчикИсполнитель + "ИНН"]);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОсновнаяИнформация[ЗаказчикИсполнитель + "КПП"]) Тогда
		МассивСтрок.Добавить(НСтр("ru= 'КПП'") + ": " + ОсновнаяИнформация[ЗаказчикИсполнитель + "КПП"]);
	КонецЕсли;
	
	СтрокаИННКПП = СтроковыеФункцииКлиентСервер.ПолучитьСтрокуИзМассиваПодстрок(МассивСтрок, " / ");
	
	Возврат СтрокаИННКПП;
КонецФункции

&НаСервереБезКонтекста 
Функция КонтактнаяИнформацияПоВиду(ОсновнаяИнформация, КонтактнаяИнформация, Вид, ЗаказчикИсполнительОтветственный)
	СтрокаКонтактнаяИнформация = "";
	
	Отбор = Новый Структура(ЗаказчикИсполнительОтветственный + "," + ЗаказчикИсполнительОтветственный + "ВидКонтактнойИнформации", 
		ОсновнаяИнформация["Контракт" + ЗаказчикИсполнительОтветственный], Вид);
	НайденныеСтроки = КонтактнаяИнформация.НайтиСтроки(Отбор);
	
	Если НайденныеСтроки.Количество() > 0 Тогда
		СтрокаКонтактнаяИнформация = НайденныеСтроки[0][ЗаказчикИсполнительОтветственный + "ПредставлениеКонтактнойИнформации"];
	КонецЕсли;
		
	Возврат СтрокаКонтактнаяИнформация;
КонецФункции

&НаСервереБезКонтекста 
Функция БанковскиеСчета(ОсновнаяИнформация, БанковскиеСчета, ЗаказчикИсполнитель)
	СтрокаБанковскиеСчета = "";
	Префикс = ЗаказчикИсполнитель + "БанковскийСчет";
	
	Отбор = Новый Структура(ЗаказчикИсполнитель, ОсновнаяИнформация["Контракт" + ЗаказчикИсполнитель]);
	НайденныеСтроки = БанковскиеСчета.НайтиСтроки(Отбор);
	
	МассивСтрок = Новый Массив;
	
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл 
		РеквизитыСчета = Новый Массив;
		РеквизитыСчета.Добавить(Строка(НайденнаяСтрока[Префикс + "НаименованиеБанка"]) + " " + НСтр("ru= 'в'") + " " + Строка(НайденнаяСтрока[Префикс + "ГородБанка"]));
		РеквизитыСчета.Добавить(НСтр("ru= 'р/с'") + " " + Строка(НайденнаяСтрока[Префикс + "НомерСчета"]));
		РеквизитыСчета.Добавить(НСтр("ru= 'кор/счет'") + " " + Строка(НайденнаяСтрока[Префикс + "КоррСчетБанка"]));
		РеквизитыСчета.Добавить(НСтр("ru= 'БИК'")+ ": " + Строка(НайденнаяСтрока[Префикс + "БИКБанка"]));
		РеквизитыСчета.Добавить(НСтр("ru= 'SWIFT'")+ ": " + Строка(НайденнаяСтрока[Префикс + "СВИФТБанка"]));
		
		МассивСтрок.Добавить(СтроковыеФункцииКлиентСервер.ПолучитьСтрокуИзМассиваПодстрок(РеквизитыСчета, ", "));
	КонецЦикла;
	
	СтрокаБанковскиеСчета = СтроковыеФункцииКлиентСервер.ПолучитьСтрокуИзМассиваПодстрок(МассивСтрок, Символы.ПС + Символы.ПС);
	
	Возврат СтрокаБанковскиеСчета;
КонецФункции

&НаСервереБезКонтекста 
Функция НазначениеПлатежа(ОсновнаяИнформация, СтрокаГрафика)
	НазначениеПлатежа = "";
	
	Если ТипЗнч(ОсновнаяИнформация.Контракт) = Тип("СправочникСсылка.КонтрактыСЗаказчиками") Тогда
		НазначениеПлатежа = СтрокаГрафика.ГрафикКомментарий;
	Иначе
		ПараметрыНазначения = Новый Структура("ПлатежПоФЗ275, ТипПлатежаФЗ275, ЭтапКонтракта, ВидОперации, ПодтверждающиеДокументы"); 
		ПараметрыНазначения.Вставить("ПлатежПоФЗ275", ОсновнаяИнформация["КонтрактПлатежиПо275ФЗ"]);
		ПараметрыНазначения.Вставить("ТипПлатежаФЗ275", ОсновнаяИнформация["КонтрактТипПлатежаФЗ275"]);
		ПараметрыНазначения.Вставить("ЭтапКонтракта", СтрокаГрафика["ГрафикЭтапКонтракта"]); 
		ПараметрыНазначения.Вставить("ВидОперации", Перечисления.ВидыОперацийППИсходящее.ПустаяСсылка());
		ПараметрыНазначения.Вставить("СтавкаНДС", Перечисления.СтавкиНДС.ПустаяСсылка());
		ПараметрыНазначения.Вставить("Сумма", СтрокаГрафика.ГрафикСумма);
		
		ПодтверждающиеДокументыШаблон = ОсновнаяИнформация["Контракт"].ПодтверждающиеДокументы.Выгрузить();
		
		ПараметрыНазначения.Вставить("ПодтверждающиеДокументы", ПодтверждающиеДокументыШаблон);
		
		НазначениеПлатежа = Контроли275Сервер.НазначениеПлатежа(ПараметрыНазначения);
	КонецЕсли;
	
	Возврат НазначениеПлатежа;
КонецФункции
