
Перем ИмяРегистраБухгалтерии Экспорт;

Перем ШиринаТаблицы;

#Если Клиент Тогда

//////////////////////////////////////////////////////////
// ФОРМИРОВАНИЕ ЗАГОЛОВКА ОТЧЕТА
//

// Выводит заголовок отчета
//
// Параметры:
//	Нет.
//
Функция СформироватьЗаголовок() Экспорт

	// Вывод заголовка, описателя периода и фильтров и заголовка
	ОписаниеПериода = БухгалтерскиеОтчеты.СформироватьСтрокуВыводаПараметровПоДатам(ДатаНач, ДатаКон);
	
	Макет = ПолучитьМакет("Макет");
	
	БухгалтерскиеОтчеты.УдалитьОбластьИзмакетаПриНеобходимости(Макет, "СальдоНачДт", СальдоНачДт);
	БухгалтерскиеОтчеты.УдалитьОбластьИзмакетаПриНеобходимости(Макет, "СальдоНачКт", СальдоНачКт);
	БухгалтерскиеОтчеты.УдалитьОбластьИзмакетаПриНеобходимости(Макет, "СальдоКонДт", СальдоКонДт);
	БухгалтерскиеОтчеты.УдалитьОбластьИзмакетаПриНеобходимости(Макет, "СальдоКонКт", СальдоКонКт);
	
	БухгалтерскиеОтчеты.УдалитьОбластьИзмакетаПриНеобходимости(Макет, "ОборотДт", ОборотДт);
	БухгалтерскиеОтчеты.УдалитьОбластьИзмакетаПриНеобходимости(Макет, "ОборотКт", ОборотКт);
	БухгалтерскиеОтчеты.УдалитьОбластьИзмакетаПриНеобходимости(Макет, "ОборотДтКорСчет", ОборотДтКорСчета);
	БухгалтерскиеОтчеты.УдалитьОбластьИзмакетаПриНеобходимости(Макет, "ОборотКтКорСчет", ОборотКтКорСчета);
			
	ЗаголовокОтчета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьЗаголовок=Макет.Область("Заголовок");
	
	// После удаления областей нужно установить свойства ПоВыделеннымКолонкам
	Для Сч = 1 По ЗаголовокОтчета.ВысотаТаблицы-1 Цикл
		
		Макет.Область(ОбластьЗаголовок.Верх+Сч, 2, ОбластьЗаголовок.Верх+Сч, 2).РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
		Макет.Область(ОбластьЗаголовок.Верх+Сч, 2, ОбластьЗаголовок.Верх+Сч, ОбластьЗаголовок.Право).ПоВыделеннымКолонкам = Истина;
		
	КонецЦикла;
	
	ЗаголовокОтчета = Макет.ПолучитьОбласть("Заголовок");

	НазваниеОрганизации = Организация.НаименованиеПолное;
	Если ПустаяСтрока(НазваниеОрганизации) Тогда
		НазваниеОрганизации = Организация;
	КонецЕсли;
	
	ЗаголовокОтчета.Параметры.НазваниеОрганизации = НазваниеОрганизации;
	
	ЗаголовокОтчета.Параметры.ОписаниеПериода = ОписаниеПериода;

	ТекстПроСписокПоказателей = "Выводимые данные: сумма";
	
	Если ПоВалютам Тогда
	
		ТекстПроСписокПоказателей = ТекстПроСписокПоказателей + ", валютная сумма";
	
	КонецЕсли; 
	
	ТекстПроИтоги = "";
	Если ПоСубсчетам Или ПоСубсчетамКорСчетов Тогда
		ТекстПроИтоги = ТекстПроИтоги + ", субсчетам"
	КонецЕсли;

	Если ПостроительОтчета.ИзмеренияСтроки.Количество() > 0 Тогда
		ТекстПроИтоги = ТекстПроИтоги + ", субконто: ";
		СтрокаИзмерений = "";
		Для каждого Измерение Из ПостроительОтчета.ИзмеренияСтроки Цикл
			СтрокаИзмерений = СтрокаИзмерений + ", " + Измерение.Представление;
		КонецЦикла;
		ТекстПроИтоги = ТекстПроИтоги + Сред(СтрокаИзмерений, 3);
	КонецЕсли;

	ТекстПроИтоги = Сред(ТекстПроИтоги, 3);

	ЗаголовокОтчета.Параметры.ТекстПроСписокПоказателей = ТекстПроСписокПоказателей;
	Если Не ПустаяСтрока(ТекстПроИтоги) Тогда
		ЗаголовокОтчета.Параметры.ТекстПроИтоги = "Детализация по " + ТекстПроИтоги;
	КонецЕсли;

	ЗаголовокОтчета.Параметры.Заголовок = ЗаголовокОтчета();
	
	// Вывод списка фильтров:
	СтрОтбор = УправлениеОтчетами.СформироватьСтрокуОтборов(ПостроительОтчета.Отбор);

	Если Не ПустаяСтрока(СтрОтбор) Тогда
		ОбластьОтбор = Макет.ПолучитьОбласть("СтрокаОтбор");
		ОбластьОтбор.Параметры.ТекстПроОтбор = "Отбор: " + СтрОтбор;
		ЗаголовокОтчета.Вывести(ОбластьОтбор);
	КонецЕсли;

	Возврат(ЗаголовокОтчета);

КонецФункции // СформироватьЗаголовок()

Функция ЗаголовокОтчета() Экспорт
	
	ИмяОтчета = "Обороты счета ";
	
	Возврат ИмяОтчета + ?(ЗначениеЗаполнено(Счет), Счет, "(не выбран счет)") + " (международный учет)";
	
КонецФункции // ЗаголовокОтчета()


//////////////////////////////////////////////////////////
// ПОСТРОЕНИЕ ОТЧЕТА
//

//Функция возвращает ограничения для отчета
Функция ПолучитьСтрокуОграниченийПоРеквизитамИПостроителю(Запрос)
	
	ОграниченияПоПостроителюОтчета = БухгалтерскиеОтчеты.ПолучитьТекстОграниченийПоПостроителюОтчета(ПостроительОтчета, Запрос);
	
	СтрокаОграниченийПоРеквизитам = "";
	БухгалтерскиеОтчеты.ДополнитьСтрокуОграниченийПоРеквизитам(СтрокаОграниченийПоРеквизитам, "Организация", Организация);
		
	Если Не ПустаяСтрока(ОграниченияПоПостроителюОтчета)
		И Не ПустаяСтрока(СтрокаОграниченийПоРеквизитам) Тогда
		
		ОграниченияПоПостроителюОтчета = " И " + ОграниченияПоПостроителюОтчета;
		
	КонецЕсли;
	
	Возврат СтрокаОграниченийПоРеквизитам + ОграниченияПоПостроителюОтчета;
	
КонецФункции

//Процедура устанавливает ограничения по запросу
Процедура УстановитьПараметрыОграниченийДляЗапроса(Запрос, Знач АвтоматическиРассчитатьКонечнуюДатуОтчета = Ложь)
	
	Запрос.УстановитьПараметр("Счет", Счет);
	Запрос.УстановитьПараметр("Организация", Организация);
		
	Запрос.УстановитьПараметр("ДатаНач", ДатаНач);
	
	Если ДатаНач='00010101000000' Тогда
		Запрос.УстановитьПараметр("ДатаНач", ДатаНач+1);
	КонецЕсли;
	
	КонечнаяДатаОтчета = ДатаКон;			
		
	Если АвтоматическиРассчитатьКонечнуюДатуОтчета Тогда
			
		Если НЕ(НЕ ЗначениеЗаполнено(Период)
			ИЛИ Врег(Период) = "РЕГИСТРАТОР") Тогда
				
			ДатаПоследнегоОборота = ПолучитьДатуПоследнегоОборотаПоОтчету();
			КонечнаяДатаОтчета = ДатаПоследнегоОборота;
				
		КонецЕсли;
				
	КонецЕсли;
	
	Если КонечнаяДатаОтчета <> '00010101000000' Тогда
		КонечнаяДатаОтчета = КонецДня(КонечнаяДатаОтчета);			
	КонецЕсли;
		
	Запрос.УстановитьПараметр("ДатаКон", КонечнаяДатаОтчета);
	
КонецПроцедуры

//Функция возвращает дату последнего оборота по ограничениям
Функция ПолучитьДатуПоследнегоОборотаПоОтчету()
	
	Запрос = Новый Запрос;
	УстановитьПараметрыОграниченийДляЗапроса(Запрос);
	
	ОграниченияПоРеквизитам = ПолучитьСтрокуОграниченийПоРеквизитамИПостроителю(Запрос);
	
	Запрос.Текст = "
	|Выбрать Разрешенные 
	|	Период КАК Период,
	|	КорСчет КАК КорСчет
	|ИЗ
	|	РегистрБухгалтерии."+ИмяРегистраБухгалтерии+".Обороты(&ДатаНач, &ДатаКон, " + Период + ", Счет В ИЕРАРХИИ (&Счет), , " + 
	ОграниченияПоРеквизитам + ") КАК БухОбороты
	|	УПОРЯДОЧИТЬ ПО
	|		Период УБЫВ";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат КонецГода(ТекущаяДата());
	КонецЕсли;
		
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	КонечнаяДатаПериода = БухгалтерскиеОтчеты.ПолучитьДатуОкончанияПериода(Выборка.Период, Период);
	Возврат КонечнаяДатаПериода;
	
КонецФункции

// Формирование текста запроса
//
// Возвращаемое значение:
//   Строка   – текст сформированного запроса
//
Функция ПолучитьТекстЗапроса(Запрос, МассивРесурсов)

	Периодичность = Период;
	
	ТекстСубконто = "";
	ТекстСубконтоИзмерения = "";
	
	// Субконто отчета
	Для Инд = 0 По ПостроительОтчета.ИзмеренияСтроки.Количество()-1 Цикл
		
		Измерение = ПостроительОтчета.ИзмеренияСтроки[Инд];
		
		СтрокаТипаИзмерения = БухгалтерскиеОтчеты.ПолучитьПоТипуИзмеренияПостроителяОтчетаСтрокуЗапроса(Измерение.ТипИзмерения);
		
		ТекстСубконто = ТекстСубконто + ",
		|	" + Измерение.ПутьКДанным + " КАК " + Измерение.Имя;
		ТекстСубконто = ТекстСубконто + ",
		|	ПРЕДСТАВЛЕНИЕ(" + Измерение.ПутьКДанным + ") КАК " + Измерение.Имя + "Представление";
		
		ТекстСубконтоИзмерения = ТекстСубконтоИзмерения + ",
		|	" + Измерение.ПутьКДанным +" "+СтрокаТипаИзмерения + " КАК " + Измерение.Имя;
						
	КонецЦикла;
	
	ОграниченияПоРеквизитам = ПолучитьСтрокуОграниченийПоРеквизитамИПостроителю(Запрос);
	
	Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	БухОбороты.Счет КАК Счет, 
	|	БухОбороты.Счет.Вид КАК ВидСчета, 
	|	БухОбороты.Счет.Порядок КАК СчетПорядок, 
	|	ПРЕДСТАВЛЕНИЕ(БухОбороты.Счет) КАК СчетПредставление " +ТекстСубконто+",
	|	БухОбороты.КорСчет КАК КорСчет, 
	|	БухОбороты.КорСчет.Порядок КАК КорСчетПорядок, 
	|	ПРЕДСТАВЛЕНИЕ(БухОбороты.КорСчет) КАК КорСчетПредставление";
	
	Если ПоВалютам Тогда
		Текст = Текст + ",
		|	БухОбороты.Валюта КАК Валюта, ПРЕДСТАВЛЕНИЕ(БухОбороты.Валюта) КАК ВалютаПредставление  ";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Период) Тогда
		Текст = Текст
				+ ?(ВРЕГ(Период)<>"РЕГИСТРАТОР",
					",
					|	БухОбороты.Период",
					",
					|	БухОбороты.Регистратор КАК Период,
					|	ПРЕДСТАВЛЕНИЕ(БухОбороты.Регистратор) КАК РегистраторПредставление,
					|	БухОбороты.Регистратор.Дата КАК РегистраторДата");
	КонецЕсли;
	
	Для каждого ИмяРесурса Из МассивРесурсов Цикл
		
		Текст = Текст + ",
		|	" +ИмяРесурса+ "ОборотДт КАК " +ИмяРесурса+ "ОборотДт,
		|	" +ИмяРесурса+ "ОборотКт КАК " +ИмяРесурса+ "ОборотКт,
		|	ВЫБОР КОГДА "+ИмяРесурса+"ОборотДт <> 0 ТОГДА 1 ИНАЧЕ 0 КОНЕЦ КАК Есть"+ИмяРесурса+"ОборотДт,
		|	ВЫБОР КОГДА "+ИмяРесурса+"ОборотКт <> 0 ТОГДА 1 ИНАЧЕ 0 КОНЕЦ КАК Есть"+ИмяРесурса+"ОборотКт,
		|	0 КАК " +ИмяРесурса+ "НачДт,
		|	0 КАК " +ИмяРесурса+ "НачКт,
		|	0 КАК " +ИмяРесурса+ "КонДт,
		|	0 КАК " +ИмяРесурса+ "КонКт";
		
	КонецЦикла;
	
	Текст = Текст + "
	|ИЗ
	|	РегистрБухгалтерии."+ИмяРегистраБухгалтерии+".Обороты(&ДатаНач, &ДатаКон, "+Периодичность+", Счет В ИЕРАРХИИ (&Счет), , " + ОграниченияПоРеквизитам + ") КАК БухОбороты
	| ";
	
	
	Текст = Текст + "
	|ОБЪЕДИНИТЬ ВСЕ ";
	
	Текст = Текст + "
	|ВЫБРАТЬ
	|	БухОстатки.Счет, 
	|	БухОстатки.Счет.Вид, 
	|	БухОстатки.Счет.Порядок, 
	|	ПРЕДСТАВЛЕНИЕ(БухОстатки.Счет) " +ТекстСубконто+",
	|	NULL , NULL, NULL ";
	
	Если ПоВалютам Тогда
		Текст = Текст + ",
		|	БухОстатки.Валюта КАК Валюта, ПРЕДСТАВЛЕНИЕ(БухОстатки.Валюта) ";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Период) Тогда
		Текст = Текст
		+ ?(ВРЕГ(Период)<>"РЕГИСТРАТОР",
			", NULL",
			", NULL, NULL, NULL");
	КонецЕсли;
	
    ТекстИтоги = "";
	
	Для каждого ИмяРесурса Из МассивРесурсов Цикл
		
		Текст = Текст + ",
		|	0 КАК " +ИмяРесурса+ "ОборотДт,
		|	0 КАК " +ИмяРесурса+ "ОборотКт,
		|	0 КАК Есть" +ИмяРесурса+ "ОборотДт,
		|	0 КАК Есть" +ИмяРесурса+ "ОборотКт,
		|	" +ИмяРесурса+ "НачальныйОстатокДт КАК " +ИмяРесурса+ "НачДт,
		|	" +ИмяРесурса+ "НачальныйОстатокКт КАК " +ИмяРесурса+ "НачКт,
		|	" +ИмяРесурса+ "КонечныйОстатокДт КАК " +ИмяРесурса+ "КонДт,
		|	" +ИмяРесурса+ "КонечныйОстатокКт КАК " +ИмяРесурса+ "КонКт";
	КонецЦикла;
	
	Текст = Текст + "
	|ИЗ
	|	РегистрБухгалтерии."+ИмяРегистраБухгалтерии+".ОстаткиИОбороты(&ДатаНач, &ДатаКон,"+Периодичность+",ДвиженияИГраницыПериода, Счет В ИЕРАРХИИ (&Счет), , " + ОграниченияПоРеквизитам + ") КАК БухОстатки ";
			
	// Настройка сортировки
	ТекстПорядок = "";
	ТекстПорядок = ТекстПорядок + ", СчетПорядок";
	
	Если ЗначениеЗаполнено(Период) Тогда
		Если ВРег(Период)<>"РЕГИСТРАТОР" Тогда
			ТекстПорядок = ТекстПорядок + ", Период";
		Иначе
			ТекстПорядок = ТекстПорядок + ", РегистраторДата";
		КонецЕсли;
	КонецЕсли;
	
	ТекстПорядок = ТекстПорядок + ", КорСчетПорядок";
	
	Для каждого Измерение Из ПостроительОтчета.ИзмеренияСтроки Цикл
		ТекстПорядок = ТекстПорядок + ", " + Измерение.Имя;
	КонецЦикла;
	
	Текст = Текст + "
	|УПОРЯДОЧИТЬ ПО "+Сред(ТекстПорядок, 2);
	
	Для каждого ИмяРесурса Из МассивРесурсов Цикл
	
		ТекстИтоги = ТекстИтоги + ",
		|	СУММА(" +ИмяРесурса+ "ОборотДт),
		|	СУММА(" +ИмяРесурса+ "ОборотКт),
		|	СУММА(Есть" +ИмяРесурса+ "ОборотДт),
		|	СУММА(Есть" +ИмяРесурса+ "ОборотКт),
		|	СУММА(" +ИмяРесурса+ "НачДт),
		|	СУММА(" +ИмяРесурса+ "НачКт),
		|	СУММА(" +ИмяРесурса+ "КонДт),
		|	СУММА(" +ИмяРесурса+ "КонКт)";
	
	КонецЦикла; 
	
	
	Текст = Текст + "
	|ИТОГИ " + Сред(ТекстИтоги, 2)+ "
	|	ПО ОБЩИЕ, Счет ИЕРАРХИЯ КАК Счет "+ТекстСубконтоИзмерения;
	
	Если ЗначениеЗаполнено(Период) Тогда
		Текст = Текст+", Период "+?(ВсеПериоды и Врег(Период)<>"РЕГИСТРАТОР", " ПЕРИОДАМИ("+Период+",,)", "") + " КАК Период";
	КонецЕсли;
	
	Текст = Текст + ", КорСчет ИЕРАРХИЯ КАК КорСчет";
	
	Если ПоВалютам Тогда
		Текст = Текст + ", Валюта КАК Валюта";
	КонецЕсли;
	
	Возврат Текст + "
	|АВТОУПОРЯДОЧИВАНИЕ";

КонецФункции // ()

// Выполняет запрос и формирует табличный документ-результат отчета
// в соответствии с настройками, заданными значениями реквизитов отчета.
//
// Параметры:
//  ДокументРезультат - табличный документ, формируемый отчетом
//
Процедура СформироватьОтчет(ДокументРезультат,  ПоказыватьЗаголовок = Истина, ВысотаЗаголовка = 0) Экспорт

	Если Счет.Пустая() Тогда
		Предупреждение("Не выбран счет!", 60);
		Возврат;
	КонецЕсли;

	ОграничениеПоДатамКорректно = БухгалтерскиеОтчеты.ПроверитьКорректностьОграниченийПоДатам(ДатаНач, ДатаКон);
	Если НЕ ОграничениеПоДатамКорректно Тогда
        Возврат;
	КонецЕсли;
	
	НаличиеДублей = БухгалтерскиеОтчеты.ОпределитьНаличиеДублирующегосяПараметраВИзмерениях(ПостроительОтчета);
	Если НаличиеДублей Тогда
		Возврат;
	КонецЕсли;
	
	ДокументРезультат.Очистить();
	
	ШиринаТаблицы = 0;

	МассивРесурсов = СформироватьМассивПоказателей();
	
	МассивГруппировок = СформироватьМассивГруппировок();
	
	Запрос = Новый Запрос;
		
	УстановитьПараметрыОграниченийДляЗапроса(Запрос);
	
	Запрос.Текст = ПолучитьТекстЗапроса(Запрос, МассивРесурсов);
	
	ОтборСубконто = Новый Соответствие;
	Для каждого Элемент Из ПостроительОтчета.Отбор Цикл
		Если Элемент.Использование Тогда
			ОтборСубконто.Вставить(Элемент.ПутьКДанным, Элемент.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Состояние("Выполнение запроса");
	Результат = Запрос.Выполнить();
	
	Макет       = ПолучитьМакет("Макет");


	// Вывод заголовка отчета
	БухгалтерскиеОтчеты.СформироватьИВывестиЗаголовокОтчета(ЭтотОбъект, ДокументРезультат, ВысотаЗаголовка, ПоказыватьЗаголовок);
	
	ФорматПериода = БухгалтерскиеОтчеты.ПолучитьСтрокуФорматаПериода(Период);

	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ДокументРезультат",ДокументРезультат);
	СтруктураПараметров.Вставить("МассивГруппировок", МассивГруппировок);
	
	// Период
	СтруктураПараметров.Вставить("ОбластьСтрокаПериод", Макет.ПолучитьОбласть("Строка|Период"));
	СтруктураПараметров.ОбластьСтрокаПериод.Область(1, 2).Формат = ФорматПериода;
	
	// Нач сальдо
	СтруктураПараметров.Вставить("ОбластьСтрокаСальдоНачДт", Макет.ПолучитьОбласть("Строка|СальдоНачДт"));
	СтруктураПараметров.Вставить("ОбластьСтрокаСальдоНачКт", Макет.ПолучитьОбласть("Строка|СальдоНачКт"));
	
	// Кон сальдо
	СтруктураПараметров.Вставить("ОбластьСтрокаСальдоКонДт", Макет.ПолучитьОбласть("Строка|СальдоКонДт"));
	СтруктураПараметров.Вставить("ОбластьСтрокаСальдоКонКт", Макет.ПолучитьОбласть("Строка|СальдоКонКт"));
	
	// Оборот 
	СтруктураПараметров.Вставить("ОбластьСтрокаОборотДт", Макет.ПолучитьОбласть("Строка|ОборотДт"));
	СтруктураПараметров.Вставить("ОбластьСтрокаОборотКт", Макет.ПолучитьОбласть("Строка|ОборотКт"));
	СтруктураПараметров.Вставить("ОбластьСтрокаОборотДтКорСчет", Макет.ПолучитьОбласть("Строка|ОборотДтКорСчет"));
	СтруктураПараметров.Вставить("ОбластьСтрокаОборотКтКорСчет", Макет.ПолучитьОбласть("Строка|ОборотКтКорСчет"));
	
	Если ПоВалютам Тогда
		// Валюта
		СтруктураПараметров.Вставить("ОбластьСтрокаВалютаПериод", Макет.ПолучитьОбласть("СтрокаВалюта|Период"));
		
		// Нач сальдо
		СтруктураПараметров.Вставить("ОбластьСтрокаВалютаСальдоНачДт", Макет.ПолучитьОбласть("СтрокаВалюта|СальдоНачДт"));
		СтруктураПараметров.Вставить("ОбластьСтрокаВалютаСальдоНачКт", Макет.ПолучитьОбласть("СтрокаВалюта|СальдоНачКт"));
		
		// Кон сальдо
		СтруктураПараметров.Вставить("ОбластьСтрокаВалютаСальдоКонДт", Макет.ПолучитьОбласть("СтрокаВалюта|СальдоКонДт"));
		СтруктураПараметров.Вставить("ОбластьСтрокаВалютаСальдоКонКт", Макет.ПолучитьОбласть("СтрокаВалюта|СальдоКонКт"));
		
		// Оборот 
		СтруктураПараметров.Вставить("ОбластьСтрокаВалютаОборотДт", Макет.ПолучитьОбласть("СтрокаВалюта|ОборотДт"));
		СтруктураПараметров.Вставить("ОбластьСтрокаВалютаОборотКт", Макет.ПолучитьОбласть("СтрокаВалюта|ОборотКт"));
		СтруктураПараметров.Вставить("ОбластьСтрокаВалютаОборотДтКорСчет", Макет.ПолучитьОбласть("СтрокаВалюта|ОборотДтКорСчет"));
		СтруктураПараметров.Вставить("ОбластьСтрокаВалютаОборотКтКорСчет", Макет.ПолучитьОбласть("СтрокаВалюта|ОборотКтКорСчет"));
	КонецЕсли;
	
	Если МассивГруппировок.Количество()>0 Тогда
		// Субконто
		СтруктураПараметров.Вставить("ОбластьСтрокаСубконтоПериод", Макет.ПолучитьОбласть("СтрокаСубконто|Период"));
		
		// Нач сальдо
		СтруктураПараметров.Вставить("ОбластьСтрокаСубконтоСальдоНачДт", Макет.ПолучитьОбласть("СтрокаСубконто|СальдоНачДт"));
		СтруктураПараметров.Вставить("ОбластьСтрокаСубконтоСальдоНачКт", Макет.ПолучитьОбласть("СтрокаСубконто|СальдоНачКт"));
		
		// Кон сальдо
		СтруктураПараметров.Вставить("ОбластьСтрокаСубконтоСальдоКонДт", Макет.ПолучитьОбласть("СтрокаСубконто|СальдоКонДт"));
		СтруктураПараметров.Вставить("ОбластьСтрокаСубконтоСальдоКонКт", Макет.ПолучитьОбласть("СтрокаСубконто|СальдоКонКт"));
		
		// Оборот 
		СтруктураПараметров.Вставить("ОбластьСтрокаСубконтоОборотДт", Макет.ПолучитьОбласть("СтрокаСубконто|ОборотДт"));
		СтруктураПараметров.Вставить("ОбластьСтрокаСубконтоОборотКт", Макет.ПолучитьОбласть("СтрокаСубконто|ОборотКт"));
		СтруктураПараметров.Вставить("ОбластьСтрокаСубконтоОборотДтКорСчет", Макет.ПолучитьОбласть("СтрокаСубконто|ОборотДтКорСчет"));
		СтруктураПараметров.Вставить("ОбластьСтрокаСубконтоОборотКтКорСчет", Макет.ПолучитьОбласть("СтрокаСубконто|ОборотКтКорСчет"));
		
		Если ПоКоличеству Тогда
			// Субконто
			СтруктураПараметров.Вставить("ОбластьСтрокаСубконтоКоличествоПериод", Макет.ПолучитьОбласть("СтрокаСубконтоКоличество|Период"));
			
			// Нач сальдо
			СтруктураПараметров.Вставить("ОбластьСтрокаСубконтоКоличествоСальдоНачДт", Макет.ПолучитьОбласть("СтрокаСубконтоКоличество|СальдоНачДт"));
			СтруктураПараметров.Вставить("ОбластьСтрокаСубконтоКоличествоСальдоНачКт", Макет.ПолучитьОбласть("СтрокаСубконтоКоличество|СальдоНачКт"));
			
			// Кон сальдо
			СтруктураПараметров.Вставить("ОбластьСтрокаСубконтоКоличествоСальдоКонДт", Макет.ПолучитьОбласть("СтрокаСубконтоКоличество|СальдоКонДт"));
			СтруктураПараметров.Вставить("ОбластьСтрокаСубконтоКоличествоСальдоКонКт", Макет.ПолучитьОбласть("СтрокаСубконтоКоличество|СальдоКонКт"));
			
			// Оборот 
			СтруктураПараметров.Вставить("ОбластьСтрокаСубконтоКоличествоОборотДт", Макет.ПолучитьОбласть("СтрокаСубконтоКоличество|ОборотДт"));
			СтруктураПараметров.Вставить("ОбластьСтрокаСубконтоКоличествоОборотКт", Макет.ПолучитьОбласть("СтрокаСубконтоКоличество|ОборотКт"));
			СтруктураПараметров.Вставить("ОбластьСтрокаСубконтоКоличествоОборотДтКорСчет", Макет.ПолучитьОбласть("СтрокаСубконтоКоличество|ОборотДтКорСчет"));
			СтруктураПараметров.Вставить("ОбластьСтрокаСубконтоКоличествоОборотКтКорСчет", Макет.ПолучитьОбласть("СтрокаСубконтоКоличество|ОборотКтКорСчет"));
			
			
			// Период
			СтруктураПараметров.Вставить("ОбластьСтрокаКоличествоПериод", Макет.ПолучитьОбласть("СтрокаКоличество|Период"));
			СтруктураПараметров.ОбластьСтрокаКоличествоПериод.Область(1, 2).Формат = ФорматПериода;
			
			// Нач сальдо
			СтруктураПараметров.Вставить("ОбластьСтрокаКоличествоСальдоНачДт", Макет.ПолучитьОбласть("СтрокаКоличество|СальдоНачДт"));
			СтруктураПараметров.Вставить("ОбластьСтрокаКоличествоСальдоНачКт", Макет.ПолучитьОбласть("СтрокаКоличество|СальдоНачКт"));
			
			// Кон сальдо
			СтруктураПараметров.Вставить("ОбластьСтрокаКоличествоСальдоКонДт", Макет.ПолучитьОбласть("СтрокаКоличество|СальдоКонДт"));
			СтруктураПараметров.Вставить("ОбластьСтрокаКоличествоСальдоКонКт", Макет.ПолучитьОбласть("СтрокаКоличество|СальдоКонКт"));
			
			// Оборот 
			СтруктураПараметров.Вставить("ОбластьСтрокаКоличествоОборотДт", Макет.ПолучитьОбласть("СтрокаКоличество|ОборотДт"));
			СтруктураПараметров.Вставить("ОбластьСтрокаКоличествоОборотКт", Макет.ПолучитьОбласть("СтрокаКоличество|ОборотКт"));
			СтруктураПараметров.Вставить("ОбластьСтрокаКоличествоОборотДтКорСчет", Макет.ПолучитьОбласть("СтрокаКоличество|ОборотДтКорСчет"));
			СтруктураПараметров.Вставить("ОбластьСтрокаКоличествоОборотКтКорСчет", Макет.ПолучитьОбласть("СтрокаКоличество|ОборотКтКорСчет"));
		КонецЕсли;
	КонецЕсли;
	
	// Вывод отчета
	ОбщийИтог = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Общие");
	ЕстьИтог = ОбщийИтог.Следующий();
	
	ДокументРезультат.НачатьАвтогруппировкуКолонок();
	
	НачалоЗаголовка = Макет.ПолучитьОбласть("ЗаголовокТаблицы|Период");
	
	Если МассивГруппировок.Количество()>0 Тогда
		НачалоЗаголовка.Параметры.Заголовок = "Субконто";
	ИначеЕсли ЗначениеЗаполнено(Период) Тогда
		НачалоЗаголовка.Параметры.Заголовок = "Период";
	КонецЕсли;
	
	ДокументРезультат.Вывести(НачалоЗаголовка,0);
	
	ШиринаТаблицы = НачалоЗаголовка.ШиринаТаблицы;
	
	СписокДт = Неопределено;
	СписокКт = Неопределено;
	Выборка = Неопределено;
	БухгалтерскиеОтчеты.ВывестиПолныйЗаголовокОтчетаОборотовСчета(Выборка, ШиринаТаблицы, ЭтотОбъект, Макет, ДокументРезультат,
		Результат, "ЗаголовокТаблицы",МассивРесурсов, СписокДт, СписокКт, 1);

	ДокументРезультат.ЗакончитьАвтогруппировкуКолонок();
	
	// Массивы хранят счета, по которым были обороты
	СтруктураПараметров.Вставить("СписокДт", СписокДт);
	СтруктураПараметров.Вставить("СписокКт", СписокКт);
	
	СоответствиеСчетовПредков = БухгалтерскиеОтчеты.ВернутьСоответвиеСчетовПредков(Метаданные.РегистрыБухгалтерии[ИмяРегистраБухгалтерии].ПланСчетов.Имя, Счет);
	СтруктураПараметров.Вставить("СоответствиеСчетовПредков", СоответствиеСчетовПредков);
	
	// вывод данных отчета
	ДокументРезультат.НачатьАвтогруппировкуСтрок();
	Если МассивГруппировок.Количество() > 0 Тогда
		
		ВыводСубконто(Результат, 0, СтруктураПараметров, ОтборСубконто, ПоКоличеству);
		
	ИначеЕсли ЗначениеЗаполнено(Период) Тогда
		
		ВывестиПериоды(Результат, СтруктураПараметров, ОтборСубконто);
		
	КонецЕсли;
	ДокументРезультат.ЗакончитьАвтогруппировкуСтрок();
	
	ДокументРезультат.Вывести(Макет.ПолучитьОбласть("Итог|Период"));
	
	// Вывод заголовков нач.сальдо
	Если Период <> "" Тогда
		ВыборкаПоПериодам = ОбщийИтог.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Период");
		ВыборкаПоПериодам.Следующий();
	КонецЕсли;
	
	ТекШиринаТаблицы = 0;
	ДанныеОбщегоИтога = ?(Период = "", ОбщийИтог, ВыборкаПоПериодам);
	БухгалтерскиеОтчеты.ВывестиПолныйЗаголовокОтчетаОборотовСчета(Выборка, ТекШиринаТаблицы, ЭтотОбъект, Макет, ДокументРезультат,
		Результат, "Итог",МассивРесурсов, СписокДт, СписокКт, 0, ДанныеОбщегоИтога, ОбщийИтог);
		
	БухгалтерскиеОтчеты.ВывестиОборотыЗаПериод(Счет, ЕстьИтог, ОбщийИтог, Макет, ДокументРезультат,
		СальдоКонДт, СальдоКонКт);	
			
	// Обведение таблицы отчета линией, как в области границы
	ОбластьИтогПериод = Макет.ПолучитьОбласть("Итог|Период");
	
	ТолстаяЛиния = ОбластьИтогПериод.Область(1, 2).ГраницаСверху;
	
	ШиринаТаблицы = ШиринаТаблицы + СписокДт.Количество() + СписокКт.Количество();
	
	ДокументРезультат.Область(ВысотаЗаголовка+2, 2, ДокументРезультат.ВысотаТаблицы, ШиринаТаблицы).Обвести(ТолстаяЛиния, ТолстаяЛиния, ТолстаяЛиния, ТолстаяЛиния);
	
	ШиринаТаблицы = ДокументРезультат.ШиринаТаблицы;
	
	// Заполним общую расшифровку:
	СтруктураНастроекОтчета = СформироватьОбщуюСтруктуруДляРасшифровки();
	СтруктураНастроекОтчета.Вставить("ПоказыватьЗаголовок", ПоказыватьЗаголовок);

	ДокументРезультат.Область(1,1).Расшифровка = СтруктураНастроекОтчета;

	// Зафиксируем заголовок отчета
	ДокументРезультат.ФиксацияСверху = ВысотаЗаголовка + 2;

	// Первую колонку не печатаем
	ДокументРезультат.ОбластьПечати = ДокументРезультат.Область(1,2,ДокументРезультат.ВысотаТаблицы,ДокументРезультат.ШиринаТаблицы);
	
	// Присвоим имя для сохранения параметров печати табличного документа
	ДокументРезультат.ИмяПараметровПечати = "ОборотноСальдоваяВедомостьПоСчету " + ИмяРегистраБухгалтерии;
	
	УправлениеОтчетами.УстановитьКолонтитулыПоУмолчанию(ДокументРезультат, ЗаголовокОтчета(), Строка(глЗначениеПеременной("глТекущийПользователь")));	
	
КонецПроцедуры

//Функция возвращает массив показателей для отчета
Функция СформироватьМассивПоказателей() Экспорт
	
	МассивПоказателей = Новый Массив;
	МассивПоказателей.Добавить("Сумма");
	
	Если ПоВалютам Тогда
		МассивПоказателей.Добавить("ВалютнаяСумма");
	КонецЕсли; 
	
	Если ПоКоличеству Тогда
		МассивПоказателей.Добавить("Количество");
	КонецЕсли;

	Возврат МассивПоказателей;
		
КонецФункции

//Функция возвращает общую структуру для расшифровки
Функция СформироватьОбщуюСтруктуруДляРасшифровки() Экспорт
	
	СтруктураНастроекОтчета = Новый Структура;

	СтруктураНастроекОтчета.Вставить("ДатаНач", ДатаНач);
	СтруктураНастроекОтчета.Вставить("ДатаКон", ДатаКон);
	СтруктураНастроекОтчета.Вставить("Организация", Организация);
	СтруктураНастроекОтчета.Вставить("Период", Период);
		
	НастройкиОтбора = УправлениеОтчетами.ПолучитьКопиюОтбораВТЗ(ПостроительОтчета.Отбор);
	
	СтруктураНастроекОтчета.Вставить("Отбор", НастройкиОтбора);
			
	Возврат СтруктураНастроекОтчета;
	
КонецФункции

//Функция возвращает массив группировок для отчета
Функция СформироватьМассивГруппировок() Экспорт
	
	МассивГруппировок = Новый Массив;

	Если ПоСубСчетам Тогда
		МассивГруппировок.Добавить("Счет");
	КонецЕсли;
	
	Для Сч = 0 По ПостроительОтчета.ИзмеренияСтроки.Количество() - 1  Цикл
		
		МассивГруппировок.Добавить(ПостроительОтчета.ИзмеренияСтроки[Сч].Имя);
		
	КонецЦикла;

	Возврат МассивГруппировок;
		
КонецФункции


// Вывод субконто определенного номера
Процедура ВыводСубконто(Выборка, Знач Инд, СтруктураПараметров, ОтборДляРасшифровки, ВыводКоличества)
	
	Если Инд > СтруктураПараметров.МассивГруппировок.Количество() - 1 Тогда
		
		Если ЗначениеЗаполнено(Период) Тогда
			
			ВывестиПериоды(Выборка, СтруктураПараметров, ОтборДляРасшифровки, ВыводКоличества);
			
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;	
		
	Измерение = СтруктураПараметров.МассивГруппировок[Инд];
	
	Если ВыводКоличества Тогда
		
		ВыводКоличества = БухгалтерскиеОтчеты.ОпределитьПоСубконтоИПостроителюВестиКоличественныйУчет(Счет, ПостроительОтчета, Измерение);
								
	КонецЕсли;
		
	ВыборкаПоСубконто = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, Измерение);
		
	СуммаНачДт = 0;
	СуммаНачКт = 0;
	КоличествоНачДт = 0;
	КоличествоНачКт = 0;
	
	СуммаКонДт = 0;
	СуммаКонКт = 0;
	КоличествоКонДт = 0;
	КоличествоКонКт = 0;
	
	СуммаОборотДт = 0;
	СуммаОборотКт = 0;
	КоличествоОборотДт = 0;
	КоличествоОборотКт = 0;
		
	Пока ВыборкаПоСубконто.Следующий() Цикл
		
		ТипЗаписи = ВыборкаПоСубконто.ТипЗаписи();
		
		// счета более верхнего уровня выводить не надо
		Если Измерение = "Счет"
			И ТипЗаписи = ТипЗаписиЗапроса.ИтогПоИерархии
			И СтруктураПараметров.СоответствиеСчетовПредков[ВыборкаПоСубконто.Счет] <> Неопределено Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Уровень = ВыборкаПоСубконто.Уровень();
			
		Если ТипЗаписи = ТипЗаписиЗапроса.ИтогПоИерархии Тогда
			ВыводитьКоличествоВТекущейСтроке = Ложь;
		Иначе
			ВыводитьКоличествоВТекущейСтроке = ВыводКоличества;
		КонецЕсли;
			
		Если ВыводитьКоличествоВТекущейСтроке Тогда
			ОблНачало = СтруктураПараметров.ОбластьСтрокаСубконтоКоличествоПериод;
			ОблСальдоНачДт = СтруктураПараметров.ОбластьСтрокаСубконтоКоличествоСальдоНачДт;
			ОблСальдоНачКт = СтруктураПараметров.ОбластьСтрокаСубконтоКоличествоСальдоНачКт;
			ОблОборотДт    = СтруктураПараметров.ОбластьСтрокаСубконтоКоличествоОборотДт;
			ОблОборотКт    = СтруктураПараметров.ОбластьСтрокаСубконтоКоличествоОборотКт;
			ОблОборотДтКорСчет    = СтруктураПараметров.ОбластьСтрокаСубконтоКоличествоОборотДтКорСчет;
			ОблОборотКтКорСчет    = СтруктураПараметров.ОбластьСтрокаСубконтоКоличествоОборотКтКорСчет;
			ОблСальдоКонДт = СтруктураПараметров.ОбластьСтрокаСубконтоКоличествоСальдоКонДт;
			ОблСальдоКонКт = СтруктураПараметров.ОбластьСтрокаСубконтоКоличествоСальдоКонКт;
		Иначе
			ОблНачало = СтруктураПараметров.ОбластьСтрокаСубконтоПериод;
			ОблСальдоНачДт = СтруктураПараметров.ОбластьСтрокаСубконтоСальдоНачДт;
			ОблСальдоНачКт = СтруктураПараметров.ОбластьСтрокаСубконтоСальдоНачКт;
			ОблОборотДт    = СтруктураПараметров.ОбластьСтрокаСубконтоОборотДт;
			ОблОборотКт    = СтруктураПараметров.ОбластьСтрокаСубконтоОборотКт;
			ОблОборотДтКорСчет    = СтруктураПараметров.ОбластьСтрокаСубконтоОборотДтКорСчет;
			ОблОборотКтКорСчет    = СтруктураПараметров.ОбластьСтрокаСубконтоОборотКтКорСчет;
			ОблСальдоКонДт = СтруктураПараметров.ОбластьСтрокаСубконтоСальдоКонДт;
			ОблСальдоКонКт = СтруктураПараметров.ОбластьСтрокаСубконтоСальдоКонКт;
		КонецЕсли;
			
		ОблНачало.Область(1, 2, ОблНачало.ВысотаТаблицы, 2).Отступ = Уровень;
			
		// Вывод нач сальдо
		ОблНачало.Параметры.СубконтоПредставление = ВыборкаПоСубконто[Измерение + "Представление"];
			
		// Расшифровка
		ЗаполнитьПараметрыРасшифровки(ОблНачало, ВыборкаПоСубконто, СтруктураПараметров);
			
		СтруктураПараметров.ДокументРезультат.Вывести(ОблНачало, Уровень);
			
		// В итогах по иерархии шрифт меняется на наклонный
		Если ТипЗаписи = ТипЗаписиЗапроса.ИтогПоИерархии Тогда
			
			СтруктураПараметров.ДокументРезультат.Область(СтруктураПараметров.ДокументРезультат.ВысотаТаблицы, 2).Шрифт = 
				Новый Шрифт(СтруктураПараметров.ДокументРезультат.Область(СтруктураПараметров.ДокументРезультат.ВысотаТаблицы, 2).Шрифт,,,,Истина);
			
		КонецЕсли;
				
		// на начало периода
		БухгалтерскиеОтчеты.ПолучитьДанныеДляОборотов(ВыборкаПоСубконто,"Нач", ВыводитьКоличествоВТекущейСтроке, Ложь, 
			СуммаНачДт, СуммаНачКт, КоличествоНачДт, КоличествоНачКт);	
												
		Если СальдоНачДт Тогда
			БухгалтерскиеОтчеты.ЗаполнитьСуммыОборотаСчета(СтруктураПараметров.ДокументРезультат, ВыводитьКоличествоВТекущейСтроке, Уровень,
				ОблСальдоНачДт, "СуммаНачДт", "КоличествоНачДт", СуммаНачДт, КоличествоНачДт);
		КонецЕсли;
			
		Если СальдоНачКт Тогда
			БухгалтерскиеОтчеты.ЗаполнитьСуммыОборотаСчета(СтруктураПараметров.ДокументРезультат, ВыводитьКоличествоВТекущейСтроке, Уровень,
				ОблСальдоНачКт, "СуммаНачКт", "КоличествоНачКт", СуммаНачКт, КоличествоНачКт);
		КонецЕсли;
		
		Если ОборотДтКорСчета 
			ИЛИ ОборотКтКорСчета Тогда
			
			ВыборкаОборотыПоКорСчетам = ВыборкаПоСубконто.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "КорСчет");
			
		КонецЕсли;
		
		// ОБОРОТЫ
		//оборот дб
		Если ОборотДт Тогда
			
			ОблОборотДт.Параметры.Заполнить(ВыборкаПоСубконто);
			СтруктураПараметров.ДокументРезультат.Присоединить(ОблОборотДт, Уровень);
			
		КонецЕсли;
			
		Если ОборотДтКорСчета Тогда
			// Вывод вложенных итогов по кор счетам
			ВывестиКорСчета(ВыборкаОборотыПоКорСчетам, СтруктураПараметров, "ДТ", "Сумма"+?(ВыводитьКоличествоВТекущейСтроке, ", Количество", ""), 
				ОблОборотДтКорСчет, ОтборДляРасшифровки, ВыборкаПоСубконто);
		КонецЕсли;
		
		
					
		// Оборот Кт
		Если ОборотКт Тогда
			ОблОборотКт.Параметры.Заполнить(ВыборкаПоСубконто);
			СтруктураПараметров.ДокументРезультат.Присоединить(ОблОборотКт, Уровень);
		КонецЕсли;
			
		Если ОборотКтКорСчета Тогда
			ВыборкаОборотыПоКорСчетам.Сбросить();
			// Вывод вложенных итогов по кор счетам
			ВывестиКорСчета(ВыборкаОборотыПоКорСчетам, СтруктураПараметров, "КТ", "Сумма"+?(ВыводитьКоличествоВТекущейСтроке, ", Количество", ""), 
				ОблОборотКтКорСчет, ОтборДляРасшифровки, ВыборкаПоСубконто);
		КонецЕсли;
		
		
		БухгалтерскиеОтчеты.ПолучитьДанныеДляОборотов(ВыборкаПоСубконто,"Оборот",  
			ВыводитьКоличествоВТекущейСтроке, Ложь, СуммаОборотДт, СуммаОборотКт, КоличествоОборотДт, КоличествоОборотКт);
			
			
	    // расчет итоговых сумм
		БухгалтерскиеОтчеты.РассчитатьКонечныеДанныеПоВидуСчетаИНачальнымДанным(Счет.Вид, СуммаКонДт, СуммаКонКт, СуммаНачДт, СуммаНачКт,
			СуммаОборотДт, СуммаОборотКт);
			
		Если ВыводКоличества Тогда
				
			БухгалтерскиеОтчеты.РассчитатьКонечныеДанныеПоВидуСчетаИНачальнымДанным(Счет.Вид, КоличествоКонДт, КоличествоКонКт, КоличествоНачДт, КоличествоНачКт,
				КоличествоОборотДт, КоличествоОборотКт);	
				
		КонецЕсли;
				
		
		//СУММЫ НА КОНЕЦ ПЕРИОДА
		Если СальдоКонДт Тогда
			БухгалтерскиеОтчеты.ЗаполнитьСуммыОборотаСчета(СтруктураПараметров.ДокументРезультат, ВыводитьКоличествоВТекущейСтроке, Уровень,
				ОблСальдоКонДт, "СуммаКонДт", "КоличествоКонДт", СуммаКонДт, КоличествоКонДт);
		КонецЕсли;
			
		Если СальдоКонКт Тогда
			БухгалтерскиеОтчеты.ЗаполнитьСуммыОборотаСчета(СтруктураПараметров.ДокументРезультат, ВыводитьКоличествоВТекущейСтроке, Уровень,
				ОблСальдоКонКт, "СуммаКонКт", "КоличествоКонКт", СуммаКонКт, КоличествоКонКт);
		КонецЕсли;
		
					
		Если ПоВалютам Тогда
			ВывестиВалюты(ВыборкаПоСубконто, СтруктураПараметров, ОтборДляРасшифровки);
		КонецЕсли;
			
		// Вывод вложенных итогов
		Если ТипЗаписи <> ТипЗаписиЗапроса.ИтогПоИерархии Тогда
				
			ВыводСубконто(ВыборкаПоСубконто, Инд + 1, СтруктураПараметров, ОтборДляРасшифровки, ВыводКоличества);
			
		КонецЕсли;
				
	КонецЦикла;
			
КонецПроцедуры

// Вывод периодов
Процедура ВывестиПериоды(Выборка, СтруктураПараметров, ОтборДляРасшифровки, ВыводКоличества=Ложь)
	
	Если ВсеПериоды Тогда
		ВыборкаПоПериодам = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Период", "Все");
	Иначе
		ВыборкаПоПериодам = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Период");
	КонецЕсли;
		
	СуммаНачДт = 0;
	СуммаНачКт = 0;
	КоличествоНачДт = 0;
	КоличествоНачКт = 0;
	
	СуммаКонДт = 0;   
	СуммаКонКт = 0;
	КоличествоКонДт = 0;
	КоличествоКонКт = 0;
	
	СуммаОборотДт = 0;   
	СуммаОборотКт = 0;
	КоличествоОборотДт = 0;
	КоличествоОборотКт = 0;
	
	Если ВыводКоличества Тогда
		ОблНачало = СтруктураПараметров.ОбластьСтрокаКоличествоПериод;
		ОблСальдоНачДт = СтруктураПараметров.ОбластьСтрокаКоличествоСальдоНачДт;
		ОблСальдоНачКт = СтруктураПараметров.ОбластьСтрокаКоличествоСальдоНачКт;
		ОблОборотДт    = СтруктураПараметров.ОбластьСтрокаКоличествоОборотДт;
		ОблОборотКт    = СтруктураПараметров.ОбластьСтрокаКоличествоОборотКт;
		ОблОборотДтКорСчет    = СтруктураПараметров.ОбластьСтрокаКоличествоОборотДтКорСчет;
		ОблОборотКтКорСчет    = СтруктураПараметров.ОбластьСтрокаКоличествоОборотКтКорСчет;
		ОблСальдоКонДт = СтруктураПараметров.ОбластьСтрокаКоличествоСальдоКонДт;
		ОблСальдоКонКт = СтруктураПараметров.ОбластьСтрокаКоличествоСальдоКонКт;
	Иначе
		ОблНачало = СтруктураПараметров.ОбластьСтрокаПериод;
		ОблСальдоНачДт = СтруктураПараметров.ОбластьСтрокаСальдоНачДт;
		ОблСальдоНачКт = СтруктураПараметров.ОбластьСтрокаСальдоНачКт;
		ОблОборотДт    = СтруктураПараметров.ОбластьСтрокаОборотДт;
		ОблОборотКт    = СтруктураПараметров.ОбластьСтрокаОборотКт;
		ОблОборотДтКорСчет    = СтруктураПараметров.ОбластьСтрокаОборотДтКорСчет;
		ОблОборотКтКорСчет    = СтруктураПараметров.ОбластьСтрокаОборотКтКорСчет;
		ОблСальдоКонДт = СтруктураПараметров.ОбластьСтрокаСальдоКонДт;
		ОблСальдоКонКт = СтруктураПараметров.ОбластьСтрокаСальдоКонКт;
	КонецЕсли;
	
	НачальнаяСуммаРассчитана = Ложь;
	
	// Идем по остаткам, т.к. там есть начпериоды без оборотов
	Пока ВыборкаПоПериодам.Следующий() Цикл
		
		// начальную сумму только 1 раз рассчитываем, дальше она нам уже известна
		Если Не НачальнаяСуммаРассчитана Тогда
			
			БухгалтерскиеОтчеты.ПолучитьДанныеДляОборотов(ВыборкаПоПериодам,"Нач", 
				ВыводКоличества, Ложь, СуммаНачДт, СуммаНачКт, КоличествоНачДт, КоличествоНачКт);
				
			НачальнаяСуммаРассчитана = Истина;	
				
		КонецЕсли;				
		
		ДанныеПериода = ?(Врег(Период)="РЕГИСТРАТОР",
										ВыборкаПоПериодам.РегистраторПредставление,
										ВыборкаПоПериодам.Период);
		
		Если ДанныеПериода = NULL Тогда
			Продолжить;
		КонецЕсли;
		
		Уровень = ВыборкаПоПериодам.Уровень();
		
		ОблНачало.Параметры.Период = ДанныеПериода;
		
		// Расшифровка
		ЗаполнитьПараметрыРасшифровки(ОблНачало, ВыборкаПоПериодам, СтруктураПараметров);
		ОтборДляРасшифровки.Вставить("Период", ВыборкаПоПериодам.Период);
		
		ОблНачало.Область(1, 2, ОблНачало.ВысотаТаблицы, 2).Отступ = Уровень;

		СтруктураПараметров.ДокументРезультат.Вывести(ОблНачало, Уровень);
		
		Если СальдоНачДт Тогда
			БухгалтерскиеОтчеты.ЗаполнитьСуммыОборотаСчета(СтруктураПараметров.ДокументРезультат, ВыводКоличества, Уровень,
				ОблСальдоНачДт, "СуммаНачДт", "КоличествоНачДт", СуммаНачДт, КоличествоНачДт);
		КонецЕсли;
			
		Если СальдоНачКт Тогда
			БухгалтерскиеОтчеты.ЗаполнитьСуммыОборотаСчета(СтруктураПараметров.ДокументРезультат, ВыводКоличества, Уровень,
				ОблСальдоНачКт, "СуммаНачКт", "КоличествоНачКт", СуммаНачКт, КоличествоНачКт);
		КонецЕсли;		
		
		
		// Одна выборку будем использовать для вывода дебетовых и кредитовых оборотов
		Если ОборотДтКорСчета ИЛИ ОборотКтКорСчета Тогда
			ВыборкаОборотыПоКорСчетам = ВыборкаПоПериодам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "КорСчет");
		КонецЕсли;
		
		
		// Оборот Дт
		Если ОборотДт Тогда
			ОблОборотДт.Параметры.Заполнить(ВыборкаПоПериодам);
			
			СтруктураПараметров.ДокументРезультат.Присоединить(ОблОборотДт, Уровень);
		КонецЕсли;
		
		Если ОборотДтКорСчета Тогда
			// Вывод вложенных итогов по кор счетам
			ВывестиКорСчета(ВыборкаОборотыПоКорСчетам, СтруктураПараметров, "ДТ", "Сумма"+?(ВыводКоличества, ",Количество", ""), 
				ОблОборотДтКорСчет, ОтборДляРасшифровки, ВыборкаПоПериодам);
		КонецЕсли;
		
		
		
		// Оборот Кт
		Если ОборотКт Тогда
			ОблОборотКт.Параметры.Заполнить(ВыборкаПоПериодам);
			СтруктураПараметров.ДокументРезультат.Присоединить(ОблОборотКт, Уровень);
		КонецЕсли;
		
		Если ОборотКтКорСчета Тогда
			ВыборкаОборотыПоКорСчетам.Сбросить();
			// Вывод вложенных итогов по кор счетам
			ВывестиКорСчета(ВыборкаОборотыПоКорСчетам, СтруктураПараметров, "КТ", "Сумма", 
				ОблОборотКтКорСчет, ОтборДляРасшифровки, ВыборкаПоПериодам);
		КонецЕсли;
			
		
		БухгалтерскиеОтчеты.ПолучитьДанныеДляОборотов(ВыборкаПоПериодам,"Оборот",  
			ВыводКоличества, Ложь, СуммаОборотДт, СуммаОборотКт, КоличествоОборотДт, КоличествоОборотКт);
			
			
	    // расчет итоговых сумм
		БухгалтерскиеОтчеты.РассчитатьКонечныеДанныеПоВидуСчетаИНачальнымДанным(Счет.Вид, СуммаКонДт, СуммаКонКт, СуммаНачДт, СуммаНачКт,
			СуммаОборотДт, СуммаОборотКт);
			
		Если ВыводКоличества Тогда
				
			БухгалтерскиеОтчеты.РассчитатьКонечныеДанныеПоВидуСчетаИНачальнымДанным(Счет.Вид, КоличествоКонДт, КоличествоКонКт, КоличествоНачДт, КоличествоНачКт,
				КоличествоОборотДт, КоличествоОборотКт);	
				
		КонецЕсли;
						
		// Вывод конечного сальдо
		Если СальдоКонДт Тогда
			БухгалтерскиеОтчеты.ЗаполнитьСуммыОборотаСчета(СтруктураПараметров.ДокументРезультат, ВыводКоличества, Уровень,
				ОблСальдоКонДт, "СуммаКонДт", "КоличествоКонДт", СуммаКонДт, КоличествоКонДт);
		КонецЕсли;
			
		Если СальдоКонКт Тогда
			БухгалтерскиеОтчеты.ЗаполнитьСуммыОборотаСчета(СтруктураПараметров.ДокументРезультат, ВыводКоличества, Уровень,
				ОблСальдоКонКт, "СуммаКонКт", "КоличествоКонКт", СуммаКонКт, КоличествоКонКт);
		КонецЕсли;
		
		// Нач.сальдо следующего периода равен кон.сальдо предыдущего
		СуммаНачДт = СуммаКонДт;
		СуммаНачКт = СуммаКонКт;
		
		Если ВыводКоличества Тогда
			КоличествоНачДт = КоличествоКонДт;
			КоличествоНачКт = КоличествоКонКт;
		КонецЕсли;
		
		Если ПоВалютам Тогда
			ВывестиВалюты(ВыборкаПоПериодам, СтруктураПараметров, ОтборДляРасшифровки);
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

// Вывод валют
Процедура ВывестиВалюты(Выборка, СтруктураПараметров, ОтборДляРасшифровки)
	
	ВыборкаВалют = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Валюта");

	СуммаНачДт = 0;
	СуммаНачКт = 0;
	ВалютнаяСуммаНачДт = 0;
	ВалютнаяСуммаНачКт = 0;
	
	СуммаКонДт = 0;
	СуммаКонКт = 0;
	ВалютнаяСуммаКонДт = 0;
	ВалютнаяСуммаКонКт = 0;
	
	СуммаОборотДт = 0;   
	СуммаОборотКт = 0;
	ВалютнаяСуммаОборотДт = 0;
	ВалютнаяСуммаОборотКт = 0;
	
	НачальнаяСуммаРассчитана = Ложь;
	
	Пока ВыборкаВалют.Следующий() Цикл
		
		Если Не НачальнаяСуммаРассчитана Тогда
		
			БухгалтерскиеОтчеты.ПолучитьДанныеДляОборотов(ВыборкаВалют,"Нач",  
				Ложь, Истина, СуммаНачДт, СуммаНачКт, , , ВалютнаяСуммаНачДт, ВалютнаяСуммаНачКт);
				
			НачальнаяСуммаРассчитана = Истина;	
			
		КонецЕсли;	
										
		ОтборДляРасшифровки.Вставить("ПоВалюте", Истина);
		ОтборДляРасшифровки.Вставить("Валюта", ВыборкаВалют.Валюта);
		
		// Вывод начала строки
		ВыводимаяОбласть = СтруктураПараметров.ОбластьСтрокаВалютаПериод;
		ВыводимаяОбласть.Параметры.Заполнить(ВыборкаВалют);
		
		Уровень = ВыборкаВалют.Уровень();
						
		СтруктураПараметров.ДокументРезультат.Вывести(ВыводимаяОбласть, Уровень);
		
		Если СальдоНачДт Тогда
			ВыводимаяОбласть = СтруктураПараметров.ОбластьСтрокаВалютаСальдоНачДт;
			ВыводимаяОбласть.Параметры.ВалютнаяСуммаНачДт = ВалютнаяСуммаНачДт;
			ВыводимаяОбласть.Параметры.СуммаНачДт         = СуммаНачДт;
			
			СтруктураПараметров.ДокументРезультат.Присоединить(ВыводимаяОбласть, Уровень);
		КонецЕсли;
		
		Если СальдоНачКт Тогда
			ВыводимаяОбласть = СтруктураПараметров.ОбластьСтрокаВалютаСальдоНачКт;
			ВыводимаяОбласть.Параметры.ВалютнаяСуммаНачКт=ВалютнаяСуммаНачКт;
			ВыводимаяОбласть.Параметры.СуммаНачКт        =СуммаНачКт;
			
			СтруктураПараметров.ДокументРезультат.Присоединить(ВыводимаяОбласть, Уровень);
		КонецЕсли;
		
		// Одна выборку будем использовать для вывода дебетовых и кредитовых оборотов
		Если ОборотДтКорСчета ИЛИ ОборотКтКорСчета Тогда
			ВыборкаОборотыПоКорСчетам = ВыборкаВалют.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "КорСчет");
		КонецЕсли;
		
		// Оборот Дт
		Если ОборотДт Тогда
			ВыводимаяОбласть = СтруктураПараметров.ОбластьСтрокаВалютаОборотДт;
			ВыводимаяОбласть.Параметры.Заполнить(ВыборкаВалют);
			
			СтруктураПараметров.ДокументРезультат.Присоединить(ВыводимаяОбласть, Уровень);
		КонецЕсли;
		
		Если ОборотДтКорСчета Тогда
			
			// Вывод вложенных итогов по кор счетам
			ВывестиКорСчета(ВыборкаОборотыПоКорСчетам, СтруктураПараметров, "ДТ", "Сумма, ВалютнаяСумма", 
				СтруктураПараметров.ОбластьСтрокаВалютаОборотДтКорСчет, ОтборДляРасшифровки, ВыборкаВалют);
		КонецЕсли;
		
		
		// Оборот Кт
		Если ОборотКт Тогда
			ВыводимаяОбласть = СтруктураПараметров.ОбластьСтрокаВалютаОборотКт;
			ВыводимаяОбласть.Параметры.Заполнить(ВыборкаВалют);
			
			СтруктураПараметров.ДокументРезультат.Присоединить(ВыводимаяОбласть, Уровень);
		КонецЕсли;
		
		Если ОборотКтКорСчета Тогда
			ВыборкаОборотыПоКорСчетам.Сбросить();
			
			// Вывод вложенных итогов по кор счетам
			ВывестиКорСчета(ВыборкаОборотыПоКорСчетам, СтруктураПараметров, "КТ", "Сумма, ВалютнаяСумма", 
				СтруктураПараметров.ОбластьСтрокаВалютаОборотКтКорСчет, ОтборДляРасшифровки, ВыборкаВалют);
		КонецЕсли;
			
		
		БухгалтерскиеОтчеты.ПолучитьДанныеДляОборотов(ВыборкаВалют, "Оборот",  
			Ложь, Ложь, СуммаОборотДт, СуммаОборотКт, , , ВалютнаяСуммаОборотДт, ВалютнаяСуммаОборотКт);
			
			
	    // расчет итоговых сумм
		БухгалтерскиеОтчеты.РассчитатьКонечныеДанныеПоВидуСчетаИНачальнымДанным(Счет.Вид, СуммаКонДт, СуммаКонКт, СуммаНачДт, СуммаНачКт,
			СуммаОборотДт, СуммаОборотКт);
			
		БухгалтерскиеОтчеты.РассчитатьКонечныеДанныеПоВидуСчетаИНачальнымДанным(Счет.Вид, ВалютнаяСуммаКонДт, ВалютнаяСуммаКонКт, ВалютнаяСуммаНачДт, ВалютнаяСуммаНачКт,
			ВалютнаяСуммаОборотДт, ВалютнаяСуммаОборотКт);	
				
		// Вывод конечного сальдо
		Если СальдоКонДт Тогда
			ВыводимаяОбласть = СтруктураПараметров.ОбластьСтрокаВалютаСальдоКонДт;
			ВыводимаяОбласть.Параметры.ВалютнаяСуммаКонДт=ВалютнаяСуммаКонДт;
			
			ВыводимаяОбласть.Параметры.СуммаКонДт=СуммаКонДт;
			
			СтруктураПараметров.ДокументРезультат.Присоединить(ВыводимаяОбласть, Уровень);
		КонецЕсли;
		
		Если СальдоКонКт Тогда
			ВыводимаяОбласть = СтруктураПараметров.ОбластьСтрокаВалютаСальдоКонКт;
			ВыводимаяОбласть.Параметры.ВалютнаяСуммаКонКт=ВалютнаяСуммаКонКт;
			
			ВыводимаяОбласть.Параметры.СуммаКонКт=СуммаКонКт;
			СтруктураПараметров.ДокументРезультат.Присоединить(ВыводимаяОбласть, Уровень);
		КонецЕсли;
		
		// Нач.сальдо следующего периода равен кон.сальдо предыдущего
		ВалютнаяСуммаНачДт = ВалютнаяСуммаКонДт;
		ВалютнаяСуммаНачКт = ВалютнаяСуммаКонКт;
		
		СуммаНачДт = СуммаКонДт;
		СуммаНачКт = СуммаКонКт;
	
	КонецЦикла;

КонецПроцедуры

// Вывод кор счетов
Процедура ВывестиКорСчета(ВыборкаОборотыПоКорСчетам, СтруктураПараметров, ВидОборота, Ресурсы, ВыводимаяОбласть, 
	ОтборДляРасшифровки = Неопределено, ДанныеГруппировки)
	
	СтРесурсы = Новый Структура(Ресурсы);
	
	Если ВидОборота = "ДТ" Тогда
		
		ТипПоля = "ОборотДт";
		СписокСчетов = СтруктураПараметров.СписокДт;
		
	ИначеЕсли ВидОборота = "КТ" Тогда
		
		ТипПоля = "ОборотКт";
		СписокСчетов = СтруктураПараметров.СписокКт;
		
	Иначе
		Возврат;
	КонецЕсли;
	
	// Создадим структуру соотвтетствиия кор счетов структуре ресурство
	Соотв = Новый Соответствие;
	Для каждого Элемент Из СписокСчетов Цикл
		Соотв[Элемент.Значение] = Новый Структура(Ресурсы);
	КонецЦикла;
	
	ВерхнийУровень = 1000;
	
	// Обойдем выборку по счетам, получим все ненулевые значения ресурсов и поставим их в соответсвие счетам
	Пока ВыборкаОборотыПоКорСчетам.Следующий() Цикл
		
		// Это итог по строке остатка
		Если ВыборкаОборотыПоКорСчетам.КорСчет = NULL Тогда
			Продолжить;
		КонецЕсли;
		
		// В выборке присутствуют счета всех уровней, если не нужно выводить субсчета, пропускаем 
		// группировки следующего уровня
		Если НЕ ПоСубсчетамКорСчетов Тогда
			
			// Выводим только верхний уровень
			Если ВерхнийУровень < ВыборкаОборотыПоКорСчетам.Уровень() Тогда
				Продолжить;
			Иначе
				ВерхнийУровень = ВыборкаОборотыПоКорСчетам.Уровень();
			КонецЕсли;
			
		КонецЕсли;
		
		СтЗначенияРесурсов = Новый Структура(Ресурсы);
		Вставлять = Ложь;
		
		Для каждого Элемент Из СтРесурсы Цикл
			
			Если НЕ БухгалтерскиеОтчеты.ПривестиКЧислу(ВыборкаОборотыПоКорСчетам[Элемент.Ключ+ТипПоля])=0 Тогда
				СтЗначенияРесурсов.Вставить(Элемент.Ключ, ВыборкаОборотыПоКорСчетам[Элемент.Ключ+ТипПоля]);
				
				Вставлять = Истина;
			КонецЕсли;
		КонецЦикла;
		
		// Полученную структуру вставляем в соответствие счетов
		Если Вставлять Тогда
			Соотв.Вставить(ВыборкаОборотыПоКорСчетам.КорСчет, СтЗначенияРесурсов);
		КонецЕсли;
		
	КонецЦикла;

	ВыборкаОборотыПоКорСчетам.Сбросить();
	ВыборкаОборотыПоКорСчетам.Следующий();
	
	// Вывод ресурсов
	Для каждого ЭлементСчет Из Соотв Цикл
		
		Для каждого Элемент Из ЭлементСчет.Значение Цикл
			ВыводимаяОбласть.Параметры[Элемент.Ключ+ТипПоля] = Элемент.Значение;
			
			Расшифровка = Новый Соответствие;
			РасшифровкаОтборПоСчетам = Новый Соответствие;
			
			БухгалтерскиеОтчеты.ЗаменитьОбщиеОтборыНаОтборыДтКт(ОтборДляРасшифровки, РасшифровкаОтборПоСчетам, ВидОборота);
			
			КонечнаяСтрока = (ДанныеГруппировки.Группировка() = "");
			ПромежуточныеДопОтборы = БухгалтерскиеОтчеты.СоздатьСтруктуруДопОграниченийДляОборотноСальдовойВедомостиПоСчету(ЭтотОбъект, 
				ДанныеГруппировки, СтруктураПараметров.МассивГруппировок, КонечнаяСтрока);
				
			ДополнительныеОтборы = Новый Структура;
			БухгалтерскиеОтчеты.ЗаменитьОбщиеОтборыНаОтборыДтКт(ПромежуточныеДопОтборы, ДополнительныеОтборы, ВидОборота);
				
			Расшифровка.Вставить("ДополнительныеОтборы", ДополнительныеОтборы);
			
			Расшифровка.Вставить("Отбор", РасшифровкаОтборПоСчетам);
			Расшифровка.Вставить("ИмяОбъекта", "ОтчетПоПроводкам" + ИмяРегистраБухгалтерии);
			
			СчетДляОграничений = ?(НЕ ЗначениеЗаполнено(ВыборкаОборотыПоКорСчетам.Счет), Счет, ВыборкаОборотыПоКорСчетам.Счет);
			Если ВидОборота = "ДТ" Тогда
				Расшифровка.Вставить("СчетДт", СчетДляОграничений);
				Расшифровка.Вставить("СчетКт", ЭлементСчет.Ключ);
				
				ВыводимаяОбласть.Параметры.РасшифровкаДт = Расшифровка;
				
			Иначе
				Расшифровка.Вставить("СчетДт", ЭлементСчет.Ключ);
				Расшифровка.Вставить("СчетКт", СчетДляОграничений);
				
				ВыводимаяОбласть.Параметры.РасшифровкаКт = Расшифровка;
			КонецЕсли;
			
		КонецЦикла;
		
		СтруктураПараметров.ДокументРезультат.Присоединить(ВыводимаяОбласть);
		
	КонецЦикла;
	
КонецПроцедуры

// Заполняет параметры расшифровки
//
// Параметры:
//	Нет.
//
Процедура ЗаполнитьПараметрыРасшифровки(Область, Выборка, Знач СтруктураПараметров)

	ПараметрыРасшифровки = Новый Соответствие;
	
	ПараметрыРасшифровки.Вставить("ИмяОбъекта", "ОтчетПоПроводкам" + ИмяРегистраБухгалтерии);

	ПараметрыРасшифровки.Вставить("Счет", Счет);

	Если Лев(Выборка.Группировка(), 8) = "Субконто" Тогда

		// надо в структуру доп ограничений поместить все группировки более высокого уровня
		ДополнительныеОтборы = БухгалтерскиеОтчеты.СоздатьСтруктуруДопОграниченийДляОборотноСальдовойВедомостиПоСчету(ЭтотОбъект, Выборка, СтруктураПараметров.МассивГруппировок);
				
		ПараметрыРасшифровки.Вставить("ДополнительныеОтборы", ДополнительныеОтборы);

		СписокРасшифровки = Новый СписокЗначений;

		СписокРасшифровки.Добавить(ПараметрыРасшифровки, "Журнал проводок " + Выборка.Счет);
		
	ИначеЕсли Выборка.Группировка() = "Период" Тогда
		
		ПараметрыРасшифровки.Вставить("ДатаНач", ДатаНач);
		КонечнаяДатаОграничений = БухгалтерскиеОтчеты.ПолучитьДатуОкончанияПериода(Выборка.Период, Период);
		ПараметрыРасшифровки.Вставить("ДатаКон", КонечнаяДатаОграничений);
		
		ПараметрыРасшифровки.Вставить("ОграничениеПоПериоду", Выборка.Период);
		
		ДополнительныеОтборы = БухгалтерскиеОтчеты.СоздатьСтруктуруДопОграниченийДляОборотноСальдовойВедомостиПоСчету(ЭтотОбъект, Выборка, СтруктураПараметров.МассивГруппировок, Истина);
				
		ПараметрыРасшифровки.Вставить("ДополнительныеОтборы", ДополнительныеОтборы);
			
		СписокРасшифровки = Новый СписокЗначений;
			
		СписокРасшифровки.Добавить(ПараметрыРасшифровки, "Журнал проводок " + Выборка.Счет);
		
	Иначе
		СписокРасшифровки = Неопределено;
	КонецЕсли;

	Область.Параметры.Расшифровка = СписокРасшифровки;

КонецПроцедуры


//////////////////////////////////////////////////////////
// ПРОЧИЕ ПРОЦЕДУРЫ И ФУНКЦИИ
//

// Обработчик события начала выбора значения субконто
//
// Параметры:
//	Элемент управления.
//	Стандартная обработка.
//
Процедура НачалоВыбораЗначенияСубконто(Элемент, СтандартнаяОбработка, ТипЗначенияПоля=Неопределено) Экспорт
	
	СписокПараметров = Новый Структура;
	СписокПараметров.Вставить("Дата",         ДатаКон);
	СписокПараметров.Вставить("СчетУчета",    Счет);
	СписокПараметров.Вставить("Номенклатура", Неопределено);
	СписокПараметров.Вставить("Склад", Неопределено);
	СписокПараметров.Вставить("Организация",  Организация);
	СписокПараметров.Вставить("Контрагент",  Неопределено);
	СписокПараметров.Вставить("ДоговорКонтрагента", Неопределено);
	
	// Поищем значения в отборе и в полях выбора субконто
	Для Инд=0 По ПостроительОтчета.Отбор.Количество()-1 Цикл
		
		СтрокаОтбора = ПостроительОтчета.Отбор[Инд];
		
		ЗначениеОтбора=?(ТипЗнч(СтрокаОтбора.Значение)<> Тип("СписокЗначений"), СтрокаОтбора.Значение, СтрокаОтбора.Значение[0].Значение);
		
		Если СтрокаОтбора.ТипЗначения = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура.ТипЗначения Тогда
			СписокПараметров.Вставить("Номенклатура", ЗначениеОтбора);
		ИначеЕсли СтрокаОтбора.ТипЗначения = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады.ТипЗначения Тогда
			СписокПараметров.Вставить("Склад", ЗначениеОтбора);
		ИначеЕсли СтрокаОтбора.ТипЗначения = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты.ТипЗначения Тогда
			СписокПараметров.Вставить("Контрагент", ЗначениеОтбора);
		ИначеЕсли СтрокаОтбора.ТипЗначения = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры.ТипЗначения Тогда
			СписокПараметров.Вставить("ДоговорКонтрагента", ЗначениеОтбора);
		КонецЕсли;
		
	КонецЦикла;
	
	БухгалтерскийУчет.ОбработатьВыборСубконто(Элемент, СтандартнаяОбработка, Организация, СписокПараметров, ТипЗначенияПоля);
	
КонецПроцедуры // ОбработкаВыбораСубконто()

// Заполнение настроек построителя отчетов
Процедура ЗаполнитьНачальныеНастройки() Экспорт
	
	СтарыеНастройки = УправлениеОтчетами.ПолучитьКопиюОтбораВТЗ(ПостроительОтчета.Отбор);
	
	СальдоНачДт=Истина;
	СальдоНачКт=Истина;
	СальдоКонДт=Истина;
	СальдоКонКт=Истина;

	ОборотДт   =Истина;
	ОборотКт   =Истина;
	ОборотДтКорСчета = Истина;
	ОборотКтКорСчета = Истина;
	
	Период = "";
	
	ВсеПериоды = Истина;
	
	ТекстПоля = "";
	ТекстОтбор = "";
	ТекстИтоги = "";
	СтруктураСубконто = Новый Структура;
	
	Сч = 0;
	Для Каждого ВидСубконто Из Счет.ВидыСубконто Цикл
		
		Сч = Сч+1;
		
		ТекстПоля = ТекстПоля + ", Регистр.Субконто" +Сч+" КАК Субконто"+Сч;
		ТекстОтбор = ТекстОтбор + ", Субконто"+Сч+".*";
		ТекстИтоги = ТекстИтоги + ", Субконто"+Сч+".*";
		
		СтруктураСубконто.Вставить("Субконто"+Сч, ВидСубконто.ВидСубконто);
		
	КонецЦикла;
	
	ТекстПоля = Сред(ТекстПоля, 2);
	ТекстОтбор = Сред(ТекстОтбор, 2);
	ТекстИтоги = Сред(ТекстИтоги, 2);
	
	ПостроительОтчета.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Регистр.СуммаОборот КАК СуммаОборот
	|	" +?(НЕ ПустаяСтрока(ТекстПоля), "{ВЫБРАТЬ " +ТекстПоля+ "}", "") + "
	|ИЗ
	|	РегистрБухгалтерии."+ИмяРегистраБухгалтерии+".Обороты(,,,Счет В Иерархии (&Счет),," + ?(НЕ ПустаяСтрока(ТекстОтбор), "{"+ТекстОтбор+"}", "") + ") КАК Регистр
	|
	|ИТОГИ СУММА(СуммаОборот) ПО ОБЩИЕ
	|	" +?(НЕ ПустаяСтрока(ТекстИтоги), "{ИТОГИ ПО "+ТекстИтоги+"}", "");
	
	Сч = 0;
	Для каждого Элемент Из СтруктураСубконто Цикл
		Сч = Сч+1;
		Поле = ПостроительОтчета.ДоступныеПоля.Найти(Элемент.Ключ);
		Поле.ТипЗначения = Элемент.Значение.ТипЗначения;
		Поле.Представление = Элемент.Значение.Наименование;
		
		ПостроительОтчета.Отбор.Добавить(Элемент.Ключ);
	КонецЦикла;
	
	УправлениеОтчетами.УстановитьОтборИзТаблицы(ПостроительОтчета.Отбор, СтарыеНастройки);
	
КонецПроцедуры

// Процедура выполняется при смене счета
Процедура ОбработкаВыбораСчета() Экспорт

	
	ПоВалютам = Счет.Валютный; 
	
	ПоКоличеству = Счет.Количественный;
	
	ЗаполнитьНачальныеНастройки();
	
	БухгалтерскиеОтчеты.СформироватьПервоначальныйОтборПостроителяПоСубконто(ПостроительОтчета, Счет);
	
КонецПроцедуры

// Настраивает отчет по заданным параметрам (например, для расшифровки)
Процедура Настроить(СтруктураПараметров) Экспорт
	
	Параметры = Новый Соответствие;
	
	Для каждого Элемент Из СтруктураПараметров Цикл
		Параметры.Вставить(Элемент.Ключ, Элемент.Значение);
	КонецЦикла; 

	Счет = Параметры["Счет"];
	Организация = Параметры["Организация"];
	ДатаНач = Параметры["ДатаНач"];
	ДатаКон = Параметры["ДатаКон"];
	
	Если Параметры["ЗаполнитьПоУмолчанию"] = Истина Тогда
		
		// Настраиваем по умолчанию
		ОбработкаВыбораСчета();
		
	Иначе
		
		ПоВалютам    = Параметры["ПоВалютам"];
		ПоКоличеству = Параметры["ПоКоличеству"];
	
		ЗаполнитьНачальныеНастройки();
		
	КонецЕсли;
	
	Период = Параметры["Период"];
	ВсеПериоды = Параметры["ВсеПериоды"];
	
	СтрокиОтбора = Параметры["Отбор"];
	БухгалтерскиеОтчеты.ВосстановитьОтборПостроителяОтчетовПоПараметрам(ПостроительОтчета, СтрокиОтбора);

КонецПроцедуры

// Обработка расшифровки
//
// Параметры:
//	Нет.
//
Процедура ОбработкаРасшифровкиСтандартногоОтчета(Расшифровка) Экспорт
	
	ОграничениеПоПериоду = Неопределено;
	Расшифровка.Свойство("ОграничениеПопериоду", ОграничениеПоПериоду);
	
	Если ОграничениеПоПериоду <> Неопределено Тогда
			
		ПериодС = ОграничениеПоПериоду;
		ПериодПо = БухгалтерскиеОтчеты.ПолучитьДатуОкончанияПериода(ПериодС, Период);
									
	Иначе
					
		ПериодС  = ДатаНач;
		ПериодПо = ДатаКон;
					
	КонецЕсли;
				
	Если Врег(Период) = "РЕГИСТРАТОР" Тогда
					
		Если ОграничениеПоПериоду <> NULL
			И ЗначениеЗаполнено(ОграничениеПоПериоду) Тогда
			
			Расшифровка.Вставить("Регистратор", ОграничениеПоПериоду);
			Расшифровка.Вставить("ПоРегистратору", Истина);
		
		КонецЕсли;
					
	Иначе
					
		Если ДатаКон<>'00010101' Тогда
			ПериодПо = Мин(КонецДня(ДатаКон), ПериодПо);
		КонецЕсли;
					
		Расшифровка.Вставить("ДатаНач", ПериодС);
		Расшифровка.Вставить("ДатаКон", ПериодПо);
					
	КонецЕсли;
			
	Отчет = Отчеты[Расшифровка["ИмяОбъекта"]].Создать();
	
	ФормаОтчета = Отчет.ПолучитьФорму(, , Новый УникальныйИдентификатор());
	
	Попытка
		
		БухгалтерскиеОтчеты.ДополнитьДопОтборамиРасшифровкуДанных(Расшифровка);
		
		Отчет.Настроить(Расшифровка);
		
		ФормаОтчета.ПоказыватьЗаголовок = Расшифровка["ПоказыватьЗаголовок"];
		
		ФормаОтчета.ОбновитьОтчет();
		
	Исключение
		
	КонецПопытки;
	
	ФормаОтчета.Открыть();

КонецПроцедуры // ОбработкаРасшифровкиСтандартногоОтчета()


//////////////////////////////////////////////////////////
// МОДУЛЬ ОБЪЕКТА
//

ИмяРегистраБухгалтерии = "Международный";

Период="МЕСЯЦ";

#КонецЕсли